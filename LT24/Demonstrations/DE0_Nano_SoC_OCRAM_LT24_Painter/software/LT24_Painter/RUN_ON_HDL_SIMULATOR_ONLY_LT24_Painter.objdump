
RUN_ON_HDL_SIMULATOR_ONLY_LT24_Painter.elf:     file format elf32-littlenios2
RUN_ON_HDL_SIMULATOR_ONLY_LT24_Painter.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080150

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00026fc0 memsz 0x00026fc0 flags r-x
    LOAD off    0x00027fe0 vaddr 0x000a6fe0 paddr 0x000aa2c0 align 2**12
         filesz 0x000032e0 memsz 0x000032e0 flags rw-
    LOAD off    0x0002b5a0 vaddr 0x000ad5a0 paddr 0x000ad5a0 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000130  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cd30  00080150  00080150  00001150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0001a160  0008ce80  0008ce80  0000de80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000032e0  000a6fe0  000aa2c0  00027fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  000ad5a0  000ad5a0  0002b5a0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000ad6f4  000ad6f4  0002b2c0  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  0002b2c0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000bd0  00000000  00000000  0002b300  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000167d9  00000000  00000000  0002bed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006e0a  00000000  00000000  000426a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000082a6  00000000  00000000  000494b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002230  00000000  00000000  0005175c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000046d3  00000000  00000000  0005398c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000b0a7  00000000  00000000  0005805f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d00  00000000  00000000  00063108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00068a77  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000a  00000000  00000000  00068a7a  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00068a84  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00068a85  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00068a86  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00068a8a  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00068a8e  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00068a92  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00068a9b  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00068aa4  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  00068aad  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000027  00000000  00000000  00068ab6  2**0
                  CONTENTS, READONLY
 28 .jdi          00003da8  00000000  00000000  00068add  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000723e0  00000000  00000000  0006c885  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080150 l    d  .text	00000000 .text
0008ce80 l    d  .rodata	00000000 .rodata
000a6fe0 l    d  .rwdata	00000000 .rwdata
000ad5a0 l    d  .bss	00000000 .bss
000ad6f4 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../LT24_Painter_bsp//obj/HAL/src/crt0.o
00080168 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tahomabold_20.c
0008ce80 l     O .rodata	000000b6 tahomabold_20_33
0008cf36 l     O .rodata	00000104 tahomabold_20_34
0008d03a l     O .rodata	000001a0 tahomabold_20_35
0008d1da l     O .rodata	00000152 tahomabold_20_36
0008d32c l     O .rodata	00000270 tahomabold_20_37
0008d59c l     O .rodata	000001ba tahomabold_20_38
0008d756 l     O .rodata	0000009c tahomabold_20_39
0008d7f2 l     O .rodata	000000ea tahomabold_20_40
0008d8dc l     O .rodata	000000ea tahomabold_20_41
0008d9c6 l     O .rodata	00000152 tahomabold_20_42
0008db18 l     O .rodata	000001a0 tahomabold_20_43
0008dcb8 l     O .rodata	0000009c tahomabold_20_44
0008dd54 l     O .rodata	000000ea tahomabold_20_45
0008de3e l     O .rodata	0000009c tahomabold_20_46
0008deda l     O .rodata	00000138 tahomabold_20_47
0008e012 l     O .rodata	00000152 tahomabold_20_48
0008e164 l     O .rodata	00000152 tahomabold_20_49
0008e2b6 l     O .rodata	00000152 tahomabold_20_50
0008e408 l     O .rodata	00000152 tahomabold_20_51
0008e55a l     O .rodata	00000152 tahomabold_20_52
0008e6ac l     O .rodata	00000152 tahomabold_20_53
0008e7fe l     O .rodata	00000152 tahomabold_20_54
0008e950 l     O .rodata	00000152 tahomabold_20_55
0008eaa2 l     O .rodata	00000152 tahomabold_20_56
0008ebf4 l     O .rodata	00000152 tahomabold_20_57
0008ed46 l     O .rodata	000000b6 tahomabold_20_58
0008edfc l     O .rodata	000000b6 tahomabold_20_59
0008eeb2 l     O .rodata	000001a0 tahomabold_20_60
0008f052 l     O .rodata	000001a0 tahomabold_20_61
0008f1f2 l     O .rodata	000001a0 tahomabold_20_62
0008f392 l     O .rodata	0000011e tahomabold_20_63
0008f4b0 l     O .rodata	000001d4 tahomabold_20_64
0008f684 l     O .rodata	0000016c tahomabold_20_65
0008f7f0 l     O .rodata	0000016c tahomabold_20_66
0008f95c l     O .rodata	00000152 tahomabold_20_67
0008faae l     O .rodata	00000186 tahomabold_20_68
0008fc34 l     O .rodata	00000138 tahomabold_20_69
0008fd6c l     O .rodata	00000138 tahomabold_20_70
0008fea4 l     O .rodata	00000186 tahomabold_20_71
0009002a l     O .rodata	00000186 tahomabold_20_72
000901b0 l     O .rodata	00000104 tahomabold_20_73
000902b4 l     O .rodata	00000104 tahomabold_20_74
000903b8 l     O .rodata	0000016c tahomabold_20_75
00090524 l     O .rodata	0000011e tahomabold_20_76
00090642 l     O .rodata	000001d4 tahomabold_20_77
00090816 l     O .rodata	00000186 tahomabold_20_78
0009099c l     O .rodata	00000186 tahomabold_20_79
00090b22 l     O .rodata	00000152 tahomabold_20_80
00090c74 l     O .rodata	00000186 tahomabold_20_81
00090dfa l     O .rodata	00000186 tahomabold_20_82
00090f80 l     O .rodata	00000152 tahomabold_20_83
000910d2 l     O .rodata	00000138 tahomabold_20_84
0009120a l     O .rodata	00000186 tahomabold_20_85
00091390 l     O .rodata	0000016c tahomabold_20_86
000914fc l     O .rodata	00000222 tahomabold_20_87
0009171e l     O .rodata	0000016c tahomabold_20_88
0009188a l     O .rodata	0000016c tahomabold_20_89
000919f6 l     O .rodata	00000138 tahomabold_20_90
00091b2e l     O .rodata	000000ea tahomabold_20_91
00091c18 l     O .rodata	00000138 tahomabold_20_92
00091d50 l     O .rodata	000000ea tahomabold_20_93
00091e3a l     O .rodata	000001a0 tahomabold_20_94
00091fda l     O .rodata	00000152 tahomabold_20_95
0009212c l     O .rodata	0000011e tahomabold_20_96
0009224a l     O .rodata	00000138 tahomabold_20_97
00092382 l     O .rodata	00000152 tahomabold_20_98
000924d4 l     O .rodata	0000011e tahomabold_20_99
000925f2 l     O .rodata	00000152 tahomabold_20_100
00092744 l     O .rodata	00000138 tahomabold_20_101
0009287c l     O .rodata	000000d0 tahomabold_20_102
0009294c l     O .rodata	00000152 tahomabold_20_103
00092a9e l     O .rodata	00000152 tahomabold_20_104
00092bf0 l     O .rodata	0000009c tahomabold_20_105
00092c8c l     O .rodata	000000ea tahomabold_20_106
00092d76 l     O .rodata	00000138 tahomabold_20_107
00092eae l     O .rodata	0000009c tahomabold_20_108
00092f4a l     O .rodata	000001ee tahomabold_20_109
00093138 l     O .rodata	00000152 tahomabold_20_110
0009328a l     O .rodata	00000138 tahomabold_20_111
000933c2 l     O .rodata	00000152 tahomabold_20_112
00093514 l     O .rodata	00000152 tahomabold_20_113
00093666 l     O .rodata	000000ea tahomabold_20_114
00093750 l     O .rodata	00000104 tahomabold_20_115
00093854 l     O .rodata	000000d0 tahomabold_20_116
00093924 l     O .rodata	00000152 tahomabold_20_117
00093a76 l     O .rodata	00000138 tahomabold_20_118
00093bae l     O .rodata	000001d4 tahomabold_20_119
00093d82 l     O .rodata	00000138 tahomabold_20_120
00093eba l     O .rodata	00000138 tahomabold_20_121
00093ff2 l     O .rodata	0000011e tahomabold_20_122
00094110 l     O .rodata	00000138 tahomabold_20_123
00094248 l     O .rodata	00000152 tahomabold_20_124
0009439a l     O .rodata	00000138 tahomabold_20_125
000944d2 l     O .rodata	000001a0 tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.c
00094672 l     O .rodata	000001b8 tahomabold_32_33
0009482a l     O .rodata	00000280 tahomabold_32_34
00094aaa l     O .rodata	00000410 tahomabold_32_35
00094eba l     O .rodata	00000320 tahomabold_32_36
000951da l     O .rodata	000005f0 tahomabold_32_37
000957ca l     O .rodata	00000410 tahomabold_32_38
00095bda l     O .rodata	00000168 tahomabold_32_39
00095d42 l     O .rodata	00000258 tahomabold_32_40
00095f9a l     O .rodata	00000258 tahomabold_32_41
000961f2 l     O .rodata	00000320 tahomabold_32_42
00096512 l     O .rodata	00000410 tahomabold_32_43
00096922 l     O .rodata	00000190 tahomabold_32_44
00096ab2 l     O .rodata	00000230 tahomabold_32_45
00096ce2 l     O .rodata	00000190 tahomabold_32_46
00096e72 l     O .rodata	000002d0 tahomabold_32_47
00097142 l     O .rodata	00000320 tahomabold_32_48
00097462 l     O .rodata	00000320 tahomabold_32_49
00097782 l     O .rodata	00000320 tahomabold_32_50
00097aa2 l     O .rodata	00000320 tahomabold_32_51
00097dc2 l     O .rodata	00000320 tahomabold_32_52
000980e2 l     O .rodata	00000320 tahomabold_32_53
00098402 l     O .rodata	00000320 tahomabold_32_54
00098722 l     O .rodata	00000320 tahomabold_32_55
00098a42 l     O .rodata	00000320 tahomabold_32_56
00098d62 l     O .rodata	00000320 tahomabold_32_57
00099082 l     O .rodata	000001e0 tahomabold_32_58
00099262 l     O .rodata	000001e0 tahomabold_32_59
00099442 l     O .rodata	00000410 tahomabold_32_60
00099852 l     O .rodata	00000410 tahomabold_32_61
00099c62 l     O .rodata	00000410 tahomabold_32_62
0009a072 l     O .rodata	000002d0 tahomabold_32_63
0009a342 l     O .rodata	00000488 tahomabold_32_64
0009a7ca l     O .rodata	00000370 tahomabold_32_65
0009ab3a l     O .rodata	00000370 tahomabold_32_66
0009aeaa l     O .rodata	00000348 tahomabold_32_67
0009b1f2 l     O .rodata	000003c0 tahomabold_32_68
0009b5b2 l     O .rodata	00000320 tahomabold_32_69
0009b8d2 l     O .rodata	000002f8 tahomabold_32_70
0009bbca l     O .rodata	000003c0 tahomabold_32_71
0009bf8a l     O .rodata	000003c0 tahomabold_32_72
0009c34a l     O .rodata	00000258 tahomabold_32_73
0009c5a2 l     O .rodata	00000280 tahomabold_32_74
0009c822 l     O .rodata	00000398 tahomabold_32_75
0009cbba l     O .rodata	000002d0 tahomabold_32_76
0009ce8a l     O .rodata	00000488 tahomabold_32_77
0009d312 l     O .rodata	000003e8 tahomabold_32_78
0009d6fa l     O .rodata	000003e8 tahomabold_32_79
0009dae2 l     O .rodata	00000348 tahomabold_32_80
0009de2a l     O .rodata	000003e8 tahomabold_32_81
0009e212 l     O .rodata	000003c0 tahomabold_32_82
0009e5d2 l     O .rodata	00000320 tahomabold_32_83
0009e8f2 l     O .rodata	00000320 tahomabold_32_84
0009ec12 l     O .rodata	000003c0 tahomabold_32_85
0009efd2 l     O .rodata	00000370 tahomabold_32_86
0009f342 l     O .rodata	00000528 tahomabold_32_87
0009f86a l     O .rodata	00000370 tahomabold_32_88
0009fbda l     O .rodata	00000370 tahomabold_32_89
0009ff4a l     O .rodata	00000320 tahomabold_32_90
000a026a l     O .rodata	00000258 tahomabold_32_91
000a04c2 l     O .rodata	000002d0 tahomabold_32_92
000a0792 l     O .rodata	00000258 tahomabold_32_93
000a09ea l     O .rodata	00000410 tahomabold_32_94
000a0dfa l     O .rodata	00000320 tahomabold_32_95
000a111a l     O .rodata	000002a8 tahomabold_32_96
000a13c2 l     O .rodata	000002f8 tahomabold_32_97
000a16ba l     O .rodata	00000320 tahomabold_32_98
000a19da l     O .rodata	000002a8 tahomabold_32_99
000a1c82 l     O .rodata	00000320 tahomabold_32_100
000a1fa2 l     O .rodata	000002f8 tahomabold_32_101
000a229a l     O .rodata	00000230 tahomabold_32_102
000a24ca l     O .rodata	00000320 tahomabold_32_103
000a27ea l     O .rodata	00000320 tahomabold_32_104
000a2b0a l     O .rodata	00000190 tahomabold_32_105
000a2c9a l     O .rodata	00000208 tahomabold_32_106
000a2ea2 l     O .rodata	000002f8 tahomabold_32_107
000a319a l     O .rodata	00000190 tahomabold_32_108
000a332a l     O .rodata	000004d8 tahomabold_32_109
000a3802 l     O .rodata	00000320 tahomabold_32_110
000a3b22 l     O .rodata	00000320 tahomabold_32_111
000a3e42 l     O .rodata	00000320 tahomabold_32_112
000a4162 l     O .rodata	00000320 tahomabold_32_113
000a4482 l     O .rodata	00000230 tahomabold_32_114
000a46b2 l     O .rodata	00000280 tahomabold_32_115
000a4932 l     O .rodata	00000208 tahomabold_32_116
000a4b3a l     O .rodata	00000320 tahomabold_32_117
000a4e5a l     O .rodata	000002f8 tahomabold_32_118
000a5152 l     O .rodata	00000460 tahomabold_32_119
000a55b2 l     O .rodata	000002f8 tahomabold_32_120
000a58aa l     O .rodata	000002d0 tahomabold_32_121
000a5b7a l     O .rodata	000002a8 tahomabold_32_122
000a5e22 l     O .rodata	00000320 tahomabold_32_123
000a6142 l     O .rodata	00000320 tahomabold_32_124
000a6462 l     O .rodata	00000320 tahomabold_32_125
000a6782 l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 geometry.c
00000000 l    df *ABS*	00000000 ILI9341.c
00000000 l    df *ABS*	00000000 simple_graphics.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 gui.c
000ad5a0 l     O .bss	00000004 x.3925
000aa280 l     O .rwdata	00000004 y.3926
00000000 l    df *ABS*	00000000 gui_vpg.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 touch_spi.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000876d4 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
000a8b8c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0008a518 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
0008aae0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000aa29c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000a9074 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008bd58 l     F .text	00000058 altera_avalon_jtag_uart_timeout
0008bdb0 l     F .text	00000104 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0008c3a4 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0008c530 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00081be0 g     F .text	00000078 vid_draw_horiz_line
0008550c g     F .text	00000124 I2C_Read
000806e0 g     F .text	0000006c LCD_DrawPoint
0008b9dc g     F .text	00000060 alt_main
0008a4dc g     F .text	00000020 strcpy
0008a31c g     F .text	00000080 _puts_r
000ad5f4 g     O .bss	00000100 alt_irq
00081d44 g     F .text	0000006c vid_color_convert16_24
0008726c g     F .text	0000014c sqrt
000862ac g     F .text	000000a0 I2CL_Read16
000aa2c0 g       *ABS*	00000000 __flash_rwdata_start
00086c64 g     F .text	00000164 touch_enable_penirq
000ad6f4 g       *ABS*	00000000 __alt_heap_start
00086668 g     F .text	00000064 QUEUE_IsFull
00080db8 g     F .text	00000138 LCD_Pattern_Horizon
0008a2d0 g     F .text	0000004c printf
00084154 g     F .text	000001dc GUI_DeskInit
0008ba40 g     F .text	00000004 __malloc_unlock
00081834 g     F .text	00000150 vid_draw_box
0008051c g     F .text	00000044 PtCopy
0008367c g     F .text	0000025c vid_print_string_alpha
0008b6a4 g     F .text	0000006c memmove
000a8760 g     O .rwdata	00000415 cour10_font_array
00081610 g     F .text	0000011c vid_move_block
00089b94 g     F .text	00000010 __errno
00086130 g     F .text	0000017c I2CL_MultipleWrite
00083fa4 g     F .text	000000e0 vid_string_pixel_length_alpha
00085a18 g     F .text	00000160 i2c_write
0008b608 g     F .text	0000009c __sfvwrite_small_str
00080000 g     F .entry	0000000c __reset
00085290 g     F .text	00000040 my_wait
00080020 g       *ABS*	00000000 __flash_exceptions_start
00080660 g     F .text	00000080 LCD_Clear
000ad5b0 g     O .bss	00000004 errno
00085630 g     F .text	00000178 I2C_Read16
000ad5bc g     O .bss	00000004 alt_argv
000b227c g       *ABS*	00000000 _gp
0008bbbc g     F .text	00000004 usleep
00084a68 g     F .text	000000b0 VPG_ColorPanel
000838d8 g     F .text	00000148 seperate_color_channels
000aa0d4 g     O .rwdata	00000180 alt_fd_list
0008c930 g     F .text	00000090 alt_find_dev
0008a24c g     F .text	00000028 memcpy
00089a18 g     F .text	000000d0 .hidden __floatsidf
00082544 g     F .text	00000758 vid_round_corner_points
00086990 g     F .text	00000068 Touch_UnInit
0008c684 g     F .text	00000104 alt_io_redirect
00088938 g     F .text	000000ec .hidden __ltdf2
0008ce80 g       *ABS*	00000000 __DTOR_END__
00084330 g     F .text	00000090 GUI_CheckButton
0008a39c g     F .text	00000014 puts
00080fd0 g     F .text	00000060 vid_clean_screen
00087664 g     F .text	00000068 __fpclassifyd
00086628 g     F .text	00000040 QUEUE_IsEmpty
0008113c g     F .text	00000154 vid_scroll_string_init
0008bff8 g     F .text	0000013c altera_avalon_jtag_uart_read
00089ba4 g     F .text	00000014 malloc
0008a294 g     F .text	0000003c _printf_r
00086820 g     F .text	00000170 Touch_Init
000877d8 g     F .text	00000008 .hidden __udivsi3
0008b160 g     F .text	00000040 vsnprintf
000843c0 g     F .text	00000238 GUI_DeskDraw
0008cadc g     F .text	00000050 alt_icache_flush
000857a8 g     F .text	0000017c I2C_MultipleRead
000ad5ac g     O .bss	00000004 __malloc_top_pad
000867f0 g     F .text	00000030 QUEUE_Empty
00086760 g     F .text	00000090 QUEUE_Pop
0008a3b0 g     F .text	00000050 _sbrk_r
00086bf4 g     F .text	00000030 touch_empty_fifo
00080434 g     F .text	00000034 RectHeight
000aa2a8 g     O .rwdata	00000004 alt_max_fd
00084a44 g     F .text	00000024 VPG_XLine
000ad5a8 g     O .bss	00000004 __malloc_max_sbrked_mem
00085e08 g     F .text	00000168 I2CL_Read
000a7ba0 g     O .rwdata	00000bc0 tahomabold_32
000877e8 g     F .text	0000087c .hidden __adddf3
00084684 g     F .text	00000080 GUI_ClearPaintArea
000801f0 g     F .text	00000040 PtSet
000aa284 g     O .rwdata	00000004 __fdlib_version
000aa288 g     O .rwdata	00000004 _global_impure_ptr
00082050 g     F .text	0000013c vid_draw_circle
000ad6f4 g       *ABS*	00000000 __bss_end
0008b898 g     F .text	00000078 alt_iic_isr_register
0008bac4 g     F .text	000000f8 alt_tick
000853cc g     F .text	00000140 I2C_Write16
00080314 g     F .text	00000088 RectOffset
00081df0 g     F .text	00000260 vid_draw_sloped_line
00084c14 g     F .text	000000e4 VPG_VGrid
0008b880 g     F .text	00000018 alt_ic_irq_enabled
000852d0 g     F .text	000000fc I2C_Write
0008218c g     F .text	000003b8 vid_draw_round_corner_box
0008ba90 g     F .text	00000034 alt_alarm_stop
000ad5b4 g     O .bss	00000004 alt_irq_active
00080ef0 g     F .text	000000e0 LCD_Pattern_Vertical
000800ec g     F .exceptions	00000064 alt_irq_handler
000aa254 g     O .rwdata	00000028 alt_dev_null
0008634c g     F .text	0000008c I2CL_Write16
00085924 g     F .text	00000084 i2c_start
0008c518 g     F .text	00000018 alt_dcache_flush_all
00087118 g     F .text	00000078 touch_alarm_callback
00089998 g     F .text	00000080 .hidden __fixdfsi
00086c24 g     F .text	00000040 touch_is_pen_pressed
000aa2c0 g       *ABS*	00000000 __ram_rwdata_end
000830d0 g     F .text	000003a4 vid_draw_triangle
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory
000aa2ac g     O .rwdata	00000008 alt_dev_list
0008bbc0 g     F .text	000000e4 write
000a8b78 g     O .rwdata	00000014 szPallete
00083550 g     F .text	0000012c CropImage16
000a6fe0 g       *ABS*	00000000 __ram_rodata_end
00088938 g     F .text	000000ec .hidden __ledf2
00081290 g     F .text	00000380 vid_scroll_string
00086408 g     F .text	0000006c myprintf
00086df8 g     F .text	00000320 touch_get_xy
000877e0 g     F .text	00000008 .hidden __umodsi3
00086b7c g     F .text	00000078 touch_isr
00080400 g     F .text	00000034 RectWidth
00083474 g     F .text	000000dc CopyImage16
000ad6f4 g       *ABS*	00000000 end
000850fc g     F .text	000000ac GUI_VPG
00084928 g     F .text	00000064 GUI_ShowInfo
0008beb4 g     F .text	00000080 altera_avalon_jtag_uart_init
00081984 g     F .text	000000f0 vid_print_char
0008ce80 g       *ABS*	00000000 __CTOR_LIST__
000b8270 g       *ABS*	00000000 __alt_stack_pointer
0008c3e0 g     F .text	00000050 alt_avalon_timer_sc_init
00089ae8 g     F .text	000000ac .hidden __clzsi2
0008c134 g     F .text	00000188 altera_avalon_jtag_uart_write
00084f7c g     F .text	00000180 GUI_ShowPAT
00082cf0 g     F .text	00000054 min3
00081030 g     F .text	000000cc vid_draw_line
0008ab4c g     F .text	00000538 ___vfprintf_internal_r
0008a400 g     F .text	00000064 _sprintf_r
0008b2c4 g     F .text	00000298 _free_r
000805ac g     F .text	000000b4 LCD_SetCursor
0008ccd4 g     F .text	00000198 __call_exitprocs
00084b18 g     F .text	000000fc VPG_Grid
000aa290 g     O .rwdata	00000004 __malloc_sbrk_base
00080150 g     F .text	0000001c _start
000ad5c8 g     O .bss	00000004 _alt_tick_rate
00086dc8 g     F .text	00000030 touch_clear_input
0008c2bc g     F .text	000000e8 alt_avalon_spi_command
000866cc g     F .text	00000094 QUEUE_Push
000ad5c4 g     O .bss	00000004 _alt_nticks
00082da8 g     F .text	000000f0 vid_put_pixel_in_span_map
00084ddc g     F .text	000001a0 VPG_ColorBar
0008bcc4 g     F .text	00000058 alt_sys_init
0008cb90 g     F .text	00000144 __register_exitproc
00081b4c g     F .text	00000094 vid_paint_block
0008bf34 g     F .text	00000050 altera_avalon_jtag_uart_close
000a6fe0 g       *ABS*	00000000 __ram_rwdata_start
0008ce80 g       *ABS*	00000000 __ram_rodata_start
000ad5cc g     O .bss	00000028 __malloc_current_mallinfo
00084cf8 g     F .text	000000e4 VPG_HGrid
00081ca4 g     F .text	000000a0 vid_color_convert24_16
0008bd1c g     F .text	00000010 altera_avalon_jtag_uart_read_fd
0008ca8c g     F .text	00000050 alt_get_fd
0008c430 g     F .text	00000008 alt_busy_sleep
00084704 g     F .text	00000224 GUI
00083b90 g     F .text	00000254 alpha_blending
0008cb60 g     F .text	00000030 memcmp
0008bd3c g     F .text	00000010 altera_avalon_jtag_uart_close_fd
000ad6f4 g       *ABS*	00000000 __alt_stack_base
0008bd4c g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00088064 g     F .text	000008d4 .hidden __divdf3
000a8c6c g     O .rwdata	00000408 __malloc_av_
0008b0a8 g     F .text	000000b8 _vsnprintf_r
000859a8 g     F .text	00000070 i2c_stop
00088a24 g     F .text	000006ec .hidden __muldf3
0008c9c0 g     F .text	000000cc alt_find_file
0008c538 g     F .text	00000078 alt_dev_llist_insert
0008ba3c g     F .text	00000004 __malloc_lock
00081db0 g     F .text	00000040 vid_copy_line_to_frame_buffer
0008ba44 g     F .text	0000004c sbrk
0008a584 g     F .text	00000538 ___svfprintf_internal_r
0008b55c g     F .text	000000ac __sfvwrite_small_dev
00086588 g     F .text	00000070 QUEUE_New
000ad5a0 g       *ABS*	00000000 __bss_start
0008074c g     F .text	0000066c LCD_Init
0008a274 g     F .text	00000020 memset
000851a8 g     F .text	000000e8 main
000ad5b8 g     O .bss	00000004 alt_envp
000ad5a4 g     O .bss	00000004 __malloc_max_total_mem
00086474 g     F .text	00000088 myprintf_hexarray
0008bd2c g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0008498c g     F .text	00000058 GUI_ShowTouchPoint
00085b78 g     F .text	00000150 i2c_read
000a6fe0 g     O .rwdata	00000bc0 tahomabold_20
000876cc g     F .text	00000008 matherr
000b8270 g       *ABS*	00000000 __alt_heap_limit
00083de4 g     F .text	000001c0 vid_print_char_alpha
000aa27c g     O .rwdata	00000004 cour10_font
00089bcc g     F .text	00000680 _malloc_r
000aa2bc g     O .rwdata	00000004 alt_errno
00080468 g     F .text	000000b4 PtDistance
00080230 g     F .text	0000005c RectSet
00087744 g     F .text	00000048 .hidden __divsi3
00080560 g     F .text	0000004c Delay_Ms
0008039c g     F .text	00000064 RectCopy
0008b1a0 g     F .text	00000124 _malloc_trim_r
0008ce80 g       *ABS*	00000000 __CTOR_END__
00083b50 g     F .text	00000040 read_from_frame
0008ce80 g       *ABS*	00000000 __flash_rodata_start
0008ce80 g       *ABS*	00000000 __DTOR_LIST__
00081b10 g     F .text	0000003c vid_get_pixel
0008bca4 g     F .text	00000020 alt_irq_init
0008c904 g     F .text	00000024 alt_release_fd
0008a464 g     F .text	00000078 sprintf
000a6ebd g     O .rodata	00000100 .hidden __clz_tab
000863d8 g     F .text	00000030 debug_output
0008cb2c g     F .text	00000014 atexit
0008b710 g     F .text	00000058 _write_r
0008016c g     F .text	00000084 IsPtInRect
000aa28c g     O .rwdata	00000004 _impure_ptr
000ad5c0 g     O .bss	00000004 alt_argc
0008c614 g     F .text	00000064 _do_dtors
000864fc g     F .text	0000008c myprintf_dwordarray
00085f70 g     F .text	000001c0 I2CL_MultipleRead
00080020 g       .exceptions	00000000 alt_irq_entry
00086a30 g     F .text	0000014c Touch_GetXY
000aa2b4 g     O .rwdata	00000008 alt_fs_list
0008aabc g     F .text	00000024 __vfprintf_internal_unused
0008172c g     F .text	00000108 vid_print_string
00080020 g       *ABS*	00000000 __ram_exceptions_start
000873b8 g     F .text	000002ac __ieee754_sqrt
0008b7fc g     F .text	00000004 alt_ic_isr_register
000aa2c0 g       *ABS*	00000000 _edata
000ad6f4 g       *ABS*	00000000 _end
000849e4 g     F .text	00000060 ShowInfo
00082c9c g     F .text	00000054 max3
00080150 g       *ABS*	00000000 __ram_exceptions_end
0008bf84 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
0008b840 g     F .text	00000040 alt_ic_irq_disable
00081c58 g     F .text	0000004c vid_merge_colors
000aa294 g     O .rwdata	00000004 __malloc_trim_threshold
0008c928 g     F .text	00000008 altera_nios2_qsys_irq_init
0008cb40 g     F .text	00000020 exit
000845f8 g     F .text	0000008c IsContinuedPoint
0008778c g     F .text	0000004c .hidden __modsi3
000b8270 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000865f8 g     F .text	00000030 QUEUE_Delete
00087190 g     F .text	000000dc touch_xy_transform
00081a74 g     F .text	0000009c vid_set_pixel
0008ce6c g     F .text	00000014 _exit
0008b768 g     F .text	00000094 alt_alarm_start
000810fc g     F .text	00000040 vid_scroll_string_quit
0008a4fc g     F .text	0000001c strlen
0008c788 g     F .text	0000017c open
0008028c g     F .text	00000088 RectInflate
0008c678 g     F .text	0000000c alt_icache_flush_all
000aa298 g     O .rwdata	00000004 alt_priority_mask
0008b800 g     F .text	00000040 alt_ic_irq_enable
0008b084 g     F .text	00000024 __vfprintf_internal
00089110 g     F .text	00000888 .hidden __subdf3
00082e98 g     F .text	00000238 vid_bres_scan_edges
000aa2a0 g     O .rwdata	00000008 alt_alarm_list
00082d44 g     F .text	00000064 max_diff3
0008c5b0 g     F .text	00000064 _do_ctors
00085cc8 g     F .text	00000140 I2CL_Write
00084084 g     F .text	000000d0 GUI_ShowWelcome
00083a20 g     F .text	00000130 merge_color_channels
0008c438 g     F .text	000000e0 close
0008b910 g     F .text	000000cc alt_load
000869f8 g     F .text	00000038 Touch_EmptyFifo
00089bb8 g     F .text	00000014 free



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	08405414 	ori	at,at,336
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)

00080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defffe04 	addi	sp,sp,-8
   800f0:	dfc00115 	stw	ra,4(sp)
   800f4:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   800f8:	000b313a 	rdctl	r5,ipending
   800fc:	040002f4 	movhi	r16,11
   80100:	84357d04 	addi	r16,r16,-10764
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80104:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
   80108:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8010c:	1000051e 	bne	r2,zero,80124 <alt_irq_handler+0x38>
  active = alt_irq_pending ();

  do
  {
    i = 0;
    mask = 1;
   80110:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80114:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80118:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
   8011c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   80120:	203ffc26 	beq	r4,zero,80114 <__alt_data_end+0xfffc7ea4>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   80124:	180690fa 	slli	r3,r3,3
   80128:	80c7883a 	add	r3,r16,r3
   8012c:	18800017 	ldw	r2,0(r3)
   80130:	19000117 	ldw	r4,4(r3)
   80134:	103ee83a 	callr	r2
   80138:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   8013c:	283ff11e 	bne	r5,zero,80104 <__alt_data_end+0xfffc7e94>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   80140:	dfc00117 	ldw	ra,4(sp)
   80144:	dc000017 	ldw	r16,0(sp)
   80148:	dec00204 	addi	sp,sp,8
   8014c:	f800283a 	ret

Disassembly of section .text:

00080150 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80150:	06c002f4 	movhi	sp,11
    ori sp, sp, %lo(__alt_stack_pointer)
   80154:	dee09c14 	ori	sp,sp,33392
    movhi gp, %hi(_gp)
   80158:	068002f4 	movhi	gp,11
    ori gp, gp, %lo(_gp)
   8015c:	d6889f14 	ori	gp,gp,8828
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80160:	008b9100 	call	8b910 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80164:	008b9dc0 	call	8b9dc <alt_main>

00080168 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80168:	003fff06 	br	80168 <__alt_data_end+0xfffc7ef8>

0008016c <IsPtInRect>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
   8016c:	defffc04 	addi	sp,sp,-16
   80170:	df000315 	stw	fp,12(sp)
   80174:	df000304 	addi	fp,sp,12
   80178:	e13ffe15 	stw	r4,-8(fp)
   8017c:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
   80180:	e03ffd15 	stw	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
   80184:	e0bffe17 	ldw	r2,-8(fp)
   80188:	10c00017 	ldw	r3,0(r2)
   8018c:	e0bfff17 	ldw	r2,-4(fp)
   80190:	10800017 	ldw	r2,0(r2)
   80194:	18801116 	blt	r3,r2,801dc <IsPtInRect+0x70>
   80198:	e0bffe17 	ldw	r2,-8(fp)
   8019c:	10800017 	ldw	r2,0(r2)
   801a0:	e0ffff17 	ldw	r3,-4(fp)
   801a4:	18c00117 	ldw	r3,4(r3)
   801a8:	18800c16 	blt	r3,r2,801dc <IsPtInRect+0x70>
   801ac:	e0bffe17 	ldw	r2,-8(fp)
   801b0:	10c00117 	ldw	r3,4(r2)
   801b4:	e0bfff17 	ldw	r2,-4(fp)
   801b8:	10800217 	ldw	r2,8(r2)
   801bc:	18800716 	blt	r3,r2,801dc <IsPtInRect+0x70>
   801c0:	e0bffe17 	ldw	r2,-8(fp)
   801c4:	10800117 	ldw	r2,4(r2)
   801c8:	e0ffff17 	ldw	r3,-4(fp)
   801cc:	18c00317 	ldw	r3,12(r3)
   801d0:	18800216 	blt	r3,r2,801dc <IsPtInRect+0x70>
        bYes = TRUE;
   801d4:	00800044 	movi	r2,1
   801d8:	e0bffd15 	stw	r2,-12(fp)
    
    return bYes;
   801dc:	e0bffd17 	ldw	r2,-12(fp)
}
   801e0:	e037883a 	mov	sp,fp
   801e4:	df000017 	ldw	fp,0(sp)
   801e8:	dec00104 	addi	sp,sp,4
   801ec:	f800283a 	ret

000801f0 <PtSet>:

void PtSet(POINT *pt, int x, int y){
   801f0:	defffc04 	addi	sp,sp,-16
   801f4:	df000315 	stw	fp,12(sp)
   801f8:	df000304 	addi	fp,sp,12
   801fc:	e13ffd15 	stw	r4,-12(fp)
   80200:	e17ffe15 	stw	r5,-8(fp)
   80204:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
   80208:	e0bffd17 	ldw	r2,-12(fp)
   8020c:	e0fffe17 	ldw	r3,-8(fp)
   80210:	10c00015 	stw	r3,0(r2)
    pt->y = y;
   80214:	e0bffd17 	ldw	r2,-12(fp)
   80218:	e0ffff17 	ldw	r3,-4(fp)
   8021c:	10c00115 	stw	r3,4(r2)
}
   80220:	e037883a 	mov	sp,fp
   80224:	df000017 	ldw	fp,0(sp)
   80228:	dec00104 	addi	sp,sp,4
   8022c:	f800283a 	ret

00080230 <RectSet>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
   80230:	defffb04 	addi	sp,sp,-20
   80234:	df000415 	stw	fp,16(sp)
   80238:	df000404 	addi	fp,sp,16
   8023c:	e13ffc15 	stw	r4,-16(fp)
   80240:	e17ffd15 	stw	r5,-12(fp)
   80244:	e1bffe15 	stw	r6,-8(fp)
   80248:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
   8024c:	e0bffc17 	ldw	r2,-16(fp)
   80250:	e0fffd17 	ldw	r3,-12(fp)
   80254:	10c00015 	stw	r3,0(r2)
    rc->right = right;
   80258:	e0bffc17 	ldw	r2,-16(fp)
   8025c:	e0fffe17 	ldw	r3,-8(fp)
   80260:	10c00115 	stw	r3,4(r2)
    rc->top = top;
   80264:	e0bffc17 	ldw	r2,-16(fp)
   80268:	e0ffff17 	ldw	r3,-4(fp)
   8026c:	10c00215 	stw	r3,8(r2)
    rc->bottom = bottom;
   80270:	e0bffc17 	ldw	r2,-16(fp)
   80274:	e0c00117 	ldw	r3,4(fp)
   80278:	10c00315 	stw	r3,12(r2)
}
   8027c:	e037883a 	mov	sp,fp
   80280:	df000017 	ldw	fp,0(sp)
   80284:	dec00104 	addi	sp,sp,4
   80288:	f800283a 	ret

0008028c <RectInflate>:

void RectInflate(RECT *rc, int x, int y){
   8028c:	defffc04 	addi	sp,sp,-16
   80290:	df000315 	stw	fp,12(sp)
   80294:	df000304 	addi	fp,sp,12
   80298:	e13ffd15 	stw	r4,-12(fp)
   8029c:	e17ffe15 	stw	r5,-8(fp)
   802a0:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
   802a4:	e0bffd17 	ldw	r2,-12(fp)
   802a8:	10c00017 	ldw	r3,0(r2)
   802ac:	e0bffe17 	ldw	r2,-8(fp)
   802b0:	1887c83a 	sub	r3,r3,r2
   802b4:	e0bffd17 	ldw	r2,-12(fp)
   802b8:	10c00015 	stw	r3,0(r2)
    rc->right += x;
   802bc:	e0bffd17 	ldw	r2,-12(fp)
   802c0:	10c00117 	ldw	r3,4(r2)
   802c4:	e0bffe17 	ldw	r2,-8(fp)
   802c8:	1887883a 	add	r3,r3,r2
   802cc:	e0bffd17 	ldw	r2,-12(fp)
   802d0:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
   802d4:	e0bffd17 	ldw	r2,-12(fp)
   802d8:	10c00217 	ldw	r3,8(r2)
   802dc:	e0bfff17 	ldw	r2,-4(fp)
   802e0:	1887c83a 	sub	r3,r3,r2
   802e4:	e0bffd17 	ldw	r2,-12(fp)
   802e8:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
   802ec:	e0bffd17 	ldw	r2,-12(fp)
   802f0:	10c00317 	ldw	r3,12(r2)
   802f4:	e0bfff17 	ldw	r2,-4(fp)
   802f8:	1887883a 	add	r3,r3,r2
   802fc:	e0bffd17 	ldw	r2,-12(fp)
   80300:	10c00315 	stw	r3,12(r2)
}
   80304:	e037883a 	mov	sp,fp
   80308:	df000017 	ldw	fp,0(sp)
   8030c:	dec00104 	addi	sp,sp,4
   80310:	f800283a 	ret

00080314 <RectOffset>:

void RectOffset(RECT *rc, int x, int y){
   80314:	defffc04 	addi	sp,sp,-16
   80318:	df000315 	stw	fp,12(sp)
   8031c:	df000304 	addi	fp,sp,12
   80320:	e13ffd15 	stw	r4,-12(fp)
   80324:	e17ffe15 	stw	r5,-8(fp)
   80328:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
   8032c:	e0bffd17 	ldw	r2,-12(fp)
   80330:	10c00017 	ldw	r3,0(r2)
   80334:	e0bffe17 	ldw	r2,-8(fp)
   80338:	1887883a 	add	r3,r3,r2
   8033c:	e0bffd17 	ldw	r2,-12(fp)
   80340:	10c00015 	stw	r3,0(r2)
    rc->right += x;
   80344:	e0bffd17 	ldw	r2,-12(fp)
   80348:	10c00117 	ldw	r3,4(r2)
   8034c:	e0bffe17 	ldw	r2,-8(fp)
   80350:	1887883a 	add	r3,r3,r2
   80354:	e0bffd17 	ldw	r2,-12(fp)
   80358:	10c00115 	stw	r3,4(r2)
    rc->top += y;
   8035c:	e0bffd17 	ldw	r2,-12(fp)
   80360:	10c00217 	ldw	r3,8(r2)
   80364:	e0bfff17 	ldw	r2,-4(fp)
   80368:	1887883a 	add	r3,r3,r2
   8036c:	e0bffd17 	ldw	r2,-12(fp)
   80370:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
   80374:	e0bffd17 	ldw	r2,-12(fp)
   80378:	10c00317 	ldw	r3,12(r2)
   8037c:	e0bfff17 	ldw	r2,-4(fp)
   80380:	1887883a 	add	r3,r3,r2
   80384:	e0bffd17 	ldw	r2,-12(fp)
   80388:	10c00315 	stw	r3,12(r2)
}
   8038c:	e037883a 	mov	sp,fp
   80390:	df000017 	ldw	fp,0(sp)
   80394:	dec00104 	addi	sp,sp,4
   80398:	f800283a 	ret

0008039c <RectCopy>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
   8039c:	defffd04 	addi	sp,sp,-12
   803a0:	df000215 	stw	fp,8(sp)
   803a4:	df000204 	addi	fp,sp,8
   803a8:	e13ffe15 	stw	r4,-8(fp)
   803ac:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
   803b0:	e0bfff17 	ldw	r2,-4(fp)
   803b4:	10c00017 	ldw	r3,0(r2)
   803b8:	e0bffe17 	ldw	r2,-8(fp)
   803bc:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
   803c0:	e0bfff17 	ldw	r2,-4(fp)
   803c4:	10c00117 	ldw	r3,4(r2)
   803c8:	e0bffe17 	ldw	r2,-8(fp)
   803cc:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
   803d0:	e0bfff17 	ldw	r2,-4(fp)
   803d4:	10c00217 	ldw	r3,8(r2)
   803d8:	e0bffe17 	ldw	r2,-8(fp)
   803dc:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
   803e0:	e0bfff17 	ldw	r2,-4(fp)
   803e4:	10c00317 	ldw	r3,12(r2)
   803e8:	e0bffe17 	ldw	r2,-8(fp)
   803ec:	10c00315 	stw	r3,12(r2)
}
   803f0:	e037883a 	mov	sp,fp
   803f4:	df000017 	ldw	fp,0(sp)
   803f8:	dec00104 	addi	sp,sp,4
   803fc:	f800283a 	ret

00080400 <RectWidth>:

int RectWidth(RECT *rc){
   80400:	defffe04 	addi	sp,sp,-8
   80404:	df000115 	stw	fp,4(sp)
   80408:	df000104 	addi	fp,sp,4
   8040c:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
   80410:	e0bfff17 	ldw	r2,-4(fp)
   80414:	10c00117 	ldw	r3,4(r2)
   80418:	e0bfff17 	ldw	r2,-4(fp)
   8041c:	10800017 	ldw	r2,0(r2)
   80420:	1885c83a 	sub	r2,r3,r2
}
   80424:	e037883a 	mov	sp,fp
   80428:	df000017 	ldw	fp,0(sp)
   8042c:	dec00104 	addi	sp,sp,4
   80430:	f800283a 	ret

00080434 <RectHeight>:

int RectHeight(RECT *rc){
   80434:	defffe04 	addi	sp,sp,-8
   80438:	df000115 	stw	fp,4(sp)
   8043c:	df000104 	addi	fp,sp,4
   80440:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
   80444:	e0bfff17 	ldw	r2,-4(fp)
   80448:	10c00317 	ldw	r3,12(r2)
   8044c:	e0bfff17 	ldw	r2,-4(fp)
   80450:	10800217 	ldw	r2,8(r2)
   80454:	1885c83a 	sub	r2,r3,r2
}
   80458:	e037883a 	mov	sp,fp
   8045c:	df000017 	ldw	fp,0(sp)
   80460:	dec00104 	addi	sp,sp,4
   80464:	f800283a 	ret

00080468 <PtDistance>:

int PtDistance(POINT *pt1, POINT *pt2){
   80468:	defff904 	addi	sp,sp,-28
   8046c:	dfc00615 	stw	ra,24(sp)
   80470:	df000515 	stw	fp,20(sp)
   80474:	df000504 	addi	fp,sp,20
   80478:	e13ffe15 	stw	r4,-8(fp)
   8047c:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
   80480:	e0bffe17 	ldw	r2,-8(fp)
   80484:	10c00017 	ldw	r3,0(r2)
   80488:	e0bfff17 	ldw	r2,-4(fp)
   8048c:	10800017 	ldw	r2,0(r2)
   80490:	1885c83a 	sub	r2,r3,r2
   80494:	e0bffb15 	stw	r2,-20(fp)
    b = pt1->y - pt2->y;
   80498:	e0bffe17 	ldw	r2,-8(fp)
   8049c:	10c00117 	ldw	r3,4(r2)
   804a0:	e0bfff17 	ldw	r2,-4(fp)
   804a4:	10800117 	ldw	r2,4(r2)
   804a8:	1885c83a 	sub	r2,r3,r2
   804ac:	e0bffc15 	stw	r2,-16(fp)
    nDistance = a*a + b*b;
   804b0:	e0fffb17 	ldw	r3,-20(fp)
   804b4:	e0bffb17 	ldw	r2,-20(fp)
   804b8:	1887383a 	mul	r3,r3,r2
   804bc:	e13ffc17 	ldw	r4,-16(fp)
   804c0:	e0bffc17 	ldw	r2,-16(fp)
   804c4:	2085383a 	mul	r2,r4,r2
   804c8:	1885883a 	add	r2,r3,r2
   804cc:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
   804d0:	e13ffd17 	ldw	r4,-12(fp)
   804d4:	0089a180 	call	89a18 <__floatsidf>
   804d8:	100b883a 	mov	r5,r2
   804dc:	180d883a 	mov	r6,r3
   804e0:	2809883a 	mov	r4,r5
   804e4:	300b883a 	mov	r5,r6
   804e8:	008726c0 	call	8726c <sqrt>
   804ec:	100b883a 	mov	r5,r2
   804f0:	180d883a 	mov	r6,r3
   804f4:	2809883a 	mov	r4,r5
   804f8:	300b883a 	mov	r5,r6
   804fc:	00899980 	call	89998 <__fixdfsi>
   80500:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
   80504:	e0bffd17 	ldw	r2,-12(fp)
}
   80508:	e037883a 	mov	sp,fp
   8050c:	dfc00117 	ldw	ra,4(sp)
   80510:	df000017 	ldw	fp,0(sp)
   80514:	dec00204 	addi	sp,sp,8
   80518:	f800283a 	ret

0008051c <PtCopy>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
   8051c:	defffd04 	addi	sp,sp,-12
   80520:	df000215 	stw	fp,8(sp)
   80524:	df000204 	addi	fp,sp,8
   80528:	e13ffe15 	stw	r4,-8(fp)
   8052c:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
   80530:	e0bfff17 	ldw	r2,-4(fp)
   80534:	10c00017 	ldw	r3,0(r2)
   80538:	e0bffe17 	ldw	r2,-8(fp)
   8053c:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
   80540:	e0bfff17 	ldw	r2,-4(fp)
   80544:	10c00117 	ldw	r3,4(r2)
   80548:	e0bffe17 	ldw	r2,-8(fp)
   8054c:	10c00115 	stw	r3,4(r2)
}
   80550:	e037883a 	mov	sp,fp
   80554:	df000017 	ldw	fp,0(sp)
   80558:	dec00104 	addi	sp,sp,4
   8055c:	f800283a 	ret

00080560 <Delay_Ms>:
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
   80560:	defffd04 	addi	sp,sp,-12
   80564:	dfc00215 	stw	ra,8(sp)
   80568:	df000115 	stw	fp,4(sp)
   8056c:	df000104 	addi	fp,sp,4
   80570:	2005883a 	mov	r2,r4
   80574:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
   80578:	00000206 	br	80584 <Delay_Ms+0x24>
    {
        usleep(1000);
   8057c:	0100fa04 	movi	r4,1000
   80580:	008bbbc0 	call	8bbbc <usleep>
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
   80584:	e0bfff0b 	ldhu	r2,-4(fp)
   80588:	10ffffc4 	addi	r3,r2,-1
   8058c:	e0ffff0d 	sth	r3,-4(fp)
   80590:	10bfffcc 	andi	r2,r2,65535
   80594:	103ff91e 	bne	r2,zero,8057c <__alt_data_end+0xfffc830c>
    {
        usleep(1000);
    }
}
   80598:	e037883a 	mov	sp,fp
   8059c:	dfc00117 	ldw	ra,4(sp)
   805a0:	df000017 	ldw	fp,0(sp)
   805a4:	dec00204 	addi	sp,sp,8
   805a8:	f800283a 	ret

000805ac <LCD_SetCursor>:


void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos)
{
   805ac:	defffd04 	addi	sp,sp,-12
   805b0:	df000215 	stw	fp,8(sp)
   805b4:	df000204 	addi	fp,sp,8
   805b8:	2007883a 	mov	r3,r4
   805bc:	2805883a 	mov	r2,r5
   805c0:	e0fffe0d 	sth	r3,-8(fp)
   805c4:	e0bfff0d 	sth	r2,-4(fp)
	 LCD_WR_REG(0x002A);
   805c8:	00c00a84 	movi	r3,42
   805cc:	00800434 	movhi	r2,16
   805d0:	10842604 	addi	r2,r2,4248
   805d4:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos>>8);
   805d8:	e0bffe0b 	ldhu	r2,-8(fp)
   805dc:	1004d23a 	srli	r2,r2,8
   805e0:	10ffffcc 	andi	r3,r2,65535
   805e4:	00800434 	movhi	r2,16
   805e8:	10842704 	addi	r2,r2,4252
   805ec:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos&0XFF);
   805f0:	e0bffe0b 	ldhu	r2,-8(fp)
   805f4:	10c03fcc 	andi	r3,r2,255
   805f8:	00800434 	movhi	r2,16
   805fc:	10842704 	addi	r2,r2,4252
   80600:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002B);
   80604:	00c00ac4 	movi	r3,43
   80608:	00800434 	movhi	r2,16
   8060c:	10842604 	addi	r2,r2,4248
   80610:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos>>8);
   80614:	e0bfff0b 	ldhu	r2,-4(fp)
   80618:	1004d23a 	srli	r2,r2,8
   8061c:	10ffffcc 	andi	r3,r2,65535
   80620:	00800434 	movhi	r2,16
   80624:	10842704 	addi	r2,r2,4252
   80628:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos&0XFF);
   8062c:	e0bfff0b 	ldhu	r2,-4(fp)
   80630:	10c03fcc 	andi	r3,r2,255
   80634:	00800434 	movhi	r2,16
   80638:	10842704 	addi	r2,r2,4252
   8063c:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002C);
   80640:	00c00b04 	movi	r3,44
   80644:	00800434 	movhi	r2,16
   80648:	10842604 	addi	r2,r2,4248
   8064c:	10c00035 	stwio	r3,0(r2)
}
   80650:	e037883a 	mov	sp,fp
   80654:	df000017 	ldw	fp,0(sp)
   80658:	dec00104 	addi	sp,sp,4
   8065c:	f800283a 	ret

00080660 <LCD_Clear>:

void LCD_Clear(alt_u16 Color)
{
   80660:	defffc04 	addi	sp,sp,-16
   80664:	dfc00315 	stw	ra,12(sp)
   80668:	df000215 	stw	fp,8(sp)
   8066c:	df000204 	addi	fp,sp,8
   80670:	2005883a 	mov	r2,r4
   80674:	e0bfff0d 	sth	r2,-4(fp)
        alt_u32 index=0;
   80678:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
   8067c:	0009883a 	mov	r4,zero
   80680:	000b883a 	mov	r5,zero
   80684:	00805ac0 	call	805ac <LCD_SetCursor>
        LCD_WR_REG(0x002C);
   80688:	00c00b04 	movi	r3,44
   8068c:	00800434 	movhi	r2,16
   80690:	10842604 	addi	r2,r2,4248
   80694:	10c00035 	stwio	r3,0(r2)
        for(index=0;index<76800;index++)
   80698:	e03ffe15 	stw	zero,-8(fp)
   8069c:	00000706 	br	806bc <LCD_Clear+0x5c>
        {
        	LCD_WR_DATA(Color);
   806a0:	e0ffff0b 	ldhu	r3,-4(fp)
   806a4:	00800434 	movhi	r2,16
   806a8:	10842704 	addi	r2,r2,4252
   806ac:	10c00035 	stwio	r3,0(r2)
void LCD_Clear(alt_u16 Color)
{
        alt_u32 index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
   806b0:	e0bffe17 	ldw	r2,-8(fp)
   806b4:	10800044 	addi	r2,r2,1
   806b8:	e0bffe15 	stw	r2,-8(fp)
   806bc:	e0bffe17 	ldw	r2,-8(fp)
   806c0:	00c00074 	movhi	r3,1
   806c4:	18caffc4 	addi	r3,r3,11263
   806c8:	18bff52e 	bgeu	r3,r2,806a0 <__alt_data_end+0xfffc8430>
        {
        	LCD_WR_DATA(Color);
        }
}
   806cc:	e037883a 	mov	sp,fp
   806d0:	dfc00117 	ldw	ra,4(sp)
   806d4:	df000017 	ldw	fp,0(sp)
   806d8:	dec00204 	addi	sp,sp,8
   806dc:	f800283a 	ret

000806e0 <LCD_DrawPoint>:

void LCD_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color )
{
   806e0:	defffb04 	addi	sp,sp,-20
   806e4:	dfc00415 	stw	ra,16(sp)
   806e8:	df000315 	stw	fp,12(sp)
   806ec:	df000304 	addi	fp,sp,12
   806f0:	2807883a 	mov	r3,r5
   806f4:	3005883a 	mov	r2,r6
   806f8:	e13ffd0d 	sth	r4,-12(fp)
   806fc:	e0fffe0d 	sth	r3,-8(fp)
   80700:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(x,y);
   80704:	e0fffd0b 	ldhu	r3,-12(fp)
   80708:	e0bffe0b 	ldhu	r2,-8(fp)
   8070c:	1809883a 	mov	r4,r3
   80710:	100b883a 	mov	r5,r2
   80714:	00805ac0 	call	805ac <LCD_SetCursor>
        LCD_WR_REG(0x002C);
   80718:	00c00b04 	movi	r3,44
   8071c:	00800434 	movhi	r2,16
   80720:	10842604 	addi	r2,r2,4248
   80724:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(color);
   80728:	e0ffff0b 	ldhu	r3,-4(fp)
   8072c:	00800434 	movhi	r2,16
   80730:	10842704 	addi	r2,r2,4252
   80734:	10c00035 	stwio	r3,0(r2)
}
   80738:	e037883a 	mov	sp,fp
   8073c:	dfc00117 	ldw	ra,4(sp)
   80740:	df000017 	ldw	fp,0(sp)
   80744:	dec00204 	addi	sp,sp,8
   80748:	f800283a 	ret

0008074c <LCD_Init>:
void LCD_Init()
{
   8074c:	defffe04 	addi	sp,sp,-8
   80750:	dfc00115 	stw	ra,4(sp)
   80754:	df000015 	stw	fp,0(sp)
   80758:	d839883a 	mov	fp,sp
	alt_u16 data1,data2;
	alt_u16 data3,data4;
	Set_LCD_RST;
   8075c:	00c00044 	movi	r3,1
   80760:	00800434 	movhi	r2,16
   80764:	10842004 	addi	r2,r2,4224
   80768:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
   8076c:	01000044 	movi	r4,1
   80770:	00805600 	call	80560 <Delay_Ms>
	Clr_LCD_RST;
   80774:	0007883a 	mov	r3,zero
   80778:	00800434 	movhi	r2,16
   8077c:	10842004 	addi	r2,r2,4224
   80780:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
   80784:	01000284 	movi	r4,10
   80788:	00805600 	call	80560 <Delay_Ms>
	Set_LCD_RST;
   8078c:	00c00044 	movi	r3,1
   80790:	00800434 	movhi	r2,16
   80794:	10842004 	addi	r2,r2,4224
   80798:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);       // Delay 120 ms
   8079c:	01001e04 	movi	r4,120
   807a0:	00805600 	call	80560 <Delay_Ms>
//	Clr_LCD_CS;



	LCD_WR_REG(0x0011); //Exit Sleep
   807a4:	00c00444 	movi	r3,17
   807a8:	00800434 	movhi	r2,16
   807ac:	10842604 	addi	r2,r2,4248
   807b0:	10c00035 	stwio	r3,0(r2)
	LCD_WR_REG(0x00CF);
   807b4:	00c033c4 	movi	r3,207
   807b8:	00800434 	movhi	r2,16
   807bc:	10842604 	addi	r2,r2,4248
   807c0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   807c4:	0007883a 	mov	r3,zero
   807c8:	00800434 	movhi	r2,16
   807cc:	10842704 	addi	r2,r2,4252
   807d0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0081);
   807d4:	00c02044 	movi	r3,129
   807d8:	00800434 	movhi	r2,16
   807dc:	10842704 	addi	r2,r2,4252
   807e0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00c0);
   807e4:	00c03004 	movi	r3,192
   807e8:	00800434 	movhi	r2,16
   807ec:	10842704 	addi	r2,r2,4252
   807f0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00ED);
   807f4:	00c03b44 	movi	r3,237
   807f8:	00800434 	movhi	r2,16
   807fc:	10842604 	addi	r2,r2,4248
   80800:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0064);
   80804:	00c01904 	movi	r3,100
   80808:	00800434 	movhi	r2,16
   8080c:	10842704 	addi	r2,r2,4252
   80810:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0003);
   80814:	00c000c4 	movi	r3,3
   80818:	00800434 	movhi	r2,16
   8081c:	10842704 	addi	r2,r2,4252
   80820:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0012);
   80824:	00c00484 	movi	r3,18
   80828:	00800434 	movhi	r2,16
   8082c:	10842704 	addi	r2,r2,4252
   80830:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0081);
   80834:	00c02044 	movi	r3,129
   80838:	00800434 	movhi	r2,16
   8083c:	10842704 	addi	r2,r2,4252
   80840:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E8);
   80844:	00c03a04 	movi	r3,232
   80848:	00800434 	movhi	r2,16
   8084c:	10842604 	addi	r2,r2,4248
   80850:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0085);
   80854:	00c02144 	movi	r3,133
   80858:	00800434 	movhi	r2,16
   8085c:	10842704 	addi	r2,r2,4252
   80860:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   80864:	00c00044 	movi	r3,1
   80868:	00800434 	movhi	r2,16
   8086c:	10842704 	addi	r2,r2,4252
   80870:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00798);
   80874:	00c1e604 	movi	r3,1944
   80878:	00800434 	movhi	r2,16
   8087c:	10842704 	addi	r2,r2,4252
   80880:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00CB);
   80884:	00c032c4 	movi	r3,203
   80888:	00800434 	movhi	r2,16
   8088c:	10842604 	addi	r2,r2,4248
   80890:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0039);
   80894:	00c00e44 	movi	r3,57
   80898:	00800434 	movhi	r2,16
   8089c:	10842704 	addi	r2,r2,4252
   808a0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002C);
   808a4:	00c00b04 	movi	r3,44
   808a8:	00800434 	movhi	r2,16
   808ac:	10842704 	addi	r2,r2,4252
   808b0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   808b4:	0007883a 	mov	r3,zero
   808b8:	00800434 	movhi	r2,16
   808bc:	10842704 	addi	r2,r2,4252
   808c0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
   808c4:	00c00d04 	movi	r3,52
   808c8:	00800434 	movhi	r2,16
   808cc:	10842704 	addi	r2,r2,4252
   808d0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0002);
   808d4:	00c00084 	movi	r3,2
   808d8:	00800434 	movhi	r2,16
   808dc:	10842704 	addi	r2,r2,4252
   808e0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F7);
   808e4:	00c03dc4 	movi	r3,247
   808e8:	00800434 	movhi	r2,16
   808ec:	10842604 	addi	r2,r2,4248
   808f0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
   808f4:	00c00804 	movi	r3,32
   808f8:	00800434 	movhi	r2,16
   808fc:	10842704 	addi	r2,r2,4252
   80900:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00EA);
   80904:	00c03a84 	movi	r3,234
   80908:	00800434 	movhi	r2,16
   8090c:	10842604 	addi	r2,r2,4248
   80910:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80914:	0007883a 	mov	r3,zero
   80918:	00800434 	movhi	r2,16
   8091c:	10842704 	addi	r2,r2,4252
   80920:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80924:	0007883a 	mov	r3,zero
   80928:	00800434 	movhi	r2,16
   8092c:	10842704 	addi	r2,r2,4252
   80930:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B1);
   80934:	00c02c44 	movi	r3,177
   80938:	00800434 	movhi	r2,16
   8093c:	10842604 	addi	r2,r2,4248
   80940:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80944:	0007883a 	mov	r3,zero
   80948:	00800434 	movhi	r2,16
   8094c:	10842704 	addi	r2,r2,4252
   80950:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001b);
   80954:	00c006c4 	movi	r3,27
   80958:	00800434 	movhi	r2,16
   8095c:	10842704 	addi	r2,r2,4252
   80960:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B6);
   80964:	00c02d84 	movi	r3,182
   80968:	00800434 	movhi	r2,16
   8096c:	10842604 	addi	r2,r2,4248
   80970:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000A);
   80974:	00c00284 	movi	r3,10
   80978:	00800434 	movhi	r2,16
   8097c:	10842704 	addi	r2,r2,4252
   80980:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00A2);
   80984:	00c02884 	movi	r3,162
   80988:	00800434 	movhi	r2,16
   8098c:	10842704 	addi	r2,r2,4252
   80990:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C0);    //Power control
   80994:	00c03004 	movi	r3,192
   80998:	00800434 	movhi	r2,16
   8099c:	10842604 	addi	r2,r2,4248
   809a0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);   //VRH[5:0]
   809a4:	00c00144 	movi	r3,5
   809a8:	00800434 	movhi	r2,16
   809ac:	10842704 	addi	r2,r2,4252
   809b0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C1);    //Power control
   809b4:	00c03044 	movi	r3,193
   809b8:	00800434 	movhi	r2,16
   809bc:	10842604 	addi	r2,r2,4248
   809c0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
   809c4:	00c00444 	movi	r3,17
   809c8:	00800434 	movhi	r2,16
   809cc:	10842704 	addi	r2,r2,4252
   809d0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C5);    //VCM control
   809d4:	00c03144 	movi	r3,197
   809d8:	00800434 	movhi	r2,16
   809dc:	10842604 	addi	r2,r2,4248
   809e0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3F
   809e4:	00c01144 	movi	r3,69
   809e8:	00800434 	movhi	r2,16
   809ec:	10842704 	addi	r2,r2,4252
   809f0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3C
   809f4:	00c01144 	movi	r3,69
   809f8:	00800434 	movhi	r2,16
   809fc:	10842704 	addi	r2,r2,4252
   80a00:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00C7);    //VCM control2
   80a04:	00c031c4 	movi	r3,199
   80a08:	00800434 	movhi	r2,16
   80a0c:	10842604 	addi	r2,r2,4248
   80a10:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(0X00a2);
   80a14:	00c02884 	movi	r3,162
   80a18:	00800434 	movhi	r2,16
   80a1c:	10842704 	addi	r2,r2,4252
   80a20:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0036);    // Memory Access Control
   80a24:	00c00d84 	movi	r3,54
   80a28:	00800434 	movhi	r2,16
   80a2c:	10842604 	addi	r2,r2,4248
   80a30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);//48
   80a34:	00c00204 	movi	r3,8
   80a38:	00800434 	movhi	r2,16
   80a3c:	10842704 	addi	r2,r2,4252
   80a40:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
   80a44:	00c03c84 	movi	r3,242
   80a48:	00800434 	movhi	r2,16
   80a4c:	10842604 	addi	r2,r2,4248
   80a50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80a54:	0007883a 	mov	r3,zero
   80a58:	00800434 	movhi	r2,16
   80a5c:	10842704 	addi	r2,r2,4252
   80a60:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0026);    //Gamma curve selected
   80a64:	00c00984 	movi	r3,38
   80a68:	00800434 	movhi	r2,16
   80a6c:	10842604 	addi	r2,r2,4248
   80a70:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   80a74:	00c00044 	movi	r3,1
   80a78:	00800434 	movhi	r2,16
   80a7c:	10842704 	addi	r2,r2,4252
   80a80:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E0);    //Set Gamma
   80a84:	00c03804 	movi	r3,224
   80a88:	00800434 	movhi	r2,16
   80a8c:	10842604 	addi	r2,r2,4248
   80a90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000F);
   80a94:	00c003c4 	movi	r3,15
   80a98:	00800434 	movhi	r2,16
   80a9c:	10842704 	addi	r2,r2,4252
   80aa0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0026);
   80aa4:	00c00984 	movi	r3,38
   80aa8:	00800434 	movhi	r2,16
   80aac:	10842704 	addi	r2,r2,4252
   80ab0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0024);
   80ab4:	00c00904 	movi	r3,36
   80ab8:	00800434 	movhi	r2,16
   80abc:	10842704 	addi	r2,r2,4252
   80ac0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
   80ac4:	00c002c4 	movi	r3,11
   80ac8:	00800434 	movhi	r2,16
   80acc:	10842704 	addi	r2,r2,4252
   80ad0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000E);
   80ad4:	00c00384 	movi	r3,14
   80ad8:	00800434 	movhi	r2,16
   80adc:	10842704 	addi	r2,r2,4252
   80ae0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
   80ae4:	00c00204 	movi	r3,8
   80ae8:	00800434 	movhi	r2,16
   80aec:	10842704 	addi	r2,r2,4252
   80af0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x004b);
   80af4:	00c012c4 	movi	r3,75
   80af8:	00800434 	movhi	r2,16
   80afc:	10842704 	addi	r2,r2,4252
   80b00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00a8);
   80b04:	00c02a04 	movi	r3,168
   80b08:	00800434 	movhi	r2,16
   80b0c:	10842704 	addi	r2,r2,4252
   80b10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003b);
   80b14:	00c00ec4 	movi	r3,59
   80b18:	00800434 	movhi	r2,16
   80b1c:	10842704 	addi	r2,r2,4252
   80b20:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000a);
   80b24:	00c00284 	movi	r3,10
   80b28:	00800434 	movhi	r2,16
   80b2c:	10842704 	addi	r2,r2,4252
   80b30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0014);
   80b34:	00c00504 	movi	r3,20
   80b38:	00800434 	movhi	r2,16
   80b3c:	10842704 	addi	r2,r2,4252
   80b40:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0006);
   80b44:	00c00184 	movi	r3,6
   80b48:	00800434 	movhi	r2,16
   80b4c:	10842704 	addi	r2,r2,4252
   80b50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
   80b54:	00c00404 	movi	r3,16
   80b58:	00800434 	movhi	r2,16
   80b5c:	10842704 	addi	r2,r2,4252
   80b60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
   80b64:	00c00244 	movi	r3,9
   80b68:	00800434 	movhi	r2,16
   80b6c:	10842704 	addi	r2,r2,4252
   80b70:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80b74:	0007883a 	mov	r3,zero
   80b78:	00800434 	movhi	r2,16
   80b7c:	10842704 	addi	r2,r2,4252
   80b80:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0X00E1);    //Set Gamma
   80b84:	00c03844 	movi	r3,225
   80b88:	00800434 	movhi	r2,16
   80b8c:	10842604 	addi	r2,r2,4248
   80b90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80b94:	0007883a 	mov	r3,zero
   80b98:	00800434 	movhi	r2,16
   80b9c:	10842704 	addi	r2,r2,4252
   80ba0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001c);
   80ba4:	00c00704 	movi	r3,28
   80ba8:	00800434 	movhi	r2,16
   80bac:	10842704 	addi	r2,r2,4252
   80bb0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
   80bb4:	00c00804 	movi	r3,32
   80bb8:	00800434 	movhi	r2,16
   80bbc:	10842704 	addi	r2,r2,4252
   80bc0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0004);
   80bc4:	00c00104 	movi	r3,4
   80bc8:	00800434 	movhi	r2,16
   80bcc:	10842704 	addi	r2,r2,4252
   80bd0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
   80bd4:	00c00404 	movi	r3,16
   80bd8:	00800434 	movhi	r2,16
   80bdc:	10842704 	addi	r2,r2,4252
   80be0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
   80be4:	00c00204 	movi	r3,8
   80be8:	00800434 	movhi	r2,16
   80bec:	10842704 	addi	r2,r2,4252
   80bf0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
   80bf4:	00c00d04 	movi	r3,52
   80bf8:	00800434 	movhi	r2,16
   80bfc:	10842704 	addi	r2,r2,4252
   80c00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0047);
   80c04:	00c011c4 	movi	r3,71
   80c08:	00800434 	movhi	r2,16
   80c0c:	10842704 	addi	r2,r2,4252
   80c10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0044);
   80c14:	00c01104 	movi	r3,68
   80c18:	00800434 	movhi	r2,16
   80c1c:	10842704 	addi	r2,r2,4252
   80c20:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);
   80c24:	00c00144 	movi	r3,5
   80c28:	00800434 	movhi	r2,16
   80c2c:	10842704 	addi	r2,r2,4252
   80c30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
   80c34:	00c002c4 	movi	r3,11
   80c38:	00800434 	movhi	r2,16
   80c3c:	10842704 	addi	r2,r2,4252
   80c40:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
   80c44:	00c00244 	movi	r3,9
   80c48:	00800434 	movhi	r2,16
   80c4c:	10842704 	addi	r2,r2,4252
   80c50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002f);
   80c54:	00c00bc4 	movi	r3,47
   80c58:	00800434 	movhi	r2,16
   80c5c:	10842704 	addi	r2,r2,4252
   80c60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0036);
   80c64:	00c00d84 	movi	r3,54
   80c68:	00800434 	movhi	r2,16
   80c6c:	10842704 	addi	r2,r2,4252
   80c70:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000f);
   80c74:	00c003c4 	movi	r3,15
   80c78:	00800434 	movhi	r2,16
   80c7c:	10842704 	addi	r2,r2,4252
   80c80:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002A);
   80c84:	00c00a84 	movi	r3,42
   80c88:	00800434 	movhi	r2,16
   80c8c:	10842604 	addi	r2,r2,4248
   80c90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80c94:	0007883a 	mov	r3,zero
   80c98:	00800434 	movhi	r2,16
   80c9c:	10842704 	addi	r2,r2,4252
   80ca0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80ca4:	0007883a 	mov	r3,zero
   80ca8:	00800434 	movhi	r2,16
   80cac:	10842704 	addi	r2,r2,4252
   80cb0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80cb4:	0007883a 	mov	r3,zero
   80cb8:	00800434 	movhi	r2,16
   80cbc:	10842704 	addi	r2,r2,4252
   80cc0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00ef);
   80cc4:	00c03bc4 	movi	r3,239
   80cc8:	00800434 	movhi	r2,16
   80ccc:	10842704 	addi	r2,r2,4252
   80cd0:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x002B);
   80cd4:	00c00ac4 	movi	r3,43
   80cd8:	00800434 	movhi	r2,16
   80cdc:	10842604 	addi	r2,r2,4248
   80ce0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80ce4:	0007883a 	mov	r3,zero
   80ce8:	00800434 	movhi	r2,16
   80cec:	10842704 	addi	r2,r2,4252
   80cf0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80cf4:	0007883a 	mov	r3,zero
   80cf8:	00800434 	movhi	r2,16
   80cfc:	10842704 	addi	r2,r2,4252
   80d00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   80d04:	00c00044 	movi	r3,1
   80d08:	00800434 	movhi	r2,16
   80d0c:	10842704 	addi	r2,r2,4252
   80d10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003f);
   80d14:	00c00fc4 	movi	r3,63
   80d18:	00800434 	movhi	r2,16
   80d1c:	10842704 	addi	r2,r2,4252
   80d20:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x003A);
   80d24:	00c00e84 	movi	r3,58
   80d28:	00800434 	movhi	r2,16
   80d2c:	10842604 	addi	r2,r2,4248
   80d30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0055);
   80d34:	00c01544 	movi	r3,85
   80d38:	00800434 	movhi	r2,16
   80d3c:	10842704 	addi	r2,r2,4252
   80d40:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00f6);
   80d44:	00c03d84 	movi	r3,246
   80d48:	00800434 	movhi	r2,16
   80d4c:	10842604 	addi	r2,r2,4248
   80d50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   80d54:	00c00044 	movi	r3,1
   80d58:	00800434 	movhi	r2,16
   80d5c:	10842704 	addi	r2,r2,4252
   80d60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0030);
   80d64:	00c00c04 	movi	r3,48
   80d68:	00800434 	movhi	r2,16
   80d6c:	10842704 	addi	r2,r2,4252
   80d70:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80d74:	0007883a 	mov	r3,zero
   80d78:	00800434 	movhi	r2,16
   80d7c:	10842704 	addi	r2,r2,4252
   80d80:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0029); //display on
   80d84:	00c00a44 	movi	r3,41
   80d88:	00800434 	movhi	r2,16
   80d8c:	10842604 	addi	r2,r2,4248
   80d90:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002c);    // 0x2C
   80d94:	00c00b04 	movi	r3,44
   80d98:	00800434 	movhi	r2,16
   80d9c:	10842604 	addi	r2,r2,4248
   80da0:	10c00035 	stwio	r3,0(r2)

}
   80da4:	e037883a 	mov	sp,fp
   80da8:	dfc00117 	ldw	ra,4(sp)
   80dac:	df000017 	ldw	fp,0(sp)
   80db0:	dec00204 	addi	sp,sp,8
   80db4:	f800283a 	ret

00080db8 <LCD_Pattern_Horizon>:


void LCD_Pattern_Horizon(void)
{
   80db8:	defffc04 	addi	sp,sp,-16
   80dbc:	dfc00315 	stw	ra,12(sp)
   80dc0:	df000215 	stw	fp,8(sp)
   80dc4:	df000204 	addi	fp,sp,8
        alt_u32 index=0;
   80dc8:	e03ffe15 	stw	zero,-8(fp)
        alt_u16  data=0;
   80dcc:	e03fff0d 	sth	zero,-4(fp)
        LCD_SetCursor(0x00,0x0000);
   80dd0:	0009883a 	mov	r4,zero
   80dd4:	000b883a 	mov	r5,zero
   80dd8:	00805ac0 	call	805ac <LCD_SetCursor>
        data=0x0000;
   80ddc:	e03fff0d 	sth	zero,-4(fp)
        for(index=0;index<240*80;index++)
   80de0:	e03ffe15 	stw	zero,-8(fp)
   80de4:	00000706 	br	80e04 <LCD_Pattern_Horizon+0x4c>
        {
        	LCD_WR_DATA(data);
   80de8:	e0ffff0b 	ldhu	r3,-4(fp)
   80dec:	00800434 	movhi	r2,16
   80df0:	10842704 	addi	r2,r2,4252
   80df4:	10c00035 	stwio	r3,0(r2)
{
        alt_u32 index=0;
        alt_u16  data=0;
        LCD_SetCursor(0x00,0x0000);
        data=0x0000;
        for(index=0;index<240*80;index++)
   80df8:	e0bffe17 	ldw	r2,-8(fp)
   80dfc:	10800044 	addi	r2,r2,1
   80e00:	e0bffe15 	stw	r2,-8(fp)
   80e04:	e0bffe17 	ldw	r2,-8(fp)
   80e08:	1092c030 	cmpltui	r2,r2,19200
   80e0c:	103ff61e 	bne	r2,zero,80de8 <__alt_data_end+0xfffc8b78>
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
   80e10:	0009883a 	mov	r4,zero
   80e14:	01401404 	movi	r5,80
   80e18:	00805ac0 	call	805ac <LCD_SetCursor>
        data=RED;
   80e1c:	00be0004 	movi	r2,-2048
   80e20:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
   80e24:	e03ffe15 	stw	zero,-8(fp)
   80e28:	00000706 	br	80e48 <LCD_Pattern_Horizon+0x90>
		{
			LCD_WR_DATA(data);
   80e2c:	e0ffff0b 	ldhu	r3,-4(fp)
   80e30:	00800434 	movhi	r2,16
   80e34:	10842704 	addi	r2,r2,4252
   80e38:	10c00035 	stwio	r3,0(r2)
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
        data=RED;
		for(index=0;index<240*80;index++)
   80e3c:	e0bffe17 	ldw	r2,-8(fp)
   80e40:	10800044 	addi	r2,r2,1
   80e44:	e0bffe15 	stw	r2,-8(fp)
   80e48:	e0bffe17 	ldw	r2,-8(fp)
   80e4c:	1092c030 	cmpltui	r2,r2,19200
   80e50:	103ff61e 	bne	r2,zero,80e2c <__alt_data_end+0xfffc8bbc>
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
   80e54:	0009883a 	mov	r4,zero
   80e58:	01402804 	movi	r5,160
   80e5c:	00805ac0 	call	805ac <LCD_SetCursor>
		data=GREEN;
   80e60:	0081f804 	movi	r2,2016
   80e64:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
   80e68:	e03ffe15 	stw	zero,-8(fp)
   80e6c:	00000706 	br	80e8c <LCD_Pattern_Horizon+0xd4>
		{
			LCD_WR_DATA(data);
   80e70:	e0ffff0b 	ldhu	r3,-4(fp)
   80e74:	00800434 	movhi	r2,16
   80e78:	10842704 	addi	r2,r2,4252
   80e7c:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
		data=GREEN;
		for(index=0;index<240*80;index++)
   80e80:	e0bffe17 	ldw	r2,-8(fp)
   80e84:	10800044 	addi	r2,r2,1
   80e88:	e0bffe15 	stw	r2,-8(fp)
   80e8c:	e0bffe17 	ldw	r2,-8(fp)
   80e90:	1092c030 	cmpltui	r2,r2,19200
   80e94:	103ff61e 	bne	r2,zero,80e70 <__alt_data_end+0xfffc8c00>
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
   80e98:	0009883a 	mov	r4,zero
   80e9c:	01403c04 	movi	r5,240
   80ea0:	00805ac0 	call	805ac <LCD_SetCursor>
		data=BLUE;
   80ea4:	008007c4 	movi	r2,31
   80ea8:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
   80eac:	e03ffe15 	stw	zero,-8(fp)
   80eb0:	00000706 	br	80ed0 <LCD_Pattern_Horizon+0x118>
		{
			LCD_WR_DATA(data);
   80eb4:	e0ffff0b 	ldhu	r3,-4(fp)
   80eb8:	00800434 	movhi	r2,16
   80ebc:	10842704 	addi	r2,r2,4252
   80ec0:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
		data=BLUE;
		for(index=0;index<240*80;index++)
   80ec4:	e0bffe17 	ldw	r2,-8(fp)
   80ec8:	10800044 	addi	r2,r2,1
   80ecc:	e0bffe15 	stw	r2,-8(fp)
   80ed0:	e0bffe17 	ldw	r2,-8(fp)
   80ed4:	1092c030 	cmpltui	r2,r2,19200
   80ed8:	103ff61e 	bne	r2,zero,80eb4 <__alt_data_end+0xfffc8c44>
		{
			LCD_WR_DATA(data);
		}
}
   80edc:	e037883a 	mov	sp,fp
   80ee0:	dfc00117 	ldw	ra,4(sp)
   80ee4:	df000017 	ldw	fp,0(sp)
   80ee8:	dec00204 	addi	sp,sp,8
   80eec:	f800283a 	ret

00080ef0 <LCD_Pattern_Vertical>:

void LCD_Pattern_Vertical(void)
{
   80ef0:	defff804 	addi	sp,sp,-32
   80ef4:	dfc00715 	stw	ra,28(sp)
   80ef8:	df000615 	stw	fp,24(sp)
   80efc:	df000604 	addi	fp,sp,24
        int i,j,m;
        alt_u16  data=0;
   80f00:	e03ffd0d 	sth	zero,-12(fp)
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
   80f04:	00bfffc4 	movi	r2,-1
   80f08:	e0bffd8d 	sth	r2,-10(fp)
   80f0c:	008007c4 	movi	r2,31
   80f10:	e0bffe0d 	sth	r2,-8(fp)
   80f14:	0081f804 	movi	r2,2016
   80f18:	e0bffe8d 	sth	r2,-6(fp)
   80f1c:	00be0004 	movi	r2,-2048
   80f20:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(0x00,0x0000);
   80f24:	0009883a 	mov	r4,zero
   80f28:	000b883a 	mov	r5,zero
   80f2c:	00805ac0 	call	805ac <LCD_SetCursor>
        for(m=0;m<320;m++)
   80f30:	e03ffc15 	stw	zero,-16(fp)
   80f34:	00001e06 	br	80fb0 <LCD_Pattern_Vertical+0xc0>
        {
			for(i=0;i<4;i++)
   80f38:	e03ffa15 	stw	zero,-24(fp)
   80f3c:	00001606 	br	80f98 <LCD_Pattern_Vertical+0xa8>
			{
				data=color[i];
   80f40:	e0bffa17 	ldw	r2,-24(fp)
   80f44:	1085883a 	add	r2,r2,r2
   80f48:	e0fffa04 	addi	r3,fp,-24
   80f4c:	1885883a 	add	r2,r3,r2
   80f50:	10800384 	addi	r2,r2,14
   80f54:	1080000b 	ldhu	r2,0(r2)
   80f58:	e0bffd0d 	sth	r2,-12(fp)
				for(j=0;j<60;j++)
   80f5c:	e03ffb15 	stw	zero,-20(fp)
   80f60:	00000706 	br	80f80 <LCD_Pattern_Vertical+0x90>
				{
					LCD_WR_DATA(data);
   80f64:	e0fffd0b 	ldhu	r3,-12(fp)
   80f68:	00800434 	movhi	r2,16
   80f6c:	10842704 	addi	r2,r2,4252
   80f70:	10c00035 	stwio	r3,0(r2)
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
			{
				data=color[i];
				for(j=0;j<60;j++)
   80f74:	e0bffb17 	ldw	r2,-20(fp)
   80f78:	10800044 	addi	r2,r2,1
   80f7c:	e0bffb15 	stw	r2,-20(fp)
   80f80:	e0bffb17 	ldw	r2,-20(fp)
   80f84:	10800f10 	cmplti	r2,r2,60
   80f88:	103ff61e 	bne	r2,zero,80f64 <__alt_data_end+0xfffc8cf4>
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
   80f8c:	e0bffa17 	ldw	r2,-24(fp)
   80f90:	10800044 	addi	r2,r2,1
   80f94:	e0bffa15 	stw	r2,-24(fp)
   80f98:	e0bffa17 	ldw	r2,-24(fp)
   80f9c:	10800110 	cmplti	r2,r2,4
   80fa0:	103fe71e 	bne	r2,zero,80f40 <__alt_data_end+0xfffc8cd0>
{
        int i,j,m;
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
   80fa4:	e0bffc17 	ldw	r2,-16(fp)
   80fa8:	10800044 	addi	r2,r2,1
   80fac:	e0bffc15 	stw	r2,-16(fp)
   80fb0:	e0bffc17 	ldw	r2,-16(fp)
   80fb4:	10805010 	cmplti	r2,r2,320
   80fb8:	103fdf1e 	bne	r2,zero,80f38 <__alt_data_end+0xfffc8cc8>
				{
					LCD_WR_DATA(data);
				}
			}
        }
}
   80fbc:	e037883a 	mov	sp,fp
   80fc0:	dfc00117 	ldw	ra,4(sp)
   80fc4:	df000017 	ldw	fp,0(sp)
   80fc8:	dec00204 	addi	sp,sp,8
   80fcc:	f800283a 	ret

00080fd0 <vid_clean_screen>:
#include "ILI9341.h"
#endif


// richard add
void vid_clean_screen(alt_video_display* display, int color){
   80fd0:	defffa04 	addi	sp,sp,-24
   80fd4:	dfc00515 	stw	ra,20(sp)
   80fd8:	df000415 	stw	fp,16(sp)
   80fdc:	df000404 	addi	fp,sp,16
   80fe0:	e13ffe15 	stw	r4,-8(fp)
   80fe4:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
   80fe8:	e0bffe17 	ldw	r2,-8(fp)
   80fec:	10c00117 	ldw	r3,4(r2)
   80ff0:	e0bffe17 	ldw	r2,-8(fp)
   80ff4:	10800217 	ldw	r2,8(r2)
   80ff8:	e13fff17 	ldw	r4,-4(fp)
   80ffc:	d9000015 	stw	r4,0(sp)
   81000:	e13ffe17 	ldw	r4,-8(fp)
   81004:	d9000115 	stw	r4,4(sp)
   81008:	0009883a 	mov	r4,zero
   8100c:	000b883a 	mov	r5,zero
   81010:	180d883a 	mov	r6,r3
   81014:	100f883a 	mov	r7,r2
   81018:	0081b4c0 	call	81b4c <vid_paint_block>
}
   8101c:	e037883a 	mov	sp,fp
   81020:	dfc00117 	ldw	ra,4(sp)
   81024:	df000017 	ldw	fp,0(sp)
   81028:	dec00204 	addi	sp,sp,8
   8102c:	f800283a 	ret

00081030 <vid_draw_line>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
   81030:	defff704 	addi	sp,sp,-36
   81034:	dfc00815 	stw	ra,32(sp)
   81038:	df000715 	stw	fp,28(sp)
   8103c:	df000704 	addi	fp,sp,28
   81040:	e13ffc15 	stw	r4,-16(fp)
   81044:	e17ffd15 	stw	r5,-12(fp)
   81048:	e1bffe15 	stw	r6,-8(fp)
   8104c:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
   81050:	e0fffd17 	ldw	r3,-12(fp)
   81054:	e0bfff17 	ldw	r2,-4(fp)
   81058:	1880111e 	bne	r3,r2,810a0 <vid_draw_line+0x70>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
   8105c:	e0bffc17 	ldw	r2,-16(fp)
   81060:	113fffcc 	andi	r4,r2,65535
   81064:	2120001c 	xori	r4,r4,32768
   81068:	21200004 	addi	r4,r4,-32768
   8106c:	e0bffe17 	ldw	r2,-8(fp)
   81070:	10ffffcc 	andi	r3,r2,65535
   81074:	18e0001c 	xori	r3,r3,32768
   81078:	18e00004 	addi	r3,r3,-32768
                         (unsigned short)horiz_end, 
                         (unsigned short)vert_start,
   8107c:	e0bffd17 	ldw	r2,-12(fp)
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
   81080:	10bfffcc 	andi	r2,r2,65535
   81084:	e1400417 	ldw	r5,16(fp)
   81088:	d9400015 	stw	r5,0(sp)
   8108c:	180b883a 	mov	r5,r3
   81090:	100d883a 	mov	r6,r2
   81094:	e1c00317 	ldw	r7,12(fp)
   81098:	0081be00 	call	81be0 <vid_draw_horiz_line>
   8109c:	00001206 	br	810e8 <vid_draw_line+0xb8>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   810a0:	e0bffc17 	ldw	r2,-16(fp)
   810a4:	113fffcc 	andi	r4,r2,65535
                          (unsigned short)vert_start, 
   810a8:	e0bffd17 	ldw	r2,-12(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   810ac:	117fffcc 	andi	r5,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
   810b0:	e0bffe17 	ldw	r2,-8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   810b4:	10ffffcc 	andi	r3,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
   810b8:	e0bfff17 	ldw	r2,-4(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   810bc:	10bfffcc 	andi	r2,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
   810c0:	e1800217 	ldw	r6,8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   810c4:	31bfffcc 	andi	r6,r6,65535
   810c8:	d9800015 	stw	r6,0(sp)
   810cc:	e1800317 	ldw	r6,12(fp)
   810d0:	d9800115 	stw	r6,4(sp)
   810d4:	e1800417 	ldw	r6,16(fp)
   810d8:	d9800215 	stw	r6,8(sp)
   810dc:	180d883a 	mov	r6,r3
   810e0:	100f883a 	mov	r7,r2
   810e4:	0081df00 	call	81df0 <vid_draw_sloped_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
   810e8:	e037883a 	mov	sp,fp
   810ec:	dfc00117 	ldw	ra,4(sp)
   810f0:	df000017 	ldw	fp,0(sp)
   810f4:	dec00204 	addi	sp,sp,8
   810f8:	f800283a 	ret

000810fc <vid_scroll_string_quit>:



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
   810fc:	defffd04 	addi	sp,sp,-12
   81100:	dfc00215 	stw	ra,8(sp)
   81104:	df000115 	stw	fp,4(sp)
   81108:	df000104 	addi	fp,sp,4
   8110c:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
   81110:	e0bfff17 	ldw	r2,-4(fp)
   81114:	10800517 	ldw	r2,20(r2)
   81118:	1009883a 	mov	r4,r2
   8111c:	0089bb80 	call	89bb8 <free>
  free(scroll);
   81120:	e13fff17 	ldw	r4,-4(fp)
   81124:	0089bb80 	call	89bb8 <free>
}
   81128:	e037883a 	mov	sp,fp
   8112c:	dfc00117 	ldw	ra,4(sp)
   81130:	df000017 	ldw	fp,0(sp)
   81134:	dec00204 	addi	sp,sp,8
   81138:	f800283a 	ret

0008113c <vid_scroll_string_init>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
   8113c:	defff904 	addi	sp,sp,-28
   81140:	dfc00615 	stw	ra,24(sp)
   81144:	df000515 	stw	fp,20(sp)
   81148:	df000504 	addi	fp,sp,20
   8114c:	e13ffc15 	stw	r4,-16(fp)
   81150:	e17ffd15 	stw	r5,-12(fp)
   81154:	e1bffe15 	stw	r6,-8(fp)
   81158:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = malloc(sizeof (vid_text_scroll_struct));
   8115c:	01000f04 	movi	r4,60
   81160:	0089ba40 	call	89ba4 <malloc>
   81164:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
   81168:	e0bffb17 	ldw	r2,-20(fp)
   8116c:	e0fffc17 	ldw	r3,-16(fp)
   81170:	10c00015 	stw	r3,0(r2)
  scroll->vbegin = vbegin;
   81174:	e0bffb17 	ldw	r2,-20(fp)
   81178:	e0fffd17 	ldw	r3,-12(fp)
   8117c:	10c00115 	stw	r3,4(r2)
  scroll->hend = hend;
   81180:	e0bffb17 	ldw	r2,-20(fp)
   81184:	e0fffe17 	ldw	r3,-8(fp)
   81188:	10c00215 	stw	r3,8(r2)
  scroll->f_color = f_color;
   8118c:	e0bffb17 	ldw	r2,-20(fp)
   81190:	e0ffff17 	ldw	r3,-4(fp)
   81194:	10c00315 	stw	r3,12(r2)
  scroll->b_color = b_color;
   81198:	e0bffb17 	ldw	r2,-20(fp)
   8119c:	e0c00217 	ldw	r3,8(fp)
   811a0:	10c00415 	stw	r3,16(r2)
  scroll->string = malloc(strlen(string)+2);
   811a4:	e1000517 	ldw	r4,20(fp)
   811a8:	008a4fc0 	call	8a4fc <strlen>
   811ac:	10800084 	addi	r2,r2,2
   811b0:	1009883a 	mov	r4,r2
   811b4:	0089ba40 	call	89ba4 <malloc>
   811b8:	1007883a 	mov	r3,r2
   811bc:	e0bffb17 	ldw	r2,-20(fp)
   811c0:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
   811c4:	e0bffb17 	ldw	r2,-20(fp)
   811c8:	10800517 	ldw	r2,20(r2)
   811cc:	1009883a 	mov	r4,r2
   811d0:	e1400517 	ldw	r5,20(fp)
   811d4:	008a4dc0 	call	8a4dc <strcpy>
  scroll->font = font;
   811d8:	e0bffb17 	ldw	r2,-20(fp)
   811dc:	e0c00317 	ldw	r3,12(fp)
   811e0:	10c00615 	stw	r3,24(r2)
  scroll->ms_delay = ms_delay;
   811e4:	e0bffb17 	ldw	r2,-20(fp)
   811e8:	e0c00417 	ldw	r3,16(fp)
   811ec:	10c00715 	stw	r3,28(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   811f0:	008002f4 	movhi	r2,11
   811f4:	10b57104 	addi	r2,r2,-10812
   811f8:	10800017 	ldw	r2,0(r2)
  scroll->ticks_at_last_move = alt_nticks();
   811fc:	1007883a 	mov	r3,r2
   81200:	e0bffb17 	ldw	r2,-20(fp)
   81204:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
   81208:	e0bffb17 	ldw	r2,-20(fp)
   8120c:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
   81210:	e0bffb17 	ldw	r2,-20(fp)
   81214:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
   81218:	e0bffb17 	ldw	r2,-20(fp)
   8121c:	10c00217 	ldw	r3,8(r2)
   81220:	e0bffb17 	ldw	r2,-20(fp)
   81224:	10800017 	ldw	r2,0(r2)
   81228:	1887c83a 	sub	r3,r3,r2
   8122c:	e0bffb17 	ldw	r2,-20(fp)
   81230:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
   81234:	e1000517 	ldw	r4,20(fp)
   81238:	008a4fc0 	call	8a4fc <strlen>
   8123c:	1007883a 	mov	r3,r2
   81240:	e0bffb17 	ldw	r2,-20(fp)
   81244:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
   81248:	e0bffb17 	ldw	r2,-20(fp)
   8124c:	10800c17 	ldw	r2,48(r2)
   81250:	100690fa 	slli	r3,r2,3
   81254:	e0bffb17 	ldw	r2,-20(fp)
   81258:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
   8125c:	e0bffb17 	ldw	r2,-20(fp)
   81260:	10c00b17 	ldw	r3,44(r2)
   81264:	e0bffb17 	ldw	r2,-20(fp)
   81268:	10800e17 	ldw	r2,56(r2)
   8126c:	1887883a 	add	r3,r3,r2
   81270:	e0bffb17 	ldw	r2,-20(fp)
   81274:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
   81278:	e0bffb17 	ldw	r2,-20(fp)
  
}
   8127c:	e037883a 	mov	sp,fp
   81280:	dfc00117 	ldw	ra,4(sp)
   81284:	df000017 	ldw	fp,0(sp)
   81288:	dec00204 	addi	sp,sp,8
   8128c:	f800283a 	ret

00081290 <vid_scroll_string>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
   81290:	deffec04 	addi	sp,sp,-80
   81294:	dfc01315 	stw	ra,76(sp)
   81298:	df001215 	stw	fp,72(sp)
   8129c:	dc401115 	stw	r17,68(sp)
   812a0:	dc001015 	stw	r16,64(sp)
   812a4:	df001204 	addi	fp,sp,72
   812a8:	e13ffc15 	stw	r4,-16(fp)
   812ac:	e17ffd15 	stw	r5,-12(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
   812b0:	00800044 	movi	r2,1
   812b4:	e0bff605 	stb	r2,-40(fp)
   812b8:	008002f4 	movhi	r2,11
   812bc:	10b57104 	addi	r2,r2,-10812
   812c0:	10800017 	ldw	r2,0(r2)

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
   812c4:	1021883a 	mov	r16,r2
   812c8:	e0bffc17 	ldw	r2,-16(fp)
   812cc:	10800817 	ldw	r2,32(r2)
   812d0:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   812d4:	008002f4 	movhi	r2,11
   812d8:	10b57204 	addi	r2,r2,-10808
   812dc:	10800017 	ldw	r2,0(r2)
   812e0:	1007883a 	mov	r3,r2
   812e4:	e0bffc17 	ldw	r2,-16(fp)
   812e8:	10800717 	ldw	r2,28(r2)
   812ec:	1885383a 	mul	r2,r3,r2
   812f0:	1009883a 	mov	r4,r2
   812f4:	0140fa04 	movi	r5,1000
   812f8:	00877d80 	call	877d8 <__udivsi3>
   812fc:	8885883a 	add	r2,r17,r2
   81300:	8080bb36 	bltu	r16,r2,815f0 <vid_scroll_string+0x360>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   81304:	008002f4 	movhi	r2,11
   81308:	10b57104 	addi	r2,r2,-10812
   8130c:	10800017 	ldw	r2,0(r2)
    scroll->ticks_at_last_move = alt_nticks();
   81310:	1007883a 	mov	r3,r2
   81314:	e0bffc17 	ldw	r2,-16(fp)
   81318:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
   8131c:	e0bffc17 	ldw	r2,-16(fp)
   81320:	10800a03 	ldbu	r2,40(r2)
   81324:	10803fcc 	andi	r2,r2,255
   81328:	1080201c 	xori	r2,r2,128
   8132c:	10bfe004 	addi	r2,r2,-128
   81330:	1000061e 	bne	r2,zero,8134c <vid_scroll_string+0xbc>
      scroll->text_scroll_index = 0;
   81334:	e0bffc17 	ldw	r2,-16(fp)
   81338:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
   8133c:	e0bffc17 	ldw	r2,-16(fp)
   81340:	00c00044 	movi	r3,1
   81344:	10c00a05 	stb	r3,40(r2)
   81348:	00000e06 	br	81384 <vid_scroll_string+0xf4>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
   8134c:	e0bffc17 	ldw	r2,-16(fp)
   81350:	10c00917 	ldw	r3,36(r2)
   81354:	e0bffc17 	ldw	r2,-16(fp)
   81358:	10800d17 	ldw	r2,52(r2)
   8135c:	18800316 	blt	r3,r2,8136c <vid_scroll_string+0xdc>
      scroll->text_scroll_started = 0;
   81360:	e0bffc17 	ldw	r2,-16(fp)
   81364:	10000a05 	stb	zero,40(r2)
   81368:	00000606 	br	81384 <vid_scroll_string+0xf4>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
   8136c:	e0bffc17 	ldw	r2,-16(fp)
   81370:	10c00917 	ldw	r3,36(r2)
   81374:	e0bff607 	ldb	r2,-40(fp)
   81378:	1887883a 	add	r3,r3,r2
   8137c:	e0bffc17 	ldw	r2,-16(fp)
   81380:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
   81384:	e0bffc17 	ldw	r2,-16(fp)
   81388:	10c00917 	ldw	r3,36(r2)
   8138c:	e0bffc17 	ldw	r2,-16(fp)
   81390:	10800b17 	ldw	r2,44(r2)
   81394:	18800a0e 	bge	r3,r2,813c0 <vid_scroll_string+0x130>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
   81398:	e0bffc17 	ldw	r2,-16(fp)
   8139c:	10c00017 	ldw	r3,0(r2)
   813a0:	e0bffc17 	ldw	r2,-16(fp)
   813a4:	10800b17 	ldw	r2,44(r2)
   813a8:	1887883a 	add	r3,r3,r2
   813ac:	e0bffc17 	ldw	r2,-16(fp)
   813b0:	10800917 	ldw	r2,36(r2)
   813b4:	1885c83a 	sub	r2,r3,r2
   813b8:	e0bff115 	stw	r2,-60(fp)
   813bc:	00000306 	br	813cc <vid_scroll_string+0x13c>
    } else {
      x_start = scroll->hbegin;
   813c0:	e0bffc17 	ldw	r2,-16(fp)
   813c4:	10800017 	ldw	r2,0(r2)
   813c8:	e0bff115 	stw	r2,-60(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
   813cc:	e0bffc17 	ldw	r2,-16(fp)
   813d0:	10800e17 	ldw	r2,56(r2)
   813d4:	e0fffc17 	ldw	r3,-16(fp)
   813d8:	18c00917 	ldw	r3,36(r3)
   813dc:	1880040e 	bge	r3,r2,813f0 <vid_scroll_string+0x160>
      x_end = scroll->hend;
   813e0:	e0bffc17 	ldw	r2,-16(fp)
   813e4:	10800217 	ldw	r2,8(r2)
   813e8:	e0bff215 	stw	r2,-56(fp)
   813ec:	00000906 	br	81414 <vid_scroll_string+0x184>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
   813f0:	e0bffc17 	ldw	r2,-16(fp)
   813f4:	10c00217 	ldw	r3,8(r2)
   813f8:	e0bffc17 	ldw	r2,-16(fp)
   813fc:	10800917 	ldw	r2,36(r2)
   81400:	1887c83a 	sub	r3,r3,r2
   81404:	e0bffc17 	ldw	r2,-16(fp)
   81408:	10800e17 	ldw	r2,56(r2)
   8140c:	1885883a 	add	r2,r3,r2
   81410:	e0bff215 	stw	r2,-56(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
   81414:	e0bff117 	ldw	r2,-60(fp)
   81418:	e0bff315 	stw	r2,-52(fp)
   8141c:	00006006 	br	815a0 <vid_scroll_string+0x310>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
   81420:	e0bffc17 	ldw	r2,-16(fp)
   81424:	10c00917 	ldw	r3,36(r2)
   81428:	e0bffc17 	ldw	r2,-16(fp)
   8142c:	10800b17 	ldw	r2,44(r2)
   81430:	1880050e 	bge	r3,r2,81448 <vid_scroll_string+0x1b8>
        string_x_index = (x_index - x_start);
   81434:	e0fff317 	ldw	r3,-52(fp)
   81438:	e0bff117 	ldw	r2,-60(fp)
   8143c:	1885c83a 	sub	r2,r3,r2
   81440:	e0bff415 	stw	r2,-48(fp)
   81444:	00000a06 	br	81470 <vid_scroll_string+0x1e0>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
   81448:	e0bffc17 	ldw	r2,-16(fp)
   8144c:	10c00917 	ldw	r3,36(r2)
   81450:	e0bffc17 	ldw	r2,-16(fp)
   81454:	10800b17 	ldw	r2,44(r2)
   81458:	1887c83a 	sub	r3,r3,r2
   8145c:	e0bff317 	ldw	r2,-52(fp)
   81460:	1887883a 	add	r3,r3,r2
   81464:	e0bff117 	ldw	r2,-60(fp)
   81468:	1885c83a 	sub	r2,r3,r2
   8146c:	e0bff415 	stw	r2,-48(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
   81470:	e0bff417 	ldw	r2,-48(fp)
   81474:	1000010e 	bge	r2,zero,8147c <vid_scroll_string+0x1ec>
   81478:	108001c4 	addi	r2,r2,7
   8147c:	1005d0fa 	srai	r2,r2,3
   81480:	e0bff715 	stw	r2,-36(fp)
      character = scroll->string[string_char_index];
   81484:	e0bffc17 	ldw	r2,-16(fp)
   81488:	10c00517 	ldw	r3,20(r2)
   8148c:	e0bff717 	ldw	r2,-36(fp)
   81490:	1885883a 	add	r2,r3,r2
   81494:	10800003 	ldbu	r2,0(r2)
   81498:	e0bff805 	stb	r2,-32(fp)
      char_column = (string_x_index % 8);
   8149c:	e0fff417 	ldw	r3,-48(fp)
   814a0:	00a00034 	movhi	r2,32768
   814a4:	108001c4 	addi	r2,r2,7
   814a8:	1884703a 	and	r2,r3,r2
   814ac:	1000040e 	bge	r2,zero,814c0 <vid_scroll_string+0x230>
   814b0:	10bfffc4 	addi	r2,r2,-1
   814b4:	00fffe04 	movi	r3,-8
   814b8:	10c4b03a 	or	r2,r2,r3
   814bc:	10800044 	addi	r2,r2,1
   814c0:	e0bff915 	stw	r2,-28(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
   814c4:	00c02004 	movi	r3,128
   814c8:	e0bff917 	ldw	r2,-28(fp)
   814cc:	1884d83a 	srl	r2,r3,r2
   814d0:	e0bffa05 	stb	r2,-24(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
   814d4:	e0bffc17 	ldw	r2,-16(fp)
   814d8:	10c00617 	ldw	r3,24(r2)
   814dc:	e0bff807 	ldb	r2,-32(fp)
   814e0:	10bff804 	addi	r2,r2,-32
   814e4:	108002e4 	muli	r2,r2,11
   814e8:	1885883a 	add	r2,r3,r2
   814ec:	e0bffb15 	stw	r2,-20(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
   814f0:	e03ff515 	stw	zero,-44(fp)
   814f4:	00002406 	br	81588 <vid_scroll_string+0x2f8>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
   814f8:	e0bff517 	ldw	r2,-44(fp)
   814fc:	e0fffb17 	ldw	r3,-20(fp)
   81500:	1885883a 	add	r2,r3,r2
   81504:	10c00003 	ldbu	r3,0(r2)
   81508:	e0bffa03 	ldbu	r2,-24(fp)
   8150c:	1884703a 	and	r2,r3,r2
   81510:	10803fcc 	andi	r2,r2,255
   81514:	1080201c 	xori	r2,r2,128
   81518:	10bfe004 	addi	r2,r2,-128
   8151c:	10000c26 	beq	r2,zero,81550 <vid_scroll_string+0x2c0>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
   81520:	e0bffc17 	ldw	r2,-16(fp)
   81524:	10c00117 	ldw	r3,4(r2)
   81528:	e0bff517 	ldw	r2,-44(fp)
   8152c:	1887883a 	add	r3,r3,r2
   81530:	e0bffc17 	ldw	r2,-16(fp)
   81534:	10800317 	ldw	r2,12(r2)
   81538:	e13ff317 	ldw	r4,-52(fp)
   8153c:	180b883a 	mov	r5,r3
   81540:	100d883a 	mov	r6,r2
   81544:	e1fffd17 	ldw	r7,-12(fp)
   81548:	0081a740 	call	81a74 <vid_set_pixel>
   8154c:	00000b06 	br	8157c <vid_scroll_string+0x2ec>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
   81550:	e0bffc17 	ldw	r2,-16(fp)
   81554:	10c00117 	ldw	r3,4(r2)
   81558:	e0bff517 	ldw	r2,-44(fp)
   8155c:	1887883a 	add	r3,r3,r2
   81560:	e0bffc17 	ldw	r2,-16(fp)
   81564:	10800417 	ldw	r2,16(r2)
   81568:	e13ff317 	ldw	r4,-52(fp)
   8156c:	180b883a 	mov	r5,r3
   81570:	100d883a 	mov	r6,r2
   81574:	e1fffd17 	ldw	r7,-12(fp)
   81578:	0081a740 	call	81a74 <vid_set_pixel>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
   8157c:	e0bff517 	ldw	r2,-44(fp)
   81580:	10800044 	addi	r2,r2,1
   81584:	e0bff515 	stw	r2,-44(fp)
   81588:	e0bff517 	ldw	r2,-44(fp)
   8158c:	108002d0 	cmplti	r2,r2,11
   81590:	103fd91e 	bne	r2,zero,814f8 <__alt_data_end+0xfffc9288>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
   81594:	e0bff317 	ldw	r2,-52(fp)
   81598:	10800044 	addi	r2,r2,1
   8159c:	e0bff315 	stw	r2,-52(fp)
   815a0:	e0fff317 	ldw	r3,-52(fp)
   815a4:	e0bff217 	ldw	r2,-56(fp)
   815a8:	18bf9d16 	blt	r3,r2,81420 <__alt_data_end+0xfffc91b0>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
   815ac:	e0bffc17 	ldw	r2,-16(fp)
   815b0:	10c00117 	ldw	r3,4(r2)
   815b4:	e0bffc17 	ldw	r2,-16(fp)
   815b8:	10800117 	ldw	r2,4(r2)
   815bc:	10800284 	addi	r2,r2,10
   815c0:	e13ffc17 	ldw	r4,-16(fp)
   815c4:	21000417 	ldw	r4,16(r4)
   815c8:	01400044 	movi	r5,1
   815cc:	d9400015 	stw	r5,0(sp)
   815d0:	d9000115 	stw	r4,4(sp)
   815d4:	e13ffd17 	ldw	r4,-12(fp)
   815d8:	d9000215 	stw	r4,8(sp)
   815dc:	e13ff217 	ldw	r4,-56(fp)
   815e0:	180b883a 	mov	r5,r3
   815e4:	e1bff217 	ldw	r6,-56(fp)
   815e8:	100f883a 	mov	r7,r2
   815ec:	00810300 	call	81030 <vid_draw_line>
    // Log what time we moved the scroll.
  }
  return(0);
   815f0:	0005883a 	mov	r2,zero
}
   815f4:	e6fffe04 	addi	sp,fp,-8
   815f8:	dfc00317 	ldw	ra,12(sp)
   815fc:	df000217 	ldw	fp,8(sp)
   81600:	dc400117 	ldw	r17,4(sp)
   81604:	dc000017 	ldw	r16,0(sp)
   81608:	dec00404 	addi	sp,sp,16
   8160c:	f800283a 	ret

00081610 <vid_move_block>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
   81610:	defff504 	addi	sp,sp,-44
   81614:	dfc00a15 	stw	ra,40(sp)
   81618:	df000915 	stw	fp,36(sp)
   8161c:	df000904 	addi	fp,sp,36
   81620:	e13ffc15 	stw	r4,-16(fp)
   81624:	e17ffd15 	stw	r5,-12(fp)
   81628:	e1bffe15 	stw	r6,-8(fp)
   8162c:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
   81630:	e0800217 	ldw	r2,8(fp)
   81634:	00803716 	blt	zero,r2,81714 <vid_move_block+0x104>
   81638:	e0800317 	ldw	r2,12(fp)
   8163c:	00803516 	blt	zero,r2,81714 <vid_move_block+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
   81640:	e0bffd17 	ldw	r2,-12(fp)
   81644:	e0bff815 	stw	r2,-32(fp)
   81648:	00002f06 	br	81708 <vid_move_block+0xf8>
      write_y = read_y + y_distance;
   8164c:	e0fff817 	ldw	r3,-32(fp)
   81650:	e0800317 	ldw	r2,12(fp)
   81654:	1885883a 	add	r2,r3,r2
   81658:	e0bff915 	stw	r2,-28(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
   8165c:	e0bffc17 	ldw	r2,-16(fp)
   81660:	e0bff715 	stw	r2,-36(fp)
   81664:	00002206 	br	816f0 <vid_move_block+0xe0>
        write_x = read_x + x_distance;
   81668:	e0fff717 	ldw	r3,-36(fp)
   8166c:	e0800217 	ldw	r2,8(fp)
   81670:	1885883a 	add	r2,r3,r2
   81674:	e0bffa15 	stw	r2,-24(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
   81678:	e13ff717 	ldw	r4,-36(fp)
   8167c:	e17ff817 	ldw	r5,-32(fp)
   81680:	e1800517 	ldw	r6,20(fp)
   81684:	0081b100 	call	81b10 <vid_get_pixel>
   81688:	e0bffb0d 	sth	r2,-20(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
   8168c:	e0bffb0f 	ldh	r2,-20(fp)
   81690:	e13ffa17 	ldw	r4,-24(fp)
   81694:	e17ff917 	ldw	r5,-28(fp)
   81698:	100d883a 	mov	r6,r2
   8169c:	e1c00517 	ldw	r7,20(fp)
   816a0:	0081a740 	call	81a74 <vid_set_pixel>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
   816a4:	e0fffe17 	ldw	r3,-8(fp)
   816a8:	e0800217 	ldw	r2,8(fp)
   816ac:	1885883a 	add	r2,r3,r2
   816b0:	e0fff717 	ldw	r3,-36(fp)
   816b4:	1880050e 	bge	r3,r2,816cc <vid_move_block+0xbc>
   816b8:	e0ffff17 	ldw	r3,-4(fp)
   816bc:	e0800317 	ldw	r2,12(fp)
   816c0:	1885883a 	add	r2,r3,r2
   816c4:	e0fff817 	ldw	r3,-32(fp)
   816c8:	18800616 	blt	r3,r2,816e4 <vid_move_block+0xd4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
   816cc:	e0800417 	ldw	r2,16(fp)
   816d0:	e13ff717 	ldw	r4,-36(fp)
   816d4:	e17ff817 	ldw	r5,-32(fp)
   816d8:	100d883a 	mov	r6,r2
   816dc:	e1c00517 	ldw	r7,20(fp)
   816e0:	0081a740 	call	81a74 <vid_set_pixel>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
   816e4:	e0bff717 	ldw	r2,-36(fp)
   816e8:	10800044 	addi	r2,r2,1
   816ec:	e0bff715 	stw	r2,-36(fp)
   816f0:	e0fff717 	ldw	r3,-36(fp)
   816f4:	e0bffe17 	ldw	r2,-8(fp)
   816f8:	18bfdb16 	blt	r3,r2,81668 <__alt_data_end+0xfffc93f8>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
   816fc:	e0bff817 	ldw	r2,-32(fp)
   81700:	10800044 	addi	r2,r2,1
   81704:	e0bff815 	stw	r2,-32(fp)
   81708:	e0fff817 	ldw	r3,-32(fp)
   8170c:	e0bfff17 	ldw	r2,-4(fp)
   81710:	18bfce16 	blt	r3,r2,8164c <__alt_data_end+0xfffc93dc>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
   81714:	0005883a 	mov	r2,zero
}
   81718:	e037883a 	mov	sp,fp
   8171c:	dfc00117 	ldw	ra,4(sp)
   81720:	df000017 	ldw	fp,0(sp)
   81724:	dec00204 	addi	sp,sp,8
   81728:	f800283a 	ret

0008172c <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
   8172c:	defff604 	addi	sp,sp,-40
   81730:	dfc00915 	stw	ra,36(sp)
   81734:	df000815 	stw	fp,32(sp)
   81738:	df000804 	addi	fp,sp,32
   8173c:	e13ffc15 	stw	r4,-16(fp)
   81740:	e17ffd15 	stw	r5,-12(fp)
   81744:	e1bffe15 	stw	r6,-8(fp)
   81748:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
   8174c:	e03ffa15 	stw	zero,-24(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
   81750:	e0bffc17 	ldw	r2,-16(fp)
   81754:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
   81758:	00002806 	br	817fc <vid_print_string+0xd0>
    //Handle newline char here.
    if (string[i] == '\n') {
   8175c:	e0bffa17 	ldw	r2,-24(fp)
   81760:	e0c00317 	ldw	r3,12(fp)
   81764:	1885883a 	add	r2,r3,r2
   81768:	10800003 	ldbu	r2,0(r2)
   8176c:	10803fcc 	andi	r2,r2,255
   81770:	1080201c 	xori	r2,r2,128
   81774:	10bfe004 	addi	r2,r2,-128
   81778:	10800298 	cmpnei	r2,r2,10
   8177c:	1000091e 	bne	r2,zero,817a4 <vid_print_string+0x78>
      horiz_offset = original_horiz_offset;
   81780:	e0bffb17 	ldw	r2,-20(fp)
   81784:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
   81788:	e0bffd17 	ldw	r2,-12(fp)
   8178c:	10800304 	addi	r2,r2,12
   81790:	e0bffd15 	stw	r2,-12(fp)
      i++;
   81794:	e0bffa17 	ldw	r2,-24(fp)
   81798:	10800044 	addi	r2,r2,1
   8179c:	e0bffa15 	stw	r2,-24(fp)
      continue;
   817a0:	00001606 	br	817fc <vid_print_string+0xd0>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
   817a4:	e0bffa17 	ldw	r2,-24(fp)
   817a8:	e0c00317 	ldw	r3,12(fp)
   817ac:	1885883a 	add	r2,r3,r2
   817b0:	10800003 	ldbu	r2,0(r2)
   817b4:	10803fcc 	andi	r2,r2,255
   817b8:	1080201c 	xori	r2,r2,128
   817bc:	10bfe004 	addi	r2,r2,-128
   817c0:	e0ffff17 	ldw	r3,-4(fp)
   817c4:	d8c00015 	stw	r3,0(sp)
   817c8:	e0c00217 	ldw	r3,8(fp)
   817cc:	d8c00115 	stw	r3,4(sp)
   817d0:	e13ffc17 	ldw	r4,-16(fp)
   817d4:	e17ffd17 	ldw	r5,-12(fp)
   817d8:	e1bffe17 	ldw	r6,-8(fp)
   817dc:	100f883a 	mov	r7,r2
   817e0:	00819840 	call	81984 <vid_print_char>
    i++;
   817e4:	e0bffa17 	ldw	r2,-24(fp)
   817e8:	10800044 	addi	r2,r2,1
   817ec:	e0bffa15 	stw	r2,-24(fp)
    horiz_offset += 8;
   817f0:	e0bffc17 	ldw	r2,-16(fp)
   817f4:	10800204 	addi	r2,r2,8
   817f8:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
   817fc:	e0bffa17 	ldw	r2,-24(fp)
   81800:	e0c00317 	ldw	r3,12(fp)
   81804:	1885883a 	add	r2,r3,r2
   81808:	10800003 	ldbu	r2,0(r2)
   8180c:	10803fcc 	andi	r2,r2,255
   81810:	1080201c 	xori	r2,r2,128
   81814:	10bfe004 	addi	r2,r2,-128
   81818:	103fd01e 	bne	r2,zero,8175c <__alt_data_end+0xfffc94ec>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
   8181c:	0005883a 	mov	r2,zero
}
   81820:	e037883a 	mov	sp,fp
   81824:	dfc00117 	ldw	ra,4(sp)
   81828:	df000017 	ldw	fp,0(sp)
   8182c:	dec00204 	addi	sp,sp,8
   81830:	f800283a 	ret

00081834 <vid_draw_box>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
   81834:	defff704 	addi	sp,sp,-36
   81838:	dfc00815 	stw	ra,32(sp)
   8183c:	df000715 	stw	fp,28(sp)
   81840:	df000704 	addi	fp,sp,28
   81844:	e13ffc15 	stw	r4,-16(fp)
   81848:	e17ffd15 	stw	r5,-12(fp)
   8184c:	e1bffe15 	stw	r6,-8(fp)
   81850:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
   81854:	e0800317 	ldw	r2,12(fp)
   81858:	10000a26 	beq	r2,zero,81884 <vid_draw_box+0x50>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
   8185c:	e0800217 	ldw	r2,8(fp)
   81860:	d8800015 	stw	r2,0(sp)
   81864:	e0800417 	ldw	r2,16(fp)
   81868:	d8800115 	stw	r2,4(sp)
   8186c:	e13ffc17 	ldw	r4,-16(fp)
   81870:	e17ffd17 	ldw	r5,-12(fp)
   81874:	e1bffe17 	ldw	r6,-8(fp)
   81878:	e1ffff17 	ldw	r7,-4(fp)
   8187c:	0081b4c0 	call	81b4c <vid_paint_block>
   81880:	00003a06 	br	8196c <vid_draw_box+0x138>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
   81884:	e0bfff17 	ldw	r2,-4(fp)
   81888:	10bfffc4 	addi	r2,r2,-1
   8188c:	00c00044 	movi	r3,1
   81890:	d8c00015 	stw	r3,0(sp)
   81894:	e0c00217 	ldw	r3,8(fp)
   81898:	d8c00115 	stw	r3,4(sp)
   8189c:	e0c00417 	ldw	r3,16(fp)
   818a0:	d8c00215 	stw	r3,8(sp)
   818a4:	e13ffc17 	ldw	r4,-16(fp)
   818a8:	e17ffd17 	ldw	r5,-12(fp)
   818ac:	e1bffc17 	ldw	r6,-16(fp)
   818b0:	100f883a 	mov	r7,r2
   818b4:	00810300 	call	81030 <vid_draw_line>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
   818b8:	e0bffe17 	ldw	r2,-8(fp)
   818bc:	113fffc4 	addi	r4,r2,-1
   818c0:	e0bffe17 	ldw	r2,-8(fp)
   818c4:	10ffffc4 	addi	r3,r2,-1
   818c8:	e0bfff17 	ldw	r2,-4(fp)
   818cc:	10bfffc4 	addi	r2,r2,-1
   818d0:	01400044 	movi	r5,1
   818d4:	d9400015 	stw	r5,0(sp)
   818d8:	e1400217 	ldw	r5,8(fp)
   818dc:	d9400115 	stw	r5,4(sp)
   818e0:	e1400417 	ldw	r5,16(fp)
   818e4:	d9400215 	stw	r5,8(sp)
   818e8:	e17ffd17 	ldw	r5,-12(fp)
   818ec:	180d883a 	mov	r6,r3
   818f0:	100f883a 	mov	r7,r2
   818f4:	00810300 	call	81030 <vid_draw_line>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
   818f8:	e0bffe17 	ldw	r2,-8(fp)
   818fc:	10bfffc4 	addi	r2,r2,-1
   81900:	00c00044 	movi	r3,1
   81904:	d8c00015 	stw	r3,0(sp)
   81908:	e0c00217 	ldw	r3,8(fp)
   8190c:	d8c00115 	stw	r3,4(sp)
   81910:	e0c00417 	ldw	r3,16(fp)
   81914:	d8c00215 	stw	r3,8(sp)
   81918:	e13ffc17 	ldw	r4,-16(fp)
   8191c:	e17ffd17 	ldw	r5,-12(fp)
   81920:	100d883a 	mov	r6,r2
   81924:	e1fffd17 	ldw	r7,-12(fp)
   81928:	00810300 	call	81030 <vid_draw_line>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
   8192c:	e0bfff17 	ldw	r2,-4(fp)
   81930:	117fffc4 	addi	r5,r2,-1
   81934:	e0bffe17 	ldw	r2,-8(fp)
   81938:	10ffffc4 	addi	r3,r2,-1
   8193c:	e0bfff17 	ldw	r2,-4(fp)
   81940:	10bfffc4 	addi	r2,r2,-1
   81944:	01000044 	movi	r4,1
   81948:	d9000015 	stw	r4,0(sp)
   8194c:	e1000217 	ldw	r4,8(fp)
   81950:	d9000115 	stw	r4,4(sp)
   81954:	e1000417 	ldw	r4,16(fp)
   81958:	d9000215 	stw	r4,8(sp)
   8195c:	e13ffc17 	ldw	r4,-16(fp)
   81960:	180d883a 	mov	r6,r3
   81964:	100f883a 	mov	r7,r2
   81968:	00810300 	call	81030 <vid_draw_line>
  }

  return (0);
   8196c:	0005883a 	mov	r2,zero
}
   81970:	e037883a 	mov	sp,fp
   81974:	dfc00117 	ldw	ra,4(sp)
   81978:	df000017 	ldw	fp,0(sp)
   8197c:	dec00204 	addi	sp,sp,8
   81980:	f800283a 	ret

00081984 <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
   81984:	defff704 	addi	sp,sp,-36
   81988:	dfc00815 	stw	ra,32(sp)
   8198c:	df000715 	stw	fp,28(sp)
   81990:	df000704 	addi	fp,sp,28
   81994:	e13ffc15 	stw	r4,-16(fp)
   81998:	e17ffd15 	stw	r5,-12(fp)
   8199c:	e1bffe15 	stw	r6,-8(fp)
   819a0:	3805883a 	mov	r2,r7
   819a4:	e0bfff05 	stb	r2,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
   819a8:	e0bfff03 	ldbu	r2,-4(fp)
   819ac:	10bff804 	addi	r2,r2,-32
   819b0:	e0bffb05 	stb	r2,-20(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
   819b4:	e03ff915 	stw	zero,-28(fp)
   819b8:	00002506 	br	81a50 <vid_print_char+0xcc>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
   819bc:	e0bffb07 	ldb	r2,-20(fp)
   819c0:	108002e4 	muli	r2,r2,11
   819c4:	1007883a 	mov	r3,r2
   819c8:	e0bff917 	ldw	r2,-28(fp)
   819cc:	1885883a 	add	r2,r3,r2
   819d0:	e0c00217 	ldw	r3,8(fp)
   819d4:	1885883a 	add	r2,r3,r2
   819d8:	10800003 	ldbu	r2,0(r2)
   819dc:	e0bffb45 	stb	r2,-19(fp)
    for (j = 0; j < 8; j++) {
   819e0:	e03ffa15 	stw	zero,-24(fp)
   819e4:	00001406 	br	81a38 <vid_print_char+0xb4>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
   819e8:	e0fffb47 	ldb	r3,-19(fp)
   819ec:	01002004 	movi	r4,128
   819f0:	e0bffa17 	ldw	r2,-24(fp)
   819f4:	2085d83a 	sra	r2,r4,r2
   819f8:	1884703a 	and	r2,r3,r2
   819fc:	10000b26 	beq	r2,zero,81a2c <vid_print_char+0xa8>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
   81a00:	e0fffc17 	ldw	r3,-16(fp)
   81a04:	e0bffa17 	ldw	r2,-24(fp)
   81a08:	1889883a 	add	r4,r3,r2
   81a0c:	e0fffd17 	ldw	r3,-12(fp)
   81a10:	e0bff917 	ldw	r2,-28(fp)
   81a14:	1887883a 	add	r3,r3,r2
   81a18:	e0bffe17 	ldw	r2,-8(fp)
   81a1c:	180b883a 	mov	r5,r3
   81a20:	100d883a 	mov	r6,r2
   81a24:	e1c00317 	ldw	r7,12(fp)
   81a28:	0081a740 	call	81a74 <vid_set_pixel>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
   81a2c:	e0bffa17 	ldw	r2,-24(fp)
   81a30:	10800044 	addi	r2,r2,1
   81a34:	e0bffa15 	stw	r2,-24(fp)
   81a38:	e0bffa17 	ldw	r2,-24(fp)
   81a3c:	10800210 	cmplti	r2,r2,8
   81a40:	103fe91e 	bne	r2,zero,819e8 <__alt_data_end+0xfffc9778>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
   81a44:	e0bff917 	ldw	r2,-28(fp)
   81a48:	10800044 	addi	r2,r2,1
   81a4c:	e0bff915 	stw	r2,-28(fp)
   81a50:	e0bff917 	ldw	r2,-28(fp)
   81a54:	108002d0 	cmplti	r2,r2,11
   81a58:	103fd81e 	bne	r2,zero,819bc <__alt_data_end+0xfffc974c>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
   81a5c:	0005883a 	mov	r2,zero
}
   81a60:	e037883a 	mov	sp,fp
   81a64:	dfc00117 	ldw	ra,4(sp)
   81a68:	df000017 	ldw	fp,0(sp)
   81a6c:	dec00204 	addi	sp,sp,8
   81a70:	f800283a 	ret

00081a74 <vid_set_pixel>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
   81a74:	defff904 	addi	sp,sp,-28
   81a78:	dfc00615 	stw	ra,24(sp)
   81a7c:	df000515 	stw	fp,20(sp)
   81a80:	df000504 	addi	fp,sp,20
   81a84:	e13ffc15 	stw	r4,-16(fp)
   81a88:	e17ffd15 	stw	r5,-12(fp)
   81a8c:	e1bffe15 	stw	r6,-8(fp)
   81a90:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	alt_u16 color16;


	// encode to RGB  5 6 5
	color16 = (color & 0xFF) >> 3; // blue
   81a94:	e0bffe17 	ldw	r2,-8(fp)
   81a98:	10803fcc 	andi	r2,r2,255
   81a9c:	1004d0fa 	srli	r2,r2,3
   81aa0:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xFC00) >> 5; // green
   81aa4:	e0bffe17 	ldw	r2,-8(fp)
   81aa8:	10bf000c 	andi	r2,r2,64512
   81aac:	1004d17a 	srli	r2,r2,5
   81ab0:	1007883a 	mov	r3,r2
   81ab4:	e0bffb0b 	ldhu	r2,-20(fp)
   81ab8:	1884b03a 	or	r2,r3,r2
   81abc:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xF80000) >> 8; // blue
   81ac0:	e0bffe17 	ldw	r2,-8(fp)
   81ac4:	10803e2c 	andhi	r2,r2,248
   81ac8:	1004d23a 	srli	r2,r2,8
   81acc:	1007883a 	mov	r3,r2
   81ad0:	e0bffb0b 	ldhu	r2,-20(fp)
   81ad4:	1884b03a 	or	r2,r3,r2
   81ad8:	e0bffb0d 	sth	r2,-20(fp)
	LCD_DrawPoint(horiz, vert, color16);
   81adc:	e0bffc17 	ldw	r2,-16(fp)
   81ae0:	113fffcc 	andi	r4,r2,65535
   81ae4:	e0bffd17 	ldw	r2,-12(fp)
   81ae8:	10ffffcc 	andi	r3,r2,65535
   81aec:	e0bffb0b 	ldhu	r2,-20(fp)
   81af0:	180b883a 	mov	r5,r3
   81af4:	100d883a 	mov	r6,r2
   81af8:	00806e00 	call	806e0 <LCD_DrawPoint>
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}
#endif

}
   81afc:	e037883a 	mov	sp,fp
   81b00:	dfc00117 	ldw	ra,4(sp)
   81b04:	df000017 	ldw	fp,0(sp)
   81b08:	dec00204 	addi	sp,sp,8
   81b0c:	f800283a 	ret

00081b10 <vid_get_pixel>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
   81b10:	defffb04 	addi	sp,sp,-20
   81b14:	dfc00415 	stw	ra,16(sp)
   81b18:	df000315 	stw	fp,12(sp)
   81b1c:	df000304 	addi	fp,sp,12
   81b20:	e13ffd15 	stw	r4,-12(fp)
   81b24:	e17ffe15 	stw	r5,-8(fp)
   81b28:	e1bfff15 	stw	r6,-4(fp)
#ifdef LT24
	printf("vid_get_pixel is not implemented\r\n");
   81b2c:	010002b4 	movhi	r4,10
   81b30:	211ae504 	addi	r4,r4,27540
   81b34:	008a39c0 	call	8a39c <puts>
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  return(IORD_16DIRECT(addr, 0));
#endif
}
   81b38:	e037883a 	mov	sp,fp
   81b3c:	dfc00117 	ldw	ra,4(sp)
   81b40:	df000017 	ldw	fp,0(sp)
   81b44:	dec00204 	addi	sp,sp,8
   81b48:	f800283a 	ret

00081b4c <vid_paint_block>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
   81b4c:	defff804 	addi	sp,sp,-32
   81b50:	dfc00715 	stw	ra,28(sp)
   81b54:	df000615 	stw	fp,24(sp)
   81b58:	df000604 	addi	fp,sp,24
   81b5c:	e13ffc15 	stw	r4,-16(fp)
   81b60:	e17ffd15 	stw	r5,-12(fp)
   81b64:	e1bffe15 	stw	r6,-8(fp)
   81b68:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
   81b6c:	e0bffd17 	ldw	r2,-12(fp)
   81b70:	e0bffb15 	stw	r2,-20(fp)
   81b74:	00001206 	br	81bc0 <vid_paint_block+0x74>
		for(x=Hstart;x<Hend;x++){
   81b78:	e0bffc17 	ldw	r2,-16(fp)
   81b7c:	e0bffa15 	stw	r2,-24(fp)
   81b80:	00000906 	br	81ba8 <vid_paint_block+0x5c>
			vid_set_pixel(x, y, color, display);
   81b84:	e0800217 	ldw	r2,8(fp)
   81b88:	e13ffa17 	ldw	r4,-24(fp)
   81b8c:	e17ffb17 	ldw	r5,-20(fp)
   81b90:	100d883a 	mov	r6,r2
   81b94:	e1c00317 	ldw	r7,12(fp)
   81b98:	0081a740 	call	81a74 <vid_set_pixel>
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
		for(x=Hstart;x<Hend;x++){
   81b9c:	e0bffa17 	ldw	r2,-24(fp)
   81ba0:	10800044 	addi	r2,r2,1
   81ba4:	e0bffa15 	stw	r2,-24(fp)
   81ba8:	e0fffa17 	ldw	r3,-24(fp)
   81bac:	e0bffe17 	ldw	r2,-8(fp)
   81bb0:	18bff416 	blt	r3,r2,81b84 <__alt_data_end+0xfffc9914>
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
   81bb4:	e0bffb17 	ldw	r2,-20(fp)
   81bb8:	10800044 	addi	r2,r2,1
   81bbc:	e0bffb15 	stw	r2,-20(fp)
   81bc0:	e0fffb17 	ldw	r3,-20(fp)
   81bc4:	e0bfff17 	ldw	r2,-4(fp)
   81bc8:	18bfeb16 	blt	r3,r2,81b78 <__alt_data_end+0xfffc9908>
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
#endif
}
   81bcc:	e037883a 	mov	sp,fp
   81bd0:	dfc00117 	ldw	ra,4(sp)
   81bd4:	df000017 	ldw	fp,0(sp)
   81bd8:	dec00204 	addi	sp,sp,8
   81bdc:	f800283a 	ret

00081be0 <vid_draw_horiz_line>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
   81be0:	defff904 	addi	sp,sp,-28
   81be4:	dfc00615 	stw	ra,24(sp)
   81be8:	df000515 	stw	fp,20(sp)
   81bec:	df000504 	addi	fp,sp,20
   81bf0:	2007883a 	mov	r3,r4
   81bf4:	2805883a 	mov	r2,r5
   81bf8:	e1bffe15 	stw	r6,-8(fp)
   81bfc:	e1ffff15 	stw	r7,-4(fp)
   81c00:	e0fffc0d 	sth	r3,-16(fp)
   81c04:	e0bffd0d 	sth	r2,-12(fp)
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
   81c08:	e0bffc0f 	ldh	r2,-16(fp)
   81c0c:	e0bffb15 	stw	r2,-20(fp)
   81c10:	00000906 	br	81c38 <vid_draw_horiz_line+0x58>
		vid_set_pixel(x, V, color, display);
   81c14:	e0bfff17 	ldw	r2,-4(fp)
   81c18:	e13ffb17 	ldw	r4,-20(fp)
   81c1c:	e17ffe17 	ldw	r5,-8(fp)
   81c20:	100d883a 	mov	r6,r2
   81c24:	e1c00217 	ldw	r7,8(fp)
   81c28:	0081a740 	call	81a74 <vid_set_pixel>
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
   81c2c:	e0bffb17 	ldw	r2,-20(fp)
   81c30:	10800044 	addi	r2,r2,1
   81c34:	e0bffb15 	stw	r2,-20(fp)
   81c38:	e0bffd0f 	ldh	r2,-12(fp)
   81c3c:	e0fffb17 	ldw	r3,-20(fp)
   81c40:	18bff416 	blt	r3,r2,81c14 <__alt_data_end+0xfffc99a4>
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
  }
  free(fast_buffer);
#endif

}
   81c44:	e037883a 	mov	sp,fp
   81c48:	dfc00117 	ldw	ra,4(sp)
   81c4c:	df000017 	ldw	fp,0(sp)
   81c50:	dec00204 	addi	sp,sp,8
   81c54:	f800283a 	ret

00081c58 <vid_merge_colors>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
   81c58:	defffc04 	addi	sp,sp,-16
   81c5c:	df000315 	stw	fp,12(sp)
   81c60:	df000304 	addi	fp,sp,12
   81c64:	e13ffd15 	stw	r4,-12(fp)
   81c68:	e17ffe15 	stw	r5,-8(fp)
   81c6c:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
   81c70:	e0bffe17 	ldw	r2,-8(fp)
   81c74:	1085883a 	add	r2,r2,r2
   81c78:	10800054 	ori	r2,r2,1
   81c7c:	1006917a 	slli	r3,r2,5
   81c80:	e0bfff17 	ldw	r2,-4(fp)
   81c84:	1886b03a 	or	r3,r3,r2
   81c88:	e0bffd17 	ldw	r2,-12(fp)
   81c8c:	100492fa 	slli	r2,r2,11
   81c90:	1884b03a 	or	r2,r3,r2
}
   81c94:	e037883a 	mov	sp,fp
   81c98:	df000017 	ldw	fp,0(sp)
   81c9c:	dec00104 	addi	sp,sp,4
   81ca0:	f800283a 	ret

00081ca4 <vid_color_convert24_16>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
   81ca4:	defffc04 	addi	sp,sp,-16
   81ca8:	df000315 	stw	fp,12(sp)
   81cac:	df000304 	addi	fp,sp,12
   81cb0:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
   81cb4:	e0bfff17 	ldw	r2,-4(fp)
   81cb8:	10800003 	ldbu	r2,0(r2)
   81cbc:	1007883a 	mov	r3,r2
   81cc0:	00bffe04 	movi	r2,-8
   81cc4:	1884703a 	and	r2,r3,r2
   81cc8:	e0bffd05 	stb	r2,-12(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
   81ccc:	e0bfff17 	ldw	r2,-4(fp)
   81cd0:	10800044 	addi	r2,r2,1
   81cd4:	10800003 	ldbu	r2,0(r2)
   81cd8:	1007883a 	mov	r3,r2
   81cdc:	00bfff04 	movi	r2,-4
   81ce0:	1884703a 	and	r2,r3,r2
   81ce4:	e0bffd45 	stb	r2,-11(fp)
	blue = *(color24 + 2) & 0xF8;
   81ce8:	e0bfff17 	ldw	r2,-4(fp)
   81cec:	10800084 	addi	r2,r2,2
   81cf0:	10800003 	ldbu	r2,0(r2)
   81cf4:	1007883a 	mov	r3,r2
   81cf8:	00bffe04 	movi	r2,-8
   81cfc:	1884703a 	and	r2,r3,r2
   81d00:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
   81d04:	e0bffd83 	ldbu	r2,-10(fp)
   81d08:	1004d0fa 	srli	r2,r2,3
   81d0c:	10c03fcc 	andi	r3,r2,255
   81d10:	e0bffd43 	ldbu	r2,-11(fp)
   81d14:	100490fa 	slli	r2,r2,3
   81d18:	1884b03a 	or	r2,r3,r2
   81d1c:	1007883a 	mov	r3,r2
   81d20:	e0bffd03 	ldbu	r2,-12(fp)
   81d24:	1004923a 	slli	r2,r2,8
   81d28:	1884b03a 	or	r2,r3,r2
   81d2c:	e0bffe0d 	sth	r2,-8(fp)
	return output;
   81d30:	e0bffe0b 	ldhu	r2,-8(fp)
}
   81d34:	e037883a 	mov	sp,fp
   81d38:	df000017 	ldw	fp,0(sp)
   81d3c:	dec00104 	addi	sp,sp,4
   81d40:	f800283a 	ret

00081d44 <vid_color_convert16_24>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
   81d44:	defffd04 	addi	sp,sp,-12
   81d48:	df000215 	stw	fp,8(sp)
   81d4c:	df000204 	addi	fp,sp,8
   81d50:	2005883a 	mov	r2,r4
   81d54:	e17fff15 	stw	r5,-4(fp)
   81d58:	e0bffe0d 	sth	r2,-8(fp)
	*(color24 + 0) = color16 >> 11;
   81d5c:	e0bffe0b 	ldhu	r2,-8(fp)
   81d60:	1004d2fa 	srli	r2,r2,11
   81d64:	1007883a 	mov	r3,r2
   81d68:	e0bfff17 	ldw	r2,-4(fp)
   81d6c:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
   81d70:	e0bfff17 	ldw	r2,-4(fp)
   81d74:	10800044 	addi	r2,r2,1
   81d78:	e0fffe0b 	ldhu	r3,-8(fp)
   81d7c:	18c00f8c 	andi	r3,r3,62
   81d80:	1807d17a 	srai	r3,r3,5
   81d84:	10c00005 	stb	r3,0(r2)
	*(color24 + 2) = (color16 & 0x1F);
   81d88:	e0bfff17 	ldw	r2,-4(fp)
   81d8c:	10800084 	addi	r2,r2,2
   81d90:	e0fffe0b 	ldhu	r3,-8(fp)
   81d94:	18c007cc 	andi	r3,r3,31
   81d98:	10c00005 	stb	r3,0(r2)
	
	return (0);
   81d9c:	0005883a 	mov	r2,zero
}
   81da0:	e037883a 	mov	sp,fp
   81da4:	df000017 	ldw	fp,0(sp)
   81da8:	dec00104 	addi	sp,sp,4
   81dac:	f800283a 	ret

00081db0 <vid_copy_line_to_frame_buffer>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
   81db0:	defffa04 	addi	sp,sp,-24
   81db4:	dfc00515 	stw	ra,20(sp)
   81db8:	df000415 	stw	fp,16(sp)
   81dbc:	df000404 	addi	fp,sp,16
   81dc0:	e13ffc15 	stw	r4,-16(fp)
   81dc4:	e17ffd15 	stw	r5,-12(fp)
   81dc8:	e1bffe15 	stw	r6,-8(fp)
   81dcc:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("vid_copy_line_to_frame_buffer is not implemented!\r\n");
   81dd0:	010002b4 	movhi	r4,10
   81dd4:	211aee04 	addi	r4,r4,27576
   81dd8:	008a39c0 	call	8a39c <puts>
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
    }
  }
  return(0);
#endif
}
   81ddc:	e037883a 	mov	sp,fp
   81de0:	dfc00117 	ldw	ra,4(sp)
   81de4:	df000017 	ldw	fp,0(sp)
   81de8:	dec00204 	addi	sp,sp,8
   81dec:	f800283a 	ret

00081df0 <vid_draw_sloped_line>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
   81df0:	deffef04 	addi	sp,sp,-68
   81df4:	dfc01015 	stw	ra,64(sp)
   81df8:	df000f15 	stw	fp,60(sp)
   81dfc:	df000f04 	addi	fp,sp,60
   81e00:	2011883a 	mov	r8,r4
   81e04:	3009883a 	mov	r4,r6
   81e08:	3807883a 	mov	r3,r7
   81e0c:	e0800217 	ldw	r2,8(fp)
   81e10:	e23ffb0d 	sth	r8,-20(fp)
   81e14:	e17ffc0d 	sth	r5,-16(fp)
   81e18:	e13ffd0d 	sth	r4,-12(fp)
   81e1c:	e0fffe0d 	sth	r3,-8(fp)
   81e20:	e0bfff0d 	sth	r2,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
   81e24:	e0fffd0b 	ldhu	r3,-12(fp)
   81e28:	e0bffb0b 	ldhu	r2,-20(fp)
   81e2c:	1885c83a 	sub	r2,r3,r2
   81e30:	1000010e 	bge	r2,zero,81e38 <vid_draw_sloped_line+0x48>
   81e34:	0085c83a 	sub	r2,zero,r2
   81e38:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
   81e3c:	e0fffe0b 	ldhu	r3,-8(fp)
   81e40:	e0bffc0b 	ldhu	r2,-16(fp)
   81e44:	1885c83a 	sub	r2,r3,r2
   81e48:	1000010e 	bge	r2,zero,81e50 <vid_draw_sloped_line+0x60>
   81e4c:	0085c83a 	sub	r2,zero,r2
   81e50:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
   81e54:	e0bffb0b 	ldhu	r2,-20(fp)
   81e58:	e0fffd0b 	ldhu	r3,-12(fp)
   81e5c:	1880032e 	bgeu	r3,r2,81e6c <vid_draw_sloped_line+0x7c>
   81e60:	00bfffc4 	movi	r2,-1
   81e64:	e0bff315 	stw	r2,-52(fp)
   81e68:	00000206 	br	81e74 <vid_draw_sloped_line+0x84>
   81e6c:	00800044 	movi	r2,1
   81e70:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
   81e74:	e0bffc0b 	ldhu	r2,-16(fp)
   81e78:	e0fffe0b 	ldhu	r3,-8(fp)
   81e7c:	1880032e 	bgeu	r3,r2,81e8c <vid_draw_sloped_line+0x9c>
   81e80:	00bfffc4 	movi	r2,-1
   81e84:	e0bff415 	stw	r2,-48(fp)
   81e88:	00000206 	br	81e94 <vid_draw_sloped_line+0xa4>
   81e8c:	00800044 	movi	r2,1
   81e90:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
   81e94:	e0fff117 	ldw	r3,-60(fp)
   81e98:	e0bff217 	ldw	r2,-56(fp)
   81e9c:	18803416 	blt	r3,r2,81f70 <vid_draw_sloped_line+0x180>
    int dPr   = vert_delta<<1;
   81ea0:	e0bff217 	ldw	r2,-56(fp)
   81ea4:	1085883a 	add	r2,r2,r2
   81ea8:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
   81eac:	e0bff117 	ldw	r2,-60(fp)
   81eb0:	1085883a 	add	r2,r2,r2
   81eb4:	e0fff717 	ldw	r3,-36(fp)
   81eb8:	1885c83a 	sub	r2,r3,r2
   81ebc:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
   81ec0:	e0fff717 	ldw	r3,-36(fp)
   81ec4:	e0bff117 	ldw	r2,-60(fp)
   81ec8:	1885c83a 	sub	r2,r3,r2
   81ecc:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
   81ed0:	00002406 	br	81f64 <vid_draw_sloped_line+0x174>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
   81ed4:	e13ffb0b 	ldhu	r4,-20(fp)
   81ed8:	e0fffc0b 	ldhu	r3,-16(fp)
   81edc:	e0800317 	ldw	r2,12(fp)
   81ee0:	180b883a 	mov	r5,r3
   81ee4:	100d883a 	mov	r6,r2
   81ee8:	e1c00417 	ldw	r7,16(fp)
   81eec:	0081a740 	call	81a74 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
   81ef0:	e0bff517 	ldw	r2,-44(fp)
   81ef4:	00800f0e 	bge	zero,r2,81f34 <vid_draw_sloped_line+0x144>
        horiz_start+=horiz_incr;
   81ef8:	e0bff317 	ldw	r2,-52(fp)
   81efc:	1007883a 	mov	r3,r2
   81f00:	e0bffb0b 	ldhu	r2,-20(fp)
   81f04:	1885883a 	add	r2,r3,r2
   81f08:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
   81f0c:	e0bff417 	ldw	r2,-48(fp)
   81f10:	1007883a 	mov	r3,r2
   81f14:	e0bffc0b 	ldhu	r2,-16(fp)
   81f18:	1885883a 	add	r2,r3,r2
   81f1c:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
   81f20:	e0fff517 	ldw	r3,-44(fp)
   81f24:	e0bff817 	ldw	r2,-32(fp)
   81f28:	1885883a 	add	r2,r3,r2
   81f2c:	e0bff515 	stw	r2,-44(fp)
   81f30:	00000906 	br	81f58 <vid_draw_sloped_line+0x168>
      } else {
        horiz_start+=horiz_incr;
   81f34:	e0bff317 	ldw	r2,-52(fp)
   81f38:	1007883a 	mov	r3,r2
   81f3c:	e0bffb0b 	ldhu	r2,-20(fp)
   81f40:	1885883a 	add	r2,r3,r2
   81f44:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
   81f48:	e0fff517 	ldw	r3,-44(fp)
   81f4c:	e0bff717 	ldw	r2,-36(fp)
   81f50:	1885883a 	add	r2,r3,r2
   81f54:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
   81f58:	e0bff117 	ldw	r2,-60(fp)
   81f5c:	10bfffc4 	addi	r2,r2,-1
   81f60:	e0bff115 	stw	r2,-60(fp)
   81f64:	e0bff117 	ldw	r2,-60(fp)
   81f68:	103fda0e 	bge	r2,zero,81ed4 <__alt_data_end+0xfffc9c64>
   81f6c:	00003306 	br	8203c <vid_draw_sloped_line+0x24c>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
   81f70:	e0bff117 	ldw	r2,-60(fp)
   81f74:	1085883a 	add	r2,r2,r2
   81f78:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
   81f7c:	e0bff217 	ldw	r2,-56(fp)
   81f80:	1085883a 	add	r2,r2,r2
   81f84:	e0fff917 	ldw	r3,-28(fp)
   81f88:	1885c83a 	sub	r2,r3,r2
   81f8c:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
   81f90:	e0fff917 	ldw	r3,-28(fp)
   81f94:	e0bff217 	ldw	r2,-56(fp)
   81f98:	1885c83a 	sub	r2,r3,r2
   81f9c:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
   81fa0:	00002406 	br	82034 <vid_draw_sloped_line+0x244>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
   81fa4:	e13ffb0b 	ldhu	r4,-20(fp)
   81fa8:	e0fffc0b 	ldhu	r3,-16(fp)
   81fac:	e0800317 	ldw	r2,12(fp)
   81fb0:	180b883a 	mov	r5,r3
   81fb4:	100d883a 	mov	r6,r2
   81fb8:	e1c00417 	ldw	r7,16(fp)
   81fbc:	0081a740 	call	81a74 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
   81fc0:	e0bff617 	ldw	r2,-40(fp)
   81fc4:	00800f0e 	bge	zero,r2,82004 <vid_draw_sloped_line+0x214>
        horiz_start+=horiz_incr;
   81fc8:	e0bff317 	ldw	r2,-52(fp)
   81fcc:	1007883a 	mov	r3,r2
   81fd0:	e0bffb0b 	ldhu	r2,-20(fp)
   81fd4:	1885883a 	add	r2,r3,r2
   81fd8:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
   81fdc:	e0bff417 	ldw	r2,-48(fp)
   81fe0:	1007883a 	mov	r3,r2
   81fe4:	e0bffc0b 	ldhu	r2,-16(fp)
   81fe8:	1885883a 	add	r2,r3,r2
   81fec:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
   81ff0:	e0fff617 	ldw	r3,-40(fp)
   81ff4:	e0bffa17 	ldw	r2,-24(fp)
   81ff8:	1885883a 	add	r2,r3,r2
   81ffc:	e0bff615 	stw	r2,-40(fp)
   82000:	00000906 	br	82028 <vid_draw_sloped_line+0x238>
      } else {
        vert_start+=vert_incr;
   82004:	e0bff417 	ldw	r2,-48(fp)
   82008:	1007883a 	mov	r3,r2
   8200c:	e0bffc0b 	ldhu	r2,-16(fp)
   82010:	1885883a 	add	r2,r3,r2
   82014:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
   82018:	e0fff617 	ldw	r3,-40(fp)
   8201c:	e0bff917 	ldw	r2,-28(fp)
   82020:	1885883a 	add	r2,r3,r2
   82024:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
   82028:	e0bff217 	ldw	r2,-56(fp)
   8202c:	10bfffc4 	addi	r2,r2,-1
   82030:	e0bff215 	stw	r2,-56(fp)
   82034:	e0bff217 	ldw	r2,-56(fp)
   82038:	103fda0e 	bge	r2,zero,81fa4 <__alt_data_end+0xfffc9d34>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
   8203c:	e037883a 	mov	sp,fp
   82040:	dfc00117 	ldw	ra,4(sp)
   82044:	df000017 	ldw	fp,0(sp)
   82048:	dec00204 	addi	sp,sp,8
   8204c:	f800283a 	ret

00082050 <vid_draw_circle>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
   82050:	defff104 	addi	sp,sp,-60
   82054:	dfc00e15 	stw	ra,56(sp)
   82058:	df000d15 	stw	fp,52(sp)
   8205c:	df000d04 	addi	fp,sp,52
   82060:	e13ffb15 	stw	r4,-20(fp)
   82064:	e17ffc15 	stw	r5,-16(fp)
   82068:	e1bffd15 	stw	r6,-12(fp)
   8206c:	e1fffe15 	stw	r7,-8(fp)
   82070:	e0800217 	ldw	r2,8(fp)
   82074:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
   82078:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
   8207c:	e0bffd17 	ldw	r2,-12(fp)
   82080:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
   82084:	e0bffd17 	ldw	r2,-12(fp)
   82088:	10bfff24 	muli	r2,r2,-4
   8208c:	10800144 	addi	r2,r2,5
   82090:	1000010e 	bge	r2,zero,82098 <vid_draw_circle+0x48>
   82094:	108000c4 	addi	r2,r2,3
   82098:	1005d0ba 	srai	r2,r2,2
   8209c:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
   820a0:	e0bfff07 	ldb	r2,-4(fp)
   820a4:	d8000015 	stw	zero,0(sp)
   820a8:	d8000115 	stw	zero,4(sp)
   820ac:	e0fffe17 	ldw	r3,-8(fp)
   820b0:	d8c00215 	stw	r3,8(sp)
   820b4:	d8800315 	stw	r2,12(sp)
   820b8:	e0800317 	ldw	r2,12(fp)
   820bc:	d8800415 	stw	r2,16(sp)
   820c0:	e13ffb17 	ldw	r4,-20(fp)
   820c4:	e17ffc17 	ldw	r5,-16(fp)
   820c8:	e1bff817 	ldw	r6,-32(fp)
   820cc:	e1fff917 	ldw	r7,-28(fp)
   820d0:	00825440 	call	82544 <vid_round_corner_points>

  // Now start moving out from those points until the lines meet
  while (x < y) {
   820d4:	00002406 	br	82168 <vid_draw_circle+0x118>
    x++;
   820d8:	e0bff817 	ldw	r2,-32(fp)
   820dc:	10800044 	addi	r2,r2,1
   820e0:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
   820e4:	e0bffa17 	ldw	r2,-24(fp)
   820e8:	1000070e 	bge	r2,zero,82108 <vid_draw_circle+0xb8>
      p += 2*x+1;
   820ec:	e0bff817 	ldw	r2,-32(fp)
   820f0:	1085883a 	add	r2,r2,r2
   820f4:	10800044 	addi	r2,r2,1
   820f8:	e0fffa17 	ldw	r3,-24(fp)
   820fc:	1885883a 	add	r2,r3,r2
   82100:	e0bffa15 	stw	r2,-24(fp)
   82104:	00000b06 	br	82134 <vid_draw_circle+0xe4>
    } else {
      y--;
   82108:	e0bff917 	ldw	r2,-28(fp)
   8210c:	10bfffc4 	addi	r2,r2,-1
   82110:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
   82114:	e0fff817 	ldw	r3,-32(fp)
   82118:	e0bff917 	ldw	r2,-28(fp)
   8211c:	1885c83a 	sub	r2,r3,r2
   82120:	1085883a 	add	r2,r2,r2
   82124:	10800044 	addi	r2,r2,1
   82128:	e0fffa17 	ldw	r3,-24(fp)
   8212c:	1885883a 	add	r2,r3,r2
   82130:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
   82134:	e0bfff07 	ldb	r2,-4(fp)
   82138:	d8000015 	stw	zero,0(sp)
   8213c:	d8000115 	stw	zero,4(sp)
   82140:	e0fffe17 	ldw	r3,-8(fp)
   82144:	d8c00215 	stw	r3,8(sp)
   82148:	d8800315 	stw	r2,12(sp)
   8214c:	e0800317 	ldw	r2,12(fp)
   82150:	d8800415 	stw	r2,16(sp)
   82154:	e13ffb17 	ldw	r4,-20(fp)
   82158:	e17ffc17 	ldw	r5,-16(fp)
   8215c:	e1bff817 	ldw	r6,-32(fp)
   82160:	e1fff917 	ldw	r7,-28(fp)
   82164:	00825440 	call	82544 <vid_round_corner_points>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
   82168:	e0fff817 	ldw	r3,-32(fp)
   8216c:	e0bff917 	ldw	r2,-28(fp)
   82170:	18bfd916 	blt	r3,r2,820d8 <__alt_data_end+0xfffc9e68>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
   82174:	0005883a 	mov	r2,zero
}
   82178:	e037883a 	mov	sp,fp
   8217c:	dfc00117 	ldw	ra,4(sp)
   82180:	df000017 	ldw	fp,0(sp)
   82184:	dec00204 	addi	sp,sp,8
   82188:	f800283a 	ret

0008218c <vid_draw_round_corner_box>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
   8218c:	deffec04 	addi	sp,sp,-80
   82190:	dfc01315 	stw	ra,76(sp)
   82194:	df001215 	stw	fp,72(sp)
   82198:	df001204 	addi	fp,sp,72
   8219c:	e13ffc15 	stw	r4,-16(fp)
   821a0:	e17ffd15 	stw	r5,-12(fp)
   821a4:	e1bffe15 	stw	r6,-8(fp)
   821a8:	e1ffff15 	stw	r7,-4(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
   821ac:	e0bffc17 	ldw	r2,-16(fp)
   821b0:	e0fffe17 	ldw	r3,-8(fp)
   821b4:	1880060e 	bge	r3,r2,821d0 <vid_draw_round_corner_box+0x44>
  {
    temp = horiz_end;
   821b8:	e0bffe17 	ldw	r2,-8(fp)
   821bc:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
   821c0:	e0bffc17 	ldw	r2,-16(fp)
   821c4:	e0bffe15 	stw	r2,-8(fp)
    horiz_start = temp;
   821c8:	e0bff617 	ldw	r2,-40(fp)
   821cc:	e0bffc15 	stw	r2,-16(fp)
  }
  
  if( vert_start > vert_end )
   821d0:	e0bffd17 	ldw	r2,-12(fp)
   821d4:	e0ffff17 	ldw	r3,-4(fp)
   821d8:	1880060e 	bge	r3,r2,821f4 <vid_draw_round_corner_box+0x68>
  {
    temp = vert_end;
   821dc:	e0bfff17 	ldw	r2,-4(fp)
   821e0:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
   821e4:	e0bffd17 	ldw	r2,-12(fp)
   821e8:	e0bfff15 	stw	r2,-4(fp)
    vert_start = temp;
   821ec:	e0bff617 	ldw	r2,-40(fp)
   821f0:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
   821f4:	e0fffe17 	ldw	r3,-8(fp)
   821f8:	e0bffc17 	ldw	r2,-16(fp)
   821fc:	1885c83a 	sub	r2,r3,r2
   82200:	e0bff715 	stw	r2,-36(fp)
  height = vert_end - vert_start;
   82204:	e0ffff17 	ldw	r3,-4(fp)
   82208:	e0bffd17 	ldw	r2,-12(fp)
   8220c:	1885c83a 	sub	r2,r3,r2
   82210:	e0bff815 	stw	r2,-32(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
   82214:	e0800217 	ldw	r2,8(fp)
   82218:	e0fff717 	ldw	r3,-36(fp)
   8221c:	1806d07a 	srli	r3,r3,1
   82220:	1880032e 	bgeu	r3,r2,82230 <vid_draw_round_corner_box+0xa4>
    radius = width / 2;
   82224:	e0bff717 	ldw	r2,-36(fp)
   82228:	1004d07a 	srli	r2,r2,1
   8222c:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
   82230:	e0800217 	ldw	r2,8(fp)
   82234:	e0fff817 	ldw	r3,-32(fp)
   82238:	1806d07a 	srli	r3,r3,1
   8223c:	1880032e 	bgeu	r3,r2,8224c <vid_draw_round_corner_box+0xc0>
    radius = height / 2;
   82240:	e0bff817 	ldw	r2,-32(fp)
   82244:	1004d07a 	srli	r2,r2,1
   82248:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
   8224c:	e0800217 	ldw	r2,8(fp)
   82250:	1085883a 	add	r2,r2,r2
   82254:	e0bff915 	stw	r2,-28(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
   82258:	e0bff917 	ldw	r2,-28(fp)
   8225c:	e0fff717 	ldw	r3,-36(fp)
   82260:	1885c83a 	sub	r2,r3,r2
   82264:	e0bffa15 	stw	r2,-24(fp)
  straight_height = height - diameter;
   82268:	e0bff917 	ldw	r2,-28(fp)
   8226c:	e0fff817 	ldw	r3,-32(fp)
   82270:	1885c83a 	sub	r2,r3,r2
   82274:	e0bffb15 	stw	r2,-20(fp)

  x = 0;
   82278:	e03ff315 	stw	zero,-52(fp)
  y = radius;
   8227c:	e0800217 	ldw	r2,8(fp)
   82280:	e0bff415 	stw	r2,-48(fp)
  p = (5 - radius*4)/4;
   82284:	e0800217 	ldw	r2,8(fp)
   82288:	10bfff24 	muli	r2,r2,-4
   8228c:	10800144 	addi	r2,r2,5
   82290:	1000010e 	bge	r2,zero,82298 <vid_draw_round_corner_box+0x10c>
   82294:	108000c4 	addi	r2,r2,3
   82298:	1005d0ba 	srai	r2,r2,2
   8229c:	e0bff515 	stw	r2,-44(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
   822a0:	e0fffc17 	ldw	r3,-16(fp)
   822a4:	e0800217 	ldw	r2,8(fp)
   822a8:	1889883a 	add	r4,r3,r2
   822ac:	e0fffd17 	ldw	r3,-12(fp)
   822b0:	e0800217 	ldw	r2,8(fp)
   822b4:	188b883a 	add	r5,r3,r2
   822b8:	e0fff317 	ldw	r3,-52(fp)
   822bc:	e0bff417 	ldw	r2,-48(fp)
   822c0:	e23ffa17 	ldw	r8,-24(fp)
   822c4:	e1fffb17 	ldw	r7,-20(fp)
   822c8:	e1800417 	ldw	r6,16(fp)
   822cc:	31803fcc 	andi	r6,r6,255
   822d0:	3180201c 	xori	r6,r6,128
   822d4:	31bfe004 	addi	r6,r6,-128
   822d8:	da000015 	stw	r8,0(sp)
   822dc:	d9c00115 	stw	r7,4(sp)
   822e0:	e1c00317 	ldw	r7,12(fp)
   822e4:	d9c00215 	stw	r7,8(sp)
   822e8:	d9800315 	stw	r6,12(sp)
   822ec:	e1800517 	ldw	r6,20(fp)
   822f0:	d9800415 	stw	r6,16(sp)
   822f4:	180d883a 	mov	r6,r3
   822f8:	100f883a 	mov	r7,r2
   822fc:	00825440 	call	82544 <vid_round_corner_points>
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
   82300:	00003106 	br	823c8 <vid_draw_round_corner_box+0x23c>
    x++;
   82304:	e0bff317 	ldw	r2,-52(fp)
   82308:	10800044 	addi	r2,r2,1
   8230c:	e0bff315 	stw	r2,-52(fp)
    if (p < 0) {
   82310:	e0bff517 	ldw	r2,-44(fp)
   82314:	1000080e 	bge	r2,zero,82338 <vid_draw_round_corner_box+0x1ac>
      p += 2*x+1;
   82318:	e0bff317 	ldw	r2,-52(fp)
   8231c:	1085883a 	add	r2,r2,r2
   82320:	1007883a 	mov	r3,r2
   82324:	e0bff517 	ldw	r2,-44(fp)
   82328:	1885883a 	add	r2,r3,r2
   8232c:	10800044 	addi	r2,r2,1
   82330:	e0bff515 	stw	r2,-44(fp)
   82334:	00000c06 	br	82368 <vid_draw_round_corner_box+0x1dc>
    } else {
      y--;
   82338:	e0bff417 	ldw	r2,-48(fp)
   8233c:	10bfffc4 	addi	r2,r2,-1
   82340:	e0bff415 	stw	r2,-48(fp)
      p += 2*(x-y)+1;
   82344:	e0fff317 	ldw	r3,-52(fp)
   82348:	e0bff417 	ldw	r2,-48(fp)
   8234c:	1885c83a 	sub	r2,r3,r2
   82350:	1085883a 	add	r2,r2,r2
   82354:	1007883a 	mov	r3,r2
   82358:	e0bff517 	ldw	r2,-44(fp)
   8235c:	1885883a 	add	r2,r3,r2
   82360:	10800044 	addi	r2,r2,1
   82364:	e0bff515 	stw	r2,-44(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
   82368:	e0fffc17 	ldw	r3,-16(fp)
   8236c:	e0800217 	ldw	r2,8(fp)
   82370:	1889883a 	add	r4,r3,r2
   82374:	e0fffd17 	ldw	r3,-12(fp)
   82378:	e0800217 	ldw	r2,8(fp)
   8237c:	188b883a 	add	r5,r3,r2
   82380:	e0fff317 	ldw	r3,-52(fp)
   82384:	e0bff417 	ldw	r2,-48(fp)
   82388:	e23ffa17 	ldw	r8,-24(fp)
   8238c:	e1fffb17 	ldw	r7,-20(fp)
   82390:	e1800417 	ldw	r6,16(fp)
   82394:	31803fcc 	andi	r6,r6,255
   82398:	3180201c 	xori	r6,r6,128
   8239c:	31bfe004 	addi	r6,r6,-128
   823a0:	da000015 	stw	r8,0(sp)
   823a4:	d9c00115 	stw	r7,4(sp)
   823a8:	e1c00317 	ldw	r7,12(fp)
   823ac:	d9c00215 	stw	r7,8(sp)
   823b0:	d9800315 	stw	r6,12(sp)
   823b4:	e1800517 	ldw	r6,20(fp)
   823b8:	d9800415 	stw	r6,16(sp)
   823bc:	180d883a 	mov	r6,r3
   823c0:	100f883a 	mov	r7,r2
   823c4:	00825440 	call	82544 <vid_round_corner_points>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
   823c8:	e0fff317 	ldw	r3,-52(fp)
   823cc:	e0bff417 	ldw	r2,-48(fp)
   823d0:	18bfcc36 	bltu	r3,r2,82304 <__alt_data_end+0xfffca094>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
   823d4:	e0800417 	ldw	r2,16(fp)
   823d8:	10001026 	beq	r2,zero,8241c <vid_draw_round_corner_box+0x290>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
   823dc:	e0fffd17 	ldw	r3,-12(fp)
   823e0:	e0800217 	ldw	r2,8(fp)
   823e4:	1887883a 	add	r3,r3,r2
   823e8:	e13fff17 	ldw	r4,-4(fp)
   823ec:	e0800217 	ldw	r2,8(fp)
   823f0:	2085c83a 	sub	r2,r4,r2
   823f4:	e1000317 	ldw	r4,12(fp)
   823f8:	d9000015 	stw	r4,0(sp)
   823fc:	e1000517 	ldw	r4,20(fp)
   82400:	d9000115 	stw	r4,4(sp)
   82404:	e13ffc17 	ldw	r4,-16(fp)
   82408:	180b883a 	mov	r5,r3
   8240c:	e1bffe17 	ldw	r6,-8(fp)
   82410:	100f883a 	mov	r7,r2
   82414:	0081b4c0 	call	81b4c <vid_paint_block>
   82418:	00004406 	br	8252c <vid_draw_round_corner_box+0x3a0>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
   8241c:	e0fffd17 	ldw	r3,-12(fp)
   82420:	e0800217 	ldw	r2,8(fp)
   82424:	1887883a 	add	r3,r3,r2
   82428:	e13fff17 	ldw	r4,-4(fp)
   8242c:	e0800217 	ldw	r2,8(fp)
   82430:	2085c83a 	sub	r2,r4,r2
   82434:	01000044 	movi	r4,1
   82438:	d9000015 	stw	r4,0(sp)
   8243c:	e1000317 	ldw	r4,12(fp)
   82440:	d9000115 	stw	r4,4(sp)
   82444:	e1000517 	ldw	r4,20(fp)
   82448:	d9000215 	stw	r4,8(sp)
   8244c:	e13ffc17 	ldw	r4,-16(fp)
   82450:	180b883a 	mov	r5,r3
   82454:	e1bffc17 	ldw	r6,-16(fp)
   82458:	100f883a 	mov	r7,r2
   8245c:	00810300 	call	81030 <vid_draw_line>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
   82460:	e0fffd17 	ldw	r3,-12(fp)
   82464:	e0800217 	ldw	r2,8(fp)
   82468:	1887883a 	add	r3,r3,r2
   8246c:	e13fff17 	ldw	r4,-4(fp)
   82470:	e0800217 	ldw	r2,8(fp)
   82474:	2085c83a 	sub	r2,r4,r2
   82478:	01000044 	movi	r4,1
   8247c:	d9000015 	stw	r4,0(sp)
   82480:	e1000317 	ldw	r4,12(fp)
   82484:	d9000115 	stw	r4,4(sp)
   82488:	e1000517 	ldw	r4,20(fp)
   8248c:	d9000215 	stw	r4,8(sp)
   82490:	e13ffe17 	ldw	r4,-8(fp)
   82494:	180b883a 	mov	r5,r3
   82498:	e1bffe17 	ldw	r6,-8(fp)
   8249c:	100f883a 	mov	r7,r2
   824a0:	00810300 	call	81030 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
   824a4:	e0fffc17 	ldw	r3,-16(fp)
   824a8:	e0800217 	ldw	r2,8(fp)
   824ac:	1887883a 	add	r3,r3,r2
   824b0:	e13ffe17 	ldw	r4,-8(fp)
   824b4:	e0800217 	ldw	r2,8(fp)
   824b8:	2085c83a 	sub	r2,r4,r2
   824bc:	01000044 	movi	r4,1
   824c0:	d9000015 	stw	r4,0(sp)
   824c4:	e1000317 	ldw	r4,12(fp)
   824c8:	d9000115 	stw	r4,4(sp)
   824cc:	e1000517 	ldw	r4,20(fp)
   824d0:	d9000215 	stw	r4,8(sp)
   824d4:	1809883a 	mov	r4,r3
   824d8:	e17ffd17 	ldw	r5,-12(fp)
   824dc:	100d883a 	mov	r6,r2
   824e0:	e1fffd17 	ldw	r7,-12(fp)
   824e4:	00810300 	call	81030 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
   824e8:	e0fffc17 	ldw	r3,-16(fp)
   824ec:	e0800217 	ldw	r2,8(fp)
   824f0:	1887883a 	add	r3,r3,r2
   824f4:	e13ffe17 	ldw	r4,-8(fp)
   824f8:	e0800217 	ldw	r2,8(fp)
   824fc:	2085c83a 	sub	r2,r4,r2
   82500:	01000044 	movi	r4,1
   82504:	d9000015 	stw	r4,0(sp)
   82508:	e1000317 	ldw	r4,12(fp)
   8250c:	d9000115 	stw	r4,4(sp)
   82510:	e1000517 	ldw	r4,20(fp)
   82514:	d9000215 	stw	r4,8(sp)
   82518:	1809883a 	mov	r4,r3
   8251c:	e17fff17 	ldw	r5,-4(fp)
   82520:	100d883a 	mov	r6,r2
   82524:	e1ffff17 	ldw	r7,-4(fp)
   82528:	00810300 	call	81030 <vid_draw_line>
  }

  return (0);
   8252c:	0005883a 	mov	r2,zero
}
   82530:	e037883a 	mov	sp,fp
   82534:	dfc00117 	ldw	ra,4(sp)
   82538:	df000017 	ldw	fp,0(sp)
   8253c:	dec00204 	addi	sp,sp,8
   82540:	f800283a 	ret

00082544 <vid_round_corner_points>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
   82544:	defff604 	addi	sp,sp,-40
   82548:	dfc00915 	stw	ra,36(sp)
   8254c:	df000815 	stw	fp,32(sp)
   82550:	df000804 	addi	fp,sp,32
   82554:	e13ffb15 	stw	r4,-20(fp)
   82558:	e17ffc15 	stw	r5,-16(fp)
   8255c:	e1bffd15 	stw	r6,-12(fp)
   82560:	e1fffe15 	stw	r7,-8(fp)
   82564:	e0800517 	ldw	r2,20(fp)
   82568:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
   8256c:	e0bffd17 	ldw	r2,-12(fp)
   82570:	1000861e 	bne	r2,zero,8278c <vid_round_corner_points+0x248>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
   82574:	e0fffc17 	ldw	r3,-16(fp)
   82578:	e0bffe17 	ldw	r2,-8(fp)
   8257c:	1887883a 	add	r3,r3,r2
   82580:	e0800317 	ldw	r2,12(fp)
   82584:	1887883a 	add	r3,r3,r2
   82588:	e0800417 	ldw	r2,16(fp)
   8258c:	e13ffb17 	ldw	r4,-20(fp)
   82590:	180b883a 	mov	r5,r3
   82594:	100d883a 	mov	r6,r2
   82598:	e1c00617 	ldw	r7,24(fp)
   8259c:	0081a740 	call	81a74 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
   825a0:	e0fffb17 	ldw	r3,-20(fp)
   825a4:	e0800217 	ldw	r2,8(fp)
   825a8:	1889883a 	add	r4,r3,r2
   825ac:	e0fffc17 	ldw	r3,-16(fp)
   825b0:	e0bffe17 	ldw	r2,-8(fp)
   825b4:	1887883a 	add	r3,r3,r2
   825b8:	e0800317 	ldw	r2,12(fp)
   825bc:	1887883a 	add	r3,r3,r2
   825c0:	e0800417 	ldw	r2,16(fp)
   825c4:	180b883a 	mov	r5,r3
   825c8:	100d883a 	mov	r6,r2
   825cc:	e1c00617 	ldw	r7,24(fp)
   825d0:	0081a740 	call	81a74 <vid_set_pixel>
        // top
        vid_set_pixel(cx, cy - y, color, display);
   825d4:	e0fffc17 	ldw	r3,-16(fp)
   825d8:	e0bffe17 	ldw	r2,-8(fp)
   825dc:	1887c83a 	sub	r3,r3,r2
   825e0:	e0800417 	ldw	r2,16(fp)
   825e4:	e13ffb17 	ldw	r4,-20(fp)
   825e8:	180b883a 	mov	r5,r3
   825ec:	100d883a 	mov	r6,r2
   825f0:	e1c00617 	ldw	r7,24(fp)
   825f4:	0081a740 	call	81a74 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
   825f8:	e0fffb17 	ldw	r3,-20(fp)
   825fc:	e0800217 	ldw	r2,8(fp)
   82600:	1889883a 	add	r4,r3,r2
   82604:	e0fffc17 	ldw	r3,-16(fp)
   82608:	e0bffe17 	ldw	r2,-8(fp)
   8260c:	1887c83a 	sub	r3,r3,r2
   82610:	e0800417 	ldw	r2,16(fp)
   82614:	180b883a 	mov	r5,r3
   82618:	100d883a 	mov	r6,r2
   8261c:	e1c00617 	ldw	r7,24(fp)
   82620:	0081a740 	call	81a74 <vid_set_pixel>

        if(fill) {
   82624:	e0bfff07 	ldb	r2,-4(fp)
   82628:	10002b26 	beq	r2,zero,826d8 <vid_round_corner_points+0x194>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
   8262c:	e0fffb17 	ldw	r3,-20(fp)
   82630:	e0bffe17 	ldw	r2,-8(fp)
   82634:	1887c83a 	sub	r3,r3,r2
   82638:	e13ffb17 	ldw	r4,-20(fp)
   8263c:	e0bffe17 	ldw	r2,-8(fp)
   82640:	2089883a 	add	r4,r4,r2
   82644:	e0800217 	ldw	r2,8(fp)
   82648:	2085883a 	add	r2,r4,r2
   8264c:	01000044 	movi	r4,1
   82650:	d9000015 	stw	r4,0(sp)
   82654:	e1000417 	ldw	r4,16(fp)
   82658:	d9000115 	stw	r4,4(sp)
   8265c:	e1000617 	ldw	r4,24(fp)
   82660:	d9000215 	stw	r4,8(sp)
   82664:	1809883a 	mov	r4,r3
   82668:	e17ffc17 	ldw	r5,-16(fp)
   8266c:	100d883a 	mov	r6,r2
   82670:	e1fffc17 	ldw	r7,-16(fp)
   82674:	00810300 	call	81030 <vid_draw_line>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
   82678:	e0fffb17 	ldw	r3,-20(fp)
   8267c:	e0bffe17 	ldw	r2,-8(fp)
   82680:	1889c83a 	sub	r4,r3,r2
   82684:	e0fffc17 	ldw	r3,-16(fp)
   82688:	e0800317 	ldw	r2,12(fp)
   8268c:	188b883a 	add	r5,r3,r2
   82690:	e0fffb17 	ldw	r3,-20(fp)
   82694:	e0bffe17 	ldw	r2,-8(fp)
   82698:	1887883a 	add	r3,r3,r2
   8269c:	e0800217 	ldw	r2,8(fp)
   826a0:	1887883a 	add	r3,r3,r2
   826a4:	e1bffc17 	ldw	r6,-16(fp)
   826a8:	e0800317 	ldw	r2,12(fp)
   826ac:	3085883a 	add	r2,r6,r2
   826b0:	01800044 	movi	r6,1
   826b4:	d9800015 	stw	r6,0(sp)
   826b8:	e1800417 	ldw	r6,16(fp)
   826bc:	d9800115 	stw	r6,4(sp)
   826c0:	e1800617 	ldw	r6,24(fp)
   826c4:	d9800215 	stw	r6,8(sp)
   826c8:	180d883a 	mov	r6,r3
   826cc:	100f883a 	mov	r7,r2
   826d0:	00810300 	call	81030 <vid_draw_line>
   826d4:	00016c06 	br	82c88 <vid_round_corner_points+0x744>
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
   826d8:	e0fffb17 	ldw	r3,-20(fp)
   826dc:	e0bffe17 	ldw	r2,-8(fp)
   826e0:	1887883a 	add	r3,r3,r2
   826e4:	e0800217 	ldw	r2,8(fp)
   826e8:	1887883a 	add	r3,r3,r2
   826ec:	e0800417 	ldw	r2,16(fp)
   826f0:	1809883a 	mov	r4,r3
   826f4:	e17ffc17 	ldw	r5,-16(fp)
   826f8:	100d883a 	mov	r6,r2
   826fc:	e1c00617 	ldw	r7,24(fp)
   82700:	0081a740 	call	81a74 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
   82704:	e0fffb17 	ldw	r3,-20(fp)
   82708:	e0bffe17 	ldw	r2,-8(fp)
   8270c:	1887883a 	add	r3,r3,r2
   82710:	e0800217 	ldw	r2,8(fp)
   82714:	1889883a 	add	r4,r3,r2
   82718:	e0fffc17 	ldw	r3,-16(fp)
   8271c:	e0800317 	ldw	r2,12(fp)
   82720:	1887883a 	add	r3,r3,r2
   82724:	e0800417 	ldw	r2,16(fp)
   82728:	180b883a 	mov	r5,r3
   8272c:	100d883a 	mov	r6,r2
   82730:	e1c00617 	ldw	r7,24(fp)
   82734:	0081a740 	call	81a74 <vid_set_pixel>
          //left
          vid_set_pixel(cx - y, cy, color, display);
   82738:	e0fffb17 	ldw	r3,-20(fp)
   8273c:	e0bffe17 	ldw	r2,-8(fp)
   82740:	1887c83a 	sub	r3,r3,r2
   82744:	e0800417 	ldw	r2,16(fp)
   82748:	1809883a 	mov	r4,r3
   8274c:	e17ffc17 	ldw	r5,-16(fp)
   82750:	100d883a 	mov	r6,r2
   82754:	e1c00617 	ldw	r7,24(fp)
   82758:	0081a740 	call	81a74 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
   8275c:	e0fffb17 	ldw	r3,-20(fp)
   82760:	e0bffe17 	ldw	r2,-8(fp)
   82764:	1889c83a 	sub	r4,r3,r2
   82768:	e0fffc17 	ldw	r3,-16(fp)
   8276c:	e0800317 	ldw	r2,12(fp)
   82770:	1887883a 	add	r3,r3,r2
   82774:	e0800417 	ldw	r2,16(fp)
   82778:	180b883a 	mov	r5,r3
   8277c:	100d883a 	mov	r6,r2
   82780:	e1c00617 	ldw	r7,24(fp)
   82784:	0081a740 	call	81a74 <vid_set_pixel>
   82788:	00013f06 	br	82c88 <vid_round_corner_points+0x744>
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
   8278c:	e0fffd17 	ldw	r3,-12(fp)
   82790:	e0bffe17 	ldw	r2,-8(fp)
   82794:	18806a1e 	bne	r3,r2,82940 <vid_round_corner_points+0x3fc>
      if(fill) {
   82798:	e0bfff07 	ldb	r2,-4(fp)
   8279c:	10003326 	beq	r2,zero,8286c <vid_round_corner_points+0x328>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
   827a0:	e0fffb17 	ldw	r3,-20(fp)
   827a4:	e0bffd17 	ldw	r2,-12(fp)
   827a8:	1889c83a 	sub	r4,r3,r2
   827ac:	e0fffc17 	ldw	r3,-16(fp)
   827b0:	e0bffe17 	ldw	r2,-8(fp)
   827b4:	1887883a 	add	r3,r3,r2
   827b8:	e0800317 	ldw	r2,12(fp)
   827bc:	188b883a 	add	r5,r3,r2
   827c0:	e0fffb17 	ldw	r3,-20(fp)
   827c4:	e0bffd17 	ldw	r2,-12(fp)
   827c8:	1887883a 	add	r3,r3,r2
   827cc:	e0800217 	ldw	r2,8(fp)
   827d0:	1887883a 	add	r3,r3,r2
   827d4:	e1bffc17 	ldw	r6,-16(fp)
   827d8:	e0bffe17 	ldw	r2,-8(fp)
   827dc:	308d883a 	add	r6,r6,r2
   827e0:	e0800317 	ldw	r2,12(fp)
   827e4:	3085883a 	add	r2,r6,r2
   827e8:	01800044 	movi	r6,1
   827ec:	d9800015 	stw	r6,0(sp)
   827f0:	e1800417 	ldw	r6,16(fp)
   827f4:	d9800115 	stw	r6,4(sp)
   827f8:	e1800617 	ldw	r6,24(fp)
   827fc:	d9800215 	stw	r6,8(sp)
   82800:	180d883a 	mov	r6,r3
   82804:	100f883a 	mov	r7,r2
   82808:	00810300 	call	81030 <vid_draw_line>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
   8280c:	e0fffb17 	ldw	r3,-20(fp)
   82810:	e0bffd17 	ldw	r2,-12(fp)
   82814:	1889c83a 	sub	r4,r3,r2
   82818:	e0fffc17 	ldw	r3,-16(fp)
   8281c:	e0bffe17 	ldw	r2,-8(fp)
   82820:	188bc83a 	sub	r5,r3,r2
   82824:	e0fffb17 	ldw	r3,-20(fp)
   82828:	e0bffd17 	ldw	r2,-12(fp)
   8282c:	1887883a 	add	r3,r3,r2
   82830:	e0800217 	ldw	r2,8(fp)
   82834:	1887883a 	add	r3,r3,r2
   82838:	e1bffc17 	ldw	r6,-16(fp)
   8283c:	e0bffe17 	ldw	r2,-8(fp)
   82840:	3085c83a 	sub	r2,r6,r2
   82844:	01800044 	movi	r6,1
   82848:	d9800015 	stw	r6,0(sp)
   8284c:	e1800417 	ldw	r6,16(fp)
   82850:	d9800115 	stw	r6,4(sp)
   82854:	e1800617 	ldw	r6,24(fp)
   82858:	d9800215 	stw	r6,8(sp)
   8285c:	180d883a 	mov	r6,r3
   82860:	100f883a 	mov	r7,r2
   82864:	00810300 	call	81030 <vid_draw_line>
   82868:	00010706 	br	82c88 <vid_round_corner_points+0x744>
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
   8286c:	e0fffb17 	ldw	r3,-20(fp)
   82870:	e0bffd17 	ldw	r2,-12(fp)
   82874:	1887883a 	add	r3,r3,r2
   82878:	e0800217 	ldw	r2,8(fp)
   8287c:	1889883a 	add	r4,r3,r2
   82880:	e0fffc17 	ldw	r3,-16(fp)
   82884:	e0bffe17 	ldw	r2,-8(fp)
   82888:	1887883a 	add	r3,r3,r2
   8288c:	e0800317 	ldw	r2,12(fp)
   82890:	1887883a 	add	r3,r3,r2
   82894:	e0800417 	ldw	r2,16(fp)
   82898:	180b883a 	mov	r5,r3
   8289c:	100d883a 	mov	r6,r2
   828a0:	e1c00617 	ldw	r7,24(fp)
   828a4:	0081a740 	call	81a74 <vid_set_pixel>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
   828a8:	e0fffb17 	ldw	r3,-20(fp)
   828ac:	e0bffd17 	ldw	r2,-12(fp)
   828b0:	1889c83a 	sub	r4,r3,r2
   828b4:	e0fffc17 	ldw	r3,-16(fp)
   828b8:	e0bffe17 	ldw	r2,-8(fp)
   828bc:	1887883a 	add	r3,r3,r2
   828c0:	e0800317 	ldw	r2,12(fp)
   828c4:	1887883a 	add	r3,r3,r2
   828c8:	e0800417 	ldw	r2,16(fp)
   828cc:	180b883a 	mov	r5,r3
   828d0:	100d883a 	mov	r6,r2
   828d4:	e1c00617 	ldw	r7,24(fp)
   828d8:	0081a740 	call	81a74 <vid_set_pixel>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
   828dc:	e0fffb17 	ldw	r3,-20(fp)
   828e0:	e0bffd17 	ldw	r2,-12(fp)
   828e4:	1887883a 	add	r3,r3,r2
   828e8:	e0800217 	ldw	r2,8(fp)
   828ec:	1889883a 	add	r4,r3,r2
   828f0:	e0fffc17 	ldw	r3,-16(fp)
   828f4:	e0bffe17 	ldw	r2,-8(fp)
   828f8:	1887c83a 	sub	r3,r3,r2
   828fc:	e0800417 	ldw	r2,16(fp)
   82900:	180b883a 	mov	r5,r3
   82904:	100d883a 	mov	r6,r2
   82908:	e1c00617 	ldw	r7,24(fp)
   8290c:	0081a740 	call	81a74 <vid_set_pixel>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
   82910:	e0fffb17 	ldw	r3,-20(fp)
   82914:	e0bffd17 	ldw	r2,-12(fp)
   82918:	1889c83a 	sub	r4,r3,r2
   8291c:	e0fffc17 	ldw	r3,-16(fp)
   82920:	e0bffe17 	ldw	r2,-8(fp)
   82924:	1887c83a 	sub	r3,r3,r2
   82928:	e0800417 	ldw	r2,16(fp)
   8292c:	180b883a 	mov	r5,r3
   82930:	100d883a 	mov	r6,r2
   82934:	e1c00617 	ldw	r7,24(fp)
   82938:	0081a740 	call	81a74 <vid_set_pixel>
   8293c:	0000d206 	br	82c88 <vid_round_corner_points+0x744>
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
   82940:	e0fffd17 	ldw	r3,-12(fp)
   82944:	e0bffe17 	ldw	r2,-8(fp)
   82948:	1880cf0e 	bge	r3,r2,82c88 <vid_round_corner_points+0x744>
        if(fill) {
   8294c:	e0bfff07 	ldb	r2,-4(fp)
   82950:	10006526 	beq	r2,zero,82ae8 <vid_round_corner_points+0x5a4>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
   82954:	e0fffb17 	ldw	r3,-20(fp)
   82958:	e0bffd17 	ldw	r2,-12(fp)
   8295c:	1889c83a 	sub	r4,r3,r2
   82960:	e0fffc17 	ldw	r3,-16(fp)
   82964:	e0bffe17 	ldw	r2,-8(fp)
   82968:	1887883a 	add	r3,r3,r2
   8296c:	e0800317 	ldw	r2,12(fp)
   82970:	188b883a 	add	r5,r3,r2
   82974:	e0fffb17 	ldw	r3,-20(fp)
   82978:	e0bffd17 	ldw	r2,-12(fp)
   8297c:	1887883a 	add	r3,r3,r2
   82980:	e0800217 	ldw	r2,8(fp)
   82984:	1887883a 	add	r3,r3,r2
   82988:	e1bffc17 	ldw	r6,-16(fp)
   8298c:	e0bffe17 	ldw	r2,-8(fp)
   82990:	308d883a 	add	r6,r6,r2
   82994:	e0800317 	ldw	r2,12(fp)
   82998:	3085883a 	add	r2,r6,r2
   8299c:	01800044 	movi	r6,1
   829a0:	d9800015 	stw	r6,0(sp)
   829a4:	e1800417 	ldw	r6,16(fp)
   829a8:	d9800115 	stw	r6,4(sp)
   829ac:	e1800617 	ldw	r6,24(fp)
   829b0:	d9800215 	stw	r6,8(sp)
   829b4:	180d883a 	mov	r6,r3
   829b8:	100f883a 	mov	r7,r2
   829bc:	00810300 	call	81030 <vid_draw_line>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
   829c0:	e0fffb17 	ldw	r3,-20(fp)
   829c4:	e0bffe17 	ldw	r2,-8(fp)
   829c8:	1889c83a 	sub	r4,r3,r2
   829cc:	e0fffc17 	ldw	r3,-16(fp)
   829d0:	e0bffd17 	ldw	r2,-12(fp)
   829d4:	1887883a 	add	r3,r3,r2
   829d8:	e0800317 	ldw	r2,12(fp)
   829dc:	188b883a 	add	r5,r3,r2
   829e0:	e0fffb17 	ldw	r3,-20(fp)
   829e4:	e0bffe17 	ldw	r2,-8(fp)
   829e8:	1887883a 	add	r3,r3,r2
   829ec:	e0800217 	ldw	r2,8(fp)
   829f0:	1887883a 	add	r3,r3,r2
   829f4:	e1bffc17 	ldw	r6,-16(fp)
   829f8:	e0bffd17 	ldw	r2,-12(fp)
   829fc:	308d883a 	add	r6,r6,r2
   82a00:	e0800317 	ldw	r2,12(fp)
   82a04:	3085883a 	add	r2,r6,r2
   82a08:	01800044 	movi	r6,1
   82a0c:	d9800015 	stw	r6,0(sp)
   82a10:	e1800417 	ldw	r6,16(fp)
   82a14:	d9800115 	stw	r6,4(sp)
   82a18:	e1800617 	ldw	r6,24(fp)
   82a1c:	d9800215 	stw	r6,8(sp)
   82a20:	180d883a 	mov	r6,r3
   82a24:	100f883a 	mov	r7,r2
   82a28:	00810300 	call	81030 <vid_draw_line>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
   82a2c:	e0fffb17 	ldw	r3,-20(fp)
   82a30:	e0bffe17 	ldw	r2,-8(fp)
   82a34:	1889c83a 	sub	r4,r3,r2
   82a38:	e0fffc17 	ldw	r3,-16(fp)
   82a3c:	e0bffd17 	ldw	r2,-12(fp)
   82a40:	188bc83a 	sub	r5,r3,r2
   82a44:	e0fffb17 	ldw	r3,-20(fp)
   82a48:	e0bffe17 	ldw	r2,-8(fp)
   82a4c:	1887883a 	add	r3,r3,r2
   82a50:	e0800217 	ldw	r2,8(fp)
   82a54:	1887883a 	add	r3,r3,r2
   82a58:	e1bffc17 	ldw	r6,-16(fp)
   82a5c:	e0bffd17 	ldw	r2,-12(fp)
   82a60:	3085c83a 	sub	r2,r6,r2
   82a64:	01800044 	movi	r6,1
   82a68:	d9800015 	stw	r6,0(sp)
   82a6c:	e1800417 	ldw	r6,16(fp)
   82a70:	d9800115 	stw	r6,4(sp)
   82a74:	e1800617 	ldw	r6,24(fp)
   82a78:	d9800215 	stw	r6,8(sp)
   82a7c:	180d883a 	mov	r6,r3
   82a80:	100f883a 	mov	r7,r2
   82a84:	00810300 	call	81030 <vid_draw_line>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
   82a88:	e0fffb17 	ldw	r3,-20(fp)
   82a8c:	e0bffd17 	ldw	r2,-12(fp)
   82a90:	1889c83a 	sub	r4,r3,r2
   82a94:	e0fffc17 	ldw	r3,-16(fp)
   82a98:	e0bffe17 	ldw	r2,-8(fp)
   82a9c:	188bc83a 	sub	r5,r3,r2
   82aa0:	e0fffb17 	ldw	r3,-20(fp)
   82aa4:	e0bffd17 	ldw	r2,-12(fp)
   82aa8:	1887883a 	add	r3,r3,r2
   82aac:	e0800217 	ldw	r2,8(fp)
   82ab0:	1887883a 	add	r3,r3,r2
   82ab4:	e1bffc17 	ldw	r6,-16(fp)
   82ab8:	e0bffe17 	ldw	r2,-8(fp)
   82abc:	3085c83a 	sub	r2,r6,r2
   82ac0:	01800044 	movi	r6,1
   82ac4:	d9800015 	stw	r6,0(sp)
   82ac8:	e1800417 	ldw	r6,16(fp)
   82acc:	d9800115 	stw	r6,4(sp)
   82ad0:	e1800617 	ldw	r6,24(fp)
   82ad4:	d9800215 	stw	r6,8(sp)
   82ad8:	180d883a 	mov	r6,r3
   82adc:	100f883a 	mov	r7,r2
   82ae0:	00810300 	call	81030 <vid_draw_line>
   82ae4:	00006806 	br	82c88 <vid_round_corner_points+0x744>
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
   82ae8:	e0fffb17 	ldw	r3,-20(fp)
   82aec:	e0bffd17 	ldw	r2,-12(fp)
   82af0:	1887883a 	add	r3,r3,r2
   82af4:	e0800217 	ldw	r2,8(fp)
   82af8:	1889883a 	add	r4,r3,r2
   82afc:	e0fffc17 	ldw	r3,-16(fp)
   82b00:	e0bffe17 	ldw	r2,-8(fp)
   82b04:	1887883a 	add	r3,r3,r2
   82b08:	e0800317 	ldw	r2,12(fp)
   82b0c:	1887883a 	add	r3,r3,r2
   82b10:	e0800417 	ldw	r2,16(fp)
   82b14:	180b883a 	mov	r5,r3
   82b18:	100d883a 	mov	r6,r2
   82b1c:	e1c00617 	ldw	r7,24(fp)
   82b20:	0081a740 	call	81a74 <vid_set_pixel>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
   82b24:	e0fffb17 	ldw	r3,-20(fp)
   82b28:	e0bffd17 	ldw	r2,-12(fp)
   82b2c:	1889c83a 	sub	r4,r3,r2
   82b30:	e0fffc17 	ldw	r3,-16(fp)
   82b34:	e0bffe17 	ldw	r2,-8(fp)
   82b38:	1887883a 	add	r3,r3,r2
   82b3c:	e0800317 	ldw	r2,12(fp)
   82b40:	1887883a 	add	r3,r3,r2
   82b44:	e0800417 	ldw	r2,16(fp)
   82b48:	180b883a 	mov	r5,r3
   82b4c:	100d883a 	mov	r6,r2
   82b50:	e1c00617 	ldw	r7,24(fp)
   82b54:	0081a740 	call	81a74 <vid_set_pixel>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
   82b58:	e0fffb17 	ldw	r3,-20(fp)
   82b5c:	e0bffd17 	ldw	r2,-12(fp)
   82b60:	1887883a 	add	r3,r3,r2
   82b64:	e0800217 	ldw	r2,8(fp)
   82b68:	1889883a 	add	r4,r3,r2
   82b6c:	e0fffc17 	ldw	r3,-16(fp)
   82b70:	e0bffe17 	ldw	r2,-8(fp)
   82b74:	1887c83a 	sub	r3,r3,r2
   82b78:	e0800417 	ldw	r2,16(fp)
   82b7c:	180b883a 	mov	r5,r3
   82b80:	100d883a 	mov	r6,r2
   82b84:	e1c00617 	ldw	r7,24(fp)
   82b88:	0081a740 	call	81a74 <vid_set_pixel>
          vid_set_pixel(cx - x, cy - y, color, display);
   82b8c:	e0fffb17 	ldw	r3,-20(fp)
   82b90:	e0bffd17 	ldw	r2,-12(fp)
   82b94:	1889c83a 	sub	r4,r3,r2
   82b98:	e0fffc17 	ldw	r3,-16(fp)
   82b9c:	e0bffe17 	ldw	r2,-8(fp)
   82ba0:	1887c83a 	sub	r3,r3,r2
   82ba4:	e0800417 	ldw	r2,16(fp)
   82ba8:	180b883a 	mov	r5,r3
   82bac:	100d883a 	mov	r6,r2
   82bb0:	e1c00617 	ldw	r7,24(fp)
   82bb4:	0081a740 	call	81a74 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
   82bb8:	e0fffb17 	ldw	r3,-20(fp)
   82bbc:	e0bffe17 	ldw	r2,-8(fp)
   82bc0:	1887883a 	add	r3,r3,r2
   82bc4:	e0800217 	ldw	r2,8(fp)
   82bc8:	1889883a 	add	r4,r3,r2
   82bcc:	e0fffc17 	ldw	r3,-16(fp)
   82bd0:	e0bffd17 	ldw	r2,-12(fp)
   82bd4:	1887883a 	add	r3,r3,r2
   82bd8:	e0800317 	ldw	r2,12(fp)
   82bdc:	1887883a 	add	r3,r3,r2
   82be0:	e0800417 	ldw	r2,16(fp)
   82be4:	180b883a 	mov	r5,r3
   82be8:	100d883a 	mov	r6,r2
   82bec:	e1c00617 	ldw	r7,24(fp)
   82bf0:	0081a740 	call	81a74 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
   82bf4:	e0fffb17 	ldw	r3,-20(fp)
   82bf8:	e0bffe17 	ldw	r2,-8(fp)
   82bfc:	1889c83a 	sub	r4,r3,r2
   82c00:	e0fffc17 	ldw	r3,-16(fp)
   82c04:	e0bffd17 	ldw	r2,-12(fp)
   82c08:	1887883a 	add	r3,r3,r2
   82c0c:	e0800317 	ldw	r2,12(fp)
   82c10:	1887883a 	add	r3,r3,r2
   82c14:	e0800417 	ldw	r2,16(fp)
   82c18:	180b883a 	mov	r5,r3
   82c1c:	100d883a 	mov	r6,r2
   82c20:	e1c00617 	ldw	r7,24(fp)
   82c24:	0081a740 	call	81a74 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
   82c28:	e0fffb17 	ldw	r3,-20(fp)
   82c2c:	e0bffe17 	ldw	r2,-8(fp)
   82c30:	1887883a 	add	r3,r3,r2
   82c34:	e0800217 	ldw	r2,8(fp)
   82c38:	1889883a 	add	r4,r3,r2
   82c3c:	e0fffc17 	ldw	r3,-16(fp)
   82c40:	e0bffd17 	ldw	r2,-12(fp)
   82c44:	1887c83a 	sub	r3,r3,r2
   82c48:	e0800417 	ldw	r2,16(fp)
   82c4c:	180b883a 	mov	r5,r3
   82c50:	100d883a 	mov	r6,r2
   82c54:	e1c00617 	ldw	r7,24(fp)
   82c58:	0081a740 	call	81a74 <vid_set_pixel>
          vid_set_pixel(cx - y, cy - x, color, display);
   82c5c:	e0fffb17 	ldw	r3,-20(fp)
   82c60:	e0bffe17 	ldw	r2,-8(fp)
   82c64:	1889c83a 	sub	r4,r3,r2
   82c68:	e0fffc17 	ldw	r3,-16(fp)
   82c6c:	e0bffd17 	ldw	r2,-12(fp)
   82c70:	1887c83a 	sub	r3,r3,r2
   82c74:	e0800417 	ldw	r2,16(fp)
   82c78:	180b883a 	mov	r5,r3
   82c7c:	100d883a 	mov	r6,r2
   82c80:	e1c00617 	ldw	r7,24(fp)
   82c84:	0081a740 	call	81a74 <vid_set_pixel>
        }
    }
}
   82c88:	e037883a 	mov	sp,fp
   82c8c:	dfc00117 	ldw	ra,4(sp)
   82c90:	df000017 	ldw	fp,0(sp)
   82c94:	dec00204 	addi	sp,sp,8
   82c98:	f800283a 	ret

00082c9c <max3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
__inline__ int max3( int a, int b, int c )
{
   82c9c:	defffc04 	addi	sp,sp,-16
   82ca0:	df000315 	stw	fp,12(sp)
   82ca4:	df000304 	addi	fp,sp,12
   82ca8:	e13ffd15 	stw	r4,-12(fp)
   82cac:	e17ffe15 	stw	r5,-8(fp)
   82cb0:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
   82cb4:	e0fffd17 	ldw	r3,-12(fp)
   82cb8:	e0bffe17 	ldw	r2,-8(fp)
   82cbc:	1880020e 	bge	r3,r2,82cc8 <max3+0x2c>
    a = b;
   82cc0:	e0bffe17 	ldw	r2,-8(fp)
   82cc4:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
   82cc8:	e0fffd17 	ldw	r3,-12(fp)
   82ccc:	e0bfff17 	ldw	r2,-4(fp)
   82cd0:	1880020e 	bge	r3,r2,82cdc <max3+0x40>
    a = c;
   82cd4:	e0bfff17 	ldw	r2,-4(fp)
   82cd8:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
   82cdc:	e0bffd17 	ldw	r2,-12(fp)
}
   82ce0:	e037883a 	mov	sp,fp
   82ce4:	df000017 	ldw	fp,0(sp)
   82ce8:	dec00104 	addi	sp,sp,4
   82cec:	f800283a 	ret

00082cf0 <min3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
__inline__ int min3( int a, int b, int c )
{
   82cf0:	defffc04 	addi	sp,sp,-16
   82cf4:	df000315 	stw	fp,12(sp)
   82cf8:	df000304 	addi	fp,sp,12
   82cfc:	e13ffd15 	stw	r4,-12(fp)
   82d00:	e17ffe15 	stw	r5,-8(fp)
   82d04:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
   82d08:	e0bffd17 	ldw	r2,-12(fp)
   82d0c:	e0fffe17 	ldw	r3,-8(fp)
   82d10:	1880020e 	bge	r3,r2,82d1c <min3+0x2c>
    a = b;
   82d14:	e0bffe17 	ldw	r2,-8(fp)
   82d18:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
   82d1c:	e0bffd17 	ldw	r2,-12(fp)
   82d20:	e0ffff17 	ldw	r3,-4(fp)
   82d24:	1880020e 	bge	r3,r2,82d30 <min3+0x40>
    a = c;
   82d28:	e0bfff17 	ldw	r2,-4(fp)
   82d2c:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
   82d30:	e0bffd17 	ldw	r2,-12(fp)
}
   82d34:	e037883a 	mov	sp,fp
   82d38:	df000017 	ldw	fp,0(sp)
   82d3c:	dec00104 	addi	sp,sp,4
   82d40:	f800283a 	ret

00082d44 <max_diff3>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
__inline__ int max_diff3(int a, int b, int c)
{
   82d44:	defff904 	addi	sp,sp,-28
   82d48:	dfc00615 	stw	ra,24(sp)
   82d4c:	df000515 	stw	fp,20(sp)
   82d50:	df000504 	addi	fp,sp,20
   82d54:	e13ffd15 	stw	r4,-12(fp)
   82d58:	e17ffe15 	stw	r5,-8(fp)
   82d5c:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
   82d60:	e13ffd17 	ldw	r4,-12(fp)
   82d64:	e17ffe17 	ldw	r5,-8(fp)
   82d68:	e1bfff17 	ldw	r6,-4(fp)
   82d6c:	0082c9c0 	call	82c9c <max3>
   82d70:	e0bffb15 	stw	r2,-20(fp)
  min = min3( a, b, c );
   82d74:	e13ffd17 	ldw	r4,-12(fp)
   82d78:	e17ffe17 	ldw	r5,-8(fp)
   82d7c:	e1bfff17 	ldw	r6,-4(fp)
   82d80:	0082cf00 	call	82cf0 <min3>
   82d84:	e0bffc15 	stw	r2,-16(fp)
  return (max - min);
   82d88:	e0fffb17 	ldw	r3,-20(fp)
   82d8c:	e0bffc17 	ldw	r2,-16(fp)
   82d90:	1885c83a 	sub	r2,r3,r2
}
   82d94:	e037883a 	mov	sp,fp
   82d98:	dfc00117 	ldw	ra,4(sp)
   82d9c:	df000017 	ldw	fp,0(sp)
   82da0:	dec00204 	addi	sp,sp,8
   82da4:	f800283a 	ret

00082da8 <vid_put_pixel_in_span_map>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
inline void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
   82da8:	defffc04 	addi	sp,sp,-16
   82dac:	df000315 	stw	fp,12(sp)
   82db0:	df000304 	addi	fp,sp,12
   82db4:	e13ffd15 	stw	r4,-12(fp)
   82db8:	e17ffe15 	stw	r5,-8(fp)
   82dbc:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
   82dc0:	e0bffe17 	ldw	r2,-8(fp)
   82dc4:	100490fa 	slli	r2,r2,3
   82dc8:	e0ffff17 	ldw	r3,-4(fp)
   82dcc:	1885883a 	add	r2,r3,r2
   82dd0:	10800017 	ldw	r2,0(r2)
   82dd4:	10bfffd8 	cmpnei	r2,r2,-1
   82dd8:	10000e1e 	bne	r2,zero,82e14 <vid_put_pixel_in_span_map+0x6c>
  {
    span_array[y*2] = x;
   82ddc:	e0bffe17 	ldw	r2,-8(fp)
   82de0:	100490fa 	slli	r2,r2,3
   82de4:	e0ffff17 	ldw	r3,-4(fp)
   82de8:	1885883a 	add	r2,r3,r2
   82dec:	e0fffd17 	ldw	r3,-12(fp)
   82df0:	10c00015 	stw	r3,0(r2)
    span_array[(y*2)+1] = x;
   82df4:	e0bffe17 	ldw	r2,-8(fp)
   82df8:	100490fa 	slli	r2,r2,3
   82dfc:	10800104 	addi	r2,r2,4
   82e00:	e0ffff17 	ldw	r3,-4(fp)
   82e04:	1885883a 	add	r2,r3,r2
   82e08:	e0fffd17 	ldw	r3,-12(fp)
   82e0c:	10c00015 	stw	r3,0(r2)
   82e10:	00001d06 	br	82e88 <vid_put_pixel_in_span_map+0xe0>
  }
  else if( span_array[y*2] > x )
   82e14:	e0bffe17 	ldw	r2,-8(fp)
   82e18:	100490fa 	slli	r2,r2,3
   82e1c:	e0ffff17 	ldw	r3,-4(fp)
   82e20:	1885883a 	add	r2,r3,r2
   82e24:	10800017 	ldw	r2,0(r2)
   82e28:	e0fffd17 	ldw	r3,-12(fp)
   82e2c:	1880070e 	bge	r3,r2,82e4c <vid_put_pixel_in_span_map+0xa4>
    span_array[y*2] = x;
   82e30:	e0bffe17 	ldw	r2,-8(fp)
   82e34:	100490fa 	slli	r2,r2,3
   82e38:	e0ffff17 	ldw	r3,-4(fp)
   82e3c:	1885883a 	add	r2,r3,r2
   82e40:	e0fffd17 	ldw	r3,-12(fp)
   82e44:	10c00015 	stw	r3,0(r2)
   82e48:	00000f06 	br	82e88 <vid_put_pixel_in_span_map+0xe0>
  else if( span_array[(y*2)+1] < x )
   82e4c:	e0bffe17 	ldw	r2,-8(fp)
   82e50:	100490fa 	slli	r2,r2,3
   82e54:	10800104 	addi	r2,r2,4
   82e58:	e0ffff17 	ldw	r3,-4(fp)
   82e5c:	1885883a 	add	r2,r3,r2
   82e60:	10c00017 	ldw	r3,0(r2)
   82e64:	e0bffd17 	ldw	r2,-12(fp)
   82e68:	1880070e 	bge	r3,r2,82e88 <vid_put_pixel_in_span_map+0xe0>
    span_array[(y*2)+1] = x;
   82e6c:	e0bffe17 	ldw	r2,-8(fp)
   82e70:	100490fa 	slli	r2,r2,3
   82e74:	10800104 	addi	r2,r2,4
   82e78:	e0ffff17 	ldw	r3,-4(fp)
   82e7c:	1885883a 	add	r2,r3,r2
   82e80:	e0fffd17 	ldw	r3,-12(fp)
   82e84:	10c00015 	stw	r3,0(r2)
}
   82e88:	e037883a 	mov	sp,fp
   82e8c:	df000017 	ldw	fp,0(sp)
   82e90:	dec00104 	addi	sp,sp,4
   82e94:	f800283a 	ret

00082e98 <vid_bres_scan_edges>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
   82e98:	deffee04 	addi	sp,sp,-72
   82e9c:	dfc01115 	stw	ra,68(sp)
   82ea0:	df001015 	stw	fp,64(sp)
   82ea4:	df001004 	addi	fp,sp,64
   82ea8:	e13ffc15 	stw	r4,-16(fp)
   82eac:	e17ffd15 	stw	r5,-12(fp)
   82eb0:	e1bffe15 	stw	r6,-8(fp)
   82eb4:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
   82eb8:	e0bffc17 	ldw	r2,-16(fp)
   82ebc:	e0fffe17 	ldw	r3,-8(fp)
   82ec0:	18800c0e 	bge	r3,r2,82ef4 <vid_bres_scan_edges+0x5c>
  {
    int tempx = x2;
   82ec4:	e0bffe17 	ldw	r2,-8(fp)
   82ec8:	e0bff515 	stw	r2,-44(fp)
    x2 = x1;
   82ecc:	e0bffc17 	ldw	r2,-16(fp)
   82ed0:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
   82ed4:	e0bff517 	ldw	r2,-44(fp)
   82ed8:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
   82edc:	e0bfff17 	ldw	r2,-4(fp)
   82ee0:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
   82ee4:	e0bffd17 	ldw	r2,-12(fp)
   82ee8:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
   82eec:	e0bff617 	ldw	r2,-40(fp)
   82ef0:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
   82ef4:	e0fffd17 	ldw	r3,-12(fp)
   82ef8:	e0bfff17 	ldw	r2,-4(fp)
   82efc:	1885c83a 	sub	r2,r3,r2
   82f00:	1000010e 	bge	r2,zero,82f08 <vid_bres_scan_edges+0x70>
   82f04:	0085c83a 	sub	r2,zero,r2
   82f08:	e0bff115 	stw	r2,-60(fp)
  x_delta = (x2-x1);
   82f0c:	e0fffe17 	ldw	r3,-8(fp)
   82f10:	e0bffc17 	ldw	r2,-16(fp)
   82f14:	1885c83a 	sub	r2,r3,r2
   82f18:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
   82f1c:	e0bffd17 	ldw	r2,-12(fp)
   82f20:	e0ffff17 	ldw	r3,-4(fp)
   82f24:	1880030e 	bge	r3,r2,82f34 <vid_bres_scan_edges+0x9c>
   82f28:	00bfffc4 	movi	r2,-1
   82f2c:	e0bff015 	stw	r2,-64(fp)
   82f30:	00000206 	br	82f3c <vid_bres_scan_edges+0xa4>
   82f34:	00800044 	movi	r2,1
   82f38:	e0bff015 	stw	r2,-64(fp)
  x_incr=1;
   82f3c:	00800044 	movi	r2,1
   82f40:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
   82f44:	e0fff217 	ldw	r3,-56(fp)
   82f48:	e0bff117 	ldw	r2,-60(fp)
   82f4c:	18802e16 	blt	r3,r2,83008 <vid_bres_scan_edges+0x170>
    int dPr   = y_delta<<1;
   82f50:	e0bff117 	ldw	r2,-60(fp)
   82f54:	1085883a 	add	r2,r2,r2
   82f58:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (x_delta<<1);
   82f5c:	e0bff217 	ldw	r2,-56(fp)
   82f60:	1085883a 	add	r2,r2,r2
   82f64:	e0fff817 	ldw	r3,-32(fp)
   82f68:	1885c83a 	sub	r2,r3,r2
   82f6c:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - x_delta;
   82f70:	e0fff817 	ldw	r3,-32(fp)
   82f74:	e0bff217 	ldw	r2,-56(fp)
   82f78:	1885c83a 	sub	r2,r3,r2
   82f7c:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
   82f80:	00001e06 	br	82ffc <vid_bres_scan_edges+0x164>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
   82f84:	e13ffc17 	ldw	r4,-16(fp)
   82f88:	e17ffd17 	ldw	r5,-12(fp)
   82f8c:	e1800217 	ldw	r6,8(fp)
   82f90:	0082da80 	call	82da8 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
   82f94:	e0bff317 	ldw	r2,-52(fp)
   82f98:	00800d0e 	bge	zero,r2,82fd0 <vid_bres_scan_edges+0x138>
        x1+=x_incr;
   82f9c:	e0fffc17 	ldw	r3,-16(fp)
   82fa0:	e0bff717 	ldw	r2,-36(fp)
   82fa4:	1885883a 	add	r2,r3,r2
   82fa8:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
   82fac:	e0fffd17 	ldw	r3,-12(fp)
   82fb0:	e0bff017 	ldw	r2,-64(fp)
   82fb4:	1885883a 	add	r2,r3,r2
   82fb8:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
   82fbc:	e0fff317 	ldw	r3,-52(fp)
   82fc0:	e0bff917 	ldw	r2,-28(fp)
   82fc4:	1885883a 	add	r2,r3,r2
   82fc8:	e0bff315 	stw	r2,-52(fp)
   82fcc:	00000806 	br	82ff0 <vid_bres_scan_edges+0x158>
      } else {
        x1+=x_incr;
   82fd0:	e0fffc17 	ldw	r3,-16(fp)
   82fd4:	e0bff717 	ldw	r2,-36(fp)
   82fd8:	1885883a 	add	r2,r3,r2
   82fdc:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
   82fe0:	e0fff317 	ldw	r3,-52(fp)
   82fe4:	e0bff817 	ldw	r2,-32(fp)
   82fe8:	1885883a 	add	r2,r3,r2
   82fec:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
   82ff0:	e0bff217 	ldw	r2,-56(fp)
   82ff4:	10bfffc4 	addi	r2,r2,-1
   82ff8:	e0bff215 	stw	r2,-56(fp)
   82ffc:	e0bff217 	ldw	r2,-56(fp)
   83000:	103fe00e 	bge	r2,zero,82f84 <__alt_data_end+0xfffcad14>
   83004:	00002d06 	br	830bc <vid_bres_scan_edges+0x224>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
   83008:	e0bff217 	ldw	r2,-56(fp)
   8300c:	1085883a 	add	r2,r2,r2
   83010:	e0bffa15 	stw	r2,-24(fp)
    int dPru  = dPr - (y_delta<<1);
   83014:	e0bff117 	ldw	r2,-60(fp)
   83018:	1085883a 	add	r2,r2,r2
   8301c:	e0fffa17 	ldw	r3,-24(fp)
   83020:	1885c83a 	sub	r2,r3,r2
   83024:	e0bffb15 	stw	r2,-20(fp)
    int P     = dPr - y_delta;
   83028:	e0fffa17 	ldw	r3,-24(fp)
   8302c:	e0bff117 	ldw	r2,-60(fp)
   83030:	1885c83a 	sub	r2,r3,r2
   83034:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
   83038:	00001e06 	br	830b4 <vid_bres_scan_edges+0x21c>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
   8303c:	e13ffc17 	ldw	r4,-16(fp)
   83040:	e17ffd17 	ldw	r5,-12(fp)
   83044:	e1800217 	ldw	r6,8(fp)
   83048:	0082da80 	call	82da8 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
   8304c:	e0bff417 	ldw	r2,-48(fp)
   83050:	00800d0e 	bge	zero,r2,83088 <vid_bres_scan_edges+0x1f0>
        x1+=x_incr;
   83054:	e0fffc17 	ldw	r3,-16(fp)
   83058:	e0bff717 	ldw	r2,-36(fp)
   8305c:	1885883a 	add	r2,r3,r2
   83060:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
   83064:	e0fffd17 	ldw	r3,-12(fp)
   83068:	e0bff017 	ldw	r2,-64(fp)
   8306c:	1885883a 	add	r2,r3,r2
   83070:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
   83074:	e0fff417 	ldw	r3,-48(fp)
   83078:	e0bffb17 	ldw	r2,-20(fp)
   8307c:	1885883a 	add	r2,r3,r2
   83080:	e0bff415 	stw	r2,-48(fp)
   83084:	00000806 	br	830a8 <vid_bres_scan_edges+0x210>
      } else {
        y1+=y_incr;
   83088:	e0fffd17 	ldw	r3,-12(fp)
   8308c:	e0bff017 	ldw	r2,-64(fp)
   83090:	1885883a 	add	r2,r3,r2
   83094:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
   83098:	e0fff417 	ldw	r3,-48(fp)
   8309c:	e0bffa17 	ldw	r2,-24(fp)
   830a0:	1885883a 	add	r2,r3,r2
   830a4:	e0bff415 	stw	r2,-48(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
   830a8:	e0bff117 	ldw	r2,-60(fp)
   830ac:	10bfffc4 	addi	r2,r2,-1
   830b0:	e0bff115 	stw	r2,-60(fp)
   830b4:	e0bff117 	ldw	r2,-60(fp)
   830b8:	103fe00e 	bge	r2,zero,8303c <__alt_data_end+0xfffcadcc>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
   830bc:	e037883a 	mov	sp,fp
   830c0:	dfc00117 	ldw	ra,4(sp)
   830c4:	df000017 	ldw	fp,0(sp)
   830c8:	dec00204 	addi	sp,sp,8
   830cc:	f800283a 	ret

000830d0 <vid_draw_triangle>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
   830d0:	defff804 	addi	sp,sp,-32
   830d4:	dfc00715 	stw	ra,28(sp)
   830d8:	df000615 	stw	fp,24(sp)
   830dc:	df000604 	addi	fp,sp,24
   830e0:	e13ffe15 	stw	r4,-8(fp)
   830e4:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
   830e8:	e0bffe17 	ldw	r2,-8(fp)
   830ec:	11000017 	ldw	r4,0(r2)
   830f0:	e0bffe17 	ldw	r2,-8(fp)
   830f4:	11400317 	ldw	r5,12(r2)
   830f8:	e0bffe17 	ldw	r2,-8(fp)
   830fc:	10c00117 	ldw	r3,4(r2)
   83100:	e0bffe17 	ldw	r2,-8(fp)
   83104:	10800417 	ldw	r2,16(r2)
   83108:	e1bffe17 	ldw	r6,-8(fp)
   8310c:	31800a17 	ldw	r6,40(r6)
   83110:	01c00044 	movi	r7,1
   83114:	d9c00015 	stw	r7,0(sp)
   83118:	d9800115 	stw	r6,4(sp)
   8311c:	e1bfff17 	ldw	r6,-4(fp)
   83120:	d9800215 	stw	r6,8(sp)
   83124:	180d883a 	mov	r6,r3
   83128:	100f883a 	mov	r7,r2
   8312c:	00810300 	call	81030 <vid_draw_line>
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
   83130:	e0bffe17 	ldw	r2,-8(fp)
   83134:	11000117 	ldw	r4,4(r2)
   83138:	e0bffe17 	ldw	r2,-8(fp)
   8313c:	11400417 	ldw	r5,16(r2)
   83140:	e0bffe17 	ldw	r2,-8(fp)
   83144:	10c00217 	ldw	r3,8(r2)
   83148:	e0bffe17 	ldw	r2,-8(fp)
   8314c:	10800517 	ldw	r2,20(r2)
   83150:	e1bffe17 	ldw	r6,-8(fp)
   83154:	31800a17 	ldw	r6,40(r6)
   83158:	01c00044 	movi	r7,1
   8315c:	d9c00015 	stw	r7,0(sp)
   83160:	d9800115 	stw	r6,4(sp)
   83164:	e1bfff17 	ldw	r6,-4(fp)
   83168:	d9800215 	stw	r6,8(sp)
   8316c:	180d883a 	mov	r6,r3
   83170:	100f883a 	mov	r7,r2
   83174:	00810300 	call	81030 <vid_draw_line>
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
   83178:	e0bffe17 	ldw	r2,-8(fp)
   8317c:	11000217 	ldw	r4,8(r2)
   83180:	e0bffe17 	ldw	r2,-8(fp)
   83184:	11400517 	ldw	r5,20(r2)
   83188:	e0bffe17 	ldw	r2,-8(fp)
   8318c:	10c00017 	ldw	r3,0(r2)
   83190:	e0bffe17 	ldw	r2,-8(fp)
   83194:	10800317 	ldw	r2,12(r2)
   83198:	e1bffe17 	ldw	r6,-8(fp)
   8319c:	31800a17 	ldw	r6,40(r6)
   831a0:	01c00044 	movi	r7,1
   831a4:	d9c00015 	stw	r7,0(sp)
   831a8:	d9800115 	stw	r6,4(sp)
   831ac:	e1bfff17 	ldw	r6,-4(fp)
   831b0:	d9800215 	stw	r6,8(sp)
   831b4:	180d883a 	mov	r6,r3
   831b8:	100f883a 	mov	r7,r2
   831bc:	00810300 	call	81030 <vid_draw_line>
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
   831c0:	e0bffe17 	ldw	r2,-8(fp)
   831c4:	10800b17 	ldw	r2,44(r2)
   831c8:	10800058 	cmpnei	r2,r2,1
   831cc:	1000a41e 	bne	r2,zero,83460 <vid_draw_triangle+0x390>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
   831d0:	e0bffe17 	ldw	r2,-8(fp)
   831d4:	11000317 	ldw	r4,12(r2)
   831d8:	e0bffe17 	ldw	r2,-8(fp)
   831dc:	10c00417 	ldw	r3,16(r2)
   831e0:	e0bffe17 	ldw	r2,-8(fp)
   831e4:	10800517 	ldw	r2,20(r2)
   831e8:	180b883a 	mov	r5,r3
   831ec:	100d883a 	mov	r6,r2
   831f0:	0082cf00 	call	82cf0 <min3>
   831f4:	1007883a 	mov	r3,r2
   831f8:	e0bffe17 	ldw	r2,-8(fp)
   831fc:	10c00815 	stw	r3,32(r2)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
   83200:	e0bffe17 	ldw	r2,-8(fp)
   83204:	11000317 	ldw	r4,12(r2)
   83208:	e0bffe17 	ldw	r2,-8(fp)
   8320c:	10c00417 	ldw	r3,16(r2)
   83210:	e0bffe17 	ldw	r2,-8(fp)
   83214:	10800517 	ldw	r2,20(r2)
   83218:	180b883a 	mov	r5,r3
   8321c:	100d883a 	mov	r6,r2
   83220:	0082c9c0 	call	82c9c <max3>
   83224:	1007883a 	mov	r3,r2
   83228:	e0bffe17 	ldw	r2,-8(fp)
   8322c:	10c00915 	stw	r3,36(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
   83230:	e0bffe17 	ldw	r2,-8(fp)
   83234:	11000317 	ldw	r4,12(r2)
   83238:	e0bffe17 	ldw	r2,-8(fp)
   8323c:	10c00417 	ldw	r3,16(r2)
   83240:	e0bffe17 	ldw	r2,-8(fp)
   83244:	10800517 	ldw	r2,20(r2)
   83248:	180b883a 	mov	r5,r3
   8324c:	100d883a 	mov	r6,r2
   83250:	0082d440 	call	82d44 <max_diff3>
   83254:	1007883a 	mov	r3,r2
   83258:	e0bffe17 	ldw	r2,-8(fp)
   8325c:	10c00615 	stw	r3,24(r2)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
   83260:	e0bffe17 	ldw	r2,-8(fp)
   83264:	11000017 	ldw	r4,0(r2)
   83268:	e0bffe17 	ldw	r2,-8(fp)
   8326c:	10c00117 	ldw	r3,4(r2)
   83270:	e0bffe17 	ldw	r2,-8(fp)
   83274:	10800217 	ldw	r2,8(r2)
   83278:	180b883a 	mov	r5,r3
   8327c:	100d883a 	mov	r6,r2
   83280:	0082d440 	call	82d44 <max_diff3>
   83284:	1007883a 	mov	r3,r2
   83288:	e0bffe17 	ldw	r2,-8(fp)
   8328c:	10c00715 	stw	r3,28(r2)
    tri->span_array = malloc(display->height * 4 * 2);
   83290:	e0bfff17 	ldw	r2,-4(fp)
   83294:	10800217 	ldw	r2,8(r2)
   83298:	100490fa 	slli	r2,r2,3
   8329c:	1009883a 	mov	r4,r2
   832a0:	0089ba40 	call	89ba4 <malloc>
   832a4:	1007883a 	mov	r3,r2
   832a8:	e0bffe17 	ldw	r2,-8(fp)
   832ac:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
   832b0:	e0bffe17 	ldw	r2,-8(fp)
   832b4:	10800817 	ldw	r2,32(r2)
   832b8:	e0bffd15 	stw	r2,-12(fp)
   832bc:	00001206 	br	83308 <vid_draw_triangle+0x238>
    {
      tri->span_array[i*2] = -1;
   832c0:	e0bffe17 	ldw	r2,-8(fp)
   832c4:	10c00d17 	ldw	r3,52(r2)
   832c8:	e0bffd17 	ldw	r2,-12(fp)
   832cc:	100490fa 	slli	r2,r2,3
   832d0:	1885883a 	add	r2,r3,r2
   832d4:	00ffffc4 	movi	r3,-1
   832d8:	10c00015 	stw	r3,0(r2)
      tri->span_array[(i*2) + 1] = -1;
   832dc:	e0bffe17 	ldw	r2,-8(fp)
   832e0:	10c00d17 	ldw	r3,52(r2)
   832e4:	e0bffd17 	ldw	r2,-12(fp)
   832e8:	100490fa 	slli	r2,r2,3
   832ec:	10800104 	addi	r2,r2,4
   832f0:	1885883a 	add	r2,r3,r2
   832f4:	00ffffc4 	movi	r3,-1
   832f8:	10c00015 	stw	r3,0(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
   832fc:	e0bffd17 	ldw	r2,-12(fp)
   83300:	10800044 	addi	r2,r2,1
   83304:	e0bffd15 	stw	r2,-12(fp)
   83308:	e0bffe17 	ldw	r2,-8(fp)
   8330c:	10c00917 	ldw	r3,36(r2)
   83310:	e0bffd17 	ldw	r2,-12(fp)
   83314:	18bfea0e 	bge	r3,r2,832c0 <__alt_data_end+0xfffcb050>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
   83318:	e0bffe17 	ldw	r2,-8(fp)
   8331c:	11000017 	ldw	r4,0(r2)
   83320:	e0bffe17 	ldw	r2,-8(fp)
   83324:	11400317 	ldw	r5,12(r2)
   83328:	e0bffe17 	ldw	r2,-8(fp)
   8332c:	10c00117 	ldw	r3,4(r2)
   83330:	e0bffe17 	ldw	r2,-8(fp)
   83334:	10800417 	ldw	r2,16(r2)
   83338:	e1bffe17 	ldw	r6,-8(fp)
   8333c:	31800d17 	ldw	r6,52(r6)
   83340:	d9800015 	stw	r6,0(sp)
   83344:	180d883a 	mov	r6,r3
   83348:	100f883a 	mov	r7,r2
   8334c:	0082e980 	call	82e98 <vid_bres_scan_edges>
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
   83350:	e0bffe17 	ldw	r2,-8(fp)
   83354:	11000117 	ldw	r4,4(r2)
   83358:	e0bffe17 	ldw	r2,-8(fp)
   8335c:	11400417 	ldw	r5,16(r2)
   83360:	e0bffe17 	ldw	r2,-8(fp)
   83364:	10c00217 	ldw	r3,8(r2)
   83368:	e0bffe17 	ldw	r2,-8(fp)
   8336c:	10800517 	ldw	r2,20(r2)
   83370:	e1bffe17 	ldw	r6,-8(fp)
   83374:	31800d17 	ldw	r6,52(r6)
   83378:	d9800015 	stw	r6,0(sp)
   8337c:	180d883a 	mov	r6,r3
   83380:	100f883a 	mov	r7,r2
   83384:	0082e980 	call	82e98 <vid_bres_scan_edges>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
   83388:	e0bffe17 	ldw	r2,-8(fp)
   8338c:	11000217 	ldw	r4,8(r2)
   83390:	e0bffe17 	ldw	r2,-8(fp)
   83394:	11400517 	ldw	r5,20(r2)
   83398:	e0bffe17 	ldw	r2,-8(fp)
   8339c:	10c00017 	ldw	r3,0(r2)
   833a0:	e0bffe17 	ldw	r2,-8(fp)
   833a4:	10800317 	ldw	r2,12(r2)
   833a8:	e1bffe17 	ldw	r6,-8(fp)
   833ac:	31800d17 	ldw	r6,52(r6)
   833b0:	d9800015 	stw	r6,0(sp)
   833b4:	180d883a 	mov	r6,r3
   833b8:	100f883a 	mov	r7,r2
   833bc:	0082e980 	call	82e98 <vid_bres_scan_edges>
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
   833c0:	e0bffe17 	ldw	r2,-8(fp)
   833c4:	10800817 	ldw	r2,32(r2)
   833c8:	e0bffd15 	stw	r2,-12(fp)
   833cc:	00001c06 	br	83440 <vid_draw_triangle+0x370>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
   833d0:	e0bffe17 	ldw	r2,-8(fp)
   833d4:	10c00d17 	ldw	r3,52(r2)
   833d8:	e0bffd17 	ldw	r2,-12(fp)
   833dc:	100490fa 	slli	r2,r2,3
   833e0:	1885883a 	add	r2,r3,r2
   833e4:	10c00017 	ldw	r3,0(r2)
   833e8:	e0bffe17 	ldw	r2,-8(fp)
   833ec:	11000d17 	ldw	r4,52(r2)
   833f0:	e0bffd17 	ldw	r2,-12(fp)
   833f4:	100490fa 	slli	r2,r2,3
   833f8:	10800104 	addi	r2,r2,4
   833fc:	2085883a 	add	r2,r4,r2
   83400:	10800017 	ldw	r2,0(r2)
   83404:	e13ffe17 	ldw	r4,-8(fp)
   83408:	21000a17 	ldw	r4,40(r4)
   8340c:	01400044 	movi	r5,1
   83410:	d9400015 	stw	r5,0(sp)
   83414:	d9000115 	stw	r4,4(sp)
   83418:	e13fff17 	ldw	r4,-4(fp)
   8341c:	d9000215 	stw	r4,8(sp)
   83420:	1809883a 	mov	r4,r3
   83424:	e17ffd17 	ldw	r5,-12(fp)
   83428:	100d883a 	mov	r6,r2
   8342c:	e1fffd17 	ldw	r7,-12(fp)
   83430:	00810300 	call	81030 <vid_draw_line>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
   83434:	e0bffd17 	ldw	r2,-12(fp)
   83438:	10800044 	addi	r2,r2,1
   8343c:	e0bffd15 	stw	r2,-12(fp)
   83440:	e0bffe17 	ldw	r2,-8(fp)
   83444:	10c00917 	ldw	r3,36(r2)
   83448:	e0bffd17 	ldw	r2,-12(fp)
   8344c:	18bfe00e 	bge	r3,r2,833d0 <__alt_data_end+0xfffcb160>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
   83450:	e0bffe17 	ldw	r2,-8(fp)
   83454:	10800d17 	ldw	r2,52(r2)
   83458:	1009883a 	mov	r4,r2
   8345c:	0089bb80 	call	89bb8 <free>
  }
}
   83460:	e037883a 	mov	sp,fp
   83464:	dfc00117 	ldw	ra,4(sp)
   83468:	df000017 	ldw	fp,0(sp)
   8346c:	dec00204 	addi	sp,sp,8
   83470:	f800283a 	ret

00083474 <CopyImage16>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
   83474:	defff404 	addi	sp,sp,-48
   83478:	dfc00b15 	stw	ra,44(sp)
   8347c:	df000a15 	stw	fp,40(sp)
   83480:	df000a04 	addi	fp,sp,40
   83484:	e13ffa15 	stw	r4,-24(fp)
   83488:	e17ffb15 	stw	r5,-20(fp)
   8348c:	300b883a 	mov	r5,r6
   83490:	3809883a 	mov	r4,r7
   83494:	e0c00217 	ldw	r3,8(fp)
   83498:	e0800317 	ldw	r2,12(fp)
   8349c:	e17ffc0d 	sth	r5,-16(fp)
   834a0:	e13ffd0d 	sth	r4,-12(fp)
   834a4:	e0fffe0d 	sth	r3,-8(fp)
   834a8:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
   834ac:	e03ff815 	stw	zero,-32(fp)
  int y_dst_offset = 0;
   834b0:	e03ff915 	stw	zero,-28(fp)
  
  for( y_src = 0, y_dst = 0; 
   834b4:	e03ff615 	stw	zero,-40(fp)
   834b8:	e03ff715 	stw	zero,-36(fp)
   834bc:	00001b06 	br	8352c <CopyImage16+0xb8>
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   834c0:	e0bff917 	ldw	r2,-28(fp)
   834c4:	1085883a 	add	r2,r2,r2
   834c8:	e0fffb17 	ldw	r3,-20(fp)
   834cc:	1889883a 	add	r4,r3,r2
   834d0:	e0bff817 	ldw	r2,-32(fp)
           ( source_buffer + y_src_offset ), 
   834d4:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   834d8:	e0fffa17 	ldw	r3,-24(fp)
   834dc:	1887883a 	add	r3,r3,r2
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
   834e0:	e0bffc0f 	ldh	r2,-16(fp)
   834e4:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   834e8:	180b883a 	mov	r5,r3
   834ec:	100d883a 	mov	r6,r2
   834f0:	008a24c0 	call	8a24c <memcpy>
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
   834f4:	e0bff617 	ldw	r2,-40(fp)
   834f8:	10800044 	addi	r2,r2,1
   834fc:	e0bff615 	stw	r2,-40(fp)
   83500:	e0bff717 	ldw	r2,-36(fp)
   83504:	10800044 	addi	r2,r2,1
   83508:	e0bff715 	stw	r2,-36(fp)
   8350c:	e0bffc0f 	ldh	r2,-16(fp)
   83510:	e0fff817 	ldw	r3,-32(fp)
   83514:	1885883a 	add	r2,r3,r2
   83518:	e0bff815 	stw	r2,-32(fp)
   8351c:	e0bffe0f 	ldh	r2,-8(fp)
   83520:	e0fff917 	ldw	r3,-28(fp)
   83524:	1885883a 	add	r2,r3,r2
   83528:	e0bff915 	stw	r2,-28(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
   8352c:	e0bffd0f 	ldh	r2,-12(fp)
   83530:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
   83534:	e0bff617 	ldw	r2,-40(fp)
   83538:	18bfe10e 	bge	r3,r2,834c0 <__alt_data_end+0xfffcb250>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
   8353c:	e037883a 	mov	sp,fp
   83540:	dfc00117 	ldw	ra,4(sp)
   83544:	df000017 	ldw	fp,0(sp)
   83548:	dec00204 	addi	sp,sp,8
   8354c:	f800283a 	ret

00083550 <CropImage16>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
   83550:	defff004 	addi	sp,sp,-64
   83554:	dfc00f15 	stw	ra,60(sp)
   83558:	df000e15 	stw	fp,56(sp)
   8355c:	df000e04 	addi	fp,sp,56
   83560:	e13ff615 	stw	r4,-40(fp)
   83564:	e17ff715 	stw	r5,-36(fp)
   83568:	3013883a 	mov	r9,r6
   8356c:	3811883a 	mov	r8,r7
   83570:	e1c00217 	ldw	r7,8(fp)
   83574:	e1800317 	ldw	r6,12(fp)
   83578:	e1400417 	ldw	r5,16(fp)
   8357c:	e1000517 	ldw	r4,20(fp)
   83580:	e0c00617 	ldw	r3,24(fp)
   83584:	e0800717 	ldw	r2,28(fp)
   83588:	e27ff80d 	sth	r9,-32(fp)
   8358c:	e23ff90d 	sth	r8,-28(fp)
   83590:	e1fffa0d 	sth	r7,-24(fp)
   83594:	e1bffb0d 	sth	r6,-20(fp)
   83598:	e17ffc0d 	sth	r5,-16(fp)
   8359c:	e13ffd0d 	sth	r4,-12(fp)
   835a0:	e0fffe0d 	sth	r3,-8(fp)
   835a4:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
   835a8:	e0fff80f 	ldh	r3,-32(fp)
   835ac:	e0bffc0f 	ldh	r2,-16(fp)
   835b0:	1885383a 	mul	r2,r3,r2
   835b4:	e0bff415 	stw	r2,-48(fp)
  int y_dst_offset = 0;
   835b8:	e03ff515 	stw	zero,-44(fp)
  
  for( y_src = crop_top, y_dst = 0; 
   835bc:	e0bffc0f 	ldh	r2,-16(fp)
   835c0:	e0bff215 	stw	r2,-56(fp)
   835c4:	e03ff315 	stw	zero,-52(fp)
   835c8:	00002106 	br	83650 <CropImage16+0x100>
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   835cc:	e0bff517 	ldw	r2,-44(fp)
   835d0:	1085883a 	add	r2,r2,r2
   835d4:	e0fff717 	ldw	r3,-36(fp)
   835d8:	1889883a 	add	r4,r3,r2
           ( source_buffer + y_src_offset + crop_left ), 
   835dc:	e0fffa0f 	ldh	r3,-24(fp)
   835e0:	e0bff417 	ldw	r2,-48(fp)
   835e4:	1885883a 	add	r2,r3,r2
   835e8:	1085883a 	add	r2,r2,r2
   835ec:	e0fff617 	ldw	r3,-40(fp)
   835f0:	1887883a 	add	r3,r3,r2
           ((source_width - crop_left - crop_right) << 1));
   835f4:	e17ff80f 	ldh	r5,-32(fp)
   835f8:	e0bffa0f 	ldh	r2,-24(fp)
   835fc:	288bc83a 	sub	r5,r5,r2
   83600:	e0bffb0f 	ldh	r2,-20(fp)
   83604:	2885c83a 	sub	r2,r5,r2
   83608:	1085883a 	add	r2,r2,r2
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   8360c:	180b883a 	mov	r5,r3
   83610:	100d883a 	mov	r6,r2
   83614:	008a24c0 	call	8a24c <memcpy>
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
   83618:	e0bff217 	ldw	r2,-56(fp)
   8361c:	10800044 	addi	r2,r2,1
   83620:	e0bff215 	stw	r2,-56(fp)
   83624:	e0bff317 	ldw	r2,-52(fp)
   83628:	10800044 	addi	r2,r2,1
   8362c:	e0bff315 	stw	r2,-52(fp)
   83630:	e0bff80f 	ldh	r2,-32(fp)
   83634:	e0fff417 	ldw	r3,-48(fp)
   83638:	1885883a 	add	r2,r3,r2
   8363c:	e0bff415 	stw	r2,-48(fp)
   83640:	e0bffe0f 	ldh	r2,-8(fp)
   83644:	e0fff517 	ldw	r3,-44(fp)
   83648:	1885883a 	add	r2,r3,r2
   8364c:	e0bff515 	stw	r2,-44(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
   83650:	e0fff90f 	ldh	r3,-28(fp)
   83654:	e0bffd0f 	ldh	r2,-12(fp)
   83658:	1885c83a 	sub	r2,r3,r2
   8365c:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
   83660:	e0bff217 	ldw	r2,-56(fp)
   83664:	18bfd90e 	bge	r3,r2,835cc <__alt_data_end+0xfffcb35c>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
   83668:	e037883a 	mov	sp,fp
   8366c:	dfc00117 	ldw	ra,4(sp)
   83670:	df000017 	ldw	fp,0(sp)
   83674:	dec00204 	addi	sp,sp,8
   83678:	f800283a 	ret

0008367c <vid_print_string_alpha>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
   8367c:	defff404 	addi	sp,sp,-48
   83680:	dfc00b15 	stw	ra,44(sp)
   83684:	df000a15 	stw	fp,40(sp)
   83688:	df000a04 	addi	fp,sp,40
   8368c:	e13ffc15 	stw	r4,-16(fp)
   83690:	e17ffd15 	stw	r5,-12(fp)
   83694:	e1bffe15 	stw	r6,-8(fp)
   83698:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
   8369c:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
   836a0:	e0bffc17 	ldw	r2,-16(fp)
   836a4:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
   836a8:	00007d06 	br	838a0 <vid_print_string_alpha+0x224>
    //Handle newline char here.
    if (string[i] == '\n') {
   836ac:	e0bff917 	ldw	r2,-28(fp)
   836b0:	e0c00417 	ldw	r3,16(fp)
   836b4:	1885883a 	add	r2,r3,r2
   836b8:	10800003 	ldbu	r2,0(r2)
   836bc:	10803fcc 	andi	r2,r2,255
   836c0:	1080201c 	xori	r2,r2,128
   836c4:	10bfe004 	addi	r2,r2,-128
   836c8:	10800298 	cmpnei	r2,r2,10
   836cc:	10000c1e 	bne	r2,zero,83700 <vid_print_string_alpha+0x84>
      horiz_offset = original_horiz_offset;
   836d0:	e0bffb17 	ldw	r2,-20(fp)
   836d4:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
   836d8:	e0800217 	ldw	r2,8(fp)
   836dc:	1082d804 	addi	r2,r2,2912
   836e0:	10c00517 	ldw	r3,20(r2)
   836e4:	e0bffd17 	ldw	r2,-12(fp)
   836e8:	1885883a 	add	r2,r3,r2
   836ec:	e0bffd15 	stw	r2,-12(fp)
      i++;
   836f0:	e0bff917 	ldw	r2,-28(fp)
   836f4:	10800044 	addi	r2,r2,1
   836f8:	e0bff915 	stw	r2,-28(fp)
      continue;
   836fc:	00006806 	br	838a0 <vid_print_string_alpha+0x224>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
   83700:	e0bff917 	ldw	r2,-28(fp)
   83704:	e0c00417 	ldw	r3,16(fp)
   83708:	1885883a 	add	r2,r3,r2
   8370c:	10800003 	ldbu	r2,0(r2)
   83710:	10803fcc 	andi	r2,r2,255
   83714:	1080201c 	xori	r2,r2,128
   83718:	10bfe004 	addi	r2,r2,-128
   8371c:	10800818 	cmpnei	r2,r2,32
   83720:	1000151e 	bne	r2,zero,83778 <vid_print_string_alpha+0xfc>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
   83724:	e0bfff17 	ldw	r2,-4(fp)
   83728:	10bfffe0 	cmpeqi	r2,r2,-1
   8372c:	10000b1e 	bne	r2,zero,8375c <vid_print_string_alpha+0xe0>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
   83730:	e0bfff17 	ldw	r2,-4(fp)
   83734:	d8800015 	stw	r2,0(sp)
   83738:	e0800217 	ldw	r2,8(fp)
   8373c:	d8800115 	stw	r2,4(sp)
   83740:	e0800317 	ldw	r2,12(fp)
   83744:	d8800215 	stw	r2,8(sp)
   83748:	e13ffc17 	ldw	r4,-16(fp)
   8374c:	e17ffd17 	ldw	r5,-12(fp)
   83750:	e1bfff17 	ldw	r6,-4(fp)
   83754:	01c00b44 	movi	r7,45
   83758:	0083de40 	call	83de4 <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
   8375c:	e0800217 	ldw	r2,8(fp)
   83760:	10806004 	addi	r2,r2,384
   83764:	10c00417 	ldw	r3,16(r2)
   83768:	e0bffc17 	ldw	r2,-16(fp)
   8376c:	1885883a 	add	r2,r3,r2
   83770:	e0bffc15 	stw	r2,-16(fp)
   83774:	00004706 	br	83894 <vid_print_string_alpha+0x218>
    }
    else if(string[i] == '\t')  // this is a tab
   83778:	e0bff917 	ldw	r2,-28(fp)
   8377c:	e0c00417 	ldw	r3,16(fp)
   83780:	1885883a 	add	r2,r3,r2
   83784:	10800003 	ldbu	r2,0(r2)
   83788:	10803fcc 	andi	r2,r2,255
   8378c:	1080201c 	xori	r2,r2,128
   83790:	10bfe004 	addi	r2,r2,-128
   83794:	10800258 	cmpnei	r2,r2,9
   83798:	10001d1e 	bne	r2,zero,83810 <vid_print_string_alpha+0x194>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
   8379c:	e03ffa15 	stw	zero,-24(fp)
   837a0:	00001706 	br	83800 <vid_print_string_alpha+0x184>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
   837a4:	e0bfff17 	ldw	r2,-4(fp)
   837a8:	10bfffe0 	cmpeqi	r2,r2,-1
   837ac:	10000b1e 	bne	r2,zero,837dc <vid_print_string_alpha+0x160>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
   837b0:	e0bfff17 	ldw	r2,-4(fp)
   837b4:	d8800015 	stw	r2,0(sp)
   837b8:	e0800217 	ldw	r2,8(fp)
   837bc:	d8800115 	stw	r2,4(sp)
   837c0:	e0800317 	ldw	r2,12(fp)
   837c4:	d8800215 	stw	r2,8(sp)
   837c8:	e13ffc17 	ldw	r4,-16(fp)
   837cc:	e17ffd17 	ldw	r5,-12(fp)
   837d0:	e1bfff17 	ldw	r6,-4(fp)
   837d4:	01c00b44 	movi	r7,45
   837d8:	0083de40 	call	83de4 <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
   837dc:	e0800217 	ldw	r2,8(fp)
   837e0:	10806004 	addi	r2,r2,384
   837e4:	10c00417 	ldw	r3,16(r2)
   837e8:	e0bffc17 	ldw	r2,-16(fp)
   837ec:	1885883a 	add	r2,r3,r2
   837f0:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
   837f4:	e0bffa17 	ldw	r2,-24(fp)
   837f8:	10800044 	addi	r2,r2,1
   837fc:	e0bffa15 	stw	r2,-24(fp)
   83800:	e0bffa17 	ldw	r2,-24(fp)
   83804:	10800090 	cmplti	r2,r2,2
   83808:	103fe61e 	bne	r2,zero,837a4 <__alt_data_end+0xfffcb534>
   8380c:	00002106 	br	83894 <vid_print_string_alpha+0x218>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
   83810:	e0bff917 	ldw	r2,-28(fp)
   83814:	e0c00417 	ldw	r3,16(fp)
   83818:	1885883a 	add	r2,r3,r2
   8381c:	10800003 	ldbu	r2,0(r2)
   83820:	10803fcc 	andi	r2,r2,255
   83824:	1080201c 	xori	r2,r2,128
   83828:	10bfe004 	addi	r2,r2,-128
   8382c:	e0ffff17 	ldw	r3,-4(fp)
   83830:	d8c00015 	stw	r3,0(sp)
   83834:	e0c00217 	ldw	r3,8(fp)
   83838:	d8c00115 	stw	r3,4(sp)
   8383c:	e0c00317 	ldw	r3,12(fp)
   83840:	d8c00215 	stw	r3,8(sp)
   83844:	e13ffc17 	ldw	r4,-16(fp)
   83848:	e17ffd17 	ldw	r5,-12(fp)
   8384c:	e1bffe17 	ldw	r6,-8(fp)
   83850:	100f883a 	mov	r7,r2
   83854:	0083de40 	call	83de4 <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
   83858:	e0bff917 	ldw	r2,-28(fp)
   8385c:	e0c00417 	ldw	r3,16(fp)
   83860:	1885883a 	add	r2,r3,r2
   83864:	10800003 	ldbu	r2,0(r2)
   83868:	10803fcc 	andi	r2,r2,255
   8386c:	1080201c 	xori	r2,r2,128
   83870:	10bfe004 	addi	r2,r2,-128
   83874:	1004917a 	slli	r2,r2,5
   83878:	10bef804 	addi	r2,r2,-1056
   8387c:	e0c00217 	ldw	r3,8(fp)
   83880:	1885883a 	add	r2,r3,r2
   83884:	10c00417 	ldw	r3,16(r2)
   83888:	e0bffc17 	ldw	r2,-16(fp)
   8388c:	1885883a 	add	r2,r3,r2
   83890:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
   83894:	e0bff917 	ldw	r2,-28(fp)
   83898:	10800044 	addi	r2,r2,1
   8389c:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
   838a0:	e0bff917 	ldw	r2,-28(fp)
   838a4:	e0c00417 	ldw	r3,16(fp)
   838a8:	1885883a 	add	r2,r3,r2
   838ac:	10800003 	ldbu	r2,0(r2)
   838b0:	10803fcc 	andi	r2,r2,255
   838b4:	1080201c 	xori	r2,r2,128
   838b8:	10bfe004 	addi	r2,r2,-128
   838bc:	103f7b1e 	bne	r2,zero,836ac <__alt_data_end+0xfffcb43c>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
   838c0:	0005883a 	mov	r2,zero
}
   838c4:	e037883a 	mov	sp,fp
   838c8:	dfc00117 	ldw	ra,4(sp)
   838cc:	df000017 	ldw	fp,0(sp)
   838d0:	dec00204 	addi	sp,sp,8
   838d4:	f800283a 	ret

000838d8 <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

__inline__ int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
   838d8:	defff904 	addi	sp,sp,-28
   838dc:	df000615 	stw	fp,24(sp)
   838e0:	df000604 	addi	fp,sp,24
   838e4:	e13ffc15 	stw	r4,-16(fp)
   838e8:	e17ffd15 	stw	r5,-12(fp)
   838ec:	e1bffe15 	stw	r6,-8(fp)
   838f0:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
   838f4:	e03ffb0d 	sth	zero,-20(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
   838f8:	e0bffc17 	ldw	r2,-16(fp)
   838fc:	10800418 	cmpnei	r2,r2,16
   83900:	1000221e 	bne	r2,zero,8398c <seperate_color_channels+0xb4>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
   83904:	e0bffd17 	ldw	r2,-12(fp)
   83908:	10c00044 	addi	r3,r2,1
   8390c:	e0fffd15 	stw	r3,-12(fp)
   83910:	10800003 	ldbu	r2,0(r2)
   83914:	10803fcc 	andi	r2,r2,255
   83918:	e0bffb0d 	sth	r2,-20(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
   8391c:	e0bffd17 	ldw	r2,-12(fp)
   83920:	10800003 	ldbu	r2,0(r2)
   83924:	10803fcc 	andi	r2,r2,255
   83928:	1004923a 	slli	r2,r2,8
   8392c:	1007883a 	mov	r3,r2
   83930:	e0bffb0b 	ldhu	r2,-20(fp)
   83934:	1885883a 	add	r2,r3,r2
   83938:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F; 
   8393c:	e0bffb0b 	ldhu	r2,-20(fp)
   83940:	108007cc 	andi	r2,r2,31
   83944:	1007883a 	mov	r3,r2
   83948:	e0800117 	ldw	r2,4(fp)
   8394c:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
   83950:	e0bffb0b 	ldhu	r2,-20(fp)
   83954:	1004d17a 	srli	r2,r2,5
   83958:	10800fcc 	andi	r2,r2,63
   8395c:	1007883a 	mov	r3,r2
   83960:	e0bfff17 	ldw	r2,-4(fp)
   83964:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
   83968:	e0bffb0b 	ldhu	r2,-20(fp)
   8396c:	1004d2fa 	srli	r2,r2,11
   83970:	108007cc 	andi	r2,r2,31
   83974:	1007883a 	mov	r3,r2
   83978:	e0bffe17 	ldw	r2,-8(fp)
   8397c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   83980:	00800044 	movi	r2,1
   83984:	e0bffa15 	stw	r2,-24(fp)
   83988:	00002006 	br	83a0c <seperate_color_channels+0x134>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
   8398c:	e0bffc17 	ldw	r2,-16(fp)
   83990:	10800620 	cmpeqi	r2,r2,24
   83994:	1000031e 	bne	r2,zero,839a4 <seperate_color_channels+0xcc>
   83998:	e0bffc17 	ldw	r2,-16(fp)
   8399c:	10800818 	cmpnei	r2,r2,32
   839a0:	1000131e 	bne	r2,zero,839f0 <seperate_color_channels+0x118>
  {
    *blue = *color++;
   839a4:	e0bffd17 	ldw	r2,-12(fp)
   839a8:	10c00044 	addi	r3,r2,1
   839ac:	e0fffd15 	stw	r3,-12(fp)
   839b0:	10c00003 	ldbu	r3,0(r2)
   839b4:	e0800117 	ldw	r2,4(fp)
   839b8:	10c00005 	stb	r3,0(r2)
    *green = *color++;
   839bc:	e0bffd17 	ldw	r2,-12(fp)
   839c0:	10c00044 	addi	r3,r2,1
   839c4:	e0fffd15 	stw	r3,-12(fp)
   839c8:	10c00003 	ldbu	r3,0(r2)
   839cc:	e0bfff17 	ldw	r2,-4(fp)
   839d0:	10c00005 	stb	r3,0(r2)
    *red = *color;   
   839d4:	e0bffd17 	ldw	r2,-12(fp)
   839d8:	10c00003 	ldbu	r3,0(r2)
   839dc:	e0bffe17 	ldw	r2,-8(fp)
   839e0:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   839e4:	00800044 	movi	r2,1
   839e8:	e0bffa15 	stw	r2,-24(fp)
   839ec:	00000706 	br	83a0c <seperate_color_channels+0x134>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
   839f0:	e0bffe17 	ldw	r2,-8(fp)
   839f4:	10000005 	stb	zero,0(r2)
    *green = 0;
   839f8:	e0bfff17 	ldw	r2,-4(fp)
   839fc:	10000005 	stb	zero,0(r2)
    *blue = 0;    
   83a00:	e0800117 	ldw	r2,4(fp)
   83a04:	10000005 	stb	zero,0(r2)
    return_value = 0;    
   83a08:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
   83a0c:	e0bffa17 	ldw	r2,-24(fp)
}
   83a10:	e037883a 	mov	sp,fp
   83a14:	df000017 	ldw	fp,0(sp)
   83a18:	dec00104 	addi	sp,sp,4
   83a1c:	f800283a 	ret

00083a20 <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

__inline__ int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
   83a20:	defff904 	addi	sp,sp,-28
   83a24:	df000615 	stw	fp,24(sp)
   83a28:	df000604 	addi	fp,sp,24
   83a2c:	e13ffc15 	stw	r4,-16(fp)
   83a30:	2809883a 	mov	r4,r5
   83a34:	3007883a 	mov	r3,r6
   83a38:	3805883a 	mov	r2,r7
   83a3c:	e13ffd05 	stb	r4,-12(fp)
   83a40:	e0fffe05 	stb	r3,-8(fp)
   83a44:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
   83a48:	e0bffc17 	ldw	r2,-16(fp)
   83a4c:	10800418 	cmpnei	r2,r2,16
   83a50:	1000191e 	bne	r2,zero,83ab8 <merge_color_channels+0x98>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
   83a54:	e0bfff03 	ldbu	r2,-4(fp)
   83a58:	108007cc 	andi	r2,r2,31
   83a5c:	1007883a 	mov	r3,r2
   83a60:	e0bffe03 	ldbu	r2,-8(fp)
   83a64:	10800fcc 	andi	r2,r2,63
   83a68:	1004917a 	slli	r2,r2,5
   83a6c:	1884b03a 	or	r2,r3,r2
   83a70:	1007883a 	mov	r3,r2
   83a74:	e0bffd03 	ldbu	r2,-12(fp)
   83a78:	100492fa 	slli	r2,r2,11
   83a7c:	1884b03a 	or	r2,r3,r2
   83a80:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
   83a84:	e0800117 	ldw	r2,4(fp)
   83a88:	10c00044 	addi	r3,r2,1
   83a8c:	e0c00115 	stw	r3,4(fp)
   83a90:	e0fffb0b 	ldhu	r3,-20(fp)
   83a94:	10c00005 	stb	r3,0(r2)
    *color = (temp_color >> 8) & 0xFF;
   83a98:	e0bffb0b 	ldhu	r2,-20(fp)
   83a9c:	1004d23a 	srli	r2,r2,8
   83aa0:	1007883a 	mov	r3,r2
   83aa4:	e0800117 	ldw	r2,4(fp)
   83aa8:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   83aac:	00800044 	movi	r2,1
   83ab0:	e0bffa15 	stw	r2,-24(fp)
   83ab4:	00002106 	br	83b3c <merge_color_channels+0x11c>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
   83ab8:	e0bffc17 	ldw	r2,-16(fp)
   83abc:	10800620 	cmpeqi	r2,r2,24
   83ac0:	1000031e 	bne	r2,zero,83ad0 <merge_color_channels+0xb0>
   83ac4:	e0bffc17 	ldw	r2,-16(fp)
   83ac8:	10800818 	cmpnei	r2,r2,32
   83acc:	1000101e 	bne	r2,zero,83b10 <merge_color_channels+0xf0>
  {
    *color++ = blue;
   83ad0:	e0800117 	ldw	r2,4(fp)
   83ad4:	10c00044 	addi	r3,r2,1
   83ad8:	e0c00115 	stw	r3,4(fp)
   83adc:	e0ffff03 	ldbu	r3,-4(fp)
   83ae0:	10c00005 	stb	r3,0(r2)
    *color++ = green;
   83ae4:	e0800117 	ldw	r2,4(fp)
   83ae8:	10c00044 	addi	r3,r2,1
   83aec:	e0c00115 	stw	r3,4(fp)
   83af0:	e0fffe03 	ldbu	r3,-8(fp)
   83af4:	10c00005 	stb	r3,0(r2)
    *color = red;
   83af8:	e0800117 	ldw	r2,4(fp)
   83afc:	e0fffd03 	ldbu	r3,-12(fp)
   83b00:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   83b04:	00800044 	movi	r2,1
   83b08:	e0bffa15 	stw	r2,-24(fp)
   83b0c:	00000b06 	br	83b3c <merge_color_channels+0x11c>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
   83b10:	e0800117 	ldw	r2,4(fp)
   83b14:	10c00044 	addi	r3,r2,1
   83b18:	e0c00115 	stw	r3,4(fp)
   83b1c:	10000005 	stb	zero,0(r2)
    *color++ = 0;
   83b20:	e0800117 	ldw	r2,4(fp)
   83b24:	10c00044 	addi	r3,r2,1
   83b28:	e0c00115 	stw	r3,4(fp)
   83b2c:	10000005 	stb	zero,0(r2)
    *color = 0;
   83b30:	e0800117 	ldw	r2,4(fp)
   83b34:	10000005 	stb	zero,0(r2)
    return_value = 0;    
   83b38:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;  
   83b3c:	e0bffa17 	ldw	r2,-24(fp)
}
   83b40:	e037883a 	mov	sp,fp
   83b44:	df000017 	ldw	fp,0(sp)
   83b48:	dec00104 	addi	sp,sp,4
   83b4c:	f800283a 	ret

00083b50 <read_from_frame>:
*           needed to calculate the new one.
*
******************************************************************/

__inline__ int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
   83b50:	defffa04 	addi	sp,sp,-24
   83b54:	dfc00515 	stw	ra,20(sp)
   83b58:	df000415 	stw	fp,16(sp)
   83b5c:	df000404 	addi	fp,sp,16
   83b60:	e13ffc15 	stw	r4,-16(fp)
   83b64:	e17ffd15 	stw	r5,-12(fp)
   83b68:	e1bffe15 	stw	r6,-8(fp)
   83b6c:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("read_from_frame is not implemented!\r\n");
   83b70:	010002b4 	movhi	r4,10
   83b74:	211afb04 	addi	r4,r4,27628
   83b78:	008a39c0 	call	8a39c <puts>
    return_value = 0; 
  }

  return return_value;
#endif
}
   83b7c:	e037883a 	mov	sp,fp
   83b80:	dfc00117 	ldw	ra,4(sp)
   83b84:	df000017 	ldw	fp,0(sp)
   83b88:	dec00204 	addi	sp,sp,8
   83b8c:	f800283a 	ret

00083b90 <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

__inline__ int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
   83b90:	defff304 	addi	sp,sp,-52
   83b94:	dfc00c15 	stw	ra,48(sp)
   83b98:	df000b15 	stw	fp,44(sp)
   83b9c:	df000b04 	addi	fp,sp,44
   83ba0:	e13ffc15 	stw	r4,-16(fp)
   83ba4:	e17ffd15 	stw	r5,-12(fp)
   83ba8:	e1bffe15 	stw	r6,-8(fp)
   83bac:	3805883a 	mov	r2,r7
   83bb0:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
   83bb4:	e0bffe17 	ldw	r2,-8(fp)
   83bb8:	10bfffd8 	cmpnei	r2,r2,-1
   83bbc:	10000c1e 	bne	r2,zero,83bf0 <alpha_blending+0x60>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
   83bc0:	e0fffb04 	addi	r3,fp,-20
   83bc4:	e0bffb44 	addi	r2,fp,-19
   83bc8:	e13ffb84 	addi	r4,fp,-18
   83bcc:	d9000015 	stw	r4,0(sp)
   83bd0:	e1000517 	ldw	r4,20(fp)
   83bd4:	d9000115 	stw	r4,4(sp)
   83bd8:	e13ffc17 	ldw	r4,-16(fp)
   83bdc:	e17ffd17 	ldw	r5,-12(fp)
   83be0:	180d883a 	mov	r6,r3
   83be4:	100f883a 	mov	r7,r2
   83be8:	0083b500 	call	83b50 <read_from_frame>
   83bec:	00000a06 	br	83c18 <alpha_blending+0x88>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
   83bf0:	e0800517 	ldw	r2,20(fp)
   83bf4:	11000017 	ldw	r4,0(r2)
   83bf8:	e17ffe04 	addi	r5,fp,-8
   83bfc:	e0fffb04 	addi	r3,fp,-20
   83c00:	e0bffb44 	addi	r2,fp,-19
   83c04:	e1bffb84 	addi	r6,fp,-18
   83c08:	d9800015 	stw	r6,0(sp)
   83c0c:	180d883a 	mov	r6,r3
   83c10:	100f883a 	mov	r7,r2
   83c14:	00838d80 	call	838d8 <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
   83c18:	e0800217 	ldw	r2,8(fp)
   83c1c:	10800003 	ldbu	r2,0(r2)
   83c20:	10c03fcc 	andi	r3,r2,255
   83c24:	e0bfff03 	ldbu	r2,-4(fp)
   83c28:	1887383a 	mul	r3,r3,r2
   83c2c:	e0bffb03 	ldbu	r2,-20(fp)
   83c30:	11003fcc 	andi	r4,r2,255
   83c34:	e0bfff03 	ldbu	r2,-4(fp)
   83c38:	01403fc4 	movi	r5,255
   83c3c:	2885c83a 	sub	r2,r5,r2
   83c40:	2085383a 	mul	r2,r4,r2
   83c44:	1885883a 	add	r2,r3,r2
   83c48:	1009883a 	mov	r4,r2
   83c4c:	01403fc4 	movi	r5,255
   83c50:	00877440 	call	87744 <__divsi3>
   83c54:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
   83c58:	e0800317 	ldw	r2,12(fp)
   83c5c:	10800003 	ldbu	r2,0(r2)
   83c60:	10c03fcc 	andi	r3,r2,255
   83c64:	e0bfff03 	ldbu	r2,-4(fp)
   83c68:	1887383a 	mul	r3,r3,r2
   83c6c:	e0bffb43 	ldbu	r2,-19(fp)
   83c70:	11003fcc 	andi	r4,r2,255
   83c74:	e0bfff03 	ldbu	r2,-4(fp)
   83c78:	01403fc4 	movi	r5,255
   83c7c:	2885c83a 	sub	r2,r5,r2
   83c80:	2085383a 	mul	r2,r4,r2
   83c84:	1885883a 	add	r2,r3,r2
   83c88:	1009883a 	mov	r4,r2
   83c8c:	01403fc4 	movi	r5,255
   83c90:	00877440 	call	87744 <__divsi3>
   83c94:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
   83c98:	e0800417 	ldw	r2,16(fp)
   83c9c:	10800003 	ldbu	r2,0(r2)
   83ca0:	10c03fcc 	andi	r3,r2,255
   83ca4:	e0bfff03 	ldbu	r2,-4(fp)
   83ca8:	1887383a 	mul	r3,r3,r2
   83cac:	e0bffb83 	ldbu	r2,-18(fp)
   83cb0:	11003fcc 	andi	r4,r2,255
   83cb4:	e0bfff03 	ldbu	r2,-4(fp)
   83cb8:	01403fc4 	movi	r5,255
   83cbc:	2885c83a 	sub	r2,r5,r2
   83cc0:	2085383a 	mul	r2,r4,r2
   83cc4:	1885883a 	add	r2,r3,r2
   83cc8:	1009883a 	mov	r4,r2
   83ccc:	01403fc4 	movi	r5,255
   83cd0:	00877440 	call	87744 <__divsi3>
   83cd4:	e0bffa15 	stw	r2,-24(fp)
  

  if(display->color_depth == 16)
   83cd8:	e0800517 	ldw	r2,20(fp)
   83cdc:	10800017 	ldw	r2,0(r2)
   83ce0:	10800418 	cmpnei	r2,r2,16
   83ce4:	1000181e 	bne	r2,zero,83d48 <alpha_blending+0x1b8>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
   83ce8:	e0bff817 	ldw	r2,-32(fp)
   83cec:	10c00830 	cmpltui	r3,r2,32
   83cf0:	1800011e 	bne	r3,zero,83cf8 <alpha_blending+0x168>
   83cf4:	008007c4 	movi	r2,31
   83cf8:	1007883a 	mov	r3,r2
   83cfc:	e0800217 	ldw	r2,8(fp)
   83d00:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
   83d04:	e0bff917 	ldw	r2,-28(fp)
   83d08:	10c01030 	cmpltui	r3,r2,64
   83d0c:	1800011e 	bne	r3,zero,83d14 <alpha_blending+0x184>
   83d10:	00800fc4 	movi	r2,63
   83d14:	1007883a 	mov	r3,r2
   83d18:	e0800317 	ldw	r2,12(fp)
   83d1c:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
   83d20:	e0bffa17 	ldw	r2,-24(fp)
   83d24:	10c00830 	cmpltui	r3,r2,32
   83d28:	1800011e 	bne	r3,zero,83d30 <alpha_blending+0x1a0>
   83d2c:	008007c4 	movi	r2,31
   83d30:	1007883a 	mov	r3,r2
   83d34:	e0800417 	ldw	r2,16(fp)
   83d38:	10c00005 	stb	r3,0(r2)
    return_value = 1;        
   83d3c:	00800044 	movi	r2,1
   83d40:	e0bff715 	stw	r2,-36(fp)
   83d44:	00002106 	br	83dcc <alpha_blending+0x23c>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
   83d48:	e0800517 	ldw	r2,20(fp)
   83d4c:	10800017 	ldw	r2,0(r2)
   83d50:	10800620 	cmpeqi	r2,r2,24
   83d54:	1000041e 	bne	r2,zero,83d68 <alpha_blending+0x1d8>
   83d58:	e0800517 	ldw	r2,20(fp)
   83d5c:	10800017 	ldw	r2,0(r2)
   83d60:	10800818 	cmpnei	r2,r2,32
   83d64:	1000181e 	bne	r2,zero,83dc8 <alpha_blending+0x238>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
   83d68:	e0bff817 	ldw	r2,-32(fp)
   83d6c:	10c04030 	cmpltui	r3,r2,256
   83d70:	1800011e 	bne	r3,zero,83d78 <alpha_blending+0x1e8>
   83d74:	00803fc4 	movi	r2,255
   83d78:	1007883a 	mov	r3,r2
   83d7c:	e0800217 	ldw	r2,8(fp)
   83d80:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
   83d84:	e0bff917 	ldw	r2,-28(fp)
   83d88:	10c04030 	cmpltui	r3,r2,256
   83d8c:	1800011e 	bne	r3,zero,83d94 <alpha_blending+0x204>
   83d90:	00803fc4 	movi	r2,255
   83d94:	1007883a 	mov	r3,r2
   83d98:	e0800317 	ldw	r2,12(fp)
   83d9c:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
   83da0:	e0bffa17 	ldw	r2,-24(fp)
   83da4:	10c04030 	cmpltui	r3,r2,256
   83da8:	1800011e 	bne	r3,zero,83db0 <alpha_blending+0x220>
   83dac:	00803fc4 	movi	r2,255
   83db0:	1007883a 	mov	r3,r2
   83db4:	e0800417 	ldw	r2,16(fp)
   83db8:	10c00005 	stb	r3,0(r2)
    return_value = 1;            
   83dbc:	00800044 	movi	r2,1
   83dc0:	e0bff715 	stw	r2,-36(fp)
   83dc4:	00000106 	br	83dcc <alpha_blending+0x23c>
  }
  else
  {
    return_value = 0;     
   83dc8:	e03ff715 	stw	zero,-36(fp)
  }  
 
  return return_value;
   83dcc:	e0bff717 	ldw	r2,-36(fp)
} 
   83dd0:	e037883a 	mov	sp,fp
   83dd4:	dfc00117 	ldw	ra,4(sp)
   83dd8:	df000017 	ldw	fp,0(sp)
   83ddc:	dec00204 	addi	sp,sp,8
   83de0:	f800283a 	ret

00083de4 <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
   83de4:	defff004 	addi	sp,sp,-64
   83de8:	dfc00f15 	stw	ra,60(sp)
   83dec:	df000e15 	stw	fp,56(sp)
   83df0:	df000e04 	addi	fp,sp,56
   83df4:	e13ffc15 	stw	r4,-16(fp)
   83df8:	e17ffd15 	stw	r5,-12(fp)
   83dfc:	e1bffe15 	stw	r6,-8(fp)
   83e00:	3805883a 	mov	r2,r7
   83e04:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
   83e08:	e0bfff07 	ldb	r2,-4(fp)
   83e0c:	1004917a 	slli	r2,r2,5
   83e10:	10bef804 	addi	r2,r2,-1056
   83e14:	e0c00317 	ldw	r3,12(fp)
   83e18:	1885883a 	add	r2,r3,r2
   83e1c:	10800617 	ldw	r2,24(r2)
   83e20:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
   83e24:	e0800417 	ldw	r2,16(fp)
   83e28:	11000017 	ldw	r4,0(r2)
   83e2c:	e17ffe04 	addi	r5,fp,-8
   83e30:	e0fff904 	addi	r3,fp,-28
   83e34:	e0bff984 	addi	r2,fp,-26
   83e38:	e1bff944 	addi	r6,fp,-27
   83e3c:	d9800015 	stw	r6,0(sp)
   83e40:	180d883a 	mov	r6,r3
   83e44:	100f883a 	mov	r7,r2
   83e48:	00838d80 	call	838d8 <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
   83e4c:	e03ff615 	stw	zero,-40(fp)
   83e50:	00004606 	br	83f6c <vid_print_char_alpha+0x188>
    for (j = 0; j < font[character-33].bounds_width; j++) {
   83e54:	e03ff715 	stw	zero,-36(fp)
   83e58:	00003906 	br	83f40 <vid_print_char_alpha+0x15c>
      red = original_red;
   83e5c:	e0bff903 	ldbu	r2,-28(fp)
   83e60:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
   83e64:	e0bff983 	ldbu	r2,-26(fp)
   83e68:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
   83e6c:	e0bff943 	ldbu	r2,-27(fp)
   83e70:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
   83e74:	e0fffc17 	ldw	r3,-16(fp)
   83e78:	e0bff717 	ldw	r2,-36(fp)
   83e7c:	1889883a 	add	r4,r3,r2
   83e80:	e0fffd17 	ldw	r3,-12(fp)
   83e84:	e0bff617 	ldw	r2,-40(fp)
   83e88:	1887883a 	add	r3,r3,r2
   83e8c:	e0bff817 	ldw	r2,-32(fp)
   83e90:	10800003 	ldbu	r2,0(r2)
   83e94:	10803fcc 	andi	r2,r2,255
   83e98:	e17ff9c4 	addi	r5,fp,-25
   83e9c:	d9400015 	stw	r5,0(sp)
   83ea0:	e17ffa04 	addi	r5,fp,-24
   83ea4:	d9400115 	stw	r5,4(sp)
   83ea8:	e17ffa44 	addi	r5,fp,-23
   83eac:	d9400215 	stw	r5,8(sp)
   83eb0:	e1400417 	ldw	r5,16(fp)
   83eb4:	d9400315 	stw	r5,12(sp)
   83eb8:	180b883a 	mov	r5,r3
   83ebc:	e1800217 	ldw	r6,8(fp)
   83ec0:	100f883a 	mov	r7,r2
   83ec4:	0083b900 	call	83b90 <alpha_blending>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
   83ec8:	e0800417 	ldw	r2,16(fp)
   83ecc:	11000017 	ldw	r4,0(r2)
   83ed0:	e0bff9c3 	ldbu	r2,-25(fp)
   83ed4:	11403fcc 	andi	r5,r2,255
   83ed8:	e0bffa03 	ldbu	r2,-24(fp)
   83edc:	10c03fcc 	andi	r3,r2,255
   83ee0:	e0bffa43 	ldbu	r2,-23(fp)
   83ee4:	10803fcc 	andi	r2,r2,255
   83ee8:	e1bffb04 	addi	r6,fp,-20
   83eec:	d9800015 	stw	r6,0(sp)
   83ef0:	180d883a 	mov	r6,r3
   83ef4:	100f883a 	mov	r7,r2
   83ef8:	0083a200 	call	83a20 <merge_color_channels>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
   83efc:	e0fffc17 	ldw	r3,-16(fp)
   83f00:	e0bff717 	ldw	r2,-36(fp)
   83f04:	1889883a 	add	r4,r3,r2
   83f08:	e0fffd17 	ldw	r3,-12(fp)
   83f0c:	e0bff617 	ldw	r2,-40(fp)
   83f10:	1887883a 	add	r3,r3,r2
   83f14:	e0bffb17 	ldw	r2,-20(fp)
   83f18:	180b883a 	mov	r5,r3
   83f1c:	100d883a 	mov	r6,r2
   83f20:	e1c00417 	ldw	r7,16(fp)
   83f24:	0081a740 	call	81a74 <vid_set_pixel>

      alpha++;
   83f28:	e0bff817 	ldw	r2,-32(fp)
   83f2c:	10800044 	addi	r2,r2,1
   83f30:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
   83f34:	e0bff717 	ldw	r2,-36(fp)
   83f38:	10800044 	addi	r2,r2,1
   83f3c:	e0bff715 	stw	r2,-36(fp)
   83f40:	e0fff717 	ldw	r3,-36(fp)
   83f44:	e0bfff07 	ldb	r2,-4(fp)
   83f48:	1004917a 	slli	r2,r2,5
   83f4c:	10bef804 	addi	r2,r2,-1056
   83f50:	e1000317 	ldw	r4,12(fp)
   83f54:	2085883a 	add	r2,r4,r2
   83f58:	10800417 	ldw	r2,16(r2)
   83f5c:	18bfbf36 	bltu	r3,r2,83e5c <__alt_data_end+0xfffcbbec>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
   83f60:	e0bff617 	ldw	r2,-40(fp)
   83f64:	10800044 	addi	r2,r2,1
   83f68:	e0bff615 	stw	r2,-40(fp)
   83f6c:	e0fff617 	ldw	r3,-40(fp)
   83f70:	e0bfff07 	ldb	r2,-4(fp)
   83f74:	1004917a 	slli	r2,r2,5
   83f78:	10bef804 	addi	r2,r2,-1056
   83f7c:	e1000317 	ldw	r4,12(fp)
   83f80:	2085883a 	add	r2,r4,r2
   83f84:	10800517 	ldw	r2,20(r2)
   83f88:	18bfb236 	bltu	r3,r2,83e54 <__alt_data_end+0xfffcbbe4>

      alpha++;
    }
  }

  return(0);
   83f8c:	0005883a 	mov	r2,zero
}
   83f90:	e037883a 	mov	sp,fp
   83f94:	dfc00117 	ldw	ra,4(sp)
   83f98:	df000017 	ldw	fp,0(sp)
   83f9c:	dec00204 	addi	sp,sp,8
   83fa0:	f800283a 	ret

00083fa4 <vid_string_pixel_length_alpha>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
   83fa4:	defffb04 	addi	sp,sp,-20
   83fa8:	df000415 	stw	fp,16(sp)
   83fac:	df000404 	addi	fp,sp,16
   83fb0:	e13ffe15 	stw	r4,-8(fp)
   83fb4:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
   83fb8:	e03ffc15 	stw	zero,-16(fp)
  int length = 0;
   83fbc:	e03ffd15 	stw	zero,-12(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
   83fc0:	e03ffc15 	stw	zero,-16(fp)
   83fc4:	00002206 	br	84050 <vid_string_pixel_length_alpha+0xac>
  {
    if( string[i] == ' ' )
   83fc8:	e0bffc17 	ldw	r2,-16(fp)
   83fcc:	e0ffff17 	ldw	r3,-4(fp)
   83fd0:	1885883a 	add	r2,r3,r2
   83fd4:	10800003 	ldbu	r2,0(r2)
   83fd8:	10803fcc 	andi	r2,r2,255
   83fdc:	1080201c 	xori	r2,r2,128
   83fe0:	10bfe004 	addi	r2,r2,-128
   83fe4:	10800818 	cmpnei	r2,r2,32
   83fe8:	1000071e 	bne	r2,zero,84008 <vid_string_pixel_length_alpha+0x64>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
   83fec:	e0bffe17 	ldw	r2,-8(fp)
   83ff0:	10806004 	addi	r2,r2,384
   83ff4:	10c00417 	ldw	r3,16(r2)
   83ff8:	e0bffd17 	ldw	r2,-12(fp)
   83ffc:	1885883a 	add	r2,r3,r2
   84000:	e0bffd15 	stw	r2,-12(fp)
   84004:	00000f06 	br	84044 <vid_string_pixel_length_alpha+0xa0>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
   84008:	e0bffc17 	ldw	r2,-16(fp)
   8400c:	e0ffff17 	ldw	r3,-4(fp)
   84010:	1885883a 	add	r2,r3,r2
   84014:	10800003 	ldbu	r2,0(r2)
   84018:	10803fcc 	andi	r2,r2,255
   8401c:	1080201c 	xori	r2,r2,128
   84020:	10bfe004 	addi	r2,r2,-128
   84024:	1004917a 	slli	r2,r2,5
   84028:	10bef804 	addi	r2,r2,-1056
   8402c:	e0fffe17 	ldw	r3,-8(fp)
   84030:	1885883a 	add	r2,r3,r2
   84034:	10c00417 	ldw	r3,16(r2)
   84038:	e0bffd17 	ldw	r2,-12(fp)
   8403c:	1885883a 	add	r2,r3,r2
   84040:	e0bffd15 	stw	r2,-12(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
   84044:	e0bffc17 	ldw	r2,-16(fp)
   84048:	10800044 	addi	r2,r2,1
   8404c:	e0bffc15 	stw	r2,-16(fp)
   84050:	e0bffc17 	ldw	r2,-16(fp)
   84054:	e0ffff17 	ldw	r3,-4(fp)
   84058:	1885883a 	add	r2,r3,r2
   8405c:	10800003 	ldbu	r2,0(r2)
   84060:	10803fcc 	andi	r2,r2,255
   84064:	1080201c 	xori	r2,r2,128
   84068:	10bfe004 	addi	r2,r2,-128
   8406c:	103fd61e 	bne	r2,zero,83fc8 <__alt_data_end+0xfffcbd58>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
   84070:	e0bffd17 	ldw	r2,-12(fp)
}
   84074:	e037883a 	mov	sp,fp
   84078:	df000017 	ldw	fp,0(sp)
   8407c:	dec00104 	addi	sp,sp,4
   84080:	f800283a 	ret

00084084 <GUI_ShowWelcome>:
    RECT rcPaint;
    PALETTE_INFO szPalette[BTN_NUM];
}DESK_INFO;


void GUI_ShowWelcome(alt_video_display *pDisplay){
   84084:	defff804 	addi	sp,sp,-32
   84088:	dfc00715 	stw	ra,28(sp)
   8408c:	df000615 	stw	fp,24(sp)
   84090:	df000604 	addi	fp,sp,24
   84094:	e13fff15 	stw	r4,-4(fp)
	int x, y;


	x = pDisplay->width / 2 - 60;
   84098:	e0bfff17 	ldw	r2,-4(fp)
   8409c:	10800117 	ldw	r2,4(r2)
   840a0:	1006d7fa 	srli	r3,r2,31
   840a4:	1885883a 	add	r2,r3,r2
   840a8:	1005d07a 	srai	r2,r2,1
   840ac:	10bff104 	addi	r2,r2,-60
   840b0:	e0bffd15 	stw	r2,-12(fp)
	y = pDisplay->height / 2 - 10;
   840b4:	e0bfff17 	ldw	r2,-4(fp)
   840b8:	10800217 	ldw	r2,8(r2)
   840bc:	1006d7fa 	srli	r3,r2,31
   840c0:	1885883a 	add	r2,r3,r2
   840c4:	1005d07a 	srai	r2,r2,1
   840c8:	10bffd84 	addi	r2,r2,-10
   840cc:	e0bffe15 	stw	r2,-8(fp)

	vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
   840d0:	008002b4 	movhi	r2,10
   840d4:	109bf804 	addi	r2,r2,28640
   840d8:	d8800015 	stw	r2,0(sp)
   840dc:	e0bfff17 	ldw	r2,-4(fp)
   840e0:	d8800115 	stw	r2,4(sp)
   840e4:	008002b4 	movhi	r2,10
   840e8:	109b0504 	addi	r2,r2,27668
   840ec:	d8800215 	stw	r2,8(sp)
   840f0:	e13ffd17 	ldw	r4,-12(fp)
   840f4:	e17ffe17 	ldw	r5,-8(fp)
   840f8:	01803fc4 	movi	r6,255
   840fc:	000f883a 	mov	r7,zero
   84100:	008367c0 	call	8367c <vid_print_string_alpha>
	vid_print_string_alpha(x, y+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch Demo");
   84104:	e0bffe17 	ldw	r2,-8(fp)
   84108:	10800584 	addi	r2,r2,22
   8410c:	00c002b4 	movhi	r3,10
   84110:	18dbf804 	addi	r3,r3,28640
   84114:	d8c00015 	stw	r3,0(sp)
   84118:	e0ffff17 	ldw	r3,-4(fp)
   8411c:	d8c00115 	stw	r3,4(sp)
   84120:	00c002b4 	movhi	r3,10
   84124:	18db0704 	addi	r3,r3,27676
   84128:	d8c00215 	stw	r3,8(sp)
   8412c:	e13ffd17 	ldw	r4,-12(fp)
   84130:	100b883a 	mov	r5,r2
   84134:	01803fc4 	movi	r6,255
   84138:	000f883a 	mov	r7,zero
   8413c:	008367c0 	call	8367c <vid_print_string_alpha>



}
   84140:	e037883a 	mov	sp,fp
   84144:	dfc00117 	ldw	ra,4(sp)
   84148:	df000017 	ldw	fp,0(sp)
   8414c:	dec00204 	addi	sp,sp,8
   84150:	f800283a 	ret

00084154 <GUI_DeskInit>:

void GUI_DeskInit(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
   84154:	deffef04 	addi	sp,sp,-68
   84158:	dfc01015 	stw	ra,64(sp)
   8415c:	df000f15 	stw	fp,60(sp)
   84160:	df000f04 	addi	fp,sp,60
   84164:	e13ffe15 	stw	r4,-8(fp)
   84168:	e17fff15 	stw	r5,-4(fp)
    int i;
    RECT rc;
    const int BoxH = 40;
   8416c:	00800a04 	movi	r2,40
   84170:	e0bff315 	stw	r2,-52(fp)
    const int BoxW = 40;
   84174:	00800a04 	movi	r2,40
   84178:	e0bff415 	stw	r2,-48(fp)
    const int GapH = 5;
   8417c:	00800144 	movi	r2,5
   84180:	e0bff515 	stw	r2,-44(fp)
    const int DrawBorder = 2;
   84184:	00800084 	movi	r2,2
   84188:	e0bff615 	stw	r2,-40(fp)
    const int TextW = 0;
   8418c:	e03ff715 	stw	zero,-36(fp)
    const int ClearExtraW = 30;
   84190:	00800784 	movi	r2,30
   84194:	e0bff815 	stw	r2,-32(fp)
    int GapW;

    
    GapW = (pDisplay->width - TextW - ClearExtraW - (BTN_NUM*BoxW))/(BTN_NUM+1);
   84198:	e0bffe17 	ldw	r2,-8(fp)
   8419c:	10c00117 	ldw	r3,4(r2)
   841a0:	e0bff717 	ldw	r2,-36(fp)
   841a4:	1887c83a 	sub	r3,r3,r2
   841a8:	e0bff817 	ldw	r2,-32(fp)
   841ac:	1887c83a 	sub	r3,r3,r2
   841b0:	e0bff417 	ldw	r2,-48(fp)
   841b4:	10bffee4 	muli	r2,r2,-5
   841b8:	1885883a 	add	r2,r3,r2
   841bc:	1009883a 	mov	r4,r2
   841c0:	01400184 	movi	r5,6
   841c4:	00877440 	call	87744 <__divsi3>
   841c8:	e0bff915 	stw	r2,-28(fp)
    //printf("GapW=%d\r\n", GapW);
    rc.top = pDisplay->height - BoxH - GapH;
   841cc:	e0bffe17 	ldw	r2,-8(fp)
   841d0:	10c00217 	ldw	r3,8(r2)
   841d4:	e0bff317 	ldw	r2,-52(fp)
   841d8:	1887c83a 	sub	r3,r3,r2
   841dc:	e0bff517 	ldw	r2,-44(fp)
   841e0:	1885c83a 	sub	r2,r3,r2
   841e4:	e0bffc15 	stw	r2,-16(fp)
    rc.bottom = rc.top + BoxH;
   841e8:	e0fffc17 	ldw	r3,-16(fp)
   841ec:	e0bff317 	ldw	r2,-52(fp)
   841f0:	1885883a 	add	r2,r3,r2
   841f4:	e0bffd15 	stw	r2,-12(fp)
    rc.left = GapW + TextW + ClearExtraW;
   841f8:	e0fff917 	ldw	r3,-28(fp)
   841fc:	e0bff717 	ldw	r2,-36(fp)
   84200:	1887883a 	add	r3,r3,r2
   84204:	e0bff817 	ldw	r2,-32(fp)
   84208:	1885883a 	add	r2,r3,r2
   8420c:	e0bffa15 	stw	r2,-24(fp)
    rc.right = rc.left + BoxW;
   84210:	e0fffa17 	ldw	r3,-24(fp)
   84214:	e0bff417 	ldw	r2,-48(fp)
   84218:	1885883a 	add	r2,r3,r2
   8421c:	e0bffb15 	stw	r2,-20(fp)
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
   84220:	e0bfff17 	ldw	r2,-4(fp)
   84224:	10c00104 	addi	r3,r2,4
   84228:	e0bffe17 	ldw	r2,-8(fp)
   8422c:	11000117 	ldw	r4,4(r2)
   84230:	e0bff617 	ldw	r2,-40(fp)
   84234:	2085c83a 	sub	r2,r4,r2
   84238:	e17ffc17 	ldw	r5,-16(fp)
   8423c:	e13ff617 	ldw	r4,-40(fp)
   84240:	2909c83a 	sub	r4,r5,r4
   84244:	d9000015 	stw	r4,0(sp)
   84248:	1809883a 	mov	r4,r3
   8424c:	e17ff617 	ldw	r5,-40(fp)
   84250:	100d883a 	mov	r6,r2
   84254:	e1fff617 	ldw	r7,-40(fp)
   84258:	00802300 	call	80230 <RectSet>
    
    for(i=0;i<BTN_NUM;i++){
   8425c:	e03ff215 	stw	zero,-56(fp)
   84260:	00002206 	br	842ec <GUI_DeskInit+0x198>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
   84264:	e0bff217 	ldw	r2,-56(fp)
   84268:	10800044 	addi	r2,r2,1
   8426c:	10800524 	muli	r2,r2,20
   84270:	e0ffff17 	ldw	r3,-4(fp)
   84274:	1887883a 	add	r3,r3,r2
   84278:	e0bffa04 	addi	r2,fp,-24
   8427c:	1809883a 	mov	r4,r3
   84280:	100b883a 	mov	r5,r2
   84284:	008039c0 	call	8039c <RectCopy>
        pDeskInfo->szPalette[i].color = szPallete[i];
   84288:	00c002f4 	movhi	r3,11
   8428c:	18e2de04 	addi	r3,r3,-29832
   84290:	e0bff217 	ldw	r2,-56(fp)
   84294:	1085883a 	add	r2,r2,r2
   84298:	1085883a 	add	r2,r2,r2
   8429c:	1885883a 	add	r2,r3,r2
   842a0:	10800017 	ldw	r2,0(r2)
   842a4:	1007883a 	mov	r3,r2
   842a8:	e13fff17 	ldw	r4,-4(fp)
   842ac:	e0bff217 	ldw	r2,-56(fp)
   842b0:	10800524 	muli	r2,r2,20
   842b4:	2085883a 	add	r2,r4,r2
   842b8:	10800904 	addi	r2,r2,36
   842bc:	10c00015 	stw	r3,0(r2)
        RectOffset(&rc, BoxW+GapW, 0);
   842c0:	e0fff417 	ldw	r3,-48(fp)
   842c4:	e0bff917 	ldw	r2,-28(fp)
   842c8:	1885883a 	add	r2,r3,r2
   842cc:	e0fffa04 	addi	r3,fp,-24
   842d0:	1809883a 	mov	r4,r3
   842d4:	100b883a 	mov	r5,r2
   842d8:	000d883a 	mov	r6,zero
   842dc:	00803140 	call	80314 <RectOffset>
    rc.right = rc.left + BoxW;
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
    
    for(i=0;i<BTN_NUM;i++){
   842e0:	e0bff217 	ldw	r2,-56(fp)
   842e4:	10800044 	addi	r2,r2,1
   842e8:	e0bff215 	stw	r2,-56(fp)
   842ec:	e0bff217 	ldw	r2,-56(fp)
   842f0:	10800150 	cmplti	r2,r2,5
   842f4:	103fdb1e 	bne	r2,zero,84264 <__alt_data_end+0xfffcbff4>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
        pDeskInfo->szPalette[i].color = szPallete[i];
        RectOffset(&rc, BoxW+GapW, 0);
    }
    pDeskInfo->szPalette[BTN_CLEAR].rc.left -= ClearExtraW;
   842f8:	e0bfff17 	ldw	r2,-4(fp)
   842fc:	10c00517 	ldw	r3,20(r2)
   84300:	e0bff817 	ldw	r2,-32(fp)
   84304:	1887c83a 	sub	r3,r3,r2
   84308:	e0bfff17 	ldw	r2,-4(fp)
   8430c:	10c00515 	stw	r3,20(r2)
    pDeskInfo->Paint_Index = BTN_BLUE;
   84310:	e0bfff17 	ldw	r2,-4(fp)
   84314:	00c00084 	movi	r3,2
   84318:	10c00015 	stw	r3,0(r2)
}
   8431c:	e037883a 	mov	sp,fp
   84320:	dfc00117 	ldw	ra,4(sp)
   84324:	df000017 	ldw	fp,0(sp)
   84328:	dec00204 	addi	sp,sp,8
   8432c:	f800283a 	ret

00084330 <GUI_CheckButton>:

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
   84330:	defffa04 	addi	sp,sp,-24
   84334:	dfc00515 	stw	ra,20(sp)
   84338:	df000415 	stw	fp,16(sp)
   8433c:	df000404 	addi	fp,sp,16
   84340:	e13ffe15 	stw	r4,-8(fp)
   84344:	e17fff15 	stw	r5,-4(fp)
    int ButtonId = BTN_NONE;
   84348:	00800184 	movi	r2,6
   8434c:	e0bffc15 	stw	r2,-16(fp)
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
   84350:	e03ffd15 	stw	zero,-12(fp)
   84354:	00000e06 	br	84390 <GUI_CheckButton+0x60>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
   84358:	e0bffd17 	ldw	r2,-12(fp)
   8435c:	10800044 	addi	r2,r2,1
   84360:	10800524 	muli	r2,r2,20
   84364:	e0fffe17 	ldw	r3,-8(fp)
   84368:	1885883a 	add	r2,r3,r2
   8436c:	e13fff17 	ldw	r4,-4(fp)
   84370:	100b883a 	mov	r5,r2
   84374:	008016c0 	call	8016c <IsPtInRect>
   84378:	10000226 	beq	r2,zero,84384 <GUI_CheckButton+0x54>
            ButtonId = i;
   8437c:	e0bffd17 	ldw	r2,-12(fp)
   84380:	e0bffc15 	stw	r2,-16(fp)

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    int ButtonId = BTN_NONE;
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
   84384:	e0bffd17 	ldw	r2,-12(fp)
   84388:	10800044 	addi	r2,r2,1
   8438c:	e0bffd15 	stw	r2,-12(fp)
   84390:	e0bffd17 	ldw	r2,-12(fp)
   84394:	10800148 	cmpgei	r2,r2,5
   84398:	1000031e 	bne	r2,zero,843a8 <GUI_CheckButton+0x78>
   8439c:	e0bffc17 	ldw	r2,-16(fp)
   843a0:	108001a0 	cmpeqi	r2,r2,6
   843a4:	103fec1e 	bne	r2,zero,84358 <__alt_data_end+0xfffcc0e8>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
            ButtonId = i;
    }
    return ButtonId;
   843a8:	e0bffc17 	ldw	r2,-16(fp)
}
   843ac:	e037883a 	mov	sp,fp
   843b0:	dfc00117 	ldw	ra,4(sp)
   843b4:	df000017 	ldw	fp,0(sp)
   843b8:	dec00204 	addi	sp,sp,8
   843bc:	f800283a 	ret

000843c0 <GUI_DeskDraw>:

void GUI_DeskDraw(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
   843c0:	defff104 	addi	sp,sp,-60
   843c4:	dfc00e15 	stw	ra,56(sp)
   843c8:	df000d15 	stw	fp,52(sp)
   843cc:	dc400c15 	stw	r17,48(sp)
   843d0:	dc000b15 	stw	r16,44(sp)
   843d4:	df000d04 	addi	fp,sp,52
   843d8:	e13ffc15 	stw	r4,-16(fp)
   843dc:	e17ffd15 	stw	r5,-12(fp)
    // show text
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch");

    // draw border
    RectCopy(&rc, &pDeskInfo->rcPaint);
   843e0:	e0bffd17 	ldw	r2,-12(fp)
   843e4:	10800104 	addi	r2,r2,4
   843e8:	e0fff804 	addi	r3,fp,-32
   843ec:	1809883a 	mov	r4,r3
   843f0:	100b883a 	mov	r5,r2
   843f4:	008039c0 	call	8039c <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
   843f8:	e13ff817 	ldw	r4,-32(fp)
   843fc:	e17ffa17 	ldw	r5,-24(fp)
   84400:	e0fff917 	ldw	r3,-28(fp)
   84404:	e0bffb17 	ldw	r2,-20(fp)
   84408:	01804034 	movhi	r6,256
   8440c:	31bfffc4 	addi	r6,r6,-1
   84410:	d9800015 	stw	r6,0(sp)
   84414:	d8000115 	stw	zero,4(sp)
   84418:	e1bffc17 	ldw	r6,-16(fp)
   8441c:	d9800215 	stw	r6,8(sp)
   84420:	180d883a 	mov	r6,r3
   84424:	100f883a 	mov	r7,r2
   84428:	00818340 	call	81834 <vid_draw_box>
    

    // draw palette
	active = pDeskInfo->Paint_Index;
   8442c:	e0bffd17 	ldw	r2,-12(fp)
   84430:	10800017 	ldw	r2,0(r2)
   84434:	e0bff715 	stw	r2,-36(fp)
    for(i=0;i<BTN_NUM;i++){
   84438:	e03ff615 	stw	zero,-40(fp)
   8443c:	00006406 	br	845d0 <GUI_DeskDraw+0x210>
        RectCopy(&rc, &(pDeskInfo->szPalette[i].rc));
   84440:	e0bff617 	ldw	r2,-40(fp)
   84444:	10800044 	addi	r2,r2,1
   84448:	10800524 	muli	r2,r2,20
   8444c:	e0fffd17 	ldw	r3,-12(fp)
   84450:	1885883a 	add	r2,r3,r2
   84454:	e0fff804 	addi	r3,fp,-32
   84458:	1809883a 	mov	r4,r3
   8445c:	100b883a 	mov	r5,r2
   84460:	008039c0 	call	8039c <RectCopy>
        if (i == BTN_CLEAR){
   84464:	e0bff617 	ldw	r2,-40(fp)
   84468:	1000301e 	bne	r2,zero,8452c <GUI_DeskDraw+0x16c>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_NOT_FILL, pDisplay);
   8446c:	e13ff817 	ldw	r4,-32(fp)
   84470:	e17ffa17 	ldw	r5,-24(fp)
   84474:	e0fff917 	ldw	r3,-28(fp)
   84478:	e0bffb17 	ldw	r2,-20(fp)
   8447c:	e1fffd17 	ldw	r7,-12(fp)
   84480:	e1bff617 	ldw	r6,-40(fp)
   84484:	31800524 	muli	r6,r6,20
   84488:	398d883a 	add	r6,r7,r6
   8448c:	31800904 	addi	r6,r6,36
   84490:	31800017 	ldw	r6,0(r6)
   84494:	d9800015 	stw	r6,0(sp)
   84498:	d8000115 	stw	zero,4(sp)
   8449c:	e1bffc17 	ldw	r6,-16(fp)
   844a0:	d9800215 	stw	r6,8(sp)
   844a4:	180d883a 	mov	r6,r3
   844a8:	100f883a 	mov	r7,r2
   844ac:	00818340 	call	81834 <vid_draw_box>
            vid_print_string_alpha(rc.left+8, rc.top+(RectHeight(&rc)-22)/2, pDeskInfo->szPalette[i].color, BLACK_24, tahomabold_20, pDisplay, "Clear");
   844b0:	e0bff817 	ldw	r2,-32(fp)
   844b4:	14000204 	addi	r16,r2,8
   844b8:	e47ffa17 	ldw	r17,-24(fp)
   844bc:	e0bff804 	addi	r2,fp,-32
   844c0:	1009883a 	mov	r4,r2
   844c4:	00804340 	call	80434 <RectHeight>
   844c8:	10bffa84 	addi	r2,r2,-22
   844cc:	1006d7fa 	srli	r3,r2,31
   844d0:	1885883a 	add	r2,r3,r2
   844d4:	1005d07a 	srai	r2,r2,1
   844d8:	8887883a 	add	r3,r17,r2
   844dc:	e13ffd17 	ldw	r4,-12(fp)
   844e0:	e0bff617 	ldw	r2,-40(fp)
   844e4:	10800524 	muli	r2,r2,20
   844e8:	2085883a 	add	r2,r4,r2
   844ec:	10800904 	addi	r2,r2,36
   844f0:	10800017 	ldw	r2,0(r2)
   844f4:	010002b4 	movhi	r4,10
   844f8:	211bf804 	addi	r4,r4,28640
   844fc:	d9000015 	stw	r4,0(sp)
   84500:	e13ffc17 	ldw	r4,-16(fp)
   84504:	d9000115 	stw	r4,4(sp)
   84508:	010002b4 	movhi	r4,10
   8450c:	211b0a04 	addi	r4,r4,27688
   84510:	d9000215 	stw	r4,8(sp)
   84514:	8009883a 	mov	r4,r16
   84518:	180b883a 	mov	r5,r3
   8451c:	100d883a 	mov	r6,r2
   84520:	000f883a 	mov	r7,zero
   84524:	008367c0 	call	8367c <vid_print_string_alpha>
   84528:	00002606 	br	845c4 <GUI_DeskDraw+0x204>
        }else{
        	if (active != i){
   8452c:	e0fff717 	ldw	r3,-36(fp)
   84530:	e0bff617 	ldw	r2,-40(fp)
   84534:	18801126 	beq	r3,r2,8457c <GUI_DeskDraw+0x1bc>
          		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
   84538:	e13ff817 	ldw	r4,-32(fp)
   8453c:	e17ffa17 	ldw	r5,-24(fp)
   84540:	e0fff917 	ldw	r3,-28(fp)
   84544:	e0bffb17 	ldw	r2,-20(fp)
   84548:	d8000015 	stw	zero,0(sp)
   8454c:	01800044 	movi	r6,1
   84550:	d9800115 	stw	r6,4(sp)
   84554:	e1bffc17 	ldw	r6,-16(fp)
   84558:	d9800215 	stw	r6,8(sp)
   8455c:	180d883a 	mov	r6,r3
   84560:	100f883a 	mov	r7,r2
   84564:	00818340 	call	81834 <vid_draw_box>
        		RectInflate(&rc, -4, -4);
   84568:	e0bff804 	addi	r2,fp,-32
   8456c:	1009883a 	mov	r4,r2
   84570:	017fff04 	movi	r5,-4
   84574:	01bfff04 	movi	r6,-4
   84578:	008028c0 	call	8028c <RectInflate>
        	}
      		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pDisplay);
   8457c:	e13ff817 	ldw	r4,-32(fp)
   84580:	e17ffa17 	ldw	r5,-24(fp)
   84584:	e0fff917 	ldw	r3,-28(fp)
   84588:	e0bffb17 	ldw	r2,-20(fp)
   8458c:	e1fffd17 	ldw	r7,-12(fp)
   84590:	e1bff617 	ldw	r6,-40(fp)
   84594:	31800524 	muli	r6,r6,20
   84598:	398d883a 	add	r6,r7,r6
   8459c:	31800904 	addi	r6,r6,36
   845a0:	31800017 	ldw	r6,0(r6)
   845a4:	d9800015 	stw	r6,0(sp)
   845a8:	01800044 	movi	r6,1
   845ac:	d9800115 	stw	r6,4(sp)
   845b0:	e1bffc17 	ldw	r6,-16(fp)
   845b4:	d9800215 	stw	r6,8(sp)
   845b8:	180d883a 	mov	r6,r3
   845bc:	100f883a 	mov	r7,r2
   845c0:	00818340 	call	81834 <vid_draw_box>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
    

    // draw palette
	active = pDeskInfo->Paint_Index;
    for(i=0;i<BTN_NUM;i++){
   845c4:	e0bff617 	ldw	r2,-40(fp)
   845c8:	10800044 	addi	r2,r2,1
   845cc:	e0bff615 	stw	r2,-40(fp)
   845d0:	e0bff617 	ldw	r2,-40(fp)
   845d4:	10800150 	cmplti	r2,r2,5
   845d8:	103f991e 	bne	r2,zero,84440 <__alt_data_end+0xfffcc1d0>
    //RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    //vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pDisplay, "2");
    
        
        
}
   845dc:	e6fffe04 	addi	sp,fp,-8
   845e0:	dfc00317 	ldw	ra,12(sp)
   845e4:	df000217 	ldw	fp,8(sp)
   845e8:	dc400117 	ldw	r17,4(sp)
   845ec:	dc000017 	ldw	r16,0(sp)
   845f0:	dec00404 	addi	sp,sp,16
   845f4:	f800283a 	ret

000845f8 <IsContinuedPoint>:

bool IsContinuedPoint(POINT *ptPre, POINT *ptNew){
   845f8:	defffb04 	addi	sp,sp,-20
   845fc:	df000415 	stw	fp,16(sp)
   84600:	df000404 	addi	fp,sp,16
   84604:	e13ffe15 	stw	r4,-8(fp)
   84608:	e17fff15 	stw	r5,-4(fp)
    bool bYes = TRUE;
   8460c:	00800044 	movi	r2,1
   84610:	e0bffc15 	stw	r2,-16(fp)
    const int nMax = 50;
   84614:	00800c84 	movi	r2,50
   84618:	e0bffd15 	stw	r2,-12(fp)
    if (abs(ptPre->x - ptNew->x) > nMax)
   8461c:	e0bffe17 	ldw	r2,-8(fp)
   84620:	10c00017 	ldw	r3,0(r2)
   84624:	e0bfff17 	ldw	r2,-4(fp)
   84628:	10800017 	ldw	r2,0(r2)
   8462c:	1885c83a 	sub	r2,r3,r2
   84630:	1000010e 	bge	r2,zero,84638 <IsContinuedPoint+0x40>
   84634:	0085c83a 	sub	r2,zero,r2
   84638:	e0fffd17 	ldw	r3,-12(fp)
   8463c:	1880020e 	bge	r3,r2,84648 <IsContinuedPoint+0x50>
        bYes = FALSE;
   84640:	e03ffc15 	stw	zero,-16(fp)
   84644:	00000a06 	br	84670 <IsContinuedPoint+0x78>
    else if (abs(ptPre->y - ptNew->y) > nMax)
   84648:	e0bffe17 	ldw	r2,-8(fp)
   8464c:	10c00117 	ldw	r3,4(r2)
   84650:	e0bfff17 	ldw	r2,-4(fp)
   84654:	10800117 	ldw	r2,4(r2)
   84658:	1885c83a 	sub	r2,r3,r2
   8465c:	1000010e 	bge	r2,zero,84664 <IsContinuedPoint+0x6c>
   84660:	0085c83a 	sub	r2,zero,r2
   84664:	e0fffd17 	ldw	r3,-12(fp)
   84668:	1880010e 	bge	r3,r2,84670 <IsContinuedPoint+0x78>
        bYes = FALSE;
   8466c:	e03ffc15 	stw	zero,-16(fp)
        
    return bYes;        
   84670:	e0bffc17 	ldw	r2,-16(fp)
        
}
   84674:	e037883a 	mov	sp,fp
   84678:	df000017 	ldw	fp,0(sp)
   8467c:	dec00104 	addi	sp,sp,4
   84680:	f800283a 	ret

00084684 <GUI_ClearPaintArea>:



void GUI_ClearPaintArea(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
   84684:	defff504 	addi	sp,sp,-44
   84688:	dfc00a15 	stw	ra,40(sp)
   8468c:	df000915 	stw	fp,36(sp)
   84690:	df000904 	addi	fp,sp,36
   84694:	e13ffe15 	stw	r4,-8(fp)
   84698:	e17fff15 	stw	r5,-4(fp)
    RECT rc;
    RectCopy(&rc, &pDeskInfo->rcPaint);
   8469c:	e0bfff17 	ldw	r2,-4(fp)
   846a0:	10800104 	addi	r2,r2,4
   846a4:	e13ffa04 	addi	r4,fp,-24
   846a8:	100b883a 	mov	r5,r2
   846ac:	008039c0 	call	8039c <RectCopy>
    RectInflate(&rc, -1, -1);
   846b0:	e13ffa04 	addi	r4,fp,-24
   846b4:	017fffc4 	movi	r5,-1
   846b8:	01bfffc4 	movi	r6,-1
   846bc:	008028c0 	call	8028c <RectInflate>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
   846c0:	e13ffa17 	ldw	r4,-24(fp)
   846c4:	e17ffc17 	ldw	r5,-16(fp)
   846c8:	e0fffb17 	ldw	r3,-20(fp)
   846cc:	e0bffd17 	ldw	r2,-12(fp)
   846d0:	d8000015 	stw	zero,0(sp)
   846d4:	01800044 	movi	r6,1
   846d8:	d9800115 	stw	r6,4(sp)
   846dc:	e1bffe17 	ldw	r6,-8(fp)
   846e0:	d9800215 	stw	r6,8(sp)
   846e4:	180d883a 	mov	r6,r3
   846e8:	100f883a 	mov	r7,r2
   846ec:	00818340 	call	81834 <vid_draw_box>
    //
  //  RectCopy(&rc, &pDeskInfo->szPalette[BTN_GESTRUE].rc);
  //  vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
}
   846f0:	e037883a 	mov	sp,fp
   846f4:	dfc00117 	ldw	ra,4(sp)
   846f8:	df000017 	ldw	fp,0(sp)
   846fc:	dec00204 	addi	sp,sp,8
   84700:	f800283a 	ret

00084704 <GUI>:

//void GUI(MTC_INFO *pTouch){
void GUI(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
   84704:	deffd004 	addi	sp,sp,-192
   84708:	dfc02f15 	stw	ra,188(sp)
   8470c:	df002e15 	stw	fp,184(sp)
   84710:	df002e04 	addi	fp,sp,184
   84714:	e13ffe15 	stw	r4,-8(fp)
   84718:	e17fff15 	stw	r5,-4(fp)
    // video
    DESK_INFO DeskInfo;
    int X, Y;
    POINT Pt;
    const int nDotSize = DOT_SIZE;
   8471c:	00800144 	movi	r2,5
   84720:	e0bfd615 	stw	r2,-168(fp)
    


    
    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
   84724:	e13ffe17 	ldw	r4,-8(fp)
   84728:	000b883a 	mov	r5,zero
   8472c:	0080fd00 	call	80fd0 <vid_clean_screen>
    
    // Show Terasic Welcome
    GUI_ShowWelcome(pDisplay);
   84730:	e13ffe17 	ldw	r4,-8(fp)
   84734:	00840840 	call	84084 <GUI_ShowWelcome>
    usleep(1*1000*1000);
   84738:	010003f4 	movhi	r4,15
   8473c:	21109004 	addi	r4,r4,16960
   84740:	008bbbc0 	call	8bbbc <usleep>
    vid_clean_screen(pDisplay, BLACK_24);
   84744:	e13ffe17 	ldw	r4,-8(fp)
   84748:	000b883a 	mov	r5,zero
   8474c:	0080fd00 	call	80fd0 <vid_clean_screen>

   
    GUI_DeskInit(pDisplay, &DeskInfo);
   84750:	e0bfd804 	addi	r2,fp,-160
   84754:	e13ffe17 	ldw	r4,-8(fp)
   84758:	100b883a 	mov	r5,r2
   8475c:	00841540 	call	84154 <GUI_DeskInit>
    GUI_DeskDraw(pDisplay, &DeskInfo);
   84760:	e0bfd804 	addi	r2,fp,-160
   84764:	e13ffe17 	ldw	r4,-8(fp)
   84768:	100b883a 	mov	r5,r2
   8476c:	00843c00 	call	843c0 <GUI_DeskDraw>
    
   // VIPFR_ActiveDrawFrame(pReader);
    
    RectCopy(&rcTouch, &DeskInfo.rcPaint);
   84770:	e0fffa04 	addi	r3,fp,-24
   84774:	e0bfd804 	addi	r2,fp,-160
   84778:	10800104 	addi	r2,r2,4
   8477c:	1809883a 	mov	r4,r3
   84780:	100b883a 	mov	r5,r2
   84784:	008039c0 	call	8039c <RectCopy>
    RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);
   84788:	00ffff84 	movi	r3,-2
   8478c:	e0bfd617 	ldw	r2,-168(fp)
   84790:	1887c83a 	sub	r3,r3,r2
   84794:	013fff84 	movi	r4,-2
   84798:	e0bfd617 	ldw	r2,-168(fp)
   8479c:	2085c83a 	sub	r2,r4,r2
   847a0:	e13ffa04 	addi	r4,fp,-24
   847a4:	180b883a 	mov	r5,r3
   847a8:	100d883a 	mov	r6,r2
   847ac:	008028c0 	call	8028c <RectInflate>
    
    ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
   847b0:	e0bfd817 	ldw	r2,-160(fp)
   847b4:	10800524 	muli	r2,r2,20
   847b8:	e0ffd404 	addi	r3,fp,-176
   847bc:	1885883a 	add	r2,r3,r2
   847c0:	10800d04 	addi	r2,r2,52
   847c4:	10800017 	ldw	r2,0(r2)
   847c8:	e0bfd415 	stw	r2,-176(fp)
  //  printf("ContinuedTime=%d\r\n", ContinuedTime);
   // PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);

    while(1){
            // touch
            if (Touch_GetXY(pTouch, &X, &Y)){
   847cc:	e0fff604 	addi	r3,fp,-40
   847d0:	e0bff704 	addi	r2,fp,-36
   847d4:	e13fff17 	ldw	r4,-4(fp)
   847d8:	180b883a 	mov	r5,r3
   847dc:	100d883a 	mov	r6,r2
   847e0:	0086a300 	call	86a30 <Touch_GetXY>
   847e4:	10004f26 	beq	r2,zero,84924 <GUI+0x220>
           //     IOWR(LED_BASE, 0x00, LedMask);
             //   LedMask <<= 1;
             //   if (LedMask == 0x00)
               //     LedMask = 0x01;
                //
                printf("x=%d, y=%d\r\n", X,Y);
   847e8:	e0fff617 	ldw	r3,-40(fp)
   847ec:	e0bff717 	ldw	r2,-36(fp)
   847f0:	010002b4 	movhi	r4,10
   847f4:	211b0c04 	addi	r4,r4,27696
   847f8:	180b883a 	mov	r5,r3
   847fc:	100d883a 	mov	r6,r2
   84800:	008a2d00 	call	8a2d0 <printf>
                PtSet(&Pt, X, Y);
   84804:	e0fff617 	ldw	r3,-40(fp)
   84808:	e0bff717 	ldw	r2,-36(fp)
   8480c:	e13ff804 	addi	r4,fp,-32
   84810:	180b883a 	mov	r5,r3
   84814:	100d883a 	mov	r6,r2
   84818:	00801f00 	call	801f0 <PtSet>


             //   printf("t:%d, %d\r\n", (int)alt_nticks(), LastTimePt1);
                //
                if ( IsPtInRect(&Pt, &rcTouch)){
   8481c:	e0fff804 	addi	r3,fp,-32
   84820:	e0bffa04 	addi	r2,fp,-24
   84824:	1809883a 	mov	r4,r3
   84828:	100b883a 	mov	r5,r2
   8482c:	008016c0 	call	8016c <IsPtInRect>
   84830:	10000c26 	beq	r2,zero,84864 <GUI+0x160>

                    vid_draw_circle(Pt.x, Pt.y, nDotSize, ColorPen, DO_FILL, pDisplay);
   84834:	e0fff817 	ldw	r3,-32(fp)
   84838:	e0bff917 	ldw	r2,-28(fp)
   8483c:	01000044 	movi	r4,1
   84840:	d9000015 	stw	r4,0(sp)
   84844:	e13ffe17 	ldw	r4,-8(fp)
   84848:	d9000115 	stw	r4,4(sp)
   8484c:	1809883a 	mov	r4,r3
   84850:	100b883a 	mov	r5,r2
   84854:	e1bfd617 	ldw	r6,-168(fp)
   84858:	e1ffd417 	ldw	r7,-176(fp)
   8485c:	00820500 	call	82050 <vid_draw_circle>
   84860:	00003006 	br	84924 <GUI+0x220>
                   // VIPFR_ActiveDrawFrame(pReader);
                }else if (GUI_CheckButton(&DeskInfo, &Pt) == BTN_CLEAR){
   84864:	e0ffd804 	addi	r3,fp,-160
   84868:	e0bff804 	addi	r2,fp,-32
   8486c:	1809883a 	mov	r4,r3
   84870:	100b883a 	mov	r5,r2
   84874:	00843300 	call	84330 <GUI_CheckButton>
   84878:	1000071e 	bne	r2,zero,84898 <GUI+0x194>
                    GUI_ClearPaintArea(pDisplay, &DeskInfo);
   8487c:	e0bfd804 	addi	r2,fp,-160
   84880:	e13ffe17 	ldw	r4,-8(fp)
   84884:	100b883a 	mov	r5,r2
   84888:	00846840 	call	84684 <GUI_ClearPaintArea>
                  //  VIPFR_ActiveDrawFrame(pReader);
                    Touch_EmptyFifo(pTouch);
   8488c:	e13fff17 	ldw	r4,-4(fp)
   84890:	00869f80 	call	869f8 <Touch_EmptyFifo>
   84894:	00002306 	br	84924 <GUI+0x220>
                }else {
                    ButtonId = GUI_CheckButton(&DeskInfo, &Pt);
   84898:	e0ffd804 	addi	r3,fp,-160
   8489c:	e0bff804 	addi	r2,fp,-32
   848a0:	1809883a 	mov	r4,r3
   848a4:	100b883a 	mov	r5,r2
   848a8:	00843300 	call	84330 <GUI_CheckButton>
   848ac:	e0bfd715 	stw	r2,-164(fp)
                    UpdatePalette = FALSE;
   848b0:	e03fd515 	stw	zero,-172(fp)
                    if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR){
   848b4:	e0bfd717 	ldw	r2,-164(fp)
   848b8:	108001a0 	cmpeqi	r2,r2,6
   848bc:	1000191e 	bne	r2,zero,84924 <GUI+0x220>
   848c0:	e0bfd717 	ldw	r2,-164(fp)
   848c4:	10001726 	beq	r2,zero,84924 <GUI+0x220>
                        // chang draw color
                        if ( ButtonId != DeskInfo.Paint_Index ){
   848c8:	e0ffd817 	ldw	r3,-160(fp)
   848cc:	e0bfd717 	ldw	r2,-164(fp)
   848d0:	18800426 	beq	r3,r2,848e4 <GUI+0x1e0>
                            DeskInfo.Paint_Index = ButtonId;
   848d4:	e0bfd717 	ldw	r2,-164(fp)
   848d8:	e0bfd815 	stw	r2,-160(fp)
                            UpdatePalette = TRUE;
   848dc:	00800044 	movi	r2,1
   848e0:	e0bfd515 	stw	r2,-172(fp)
                            //
                        }

                        if (UpdatePalette){
   848e4:	e0bfd517 	ldw	r2,-172(fp)
   848e8:	10000e26 	beq	r2,zero,84924 <GUI+0x220>
                            ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
   848ec:	e0bfd817 	ldw	r2,-160(fp)
   848f0:	10800524 	muli	r2,r2,20
   848f4:	e0ffd404 	addi	r3,fp,-176
   848f8:	1885883a 	add	r2,r3,r2
   848fc:	10800d04 	addi	r2,r2,52
   84900:	10800017 	ldw	r2,0(r2)
   84904:	e0bfd415 	stw	r2,-176(fp)
                            GUI_DeskDraw(pDisplay, &DeskInfo);
   84908:	e0bfd804 	addi	r2,fp,-160
   8490c:	e13ffe17 	ldw	r4,-8(fp)
   84910:	100b883a 	mov	r5,r2
   84914:	00843c00 	call	843c0 <GUI_DeskDraw>
                        //    VIPFR_ActiveDrawFrame(pReader);
                            Touch_EmptyFifo(pTouch);
   84918:	e13fff17 	ldw	r4,-4(fp)
   8491c:	00869f80 	call	869f8 <Touch_EmptyFifo>
                        }
                    }
                }
            } // if touch
        } // while
   84920:	003faa06 	br	847cc <__alt_data_end+0xfffcc55c>
   84924:	003fa906 	br	847cc <__alt_data_end+0xfffcc55c>

00084928 <GUI_ShowInfo>:
    
}



void GUI_ShowInfo(alt_video_display *pDisplay, char *pText){
   84928:	defff904 	addi	sp,sp,-28
   8492c:	dfc00615 	stw	ra,24(sp)
   84930:	df000515 	stw	fp,20(sp)
   84934:	df000504 	addi	fp,sp,20
   84938:	e13ffe15 	stw	r4,-8(fp)
   8493c:	e17fff15 	stw	r5,-4(fp)
    static int x=0,y=100;
   // vid_clean_screen(pReader, BLACK_24);
    vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, pText);
   84940:	d0ecc917 	ldw	r3,-19676(gp)
   84944:	d0a00117 	ldw	r2,-32764(gp)
   84948:	010002b4 	movhi	r4,10
   8494c:	211bf804 	addi	r4,r4,28640
   84950:	d9000015 	stw	r4,0(sp)
   84954:	e13ffe17 	ldw	r4,-8(fp)
   84958:	d9000115 	stw	r4,4(sp)
   8495c:	e13fff17 	ldw	r4,-4(fp)
   84960:	d9000215 	stw	r4,8(sp)
   84964:	1809883a 	mov	r4,r3
   84968:	100b883a 	mov	r5,r2
   8496c:	01803fc4 	movi	r6,255
   84970:	000f883a 	mov	r7,zero
   84974:	008367c0 	call	8367c <vid_print_string_alpha>
 //   VIPFR_ActiveDrawFrame(pReader);
}
   84978:	e037883a 	mov	sp,fp
   8497c:	dfc00117 	ldw	ra,4(sp)
   84980:	df000017 	ldw	fp,0(sp)
   84984:	dec00204 	addi	sp,sp,8
   84988:	f800283a 	ret

0008498c <GUI_ShowTouchPoint>:

void GUI_ShowTouchPoint(alt_video_display *pDisplay, int X, int Y, int color){
   8498c:	defff804 	addi	sp,sp,-32
   84990:	dfc00715 	stw	ra,28(sp)
   84994:	df000615 	stw	fp,24(sp)
   84998:	df000604 	addi	fp,sp,24
   8499c:	e13ffc15 	stw	r4,-16(fp)
   849a0:	e17ffd15 	stw	r5,-12(fp)
   849a4:	e1bffe15 	stw	r6,-8(fp)
   849a8:	e1ffff15 	stw	r7,-4(fp)
    vid_draw_circle(X, Y, 10, color, DO_FILL, pDisplay);
   849ac:	00800044 	movi	r2,1
   849b0:	d8800015 	stw	r2,0(sp)
   849b4:	e0bffc17 	ldw	r2,-16(fp)
   849b8:	d8800115 	stw	r2,4(sp)
   849bc:	e13ffd17 	ldw	r4,-12(fp)
   849c0:	e17ffe17 	ldw	r5,-8(fp)
   849c4:	01800284 	movi	r6,10
   849c8:	e1ffff17 	ldw	r7,-4(fp)
   849cc:	00820500 	call	82050 <vid_draw_circle>
   // VIPFR_ActiveDrawFrame(pReader);
}
   849d0:	e037883a 	mov	sp,fp
   849d4:	dfc00117 	ldw	ra,4(sp)
   849d8:	df000017 	ldw	fp,0(sp)
   849dc:	dec00204 	addi	sp,sp,8
   849e0:	f800283a 	ret

000849e4 <ShowInfo>:
#include "simple_graphics.h"
#include "geometry.h"



void ShowInfo(alt_video_display *pDisplay, char *pText){
   849e4:	defff904 	addi	sp,sp,-28
   849e8:	dfc00615 	stw	ra,24(sp)
   849ec:	df000515 	stw	fp,20(sp)
   849f0:	df000504 	addi	fp,sp,20
   849f4:	e13ffe15 	stw	r4,-8(fp)
   849f8:	e17fff15 	stw	r5,-4(fp)
    vid_print_string_alpha(1, 1, WHITE_24, BLACK_24, tahomabold_20, pDisplay, pText);
   849fc:	008002b4 	movhi	r2,10
   84a00:	109bf804 	addi	r2,r2,28640
   84a04:	d8800015 	stw	r2,0(sp)
   84a08:	e0bffe17 	ldw	r2,-8(fp)
   84a0c:	d8800115 	stw	r2,4(sp)
   84a10:	e0bfff17 	ldw	r2,-4(fp)
   84a14:	d8800215 	stw	r2,8(sp)
   84a18:	01000044 	movi	r4,1
   84a1c:	01400044 	movi	r5,1
   84a20:	01804034 	movhi	r6,256
   84a24:	31bfffc4 	addi	r6,r6,-1
   84a28:	000f883a 	mov	r7,zero
   84a2c:	008367c0 	call	8367c <vid_print_string_alpha>
}
   84a30:	e037883a 	mov	sp,fp
   84a34:	dfc00117 	ldw	ra,4(sp)
   84a38:	df000017 	ldw	fp,0(sp)
   84a3c:	dec00204 	addi	sp,sp,8
   84a40:	f800283a 	ret

00084a44 <VPG_XLine>:


void VPG_XLine(alt_video_display *pDisplay){
   84a44:	defffe04 	addi	sp,sp,-8
   84a48:	df000115 	stw	fp,4(sp)
   84a4c:	df000104 	addi	fp,sp,4
   84a50:	e13fff15 	stw	r4,-4(fp)
return ;
   84a54:	0001883a 	nop

    // show text
    ShowInfo(pDisplay, "X Line");


}
   84a58:	e037883a 	mov	sp,fp
   84a5c:	df000017 	ldw	fp,0(sp)
   84a60:	dec00104 	addi	sp,sp,4
   84a64:	f800283a 	ret

00084a68 <VPG_ColorPanel>:


void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
   84a68:	defff204 	addi	sp,sp,-56
   84a6c:	dfc00d15 	stw	ra,52(sp)
   84a70:	df000c15 	stw	fp,48(sp)
   84a74:	df000c04 	addi	fp,sp,48
   84a78:	e13ffe15 	stw	r4,-8(fp)
   84a7c:	e17fff15 	stw	r5,-4(fp)
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   84a80:	e03ff515 	stw	zero,-44(fp)
   84a84:	00001106 	br	84acc <VPG_ColorPanel+0x64>
        for(x=0;x<pDisplay->width;x++){
   84a88:	e03ff415 	stw	zero,-48(fp)
   84a8c:	00000806 	br	84ab0 <VPG_ColorPanel+0x48>
        	vid_set_pixel(x,y,Color, pDisplay);
   84a90:	e13ff417 	ldw	r4,-48(fp)
   84a94:	e17ff517 	ldw	r5,-44(fp)
   84a98:	e1bfff17 	ldw	r6,-4(fp)
   84a9c:	e1fffe17 	ldw	r7,-8(fp)
   84aa0:	0081a740 	call	81a74 <vid_set_pixel>
void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84aa4:	e0bff417 	ldw	r2,-48(fp)
   84aa8:	10800044 	addi	r2,r2,1
   84aac:	e0bff415 	stw	r2,-48(fp)
   84ab0:	e0bffe17 	ldw	r2,-8(fp)
   84ab4:	10800117 	ldw	r2,4(r2)
   84ab8:	e0fff417 	ldw	r3,-48(fp)
   84abc:	18bff416 	blt	r3,r2,84a90 <__alt_data_end+0xfffcc820>

void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   84ac0:	e0bff517 	ldw	r2,-44(fp)
   84ac4:	10800044 	addi	r2,r2,1
   84ac8:	e0bff515 	stw	r2,-44(fp)
   84acc:	e0bffe17 	ldw	r2,-8(fp)
   84ad0:	10800217 	ldw	r2,8(r2)
   84ad4:	e0fff517 	ldw	r3,-44(fp)
   84ad8:	18bfeb16 	blt	r3,r2,84a88 <__alt_data_end+0xfffcc818>
        	vid_set_pixel(x,y,Color, pDisplay);
        }
    }

    // show text
    sprintf(szText,"Panel: %08xh", Color);
   84adc:	e0bff604 	addi	r2,fp,-40
   84ae0:	1009883a 	mov	r4,r2
   84ae4:	014002b4 	movhi	r5,10
   84ae8:	295b1004 	addi	r5,r5,27712
   84aec:	e1bfff17 	ldw	r6,-4(fp)
   84af0:	008a4640 	call	8a464 <sprintf>
    ShowInfo(pDisplay, szText);
   84af4:	e0bff604 	addi	r2,fp,-40
   84af8:	e13ffe17 	ldw	r4,-8(fp)
   84afc:	100b883a 	mov	r5,r2
   84b00:	00849e40 	call	849e4 <ShowInfo>



}
   84b04:	e037883a 	mov	sp,fp
   84b08:	dfc00117 	ldw	ra,4(sp)
   84b0c:	df000017 	ldw	fp,0(sp)
   84b10:	dec00204 	addi	sp,sp,8
   84b14:	f800283a 	ret

00084b18 <VPG_Grid>:

void VPG_Grid(alt_video_display *pDisplay, alt_u8 GridSize){
   84b18:	defff104 	addi	sp,sp,-60
   84b1c:	dfc00e15 	stw	ra,56(sp)
   84b20:	df000d15 	stw	fp,52(sp)
   84b24:	df000d04 	addi	fp,sp,52
   84b28:	e13ffe15 	stw	r4,-8(fp)
   84b2c:	2805883a 	mov	r2,r5
   84b30:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   84b34:	e03ff415 	stw	zero,-48(fp)
   84b38:	00002206 	br	84bc4 <VPG_Grid+0xac>
        for(x=0;x<pDisplay->width;x++){
   84b3c:	e03ff315 	stw	zero,-52(fp)
   84b40:	00001906 	br	84ba8 <VPG_Grid+0x90>
            if (x%GridSize == 0 || y%GridSize == 0)
   84b44:	e0bfff03 	ldbu	r2,-4(fp)
   84b48:	e0fff317 	ldw	r3,-52(fp)
   84b4c:	1809883a 	mov	r4,r3
   84b50:	100b883a 	mov	r5,r2
   84b54:	008778c0 	call	8778c <__modsi3>
   84b58:	10000626 	beq	r2,zero,84b74 <VPG_Grid+0x5c>
   84b5c:	e0bfff03 	ldbu	r2,-4(fp)
   84b60:	e0fff417 	ldw	r3,-48(fp)
   84b64:	1809883a 	mov	r4,r3
   84b68:	100b883a 	mov	r5,r2
   84b6c:	008778c0 	call	8778c <__modsi3>
   84b70:	1000041e 	bne	r2,zero,84b84 <VPG_Grid+0x6c>
                Value32 = WHITE_24;
   84b74:	00804034 	movhi	r2,256
   84b78:	10bfffc4 	addi	r2,r2,-1
   84b7c:	e0bff515 	stw	r2,-44(fp)
   84b80:	00000106 	br	84b88 <VPG_Grid+0x70>
            else
                Value32 = BLACK_24;
   84b84:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
   84b88:	e13ff317 	ldw	r4,-52(fp)
   84b8c:	e17ff417 	ldw	r5,-48(fp)
   84b90:	e1bff517 	ldw	r6,-44(fp)
   84b94:	e1fffe17 	ldw	r7,-8(fp)
   84b98:	0081a740 	call	81a74 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84b9c:	e0bff317 	ldw	r2,-52(fp)
   84ba0:	10800044 	addi	r2,r2,1
   84ba4:	e0bff315 	stw	r2,-52(fp)
   84ba8:	e0bffe17 	ldw	r2,-8(fp)
   84bac:	10800117 	ldw	r2,4(r2)
   84bb0:	e0fff317 	ldw	r3,-52(fp)
   84bb4:	18bfe316 	blt	r3,r2,84b44 <__alt_data_end+0xfffcc8d4>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   84bb8:	e0bff417 	ldw	r2,-48(fp)
   84bbc:	10800044 	addi	r2,r2,1
   84bc0:	e0bff415 	stw	r2,-48(fp)
   84bc4:	e0bffe17 	ldw	r2,-8(fp)
   84bc8:	10800217 	ldw	r2,8(r2)
   84bcc:	e0fff417 	ldw	r3,-48(fp)
   84bd0:	18bfda16 	blt	r3,r2,84b3c <__alt_data_end+0xfffcc8cc>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"Grid%d", GridSize);
   84bd4:	e0bfff03 	ldbu	r2,-4(fp)
   84bd8:	e0fff604 	addi	r3,fp,-40
   84bdc:	1809883a 	mov	r4,r3
   84be0:	014002b4 	movhi	r5,10
   84be4:	295b1404 	addi	r5,r5,27728
   84be8:	100d883a 	mov	r6,r2
   84bec:	008a4640 	call	8a464 <sprintf>
    ShowInfo(pDisplay, szText);
   84bf0:	e0bff604 	addi	r2,fp,-40
   84bf4:	e13ffe17 	ldw	r4,-8(fp)
   84bf8:	100b883a 	mov	r5,r2
   84bfc:	00849e40 	call	849e4 <ShowInfo>

}
   84c00:	e037883a 	mov	sp,fp
   84c04:	dfc00117 	ldw	ra,4(sp)
   84c08:	df000017 	ldw	fp,0(sp)
   84c0c:	dec00204 	addi	sp,sp,8
   84c10:	f800283a 	ret

00084c14 <VPG_VGrid>:

void VPG_VGrid(alt_video_display *pDisplay, alt_u8 GridSize){
   84c14:	defff104 	addi	sp,sp,-60
   84c18:	dfc00e15 	stw	ra,56(sp)
   84c1c:	df000d15 	stw	fp,52(sp)
   84c20:	df000d04 	addi	fp,sp,52
   84c24:	e13ffe15 	stw	r4,-8(fp)
   84c28:	2805883a 	mov	r2,r5
   84c2c:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   84c30:	e03ff415 	stw	zero,-48(fp)
   84c34:	00001c06 	br	84ca8 <VPG_VGrid+0x94>
        for(x=0;x<pDisplay->width;x++){
   84c38:	e03ff315 	stw	zero,-52(fp)
   84c3c:	00001306 	br	84c8c <VPG_VGrid+0x78>
            if (x%GridSize == 0)
   84c40:	e0bfff03 	ldbu	r2,-4(fp)
   84c44:	e0fff317 	ldw	r3,-52(fp)
   84c48:	1809883a 	mov	r4,r3
   84c4c:	100b883a 	mov	r5,r2
   84c50:	008778c0 	call	8778c <__modsi3>
   84c54:	1000041e 	bne	r2,zero,84c68 <VPG_VGrid+0x54>
                Value32 = WHITE_24;
   84c58:	00804034 	movhi	r2,256
   84c5c:	10bfffc4 	addi	r2,r2,-1
   84c60:	e0bff515 	stw	r2,-44(fp)
   84c64:	00000106 	br	84c6c <VPG_VGrid+0x58>
            else
                Value32 = BLACK_24;
   84c68:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
   84c6c:	e13ff317 	ldw	r4,-52(fp)
   84c70:	e17ff417 	ldw	r5,-48(fp)
   84c74:	e1bff517 	ldw	r6,-44(fp)
   84c78:	e1fffe17 	ldw	r7,-8(fp)
   84c7c:	0081a740 	call	81a74 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84c80:	e0bff317 	ldw	r2,-52(fp)
   84c84:	10800044 	addi	r2,r2,1
   84c88:	e0bff315 	stw	r2,-52(fp)
   84c8c:	e0bffe17 	ldw	r2,-8(fp)
   84c90:	10800117 	ldw	r2,4(r2)
   84c94:	e0fff317 	ldw	r3,-52(fp)
   84c98:	18bfe916 	blt	r3,r2,84c40 <__alt_data_end+0xfffcc9d0>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   84c9c:	e0bff417 	ldw	r2,-48(fp)
   84ca0:	10800044 	addi	r2,r2,1
   84ca4:	e0bff415 	stw	r2,-48(fp)
   84ca8:	e0bffe17 	ldw	r2,-8(fp)
   84cac:	10800217 	ldw	r2,8(r2)
   84cb0:	e0fff417 	ldw	r3,-48(fp)
   84cb4:	18bfe016 	blt	r3,r2,84c38 <__alt_data_end+0xfffcc9c8>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"VGrid%d", GridSize);
   84cb8:	e0bfff03 	ldbu	r2,-4(fp)
   84cbc:	e0fff604 	addi	r3,fp,-40
   84cc0:	1809883a 	mov	r4,r3
   84cc4:	014002b4 	movhi	r5,10
   84cc8:	295b1604 	addi	r5,r5,27736
   84ccc:	100d883a 	mov	r6,r2
   84cd0:	008a4640 	call	8a464 <sprintf>
    ShowInfo(pDisplay, szText);
   84cd4:	e0bff604 	addi	r2,fp,-40
   84cd8:	e13ffe17 	ldw	r4,-8(fp)
   84cdc:	100b883a 	mov	r5,r2
   84ce0:	00849e40 	call	849e4 <ShowInfo>

}
   84ce4:	e037883a 	mov	sp,fp
   84ce8:	dfc00117 	ldw	ra,4(sp)
   84cec:	df000017 	ldw	fp,0(sp)
   84cf0:	dec00204 	addi	sp,sp,8
   84cf4:	f800283a 	ret

00084cf8 <VPG_HGrid>:

void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
   84cf8:	defff104 	addi	sp,sp,-60
   84cfc:	dfc00e15 	stw	ra,56(sp)
   84d00:	df000d15 	stw	fp,52(sp)
   84d04:	df000d04 	addi	fp,sp,52
   84d08:	e13ffe15 	stw	r4,-8(fp)
   84d0c:	2805883a 	mov	r2,r5
   84d10:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   84d14:	e03ff415 	stw	zero,-48(fp)
   84d18:	00001c06 	br	84d8c <VPG_HGrid+0x94>
        for(x=0;x<pDisplay->width;x++){
   84d1c:	e03ff315 	stw	zero,-52(fp)
   84d20:	00001306 	br	84d70 <VPG_HGrid+0x78>
            if (y%GridSize == 0)
   84d24:	e0bfff03 	ldbu	r2,-4(fp)
   84d28:	e0fff417 	ldw	r3,-48(fp)
   84d2c:	1809883a 	mov	r4,r3
   84d30:	100b883a 	mov	r5,r2
   84d34:	008778c0 	call	8778c <__modsi3>
   84d38:	1000041e 	bne	r2,zero,84d4c <VPG_HGrid+0x54>
                Value32 = WHITE_24;
   84d3c:	00804034 	movhi	r2,256
   84d40:	10bfffc4 	addi	r2,r2,-1
   84d44:	e0bff515 	stw	r2,-44(fp)
   84d48:	00000106 	br	84d50 <VPG_HGrid+0x58>
            else
                Value32 = BLACK_24;
   84d4c:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
   84d50:	e13ff317 	ldw	r4,-52(fp)
   84d54:	e17ff417 	ldw	r5,-48(fp)
   84d58:	e1bff517 	ldw	r6,-44(fp)
   84d5c:	e1fffe17 	ldw	r7,-8(fp)
   84d60:	0081a740 	call	81a74 <vid_set_pixel>
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84d64:	e0bff317 	ldw	r2,-52(fp)
   84d68:	10800044 	addi	r2,r2,1
   84d6c:	e0bff315 	stw	r2,-52(fp)
   84d70:	e0bffe17 	ldw	r2,-8(fp)
   84d74:	10800117 	ldw	r2,4(r2)
   84d78:	e0fff317 	ldw	r3,-52(fp)
   84d7c:	18bfe916 	blt	r3,r2,84d24 <__alt_data_end+0xfffccab4>
void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   84d80:	e0bff417 	ldw	r2,-48(fp)
   84d84:	10800044 	addi	r2,r2,1
   84d88:	e0bff415 	stw	r2,-48(fp)
   84d8c:	e0bffe17 	ldw	r2,-8(fp)
   84d90:	10800217 	ldw	r2,8(r2)
   84d94:	e0fff417 	ldw	r3,-48(fp)
   84d98:	18bfe016 	blt	r3,r2,84d1c <__alt_data_end+0xfffccaac>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"HGrid%d", GridSize);
   84d9c:	e0bfff03 	ldbu	r2,-4(fp)
   84da0:	e0fff604 	addi	r3,fp,-40
   84da4:	1809883a 	mov	r4,r3
   84da8:	014002b4 	movhi	r5,10
   84dac:	295b1804 	addi	r5,r5,27744
   84db0:	100d883a 	mov	r6,r2
   84db4:	008a4640 	call	8a464 <sprintf>
    ShowInfo(pDisplay, szText);
   84db8:	e0bff604 	addi	r2,fp,-40
   84dbc:	e13ffe17 	ldw	r4,-8(fp)
   84dc0:	100b883a 	mov	r5,r2
   84dc4:	00849e40 	call	849e4 <ShowInfo>

}
   84dc8:	e037883a 	mov	sp,fp
   84dcc:	dfc00117 	ldw	ra,4(sp)
   84dd0:	df000017 	ldw	fp,0(sp)
   84dd4:	dec00204 	addi	sp,sp,8
   84dd8:	f800283a 	ret

00084ddc <VPG_ColorBar>:




void VPG_ColorBar(alt_video_display *pDisplay){
   84ddc:	defffa04 	addi	sp,sp,-24
   84de0:	dfc00515 	stw	ra,20(sp)
   84de4:	df000415 	stw	fp,16(sp)
   84de8:	df000404 	addi	fp,sp,16
   84dec:	e13fff15 	stw	r4,-4(fp)
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
   84df0:	e03ffd15 	stw	zero,-12(fp)
   84df4:	00005806 	br	84f58 <VPG_ColorBar+0x17c>
        for(x=0;x<pDisplay->width;x++){
   84df8:	e03ffc15 	stw	zero,-16(fp)
   84dfc:	00004f06 	br	84f3c <VPG_ColorBar+0x160>
            if (x == 0 || y == 0 || x == pDisplay->width-1 || y == pDisplay->height-1){
   84e00:	e0bffc17 	ldw	r2,-16(fp)
   84e04:	10000c26 	beq	r2,zero,84e38 <VPG_ColorBar+0x5c>
   84e08:	e0bffd17 	ldw	r2,-12(fp)
   84e0c:	10000a26 	beq	r2,zero,84e38 <VPG_ColorBar+0x5c>
   84e10:	e0bfff17 	ldw	r2,-4(fp)
   84e14:	10800117 	ldw	r2,4(r2)
   84e18:	10ffffc4 	addi	r3,r2,-1
   84e1c:	e0bffc17 	ldw	r2,-16(fp)
   84e20:	18800526 	beq	r3,r2,84e38 <VPG_ColorBar+0x5c>
   84e24:	e0bfff17 	ldw	r2,-4(fp)
   84e28:	10800217 	ldw	r2,8(r2)
   84e2c:	10ffffc4 	addi	r3,r2,-1
   84e30:	e0bffd17 	ldw	r2,-12(fp)
   84e34:	1880041e 	bne	r3,r2,84e48 <VPG_ColorBar+0x6c>
                Value32 = WHITE_24;
   84e38:	00804034 	movhi	r2,256
   84e3c:	10bfffc4 	addi	r2,r2,-1
   84e40:	e0bffe15 	stw	r2,-8(fp)
   84e44:	00003506 	br	84f1c <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height/4){
   84e48:	e0bfff17 	ldw	r2,-4(fp)
   84e4c:	10800217 	ldw	r2,8(r2)
   84e50:	1000010e 	bge	r2,zero,84e58 <VPG_ColorBar+0x7c>
   84e54:	108000c4 	addi	r2,r2,3
   84e58:	1005d0ba 	srai	r2,r2,2
   84e5c:	e0fffd17 	ldw	r3,-12(fp)
   84e60:	1880040e 	bge	r3,r2,84e74 <VPG_ColorBar+0x98>
                // red
                Value32 = x & 0xFF;
   84e64:	e0bffc17 	ldw	r2,-16(fp)
   84e68:	10803fcc 	andi	r2,r2,255
   84e6c:	e0bffe15 	stw	r2,-8(fp)
   84e70:	00002a06 	br	84f1c <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height/2){
   84e74:	e0bfff17 	ldw	r2,-4(fp)
   84e78:	10800217 	ldw	r2,8(r2)
   84e7c:	1006d7fa 	srli	r3,r2,31
   84e80:	1885883a 	add	r2,r3,r2
   84e84:	1005d07a 	srai	r2,r2,1
   84e88:	e0fffd17 	ldw	r3,-12(fp)
   84e8c:	1880050e 	bge	r3,r2,84ea4 <VPG_ColorBar+0xc8>
                Value32 = (x & 0xFF) << 8;
   84e90:	e0bffc17 	ldw	r2,-16(fp)
   84e94:	1004923a 	slli	r2,r2,8
   84e98:	10bfffcc 	andi	r2,r2,65535
   84e9c:	e0bffe15 	stw	r2,-8(fp)
   84ea0:	00001e06 	br	84f1c <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height*3/4){
   84ea4:	e0bfff17 	ldw	r2,-4(fp)
   84ea8:	10c00217 	ldw	r3,8(r2)
   84eac:	1805883a 	mov	r2,r3
   84eb0:	1085883a 	add	r2,r2,r2
   84eb4:	10c5883a 	add	r2,r2,r3
   84eb8:	1000010e 	bge	r2,zero,84ec0 <VPG_ColorBar+0xe4>
   84ebc:	108000c4 	addi	r2,r2,3
   84ec0:	1005d0ba 	srai	r2,r2,2
   84ec4:	e0fffd17 	ldw	r3,-12(fp)
   84ec8:	1880050e 	bge	r3,r2,84ee0 <VPG_ColorBar+0x104>
                Value32 = (x & 0xFF) << 16;
   84ecc:	e0bffc17 	ldw	r2,-16(fp)
   84ed0:	10803fcc 	andi	r2,r2,255
   84ed4:	1004943a 	slli	r2,r2,16
   84ed8:	e0bffe15 	stw	r2,-8(fp)
   84edc:	00000f06 	br	84f1c <VPG_ColorBar+0x140>
            }else{
                Value32 = x & 0xFF;
   84ee0:	e0bffc17 	ldw	r2,-16(fp)
   84ee4:	10803fcc 	andi	r2,r2,255
   84ee8:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 8;
   84eec:	e0bffc17 	ldw	r2,-16(fp)
   84ef0:	1004923a 	slli	r2,r2,8
   84ef4:	10bfffcc 	andi	r2,r2,65535
   84ef8:	e0fffe17 	ldw	r3,-8(fp)
   84efc:	1884b03a 	or	r2,r3,r2
   84f00:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 16;
   84f04:	e0bffc17 	ldw	r2,-16(fp)
   84f08:	10803fcc 	andi	r2,r2,255
   84f0c:	1004943a 	slli	r2,r2,16
   84f10:	e0fffe17 	ldw	r3,-8(fp)
   84f14:	1884b03a 	or	r2,r3,r2
   84f18:	e0bffe15 	stw	r2,-8(fp)
            }
            vid_set_pixel(x,y,Value32, pDisplay);
   84f1c:	e13ffc17 	ldw	r4,-16(fp)
   84f20:	e17ffd17 	ldw	r5,-12(fp)
   84f24:	e1bffe17 	ldw	r6,-8(fp)
   84f28:	e1ffff17 	ldw	r7,-4(fp)
   84f2c:	0081a740 	call	81a74 <vid_set_pixel>
void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84f30:	e0bffc17 	ldw	r2,-16(fp)
   84f34:	10800044 	addi	r2,r2,1
   84f38:	e0bffc15 	stw	r2,-16(fp)
   84f3c:	e0bfff17 	ldw	r2,-4(fp)
   84f40:	10800117 	ldw	r2,4(r2)
   84f44:	e0fffc17 	ldw	r3,-16(fp)
   84f48:	18bfad16 	blt	r3,r2,84e00 <__alt_data_end+0xfffccb90>

void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
   84f4c:	e0bffd17 	ldw	r2,-12(fp)
   84f50:	10800044 	addi	r2,r2,1
   84f54:	e0bffd15 	stw	r2,-12(fp)
   84f58:	e0bfff17 	ldw	r2,-4(fp)
   84f5c:	10800217 	ldw	r2,8(r2)
   84f60:	e0fffd17 	ldw	r3,-12(fp)
   84f64:	18bfa416 	blt	r3,r2,84df8 <__alt_data_end+0xfffccb88>

        }

    }

}
   84f68:	e037883a 	mov	sp,fp
   84f6c:	dfc00117 	ldw	ra,4(sp)
   84f70:	df000017 	ldw	fp,0(sp)
   84f74:	dec00204 	addi	sp,sp,8
   84f78:	f800283a 	ret

00084f7c <GUI_ShowPAT>:


void GUI_ShowPAT(alt_video_display *pDisplay, int PatId){
   84f7c:	defffc04 	addi	sp,sp,-16
   84f80:	dfc00315 	stw	ra,12(sp)
   84f84:	df000215 	stw	fp,8(sp)
   84f88:	df000204 	addi	fp,sp,8
   84f8c:	e13ffe15 	stw	r4,-8(fp)
   84f90:	e17fff15 	stw	r5,-4(fp)

                switch(PatId){
   84f94:	e0bfff17 	ldw	r2,-4(fp)
   84f98:	108003e8 	cmpgeui	r2,r2,15
   84f9c:	1000521e 	bne	r2,zero,850e8 <GUI_ShowPAT+0x16c>
   84fa0:	e0bfff17 	ldw	r2,-4(fp)
   84fa4:	1085883a 	add	r2,r2,r2
   84fa8:	1087883a 	add	r3,r2,r2
   84fac:	00800234 	movhi	r2,8
   84fb0:	1093f004 	addi	r2,r2,20416
   84fb4:	1885883a 	add	r2,r3,r2
   84fb8:	10800017 	ldw	r2,0(r2)
   84fbc:	1000683a 	jmp	r2
   84fc0:	00084ffc 	xorhi	zero,zero,8511
   84fc4:	00085008 	cmpgei	zero,zero,8512
   84fc8:	0008501c 	xori	zero,zero,8512
   84fcc:	0008502c 	andhi	zero,zero,8512
   84fd0:	0008503c 	xorhi	zero,zero,8512
   84fd4:	0008504c 	andi	zero,zero,8513
   84fd8:	00085058 	cmpnei	zero,zero,8513
   84fdc:	00085068 	cmpgeui	zero,zero,8513
   84fe0:	00085078 	rdprs	zero,zero,8513
   84fe4:	00085088 	cmpgei	zero,zero,8514
   84fe8:	00085098 	cmpnei	zero,zero,8514
   84fec:	000850a8 	cmpgeui	zero,zero,8514
   84ff0:	000850b8 	rdprs	zero,zero,8514
   84ff4:	000850c8 	cmpgei	zero,zero,8515
   84ff8:	000850d8 	cmpnei	zero,zero,8515
                    case 0: VPG_ColorBar(pDisplay); break;
   84ffc:	e13ffe17 	ldw	r4,-8(fp)
   85000:	0084ddc0 	call	84ddc <VPG_ColorBar>
   85004:	00003806 	br	850e8 <GUI_ShowPAT+0x16c>
                    case 1: VPG_ColorPanel(pDisplay, WHITE_24); break;
   85008:	e13ffe17 	ldw	r4,-8(fp)
   8500c:	01404034 	movhi	r5,256
   85010:	297fffc4 	addi	r5,r5,-1
   85014:	0084a680 	call	84a68 <VPG_ColorPanel>
   85018:	00003306 	br	850e8 <GUI_ShowPAT+0x16c>
                    case 2: VPG_ColorPanel(pDisplay, RED_24); break;
   8501c:	e13ffe17 	ldw	r4,-8(fp)
   85020:	01403ff4 	movhi	r5,255
   85024:	0084a680 	call	84a68 <VPG_ColorPanel>
   85028:	00002f06 	br	850e8 <GUI_ShowPAT+0x16c>
                    case 3: VPG_ColorPanel(pDisplay, GREEN_24); break;
   8502c:	e13ffe17 	ldw	r4,-8(fp)
   85030:	01600014 	movui	r5,32768
   85034:	0084a680 	call	84a68 <VPG_ColorPanel>
   85038:	00002b06 	br	850e8 <GUI_ShowPAT+0x16c>
                    case 4: VPG_ColorPanel(pDisplay, BLUE_24); break;
   8503c:	e13ffe17 	ldw	r4,-8(fp)
   85040:	01403fc4 	movi	r5,255
   85044:	0084a680 	call	84a68 <VPG_ColorPanel>
   85048:	00002706 	br	850e8 <GUI_ShowPAT+0x16c>
                    case 5: VPG_XLine(pDisplay); break;
   8504c:	e13ffe17 	ldw	r4,-8(fp)
   85050:	0084a440 	call	84a44 <VPG_XLine>
   85054:	00002406 	br	850e8 <GUI_ShowPAT+0x16c>
                    case 6: VPG_VGrid(pDisplay, 2); break;
   85058:	e13ffe17 	ldw	r4,-8(fp)
   8505c:	01400084 	movi	r5,2
   85060:	0084c140 	call	84c14 <VPG_VGrid>
   85064:	00002006 	br	850e8 <GUI_ShowPAT+0x16c>
                    case 7: VPG_VGrid(pDisplay, 4); break;
   85068:	e13ffe17 	ldw	r4,-8(fp)
   8506c:	01400104 	movi	r5,4
   85070:	0084c140 	call	84c14 <VPG_VGrid>
   85074:	00001c06 	br	850e8 <GUI_ShowPAT+0x16c>
                    case 8: VPG_VGrid(pDisplay, 8); break;
   85078:	e13ffe17 	ldw	r4,-8(fp)
   8507c:	01400204 	movi	r5,8
   85080:	0084c140 	call	84c14 <VPG_VGrid>
   85084:	00001806 	br	850e8 <GUI_ShowPAT+0x16c>
                    case 9: VPG_HGrid(pDisplay, 2); break;
   85088:	e13ffe17 	ldw	r4,-8(fp)
   8508c:	01400084 	movi	r5,2
   85090:	0084cf80 	call	84cf8 <VPG_HGrid>
   85094:	00001406 	br	850e8 <GUI_ShowPAT+0x16c>
                    case 10: VPG_HGrid(pDisplay, 4); break;
   85098:	e13ffe17 	ldw	r4,-8(fp)
   8509c:	01400104 	movi	r5,4
   850a0:	0084cf80 	call	84cf8 <VPG_HGrid>
   850a4:	00001006 	br	850e8 <GUI_ShowPAT+0x16c>
                    case 11: VPG_HGrid(pDisplay, 8); break;
   850a8:	e13ffe17 	ldw	r4,-8(fp)
   850ac:	01400204 	movi	r5,8
   850b0:	0084cf80 	call	84cf8 <VPG_HGrid>
   850b4:	00000c06 	br	850e8 <GUI_ShowPAT+0x16c>
                    case 12: VPG_Grid(pDisplay, 2); break;
   850b8:	e13ffe17 	ldw	r4,-8(fp)
   850bc:	01400084 	movi	r5,2
   850c0:	0084b180 	call	84b18 <VPG_Grid>
   850c4:	00000806 	br	850e8 <GUI_ShowPAT+0x16c>
                    case 13: VPG_Grid(pDisplay, 4); break;
   850c8:	e13ffe17 	ldw	r4,-8(fp)
   850cc:	01400104 	movi	r5,4
   850d0:	0084b180 	call	84b18 <VPG_Grid>
   850d4:	00000406 	br	850e8 <GUI_ShowPAT+0x16c>
                    case 14: VPG_Grid(pDisplay, 8); break;
   850d8:	e13ffe17 	ldw	r4,-8(fp)
   850dc:	01400204 	movi	r5,8
   850e0:	0084b180 	call	84b18 <VPG_Grid>
   850e4:	0001883a 	nop
                }

}
   850e8:	e037883a 	mov	sp,fp
   850ec:	dfc00117 	ldw	ra,4(sp)
   850f0:	df000017 	ldw	fp,0(sp)
   850f4:	dec00204 	addi	sp,sp,8
   850f8:	f800283a 	ret

000850fc <GUI_VPG>:

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
   850fc:	defff904 	addi	sp,sp,-28
   85100:	dfc00615 	stw	ra,24(sp)
   85104:	df000515 	stw	fp,20(sp)
   85108:	df000504 	addi	fp,sp,20
   8510c:	e13ffe15 	stw	r4,-8(fp)
   85110:	e17fff15 	stw	r5,-4(fp)
	int X, Y;
	int PatId = 0;
   85114:	e03ffb15 	stw	zero,-20(fp)

    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
   85118:	e13ffe17 	ldw	r4,-8(fp)
   8511c:	000b883a 	mov	r5,zero
   85120:	0080fd00 	call	80fd0 <vid_clean_screen>


    VPG_ColorBar(pDisplay);
   85124:	e13ffe17 	ldw	r4,-8(fp)
   85128:	0084ddc0 	call	84ddc <VPG_ColorBar>

    GUI_ShowPAT(pDisplay, PatId);
   8512c:	e13ffe17 	ldw	r4,-8(fp)
   85130:	e17ffb17 	ldw	r5,-20(fp)
   85134:	0084f7c0 	call	84f7c <GUI_ShowPAT>

    while(1){
        if (Touch_GetXY(pTouch, &X, &Y)){
   85138:	e0fffc04 	addi	r3,fp,-16
   8513c:	e0bffd04 	addi	r2,fp,-12
   85140:	e13fff17 	ldw	r4,-4(fp)
   85144:	180b883a 	mov	r5,r3
   85148:	100d883a 	mov	r6,r2
   8514c:	0086a300 	call	86a30 <Touch_GetXY>
   85150:	10001426 	beq	r2,zero,851a4 <GUI_VPG+0xa8>
            //printf(".");

            // change pattern
            PatId++;
   85154:	e0bffb17 	ldw	r2,-20(fp)
   85158:	10800044 	addi	r2,r2,1
   8515c:	e0bffb15 	stw	r2,-20(fp)
            if (PatId > 14)
   85160:	e0bffb17 	ldw	r2,-20(fp)
   85164:	108003d0 	cmplti	r2,r2,15
   85168:	1000011e 	bne	r2,zero,85170 <GUI_VPG+0x74>
                PatId = 0;
   8516c:	e03ffb15 	stw	zero,-20(fp)

            printf("PatId=%d\r\n", PatId);
   85170:	010002b4 	movhi	r4,10
   85174:	211b1a04 	addi	r4,r4,27752
   85178:	e17ffb17 	ldw	r5,-20(fp)
   8517c:	008a2d00 	call	8a2d0 <printf>
            GUI_ShowPAT(pDisplay, PatId);
   85180:	e13ffe17 	ldw	r4,-8(fp)
   85184:	e17ffb17 	ldw	r5,-20(fp)
   85188:	0084f7c0 	call	84f7c <GUI_ShowPAT>
            usleep(300*1000); // debounce
   8518c:	01000174 	movhi	r4,5
   85190:	2124f804 	addi	r4,r4,-27680
   85194:	008bbbc0 	call	8bbbc <usleep>
            Touch_EmptyFifo( pTouch);
   85198:	e13fff17 	ldw	r4,-4(fp)
   8519c:	00869f80 	call	869f8 <Touch_EmptyFifo>
        }
    }
   851a0:	003fe506 	br	85138 <__alt_data_end+0xfffccec8>
   851a4:	003fe406 	br	85138 <__alt_data_end+0xfffccec8>

000851a8 <main>:
#include "system.h"

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch);

int main()
{
   851a8:	defff704 	addi	sp,sp,-36
   851ac:	dfc00815 	stw	ra,32(sp)
   851b0:	df000715 	stw	fp,28(sp)
   851b4:	df000704 	addi	fp,sp,28
	TOUCH_HANDLE *pTouch;
	alt_video_display Display;


    const bool bVPG = ((IORD(KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
   851b8:	00800434 	movhi	r2,16
   851bc:	10841004 	addi	r2,r2,4160
   851c0:	10800037 	ldwio	r2,0(r2)
   851c4:	1080004c 	andi	r2,r2,1
   851c8:	1005003a 	cmpeq	r2,r2,zero
   851cc:	10803fcc 	andi	r2,r2,255
   851d0:	e0bff915 	stw	r2,-28(fp)

   printf("LT24 Demo!\n");
   851d4:	010002b4 	movhi	r4,10
   851d8:	211b1d04 	addi	r4,r4,27764
   851dc:	008a39c0 	call	8a39c <puts>

   // init touch
   pTouch = Touch_Init(TOUCH_PANEL_SPI_BASE, TOUCH_PANEL_PEN_IRQ_N_BASE, TOUCH_PANEL_PEN_IRQ_N_IRQ);
   851e0:	01000434 	movhi	r4,16
   851e4:	21040004 	addi	r4,r4,4096
   851e8:	01400434 	movhi	r5,16
   851ec:	29441c04 	addi	r5,r5,4208
   851f0:	01800144 	movi	r6,5
   851f4:	00868200 	call	86820 <Touch_Init>
   851f8:	e0bffa15 	stw	r2,-24(fp)
   if (!pTouch){
   851fc:	e0bffa17 	ldw	r2,-24(fp)
   85200:	1000041e 	bne	r2,zero,85214 <main+0x6c>
       printf("Failed to init touch\r\n");
   85204:	010002b4 	movhi	r4,10
   85208:	211b2004 	addi	r4,r4,27776
   8520c:	008a39c0 	call	8a39c <puts>
   85210:	00000306 	br	85220 <main+0x78>
   }else{
       printf("Init touch successfully\r\n");
   85214:	010002b4 	movhi	r4,10
   85218:	211b2604 	addi	r4,r4,27800
   8521c:	008a39c0 	call	8a39c <puts>

   }

   // init LCD
   LCD_Init();
   85220:	008074c0 	call	8074c <LCD_Init>
   LCD_Clear(0X0000);
   85224:	0009883a 	mov	r4,zero
   85228:	00806600 	call	80660 <LCD_Clear>

   Display.interlace = 0;
   8522c:	e03fff15 	stw	zero,-4(fp)
   Display.bytes_per_pixel = 2;
   85230:	00800084 	movi	r2,2
   85234:	e0bffe15 	stw	r2,-8(fp)
   Display.color_depth = 16;
   85238:	00800404 	movi	r2,16
   8523c:	e0bffb15 	stw	r2,-20(fp)
   Display.height = SCREEN_HEIGHT;
   85240:	00805004 	movi	r2,320
   85244:	e0bffd15 	stw	r2,-12(fp)
   Display.width = SCREEN_WIDTH;
   85248:	00803c04 	movi	r2,240
   8524c:	e0bffc15 	stw	r2,-16(fp)

   // run demo
   if (bVPG)
   85250:	e0bff917 	ldw	r2,-28(fp)
   85254:	10000526 	beq	r2,zero,8526c <main+0xc4>
       GUI_VPG(&Display, pTouch); // enter vpg mode when users press KEY0
   85258:	e0bffb04 	addi	r2,fp,-20
   8525c:	1009883a 	mov	r4,r2
   85260:	e17ffa17 	ldw	r5,-24(fp)
   85264:	00850fc0 	call	850fc <GUI_VPG>
   85268:	00000406 	br	8527c <main+0xd4>
   else
	   GUI(&Display, pTouch);
   8526c:	e0bffb04 	addi	r2,fp,-20
   85270:	1009883a 	mov	r4,r2
   85274:	e17ffa17 	ldw	r5,-24(fp)
   85278:	00847040 	call	84704 <GUI>


}
   8527c:	e037883a 	mov	sp,fp
   85280:	dfc00117 	ldw	ra,4(sp)
   85284:	df000017 	ldw	fp,0(sp)
   85288:	dec00204 	addi	sp,sp,8
   8528c:	f800283a 	ret

00085290 <my_wait>:
    #define I2C_DEBUG(x)    DEBUG(x)  
#else
    #define I2C_DEBUG(x)
#endif

void my_wait(int nWait){
   85290:	defffd04 	addi	sp,sp,-12
   85294:	df000215 	stw	fp,8(sp)
   85298:	df000204 	addi	fp,sp,8
   8529c:	e13fff15 	stw	r4,-4(fp)
    int i;
    i = 0;
   852a0:	e03ffe15 	stw	zero,-8(fp)
    while (i < nWait){
   852a4:	00000306 	br	852b4 <my_wait+0x24>
        i++;
   852a8:	e0bffe17 	ldw	r2,-8(fp)
   852ac:	10800044 	addi	r2,r2,1
   852b0:	e0bffe15 	stw	r2,-8(fp)
#endif

void my_wait(int nWait){
    int i;
    i = 0;
    while (i < nWait){
   852b4:	e0fffe17 	ldw	r3,-8(fp)
   852b8:	e0bfff17 	ldw	r2,-4(fp)
   852bc:	18bffa16 	blt	r3,r2,852a8 <__alt_data_end+0xfffcd038>
        i++;
     //   IOWR(LED_BASE, 0, i);
    }    
}
   852c0:	e037883a 	mov	sp,fp
   852c4:	df000017 	ldw	fp,0(sp)
   852c8:	dec00104 	addi	sp,sp,4
   852cc:	f800283a 	ret

000852d0 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
   852d0:	defff804 	addi	sp,sp,-32
   852d4:	dfc00715 	stw	ra,28(sp)
   852d8:	df000615 	stw	fp,24(sp)
   852dc:	df000604 	addi	fp,sp,24
   852e0:	e13ffb15 	stw	r4,-20(fp)
   852e4:	e17ffc15 	stw	r5,-16(fp)
   852e8:	3009883a 	mov	r4,r6
   852ec:	3807883a 	mov	r3,r7
   852f0:	e0800217 	ldw	r2,8(fp)
   852f4:	e13ffd05 	stb	r4,-12(fp)
   852f8:	e0fffe05 	stb	r3,-8(fp)
   852fc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   85300:	00800044 	movi	r2,1
   85304:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   85308:	e13ffb17 	ldw	r4,-20(fp)
   8530c:	e17ffc17 	ldw	r5,-16(fp)
   85310:	00859240 	call	85924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   85314:	e0bffd03 	ldbu	r2,-12(fp)
   85318:	10803fcc 	andi	r2,r2,255
   8531c:	e13ffb17 	ldw	r4,-20(fp)
   85320:	e17ffc17 	ldw	r5,-16(fp)
   85324:	100d883a 	mov	r6,r2
   85328:	0085a180 	call	85a18 <i2c_write>
   8532c:	1000041e 	bne	r2,zero,85340 <I2C_Write+0x70>
        bSuccess = FALSE;
   85330:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   85334:	010002b4 	movhi	r4,10
   85338:	211b2d04 	addi	r4,r4,27828
   8533c:	00864080 	call	86408 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   85340:	e0bffa17 	ldw	r2,-24(fp)
   85344:	10000a26 	beq	r2,zero,85370 <I2C_Write+0xa0>
   85348:	e0bffe03 	ldbu	r2,-8(fp)
   8534c:	e13ffb17 	ldw	r4,-20(fp)
   85350:	e17ffc17 	ldw	r5,-16(fp)
   85354:	100d883a 	mov	r6,r2
   85358:	0085a180 	call	85a18 <i2c_write>
   8535c:	1000041e 	bne	r2,zero,85370 <I2C_Write+0xa0>
        bSuccess = FALSE;
   85360:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
   85364:	010002b4 	movhi	r4,10
   85368:	211b3504 	addi	r4,r4,27860
   8536c:	00864080 	call	86408 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
   85370:	e0bffa17 	ldw	r2,-24(fp)
   85374:	10000a26 	beq	r2,zero,853a0 <I2C_Write+0xd0>
   85378:	e0bfff03 	ldbu	r2,-4(fp)
   8537c:	e13ffb17 	ldw	r4,-20(fp)
   85380:	e17ffc17 	ldw	r5,-16(fp)
   85384:	100d883a 	mov	r6,r2
   85388:	0085a180 	call	85a18 <i2c_write>
   8538c:	1000041e 	bne	r2,zero,853a0 <I2C_Write+0xd0>
        bSuccess = FALSE;
   85390:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   85394:	010002b4 	movhi	r4,10
   85398:	211b3e04 	addi	r4,r4,27896
   8539c:	00864080 	call	86408 <myprintf>
    }
    i2c_stop(clk_base, data_base);
   853a0:	e13ffb17 	ldw	r4,-20(fp)
   853a4:	e17ffc17 	ldw	r5,-16(fp)
   853a8:	00859a80 	call	859a8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   853ac:	0106d604 	movi	r4,7000
   853b0:	008bbbc0 	call	8bbbc <usleep>
    
    return bSuccess;
   853b4:	e0bffa17 	ldw	r2,-24(fp)

    
}
   853b8:	e037883a 	mov	sp,fp
   853bc:	dfc00117 	ldw	ra,4(sp)
   853c0:	df000017 	ldw	fp,0(sp)
   853c4:	dec00204 	addi	sp,sp,8
   853c8:	f800283a 	ret

000853cc <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
   853cc:	defff704 	addi	sp,sp,-36
   853d0:	dfc00815 	stw	ra,32(sp)
   853d4:	df000715 	stw	fp,28(sp)
   853d8:	df000704 	addi	fp,sp,28
   853dc:	e13ffb15 	stw	r4,-20(fp)
   853e0:	e17ffc15 	stw	r5,-16(fp)
   853e4:	3009883a 	mov	r4,r6
   853e8:	3807883a 	mov	r3,r7
   853ec:	e0800217 	ldw	r2,8(fp)
   853f0:	e13ffd05 	stb	r4,-12(fp)
   853f4:	e0fffe05 	stb	r3,-8(fp)
   853f8:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
   853fc:	00800044 	movi	r2,1
   85400:	e0bff915 	stw	r2,-28(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
   85404:	e0bfff0b 	ldhu	r2,-4(fp)
   85408:	1004d23a 	srli	r2,r2,8
   8540c:	e0bffa05 	stb	r2,-24(fp)
    LowByte = ControlData & 0xFF; 
   85410:	e0bfff0b 	ldhu	r2,-4(fp)
   85414:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   85418:	e13ffb17 	ldw	r4,-20(fp)
   8541c:	e17ffc17 	ldw	r5,-16(fp)
   85420:	00859240 	call	85924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   85424:	e0bffd03 	ldbu	r2,-12(fp)
   85428:	10803fcc 	andi	r2,r2,255
   8542c:	e13ffb17 	ldw	r4,-20(fp)
   85430:	e17ffc17 	ldw	r5,-16(fp)
   85434:	100d883a 	mov	r6,r2
   85438:	0085a180 	call	85a18 <i2c_write>
   8543c:	1000041e 	bne	r2,zero,85450 <I2C_Write16+0x84>
        bSuccess = FALSE;
   85440:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   85444:	010002b4 	movhi	r4,10
   85448:	211b2d04 	addi	r4,r4,27828
   8544c:	00864080 	call	86408 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   85450:	e0bff917 	ldw	r2,-28(fp)
   85454:	10000a26 	beq	r2,zero,85480 <I2C_Write16+0xb4>
   85458:	e0bffe03 	ldbu	r2,-8(fp)
   8545c:	e13ffb17 	ldw	r4,-20(fp)
   85460:	e17ffc17 	ldw	r5,-16(fp)
   85464:	100d883a 	mov	r6,r2
   85468:	0085a180 	call	85a18 <i2c_write>
   8546c:	1000041e 	bne	r2,zero,85480 <I2C_Write16+0xb4>
        bSuccess = FALSE;
   85470:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
   85474:	010002b4 	movhi	r4,10
   85478:	211b3504 	addi	r4,r4,27860
   8547c:	00864080 	call	86408 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
   85480:	e0bff917 	ldw	r2,-28(fp)
   85484:	10000a26 	beq	r2,zero,854b0 <I2C_Write16+0xe4>
   85488:	e0bffa03 	ldbu	r2,-24(fp)
   8548c:	e13ffb17 	ldw	r4,-20(fp)
   85490:	e17ffc17 	ldw	r5,-16(fp)
   85494:	100d883a 	mov	r6,r2
   85498:	0085a180 	call	85a18 <i2c_write>
   8549c:	1000041e 	bne	r2,zero,854b0 <I2C_Write16+0xe4>
        bSuccess = FALSE;
   854a0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   854a4:	010002b4 	movhi	r4,10
   854a8:	211b3e04 	addi	r4,r4,27896
   854ac:	00864080 	call	86408 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
   854b0:	e0bff917 	ldw	r2,-28(fp)
   854b4:	10000a26 	beq	r2,zero,854e0 <I2C_Write16+0x114>
   854b8:	e0bffa43 	ldbu	r2,-23(fp)
   854bc:	e13ffb17 	ldw	r4,-20(fp)
   854c0:	e17ffc17 	ldw	r5,-16(fp)
   854c4:	100d883a 	mov	r6,r2
   854c8:	0085a180 	call	85a18 <i2c_write>
   854cc:	1000041e 	bne	r2,zero,854e0 <I2C_Write16+0x114>
        bSuccess = FALSE;
   854d0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   854d4:	010002b4 	movhi	r4,10
   854d8:	211b3e04 	addi	r4,r4,27896
   854dc:	00864080 	call	86408 <myprintf>
    }    
    i2c_stop(clk_base, data_base);
   854e0:	e13ffb17 	ldw	r4,-20(fp)
   854e4:	e17ffc17 	ldw	r5,-16(fp)
   854e8:	00859a80 	call	859a8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   854ec:	0106d604 	movi	r4,7000
   854f0:	008bbbc0 	call	8bbbc <usleep>
    
    return bSuccess;
   854f4:	e0bff917 	ldw	r2,-28(fp)

    
}
   854f8:	e037883a 	mov	sp,fp
   854fc:	dfc00117 	ldw	ra,4(sp)
   85500:	df000017 	ldw	fp,0(sp)
   85504:	dec00204 	addi	sp,sp,8
   85508:	f800283a 	ret

0008550c <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
   8550c:	defff904 	addi	sp,sp,-28
   85510:	dfc00615 	stw	ra,24(sp)
   85514:	df000515 	stw	fp,20(sp)
   85518:	df000504 	addi	fp,sp,20
   8551c:	e13ffc15 	stw	r4,-16(fp)
   85520:	e17ffd15 	stw	r5,-12(fp)
   85524:	3007883a 	mov	r3,r6
   85528:	3805883a 	mov	r2,r7
   8552c:	e0fffe05 	stb	r3,-8(fp)
   85530:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   85534:	00800044 	movi	r2,1
   85538:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   8553c:	e13ffc17 	ldw	r4,-16(fp)
   85540:	e17ffd17 	ldw	r5,-12(fp)
   85544:	00859240 	call	85924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   85548:	e0bffe03 	ldbu	r2,-8(fp)
   8554c:	10803fcc 	andi	r2,r2,255
   85550:	e13ffc17 	ldw	r4,-16(fp)
   85554:	e17ffd17 	ldw	r5,-12(fp)
   85558:	100d883a 	mov	r6,r2
   8555c:	0085a180 	call	85a18 <i2c_write>
   85560:	1000041e 	bne	r2,zero,85574 <I2C_Read+0x68>
        bSuccess = FALSE;
   85564:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(1) Fail: Address NACK!\n"));
   85568:	010002b4 	movhi	r4,10
   8556c:	211b4604 	addi	r4,r4,27928
   85570:	00864080 	call	86408 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   85574:	e0bffb17 	ldw	r2,-20(fp)
   85578:	10000a26 	beq	r2,zero,855a4 <I2C_Read+0x98>
   8557c:	e0bfff03 	ldbu	r2,-4(fp)
   85580:	e13ffc17 	ldw	r4,-16(fp)
   85584:	e17ffd17 	ldw	r5,-12(fp)
   85588:	100d883a 	mov	r6,r2
   8558c:	0085a180 	call	85a18 <i2c_write>
   85590:	1000041e 	bne	r2,zero,855a4 <I2C_Read+0x98>
        bSuccess = FALSE;
   85594:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(2) Fail: SubAddress NACK!\n"));
   85598:	010002b4 	movhi	r4,10
   8559c:	211b4f04 	addi	r4,r4,27964
   855a0:	00864080 	call	86408 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
   855a4:	e13ffc17 	ldw	r4,-16(fp)
   855a8:	e17ffd17 	ldw	r5,-12(fp)
   855ac:	00859240 	call	85924 <i2c_start>
    DeviceAddr |= 1; // Read
   855b0:	e0bffe03 	ldbu	r2,-8(fp)
   855b4:	10800054 	ori	r2,r2,1
   855b8:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   855bc:	e0bffb17 	ldw	r2,-20(fp)
   855c0:	10000b26 	beq	r2,zero,855f0 <I2C_Read+0xe4>
   855c4:	e0bffe03 	ldbu	r2,-8(fp)
   855c8:	10803fcc 	andi	r2,r2,255
   855cc:	e13ffc17 	ldw	r4,-16(fp)
   855d0:	e17ffd17 	ldw	r5,-12(fp)
   855d4:	100d883a 	mov	r6,r2
   855d8:	0085a180 	call	85a18 <i2c_write>
   855dc:	1000041e 	bne	r2,zero,855f0 <I2C_Read+0xe4>
        bSuccess = FALSE;
   855e0:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(3) Fail: Address+1 NACK!\n"));
   855e4:	010002b4 	movhi	r4,10
   855e8:	211b5804 	addi	r4,r4,28000
   855ec:	00864080 	call	86408 <myprintf>
    }
    
    if (bSuccess){
   855f0:	e0bffb17 	ldw	r2,-20(fp)
   855f4:	10000526 	beq	r2,zero,8560c <I2C_Read+0x100>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   855f8:	e13ffc17 	ldw	r4,-16(fp)
   855fc:	e17ffd17 	ldw	r5,-12(fp)
   85600:	e1800217 	ldw	r6,8(fp)
   85604:	000f883a 	mov	r7,zero
   85608:	0085b780 	call	85b78 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
   8560c:	e13ffc17 	ldw	r4,-16(fp)
   85610:	e17ffd17 	ldw	r5,-12(fp)
   85614:	00859a80 	call	859a8 <i2c_stop>
    
    return bSuccess;
   85618:	e0bffb17 	ldw	r2,-20(fp)
}
   8561c:	e037883a 	mov	sp,fp
   85620:	dfc00117 	ldw	ra,4(sp)
   85624:	df000017 	ldw	fp,0(sp)
   85628:	dec00204 	addi	sp,sp,8
   8562c:	f800283a 	ret

00085630 <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
   85630:	defff804 	addi	sp,sp,-32
   85634:	dfc00715 	stw	ra,28(sp)
   85638:	df000615 	stw	fp,24(sp)
   8563c:	df000604 	addi	fp,sp,24
   85640:	e13ffc15 	stw	r4,-16(fp)
   85644:	e17ffd15 	stw	r5,-12(fp)
   85648:	3007883a 	mov	r3,r6
   8564c:	3805883a 	mov	r2,r7
   85650:	e0fffe05 	stb	r3,-8(fp)
   85654:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   85658:	00800044 	movi	r2,1
   8565c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   85660:	e13ffc17 	ldw	r4,-16(fp)
   85664:	e17ffd17 	ldw	r5,-12(fp)
   85668:	00859240 	call	85924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8566c:	e0bffe03 	ldbu	r2,-8(fp)
   85670:	10803fcc 	andi	r2,r2,255
   85674:	e13ffc17 	ldw	r4,-16(fp)
   85678:	e17ffd17 	ldw	r5,-12(fp)
   8567c:	100d883a 	mov	r6,r2
   85680:	0085a180 	call	85a18 <i2c_write>
   85684:	1000041e 	bne	r2,zero,85698 <I2C_Read16+0x68>
        bSuccess = FALSE;
   85688:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   8568c:	010002b4 	movhi	r4,10
   85690:	211b2d04 	addi	r4,r4,27828
   85694:	00864080 	call	86408 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   85698:	e0bffa17 	ldw	r2,-24(fp)
   8569c:	10000a26 	beq	r2,zero,856c8 <I2C_Read16+0x98>
   856a0:	e0bfff03 	ldbu	r2,-4(fp)
   856a4:	e13ffc17 	ldw	r4,-16(fp)
   856a8:	e17ffd17 	ldw	r5,-12(fp)
   856ac:	100d883a 	mov	r6,r2
   856b0:	0085a180 	call	85a18 <i2c_write>
   856b4:	1000041e 	bne	r2,zero,856c8 <I2C_Read16+0x98>
        bSuccess = FALSE;
   856b8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
   856bc:	010002b4 	movhi	r4,10
   856c0:	211b3504 	addi	r4,r4,27860
   856c4:	00864080 	call	86408 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
   856c8:	e13ffc17 	ldw	r4,-16(fp)
   856cc:	e17ffd17 	ldw	r5,-12(fp)
   856d0:	00859240 	call	85924 <i2c_start>
    DeviceAddr |= 1; // Read
   856d4:	e0bffe03 	ldbu	r2,-8(fp)
   856d8:	10800054 	ori	r2,r2,1
   856dc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   856e0:	e0bffa17 	ldw	r2,-24(fp)
   856e4:	10000b26 	beq	r2,zero,85714 <I2C_Read16+0xe4>
   856e8:	e0bffe03 	ldbu	r2,-8(fp)
   856ec:	10803fcc 	andi	r2,r2,255
   856f0:	e13ffc17 	ldw	r4,-16(fp)
   856f4:	e17ffd17 	ldw	r5,-12(fp)
   856f8:	100d883a 	mov	r6,r2
   856fc:	0085a180 	call	85a18 <i2c_write>
   85700:	1000041e 	bne	r2,zero,85714 <I2C_Read16+0xe4>
        bSuccess = FALSE;
   85704:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
   85708:	010002b4 	movhi	r4,10
   8570c:	211b6104 	addi	r4,r4,28036
   85710:	00864080 	call	86408 <myprintf>
    }
    
    if (bSuccess){
   85714:	e0bffa17 	ldw	r2,-24(fp)
   85718:	10000626 	beq	r2,zero,85734 <I2C_Read16+0x104>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
   8571c:	e0bffb44 	addi	r2,fp,-19
   85720:	e13ffc17 	ldw	r4,-16(fp)
   85724:	e17ffd17 	ldw	r5,-12(fp)
   85728:	100d883a 	mov	r6,r2
   8572c:	01c00044 	movi	r7,1
   85730:	0085b780 	call	85b78 <i2c_read>
    }        
    if (bSuccess){
   85734:	e0bffa17 	ldw	r2,-24(fp)
   85738:	10000626 	beq	r2,zero,85754 <I2C_Read16+0x124>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
   8573c:	e0bffb04 	addi	r2,fp,-20
   85740:	e13ffc17 	ldw	r4,-16(fp)
   85744:	e17ffd17 	ldw	r5,-12(fp)
   85748:	100d883a 	mov	r6,r2
   8574c:	000f883a 	mov	r7,zero
   85750:	0085b780 	call	85b78 <i2c_read>
    }        
    if (bSuccess)
   85754:	e0bffa17 	ldw	r2,-24(fp)
   85758:	10000a26 	beq	r2,zero,85784 <I2C_Read16+0x154>
        *pControlData = (HighByte << 8) | LowByte;
   8575c:	e0bffb43 	ldbu	r2,-19(fp)
   85760:	10803fcc 	andi	r2,r2,255
   85764:	1004923a 	slli	r2,r2,8
   85768:	1007883a 	mov	r3,r2
   8576c:	e0bffb03 	ldbu	r2,-20(fp)
   85770:	10803fcc 	andi	r2,r2,255
   85774:	1884b03a 	or	r2,r3,r2
   85778:	1007883a 	mov	r3,r2
   8577c:	e0800217 	ldw	r2,8(fp)
   85780:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
   85784:	e13ffc17 	ldw	r4,-16(fp)
   85788:	e17ffd17 	ldw	r5,-12(fp)
   8578c:	00859a80 	call	859a8 <i2c_stop>
    
    return bSuccess;
   85790:	e0bffa17 	ldw	r2,-24(fp)
}
   85794:	e037883a 	mov	sp,fp
   85798:	dfc00117 	ldw	ra,4(sp)
   8579c:	df000017 	ldw	fp,0(sp)
   857a0:	dec00204 	addi	sp,sp,8
   857a4:	f800283a 	ret

000857a8 <I2C_MultipleRead>:


bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
   857a8:	defff704 	addi	sp,sp,-36
   857ac:	dfc00815 	stw	ra,32(sp)
   857b0:	df000715 	stw	fp,28(sp)
   857b4:	df000704 	addi	fp,sp,28
   857b8:	e13ffb15 	stw	r4,-20(fp)
   857bc:	e17ffc15 	stw	r5,-16(fp)
   857c0:	3009883a 	mov	r4,r6
   857c4:	3807883a 	mov	r3,r7
   857c8:	e0800317 	ldw	r2,12(fp)
   857cc:	e13ffd05 	stb	r4,-12(fp)
   857d0:	e0fffe05 	stb	r3,-8(fp)
   857d4:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
   857d8:	00800044 	movi	r2,1
   857dc:	e0bffa15 	stw	r2,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   857e0:	e13ffb17 	ldw	r4,-20(fp)
   857e4:	e17ffc17 	ldw	r5,-16(fp)
   857e8:	00859240 	call	85924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   857ec:	e0bffd03 	ldbu	r2,-12(fp)
   857f0:	10803fcc 	andi	r2,r2,255
   857f4:	e13ffb17 	ldw	r4,-20(fp)
   857f8:	e17ffc17 	ldw	r5,-16(fp)
   857fc:	100d883a 	mov	r6,r2
   85800:	0085a180 	call	85a18 <i2c_write>
   85804:	1000041e 	bne	r2,zero,85818 <I2C_MultipleRead+0x70>
        bSuccess = FALSE;
   85808:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(1) Fail: Address NACK!\n"));
   8580c:	010002b4 	movhi	r4,10
   85810:	211b6a04 	addi	r4,r4,28072
   85814:	00864080 	call	86408 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   85818:	e0bffa17 	ldw	r2,-24(fp)
   8581c:	10000a26 	beq	r2,zero,85848 <I2C_MultipleRead+0xa0>
   85820:	e0bffe03 	ldbu	r2,-8(fp)
   85824:	e13ffb17 	ldw	r4,-20(fp)
   85828:	e17ffc17 	ldw	r5,-16(fp)
   8582c:	100d883a 	mov	r6,r2
   85830:	0085a180 	call	85a18 <i2c_write>
   85834:	1000041e 	bne	r2,zero,85848 <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
   85838:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(2) Fail: SubAddress NACK!\n"));
   8583c:	010002b4 	movhi	r4,10
   85840:	211b7504 	addi	r4,r4,28116
   85844:	00864080 	call	86408 <myprintf>
    }    
    if (bSuccess)        
   85848:	e0bffa17 	ldw	r2,-24(fp)
   8584c:	10000326 	beq	r2,zero,8585c <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
   85850:	e13ffb17 	ldw	r4,-20(fp)
   85854:	e17ffc17 	ldw	r5,-16(fp)
   85858:	00859240 	call	85924 <i2c_start>
    DeviceAddr |= 1; // Read
   8585c:	e0bffd03 	ldbu	r2,-12(fp)
   85860:	10800054 	ori	r2,r2,1
   85864:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   85868:	e0bffa17 	ldw	r2,-24(fp)
   8586c:	10000b26 	beq	r2,zero,8589c <I2C_MultipleRead+0xf4>
   85870:	e0bffd03 	ldbu	r2,-12(fp)
   85874:	10803fcc 	andi	r2,r2,255
   85878:	e13ffb17 	ldw	r4,-20(fp)
   8587c:	e17ffc17 	ldw	r5,-16(fp)
   85880:	100d883a 	mov	r6,r2
   85884:	0085a180 	call	85a18 <i2c_write>
   85888:	1000041e 	bne	r2,zero,8589c <I2C_MultipleRead+0xf4>
        bSuccess = FALSE;
   8588c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
   85890:	010002b4 	movhi	r4,10
   85894:	211b8004 	addi	r4,r4,28160
   85898:	00864080 	call	86408 <myprintf>
    }
    
    if (bSuccess){
   8589c:	e0bffa17 	ldw	r2,-24(fp)
   858a0:	10001726 	beq	r2,zero,85900 <I2C_MultipleRead+0x158>
        for(i=0;i<len && bSuccess;i++){
   858a4:	e03ff915 	stw	zero,-28(fp)
   858a8:	00001006 	br	858ec <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
   858ac:	e0bfff0b 	ldhu	r2,-4(fp)
   858b0:	10ffffc4 	addi	r3,r2,-1
   858b4:	e0bff917 	ldw	r2,-28(fp)
   858b8:	1884c03a 	cmpne	r2,r3,r2
   858bc:	10803fcc 	andi	r2,r2,255
   858c0:	e13ffb17 	ldw	r4,-20(fp)
   858c4:	e17ffc17 	ldw	r5,-16(fp)
   858c8:	e1800217 	ldw	r6,8(fp)
   858cc:	100f883a 	mov	r7,r2
   858d0:	0085b780 	call	85b78 <i2c_read>
            pBuf++;
   858d4:	e0800217 	ldw	r2,8(fp)
   858d8:	10800044 	addi	r2,r2,1
   858dc:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   858e0:	e0bff917 	ldw	r2,-28(fp)
   858e4:	10800044 	addi	r2,r2,1
   858e8:	e0bff915 	stw	r2,-28(fp)
   858ec:	e0bfff0b 	ldhu	r2,-4(fp)
   858f0:	e0fff917 	ldw	r3,-28(fp)
   858f4:	1880020e 	bge	r3,r2,85900 <I2C_MultipleRead+0x158>
   858f8:	e0bffa17 	ldw	r2,-24(fp)
   858fc:	103feb1e 	bne	r2,zero,858ac <__alt_data_end+0xfffcd63c>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
   85900:	e13ffb17 	ldw	r4,-20(fp)
   85904:	e17ffc17 	ldw	r5,-16(fp)
   85908:	00859a80 	call	859a8 <i2c_stop>
    
    return bSuccess;    
   8590c:	e0bffa17 	ldw	r2,-24(fp)
    
}
   85910:	e037883a 	mov	sp,fp
   85914:	dfc00117 	ldw	ra,4(sp)
   85918:	df000017 	ldw	fp,0(sp)
   8591c:	dec00204 	addi	sp,sp,8
   85920:	f800283a 	ret

00085924 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
   85924:	defffc04 	addi	sp,sp,-16
   85928:	dfc00315 	stw	ra,12(sp)
   8592c:	df000215 	stw	fp,8(sp)
   85930:	df000204 	addi	fp,sp,8
   85934:	e13ffe15 	stw	r4,-8(fp)
   85938:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
   8593c:	e0bfff17 	ldw	r2,-4(fp)
   85940:	10800104 	addi	r2,r2,4
   85944:	00c00044 	movi	r3,1
   85948:	10c00035 	stwio	r3,0(r2)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
   8594c:	e0bfff17 	ldw	r2,-4(fp)
   85950:	00c00044 	movi	r3,1
   85954:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
   85958:	e0bffe17 	ldw	r2,-8(fp)
   8595c:	00c00044 	movi	r3,1
   85960:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   85964:	01000584 	movi	r4,22
   85968:	00852900 	call	85290 <my_wait>
     
    SDA_LOW(data_base); // data low
   8596c:	e0bfff17 	ldw	r2,-4(fp)
   85970:	0007883a 	mov	r3,zero
   85974:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
   85978:	01000584 	movi	r4,22
   8597c:	00852900 	call	85290 <my_wait>
    SCL_LOW(clk_base); // clock low
   85980:	e0bffe17 	ldw	r2,-8(fp)
   85984:	0007883a 	mov	r3,zero
   85988:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   8598c:	01000584 	movi	r4,22
   85990:	00852900 	call	85290 <my_wait>
}
   85994:	e037883a 	mov	sp,fp
   85998:	dfc00117 	ldw	ra,4(sp)
   8599c:	df000017 	ldw	fp,0(sp)
   859a0:	dec00204 	addi	sp,sp,8
   859a4:	f800283a 	ret

000859a8 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
   859a8:	defffc04 	addi	sp,sp,-16
   859ac:	dfc00315 	stw	ra,12(sp)
   859b0:	df000215 	stw	fp,8(sp)
   859b4:	df000204 	addi	fp,sp,8
   859b8:	e13ffe15 	stw	r4,-8(fp)
   859bc:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
   859c0:	e0bfff17 	ldw	r2,-4(fp)
   859c4:	10800104 	addi	r2,r2,4
   859c8:	00c00044 	movi	r3,1
   859cc:	10c00035 	stwio	r3,0(r2)
    SDA_LOW(data_base); // Data Low
   859d0:	e0bfff17 	ldw	r2,-4(fp)
   859d4:	0007883a 	mov	r3,zero
   859d8:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
   859dc:	e0bffe17 	ldw	r2,-8(fp)
   859e0:	00c00044 	movi	r3,1
   859e4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
   859e8:	01000584 	movi	r4,22
   859ec:	00852900 	call	85290 <my_wait>
    SDA_HIGH(data_base); // data high
   859f0:	e0bfff17 	ldw	r2,-4(fp)
   859f4:	00c00044 	movi	r3,1
   859f8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
   859fc:	01000584 	movi	r4,22
   85a00:	00852900 	call	85290 <my_wait>
    

    
}
   85a04:	e037883a 	mov	sp,fp
   85a08:	dfc00117 	ldw	ra,4(sp)
   85a0c:	df000017 	ldw	fp,0(sp)
   85a10:	dec00204 	addi	sp,sp,8
   85a14:	f800283a 	ret

00085a18 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
   85a18:	defff704 	addi	sp,sp,-36
   85a1c:	dfc00815 	stw	ra,32(sp)
   85a20:	df000715 	stw	fp,28(sp)
   85a24:	df000704 	addi	fp,sp,28
   85a28:	e13ffd15 	stw	r4,-12(fp)
   85a2c:	e17ffe15 	stw	r5,-8(fp)
   85a30:	3005883a 	mov	r2,r6
   85a34:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
   85a38:	00bfe004 	movi	r2,-128
   85a3c:	e0bff905 	stb	r2,-28(fp)
    int i;
    int w;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
   85a40:	e0bffe17 	ldw	r2,-8(fp)
   85a44:	10800104 	addi	r2,r2,4
   85a48:	00c00044 	movi	r3,1
   85a4c:	10c00035 	stwio	r3,0(r2)
    
    for(i=0;i<8;i++){
   85a50:	e03ffa15 	stw	zero,-24(fp)
   85a54:	00001f06 	br	85ad4 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
   85a58:	e0bffd17 	ldw	r2,-12(fp)
   85a5c:	0007883a 	mov	r3,zero
   85a60:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
   85a64:	e0ffff03 	ldbu	r3,-4(fp)
   85a68:	e0bff903 	ldbu	r2,-28(fp)
   85a6c:	1884703a 	and	r2,r3,r2
   85a70:	10803fcc 	andi	r2,r2,255
   85a74:	10000426 	beq	r2,zero,85a88 <i2c_write+0x70>
            SDA_HIGH(data_base);
   85a78:	e0bffe17 	ldw	r2,-8(fp)
   85a7c:	00c00044 	movi	r3,1
   85a80:	10c00035 	stwio	r3,0(r2)
   85a84:	00000306 	br	85a94 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
   85a88:	e0bffe17 	ldw	r2,-8(fp)
   85a8c:	0007883a 	mov	r3,zero
   85a90:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
   85a94:	e0bff903 	ldbu	r2,-28(fp)
   85a98:	1004d07a 	srli	r2,r2,1
   85a9c:	e0bff905 	stb	r2,-28(fp)
        // clock high
        SCL_HIGH(clk_base);
   85aa0:	e0bffd17 	ldw	r2,-12(fp)
   85aa4:	00c00044 	movi	r3,1
   85aa8:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   85aac:	01000584 	movi	r4,22
   85ab0:	00852900 	call	85290 <my_wait>
        SCL_LOW(clk_base);
   85ab4:	e0bffd17 	ldw	r2,-12(fp)
   85ab8:	0007883a 	mov	r3,zero
   85abc:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   85ac0:	01000584 	movi	r4,22
   85ac4:	00852900 	call	85290 <my_wait>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
   85ac8:	e0bffa17 	ldw	r2,-24(fp)
   85acc:	10800044 	addi	r2,r2,1
   85ad0:	e0bffa15 	stw	r2,-24(fp)
   85ad4:	e0bffa17 	ldw	r2,-24(fp)
   85ad8:	10800210 	cmplti	r2,r2,8
   85adc:	103fde1e 	bne	r2,zero,85a58 <__alt_data_end+0xfffcd7e8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
   85ae0:	e0bffe17 	ldw	r2,-8(fp)
   85ae4:	10800104 	addi	r2,r2,4
   85ae8:	0007883a 	mov	r3,zero
   85aec:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
//------------------ wait ack for muti-touch panel
SCL_DELAY;
   85af0:	01000584 	movi	r4,22
   85af4:	00852900 	call	85290 <my_wait>
w = 0;
   85af8:	e03ffb15 	stw	zero,-20(fp)
while(SDA_READ(data_base) && w++ < 1000000){
   85afc:	0001883a 	nop
   85b00:	e0bffe17 	ldw	r2,-8(fp)
   85b04:	10800037 	ldwio	r2,0(r2)
   85b08:	10000626 	beq	r2,zero,85b24 <i2c_write+0x10c>
   85b0c:	e0bffb17 	ldw	r2,-20(fp)
   85b10:	10c00044 	addi	r3,r2,1
   85b14:	e0fffb15 	stw	r3,-20(fp)
   85b18:	00c003f4 	movhi	r3,15
   85b1c:	18d08fc4 	addi	r3,r3,16959
   85b20:	18bff70e 	bge	r3,r2,85b00 <__alt_data_end+0xfffcd890>
}    
    // clock high
    SCL_HIGH(clk_base);  // clock high
   85b24:	e0bffd17 	ldw	r2,-12(fp)
   85b28:	00c00044 	movi	r3,1
   85b2c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
   85b30:	01000584 	movi	r4,22
   85b34:	00852900 	call	85290 <my_wait>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
   85b38:	e0bffe17 	ldw	r2,-8(fp)
   85b3c:	10800037 	ldwio	r2,0(r2)
   85b40:	1005003a 	cmpeq	r2,r2,zero
   85b44:	10803fcc 	andi	r2,r2,255
   85b48:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
   85b4c:	e0bffd17 	ldw	r2,-12(fp)
   85b50:	0007883a 	mov	r3,zero
   85b54:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   85b58:	01000584 	movi	r4,22
   85b5c:	00852900 	call	85290 <my_wait>
    return bAck;
   85b60:	e0bffc17 	ldw	r2,-16(fp)
}    
   85b64:	e037883a 	mov	sp,fp
   85b68:	dfc00117 	ldw	ra,4(sp)
   85b6c:	df000017 	ldw	fp,0(sp)
   85b70:	dec00204 	addi	sp,sp,8
   85b74:	f800283a 	ret

00085b78 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
   85b78:	defff804 	addi	sp,sp,-32
   85b7c:	dfc00715 	stw	ra,28(sp)
   85b80:	df000615 	stw	fp,24(sp)
   85b84:	df000604 	addi	fp,sp,24
   85b88:	e13ffc15 	stw	r4,-16(fp)
   85b8c:	e17ffd15 	stw	r5,-12(fp)
   85b90:	e1bffe15 	stw	r6,-8(fp)
   85b94:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
   85b98:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
   85b9c:	e0bffd17 	ldw	r2,-12(fp)
   85ba0:	10800104 	addi	r2,r2,4
   85ba4:	0007883a 	mov	r3,zero
   85ba8:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
   85bac:	e0bffc17 	ldw	r2,-16(fp)
   85bb0:	0007883a 	mov	r3,zero
   85bb4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   85bb8:	01000584 	movi	r4,22
   85bbc:	00852900 	call	85290 <my_wait>

    for(i=0;i<8;i++){
   85bc0:	e03ffb15 	stw	zero,-20(fp)
   85bc4:	00001606 	br	85c20 <i2c_read+0xa8>
        Data <<= 1;
   85bc8:	e0bffa03 	ldbu	r2,-24(fp)
   85bcc:	1085883a 	add	r2,r2,r2
   85bd0:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
   85bd4:	e0bffc17 	ldw	r2,-16(fp)
   85bd8:	00c00044 	movi	r3,1
   85bdc:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   85be0:	01000584 	movi	r4,22
   85be4:	00852900 	call	85290 <my_wait>
        if (SDA_READ(data_base))  // read data   
   85be8:	e0bffd17 	ldw	r2,-12(fp)
   85bec:	10800037 	ldwio	r2,0(r2)
   85bf0:	10000326 	beq	r2,zero,85c00 <i2c_read+0x88>
            Data |= 0x01;
   85bf4:	e0bffa03 	ldbu	r2,-24(fp)
   85bf8:	10800054 	ori	r2,r2,1
   85bfc:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
   85c00:	e0bffc17 	ldw	r2,-16(fp)
   85c04:	0007883a 	mov	r3,zero
   85c08:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   85c0c:	01000584 	movi	r4,22
   85c10:	00852900 	call	85290 <my_wait>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
   85c14:	e0bffb17 	ldw	r2,-20(fp)
   85c18:	10800044 	addi	r2,r2,1
   85c1c:	e0bffb15 	stw	r2,-20(fp)
   85c20:	e0bffb17 	ldw	r2,-20(fp)
   85c24:	10800210 	cmplti	r2,r2,8
   85c28:	103fe71e 	bne	r2,zero,85bc8 <__alt_data_end+0xfffcd958>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
   85c2c:	e0bffc17 	ldw	r2,-16(fp)
   85c30:	0007883a 	mov	r3,zero
   85c34:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
   85c38:	e0bffd17 	ldw	r2,-12(fp)
   85c3c:	10800104 	addi	r2,r2,4
   85c40:	00c00044 	movi	r3,1
   85c44:	10c00035 	stwio	r3,0(r2)
    if (bAck)
   85c48:	e0bfff17 	ldw	r2,-4(fp)
   85c4c:	10000426 	beq	r2,zero,85c60 <i2c_read+0xe8>
        SDA_LOW(data_base);
   85c50:	e0bffd17 	ldw	r2,-12(fp)
   85c54:	0007883a 	mov	r3,zero
   85c58:	10c00035 	stwio	r3,0(r2)
   85c5c:	00000306 	br	85c6c <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
   85c60:	e0bffd17 	ldw	r2,-12(fp)
   85c64:	00c00044 	movi	r3,1
   85c68:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
   85c6c:	e0bffc17 	ldw	r2,-16(fp)
   85c70:	00c00044 	movi	r3,1
   85c74:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
   85c78:	01000584 	movi	r4,22
   85c7c:	00852900 	call	85290 <my_wait>
    SCL_LOW(clk_base); // clock low
   85c80:	e0bffc17 	ldw	r2,-16(fp)
   85c84:	0007883a 	mov	r3,zero
   85c88:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   85c8c:	01000584 	movi	r4,22
   85c90:	00852900 	call	85290 <my_wait>
    SDA_LOW(data_base);  // data low
   85c94:	e0bffd17 	ldw	r2,-12(fp)
   85c98:	0007883a 	mov	r3,zero
   85c9c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
   85ca0:	01000584 	movi	r4,22
   85ca4:	00852900 	call	85290 <my_wait>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
   85ca8:	e0bffe17 	ldw	r2,-8(fp)
   85cac:	e0fffa03 	ldbu	r3,-24(fp)
   85cb0:	10c00005 	stb	r3,0(r2)
}
   85cb4:	e037883a 	mov	sp,fp
   85cb8:	dfc00117 	ldw	ra,4(sp)
   85cbc:	df000017 	ldw	fp,0(sp)
   85cc0:	dec00204 	addi	sp,sp,8
   85cc4:	f800283a 	ret

00085cc8 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
   85cc8:	defff704 	addi	sp,sp,-36
   85ccc:	dfc00815 	stw	ra,32(sp)
   85cd0:	df000715 	stw	fp,28(sp)
   85cd4:	df000704 	addi	fp,sp,28
   85cd8:	e13ffb15 	stw	r4,-20(fp)
   85cdc:	e17ffc15 	stw	r5,-16(fp)
   85ce0:	3009883a 	mov	r4,r6
   85ce4:	3807883a 	mov	r3,r7
   85ce8:	e0800217 	ldw	r2,8(fp)
   85cec:	e13ffd05 	stb	r4,-12(fp)
   85cf0:	e0fffe0d 	sth	r3,-8(fp)
   85cf4:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   85cf8:	00800044 	movi	r2,1
   85cfc:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   85d00:	e0bffe0b 	ldhu	r2,-8(fp)
   85d04:	1004d23a 	srli	r2,r2,8
   85d08:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
   85d0c:	e0bffe0b 	ldhu	r2,-8(fp)
   85d10:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   85d14:	e13ffb17 	ldw	r4,-20(fp)
   85d18:	e17ffc17 	ldw	r5,-16(fp)
   85d1c:	00859240 	call	85924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   85d20:	e0bffd03 	ldbu	r2,-12(fp)
   85d24:	10803fcc 	andi	r2,r2,255
   85d28:	e13ffb17 	ldw	r4,-20(fp)
   85d2c:	e17ffc17 	ldw	r5,-16(fp)
   85d30:	100d883a 	mov	r6,r2
   85d34:	0085a180 	call	85a18 <i2c_write>
   85d38:	1000041e 	bne	r2,zero,85d4c <I2CL_Write+0x84>
        bSuccess = FALSE;
   85d3c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   85d40:	010002b4 	movhi	r4,10
   85d44:	211b2d04 	addi	r4,r4,27828
   85d48:	00864080 	call	86408 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   85d4c:	e0bff917 	ldw	r2,-28(fp)
   85d50:	10000a26 	beq	r2,zero,85d7c <I2CL_Write+0xb4>
   85d54:	e0bffa03 	ldbu	r2,-24(fp)
   85d58:	e13ffb17 	ldw	r4,-20(fp)
   85d5c:	e17ffc17 	ldw	r5,-16(fp)
   85d60:	100d883a 	mov	r6,r2
   85d64:	0085a180 	call	85a18 <i2c_write>
   85d68:	1000041e 	bne	r2,zero,85d7c <I2CL_Write+0xb4>
        bSuccess = FALSE;
   85d6c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   85d70:	010002b4 	movhi	r4,10
   85d74:	211b8b04 	addi	r4,r4,28204
   85d78:	00864080 	call	86408 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   85d7c:	e0bff917 	ldw	r2,-28(fp)
   85d80:	10000a26 	beq	r2,zero,85dac <I2CL_Write+0xe4>
   85d84:	e0bffa43 	ldbu	r2,-23(fp)
   85d88:	e13ffb17 	ldw	r4,-20(fp)
   85d8c:	e17ffc17 	ldw	r5,-16(fp)
   85d90:	100d883a 	mov	r6,r2
   85d94:	0085a180 	call	85a18 <i2c_write>
   85d98:	1000041e 	bne	r2,zero,85dac <I2CL_Write+0xe4>
        bSuccess = FALSE;
   85d9c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   85da0:	010002b4 	movhi	r4,10
   85da4:	211b9504 	addi	r4,r4,28244
   85da8:	00864080 	call	86408 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
   85dac:	e0bff917 	ldw	r2,-28(fp)
   85db0:	10000a26 	beq	r2,zero,85ddc <I2CL_Write+0x114>
   85db4:	e0bfff03 	ldbu	r2,-4(fp)
   85db8:	e13ffb17 	ldw	r4,-20(fp)
   85dbc:	e17ffc17 	ldw	r5,-16(fp)
   85dc0:	100d883a 	mov	r6,r2
   85dc4:	0085a180 	call	85a18 <i2c_write>
   85dc8:	1000041e 	bne	r2,zero,85ddc <I2CL_Write+0x114>
        bSuccess = FALSE;
   85dcc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   85dd0:	010002b4 	movhi	r4,10
   85dd4:	211b3e04 	addi	r4,r4,27896
   85dd8:	00864080 	call	86408 <myprintf>
    }
    i2c_stop(clk_base, data_base);
   85ddc:	e13ffb17 	ldw	r4,-20(fp)
   85de0:	e17ffc17 	ldw	r5,-16(fp)
   85de4:	00859a80 	call	859a8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   85de8:	0106d604 	movi	r4,7000
   85dec:	008bbbc0 	call	8bbbc <usleep>
    
    return bSuccess;
   85df0:	e0bff917 	ldw	r2,-28(fp)
    
}
   85df4:	e037883a 	mov	sp,fp
   85df8:	dfc00117 	ldw	ra,4(sp)
   85dfc:	df000017 	ldw	fp,0(sp)
   85e00:	dec00204 	addi	sp,sp,8
   85e04:	f800283a 	ret

00085e08 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
   85e08:	defff804 	addi	sp,sp,-32
   85e0c:	dfc00715 	stw	ra,28(sp)
   85e10:	df000615 	stw	fp,24(sp)
   85e14:	df000604 	addi	fp,sp,24
   85e18:	e13ffc15 	stw	r4,-16(fp)
   85e1c:	e17ffd15 	stw	r5,-12(fp)
   85e20:	3007883a 	mov	r3,r6
   85e24:	3805883a 	mov	r2,r7
   85e28:	e0fffe05 	stb	r3,-8(fp)
   85e2c:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
   85e30:	00800044 	movi	r2,1
   85e34:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   85e38:	e0bfff0b 	ldhu	r2,-4(fp)
   85e3c:	1004d23a 	srli	r2,r2,8
   85e40:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
   85e44:	e0bfff0b 	ldhu	r2,-4(fp)
   85e48:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
   85e4c:	e13ffc17 	ldw	r4,-16(fp)
   85e50:	e17ffd17 	ldw	r5,-12(fp)
   85e54:	00859240 	call	85924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   85e58:	e0bffe03 	ldbu	r2,-8(fp)
   85e5c:	10803fcc 	andi	r2,r2,255
   85e60:	e13ffc17 	ldw	r4,-16(fp)
   85e64:	e17ffd17 	ldw	r5,-12(fp)
   85e68:	100d883a 	mov	r6,r2
   85e6c:	0085a180 	call	85a18 <i2c_write>
   85e70:	1000041e 	bne	r2,zero,85e84 <I2CL_Read+0x7c>
        bSuccess = FALSE;
   85e74:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   85e78:	010002b4 	movhi	r4,10
   85e7c:	211b2d04 	addi	r4,r4,27828
   85e80:	00864080 	call	86408 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   85e84:	e0bffa17 	ldw	r2,-24(fp)
   85e88:	10000a26 	beq	r2,zero,85eb4 <I2CL_Read+0xac>
   85e8c:	e0bffb03 	ldbu	r2,-20(fp)
   85e90:	e13ffc17 	ldw	r4,-16(fp)
   85e94:	e17ffd17 	ldw	r5,-12(fp)
   85e98:	100d883a 	mov	r6,r2
   85e9c:	0085a180 	call	85a18 <i2c_write>
   85ea0:	1000041e 	bne	r2,zero,85eb4 <I2CL_Read+0xac>
        bSuccess = FALSE;
   85ea4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   85ea8:	010002b4 	movhi	r4,10
   85eac:	211b8b04 	addi	r4,r4,28204
   85eb0:	00864080 	call	86408 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   85eb4:	e0bffa17 	ldw	r2,-24(fp)
   85eb8:	10000a26 	beq	r2,zero,85ee4 <I2CL_Read+0xdc>
   85ebc:	e0bffb43 	ldbu	r2,-19(fp)
   85ec0:	e13ffc17 	ldw	r4,-16(fp)
   85ec4:	e17ffd17 	ldw	r5,-12(fp)
   85ec8:	100d883a 	mov	r6,r2
   85ecc:	0085a180 	call	85a18 <i2c_write>
   85ed0:	1000041e 	bne	r2,zero,85ee4 <I2CL_Read+0xdc>
        bSuccess = FALSE;
   85ed4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   85ed8:	010002b4 	movhi	r4,10
   85edc:	211b9504 	addi	r4,r4,28244
   85ee0:	00864080 	call	86408 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
   85ee4:	e13ffc17 	ldw	r4,-16(fp)
   85ee8:	e17ffd17 	ldw	r5,-12(fp)
   85eec:	00859240 	call	85924 <i2c_start>
    DeviceAddr |= 1; // Read
   85ef0:	e0bffe03 	ldbu	r2,-8(fp)
   85ef4:	10800054 	ori	r2,r2,1
   85ef8:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   85efc:	e0bffa17 	ldw	r2,-24(fp)
   85f00:	10000b26 	beq	r2,zero,85f30 <I2CL_Read+0x128>
   85f04:	e0bffe03 	ldbu	r2,-8(fp)
   85f08:	10803fcc 	andi	r2,r2,255
   85f0c:	e13ffc17 	ldw	r4,-16(fp)
   85f10:	e17ffd17 	ldw	r5,-12(fp)
   85f14:	100d883a 	mov	r6,r2
   85f18:	0085a180 	call	85a18 <i2c_write>
   85f1c:	1000041e 	bne	r2,zero,85f30 <I2CL_Read+0x128>
        bSuccess = FALSE;
   85f20:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
   85f24:	010002b4 	movhi	r4,10
   85f28:	211b6104 	addi	r4,r4,28036
   85f2c:	00864080 	call	86408 <myprintf>
    }
    
    if (bSuccess){
   85f30:	e0bffa17 	ldw	r2,-24(fp)
   85f34:	10000526 	beq	r2,zero,85f4c <I2CL_Read+0x144>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   85f38:	e13ffc17 	ldw	r4,-16(fp)
   85f3c:	e17ffd17 	ldw	r5,-12(fp)
   85f40:	e1800217 	ldw	r6,8(fp)
   85f44:	000f883a 	mov	r7,zero
   85f48:	0085b780 	call	85b78 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
   85f4c:	e13ffc17 	ldw	r4,-16(fp)
   85f50:	e17ffd17 	ldw	r5,-12(fp)
   85f54:	00859a80 	call	859a8 <i2c_stop>
    
    return bSuccess;    
   85f58:	e0bffa17 	ldw	r2,-24(fp)
}
   85f5c:	e037883a 	mov	sp,fp
   85f60:	dfc00117 	ldw	ra,4(sp)
   85f64:	df000017 	ldw	fp,0(sp)
   85f68:	dec00204 	addi	sp,sp,8
   85f6c:	f800283a 	ret

00085f70 <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
   85f70:	defff604 	addi	sp,sp,-40
   85f74:	dfc00915 	stw	ra,36(sp)
   85f78:	df000815 	stw	fp,32(sp)
   85f7c:	df000804 	addi	fp,sp,32
   85f80:	e13ffb15 	stw	r4,-20(fp)
   85f84:	e17ffc15 	stw	r5,-16(fp)
   85f88:	3009883a 	mov	r4,r6
   85f8c:	3807883a 	mov	r3,r7
   85f90:	e0800317 	ldw	r2,12(fp)
   85f94:	e13ffd05 	stb	r4,-12(fp)
   85f98:	e0fffe0d 	sth	r3,-8(fp)
   85f9c:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
   85fa0:	00800044 	movi	r2,1
   85fa4:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   85fa8:	e0bffe0b 	ldhu	r2,-8(fp)
   85fac:	1004d23a 	srli	r2,r2,8
   85fb0:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;     
   85fb4:	e0bffe0b 	ldhu	r2,-8(fp)
   85fb8:	e0bffa45 	stb	r2,-23(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   85fbc:	e13ffb17 	ldw	r4,-20(fp)
   85fc0:	e17ffc17 	ldw	r5,-16(fp)
   85fc4:	00859240 	call	85924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   85fc8:	e0bffd03 	ldbu	r2,-12(fp)
   85fcc:	10803fcc 	andi	r2,r2,255
   85fd0:	e13ffb17 	ldw	r4,-20(fp)
   85fd4:	e17ffc17 	ldw	r5,-16(fp)
   85fd8:	100d883a 	mov	r6,r2
   85fdc:	0085a180 	call	85a18 <i2c_write>
   85fe0:	1000041e 	bne	r2,zero,85ff4 <I2CL_MultipleRead+0x84>
        bSuccess = FALSE;
   85fe4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   85fe8:	010002b4 	movhi	r4,10
   85fec:	211b2d04 	addi	r4,r4,27828
   85ff0:	00864080 	call	86408 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   85ff4:	e0bff917 	ldw	r2,-28(fp)
   85ff8:	10000a26 	beq	r2,zero,86024 <I2CL_MultipleRead+0xb4>
   85ffc:	e0bffa03 	ldbu	r2,-24(fp)
   86000:	e13ffb17 	ldw	r4,-20(fp)
   86004:	e17ffc17 	ldw	r5,-16(fp)
   86008:	100d883a 	mov	r6,r2
   8600c:	0085a180 	call	85a18 <i2c_write>
   86010:	1000041e 	bne	r2,zero,86024 <I2CL_MultipleRead+0xb4>
        bSuccess = FALSE;
   86014:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   86018:	010002b4 	movhi	r4,10
   8601c:	211b8b04 	addi	r4,r4,28204
   86020:	00864080 	call	86408 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   86024:	e0bff917 	ldw	r2,-28(fp)
   86028:	10000a26 	beq	r2,zero,86054 <I2CL_MultipleRead+0xe4>
   8602c:	e0bffa43 	ldbu	r2,-23(fp)
   86030:	e13ffb17 	ldw	r4,-20(fp)
   86034:	e17ffc17 	ldw	r5,-16(fp)
   86038:	100d883a 	mov	r6,r2
   8603c:	0085a180 	call	85a18 <i2c_write>
   86040:	1000041e 	bne	r2,zero,86054 <I2CL_MultipleRead+0xe4>
        bSuccess = FALSE;
   86044:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   86048:	010002b4 	movhi	r4,10
   8604c:	211b9504 	addi	r4,r4,28244
   86050:	00864080 	call	86408 <myprintf>
    }    
    if (bSuccess)        
   86054:	e0bff917 	ldw	r2,-28(fp)
   86058:	10000326 	beq	r2,zero,86068 <I2CL_MultipleRead+0xf8>
        i2c_start(clk_base, data_base);  // restart
   8605c:	e13ffb17 	ldw	r4,-20(fp)
   86060:	e17ffc17 	ldw	r5,-16(fp)
   86064:	00859240 	call	85924 <i2c_start>
    DeviceAddr |= 1; // Read
   86068:	e0bffd03 	ldbu	r2,-12(fp)
   8606c:	10800054 	ori	r2,r2,1
   86070:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   86074:	e0bff917 	ldw	r2,-28(fp)
   86078:	10000b26 	beq	r2,zero,860a8 <I2CL_MultipleRead+0x138>
   8607c:	e0bffd03 	ldbu	r2,-12(fp)
   86080:	10803fcc 	andi	r2,r2,255
   86084:	e13ffb17 	ldw	r4,-20(fp)
   86088:	e17ffc17 	ldw	r5,-16(fp)
   8608c:	100d883a 	mov	r6,r2
   86090:	0085a180 	call	85a18 <i2c_write>
   86094:	1000041e 	bne	r2,zero,860a8 <I2CL_MultipleRead+0x138>
        bSuccess = FALSE;
   86098:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
   8609c:	010002b4 	movhi	r4,10
   860a0:	211b9f04 	addi	r4,r4,28284
   860a4:	00864080 	call	86408 <myprintf>
    }
    
    if (bSuccess){
   860a8:	e0bff917 	ldw	r2,-28(fp)
   860ac:	10001726 	beq	r2,zero,8610c <I2CL_MultipleRead+0x19c>
        for(i=0;i<len && bSuccess;i++){
   860b0:	e03ff815 	stw	zero,-32(fp)
   860b4:	00001006 	br	860f8 <I2CL_MultipleRead+0x188>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   860b8:	e0bff817 	ldw	r2,-32(fp)
   860bc:	e0c00217 	ldw	r3,8(fp)
   860c0:	1887883a 	add	r3,r3,r2
   860c4:	e0bfff0b 	ldhu	r2,-4(fp)
   860c8:	113fffc4 	addi	r4,r2,-1
   860cc:	e0bff817 	ldw	r2,-32(fp)
   860d0:	2084c03a 	cmpne	r2,r4,r2
   860d4:	10803fcc 	andi	r2,r2,255
   860d8:	e13ffb17 	ldw	r4,-20(fp)
   860dc:	e17ffc17 	ldw	r5,-16(fp)
   860e0:	180d883a 	mov	r6,r3
   860e4:	100f883a 	mov	r7,r2
   860e8:	0085b780 	call	85b78 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   860ec:	e0bff817 	ldw	r2,-32(fp)
   860f0:	10800044 	addi	r2,r2,1
   860f4:	e0bff815 	stw	r2,-32(fp)
   860f8:	e0bfff0b 	ldhu	r2,-4(fp)
   860fc:	e0fff817 	ldw	r3,-32(fp)
   86100:	1880020e 	bge	r3,r2,8610c <I2CL_MultipleRead+0x19c>
   86104:	e0bff917 	ldw	r2,-28(fp)
   86108:	103feb1e 	bne	r2,zero,860b8 <__alt_data_end+0xfffcde48>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
   8610c:	e13ffb17 	ldw	r4,-20(fp)
   86110:	e17ffc17 	ldw	r5,-16(fp)
   86114:	00859a80 	call	859a8 <i2c_stop>
    
    return bSuccess;    
   86118:	e0bff917 	ldw	r2,-28(fp)
    
} 
   8611c:	e037883a 	mov	sp,fp
   86120:	dfc00117 	ldw	ra,4(sp)
   86124:	df000017 	ldw	fp,0(sp)
   86128:	dec00204 	addi	sp,sp,8
   8612c:	f800283a 	ret

00086130 <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
   86130:	defff604 	addi	sp,sp,-40
   86134:	dfc00915 	stw	ra,36(sp)
   86138:	df000815 	stw	fp,32(sp)
   8613c:	df000804 	addi	fp,sp,32
   86140:	e13ffb15 	stw	r4,-20(fp)
   86144:	e17ffc15 	stw	r5,-16(fp)
   86148:	3009883a 	mov	r4,r6
   8614c:	3807883a 	mov	r3,r7
   86150:	e0800317 	ldw	r2,12(fp)
   86154:	e13ffd05 	stb	r4,-12(fp)
   86158:	e0fffe0d 	sth	r3,-8(fp)
   8615c:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
   86160:	00800044 	movi	r2,1
   86164:	e0bff815 	stw	r2,-32(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   86168:	e0bffe0b 	ldhu	r2,-8(fp)
   8616c:	1004d23a 	srli	r2,r2,8
   86170:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
   86174:	e0bffe0b 	ldhu	r2,-8(fp)
   86178:	e0bffa45 	stb	r2,-23(fp)
    

    i2c_start(clk_base, data_base);
   8617c:	e13ffb17 	ldw	r4,-20(fp)
   86180:	e17ffc17 	ldw	r5,-16(fp)
   86184:	00859240 	call	85924 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   86188:	e0bffd03 	ldbu	r2,-12(fp)
   8618c:	10803fcc 	andi	r2,r2,255
   86190:	e13ffb17 	ldw	r4,-20(fp)
   86194:	e17ffc17 	ldw	r5,-16(fp)
   86198:	100d883a 	mov	r6,r2
   8619c:	0085a180 	call	85a18 <i2c_write>
   861a0:	1000041e 	bne	r2,zero,861b4 <I2CL_MultipleWrite+0x84>
        bSuccess = FALSE;
   861a4:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   861a8:	010002b4 	movhi	r4,10
   861ac:	211b2d04 	addi	r4,r4,27828
   861b0:	00864080 	call	86408 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   861b4:	e0bff817 	ldw	r2,-32(fp)
   861b8:	10000a26 	beq	r2,zero,861e4 <I2CL_MultipleWrite+0xb4>
   861bc:	e0bffa03 	ldbu	r2,-24(fp)
   861c0:	e13ffb17 	ldw	r4,-20(fp)
   861c4:	e17ffc17 	ldw	r5,-16(fp)
   861c8:	100d883a 	mov	r6,r2
   861cc:	0085a180 	call	85a18 <i2c_write>
   861d0:	1000041e 	bne	r2,zero,861e4 <I2CL_MultipleWrite+0xb4>
        bSuccess = FALSE;
   861d4:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   861d8:	010002b4 	movhi	r4,10
   861dc:	211b8b04 	addi	r4,r4,28204
   861e0:	00864080 	call	86408 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   861e4:	e0bff817 	ldw	r2,-32(fp)
   861e8:	10000a26 	beq	r2,zero,86214 <I2CL_MultipleWrite+0xe4>
   861ec:	e0bffa43 	ldbu	r2,-23(fp)
   861f0:	e13ffb17 	ldw	r4,-20(fp)
   861f4:	e17ffc17 	ldw	r5,-16(fp)
   861f8:	100d883a 	mov	r6,r2
   861fc:	0085a180 	call	85a18 <i2c_write>
   86200:	1000041e 	bne	r2,zero,86214 <I2CL_MultipleWrite+0xe4>
        bSuccess = FALSE;
   86204:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   86208:	010002b4 	movhi	r4,10
   8620c:	211b9504 	addi	r4,r4,28244
   86210:	00864080 	call	86408 <myprintf>
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
   86214:	e0bff817 	ldw	r2,-32(fp)
   86218:	10001926 	beq	r2,zero,86280 <I2CL_MultipleWrite+0x150>
        for(i=0;i<len && bSuccess;i++){
   8621c:	e03ff915 	stw	zero,-28(fp)
   86220:	00000d06 	br	86258 <I2CL_MultipleWrite+0x128>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
   86224:	e0bff917 	ldw	r2,-28(fp)
   86228:	e0c00217 	ldw	r3,8(fp)
   8622c:	1885883a 	add	r2,r3,r2
   86230:	10800003 	ldbu	r2,0(r2)
   86234:	10803fcc 	andi	r2,r2,255
   86238:	e13ffb17 	ldw	r4,-20(fp)
   8623c:	e17ffc17 	ldw	r5,-16(fp)
   86240:	100d883a 	mov	r6,r2
   86244:	0085a180 	call	85a18 <i2c_write>
   86248:	e0bff815 	stw	r2,-32(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
   8624c:	e0bff917 	ldw	r2,-28(fp)
   86250:	10800044 	addi	r2,r2,1
   86254:	e0bff915 	stw	r2,-28(fp)
   86258:	e0bfff0b 	ldhu	r2,-4(fp)
   8625c:	e0fff917 	ldw	r3,-28(fp)
   86260:	1880020e 	bge	r3,r2,8626c <I2CL_MultipleWrite+0x13c>
   86264:	e0bff817 	ldw	r2,-32(fp)
   86268:	103fee1e 	bne	r2,zero,86224 <__alt_data_end+0xfffcdfb4>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
   8626c:	e0bff817 	ldw	r2,-32(fp)
   86270:	1000031e 	bne	r2,zero,86280 <I2CL_MultipleWrite+0x150>
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   86274:	010002b4 	movhi	r4,10
   86278:	211b3e04 	addi	r4,r4,27896
   8627c:	00864080 	call	86408 <myprintf>
    }
    i2c_stop(clk_base, data_base);
   86280:	e13ffb17 	ldw	r4,-20(fp)
   86284:	e17ffc17 	ldw	r5,-16(fp)
   86288:	00859a80 	call	859a8 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   8628c:	0106d604 	movi	r4,7000
   86290:	008bbbc0 	call	8bbbc <usleep>
    
    return bSuccess;
   86294:	e0bff817 	ldw	r2,-32(fp)
    
}
   86298:	e037883a 	mov	sp,fp
   8629c:	dfc00117 	ldw	ra,4(sp)
   862a0:	df000017 	ldw	fp,0(sp)
   862a4:	dec00204 	addi	sp,sp,8
   862a8:	f800283a 	ret

000862ac <I2CL_Read16>:
 


bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
   862ac:	defff604 	addi	sp,sp,-40
   862b0:	dfc00915 	stw	ra,36(sp)
   862b4:	df000815 	stw	fp,32(sp)
   862b8:	df000804 	addi	fp,sp,32
   862bc:	e13ffc15 	stw	r4,-16(fp)
   862c0:	e17ffd15 	stw	r5,-12(fp)
   862c4:	3007883a 	mov	r3,r6
   862c8:	3805883a 	mov	r2,r7
   862cc:	e0fffe05 	stb	r3,-8(fp)
   862d0:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
   862d4:	e0fffe07 	ldb	r3,-8(fp)
   862d8:	e0bfff0b 	ldhu	r2,-4(fp)
   862dc:	e13ffb04 	addi	r4,fp,-20
   862e0:	d9000015 	stw	r4,0(sp)
   862e4:	01000084 	movi	r4,2
   862e8:	d9000115 	stw	r4,4(sp)
   862ec:	e13ffc17 	ldw	r4,-16(fp)
   862f0:	e17ffd17 	ldw	r5,-12(fp)
   862f4:	180d883a 	mov	r6,r3
   862f8:	100f883a 	mov	r7,r2
   862fc:	0085f700 	call	85f70 <I2CL_MultipleRead>
   86300:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
   86304:	e0bffa17 	ldw	r2,-24(fp)
   86308:	10000a26 	beq	r2,zero,86334 <I2CL_Read16+0x88>
        *pControlData = (szData[0] << 8 ) | szData[1];
   8630c:	e0bffb03 	ldbu	r2,-20(fp)
   86310:	10803fcc 	andi	r2,r2,255
   86314:	1004923a 	slli	r2,r2,8
   86318:	1007883a 	mov	r3,r2
   8631c:	e0bffb43 	ldbu	r2,-19(fp)
   86320:	10803fcc 	andi	r2,r2,255
   86324:	1884b03a 	or	r2,r3,r2
   86328:	1007883a 	mov	r3,r2
   8632c:	e0800217 	ldw	r2,8(fp)
   86330:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
   86334:	e0bffa17 	ldw	r2,-24(fp)
}
   86338:	e037883a 	mov	sp,fp
   8633c:	dfc00117 	ldw	ra,4(sp)
   86340:	df000017 	ldw	fp,0(sp)
   86344:	dec00204 	addi	sp,sp,8
   86348:	f800283a 	ret

0008634c <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
   8634c:	defff504 	addi	sp,sp,-44
   86350:	dfc00a15 	stw	ra,40(sp)
   86354:	df000915 	stw	fp,36(sp)
   86358:	df000904 	addi	fp,sp,36
   8635c:	e13ffb15 	stw	r4,-20(fp)
   86360:	e17ffc15 	stw	r5,-16(fp)
   86364:	3009883a 	mov	r4,r6
   86368:	3807883a 	mov	r3,r7
   8636c:	e0800217 	ldw	r2,8(fp)
   86370:	e13ffd05 	stb	r4,-12(fp)
   86374:	e0fffe0d 	sth	r3,-8(fp)
   86378:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
   8637c:	e0bfff0b 	ldhu	r2,-4(fp)
   86380:	1004d23a 	srli	r2,r2,8
   86384:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
   86388:	e0bfff0b 	ldhu	r2,-4(fp)
   8638c:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
   86390:	e0fffd07 	ldb	r3,-12(fp)
   86394:	e0bffe0b 	ldhu	r2,-8(fp)
   86398:	e13ffa04 	addi	r4,fp,-24
   8639c:	d9000015 	stw	r4,0(sp)
   863a0:	01000084 	movi	r4,2
   863a4:	d9000115 	stw	r4,4(sp)
   863a8:	e13ffb17 	ldw	r4,-20(fp)
   863ac:	e17ffc17 	ldw	r5,-16(fp)
   863b0:	180d883a 	mov	r6,r3
   863b4:	100f883a 	mov	r7,r2
   863b8:	00861300 	call	86130 <I2CL_MultipleWrite>
   863bc:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
   863c0:	e0bff917 	ldw	r2,-28(fp)
}
   863c4:	e037883a 	mov	sp,fp
   863c8:	dfc00117 	ldw	ra,4(sp)
   863cc:	df000017 	ldw	fp,0(sp)
   863d0:	dec00204 	addi	sp,sp,8
   863d4:	f800283a 	ret

000863d8 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
   863d8:	defffd04 	addi	sp,sp,-12
   863dc:	dfc00215 	stw	ra,8(sp)
   863e0:	df000115 	stw	fp,4(sp)
   863e4:	df000104 	addi	fp,sp,4
   863e8:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
   863ec:	e13fff17 	ldw	r4,-4(fp)
   863f0:	008a2d00 	call	8a2d0 <printf>
}
   863f4:	e037883a 	mov	sp,fp
   863f8:	dfc00117 	ldw	ra,4(sp)
   863fc:	df000017 	ldw	fp,0(sp)
   86400:	dec00204 	addi	sp,sp,8
   86404:	f800283a 	ret

00086408 <myprintf>:





int myprintf(char *format, ...){
   86408:	deff7804 	addi	sp,sp,-544
   8640c:	dfc08415 	stw	ra,528(sp)
   86410:	df008315 	stw	fp,524(sp)
   86414:	df008304 	addi	fp,sp,524
   86418:	e1400215 	stw	r5,8(fp)
   8641c:	e1800315 	stw	r6,12(fp)
   86420:	e1c00415 	stw	r7,16(fp)
   86424:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
   86428:	e0800204 	addi	r2,fp,8
   8642c:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
   86430:	e0bffe17 	ldw	r2,-8(fp)
   86434:	e0ff7e04 	addi	r3,fp,-520
   86438:	1809883a 	mov	r4,r3
   8643c:	01408004 	movi	r5,512
   86440:	e1bfff17 	ldw	r6,-4(fp)
   86444:	100f883a 	mov	r7,r2
   86448:	008b1600 	call	8b160 <vsnprintf>
   8644c:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
   86450:	e0bf7e04 	addi	r2,fp,-520
   86454:	1009883a 	mov	r4,r2
   86458:	00863d80 	call	863d8 <debug_output>

    return rc;    
   8645c:	e0bf7d17 	ldw	r2,-524(fp)
}
   86460:	e037883a 	mov	sp,fp
   86464:	dfc00117 	ldw	ra,4(sp)
   86468:	df000017 	ldw	fp,0(sp)
   8646c:	dec00504 	addi	sp,sp,20
   86470:	f800283a 	ret

00086474 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
   86474:	defff704 	addi	sp,sp,-36
   86478:	dfc00815 	stw	ra,32(sp)
   8647c:	df000715 	stw	fp,28(sp)
   86480:	df000704 	addi	fp,sp,28
   86484:	e13ffe15 	stw	r4,-8(fp)
   86488:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   8648c:	e03ff915 	stw	zero,-28(fp)
   86490:	00001106 	br	864d8 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
   86494:	e0bff917 	ldw	r2,-28(fp)
   86498:	e0fffe17 	ldw	r3,-8(fp)
   8649c:	1885883a 	add	r2,r3,r2
   864a0:	10800003 	ldbu	r2,0(r2)
   864a4:	10803fcc 	andi	r2,r2,255
   864a8:	e0fffa04 	addi	r3,fp,-24
   864ac:	1809883a 	mov	r4,r3
   864b0:	014002b4 	movhi	r5,10
   864b4:	295baa04 	addi	r5,r5,28328
   864b8:	100d883a 	mov	r6,r2
   864bc:	008a4640 	call	8a464 <sprintf>
        DEBUG((szText));
   864c0:	e0bffa04 	addi	r2,fp,-24
   864c4:	1009883a 	mov	r4,r2
   864c8:	00864080 	call	86408 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   864cc:	e0bff917 	ldw	r2,-28(fp)
   864d0:	10800044 	addi	r2,r2,1
   864d4:	e0bff915 	stw	r2,-28(fp)
   864d8:	e0fff917 	ldw	r3,-28(fp)
   864dc:	e0bfff17 	ldw	r2,-4(fp)
   864e0:	18bfec16 	blt	r3,r2,86494 <__alt_data_end+0xfffce224>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
   864e4:	e0bfff17 	ldw	r2,-4(fp)
}
   864e8:	e037883a 	mov	sp,fp
   864ec:	dfc00117 	ldw	ra,4(sp)
   864f0:	df000017 	ldw	fp,0(sp)
   864f4:	dec00204 	addi	sp,sp,8
   864f8:	f800283a 	ret

000864fc <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
   864fc:	defff704 	addi	sp,sp,-36
   86500:	dfc00815 	stw	ra,32(sp)
   86504:	df000715 	stw	fp,28(sp)
   86508:	df000704 	addi	fp,sp,28
   8650c:	e13ffe15 	stw	r4,-8(fp)
   86510:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   86514:	e03ff915 	stw	zero,-28(fp)
   86518:	00001206 	br	86564 <myprintf_dwordarray+0x68>
        sprintf(szText, "[%08X]", *(pArray+i));
   8651c:	e0bff917 	ldw	r2,-28(fp)
   86520:	1085883a 	add	r2,r2,r2
   86524:	1085883a 	add	r2,r2,r2
   86528:	e0fffe17 	ldw	r3,-8(fp)
   8652c:	1885883a 	add	r2,r3,r2
   86530:	10800017 	ldw	r2,0(r2)
   86534:	e0fffa04 	addi	r3,fp,-24
   86538:	1809883a 	mov	r4,r3
   8653c:	014002b4 	movhi	r5,10
   86540:	295bac04 	addi	r5,r5,28336
   86544:	100d883a 	mov	r6,r2
   86548:	008a4640 	call	8a464 <sprintf>
        DEBUG((szText));
   8654c:	e0bffa04 	addi	r2,fp,-24
   86550:	1009883a 	mov	r4,r2
   86554:	00864080 	call	86408 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   86558:	e0bff917 	ldw	r2,-28(fp)
   8655c:	10800044 	addi	r2,r2,1
   86560:	e0bff915 	stw	r2,-28(fp)
   86564:	e0fff917 	ldw	r3,-28(fp)
   86568:	e0bfff17 	ldw	r2,-4(fp)
   8656c:	18bfeb16 	blt	r3,r2,8651c <__alt_data_end+0xfffce2ac>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
   86570:	e0bfff17 	ldw	r2,-4(fp)
}
   86574:	e037883a 	mov	sp,fp
   86578:	dfc00117 	ldw	ra,4(sp)
   8657c:	df000017 	ldw	fp,0(sp)
   86580:	dec00204 	addi	sp,sp,8
   86584:	f800283a 	ret

00086588 <QUEUE_New>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
   86588:	defffb04 	addi	sp,sp,-20
   8658c:	dfc00415 	stw	ra,16(sp)
   86590:	df000315 	stw	fp,12(sp)
   86594:	df000304 	addi	fp,sp,12
   86598:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
   8659c:	e0bfff17 	ldw	r2,-4(fp)
   865a0:	10800144 	addi	r2,r2,5
   865a4:	1085883a 	add	r2,r2,r2
   865a8:	1085883a 	add	r2,r2,r2
   865ac:	e0bffd15 	stw	r2,-12(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
   865b0:	e0bffd17 	ldw	r2,-12(fp)
   865b4:	1009883a 	mov	r4,r2
   865b8:	0089ba40 	call	89ba4 <malloc>
   865bc:	e0bffe15 	stw	r2,-8(fp)
    memset((void *)pQueue, 0, nSize);
   865c0:	e0bffd17 	ldw	r2,-12(fp)
   865c4:	e13ffe17 	ldw	r4,-8(fp)
   865c8:	000b883a 	mov	r5,zero
   865cc:	100d883a 	mov	r6,r2
   865d0:	008a2740 	call	8a274 <memset>
    pQueue->num = nQueueNum;
   865d4:	e0ffff17 	ldw	r3,-4(fp)
   865d8:	e0bffe17 	ldw	r2,-8(fp)
   865dc:	10c00015 	stw	r3,0(r2)
    return pQueue;
   865e0:	e0bffe17 	ldw	r2,-8(fp)
}
   865e4:	e037883a 	mov	sp,fp
   865e8:	dfc00117 	ldw	ra,4(sp)
   865ec:	df000017 	ldw	fp,0(sp)
   865f0:	dec00204 	addi	sp,sp,8
   865f4:	f800283a 	ret

000865f8 <QUEUE_Delete>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
   865f8:	defffd04 	addi	sp,sp,-12
   865fc:	dfc00215 	stw	ra,8(sp)
   86600:	df000115 	stw	fp,4(sp)
   86604:	df000104 	addi	fp,sp,4
   86608:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
   8660c:	e13fff17 	ldw	r4,-4(fp)
   86610:	0089bb80 	call	89bb8 <free>
}
   86614:	e037883a 	mov	sp,fp
   86618:	dfc00117 	ldw	ra,4(sp)
   8661c:	df000017 	ldw	fp,0(sp)
   86620:	dec00204 	addi	sp,sp,8
   86624:	f800283a 	ret

00086628 <QUEUE_IsEmpty>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
   86628:	defffe04 	addi	sp,sp,-8
   8662c:	df000115 	stw	fp,4(sp)
   86630:	df000104 	addi	fp,sp,4
   86634:	e13fff15 	stw	r4,-4(fp)
    if (pQueue->front == pQueue->rear)
   86638:	e0bfff17 	ldw	r2,-4(fp)
   8663c:	10c00117 	ldw	r3,4(r2)
   86640:	e0bfff17 	ldw	r2,-4(fp)
   86644:	10800217 	ldw	r2,8(r2)
   86648:	1880021e 	bne	r3,r2,86654 <QUEUE_IsEmpty+0x2c>
        return TRUE;
   8664c:	00800044 	movi	r2,1
   86650:	00000106 	br	86658 <QUEUE_IsEmpty+0x30>
    return FALSE;
   86654:	0005883a 	mov	r2,zero
}
   86658:	e037883a 	mov	sp,fp
   8665c:	df000017 	ldw	fp,0(sp)
   86660:	dec00104 	addi	sp,sp,4
   86664:	f800283a 	ret

00086668 <QUEUE_IsFull>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
   86668:	defffd04 	addi	sp,sp,-12
   8666c:	dfc00215 	stw	ra,8(sp)
   86670:	df000115 	stw	fp,4(sp)
   86674:	df000104 	addi	fp,sp,4
   86678:	e13fff15 	stw	r4,-4(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
   8667c:	e0bfff17 	ldw	r2,-4(fp)
   86680:	10800117 	ldw	r2,4(r2)
   86684:	10c00044 	addi	r3,r2,1
   86688:	e0bfff17 	ldw	r2,-4(fp)
   8668c:	10800017 	ldw	r2,0(r2)
   86690:	1809883a 	mov	r4,r3
   86694:	100b883a 	mov	r5,r2
   86698:	00877e00 	call	877e0 <__umodsi3>
   8669c:	1007883a 	mov	r3,r2
   866a0:	e0bfff17 	ldw	r2,-4(fp)
   866a4:	10800217 	ldw	r2,8(r2)
   866a8:	1880021e 	bne	r3,r2,866b4 <QUEUE_IsFull+0x4c>
        return TRUE;
   866ac:	00800044 	movi	r2,1
   866b0:	00000106 	br	866b8 <QUEUE_IsFull+0x50>
    return FALSE;
   866b4:	0005883a 	mov	r2,zero
}
   866b8:	e037883a 	mov	sp,fp
   866bc:	dfc00117 	ldw	ra,4(sp)
   866c0:	df000017 	ldw	fp,0(sp)
   866c4:	dec00204 	addi	sp,sp,8
   866c8:	f800283a 	ret

000866cc <QUEUE_Push>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
   866cc:	defffc04 	addi	sp,sp,-16
   866d0:	dfc00315 	stw	ra,12(sp)
   866d4:	df000215 	stw	fp,8(sp)
   866d8:	df000204 	addi	fp,sp,8
   866dc:	e13ffe15 	stw	r4,-8(fp)
   866e0:	e17fff15 	stw	r5,-4(fp)
    if (QUEUE_IsFull(pQueue))
   866e4:	e13ffe17 	ldw	r4,-8(fp)
   866e8:	00866680 	call	86668 <QUEUE_IsFull>
   866ec:	10000226 	beq	r2,zero,866f8 <QUEUE_Push+0x2c>
        return FALSE;
   866f0:	0005883a 	mov	r2,zero
   866f4:	00001506 	br	8674c <QUEUE_Push+0x80>
    pQueue->data[pQueue->front] = data32;
   866f8:	e0bffe17 	ldw	r2,-8(fp)
   866fc:	10800117 	ldw	r2,4(r2)
   86700:	e0fffe17 	ldw	r3,-8(fp)
   86704:	108000c4 	addi	r2,r2,3
   86708:	1085883a 	add	r2,r2,r2
   8670c:	1085883a 	add	r2,r2,r2
   86710:	1885883a 	add	r2,r3,r2
   86714:	e0ffff17 	ldw	r3,-4(fp)
   86718:	10c00015 	stw	r3,0(r2)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
   8671c:	e0bffe17 	ldw	r2,-8(fp)
   86720:	10800117 	ldw	r2,4(r2)
   86724:	10c00044 	addi	r3,r2,1
   86728:	e0bffe17 	ldw	r2,-8(fp)
   8672c:	10800017 	ldw	r2,0(r2)
   86730:	1809883a 	mov	r4,r3
   86734:	100b883a 	mov	r5,r2
   86738:	00877e00 	call	877e0 <__umodsi3>
   8673c:	1007883a 	mov	r3,r2
   86740:	e0bffe17 	ldw	r2,-8(fp)
   86744:	10c00115 	stw	r3,4(r2)
    return TRUE;
   86748:	00800044 	movi	r2,1
}
   8674c:	e037883a 	mov	sp,fp
   86750:	dfc00117 	ldw	ra,4(sp)
   86754:	df000017 	ldw	fp,0(sp)
   86758:	dec00204 	addi	sp,sp,8
   8675c:	f800283a 	ret

00086760 <QUEUE_Pop>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
   86760:	defffc04 	addi	sp,sp,-16
   86764:	dfc00315 	stw	ra,12(sp)
   86768:	df000215 	stw	fp,8(sp)
   8676c:	df000204 	addi	fp,sp,8
   86770:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
   86774:	e13fff17 	ldw	r4,-4(fp)
   86778:	00866280 	call	86628 <QUEUE_IsEmpty>
   8677c:	10000226 	beq	r2,zero,86788 <QUEUE_Pop+0x28>
        return 0;
   86780:	0005883a 	mov	r2,zero
   86784:	00001506 	br	867dc <QUEUE_Pop+0x7c>
    data32 = pQueue->data[pQueue->rear];
   86788:	e0bfff17 	ldw	r2,-4(fp)
   8678c:	10800217 	ldw	r2,8(r2)
   86790:	e0ffff17 	ldw	r3,-4(fp)
   86794:	108000c4 	addi	r2,r2,3
   86798:	1085883a 	add	r2,r2,r2
   8679c:	1085883a 	add	r2,r2,r2
   867a0:	1885883a 	add	r2,r3,r2
   867a4:	10800017 	ldw	r2,0(r2)
   867a8:	e0bffe15 	stw	r2,-8(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
   867ac:	e0bfff17 	ldw	r2,-4(fp)
   867b0:	10800217 	ldw	r2,8(r2)
   867b4:	10c00044 	addi	r3,r2,1
   867b8:	e0bfff17 	ldw	r2,-4(fp)
   867bc:	10800017 	ldw	r2,0(r2)
   867c0:	1809883a 	mov	r4,r3
   867c4:	100b883a 	mov	r5,r2
   867c8:	00877e00 	call	877e0 <__umodsi3>
   867cc:	1007883a 	mov	r3,r2
   867d0:	e0bfff17 	ldw	r2,-4(fp)
   867d4:	10c00215 	stw	r3,8(r2)
    return data32;
   867d8:	e0bffe17 	ldw	r2,-8(fp)
}
   867dc:	e037883a 	mov	sp,fp
   867e0:	dfc00117 	ldw	ra,4(sp)
   867e4:	df000017 	ldw	fp,0(sp)
   867e8:	dec00204 	addi	sp,sp,8
   867ec:	f800283a 	ret

000867f0 <QUEUE_Empty>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
   867f0:	defffe04 	addi	sp,sp,-8
   867f4:	df000115 	stw	fp,4(sp)
   867f8:	df000104 	addi	fp,sp,4
   867fc:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
   86800:	e0bfff17 	ldw	r2,-4(fp)
   86804:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
   86808:	e0bfff17 	ldw	r2,-4(fp)
   8680c:	10000215 	stw	zero,8(r2)
}
   86810:	e037883a 	mov	sp,fp
   86814:	df000017 	ldw	fp,0(sp)
   86818:	dec00104 	addi	sp,sp,4
   8681c:	f800283a 	ret

00086820 <Touch_Init>:
bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p);
void touch_empty_fifo(TERASIC_TOUCH_PANEL *p);
void touch_clear_input(TERASIC_TOUCH_PANEL *p);

// init touch panel
TOUCH_HANDLE Touch_Init(const alt_u32 spi_base, const alt_u32 penirq_base, const alt_u32 penirq_irq){
   86820:	defff804 	addi	sp,sp,-32
   86824:	dfc00715 	stw	ra,28(sp)
   86828:	df000615 	stw	fp,24(sp)
   8682c:	df000604 	addi	fp,sp,24
   86830:	e13ffd15 	stw	r4,-12(fp)
   86834:	e17ffe15 	stw	r5,-8(fp)
   86838:	e1bfff15 	stw	r6,-4(fp)
    bool bSuccess = TRUE;
   8683c:	00800044 	movi	r2,1
   86840:	e0bffb15 	stw	r2,-20(fp)
    
    TERASIC_TOUCH_PANEL *p;
    
    p = malloc(sizeof(TERASIC_TOUCH_PANEL));
   86844:	01001804 	movi	r4,96
   86848:	0089ba40 	call	89ba4 <malloc>
   8684c:	e0bffc15 	stw	r2,-16(fp)
    if (!p)
   86850:	e0bffc17 	ldw	r2,-16(fp)
   86854:	1000021e 	bne	r2,zero,86860 <Touch_Init+0x40>
        return p;
   86858:	e0bffc17 	ldw	r2,-16(fp)
   8685c:	00004706 	br	8697c <Touch_Init+0x15c>

    
    //
    memset(p, 0, sizeof(TERASIC_TOUCH_PANEL));
   86860:	e13ffc17 	ldw	r4,-16(fp)
   86864:	000b883a 	mov	r5,zero
   86868:	01801804 	movi	r6,96
   8686c:	008a2740 	call	8a274 <memset>
    p->spi_base = spi_base;
   86870:	e0bffc17 	ldw	r2,-16(fp)
   86874:	e0fffd17 	ldw	r3,-12(fp)
   86878:	10c00015 	stw	r3,0(r2)
    p->penirq_base = penirq_base;
   8687c:	e0bffc17 	ldw	r2,-16(fp)
   86880:	e0fffe17 	ldw	r3,-8(fp)
   86884:	10c00115 	stw	r3,4(r2)
    p->irq_mask = 0x01;  // 1-pin
   86888:	e0bffc17 	ldw	r2,-16(fp)
   8688c:	00c00044 	movi	r3,1
   86890:	10c00315 	stw	r3,12(r2)
    p->penirq_irq = penirq_irq;
   86894:	e0bffc17 	ldw	r2,-16(fp)
   86898:	e0ffff17 	ldw	r3,-4(fp)
   8689c:	10c00215 	stw	r3,8(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   868a0:	008002f4 	movhi	r2,11
   868a4:	10b57204 	addi	r2,r2,-10808
   868a8:	10800017 	ldw	r2,0(r2)
    p->alarm_dur = alt_ticks_per_second()/SAMPLE_RATE;
   868ac:	1009883a 	mov	r4,r2
   868b0:	01400f04 	movi	r5,60
   868b4:	00877d80 	call	877d8 <__udivsi3>
   868b8:	1007883a 	mov	r3,r2
   868bc:	e0bffc17 	ldw	r2,-16(fp)
   868c0:	10c01615 	stw	r3,88(r2)
    
    // enalbe penirq_n interrupt (P1=1, P1=0)
    touch_enable_penirq(p);    
   868c4:	e13ffc17 	ldw	r4,-16(fp)
   868c8:	0086c640 	call	86c64 <touch_enable_penirq>
    

    // enable interrupt, 1-pin
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, p->irq_mask); 
   868cc:	e0bffc17 	ldw	r2,-16(fp)
   868d0:	10800117 	ldw	r2,4(r2)
   868d4:	10800204 	addi	r2,r2,8
   868d8:	e0fffc17 	ldw	r3,-16(fp)
   868dc:	18c00317 	ldw	r3,12(r3)
   868e0:	10c00035 	stwio	r3,0(r2)
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);
   868e4:	e0bffc17 	ldw	r2,-16(fp)
   868e8:	10800117 	ldw	r2,4(r2)
   868ec:	10800304 	addi	r2,r2,12
   868f0:	0007883a 	mov	r3,zero
   868f4:	10c00035 	stwio	r3,0(r2)
    // register ISR
    // register callback function

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,
   868f8:	e0bffc17 	ldw	r2,-16(fp)
   868fc:	10800217 	ldw	r2,8(r2)
   86900:	d8000015 	stw	zero,0(sp)
   86904:	0009883a 	mov	r4,zero
   86908:	100b883a 	mov	r5,r2
   8690c:	01800234 	movhi	r6,8
   86910:	319adf04 	addi	r6,r6,27516
   86914:	e1fffc17 	ldw	r7,-16(fp)
   86918:	008b7fc0 	call	8b7fc <alt_ic_isr_register>
   8691c:	10000126 	beq	r2,zero,86924 <Touch_Init+0x104>
		                   ) != 0)){
 #else
  if ((alt_irq_register(p->penirq_irq, (void *)p, touch_isr) != 0)){
 #endif
        DEBUG_OUT(("[TOUCH]register IRQ fail\n"));
        bSuccess = FALSE;
   86920:	e03ffb15 	stw	zero,-20(fp)
    }else{        
        DEBUG_OUT(("[TOUCH]register IRQ success\n"));
    }

    if (bSuccess){    
   86924:	e0bffb17 	ldw	r2,-20(fp)
   86928:	10000c26 	beq	r2,zero,8695c <Touch_Init+0x13c>
        if (alt_alarm_start(&p->alarm, p->alarm_dur, touch_alarm_callback, p) == 0){
   8692c:	e0bffc17 	ldw	r2,-16(fp)
   86930:	10c01004 	addi	r3,r2,64
   86934:	e0bffc17 	ldw	r2,-16(fp)
   86938:	10801617 	ldw	r2,88(r2)
   8693c:	1809883a 	mov	r4,r3
   86940:	100b883a 	mov	r5,r2
   86944:	01800234 	movhi	r6,8
   86948:	319c4604 	addi	r6,r6,28952
   8694c:	e1fffc17 	ldw	r7,-16(fp)
   86950:	008b7680 	call	8b768 <alt_alarm_start>
   86954:	10000126 	beq	r2,zero,8695c <Touch_Init+0x13c>
            DEBUG_OUT(("[TOUCH]alarm start success\n"));
        }else{
            DEBUG_OUT(("[TOUCH]alarm start fail\n"));
            bSuccess = FALSE;
   86958:	e03ffb15 	stw	zero,-20(fp)
        }
    }
    
    if (!bSuccess && p){
   8695c:	e0bffb17 	ldw	r2,-20(fp)
   86960:	1000051e 	bne	r2,zero,86978 <Touch_Init+0x158>
   86964:	e0bffc17 	ldw	r2,-16(fp)
   86968:	10000326 	beq	r2,zero,86978 <Touch_Init+0x158>
        free(p);
   8696c:	e13ffc17 	ldw	r4,-16(fp)
   86970:	0089bb80 	call	89bb8 <free>
        p = NULL;
   86974:	e03ffc15 	stw	zero,-16(fp)
    }        
                
    return p;        
   86978:	e0bffc17 	ldw	r2,-16(fp)
    

}
   8697c:	e037883a 	mov	sp,fp
   86980:	dfc00117 	ldw	ra,4(sp)
   86984:	df000017 	ldw	fp,0(sp)
   86988:	dec00204 	addi	sp,sp,8
   8698c:	f800283a 	ret

00086990 <Touch_UnInit>:

// uninit touch panel
void Touch_UnInit(TOUCH_HANDLE pHandle){
   86990:	defffc04 	addi	sp,sp,-16
   86994:	dfc00315 	stw	ra,12(sp)
   86998:	df000215 	stw	fp,8(sp)
   8699c:	df000204 	addi	fp,sp,8
   869a0:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
   869a4:	e0bfff17 	ldw	r2,-4(fp)
   869a8:	e0bffe15 	stw	r2,-8(fp)
    if (!p)
   869ac:	e0bffe17 	ldw	r2,-8(fp)
   869b0:	1000011e 	bne	r2,zero,869b8 <Touch_UnInit+0x28>
        return;
   869b4:	00000b06 	br	869e4 <Touch_UnInit+0x54>
        
    // stop alarm
    alt_alarm_stop(&(p->alarm));
   869b8:	e0bffe17 	ldw	r2,-8(fp)
   869bc:	10801004 	addi	r2,r2,64
   869c0:	1009883a 	mov	r4,r2
   869c4:	008ba900 	call	8ba90 <alt_alarm_stop>
    // disable irq
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, 0x00);
   869c8:	e0bffe17 	ldw	r2,-8(fp)
   869cc:	10800117 	ldw	r2,4(r2)
   869d0:	10800204 	addi	r2,r2,8
   869d4:	0007883a 	mov	r3,zero
   869d8:	10c00035 	stwio	r3,0(r2)
    
    // zero varialbe
    free(p);
   869dc:	e13ffe17 	ldw	r4,-8(fp)
   869e0:	0089bb80 	call	89bb8 <free>
}
   869e4:	e037883a 	mov	sp,fp
   869e8:	dfc00117 	ldw	ra,4(sp)
   869ec:	df000017 	ldw	fp,0(sp)
   869f0:	dec00204 	addi	sp,sp,8
   869f4:	f800283a 	ret

000869f8 <Touch_EmptyFifo>:


void Touch_EmptyFifo(TOUCH_HANDLE pHandle){
   869f8:	defffc04 	addi	sp,sp,-16
   869fc:	dfc00315 	stw	ra,12(sp)
   86a00:	df000215 	stw	fp,8(sp)
   86a04:	df000204 	addi	fp,sp,8
   86a08:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
   86a0c:	e0bfff17 	ldw	r2,-4(fp)
   86a10:	e0bffe15 	stw	r2,-8(fp)
    touch_empty_fifo(p);
   86a14:	e13ffe17 	ldw	r4,-8(fp)
   86a18:	0086bf40 	call	86bf4 <touch_empty_fifo>
}
   86a1c:	e037883a 	mov	sp,fp
   86a20:	dfc00117 	ldw	ra,4(sp)
   86a24:	df000017 	ldw	fp,0(sp)
   86a28:	dec00204 	addi	sp,sp,8
   86a2c:	f800283a 	ret

00086a30 <Touch_GetXY>:

// get x/y from internal FIFO
bool Touch_GetXY(TOUCH_HANDLE pHandle, int *x, int *y){
   86a30:	defff904 	addi	sp,sp,-28
   86a34:	dfc00615 	stw	ra,24(sp)
   86a38:	df000515 	stw	fp,20(sp)
   86a3c:	dc000415 	stw	r16,16(sp)
   86a40:	df000504 	addi	fp,sp,20
   86a44:	e13ffc15 	stw	r4,-16(fp)
   86a48:	e17ffd15 	stw	r5,-12(fp)
   86a4c:	e1bffe15 	stw	r6,-8(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
   86a50:	e0bffc17 	ldw	r2,-16(fp)
   86a54:	e0bffb15 	stw	r2,-20(fp)
    if (!p)
   86a58:	e0bffb17 	ldw	r2,-20(fp)
   86a5c:	1000021e 	bne	r2,zero,86a68 <Touch_GetXY+0x38>
        return FALSE;    
   86a60:	0005883a 	mov	r2,zero
   86a64:	00003f06 	br	86b64 <Touch_GetXY+0x134>
    
    if (p->fifo_front == p->fifo_rear){
   86a68:	e0bffb17 	ldw	r2,-20(fp)
   86a6c:	10c0040b 	ldhu	r3,16(r2)
   86a70:	e0bffb17 	ldw	r2,-20(fp)
   86a74:	1080048b 	ldhu	r2,18(r2)
   86a78:	18ffffcc 	andi	r3,r3,65535
   86a7c:	10bfffcc 	andi	r2,r2,65535
   86a80:	1880021e 	bne	r3,r2,86a8c <Touch_GetXY+0x5c>
        // empty
        return FALSE;
   86a84:	0005883a 	mov	r2,zero
   86a88:	00003606 	br	86b64 <Touch_GetXY+0x134>
    }
    *x = p->fifo_x[p->fifo_rear];
   86a8c:	e0bffb17 	ldw	r2,-20(fp)
   86a90:	1080048b 	ldhu	r2,18(r2)
   86a94:	10bfffcc 	andi	r2,r2,65535
   86a98:	e0fffb17 	ldw	r3,-20(fp)
   86a9c:	10800284 	addi	r2,r2,10
   86aa0:	1085883a 	add	r2,r2,r2
   86aa4:	1885883a 	add	r2,r3,r2
   86aa8:	1080000b 	ldhu	r2,0(r2)
   86aac:	10ffffcc 	andi	r3,r2,65535
   86ab0:	e0bffd17 	ldw	r2,-12(fp)
   86ab4:	10c00015 	stw	r3,0(r2)
    *y = p->fifo_y[p->fifo_rear];
   86ab8:	e0bffb17 	ldw	r2,-20(fp)
   86abc:	1080048b 	ldhu	r2,18(r2)
   86ac0:	10bfffcc 	andi	r2,r2,65535
   86ac4:	e0fffb17 	ldw	r3,-20(fp)
   86ac8:	10800504 	addi	r2,r2,20
   86acc:	1085883a 	add	r2,r2,r2
   86ad0:	1885883a 	add	r2,r3,r2
   86ad4:	1080000b 	ldhu	r2,0(r2)
   86ad8:	10ffffcc 	andi	r3,r2,65535
   86adc:	e0bffe17 	ldw	r2,-8(fp)
   86ae0:	10c00015 	stw	r3,0(r2)
    //
    p->fifo_rear++;
   86ae4:	e0bffb17 	ldw	r2,-20(fp)
   86ae8:	1080048b 	ldhu	r2,18(r2)
   86aec:	10800044 	addi	r2,r2,1
   86af0:	1007883a 	mov	r3,r2
   86af4:	e0bffb17 	ldw	r2,-20(fp)
   86af8:	10c0048d 	sth	r3,18(r2)
    p->fifo_rear %= FIFO_SIZE;
   86afc:	e0bffb17 	ldw	r2,-20(fp)
   86b00:	1080048b 	ldhu	r2,18(r2)
   86b04:	10bfffcc 	andi	r2,r2,65535
   86b08:	1009883a 	mov	r4,r2
   86b0c:	01400284 	movi	r5,10
   86b10:	00877e00 	call	877e0 <__umodsi3>
   86b14:	1007883a 	mov	r3,r2
   86b18:	e0bffb17 	ldw	r2,-20(fp)
   86b1c:	10c0048d 	sth	r3,18(r2)
    //
    // translate
    touch_xy_transform(x, y);
   86b20:	e13ffd17 	ldw	r4,-12(fp)
   86b24:	e17ffe17 	ldw	r5,-8(fp)
   86b28:	00871900 	call	87190 <touch_xy_transform>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   86b2c:	008002f4 	movhi	r2,11
   86b30:	10b57104 	addi	r2,r2,-10812
   86b34:	10800017 	ldw	r2,0(r2)

    DEBUG_OUT("[TOUCH] x=%d, y=%d\n", *x,*y);
//    touch_clear_input(p);
//    touch_empty_fifo(p);
    p->next_active_time = alt_nticks() + ACTIVE_DELAY_TIME;
   86b38:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   86b3c:	008002f4 	movhi	r2,11
   86b40:	10b57204 	addi	r2,r2,-10808
   86b44:	10800017 	ldw	r2,0(r2)
   86b48:	1009883a 	mov	r4,r2
   86b4c:	01400f04 	movi	r5,60
   86b50:	00877d80 	call	877d8 <__udivsi3>
   86b54:	8087883a 	add	r3,r16,r2
   86b58:	e0bffb17 	ldw	r2,-20(fp)
   86b5c:	10c01715 	stw	r3,92(r2)
    
    return TRUE;
   86b60:	00800044 	movi	r2,1
}
   86b64:	e6ffff04 	addi	sp,fp,-4
   86b68:	dfc00217 	ldw	ra,8(sp)
   86b6c:	df000117 	ldw	fp,4(sp)
   86b70:	dc000017 	ldw	r16,0(sp)
   86b74:	dec00304 	addi	sp,sp,12
   86b78:	f800283a 	ret

00086b7c <touch_isr>:



// penirq_n ISR
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void touch_isr(void* context){
   86b7c:	defffb04 	addi	sp,sp,-20
   86b80:	dfc00415 	stw	ra,16(sp)
   86b84:	df000315 	stw	fp,12(sp)
   86b88:	df000304 	addi	fp,sp,12
   86b8c:	e13fff15 	stw	r4,-4(fp)
#else
void touch_isr(void* context, alt_u32 id){
#endif
    alt_u8 mask;
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
   86b90:	e0bfff17 	ldw	r2,-4(fp)
   86b94:	e0bffd15 	stw	r2,-12(fp)

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_disable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
   86b98:	0009883a 	mov	r4,zero
   86b9c:	01400144 	movi	r5,5
   86ba0:	008b8400 	call	8b840 <alt_ic_irq_disable>
#else
    alt_irq_disable(id);
#endif

    // get the edge capture mask
    mask = IORD_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base);
   86ba4:	e0bffd17 	ldw	r2,-12(fp)
   86ba8:	10800117 	ldw	r2,4(r2)
   86bac:	10800304 	addi	r2,r2,12
   86bb0:	10800037 	ldwio	r2,0(r2)
   86bb4:	e0bffe05 	stb	r2,-8(fp)
    //if ((mask & Touch.irq_mask) == 0)  // 1-pin
    //    return;
    DEBUG_OUT("Touched!!\n");
    usleep(1000);
   86bb8:	0100fa04 	movi	r4,1000
   86bbc:	008bbbc0 	call	8bbbc <usleep>
    }
    IOWR(PIO_RED_LED_BASE, 0, Touch.pen_pressed);
#endif                    
    
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);    
   86bc0:	e0bffd17 	ldw	r2,-12(fp)
   86bc4:	10800117 	ldw	r2,4(r2)
   86bc8:	10800304 	addi	r2,r2,12
   86bcc:	0007883a 	mov	r3,zero
   86bd0:	10c00035 	stwio	r3,0(r2)
    
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_enable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
   86bd4:	0009883a 	mov	r4,zero
   86bd8:	01400144 	movi	r5,5
   86bdc:	008b8000 	call	8b800 <alt_ic_irq_enable>
#else
    alt_irq_enable(id);
#endif

}
   86be0:	e037883a 	mov	sp,fp
   86be4:	dfc00117 	ldw	ra,4(sp)
   86be8:	df000017 	ldw	fp,0(sp)
   86bec:	dec00204 	addi	sp,sp,8
   86bf0:	f800283a 	ret

00086bf4 <touch_empty_fifo>:

void touch_empty_fifo(TERASIC_TOUCH_PANEL *p){
   86bf4:	defffe04 	addi	sp,sp,-8
   86bf8:	df000115 	stw	fp,4(sp)
   86bfc:	df000104 	addi	fp,sp,4
   86c00:	e13fff15 	stw	r4,-4(fp)
    p->fifo_rear = p->fifo_front;
   86c04:	e0bfff17 	ldw	r2,-4(fp)
   86c08:	10c0040b 	ldhu	r3,16(r2)
   86c0c:	e0bfff17 	ldw	r2,-4(fp)
   86c10:	10c0048d 	sth	r3,18(r2)
}
   86c14:	e037883a 	mov	sp,fp
   86c18:	df000017 	ldw	fp,0(sp)
   86c1c:	dec00104 	addi	sp,sp,4
   86c20:	f800283a 	ret

00086c24 <touch_is_pen_pressed>:

bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p){
   86c24:	defffd04 	addi	sp,sp,-12
   86c28:	df000215 	stw	fp,8(sp)
   86c2c:	df000204 	addi	fp,sp,8
   86c30:	e13fff15 	stw	r4,-4(fp)
    bool bPressed;
    bPressed = (IORD(p->penirq_base, 0) & 0x01)?FALSE:TRUE;
   86c34:	e0bfff17 	ldw	r2,-4(fp)
   86c38:	10800117 	ldw	r2,4(r2)
   86c3c:	10800037 	ldwio	r2,0(r2)
   86c40:	1080004c 	andi	r2,r2,1
   86c44:	1005003a 	cmpeq	r2,r2,zero
   86c48:	10803fcc 	andi	r2,r2,255
   86c4c:	e0bffe15 	stw	r2,-8(fp)
    return bPressed;
   86c50:	e0bffe17 	ldw	r2,-8(fp)
}
   86c54:	e037883a 	mov	sp,fp
   86c58:	df000017 	ldw	fp,0(sp)
   86c5c:	dec00104 	addi	sp,sp,4
   86c60:	f800283a 	ret

00086c64 <touch_enable_penirq>:


void touch_enable_penirq(TERASIC_TOUCH_PANEL *p){
   86c64:	defff904 	addi	sp,sp,-28
   86c68:	dfc00615 	stw	ra,24(sp)
   86c6c:	df000515 	stw	fp,20(sp)
   86c70:	df000504 	addi	fp,sp,20
   86c74:	e13fff15 	stw	r4,-4(fp)
    const alt_u8 CommandGetX = 0x82;
   86c78:	00bfe084 	movi	r2,-126
   86c7c:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
   86c80:	00bff484 	movi	r2,-46
   86c84:	e0bffe45 	stb	r2,-7(fp)
    alt_u8 data8;
    
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   86c88:	e0bfff17 	ldw	r2,-4(fp)
   86c8c:	10800017 	ldw	r2,0(r2)
   86c90:	d8000015 	stw	zero,0(sp)
   86c94:	d8000115 	stw	zero,4(sp)
   86c98:	00c00044 	movi	r3,1
   86c9c:	d8c00215 	stw	r3,8(sp)
   86ca0:	1009883a 	mov	r4,r2
   86ca4:	000b883a 	mov	r5,zero
   86ca8:	01800044 	movi	r6,1
   86cac:	e1fffe04 	addi	r7,fp,-8
   86cb0:	008c2bc0 	call	8c2bc <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
   86cb4:	e0bfff17 	ldw	r2,-4(fp)
   86cb8:	10800017 	ldw	r2,0(r2)
   86cbc:	00c00044 	movi	r3,1
   86cc0:	d8c00015 	stw	r3,0(sp)
   86cc4:	e0fffe84 	addi	r3,fp,-6
   86cc8:	d8c00115 	stw	r3,4(sp)
   86ccc:	00c00044 	movi	r3,1
   86cd0:	d8c00215 	stw	r3,8(sp)
   86cd4:	1009883a 	mov	r4,r2
   86cd8:	000b883a 	mov	r5,zero
   86cdc:	000d883a 	mov	r6,zero
   86ce0:	000f883a 	mov	r7,zero
   86ce4:	008c2bc0 	call	8c2bc <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   86ce8:	e0bfff17 	ldw	r2,-4(fp)
   86cec:	10800017 	ldw	r2,0(r2)
   86cf0:	00c00044 	movi	r3,1
   86cf4:	d8c00015 	stw	r3,0(sp)
   86cf8:	e0fffe84 	addi	r3,fp,-6
   86cfc:	d8c00115 	stw	r3,4(sp)
   86d00:	00c00084 	movi	r3,2
   86d04:	d8c00215 	stw	r3,8(sp)
   86d08:	1009883a 	mov	r4,r2
   86d0c:	000b883a 	mov	r5,zero
   86d10:	000d883a 	mov	r6,zero
   86d14:	000f883a 	mov	r7,zero
   86d18:	008c2bc0 	call	8c2bc <alt_avalon_spi_command>
   
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   86d1c:	e0bfff17 	ldw	r2,-4(fp)
   86d20:	10c00017 	ldw	r3,0(r2)
   86d24:	e0bffe44 	addi	r2,fp,-7
   86d28:	d8000015 	stw	zero,0(sp)
   86d2c:	d8000115 	stw	zero,4(sp)
   86d30:	01000044 	movi	r4,1
   86d34:	d9000215 	stw	r4,8(sp)
   86d38:	1809883a 	mov	r4,r3
   86d3c:	000b883a 	mov	r5,zero
   86d40:	01800044 	movi	r6,1
   86d44:	100f883a 	mov	r7,r2
   86d48:	008c2bc0 	call	8c2bc <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
   86d4c:	e0bfff17 	ldw	r2,-4(fp)
   86d50:	10800017 	ldw	r2,0(r2)
   86d54:	00c00044 	movi	r3,1
   86d58:	d8c00015 	stw	r3,0(sp)
   86d5c:	e0fffe84 	addi	r3,fp,-6
   86d60:	d8c00115 	stw	r3,4(sp)
   86d64:	00c00044 	movi	r3,1
   86d68:	d8c00215 	stw	r3,8(sp)
   86d6c:	1009883a 	mov	r4,r2
   86d70:	000b883a 	mov	r5,zero
   86d74:	000d883a 	mov	r6,zero
   86d78:	000f883a 	mov	r7,zero
   86d7c:	008c2bc0 	call	8c2bc <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   86d80:	e0bfff17 	ldw	r2,-4(fp)
   86d84:	10800017 	ldw	r2,0(r2)
   86d88:	00c00044 	movi	r3,1
   86d8c:	d8c00015 	stw	r3,0(sp)
   86d90:	e0fffe84 	addi	r3,fp,-6
   86d94:	d8c00115 	stw	r3,4(sp)
   86d98:	00c00084 	movi	r3,2
   86d9c:	d8c00215 	stw	r3,8(sp)
   86da0:	1009883a 	mov	r4,r2
   86da4:	000b883a 	mov	r5,zero
   86da8:	000d883a 	mov	r6,zero
   86dac:	000f883a 	mov	r7,zero
   86db0:	008c2bc0 	call	8c2bc <alt_avalon_spi_command>
}
   86db4:	e037883a 	mov	sp,fp
   86db8:	dfc00117 	ldw	ra,4(sp)
   86dbc:	df000017 	ldw	fp,0(sp)
   86dc0:	dec00204 	addi	sp,sp,8
   86dc4:	f800283a 	ret

00086dc8 <touch_clear_input>:

void touch_clear_input(TERASIC_TOUCH_PANEL *p){
   86dc8:	defffd04 	addi	sp,sp,-12
   86dcc:	dfc00215 	stw	ra,8(sp)
   86dd0:	df000115 	stw	fp,4(sp)
   86dd4:	df000104 	addi	fp,sp,4
   86dd8:	e13fff15 	stw	r4,-4(fp)
    touch_enable_penirq(p);
   86ddc:	e13fff17 	ldw	r4,-4(fp)
   86de0:	0086c640 	call	86c64 <touch_enable_penirq>
}
   86de4:	e037883a 	mov	sp,fp
   86de8:	dfc00117 	ldw	ra,4(sp)
   86dec:	df000017 	ldw	fp,0(sp)
   86df0:	dec00204 	addi	sp,sp,8
   86df4:	f800283a 	ret

00086df8 <touch_get_xy>:

// get x/y by SPI command
void touch_get_xy(TERASIC_TOUCH_PANEL *p){
   86df8:	defff604 	addi	sp,sp,-40
   86dfc:	dfc00915 	stw	ra,36(sp)
   86e00:	df000815 	stw	fp,32(sp)
   86e04:	df000804 	addi	fp,sp,32
   86e08:	e13fff15 	stw	r4,-4(fp)
    alt_u16 x, y;
    int result;
    const alt_u8 CommandGetX = 0x92;
   86e0c:	00bfe484 	movi	r2,-110
   86e10:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
   86e14:	00bff484 	movi	r2,-46
   86e18:	e0bffe45 	stb	r2,-7(fp)
    
       
    //DEBUG_OUT(("[TOUCH] get x/y\n"));

    // x
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   86e1c:	e0bfff17 	ldw	r2,-4(fp)
   86e20:	10c00017 	ldw	r3,0(r2)
   86e24:	e0bffe04 	addi	r2,fp,-8
   86e28:	d8000015 	stw	zero,0(sp)
   86e2c:	d8000115 	stw	zero,4(sp)
   86e30:	01000044 	movi	r4,1
   86e34:	d9000215 	stw	r4,8(sp)
   86e38:	1809883a 	mov	r4,r3
   86e3c:	000b883a 	mov	r5,zero
   86e40:	01800044 	movi	r6,1
   86e44:	100f883a 	mov	r7,r2
   86e48:	008c2bc0 	call	8c2bc <alt_avalon_spi_command>
   86e4c:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
   86e50:	e0bfff17 	ldw	r2,-4(fp)
   86e54:	10800017 	ldw	r2,0(r2)
   86e58:	00c00044 	movi	r3,1
   86e5c:	d8c00015 	stw	r3,0(sp)
   86e60:	e0fffe84 	addi	r3,fp,-6
   86e64:	d8c00115 	stw	r3,4(sp)
   86e68:	00c00044 	movi	r3,1
   86e6c:	d8c00215 	stw	r3,8(sp)
   86e70:	1009883a 	mov	r4,r2
   86e74:	000b883a 	mov	r5,zero
   86e78:	000d883a 	mov	r6,zero
   86e7c:	000f883a 	mov	r7,zero
   86e80:	008c2bc0 	call	8c2bc <alt_avalon_spi_command>
   86e84:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
   86e88:	e0bffb17 	ldw	r2,-20(fp)
   86e8c:	10800060 	cmpeqi	r2,r2,1
   86e90:	1000011e 	bne	r2,zero,86e98 <touch_get_xy+0xa0>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
   86e94:	00009b06 	br	87104 <touch_get_xy+0x30c>
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   86e98:	e0bfff17 	ldw	r2,-4(fp)
   86e9c:	10800017 	ldw	r2,0(r2)
   86ea0:	00c00044 	movi	r3,1
   86ea4:	d8c00015 	stw	r3,0(sp)
   86ea8:	e0fffec4 	addi	r3,fp,-5
   86eac:	d8c00115 	stw	r3,4(sp)
   86eb0:	00c00084 	movi	r3,2
   86eb4:	d8c00215 	stw	r3,8(sp)
   86eb8:	1009883a 	mov	r4,r2
   86ebc:	000b883a 	mov	r5,zero
   86ec0:	000d883a 	mov	r6,zero
   86ec4:	000f883a 	mov	r7,zero
   86ec8:	008c2bc0 	call	8c2bc <alt_avalon_spi_command>
   86ecc:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
   86ed0:	e0bffb17 	ldw	r2,-20(fp)
   86ed4:	10800060 	cmpeqi	r2,r2,1
   86ed8:	1000011e 	bne	r2,zero,86ee0 <touch_get_xy+0xe8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
   86edc:	00008906 	br	87104 <touch_get_xy+0x30c>
    }  
    ResponseX = (high_byte << 8) | low_byte;        
   86ee0:	e0bffe83 	ldbu	r2,-6(fp)
   86ee4:	10803fcc 	andi	r2,r2,255
   86ee8:	1004923a 	slli	r2,r2,8
   86eec:	1007883a 	mov	r3,r2
   86ef0:	e0bffec3 	ldbu	r2,-5(fp)
   86ef4:	10803fcc 	andi	r2,r2,255
   86ef8:	1884b03a 	or	r2,r3,r2
   86efc:	e0bffc0d 	sth	r2,-16(fp)
    
    // y
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   86f00:	e0bfff17 	ldw	r2,-4(fp)
   86f04:	10c00017 	ldw	r3,0(r2)
   86f08:	e0bffe44 	addi	r2,fp,-7
   86f0c:	d8000015 	stw	zero,0(sp)
   86f10:	d8000115 	stw	zero,4(sp)
   86f14:	01000044 	movi	r4,1
   86f18:	d9000215 	stw	r4,8(sp)
   86f1c:	1809883a 	mov	r4,r3
   86f20:	000b883a 	mov	r5,zero
   86f24:	01800044 	movi	r6,1
   86f28:	100f883a 	mov	r7,r2
   86f2c:	008c2bc0 	call	8c2bc <alt_avalon_spi_command>
   86f30:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
   86f34:	e0bfff17 	ldw	r2,-4(fp)
   86f38:	10800017 	ldw	r2,0(r2)
   86f3c:	00c00044 	movi	r3,1
   86f40:	d8c00015 	stw	r3,0(sp)
   86f44:	e0fffe84 	addi	r3,fp,-6
   86f48:	d8c00115 	stw	r3,4(sp)
   86f4c:	00c00044 	movi	r3,1
   86f50:	d8c00215 	stw	r3,8(sp)
   86f54:	1009883a 	mov	r4,r2
   86f58:	000b883a 	mov	r5,zero
   86f5c:	000d883a 	mov	r6,zero
   86f60:	000f883a 	mov	r7,zero
   86f64:	008c2bc0 	call	8c2bc <alt_avalon_spi_command>
   86f68:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
   86f6c:	e0bffb17 	ldw	r2,-20(fp)
   86f70:	10800060 	cmpeqi	r2,r2,1
   86f74:	1000011e 	bne	r2,zero,86f7c <touch_get_xy+0x184>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
   86f78:	00006206 	br	87104 <touch_get_xy+0x30c>
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   86f7c:	e0bfff17 	ldw	r2,-4(fp)
   86f80:	10800017 	ldw	r2,0(r2)
   86f84:	00c00044 	movi	r3,1
   86f88:	d8c00015 	stw	r3,0(sp)
   86f8c:	e0fffec4 	addi	r3,fp,-5
   86f90:	d8c00115 	stw	r3,4(sp)
   86f94:	00c00084 	movi	r3,2
   86f98:	d8c00215 	stw	r3,8(sp)
   86f9c:	1009883a 	mov	r4,r2
   86fa0:	000b883a 	mov	r5,zero
   86fa4:	000d883a 	mov	r6,zero
   86fa8:	000f883a 	mov	r7,zero
   86fac:	008c2bc0 	call	8c2bc <alt_avalon_spi_command>
   86fb0:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
   86fb4:	e0bffb17 	ldw	r2,-20(fp)
   86fb8:	10800060 	cmpeqi	r2,r2,1
   86fbc:	1000011e 	bne	r2,zero,86fc4 <touch_get_xy+0x1cc>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
   86fc0:	00005006 	br	87104 <touch_get_xy+0x30c>
    }  
    ResponseY = (high_byte << 8) | low_byte;        
   86fc4:	e0bffe83 	ldbu	r2,-6(fp)
   86fc8:	10803fcc 	andi	r2,r2,255
   86fcc:	1004923a 	slli	r2,r2,8
   86fd0:	1007883a 	mov	r3,r2
   86fd4:	e0bffec3 	ldbu	r2,-5(fp)
   86fd8:	10803fcc 	andi	r2,r2,255
   86fdc:	1884b03a 	or	r2,r3,r2
   86fe0:	e0bffc8d 	sth	r2,-14(fp)

    if (!touch_is_pen_pressed(p))
   86fe4:	e13fff17 	ldw	r4,-4(fp)
   86fe8:	0086c240 	call	86c24 <touch_is_pen_pressed>
   86fec:	1000011e 	bne	r2,zero,86ff4 <touch_get_xy+0x1fc>
        return; // do not use this data    
   86ff0:	00004406 	br	87104 <touch_get_xy+0x30c>
        
    x = (ResponseX >> 3 ) & 0xFFF;  // 12 bits    
   86ff4:	e0bffc0b 	ldhu	r2,-16(fp)
   86ff8:	1004d0fa 	srli	r2,r2,3
   86ffc:	1083ffcc 	andi	r2,r2,4095
   87000:	e0bffd0d 	sth	r2,-12(fp)
    y = (ResponseY >> 3 ) & 0xFFF;  // 12 bits
   87004:	e0bffc8b 	ldhu	r2,-14(fp)
   87008:	1004d0fa 	srli	r2,r2,3
   8700c:	1083ffcc 	andi	r2,r2,4095
   87010:	e0bffd8d 	sth	r2,-10(fp)
    
    
    // check whether the fifo is full!
    if (((p->fifo_front+1)%FIFO_SIZE) == p->fifo_rear){
   87014:	e0bfff17 	ldw	r2,-4(fp)
   87018:	1080040b 	ldhu	r2,16(r2)
   8701c:	10bfffcc 	andi	r2,r2,65535
   87020:	10800044 	addi	r2,r2,1
   87024:	1009883a 	mov	r4,r2
   87028:	01400284 	movi	r5,10
   8702c:	008778c0 	call	8778c <__modsi3>
   87030:	1007883a 	mov	r3,r2
   87034:	e0bfff17 	ldw	r2,-4(fp)
   87038:	1080048b 	ldhu	r2,18(r2)
   8703c:	10bfffcc 	andi	r2,r2,65535
   87040:	18800f1e 	bne	r3,r2,87080 <touch_get_xy+0x288>
        // full, pop an old one
        p->fifo_rear++;
   87044:	e0bfff17 	ldw	r2,-4(fp)
   87048:	1080048b 	ldhu	r2,18(r2)
   8704c:	10800044 	addi	r2,r2,1
   87050:	1007883a 	mov	r3,r2
   87054:	e0bfff17 	ldw	r2,-4(fp)
   87058:	10c0048d 	sth	r3,18(r2)
        p->fifo_rear %= FIFO_SIZE;        
   8705c:	e0bfff17 	ldw	r2,-4(fp)
   87060:	1080048b 	ldhu	r2,18(r2)
   87064:	10bfffcc 	andi	r2,r2,65535
   87068:	1009883a 	mov	r4,r2
   8706c:	01400284 	movi	r5,10
   87070:	00877e00 	call	877e0 <__umodsi3>
   87074:	1007883a 	mov	r3,r2
   87078:	e0bfff17 	ldw	r2,-4(fp)
   8707c:	10c0048d 	sth	r3,18(r2)
        
    }
    DEBUG_OUT("[ ADC] x=%d, y=%d\n", x,y);

    // push now
    p->fifo_x[p->fifo_front] = x;
   87080:	e0bfff17 	ldw	r2,-4(fp)
   87084:	1080040b 	ldhu	r2,16(r2)
   87088:	10bfffcc 	andi	r2,r2,65535
   8708c:	e0ffff17 	ldw	r3,-4(fp)
   87090:	10800284 	addi	r2,r2,10
   87094:	1085883a 	add	r2,r2,r2
   87098:	1885883a 	add	r2,r3,r2
   8709c:	e0fffd0b 	ldhu	r3,-12(fp)
   870a0:	10c0000d 	sth	r3,0(r2)
    p->fifo_y[p->fifo_front] = y;    
   870a4:	e0bfff17 	ldw	r2,-4(fp)
   870a8:	1080040b 	ldhu	r2,16(r2)
   870ac:	10bfffcc 	andi	r2,r2,65535
   870b0:	e0ffff17 	ldw	r3,-4(fp)
   870b4:	10800504 	addi	r2,r2,20
   870b8:	1085883a 	add	r2,r2,r2
   870bc:	1885883a 	add	r2,r3,r2
   870c0:	e0fffd8b 	ldhu	r3,-10(fp)
   870c4:	10c0000d 	sth	r3,0(r2)
    p->fifo_front++;
   870c8:	e0bfff17 	ldw	r2,-4(fp)
   870cc:	1080040b 	ldhu	r2,16(r2)
   870d0:	10800044 	addi	r2,r2,1
   870d4:	1007883a 	mov	r3,r2
   870d8:	e0bfff17 	ldw	r2,-4(fp)
   870dc:	10c0040d 	sth	r3,16(r2)
    p->fifo_front %= FIFO_SIZE;   
   870e0:	e0bfff17 	ldw	r2,-4(fp)
   870e4:	1080040b 	ldhu	r2,16(r2)
   870e8:	10bfffcc 	andi	r2,r2,65535
   870ec:	1009883a 	mov	r4,r2
   870f0:	01400284 	movi	r5,10
   870f4:	00877e00 	call	877e0 <__umodsi3>
   870f8:	1007883a 	mov	r3,r2
   870fc:	e0bfff17 	ldw	r2,-4(fp)
   87100:	10c0040d 	sth	r3,16(r2)
    
}
   87104:	e037883a 	mov	sp,fp
   87108:	dfc00117 	ldw	ra,4(sp)
   8710c:	df000017 	ldw	fp,0(sp)
   87110:	dec00204 	addi	sp,sp,8
   87114:	f800283a 	ret

00087118 <touch_alarm_callback>:

// polling x/y when penirq_n is low
alt_u32 touch_alarm_callback(void *context){
   87118:	defffc04 	addi	sp,sp,-16
   8711c:	dfc00315 	stw	ra,12(sp)
   87120:	df000215 	stw	fp,8(sp)
   87124:	df000204 	addi	fp,sp,8
   87128:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
   8712c:	e0bfff17 	ldw	r2,-4(fp)
   87130:	e0bffe15 	stw	r2,-8(fp)
    
    if (touch_is_pen_pressed(p)){//Touch.pen_pressed){
   87134:	e13ffe17 	ldw	r4,-8(fp)
   87138:	0086c240 	call	86c24 <touch_is_pen_pressed>
   8713c:	10000926 	beq	r2,zero,87164 <touch_alarm_callback+0x4c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   87140:	008002f4 	movhi	r2,11
   87144:	10b57104 	addi	r2,r2,-10812
   87148:	10800017 	ldw	r2,0(r2)
        if (alt_nticks() > p->next_active_time)
   8714c:	e0fffe17 	ldw	r3,-8(fp)
   87150:	18c01717 	ldw	r3,92(r3)
   87154:	1880072e 	bgeu	r3,r2,87174 <touch_alarm_callback+0x5c>
            touch_get_xy(p);
   87158:	e13ffe17 	ldw	r4,-8(fp)
   8715c:	0086df80 	call	86df8 <touch_get_xy>
   87160:	00000406 	br	87174 <touch_alarm_callback+0x5c>
      //  p->last_active_time = alt_nticks(); 
    }else{
       // touch_empty_fifo(p);
        //if ((alt_nticks() - Touch.last_active_time) > alt_ticks_per_second()/10){
         touch_enable_penirq(p);
   87164:	e13ffe17 	ldw	r4,-8(fp)
   87168:	0086c640 	call	86c64 <touch_enable_penirq>
         touch_clear_input(p);
   8716c:	e13ffe17 	ldw	r4,-8(fp)
   87170:	0086dc80 	call	86dc8 <touch_clear_input>
          //  p->last_active_time = alt_nticks(); 
        //}            
    }        
    return p->alarm_dur;
   87174:	e0bffe17 	ldw	r2,-8(fp)
   87178:	10801617 	ldw	r2,88(r2)
}
   8717c:	e037883a 	mov	sp,fp
   87180:	dfc00117 	ldw	ra,4(sp)
   87184:	df000017 	ldw	fp,0(sp)
   87188:	dec00204 	addi	sp,sp,8
   8718c:	f800283a 	ret

00087190 <touch_xy_transform>:

void touch_xy_transform(int *x, int *y){
   87190:	defff904 	addi	sp,sp,-28
   87194:	dfc00615 	stw	ra,24(sp)
   87198:	df000515 	stw	fp,20(sp)
   8719c:	df000504 	addi	fp,sp,20
   871a0:	e13ffe15 	stw	r4,-8(fp)
   871a4:	e17fff15 	stw	r5,-4(fp)
    int xx, yy;
    const int y_ignore = 200;
   871a8:	00803204 	movi	r2,200
   871ac:	e0bffc15 	stw	r2,-16(fp)
    xx = *y;
   871b0:	e0bfff17 	ldw	r2,-4(fp)
   871b4:	10800017 	ldw	r2,0(r2)
   871b8:	e0bffd15 	stw	r2,-12(fp)
    yy = *x;
   871bc:	e0bffe17 	ldw	r2,-8(fp)
   871c0:	10800017 	ldw	r2,0(r2)
   871c4:	e0bffb15 	stw	r2,-20(fp)

    // scale & swap
   // xx = 4096 -1 - xx;
    xx = xx * X_RES / 4096;
   871c8:	e0bffd17 	ldw	r2,-12(fp)
   871cc:	10803c24 	muli	r2,r2,240
   871d0:	1000010e 	bge	r2,zero,871d8 <touch_xy_transform+0x48>
   871d4:	1083ffc4 	addi	r2,r2,4095
   871d8:	1005d33a 	srai	r2,r2,12
   871dc:	e0bffd15 	stw	r2,-12(fp)

   // yy = 4096 -1 - yy;

    // special calibrate for LT24
    if (yy > (4096-y_ignore))
   871e0:	00c40004 	movi	r3,4096
   871e4:	e0bffc17 	ldw	r2,-16(fp)
   871e8:	1887c83a 	sub	r3,r3,r2
   871ec:	e0bffb17 	ldw	r2,-20(fp)
   871f0:	1880040e 	bge	r3,r2,87204 <touch_xy_transform+0x74>
    	yy = 4096-y_ignore;
   871f4:	00c40004 	movi	r3,4096
   871f8:	e0bffc17 	ldw	r2,-16(fp)
   871fc:	1885c83a 	sub	r2,r3,r2
   87200:	e0bffb15 	stw	r2,-20(fp)
    yy = yy * 4095/ (4096-y_ignore);
   87204:	e0bffb17 	ldw	r2,-20(fp)
   87208:	10c3ffe4 	muli	r3,r2,4095
   8720c:	01040004 	movi	r4,4096
   87210:	e0bffc17 	ldw	r2,-16(fp)
   87214:	2085c83a 	sub	r2,r4,r2
   87218:	1809883a 	mov	r4,r3
   8721c:	100b883a 	mov	r5,r2
   87220:	00877440 	call	87744 <__divsi3>
   87224:	e0bffb15 	stw	r2,-20(fp)
    
    yy = yy * Y_RES / 4096;
   87228:	e0bffb17 	ldw	r2,-20(fp)
   8722c:	10805024 	muli	r2,r2,320
   87230:	1000010e 	bge	r2,zero,87238 <touch_xy_transform+0xa8>
   87234:	1083ffc4 	addi	r2,r2,4095
   87238:	1005d33a 	srai	r2,r2,12
   8723c:	e0bffb15 	stw	r2,-20(fp)

    // swap
    *x = xx;
   87240:	e0bffe17 	ldw	r2,-8(fp)
   87244:	e0fffd17 	ldw	r3,-12(fp)
   87248:	10c00015 	stw	r3,0(r2)
    *y = yy;    
   8724c:	e0bfff17 	ldw	r2,-4(fp)
   87250:	e0fffb17 	ldw	r3,-20(fp)
   87254:	10c00015 	stw	r3,0(r2)
    
}
   87258:	e037883a 	mov	sp,fp
   8725c:	dfc00117 	ldw	ra,4(sp)
   87260:	df000017 	ldw	fp,0(sp)
   87264:	dec00204 	addi	sp,sp,8
   87268:	f800283a 	ret

0008726c <sqrt>:
   8726c:	defff104 	addi	sp,sp,-60
   87270:	dd000d15 	stw	r20,52(sp)
   87274:	dcc00c15 	stw	r19,48(sp)
   87278:	dc800b15 	stw	r18,44(sp)
   8727c:	dc400a15 	stw	r17,40(sp)
   87280:	dc000915 	stw	r16,36(sp)
   87284:	2023883a 	mov	r17,r4
   87288:	2821883a 	mov	r16,r5
   8728c:	dfc00e15 	stw	ra,56(sp)
   87290:	048002f4 	movhi	r18,11
   87294:	94a8a104 	addi	r18,r18,-23932
   87298:	00873b80 	call	873b8 <__ieee754_sqrt>
   8729c:	91400017 	ldw	r5,0(r18)
   872a0:	013fffc4 	movi	r4,-1
   872a4:	1027883a 	mov	r19,r2
   872a8:	1829883a 	mov	r20,r3
   872ac:	29000a26 	beq	r5,r4,872d8 <sqrt+0x6c>
   872b0:	8809883a 	mov	r4,r17
   872b4:	800b883a 	mov	r5,r16
   872b8:	00876640 	call	87664 <__fpclassifyd>
   872bc:	10000626 	beq	r2,zero,872d8 <sqrt+0x6c>
   872c0:	8809883a 	mov	r4,r17
   872c4:	800b883a 	mov	r5,r16
   872c8:	000d883a 	mov	r6,zero
   872cc:	000f883a 	mov	r7,zero
   872d0:	00889380 	call	88938 <__ledf2>
   872d4:	10000a16 	blt	r2,zero,87300 <sqrt+0x94>
   872d8:	9805883a 	mov	r2,r19
   872dc:	a007883a 	mov	r3,r20
   872e0:	dfc00e17 	ldw	ra,56(sp)
   872e4:	dd000d17 	ldw	r20,52(sp)
   872e8:	dcc00c17 	ldw	r19,48(sp)
   872ec:	dc800b17 	ldw	r18,44(sp)
   872f0:	dc400a17 	ldw	r17,40(sp)
   872f4:	dc000917 	ldw	r16,36(sp)
   872f8:	dec00f04 	addi	sp,sp,60
   872fc:	f800283a 	ret
   87300:	00800044 	movi	r2,1
   87304:	94800017 	ldw	r18,0(r18)
   87308:	d8800015 	stw	r2,0(sp)
   8730c:	008002b4 	movhi	r2,10
   87310:	109bae04 	addi	r2,r2,28344
   87314:	d8800115 	stw	r2,4(sp)
   87318:	d8000815 	stw	zero,32(sp)
   8731c:	dc400415 	stw	r17,16(sp)
   87320:	dc000515 	stw	r16,20(sp)
   87324:	dc400215 	stw	r17,8(sp)
   87328:	dc000315 	stw	r16,12(sp)
   8732c:	9000111e 	bne	r18,zero,87374 <sqrt+0x108>
   87330:	d8000615 	stw	zero,24(sp)
   87334:	d8000715 	stw	zero,28(sp)
   87338:	d809883a 	mov	r4,sp
   8733c:	00876cc0 	call	876cc <matherr>
   87340:	10001526 	beq	r2,zero,87398 <sqrt+0x12c>
   87344:	d8800817 	ldw	r2,32(sp)
   87348:	1000171e 	bne	r2,zero,873a8 <sqrt+0x13c>
   8734c:	d8800617 	ldw	r2,24(sp)
   87350:	d8c00717 	ldw	r3,28(sp)
   87354:	dfc00e17 	ldw	ra,56(sp)
   87358:	dd000d17 	ldw	r20,52(sp)
   8735c:	dcc00c17 	ldw	r19,48(sp)
   87360:	dc800b17 	ldw	r18,44(sp)
   87364:	dc400a17 	ldw	r17,40(sp)
   87368:	dc000917 	ldw	r16,36(sp)
   8736c:	dec00f04 	addi	sp,sp,60
   87370:	f800283a 	ret
   87374:	0009883a 	mov	r4,zero
   87378:	000b883a 	mov	r5,zero
   8737c:	000d883a 	mov	r6,zero
   87380:	000f883a 	mov	r7,zero
   87384:	00880640 	call	88064 <__divdf3>
   87388:	d8800615 	stw	r2,24(sp)
   8738c:	d8c00715 	stw	r3,28(sp)
   87390:	00800084 	movi	r2,2
   87394:	90bfe81e 	bne	r18,r2,87338 <__alt_data_end+0xfffcf0c8>
   87398:	0089b940 	call	89b94 <__errno>
   8739c:	00c00844 	movi	r3,33
   873a0:	10c00015 	stw	r3,0(r2)
   873a4:	003fe706 	br	87344 <__alt_data_end+0xfffcf0d4>
   873a8:	0089b940 	call	89b94 <__errno>
   873ac:	d8c00817 	ldw	r3,32(sp)
   873b0:	10c00015 	stw	r3,0(r2)
   873b4:	003fe506 	br	8734c <__alt_data_end+0xfffcf0dc>

000873b8 <__ieee754_sqrt>:
   873b8:	defffd04 	addi	sp,sp,-12
   873bc:	dc400115 	stw	r17,4(sp)
   873c0:	dc000015 	stw	r16,0(sp)
   873c4:	dfc00215 	stw	ra,8(sp)
   873c8:	28dffc2c 	andhi	r3,r5,32752
   873cc:	009ffc34 	movhi	r2,32752
   873d0:	2821883a 	mov	r16,r5
   873d4:	2023883a 	mov	r17,r4
   873d8:	18808226 	beq	r3,r2,875e4 <__ieee754_sqrt+0x22c>
   873dc:	200f883a 	mov	r7,r4
   873e0:	01405f0e 	bge	zero,r5,87560 <__ieee754_sqrt+0x1a8>
   873e4:	2805d53a 	srai	r2,r5,20
   873e8:	10006826 	beq	r2,zero,8758c <__ieee754_sqrt+0x1d4>
   873ec:	00c00434 	movhi	r3,16
   873f0:	18ffffc4 	addi	r3,r3,-1
   873f4:	10bf0044 	addi	r2,r2,-1023
   873f8:	80e0703a 	and	r16,r16,r3
   873fc:	10c0004c 	andi	r3,r2,1
   87400:	84000434 	orhi	r16,r16,16
   87404:	18004f1e 	bne	r3,zero,87544 <__ieee754_sqrt+0x18c>
   87408:	3808d7fa 	srli	r4,r7,31
   8740c:	8421883a 	add	r16,r16,r16
   87410:	101bd07a 	srai	r13,r2,1
   87414:	8107883a 	add	r3,r16,r4
   87418:	01800584 	movi	r6,22
   8741c:	39c9883a 	add	r4,r7,r7
   87420:	0013883a 	mov	r9,zero
   87424:	000b883a 	mov	r5,zero
   87428:	00800834 	movhi	r2,32
   8742c:	288f883a 	add	r7,r5,r2
   87430:	2010d7fa 	srli	r8,r4,31
   87434:	31bfffc4 	addi	r6,r6,-1
   87438:	19c00316 	blt	r3,r7,87448 <__ieee754_sqrt+0x90>
   8743c:	19c7c83a 	sub	r3,r3,r7
   87440:	388b883a 	add	r5,r7,r2
   87444:	4893883a 	add	r9,r9,r2
   87448:	18c7883a 	add	r3,r3,r3
   8744c:	1a07883a 	add	r3,r3,r8
   87450:	2109883a 	add	r4,r4,r4
   87454:	1004d07a 	srli	r2,r2,1
   87458:	303ff41e 	bne	r6,zero,8742c <__alt_data_end+0xfffcf1bc>
   8745c:	01a00034 	movhi	r6,32768
   87460:	02000804 	movi	r8,32
   87464:	0005883a 	mov	r2,zero
   87468:	0015883a 	mov	r10,zero
   8746c:	3019883a 	mov	r12,r6
   87470:	00000806 	br	87494 <__ieee754_sqrt+0xdc>
   87474:	19403026 	beq	r3,r5,87538 <__ieee754_sqrt+0x180>
   87478:	200ed7fa 	srli	r7,r4,31
   8747c:	18c7883a 	add	r3,r3,r3
   87480:	423fffc4 	addi	r8,r8,-1
   87484:	19c7883a 	add	r3,r3,r7
   87488:	2109883a 	add	r4,r4,r4
   8748c:	300cd07a 	srli	r6,r6,1
   87490:	40001326 	beq	r8,zero,874e0 <__ieee754_sqrt+0x128>
   87494:	328f883a 	add	r7,r6,r10
   87498:	28fff60e 	bge	r5,r3,87474 <__alt_data_end+0xfffcf204>
   8749c:	3ae0002c 	andhi	r11,r7,32768
   874a0:	3995883a 	add	r10,r7,r6
   874a4:	5b002126 	beq	r11,r12,8752c <__ieee754_sqrt+0x174>
   874a8:	2817883a 	mov	r11,r5
   874ac:	1947c83a 	sub	r3,r3,r5
   874b0:	21c0012e 	bgeu	r4,r7,874b8 <__ieee754_sqrt+0x100>
   874b4:	18ffffc4 	addi	r3,r3,-1
   874b8:	21c9c83a 	sub	r4,r4,r7
   874bc:	200ed7fa 	srli	r7,r4,31
   874c0:	18c7883a 	add	r3,r3,r3
   874c4:	423fffc4 	addi	r8,r8,-1
   874c8:	1185883a 	add	r2,r2,r6
   874cc:	580b883a 	mov	r5,r11
   874d0:	19c7883a 	add	r3,r3,r7
   874d4:	2109883a 	add	r4,r4,r4
   874d8:	300cd07a 	srli	r6,r6,1
   874dc:	403fed1e 	bne	r8,zero,87494 <__alt_data_end+0xfffcf224>
   874e0:	1906b03a 	or	r3,r3,r4
   874e4:	18000426 	beq	r3,zero,874f8 <__ieee754_sqrt+0x140>
   874e8:	00ffffc4 	movi	r3,-1
   874ec:	10c04d26 	beq	r2,r3,87624 <__ieee754_sqrt+0x26c>
   874f0:	10c0004c 	andi	r3,r2,1
   874f4:	1885883a 	add	r2,r3,r2
   874f8:	1004d07a 	srli	r2,r2,1
   874fc:	4809d07a 	srai	r4,r9,1
   87500:	00cff834 	movhi	r3,16352
   87504:	4a40004c 	andi	r9,r9,1
   87508:	20c9883a 	add	r4,r4,r3
   8750c:	4800121e 	bne	r9,zero,87558 <__ieee754_sqrt+0x1a0>
   87510:	6806953a 	slli	r3,r13,20
   87514:	1907883a 	add	r3,r3,r4
   87518:	dfc00217 	ldw	ra,8(sp)
   8751c:	dc400117 	ldw	r17,4(sp)
   87520:	dc000017 	ldw	r16,0(sp)
   87524:	dec00304 	addi	sp,sp,12
   87528:	f800283a 	ret
   8752c:	503fde16 	blt	r10,zero,874a8 <__alt_data_end+0xfffcf238>
   87530:	2ac00044 	addi	r11,r5,1
   87534:	003fdd06 	br	874ac <__alt_data_end+0xfffcf23c>
   87538:	21ffd82e 	bgeu	r4,r7,8749c <__alt_data_end+0xfffcf22c>
   8753c:	180b883a 	mov	r5,r3
   87540:	003fcd06 	br	87478 <__alt_data_end+0xfffcf208>
   87544:	3806d7fa 	srli	r3,r7,31
   87548:	8421883a 	add	r16,r16,r16
   8754c:	39cf883a 	add	r7,r7,r7
   87550:	80e1883a 	add	r16,r16,r3
   87554:	003fac06 	br	87408 <__alt_data_end+0xfffcf198>
   87558:	10a00034 	orhi	r2,r2,32768
   8755c:	003fec06 	br	87510 <__alt_data_end+0xfffcf2a0>
   87560:	00a00034 	movhi	r2,32768
   87564:	10bfffc4 	addi	r2,r2,-1
   87568:	2884703a 	and	r2,r5,r2
   8756c:	1104b03a 	or	r2,r2,r4
   87570:	10002926 	beq	r2,zero,87618 <__ieee754_sqrt+0x260>
   87574:	2800321e 	bne	r5,zero,87640 <__ieee754_sqrt+0x288>
   87578:	0005883a 	mov	r2,zero
   8757c:	3820d2fa 	srli	r16,r7,11
   87580:	10bffac4 	addi	r2,r2,-21
   87584:	380e957a 	slli	r7,r7,21
   87588:	803ffc26 	beq	r16,zero,8757c <__alt_data_end+0xfffcf30c>
   8758c:	80c0042c 	andhi	r3,r16,16
   87590:	1800271e 	bne	r3,zero,87630 <__ieee754_sqrt+0x278>
   87594:	8421883a 	add	r16,r16,r16
   87598:	8100042c 	andhi	r4,r16,16
   8759c:	18c00044 	addi	r3,r3,1
   875a0:	203ffc26 	beq	r4,zero,87594 <__alt_data_end+0xfffcf324>
   875a4:	01400044 	movi	r5,1
   875a8:	01000804 	movi	r4,32
   875ac:	28cbc83a 	sub	r5,r5,r3
   875b0:	20c9c83a 	sub	r4,r4,r3
   875b4:	3908d83a 	srl	r4,r7,r4
   875b8:	1145883a 	add	r2,r2,r5
   875bc:	38ce983a 	sll	r7,r7,r3
   875c0:	8120b03a 	or	r16,r16,r4
   875c4:	00c00434 	movhi	r3,16
   875c8:	18ffffc4 	addi	r3,r3,-1
   875cc:	10bf0044 	addi	r2,r2,-1023
   875d0:	80e0703a 	and	r16,r16,r3
   875d4:	10c0004c 	andi	r3,r2,1
   875d8:	84000434 	orhi	r16,r16,16
   875dc:	183f8a26 	beq	r3,zero,87408 <__alt_data_end+0xfffcf198>
   875e0:	003fd806 	br	87544 <__alt_data_end+0xfffcf2d4>
   875e4:	200d883a 	mov	r6,r4
   875e8:	280f883a 	mov	r7,r5
   875ec:	0088a240 	call	88a24 <__muldf3>
   875f0:	1009883a 	mov	r4,r2
   875f4:	180b883a 	mov	r5,r3
   875f8:	880d883a 	mov	r6,r17
   875fc:	800f883a 	mov	r7,r16
   87600:	00877e80 	call	877e8 <__adddf3>
   87604:	dfc00217 	ldw	ra,8(sp)
   87608:	dc400117 	ldw	r17,4(sp)
   8760c:	dc000017 	ldw	r16,0(sp)
   87610:	dec00304 	addi	sp,sp,12
   87614:	f800283a 	ret
   87618:	2005883a 	mov	r2,r4
   8761c:	2807883a 	mov	r3,r5
   87620:	003fbd06 	br	87518 <__alt_data_end+0xfffcf2a8>
   87624:	4a400044 	addi	r9,r9,1
   87628:	0005883a 	mov	r2,zero
   8762c:	003fb306 	br	874fc <__alt_data_end+0xfffcf28c>
   87630:	01000804 	movi	r4,32
   87634:	01400044 	movi	r5,1
   87638:	0007883a 	mov	r3,zero
   8763c:	003fdd06 	br	875b4 <__alt_data_end+0xfffcf344>
   87640:	200d883a 	mov	r6,r4
   87644:	280f883a 	mov	r7,r5
   87648:	00891100 	call	89110 <__subdf3>
   8764c:	1009883a 	mov	r4,r2
   87650:	180b883a 	mov	r5,r3
   87654:	100d883a 	mov	r6,r2
   87658:	180f883a 	mov	r7,r3
   8765c:	00880640 	call	88064 <__divdf3>
   87660:	003fad06 	br	87518 <__alt_data_end+0xfffcf2a8>

00087664 <__fpclassifyd>:
   87664:	00a00034 	movhi	r2,32768
   87668:	10bfffc4 	addi	r2,r2,-1
   8766c:	288a703a 	and	r5,r5,r2
   87670:	28000726 	beq	r5,zero,87690 <__fpclassifyd+0x2c>
   87674:	00bffc34 	movhi	r2,65520
   87678:	2885883a 	add	r2,r5,r2
   8767c:	00dff834 	movhi	r3,32736
   87680:	18ffffc4 	addi	r3,r3,-1
   87684:	18800636 	bltu	r3,r2,876a0 <__fpclassifyd+0x3c>
   87688:	00800104 	movi	r2,4
   8768c:	f800283a 	ret
   87690:	2005003a 	cmpeq	r2,r4,zero
   87694:	00c000c4 	movi	r3,3
   87698:	1885c83a 	sub	r2,r3,r2
   8769c:	f800283a 	ret
   876a0:	00800434 	movhi	r2,16
   876a4:	10bfffc4 	addi	r2,r2,-1
   876a8:	11400236 	bltu	r2,r5,876b4 <__fpclassifyd+0x50>
   876ac:	008000c4 	movi	r2,3
   876b0:	f800283a 	ret
   876b4:	009ffc34 	movhi	r2,32752
   876b8:	28800226 	beq	r5,r2,876c4 <__fpclassifyd+0x60>
   876bc:	0005883a 	mov	r2,zero
   876c0:	f800283a 	ret
   876c4:	2005003a 	cmpeq	r2,r4,zero
   876c8:	f800283a 	ret

000876cc <matherr>:
   876cc:	0005883a 	mov	r2,zero
   876d0:	f800283a 	ret

000876d4 <udivmodsi4>:
   876d4:	2900182e 	bgeu	r5,r4,87738 <udivmodsi4+0x64>
   876d8:	28001716 	blt	r5,zero,87738 <udivmodsi4+0x64>
   876dc:	00800804 	movi	r2,32
   876e0:	00c00044 	movi	r3,1
   876e4:	00000206 	br	876f0 <udivmodsi4+0x1c>
   876e8:	10001126 	beq	r2,zero,87730 <udivmodsi4+0x5c>
   876ec:	28000516 	blt	r5,zero,87704 <udivmodsi4+0x30>
   876f0:	294b883a 	add	r5,r5,r5
   876f4:	10bfffc4 	addi	r2,r2,-1
   876f8:	18c7883a 	add	r3,r3,r3
   876fc:	293ffa36 	bltu	r5,r4,876e8 <__alt_data_end+0xfffcf478>
   87700:	18000b26 	beq	r3,zero,87730 <udivmodsi4+0x5c>
   87704:	0005883a 	mov	r2,zero
   87708:	21400236 	bltu	r4,r5,87714 <udivmodsi4+0x40>
   8770c:	2149c83a 	sub	r4,r4,r5
   87710:	10c4b03a 	or	r2,r2,r3
   87714:	1806d07a 	srli	r3,r3,1
   87718:	280ad07a 	srli	r5,r5,1
   8771c:	183ffa1e 	bne	r3,zero,87708 <__alt_data_end+0xfffcf498>
   87720:	3000011e 	bne	r6,zero,87728 <udivmodsi4+0x54>
   87724:	f800283a 	ret
   87728:	2005883a 	mov	r2,r4
   8772c:	f800283a 	ret
   87730:	0005883a 	mov	r2,zero
   87734:	003ffa06 	br	87720 <__alt_data_end+0xfffcf4b0>
   87738:	00c00044 	movi	r3,1
   8773c:	0005883a 	mov	r2,zero
   87740:	003ff106 	br	87708 <__alt_data_end+0xfffcf498>

00087744 <__divsi3>:
   87744:	deffff04 	addi	sp,sp,-4
   87748:	dfc00015 	stw	ra,0(sp)
   8774c:	20000916 	blt	r4,zero,87774 <__divsi3+0x30>
   87750:	000f883a 	mov	r7,zero
   87754:	28000a16 	blt	r5,zero,87780 <__divsi3+0x3c>
   87758:	000d883a 	mov	r6,zero
   8775c:	00876d40 	call	876d4 <udivmodsi4>
   87760:	38000126 	beq	r7,zero,87768 <__divsi3+0x24>
   87764:	0085c83a 	sub	r2,zero,r2
   87768:	dfc00017 	ldw	ra,0(sp)
   8776c:	dec00104 	addi	sp,sp,4
   87770:	f800283a 	ret
   87774:	0109c83a 	sub	r4,zero,r4
   87778:	01c00044 	movi	r7,1
   8777c:	283ff60e 	bge	r5,zero,87758 <__alt_data_end+0xfffcf4e8>
   87780:	014bc83a 	sub	r5,zero,r5
   87784:	39c0005c 	xori	r7,r7,1
   87788:	003ff306 	br	87758 <__alt_data_end+0xfffcf4e8>

0008778c <__modsi3>:
   8778c:	20000316 	blt	r4,zero,8779c <__modsi3+0x10>
   87790:	28000c16 	blt	r5,zero,877c4 <__modsi3+0x38>
   87794:	01800044 	movi	r6,1
   87798:	00876d41 	jmpi	876d4 <udivmodsi4>
   8779c:	deffff04 	addi	sp,sp,-4
   877a0:	dfc00015 	stw	ra,0(sp)
   877a4:	0109c83a 	sub	r4,zero,r4
   877a8:	28000916 	blt	r5,zero,877d0 <__modsi3+0x44>
   877ac:	01800044 	movi	r6,1
   877b0:	00876d40 	call	876d4 <udivmodsi4>
   877b4:	0085c83a 	sub	r2,zero,r2
   877b8:	dfc00017 	ldw	ra,0(sp)
   877bc:	dec00104 	addi	sp,sp,4
   877c0:	f800283a 	ret
   877c4:	014bc83a 	sub	r5,zero,r5
   877c8:	01800044 	movi	r6,1
   877cc:	00876d41 	jmpi	876d4 <udivmodsi4>
   877d0:	014bc83a 	sub	r5,zero,r5
   877d4:	003ff506 	br	877ac <__alt_data_end+0xfffcf53c>

000877d8 <__udivsi3>:
   877d8:	000d883a 	mov	r6,zero
   877dc:	00876d41 	jmpi	876d4 <udivmodsi4>

000877e0 <__umodsi3>:
   877e0:	01800044 	movi	r6,1
   877e4:	00876d41 	jmpi	876d4 <udivmodsi4>

000877e8 <__adddf3>:
   877e8:	00800434 	movhi	r2,16
   877ec:	10bfffc4 	addi	r2,r2,-1
   877f0:	defffb04 	addi	sp,sp,-20
   877f4:	2890703a 	and	r8,r5,r2
   877f8:	2806d7fa 	srli	r3,r5,31
   877fc:	3884703a 	and	r2,r7,r2
   87800:	2014d77a 	srli	r10,r4,29
   87804:	3812d53a 	srli	r9,r7,20
   87808:	dc400115 	stw	r17,4(sp)
   8780c:	100490fa 	slli	r2,r2,3
   87810:	2822d53a 	srli	r17,r5,20
   87814:	380ed7fa 	srli	r7,r7,31
   87818:	400a90fa 	slli	r5,r8,3
   8781c:	3010d77a 	srli	r8,r6,29
   87820:	dc800215 	stw	r18,8(sp)
   87824:	dc000015 	stw	r16,0(sp)
   87828:	dfc00415 	stw	ra,16(sp)
   8782c:	dcc00315 	stw	r19,12(sp)
   87830:	1c803fcc 	andi	r18,r3,255
   87834:	202090fa 	slli	r16,r4,3
   87838:	8c41ffcc 	andi	r17,r17,2047
   8783c:	2a8ab03a 	or	r5,r5,r10
   87840:	4901ffcc 	andi	r4,r9,2047
   87844:	1204b03a 	or	r2,r2,r8
   87848:	300c90fa 	slli	r6,r6,3
   8784c:	91c07126 	beq	r18,r7,87a14 <__adddf3+0x22c>
   87850:	8907c83a 	sub	r3,r17,r4
   87854:	00c0a00e 	bge	zero,r3,87ad8 <__adddf3+0x2f0>
   87858:	2000291e 	bne	r4,zero,87900 <__adddf3+0x118>
   8785c:	1188b03a 	or	r4,r2,r6
   87860:	20008b1e 	bne	r4,zero,87a90 <__adddf3+0x2a8>
   87864:	808001cc 	andi	r2,r16,7
   87868:	10005a26 	beq	r2,zero,879d4 <__adddf3+0x1ec>
   8786c:	80c003cc 	andi	r3,r16,15
   87870:	00800104 	movi	r2,4
   87874:	18805726 	beq	r3,r2,879d4 <__adddf3+0x1ec>
   87878:	81000104 	addi	r4,r16,4
   8787c:	2421803a 	cmpltu	r16,r4,r16
   87880:	2c0b883a 	add	r5,r5,r16
   87884:	2880202c 	andhi	r2,r5,128
   87888:	9007883a 	mov	r3,r18
   8788c:	2021883a 	mov	r16,r4
   87890:	10005326 	beq	r2,zero,879e0 <__adddf3+0x1f8>
   87894:	8c400044 	addi	r17,r17,1
   87898:	0081ffc4 	movi	r2,2047
   8789c:	8880ae26 	beq	r17,r2,87b58 <__adddf3+0x370>
   878a0:	00bfe034 	movhi	r2,65408
   878a4:	10bfffc4 	addi	r2,r2,-1
   878a8:	288a703a 	and	r5,r5,r2
   878ac:	2804977a 	slli	r2,r5,29
   878b0:	280a927a 	slli	r5,r5,9
   878b4:	8020d0fa 	srli	r16,r16,3
   878b8:	280ad33a 	srli	r5,r5,12
   878bc:	1404b03a 	or	r2,r2,r16
   878c0:	8c41ffcc 	andi	r17,r17,2047
   878c4:	8822953a 	slli	r17,r17,20
   878c8:	18c03fcc 	andi	r3,r3,255
   878cc:	180897fa 	slli	r4,r3,31
   878d0:	00c00434 	movhi	r3,16
   878d4:	18ffffc4 	addi	r3,r3,-1
   878d8:	28c6703a 	and	r3,r5,r3
   878dc:	1c46b03a 	or	r3,r3,r17
   878e0:	1906b03a 	or	r3,r3,r4
   878e4:	dfc00417 	ldw	ra,16(sp)
   878e8:	dcc00317 	ldw	r19,12(sp)
   878ec:	dc800217 	ldw	r18,8(sp)
   878f0:	dc400117 	ldw	r17,4(sp)
   878f4:	dc000017 	ldw	r16,0(sp)
   878f8:	dec00504 	addi	sp,sp,20
   878fc:	f800283a 	ret
   87900:	0101ffc4 	movi	r4,2047
   87904:	893fd726 	beq	r17,r4,87864 <__alt_data_end+0xfffcf5f4>
   87908:	10802034 	orhi	r2,r2,128
   8790c:	01000e04 	movi	r4,56
   87910:	20c09416 	blt	r4,r3,87b64 <__adddf3+0x37c>
   87914:	010007c4 	movi	r4,31
   87918:	20c0b716 	blt	r4,r3,87bf8 <__adddf3+0x410>
   8791c:	01000804 	movi	r4,32
   87920:	20c9c83a 	sub	r4,r4,r3
   87924:	30ced83a 	srl	r7,r6,r3
   87928:	1110983a 	sll	r8,r2,r4
   8792c:	3108983a 	sll	r4,r6,r4
   87930:	10c6d83a 	srl	r3,r2,r3
   87934:	41c4b03a 	or	r2,r8,r7
   87938:	2008c03a 	cmpne	r4,r4,zero
   8793c:	110cb03a 	or	r6,r2,r4
   87940:	818dc83a 	sub	r6,r16,r6
   87944:	81a1803a 	cmpltu	r16,r16,r6
   87948:	28cbc83a 	sub	r5,r5,r3
   8794c:	2c0bc83a 	sub	r5,r5,r16
   87950:	3021883a 	mov	r16,r6
   87954:	2880202c 	andhi	r2,r5,128
   87958:	103fc226 	beq	r2,zero,87864 <__alt_data_end+0xfffcf5f4>
   8795c:	04c02034 	movhi	r19,128
   87960:	9cffffc4 	addi	r19,r19,-1
   87964:	2ce6703a 	and	r19,r5,r19
   87968:	98006c26 	beq	r19,zero,87b1c <__adddf3+0x334>
   8796c:	9809883a 	mov	r4,r19
   87970:	0089ae80 	call	89ae8 <__clzsi2>
   87974:	10fffe04 	addi	r3,r2,-8
   87978:	010007c4 	movi	r4,31
   8797c:	20c06d16 	blt	r4,r3,87b34 <__adddf3+0x34c>
   87980:	01000a04 	movi	r4,40
   87984:	2085c83a 	sub	r2,r4,r2
   87988:	8084d83a 	srl	r2,r16,r2
   8798c:	98e6983a 	sll	r19,r19,r3
   87990:	80e0983a 	sll	r16,r16,r3
   87994:	14c4b03a 	or	r2,r2,r19
   87998:	1c406a16 	blt	r3,r17,87b44 <__adddf3+0x35c>
   8799c:	1c63c83a 	sub	r17,r3,r17
   879a0:	89400044 	addi	r5,r17,1
   879a4:	00c007c4 	movi	r3,31
   879a8:	19408616 	blt	r3,r5,87bc4 <__adddf3+0x3dc>
   879ac:	1c47c83a 	sub	r3,r3,r17
   879b0:	8148d83a 	srl	r4,r16,r5
   879b4:	80e0983a 	sll	r16,r16,r3
   879b8:	10c6983a 	sll	r3,r2,r3
   879bc:	114ad83a 	srl	r5,r2,r5
   879c0:	8004c03a 	cmpne	r2,r16,zero
   879c4:	20e0b03a 	or	r16,r4,r3
   879c8:	80a0b03a 	or	r16,r16,r2
   879cc:	0023883a 	mov	r17,zero
   879d0:	003fa406 	br	87864 <__alt_data_end+0xfffcf5f4>
   879d4:	2880202c 	andhi	r2,r5,128
   879d8:	9007883a 	mov	r3,r18
   879dc:	103fad1e 	bne	r2,zero,87894 <__alt_data_end+0xfffcf624>
   879e0:	2804977a 	slli	r2,r5,29
   879e4:	8020d0fa 	srli	r16,r16,3
   879e8:	0101ffc4 	movi	r4,2047
   879ec:	280ad0fa 	srli	r5,r5,3
   879f0:	1404b03a 	or	r2,r2,r16
   879f4:	8900031e 	bne	r17,r4,87a04 <__adddf3+0x21c>
   879f8:	1148b03a 	or	r4,r2,r5
   879fc:	20005626 	beq	r4,zero,87b58 <__adddf3+0x370>
   87a00:	29400234 	orhi	r5,r5,8
   87a04:	01000434 	movhi	r4,16
   87a08:	213fffc4 	addi	r4,r4,-1
   87a0c:	290a703a 	and	r5,r5,r4
   87a10:	003fab06 	br	878c0 <__alt_data_end+0xfffcf650>
   87a14:	890fc83a 	sub	r7,r17,r4
   87a18:	01c0560e 	bge	zero,r7,87b74 <__adddf3+0x38c>
   87a1c:	20002426 	beq	r4,zero,87ab0 <__adddf3+0x2c8>
   87a20:	0101ffc4 	movi	r4,2047
   87a24:	893f8f26 	beq	r17,r4,87864 <__alt_data_end+0xfffcf5f4>
   87a28:	10802034 	orhi	r2,r2,128
   87a2c:	01000e04 	movi	r4,56
   87a30:	21c09d0e 	bge	r4,r7,87ca8 <__adddf3+0x4c0>
   87a34:	118cb03a 	or	r6,r2,r6
   87a38:	300cc03a 	cmpne	r6,r6,zero
   87a3c:	000f883a 	mov	r7,zero
   87a40:	340d883a 	add	r6,r6,r16
   87a44:	3421803a 	cmpltu	r16,r6,r16
   87a48:	394b883a 	add	r5,r7,r5
   87a4c:	2c0b883a 	add	r5,r5,r16
   87a50:	3021883a 	mov	r16,r6
   87a54:	2880202c 	andhi	r2,r5,128
   87a58:	103f8226 	beq	r2,zero,87864 <__alt_data_end+0xfffcf5f4>
   87a5c:	8c400044 	addi	r17,r17,1
   87a60:	0081ffc4 	movi	r2,2047
   87a64:	8880cb26 	beq	r17,r2,87d94 <__adddf3+0x5ac>
   87a68:	00bfe034 	movhi	r2,65408
   87a6c:	10bfffc4 	addi	r2,r2,-1
   87a70:	288a703a 	and	r5,r5,r2
   87a74:	8006d07a 	srli	r3,r16,1
   87a78:	280497fa 	slli	r2,r5,31
   87a7c:	8400004c 	andi	r16,r16,1
   87a80:	80e0b03a 	or	r16,r16,r3
   87a84:	80a0b03a 	or	r16,r16,r2
   87a88:	280ad07a 	srli	r5,r5,1
   87a8c:	003f7506 	br	87864 <__alt_data_end+0xfffcf5f4>
   87a90:	18ffffc4 	addi	r3,r3,-1
   87a94:	1800481e 	bne	r3,zero,87bb8 <__adddf3+0x3d0>
   87a98:	818dc83a 	sub	r6,r16,r6
   87a9c:	81a1803a 	cmpltu	r16,r16,r6
   87aa0:	288bc83a 	sub	r5,r5,r2
   87aa4:	2c0bc83a 	sub	r5,r5,r16
   87aa8:	3021883a 	mov	r16,r6
   87aac:	003fa906 	br	87954 <__alt_data_end+0xfffcf6e4>
   87ab0:	1188b03a 	or	r4,r2,r6
   87ab4:	203f6b26 	beq	r4,zero,87864 <__alt_data_end+0xfffcf5f4>
   87ab8:	39ffffc4 	addi	r7,r7,-1
   87abc:	3800931e 	bne	r7,zero,87d0c <__adddf3+0x524>
   87ac0:	340d883a 	add	r6,r6,r16
   87ac4:	3421803a 	cmpltu	r16,r6,r16
   87ac8:	114b883a 	add	r5,r2,r5
   87acc:	2c0b883a 	add	r5,r5,r16
   87ad0:	3021883a 	mov	r16,r6
   87ad4:	003fdf06 	br	87a54 <__alt_data_end+0xfffcf7e4>
   87ad8:	1800531e 	bne	r3,zero,87c28 <__adddf3+0x440>
   87adc:	88c00044 	addi	r3,r17,1
   87ae0:	18c1ffcc 	andi	r3,r3,2047
   87ae4:	01000044 	movi	r4,1
   87ae8:	20c0a00e 	bge	r4,r3,87d6c <__adddf3+0x584>
   87aec:	8187c83a 	sub	r3,r16,r6
   87af0:	80c9803a 	cmpltu	r4,r16,r3
   87af4:	28a7c83a 	sub	r19,r5,r2
   87af8:	9927c83a 	sub	r19,r19,r4
   87afc:	9900202c 	andhi	r4,r19,128
   87b00:	20006226 	beq	r4,zero,87c8c <__adddf3+0x4a4>
   87b04:	3421c83a 	sub	r16,r6,r16
   87b08:	1145c83a 	sub	r2,r2,r5
   87b0c:	340d803a 	cmpltu	r6,r6,r16
   87b10:	11a7c83a 	sub	r19,r2,r6
   87b14:	3825883a 	mov	r18,r7
   87b18:	983f941e 	bne	r19,zero,8796c <__alt_data_end+0xfffcf6fc>
   87b1c:	8009883a 	mov	r4,r16
   87b20:	0089ae80 	call	89ae8 <__clzsi2>
   87b24:	10800804 	addi	r2,r2,32
   87b28:	10fffe04 	addi	r3,r2,-8
   87b2c:	010007c4 	movi	r4,31
   87b30:	20ff930e 	bge	r4,r3,87980 <__alt_data_end+0xfffcf710>
   87b34:	10bff604 	addi	r2,r2,-40
   87b38:	8084983a 	sll	r2,r16,r2
   87b3c:	0021883a 	mov	r16,zero
   87b40:	1c7f960e 	bge	r3,r17,8799c <__alt_data_end+0xfffcf72c>
   87b44:	017fe034 	movhi	r5,65408
   87b48:	297fffc4 	addi	r5,r5,-1
   87b4c:	88e3c83a 	sub	r17,r17,r3
   87b50:	114a703a 	and	r5,r2,r5
   87b54:	003f4306 	br	87864 <__alt_data_end+0xfffcf5f4>
   87b58:	000b883a 	mov	r5,zero
   87b5c:	0005883a 	mov	r2,zero
   87b60:	003f5706 	br	878c0 <__alt_data_end+0xfffcf650>
   87b64:	118cb03a 	or	r6,r2,r6
   87b68:	300cc03a 	cmpne	r6,r6,zero
   87b6c:	0007883a 	mov	r3,zero
   87b70:	003f7306 	br	87940 <__alt_data_end+0xfffcf6d0>
   87b74:	3800961e 	bne	r7,zero,87dd0 <__adddf3+0x5e8>
   87b78:	89000044 	addi	r4,r17,1
   87b7c:	2201ffcc 	andi	r8,r4,2047
   87b80:	01c00044 	movi	r7,1
   87b84:	3a00680e 	bge	r7,r8,87d28 <__adddf3+0x540>
   87b88:	01c1ffc4 	movi	r7,2047
   87b8c:	21c0a726 	beq	r4,r7,87e2c <__adddf3+0x644>
   87b90:	340d883a 	add	r6,r6,r16
   87b94:	3421803a 	cmpltu	r16,r6,r16
   87b98:	114b883a 	add	r5,r2,r5
   87b9c:	2c0b883a 	add	r5,r5,r16
   87ba0:	282097fa 	slli	r16,r5,31
   87ba4:	300cd07a 	srli	r6,r6,1
   87ba8:	280ad07a 	srli	r5,r5,1
   87bac:	2023883a 	mov	r17,r4
   87bb0:	81a0b03a 	or	r16,r16,r6
   87bb4:	003f2b06 	br	87864 <__alt_data_end+0xfffcf5f4>
   87bb8:	0101ffc4 	movi	r4,2047
   87bbc:	893f531e 	bne	r17,r4,8790c <__alt_data_end+0xfffcf69c>
   87bc0:	003f2806 	br	87864 <__alt_data_end+0xfffcf5f4>
   87bc4:	893ff844 	addi	r4,r17,-31
   87bc8:	00c00804 	movi	r3,32
   87bcc:	1108d83a 	srl	r4,r2,r4
   87bd0:	28c05126 	beq	r5,r3,87d18 <__adddf3+0x530>
   87bd4:	00c00fc4 	movi	r3,63
   87bd8:	1c63c83a 	sub	r17,r3,r17
   87bdc:	1444983a 	sll	r2,r2,r17
   87be0:	1420b03a 	or	r16,r2,r16
   87be4:	8020c03a 	cmpne	r16,r16,zero
   87be8:	8120b03a 	or	r16,r16,r4
   87bec:	000b883a 	mov	r5,zero
   87bf0:	0023883a 	mov	r17,zero
   87bf4:	003f1b06 	br	87864 <__alt_data_end+0xfffcf5f4>
   87bf8:	193ff804 	addi	r4,r3,-32
   87bfc:	01c00804 	movi	r7,32
   87c00:	1108d83a 	srl	r4,r2,r4
   87c04:	19c04626 	beq	r3,r7,87d20 <__adddf3+0x538>
   87c08:	01c01004 	movi	r7,64
   87c0c:	38c7c83a 	sub	r3,r7,r3
   87c10:	10c4983a 	sll	r2,r2,r3
   87c14:	118cb03a 	or	r6,r2,r6
   87c18:	300cc03a 	cmpne	r6,r6,zero
   87c1c:	310cb03a 	or	r6,r6,r4
   87c20:	0007883a 	mov	r3,zero
   87c24:	003f4606 	br	87940 <__alt_data_end+0xfffcf6d0>
   87c28:	88002b26 	beq	r17,zero,87cd8 <__adddf3+0x4f0>
   87c2c:	0201ffc4 	movi	r8,2047
   87c30:	22002f26 	beq	r4,r8,87cf0 <__adddf3+0x508>
   87c34:	00c7c83a 	sub	r3,zero,r3
   87c38:	29402034 	orhi	r5,r5,128
   87c3c:	02000e04 	movi	r8,56
   87c40:	40c07616 	blt	r8,r3,87e1c <__adddf3+0x634>
   87c44:	020007c4 	movi	r8,31
   87c48:	40c0d216 	blt	r8,r3,87f94 <__adddf3+0x7ac>
   87c4c:	02000804 	movi	r8,32
   87c50:	40d1c83a 	sub	r8,r8,r3
   87c54:	2a14983a 	sll	r10,r5,r8
   87c58:	80d2d83a 	srl	r9,r16,r3
   87c5c:	8210983a 	sll	r8,r16,r8
   87c60:	28cad83a 	srl	r5,r5,r3
   87c64:	5252b03a 	or	r9,r10,r9
   87c68:	4006c03a 	cmpne	r3,r8,zero
   87c6c:	48e0b03a 	or	r16,r9,r3
   87c70:	3421c83a 	sub	r16,r6,r16
   87c74:	114bc83a 	sub	r5,r2,r5
   87c78:	340d803a 	cmpltu	r6,r6,r16
   87c7c:	298bc83a 	sub	r5,r5,r6
   87c80:	2023883a 	mov	r17,r4
   87c84:	3825883a 	mov	r18,r7
   87c88:	003f3206 	br	87954 <__alt_data_end+0xfffcf6e4>
   87c8c:	98c4b03a 	or	r2,r19,r3
   87c90:	10001c1e 	bne	r2,zero,87d04 <__adddf3+0x51c>
   87c94:	0007883a 	mov	r3,zero
   87c98:	000b883a 	mov	r5,zero
   87c9c:	0021883a 	mov	r16,zero
   87ca0:	0023883a 	mov	r17,zero
   87ca4:	003f4e06 	br	879e0 <__alt_data_end+0xfffcf770>
   87ca8:	010007c4 	movi	r4,31
   87cac:	21c03c16 	blt	r4,r7,87da0 <__adddf3+0x5b8>
   87cb0:	01000804 	movi	r4,32
   87cb4:	21c9c83a 	sub	r4,r4,r7
   87cb8:	31d0d83a 	srl	r8,r6,r7
   87cbc:	1112983a 	sll	r9,r2,r4
   87cc0:	3108983a 	sll	r4,r6,r4
   87cc4:	11ced83a 	srl	r7,r2,r7
   87cc8:	4a04b03a 	or	r2,r9,r8
   87ccc:	2008c03a 	cmpne	r4,r4,zero
   87cd0:	110cb03a 	or	r6,r2,r4
   87cd4:	003f5a06 	br	87a40 <__alt_data_end+0xfffcf7d0>
   87cd8:	2c10b03a 	or	r8,r5,r16
   87cdc:	40000426 	beq	r8,zero,87cf0 <__adddf3+0x508>
   87ce0:	00c6303a 	nor	r3,zero,r3
   87ce4:	183fe226 	beq	r3,zero,87c70 <__alt_data_end+0xfffcfa00>
   87ce8:	0201ffc4 	movi	r8,2047
   87cec:	223fd31e 	bne	r4,r8,87c3c <__alt_data_end+0xfffcf9cc>
   87cf0:	100b883a 	mov	r5,r2
   87cf4:	3021883a 	mov	r16,r6
   87cf8:	2023883a 	mov	r17,r4
   87cfc:	3825883a 	mov	r18,r7
   87d00:	003ed806 	br	87864 <__alt_data_end+0xfffcf5f4>
   87d04:	1821883a 	mov	r16,r3
   87d08:	003f1706 	br	87968 <__alt_data_end+0xfffcf6f8>
   87d0c:	0101ffc4 	movi	r4,2047
   87d10:	893f461e 	bne	r17,r4,87a2c <__alt_data_end+0xfffcf7bc>
   87d14:	003ed306 	br	87864 <__alt_data_end+0xfffcf5f4>
   87d18:	0005883a 	mov	r2,zero
   87d1c:	003fb006 	br	87be0 <__alt_data_end+0xfffcf970>
   87d20:	0005883a 	mov	r2,zero
   87d24:	003fbb06 	br	87c14 <__alt_data_end+0xfffcf9a4>
   87d28:	2c06b03a 	or	r3,r5,r16
   87d2c:	8800841e 	bne	r17,zero,87f40 <__adddf3+0x758>
   87d30:	1800b226 	beq	r3,zero,87ffc <__adddf3+0x814>
   87d34:	1186b03a 	or	r3,r2,r6
   87d38:	183eca26 	beq	r3,zero,87864 <__alt_data_end+0xfffcf5f4>
   87d3c:	340d883a 	add	r6,r6,r16
   87d40:	114b883a 	add	r5,r2,r5
   87d44:	3421803a 	cmpltu	r16,r6,r16
   87d48:	2c0b883a 	add	r5,r5,r16
   87d4c:	2880202c 	andhi	r2,r5,128
   87d50:	1000c026 	beq	r2,zero,88054 <__adddf3+0x86c>
   87d54:	00bfe034 	movhi	r2,65408
   87d58:	10bfffc4 	addi	r2,r2,-1
   87d5c:	288a703a 	and	r5,r5,r2
   87d60:	3021883a 	mov	r16,r6
   87d64:	3823883a 	mov	r17,r7
   87d68:	003ebe06 	br	87864 <__alt_data_end+0xfffcf5f4>
   87d6c:	2c06b03a 	or	r3,r5,r16
   87d70:	8800221e 	bne	r17,zero,87dfc <__adddf3+0x614>
   87d74:	1800481e 	bne	r3,zero,87e98 <__adddf3+0x6b0>
   87d78:	1186b03a 	or	r3,r2,r6
   87d7c:	18000426 	beq	r3,zero,87d90 <__adddf3+0x5a8>
   87d80:	100b883a 	mov	r5,r2
   87d84:	3021883a 	mov	r16,r6
   87d88:	3825883a 	mov	r18,r7
   87d8c:	003eb506 	br	87864 <__alt_data_end+0xfffcf5f4>
   87d90:	0007883a 	mov	r3,zero
   87d94:	000b883a 	mov	r5,zero
   87d98:	0021883a 	mov	r16,zero
   87d9c:	003f1006 	br	879e0 <__alt_data_end+0xfffcf770>
   87da0:	393ff804 	addi	r4,r7,-32
   87da4:	02000804 	movi	r8,32
   87da8:	1108d83a 	srl	r4,r2,r4
   87dac:	3a007726 	beq	r7,r8,87f8c <__adddf3+0x7a4>
   87db0:	02001004 	movi	r8,64
   87db4:	41cfc83a 	sub	r7,r8,r7
   87db8:	11c4983a 	sll	r2,r2,r7
   87dbc:	118cb03a 	or	r6,r2,r6
   87dc0:	300cc03a 	cmpne	r6,r6,zero
   87dc4:	310cb03a 	or	r6,r6,r4
   87dc8:	000f883a 	mov	r7,zero
   87dcc:	003f1c06 	br	87a40 <__alt_data_end+0xfffcf7d0>
   87dd0:	88001a1e 	bne	r17,zero,87e3c <__adddf3+0x654>
   87dd4:	2c10b03a 	or	r8,r5,r16
   87dd8:	40005526 	beq	r8,zero,87f30 <__adddf3+0x748>
   87ddc:	01ce303a 	nor	r7,zero,r7
   87de0:	3800511e 	bne	r7,zero,87f28 <__adddf3+0x740>
   87de4:	81a1883a 	add	r16,r16,r6
   87de8:	114b883a 	add	r5,r2,r5
   87dec:	818d803a 	cmpltu	r6,r16,r6
   87df0:	298b883a 	add	r5,r5,r6
   87df4:	2023883a 	mov	r17,r4
   87df8:	003f1606 	br	87a54 <__alt_data_end+0xfffcf7e4>
   87dfc:	1800341e 	bne	r3,zero,87ed0 <__adddf3+0x6e8>
   87e00:	1186b03a 	or	r3,r2,r6
   87e04:	18006f26 	beq	r3,zero,87fc4 <__adddf3+0x7dc>
   87e08:	100b883a 	mov	r5,r2
   87e0c:	3021883a 	mov	r16,r6
   87e10:	3825883a 	mov	r18,r7
   87e14:	0441ffc4 	movi	r17,2047
   87e18:	003e9206 	br	87864 <__alt_data_end+0xfffcf5f4>
   87e1c:	2c20b03a 	or	r16,r5,r16
   87e20:	8020c03a 	cmpne	r16,r16,zero
   87e24:	000b883a 	mov	r5,zero
   87e28:	003f9106 	br	87c70 <__alt_data_end+0xfffcfa00>
   87e2c:	2023883a 	mov	r17,r4
   87e30:	000b883a 	mov	r5,zero
   87e34:	0021883a 	mov	r16,zero
   87e38:	003ee906 	br	879e0 <__alt_data_end+0xfffcf770>
   87e3c:	0201ffc4 	movi	r8,2047
   87e40:	22003b26 	beq	r4,r8,87f30 <__adddf3+0x748>
   87e44:	01cfc83a 	sub	r7,zero,r7
   87e48:	29402034 	orhi	r5,r5,128
   87e4c:	02000e04 	movi	r8,56
   87e50:	41c06216 	blt	r8,r7,87fdc <__adddf3+0x7f4>
   87e54:	020007c4 	movi	r8,31
   87e58:	41c07016 	blt	r8,r7,8801c <__adddf3+0x834>
   87e5c:	02000804 	movi	r8,32
   87e60:	41d1c83a 	sub	r8,r8,r7
   87e64:	2a14983a 	sll	r10,r5,r8
   87e68:	81d2d83a 	srl	r9,r16,r7
   87e6c:	8210983a 	sll	r8,r16,r8
   87e70:	29cad83a 	srl	r5,r5,r7
   87e74:	5252b03a 	or	r9,r10,r9
   87e78:	400ec03a 	cmpne	r7,r8,zero
   87e7c:	49e0b03a 	or	r16,r9,r7
   87e80:	81a1883a 	add	r16,r16,r6
   87e84:	2885883a 	add	r2,r5,r2
   87e88:	818d803a 	cmpltu	r6,r16,r6
   87e8c:	118b883a 	add	r5,r2,r6
   87e90:	2023883a 	mov	r17,r4
   87e94:	003eef06 	br	87a54 <__alt_data_end+0xfffcf7e4>
   87e98:	1186b03a 	or	r3,r2,r6
   87e9c:	183e7126 	beq	r3,zero,87864 <__alt_data_end+0xfffcf5f4>
   87ea0:	8187c83a 	sub	r3,r16,r6
   87ea4:	80d1803a 	cmpltu	r8,r16,r3
   87ea8:	2889c83a 	sub	r4,r5,r2
   87eac:	2209c83a 	sub	r4,r4,r8
   87eb0:	2200202c 	andhi	r8,r4,128
   87eb4:	40005426 	beq	r8,zero,88008 <__adddf3+0x820>
   87eb8:	3421c83a 	sub	r16,r6,r16
   87ebc:	114bc83a 	sub	r5,r2,r5
   87ec0:	340d803a 	cmpltu	r6,r6,r16
   87ec4:	298bc83a 	sub	r5,r5,r6
   87ec8:	3825883a 	mov	r18,r7
   87ecc:	003e6506 	br	87864 <__alt_data_end+0xfffcf5f4>
   87ed0:	1186b03a 	or	r3,r2,r6
   87ed4:	18002b26 	beq	r3,zero,87f84 <__adddf3+0x79c>
   87ed8:	2806d0fa 	srli	r3,r5,3
   87edc:	8020d0fa 	srli	r16,r16,3
   87ee0:	280a977a 	slli	r5,r5,29
   87ee4:	1900022c 	andhi	r4,r3,8
   87ee8:	2c20b03a 	or	r16,r5,r16
   87eec:	20000826 	beq	r4,zero,87f10 <__adddf3+0x728>
   87ef0:	1008d0fa 	srli	r4,r2,3
   87ef4:	2140022c 	andhi	r5,r4,8
   87ef8:	2800051e 	bne	r5,zero,87f10 <__adddf3+0x728>
   87efc:	300cd0fa 	srli	r6,r6,3
   87f00:	1004977a 	slli	r2,r2,29
   87f04:	2007883a 	mov	r3,r4
   87f08:	3825883a 	mov	r18,r7
   87f0c:	11a0b03a 	or	r16,r2,r6
   87f10:	800ad77a 	srli	r5,r16,29
   87f14:	180690fa 	slli	r3,r3,3
   87f18:	802090fa 	slli	r16,r16,3
   87f1c:	0441ffc4 	movi	r17,2047
   87f20:	28cab03a 	or	r5,r5,r3
   87f24:	003e4f06 	br	87864 <__alt_data_end+0xfffcf5f4>
   87f28:	0201ffc4 	movi	r8,2047
   87f2c:	223fc71e 	bne	r4,r8,87e4c <__alt_data_end+0xfffcfbdc>
   87f30:	100b883a 	mov	r5,r2
   87f34:	3021883a 	mov	r16,r6
   87f38:	2023883a 	mov	r17,r4
   87f3c:	003e4906 	br	87864 <__alt_data_end+0xfffcf5f4>
   87f40:	18002a26 	beq	r3,zero,87fec <__adddf3+0x804>
   87f44:	1186b03a 	or	r3,r2,r6
   87f48:	18000e26 	beq	r3,zero,87f84 <__adddf3+0x79c>
   87f4c:	2806d0fa 	srli	r3,r5,3
   87f50:	8020d0fa 	srli	r16,r16,3
   87f54:	280a977a 	slli	r5,r5,29
   87f58:	1900022c 	andhi	r4,r3,8
   87f5c:	2c20b03a 	or	r16,r5,r16
   87f60:	203feb26 	beq	r4,zero,87f10 <__alt_data_end+0xfffcfca0>
   87f64:	1008d0fa 	srli	r4,r2,3
   87f68:	2140022c 	andhi	r5,r4,8
   87f6c:	283fe81e 	bne	r5,zero,87f10 <__alt_data_end+0xfffcfca0>
   87f70:	300cd0fa 	srli	r6,r6,3
   87f74:	1004977a 	slli	r2,r2,29
   87f78:	2007883a 	mov	r3,r4
   87f7c:	11a0b03a 	or	r16,r2,r6
   87f80:	003fe306 	br	87f10 <__alt_data_end+0xfffcfca0>
   87f84:	0441ffc4 	movi	r17,2047
   87f88:	003e3606 	br	87864 <__alt_data_end+0xfffcf5f4>
   87f8c:	0005883a 	mov	r2,zero
   87f90:	003f8a06 	br	87dbc <__alt_data_end+0xfffcfb4c>
   87f94:	1a3ff804 	addi	r8,r3,-32
   87f98:	02400804 	movi	r9,32
   87f9c:	2a10d83a 	srl	r8,r5,r8
   87fa0:	1a402a26 	beq	r3,r9,8804c <__adddf3+0x864>
   87fa4:	02401004 	movi	r9,64
   87fa8:	48c7c83a 	sub	r3,r9,r3
   87fac:	28ca983a 	sll	r5,r5,r3
   87fb0:	2c20b03a 	or	r16,r5,r16
   87fb4:	8020c03a 	cmpne	r16,r16,zero
   87fb8:	8220b03a 	or	r16,r16,r8
   87fbc:	000b883a 	mov	r5,zero
   87fc0:	003f2b06 	br	87c70 <__alt_data_end+0xfffcfa00>
   87fc4:	0007883a 	mov	r3,zero
   87fc8:	01402034 	movhi	r5,128
   87fcc:	297fffc4 	addi	r5,r5,-1
   87fd0:	043ffe04 	movi	r16,-8
   87fd4:	0441ffc4 	movi	r17,2047
   87fd8:	003e8106 	br	879e0 <__alt_data_end+0xfffcf770>
   87fdc:	2c20b03a 	or	r16,r5,r16
   87fe0:	8020c03a 	cmpne	r16,r16,zero
   87fe4:	000b883a 	mov	r5,zero
   87fe8:	003fa506 	br	87e80 <__alt_data_end+0xfffcfc10>
   87fec:	100b883a 	mov	r5,r2
   87ff0:	3021883a 	mov	r16,r6
   87ff4:	0441ffc4 	movi	r17,2047
   87ff8:	003e1a06 	br	87864 <__alt_data_end+0xfffcf5f4>
   87ffc:	100b883a 	mov	r5,r2
   88000:	3021883a 	mov	r16,r6
   88004:	003e1706 	br	87864 <__alt_data_end+0xfffcf5f4>
   88008:	20c4b03a 	or	r2,r4,r3
   8800c:	103f6026 	beq	r2,zero,87d90 <__alt_data_end+0xfffcfb20>
   88010:	200b883a 	mov	r5,r4
   88014:	1821883a 	mov	r16,r3
   88018:	003e1206 	br	87864 <__alt_data_end+0xfffcf5f4>
   8801c:	3a3ff804 	addi	r8,r7,-32
   88020:	02400804 	movi	r9,32
   88024:	2a10d83a 	srl	r8,r5,r8
   88028:	3a400c26 	beq	r7,r9,8805c <__adddf3+0x874>
   8802c:	02401004 	movi	r9,64
   88030:	49cfc83a 	sub	r7,r9,r7
   88034:	29ca983a 	sll	r5,r5,r7
   88038:	2c20b03a 	or	r16,r5,r16
   8803c:	8020c03a 	cmpne	r16,r16,zero
   88040:	8220b03a 	or	r16,r16,r8
   88044:	000b883a 	mov	r5,zero
   88048:	003f8d06 	br	87e80 <__alt_data_end+0xfffcfc10>
   8804c:	000b883a 	mov	r5,zero
   88050:	003fd706 	br	87fb0 <__alt_data_end+0xfffcfd40>
   88054:	3021883a 	mov	r16,r6
   88058:	003e0206 	br	87864 <__alt_data_end+0xfffcf5f4>
   8805c:	000b883a 	mov	r5,zero
   88060:	003ff506 	br	88038 <__alt_data_end+0xfffcfdc8>

00088064 <__divdf3>:
   88064:	defff204 	addi	sp,sp,-56
   88068:	dcc00715 	stw	r19,28(sp)
   8806c:	2826d53a 	srli	r19,r5,20
   88070:	dd400915 	stw	r21,36(sp)
   88074:	282ad7fa 	srli	r21,r5,31
   88078:	ddc00b15 	stw	r23,44(sp)
   8807c:	dd800a15 	stw	r22,40(sp)
   88080:	dc800615 	stw	r18,24(sp)
   88084:	dfc00d15 	stw	ra,52(sp)
   88088:	04800434 	movhi	r18,16
   8808c:	94bfffc4 	addi	r18,r18,-1
   88090:	df000c15 	stw	fp,48(sp)
   88094:	dd000815 	stw	r20,32(sp)
   88098:	dc400515 	stw	r17,20(sp)
   8809c:	dc000415 	stw	r16,16(sp)
   880a0:	9cc1ffcc 	andi	r19,r19,2047
   880a4:	202d883a 	mov	r22,r4
   880a8:	2ca4703a 	and	r18,r5,r18
   880ac:	adc03fcc 	andi	r23,r21,255
   880b0:	98006a26 	beq	r19,zero,8825c <__divdf3+0x1f8>
   880b4:	0081ffc4 	movi	r2,2047
   880b8:	2021883a 	mov	r16,r4
   880bc:	98803726 	beq	r19,r2,8819c <__divdf3+0x138>
   880c0:	90800434 	orhi	r2,r18,16
   880c4:	100490fa 	slli	r2,r2,3
   880c8:	2024d77a 	srli	r18,r4,29
   880cc:	202090fa 	slli	r16,r4,3
   880d0:	9cff0044 	addi	r19,r19,-1023
   880d4:	14a4b03a 	or	r18,r2,r18
   880d8:	0029883a 	mov	r20,zero
   880dc:	0039883a 	mov	fp,zero
   880e0:	3804d53a 	srli	r2,r7,20
   880e4:	382cd7fa 	srli	r22,r7,31
   880e8:	04400434 	movhi	r17,16
   880ec:	8c7fffc4 	addi	r17,r17,-1
   880f0:	1081ffcc 	andi	r2,r2,2047
   880f4:	3011883a 	mov	r8,r6
   880f8:	3c62703a 	and	r17,r7,r17
   880fc:	b2403fcc 	andi	r9,r22,255
   88100:	10007326 	beq	r2,zero,882d0 <__divdf3+0x26c>
   88104:	0101ffc4 	movi	r4,2047
   88108:	11006b26 	beq	r2,r4,882b8 <__divdf3+0x254>
   8810c:	89000434 	orhi	r4,r17,16
   88110:	200890fa 	slli	r4,r4,3
   88114:	3022d77a 	srli	r17,r6,29
   88118:	301090fa 	slli	r8,r6,3
   8811c:	10bf0044 	addi	r2,r2,-1023
   88120:	2462b03a 	or	r17,r4,r17
   88124:	000d883a 	mov	r6,zero
   88128:	ad8af03a 	xor	r5,r21,r22
   8812c:	3508b03a 	or	r4,r6,r20
   88130:	00c003c4 	movi	r3,15
   88134:	280f883a 	mov	r7,r5
   88138:	2d003fcc 	andi	r20,r5,255
   8813c:	19009236 	bltu	r3,r4,88388 <__divdf3+0x324>
   88140:	2109883a 	add	r4,r4,r4
   88144:	00c00274 	movhi	r3,9
   88148:	18e05704 	addi	r3,r3,-32420
   8814c:	2109883a 	add	r4,r4,r4
   88150:	20c9883a 	add	r4,r4,r3
   88154:	20c00017 	ldw	r3,0(r4)
   88158:	1800683a 	jmp	r3
   8815c:	00088388 	cmpgei	zero,zero,8718
   88160:	000881f8 	rdprs	zero,zero,8711
   88164:	00088378 	rdprs	zero,zero,8717
   88168:	000881c8 	cmpgei	zero,zero,8711
   8816c:	00088378 	rdprs	zero,zero,8717
   88170:	00088360 	cmpeqi	zero,zero,8717
   88174:	00088378 	rdprs	zero,zero,8717
   88178:	000881c8 	cmpgei	zero,zero,8711
   8817c:	000881f8 	rdprs	zero,zero,8711
   88180:	000881f8 	rdprs	zero,zero,8711
   88184:	00088360 	cmpeqi	zero,zero,8717
   88188:	000881c8 	cmpgei	zero,zero,8711
   8818c:	000881b8 	rdprs	zero,zero,8710
   88190:	000881b8 	rdprs	zero,zero,8710
   88194:	000881b8 	rdprs	zero,zero,8710
   88198:	00088674 	movhi	zero,8729
   8819c:	9104b03a 	or	r2,r18,r4
   881a0:	10006c1e 	bne	r2,zero,88354 <__divdf3+0x2f0>
   881a4:	05000204 	movi	r20,8
   881a8:	0025883a 	mov	r18,zero
   881ac:	0021883a 	mov	r16,zero
   881b0:	07000084 	movi	fp,2
   881b4:	003fca06 	br	880e0 <__alt_data_end+0xfffcfe70>
   881b8:	9023883a 	mov	r17,r18
   881bc:	8011883a 	mov	r8,r16
   881c0:	b813883a 	mov	r9,r23
   881c4:	e00d883a 	mov	r6,fp
   881c8:	00800084 	movi	r2,2
   881cc:	30800926 	beq	r6,r2,881f4 <__divdf3+0x190>
   881d0:	008000c4 	movi	r2,3
   881d4:	3081d026 	beq	r6,r2,88918 <__divdf3+0x8b4>
   881d8:	00800044 	movi	r2,1
   881dc:	3081881e 	bne	r6,r2,88800 <__divdf3+0x79c>
   881e0:	480f883a 	mov	r7,r9
   881e4:	0005883a 	mov	r2,zero
   881e8:	0025883a 	mov	r18,zero
   881ec:	0021883a 	mov	r16,zero
   881f0:	00000506 	br	88208 <__divdf3+0x1a4>
   881f4:	4829883a 	mov	r20,r9
   881f8:	a1c0004c 	andi	r7,r20,1
   881fc:	0081ffc4 	movi	r2,2047
   88200:	0025883a 	mov	r18,zero
   88204:	0021883a 	mov	r16,zero
   88208:	1004953a 	slli	r2,r2,20
   8820c:	39c03fcc 	andi	r7,r7,255
   88210:	380e97fa 	slli	r7,r7,31
   88214:	00c00434 	movhi	r3,16
   88218:	18ffffc4 	addi	r3,r3,-1
   8821c:	90e4703a 	and	r18,r18,r3
   88220:	9086b03a 	or	r3,r18,r2
   88224:	19c6b03a 	or	r3,r3,r7
   88228:	8005883a 	mov	r2,r16
   8822c:	dfc00d17 	ldw	ra,52(sp)
   88230:	df000c17 	ldw	fp,48(sp)
   88234:	ddc00b17 	ldw	r23,44(sp)
   88238:	dd800a17 	ldw	r22,40(sp)
   8823c:	dd400917 	ldw	r21,36(sp)
   88240:	dd000817 	ldw	r20,32(sp)
   88244:	dcc00717 	ldw	r19,28(sp)
   88248:	dc800617 	ldw	r18,24(sp)
   8824c:	dc400517 	ldw	r17,20(sp)
   88250:	dc000417 	ldw	r16,16(sp)
   88254:	dec00e04 	addi	sp,sp,56
   88258:	f800283a 	ret
   8825c:	9104b03a 	or	r2,r18,r4
   88260:	10003726 	beq	r2,zero,88340 <__divdf3+0x2dc>
   88264:	90012626 	beq	r18,zero,88700 <__divdf3+0x69c>
   88268:	9009883a 	mov	r4,r18
   8826c:	d9800215 	stw	r6,8(sp)
   88270:	d9c00115 	stw	r7,4(sp)
   88274:	0089ae80 	call	89ae8 <__clzsi2>
   88278:	d9800217 	ldw	r6,8(sp)
   8827c:	d9c00117 	ldw	r7,4(sp)
   88280:	00c009c4 	movi	r3,39
   88284:	18811a16 	blt	r3,r2,886f0 <__divdf3+0x68c>
   88288:	01400a04 	movi	r5,40
   8828c:	143ffe04 	addi	r16,r2,-8
   88290:	288bc83a 	sub	r5,r5,r2
   88294:	9424983a 	sll	r18,r18,r16
   88298:	b14ad83a 	srl	r5,r22,r5
   8829c:	b420983a 	sll	r16,r22,r16
   882a0:	2ca4b03a 	or	r18,r5,r18
   882a4:	04ff0344 	movi	r19,-1011
   882a8:	98a7c83a 	sub	r19,r19,r2
   882ac:	0029883a 	mov	r20,zero
   882b0:	0039883a 	mov	fp,zero
   882b4:	003f8a06 	br	880e0 <__alt_data_end+0xfffcfe70>
   882b8:	8988b03a 	or	r4,r17,r6
   882bc:	20001e1e 	bne	r4,zero,88338 <__divdf3+0x2d4>
   882c0:	0023883a 	mov	r17,zero
   882c4:	0011883a 	mov	r8,zero
   882c8:	01800084 	movi	r6,2
   882cc:	003f9606 	br	88128 <__alt_data_end+0xfffcfeb8>
   882d0:	8988b03a 	or	r4,r17,r6
   882d4:	20001426 	beq	r4,zero,88328 <__divdf3+0x2c4>
   882d8:	8800fd26 	beq	r17,zero,886d0 <__divdf3+0x66c>
   882dc:	8809883a 	mov	r4,r17
   882e0:	d9800215 	stw	r6,8(sp)
   882e4:	da400115 	stw	r9,4(sp)
   882e8:	0089ae80 	call	89ae8 <__clzsi2>
   882ec:	d9800217 	ldw	r6,8(sp)
   882f0:	da400117 	ldw	r9,4(sp)
   882f4:	010009c4 	movi	r4,39
   882f8:	2080f116 	blt	r4,r2,886c0 <__divdf3+0x65c>
   882fc:	01000a04 	movi	r4,40
   88300:	123ffe04 	addi	r8,r2,-8
   88304:	2089c83a 	sub	r4,r4,r2
   88308:	8a22983a 	sll	r17,r17,r8
   8830c:	3108d83a 	srl	r4,r6,r4
   88310:	3210983a 	sll	r8,r6,r8
   88314:	2462b03a 	or	r17,r4,r17
   88318:	013f0344 	movi	r4,-1011
   8831c:	2085c83a 	sub	r2,r4,r2
   88320:	000d883a 	mov	r6,zero
   88324:	003f8006 	br	88128 <__alt_data_end+0xfffcfeb8>
   88328:	0023883a 	mov	r17,zero
   8832c:	0011883a 	mov	r8,zero
   88330:	01800044 	movi	r6,1
   88334:	003f7c06 	br	88128 <__alt_data_end+0xfffcfeb8>
   88338:	018000c4 	movi	r6,3
   8833c:	003f7a06 	br	88128 <__alt_data_end+0xfffcfeb8>
   88340:	05000104 	movi	r20,4
   88344:	0025883a 	mov	r18,zero
   88348:	0021883a 	mov	r16,zero
   8834c:	07000044 	movi	fp,1
   88350:	003f6306 	br	880e0 <__alt_data_end+0xfffcfe70>
   88354:	05000304 	movi	r20,12
   88358:	070000c4 	movi	fp,3
   8835c:	003f6006 	br	880e0 <__alt_data_end+0xfffcfe70>
   88360:	000f883a 	mov	r7,zero
   88364:	04800434 	movhi	r18,16
   88368:	94bfffc4 	addi	r18,r18,-1
   8836c:	043fffc4 	movi	r16,-1
   88370:	0081ffc4 	movi	r2,2047
   88374:	003fa406 	br	88208 <__alt_data_end+0xfffcff98>
   88378:	0005883a 	mov	r2,zero
   8837c:	0025883a 	mov	r18,zero
   88380:	0021883a 	mov	r16,zero
   88384:	003fa006 	br	88208 <__alt_data_end+0xfffcff98>
   88388:	9885c83a 	sub	r2,r19,r2
   8838c:	d8800015 	stw	r2,0(sp)
   88390:	8c80ef36 	bltu	r17,r18,88750 <__divdf3+0x6ec>
   88394:	9440ed26 	beq	r18,r17,8874c <__divdf3+0x6e8>
   88398:	d8c00017 	ldw	r3,0(sp)
   8839c:	002d883a 	mov	r22,zero
   883a0:	18ffffc4 	addi	r3,r3,-1
   883a4:	d8c00015 	stw	r3,0(sp)
   883a8:	9007883a 	mov	r3,r18
   883ac:	4026d63a 	srli	r19,r8,24
   883b0:	8822923a 	slli	r17,r17,8
   883b4:	1809883a 	mov	r4,r3
   883b8:	402e923a 	slli	r23,r8,8
   883bc:	9c66b03a 	or	r19,r19,r17
   883c0:	982ad43a 	srli	r21,r19,16
   883c4:	d8c00315 	stw	r3,12(sp)
   883c8:	9f3fffcc 	andi	fp,r19,65535
   883cc:	a80b883a 	mov	r5,r21
   883d0:	00877d80 	call	877d8 <__udivsi3>
   883d4:	d8c00317 	ldw	r3,12(sp)
   883d8:	a80b883a 	mov	r5,r21
   883dc:	1025883a 	mov	r18,r2
   883e0:	1809883a 	mov	r4,r3
   883e4:	00877e00 	call	877e0 <__umodsi3>
   883e8:	1004943a 	slli	r2,r2,16
   883ec:	8006d43a 	srli	r3,r16,16
   883f0:	9709383a 	mul	r4,r18,fp
   883f4:	10c6b03a 	or	r3,r2,r3
   883f8:	1900062e 	bgeu	r3,r4,88414 <__divdf3+0x3b0>
   883fc:	1cc7883a 	add	r3,r3,r19
   88400:	90bfffc4 	addi	r2,r18,-1
   88404:	1cc0e436 	bltu	r3,r19,88798 <__divdf3+0x734>
   88408:	1900e32e 	bgeu	r3,r4,88798 <__divdf3+0x734>
   8840c:	94bfff84 	addi	r18,r18,-2
   88410:	1cc7883a 	add	r3,r3,r19
   88414:	1907c83a 	sub	r3,r3,r4
   88418:	1809883a 	mov	r4,r3
   8841c:	a80b883a 	mov	r5,r21
   88420:	d8c00315 	stw	r3,12(sp)
   88424:	00877d80 	call	877d8 <__udivsi3>
   88428:	d8c00317 	ldw	r3,12(sp)
   8842c:	a80b883a 	mov	r5,r21
   88430:	1023883a 	mov	r17,r2
   88434:	1809883a 	mov	r4,r3
   88438:	00877e00 	call	877e0 <__umodsi3>
   8843c:	1004943a 	slli	r2,r2,16
   88440:	8f0b383a 	mul	r5,r17,fp
   88444:	843fffcc 	andi	r16,r16,65535
   88448:	1420b03a 	or	r16,r2,r16
   8844c:	8140062e 	bgeu	r16,r5,88468 <__divdf3+0x404>
   88450:	84e1883a 	add	r16,r16,r19
   88454:	88bfffc4 	addi	r2,r17,-1
   88458:	84c0cd36 	bltu	r16,r19,88790 <__divdf3+0x72c>
   8845c:	8140cc2e 	bgeu	r16,r5,88790 <__divdf3+0x72c>
   88460:	8c7fff84 	addi	r17,r17,-2
   88464:	84e1883a 	add	r16,r16,r19
   88468:	9004943a 	slli	r2,r18,16
   8846c:	b8ffffcc 	andi	r3,r23,65535
   88470:	b824d43a 	srli	r18,r23,16
   88474:	88a2b03a 	or	r17,r17,r2
   88478:	8808d43a 	srli	r4,r17,16
   8847c:	88bfffcc 	andi	r2,r17,65535
   88480:	10cd383a 	mul	r6,r2,r3
   88484:	20cf383a 	mul	r7,r4,r3
   88488:	1485383a 	mul	r2,r2,r18
   8848c:	3010d43a 	srli	r8,r6,16
   88490:	814bc83a 	sub	r5,r16,r5
   88494:	3885883a 	add	r2,r7,r2
   88498:	1205883a 	add	r2,r2,r8
   8849c:	2489383a 	mul	r4,r4,r18
   884a0:	11c0022e 	bgeu	r2,r7,884ac <__divdf3+0x448>
   884a4:	01c00074 	movhi	r7,1
   884a8:	21c9883a 	add	r4,r4,r7
   884ac:	100ed43a 	srli	r7,r2,16
   884b0:	1020943a 	slli	r16,r2,16
   884b4:	31bfffcc 	andi	r6,r6,65535
   884b8:	21c9883a 	add	r4,r4,r7
   884bc:	81a1883a 	add	r16,r16,r6
   884c0:	29009736 	bltu	r5,r4,88720 <__divdf3+0x6bc>
   884c4:	29009526 	beq	r5,r4,8871c <__divdf3+0x6b8>
   884c8:	2909c83a 	sub	r4,r5,r4
   884cc:	b421c83a 	sub	r16,r22,r16
   884d0:	b42d803a 	cmpltu	r22,r22,r16
   884d4:	25adc83a 	sub	r22,r4,r22
   884d8:	b4c0c326 	beq	r22,r19,887e8 <__divdf3+0x784>
   884dc:	b009883a 	mov	r4,r22
   884e0:	a80b883a 	mov	r5,r21
   884e4:	d8c00315 	stw	r3,12(sp)
   884e8:	00877d80 	call	877d8 <__udivsi3>
   884ec:	b009883a 	mov	r4,r22
   884f0:	a80b883a 	mov	r5,r21
   884f4:	d8800115 	stw	r2,4(sp)
   884f8:	00877e00 	call	877e0 <__umodsi3>
   884fc:	da000117 	ldw	r8,4(sp)
   88500:	1004943a 	slli	r2,r2,16
   88504:	800ad43a 	srli	r5,r16,16
   88508:	4709383a 	mul	r4,r8,fp
   8850c:	d8c00317 	ldw	r3,12(sp)
   88510:	114ab03a 	or	r5,r2,r5
   88514:	2900062e 	bgeu	r5,r4,88530 <__divdf3+0x4cc>
   88518:	2ccb883a 	add	r5,r5,r19
   8851c:	40bfffc4 	addi	r2,r8,-1
   88520:	2cc0b536 	bltu	r5,r19,887f8 <__divdf3+0x794>
   88524:	2900b42e 	bgeu	r5,r4,887f8 <__divdf3+0x794>
   88528:	423fff84 	addi	r8,r8,-2
   8852c:	2ccb883a 	add	r5,r5,r19
   88530:	290dc83a 	sub	r6,r5,r4
   88534:	3009883a 	mov	r4,r6
   88538:	a80b883a 	mov	r5,r21
   8853c:	d8c00315 	stw	r3,12(sp)
   88540:	da000115 	stw	r8,4(sp)
   88544:	d9800215 	stw	r6,8(sp)
   88548:	00877d80 	call	877d8 <__udivsi3>
   8854c:	d9800217 	ldw	r6,8(sp)
   88550:	a80b883a 	mov	r5,r21
   88554:	102d883a 	mov	r22,r2
   88558:	3009883a 	mov	r4,r6
   8855c:	00877e00 	call	877e0 <__umodsi3>
   88560:	1004943a 	slli	r2,r2,16
   88564:	b739383a 	mul	fp,r22,fp
   88568:	843fffcc 	andi	r16,r16,65535
   8856c:	1408b03a 	or	r4,r2,r16
   88570:	d8c00317 	ldw	r3,12(sp)
   88574:	da000117 	ldw	r8,4(sp)
   88578:	2700062e 	bgeu	r4,fp,88594 <__divdf3+0x530>
   8857c:	24c9883a 	add	r4,r4,r19
   88580:	b0bfffc4 	addi	r2,r22,-1
   88584:	24c09a36 	bltu	r4,r19,887f0 <__divdf3+0x78c>
   88588:	2700992e 	bgeu	r4,fp,887f0 <__divdf3+0x78c>
   8858c:	b5bfff84 	addi	r22,r22,-2
   88590:	24c9883a 	add	r4,r4,r19
   88594:	4010943a 	slli	r8,r8,16
   88598:	2739c83a 	sub	fp,r4,fp
   8859c:	b210b03a 	or	r8,r22,r8
   885a0:	400ad43a 	srli	r5,r8,16
   885a4:	40bfffcc 	andi	r2,r8,65535
   885a8:	10c9383a 	mul	r4,r2,r3
   885ac:	1485383a 	mul	r2,r2,r18
   885b0:	28c7383a 	mul	r3,r5,r3
   885b4:	200cd43a 	srli	r6,r4,16
   885b8:	2ca5383a 	mul	r18,r5,r18
   885bc:	1885883a 	add	r2,r3,r2
   885c0:	1185883a 	add	r2,r2,r6
   885c4:	10c0022e 	bgeu	r2,r3,885d0 <__divdf3+0x56c>
   885c8:	00c00074 	movhi	r3,1
   885cc:	90e5883a 	add	r18,r18,r3
   885d0:	1006d43a 	srli	r3,r2,16
   885d4:	1004943a 	slli	r2,r2,16
   885d8:	213fffcc 	andi	r4,r4,65535
   885dc:	90e5883a 	add	r18,r18,r3
   885e0:	1109883a 	add	r4,r2,r4
   885e4:	e480602e 	bgeu	fp,r18,88768 <__divdf3+0x704>
   885e8:	e4f9883a 	add	fp,fp,r19
   885ec:	40bfffc4 	addi	r2,r8,-1
   885f0:	e4c06b2e 	bgeu	fp,r19,887a0 <__divdf3+0x73c>
   885f4:	1011883a 	mov	r8,r2
   885f8:	e4805e26 	beq	fp,r18,88774 <__divdf3+0x710>
   885fc:	42000054 	ori	r8,r8,1
   88600:	d8c00017 	ldw	r3,0(sp)
   88604:	1880ffc4 	addi	r2,r3,1023
   88608:	00806d0e 	bge	zero,r2,887c0 <__divdf3+0x75c>
   8860c:	40c001cc 	andi	r3,r8,7
   88610:	18000726 	beq	r3,zero,88630 <__divdf3+0x5cc>
   88614:	410003cc 	andi	r4,r8,15
   88618:	00c00104 	movi	r3,4
   8861c:	20c00426 	beq	r4,r3,88630 <__divdf3+0x5cc>
   88620:	40c7883a 	add	r3,r8,r3
   88624:	1a11803a 	cmpltu	r8,r3,r8
   88628:	8a23883a 	add	r17,r17,r8
   8862c:	1811883a 	mov	r8,r3
   88630:	88c0402c 	andhi	r3,r17,256
   88634:	18000526 	beq	r3,zero,8864c <__divdf3+0x5e8>
   88638:	d8c00017 	ldw	r3,0(sp)
   8863c:	00bfc034 	movhi	r2,65280
   88640:	10bfffc4 	addi	r2,r2,-1
   88644:	88a2703a 	and	r17,r17,r2
   88648:	18810004 	addi	r2,r3,1024
   8864c:	00c1ff84 	movi	r3,2046
   88650:	18bee916 	blt	r3,r2,881f8 <__alt_data_end+0xfffcff88>
   88654:	8820977a 	slli	r16,r17,29
   88658:	4010d0fa 	srli	r8,r8,3
   8865c:	8822927a 	slli	r17,r17,9
   88660:	1081ffcc 	andi	r2,r2,2047
   88664:	8220b03a 	or	r16,r16,r8
   88668:	8824d33a 	srli	r18,r17,12
   8866c:	a1c0004c 	andi	r7,r20,1
   88670:	003ee506 	br	88208 <__alt_data_end+0xfffcff98>
   88674:	9080022c 	andhi	r2,r18,8
   88678:	10000a26 	beq	r2,zero,886a4 <__divdf3+0x640>
   8867c:	8880022c 	andhi	r2,r17,8
   88680:	1000081e 	bne	r2,zero,886a4 <__divdf3+0x640>
   88684:	00800434 	movhi	r2,16
   88688:	10bfffc4 	addi	r2,r2,-1
   8868c:	8c800234 	orhi	r18,r17,8
   88690:	90a4703a 	and	r18,r18,r2
   88694:	b00f883a 	mov	r7,r22
   88698:	4021883a 	mov	r16,r8
   8869c:	0081ffc4 	movi	r2,2047
   886a0:	003ed906 	br	88208 <__alt_data_end+0xfffcff98>
   886a4:	00800434 	movhi	r2,16
   886a8:	10bfffc4 	addi	r2,r2,-1
   886ac:	94800234 	orhi	r18,r18,8
   886b0:	90a4703a 	and	r18,r18,r2
   886b4:	a80f883a 	mov	r7,r21
   886b8:	0081ffc4 	movi	r2,2047
   886bc:	003ed206 	br	88208 <__alt_data_end+0xfffcff98>
   886c0:	147ff604 	addi	r17,r2,-40
   886c4:	3462983a 	sll	r17,r6,r17
   886c8:	0011883a 	mov	r8,zero
   886cc:	003f1206 	br	88318 <__alt_data_end+0xfffd00a8>
   886d0:	3009883a 	mov	r4,r6
   886d4:	d9800215 	stw	r6,8(sp)
   886d8:	da400115 	stw	r9,4(sp)
   886dc:	0089ae80 	call	89ae8 <__clzsi2>
   886e0:	10800804 	addi	r2,r2,32
   886e4:	da400117 	ldw	r9,4(sp)
   886e8:	d9800217 	ldw	r6,8(sp)
   886ec:	003f0106 	br	882f4 <__alt_data_end+0xfffd0084>
   886f0:	14bff604 	addi	r18,r2,-40
   886f4:	b4a4983a 	sll	r18,r22,r18
   886f8:	0021883a 	mov	r16,zero
   886fc:	003ee906 	br	882a4 <__alt_data_end+0xfffd0034>
   88700:	d9800215 	stw	r6,8(sp)
   88704:	d9c00115 	stw	r7,4(sp)
   88708:	0089ae80 	call	89ae8 <__clzsi2>
   8870c:	10800804 	addi	r2,r2,32
   88710:	d9c00117 	ldw	r7,4(sp)
   88714:	d9800217 	ldw	r6,8(sp)
   88718:	003ed906 	br	88280 <__alt_data_end+0xfffd0010>
   8871c:	b400262e 	bgeu	r22,r16,887b8 <__divdf3+0x754>
   88720:	b5ed883a 	add	r22,r22,r23
   88724:	b5c5803a 	cmpltu	r2,r22,r23
   88728:	14c5883a 	add	r2,r2,r19
   8872c:	114b883a 	add	r5,r2,r5
   88730:	88bfffc4 	addi	r2,r17,-1
   88734:	9940112e 	bgeu	r19,r5,8877c <__divdf3+0x718>
   88738:	29004e36 	bltu	r5,r4,88874 <__divdf3+0x810>
   8873c:	21401c26 	beq	r4,r5,887b0 <__divdf3+0x74c>
   88740:	2909c83a 	sub	r4,r5,r4
   88744:	1023883a 	mov	r17,r2
   88748:	003f6006 	br	884cc <__alt_data_end+0xfffd025c>
   8874c:	443f122e 	bgeu	r8,r16,88398 <__alt_data_end+0xfffd0128>
   88750:	8008d07a 	srli	r4,r16,1
   88754:	900497fa 	slli	r2,r18,31
   88758:	802c97fa 	slli	r22,r16,31
   8875c:	9006d07a 	srli	r3,r18,1
   88760:	20a0b03a 	or	r16,r4,r2
   88764:	003f1106 	br	883ac <__alt_data_end+0xfffd013c>
   88768:	e4bfa41e 	bne	fp,r18,885fc <__alt_data_end+0xfffd038c>
   8876c:	203f9e1e 	bne	r4,zero,885e8 <__alt_data_end+0xfffd0378>
   88770:	002f883a 	mov	r23,zero
   88774:	b93fa11e 	bne	r23,r4,885fc <__alt_data_end+0xfffd038c>
   88778:	003fa106 	br	88600 <__alt_data_end+0xfffd0390>
   8877c:	2cfff01e 	bne	r5,r19,88740 <__alt_data_end+0xfffd04d0>
   88780:	b5ffed2e 	bgeu	r22,r23,88738 <__alt_data_end+0xfffd04c8>
   88784:	9909c83a 	sub	r4,r19,r4
   88788:	1023883a 	mov	r17,r2
   8878c:	003f4f06 	br	884cc <__alt_data_end+0xfffd025c>
   88790:	1023883a 	mov	r17,r2
   88794:	003f3406 	br	88468 <__alt_data_end+0xfffd01f8>
   88798:	1025883a 	mov	r18,r2
   8879c:	003f1d06 	br	88414 <__alt_data_end+0xfffd01a4>
   887a0:	e4803a36 	bltu	fp,r18,8888c <__divdf3+0x828>
   887a4:	97005626 	beq	r18,fp,88900 <__divdf3+0x89c>
   887a8:	1011883a 	mov	r8,r2
   887ac:	003f9306 	br	885fc <__alt_data_end+0xfffd038c>
   887b0:	b4003036 	bltu	r22,r16,88874 <__divdf3+0x810>
   887b4:	1023883a 	mov	r17,r2
   887b8:	0009883a 	mov	r4,zero
   887bc:	003f4306 	br	884cc <__alt_data_end+0xfffd025c>
   887c0:	d8c00017 	ldw	r3,0(sp)
   887c4:	00bf0084 	movi	r2,-1022
   887c8:	10c5c83a 	sub	r2,r2,r3
   887cc:	00c00e04 	movi	r3,56
   887d0:	18800d0e 	bge	r3,r2,88808 <__divdf3+0x7a4>
   887d4:	a1c0004c 	andi	r7,r20,1
   887d8:	0005883a 	mov	r2,zero
   887dc:	0025883a 	mov	r18,zero
   887e0:	0021883a 	mov	r16,zero
   887e4:	003e8806 	br	88208 <__alt_data_end+0xfffcff98>
   887e8:	023fffc4 	movi	r8,-1
   887ec:	003f8406 	br	88600 <__alt_data_end+0xfffd0390>
   887f0:	102d883a 	mov	r22,r2
   887f4:	003f6706 	br	88594 <__alt_data_end+0xfffd0324>
   887f8:	1011883a 	mov	r8,r2
   887fc:	003f4c06 	br	88530 <__alt_data_end+0xfffd02c0>
   88800:	4829883a 	mov	r20,r9
   88804:	003f7e06 	br	88600 <__alt_data_end+0xfffd0390>
   88808:	00c007c4 	movi	r3,31
   8880c:	18802616 	blt	r3,r2,888a8 <__divdf3+0x844>
   88810:	d9000017 	ldw	r4,0(sp)
   88814:	408ad83a 	srl	r5,r8,r2
   88818:	8884d83a 	srl	r2,r17,r2
   8881c:	20c10784 	addi	r3,r4,1054
   88820:	88c8983a 	sll	r4,r17,r3
   88824:	40c6983a 	sll	r3,r8,r3
   88828:	2908b03a 	or	r4,r5,r4
   8882c:	1806c03a 	cmpne	r3,r3,zero
   88830:	20c6b03a 	or	r3,r4,r3
   88834:	190001cc 	andi	r4,r3,7
   88838:	20000726 	beq	r4,zero,88858 <__divdf3+0x7f4>
   8883c:	194003cc 	andi	r5,r3,15
   88840:	01000104 	movi	r4,4
   88844:	29000426 	beq	r5,r4,88858 <__divdf3+0x7f4>
   88848:	1909883a 	add	r4,r3,r4
   8884c:	20c7803a 	cmpltu	r3,r4,r3
   88850:	10c5883a 	add	r2,r2,r3
   88854:	2007883a 	mov	r3,r4
   88858:	1100202c 	andhi	r4,r2,128
   8885c:	20002026 	beq	r4,zero,888e0 <__divdf3+0x87c>
   88860:	a1c0004c 	andi	r7,r20,1
   88864:	00800044 	movi	r2,1
   88868:	0025883a 	mov	r18,zero
   8886c:	0021883a 	mov	r16,zero
   88870:	003e6506 	br	88208 <__alt_data_end+0xfffcff98>
   88874:	b5ed883a 	add	r22,r22,r23
   88878:	b5c5803a 	cmpltu	r2,r22,r23
   8887c:	14c5883a 	add	r2,r2,r19
   88880:	114b883a 	add	r5,r2,r5
   88884:	8c7fff84 	addi	r17,r17,-2
   88888:	003f0f06 	br	884c8 <__alt_data_end+0xfffd0258>
   8888c:	bdc7883a 	add	r3,r23,r23
   88890:	1def803a 	cmpltu	r23,r3,r23
   88894:	bce7883a 	add	r19,r23,r19
   88898:	40bfff84 	addi	r2,r8,-2
   8889c:	e4f9883a 	add	fp,fp,r19
   888a0:	182f883a 	mov	r23,r3
   888a4:	003f5306 	br	885f4 <__alt_data_end+0xfffd0384>
   888a8:	d9000017 	ldw	r4,0(sp)
   888ac:	00fef884 	movi	r3,-1054
   888b0:	1907c83a 	sub	r3,r3,r4
   888b4:	01000804 	movi	r4,32
   888b8:	88c6d83a 	srl	r3,r17,r3
   888bc:	11001426 	beq	r2,r4,88910 <__divdf3+0x8ac>
   888c0:	d9000017 	ldw	r4,0(sp)
   888c4:	20810f84 	addi	r2,r4,1086
   888c8:	8884983a 	sll	r2,r17,r2
   888cc:	1204b03a 	or	r2,r2,r8
   888d0:	1004c03a 	cmpne	r2,r2,zero
   888d4:	10c6b03a 	or	r3,r2,r3
   888d8:	0005883a 	mov	r2,zero
   888dc:	003fd506 	br	88834 <__alt_data_end+0xfffd05c4>
   888e0:	1020977a 	slli	r16,r2,29
   888e4:	1806d0fa 	srli	r3,r3,3
   888e8:	1004927a 	slli	r2,r2,9
   888ec:	a1c0004c 	andi	r7,r20,1
   888f0:	80e0b03a 	or	r16,r16,r3
   888f4:	1024d33a 	srli	r18,r2,12
   888f8:	0005883a 	mov	r2,zero
   888fc:	003e4206 	br	88208 <__alt_data_end+0xfffcff98>
   88900:	b93fe236 	bltu	r23,r4,8888c <__alt_data_end+0xfffd061c>
   88904:	1011883a 	mov	r8,r2
   88908:	b93f3c1e 	bne	r23,r4,885fc <__alt_data_end+0xfffd038c>
   8890c:	003f3c06 	br	88600 <__alt_data_end+0xfffd0390>
   88910:	0005883a 	mov	r2,zero
   88914:	003fed06 	br	888cc <__alt_data_end+0xfffd065c>
   88918:	00800434 	movhi	r2,16
   8891c:	10bfffc4 	addi	r2,r2,-1
   88920:	8c800234 	orhi	r18,r17,8
   88924:	90a4703a 	and	r18,r18,r2
   88928:	480f883a 	mov	r7,r9
   8892c:	4021883a 	mov	r16,r8
   88930:	0081ffc4 	movi	r2,2047
   88934:	003e3406 	br	88208 <__alt_data_end+0xfffcff98>

00088938 <__ledf2>:
   88938:	2806d53a 	srli	r3,r5,20
   8893c:	3810d53a 	srli	r8,r7,20
   88940:	00800434 	movhi	r2,16
   88944:	10bfffc4 	addi	r2,r2,-1
   88948:	18c1ffcc 	andi	r3,r3,2047
   8894c:	0241ffc4 	movi	r9,2047
   88950:	2894703a 	and	r10,r5,r2
   88954:	4201ffcc 	andi	r8,r8,2047
   88958:	3884703a 	and	r2,r7,r2
   8895c:	280ad7fa 	srli	r5,r5,31
   88960:	380ed7fa 	srli	r7,r7,31
   88964:	1a402026 	beq	r3,r9,889e8 <__ledf2+0xb0>
   88968:	0241ffc4 	movi	r9,2047
   8896c:	42401726 	beq	r8,r9,889cc <__ledf2+0x94>
   88970:	18000b26 	beq	r3,zero,889a0 <__ledf2+0x68>
   88974:	29403fcc 	andi	r5,r5,255
   88978:	39c03fcc 	andi	r7,r7,255
   8897c:	40000f1e 	bne	r8,zero,889bc <__ledf2+0x84>
   88980:	0017883a 	mov	r11,zero
   88984:	1192b03a 	or	r9,r2,r6
   88988:	4813003a 	cmpeq	r9,r9,zero
   8898c:	58001326 	beq	r11,zero,889dc <__ledf2+0xa4>
   88990:	48001e1e 	bne	r9,zero,88a0c <__ledf2+0xd4>
   88994:	38000b1e 	bne	r7,zero,889c4 <__ledf2+0x8c>
   88998:	00bfffc4 	movi	r2,-1
   8899c:	f800283a 	ret
   889a0:	5112b03a 	or	r9,r10,r4
   889a4:	4813003a 	cmpeq	r9,r9,zero
   889a8:	4817883a 	mov	r11,r9
   889ac:	29403fcc 	andi	r5,r5,255
   889b0:	39c03fcc 	andi	r7,r7,255
   889b4:	403ff326 	beq	r8,zero,88984 <__alt_data_end+0xfffd0714>
   889b8:	483ff61e 	bne	r9,zero,88994 <__alt_data_end+0xfffd0724>
   889bc:	29c00e26 	beq	r5,r7,889f8 <__ledf2+0xc0>
   889c0:	283ff51e 	bne	r5,zero,88998 <__alt_data_end+0xfffd0728>
   889c4:	00800044 	movi	r2,1
   889c8:	f800283a 	ret
   889cc:	1192b03a 	or	r9,r2,r6
   889d0:	483fe726 	beq	r9,zero,88970 <__alt_data_end+0xfffd0700>
   889d4:	00800084 	movi	r2,2
   889d8:	f800283a 	ret
   889dc:	483ff726 	beq	r9,zero,889bc <__alt_data_end+0xfffd074c>
   889e0:	283ff826 	beq	r5,zero,889c4 <__alt_data_end+0xfffd0754>
   889e4:	003fec06 	br	88998 <__alt_data_end+0xfffd0728>
   889e8:	5112b03a 	or	r9,r10,r4
   889ec:	483fde26 	beq	r9,zero,88968 <__alt_data_end+0xfffd06f8>
   889f0:	00800084 	movi	r2,2
   889f4:	f800283a 	ret
   889f8:	40fff116 	blt	r8,r3,889c0 <__alt_data_end+0xfffd0750>
   889fc:	1a000716 	blt	r3,r8,88a1c <__ledf2+0xe4>
   88a00:	12bfef36 	bltu	r2,r10,889c0 <__alt_data_end+0xfffd0750>
   88a04:	50800326 	beq	r10,r2,88a14 <__ledf2+0xdc>
   88a08:	50800436 	bltu	r10,r2,88a1c <__ledf2+0xe4>
   88a0c:	0005883a 	mov	r2,zero
   88a10:	f800283a 	ret
   88a14:	313fea36 	bltu	r6,r4,889c0 <__alt_data_end+0xfffd0750>
   88a18:	21bffc2e 	bgeu	r4,r6,88a0c <__alt_data_end+0xfffd079c>
   88a1c:	283fde26 	beq	r5,zero,88998 <__alt_data_end+0xfffd0728>
   88a20:	003fe806 	br	889c4 <__alt_data_end+0xfffd0754>

00088a24 <__muldf3>:
   88a24:	defff204 	addi	sp,sp,-56
   88a28:	dd000815 	stw	r20,32(sp)
   88a2c:	2828d53a 	srli	r20,r5,20
   88a30:	dc800615 	stw	r18,24(sp)
   88a34:	2824d7fa 	srli	r18,r5,31
   88a38:	ddc00b15 	stw	r23,44(sp)
   88a3c:	dd400915 	stw	r21,36(sp)
   88a40:	dcc00715 	stw	r19,28(sp)
   88a44:	dc400515 	stw	r17,20(sp)
   88a48:	dfc00d15 	stw	ra,52(sp)
   88a4c:	04400434 	movhi	r17,16
   88a50:	8c7fffc4 	addi	r17,r17,-1
   88a54:	df000c15 	stw	fp,48(sp)
   88a58:	dd800a15 	stw	r22,40(sp)
   88a5c:	dc000415 	stw	r16,16(sp)
   88a60:	a501ffcc 	andi	r20,r20,2047
   88a64:	2027883a 	mov	r19,r4
   88a68:	2c62703a 	and	r17,r5,r17
   88a6c:	902f883a 	mov	r23,r18
   88a70:	95403fcc 	andi	r21,r18,255
   88a74:	a0005d26 	beq	r20,zero,88bec <__muldf3+0x1c8>
   88a78:	0081ffc4 	movi	r2,2047
   88a7c:	2021883a 	mov	r16,r4
   88a80:	a0803326 	beq	r20,r2,88b50 <__muldf3+0x12c>
   88a84:	88800434 	orhi	r2,r17,16
   88a88:	100490fa 	slli	r2,r2,3
   88a8c:	2022d77a 	srli	r17,r4,29
   88a90:	202090fa 	slli	r16,r4,3
   88a94:	a53f0044 	addi	r20,r20,-1023
   88a98:	1462b03a 	or	r17,r2,r17
   88a9c:	0015883a 	mov	r10,zero
   88aa0:	0039883a 	mov	fp,zero
   88aa4:	3804d53a 	srli	r2,r7,20
   88aa8:	382cd7fa 	srli	r22,r7,31
   88aac:	04c00434 	movhi	r19,16
   88ab0:	9cffffc4 	addi	r19,r19,-1
   88ab4:	1081ffcc 	andi	r2,r2,2047
   88ab8:	300b883a 	mov	r5,r6
   88abc:	3ce6703a 	and	r19,r7,r19
   88ac0:	b2403fcc 	andi	r9,r22,255
   88ac4:	10006626 	beq	r2,zero,88c60 <__muldf3+0x23c>
   88ac8:	00c1ffc4 	movi	r3,2047
   88acc:	10c05e26 	beq	r2,r3,88c48 <__muldf3+0x224>
   88ad0:	98c00434 	orhi	r3,r19,16
   88ad4:	180690fa 	slli	r3,r3,3
   88ad8:	3026d77a 	srli	r19,r6,29
   88adc:	300a90fa 	slli	r5,r6,3
   88ae0:	10bf0044 	addi	r2,r2,-1023
   88ae4:	1ce6b03a 	or	r19,r3,r19
   88ae8:	0007883a 	mov	r3,zero
   88aec:	1a88b03a 	or	r4,r3,r10
   88af0:	2109883a 	add	r4,r4,r4
   88af4:	2109883a 	add	r4,r4,r4
   88af8:	01800274 	movhi	r6,9
   88afc:	31a2c404 	addi	r6,r6,-29936
   88b00:	2189883a 	add	r4,r4,r6
   88b04:	21000017 	ldw	r4,0(r4)
   88b08:	95a4f03a 	xor	r18,r18,r22
   88b0c:	2000683a 	jmp	r4
   88b10:	00088d48 	cmpgei	zero,zero,8757
   88b14:	00088d38 	rdprs	zero,zero,8756
   88b18:	00088d38 	rdprs	zero,zero,8756
   88b1c:	00088d24 	muli	zero,zero,8756
   88b20:	00088b70 	cmpltui	zero,zero,8749
   88b24:	00088b70 	cmpltui	zero,zero,8749
   88b28:	00088d0c 	andi	zero,zero,8756
   88b2c:	00088d24 	muli	zero,zero,8756
   88b30:	00088b70 	cmpltui	zero,zero,8749
   88b34:	00088d0c 	andi	zero,zero,8756
   88b38:	00088b70 	cmpltui	zero,zero,8749
   88b3c:	00088d24 	muli	zero,zero,8756
   88b40:	00088b6c 	andhi	zero,zero,8749
   88b44:	00088b6c 	andhi	zero,zero,8749
   88b48:	00088b6c 	andhi	zero,zero,8749
   88b4c:	00088f68 	cmpgeui	zero,zero,8765
   88b50:	8904b03a 	or	r2,r17,r4
   88b54:	10006a1e 	bne	r2,zero,88d00 <__muldf3+0x2dc>
   88b58:	02800204 	movi	r10,8
   88b5c:	0023883a 	mov	r17,zero
   88b60:	0021883a 	mov	r16,zero
   88b64:	07000084 	movi	fp,2
   88b68:	003fce06 	br	88aa4 <__alt_data_end+0xfffd0834>
   88b6c:	a825883a 	mov	r18,r21
   88b70:	00800084 	movi	r2,2
   88b74:	e0805226 	beq	fp,r2,88cc0 <__muldf3+0x29c>
   88b78:	008000c4 	movi	r2,3
   88b7c:	e0815d26 	beq	fp,r2,890f4 <__muldf3+0x6d0>
   88b80:	00800044 	movi	r2,1
   88b84:	e080db1e 	bne	fp,r2,88ef4 <__muldf3+0x4d0>
   88b88:	902f883a 	mov	r23,r18
   88b8c:	0005883a 	mov	r2,zero
   88b90:	0023883a 	mov	r17,zero
   88b94:	0021883a 	mov	r16,zero
   88b98:	1004953a 	slli	r2,r2,20
   88b9c:	bdc03fcc 	andi	r23,r23,255
   88ba0:	b82e97fa 	slli	r23,r23,31
   88ba4:	00c00434 	movhi	r3,16
   88ba8:	18ffffc4 	addi	r3,r3,-1
   88bac:	88e2703a 	and	r17,r17,r3
   88bb0:	8886b03a 	or	r3,r17,r2
   88bb4:	1dc6b03a 	or	r3,r3,r23
   88bb8:	8005883a 	mov	r2,r16
   88bbc:	dfc00d17 	ldw	ra,52(sp)
   88bc0:	df000c17 	ldw	fp,48(sp)
   88bc4:	ddc00b17 	ldw	r23,44(sp)
   88bc8:	dd800a17 	ldw	r22,40(sp)
   88bcc:	dd400917 	ldw	r21,36(sp)
   88bd0:	dd000817 	ldw	r20,32(sp)
   88bd4:	dcc00717 	ldw	r19,28(sp)
   88bd8:	dc800617 	ldw	r18,24(sp)
   88bdc:	dc400517 	ldw	r17,20(sp)
   88be0:	dc000417 	ldw	r16,16(sp)
   88be4:	dec00e04 	addi	sp,sp,56
   88be8:	f800283a 	ret
   88bec:	8904b03a 	or	r2,r17,r4
   88bf0:	10003e26 	beq	r2,zero,88cec <__muldf3+0x2c8>
   88bf4:	8800f226 	beq	r17,zero,88fc0 <__muldf3+0x59c>
   88bf8:	8809883a 	mov	r4,r17
   88bfc:	d9800315 	stw	r6,12(sp)
   88c00:	d9c00115 	stw	r7,4(sp)
   88c04:	0089ae80 	call	89ae8 <__clzsi2>
   88c08:	d9800317 	ldw	r6,12(sp)
   88c0c:	d9c00117 	ldw	r7,4(sp)
   88c10:	00c009c4 	movi	r3,39
   88c14:	1880e616 	blt	r3,r2,88fb0 <__muldf3+0x58c>
   88c18:	00c00a04 	movi	r3,40
   88c1c:	143ffe04 	addi	r16,r2,-8
   88c20:	1887c83a 	sub	r3,r3,r2
   88c24:	8c22983a 	sll	r17,r17,r16
   88c28:	98c6d83a 	srl	r3,r19,r3
   88c2c:	9c20983a 	sll	r16,r19,r16
   88c30:	1c62b03a 	or	r17,r3,r17
   88c34:	053f0344 	movi	r20,-1011
   88c38:	a0a9c83a 	sub	r20,r20,r2
   88c3c:	0015883a 	mov	r10,zero
   88c40:	0039883a 	mov	fp,zero
   88c44:	003f9706 	br	88aa4 <__alt_data_end+0xfffd0834>
   88c48:	9986b03a 	or	r3,r19,r6
   88c4c:	1800251e 	bne	r3,zero,88ce4 <__muldf3+0x2c0>
   88c50:	0027883a 	mov	r19,zero
   88c54:	000b883a 	mov	r5,zero
   88c58:	00c00084 	movi	r3,2
   88c5c:	003fa306 	br	88aec <__alt_data_end+0xfffd087c>
   88c60:	9986b03a 	or	r3,r19,r6
   88c64:	18001b26 	beq	r3,zero,88cd4 <__muldf3+0x2b0>
   88c68:	9800e026 	beq	r19,zero,88fec <__muldf3+0x5c8>
   88c6c:	9809883a 	mov	r4,r19
   88c70:	d9800315 	stw	r6,12(sp)
   88c74:	da400115 	stw	r9,4(sp)
   88c78:	da800215 	stw	r10,8(sp)
   88c7c:	0089ae80 	call	89ae8 <__clzsi2>
   88c80:	d9800317 	ldw	r6,12(sp)
   88c84:	da400117 	ldw	r9,4(sp)
   88c88:	da800217 	ldw	r10,8(sp)
   88c8c:	00c009c4 	movi	r3,39
   88c90:	1880d216 	blt	r3,r2,88fdc <__muldf3+0x5b8>
   88c94:	01c00a04 	movi	r7,40
   88c98:	117ffe04 	addi	r5,r2,-8
   88c9c:	388fc83a 	sub	r7,r7,r2
   88ca0:	9966983a 	sll	r19,r19,r5
   88ca4:	31ced83a 	srl	r7,r6,r7
   88ca8:	314a983a 	sll	r5,r6,r5
   88cac:	3ce6b03a 	or	r19,r7,r19
   88cb0:	00ff0344 	movi	r3,-1011
   88cb4:	1885c83a 	sub	r2,r3,r2
   88cb8:	0007883a 	mov	r3,zero
   88cbc:	003f8b06 	br	88aec <__alt_data_end+0xfffd087c>
   88cc0:	902f883a 	mov	r23,r18
   88cc4:	0081ffc4 	movi	r2,2047
   88cc8:	0023883a 	mov	r17,zero
   88ccc:	0021883a 	mov	r16,zero
   88cd0:	003fb106 	br	88b98 <__alt_data_end+0xfffd0928>
   88cd4:	0027883a 	mov	r19,zero
   88cd8:	000b883a 	mov	r5,zero
   88cdc:	00c00044 	movi	r3,1
   88ce0:	003f8206 	br	88aec <__alt_data_end+0xfffd087c>
   88ce4:	00c000c4 	movi	r3,3
   88ce8:	003f8006 	br	88aec <__alt_data_end+0xfffd087c>
   88cec:	02800104 	movi	r10,4
   88cf0:	0023883a 	mov	r17,zero
   88cf4:	0021883a 	mov	r16,zero
   88cf8:	07000044 	movi	fp,1
   88cfc:	003f6906 	br	88aa4 <__alt_data_end+0xfffd0834>
   88d00:	02800304 	movi	r10,12
   88d04:	070000c4 	movi	fp,3
   88d08:	003f6606 	br	88aa4 <__alt_data_end+0xfffd0834>
   88d0c:	002f883a 	mov	r23,zero
   88d10:	04400434 	movhi	r17,16
   88d14:	8c7fffc4 	addi	r17,r17,-1
   88d18:	043fffc4 	movi	r16,-1
   88d1c:	0081ffc4 	movi	r2,2047
   88d20:	003f9d06 	br	88b98 <__alt_data_end+0xfffd0928>
   88d24:	9823883a 	mov	r17,r19
   88d28:	2821883a 	mov	r16,r5
   88d2c:	4825883a 	mov	r18,r9
   88d30:	1839883a 	mov	fp,r3
   88d34:	003f8e06 	br	88b70 <__alt_data_end+0xfffd0900>
   88d38:	9823883a 	mov	r17,r19
   88d3c:	2821883a 	mov	r16,r5
   88d40:	1839883a 	mov	fp,r3
   88d44:	003f8a06 	br	88b70 <__alt_data_end+0xfffd0900>
   88d48:	800cd43a 	srli	r6,r16,16
   88d4c:	2808d43a 	srli	r4,r5,16
   88d50:	843fffcc 	andi	r16,r16,65535
   88d54:	297fffcc 	andi	r5,r5,65535
   88d58:	2c15383a 	mul	r10,r5,r16
   88d5c:	2411383a 	mul	r8,r4,r16
   88d60:	2987383a 	mul	r3,r5,r6
   88d64:	500ed43a 	srli	r7,r10,16
   88d68:	a085883a 	add	r2,r20,r2
   88d6c:	d8800015 	stw	r2,0(sp)
   88d70:	1a05883a 	add	r2,r3,r8
   88d74:	11c5883a 	add	r2,r2,r7
   88d78:	2197383a 	mul	r11,r4,r6
   88d7c:	10c0022e 	bgeu	r2,r3,88d88 <__muldf3+0x364>
   88d80:	00c00074 	movhi	r3,1
   88d84:	58d7883a 	add	r11,r11,r3
   88d88:	9806d43a 	srli	r3,r19,16
   88d8c:	9cffffcc 	andi	r19,r19,65535
   88d90:	9c13383a 	mul	r9,r19,r16
   88d94:	9991383a 	mul	r8,r19,r6
   88d98:	1c21383a 	mul	r16,r3,r16
   88d9c:	481ad43a 	srli	r13,r9,16
   88da0:	1018943a 	slli	r12,r2,16
   88da4:	440f883a 	add	r7,r8,r16
   88da8:	52bfffcc 	andi	r10,r10,65535
   88dac:	3b4f883a 	add	r7,r7,r13
   88db0:	1020d43a 	srli	r16,r2,16
   88db4:	6299883a 	add	r12,r12,r10
   88db8:	198d383a 	mul	r6,r3,r6
   88dbc:	3a00022e 	bgeu	r7,r8,88dc8 <__muldf3+0x3a4>
   88dc0:	00800074 	movhi	r2,1
   88dc4:	308d883a 	add	r6,r6,r2
   88dc8:	8804d43a 	srli	r2,r17,16
   88dcc:	8c7fffcc 	andi	r17,r17,65535
   88dd0:	2c55383a 	mul	r10,r5,r17
   88dd4:	2451383a 	mul	r8,r4,r17
   88dd8:	288b383a 	mul	r5,r5,r2
   88ddc:	501cd43a 	srli	r14,r10,16
   88de0:	381ad43a 	srli	r13,r7,16
   88de4:	380e943a 	slli	r7,r7,16
   88de8:	2a11883a 	add	r8,r5,r8
   88dec:	4a7fffcc 	andi	r9,r9,65535
   88df0:	4391883a 	add	r8,r8,r14
   88df4:	334d883a 	add	r6,r6,r13
   88df8:	3a4f883a 	add	r7,r7,r9
   88dfc:	2089383a 	mul	r4,r4,r2
   88e00:	4140022e 	bgeu	r8,r5,88e0c <__muldf3+0x3e8>
   88e04:	01400074 	movhi	r5,1
   88e08:	2149883a 	add	r4,r4,r5
   88e0c:	9c53383a 	mul	r9,r19,r17
   88e10:	1c63383a 	mul	r17,r3,r17
   88e14:	98a7383a 	mul	r19,r19,r2
   88e18:	481cd43a 	srli	r14,r9,16
   88e1c:	401ad43a 	srli	r13,r8,16
   88e20:	4010943a 	slli	r8,r8,16
   88e24:	9c4b883a 	add	r5,r19,r17
   88e28:	52bfffcc 	andi	r10,r10,65535
   88e2c:	2b8b883a 	add	r5,r5,r14
   88e30:	2349883a 	add	r4,r4,r13
   88e34:	4291883a 	add	r8,r8,r10
   88e38:	1887383a 	mul	r3,r3,r2
   88e3c:	2cc0022e 	bgeu	r5,r19,88e48 <__muldf3+0x424>
   88e40:	00800074 	movhi	r2,1
   88e44:	1887883a 	add	r3,r3,r2
   88e48:	2814943a 	slli	r10,r5,16
   88e4c:	3c21883a 	add	r16,r7,r16
   88e50:	4a7fffcc 	andi	r9,r9,65535
   88e54:	82e1883a 	add	r16,r16,r11
   88e58:	5255883a 	add	r10,r10,r9
   88e5c:	81cf803a 	cmpltu	r7,r16,r7
   88e60:	5195883a 	add	r10,r10,r6
   88e64:	8221883a 	add	r16,r16,r8
   88e68:	51d7883a 	add	r11,r10,r7
   88e6c:	8211803a 	cmpltu	r8,r16,r8
   88e70:	2804d43a 	srli	r2,r5,16
   88e74:	22d3883a 	add	r9,r4,r11
   88e78:	4a0b883a 	add	r5,r9,r8
   88e7c:	518d803a 	cmpltu	r6,r10,r6
   88e80:	59e3803a 	cmpltu	r17,r11,r7
   88e84:	89a2b03a 	or	r17,r17,r6
   88e88:	2a11803a 	cmpltu	r8,r5,r8
   88e8c:	4909803a 	cmpltu	r4,r9,r4
   88e90:	88a3883a 	add	r17,r17,r2
   88e94:	4108b03a 	or	r4,r8,r4
   88e98:	8923883a 	add	r17,r17,r4
   88e9c:	800c927a 	slli	r6,r16,9
   88ea0:	88c7883a 	add	r3,r17,r3
   88ea4:	2808d5fa 	srli	r4,r5,23
   88ea8:	1822927a 	slli	r17,r3,9
   88eac:	8020d5fa 	srli	r16,r16,23
   88eb0:	3318b03a 	or	r12,r6,r12
   88eb4:	280a927a 	slli	r5,r5,9
   88eb8:	8922b03a 	or	r17,r17,r4
   88ebc:	6018c03a 	cmpne	r12,r12,zero
   88ec0:	6420b03a 	or	r16,r12,r16
   88ec4:	8880402c 	andhi	r2,r17,256
   88ec8:	8160b03a 	or	r16,r16,r5
   88ecc:	10000926 	beq	r2,zero,88ef4 <__muldf3+0x4d0>
   88ed0:	8006d07a 	srli	r3,r16,1
   88ed4:	8400004c 	andi	r16,r16,1
   88ed8:	880497fa 	slli	r2,r17,31
   88edc:	80e0b03a 	or	r16,r16,r3
   88ee0:	d8c00017 	ldw	r3,0(sp)
   88ee4:	8822d07a 	srli	r17,r17,1
   88ee8:	80a0b03a 	or	r16,r16,r2
   88eec:	18c00044 	addi	r3,r3,1
   88ef0:	d8c00015 	stw	r3,0(sp)
   88ef4:	d8c00017 	ldw	r3,0(sp)
   88ef8:	1880ffc4 	addi	r2,r3,1023
   88efc:	0080450e 	bge	zero,r2,89014 <__muldf3+0x5f0>
   88f00:	80c001cc 	andi	r3,r16,7
   88f04:	18000726 	beq	r3,zero,88f24 <__muldf3+0x500>
   88f08:	810003cc 	andi	r4,r16,15
   88f0c:	00c00104 	movi	r3,4
   88f10:	20c00426 	beq	r4,r3,88f24 <__muldf3+0x500>
   88f14:	80c7883a 	add	r3,r16,r3
   88f18:	1c21803a 	cmpltu	r16,r3,r16
   88f1c:	8c23883a 	add	r17,r17,r16
   88f20:	1821883a 	mov	r16,r3
   88f24:	88c0402c 	andhi	r3,r17,256
   88f28:	18000526 	beq	r3,zero,88f40 <__muldf3+0x51c>
   88f2c:	d8c00017 	ldw	r3,0(sp)
   88f30:	00bfc034 	movhi	r2,65280
   88f34:	10bfffc4 	addi	r2,r2,-1
   88f38:	88a2703a 	and	r17,r17,r2
   88f3c:	18810004 	addi	r2,r3,1024
   88f40:	00c1ff84 	movi	r3,2046
   88f44:	18bf5e16 	blt	r3,r2,88cc0 <__alt_data_end+0xfffd0a50>
   88f48:	8806977a 	slli	r3,r17,29
   88f4c:	8020d0fa 	srli	r16,r16,3
   88f50:	8822927a 	slli	r17,r17,9
   88f54:	1081ffcc 	andi	r2,r2,2047
   88f58:	1c20b03a 	or	r16,r3,r16
   88f5c:	8822d33a 	srli	r17,r17,12
   88f60:	902f883a 	mov	r23,r18
   88f64:	003f0c06 	br	88b98 <__alt_data_end+0xfffd0928>
   88f68:	8880022c 	andhi	r2,r17,8
   88f6c:	10000a26 	beq	r2,zero,88f98 <__muldf3+0x574>
   88f70:	9880022c 	andhi	r2,r19,8
   88f74:	1000081e 	bne	r2,zero,88f98 <__muldf3+0x574>
   88f78:	00800434 	movhi	r2,16
   88f7c:	10bfffc4 	addi	r2,r2,-1
   88f80:	9c400234 	orhi	r17,r19,8
   88f84:	88a2703a 	and	r17,r17,r2
   88f88:	b02f883a 	mov	r23,r22
   88f8c:	2821883a 	mov	r16,r5
   88f90:	0081ffc4 	movi	r2,2047
   88f94:	003f0006 	br	88b98 <__alt_data_end+0xfffd0928>
   88f98:	00800434 	movhi	r2,16
   88f9c:	10bfffc4 	addi	r2,r2,-1
   88fa0:	8c400234 	orhi	r17,r17,8
   88fa4:	88a2703a 	and	r17,r17,r2
   88fa8:	0081ffc4 	movi	r2,2047
   88fac:	003efa06 	br	88b98 <__alt_data_end+0xfffd0928>
   88fb0:	147ff604 	addi	r17,r2,-40
   88fb4:	9c62983a 	sll	r17,r19,r17
   88fb8:	0021883a 	mov	r16,zero
   88fbc:	003f1d06 	br	88c34 <__alt_data_end+0xfffd09c4>
   88fc0:	d9800315 	stw	r6,12(sp)
   88fc4:	d9c00115 	stw	r7,4(sp)
   88fc8:	0089ae80 	call	89ae8 <__clzsi2>
   88fcc:	10800804 	addi	r2,r2,32
   88fd0:	d9c00117 	ldw	r7,4(sp)
   88fd4:	d9800317 	ldw	r6,12(sp)
   88fd8:	003f0d06 	br	88c10 <__alt_data_end+0xfffd09a0>
   88fdc:	14fff604 	addi	r19,r2,-40
   88fe0:	34e6983a 	sll	r19,r6,r19
   88fe4:	000b883a 	mov	r5,zero
   88fe8:	003f3106 	br	88cb0 <__alt_data_end+0xfffd0a40>
   88fec:	3009883a 	mov	r4,r6
   88ff0:	d9800315 	stw	r6,12(sp)
   88ff4:	da400115 	stw	r9,4(sp)
   88ff8:	da800215 	stw	r10,8(sp)
   88ffc:	0089ae80 	call	89ae8 <__clzsi2>
   89000:	10800804 	addi	r2,r2,32
   89004:	da800217 	ldw	r10,8(sp)
   89008:	da400117 	ldw	r9,4(sp)
   8900c:	d9800317 	ldw	r6,12(sp)
   89010:	003f1e06 	br	88c8c <__alt_data_end+0xfffd0a1c>
   89014:	d8c00017 	ldw	r3,0(sp)
   89018:	00bf0084 	movi	r2,-1022
   8901c:	10c5c83a 	sub	r2,r2,r3
   89020:	00c00e04 	movi	r3,56
   89024:	18bed816 	blt	r3,r2,88b88 <__alt_data_end+0xfffd0918>
   89028:	00c007c4 	movi	r3,31
   8902c:	18801916 	blt	r3,r2,89094 <__muldf3+0x670>
   89030:	d8c00017 	ldw	r3,0(sp)
   89034:	808ad83a 	srl	r5,r16,r2
   89038:	8884d83a 	srl	r2,r17,r2
   8903c:	1d410784 	addi	r21,r3,1054
   89040:	8d48983a 	sll	r4,r17,r21
   89044:	8546983a 	sll	r3,r16,r21
   89048:	2908b03a 	or	r4,r5,r4
   8904c:	1806c03a 	cmpne	r3,r3,zero
   89050:	20c6b03a 	or	r3,r4,r3
   89054:	190001cc 	andi	r4,r3,7
   89058:	20000726 	beq	r4,zero,89078 <__muldf3+0x654>
   8905c:	194003cc 	andi	r5,r3,15
   89060:	01000104 	movi	r4,4
   89064:	29000426 	beq	r5,r4,89078 <__muldf3+0x654>
   89068:	1909883a 	add	r4,r3,r4
   8906c:	20c7803a 	cmpltu	r3,r4,r3
   89070:	10c5883a 	add	r2,r2,r3
   89074:	2007883a 	mov	r3,r4
   89078:	1100202c 	andhi	r4,r2,128
   8907c:	20001326 	beq	r4,zero,890cc <__muldf3+0x6a8>
   89080:	902f883a 	mov	r23,r18
   89084:	00800044 	movi	r2,1
   89088:	0023883a 	mov	r17,zero
   8908c:	0021883a 	mov	r16,zero
   89090:	003ec106 	br	88b98 <__alt_data_end+0xfffd0928>
   89094:	d9000017 	ldw	r4,0(sp)
   89098:	00fef884 	movi	r3,-1054
   8909c:	1907c83a 	sub	r3,r3,r4
   890a0:	01000804 	movi	r4,32
   890a4:	88c6d83a 	srl	r3,r17,r3
   890a8:	11001026 	beq	r2,r4,890ec <__muldf3+0x6c8>
   890ac:	d9000017 	ldw	r4,0(sp)
   890b0:	20810f84 	addi	r2,r4,1086
   890b4:	8884983a 	sll	r2,r17,r2
   890b8:	1404b03a 	or	r2,r2,r16
   890bc:	1004c03a 	cmpne	r2,r2,zero
   890c0:	10c6b03a 	or	r3,r2,r3
   890c4:	0005883a 	mov	r2,zero
   890c8:	003fe206 	br	89054 <__alt_data_end+0xfffd0de4>
   890cc:	1020977a 	slli	r16,r2,29
   890d0:	1806d0fa 	srli	r3,r3,3
   890d4:	1004927a 	slli	r2,r2,9
   890d8:	902f883a 	mov	r23,r18
   890dc:	80e0b03a 	or	r16,r16,r3
   890e0:	1022d33a 	srli	r17,r2,12
   890e4:	0005883a 	mov	r2,zero
   890e8:	003eab06 	br	88b98 <__alt_data_end+0xfffd0928>
   890ec:	0005883a 	mov	r2,zero
   890f0:	003ff106 	br	890b8 <__alt_data_end+0xfffd0e48>
   890f4:	00800434 	movhi	r2,16
   890f8:	10bfffc4 	addi	r2,r2,-1
   890fc:	8c400234 	orhi	r17,r17,8
   89100:	88a2703a 	and	r17,r17,r2
   89104:	902f883a 	mov	r23,r18
   89108:	0081ffc4 	movi	r2,2047
   8910c:	003ea206 	br	88b98 <__alt_data_end+0xfffd0928>

00089110 <__subdf3>:
   89110:	02000434 	movhi	r8,16
   89114:	423fffc4 	addi	r8,r8,-1
   89118:	defffb04 	addi	sp,sp,-20
   8911c:	2a06703a 	and	r3,r5,r8
   89120:	3a10703a 	and	r8,r7,r8
   89124:	3804d53a 	srli	r2,r7,20
   89128:	dc800215 	stw	r18,8(sp)
   8912c:	dc400115 	stw	r17,4(sp)
   89130:	2824d7fa 	srli	r18,r5,31
   89134:	2822d53a 	srli	r17,r5,20
   89138:	401090fa 	slli	r8,r8,3
   8913c:	180a90fa 	slli	r5,r3,3
   89140:	3006d77a 	srli	r3,r6,29
   89144:	2014d77a 	srli	r10,r4,29
   89148:	dc000015 	stw	r16,0(sp)
   8914c:	40d0b03a 	or	r8,r8,r3
   89150:	dfc00415 	stw	ra,16(sp)
   89154:	dcc00315 	stw	r19,12(sp)
   89158:	1081ffcc 	andi	r2,r2,2047
   8915c:	00c1ffc4 	movi	r3,2047
   89160:	9013883a 	mov	r9,r18
   89164:	8c41ffcc 	andi	r17,r17,2047
   89168:	94803fcc 	andi	r18,r18,255
   8916c:	2a8ab03a 	or	r5,r5,r10
   89170:	202090fa 	slli	r16,r4,3
   89174:	380ed7fa 	srli	r7,r7,31
   89178:	300c90fa 	slli	r6,r6,3
   8917c:	10c02e26 	beq	r2,r3,89238 <__subdf3+0x128>
   89180:	39c0005c 	xori	r7,r7,1
   89184:	8887c83a 	sub	r3,r17,r2
   89188:	91c03026 	beq	r18,r7,8924c <__subdf3+0x13c>
   8918c:	00c0a40e 	bge	zero,r3,89420 <__subdf3+0x310>
   89190:	10004c1e 	bne	r2,zero,892c4 <__subdf3+0x1b4>
   89194:	4184b03a 	or	r2,r8,r6
   89198:	10008f1e 	bne	r2,zero,893d8 <__subdf3+0x2c8>
   8919c:	808001cc 	andi	r2,r16,7
   891a0:	10007d26 	beq	r2,zero,89398 <__subdf3+0x288>
   891a4:	80c003cc 	andi	r3,r16,15
   891a8:	00800104 	movi	r2,4
   891ac:	18807a26 	beq	r3,r2,89398 <__subdf3+0x288>
   891b0:	80c00104 	addi	r3,r16,4
   891b4:	1c21803a 	cmpltu	r16,r3,r16
   891b8:	2c0b883a 	add	r5,r5,r16
   891bc:	2880202c 	andhi	r2,r5,128
   891c0:	9240004c 	andi	r9,r18,1
   891c4:	1821883a 	mov	r16,r3
   891c8:	10007626 	beq	r2,zero,893a4 <__subdf3+0x294>
   891cc:	8c400044 	addi	r17,r17,1
   891d0:	0081ffc4 	movi	r2,2047
   891d4:	8880b226 	beq	r17,r2,894a0 <__subdf3+0x390>
   891d8:	00bfe034 	movhi	r2,65408
   891dc:	10bfffc4 	addi	r2,r2,-1
   891e0:	288a703a 	and	r5,r5,r2
   891e4:	2804977a 	slli	r2,r5,29
   891e8:	280a927a 	slli	r5,r5,9
   891ec:	8020d0fa 	srli	r16,r16,3
   891f0:	280ad33a 	srli	r5,r5,12
   891f4:	1404b03a 	or	r2,r2,r16
   891f8:	8c41ffcc 	andi	r17,r17,2047
   891fc:	8822953a 	slli	r17,r17,20
   89200:	4a403fcc 	andi	r9,r9,255
   89204:	481297fa 	slli	r9,r9,31
   89208:	00c00434 	movhi	r3,16
   8920c:	18ffffc4 	addi	r3,r3,-1
   89210:	28c6703a 	and	r3,r5,r3
   89214:	1c46b03a 	or	r3,r3,r17
   89218:	1a46b03a 	or	r3,r3,r9
   8921c:	dfc00417 	ldw	ra,16(sp)
   89220:	dcc00317 	ldw	r19,12(sp)
   89224:	dc800217 	ldw	r18,8(sp)
   89228:	dc400117 	ldw	r17,4(sp)
   8922c:	dc000017 	ldw	r16,0(sp)
   89230:	dec00504 	addi	sp,sp,20
   89234:	f800283a 	ret
   89238:	4186b03a 	or	r3,r8,r6
   8923c:	183fd026 	beq	r3,zero,89180 <__alt_data_end+0xfffd0f10>
   89240:	39c03fcc 	andi	r7,r7,255
   89244:	8887c83a 	sub	r3,r17,r2
   89248:	91ffd01e 	bne	r18,r7,8918c <__alt_data_end+0xfffd0f1c>
   8924c:	00c09b0e 	bge	zero,r3,894bc <__subdf3+0x3ac>
   89250:	10006926 	beq	r2,zero,893f8 <__subdf3+0x2e8>
   89254:	0081ffc4 	movi	r2,2047
   89258:	88bfd026 	beq	r17,r2,8919c <__alt_data_end+0xfffd0f2c>
   8925c:	42002034 	orhi	r8,r8,128
   89260:	00800e04 	movi	r2,56
   89264:	10c0e20e 	bge	r2,r3,895f0 <__subdf3+0x4e0>
   89268:	418cb03a 	or	r6,r8,r6
   8926c:	300cc03a 	cmpne	r6,r6,zero
   89270:	0007883a 	mov	r3,zero
   89274:	340d883a 	add	r6,r6,r16
   89278:	3421803a 	cmpltu	r16,r6,r16
   8927c:	194b883a 	add	r5,r3,r5
   89280:	2c0b883a 	add	r5,r5,r16
   89284:	3021883a 	mov	r16,r6
   89288:	2880202c 	andhi	r2,r5,128
   8928c:	103fc326 	beq	r2,zero,8919c <__alt_data_end+0xfffd0f2c>
   89290:	8c400044 	addi	r17,r17,1
   89294:	0081ffc4 	movi	r2,2047
   89298:	88811026 	beq	r17,r2,896dc <__subdf3+0x5cc>
   8929c:	00bfe034 	movhi	r2,65408
   892a0:	10bfffc4 	addi	r2,r2,-1
   892a4:	288a703a 	and	r5,r5,r2
   892a8:	8006d07a 	srli	r3,r16,1
   892ac:	280497fa 	slli	r2,r5,31
   892b0:	8400004c 	andi	r16,r16,1
   892b4:	80e0b03a 	or	r16,r16,r3
   892b8:	80a0b03a 	or	r16,r16,r2
   892bc:	280ad07a 	srli	r5,r5,1
   892c0:	003fb606 	br	8919c <__alt_data_end+0xfffd0f2c>
   892c4:	0081ffc4 	movi	r2,2047
   892c8:	88bfb426 	beq	r17,r2,8919c <__alt_data_end+0xfffd0f2c>
   892cc:	42002034 	orhi	r8,r8,128
   892d0:	00800e04 	movi	r2,56
   892d4:	10c07516 	blt	r2,r3,894ac <__subdf3+0x39c>
   892d8:	008007c4 	movi	r2,31
   892dc:	10c09816 	blt	r2,r3,89540 <__subdf3+0x430>
   892e0:	00800804 	movi	r2,32
   892e4:	10c5c83a 	sub	r2,r2,r3
   892e8:	30c8d83a 	srl	r4,r6,r3
   892ec:	408e983a 	sll	r7,r8,r2
   892f0:	3084983a 	sll	r2,r6,r2
   892f4:	40c6d83a 	srl	r3,r8,r3
   892f8:	3908b03a 	or	r4,r7,r4
   892fc:	1004c03a 	cmpne	r2,r2,zero
   89300:	208cb03a 	or	r6,r4,r2
   89304:	818dc83a 	sub	r6,r16,r6
   89308:	81a1803a 	cmpltu	r16,r16,r6
   8930c:	28cbc83a 	sub	r5,r5,r3
   89310:	2c0bc83a 	sub	r5,r5,r16
   89314:	3021883a 	mov	r16,r6
   89318:	2880202c 	andhi	r2,r5,128
   8931c:	103f9f26 	beq	r2,zero,8919c <__alt_data_end+0xfffd0f2c>
   89320:	04c02034 	movhi	r19,128
   89324:	9cffffc4 	addi	r19,r19,-1
   89328:	2ce6703a 	and	r19,r5,r19
   8932c:	98004d26 	beq	r19,zero,89464 <__subdf3+0x354>
   89330:	9809883a 	mov	r4,r19
   89334:	0089ae80 	call	89ae8 <__clzsi2>
   89338:	10fffe04 	addi	r3,r2,-8
   8933c:	010007c4 	movi	r4,31
   89340:	20c04e16 	blt	r4,r3,8947c <__subdf3+0x36c>
   89344:	01000a04 	movi	r4,40
   89348:	2085c83a 	sub	r2,r4,r2
   8934c:	8084d83a 	srl	r2,r16,r2
   89350:	98e6983a 	sll	r19,r19,r3
   89354:	80e0983a 	sll	r16,r16,r3
   89358:	14c4b03a 	or	r2,r2,r19
   8935c:	1c404b16 	blt	r3,r17,8948c <__subdf3+0x37c>
   89360:	1c63c83a 	sub	r17,r3,r17
   89364:	89400044 	addi	r5,r17,1
   89368:	00c007c4 	movi	r3,31
   8936c:	19406716 	blt	r3,r5,8950c <__subdf3+0x3fc>
   89370:	1c47c83a 	sub	r3,r3,r17
   89374:	8148d83a 	srl	r4,r16,r5
   89378:	80e0983a 	sll	r16,r16,r3
   8937c:	10c6983a 	sll	r3,r2,r3
   89380:	114ad83a 	srl	r5,r2,r5
   89384:	8004c03a 	cmpne	r2,r16,zero
   89388:	20e0b03a 	or	r16,r4,r3
   8938c:	80a0b03a 	or	r16,r16,r2
   89390:	0023883a 	mov	r17,zero
   89394:	003f8106 	br	8919c <__alt_data_end+0xfffd0f2c>
   89398:	2880202c 	andhi	r2,r5,128
   8939c:	9240004c 	andi	r9,r18,1
   893a0:	103f8a1e 	bne	r2,zero,891cc <__alt_data_end+0xfffd0f5c>
   893a4:	2804977a 	slli	r2,r5,29
   893a8:	8020d0fa 	srli	r16,r16,3
   893ac:	00c1ffc4 	movi	r3,2047
   893b0:	280ad0fa 	srli	r5,r5,3
   893b4:	1404b03a 	or	r2,r2,r16
   893b8:	88c0031e 	bne	r17,r3,893c8 <__subdf3+0x2b8>
   893bc:	1146b03a 	or	r3,r2,r5
   893c0:	18003726 	beq	r3,zero,894a0 <__subdf3+0x390>
   893c4:	29400234 	orhi	r5,r5,8
   893c8:	00c00434 	movhi	r3,16
   893cc:	18ffffc4 	addi	r3,r3,-1
   893d0:	28ca703a 	and	r5,r5,r3
   893d4:	003f8806 	br	891f8 <__alt_data_end+0xfffd0f88>
   893d8:	18ffffc4 	addi	r3,r3,-1
   893dc:	1800481e 	bne	r3,zero,89500 <__subdf3+0x3f0>
   893e0:	818dc83a 	sub	r6,r16,r6
   893e4:	81a1803a 	cmpltu	r16,r16,r6
   893e8:	2a0bc83a 	sub	r5,r5,r8
   893ec:	2c0bc83a 	sub	r5,r5,r16
   893f0:	3021883a 	mov	r16,r6
   893f4:	003fc806 	br	89318 <__alt_data_end+0xfffd10a8>
   893f8:	4184b03a 	or	r2,r8,r6
   893fc:	103f6726 	beq	r2,zero,8919c <__alt_data_end+0xfffd0f2c>
   89400:	18ffffc4 	addi	r3,r3,-1
   89404:	1800931e 	bne	r3,zero,89654 <__subdf3+0x544>
   89408:	340d883a 	add	r6,r6,r16
   8940c:	3421803a 	cmpltu	r16,r6,r16
   89410:	414b883a 	add	r5,r8,r5
   89414:	2c0b883a 	add	r5,r5,r16
   89418:	3021883a 	mov	r16,r6
   8941c:	003f9a06 	br	89288 <__alt_data_end+0xfffd1018>
   89420:	1800531e 	bne	r3,zero,89570 <__subdf3+0x460>
   89424:	88800044 	addi	r2,r17,1
   89428:	1081ffcc 	andi	r2,r2,2047
   8942c:	00c00044 	movi	r3,1
   89430:	1880a00e 	bge	r3,r2,896b4 <__subdf3+0x5a4>
   89434:	8185c83a 	sub	r2,r16,r6
   89438:	8087803a 	cmpltu	r3,r16,r2
   8943c:	2a27c83a 	sub	r19,r5,r8
   89440:	98e7c83a 	sub	r19,r19,r3
   89444:	98c0202c 	andhi	r3,r19,128
   89448:	18006226 	beq	r3,zero,895d4 <__subdf3+0x4c4>
   8944c:	3421c83a 	sub	r16,r6,r16
   89450:	414bc83a 	sub	r5,r8,r5
   89454:	340d803a 	cmpltu	r6,r6,r16
   89458:	29a7c83a 	sub	r19,r5,r6
   8945c:	3825883a 	mov	r18,r7
   89460:	983fb31e 	bne	r19,zero,89330 <__alt_data_end+0xfffd10c0>
   89464:	8009883a 	mov	r4,r16
   89468:	0089ae80 	call	89ae8 <__clzsi2>
   8946c:	10800804 	addi	r2,r2,32
   89470:	10fffe04 	addi	r3,r2,-8
   89474:	010007c4 	movi	r4,31
   89478:	20ffb20e 	bge	r4,r3,89344 <__alt_data_end+0xfffd10d4>
   8947c:	10bff604 	addi	r2,r2,-40
   89480:	8084983a 	sll	r2,r16,r2
   89484:	0021883a 	mov	r16,zero
   89488:	1c7fb50e 	bge	r3,r17,89360 <__alt_data_end+0xfffd10f0>
   8948c:	017fe034 	movhi	r5,65408
   89490:	297fffc4 	addi	r5,r5,-1
   89494:	88e3c83a 	sub	r17,r17,r3
   89498:	114a703a 	and	r5,r2,r5
   8949c:	003f3f06 	br	8919c <__alt_data_end+0xfffd0f2c>
   894a0:	000b883a 	mov	r5,zero
   894a4:	0005883a 	mov	r2,zero
   894a8:	003f5306 	br	891f8 <__alt_data_end+0xfffd0f88>
   894ac:	418cb03a 	or	r6,r8,r6
   894b0:	300cc03a 	cmpne	r6,r6,zero
   894b4:	0007883a 	mov	r3,zero
   894b8:	003f9206 	br	89304 <__alt_data_end+0xfffd1094>
   894bc:	1800961e 	bne	r3,zero,89718 <__subdf3+0x608>
   894c0:	88800044 	addi	r2,r17,1
   894c4:	1101ffcc 	andi	r4,r2,2047
   894c8:	00c00044 	movi	r3,1
   894cc:	1900680e 	bge	r3,r4,89670 <__subdf3+0x560>
   894d0:	00c1ffc4 	movi	r3,2047
   894d4:	10c0b626 	beq	r2,r3,897b0 <__subdf3+0x6a0>
   894d8:	340d883a 	add	r6,r6,r16
   894dc:	3421803a 	cmpltu	r16,r6,r16
   894e0:	414b883a 	add	r5,r8,r5
   894e4:	2c0b883a 	add	r5,r5,r16
   894e8:	282097fa 	slli	r16,r5,31
   894ec:	300cd07a 	srli	r6,r6,1
   894f0:	280ad07a 	srli	r5,r5,1
   894f4:	1023883a 	mov	r17,r2
   894f8:	81a0b03a 	or	r16,r16,r6
   894fc:	003f2706 	br	8919c <__alt_data_end+0xfffd0f2c>
   89500:	0081ffc4 	movi	r2,2047
   89504:	88bf721e 	bne	r17,r2,892d0 <__alt_data_end+0xfffd1060>
   89508:	003f2406 	br	8919c <__alt_data_end+0xfffd0f2c>
   8950c:	893ff844 	addi	r4,r17,-31
   89510:	00c00804 	movi	r3,32
   89514:	1108d83a 	srl	r4,r2,r4
   89518:	28c05126 	beq	r5,r3,89660 <__subdf3+0x550>
   8951c:	00c00fc4 	movi	r3,63
   89520:	1c63c83a 	sub	r17,r3,r17
   89524:	1444983a 	sll	r2,r2,r17
   89528:	1420b03a 	or	r16,r2,r16
   8952c:	8020c03a 	cmpne	r16,r16,zero
   89530:	8120b03a 	or	r16,r16,r4
   89534:	000b883a 	mov	r5,zero
   89538:	0023883a 	mov	r17,zero
   8953c:	003f1706 	br	8919c <__alt_data_end+0xfffd0f2c>
   89540:	18bff804 	addi	r2,r3,-32
   89544:	01000804 	movi	r4,32
   89548:	4084d83a 	srl	r2,r8,r2
   8954c:	19004626 	beq	r3,r4,89668 <__subdf3+0x558>
   89550:	01001004 	movi	r4,64
   89554:	20c7c83a 	sub	r3,r4,r3
   89558:	40d0983a 	sll	r8,r8,r3
   8955c:	418cb03a 	or	r6,r8,r6
   89560:	300cc03a 	cmpne	r6,r6,zero
   89564:	308cb03a 	or	r6,r6,r2
   89568:	0007883a 	mov	r3,zero
   8956c:	003f6506 	br	89304 <__alt_data_end+0xfffd1094>
   89570:	88002b26 	beq	r17,zero,89620 <__subdf3+0x510>
   89574:	0101ffc4 	movi	r4,2047
   89578:	11002f26 	beq	r2,r4,89638 <__subdf3+0x528>
   8957c:	00c7c83a 	sub	r3,zero,r3
   89580:	29402034 	orhi	r5,r5,128
   89584:	01000e04 	movi	r4,56
   89588:	20c08516 	blt	r4,r3,897a0 <__subdf3+0x690>
   8958c:	010007c4 	movi	r4,31
   89590:	20c0cd16 	blt	r4,r3,898c8 <__subdf3+0x7b8>
   89594:	01000804 	movi	r4,32
   89598:	20c9c83a 	sub	r4,r4,r3
   8959c:	2914983a 	sll	r10,r5,r4
   895a0:	80d2d83a 	srl	r9,r16,r3
   895a4:	8108983a 	sll	r4,r16,r4
   895a8:	28cad83a 	srl	r5,r5,r3
   895ac:	5252b03a 	or	r9,r10,r9
   895b0:	2006c03a 	cmpne	r3,r4,zero
   895b4:	48e0b03a 	or	r16,r9,r3
   895b8:	3421c83a 	sub	r16,r6,r16
   895bc:	414bc83a 	sub	r5,r8,r5
   895c0:	340d803a 	cmpltu	r6,r6,r16
   895c4:	298bc83a 	sub	r5,r5,r6
   895c8:	1023883a 	mov	r17,r2
   895cc:	3825883a 	mov	r18,r7
   895d0:	003f5106 	br	89318 <__alt_data_end+0xfffd10a8>
   895d4:	9886b03a 	or	r3,r19,r2
   895d8:	18001c1e 	bne	r3,zero,8964c <__subdf3+0x53c>
   895dc:	0013883a 	mov	r9,zero
   895e0:	000b883a 	mov	r5,zero
   895e4:	0021883a 	mov	r16,zero
   895e8:	0023883a 	mov	r17,zero
   895ec:	003f6d06 	br	893a4 <__alt_data_end+0xfffd1134>
   895f0:	008007c4 	movi	r2,31
   895f4:	10c03c16 	blt	r2,r3,896e8 <__subdf3+0x5d8>
   895f8:	00800804 	movi	r2,32
   895fc:	10c5c83a 	sub	r2,r2,r3
   89600:	30c8d83a 	srl	r4,r6,r3
   89604:	408e983a 	sll	r7,r8,r2
   89608:	3084983a 	sll	r2,r6,r2
   8960c:	40c6d83a 	srl	r3,r8,r3
   89610:	3908b03a 	or	r4,r7,r4
   89614:	1004c03a 	cmpne	r2,r2,zero
   89618:	208cb03a 	or	r6,r4,r2
   8961c:	003f1506 	br	89274 <__alt_data_end+0xfffd1004>
   89620:	2c08b03a 	or	r4,r5,r16
   89624:	20000426 	beq	r4,zero,89638 <__subdf3+0x528>
   89628:	00c6303a 	nor	r3,zero,r3
   8962c:	183fe226 	beq	r3,zero,895b8 <__alt_data_end+0xfffd1348>
   89630:	0101ffc4 	movi	r4,2047
   89634:	113fd31e 	bne	r2,r4,89584 <__alt_data_end+0xfffd1314>
   89638:	400b883a 	mov	r5,r8
   8963c:	3021883a 	mov	r16,r6
   89640:	1023883a 	mov	r17,r2
   89644:	3825883a 	mov	r18,r7
   89648:	003ed406 	br	8919c <__alt_data_end+0xfffd0f2c>
   8964c:	1021883a 	mov	r16,r2
   89650:	003f3606 	br	8932c <__alt_data_end+0xfffd10bc>
   89654:	0081ffc4 	movi	r2,2047
   89658:	88bf011e 	bne	r17,r2,89260 <__alt_data_end+0xfffd0ff0>
   8965c:	003ecf06 	br	8919c <__alt_data_end+0xfffd0f2c>
   89660:	0005883a 	mov	r2,zero
   89664:	003fb006 	br	89528 <__alt_data_end+0xfffd12b8>
   89668:	0011883a 	mov	r8,zero
   8966c:	003fbb06 	br	8955c <__alt_data_end+0xfffd12ec>
   89670:	2c04b03a 	or	r2,r5,r16
   89674:	88007f1e 	bne	r17,zero,89874 <__subdf3+0x764>
   89678:	1000a926 	beq	r2,zero,89920 <__subdf3+0x810>
   8967c:	4184b03a 	or	r2,r8,r6
   89680:	103ec626 	beq	r2,zero,8919c <__alt_data_end+0xfffd0f2c>
   89684:	340d883a 	add	r6,r6,r16
   89688:	414b883a 	add	r5,r8,r5
   8968c:	3421803a 	cmpltu	r16,r6,r16
   89690:	2c0b883a 	add	r5,r5,r16
   89694:	2880202c 	andhi	r2,r5,128
   89698:	1000bb26 	beq	r2,zero,89988 <__subdf3+0x878>
   8969c:	00bfe034 	movhi	r2,65408
   896a0:	10bfffc4 	addi	r2,r2,-1
   896a4:	288a703a 	and	r5,r5,r2
   896a8:	3021883a 	mov	r16,r6
   896ac:	1823883a 	mov	r17,r3
   896b0:	003eba06 	br	8919c <__alt_data_end+0xfffd0f2c>
   896b4:	2c04b03a 	or	r2,r5,r16
   896b8:	8800311e 	bne	r17,zero,89780 <__subdf3+0x670>
   896bc:	1000451e 	bne	r2,zero,897d4 <__subdf3+0x6c4>
   896c0:	4184b03a 	or	r2,r8,r6
   896c4:	10000426 	beq	r2,zero,896d8 <__subdf3+0x5c8>
   896c8:	400b883a 	mov	r5,r8
   896cc:	3021883a 	mov	r16,r6
   896d0:	3825883a 	mov	r18,r7
   896d4:	003eb106 	br	8919c <__alt_data_end+0xfffd0f2c>
   896d8:	0013883a 	mov	r9,zero
   896dc:	000b883a 	mov	r5,zero
   896e0:	0021883a 	mov	r16,zero
   896e4:	003f2f06 	br	893a4 <__alt_data_end+0xfffd1134>
   896e8:	18bff804 	addi	r2,r3,-32
   896ec:	01000804 	movi	r4,32
   896f0:	4084d83a 	srl	r2,r8,r2
   896f4:	19007226 	beq	r3,r4,898c0 <__subdf3+0x7b0>
   896f8:	01001004 	movi	r4,64
   896fc:	20c7c83a 	sub	r3,r4,r3
   89700:	40d0983a 	sll	r8,r8,r3
   89704:	418cb03a 	or	r6,r8,r6
   89708:	300cc03a 	cmpne	r6,r6,zero
   8970c:	308cb03a 	or	r6,r6,r2
   89710:	0007883a 	mov	r3,zero
   89714:	003ed706 	br	89274 <__alt_data_end+0xfffd1004>
   89718:	8800291e 	bne	r17,zero,897c0 <__subdf3+0x6b0>
   8971c:	2c08b03a 	or	r4,r5,r16
   89720:	20005026 	beq	r4,zero,89864 <__subdf3+0x754>
   89724:	00c6303a 	nor	r3,zero,r3
   89728:	18000f26 	beq	r3,zero,89768 <__subdf3+0x658>
   8972c:	0101ffc4 	movi	r4,2047
   89730:	11004c26 	beq	r2,r4,89864 <__subdf3+0x754>
   89734:	01000e04 	movi	r4,56
   89738:	20c07516 	blt	r4,r3,89910 <__subdf3+0x800>
   8973c:	010007c4 	movi	r4,31
   89740:	20c08316 	blt	r4,r3,89950 <__subdf3+0x840>
   89744:	01000804 	movi	r4,32
   89748:	20c9c83a 	sub	r4,r4,r3
   8974c:	2914983a 	sll	r10,r5,r4
   89750:	80ced83a 	srl	r7,r16,r3
   89754:	8108983a 	sll	r4,r16,r4
   89758:	28cad83a 	srl	r5,r5,r3
   8975c:	51ceb03a 	or	r7,r10,r7
   89760:	2006c03a 	cmpne	r3,r4,zero
   89764:	38e0b03a 	or	r16,r7,r3
   89768:	81a1883a 	add	r16,r16,r6
   8976c:	2a0b883a 	add	r5,r5,r8
   89770:	818d803a 	cmpltu	r6,r16,r6
   89774:	298b883a 	add	r5,r5,r6
   89778:	1023883a 	mov	r17,r2
   8977c:	003ec206 	br	89288 <__alt_data_end+0xfffd1018>
   89780:	1000221e 	bne	r2,zero,8980c <__subdf3+0x6fc>
   89784:	4184b03a 	or	r2,r8,r6
   89788:	10005b26 	beq	r2,zero,898f8 <__subdf3+0x7e8>
   8978c:	400b883a 	mov	r5,r8
   89790:	3021883a 	mov	r16,r6
   89794:	3825883a 	mov	r18,r7
   89798:	0441ffc4 	movi	r17,2047
   8979c:	003e7f06 	br	8919c <__alt_data_end+0xfffd0f2c>
   897a0:	2c20b03a 	or	r16,r5,r16
   897a4:	8020c03a 	cmpne	r16,r16,zero
   897a8:	000b883a 	mov	r5,zero
   897ac:	003f8206 	br	895b8 <__alt_data_end+0xfffd1348>
   897b0:	1023883a 	mov	r17,r2
   897b4:	000b883a 	mov	r5,zero
   897b8:	0021883a 	mov	r16,zero
   897bc:	003ef906 	br	893a4 <__alt_data_end+0xfffd1134>
   897c0:	0101ffc4 	movi	r4,2047
   897c4:	11002726 	beq	r2,r4,89864 <__subdf3+0x754>
   897c8:	00c7c83a 	sub	r3,zero,r3
   897cc:	29402034 	orhi	r5,r5,128
   897d0:	003fd806 	br	89734 <__alt_data_end+0xfffd14c4>
   897d4:	4184b03a 	or	r2,r8,r6
   897d8:	103e7026 	beq	r2,zero,8919c <__alt_data_end+0xfffd0f2c>
   897dc:	8185c83a 	sub	r2,r16,r6
   897e0:	8089803a 	cmpltu	r4,r16,r2
   897e4:	2a07c83a 	sub	r3,r5,r8
   897e8:	1907c83a 	sub	r3,r3,r4
   897ec:	1900202c 	andhi	r4,r3,128
   897f0:	20005226 	beq	r4,zero,8993c <__subdf3+0x82c>
   897f4:	3421c83a 	sub	r16,r6,r16
   897f8:	414bc83a 	sub	r5,r8,r5
   897fc:	340d803a 	cmpltu	r6,r6,r16
   89800:	298bc83a 	sub	r5,r5,r6
   89804:	3825883a 	mov	r18,r7
   89808:	003e6406 	br	8919c <__alt_data_end+0xfffd0f2c>
   8980c:	4184b03a 	or	r2,r8,r6
   89810:	10002926 	beq	r2,zero,898b8 <__subdf3+0x7a8>
   89814:	2804d0fa 	srli	r2,r5,3
   89818:	8020d0fa 	srli	r16,r16,3
   8981c:	280a977a 	slli	r5,r5,29
   89820:	10c0022c 	andhi	r3,r2,8
   89824:	2c20b03a 	or	r16,r5,r16
   89828:	18000826 	beq	r3,zero,8984c <__subdf3+0x73c>
   8982c:	4006d0fa 	srli	r3,r8,3
   89830:	1900022c 	andhi	r4,r3,8
   89834:	2000051e 	bne	r4,zero,8984c <__subdf3+0x73c>
   89838:	300cd0fa 	srli	r6,r6,3
   8983c:	4010977a 	slli	r8,r8,29
   89840:	1805883a 	mov	r2,r3
   89844:	3825883a 	mov	r18,r7
   89848:	41a0b03a 	or	r16,r8,r6
   8984c:	800ad77a 	srli	r5,r16,29
   89850:	100490fa 	slli	r2,r2,3
   89854:	802090fa 	slli	r16,r16,3
   89858:	0441ffc4 	movi	r17,2047
   8985c:	288ab03a 	or	r5,r5,r2
   89860:	003e4e06 	br	8919c <__alt_data_end+0xfffd0f2c>
   89864:	400b883a 	mov	r5,r8
   89868:	3021883a 	mov	r16,r6
   8986c:	1023883a 	mov	r17,r2
   89870:	003e4a06 	br	8919c <__alt_data_end+0xfffd0f2c>
   89874:	10002d26 	beq	r2,zero,8992c <__subdf3+0x81c>
   89878:	4184b03a 	or	r2,r8,r6
   8987c:	10000e26 	beq	r2,zero,898b8 <__subdf3+0x7a8>
   89880:	2804d0fa 	srli	r2,r5,3
   89884:	8020d0fa 	srli	r16,r16,3
   89888:	280a977a 	slli	r5,r5,29
   8988c:	10c0022c 	andhi	r3,r2,8
   89890:	2c20b03a 	or	r16,r5,r16
   89894:	183fed26 	beq	r3,zero,8984c <__alt_data_end+0xfffd15dc>
   89898:	4006d0fa 	srli	r3,r8,3
   8989c:	1900022c 	andhi	r4,r3,8
   898a0:	203fea1e 	bne	r4,zero,8984c <__alt_data_end+0xfffd15dc>
   898a4:	300cd0fa 	srli	r6,r6,3
   898a8:	4010977a 	slli	r8,r8,29
   898ac:	1805883a 	mov	r2,r3
   898b0:	41a0b03a 	or	r16,r8,r6
   898b4:	003fe506 	br	8984c <__alt_data_end+0xfffd15dc>
   898b8:	0441ffc4 	movi	r17,2047
   898bc:	003e3706 	br	8919c <__alt_data_end+0xfffd0f2c>
   898c0:	0011883a 	mov	r8,zero
   898c4:	003f8f06 	br	89704 <__alt_data_end+0xfffd1494>
   898c8:	193ff804 	addi	r4,r3,-32
   898cc:	02400804 	movi	r9,32
   898d0:	2908d83a 	srl	r4,r5,r4
   898d4:	1a402a26 	beq	r3,r9,89980 <__subdf3+0x870>
   898d8:	02401004 	movi	r9,64
   898dc:	48c7c83a 	sub	r3,r9,r3
   898e0:	28ca983a 	sll	r5,r5,r3
   898e4:	2c20b03a 	or	r16,r5,r16
   898e8:	8020c03a 	cmpne	r16,r16,zero
   898ec:	8120b03a 	or	r16,r16,r4
   898f0:	000b883a 	mov	r5,zero
   898f4:	003f3006 	br	895b8 <__alt_data_end+0xfffd1348>
   898f8:	0013883a 	mov	r9,zero
   898fc:	01402034 	movhi	r5,128
   89900:	297fffc4 	addi	r5,r5,-1
   89904:	043ffe04 	movi	r16,-8
   89908:	0441ffc4 	movi	r17,2047
   8990c:	003ea506 	br	893a4 <__alt_data_end+0xfffd1134>
   89910:	2c20b03a 	or	r16,r5,r16
   89914:	8020c03a 	cmpne	r16,r16,zero
   89918:	000b883a 	mov	r5,zero
   8991c:	003f9206 	br	89768 <__alt_data_end+0xfffd14f8>
   89920:	400b883a 	mov	r5,r8
   89924:	3021883a 	mov	r16,r6
   89928:	003e1c06 	br	8919c <__alt_data_end+0xfffd0f2c>
   8992c:	400b883a 	mov	r5,r8
   89930:	3021883a 	mov	r16,r6
   89934:	0441ffc4 	movi	r17,2047
   89938:	003e1806 	br	8919c <__alt_data_end+0xfffd0f2c>
   8993c:	1888b03a 	or	r4,r3,r2
   89940:	203f6526 	beq	r4,zero,896d8 <__alt_data_end+0xfffd1468>
   89944:	180b883a 	mov	r5,r3
   89948:	1021883a 	mov	r16,r2
   8994c:	003e1306 	br	8919c <__alt_data_end+0xfffd0f2c>
   89950:	193ff804 	addi	r4,r3,-32
   89954:	01c00804 	movi	r7,32
   89958:	2908d83a 	srl	r4,r5,r4
   8995c:	19c00c26 	beq	r3,r7,89990 <__subdf3+0x880>
   89960:	01c01004 	movi	r7,64
   89964:	38c7c83a 	sub	r3,r7,r3
   89968:	28ca983a 	sll	r5,r5,r3
   8996c:	2c20b03a 	or	r16,r5,r16
   89970:	8020c03a 	cmpne	r16,r16,zero
   89974:	8120b03a 	or	r16,r16,r4
   89978:	000b883a 	mov	r5,zero
   8997c:	003f7a06 	br	89768 <__alt_data_end+0xfffd14f8>
   89980:	000b883a 	mov	r5,zero
   89984:	003fd706 	br	898e4 <__alt_data_end+0xfffd1674>
   89988:	3021883a 	mov	r16,r6
   8998c:	003e0306 	br	8919c <__alt_data_end+0xfffd0f2c>
   89990:	000b883a 	mov	r5,zero
   89994:	003ff506 	br	8996c <__alt_data_end+0xfffd16fc>

00089998 <__fixdfsi>:
   89998:	2806d53a 	srli	r3,r5,20
   8999c:	00800434 	movhi	r2,16
   899a0:	10bfffc4 	addi	r2,r2,-1
   899a4:	0180ff84 	movi	r6,1022
   899a8:	18c1ffcc 	andi	r3,r3,2047
   899ac:	2884703a 	and	r2,r5,r2
   899b0:	280ad7fa 	srli	r5,r5,31
   899b4:	30c0120e 	bge	r6,r3,89a00 <__fixdfsi+0x68>
   899b8:	01810744 	movi	r6,1053
   899bc:	30c00c16 	blt	r6,r3,899f0 <__fixdfsi+0x58>
   899c0:	01810cc4 	movi	r6,1075
   899c4:	30cdc83a 	sub	r6,r6,r3
   899c8:	01c007c4 	movi	r7,31
   899cc:	10800434 	orhi	r2,r2,16
   899d0:	39800d16 	blt	r7,r6,89a08 <__fixdfsi+0x70>
   899d4:	18fefb44 	addi	r3,r3,-1043
   899d8:	2188d83a 	srl	r4,r4,r6
   899dc:	10c4983a 	sll	r2,r2,r3
   899e0:	2084b03a 	or	r2,r4,r2
   899e4:	28000726 	beq	r5,zero,89a04 <__fixdfsi+0x6c>
   899e8:	0085c83a 	sub	r2,zero,r2
   899ec:	f800283a 	ret
   899f0:	00a00034 	movhi	r2,32768
   899f4:	10bfffc4 	addi	r2,r2,-1
   899f8:	2885883a 	add	r2,r5,r2
   899fc:	f800283a 	ret
   89a00:	0005883a 	mov	r2,zero
   89a04:	f800283a 	ret
   89a08:	010104c4 	movi	r4,1043
   89a0c:	20c7c83a 	sub	r3,r4,r3
   89a10:	10c4d83a 	srl	r2,r2,r3
   89a14:	003ff306 	br	899e4 <__alt_data_end+0xfffd1774>

00089a18 <__floatsidf>:
   89a18:	defffd04 	addi	sp,sp,-12
   89a1c:	dc000015 	stw	r16,0(sp)
   89a20:	dfc00215 	stw	ra,8(sp)
   89a24:	dc400115 	stw	r17,4(sp)
   89a28:	2021883a 	mov	r16,r4
   89a2c:	20002926 	beq	r4,zero,89ad4 <__floatsidf+0xbc>
   89a30:	2022d7fa 	srli	r17,r4,31
   89a34:	88000126 	beq	r17,zero,89a3c <__floatsidf+0x24>
   89a38:	0121c83a 	sub	r16,zero,r4
   89a3c:	8009883a 	mov	r4,r16
   89a40:	0089ae80 	call	89ae8 <__clzsi2>
   89a44:	01810784 	movi	r6,1054
   89a48:	00c00284 	movi	r3,10
   89a4c:	308dc83a 	sub	r6,r6,r2
   89a50:	1880150e 	bge	r3,r2,89aa8 <__floatsidf+0x90>
   89a54:	113ffd44 	addi	r4,r2,-11
   89a58:	8108983a 	sll	r4,r16,r4
   89a5c:	00800434 	movhi	r2,16
   89a60:	10bfffc4 	addi	r2,r2,-1
   89a64:	3181ffcc 	andi	r6,r6,2047
   89a68:	2088703a 	and	r4,r4,r2
   89a6c:	880b883a 	mov	r5,r17
   89a70:	0005883a 	mov	r2,zero
   89a74:	300c953a 	slli	r6,r6,20
   89a78:	29403fcc 	andi	r5,r5,255
   89a7c:	280a97fa 	slli	r5,r5,31
   89a80:	00c00434 	movhi	r3,16
   89a84:	18ffffc4 	addi	r3,r3,-1
   89a88:	20c8703a 	and	r4,r4,r3
   89a8c:	2186b03a 	or	r3,r4,r6
   89a90:	1946b03a 	or	r3,r3,r5
   89a94:	dfc00217 	ldw	ra,8(sp)
   89a98:	dc400117 	ldw	r17,4(sp)
   89a9c:	dc000017 	ldw	r16,0(sp)
   89aa0:	dec00304 	addi	sp,sp,12
   89aa4:	f800283a 	ret
   89aa8:	010002c4 	movi	r4,11
   89aac:	2089c83a 	sub	r4,r4,r2
   89ab0:	8108d83a 	srl	r4,r16,r4
   89ab4:	10800544 	addi	r2,r2,21
   89ab8:	00c00434 	movhi	r3,16
   89abc:	18ffffc4 	addi	r3,r3,-1
   89ac0:	8084983a 	sll	r2,r16,r2
   89ac4:	20c8703a 	and	r4,r4,r3
   89ac8:	3181ffcc 	andi	r6,r6,2047
   89acc:	880b883a 	mov	r5,r17
   89ad0:	003fe806 	br	89a74 <__alt_data_end+0xfffd1804>
   89ad4:	000b883a 	mov	r5,zero
   89ad8:	000d883a 	mov	r6,zero
   89adc:	0009883a 	mov	r4,zero
   89ae0:	0005883a 	mov	r2,zero
   89ae4:	003fe306 	br	89a74 <__alt_data_end+0xfffd1804>

00089ae8 <__clzsi2>:
   89ae8:	00bfffd4 	movui	r2,65535
   89aec:	11000b36 	bltu	r2,r4,89b1c <__clzsi2+0x34>
   89af0:	00803fc4 	movi	r2,255
   89af4:	11001e2e 	bgeu	r2,r4,89b70 <__clzsi2+0x88>
   89af8:	00c00204 	movi	r3,8
   89afc:	20c8d83a 	srl	r4,r4,r3
   89b00:	00c002b4 	movhi	r3,10
   89b04:	18dbaf44 	addi	r3,r3,28349
   89b08:	00800604 	movi	r2,24
   89b0c:	1909883a 	add	r4,r3,r4
   89b10:	20c00003 	ldbu	r3,0(r4)
   89b14:	10c5c83a 	sub	r2,r2,r3
   89b18:	f800283a 	ret
   89b1c:	00804034 	movhi	r2,256
   89b20:	10bfffc4 	addi	r2,r2,-1
   89b24:	11000936 	bltu	r2,r4,89b4c <__clzsi2+0x64>
   89b28:	00800404 	movi	r2,16
   89b2c:	1007883a 	mov	r3,r2
   89b30:	20c8d83a 	srl	r4,r4,r3
   89b34:	00c002b4 	movhi	r3,10
   89b38:	18dbaf44 	addi	r3,r3,28349
   89b3c:	1909883a 	add	r4,r3,r4
   89b40:	20c00003 	ldbu	r3,0(r4)
   89b44:	10c5c83a 	sub	r2,r2,r3
   89b48:	f800283a 	ret
   89b4c:	00c00604 	movi	r3,24
   89b50:	20c8d83a 	srl	r4,r4,r3
   89b54:	00c002b4 	movhi	r3,10
   89b58:	18dbaf44 	addi	r3,r3,28349
   89b5c:	00800204 	movi	r2,8
   89b60:	1909883a 	add	r4,r3,r4
   89b64:	20c00003 	ldbu	r3,0(r4)
   89b68:	10c5c83a 	sub	r2,r2,r3
   89b6c:	f800283a 	ret
   89b70:	0007883a 	mov	r3,zero
   89b74:	20c8d83a 	srl	r4,r4,r3
   89b78:	00c002b4 	movhi	r3,10
   89b7c:	18dbaf44 	addi	r3,r3,28349
   89b80:	00800804 	movi	r2,32
   89b84:	1909883a 	add	r4,r3,r4
   89b88:	20c00003 	ldbu	r3,0(r4)
   89b8c:	10c5c83a 	sub	r2,r2,r3
   89b90:	f800283a 	ret

00089b94 <__errno>:
   89b94:	008002f4 	movhi	r2,11
   89b98:	10a8a304 	addi	r2,r2,-23924
   89b9c:	10800017 	ldw	r2,0(r2)
   89ba0:	f800283a 	ret

00089ba4 <malloc>:
   89ba4:	008002f4 	movhi	r2,11
   89ba8:	10a8a304 	addi	r2,r2,-23924
   89bac:	200b883a 	mov	r5,r4
   89bb0:	11000017 	ldw	r4,0(r2)
   89bb4:	0089bcc1 	jmpi	89bcc <_malloc_r>

00089bb8 <free>:
   89bb8:	008002f4 	movhi	r2,11
   89bbc:	10a8a304 	addi	r2,r2,-23924
   89bc0:	200b883a 	mov	r5,r4
   89bc4:	11000017 	ldw	r4,0(r2)
   89bc8:	008b2c41 	jmpi	8b2c4 <_free_r>

00089bcc <_malloc_r>:
   89bcc:	defff604 	addi	sp,sp,-40
   89bd0:	dcc00315 	stw	r19,12(sp)
   89bd4:	dfc00915 	stw	ra,36(sp)
   89bd8:	df000815 	stw	fp,32(sp)
   89bdc:	ddc00715 	stw	r23,28(sp)
   89be0:	dd800615 	stw	r22,24(sp)
   89be4:	dd400515 	stw	r21,20(sp)
   89be8:	dd000415 	stw	r20,16(sp)
   89bec:	dc800215 	stw	r18,8(sp)
   89bf0:	dc400115 	stw	r17,4(sp)
   89bf4:	dc000015 	stw	r16,0(sp)
   89bf8:	288002c4 	addi	r2,r5,11
   89bfc:	00c00584 	movi	r3,22
   89c00:	2027883a 	mov	r19,r4
   89c04:	1880042e 	bgeu	r3,r2,89c18 <_malloc_r+0x4c>
   89c08:	043ffe04 	movi	r16,-8
   89c0c:	1420703a 	and	r16,r2,r16
   89c10:	8000020e 	bge	r16,zero,89c1c <_malloc_r+0x50>
   89c14:	00000206 	br	89c20 <_malloc_r+0x54>
   89c18:	04000404 	movi	r16,16
   89c1c:	8140032e 	bgeu	r16,r5,89c2c <_malloc_r+0x60>
   89c20:	00800304 	movi	r2,12
   89c24:	98800015 	stw	r2,0(r19)
   89c28:	00017006 	br	8a1ec <_malloc_r+0x620>
   89c2c:	9809883a 	mov	r4,r19
   89c30:	008ba3c0 	call	8ba3c <__malloc_lock>
   89c34:	00807dc4 	movi	r2,503
   89c38:	044002f4 	movhi	r17,11
   89c3c:	8c631b04 	addi	r17,r17,-29588
   89c40:	14001436 	bltu	r2,r16,89c94 <_malloc_r+0xc8>
   89c44:	800ad0fa 	srli	r5,r16,3
   89c48:	2945883a 	add	r2,r5,r5
   89c4c:	1085883a 	add	r2,r2,r2
   89c50:	1085883a 	add	r2,r2,r2
   89c54:	8885883a 	add	r2,r17,r2
   89c58:	14800317 	ldw	r18,12(r2)
   89c5c:	9080031e 	bne	r18,r2,89c6c <_malloc_r+0xa0>
   89c60:	90800204 	addi	r2,r18,8
   89c64:	94800517 	ldw	r18,20(r18)
   89c68:	90800826 	beq	r18,r2,89c8c <_malloc_r+0xc0>
   89c6c:	90c00117 	ldw	r3,4(r18)
   89c70:	00bfff04 	movi	r2,-4
   89c74:	91000217 	ldw	r4,8(r18)
   89c78:	1884703a 	and	r2,r3,r2
   89c7c:	90c00317 	ldw	r3,12(r18)
   89c80:	20c00315 	stw	r3,12(r4)
   89c84:	19000215 	stw	r4,8(r3)
   89c88:	00004b06 	br	89db8 <_malloc_r+0x1ec>
   89c8c:	29400084 	addi	r5,r5,2
   89c90:	00003506 	br	89d68 <_malloc_r+0x19c>
   89c94:	800ad27a 	srli	r5,r16,9
   89c98:	28001826 	beq	r5,zero,89cfc <_malloc_r+0x130>
   89c9c:	00800104 	movi	r2,4
   89ca0:	11400336 	bltu	r2,r5,89cb0 <_malloc_r+0xe4>
   89ca4:	800ad1ba 	srli	r5,r16,6
   89ca8:	29400e04 	addi	r5,r5,56
   89cac:	00001606 	br	89d08 <_malloc_r+0x13c>
   89cb0:	00800504 	movi	r2,20
   89cb4:	11400236 	bltu	r2,r5,89cc0 <_malloc_r+0xf4>
   89cb8:	294016c4 	addi	r5,r5,91
   89cbc:	00001206 	br	89d08 <_malloc_r+0x13c>
   89cc0:	00801504 	movi	r2,84
   89cc4:	11400336 	bltu	r2,r5,89cd4 <_malloc_r+0x108>
   89cc8:	800ad33a 	srli	r5,r16,12
   89ccc:	29401b84 	addi	r5,r5,110
   89cd0:	00000d06 	br	89d08 <_malloc_r+0x13c>
   89cd4:	00805504 	movi	r2,340
   89cd8:	11400336 	bltu	r2,r5,89ce8 <_malloc_r+0x11c>
   89cdc:	800ad3fa 	srli	r5,r16,15
   89ce0:	29401dc4 	addi	r5,r5,119
   89ce4:	00000806 	br	89d08 <_malloc_r+0x13c>
   89ce8:	00815504 	movi	r2,1364
   89cec:	11400536 	bltu	r2,r5,89d04 <_malloc_r+0x138>
   89cf0:	800ad4ba 	srli	r5,r16,18
   89cf4:	29401f04 	addi	r5,r5,124
   89cf8:	00000306 	br	89d08 <_malloc_r+0x13c>
   89cfc:	01400fc4 	movi	r5,63
   89d00:	00000106 	br	89d08 <_malloc_r+0x13c>
   89d04:	01401f84 	movi	r5,126
   89d08:	2945883a 	add	r2,r5,r5
   89d0c:	1085883a 	add	r2,r2,r2
   89d10:	1085883a 	add	r2,r2,r2
   89d14:	8885883a 	add	r2,r17,r2
   89d18:	14800317 	ldw	r18,12(r2)
   89d1c:	01bfff04 	movi	r6,-4
   89d20:	01c003c4 	movi	r7,15
   89d24:	90800f26 	beq	r18,r2,89d64 <_malloc_r+0x198>
   89d28:	90c00117 	ldw	r3,4(r18)
   89d2c:	1986703a 	and	r3,r3,r6
   89d30:	1c09c83a 	sub	r4,r3,r16
   89d34:	3900020e 	bge	r7,r4,89d40 <_malloc_r+0x174>
   89d38:	297fffc4 	addi	r5,r5,-1
   89d3c:	00000906 	br	89d64 <_malloc_r+0x198>
   89d40:	20000616 	blt	r4,zero,89d5c <_malloc_r+0x190>
   89d44:	90800317 	ldw	r2,12(r18)
   89d48:	91000217 	ldw	r4,8(r18)
   89d4c:	20800315 	stw	r2,12(r4)
   89d50:	11000215 	stw	r4,8(r2)
   89d54:	90c5883a 	add	r2,r18,r3
   89d58:	00001806 	br	89dbc <_malloc_r+0x1f0>
   89d5c:	94800317 	ldw	r18,12(r18)
   89d60:	003ff006 	br	89d24 <__alt_data_end+0xfffd1ab4>
   89d64:	29400044 	addi	r5,r5,1
   89d68:	8c800417 	ldw	r18,16(r17)
   89d6c:	00c002f4 	movhi	r3,11
   89d70:	18e31b04 	addi	r3,r3,-29588
   89d74:	19800204 	addi	r6,r3,8
   89d78:	91805d26 	beq	r18,r6,89ef0 <_malloc_r+0x324>
   89d7c:	91000117 	ldw	r4,4(r18)
   89d80:	00bfff04 	movi	r2,-4
   89d84:	01c003c4 	movi	r7,15
   89d88:	2084703a 	and	r2,r4,r2
   89d8c:	1409c83a 	sub	r4,r2,r16
   89d90:	3900060e 	bge	r7,r4,89dac <_malloc_r+0x1e0>
   89d94:	9405883a 	add	r2,r18,r16
   89d98:	84000054 	ori	r16,r16,1
   89d9c:	94000115 	stw	r16,4(r18)
   89da0:	18800515 	stw	r2,20(r3)
   89da4:	18800415 	stw	r2,16(r3)
   89da8:	00007706 	br	89f88 <_malloc_r+0x3bc>
   89dac:	19800515 	stw	r6,20(r3)
   89db0:	19800415 	stw	r6,16(r3)
   89db4:	20000516 	blt	r4,zero,89dcc <_malloc_r+0x200>
   89db8:	9085883a 	add	r2,r18,r2
   89dbc:	10c00117 	ldw	r3,4(r2)
   89dc0:	18c00054 	ori	r3,r3,1
   89dc4:	10c00115 	stw	r3,4(r2)
   89dc8:	00011106 	br	8a210 <_malloc_r+0x644>
   89dcc:	01007fc4 	movi	r4,511
   89dd0:	20801136 	bltu	r4,r2,89e18 <_malloc_r+0x24c>
   89dd4:	1004d0fa 	srli	r2,r2,3
   89dd8:	01c00044 	movi	r7,1
   89ddc:	1009d0ba 	srai	r4,r2,2
   89de0:	1085883a 	add	r2,r2,r2
   89de4:	1085883a 	add	r2,r2,r2
   89de8:	3908983a 	sll	r4,r7,r4
   89dec:	19c00117 	ldw	r7,4(r3)
   89df0:	1085883a 	add	r2,r2,r2
   89df4:	21c8b03a 	or	r4,r4,r7
   89df8:	19000115 	stw	r4,4(r3)
   89dfc:	10c7883a 	add	r3,r2,r3
   89e00:	18800217 	ldw	r2,8(r3)
   89e04:	90c00315 	stw	r3,12(r18)
   89e08:	90800215 	stw	r2,8(r18)
   89e0c:	1c800215 	stw	r18,8(r3)
   89e10:	14800315 	stw	r18,12(r2)
   89e14:	00003606 	br	89ef0 <_malloc_r+0x324>
   89e18:	1008d27a 	srli	r4,r2,9
   89e1c:	00c00104 	movi	r3,4
   89e20:	19000336 	bltu	r3,r4,89e30 <_malloc_r+0x264>
   89e24:	1008d1ba 	srli	r4,r2,6
   89e28:	21000e04 	addi	r4,r4,56
   89e2c:	00001406 	br	89e80 <_malloc_r+0x2b4>
   89e30:	00c00504 	movi	r3,20
   89e34:	19000236 	bltu	r3,r4,89e40 <_malloc_r+0x274>
   89e38:	210016c4 	addi	r4,r4,91
   89e3c:	00001006 	br	89e80 <_malloc_r+0x2b4>
   89e40:	00c01504 	movi	r3,84
   89e44:	19000336 	bltu	r3,r4,89e54 <_malloc_r+0x288>
   89e48:	1008d33a 	srli	r4,r2,12
   89e4c:	21001b84 	addi	r4,r4,110
   89e50:	00000b06 	br	89e80 <_malloc_r+0x2b4>
   89e54:	00c05504 	movi	r3,340
   89e58:	19000336 	bltu	r3,r4,89e68 <_malloc_r+0x29c>
   89e5c:	1008d3fa 	srli	r4,r2,15
   89e60:	21001dc4 	addi	r4,r4,119
   89e64:	00000606 	br	89e80 <_malloc_r+0x2b4>
   89e68:	00c15504 	movi	r3,1364
   89e6c:	19000336 	bltu	r3,r4,89e7c <_malloc_r+0x2b0>
   89e70:	1008d4ba 	srli	r4,r2,18
   89e74:	21001f04 	addi	r4,r4,124
   89e78:	00000106 	br	89e80 <_malloc_r+0x2b4>
   89e7c:	01001f84 	movi	r4,126
   89e80:	210f883a 	add	r7,r4,r4
   89e84:	39cf883a 	add	r7,r7,r7
   89e88:	39cf883a 	add	r7,r7,r7
   89e8c:	89cf883a 	add	r7,r17,r7
   89e90:	38c00217 	ldw	r3,8(r7)
   89e94:	020002f4 	movhi	r8,11
   89e98:	42231b04 	addi	r8,r8,-29588
   89e9c:	19c00226 	beq	r3,r7,89ea8 <_malloc_r+0x2dc>
   89ea0:	023fff04 	movi	r8,-4
   89ea4:	00000a06 	br	89ed0 <_malloc_r+0x304>
   89ea8:	2009d0ba 	srai	r4,r4,2
   89eac:	00800044 	movi	r2,1
   89eb0:	1108983a 	sll	r4,r2,r4
   89eb4:	40800117 	ldw	r2,4(r8)
   89eb8:	2088b03a 	or	r4,r4,r2
   89ebc:	41000115 	stw	r4,4(r8)
   89ec0:	1805883a 	mov	r2,r3
   89ec4:	00000606 	br	89ee0 <_malloc_r+0x314>
   89ec8:	18c00217 	ldw	r3,8(r3)
   89ecc:	19c00326 	beq	r3,r7,89edc <_malloc_r+0x310>
   89ed0:	19000117 	ldw	r4,4(r3)
   89ed4:	2208703a 	and	r4,r4,r8
   89ed8:	113ffb36 	bltu	r2,r4,89ec8 <__alt_data_end+0xfffd1c58>
   89edc:	18800317 	ldw	r2,12(r3)
   89ee0:	90800315 	stw	r2,12(r18)
   89ee4:	90c00215 	stw	r3,8(r18)
   89ee8:	14800215 	stw	r18,8(r2)
   89eec:	1c800315 	stw	r18,12(r3)
   89ef0:	2805d0ba 	srai	r2,r5,2
   89ef4:	00c00044 	movi	r3,1
   89ef8:	1886983a 	sll	r3,r3,r2
   89efc:	88800117 	ldw	r2,4(r17)
   89f00:	10c04b36 	bltu	r2,r3,8a030 <_malloc_r+0x464>
   89f04:	1888703a 	and	r4,r3,r2
   89f08:	2000061e 	bne	r4,zero,89f24 <_malloc_r+0x358>
   89f0c:	013fff04 	movi	r4,-4
   89f10:	290a703a 	and	r5,r5,r4
   89f14:	18c7883a 	add	r3,r3,r3
   89f18:	1888703a 	and	r4,r3,r2
   89f1c:	29400104 	addi	r5,r5,4
   89f20:	203ffc26 	beq	r4,zero,89f14 <__alt_data_end+0xfffd1ca4>
   89f24:	02bfff04 	movi	r10,-4
   89f28:	02c003c4 	movi	r11,15
   89f2c:	2945883a 	add	r2,r5,r5
   89f30:	1085883a 	add	r2,r2,r2
   89f34:	1085883a 	add	r2,r2,r2
   89f38:	8885883a 	add	r2,r17,r2
   89f3c:	1011883a 	mov	r8,r2
   89f40:	280f883a 	mov	r7,r5
   89f44:	44800317 	ldw	r18,12(r8)
   89f48:	00000106 	br	89f50 <_malloc_r+0x384>
   89f4c:	94800317 	ldw	r18,12(r18)
   89f50:	92001e26 	beq	r18,r8,89fcc <_malloc_r+0x400>
   89f54:	92400117 	ldw	r9,4(r18)
   89f58:	4a92703a 	and	r9,r9,r10
   89f5c:	4c09c83a 	sub	r4,r9,r16
   89f60:	5900100e 	bge	r11,r4,89fa4 <_malloc_r+0x3d8>
   89f64:	90c00317 	ldw	r3,12(r18)
   89f68:	91400217 	ldw	r5,8(r18)
   89f6c:	9405883a 	add	r2,r18,r16
   89f70:	84000054 	ori	r16,r16,1
   89f74:	94000115 	stw	r16,4(r18)
   89f78:	28c00315 	stw	r3,12(r5)
   89f7c:	19400215 	stw	r5,8(r3)
   89f80:	88800515 	stw	r2,20(r17)
   89f84:	88800415 	stw	r2,16(r17)
   89f88:	20c00054 	ori	r3,r4,1
   89f8c:	11800315 	stw	r6,12(r2)
   89f90:	11800215 	stw	r6,8(r2)
   89f94:	10c00115 	stw	r3,4(r2)
   89f98:	1105883a 	add	r2,r2,r4
   89f9c:	11000015 	stw	r4,0(r2)
   89fa0:	00009b06 	br	8a210 <_malloc_r+0x644>
   89fa4:	203fe916 	blt	r4,zero,89f4c <__alt_data_end+0xfffd1cdc>
   89fa8:	9245883a 	add	r2,r18,r9
   89fac:	10c00117 	ldw	r3,4(r2)
   89fb0:	18c00054 	ori	r3,r3,1
   89fb4:	10c00115 	stw	r3,4(r2)
   89fb8:	90800317 	ldw	r2,12(r18)
   89fbc:	90c00217 	ldw	r3,8(r18)
   89fc0:	18800315 	stw	r2,12(r3)
   89fc4:	10c00215 	stw	r3,8(r2)
   89fc8:	00009106 	br	8a210 <_malloc_r+0x644>
   89fcc:	39c00044 	addi	r7,r7,1
   89fd0:	390000cc 	andi	r4,r7,3
   89fd4:	42000204 	addi	r8,r8,8
   89fd8:	203fda1e 	bne	r4,zero,89f44 <__alt_data_end+0xfffd1cd4>
   89fdc:	290000cc 	andi	r4,r5,3
   89fe0:	2000051e 	bne	r4,zero,89ff8 <_malloc_r+0x42c>
   89fe4:	89000117 	ldw	r4,4(r17)
   89fe8:	00c4303a 	nor	r2,zero,r3
   89fec:	1104703a 	and	r2,r2,r4
   89ff0:	88800115 	stw	r2,4(r17)
   89ff4:	00000406 	br	8a008 <_malloc_r+0x43c>
   89ff8:	113ffe04 	addi	r4,r2,-8
   89ffc:	10800017 	ldw	r2,0(r2)
   8a000:	297fffc4 	addi	r5,r5,-1
   8a004:	113ff526 	beq	r2,r4,89fdc <__alt_data_end+0xfffd1d6c>
   8a008:	88800117 	ldw	r2,4(r17)
   8a00c:	18c7883a 	add	r3,r3,r3
   8a010:	10c00736 	bltu	r2,r3,8a030 <_malloc_r+0x464>
   8a014:	18000626 	beq	r3,zero,8a030 <_malloc_r+0x464>
   8a018:	380b883a 	mov	r5,r7
   8a01c:	1888703a 	and	r4,r3,r2
   8a020:	203fc21e 	bne	r4,zero,89f2c <__alt_data_end+0xfffd1cbc>
   8a024:	29400104 	addi	r5,r5,4
   8a028:	18c7883a 	add	r3,r3,r3
   8a02c:	003ffb06 	br	8a01c <__alt_data_end+0xfffd1dac>
   8a030:	8d000217 	ldw	r20,8(r17)
   8a034:	00bfff04 	movi	r2,-4
   8a038:	a5400117 	ldw	r21,4(r20)
   8a03c:	a8aa703a 	and	r21,r21,r2
   8a040:	ac000336 	bltu	r21,r16,8a050 <_malloc_r+0x484>
   8a044:	ac07c83a 	sub	r3,r21,r16
   8a048:	008003c4 	movi	r2,15
   8a04c:	10c06916 	blt	r2,r3,8a1f4 <_malloc_r+0x628>
   8a050:	d5accc17 	ldw	r22,-19664(gp)
   8a054:	d0a00517 	ldw	r2,-32748(gp)
   8a058:	05ffffc4 	movi	r23,-1
   8a05c:	a579883a 	add	fp,r20,r21
   8a060:	85ad883a 	add	r22,r16,r22
   8a064:	15c0021e 	bne	r2,r23,8a070 <_malloc_r+0x4a4>
   8a068:	b5800404 	addi	r22,r22,16
   8a06c:	00000306 	br	8a07c <_malloc_r+0x4b0>
   8a070:	b58023c4 	addi	r22,r22,143
   8a074:	00bfe004 	movi	r2,-128
   8a078:	b0ac703a 	and	r22,r22,r2
   8a07c:	9809883a 	mov	r4,r19
   8a080:	b00b883a 	mov	r5,r22
   8a084:	008a3b00 	call	8a3b0 <_sbrk_r>
   8a088:	1025883a 	mov	r18,r2
   8a08c:	15c04d26 	beq	r2,r23,8a1c4 <_malloc_r+0x5f8>
   8a090:	1700012e 	bgeu	r2,fp,8a098 <_malloc_r+0x4cc>
   8a094:	a4404b1e 	bne	r20,r17,8a1c4 <_malloc_r+0x5f8>
   8a098:	05c002f4 	movhi	r23,11
   8a09c:	bdf57304 	addi	r23,r23,-10804
   8a0a0:	b8800017 	ldw	r2,0(r23)
   8a0a4:	b085883a 	add	r2,r22,r2
   8a0a8:	b8800015 	stw	r2,0(r23)
   8a0ac:	9700071e 	bne	r18,fp,8a0cc <_malloc_r+0x500>
   8a0b0:	90c01fcc 	andi	r3,r18,127
   8a0b4:	1800051e 	bne	r3,zero,8a0cc <_malloc_r+0x500>
   8a0b8:	88800217 	ldw	r2,8(r17)
   8a0bc:	b56b883a 	add	r21,r22,r21
   8a0c0:	ad400054 	ori	r21,r21,1
   8a0c4:	15400115 	stw	r21,4(r2)
   8a0c8:	00003706 	br	8a1a8 <_malloc_r+0x5dc>
   8a0cc:	d1200517 	ldw	r4,-32748(gp)
   8a0d0:	00ffffc4 	movi	r3,-1
   8a0d4:	20c0021e 	bne	r4,r3,8a0e0 <_malloc_r+0x514>
   8a0d8:	d4a00515 	stw	r18,-32748(gp)
   8a0dc:	00000306 	br	8a0ec <_malloc_r+0x520>
   8a0e0:	9739c83a 	sub	fp,r18,fp
   8a0e4:	1705883a 	add	r2,r2,fp
   8a0e8:	b8800015 	stw	r2,0(r23)
   8a0ec:	908001cc 	andi	r2,r18,7
   8a0f0:	10000426 	beq	r2,zero,8a104 <_malloc_r+0x538>
   8a0f4:	00c00204 	movi	r3,8
   8a0f8:	1885c83a 	sub	r2,r3,r2
   8a0fc:	90a5883a 	add	r18,r18,r2
   8a100:	00000106 	br	8a108 <_malloc_r+0x53c>
   8a104:	0005883a 	mov	r2,zero
   8a108:	95ad883a 	add	r22,r18,r22
   8a10c:	10802004 	addi	r2,r2,128
   8a110:	b5801fcc 	andi	r22,r22,127
   8a114:	15adc83a 	sub	r22,r2,r22
   8a118:	9809883a 	mov	r4,r19
   8a11c:	b00b883a 	mov	r5,r22
   8a120:	008a3b00 	call	8a3b0 <_sbrk_r>
   8a124:	00ffffc4 	movi	r3,-1
   8a128:	10c0021e 	bne	r2,r3,8a134 <_malloc_r+0x568>
   8a12c:	9005883a 	mov	r2,r18
   8a130:	002d883a 	mov	r22,zero
   8a134:	b8c00017 	ldw	r3,0(r23)
   8a138:	1485c83a 	sub	r2,r2,r18
   8a13c:	8c800215 	stw	r18,8(r17)
   8a140:	b0c7883a 	add	r3,r22,r3
   8a144:	15ad883a 	add	r22,r2,r22
   8a148:	b5800054 	ori	r22,r22,1
   8a14c:	b8c00015 	stw	r3,0(r23)
   8a150:	95800115 	stw	r22,4(r18)
   8a154:	a4401426 	beq	r20,r17,8a1a8 <_malloc_r+0x5dc>
   8a158:	008003c4 	movi	r2,15
   8a15c:	15400336 	bltu	r2,r21,8a16c <_malloc_r+0x5a0>
   8a160:	00800044 	movi	r2,1
   8a164:	90800115 	stw	r2,4(r18)
   8a168:	00001606 	br	8a1c4 <_malloc_r+0x5f8>
   8a16c:	00fffe04 	movi	r3,-8
   8a170:	ad7ffd04 	addi	r21,r21,-12
   8a174:	a8ea703a 	and	r21,r21,r3
   8a178:	a0c00117 	ldw	r3,4(r20)
   8a17c:	01000144 	movi	r4,5
   8a180:	18c0004c 	andi	r3,r3,1
   8a184:	a8c6b03a 	or	r3,r21,r3
   8a188:	a0c00115 	stw	r3,4(r20)
   8a18c:	a547883a 	add	r3,r20,r21
   8a190:	19000115 	stw	r4,4(r3)
   8a194:	19000215 	stw	r4,8(r3)
   8a198:	1540032e 	bgeu	r2,r21,8a1a8 <_malloc_r+0x5dc>
   8a19c:	9809883a 	mov	r4,r19
   8a1a0:	a1400204 	addi	r5,r20,8
   8a1a4:	008b2c40 	call	8b2c4 <_free_r>
   8a1a8:	b8800017 	ldw	r2,0(r23)
   8a1ac:	d0eccb17 	ldw	r3,-19668(gp)
   8a1b0:	1880012e 	bgeu	r3,r2,8a1b8 <_malloc_r+0x5ec>
   8a1b4:	d0accb15 	stw	r2,-19668(gp)
   8a1b8:	d0ecca17 	ldw	r3,-19672(gp)
   8a1bc:	1880012e 	bgeu	r3,r2,8a1c4 <_malloc_r+0x5f8>
   8a1c0:	d0acca15 	stw	r2,-19672(gp)
   8a1c4:	88800217 	ldw	r2,8(r17)
   8a1c8:	10c00117 	ldw	r3,4(r2)
   8a1cc:	00bfff04 	movi	r2,-4
   8a1d0:	1884703a 	and	r2,r3,r2
   8a1d4:	1407c83a 	sub	r3,r2,r16
   8a1d8:	14000236 	bltu	r2,r16,8a1e4 <_malloc_r+0x618>
   8a1dc:	008003c4 	movi	r2,15
   8a1e0:	10c00416 	blt	r2,r3,8a1f4 <_malloc_r+0x628>
   8a1e4:	9809883a 	mov	r4,r19
   8a1e8:	008ba400 	call	8ba40 <__malloc_unlock>
   8a1ec:	0005883a 	mov	r2,zero
   8a1f0:	00000a06 	br	8a21c <_malloc_r+0x650>
   8a1f4:	8c800217 	ldw	r18,8(r17)
   8a1f8:	80800054 	ori	r2,r16,1
   8a1fc:	18c00054 	ori	r3,r3,1
   8a200:	90800115 	stw	r2,4(r18)
   8a204:	9421883a 	add	r16,r18,r16
   8a208:	8c000215 	stw	r16,8(r17)
   8a20c:	80c00115 	stw	r3,4(r16)
   8a210:	9809883a 	mov	r4,r19
   8a214:	008ba400 	call	8ba40 <__malloc_unlock>
   8a218:	90800204 	addi	r2,r18,8
   8a21c:	dfc00917 	ldw	ra,36(sp)
   8a220:	df000817 	ldw	fp,32(sp)
   8a224:	ddc00717 	ldw	r23,28(sp)
   8a228:	dd800617 	ldw	r22,24(sp)
   8a22c:	dd400517 	ldw	r21,20(sp)
   8a230:	dd000417 	ldw	r20,16(sp)
   8a234:	dcc00317 	ldw	r19,12(sp)
   8a238:	dc800217 	ldw	r18,8(sp)
   8a23c:	dc400117 	ldw	r17,4(sp)
   8a240:	dc000017 	ldw	r16,0(sp)
   8a244:	dec00a04 	addi	sp,sp,40
   8a248:	f800283a 	ret

0008a24c <memcpy>:
   8a24c:	2005883a 	mov	r2,r4
   8a250:	0007883a 	mov	r3,zero
   8a254:	19800626 	beq	r3,r6,8a270 <memcpy+0x24>
   8a258:	28c9883a 	add	r4,r5,r3
   8a25c:	21c00003 	ldbu	r7,0(r4)
   8a260:	10c9883a 	add	r4,r2,r3
   8a264:	18c00044 	addi	r3,r3,1
   8a268:	21c00005 	stb	r7,0(r4)
   8a26c:	003ff906 	br	8a254 <__alt_data_end+0xfffd1fe4>
   8a270:	f800283a 	ret

0008a274 <memset>:
   8a274:	2005883a 	mov	r2,r4
   8a278:	2007883a 	mov	r3,r4
   8a27c:	218d883a 	add	r6,r4,r6
   8a280:	19800326 	beq	r3,r6,8a290 <memset+0x1c>
   8a284:	19400005 	stb	r5,0(r3)
   8a288:	18c00044 	addi	r3,r3,1
   8a28c:	003ffc06 	br	8a280 <__alt_data_end+0xfffd2010>
   8a290:	f800283a 	ret

0008a294 <_printf_r>:
   8a294:	defffd04 	addi	sp,sp,-12
   8a298:	dfc00015 	stw	ra,0(sp)
   8a29c:	d9800115 	stw	r6,4(sp)
   8a2a0:	d9c00215 	stw	r7,8(sp)
   8a2a4:	20800217 	ldw	r2,8(r4)
   8a2a8:	280d883a 	mov	r6,r5
   8a2ac:	21400217 	ldw	r5,8(r4)
   8a2b0:	00c00274 	movhi	r3,9
   8a2b4:	18ed5704 	addi	r3,r3,-19108
   8a2b8:	10c00115 	stw	r3,4(r2)
   8a2bc:	d9c00104 	addi	r7,sp,4
   8a2c0:	008ab4c0 	call	8ab4c <___vfprintf_internal_r>
   8a2c4:	dfc00017 	ldw	ra,0(sp)
   8a2c8:	dec00304 	addi	sp,sp,12
   8a2cc:	f800283a 	ret

0008a2d0 <printf>:
   8a2d0:	defffc04 	addi	sp,sp,-16
   8a2d4:	dfc00015 	stw	ra,0(sp)
   8a2d8:	d9400115 	stw	r5,4(sp)
   8a2dc:	d9800215 	stw	r6,8(sp)
   8a2e0:	d9c00315 	stw	r7,12(sp)
   8a2e4:	008002f4 	movhi	r2,11
   8a2e8:	10a8a304 	addi	r2,r2,-23924
   8a2ec:	10800017 	ldw	r2,0(r2)
   8a2f0:	200b883a 	mov	r5,r4
   8a2f4:	01000274 	movhi	r4,9
   8a2f8:	212d5704 	addi	r4,r4,-19108
   8a2fc:	10c00217 	ldw	r3,8(r2)
   8a300:	d9800104 	addi	r6,sp,4
   8a304:	19000115 	stw	r4,4(r3)
   8a308:	11000217 	ldw	r4,8(r2)
   8a30c:	008b0840 	call	8b084 <__vfprintf_internal>
   8a310:	dfc00017 	ldw	ra,0(sp)
   8a314:	dec00404 	addi	sp,sp,16
   8a318:	f800283a 	ret

0008a31c <_puts_r>:
   8a31c:	defffd04 	addi	sp,sp,-12
   8a320:	dc000015 	stw	r16,0(sp)
   8a324:	2021883a 	mov	r16,r4
   8a328:	2809883a 	mov	r4,r5
   8a32c:	dfc00215 	stw	ra,8(sp)
   8a330:	dc400115 	stw	r17,4(sp)
   8a334:	2823883a 	mov	r17,r5
   8a338:	008a4fc0 	call	8a4fc <strlen>
   8a33c:	81400217 	ldw	r5,8(r16)
   8a340:	00c00274 	movhi	r3,9
   8a344:	18ed5704 	addi	r3,r3,-19108
   8a348:	8009883a 	mov	r4,r16
   8a34c:	28c00115 	stw	r3,4(r5)
   8a350:	880d883a 	mov	r6,r17
   8a354:	100f883a 	mov	r7,r2
   8a358:	183ee83a 	callr	r3
   8a35c:	00ffffc4 	movi	r3,-1
   8a360:	10c00926 	beq	r2,r3,8a388 <_puts_r+0x6c>
   8a364:	81400217 	ldw	r5,8(r16)
   8a368:	8009883a 	mov	r4,r16
   8a36c:	018002b4 	movhi	r6,10
   8a370:	319bf004 	addi	r6,r6,28608
   8a374:	28800117 	ldw	r2,4(r5)
   8a378:	01c00044 	movi	r7,1
   8a37c:	103ee83a 	callr	r2
   8a380:	10bfffe0 	cmpeqi	r2,r2,-1
   8a384:	0085c83a 	sub	r2,zero,r2
   8a388:	dfc00217 	ldw	ra,8(sp)
   8a38c:	dc400117 	ldw	r17,4(sp)
   8a390:	dc000017 	ldw	r16,0(sp)
   8a394:	dec00304 	addi	sp,sp,12
   8a398:	f800283a 	ret

0008a39c <puts>:
   8a39c:	008002f4 	movhi	r2,11
   8a3a0:	10a8a304 	addi	r2,r2,-23924
   8a3a4:	200b883a 	mov	r5,r4
   8a3a8:	11000017 	ldw	r4,0(r2)
   8a3ac:	008a31c1 	jmpi	8a31c <_puts_r>

0008a3b0 <_sbrk_r>:
   8a3b0:	defffd04 	addi	sp,sp,-12
   8a3b4:	dc400115 	stw	r17,4(sp)
   8a3b8:	dc000015 	stw	r16,0(sp)
   8a3bc:	2023883a 	mov	r17,r4
   8a3c0:	040002f4 	movhi	r16,11
   8a3c4:	84356c04 	addi	r16,r16,-10832
   8a3c8:	2809883a 	mov	r4,r5
   8a3cc:	dfc00215 	stw	ra,8(sp)
   8a3d0:	80000015 	stw	zero,0(r16)
   8a3d4:	008ba440 	call	8ba44 <sbrk>
   8a3d8:	00ffffc4 	movi	r3,-1
   8a3dc:	10c0031e 	bne	r2,r3,8a3ec <_sbrk_r+0x3c>
   8a3e0:	80c00017 	ldw	r3,0(r16)
   8a3e4:	18000126 	beq	r3,zero,8a3ec <_sbrk_r+0x3c>
   8a3e8:	88c00015 	stw	r3,0(r17)
   8a3ec:	dfc00217 	ldw	ra,8(sp)
   8a3f0:	dc400117 	ldw	r17,4(sp)
   8a3f4:	dc000017 	ldw	r16,0(sp)
   8a3f8:	dec00304 	addi	sp,sp,12
   8a3fc:	f800283a 	ret

0008a400 <_sprintf_r>:
   8a400:	defff704 	addi	sp,sp,-36
   8a404:	dfc00715 	stw	ra,28(sp)
   8a408:	d9c00815 	stw	r7,32(sp)
   8a40c:	00808204 	movi	r2,520
   8a410:	d880000d 	sth	r2,0(sp)
   8a414:	00a00034 	movhi	r2,32768
   8a418:	10bfffc4 	addi	r2,r2,-1
   8a41c:	d8800515 	stw	r2,20(sp)
   8a420:	d8800315 	stw	r2,12(sp)
   8a424:	00bfffc4 	movi	r2,-1
   8a428:	d9400415 	stw	r5,16(sp)
   8a42c:	d9400215 	stw	r5,8(sp)
   8a430:	d880008d 	sth	r2,2(sp)
   8a434:	d80b883a 	mov	r5,sp
   8a438:	00800274 	movhi	r2,9
   8a43c:	10ad8204 	addi	r2,r2,-18936
   8a440:	d9c00804 	addi	r7,sp,32
   8a444:	d8800115 	stw	r2,4(sp)
   8a448:	d8000615 	stw	zero,24(sp)
   8a44c:	008a5840 	call	8a584 <___svfprintf_internal_r>
   8a450:	d8c00417 	ldw	r3,16(sp)
   8a454:	18000005 	stb	zero,0(r3)
   8a458:	dfc00717 	ldw	ra,28(sp)
   8a45c:	dec00904 	addi	sp,sp,36
   8a460:	f800283a 	ret

0008a464 <sprintf>:
   8a464:	defff604 	addi	sp,sp,-40
   8a468:	dfc00715 	stw	ra,28(sp)
   8a46c:	d9800815 	stw	r6,32(sp)
   8a470:	d9c00915 	stw	r7,36(sp)
   8a474:	00808204 	movi	r2,520
   8a478:	d880000d 	sth	r2,0(sp)
   8a47c:	00a00034 	movhi	r2,32768
   8a480:	10bfffc4 	addi	r2,r2,-1
   8a484:	d8800515 	stw	r2,20(sp)
   8a488:	d8800315 	stw	r2,12(sp)
   8a48c:	00bfffc4 	movi	r2,-1
   8a490:	d880008d 	sth	r2,2(sp)
   8a494:	00800274 	movhi	r2,9
   8a498:	10ad8204 	addi	r2,r2,-18936
   8a49c:	d8800115 	stw	r2,4(sp)
   8a4a0:	008002f4 	movhi	r2,11
   8a4a4:	10a8a304 	addi	r2,r2,-23924
   8a4a8:	d9000415 	stw	r4,16(sp)
   8a4ac:	d9000215 	stw	r4,8(sp)
   8a4b0:	11000017 	ldw	r4,0(r2)
   8a4b4:	280d883a 	mov	r6,r5
   8a4b8:	d9c00804 	addi	r7,sp,32
   8a4bc:	d80b883a 	mov	r5,sp
   8a4c0:	d8000615 	stw	zero,24(sp)
   8a4c4:	008a5840 	call	8a584 <___svfprintf_internal_r>
   8a4c8:	d8c00417 	ldw	r3,16(sp)
   8a4cc:	18000005 	stb	zero,0(r3)
   8a4d0:	dfc00717 	ldw	ra,28(sp)
   8a4d4:	dec00a04 	addi	sp,sp,40
   8a4d8:	f800283a 	ret

0008a4dc <strcpy>:
   8a4dc:	2005883a 	mov	r2,r4
   8a4e0:	2007883a 	mov	r3,r4
   8a4e4:	29000007 	ldb	r4,0(r5)
   8a4e8:	18c00044 	addi	r3,r3,1
   8a4ec:	29400044 	addi	r5,r5,1
   8a4f0:	193fffc5 	stb	r4,-1(r3)
   8a4f4:	203ffb1e 	bne	r4,zero,8a4e4 <__alt_data_end+0xfffd2274>
   8a4f8:	f800283a 	ret

0008a4fc <strlen>:
   8a4fc:	2005883a 	mov	r2,r4
   8a500:	10c00007 	ldb	r3,0(r2)
   8a504:	18000226 	beq	r3,zero,8a510 <strlen+0x14>
   8a508:	10800044 	addi	r2,r2,1
   8a50c:	003ffc06 	br	8a500 <__alt_data_end+0xfffd2290>
   8a510:	1105c83a 	sub	r2,r2,r4
   8a514:	f800283a 	ret

0008a518 <print_repeat>:
   8a518:	defffb04 	addi	sp,sp,-20
   8a51c:	dc800315 	stw	r18,12(sp)
   8a520:	dc400215 	stw	r17,8(sp)
   8a524:	dc000115 	stw	r16,4(sp)
   8a528:	dfc00415 	stw	ra,16(sp)
   8a52c:	2025883a 	mov	r18,r4
   8a530:	2823883a 	mov	r17,r5
   8a534:	d9800005 	stb	r6,0(sp)
   8a538:	3821883a 	mov	r16,r7
   8a53c:	04000a0e 	bge	zero,r16,8a568 <print_repeat+0x50>
   8a540:	88800117 	ldw	r2,4(r17)
   8a544:	9009883a 	mov	r4,r18
   8a548:	880b883a 	mov	r5,r17
   8a54c:	d80d883a 	mov	r6,sp
   8a550:	01c00044 	movi	r7,1
   8a554:	103ee83a 	callr	r2
   8a558:	843fffc4 	addi	r16,r16,-1
   8a55c:	103ff726 	beq	r2,zero,8a53c <__alt_data_end+0xfffd22cc>
   8a560:	00bfffc4 	movi	r2,-1
   8a564:	00000106 	br	8a56c <print_repeat+0x54>
   8a568:	0005883a 	mov	r2,zero
   8a56c:	dfc00417 	ldw	ra,16(sp)
   8a570:	dc800317 	ldw	r18,12(sp)
   8a574:	dc400217 	ldw	r17,8(sp)
   8a578:	dc000117 	ldw	r16,4(sp)
   8a57c:	dec00504 	addi	sp,sp,20
   8a580:	f800283a 	ret

0008a584 <___svfprintf_internal_r>:
   8a584:	deffe504 	addi	sp,sp,-108
   8a588:	d8c00804 	addi	r3,sp,32
   8a58c:	df001915 	stw	fp,100(sp)
   8a590:	dd801715 	stw	r22,92(sp)
   8a594:	dd401615 	stw	r21,88(sp)
   8a598:	dd001515 	stw	r20,84(sp)
   8a59c:	dcc01415 	stw	r19,80(sp)
   8a5a0:	dc801315 	stw	r18,76(sp)
   8a5a4:	dc401215 	stw	r17,72(sp)
   8a5a8:	dc001115 	stw	r16,68(sp)
   8a5ac:	dfc01a15 	stw	ra,104(sp)
   8a5b0:	ddc01815 	stw	r23,96(sp)
   8a5b4:	2021883a 	mov	r16,r4
   8a5b8:	282b883a 	mov	r21,r5
   8a5bc:	3839883a 	mov	fp,r7
   8a5c0:	d9800f15 	stw	r6,60(sp)
   8a5c4:	002d883a 	mov	r22,zero
   8a5c8:	d8000e15 	stw	zero,56(sp)
   8a5cc:	0027883a 	mov	r19,zero
   8a5d0:	d8000a15 	stw	zero,40(sp)
   8a5d4:	0025883a 	mov	r18,zero
   8a5d8:	0023883a 	mov	r17,zero
   8a5dc:	d8000c15 	stw	zero,48(sp)
   8a5e0:	d8000b15 	stw	zero,44(sp)
   8a5e4:	0029883a 	mov	r20,zero
   8a5e8:	d8c00915 	stw	r3,36(sp)
   8a5ec:	d8c00f17 	ldw	r3,60(sp)
   8a5f0:	19000003 	ldbu	r4,0(r3)
   8a5f4:	20803fcc 	andi	r2,r4,255
   8a5f8:	1080201c 	xori	r2,r2,128
   8a5fc:	10bfe004 	addi	r2,r2,-128
   8a600:	10011e26 	beq	r2,zero,8aa7c <___svfprintf_internal_r+0x4f8>
   8a604:	00c00044 	movi	r3,1
   8a608:	a0c01426 	beq	r20,r3,8a65c <___svfprintf_internal_r+0xd8>
   8a60c:	1d000216 	blt	r3,r20,8a618 <___svfprintf_internal_r+0x94>
   8a610:	a0000626 	beq	r20,zero,8a62c <___svfprintf_internal_r+0xa8>
   8a614:	00011506 	br	8aa6c <___svfprintf_internal_r+0x4e8>
   8a618:	01400084 	movi	r5,2
   8a61c:	a1401d26 	beq	r20,r5,8a694 <___svfprintf_internal_r+0x110>
   8a620:	014000c4 	movi	r5,3
   8a624:	a1402926 	beq	r20,r5,8a6cc <___svfprintf_internal_r+0x148>
   8a628:	00011006 	br	8aa6c <___svfprintf_internal_r+0x4e8>
   8a62c:	01400944 	movi	r5,37
   8a630:	1140fc26 	beq	r2,r5,8aa24 <___svfprintf_internal_r+0x4a0>
   8a634:	a8800117 	ldw	r2,4(r21)
   8a638:	d9000005 	stb	r4,0(sp)
   8a63c:	a80b883a 	mov	r5,r21
   8a640:	8009883a 	mov	r4,r16
   8a644:	d80d883a 	mov	r6,sp
   8a648:	01c00044 	movi	r7,1
   8a64c:	103ee83a 	callr	r2
   8a650:	1000d81e 	bne	r2,zero,8a9b4 <___svfprintf_internal_r+0x430>
   8a654:	b5800044 	addi	r22,r22,1
   8a658:	00010406 	br	8aa6c <___svfprintf_internal_r+0x4e8>
   8a65c:	01400c04 	movi	r5,48
   8a660:	1140fa26 	beq	r2,r5,8aa4c <___svfprintf_internal_r+0x4c8>
   8a664:	01400944 	movi	r5,37
   8a668:	11400a1e 	bne	r2,r5,8a694 <___svfprintf_internal_r+0x110>
   8a66c:	d8800005 	stb	r2,0(sp)
   8a670:	a8800117 	ldw	r2,4(r21)
   8a674:	8009883a 	mov	r4,r16
   8a678:	a80b883a 	mov	r5,r21
   8a67c:	d80d883a 	mov	r6,sp
   8a680:	a00f883a 	mov	r7,r20
   8a684:	103ee83a 	callr	r2
   8a688:	1000ca1e 	bne	r2,zero,8a9b4 <___svfprintf_internal_r+0x430>
   8a68c:	b5800044 	addi	r22,r22,1
   8a690:	0000f506 	br	8aa68 <___svfprintf_internal_r+0x4e4>
   8a694:	217ff404 	addi	r5,r4,-48
   8a698:	29403fcc 	andi	r5,r5,255
   8a69c:	00c00244 	movi	r3,9
   8a6a0:	19400736 	bltu	r3,r5,8a6c0 <___svfprintf_internal_r+0x13c>
   8a6a4:	00bfffc4 	movi	r2,-1
   8a6a8:	88800226 	beq	r17,r2,8a6b4 <___svfprintf_internal_r+0x130>
   8a6ac:	8c4002a4 	muli	r17,r17,10
   8a6b0:	00000106 	br	8a6b8 <___svfprintf_internal_r+0x134>
   8a6b4:	0023883a 	mov	r17,zero
   8a6b8:	8963883a 	add	r17,r17,r5
   8a6bc:	0000e406 	br	8aa50 <___svfprintf_internal_r+0x4cc>
   8a6c0:	01400b84 	movi	r5,46
   8a6c4:	1140e626 	beq	r2,r5,8aa60 <___svfprintf_internal_r+0x4dc>
   8a6c8:	05000084 	movi	r20,2
   8a6cc:	213ff404 	addi	r4,r4,-48
   8a6d0:	21003fcc 	andi	r4,r4,255
   8a6d4:	00c00244 	movi	r3,9
   8a6d8:	19000736 	bltu	r3,r4,8a6f8 <___svfprintf_internal_r+0x174>
   8a6dc:	00bfffc4 	movi	r2,-1
   8a6e0:	90800226 	beq	r18,r2,8a6ec <___svfprintf_internal_r+0x168>
   8a6e4:	948002a4 	muli	r18,r18,10
   8a6e8:	00000106 	br	8a6f0 <___svfprintf_internal_r+0x16c>
   8a6ec:	0025883a 	mov	r18,zero
   8a6f0:	9125883a 	add	r18,r18,r4
   8a6f4:	0000dd06 	br	8aa6c <___svfprintf_internal_r+0x4e8>
   8a6f8:	00c01b04 	movi	r3,108
   8a6fc:	10c0d626 	beq	r2,r3,8aa58 <___svfprintf_internal_r+0x4d4>
   8a700:	013fffc4 	movi	r4,-1
   8a704:	9100021e 	bne	r18,r4,8a710 <___svfprintf_internal_r+0x18c>
   8a708:	04800044 	movi	r18,1
   8a70c:	00000106 	br	8a714 <___svfprintf_internal_r+0x190>
   8a710:	d8000b15 	stw	zero,44(sp)
   8a714:	01001a44 	movi	r4,105
   8a718:	11001526 	beq	r2,r4,8a770 <___svfprintf_internal_r+0x1ec>
   8a71c:	20800916 	blt	r4,r2,8a744 <___svfprintf_internal_r+0x1c0>
   8a720:	010018c4 	movi	r4,99
   8a724:	11008c26 	beq	r2,r4,8a958 <___svfprintf_internal_r+0x3d4>
   8a728:	01001904 	movi	r4,100
   8a72c:	11001026 	beq	r2,r4,8a770 <___svfprintf_internal_r+0x1ec>
   8a730:	01001604 	movi	r4,88
   8a734:	1100cc1e 	bne	r2,r4,8aa68 <___svfprintf_internal_r+0x4e4>
   8a738:	00c00044 	movi	r3,1
   8a73c:	d8c00e15 	stw	r3,56(sp)
   8a740:	00001406 	br	8a794 <___svfprintf_internal_r+0x210>
   8a744:	01001cc4 	movi	r4,115
   8a748:	11009c26 	beq	r2,r4,8a9bc <___svfprintf_internal_r+0x438>
   8a74c:	20800316 	blt	r4,r2,8a75c <___svfprintf_internal_r+0x1d8>
   8a750:	01001bc4 	movi	r4,111
   8a754:	1100cb26 	beq	r2,r4,8aa84 <___svfprintf_internal_r+0x500>
   8a758:	0000c306 	br	8aa68 <___svfprintf_internal_r+0x4e4>
   8a75c:	01001d44 	movi	r4,117
   8a760:	11000e26 	beq	r2,r4,8a79c <___svfprintf_internal_r+0x218>
   8a764:	01001e04 	movi	r4,120
   8a768:	11000a26 	beq	r2,r4,8a794 <___svfprintf_internal_r+0x210>
   8a76c:	0000be06 	br	8aa68 <___svfprintf_internal_r+0x4e4>
   8a770:	e5c00104 	addi	r23,fp,4
   8a774:	98000926 	beq	r19,zero,8a79c <___svfprintf_internal_r+0x218>
   8a778:	ddc00d15 	stw	r23,52(sp)
   8a77c:	e7000017 	ldw	fp,0(fp)
   8a780:	e0000b0e 	bge	fp,zero,8a7b0 <___svfprintf_internal_r+0x22c>
   8a784:	04c00044 	movi	r19,1
   8a788:	0739c83a 	sub	fp,zero,fp
   8a78c:	9815883a 	mov	r10,r19
   8a790:	00000906 	br	8a7b8 <___svfprintf_internal_r+0x234>
   8a794:	00c00404 	movi	r3,16
   8a798:	d8c00a15 	stw	r3,40(sp)
   8a79c:	e0c00104 	addi	r3,fp,4
   8a7a0:	d8c00d15 	stw	r3,52(sp)
   8a7a4:	e7000017 	ldw	fp,0(fp)
   8a7a8:	0027883a 	mov	r19,zero
   8a7ac:	00000106 	br	8a7b4 <___svfprintf_internal_r+0x230>
   8a7b0:	04c00044 	movi	r19,1
   8a7b4:	0015883a 	mov	r10,zero
   8a7b8:	002f883a 	mov	r23,zero
   8a7bc:	dde9883a 	add	r20,sp,r23
   8a7c0:	e0001526 	beq	fp,zero,8a818 <___svfprintf_internal_r+0x294>
   8a7c4:	d9400a17 	ldw	r5,40(sp)
   8a7c8:	e009883a 	mov	r4,fp
   8a7cc:	da801015 	stw	r10,64(sp)
   8a7d0:	00877d80 	call	877d8 <__udivsi3>
   8a7d4:	d8c00a17 	ldw	r3,40(sp)
   8a7d8:	da801017 	ldw	r10,64(sp)
   8a7dc:	1889383a 	mul	r4,r3,r2
   8a7e0:	00c00244 	movi	r3,9
   8a7e4:	e139c83a 	sub	fp,fp,r4
   8a7e8:	1f000216 	blt	r3,fp,8a7f4 <___svfprintf_internal_r+0x270>
   8a7ec:	e7000c04 	addi	fp,fp,48
   8a7f0:	00000506 	br	8a808 <___svfprintf_internal_r+0x284>
   8a7f4:	d8c00e17 	ldw	r3,56(sp)
   8a7f8:	18000226 	beq	r3,zero,8a804 <___svfprintf_internal_r+0x280>
   8a7fc:	e7000dc4 	addi	fp,fp,55
   8a800:	00000106 	br	8a808 <___svfprintf_internal_r+0x284>
   8a804:	e70015c4 	addi	fp,fp,87
   8a808:	a7000005 	stb	fp,0(r20)
   8a80c:	bdc00044 	addi	r23,r23,1
   8a810:	1039883a 	mov	fp,r2
   8a814:	003fe906 	br	8a7bc <__alt_data_end+0xfffd254c>
   8a818:	a6f9c83a 	sub	fp,r20,sp
   8a81c:	9709c83a 	sub	r4,r18,fp
   8a820:	01000d0e 	bge	zero,r4,8a858 <___svfprintf_internal_r+0x2d4>
   8a824:	a005883a 	mov	r2,r20
   8a828:	a10b883a 	add	r5,r20,r4
   8a82c:	01800c04 	movi	r6,48
   8a830:	d8c00917 	ldw	r3,36(sp)
   8a834:	10c0062e 	bgeu	r2,r3,8a850 <___svfprintf_internal_r+0x2cc>
   8a838:	11000044 	addi	r4,r2,1
   8a83c:	11800005 	stb	r6,0(r2)
   8a840:	2029883a 	mov	r20,r4
   8a844:	21400326 	beq	r4,r5,8a854 <___svfprintf_internal_r+0x2d0>
   8a848:	2005883a 	mov	r2,r4
   8a84c:	003ff806 	br	8a830 <__alt_data_end+0xfffd25c0>
   8a850:	1029883a 	mov	r20,r2
   8a854:	a6f9c83a 	sub	fp,r20,sp
   8a858:	d8c00b17 	ldw	r3,44(sp)
   8a85c:	e293883a 	add	r9,fp,r10
   8a860:	8a6fc83a 	sub	r23,r17,r9
   8a864:	18001626 	beq	r3,zero,8a8c0 <___svfprintf_internal_r+0x33c>
   8a868:	50000a26 	beq	r10,zero,8a894 <___svfprintf_internal_r+0x310>
   8a86c:	00800b44 	movi	r2,45
   8a870:	d8800805 	stb	r2,32(sp)
   8a874:	a8800117 	ldw	r2,4(r21)
   8a878:	8009883a 	mov	r4,r16
   8a87c:	a80b883a 	mov	r5,r21
   8a880:	d9800804 	addi	r6,sp,32
   8a884:	01c00044 	movi	r7,1
   8a888:	103ee83a 	callr	r2
   8a88c:	1000491e 	bne	r2,zero,8a9b4 <___svfprintf_internal_r+0x430>
   8a890:	b5800044 	addi	r22,r22,1
   8a894:	05c0070e 	bge	zero,r23,8a8b4 <___svfprintf_internal_r+0x330>
   8a898:	8009883a 	mov	r4,r16
   8a89c:	a80b883a 	mov	r5,r21
   8a8a0:	01800c04 	movi	r6,48
   8a8a4:	b80f883a 	mov	r7,r23
   8a8a8:	008a5180 	call	8a518 <print_repeat>
   8a8ac:	1000411e 	bne	r2,zero,8a9b4 <___svfprintf_internal_r+0x430>
   8a8b0:	b5ed883a 	add	r22,r22,r23
   8a8b4:	b52d883a 	add	r22,r22,r20
   8a8b8:	e539c83a 	sub	fp,fp,r20
   8a8bc:	00002006 	br	8a940 <___svfprintf_internal_r+0x3bc>
   8a8c0:	05c0090e 	bge	zero,r23,8a8e8 <___svfprintf_internal_r+0x364>
   8a8c4:	8009883a 	mov	r4,r16
   8a8c8:	a80b883a 	mov	r5,r21
   8a8cc:	01800804 	movi	r6,32
   8a8d0:	b80f883a 	mov	r7,r23
   8a8d4:	da801015 	stw	r10,64(sp)
   8a8d8:	008a5180 	call	8a518 <print_repeat>
   8a8dc:	da801017 	ldw	r10,64(sp)
   8a8e0:	1000341e 	bne	r2,zero,8a9b4 <___svfprintf_internal_r+0x430>
   8a8e4:	b5ed883a 	add	r22,r22,r23
   8a8e8:	503ff226 	beq	r10,zero,8a8b4 <__alt_data_end+0xfffd2644>
   8a8ec:	00800b44 	movi	r2,45
   8a8f0:	d8800805 	stb	r2,32(sp)
   8a8f4:	a8800117 	ldw	r2,4(r21)
   8a8f8:	8009883a 	mov	r4,r16
   8a8fc:	a80b883a 	mov	r5,r21
   8a900:	d9800804 	addi	r6,sp,32
   8a904:	01c00044 	movi	r7,1
   8a908:	103ee83a 	callr	r2
   8a90c:	1000291e 	bne	r2,zero,8a9b4 <___svfprintf_internal_r+0x430>
   8a910:	b5800044 	addi	r22,r22,1
   8a914:	003fe706 	br	8a8b4 <__alt_data_end+0xfffd2644>
   8a918:	a53fffc4 	addi	r20,r20,-1
   8a91c:	a0800003 	ldbu	r2,0(r20)
   8a920:	8009883a 	mov	r4,r16
   8a924:	a80b883a 	mov	r5,r21
   8a928:	d8800805 	stb	r2,32(sp)
   8a92c:	a8800117 	ldw	r2,4(r21)
   8a930:	d9800804 	addi	r6,sp,32
   8a934:	01c00044 	movi	r7,1
   8a938:	103ee83a 	callr	r2
   8a93c:	10001d1e 	bne	r2,zero,8a9b4 <___svfprintf_internal_r+0x430>
   8a940:	e505883a 	add	r2,fp,r20
   8a944:	b507c83a 	sub	r3,r22,r20
   8a948:	00bff316 	blt	zero,r2,8a918 <__alt_data_end+0xfffd26a8>
   8a94c:	182d883a 	mov	r22,r3
   8a950:	df000d17 	ldw	fp,52(sp)
   8a954:	00004406 	br	8aa68 <___svfprintf_internal_r+0x4e4>
   8a958:	00800044 	movi	r2,1
   8a95c:	1440080e 	bge	r2,r17,8a980 <___svfprintf_internal_r+0x3fc>
   8a960:	8d3fffc4 	addi	r20,r17,-1
   8a964:	8009883a 	mov	r4,r16
   8a968:	a80b883a 	mov	r5,r21
   8a96c:	01800804 	movi	r6,32
   8a970:	a00f883a 	mov	r7,r20
   8a974:	008a5180 	call	8a518 <print_repeat>
   8a978:	10000e1e 	bne	r2,zero,8a9b4 <___svfprintf_internal_r+0x430>
   8a97c:	b52d883a 	add	r22,r22,r20
   8a980:	e0800017 	ldw	r2,0(fp)
   8a984:	8009883a 	mov	r4,r16
   8a988:	a80b883a 	mov	r5,r21
   8a98c:	d8800005 	stb	r2,0(sp)
   8a990:	a8800117 	ldw	r2,4(r21)
   8a994:	d80d883a 	mov	r6,sp
   8a998:	01c00044 	movi	r7,1
   8a99c:	e5000104 	addi	r20,fp,4
   8a9a0:	103ee83a 	callr	r2
   8a9a4:	1000031e 	bne	r2,zero,8a9b4 <___svfprintf_internal_r+0x430>
   8a9a8:	b5800044 	addi	r22,r22,1
   8a9ac:	a039883a 	mov	fp,r20
   8a9b0:	00002d06 	br	8aa68 <___svfprintf_internal_r+0x4e4>
   8a9b4:	00bfffc4 	movi	r2,-1
   8a9b8:	00003406 	br	8aa8c <___svfprintf_internal_r+0x508>
   8a9bc:	e5000017 	ldw	r20,0(fp)
   8a9c0:	e5c00104 	addi	r23,fp,4
   8a9c4:	a009883a 	mov	r4,r20
   8a9c8:	008a4fc0 	call	8a4fc <strlen>
   8a9cc:	8893c83a 	sub	r9,r17,r2
   8a9d0:	1039883a 	mov	fp,r2
   8a9d4:	0240090e 	bge	zero,r9,8a9fc <___svfprintf_internal_r+0x478>
   8a9d8:	480f883a 	mov	r7,r9
   8a9dc:	8009883a 	mov	r4,r16
   8a9e0:	a80b883a 	mov	r5,r21
   8a9e4:	01800804 	movi	r6,32
   8a9e8:	da401015 	stw	r9,64(sp)
   8a9ec:	008a5180 	call	8a518 <print_repeat>
   8a9f0:	da401017 	ldw	r9,64(sp)
   8a9f4:	103fef1e 	bne	r2,zero,8a9b4 <__alt_data_end+0xfffd2744>
   8a9f8:	b26d883a 	add	r22,r22,r9
   8a9fc:	a8800117 	ldw	r2,4(r21)
   8aa00:	8009883a 	mov	r4,r16
   8aa04:	a80b883a 	mov	r5,r21
   8aa08:	a00d883a 	mov	r6,r20
   8aa0c:	e00f883a 	mov	r7,fp
   8aa10:	103ee83a 	callr	r2
   8aa14:	103fe71e 	bne	r2,zero,8a9b4 <__alt_data_end+0xfffd2744>
   8aa18:	b72d883a 	add	r22,r22,fp
   8aa1c:	b839883a 	mov	fp,r23
   8aa20:	00001106 	br	8aa68 <___svfprintf_internal_r+0x4e4>
   8aa24:	04c00044 	movi	r19,1
   8aa28:	00c00284 	movi	r3,10
   8aa2c:	04bfffc4 	movi	r18,-1
   8aa30:	d8000e15 	stw	zero,56(sp)
   8aa34:	d8c00a15 	stw	r3,40(sp)
   8aa38:	9023883a 	mov	r17,r18
   8aa3c:	d8000c15 	stw	zero,48(sp)
   8aa40:	d8000b15 	stw	zero,44(sp)
   8aa44:	9829883a 	mov	r20,r19
   8aa48:	00000806 	br	8aa6c <___svfprintf_internal_r+0x4e8>
   8aa4c:	dd000b15 	stw	r20,44(sp)
   8aa50:	05000084 	movi	r20,2
   8aa54:	00000506 	br	8aa6c <___svfprintf_internal_r+0x4e8>
   8aa58:	00c00044 	movi	r3,1
   8aa5c:	d8c00c15 	stw	r3,48(sp)
   8aa60:	050000c4 	movi	r20,3
   8aa64:	00000106 	br	8aa6c <___svfprintf_internal_r+0x4e8>
   8aa68:	0029883a 	mov	r20,zero
   8aa6c:	d8c00f17 	ldw	r3,60(sp)
   8aa70:	18c00044 	addi	r3,r3,1
   8aa74:	d8c00f15 	stw	r3,60(sp)
   8aa78:	003edc06 	br	8a5ec <__alt_data_end+0xfffd237c>
   8aa7c:	b005883a 	mov	r2,r22
   8aa80:	00000206 	br	8aa8c <___svfprintf_internal_r+0x508>
   8aa84:	00c00204 	movi	r3,8
   8aa88:	003f4306 	br	8a798 <__alt_data_end+0xfffd2528>
   8aa8c:	dfc01a17 	ldw	ra,104(sp)
   8aa90:	df001917 	ldw	fp,100(sp)
   8aa94:	ddc01817 	ldw	r23,96(sp)
   8aa98:	dd801717 	ldw	r22,92(sp)
   8aa9c:	dd401617 	ldw	r21,88(sp)
   8aaa0:	dd001517 	ldw	r20,84(sp)
   8aaa4:	dcc01417 	ldw	r19,80(sp)
   8aaa8:	dc801317 	ldw	r18,76(sp)
   8aaac:	dc401217 	ldw	r17,72(sp)
   8aab0:	dc001117 	ldw	r16,68(sp)
   8aab4:	dec01b04 	addi	sp,sp,108
   8aab8:	f800283a 	ret

0008aabc <__vfprintf_internal_unused>:
   8aabc:	2007883a 	mov	r3,r4
   8aac0:	010002f4 	movhi	r4,11
   8aac4:	2128a304 	addi	r4,r4,-23924
   8aac8:	21000017 	ldw	r4,0(r4)
   8aacc:	2805883a 	mov	r2,r5
   8aad0:	300f883a 	mov	r7,r6
   8aad4:	180b883a 	mov	r5,r3
   8aad8:	100d883a 	mov	r6,r2
   8aadc:	008a5841 	jmpi	8a584 <___svfprintf_internal_r>

0008aae0 <print_repeat>:
   8aae0:	defffb04 	addi	sp,sp,-20
   8aae4:	dc800315 	stw	r18,12(sp)
   8aae8:	dc400215 	stw	r17,8(sp)
   8aaec:	dc000115 	stw	r16,4(sp)
   8aaf0:	dfc00415 	stw	ra,16(sp)
   8aaf4:	2025883a 	mov	r18,r4
   8aaf8:	2823883a 	mov	r17,r5
   8aafc:	d9800005 	stb	r6,0(sp)
   8ab00:	3821883a 	mov	r16,r7
   8ab04:	04000a0e 	bge	zero,r16,8ab30 <print_repeat+0x50>
   8ab08:	88800117 	ldw	r2,4(r17)
   8ab0c:	9009883a 	mov	r4,r18
   8ab10:	880b883a 	mov	r5,r17
   8ab14:	d80d883a 	mov	r6,sp
   8ab18:	01c00044 	movi	r7,1
   8ab1c:	103ee83a 	callr	r2
   8ab20:	843fffc4 	addi	r16,r16,-1
   8ab24:	103ff726 	beq	r2,zero,8ab04 <__alt_data_end+0xfffd2894>
   8ab28:	00bfffc4 	movi	r2,-1
   8ab2c:	00000106 	br	8ab34 <print_repeat+0x54>
   8ab30:	0005883a 	mov	r2,zero
   8ab34:	dfc00417 	ldw	ra,16(sp)
   8ab38:	dc800317 	ldw	r18,12(sp)
   8ab3c:	dc400217 	ldw	r17,8(sp)
   8ab40:	dc000117 	ldw	r16,4(sp)
   8ab44:	dec00504 	addi	sp,sp,20
   8ab48:	f800283a 	ret

0008ab4c <___vfprintf_internal_r>:
   8ab4c:	deffe504 	addi	sp,sp,-108
   8ab50:	d8c00804 	addi	r3,sp,32
   8ab54:	df001915 	stw	fp,100(sp)
   8ab58:	dd801715 	stw	r22,92(sp)
   8ab5c:	dd401615 	stw	r21,88(sp)
   8ab60:	dd001515 	stw	r20,84(sp)
   8ab64:	dcc01415 	stw	r19,80(sp)
   8ab68:	dc801315 	stw	r18,76(sp)
   8ab6c:	dc401215 	stw	r17,72(sp)
   8ab70:	dc001115 	stw	r16,68(sp)
   8ab74:	dfc01a15 	stw	ra,104(sp)
   8ab78:	ddc01815 	stw	r23,96(sp)
   8ab7c:	2021883a 	mov	r16,r4
   8ab80:	282b883a 	mov	r21,r5
   8ab84:	3839883a 	mov	fp,r7
   8ab88:	d9800f15 	stw	r6,60(sp)
   8ab8c:	002d883a 	mov	r22,zero
   8ab90:	d8000e15 	stw	zero,56(sp)
   8ab94:	0027883a 	mov	r19,zero
   8ab98:	d8000a15 	stw	zero,40(sp)
   8ab9c:	0025883a 	mov	r18,zero
   8aba0:	0023883a 	mov	r17,zero
   8aba4:	d8000c15 	stw	zero,48(sp)
   8aba8:	d8000b15 	stw	zero,44(sp)
   8abac:	0029883a 	mov	r20,zero
   8abb0:	d8c00915 	stw	r3,36(sp)
   8abb4:	d8c00f17 	ldw	r3,60(sp)
   8abb8:	19000003 	ldbu	r4,0(r3)
   8abbc:	20803fcc 	andi	r2,r4,255
   8abc0:	1080201c 	xori	r2,r2,128
   8abc4:	10bfe004 	addi	r2,r2,-128
   8abc8:	10011e26 	beq	r2,zero,8b044 <___vfprintf_internal_r+0x4f8>
   8abcc:	00c00044 	movi	r3,1
   8abd0:	a0c01426 	beq	r20,r3,8ac24 <___vfprintf_internal_r+0xd8>
   8abd4:	1d000216 	blt	r3,r20,8abe0 <___vfprintf_internal_r+0x94>
   8abd8:	a0000626 	beq	r20,zero,8abf4 <___vfprintf_internal_r+0xa8>
   8abdc:	00011506 	br	8b034 <___vfprintf_internal_r+0x4e8>
   8abe0:	01400084 	movi	r5,2
   8abe4:	a1401d26 	beq	r20,r5,8ac5c <___vfprintf_internal_r+0x110>
   8abe8:	014000c4 	movi	r5,3
   8abec:	a1402926 	beq	r20,r5,8ac94 <___vfprintf_internal_r+0x148>
   8abf0:	00011006 	br	8b034 <___vfprintf_internal_r+0x4e8>
   8abf4:	01400944 	movi	r5,37
   8abf8:	1140fc26 	beq	r2,r5,8afec <___vfprintf_internal_r+0x4a0>
   8abfc:	a8800117 	ldw	r2,4(r21)
   8ac00:	d9000005 	stb	r4,0(sp)
   8ac04:	a80b883a 	mov	r5,r21
   8ac08:	8009883a 	mov	r4,r16
   8ac0c:	d80d883a 	mov	r6,sp
   8ac10:	01c00044 	movi	r7,1
   8ac14:	103ee83a 	callr	r2
   8ac18:	1000d81e 	bne	r2,zero,8af7c <___vfprintf_internal_r+0x430>
   8ac1c:	b5800044 	addi	r22,r22,1
   8ac20:	00010406 	br	8b034 <___vfprintf_internal_r+0x4e8>
   8ac24:	01400c04 	movi	r5,48
   8ac28:	1140fa26 	beq	r2,r5,8b014 <___vfprintf_internal_r+0x4c8>
   8ac2c:	01400944 	movi	r5,37
   8ac30:	11400a1e 	bne	r2,r5,8ac5c <___vfprintf_internal_r+0x110>
   8ac34:	d8800005 	stb	r2,0(sp)
   8ac38:	a8800117 	ldw	r2,4(r21)
   8ac3c:	8009883a 	mov	r4,r16
   8ac40:	a80b883a 	mov	r5,r21
   8ac44:	d80d883a 	mov	r6,sp
   8ac48:	a00f883a 	mov	r7,r20
   8ac4c:	103ee83a 	callr	r2
   8ac50:	1000ca1e 	bne	r2,zero,8af7c <___vfprintf_internal_r+0x430>
   8ac54:	b5800044 	addi	r22,r22,1
   8ac58:	0000f506 	br	8b030 <___vfprintf_internal_r+0x4e4>
   8ac5c:	217ff404 	addi	r5,r4,-48
   8ac60:	29403fcc 	andi	r5,r5,255
   8ac64:	00c00244 	movi	r3,9
   8ac68:	19400736 	bltu	r3,r5,8ac88 <___vfprintf_internal_r+0x13c>
   8ac6c:	00bfffc4 	movi	r2,-1
   8ac70:	88800226 	beq	r17,r2,8ac7c <___vfprintf_internal_r+0x130>
   8ac74:	8c4002a4 	muli	r17,r17,10
   8ac78:	00000106 	br	8ac80 <___vfprintf_internal_r+0x134>
   8ac7c:	0023883a 	mov	r17,zero
   8ac80:	8963883a 	add	r17,r17,r5
   8ac84:	0000e406 	br	8b018 <___vfprintf_internal_r+0x4cc>
   8ac88:	01400b84 	movi	r5,46
   8ac8c:	1140e626 	beq	r2,r5,8b028 <___vfprintf_internal_r+0x4dc>
   8ac90:	05000084 	movi	r20,2
   8ac94:	213ff404 	addi	r4,r4,-48
   8ac98:	21003fcc 	andi	r4,r4,255
   8ac9c:	00c00244 	movi	r3,9
   8aca0:	19000736 	bltu	r3,r4,8acc0 <___vfprintf_internal_r+0x174>
   8aca4:	00bfffc4 	movi	r2,-1
   8aca8:	90800226 	beq	r18,r2,8acb4 <___vfprintf_internal_r+0x168>
   8acac:	948002a4 	muli	r18,r18,10
   8acb0:	00000106 	br	8acb8 <___vfprintf_internal_r+0x16c>
   8acb4:	0025883a 	mov	r18,zero
   8acb8:	9125883a 	add	r18,r18,r4
   8acbc:	0000dd06 	br	8b034 <___vfprintf_internal_r+0x4e8>
   8acc0:	00c01b04 	movi	r3,108
   8acc4:	10c0d626 	beq	r2,r3,8b020 <___vfprintf_internal_r+0x4d4>
   8acc8:	013fffc4 	movi	r4,-1
   8accc:	9100021e 	bne	r18,r4,8acd8 <___vfprintf_internal_r+0x18c>
   8acd0:	04800044 	movi	r18,1
   8acd4:	00000106 	br	8acdc <___vfprintf_internal_r+0x190>
   8acd8:	d8000b15 	stw	zero,44(sp)
   8acdc:	01001a44 	movi	r4,105
   8ace0:	11001526 	beq	r2,r4,8ad38 <___vfprintf_internal_r+0x1ec>
   8ace4:	20800916 	blt	r4,r2,8ad0c <___vfprintf_internal_r+0x1c0>
   8ace8:	010018c4 	movi	r4,99
   8acec:	11008c26 	beq	r2,r4,8af20 <___vfprintf_internal_r+0x3d4>
   8acf0:	01001904 	movi	r4,100
   8acf4:	11001026 	beq	r2,r4,8ad38 <___vfprintf_internal_r+0x1ec>
   8acf8:	01001604 	movi	r4,88
   8acfc:	1100cc1e 	bne	r2,r4,8b030 <___vfprintf_internal_r+0x4e4>
   8ad00:	00c00044 	movi	r3,1
   8ad04:	d8c00e15 	stw	r3,56(sp)
   8ad08:	00001406 	br	8ad5c <___vfprintf_internal_r+0x210>
   8ad0c:	01001cc4 	movi	r4,115
   8ad10:	11009c26 	beq	r2,r4,8af84 <___vfprintf_internal_r+0x438>
   8ad14:	20800316 	blt	r4,r2,8ad24 <___vfprintf_internal_r+0x1d8>
   8ad18:	01001bc4 	movi	r4,111
   8ad1c:	1100cb26 	beq	r2,r4,8b04c <___vfprintf_internal_r+0x500>
   8ad20:	0000c306 	br	8b030 <___vfprintf_internal_r+0x4e4>
   8ad24:	01001d44 	movi	r4,117
   8ad28:	11000e26 	beq	r2,r4,8ad64 <___vfprintf_internal_r+0x218>
   8ad2c:	01001e04 	movi	r4,120
   8ad30:	11000a26 	beq	r2,r4,8ad5c <___vfprintf_internal_r+0x210>
   8ad34:	0000be06 	br	8b030 <___vfprintf_internal_r+0x4e4>
   8ad38:	e5c00104 	addi	r23,fp,4
   8ad3c:	98000926 	beq	r19,zero,8ad64 <___vfprintf_internal_r+0x218>
   8ad40:	ddc00d15 	stw	r23,52(sp)
   8ad44:	e7000017 	ldw	fp,0(fp)
   8ad48:	e0000b0e 	bge	fp,zero,8ad78 <___vfprintf_internal_r+0x22c>
   8ad4c:	04c00044 	movi	r19,1
   8ad50:	0739c83a 	sub	fp,zero,fp
   8ad54:	9815883a 	mov	r10,r19
   8ad58:	00000906 	br	8ad80 <___vfprintf_internal_r+0x234>
   8ad5c:	00c00404 	movi	r3,16
   8ad60:	d8c00a15 	stw	r3,40(sp)
   8ad64:	e0c00104 	addi	r3,fp,4
   8ad68:	d8c00d15 	stw	r3,52(sp)
   8ad6c:	e7000017 	ldw	fp,0(fp)
   8ad70:	0027883a 	mov	r19,zero
   8ad74:	00000106 	br	8ad7c <___vfprintf_internal_r+0x230>
   8ad78:	04c00044 	movi	r19,1
   8ad7c:	0015883a 	mov	r10,zero
   8ad80:	002f883a 	mov	r23,zero
   8ad84:	dde9883a 	add	r20,sp,r23
   8ad88:	e0001526 	beq	fp,zero,8ade0 <___vfprintf_internal_r+0x294>
   8ad8c:	d9400a17 	ldw	r5,40(sp)
   8ad90:	e009883a 	mov	r4,fp
   8ad94:	da801015 	stw	r10,64(sp)
   8ad98:	00877d80 	call	877d8 <__udivsi3>
   8ad9c:	d8c00a17 	ldw	r3,40(sp)
   8ada0:	da801017 	ldw	r10,64(sp)
   8ada4:	1889383a 	mul	r4,r3,r2
   8ada8:	00c00244 	movi	r3,9
   8adac:	e139c83a 	sub	fp,fp,r4
   8adb0:	1f000216 	blt	r3,fp,8adbc <___vfprintf_internal_r+0x270>
   8adb4:	e7000c04 	addi	fp,fp,48
   8adb8:	00000506 	br	8add0 <___vfprintf_internal_r+0x284>
   8adbc:	d8c00e17 	ldw	r3,56(sp)
   8adc0:	18000226 	beq	r3,zero,8adcc <___vfprintf_internal_r+0x280>
   8adc4:	e7000dc4 	addi	fp,fp,55
   8adc8:	00000106 	br	8add0 <___vfprintf_internal_r+0x284>
   8adcc:	e70015c4 	addi	fp,fp,87
   8add0:	a7000005 	stb	fp,0(r20)
   8add4:	bdc00044 	addi	r23,r23,1
   8add8:	1039883a 	mov	fp,r2
   8addc:	003fe906 	br	8ad84 <__alt_data_end+0xfffd2b14>
   8ade0:	a6f9c83a 	sub	fp,r20,sp
   8ade4:	9709c83a 	sub	r4,r18,fp
   8ade8:	01000d0e 	bge	zero,r4,8ae20 <___vfprintf_internal_r+0x2d4>
   8adec:	a005883a 	mov	r2,r20
   8adf0:	a10b883a 	add	r5,r20,r4
   8adf4:	01800c04 	movi	r6,48
   8adf8:	d8c00917 	ldw	r3,36(sp)
   8adfc:	10c0062e 	bgeu	r2,r3,8ae18 <___vfprintf_internal_r+0x2cc>
   8ae00:	11000044 	addi	r4,r2,1
   8ae04:	11800005 	stb	r6,0(r2)
   8ae08:	2029883a 	mov	r20,r4
   8ae0c:	21400326 	beq	r4,r5,8ae1c <___vfprintf_internal_r+0x2d0>
   8ae10:	2005883a 	mov	r2,r4
   8ae14:	003ff806 	br	8adf8 <__alt_data_end+0xfffd2b88>
   8ae18:	1029883a 	mov	r20,r2
   8ae1c:	a6f9c83a 	sub	fp,r20,sp
   8ae20:	d8c00b17 	ldw	r3,44(sp)
   8ae24:	e293883a 	add	r9,fp,r10
   8ae28:	8a6fc83a 	sub	r23,r17,r9
   8ae2c:	18001626 	beq	r3,zero,8ae88 <___vfprintf_internal_r+0x33c>
   8ae30:	50000a26 	beq	r10,zero,8ae5c <___vfprintf_internal_r+0x310>
   8ae34:	00800b44 	movi	r2,45
   8ae38:	d8800805 	stb	r2,32(sp)
   8ae3c:	a8800117 	ldw	r2,4(r21)
   8ae40:	8009883a 	mov	r4,r16
   8ae44:	a80b883a 	mov	r5,r21
   8ae48:	d9800804 	addi	r6,sp,32
   8ae4c:	01c00044 	movi	r7,1
   8ae50:	103ee83a 	callr	r2
   8ae54:	1000491e 	bne	r2,zero,8af7c <___vfprintf_internal_r+0x430>
   8ae58:	b5800044 	addi	r22,r22,1
   8ae5c:	05c0070e 	bge	zero,r23,8ae7c <___vfprintf_internal_r+0x330>
   8ae60:	8009883a 	mov	r4,r16
   8ae64:	a80b883a 	mov	r5,r21
   8ae68:	01800c04 	movi	r6,48
   8ae6c:	b80f883a 	mov	r7,r23
   8ae70:	008aae00 	call	8aae0 <print_repeat>
   8ae74:	1000411e 	bne	r2,zero,8af7c <___vfprintf_internal_r+0x430>
   8ae78:	b5ed883a 	add	r22,r22,r23
   8ae7c:	b52d883a 	add	r22,r22,r20
   8ae80:	e539c83a 	sub	fp,fp,r20
   8ae84:	00002006 	br	8af08 <___vfprintf_internal_r+0x3bc>
   8ae88:	05c0090e 	bge	zero,r23,8aeb0 <___vfprintf_internal_r+0x364>
   8ae8c:	8009883a 	mov	r4,r16
   8ae90:	a80b883a 	mov	r5,r21
   8ae94:	01800804 	movi	r6,32
   8ae98:	b80f883a 	mov	r7,r23
   8ae9c:	da801015 	stw	r10,64(sp)
   8aea0:	008aae00 	call	8aae0 <print_repeat>
   8aea4:	da801017 	ldw	r10,64(sp)
   8aea8:	1000341e 	bne	r2,zero,8af7c <___vfprintf_internal_r+0x430>
   8aeac:	b5ed883a 	add	r22,r22,r23
   8aeb0:	503ff226 	beq	r10,zero,8ae7c <__alt_data_end+0xfffd2c0c>
   8aeb4:	00800b44 	movi	r2,45
   8aeb8:	d8800805 	stb	r2,32(sp)
   8aebc:	a8800117 	ldw	r2,4(r21)
   8aec0:	8009883a 	mov	r4,r16
   8aec4:	a80b883a 	mov	r5,r21
   8aec8:	d9800804 	addi	r6,sp,32
   8aecc:	01c00044 	movi	r7,1
   8aed0:	103ee83a 	callr	r2
   8aed4:	1000291e 	bne	r2,zero,8af7c <___vfprintf_internal_r+0x430>
   8aed8:	b5800044 	addi	r22,r22,1
   8aedc:	003fe706 	br	8ae7c <__alt_data_end+0xfffd2c0c>
   8aee0:	a53fffc4 	addi	r20,r20,-1
   8aee4:	a0800003 	ldbu	r2,0(r20)
   8aee8:	8009883a 	mov	r4,r16
   8aeec:	a80b883a 	mov	r5,r21
   8aef0:	d8800805 	stb	r2,32(sp)
   8aef4:	a8800117 	ldw	r2,4(r21)
   8aef8:	d9800804 	addi	r6,sp,32
   8aefc:	01c00044 	movi	r7,1
   8af00:	103ee83a 	callr	r2
   8af04:	10001d1e 	bne	r2,zero,8af7c <___vfprintf_internal_r+0x430>
   8af08:	e505883a 	add	r2,fp,r20
   8af0c:	b507c83a 	sub	r3,r22,r20
   8af10:	00bff316 	blt	zero,r2,8aee0 <__alt_data_end+0xfffd2c70>
   8af14:	182d883a 	mov	r22,r3
   8af18:	df000d17 	ldw	fp,52(sp)
   8af1c:	00004406 	br	8b030 <___vfprintf_internal_r+0x4e4>
   8af20:	00800044 	movi	r2,1
   8af24:	1440080e 	bge	r2,r17,8af48 <___vfprintf_internal_r+0x3fc>
   8af28:	8d3fffc4 	addi	r20,r17,-1
   8af2c:	8009883a 	mov	r4,r16
   8af30:	a80b883a 	mov	r5,r21
   8af34:	01800804 	movi	r6,32
   8af38:	a00f883a 	mov	r7,r20
   8af3c:	008aae00 	call	8aae0 <print_repeat>
   8af40:	10000e1e 	bne	r2,zero,8af7c <___vfprintf_internal_r+0x430>
   8af44:	b52d883a 	add	r22,r22,r20
   8af48:	e0800017 	ldw	r2,0(fp)
   8af4c:	8009883a 	mov	r4,r16
   8af50:	a80b883a 	mov	r5,r21
   8af54:	d8800005 	stb	r2,0(sp)
   8af58:	a8800117 	ldw	r2,4(r21)
   8af5c:	d80d883a 	mov	r6,sp
   8af60:	01c00044 	movi	r7,1
   8af64:	e5000104 	addi	r20,fp,4
   8af68:	103ee83a 	callr	r2
   8af6c:	1000031e 	bne	r2,zero,8af7c <___vfprintf_internal_r+0x430>
   8af70:	b5800044 	addi	r22,r22,1
   8af74:	a039883a 	mov	fp,r20
   8af78:	00002d06 	br	8b030 <___vfprintf_internal_r+0x4e4>
   8af7c:	00bfffc4 	movi	r2,-1
   8af80:	00003406 	br	8b054 <___vfprintf_internal_r+0x508>
   8af84:	e5000017 	ldw	r20,0(fp)
   8af88:	e5c00104 	addi	r23,fp,4
   8af8c:	a009883a 	mov	r4,r20
   8af90:	008a4fc0 	call	8a4fc <strlen>
   8af94:	8893c83a 	sub	r9,r17,r2
   8af98:	1039883a 	mov	fp,r2
   8af9c:	0240090e 	bge	zero,r9,8afc4 <___vfprintf_internal_r+0x478>
   8afa0:	480f883a 	mov	r7,r9
   8afa4:	8009883a 	mov	r4,r16
   8afa8:	a80b883a 	mov	r5,r21
   8afac:	01800804 	movi	r6,32
   8afb0:	da401015 	stw	r9,64(sp)
   8afb4:	008aae00 	call	8aae0 <print_repeat>
   8afb8:	da401017 	ldw	r9,64(sp)
   8afbc:	103fef1e 	bne	r2,zero,8af7c <__alt_data_end+0xfffd2d0c>
   8afc0:	b26d883a 	add	r22,r22,r9
   8afc4:	a8800117 	ldw	r2,4(r21)
   8afc8:	8009883a 	mov	r4,r16
   8afcc:	a80b883a 	mov	r5,r21
   8afd0:	a00d883a 	mov	r6,r20
   8afd4:	e00f883a 	mov	r7,fp
   8afd8:	103ee83a 	callr	r2
   8afdc:	103fe71e 	bne	r2,zero,8af7c <__alt_data_end+0xfffd2d0c>
   8afe0:	b72d883a 	add	r22,r22,fp
   8afe4:	b839883a 	mov	fp,r23
   8afe8:	00001106 	br	8b030 <___vfprintf_internal_r+0x4e4>
   8afec:	04c00044 	movi	r19,1
   8aff0:	00c00284 	movi	r3,10
   8aff4:	04bfffc4 	movi	r18,-1
   8aff8:	d8000e15 	stw	zero,56(sp)
   8affc:	d8c00a15 	stw	r3,40(sp)
   8b000:	9023883a 	mov	r17,r18
   8b004:	d8000c15 	stw	zero,48(sp)
   8b008:	d8000b15 	stw	zero,44(sp)
   8b00c:	9829883a 	mov	r20,r19
   8b010:	00000806 	br	8b034 <___vfprintf_internal_r+0x4e8>
   8b014:	dd000b15 	stw	r20,44(sp)
   8b018:	05000084 	movi	r20,2
   8b01c:	00000506 	br	8b034 <___vfprintf_internal_r+0x4e8>
   8b020:	00c00044 	movi	r3,1
   8b024:	d8c00c15 	stw	r3,48(sp)
   8b028:	050000c4 	movi	r20,3
   8b02c:	00000106 	br	8b034 <___vfprintf_internal_r+0x4e8>
   8b030:	0029883a 	mov	r20,zero
   8b034:	d8c00f17 	ldw	r3,60(sp)
   8b038:	18c00044 	addi	r3,r3,1
   8b03c:	d8c00f15 	stw	r3,60(sp)
   8b040:	003edc06 	br	8abb4 <__alt_data_end+0xfffd2944>
   8b044:	b005883a 	mov	r2,r22
   8b048:	00000206 	br	8b054 <___vfprintf_internal_r+0x508>
   8b04c:	00c00204 	movi	r3,8
   8b050:	003f4306 	br	8ad60 <__alt_data_end+0xfffd2af0>
   8b054:	dfc01a17 	ldw	ra,104(sp)
   8b058:	df001917 	ldw	fp,100(sp)
   8b05c:	ddc01817 	ldw	r23,96(sp)
   8b060:	dd801717 	ldw	r22,92(sp)
   8b064:	dd401617 	ldw	r21,88(sp)
   8b068:	dd001517 	ldw	r20,84(sp)
   8b06c:	dcc01417 	ldw	r19,80(sp)
   8b070:	dc801317 	ldw	r18,76(sp)
   8b074:	dc401217 	ldw	r17,72(sp)
   8b078:	dc001117 	ldw	r16,68(sp)
   8b07c:	dec01b04 	addi	sp,sp,108
   8b080:	f800283a 	ret

0008b084 <__vfprintf_internal>:
   8b084:	2007883a 	mov	r3,r4
   8b088:	010002f4 	movhi	r4,11
   8b08c:	2128a304 	addi	r4,r4,-23924
   8b090:	21000017 	ldw	r4,0(r4)
   8b094:	2805883a 	mov	r2,r5
   8b098:	300f883a 	mov	r7,r6
   8b09c:	180b883a 	mov	r5,r3
   8b0a0:	100d883a 	mov	r6,r2
   8b0a4:	008ab4c1 	jmpi	8ab4c <___vfprintf_internal_r>

0008b0a8 <_vsnprintf_r>:
   8b0a8:	defff604 	addi	sp,sp,-40
   8b0ac:	dc400815 	stw	r17,32(sp)
   8b0b0:	dc000715 	stw	r16,28(sp)
   8b0b4:	dfc00915 	stw	ra,36(sp)
   8b0b8:	2023883a 	mov	r17,r4
   8b0bc:	3021883a 	mov	r16,r6
   8b0c0:	3000040e 	bge	r6,zero,8b0d4 <_vsnprintf_r+0x2c>
   8b0c4:	008022c4 	movi	r2,139
   8b0c8:	20800015 	stw	r2,0(r4)
   8b0cc:	00bfffc4 	movi	r2,-1
   8b0d0:	00001e06 	br	8b14c <_vsnprintf_r+0xa4>
   8b0d4:	00808204 	movi	r2,520
   8b0d8:	d880000d 	sth	r2,0(sp)
   8b0dc:	d9400415 	stw	r5,16(sp)
   8b0e0:	d9400215 	stw	r5,8(sp)
   8b0e4:	380d883a 	mov	r6,r7
   8b0e8:	80000226 	beq	r16,zero,8b0f4 <_vsnprintf_r+0x4c>
   8b0ec:	80bfffc4 	addi	r2,r16,-1
   8b0f0:	00000106 	br	8b0f8 <_vsnprintf_r+0x50>
   8b0f4:	0005883a 	mov	r2,zero
   8b0f8:	d8800515 	stw	r2,20(sp)
   8b0fc:	d8800315 	stw	r2,12(sp)
   8b100:	00bfffc4 	movi	r2,-1
   8b104:	d880008d 	sth	r2,2(sp)
   8b108:	00800274 	movhi	r2,9
   8b10c:	10ad8204 	addi	r2,r2,-18936
   8b110:	d8800115 	stw	r2,4(sp)
   8b114:	008002f4 	movhi	r2,11
   8b118:	10a8a304 	addi	r2,r2,-23924
   8b11c:	11000017 	ldw	r4,0(r2)
   8b120:	d9c00a17 	ldw	r7,40(sp)
   8b124:	d80b883a 	mov	r5,sp
   8b128:	d8000615 	stw	zero,24(sp)
   8b12c:	008a5840 	call	8a584 <___svfprintf_internal_r>
   8b130:	00ffffc4 	movi	r3,-1
   8b134:	10c0020e 	bge	r2,r3,8b140 <_vsnprintf_r+0x98>
   8b138:	00c022c4 	movi	r3,139
   8b13c:	88c00015 	stw	r3,0(r17)
   8b140:	80000226 	beq	r16,zero,8b14c <_vsnprintf_r+0xa4>
   8b144:	d8c00417 	ldw	r3,16(sp)
   8b148:	18000005 	stb	zero,0(r3)
   8b14c:	dfc00917 	ldw	ra,36(sp)
   8b150:	dc400817 	ldw	r17,32(sp)
   8b154:	dc000717 	ldw	r16,28(sp)
   8b158:	dec00a04 	addi	sp,sp,40
   8b15c:	f800283a 	ret

0008b160 <vsnprintf>:
   8b160:	defffe04 	addi	sp,sp,-8
   8b164:	2011883a 	mov	r8,r4
   8b168:	d9c00015 	stw	r7,0(sp)
   8b16c:	010002f4 	movhi	r4,11
   8b170:	2128a304 	addi	r4,r4,-23924
   8b174:	21000017 	ldw	r4,0(r4)
   8b178:	2807883a 	mov	r3,r5
   8b17c:	3005883a 	mov	r2,r6
   8b180:	400b883a 	mov	r5,r8
   8b184:	180d883a 	mov	r6,r3
   8b188:	100f883a 	mov	r7,r2
   8b18c:	dfc00115 	stw	ra,4(sp)
   8b190:	008b0a80 	call	8b0a8 <_vsnprintf_r>
   8b194:	dfc00117 	ldw	ra,4(sp)
   8b198:	dec00204 	addi	sp,sp,8
   8b19c:	f800283a 	ret

0008b1a0 <_malloc_trim_r>:
   8b1a0:	defffb04 	addi	sp,sp,-20
   8b1a4:	dcc00315 	stw	r19,12(sp)
   8b1a8:	dc800215 	stw	r18,8(sp)
   8b1ac:	dc400115 	stw	r17,4(sp)
   8b1b0:	dc000015 	stw	r16,0(sp)
   8b1b4:	2823883a 	mov	r17,r5
   8b1b8:	dfc00415 	stw	ra,16(sp)
   8b1bc:	2021883a 	mov	r16,r4
   8b1c0:	048002f4 	movhi	r18,11
   8b1c4:	94a31b04 	addi	r18,r18,-29588
   8b1c8:	008ba3c0 	call	8ba3c <__malloc_lock>
   8b1cc:	90800217 	ldw	r2,8(r18)
   8b1d0:	14c00117 	ldw	r19,4(r2)
   8b1d4:	00bfff04 	movi	r2,-4
   8b1d8:	98a6703a 	and	r19,r19,r2
   8b1dc:	9c63c83a 	sub	r17,r19,r17
   8b1e0:	8c401bc4 	addi	r17,r17,111
   8b1e4:	8822d1fa 	srli	r17,r17,7
   8b1e8:	00801fc4 	movi	r2,127
   8b1ec:	8c7fffc4 	addi	r17,r17,-1
   8b1f0:	882291fa 	slli	r17,r17,7
   8b1f4:	14400416 	blt	r2,r17,8b208 <_malloc_trim_r+0x68>
   8b1f8:	8009883a 	mov	r4,r16
   8b1fc:	008ba400 	call	8ba40 <__malloc_unlock>
   8b200:	0005883a 	mov	r2,zero
   8b204:	00002806 	br	8b2a8 <_malloc_trim_r+0x108>
   8b208:	8009883a 	mov	r4,r16
   8b20c:	000b883a 	mov	r5,zero
   8b210:	008a3b00 	call	8a3b0 <_sbrk_r>
   8b214:	90c00217 	ldw	r3,8(r18)
   8b218:	1cc7883a 	add	r3,r3,r19
   8b21c:	10fff61e 	bne	r2,r3,8b1f8 <__alt_data_end+0xfffd2f88>
   8b220:	8009883a 	mov	r4,r16
   8b224:	044bc83a 	sub	r5,zero,r17
   8b228:	008a3b00 	call	8a3b0 <_sbrk_r>
   8b22c:	00ffffc4 	movi	r3,-1
   8b230:	10c0111e 	bne	r2,r3,8b278 <_malloc_trim_r+0xd8>
   8b234:	8009883a 	mov	r4,r16
   8b238:	000b883a 	mov	r5,zero
   8b23c:	008a3b00 	call	8a3b0 <_sbrk_r>
   8b240:	90c00217 	ldw	r3,8(r18)
   8b244:	014003c4 	movi	r5,15
   8b248:	10c9c83a 	sub	r4,r2,r3
   8b24c:	293fea0e 	bge	r5,r4,8b1f8 <__alt_data_end+0xfffd2f88>
   8b250:	014002f4 	movhi	r5,11
   8b254:	2968a404 	addi	r5,r5,-23920
   8b258:	29400017 	ldw	r5,0(r5)
   8b25c:	21000054 	ori	r4,r4,1
   8b260:	19000115 	stw	r4,4(r3)
   8b264:	1145c83a 	sub	r2,r2,r5
   8b268:	014002f4 	movhi	r5,11
   8b26c:	29757304 	addi	r5,r5,-10804
   8b270:	28800015 	stw	r2,0(r5)
   8b274:	003fe006 	br	8b1f8 <__alt_data_end+0xfffd2f88>
   8b278:	90800217 	ldw	r2,8(r18)
   8b27c:	9c67c83a 	sub	r19,r19,r17
   8b280:	9cc00054 	ori	r19,r19,1
   8b284:	14c00115 	stw	r19,4(r2)
   8b288:	008002f4 	movhi	r2,11
   8b28c:	10b57304 	addi	r2,r2,-10804
   8b290:	10c00017 	ldw	r3,0(r2)
   8b294:	8009883a 	mov	r4,r16
   8b298:	1c63c83a 	sub	r17,r3,r17
   8b29c:	14400015 	stw	r17,0(r2)
   8b2a0:	008ba400 	call	8ba40 <__malloc_unlock>
   8b2a4:	00800044 	movi	r2,1
   8b2a8:	dfc00417 	ldw	ra,16(sp)
   8b2ac:	dcc00317 	ldw	r19,12(sp)
   8b2b0:	dc800217 	ldw	r18,8(sp)
   8b2b4:	dc400117 	ldw	r17,4(sp)
   8b2b8:	dc000017 	ldw	r16,0(sp)
   8b2bc:	dec00504 	addi	sp,sp,20
   8b2c0:	f800283a 	ret

0008b2c4 <_free_r>:
   8b2c4:	defffd04 	addi	sp,sp,-12
   8b2c8:	dc400115 	stw	r17,4(sp)
   8b2cc:	dfc00215 	stw	ra,8(sp)
   8b2d0:	dc000015 	stw	r16,0(sp)
   8b2d4:	2823883a 	mov	r17,r5
   8b2d8:	28009b26 	beq	r5,zero,8b548 <_free_r+0x284>
   8b2dc:	2021883a 	mov	r16,r4
   8b2e0:	008ba3c0 	call	8ba3c <__malloc_lock>
   8b2e4:	893fff17 	ldw	r4,-4(r17)
   8b2e8:	00ffff84 	movi	r3,-2
   8b2ec:	88bffe04 	addi	r2,r17,-8
   8b2f0:	20c6703a 	and	r3,r4,r3
   8b2f4:	10cf883a 	add	r7,r2,r3
   8b2f8:	39800117 	ldw	r6,4(r7)
   8b2fc:	017fff04 	movi	r5,-4
   8b300:	2100004c 	andi	r4,r4,1
   8b304:	314a703a 	and	r5,r6,r5
   8b308:	018002f4 	movhi	r6,11
   8b30c:	31a31b04 	addi	r6,r6,-29588
   8b310:	32000217 	ldw	r8,8(r6)
   8b314:	3a001b1e 	bne	r7,r8,8b384 <_free_r+0xc0>
   8b318:	28c7883a 	add	r3,r5,r3
   8b31c:	2000071e 	bne	r4,zero,8b33c <_free_r+0x78>
   8b320:	893ffe17 	ldw	r4,-8(r17)
   8b324:	1105c83a 	sub	r2,r2,r4
   8b328:	11400217 	ldw	r5,8(r2)
   8b32c:	1907883a 	add	r3,r3,r4
   8b330:	11000317 	ldw	r4,12(r2)
   8b334:	29000315 	stw	r4,12(r5)
   8b338:	21400215 	stw	r5,8(r4)
   8b33c:	19000054 	ori	r4,r3,1
   8b340:	11000115 	stw	r4,4(r2)
   8b344:	30800215 	stw	r2,8(r6)
   8b348:	008002f4 	movhi	r2,11
   8b34c:	10a8a504 	addi	r2,r2,-23916
   8b350:	10800017 	ldw	r2,0(r2)
   8b354:	18800536 	bltu	r3,r2,8b36c <_free_r+0xa8>
   8b358:	008002f4 	movhi	r2,11
   8b35c:	10b56b04 	addi	r2,r2,-10836
   8b360:	11400017 	ldw	r5,0(r2)
   8b364:	8009883a 	mov	r4,r16
   8b368:	008b1a00 	call	8b1a0 <_malloc_trim_r>
   8b36c:	8009883a 	mov	r4,r16
   8b370:	dfc00217 	ldw	ra,8(sp)
   8b374:	dc400117 	ldw	r17,4(sp)
   8b378:	dc000017 	ldw	r16,0(sp)
   8b37c:	dec00304 	addi	sp,sp,12
   8b380:	008ba401 	jmpi	8ba40 <__malloc_unlock>
   8b384:	39400115 	stw	r5,4(r7)
   8b388:	2000091e 	bne	r4,zero,8b3b0 <_free_r+0xec>
   8b38c:	893ffe17 	ldw	r4,-8(r17)
   8b390:	32000204 	addi	r8,r6,8
   8b394:	1105c83a 	sub	r2,r2,r4
   8b398:	1907883a 	add	r3,r3,r4
   8b39c:	11000217 	ldw	r4,8(r2)
   8b3a0:	22000526 	beq	r4,r8,8b3b8 <_free_r+0xf4>
   8b3a4:	12000317 	ldw	r8,12(r2)
   8b3a8:	22000315 	stw	r8,12(r4)
   8b3ac:	41000215 	stw	r4,8(r8)
   8b3b0:	0009883a 	mov	r4,zero
   8b3b4:	00000106 	br	8b3bc <_free_r+0xf8>
   8b3b8:	01000044 	movi	r4,1
   8b3bc:	3951883a 	add	r8,r7,r5
   8b3c0:	42000117 	ldw	r8,4(r8)
   8b3c4:	4200004c 	andi	r8,r8,1
   8b3c8:	40000f1e 	bne	r8,zero,8b408 <_free_r+0x144>
   8b3cc:	1947883a 	add	r3,r3,r5
   8b3d0:	39400217 	ldw	r5,8(r7)
   8b3d4:	2000091e 	bne	r4,zero,8b3fc <_free_r+0x138>
   8b3d8:	020002f4 	movhi	r8,11
   8b3dc:	42231d04 	addi	r8,r8,-29580
   8b3e0:	2a00061e 	bne	r5,r8,8b3fc <_free_r+0x138>
   8b3e4:	30800515 	stw	r2,20(r6)
   8b3e8:	30800415 	stw	r2,16(r6)
   8b3ec:	11400315 	stw	r5,12(r2)
   8b3f0:	11400215 	stw	r5,8(r2)
   8b3f4:	01000044 	movi	r4,1
   8b3f8:	00000306 	br	8b408 <_free_r+0x144>
   8b3fc:	39c00317 	ldw	r7,12(r7)
   8b400:	29c00315 	stw	r7,12(r5)
   8b404:	39400215 	stw	r5,8(r7)
   8b408:	19400054 	ori	r5,r3,1
   8b40c:	11400115 	stw	r5,4(r2)
   8b410:	10cb883a 	add	r5,r2,r3
   8b414:	28c00015 	stw	r3,0(r5)
   8b418:	203fd41e 	bne	r4,zero,8b36c <__alt_data_end+0xfffd30fc>
   8b41c:	01007fc4 	movi	r4,511
   8b420:	20c01136 	bltu	r4,r3,8b468 <_free_r+0x1a4>
   8b424:	1806d0fa 	srli	r3,r3,3
   8b428:	01400044 	movi	r5,1
   8b42c:	1809d0ba 	srai	r4,r3,2
   8b430:	18c7883a 	add	r3,r3,r3
   8b434:	18c7883a 	add	r3,r3,r3
   8b438:	2908983a 	sll	r4,r5,r4
   8b43c:	31400117 	ldw	r5,4(r6)
   8b440:	18c7883a 	add	r3,r3,r3
   8b444:	2148b03a 	or	r4,r4,r5
   8b448:	31000115 	stw	r4,4(r6)
   8b44c:	30cd883a 	add	r6,r6,r3
   8b450:	30c00217 	ldw	r3,8(r6)
   8b454:	11800315 	stw	r6,12(r2)
   8b458:	10c00215 	stw	r3,8(r2)
   8b45c:	30800215 	stw	r2,8(r6)
   8b460:	18800315 	stw	r2,12(r3)
   8b464:	003fc106 	br	8b36c <__alt_data_end+0xfffd30fc>
   8b468:	180ad27a 	srli	r5,r3,9
   8b46c:	01000104 	movi	r4,4
   8b470:	21400336 	bltu	r4,r5,8b480 <_free_r+0x1bc>
   8b474:	180ad1ba 	srli	r5,r3,6
   8b478:	29400e04 	addi	r5,r5,56
   8b47c:	00001406 	br	8b4d0 <_free_r+0x20c>
   8b480:	01000504 	movi	r4,20
   8b484:	21400236 	bltu	r4,r5,8b490 <_free_r+0x1cc>
   8b488:	294016c4 	addi	r5,r5,91
   8b48c:	00001006 	br	8b4d0 <_free_r+0x20c>
   8b490:	01001504 	movi	r4,84
   8b494:	21400336 	bltu	r4,r5,8b4a4 <_free_r+0x1e0>
   8b498:	180ad33a 	srli	r5,r3,12
   8b49c:	29401b84 	addi	r5,r5,110
   8b4a0:	00000b06 	br	8b4d0 <_free_r+0x20c>
   8b4a4:	01005504 	movi	r4,340
   8b4a8:	21400336 	bltu	r4,r5,8b4b8 <_free_r+0x1f4>
   8b4ac:	180ad3fa 	srli	r5,r3,15
   8b4b0:	29401dc4 	addi	r5,r5,119
   8b4b4:	00000606 	br	8b4d0 <_free_r+0x20c>
   8b4b8:	01015504 	movi	r4,1364
   8b4bc:	21400336 	bltu	r4,r5,8b4cc <_free_r+0x208>
   8b4c0:	180ad4ba 	srli	r5,r3,18
   8b4c4:	29401f04 	addi	r5,r5,124
   8b4c8:	00000106 	br	8b4d0 <_free_r+0x20c>
   8b4cc:	01401f84 	movi	r5,126
   8b4d0:	2949883a 	add	r4,r5,r5
   8b4d4:	2109883a 	add	r4,r4,r4
   8b4d8:	210f883a 	add	r7,r4,r4
   8b4dc:	31cd883a 	add	r6,r6,r7
   8b4e0:	31c00217 	ldw	r7,8(r6)
   8b4e4:	010002f4 	movhi	r4,11
   8b4e8:	21231b04 	addi	r4,r4,-29588
   8b4ec:	39800326 	beq	r7,r6,8b4fc <_free_r+0x238>
   8b4f0:	380b883a 	mov	r5,r7
   8b4f4:	01ffff04 	movi	r7,-4
   8b4f8:	00000a06 	br	8b524 <_free_r+0x260>
   8b4fc:	280bd0ba 	srai	r5,r5,2
   8b500:	00c00044 	movi	r3,1
   8b504:	194a983a 	sll	r5,r3,r5
   8b508:	20c00117 	ldw	r3,4(r4)
   8b50c:	28cab03a 	or	r5,r5,r3
   8b510:	21400115 	stw	r5,4(r4)
   8b514:	380b883a 	mov	r5,r7
   8b518:	00000606 	br	8b534 <_free_r+0x270>
   8b51c:	29400217 	ldw	r5,8(r5)
   8b520:	29800326 	beq	r5,r6,8b530 <_free_r+0x26c>
   8b524:	29000117 	ldw	r4,4(r5)
   8b528:	21c8703a 	and	r4,r4,r7
   8b52c:	193ffb36 	bltu	r3,r4,8b51c <__alt_data_end+0xfffd32ac>
   8b530:	29c00317 	ldw	r7,12(r5)
   8b534:	11c00315 	stw	r7,12(r2)
   8b538:	11400215 	stw	r5,8(r2)
   8b53c:	38800215 	stw	r2,8(r7)
   8b540:	28800315 	stw	r2,12(r5)
   8b544:	003f8906 	br	8b36c <__alt_data_end+0xfffd30fc>
   8b548:	dfc00217 	ldw	ra,8(sp)
   8b54c:	dc400117 	ldw	r17,4(sp)
   8b550:	dc000017 	ldw	r16,0(sp)
   8b554:	dec00304 	addi	sp,sp,12
   8b558:	f800283a 	ret

0008b55c <__sfvwrite_small_dev>:
   8b55c:	2880000b 	ldhu	r2,0(r5)
   8b560:	defffa04 	addi	sp,sp,-24
   8b564:	dc000015 	stw	r16,0(sp)
   8b568:	dfc00515 	stw	ra,20(sp)
   8b56c:	dd000415 	stw	r20,16(sp)
   8b570:	dcc00315 	stw	r19,12(sp)
   8b574:	dc800215 	stw	r18,8(sp)
   8b578:	dc400115 	stw	r17,4(sp)
   8b57c:	1080020c 	andi	r2,r2,8
   8b580:	2821883a 	mov	r16,r5
   8b584:	10001726 	beq	r2,zero,8b5e4 <__sfvwrite_small_dev+0x88>
   8b588:	2880008f 	ldh	r2,2(r5)
   8b58c:	10001216 	blt	r2,zero,8b5d8 <__sfvwrite_small_dev+0x7c>
   8b590:	2027883a 	mov	r19,r4
   8b594:	3025883a 	mov	r18,r6
   8b598:	3823883a 	mov	r17,r7
   8b59c:	05010004 	movi	r20,1024
   8b5a0:	04400b0e 	bge	zero,r17,8b5d0 <__sfvwrite_small_dev+0x74>
   8b5a4:	8140008f 	ldh	r5,2(r16)
   8b5a8:	880f883a 	mov	r7,r17
   8b5ac:	a440010e 	bge	r20,r17,8b5b4 <__sfvwrite_small_dev+0x58>
   8b5b0:	01c10004 	movi	r7,1024
   8b5b4:	9809883a 	mov	r4,r19
   8b5b8:	900d883a 	mov	r6,r18
   8b5bc:	008b7100 	call	8b710 <_write_r>
   8b5c0:	0080050e 	bge	zero,r2,8b5d8 <__sfvwrite_small_dev+0x7c>
   8b5c4:	88a3c83a 	sub	r17,r17,r2
   8b5c8:	90a5883a 	add	r18,r18,r2
   8b5cc:	003ff406 	br	8b5a0 <__alt_data_end+0xfffd3330>
   8b5d0:	0005883a 	mov	r2,zero
   8b5d4:	00000406 	br	8b5e8 <__sfvwrite_small_dev+0x8c>
   8b5d8:	8080000b 	ldhu	r2,0(r16)
   8b5dc:	10801014 	ori	r2,r2,64
   8b5e0:	8080000d 	sth	r2,0(r16)
   8b5e4:	00bfffc4 	movi	r2,-1
   8b5e8:	dfc00517 	ldw	ra,20(sp)
   8b5ec:	dd000417 	ldw	r20,16(sp)
   8b5f0:	dcc00317 	ldw	r19,12(sp)
   8b5f4:	dc800217 	ldw	r18,8(sp)
   8b5f8:	dc400117 	ldw	r17,4(sp)
   8b5fc:	dc000017 	ldw	r16,0(sp)
   8b600:	dec00604 	addi	sp,sp,24
   8b604:	f800283a 	ret

0008b608 <__sfvwrite_small_str>:
   8b608:	2880000b 	ldhu	r2,0(r5)
   8b60c:	defffd04 	addi	sp,sp,-12
   8b610:	dc000015 	stw	r16,0(sp)
   8b614:	dfc00215 	stw	ra,8(sp)
   8b618:	dc400115 	stw	r17,4(sp)
   8b61c:	10c0020c 	andi	r3,r2,8
   8b620:	2821883a 	mov	r16,r5
   8b624:	18001926 	beq	r3,zero,8b68c <__sfvwrite_small_str+0x84>
   8b628:	28c0008f 	ldh	r3,2(r5)
   8b62c:	1800150e 	bge	r3,zero,8b684 <__sfvwrite_small_str+0x7c>
   8b630:	10c0800c 	andi	r3,r2,512
   8b634:	18001326 	beq	r3,zero,8b684 <__sfvwrite_small_str+0x7c>
   8b638:	84400517 	ldw	r17,20(r16)
   8b63c:	300b883a 	mov	r5,r6
   8b640:	89c0030e 	bge	r17,r7,8b650 <__sfvwrite_small_str+0x48>
   8b644:	10c0200c 	andi	r3,r2,128
   8b648:	18000326 	beq	r3,zero,8b658 <__sfvwrite_small_str+0x50>
   8b64c:	00000d06 	br	8b684 <__sfvwrite_small_str+0x7c>
   8b650:	3c40010e 	bge	r7,r17,8b658 <__sfvwrite_small_str+0x50>
   8b654:	3823883a 	mov	r17,r7
   8b658:	81000417 	ldw	r4,16(r16)
   8b65c:	880d883a 	mov	r6,r17
   8b660:	008b6a40 	call	8b6a4 <memmove>
   8b664:	80800517 	ldw	r2,20(r16)
   8b668:	1445c83a 	sub	r2,r2,r17
   8b66c:	80800515 	stw	r2,20(r16)
   8b670:	80800417 	ldw	r2,16(r16)
   8b674:	1463883a 	add	r17,r2,r17
   8b678:	84400415 	stw	r17,16(r16)
   8b67c:	0005883a 	mov	r2,zero
   8b680:	00000306 	br	8b690 <__sfvwrite_small_str+0x88>
   8b684:	10801014 	ori	r2,r2,64
   8b688:	8080000d 	sth	r2,0(r16)
   8b68c:	00bfffc4 	movi	r2,-1
   8b690:	dfc00217 	ldw	ra,8(sp)
   8b694:	dc400117 	ldw	r17,4(sp)
   8b698:	dc000017 	ldw	r16,0(sp)
   8b69c:	dec00304 	addi	sp,sp,12
   8b6a0:	f800283a 	ret

0008b6a4 <memmove>:
   8b6a4:	2005883a 	mov	r2,r4
   8b6a8:	29000236 	bltu	r5,r4,8b6b4 <memmove+0x10>
   8b6ac:	0007883a 	mov	r3,zero
   8b6b0:	00000f06 	br	8b6f0 <memmove+0x4c>
   8b6b4:	2989883a 	add	r4,r5,r6
   8b6b8:	113ffc2e 	bgeu	r2,r4,8b6ac <__alt_data_end+0xfffd343c>
   8b6bc:	0187c83a 	sub	r3,zero,r6
   8b6c0:	118f883a 	add	r7,r2,r6
   8b6c4:	20c9883a 	add	r4,r4,r3
   8b6c8:	017fffc4 	movi	r5,-1
   8b6cc:	38c7883a 	add	r3,r7,r3
   8b6d0:	31bfffc4 	addi	r6,r6,-1
   8b6d4:	31400526 	beq	r6,r5,8b6ec <memmove+0x48>
   8b6d8:	218f883a 	add	r7,r4,r6
   8b6dc:	3a000003 	ldbu	r8,0(r7)
   8b6e0:	198f883a 	add	r7,r3,r6
   8b6e4:	3a000005 	stb	r8,0(r7)
   8b6e8:	003ff906 	br	8b6d0 <__alt_data_end+0xfffd3460>
   8b6ec:	f800283a 	ret
   8b6f0:	19800626 	beq	r3,r6,8b70c <memmove+0x68>
   8b6f4:	28c9883a 	add	r4,r5,r3
   8b6f8:	21c00003 	ldbu	r7,0(r4)
   8b6fc:	10c9883a 	add	r4,r2,r3
   8b700:	18c00044 	addi	r3,r3,1
   8b704:	21c00005 	stb	r7,0(r4)
   8b708:	003ff906 	br	8b6f0 <__alt_data_end+0xfffd3480>
   8b70c:	f800283a 	ret

0008b710 <_write_r>:
   8b710:	defffd04 	addi	sp,sp,-12
   8b714:	dc400115 	stw	r17,4(sp)
   8b718:	dc000015 	stw	r16,0(sp)
   8b71c:	2023883a 	mov	r17,r4
   8b720:	040002f4 	movhi	r16,11
   8b724:	84356c04 	addi	r16,r16,-10832
   8b728:	2809883a 	mov	r4,r5
   8b72c:	300b883a 	mov	r5,r6
   8b730:	380d883a 	mov	r6,r7
   8b734:	dfc00215 	stw	ra,8(sp)
   8b738:	80000015 	stw	zero,0(r16)
   8b73c:	008bbc00 	call	8bbc0 <write>
   8b740:	00ffffc4 	movi	r3,-1
   8b744:	10c0031e 	bne	r2,r3,8b754 <_write_r+0x44>
   8b748:	80c00017 	ldw	r3,0(r16)
   8b74c:	18000126 	beq	r3,zero,8b754 <_write_r+0x44>
   8b750:	88c00015 	stw	r3,0(r17)
   8b754:	dfc00217 	ldw	ra,8(sp)
   8b758:	dc400117 	ldw	r17,4(sp)
   8b75c:	dc000017 	ldw	r16,0(sp)
   8b760:	dec00304 	addi	sp,sp,12
   8b764:	f800283a 	ret

0008b768 <alt_alarm_start>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8b768:	008002f4 	movhi	r2,11
   8b76c:	10b57204 	addi	r2,r2,-10808
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   8b770:	10800017 	ldw	r2,0(r2)
   8b774:	10001d26 	beq	r2,zero,8b7ec <alt_alarm_start+0x84>
  {
    if (alarm)
   8b778:	20001e26 	beq	r4,zero,8b7f4 <alt_alarm_start+0x8c>
    {
      alarm->callback = callback;
   8b77c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   8b780:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b784:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b788:	00bfff84 	movi	r2,-2
   8b78c:	1884703a 	and	r2,r3,r2
   8b790:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8b794:	008002f4 	movhi	r2,11
   8b798:	10b57104 	addi	r2,r2,-10812
   8b79c:	10800017 	ldw	r2,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   8b7a0:	11800044 	addi	r6,r2,1
   8b7a4:	314b883a 	add	r5,r6,r5
   8b7a8:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8b7ac:	28800c36 	bltu	r5,r2,8b7e0 <alt_alarm_start+0x78>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
   8b7b0:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8b7b4:	008002f4 	movhi	r2,11
   8b7b8:	10a8a804 	addi	r2,r2,-23904
  entry->next     = list->next;
   8b7bc:	11400017 	ldw	r5,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8b7c0:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   8b7c4:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
   8b7c8:	11400017 	ldw	r5,0(r2)
  list->next           = entry;
   8b7cc:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
   8b7d0:	29000115 	stw	r4,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b7d4:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
   8b7d8:	0005883a 	mov	r2,zero
   8b7dc:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
   8b7e0:	00800044 	movi	r2,1
   8b7e4:	20800405 	stb	r2,16(r4)
   8b7e8:	003ff206 	br	8b7b4 <__alt_data_end+0xfffd3544>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
   8b7ec:	00bfde84 	movi	r2,-134
   8b7f0:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
   8b7f4:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
   8b7f8:	f800283a 	ret

0008b7fc <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8b7fc:	008b8981 	jmpi	8b898 <alt_iic_isr_register>

0008b800 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b800:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b804:	00bfff84 	movi	r2,-2
   8b808:	1884703a 	and	r2,r3,r2
   8b80c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   8b810:	008002f4 	movhi	r2,11
   8b814:	10b56d04 	addi	r2,r2,-10828
   8b818:	01800044 	movi	r6,1
   8b81c:	11000017 	ldw	r4,0(r2)
   8b820:	314a983a 	sll	r5,r6,r5
   8b824:	290ab03a 	or	r5,r5,r4
   8b828:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8b82c:	10800017 	ldw	r2,0(r2)
   8b830:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b834:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   8b838:	0005883a 	mov	r2,zero
   8b83c:	f800283a 	ret

0008b840 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b840:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b844:	00bfff84 	movi	r2,-2
   8b848:	1884703a 	and	r2,r3,r2
   8b84c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   8b850:	008002f4 	movhi	r2,11
   8b854:	10b56d04 	addi	r2,r2,-10828
   8b858:	01bfff84 	movi	r6,-2
   8b85c:	11000017 	ldw	r4,0(r2)
   8b860:	314a183a 	rol	r5,r6,r5
   8b864:	290a703a 	and	r5,r5,r4
   8b868:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8b86c:	10800017 	ldw	r2,0(r2)
   8b870:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b874:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   8b878:	0005883a 	mov	r2,zero
   8b87c:	f800283a 	ret

0008b880 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8b880:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8b884:	00c00044 	movi	r3,1
   8b888:	194a983a 	sll	r5,r3,r5
   8b88c:	1144703a 	and	r2,r2,r5
}
   8b890:	1004c03a 	cmpne	r2,r2,zero
   8b894:	f800283a 	ret

0008b898 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8b898:	008007c4 	movi	r2,31
   8b89c:	11401a16 	blt	r2,r5,8b908 <alt_iic_isr_register+0x70>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8b8a0:	defffe04 	addi	sp,sp,-8
   8b8a4:	dfc00115 	stw	ra,4(sp)
   8b8a8:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b8ac:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b8b0:	00bfff84 	movi	r2,-2
   8b8b4:	8084703a 	and	r2,r16,r2
   8b8b8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   8b8bc:	280490fa 	slli	r2,r5,3
   8b8c0:	00c002f4 	movhi	r3,11
   8b8c4:	18f57d04 	addi	r3,r3,-10764
   8b8c8:	1885883a 	add	r2,r3,r2
   8b8cc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   8b8d0:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8b8d4:	30000626 	beq	r6,zero,8b8f0 <alt_iic_isr_register+0x58>
   8b8d8:	008b8000 	call	8b800 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b8dc:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   8b8e0:	dfc00117 	ldw	ra,4(sp)
   8b8e4:	dc000017 	ldw	r16,0(sp)
   8b8e8:	dec00204 	addi	sp,sp,8
   8b8ec:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8b8f0:	008b8400 	call	8b840 <alt_ic_irq_disable>
   8b8f4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   8b8f8:	dfc00117 	ldw	ra,4(sp)
   8b8fc:	dc000017 	ldw	r16,0(sp)
   8b900:	dec00204 	addi	sp,sp,8
   8b904:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   8b908:	00bffa84 	movi	r2,-22
   8b90c:	f800283a 	ret

0008b910 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8b910:	deffff04 	addi	sp,sp,-4
   8b914:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   8b918:	010002b4 	movhi	r4,10
   8b91c:	211bf804 	addi	r4,r4,28640
   8b920:	014002f4 	movhi	r5,11
   8b924:	2968b004 	addi	r5,r5,-23872
   8b928:	21400a26 	beq	r4,r5,8b954 <alt_load+0x44>
  {
    while( to != end )
   8b92c:	008002f4 	movhi	r2,11
   8b930:	10a8b004 	addi	r2,r2,-23872
   8b934:	20800726 	beq	r4,r2,8b954 <alt_load+0x44>
    {
      *to++ = *from++;
   8b938:	21800104 	addi	r6,r4,4
   8b93c:	118dc83a 	sub	r6,r2,r6
   8b940:	300cd0ba 	srli	r6,r6,2
   8b944:	31800044 	addi	r6,r6,1
   8b948:	318d883a 	add	r6,r6,r6
   8b94c:	318d883a 	add	r6,r6,r6
   8b950:	008a24c0 	call	8a24c <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   8b954:	01000234 	movhi	r4,8
   8b958:	21000804 	addi	r4,r4,32
   8b95c:	01400234 	movhi	r5,8
   8b960:	29400804 	addi	r5,r5,32
   8b964:	21400a26 	beq	r4,r5,8b990 <alt_load+0x80>
  {
    while( to != end )
   8b968:	00800234 	movhi	r2,8
   8b96c:	10805404 	addi	r2,r2,336
   8b970:	20800726 	beq	r4,r2,8b990 <alt_load+0x80>
    {
      *to++ = *from++;
   8b974:	21800104 	addi	r6,r4,4
   8b978:	118dc83a 	sub	r6,r2,r6
   8b97c:	300cd0ba 	srli	r6,r6,2
   8b980:	31800044 	addi	r6,r6,1
   8b984:	318d883a 	add	r6,r6,r6
   8b988:	318d883a 	add	r6,r6,r6
   8b98c:	008a24c0 	call	8a24c <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   8b990:	01000274 	movhi	r4,9
   8b994:	2133a004 	addi	r4,r4,-12672
   8b998:	01400274 	movhi	r5,9
   8b99c:	2973a004 	addi	r5,r5,-12672
   8b9a0:	21400a26 	beq	r4,r5,8b9cc <alt_load+0xbc>
  {
    while( to != end )
   8b9a4:	008002b4 	movhi	r2,10
   8b9a8:	109bf804 	addi	r2,r2,28640
   8b9ac:	20800726 	beq	r4,r2,8b9cc <alt_load+0xbc>
    {
      *to++ = *from++;
   8b9b0:	21800104 	addi	r6,r4,4
   8b9b4:	118dc83a 	sub	r6,r2,r6
   8b9b8:	300cd0ba 	srli	r6,r6,2
   8b9bc:	31800044 	addi	r6,r6,1
   8b9c0:	318d883a 	add	r6,r6,r6
   8b9c4:	318d883a 	add	r6,r6,r6
   8b9c8:	008a24c0 	call	8a24c <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8b9cc:	008c5180 	call	8c518 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   8b9d0:	dfc00017 	ldw	ra,0(sp)
   8b9d4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   8b9d8:	008c6781 	jmpi	8c678 <alt_icache_flush_all>

0008b9dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8b9dc:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8b9e0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8b9e4:	dfc00115 	stw	ra,4(sp)
   8b9e8:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8b9ec:	008bca40 	call	8bca4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8b9f0:	008bcc40 	call	8bcc4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8b9f4:	010002b4 	movhi	r4,10
   8b9f8:	211bf104 	addi	r4,r4,28612
   8b9fc:	200b883a 	mov	r5,r4
   8ba00:	200d883a 	mov	r6,r4
   8ba04:	008c6840 	call	8c684 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8ba08:	008c5b00 	call	8c5b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8ba0c:	01000274 	movhi	r4,9
   8ba10:	21318504 	addi	r4,r4,-14828
   8ba14:	008cb2c0 	call	8cb2c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8ba18:	d12cd117 	ldw	r4,-19644(gp)
   8ba1c:	d16cd017 	ldw	r5,-19648(gp)
   8ba20:	d1accf17 	ldw	r6,-19652(gp)
   8ba24:	00851a80 	call	851a8 <main>
  close(STDOUT_FILENO);
   8ba28:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8ba2c:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
   8ba30:	008c4380 	call	8c438 <close>
  exit (result);
   8ba34:	8009883a 	mov	r4,r16
   8ba38:	008cb400 	call	8cb40 <exit>

0008ba3c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8ba3c:	f800283a 	ret

0008ba40 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8ba40:	f800283a 	ret

0008ba44 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ba44:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ba48:	00bfff84 	movi	r2,-2
   8ba4c:	1884703a 	and	r2,r3,r2
   8ba50:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8ba54:	d0a00817 	ldw	r2,-32736(gp)
   8ba58:	017fff04 	movi	r5,-4
   8ba5c:	108000c4 	addi	r2,r2,3
   8ba60:	1144703a 	and	r2,r2,r5
   8ba64:	d0a00815 	stw	r2,-32736(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8ba68:	1109883a 	add	r4,r2,r4
   8ba6c:	01400334 	movhi	r5,12
   8ba70:	29609c04 	addi	r5,r5,-32144
   8ba74:	29000336 	bltu	r5,r4,8ba84 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   8ba78:	d1200815 	stw	r4,-32736(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ba7c:	1801703a 	wrctl	status,r3
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   8ba80:	f800283a 	ret
   8ba84:	1801703a 	wrctl	status,r3
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8ba88:	00bfffc4 	movi	r2,-1
   8ba8c:	f800283a 	ret

0008ba90 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ba90:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ba94:	00ffff84 	movi	r3,-2
   8ba98:	10c6703a 	and	r3,r2,r3
   8ba9c:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8baa0:	21400117 	ldw	r5,4(r4)
   8baa4:	20c00017 	ldw	r3,0(r4)
   8baa8:	19400115 	stw	r5,4(r3)
  entry->previous->next = entry->next;
   8baac:	21400117 	ldw	r5,4(r4)
   8bab0:	28c00015 	stw	r3,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8bab4:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   8bab8:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8babc:	1001703a 	wrctl	status,r2
   8bac0:	f800283a 	ret

0008bac4 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8bac4:	d0acd217 	ldw	r2,-19640(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8bac8:	defffa04 	addi	sp,sp,-24
   8bacc:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8bad0:	d4200917 	ldw	r16,-32732(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8bad4:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8bad8:	dc800215 	stw	r18,8(sp)
   8badc:	dfc00515 	stw	ra,20(sp)
   8bae0:	dd000415 	stw	r20,16(sp)
   8bae4:	dcc00315 	stw	r19,12(sp)
   8bae8:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8baec:	d4a00904 	addi	r18,gp,-32732

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8baf0:	d0acd215 	stw	r2,-19640(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8baf4:	84801b26 	beq	r16,r18,8bb64 <alt_tick+0xa0>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8baf8:	80800403 	ldbu	r2,16(r16)
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   8bafc:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bb00:	053fff84 	movi	r20,-2

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   8bb04:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8bb08:	1000121e 	bne	r2,zero,8bb54 <alt_tick+0x90>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8bb0c:	d0ecd217 	ldw	r3,-19640(gp)
   8bb10:	80800217 	ldw	r2,8(r16)
   8bb14:	18800a36 	bltu	r3,r2,8bb40 <alt_tick+0x7c>
    {
      next_callback = alarm->callback (alarm->context);
   8bb18:	80800317 	ldw	r2,12(r16)
   8bb1c:	81000517 	ldw	r4,20(r16)
   8bb20:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8bb24:	10001926 	beq	r2,zero,8bb8c <alt_tick+0xc8>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   8bb28:	81000217 	ldw	r4,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8bb2c:	d0ecd217 	ldw	r3,-19640(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   8bb30:	1105883a 	add	r2,r2,r4
   8bb34:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8bb38:	10c0012e 	bgeu	r2,r3,8bb40 <alt_tick+0x7c>
        {
          alarm->rollover = 1;
   8bb3c:	84c00405 	stb	r19,16(r16)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8bb40:	8c800826 	beq	r17,r18,8bb64 <alt_tick+0xa0>
   8bb44:	8821883a 	mov	r16,r17
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8bb48:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   8bb4c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8bb50:	103fee26 	beq	r2,zero,8bb0c <__alt_data_end+0xfffd389c>
   8bb54:	d0acd217 	ldw	r2,-19640(gp)
   8bb58:	10000a26 	beq	r2,zero,8bb84 <alt_tick+0xc0>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8bb5c:	d0acd217 	ldw	r2,-19640(gp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8bb60:	8cbff81e 	bne	r17,r18,8bb44 <__alt_data_end+0xfffd38d4>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   8bb64:	dfc00517 	ldw	ra,20(sp)
   8bb68:	dd000417 	ldw	r20,16(sp)
   8bb6c:	dcc00317 	ldw	r19,12(sp)
   8bb70:	dc800217 	ldw	r18,8(sp)
   8bb74:	dc400117 	ldw	r17,4(sp)
   8bb78:	dc000017 	ldw	r16,0(sp)
   8bb7c:	dec00604 	addi	sp,sp,24
   8bb80:	f800283a 	ret
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
   8bb84:	80000405 	stb	zero,16(r16)
   8bb88:	003fe006 	br	8bb0c <__alt_data_end+0xfffd389c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bb8c:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bb90:	1506703a 	and	r3,r2,r20
   8bb94:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8bb98:	81000117 	ldw	r4,4(r16)
   8bb9c:	80c00017 	ldw	r3,0(r16)
   8bba0:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
   8bba4:	81000117 	ldw	r4,4(r16)
   8bba8:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8bbac:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
   8bbb0:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bbb4:	1001703a 	wrctl	status,r2
   8bbb8:	003fe106 	br	8bb40 <__alt_data_end+0xfffd38d0>

0008bbbc <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   8bbbc:	008c4301 	jmpi	8c430 <alt_busy_sleep>

0008bbc0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8bbc0:	defffe04 	addi	sp,sp,-8
   8bbc4:	dfc00115 	stw	ra,4(sp)
   8bbc8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8bbcc:	20001116 	blt	r4,zero,8bc14 <write+0x54>
   8bbd0:	21000324 	muli	r4,r4,12
   8bbd4:	008002f4 	movhi	r2,11
   8bbd8:	10a83504 	addi	r2,r2,-24364
   8bbdc:	2089883a 	add	r4,r4,r2
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8bbe0:	20800217 	ldw	r2,8(r4)
   8bbe4:	108000cc 	andi	r2,r2,3
   8bbe8:	10001626 	beq	r2,zero,8bc44 <write+0x84>
   8bbec:	20800017 	ldw	r2,0(r4)
   8bbf0:	10800617 	ldw	r2,24(r2)
   8bbf4:	10001326 	beq	r2,zero,8bc44 <write+0x84>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8bbf8:	103ee83a 	callr	r2
   8bbfc:	1021883a 	mov	r16,r2
   8bc00:	80001c16 	blt	r16,zero,8bc74 <write+0xb4>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
   8bc04:	dfc00117 	ldw	ra,4(sp)
   8bc08:	dc000017 	ldw	r16,0(sp)
   8bc0c:	dec00204 	addi	sp,sp,8
   8bc10:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   8bc14:	008002f4 	movhi	r2,11
   8bc18:	10a8af04 	addi	r2,r2,-23876
   8bc1c:	10800017 	ldw	r2,0(r2)
   8bc20:	10000226 	beq	r2,zero,8bc2c <write+0x6c>
   8bc24:	103ee83a 	callr	r2
   8bc28:	00000206 	br	8bc34 <write+0x74>
   8bc2c:	008002f4 	movhi	r2,11
   8bc30:	10b56c04 	addi	r2,r2,-10832
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8bc34:	00c01444 	movi	r3,81
   8bc38:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   8bc3c:	00bfffc4 	movi	r2,-1
   8bc40:	003ff006 	br	8bc04 <__alt_data_end+0xfffd3994>
   8bc44:	008002f4 	movhi	r2,11
   8bc48:	10a8af04 	addi	r2,r2,-23876
   8bc4c:	10800017 	ldw	r2,0(r2)
   8bc50:	10000526 	beq	r2,zero,8bc68 <write+0xa8>
   8bc54:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
   8bc58:	00c00344 	movi	r3,13
   8bc5c:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   8bc60:	00bfffc4 	movi	r2,-1
   8bc64:	003fe706 	br	8bc04 <__alt_data_end+0xfffd3994>
   8bc68:	008002f4 	movhi	r2,11
   8bc6c:	10b56c04 	addi	r2,r2,-10832
   8bc70:	003ff906 	br	8bc58 <__alt_data_end+0xfffd39e8>
   8bc74:	008002f4 	movhi	r2,11
   8bc78:	10a8af04 	addi	r2,r2,-23876
   8bc7c:	10800017 	ldw	r2,0(r2)
   8bc80:	10000526 	beq	r2,zero,8bc98 <write+0xd8>
   8bc84:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
   8bc88:	0421c83a 	sub	r16,zero,r16
   8bc8c:	14000015 	stw	r16,0(r2)
        return -1;
   8bc90:	00bfffc4 	movi	r2,-1
   8bc94:	003fdb06 	br	8bc04 <__alt_data_end+0xfffd3994>
   8bc98:	008002f4 	movhi	r2,11
   8bc9c:	10b56c04 	addi	r2,r2,-10832
   8bca0:	003ff906 	br	8bc88 <__alt_data_end+0xfffd3a18>

0008bca4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8bca4:	deffff04 	addi	sp,sp,-4
   8bca8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   8bcac:	008c9280 	call	8c928 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8bcb0:	00800044 	movi	r2,1
   8bcb4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8bcb8:	dfc00017 	ldw	ra,0(sp)
   8bcbc:	dec00104 	addi	sp,sp,4
   8bcc0:	f800283a 	ret

0008bcc4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8bcc4:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   8bcc8:	01c0fa04 	movi	r7,1000
   8bccc:	01000434 	movhi	r4,16
   8bcd0:	21040804 	addi	r4,r4,4128
   8bcd4:	000b883a 	mov	r5,zero
   8bcd8:	018000c4 	movi	r6,3
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8bcdc:	dfc00115 	stw	ra,4(sp)
   8bce0:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   8bce4:	008c3e00 	call	8c3e0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   8bce8:	040002f4 	movhi	r16,11
   8bcec:	84242704 	addi	r16,r16,-28516
   8bcf0:	8009883a 	mov	r4,r16
   8bcf4:	000b883a 	mov	r5,zero
   8bcf8:	000d883a 	mov	r6,zero
   8bcfc:	008beb40 	call	8beb4 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8bd00:	813ff604 	addi	r4,r16,-40
   8bd04:	014002f4 	movhi	r5,11
   8bd08:	2968ab04 	addi	r5,r5,-23892
    ALTERA_AVALON_SPI_INIT ( TOUCH_PANEL_SPI, touch_panel_spi);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
}
   8bd0c:	dfc00117 	ldw	ra,4(sp)
   8bd10:	dc000017 	ldw	r16,0(sp)
   8bd14:	dec00204 	addi	sp,sp,8
   8bd18:	008c5381 	jmpi	8c538 <alt_dev_llist_insert>

0008bd1c <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8bd1c:	20800017 	ldw	r2,0(r4)
   8bd20:	21c00217 	ldw	r7,8(r4)
   8bd24:	11000a04 	addi	r4,r2,40
   8bd28:	008bff81 	jmpi	8bff8 <altera_avalon_jtag_uart_read>

0008bd2c <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8bd2c:	20800017 	ldw	r2,0(r4)
   8bd30:	21c00217 	ldw	r7,8(r4)
   8bd34:	11000a04 	addi	r4,r2,40
   8bd38:	008c1341 	jmpi	8c134 <altera_avalon_jtag_uart_write>

0008bd3c <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8bd3c:	20800017 	ldw	r2,0(r4)
   8bd40:	21400217 	ldw	r5,8(r4)
   8bd44:	11000a04 	addi	r4,r2,40
   8bd48:	008bf341 	jmpi	8bf34 <altera_avalon_jtag_uart_close>

0008bd4c <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8bd4c:	21000017 	ldw	r4,0(r4)
   8bd50:	21000a04 	addi	r4,r4,40
   8bd54:	008bf841 	jmpi	8bf84 <altera_avalon_jtag_uart_ioctl>

0008bd58 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8bd58:	20800017 	ldw	r2,0(r4)
   8bd5c:	10c00137 	ldwio	r3,4(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8bd60:	18c1000c 	andi	r3,r3,1024
   8bd64:	18000a1e 	bne	r3,zero,8bd90 <altera_avalon_jtag_uart_timeout+0x38>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8bd68:	20800917 	ldw	r2,36(r4)
   8bd6c:	00e00034 	movhi	r3,32768
   8bd70:	18ffff04 	addi	r3,r3,-4
   8bd74:	18800236 	bltu	r3,r2,8bd80 <altera_avalon_jtag_uart_timeout+0x28>
    sp->host_inactive++;
   8bd78:	10800044 	addi	r2,r2,1
   8bd7c:	20800915 	stw	r2,36(r4)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8bd80:	008002f4 	movhi	r2,11
   8bd84:	10b57204 	addi	r2,r2,-10808
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8bd88:	10800017 	ldw	r2,0(r2)
   8bd8c:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8bd90:	20c00817 	ldw	r3,32(r4)
   8bd94:	18c10014 	ori	r3,r3,1024
   8bd98:	10c00135 	stwio	r3,4(r2)
   8bd9c:	008002f4 	movhi	r2,11
   8bda0:	10b57204 	addi	r2,r2,-10808
    sp->host_inactive = 0;
   8bda4:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8bda8:	10800017 	ldw	r2,0(r2)
   8bdac:	f800283a 	ret

0008bdb0 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   8bdb0:	21c00017 	ldw	r7,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8bdb4:	02bfff84 	movi	r10,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8bdb8:	02ffff44 	movi	r11,-3
   8bdbc:	3a400104 	addi	r9,r7,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8bdc0:	4a000037 	ldwio	r8,0(r9)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8bdc4:	4080c00c 	andi	r2,r8,768
   8bdc8:	10003326 	beq	r2,zero,8be98 <altera_avalon_jtag_uart_irq+0xe8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8bdcc:	4080400c 	andi	r2,r8,256
   8bdd0:	10001626 	beq	r2,zero,8be2c <altera_avalon_jtag_uart_irq+0x7c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bdd4:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   8bdd8:	21800b17 	ldw	r6,44(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bddc:	10800044 	addi	r2,r2,1
   8bde0:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
   8bde4:	30800c1e 	bne	r6,r2,8be18 <altera_avalon_jtag_uart_irq+0x68>
   8bde8:	00002c06 	br	8be9c <altera_avalon_jtag_uart_irq+0xec>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8bdec:	21400a17 	ldw	r5,40(r4)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bdf0:	20c00a17 	ldw	r3,40(r4)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8bdf4:	214b883a 	add	r5,r4,r5
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8bdf8:	18c00044 	addi	r3,r3,1
   8bdfc:	18c1ffcc 	andi	r3,r3,2047
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8be00:	28800e05 	stb	r2,56(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8be04:	20c00a15 	stw	r3,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8be08:	20c00a17 	ldw	r3,40(r4)
   8be0c:	18c00044 	addi	r3,r3,1
   8be10:	18c1ffcc 	andi	r3,r3,2047
        if (next == sp->rx_out)
   8be14:	30c00326 	beq	r6,r3,8be24 <altera_avalon_jtag_uart_irq+0x74>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8be18:	38800037 	ldwio	r2,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8be1c:	10e0000c 	andi	r3,r2,32768
   8be20:	183ff21e 	bne	r3,zero,8bdec <__alt_data_end+0xfffd3b7c>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8be24:	10bfffec 	andhi	r2,r2,65535
   8be28:	10001c1e 	bne	r2,zero,8be9c <altera_avalon_jtag_uart_irq+0xec>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8be2c:	4080800c 	andi	r2,r8,512
   8be30:	103fe326 	beq	r2,zero,8bdc0 <__alt_data_end+0xfffd3b50>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8be34:	4010d43a 	srli	r8,r8,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   8be38:	40000b1e 	bne	r8,zero,8be68 <altera_avalon_jtag_uart_irq+0xb8>
   8be3c:	003fe006 	br	8bdc0 <__alt_data_end+0xfffd3b50>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8be40:	20800d17 	ldw	r2,52(r4)
   8be44:	2085883a 	add	r2,r4,r2
   8be48:	10820e07 	ldb	r2,2104(r2)
   8be4c:	38800035 	stwio	r2,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8be50:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8be54:	423fffc4 	addi	r8,r8,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8be58:	10800044 	addi	r2,r2,1
   8be5c:	1081ffcc 	andi	r2,r2,2047
   8be60:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8be64:	403fd626 	beq	r8,zero,8bdc0 <__alt_data_end+0xfffd3b50>
   8be68:	20c00d17 	ldw	r3,52(r4)
   8be6c:	20800c17 	ldw	r2,48(r4)
   8be70:	18bff31e 	bne	r3,r2,8be40 <__alt_data_end+0xfffd3bd0>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8be74:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8be78:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8be7c:	12c4703a 	and	r2,r2,r11
   8be80:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8be84:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8be88:	48800037 	ldwio	r2,0(r9)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8be8c:	4a000037 	ldwio	r8,0(r9)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8be90:	4080c00c 	andi	r2,r8,768
   8be94:	103fcd1e 	bne	r2,zero,8bdcc <__alt_data_end+0xfffd3b5c>
   8be98:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8be9c:	20800817 	ldw	r2,32(r4)
   8bea0:	1284703a 	and	r2,r2,r10
   8bea4:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8bea8:	48800035 	stwio	r2,0(r9)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8beac:	48800037 	ldwio	r2,0(r9)
   8beb0:	003fde06 	br	8be2c <__alt_data_end+0xfffd3bbc>

0008beb4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8beb4:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8beb8:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8bebc:	dc000115 	stw	r16,4(sp)
   8bec0:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8bec4:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8bec8:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8becc:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8bed0:	2809883a 	mov	r4,r5
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8bed4:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8bed8:	300b883a 	mov	r5,r6
   8bedc:	800f883a 	mov	r7,r16
   8bee0:	01800274 	movhi	r6,9
   8bee4:	31af6c04 	addi	r6,r6,-16976
   8bee8:	d8000015 	stw	zero,0(sp)
   8beec:	008b7fc0 	call	8b7fc <alt_ic_isr_register>
   8bef0:	008002f4 	movhi	r2,11
   8bef4:	10b57204 	addi	r2,r2,-10808
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8bef8:	11400017 	ldw	r5,0(r2)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8befc:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8bf00:	81000204 	addi	r4,r16,8
   8bf04:	01800274 	movhi	r6,9
   8bf08:	31af5604 	addi	r6,r6,-17064
   8bf0c:	800f883a 	mov	r7,r16
   8bf10:	008b7680 	call	8b768 <alt_alarm_start>
   8bf14:	1000030e 	bge	r2,zero,8bf24 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8bf18:	00a00034 	movhi	r2,32768
   8bf1c:	10bfffc4 	addi	r2,r2,-1
   8bf20:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8bf24:	dfc00217 	ldw	ra,8(sp)
   8bf28:	dc000117 	ldw	r16,4(sp)
   8bf2c:	dec00304 	addi	sp,sp,12
   8bf30:	f800283a 	ret

0008bf34 <altera_avalon_jtag_uart_close>:
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
   8bf34:	2890000c 	andi	r2,r5,16384
   8bf38:	21c00c17 	ldw	r7,48(r4)
   8bf3c:	10000426 	beq	r2,zero,8bf50 <altera_avalon_jtag_uart_close+0x1c>
   8bf40:	00000606 	br	8bf5c <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8bf44:	21800917 	ldw	r6,36(r4)
   8bf48:	20c00117 	ldw	r3,4(r4)
   8bf4c:	30c00a2e 	bgeu	r6,r3,8bf78 <altera_avalon_jtag_uart_close+0x44>
   8bf50:	20c00d17 	ldw	r3,52(r4)
   8bf54:	19fffb1e 	bne	r3,r7,8bf44 <__alt_data_end+0xfffd3cd4>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
   8bf58:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8bf5c:	20800d17 	ldw	r2,52(r4)
   8bf60:	11c00626 	beq	r2,r7,8bf7c <altera_avalon_jtag_uart_close+0x48>
   8bf64:	20c00917 	ldw	r3,36(r4)
   8bf68:	20800117 	ldw	r2,4(r4)
   8bf6c:	1880032e 	bgeu	r3,r2,8bf7c <altera_avalon_jtag_uart_close+0x48>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
   8bf70:	00bffd44 	movi	r2,-11
   8bf74:	f800283a 	ret
   8bf78:	f800283a 	ret
    }
  }

  return 0;
   8bf7c:	0005883a 	mov	r2,zero
}
   8bf80:	f800283a 	ret

0008bf84 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   8bf84:	009a8044 	movi	r2,27137
   8bf88:	28800d26 	beq	r5,r2,8bfc0 <altera_avalon_jtag_uart_ioctl+0x3c>
   8bf8c:	009a8084 	movi	r2,27138
   8bf90:	2880091e 	bne	r5,r2,8bfb8 <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8bf94:	20c00117 	ldw	r3,4(r4)
   8bf98:	00a00034 	movhi	r2,32768
   8bf9c:	10bfffc4 	addi	r2,r2,-1
   8bfa0:	18800526 	beq	r3,r2,8bfb8 <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8bfa4:	21000917 	ldw	r4,36(r4)
      rc = 0;
   8bfa8:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8bfac:	20c7803a 	cmpltu	r3,r4,r3
   8bfb0:	30c00015 	stw	r3,0(r6)
   8bfb4:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
   8bfb8:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
   8bfbc:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8bfc0:	20c00117 	ldw	r3,4(r4)
   8bfc4:	00a00034 	movhi	r2,32768
   8bfc8:	10bfffc4 	addi	r2,r2,-1
   8bfcc:	18bffa26 	beq	r3,r2,8bfb8 <__alt_data_end+0xfffd3d48>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8bfd0:	30800017 	ldw	r2,0(r6)
   8bfd4:	01600034 	movhi	r5,32768
   8bfd8:	297fff04 	addi	r5,r5,-4
   8bfdc:	10ffff84 	addi	r3,r2,-2
   8bfe0:	28c0022e 	bgeu	r5,r3,8bfec <altera_avalon_jtag_uart_ioctl+0x68>
   8bfe4:	00a00034 	movhi	r2,32768
   8bfe8:	10bfff84 	addi	r2,r2,-2
   8bfec:	20800115 	stw	r2,4(r4)
      rc = 0;
   8bff0:	0005883a 	mov	r2,zero
   8bff4:	f800283a 	ret

0008bff8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8bff8:	defff604 	addi	sp,sp,-40
   8bffc:	dcc00315 	stw	r19,12(sp)
   8c000:	dfc00915 	stw	ra,36(sp)
   8c004:	df000815 	stw	fp,32(sp)
   8c008:	ddc00715 	stw	r23,28(sp)
   8c00c:	dd800615 	stw	r22,24(sp)
   8c010:	dd400515 	stw	r21,20(sp)
   8c014:	dd000415 	stw	r20,16(sp)
   8c018:	dc800215 	stw	r18,8(sp)
   8c01c:	dc400115 	stw	r17,4(sp)
   8c020:	dc000015 	stw	r16,0(sp)
   8c024:	3027883a 	mov	r19,r6
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c028:	0180270e 	bge	zero,r6,8c0c8 <altera_avalon_jtag_uart_read+0xd0>
   8c02c:	24000b17 	ldw	r16,44(r4)
   8c030:	2025883a 	mov	r18,r4
   8c034:	282d883a 	mov	r22,r5
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8c038:	3dd0000c 	andi	r23,r7,16384
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8c03c:	05420004 	movi	r21,2048
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8c040:	b039883a 	mov	fp,r22
   8c044:	00000a06 	br	8c070 <altera_avalon_jtag_uart_read+0x78>
   8c048:	9880012e 	bgeu	r19,r2,8c050 <altera_avalon_jtag_uart_read+0x58>
   8c04c:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c050:	8c21883a 	add	r16,r17,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   8c054:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c058:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   8c05c:	008a24c0 	call	8a24c <memcpy>
      ptr   += n;
      space -= n;
   8c060:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c064:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
   8c068:	e479883a 	add	fp,fp,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
   8c06c:	04c0090e 	bge	zero,r19,8c094 <altera_avalon_jtag_uart_read+0x9c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8c070:	95000a17 	ldw	r20,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8c074:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
   8c078:	a4000136 	bltu	r20,r16,8c080 <altera_avalon_jtag_uart_read+0x88>
        n = in - out;
   8c07c:	a405c83a 	sub	r2,r20,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   8c080:	81400e04 	addi	r5,r16,56
   8c084:	e009883a 	mov	r4,fp
   8c088:	914b883a 	add	r5,r18,r5
   8c08c:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
   8c090:	103fed1e 	bne	r2,zero,8c048 <__alt_data_end+0xfffd3dd8>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   8c094:	e5801b1e 	bne	fp,r22,8c104 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8c098:	b8000426 	beq	r23,zero,8c0ac <altera_avalon_jtag_uart_read+0xb4>
   8c09c:	00000c06 	br	8c0d0 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8c0a0:	90c00917 	ldw	r3,36(r18)
   8c0a4:	90800117 	ldw	r2,4(r18)
   8c0a8:	1880022e 	bgeu	r3,r2,8c0b4 <altera_avalon_jtag_uart_read+0xbc>
   8c0ac:	90800a17 	ldw	r2,40(r18)
   8c0b0:	a0bffb26 	beq	r20,r2,8c0a0 <__alt_data_end+0xfffd3e30>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8c0b4:	90800a17 	ldw	r2,40(r18)
   8c0b8:	a0800126 	beq	r20,r2,8c0c0 <altera_avalon_jtag_uart_read+0xc8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c0bc:	04ffe016 	blt	zero,r19,8c040 <__alt_data_end+0xfffd3dd0>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
   8c0c0:	00bffec4 	movi	r2,-5
   8c0c4:	00000306 	br	8c0d4 <altera_avalon_jtag_uart_read+0xdc>
   8c0c8:	39d0000c 	andi	r7,r7,16384
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   8c0cc:	383ffc26 	beq	r7,zero,8c0c0 <__alt_data_end+0xfffd3e50>
    return -EWOULDBLOCK;
   8c0d0:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   8c0d4:	dfc00917 	ldw	ra,36(sp)
   8c0d8:	df000817 	ldw	fp,32(sp)
   8c0dc:	ddc00717 	ldw	r23,28(sp)
   8c0e0:	dd800617 	ldw	r22,24(sp)
   8c0e4:	dd400517 	ldw	r21,20(sp)
   8c0e8:	dd000417 	ldw	r20,16(sp)
   8c0ec:	dcc00317 	ldw	r19,12(sp)
   8c0f0:	dc800217 	ldw	r18,8(sp)
   8c0f4:	dc400117 	ldw	r17,4(sp)
   8c0f8:	dc000017 	ldw	r16,0(sp)
   8c0fc:	dec00a04 	addi	sp,sp,40
   8c100:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c104:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c108:	00ffff84 	movi	r3,-2
   8c10c:	10c6703a 	and	r3,r2,r3
   8c110:	1801703a 	wrctl	status,r3

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c114:	90c00817 	ldw	r3,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c118:	91000017 	ldw	r4,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c11c:	18c00054 	ori	r3,r3,1
   8c120:	90c00815 	stw	r3,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c124:	20c00135 	stwio	r3,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c128:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   8c12c:	e585c83a 	sub	r2,fp,r22
   8c130:	003fe806 	br	8c0d4 <__alt_data_end+0xfffd3e64>

0008c134 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8c134:	defff404 	addi	sp,sp,-48
   8c138:	dd400715 	stw	r21,28(sp)
   8c13c:	dc000215 	stw	r16,8(sp)
   8c140:	dfc00b15 	stw	ra,44(sp)
   8c144:	df000a15 	stw	fp,40(sp)
   8c148:	ddc00915 	stw	r23,36(sp)
   8c14c:	dd800815 	stw	r22,32(sp)
   8c150:	dd000615 	stw	r20,24(sp)
   8c154:	dcc00515 	stw	r19,20(sp)
   8c158:	dc800415 	stw	r18,16(sp)
   8c15c:	dc400315 	stw	r17,12(sp)
   8c160:	d9400015 	stw	r5,0(sp)
   8c164:	d9c00115 	stw	r7,4(sp)
   8c168:	302b883a 	mov	r21,r6
   8c16c:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8c170:	01804e0e 	bge	zero,r6,8c2ac <altera_avalon_jtag_uart_write+0x178>
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   8c174:	3c90000c 	andi	r18,r7,16384
   8c178:	282d883a 	mov	r22,r5
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8c17c:	0501ffc4 	movi	r20,2047
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8c180:	04c20004 	movi	r19,2048
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c184:	047fff84 	movi	r17,-2
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8c188:	85c00c17 	ldw	r23,48(r16)
      out = sp->tx_out;
   8c18c:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
   8c190:	b8c0412e 	bgeu	r23,r3,8c298 <altera_avalon_jtag_uart_write+0x164>
        n = out - 1 - in;
   8c194:	1f3fffc4 	addi	fp,r3,-1
   8c198:	e5f9c83a 	sub	fp,fp,r23
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
   8c19c:	e0002626 	beq	fp,zero,8c238 <altera_avalon_jtag_uart_write+0x104>
   8c1a0:	af00012e 	bgeu	r21,fp,8c1a8 <altera_avalon_jtag_uart_write+0x74>
   8c1a4:	a839883a 	mov	fp,r21
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   8c1a8:	b9020e04 	addi	r4,r23,2104
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c1ac:	e5ef883a 	add	r23,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   8c1b0:	b00b883a 	mov	r5,r22
   8c1b4:	8109883a 	add	r4,r16,r4
   8c1b8:	e00d883a 	mov	r6,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c1bc:	bdc1ffcc 	andi	r23,r23,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   8c1c0:	008a24c0 	call	8a24c <memcpy>
      ptr   += n;
      count -= n;
   8c1c4:	af2bc83a 	sub	r21,r21,fp

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c1c8:	85c00c15 	stw	r23,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
   8c1cc:	b72d883a 	add	r22,r22,fp
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8c1d0:	057fed16 	blt	zero,r21,8c188 <__alt_data_end+0xfffd3f18>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c1d4:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c1d8:	00ffff84 	movi	r3,-2
   8c1dc:	10c6703a 	and	r3,r2,r3
   8c1e0:	1801703a 	wrctl	status,r3
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c1e4:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c1e8:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c1ec:	18c00094 	ori	r3,r3,2
   8c1f0:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c1f4:	20c00135 	stwio	r3,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c1f8:	1001703a 	wrctl	status,r2
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8c1fc:	d8c00017 	ldw	r3,0(sp)
   8c200:	b0c02026 	beq	r22,r3,8c284 <altera_avalon_jtag_uart_write+0x150>
    return ptr - start;
   8c204:	b0c5c83a 	sub	r2,r22,r3
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
   8c208:	dfc00b17 	ldw	ra,44(sp)
   8c20c:	df000a17 	ldw	fp,40(sp)
   8c210:	ddc00917 	ldw	r23,36(sp)
   8c214:	dd800817 	ldw	r22,32(sp)
   8c218:	dd400717 	ldw	r21,28(sp)
   8c21c:	dd000617 	ldw	r20,24(sp)
   8c220:	dcc00517 	ldw	r19,20(sp)
   8c224:	dc800417 	ldw	r18,16(sp)
   8c228:	dc400317 	ldw	r17,12(sp)
   8c22c:	dc000217 	ldw	r16,8(sp)
   8c230:	dec00c04 	addi	sp,sp,48
   8c234:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c238:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c23c:	1448703a 	and	r4,r2,r17
   8c240:	2001703a 	wrctl	status,r4
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c244:	81000817 	ldw	r4,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c248:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c24c:	21000094 	ori	r4,r4,2
   8c250:	81000815 	stw	r4,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c254:	29000135 	stwio	r4,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c258:	1001703a 	wrctl	status,r2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   8c25c:	903fe71e 	bne	r18,zero,8c1fc <__alt_data_end+0xfffd3f8c>
   8c260:	81000917 	ldw	r4,36(r16)
   8c264:	00000206 	br	8c270 <altera_avalon_jtag_uart_write+0x13c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8c268:	80800117 	ldw	r2,4(r16)
   8c26c:	2080022e 	bgeu	r4,r2,8c278 <altera_avalon_jtag_uart_write+0x144>
   8c270:	80800d17 	ldw	r2,52(r16)
   8c274:	18bffc26 	beq	r3,r2,8c268 <__alt_data_end+0xfffd3ff8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   8c278:	203fe01e 	bne	r4,zero,8c1fc <__alt_data_end+0xfffd3f8c>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8c27c:	057fc216 	blt	zero,r21,8c188 <__alt_data_end+0xfffd3f18>
   8c280:	003fd406 	br	8c1d4 <__alt_data_end+0xfffd3f64>
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
   8c284:	d8c00117 	ldw	r3,4(sp)
   8c288:	1d90000c 	andi	r22,r3,16384
   8c28c:	b0000926 	beq	r22,zero,8c2b4 <altera_avalon_jtag_uart_write+0x180>
    return -EWOULDBLOCK;
   8c290:	00bffd44 	movi	r2,-11
   8c294:	003fdc06 	br	8c208 <__alt_data_end+0xfffd3f98>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
   8c298:	18000226 	beq	r3,zero,8c2a4 <altera_avalon_jtag_uart_write+0x170>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8c29c:	9df9c83a 	sub	fp,r19,r23
   8c2a0:	003fbe06 	br	8c19c <__alt_data_end+0xfffd3f2c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8c2a4:	a5f9c83a 	sub	fp,r20,r23
   8c2a8:	003fbc06 	br	8c19c <__alt_data_end+0xfffd3f2c>
   8c2ac:	282d883a 	mov	r22,r5
   8c2b0:	003fc806 	br	8c1d4 <__alt_data_end+0xfffd3f64>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8c2b4:	00bffec4 	movi	r2,-5
   8c2b8:	003fd306 	br	8c208 <__alt_data_end+0xfffd3f98>

0008c2bc <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   8c2bc:	d8800017 	ldw	r2,0(sp)
   8c2c0:	da800117 	ldw	r10,4(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   8c2c4:	00c00044 	movi	r3,1

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   8c2c8:	dbc00217 	ldw	r15,8(sp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   8c2cc:	194a983a 	sll	r5,r3,r5
int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
  const alt_u8 * write_end = write_data + write_length;
   8c2d0:	3999883a 	add	r12,r7,r6
  alt_u8 * read_end = read_data + read_length;
   8c2d4:	509b883a 	add	r13,r10,r2
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   8c2d8:	21400535 	stwio	r5,20(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   8c2dc:	78c0008c 	andi	r3,r15,2
   8c2e0:	18002d26 	beq	r3,zero,8c398 <alt_avalon_spi_command+0xdc>
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   8c2e4:	20c00037 	ldwio	r3,0(r4)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   8c2e8:	02000044 	movi	r8,1
   8c2ec:	22400204 	addi	r9,r4,8
                           alt_u32 flags)
{
  const alt_u8 * write_end = write_data + write_length;
  alt_u8 * read_end = read_data + read_length;

  alt_u32 write_zeros = read_length;
   8c2f0:	1017883a 	mov	r11,r2
      if (write_data < write_end)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
      else if (write_zeros > 0)
      {
        write_zeros--;
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   8c2f4:	23800104 	addi	r14,r4,4
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   8c2f8:	48c00037 	ldwio	r3,0(r9)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   8c2fc:	1940100c 	andi	r5,r3,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   8c300:	18c0200c 	andi	r3,r3,128
   8c304:	28000626 	beq	r5,zero,8c320 <alt_avalon_spi_command+0x64>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   8c308:	40000526 	beq	r8,zero,8c320 <alt_avalon_spi_command+0x64>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   8c30c:	0200040e 	bge	zero,r8,8c320 <alt_avalon_spi_command+0x64>
    {
      credits--;
   8c310:	423fffc4 	addi	r8,r8,-1

      if (write_data < write_end)
   8c314:	3b001536 	bltu	r7,r12,8c36c <alt_avalon_spi_command+0xb0>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
      else if (write_zeros > 0)
   8c318:	5800191e 	bne	r11,zero,8c380 <alt_avalon_spi_command+0xc4>
      {
        write_zeros--;
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
      }
      else
        credits = -1024;
   8c31c:	023f0004 	movi	r8,-1024
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   8c320:	183ff526 	beq	r3,zero,8c2f8 <__alt_data_end+0xfffd4088>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   8c324:	20c00037 	ldwio	r3,0(r4)

      if (read_ignore > 0)
   8c328:	30000c26 	beq	r6,zero,8c35c <alt_avalon_spi_command+0xa0>
        read_ignore--;
   8c32c:	31bfffc4 	addi	r6,r6,-1
      else
        *read_data++ = (alt_u8)rxdata;
      credits++;
   8c330:	42000044 	addi	r8,r8,1

      if (read_ignore == 0 && read_data == read_end)
   8c334:	303ff01e 	bne	r6,zero,8c2f8 <__alt_data_end+0xfffd4088>
   8c338:	53400226 	beq	r10,r13,8c344 <alt_avalon_spi_command+0x88>
   8c33c:	000d883a 	mov	r6,zero
   8c340:	003fed06 	br	8c2f8 <__alt_data_end+0xfffd4088>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   8c344:	48c00037 	ldwio	r3,0(r9)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   8c348:	18c0080c 	andi	r3,r3,32
   8c34c:	183ffd26 	beq	r3,zero,8c344 <__alt_data_end+0xfffd40d4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   8c350:	7bc0004c 	andi	r15,r15,1
   8c354:	78000e26 	beq	r15,zero,8c390 <alt_avalon_spi_command+0xd4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);

  return read_length;
}
   8c358:	f800283a 	ret
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);

      if (read_ignore > 0)
        read_ignore--;
      else
        *read_data++ = (alt_u8)rxdata;
   8c35c:	50c00005 	stb	r3,0(r10)
      credits++;
   8c360:	42000044 	addi	r8,r8,1
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);

      if (read_ignore > 0)
        read_ignore--;
      else
        *read_data++ = (alt_u8)rxdata;
   8c364:	52800044 	addi	r10,r10,1
   8c368:	003ff306 	br	8c338 <__alt_data_end+0xfffd40c8>
    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    {
      credits--;

      if (write_data < write_end)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   8c36c:	39400003 	ldbu	r5,0(r7)
   8c370:	39c00044 	addi	r7,r7,1
   8c374:	71400035 	stwio	r5,0(r14)
      }
      else
        credits = -1024;
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   8c378:	183fdf26 	beq	r3,zero,8c2f8 <__alt_data_end+0xfffd4088>
   8c37c:	003fe906 	br	8c324 <__alt_data_end+0xfffd40b4>

      if (write_data < write_end)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
      else if (write_zeros > 0)
      {
        write_zeros--;
   8c380:	5affffc4 	addi	r11,r11,-1
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   8c384:	70000035 	stwio	zero,0(r14)
      }
      else
        credits = -1024;
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   8c388:	183fdb26 	beq	r3,zero,8c2f8 <__alt_data_end+0xfffd4088>
   8c38c:	003fe506 	br	8c324 <__alt_data_end+0xfffd40b4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   8c390:	20000335 	stwio	zero,12(r4)
   8c394:	f800283a 	ret

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   8c398:	00c10004 	movi	r3,1024
   8c39c:	20c00335 	stwio	r3,12(r4)
   8c3a0:	003fd006 	br	8c2e4 <__alt_data_end+0xfffd4074>

0008c3a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   8c3a4:	defffe04 	addi	sp,sp,-8
   8c3a8:	dfc00115 	stw	ra,4(sp)
   8c3ac:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   8c3b0:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   8c3b4:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c3b8:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c3bc:	00bfff84 	movi	r2,-2
   8c3c0:	8084703a 	and	r2,r16,r2
   8c3c4:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
   8c3c8:	008bac40 	call	8bac4 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8c3cc:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
   8c3d0:	dfc00117 	ldw	ra,4(sp)
   8c3d4:	dc000017 	ldw	r16,0(sp)
   8c3d8:	dec00204 	addi	sp,sp,8
   8c3dc:	f800283a 	ret

0008c3e0 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   8c3e0:	00c002f4 	movhi	r3,11
   8c3e4:	18f57204 	addi	r3,r3,-10808
   8c3e8:	1a000017 	ldw	r8,0(r3)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   8c3ec:	defffe04 	addi	sp,sp,-8
   8c3f0:	dfc00115 	stw	ra,4(sp)
   8c3f4:	2005883a 	mov	r2,r4
   8c3f8:	2809883a 	mov	r4,r5
   8c3fc:	4000011e 	bne	r8,zero,8c404 <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
   8c400:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   8c404:	00c001c4 	movi	r3,7
   8c408:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8c40c:	300b883a 	mov	r5,r6
   8c410:	d8000015 	stw	zero,0(sp)
   8c414:	01800274 	movhi	r6,9
   8c418:	31b0e904 	addi	r6,r6,-15452
   8c41c:	100f883a 	mov	r7,r2
   8c420:	008b7fc0 	call	8b7fc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8c424:	dfc00117 	ldw	ra,4(sp)
   8c428:	dec00204 	addi	sp,sp,8
   8c42c:	f800283a 	ret

0008c430 <alt_busy_sleep>:
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   8c430:	0005883a 	mov	r2,zero
   8c434:	f800283a 	ret

0008c438 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8c438:	defffd04 	addi	sp,sp,-12
   8c43c:	dc000015 	stw	r16,0(sp)
   8c440:	dfc00215 	stw	ra,8(sp)
   8c444:	dc400115 	stw	r17,4(sp)
   8c448:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8c44c:	20001a16 	blt	r4,zero,8c4b8 <close+0x80>
   8c450:	20c00324 	muli	r3,r4,12
   8c454:	008002f4 	movhi	r2,11
   8c458:	10a83504 	addi	r2,r2,-24364
   8c45c:	1887883a 	add	r3,r3,r2
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8c460:	18800017 	ldw	r2,0(r3)
   8c464:	10800417 	ldw	r2,16(r2)
   8c468:	10000c26 	beq	r2,zero,8c49c <close+0x64>
   8c46c:	1809883a 	mov	r4,r3
   8c470:	103ee83a 	callr	r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8c474:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8c478:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8c47c:	008c9040 	call	8c904 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   8c480:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
   8c484:	88001816 	blt	r17,zero,8c4e8 <close+0xb0>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   8c488:	dfc00217 	ldw	ra,8(sp)
   8c48c:	dc400117 	ldw	r17,4(sp)
   8c490:	dc000017 	ldw	r16,0(sp)
   8c494:	dec00304 	addi	sp,sp,12
   8c498:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8c49c:	008c9040 	call	8c904 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   8c4a0:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   8c4a4:	dfc00217 	ldw	ra,8(sp)
   8c4a8:	dc400117 	ldw	r17,4(sp)
   8c4ac:	dc000017 	ldw	r16,0(sp)
   8c4b0:	dec00304 	addi	sp,sp,12
   8c4b4:	f800283a 	ret
   8c4b8:	008002f4 	movhi	r2,11
   8c4bc:	10a8af04 	addi	r2,r2,-23876
   8c4c0:	10800017 	ldw	r2,0(r2)
   8c4c4:	10000226 	beq	r2,zero,8c4d0 <close+0x98>
   8c4c8:	103ee83a 	callr	r2
   8c4cc:	00000206 	br	8c4d8 <close+0xa0>
   8c4d0:	008002f4 	movhi	r2,11
   8c4d4:	10b56c04 	addi	r2,r2,-10832
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8c4d8:	00c01444 	movi	r3,81
   8c4dc:	10c00015 	stw	r3,0(r2)
    return -1;
   8c4e0:	00bfffc4 	movi	r2,-1
   8c4e4:	003fe806 	br	8c488 <__alt_data_end+0xfffd4218>
   8c4e8:	008002f4 	movhi	r2,11
   8c4ec:	10a8af04 	addi	r2,r2,-23876
   8c4f0:	10800017 	ldw	r2,0(r2)
   8c4f4:	10000526 	beq	r2,zero,8c50c <close+0xd4>
   8c4f8:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
   8c4fc:	0463c83a 	sub	r17,zero,r17
   8c500:	14400015 	stw	r17,0(r2)
      return -1;
   8c504:	00bfffc4 	movi	r2,-1
   8c508:	003fdf06 	br	8c488 <__alt_data_end+0xfffd4218>
   8c50c:	008002f4 	movhi	r2,11
   8c510:	10b56c04 	addi	r2,r2,-10832
   8c514:	003ff906 	br	8c4fc <__alt_data_end+0xfffd428c>

0008c518 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8c518:	0005883a 	mov	r2,zero
   8c51c:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   8c520:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8c524:	10800804 	addi	r2,r2,32
   8c528:	10fffd1e 	bne	r2,r3,8c520 <__alt_data_end+0xfffd42b0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8c52c:	f800283a 	ret

0008c530 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   8c530:	3005883a 	mov	r2,r6
   8c534:	f800283a 	ret

0008c538 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8c538:	20000a26 	beq	r4,zero,8c564 <alt_dev_llist_insert+0x2c>
   8c53c:	20800217 	ldw	r2,8(r4)
   8c540:	10000826 	beq	r2,zero,8c564 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   8c544:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8c548:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   8c54c:	0005883a 	mov	r2,zero
  entry->next     = list->next;
   8c550:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
   8c554:	28c00017 	ldw	r3,0(r5)
   8c558:	19000115 	stw	r4,4(r3)
  list->next           = entry;
   8c55c:	29000015 	stw	r4,0(r5)
   8c560:	f800283a 	ret
   8c564:	008002f4 	movhi	r2,11
   8c568:	10a8af04 	addi	r2,r2,-23876
   8c56c:	10800017 	ldw	r2,0(r2)
   8c570:	10000926 	beq	r2,zero,8c598 <alt_dev_llist_insert+0x60>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8c574:	deffff04 	addi	sp,sp,-4
   8c578:	dfc00015 	stw	ra,0(sp)
   8c57c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   8c580:	00c00584 	movi	r3,22
   8c584:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   8c588:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   8c58c:	dfc00017 	ldw	ra,0(sp)
   8c590:	dec00104 	addi	sp,sp,4
   8c594:	f800283a 	ret
   8c598:	008002f4 	movhi	r2,11
   8c59c:	10b56c04 	addi	r2,r2,-10832
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   8c5a0:	00c00584 	movi	r3,22
   8c5a4:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   8c5a8:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   8c5ac:	f800283a 	ret

0008c5b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8c5b0:	defffc04 	addi	sp,sp,-16
   8c5b4:	dc800215 	stw	r18,8(sp)
   8c5b8:	dc000015 	stw	r16,0(sp)
   8c5bc:	dfc00315 	stw	ra,12(sp)
   8c5c0:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8c5c4:	04000274 	movhi	r16,9
   8c5c8:	84339f04 	addi	r16,r16,-12676
   8c5cc:	04800274 	movhi	r18,9
   8c5d0:	94b3a004 	addi	r18,r18,-12672
   8c5d4:	84800936 	bltu	r16,r18,8c5fc <_do_ctors+0x4c>
   8c5d8:	84a5c83a 	sub	r18,r16,r18
   8c5dc:	9024d0ba 	srli	r18,r18,2
   8c5e0:	0023883a 	mov	r17,zero
   8c5e4:	94800044 	addi	r18,r18,1
        (*ctor) (); 
   8c5e8:	80800017 	ldw	r2,0(r16)
   8c5ec:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8c5f0:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
   8c5f4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8c5f8:	8cbffb1e 	bne	r17,r18,8c5e8 <__alt_data_end+0xfffd4378>
        (*ctor) (); 
}
   8c5fc:	dfc00317 	ldw	ra,12(sp)
   8c600:	dc800217 	ldw	r18,8(sp)
   8c604:	dc400117 	ldw	r17,4(sp)
   8c608:	dc000017 	ldw	r16,0(sp)
   8c60c:	dec00404 	addi	sp,sp,16
   8c610:	f800283a 	ret

0008c614 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8c614:	defffc04 	addi	sp,sp,-16
   8c618:	dc800215 	stw	r18,8(sp)
   8c61c:	dc000015 	stw	r16,0(sp)
   8c620:	dfc00315 	stw	ra,12(sp)
   8c624:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8c628:	04000274 	movhi	r16,9
   8c62c:	84339f04 	addi	r16,r16,-12676
   8c630:	04800274 	movhi	r18,9
   8c634:	94b3a004 	addi	r18,r18,-12672
   8c638:	84800936 	bltu	r16,r18,8c660 <_do_dtors+0x4c>
   8c63c:	84a5c83a 	sub	r18,r16,r18
   8c640:	9024d0ba 	srli	r18,r18,2
   8c644:	0023883a 	mov	r17,zero
   8c648:	94800044 	addi	r18,r18,1
        (*dtor) (); 
   8c64c:	80800017 	ldw	r2,0(r16)
   8c650:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8c654:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
   8c658:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8c65c:	8cbffb1e 	bne	r17,r18,8c64c <__alt_data_end+0xfffd43dc>
        (*dtor) (); 
}
   8c660:	dfc00317 	ldw	ra,12(sp)
   8c664:	dc800217 	ldw	r18,8(sp)
   8c668:	dc400117 	ldw	r17,4(sp)
   8c66c:	dc000017 	ldw	r16,0(sp)
   8c670:	dec00404 	addi	sp,sp,16
   8c674:	f800283a 	ret

0008c678 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   8c678:	0009883a 	mov	r4,zero
   8c67c:	01440004 	movi	r5,4096
   8c680:	008cadc1 	jmpi	8cadc <alt_icache_flush>

0008c684 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8c684:	defffd04 	addi	sp,sp,-12
   8c688:	dc400115 	stw	r17,4(sp)
   8c68c:	dc000015 	stw	r16,0(sp)
   8c690:	2823883a 	mov	r17,r5
   8c694:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
   8c698:	01400044 	movi	r5,1
   8c69c:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8c6a0:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
   8c6a4:	008c7880 	call	8c788 <open>

  if (old >= 0)
   8c6a8:	10000c16 	blt	r2,zero,8c6dc <alt_io_redirect+0x58>
  {
    fd->dev      = alt_fd_list[old].dev;
   8c6ac:	11400324 	muli	r5,r2,12
   8c6b0:	00c002f4 	movhi	r3,11
   8c6b4:	18e83504 	addi	r3,r3,-24364
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   8c6b8:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   8c6bc:	1945883a 	add	r2,r3,r5
   8c6c0:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8c6c4:	11400117 	ldw	r5,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8c6c8:	10800217 	ldw	r2,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   8c6cc:	19800315 	stw	r6,12(r3)
    fd->priv     = alt_fd_list[old].priv;
   8c6d0:	19400415 	stw	r5,16(r3)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8c6d4:	18800515 	stw	r2,20(r3)

    alt_release_fd (old);
   8c6d8:	008c9040 	call	8c904 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
   8c6dc:	8809883a 	mov	r4,r17
   8c6e0:	000b883a 	mov	r5,zero
   8c6e4:	01807fc4 	movi	r6,511
   8c6e8:	008c7880 	call	8c788 <open>

  if (old >= 0)
   8c6ec:	10000c16 	blt	r2,zero,8c720 <alt_io_redirect+0x9c>
  {
    fd->dev      = alt_fd_list[old].dev;
   8c6f0:	11400324 	muli	r5,r2,12
   8c6f4:	00c002f4 	movhi	r3,11
   8c6f8:	18e83504 	addi	r3,r3,-24364
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   8c6fc:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   8c700:	1945883a 	add	r2,r3,r5
   8c704:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8c708:	11400117 	ldw	r5,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8c70c:	10800217 	ldw	r2,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   8c710:	19800015 	stw	r6,0(r3)
    fd->priv     = alt_fd_list[old].priv;
   8c714:	19400115 	stw	r5,4(r3)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8c718:	18800215 	stw	r2,8(r3)

    alt_release_fd (old);
   8c71c:	008c9040 	call	8c904 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
   8c720:	8009883a 	mov	r4,r16
   8c724:	01400044 	movi	r5,1
   8c728:	01807fc4 	movi	r6,511
   8c72c:	008c7880 	call	8c788 <open>

  if (old >= 0)
   8c730:	10001016 	blt	r2,zero,8c774 <alt_io_redirect+0xf0>
  {
    fd->dev      = alt_fd_list[old].dev;
   8c734:	11400324 	muli	r5,r2,12
   8c738:	00c002f4 	movhi	r3,11
   8c73c:	18e83504 	addi	r3,r3,-24364
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   8c740:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   8c744:	1945883a 	add	r2,r3,r5
   8c748:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8c74c:	11400117 	ldw	r5,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8c750:	10800217 	ldw	r2,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   8c754:	19800615 	stw	r6,24(r3)
    fd->priv     = alt_fd_list[old].priv;
   8c758:	19400715 	stw	r5,28(r3)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8c75c:	18800815 	stw	r2,32(r3)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
   8c760:	dfc00217 	ldw	ra,8(sp)
   8c764:	dc400117 	ldw	r17,4(sp)
   8c768:	dc000017 	ldw	r16,0(sp)
   8c76c:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   8c770:	008c9041 	jmpi	8c904 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
   8c774:	dfc00217 	ldw	ra,8(sp)
   8c778:	dc400117 	ldw	r17,4(sp)
   8c77c:	dc000017 	ldw	r16,0(sp)
   8c780:	dec00304 	addi	sp,sp,12
   8c784:	f800283a 	ret

0008c788 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8c788:	defff904 	addi	sp,sp,-28
   8c78c:	dc400115 	stw	r17,4(sp)
   8c790:	2823883a 	mov	r17,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8c794:	014002f4 	movhi	r5,11
   8c798:	2968ab04 	addi	r5,r5,-23892
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8c79c:	dd400515 	stw	r21,20(sp)
   8c7a0:	dcc00315 	stw	r19,12(sp)
   8c7a4:	dc800215 	stw	r18,8(sp)
   8c7a8:	dc000015 	stw	r16,0(sp)
   8c7ac:	dfc00615 	stw	ra,24(sp)
   8c7b0:	dd000415 	stw	r20,16(sp)
   8c7b4:	2025883a 	mov	r18,r4
   8c7b8:	3027883a 	mov	r19,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8c7bc:	008c9300 	call	8c930 <alt_find_dev>
   8c7c0:	1021883a 	mov	r16,r2
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  int status = -ENODEV;
  int isafs = 0;
   8c7c4:	002b883a 	mov	r21,zero
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8c7c8:	10004026 	beq	r2,zero,8c8cc <open+0x144>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   8c7cc:	8009883a 	mov	r4,r16
   8c7d0:	008ca8c0 	call	8ca8c <alt_get_fd>
   8c7d4:	1029883a 	mov	r20,r2
   8c7d8:	10002f16 	blt	r2,zero,8c898 <open+0x110>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   8c7dc:	11000324 	muli	r4,r2,12
   8c7e0:	00c002f4 	movhi	r3,11
   8c7e4:	18e83504 	addi	r3,r3,-24364
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8c7e8:	00900034 	movhi	r2,16384
   8c7ec:	10bfffc4 	addi	r2,r2,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   8c7f0:	20c9883a 	add	r4,r4,r3
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8c7f4:	8884703a 	and	r2,r17,r2
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8c7f8:	a8001326 	beq	r21,zero,8c848 <open+0xc0>
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8c7fc:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8c800:	80800317 	ldw	r2,12(r16)
   8c804:	10002f26 	beq	r2,zero,8c8c4 <open+0x13c>
   8c808:	900b883a 	mov	r5,r18
   8c80c:	880d883a 	mov	r6,r17
   8c810:	980f883a 	mov	r7,r19
   8c814:	103ee83a 	callr	r2
   8c818:	1007883a 	mov	r3,r2
   8c81c:	a005883a 	mov	r2,r20
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8c820:	18003416 	blt	r3,zero,8c8f4 <open+0x16c>
  }
  
  /* return the reference upon success */

  return index;
}
   8c824:	dfc00617 	ldw	ra,24(sp)
   8c828:	dd400517 	ldw	r21,20(sp)
   8c82c:	dd000417 	ldw	r20,16(sp)
   8c830:	dcc00317 	ldw	r19,12(sp)
   8c834:	dc800217 	ldw	r18,8(sp)
   8c838:	dc400117 	ldw	r17,4(sp)
   8c83c:	dc000017 	ldw	r16,0(sp)
   8c840:	dec00704 	addi	sp,sp,28
   8c844:	f800283a 	ret
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8c848:	014002f4 	movhi	r5,11
   8c84c:	2968aa04 	addi	r5,r5,-23896

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8c850:	10900034 	orhi	r2,r2,16384
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8c854:	29400017 	ldw	r5,0(r5)
   8c858:	22c00017 	ldw	r11,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8c85c:	20800215 	stw	r2,8(r4)
   8c860:	1a400204 	addi	r9,r3,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8c864:	0011883a 	mov	r8,zero
   8c868:	00000306 	br	8c878 <open+0xf0>
   8c86c:	18c00304 	addi	r3,r3,12
   8c870:	4a400304 	addi	r9,r9,12
   8c874:	2a3fe236 	bltu	r5,r8,8c800 <__alt_data_end+0xfffd4590>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8c878:	1a800017 	ldw	r10,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8c87c:	42000044 	addi	r8,r8,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8c880:	5abffa1e 	bne	r11,r10,8c86c <__alt_data_end+0xfffd45fc>
   8c884:	48800017 	ldw	r2,0(r9)
   8c888:	103ff80e 	bge	r2,zero,8c86c <__alt_data_end+0xfffd45fc>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8c88c:	193ff726 	beq	r3,r4,8c86c <__alt_data_end+0xfffd45fc>
   8c890:	04000344 	movi	r16,13
   8c894:	00000106 	br	8c89c <open+0x114>
   8c898:	00a1c83a 	sub	r16,zero,r2

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
   8c89c:	a009883a 	mov	r4,r20
   8c8a0:	008c9040 	call	8c904 <alt_release_fd>
   8c8a4:	008002f4 	movhi	r2,11
   8c8a8:	10a8af04 	addi	r2,r2,-23876
   8c8ac:	10800017 	ldw	r2,0(r2)
   8c8b0:	10000d26 	beq	r2,zero,8c8e8 <open+0x160>
   8c8b4:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
   8c8b8:	14000015 	stw	r16,0(r2)
    return -1;
   8c8bc:	00bfffc4 	movi	r2,-1
   8c8c0:	003fd806 	br	8c824 <__alt_data_end+0xfffd45b4>
   8c8c4:	a005883a 	mov	r2,r20
   8c8c8:	003fd606 	br	8c824 <__alt_data_end+0xfffd45b4>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8c8cc:	9009883a 	mov	r4,r18
   8c8d0:	008c9c00 	call	8c9c0 <alt_find_file>
   8c8d4:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8c8d8:	1000081e 	bne	r2,zero,8c8fc <open+0x174>
   8c8dc:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8c8e0:	053fffc4 	movi	r20,-1
   8c8e4:	003fed06 	br	8c89c <__alt_data_end+0xfffd462c>
   8c8e8:	008002f4 	movhi	r2,11
   8c8ec:	10b56c04 	addi	r2,r2,-10832
   8c8f0:	003ff106 	br	8c8b8 <__alt_data_end+0xfffd4648>
   8c8f4:	00e1c83a 	sub	r16,zero,r3
   8c8f8:	003fe806 	br	8c89c <__alt_data_end+0xfffd462c>
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    isafs = 1;
   8c8fc:	05400044 	movi	r21,1
   8c900:	003fb206 	br	8c7cc <__alt_data_end+0xfffd455c>

0008c904 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
   8c904:	00800084 	movi	r2,2
   8c908:	1100060e 	bge	r2,r4,8c924 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
   8c90c:	21000324 	muli	r4,r4,12
   8c910:	008002f4 	movhi	r2,11
   8c914:	10a83504 	addi	r2,r2,-24364
   8c918:	1109883a 	add	r4,r2,r4
   8c91c:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
   8c920:	20000015 	stw	zero,0(r4)
   8c924:	f800283a 	ret

0008c928 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   8c928:	000170fa 	wrctl	ienable,zero
   8c92c:	f800283a 	ret

0008c930 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8c930:	defffb04 	addi	sp,sp,-20
   8c934:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
   8c938:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8c93c:	dcc00315 	stw	r19,12(sp)
   8c940:	dc800215 	stw	r18,8(sp)
   8c944:	dc400115 	stw	r17,4(sp)
   8c948:	dfc00415 	stw	ra,16(sp)
   8c94c:	2823883a 	mov	r17,r5
   8c950:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
   8c954:	008a4fc0 	call	8a4fc <strlen>
   8c958:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8c95c:	8c00031e 	bne	r17,r16,8c96c <alt_find_dev+0x3c>
   8c960:	00000f06 	br	8c9a0 <alt_find_dev+0x70>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   8c964:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8c968:	8c000d26 	beq	r17,r16,8c9a0 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8c96c:	81000217 	ldw	r4,8(r16)
   8c970:	980b883a 	mov	r5,r19
   8c974:	900d883a 	mov	r6,r18
   8c978:	008cb600 	call	8cb60 <memcmp>
   8c97c:	103ff91e 	bne	r2,zero,8c964 <__alt_data_end+0xfffd46f4>
   8c980:	8005883a 	mov	r2,r16
  }
  
  /* No match found */
  
  return NULL;
}
   8c984:	dfc00417 	ldw	ra,16(sp)
   8c988:	dcc00317 	ldw	r19,12(sp)
   8c98c:	dc800217 	ldw	r18,8(sp)
   8c990:	dc400117 	ldw	r17,4(sp)
   8c994:	dc000017 	ldw	r16,0(sp)
   8c998:	dec00504 	addi	sp,sp,20
   8c99c:	f800283a 	ret
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8c9a0:	0005883a 	mov	r2,zero
}
   8c9a4:	dfc00417 	ldw	ra,16(sp)
   8c9a8:	dcc00317 	ldw	r19,12(sp)
   8c9ac:	dc800217 	ldw	r18,8(sp)
   8c9b0:	dc400117 	ldw	r17,4(sp)
   8c9b4:	dc000017 	ldw	r16,0(sp)
   8c9b8:	dec00504 	addi	sp,sp,20
   8c9bc:	f800283a 	ret

0008c9c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8c9c0:	defffa04 	addi	sp,sp,-24
   8c9c4:	dd000415 	stw	r20,16(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8c9c8:	050002f4 	movhi	r20,11
   8c9cc:	a528ad04 	addi	r20,r20,-23884
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8c9d0:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8c9d4:	a4000017 	ldw	r16,0(r20)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8c9d8:	dfc00515 	stw	ra,20(sp)
   8c9dc:	dcc00315 	stw	r19,12(sp)
   8c9e0:	dc800215 	stw	r18,8(sp)
   8c9e4:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8c9e8:	85001626 	beq	r16,r20,8ca44 <alt_find_file+0x84>
   8c9ec:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
   8c9f0:	04c00bc4 	movi	r19,47
   8c9f4:	00000806 	br	8ca18 <alt_find_file+0x58>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8c9f8:	9185883a 	add	r2,r18,r6
   8c9fc:	10800007 	ldb	r2,0(r2)
   8ca00:	14c00126 	beq	r2,r19,8ca08 <alt_find_file+0x48>
   8ca04:	1000021e 	bne	r2,zero,8ca10 <alt_find_file+0x50>
        !memcmp (next->name, name, len))
   8ca08:	008cb600 	call	8cb60 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8ca0c:	10001626 	beq	r2,zero,8ca68 <alt_find_file+0xa8>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   8ca10:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8ca14:	85000b26 	beq	r16,r20,8ca44 <alt_find_file+0x84>
  {
    len = strlen(next->name);
   8ca18:	84400217 	ldw	r17,8(r16)
   8ca1c:	8809883a 	mov	r4,r17
   8ca20:	008a4fc0 	call	8a4fc <strlen>
   8ca24:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
   8ca28:	8885883a 	add	r2,r17,r2
   8ca2c:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
   8ca30:	8809883a 	mov	r4,r17
   8ca34:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
   8ca38:	14ffef1e 	bne	r2,r19,8c9f8 <__alt_data_end+0xfffd4788>
    {
      len -= 1;
   8ca3c:	31bfffc4 	addi	r6,r6,-1
   8ca40:	003fed06 	br	8c9f8 <__alt_data_end+0xfffd4788>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8ca44:	0005883a 	mov	r2,zero
}
   8ca48:	dfc00517 	ldw	ra,20(sp)
   8ca4c:	dd000417 	ldw	r20,16(sp)
   8ca50:	dcc00317 	ldw	r19,12(sp)
   8ca54:	dc800217 	ldw	r18,8(sp)
   8ca58:	dc400117 	ldw	r17,4(sp)
   8ca5c:	dc000017 	ldw	r16,0(sp)
   8ca60:	dec00604 	addi	sp,sp,24
   8ca64:	f800283a 	ret
   8ca68:	8005883a 	mov	r2,r16
   8ca6c:	dfc00517 	ldw	ra,20(sp)
   8ca70:	dd000417 	ldw	r20,16(sp)
   8ca74:	dcc00317 	ldw	r19,12(sp)
   8ca78:	dc800217 	ldw	r18,8(sp)
   8ca7c:	dc400117 	ldw	r17,4(sp)
   8ca80:	dc000017 	ldw	r16,0(sp)
   8ca84:	dec00604 	addi	sp,sp,24
   8ca88:	f800283a 	ret

0008ca8c <alt_get_fd>:
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8ca8c:	0005883a 	mov	r2,zero
   8ca90:	018002f4 	movhi	r6,11
   8ca94:	31a83504 	addi	r6,r6,-24364
   8ca98:	01c00804 	movi	r7,32
   8ca9c:	00000206 	br	8caa8 <alt_get_fd+0x1c>
   8caa0:	10800044 	addi	r2,r2,1
   8caa4:	11c00b26 	beq	r2,r7,8cad4 <alt_get_fd+0x48>
   8caa8:	10c00324 	muli	r3,r2,12
   8caac:	30c7883a 	add	r3,r6,r3
  {
    if (!alt_fd_list[i].dev)
   8cab0:	19400017 	ldw	r5,0(r3)
   8cab4:	283ffa1e 	bne	r5,zero,8caa0 <__alt_data_end+0xfffd4830>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
   8cab8:	014002f4 	movhi	r5,11
   8cabc:	2968aa04 	addi	r5,r5,-23896
   8cac0:	29800017 	ldw	r6,0(r5)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
   8cac4:	19000015 	stw	r4,0(r3)
      if (i > alt_max_fd)
   8cac8:	3080030e 	bge	r6,r2,8cad8 <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
   8cacc:	28800015 	stw	r2,0(r5)
   8cad0:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
   8cad4:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   8cad8:	f800283a 	ret

0008cadc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   8cadc:	00840004 	movi	r2,4096
   8cae0:	1140012e 	bgeu	r2,r5,8cae8 <alt_icache_flush+0xc>
   8cae4:	100b883a 	mov	r5,r2
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   8cae8:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   8caec:	2005883a 	mov	r2,r4
   8caf0:	2140092e 	bgeu	r4,r5,8cb18 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   8caf4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   8caf8:	10800804 	addi	r2,r2,32
   8cafc:	117ffd36 	bltu	r2,r5,8caf4 <__alt_data_end+0xfffd4884>
   8cb00:	0104303a 	nor	r2,zero,r4
   8cb04:	2885883a 	add	r2,r5,r2
   8cb08:	1004d17a 	srli	r2,r2,5
   8cb0c:	10800044 	addi	r2,r2,1
   8cb10:	1004917a 	slli	r2,r2,5
   8cb14:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   8cb18:	210007cc 	andi	r4,r4,31
   8cb1c:	20000126 	beq	r4,zero,8cb24 <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   8cb20:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   8cb24:	0000203a 	flushp
   8cb28:	f800283a 	ret

0008cb2c <atexit>:
   8cb2c:	200b883a 	mov	r5,r4
   8cb30:	000d883a 	mov	r6,zero
   8cb34:	0009883a 	mov	r4,zero
   8cb38:	000f883a 	mov	r7,zero
   8cb3c:	008cb901 	jmpi	8cb90 <__register_exitproc>

0008cb40 <exit>:
   8cb40:	defffe04 	addi	sp,sp,-8
   8cb44:	000b883a 	mov	r5,zero
   8cb48:	dc000015 	stw	r16,0(sp)
   8cb4c:	dfc00115 	stw	ra,4(sp)
   8cb50:	2021883a 	mov	r16,r4
   8cb54:	008ccd40 	call	8ccd4 <__call_exitprocs>
   8cb58:	8009883a 	mov	r4,r16
   8cb5c:	008ce6c0 	call	8ce6c <_exit>

0008cb60 <memcmp>:
   8cb60:	218d883a 	add	r6,r4,r6
   8cb64:	21800826 	beq	r4,r6,8cb88 <memcmp+0x28>
   8cb68:	20c00003 	ldbu	r3,0(r4)
   8cb6c:	28800003 	ldbu	r2,0(r5)
   8cb70:	18800226 	beq	r3,r2,8cb7c <memcmp+0x1c>
   8cb74:	1885c83a 	sub	r2,r3,r2
   8cb78:	f800283a 	ret
   8cb7c:	21000044 	addi	r4,r4,1
   8cb80:	29400044 	addi	r5,r5,1
   8cb84:	003ff706 	br	8cb64 <__alt_data_end+0xfffd48f4>
   8cb88:	0005883a 	mov	r2,zero
   8cb8c:	f800283a 	ret

0008cb90 <__register_exitproc>:
   8cb90:	defff904 	addi	sp,sp,-28
   8cb94:	008002f4 	movhi	r2,11
   8cb98:	10a8a204 	addi	r2,r2,-23928
   8cb9c:	dc400115 	stw	r17,4(sp)
   8cba0:	14400017 	ldw	r17,0(r2)
   8cba4:	dc000015 	stw	r16,0(sp)
   8cba8:	dd400515 	stw	r21,20(sp)
   8cbac:	8c000c17 	ldw	r16,48(r17)
   8cbb0:	dd000415 	stw	r20,16(sp)
   8cbb4:	dcc00315 	stw	r19,12(sp)
   8cbb8:	dc800215 	stw	r18,8(sp)
   8cbbc:	dfc00615 	stw	ra,24(sp)
   8cbc0:	2025883a 	mov	r18,r4
   8cbc4:	2827883a 	mov	r19,r5
   8cbc8:	302b883a 	mov	r21,r6
   8cbcc:	3829883a 	mov	r20,r7
   8cbd0:	8000021e 	bne	r16,zero,8cbdc <__register_exitproc+0x4c>
   8cbd4:	8c000d04 	addi	r16,r17,52
   8cbd8:	8c000c15 	stw	r16,48(r17)
   8cbdc:	80800117 	ldw	r2,4(r16)
   8cbe0:	00c007c4 	movi	r3,31
   8cbe4:	18800d0e 	bge	r3,r2,8cc1c <__register_exitproc+0x8c>
   8cbe8:	00800274 	movhi	r2,9
   8cbec:	10a6e904 	addi	r2,r2,-25692
   8cbf0:	1000021e 	bne	r2,zero,8cbfc <__register_exitproc+0x6c>
   8cbf4:	00bfffc4 	movi	r2,-1
   8cbf8:	00002d06 	br	8ccb0 <__register_exitproc+0x120>
   8cbfc:	01002304 	movi	r4,140
   8cc00:	0089ba40 	call	89ba4 <malloc>
   8cc04:	1021883a 	mov	r16,r2
   8cc08:	103ffa26 	beq	r2,zero,8cbf4 <__alt_data_end+0xfffd4984>
   8cc0c:	10000115 	stw	zero,4(r2)
   8cc10:	88800c17 	ldw	r2,48(r17)
   8cc14:	80800015 	stw	r2,0(r16)
   8cc18:	8c000c15 	stw	r16,48(r17)
   8cc1c:	90001b26 	beq	r18,zero,8cc8c <__register_exitproc+0xfc>
   8cc20:	80802217 	ldw	r2,136(r16)
   8cc24:	1000091e 	bne	r2,zero,8cc4c <__register_exitproc+0xbc>
   8cc28:	00800274 	movhi	r2,9
   8cc2c:	10a6e904 	addi	r2,r2,-25692
   8cc30:	103ff026 	beq	r2,zero,8cbf4 <__alt_data_end+0xfffd4984>
   8cc34:	01004204 	movi	r4,264
   8cc38:	103ee83a 	callr	r2
   8cc3c:	103fed26 	beq	r2,zero,8cbf4 <__alt_data_end+0xfffd4984>
   8cc40:	10004015 	stw	zero,256(r2)
   8cc44:	10004115 	stw	zero,260(r2)
   8cc48:	80802215 	stw	r2,136(r16)
   8cc4c:	80c00117 	ldw	r3,4(r16)
   8cc50:	01400044 	movi	r5,1
   8cc54:	18c9883a 	add	r4,r3,r3
   8cc58:	2109883a 	add	r4,r4,r4
   8cc5c:	1109883a 	add	r4,r2,r4
   8cc60:	25400015 	stw	r21,0(r4)
   8cc64:	28c6983a 	sll	r3,r5,r3
   8cc68:	11404017 	ldw	r5,256(r2)
   8cc6c:	28cab03a 	or	r5,r5,r3
   8cc70:	11404015 	stw	r5,256(r2)
   8cc74:	25002015 	stw	r20,128(r4)
   8cc78:	01000084 	movi	r4,2
   8cc7c:	9100031e 	bne	r18,r4,8cc8c <__register_exitproc+0xfc>
   8cc80:	11004117 	ldw	r4,260(r2)
   8cc84:	20c6b03a 	or	r3,r4,r3
   8cc88:	10c04115 	stw	r3,260(r2)
   8cc8c:	80800117 	ldw	r2,4(r16)
   8cc90:	10c00044 	addi	r3,r2,1
   8cc94:	10800084 	addi	r2,r2,2
   8cc98:	1085883a 	add	r2,r2,r2
   8cc9c:	1085883a 	add	r2,r2,r2
   8cca0:	80c00115 	stw	r3,4(r16)
   8cca4:	80a1883a 	add	r16,r16,r2
   8cca8:	84c00015 	stw	r19,0(r16)
   8ccac:	0005883a 	mov	r2,zero
   8ccb0:	dfc00617 	ldw	ra,24(sp)
   8ccb4:	dd400517 	ldw	r21,20(sp)
   8ccb8:	dd000417 	ldw	r20,16(sp)
   8ccbc:	dcc00317 	ldw	r19,12(sp)
   8ccc0:	dc800217 	ldw	r18,8(sp)
   8ccc4:	dc400117 	ldw	r17,4(sp)
   8ccc8:	dc000017 	ldw	r16,0(sp)
   8cccc:	dec00704 	addi	sp,sp,28
   8ccd0:	f800283a 	ret

0008ccd4 <__call_exitprocs>:
   8ccd4:	008002f4 	movhi	r2,11
   8ccd8:	10a8a204 	addi	r2,r2,-23928
   8ccdc:	10800017 	ldw	r2,0(r2)
   8cce0:	defff304 	addi	sp,sp,-52
   8cce4:	ddc00a15 	stw	r23,40(sp)
   8cce8:	d8800015 	stw	r2,0(sp)
   8ccec:	10800c04 	addi	r2,r2,48
   8ccf0:	dc800515 	stw	r18,20(sp)
   8ccf4:	dfc00c15 	stw	ra,48(sp)
   8ccf8:	df000b15 	stw	fp,44(sp)
   8ccfc:	dd800915 	stw	r22,36(sp)
   8cd00:	dd400815 	stw	r21,32(sp)
   8cd04:	dd000715 	stw	r20,28(sp)
   8cd08:	dcc00615 	stw	r19,24(sp)
   8cd0c:	dc400415 	stw	r17,16(sp)
   8cd10:	dc000315 	stw	r16,12(sp)
   8cd14:	d9000115 	stw	r4,4(sp)
   8cd18:	2825883a 	mov	r18,r5
   8cd1c:	d8800215 	stw	r2,8(sp)
   8cd20:	05c00274 	movhi	r23,9
   8cd24:	bde6ee04 	addi	r23,r23,-25672
   8cd28:	d8800017 	ldw	r2,0(sp)
   8cd2c:	dc000217 	ldw	r16,8(sp)
   8cd30:	14c00c17 	ldw	r19,48(r2)
   8cd34:	98004126 	beq	r19,zero,8ce3c <__call_exitprocs+0x168>
   8cd38:	9c400117 	ldw	r17,4(r19)
   8cd3c:	9d002217 	ldw	r20,136(r19)
   8cd40:	8d7fffc4 	addi	r21,r17,-1
   8cd44:	8c400044 	addi	r17,r17,1
   8cd48:	ad4f883a 	add	r7,r21,r21
   8cd4c:	8c63883a 	add	r17,r17,r17
   8cd50:	39cf883a 	add	r7,r7,r7
   8cd54:	8c63883a 	add	r17,r17,r17
   8cd58:	a1ed883a 	add	r22,r20,r7
   8cd5c:	9c63883a 	add	r17,r19,r17
   8cd60:	a8002616 	blt	r21,zero,8cdfc <__call_exitprocs+0x128>
   8cd64:	90000326 	beq	r18,zero,8cd74 <__call_exitprocs+0xa0>
   8cd68:	a0002026 	beq	r20,zero,8cdec <__call_exitprocs+0x118>
   8cd6c:	b1002017 	ldw	r4,128(r22)
   8cd70:	24801e1e 	bne	r4,r18,8cdec <__call_exitprocs+0x118>
   8cd74:	99000117 	ldw	r4,4(r19)
   8cd78:	8a000017 	ldw	r8,0(r17)
   8cd7c:	213fffc4 	addi	r4,r4,-1
   8cd80:	a900021e 	bne	r21,r4,8cd8c <__call_exitprocs+0xb8>
   8cd84:	9d400115 	stw	r21,4(r19)
   8cd88:	00000106 	br	8cd90 <__call_exitprocs+0xbc>
   8cd8c:	88000015 	stw	zero,0(r17)
   8cd90:	40001626 	beq	r8,zero,8cdec <__call_exitprocs+0x118>
   8cd94:	9f000117 	ldw	fp,4(r19)
   8cd98:	a0000526 	beq	r20,zero,8cdb0 <__call_exitprocs+0xdc>
   8cd9c:	00800044 	movi	r2,1
   8cda0:	1548983a 	sll	r4,r2,r21
   8cda4:	a1404017 	ldw	r5,256(r20)
   8cda8:	214a703a 	and	r5,r4,r5
   8cdac:	2800021e 	bne	r5,zero,8cdb8 <__call_exitprocs+0xe4>
   8cdb0:	403ee83a 	callr	r8
   8cdb4:	00000906 	br	8cddc <__call_exitprocs+0x108>
   8cdb8:	a1404117 	ldw	r5,260(r20)
   8cdbc:	2148703a 	and	r4,r4,r5
   8cdc0:	2000041e 	bne	r4,zero,8cdd4 <__call_exitprocs+0x100>
   8cdc4:	d9000117 	ldw	r4,4(sp)
   8cdc8:	b1400017 	ldw	r5,0(r22)
   8cdcc:	403ee83a 	callr	r8
   8cdd0:	00000206 	br	8cddc <__call_exitprocs+0x108>
   8cdd4:	b1000017 	ldw	r4,0(r22)
   8cdd8:	403ee83a 	callr	r8
   8cddc:	99000117 	ldw	r4,4(r19)
   8cde0:	e13fd11e 	bne	fp,r4,8cd28 <__alt_data_end+0xfffd4ab8>
   8cde4:	81000017 	ldw	r4,0(r16)
   8cde8:	24ffcf1e 	bne	r4,r19,8cd28 <__alt_data_end+0xfffd4ab8>
   8cdec:	ad7fffc4 	addi	r21,r21,-1
   8cdf0:	b5bfff04 	addi	r22,r22,-4
   8cdf4:	8c7fff04 	addi	r17,r17,-4
   8cdf8:	003fd906 	br	8cd60 <__alt_data_end+0xfffd4af0>
   8cdfc:	b8000f26 	beq	r23,zero,8ce3c <__call_exitprocs+0x168>
   8ce00:	99000117 	ldw	r4,4(r19)
   8ce04:	98c00017 	ldw	r3,0(r19)
   8ce08:	2000091e 	bne	r4,zero,8ce30 <__call_exitprocs+0x15c>
   8ce0c:	18000826 	beq	r3,zero,8ce30 <__call_exitprocs+0x15c>
   8ce10:	80c00015 	stw	r3,0(r16)
   8ce14:	a0000226 	beq	r20,zero,8ce20 <__call_exitprocs+0x14c>
   8ce18:	a009883a 	mov	r4,r20
   8ce1c:	0089bb80 	call	89bb8 <free>
   8ce20:	9809883a 	mov	r4,r19
   8ce24:	0089bb80 	call	89bb8 <free>
   8ce28:	84c00017 	ldw	r19,0(r16)
   8ce2c:	003fc106 	br	8cd34 <__alt_data_end+0xfffd4ac4>
   8ce30:	9821883a 	mov	r16,r19
   8ce34:	1827883a 	mov	r19,r3
   8ce38:	003fbe06 	br	8cd34 <__alt_data_end+0xfffd4ac4>
   8ce3c:	dfc00c17 	ldw	ra,48(sp)
   8ce40:	df000b17 	ldw	fp,44(sp)
   8ce44:	ddc00a17 	ldw	r23,40(sp)
   8ce48:	dd800917 	ldw	r22,36(sp)
   8ce4c:	dd400817 	ldw	r21,32(sp)
   8ce50:	dd000717 	ldw	r20,28(sp)
   8ce54:	dcc00617 	ldw	r19,24(sp)
   8ce58:	dc800517 	ldw	r18,20(sp)
   8ce5c:	dc400417 	ldw	r17,16(sp)
   8ce60:	dc000317 	ldw	r16,12(sp)
   8ce64:	dec00d04 	addi	sp,sp,52
   8ce68:	f800283a 	ret

0008ce6c <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8ce6c:	20000226 	beq	r4,zero,8ce78 <_exit+0xc>
    ALT_SIM_FAIL();
   8ce70:	002af070 	cmpltui	zero,zero,43969
   8ce74:	003fff06 	br	8ce74 <__alt_data_end+0xfffd4c04>
  } else {
    ALT_SIM_PASS();
   8ce78:	002af0b0 	cmpltui	zero,zero,43970
   8ce7c:	003ffd06 	br	8ce74 <__alt_data_end+0xfffd4c04>
