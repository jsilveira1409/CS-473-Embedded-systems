
LT24_Test_SDRAM.elf:     file format elf32-littlenios2
LT24_Test_SDRAM.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0002db44 memsz 0x0002db44 flags r-x
    LOAD off    0x0002eb64 vaddr 0x0402db64 paddr 0x04031174 align 2**12
         filesz 0x00003610 memsz 0x00003610 flags rw-
    LOAD off    0x00032784 vaddr 0x04034784 paddr 0x04034784 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001364c  040001b8  040001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0001a360  04013804  04013804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00003610  0402db64  04031174  0002eb64  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  04034784  04034784  00032784  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00032174  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001028  00000000  00000000  00032198  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002b2cd  00000000  00000000  000331c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000a9fe  00000000  00000000  0005e48d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000c9ab  00000000  00000000  00068e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002630  00000000  00000000  00075838  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004f35  00000000  00000000  00077e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00012390  00000000  00000000  0007cd9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000060  00000000  00000000  0008f130  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0008f190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000954fc  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000a  00000000  00000000  000954ff  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00095509  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0009550a  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0009550b  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  0009550f  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00095513  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00095517  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00095520  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00095529  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  00095532  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000005c  00000000  00000000  0009553b  2**0
                  CONTENTS, READONLY
 28 .jdi          00004d6c  00000000  00000000  00095597  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0006f679  00000000  00000000  0009a303  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001b8 l    d  .text	00000000 .text
04013804 l    d  .rodata	00000000 .rodata
0402db64 l    d  .rwdata	00000000 .rwdata
04034784 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../LT24_Test_SDRAM_bsp//obj/HAL/src/crt0.o
04000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
04000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tahomabold_20.c
04013804 l     O .rodata	000000b6 tahomabold_20_33
040138ba l     O .rodata	00000104 tahomabold_20_34
040139be l     O .rodata	000001a0 tahomabold_20_35
04013b5e l     O .rodata	00000152 tahomabold_20_36
04013cb0 l     O .rodata	00000270 tahomabold_20_37
04013f20 l     O .rodata	000001ba tahomabold_20_38
040140da l     O .rodata	0000009c tahomabold_20_39
04014176 l     O .rodata	000000ea tahomabold_20_40
04014260 l     O .rodata	000000ea tahomabold_20_41
0401434a l     O .rodata	00000152 tahomabold_20_42
0401449c l     O .rodata	000001a0 tahomabold_20_43
0401463c l     O .rodata	0000009c tahomabold_20_44
040146d8 l     O .rodata	000000ea tahomabold_20_45
040147c2 l     O .rodata	0000009c tahomabold_20_46
0401485e l     O .rodata	00000138 tahomabold_20_47
04014996 l     O .rodata	00000152 tahomabold_20_48
04014ae8 l     O .rodata	00000152 tahomabold_20_49
04014c3a l     O .rodata	00000152 tahomabold_20_50
04014d8c l     O .rodata	00000152 tahomabold_20_51
04014ede l     O .rodata	00000152 tahomabold_20_52
04015030 l     O .rodata	00000152 tahomabold_20_53
04015182 l     O .rodata	00000152 tahomabold_20_54
040152d4 l     O .rodata	00000152 tahomabold_20_55
04015426 l     O .rodata	00000152 tahomabold_20_56
04015578 l     O .rodata	00000152 tahomabold_20_57
040156ca l     O .rodata	000000b6 tahomabold_20_58
04015780 l     O .rodata	000000b6 tahomabold_20_59
04015836 l     O .rodata	000001a0 tahomabold_20_60
040159d6 l     O .rodata	000001a0 tahomabold_20_61
04015b76 l     O .rodata	000001a0 tahomabold_20_62
04015d16 l     O .rodata	0000011e tahomabold_20_63
04015e34 l     O .rodata	000001d4 tahomabold_20_64
04016008 l     O .rodata	0000016c tahomabold_20_65
04016174 l     O .rodata	0000016c tahomabold_20_66
040162e0 l     O .rodata	00000152 tahomabold_20_67
04016432 l     O .rodata	00000186 tahomabold_20_68
040165b8 l     O .rodata	00000138 tahomabold_20_69
040166f0 l     O .rodata	00000138 tahomabold_20_70
04016828 l     O .rodata	00000186 tahomabold_20_71
040169ae l     O .rodata	00000186 tahomabold_20_72
04016b34 l     O .rodata	00000104 tahomabold_20_73
04016c38 l     O .rodata	00000104 tahomabold_20_74
04016d3c l     O .rodata	0000016c tahomabold_20_75
04016ea8 l     O .rodata	0000011e tahomabold_20_76
04016fc6 l     O .rodata	000001d4 tahomabold_20_77
0401719a l     O .rodata	00000186 tahomabold_20_78
04017320 l     O .rodata	00000186 tahomabold_20_79
040174a6 l     O .rodata	00000152 tahomabold_20_80
040175f8 l     O .rodata	00000186 tahomabold_20_81
0401777e l     O .rodata	00000186 tahomabold_20_82
04017904 l     O .rodata	00000152 tahomabold_20_83
04017a56 l     O .rodata	00000138 tahomabold_20_84
04017b8e l     O .rodata	00000186 tahomabold_20_85
04017d14 l     O .rodata	0000016c tahomabold_20_86
04017e80 l     O .rodata	00000222 tahomabold_20_87
040180a2 l     O .rodata	0000016c tahomabold_20_88
0401820e l     O .rodata	0000016c tahomabold_20_89
0401837a l     O .rodata	00000138 tahomabold_20_90
040184b2 l     O .rodata	000000ea tahomabold_20_91
0401859c l     O .rodata	00000138 tahomabold_20_92
040186d4 l     O .rodata	000000ea tahomabold_20_93
040187be l     O .rodata	000001a0 tahomabold_20_94
0401895e l     O .rodata	00000152 tahomabold_20_95
04018ab0 l     O .rodata	0000011e tahomabold_20_96
04018bce l     O .rodata	00000138 tahomabold_20_97
04018d06 l     O .rodata	00000152 tahomabold_20_98
04018e58 l     O .rodata	0000011e tahomabold_20_99
04018f76 l     O .rodata	00000152 tahomabold_20_100
040190c8 l     O .rodata	00000138 tahomabold_20_101
04019200 l     O .rodata	000000d0 tahomabold_20_102
040192d0 l     O .rodata	00000152 tahomabold_20_103
04019422 l     O .rodata	00000152 tahomabold_20_104
04019574 l     O .rodata	0000009c tahomabold_20_105
04019610 l     O .rodata	000000ea tahomabold_20_106
040196fa l     O .rodata	00000138 tahomabold_20_107
04019832 l     O .rodata	0000009c tahomabold_20_108
040198ce l     O .rodata	000001ee tahomabold_20_109
04019abc l     O .rodata	00000152 tahomabold_20_110
04019c0e l     O .rodata	00000138 tahomabold_20_111
04019d46 l     O .rodata	00000152 tahomabold_20_112
04019e98 l     O .rodata	00000152 tahomabold_20_113
04019fea l     O .rodata	000000ea tahomabold_20_114
0401a0d4 l     O .rodata	00000104 tahomabold_20_115
0401a1d8 l     O .rodata	000000d0 tahomabold_20_116
0401a2a8 l     O .rodata	00000152 tahomabold_20_117
0401a3fa l     O .rodata	00000138 tahomabold_20_118
0401a532 l     O .rodata	000001d4 tahomabold_20_119
0401a706 l     O .rodata	00000138 tahomabold_20_120
0401a83e l     O .rodata	00000138 tahomabold_20_121
0401a976 l     O .rodata	0000011e tahomabold_20_122
0401aa94 l     O .rodata	00000138 tahomabold_20_123
0401abcc l     O .rodata	00000152 tahomabold_20_124
0401ad1e l     O .rodata	00000138 tahomabold_20_125
0401ae56 l     O .rodata	000001a0 tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.c
0401aff6 l     O .rodata	000001b8 tahomabold_32_33
0401b1ae l     O .rodata	00000280 tahomabold_32_34
0401b42e l     O .rodata	00000410 tahomabold_32_35
0401b83e l     O .rodata	00000320 tahomabold_32_36
0401bb5e l     O .rodata	000005f0 tahomabold_32_37
0401c14e l     O .rodata	00000410 tahomabold_32_38
0401c55e l     O .rodata	00000168 tahomabold_32_39
0401c6c6 l     O .rodata	00000258 tahomabold_32_40
0401c91e l     O .rodata	00000258 tahomabold_32_41
0401cb76 l     O .rodata	00000320 tahomabold_32_42
0401ce96 l     O .rodata	00000410 tahomabold_32_43
0401d2a6 l     O .rodata	00000190 tahomabold_32_44
0401d436 l     O .rodata	00000230 tahomabold_32_45
0401d666 l     O .rodata	00000190 tahomabold_32_46
0401d7f6 l     O .rodata	000002d0 tahomabold_32_47
0401dac6 l     O .rodata	00000320 tahomabold_32_48
0401dde6 l     O .rodata	00000320 tahomabold_32_49
0401e106 l     O .rodata	00000320 tahomabold_32_50
0401e426 l     O .rodata	00000320 tahomabold_32_51
0401e746 l     O .rodata	00000320 tahomabold_32_52
0401ea66 l     O .rodata	00000320 tahomabold_32_53
0401ed86 l     O .rodata	00000320 tahomabold_32_54
0401f0a6 l     O .rodata	00000320 tahomabold_32_55
0401f3c6 l     O .rodata	00000320 tahomabold_32_56
0401f6e6 l     O .rodata	00000320 tahomabold_32_57
0401fa06 l     O .rodata	000001e0 tahomabold_32_58
0401fbe6 l     O .rodata	000001e0 tahomabold_32_59
0401fdc6 l     O .rodata	00000410 tahomabold_32_60
040201d6 l     O .rodata	00000410 tahomabold_32_61
040205e6 l     O .rodata	00000410 tahomabold_32_62
040209f6 l     O .rodata	000002d0 tahomabold_32_63
04020cc6 l     O .rodata	00000488 tahomabold_32_64
0402114e l     O .rodata	00000370 tahomabold_32_65
040214be l     O .rodata	00000370 tahomabold_32_66
0402182e l     O .rodata	00000348 tahomabold_32_67
04021b76 l     O .rodata	000003c0 tahomabold_32_68
04021f36 l     O .rodata	00000320 tahomabold_32_69
04022256 l     O .rodata	000002f8 tahomabold_32_70
0402254e l     O .rodata	000003c0 tahomabold_32_71
0402290e l     O .rodata	000003c0 tahomabold_32_72
04022cce l     O .rodata	00000258 tahomabold_32_73
04022f26 l     O .rodata	00000280 tahomabold_32_74
040231a6 l     O .rodata	00000398 tahomabold_32_75
0402353e l     O .rodata	000002d0 tahomabold_32_76
0402380e l     O .rodata	00000488 tahomabold_32_77
04023c96 l     O .rodata	000003e8 tahomabold_32_78
0402407e l     O .rodata	000003e8 tahomabold_32_79
04024466 l     O .rodata	00000348 tahomabold_32_80
040247ae l     O .rodata	000003e8 tahomabold_32_81
04024b96 l     O .rodata	000003c0 tahomabold_32_82
04024f56 l     O .rodata	00000320 tahomabold_32_83
04025276 l     O .rodata	00000320 tahomabold_32_84
04025596 l     O .rodata	000003c0 tahomabold_32_85
04025956 l     O .rodata	00000370 tahomabold_32_86
04025cc6 l     O .rodata	00000528 tahomabold_32_87
040261ee l     O .rodata	00000370 tahomabold_32_88
0402655e l     O .rodata	00000370 tahomabold_32_89
040268ce l     O .rodata	00000320 tahomabold_32_90
04026bee l     O .rodata	00000258 tahomabold_32_91
04026e46 l     O .rodata	000002d0 tahomabold_32_92
04027116 l     O .rodata	00000258 tahomabold_32_93
0402736e l     O .rodata	00000410 tahomabold_32_94
0402777e l     O .rodata	00000320 tahomabold_32_95
04027a9e l     O .rodata	000002a8 tahomabold_32_96
04027d46 l     O .rodata	000002f8 tahomabold_32_97
0402803e l     O .rodata	00000320 tahomabold_32_98
0402835e l     O .rodata	000002a8 tahomabold_32_99
04028606 l     O .rodata	00000320 tahomabold_32_100
04028926 l     O .rodata	000002f8 tahomabold_32_101
04028c1e l     O .rodata	00000230 tahomabold_32_102
04028e4e l     O .rodata	00000320 tahomabold_32_103
0402916e l     O .rodata	00000320 tahomabold_32_104
0402948e l     O .rodata	00000190 tahomabold_32_105
0402961e l     O .rodata	00000208 tahomabold_32_106
04029826 l     O .rodata	000002f8 tahomabold_32_107
04029b1e l     O .rodata	00000190 tahomabold_32_108
04029cae l     O .rodata	000004d8 tahomabold_32_109
0402a186 l     O .rodata	00000320 tahomabold_32_110
0402a4a6 l     O .rodata	00000320 tahomabold_32_111
0402a7c6 l     O .rodata	00000320 tahomabold_32_112
0402aae6 l     O .rodata	00000320 tahomabold_32_113
0402ae06 l     O .rodata	00000230 tahomabold_32_114
0402b036 l     O .rodata	00000280 tahomabold_32_115
0402b2b6 l     O .rodata	00000208 tahomabold_32_116
0402b4be l     O .rodata	00000320 tahomabold_32_117
0402b7de l     O .rodata	000002f8 tahomabold_32_118
0402bad6 l     O .rodata	00000460 tahomabold_32_119
0402bf36 l     O .rodata	000002f8 tahomabold_32_120
0402c22e l     O .rodata	000002d0 tahomabold_32_121
0402c4fe l     O .rodata	000002a8 tahomabold_32_122
0402c7a6 l     O .rodata	00000320 tahomabold_32_123
0402cac6 l     O .rodata	00000320 tahomabold_32_124
0402cde6 l     O .rodata	00000320 tahomabold_32_125
0402d106 l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 geometry.c
00000000 l    df *ABS*	00000000 ILI9341.c
00000000 l    df *ABS*	00000000 simple_graphics.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 gui.c
04034784 l     O .bss	00000004 x.3825
04031130 l     O .rwdata	00000004 y.3826
00000000 l    df *ABS*	00000000 gui_vpg.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 touch_spi.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 fp-bit.c
04007768 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0400820c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0402f710 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
040095a0 l     F .text	00000034 __sprint_r
0402d9a2 l     O .rodata	00000010 blanks.3515
0402d9b2 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0400b650 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0400d08c l     F .text	00000008 __fp_lock
0400d094 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0402d9e4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0402db2c l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
04010dc8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04010ee0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04010f0c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
040112d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
040113c0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
040114ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04011684 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04031168 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04011aa0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04011bdc l     F .text	00000038 alt_dev_reg
040300cc l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04011ed0 l     F .text	00000204 altera_avalon_jtag_uart_irq
040120d4 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04012918 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04012bac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04012d84 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
04012ebc l     F .text	00000050 alt_get_errno
04012f0c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
04001c80 g     F .text	00000078 vid_draw_horiz_line
0400f08c g     F .text	00000074 _mprec_log10
040055cc g     F .text	00000124 I2C_Read
0400f17c g     F .text	00000084 __any_on
0400fd5c g     F .text	00000064 _isatty_r
0402da14 g     O .rodata	00000028 __mprec_tinytens
04000780 g     F .text	0000006c LCD_DrawPoint
040115cc g     F .text	00000078 alt_main
04009480 g     F .text	00000094 strcpy
04008884 g     F .text	00000044 __ashldi3
040092c0 g     F .text	00000084 _puts_r
040347e4 g     O .bss	00000100 alt_irq
0400fdc0 g     F .text	0000006c _lseek_r
04001de4 g     F .text	0000006c vid_color_convert16_24
04007328 g     F .text	00000148 sqrt
04006378 g     F .text	000000a0 I2CL_Read16
04031174 g       *ABS*	00000000 __flash_rwdata_start
040109ec g     F .text	0000005c __eqdf2
04006d34 g     F .text	00000164 touch_enable_penirq
04034a74 g       *ABS*	00000000 __alt_heap_start
04006734 g     F .text	00000064 QUEUE_IsFull
04000e58 g     F .text	00000138 LCD_Pattern_Horizon
04009284 g     F .text	0000003c printf
0400420c g     F .text	000001dc GUI_DeskInit
0400f910 g     F .text	0000005c __sseek
0400d11c g     F .text	0000010c __sinit
0400ddb4 g     F .text	0000009c _setlocale_r
0400d0a8 g     F .text	00000064 __sfmoreglue
04011664 g     F .text	00000020 __malloc_unlock
040018d4 g     F .text	00000150 vid_draw_box
040005b4 g     F .text	00000044 PtCopy
04003710 g     F .text	0000025c vid_print_string_alpha
0400e130 g     F .text	00000128 memmove
0400d10c g     F .text	00000010 _cleanup
0400e258 g     F .text	000000a8 _Balloc
0402f2e4 g     O .rwdata	00000415 cour10_font_array
04010aa4 g     F .text	00000064 __gtdf2
040016b0 g     F .text	0000011c vid_move_block
040088c8 g     F .text	00000010 __errno
040061fc g     F .text	0000017c I2CL_MultipleWrite
0400405c g     F .text	000000e0 vid_string_pixel_length_alpha
04005ad8 g     F .text	0000016c i2c_write
04000000 g     F .entry	0000001c __reset
04005350 g     F .text	00000040 my_wait
04000020 g       *ABS*	00000000 __flash_exceptions_start
04000700 g     F .text	00000080 LCD_Clear
0400fcf4 g     F .text	00000068 _fstat_r
04034794 g     O .bss	00000004 errno
040056f0 g     F .text	00000178 I2C_Read16
040347ac g     O .bss	00000004 alt_argv
0403912c g       *ABS*	00000000 _gp
04011a70 g     F .text	00000030 usleep
04004b24 g     F .text	000000b0 VPG_ColorPanel
0400396c g     F .text	00000154 seperate_color_channels
0402ff4c g     O .rwdata	00000180 alt_fd_list
0401314c g     F .text	00000090 alt_find_dev
04009084 g     F .text	000000f8 memcpy
0400d09c g     F .text	0000000c _cleanup_r
04008064 g     F .text	000000d4 __floatsidf
040025e8 g     F .text	00000758 vid_round_corner_points
04006a5c g     F .text	0000006c Touch_UnInit
04012e44 g     F .text	00000078 alt_io_redirect
04008008 g     F .text	0000005c __ltdf2
04013804 g       *ABS*	00000000 __DTOR_END__
040043e8 g     F .text	00000090 GUI_CheckButton
04009344 g     F .text	00000014 puts
04001070 g     F .text	00000060 vid_clean_screen
0400efe8 g     F .text	000000a4 __ratio
040066f4 g     F .text	00000040 QUEUE_IsEmpty
040011dc g     F .text	00000154 vid_scroll_string_init
040122d4 g     F .text	00000218 altera_avalon_jtag_uart_read
040088d8 g     F .text	00000014 malloc
04009258 g     F .text	0000002c _printf_r
040068ec g     F .text	00000170 Touch_Init
0400832c g     F .text	00000008 __udivsi3
04011320 g     F .text	000000a0 isatty
0402da64 g     O .rodata	000000c8 __mprec_tens
0400de50 g     F .text	0000000c __locale_charset
0400b49c g     F .text	00000040 vsnprintf
04004478 g     F .text	00000238 GUI_DeskDraw
040133a4 g     F .text	0000008c alt_icache_flush
04005868 g     F .text	0000017c I2C_MultipleRead
04034790 g     O .bss	00000004 __malloc_top_pad
040068bc g     F .text	00000030 QUEUE_Empty
04031148 g     O .rwdata	00000004 __mb_cur_max
0400de5c g     F .text	0000000c _localeconv_r
0400e658 g     F .text	0000003c __i2b
0400d770 g     F .text	000004e4 __sfvwrite_r
0400682c g     F .text	00000090 QUEUE_Pop
04009358 g     F .text	00000064 _sbrk_r
04006cc4 g     F .text	00000030 touch_empty_fifo
040004cc g     F .text	00000034 RectHeight
0400fe2c g     F .text	0000006c _read_r
0402ff18 g     O .rwdata	0000000c __lc_ctype
0403115c g     O .rwdata	00000004 alt_max_fd
0400866c g     F .text	00000104 __unpack_d
04004b00 g     F .text	00000024 VPG_XLine
0400fba4 g     F .text	0000013c _fclose_r
0400d05c g     F .text	00000030 fflush
0403478c g     O .bss	00000004 __malloc_max_sbrked_mem
04005ed4 g     F .text	00000168 I2CL_Read
0402e724 g     O .rwdata	00000bc0 tahomabold_32
04007abc g     F .text	00000054 __adddf3
0400473c g     F .text	00000080 GUI_ClearPaintArea
04000288 g     F .text	00000040 PtSet
0400ed5c g     F .text	00000148 __b2d
04010460 g     F .text	0000058c __umoddi3
040114fc g     F .text	000000d0 lseek
04031134 g     O .rwdata	00000004 __fdlib_version
04031138 g     O .rwdata	00000004 _global_impure_ptr
040020f4 g     F .text	0000013c vid_draw_circle
0400f200 g     F .text	000005fc _realloc_r
04034a74 g       *ABS*	00000000 __bss_end
040111e0 g     F .text	000000f0 alt_iic_isr_register
0401196c g     F .text	00000104 alt_tick
0400548c g     F .text	00000140 I2C_Write16
040003ac g     F .text	00000088 RectOffset
0400fe98 g     F .text	000005c8 __udivdi3
0402da3c g     O .rodata	00000028 __mprec_bigtens
0400e43c g     F .text	00000104 __s2b
04001e90 g     F .text	00000264 vid_draw_sloped_line
04010b6c g     F .text	0000011c __floatunsidf
0400eafc g     F .text	00000058 __mcmp
04004cd0 g     F .text	000000e4 VPG_VGrid
0400d334 g     F .text	00000018 __fp_lock_all
04011194 g     F .text	0000004c alt_ic_irq_enabled
04005390 g     F .text	000000fc I2C_Write
04002230 g     F .text	000003b8 vid_draw_round_corner_box
040118d4 g     F .text	00000098 alt_alarm_stop
040347a4 g     O .bss	00000004 alt_irq_active
04000f90 g     F .text	000000e0 LCD_Pattern_Vertical
040000ec g     F .exceptions	000000cc alt_irq_handler
0402ff24 g     O .rwdata	00000028 alt_dev_null
04006418 g     F .text	0000008c I2CL_Write16
040059e4 g     F .text	00000084 i2c_start
04012b68 g     F .text	00000044 alt_dcache_flush_all
0400e540 g     F .text	00000068 __hi0bits
040071d4 g     F .text	00000078 touch_alarm_callback
04008138 g     F .text	000000d4 __fixdfsi
04006cf4 g     F .text	00000040 touch_is_pen_pressed
04031174 g       *ABS*	00000000 __ram_rwdata_end
04003174 g     F .text	00000394 vid_draw_triangle
04031154 g     O .rwdata	00000008 alt_dev_list
04011af0 g     F .text	000000ec write
0402f6fc g     O .rwdata	00000014 szPallete
040035e4 g     F .text	0000012c CropImage16
0402db64 g       *ABS*	00000000 __ram_rodata_end
04010f5c g     F .text	000000ac fstat
04008840 g     F .text	00000044 __lshrdi3
04001330 g     F .text	00000380 vid_scroll_string
040064d4 g     F .text	0000006c myprintf
04006ec8 g     F .text	0000030c touch_get_xy
0400e874 g     F .text	0000012c __pow5mult
040347a0 g     O .bss	00000004 __nlocale_changed
04008334 g     F .text	00000008 __umodsi3
04006c4c g     F .text	00000078 touch_isr
04000498 g     F .text	00000034 RectWidth
04003508 g     F .text	000000dc CopyImage16
04034a74 g       *ABS*	00000000 end
040051b8 g     F .text	000000b0 GUI_VPG
040049e4 g     F .text	00000064 GUI_ShowInfo
04011e10 g     F .text	000000c0 altera_avalon_jtag_uart_init
04001a24 g     F .text	000000f0 vid_print_char
04013804 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0401298c g     F .text	00000088 alt_avalon_timer_sc_init
0400839c g     F .text	000000ac __clzsi2
040124ec g     F .text	00000224 altera_avalon_jtag_uart_write
04005038 g     F .text	00000180 GUI_ShowPAT
04002d94 g     F .text	00000054 min3
040010d0 g     F .text	000000cc vid_draw_line
0400d324 g     F .text	00000004 __sfp_lock_acquire
0400e038 g     F .text	000000f8 memchr
040095d4 g     F .text	00001df8 ___vfprintf_internal_r
040093bc g     F .text	00000058 _sprintf_r
0400d4a0 g     F .text	000002d0 _free_r
0400064c g     F .text	000000b4 LCD_SetCursor
04013628 g     F .text	000001a0 __call_exitprocs
0403479c g     O .bss	00000004 __mlocale_changed
04004bd4 g     F .text	000000fc VPG_Grid
04031140 g     O .rwdata	00000004 __malloc_sbrk_base
040001b8 g     F .text	0000004c _start
040347b4 g     O .bss	00000004 _alt_tick_rate
04006e98 g     F .text	00000030 touch_clear_input
0400e9a0 g     F .text	0000015c __lshift
04012710 g     F .text	00000208 alt_avalon_spi_command
04006798 g     F .text	00000094 QUEUE_Push
040347b8 g     O .bss	00000004 _alt_nticks
04002e4c g     F .text	000000f0 vid_put_pixel_in_span_map
040116d4 g     F .text	000000f0 read
04004e98 g     F .text	000001a0 VPG_ColorBar
04011c48 g     F .text	00000064 alt_sys_init
040134f8 g     F .text	00000130 __register_exitproc
0400e694 g     F .text	000001e0 __multiply
04001bec g     F .text	00000094 vid_paint_block
04012178 g     F .text	00000068 altera_avalon_jtag_uart_close
0402db64 g       *ABS*	00000000 __ram_rwdata_start
04013804 g       *ABS*	00000000 __ram_rodata_start
040347bc g     O .bss	00000028 __malloc_current_mallinfo
0400eea4 g     F .text	00000144 __d2b
04004db4 g     F .text	000000e4 VPG_HGrid
04001d44 g     F .text	000000a0 vid_color_convert24_16
04011cac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040132f0 g     F .text	000000b4 alt_get_fd
04012a14 g     F .text	00000154 alt_busy_sleep
04008770 g     F .text	000000d0 __fpcmp_parts_d
0400fb40 g     F .text	00000064 _close_r
040047bc g     F .text	00000228 GUI
04003c48 g     F .text	00000254 alpha_blending
0401347c g     F .text	0000007c memcmp
04011d6c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04034a74 g       *ABS*	00000000 __alt_stack_base
04011dbc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0400b4dc g     F .text	00000174 __swsetup_r
04007e54 g     F .text	000001b4 __divdf3
0400d228 g     F .text	000000fc __sfp
0400f100 g     F .text	0000007c __copybits
0402fb10 g     O .rwdata	00000408 __malloc_av_
0400d330 g     F .text	00000004 __sinit_lock_release
0400b3f0 g     F .text	000000ac _vsnprintf_r
04005a68 g     F .text	00000070 i2c_stop
04007b70 g     F .text	000002e4 __muldf3
0400f834 g     F .text	00000054 __sread
040131dc g     F .text	00000114 alt_find_file
04012bfc g     F .text	000000a0 alt_dev_llist_insert
04011644 g     F .text	00000020 __malloc_lock
04001e50 g     F .text	00000040 vid_copy_line_to_frame_buffer
04011824 g     F .text	000000b0 sbrk
0400ce74 g     F .text	000001e8 _fflush_r
0400fa84 g     F .text	000000bc _calloc_r
04006654 g     F .text	00000070 QUEUE_New
04034784 g       *ABS*	00000000 __bss_start
040007ec g     F .text	0000066c LCD_Init
0400917c g     F .text	000000dc memset
04005268 g     F .text	000000e8 main
040347b0 g     O .bss	00000004 alt_envp
04034788 g     O .bss	00000004 __malloc_max_total_mem
04006540 g     F .text	00000088 myprintf_hexarray
04011d0c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04004a48 g     F .text	00000058 GUI_ShowTouchPoint
04005c44 g     F .text	00000150 i2c_read
0402db64 g     O .rwdata	00000bc0 tahomabold_20
0400f96c g     F .text	00000008 __sclose
04007760 g     F .text	00000008 matherr
08000000 g       *ABS*	00000000 __alt_heap_limit
04003e9c g     F .text	000001c0 vid_print_char_alpha
0400fce0 g     F .text	00000014 fclose
0403112c g     O .rwdata	00000004 cour10_font
040348e4 g     O .bss	00000190 _atexit0
0400b858 g     F .text	0000161c _dtoa_r
04008900 g     F .text	00000784 _malloc_r
04031160 g     O .rwdata	00000004 alt_errno
0400dc54 g     F .text	000000a8 _fwalk
04000500 g     F .text	000000b4 PtDistance
040002c8 g     F .text	0000005c RectSet
04008280 g     F .text	00000050 __divsi3
040005f8 g     F .text	00000054 Delay_Ms
04000434 g     F .text	00000064 RectCopy
0402d844 g     O .rodata	00000014 __thenan_df
0400d364 g     F .text	0000013c _malloc_trim_r
04013804 g       *ABS*	00000000 __CTOR_END__
0400f974 g     F .text	000000a4 strcmp
04003c08 g     F .text	00000040 read_from_frame
04013804 g       *ABS*	00000000 __flash_rodata_start
04013804 g       *ABS*	00000000 __DTOR_LIST__
04001bb0 g     F .text	0000003c vid_get_pixel
04010a48 g     F .text	0000005c __nedf2
04011c14 g     F .text	00000034 alt_irq_init
040117c4 g     F .text	00000060 alt_release_fd
04009414 g     F .text	0000006c sprintf
0402d858 g     O .rodata	00000100 __clz_tab
040064a4 g     F .text	00000030 debug_output
04034798 g     O .bss	00000004 _PathLocale
04013430 g     F .text	00000014 atexit
0400fa18 g     F .text	0000006c _write_r
04000204 g     F .text	00000084 IsPtInRect
0400de68 g     F .text	0000001c setlocale
0403113c g     O .rwdata	00000004 _impure_ptr
040347a8 g     O .bss	00000004 alt_argc
04012cf8 g     F .text	0000005c _do_dtors
040065c8 g     F .text	0000008c myprintf_dwordarray
0400603c g     F .text	000001c0 I2CL_MultipleRead
04000020 g       .exceptions	00000000 alt_irq_entry
0400ecfc g     F .text	00000060 __ulp
0400f7fc g     F .text	00000038 __isinfd
0400d34c g     F .text	00000018 __fp_unlock_all
04006b00 g     F .text	0000014c Touch_GetXY
0403114c g     O .rwdata	00000008 alt_fs_list
040017cc g     F .text	00000108 vid_print_string
04000020 g       *ABS*	00000000 __ram_exceptions_start
0400de84 g     F .text	0000000c localeconv
04007470 g     F .text	000002c4 __ieee754_sqrt
04011008 g     F .text	00000050 alt_ic_isr_register
04031174 g       *ABS*	00000000 _edata
04034a74 g       *ABS*	00000000 _end
04004aa0 g     F .text	00000060 ShowInfo
04002d40 g     F .text	00000054 max3
040001b8 g       *ABS*	00000000 __ram_exceptions_end
040121e0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
040110f4 g     F .text	000000a0 alt_ic_irq_disable
04001cf8 g     F .text	0000004c vid_merge_colors
0400f888 g     F .text	00000088 __swrite
04031144 g     O .rwdata	00000004 __malloc_trim_threshold
0401312c g     F .text	00000020 altera_nios2_qsys_irq_init
04013444 g     F .text	00000038 exit
0400dcfc g     F .text	000000b8 _fwalk_reent
0400eb54 g     F .text	000001a8 __mdiff
040046b0 g     F .text	0000008c IsContinuedPoint
040082d0 g     F .text	0000005c __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0400d328 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
040066c4 g     F .text	00000030 QUEUE_Delete
0400724c g     F .text	000000dc touch_xy_transform
04001b14 g     F .text	0000009c vid_set_pixel
040137c8 g     F .text	0000003c _exit
04007734 g     F .text	0000002c __isnand
04010c88 g     F .text	00000140 alt_alarm_start
0400119c g     F .text	00000040 vid_scroll_string_quit
0400833c g     F .text	00000060 __muldi3
0400de90 g     F .text	000001a8 __smakebuf_r
04009514 g     F .text	0000008c strlen
04012fd8 g     F .text	00000154 open
04010b08 g     F .text	00000064 __gedf2
04000324 g     F .text	00000088 RectInflate
04012d54 g     F .text	00000030 alt_icache_flush_all
04031164 g     O .rwdata	00000004 alt_priority_mask
04011058 g     F .text	0000009c alt_ic_irq_enable
0400b3cc g     F .text	00000024 __vfprintf_internal
04007b10 g     F .text	00000060 __subdf3
04002f3c g     F .text	00000238 vid_bres_scan_edges
0400e5a8 g     F .text	000000b0 __lo0bits
0403116c g     O .rwdata	00000008 alt_alarm_list
04002de8 g     F .text	00000064 max_diff3
04012c9c g     F .text	0000005c _do_ctors
04005d94 g     F .text	00000140 I2CL_Write
0400413c g     F .text	000000d0 GUI_ShowWelcome
04003ac0 g     F .text	00000148 merge_color_channels
04010e18 g     F .text	000000c8 close
0401142c g     F .text	00000080 alt_load
04006ac8 g     F .text	00000038 Touch_EmptyFifo
04008448 g     F .text	00000224 __pack_d
040088ec g     F .text	00000014 free
0400d32c g     F .text	00000004 __sinit_lock_acquire
0400e328 g     F .text	00000114 __multadd
0400e300 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08406e14 	ori	at,at,440
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)

04000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000100:	0005313a 	rdctl	r2,ipending
 4000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000114:	00800044 	movi	r2,1
 4000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400011c:	e0fffb17 	ldw	r3,-20(fp)
 4000120:	e0bffc17 	ldw	r2,-16(fp)
 4000124:	1884703a 	and	r2,r3,r2
 4000128:	10001726 	beq	r2,zero,4000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	00c100f4 	movhi	r3,1027
 4000130:	18d1f904 	addi	r3,r3,18404
 4000134:	e0bffd17 	ldw	r2,-12(fp)
 4000138:	100490fa 	slli	r2,r2,3
 400013c:	1885883a 	add	r2,r3,r2
 4000140:	10c00017 	ldw	r3,0(r2)
 4000144:	010100f4 	movhi	r4,1027
 4000148:	2111f904 	addi	r4,r4,18404
 400014c:	e0bffd17 	ldw	r2,-12(fp)
 4000150:	100490fa 	slli	r2,r2,3
 4000154:	2085883a 	add	r2,r4,r2
 4000158:	10800104 	addi	r2,r2,4
 400015c:	10800017 	ldw	r2,0(r2)
 4000160:	1009883a 	mov	r4,r2
 4000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400016c:	0005313a 	rdctl	r2,ipending
 4000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 400017c:	e0bffb17 	ldw	r2,-20(fp)
 4000180:	103fe31e 	bne	r2,zero,4000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 4000184:	00000706 	br	40001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000188:	e0bffc17 	ldw	r2,-16(fp)
 400018c:	1085883a 	add	r2,r2,r2
 4000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000194:	e0bffd17 	ldw	r2,-12(fp)
 4000198:	10800044 	addi	r2,r2,1
 400019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a0:	003fde06 	br	400011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40001a4:	e037883a 	mov	sp,fp
 40001a8:	dfc00117 	ldw	ra,4(sp)
 40001ac:	df000017 	ldw	fp,0(sp)
 40001b0:	dec00204 	addi	sp,sp,8
 40001b4:	f800283a 	ret

Disassembly of section .text:

040001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 40001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 40001bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 40001c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 40001c4:	00bffd16 	blt	zero,r2,40001bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001c8:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 40001cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 40001d0:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 40001d4:	d6a44b14 	ori	gp,gp,37164
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001d8:	008100f4 	movhi	r2,1027
    ori r2, r2, %lo(__bss_start)
 40001dc:	1091e114 	ori	r2,r2,18308

    movhi r3, %hi(__bss_end)
 40001e0:	00c100f4 	movhi	r3,1027
    ori r3, r3, %lo(__bss_end)
 40001e4:	18d29d14 	ori	r3,r3,19060

    beq r2, r3, 1f
 40001e8:	10c00326 	beq	r2,r3,40001f8 <_start+0x40>

0:
    stw zero, (r2)
 40001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001f4:	10fffd36 	bltu	r2,r3,40001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001f8:	401142c0 	call	401142c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001fc:	40115cc0 	call	40115cc <alt_main>

04000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000200:	003fff06 	br	4000200 <alt_after_alt_main>

04000204 <IsPtInRect>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
 4000204:	defffc04 	addi	sp,sp,-16
 4000208:	df000315 	stw	fp,12(sp)
 400020c:	df000304 	addi	fp,sp,12
 4000210:	e13ffe15 	stw	r4,-8(fp)
 4000214:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
 4000218:	e03ffd15 	stw	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
 400021c:	e0bffe17 	ldw	r2,-8(fp)
 4000220:	10c00017 	ldw	r3,0(r2)
 4000224:	e0bfff17 	ldw	r2,-4(fp)
 4000228:	10800017 	ldw	r2,0(r2)
 400022c:	18801116 	blt	r3,r2,4000274 <IsPtInRect+0x70>
 4000230:	e0bffe17 	ldw	r2,-8(fp)
 4000234:	10800017 	ldw	r2,0(r2)
 4000238:	e0ffff17 	ldw	r3,-4(fp)
 400023c:	18c00117 	ldw	r3,4(r3)
 4000240:	18800c16 	blt	r3,r2,4000274 <IsPtInRect+0x70>
 4000244:	e0bffe17 	ldw	r2,-8(fp)
 4000248:	10c00117 	ldw	r3,4(r2)
 400024c:	e0bfff17 	ldw	r2,-4(fp)
 4000250:	10800217 	ldw	r2,8(r2)
 4000254:	18800716 	blt	r3,r2,4000274 <IsPtInRect+0x70>
 4000258:	e0bffe17 	ldw	r2,-8(fp)
 400025c:	10800117 	ldw	r2,4(r2)
 4000260:	e0ffff17 	ldw	r3,-4(fp)
 4000264:	18c00317 	ldw	r3,12(r3)
 4000268:	18800216 	blt	r3,r2,4000274 <IsPtInRect+0x70>
        bYes = TRUE;
 400026c:	00800044 	movi	r2,1
 4000270:	e0bffd15 	stw	r2,-12(fp)
    
    return bYes;
 4000274:	e0bffd17 	ldw	r2,-12(fp)
}
 4000278:	e037883a 	mov	sp,fp
 400027c:	df000017 	ldw	fp,0(sp)
 4000280:	dec00104 	addi	sp,sp,4
 4000284:	f800283a 	ret

04000288 <PtSet>:

void PtSet(POINT *pt, int x, int y){
 4000288:	defffc04 	addi	sp,sp,-16
 400028c:	df000315 	stw	fp,12(sp)
 4000290:	df000304 	addi	fp,sp,12
 4000294:	e13ffd15 	stw	r4,-12(fp)
 4000298:	e17ffe15 	stw	r5,-8(fp)
 400029c:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
 40002a0:	e0bffd17 	ldw	r2,-12(fp)
 40002a4:	e0fffe17 	ldw	r3,-8(fp)
 40002a8:	10c00015 	stw	r3,0(r2)
    pt->y = y;
 40002ac:	e0bffd17 	ldw	r2,-12(fp)
 40002b0:	e0ffff17 	ldw	r3,-4(fp)
 40002b4:	10c00115 	stw	r3,4(r2)
}
 40002b8:	e037883a 	mov	sp,fp
 40002bc:	df000017 	ldw	fp,0(sp)
 40002c0:	dec00104 	addi	sp,sp,4
 40002c4:	f800283a 	ret

040002c8 <RectSet>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
 40002c8:	defffb04 	addi	sp,sp,-20
 40002cc:	df000415 	stw	fp,16(sp)
 40002d0:	df000404 	addi	fp,sp,16
 40002d4:	e13ffc15 	stw	r4,-16(fp)
 40002d8:	e17ffd15 	stw	r5,-12(fp)
 40002dc:	e1bffe15 	stw	r6,-8(fp)
 40002e0:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
 40002e4:	e0bffc17 	ldw	r2,-16(fp)
 40002e8:	e0fffd17 	ldw	r3,-12(fp)
 40002ec:	10c00015 	stw	r3,0(r2)
    rc->right = right;
 40002f0:	e0bffc17 	ldw	r2,-16(fp)
 40002f4:	e0fffe17 	ldw	r3,-8(fp)
 40002f8:	10c00115 	stw	r3,4(r2)
    rc->top = top;
 40002fc:	e0bffc17 	ldw	r2,-16(fp)
 4000300:	e0ffff17 	ldw	r3,-4(fp)
 4000304:	10c00215 	stw	r3,8(r2)
    rc->bottom = bottom;
 4000308:	e0bffc17 	ldw	r2,-16(fp)
 400030c:	e0c00117 	ldw	r3,4(fp)
 4000310:	10c00315 	stw	r3,12(r2)
}
 4000314:	e037883a 	mov	sp,fp
 4000318:	df000017 	ldw	fp,0(sp)
 400031c:	dec00104 	addi	sp,sp,4
 4000320:	f800283a 	ret

04000324 <RectInflate>:

void RectInflate(RECT *rc, int x, int y){
 4000324:	defffc04 	addi	sp,sp,-16
 4000328:	df000315 	stw	fp,12(sp)
 400032c:	df000304 	addi	fp,sp,12
 4000330:	e13ffd15 	stw	r4,-12(fp)
 4000334:	e17ffe15 	stw	r5,-8(fp)
 4000338:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
 400033c:	e0bffd17 	ldw	r2,-12(fp)
 4000340:	10c00017 	ldw	r3,0(r2)
 4000344:	e0bffe17 	ldw	r2,-8(fp)
 4000348:	1887c83a 	sub	r3,r3,r2
 400034c:	e0bffd17 	ldw	r2,-12(fp)
 4000350:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 4000354:	e0bffd17 	ldw	r2,-12(fp)
 4000358:	10c00117 	ldw	r3,4(r2)
 400035c:	e0bffe17 	ldw	r2,-8(fp)
 4000360:	1887883a 	add	r3,r3,r2
 4000364:	e0bffd17 	ldw	r2,-12(fp)
 4000368:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
 400036c:	e0bffd17 	ldw	r2,-12(fp)
 4000370:	10c00217 	ldw	r3,8(r2)
 4000374:	e0bfff17 	ldw	r2,-4(fp)
 4000378:	1887c83a 	sub	r3,r3,r2
 400037c:	e0bffd17 	ldw	r2,-12(fp)
 4000380:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 4000384:	e0bffd17 	ldw	r2,-12(fp)
 4000388:	10c00317 	ldw	r3,12(r2)
 400038c:	e0bfff17 	ldw	r2,-4(fp)
 4000390:	1887883a 	add	r3,r3,r2
 4000394:	e0bffd17 	ldw	r2,-12(fp)
 4000398:	10c00315 	stw	r3,12(r2)
}
 400039c:	e037883a 	mov	sp,fp
 40003a0:	df000017 	ldw	fp,0(sp)
 40003a4:	dec00104 	addi	sp,sp,4
 40003a8:	f800283a 	ret

040003ac <RectOffset>:

void RectOffset(RECT *rc, int x, int y){
 40003ac:	defffc04 	addi	sp,sp,-16
 40003b0:	df000315 	stw	fp,12(sp)
 40003b4:	df000304 	addi	fp,sp,12
 40003b8:	e13ffd15 	stw	r4,-12(fp)
 40003bc:	e17ffe15 	stw	r5,-8(fp)
 40003c0:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
 40003c4:	e0bffd17 	ldw	r2,-12(fp)
 40003c8:	10c00017 	ldw	r3,0(r2)
 40003cc:	e0bffe17 	ldw	r2,-8(fp)
 40003d0:	1887883a 	add	r3,r3,r2
 40003d4:	e0bffd17 	ldw	r2,-12(fp)
 40003d8:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 40003dc:	e0bffd17 	ldw	r2,-12(fp)
 40003e0:	10c00117 	ldw	r3,4(r2)
 40003e4:	e0bffe17 	ldw	r2,-8(fp)
 40003e8:	1887883a 	add	r3,r3,r2
 40003ec:	e0bffd17 	ldw	r2,-12(fp)
 40003f0:	10c00115 	stw	r3,4(r2)
    rc->top += y;
 40003f4:	e0bffd17 	ldw	r2,-12(fp)
 40003f8:	10c00217 	ldw	r3,8(r2)
 40003fc:	e0bfff17 	ldw	r2,-4(fp)
 4000400:	1887883a 	add	r3,r3,r2
 4000404:	e0bffd17 	ldw	r2,-12(fp)
 4000408:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 400040c:	e0bffd17 	ldw	r2,-12(fp)
 4000410:	10c00317 	ldw	r3,12(r2)
 4000414:	e0bfff17 	ldw	r2,-4(fp)
 4000418:	1887883a 	add	r3,r3,r2
 400041c:	e0bffd17 	ldw	r2,-12(fp)
 4000420:	10c00315 	stw	r3,12(r2)
}
 4000424:	e037883a 	mov	sp,fp
 4000428:	df000017 	ldw	fp,0(sp)
 400042c:	dec00104 	addi	sp,sp,4
 4000430:	f800283a 	ret

04000434 <RectCopy>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
 4000434:	defffd04 	addi	sp,sp,-12
 4000438:	df000215 	stw	fp,8(sp)
 400043c:	df000204 	addi	fp,sp,8
 4000440:	e13ffe15 	stw	r4,-8(fp)
 4000444:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
 4000448:	e0bfff17 	ldw	r2,-4(fp)
 400044c:	10c00017 	ldw	r3,0(r2)
 4000450:	e0bffe17 	ldw	r2,-8(fp)
 4000454:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
 4000458:	e0bfff17 	ldw	r2,-4(fp)
 400045c:	10c00117 	ldw	r3,4(r2)
 4000460:	e0bffe17 	ldw	r2,-8(fp)
 4000464:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
 4000468:	e0bfff17 	ldw	r2,-4(fp)
 400046c:	10c00217 	ldw	r3,8(r2)
 4000470:	e0bffe17 	ldw	r2,-8(fp)
 4000474:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
 4000478:	e0bfff17 	ldw	r2,-4(fp)
 400047c:	10c00317 	ldw	r3,12(r2)
 4000480:	e0bffe17 	ldw	r2,-8(fp)
 4000484:	10c00315 	stw	r3,12(r2)
}
 4000488:	e037883a 	mov	sp,fp
 400048c:	df000017 	ldw	fp,0(sp)
 4000490:	dec00104 	addi	sp,sp,4
 4000494:	f800283a 	ret

04000498 <RectWidth>:

int RectWidth(RECT *rc){
 4000498:	defffe04 	addi	sp,sp,-8
 400049c:	df000115 	stw	fp,4(sp)
 40004a0:	df000104 	addi	fp,sp,4
 40004a4:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
 40004a8:	e0bfff17 	ldw	r2,-4(fp)
 40004ac:	10c00117 	ldw	r3,4(r2)
 40004b0:	e0bfff17 	ldw	r2,-4(fp)
 40004b4:	10800017 	ldw	r2,0(r2)
 40004b8:	1885c83a 	sub	r2,r3,r2
}
 40004bc:	e037883a 	mov	sp,fp
 40004c0:	df000017 	ldw	fp,0(sp)
 40004c4:	dec00104 	addi	sp,sp,4
 40004c8:	f800283a 	ret

040004cc <RectHeight>:

int RectHeight(RECT *rc){
 40004cc:	defffe04 	addi	sp,sp,-8
 40004d0:	df000115 	stw	fp,4(sp)
 40004d4:	df000104 	addi	fp,sp,4
 40004d8:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
 40004dc:	e0bfff17 	ldw	r2,-4(fp)
 40004e0:	10c00317 	ldw	r3,12(r2)
 40004e4:	e0bfff17 	ldw	r2,-4(fp)
 40004e8:	10800217 	ldw	r2,8(r2)
 40004ec:	1885c83a 	sub	r2,r3,r2
}
 40004f0:	e037883a 	mov	sp,fp
 40004f4:	df000017 	ldw	fp,0(sp)
 40004f8:	dec00104 	addi	sp,sp,4
 40004fc:	f800283a 	ret

04000500 <PtDistance>:

int PtDistance(POINT *pt1, POINT *pt2){
 4000500:	defff904 	addi	sp,sp,-28
 4000504:	dfc00615 	stw	ra,24(sp)
 4000508:	df000515 	stw	fp,20(sp)
 400050c:	df000504 	addi	fp,sp,20
 4000510:	e13ffe15 	stw	r4,-8(fp)
 4000514:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
 4000518:	e0bffe17 	ldw	r2,-8(fp)
 400051c:	10c00017 	ldw	r3,0(r2)
 4000520:	e0bfff17 	ldw	r2,-4(fp)
 4000524:	10800017 	ldw	r2,0(r2)
 4000528:	1885c83a 	sub	r2,r3,r2
 400052c:	e0bffb15 	stw	r2,-20(fp)
    b = pt1->y - pt2->y;
 4000530:	e0bffe17 	ldw	r2,-8(fp)
 4000534:	10c00117 	ldw	r3,4(r2)
 4000538:	e0bfff17 	ldw	r2,-4(fp)
 400053c:	10800117 	ldw	r2,4(r2)
 4000540:	1885c83a 	sub	r2,r3,r2
 4000544:	e0bffc15 	stw	r2,-16(fp)
    nDistance = a*a + b*b;
 4000548:	e0fffb17 	ldw	r3,-20(fp)
 400054c:	e0bffb17 	ldw	r2,-20(fp)
 4000550:	1887383a 	mul	r3,r3,r2
 4000554:	e13ffc17 	ldw	r4,-16(fp)
 4000558:	e0bffc17 	ldw	r2,-16(fp)
 400055c:	2085383a 	mul	r2,r4,r2
 4000560:	1885883a 	add	r2,r3,r2
 4000564:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
 4000568:	e13ffd17 	ldw	r4,-12(fp)
 400056c:	40080640 	call	4008064 <__floatsidf>
 4000570:	100b883a 	mov	r5,r2
 4000574:	180d883a 	mov	r6,r3
 4000578:	2809883a 	mov	r4,r5
 400057c:	300b883a 	mov	r5,r6
 4000580:	40073280 	call	4007328 <sqrt>
 4000584:	100b883a 	mov	r5,r2
 4000588:	180d883a 	mov	r6,r3
 400058c:	2809883a 	mov	r4,r5
 4000590:	300b883a 	mov	r5,r6
 4000594:	40081380 	call	4008138 <__fixdfsi>
 4000598:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
 400059c:	e0bffd17 	ldw	r2,-12(fp)
}
 40005a0:	e037883a 	mov	sp,fp
 40005a4:	dfc00117 	ldw	ra,4(sp)
 40005a8:	df000017 	ldw	fp,0(sp)
 40005ac:	dec00204 	addi	sp,sp,8
 40005b0:	f800283a 	ret

040005b4 <PtCopy>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
 40005b4:	defffd04 	addi	sp,sp,-12
 40005b8:	df000215 	stw	fp,8(sp)
 40005bc:	df000204 	addi	fp,sp,8
 40005c0:	e13ffe15 	stw	r4,-8(fp)
 40005c4:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
 40005c8:	e0bfff17 	ldw	r2,-4(fp)
 40005cc:	10c00017 	ldw	r3,0(r2)
 40005d0:	e0bffe17 	ldw	r2,-8(fp)
 40005d4:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
 40005d8:	e0bfff17 	ldw	r2,-4(fp)
 40005dc:	10c00117 	ldw	r3,4(r2)
 40005e0:	e0bffe17 	ldw	r2,-8(fp)
 40005e4:	10c00115 	stw	r3,4(r2)
}
 40005e8:	e037883a 	mov	sp,fp
 40005ec:	df000017 	ldw	fp,0(sp)
 40005f0:	dec00104 	addi	sp,sp,4
 40005f4:	f800283a 	ret

040005f8 <Delay_Ms>:
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
 40005f8:	defffd04 	addi	sp,sp,-12
 40005fc:	dfc00215 	stw	ra,8(sp)
 4000600:	df000115 	stw	fp,4(sp)
 4000604:	df000104 	addi	fp,sp,4
 4000608:	2005883a 	mov	r2,r4
 400060c:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
 4000610:	00000206 	br	400061c <Delay_Ms+0x24>
    {
        usleep(1000);
 4000614:	0100fa04 	movi	r4,1000
 4000618:	4011a700 	call	4011a70 <usleep>
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
 400061c:	e0bfff0b 	ldhu	r2,-4(fp)
 4000620:	1004c03a 	cmpne	r2,r2,zero
 4000624:	e0ffff0b 	ldhu	r3,-4(fp)
 4000628:	18ffffc4 	addi	r3,r3,-1
 400062c:	e0ffff0d 	sth	r3,-4(fp)
 4000630:	10803fcc 	andi	r2,r2,255
 4000634:	103ff71e 	bne	r2,zero,4000614 <Delay_Ms+0x1c>
    {
        usleep(1000);
    }
}
 4000638:	e037883a 	mov	sp,fp
 400063c:	dfc00117 	ldw	ra,4(sp)
 4000640:	df000017 	ldw	fp,0(sp)
 4000644:	dec00204 	addi	sp,sp,8
 4000648:	f800283a 	ret

0400064c <LCD_SetCursor>:


void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos)
{
 400064c:	defffd04 	addi	sp,sp,-12
 4000650:	df000215 	stw	fp,8(sp)
 4000654:	df000204 	addi	fp,sp,8
 4000658:	2007883a 	mov	r3,r4
 400065c:	2805883a 	mov	r2,r5
 4000660:	e0fffe0d 	sth	r3,-8(fp)
 4000664:	e0bfff0d 	sth	r2,-4(fp)
	 LCD_WR_REG(0x002A);
 4000668:	00c00a84 	movi	r3,42
 400066c:	00820034 	movhi	r2,2048
 4000670:	10842204 	addi	r2,r2,4232
 4000674:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos>>8);
 4000678:	e0bffe0b 	ldhu	r2,-8(fp)
 400067c:	1004d23a 	srli	r2,r2,8
 4000680:	10ffffcc 	andi	r3,r2,65535
 4000684:	00820034 	movhi	r2,2048
 4000688:	10842304 	addi	r2,r2,4236
 400068c:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos&0XFF);
 4000690:	e0bffe0b 	ldhu	r2,-8(fp)
 4000694:	10c03fcc 	andi	r3,r2,255
 4000698:	00820034 	movhi	r2,2048
 400069c:	10842304 	addi	r2,r2,4236
 40006a0:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002B);
 40006a4:	00c00ac4 	movi	r3,43
 40006a8:	00820034 	movhi	r2,2048
 40006ac:	10842204 	addi	r2,r2,4232
 40006b0:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos>>8);
 40006b4:	e0bfff0b 	ldhu	r2,-4(fp)
 40006b8:	1004d23a 	srli	r2,r2,8
 40006bc:	10ffffcc 	andi	r3,r2,65535
 40006c0:	00820034 	movhi	r2,2048
 40006c4:	10842304 	addi	r2,r2,4236
 40006c8:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos&0XFF);
 40006cc:	e0bfff0b 	ldhu	r2,-4(fp)
 40006d0:	10c03fcc 	andi	r3,r2,255
 40006d4:	00820034 	movhi	r2,2048
 40006d8:	10842304 	addi	r2,r2,4236
 40006dc:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002C);
 40006e0:	00c00b04 	movi	r3,44
 40006e4:	00820034 	movhi	r2,2048
 40006e8:	10842204 	addi	r2,r2,4232
 40006ec:	10c00035 	stwio	r3,0(r2)
}
 40006f0:	e037883a 	mov	sp,fp
 40006f4:	df000017 	ldw	fp,0(sp)
 40006f8:	dec00104 	addi	sp,sp,4
 40006fc:	f800283a 	ret

04000700 <LCD_Clear>:

void LCD_Clear(alt_u16 Color)
{
 4000700:	defffc04 	addi	sp,sp,-16
 4000704:	dfc00315 	stw	ra,12(sp)
 4000708:	df000215 	stw	fp,8(sp)
 400070c:	df000204 	addi	fp,sp,8
 4000710:	2005883a 	mov	r2,r4
 4000714:	e0bfff0d 	sth	r2,-4(fp)
        alt_u32 index=0;
 4000718:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
 400071c:	0009883a 	mov	r4,zero
 4000720:	000b883a 	mov	r5,zero
 4000724:	400064c0 	call	400064c <LCD_SetCursor>
        LCD_WR_REG(0x002C);
 4000728:	00c00b04 	movi	r3,44
 400072c:	00820034 	movhi	r2,2048
 4000730:	10842204 	addi	r2,r2,4232
 4000734:	10c00035 	stwio	r3,0(r2)
        for(index=0;index<76800;index++)
 4000738:	e03ffe15 	stw	zero,-8(fp)
 400073c:	00000706 	br	400075c <LCD_Clear+0x5c>
        {
        	LCD_WR_DATA(Color);
 4000740:	e0ffff0b 	ldhu	r3,-4(fp)
 4000744:	00820034 	movhi	r2,2048
 4000748:	10842304 	addi	r2,r2,4236
 400074c:	10c00035 	stwio	r3,0(r2)
void LCD_Clear(alt_u16 Color)
{
        alt_u32 index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
 4000750:	e0bffe17 	ldw	r2,-8(fp)
 4000754:	10800044 	addi	r2,r2,1
 4000758:	e0bffe15 	stw	r2,-8(fp)
 400075c:	e0bffe17 	ldw	r2,-8(fp)
 4000760:	00c00074 	movhi	r3,1
 4000764:	18caffc4 	addi	r3,r3,11263
 4000768:	18bff52e 	bgeu	r3,r2,4000740 <LCD_Clear+0x40>
        {
        	LCD_WR_DATA(Color);
        }
}
 400076c:	e037883a 	mov	sp,fp
 4000770:	dfc00117 	ldw	ra,4(sp)
 4000774:	df000017 	ldw	fp,0(sp)
 4000778:	dec00204 	addi	sp,sp,8
 400077c:	f800283a 	ret

04000780 <LCD_DrawPoint>:

void LCD_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color )
{
 4000780:	defffb04 	addi	sp,sp,-20
 4000784:	dfc00415 	stw	ra,16(sp)
 4000788:	df000315 	stw	fp,12(sp)
 400078c:	df000304 	addi	fp,sp,12
 4000790:	2807883a 	mov	r3,r5
 4000794:	3005883a 	mov	r2,r6
 4000798:	e13ffd0d 	sth	r4,-12(fp)
 400079c:	e0fffe0d 	sth	r3,-8(fp)
 40007a0:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(x,y);
 40007a4:	e0fffd0b 	ldhu	r3,-12(fp)
 40007a8:	e0bffe0b 	ldhu	r2,-8(fp)
 40007ac:	1809883a 	mov	r4,r3
 40007b0:	100b883a 	mov	r5,r2
 40007b4:	400064c0 	call	400064c <LCD_SetCursor>
        LCD_WR_REG(0x002C);
 40007b8:	00c00b04 	movi	r3,44
 40007bc:	00820034 	movhi	r2,2048
 40007c0:	10842204 	addi	r2,r2,4232
 40007c4:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(color);
 40007c8:	e0ffff0b 	ldhu	r3,-4(fp)
 40007cc:	00820034 	movhi	r2,2048
 40007d0:	10842304 	addi	r2,r2,4236
 40007d4:	10c00035 	stwio	r3,0(r2)
}
 40007d8:	e037883a 	mov	sp,fp
 40007dc:	dfc00117 	ldw	ra,4(sp)
 40007e0:	df000017 	ldw	fp,0(sp)
 40007e4:	dec00204 	addi	sp,sp,8
 40007e8:	f800283a 	ret

040007ec <LCD_Init>:
void LCD_Init()
{
 40007ec:	defffe04 	addi	sp,sp,-8
 40007f0:	dfc00115 	stw	ra,4(sp)
 40007f4:	df000015 	stw	fp,0(sp)
 40007f8:	d839883a 	mov	fp,sp
	alt_u16 data1,data2;
	alt_u16 data3,data4;
	Set_LCD_RST;
 40007fc:	00c00044 	movi	r3,1
 4000800:	00820034 	movhi	r2,2048
 4000804:	10841c04 	addi	r2,r2,4208
 4000808:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
 400080c:	01000044 	movi	r4,1
 4000810:	40005f80 	call	40005f8 <Delay_Ms>
	Clr_LCD_RST;
 4000814:	0007883a 	mov	r3,zero
 4000818:	00820034 	movhi	r2,2048
 400081c:	10841c04 	addi	r2,r2,4208
 4000820:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
 4000824:	01000284 	movi	r4,10
 4000828:	40005f80 	call	40005f8 <Delay_Ms>
	Set_LCD_RST;
 400082c:	00c00044 	movi	r3,1
 4000830:	00820034 	movhi	r2,2048
 4000834:	10841c04 	addi	r2,r2,4208
 4000838:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);       // Delay 120 ms
 400083c:	01001e04 	movi	r4,120
 4000840:	40005f80 	call	40005f8 <Delay_Ms>
//	Clr_LCD_CS;



	LCD_WR_REG(0x0011); //Exit Sleep
 4000844:	00c00444 	movi	r3,17
 4000848:	00820034 	movhi	r2,2048
 400084c:	10842204 	addi	r2,r2,4232
 4000850:	10c00035 	stwio	r3,0(r2)
	LCD_WR_REG(0x00CF);
 4000854:	00c033c4 	movi	r3,207
 4000858:	00820034 	movhi	r2,2048
 400085c:	10842204 	addi	r2,r2,4232
 4000860:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4000864:	0007883a 	mov	r3,zero
 4000868:	00820034 	movhi	r2,2048
 400086c:	10842304 	addi	r2,r2,4236
 4000870:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0081);
 4000874:	00c02044 	movi	r3,129
 4000878:	00820034 	movhi	r2,2048
 400087c:	10842304 	addi	r2,r2,4236
 4000880:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00c0);
 4000884:	00c03004 	movi	r3,192
 4000888:	00820034 	movhi	r2,2048
 400088c:	10842304 	addi	r2,r2,4236
 4000890:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00ED);
 4000894:	00c03b44 	movi	r3,237
 4000898:	00820034 	movhi	r2,2048
 400089c:	10842204 	addi	r2,r2,4232
 40008a0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0064);
 40008a4:	00c01904 	movi	r3,100
 40008a8:	00820034 	movhi	r2,2048
 40008ac:	10842304 	addi	r2,r2,4236
 40008b0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0003);
 40008b4:	00c000c4 	movi	r3,3
 40008b8:	00820034 	movhi	r2,2048
 40008bc:	10842304 	addi	r2,r2,4236
 40008c0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0012);
 40008c4:	00c00484 	movi	r3,18
 40008c8:	00820034 	movhi	r2,2048
 40008cc:	10842304 	addi	r2,r2,4236
 40008d0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0081);
 40008d4:	00c02044 	movi	r3,129
 40008d8:	00820034 	movhi	r2,2048
 40008dc:	10842304 	addi	r2,r2,4236
 40008e0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E8);
 40008e4:	00c03a04 	movi	r3,232
 40008e8:	00820034 	movhi	r2,2048
 40008ec:	10842204 	addi	r2,r2,4232
 40008f0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0085);
 40008f4:	00c02144 	movi	r3,133
 40008f8:	00820034 	movhi	r2,2048
 40008fc:	10842304 	addi	r2,r2,4236
 4000900:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 4000904:	00c00044 	movi	r3,1
 4000908:	00820034 	movhi	r2,2048
 400090c:	10842304 	addi	r2,r2,4236
 4000910:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00798);
 4000914:	00c1e604 	movi	r3,1944
 4000918:	00820034 	movhi	r2,2048
 400091c:	10842304 	addi	r2,r2,4236
 4000920:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00CB);
 4000924:	00c032c4 	movi	r3,203
 4000928:	00820034 	movhi	r2,2048
 400092c:	10842204 	addi	r2,r2,4232
 4000930:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0039);
 4000934:	00c00e44 	movi	r3,57
 4000938:	00820034 	movhi	r2,2048
 400093c:	10842304 	addi	r2,r2,4236
 4000940:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002C);
 4000944:	00c00b04 	movi	r3,44
 4000948:	00820034 	movhi	r2,2048
 400094c:	10842304 	addi	r2,r2,4236
 4000950:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4000954:	0007883a 	mov	r3,zero
 4000958:	00820034 	movhi	r2,2048
 400095c:	10842304 	addi	r2,r2,4236
 4000960:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
 4000964:	00c00d04 	movi	r3,52
 4000968:	00820034 	movhi	r2,2048
 400096c:	10842304 	addi	r2,r2,4236
 4000970:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0002);
 4000974:	00c00084 	movi	r3,2
 4000978:	00820034 	movhi	r2,2048
 400097c:	10842304 	addi	r2,r2,4236
 4000980:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F7);
 4000984:	00c03dc4 	movi	r3,247
 4000988:	00820034 	movhi	r2,2048
 400098c:	10842204 	addi	r2,r2,4232
 4000990:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
 4000994:	00c00804 	movi	r3,32
 4000998:	00820034 	movhi	r2,2048
 400099c:	10842304 	addi	r2,r2,4236
 40009a0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00EA);
 40009a4:	00c03a84 	movi	r3,234
 40009a8:	00820034 	movhi	r2,2048
 40009ac:	10842204 	addi	r2,r2,4232
 40009b0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 40009b4:	0007883a 	mov	r3,zero
 40009b8:	00820034 	movhi	r2,2048
 40009bc:	10842304 	addi	r2,r2,4236
 40009c0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 40009c4:	0007883a 	mov	r3,zero
 40009c8:	00820034 	movhi	r2,2048
 40009cc:	10842304 	addi	r2,r2,4236
 40009d0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B1);
 40009d4:	00c02c44 	movi	r3,177
 40009d8:	00820034 	movhi	r2,2048
 40009dc:	10842204 	addi	r2,r2,4232
 40009e0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 40009e4:	0007883a 	mov	r3,zero
 40009e8:	00820034 	movhi	r2,2048
 40009ec:	10842304 	addi	r2,r2,4236
 40009f0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001b);
 40009f4:	00c006c4 	movi	r3,27
 40009f8:	00820034 	movhi	r2,2048
 40009fc:	10842304 	addi	r2,r2,4236
 4000a00:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B6);
 4000a04:	00c02d84 	movi	r3,182
 4000a08:	00820034 	movhi	r2,2048
 4000a0c:	10842204 	addi	r2,r2,4232
 4000a10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000A);
 4000a14:	00c00284 	movi	r3,10
 4000a18:	00820034 	movhi	r2,2048
 4000a1c:	10842304 	addi	r2,r2,4236
 4000a20:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00A2);
 4000a24:	00c02884 	movi	r3,162
 4000a28:	00820034 	movhi	r2,2048
 4000a2c:	10842304 	addi	r2,r2,4236
 4000a30:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C0);    //Power control
 4000a34:	00c03004 	movi	r3,192
 4000a38:	00820034 	movhi	r2,2048
 4000a3c:	10842204 	addi	r2,r2,4232
 4000a40:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);   //VRH[5:0]
 4000a44:	00c00144 	movi	r3,5
 4000a48:	00820034 	movhi	r2,2048
 4000a4c:	10842304 	addi	r2,r2,4236
 4000a50:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C1);    //Power control
 4000a54:	00c03044 	movi	r3,193
 4000a58:	00820034 	movhi	r2,2048
 4000a5c:	10842204 	addi	r2,r2,4232
 4000a60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
 4000a64:	00c00444 	movi	r3,17
 4000a68:	00820034 	movhi	r2,2048
 4000a6c:	10842304 	addi	r2,r2,4236
 4000a70:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C5);    //VCM control
 4000a74:	00c03144 	movi	r3,197
 4000a78:	00820034 	movhi	r2,2048
 4000a7c:	10842204 	addi	r2,r2,4232
 4000a80:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3F
 4000a84:	00c01144 	movi	r3,69
 4000a88:	00820034 	movhi	r2,2048
 4000a8c:	10842304 	addi	r2,r2,4236
 4000a90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3C
 4000a94:	00c01144 	movi	r3,69
 4000a98:	00820034 	movhi	r2,2048
 4000a9c:	10842304 	addi	r2,r2,4236
 4000aa0:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00C7);    //VCM control2
 4000aa4:	00c031c4 	movi	r3,199
 4000aa8:	00820034 	movhi	r2,2048
 4000aac:	10842204 	addi	r2,r2,4232
 4000ab0:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(0X00a2);
 4000ab4:	00c02884 	movi	r3,162
 4000ab8:	00820034 	movhi	r2,2048
 4000abc:	10842304 	addi	r2,r2,4236
 4000ac0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0036);    // Memory Access Control
 4000ac4:	00c00d84 	movi	r3,54
 4000ac8:	00820034 	movhi	r2,2048
 4000acc:	10842204 	addi	r2,r2,4232
 4000ad0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);//48
 4000ad4:	00c00204 	movi	r3,8
 4000ad8:	00820034 	movhi	r2,2048
 4000adc:	10842304 	addi	r2,r2,4236
 4000ae0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
 4000ae4:	00c03c84 	movi	r3,242
 4000ae8:	00820034 	movhi	r2,2048
 4000aec:	10842204 	addi	r2,r2,4232
 4000af0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4000af4:	0007883a 	mov	r3,zero
 4000af8:	00820034 	movhi	r2,2048
 4000afc:	10842304 	addi	r2,r2,4236
 4000b00:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0026);    //Gamma curve selected
 4000b04:	00c00984 	movi	r3,38
 4000b08:	00820034 	movhi	r2,2048
 4000b0c:	10842204 	addi	r2,r2,4232
 4000b10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 4000b14:	00c00044 	movi	r3,1
 4000b18:	00820034 	movhi	r2,2048
 4000b1c:	10842304 	addi	r2,r2,4236
 4000b20:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E0);    //Set Gamma
 4000b24:	00c03804 	movi	r3,224
 4000b28:	00820034 	movhi	r2,2048
 4000b2c:	10842204 	addi	r2,r2,4232
 4000b30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000F);
 4000b34:	00c003c4 	movi	r3,15
 4000b38:	00820034 	movhi	r2,2048
 4000b3c:	10842304 	addi	r2,r2,4236
 4000b40:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0026);
 4000b44:	00c00984 	movi	r3,38
 4000b48:	00820034 	movhi	r2,2048
 4000b4c:	10842304 	addi	r2,r2,4236
 4000b50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0024);
 4000b54:	00c00904 	movi	r3,36
 4000b58:	00820034 	movhi	r2,2048
 4000b5c:	10842304 	addi	r2,r2,4236
 4000b60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
 4000b64:	00c002c4 	movi	r3,11
 4000b68:	00820034 	movhi	r2,2048
 4000b6c:	10842304 	addi	r2,r2,4236
 4000b70:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000E);
 4000b74:	00c00384 	movi	r3,14
 4000b78:	00820034 	movhi	r2,2048
 4000b7c:	10842304 	addi	r2,r2,4236
 4000b80:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
 4000b84:	00c00204 	movi	r3,8
 4000b88:	00820034 	movhi	r2,2048
 4000b8c:	10842304 	addi	r2,r2,4236
 4000b90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x004b);
 4000b94:	00c012c4 	movi	r3,75
 4000b98:	00820034 	movhi	r2,2048
 4000b9c:	10842304 	addi	r2,r2,4236
 4000ba0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00a8);
 4000ba4:	00c02a04 	movi	r3,168
 4000ba8:	00820034 	movhi	r2,2048
 4000bac:	10842304 	addi	r2,r2,4236
 4000bb0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003b);
 4000bb4:	00c00ec4 	movi	r3,59
 4000bb8:	00820034 	movhi	r2,2048
 4000bbc:	10842304 	addi	r2,r2,4236
 4000bc0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000a);
 4000bc4:	00c00284 	movi	r3,10
 4000bc8:	00820034 	movhi	r2,2048
 4000bcc:	10842304 	addi	r2,r2,4236
 4000bd0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0014);
 4000bd4:	00c00504 	movi	r3,20
 4000bd8:	00820034 	movhi	r2,2048
 4000bdc:	10842304 	addi	r2,r2,4236
 4000be0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0006);
 4000be4:	00c00184 	movi	r3,6
 4000be8:	00820034 	movhi	r2,2048
 4000bec:	10842304 	addi	r2,r2,4236
 4000bf0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
 4000bf4:	00c00404 	movi	r3,16
 4000bf8:	00820034 	movhi	r2,2048
 4000bfc:	10842304 	addi	r2,r2,4236
 4000c00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
 4000c04:	00c00244 	movi	r3,9
 4000c08:	00820034 	movhi	r2,2048
 4000c0c:	10842304 	addi	r2,r2,4236
 4000c10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4000c14:	0007883a 	mov	r3,zero
 4000c18:	00820034 	movhi	r2,2048
 4000c1c:	10842304 	addi	r2,r2,4236
 4000c20:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0X00E1);    //Set Gamma
 4000c24:	00c03844 	movi	r3,225
 4000c28:	00820034 	movhi	r2,2048
 4000c2c:	10842204 	addi	r2,r2,4232
 4000c30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4000c34:	0007883a 	mov	r3,zero
 4000c38:	00820034 	movhi	r2,2048
 4000c3c:	10842304 	addi	r2,r2,4236
 4000c40:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001c);
 4000c44:	00c00704 	movi	r3,28
 4000c48:	00820034 	movhi	r2,2048
 4000c4c:	10842304 	addi	r2,r2,4236
 4000c50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
 4000c54:	00c00804 	movi	r3,32
 4000c58:	00820034 	movhi	r2,2048
 4000c5c:	10842304 	addi	r2,r2,4236
 4000c60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0004);
 4000c64:	00c00104 	movi	r3,4
 4000c68:	00820034 	movhi	r2,2048
 4000c6c:	10842304 	addi	r2,r2,4236
 4000c70:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
 4000c74:	00c00404 	movi	r3,16
 4000c78:	00820034 	movhi	r2,2048
 4000c7c:	10842304 	addi	r2,r2,4236
 4000c80:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
 4000c84:	00c00204 	movi	r3,8
 4000c88:	00820034 	movhi	r2,2048
 4000c8c:	10842304 	addi	r2,r2,4236
 4000c90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
 4000c94:	00c00d04 	movi	r3,52
 4000c98:	00820034 	movhi	r2,2048
 4000c9c:	10842304 	addi	r2,r2,4236
 4000ca0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0047);
 4000ca4:	00c011c4 	movi	r3,71
 4000ca8:	00820034 	movhi	r2,2048
 4000cac:	10842304 	addi	r2,r2,4236
 4000cb0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0044);
 4000cb4:	00c01104 	movi	r3,68
 4000cb8:	00820034 	movhi	r2,2048
 4000cbc:	10842304 	addi	r2,r2,4236
 4000cc0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);
 4000cc4:	00c00144 	movi	r3,5
 4000cc8:	00820034 	movhi	r2,2048
 4000ccc:	10842304 	addi	r2,r2,4236
 4000cd0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
 4000cd4:	00c002c4 	movi	r3,11
 4000cd8:	00820034 	movhi	r2,2048
 4000cdc:	10842304 	addi	r2,r2,4236
 4000ce0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
 4000ce4:	00c00244 	movi	r3,9
 4000ce8:	00820034 	movhi	r2,2048
 4000cec:	10842304 	addi	r2,r2,4236
 4000cf0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002f);
 4000cf4:	00c00bc4 	movi	r3,47
 4000cf8:	00820034 	movhi	r2,2048
 4000cfc:	10842304 	addi	r2,r2,4236
 4000d00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0036);
 4000d04:	00c00d84 	movi	r3,54
 4000d08:	00820034 	movhi	r2,2048
 4000d0c:	10842304 	addi	r2,r2,4236
 4000d10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000f);
 4000d14:	00c003c4 	movi	r3,15
 4000d18:	00820034 	movhi	r2,2048
 4000d1c:	10842304 	addi	r2,r2,4236
 4000d20:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002A);
 4000d24:	00c00a84 	movi	r3,42
 4000d28:	00820034 	movhi	r2,2048
 4000d2c:	10842204 	addi	r2,r2,4232
 4000d30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4000d34:	0007883a 	mov	r3,zero
 4000d38:	00820034 	movhi	r2,2048
 4000d3c:	10842304 	addi	r2,r2,4236
 4000d40:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4000d44:	0007883a 	mov	r3,zero
 4000d48:	00820034 	movhi	r2,2048
 4000d4c:	10842304 	addi	r2,r2,4236
 4000d50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4000d54:	0007883a 	mov	r3,zero
 4000d58:	00820034 	movhi	r2,2048
 4000d5c:	10842304 	addi	r2,r2,4236
 4000d60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00ef);
 4000d64:	00c03bc4 	movi	r3,239
 4000d68:	00820034 	movhi	r2,2048
 4000d6c:	10842304 	addi	r2,r2,4236
 4000d70:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x002B);
 4000d74:	00c00ac4 	movi	r3,43
 4000d78:	00820034 	movhi	r2,2048
 4000d7c:	10842204 	addi	r2,r2,4232
 4000d80:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4000d84:	0007883a 	mov	r3,zero
 4000d88:	00820034 	movhi	r2,2048
 4000d8c:	10842304 	addi	r2,r2,4236
 4000d90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4000d94:	0007883a 	mov	r3,zero
 4000d98:	00820034 	movhi	r2,2048
 4000d9c:	10842304 	addi	r2,r2,4236
 4000da0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 4000da4:	00c00044 	movi	r3,1
 4000da8:	00820034 	movhi	r2,2048
 4000dac:	10842304 	addi	r2,r2,4236
 4000db0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003f);
 4000db4:	00c00fc4 	movi	r3,63
 4000db8:	00820034 	movhi	r2,2048
 4000dbc:	10842304 	addi	r2,r2,4236
 4000dc0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x003A);
 4000dc4:	00c00e84 	movi	r3,58
 4000dc8:	00820034 	movhi	r2,2048
 4000dcc:	10842204 	addi	r2,r2,4232
 4000dd0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0055);
 4000dd4:	00c01544 	movi	r3,85
 4000dd8:	00820034 	movhi	r2,2048
 4000ddc:	10842304 	addi	r2,r2,4236
 4000de0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00f6);
 4000de4:	00c03d84 	movi	r3,246
 4000de8:	00820034 	movhi	r2,2048
 4000dec:	10842204 	addi	r2,r2,4232
 4000df0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 4000df4:	00c00044 	movi	r3,1
 4000df8:	00820034 	movhi	r2,2048
 4000dfc:	10842304 	addi	r2,r2,4236
 4000e00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0030);
 4000e04:	00c00c04 	movi	r3,48
 4000e08:	00820034 	movhi	r2,2048
 4000e0c:	10842304 	addi	r2,r2,4236
 4000e10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 4000e14:	0007883a 	mov	r3,zero
 4000e18:	00820034 	movhi	r2,2048
 4000e1c:	10842304 	addi	r2,r2,4236
 4000e20:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0029); //display on
 4000e24:	00c00a44 	movi	r3,41
 4000e28:	00820034 	movhi	r2,2048
 4000e2c:	10842204 	addi	r2,r2,4232
 4000e30:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002c);    // 0x2C
 4000e34:	00c00b04 	movi	r3,44
 4000e38:	00820034 	movhi	r2,2048
 4000e3c:	10842204 	addi	r2,r2,4232
 4000e40:	10c00035 	stwio	r3,0(r2)

}
 4000e44:	e037883a 	mov	sp,fp
 4000e48:	dfc00117 	ldw	ra,4(sp)
 4000e4c:	df000017 	ldw	fp,0(sp)
 4000e50:	dec00204 	addi	sp,sp,8
 4000e54:	f800283a 	ret

04000e58 <LCD_Pattern_Horizon>:


void LCD_Pattern_Horizon(void)
{
 4000e58:	defffc04 	addi	sp,sp,-16
 4000e5c:	dfc00315 	stw	ra,12(sp)
 4000e60:	df000215 	stw	fp,8(sp)
 4000e64:	df000204 	addi	fp,sp,8
        alt_u32 index=0;
 4000e68:	e03ffe15 	stw	zero,-8(fp)
        alt_u16  data=0;
 4000e6c:	e03fff0d 	sth	zero,-4(fp)
        LCD_SetCursor(0x00,0x0000);
 4000e70:	0009883a 	mov	r4,zero
 4000e74:	000b883a 	mov	r5,zero
 4000e78:	400064c0 	call	400064c <LCD_SetCursor>
        data=0x0000;
 4000e7c:	e03fff0d 	sth	zero,-4(fp)
        for(index=0;index<240*80;index++)
 4000e80:	e03ffe15 	stw	zero,-8(fp)
 4000e84:	00000706 	br	4000ea4 <LCD_Pattern_Horizon+0x4c>
        {
        	LCD_WR_DATA(data);
 4000e88:	e0ffff0b 	ldhu	r3,-4(fp)
 4000e8c:	00820034 	movhi	r2,2048
 4000e90:	10842304 	addi	r2,r2,4236
 4000e94:	10c00035 	stwio	r3,0(r2)
{
        alt_u32 index=0;
        alt_u16  data=0;
        LCD_SetCursor(0x00,0x0000);
        data=0x0000;
        for(index=0;index<240*80;index++)
 4000e98:	e0bffe17 	ldw	r2,-8(fp)
 4000e9c:	10800044 	addi	r2,r2,1
 4000ea0:	e0bffe15 	stw	r2,-8(fp)
 4000ea4:	e0bffe17 	ldw	r2,-8(fp)
 4000ea8:	1092c030 	cmpltui	r2,r2,19200
 4000eac:	103ff61e 	bne	r2,zero,4000e88 <LCD_Pattern_Horizon+0x30>
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
 4000eb0:	0009883a 	mov	r4,zero
 4000eb4:	01401404 	movi	r5,80
 4000eb8:	400064c0 	call	400064c <LCD_SetCursor>
        data=RED;
 4000ebc:	00be0004 	movi	r2,-2048
 4000ec0:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 4000ec4:	e03ffe15 	stw	zero,-8(fp)
 4000ec8:	00000706 	br	4000ee8 <LCD_Pattern_Horizon+0x90>
		{
			LCD_WR_DATA(data);
 4000ecc:	e0ffff0b 	ldhu	r3,-4(fp)
 4000ed0:	00820034 	movhi	r2,2048
 4000ed4:	10842304 	addi	r2,r2,4236
 4000ed8:	10c00035 	stwio	r3,0(r2)
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
        data=RED;
		for(index=0;index<240*80;index++)
 4000edc:	e0bffe17 	ldw	r2,-8(fp)
 4000ee0:	10800044 	addi	r2,r2,1
 4000ee4:	e0bffe15 	stw	r2,-8(fp)
 4000ee8:	e0bffe17 	ldw	r2,-8(fp)
 4000eec:	1092c030 	cmpltui	r2,r2,19200
 4000ef0:	103ff61e 	bne	r2,zero,4000ecc <LCD_Pattern_Horizon+0x74>
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
 4000ef4:	0009883a 	mov	r4,zero
 4000ef8:	01402804 	movi	r5,160
 4000efc:	400064c0 	call	400064c <LCD_SetCursor>
		data=GREEN;
 4000f00:	0081f804 	movi	r2,2016
 4000f04:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 4000f08:	e03ffe15 	stw	zero,-8(fp)
 4000f0c:	00000706 	br	4000f2c <LCD_Pattern_Horizon+0xd4>
		{
			LCD_WR_DATA(data);
 4000f10:	e0ffff0b 	ldhu	r3,-4(fp)
 4000f14:	00820034 	movhi	r2,2048
 4000f18:	10842304 	addi	r2,r2,4236
 4000f1c:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
		data=GREEN;
		for(index=0;index<240*80;index++)
 4000f20:	e0bffe17 	ldw	r2,-8(fp)
 4000f24:	10800044 	addi	r2,r2,1
 4000f28:	e0bffe15 	stw	r2,-8(fp)
 4000f2c:	e0bffe17 	ldw	r2,-8(fp)
 4000f30:	1092c030 	cmpltui	r2,r2,19200
 4000f34:	103ff61e 	bne	r2,zero,4000f10 <LCD_Pattern_Horizon+0xb8>
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
 4000f38:	0009883a 	mov	r4,zero
 4000f3c:	01403c04 	movi	r5,240
 4000f40:	400064c0 	call	400064c <LCD_SetCursor>
		data=BLUE;
 4000f44:	008007c4 	movi	r2,31
 4000f48:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 4000f4c:	e03ffe15 	stw	zero,-8(fp)
 4000f50:	00000706 	br	4000f70 <LCD_Pattern_Horizon+0x118>
		{
			LCD_WR_DATA(data);
 4000f54:	e0ffff0b 	ldhu	r3,-4(fp)
 4000f58:	00820034 	movhi	r2,2048
 4000f5c:	10842304 	addi	r2,r2,4236
 4000f60:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
		data=BLUE;
		for(index=0;index<240*80;index++)
 4000f64:	e0bffe17 	ldw	r2,-8(fp)
 4000f68:	10800044 	addi	r2,r2,1
 4000f6c:	e0bffe15 	stw	r2,-8(fp)
 4000f70:	e0bffe17 	ldw	r2,-8(fp)
 4000f74:	1092c030 	cmpltui	r2,r2,19200
 4000f78:	103ff61e 	bne	r2,zero,4000f54 <LCD_Pattern_Horizon+0xfc>
		{
			LCD_WR_DATA(data);
		}
}
 4000f7c:	e037883a 	mov	sp,fp
 4000f80:	dfc00117 	ldw	ra,4(sp)
 4000f84:	df000017 	ldw	fp,0(sp)
 4000f88:	dec00204 	addi	sp,sp,8
 4000f8c:	f800283a 	ret

04000f90 <LCD_Pattern_Vertical>:

void LCD_Pattern_Vertical(void)
{
 4000f90:	defff804 	addi	sp,sp,-32
 4000f94:	dfc00715 	stw	ra,28(sp)
 4000f98:	df000615 	stw	fp,24(sp)
 4000f9c:	df000604 	addi	fp,sp,24
        int i,j,m;
        alt_u16  data=0;
 4000fa0:	e03ffd0d 	sth	zero,-12(fp)
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
 4000fa4:	00bfffc4 	movi	r2,-1
 4000fa8:	e0bffd8d 	sth	r2,-10(fp)
 4000fac:	008007c4 	movi	r2,31
 4000fb0:	e0bffe0d 	sth	r2,-8(fp)
 4000fb4:	0081f804 	movi	r2,2016
 4000fb8:	e0bffe8d 	sth	r2,-6(fp)
 4000fbc:	00be0004 	movi	r2,-2048
 4000fc0:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(0x00,0x0000);
 4000fc4:	0009883a 	mov	r4,zero
 4000fc8:	000b883a 	mov	r5,zero
 4000fcc:	400064c0 	call	400064c <LCD_SetCursor>
        for(m=0;m<320;m++)
 4000fd0:	e03ffc15 	stw	zero,-16(fp)
 4000fd4:	00001e06 	br	4001050 <LCD_Pattern_Vertical+0xc0>
        {
			for(i=0;i<4;i++)
 4000fd8:	e03ffa15 	stw	zero,-24(fp)
 4000fdc:	00001606 	br	4001038 <LCD_Pattern_Vertical+0xa8>
			{
				data=color[i];
 4000fe0:	e0bffa17 	ldw	r2,-24(fp)
 4000fe4:	1085883a 	add	r2,r2,r2
 4000fe8:	e0fffa04 	addi	r3,fp,-24
 4000fec:	1885883a 	add	r2,r3,r2
 4000ff0:	10800384 	addi	r2,r2,14
 4000ff4:	1080000b 	ldhu	r2,0(r2)
 4000ff8:	e0bffd0d 	sth	r2,-12(fp)
				for(j=0;j<60;j++)
 4000ffc:	e03ffb15 	stw	zero,-20(fp)
 4001000:	00000706 	br	4001020 <LCD_Pattern_Vertical+0x90>
				{
					LCD_WR_DATA(data);
 4001004:	e0fffd0b 	ldhu	r3,-12(fp)
 4001008:	00820034 	movhi	r2,2048
 400100c:	10842304 	addi	r2,r2,4236
 4001010:	10c00035 	stwio	r3,0(r2)
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
			{
				data=color[i];
				for(j=0;j<60;j++)
 4001014:	e0bffb17 	ldw	r2,-20(fp)
 4001018:	10800044 	addi	r2,r2,1
 400101c:	e0bffb15 	stw	r2,-20(fp)
 4001020:	e0bffb17 	ldw	r2,-20(fp)
 4001024:	10800f10 	cmplti	r2,r2,60
 4001028:	103ff61e 	bne	r2,zero,4001004 <LCD_Pattern_Vertical+0x74>
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
 400102c:	e0bffa17 	ldw	r2,-24(fp)
 4001030:	10800044 	addi	r2,r2,1
 4001034:	e0bffa15 	stw	r2,-24(fp)
 4001038:	e0bffa17 	ldw	r2,-24(fp)
 400103c:	10800110 	cmplti	r2,r2,4
 4001040:	103fe71e 	bne	r2,zero,4000fe0 <LCD_Pattern_Vertical+0x50>
{
        int i,j,m;
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
 4001044:	e0bffc17 	ldw	r2,-16(fp)
 4001048:	10800044 	addi	r2,r2,1
 400104c:	e0bffc15 	stw	r2,-16(fp)
 4001050:	e0bffc17 	ldw	r2,-16(fp)
 4001054:	10805010 	cmplti	r2,r2,320
 4001058:	103fdf1e 	bne	r2,zero,4000fd8 <LCD_Pattern_Vertical+0x48>
				{
					LCD_WR_DATA(data);
				}
			}
        }
}
 400105c:	e037883a 	mov	sp,fp
 4001060:	dfc00117 	ldw	ra,4(sp)
 4001064:	df000017 	ldw	fp,0(sp)
 4001068:	dec00204 	addi	sp,sp,8
 400106c:	f800283a 	ret

04001070 <vid_clean_screen>:
#include "ILI9341.h"
#endif


// richard add
void vid_clean_screen(alt_video_display* display, int color){
 4001070:	defffa04 	addi	sp,sp,-24
 4001074:	dfc00515 	stw	ra,20(sp)
 4001078:	df000415 	stw	fp,16(sp)
 400107c:	df000404 	addi	fp,sp,16
 4001080:	e13ffe15 	stw	r4,-8(fp)
 4001084:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
 4001088:	e0bffe17 	ldw	r2,-8(fp)
 400108c:	10c00117 	ldw	r3,4(r2)
 4001090:	e0bffe17 	ldw	r2,-8(fp)
 4001094:	10800217 	ldw	r2,8(r2)
 4001098:	e13fff17 	ldw	r4,-4(fp)
 400109c:	d9000015 	stw	r4,0(sp)
 40010a0:	e13ffe17 	ldw	r4,-8(fp)
 40010a4:	d9000115 	stw	r4,4(sp)
 40010a8:	0009883a 	mov	r4,zero
 40010ac:	000b883a 	mov	r5,zero
 40010b0:	180d883a 	mov	r6,r3
 40010b4:	100f883a 	mov	r7,r2
 40010b8:	4001bec0 	call	4001bec <vid_paint_block>
}
 40010bc:	e037883a 	mov	sp,fp
 40010c0:	dfc00117 	ldw	ra,4(sp)
 40010c4:	df000017 	ldw	fp,0(sp)
 40010c8:	dec00204 	addi	sp,sp,8
 40010cc:	f800283a 	ret

040010d0 <vid_draw_line>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
 40010d0:	defff704 	addi	sp,sp,-36
 40010d4:	dfc00815 	stw	ra,32(sp)
 40010d8:	df000715 	stw	fp,28(sp)
 40010dc:	df000704 	addi	fp,sp,28
 40010e0:	e13ffc15 	stw	r4,-16(fp)
 40010e4:	e17ffd15 	stw	r5,-12(fp)
 40010e8:	e1bffe15 	stw	r6,-8(fp)
 40010ec:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
 40010f0:	e0fffd17 	ldw	r3,-12(fp)
 40010f4:	e0bfff17 	ldw	r2,-4(fp)
 40010f8:	1880111e 	bne	r3,r2,4001140 <vid_draw_line+0x70>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
 40010fc:	e0bffc17 	ldw	r2,-16(fp)
 4001100:	113fffcc 	andi	r4,r2,65535
 4001104:	2120001c 	xori	r4,r4,32768
 4001108:	21200004 	addi	r4,r4,-32768
 400110c:	e0bffe17 	ldw	r2,-8(fp)
 4001110:	10ffffcc 	andi	r3,r2,65535
 4001114:	18e0001c 	xori	r3,r3,32768
 4001118:	18e00004 	addi	r3,r3,-32768
                         (unsigned short)horiz_end, 
                         (unsigned short)vert_start,
 400111c:	e0bffd17 	ldw	r2,-12(fp)
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
 4001120:	10bfffcc 	andi	r2,r2,65535
 4001124:	e1400417 	ldw	r5,16(fp)
 4001128:	d9400015 	stw	r5,0(sp)
 400112c:	180b883a 	mov	r5,r3
 4001130:	100d883a 	mov	r6,r2
 4001134:	e1c00317 	ldw	r7,12(fp)
 4001138:	4001c800 	call	4001c80 <vid_draw_horiz_line>
 400113c:	00001206 	br	4001188 <vid_draw_line+0xb8>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 4001140:	e0bffc17 	ldw	r2,-16(fp)
 4001144:	113fffcc 	andi	r4,r2,65535
                          (unsigned short)vert_start, 
 4001148:	e0bffd17 	ldw	r2,-12(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 400114c:	117fffcc 	andi	r5,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
 4001150:	e0bffe17 	ldw	r2,-8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 4001154:	10ffffcc 	andi	r3,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
 4001158:	e0bfff17 	ldw	r2,-4(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 400115c:	10bfffcc 	andi	r2,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
 4001160:	e1800217 	ldw	r6,8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 4001164:	31bfffcc 	andi	r6,r6,65535
 4001168:	d9800015 	stw	r6,0(sp)
 400116c:	e1800317 	ldw	r6,12(fp)
 4001170:	d9800115 	stw	r6,4(sp)
 4001174:	e1800417 	ldw	r6,16(fp)
 4001178:	d9800215 	stw	r6,8(sp)
 400117c:	180d883a 	mov	r6,r3
 4001180:	100f883a 	mov	r7,r2
 4001184:	4001e900 	call	4001e90 <vid_draw_sloped_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
 4001188:	e037883a 	mov	sp,fp
 400118c:	dfc00117 	ldw	ra,4(sp)
 4001190:	df000017 	ldw	fp,0(sp)
 4001194:	dec00204 	addi	sp,sp,8
 4001198:	f800283a 	ret

0400119c <vid_scroll_string_quit>:



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
 400119c:	defffd04 	addi	sp,sp,-12
 40011a0:	dfc00215 	stw	ra,8(sp)
 40011a4:	df000115 	stw	fp,4(sp)
 40011a8:	df000104 	addi	fp,sp,4
 40011ac:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
 40011b0:	e0bfff17 	ldw	r2,-4(fp)
 40011b4:	10800517 	ldw	r2,20(r2)
 40011b8:	1009883a 	mov	r4,r2
 40011bc:	40088ec0 	call	40088ec <free>
  free(scroll);
 40011c0:	e13fff17 	ldw	r4,-4(fp)
 40011c4:	40088ec0 	call	40088ec <free>
}
 40011c8:	e037883a 	mov	sp,fp
 40011cc:	dfc00117 	ldw	ra,4(sp)
 40011d0:	df000017 	ldw	fp,0(sp)
 40011d4:	dec00204 	addi	sp,sp,8
 40011d8:	f800283a 	ret

040011dc <vid_scroll_string_init>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
 40011dc:	defff904 	addi	sp,sp,-28
 40011e0:	dfc00615 	stw	ra,24(sp)
 40011e4:	df000515 	stw	fp,20(sp)
 40011e8:	df000504 	addi	fp,sp,20
 40011ec:	e13ffc15 	stw	r4,-16(fp)
 40011f0:	e17ffd15 	stw	r5,-12(fp)
 40011f4:	e1bffe15 	stw	r6,-8(fp)
 40011f8:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = malloc(sizeof (vid_text_scroll_struct));
 40011fc:	01000f04 	movi	r4,60
 4001200:	40088d80 	call	40088d8 <malloc>
 4001204:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
 4001208:	e0bffb17 	ldw	r2,-20(fp)
 400120c:	e0fffc17 	ldw	r3,-16(fp)
 4001210:	10c00015 	stw	r3,0(r2)
  scroll->vbegin = vbegin;
 4001214:	e0bffb17 	ldw	r2,-20(fp)
 4001218:	e0fffd17 	ldw	r3,-12(fp)
 400121c:	10c00115 	stw	r3,4(r2)
  scroll->hend = hend;
 4001220:	e0bffb17 	ldw	r2,-20(fp)
 4001224:	e0fffe17 	ldw	r3,-8(fp)
 4001228:	10c00215 	stw	r3,8(r2)
  scroll->f_color = f_color;
 400122c:	e0bffb17 	ldw	r2,-20(fp)
 4001230:	e0ffff17 	ldw	r3,-4(fp)
 4001234:	10c00315 	stw	r3,12(r2)
  scroll->b_color = b_color;
 4001238:	e0bffb17 	ldw	r2,-20(fp)
 400123c:	e0c00217 	ldw	r3,8(fp)
 4001240:	10c00415 	stw	r3,16(r2)
  scroll->string = malloc(strlen(string)+2);
 4001244:	e1000517 	ldw	r4,20(fp)
 4001248:	40095140 	call	4009514 <strlen>
 400124c:	10800084 	addi	r2,r2,2
 4001250:	1009883a 	mov	r4,r2
 4001254:	40088d80 	call	40088d8 <malloc>
 4001258:	1007883a 	mov	r3,r2
 400125c:	e0bffb17 	ldw	r2,-20(fp)
 4001260:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
 4001264:	e0bffb17 	ldw	r2,-20(fp)
 4001268:	10800517 	ldw	r2,20(r2)
 400126c:	1009883a 	mov	r4,r2
 4001270:	e1400517 	ldw	r5,20(fp)
 4001274:	40094800 	call	4009480 <strcpy>
  scroll->font = font;
 4001278:	e0bffb17 	ldw	r2,-20(fp)
 400127c:	e0c00317 	ldw	r3,12(fp)
 4001280:	10c00615 	stw	r3,24(r2)
  scroll->ms_delay = ms_delay;
 4001284:	e0bffb17 	ldw	r2,-20(fp)
 4001288:	e0c00417 	ldw	r3,16(fp)
 400128c:	10c00715 	stw	r3,28(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4001290:	008100f4 	movhi	r2,1027
 4001294:	1091ee04 	addi	r2,r2,18360
 4001298:	10800017 	ldw	r2,0(r2)
  scroll->ticks_at_last_move = alt_nticks();
 400129c:	1007883a 	mov	r3,r2
 40012a0:	e0bffb17 	ldw	r2,-20(fp)
 40012a4:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
 40012a8:	e0bffb17 	ldw	r2,-20(fp)
 40012ac:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
 40012b0:	e0bffb17 	ldw	r2,-20(fp)
 40012b4:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
 40012b8:	e0bffb17 	ldw	r2,-20(fp)
 40012bc:	10c00217 	ldw	r3,8(r2)
 40012c0:	e0bffb17 	ldw	r2,-20(fp)
 40012c4:	10800017 	ldw	r2,0(r2)
 40012c8:	1887c83a 	sub	r3,r3,r2
 40012cc:	e0bffb17 	ldw	r2,-20(fp)
 40012d0:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
 40012d4:	e1000517 	ldw	r4,20(fp)
 40012d8:	40095140 	call	4009514 <strlen>
 40012dc:	1007883a 	mov	r3,r2
 40012e0:	e0bffb17 	ldw	r2,-20(fp)
 40012e4:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
 40012e8:	e0bffb17 	ldw	r2,-20(fp)
 40012ec:	10800c17 	ldw	r2,48(r2)
 40012f0:	100690fa 	slli	r3,r2,3
 40012f4:	e0bffb17 	ldw	r2,-20(fp)
 40012f8:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
 40012fc:	e0bffb17 	ldw	r2,-20(fp)
 4001300:	10c00b17 	ldw	r3,44(r2)
 4001304:	e0bffb17 	ldw	r2,-20(fp)
 4001308:	10800e17 	ldw	r2,56(r2)
 400130c:	1887883a 	add	r3,r3,r2
 4001310:	e0bffb17 	ldw	r2,-20(fp)
 4001314:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
 4001318:	e0bffb17 	ldw	r2,-20(fp)
  
}
 400131c:	e037883a 	mov	sp,fp
 4001320:	dfc00117 	ldw	ra,4(sp)
 4001324:	df000017 	ldw	fp,0(sp)
 4001328:	dec00204 	addi	sp,sp,8
 400132c:	f800283a 	ret

04001330 <vid_scroll_string>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
 4001330:	deffec04 	addi	sp,sp,-80
 4001334:	dfc01315 	stw	ra,76(sp)
 4001338:	df001215 	stw	fp,72(sp)
 400133c:	dc401115 	stw	r17,68(sp)
 4001340:	dc001015 	stw	r16,64(sp)
 4001344:	df001004 	addi	fp,sp,64
 4001348:	e13ffe15 	stw	r4,-8(fp)
 400134c:	e17fff15 	stw	r5,-4(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
 4001350:	00800044 	movi	r2,1
 4001354:	e0bff805 	stb	r2,-32(fp)
 4001358:	008100f4 	movhi	r2,1027
 400135c:	1091ee04 	addi	r2,r2,18360
 4001360:	10800017 	ldw	r2,0(r2)

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
 4001364:	1021883a 	mov	r16,r2
 4001368:	e0bffe17 	ldw	r2,-8(fp)
 400136c:	10800817 	ldw	r2,32(r2)
 4001370:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4001374:	008100f4 	movhi	r2,1027
 4001378:	1091ed04 	addi	r2,r2,18356
 400137c:	10800017 	ldw	r2,0(r2)
 4001380:	1007883a 	mov	r3,r2
 4001384:	e0bffe17 	ldw	r2,-8(fp)
 4001388:	10800717 	ldw	r2,28(r2)
 400138c:	1885383a 	mul	r2,r3,r2
 4001390:	1009883a 	mov	r4,r2
 4001394:	0140fa04 	movi	r5,1000
 4001398:	400832c0 	call	400832c <__udivsi3>
 400139c:	8885883a 	add	r2,r17,r2
 40013a0:	8080bb36 	bltu	r16,r2,4001690 <vid_scroll_string+0x360>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40013a4:	008100f4 	movhi	r2,1027
 40013a8:	1091ee04 	addi	r2,r2,18360
 40013ac:	10800017 	ldw	r2,0(r2)
    scroll->ticks_at_last_move = alt_nticks();
 40013b0:	1007883a 	mov	r3,r2
 40013b4:	e0bffe17 	ldw	r2,-8(fp)
 40013b8:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
 40013bc:	e0bffe17 	ldw	r2,-8(fp)
 40013c0:	10800a03 	ldbu	r2,40(r2)
 40013c4:	10803fcc 	andi	r2,r2,255
 40013c8:	1080201c 	xori	r2,r2,128
 40013cc:	10bfe004 	addi	r2,r2,-128
 40013d0:	1000061e 	bne	r2,zero,40013ec <vid_scroll_string+0xbc>
      scroll->text_scroll_index = 0;
 40013d4:	e0bffe17 	ldw	r2,-8(fp)
 40013d8:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
 40013dc:	e0bffe17 	ldw	r2,-8(fp)
 40013e0:	00c00044 	movi	r3,1
 40013e4:	10c00a05 	stb	r3,40(r2)
 40013e8:	00000e06 	br	4001424 <vid_scroll_string+0xf4>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
 40013ec:	e0bffe17 	ldw	r2,-8(fp)
 40013f0:	10c00917 	ldw	r3,36(r2)
 40013f4:	e0bffe17 	ldw	r2,-8(fp)
 40013f8:	10800d17 	ldw	r2,52(r2)
 40013fc:	18800316 	blt	r3,r2,400140c <vid_scroll_string+0xdc>
      scroll->text_scroll_started = 0;
 4001400:	e0bffe17 	ldw	r2,-8(fp)
 4001404:	10000a05 	stb	zero,40(r2)
 4001408:	00000606 	br	4001424 <vid_scroll_string+0xf4>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
 400140c:	e0bffe17 	ldw	r2,-8(fp)
 4001410:	10c00917 	ldw	r3,36(r2)
 4001414:	e0bff807 	ldb	r2,-32(fp)
 4001418:	1887883a 	add	r3,r3,r2
 400141c:	e0bffe17 	ldw	r2,-8(fp)
 4001420:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
 4001424:	e0bffe17 	ldw	r2,-8(fp)
 4001428:	10c00917 	ldw	r3,36(r2)
 400142c:	e0bffe17 	ldw	r2,-8(fp)
 4001430:	10800b17 	ldw	r2,44(r2)
 4001434:	18800a0e 	bge	r3,r2,4001460 <vid_scroll_string+0x130>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
 4001438:	e0bffe17 	ldw	r2,-8(fp)
 400143c:	10c00017 	ldw	r3,0(r2)
 4001440:	e0bffe17 	ldw	r2,-8(fp)
 4001444:	10800b17 	ldw	r2,44(r2)
 4001448:	1887883a 	add	r3,r3,r2
 400144c:	e0bffe17 	ldw	r2,-8(fp)
 4001450:	10800917 	ldw	r2,36(r2)
 4001454:	1885c83a 	sub	r2,r3,r2
 4001458:	e0bff315 	stw	r2,-52(fp)
 400145c:	00000306 	br	400146c <vid_scroll_string+0x13c>
    } else {
      x_start = scroll->hbegin;
 4001460:	e0bffe17 	ldw	r2,-8(fp)
 4001464:	10800017 	ldw	r2,0(r2)
 4001468:	e0bff315 	stw	r2,-52(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
 400146c:	e0bffe17 	ldw	r2,-8(fp)
 4001470:	10800e17 	ldw	r2,56(r2)
 4001474:	e0fffe17 	ldw	r3,-8(fp)
 4001478:	18c00917 	ldw	r3,36(r3)
 400147c:	1880040e 	bge	r3,r2,4001490 <vid_scroll_string+0x160>
      x_end = scroll->hend;
 4001480:	e0bffe17 	ldw	r2,-8(fp)
 4001484:	10800217 	ldw	r2,8(r2)
 4001488:	e0bff415 	stw	r2,-48(fp)
 400148c:	00000906 	br	40014b4 <vid_scroll_string+0x184>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
 4001490:	e0bffe17 	ldw	r2,-8(fp)
 4001494:	10c00217 	ldw	r3,8(r2)
 4001498:	e0bffe17 	ldw	r2,-8(fp)
 400149c:	10800917 	ldw	r2,36(r2)
 40014a0:	1887c83a 	sub	r3,r3,r2
 40014a4:	e0bffe17 	ldw	r2,-8(fp)
 40014a8:	10800e17 	ldw	r2,56(r2)
 40014ac:	1885883a 	add	r2,r3,r2
 40014b0:	e0bff415 	stw	r2,-48(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 40014b4:	e0bff317 	ldw	r2,-52(fp)
 40014b8:	e0bff515 	stw	r2,-44(fp)
 40014bc:	00006006 	br	4001640 <vid_scroll_string+0x310>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
 40014c0:	e0bffe17 	ldw	r2,-8(fp)
 40014c4:	10c00917 	ldw	r3,36(r2)
 40014c8:	e0bffe17 	ldw	r2,-8(fp)
 40014cc:	10800b17 	ldw	r2,44(r2)
 40014d0:	1880050e 	bge	r3,r2,40014e8 <vid_scroll_string+0x1b8>
        string_x_index = (x_index - x_start);
 40014d4:	e0fff517 	ldw	r3,-44(fp)
 40014d8:	e0bff317 	ldw	r2,-52(fp)
 40014dc:	1885c83a 	sub	r2,r3,r2
 40014e0:	e0bff615 	stw	r2,-40(fp)
 40014e4:	00000a06 	br	4001510 <vid_scroll_string+0x1e0>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
 40014e8:	e0bffe17 	ldw	r2,-8(fp)
 40014ec:	10c00917 	ldw	r3,36(r2)
 40014f0:	e0bffe17 	ldw	r2,-8(fp)
 40014f4:	10800b17 	ldw	r2,44(r2)
 40014f8:	1887c83a 	sub	r3,r3,r2
 40014fc:	e0bff517 	ldw	r2,-44(fp)
 4001500:	1887883a 	add	r3,r3,r2
 4001504:	e0bff317 	ldw	r2,-52(fp)
 4001508:	1885c83a 	sub	r2,r3,r2
 400150c:	e0bff615 	stw	r2,-40(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
 4001510:	e0bff617 	ldw	r2,-40(fp)
 4001514:	1000010e 	bge	r2,zero,400151c <vid_scroll_string+0x1ec>
 4001518:	108001c4 	addi	r2,r2,7
 400151c:	1005d0fa 	srai	r2,r2,3
 4001520:	e0bff915 	stw	r2,-28(fp)
      character = scroll->string[string_char_index];
 4001524:	e0bffe17 	ldw	r2,-8(fp)
 4001528:	10c00517 	ldw	r3,20(r2)
 400152c:	e0bff917 	ldw	r2,-28(fp)
 4001530:	1885883a 	add	r2,r3,r2
 4001534:	10800003 	ldbu	r2,0(r2)
 4001538:	e0bffa05 	stb	r2,-24(fp)
      char_column = (string_x_index % 8);
 400153c:	e0fff617 	ldw	r3,-40(fp)
 4001540:	00a00034 	movhi	r2,32768
 4001544:	108001c4 	addi	r2,r2,7
 4001548:	1884703a 	and	r2,r3,r2
 400154c:	1000040e 	bge	r2,zero,4001560 <vid_scroll_string+0x230>
 4001550:	10bfffc4 	addi	r2,r2,-1
 4001554:	00fffe04 	movi	r3,-8
 4001558:	10c4b03a 	or	r2,r2,r3
 400155c:	10800044 	addi	r2,r2,1
 4001560:	e0bffb15 	stw	r2,-20(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
 4001564:	00c02004 	movi	r3,128
 4001568:	e0bffb17 	ldw	r2,-20(fp)
 400156c:	1884d83a 	srl	r2,r3,r2
 4001570:	e0bffc05 	stb	r2,-16(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
 4001574:	e0bffe17 	ldw	r2,-8(fp)
 4001578:	10c00617 	ldw	r3,24(r2)
 400157c:	e0bffa07 	ldb	r2,-24(fp)
 4001580:	108002e4 	muli	r2,r2,11
 4001584:	10bfa804 	addi	r2,r2,-352
 4001588:	1885883a 	add	r2,r3,r2
 400158c:	e0bffd15 	stw	r2,-12(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 4001590:	e03ff715 	stw	zero,-36(fp)
 4001594:	00002406 	br	4001628 <vid_scroll_string+0x2f8>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
 4001598:	e0bff717 	ldw	r2,-36(fp)
 400159c:	e0fffd17 	ldw	r3,-12(fp)
 40015a0:	1885883a 	add	r2,r3,r2
 40015a4:	10c00003 	ldbu	r3,0(r2)
 40015a8:	e0bffc03 	ldbu	r2,-16(fp)
 40015ac:	1884703a 	and	r2,r3,r2
 40015b0:	10803fcc 	andi	r2,r2,255
 40015b4:	1080201c 	xori	r2,r2,128
 40015b8:	10bfe004 	addi	r2,r2,-128
 40015bc:	10000c26 	beq	r2,zero,40015f0 <vid_scroll_string+0x2c0>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
 40015c0:	e0bffe17 	ldw	r2,-8(fp)
 40015c4:	10c00117 	ldw	r3,4(r2)
 40015c8:	e0bff717 	ldw	r2,-36(fp)
 40015cc:	1887883a 	add	r3,r3,r2
 40015d0:	e0bffe17 	ldw	r2,-8(fp)
 40015d4:	10800317 	ldw	r2,12(r2)
 40015d8:	e13ff517 	ldw	r4,-44(fp)
 40015dc:	180b883a 	mov	r5,r3
 40015e0:	100d883a 	mov	r6,r2
 40015e4:	e1ffff17 	ldw	r7,-4(fp)
 40015e8:	4001b140 	call	4001b14 <vid_set_pixel>
 40015ec:	00000b06 	br	400161c <vid_scroll_string+0x2ec>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
 40015f0:	e0bffe17 	ldw	r2,-8(fp)
 40015f4:	10c00117 	ldw	r3,4(r2)
 40015f8:	e0bff717 	ldw	r2,-36(fp)
 40015fc:	1887883a 	add	r3,r3,r2
 4001600:	e0bffe17 	ldw	r2,-8(fp)
 4001604:	10800417 	ldw	r2,16(r2)
 4001608:	e13ff517 	ldw	r4,-44(fp)
 400160c:	180b883a 	mov	r5,r3
 4001610:	100d883a 	mov	r6,r2
 4001614:	e1ffff17 	ldw	r7,-4(fp)
 4001618:	4001b140 	call	4001b14 <vid_set_pixel>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 400161c:	e0bff717 	ldw	r2,-36(fp)
 4001620:	10800044 	addi	r2,r2,1
 4001624:	e0bff715 	stw	r2,-36(fp)
 4001628:	e0bff717 	ldw	r2,-36(fp)
 400162c:	108002d0 	cmplti	r2,r2,11
 4001630:	103fd91e 	bne	r2,zero,4001598 <vid_scroll_string+0x268>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 4001634:	e0bff517 	ldw	r2,-44(fp)
 4001638:	10800044 	addi	r2,r2,1
 400163c:	e0bff515 	stw	r2,-44(fp)
 4001640:	e0fff517 	ldw	r3,-44(fp)
 4001644:	e0bff417 	ldw	r2,-48(fp)
 4001648:	18bf9d16 	blt	r3,r2,40014c0 <vid_scroll_string+0x190>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
 400164c:	e0bffe17 	ldw	r2,-8(fp)
 4001650:	10c00117 	ldw	r3,4(r2)
 4001654:	e0bffe17 	ldw	r2,-8(fp)
 4001658:	10800117 	ldw	r2,4(r2)
 400165c:	10800284 	addi	r2,r2,10
 4001660:	e13ffe17 	ldw	r4,-8(fp)
 4001664:	21000417 	ldw	r4,16(r4)
 4001668:	01400044 	movi	r5,1
 400166c:	d9400015 	stw	r5,0(sp)
 4001670:	d9000115 	stw	r4,4(sp)
 4001674:	e13fff17 	ldw	r4,-4(fp)
 4001678:	d9000215 	stw	r4,8(sp)
 400167c:	e13ff417 	ldw	r4,-48(fp)
 4001680:	180b883a 	mov	r5,r3
 4001684:	e1bff417 	ldw	r6,-48(fp)
 4001688:	100f883a 	mov	r7,r2
 400168c:	40010d00 	call	40010d0 <vid_draw_line>
    // Log what time we moved the scroll.
  }
  return(0);
 4001690:	0005883a 	mov	r2,zero
}
 4001694:	e037883a 	mov	sp,fp
 4001698:	dfc00317 	ldw	ra,12(sp)
 400169c:	df000217 	ldw	fp,8(sp)
 40016a0:	dc400117 	ldw	r17,4(sp)
 40016a4:	dc000017 	ldw	r16,0(sp)
 40016a8:	dec00404 	addi	sp,sp,16
 40016ac:	f800283a 	ret

040016b0 <vid_move_block>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
 40016b0:	defff504 	addi	sp,sp,-44
 40016b4:	dfc00a15 	stw	ra,40(sp)
 40016b8:	df000915 	stw	fp,36(sp)
 40016bc:	df000904 	addi	fp,sp,36
 40016c0:	e13ffc15 	stw	r4,-16(fp)
 40016c4:	e17ffd15 	stw	r5,-12(fp)
 40016c8:	e1bffe15 	stw	r6,-8(fp)
 40016cc:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
 40016d0:	e0800217 	ldw	r2,8(fp)
 40016d4:	00803716 	blt	zero,r2,40017b4 <vid_move_block+0x104>
 40016d8:	e0800317 	ldw	r2,12(fp)
 40016dc:	00803516 	blt	zero,r2,40017b4 <vid_move_block+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 40016e0:	e0bffd17 	ldw	r2,-12(fp)
 40016e4:	e0bff815 	stw	r2,-32(fp)
 40016e8:	00002f06 	br	40017a8 <vid_move_block+0xf8>
      write_y = read_y + y_distance;
 40016ec:	e0fff817 	ldw	r3,-32(fp)
 40016f0:	e0800317 	ldw	r2,12(fp)
 40016f4:	1885883a 	add	r2,r3,r2
 40016f8:	e0bff915 	stw	r2,-28(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
 40016fc:	e0bffc17 	ldw	r2,-16(fp)
 4001700:	e0bff715 	stw	r2,-36(fp)
 4001704:	00002206 	br	4001790 <vid_move_block+0xe0>
        write_x = read_x + x_distance;
 4001708:	e0fff717 	ldw	r3,-36(fp)
 400170c:	e0800217 	ldw	r2,8(fp)
 4001710:	1885883a 	add	r2,r3,r2
 4001714:	e0bffa15 	stw	r2,-24(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
 4001718:	e13ff717 	ldw	r4,-36(fp)
 400171c:	e17ff817 	ldw	r5,-32(fp)
 4001720:	e1800517 	ldw	r6,20(fp)
 4001724:	4001bb00 	call	4001bb0 <vid_get_pixel>
 4001728:	e0bffb0d 	sth	r2,-20(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
 400172c:	e0bffb0f 	ldh	r2,-20(fp)
 4001730:	e13ffa17 	ldw	r4,-24(fp)
 4001734:	e17ff917 	ldw	r5,-28(fp)
 4001738:	100d883a 	mov	r6,r2
 400173c:	e1c00517 	ldw	r7,20(fp)
 4001740:	4001b140 	call	4001b14 <vid_set_pixel>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
 4001744:	e0fffe17 	ldw	r3,-8(fp)
 4001748:	e0800217 	ldw	r2,8(fp)
 400174c:	1885883a 	add	r2,r3,r2
 4001750:	e0fff717 	ldw	r3,-36(fp)
 4001754:	1880050e 	bge	r3,r2,400176c <vid_move_block+0xbc>
 4001758:	e0ffff17 	ldw	r3,-4(fp)
 400175c:	e0800317 	ldw	r2,12(fp)
 4001760:	1885883a 	add	r2,r3,r2
 4001764:	e0fff817 	ldw	r3,-32(fp)
 4001768:	18800616 	blt	r3,r2,4001784 <vid_move_block+0xd4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
 400176c:	e0800417 	ldw	r2,16(fp)
 4001770:	e13ff717 	ldw	r4,-36(fp)
 4001774:	e17ff817 	ldw	r5,-32(fp)
 4001778:	100d883a 	mov	r6,r2
 400177c:	e1c00517 	ldw	r7,20(fp)
 4001780:	4001b140 	call	4001b14 <vid_set_pixel>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
 4001784:	e0bff717 	ldw	r2,-36(fp)
 4001788:	10800044 	addi	r2,r2,1
 400178c:	e0bff715 	stw	r2,-36(fp)
 4001790:	e0fff717 	ldw	r3,-36(fp)
 4001794:	e0bffe17 	ldw	r2,-8(fp)
 4001798:	18bfdb16 	blt	r3,r2,4001708 <vid_move_block+0x58>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 400179c:	e0bff817 	ldw	r2,-32(fp)
 40017a0:	10800044 	addi	r2,r2,1
 40017a4:	e0bff815 	stw	r2,-32(fp)
 40017a8:	e0fff817 	ldw	r3,-32(fp)
 40017ac:	e0bfff17 	ldw	r2,-4(fp)
 40017b0:	18bfce16 	blt	r3,r2,40016ec <vid_move_block+0x3c>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
 40017b4:	0005883a 	mov	r2,zero
}
 40017b8:	e037883a 	mov	sp,fp
 40017bc:	dfc00117 	ldw	ra,4(sp)
 40017c0:	df000017 	ldw	fp,0(sp)
 40017c4:	dec00204 	addi	sp,sp,8
 40017c8:	f800283a 	ret

040017cc <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
 40017cc:	defff604 	addi	sp,sp,-40
 40017d0:	dfc00915 	stw	ra,36(sp)
 40017d4:	df000815 	stw	fp,32(sp)
 40017d8:	df000804 	addi	fp,sp,32
 40017dc:	e13ffc15 	stw	r4,-16(fp)
 40017e0:	e17ffd15 	stw	r5,-12(fp)
 40017e4:	e1bffe15 	stw	r6,-8(fp)
 40017e8:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 40017ec:	e03ffa15 	stw	zero,-24(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 40017f0:	e0bffc17 	ldw	r2,-16(fp)
 40017f4:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 40017f8:	00002806 	br	400189c <vid_print_string+0xd0>
    //Handle newline char here.
    if (string[i] == '\n') {
 40017fc:	e0bffa17 	ldw	r2,-24(fp)
 4001800:	e0c00317 	ldw	r3,12(fp)
 4001804:	1885883a 	add	r2,r3,r2
 4001808:	10800003 	ldbu	r2,0(r2)
 400180c:	10803fcc 	andi	r2,r2,255
 4001810:	1080201c 	xori	r2,r2,128
 4001814:	10bfe004 	addi	r2,r2,-128
 4001818:	10800298 	cmpnei	r2,r2,10
 400181c:	1000091e 	bne	r2,zero,4001844 <vid_print_string+0x78>
      horiz_offset = original_horiz_offset;
 4001820:	e0bffb17 	ldw	r2,-20(fp)
 4001824:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
 4001828:	e0bffd17 	ldw	r2,-12(fp)
 400182c:	10800304 	addi	r2,r2,12
 4001830:	e0bffd15 	stw	r2,-12(fp)
      i++;
 4001834:	e0bffa17 	ldw	r2,-24(fp)
 4001838:	10800044 	addi	r2,r2,1
 400183c:	e0bffa15 	stw	r2,-24(fp)
      continue;
 4001840:	00001606 	br	400189c <vid_print_string+0xd0>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
 4001844:	e0bffa17 	ldw	r2,-24(fp)
 4001848:	e0c00317 	ldw	r3,12(fp)
 400184c:	1885883a 	add	r2,r3,r2
 4001850:	10800003 	ldbu	r2,0(r2)
 4001854:	10803fcc 	andi	r2,r2,255
 4001858:	1080201c 	xori	r2,r2,128
 400185c:	10bfe004 	addi	r2,r2,-128
 4001860:	e0ffff17 	ldw	r3,-4(fp)
 4001864:	d8c00015 	stw	r3,0(sp)
 4001868:	e0c00217 	ldw	r3,8(fp)
 400186c:	d8c00115 	stw	r3,4(sp)
 4001870:	e13ffc17 	ldw	r4,-16(fp)
 4001874:	e17ffd17 	ldw	r5,-12(fp)
 4001878:	e1bffe17 	ldw	r6,-8(fp)
 400187c:	100f883a 	mov	r7,r2
 4001880:	4001a240 	call	4001a24 <vid_print_char>
    i++;
 4001884:	e0bffa17 	ldw	r2,-24(fp)
 4001888:	10800044 	addi	r2,r2,1
 400188c:	e0bffa15 	stw	r2,-24(fp)
    horiz_offset += 8;
 4001890:	e0bffc17 	ldw	r2,-16(fp)
 4001894:	10800204 	addi	r2,r2,8
 4001898:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 400189c:	e0bffa17 	ldw	r2,-24(fp)
 40018a0:	e0c00317 	ldw	r3,12(fp)
 40018a4:	1885883a 	add	r2,r3,r2
 40018a8:	10800003 	ldbu	r2,0(r2)
 40018ac:	10803fcc 	andi	r2,r2,255
 40018b0:	1080201c 	xori	r2,r2,128
 40018b4:	10bfe004 	addi	r2,r2,-128
 40018b8:	103fd01e 	bne	r2,zero,40017fc <vid_print_string+0x30>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
 40018bc:	0005883a 	mov	r2,zero
}
 40018c0:	e037883a 	mov	sp,fp
 40018c4:	dfc00117 	ldw	ra,4(sp)
 40018c8:	df000017 	ldw	fp,0(sp)
 40018cc:	dec00204 	addi	sp,sp,8
 40018d0:	f800283a 	ret

040018d4 <vid_draw_box>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
 40018d4:	defff704 	addi	sp,sp,-36
 40018d8:	dfc00815 	stw	ra,32(sp)
 40018dc:	df000715 	stw	fp,28(sp)
 40018e0:	df000704 	addi	fp,sp,28
 40018e4:	e13ffc15 	stw	r4,-16(fp)
 40018e8:	e17ffd15 	stw	r5,-12(fp)
 40018ec:	e1bffe15 	stw	r6,-8(fp)
 40018f0:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
 40018f4:	e0800317 	ldw	r2,12(fp)
 40018f8:	10000a26 	beq	r2,zero,4001924 <vid_draw_box+0x50>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
 40018fc:	e0800217 	ldw	r2,8(fp)
 4001900:	d8800015 	stw	r2,0(sp)
 4001904:	e0800417 	ldw	r2,16(fp)
 4001908:	d8800115 	stw	r2,4(sp)
 400190c:	e13ffc17 	ldw	r4,-16(fp)
 4001910:	e17ffd17 	ldw	r5,-12(fp)
 4001914:	e1bffe17 	ldw	r6,-8(fp)
 4001918:	e1ffff17 	ldw	r7,-4(fp)
 400191c:	4001bec0 	call	4001bec <vid_paint_block>
 4001920:	00003a06 	br	4001a0c <vid_draw_box+0x138>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
 4001924:	e0bfff17 	ldw	r2,-4(fp)
 4001928:	10bfffc4 	addi	r2,r2,-1
 400192c:	00c00044 	movi	r3,1
 4001930:	d8c00015 	stw	r3,0(sp)
 4001934:	e0c00217 	ldw	r3,8(fp)
 4001938:	d8c00115 	stw	r3,4(sp)
 400193c:	e0c00417 	ldw	r3,16(fp)
 4001940:	d8c00215 	stw	r3,8(sp)
 4001944:	e13ffc17 	ldw	r4,-16(fp)
 4001948:	e17ffd17 	ldw	r5,-12(fp)
 400194c:	e1bffc17 	ldw	r6,-16(fp)
 4001950:	100f883a 	mov	r7,r2
 4001954:	40010d00 	call	40010d0 <vid_draw_line>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
 4001958:	e0bffe17 	ldw	r2,-8(fp)
 400195c:	113fffc4 	addi	r4,r2,-1
 4001960:	e0bffe17 	ldw	r2,-8(fp)
 4001964:	10ffffc4 	addi	r3,r2,-1
 4001968:	e0bfff17 	ldw	r2,-4(fp)
 400196c:	10bfffc4 	addi	r2,r2,-1
 4001970:	01400044 	movi	r5,1
 4001974:	d9400015 	stw	r5,0(sp)
 4001978:	e1400217 	ldw	r5,8(fp)
 400197c:	d9400115 	stw	r5,4(sp)
 4001980:	e1400417 	ldw	r5,16(fp)
 4001984:	d9400215 	stw	r5,8(sp)
 4001988:	e17ffd17 	ldw	r5,-12(fp)
 400198c:	180d883a 	mov	r6,r3
 4001990:	100f883a 	mov	r7,r2
 4001994:	40010d00 	call	40010d0 <vid_draw_line>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
 4001998:	e0bffe17 	ldw	r2,-8(fp)
 400199c:	10bfffc4 	addi	r2,r2,-1
 40019a0:	00c00044 	movi	r3,1
 40019a4:	d8c00015 	stw	r3,0(sp)
 40019a8:	e0c00217 	ldw	r3,8(fp)
 40019ac:	d8c00115 	stw	r3,4(sp)
 40019b0:	e0c00417 	ldw	r3,16(fp)
 40019b4:	d8c00215 	stw	r3,8(sp)
 40019b8:	e13ffc17 	ldw	r4,-16(fp)
 40019bc:	e17ffd17 	ldw	r5,-12(fp)
 40019c0:	100d883a 	mov	r6,r2
 40019c4:	e1fffd17 	ldw	r7,-12(fp)
 40019c8:	40010d00 	call	40010d0 <vid_draw_line>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
 40019cc:	e0bfff17 	ldw	r2,-4(fp)
 40019d0:	117fffc4 	addi	r5,r2,-1
 40019d4:	e0bffe17 	ldw	r2,-8(fp)
 40019d8:	10ffffc4 	addi	r3,r2,-1
 40019dc:	e0bfff17 	ldw	r2,-4(fp)
 40019e0:	10bfffc4 	addi	r2,r2,-1
 40019e4:	01000044 	movi	r4,1
 40019e8:	d9000015 	stw	r4,0(sp)
 40019ec:	e1000217 	ldw	r4,8(fp)
 40019f0:	d9000115 	stw	r4,4(sp)
 40019f4:	e1000417 	ldw	r4,16(fp)
 40019f8:	d9000215 	stw	r4,8(sp)
 40019fc:	e13ffc17 	ldw	r4,-16(fp)
 4001a00:	180d883a 	mov	r6,r3
 4001a04:	100f883a 	mov	r7,r2
 4001a08:	40010d00 	call	40010d0 <vid_draw_line>
  }

  return (0);
 4001a0c:	0005883a 	mov	r2,zero
}
 4001a10:	e037883a 	mov	sp,fp
 4001a14:	dfc00117 	ldw	ra,4(sp)
 4001a18:	df000017 	ldw	fp,0(sp)
 4001a1c:	dec00204 	addi	sp,sp,8
 4001a20:	f800283a 	ret

04001a24 <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
 4001a24:	defff704 	addi	sp,sp,-36
 4001a28:	dfc00815 	stw	ra,32(sp)
 4001a2c:	df000715 	stw	fp,28(sp)
 4001a30:	df000704 	addi	fp,sp,28
 4001a34:	e13ffc15 	stw	r4,-16(fp)
 4001a38:	e17ffd15 	stw	r5,-12(fp)
 4001a3c:	e1bffe15 	stw	r6,-8(fp)
 4001a40:	3805883a 	mov	r2,r7
 4001a44:	e0bfff05 	stb	r2,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
 4001a48:	e0bfff03 	ldbu	r2,-4(fp)
 4001a4c:	10bff804 	addi	r2,r2,-32
 4001a50:	e0bffb05 	stb	r2,-20(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 4001a54:	e03ff915 	stw	zero,-28(fp)
 4001a58:	00002506 	br	4001af0 <vid_print_char+0xcc>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
 4001a5c:	e0bffb07 	ldb	r2,-20(fp)
 4001a60:	108002e4 	muli	r2,r2,11
 4001a64:	1007883a 	mov	r3,r2
 4001a68:	e0bff917 	ldw	r2,-28(fp)
 4001a6c:	1885883a 	add	r2,r3,r2
 4001a70:	e0c00217 	ldw	r3,8(fp)
 4001a74:	1885883a 	add	r2,r3,r2
 4001a78:	10800003 	ldbu	r2,0(r2)
 4001a7c:	e0bffb45 	stb	r2,-19(fp)
    for (j = 0; j < 8; j++) {
 4001a80:	e03ffa15 	stw	zero,-24(fp)
 4001a84:	00001406 	br	4001ad8 <vid_print_char+0xb4>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
 4001a88:	e0fffb47 	ldb	r3,-19(fp)
 4001a8c:	01002004 	movi	r4,128
 4001a90:	e0bffa17 	ldw	r2,-24(fp)
 4001a94:	2085d83a 	sra	r2,r4,r2
 4001a98:	1884703a 	and	r2,r3,r2
 4001a9c:	10000b26 	beq	r2,zero,4001acc <vid_print_char+0xa8>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
 4001aa0:	e0fffc17 	ldw	r3,-16(fp)
 4001aa4:	e0bffa17 	ldw	r2,-24(fp)
 4001aa8:	1889883a 	add	r4,r3,r2
 4001aac:	e0fffd17 	ldw	r3,-12(fp)
 4001ab0:	e0bff917 	ldw	r2,-28(fp)
 4001ab4:	1887883a 	add	r3,r3,r2
 4001ab8:	e0bffe17 	ldw	r2,-8(fp)
 4001abc:	180b883a 	mov	r5,r3
 4001ac0:	100d883a 	mov	r6,r2
 4001ac4:	e1c00317 	ldw	r7,12(fp)
 4001ac8:	4001b140 	call	4001b14 <vid_set_pixel>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
 4001acc:	e0bffa17 	ldw	r2,-24(fp)
 4001ad0:	10800044 	addi	r2,r2,1
 4001ad4:	e0bffa15 	stw	r2,-24(fp)
 4001ad8:	e0bffa17 	ldw	r2,-24(fp)
 4001adc:	10800210 	cmplti	r2,r2,8
 4001ae0:	103fe91e 	bne	r2,zero,4001a88 <vid_print_char+0x64>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 4001ae4:	e0bff917 	ldw	r2,-28(fp)
 4001ae8:	10800044 	addi	r2,r2,1
 4001aec:	e0bff915 	stw	r2,-28(fp)
 4001af0:	e0bff917 	ldw	r2,-28(fp)
 4001af4:	108002d0 	cmplti	r2,r2,11
 4001af8:	103fd81e 	bne	r2,zero,4001a5c <vid_print_char+0x38>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
 4001afc:	0005883a 	mov	r2,zero
}
 4001b00:	e037883a 	mov	sp,fp
 4001b04:	dfc00117 	ldw	ra,4(sp)
 4001b08:	df000017 	ldw	fp,0(sp)
 4001b0c:	dec00204 	addi	sp,sp,8
 4001b10:	f800283a 	ret

04001b14 <vid_set_pixel>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
 4001b14:	defff904 	addi	sp,sp,-28
 4001b18:	dfc00615 	stw	ra,24(sp)
 4001b1c:	df000515 	stw	fp,20(sp)
 4001b20:	df000504 	addi	fp,sp,20
 4001b24:	e13ffc15 	stw	r4,-16(fp)
 4001b28:	e17ffd15 	stw	r5,-12(fp)
 4001b2c:	e1bffe15 	stw	r6,-8(fp)
 4001b30:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	alt_u16 color16;


	// encode to RGB  5 6 5
	color16 = (color & 0xFF) >> 3; // blue
 4001b34:	e0bffe17 	ldw	r2,-8(fp)
 4001b38:	10803fcc 	andi	r2,r2,255
 4001b3c:	1004d0fa 	srli	r2,r2,3
 4001b40:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xFC00) >> 5; // green
 4001b44:	e0bffe17 	ldw	r2,-8(fp)
 4001b48:	10bf000c 	andi	r2,r2,64512
 4001b4c:	1004d17a 	srli	r2,r2,5
 4001b50:	1007883a 	mov	r3,r2
 4001b54:	e0bffb0b 	ldhu	r2,-20(fp)
 4001b58:	1884b03a 	or	r2,r3,r2
 4001b5c:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xF80000) >> 8; // blue
 4001b60:	e0bffe17 	ldw	r2,-8(fp)
 4001b64:	10803e2c 	andhi	r2,r2,248
 4001b68:	1004d23a 	srli	r2,r2,8
 4001b6c:	1007883a 	mov	r3,r2
 4001b70:	e0bffb0b 	ldhu	r2,-20(fp)
 4001b74:	1884b03a 	or	r2,r3,r2
 4001b78:	e0bffb0d 	sth	r2,-20(fp)
	LCD_DrawPoint(horiz, vert, color16);
 4001b7c:	e0bffc17 	ldw	r2,-16(fp)
 4001b80:	113fffcc 	andi	r4,r2,65535
 4001b84:	e0bffd17 	ldw	r2,-12(fp)
 4001b88:	10ffffcc 	andi	r3,r2,65535
 4001b8c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001b90:	180b883a 	mov	r5,r3
 4001b94:	100d883a 	mov	r6,r2
 4001b98:	40007800 	call	4000780 <LCD_DrawPoint>
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}
#endif

}
 4001b9c:	e037883a 	mov	sp,fp
 4001ba0:	dfc00117 	ldw	ra,4(sp)
 4001ba4:	df000017 	ldw	fp,0(sp)
 4001ba8:	dec00204 	addi	sp,sp,8
 4001bac:	f800283a 	ret

04001bb0 <vid_get_pixel>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
 4001bb0:	defffb04 	addi	sp,sp,-20
 4001bb4:	dfc00415 	stw	ra,16(sp)
 4001bb8:	df000315 	stw	fp,12(sp)
 4001bbc:	df000304 	addi	fp,sp,12
 4001bc0:	e13ffd15 	stw	r4,-12(fp)
 4001bc4:	e17ffe15 	stw	r5,-8(fp)
 4001bc8:	e1bfff15 	stw	r6,-4(fp)
#ifdef LT24
	printf("vid_get_pixel is not implemented\r\n");
 4001bcc:	010100f4 	movhi	r4,1027
 4001bd0:	21354604 	addi	r4,r4,-10984
 4001bd4:	40093440 	call	4009344 <puts>
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  return(IORD_16DIRECT(addr, 0));
#endif
}
 4001bd8:	e037883a 	mov	sp,fp
 4001bdc:	dfc00117 	ldw	ra,4(sp)
 4001be0:	df000017 	ldw	fp,0(sp)
 4001be4:	dec00204 	addi	sp,sp,8
 4001be8:	f800283a 	ret

04001bec <vid_paint_block>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
 4001bec:	defff804 	addi	sp,sp,-32
 4001bf0:	dfc00715 	stw	ra,28(sp)
 4001bf4:	df000615 	stw	fp,24(sp)
 4001bf8:	df000604 	addi	fp,sp,24
 4001bfc:	e13ffc15 	stw	r4,-16(fp)
 4001c00:	e17ffd15 	stw	r5,-12(fp)
 4001c04:	e1bffe15 	stw	r6,-8(fp)
 4001c08:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
 4001c0c:	e0bffd17 	ldw	r2,-12(fp)
 4001c10:	e0bffb15 	stw	r2,-20(fp)
 4001c14:	00001206 	br	4001c60 <vid_paint_block+0x74>
		for(x=Hstart;x<Hend;x++){
 4001c18:	e0bffc17 	ldw	r2,-16(fp)
 4001c1c:	e0bffa15 	stw	r2,-24(fp)
 4001c20:	00000906 	br	4001c48 <vid_paint_block+0x5c>
			vid_set_pixel(x, y, color, display);
 4001c24:	e0800217 	ldw	r2,8(fp)
 4001c28:	e13ffa17 	ldw	r4,-24(fp)
 4001c2c:	e17ffb17 	ldw	r5,-20(fp)
 4001c30:	100d883a 	mov	r6,r2
 4001c34:	e1c00317 	ldw	r7,12(fp)
 4001c38:	4001b140 	call	4001b14 <vid_set_pixel>
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
		for(x=Hstart;x<Hend;x++){
 4001c3c:	e0bffa17 	ldw	r2,-24(fp)
 4001c40:	10800044 	addi	r2,r2,1
 4001c44:	e0bffa15 	stw	r2,-24(fp)
 4001c48:	e0fffa17 	ldw	r3,-24(fp)
 4001c4c:	e0bffe17 	ldw	r2,-8(fp)
 4001c50:	18bff416 	blt	r3,r2,4001c24 <vid_paint_block+0x38>
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
 4001c54:	e0bffb17 	ldw	r2,-20(fp)
 4001c58:	10800044 	addi	r2,r2,1
 4001c5c:	e0bffb15 	stw	r2,-20(fp)
 4001c60:	e0fffb17 	ldw	r3,-20(fp)
 4001c64:	e0bfff17 	ldw	r2,-4(fp)
 4001c68:	18bfeb16 	blt	r3,r2,4001c18 <vid_paint_block+0x2c>
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
#endif
}
 4001c6c:	e037883a 	mov	sp,fp
 4001c70:	dfc00117 	ldw	ra,4(sp)
 4001c74:	df000017 	ldw	fp,0(sp)
 4001c78:	dec00204 	addi	sp,sp,8
 4001c7c:	f800283a 	ret

04001c80 <vid_draw_horiz_line>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
 4001c80:	defff904 	addi	sp,sp,-28
 4001c84:	dfc00615 	stw	ra,24(sp)
 4001c88:	df000515 	stw	fp,20(sp)
 4001c8c:	df000504 	addi	fp,sp,20
 4001c90:	2007883a 	mov	r3,r4
 4001c94:	2805883a 	mov	r2,r5
 4001c98:	e1bffe15 	stw	r6,-8(fp)
 4001c9c:	e1ffff15 	stw	r7,-4(fp)
 4001ca0:	e0fffc0d 	sth	r3,-16(fp)
 4001ca4:	e0bffd0d 	sth	r2,-12(fp)
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
 4001ca8:	e0bffc0f 	ldh	r2,-16(fp)
 4001cac:	e0bffb15 	stw	r2,-20(fp)
 4001cb0:	00000906 	br	4001cd8 <vid_draw_horiz_line+0x58>
		vid_set_pixel(x, V, color, display);
 4001cb4:	e0bfff17 	ldw	r2,-4(fp)
 4001cb8:	e13ffb17 	ldw	r4,-20(fp)
 4001cbc:	e17ffe17 	ldw	r5,-8(fp)
 4001cc0:	100d883a 	mov	r6,r2
 4001cc4:	e1c00217 	ldw	r7,8(fp)
 4001cc8:	4001b140 	call	4001b14 <vid_set_pixel>
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
 4001ccc:	e0bffb17 	ldw	r2,-20(fp)
 4001cd0:	10800044 	addi	r2,r2,1
 4001cd4:	e0bffb15 	stw	r2,-20(fp)
 4001cd8:	e0bffd0f 	ldh	r2,-12(fp)
 4001cdc:	e0fffb17 	ldw	r3,-20(fp)
 4001ce0:	18bff416 	blt	r3,r2,4001cb4 <vid_draw_horiz_line+0x34>
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
  }
  free(fast_buffer);
#endif

}
 4001ce4:	e037883a 	mov	sp,fp
 4001ce8:	dfc00117 	ldw	ra,4(sp)
 4001cec:	df000017 	ldw	fp,0(sp)
 4001cf0:	dec00204 	addi	sp,sp,8
 4001cf4:	f800283a 	ret

04001cf8 <vid_merge_colors>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
 4001cf8:	defffc04 	addi	sp,sp,-16
 4001cfc:	df000315 	stw	fp,12(sp)
 4001d00:	df000304 	addi	fp,sp,12
 4001d04:	e13ffd15 	stw	r4,-12(fp)
 4001d08:	e17ffe15 	stw	r5,-8(fp)
 4001d0c:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
 4001d10:	e0bffe17 	ldw	r2,-8(fp)
 4001d14:	1085883a 	add	r2,r2,r2
 4001d18:	10800054 	ori	r2,r2,1
 4001d1c:	1006917a 	slli	r3,r2,5
 4001d20:	e0bfff17 	ldw	r2,-4(fp)
 4001d24:	1886b03a 	or	r3,r3,r2
 4001d28:	e0bffd17 	ldw	r2,-12(fp)
 4001d2c:	100492fa 	slli	r2,r2,11
 4001d30:	1884b03a 	or	r2,r3,r2
}
 4001d34:	e037883a 	mov	sp,fp
 4001d38:	df000017 	ldw	fp,0(sp)
 4001d3c:	dec00104 	addi	sp,sp,4
 4001d40:	f800283a 	ret

04001d44 <vid_color_convert24_16>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
 4001d44:	defffc04 	addi	sp,sp,-16
 4001d48:	df000315 	stw	fp,12(sp)
 4001d4c:	df000304 	addi	fp,sp,12
 4001d50:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
 4001d54:	e0bfff17 	ldw	r2,-4(fp)
 4001d58:	10800003 	ldbu	r2,0(r2)
 4001d5c:	1007883a 	mov	r3,r2
 4001d60:	00bffe04 	movi	r2,-8
 4001d64:	1884703a 	and	r2,r3,r2
 4001d68:	e0bffd05 	stb	r2,-12(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
 4001d6c:	e0bfff17 	ldw	r2,-4(fp)
 4001d70:	10800044 	addi	r2,r2,1
 4001d74:	10800003 	ldbu	r2,0(r2)
 4001d78:	1007883a 	mov	r3,r2
 4001d7c:	00bfff04 	movi	r2,-4
 4001d80:	1884703a 	and	r2,r3,r2
 4001d84:	e0bffd45 	stb	r2,-11(fp)
	blue = *(color24 + 2) & 0xF8;
 4001d88:	e0bfff17 	ldw	r2,-4(fp)
 4001d8c:	10800084 	addi	r2,r2,2
 4001d90:	10800003 	ldbu	r2,0(r2)
 4001d94:	1007883a 	mov	r3,r2
 4001d98:	00bffe04 	movi	r2,-8
 4001d9c:	1884703a 	and	r2,r3,r2
 4001da0:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
 4001da4:	e0bffd83 	ldbu	r2,-10(fp)
 4001da8:	1004d0fa 	srli	r2,r2,3
 4001dac:	10c03fcc 	andi	r3,r2,255
 4001db0:	e0bffd43 	ldbu	r2,-11(fp)
 4001db4:	100490fa 	slli	r2,r2,3
 4001db8:	1884b03a 	or	r2,r3,r2
 4001dbc:	1007883a 	mov	r3,r2
 4001dc0:	e0bffd03 	ldbu	r2,-12(fp)
 4001dc4:	1004923a 	slli	r2,r2,8
 4001dc8:	1884b03a 	or	r2,r3,r2
 4001dcc:	e0bffe0d 	sth	r2,-8(fp)
	return output;
 4001dd0:	e0bffe0b 	ldhu	r2,-8(fp)
}
 4001dd4:	e037883a 	mov	sp,fp
 4001dd8:	df000017 	ldw	fp,0(sp)
 4001ddc:	dec00104 	addi	sp,sp,4
 4001de0:	f800283a 	ret

04001de4 <vid_color_convert16_24>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
 4001de4:	defffd04 	addi	sp,sp,-12
 4001de8:	df000215 	stw	fp,8(sp)
 4001dec:	df000204 	addi	fp,sp,8
 4001df0:	2005883a 	mov	r2,r4
 4001df4:	e17fff15 	stw	r5,-4(fp)
 4001df8:	e0bffe0d 	sth	r2,-8(fp)
	*(color24 + 0) = color16 >> 11;
 4001dfc:	e0bffe0b 	ldhu	r2,-8(fp)
 4001e00:	1004d2fa 	srli	r2,r2,11
 4001e04:	1007883a 	mov	r3,r2
 4001e08:	e0bfff17 	ldw	r2,-4(fp)
 4001e0c:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
 4001e10:	e0bfff17 	ldw	r2,-4(fp)
 4001e14:	10800044 	addi	r2,r2,1
 4001e18:	e0fffe0b 	ldhu	r3,-8(fp)
 4001e1c:	18c00f8c 	andi	r3,r3,62
 4001e20:	1807d17a 	srai	r3,r3,5
 4001e24:	10c00005 	stb	r3,0(r2)
	*(color24 + 2) = (color16 & 0x1F);
 4001e28:	e0bfff17 	ldw	r2,-4(fp)
 4001e2c:	10800084 	addi	r2,r2,2
 4001e30:	e0fffe0b 	ldhu	r3,-8(fp)
 4001e34:	18c007cc 	andi	r3,r3,31
 4001e38:	10c00005 	stb	r3,0(r2)
	
	return (0);
 4001e3c:	0005883a 	mov	r2,zero
}
 4001e40:	e037883a 	mov	sp,fp
 4001e44:	df000017 	ldw	fp,0(sp)
 4001e48:	dec00104 	addi	sp,sp,4
 4001e4c:	f800283a 	ret

04001e50 <vid_copy_line_to_frame_buffer>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
 4001e50:	defffa04 	addi	sp,sp,-24
 4001e54:	dfc00515 	stw	ra,20(sp)
 4001e58:	df000415 	stw	fp,16(sp)
 4001e5c:	df000404 	addi	fp,sp,16
 4001e60:	e13ffc15 	stw	r4,-16(fp)
 4001e64:	e17ffd15 	stw	r5,-12(fp)
 4001e68:	e1bffe15 	stw	r6,-8(fp)
 4001e6c:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("vid_copy_line_to_frame_buffer is not implemented!\r\n");
 4001e70:	010100f4 	movhi	r4,1027
 4001e74:	21354f04 	addi	r4,r4,-10948
 4001e78:	40093440 	call	4009344 <puts>
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
    }
  }
  return(0);
#endif
}
 4001e7c:	e037883a 	mov	sp,fp
 4001e80:	dfc00117 	ldw	ra,4(sp)
 4001e84:	df000017 	ldw	fp,0(sp)
 4001e88:	dec00204 	addi	sp,sp,8
 4001e8c:	f800283a 	ret

04001e90 <vid_draw_sloped_line>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
 4001e90:	deffef04 	addi	sp,sp,-68
 4001e94:	dfc01015 	stw	ra,64(sp)
 4001e98:	df000f15 	stw	fp,60(sp)
 4001e9c:	df000f04 	addi	fp,sp,60
 4001ea0:	2011883a 	mov	r8,r4
 4001ea4:	2809883a 	mov	r4,r5
 4001ea8:	3007883a 	mov	r3,r6
 4001eac:	3805883a 	mov	r2,r7
 4001eb0:	e1400217 	ldw	r5,8(fp)
 4001eb4:	e23ffb0d 	sth	r8,-20(fp)
 4001eb8:	e13ffc0d 	sth	r4,-16(fp)
 4001ebc:	e0fffd0d 	sth	r3,-12(fp)
 4001ec0:	e0bffe0d 	sth	r2,-8(fp)
 4001ec4:	e17fff0d 	sth	r5,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
 4001ec8:	e0fffd0b 	ldhu	r3,-12(fp)
 4001ecc:	e0bffb0b 	ldhu	r2,-20(fp)
 4001ed0:	1885c83a 	sub	r2,r3,r2
 4001ed4:	1000010e 	bge	r2,zero,4001edc <vid_draw_sloped_line+0x4c>
 4001ed8:	0085c83a 	sub	r2,zero,r2
 4001edc:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
 4001ee0:	e0fffe0b 	ldhu	r3,-8(fp)
 4001ee4:	e0bffc0b 	ldhu	r2,-16(fp)
 4001ee8:	1885c83a 	sub	r2,r3,r2
 4001eec:	1000010e 	bge	r2,zero,4001ef4 <vid_draw_sloped_line+0x64>
 4001ef0:	0085c83a 	sub	r2,zero,r2
 4001ef4:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
 4001ef8:	e0bffb0b 	ldhu	r2,-20(fp)
 4001efc:	e0fffd0b 	ldhu	r3,-12(fp)
 4001f00:	1880032e 	bgeu	r3,r2,4001f10 <vid_draw_sloped_line+0x80>
 4001f04:	00bfffc4 	movi	r2,-1
 4001f08:	e0bff315 	stw	r2,-52(fp)
 4001f0c:	00000206 	br	4001f18 <vid_draw_sloped_line+0x88>
 4001f10:	00800044 	movi	r2,1
 4001f14:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
 4001f18:	e0bffc0b 	ldhu	r2,-16(fp)
 4001f1c:	e0fffe0b 	ldhu	r3,-8(fp)
 4001f20:	1880032e 	bgeu	r3,r2,4001f30 <vid_draw_sloped_line+0xa0>
 4001f24:	00bfffc4 	movi	r2,-1
 4001f28:	e0bff415 	stw	r2,-48(fp)
 4001f2c:	00000206 	br	4001f38 <vid_draw_sloped_line+0xa8>
 4001f30:	00800044 	movi	r2,1
 4001f34:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
 4001f38:	e0fff117 	ldw	r3,-60(fp)
 4001f3c:	e0bff217 	ldw	r2,-56(fp)
 4001f40:	18803416 	blt	r3,r2,4002014 <vid_draw_sloped_line+0x184>
    int dPr   = vert_delta<<1;
 4001f44:	e0bff217 	ldw	r2,-56(fp)
 4001f48:	1085883a 	add	r2,r2,r2
 4001f4c:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
 4001f50:	e0bff117 	ldw	r2,-60(fp)
 4001f54:	1085883a 	add	r2,r2,r2
 4001f58:	e0fff717 	ldw	r3,-36(fp)
 4001f5c:	1885c83a 	sub	r2,r3,r2
 4001f60:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
 4001f64:	e0fff717 	ldw	r3,-36(fp)
 4001f68:	e0bff117 	ldw	r2,-60(fp)
 4001f6c:	1885c83a 	sub	r2,r3,r2
 4001f70:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 4001f74:	00002406 	br	4002008 <vid_draw_sloped_line+0x178>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 4001f78:	e13ffb0b 	ldhu	r4,-20(fp)
 4001f7c:	e0fffc0b 	ldhu	r3,-16(fp)
 4001f80:	e0800317 	ldw	r2,12(fp)
 4001f84:	180b883a 	mov	r5,r3
 4001f88:	100d883a 	mov	r6,r2
 4001f8c:	e1c00417 	ldw	r7,16(fp)
 4001f90:	4001b140 	call	4001b14 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
 4001f94:	e0bff517 	ldw	r2,-44(fp)
 4001f98:	00800f0e 	bge	zero,r2,4001fd8 <vid_draw_sloped_line+0x148>
        horiz_start+=horiz_incr;
 4001f9c:	e0bff317 	ldw	r2,-52(fp)
 4001fa0:	1007883a 	mov	r3,r2
 4001fa4:	e0bffb0b 	ldhu	r2,-20(fp)
 4001fa8:	1885883a 	add	r2,r3,r2
 4001fac:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 4001fb0:	e0bff417 	ldw	r2,-48(fp)
 4001fb4:	1007883a 	mov	r3,r2
 4001fb8:	e0bffc0b 	ldhu	r2,-16(fp)
 4001fbc:	1885883a 	add	r2,r3,r2
 4001fc0:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 4001fc4:	e0fff517 	ldw	r3,-44(fp)
 4001fc8:	e0bff817 	ldw	r2,-32(fp)
 4001fcc:	1885883a 	add	r2,r3,r2
 4001fd0:	e0bff515 	stw	r2,-44(fp)
 4001fd4:	00000906 	br	4001ffc <vid_draw_sloped_line+0x16c>
      } else {
        horiz_start+=horiz_incr;
 4001fd8:	e0bff317 	ldw	r2,-52(fp)
 4001fdc:	1007883a 	mov	r3,r2
 4001fe0:	e0bffb0b 	ldhu	r2,-20(fp)
 4001fe4:	1885883a 	add	r2,r3,r2
 4001fe8:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
 4001fec:	e0fff517 	ldw	r3,-44(fp)
 4001ff0:	e0bff717 	ldw	r2,-36(fp)
 4001ff4:	1885883a 	add	r2,r3,r2
 4001ff8:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 4001ffc:	e0bff117 	ldw	r2,-60(fp)
 4002000:	10bfffc4 	addi	r2,r2,-1
 4002004:	e0bff115 	stw	r2,-60(fp)
 4002008:	e0bff117 	ldw	r2,-60(fp)
 400200c:	103fda0e 	bge	r2,zero,4001f78 <vid_draw_sloped_line+0xe8>
 4002010:	00003306 	br	40020e0 <vid_draw_sloped_line+0x250>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
 4002014:	e0bff117 	ldw	r2,-60(fp)
 4002018:	1085883a 	add	r2,r2,r2
 400201c:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
 4002020:	e0bff217 	ldw	r2,-56(fp)
 4002024:	1085883a 	add	r2,r2,r2
 4002028:	e0fff917 	ldw	r3,-28(fp)
 400202c:	1885c83a 	sub	r2,r3,r2
 4002030:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
 4002034:	e0fff917 	ldw	r3,-28(fp)
 4002038:	e0bff217 	ldw	r2,-56(fp)
 400203c:	1885c83a 	sub	r2,r3,r2
 4002040:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4002044:	00002406 	br	40020d8 <vid_draw_sloped_line+0x248>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 4002048:	e13ffb0b 	ldhu	r4,-20(fp)
 400204c:	e0fffc0b 	ldhu	r3,-16(fp)
 4002050:	e0800317 	ldw	r2,12(fp)
 4002054:	180b883a 	mov	r5,r3
 4002058:	100d883a 	mov	r6,r2
 400205c:	e1c00417 	ldw	r7,16(fp)
 4002060:	4001b140 	call	4001b14 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
 4002064:	e0bff617 	ldw	r2,-40(fp)
 4002068:	00800f0e 	bge	zero,r2,40020a8 <vid_draw_sloped_line+0x218>
        horiz_start+=horiz_incr;
 400206c:	e0bff317 	ldw	r2,-52(fp)
 4002070:	1007883a 	mov	r3,r2
 4002074:	e0bffb0b 	ldhu	r2,-20(fp)
 4002078:	1885883a 	add	r2,r3,r2
 400207c:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 4002080:	e0bff417 	ldw	r2,-48(fp)
 4002084:	1007883a 	mov	r3,r2
 4002088:	e0bffc0b 	ldhu	r2,-16(fp)
 400208c:	1885883a 	add	r2,r3,r2
 4002090:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 4002094:	e0fff617 	ldw	r3,-40(fp)
 4002098:	e0bffa17 	ldw	r2,-24(fp)
 400209c:	1885883a 	add	r2,r3,r2
 40020a0:	e0bff615 	stw	r2,-40(fp)
 40020a4:	00000906 	br	40020cc <vid_draw_sloped_line+0x23c>
      } else {
        vert_start+=vert_incr;
 40020a8:	e0bff417 	ldw	r2,-48(fp)
 40020ac:	1007883a 	mov	r3,r2
 40020b0:	e0bffc0b 	ldhu	r2,-16(fp)
 40020b4:	1885883a 	add	r2,r3,r2
 40020b8:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
 40020bc:	e0fff617 	ldw	r3,-40(fp)
 40020c0:	e0bff917 	ldw	r2,-28(fp)
 40020c4:	1885883a 	add	r2,r3,r2
 40020c8:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 40020cc:	e0bff217 	ldw	r2,-56(fp)
 40020d0:	10bfffc4 	addi	r2,r2,-1
 40020d4:	e0bff215 	stw	r2,-56(fp)
 40020d8:	e0bff217 	ldw	r2,-56(fp)
 40020dc:	103fda0e 	bge	r2,zero,4002048 <vid_draw_sloped_line+0x1b8>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 40020e0:	e037883a 	mov	sp,fp
 40020e4:	dfc00117 	ldw	ra,4(sp)
 40020e8:	df000017 	ldw	fp,0(sp)
 40020ec:	dec00204 	addi	sp,sp,8
 40020f0:	f800283a 	ret

040020f4 <vid_draw_circle>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
 40020f4:	defff104 	addi	sp,sp,-60
 40020f8:	dfc00e15 	stw	ra,56(sp)
 40020fc:	df000d15 	stw	fp,52(sp)
 4002100:	df000d04 	addi	fp,sp,52
 4002104:	e13ffb15 	stw	r4,-20(fp)
 4002108:	e17ffc15 	stw	r5,-16(fp)
 400210c:	e1bffd15 	stw	r6,-12(fp)
 4002110:	e1fffe15 	stw	r7,-8(fp)
 4002114:	e0800217 	ldw	r2,8(fp)
 4002118:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
 400211c:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
 4002120:	e0bffd17 	ldw	r2,-12(fp)
 4002124:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
 4002128:	e0bffd17 	ldw	r2,-12(fp)
 400212c:	10bfff24 	muli	r2,r2,-4
 4002130:	10800144 	addi	r2,r2,5
 4002134:	1000010e 	bge	r2,zero,400213c <vid_draw_circle+0x48>
 4002138:	108000c4 	addi	r2,r2,3
 400213c:	1005d0ba 	srai	r2,r2,2
 4002140:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 4002144:	e0bfff07 	ldb	r2,-4(fp)
 4002148:	d8000015 	stw	zero,0(sp)
 400214c:	d8000115 	stw	zero,4(sp)
 4002150:	e0fffe17 	ldw	r3,-8(fp)
 4002154:	d8c00215 	stw	r3,8(sp)
 4002158:	d8800315 	stw	r2,12(sp)
 400215c:	e0800317 	ldw	r2,12(fp)
 4002160:	d8800415 	stw	r2,16(sp)
 4002164:	e13ffb17 	ldw	r4,-20(fp)
 4002168:	e17ffc17 	ldw	r5,-16(fp)
 400216c:	e1bff817 	ldw	r6,-32(fp)
 4002170:	e1fff917 	ldw	r7,-28(fp)
 4002174:	40025e80 	call	40025e8 <vid_round_corner_points>

  // Now start moving out from those points until the lines meet
  while (x < y) {
 4002178:	00002406 	br	400220c <vid_draw_circle+0x118>
    x++;
 400217c:	e0bff817 	ldw	r2,-32(fp)
 4002180:	10800044 	addi	r2,r2,1
 4002184:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
 4002188:	e0bffa17 	ldw	r2,-24(fp)
 400218c:	1000070e 	bge	r2,zero,40021ac <vid_draw_circle+0xb8>
      p += 2*x+1;
 4002190:	e0bff817 	ldw	r2,-32(fp)
 4002194:	1085883a 	add	r2,r2,r2
 4002198:	10800044 	addi	r2,r2,1
 400219c:	e0fffa17 	ldw	r3,-24(fp)
 40021a0:	1885883a 	add	r2,r3,r2
 40021a4:	e0bffa15 	stw	r2,-24(fp)
 40021a8:	00000b06 	br	40021d8 <vid_draw_circle+0xe4>
    } else {
      y--;
 40021ac:	e0bff917 	ldw	r2,-28(fp)
 40021b0:	10bfffc4 	addi	r2,r2,-1
 40021b4:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
 40021b8:	e0fff817 	ldw	r3,-32(fp)
 40021bc:	e0bff917 	ldw	r2,-28(fp)
 40021c0:	1885c83a 	sub	r2,r3,r2
 40021c4:	1085883a 	add	r2,r2,r2
 40021c8:	10800044 	addi	r2,r2,1
 40021cc:	e0fffa17 	ldw	r3,-24(fp)
 40021d0:	1885883a 	add	r2,r3,r2
 40021d4:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 40021d8:	e0bfff07 	ldb	r2,-4(fp)
 40021dc:	d8000015 	stw	zero,0(sp)
 40021e0:	d8000115 	stw	zero,4(sp)
 40021e4:	e0fffe17 	ldw	r3,-8(fp)
 40021e8:	d8c00215 	stw	r3,8(sp)
 40021ec:	d8800315 	stw	r2,12(sp)
 40021f0:	e0800317 	ldw	r2,12(fp)
 40021f4:	d8800415 	stw	r2,16(sp)
 40021f8:	e13ffb17 	ldw	r4,-20(fp)
 40021fc:	e17ffc17 	ldw	r5,-16(fp)
 4002200:	e1bff817 	ldw	r6,-32(fp)
 4002204:	e1fff917 	ldw	r7,-28(fp)
 4002208:	40025e80 	call	40025e8 <vid_round_corner_points>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
 400220c:	e0fff817 	ldw	r3,-32(fp)
 4002210:	e0bff917 	ldw	r2,-28(fp)
 4002214:	18bfd916 	blt	r3,r2,400217c <vid_draw_circle+0x88>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
 4002218:	0005883a 	mov	r2,zero
}
 400221c:	e037883a 	mov	sp,fp
 4002220:	dfc00117 	ldw	ra,4(sp)
 4002224:	df000017 	ldw	fp,0(sp)
 4002228:	dec00204 	addi	sp,sp,8
 400222c:	f800283a 	ret

04002230 <vid_draw_round_corner_box>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
 4002230:	deffec04 	addi	sp,sp,-80
 4002234:	dfc01315 	stw	ra,76(sp)
 4002238:	df001215 	stw	fp,72(sp)
 400223c:	df001204 	addi	fp,sp,72
 4002240:	e13ffc15 	stw	r4,-16(fp)
 4002244:	e17ffd15 	stw	r5,-12(fp)
 4002248:	e1bffe15 	stw	r6,-8(fp)
 400224c:	e1ffff15 	stw	r7,-4(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
 4002250:	e0bffc17 	ldw	r2,-16(fp)
 4002254:	e0fffe17 	ldw	r3,-8(fp)
 4002258:	1880060e 	bge	r3,r2,4002274 <vid_draw_round_corner_box+0x44>
  {
    temp = horiz_end;
 400225c:	e0bffe17 	ldw	r2,-8(fp)
 4002260:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
 4002264:	e0bffc17 	ldw	r2,-16(fp)
 4002268:	e0bffe15 	stw	r2,-8(fp)
    horiz_start = temp;
 400226c:	e0bff617 	ldw	r2,-40(fp)
 4002270:	e0bffc15 	stw	r2,-16(fp)
  }
  
  if( vert_start > vert_end )
 4002274:	e0bffd17 	ldw	r2,-12(fp)
 4002278:	e0ffff17 	ldw	r3,-4(fp)
 400227c:	1880060e 	bge	r3,r2,4002298 <vid_draw_round_corner_box+0x68>
  {
    temp = vert_end;
 4002280:	e0bfff17 	ldw	r2,-4(fp)
 4002284:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
 4002288:	e0bffd17 	ldw	r2,-12(fp)
 400228c:	e0bfff15 	stw	r2,-4(fp)
    vert_start = temp;
 4002290:	e0bff617 	ldw	r2,-40(fp)
 4002294:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
 4002298:	e0fffe17 	ldw	r3,-8(fp)
 400229c:	e0bffc17 	ldw	r2,-16(fp)
 40022a0:	1885c83a 	sub	r2,r3,r2
 40022a4:	e0bff715 	stw	r2,-36(fp)
  height = vert_end - vert_start;
 40022a8:	e0ffff17 	ldw	r3,-4(fp)
 40022ac:	e0bffd17 	ldw	r2,-12(fp)
 40022b0:	1885c83a 	sub	r2,r3,r2
 40022b4:	e0bff815 	stw	r2,-32(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
 40022b8:	e0800217 	ldw	r2,8(fp)
 40022bc:	e0fff717 	ldw	r3,-36(fp)
 40022c0:	1806d07a 	srli	r3,r3,1
 40022c4:	1880032e 	bgeu	r3,r2,40022d4 <vid_draw_round_corner_box+0xa4>
    radius = width / 2;
 40022c8:	e0bff717 	ldw	r2,-36(fp)
 40022cc:	1004d07a 	srli	r2,r2,1
 40022d0:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
 40022d4:	e0800217 	ldw	r2,8(fp)
 40022d8:	e0fff817 	ldw	r3,-32(fp)
 40022dc:	1806d07a 	srli	r3,r3,1
 40022e0:	1880032e 	bgeu	r3,r2,40022f0 <vid_draw_round_corner_box+0xc0>
    radius = height / 2;
 40022e4:	e0bff817 	ldw	r2,-32(fp)
 40022e8:	1004d07a 	srli	r2,r2,1
 40022ec:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
 40022f0:	e0800217 	ldw	r2,8(fp)
 40022f4:	1085883a 	add	r2,r2,r2
 40022f8:	e0bff915 	stw	r2,-28(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
 40022fc:	e0bff917 	ldw	r2,-28(fp)
 4002300:	e0fff717 	ldw	r3,-36(fp)
 4002304:	1885c83a 	sub	r2,r3,r2
 4002308:	e0bffa15 	stw	r2,-24(fp)
  straight_height = height - diameter;
 400230c:	e0bff917 	ldw	r2,-28(fp)
 4002310:	e0fff817 	ldw	r3,-32(fp)
 4002314:	1885c83a 	sub	r2,r3,r2
 4002318:	e0bffb15 	stw	r2,-20(fp)

  x = 0;
 400231c:	e03ff315 	stw	zero,-52(fp)
  y = radius;
 4002320:	e0800217 	ldw	r2,8(fp)
 4002324:	e0bff415 	stw	r2,-48(fp)
  p = (5 - radius*4)/4;
 4002328:	e0800217 	ldw	r2,8(fp)
 400232c:	10bfff24 	muli	r2,r2,-4
 4002330:	10800144 	addi	r2,r2,5
 4002334:	1000010e 	bge	r2,zero,400233c <vid_draw_round_corner_box+0x10c>
 4002338:	108000c4 	addi	r2,r2,3
 400233c:	1005d0ba 	srai	r2,r2,2
 4002340:	e0bff515 	stw	r2,-44(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 4002344:	e0fffc17 	ldw	r3,-16(fp)
 4002348:	e0800217 	ldw	r2,8(fp)
 400234c:	1889883a 	add	r4,r3,r2
 4002350:	e0fffd17 	ldw	r3,-12(fp)
 4002354:	e0800217 	ldw	r2,8(fp)
 4002358:	188b883a 	add	r5,r3,r2
 400235c:	e0fff317 	ldw	r3,-52(fp)
 4002360:	e0bff417 	ldw	r2,-48(fp)
 4002364:	e23ffa17 	ldw	r8,-24(fp)
 4002368:	e1fffb17 	ldw	r7,-20(fp)
 400236c:	e1800417 	ldw	r6,16(fp)
 4002370:	31803fcc 	andi	r6,r6,255
 4002374:	3180201c 	xori	r6,r6,128
 4002378:	31bfe004 	addi	r6,r6,-128
 400237c:	da000015 	stw	r8,0(sp)
 4002380:	d9c00115 	stw	r7,4(sp)
 4002384:	e1c00317 	ldw	r7,12(fp)
 4002388:	d9c00215 	stw	r7,8(sp)
 400238c:	d9800315 	stw	r6,12(sp)
 4002390:	e1800517 	ldw	r6,20(fp)
 4002394:	d9800415 	stw	r6,16(sp)
 4002398:	180d883a 	mov	r6,r3
 400239c:	100f883a 	mov	r7,r2
 40023a0:	40025e80 	call	40025e8 <vid_round_corner_points>
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 40023a4:	00003106 	br	400246c <vid_draw_round_corner_box+0x23c>
    x++;
 40023a8:	e0bff317 	ldw	r2,-52(fp)
 40023ac:	10800044 	addi	r2,r2,1
 40023b0:	e0bff315 	stw	r2,-52(fp)
    if (p < 0) {
 40023b4:	e0bff517 	ldw	r2,-44(fp)
 40023b8:	1000080e 	bge	r2,zero,40023dc <vid_draw_round_corner_box+0x1ac>
      p += 2*x+1;
 40023bc:	e0bff317 	ldw	r2,-52(fp)
 40023c0:	1085883a 	add	r2,r2,r2
 40023c4:	1007883a 	mov	r3,r2
 40023c8:	e0bff517 	ldw	r2,-44(fp)
 40023cc:	1885883a 	add	r2,r3,r2
 40023d0:	10800044 	addi	r2,r2,1
 40023d4:	e0bff515 	stw	r2,-44(fp)
 40023d8:	00000c06 	br	400240c <vid_draw_round_corner_box+0x1dc>
    } else {
      y--;
 40023dc:	e0bff417 	ldw	r2,-48(fp)
 40023e0:	10bfffc4 	addi	r2,r2,-1
 40023e4:	e0bff415 	stw	r2,-48(fp)
      p += 2*(x-y)+1;
 40023e8:	e0fff317 	ldw	r3,-52(fp)
 40023ec:	e0bff417 	ldw	r2,-48(fp)
 40023f0:	1885c83a 	sub	r2,r3,r2
 40023f4:	1085883a 	add	r2,r2,r2
 40023f8:	1007883a 	mov	r3,r2
 40023fc:	e0bff517 	ldw	r2,-44(fp)
 4002400:	1885883a 	add	r2,r3,r2
 4002404:	10800044 	addi	r2,r2,1
 4002408:	e0bff515 	stw	r2,-44(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 400240c:	e0fffc17 	ldw	r3,-16(fp)
 4002410:	e0800217 	ldw	r2,8(fp)
 4002414:	1889883a 	add	r4,r3,r2
 4002418:	e0fffd17 	ldw	r3,-12(fp)
 400241c:	e0800217 	ldw	r2,8(fp)
 4002420:	188b883a 	add	r5,r3,r2
 4002424:	e0fff317 	ldw	r3,-52(fp)
 4002428:	e0bff417 	ldw	r2,-48(fp)
 400242c:	e23ffa17 	ldw	r8,-24(fp)
 4002430:	e1fffb17 	ldw	r7,-20(fp)
 4002434:	e1800417 	ldw	r6,16(fp)
 4002438:	31803fcc 	andi	r6,r6,255
 400243c:	3180201c 	xori	r6,r6,128
 4002440:	31bfe004 	addi	r6,r6,-128
 4002444:	da000015 	stw	r8,0(sp)
 4002448:	d9c00115 	stw	r7,4(sp)
 400244c:	e1c00317 	ldw	r7,12(fp)
 4002450:	d9c00215 	stw	r7,8(sp)
 4002454:	d9800315 	stw	r6,12(sp)
 4002458:	e1800517 	ldw	r6,20(fp)
 400245c:	d9800415 	stw	r6,16(sp)
 4002460:	180d883a 	mov	r6,r3
 4002464:	100f883a 	mov	r7,r2
 4002468:	40025e80 	call	40025e8 <vid_round_corner_points>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 400246c:	e0fff317 	ldw	r3,-52(fp)
 4002470:	e0bff417 	ldw	r2,-48(fp)
 4002474:	18bfcc36 	bltu	r3,r2,40023a8 <vid_draw_round_corner_box+0x178>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
 4002478:	e0800417 	ldw	r2,16(fp)
 400247c:	10001026 	beq	r2,zero,40024c0 <vid_draw_round_corner_box+0x290>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
 4002480:	e0fffd17 	ldw	r3,-12(fp)
 4002484:	e0800217 	ldw	r2,8(fp)
 4002488:	1887883a 	add	r3,r3,r2
 400248c:	e13fff17 	ldw	r4,-4(fp)
 4002490:	e0800217 	ldw	r2,8(fp)
 4002494:	2085c83a 	sub	r2,r4,r2
 4002498:	e1000317 	ldw	r4,12(fp)
 400249c:	d9000015 	stw	r4,0(sp)
 40024a0:	e1000517 	ldw	r4,20(fp)
 40024a4:	d9000115 	stw	r4,4(sp)
 40024a8:	e13ffc17 	ldw	r4,-16(fp)
 40024ac:	180b883a 	mov	r5,r3
 40024b0:	e1bffe17 	ldw	r6,-8(fp)
 40024b4:	100f883a 	mov	r7,r2
 40024b8:	4001bec0 	call	4001bec <vid_paint_block>
 40024bc:	00004406 	br	40025d0 <vid_draw_round_corner_box+0x3a0>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
 40024c0:	e0fffd17 	ldw	r3,-12(fp)
 40024c4:	e0800217 	ldw	r2,8(fp)
 40024c8:	1887883a 	add	r3,r3,r2
 40024cc:	e13fff17 	ldw	r4,-4(fp)
 40024d0:	e0800217 	ldw	r2,8(fp)
 40024d4:	2085c83a 	sub	r2,r4,r2
 40024d8:	01000044 	movi	r4,1
 40024dc:	d9000015 	stw	r4,0(sp)
 40024e0:	e1000317 	ldw	r4,12(fp)
 40024e4:	d9000115 	stw	r4,4(sp)
 40024e8:	e1000517 	ldw	r4,20(fp)
 40024ec:	d9000215 	stw	r4,8(sp)
 40024f0:	e13ffc17 	ldw	r4,-16(fp)
 40024f4:	180b883a 	mov	r5,r3
 40024f8:	e1bffc17 	ldw	r6,-16(fp)
 40024fc:	100f883a 	mov	r7,r2
 4002500:	40010d00 	call	40010d0 <vid_draw_line>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
 4002504:	e0fffd17 	ldw	r3,-12(fp)
 4002508:	e0800217 	ldw	r2,8(fp)
 400250c:	1887883a 	add	r3,r3,r2
 4002510:	e13fff17 	ldw	r4,-4(fp)
 4002514:	e0800217 	ldw	r2,8(fp)
 4002518:	2085c83a 	sub	r2,r4,r2
 400251c:	01000044 	movi	r4,1
 4002520:	d9000015 	stw	r4,0(sp)
 4002524:	e1000317 	ldw	r4,12(fp)
 4002528:	d9000115 	stw	r4,4(sp)
 400252c:	e1000517 	ldw	r4,20(fp)
 4002530:	d9000215 	stw	r4,8(sp)
 4002534:	e13ffe17 	ldw	r4,-8(fp)
 4002538:	180b883a 	mov	r5,r3
 400253c:	e1bffe17 	ldw	r6,-8(fp)
 4002540:	100f883a 	mov	r7,r2
 4002544:	40010d00 	call	40010d0 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
 4002548:	e0fffc17 	ldw	r3,-16(fp)
 400254c:	e0800217 	ldw	r2,8(fp)
 4002550:	1887883a 	add	r3,r3,r2
 4002554:	e13ffe17 	ldw	r4,-8(fp)
 4002558:	e0800217 	ldw	r2,8(fp)
 400255c:	2085c83a 	sub	r2,r4,r2
 4002560:	01000044 	movi	r4,1
 4002564:	d9000015 	stw	r4,0(sp)
 4002568:	e1000317 	ldw	r4,12(fp)
 400256c:	d9000115 	stw	r4,4(sp)
 4002570:	e1000517 	ldw	r4,20(fp)
 4002574:	d9000215 	stw	r4,8(sp)
 4002578:	1809883a 	mov	r4,r3
 400257c:	e17ffd17 	ldw	r5,-12(fp)
 4002580:	100d883a 	mov	r6,r2
 4002584:	e1fffd17 	ldw	r7,-12(fp)
 4002588:	40010d00 	call	40010d0 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
 400258c:	e0fffc17 	ldw	r3,-16(fp)
 4002590:	e0800217 	ldw	r2,8(fp)
 4002594:	1887883a 	add	r3,r3,r2
 4002598:	e13ffe17 	ldw	r4,-8(fp)
 400259c:	e0800217 	ldw	r2,8(fp)
 40025a0:	2085c83a 	sub	r2,r4,r2
 40025a4:	01000044 	movi	r4,1
 40025a8:	d9000015 	stw	r4,0(sp)
 40025ac:	e1000317 	ldw	r4,12(fp)
 40025b0:	d9000115 	stw	r4,4(sp)
 40025b4:	e1000517 	ldw	r4,20(fp)
 40025b8:	d9000215 	stw	r4,8(sp)
 40025bc:	1809883a 	mov	r4,r3
 40025c0:	e17fff17 	ldw	r5,-4(fp)
 40025c4:	100d883a 	mov	r6,r2
 40025c8:	e1ffff17 	ldw	r7,-4(fp)
 40025cc:	40010d00 	call	40010d0 <vid_draw_line>
  }

  return (0);
 40025d0:	0005883a 	mov	r2,zero
}
 40025d4:	e037883a 	mov	sp,fp
 40025d8:	dfc00117 	ldw	ra,4(sp)
 40025dc:	df000017 	ldw	fp,0(sp)
 40025e0:	dec00204 	addi	sp,sp,8
 40025e4:	f800283a 	ret

040025e8 <vid_round_corner_points>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
 40025e8:	defff604 	addi	sp,sp,-40
 40025ec:	dfc00915 	stw	ra,36(sp)
 40025f0:	df000815 	stw	fp,32(sp)
 40025f4:	df000804 	addi	fp,sp,32
 40025f8:	e13ffb15 	stw	r4,-20(fp)
 40025fc:	e17ffc15 	stw	r5,-16(fp)
 4002600:	e1bffd15 	stw	r6,-12(fp)
 4002604:	e1fffe15 	stw	r7,-8(fp)
 4002608:	e0800517 	ldw	r2,20(fp)
 400260c:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
 4002610:	e0bffd17 	ldw	r2,-12(fp)
 4002614:	1000861e 	bne	r2,zero,4002830 <vid_round_corner_points+0x248>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
 4002618:	e0fffc17 	ldw	r3,-16(fp)
 400261c:	e0bffe17 	ldw	r2,-8(fp)
 4002620:	1887883a 	add	r3,r3,r2
 4002624:	e0800317 	ldw	r2,12(fp)
 4002628:	1887883a 	add	r3,r3,r2
 400262c:	e0800417 	ldw	r2,16(fp)
 4002630:	e13ffb17 	ldw	r4,-20(fp)
 4002634:	180b883a 	mov	r5,r3
 4002638:	100d883a 	mov	r6,r2
 400263c:	e1c00617 	ldw	r7,24(fp)
 4002640:	4001b140 	call	4001b14 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
 4002644:	e0fffb17 	ldw	r3,-20(fp)
 4002648:	e0800217 	ldw	r2,8(fp)
 400264c:	1889883a 	add	r4,r3,r2
 4002650:	e0fffc17 	ldw	r3,-16(fp)
 4002654:	e0bffe17 	ldw	r2,-8(fp)
 4002658:	1887883a 	add	r3,r3,r2
 400265c:	e0800317 	ldw	r2,12(fp)
 4002660:	1887883a 	add	r3,r3,r2
 4002664:	e0800417 	ldw	r2,16(fp)
 4002668:	180b883a 	mov	r5,r3
 400266c:	100d883a 	mov	r6,r2
 4002670:	e1c00617 	ldw	r7,24(fp)
 4002674:	4001b140 	call	4001b14 <vid_set_pixel>
        // top
        vid_set_pixel(cx, cy - y, color, display);
 4002678:	e0fffc17 	ldw	r3,-16(fp)
 400267c:	e0bffe17 	ldw	r2,-8(fp)
 4002680:	1887c83a 	sub	r3,r3,r2
 4002684:	e0800417 	ldw	r2,16(fp)
 4002688:	e13ffb17 	ldw	r4,-20(fp)
 400268c:	180b883a 	mov	r5,r3
 4002690:	100d883a 	mov	r6,r2
 4002694:	e1c00617 	ldw	r7,24(fp)
 4002698:	4001b140 	call	4001b14 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
 400269c:	e0fffb17 	ldw	r3,-20(fp)
 40026a0:	e0800217 	ldw	r2,8(fp)
 40026a4:	1889883a 	add	r4,r3,r2
 40026a8:	e0fffc17 	ldw	r3,-16(fp)
 40026ac:	e0bffe17 	ldw	r2,-8(fp)
 40026b0:	1887c83a 	sub	r3,r3,r2
 40026b4:	e0800417 	ldw	r2,16(fp)
 40026b8:	180b883a 	mov	r5,r3
 40026bc:	100d883a 	mov	r6,r2
 40026c0:	e1c00617 	ldw	r7,24(fp)
 40026c4:	4001b140 	call	4001b14 <vid_set_pixel>

        if(fill) {
 40026c8:	e0bfff07 	ldb	r2,-4(fp)
 40026cc:	10002b26 	beq	r2,zero,400277c <vid_round_corner_points+0x194>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
 40026d0:	e0fffb17 	ldw	r3,-20(fp)
 40026d4:	e0bffe17 	ldw	r2,-8(fp)
 40026d8:	1887c83a 	sub	r3,r3,r2
 40026dc:	e13ffb17 	ldw	r4,-20(fp)
 40026e0:	e0bffe17 	ldw	r2,-8(fp)
 40026e4:	2089883a 	add	r4,r4,r2
 40026e8:	e0800217 	ldw	r2,8(fp)
 40026ec:	2085883a 	add	r2,r4,r2
 40026f0:	01000044 	movi	r4,1
 40026f4:	d9000015 	stw	r4,0(sp)
 40026f8:	e1000417 	ldw	r4,16(fp)
 40026fc:	d9000115 	stw	r4,4(sp)
 4002700:	e1000617 	ldw	r4,24(fp)
 4002704:	d9000215 	stw	r4,8(sp)
 4002708:	1809883a 	mov	r4,r3
 400270c:	e17ffc17 	ldw	r5,-16(fp)
 4002710:	100d883a 	mov	r6,r2
 4002714:	e1fffc17 	ldw	r7,-16(fp)
 4002718:	40010d00 	call	40010d0 <vid_draw_line>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
 400271c:	e0fffb17 	ldw	r3,-20(fp)
 4002720:	e0bffe17 	ldw	r2,-8(fp)
 4002724:	1889c83a 	sub	r4,r3,r2
 4002728:	e0fffc17 	ldw	r3,-16(fp)
 400272c:	e0800317 	ldw	r2,12(fp)
 4002730:	188b883a 	add	r5,r3,r2
 4002734:	e0fffb17 	ldw	r3,-20(fp)
 4002738:	e0bffe17 	ldw	r2,-8(fp)
 400273c:	1887883a 	add	r3,r3,r2
 4002740:	e0800217 	ldw	r2,8(fp)
 4002744:	1887883a 	add	r3,r3,r2
 4002748:	e1bffc17 	ldw	r6,-16(fp)
 400274c:	e0800317 	ldw	r2,12(fp)
 4002750:	3085883a 	add	r2,r6,r2
 4002754:	01800044 	movi	r6,1
 4002758:	d9800015 	stw	r6,0(sp)
 400275c:	e1800417 	ldw	r6,16(fp)
 4002760:	d9800115 	stw	r6,4(sp)
 4002764:	e1800617 	ldw	r6,24(fp)
 4002768:	d9800215 	stw	r6,8(sp)
 400276c:	180d883a 	mov	r6,r3
 4002770:	100f883a 	mov	r7,r2
 4002774:	40010d00 	call	40010d0 <vid_draw_line>
 4002778:	00016c06 	br	4002d2c <vid_round_corner_points+0x744>
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
 400277c:	e0fffb17 	ldw	r3,-20(fp)
 4002780:	e0bffe17 	ldw	r2,-8(fp)
 4002784:	1887883a 	add	r3,r3,r2
 4002788:	e0800217 	ldw	r2,8(fp)
 400278c:	1887883a 	add	r3,r3,r2
 4002790:	e0800417 	ldw	r2,16(fp)
 4002794:	1809883a 	mov	r4,r3
 4002798:	e17ffc17 	ldw	r5,-16(fp)
 400279c:	100d883a 	mov	r6,r2
 40027a0:	e1c00617 	ldw	r7,24(fp)
 40027a4:	4001b140 	call	4001b14 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
 40027a8:	e0fffb17 	ldw	r3,-20(fp)
 40027ac:	e0bffe17 	ldw	r2,-8(fp)
 40027b0:	1887883a 	add	r3,r3,r2
 40027b4:	e0800217 	ldw	r2,8(fp)
 40027b8:	1889883a 	add	r4,r3,r2
 40027bc:	e0fffc17 	ldw	r3,-16(fp)
 40027c0:	e0800317 	ldw	r2,12(fp)
 40027c4:	1887883a 	add	r3,r3,r2
 40027c8:	e0800417 	ldw	r2,16(fp)
 40027cc:	180b883a 	mov	r5,r3
 40027d0:	100d883a 	mov	r6,r2
 40027d4:	e1c00617 	ldw	r7,24(fp)
 40027d8:	4001b140 	call	4001b14 <vid_set_pixel>
          //left
          vid_set_pixel(cx - y, cy, color, display);
 40027dc:	e0fffb17 	ldw	r3,-20(fp)
 40027e0:	e0bffe17 	ldw	r2,-8(fp)
 40027e4:	1887c83a 	sub	r3,r3,r2
 40027e8:	e0800417 	ldw	r2,16(fp)
 40027ec:	1809883a 	mov	r4,r3
 40027f0:	e17ffc17 	ldw	r5,-16(fp)
 40027f4:	100d883a 	mov	r6,r2
 40027f8:	e1c00617 	ldw	r7,24(fp)
 40027fc:	4001b140 	call	4001b14 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
 4002800:	e0fffb17 	ldw	r3,-20(fp)
 4002804:	e0bffe17 	ldw	r2,-8(fp)
 4002808:	1889c83a 	sub	r4,r3,r2
 400280c:	e0fffc17 	ldw	r3,-16(fp)
 4002810:	e0800317 	ldw	r2,12(fp)
 4002814:	1887883a 	add	r3,r3,r2
 4002818:	e0800417 	ldw	r2,16(fp)
 400281c:	180b883a 	mov	r5,r3
 4002820:	100d883a 	mov	r6,r2
 4002824:	e1c00617 	ldw	r7,24(fp)
 4002828:	4001b140 	call	4001b14 <vid_set_pixel>
 400282c:	00013f06 	br	4002d2c <vid_round_corner_points+0x744>
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
 4002830:	e0fffd17 	ldw	r3,-12(fp)
 4002834:	e0bffe17 	ldw	r2,-8(fp)
 4002838:	18806a1e 	bne	r3,r2,40029e4 <vid_round_corner_points+0x3fc>
      if(fill) {
 400283c:	e0bfff07 	ldb	r2,-4(fp)
 4002840:	10003326 	beq	r2,zero,4002910 <vid_round_corner_points+0x328>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
 4002844:	e0fffb17 	ldw	r3,-20(fp)
 4002848:	e0bffd17 	ldw	r2,-12(fp)
 400284c:	1889c83a 	sub	r4,r3,r2
 4002850:	e0fffc17 	ldw	r3,-16(fp)
 4002854:	e0bffe17 	ldw	r2,-8(fp)
 4002858:	1887883a 	add	r3,r3,r2
 400285c:	e0800317 	ldw	r2,12(fp)
 4002860:	188b883a 	add	r5,r3,r2
 4002864:	e0fffb17 	ldw	r3,-20(fp)
 4002868:	e0bffd17 	ldw	r2,-12(fp)
 400286c:	1887883a 	add	r3,r3,r2
 4002870:	e0800217 	ldw	r2,8(fp)
 4002874:	1887883a 	add	r3,r3,r2
 4002878:	e1bffc17 	ldw	r6,-16(fp)
 400287c:	e0bffe17 	ldw	r2,-8(fp)
 4002880:	308d883a 	add	r6,r6,r2
 4002884:	e0800317 	ldw	r2,12(fp)
 4002888:	3085883a 	add	r2,r6,r2
 400288c:	01800044 	movi	r6,1
 4002890:	d9800015 	stw	r6,0(sp)
 4002894:	e1800417 	ldw	r6,16(fp)
 4002898:	d9800115 	stw	r6,4(sp)
 400289c:	e1800617 	ldw	r6,24(fp)
 40028a0:	d9800215 	stw	r6,8(sp)
 40028a4:	180d883a 	mov	r6,r3
 40028a8:	100f883a 	mov	r7,r2
 40028ac:	40010d00 	call	40010d0 <vid_draw_line>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
 40028b0:	e0fffb17 	ldw	r3,-20(fp)
 40028b4:	e0bffd17 	ldw	r2,-12(fp)
 40028b8:	1889c83a 	sub	r4,r3,r2
 40028bc:	e0fffc17 	ldw	r3,-16(fp)
 40028c0:	e0bffe17 	ldw	r2,-8(fp)
 40028c4:	188bc83a 	sub	r5,r3,r2
 40028c8:	e0fffb17 	ldw	r3,-20(fp)
 40028cc:	e0bffd17 	ldw	r2,-12(fp)
 40028d0:	1887883a 	add	r3,r3,r2
 40028d4:	e0800217 	ldw	r2,8(fp)
 40028d8:	1887883a 	add	r3,r3,r2
 40028dc:	e1bffc17 	ldw	r6,-16(fp)
 40028e0:	e0bffe17 	ldw	r2,-8(fp)
 40028e4:	3085c83a 	sub	r2,r6,r2
 40028e8:	01800044 	movi	r6,1
 40028ec:	d9800015 	stw	r6,0(sp)
 40028f0:	e1800417 	ldw	r6,16(fp)
 40028f4:	d9800115 	stw	r6,4(sp)
 40028f8:	e1800617 	ldw	r6,24(fp)
 40028fc:	d9800215 	stw	r6,8(sp)
 4002900:	180d883a 	mov	r6,r3
 4002904:	100f883a 	mov	r7,r2
 4002908:	40010d00 	call	40010d0 <vid_draw_line>
 400290c:	00010706 	br	4002d2c <vid_round_corner_points+0x744>
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
 4002910:	e0fffb17 	ldw	r3,-20(fp)
 4002914:	e0bffd17 	ldw	r2,-12(fp)
 4002918:	1887883a 	add	r3,r3,r2
 400291c:	e0800217 	ldw	r2,8(fp)
 4002920:	1889883a 	add	r4,r3,r2
 4002924:	e0fffc17 	ldw	r3,-16(fp)
 4002928:	e0bffe17 	ldw	r2,-8(fp)
 400292c:	1887883a 	add	r3,r3,r2
 4002930:	e0800317 	ldw	r2,12(fp)
 4002934:	1887883a 	add	r3,r3,r2
 4002938:	e0800417 	ldw	r2,16(fp)
 400293c:	180b883a 	mov	r5,r3
 4002940:	100d883a 	mov	r6,r2
 4002944:	e1c00617 	ldw	r7,24(fp)
 4002948:	4001b140 	call	4001b14 <vid_set_pixel>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
 400294c:	e0fffb17 	ldw	r3,-20(fp)
 4002950:	e0bffd17 	ldw	r2,-12(fp)
 4002954:	1889c83a 	sub	r4,r3,r2
 4002958:	e0fffc17 	ldw	r3,-16(fp)
 400295c:	e0bffe17 	ldw	r2,-8(fp)
 4002960:	1887883a 	add	r3,r3,r2
 4002964:	e0800317 	ldw	r2,12(fp)
 4002968:	1887883a 	add	r3,r3,r2
 400296c:	e0800417 	ldw	r2,16(fp)
 4002970:	180b883a 	mov	r5,r3
 4002974:	100d883a 	mov	r6,r2
 4002978:	e1c00617 	ldw	r7,24(fp)
 400297c:	4001b140 	call	4001b14 <vid_set_pixel>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
 4002980:	e0fffb17 	ldw	r3,-20(fp)
 4002984:	e0bffd17 	ldw	r2,-12(fp)
 4002988:	1887883a 	add	r3,r3,r2
 400298c:	e0800217 	ldw	r2,8(fp)
 4002990:	1889883a 	add	r4,r3,r2
 4002994:	e0fffc17 	ldw	r3,-16(fp)
 4002998:	e0bffe17 	ldw	r2,-8(fp)
 400299c:	1887c83a 	sub	r3,r3,r2
 40029a0:	e0800417 	ldw	r2,16(fp)
 40029a4:	180b883a 	mov	r5,r3
 40029a8:	100d883a 	mov	r6,r2
 40029ac:	e1c00617 	ldw	r7,24(fp)
 40029b0:	4001b140 	call	4001b14 <vid_set_pixel>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
 40029b4:	e0fffb17 	ldw	r3,-20(fp)
 40029b8:	e0bffd17 	ldw	r2,-12(fp)
 40029bc:	1889c83a 	sub	r4,r3,r2
 40029c0:	e0fffc17 	ldw	r3,-16(fp)
 40029c4:	e0bffe17 	ldw	r2,-8(fp)
 40029c8:	1887c83a 	sub	r3,r3,r2
 40029cc:	e0800417 	ldw	r2,16(fp)
 40029d0:	180b883a 	mov	r5,r3
 40029d4:	100d883a 	mov	r6,r2
 40029d8:	e1c00617 	ldw	r7,24(fp)
 40029dc:	4001b140 	call	4001b14 <vid_set_pixel>
 40029e0:	0000d206 	br	4002d2c <vid_round_corner_points+0x744>
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
 40029e4:	e0fffd17 	ldw	r3,-12(fp)
 40029e8:	e0bffe17 	ldw	r2,-8(fp)
 40029ec:	1880cf0e 	bge	r3,r2,4002d2c <vid_round_corner_points+0x744>
        if(fill) {
 40029f0:	e0bfff07 	ldb	r2,-4(fp)
 40029f4:	10006526 	beq	r2,zero,4002b8c <vid_round_corner_points+0x5a4>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
 40029f8:	e0fffb17 	ldw	r3,-20(fp)
 40029fc:	e0bffd17 	ldw	r2,-12(fp)
 4002a00:	1889c83a 	sub	r4,r3,r2
 4002a04:	e0fffc17 	ldw	r3,-16(fp)
 4002a08:	e0bffe17 	ldw	r2,-8(fp)
 4002a0c:	1887883a 	add	r3,r3,r2
 4002a10:	e0800317 	ldw	r2,12(fp)
 4002a14:	188b883a 	add	r5,r3,r2
 4002a18:	e0fffb17 	ldw	r3,-20(fp)
 4002a1c:	e0bffd17 	ldw	r2,-12(fp)
 4002a20:	1887883a 	add	r3,r3,r2
 4002a24:	e0800217 	ldw	r2,8(fp)
 4002a28:	1887883a 	add	r3,r3,r2
 4002a2c:	e1bffc17 	ldw	r6,-16(fp)
 4002a30:	e0bffe17 	ldw	r2,-8(fp)
 4002a34:	308d883a 	add	r6,r6,r2
 4002a38:	e0800317 	ldw	r2,12(fp)
 4002a3c:	3085883a 	add	r2,r6,r2
 4002a40:	01800044 	movi	r6,1
 4002a44:	d9800015 	stw	r6,0(sp)
 4002a48:	e1800417 	ldw	r6,16(fp)
 4002a4c:	d9800115 	stw	r6,4(sp)
 4002a50:	e1800617 	ldw	r6,24(fp)
 4002a54:	d9800215 	stw	r6,8(sp)
 4002a58:	180d883a 	mov	r6,r3
 4002a5c:	100f883a 	mov	r7,r2
 4002a60:	40010d00 	call	40010d0 <vid_draw_line>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
 4002a64:	e0fffb17 	ldw	r3,-20(fp)
 4002a68:	e0bffe17 	ldw	r2,-8(fp)
 4002a6c:	1889c83a 	sub	r4,r3,r2
 4002a70:	e0fffc17 	ldw	r3,-16(fp)
 4002a74:	e0bffd17 	ldw	r2,-12(fp)
 4002a78:	1887883a 	add	r3,r3,r2
 4002a7c:	e0800317 	ldw	r2,12(fp)
 4002a80:	188b883a 	add	r5,r3,r2
 4002a84:	e0fffb17 	ldw	r3,-20(fp)
 4002a88:	e0bffe17 	ldw	r2,-8(fp)
 4002a8c:	1887883a 	add	r3,r3,r2
 4002a90:	e0800217 	ldw	r2,8(fp)
 4002a94:	1887883a 	add	r3,r3,r2
 4002a98:	e1bffc17 	ldw	r6,-16(fp)
 4002a9c:	e0bffd17 	ldw	r2,-12(fp)
 4002aa0:	308d883a 	add	r6,r6,r2
 4002aa4:	e0800317 	ldw	r2,12(fp)
 4002aa8:	3085883a 	add	r2,r6,r2
 4002aac:	01800044 	movi	r6,1
 4002ab0:	d9800015 	stw	r6,0(sp)
 4002ab4:	e1800417 	ldw	r6,16(fp)
 4002ab8:	d9800115 	stw	r6,4(sp)
 4002abc:	e1800617 	ldw	r6,24(fp)
 4002ac0:	d9800215 	stw	r6,8(sp)
 4002ac4:	180d883a 	mov	r6,r3
 4002ac8:	100f883a 	mov	r7,r2
 4002acc:	40010d00 	call	40010d0 <vid_draw_line>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
 4002ad0:	e0fffb17 	ldw	r3,-20(fp)
 4002ad4:	e0bffe17 	ldw	r2,-8(fp)
 4002ad8:	1889c83a 	sub	r4,r3,r2
 4002adc:	e0fffc17 	ldw	r3,-16(fp)
 4002ae0:	e0bffd17 	ldw	r2,-12(fp)
 4002ae4:	188bc83a 	sub	r5,r3,r2
 4002ae8:	e0fffb17 	ldw	r3,-20(fp)
 4002aec:	e0bffe17 	ldw	r2,-8(fp)
 4002af0:	1887883a 	add	r3,r3,r2
 4002af4:	e0800217 	ldw	r2,8(fp)
 4002af8:	1887883a 	add	r3,r3,r2
 4002afc:	e1bffc17 	ldw	r6,-16(fp)
 4002b00:	e0bffd17 	ldw	r2,-12(fp)
 4002b04:	3085c83a 	sub	r2,r6,r2
 4002b08:	01800044 	movi	r6,1
 4002b0c:	d9800015 	stw	r6,0(sp)
 4002b10:	e1800417 	ldw	r6,16(fp)
 4002b14:	d9800115 	stw	r6,4(sp)
 4002b18:	e1800617 	ldw	r6,24(fp)
 4002b1c:	d9800215 	stw	r6,8(sp)
 4002b20:	180d883a 	mov	r6,r3
 4002b24:	100f883a 	mov	r7,r2
 4002b28:	40010d00 	call	40010d0 <vid_draw_line>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
 4002b2c:	e0fffb17 	ldw	r3,-20(fp)
 4002b30:	e0bffd17 	ldw	r2,-12(fp)
 4002b34:	1889c83a 	sub	r4,r3,r2
 4002b38:	e0fffc17 	ldw	r3,-16(fp)
 4002b3c:	e0bffe17 	ldw	r2,-8(fp)
 4002b40:	188bc83a 	sub	r5,r3,r2
 4002b44:	e0fffb17 	ldw	r3,-20(fp)
 4002b48:	e0bffd17 	ldw	r2,-12(fp)
 4002b4c:	1887883a 	add	r3,r3,r2
 4002b50:	e0800217 	ldw	r2,8(fp)
 4002b54:	1887883a 	add	r3,r3,r2
 4002b58:	e1bffc17 	ldw	r6,-16(fp)
 4002b5c:	e0bffe17 	ldw	r2,-8(fp)
 4002b60:	3085c83a 	sub	r2,r6,r2
 4002b64:	01800044 	movi	r6,1
 4002b68:	d9800015 	stw	r6,0(sp)
 4002b6c:	e1800417 	ldw	r6,16(fp)
 4002b70:	d9800115 	stw	r6,4(sp)
 4002b74:	e1800617 	ldw	r6,24(fp)
 4002b78:	d9800215 	stw	r6,8(sp)
 4002b7c:	180d883a 	mov	r6,r3
 4002b80:	100f883a 	mov	r7,r2
 4002b84:	40010d00 	call	40010d0 <vid_draw_line>
 4002b88:	00006806 	br	4002d2c <vid_round_corner_points+0x744>
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
 4002b8c:	e0fffb17 	ldw	r3,-20(fp)
 4002b90:	e0bffd17 	ldw	r2,-12(fp)
 4002b94:	1887883a 	add	r3,r3,r2
 4002b98:	e0800217 	ldw	r2,8(fp)
 4002b9c:	1889883a 	add	r4,r3,r2
 4002ba0:	e0fffc17 	ldw	r3,-16(fp)
 4002ba4:	e0bffe17 	ldw	r2,-8(fp)
 4002ba8:	1887883a 	add	r3,r3,r2
 4002bac:	e0800317 	ldw	r2,12(fp)
 4002bb0:	1887883a 	add	r3,r3,r2
 4002bb4:	e0800417 	ldw	r2,16(fp)
 4002bb8:	180b883a 	mov	r5,r3
 4002bbc:	100d883a 	mov	r6,r2
 4002bc0:	e1c00617 	ldw	r7,24(fp)
 4002bc4:	4001b140 	call	4001b14 <vid_set_pixel>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
 4002bc8:	e0fffb17 	ldw	r3,-20(fp)
 4002bcc:	e0bffd17 	ldw	r2,-12(fp)
 4002bd0:	1889c83a 	sub	r4,r3,r2
 4002bd4:	e0fffc17 	ldw	r3,-16(fp)
 4002bd8:	e0bffe17 	ldw	r2,-8(fp)
 4002bdc:	1887883a 	add	r3,r3,r2
 4002be0:	e0800317 	ldw	r2,12(fp)
 4002be4:	1887883a 	add	r3,r3,r2
 4002be8:	e0800417 	ldw	r2,16(fp)
 4002bec:	180b883a 	mov	r5,r3
 4002bf0:	100d883a 	mov	r6,r2
 4002bf4:	e1c00617 	ldw	r7,24(fp)
 4002bf8:	4001b140 	call	4001b14 <vid_set_pixel>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
 4002bfc:	e0fffb17 	ldw	r3,-20(fp)
 4002c00:	e0bffd17 	ldw	r2,-12(fp)
 4002c04:	1887883a 	add	r3,r3,r2
 4002c08:	e0800217 	ldw	r2,8(fp)
 4002c0c:	1889883a 	add	r4,r3,r2
 4002c10:	e0fffc17 	ldw	r3,-16(fp)
 4002c14:	e0bffe17 	ldw	r2,-8(fp)
 4002c18:	1887c83a 	sub	r3,r3,r2
 4002c1c:	e0800417 	ldw	r2,16(fp)
 4002c20:	180b883a 	mov	r5,r3
 4002c24:	100d883a 	mov	r6,r2
 4002c28:	e1c00617 	ldw	r7,24(fp)
 4002c2c:	4001b140 	call	4001b14 <vid_set_pixel>
          vid_set_pixel(cx - x, cy - y, color, display);
 4002c30:	e0fffb17 	ldw	r3,-20(fp)
 4002c34:	e0bffd17 	ldw	r2,-12(fp)
 4002c38:	1889c83a 	sub	r4,r3,r2
 4002c3c:	e0fffc17 	ldw	r3,-16(fp)
 4002c40:	e0bffe17 	ldw	r2,-8(fp)
 4002c44:	1887c83a 	sub	r3,r3,r2
 4002c48:	e0800417 	ldw	r2,16(fp)
 4002c4c:	180b883a 	mov	r5,r3
 4002c50:	100d883a 	mov	r6,r2
 4002c54:	e1c00617 	ldw	r7,24(fp)
 4002c58:	4001b140 	call	4001b14 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
 4002c5c:	e0fffb17 	ldw	r3,-20(fp)
 4002c60:	e0bffe17 	ldw	r2,-8(fp)
 4002c64:	1887883a 	add	r3,r3,r2
 4002c68:	e0800217 	ldw	r2,8(fp)
 4002c6c:	1889883a 	add	r4,r3,r2
 4002c70:	e0fffc17 	ldw	r3,-16(fp)
 4002c74:	e0bffd17 	ldw	r2,-12(fp)
 4002c78:	1887883a 	add	r3,r3,r2
 4002c7c:	e0800317 	ldw	r2,12(fp)
 4002c80:	1887883a 	add	r3,r3,r2
 4002c84:	e0800417 	ldw	r2,16(fp)
 4002c88:	180b883a 	mov	r5,r3
 4002c8c:	100d883a 	mov	r6,r2
 4002c90:	e1c00617 	ldw	r7,24(fp)
 4002c94:	4001b140 	call	4001b14 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
 4002c98:	e0fffb17 	ldw	r3,-20(fp)
 4002c9c:	e0bffe17 	ldw	r2,-8(fp)
 4002ca0:	1889c83a 	sub	r4,r3,r2
 4002ca4:	e0fffc17 	ldw	r3,-16(fp)
 4002ca8:	e0bffd17 	ldw	r2,-12(fp)
 4002cac:	1887883a 	add	r3,r3,r2
 4002cb0:	e0800317 	ldw	r2,12(fp)
 4002cb4:	1887883a 	add	r3,r3,r2
 4002cb8:	e0800417 	ldw	r2,16(fp)
 4002cbc:	180b883a 	mov	r5,r3
 4002cc0:	100d883a 	mov	r6,r2
 4002cc4:	e1c00617 	ldw	r7,24(fp)
 4002cc8:	4001b140 	call	4001b14 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
 4002ccc:	e0fffb17 	ldw	r3,-20(fp)
 4002cd0:	e0bffe17 	ldw	r2,-8(fp)
 4002cd4:	1887883a 	add	r3,r3,r2
 4002cd8:	e0800217 	ldw	r2,8(fp)
 4002cdc:	1889883a 	add	r4,r3,r2
 4002ce0:	e0fffc17 	ldw	r3,-16(fp)
 4002ce4:	e0bffd17 	ldw	r2,-12(fp)
 4002ce8:	1887c83a 	sub	r3,r3,r2
 4002cec:	e0800417 	ldw	r2,16(fp)
 4002cf0:	180b883a 	mov	r5,r3
 4002cf4:	100d883a 	mov	r6,r2
 4002cf8:	e1c00617 	ldw	r7,24(fp)
 4002cfc:	4001b140 	call	4001b14 <vid_set_pixel>
          vid_set_pixel(cx - y, cy - x, color, display);
 4002d00:	e0fffb17 	ldw	r3,-20(fp)
 4002d04:	e0bffe17 	ldw	r2,-8(fp)
 4002d08:	1889c83a 	sub	r4,r3,r2
 4002d0c:	e0fffc17 	ldw	r3,-16(fp)
 4002d10:	e0bffd17 	ldw	r2,-12(fp)
 4002d14:	1887c83a 	sub	r3,r3,r2
 4002d18:	e0800417 	ldw	r2,16(fp)
 4002d1c:	180b883a 	mov	r5,r3
 4002d20:	100d883a 	mov	r6,r2
 4002d24:	e1c00617 	ldw	r7,24(fp)
 4002d28:	4001b140 	call	4001b14 <vid_set_pixel>
        }
    }
}
 4002d2c:	e037883a 	mov	sp,fp
 4002d30:	dfc00117 	ldw	ra,4(sp)
 4002d34:	df000017 	ldw	fp,0(sp)
 4002d38:	dec00204 	addi	sp,sp,8
 4002d3c:	f800283a 	ret

04002d40 <max3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
__inline__ int max3( int a, int b, int c )
{
 4002d40:	defffc04 	addi	sp,sp,-16
 4002d44:	df000315 	stw	fp,12(sp)
 4002d48:	df000304 	addi	fp,sp,12
 4002d4c:	e13ffd15 	stw	r4,-12(fp)
 4002d50:	e17ffe15 	stw	r5,-8(fp)
 4002d54:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
 4002d58:	e0fffd17 	ldw	r3,-12(fp)
 4002d5c:	e0bffe17 	ldw	r2,-8(fp)
 4002d60:	1880020e 	bge	r3,r2,4002d6c <max3+0x2c>
    a = b;
 4002d64:	e0bffe17 	ldw	r2,-8(fp)
 4002d68:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
 4002d6c:	e0fffd17 	ldw	r3,-12(fp)
 4002d70:	e0bfff17 	ldw	r2,-4(fp)
 4002d74:	1880020e 	bge	r3,r2,4002d80 <max3+0x40>
    a = c;
 4002d78:	e0bfff17 	ldw	r2,-4(fp)
 4002d7c:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 4002d80:	e0bffd17 	ldw	r2,-12(fp)
}
 4002d84:	e037883a 	mov	sp,fp
 4002d88:	df000017 	ldw	fp,0(sp)
 4002d8c:	dec00104 	addi	sp,sp,4
 4002d90:	f800283a 	ret

04002d94 <min3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
__inline__ int min3( int a, int b, int c )
{
 4002d94:	defffc04 	addi	sp,sp,-16
 4002d98:	df000315 	stw	fp,12(sp)
 4002d9c:	df000304 	addi	fp,sp,12
 4002da0:	e13ffd15 	stw	r4,-12(fp)
 4002da4:	e17ffe15 	stw	r5,-8(fp)
 4002da8:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
 4002dac:	e0bffd17 	ldw	r2,-12(fp)
 4002db0:	e0fffe17 	ldw	r3,-8(fp)
 4002db4:	1880020e 	bge	r3,r2,4002dc0 <min3+0x2c>
    a = b;
 4002db8:	e0bffe17 	ldw	r2,-8(fp)
 4002dbc:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
 4002dc0:	e0bffd17 	ldw	r2,-12(fp)
 4002dc4:	e0ffff17 	ldw	r3,-4(fp)
 4002dc8:	1880020e 	bge	r3,r2,4002dd4 <min3+0x40>
    a = c;
 4002dcc:	e0bfff17 	ldw	r2,-4(fp)
 4002dd0:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 4002dd4:	e0bffd17 	ldw	r2,-12(fp)
}
 4002dd8:	e037883a 	mov	sp,fp
 4002ddc:	df000017 	ldw	fp,0(sp)
 4002de0:	dec00104 	addi	sp,sp,4
 4002de4:	f800283a 	ret

04002de8 <max_diff3>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
__inline__ int max_diff3(int a, int b, int c)
{
 4002de8:	defff904 	addi	sp,sp,-28
 4002dec:	dfc00615 	stw	ra,24(sp)
 4002df0:	df000515 	stw	fp,20(sp)
 4002df4:	df000504 	addi	fp,sp,20
 4002df8:	e13ffd15 	stw	r4,-12(fp)
 4002dfc:	e17ffe15 	stw	r5,-8(fp)
 4002e00:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
 4002e04:	e13ffd17 	ldw	r4,-12(fp)
 4002e08:	e17ffe17 	ldw	r5,-8(fp)
 4002e0c:	e1bfff17 	ldw	r6,-4(fp)
 4002e10:	4002d400 	call	4002d40 <max3>
 4002e14:	e0bffb15 	stw	r2,-20(fp)
  min = min3( a, b, c );
 4002e18:	e13ffd17 	ldw	r4,-12(fp)
 4002e1c:	e17ffe17 	ldw	r5,-8(fp)
 4002e20:	e1bfff17 	ldw	r6,-4(fp)
 4002e24:	4002d940 	call	4002d94 <min3>
 4002e28:	e0bffc15 	stw	r2,-16(fp)
  return (max - min);
 4002e2c:	e0fffb17 	ldw	r3,-20(fp)
 4002e30:	e0bffc17 	ldw	r2,-16(fp)
 4002e34:	1885c83a 	sub	r2,r3,r2
}
 4002e38:	e037883a 	mov	sp,fp
 4002e3c:	dfc00117 	ldw	ra,4(sp)
 4002e40:	df000017 	ldw	fp,0(sp)
 4002e44:	dec00204 	addi	sp,sp,8
 4002e48:	f800283a 	ret

04002e4c <vid_put_pixel_in_span_map>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
inline void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
 4002e4c:	defffc04 	addi	sp,sp,-16
 4002e50:	df000315 	stw	fp,12(sp)
 4002e54:	df000304 	addi	fp,sp,12
 4002e58:	e13ffd15 	stw	r4,-12(fp)
 4002e5c:	e17ffe15 	stw	r5,-8(fp)
 4002e60:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
 4002e64:	e0bffe17 	ldw	r2,-8(fp)
 4002e68:	100490fa 	slli	r2,r2,3
 4002e6c:	e0ffff17 	ldw	r3,-4(fp)
 4002e70:	1885883a 	add	r2,r3,r2
 4002e74:	10800017 	ldw	r2,0(r2)
 4002e78:	10bfffd8 	cmpnei	r2,r2,-1
 4002e7c:	10000e1e 	bne	r2,zero,4002eb8 <vid_put_pixel_in_span_map+0x6c>
  {
    span_array[y*2] = x;
 4002e80:	e0bffe17 	ldw	r2,-8(fp)
 4002e84:	100490fa 	slli	r2,r2,3
 4002e88:	e0ffff17 	ldw	r3,-4(fp)
 4002e8c:	1885883a 	add	r2,r3,r2
 4002e90:	e0fffd17 	ldw	r3,-12(fp)
 4002e94:	10c00015 	stw	r3,0(r2)
    span_array[(y*2)+1] = x;
 4002e98:	e0bffe17 	ldw	r2,-8(fp)
 4002e9c:	100490fa 	slli	r2,r2,3
 4002ea0:	10800104 	addi	r2,r2,4
 4002ea4:	e0ffff17 	ldw	r3,-4(fp)
 4002ea8:	1885883a 	add	r2,r3,r2
 4002eac:	e0fffd17 	ldw	r3,-12(fp)
 4002eb0:	10c00015 	stw	r3,0(r2)
 4002eb4:	00001d06 	br	4002f2c <vid_put_pixel_in_span_map+0xe0>
  }
  else if( span_array[y*2] > x )
 4002eb8:	e0bffe17 	ldw	r2,-8(fp)
 4002ebc:	100490fa 	slli	r2,r2,3
 4002ec0:	e0ffff17 	ldw	r3,-4(fp)
 4002ec4:	1885883a 	add	r2,r3,r2
 4002ec8:	10800017 	ldw	r2,0(r2)
 4002ecc:	e0fffd17 	ldw	r3,-12(fp)
 4002ed0:	1880070e 	bge	r3,r2,4002ef0 <vid_put_pixel_in_span_map+0xa4>
    span_array[y*2] = x;
 4002ed4:	e0bffe17 	ldw	r2,-8(fp)
 4002ed8:	100490fa 	slli	r2,r2,3
 4002edc:	e0ffff17 	ldw	r3,-4(fp)
 4002ee0:	1885883a 	add	r2,r3,r2
 4002ee4:	e0fffd17 	ldw	r3,-12(fp)
 4002ee8:	10c00015 	stw	r3,0(r2)
 4002eec:	00000f06 	br	4002f2c <vid_put_pixel_in_span_map+0xe0>
  else if( span_array[(y*2)+1] < x )
 4002ef0:	e0bffe17 	ldw	r2,-8(fp)
 4002ef4:	100490fa 	slli	r2,r2,3
 4002ef8:	10800104 	addi	r2,r2,4
 4002efc:	e0ffff17 	ldw	r3,-4(fp)
 4002f00:	1885883a 	add	r2,r3,r2
 4002f04:	10c00017 	ldw	r3,0(r2)
 4002f08:	e0bffd17 	ldw	r2,-12(fp)
 4002f0c:	1880070e 	bge	r3,r2,4002f2c <vid_put_pixel_in_span_map+0xe0>
    span_array[(y*2)+1] = x;
 4002f10:	e0bffe17 	ldw	r2,-8(fp)
 4002f14:	100490fa 	slli	r2,r2,3
 4002f18:	10800104 	addi	r2,r2,4
 4002f1c:	e0ffff17 	ldw	r3,-4(fp)
 4002f20:	1885883a 	add	r2,r3,r2
 4002f24:	e0fffd17 	ldw	r3,-12(fp)
 4002f28:	10c00015 	stw	r3,0(r2)
}
 4002f2c:	e037883a 	mov	sp,fp
 4002f30:	df000017 	ldw	fp,0(sp)
 4002f34:	dec00104 	addi	sp,sp,4
 4002f38:	f800283a 	ret

04002f3c <vid_bres_scan_edges>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
 4002f3c:	deffee04 	addi	sp,sp,-72
 4002f40:	dfc01115 	stw	ra,68(sp)
 4002f44:	df001015 	stw	fp,64(sp)
 4002f48:	df001004 	addi	fp,sp,64
 4002f4c:	e13ffc15 	stw	r4,-16(fp)
 4002f50:	e17ffd15 	stw	r5,-12(fp)
 4002f54:	e1bffe15 	stw	r6,-8(fp)
 4002f58:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
 4002f5c:	e0bffc17 	ldw	r2,-16(fp)
 4002f60:	e0fffe17 	ldw	r3,-8(fp)
 4002f64:	18800c0e 	bge	r3,r2,4002f98 <vid_bres_scan_edges+0x5c>
  {
    int tempx = x2;
 4002f68:	e0bffe17 	ldw	r2,-8(fp)
 4002f6c:	e0bff515 	stw	r2,-44(fp)
    x2 = x1;
 4002f70:	e0bffc17 	ldw	r2,-16(fp)
 4002f74:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
 4002f78:	e0bff517 	ldw	r2,-44(fp)
 4002f7c:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
 4002f80:	e0bfff17 	ldw	r2,-4(fp)
 4002f84:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
 4002f88:	e0bffd17 	ldw	r2,-12(fp)
 4002f8c:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
 4002f90:	e0bff617 	ldw	r2,-40(fp)
 4002f94:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
 4002f98:	e0fffd17 	ldw	r3,-12(fp)
 4002f9c:	e0bfff17 	ldw	r2,-4(fp)
 4002fa0:	1885c83a 	sub	r2,r3,r2
 4002fa4:	1000010e 	bge	r2,zero,4002fac <vid_bres_scan_edges+0x70>
 4002fa8:	0085c83a 	sub	r2,zero,r2
 4002fac:	e0bff115 	stw	r2,-60(fp)
  x_delta = (x2-x1);
 4002fb0:	e0fffe17 	ldw	r3,-8(fp)
 4002fb4:	e0bffc17 	ldw	r2,-16(fp)
 4002fb8:	1885c83a 	sub	r2,r3,r2
 4002fbc:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
 4002fc0:	e0bffd17 	ldw	r2,-12(fp)
 4002fc4:	e0ffff17 	ldw	r3,-4(fp)
 4002fc8:	1880030e 	bge	r3,r2,4002fd8 <vid_bres_scan_edges+0x9c>
 4002fcc:	00bfffc4 	movi	r2,-1
 4002fd0:	e0bff015 	stw	r2,-64(fp)
 4002fd4:	00000206 	br	4002fe0 <vid_bres_scan_edges+0xa4>
 4002fd8:	00800044 	movi	r2,1
 4002fdc:	e0bff015 	stw	r2,-64(fp)
  x_incr=1;
 4002fe0:	00800044 	movi	r2,1
 4002fe4:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
 4002fe8:	e0fff217 	ldw	r3,-56(fp)
 4002fec:	e0bff117 	ldw	r2,-60(fp)
 4002ff0:	18802e16 	blt	r3,r2,40030ac <vid_bres_scan_edges+0x170>
    int dPr   = y_delta<<1;
 4002ff4:	e0bff117 	ldw	r2,-60(fp)
 4002ff8:	1085883a 	add	r2,r2,r2
 4002ffc:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (x_delta<<1);
 4003000:	e0bff217 	ldw	r2,-56(fp)
 4003004:	1085883a 	add	r2,r2,r2
 4003008:	e0fff817 	ldw	r3,-32(fp)
 400300c:	1885c83a 	sub	r2,r3,r2
 4003010:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - x_delta;
 4003014:	e0fff817 	ldw	r3,-32(fp)
 4003018:	e0bff217 	ldw	r2,-56(fp)
 400301c:	1885c83a 	sub	r2,r3,r2
 4003020:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 4003024:	00001e06 	br	40030a0 <vid_bres_scan_edges+0x164>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 4003028:	e13ffc17 	ldw	r4,-16(fp)
 400302c:	e17ffd17 	ldw	r5,-12(fp)
 4003030:	e1800217 	ldw	r6,8(fp)
 4003034:	4002e4c0 	call	4002e4c <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 4003038:	e0bff317 	ldw	r2,-52(fp)
 400303c:	00800d0e 	bge	zero,r2,4003074 <vid_bres_scan_edges+0x138>
        x1+=x_incr;
 4003040:	e0fffc17 	ldw	r3,-16(fp)
 4003044:	e0bff717 	ldw	r2,-36(fp)
 4003048:	1885883a 	add	r2,r3,r2
 400304c:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 4003050:	e0fffd17 	ldw	r3,-12(fp)
 4003054:	e0bff017 	ldw	r2,-64(fp)
 4003058:	1885883a 	add	r2,r3,r2
 400305c:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 4003060:	e0fff317 	ldw	r3,-52(fp)
 4003064:	e0bff917 	ldw	r2,-28(fp)
 4003068:	1885883a 	add	r2,r3,r2
 400306c:	e0bff315 	stw	r2,-52(fp)
 4003070:	00000806 	br	4003094 <vid_bres_scan_edges+0x158>
      } else {
        x1+=x_incr;
 4003074:	e0fffc17 	ldw	r3,-16(fp)
 4003078:	e0bff717 	ldw	r2,-36(fp)
 400307c:	1885883a 	add	r2,r3,r2
 4003080:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
 4003084:	e0fff317 	ldw	r3,-52(fp)
 4003088:	e0bff817 	ldw	r2,-32(fp)
 400308c:	1885883a 	add	r2,r3,r2
 4003090:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 4003094:	e0bff217 	ldw	r2,-56(fp)
 4003098:	10bfffc4 	addi	r2,r2,-1
 400309c:	e0bff215 	stw	r2,-56(fp)
 40030a0:	e0bff217 	ldw	r2,-56(fp)
 40030a4:	103fe00e 	bge	r2,zero,4003028 <vid_bres_scan_edges+0xec>
 40030a8:	00002d06 	br	4003160 <vid_bres_scan_edges+0x224>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
 40030ac:	e0bff217 	ldw	r2,-56(fp)
 40030b0:	1085883a 	add	r2,r2,r2
 40030b4:	e0bffa15 	stw	r2,-24(fp)
    int dPru  = dPr - (y_delta<<1);
 40030b8:	e0bff117 	ldw	r2,-60(fp)
 40030bc:	1085883a 	add	r2,r2,r2
 40030c0:	e0fffa17 	ldw	r3,-24(fp)
 40030c4:	1885c83a 	sub	r2,r3,r2
 40030c8:	e0bffb15 	stw	r2,-20(fp)
    int P     = dPr - y_delta;
 40030cc:	e0fffa17 	ldw	r3,-24(fp)
 40030d0:	e0bff117 	ldw	r2,-60(fp)
 40030d4:	1885c83a 	sub	r2,r3,r2
 40030d8:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 40030dc:	00001e06 	br	4003158 <vid_bres_scan_edges+0x21c>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 40030e0:	e13ffc17 	ldw	r4,-16(fp)
 40030e4:	e17ffd17 	ldw	r5,-12(fp)
 40030e8:	e1800217 	ldw	r6,8(fp)
 40030ec:	4002e4c0 	call	4002e4c <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 40030f0:	e0bff417 	ldw	r2,-48(fp)
 40030f4:	00800d0e 	bge	zero,r2,400312c <vid_bres_scan_edges+0x1f0>
        x1+=x_incr;
 40030f8:	e0fffc17 	ldw	r3,-16(fp)
 40030fc:	e0bff717 	ldw	r2,-36(fp)
 4003100:	1885883a 	add	r2,r3,r2
 4003104:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 4003108:	e0fffd17 	ldw	r3,-12(fp)
 400310c:	e0bff017 	ldw	r2,-64(fp)
 4003110:	1885883a 	add	r2,r3,r2
 4003114:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 4003118:	e0fff417 	ldw	r3,-48(fp)
 400311c:	e0bffb17 	ldw	r2,-20(fp)
 4003120:	1885883a 	add	r2,r3,r2
 4003124:	e0bff415 	stw	r2,-48(fp)
 4003128:	00000806 	br	400314c <vid_bres_scan_edges+0x210>
      } else {
        y1+=y_incr;
 400312c:	e0fffd17 	ldw	r3,-12(fp)
 4003130:	e0bff017 	ldw	r2,-64(fp)
 4003134:	1885883a 	add	r2,r3,r2
 4003138:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
 400313c:	e0fff417 	ldw	r3,-48(fp)
 4003140:	e0bffa17 	ldw	r2,-24(fp)
 4003144:	1885883a 	add	r2,r3,r2
 4003148:	e0bff415 	stw	r2,-48(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 400314c:	e0bff117 	ldw	r2,-60(fp)
 4003150:	10bfffc4 	addi	r2,r2,-1
 4003154:	e0bff115 	stw	r2,-60(fp)
 4003158:	e0bff117 	ldw	r2,-60(fp)
 400315c:	103fe00e 	bge	r2,zero,40030e0 <vid_bres_scan_edges+0x1a4>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
 4003160:	e037883a 	mov	sp,fp
 4003164:	dfc00117 	ldw	ra,4(sp)
 4003168:	df000017 	ldw	fp,0(sp)
 400316c:	dec00204 	addi	sp,sp,8
 4003170:	f800283a 	ret

04003174 <vid_draw_triangle>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
 4003174:	defff804 	addi	sp,sp,-32
 4003178:	dfc00715 	stw	ra,28(sp)
 400317c:	df000615 	stw	fp,24(sp)
 4003180:	df000604 	addi	fp,sp,24
 4003184:	e13ffe15 	stw	r4,-8(fp)
 4003188:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 400318c:	e0bffe17 	ldw	r2,-8(fp)
 4003190:	11000017 	ldw	r4,0(r2)
 4003194:	e0bffe17 	ldw	r2,-8(fp)
 4003198:	11400317 	ldw	r5,12(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
 400319c:	e0bffe17 	ldw	r2,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 40031a0:	10c00117 	ldw	r3,4(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
 40031a4:	e0bffe17 	ldw	r2,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 40031a8:	10800417 	ldw	r2,16(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
 40031ac:	e1bffe17 	ldw	r6,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 40031b0:	31800a17 	ldw	r6,40(r6)
 40031b4:	01c00044 	movi	r7,1
 40031b8:	d9c00015 	stw	r7,0(sp)
 40031bc:	d9800115 	stw	r6,4(sp)
 40031c0:	e1bfff17 	ldw	r6,-4(fp)
 40031c4:	d9800215 	stw	r6,8(sp)
 40031c8:	180d883a 	mov	r6,r3
 40031cc:	100f883a 	mov	r7,r2
 40031d0:	40010d00 	call	40010d0 <vid_draw_line>
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 40031d4:	e0bffe17 	ldw	r2,-8(fp)
 40031d8:	11000117 	ldw	r4,4(r2)
 40031dc:	e0bffe17 	ldw	r2,-8(fp)
 40031e0:	11400417 	ldw	r5,16(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
 40031e4:	e0bffe17 	ldw	r2,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 40031e8:	10c00217 	ldw	r3,8(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
 40031ec:	e0bffe17 	ldw	r2,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 40031f0:	10800517 	ldw	r2,20(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
 40031f4:	e1bffe17 	ldw	r6,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 40031f8:	31800a17 	ldw	r6,40(r6)
 40031fc:	01c00044 	movi	r7,1
 4003200:	d9c00015 	stw	r7,0(sp)
 4003204:	d9800115 	stw	r6,4(sp)
 4003208:	e1bfff17 	ldw	r6,-4(fp)
 400320c:	d9800215 	stw	r6,8(sp)
 4003210:	180d883a 	mov	r6,r3
 4003214:	100f883a 	mov	r7,r2
 4003218:	40010d00 	call	40010d0 <vid_draw_line>
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 400321c:	e0bffe17 	ldw	r2,-8(fp)
 4003220:	11000217 	ldw	r4,8(r2)
 4003224:	e0bffe17 	ldw	r2,-8(fp)
 4003228:	11400517 	ldw	r5,20(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
 400322c:	e0bffe17 	ldw	r2,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 4003230:	10c00017 	ldw	r3,0(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
 4003234:	e0bffe17 	ldw	r2,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 4003238:	10800317 	ldw	r2,12(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
 400323c:	e1bffe17 	ldw	r6,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 4003240:	31800a17 	ldw	r6,40(r6)
 4003244:	01c00044 	movi	r7,1
 4003248:	d9c00015 	stw	r7,0(sp)
 400324c:	d9800115 	stw	r6,4(sp)
 4003250:	e1bfff17 	ldw	r6,-4(fp)
 4003254:	d9800215 	stw	r6,8(sp)
 4003258:	180d883a 	mov	r6,r3
 400325c:	100f883a 	mov	r7,r2
 4003260:	40010d00 	call	40010d0 <vid_draw_line>
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
 4003264:	e0bffe17 	ldw	r2,-8(fp)
 4003268:	10800b17 	ldw	r2,44(r2)
 400326c:	10800058 	cmpnei	r2,r2,1
 4003270:	1000a01e 	bne	r2,zero,40034f4 <vid_draw_triangle+0x380>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 4003274:	e0bffe17 	ldw	r2,-8(fp)
 4003278:	11000317 	ldw	r4,12(r2)
 400327c:	e0bffe17 	ldw	r2,-8(fp)
 4003280:	10c00417 	ldw	r3,16(r2)
 4003284:	e0bffe17 	ldw	r2,-8(fp)
 4003288:	10800517 	ldw	r2,20(r2)
 400328c:	180b883a 	mov	r5,r3
 4003290:	100d883a 	mov	r6,r2
 4003294:	4002d940 	call	4002d94 <min3>
 4003298:	e0fffe17 	ldw	r3,-8(fp)
 400329c:	18800815 	stw	r2,32(r3)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 40032a0:	e0bffe17 	ldw	r2,-8(fp)
 40032a4:	11000317 	ldw	r4,12(r2)
 40032a8:	e0bffe17 	ldw	r2,-8(fp)
 40032ac:	10c00417 	ldw	r3,16(r2)
 40032b0:	e0bffe17 	ldw	r2,-8(fp)
 40032b4:	10800517 	ldw	r2,20(r2)
 40032b8:	180b883a 	mov	r5,r3
 40032bc:	100d883a 	mov	r6,r2
 40032c0:	4002d400 	call	4002d40 <max3>
 40032c4:	e0fffe17 	ldw	r3,-8(fp)
 40032c8:	18800915 	stw	r2,36(r3)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 40032cc:	e0bffe17 	ldw	r2,-8(fp)
 40032d0:	11000317 	ldw	r4,12(r2)
 40032d4:	e0bffe17 	ldw	r2,-8(fp)
 40032d8:	10c00417 	ldw	r3,16(r2)
 40032dc:	e0bffe17 	ldw	r2,-8(fp)
 40032e0:	10800517 	ldw	r2,20(r2)
 40032e4:	180b883a 	mov	r5,r3
 40032e8:	100d883a 	mov	r6,r2
 40032ec:	4002de80 	call	4002de8 <max_diff3>
 40032f0:	e0fffe17 	ldw	r3,-8(fp)
 40032f4:	18800615 	stw	r2,24(r3)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
 40032f8:	e0bffe17 	ldw	r2,-8(fp)
 40032fc:	11000017 	ldw	r4,0(r2)
 4003300:	e0bffe17 	ldw	r2,-8(fp)
 4003304:	10c00117 	ldw	r3,4(r2)
 4003308:	e0bffe17 	ldw	r2,-8(fp)
 400330c:	10800217 	ldw	r2,8(r2)
 4003310:	180b883a 	mov	r5,r3
 4003314:	100d883a 	mov	r6,r2
 4003318:	4002de80 	call	4002de8 <max_diff3>
 400331c:	e0fffe17 	ldw	r3,-8(fp)
 4003320:	18800715 	stw	r2,28(r3)
    tri->span_array = malloc(display->height * 4 * 2);
 4003324:	e0bfff17 	ldw	r2,-4(fp)
 4003328:	10800217 	ldw	r2,8(r2)
 400332c:	100490fa 	slli	r2,r2,3
 4003330:	1009883a 	mov	r4,r2
 4003334:	40088d80 	call	40088d8 <malloc>
 4003338:	1007883a 	mov	r3,r2
 400333c:	e0bffe17 	ldw	r2,-8(fp)
 4003340:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 4003344:	e0bffe17 	ldw	r2,-8(fp)
 4003348:	10800817 	ldw	r2,32(r2)
 400334c:	e0bffd15 	stw	r2,-12(fp)
 4003350:	00001206 	br	400339c <vid_draw_triangle+0x228>
    {
      tri->span_array[i*2] = -1;
 4003354:	e0bffe17 	ldw	r2,-8(fp)
 4003358:	10c00d17 	ldw	r3,52(r2)
 400335c:	e0bffd17 	ldw	r2,-12(fp)
 4003360:	100490fa 	slli	r2,r2,3
 4003364:	1885883a 	add	r2,r3,r2
 4003368:	00ffffc4 	movi	r3,-1
 400336c:	10c00015 	stw	r3,0(r2)
      tri->span_array[(i*2) + 1] = -1;
 4003370:	e0bffe17 	ldw	r2,-8(fp)
 4003374:	10c00d17 	ldw	r3,52(r2)
 4003378:	e0bffd17 	ldw	r2,-12(fp)
 400337c:	100490fa 	slli	r2,r2,3
 4003380:	10800104 	addi	r2,r2,4
 4003384:	1885883a 	add	r2,r3,r2
 4003388:	00ffffc4 	movi	r3,-1
 400338c:	10c00015 	stw	r3,0(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 4003390:	e0bffd17 	ldw	r2,-12(fp)
 4003394:	10800044 	addi	r2,r2,1
 4003398:	e0bffd15 	stw	r2,-12(fp)
 400339c:	e0bffe17 	ldw	r2,-8(fp)
 40033a0:	10c00917 	ldw	r3,36(r2)
 40033a4:	e0bffd17 	ldw	r2,-12(fp)
 40033a8:	18bfea0e 	bge	r3,r2,4003354 <vid_draw_triangle+0x1e0>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 40033ac:	e0bffe17 	ldw	r2,-8(fp)
 40033b0:	11000017 	ldw	r4,0(r2)
 40033b4:	e0bffe17 	ldw	r2,-8(fp)
 40033b8:	11400317 	ldw	r5,12(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
 40033bc:	e0bffe17 	ldw	r2,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 40033c0:	10c00117 	ldw	r3,4(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
 40033c4:	e0bffe17 	ldw	r2,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 40033c8:	10800417 	ldw	r2,16(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
 40033cc:	e1bffe17 	ldw	r6,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 40033d0:	31800d17 	ldw	r6,52(r6)
 40033d4:	d9800015 	stw	r6,0(sp)
 40033d8:	180d883a 	mov	r6,r3
 40033dc:	100f883a 	mov	r7,r2
 40033e0:	4002f3c0 	call	4002f3c <vid_bres_scan_edges>
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 40033e4:	e0bffe17 	ldw	r2,-8(fp)
 40033e8:	11000117 	ldw	r4,4(r2)
 40033ec:	e0bffe17 	ldw	r2,-8(fp)
 40033f0:	11400417 	ldw	r5,16(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
 40033f4:	e0bffe17 	ldw	r2,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 40033f8:	10c00217 	ldw	r3,8(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
 40033fc:	e0bffe17 	ldw	r2,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 4003400:	10800517 	ldw	r2,20(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
 4003404:	e1bffe17 	ldw	r6,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 4003408:	31800d17 	ldw	r6,52(r6)
 400340c:	d9800015 	stw	r6,0(sp)
 4003410:	180d883a 	mov	r6,r3
 4003414:	100f883a 	mov	r7,r2
 4003418:	4002f3c0 	call	4002f3c <vid_bres_scan_edges>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 400341c:	e0bffe17 	ldw	r2,-8(fp)
 4003420:	11000217 	ldw	r4,8(r2)
 4003424:	e0bffe17 	ldw	r2,-8(fp)
 4003428:	11400517 	ldw	r5,20(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
 400342c:	e0bffe17 	ldw	r2,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 4003430:	10c00017 	ldw	r3,0(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
 4003434:	e0bffe17 	ldw	r2,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 4003438:	10800317 	ldw	r2,12(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
 400343c:	e1bffe17 	ldw	r6,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 4003440:	31800d17 	ldw	r6,52(r6)
 4003444:	d9800015 	stw	r6,0(sp)
 4003448:	180d883a 	mov	r6,r3
 400344c:	100f883a 	mov	r7,r2
 4003450:	4002f3c0 	call	4002f3c <vid_bres_scan_edges>
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 4003454:	e0bffe17 	ldw	r2,-8(fp)
 4003458:	10800817 	ldw	r2,32(r2)
 400345c:	e0bffd15 	stw	r2,-12(fp)
 4003460:	00001c06 	br	40034d4 <vid_draw_triangle+0x360>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
 4003464:	e0bffe17 	ldw	r2,-8(fp)
 4003468:	10c00d17 	ldw	r3,52(r2)
 400346c:	e0bffd17 	ldw	r2,-12(fp)
 4003470:	100490fa 	slli	r2,r2,3
 4003474:	1885883a 	add	r2,r3,r2
 4003478:	10c00017 	ldw	r3,0(r2)
 400347c:	e0bffe17 	ldw	r2,-8(fp)
 4003480:	11000d17 	ldw	r4,52(r2)
 4003484:	e0bffd17 	ldw	r2,-12(fp)
 4003488:	100490fa 	slli	r2,r2,3
 400348c:	10800104 	addi	r2,r2,4
 4003490:	2085883a 	add	r2,r4,r2
 4003494:	10800017 	ldw	r2,0(r2)
 4003498:	e13ffe17 	ldw	r4,-8(fp)
 400349c:	21000a17 	ldw	r4,40(r4)
 40034a0:	01400044 	movi	r5,1
 40034a4:	d9400015 	stw	r5,0(sp)
 40034a8:	d9000115 	stw	r4,4(sp)
 40034ac:	e13fff17 	ldw	r4,-4(fp)
 40034b0:	d9000215 	stw	r4,8(sp)
 40034b4:	1809883a 	mov	r4,r3
 40034b8:	e17ffd17 	ldw	r5,-12(fp)
 40034bc:	100d883a 	mov	r6,r2
 40034c0:	e1fffd17 	ldw	r7,-12(fp)
 40034c4:	40010d00 	call	40010d0 <vid_draw_line>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 40034c8:	e0bffd17 	ldw	r2,-12(fp)
 40034cc:	10800044 	addi	r2,r2,1
 40034d0:	e0bffd15 	stw	r2,-12(fp)
 40034d4:	e0bffe17 	ldw	r2,-8(fp)
 40034d8:	10c00917 	ldw	r3,36(r2)
 40034dc:	e0bffd17 	ldw	r2,-12(fp)
 40034e0:	18bfe00e 	bge	r3,r2,4003464 <vid_draw_triangle+0x2f0>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
 40034e4:	e0bffe17 	ldw	r2,-8(fp)
 40034e8:	10800d17 	ldw	r2,52(r2)
 40034ec:	1009883a 	mov	r4,r2
 40034f0:	40088ec0 	call	40088ec <free>
  }
}
 40034f4:	e037883a 	mov	sp,fp
 40034f8:	dfc00117 	ldw	ra,4(sp)
 40034fc:	df000017 	ldw	fp,0(sp)
 4003500:	dec00204 	addi	sp,sp,8
 4003504:	f800283a 	ret

04003508 <CopyImage16>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
 4003508:	defff404 	addi	sp,sp,-48
 400350c:	dfc00b15 	stw	ra,44(sp)
 4003510:	df000a15 	stw	fp,40(sp)
 4003514:	df000a04 	addi	fp,sp,40
 4003518:	e13ffa15 	stw	r4,-24(fp)
 400351c:	e17ffb15 	stw	r5,-20(fp)
 4003520:	3007883a 	mov	r3,r6
 4003524:	3805883a 	mov	r2,r7
 4003528:	e1400217 	ldw	r5,8(fp)
 400352c:	e1000317 	ldw	r4,12(fp)
 4003530:	e0fffc0d 	sth	r3,-16(fp)
 4003534:	e0bffd0d 	sth	r2,-12(fp)
 4003538:	e17ffe0d 	sth	r5,-8(fp)
 400353c:	e13fff0d 	sth	r4,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
 4003540:	e03ff815 	stw	zero,-32(fp)
  int y_dst_offset = 0;
 4003544:	e03ff915 	stw	zero,-28(fp)
  
  for( y_src = 0, y_dst = 0; 
 4003548:	e03ff615 	stw	zero,-40(fp)
 400354c:	e03ff715 	stw	zero,-36(fp)
 4003550:	00001b06 	br	40035c0 <CopyImage16+0xb8>
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4003554:	e0bff917 	ldw	r2,-28(fp)
 4003558:	1085883a 	add	r2,r2,r2
 400355c:	e0fffb17 	ldw	r3,-20(fp)
 4003560:	1889883a 	add	r4,r3,r2
 4003564:	e0bff817 	ldw	r2,-32(fp)
           ( source_buffer + y_src_offset ), 
 4003568:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 400356c:	e0fffa17 	ldw	r3,-24(fp)
 4003570:	1887883a 	add	r3,r3,r2
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
 4003574:	e0bffc0f 	ldh	r2,-16(fp)
 4003578:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 400357c:	180b883a 	mov	r5,r3
 4003580:	100d883a 	mov	r6,r2
 4003584:	40090840 	call	4009084 <memcpy>
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 4003588:	e0bff617 	ldw	r2,-40(fp)
 400358c:	10800044 	addi	r2,r2,1
 4003590:	e0bff615 	stw	r2,-40(fp)
 4003594:	e0bff717 	ldw	r2,-36(fp)
 4003598:	10800044 	addi	r2,r2,1
 400359c:	e0bff715 	stw	r2,-36(fp)
 40035a0:	e0bffc0f 	ldh	r2,-16(fp)
 40035a4:	e0fff817 	ldw	r3,-32(fp)
 40035a8:	1885883a 	add	r2,r3,r2
 40035ac:	e0bff815 	stw	r2,-32(fp)
 40035b0:	e0bffe0f 	ldh	r2,-8(fp)
 40035b4:	e0fff917 	ldw	r3,-28(fp)
 40035b8:	1885883a 	add	r2,r3,r2
 40035bc:	e0bff915 	stw	r2,-28(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
 40035c0:	e0bffd0f 	ldh	r2,-12(fp)
 40035c4:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
 40035c8:	e0bff617 	ldw	r2,-40(fp)
 40035cc:	18bfe10e 	bge	r3,r2,4003554 <CopyImage16+0x4c>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
 40035d0:	e037883a 	mov	sp,fp
 40035d4:	dfc00117 	ldw	ra,4(sp)
 40035d8:	df000017 	ldw	fp,0(sp)
 40035dc:	dec00204 	addi	sp,sp,8
 40035e0:	f800283a 	ret

040035e4 <CropImage16>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
 40035e4:	defff004 	addi	sp,sp,-64
 40035e8:	dfc00f15 	stw	ra,60(sp)
 40035ec:	df000e15 	stw	fp,56(sp)
 40035f0:	df000e04 	addi	fp,sp,56
 40035f4:	e13ff615 	stw	r4,-40(fp)
 40035f8:	e17ff715 	stw	r5,-36(fp)
 40035fc:	3007883a 	mov	r3,r6
 4003600:	3805883a 	mov	r2,r7
 4003604:	e2400217 	ldw	r9,8(fp)
 4003608:	e2000317 	ldw	r8,12(fp)
 400360c:	e1c00417 	ldw	r7,16(fp)
 4003610:	e1800517 	ldw	r6,20(fp)
 4003614:	e1400617 	ldw	r5,24(fp)
 4003618:	e1000717 	ldw	r4,28(fp)
 400361c:	e0fff80d 	sth	r3,-32(fp)
 4003620:	e0bff90d 	sth	r2,-28(fp)
 4003624:	e27ffa0d 	sth	r9,-24(fp)
 4003628:	e23ffb0d 	sth	r8,-20(fp)
 400362c:	e1fffc0d 	sth	r7,-16(fp)
 4003630:	e1bffd0d 	sth	r6,-12(fp)
 4003634:	e17ffe0d 	sth	r5,-8(fp)
 4003638:	e13fff0d 	sth	r4,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
 400363c:	e0fff80f 	ldh	r3,-32(fp)
 4003640:	e0bffc0f 	ldh	r2,-16(fp)
 4003644:	1885383a 	mul	r2,r3,r2
 4003648:	e0bff415 	stw	r2,-48(fp)
  int y_dst_offset = 0;
 400364c:	e03ff515 	stw	zero,-44(fp)
  
  for( y_src = crop_top, y_dst = 0; 
 4003650:	e0bffc0f 	ldh	r2,-16(fp)
 4003654:	e0bff215 	stw	r2,-56(fp)
 4003658:	e03ff315 	stw	zero,-52(fp)
 400365c:	00002106 	br	40036e4 <CropImage16+0x100>
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4003660:	e0bff517 	ldw	r2,-44(fp)
 4003664:	1085883a 	add	r2,r2,r2
 4003668:	e0fff717 	ldw	r3,-36(fp)
 400366c:	1889883a 	add	r4,r3,r2
           ( source_buffer + y_src_offset + crop_left ), 
 4003670:	e0fffa0f 	ldh	r3,-24(fp)
 4003674:	e0bff417 	ldw	r2,-48(fp)
 4003678:	1885883a 	add	r2,r3,r2
 400367c:	1085883a 	add	r2,r2,r2
 4003680:	e0fff617 	ldw	r3,-40(fp)
 4003684:	1887883a 	add	r3,r3,r2
           ((source_width - crop_left - crop_right) << 1));
 4003688:	e17ff80f 	ldh	r5,-32(fp)
 400368c:	e0bffa0f 	ldh	r2,-24(fp)
 4003690:	288bc83a 	sub	r5,r5,r2
 4003694:	e0bffb0f 	ldh	r2,-20(fp)
 4003698:	2885c83a 	sub	r2,r5,r2
 400369c:	1085883a 	add	r2,r2,r2
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 40036a0:	180b883a 	mov	r5,r3
 40036a4:	100d883a 	mov	r6,r2
 40036a8:	40090840 	call	4009084 <memcpy>
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 40036ac:	e0bff217 	ldw	r2,-56(fp)
 40036b0:	10800044 	addi	r2,r2,1
 40036b4:	e0bff215 	stw	r2,-56(fp)
 40036b8:	e0bff317 	ldw	r2,-52(fp)
 40036bc:	10800044 	addi	r2,r2,1
 40036c0:	e0bff315 	stw	r2,-52(fp)
 40036c4:	e0bff80f 	ldh	r2,-32(fp)
 40036c8:	e0fff417 	ldw	r3,-48(fp)
 40036cc:	1885883a 	add	r2,r3,r2
 40036d0:	e0bff415 	stw	r2,-48(fp)
 40036d4:	e0bffe0f 	ldh	r2,-8(fp)
 40036d8:	e0fff517 	ldw	r3,-44(fp)
 40036dc:	1885883a 	add	r2,r3,r2
 40036e0:	e0bff515 	stw	r2,-44(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
 40036e4:	e0fff90f 	ldh	r3,-28(fp)
 40036e8:	e0bffd0f 	ldh	r2,-12(fp)
 40036ec:	1885c83a 	sub	r2,r3,r2
 40036f0:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
 40036f4:	e0bff217 	ldw	r2,-56(fp)
 40036f8:	18bfd90e 	bge	r3,r2,4003660 <CropImage16+0x7c>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
 40036fc:	e037883a 	mov	sp,fp
 4003700:	dfc00117 	ldw	ra,4(sp)
 4003704:	df000017 	ldw	fp,0(sp)
 4003708:	dec00204 	addi	sp,sp,8
 400370c:	f800283a 	ret

04003710 <vid_print_string_alpha>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
 4003710:	defff404 	addi	sp,sp,-48
 4003714:	dfc00b15 	stw	ra,44(sp)
 4003718:	df000a15 	stw	fp,40(sp)
 400371c:	df000a04 	addi	fp,sp,40
 4003720:	e13ffc15 	stw	r4,-16(fp)
 4003724:	e17ffd15 	stw	r5,-12(fp)
 4003728:	e1bffe15 	stw	r6,-8(fp)
 400372c:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 4003730:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 4003734:	e0bffc17 	ldw	r2,-16(fp)
 4003738:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 400373c:	00007d06 	br	4003934 <vid_print_string_alpha+0x224>
    //Handle newline char here.
    if (string[i] == '\n') {
 4003740:	e0bff917 	ldw	r2,-28(fp)
 4003744:	e0c00417 	ldw	r3,16(fp)
 4003748:	1885883a 	add	r2,r3,r2
 400374c:	10800003 	ldbu	r2,0(r2)
 4003750:	10803fcc 	andi	r2,r2,255
 4003754:	1080201c 	xori	r2,r2,128
 4003758:	10bfe004 	addi	r2,r2,-128
 400375c:	10800298 	cmpnei	r2,r2,10
 4003760:	10000c1e 	bne	r2,zero,4003794 <vid_print_string_alpha+0x84>
      horiz_offset = original_horiz_offset;
 4003764:	e0bffb17 	ldw	r2,-20(fp)
 4003768:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
 400376c:	e0800217 	ldw	r2,8(fp)
 4003770:	1082d804 	addi	r2,r2,2912
 4003774:	10c00517 	ldw	r3,20(r2)
 4003778:	e0bffd17 	ldw	r2,-12(fp)
 400377c:	1885883a 	add	r2,r3,r2
 4003780:	e0bffd15 	stw	r2,-12(fp)
      i++;
 4003784:	e0bff917 	ldw	r2,-28(fp)
 4003788:	10800044 	addi	r2,r2,1
 400378c:	e0bff915 	stw	r2,-28(fp)
      continue;
 4003790:	00006806 	br	4003934 <vid_print_string_alpha+0x224>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
 4003794:	e0bff917 	ldw	r2,-28(fp)
 4003798:	e0c00417 	ldw	r3,16(fp)
 400379c:	1885883a 	add	r2,r3,r2
 40037a0:	10800003 	ldbu	r2,0(r2)
 40037a4:	10803fcc 	andi	r2,r2,255
 40037a8:	1080201c 	xori	r2,r2,128
 40037ac:	10bfe004 	addi	r2,r2,-128
 40037b0:	10800818 	cmpnei	r2,r2,32
 40037b4:	1000151e 	bne	r2,zero,400380c <vid_print_string_alpha+0xfc>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 40037b8:	e0bfff17 	ldw	r2,-4(fp)
 40037bc:	10bfffe0 	cmpeqi	r2,r2,-1
 40037c0:	10000b1e 	bne	r2,zero,40037f0 <vid_print_string_alpha+0xe0>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 40037c4:	e0bfff17 	ldw	r2,-4(fp)
 40037c8:	d8800015 	stw	r2,0(sp)
 40037cc:	e0800217 	ldw	r2,8(fp)
 40037d0:	d8800115 	stw	r2,4(sp)
 40037d4:	e0800317 	ldw	r2,12(fp)
 40037d8:	d8800215 	stw	r2,8(sp)
 40037dc:	e13ffc17 	ldw	r4,-16(fp)
 40037e0:	e17ffd17 	ldw	r5,-12(fp)
 40037e4:	e1bfff17 	ldw	r6,-4(fp)
 40037e8:	01c00b44 	movi	r7,45
 40037ec:	4003e9c0 	call	4003e9c <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 40037f0:	e0800217 	ldw	r2,8(fp)
 40037f4:	10806004 	addi	r2,r2,384
 40037f8:	10c00417 	ldw	r3,16(r2)
 40037fc:	e0bffc17 	ldw	r2,-16(fp)
 4003800:	1885883a 	add	r2,r3,r2
 4003804:	e0bffc15 	stw	r2,-16(fp)
 4003808:	00004706 	br	4003928 <vid_print_string_alpha+0x218>
    }
    else if(string[i] == '\t')  // this is a tab
 400380c:	e0bff917 	ldw	r2,-28(fp)
 4003810:	e0c00417 	ldw	r3,16(fp)
 4003814:	1885883a 	add	r2,r3,r2
 4003818:	10800003 	ldbu	r2,0(r2)
 400381c:	10803fcc 	andi	r2,r2,255
 4003820:	1080201c 	xori	r2,r2,128
 4003824:	10bfe004 	addi	r2,r2,-128
 4003828:	10800258 	cmpnei	r2,r2,9
 400382c:	10001d1e 	bne	r2,zero,40038a4 <vid_print_string_alpha+0x194>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 4003830:	e03ffa15 	stw	zero,-24(fp)
 4003834:	00001706 	br	4003894 <vid_print_string_alpha+0x184>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 4003838:	e0bfff17 	ldw	r2,-4(fp)
 400383c:	10bfffe0 	cmpeqi	r2,r2,-1
 4003840:	10000b1e 	bne	r2,zero,4003870 <vid_print_string_alpha+0x160>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 4003844:	e0bfff17 	ldw	r2,-4(fp)
 4003848:	d8800015 	stw	r2,0(sp)
 400384c:	e0800217 	ldw	r2,8(fp)
 4003850:	d8800115 	stw	r2,4(sp)
 4003854:	e0800317 	ldw	r2,12(fp)
 4003858:	d8800215 	stw	r2,8(sp)
 400385c:	e13ffc17 	ldw	r4,-16(fp)
 4003860:	e17ffd17 	ldw	r5,-12(fp)
 4003864:	e1bfff17 	ldw	r6,-4(fp)
 4003868:	01c00b44 	movi	r7,45
 400386c:	4003e9c0 	call	4003e9c <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 4003870:	e0800217 	ldw	r2,8(fp)
 4003874:	10806004 	addi	r2,r2,384
 4003878:	10c00417 	ldw	r3,16(r2)
 400387c:	e0bffc17 	ldw	r2,-16(fp)
 4003880:	1885883a 	add	r2,r3,r2
 4003884:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 4003888:	e0bffa17 	ldw	r2,-24(fp)
 400388c:	10800044 	addi	r2,r2,1
 4003890:	e0bffa15 	stw	r2,-24(fp)
 4003894:	e0bffa17 	ldw	r2,-24(fp)
 4003898:	10800090 	cmplti	r2,r2,2
 400389c:	103fe61e 	bne	r2,zero,4003838 <vid_print_string_alpha+0x128>
 40038a0:	00002106 	br	4003928 <vid_print_string_alpha+0x218>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
 40038a4:	e0bff917 	ldw	r2,-28(fp)
 40038a8:	e0c00417 	ldw	r3,16(fp)
 40038ac:	1885883a 	add	r2,r3,r2
 40038b0:	10800003 	ldbu	r2,0(r2)
 40038b4:	10803fcc 	andi	r2,r2,255
 40038b8:	1080201c 	xori	r2,r2,128
 40038bc:	10bfe004 	addi	r2,r2,-128
 40038c0:	e0ffff17 	ldw	r3,-4(fp)
 40038c4:	d8c00015 	stw	r3,0(sp)
 40038c8:	e0c00217 	ldw	r3,8(fp)
 40038cc:	d8c00115 	stw	r3,4(sp)
 40038d0:	e0c00317 	ldw	r3,12(fp)
 40038d4:	d8c00215 	stw	r3,8(sp)
 40038d8:	e13ffc17 	ldw	r4,-16(fp)
 40038dc:	e17ffd17 	ldw	r5,-12(fp)
 40038e0:	e1bffe17 	ldw	r6,-8(fp)
 40038e4:	100f883a 	mov	r7,r2
 40038e8:	4003e9c0 	call	4003e9c <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
 40038ec:	e0bff917 	ldw	r2,-28(fp)
 40038f0:	e0c00417 	ldw	r3,16(fp)
 40038f4:	1885883a 	add	r2,r3,r2
 40038f8:	10800003 	ldbu	r2,0(r2)
 40038fc:	10803fcc 	andi	r2,r2,255
 4003900:	1080201c 	xori	r2,r2,128
 4003904:	10bfe004 	addi	r2,r2,-128
 4003908:	10bff7c4 	addi	r2,r2,-33
 400390c:	1004917a 	slli	r2,r2,5
 4003910:	e0c00217 	ldw	r3,8(fp)
 4003914:	1885883a 	add	r2,r3,r2
 4003918:	10c00417 	ldw	r3,16(r2)
 400391c:	e0bffc17 	ldw	r2,-16(fp)
 4003920:	1885883a 	add	r2,r3,r2
 4003924:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
 4003928:	e0bff917 	ldw	r2,-28(fp)
 400392c:	10800044 	addi	r2,r2,1
 4003930:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4003934:	e0bff917 	ldw	r2,-28(fp)
 4003938:	e0c00417 	ldw	r3,16(fp)
 400393c:	1885883a 	add	r2,r3,r2
 4003940:	10800003 	ldbu	r2,0(r2)
 4003944:	10803fcc 	andi	r2,r2,255
 4003948:	1080201c 	xori	r2,r2,128
 400394c:	10bfe004 	addi	r2,r2,-128
 4003950:	103f7b1e 	bne	r2,zero,4003740 <vid_print_string_alpha+0x30>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
 4003954:	0005883a 	mov	r2,zero
}
 4003958:	e037883a 	mov	sp,fp
 400395c:	dfc00117 	ldw	ra,4(sp)
 4003960:	df000017 	ldw	fp,0(sp)
 4003964:	dec00204 	addi	sp,sp,8
 4003968:	f800283a 	ret

0400396c <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

__inline__ int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
 400396c:	defff904 	addi	sp,sp,-28
 4003970:	df000615 	stw	fp,24(sp)
 4003974:	df000604 	addi	fp,sp,24
 4003978:	e13ffc15 	stw	r4,-16(fp)
 400397c:	e17ffd15 	stw	r5,-12(fp)
 4003980:	e1bffe15 	stw	r6,-8(fp)
 4003984:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
 4003988:	e03ffb0d 	sth	zero,-20(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
 400398c:	e0bffc17 	ldw	r2,-16(fp)
 4003990:	10800418 	cmpnei	r2,r2,16
 4003994:	1000231e 	bne	r2,zero,4003a24 <seperate_color_channels+0xb8>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
 4003998:	e0bffd17 	ldw	r2,-12(fp)
 400399c:	10800003 	ldbu	r2,0(r2)
 40039a0:	10803fcc 	andi	r2,r2,255
 40039a4:	e0bffb0d 	sth	r2,-20(fp)
 40039a8:	e0bffd17 	ldw	r2,-12(fp)
 40039ac:	10800044 	addi	r2,r2,1
 40039b0:	e0bffd15 	stw	r2,-12(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
 40039b4:	e0bffd17 	ldw	r2,-12(fp)
 40039b8:	10800003 	ldbu	r2,0(r2)
 40039bc:	10803fcc 	andi	r2,r2,255
 40039c0:	1004923a 	slli	r2,r2,8
 40039c4:	1007883a 	mov	r3,r2
 40039c8:	e0bffb0b 	ldhu	r2,-20(fp)
 40039cc:	1885883a 	add	r2,r3,r2
 40039d0:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F; 
 40039d4:	e0bffb0b 	ldhu	r2,-20(fp)
 40039d8:	108007cc 	andi	r2,r2,31
 40039dc:	1007883a 	mov	r3,r2
 40039e0:	e0800117 	ldw	r2,4(fp)
 40039e4:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
 40039e8:	e0bffb0b 	ldhu	r2,-20(fp)
 40039ec:	1004d17a 	srli	r2,r2,5
 40039f0:	10800fcc 	andi	r2,r2,63
 40039f4:	1007883a 	mov	r3,r2
 40039f8:	e0bfff17 	ldw	r2,-4(fp)
 40039fc:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
 4003a00:	e0bffb0b 	ldhu	r2,-20(fp)
 4003a04:	1004d2fa 	srli	r2,r2,11
 4003a08:	108007cc 	andi	r2,r2,31
 4003a0c:	1007883a 	mov	r3,r2
 4003a10:	e0bffe17 	ldw	r2,-8(fp)
 4003a14:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4003a18:	00800044 	movi	r2,1
 4003a1c:	e0bffa15 	stw	r2,-24(fp)
 4003a20:	00002206 	br	4003aac <seperate_color_channels+0x140>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 4003a24:	e0bffc17 	ldw	r2,-16(fp)
 4003a28:	10800620 	cmpeqi	r2,r2,24
 4003a2c:	1000031e 	bne	r2,zero,4003a3c <seperate_color_channels+0xd0>
 4003a30:	e0bffc17 	ldw	r2,-16(fp)
 4003a34:	10800818 	cmpnei	r2,r2,32
 4003a38:	1000151e 	bne	r2,zero,4003a90 <seperate_color_channels+0x124>
  {
    *blue = *color++;
 4003a3c:	e0bffd17 	ldw	r2,-12(fp)
 4003a40:	10c00003 	ldbu	r3,0(r2)
 4003a44:	e0800117 	ldw	r2,4(fp)
 4003a48:	10c00005 	stb	r3,0(r2)
 4003a4c:	e0bffd17 	ldw	r2,-12(fp)
 4003a50:	10800044 	addi	r2,r2,1
 4003a54:	e0bffd15 	stw	r2,-12(fp)
    *green = *color++;
 4003a58:	e0bffd17 	ldw	r2,-12(fp)
 4003a5c:	10c00003 	ldbu	r3,0(r2)
 4003a60:	e0bfff17 	ldw	r2,-4(fp)
 4003a64:	10c00005 	stb	r3,0(r2)
 4003a68:	e0bffd17 	ldw	r2,-12(fp)
 4003a6c:	10800044 	addi	r2,r2,1
 4003a70:	e0bffd15 	stw	r2,-12(fp)
    *red = *color;   
 4003a74:	e0bffd17 	ldw	r2,-12(fp)
 4003a78:	10c00003 	ldbu	r3,0(r2)
 4003a7c:	e0bffe17 	ldw	r2,-8(fp)
 4003a80:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4003a84:	00800044 	movi	r2,1
 4003a88:	e0bffa15 	stw	r2,-24(fp)
 4003a8c:	00000706 	br	4003aac <seperate_color_channels+0x140>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
 4003a90:	e0bffe17 	ldw	r2,-8(fp)
 4003a94:	10000005 	stb	zero,0(r2)
    *green = 0;
 4003a98:	e0bfff17 	ldw	r2,-4(fp)
 4003a9c:	10000005 	stb	zero,0(r2)
    *blue = 0;    
 4003aa0:	e0800117 	ldw	r2,4(fp)
 4003aa4:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 4003aa8:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
 4003aac:	e0bffa17 	ldw	r2,-24(fp)
}
 4003ab0:	e037883a 	mov	sp,fp
 4003ab4:	df000017 	ldw	fp,0(sp)
 4003ab8:	dec00104 	addi	sp,sp,4
 4003abc:	f800283a 	ret

04003ac0 <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

__inline__ int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
 4003ac0:	defff904 	addi	sp,sp,-28
 4003ac4:	df000615 	stw	fp,24(sp)
 4003ac8:	df000604 	addi	fp,sp,24
 4003acc:	e13ffc15 	stw	r4,-16(fp)
 4003ad0:	2809883a 	mov	r4,r5
 4003ad4:	3007883a 	mov	r3,r6
 4003ad8:	3805883a 	mov	r2,r7
 4003adc:	e13ffd05 	stb	r4,-12(fp)
 4003ae0:	e0fffe05 	stb	r3,-8(fp)
 4003ae4:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
 4003ae8:	e0bffc17 	ldw	r2,-16(fp)
 4003aec:	10800418 	cmpnei	r2,r2,16
 4003af0:	10001b1e 	bne	r2,zero,4003b60 <merge_color_channels+0xa0>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
 4003af4:	e0bfff03 	ldbu	r2,-4(fp)
 4003af8:	108007cc 	andi	r2,r2,31
 4003afc:	1007883a 	mov	r3,r2
 4003b00:	e0bffe03 	ldbu	r2,-8(fp)
 4003b04:	10800fcc 	andi	r2,r2,63
 4003b08:	1004917a 	slli	r2,r2,5
 4003b0c:	1884b03a 	or	r2,r3,r2
 4003b10:	1007883a 	mov	r3,r2
 4003b14:	e0bffd03 	ldbu	r2,-12(fp)
 4003b18:	100492fa 	slli	r2,r2,11
 4003b1c:	1884b03a 	or	r2,r3,r2
 4003b20:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
 4003b24:	e0bffb0b 	ldhu	r2,-20(fp)
 4003b28:	1007883a 	mov	r3,r2
 4003b2c:	e0800117 	ldw	r2,4(fp)
 4003b30:	10c00005 	stb	r3,0(r2)
 4003b34:	e0800117 	ldw	r2,4(fp)
 4003b38:	10800044 	addi	r2,r2,1
 4003b3c:	e0800115 	stw	r2,4(fp)
    *color = (temp_color >> 8) & 0xFF;
 4003b40:	e0bffb0b 	ldhu	r2,-20(fp)
 4003b44:	1004d23a 	srli	r2,r2,8
 4003b48:	1007883a 	mov	r3,r2
 4003b4c:	e0800117 	ldw	r2,4(fp)
 4003b50:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4003b54:	00800044 	movi	r2,1
 4003b58:	e0bffa15 	stw	r2,-24(fp)
 4003b5c:	00002506 	br	4003bf4 <merge_color_channels+0x134>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 4003b60:	e0bffc17 	ldw	r2,-16(fp)
 4003b64:	10800620 	cmpeqi	r2,r2,24
 4003b68:	1000031e 	bne	r2,zero,4003b78 <merge_color_channels+0xb8>
 4003b6c:	e0bffc17 	ldw	r2,-16(fp)
 4003b70:	10800818 	cmpnei	r2,r2,32
 4003b74:	1000121e 	bne	r2,zero,4003bc0 <merge_color_channels+0x100>
  {
    *color++ = blue;
 4003b78:	e0800117 	ldw	r2,4(fp)
 4003b7c:	e0ffff03 	ldbu	r3,-4(fp)
 4003b80:	10c00005 	stb	r3,0(r2)
 4003b84:	e0800117 	ldw	r2,4(fp)
 4003b88:	10800044 	addi	r2,r2,1
 4003b8c:	e0800115 	stw	r2,4(fp)
    *color++ = green;
 4003b90:	e0800117 	ldw	r2,4(fp)
 4003b94:	e0fffe03 	ldbu	r3,-8(fp)
 4003b98:	10c00005 	stb	r3,0(r2)
 4003b9c:	e0800117 	ldw	r2,4(fp)
 4003ba0:	10800044 	addi	r2,r2,1
 4003ba4:	e0800115 	stw	r2,4(fp)
    *color = red;
 4003ba8:	e0800117 	ldw	r2,4(fp)
 4003bac:	e0fffd03 	ldbu	r3,-12(fp)
 4003bb0:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 4003bb4:	00800044 	movi	r2,1
 4003bb8:	e0bffa15 	stw	r2,-24(fp)
 4003bbc:	00000d06 	br	4003bf4 <merge_color_channels+0x134>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
 4003bc0:	e0800117 	ldw	r2,4(fp)
 4003bc4:	10000005 	stb	zero,0(r2)
 4003bc8:	e0800117 	ldw	r2,4(fp)
 4003bcc:	10800044 	addi	r2,r2,1
 4003bd0:	e0800115 	stw	r2,4(fp)
    *color++ = 0;
 4003bd4:	e0800117 	ldw	r2,4(fp)
 4003bd8:	10000005 	stb	zero,0(r2)
 4003bdc:	e0800117 	ldw	r2,4(fp)
 4003be0:	10800044 	addi	r2,r2,1
 4003be4:	e0800115 	stw	r2,4(fp)
    *color = 0;
 4003be8:	e0800117 	ldw	r2,4(fp)
 4003bec:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 4003bf0:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;  
 4003bf4:	e0bffa17 	ldw	r2,-24(fp)
}
 4003bf8:	e037883a 	mov	sp,fp
 4003bfc:	df000017 	ldw	fp,0(sp)
 4003c00:	dec00104 	addi	sp,sp,4
 4003c04:	f800283a 	ret

04003c08 <read_from_frame>:
*           needed to calculate the new one.
*
******************************************************************/

__inline__ int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 4003c08:	defffa04 	addi	sp,sp,-24
 4003c0c:	dfc00515 	stw	ra,20(sp)
 4003c10:	df000415 	stw	fp,16(sp)
 4003c14:	df000404 	addi	fp,sp,16
 4003c18:	e13ffc15 	stw	r4,-16(fp)
 4003c1c:	e17ffd15 	stw	r5,-12(fp)
 4003c20:	e1bffe15 	stw	r6,-8(fp)
 4003c24:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("read_from_frame is not implemented!\r\n");
 4003c28:	010100f4 	movhi	r4,1027
 4003c2c:	21355c04 	addi	r4,r4,-10896
 4003c30:	40093440 	call	4009344 <puts>
    return_value = 0; 
  }

  return return_value;
#endif
}
 4003c34:	e037883a 	mov	sp,fp
 4003c38:	dfc00117 	ldw	ra,4(sp)
 4003c3c:	df000017 	ldw	fp,0(sp)
 4003c40:	dec00204 	addi	sp,sp,8
 4003c44:	f800283a 	ret

04003c48 <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

__inline__ int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 4003c48:	defff304 	addi	sp,sp,-52
 4003c4c:	dfc00c15 	stw	ra,48(sp)
 4003c50:	df000b15 	stw	fp,44(sp)
 4003c54:	df000b04 	addi	fp,sp,44
 4003c58:	e13ffc15 	stw	r4,-16(fp)
 4003c5c:	e17ffd15 	stw	r5,-12(fp)
 4003c60:	e1bffe15 	stw	r6,-8(fp)
 4003c64:	3805883a 	mov	r2,r7
 4003c68:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
 4003c6c:	e0bffe17 	ldw	r2,-8(fp)
 4003c70:	10bfffd8 	cmpnei	r2,r2,-1
 4003c74:	10000c1e 	bne	r2,zero,4003ca8 <alpha_blending+0x60>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
 4003c78:	e0fffb04 	addi	r3,fp,-20
 4003c7c:	e0bffb44 	addi	r2,fp,-19
 4003c80:	e13ffb84 	addi	r4,fp,-18
 4003c84:	d9000015 	stw	r4,0(sp)
 4003c88:	e1000517 	ldw	r4,20(fp)
 4003c8c:	d9000115 	stw	r4,4(sp)
 4003c90:	e13ffc17 	ldw	r4,-16(fp)
 4003c94:	e17ffd17 	ldw	r5,-12(fp)
 4003c98:	180d883a 	mov	r6,r3
 4003c9c:	100f883a 	mov	r7,r2
 4003ca0:	4003c080 	call	4003c08 <read_from_frame>
 4003ca4:	00000a06 	br	4003cd0 <alpha_blending+0x88>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
 4003ca8:	e0800517 	ldw	r2,20(fp)
 4003cac:	11000017 	ldw	r4,0(r2)
 4003cb0:	e17ffe04 	addi	r5,fp,-8
 4003cb4:	e0fffb04 	addi	r3,fp,-20
 4003cb8:	e0bffb44 	addi	r2,fp,-19
 4003cbc:	e1bffb84 	addi	r6,fp,-18
 4003cc0:	d9800015 	stw	r6,0(sp)
 4003cc4:	180d883a 	mov	r6,r3
 4003cc8:	100f883a 	mov	r7,r2
 4003ccc:	400396c0 	call	400396c <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
 4003cd0:	e0800217 	ldw	r2,8(fp)
 4003cd4:	10800003 	ldbu	r2,0(r2)
 4003cd8:	10c03fcc 	andi	r3,r2,255
 4003cdc:	e0bfff03 	ldbu	r2,-4(fp)
 4003ce0:	1887383a 	mul	r3,r3,r2
 4003ce4:	e0bffb03 	ldbu	r2,-20(fp)
 4003ce8:	11003fcc 	andi	r4,r2,255
 4003cec:	e0bfff03 	ldbu	r2,-4(fp)
 4003cf0:	01403fc4 	movi	r5,255
 4003cf4:	2885c83a 	sub	r2,r5,r2
 4003cf8:	2085383a 	mul	r2,r4,r2
 4003cfc:	1885883a 	add	r2,r3,r2
 4003d00:	1009883a 	mov	r4,r2
 4003d04:	01403fc4 	movi	r5,255
 4003d08:	40082800 	call	4008280 <__divsi3>
 4003d0c:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
 4003d10:	e0800317 	ldw	r2,12(fp)
 4003d14:	10800003 	ldbu	r2,0(r2)
 4003d18:	10c03fcc 	andi	r3,r2,255
 4003d1c:	e0bfff03 	ldbu	r2,-4(fp)
 4003d20:	1887383a 	mul	r3,r3,r2
 4003d24:	e0bffb43 	ldbu	r2,-19(fp)
 4003d28:	11003fcc 	andi	r4,r2,255
 4003d2c:	e0bfff03 	ldbu	r2,-4(fp)
 4003d30:	01403fc4 	movi	r5,255
 4003d34:	2885c83a 	sub	r2,r5,r2
 4003d38:	2085383a 	mul	r2,r4,r2
 4003d3c:	1885883a 	add	r2,r3,r2
 4003d40:	1009883a 	mov	r4,r2
 4003d44:	01403fc4 	movi	r5,255
 4003d48:	40082800 	call	4008280 <__divsi3>
 4003d4c:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
 4003d50:	e0800417 	ldw	r2,16(fp)
 4003d54:	10800003 	ldbu	r2,0(r2)
 4003d58:	10c03fcc 	andi	r3,r2,255
 4003d5c:	e0bfff03 	ldbu	r2,-4(fp)
 4003d60:	1887383a 	mul	r3,r3,r2
 4003d64:	e0bffb83 	ldbu	r2,-18(fp)
 4003d68:	11003fcc 	andi	r4,r2,255
 4003d6c:	e0bfff03 	ldbu	r2,-4(fp)
 4003d70:	01403fc4 	movi	r5,255
 4003d74:	2885c83a 	sub	r2,r5,r2
 4003d78:	2085383a 	mul	r2,r4,r2
 4003d7c:	1885883a 	add	r2,r3,r2
 4003d80:	1009883a 	mov	r4,r2
 4003d84:	01403fc4 	movi	r5,255
 4003d88:	40082800 	call	4008280 <__divsi3>
 4003d8c:	e0bffa15 	stw	r2,-24(fp)
  

  if(display->color_depth == 16)
 4003d90:	e0800517 	ldw	r2,20(fp)
 4003d94:	10800017 	ldw	r2,0(r2)
 4003d98:	10800418 	cmpnei	r2,r2,16
 4003d9c:	1000181e 	bne	r2,zero,4003e00 <alpha_blending+0x1b8>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
 4003da0:	e0bff817 	ldw	r2,-32(fp)
 4003da4:	10c00830 	cmpltui	r3,r2,32
 4003da8:	1800011e 	bne	r3,zero,4003db0 <alpha_blending+0x168>
 4003dac:	008007c4 	movi	r2,31
 4003db0:	1007883a 	mov	r3,r2
 4003db4:	e0800217 	ldw	r2,8(fp)
 4003db8:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
 4003dbc:	e0bff917 	ldw	r2,-28(fp)
 4003dc0:	10c01030 	cmpltui	r3,r2,64
 4003dc4:	1800011e 	bne	r3,zero,4003dcc <alpha_blending+0x184>
 4003dc8:	00800fc4 	movi	r2,63
 4003dcc:	1007883a 	mov	r3,r2
 4003dd0:	e0800317 	ldw	r2,12(fp)
 4003dd4:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
 4003dd8:	e0bffa17 	ldw	r2,-24(fp)
 4003ddc:	10c00830 	cmpltui	r3,r2,32
 4003de0:	1800011e 	bne	r3,zero,4003de8 <alpha_blending+0x1a0>
 4003de4:	008007c4 	movi	r2,31
 4003de8:	1007883a 	mov	r3,r2
 4003dec:	e0800417 	ldw	r2,16(fp)
 4003df0:	10c00005 	stb	r3,0(r2)
    return_value = 1;        
 4003df4:	00800044 	movi	r2,1
 4003df8:	e0bff715 	stw	r2,-36(fp)
 4003dfc:	00002106 	br	4003e84 <alpha_blending+0x23c>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
 4003e00:	e0800517 	ldw	r2,20(fp)
 4003e04:	10800017 	ldw	r2,0(r2)
 4003e08:	10800620 	cmpeqi	r2,r2,24
 4003e0c:	1000041e 	bne	r2,zero,4003e20 <alpha_blending+0x1d8>
 4003e10:	e0800517 	ldw	r2,20(fp)
 4003e14:	10800017 	ldw	r2,0(r2)
 4003e18:	10800818 	cmpnei	r2,r2,32
 4003e1c:	1000181e 	bne	r2,zero,4003e80 <alpha_blending+0x238>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
 4003e20:	e0bff817 	ldw	r2,-32(fp)
 4003e24:	10c04030 	cmpltui	r3,r2,256
 4003e28:	1800011e 	bne	r3,zero,4003e30 <alpha_blending+0x1e8>
 4003e2c:	00803fc4 	movi	r2,255
 4003e30:	1007883a 	mov	r3,r2
 4003e34:	e0800217 	ldw	r2,8(fp)
 4003e38:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
 4003e3c:	e0bff917 	ldw	r2,-28(fp)
 4003e40:	10c04030 	cmpltui	r3,r2,256
 4003e44:	1800011e 	bne	r3,zero,4003e4c <alpha_blending+0x204>
 4003e48:	00803fc4 	movi	r2,255
 4003e4c:	1007883a 	mov	r3,r2
 4003e50:	e0800317 	ldw	r2,12(fp)
 4003e54:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
 4003e58:	e0bffa17 	ldw	r2,-24(fp)
 4003e5c:	10c04030 	cmpltui	r3,r2,256
 4003e60:	1800011e 	bne	r3,zero,4003e68 <alpha_blending+0x220>
 4003e64:	00803fc4 	movi	r2,255
 4003e68:	1007883a 	mov	r3,r2
 4003e6c:	e0800417 	ldw	r2,16(fp)
 4003e70:	10c00005 	stb	r3,0(r2)
    return_value = 1;            
 4003e74:	00800044 	movi	r2,1
 4003e78:	e0bff715 	stw	r2,-36(fp)
 4003e7c:	00000106 	br	4003e84 <alpha_blending+0x23c>
  }
  else
  {
    return_value = 0;     
 4003e80:	e03ff715 	stw	zero,-36(fp)
  }  
 
  return return_value;
 4003e84:	e0bff717 	ldw	r2,-36(fp)
} 
 4003e88:	e037883a 	mov	sp,fp
 4003e8c:	dfc00117 	ldw	ra,4(sp)
 4003e90:	df000017 	ldw	fp,0(sp)
 4003e94:	dec00204 	addi	sp,sp,8
 4003e98:	f800283a 	ret

04003e9c <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
 4003e9c:	defff004 	addi	sp,sp,-64
 4003ea0:	dfc00f15 	stw	ra,60(sp)
 4003ea4:	df000e15 	stw	fp,56(sp)
 4003ea8:	df000e04 	addi	fp,sp,56
 4003eac:	e13ffc15 	stw	r4,-16(fp)
 4003eb0:	e17ffd15 	stw	r5,-12(fp)
 4003eb4:	e1bffe15 	stw	r6,-8(fp)
 4003eb8:	3805883a 	mov	r2,r7
 4003ebc:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
 4003ec0:	e0bfff07 	ldb	r2,-4(fp)
 4003ec4:	10bff7c4 	addi	r2,r2,-33
 4003ec8:	1004917a 	slli	r2,r2,5
 4003ecc:	e0c00317 	ldw	r3,12(fp)
 4003ed0:	1885883a 	add	r2,r3,r2
 4003ed4:	10800617 	ldw	r2,24(r2)
 4003ed8:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
 4003edc:	e0800417 	ldw	r2,16(fp)
 4003ee0:	11000017 	ldw	r4,0(r2)
 4003ee4:	e17ffe04 	addi	r5,fp,-8
 4003ee8:	e0fff904 	addi	r3,fp,-28
 4003eec:	e0bff984 	addi	r2,fp,-26
 4003ef0:	e1bff944 	addi	r6,fp,-27
 4003ef4:	d9800015 	stw	r6,0(sp)
 4003ef8:	180d883a 	mov	r6,r3
 4003efc:	100f883a 	mov	r7,r2
 4003f00:	400396c0 	call	400396c <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
 4003f04:	e03ff615 	stw	zero,-40(fp)
 4003f08:	00004606 	br	4004024 <vid_print_char_alpha+0x188>
    for (j = 0; j < font[character-33].bounds_width; j++) {
 4003f0c:	e03ff715 	stw	zero,-36(fp)
 4003f10:	00003906 	br	4003ff8 <vid_print_char_alpha+0x15c>
      red = original_red;
 4003f14:	e0bff903 	ldbu	r2,-28(fp)
 4003f18:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
 4003f1c:	e0bff983 	ldbu	r2,-26(fp)
 4003f20:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
 4003f24:	e0bff943 	ldbu	r2,-27(fp)
 4003f28:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
 4003f2c:	e0fffc17 	ldw	r3,-16(fp)
 4003f30:	e0bff717 	ldw	r2,-36(fp)
 4003f34:	1889883a 	add	r4,r3,r2
 4003f38:	e0fffd17 	ldw	r3,-12(fp)
 4003f3c:	e0bff617 	ldw	r2,-40(fp)
 4003f40:	1887883a 	add	r3,r3,r2
 4003f44:	e0bff817 	ldw	r2,-32(fp)
 4003f48:	10800003 	ldbu	r2,0(r2)
 4003f4c:	10803fcc 	andi	r2,r2,255
 4003f50:	e17ff9c4 	addi	r5,fp,-25
 4003f54:	d9400015 	stw	r5,0(sp)
 4003f58:	e17ffa04 	addi	r5,fp,-24
 4003f5c:	d9400115 	stw	r5,4(sp)
 4003f60:	e17ffa44 	addi	r5,fp,-23
 4003f64:	d9400215 	stw	r5,8(sp)
 4003f68:	e1400417 	ldw	r5,16(fp)
 4003f6c:	d9400315 	stw	r5,12(sp)
 4003f70:	180b883a 	mov	r5,r3
 4003f74:	e1800217 	ldw	r6,8(fp)
 4003f78:	100f883a 	mov	r7,r2
 4003f7c:	4003c480 	call	4003c48 <alpha_blending>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
 4003f80:	e0800417 	ldw	r2,16(fp)
 4003f84:	11000017 	ldw	r4,0(r2)
 4003f88:	e0bff9c3 	ldbu	r2,-25(fp)
 4003f8c:	11403fcc 	andi	r5,r2,255
 4003f90:	e0bffa03 	ldbu	r2,-24(fp)
 4003f94:	10c03fcc 	andi	r3,r2,255
 4003f98:	e0bffa43 	ldbu	r2,-23(fp)
 4003f9c:	10803fcc 	andi	r2,r2,255
 4003fa0:	e1bffb04 	addi	r6,fp,-20
 4003fa4:	d9800015 	stw	r6,0(sp)
 4003fa8:	180d883a 	mov	r6,r3
 4003fac:	100f883a 	mov	r7,r2
 4003fb0:	4003ac00 	call	4003ac0 <merge_color_channels>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
 4003fb4:	e0fffc17 	ldw	r3,-16(fp)
 4003fb8:	e0bff717 	ldw	r2,-36(fp)
 4003fbc:	1889883a 	add	r4,r3,r2
 4003fc0:	e0fffd17 	ldw	r3,-12(fp)
 4003fc4:	e0bff617 	ldw	r2,-40(fp)
 4003fc8:	1887883a 	add	r3,r3,r2
 4003fcc:	e0bffb17 	ldw	r2,-20(fp)
 4003fd0:	180b883a 	mov	r5,r3
 4003fd4:	100d883a 	mov	r6,r2
 4003fd8:	e1c00417 	ldw	r7,16(fp)
 4003fdc:	4001b140 	call	4001b14 <vid_set_pixel>

      alpha++;
 4003fe0:	e0bff817 	ldw	r2,-32(fp)
 4003fe4:	10800044 	addi	r2,r2,1
 4003fe8:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
 4003fec:	e0bff717 	ldw	r2,-36(fp)
 4003ff0:	10800044 	addi	r2,r2,1
 4003ff4:	e0bff715 	stw	r2,-36(fp)
 4003ff8:	e0fff717 	ldw	r3,-36(fp)
 4003ffc:	e0bfff07 	ldb	r2,-4(fp)
 4004000:	10bff7c4 	addi	r2,r2,-33
 4004004:	1004917a 	slli	r2,r2,5
 4004008:	e1000317 	ldw	r4,12(fp)
 400400c:	2085883a 	add	r2,r4,r2
 4004010:	10800417 	ldw	r2,16(r2)
 4004014:	18bfbf36 	bltu	r3,r2,4003f14 <vid_print_char_alpha+0x78>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
 4004018:	e0bff617 	ldw	r2,-40(fp)
 400401c:	10800044 	addi	r2,r2,1
 4004020:	e0bff615 	stw	r2,-40(fp)
 4004024:	e0fff617 	ldw	r3,-40(fp)
 4004028:	e0bfff07 	ldb	r2,-4(fp)
 400402c:	10bff7c4 	addi	r2,r2,-33
 4004030:	1004917a 	slli	r2,r2,5
 4004034:	e1000317 	ldw	r4,12(fp)
 4004038:	2085883a 	add	r2,r4,r2
 400403c:	10800517 	ldw	r2,20(r2)
 4004040:	18bfb236 	bltu	r3,r2,4003f0c <vid_print_char_alpha+0x70>

      alpha++;
    }
  }

  return(0);
 4004044:	0005883a 	mov	r2,zero
}
 4004048:	e037883a 	mov	sp,fp
 400404c:	dfc00117 	ldw	ra,4(sp)
 4004050:	df000017 	ldw	fp,0(sp)
 4004054:	dec00204 	addi	sp,sp,8
 4004058:	f800283a 	ret

0400405c <vid_string_pixel_length_alpha>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
 400405c:	defffb04 	addi	sp,sp,-20
 4004060:	df000415 	stw	fp,16(sp)
 4004064:	df000404 	addi	fp,sp,16
 4004068:	e13ffe15 	stw	r4,-8(fp)
 400406c:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
 4004070:	e03ffc15 	stw	zero,-16(fp)
  int length = 0;
 4004074:	e03ffd15 	stw	zero,-12(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 4004078:	e03ffc15 	stw	zero,-16(fp)
 400407c:	00002206 	br	4004108 <vid_string_pixel_length_alpha+0xac>
  {
    if( string[i] == ' ' )
 4004080:	e0bffc17 	ldw	r2,-16(fp)
 4004084:	e0ffff17 	ldw	r3,-4(fp)
 4004088:	1885883a 	add	r2,r3,r2
 400408c:	10800003 	ldbu	r2,0(r2)
 4004090:	10803fcc 	andi	r2,r2,255
 4004094:	1080201c 	xori	r2,r2,128
 4004098:	10bfe004 	addi	r2,r2,-128
 400409c:	10800818 	cmpnei	r2,r2,32
 40040a0:	1000071e 	bne	r2,zero,40040c0 <vid_string_pixel_length_alpha+0x64>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
 40040a4:	e0bffe17 	ldw	r2,-8(fp)
 40040a8:	10806004 	addi	r2,r2,384
 40040ac:	10c00417 	ldw	r3,16(r2)
 40040b0:	e0bffd17 	ldw	r2,-12(fp)
 40040b4:	1885883a 	add	r2,r3,r2
 40040b8:	e0bffd15 	stw	r2,-12(fp)
 40040bc:	00000f06 	br	40040fc <vid_string_pixel_length_alpha+0xa0>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
 40040c0:	e0bffc17 	ldw	r2,-16(fp)
 40040c4:	e0ffff17 	ldw	r3,-4(fp)
 40040c8:	1885883a 	add	r2,r3,r2
 40040cc:	10800003 	ldbu	r2,0(r2)
 40040d0:	10803fcc 	andi	r2,r2,255
 40040d4:	1080201c 	xori	r2,r2,128
 40040d8:	10bfe004 	addi	r2,r2,-128
 40040dc:	10bff7c4 	addi	r2,r2,-33
 40040e0:	1004917a 	slli	r2,r2,5
 40040e4:	e0fffe17 	ldw	r3,-8(fp)
 40040e8:	1885883a 	add	r2,r3,r2
 40040ec:	10c00417 	ldw	r3,16(r2)
 40040f0:	e0bffd17 	ldw	r2,-12(fp)
 40040f4:	1885883a 	add	r2,r3,r2
 40040f8:	e0bffd15 	stw	r2,-12(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 40040fc:	e0bffc17 	ldw	r2,-16(fp)
 4004100:	10800044 	addi	r2,r2,1
 4004104:	e0bffc15 	stw	r2,-16(fp)
 4004108:	e0bffc17 	ldw	r2,-16(fp)
 400410c:	e0ffff17 	ldw	r3,-4(fp)
 4004110:	1885883a 	add	r2,r3,r2
 4004114:	10800003 	ldbu	r2,0(r2)
 4004118:	10803fcc 	andi	r2,r2,255
 400411c:	1080201c 	xori	r2,r2,128
 4004120:	10bfe004 	addi	r2,r2,-128
 4004124:	103fd61e 	bne	r2,zero,4004080 <vid_string_pixel_length_alpha+0x24>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
 4004128:	e0bffd17 	ldw	r2,-12(fp)
}
 400412c:	e037883a 	mov	sp,fp
 4004130:	df000017 	ldw	fp,0(sp)
 4004134:	dec00104 	addi	sp,sp,4
 4004138:	f800283a 	ret

0400413c <GUI_ShowWelcome>:
    RECT rcPaint;
    PALETTE_INFO szPalette[BTN_NUM];
}DESK_INFO;


void GUI_ShowWelcome(alt_video_display *pDisplay){
 400413c:	defff804 	addi	sp,sp,-32
 4004140:	dfc00715 	stw	ra,28(sp)
 4004144:	df000615 	stw	fp,24(sp)
 4004148:	df000604 	addi	fp,sp,24
 400414c:	e13fff15 	stw	r4,-4(fp)
	int x, y;


	x = pDisplay->width / 2 - 60;
 4004150:	e0bfff17 	ldw	r2,-4(fp)
 4004154:	10800117 	ldw	r2,4(r2)
 4004158:	1006d7fa 	srli	r3,r2,31
 400415c:	1885883a 	add	r2,r3,r2
 4004160:	1005d07a 	srai	r2,r2,1
 4004164:	10bff104 	addi	r2,r2,-60
 4004168:	e0bffd15 	stw	r2,-12(fp)
	y = pDisplay->height / 2 - 10;
 400416c:	e0bfff17 	ldw	r2,-4(fp)
 4004170:	10800217 	ldw	r2,8(r2)
 4004174:	1006d7fa 	srli	r3,r2,31
 4004178:	1885883a 	add	r2,r3,r2
 400417c:	1005d07a 	srai	r2,r2,1
 4004180:	10bffd84 	addi	r2,r2,-10
 4004184:	e0bffe15 	stw	r2,-8(fp)

	vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
 4004188:	008100f4 	movhi	r2,1027
 400418c:	10b6d904 	addi	r2,r2,-9372
 4004190:	d8800015 	stw	r2,0(sp)
 4004194:	e0bfff17 	ldw	r2,-4(fp)
 4004198:	d8800115 	stw	r2,4(sp)
 400419c:	008100f4 	movhi	r2,1027
 40041a0:	10b56604 	addi	r2,r2,-10856
 40041a4:	d8800215 	stw	r2,8(sp)
 40041a8:	e13ffd17 	ldw	r4,-12(fp)
 40041ac:	e17ffe17 	ldw	r5,-8(fp)
 40041b0:	01803fc4 	movi	r6,255
 40041b4:	000f883a 	mov	r7,zero
 40041b8:	40037100 	call	4003710 <vid_print_string_alpha>
	vid_print_string_alpha(x, y+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch Demo");
 40041bc:	e0bffe17 	ldw	r2,-8(fp)
 40041c0:	10800584 	addi	r2,r2,22
 40041c4:	00c100f4 	movhi	r3,1027
 40041c8:	18f6d904 	addi	r3,r3,-9372
 40041cc:	d8c00015 	stw	r3,0(sp)
 40041d0:	e0ffff17 	ldw	r3,-4(fp)
 40041d4:	d8c00115 	stw	r3,4(sp)
 40041d8:	00c100f4 	movhi	r3,1027
 40041dc:	18f56804 	addi	r3,r3,-10848
 40041e0:	d8c00215 	stw	r3,8(sp)
 40041e4:	e13ffd17 	ldw	r4,-12(fp)
 40041e8:	100b883a 	mov	r5,r2
 40041ec:	01803fc4 	movi	r6,255
 40041f0:	000f883a 	mov	r7,zero
 40041f4:	40037100 	call	4003710 <vid_print_string_alpha>



}
 40041f8:	e037883a 	mov	sp,fp
 40041fc:	dfc00117 	ldw	ra,4(sp)
 4004200:	df000017 	ldw	fp,0(sp)
 4004204:	dec00204 	addi	sp,sp,8
 4004208:	f800283a 	ret

0400420c <GUI_DeskInit>:

void GUI_DeskInit(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
 400420c:	deffef04 	addi	sp,sp,-68
 4004210:	dfc01015 	stw	ra,64(sp)
 4004214:	df000f15 	stw	fp,60(sp)
 4004218:	df000f04 	addi	fp,sp,60
 400421c:	e13ffe15 	stw	r4,-8(fp)
 4004220:	e17fff15 	stw	r5,-4(fp)
    int i;
    RECT rc;
    const int BoxH = 40;
 4004224:	00800a04 	movi	r2,40
 4004228:	e0bff315 	stw	r2,-52(fp)
    const int BoxW = 40;
 400422c:	00800a04 	movi	r2,40
 4004230:	e0bff415 	stw	r2,-48(fp)
    const int GapH = 5;
 4004234:	00800144 	movi	r2,5
 4004238:	e0bff515 	stw	r2,-44(fp)
    const int DrawBorder = 2;
 400423c:	00800084 	movi	r2,2
 4004240:	e0bff615 	stw	r2,-40(fp)
    const int TextW = 0;
 4004244:	e03ff715 	stw	zero,-36(fp)
    const int ClearExtraW = 30;
 4004248:	00800784 	movi	r2,30
 400424c:	e0bff815 	stw	r2,-32(fp)
    int GapW;

    
    GapW = (pDisplay->width - TextW - ClearExtraW - (BTN_NUM*BoxW))/(BTN_NUM+1);
 4004250:	e0bffe17 	ldw	r2,-8(fp)
 4004254:	10c00117 	ldw	r3,4(r2)
 4004258:	e0bff717 	ldw	r2,-36(fp)
 400425c:	1887c83a 	sub	r3,r3,r2
 4004260:	e0bff817 	ldw	r2,-32(fp)
 4004264:	1887c83a 	sub	r3,r3,r2
 4004268:	e0bff417 	ldw	r2,-48(fp)
 400426c:	10bffee4 	muli	r2,r2,-5
 4004270:	1885883a 	add	r2,r3,r2
 4004274:	1009883a 	mov	r4,r2
 4004278:	01400184 	movi	r5,6
 400427c:	40082800 	call	4008280 <__divsi3>
 4004280:	e0bff915 	stw	r2,-28(fp)
    //printf("GapW=%d\r\n", GapW);
    rc.top = pDisplay->height - BoxH - GapH;
 4004284:	e0bffe17 	ldw	r2,-8(fp)
 4004288:	10c00217 	ldw	r3,8(r2)
 400428c:	e0bff317 	ldw	r2,-52(fp)
 4004290:	1887c83a 	sub	r3,r3,r2
 4004294:	e0bff517 	ldw	r2,-44(fp)
 4004298:	1885c83a 	sub	r2,r3,r2
 400429c:	e0bffc15 	stw	r2,-16(fp)
    rc.bottom = rc.top + BoxH;
 40042a0:	e0fffc17 	ldw	r3,-16(fp)
 40042a4:	e0bff317 	ldw	r2,-52(fp)
 40042a8:	1885883a 	add	r2,r3,r2
 40042ac:	e0bffd15 	stw	r2,-12(fp)
    rc.left = GapW + TextW + ClearExtraW;
 40042b0:	e0fff917 	ldw	r3,-28(fp)
 40042b4:	e0bff717 	ldw	r2,-36(fp)
 40042b8:	1887883a 	add	r3,r3,r2
 40042bc:	e0bff817 	ldw	r2,-32(fp)
 40042c0:	1885883a 	add	r2,r3,r2
 40042c4:	e0bffa15 	stw	r2,-24(fp)
    rc.right = rc.left + BoxW;
 40042c8:	e0fffa17 	ldw	r3,-24(fp)
 40042cc:	e0bff417 	ldw	r2,-48(fp)
 40042d0:	1885883a 	add	r2,r3,r2
 40042d4:	e0bffb15 	stw	r2,-20(fp)
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
 40042d8:	e0bfff17 	ldw	r2,-4(fp)
 40042dc:	10c00104 	addi	r3,r2,4
 40042e0:	e0bffe17 	ldw	r2,-8(fp)
 40042e4:	11000117 	ldw	r4,4(r2)
 40042e8:	e0bff617 	ldw	r2,-40(fp)
 40042ec:	2085c83a 	sub	r2,r4,r2
 40042f0:	e17ffc17 	ldw	r5,-16(fp)
 40042f4:	e13ff617 	ldw	r4,-40(fp)
 40042f8:	2909c83a 	sub	r4,r5,r4
 40042fc:	d9000015 	stw	r4,0(sp)
 4004300:	1809883a 	mov	r4,r3
 4004304:	e17ff617 	ldw	r5,-40(fp)
 4004308:	100d883a 	mov	r6,r2
 400430c:	e1fff617 	ldw	r7,-40(fp)
 4004310:	40002c80 	call	40002c8 <RectSet>
    
    for(i=0;i<BTN_NUM;i++){
 4004314:	e03ff215 	stw	zero,-56(fp)
 4004318:	00002206 	br	40043a4 <GUI_DeskInit+0x198>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
 400431c:	e0bff217 	ldw	r2,-56(fp)
 4004320:	10800044 	addi	r2,r2,1
 4004324:	10800524 	muli	r2,r2,20
 4004328:	e0ffff17 	ldw	r3,-4(fp)
 400432c:	1887883a 	add	r3,r3,r2
 4004330:	e0bffa04 	addi	r2,fp,-24
 4004334:	1809883a 	mov	r4,r3
 4004338:	100b883a 	mov	r5,r2
 400433c:	40004340 	call	4000434 <RectCopy>
        pDeskInfo->szPalette[i].color = szPallete[i];
 4004340:	00c100f4 	movhi	r3,1027
 4004344:	18fdbf04 	addi	r3,r3,-2308
 4004348:	e0bff217 	ldw	r2,-56(fp)
 400434c:	1085883a 	add	r2,r2,r2
 4004350:	1085883a 	add	r2,r2,r2
 4004354:	1885883a 	add	r2,r3,r2
 4004358:	10800017 	ldw	r2,0(r2)
 400435c:	1007883a 	mov	r3,r2
 4004360:	e13fff17 	ldw	r4,-4(fp)
 4004364:	e0bff217 	ldw	r2,-56(fp)
 4004368:	10800524 	muli	r2,r2,20
 400436c:	2085883a 	add	r2,r4,r2
 4004370:	10800904 	addi	r2,r2,36
 4004374:	10c00015 	stw	r3,0(r2)
        RectOffset(&rc, BoxW+GapW, 0);
 4004378:	e0fff417 	ldw	r3,-48(fp)
 400437c:	e0bff917 	ldw	r2,-28(fp)
 4004380:	1885883a 	add	r2,r3,r2
 4004384:	e0fffa04 	addi	r3,fp,-24
 4004388:	1809883a 	mov	r4,r3
 400438c:	100b883a 	mov	r5,r2
 4004390:	000d883a 	mov	r6,zero
 4004394:	40003ac0 	call	40003ac <RectOffset>
    rc.right = rc.left + BoxW;
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
    
    for(i=0;i<BTN_NUM;i++){
 4004398:	e0bff217 	ldw	r2,-56(fp)
 400439c:	10800044 	addi	r2,r2,1
 40043a0:	e0bff215 	stw	r2,-56(fp)
 40043a4:	e0bff217 	ldw	r2,-56(fp)
 40043a8:	10800150 	cmplti	r2,r2,5
 40043ac:	103fdb1e 	bne	r2,zero,400431c <GUI_DeskInit+0x110>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
        pDeskInfo->szPalette[i].color = szPallete[i];
        RectOffset(&rc, BoxW+GapW, 0);
    }
    pDeskInfo->szPalette[BTN_CLEAR].rc.left -= ClearExtraW;
 40043b0:	e0bfff17 	ldw	r2,-4(fp)
 40043b4:	10c00517 	ldw	r3,20(r2)
 40043b8:	e0bff817 	ldw	r2,-32(fp)
 40043bc:	1887c83a 	sub	r3,r3,r2
 40043c0:	e0bfff17 	ldw	r2,-4(fp)
 40043c4:	10c00515 	stw	r3,20(r2)
    pDeskInfo->Paint_Index = BTN_BLUE;
 40043c8:	e0bfff17 	ldw	r2,-4(fp)
 40043cc:	00c00084 	movi	r3,2
 40043d0:	10c00015 	stw	r3,0(r2)
}
 40043d4:	e037883a 	mov	sp,fp
 40043d8:	dfc00117 	ldw	ra,4(sp)
 40043dc:	df000017 	ldw	fp,0(sp)
 40043e0:	dec00204 	addi	sp,sp,8
 40043e4:	f800283a 	ret

040043e8 <GUI_CheckButton>:

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
 40043e8:	defffa04 	addi	sp,sp,-24
 40043ec:	dfc00515 	stw	ra,20(sp)
 40043f0:	df000415 	stw	fp,16(sp)
 40043f4:	df000404 	addi	fp,sp,16
 40043f8:	e13ffe15 	stw	r4,-8(fp)
 40043fc:	e17fff15 	stw	r5,-4(fp)
    int ButtonId = BTN_NONE;
 4004400:	00800184 	movi	r2,6
 4004404:	e0bffc15 	stw	r2,-16(fp)
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
 4004408:	e03ffd15 	stw	zero,-12(fp)
 400440c:	00000e06 	br	4004448 <GUI_CheckButton+0x60>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
 4004410:	e0bffd17 	ldw	r2,-12(fp)
 4004414:	10800044 	addi	r2,r2,1
 4004418:	10800524 	muli	r2,r2,20
 400441c:	e0fffe17 	ldw	r3,-8(fp)
 4004420:	1885883a 	add	r2,r3,r2
 4004424:	e13fff17 	ldw	r4,-4(fp)
 4004428:	100b883a 	mov	r5,r2
 400442c:	40002040 	call	4000204 <IsPtInRect>
 4004430:	10000226 	beq	r2,zero,400443c <GUI_CheckButton+0x54>
            ButtonId = i;
 4004434:	e0bffd17 	ldw	r2,-12(fp)
 4004438:	e0bffc15 	stw	r2,-16(fp)

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    int ButtonId = BTN_NONE;
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
 400443c:	e0bffd17 	ldw	r2,-12(fp)
 4004440:	10800044 	addi	r2,r2,1
 4004444:	e0bffd15 	stw	r2,-12(fp)
 4004448:	e0bffd17 	ldw	r2,-12(fp)
 400444c:	10800148 	cmpgei	r2,r2,5
 4004450:	1000031e 	bne	r2,zero,4004460 <GUI_CheckButton+0x78>
 4004454:	e0bffc17 	ldw	r2,-16(fp)
 4004458:	108001a0 	cmpeqi	r2,r2,6
 400445c:	103fec1e 	bne	r2,zero,4004410 <GUI_CheckButton+0x28>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
            ButtonId = i;
    }
    return ButtonId;
 4004460:	e0bffc17 	ldw	r2,-16(fp)
}
 4004464:	e037883a 	mov	sp,fp
 4004468:	dfc00117 	ldw	ra,4(sp)
 400446c:	df000017 	ldw	fp,0(sp)
 4004470:	dec00204 	addi	sp,sp,8
 4004474:	f800283a 	ret

04004478 <GUI_DeskDraw>:

void GUI_DeskDraw(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
 4004478:	defff104 	addi	sp,sp,-60
 400447c:	dfc00e15 	stw	ra,56(sp)
 4004480:	df000d15 	stw	fp,52(sp)
 4004484:	dc400c15 	stw	r17,48(sp)
 4004488:	dc000b15 	stw	r16,44(sp)
 400448c:	df000b04 	addi	fp,sp,44
 4004490:	e13ffe15 	stw	r4,-8(fp)
 4004494:	e17fff15 	stw	r5,-4(fp)
    // show text
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch");

    // draw border
    RectCopy(&rc, &pDeskInfo->rcPaint);
 4004498:	e0bfff17 	ldw	r2,-4(fp)
 400449c:	10800104 	addi	r2,r2,4
 40044a0:	e0fffa04 	addi	r3,fp,-24
 40044a4:	1809883a 	mov	r4,r3
 40044a8:	100b883a 	mov	r5,r2
 40044ac:	40004340 	call	4000434 <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
 40044b0:	e13ffa17 	ldw	r4,-24(fp)
 40044b4:	e17ffc17 	ldw	r5,-16(fp)
 40044b8:	e0fffb17 	ldw	r3,-20(fp)
 40044bc:	e0bffd17 	ldw	r2,-12(fp)
 40044c0:	01804034 	movhi	r6,256
 40044c4:	31bfffc4 	addi	r6,r6,-1
 40044c8:	d9800015 	stw	r6,0(sp)
 40044cc:	d8000115 	stw	zero,4(sp)
 40044d0:	e1bffe17 	ldw	r6,-8(fp)
 40044d4:	d9800215 	stw	r6,8(sp)
 40044d8:	180d883a 	mov	r6,r3
 40044dc:	100f883a 	mov	r7,r2
 40044e0:	40018d40 	call	40018d4 <vid_draw_box>
    

    // draw palette
	active = pDeskInfo->Paint_Index;
 40044e4:	e0bfff17 	ldw	r2,-4(fp)
 40044e8:	10800017 	ldw	r2,0(r2)
 40044ec:	e0bff915 	stw	r2,-28(fp)
    for(i=0;i<BTN_NUM;i++){
 40044f0:	e03ff815 	stw	zero,-32(fp)
 40044f4:	00006406 	br	4004688 <GUI_DeskDraw+0x210>
        RectCopy(&rc, &(pDeskInfo->szPalette[i].rc));
 40044f8:	e0bff817 	ldw	r2,-32(fp)
 40044fc:	10800044 	addi	r2,r2,1
 4004500:	10800524 	muli	r2,r2,20
 4004504:	e0ffff17 	ldw	r3,-4(fp)
 4004508:	1885883a 	add	r2,r3,r2
 400450c:	e0fffa04 	addi	r3,fp,-24
 4004510:	1809883a 	mov	r4,r3
 4004514:	100b883a 	mov	r5,r2
 4004518:	40004340 	call	4000434 <RectCopy>
        if (i == BTN_CLEAR){
 400451c:	e0bff817 	ldw	r2,-32(fp)
 4004520:	1000301e 	bne	r2,zero,40045e4 <GUI_DeskDraw+0x16c>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_NOT_FILL, pDisplay);
 4004524:	e13ffa17 	ldw	r4,-24(fp)
 4004528:	e17ffc17 	ldw	r5,-16(fp)
 400452c:	e0fffb17 	ldw	r3,-20(fp)
 4004530:	e0bffd17 	ldw	r2,-12(fp)
 4004534:	e1ffff17 	ldw	r7,-4(fp)
 4004538:	e1bff817 	ldw	r6,-32(fp)
 400453c:	31800524 	muli	r6,r6,20
 4004540:	398d883a 	add	r6,r7,r6
 4004544:	31800904 	addi	r6,r6,36
 4004548:	31800017 	ldw	r6,0(r6)
 400454c:	d9800015 	stw	r6,0(sp)
 4004550:	d8000115 	stw	zero,4(sp)
 4004554:	e1bffe17 	ldw	r6,-8(fp)
 4004558:	d9800215 	stw	r6,8(sp)
 400455c:	180d883a 	mov	r6,r3
 4004560:	100f883a 	mov	r7,r2
 4004564:	40018d40 	call	40018d4 <vid_draw_box>
            vid_print_string_alpha(rc.left+8, rc.top+(RectHeight(&rc)-22)/2, pDeskInfo->szPalette[i].color, BLACK_24, tahomabold_20, pDisplay, "Clear");
 4004568:	e0bffa17 	ldw	r2,-24(fp)
 400456c:	14000204 	addi	r16,r2,8
 4004570:	e47ffc17 	ldw	r17,-16(fp)
 4004574:	e0bffa04 	addi	r2,fp,-24
 4004578:	1009883a 	mov	r4,r2
 400457c:	40004cc0 	call	40004cc <RectHeight>
 4004580:	10bffa84 	addi	r2,r2,-22
 4004584:	1006d7fa 	srli	r3,r2,31
 4004588:	1885883a 	add	r2,r3,r2
 400458c:	1005d07a 	srai	r2,r2,1
 4004590:	8887883a 	add	r3,r17,r2
 4004594:	e13fff17 	ldw	r4,-4(fp)
 4004598:	e0bff817 	ldw	r2,-32(fp)
 400459c:	10800524 	muli	r2,r2,20
 40045a0:	2085883a 	add	r2,r4,r2
 40045a4:	10800904 	addi	r2,r2,36
 40045a8:	10800017 	ldw	r2,0(r2)
 40045ac:	010100f4 	movhi	r4,1027
 40045b0:	2136d904 	addi	r4,r4,-9372
 40045b4:	d9000015 	stw	r4,0(sp)
 40045b8:	e13ffe17 	ldw	r4,-8(fp)
 40045bc:	d9000115 	stw	r4,4(sp)
 40045c0:	010100f4 	movhi	r4,1027
 40045c4:	21356b04 	addi	r4,r4,-10836
 40045c8:	d9000215 	stw	r4,8(sp)
 40045cc:	8009883a 	mov	r4,r16
 40045d0:	180b883a 	mov	r5,r3
 40045d4:	100d883a 	mov	r6,r2
 40045d8:	000f883a 	mov	r7,zero
 40045dc:	40037100 	call	4003710 <vid_print_string_alpha>
 40045e0:	00002606 	br	400467c <GUI_DeskDraw+0x204>
        }else{
        	if (active != i){
 40045e4:	e0fff917 	ldw	r3,-28(fp)
 40045e8:	e0bff817 	ldw	r2,-32(fp)
 40045ec:	18801126 	beq	r3,r2,4004634 <GUI_DeskDraw+0x1bc>
          		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
 40045f0:	e13ffa17 	ldw	r4,-24(fp)
 40045f4:	e17ffc17 	ldw	r5,-16(fp)
 40045f8:	e0fffb17 	ldw	r3,-20(fp)
 40045fc:	e0bffd17 	ldw	r2,-12(fp)
 4004600:	d8000015 	stw	zero,0(sp)
 4004604:	01800044 	movi	r6,1
 4004608:	d9800115 	stw	r6,4(sp)
 400460c:	e1bffe17 	ldw	r6,-8(fp)
 4004610:	d9800215 	stw	r6,8(sp)
 4004614:	180d883a 	mov	r6,r3
 4004618:	100f883a 	mov	r7,r2
 400461c:	40018d40 	call	40018d4 <vid_draw_box>
        		RectInflate(&rc, -4, -4);
 4004620:	e0bffa04 	addi	r2,fp,-24
 4004624:	1009883a 	mov	r4,r2
 4004628:	017fff04 	movi	r5,-4
 400462c:	01bfff04 	movi	r6,-4
 4004630:	40003240 	call	4000324 <RectInflate>
        	}
      		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pDisplay);
 4004634:	e13ffa17 	ldw	r4,-24(fp)
 4004638:	e17ffc17 	ldw	r5,-16(fp)
 400463c:	e0fffb17 	ldw	r3,-20(fp)
 4004640:	e0bffd17 	ldw	r2,-12(fp)
 4004644:	e1ffff17 	ldw	r7,-4(fp)
 4004648:	e1bff817 	ldw	r6,-32(fp)
 400464c:	31800524 	muli	r6,r6,20
 4004650:	398d883a 	add	r6,r7,r6
 4004654:	31800904 	addi	r6,r6,36
 4004658:	31800017 	ldw	r6,0(r6)
 400465c:	d9800015 	stw	r6,0(sp)
 4004660:	01800044 	movi	r6,1
 4004664:	d9800115 	stw	r6,4(sp)
 4004668:	e1bffe17 	ldw	r6,-8(fp)
 400466c:	d9800215 	stw	r6,8(sp)
 4004670:	180d883a 	mov	r6,r3
 4004674:	100f883a 	mov	r7,r2
 4004678:	40018d40 	call	40018d4 <vid_draw_box>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
    

    // draw palette
	active = pDeskInfo->Paint_Index;
    for(i=0;i<BTN_NUM;i++){
 400467c:	e0bff817 	ldw	r2,-32(fp)
 4004680:	10800044 	addi	r2,r2,1
 4004684:	e0bff815 	stw	r2,-32(fp)
 4004688:	e0bff817 	ldw	r2,-32(fp)
 400468c:	10800150 	cmplti	r2,r2,5
 4004690:	103f991e 	bne	r2,zero,40044f8 <GUI_DeskDraw+0x80>
    //RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    //vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pDisplay, "2");
    
        
        
}
 4004694:	e037883a 	mov	sp,fp
 4004698:	dfc00317 	ldw	ra,12(sp)
 400469c:	df000217 	ldw	fp,8(sp)
 40046a0:	dc400117 	ldw	r17,4(sp)
 40046a4:	dc000017 	ldw	r16,0(sp)
 40046a8:	dec00404 	addi	sp,sp,16
 40046ac:	f800283a 	ret

040046b0 <IsContinuedPoint>:

bool IsContinuedPoint(POINT *ptPre, POINT *ptNew){
 40046b0:	defffb04 	addi	sp,sp,-20
 40046b4:	df000415 	stw	fp,16(sp)
 40046b8:	df000404 	addi	fp,sp,16
 40046bc:	e13ffe15 	stw	r4,-8(fp)
 40046c0:	e17fff15 	stw	r5,-4(fp)
    bool bYes = TRUE;
 40046c4:	00800044 	movi	r2,1
 40046c8:	e0bffc15 	stw	r2,-16(fp)
    const int nMax = 50;
 40046cc:	00800c84 	movi	r2,50
 40046d0:	e0bffd15 	stw	r2,-12(fp)
    if (abs(ptPre->x - ptNew->x) > nMax)
 40046d4:	e0bffe17 	ldw	r2,-8(fp)
 40046d8:	10c00017 	ldw	r3,0(r2)
 40046dc:	e0bfff17 	ldw	r2,-4(fp)
 40046e0:	10800017 	ldw	r2,0(r2)
 40046e4:	1885c83a 	sub	r2,r3,r2
 40046e8:	1000010e 	bge	r2,zero,40046f0 <IsContinuedPoint+0x40>
 40046ec:	0085c83a 	sub	r2,zero,r2
 40046f0:	e0fffd17 	ldw	r3,-12(fp)
 40046f4:	1880020e 	bge	r3,r2,4004700 <IsContinuedPoint+0x50>
        bYes = FALSE;
 40046f8:	e03ffc15 	stw	zero,-16(fp)
 40046fc:	00000a06 	br	4004728 <IsContinuedPoint+0x78>
    else if (abs(ptPre->y - ptNew->y) > nMax)
 4004700:	e0bffe17 	ldw	r2,-8(fp)
 4004704:	10c00117 	ldw	r3,4(r2)
 4004708:	e0bfff17 	ldw	r2,-4(fp)
 400470c:	10800117 	ldw	r2,4(r2)
 4004710:	1885c83a 	sub	r2,r3,r2
 4004714:	1000010e 	bge	r2,zero,400471c <IsContinuedPoint+0x6c>
 4004718:	0085c83a 	sub	r2,zero,r2
 400471c:	e0fffd17 	ldw	r3,-12(fp)
 4004720:	1880010e 	bge	r3,r2,4004728 <IsContinuedPoint+0x78>
        bYes = FALSE;
 4004724:	e03ffc15 	stw	zero,-16(fp)
        
    return bYes;        
 4004728:	e0bffc17 	ldw	r2,-16(fp)
        
}
 400472c:	e037883a 	mov	sp,fp
 4004730:	df000017 	ldw	fp,0(sp)
 4004734:	dec00104 	addi	sp,sp,4
 4004738:	f800283a 	ret

0400473c <GUI_ClearPaintArea>:



void GUI_ClearPaintArea(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
 400473c:	defff504 	addi	sp,sp,-44
 4004740:	dfc00a15 	stw	ra,40(sp)
 4004744:	df000915 	stw	fp,36(sp)
 4004748:	df000904 	addi	fp,sp,36
 400474c:	e13ffe15 	stw	r4,-8(fp)
 4004750:	e17fff15 	stw	r5,-4(fp)
    RECT rc;
    RectCopy(&rc, &pDeskInfo->rcPaint);
 4004754:	e0bfff17 	ldw	r2,-4(fp)
 4004758:	10800104 	addi	r2,r2,4
 400475c:	e13ffa04 	addi	r4,fp,-24
 4004760:	100b883a 	mov	r5,r2
 4004764:	40004340 	call	4000434 <RectCopy>
    RectInflate(&rc, -1, -1);
 4004768:	e13ffa04 	addi	r4,fp,-24
 400476c:	017fffc4 	movi	r5,-1
 4004770:	01bfffc4 	movi	r6,-1
 4004774:	40003240 	call	4000324 <RectInflate>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
 4004778:	e13ffa17 	ldw	r4,-24(fp)
 400477c:	e17ffc17 	ldw	r5,-16(fp)
 4004780:	e0fffb17 	ldw	r3,-20(fp)
 4004784:	e0bffd17 	ldw	r2,-12(fp)
 4004788:	d8000015 	stw	zero,0(sp)
 400478c:	01800044 	movi	r6,1
 4004790:	d9800115 	stw	r6,4(sp)
 4004794:	e1bffe17 	ldw	r6,-8(fp)
 4004798:	d9800215 	stw	r6,8(sp)
 400479c:	180d883a 	mov	r6,r3
 40047a0:	100f883a 	mov	r7,r2
 40047a4:	40018d40 	call	40018d4 <vid_draw_box>
    //
  //  RectCopy(&rc, &pDeskInfo->szPalette[BTN_GESTRUE].rc);
  //  vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
}
 40047a8:	e037883a 	mov	sp,fp
 40047ac:	dfc00117 	ldw	ra,4(sp)
 40047b0:	df000017 	ldw	fp,0(sp)
 40047b4:	dec00204 	addi	sp,sp,8
 40047b8:	f800283a 	ret

040047bc <GUI>:

//void GUI(MTC_INFO *pTouch){
void GUI(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
 40047bc:	deffd004 	addi	sp,sp,-192
 40047c0:	dfc02f15 	stw	ra,188(sp)
 40047c4:	df002e15 	stw	fp,184(sp)
 40047c8:	df002e04 	addi	fp,sp,184
 40047cc:	e13ffe15 	stw	r4,-8(fp)
 40047d0:	e17fff15 	stw	r5,-4(fp)
    // video
    DESK_INFO DeskInfo;
    int X, Y;
    POINT Pt;
    const int nDotSize = DOT_SIZE;
 40047d4:	00800144 	movi	r2,5
 40047d8:	e0bfd615 	stw	r2,-168(fp)
    


    
    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
 40047dc:	e13ffe17 	ldw	r4,-8(fp)
 40047e0:	000b883a 	mov	r5,zero
 40047e4:	40010700 	call	4001070 <vid_clean_screen>
    
    // Show Terasic Welcome
    GUI_ShowWelcome(pDisplay);
 40047e8:	e13ffe17 	ldw	r4,-8(fp)
 40047ec:	400413c0 	call	400413c <GUI_ShowWelcome>
    usleep(1*1000*1000);
 40047f0:	010003f4 	movhi	r4,15
 40047f4:	21109004 	addi	r4,r4,16960
 40047f8:	4011a700 	call	4011a70 <usleep>
    vid_clean_screen(pDisplay, BLACK_24);
 40047fc:	e13ffe17 	ldw	r4,-8(fp)
 4004800:	000b883a 	mov	r5,zero
 4004804:	40010700 	call	4001070 <vid_clean_screen>

   
    GUI_DeskInit(pDisplay, &DeskInfo);
 4004808:	e0bfd804 	addi	r2,fp,-160
 400480c:	e13ffe17 	ldw	r4,-8(fp)
 4004810:	100b883a 	mov	r5,r2
 4004814:	400420c0 	call	400420c <GUI_DeskInit>
    GUI_DeskDraw(pDisplay, &DeskInfo);
 4004818:	e0bfd804 	addi	r2,fp,-160
 400481c:	e13ffe17 	ldw	r4,-8(fp)
 4004820:	100b883a 	mov	r5,r2
 4004824:	40044780 	call	4004478 <GUI_DeskDraw>
    
   // VIPFR_ActiveDrawFrame(pReader);
    
    RectCopy(&rcTouch, &DeskInfo.rcPaint);
 4004828:	e0fffa04 	addi	r3,fp,-24
 400482c:	e0bfd804 	addi	r2,fp,-160
 4004830:	10800104 	addi	r2,r2,4
 4004834:	1809883a 	mov	r4,r3
 4004838:	100b883a 	mov	r5,r2
 400483c:	40004340 	call	4000434 <RectCopy>
    RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);
 4004840:	00ffff84 	movi	r3,-2
 4004844:	e0bfd617 	ldw	r2,-168(fp)
 4004848:	1887c83a 	sub	r3,r3,r2
 400484c:	013fff84 	movi	r4,-2
 4004850:	e0bfd617 	ldw	r2,-168(fp)
 4004854:	2085c83a 	sub	r2,r4,r2
 4004858:	e13ffa04 	addi	r4,fp,-24
 400485c:	180b883a 	mov	r5,r3
 4004860:	100d883a 	mov	r6,r2
 4004864:	40003240 	call	4000324 <RectInflate>
    
    ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
 4004868:	e0bfd817 	ldw	r2,-160(fp)
 400486c:	10800524 	muli	r2,r2,20
 4004870:	e0ffd404 	addi	r3,fp,-176
 4004874:	1885883a 	add	r2,r3,r2
 4004878:	10800d04 	addi	r2,r2,52
 400487c:	10800017 	ldw	r2,0(r2)
 4004880:	e0bfd415 	stw	r2,-176(fp)
 4004884:	00000106 	br	400488c <GUI+0xd0>
                            Touch_EmptyFifo(pTouch);
                        }
                    }
                }
            } // if touch
        } // while
 4004888:	0001883a 	nop
  //  printf("ContinuedTime=%d\r\n", ContinuedTime);
   // PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);

    while(1){
            // touch
            if (Touch_GetXY(pTouch, &X, &Y)){
 400488c:	e0fff604 	addi	r3,fp,-40
 4004890:	e0bff704 	addi	r2,fp,-36
 4004894:	e13fff17 	ldw	r4,-4(fp)
 4004898:	180b883a 	mov	r5,r3
 400489c:	100d883a 	mov	r6,r2
 40048a0:	4006b000 	call	4006b00 <Touch_GetXY>
 40048a4:	103ff826 	beq	r2,zero,4004888 <GUI+0xcc>
           //     IOWR(LED_BASE, 0x00, LedMask);
             //   LedMask <<= 1;
             //   if (LedMask == 0x00)
               //     LedMask = 0x01;
                //
                printf("x=%d, y=%d\r\n", X,Y);
 40048a8:	e0fff617 	ldw	r3,-40(fp)
 40048ac:	e0bff717 	ldw	r2,-36(fp)
 40048b0:	010100f4 	movhi	r4,1027
 40048b4:	21356d04 	addi	r4,r4,-10828
 40048b8:	180b883a 	mov	r5,r3
 40048bc:	100d883a 	mov	r6,r2
 40048c0:	40092840 	call	4009284 <printf>
                PtSet(&Pt, X, Y);
 40048c4:	e0fff617 	ldw	r3,-40(fp)
 40048c8:	e0bff717 	ldw	r2,-36(fp)
 40048cc:	e13ff804 	addi	r4,fp,-32
 40048d0:	180b883a 	mov	r5,r3
 40048d4:	100d883a 	mov	r6,r2
 40048d8:	40002880 	call	4000288 <PtSet>


             //   printf("t:%d, %d\r\n", (int)alt_nticks(), LastTimePt1);
                //
                if ( IsPtInRect(&Pt, &rcTouch)){
 40048dc:	e0fff804 	addi	r3,fp,-32
 40048e0:	e0bffa04 	addi	r2,fp,-24
 40048e4:	1809883a 	mov	r4,r3
 40048e8:	100b883a 	mov	r5,r2
 40048ec:	40002040 	call	4000204 <IsPtInRect>
 40048f0:	10000c26 	beq	r2,zero,4004924 <GUI+0x168>

                    vid_draw_circle(Pt.x, Pt.y, nDotSize, ColorPen, DO_FILL, pDisplay);
 40048f4:	e0fff817 	ldw	r3,-32(fp)
 40048f8:	e0bff917 	ldw	r2,-28(fp)
 40048fc:	01000044 	movi	r4,1
 4004900:	d9000015 	stw	r4,0(sp)
 4004904:	e13ffe17 	ldw	r4,-8(fp)
 4004908:	d9000115 	stw	r4,4(sp)
 400490c:	1809883a 	mov	r4,r3
 4004910:	100b883a 	mov	r5,r2
 4004914:	e1bfd617 	ldw	r6,-168(fp)
 4004918:	e1ffd417 	ldw	r7,-176(fp)
 400491c:	40020f40 	call	40020f4 <vid_draw_circle>
                            Touch_EmptyFifo(pTouch);
                        }
                    }
                }
            } // if touch
        } // while
 4004920:	003fd906 	br	4004888 <GUI+0xcc>
                //
                if ( IsPtInRect(&Pt, &rcTouch)){

                    vid_draw_circle(Pt.x, Pt.y, nDotSize, ColorPen, DO_FILL, pDisplay);
                   // VIPFR_ActiveDrawFrame(pReader);
                }else if (GUI_CheckButton(&DeskInfo, &Pt) == BTN_CLEAR){
 4004924:	e0ffd804 	addi	r3,fp,-160
 4004928:	e0bff804 	addi	r2,fp,-32
 400492c:	1809883a 	mov	r4,r3
 4004930:	100b883a 	mov	r5,r2
 4004934:	40043e80 	call	40043e8 <GUI_CheckButton>
 4004938:	1000071e 	bne	r2,zero,4004958 <GUI+0x19c>
                    GUI_ClearPaintArea(pDisplay, &DeskInfo);
 400493c:	e0bfd804 	addi	r2,fp,-160
 4004940:	e13ffe17 	ldw	r4,-8(fp)
 4004944:	100b883a 	mov	r5,r2
 4004948:	400473c0 	call	400473c <GUI_ClearPaintArea>
                  //  VIPFR_ActiveDrawFrame(pReader);
                    Touch_EmptyFifo(pTouch);
 400494c:	e13fff17 	ldw	r4,-4(fp)
 4004950:	4006ac80 	call	4006ac8 <Touch_EmptyFifo>
                            Touch_EmptyFifo(pTouch);
                        }
                    }
                }
            } // if touch
        } // while
 4004954:	003fcc06 	br	4004888 <GUI+0xcc>
                }else if (GUI_CheckButton(&DeskInfo, &Pt) == BTN_CLEAR){
                    GUI_ClearPaintArea(pDisplay, &DeskInfo);
                  //  VIPFR_ActiveDrawFrame(pReader);
                    Touch_EmptyFifo(pTouch);
                }else {
                    ButtonId = GUI_CheckButton(&DeskInfo, &Pt);
 4004958:	e0ffd804 	addi	r3,fp,-160
 400495c:	e0bff804 	addi	r2,fp,-32
 4004960:	1809883a 	mov	r4,r3
 4004964:	100b883a 	mov	r5,r2
 4004968:	40043e80 	call	40043e8 <GUI_CheckButton>
 400496c:	e0bfd715 	stw	r2,-164(fp)
                    UpdatePalette = FALSE;
 4004970:	e03fd515 	stw	zero,-172(fp)
                    if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR){
 4004974:	e0bfd717 	ldw	r2,-164(fp)
 4004978:	108001a0 	cmpeqi	r2,r2,6
 400497c:	103fc21e 	bne	r2,zero,4004888 <GUI+0xcc>
 4004980:	e0bfd717 	ldw	r2,-164(fp)
 4004984:	103fc026 	beq	r2,zero,4004888 <GUI+0xcc>
                        // chang draw color
                        if ( ButtonId != DeskInfo.Paint_Index ){
 4004988:	e0ffd817 	ldw	r3,-160(fp)
 400498c:	e0bfd717 	ldw	r2,-164(fp)
 4004990:	18800426 	beq	r3,r2,40049a4 <GUI+0x1e8>
                            DeskInfo.Paint_Index = ButtonId;
 4004994:	e0bfd717 	ldw	r2,-164(fp)
 4004998:	e0bfd815 	stw	r2,-160(fp)
                            UpdatePalette = TRUE;
 400499c:	00800044 	movi	r2,1
 40049a0:	e0bfd515 	stw	r2,-172(fp)
                            //
                        }

                        if (UpdatePalette){
 40049a4:	e0bfd517 	ldw	r2,-172(fp)
 40049a8:	103fb726 	beq	r2,zero,4004888 <GUI+0xcc>
                            ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
 40049ac:	e0bfd817 	ldw	r2,-160(fp)
 40049b0:	10800524 	muli	r2,r2,20
 40049b4:	e0ffd404 	addi	r3,fp,-176
 40049b8:	1885883a 	add	r2,r3,r2
 40049bc:	10800d04 	addi	r2,r2,52
 40049c0:	10800017 	ldw	r2,0(r2)
 40049c4:	e0bfd415 	stw	r2,-176(fp)
                            GUI_DeskDraw(pDisplay, &DeskInfo);
 40049c8:	e0bfd804 	addi	r2,fp,-160
 40049cc:	e13ffe17 	ldw	r4,-8(fp)
 40049d0:	100b883a 	mov	r5,r2
 40049d4:	40044780 	call	4004478 <GUI_DeskDraw>
                        //    VIPFR_ActiveDrawFrame(pReader);
                            Touch_EmptyFifo(pTouch);
 40049d8:	e13fff17 	ldw	r4,-4(fp)
 40049dc:	4006ac80 	call	4006ac8 <Touch_EmptyFifo>
                        }
                    }
                }
            } // if touch
        } // while
 40049e0:	003fa906 	br	4004888 <GUI+0xcc>

040049e4 <GUI_ShowInfo>:
    
}



void GUI_ShowInfo(alt_video_display *pDisplay, char *pText){
 40049e4:	defff904 	addi	sp,sp,-28
 40049e8:	dfc00615 	stw	ra,24(sp)
 40049ec:	df000515 	stw	fp,20(sp)
 40049f0:	df000504 	addi	fp,sp,20
 40049f4:	e13ffe15 	stw	r4,-8(fp)
 40049f8:	e17fff15 	stw	r5,-4(fp)
    static int x=0,y=100;
   // vid_clean_screen(pReader, BLACK_24);
    vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, pText);
 40049fc:	d0ed9617 	ldw	r3,-18856(gp)
 4004a00:	d0a00117 	ldw	r2,-32764(gp)
 4004a04:	010100f4 	movhi	r4,1027
 4004a08:	2136d904 	addi	r4,r4,-9372
 4004a0c:	d9000015 	stw	r4,0(sp)
 4004a10:	e13ffe17 	ldw	r4,-8(fp)
 4004a14:	d9000115 	stw	r4,4(sp)
 4004a18:	e13fff17 	ldw	r4,-4(fp)
 4004a1c:	d9000215 	stw	r4,8(sp)
 4004a20:	1809883a 	mov	r4,r3
 4004a24:	100b883a 	mov	r5,r2
 4004a28:	01803fc4 	movi	r6,255
 4004a2c:	000f883a 	mov	r7,zero
 4004a30:	40037100 	call	4003710 <vid_print_string_alpha>
 //   VIPFR_ActiveDrawFrame(pReader);
}
 4004a34:	e037883a 	mov	sp,fp
 4004a38:	dfc00117 	ldw	ra,4(sp)
 4004a3c:	df000017 	ldw	fp,0(sp)
 4004a40:	dec00204 	addi	sp,sp,8
 4004a44:	f800283a 	ret

04004a48 <GUI_ShowTouchPoint>:

void GUI_ShowTouchPoint(alt_video_display *pDisplay, int X, int Y, int color){
 4004a48:	defff804 	addi	sp,sp,-32
 4004a4c:	dfc00715 	stw	ra,28(sp)
 4004a50:	df000615 	stw	fp,24(sp)
 4004a54:	df000604 	addi	fp,sp,24
 4004a58:	e13ffc15 	stw	r4,-16(fp)
 4004a5c:	e17ffd15 	stw	r5,-12(fp)
 4004a60:	e1bffe15 	stw	r6,-8(fp)
 4004a64:	e1ffff15 	stw	r7,-4(fp)
    vid_draw_circle(X, Y, 10, color, DO_FILL, pDisplay);
 4004a68:	00800044 	movi	r2,1
 4004a6c:	d8800015 	stw	r2,0(sp)
 4004a70:	e0bffc17 	ldw	r2,-16(fp)
 4004a74:	d8800115 	stw	r2,4(sp)
 4004a78:	e13ffd17 	ldw	r4,-12(fp)
 4004a7c:	e17ffe17 	ldw	r5,-8(fp)
 4004a80:	01800284 	movi	r6,10
 4004a84:	e1ffff17 	ldw	r7,-4(fp)
 4004a88:	40020f40 	call	40020f4 <vid_draw_circle>
   // VIPFR_ActiveDrawFrame(pReader);
}
 4004a8c:	e037883a 	mov	sp,fp
 4004a90:	dfc00117 	ldw	ra,4(sp)
 4004a94:	df000017 	ldw	fp,0(sp)
 4004a98:	dec00204 	addi	sp,sp,8
 4004a9c:	f800283a 	ret

04004aa0 <ShowInfo>:
#include "simple_graphics.h"
#include "geometry.h"



void ShowInfo(alt_video_display *pDisplay, char *pText){
 4004aa0:	defff904 	addi	sp,sp,-28
 4004aa4:	dfc00615 	stw	ra,24(sp)
 4004aa8:	df000515 	stw	fp,20(sp)
 4004aac:	df000504 	addi	fp,sp,20
 4004ab0:	e13ffe15 	stw	r4,-8(fp)
 4004ab4:	e17fff15 	stw	r5,-4(fp)
    vid_print_string_alpha(1, 1, WHITE_24, BLACK_24, tahomabold_20, pDisplay, pText);
 4004ab8:	008100f4 	movhi	r2,1027
 4004abc:	10b6d904 	addi	r2,r2,-9372
 4004ac0:	d8800015 	stw	r2,0(sp)
 4004ac4:	e0bffe17 	ldw	r2,-8(fp)
 4004ac8:	d8800115 	stw	r2,4(sp)
 4004acc:	e0bfff17 	ldw	r2,-4(fp)
 4004ad0:	d8800215 	stw	r2,8(sp)
 4004ad4:	01000044 	movi	r4,1
 4004ad8:	01400044 	movi	r5,1
 4004adc:	01804034 	movhi	r6,256
 4004ae0:	31bfffc4 	addi	r6,r6,-1
 4004ae4:	000f883a 	mov	r7,zero
 4004ae8:	40037100 	call	4003710 <vid_print_string_alpha>
}
 4004aec:	e037883a 	mov	sp,fp
 4004af0:	dfc00117 	ldw	ra,4(sp)
 4004af4:	df000017 	ldw	fp,0(sp)
 4004af8:	dec00204 	addi	sp,sp,8
 4004afc:	f800283a 	ret

04004b00 <VPG_XLine>:


void VPG_XLine(alt_video_display *pDisplay){
 4004b00:	defffe04 	addi	sp,sp,-8
 4004b04:	df000115 	stw	fp,4(sp)
 4004b08:	df000104 	addi	fp,sp,4
 4004b0c:	e13fff15 	stw	r4,-4(fp)
return ;
 4004b10:	0001883a 	nop

    // show text
    ShowInfo(pDisplay, "X Line");


}
 4004b14:	e037883a 	mov	sp,fp
 4004b18:	df000017 	ldw	fp,0(sp)
 4004b1c:	dec00104 	addi	sp,sp,4
 4004b20:	f800283a 	ret

04004b24 <VPG_ColorPanel>:


void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
 4004b24:	defff204 	addi	sp,sp,-56
 4004b28:	dfc00d15 	stw	ra,52(sp)
 4004b2c:	df000c15 	stw	fp,48(sp)
 4004b30:	df000c04 	addi	fp,sp,48
 4004b34:	e13ffe15 	stw	r4,-8(fp)
 4004b38:	e17fff15 	stw	r5,-4(fp)
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 4004b3c:	e03ff515 	stw	zero,-44(fp)
 4004b40:	00001106 	br	4004b88 <VPG_ColorPanel+0x64>
        for(x=0;x<pDisplay->width;x++){
 4004b44:	e03ff415 	stw	zero,-48(fp)
 4004b48:	00000806 	br	4004b6c <VPG_ColorPanel+0x48>
        	vid_set_pixel(x,y,Color, pDisplay);
 4004b4c:	e13ff417 	ldw	r4,-48(fp)
 4004b50:	e17ff517 	ldw	r5,-44(fp)
 4004b54:	e1bfff17 	ldw	r6,-4(fp)
 4004b58:	e1fffe17 	ldw	r7,-8(fp)
 4004b5c:	4001b140 	call	4001b14 <vid_set_pixel>
void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 4004b60:	e0bff417 	ldw	r2,-48(fp)
 4004b64:	10800044 	addi	r2,r2,1
 4004b68:	e0bff415 	stw	r2,-48(fp)
 4004b6c:	e0bffe17 	ldw	r2,-8(fp)
 4004b70:	10800117 	ldw	r2,4(r2)
 4004b74:	e0fff417 	ldw	r3,-48(fp)
 4004b78:	18bff416 	blt	r3,r2,4004b4c <VPG_ColorPanel+0x28>

void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 4004b7c:	e0bff517 	ldw	r2,-44(fp)
 4004b80:	10800044 	addi	r2,r2,1
 4004b84:	e0bff515 	stw	r2,-44(fp)
 4004b88:	e0bffe17 	ldw	r2,-8(fp)
 4004b8c:	10800217 	ldw	r2,8(r2)
 4004b90:	e0fff517 	ldw	r3,-44(fp)
 4004b94:	18bfeb16 	blt	r3,r2,4004b44 <VPG_ColorPanel+0x20>
        	vid_set_pixel(x,y,Color, pDisplay);
        }
    }

    // show text
    sprintf(szText,"Panel: %08xh", Color);
 4004b98:	e0bff604 	addi	r2,fp,-40
 4004b9c:	1009883a 	mov	r4,r2
 4004ba0:	014100f4 	movhi	r5,1027
 4004ba4:	29757104 	addi	r5,r5,-10812
 4004ba8:	e1bfff17 	ldw	r6,-4(fp)
 4004bac:	40094140 	call	4009414 <sprintf>
    ShowInfo(pDisplay, szText);
 4004bb0:	e0bff604 	addi	r2,fp,-40
 4004bb4:	e13ffe17 	ldw	r4,-8(fp)
 4004bb8:	100b883a 	mov	r5,r2
 4004bbc:	4004aa00 	call	4004aa0 <ShowInfo>



}
 4004bc0:	e037883a 	mov	sp,fp
 4004bc4:	dfc00117 	ldw	ra,4(sp)
 4004bc8:	df000017 	ldw	fp,0(sp)
 4004bcc:	dec00204 	addi	sp,sp,8
 4004bd0:	f800283a 	ret

04004bd4 <VPG_Grid>:

void VPG_Grid(alt_video_display *pDisplay, alt_u8 GridSize){
 4004bd4:	defff104 	addi	sp,sp,-60
 4004bd8:	dfc00e15 	stw	ra,56(sp)
 4004bdc:	df000d15 	stw	fp,52(sp)
 4004be0:	df000d04 	addi	fp,sp,52
 4004be4:	e13ffe15 	stw	r4,-8(fp)
 4004be8:	2805883a 	mov	r2,r5
 4004bec:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 4004bf0:	e03ff415 	stw	zero,-48(fp)
 4004bf4:	00002206 	br	4004c80 <VPG_Grid+0xac>
        for(x=0;x<pDisplay->width;x++){
 4004bf8:	e03ff315 	stw	zero,-52(fp)
 4004bfc:	00001906 	br	4004c64 <VPG_Grid+0x90>
            if (x%GridSize == 0 || y%GridSize == 0)
 4004c00:	e0bfff03 	ldbu	r2,-4(fp)
 4004c04:	e0fff317 	ldw	r3,-52(fp)
 4004c08:	1809883a 	mov	r4,r3
 4004c0c:	100b883a 	mov	r5,r2
 4004c10:	40082d00 	call	40082d0 <__modsi3>
 4004c14:	10000626 	beq	r2,zero,4004c30 <VPG_Grid+0x5c>
 4004c18:	e0bfff03 	ldbu	r2,-4(fp)
 4004c1c:	e0fff417 	ldw	r3,-48(fp)
 4004c20:	1809883a 	mov	r4,r3
 4004c24:	100b883a 	mov	r5,r2
 4004c28:	40082d00 	call	40082d0 <__modsi3>
 4004c2c:	1000041e 	bne	r2,zero,4004c40 <VPG_Grid+0x6c>
                Value32 = WHITE_24;
 4004c30:	00804034 	movhi	r2,256
 4004c34:	10bfffc4 	addi	r2,r2,-1
 4004c38:	e0bff515 	stw	r2,-44(fp)
 4004c3c:	00000106 	br	4004c44 <VPG_Grid+0x70>
            else
                Value32 = BLACK_24;
 4004c40:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
 4004c44:	e13ff317 	ldw	r4,-52(fp)
 4004c48:	e17ff417 	ldw	r5,-48(fp)
 4004c4c:	e1bff517 	ldw	r6,-44(fp)
 4004c50:	e1fffe17 	ldw	r7,-8(fp)
 4004c54:	4001b140 	call	4001b14 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 4004c58:	e0bff317 	ldw	r2,-52(fp)
 4004c5c:	10800044 	addi	r2,r2,1
 4004c60:	e0bff315 	stw	r2,-52(fp)
 4004c64:	e0bffe17 	ldw	r2,-8(fp)
 4004c68:	10800117 	ldw	r2,4(r2)
 4004c6c:	e0fff317 	ldw	r3,-52(fp)
 4004c70:	18bfe316 	blt	r3,r2,4004c00 <VPG_Grid+0x2c>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 4004c74:	e0bff417 	ldw	r2,-48(fp)
 4004c78:	10800044 	addi	r2,r2,1
 4004c7c:	e0bff415 	stw	r2,-48(fp)
 4004c80:	e0bffe17 	ldw	r2,-8(fp)
 4004c84:	10800217 	ldw	r2,8(r2)
 4004c88:	e0fff417 	ldw	r3,-48(fp)
 4004c8c:	18bfda16 	blt	r3,r2,4004bf8 <VPG_Grid+0x24>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"Grid%d", GridSize);
 4004c90:	e0bfff03 	ldbu	r2,-4(fp)
 4004c94:	e0fff604 	addi	r3,fp,-40
 4004c98:	1809883a 	mov	r4,r3
 4004c9c:	014100f4 	movhi	r5,1027
 4004ca0:	29757504 	addi	r5,r5,-10796
 4004ca4:	100d883a 	mov	r6,r2
 4004ca8:	40094140 	call	4009414 <sprintf>
    ShowInfo(pDisplay, szText);
 4004cac:	e0bff604 	addi	r2,fp,-40
 4004cb0:	e13ffe17 	ldw	r4,-8(fp)
 4004cb4:	100b883a 	mov	r5,r2
 4004cb8:	4004aa00 	call	4004aa0 <ShowInfo>

}
 4004cbc:	e037883a 	mov	sp,fp
 4004cc0:	dfc00117 	ldw	ra,4(sp)
 4004cc4:	df000017 	ldw	fp,0(sp)
 4004cc8:	dec00204 	addi	sp,sp,8
 4004ccc:	f800283a 	ret

04004cd0 <VPG_VGrid>:

void VPG_VGrid(alt_video_display *pDisplay, alt_u8 GridSize){
 4004cd0:	defff104 	addi	sp,sp,-60
 4004cd4:	dfc00e15 	stw	ra,56(sp)
 4004cd8:	df000d15 	stw	fp,52(sp)
 4004cdc:	df000d04 	addi	fp,sp,52
 4004ce0:	e13ffe15 	stw	r4,-8(fp)
 4004ce4:	2805883a 	mov	r2,r5
 4004ce8:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 4004cec:	e03ff415 	stw	zero,-48(fp)
 4004cf0:	00001c06 	br	4004d64 <VPG_VGrid+0x94>
        for(x=0;x<pDisplay->width;x++){
 4004cf4:	e03ff315 	stw	zero,-52(fp)
 4004cf8:	00001306 	br	4004d48 <VPG_VGrid+0x78>
            if (x%GridSize == 0)
 4004cfc:	e0bfff03 	ldbu	r2,-4(fp)
 4004d00:	e0fff317 	ldw	r3,-52(fp)
 4004d04:	1809883a 	mov	r4,r3
 4004d08:	100b883a 	mov	r5,r2
 4004d0c:	40082d00 	call	40082d0 <__modsi3>
 4004d10:	1000041e 	bne	r2,zero,4004d24 <VPG_VGrid+0x54>
                Value32 = WHITE_24;
 4004d14:	00804034 	movhi	r2,256
 4004d18:	10bfffc4 	addi	r2,r2,-1
 4004d1c:	e0bff515 	stw	r2,-44(fp)
 4004d20:	00000106 	br	4004d28 <VPG_VGrid+0x58>
            else
                Value32 = BLACK_24;
 4004d24:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
 4004d28:	e13ff317 	ldw	r4,-52(fp)
 4004d2c:	e17ff417 	ldw	r5,-48(fp)
 4004d30:	e1bff517 	ldw	r6,-44(fp)
 4004d34:	e1fffe17 	ldw	r7,-8(fp)
 4004d38:	4001b140 	call	4001b14 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 4004d3c:	e0bff317 	ldw	r2,-52(fp)
 4004d40:	10800044 	addi	r2,r2,1
 4004d44:	e0bff315 	stw	r2,-52(fp)
 4004d48:	e0bffe17 	ldw	r2,-8(fp)
 4004d4c:	10800117 	ldw	r2,4(r2)
 4004d50:	e0fff317 	ldw	r3,-52(fp)
 4004d54:	18bfe916 	blt	r3,r2,4004cfc <VPG_VGrid+0x2c>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 4004d58:	e0bff417 	ldw	r2,-48(fp)
 4004d5c:	10800044 	addi	r2,r2,1
 4004d60:	e0bff415 	stw	r2,-48(fp)
 4004d64:	e0bffe17 	ldw	r2,-8(fp)
 4004d68:	10800217 	ldw	r2,8(r2)
 4004d6c:	e0fff417 	ldw	r3,-48(fp)
 4004d70:	18bfe016 	blt	r3,r2,4004cf4 <VPG_VGrid+0x24>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"VGrid%d", GridSize);
 4004d74:	e0bfff03 	ldbu	r2,-4(fp)
 4004d78:	e0fff604 	addi	r3,fp,-40
 4004d7c:	1809883a 	mov	r4,r3
 4004d80:	014100f4 	movhi	r5,1027
 4004d84:	29757704 	addi	r5,r5,-10788
 4004d88:	100d883a 	mov	r6,r2
 4004d8c:	40094140 	call	4009414 <sprintf>
    ShowInfo(pDisplay, szText);
 4004d90:	e0bff604 	addi	r2,fp,-40
 4004d94:	e13ffe17 	ldw	r4,-8(fp)
 4004d98:	100b883a 	mov	r5,r2
 4004d9c:	4004aa00 	call	4004aa0 <ShowInfo>

}
 4004da0:	e037883a 	mov	sp,fp
 4004da4:	dfc00117 	ldw	ra,4(sp)
 4004da8:	df000017 	ldw	fp,0(sp)
 4004dac:	dec00204 	addi	sp,sp,8
 4004db0:	f800283a 	ret

04004db4 <VPG_HGrid>:

void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
 4004db4:	defff104 	addi	sp,sp,-60
 4004db8:	dfc00e15 	stw	ra,56(sp)
 4004dbc:	df000d15 	stw	fp,52(sp)
 4004dc0:	df000d04 	addi	fp,sp,52
 4004dc4:	e13ffe15 	stw	r4,-8(fp)
 4004dc8:	2805883a 	mov	r2,r5
 4004dcc:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 4004dd0:	e03ff415 	stw	zero,-48(fp)
 4004dd4:	00001c06 	br	4004e48 <VPG_HGrid+0x94>
        for(x=0;x<pDisplay->width;x++){
 4004dd8:	e03ff315 	stw	zero,-52(fp)
 4004ddc:	00001306 	br	4004e2c <VPG_HGrid+0x78>
            if (y%GridSize == 0)
 4004de0:	e0bfff03 	ldbu	r2,-4(fp)
 4004de4:	e0fff417 	ldw	r3,-48(fp)
 4004de8:	1809883a 	mov	r4,r3
 4004dec:	100b883a 	mov	r5,r2
 4004df0:	40082d00 	call	40082d0 <__modsi3>
 4004df4:	1000041e 	bne	r2,zero,4004e08 <VPG_HGrid+0x54>
                Value32 = WHITE_24;
 4004df8:	00804034 	movhi	r2,256
 4004dfc:	10bfffc4 	addi	r2,r2,-1
 4004e00:	e0bff515 	stw	r2,-44(fp)
 4004e04:	00000106 	br	4004e0c <VPG_HGrid+0x58>
            else
                Value32 = BLACK_24;
 4004e08:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
 4004e0c:	e13ff317 	ldw	r4,-52(fp)
 4004e10:	e17ff417 	ldw	r5,-48(fp)
 4004e14:	e1bff517 	ldw	r6,-44(fp)
 4004e18:	e1fffe17 	ldw	r7,-8(fp)
 4004e1c:	4001b140 	call	4001b14 <vid_set_pixel>
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 4004e20:	e0bff317 	ldw	r2,-52(fp)
 4004e24:	10800044 	addi	r2,r2,1
 4004e28:	e0bff315 	stw	r2,-52(fp)
 4004e2c:	e0bffe17 	ldw	r2,-8(fp)
 4004e30:	10800117 	ldw	r2,4(r2)
 4004e34:	e0fff317 	ldw	r3,-52(fp)
 4004e38:	18bfe916 	blt	r3,r2,4004de0 <VPG_HGrid+0x2c>
void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 4004e3c:	e0bff417 	ldw	r2,-48(fp)
 4004e40:	10800044 	addi	r2,r2,1
 4004e44:	e0bff415 	stw	r2,-48(fp)
 4004e48:	e0bffe17 	ldw	r2,-8(fp)
 4004e4c:	10800217 	ldw	r2,8(r2)
 4004e50:	e0fff417 	ldw	r3,-48(fp)
 4004e54:	18bfe016 	blt	r3,r2,4004dd8 <VPG_HGrid+0x24>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"HGrid%d", GridSize);
 4004e58:	e0bfff03 	ldbu	r2,-4(fp)
 4004e5c:	e0fff604 	addi	r3,fp,-40
 4004e60:	1809883a 	mov	r4,r3
 4004e64:	014100f4 	movhi	r5,1027
 4004e68:	29757904 	addi	r5,r5,-10780
 4004e6c:	100d883a 	mov	r6,r2
 4004e70:	40094140 	call	4009414 <sprintf>
    ShowInfo(pDisplay, szText);
 4004e74:	e0bff604 	addi	r2,fp,-40
 4004e78:	e13ffe17 	ldw	r4,-8(fp)
 4004e7c:	100b883a 	mov	r5,r2
 4004e80:	4004aa00 	call	4004aa0 <ShowInfo>

}
 4004e84:	e037883a 	mov	sp,fp
 4004e88:	dfc00117 	ldw	ra,4(sp)
 4004e8c:	df000017 	ldw	fp,0(sp)
 4004e90:	dec00204 	addi	sp,sp,8
 4004e94:	f800283a 	ret

04004e98 <VPG_ColorBar>:




void VPG_ColorBar(alt_video_display *pDisplay){
 4004e98:	defffa04 	addi	sp,sp,-24
 4004e9c:	dfc00515 	stw	ra,20(sp)
 4004ea0:	df000415 	stw	fp,16(sp)
 4004ea4:	df000404 	addi	fp,sp,16
 4004ea8:	e13fff15 	stw	r4,-4(fp)
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
 4004eac:	e03ffd15 	stw	zero,-12(fp)
 4004eb0:	00005806 	br	4005014 <VPG_ColorBar+0x17c>
        for(x=0;x<pDisplay->width;x++){
 4004eb4:	e03ffc15 	stw	zero,-16(fp)
 4004eb8:	00004f06 	br	4004ff8 <VPG_ColorBar+0x160>
            if (x == 0 || y == 0 || x == pDisplay->width-1 || y == pDisplay->height-1){
 4004ebc:	e0bffc17 	ldw	r2,-16(fp)
 4004ec0:	10000c26 	beq	r2,zero,4004ef4 <VPG_ColorBar+0x5c>
 4004ec4:	e0bffd17 	ldw	r2,-12(fp)
 4004ec8:	10000a26 	beq	r2,zero,4004ef4 <VPG_ColorBar+0x5c>
 4004ecc:	e0bfff17 	ldw	r2,-4(fp)
 4004ed0:	10800117 	ldw	r2,4(r2)
 4004ed4:	10ffffc4 	addi	r3,r2,-1
 4004ed8:	e0bffc17 	ldw	r2,-16(fp)
 4004edc:	18800526 	beq	r3,r2,4004ef4 <VPG_ColorBar+0x5c>
 4004ee0:	e0bfff17 	ldw	r2,-4(fp)
 4004ee4:	10800217 	ldw	r2,8(r2)
 4004ee8:	10ffffc4 	addi	r3,r2,-1
 4004eec:	e0bffd17 	ldw	r2,-12(fp)
 4004ef0:	1880041e 	bne	r3,r2,4004f04 <VPG_ColorBar+0x6c>
                Value32 = WHITE_24;
 4004ef4:	00804034 	movhi	r2,256
 4004ef8:	10bfffc4 	addi	r2,r2,-1
 4004efc:	e0bffe15 	stw	r2,-8(fp)
 4004f00:	00003506 	br	4004fd8 <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height/4){
 4004f04:	e0bfff17 	ldw	r2,-4(fp)
 4004f08:	10800217 	ldw	r2,8(r2)
 4004f0c:	1000010e 	bge	r2,zero,4004f14 <VPG_ColorBar+0x7c>
 4004f10:	108000c4 	addi	r2,r2,3
 4004f14:	1005d0ba 	srai	r2,r2,2
 4004f18:	e0fffd17 	ldw	r3,-12(fp)
 4004f1c:	1880040e 	bge	r3,r2,4004f30 <VPG_ColorBar+0x98>
                // red
                Value32 = x & 0xFF;
 4004f20:	e0bffc17 	ldw	r2,-16(fp)
 4004f24:	10803fcc 	andi	r2,r2,255
 4004f28:	e0bffe15 	stw	r2,-8(fp)
 4004f2c:	00002a06 	br	4004fd8 <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height/2){
 4004f30:	e0bfff17 	ldw	r2,-4(fp)
 4004f34:	10800217 	ldw	r2,8(r2)
 4004f38:	1006d7fa 	srli	r3,r2,31
 4004f3c:	1885883a 	add	r2,r3,r2
 4004f40:	1005d07a 	srai	r2,r2,1
 4004f44:	e0fffd17 	ldw	r3,-12(fp)
 4004f48:	1880050e 	bge	r3,r2,4004f60 <VPG_ColorBar+0xc8>
                Value32 = (x & 0xFF) << 8;
 4004f4c:	e0bffc17 	ldw	r2,-16(fp)
 4004f50:	1004923a 	slli	r2,r2,8
 4004f54:	10bfffcc 	andi	r2,r2,65535
 4004f58:	e0bffe15 	stw	r2,-8(fp)
 4004f5c:	00001e06 	br	4004fd8 <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height*3/4){
 4004f60:	e0bfff17 	ldw	r2,-4(fp)
 4004f64:	10c00217 	ldw	r3,8(r2)
 4004f68:	1805883a 	mov	r2,r3
 4004f6c:	1085883a 	add	r2,r2,r2
 4004f70:	10c5883a 	add	r2,r2,r3
 4004f74:	1000010e 	bge	r2,zero,4004f7c <VPG_ColorBar+0xe4>
 4004f78:	108000c4 	addi	r2,r2,3
 4004f7c:	1005d0ba 	srai	r2,r2,2
 4004f80:	e0fffd17 	ldw	r3,-12(fp)
 4004f84:	1880050e 	bge	r3,r2,4004f9c <VPG_ColorBar+0x104>
                Value32 = (x & 0xFF) << 16;
 4004f88:	e0bffc17 	ldw	r2,-16(fp)
 4004f8c:	10803fcc 	andi	r2,r2,255
 4004f90:	1004943a 	slli	r2,r2,16
 4004f94:	e0bffe15 	stw	r2,-8(fp)
 4004f98:	00000f06 	br	4004fd8 <VPG_ColorBar+0x140>
            }else{
                Value32 = x & 0xFF;
 4004f9c:	e0bffc17 	ldw	r2,-16(fp)
 4004fa0:	10803fcc 	andi	r2,r2,255
 4004fa4:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 8;
 4004fa8:	e0bffc17 	ldw	r2,-16(fp)
 4004fac:	1004923a 	slli	r2,r2,8
 4004fb0:	10bfffcc 	andi	r2,r2,65535
 4004fb4:	e0fffe17 	ldw	r3,-8(fp)
 4004fb8:	1884b03a 	or	r2,r3,r2
 4004fbc:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 16;
 4004fc0:	e0bffc17 	ldw	r2,-16(fp)
 4004fc4:	10803fcc 	andi	r2,r2,255
 4004fc8:	1004943a 	slli	r2,r2,16
 4004fcc:	e0fffe17 	ldw	r3,-8(fp)
 4004fd0:	1884b03a 	or	r2,r3,r2
 4004fd4:	e0bffe15 	stw	r2,-8(fp)
            }
            vid_set_pixel(x,y,Value32, pDisplay);
 4004fd8:	e13ffc17 	ldw	r4,-16(fp)
 4004fdc:	e17ffd17 	ldw	r5,-12(fp)
 4004fe0:	e1bffe17 	ldw	r6,-8(fp)
 4004fe4:	e1ffff17 	ldw	r7,-4(fp)
 4004fe8:	4001b140 	call	4001b14 <vid_set_pixel>
void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 4004fec:	e0bffc17 	ldw	r2,-16(fp)
 4004ff0:	10800044 	addi	r2,r2,1
 4004ff4:	e0bffc15 	stw	r2,-16(fp)
 4004ff8:	e0bfff17 	ldw	r2,-4(fp)
 4004ffc:	10800117 	ldw	r2,4(r2)
 4005000:	e0fffc17 	ldw	r3,-16(fp)
 4005004:	18bfad16 	blt	r3,r2,4004ebc <VPG_ColorBar+0x24>

void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
 4005008:	e0bffd17 	ldw	r2,-12(fp)
 400500c:	10800044 	addi	r2,r2,1
 4005010:	e0bffd15 	stw	r2,-12(fp)
 4005014:	e0bfff17 	ldw	r2,-4(fp)
 4005018:	10800217 	ldw	r2,8(r2)
 400501c:	e0fffd17 	ldw	r3,-12(fp)
 4005020:	18bfa416 	blt	r3,r2,4004eb4 <VPG_ColorBar+0x1c>

        }

    }

}
 4005024:	e037883a 	mov	sp,fp
 4005028:	dfc00117 	ldw	ra,4(sp)
 400502c:	df000017 	ldw	fp,0(sp)
 4005030:	dec00204 	addi	sp,sp,8
 4005034:	f800283a 	ret

04005038 <GUI_ShowPAT>:


void GUI_ShowPAT(alt_video_display *pDisplay, int PatId){
 4005038:	defffc04 	addi	sp,sp,-16
 400503c:	dfc00315 	stw	ra,12(sp)
 4005040:	df000215 	stw	fp,8(sp)
 4005044:	df000204 	addi	fp,sp,8
 4005048:	e13ffe15 	stw	r4,-8(fp)
 400504c:	e17fff15 	stw	r5,-4(fp)

                switch(PatId){
 4005050:	e0bfff17 	ldw	r2,-4(fp)
 4005054:	108003e8 	cmpgeui	r2,r2,15
 4005058:	1000521e 	bne	r2,zero,40051a4 <GUI_ShowPAT+0x16c>
 400505c:	e0bfff17 	ldw	r2,-4(fp)
 4005060:	1085883a 	add	r2,r2,r2
 4005064:	1087883a 	add	r3,r2,r2
 4005068:	00810034 	movhi	r2,1024
 400506c:	10941f04 	addi	r2,r2,20604
 4005070:	1885883a 	add	r2,r3,r2
 4005074:	10800017 	ldw	r2,0(r2)
 4005078:	1000683a 	jmp	r2
 400507c:	040050b8 	rdprs	r16,zero,322
 4005080:	040050c4 	movi	r16,323
 4005084:	040050d8 	cmpnei	r16,zero,323
 4005088:	040050e8 	cmpgeui	r16,zero,323
 400508c:	040050f8 	rdprs	r16,zero,323
 4005090:	04005108 	cmpgei	r16,zero,324
 4005094:	04005114 	movui	r16,324
 4005098:	04005124 	muli	r16,zero,324
 400509c:	04005134 	movhi	r16,324
 40050a0:	04005144 	movi	r16,325
 40050a4:	04005154 	movui	r16,325
 40050a8:	04005164 	muli	r16,zero,325
 40050ac:	04005174 	movhi	r16,325
 40050b0:	04005184 	movi	r16,326
 40050b4:	04005194 	movui	r16,326
                    case 0: VPG_ColorBar(pDisplay); break;
 40050b8:	e13ffe17 	ldw	r4,-8(fp)
 40050bc:	4004e980 	call	4004e98 <VPG_ColorBar>
 40050c0:	00003806 	br	40051a4 <GUI_ShowPAT+0x16c>
                    case 1: VPG_ColorPanel(pDisplay, WHITE_24); break;
 40050c4:	e13ffe17 	ldw	r4,-8(fp)
 40050c8:	01404034 	movhi	r5,256
 40050cc:	297fffc4 	addi	r5,r5,-1
 40050d0:	4004b240 	call	4004b24 <VPG_ColorPanel>
 40050d4:	00003306 	br	40051a4 <GUI_ShowPAT+0x16c>
                    case 2: VPG_ColorPanel(pDisplay, RED_24); break;
 40050d8:	e13ffe17 	ldw	r4,-8(fp)
 40050dc:	01403ff4 	movhi	r5,255
 40050e0:	4004b240 	call	4004b24 <VPG_ColorPanel>
 40050e4:	00002f06 	br	40051a4 <GUI_ShowPAT+0x16c>
                    case 3: VPG_ColorPanel(pDisplay, GREEN_24); break;
 40050e8:	e13ffe17 	ldw	r4,-8(fp)
 40050ec:	01600014 	movui	r5,32768
 40050f0:	4004b240 	call	4004b24 <VPG_ColorPanel>
 40050f4:	00002b06 	br	40051a4 <GUI_ShowPAT+0x16c>
                    case 4: VPG_ColorPanel(pDisplay, BLUE_24); break;
 40050f8:	e13ffe17 	ldw	r4,-8(fp)
 40050fc:	01403fc4 	movi	r5,255
 4005100:	4004b240 	call	4004b24 <VPG_ColorPanel>
 4005104:	00002706 	br	40051a4 <GUI_ShowPAT+0x16c>
                    case 5: VPG_XLine(pDisplay); break;
 4005108:	e13ffe17 	ldw	r4,-8(fp)
 400510c:	4004b000 	call	4004b00 <VPG_XLine>
 4005110:	00002406 	br	40051a4 <GUI_ShowPAT+0x16c>
                    case 6: VPG_VGrid(pDisplay, 2); break;
 4005114:	e13ffe17 	ldw	r4,-8(fp)
 4005118:	01400084 	movi	r5,2
 400511c:	4004cd00 	call	4004cd0 <VPG_VGrid>
 4005120:	00002006 	br	40051a4 <GUI_ShowPAT+0x16c>
                    case 7: VPG_VGrid(pDisplay, 4); break;
 4005124:	e13ffe17 	ldw	r4,-8(fp)
 4005128:	01400104 	movi	r5,4
 400512c:	4004cd00 	call	4004cd0 <VPG_VGrid>
 4005130:	00001c06 	br	40051a4 <GUI_ShowPAT+0x16c>
                    case 8: VPG_VGrid(pDisplay, 8); break;
 4005134:	e13ffe17 	ldw	r4,-8(fp)
 4005138:	01400204 	movi	r5,8
 400513c:	4004cd00 	call	4004cd0 <VPG_VGrid>
 4005140:	00001806 	br	40051a4 <GUI_ShowPAT+0x16c>
                    case 9: VPG_HGrid(pDisplay, 2); break;
 4005144:	e13ffe17 	ldw	r4,-8(fp)
 4005148:	01400084 	movi	r5,2
 400514c:	4004db40 	call	4004db4 <VPG_HGrid>
 4005150:	00001406 	br	40051a4 <GUI_ShowPAT+0x16c>
                    case 10: VPG_HGrid(pDisplay, 4); break;
 4005154:	e13ffe17 	ldw	r4,-8(fp)
 4005158:	01400104 	movi	r5,4
 400515c:	4004db40 	call	4004db4 <VPG_HGrid>
 4005160:	00001006 	br	40051a4 <GUI_ShowPAT+0x16c>
                    case 11: VPG_HGrid(pDisplay, 8); break;
 4005164:	e13ffe17 	ldw	r4,-8(fp)
 4005168:	01400204 	movi	r5,8
 400516c:	4004db40 	call	4004db4 <VPG_HGrid>
 4005170:	00000c06 	br	40051a4 <GUI_ShowPAT+0x16c>
                    case 12: VPG_Grid(pDisplay, 2); break;
 4005174:	e13ffe17 	ldw	r4,-8(fp)
 4005178:	01400084 	movi	r5,2
 400517c:	4004bd40 	call	4004bd4 <VPG_Grid>
 4005180:	00000806 	br	40051a4 <GUI_ShowPAT+0x16c>
                    case 13: VPG_Grid(pDisplay, 4); break;
 4005184:	e13ffe17 	ldw	r4,-8(fp)
 4005188:	01400104 	movi	r5,4
 400518c:	4004bd40 	call	4004bd4 <VPG_Grid>
 4005190:	00000406 	br	40051a4 <GUI_ShowPAT+0x16c>
                    case 14: VPG_Grid(pDisplay, 8); break;
 4005194:	e13ffe17 	ldw	r4,-8(fp)
 4005198:	01400204 	movi	r5,8
 400519c:	4004bd40 	call	4004bd4 <VPG_Grid>
 40051a0:	0001883a 	nop
                }

}
 40051a4:	e037883a 	mov	sp,fp
 40051a8:	dfc00117 	ldw	ra,4(sp)
 40051ac:	df000017 	ldw	fp,0(sp)
 40051b0:	dec00204 	addi	sp,sp,8
 40051b4:	f800283a 	ret

040051b8 <GUI_VPG>:

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
 40051b8:	defff904 	addi	sp,sp,-28
 40051bc:	dfc00615 	stw	ra,24(sp)
 40051c0:	df000515 	stw	fp,20(sp)
 40051c4:	df000504 	addi	fp,sp,20
 40051c8:	e13ffe15 	stw	r4,-8(fp)
 40051cc:	e17fff15 	stw	r5,-4(fp)
	int X, Y;
	int PatId = 0;
 40051d0:	e03ffb15 	stw	zero,-20(fp)

    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
 40051d4:	e13ffe17 	ldw	r4,-8(fp)
 40051d8:	000b883a 	mov	r5,zero
 40051dc:	40010700 	call	4001070 <vid_clean_screen>


    VPG_ColorBar(pDisplay);
 40051e0:	e13ffe17 	ldw	r4,-8(fp)
 40051e4:	4004e980 	call	4004e98 <VPG_ColorBar>

    GUI_ShowPAT(pDisplay, PatId);
 40051e8:	e13ffe17 	ldw	r4,-8(fp)
 40051ec:	e17ffb17 	ldw	r5,-20(fp)
 40051f0:	40050380 	call	4005038 <GUI_ShowPAT>
 40051f4:	00000106 	br	40051fc <GUI_VPG+0x44>
            printf("PatId=%d\r\n", PatId);
            GUI_ShowPAT(pDisplay, PatId);
            usleep(300*1000); // debounce
            Touch_EmptyFifo( pTouch);
        }
    }
 40051f8:	0001883a 	nop
    VPG_ColorBar(pDisplay);

    GUI_ShowPAT(pDisplay, PatId);

    while(1){
        if (Touch_GetXY(pTouch, &X, &Y)){
 40051fc:	e0fffc04 	addi	r3,fp,-16
 4005200:	e0bffd04 	addi	r2,fp,-12
 4005204:	e13fff17 	ldw	r4,-4(fp)
 4005208:	180b883a 	mov	r5,r3
 400520c:	100d883a 	mov	r6,r2
 4005210:	4006b000 	call	4006b00 <Touch_GetXY>
 4005214:	103ff826 	beq	r2,zero,40051f8 <GUI_VPG+0x40>
            //printf(".");

            // change pattern
            PatId++;
 4005218:	e0bffb17 	ldw	r2,-20(fp)
 400521c:	10800044 	addi	r2,r2,1
 4005220:	e0bffb15 	stw	r2,-20(fp)
            if (PatId > 14)
 4005224:	e0bffb17 	ldw	r2,-20(fp)
 4005228:	108003d0 	cmplti	r2,r2,15
 400522c:	1000011e 	bne	r2,zero,4005234 <GUI_VPG+0x7c>
                PatId = 0;
 4005230:	e03ffb15 	stw	zero,-20(fp)

            printf("PatId=%d\r\n", PatId);
 4005234:	010100f4 	movhi	r4,1027
 4005238:	21357b04 	addi	r4,r4,-10772
 400523c:	e17ffb17 	ldw	r5,-20(fp)
 4005240:	40092840 	call	4009284 <printf>
            GUI_ShowPAT(pDisplay, PatId);
 4005244:	e13ffe17 	ldw	r4,-8(fp)
 4005248:	e17ffb17 	ldw	r5,-20(fp)
 400524c:	40050380 	call	4005038 <GUI_ShowPAT>
            usleep(300*1000); // debounce
 4005250:	01000174 	movhi	r4,5
 4005254:	2124f804 	addi	r4,r4,-27680
 4005258:	4011a700 	call	4011a70 <usleep>
            Touch_EmptyFifo( pTouch);
 400525c:	e13fff17 	ldw	r4,-4(fp)
 4005260:	4006ac80 	call	4006ac8 <Touch_EmptyFifo>
        }
    }
 4005264:	003fe406 	br	40051f8 <GUI_VPG+0x40>

04005268 <main>:
#include "system.h"

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch);

int main()
{
 4005268:	defff704 	addi	sp,sp,-36
 400526c:	dfc00815 	stw	ra,32(sp)
 4005270:	df000715 	stw	fp,28(sp)
 4005274:	df000704 	addi	fp,sp,28
	TOUCH_HANDLE *pTouch;
	alt_video_display Display;


    const bool bVPG = ((IORD(KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
 4005278:	00820034 	movhi	r2,2048
 400527c:	10841004 	addi	r2,r2,4160
 4005280:	10800037 	ldwio	r2,0(r2)
 4005284:	1080004c 	andi	r2,r2,1
 4005288:	1005003a 	cmpeq	r2,r2,zero
 400528c:	10803fcc 	andi	r2,r2,255
 4005290:	e0bff915 	stw	r2,-28(fp)

   printf("LT24 Demo!\n");
 4005294:	010100f4 	movhi	r4,1027
 4005298:	21357e04 	addi	r4,r4,-10760
 400529c:	40093440 	call	4009344 <puts>

   // init touch
   pTouch = Touch_Init(TOUCH_PANEL_SPI_BASE, TOUCH_PANEL_PEN_IRQ_N_BASE, TOUCH_PANEL_PEN_IRQ_N_IRQ);
 40052a0:	01020034 	movhi	r4,2048
 40052a4:	21040004 	addi	r4,r4,4096
 40052a8:	01420034 	movhi	r5,2048
 40052ac:	29441804 	addi	r5,r5,4192
 40052b0:	018000c4 	movi	r6,3
 40052b4:	40068ec0 	call	40068ec <Touch_Init>
 40052b8:	e0bffa15 	stw	r2,-24(fp)
   if (!pTouch){
 40052bc:	e0bffa17 	ldw	r2,-24(fp)
 40052c0:	1000041e 	bne	r2,zero,40052d4 <main+0x6c>
       printf("Failed to init touch\r\n");
 40052c4:	010100f4 	movhi	r4,1027
 40052c8:	21358104 	addi	r4,r4,-10748
 40052cc:	40093440 	call	4009344 <puts>
 40052d0:	00000306 	br	40052e0 <main+0x78>
   }else{
       printf("Init touch successfully\r\n");
 40052d4:	010100f4 	movhi	r4,1027
 40052d8:	21358704 	addi	r4,r4,-10724
 40052dc:	40093440 	call	4009344 <puts>

   }

   // init LCD
   LCD_Init();
 40052e0:	40007ec0 	call	40007ec <LCD_Init>
   LCD_Clear(0X0000);
 40052e4:	0009883a 	mov	r4,zero
 40052e8:	40007000 	call	4000700 <LCD_Clear>

   Display.interlace = 0;
 40052ec:	e03fff15 	stw	zero,-4(fp)
   Display.bytes_per_pixel = 2;
 40052f0:	00800084 	movi	r2,2
 40052f4:	e0bffe15 	stw	r2,-8(fp)
   Display.color_depth = 16;
 40052f8:	00800404 	movi	r2,16
 40052fc:	e0bffb15 	stw	r2,-20(fp)
   Display.height = SCREEN_HEIGHT;
 4005300:	00805004 	movi	r2,320
 4005304:	e0bffd15 	stw	r2,-12(fp)
   Display.width = SCREEN_WIDTH;
 4005308:	00803c04 	movi	r2,240
 400530c:	e0bffc15 	stw	r2,-16(fp)

   // run demo
   if (bVPG)
 4005310:	e0bff917 	ldw	r2,-28(fp)
 4005314:	10000526 	beq	r2,zero,400532c <main+0xc4>
       GUI_VPG(&Display, pTouch); // enter vpg mode when users press KEY0
 4005318:	e0bffb04 	addi	r2,fp,-20
 400531c:	1009883a 	mov	r4,r2
 4005320:	e17ffa17 	ldw	r5,-24(fp)
 4005324:	40051b80 	call	40051b8 <GUI_VPG>
 4005328:	00000406 	br	400533c <main+0xd4>
   else
	   GUI(&Display, pTouch);
 400532c:	e0bffb04 	addi	r2,fp,-20
 4005330:	1009883a 	mov	r4,r2
 4005334:	e17ffa17 	ldw	r5,-24(fp)
 4005338:	40047bc0 	call	40047bc <GUI>


}
 400533c:	e037883a 	mov	sp,fp
 4005340:	dfc00117 	ldw	ra,4(sp)
 4005344:	df000017 	ldw	fp,0(sp)
 4005348:	dec00204 	addi	sp,sp,8
 400534c:	f800283a 	ret

04005350 <my_wait>:
    #define I2C_DEBUG(x)    DEBUG(x)  
#else
    #define I2C_DEBUG(x)
#endif

void my_wait(int nWait){
 4005350:	defffd04 	addi	sp,sp,-12
 4005354:	df000215 	stw	fp,8(sp)
 4005358:	df000204 	addi	fp,sp,8
 400535c:	e13fff15 	stw	r4,-4(fp)
    int i;
    i = 0;
 4005360:	e03ffe15 	stw	zero,-8(fp)
    while (i < nWait){
 4005364:	00000306 	br	4005374 <my_wait+0x24>
        i++;
 4005368:	e0bffe17 	ldw	r2,-8(fp)
 400536c:	10800044 	addi	r2,r2,1
 4005370:	e0bffe15 	stw	r2,-8(fp)
#endif

void my_wait(int nWait){
    int i;
    i = 0;
    while (i < nWait){
 4005374:	e0fffe17 	ldw	r3,-8(fp)
 4005378:	e0bfff17 	ldw	r2,-4(fp)
 400537c:	18bffa16 	blt	r3,r2,4005368 <my_wait+0x18>
        i++;
     //   IOWR(LED_BASE, 0, i);
    }    
}
 4005380:	e037883a 	mov	sp,fp
 4005384:	df000017 	ldw	fp,0(sp)
 4005388:	dec00104 	addi	sp,sp,4
 400538c:	f800283a 	ret

04005390 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 4005390:	defff804 	addi	sp,sp,-32
 4005394:	dfc00715 	stw	ra,28(sp)
 4005398:	df000615 	stw	fp,24(sp)
 400539c:	df000604 	addi	fp,sp,24
 40053a0:	e13ffb15 	stw	r4,-20(fp)
 40053a4:	e17ffc15 	stw	r5,-16(fp)
 40053a8:	3007883a 	mov	r3,r6
 40053ac:	3805883a 	mov	r2,r7
 40053b0:	e1000217 	ldw	r4,8(fp)
 40053b4:	e0fffd05 	stb	r3,-12(fp)
 40053b8:	e0bffe05 	stb	r2,-8(fp)
 40053bc:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
 40053c0:	00800044 	movi	r2,1
 40053c4:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 40053c8:	e13ffb17 	ldw	r4,-20(fp)
 40053cc:	e17ffc17 	ldw	r5,-16(fp)
 40053d0:	40059e40 	call	40059e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 40053d4:	e0bffd03 	ldbu	r2,-12(fp)
 40053d8:	10803fcc 	andi	r2,r2,255
 40053dc:	e13ffb17 	ldw	r4,-20(fp)
 40053e0:	e17ffc17 	ldw	r5,-16(fp)
 40053e4:	100d883a 	mov	r6,r2
 40053e8:	4005ad80 	call	4005ad8 <i2c_write>
 40053ec:	1000041e 	bne	r2,zero,4005400 <I2C_Write+0x70>
        bSuccess = FALSE;
 40053f0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 40053f4:	010100f4 	movhi	r4,1027
 40053f8:	21358e04 	addi	r4,r4,-10696
 40053fc:	40064d40 	call	40064d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 4005400:	e0bffa17 	ldw	r2,-24(fp)
 4005404:	10000a26 	beq	r2,zero,4005430 <I2C_Write+0xa0>
 4005408:	e0bffe03 	ldbu	r2,-8(fp)
 400540c:	e13ffb17 	ldw	r4,-20(fp)
 4005410:	e17ffc17 	ldw	r5,-16(fp)
 4005414:	100d883a 	mov	r6,r2
 4005418:	4005ad80 	call	4005ad8 <i2c_write>
 400541c:	1000041e 	bne	r2,zero,4005430 <I2C_Write+0xa0>
        bSuccess = FALSE;
 4005420:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 4005424:	010100f4 	movhi	r4,1027
 4005428:	21359604 	addi	r4,r4,-10664
 400542c:	40064d40 	call	40064d4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 4005430:	e0bffa17 	ldw	r2,-24(fp)
 4005434:	10000a26 	beq	r2,zero,4005460 <I2C_Write+0xd0>
 4005438:	e0bfff03 	ldbu	r2,-4(fp)
 400543c:	e13ffb17 	ldw	r4,-20(fp)
 4005440:	e17ffc17 	ldw	r5,-16(fp)
 4005444:	100d883a 	mov	r6,r2
 4005448:	4005ad80 	call	4005ad8 <i2c_write>
 400544c:	1000041e 	bne	r2,zero,4005460 <I2C_Write+0xd0>
        bSuccess = FALSE;
 4005450:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4005454:	010100f4 	movhi	r4,1027
 4005458:	21359f04 	addi	r4,r4,-10628
 400545c:	40064d40 	call	40064d4 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 4005460:	e13ffb17 	ldw	r4,-20(fp)
 4005464:	e17ffc17 	ldw	r5,-16(fp)
 4005468:	4005a680 	call	4005a68 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 400546c:	0106d604 	movi	r4,7000
 4005470:	4011a700 	call	4011a70 <usleep>
    
    return bSuccess;
 4005474:	e0bffa17 	ldw	r2,-24(fp)

    
}
 4005478:	e037883a 	mov	sp,fp
 400547c:	dfc00117 	ldw	ra,4(sp)
 4005480:	df000017 	ldw	fp,0(sp)
 4005484:	dec00204 	addi	sp,sp,8
 4005488:	f800283a 	ret

0400548c <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
 400548c:	defff704 	addi	sp,sp,-36
 4005490:	dfc00815 	stw	ra,32(sp)
 4005494:	df000715 	stw	fp,28(sp)
 4005498:	df000704 	addi	fp,sp,28
 400549c:	e13ffb15 	stw	r4,-20(fp)
 40054a0:	e17ffc15 	stw	r5,-16(fp)
 40054a4:	3007883a 	mov	r3,r6
 40054a8:	3805883a 	mov	r2,r7
 40054ac:	e1000217 	ldw	r4,8(fp)
 40054b0:	e0fffd05 	stb	r3,-12(fp)
 40054b4:	e0bffe05 	stb	r2,-8(fp)
 40054b8:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess = TRUE;
 40054bc:	00800044 	movi	r2,1
 40054c0:	e0bff915 	stw	r2,-28(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
 40054c4:	e0bfff0b 	ldhu	r2,-4(fp)
 40054c8:	1004d23a 	srli	r2,r2,8
 40054cc:	e0bffa05 	stb	r2,-24(fp)
    LowByte = ControlData & 0xFF; 
 40054d0:	e0bfff0b 	ldhu	r2,-4(fp)
 40054d4:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 40054d8:	e13ffb17 	ldw	r4,-20(fp)
 40054dc:	e17ffc17 	ldw	r5,-16(fp)
 40054e0:	40059e40 	call	40059e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 40054e4:	e0bffd03 	ldbu	r2,-12(fp)
 40054e8:	10803fcc 	andi	r2,r2,255
 40054ec:	e13ffb17 	ldw	r4,-20(fp)
 40054f0:	e17ffc17 	ldw	r5,-16(fp)
 40054f4:	100d883a 	mov	r6,r2
 40054f8:	4005ad80 	call	4005ad8 <i2c_write>
 40054fc:	1000041e 	bne	r2,zero,4005510 <I2C_Write16+0x84>
        bSuccess = FALSE;
 4005500:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4005504:	010100f4 	movhi	r4,1027
 4005508:	21358e04 	addi	r4,r4,-10696
 400550c:	40064d40 	call	40064d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 4005510:	e0bff917 	ldw	r2,-28(fp)
 4005514:	10000a26 	beq	r2,zero,4005540 <I2C_Write16+0xb4>
 4005518:	e0bffe03 	ldbu	r2,-8(fp)
 400551c:	e13ffb17 	ldw	r4,-20(fp)
 4005520:	e17ffc17 	ldw	r5,-16(fp)
 4005524:	100d883a 	mov	r6,r2
 4005528:	4005ad80 	call	4005ad8 <i2c_write>
 400552c:	1000041e 	bne	r2,zero,4005540 <I2C_Write16+0xb4>
        bSuccess = FALSE;
 4005530:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 4005534:	010100f4 	movhi	r4,1027
 4005538:	21359604 	addi	r4,r4,-10664
 400553c:	40064d40 	call	40064d4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
 4005540:	e0bff917 	ldw	r2,-28(fp)
 4005544:	10000a26 	beq	r2,zero,4005570 <I2C_Write16+0xe4>
 4005548:	e0bffa03 	ldbu	r2,-24(fp)
 400554c:	e13ffb17 	ldw	r4,-20(fp)
 4005550:	e17ffc17 	ldw	r5,-16(fp)
 4005554:	100d883a 	mov	r6,r2
 4005558:	4005ad80 	call	4005ad8 <i2c_write>
 400555c:	1000041e 	bne	r2,zero,4005570 <I2C_Write16+0xe4>
        bSuccess = FALSE;
 4005560:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4005564:	010100f4 	movhi	r4,1027
 4005568:	21359f04 	addi	r4,r4,-10628
 400556c:	40064d40 	call	40064d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
 4005570:	e0bff917 	ldw	r2,-28(fp)
 4005574:	10000a26 	beq	r2,zero,40055a0 <I2C_Write16+0x114>
 4005578:	e0bffa43 	ldbu	r2,-23(fp)
 400557c:	e13ffb17 	ldw	r4,-20(fp)
 4005580:	e17ffc17 	ldw	r5,-16(fp)
 4005584:	100d883a 	mov	r6,r2
 4005588:	4005ad80 	call	4005ad8 <i2c_write>
 400558c:	1000041e 	bne	r2,zero,40055a0 <I2C_Write16+0x114>
        bSuccess = FALSE;
 4005590:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4005594:	010100f4 	movhi	r4,1027
 4005598:	21359f04 	addi	r4,r4,-10628
 400559c:	40064d40 	call	40064d4 <myprintf>
    }    
    i2c_stop(clk_base, data_base);
 40055a0:	e13ffb17 	ldw	r4,-20(fp)
 40055a4:	e17ffc17 	ldw	r5,-16(fp)
 40055a8:	4005a680 	call	4005a68 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 40055ac:	0106d604 	movi	r4,7000
 40055b0:	4011a700 	call	4011a70 <usleep>
    
    return bSuccess;
 40055b4:	e0bff917 	ldw	r2,-28(fp)

    
}
 40055b8:	e037883a 	mov	sp,fp
 40055bc:	dfc00117 	ldw	ra,4(sp)
 40055c0:	df000017 	ldw	fp,0(sp)
 40055c4:	dec00204 	addi	sp,sp,8
 40055c8:	f800283a 	ret

040055cc <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 40055cc:	defff904 	addi	sp,sp,-28
 40055d0:	dfc00615 	stw	ra,24(sp)
 40055d4:	df000515 	stw	fp,20(sp)
 40055d8:	df000504 	addi	fp,sp,20
 40055dc:	e13ffc15 	stw	r4,-16(fp)
 40055e0:	e17ffd15 	stw	r5,-12(fp)
 40055e4:	3007883a 	mov	r3,r6
 40055e8:	3805883a 	mov	r2,r7
 40055ec:	e0fffe05 	stb	r3,-8(fp)
 40055f0:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 40055f4:	00800044 	movi	r2,1
 40055f8:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 40055fc:	e13ffc17 	ldw	r4,-16(fp)
 4005600:	e17ffd17 	ldw	r5,-12(fp)
 4005604:	40059e40 	call	40059e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4005608:	e0bffe03 	ldbu	r2,-8(fp)
 400560c:	10803fcc 	andi	r2,r2,255
 4005610:	e13ffc17 	ldw	r4,-16(fp)
 4005614:	e17ffd17 	ldw	r5,-12(fp)
 4005618:	100d883a 	mov	r6,r2
 400561c:	4005ad80 	call	4005ad8 <i2c_write>
 4005620:	1000041e 	bne	r2,zero,4005634 <I2C_Read+0x68>
        bSuccess = FALSE;
 4005624:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(1) Fail: Address NACK!\n"));
 4005628:	010100f4 	movhi	r4,1027
 400562c:	2135a704 	addi	r4,r4,-10596
 4005630:	40064d40 	call	40064d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 4005634:	e0bffb17 	ldw	r2,-20(fp)
 4005638:	10000a26 	beq	r2,zero,4005664 <I2C_Read+0x98>
 400563c:	e0bfff03 	ldbu	r2,-4(fp)
 4005640:	e13ffc17 	ldw	r4,-16(fp)
 4005644:	e17ffd17 	ldw	r5,-12(fp)
 4005648:	100d883a 	mov	r6,r2
 400564c:	4005ad80 	call	4005ad8 <i2c_write>
 4005650:	1000041e 	bne	r2,zero,4005664 <I2C_Read+0x98>
        bSuccess = FALSE;
 4005654:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(2) Fail: SubAddress NACK!\n"));
 4005658:	010100f4 	movhi	r4,1027
 400565c:	2135b004 	addi	r4,r4,-10560
 4005660:	40064d40 	call	40064d4 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 4005664:	e13ffc17 	ldw	r4,-16(fp)
 4005668:	e17ffd17 	ldw	r5,-12(fp)
 400566c:	40059e40 	call	40059e4 <i2c_start>
    DeviceAddr |= 1; // Read
 4005670:	e0bffe03 	ldbu	r2,-8(fp)
 4005674:	10800054 	ori	r2,r2,1
 4005678:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 400567c:	e0bffb17 	ldw	r2,-20(fp)
 4005680:	10000b26 	beq	r2,zero,40056b0 <I2C_Read+0xe4>
 4005684:	e0bffe03 	ldbu	r2,-8(fp)
 4005688:	10803fcc 	andi	r2,r2,255
 400568c:	e13ffc17 	ldw	r4,-16(fp)
 4005690:	e17ffd17 	ldw	r5,-12(fp)
 4005694:	100d883a 	mov	r6,r2
 4005698:	4005ad80 	call	4005ad8 <i2c_write>
 400569c:	1000041e 	bne	r2,zero,40056b0 <I2C_Read+0xe4>
        bSuccess = FALSE;
 40056a0:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(3) Fail: Address+1 NACK!\n"));
 40056a4:	010100f4 	movhi	r4,1027
 40056a8:	2135b904 	addi	r4,r4,-10524
 40056ac:	40064d40 	call	40064d4 <myprintf>
    }
    
    if (bSuccess){
 40056b0:	e0bffb17 	ldw	r2,-20(fp)
 40056b4:	10000526 	beq	r2,zero,40056cc <I2C_Read+0x100>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 40056b8:	e13ffc17 	ldw	r4,-16(fp)
 40056bc:	e17ffd17 	ldw	r5,-12(fp)
 40056c0:	e1800217 	ldw	r6,8(fp)
 40056c4:	000f883a 	mov	r7,zero
 40056c8:	4005c440 	call	4005c44 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 40056cc:	e13ffc17 	ldw	r4,-16(fp)
 40056d0:	e17ffd17 	ldw	r5,-12(fp)
 40056d4:	4005a680 	call	4005a68 <i2c_stop>
    
    return bSuccess;
 40056d8:	e0bffb17 	ldw	r2,-20(fp)
}
 40056dc:	e037883a 	mov	sp,fp
 40056e0:	dfc00117 	ldw	ra,4(sp)
 40056e4:	df000017 	ldw	fp,0(sp)
 40056e8:	dec00204 	addi	sp,sp,8
 40056ec:	f800283a 	ret

040056f0 <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
 40056f0:	defff804 	addi	sp,sp,-32
 40056f4:	dfc00715 	stw	ra,28(sp)
 40056f8:	df000615 	stw	fp,24(sp)
 40056fc:	df000604 	addi	fp,sp,24
 4005700:	e13ffc15 	stw	r4,-16(fp)
 4005704:	e17ffd15 	stw	r5,-12(fp)
 4005708:	3007883a 	mov	r3,r6
 400570c:	3805883a 	mov	r2,r7
 4005710:	e0fffe05 	stb	r3,-8(fp)
 4005714:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 4005718:	00800044 	movi	r2,1
 400571c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 4005720:	e13ffc17 	ldw	r4,-16(fp)
 4005724:	e17ffd17 	ldw	r5,-12(fp)
 4005728:	40059e40 	call	40059e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 400572c:	e0bffe03 	ldbu	r2,-8(fp)
 4005730:	10803fcc 	andi	r2,r2,255
 4005734:	e13ffc17 	ldw	r4,-16(fp)
 4005738:	e17ffd17 	ldw	r5,-12(fp)
 400573c:	100d883a 	mov	r6,r2
 4005740:	4005ad80 	call	4005ad8 <i2c_write>
 4005744:	1000041e 	bne	r2,zero,4005758 <I2C_Read16+0x68>
        bSuccess = FALSE;
 4005748:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 400574c:	010100f4 	movhi	r4,1027
 4005750:	21358e04 	addi	r4,r4,-10696
 4005754:	40064d40 	call	40064d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 4005758:	e0bffa17 	ldw	r2,-24(fp)
 400575c:	10000a26 	beq	r2,zero,4005788 <I2C_Read16+0x98>
 4005760:	e0bfff03 	ldbu	r2,-4(fp)
 4005764:	e13ffc17 	ldw	r4,-16(fp)
 4005768:	e17ffd17 	ldw	r5,-12(fp)
 400576c:	100d883a 	mov	r6,r2
 4005770:	4005ad80 	call	4005ad8 <i2c_write>
 4005774:	1000041e 	bne	r2,zero,4005788 <I2C_Read16+0x98>
        bSuccess = FALSE;
 4005778:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 400577c:	010100f4 	movhi	r4,1027
 4005780:	21359604 	addi	r4,r4,-10664
 4005784:	40064d40 	call	40064d4 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 4005788:	e13ffc17 	ldw	r4,-16(fp)
 400578c:	e17ffd17 	ldw	r5,-12(fp)
 4005790:	40059e40 	call	40059e4 <i2c_start>
    DeviceAddr |= 1; // Read
 4005794:	e0bffe03 	ldbu	r2,-8(fp)
 4005798:	10800054 	ori	r2,r2,1
 400579c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 40057a0:	e0bffa17 	ldw	r2,-24(fp)
 40057a4:	10000b26 	beq	r2,zero,40057d4 <I2C_Read16+0xe4>
 40057a8:	e0bffe03 	ldbu	r2,-8(fp)
 40057ac:	10803fcc 	andi	r2,r2,255
 40057b0:	e13ffc17 	ldw	r4,-16(fp)
 40057b4:	e17ffd17 	ldw	r5,-12(fp)
 40057b8:	100d883a 	mov	r6,r2
 40057bc:	4005ad80 	call	4005ad8 <i2c_write>
 40057c0:	1000041e 	bne	r2,zero,40057d4 <I2C_Read16+0xe4>
        bSuccess = FALSE;
 40057c4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 40057c8:	010100f4 	movhi	r4,1027
 40057cc:	2135c204 	addi	r4,r4,-10488
 40057d0:	40064d40 	call	40064d4 <myprintf>
    }
    
    if (bSuccess){
 40057d4:	e0bffa17 	ldw	r2,-24(fp)
 40057d8:	10000626 	beq	r2,zero,40057f4 <I2C_Read16+0x104>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
 40057dc:	e0bffb44 	addi	r2,fp,-19
 40057e0:	e13ffc17 	ldw	r4,-16(fp)
 40057e4:	e17ffd17 	ldw	r5,-12(fp)
 40057e8:	100d883a 	mov	r6,r2
 40057ec:	01c00044 	movi	r7,1
 40057f0:	4005c440 	call	4005c44 <i2c_read>
    }        
    if (bSuccess){
 40057f4:	e0bffa17 	ldw	r2,-24(fp)
 40057f8:	10000626 	beq	r2,zero,4005814 <I2C_Read16+0x124>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
 40057fc:	e0bffb04 	addi	r2,fp,-20
 4005800:	e13ffc17 	ldw	r4,-16(fp)
 4005804:	e17ffd17 	ldw	r5,-12(fp)
 4005808:	100d883a 	mov	r6,r2
 400580c:	000f883a 	mov	r7,zero
 4005810:	4005c440 	call	4005c44 <i2c_read>
    }        
    if (bSuccess)
 4005814:	e0bffa17 	ldw	r2,-24(fp)
 4005818:	10000a26 	beq	r2,zero,4005844 <I2C_Read16+0x154>
        *pControlData = (HighByte << 8) | LowByte;
 400581c:	e0bffb43 	ldbu	r2,-19(fp)
 4005820:	10803fcc 	andi	r2,r2,255
 4005824:	1004923a 	slli	r2,r2,8
 4005828:	1007883a 	mov	r3,r2
 400582c:	e0bffb03 	ldbu	r2,-20(fp)
 4005830:	10803fcc 	andi	r2,r2,255
 4005834:	1884b03a 	or	r2,r3,r2
 4005838:	1007883a 	mov	r3,r2
 400583c:	e0800217 	ldw	r2,8(fp)
 4005840:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
 4005844:	e13ffc17 	ldw	r4,-16(fp)
 4005848:	e17ffd17 	ldw	r5,-12(fp)
 400584c:	4005a680 	call	4005a68 <i2c_stop>
    
    return bSuccess;
 4005850:	e0bffa17 	ldw	r2,-24(fp)
}
 4005854:	e037883a 	mov	sp,fp
 4005858:	dfc00117 	ldw	ra,4(sp)
 400585c:	df000017 	ldw	fp,0(sp)
 4005860:	dec00204 	addi	sp,sp,8
 4005864:	f800283a 	ret

04005868 <I2C_MultipleRead>:


bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
 4005868:	defff704 	addi	sp,sp,-36
 400586c:	dfc00815 	stw	ra,32(sp)
 4005870:	df000715 	stw	fp,28(sp)
 4005874:	df000704 	addi	fp,sp,28
 4005878:	e13ffb15 	stw	r4,-20(fp)
 400587c:	e17ffc15 	stw	r5,-16(fp)
 4005880:	3007883a 	mov	r3,r6
 4005884:	3805883a 	mov	r2,r7
 4005888:	e1000317 	ldw	r4,12(fp)
 400588c:	e0fffd05 	stb	r3,-12(fp)
 4005890:	e0bffe05 	stb	r2,-8(fp)
 4005894:	e13fff0d 	sth	r4,-4(fp)
    int i;
    bool bSuccess = TRUE;
 4005898:	00800044 	movi	r2,1
 400589c:	e0bffa15 	stw	r2,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 40058a0:	e13ffb17 	ldw	r4,-20(fp)
 40058a4:	e17ffc17 	ldw	r5,-16(fp)
 40058a8:	40059e40 	call	40059e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 40058ac:	e0bffd03 	ldbu	r2,-12(fp)
 40058b0:	10803fcc 	andi	r2,r2,255
 40058b4:	e13ffb17 	ldw	r4,-20(fp)
 40058b8:	e17ffc17 	ldw	r5,-16(fp)
 40058bc:	100d883a 	mov	r6,r2
 40058c0:	4005ad80 	call	4005ad8 <i2c_write>
 40058c4:	1000041e 	bne	r2,zero,40058d8 <I2C_MultipleRead+0x70>
        bSuccess = FALSE;
 40058c8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(1) Fail: Address NACK!\n"));
 40058cc:	010100f4 	movhi	r4,1027
 40058d0:	2135cb04 	addi	r4,r4,-10452
 40058d4:	40064d40 	call	40064d4 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 40058d8:	e0bffa17 	ldw	r2,-24(fp)
 40058dc:	10000a26 	beq	r2,zero,4005908 <I2C_MultipleRead+0xa0>
 40058e0:	e0bffe03 	ldbu	r2,-8(fp)
 40058e4:	e13ffb17 	ldw	r4,-20(fp)
 40058e8:	e17ffc17 	ldw	r5,-16(fp)
 40058ec:	100d883a 	mov	r6,r2
 40058f0:	4005ad80 	call	4005ad8 <i2c_write>
 40058f4:	1000041e 	bne	r2,zero,4005908 <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
 40058f8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(2) Fail: SubAddress NACK!\n"));
 40058fc:	010100f4 	movhi	r4,1027
 4005900:	2135d604 	addi	r4,r4,-10408
 4005904:	40064d40 	call	40064d4 <myprintf>
    }    
    if (bSuccess)        
 4005908:	e0bffa17 	ldw	r2,-24(fp)
 400590c:	10000326 	beq	r2,zero,400591c <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
 4005910:	e13ffb17 	ldw	r4,-20(fp)
 4005914:	e17ffc17 	ldw	r5,-16(fp)
 4005918:	40059e40 	call	40059e4 <i2c_start>
    DeviceAddr |= 1; // Read
 400591c:	e0bffd03 	ldbu	r2,-12(fp)
 4005920:	10800054 	ori	r2,r2,1
 4005924:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4005928:	e0bffa17 	ldw	r2,-24(fp)
 400592c:	10000b26 	beq	r2,zero,400595c <I2C_MultipleRead+0xf4>
 4005930:	e0bffd03 	ldbu	r2,-12(fp)
 4005934:	10803fcc 	andi	r2,r2,255
 4005938:	e13ffb17 	ldw	r4,-20(fp)
 400593c:	e17ffc17 	ldw	r5,-16(fp)
 4005940:	100d883a 	mov	r6,r2
 4005944:	4005ad80 	call	4005ad8 <i2c_write>
 4005948:	1000041e 	bne	r2,zero,400595c <I2C_MultipleRead+0xf4>
        bSuccess = FALSE;
 400594c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
 4005950:	010100f4 	movhi	r4,1027
 4005954:	2135e104 	addi	r4,r4,-10364
 4005958:	40064d40 	call	40064d4 <myprintf>
    }
    
    if (bSuccess){
 400595c:	e0bffa17 	ldw	r2,-24(fp)
 4005960:	10001726 	beq	r2,zero,40059c0 <I2C_MultipleRead+0x158>
        for(i=0;i<len && bSuccess;i++){
 4005964:	e03ff915 	stw	zero,-28(fp)
 4005968:	00001006 	br	40059ac <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
 400596c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005970:	10ffffc4 	addi	r3,r2,-1
 4005974:	e0bff917 	ldw	r2,-28(fp)
 4005978:	1884c03a 	cmpne	r2,r3,r2
 400597c:	10803fcc 	andi	r2,r2,255
 4005980:	e13ffb17 	ldw	r4,-20(fp)
 4005984:	e17ffc17 	ldw	r5,-16(fp)
 4005988:	e1800217 	ldw	r6,8(fp)
 400598c:	100f883a 	mov	r7,r2
 4005990:	4005c440 	call	4005c44 <i2c_read>
            pBuf++;
 4005994:	e0800217 	ldw	r2,8(fp)
 4005998:	10800044 	addi	r2,r2,1
 400599c:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 40059a0:	e0bff917 	ldw	r2,-28(fp)
 40059a4:	10800044 	addi	r2,r2,1
 40059a8:	e0bff915 	stw	r2,-28(fp)
 40059ac:	e0bfff0b 	ldhu	r2,-4(fp)
 40059b0:	e0fff917 	ldw	r3,-28(fp)
 40059b4:	1880020e 	bge	r3,r2,40059c0 <I2C_MultipleRead+0x158>
 40059b8:	e0bffa17 	ldw	r2,-24(fp)
 40059bc:	103feb1e 	bne	r2,zero,400596c <I2C_MultipleRead+0x104>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
 40059c0:	e13ffb17 	ldw	r4,-20(fp)
 40059c4:	e17ffc17 	ldw	r5,-16(fp)
 40059c8:	4005a680 	call	4005a68 <i2c_stop>
    
    return bSuccess;    
 40059cc:	e0bffa17 	ldw	r2,-24(fp)
    
}
 40059d0:	e037883a 	mov	sp,fp
 40059d4:	dfc00117 	ldw	ra,4(sp)
 40059d8:	df000017 	ldw	fp,0(sp)
 40059dc:	dec00204 	addi	sp,sp,8
 40059e0:	f800283a 	ret

040059e4 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 40059e4:	defffc04 	addi	sp,sp,-16
 40059e8:	dfc00315 	stw	ra,12(sp)
 40059ec:	df000215 	stw	fp,8(sp)
 40059f0:	df000204 	addi	fp,sp,8
 40059f4:	e13ffe15 	stw	r4,-8(fp)
 40059f8:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 40059fc:	e0bfff17 	ldw	r2,-4(fp)
 4005a00:	10800104 	addi	r2,r2,4
 4005a04:	00c00044 	movi	r3,1
 4005a08:	10c00035 	stwio	r3,0(r2)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
 4005a0c:	e0bfff17 	ldw	r2,-4(fp)
 4005a10:	00c00044 	movi	r3,1
 4005a14:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
 4005a18:	e0bffe17 	ldw	r2,-8(fp)
 4005a1c:	00c00044 	movi	r3,1
 4005a20:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 4005a24:	01000584 	movi	r4,22
 4005a28:	40053500 	call	4005350 <my_wait>
     
    SDA_LOW(data_base); // data low
 4005a2c:	e0bfff17 	ldw	r2,-4(fp)
 4005a30:	0007883a 	mov	r3,zero
 4005a34:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
 4005a38:	01000584 	movi	r4,22
 4005a3c:	40053500 	call	4005350 <my_wait>
    SCL_LOW(clk_base); // clock low
 4005a40:	e0bffe17 	ldw	r2,-8(fp)
 4005a44:	0007883a 	mov	r3,zero
 4005a48:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 4005a4c:	01000584 	movi	r4,22
 4005a50:	40053500 	call	4005350 <my_wait>
}
 4005a54:	e037883a 	mov	sp,fp
 4005a58:	dfc00117 	ldw	ra,4(sp)
 4005a5c:	df000017 	ldw	fp,0(sp)
 4005a60:	dec00204 	addi	sp,sp,8
 4005a64:	f800283a 	ret

04005a68 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 4005a68:	defffc04 	addi	sp,sp,-16
 4005a6c:	dfc00315 	stw	ra,12(sp)
 4005a70:	df000215 	stw	fp,8(sp)
 4005a74:	df000204 	addi	fp,sp,8
 4005a78:	e13ffe15 	stw	r4,-8(fp)
 4005a7c:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 4005a80:	e0bfff17 	ldw	r2,-4(fp)
 4005a84:	10800104 	addi	r2,r2,4
 4005a88:	00c00044 	movi	r3,1
 4005a8c:	10c00035 	stwio	r3,0(r2)
    SDA_LOW(data_base); // Data Low
 4005a90:	e0bfff17 	ldw	r2,-4(fp)
 4005a94:	0007883a 	mov	r3,zero
 4005a98:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 4005a9c:	e0bffe17 	ldw	r2,-8(fp)
 4005aa0:	00c00044 	movi	r3,1
 4005aa4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
 4005aa8:	01000584 	movi	r4,22
 4005aac:	40053500 	call	4005350 <my_wait>
    SDA_HIGH(data_base); // data high
 4005ab0:	e0bfff17 	ldw	r2,-4(fp)
 4005ab4:	00c00044 	movi	r3,1
 4005ab8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
 4005abc:	01000584 	movi	r4,22
 4005ac0:	40053500 	call	4005350 <my_wait>
    

    
}
 4005ac4:	e037883a 	mov	sp,fp
 4005ac8:	dfc00117 	ldw	ra,4(sp)
 4005acc:	df000017 	ldw	fp,0(sp)
 4005ad0:	dec00204 	addi	sp,sp,8
 4005ad4:	f800283a 	ret

04005ad8 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 4005ad8:	defff704 	addi	sp,sp,-36
 4005adc:	dfc00815 	stw	ra,32(sp)
 4005ae0:	df000715 	stw	fp,28(sp)
 4005ae4:	df000704 	addi	fp,sp,28
 4005ae8:	e13ffd15 	stw	r4,-12(fp)
 4005aec:	e17ffe15 	stw	r5,-8(fp)
 4005af0:	3005883a 	mov	r2,r6
 4005af4:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
 4005af8:	00bfe004 	movi	r2,-128
 4005afc:	e0bff905 	stb	r2,-28(fp)
    int i;
    int w;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 4005b00:	e0bffe17 	ldw	r2,-8(fp)
 4005b04:	10800104 	addi	r2,r2,4
 4005b08:	00c00044 	movi	r3,1
 4005b0c:	10c00035 	stwio	r3,0(r2)
    
    for(i=0;i<8;i++){
 4005b10:	e03ffa15 	stw	zero,-24(fp)
 4005b14:	00001f06 	br	4005b94 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 4005b18:	e0bffd17 	ldw	r2,-12(fp)
 4005b1c:	0007883a 	mov	r3,zero
 4005b20:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 4005b24:	e0ffff03 	ldbu	r3,-4(fp)
 4005b28:	e0bff903 	ldbu	r2,-28(fp)
 4005b2c:	1884703a 	and	r2,r3,r2
 4005b30:	10803fcc 	andi	r2,r2,255
 4005b34:	10000426 	beq	r2,zero,4005b48 <i2c_write+0x70>
            SDA_HIGH(data_base);
 4005b38:	e0bffe17 	ldw	r2,-8(fp)
 4005b3c:	00c00044 	movi	r3,1
 4005b40:	10c00035 	stwio	r3,0(r2)
 4005b44:	00000306 	br	4005b54 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
 4005b48:	e0bffe17 	ldw	r2,-8(fp)
 4005b4c:	0007883a 	mov	r3,zero
 4005b50:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 4005b54:	e0bff903 	ldbu	r2,-28(fp)
 4005b58:	1004d07a 	srli	r2,r2,1
 4005b5c:	e0bff905 	stb	r2,-28(fp)
        // clock high
        SCL_HIGH(clk_base);
 4005b60:	e0bffd17 	ldw	r2,-12(fp)
 4005b64:	00c00044 	movi	r3,1
 4005b68:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4005b6c:	01000584 	movi	r4,22
 4005b70:	40053500 	call	4005350 <my_wait>
        SCL_LOW(clk_base);
 4005b74:	e0bffd17 	ldw	r2,-12(fp)
 4005b78:	0007883a 	mov	r3,zero
 4005b7c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4005b80:	01000584 	movi	r4,22
 4005b84:	40053500 	call	4005350 <my_wait>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 4005b88:	e0bffa17 	ldw	r2,-24(fp)
 4005b8c:	10800044 	addi	r2,r2,1
 4005b90:	e0bffa15 	stw	r2,-24(fp)
 4005b94:	e0bffa17 	ldw	r2,-24(fp)
 4005b98:	10800210 	cmplti	r2,r2,8
 4005b9c:	103fde1e 	bne	r2,zero,4005b18 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 4005ba0:	e0bffe17 	ldw	r2,-8(fp)
 4005ba4:	10800104 	addi	r2,r2,4
 4005ba8:	0007883a 	mov	r3,zero
 4005bac:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
//------------------ wait ack for muti-touch panel
SCL_DELAY;
 4005bb0:	01000584 	movi	r4,22
 4005bb4:	40053500 	call	4005350 <my_wait>
w = 0;
 4005bb8:	e03ffb15 	stw	zero,-20(fp)
while(SDA_READ(data_base) && w++ < 1000000){
 4005bbc:	0001883a 	nop
 4005bc0:	e0bffe17 	ldw	r2,-8(fp)
 4005bc4:	10800037 	ldwio	r2,0(r2)
 4005bc8:	10000926 	beq	r2,zero,4005bf0 <i2c_write+0x118>
 4005bcc:	e0bffb17 	ldw	r2,-20(fp)
 4005bd0:	00c003f4 	movhi	r3,15
 4005bd4:	18d08fc4 	addi	r3,r3,16959
 4005bd8:	1884403a 	cmpge	r2,r3,r2
 4005bdc:	e0fffb17 	ldw	r3,-20(fp)
 4005be0:	18c00044 	addi	r3,r3,1
 4005be4:	e0fffb15 	stw	r3,-20(fp)
 4005be8:	10803fcc 	andi	r2,r2,255
 4005bec:	103ff41e 	bne	r2,zero,4005bc0 <i2c_write+0xe8>
}    
    // clock high
    SCL_HIGH(clk_base);  // clock high
 4005bf0:	e0bffd17 	ldw	r2,-12(fp)
 4005bf4:	00c00044 	movi	r3,1
 4005bf8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
 4005bfc:	01000584 	movi	r4,22
 4005c00:	40053500 	call	4005350 <my_wait>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 4005c04:	e0bffe17 	ldw	r2,-8(fp)
 4005c08:	10800037 	ldwio	r2,0(r2)
 4005c0c:	1005003a 	cmpeq	r2,r2,zero
 4005c10:	10803fcc 	andi	r2,r2,255
 4005c14:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 4005c18:	e0bffd17 	ldw	r2,-12(fp)
 4005c1c:	0007883a 	mov	r3,zero
 4005c20:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 4005c24:	01000584 	movi	r4,22
 4005c28:	40053500 	call	4005350 <my_wait>
    return bAck;
 4005c2c:	e0bffc17 	ldw	r2,-16(fp)
}    
 4005c30:	e037883a 	mov	sp,fp
 4005c34:	dfc00117 	ldw	ra,4(sp)
 4005c38:	df000017 	ldw	fp,0(sp)
 4005c3c:	dec00204 	addi	sp,sp,8
 4005c40:	f800283a 	ret

04005c44 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 4005c44:	defff804 	addi	sp,sp,-32
 4005c48:	dfc00715 	stw	ra,28(sp)
 4005c4c:	df000615 	stw	fp,24(sp)
 4005c50:	df000604 	addi	fp,sp,24
 4005c54:	e13ffc15 	stw	r4,-16(fp)
 4005c58:	e17ffd15 	stw	r5,-12(fp)
 4005c5c:	e1bffe15 	stw	r6,-8(fp)
 4005c60:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 4005c64:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 4005c68:	e0bffd17 	ldw	r2,-12(fp)
 4005c6c:	10800104 	addi	r2,r2,4
 4005c70:	0007883a 	mov	r3,zero
 4005c74:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
 4005c78:	e0bffc17 	ldw	r2,-16(fp)
 4005c7c:	0007883a 	mov	r3,zero
 4005c80:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 4005c84:	01000584 	movi	r4,22
 4005c88:	40053500 	call	4005350 <my_wait>

    for(i=0;i<8;i++){
 4005c8c:	e03ffb15 	stw	zero,-20(fp)
 4005c90:	00001606 	br	4005cec <i2c_read+0xa8>
        Data <<= 1;
 4005c94:	e0bffa03 	ldbu	r2,-24(fp)
 4005c98:	1085883a 	add	r2,r2,r2
 4005c9c:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
 4005ca0:	e0bffc17 	ldw	r2,-16(fp)
 4005ca4:	00c00044 	movi	r3,1
 4005ca8:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4005cac:	01000584 	movi	r4,22
 4005cb0:	40053500 	call	4005350 <my_wait>
        if (SDA_READ(data_base))  // read data   
 4005cb4:	e0bffd17 	ldw	r2,-12(fp)
 4005cb8:	10800037 	ldwio	r2,0(r2)
 4005cbc:	10000326 	beq	r2,zero,4005ccc <i2c_read+0x88>
            Data |= 0x01;
 4005cc0:	e0bffa03 	ldbu	r2,-24(fp)
 4005cc4:	10800054 	ori	r2,r2,1
 4005cc8:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
 4005ccc:	e0bffc17 	ldw	r2,-16(fp)
 4005cd0:	0007883a 	mov	r3,zero
 4005cd4:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 4005cd8:	01000584 	movi	r4,22
 4005cdc:	40053500 	call	4005350 <my_wait>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 4005ce0:	e0bffb17 	ldw	r2,-20(fp)
 4005ce4:	10800044 	addi	r2,r2,1
 4005ce8:	e0bffb15 	stw	r2,-20(fp)
 4005cec:	e0bffb17 	ldw	r2,-20(fp)
 4005cf0:	10800210 	cmplti	r2,r2,8
 4005cf4:	103fe71e 	bne	r2,zero,4005c94 <i2c_read+0x50>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 4005cf8:	e0bffc17 	ldw	r2,-16(fp)
 4005cfc:	0007883a 	mov	r3,zero
 4005d00:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 4005d04:	e0bffd17 	ldw	r2,-12(fp)
 4005d08:	10800104 	addi	r2,r2,4
 4005d0c:	00c00044 	movi	r3,1
 4005d10:	10c00035 	stwio	r3,0(r2)
    if (bAck)
 4005d14:	e0bfff17 	ldw	r2,-4(fp)
 4005d18:	10000426 	beq	r2,zero,4005d2c <i2c_read+0xe8>
        SDA_LOW(data_base);
 4005d1c:	e0bffd17 	ldw	r2,-12(fp)
 4005d20:	0007883a 	mov	r3,zero
 4005d24:	10c00035 	stwio	r3,0(r2)
 4005d28:	00000306 	br	4005d38 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
 4005d2c:	e0bffd17 	ldw	r2,-12(fp)
 4005d30:	00c00044 	movi	r3,1
 4005d34:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
 4005d38:	e0bffc17 	ldw	r2,-16(fp)
 4005d3c:	00c00044 	movi	r3,1
 4005d40:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
 4005d44:	01000584 	movi	r4,22
 4005d48:	40053500 	call	4005350 <my_wait>
    SCL_LOW(clk_base); // clock low
 4005d4c:	e0bffc17 	ldw	r2,-16(fp)
 4005d50:	0007883a 	mov	r3,zero
 4005d54:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 4005d58:	01000584 	movi	r4,22
 4005d5c:	40053500 	call	4005350 <my_wait>
    SDA_LOW(data_base);  // data low
 4005d60:	e0bffd17 	ldw	r2,-12(fp)
 4005d64:	0007883a 	mov	r3,zero
 4005d68:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
 4005d6c:	01000584 	movi	r4,22
 4005d70:	40053500 	call	4005350 <my_wait>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 4005d74:	e0bffe17 	ldw	r2,-8(fp)
 4005d78:	e0fffa03 	ldbu	r3,-24(fp)
 4005d7c:	10c00005 	stb	r3,0(r2)
}
 4005d80:	e037883a 	mov	sp,fp
 4005d84:	dfc00117 	ldw	ra,4(sp)
 4005d88:	df000017 	ldw	fp,0(sp)
 4005d8c:	dec00204 	addi	sp,sp,8
 4005d90:	f800283a 	ret

04005d94 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
 4005d94:	defff704 	addi	sp,sp,-36
 4005d98:	dfc00815 	stw	ra,32(sp)
 4005d9c:	df000715 	stw	fp,28(sp)
 4005da0:	df000704 	addi	fp,sp,28
 4005da4:	e13ffb15 	stw	r4,-20(fp)
 4005da8:	e17ffc15 	stw	r5,-16(fp)
 4005dac:	3007883a 	mov	r3,r6
 4005db0:	3805883a 	mov	r2,r7
 4005db4:	e1000217 	ldw	r4,8(fp)
 4005db8:	e0fffd05 	stb	r3,-12(fp)
 4005dbc:	e0bffe0d 	sth	r2,-8(fp)
 4005dc0:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
 4005dc4:	00800044 	movi	r2,1
 4005dc8:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4005dcc:	e0bffe0b 	ldhu	r2,-8(fp)
 4005dd0:	1004d23a 	srli	r2,r2,8
 4005dd4:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 4005dd8:	e0bffe0b 	ldhu	r2,-8(fp)
 4005ddc:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 4005de0:	e13ffb17 	ldw	r4,-20(fp)
 4005de4:	e17ffc17 	ldw	r5,-16(fp)
 4005de8:	40059e40 	call	40059e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4005dec:	e0bffd03 	ldbu	r2,-12(fp)
 4005df0:	10803fcc 	andi	r2,r2,255
 4005df4:	e13ffb17 	ldw	r4,-20(fp)
 4005df8:	e17ffc17 	ldw	r5,-16(fp)
 4005dfc:	100d883a 	mov	r6,r2
 4005e00:	4005ad80 	call	4005ad8 <i2c_write>
 4005e04:	1000041e 	bne	r2,zero,4005e18 <I2CL_Write+0x84>
        bSuccess = FALSE;
 4005e08:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4005e0c:	010100f4 	movhi	r4,1027
 4005e10:	21358e04 	addi	r4,r4,-10696
 4005e14:	40064d40 	call	40064d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4005e18:	e0bff917 	ldw	r2,-28(fp)
 4005e1c:	10000a26 	beq	r2,zero,4005e48 <I2CL_Write+0xb4>
 4005e20:	e0bffa03 	ldbu	r2,-24(fp)
 4005e24:	e13ffb17 	ldw	r4,-20(fp)
 4005e28:	e17ffc17 	ldw	r5,-16(fp)
 4005e2c:	100d883a 	mov	r6,r2
 4005e30:	4005ad80 	call	4005ad8 <i2c_write>
 4005e34:	1000041e 	bne	r2,zero,4005e48 <I2CL_Write+0xb4>
        bSuccess = FALSE;
 4005e38:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4005e3c:	010100f4 	movhi	r4,1027
 4005e40:	2135ec04 	addi	r4,r4,-10320
 4005e44:	40064d40 	call	40064d4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4005e48:	e0bff917 	ldw	r2,-28(fp)
 4005e4c:	10000a26 	beq	r2,zero,4005e78 <I2CL_Write+0xe4>
 4005e50:	e0bffa43 	ldbu	r2,-23(fp)
 4005e54:	e13ffb17 	ldw	r4,-20(fp)
 4005e58:	e17ffc17 	ldw	r5,-16(fp)
 4005e5c:	100d883a 	mov	r6,r2
 4005e60:	4005ad80 	call	4005ad8 <i2c_write>
 4005e64:	1000041e 	bne	r2,zero,4005e78 <I2CL_Write+0xe4>
        bSuccess = FALSE;
 4005e68:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4005e6c:	010100f4 	movhi	r4,1027
 4005e70:	2135f604 	addi	r4,r4,-10280
 4005e74:	40064d40 	call	40064d4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 4005e78:	e0bff917 	ldw	r2,-28(fp)
 4005e7c:	10000a26 	beq	r2,zero,4005ea8 <I2CL_Write+0x114>
 4005e80:	e0bfff03 	ldbu	r2,-4(fp)
 4005e84:	e13ffb17 	ldw	r4,-20(fp)
 4005e88:	e17ffc17 	ldw	r5,-16(fp)
 4005e8c:	100d883a 	mov	r6,r2
 4005e90:	4005ad80 	call	4005ad8 <i2c_write>
 4005e94:	1000041e 	bne	r2,zero,4005ea8 <I2CL_Write+0x114>
        bSuccess = FALSE;
 4005e98:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4005e9c:	010100f4 	movhi	r4,1027
 4005ea0:	21359f04 	addi	r4,r4,-10628
 4005ea4:	40064d40 	call	40064d4 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 4005ea8:	e13ffb17 	ldw	r4,-20(fp)
 4005eac:	e17ffc17 	ldw	r5,-16(fp)
 4005eb0:	4005a680 	call	4005a68 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 4005eb4:	0106d604 	movi	r4,7000
 4005eb8:	4011a700 	call	4011a70 <usleep>
    
    return bSuccess;
 4005ebc:	e0bff917 	ldw	r2,-28(fp)
    
}
 4005ec0:	e037883a 	mov	sp,fp
 4005ec4:	dfc00117 	ldw	ra,4(sp)
 4005ec8:	df000017 	ldw	fp,0(sp)
 4005ecc:	dec00204 	addi	sp,sp,8
 4005ed0:	f800283a 	ret

04005ed4 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
 4005ed4:	defff804 	addi	sp,sp,-32
 4005ed8:	dfc00715 	stw	ra,28(sp)
 4005edc:	df000615 	stw	fp,24(sp)
 4005ee0:	df000604 	addi	fp,sp,24
 4005ee4:	e13ffc15 	stw	r4,-16(fp)
 4005ee8:	e17ffd15 	stw	r5,-12(fp)
 4005eec:	3007883a 	mov	r3,r6
 4005ef0:	3805883a 	mov	r2,r7
 4005ef4:	e0fffe05 	stb	r3,-8(fp)
 4005ef8:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 4005efc:	00800044 	movi	r2,1
 4005f00:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4005f04:	e0bfff0b 	ldhu	r2,-4(fp)
 4005f08:	1004d23a 	srli	r2,r2,8
 4005f0c:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
 4005f10:	e0bfff0b 	ldhu	r2,-4(fp)
 4005f14:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
 4005f18:	e13ffc17 	ldw	r4,-16(fp)
 4005f1c:	e17ffd17 	ldw	r5,-12(fp)
 4005f20:	40059e40 	call	40059e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4005f24:	e0bffe03 	ldbu	r2,-8(fp)
 4005f28:	10803fcc 	andi	r2,r2,255
 4005f2c:	e13ffc17 	ldw	r4,-16(fp)
 4005f30:	e17ffd17 	ldw	r5,-12(fp)
 4005f34:	100d883a 	mov	r6,r2
 4005f38:	4005ad80 	call	4005ad8 <i2c_write>
 4005f3c:	1000041e 	bne	r2,zero,4005f50 <I2CL_Read+0x7c>
        bSuccess = FALSE;
 4005f40:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4005f44:	010100f4 	movhi	r4,1027
 4005f48:	21358e04 	addi	r4,r4,-10696
 4005f4c:	40064d40 	call	40064d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4005f50:	e0bffa17 	ldw	r2,-24(fp)
 4005f54:	10000a26 	beq	r2,zero,4005f80 <I2CL_Read+0xac>
 4005f58:	e0bffb03 	ldbu	r2,-20(fp)
 4005f5c:	e13ffc17 	ldw	r4,-16(fp)
 4005f60:	e17ffd17 	ldw	r5,-12(fp)
 4005f64:	100d883a 	mov	r6,r2
 4005f68:	4005ad80 	call	4005ad8 <i2c_write>
 4005f6c:	1000041e 	bne	r2,zero,4005f80 <I2CL_Read+0xac>
        bSuccess = FALSE;
 4005f70:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4005f74:	010100f4 	movhi	r4,1027
 4005f78:	2135ec04 	addi	r4,r4,-10320
 4005f7c:	40064d40 	call	40064d4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4005f80:	e0bffa17 	ldw	r2,-24(fp)
 4005f84:	10000a26 	beq	r2,zero,4005fb0 <I2CL_Read+0xdc>
 4005f88:	e0bffb43 	ldbu	r2,-19(fp)
 4005f8c:	e13ffc17 	ldw	r4,-16(fp)
 4005f90:	e17ffd17 	ldw	r5,-12(fp)
 4005f94:	100d883a 	mov	r6,r2
 4005f98:	4005ad80 	call	4005ad8 <i2c_write>
 4005f9c:	1000041e 	bne	r2,zero,4005fb0 <I2CL_Read+0xdc>
        bSuccess = FALSE;
 4005fa0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4005fa4:	010100f4 	movhi	r4,1027
 4005fa8:	2135f604 	addi	r4,r4,-10280
 4005fac:	40064d40 	call	40064d4 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 4005fb0:	e13ffc17 	ldw	r4,-16(fp)
 4005fb4:	e17ffd17 	ldw	r5,-12(fp)
 4005fb8:	40059e40 	call	40059e4 <i2c_start>
    DeviceAddr |= 1; // Read
 4005fbc:	e0bffe03 	ldbu	r2,-8(fp)
 4005fc0:	10800054 	ori	r2,r2,1
 4005fc4:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4005fc8:	e0bffa17 	ldw	r2,-24(fp)
 4005fcc:	10000b26 	beq	r2,zero,4005ffc <I2CL_Read+0x128>
 4005fd0:	e0bffe03 	ldbu	r2,-8(fp)
 4005fd4:	10803fcc 	andi	r2,r2,255
 4005fd8:	e13ffc17 	ldw	r4,-16(fp)
 4005fdc:	e17ffd17 	ldw	r5,-12(fp)
 4005fe0:	100d883a 	mov	r6,r2
 4005fe4:	4005ad80 	call	4005ad8 <i2c_write>
 4005fe8:	1000041e 	bne	r2,zero,4005ffc <I2CL_Read+0x128>
        bSuccess = FALSE;
 4005fec:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 4005ff0:	010100f4 	movhi	r4,1027
 4005ff4:	2135c204 	addi	r4,r4,-10488
 4005ff8:	40064d40 	call	40064d4 <myprintf>
    }
    
    if (bSuccess){
 4005ffc:	e0bffa17 	ldw	r2,-24(fp)
 4006000:	10000526 	beq	r2,zero,4006018 <I2CL_Read+0x144>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 4006004:	e13ffc17 	ldw	r4,-16(fp)
 4006008:	e17ffd17 	ldw	r5,-12(fp)
 400600c:	e1800217 	ldw	r6,8(fp)
 4006010:	000f883a 	mov	r7,zero
 4006014:	4005c440 	call	4005c44 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 4006018:	e13ffc17 	ldw	r4,-16(fp)
 400601c:	e17ffd17 	ldw	r5,-12(fp)
 4006020:	4005a680 	call	4005a68 <i2c_stop>
    
    return bSuccess;    
 4006024:	e0bffa17 	ldw	r2,-24(fp)
}
 4006028:	e037883a 	mov	sp,fp
 400602c:	dfc00117 	ldw	ra,4(sp)
 4006030:	df000017 	ldw	fp,0(sp)
 4006034:	dec00204 	addi	sp,sp,8
 4006038:	f800283a 	ret

0400603c <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 400603c:	defff604 	addi	sp,sp,-40
 4006040:	dfc00915 	stw	ra,36(sp)
 4006044:	df000815 	stw	fp,32(sp)
 4006048:	df000804 	addi	fp,sp,32
 400604c:	e13ffb15 	stw	r4,-20(fp)
 4006050:	e17ffc15 	stw	r5,-16(fp)
 4006054:	3007883a 	mov	r3,r6
 4006058:	3805883a 	mov	r2,r7
 400605c:	e1000317 	ldw	r4,12(fp)
 4006060:	e0fffd05 	stb	r3,-12(fp)
 4006064:	e0bffe0d 	sth	r2,-8(fp)
 4006068:	e13fff0d 	sth	r4,-4(fp)
    int i;
    bool bSuccess = TRUE;
 400606c:	00800044 	movi	r2,1
 4006070:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4006074:	e0bffe0b 	ldhu	r2,-8(fp)
 4006078:	1004d23a 	srli	r2,r2,8
 400607c:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;     
 4006080:	e0bffe0b 	ldhu	r2,-8(fp)
 4006084:	e0bffa45 	stb	r2,-23(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 4006088:	e13ffb17 	ldw	r4,-20(fp)
 400608c:	e17ffc17 	ldw	r5,-16(fp)
 4006090:	40059e40 	call	40059e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4006094:	e0bffd03 	ldbu	r2,-12(fp)
 4006098:	10803fcc 	andi	r2,r2,255
 400609c:	e13ffb17 	ldw	r4,-20(fp)
 40060a0:	e17ffc17 	ldw	r5,-16(fp)
 40060a4:	100d883a 	mov	r6,r2
 40060a8:	4005ad80 	call	4005ad8 <i2c_write>
 40060ac:	1000041e 	bne	r2,zero,40060c0 <I2CL_MultipleRead+0x84>
        bSuccess = FALSE;
 40060b0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 40060b4:	010100f4 	movhi	r4,1027
 40060b8:	21358e04 	addi	r4,r4,-10696
 40060bc:	40064d40 	call	40064d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 40060c0:	e0bff917 	ldw	r2,-28(fp)
 40060c4:	10000a26 	beq	r2,zero,40060f0 <I2CL_MultipleRead+0xb4>
 40060c8:	e0bffa03 	ldbu	r2,-24(fp)
 40060cc:	e13ffb17 	ldw	r4,-20(fp)
 40060d0:	e17ffc17 	ldw	r5,-16(fp)
 40060d4:	100d883a 	mov	r6,r2
 40060d8:	4005ad80 	call	4005ad8 <i2c_write>
 40060dc:	1000041e 	bne	r2,zero,40060f0 <I2CL_MultipleRead+0xb4>
        bSuccess = FALSE;
 40060e0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 40060e4:	010100f4 	movhi	r4,1027
 40060e8:	2135ec04 	addi	r4,r4,-10320
 40060ec:	40064d40 	call	40064d4 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 40060f0:	e0bff917 	ldw	r2,-28(fp)
 40060f4:	10000a26 	beq	r2,zero,4006120 <I2CL_MultipleRead+0xe4>
 40060f8:	e0bffa43 	ldbu	r2,-23(fp)
 40060fc:	e13ffb17 	ldw	r4,-20(fp)
 4006100:	e17ffc17 	ldw	r5,-16(fp)
 4006104:	100d883a 	mov	r6,r2
 4006108:	4005ad80 	call	4005ad8 <i2c_write>
 400610c:	1000041e 	bne	r2,zero,4006120 <I2CL_MultipleRead+0xe4>
        bSuccess = FALSE;
 4006110:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4006114:	010100f4 	movhi	r4,1027
 4006118:	2135f604 	addi	r4,r4,-10280
 400611c:	40064d40 	call	40064d4 <myprintf>
    }    
    if (bSuccess)        
 4006120:	e0bff917 	ldw	r2,-28(fp)
 4006124:	10000326 	beq	r2,zero,4006134 <I2CL_MultipleRead+0xf8>
        i2c_start(clk_base, data_base);  // restart
 4006128:	e13ffb17 	ldw	r4,-20(fp)
 400612c:	e17ffc17 	ldw	r5,-16(fp)
 4006130:	40059e40 	call	40059e4 <i2c_start>
    DeviceAddr |= 1; // Read
 4006134:	e0bffd03 	ldbu	r2,-12(fp)
 4006138:	10800054 	ori	r2,r2,1
 400613c:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4006140:	e0bff917 	ldw	r2,-28(fp)
 4006144:	10000b26 	beq	r2,zero,4006174 <I2CL_MultipleRead+0x138>
 4006148:	e0bffd03 	ldbu	r2,-12(fp)
 400614c:	10803fcc 	andi	r2,r2,255
 4006150:	e13ffb17 	ldw	r4,-20(fp)
 4006154:	e17ffc17 	ldw	r5,-16(fp)
 4006158:	100d883a 	mov	r6,r2
 400615c:	4005ad80 	call	4005ad8 <i2c_write>
 4006160:	1000041e 	bne	r2,zero,4006174 <I2CL_MultipleRead+0x138>
        bSuccess = FALSE;
 4006164:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
 4006168:	010100f4 	movhi	r4,1027
 400616c:	21360004 	addi	r4,r4,-10240
 4006170:	40064d40 	call	40064d4 <myprintf>
    }
    
    if (bSuccess){
 4006174:	e0bff917 	ldw	r2,-28(fp)
 4006178:	10001726 	beq	r2,zero,40061d8 <I2CL_MultipleRead+0x19c>
        for(i=0;i<len && bSuccess;i++){
 400617c:	e03ff815 	stw	zero,-32(fp)
 4006180:	00001006 	br	40061c4 <I2CL_MultipleRead+0x188>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 4006184:	e0bff817 	ldw	r2,-32(fp)
 4006188:	e0c00217 	ldw	r3,8(fp)
 400618c:	1887883a 	add	r3,r3,r2
 4006190:	e0bfff0b 	ldhu	r2,-4(fp)
 4006194:	113fffc4 	addi	r4,r2,-1
 4006198:	e0bff817 	ldw	r2,-32(fp)
 400619c:	2084c03a 	cmpne	r2,r4,r2
 40061a0:	10803fcc 	andi	r2,r2,255
 40061a4:	e13ffb17 	ldw	r4,-20(fp)
 40061a8:	e17ffc17 	ldw	r5,-16(fp)
 40061ac:	180d883a 	mov	r6,r3
 40061b0:	100f883a 	mov	r7,r2
 40061b4:	4005c440 	call	4005c44 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 40061b8:	e0bff817 	ldw	r2,-32(fp)
 40061bc:	10800044 	addi	r2,r2,1
 40061c0:	e0bff815 	stw	r2,-32(fp)
 40061c4:	e0bfff0b 	ldhu	r2,-4(fp)
 40061c8:	e0fff817 	ldw	r3,-32(fp)
 40061cc:	1880020e 	bge	r3,r2,40061d8 <I2CL_MultipleRead+0x19c>
 40061d0:	e0bff917 	ldw	r2,-28(fp)
 40061d4:	103feb1e 	bne	r2,zero,4006184 <I2CL_MultipleRead+0x148>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 40061d8:	e13ffb17 	ldw	r4,-20(fp)
 40061dc:	e17ffc17 	ldw	r5,-16(fp)
 40061e0:	4005a680 	call	4005a68 <i2c_stop>
    
    return bSuccess;    
 40061e4:	e0bff917 	ldw	r2,-28(fp)
    
} 
 40061e8:	e037883a 	mov	sp,fp
 40061ec:	dfc00117 	ldw	ra,4(sp)
 40061f0:	df000017 	ldw	fp,0(sp)
 40061f4:	dec00204 	addi	sp,sp,8
 40061f8:	f800283a 	ret

040061fc <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 40061fc:	defff604 	addi	sp,sp,-40
 4006200:	dfc00915 	stw	ra,36(sp)
 4006204:	df000815 	stw	fp,32(sp)
 4006208:	df000804 	addi	fp,sp,32
 400620c:	e13ffb15 	stw	r4,-20(fp)
 4006210:	e17ffc15 	stw	r5,-16(fp)
 4006214:	3007883a 	mov	r3,r6
 4006218:	3805883a 	mov	r2,r7
 400621c:	e1000317 	ldw	r4,12(fp)
 4006220:	e0fffd05 	stb	r3,-12(fp)
 4006224:	e0bffe0d 	sth	r2,-8(fp)
 4006228:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess = TRUE;
 400622c:	00800044 	movi	r2,1
 4006230:	e0bff815 	stw	r2,-32(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4006234:	e0bffe0b 	ldhu	r2,-8(fp)
 4006238:	1004d23a 	srli	r2,r2,8
 400623c:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 4006240:	e0bffe0b 	ldhu	r2,-8(fp)
 4006244:	e0bffa45 	stb	r2,-23(fp)
    

    i2c_start(clk_base, data_base);
 4006248:	e13ffb17 	ldw	r4,-20(fp)
 400624c:	e17ffc17 	ldw	r5,-16(fp)
 4006250:	40059e40 	call	40059e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4006254:	e0bffd03 	ldbu	r2,-12(fp)
 4006258:	10803fcc 	andi	r2,r2,255
 400625c:	e13ffb17 	ldw	r4,-20(fp)
 4006260:	e17ffc17 	ldw	r5,-16(fp)
 4006264:	100d883a 	mov	r6,r2
 4006268:	4005ad80 	call	4005ad8 <i2c_write>
 400626c:	1000041e 	bne	r2,zero,4006280 <I2CL_MultipleWrite+0x84>
        bSuccess = FALSE;
 4006270:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4006274:	010100f4 	movhi	r4,1027
 4006278:	21358e04 	addi	r4,r4,-10696
 400627c:	40064d40 	call	40064d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4006280:	e0bff817 	ldw	r2,-32(fp)
 4006284:	10000a26 	beq	r2,zero,40062b0 <I2CL_MultipleWrite+0xb4>
 4006288:	e0bffa03 	ldbu	r2,-24(fp)
 400628c:	e13ffb17 	ldw	r4,-20(fp)
 4006290:	e17ffc17 	ldw	r5,-16(fp)
 4006294:	100d883a 	mov	r6,r2
 4006298:	4005ad80 	call	4005ad8 <i2c_write>
 400629c:	1000041e 	bne	r2,zero,40062b0 <I2CL_MultipleWrite+0xb4>
        bSuccess = FALSE;
 40062a0:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 40062a4:	010100f4 	movhi	r4,1027
 40062a8:	2135ec04 	addi	r4,r4,-10320
 40062ac:	40064d40 	call	40064d4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 40062b0:	e0bff817 	ldw	r2,-32(fp)
 40062b4:	10000a26 	beq	r2,zero,40062e0 <I2CL_MultipleWrite+0xe4>
 40062b8:	e0bffa43 	ldbu	r2,-23(fp)
 40062bc:	e13ffb17 	ldw	r4,-20(fp)
 40062c0:	e17ffc17 	ldw	r5,-16(fp)
 40062c4:	100d883a 	mov	r6,r2
 40062c8:	4005ad80 	call	4005ad8 <i2c_write>
 40062cc:	1000041e 	bne	r2,zero,40062e0 <I2CL_MultipleWrite+0xe4>
        bSuccess = FALSE;
 40062d0:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 40062d4:	010100f4 	movhi	r4,1027
 40062d8:	2135f604 	addi	r4,r4,-10280
 40062dc:	40064d40 	call	40064d4 <myprintf>
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
 40062e0:	e0bff817 	ldw	r2,-32(fp)
 40062e4:	10001926 	beq	r2,zero,400634c <I2CL_MultipleWrite+0x150>
        for(i=0;i<len && bSuccess;i++){
 40062e8:	e03ff915 	stw	zero,-28(fp)
 40062ec:	00000d06 	br	4006324 <I2CL_MultipleWrite+0x128>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
 40062f0:	e0bff917 	ldw	r2,-28(fp)
 40062f4:	e0c00217 	ldw	r3,8(fp)
 40062f8:	1885883a 	add	r2,r3,r2
 40062fc:	10800003 	ldbu	r2,0(r2)
 4006300:	10803fcc 	andi	r2,r2,255
 4006304:	e13ffb17 	ldw	r4,-20(fp)
 4006308:	e17ffc17 	ldw	r5,-16(fp)
 400630c:	100d883a 	mov	r6,r2
 4006310:	4005ad80 	call	4005ad8 <i2c_write>
 4006314:	e0bff815 	stw	r2,-32(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
 4006318:	e0bff917 	ldw	r2,-28(fp)
 400631c:	10800044 	addi	r2,r2,1
 4006320:	e0bff915 	stw	r2,-28(fp)
 4006324:	e0bfff0b 	ldhu	r2,-4(fp)
 4006328:	e0fff917 	ldw	r3,-28(fp)
 400632c:	1880020e 	bge	r3,r2,4006338 <I2CL_MultipleWrite+0x13c>
 4006330:	e0bff817 	ldw	r2,-32(fp)
 4006334:	103fee1e 	bne	r2,zero,40062f0 <I2CL_MultipleWrite+0xf4>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
 4006338:	e0bff817 	ldw	r2,-32(fp)
 400633c:	1000031e 	bne	r2,zero,400634c <I2CL_MultipleWrite+0x150>
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4006340:	010100f4 	movhi	r4,1027
 4006344:	21359f04 	addi	r4,r4,-10628
 4006348:	40064d40 	call	40064d4 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 400634c:	e13ffb17 	ldw	r4,-20(fp)
 4006350:	e17ffc17 	ldw	r5,-16(fp)
 4006354:	4005a680 	call	4005a68 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 4006358:	0106d604 	movi	r4,7000
 400635c:	4011a700 	call	4011a70 <usleep>
    
    return bSuccess;
 4006360:	e0bff817 	ldw	r2,-32(fp)
    
}
 4006364:	e037883a 	mov	sp,fp
 4006368:	dfc00117 	ldw	ra,4(sp)
 400636c:	df000017 	ldw	fp,0(sp)
 4006370:	dec00204 	addi	sp,sp,8
 4006374:	f800283a 	ret

04006378 <I2CL_Read16>:
 


bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
 4006378:	defff604 	addi	sp,sp,-40
 400637c:	dfc00915 	stw	ra,36(sp)
 4006380:	df000815 	stw	fp,32(sp)
 4006384:	df000804 	addi	fp,sp,32
 4006388:	e13ffc15 	stw	r4,-16(fp)
 400638c:	e17ffd15 	stw	r5,-12(fp)
 4006390:	3007883a 	mov	r3,r6
 4006394:	3805883a 	mov	r2,r7
 4006398:	e0fffe05 	stb	r3,-8(fp)
 400639c:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 40063a0:	e0fffe07 	ldb	r3,-8(fp)
 40063a4:	e0bfff0b 	ldhu	r2,-4(fp)
 40063a8:	e13ffb04 	addi	r4,fp,-20
 40063ac:	d9000015 	stw	r4,0(sp)
 40063b0:	01000084 	movi	r4,2
 40063b4:	d9000115 	stw	r4,4(sp)
 40063b8:	e13ffc17 	ldw	r4,-16(fp)
 40063bc:	e17ffd17 	ldw	r5,-12(fp)
 40063c0:	180d883a 	mov	r6,r3
 40063c4:	100f883a 	mov	r7,r2
 40063c8:	400603c0 	call	400603c <I2CL_MultipleRead>
 40063cc:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
 40063d0:	e0bffa17 	ldw	r2,-24(fp)
 40063d4:	10000a26 	beq	r2,zero,4006400 <I2CL_Read16+0x88>
        *pControlData = (szData[0] << 8 ) | szData[1];
 40063d8:	e0bffb03 	ldbu	r2,-20(fp)
 40063dc:	10803fcc 	andi	r2,r2,255
 40063e0:	1004923a 	slli	r2,r2,8
 40063e4:	1007883a 	mov	r3,r2
 40063e8:	e0bffb43 	ldbu	r2,-19(fp)
 40063ec:	10803fcc 	andi	r2,r2,255
 40063f0:	1884b03a 	or	r2,r3,r2
 40063f4:	1007883a 	mov	r3,r2
 40063f8:	e0800217 	ldw	r2,8(fp)
 40063fc:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
 4006400:	e0bffa17 	ldw	r2,-24(fp)
}
 4006404:	e037883a 	mov	sp,fp
 4006408:	dfc00117 	ldw	ra,4(sp)
 400640c:	df000017 	ldw	fp,0(sp)
 4006410:	dec00204 	addi	sp,sp,8
 4006414:	f800283a 	ret

04006418 <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
 4006418:	defff504 	addi	sp,sp,-44
 400641c:	dfc00a15 	stw	ra,40(sp)
 4006420:	df000915 	stw	fp,36(sp)
 4006424:	df000904 	addi	fp,sp,36
 4006428:	e13ffb15 	stw	r4,-20(fp)
 400642c:	e17ffc15 	stw	r5,-16(fp)
 4006430:	3007883a 	mov	r3,r6
 4006434:	3805883a 	mov	r2,r7
 4006438:	e1000217 	ldw	r4,8(fp)
 400643c:	e0fffd05 	stb	r3,-12(fp)
 4006440:	e0bffe0d 	sth	r2,-8(fp)
 4006444:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
 4006448:	e0bfff0b 	ldhu	r2,-4(fp)
 400644c:	1004d23a 	srli	r2,r2,8
 4006450:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
 4006454:	e0bfff0b 	ldhu	r2,-4(fp)
 4006458:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 400645c:	e0fffd07 	ldb	r3,-12(fp)
 4006460:	e0bffe0b 	ldhu	r2,-8(fp)
 4006464:	e13ffa04 	addi	r4,fp,-24
 4006468:	d9000015 	stw	r4,0(sp)
 400646c:	01000084 	movi	r4,2
 4006470:	d9000115 	stw	r4,4(sp)
 4006474:	e13ffb17 	ldw	r4,-20(fp)
 4006478:	e17ffc17 	ldw	r5,-16(fp)
 400647c:	180d883a 	mov	r6,r3
 4006480:	100f883a 	mov	r7,r2
 4006484:	40061fc0 	call	40061fc <I2CL_MultipleWrite>
 4006488:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
 400648c:	e0bff917 	ldw	r2,-28(fp)
}
 4006490:	e037883a 	mov	sp,fp
 4006494:	dfc00117 	ldw	ra,4(sp)
 4006498:	df000017 	ldw	fp,0(sp)
 400649c:	dec00204 	addi	sp,sp,8
 40064a0:	f800283a 	ret

040064a4 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
 40064a4:	defffd04 	addi	sp,sp,-12
 40064a8:	dfc00215 	stw	ra,8(sp)
 40064ac:	df000115 	stw	fp,4(sp)
 40064b0:	df000104 	addi	fp,sp,4
 40064b4:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
 40064b8:	e13fff17 	ldw	r4,-4(fp)
 40064bc:	40092840 	call	4009284 <printf>
}
 40064c0:	e037883a 	mov	sp,fp
 40064c4:	dfc00117 	ldw	ra,4(sp)
 40064c8:	df000017 	ldw	fp,0(sp)
 40064cc:	dec00204 	addi	sp,sp,8
 40064d0:	f800283a 	ret

040064d4 <myprintf>:





int myprintf(char *format, ...){
 40064d4:	deff7804 	addi	sp,sp,-544
 40064d8:	dfc08415 	stw	ra,528(sp)
 40064dc:	df008315 	stw	fp,524(sp)
 40064e0:	df008304 	addi	fp,sp,524
 40064e4:	e1400215 	stw	r5,8(fp)
 40064e8:	e1800315 	stw	r6,12(fp)
 40064ec:	e1c00415 	stw	r7,16(fp)
 40064f0:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
 40064f4:	e0800204 	addi	r2,fp,8
 40064f8:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
 40064fc:	e0bffe17 	ldw	r2,-8(fp)
 4006500:	e0ff7e04 	addi	r3,fp,-520
 4006504:	1809883a 	mov	r4,r3
 4006508:	01408004 	movi	r5,512
 400650c:	e1bfff17 	ldw	r6,-4(fp)
 4006510:	100f883a 	mov	r7,r2
 4006514:	400b49c0 	call	400b49c <vsnprintf>
 4006518:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
 400651c:	e0bf7e04 	addi	r2,fp,-520
 4006520:	1009883a 	mov	r4,r2
 4006524:	40064a40 	call	40064a4 <debug_output>

    return rc;    
 4006528:	e0bf7d17 	ldw	r2,-524(fp)
}
 400652c:	e037883a 	mov	sp,fp
 4006530:	dfc00117 	ldw	ra,4(sp)
 4006534:	df000017 	ldw	fp,0(sp)
 4006538:	dec00504 	addi	sp,sp,20
 400653c:	f800283a 	ret

04006540 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
 4006540:	defff704 	addi	sp,sp,-36
 4006544:	dfc00815 	stw	ra,32(sp)
 4006548:	df000715 	stw	fp,28(sp)
 400654c:	df000704 	addi	fp,sp,28
 4006550:	e13ffe15 	stw	r4,-8(fp)
 4006554:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 4006558:	e03ff915 	stw	zero,-28(fp)
 400655c:	00001106 	br	40065a4 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
 4006560:	e0bff917 	ldw	r2,-28(fp)
 4006564:	e0fffe17 	ldw	r3,-8(fp)
 4006568:	1885883a 	add	r2,r3,r2
 400656c:	10800003 	ldbu	r2,0(r2)
 4006570:	10803fcc 	andi	r2,r2,255
 4006574:	e0fffa04 	addi	r3,fp,-24
 4006578:	1809883a 	mov	r4,r3
 400657c:	014100f4 	movhi	r5,1027
 4006580:	29760b04 	addi	r5,r5,-10196
 4006584:	100d883a 	mov	r6,r2
 4006588:	40094140 	call	4009414 <sprintf>
        DEBUG((szText));
 400658c:	e0bffa04 	addi	r2,fp,-24
 4006590:	1009883a 	mov	r4,r2
 4006594:	40064d40 	call	40064d4 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 4006598:	e0bff917 	ldw	r2,-28(fp)
 400659c:	10800044 	addi	r2,r2,1
 40065a0:	e0bff915 	stw	r2,-28(fp)
 40065a4:	e0fff917 	ldw	r3,-28(fp)
 40065a8:	e0bfff17 	ldw	r2,-4(fp)
 40065ac:	18bfec16 	blt	r3,r2,4006560 <myprintf_hexarray+0x20>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
 40065b0:	e0bfff17 	ldw	r2,-4(fp)
}
 40065b4:	e037883a 	mov	sp,fp
 40065b8:	dfc00117 	ldw	ra,4(sp)
 40065bc:	df000017 	ldw	fp,0(sp)
 40065c0:	dec00204 	addi	sp,sp,8
 40065c4:	f800283a 	ret

040065c8 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
 40065c8:	defff704 	addi	sp,sp,-36
 40065cc:	dfc00815 	stw	ra,32(sp)
 40065d0:	df000715 	stw	fp,28(sp)
 40065d4:	df000704 	addi	fp,sp,28
 40065d8:	e13ffe15 	stw	r4,-8(fp)
 40065dc:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 40065e0:	e03ff915 	stw	zero,-28(fp)
 40065e4:	00001206 	br	4006630 <myprintf_dwordarray+0x68>
        sprintf(szText, "[%08X]", *(pArray+i));
 40065e8:	e0bff917 	ldw	r2,-28(fp)
 40065ec:	1085883a 	add	r2,r2,r2
 40065f0:	1085883a 	add	r2,r2,r2
 40065f4:	e0fffe17 	ldw	r3,-8(fp)
 40065f8:	1885883a 	add	r2,r3,r2
 40065fc:	10800017 	ldw	r2,0(r2)
 4006600:	e0fffa04 	addi	r3,fp,-24
 4006604:	1809883a 	mov	r4,r3
 4006608:	014100f4 	movhi	r5,1027
 400660c:	29760d04 	addi	r5,r5,-10188
 4006610:	100d883a 	mov	r6,r2
 4006614:	40094140 	call	4009414 <sprintf>
        DEBUG((szText));
 4006618:	e0bffa04 	addi	r2,fp,-24
 400661c:	1009883a 	mov	r4,r2
 4006620:	40064d40 	call	40064d4 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 4006624:	e0bff917 	ldw	r2,-28(fp)
 4006628:	10800044 	addi	r2,r2,1
 400662c:	e0bff915 	stw	r2,-28(fp)
 4006630:	e0fff917 	ldw	r3,-28(fp)
 4006634:	e0bfff17 	ldw	r2,-4(fp)
 4006638:	18bfeb16 	blt	r3,r2,40065e8 <myprintf_dwordarray+0x20>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
 400663c:	e0bfff17 	ldw	r2,-4(fp)
}
 4006640:	e037883a 	mov	sp,fp
 4006644:	dfc00117 	ldw	ra,4(sp)
 4006648:	df000017 	ldw	fp,0(sp)
 400664c:	dec00204 	addi	sp,sp,8
 4006650:	f800283a 	ret

04006654 <QUEUE_New>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
 4006654:	defffb04 	addi	sp,sp,-20
 4006658:	dfc00415 	stw	ra,16(sp)
 400665c:	df000315 	stw	fp,12(sp)
 4006660:	df000304 	addi	fp,sp,12
 4006664:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
 4006668:	e0bfff17 	ldw	r2,-4(fp)
 400666c:	10800144 	addi	r2,r2,5
 4006670:	1085883a 	add	r2,r2,r2
 4006674:	1085883a 	add	r2,r2,r2
 4006678:	e0bffd15 	stw	r2,-12(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
 400667c:	e0bffd17 	ldw	r2,-12(fp)
 4006680:	1009883a 	mov	r4,r2
 4006684:	40088d80 	call	40088d8 <malloc>
 4006688:	e0bffe15 	stw	r2,-8(fp)
    memset((void *)pQueue, 0, nSize);
 400668c:	e0bffd17 	ldw	r2,-12(fp)
 4006690:	e13ffe17 	ldw	r4,-8(fp)
 4006694:	000b883a 	mov	r5,zero
 4006698:	100d883a 	mov	r6,r2
 400669c:	400917c0 	call	400917c <memset>
    pQueue->num = nQueueNum;
 40066a0:	e0ffff17 	ldw	r3,-4(fp)
 40066a4:	e0bffe17 	ldw	r2,-8(fp)
 40066a8:	10c00015 	stw	r3,0(r2)
    return pQueue;
 40066ac:	e0bffe17 	ldw	r2,-8(fp)
}
 40066b0:	e037883a 	mov	sp,fp
 40066b4:	dfc00117 	ldw	ra,4(sp)
 40066b8:	df000017 	ldw	fp,0(sp)
 40066bc:	dec00204 	addi	sp,sp,8
 40066c0:	f800283a 	ret

040066c4 <QUEUE_Delete>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
 40066c4:	defffd04 	addi	sp,sp,-12
 40066c8:	dfc00215 	stw	ra,8(sp)
 40066cc:	df000115 	stw	fp,4(sp)
 40066d0:	df000104 	addi	fp,sp,4
 40066d4:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
 40066d8:	e13fff17 	ldw	r4,-4(fp)
 40066dc:	40088ec0 	call	40088ec <free>
}
 40066e0:	e037883a 	mov	sp,fp
 40066e4:	dfc00117 	ldw	ra,4(sp)
 40066e8:	df000017 	ldw	fp,0(sp)
 40066ec:	dec00204 	addi	sp,sp,8
 40066f0:	f800283a 	ret

040066f4 <QUEUE_IsEmpty>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
 40066f4:	defffe04 	addi	sp,sp,-8
 40066f8:	df000115 	stw	fp,4(sp)
 40066fc:	df000104 	addi	fp,sp,4
 4006700:	e13fff15 	stw	r4,-4(fp)
    if (pQueue->front == pQueue->rear)
 4006704:	e0bfff17 	ldw	r2,-4(fp)
 4006708:	10c00117 	ldw	r3,4(r2)
 400670c:	e0bfff17 	ldw	r2,-4(fp)
 4006710:	10800217 	ldw	r2,8(r2)
 4006714:	1880021e 	bne	r3,r2,4006720 <QUEUE_IsEmpty+0x2c>
        return TRUE;
 4006718:	00800044 	movi	r2,1
 400671c:	00000106 	br	4006724 <QUEUE_IsEmpty+0x30>
    return FALSE;
 4006720:	0005883a 	mov	r2,zero
}
 4006724:	e037883a 	mov	sp,fp
 4006728:	df000017 	ldw	fp,0(sp)
 400672c:	dec00104 	addi	sp,sp,4
 4006730:	f800283a 	ret

04006734 <QUEUE_IsFull>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
 4006734:	defffd04 	addi	sp,sp,-12
 4006738:	dfc00215 	stw	ra,8(sp)
 400673c:	df000115 	stw	fp,4(sp)
 4006740:	df000104 	addi	fp,sp,4
 4006744:	e13fff15 	stw	r4,-4(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
 4006748:	e0bfff17 	ldw	r2,-4(fp)
 400674c:	10800117 	ldw	r2,4(r2)
 4006750:	10c00044 	addi	r3,r2,1
 4006754:	e0bfff17 	ldw	r2,-4(fp)
 4006758:	10800017 	ldw	r2,0(r2)
 400675c:	1809883a 	mov	r4,r3
 4006760:	100b883a 	mov	r5,r2
 4006764:	40083340 	call	4008334 <__umodsi3>
 4006768:	1007883a 	mov	r3,r2
 400676c:	e0bfff17 	ldw	r2,-4(fp)
 4006770:	10800217 	ldw	r2,8(r2)
 4006774:	1880021e 	bne	r3,r2,4006780 <QUEUE_IsFull+0x4c>
        return TRUE;
 4006778:	00800044 	movi	r2,1
 400677c:	00000106 	br	4006784 <QUEUE_IsFull+0x50>
    return FALSE;
 4006780:	0005883a 	mov	r2,zero
}
 4006784:	e037883a 	mov	sp,fp
 4006788:	dfc00117 	ldw	ra,4(sp)
 400678c:	df000017 	ldw	fp,0(sp)
 4006790:	dec00204 	addi	sp,sp,8
 4006794:	f800283a 	ret

04006798 <QUEUE_Push>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
 4006798:	defffc04 	addi	sp,sp,-16
 400679c:	dfc00315 	stw	ra,12(sp)
 40067a0:	df000215 	stw	fp,8(sp)
 40067a4:	df000204 	addi	fp,sp,8
 40067a8:	e13ffe15 	stw	r4,-8(fp)
 40067ac:	e17fff15 	stw	r5,-4(fp)
    if (QUEUE_IsFull(pQueue))
 40067b0:	e13ffe17 	ldw	r4,-8(fp)
 40067b4:	40067340 	call	4006734 <QUEUE_IsFull>
 40067b8:	10000226 	beq	r2,zero,40067c4 <QUEUE_Push+0x2c>
        return FALSE;
 40067bc:	0005883a 	mov	r2,zero
 40067c0:	00001506 	br	4006818 <QUEUE_Push+0x80>
    pQueue->data[pQueue->front] = data32;
 40067c4:	e0bffe17 	ldw	r2,-8(fp)
 40067c8:	10800117 	ldw	r2,4(r2)
 40067cc:	e0fffe17 	ldw	r3,-8(fp)
 40067d0:	108000c4 	addi	r2,r2,3
 40067d4:	1085883a 	add	r2,r2,r2
 40067d8:	1085883a 	add	r2,r2,r2
 40067dc:	1885883a 	add	r2,r3,r2
 40067e0:	e0ffff17 	ldw	r3,-4(fp)
 40067e4:	10c00015 	stw	r3,0(r2)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
 40067e8:	e0bffe17 	ldw	r2,-8(fp)
 40067ec:	10800117 	ldw	r2,4(r2)
 40067f0:	10c00044 	addi	r3,r2,1
 40067f4:	e0bffe17 	ldw	r2,-8(fp)
 40067f8:	10800017 	ldw	r2,0(r2)
 40067fc:	1809883a 	mov	r4,r3
 4006800:	100b883a 	mov	r5,r2
 4006804:	40083340 	call	4008334 <__umodsi3>
 4006808:	1007883a 	mov	r3,r2
 400680c:	e0bffe17 	ldw	r2,-8(fp)
 4006810:	10c00115 	stw	r3,4(r2)
    return TRUE;
 4006814:	00800044 	movi	r2,1
}
 4006818:	e037883a 	mov	sp,fp
 400681c:	dfc00117 	ldw	ra,4(sp)
 4006820:	df000017 	ldw	fp,0(sp)
 4006824:	dec00204 	addi	sp,sp,8
 4006828:	f800283a 	ret

0400682c <QUEUE_Pop>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
 400682c:	defffc04 	addi	sp,sp,-16
 4006830:	dfc00315 	stw	ra,12(sp)
 4006834:	df000215 	stw	fp,8(sp)
 4006838:	df000204 	addi	fp,sp,8
 400683c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
 4006840:	e13fff17 	ldw	r4,-4(fp)
 4006844:	40066f40 	call	40066f4 <QUEUE_IsEmpty>
 4006848:	10000226 	beq	r2,zero,4006854 <QUEUE_Pop+0x28>
        return 0;
 400684c:	0005883a 	mov	r2,zero
 4006850:	00001506 	br	40068a8 <QUEUE_Pop+0x7c>
    data32 = pQueue->data[pQueue->rear];
 4006854:	e0bfff17 	ldw	r2,-4(fp)
 4006858:	10800217 	ldw	r2,8(r2)
 400685c:	e0ffff17 	ldw	r3,-4(fp)
 4006860:	108000c4 	addi	r2,r2,3
 4006864:	1085883a 	add	r2,r2,r2
 4006868:	1085883a 	add	r2,r2,r2
 400686c:	1885883a 	add	r2,r3,r2
 4006870:	10800017 	ldw	r2,0(r2)
 4006874:	e0bffe15 	stw	r2,-8(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
 4006878:	e0bfff17 	ldw	r2,-4(fp)
 400687c:	10800217 	ldw	r2,8(r2)
 4006880:	10c00044 	addi	r3,r2,1
 4006884:	e0bfff17 	ldw	r2,-4(fp)
 4006888:	10800017 	ldw	r2,0(r2)
 400688c:	1809883a 	mov	r4,r3
 4006890:	100b883a 	mov	r5,r2
 4006894:	40083340 	call	4008334 <__umodsi3>
 4006898:	1007883a 	mov	r3,r2
 400689c:	e0bfff17 	ldw	r2,-4(fp)
 40068a0:	10c00215 	stw	r3,8(r2)
    return data32;
 40068a4:	e0bffe17 	ldw	r2,-8(fp)
}
 40068a8:	e037883a 	mov	sp,fp
 40068ac:	dfc00117 	ldw	ra,4(sp)
 40068b0:	df000017 	ldw	fp,0(sp)
 40068b4:	dec00204 	addi	sp,sp,8
 40068b8:	f800283a 	ret

040068bc <QUEUE_Empty>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
 40068bc:	defffe04 	addi	sp,sp,-8
 40068c0:	df000115 	stw	fp,4(sp)
 40068c4:	df000104 	addi	fp,sp,4
 40068c8:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
 40068cc:	e0bfff17 	ldw	r2,-4(fp)
 40068d0:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
 40068d4:	e0bfff17 	ldw	r2,-4(fp)
 40068d8:	10000215 	stw	zero,8(r2)
}
 40068dc:	e037883a 	mov	sp,fp
 40068e0:	df000017 	ldw	fp,0(sp)
 40068e4:	dec00104 	addi	sp,sp,4
 40068e8:	f800283a 	ret

040068ec <Touch_Init>:
bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p);
void touch_empty_fifo(TERASIC_TOUCH_PANEL *p);
void touch_clear_input(TERASIC_TOUCH_PANEL *p);

// init touch panel
TOUCH_HANDLE Touch_Init(const alt_u32 spi_base, const alt_u32 penirq_base, const alt_u32 penirq_irq){
 40068ec:	defff804 	addi	sp,sp,-32
 40068f0:	dfc00715 	stw	ra,28(sp)
 40068f4:	df000615 	stw	fp,24(sp)
 40068f8:	df000604 	addi	fp,sp,24
 40068fc:	e13ffd15 	stw	r4,-12(fp)
 4006900:	e17ffe15 	stw	r5,-8(fp)
 4006904:	e1bfff15 	stw	r6,-4(fp)
    bool bSuccess = TRUE;
 4006908:	00800044 	movi	r2,1
 400690c:	e0bffb15 	stw	r2,-20(fp)
    
    TERASIC_TOUCH_PANEL *p;
    
    p = malloc(sizeof(TERASIC_TOUCH_PANEL));
 4006910:	01001804 	movi	r4,96
 4006914:	40088d80 	call	40088d8 <malloc>
 4006918:	e0bffc15 	stw	r2,-16(fp)
    if (!p)
 400691c:	e0bffc17 	ldw	r2,-16(fp)
 4006920:	1000021e 	bne	r2,zero,400692c <Touch_Init+0x40>
        return p;
 4006924:	e0bffc17 	ldw	r2,-16(fp)
 4006928:	00004706 	br	4006a48 <Touch_Init+0x15c>

    
    //
    memset(p, 0, sizeof(TERASIC_TOUCH_PANEL));
 400692c:	e13ffc17 	ldw	r4,-16(fp)
 4006930:	000b883a 	mov	r5,zero
 4006934:	01801804 	movi	r6,96
 4006938:	400917c0 	call	400917c <memset>
    p->spi_base = spi_base;
 400693c:	e0bffc17 	ldw	r2,-16(fp)
 4006940:	e0fffd17 	ldw	r3,-12(fp)
 4006944:	10c00015 	stw	r3,0(r2)
    p->penirq_base = penirq_base;
 4006948:	e0bffc17 	ldw	r2,-16(fp)
 400694c:	e0fffe17 	ldw	r3,-8(fp)
 4006950:	10c00115 	stw	r3,4(r2)
    p->irq_mask = 0x01;  // 1-pin
 4006954:	e0bffc17 	ldw	r2,-16(fp)
 4006958:	00c00044 	movi	r3,1
 400695c:	10c00315 	stw	r3,12(r2)
    p->penirq_irq = penirq_irq;
 4006960:	e0bffc17 	ldw	r2,-16(fp)
 4006964:	e0ffff17 	ldw	r3,-4(fp)
 4006968:	10c00215 	stw	r3,8(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400696c:	008100f4 	movhi	r2,1027
 4006970:	1091ed04 	addi	r2,r2,18356
 4006974:	10800017 	ldw	r2,0(r2)
    p->alarm_dur = alt_ticks_per_second()/SAMPLE_RATE;
 4006978:	1009883a 	mov	r4,r2
 400697c:	01400f04 	movi	r5,60
 4006980:	400832c0 	call	400832c <__udivsi3>
 4006984:	1007883a 	mov	r3,r2
 4006988:	e0bffc17 	ldw	r2,-16(fp)
 400698c:	10c01615 	stw	r3,88(r2)
    
    // enalbe penirq_n interrupt (P1=1, P1=0)
    touch_enable_penirq(p);    
 4006990:	e13ffc17 	ldw	r4,-16(fp)
 4006994:	4006d340 	call	4006d34 <touch_enable_penirq>
    

    // enable interrupt, 1-pin
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, p->irq_mask); 
 4006998:	e0bffc17 	ldw	r2,-16(fp)
 400699c:	10800117 	ldw	r2,4(r2)
 40069a0:	10800204 	addi	r2,r2,8
 40069a4:	e0fffc17 	ldw	r3,-16(fp)
 40069a8:	18c00317 	ldw	r3,12(r3)
 40069ac:	10c00035 	stwio	r3,0(r2)
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);
 40069b0:	e0bffc17 	ldw	r2,-16(fp)
 40069b4:	10800117 	ldw	r2,4(r2)
 40069b8:	10800304 	addi	r2,r2,12
 40069bc:	0007883a 	mov	r3,zero
 40069c0:	10c00035 	stwio	r3,0(r2)
    // register ISR
    // register callback function

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,
		                   p->penirq_irq,
 40069c4:	e0bffc17 	ldw	r2,-16(fp)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);
    // register ISR
    // register callback function

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,
 40069c8:	10800217 	ldw	r2,8(r2)
 40069cc:	d8000015 	stw	zero,0(sp)
 40069d0:	0009883a 	mov	r4,zero
 40069d4:	100b883a 	mov	r5,r2
 40069d8:	01810034 	movhi	r6,1024
 40069dc:	319b1304 	addi	r6,r6,27724
 40069e0:	e1fffc17 	ldw	r7,-16(fp)
 40069e4:	40110080 	call	4011008 <alt_ic_isr_register>
 40069e8:	10000126 	beq	r2,zero,40069f0 <Touch_Init+0x104>
		                   ) != 0)){
 #else
  if ((alt_irq_register(p->penirq_irq, (void *)p, touch_isr) != 0)){
 #endif
        DEBUG_OUT(("[TOUCH]register IRQ fail\n"));
        bSuccess = FALSE;
 40069ec:	e03ffb15 	stw	zero,-20(fp)
    }else{        
        DEBUG_OUT(("[TOUCH]register IRQ success\n"));
    }

    if (bSuccess){    
 40069f0:	e0bffb17 	ldw	r2,-20(fp)
 40069f4:	10000c26 	beq	r2,zero,4006a28 <Touch_Init+0x13c>
        if (alt_alarm_start(&p->alarm, p->alarm_dur, touch_alarm_callback, p) == 0){
 40069f8:	e0bffc17 	ldw	r2,-16(fp)
 40069fc:	10c01004 	addi	r3,r2,64
 4006a00:	e0bffc17 	ldw	r2,-16(fp)
 4006a04:	10801617 	ldw	r2,88(r2)
 4006a08:	1809883a 	mov	r4,r3
 4006a0c:	100b883a 	mov	r5,r2
 4006a10:	01810034 	movhi	r6,1024
 4006a14:	319c7504 	addi	r6,r6,29140
 4006a18:	e1fffc17 	ldw	r7,-16(fp)
 4006a1c:	4010c880 	call	4010c88 <alt_alarm_start>
 4006a20:	10000126 	beq	r2,zero,4006a28 <Touch_Init+0x13c>
            DEBUG_OUT(("[TOUCH]alarm start success\n"));
        }else{
            DEBUG_OUT(("[TOUCH]alarm start fail\n"));
            bSuccess = FALSE;
 4006a24:	e03ffb15 	stw	zero,-20(fp)
        }
    }
    
    if (!bSuccess && p){
 4006a28:	e0bffb17 	ldw	r2,-20(fp)
 4006a2c:	1000051e 	bne	r2,zero,4006a44 <Touch_Init+0x158>
 4006a30:	e0bffc17 	ldw	r2,-16(fp)
 4006a34:	10000326 	beq	r2,zero,4006a44 <Touch_Init+0x158>
        free(p);
 4006a38:	e13ffc17 	ldw	r4,-16(fp)
 4006a3c:	40088ec0 	call	40088ec <free>
        p = NULL;
 4006a40:	e03ffc15 	stw	zero,-16(fp)
    }        
                
    return p;        
 4006a44:	e0bffc17 	ldw	r2,-16(fp)
    

}
 4006a48:	e037883a 	mov	sp,fp
 4006a4c:	dfc00117 	ldw	ra,4(sp)
 4006a50:	df000017 	ldw	fp,0(sp)
 4006a54:	dec00204 	addi	sp,sp,8
 4006a58:	f800283a 	ret

04006a5c <Touch_UnInit>:

// uninit touch panel
void Touch_UnInit(TOUCH_HANDLE pHandle){
 4006a5c:	defffc04 	addi	sp,sp,-16
 4006a60:	dfc00315 	stw	ra,12(sp)
 4006a64:	df000215 	stw	fp,8(sp)
 4006a68:	df000204 	addi	fp,sp,8
 4006a6c:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 4006a70:	e0bfff17 	ldw	r2,-4(fp)
 4006a74:	e0bffe15 	stw	r2,-8(fp)
    if (!p)
 4006a78:	e0bffe17 	ldw	r2,-8(fp)
 4006a7c:	10000c26 	beq	r2,zero,4006ab0 <Touch_UnInit+0x54>
        return;
        
    // stop alarm
    alt_alarm_stop(&(p->alarm));
 4006a80:	e0bffe17 	ldw	r2,-8(fp)
 4006a84:	10801004 	addi	r2,r2,64
 4006a88:	1009883a 	mov	r4,r2
 4006a8c:	40118d40 	call	40118d4 <alt_alarm_stop>
    // disable irq
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, 0x00);
 4006a90:	e0bffe17 	ldw	r2,-8(fp)
 4006a94:	10800117 	ldw	r2,4(r2)
 4006a98:	10800204 	addi	r2,r2,8
 4006a9c:	0007883a 	mov	r3,zero
 4006aa0:	10c00035 	stwio	r3,0(r2)
    
    // zero varialbe
    free(p);
 4006aa4:	e13ffe17 	ldw	r4,-8(fp)
 4006aa8:	40088ec0 	call	40088ec <free>
 4006aac:	00000106 	br	4006ab4 <Touch_UnInit+0x58>

// uninit touch panel
void Touch_UnInit(TOUCH_HANDLE pHandle){
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
    if (!p)
        return;
 4006ab0:	0001883a 	nop
    // disable irq
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, 0x00);
    
    // zero varialbe
    free(p);
}
 4006ab4:	e037883a 	mov	sp,fp
 4006ab8:	dfc00117 	ldw	ra,4(sp)
 4006abc:	df000017 	ldw	fp,0(sp)
 4006ac0:	dec00204 	addi	sp,sp,8
 4006ac4:	f800283a 	ret

04006ac8 <Touch_EmptyFifo>:


void Touch_EmptyFifo(TOUCH_HANDLE pHandle){
 4006ac8:	defffc04 	addi	sp,sp,-16
 4006acc:	dfc00315 	stw	ra,12(sp)
 4006ad0:	df000215 	stw	fp,8(sp)
 4006ad4:	df000204 	addi	fp,sp,8
 4006ad8:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 4006adc:	e0bfff17 	ldw	r2,-4(fp)
 4006ae0:	e0bffe15 	stw	r2,-8(fp)
    touch_empty_fifo(p);
 4006ae4:	e13ffe17 	ldw	r4,-8(fp)
 4006ae8:	4006cc40 	call	4006cc4 <touch_empty_fifo>
}
 4006aec:	e037883a 	mov	sp,fp
 4006af0:	dfc00117 	ldw	ra,4(sp)
 4006af4:	df000017 	ldw	fp,0(sp)
 4006af8:	dec00204 	addi	sp,sp,8
 4006afc:	f800283a 	ret

04006b00 <Touch_GetXY>:

// get x/y from internal FIFO
bool Touch_GetXY(TOUCH_HANDLE pHandle, int *x, int *y){
 4006b00:	defff904 	addi	sp,sp,-28
 4006b04:	dfc00615 	stw	ra,24(sp)
 4006b08:	df000515 	stw	fp,20(sp)
 4006b0c:	dc000415 	stw	r16,16(sp)
 4006b10:	df000404 	addi	fp,sp,16
 4006b14:	e13ffd15 	stw	r4,-12(fp)
 4006b18:	e17ffe15 	stw	r5,-8(fp)
 4006b1c:	e1bfff15 	stw	r6,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 4006b20:	e0bffd17 	ldw	r2,-12(fp)
 4006b24:	e0bffc15 	stw	r2,-16(fp)
    if (!p)
 4006b28:	e0bffc17 	ldw	r2,-16(fp)
 4006b2c:	1000021e 	bne	r2,zero,4006b38 <Touch_GetXY+0x38>
        return FALSE;    
 4006b30:	0005883a 	mov	r2,zero
 4006b34:	00003f06 	br	4006c34 <Touch_GetXY+0x134>
    
    if (p->fifo_front == p->fifo_rear){
 4006b38:	e0bffc17 	ldw	r2,-16(fp)
 4006b3c:	10c0040b 	ldhu	r3,16(r2)
 4006b40:	e0bffc17 	ldw	r2,-16(fp)
 4006b44:	1080048b 	ldhu	r2,18(r2)
 4006b48:	18ffffcc 	andi	r3,r3,65535
 4006b4c:	10bfffcc 	andi	r2,r2,65535
 4006b50:	1880021e 	bne	r3,r2,4006b5c <Touch_GetXY+0x5c>
        // empty
        return FALSE;
 4006b54:	0005883a 	mov	r2,zero
 4006b58:	00003606 	br	4006c34 <Touch_GetXY+0x134>
    }
    *x = p->fifo_x[p->fifo_rear];
 4006b5c:	e0bffc17 	ldw	r2,-16(fp)
 4006b60:	1080048b 	ldhu	r2,18(r2)
 4006b64:	10bfffcc 	andi	r2,r2,65535
 4006b68:	e0fffc17 	ldw	r3,-16(fp)
 4006b6c:	10800284 	addi	r2,r2,10
 4006b70:	1085883a 	add	r2,r2,r2
 4006b74:	1885883a 	add	r2,r3,r2
 4006b78:	1080000b 	ldhu	r2,0(r2)
 4006b7c:	10ffffcc 	andi	r3,r2,65535
 4006b80:	e0bffe17 	ldw	r2,-8(fp)
 4006b84:	10c00015 	stw	r3,0(r2)
    *y = p->fifo_y[p->fifo_rear];
 4006b88:	e0bffc17 	ldw	r2,-16(fp)
 4006b8c:	1080048b 	ldhu	r2,18(r2)
 4006b90:	10bfffcc 	andi	r2,r2,65535
 4006b94:	e0fffc17 	ldw	r3,-16(fp)
 4006b98:	10800504 	addi	r2,r2,20
 4006b9c:	1085883a 	add	r2,r2,r2
 4006ba0:	1885883a 	add	r2,r3,r2
 4006ba4:	1080000b 	ldhu	r2,0(r2)
 4006ba8:	10ffffcc 	andi	r3,r2,65535
 4006bac:	e0bfff17 	ldw	r2,-4(fp)
 4006bb0:	10c00015 	stw	r3,0(r2)
    //
    p->fifo_rear++;
 4006bb4:	e0bffc17 	ldw	r2,-16(fp)
 4006bb8:	1080048b 	ldhu	r2,18(r2)
 4006bbc:	10800044 	addi	r2,r2,1
 4006bc0:	1007883a 	mov	r3,r2
 4006bc4:	e0bffc17 	ldw	r2,-16(fp)
 4006bc8:	10c0048d 	sth	r3,18(r2)
    p->fifo_rear %= FIFO_SIZE;
 4006bcc:	e0bffc17 	ldw	r2,-16(fp)
 4006bd0:	1080048b 	ldhu	r2,18(r2)
 4006bd4:	10bfffcc 	andi	r2,r2,65535
 4006bd8:	1009883a 	mov	r4,r2
 4006bdc:	01400284 	movi	r5,10
 4006be0:	40083340 	call	4008334 <__umodsi3>
 4006be4:	1007883a 	mov	r3,r2
 4006be8:	e0bffc17 	ldw	r2,-16(fp)
 4006bec:	10c0048d 	sth	r3,18(r2)
    //
    // translate
    touch_xy_transform(x, y);
 4006bf0:	e13ffe17 	ldw	r4,-8(fp)
 4006bf4:	e17fff17 	ldw	r5,-4(fp)
 4006bf8:	400724c0 	call	400724c <touch_xy_transform>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4006bfc:	008100f4 	movhi	r2,1027
 4006c00:	1091ee04 	addi	r2,r2,18360
 4006c04:	10800017 	ldw	r2,0(r2)

    DEBUG_OUT("[TOUCH] x=%d, y=%d\n", *x,*y);
//    touch_clear_input(p);
//    touch_empty_fifo(p);
    p->next_active_time = alt_nticks() + ACTIVE_DELAY_TIME;
 4006c08:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4006c0c:	008100f4 	movhi	r2,1027
 4006c10:	1091ed04 	addi	r2,r2,18356
 4006c14:	10800017 	ldw	r2,0(r2)
 4006c18:	1009883a 	mov	r4,r2
 4006c1c:	01400f04 	movi	r5,60
 4006c20:	400832c0 	call	400832c <__udivsi3>
 4006c24:	8087883a 	add	r3,r16,r2
 4006c28:	e0bffc17 	ldw	r2,-16(fp)
 4006c2c:	10c01715 	stw	r3,92(r2)
    
    return TRUE;
 4006c30:	00800044 	movi	r2,1
}
 4006c34:	e037883a 	mov	sp,fp
 4006c38:	dfc00217 	ldw	ra,8(sp)
 4006c3c:	df000117 	ldw	fp,4(sp)
 4006c40:	dc000017 	ldw	r16,0(sp)
 4006c44:	dec00304 	addi	sp,sp,12
 4006c48:	f800283a 	ret

04006c4c <touch_isr>:



// penirq_n ISR
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void touch_isr(void* context){
 4006c4c:	defffb04 	addi	sp,sp,-20
 4006c50:	dfc00415 	stw	ra,16(sp)
 4006c54:	df000315 	stw	fp,12(sp)
 4006c58:	df000304 	addi	fp,sp,12
 4006c5c:	e13fff15 	stw	r4,-4(fp)
#else
void touch_isr(void* context, alt_u32 id){
#endif
    alt_u8 mask;
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
 4006c60:	e0bfff17 	ldw	r2,-4(fp)
 4006c64:	e0bffd15 	stw	r2,-12(fp)

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_disable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
 4006c68:	0009883a 	mov	r4,zero
 4006c6c:	014000c4 	movi	r5,3
 4006c70:	40110f40 	call	40110f4 <alt_ic_irq_disable>
#else
    alt_irq_disable(id);
#endif

    // get the edge capture mask
    mask = IORD_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base);
 4006c74:	e0bffd17 	ldw	r2,-12(fp)
 4006c78:	10800117 	ldw	r2,4(r2)
 4006c7c:	10800304 	addi	r2,r2,12
 4006c80:	10800037 	ldwio	r2,0(r2)
 4006c84:	e0bffe05 	stb	r2,-8(fp)
    //if ((mask & Touch.irq_mask) == 0)  // 1-pin
    //    return;
    DEBUG_OUT("Touched!!\n");
    usleep(1000);
 4006c88:	0100fa04 	movi	r4,1000
 4006c8c:	4011a700 	call	4011a70 <usleep>
    }
    IOWR(PIO_RED_LED_BASE, 0, Touch.pen_pressed);
#endif                    
    
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);    
 4006c90:	e0bffd17 	ldw	r2,-12(fp)
 4006c94:	10800117 	ldw	r2,4(r2)
 4006c98:	10800304 	addi	r2,r2,12
 4006c9c:	0007883a 	mov	r3,zero
 4006ca0:	10c00035 	stwio	r3,0(r2)
    
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_enable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
 4006ca4:	0009883a 	mov	r4,zero
 4006ca8:	014000c4 	movi	r5,3
 4006cac:	40110580 	call	4011058 <alt_ic_irq_enable>
#else
    alt_irq_enable(id);
#endif

}
 4006cb0:	e037883a 	mov	sp,fp
 4006cb4:	dfc00117 	ldw	ra,4(sp)
 4006cb8:	df000017 	ldw	fp,0(sp)
 4006cbc:	dec00204 	addi	sp,sp,8
 4006cc0:	f800283a 	ret

04006cc4 <touch_empty_fifo>:

void touch_empty_fifo(TERASIC_TOUCH_PANEL *p){
 4006cc4:	defffe04 	addi	sp,sp,-8
 4006cc8:	df000115 	stw	fp,4(sp)
 4006ccc:	df000104 	addi	fp,sp,4
 4006cd0:	e13fff15 	stw	r4,-4(fp)
    p->fifo_rear = p->fifo_front;
 4006cd4:	e0bfff17 	ldw	r2,-4(fp)
 4006cd8:	10c0040b 	ldhu	r3,16(r2)
 4006cdc:	e0bfff17 	ldw	r2,-4(fp)
 4006ce0:	10c0048d 	sth	r3,18(r2)
}
 4006ce4:	e037883a 	mov	sp,fp
 4006ce8:	df000017 	ldw	fp,0(sp)
 4006cec:	dec00104 	addi	sp,sp,4
 4006cf0:	f800283a 	ret

04006cf4 <touch_is_pen_pressed>:

bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p){
 4006cf4:	defffd04 	addi	sp,sp,-12
 4006cf8:	df000215 	stw	fp,8(sp)
 4006cfc:	df000204 	addi	fp,sp,8
 4006d00:	e13fff15 	stw	r4,-4(fp)
    bool bPressed;
    bPressed = (IORD(p->penirq_base, 0) & 0x01)?FALSE:TRUE;
 4006d04:	e0bfff17 	ldw	r2,-4(fp)
 4006d08:	10800117 	ldw	r2,4(r2)
 4006d0c:	10800037 	ldwio	r2,0(r2)
 4006d10:	1080004c 	andi	r2,r2,1
 4006d14:	1005003a 	cmpeq	r2,r2,zero
 4006d18:	10803fcc 	andi	r2,r2,255
 4006d1c:	e0bffe15 	stw	r2,-8(fp)
    return bPressed;
 4006d20:	e0bffe17 	ldw	r2,-8(fp)
}
 4006d24:	e037883a 	mov	sp,fp
 4006d28:	df000017 	ldw	fp,0(sp)
 4006d2c:	dec00104 	addi	sp,sp,4
 4006d30:	f800283a 	ret

04006d34 <touch_enable_penirq>:


void touch_enable_penirq(TERASIC_TOUCH_PANEL *p){
 4006d34:	defff904 	addi	sp,sp,-28
 4006d38:	dfc00615 	stw	ra,24(sp)
 4006d3c:	df000515 	stw	fp,20(sp)
 4006d40:	df000504 	addi	fp,sp,20
 4006d44:	e13fff15 	stw	r4,-4(fp)
    const alt_u8 CommandGetX = 0x82;
 4006d48:	00bfe084 	movi	r2,-126
 4006d4c:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
 4006d50:	00bff484 	movi	r2,-46
 4006d54:	e0bffe45 	stb	r2,-7(fp)
    alt_u8 data8;
    
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 4006d58:	e0bfff17 	ldw	r2,-4(fp)
 4006d5c:	10800017 	ldw	r2,0(r2)
 4006d60:	d8000015 	stw	zero,0(sp)
 4006d64:	d8000115 	stw	zero,4(sp)
 4006d68:	00c00044 	movi	r3,1
 4006d6c:	d8c00215 	stw	r3,8(sp)
 4006d70:	1009883a 	mov	r4,r2
 4006d74:	000b883a 	mov	r5,zero
 4006d78:	01800044 	movi	r6,1
 4006d7c:	e1fffe04 	addi	r7,fp,-8
 4006d80:	40127100 	call	4012710 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
 4006d84:	e0bfff17 	ldw	r2,-4(fp)
 4006d88:	10800017 	ldw	r2,0(r2)
 4006d8c:	00c00044 	movi	r3,1
 4006d90:	d8c00015 	stw	r3,0(sp)
 4006d94:	e0fffe84 	addi	r3,fp,-6
 4006d98:	d8c00115 	stw	r3,4(sp)
 4006d9c:	00c00044 	movi	r3,1
 4006da0:	d8c00215 	stw	r3,8(sp)
 4006da4:	1009883a 	mov	r4,r2
 4006da8:	000b883a 	mov	r5,zero
 4006dac:	000d883a 	mov	r6,zero
 4006db0:	000f883a 	mov	r7,zero
 4006db4:	40127100 	call	4012710 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 4006db8:	e0bfff17 	ldw	r2,-4(fp)
 4006dbc:	10800017 	ldw	r2,0(r2)
 4006dc0:	00c00044 	movi	r3,1
 4006dc4:	d8c00015 	stw	r3,0(sp)
 4006dc8:	e0fffe84 	addi	r3,fp,-6
 4006dcc:	d8c00115 	stw	r3,4(sp)
 4006dd0:	00c00084 	movi	r3,2
 4006dd4:	d8c00215 	stw	r3,8(sp)
 4006dd8:	1009883a 	mov	r4,r2
 4006ddc:	000b883a 	mov	r5,zero
 4006de0:	000d883a 	mov	r6,zero
 4006de4:	000f883a 	mov	r7,zero
 4006de8:	40127100 	call	4012710 <alt_avalon_spi_command>
   
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 4006dec:	e0bfff17 	ldw	r2,-4(fp)
 4006df0:	10c00017 	ldw	r3,0(r2)
 4006df4:	e0bffe44 	addi	r2,fp,-7
 4006df8:	d8000015 	stw	zero,0(sp)
 4006dfc:	d8000115 	stw	zero,4(sp)
 4006e00:	01000044 	movi	r4,1
 4006e04:	d9000215 	stw	r4,8(sp)
 4006e08:	1809883a 	mov	r4,r3
 4006e0c:	000b883a 	mov	r5,zero
 4006e10:	01800044 	movi	r6,1
 4006e14:	100f883a 	mov	r7,r2
 4006e18:	40127100 	call	4012710 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
 4006e1c:	e0bfff17 	ldw	r2,-4(fp)
 4006e20:	10800017 	ldw	r2,0(r2)
 4006e24:	00c00044 	movi	r3,1
 4006e28:	d8c00015 	stw	r3,0(sp)
 4006e2c:	e0fffe84 	addi	r3,fp,-6
 4006e30:	d8c00115 	stw	r3,4(sp)
 4006e34:	00c00044 	movi	r3,1
 4006e38:	d8c00215 	stw	r3,8(sp)
 4006e3c:	1009883a 	mov	r4,r2
 4006e40:	000b883a 	mov	r5,zero
 4006e44:	000d883a 	mov	r6,zero
 4006e48:	000f883a 	mov	r7,zero
 4006e4c:	40127100 	call	4012710 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 4006e50:	e0bfff17 	ldw	r2,-4(fp)
 4006e54:	10800017 	ldw	r2,0(r2)
 4006e58:	00c00044 	movi	r3,1
 4006e5c:	d8c00015 	stw	r3,0(sp)
 4006e60:	e0fffe84 	addi	r3,fp,-6
 4006e64:	d8c00115 	stw	r3,4(sp)
 4006e68:	00c00084 	movi	r3,2
 4006e6c:	d8c00215 	stw	r3,8(sp)
 4006e70:	1009883a 	mov	r4,r2
 4006e74:	000b883a 	mov	r5,zero
 4006e78:	000d883a 	mov	r6,zero
 4006e7c:	000f883a 	mov	r7,zero
 4006e80:	40127100 	call	4012710 <alt_avalon_spi_command>
}
 4006e84:	e037883a 	mov	sp,fp
 4006e88:	dfc00117 	ldw	ra,4(sp)
 4006e8c:	df000017 	ldw	fp,0(sp)
 4006e90:	dec00204 	addi	sp,sp,8
 4006e94:	f800283a 	ret

04006e98 <touch_clear_input>:

void touch_clear_input(TERASIC_TOUCH_PANEL *p){
 4006e98:	defffd04 	addi	sp,sp,-12
 4006e9c:	dfc00215 	stw	ra,8(sp)
 4006ea0:	df000115 	stw	fp,4(sp)
 4006ea4:	df000104 	addi	fp,sp,4
 4006ea8:	e13fff15 	stw	r4,-4(fp)
    touch_enable_penirq(p);
 4006eac:	e13fff17 	ldw	r4,-4(fp)
 4006eb0:	4006d340 	call	4006d34 <touch_enable_penirq>
}
 4006eb4:	e037883a 	mov	sp,fp
 4006eb8:	dfc00117 	ldw	ra,4(sp)
 4006ebc:	df000017 	ldw	fp,0(sp)
 4006ec0:	dec00204 	addi	sp,sp,8
 4006ec4:	f800283a 	ret

04006ec8 <touch_get_xy>:

// get x/y by SPI command
void touch_get_xy(TERASIC_TOUCH_PANEL *p){
 4006ec8:	defff604 	addi	sp,sp,-40
 4006ecc:	dfc00915 	stw	ra,36(sp)
 4006ed0:	df000815 	stw	fp,32(sp)
 4006ed4:	df000804 	addi	fp,sp,32
 4006ed8:	e13fff15 	stw	r4,-4(fp)
    alt_u16 x, y;
    int result;
    const alt_u8 CommandGetX = 0x92;
 4006edc:	00bfe484 	movi	r2,-110
 4006ee0:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
 4006ee4:	00bff484 	movi	r2,-46
 4006ee8:	e0bffe45 	stb	r2,-7(fp)
    
       
    //DEBUG_OUT(("[TOUCH] get x/y\n"));

    // x
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 4006eec:	e0bfff17 	ldw	r2,-4(fp)
 4006ef0:	10c00017 	ldw	r3,0(r2)
 4006ef4:	e0bffe04 	addi	r2,fp,-8
 4006ef8:	d8000015 	stw	zero,0(sp)
 4006efc:	d8000115 	stw	zero,4(sp)
 4006f00:	01000044 	movi	r4,1
 4006f04:	d9000215 	stw	r4,8(sp)
 4006f08:	1809883a 	mov	r4,r3
 4006f0c:	000b883a 	mov	r5,zero
 4006f10:	01800044 	movi	r6,1
 4006f14:	100f883a 	mov	r7,r2
 4006f18:	40127100 	call	4012710 <alt_avalon_spi_command>
 4006f1c:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
 4006f20:	e0bfff17 	ldw	r2,-4(fp)
 4006f24:	10800017 	ldw	r2,0(r2)
 4006f28:	00c00044 	movi	r3,1
 4006f2c:	d8c00015 	stw	r3,0(sp)
 4006f30:	e0fffe84 	addi	r3,fp,-6
 4006f34:	d8c00115 	stw	r3,4(sp)
 4006f38:	00c00044 	movi	r3,1
 4006f3c:	d8c00215 	stw	r3,8(sp)
 4006f40:	1009883a 	mov	r4,r2
 4006f44:	000b883a 	mov	r5,zero
 4006f48:	000d883a 	mov	r6,zero
 4006f4c:	000f883a 	mov	r7,zero
 4006f50:	40127100 	call	4012710 <alt_avalon_spi_command>
 4006f54:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
 4006f58:	e0bffb17 	ldw	r2,-20(fp)
 4006f5c:	10800058 	cmpnei	r2,r2,1
 4006f60:	1000971e 	bne	r2,zero,40071c0 <touch_get_xy+0x2f8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 4006f64:	e0bfff17 	ldw	r2,-4(fp)
 4006f68:	10800017 	ldw	r2,0(r2)
 4006f6c:	00c00044 	movi	r3,1
 4006f70:	d8c00015 	stw	r3,0(sp)
 4006f74:	e0fffec4 	addi	r3,fp,-5
 4006f78:	d8c00115 	stw	r3,4(sp)
 4006f7c:	00c00084 	movi	r3,2
 4006f80:	d8c00215 	stw	r3,8(sp)
 4006f84:	1009883a 	mov	r4,r2
 4006f88:	000b883a 	mov	r5,zero
 4006f8c:	000d883a 	mov	r6,zero
 4006f90:	000f883a 	mov	r7,zero
 4006f94:	40127100 	call	4012710 <alt_avalon_spi_command>
 4006f98:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
 4006f9c:	e0bffb17 	ldw	r2,-20(fp)
 4006fa0:	10800058 	cmpnei	r2,r2,1
 4006fa4:	1000861e 	bne	r2,zero,40071c0 <touch_get_xy+0x2f8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }  
    ResponseX = (high_byte << 8) | low_byte;        
 4006fa8:	e0bffe83 	ldbu	r2,-6(fp)
 4006fac:	10803fcc 	andi	r2,r2,255
 4006fb0:	1004923a 	slli	r2,r2,8
 4006fb4:	1007883a 	mov	r3,r2
 4006fb8:	e0bffec3 	ldbu	r2,-5(fp)
 4006fbc:	10803fcc 	andi	r2,r2,255
 4006fc0:	1884b03a 	or	r2,r3,r2
 4006fc4:	e0bffc0d 	sth	r2,-16(fp)
    
    // y
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 4006fc8:	e0bfff17 	ldw	r2,-4(fp)
 4006fcc:	10c00017 	ldw	r3,0(r2)
 4006fd0:	e0bffe44 	addi	r2,fp,-7
 4006fd4:	d8000015 	stw	zero,0(sp)
 4006fd8:	d8000115 	stw	zero,4(sp)
 4006fdc:	01000044 	movi	r4,1
 4006fe0:	d9000215 	stw	r4,8(sp)
 4006fe4:	1809883a 	mov	r4,r3
 4006fe8:	000b883a 	mov	r5,zero
 4006fec:	01800044 	movi	r6,1
 4006ff0:	100f883a 	mov	r7,r2
 4006ff4:	40127100 	call	4012710 <alt_avalon_spi_command>
 4006ff8:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
 4006ffc:	e0bfff17 	ldw	r2,-4(fp)
 4007000:	10800017 	ldw	r2,0(r2)
 4007004:	00c00044 	movi	r3,1
 4007008:	d8c00015 	stw	r3,0(sp)
 400700c:	e0fffe84 	addi	r3,fp,-6
 4007010:	d8c00115 	stw	r3,4(sp)
 4007014:	00c00044 	movi	r3,1
 4007018:	d8c00215 	stw	r3,8(sp)
 400701c:	1009883a 	mov	r4,r2
 4007020:	000b883a 	mov	r5,zero
 4007024:	000d883a 	mov	r6,zero
 4007028:	000f883a 	mov	r7,zero
 400702c:	40127100 	call	4012710 <alt_avalon_spi_command>
 4007030:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
 4007034:	e0bffb17 	ldw	r2,-20(fp)
 4007038:	10800058 	cmpnei	r2,r2,1
 400703c:	1000601e 	bne	r2,zero,40071c0 <touch_get_xy+0x2f8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 4007040:	e0bfff17 	ldw	r2,-4(fp)
 4007044:	10800017 	ldw	r2,0(r2)
 4007048:	00c00044 	movi	r3,1
 400704c:	d8c00015 	stw	r3,0(sp)
 4007050:	e0fffec4 	addi	r3,fp,-5
 4007054:	d8c00115 	stw	r3,4(sp)
 4007058:	00c00084 	movi	r3,2
 400705c:	d8c00215 	stw	r3,8(sp)
 4007060:	1009883a 	mov	r4,r2
 4007064:	000b883a 	mov	r5,zero
 4007068:	000d883a 	mov	r6,zero
 400706c:	000f883a 	mov	r7,zero
 4007070:	40127100 	call	4012710 <alt_avalon_spi_command>
 4007074:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
 4007078:	e0bffb17 	ldw	r2,-20(fp)
 400707c:	10800058 	cmpnei	r2,r2,1
 4007080:	10004f1e 	bne	r2,zero,40071c0 <touch_get_xy+0x2f8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }  
    ResponseY = (high_byte << 8) | low_byte;        
 4007084:	e0bffe83 	ldbu	r2,-6(fp)
 4007088:	10803fcc 	andi	r2,r2,255
 400708c:	1004923a 	slli	r2,r2,8
 4007090:	1007883a 	mov	r3,r2
 4007094:	e0bffec3 	ldbu	r2,-5(fp)
 4007098:	10803fcc 	andi	r2,r2,255
 400709c:	1884b03a 	or	r2,r3,r2
 40070a0:	e0bffc8d 	sth	r2,-14(fp)

    if (!touch_is_pen_pressed(p))
 40070a4:	e13fff17 	ldw	r4,-4(fp)
 40070a8:	4006cf40 	call	4006cf4 <touch_is_pen_pressed>
 40070ac:	10004426 	beq	r2,zero,40071c0 <touch_get_xy+0x2f8>
        return; // do not use this data    
        
    x = (ResponseX >> 3 ) & 0xFFF;  // 12 bits    
 40070b0:	e0bffc0b 	ldhu	r2,-16(fp)
 40070b4:	1004d0fa 	srli	r2,r2,3
 40070b8:	1083ffcc 	andi	r2,r2,4095
 40070bc:	e0bffd0d 	sth	r2,-12(fp)
    y = (ResponseY >> 3 ) & 0xFFF;  // 12 bits
 40070c0:	e0bffc8b 	ldhu	r2,-14(fp)
 40070c4:	1004d0fa 	srli	r2,r2,3
 40070c8:	1083ffcc 	andi	r2,r2,4095
 40070cc:	e0bffd8d 	sth	r2,-10(fp)
    
    
    // check whether the fifo is full!
    if (((p->fifo_front+1)%FIFO_SIZE) == p->fifo_rear){
 40070d0:	e0bfff17 	ldw	r2,-4(fp)
 40070d4:	1080040b 	ldhu	r2,16(r2)
 40070d8:	10bfffcc 	andi	r2,r2,65535
 40070dc:	10800044 	addi	r2,r2,1
 40070e0:	1009883a 	mov	r4,r2
 40070e4:	01400284 	movi	r5,10
 40070e8:	40082d00 	call	40082d0 <__modsi3>
 40070ec:	1007883a 	mov	r3,r2
 40070f0:	e0bfff17 	ldw	r2,-4(fp)
 40070f4:	1080048b 	ldhu	r2,18(r2)
 40070f8:	10bfffcc 	andi	r2,r2,65535
 40070fc:	18800f1e 	bne	r3,r2,400713c <touch_get_xy+0x274>
        // full, pop an old one
        p->fifo_rear++;
 4007100:	e0bfff17 	ldw	r2,-4(fp)
 4007104:	1080048b 	ldhu	r2,18(r2)
 4007108:	10800044 	addi	r2,r2,1
 400710c:	1007883a 	mov	r3,r2
 4007110:	e0bfff17 	ldw	r2,-4(fp)
 4007114:	10c0048d 	sth	r3,18(r2)
        p->fifo_rear %= FIFO_SIZE;        
 4007118:	e0bfff17 	ldw	r2,-4(fp)
 400711c:	1080048b 	ldhu	r2,18(r2)
 4007120:	10bfffcc 	andi	r2,r2,65535
 4007124:	1009883a 	mov	r4,r2
 4007128:	01400284 	movi	r5,10
 400712c:	40083340 	call	4008334 <__umodsi3>
 4007130:	1007883a 	mov	r3,r2
 4007134:	e0bfff17 	ldw	r2,-4(fp)
 4007138:	10c0048d 	sth	r3,18(r2)
        
    }
    DEBUG_OUT("[ ADC] x=%d, y=%d\n", x,y);

    // push now
    p->fifo_x[p->fifo_front] = x;
 400713c:	e0bfff17 	ldw	r2,-4(fp)
 4007140:	1080040b 	ldhu	r2,16(r2)
 4007144:	10bfffcc 	andi	r2,r2,65535
 4007148:	e0ffff17 	ldw	r3,-4(fp)
 400714c:	10800284 	addi	r2,r2,10
 4007150:	1085883a 	add	r2,r2,r2
 4007154:	1885883a 	add	r2,r3,r2
 4007158:	e0fffd0b 	ldhu	r3,-12(fp)
 400715c:	10c0000d 	sth	r3,0(r2)
    p->fifo_y[p->fifo_front] = y;    
 4007160:	e0bfff17 	ldw	r2,-4(fp)
 4007164:	1080040b 	ldhu	r2,16(r2)
 4007168:	10bfffcc 	andi	r2,r2,65535
 400716c:	e0ffff17 	ldw	r3,-4(fp)
 4007170:	10800504 	addi	r2,r2,20
 4007174:	1085883a 	add	r2,r2,r2
 4007178:	1885883a 	add	r2,r3,r2
 400717c:	e0fffd8b 	ldhu	r3,-10(fp)
 4007180:	10c0000d 	sth	r3,0(r2)
    p->fifo_front++;
 4007184:	e0bfff17 	ldw	r2,-4(fp)
 4007188:	1080040b 	ldhu	r2,16(r2)
 400718c:	10800044 	addi	r2,r2,1
 4007190:	1007883a 	mov	r3,r2
 4007194:	e0bfff17 	ldw	r2,-4(fp)
 4007198:	10c0040d 	sth	r3,16(r2)
    p->fifo_front %= FIFO_SIZE;   
 400719c:	e0bfff17 	ldw	r2,-4(fp)
 40071a0:	1080040b 	ldhu	r2,16(r2)
 40071a4:	10bfffcc 	andi	r2,r2,65535
 40071a8:	1009883a 	mov	r4,r2
 40071ac:	01400284 	movi	r5,10
 40071b0:	40083340 	call	4008334 <__umodsi3>
 40071b4:	1007883a 	mov	r3,r2
 40071b8:	e0bfff17 	ldw	r2,-4(fp)
 40071bc:	10c0040d 	sth	r3,16(r2)
    
}
 40071c0:	e037883a 	mov	sp,fp
 40071c4:	dfc00117 	ldw	ra,4(sp)
 40071c8:	df000017 	ldw	fp,0(sp)
 40071cc:	dec00204 	addi	sp,sp,8
 40071d0:	f800283a 	ret

040071d4 <touch_alarm_callback>:

// polling x/y when penirq_n is low
alt_u32 touch_alarm_callback(void *context){
 40071d4:	defffc04 	addi	sp,sp,-16
 40071d8:	dfc00315 	stw	ra,12(sp)
 40071dc:	df000215 	stw	fp,8(sp)
 40071e0:	df000204 	addi	fp,sp,8
 40071e4:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
 40071e8:	e0bfff17 	ldw	r2,-4(fp)
 40071ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (touch_is_pen_pressed(p)){//Touch.pen_pressed){
 40071f0:	e13ffe17 	ldw	r4,-8(fp)
 40071f4:	4006cf40 	call	4006cf4 <touch_is_pen_pressed>
 40071f8:	10000926 	beq	r2,zero,4007220 <touch_alarm_callback+0x4c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40071fc:	008100f4 	movhi	r2,1027
 4007200:	1091ee04 	addi	r2,r2,18360
 4007204:	10800017 	ldw	r2,0(r2)
        if (alt_nticks() > p->next_active_time)
 4007208:	e0fffe17 	ldw	r3,-8(fp)
 400720c:	18c01717 	ldw	r3,92(r3)
 4007210:	1880072e 	bgeu	r3,r2,4007230 <touch_alarm_callback+0x5c>
            touch_get_xy(p);
 4007214:	e13ffe17 	ldw	r4,-8(fp)
 4007218:	4006ec80 	call	4006ec8 <touch_get_xy>
 400721c:	00000406 	br	4007230 <touch_alarm_callback+0x5c>
      //  p->last_active_time = alt_nticks(); 
    }else{
       // touch_empty_fifo(p);
        //if ((alt_nticks() - Touch.last_active_time) > alt_ticks_per_second()/10){
         touch_enable_penirq(p);
 4007220:	e13ffe17 	ldw	r4,-8(fp)
 4007224:	4006d340 	call	4006d34 <touch_enable_penirq>
         touch_clear_input(p);
 4007228:	e13ffe17 	ldw	r4,-8(fp)
 400722c:	4006e980 	call	4006e98 <touch_clear_input>
          //  p->last_active_time = alt_nticks(); 
        //}            
    }        
    return p->alarm_dur;
 4007230:	e0bffe17 	ldw	r2,-8(fp)
 4007234:	10801617 	ldw	r2,88(r2)
}
 4007238:	e037883a 	mov	sp,fp
 400723c:	dfc00117 	ldw	ra,4(sp)
 4007240:	df000017 	ldw	fp,0(sp)
 4007244:	dec00204 	addi	sp,sp,8
 4007248:	f800283a 	ret

0400724c <touch_xy_transform>:

void touch_xy_transform(int *x, int *y){
 400724c:	defff904 	addi	sp,sp,-28
 4007250:	dfc00615 	stw	ra,24(sp)
 4007254:	df000515 	stw	fp,20(sp)
 4007258:	df000504 	addi	fp,sp,20
 400725c:	e13ffe15 	stw	r4,-8(fp)
 4007260:	e17fff15 	stw	r5,-4(fp)
    int xx, yy;
    const int y_ignore = 200;
 4007264:	00803204 	movi	r2,200
 4007268:	e0bffc15 	stw	r2,-16(fp)
    xx = *y;
 400726c:	e0bfff17 	ldw	r2,-4(fp)
 4007270:	10800017 	ldw	r2,0(r2)
 4007274:	e0bffd15 	stw	r2,-12(fp)
    yy = *x;
 4007278:	e0bffe17 	ldw	r2,-8(fp)
 400727c:	10800017 	ldw	r2,0(r2)
 4007280:	e0bffb15 	stw	r2,-20(fp)

    // scale & swap
   // xx = 4096 -1 - xx;
    xx = xx * X_RES / 4096;
 4007284:	e0bffd17 	ldw	r2,-12(fp)
 4007288:	10803c24 	muli	r2,r2,240
 400728c:	1000010e 	bge	r2,zero,4007294 <touch_xy_transform+0x48>
 4007290:	1083ffc4 	addi	r2,r2,4095
 4007294:	1005d33a 	srai	r2,r2,12
 4007298:	e0bffd15 	stw	r2,-12(fp)

   // yy = 4096 -1 - yy;

    // special calibrate for LT24
    if (yy > (4096-y_ignore))
 400729c:	00c40004 	movi	r3,4096
 40072a0:	e0bffc17 	ldw	r2,-16(fp)
 40072a4:	1887c83a 	sub	r3,r3,r2
 40072a8:	e0bffb17 	ldw	r2,-20(fp)
 40072ac:	1880040e 	bge	r3,r2,40072c0 <touch_xy_transform+0x74>
    	yy = 4096-y_ignore;
 40072b0:	00c40004 	movi	r3,4096
 40072b4:	e0bffc17 	ldw	r2,-16(fp)
 40072b8:	1885c83a 	sub	r2,r3,r2
 40072bc:	e0bffb15 	stw	r2,-20(fp)
    yy = yy * 4095/ (4096-y_ignore);
 40072c0:	e0bffb17 	ldw	r2,-20(fp)
 40072c4:	10c3ffe4 	muli	r3,r2,4095
 40072c8:	01040004 	movi	r4,4096
 40072cc:	e0bffc17 	ldw	r2,-16(fp)
 40072d0:	2085c83a 	sub	r2,r4,r2
 40072d4:	1809883a 	mov	r4,r3
 40072d8:	100b883a 	mov	r5,r2
 40072dc:	40082800 	call	4008280 <__divsi3>
 40072e0:	e0bffb15 	stw	r2,-20(fp)
    
    yy = yy * Y_RES / 4096;
 40072e4:	e0bffb17 	ldw	r2,-20(fp)
 40072e8:	10805024 	muli	r2,r2,320
 40072ec:	1000010e 	bge	r2,zero,40072f4 <touch_xy_transform+0xa8>
 40072f0:	1083ffc4 	addi	r2,r2,4095
 40072f4:	1005d33a 	srai	r2,r2,12
 40072f8:	e0bffb15 	stw	r2,-20(fp)

    // swap
    *x = xx;
 40072fc:	e0bffe17 	ldw	r2,-8(fp)
 4007300:	e0fffd17 	ldw	r3,-12(fp)
 4007304:	10c00015 	stw	r3,0(r2)
    *y = yy;    
 4007308:	e0bfff17 	ldw	r2,-4(fp)
 400730c:	e0fffb17 	ldw	r3,-20(fp)
 4007310:	10c00015 	stw	r3,0(r2)
    
}
 4007314:	e037883a 	mov	sp,fp
 4007318:	dfc00117 	ldw	ra,4(sp)
 400731c:	df000017 	ldw	fp,0(sp)
 4007320:	dec00204 	addi	sp,sp,8
 4007324:	f800283a 	ret

04007328 <sqrt>:
 4007328:	defff104 	addi	sp,sp,-60
 400732c:	dcc00d15 	stw	r19,52(sp)
 4007330:	dc800c15 	stw	r18,48(sp)
 4007334:	dc400b15 	stw	r17,44(sp)
 4007338:	dc000a15 	stw	r16,40(sp)
 400733c:	2023883a 	mov	r17,r4
 4007340:	dfc00e15 	stw	ra,56(sp)
 4007344:	048100f4 	movhi	r18,1027
 4007348:	94844d04 	addi	r18,r18,4404
 400734c:	2821883a 	mov	r16,r5
 4007350:	40074700 	call	4007470 <__ieee754_sqrt>
 4007354:	91000017 	ldw	r4,0(r18)
 4007358:	1027883a 	mov	r19,r2
 400735c:	00bfffc4 	movi	r2,-1
 4007360:	20800d26 	beq	r4,r2,4007398 <sqrt+0x70>
 4007364:	8809883a 	mov	r4,r17
 4007368:	800b883a 	mov	r5,r16
 400736c:	d8c00915 	stw	r3,36(sp)
 4007370:	40077340 	call	4007734 <__isnand>
 4007374:	d8c00917 	ldw	r3,36(sp)
 4007378:	1000071e 	bne	r2,zero,4007398 <sqrt+0x70>
 400737c:	8809883a 	mov	r4,r17
 4007380:	800b883a 	mov	r5,r16
 4007384:	000d883a 	mov	r6,zero
 4007388:	000f883a 	mov	r7,zero
 400738c:	40080080 	call	4008008 <__ltdf2>
 4007390:	d8c00917 	ldw	r3,36(sp)
 4007394:	10000816 	blt	r2,zero,40073b8 <sqrt+0x90>
 4007398:	9805883a 	mov	r2,r19
 400739c:	dfc00e17 	ldw	ra,56(sp)
 40073a0:	dcc00d17 	ldw	r19,52(sp)
 40073a4:	dc800c17 	ldw	r18,48(sp)
 40073a8:	dc400b17 	ldw	r17,44(sp)
 40073ac:	dc000a17 	ldw	r16,40(sp)
 40073b0:	dec00f04 	addi	sp,sp,60
 40073b4:	f800283a 	ret
 40073b8:	94800017 	ldw	r18,0(r18)
 40073bc:	00800044 	movi	r2,1
 40073c0:	d8800015 	stw	r2,0(sp)
 40073c4:	008100f4 	movhi	r2,1027
 40073c8:	10b60f04 	addi	r2,r2,-10180
 40073cc:	d8800115 	stw	r2,4(sp)
 40073d0:	d8000815 	stw	zero,32(sp)
 40073d4:	dc400415 	stw	r17,16(sp)
 40073d8:	dc000515 	stw	r16,20(sp)
 40073dc:	dc400215 	stw	r17,8(sp)
 40073e0:	dc000315 	stw	r16,12(sp)
 40073e4:	9000111e 	bne	r18,zero,400742c <sqrt+0x104>
 40073e8:	d8000615 	stw	zero,24(sp)
 40073ec:	d8000715 	stw	zero,28(sp)
 40073f0:	d809883a 	mov	r4,sp
 40073f4:	40077600 	call	4007760 <matherr>
 40073f8:	10001526 	beq	r2,zero,4007450 <sqrt+0x128>
 40073fc:	d8800817 	ldw	r2,32(sp)
 4007400:	1000171e 	bne	r2,zero,4007460 <sqrt+0x138>
 4007404:	dcc00617 	ldw	r19,24(sp)
 4007408:	d8c00717 	ldw	r3,28(sp)
 400740c:	9805883a 	mov	r2,r19
 4007410:	dfc00e17 	ldw	ra,56(sp)
 4007414:	dcc00d17 	ldw	r19,52(sp)
 4007418:	dc800c17 	ldw	r18,48(sp)
 400741c:	dc400b17 	ldw	r17,44(sp)
 4007420:	dc000a17 	ldw	r16,40(sp)
 4007424:	dec00f04 	addi	sp,sp,60
 4007428:	f800283a 	ret
 400742c:	0009883a 	mov	r4,zero
 4007430:	000b883a 	mov	r5,zero
 4007434:	000d883a 	mov	r6,zero
 4007438:	000f883a 	mov	r7,zero
 400743c:	4007e540 	call	4007e54 <__divdf3>
 4007440:	d8800615 	stw	r2,24(sp)
 4007444:	d8c00715 	stw	r3,28(sp)
 4007448:	00800084 	movi	r2,2
 400744c:	90bfe81e 	bne	r18,r2,40073f0 <sqrt+0xc8>
 4007450:	40088c80 	call	40088c8 <__errno>
 4007454:	00c00844 	movi	r3,33
 4007458:	10c00015 	stw	r3,0(r2)
 400745c:	003fe706 	br	40073fc <sqrt+0xd4>
 4007460:	40088c80 	call	40088c8 <__errno>
 4007464:	d8c00817 	ldw	r3,32(sp)
 4007468:	10c00015 	stw	r3,0(r2)
 400746c:	003fe506 	br	4007404 <sqrt+0xdc>

04007470 <__ieee754_sqrt>:
 4007470:	defffd04 	addi	sp,sp,-12
 4007474:	dc400115 	stw	r17,4(sp)
 4007478:	dc000015 	stw	r16,0(sp)
 400747c:	dfc00215 	stw	ra,8(sp)
 4007480:	28dffc2c 	andhi	r3,r5,32752
 4007484:	009ffc34 	movhi	r2,32752
 4007488:	2821883a 	mov	r16,r5
 400748c:	2023883a 	mov	r17,r4
 4007490:	2811883a 	mov	r8,r5
 4007494:	2013883a 	mov	r9,r4
 4007498:	18808326 	beq	r3,r2,40076a8 <__ieee754_sqrt+0x238>
 400749c:	0140610e 	bge	zero,r5,4007624 <__ieee754_sqrt+0x1b4>
 40074a0:	2805d53a 	srai	r2,r5,20
 40074a4:	10006a26 	beq	r2,zero,4007650 <__ieee754_sqrt+0x1e0>
 40074a8:	00c00434 	movhi	r3,16
 40074ac:	18ffffc4 	addi	r3,r3,-1
 40074b0:	10bf0044 	addi	r2,r2,-1023
 40074b4:	40d0703a 	and	r8,r8,r3
 40074b8:	10c0004c 	andi	r3,r2,1
 40074bc:	42000434 	orhi	r8,r8,16
 40074c0:	1800511e 	bne	r3,zero,4007608 <__ieee754_sqrt+0x198>
 40074c4:	4808d7fa 	srli	r4,r9,31
 40074c8:	4211883a 	add	r8,r8,r8
 40074cc:	101bd07a 	srai	r13,r2,1
 40074d0:	4107883a 	add	r3,r8,r4
 40074d4:	4a4b883a 	add	r5,r9,r9
 40074d8:	01000584 	movi	r4,22
 40074dc:	0015883a 	mov	r10,zero
 40074e0:	000d883a 	mov	r6,zero
 40074e4:	00800834 	movhi	r2,32
 40074e8:	308f883a 	add	r7,r6,r2
 40074ec:	2810d7fa 	srli	r8,r5,31
 40074f0:	213fffc4 	addi	r4,r4,-1
 40074f4:	19c00316 	blt	r3,r7,4007504 <__ieee754_sqrt+0x94>
 40074f8:	19c7c83a 	sub	r3,r3,r7
 40074fc:	388d883a 	add	r6,r7,r2
 4007500:	5095883a 	add	r10,r10,r2
 4007504:	18c7883a 	add	r3,r3,r3
 4007508:	1a07883a 	add	r3,r3,r8
 400750c:	294b883a 	add	r5,r5,r5
 4007510:	1004d07a 	srli	r2,r2,1
 4007514:	203ff41e 	bne	r4,zero,40074e8 <__ieee754_sqrt+0x78>
 4007518:	01e00034 	movhi	r7,32768
 400751c:	02400804 	movi	r9,32
 4007520:	0005883a 	mov	r2,zero
 4007524:	0017883a 	mov	r11,zero
 4007528:	3819883a 	mov	r12,r7
 400752c:	00000806 	br	4007550 <__ieee754_sqrt+0xe0>
 4007530:	19803226 	beq	r3,r6,40075fc <__ieee754_sqrt+0x18c>
 4007534:	2810d7fa 	srli	r8,r5,31
 4007538:	18c7883a 	add	r3,r3,r3
 400753c:	4a7fffc4 	addi	r9,r9,-1
 4007540:	1a07883a 	add	r3,r3,r8
 4007544:	294b883a 	add	r5,r5,r5
 4007548:	380ed07a 	srli	r7,r7,1
 400754c:	48001326 	beq	r9,zero,400759c <__ieee754_sqrt+0x12c>
 4007550:	59d1883a 	add	r8,r11,r7
 4007554:	30fff60e 	bge	r6,r3,4007530 <__ieee754_sqrt+0xc0>
 4007558:	4120002c 	andhi	r4,r8,32768
 400755c:	41d7883a 	add	r11,r8,r7
 4007560:	23002326 	beq	r4,r12,40075f0 <__ieee754_sqrt+0x180>
 4007564:	3009883a 	mov	r4,r6
 4007568:	1987c83a 	sub	r3,r3,r6
 400756c:	2a00012e 	bgeu	r5,r8,4007574 <__ieee754_sqrt+0x104>
 4007570:	18ffffc4 	addi	r3,r3,-1
 4007574:	2a0bc83a 	sub	r5,r5,r8
 4007578:	2810d7fa 	srli	r8,r5,31
 400757c:	18c7883a 	add	r3,r3,r3
 4007580:	4a7fffc4 	addi	r9,r9,-1
 4007584:	11c5883a 	add	r2,r2,r7
 4007588:	200d883a 	mov	r6,r4
 400758c:	1a07883a 	add	r3,r3,r8
 4007590:	294b883a 	add	r5,r5,r5
 4007594:	380ed07a 	srli	r7,r7,1
 4007598:	483fed1e 	bne	r9,zero,4007550 <__ieee754_sqrt+0xe0>
 400759c:	28c6b03a 	or	r3,r5,r3
 40075a0:	18000426 	beq	r3,zero,40075b4 <__ieee754_sqrt+0x144>
 40075a4:	00ffffc4 	movi	r3,-1
 40075a8:	10c05026 	beq	r2,r3,40076ec <__ieee754_sqrt+0x27c>
 40075ac:	10c0004c 	andi	r3,r2,1
 40075b0:	1885883a 	add	r2,r3,r2
 40075b4:	1022d07a 	srli	r17,r2,1
 40075b8:	5007d07a 	srai	r3,r10,1
 40075bc:	008ff834 	movhi	r2,16352
 40075c0:	5280004c 	andi	r10,r10,1
 40075c4:	1887883a 	add	r3,r3,r2
 40075c8:	5000141e 	bne	r10,zero,400761c <__ieee754_sqrt+0x1ac>
 40075cc:	681a953a 	slli	r13,r13,20
 40075d0:	68e1883a 	add	r16,r13,r3
 40075d4:	8805883a 	mov	r2,r17
 40075d8:	8007883a 	mov	r3,r16
 40075dc:	dfc00217 	ldw	ra,8(sp)
 40075e0:	dc400117 	ldw	r17,4(sp)
 40075e4:	dc000017 	ldw	r16,0(sp)
 40075e8:	dec00304 	addi	sp,sp,12
 40075ec:	f800283a 	ret
 40075f0:	583fdc16 	blt	r11,zero,4007564 <__ieee754_sqrt+0xf4>
 40075f4:	31000044 	addi	r4,r6,1
 40075f8:	003fdb06 	br	4007568 <__ieee754_sqrt+0xf8>
 40075fc:	2a3fd62e 	bgeu	r5,r8,4007558 <__ieee754_sqrt+0xe8>
 4007600:	180d883a 	mov	r6,r3
 4007604:	003fcb06 	br	4007534 <__ieee754_sqrt+0xc4>
 4007608:	4806d7fa 	srli	r3,r9,31
 400760c:	4211883a 	add	r8,r8,r8
 4007610:	4a53883a 	add	r9,r9,r9
 4007614:	40d1883a 	add	r8,r8,r3
 4007618:	003faa06 	br	40074c4 <__ieee754_sqrt+0x54>
 400761c:	8c600034 	orhi	r17,r17,32768
 4007620:	003fea06 	br	40075cc <__ieee754_sqrt+0x15c>
 4007624:	00a00034 	movhi	r2,32768
 4007628:	10bfffc4 	addi	r2,r2,-1
 400762c:	2884703a 	and	r2,r5,r2
 4007630:	1104b03a 	or	r2,r2,r4
 4007634:	103fe726 	beq	r2,zero,40075d4 <__ieee754_sqrt+0x164>
 4007638:	2800331e 	bne	r5,zero,4007708 <__ieee754_sqrt+0x298>
 400763c:	0005883a 	mov	r2,zero
 4007640:	4810d2fa 	srli	r8,r9,11
 4007644:	10bffac4 	addi	r2,r2,-21
 4007648:	4812957a 	slli	r9,r9,21
 400764c:	403ffc26 	beq	r8,zero,4007640 <__ieee754_sqrt+0x1d0>
 4007650:	40c0042c 	andhi	r3,r8,16
 4007654:	1800281e 	bne	r3,zero,40076f8 <__ieee754_sqrt+0x288>
 4007658:	4211883a 	add	r8,r8,r8
 400765c:	4100042c 	andhi	r4,r8,16
 4007660:	18c00044 	addi	r3,r3,1
 4007664:	203ffc26 	beq	r4,zero,4007658 <__ieee754_sqrt+0x1e8>
 4007668:	01400044 	movi	r5,1
 400766c:	01000804 	movi	r4,32
 4007670:	28cbc83a 	sub	r5,r5,r3
 4007674:	20c9c83a 	sub	r4,r4,r3
 4007678:	4908d83a 	srl	r4,r9,r4
 400767c:	1145883a 	add	r2,r2,r5
 4007680:	48d2983a 	sll	r9,r9,r3
 4007684:	4110b03a 	or	r8,r8,r4
 4007688:	00c00434 	movhi	r3,16
 400768c:	18ffffc4 	addi	r3,r3,-1
 4007690:	10bf0044 	addi	r2,r2,-1023
 4007694:	40d0703a 	and	r8,r8,r3
 4007698:	10c0004c 	andi	r3,r2,1
 400769c:	42000434 	orhi	r8,r8,16
 40076a0:	183f8826 	beq	r3,zero,40074c4 <__ieee754_sqrt+0x54>
 40076a4:	003fd806 	br	4007608 <__ieee754_sqrt+0x198>
 40076a8:	200d883a 	mov	r6,r4
 40076ac:	280f883a 	mov	r7,r5
 40076b0:	4007b700 	call	4007b70 <__muldf3>
 40076b4:	8809883a 	mov	r4,r17
 40076b8:	800b883a 	mov	r5,r16
 40076bc:	100d883a 	mov	r6,r2
 40076c0:	180f883a 	mov	r7,r3
 40076c4:	4007abc0 	call	4007abc <__adddf3>
 40076c8:	1023883a 	mov	r17,r2
 40076cc:	1821883a 	mov	r16,r3
 40076d0:	8805883a 	mov	r2,r17
 40076d4:	8007883a 	mov	r3,r16
 40076d8:	dfc00217 	ldw	ra,8(sp)
 40076dc:	dc400117 	ldw	r17,4(sp)
 40076e0:	dc000017 	ldw	r16,0(sp)
 40076e4:	dec00304 	addi	sp,sp,12
 40076e8:	f800283a 	ret
 40076ec:	52800044 	addi	r10,r10,1
 40076f0:	0023883a 	mov	r17,zero
 40076f4:	003fb006 	br	40075b8 <__ieee754_sqrt+0x148>
 40076f8:	01000804 	movi	r4,32
 40076fc:	01400044 	movi	r5,1
 4007700:	0007883a 	mov	r3,zero
 4007704:	003fdc06 	br	4007678 <__ieee754_sqrt+0x208>
 4007708:	200d883a 	mov	r6,r4
 400770c:	280f883a 	mov	r7,r5
 4007710:	4007b100 	call	4007b10 <__subdf3>
 4007714:	1009883a 	mov	r4,r2
 4007718:	180b883a 	mov	r5,r3
 400771c:	100d883a 	mov	r6,r2
 4007720:	180f883a 	mov	r7,r3
 4007724:	4007e540 	call	4007e54 <__divdf3>
 4007728:	1023883a 	mov	r17,r2
 400772c:	1821883a 	mov	r16,r3
 4007730:	003fa806 	br	40075d4 <__ieee754_sqrt+0x164>

04007734 <__isnand>:
 4007734:	0105c83a 	sub	r2,zero,r4
 4007738:	1108b03a 	or	r4,r2,r4
 400773c:	2004d7fa 	srli	r2,r4,31
 4007740:	00e00034 	movhi	r3,32768
 4007744:	18ffffc4 	addi	r3,r3,-1
 4007748:	28ca703a 	and	r5,r5,r3
 400774c:	1144b03a 	or	r2,r2,r5
 4007750:	00dffc34 	movhi	r3,32752
 4007754:	1885c83a 	sub	r2,r3,r2
 4007758:	1004d7fa 	srli	r2,r2,31
 400775c:	f800283a 	ret

04007760 <matherr>:
 4007760:	0005883a 	mov	r2,zero
 4007764:	f800283a 	ret

04007768 <_fpadd_parts>:
 4007768:	2005883a 	mov	r2,r4
 400776c:	21000017 	ldw	r4,0(r4)
 4007770:	01c00044 	movi	r7,1
 4007774:	3900622e 	bgeu	r7,r4,4007900 <_fpadd_parts+0x198>
 4007778:	28c00017 	ldw	r3,0(r5)
 400777c:	38c05f2e 	bgeu	r7,r3,40078fc <_fpadd_parts+0x194>
 4007780:	01c00104 	movi	r7,4
 4007784:	21c0c626 	beq	r4,r7,4007aa0 <_fpadd_parts+0x338>
 4007788:	19c05c26 	beq	r3,r7,40078fc <_fpadd_parts+0x194>
 400778c:	01c00084 	movi	r7,2
 4007790:	19c06b26 	beq	r3,r7,4007940 <_fpadd_parts+0x1d8>
 4007794:	21c05926 	beq	r4,r7,40078fc <_fpadd_parts+0x194>
 4007798:	11c00217 	ldw	r7,8(r2)
 400779c:	2ac00217 	ldw	r11,8(r5)
 40077a0:	13000317 	ldw	r12,12(r2)
 40077a4:	13400417 	ldw	r13,16(r2)
 40077a8:	3ac9c83a 	sub	r4,r7,r11
 40077ac:	2a000317 	ldw	r8,12(r5)
 40077b0:	2a400417 	ldw	r9,16(r5)
 40077b4:	2015883a 	mov	r10,r4
 40077b8:	20007516 	blt	r4,zero,4007990 <_fpadd_parts+0x228>
 40077bc:	00c00fc4 	movi	r3,63
 40077c0:	1a805016 	blt	r3,r10,4007904 <_fpadd_parts+0x19c>
 40077c4:	0100870e 	bge	zero,r4,40079e4 <_fpadd_parts+0x27c>
 40077c8:	50fff804 	addi	r3,r10,-32
 40077cc:	18009916 	blt	r3,zero,4007a34 <_fpadd_parts+0x2cc>
 40077d0:	48d6d83a 	srl	r11,r9,r3
 40077d4:	001d883a 	mov	r14,zero
 40077d8:	18009e16 	blt	r3,zero,4007a54 <_fpadd_parts+0x2ec>
 40077dc:	01000044 	movi	r4,1
 40077e0:	20c6983a 	sll	r3,r4,r3
 40077e4:	0015883a 	mov	r10,zero
 40077e8:	513fffc4 	addi	r4,r10,-1
 40077ec:	2295403a 	cmpgeu	r10,r4,r10
 40077f0:	1a87c83a 	sub	r3,r3,r10
 40077f4:	1a52703a 	and	r9,r3,r9
 40077f8:	2210703a 	and	r8,r4,r8
 40077fc:	4250b03a 	or	r8,r8,r9
 4007800:	4010c03a 	cmpne	r8,r8,zero
 4007804:	42d0b03a 	or	r8,r8,r11
 4007808:	7013883a 	mov	r9,r14
 400780c:	11000117 	ldw	r4,4(r2)
 4007810:	28800117 	ldw	r2,4(r5)
 4007814:	20804126 	beq	r4,r2,400791c <_fpadd_parts+0x1b4>
 4007818:	20006326 	beq	r4,zero,40079a8 <_fpadd_parts+0x240>
 400781c:	4305c83a 	sub	r2,r8,r12
 4007820:	4091803a 	cmpltu	r8,r8,r2
 4007824:	4b47c83a 	sub	r3,r9,r13
 4007828:	1a07c83a 	sub	r3,r3,r8
 400782c:	18006316 	blt	r3,zero,40079bc <_fpadd_parts+0x254>
 4007830:	30000115 	stw	zero,4(r6)
 4007834:	31c00215 	stw	r7,8(r6)
 4007838:	30800315 	stw	r2,12(r6)
 400783c:	30c00415 	stw	r3,16(r6)
 4007840:	11ffffc4 	addi	r7,r2,-1
 4007844:	388b403a 	cmpgeu	r5,r7,r2
 4007848:	194bc83a 	sub	r5,r3,r5
 400784c:	01040034 	movhi	r4,4096
 4007850:	213fffc4 	addi	r4,r4,-1
 4007854:	21401736 	bltu	r4,r5,40078b4 <_fpadd_parts+0x14c>
 4007858:	29008226 	beq	r5,r4,4007a64 <_fpadd_parts+0x2fc>
 400785c:	31400217 	ldw	r5,8(r6)
 4007860:	02840034 	movhi	r10,4096
 4007864:	52bfffc4 	addi	r10,r10,-1
 4007868:	033fff84 	movi	r12,-2
 400786c:	297fffc4 	addi	r5,r5,-1
 4007870:	00000106 	br	4007878 <_fpadd_parts+0x110>
 4007874:	3a804a26 	beq	r7,r10,40079a0 <_fpadd_parts+0x238>
 4007878:	1089883a 	add	r4,r2,r2
 400787c:	2091803a 	cmpltu	r8,r4,r2
 4007880:	18c7883a 	add	r3,r3,r3
 4007884:	227fffc4 	addi	r9,r4,-1
 4007888:	40d1883a 	add	r8,r8,r3
 400788c:	490f403a 	cmpgeu	r7,r9,r4
 4007890:	41cfc83a 	sub	r7,r8,r7
 4007894:	2817883a 	mov	r11,r5
 4007898:	2005883a 	mov	r2,r4
 400789c:	4007883a 	mov	r3,r8
 40078a0:	297fffc4 	addi	r5,r5,-1
 40078a4:	51fff32e 	bgeu	r10,r7,4007874 <_fpadd_parts+0x10c>
 40078a8:	31000315 	stw	r4,12(r6)
 40078ac:	32000415 	stw	r8,16(r6)
 40078b0:	32c00215 	stw	r11,8(r6)
 40078b4:	010000c4 	movi	r4,3
 40078b8:	31000015 	stw	r4,0(r6)
 40078bc:	01080034 	movhi	r4,8192
 40078c0:	213fffc4 	addi	r4,r4,-1
 40078c4:	20c00b2e 	bgeu	r4,r3,40078f4 <_fpadd_parts+0x18c>
 40078c8:	180e97fa 	slli	r7,r3,31
 40078cc:	1008d07a 	srli	r4,r2,1
 40078d0:	31400217 	ldw	r5,8(r6)
 40078d4:	1806d07a 	srli	r3,r3,1
 40078d8:	1080004c 	andi	r2,r2,1
 40078dc:	3908b03a 	or	r4,r7,r4
 40078e0:	1108b03a 	or	r4,r2,r4
 40078e4:	29400044 	addi	r5,r5,1
 40078e8:	31000315 	stw	r4,12(r6)
 40078ec:	30c00415 	stw	r3,16(r6)
 40078f0:	31400215 	stw	r5,8(r6)
 40078f4:	3005883a 	mov	r2,r6
 40078f8:	f800283a 	ret
 40078fc:	2805883a 	mov	r2,r5
 4007900:	f800283a 	ret
 4007904:	59c01e0e 	bge	r11,r7,4007980 <_fpadd_parts+0x218>
 4007908:	11000117 	ldw	r4,4(r2)
 400790c:	28800117 	ldw	r2,4(r5)
 4007910:	0011883a 	mov	r8,zero
 4007914:	0013883a 	mov	r9,zero
 4007918:	20bfbf1e 	bne	r4,r2,4007818 <_fpadd_parts+0xb0>
 400791c:	4305883a 	add	r2,r8,r12
 4007920:	1207803a 	cmpltu	r3,r2,r8
 4007924:	4b53883a 	add	r9,r9,r13
 4007928:	1a47883a 	add	r3,r3,r9
 400792c:	31000115 	stw	r4,4(r6)
 4007930:	31c00215 	stw	r7,8(r6)
 4007934:	30800315 	stw	r2,12(r6)
 4007938:	30c00415 	stw	r3,16(r6)
 400793c:	003fdd06 	br	40078b4 <_fpadd_parts+0x14c>
 4007940:	20ffef1e 	bne	r4,r3,4007900 <_fpadd_parts+0x198>
 4007944:	31000015 	stw	r4,0(r6)
 4007948:	10c00117 	ldw	r3,4(r2)
 400794c:	30c00115 	stw	r3,4(r6)
 4007950:	10c00217 	ldw	r3,8(r2)
 4007954:	11000117 	ldw	r4,4(r2)
 4007958:	29400117 	ldw	r5,4(r5)
 400795c:	30c00215 	stw	r3,8(r6)
 4007960:	10c00317 	ldw	r3,12(r2)
 4007964:	2908703a 	and	r4,r5,r4
 4007968:	30c00315 	stw	r3,12(r6)
 400796c:	10c00417 	ldw	r3,16(r2)
 4007970:	31000115 	stw	r4,4(r6)
 4007974:	3005883a 	mov	r2,r6
 4007978:	30c00415 	stw	r3,16(r6)
 400797c:	f800283a 	ret
 4007980:	580f883a 	mov	r7,r11
 4007984:	0019883a 	mov	r12,zero
 4007988:	001b883a 	mov	r13,zero
 400798c:	003f9f06 	br	400780c <_fpadd_parts+0xa4>
 4007990:	0115c83a 	sub	r10,zero,r4
 4007994:	00c00fc4 	movi	r3,63
 4007998:	1abfda16 	blt	r3,r10,4007904 <_fpadd_parts+0x19c>
 400799c:	003f8906 	br	40077c4 <_fpadd_parts+0x5c>
 40079a0:	627fb52e 	bgeu	r12,r9,4007878 <_fpadd_parts+0x110>
 40079a4:	003fc006 	br	40078a8 <_fpadd_parts+0x140>
 40079a8:	6205c83a 	sub	r2,r12,r8
 40079ac:	6099803a 	cmpltu	r12,r12,r2
 40079b0:	6a47c83a 	sub	r3,r13,r9
 40079b4:	1b07c83a 	sub	r3,r3,r12
 40079b8:	183f9d0e 	bge	r3,zero,4007830 <_fpadd_parts+0xc8>
 40079bc:	0085c83a 	sub	r2,zero,r2
 40079c0:	1008c03a 	cmpne	r4,r2,zero
 40079c4:	00c7c83a 	sub	r3,zero,r3
 40079c8:	1907c83a 	sub	r3,r3,r4
 40079cc:	01000044 	movi	r4,1
 40079d0:	31000115 	stw	r4,4(r6)
 40079d4:	31c00215 	stw	r7,8(r6)
 40079d8:	30800315 	stw	r2,12(r6)
 40079dc:	30c00415 	stw	r3,16(r6)
 40079e0:	003f9706 	br	4007840 <_fpadd_parts+0xd8>
 40079e4:	203f8926 	beq	r4,zero,400780c <_fpadd_parts+0xa4>
 40079e8:	50fff804 	addi	r3,r10,-32
 40079ec:	3a8f883a 	add	r7,r7,r10
 40079f0:	18002316 	blt	r3,zero,4007a80 <_fpadd_parts+0x318>
 40079f4:	68d6d83a 	srl	r11,r13,r3
 40079f8:	001d883a 	mov	r14,zero
 40079fc:	18001c16 	blt	r3,zero,4007a70 <_fpadd_parts+0x308>
 4007a00:	01000044 	movi	r4,1
 4007a04:	20c6983a 	sll	r3,r4,r3
 4007a08:	0015883a 	mov	r10,zero
 4007a0c:	513fffc4 	addi	r4,r10,-1
 4007a10:	2295403a 	cmpgeu	r10,r4,r10
 4007a14:	1a87c83a 	sub	r3,r3,r10
 4007a18:	1b5a703a 	and	r13,r3,r13
 4007a1c:	2318703a 	and	r12,r4,r12
 4007a20:	6358b03a 	or	r12,r12,r13
 4007a24:	6018c03a 	cmpne	r12,r12,zero
 4007a28:	62d8b03a 	or	r12,r12,r11
 4007a2c:	701b883a 	mov	r13,r14
 4007a30:	003f7606 	br	400780c <_fpadd_parts+0xa4>
 4007a34:	4808907a 	slli	r4,r9,1
 4007a38:	02c007c4 	movi	r11,31
 4007a3c:	5a97c83a 	sub	r11,r11,r10
 4007a40:	22c8983a 	sll	r4,r4,r11
 4007a44:	4296d83a 	srl	r11,r8,r10
 4007a48:	4a9cd83a 	srl	r14,r9,r10
 4007a4c:	22d6b03a 	or	r11,r4,r11
 4007a50:	003f6106 	br	40077d8 <_fpadd_parts+0x70>
 4007a54:	00c00044 	movi	r3,1
 4007a58:	1a94983a 	sll	r10,r3,r10
 4007a5c:	0007883a 	mov	r3,zero
 4007a60:	003f6106 	br	40077e8 <_fpadd_parts+0x80>
 4007a64:	013fff84 	movi	r4,-2
 4007a68:	21ff7c2e 	bgeu	r4,r7,400785c <_fpadd_parts+0xf4>
 4007a6c:	003f9106 	br	40078b4 <_fpadd_parts+0x14c>
 4007a70:	00c00044 	movi	r3,1
 4007a74:	1a94983a 	sll	r10,r3,r10
 4007a78:	0007883a 	mov	r3,zero
 4007a7c:	003fe306 	br	4007a0c <_fpadd_parts+0x2a4>
 4007a80:	6816907a 	slli	r11,r13,1
 4007a84:	010007c4 	movi	r4,31
 4007a88:	2289c83a 	sub	r4,r4,r10
 4007a8c:	5908983a 	sll	r4,r11,r4
 4007a90:	6296d83a 	srl	r11,r12,r10
 4007a94:	6a9cd83a 	srl	r14,r13,r10
 4007a98:	22d6b03a 	or	r11,r4,r11
 4007a9c:	003fd706 	br	40079fc <_fpadd_parts+0x294>
 4007aa0:	193f971e 	bne	r3,r4,4007900 <_fpadd_parts+0x198>
 4007aa4:	11000117 	ldw	r4,4(r2)
 4007aa8:	28c00117 	ldw	r3,4(r5)
 4007aac:	20ff9426 	beq	r4,r3,4007900 <_fpadd_parts+0x198>
 4007ab0:	008100f4 	movhi	r2,1027
 4007ab4:	10b61104 	addi	r2,r2,-10172
 4007ab8:	f800283a 	ret

04007abc <__adddf3>:
 4007abc:	deffec04 	addi	sp,sp,-80
 4007ac0:	d9001115 	stw	r4,68(sp)
 4007ac4:	d9401215 	stw	r5,72(sp)
 4007ac8:	d9001104 	addi	r4,sp,68
 4007acc:	d9400a04 	addi	r5,sp,40
 4007ad0:	dfc01315 	stw	ra,76(sp)
 4007ad4:	d9c01015 	stw	r7,64(sp)
 4007ad8:	d9800f15 	stw	r6,60(sp)
 4007adc:	400866c0 	call	400866c <__unpack_d>
 4007ae0:	d9000f04 	addi	r4,sp,60
 4007ae4:	d9400504 	addi	r5,sp,20
 4007ae8:	400866c0 	call	400866c <__unpack_d>
 4007aec:	d9000a04 	addi	r4,sp,40
 4007af0:	d9400504 	addi	r5,sp,20
 4007af4:	d80d883a 	mov	r6,sp
 4007af8:	40077680 	call	4007768 <_fpadd_parts>
 4007afc:	1009883a 	mov	r4,r2
 4007b00:	40084480 	call	4008448 <__pack_d>
 4007b04:	dfc01317 	ldw	ra,76(sp)
 4007b08:	dec01404 	addi	sp,sp,80
 4007b0c:	f800283a 	ret

04007b10 <__subdf3>:
 4007b10:	deffec04 	addi	sp,sp,-80
 4007b14:	d9001115 	stw	r4,68(sp)
 4007b18:	d9401215 	stw	r5,72(sp)
 4007b1c:	d9001104 	addi	r4,sp,68
 4007b20:	d9400a04 	addi	r5,sp,40
 4007b24:	dfc01315 	stw	ra,76(sp)
 4007b28:	d9c01015 	stw	r7,64(sp)
 4007b2c:	d9800f15 	stw	r6,60(sp)
 4007b30:	400866c0 	call	400866c <__unpack_d>
 4007b34:	d9000f04 	addi	r4,sp,60
 4007b38:	d9400504 	addi	r5,sp,20
 4007b3c:	400866c0 	call	400866c <__unpack_d>
 4007b40:	d8800617 	ldw	r2,24(sp)
 4007b44:	d9000a04 	addi	r4,sp,40
 4007b48:	d9400504 	addi	r5,sp,20
 4007b4c:	d80d883a 	mov	r6,sp
 4007b50:	1080005c 	xori	r2,r2,1
 4007b54:	d8800615 	stw	r2,24(sp)
 4007b58:	40077680 	call	4007768 <_fpadd_parts>
 4007b5c:	1009883a 	mov	r4,r2
 4007b60:	40084480 	call	4008448 <__pack_d>
 4007b64:	dfc01317 	ldw	ra,76(sp)
 4007b68:	dec01404 	addi	sp,sp,80
 4007b6c:	f800283a 	ret

04007b70 <__muldf3>:
 4007b70:	deffe404 	addi	sp,sp,-112
 4007b74:	d9001115 	stw	r4,68(sp)
 4007b78:	d9401215 	stw	r5,72(sp)
 4007b7c:	d9001104 	addi	r4,sp,68
 4007b80:	d9400a04 	addi	r5,sp,40
 4007b84:	dfc01b15 	stw	ra,108(sp)
 4007b88:	d9800f15 	stw	r6,60(sp)
 4007b8c:	d9c01015 	stw	r7,64(sp)
 4007b90:	ddc01a15 	stw	r23,104(sp)
 4007b94:	dd801915 	stw	r22,100(sp)
 4007b98:	dd401815 	stw	r21,96(sp)
 4007b9c:	dd001715 	stw	r20,92(sp)
 4007ba0:	dcc01615 	stw	r19,88(sp)
 4007ba4:	dc801515 	stw	r18,84(sp)
 4007ba8:	dc401415 	stw	r17,80(sp)
 4007bac:	dc001315 	stw	r16,76(sp)
 4007bb0:	400866c0 	call	400866c <__unpack_d>
 4007bb4:	d9000f04 	addi	r4,sp,60
 4007bb8:	d9400504 	addi	r5,sp,20
 4007bbc:	400866c0 	call	400866c <__unpack_d>
 4007bc0:	d8c00a17 	ldw	r3,40(sp)
 4007bc4:	00800044 	movi	r2,1
 4007bc8:	10c01136 	bltu	r2,r3,4007c10 <__muldf3+0xa0>
 4007bcc:	d8c00b17 	ldw	r3,44(sp)
 4007bd0:	d8800617 	ldw	r2,24(sp)
 4007bd4:	d9000a04 	addi	r4,sp,40
 4007bd8:	1884c03a 	cmpne	r2,r3,r2
 4007bdc:	d8800b15 	stw	r2,44(sp)
 4007be0:	40084480 	call	4008448 <__pack_d>
 4007be4:	dfc01b17 	ldw	ra,108(sp)
 4007be8:	ddc01a17 	ldw	r23,104(sp)
 4007bec:	dd801917 	ldw	r22,100(sp)
 4007bf0:	dd401817 	ldw	r21,96(sp)
 4007bf4:	dd001717 	ldw	r20,92(sp)
 4007bf8:	dcc01617 	ldw	r19,88(sp)
 4007bfc:	dc801517 	ldw	r18,84(sp)
 4007c00:	dc401417 	ldw	r17,80(sp)
 4007c04:	dc001317 	ldw	r16,76(sp)
 4007c08:	dec01c04 	addi	sp,sp,112
 4007c0c:	f800283a 	ret
 4007c10:	d9000517 	ldw	r4,20(sp)
 4007c14:	11000636 	bltu	r2,r4,4007c30 <__muldf3+0xc0>
 4007c18:	d8800617 	ldw	r2,24(sp)
 4007c1c:	d8c00b17 	ldw	r3,44(sp)
 4007c20:	d9000504 	addi	r4,sp,20
 4007c24:	1884c03a 	cmpne	r2,r3,r2
 4007c28:	d8800615 	stw	r2,24(sp)
 4007c2c:	003fec06 	br	4007be0 <__muldf3+0x70>
 4007c30:	00800104 	movi	r2,4
 4007c34:	1880051e 	bne	r3,r2,4007c4c <__muldf3+0xdc>
 4007c38:	00800084 	movi	r2,2
 4007c3c:	20bfe31e 	bne	r4,r2,4007bcc <__muldf3+0x5c>
 4007c40:	010100f4 	movhi	r4,1027
 4007c44:	21361104 	addi	r4,r4,-10172
 4007c48:	003fe506 	br	4007be0 <__muldf3+0x70>
 4007c4c:	2080031e 	bne	r4,r2,4007c5c <__muldf3+0xec>
 4007c50:	00800084 	movi	r2,2
 4007c54:	18bffa26 	beq	r3,r2,4007c40 <__muldf3+0xd0>
 4007c58:	003fef06 	br	4007c18 <__muldf3+0xa8>
 4007c5c:	00800084 	movi	r2,2
 4007c60:	18bfda26 	beq	r3,r2,4007bcc <__muldf3+0x5c>
 4007c64:	20bfec26 	beq	r4,r2,4007c18 <__muldf3+0xa8>
 4007c68:	dc000d17 	ldw	r16,52(sp)
 4007c6c:	dd000817 	ldw	r20,32(sp)
 4007c70:	dc800917 	ldw	r18,36(sp)
 4007c74:	8009883a 	mov	r4,r16
 4007c78:	000b883a 	mov	r5,zero
 4007c7c:	a00d883a 	mov	r6,r20
 4007c80:	000f883a 	mov	r7,zero
 4007c84:	400833c0 	call	400833c <__muldi3>
 4007c88:	dc400e17 	ldw	r17,56(sp)
 4007c8c:	9009883a 	mov	r4,r18
 4007c90:	800d883a 	mov	r6,r16
 4007c94:	000b883a 	mov	r5,zero
 4007c98:	000f883a 	mov	r7,zero
 4007c9c:	102f883a 	mov	r23,r2
 4007ca0:	1827883a 	mov	r19,r3
 4007ca4:	400833c0 	call	400833c <__muldi3>
 4007ca8:	900d883a 	mov	r6,r18
 4007cac:	8809883a 	mov	r4,r17
 4007cb0:	000b883a 	mov	r5,zero
 4007cb4:	000f883a 	mov	r7,zero
 4007cb8:	102b883a 	mov	r21,r2
 4007cbc:	1821883a 	mov	r16,r3
 4007cc0:	400833c0 	call	400833c <__muldi3>
 4007cc4:	8809883a 	mov	r4,r17
 4007cc8:	000b883a 	mov	r5,zero
 4007ccc:	a00d883a 	mov	r6,r20
 4007cd0:	000f883a 	mov	r7,zero
 4007cd4:	102d883a 	mov	r22,r2
 4007cd8:	1825883a 	mov	r18,r3
 4007cdc:	400833c0 	call	400833c <__muldi3>
 4007ce0:	154b883a 	add	r5,r2,r21
 4007ce4:	2889803a 	cmpltu	r4,r5,r2
 4007ce8:	1c07883a 	add	r3,r3,r16
 4007cec:	20c9883a 	add	r4,r4,r3
 4007cf0:	24004b36 	bltu	r4,r16,4007e20 <__muldf3+0x2b0>
 4007cf4:	8100011e 	bne	r16,r4,4007cfc <__muldf3+0x18c>
 4007cf8:	2d404936 	bltu	r5,r21,4007e20 <__muldf3+0x2b0>
 4007cfc:	0011883a 	mov	r8,zero
 4007d00:	0007883a 	mov	r3,zero
 4007d04:	2ccb883a 	add	r5,r5,r19
 4007d08:	b80d883a 	mov	r6,r23
 4007d0c:	2cc0012e 	bgeu	r5,r19,4007d14 <__muldf3+0x1a4>
 4007d10:	02000044 	movi	r8,1
 4007d14:	258f883a 	add	r7,r4,r22
 4007d18:	3909803a 	cmpltu	r4,r7,r4
 4007d1c:	da400c17 	ldw	r9,48(sp)
 4007d20:	2489883a 	add	r4,r4,r18
 4007d24:	d8800717 	ldw	r2,28(sp)
 4007d28:	20c9883a 	add	r4,r4,r3
 4007d2c:	da800b17 	ldw	r10,44(sp)
 4007d30:	d8c00617 	ldw	r3,24(sp)
 4007d34:	3a11883a 	add	r8,r7,r8
 4007d38:	4885883a 	add	r2,r9,r2
 4007d3c:	50c6c03a 	cmpne	r3,r10,r3
 4007d40:	41cf803a 	cmpltu	r7,r8,r7
 4007d44:	12400104 	addi	r9,r2,4
 4007d48:	d8c00115 	stw	r3,4(sp)
 4007d4c:	3909883a 	add	r4,r7,r4
 4007d50:	da400215 	stw	r9,8(sp)
 4007d54:	03480034 	movhi	r13,8192
 4007d58:	6b7fffc4 	addi	r13,r13,-1
 4007d5c:	4007883a 	mov	r3,r8
 4007d60:	6900102e 	bgeu	r13,r4,4007da4 <__muldf3+0x234>
 4007d64:	10800144 	addi	r2,r2,5
 4007d68:	180ed07a 	srli	r7,r3,1
 4007d6c:	18c0004c 	andi	r3,r3,1
 4007d70:	201097fa 	slli	r8,r4,31
 4007d74:	281697fa 	slli	r11,r5,31
 4007d78:	2008d07a 	srli	r4,r4,1
 4007d7c:	3014d07a 	srli	r10,r6,1
 4007d80:	2812d07a 	srli	r9,r5,1
 4007d84:	1019883a 	mov	r12,r2
 4007d88:	18000226 	beq	r3,zero,4007d94 <__muldf3+0x224>
 4007d8c:	5a8cb03a 	or	r6,r11,r10
 4007d90:	49600034 	orhi	r5,r9,32768
 4007d94:	41c6b03a 	or	r3,r8,r7
 4007d98:	10800044 	addi	r2,r2,1
 4007d9c:	693ff236 	bltu	r13,r4,4007d68 <__muldf3+0x1f8>
 4007da0:	db000215 	stw	r12,8(sp)
 4007da4:	03440034 	movhi	r13,4096
 4007da8:	6b7fffc4 	addi	r13,r13,-1
 4007dac:	69001336 	bltu	r13,r4,4007dfc <__muldf3+0x28c>
 4007db0:	d8800217 	ldw	r2,8(sp)
 4007db4:	10bfffc4 	addi	r2,r2,-1
 4007db8:	18d3883a 	add	r9,r3,r3
 4007dbc:	48c7803a 	cmpltu	r3,r9,r3
 4007dc0:	2109883a 	add	r4,r4,r4
 4007dc4:	190f883a 	add	r7,r3,r4
 4007dc8:	3191883a 	add	r8,r6,r6
 4007dcc:	4197803a 	cmpltu	r11,r8,r6
 4007dd0:	2955883a 	add	r10,r5,r5
 4007dd4:	1019883a 	mov	r12,r2
 4007dd8:	4807883a 	mov	r3,r9
 4007ddc:	3809883a 	mov	r4,r7
 4007de0:	2800010e 	bge	r5,zero,4007de8 <__muldf3+0x278>
 4007de4:	48c00054 	ori	r3,r9,1
 4007de8:	400d883a 	mov	r6,r8
 4007dec:	5a8b883a 	add	r5,r11,r10
 4007df0:	10bfffc4 	addi	r2,r2,-1
 4007df4:	69fff02e 	bgeu	r13,r7,4007db8 <__muldf3+0x248>
 4007df8:	db000215 	stw	r12,8(sp)
 4007dfc:	18803fcc 	andi	r2,r3,255
 4007e00:	01c02004 	movi	r7,128
 4007e04:	11c00926 	beq	r2,r7,4007e2c <__muldf3+0x2bc>
 4007e08:	008000c4 	movi	r2,3
 4007e0c:	d9000415 	stw	r4,16(sp)
 4007e10:	d8c00315 	stw	r3,12(sp)
 4007e14:	d8800015 	stw	r2,0(sp)
 4007e18:	d809883a 	mov	r4,sp
 4007e1c:	003f7006 	br	4007be0 <__muldf3+0x70>
 4007e20:	0011883a 	mov	r8,zero
 4007e24:	00c00044 	movi	r3,1
 4007e28:	003fb606 	br	4007d04 <__muldf3+0x194>
 4007e2c:	19c0400c 	andi	r7,r3,256
 4007e30:	383ff51e 	bne	r7,zero,4007e08 <__muldf3+0x298>
 4007e34:	314ab03a 	or	r5,r6,r5
 4007e38:	283ff326 	beq	r5,zero,4007e08 <__muldf3+0x298>
 4007e3c:	1885883a 	add	r2,r3,r2
 4007e40:	10cb803a 	cmpltu	r5,r2,r3
 4007e44:	00ffc004 	movi	r3,-256
 4007e48:	10c6703a 	and	r3,r2,r3
 4007e4c:	2909883a 	add	r4,r5,r4
 4007e50:	003fed06 	br	4007e08 <__muldf3+0x298>

04007e54 <__divdf3>:
 4007e54:	defff104 	addi	sp,sp,-60
 4007e58:	d9000c15 	stw	r4,48(sp)
 4007e5c:	d9400d15 	stw	r5,52(sp)
 4007e60:	d9000c04 	addi	r4,sp,48
 4007e64:	d9400504 	addi	r5,sp,20
 4007e68:	dfc00e15 	stw	ra,56(sp)
 4007e6c:	d9800a15 	stw	r6,40(sp)
 4007e70:	d9c00b15 	stw	r7,44(sp)
 4007e74:	400866c0 	call	400866c <__unpack_d>
 4007e78:	d9000a04 	addi	r4,sp,40
 4007e7c:	d80b883a 	mov	r5,sp
 4007e80:	400866c0 	call	400866c <__unpack_d>
 4007e84:	d8c00517 	ldw	r3,20(sp)
 4007e88:	00800044 	movi	r2,1
 4007e8c:	10c00536 	bltu	r2,r3,4007ea4 <__divdf3+0x50>
 4007e90:	d9000504 	addi	r4,sp,20
 4007e94:	40084480 	call	4008448 <__pack_d>
 4007e98:	dfc00e17 	ldw	ra,56(sp)
 4007e9c:	dec00f04 	addi	sp,sp,60
 4007ea0:	f800283a 	ret
 4007ea4:	d9000017 	ldw	r4,0(sp)
 4007ea8:	11000536 	bltu	r2,r4,4007ec0 <__divdf3+0x6c>
 4007eac:	d809883a 	mov	r4,sp
 4007eb0:	40084480 	call	4008448 <__pack_d>
 4007eb4:	dfc00e17 	ldw	ra,56(sp)
 4007eb8:	dec00f04 	addi	sp,sp,60
 4007ebc:	f800283a 	ret
 4007ec0:	d9800617 	ldw	r6,24(sp)
 4007ec4:	d9400117 	ldw	r5,4(sp)
 4007ec8:	00800104 	movi	r2,4
 4007ecc:	314af03a 	xor	r5,r6,r5
 4007ed0:	d9400615 	stw	r5,24(sp)
 4007ed4:	18800226 	beq	r3,r2,4007ee0 <__divdf3+0x8c>
 4007ed8:	01400084 	movi	r5,2
 4007edc:	1940041e 	bne	r3,r5,4007ef0 <__divdf3+0x9c>
 4007ee0:	193feb1e 	bne	r3,r4,4007e90 <__divdf3+0x3c>
 4007ee4:	010100f4 	movhi	r4,1027
 4007ee8:	21361104 	addi	r4,r4,-10172
 4007eec:	003fe906 	br	4007e94 <__divdf3+0x40>
 4007ef0:	20803326 	beq	r4,r2,4007fc0 <__divdf3+0x16c>
 4007ef4:	21403726 	beq	r4,r5,4007fd4 <__divdf3+0x180>
 4007ef8:	d8800217 	ldw	r2,8(sp)
 4007efc:	d9000717 	ldw	r4,28(sp)
 4007f00:	d8c00917 	ldw	r3,36(sp)
 4007f04:	da000417 	ldw	r8,16(sp)
 4007f08:	2089c83a 	sub	r4,r4,r2
 4007f0c:	d9000715 	stw	r4,28(sp)
 4007f10:	d8800817 	ldw	r2,32(sp)
 4007f14:	dbc00317 	ldw	r15,12(sp)
 4007f18:	1a000236 	bltu	r3,r8,4007f24 <__divdf3+0xd0>
 4007f1c:	40c0081e 	bne	r8,r3,4007f40 <__divdf3+0xec>
 4007f20:	13c0072e 	bgeu	r2,r15,4007f40 <__divdf3+0xec>
 4007f24:	108b883a 	add	r5,r2,r2
 4007f28:	288d803a 	cmpltu	r6,r5,r2
 4007f2c:	18c7883a 	add	r3,r3,r3
 4007f30:	213fffc4 	addi	r4,r4,-1
 4007f34:	2805883a 	mov	r2,r5
 4007f38:	30c7883a 	add	r3,r6,r3
 4007f3c:	d9000715 	stw	r4,28(sp)
 4007f40:	01400f44 	movi	r5,61
 4007f44:	000f883a 	mov	r7,zero
 4007f48:	01040034 	movhi	r4,4096
 4007f4c:	0019883a 	mov	r12,zero
 4007f50:	001b883a 	mov	r13,zero
 4007f54:	201697fa 	slli	r11,r4,31
 4007f58:	3814d07a 	srli	r10,r7,1
 4007f5c:	297fffc4 	addi	r5,r5,-1
 4007f60:	1a000936 	bltu	r3,r8,4007f88 <__divdf3+0x134>
 4007f64:	13cdc83a 	sub	r6,r2,r15
 4007f68:	1193803a 	cmpltu	r9,r2,r6
 4007f6c:	1a1dc83a 	sub	r14,r3,r8
 4007f70:	40c0011e 	bne	r8,r3,4007f78 <__divdf3+0x124>
 4007f74:	13c00436 	bltu	r2,r15,4007f88 <__divdf3+0x134>
 4007f78:	3005883a 	mov	r2,r6
 4007f7c:	7247c83a 	sub	r3,r14,r9
 4007f80:	61d8b03a 	or	r12,r12,r7
 4007f84:	691ab03a 	or	r13,r13,r4
 4007f88:	108d883a 	add	r6,r2,r2
 4007f8c:	3093803a 	cmpltu	r9,r6,r2
 4007f90:	18c7883a 	add	r3,r3,r3
 4007f94:	5a8eb03a 	or	r7,r11,r10
 4007f98:	2008d07a 	srli	r4,r4,1
 4007f9c:	3005883a 	mov	r2,r6
 4007fa0:	48c7883a 	add	r3,r9,r3
 4007fa4:	283feb1e 	bne	r5,zero,4007f54 <__divdf3+0x100>
 4007fa8:	61003fcc 	andi	r4,r12,255
 4007fac:	01402004 	movi	r5,128
 4007fb0:	21400b26 	beq	r4,r5,4007fe0 <__divdf3+0x18c>
 4007fb4:	db000815 	stw	r12,32(sp)
 4007fb8:	db400915 	stw	r13,36(sp)
 4007fbc:	003fb406 	br	4007e90 <__divdf3+0x3c>
 4007fc0:	d8000815 	stw	zero,32(sp)
 4007fc4:	d8000915 	stw	zero,36(sp)
 4007fc8:	d8000715 	stw	zero,28(sp)
 4007fcc:	d9000504 	addi	r4,sp,20
 4007fd0:	003fb006 	br	4007e94 <__divdf3+0x40>
 4007fd4:	d8800515 	stw	r2,20(sp)
 4007fd8:	d9000504 	addi	r4,sp,20
 4007fdc:	003fad06 	br	4007e94 <__divdf3+0x40>
 4007fe0:	6140400c 	andi	r5,r12,256
 4007fe4:	283ff31e 	bne	r5,zero,4007fb4 <__divdf3+0x160>
 4007fe8:	30c4b03a 	or	r2,r6,r3
 4007fec:	103ff126 	beq	r2,zero,4007fb4 <__divdf3+0x160>
 4007ff0:	6109883a 	add	r4,r12,r4
 4007ff4:	2305803a 	cmpltu	r2,r4,r12
 4007ff8:	033fc004 	movi	r12,-256
 4007ffc:	2318703a 	and	r12,r4,r12
 4008000:	135b883a 	add	r13,r2,r13
 4008004:	003feb06 	br	4007fb4 <__divdf3+0x160>

04008008 <__ltdf2>:
 4008008:	defff104 	addi	sp,sp,-60
 400800c:	d9000c15 	stw	r4,48(sp)
 4008010:	d9400d15 	stw	r5,52(sp)
 4008014:	d9000c04 	addi	r4,sp,48
 4008018:	d9400504 	addi	r5,sp,20
 400801c:	dfc00e15 	stw	ra,56(sp)
 4008020:	d9800a15 	stw	r6,40(sp)
 4008024:	d9c00b15 	stw	r7,44(sp)
 4008028:	400866c0 	call	400866c <__unpack_d>
 400802c:	d9000a04 	addi	r4,sp,40
 4008030:	d80b883a 	mov	r5,sp
 4008034:	400866c0 	call	400866c <__unpack_d>
 4008038:	d8c00517 	ldw	r3,20(sp)
 400803c:	00800044 	movi	r2,1
 4008040:	10c0052e 	bgeu	r2,r3,4008058 <__ltdf2+0x50>
 4008044:	d8c00017 	ldw	r3,0(sp)
 4008048:	10c0032e 	bgeu	r2,r3,4008058 <__ltdf2+0x50>
 400804c:	d9000504 	addi	r4,sp,20
 4008050:	d80b883a 	mov	r5,sp
 4008054:	40087700 	call	4008770 <__fpcmp_parts_d>
 4008058:	dfc00e17 	ldw	ra,56(sp)
 400805c:	dec00f04 	addi	sp,sp,60
 4008060:	f800283a 	ret

04008064 <__floatsidf>:
 4008064:	2004d7fa 	srli	r2,r4,31
 4008068:	defff904 	addi	sp,sp,-28
 400806c:	00c000c4 	movi	r3,3
 4008070:	dfc00615 	stw	ra,24(sp)
 4008074:	dc000515 	stw	r16,20(sp)
 4008078:	d8c00015 	stw	r3,0(sp)
 400807c:	d8800115 	stw	r2,4(sp)
 4008080:	2000081e 	bne	r4,zero,40080a4 <__floatsidf+0x40>
 4008084:	00800084 	movi	r2,2
 4008088:	d8800015 	stw	r2,0(sp)
 400808c:	d809883a 	mov	r4,sp
 4008090:	40084480 	call	4008448 <__pack_d>
 4008094:	dfc00617 	ldw	ra,24(sp)
 4008098:	dc000517 	ldw	r16,20(sp)
 400809c:	dec00704 	addi	sp,sp,28
 40080a0:	f800283a 	ret
 40080a4:	00c00f04 	movi	r3,60
 40080a8:	d8c00215 	stw	r3,8(sp)
 40080ac:	10000f1e 	bne	r2,zero,40080ec <__floatsidf+0x88>
 40080b0:	2021883a 	mov	r16,r4
 40080b4:	8009883a 	mov	r4,r16
 40080b8:	400839c0 	call	400839c <__clzsi2>
 40080bc:	11000744 	addi	r4,r2,29
 40080c0:	0100110e 	bge	zero,r4,4008108 <__floatsidf+0xa4>
 40080c4:	10ffff44 	addi	r3,r2,-3
 40080c8:	18001216 	blt	r3,zero,4008114 <__floatsidf+0xb0>
 40080cc:	80c6983a 	sll	r3,r16,r3
 40080d0:	0009883a 	mov	r4,zero
 40080d4:	014007c4 	movi	r5,31
 40080d8:	2885c83a 	sub	r2,r5,r2
 40080dc:	d9000315 	stw	r4,12(sp)
 40080e0:	d8c00415 	stw	r3,16(sp)
 40080e4:	d8800215 	stw	r2,8(sp)
 40080e8:	003fe806 	br	400808c <__floatsidf+0x28>
 40080ec:	00a00034 	movhi	r2,32768
 40080f0:	20800e26 	beq	r4,r2,400812c <__floatsidf+0xc8>
 40080f4:	0121c83a 	sub	r16,zero,r4
 40080f8:	8009883a 	mov	r4,r16
 40080fc:	400839c0 	call	400839c <__clzsi2>
 4008100:	11000744 	addi	r4,r2,29
 4008104:	013fef16 	blt	zero,r4,40080c4 <__floatsidf+0x60>
 4008108:	dc000315 	stw	r16,12(sp)
 400810c:	d8000415 	stw	zero,16(sp)
 4008110:	003fde06 	br	400808c <__floatsidf+0x28>
 4008114:	800ad07a 	srli	r5,r16,1
 4008118:	00c007c4 	movi	r3,31
 400811c:	1907c83a 	sub	r3,r3,r4
 4008120:	28c6d83a 	srl	r3,r5,r3
 4008124:	8108983a 	sll	r4,r16,r4
 4008128:	003fea06 	br	40080d4 <__floatsidf+0x70>
 400812c:	0005883a 	mov	r2,zero
 4008130:	00f07834 	movhi	r3,49632
 4008134:	003fd706 	br	4008094 <__floatsidf+0x30>

04008138 <__fixdfsi>:
 4008138:	defff804 	addi	sp,sp,-32
 400813c:	d9000515 	stw	r4,20(sp)
 4008140:	d9400615 	stw	r5,24(sp)
 4008144:	d9000504 	addi	r4,sp,20
 4008148:	d80b883a 	mov	r5,sp
 400814c:	dfc00715 	stw	ra,28(sp)
 4008150:	400866c0 	call	400866c <__unpack_d>
 4008154:	d8800017 	ldw	r2,0(sp)
 4008158:	00c00084 	movi	r3,2
 400815c:	10c01c26 	beq	r2,r3,40081d0 <__fixdfsi+0x98>
 4008160:	00c00044 	movi	r3,1
 4008164:	18801a2e 	bgeu	r3,r2,40081d0 <__fixdfsi+0x98>
 4008168:	00c00104 	movi	r3,4
 400816c:	10c01126 	beq	r2,r3,40081b4 <__fixdfsi+0x7c>
 4008170:	d8800217 	ldw	r2,8(sp)
 4008174:	10001616 	blt	r2,zero,40081d0 <__fixdfsi+0x98>
 4008178:	00c00784 	movi	r3,30
 400817c:	18800d16 	blt	r3,r2,40081b4 <__fixdfsi+0x7c>
 4008180:	00c00f04 	movi	r3,60
 4008184:	1885c83a 	sub	r2,r3,r2
 4008188:	10fff804 	addi	r3,r2,-32
 400818c:	d9400317 	ldw	r5,12(sp)
 4008190:	d9000417 	ldw	r4,16(sp)
 4008194:	18001616 	blt	r3,zero,40081f0 <__fixdfsi+0xb8>
 4008198:	20c4d83a 	srl	r2,r4,r3
 400819c:	d8c00117 	ldw	r3,4(sp)
 40081a0:	18000126 	beq	r3,zero,40081a8 <__fixdfsi+0x70>
 40081a4:	0085c83a 	sub	r2,zero,r2
 40081a8:	dfc00717 	ldw	ra,28(sp)
 40081ac:	dec00804 	addi	sp,sp,32
 40081b0:	f800283a 	ret
 40081b4:	d8800117 	ldw	r2,4(sp)
 40081b8:	1000091e 	bne	r2,zero,40081e0 <__fixdfsi+0xa8>
 40081bc:	00a00034 	movhi	r2,32768
 40081c0:	10bfffc4 	addi	r2,r2,-1
 40081c4:	dfc00717 	ldw	ra,28(sp)
 40081c8:	dec00804 	addi	sp,sp,32
 40081cc:	f800283a 	ret
 40081d0:	0005883a 	mov	r2,zero
 40081d4:	dfc00717 	ldw	ra,28(sp)
 40081d8:	dec00804 	addi	sp,sp,32
 40081dc:	f800283a 	ret
 40081e0:	00a00034 	movhi	r2,32768
 40081e4:	dfc00717 	ldw	ra,28(sp)
 40081e8:	dec00804 	addi	sp,sp,32
 40081ec:	f800283a 	ret
 40081f0:	2008907a 	slli	r4,r4,1
 40081f4:	018007c4 	movi	r6,31
 40081f8:	308dc83a 	sub	r6,r6,r2
 40081fc:	2188983a 	sll	r4,r4,r6
 4008200:	2884d83a 	srl	r2,r5,r2
 4008204:	2084b03a 	or	r2,r4,r2
 4008208:	003fe406 	br	400819c <__fixdfsi+0x64>

0400820c <udivmodsi4>:
 400820c:	2005883a 	mov	r2,r4
 4008210:	2900182e 	bgeu	r5,r4,4008274 <udivmodsi4+0x68>
 4008214:	28001716 	blt	r5,zero,4008274 <udivmodsi4+0x68>
 4008218:	01000804 	movi	r4,32
 400821c:	00c00044 	movi	r3,1
 4008220:	00000206 	br	400822c <udivmodsi4+0x20>
 4008224:	20001126 	beq	r4,zero,400826c <udivmodsi4+0x60>
 4008228:	28000516 	blt	r5,zero,4008240 <udivmodsi4+0x34>
 400822c:	294b883a 	add	r5,r5,r5
 4008230:	213fffc4 	addi	r4,r4,-1
 4008234:	18c7883a 	add	r3,r3,r3
 4008238:	28bffa36 	bltu	r5,r2,4008224 <udivmodsi4+0x18>
 400823c:	18000b26 	beq	r3,zero,400826c <udivmodsi4+0x60>
 4008240:	0009883a 	mov	r4,zero
 4008244:	11400236 	bltu	r2,r5,4008250 <udivmodsi4+0x44>
 4008248:	1145c83a 	sub	r2,r2,r5
 400824c:	20c8b03a 	or	r4,r4,r3
 4008250:	1806d07a 	srli	r3,r3,1
 4008254:	280ad07a 	srli	r5,r5,1
 4008258:	183ffa1e 	bne	r3,zero,4008244 <udivmodsi4+0x38>
 400825c:	3000021e 	bne	r6,zero,4008268 <udivmodsi4+0x5c>
 4008260:	2005883a 	mov	r2,r4
 4008264:	f800283a 	ret
 4008268:	f800283a 	ret
 400826c:	0009883a 	mov	r4,zero
 4008270:	003ffa06 	br	400825c <udivmodsi4+0x50>
 4008274:	00c00044 	movi	r3,1
 4008278:	0009883a 	mov	r4,zero
 400827c:	003ff106 	br	4008244 <udivmodsi4+0x38>

04008280 <__divsi3>:
 4008280:	defffe04 	addi	sp,sp,-8
 4008284:	dfc00115 	stw	ra,4(sp)
 4008288:	dc000015 	stw	r16,0(sp)
 400828c:	20000a16 	blt	r4,zero,40082b8 <__divsi3+0x38>
 4008290:	0021883a 	mov	r16,zero
 4008294:	28000b16 	blt	r5,zero,40082c4 <__divsi3+0x44>
 4008298:	000d883a 	mov	r6,zero
 400829c:	400820c0 	call	400820c <udivmodsi4>
 40082a0:	80000126 	beq	r16,zero,40082a8 <__divsi3+0x28>
 40082a4:	0085c83a 	sub	r2,zero,r2
 40082a8:	dfc00117 	ldw	ra,4(sp)
 40082ac:	dc000017 	ldw	r16,0(sp)
 40082b0:	dec00204 	addi	sp,sp,8
 40082b4:	f800283a 	ret
 40082b8:	0109c83a 	sub	r4,zero,r4
 40082bc:	04000044 	movi	r16,1
 40082c0:	283ff50e 	bge	r5,zero,4008298 <__divsi3+0x18>
 40082c4:	014bc83a 	sub	r5,zero,r5
 40082c8:	8400005c 	xori	r16,r16,1
 40082cc:	003ff206 	br	4008298 <__divsi3+0x18>

040082d0 <__modsi3>:
 40082d0:	deffff04 	addi	sp,sp,-4
 40082d4:	dfc00015 	stw	ra,0(sp)
 40082d8:	20000516 	blt	r4,zero,40082f0 <__modsi3+0x20>
 40082dc:	28000c16 	blt	r5,zero,4008310 <__modsi3+0x40>
 40082e0:	01800044 	movi	r6,1
 40082e4:	dfc00017 	ldw	ra,0(sp)
 40082e8:	dec00104 	addi	sp,sp,4
 40082ec:	400820c1 	jmpi	400820c <udivmodsi4>
 40082f0:	0109c83a 	sub	r4,zero,r4
 40082f4:	28000b16 	blt	r5,zero,4008324 <__modsi3+0x54>
 40082f8:	01800044 	movi	r6,1
 40082fc:	400820c0 	call	400820c <udivmodsi4>
 4008300:	0085c83a 	sub	r2,zero,r2
 4008304:	dfc00017 	ldw	ra,0(sp)
 4008308:	dec00104 	addi	sp,sp,4
 400830c:	f800283a 	ret
 4008310:	014bc83a 	sub	r5,zero,r5
 4008314:	01800044 	movi	r6,1
 4008318:	dfc00017 	ldw	ra,0(sp)
 400831c:	dec00104 	addi	sp,sp,4
 4008320:	400820c1 	jmpi	400820c <udivmodsi4>
 4008324:	014bc83a 	sub	r5,zero,r5
 4008328:	003ff306 	br	40082f8 <__modsi3+0x28>

0400832c <__udivsi3>:
 400832c:	000d883a 	mov	r6,zero
 4008330:	400820c1 	jmpi	400820c <udivmodsi4>

04008334 <__umodsi3>:
 4008334:	01800044 	movi	r6,1
 4008338:	400820c1 	jmpi	400820c <udivmodsi4>

0400833c <__muldi3>:
 400833c:	20bfffcc 	andi	r2,r4,65535
 4008340:	2010d43a 	srli	r8,r4,16
 4008344:	30ffffcc 	andi	r3,r6,65535
 4008348:	3014d43a 	srli	r10,r6,16
 400834c:	1893383a 	mul	r9,r3,r2
 4008350:	1a07383a 	mul	r3,r3,r8
 4008354:	5085383a 	mul	r2,r10,r2
 4008358:	4816d43a 	srli	r11,r9,16
 400835c:	5211383a 	mul	r8,r10,r8
 4008360:	1885883a 	add	r2,r3,r2
 4008364:	12c5883a 	add	r2,r2,r11
 4008368:	10c0022e 	bgeu	r2,r3,4008374 <__muldi3+0x38>
 400836c:	00c00074 	movhi	r3,1
 4008370:	40d1883a 	add	r8,r8,r3
 4008374:	1014d43a 	srli	r10,r2,16
 4008378:	21c9383a 	mul	r4,r4,r7
 400837c:	314d383a 	mul	r6,r6,r5
 4008380:	1004943a 	slli	r2,r2,16
 4008384:	4291883a 	add	r8,r8,r10
 4008388:	4a7fffcc 	andi	r9,r9,65535
 400838c:	2187883a 	add	r3,r4,r6
 4008390:	1245883a 	add	r2,r2,r9
 4008394:	1a07883a 	add	r3,r3,r8
 4008398:	f800283a 	ret

0400839c <__clzsi2>:
 400839c:	00bfffd4 	movui	r2,65535
 40083a0:	11000b36 	bltu	r2,r4,40083d0 <__clzsi2+0x34>
 40083a4:	00803fc4 	movi	r2,255
 40083a8:	11001e2e 	bgeu	r2,r4,4008424 <__clzsi2+0x88>
 40083ac:	00c00204 	movi	r3,8
 40083b0:	20c8d83a 	srl	r4,r4,r3
 40083b4:	00c100f4 	movhi	r3,1027
 40083b8:	18f61604 	addi	r3,r3,-10152
 40083bc:	00800604 	movi	r2,24
 40083c0:	1909883a 	add	r4,r3,r4
 40083c4:	20c00003 	ldbu	r3,0(r4)
 40083c8:	10c5c83a 	sub	r2,r2,r3
 40083cc:	f800283a 	ret
 40083d0:	00804034 	movhi	r2,256
 40083d4:	10bfffc4 	addi	r2,r2,-1
 40083d8:	11000936 	bltu	r2,r4,4008400 <__clzsi2+0x64>
 40083dc:	00800404 	movi	r2,16
 40083e0:	1007883a 	mov	r3,r2
 40083e4:	20c8d83a 	srl	r4,r4,r3
 40083e8:	00c100f4 	movhi	r3,1027
 40083ec:	18f61604 	addi	r3,r3,-10152
 40083f0:	1909883a 	add	r4,r3,r4
 40083f4:	20c00003 	ldbu	r3,0(r4)
 40083f8:	10c5c83a 	sub	r2,r2,r3
 40083fc:	f800283a 	ret
 4008400:	00c00604 	movi	r3,24
 4008404:	20c8d83a 	srl	r4,r4,r3
 4008408:	00c100f4 	movhi	r3,1027
 400840c:	18f61604 	addi	r3,r3,-10152
 4008410:	00800204 	movi	r2,8
 4008414:	1909883a 	add	r4,r3,r4
 4008418:	20c00003 	ldbu	r3,0(r4)
 400841c:	10c5c83a 	sub	r2,r2,r3
 4008420:	f800283a 	ret
 4008424:	0007883a 	mov	r3,zero
 4008428:	20c8d83a 	srl	r4,r4,r3
 400842c:	00c100f4 	movhi	r3,1027
 4008430:	18f61604 	addi	r3,r3,-10152
 4008434:	00800804 	movi	r2,32
 4008438:	1909883a 	add	r4,r3,r4
 400843c:	20c00003 	ldbu	r3,0(r4)
 4008440:	10c5c83a 	sub	r2,r2,r3
 4008444:	f800283a 	ret

04008448 <__pack_d>:
 4008448:	20800017 	ldw	r2,0(r4)
 400844c:	defff804 	addi	sp,sp,-32
 4008450:	dcc00315 	stw	r19,12(sp)
 4008454:	dc800215 	stw	r18,8(sp)
 4008458:	dfc00715 	stw	ra,28(sp)
 400845c:	dd800615 	stw	r22,24(sp)
 4008460:	dd400515 	stw	r21,20(sp)
 4008464:	dd000415 	stw	r20,16(sp)
 4008468:	dc400115 	stw	r17,4(sp)
 400846c:	dc000015 	stw	r16,0(sp)
 4008470:	04800044 	movi	r18,1
 4008474:	24400317 	ldw	r17,12(r4)
 4008478:	24000417 	ldw	r16,16(r4)
 400847c:	24c00117 	ldw	r19,4(r4)
 4008480:	9080422e 	bgeu	r18,r2,400858c <__pack_d+0x144>
 4008484:	00c00104 	movi	r3,4
 4008488:	10c03c26 	beq	r2,r3,400857c <__pack_d+0x134>
 400848c:	00c00084 	movi	r3,2
 4008490:	10c01926 	beq	r2,r3,40084f8 <__pack_d+0xb0>
 4008494:	8c04b03a 	or	r2,r17,r16
 4008498:	10001726 	beq	r2,zero,40084f8 <__pack_d+0xb0>
 400849c:	21000217 	ldw	r4,8(r4)
 40084a0:	00bf0084 	movi	r2,-1022
 40084a4:	20804016 	blt	r4,r2,40085a8 <__pack_d+0x160>
 40084a8:	0080ffc4 	movi	r2,1023
 40084ac:	11003316 	blt	r2,r4,400857c <__pack_d+0x134>
 40084b0:	88803fcc 	andi	r2,r17,255
 40084b4:	00c02004 	movi	r3,128
 40084b8:	10c02926 	beq	r2,r3,4008560 <__pack_d+0x118>
 40084bc:	88801fc4 	addi	r2,r17,127
 40084c0:	1463803a 	cmpltu	r17,r2,r17
 40084c4:	8c21883a 	add	r16,r17,r16
 40084c8:	1023883a 	mov	r17,r2
 40084cc:	00880034 	movhi	r2,8192
 40084d0:	10bfffc4 	addi	r2,r2,-1
 40084d4:	14001c36 	bltu	r2,r16,4008548 <__pack_d+0x100>
 40084d8:	2100ffc4 	addi	r4,r4,1023
 40084dc:	8006963a 	slli	r3,r16,24
 40084e0:	8804d23a 	srli	r2,r17,8
 40084e4:	8020913a 	slli	r16,r16,4
 40084e8:	2101ffcc 	andi	r4,r4,2047
 40084ec:	1884b03a 	or	r2,r3,r2
 40084f0:	8020d33a 	srli	r16,r16,12
 40084f4:	00000306 	br	4008504 <__pack_d+0xbc>
 40084f8:	0009883a 	mov	r4,zero
 40084fc:	0005883a 	mov	r2,zero
 4008500:	0021883a 	mov	r16,zero
 4008504:	2008953a 	slli	r4,r4,20
 4008508:	982697fa 	slli	r19,r19,31
 400850c:	00c00434 	movhi	r3,16
 4008510:	18ffffc4 	addi	r3,r3,-1
 4008514:	80e0703a 	and	r16,r16,r3
 4008518:	8106b03a 	or	r3,r16,r4
 400851c:	1cc6b03a 	or	r3,r3,r19
 4008520:	dfc00717 	ldw	ra,28(sp)
 4008524:	dd800617 	ldw	r22,24(sp)
 4008528:	dd400517 	ldw	r21,20(sp)
 400852c:	dd000417 	ldw	r20,16(sp)
 4008530:	dcc00317 	ldw	r19,12(sp)
 4008534:	dc800217 	ldw	r18,8(sp)
 4008538:	dc400117 	ldw	r17,4(sp)
 400853c:	dc000017 	ldw	r16,0(sp)
 4008540:	dec00804 	addi	sp,sp,32
 4008544:	f800283a 	ret
 4008548:	800697fa 	slli	r3,r16,31
 400854c:	8804d07a 	srli	r2,r17,1
 4008550:	21010004 	addi	r4,r4,1024
 4008554:	8020d07a 	srli	r16,r16,1
 4008558:	18a2b03a 	or	r17,r3,r2
 400855c:	003fdf06 	br	40084dc <__pack_d+0x94>
 4008560:	88c0400c 	andi	r3,r17,256
 4008564:	183fd926 	beq	r3,zero,40084cc <__pack_d+0x84>
 4008568:	8885883a 	add	r2,r17,r2
 400856c:	1463803a 	cmpltu	r17,r2,r17
 4008570:	8c21883a 	add	r16,r17,r16
 4008574:	1023883a 	mov	r17,r2
 4008578:	003fd406 	br	40084cc <__pack_d+0x84>
 400857c:	0101ffc4 	movi	r4,2047
 4008580:	0005883a 	mov	r2,zero
 4008584:	0021883a 	mov	r16,zero
 4008588:	003fde06 	br	4008504 <__pack_d+0xbc>
 400858c:	84000234 	orhi	r16,r16,8
 4008590:	00c00434 	movhi	r3,16
 4008594:	18ffffc4 	addi	r3,r3,-1
 4008598:	8805883a 	mov	r2,r17
 400859c:	80e0703a 	and	r16,r16,r3
 40085a0:	0101ffc4 	movi	r4,2047
 40085a4:	003fd706 	br	4008504 <__pack_d+0xbc>
 40085a8:	1129c83a 	sub	r20,r2,r4
 40085ac:	00800e04 	movi	r2,56
 40085b0:	15002716 	blt	r2,r20,4008650 <__pack_d+0x208>
 40085b4:	800b883a 	mov	r5,r16
 40085b8:	a00d883a 	mov	r6,r20
 40085bc:	8809883a 	mov	r4,r17
 40085c0:	40088400 	call	4008840 <__lshrdi3>
 40085c4:	9009883a 	mov	r4,r18
 40085c8:	000b883a 	mov	r5,zero
 40085cc:	a00d883a 	mov	r6,r20
 40085d0:	102d883a 	mov	r22,r2
 40085d4:	182b883a 	mov	r21,r3
 40085d8:	40088840 	call	4008884 <__ashldi3>
 40085dc:	1009003a 	cmpeq	r4,r2,zero
 40085e0:	1907c83a 	sub	r3,r3,r4
 40085e4:	10bfffc4 	addi	r2,r2,-1
 40085e8:	1c20703a 	and	r16,r3,r16
 40085ec:	1444703a 	and	r2,r2,r17
 40085f0:	1404b03a 	or	r2,r2,r16
 40085f4:	1004c03a 	cmpne	r2,r2,zero
 40085f8:	1584b03a 	or	r2,r2,r22
 40085fc:	11003fcc 	andi	r4,r2,255
 4008600:	01402004 	movi	r5,128
 4008604:	a807883a 	mov	r3,r21
 4008608:	2140131e 	bne	r4,r5,4008658 <__pack_d+0x210>
 400860c:	1140400c 	andi	r5,r2,256
 4008610:	28000426 	beq	r5,zero,4008624 <__pack_d+0x1dc>
 4008614:	1109883a 	add	r4,r2,r4
 4008618:	2085803a 	cmpltu	r2,r4,r2
 400861c:	1547883a 	add	r3,r2,r21
 4008620:	2005883a 	mov	r2,r4
 4008624:	1808963a 	slli	r4,r3,24
 4008628:	1004d23a 	srli	r2,r2,8
 400862c:	1820913a 	slli	r16,r3,4
 4008630:	01440034 	movhi	r5,4096
 4008634:	297fffc4 	addi	r5,r5,-1
 4008638:	2084b03a 	or	r2,r4,r2
 400863c:	8020d33a 	srli	r16,r16,12
 4008640:	01000044 	movi	r4,1
 4008644:	28ffaf36 	bltu	r5,r3,4008504 <__pack_d+0xbc>
 4008648:	0009883a 	mov	r4,zero
 400864c:	003fad06 	br	4008504 <__pack_d+0xbc>
 4008650:	0005883a 	mov	r2,zero
 4008654:	0007883a 	mov	r3,zero
 4008658:	11001fc4 	addi	r4,r2,127
 400865c:	2085803a 	cmpltu	r2,r4,r2
 4008660:	10c7883a 	add	r3,r2,r3
 4008664:	2005883a 	mov	r2,r4
 4008668:	003fee06 	br	4008624 <__pack_d+0x1dc>

0400866c <__unpack_d>:
 400866c:	21800117 	ldw	r6,4(r4)
 4008670:	20c00017 	ldw	r3,0(r4)
 4008674:	3004d7fa 	srli	r2,r6,31
 4008678:	3008d53a 	srli	r4,r6,20
 400867c:	28800115 	stw	r2,4(r5)
 4008680:	2101ffcc 	andi	r4,r4,2047
 4008684:	00800434 	movhi	r2,16
 4008688:	10bfffc4 	addi	r2,r2,-1
 400868c:	3084703a 	and	r2,r6,r2
 4008690:	20001a1e 	bne	r4,zero,40086fc <__unpack_d+0x90>
 4008694:	1888b03a 	or	r4,r3,r2
 4008698:	20002626 	beq	r4,zero,4008734 <__unpack_d+0xc8>
 400869c:	1808d63a 	srli	r4,r3,24
 40086a0:	1004923a 	slli	r2,r2,8
 40086a4:	01bf0084 	movi	r6,-1022
 40086a8:	29800215 	stw	r6,8(r5)
 40086ac:	2084b03a 	or	r2,r4,r2
 40086b0:	010000c4 	movi	r4,3
 40086b4:	29000015 	stw	r4,0(r5)
 40086b8:	02040034 	movhi	r8,4096
 40086bc:	423fffc4 	addi	r8,r8,-1
 40086c0:	1806923a 	slli	r3,r3,8
 40086c4:	40801836 	bltu	r8,r2,4008728 <__unpack_d+0xbc>
 40086c8:	013f0044 	movi	r4,-1023
 40086cc:	18cd883a 	add	r6,r3,r3
 40086d0:	30c7803a 	cmpltu	r3,r6,r3
 40086d4:	1085883a 	add	r2,r2,r2
 40086d8:	1885883a 	add	r2,r3,r2
 40086dc:	200f883a 	mov	r7,r4
 40086e0:	3007883a 	mov	r3,r6
 40086e4:	213fffc4 	addi	r4,r4,-1
 40086e8:	40bff82e 	bgeu	r8,r2,40086cc <__unpack_d+0x60>
 40086ec:	29c00215 	stw	r7,8(r5)
 40086f0:	28c00315 	stw	r3,12(r5)
 40086f4:	28800415 	stw	r2,16(r5)
 40086f8:	f800283a 	ret
 40086fc:	01c1ffc4 	movi	r7,2047
 4008700:	21c00f26 	beq	r4,r7,4008740 <__unpack_d+0xd4>
 4008704:	180cd63a 	srli	r6,r3,24
 4008708:	1004923a 	slli	r2,r2,8
 400870c:	213f0044 	addi	r4,r4,-1023
 4008710:	1806923a 	slli	r3,r3,8
 4008714:	3084b03a 	or	r2,r6,r2
 4008718:	29000215 	stw	r4,8(r5)
 400871c:	010000c4 	movi	r4,3
 4008720:	10840034 	orhi	r2,r2,4096
 4008724:	29000015 	stw	r4,0(r5)
 4008728:	28c00315 	stw	r3,12(r5)
 400872c:	28800415 	stw	r2,16(r5)
 4008730:	f800283a 	ret
 4008734:	00800084 	movi	r2,2
 4008738:	28800015 	stw	r2,0(r5)
 400873c:	f800283a 	ret
 4008740:	1888b03a 	or	r4,r3,r2
 4008744:	20000526 	beq	r4,zero,400875c <__unpack_d+0xf0>
 4008748:	3180022c 	andhi	r6,r6,8
 400874c:	30000626 	beq	r6,zero,4008768 <__unpack_d+0xfc>
 4008750:	01000044 	movi	r4,1
 4008754:	29000015 	stw	r4,0(r5)
 4008758:	003ff306 	br	4008728 <__unpack_d+0xbc>
 400875c:	00800104 	movi	r2,4
 4008760:	28800015 	stw	r2,0(r5)
 4008764:	f800283a 	ret
 4008768:	28000015 	stw	zero,0(r5)
 400876c:	003fee06 	br	4008728 <__unpack_d+0xbc>

04008770 <__fpcmp_parts_d>:
 4008770:	20c00017 	ldw	r3,0(r4)
 4008774:	00800044 	movi	r2,1
 4008778:	10c0142e 	bgeu	r2,r3,40087cc <__fpcmp_parts_d+0x5c>
 400877c:	29800017 	ldw	r6,0(r5)
 4008780:	1180122e 	bgeu	r2,r6,40087cc <__fpcmp_parts_d+0x5c>
 4008784:	01c00104 	movi	r7,4
 4008788:	19c02826 	beq	r3,r7,400882c <__fpcmp_parts_d+0xbc>
 400878c:	31c00926 	beq	r6,r7,40087b4 <__fpcmp_parts_d+0x44>
 4008790:	01c00084 	movi	r7,2
 4008794:	19c00626 	beq	r3,r7,40087b0 <__fpcmp_parts_d+0x40>
 4008798:	31c00a26 	beq	r6,r7,40087c4 <__fpcmp_parts_d+0x54>
 400879c:	20c00117 	ldw	r3,4(r4)
 40087a0:	29800117 	ldw	r6,4(r5)
 40087a4:	19800b26 	beq	r3,r6,40087d4 <__fpcmp_parts_d+0x64>
 40087a8:	1800041e 	bne	r3,zero,40087bc <__fpcmp_parts_d+0x4c>
 40087ac:	f800283a 	ret
 40087b0:	30c01a26 	beq	r6,r3,400881c <__fpcmp_parts_d+0xac>
 40087b4:	28800117 	ldw	r2,4(r5)
 40087b8:	1000041e 	bne	r2,zero,40087cc <__fpcmp_parts_d+0x5c>
 40087bc:	00bfffc4 	movi	r2,-1
 40087c0:	f800283a 	ret
 40087c4:	20800117 	ldw	r2,4(r4)
 40087c8:	103ffc1e 	bne	r2,zero,40087bc <__fpcmp_parts_d+0x4c>
 40087cc:	00800044 	movi	r2,1
 40087d0:	f800283a 	ret
 40087d4:	21c00217 	ldw	r7,8(r4)
 40087d8:	29800217 	ldw	r6,8(r5)
 40087dc:	31c0020e 	bge	r6,r7,40087e8 <__fpcmp_parts_d+0x78>
 40087e0:	183ff61e 	bne	r3,zero,40087bc <__fpcmp_parts_d+0x4c>
 40087e4:	f800283a 	ret
 40087e8:	39800a16 	blt	r7,r6,4008814 <__fpcmp_parts_d+0xa4>
 40087ec:	20800417 	ldw	r2,16(r4)
 40087f0:	29800417 	ldw	r6,16(r5)
 40087f4:	21c00317 	ldw	r7,12(r4)
 40087f8:	29000317 	ldw	r4,12(r5)
 40087fc:	30800936 	bltu	r6,r2,4008824 <__fpcmp_parts_d+0xb4>
 4008800:	1180011e 	bne	r2,r6,4008808 <__fpcmp_parts_d+0x98>
 4008804:	21c00736 	bltu	r4,r7,4008824 <__fpcmp_parts_d+0xb4>
 4008808:	11800236 	bltu	r2,r6,4008814 <__fpcmp_parts_d+0xa4>
 400880c:	3080031e 	bne	r6,r2,400881c <__fpcmp_parts_d+0xac>
 4008810:	3900022e 	bgeu	r7,r4,400881c <__fpcmp_parts_d+0xac>
 4008814:	183fe926 	beq	r3,zero,40087bc <__fpcmp_parts_d+0x4c>
 4008818:	003fec06 	br	40087cc <__fpcmp_parts_d+0x5c>
 400881c:	0005883a 	mov	r2,zero
 4008820:	f800283a 	ret
 4008824:	183fe926 	beq	r3,zero,40087cc <__fpcmp_parts_d+0x5c>
 4008828:	003fe406 	br	40087bc <__fpcmp_parts_d+0x4c>
 400882c:	30ffe51e 	bne	r6,r3,40087c4 <__fpcmp_parts_d+0x54>
 4008830:	28c00117 	ldw	r3,4(r5)
 4008834:	20800117 	ldw	r2,4(r4)
 4008838:	1885c83a 	sub	r2,r3,r2
 400883c:	f800283a 	ret

04008840 <__lshrdi3>:
 4008840:	2005883a 	mov	r2,r4
 4008844:	2807883a 	mov	r3,r5
 4008848:	30000826 	beq	r6,zero,400886c <__lshrdi3+0x2c>
 400884c:	01000804 	movi	r4,32
 4008850:	2189c83a 	sub	r4,r4,r6
 4008854:	0100060e 	bge	zero,r4,4008870 <__lshrdi3+0x30>
 4008858:	1184d83a 	srl	r2,r2,r6
 400885c:	2908983a 	sll	r4,r5,r4
 4008860:	298cd83a 	srl	r6,r5,r6
 4008864:	2084b03a 	or	r2,r4,r2
 4008868:	3007883a 	mov	r3,r6
 400886c:	f800283a 	ret
 4008870:	0105c83a 	sub	r2,zero,r4
 4008874:	000d883a 	mov	r6,zero
 4008878:	2884d83a 	srl	r2,r5,r2
 400887c:	3007883a 	mov	r3,r6
 4008880:	003ffa06 	br	400886c <__lshrdi3+0x2c>

04008884 <__ashldi3>:
 4008884:	2005883a 	mov	r2,r4
 4008888:	2807883a 	mov	r3,r5
 400888c:	30000826 	beq	r6,zero,40088b0 <__ashldi3+0x2c>
 4008890:	01000804 	movi	r4,32
 4008894:	2189c83a 	sub	r4,r4,r6
 4008898:	0100060e 	bge	zero,r4,40088b4 <__ashldi3+0x30>
 400889c:	1108d83a 	srl	r4,r2,r4
 40088a0:	2986983a 	sll	r3,r5,r6
 40088a4:	118c983a 	sll	r6,r2,r6
 40088a8:	20c6b03a 	or	r3,r4,r3
 40088ac:	3005883a 	mov	r2,r6
 40088b0:	f800283a 	ret
 40088b4:	0107c83a 	sub	r3,zero,r4
 40088b8:	000d883a 	mov	r6,zero
 40088bc:	10c6983a 	sll	r3,r2,r3
 40088c0:	3005883a 	mov	r2,r6
 40088c4:	003ffa06 	br	40088b0 <__ashldi3+0x2c>

040088c8 <__errno>:
 40088c8:	008100f4 	movhi	r2,1027
 40088cc:	10844f04 	addi	r2,r2,4412
 40088d0:	10800017 	ldw	r2,0(r2)
 40088d4:	f800283a 	ret

040088d8 <malloc>:
 40088d8:	008100f4 	movhi	r2,1027
 40088dc:	10844f04 	addi	r2,r2,4412
 40088e0:	200b883a 	mov	r5,r4
 40088e4:	11000017 	ldw	r4,0(r2)
 40088e8:	40089001 	jmpi	4008900 <_malloc_r>

040088ec <free>:
 40088ec:	008100f4 	movhi	r2,1027
 40088f0:	10844f04 	addi	r2,r2,4412
 40088f4:	200b883a 	mov	r5,r4
 40088f8:	11000017 	ldw	r4,0(r2)
 40088fc:	400d4a01 	jmpi	400d4a0 <_free_r>

04008900 <_malloc_r>:
 4008900:	defff604 	addi	sp,sp,-40
 4008904:	dc800215 	stw	r18,8(sp)
 4008908:	dfc00915 	stw	ra,36(sp)
 400890c:	df000815 	stw	fp,32(sp)
 4008910:	ddc00715 	stw	r23,28(sp)
 4008914:	dd800615 	stw	r22,24(sp)
 4008918:	dd400515 	stw	r21,20(sp)
 400891c:	dd000415 	stw	r20,16(sp)
 4008920:	dcc00315 	stw	r19,12(sp)
 4008924:	dc400115 	stw	r17,4(sp)
 4008928:	dc000015 	stw	r16,0(sp)
 400892c:	288002c4 	addi	r2,r5,11
 4008930:	00c00584 	movi	r3,22
 4008934:	2025883a 	mov	r18,r4
 4008938:	18802b2e 	bgeu	r3,r2,40089e8 <_malloc_r+0xe8>
 400893c:	047ffe04 	movi	r17,-8
 4008940:	1462703a 	and	r17,r2,r17
 4008944:	88002a16 	blt	r17,zero,40089f0 <_malloc_r+0xf0>
 4008948:	89402936 	bltu	r17,r5,40089f0 <_malloc_r+0xf0>
 400894c:	9009883a 	mov	r4,r18
 4008950:	40116440 	call	4011644 <__malloc_lock>
 4008954:	00807dc4 	movi	r2,503
 4008958:	14402936 	bltu	r2,r17,4008a00 <_malloc_r+0x100>
 400895c:	8808d0fa 	srli	r4,r17,3
 4008960:	04c100f4 	movhi	r19,1027
 4008964:	9cfec404 	addi	r19,r19,-1264
 4008968:	2105883a 	add	r2,r4,r4
 400896c:	1085883a 	add	r2,r2,r2
 4008970:	1085883a 	add	r2,r2,r2
 4008974:	9885883a 	add	r2,r19,r2
 4008978:	14000317 	ldw	r16,12(r2)
 400897c:	80815526 	beq	r16,r2,4008ed4 <_malloc_r+0x5d4>
 4008980:	81000117 	ldw	r4,4(r16)
 4008984:	00bfff04 	movi	r2,-4
 4008988:	80c00317 	ldw	r3,12(r16)
 400898c:	2084703a 	and	r2,r4,r2
 4008990:	8085883a 	add	r2,r16,r2
 4008994:	11800117 	ldw	r6,4(r2)
 4008998:	81400217 	ldw	r5,8(r16)
 400899c:	9009883a 	mov	r4,r18
 40089a0:	31800054 	ori	r6,r6,1
 40089a4:	11800115 	stw	r6,4(r2)
 40089a8:	28c00315 	stw	r3,12(r5)
 40089ac:	19400215 	stw	r5,8(r3)
 40089b0:	40116640 	call	4011664 <__malloc_unlock>
 40089b4:	80800204 	addi	r2,r16,8
 40089b8:	dfc00917 	ldw	ra,36(sp)
 40089bc:	df000817 	ldw	fp,32(sp)
 40089c0:	ddc00717 	ldw	r23,28(sp)
 40089c4:	dd800617 	ldw	r22,24(sp)
 40089c8:	dd400517 	ldw	r21,20(sp)
 40089cc:	dd000417 	ldw	r20,16(sp)
 40089d0:	dcc00317 	ldw	r19,12(sp)
 40089d4:	dc800217 	ldw	r18,8(sp)
 40089d8:	dc400117 	ldw	r17,4(sp)
 40089dc:	dc000017 	ldw	r16,0(sp)
 40089e0:	dec00a04 	addi	sp,sp,40
 40089e4:	f800283a 	ret
 40089e8:	04400404 	movi	r17,16
 40089ec:	897fd72e 	bgeu	r17,r5,400894c <_malloc_r+0x4c>
 40089f0:	00800304 	movi	r2,12
 40089f4:	90800015 	stw	r2,0(r18)
 40089f8:	0005883a 	mov	r2,zero
 40089fc:	003fee06 	br	40089b8 <_malloc_r+0xb8>
 4008a00:	8808d27a 	srli	r4,r17,9
 4008a04:	20007126 	beq	r4,zero,4008bcc <_malloc_r+0x2cc>
 4008a08:	00800104 	movi	r2,4
 4008a0c:	1100eb36 	bltu	r2,r4,4008dbc <_malloc_r+0x4bc>
 4008a10:	8808d1ba 	srli	r4,r17,6
 4008a14:	21000e04 	addi	r4,r4,56
 4008a18:	210b883a 	add	r5,r4,r4
 4008a1c:	294b883a 	add	r5,r5,r5
 4008a20:	294b883a 	add	r5,r5,r5
 4008a24:	04c100f4 	movhi	r19,1027
 4008a28:	9cfec404 	addi	r19,r19,-1264
 4008a2c:	994b883a 	add	r5,r19,r5
 4008a30:	2c000317 	ldw	r16,12(r5)
 4008a34:	2c000e26 	beq	r5,r16,4008a70 <_malloc_r+0x170>
 4008a38:	80c00117 	ldw	r3,4(r16)
 4008a3c:	01ffff04 	movi	r7,-4
 4008a40:	018003c4 	movi	r6,15
 4008a44:	19c6703a 	and	r3,r3,r7
 4008a48:	1c45c83a 	sub	r2,r3,r17
 4008a4c:	30800716 	blt	r6,r2,4008a6c <_malloc_r+0x16c>
 4008a50:	1000610e 	bge	r2,zero,4008bd8 <_malloc_r+0x2d8>
 4008a54:	84000317 	ldw	r16,12(r16)
 4008a58:	2c000526 	beq	r5,r16,4008a70 <_malloc_r+0x170>
 4008a5c:	80c00117 	ldw	r3,4(r16)
 4008a60:	19c6703a 	and	r3,r3,r7
 4008a64:	1c45c83a 	sub	r2,r3,r17
 4008a68:	30bff90e 	bge	r6,r2,4008a50 <_malloc_r+0x150>
 4008a6c:	213fffc4 	addi	r4,r4,-1
 4008a70:	21000044 	addi	r4,r4,1
 4008a74:	9c000417 	ldw	r16,16(r19)
 4008a78:	00c100f4 	movhi	r3,1027
 4008a7c:	18fec404 	addi	r3,r3,-1264
 4008a80:	1a400204 	addi	r9,r3,8
 4008a84:	8240ff26 	beq	r16,r9,4008e84 <_malloc_r+0x584>
 4008a88:	81400117 	ldw	r5,4(r16)
 4008a8c:	00bfff04 	movi	r2,-4
 4008a90:	018003c4 	movi	r6,15
 4008a94:	2884703a 	and	r2,r5,r2
 4008a98:	144bc83a 	sub	r5,r2,r17
 4008a9c:	3140ea16 	blt	r6,r5,4008e48 <_malloc_r+0x548>
 4008aa0:	1a400515 	stw	r9,20(r3)
 4008aa4:	1a400415 	stw	r9,16(r3)
 4008aa8:	2800570e 	bge	r5,zero,4008c08 <_malloc_r+0x308>
 4008aac:	01407fc4 	movi	r5,511
 4008ab0:	2880ca36 	bltu	r5,r2,4008ddc <_malloc_r+0x4dc>
 4008ab4:	1004d0fa 	srli	r2,r2,3
 4008ab8:	02000044 	movi	r8,1
 4008abc:	19c00117 	ldw	r7,4(r3)
 4008ac0:	108b883a 	add	r5,r2,r2
 4008ac4:	294b883a 	add	r5,r5,r5
 4008ac8:	1005d0ba 	srai	r2,r2,2
 4008acc:	294b883a 	add	r5,r5,r5
 4008ad0:	28cb883a 	add	r5,r5,r3
 4008ad4:	29800217 	ldw	r6,8(r5)
 4008ad8:	4084983a 	sll	r2,r8,r2
 4008adc:	81400315 	stw	r5,12(r16)
 4008ae0:	81800215 	stw	r6,8(r16)
 4008ae4:	11c4b03a 	or	r2,r2,r7
 4008ae8:	18800115 	stw	r2,4(r3)
 4008aec:	2c000215 	stw	r16,8(r5)
 4008af0:	34000315 	stw	r16,12(r6)
 4008af4:	200bd0ba 	srai	r5,r4,2
 4008af8:	00c00044 	movi	r3,1
 4008afc:	194a983a 	sll	r5,r3,r5
 4008b00:	11404936 	bltu	r2,r5,4008c28 <_malloc_r+0x328>
 4008b04:	1146703a 	and	r3,r2,r5
 4008b08:	18000a1e 	bne	r3,zero,4008b34 <_malloc_r+0x234>
 4008b0c:	00ffff04 	movi	r3,-4
 4008b10:	294b883a 	add	r5,r5,r5
 4008b14:	20c8703a 	and	r4,r4,r3
 4008b18:	1146703a 	and	r3,r2,r5
 4008b1c:	21000104 	addi	r4,r4,4
 4008b20:	1800041e 	bne	r3,zero,4008b34 <_malloc_r+0x234>
 4008b24:	294b883a 	add	r5,r5,r5
 4008b28:	1146703a 	and	r3,r2,r5
 4008b2c:	21000104 	addi	r4,r4,4
 4008b30:	183ffc26 	beq	r3,zero,4008b24 <_malloc_r+0x224>
 4008b34:	023fff04 	movi	r8,-4
 4008b38:	01c003c4 	movi	r7,15
 4008b3c:	2105883a 	add	r2,r4,r4
 4008b40:	1085883a 	add	r2,r2,r2
 4008b44:	1085883a 	add	r2,r2,r2
 4008b48:	9899883a 	add	r12,r19,r2
 4008b4c:	62800304 	addi	r10,r12,12
 4008b50:	2017883a 	mov	r11,r4
 4008b54:	54000017 	ldw	r16,0(r10)
 4008b58:	51bffd04 	addi	r6,r10,-12
 4008b5c:	8180041e 	bne	r16,r6,4008b70 <_malloc_r+0x270>
 4008b60:	0000ca06 	br	4008e8c <_malloc_r+0x58c>
 4008b64:	10001c0e 	bge	r2,zero,4008bd8 <_malloc_r+0x2d8>
 4008b68:	84000317 	ldw	r16,12(r16)
 4008b6c:	8180c726 	beq	r16,r6,4008e8c <_malloc_r+0x58c>
 4008b70:	80c00117 	ldw	r3,4(r16)
 4008b74:	1a06703a 	and	r3,r3,r8
 4008b78:	1c45c83a 	sub	r2,r3,r17
 4008b7c:	38bff90e 	bge	r7,r2,4008b64 <_malloc_r+0x264>
 4008b80:	81000317 	ldw	r4,12(r16)
 4008b84:	81400217 	ldw	r5,8(r16)
 4008b88:	8447883a 	add	r3,r16,r17
 4008b8c:	8c400054 	ori	r17,r17,1
 4008b90:	29000315 	stw	r4,12(r5)
 4008b94:	21400215 	stw	r5,8(r4)
 4008b98:	84400115 	stw	r17,4(r16)
 4008b9c:	1889883a 	add	r4,r3,r2
 4008ba0:	11400054 	ori	r5,r2,1
 4008ba4:	98c00515 	stw	r3,20(r19)
 4008ba8:	98c00415 	stw	r3,16(r19)
 4008bac:	20800015 	stw	r2,0(r4)
 4008bb0:	1a400315 	stw	r9,12(r3)
 4008bb4:	1a400215 	stw	r9,8(r3)
 4008bb8:	19400115 	stw	r5,4(r3)
 4008bbc:	9009883a 	mov	r4,r18
 4008bc0:	40116640 	call	4011664 <__malloc_unlock>
 4008bc4:	80800204 	addi	r2,r16,8
 4008bc8:	003f7b06 	br	40089b8 <_malloc_r+0xb8>
 4008bcc:	8808d0fa 	srli	r4,r17,3
 4008bd0:	210b883a 	add	r5,r4,r4
 4008bd4:	003f9106 	br	4008a1c <_malloc_r+0x11c>
 4008bd8:	80c7883a 	add	r3,r16,r3
 4008bdc:	19400117 	ldw	r5,4(r3)
 4008be0:	80800317 	ldw	r2,12(r16)
 4008be4:	81000217 	ldw	r4,8(r16)
 4008be8:	29400054 	ori	r5,r5,1
 4008bec:	19400115 	stw	r5,4(r3)
 4008bf0:	20800315 	stw	r2,12(r4)
 4008bf4:	11000215 	stw	r4,8(r2)
 4008bf8:	9009883a 	mov	r4,r18
 4008bfc:	40116640 	call	4011664 <__malloc_unlock>
 4008c00:	80800204 	addi	r2,r16,8
 4008c04:	003f6c06 	br	40089b8 <_malloc_r+0xb8>
 4008c08:	8085883a 	add	r2,r16,r2
 4008c0c:	10c00117 	ldw	r3,4(r2)
 4008c10:	9009883a 	mov	r4,r18
 4008c14:	18c00054 	ori	r3,r3,1
 4008c18:	10c00115 	stw	r3,4(r2)
 4008c1c:	40116640 	call	4011664 <__malloc_unlock>
 4008c20:	80800204 	addi	r2,r16,8
 4008c24:	003f6406 	br	40089b8 <_malloc_r+0xb8>
 4008c28:	9c000217 	ldw	r16,8(r19)
 4008c2c:	00bfff04 	movi	r2,-4
 4008c30:	85400117 	ldw	r21,4(r16)
 4008c34:	a8aa703a 	and	r21,r21,r2
 4008c38:	ac400336 	bltu	r21,r17,4008c48 <_malloc_r+0x348>
 4008c3c:	ac45c83a 	sub	r2,r21,r17
 4008c40:	00c003c4 	movi	r3,15
 4008c44:	18805316 	blt	r3,r2,4008d94 <_malloc_r+0x494>
 4008c48:	d5ed9917 	ldw	r23,-18844(gp)
 4008c4c:	d0e00517 	ldw	r3,-32748(gp)
 4008c50:	00bfffc4 	movi	r2,-1
 4008c54:	8579883a 	add	fp,r16,r21
 4008c58:	8def883a 	add	r23,r17,r23
 4008c5c:	1880d226 	beq	r3,r2,4008fa8 <_malloc_r+0x6a8>
 4008c60:	bdc403c4 	addi	r23,r23,4111
 4008c64:	00bc0004 	movi	r2,-4096
 4008c68:	b8ae703a 	and	r23,r23,r2
 4008c6c:	9009883a 	mov	r4,r18
 4008c70:	b80b883a 	mov	r5,r23
 4008c74:	40093580 	call	4009358 <_sbrk_r>
 4008c78:	1029883a 	mov	r20,r2
 4008c7c:	00bfffc4 	movi	r2,-1
 4008c80:	a080d126 	beq	r20,r2,4008fc8 <_malloc_r+0x6c8>
 4008c84:	a7009f36 	bltu	r20,fp,4008f04 <_malloc_r+0x604>
 4008c88:	058100f4 	movhi	r22,1027
 4008c8c:	b591ef04 	addi	r22,r22,18364
 4008c90:	b0800017 	ldw	r2,0(r22)
 4008c94:	b885883a 	add	r2,r23,r2
 4008c98:	b0800015 	stw	r2,0(r22)
 4008c9c:	e500cf26 	beq	fp,r20,4008fdc <_malloc_r+0x6dc>
 4008ca0:	d1200517 	ldw	r4,-32748(gp)
 4008ca4:	00ffffc4 	movi	r3,-1
 4008ca8:	20c0e026 	beq	r4,r3,400902c <_malloc_r+0x72c>
 4008cac:	a739c83a 	sub	fp,r20,fp
 4008cb0:	1705883a 	add	r2,r2,fp
 4008cb4:	b0800015 	stw	r2,0(r22)
 4008cb8:	a08001cc 	andi	r2,r20,7
 4008cbc:	1000a526 	beq	r2,zero,4008f54 <_malloc_r+0x654>
 4008cc0:	a0a9c83a 	sub	r20,r20,r2
 4008cc4:	00c40204 	movi	r3,4104
 4008cc8:	a5000204 	addi	r20,r20,8
 4008ccc:	1885c83a 	sub	r2,r3,r2
 4008cd0:	a5c7883a 	add	r3,r20,r23
 4008cd4:	18c3ffcc 	andi	r3,r3,4095
 4008cd8:	10efc83a 	sub	r23,r2,r3
 4008cdc:	9009883a 	mov	r4,r18
 4008ce0:	b80b883a 	mov	r5,r23
 4008ce4:	40093580 	call	4009358 <_sbrk_r>
 4008ce8:	00ffffc4 	movi	r3,-1
 4008cec:	10c0cc26 	beq	r2,r3,4009020 <_malloc_r+0x720>
 4008cf0:	1505c83a 	sub	r2,r2,r20
 4008cf4:	b887883a 	add	r3,r23,r2
 4008cf8:	18c00054 	ori	r3,r3,1
 4008cfc:	b0800017 	ldw	r2,0(r22)
 4008d00:	9d000215 	stw	r20,8(r19)
 4008d04:	a0c00115 	stw	r3,4(r20)
 4008d08:	b885883a 	add	r2,r23,r2
 4008d0c:	b0800015 	stw	r2,0(r22)
 4008d10:	84c00e26 	beq	r16,r19,4008d4c <_malloc_r+0x44c>
 4008d14:	00c003c4 	movi	r3,15
 4008d18:	1d40902e 	bgeu	r3,r21,4008f5c <_malloc_r+0x65c>
 4008d1c:	ad7ffd04 	addi	r21,r21,-12
 4008d20:	013ffe04 	movi	r4,-8
 4008d24:	a908703a 	and	r4,r21,r4
 4008d28:	810b883a 	add	r5,r16,r4
 4008d2c:	01800144 	movi	r6,5
 4008d30:	29800115 	stw	r6,4(r5)
 4008d34:	29800215 	stw	r6,8(r5)
 4008d38:	81400117 	ldw	r5,4(r16)
 4008d3c:	2940004c 	andi	r5,r5,1
 4008d40:	214ab03a 	or	r5,r4,r5
 4008d44:	81400115 	stw	r5,4(r16)
 4008d48:	1900ae36 	bltu	r3,r4,4009004 <_malloc_r+0x704>
 4008d4c:	d0ed9817 	ldw	r3,-18848(gp)
 4008d50:	1880012e 	bgeu	r3,r2,4008d58 <_malloc_r+0x458>
 4008d54:	d0ad9815 	stw	r2,-18848(gp)
 4008d58:	d0ed9717 	ldw	r3,-18852(gp)
 4008d5c:	9c000217 	ldw	r16,8(r19)
 4008d60:	1880012e 	bgeu	r3,r2,4008d68 <_malloc_r+0x468>
 4008d64:	d0ad9715 	stw	r2,-18852(gp)
 4008d68:	80c00117 	ldw	r3,4(r16)
 4008d6c:	00bfff04 	movi	r2,-4
 4008d70:	1886703a 	and	r3,r3,r2
 4008d74:	1c45c83a 	sub	r2,r3,r17
 4008d78:	1c400236 	bltu	r3,r17,4008d84 <_malloc_r+0x484>
 4008d7c:	00c003c4 	movi	r3,15
 4008d80:	18800416 	blt	r3,r2,4008d94 <_malloc_r+0x494>
 4008d84:	9009883a 	mov	r4,r18
 4008d88:	40116640 	call	4011664 <__malloc_unlock>
 4008d8c:	0005883a 	mov	r2,zero
 4008d90:	003f0906 	br	40089b8 <_malloc_r+0xb8>
 4008d94:	88c00054 	ori	r3,r17,1
 4008d98:	10800054 	ori	r2,r2,1
 4008d9c:	80c00115 	stw	r3,4(r16)
 4008da0:	8463883a 	add	r17,r16,r17
 4008da4:	88800115 	stw	r2,4(r17)
 4008da8:	9009883a 	mov	r4,r18
 4008dac:	9c400215 	stw	r17,8(r19)
 4008db0:	40116640 	call	4011664 <__malloc_unlock>
 4008db4:	80800204 	addi	r2,r16,8
 4008db8:	003eff06 	br	40089b8 <_malloc_r+0xb8>
 4008dbc:	00800504 	movi	r2,20
 4008dc0:	1100492e 	bgeu	r2,r4,4008ee8 <_malloc_r+0x5e8>
 4008dc4:	00801504 	movi	r2,84
 4008dc8:	11005c36 	bltu	r2,r4,4008f3c <_malloc_r+0x63c>
 4008dcc:	8808d33a 	srli	r4,r17,12
 4008dd0:	21001b84 	addi	r4,r4,110
 4008dd4:	210b883a 	add	r5,r4,r4
 4008dd8:	003f1006 	br	4008a1c <_malloc_r+0x11c>
 4008ddc:	1006d27a 	srli	r3,r2,9
 4008de0:	01400104 	movi	r5,4
 4008de4:	28c0432e 	bgeu	r5,r3,4008ef4 <_malloc_r+0x5f4>
 4008de8:	01400504 	movi	r5,20
 4008dec:	28c07036 	bltu	r5,r3,4008fb0 <_malloc_r+0x6b0>
 4008df0:	194016c4 	addi	r5,r3,91
 4008df4:	294d883a 	add	r6,r5,r5
 4008df8:	318d883a 	add	r6,r6,r6
 4008dfc:	318d883a 	add	r6,r6,r6
 4008e00:	998d883a 	add	r6,r19,r6
 4008e04:	30c00217 	ldw	r3,8(r6)
 4008e08:	01c100f4 	movhi	r7,1027
 4008e0c:	39fec404 	addi	r7,r7,-1264
 4008e10:	19805726 	beq	r3,r6,4008f70 <_malloc_r+0x670>
 4008e14:	01ffff04 	movi	r7,-4
 4008e18:	19400117 	ldw	r5,4(r3)
 4008e1c:	29ca703a 	and	r5,r5,r7
 4008e20:	1140022e 	bgeu	r2,r5,4008e2c <_malloc_r+0x52c>
 4008e24:	18c00217 	ldw	r3,8(r3)
 4008e28:	30fffb1e 	bne	r6,r3,4008e18 <_malloc_r+0x518>
 4008e2c:	19400317 	ldw	r5,12(r3)
 4008e30:	98800117 	ldw	r2,4(r19)
 4008e34:	81400315 	stw	r5,12(r16)
 4008e38:	80c00215 	stw	r3,8(r16)
 4008e3c:	2c000215 	stw	r16,8(r5)
 4008e40:	1c000315 	stw	r16,12(r3)
 4008e44:	003f2b06 	br	4008af4 <_malloc_r+0x1f4>
 4008e48:	8445883a 	add	r2,r16,r17
 4008e4c:	8c400054 	ori	r17,r17,1
 4008e50:	18800515 	stw	r2,20(r3)
 4008e54:	18800415 	stw	r2,16(r3)
 4008e58:	29000054 	ori	r4,r5,1
 4008e5c:	1147883a 	add	r3,r2,r5
 4008e60:	84400115 	stw	r17,4(r16)
 4008e64:	11000115 	stw	r4,4(r2)
 4008e68:	12400315 	stw	r9,12(r2)
 4008e6c:	12400215 	stw	r9,8(r2)
 4008e70:	19400015 	stw	r5,0(r3)
 4008e74:	9009883a 	mov	r4,r18
 4008e78:	40116640 	call	4011664 <__malloc_unlock>
 4008e7c:	80800204 	addi	r2,r16,8
 4008e80:	003ecd06 	br	40089b8 <_malloc_r+0xb8>
 4008e84:	18800117 	ldw	r2,4(r3)
 4008e88:	003f1a06 	br	4008af4 <_malloc_r+0x1f4>
 4008e8c:	5ac00044 	addi	r11,r11,1
 4008e90:	588000cc 	andi	r2,r11,3
 4008e94:	52800204 	addi	r10,r10,8
 4008e98:	103f2e1e 	bne	r2,zero,4008b54 <_malloc_r+0x254>
 4008e9c:	20c000cc 	andi	r3,r4,3
 4008ea0:	60bffe04 	addi	r2,r12,-8
 4008ea4:	18006f26 	beq	r3,zero,4009064 <_malloc_r+0x764>
 4008ea8:	63000017 	ldw	r12,0(r12)
 4008eac:	213fffc4 	addi	r4,r4,-1
 4008eb0:	60bffa26 	beq	r12,r2,4008e9c <_malloc_r+0x59c>
 4008eb4:	98800117 	ldw	r2,4(r19)
 4008eb8:	294b883a 	add	r5,r5,r5
 4008ebc:	117f5a36 	bltu	r2,r5,4008c28 <_malloc_r+0x328>
 4008ec0:	283f5926 	beq	r5,zero,4008c28 <_malloc_r+0x328>
 4008ec4:	1146703a 	and	r3,r2,r5
 4008ec8:	18001626 	beq	r3,zero,4008f24 <_malloc_r+0x624>
 4008ecc:	5809883a 	mov	r4,r11
 4008ed0:	003f1a06 	br	4008b3c <_malloc_r+0x23c>
 4008ed4:	80800204 	addi	r2,r16,8
 4008ed8:	84000517 	ldw	r16,20(r16)
 4008edc:	143ea81e 	bne	r2,r16,4008980 <_malloc_r+0x80>
 4008ee0:	21000084 	addi	r4,r4,2
 4008ee4:	003ee306 	br	4008a74 <_malloc_r+0x174>
 4008ee8:	210016c4 	addi	r4,r4,91
 4008eec:	210b883a 	add	r5,r4,r4
 4008ef0:	003eca06 	br	4008a1c <_malloc_r+0x11c>
 4008ef4:	100ad1ba 	srli	r5,r2,6
 4008ef8:	29400e04 	addi	r5,r5,56
 4008efc:	294d883a 	add	r6,r5,r5
 4008f00:	003fbd06 	br	4008df8 <_malloc_r+0x4f8>
 4008f04:	84ff6026 	beq	r16,r19,4008c88 <_malloc_r+0x388>
 4008f08:	008100f4 	movhi	r2,1027
 4008f0c:	10bec404 	addi	r2,r2,-1264
 4008f10:	14000217 	ldw	r16,8(r2)
 4008f14:	00bfff04 	movi	r2,-4
 4008f18:	80c00117 	ldw	r3,4(r16)
 4008f1c:	1886703a 	and	r3,r3,r2
 4008f20:	003f9406 	br	4008d74 <_malloc_r+0x474>
 4008f24:	294b883a 	add	r5,r5,r5
 4008f28:	1146703a 	and	r3,r2,r5
 4008f2c:	5ac00104 	addi	r11,r11,4
 4008f30:	183ffc26 	beq	r3,zero,4008f24 <_malloc_r+0x624>
 4008f34:	5809883a 	mov	r4,r11
 4008f38:	003f0006 	br	4008b3c <_malloc_r+0x23c>
 4008f3c:	00805504 	movi	r2,340
 4008f40:	11001336 	bltu	r2,r4,4008f90 <_malloc_r+0x690>
 4008f44:	8808d3fa 	srli	r4,r17,15
 4008f48:	21001dc4 	addi	r4,r4,119
 4008f4c:	210b883a 	add	r5,r4,r4
 4008f50:	003eb206 	br	4008a1c <_malloc_r+0x11c>
 4008f54:	00840004 	movi	r2,4096
 4008f58:	003f5d06 	br	4008cd0 <_malloc_r+0x3d0>
 4008f5c:	00800044 	movi	r2,1
 4008f60:	a0800115 	stw	r2,4(r20)
 4008f64:	a021883a 	mov	r16,r20
 4008f68:	0007883a 	mov	r3,zero
 4008f6c:	003f8106 	br	4008d74 <_malloc_r+0x474>
 4008f70:	280bd0ba 	srai	r5,r5,2
 4008f74:	01800044 	movi	r6,1
 4008f78:	38800117 	ldw	r2,4(r7)
 4008f7c:	314c983a 	sll	r6,r6,r5
 4008f80:	180b883a 	mov	r5,r3
 4008f84:	3084b03a 	or	r2,r6,r2
 4008f88:	38800115 	stw	r2,4(r7)
 4008f8c:	003fa906 	br	4008e34 <_malloc_r+0x534>
 4008f90:	00815504 	movi	r2,1364
 4008f94:	11001836 	bltu	r2,r4,4008ff8 <_malloc_r+0x6f8>
 4008f98:	8808d4ba 	srli	r4,r17,18
 4008f9c:	21001f04 	addi	r4,r4,124
 4008fa0:	210b883a 	add	r5,r4,r4
 4008fa4:	003e9d06 	br	4008a1c <_malloc_r+0x11c>
 4008fa8:	bdc00404 	addi	r23,r23,16
 4008fac:	003f2f06 	br	4008c6c <_malloc_r+0x36c>
 4008fb0:	01401504 	movi	r5,84
 4008fb4:	28c01f36 	bltu	r5,r3,4009034 <_malloc_r+0x734>
 4008fb8:	100ad33a 	srli	r5,r2,12
 4008fbc:	29401b84 	addi	r5,r5,110
 4008fc0:	294d883a 	add	r6,r5,r5
 4008fc4:	003f8c06 	br	4008df8 <_malloc_r+0x4f8>
 4008fc8:	9c000217 	ldw	r16,8(r19)
 4008fcc:	00bfff04 	movi	r2,-4
 4008fd0:	80c00117 	ldw	r3,4(r16)
 4008fd4:	1886703a 	and	r3,r3,r2
 4008fd8:	003f6606 	br	4008d74 <_malloc_r+0x474>
 4008fdc:	e0c3ffcc 	andi	r3,fp,4095
 4008fe0:	183f2f1e 	bne	r3,zero,4008ca0 <_malloc_r+0x3a0>
 4008fe4:	98c00217 	ldw	r3,8(r19)
 4008fe8:	bd49883a 	add	r4,r23,r21
 4008fec:	21000054 	ori	r4,r4,1
 4008ff0:	19000115 	stw	r4,4(r3)
 4008ff4:	003f5506 	br	4008d4c <_malloc_r+0x44c>
 4008ff8:	01403f04 	movi	r5,252
 4008ffc:	01001f84 	movi	r4,126
 4009000:	003e8606 	br	4008a1c <_malloc_r+0x11c>
 4009004:	9009883a 	mov	r4,r18
 4009008:	81400204 	addi	r5,r16,8
 400900c:	400d4a00 	call	400d4a0 <_free_r>
 4009010:	008100f4 	movhi	r2,1027
 4009014:	1091ef04 	addi	r2,r2,18364
 4009018:	10800017 	ldw	r2,0(r2)
 400901c:	003f4b06 	br	4008d4c <_malloc_r+0x44c>
 4009020:	00c00044 	movi	r3,1
 4009024:	002f883a 	mov	r23,zero
 4009028:	003f3406 	br	4008cfc <_malloc_r+0x3fc>
 400902c:	d5200515 	stw	r20,-32748(gp)
 4009030:	003f2106 	br	4008cb8 <_malloc_r+0x3b8>
 4009034:	01405504 	movi	r5,340
 4009038:	28c00436 	bltu	r5,r3,400904c <_malloc_r+0x74c>
 400903c:	100ad3fa 	srli	r5,r2,15
 4009040:	29401dc4 	addi	r5,r5,119
 4009044:	294d883a 	add	r6,r5,r5
 4009048:	003f6b06 	br	4008df8 <_malloc_r+0x4f8>
 400904c:	01415504 	movi	r5,1364
 4009050:	28c00936 	bltu	r5,r3,4009078 <_malloc_r+0x778>
 4009054:	100ad4ba 	srli	r5,r2,18
 4009058:	29401f04 	addi	r5,r5,124
 400905c:	294d883a 	add	r6,r5,r5
 4009060:	003f6506 	br	4008df8 <_malloc_r+0x4f8>
 4009064:	98800117 	ldw	r2,4(r19)
 4009068:	0146303a 	nor	r3,zero,r5
 400906c:	1884703a 	and	r2,r3,r2
 4009070:	98800115 	stw	r2,4(r19)
 4009074:	003f9006 	br	4008eb8 <_malloc_r+0x5b8>
 4009078:	01803f04 	movi	r6,252
 400907c:	01401f84 	movi	r5,126
 4009080:	003f5d06 	br	4008df8 <_malloc_r+0x4f8>

04009084 <memcpy>:
 4009084:	00c003c4 	movi	r3,15
 4009088:	2005883a 	mov	r2,r4
 400908c:	3009883a 	mov	r4,r6
 4009090:	1980032e 	bgeu	r3,r6,40090a0 <memcpy+0x1c>
 4009094:	2886b03a 	or	r3,r5,r2
 4009098:	18c000cc 	andi	r3,r3,3
 400909c:	18000926 	beq	r3,zero,40090c4 <memcpy+0x40>
 40090a0:	1007883a 	mov	r3,r2
 40090a4:	290f883a 	add	r7,r5,r4
 40090a8:	20000526 	beq	r4,zero,40090c0 <memcpy+0x3c>
 40090ac:	29800003 	ldbu	r6,0(r5)
 40090b0:	18c00044 	addi	r3,r3,1
 40090b4:	29400044 	addi	r5,r5,1
 40090b8:	19bfffc5 	stb	r6,-1(r3)
 40090bc:	29fffb1e 	bne	r5,r7,40090ac <memcpy+0x28>
 40090c0:	f800283a 	ret
 40090c4:	327ffc04 	addi	r9,r6,-16
 40090c8:	4812d13a 	srli	r9,r9,4
 40090cc:	11000404 	addi	r4,r2,16
 40090d0:	1007883a 	mov	r3,r2
 40090d4:	4810913a 	slli	r8,r9,4
 40090d8:	280f883a 	mov	r7,r5
 40090dc:	2209883a 	add	r4,r4,r8
 40090e0:	3a000017 	ldw	r8,0(r7)
 40090e4:	18c00404 	addi	r3,r3,16
 40090e8:	39c00404 	addi	r7,r7,16
 40090ec:	1a3ffc15 	stw	r8,-16(r3)
 40090f0:	3a3ffd17 	ldw	r8,-12(r7)
 40090f4:	1a3ffd15 	stw	r8,-12(r3)
 40090f8:	3a3ffe17 	ldw	r8,-8(r7)
 40090fc:	1a3ffe15 	stw	r8,-8(r3)
 4009100:	3a3fff17 	ldw	r8,-4(r7)
 4009104:	1a3fff15 	stw	r8,-4(r3)
 4009108:	193ff51e 	bne	r3,r4,40090e0 <memcpy+0x5c>
 400910c:	49c00044 	addi	r7,r9,1
 4009110:	380e913a 	slli	r7,r7,4
 4009114:	310003cc 	andi	r4,r6,15
 4009118:	018000c4 	movi	r6,3
 400911c:	11c7883a 	add	r3,r2,r7
 4009120:	29cb883a 	add	r5,r5,r7
 4009124:	313fdf2e 	bgeu	r6,r4,40090a4 <memcpy+0x20>
 4009128:	213fff04 	addi	r4,r4,-4
 400912c:	2014d0ba 	srli	r10,r4,2
 4009130:	1a400104 	addi	r9,r3,4
 4009134:	180d883a 	mov	r6,r3
 4009138:	528f883a 	add	r7,r10,r10
 400913c:	39cf883a 	add	r7,r7,r7
 4009140:	49d3883a 	add	r9,r9,r7
 4009144:	280f883a 	mov	r7,r5
 4009148:	3a000017 	ldw	r8,0(r7)
 400914c:	31800104 	addi	r6,r6,4
 4009150:	39c00104 	addi	r7,r7,4
 4009154:	323fff15 	stw	r8,-4(r6)
 4009158:	327ffb1e 	bne	r6,r9,4009148 <memcpy+0xc4>
 400915c:	51800044 	addi	r6,r10,1
 4009160:	52bfff24 	muli	r10,r10,-4
 4009164:	318d883a 	add	r6,r6,r6
 4009168:	318d883a 	add	r6,r6,r6
 400916c:	5109883a 	add	r4,r10,r4
 4009170:	298b883a 	add	r5,r5,r6
 4009174:	1987883a 	add	r3,r3,r6
 4009178:	003fca06 	br	40090a4 <memcpy+0x20>

0400917c <memset>:
 400917c:	00c000c4 	movi	r3,3
 4009180:	2005883a 	mov	r2,r4
 4009184:	29403fcc 	andi	r5,r5,255
 4009188:	19802d2e 	bgeu	r3,r6,4009240 <memset+0xc4>
 400918c:	20c6703a 	and	r3,r4,r3
 4009190:	18002e1e 	bne	r3,zero,400924c <memset+0xd0>
 4009194:	2806923a 	slli	r3,r5,8
 4009198:	010003c4 	movi	r4,15
 400919c:	3011883a 	mov	r8,r6
 40091a0:	1946b03a 	or	r3,r3,r5
 40091a4:	180e943a 	slli	r7,r3,16
 40091a8:	38ceb03a 	or	r7,r7,r3
 40091ac:	1007883a 	mov	r3,r2
 40091b0:	21800f2e 	bgeu	r4,r6,40091f0 <memset+0x74>
 40091b4:	19c00015 	stw	r7,0(r3)
 40091b8:	19c00115 	stw	r7,4(r3)
 40091bc:	19c00215 	stw	r7,8(r3)
 40091c0:	19c00315 	stw	r7,12(r3)
 40091c4:	423ffc04 	addi	r8,r8,-16
 40091c8:	18c00404 	addi	r3,r3,16
 40091cc:	223ff936 	bltu	r4,r8,40091b4 <memset+0x38>
 40091d0:	30fffc04 	addi	r3,r6,-16
 40091d4:	1806d13a 	srli	r3,r3,4
 40091d8:	318003cc 	andi	r6,r6,15
 40091dc:	010000c4 	movi	r4,3
 40091e0:	18c00044 	addi	r3,r3,1
 40091e4:	1806913a 	slli	r3,r3,4
 40091e8:	10c7883a 	add	r3,r2,r3
 40091ec:	21800e2e 	bgeu	r4,r6,4009228 <memset+0xac>
 40091f0:	1813883a 	mov	r9,r3
 40091f4:	3011883a 	mov	r8,r6
 40091f8:	010000c4 	movi	r4,3
 40091fc:	49c00015 	stw	r7,0(r9)
 4009200:	423fff04 	addi	r8,r8,-4
 4009204:	4a400104 	addi	r9,r9,4
 4009208:	223ffc36 	bltu	r4,r8,40091fc <memset+0x80>
 400920c:	313fff04 	addi	r4,r6,-4
 4009210:	2008d0ba 	srli	r4,r4,2
 4009214:	318000cc 	andi	r6,r6,3
 4009218:	21000044 	addi	r4,r4,1
 400921c:	2109883a 	add	r4,r4,r4
 4009220:	2109883a 	add	r4,r4,r4
 4009224:	1907883a 	add	r3,r3,r4
 4009228:	30000a26 	beq	r6,zero,4009254 <memset+0xd8>
 400922c:	198d883a 	add	r6,r3,r6
 4009230:	19400005 	stb	r5,0(r3)
 4009234:	18c00044 	addi	r3,r3,1
 4009238:	19bffd1e 	bne	r3,r6,4009230 <memset+0xb4>
 400923c:	f800283a 	ret
 4009240:	2007883a 	mov	r3,r4
 4009244:	303ff91e 	bne	r6,zero,400922c <memset+0xb0>
 4009248:	00000206 	br	4009254 <memset+0xd8>
 400924c:	2007883a 	mov	r3,r4
 4009250:	003ff606 	br	400922c <memset+0xb0>
 4009254:	f800283a 	ret

04009258 <_printf_r>:
 4009258:	defffd04 	addi	sp,sp,-12
 400925c:	dfc00015 	stw	ra,0(sp)
 4009260:	d9800115 	stw	r6,4(sp)
 4009264:	d9c00215 	stw	r7,8(sp)
 4009268:	280d883a 	mov	r6,r5
 400926c:	21400217 	ldw	r5,8(r4)
 4009270:	d9c00104 	addi	r7,sp,4
 4009274:	40095d40 	call	40095d4 <___vfprintf_internal_r>
 4009278:	dfc00017 	ldw	ra,0(sp)
 400927c:	dec00304 	addi	sp,sp,12
 4009280:	f800283a 	ret

04009284 <printf>:
 4009284:	defffc04 	addi	sp,sp,-16
 4009288:	dfc00015 	stw	ra,0(sp)
 400928c:	d9400115 	stw	r5,4(sp)
 4009290:	d9800215 	stw	r6,8(sp)
 4009294:	d9c00315 	stw	r7,12(sp)
 4009298:	008100f4 	movhi	r2,1027
 400929c:	10844f04 	addi	r2,r2,4412
 40092a0:	10800017 	ldw	r2,0(r2)
 40092a4:	200b883a 	mov	r5,r4
 40092a8:	d9800104 	addi	r6,sp,4
 40092ac:	11000217 	ldw	r4,8(r2)
 40092b0:	400b3cc0 	call	400b3cc <__vfprintf_internal>
 40092b4:	dfc00017 	ldw	ra,0(sp)
 40092b8:	dec00404 	addi	sp,sp,16
 40092bc:	f800283a 	ret

040092c0 <_puts_r>:
 40092c0:	defff604 	addi	sp,sp,-40
 40092c4:	dc400815 	stw	r17,32(sp)
 40092c8:	2023883a 	mov	r17,r4
 40092cc:	2809883a 	mov	r4,r5
 40092d0:	dc000715 	stw	r16,28(sp)
 40092d4:	dfc00915 	stw	ra,36(sp)
 40092d8:	2821883a 	mov	r16,r5
 40092dc:	40095140 	call	4009514 <strlen>
 40092e0:	10c00044 	addi	r3,r2,1
 40092e4:	d8800115 	stw	r2,4(sp)
 40092e8:	89400217 	ldw	r5,8(r17)
 40092ec:	008100f4 	movhi	r2,1027
 40092f0:	10b65704 	addi	r2,r2,-9892
 40092f4:	d8800215 	stw	r2,8(sp)
 40092f8:	00800044 	movi	r2,1
 40092fc:	d8800315 	stw	r2,12(sp)
 4009300:	8809883a 	mov	r4,r17
 4009304:	00800084 	movi	r2,2
 4009308:	d9800404 	addi	r6,sp,16
 400930c:	dc000015 	stw	r16,0(sp)
 4009310:	d8c00615 	stw	r3,24(sp)
 4009314:	dec00415 	stw	sp,16(sp)
 4009318:	d8800515 	stw	r2,20(sp)
 400931c:	400d7700 	call	400d770 <__sfvwrite_r>
 4009320:	1000061e 	bne	r2,zero,400933c <_puts_r+0x7c>
 4009324:	00800284 	movi	r2,10
 4009328:	dfc00917 	ldw	ra,36(sp)
 400932c:	dc400817 	ldw	r17,32(sp)
 4009330:	dc000717 	ldw	r16,28(sp)
 4009334:	dec00a04 	addi	sp,sp,40
 4009338:	f800283a 	ret
 400933c:	00bfffc4 	movi	r2,-1
 4009340:	003ff906 	br	4009328 <_puts_r+0x68>

04009344 <puts>:
 4009344:	008100f4 	movhi	r2,1027
 4009348:	10844f04 	addi	r2,r2,4412
 400934c:	200b883a 	mov	r5,r4
 4009350:	11000017 	ldw	r4,0(r2)
 4009354:	40092c01 	jmpi	40092c0 <_puts_r>

04009358 <_sbrk_r>:
 4009358:	defffd04 	addi	sp,sp,-12
 400935c:	dc400115 	stw	r17,4(sp)
 4009360:	dc000015 	stw	r16,0(sp)
 4009364:	2023883a 	mov	r17,r4
 4009368:	040100f4 	movhi	r16,1027
 400936c:	8411e504 	addi	r16,r16,18324
 4009370:	2809883a 	mov	r4,r5
 4009374:	dfc00215 	stw	ra,8(sp)
 4009378:	80000015 	stw	zero,0(r16)
 400937c:	40118240 	call	4011824 <sbrk>
 4009380:	00ffffc4 	movi	r3,-1
 4009384:	10c00526 	beq	r2,r3,400939c <_sbrk_r+0x44>
 4009388:	dfc00217 	ldw	ra,8(sp)
 400938c:	dc400117 	ldw	r17,4(sp)
 4009390:	dc000017 	ldw	r16,0(sp)
 4009394:	dec00304 	addi	sp,sp,12
 4009398:	f800283a 	ret
 400939c:	80c00017 	ldw	r3,0(r16)
 40093a0:	183ff926 	beq	r3,zero,4009388 <_sbrk_r+0x30>
 40093a4:	88c00015 	stw	r3,0(r17)
 40093a8:	dfc00217 	ldw	ra,8(sp)
 40093ac:	dc400117 	ldw	r17,4(sp)
 40093b0:	dc000017 	ldw	r16,0(sp)
 40093b4:	dec00304 	addi	sp,sp,12
 40093b8:	f800283a 	ret

040093bc <_sprintf_r>:
 40093bc:	deffe704 	addi	sp,sp,-100
 40093c0:	2807883a 	mov	r3,r5
 40093c4:	dfc01715 	stw	ra,92(sp)
 40093c8:	d9c01815 	stw	r7,96(sp)
 40093cc:	00a00034 	movhi	r2,32768
 40093d0:	10bfffc4 	addi	r2,r2,-1
 40093d4:	02008204 	movi	r8,520
 40093d8:	d8800215 	stw	r2,8(sp)
 40093dc:	d8800515 	stw	r2,20(sp)
 40093e0:	d80b883a 	mov	r5,sp
 40093e4:	d9c01804 	addi	r7,sp,96
 40093e8:	00bfffc4 	movi	r2,-1
 40093ec:	d8c00015 	stw	r3,0(sp)
 40093f0:	d8c00415 	stw	r3,16(sp)
 40093f4:	da00030d 	sth	r8,12(sp)
 40093f8:	d880038d 	sth	r2,14(sp)
 40093fc:	40095d40 	call	40095d4 <___vfprintf_internal_r>
 4009400:	d8c00017 	ldw	r3,0(sp)
 4009404:	18000005 	stb	zero,0(r3)
 4009408:	dfc01717 	ldw	ra,92(sp)
 400940c:	dec01904 	addi	sp,sp,100
 4009410:	f800283a 	ret

04009414 <sprintf>:
 4009414:	deffe604 	addi	sp,sp,-104
 4009418:	2007883a 	mov	r3,r4
 400941c:	dfc01715 	stw	ra,92(sp)
 4009420:	d9801815 	stw	r6,96(sp)
 4009424:	d9c01915 	stw	r7,100(sp)
 4009428:	008100f4 	movhi	r2,1027
 400942c:	10844f04 	addi	r2,r2,4412
 4009430:	11000017 	ldw	r4,0(r2)
 4009434:	00a00034 	movhi	r2,32768
 4009438:	10bfffc4 	addi	r2,r2,-1
 400943c:	280d883a 	mov	r6,r5
 4009440:	02008204 	movi	r8,520
 4009444:	d8800215 	stw	r2,8(sp)
 4009448:	d8800515 	stw	r2,20(sp)
 400944c:	d80b883a 	mov	r5,sp
 4009450:	d9c01804 	addi	r7,sp,96
 4009454:	00bfffc4 	movi	r2,-1
 4009458:	d8c00015 	stw	r3,0(sp)
 400945c:	d8c00415 	stw	r3,16(sp)
 4009460:	da00030d 	sth	r8,12(sp)
 4009464:	d880038d 	sth	r2,14(sp)
 4009468:	40095d40 	call	40095d4 <___vfprintf_internal_r>
 400946c:	d8c00017 	ldw	r3,0(sp)
 4009470:	18000005 	stb	zero,0(r3)
 4009474:	dfc01717 	ldw	ra,92(sp)
 4009478:	dec01a04 	addi	sp,sp,104
 400947c:	f800283a 	ret

04009480 <strcpy>:
 4009480:	2906b03a 	or	r3,r5,r4
 4009484:	18c000cc 	andi	r3,r3,3
 4009488:	2005883a 	mov	r2,r4
 400948c:	18001a1e 	bne	r3,zero,40094f8 <strcpy+0x78>
 4009490:	29800017 	ldw	r6,0(r5)
 4009494:	02bfbff4 	movhi	r10,65279
 4009498:	52bfbfc4 	addi	r10,r10,-257
 400949c:	02602074 	movhi	r9,32897
 40094a0:	4a602004 	addi	r9,r9,-32640
 40094a4:	0188303a 	nor	r4,zero,r6
 40094a8:	3287883a 	add	r3,r6,r10
 40094ac:	20c6703a 	and	r3,r4,r3
 40094b0:	1a46703a 	and	r3,r3,r9
 40094b4:	1800101e 	bne	r3,zero,40094f8 <strcpy+0x78>
 40094b8:	1007883a 	mov	r3,r2
 40094bc:	19800015 	stw	r6,0(r3)
 40094c0:	29400104 	addi	r5,r5,4
 40094c4:	29800017 	ldw	r6,0(r5)
 40094c8:	18c00104 	addi	r3,r3,4
 40094cc:	0190303a 	nor	r8,zero,r6
 40094d0:	328f883a 	add	r7,r6,r10
 40094d4:	41ce703a 	and	r7,r8,r7
 40094d8:	3a4e703a 	and	r7,r7,r9
 40094dc:	383ff726 	beq	r7,zero,40094bc <strcpy+0x3c>
 40094e0:	29800007 	ldb	r6,0(r5)
 40094e4:	18c00044 	addi	r3,r3,1
 40094e8:	29400044 	addi	r5,r5,1
 40094ec:	19bfffc5 	stb	r6,-1(r3)
 40094f0:	3000021e 	bne	r6,zero,40094fc <strcpy+0x7c>
 40094f4:	f800283a 	ret
 40094f8:	1007883a 	mov	r3,r2
 40094fc:	29800007 	ldb	r6,0(r5)
 4009500:	18c00044 	addi	r3,r3,1
 4009504:	29400044 	addi	r5,r5,1
 4009508:	19bfffc5 	stb	r6,-1(r3)
 400950c:	303ffb1e 	bne	r6,zero,40094fc <strcpy+0x7c>
 4009510:	f800283a 	ret

04009514 <strlen>:
 4009514:	208000cc 	andi	r2,r4,3
 4009518:	10001f1e 	bne	r2,zero,4009598 <strlen+0x84>
 400951c:	20800017 	ldw	r2,0(r4)
 4009520:	01ffbff4 	movhi	r7,65279
 4009524:	39ffbfc4 	addi	r7,r7,-257
 4009528:	01a02074 	movhi	r6,32897
 400952c:	31a02004 	addi	r6,r6,-32640
 4009530:	11c7883a 	add	r3,r2,r7
 4009534:	0084303a 	nor	r2,zero,r2
 4009538:	1886703a 	and	r3,r3,r2
 400953c:	1986703a 	and	r3,r3,r6
 4009540:	2005883a 	mov	r2,r4
 4009544:	1800101e 	bne	r3,zero,4009588 <strlen+0x74>
 4009548:	10800104 	addi	r2,r2,4
 400954c:	10c00017 	ldw	r3,0(r2)
 4009550:	19cb883a 	add	r5,r3,r7
 4009554:	00c6303a 	nor	r3,zero,r3
 4009558:	28c6703a 	and	r3,r5,r3
 400955c:	1986703a 	and	r3,r3,r6
 4009560:	1800091e 	bne	r3,zero,4009588 <strlen+0x74>
 4009564:	10800104 	addi	r2,r2,4
 4009568:	10c00017 	ldw	r3,0(r2)
 400956c:	19cb883a 	add	r5,r3,r7
 4009570:	00c6303a 	nor	r3,zero,r3
 4009574:	28c6703a 	and	r3,r5,r3
 4009578:	1986703a 	and	r3,r3,r6
 400957c:	183ff226 	beq	r3,zero,4009548 <strlen+0x34>
 4009580:	00000106 	br	4009588 <strlen+0x74>
 4009584:	10800044 	addi	r2,r2,1
 4009588:	10c00007 	ldb	r3,0(r2)
 400958c:	183ffd1e 	bne	r3,zero,4009584 <strlen+0x70>
 4009590:	1105c83a 	sub	r2,r2,r4
 4009594:	f800283a 	ret
 4009598:	2005883a 	mov	r2,r4
 400959c:	003ffa06 	br	4009588 <strlen+0x74>

040095a0 <__sprint_r>:
 40095a0:	30800217 	ldw	r2,8(r6)
 40095a4:	defffe04 	addi	sp,sp,-8
 40095a8:	dc000015 	stw	r16,0(sp)
 40095ac:	dfc00115 	stw	ra,4(sp)
 40095b0:	3021883a 	mov	r16,r6
 40095b4:	10000226 	beq	r2,zero,40095c0 <__sprint_r+0x20>
 40095b8:	400d7700 	call	400d770 <__sfvwrite_r>
 40095bc:	80000215 	stw	zero,8(r16)
 40095c0:	80000115 	stw	zero,4(r16)
 40095c4:	dfc00117 	ldw	ra,4(sp)
 40095c8:	dc000017 	ldw	r16,0(sp)
 40095cc:	dec00204 	addi	sp,sp,8
 40095d0:	f800283a 	ret

040095d4 <___vfprintf_internal_r>:
 40095d4:	defeb904 	addi	sp,sp,-1308
 40095d8:	dc013d15 	stw	r16,1268(sp)
 40095dc:	d9013015 	stw	r4,1216(sp)
 40095e0:	dfc14615 	stw	ra,1304(sp)
 40095e4:	df014515 	stw	fp,1300(sp)
 40095e8:	ddc14415 	stw	r23,1296(sp)
 40095ec:	dd814315 	stw	r22,1292(sp)
 40095f0:	dd414215 	stw	r21,1288(sp)
 40095f4:	dd014115 	stw	r20,1284(sp)
 40095f8:	dcc14015 	stw	r19,1280(sp)
 40095fc:	dc813f15 	stw	r18,1276(sp)
 4009600:	dc413e15 	stw	r17,1272(sp)
 4009604:	d9412915 	stw	r5,1188(sp)
 4009608:	3021883a 	mov	r16,r6
 400960c:	d9c12d15 	stw	r7,1204(sp)
 4009610:	400de5c0 	call	400de5c <_localeconv_r>
 4009614:	10800017 	ldw	r2,0(r2)
 4009618:	d9013017 	ldw	r4,1216(sp)
 400961c:	d8013315 	stw	zero,1228(sp)
 4009620:	d8813715 	stw	r2,1244(sp)
 4009624:	d8013415 	stw	zero,1232(sp)
 4009628:	20000226 	beq	r4,zero,4009634 <___vfprintf_internal_r+0x60>
 400962c:	20800e17 	ldw	r2,56(r4)
 4009630:	10019826 	beq	r2,zero,4009c94 <___vfprintf_internal_r+0x6c0>
 4009634:	da012917 	ldw	r8,1188(sp)
 4009638:	4080030b 	ldhu	r2,12(r8)
 400963c:	10c0020c 	andi	r3,r2,8
 4009640:	18ffffcc 	andi	r3,r3,65535
 4009644:	18e0001c 	xori	r3,r3,32768
 4009648:	18e00004 	addi	r3,r3,-32768
 400964c:	18013a26 	beq	r3,zero,4009b38 <___vfprintf_internal_r+0x564>
 4009650:	40c00417 	ldw	r3,16(r8)
 4009654:	18013826 	beq	r3,zero,4009b38 <___vfprintf_internal_r+0x564>
 4009658:	1100068c 	andi	r4,r2,26
 400965c:	00c00284 	movi	r3,10
 4009660:	20c13e26 	beq	r4,r3,4009b5c <___vfprintf_internal_r+0x588>
 4009664:	da010dc4 	addi	r8,sp,1079
 4009668:	d8800404 	addi	r2,sp,16
 400966c:	da012615 	stw	r8,1176(sp)
 4009670:	d8811b15 	stw	r2,1132(sp)
 4009674:	1013883a 	mov	r9,r2
 4009678:	d8812617 	ldw	r2,1176(sp)
 400967c:	da010e04 	addi	r8,sp,1080
 4009680:	dc413017 	ldw	r17,1216(sp)
 4009684:	da012715 	stw	r8,1180(sp)
 4009688:	4091c83a 	sub	r8,r8,r2
 400968c:	d8011d15 	stw	zero,1140(sp)
 4009690:	d8011c15 	stw	zero,1136(sp)
 4009694:	802b883a 	mov	r21,r16
 4009698:	d8013215 	stw	zero,1224(sp)
 400969c:	d8013615 	stw	zero,1240(sp)
 40096a0:	d8013515 	stw	zero,1236(sp)
 40096a4:	d8012c15 	stw	zero,1200(sp)
 40096a8:	da013915 	stw	r8,1252(sp)
 40096ac:	a8800007 	ldb	r2,0(r21)
 40096b0:	1002ec26 	beq	r2,zero,400a264 <___vfprintf_internal_r+0xc90>
 40096b4:	00c00944 	movi	r3,37
 40096b8:	a825883a 	mov	r18,r21
 40096bc:	10c0021e 	bne	r2,r3,40096c8 <___vfprintf_internal_r+0xf4>
 40096c0:	00001406 	br	4009714 <___vfprintf_internal_r+0x140>
 40096c4:	10c00326 	beq	r2,r3,40096d4 <___vfprintf_internal_r+0x100>
 40096c8:	94800044 	addi	r18,r18,1
 40096cc:	90800007 	ldb	r2,0(r18)
 40096d0:	103ffc1e 	bne	r2,zero,40096c4 <___vfprintf_internal_r+0xf0>
 40096d4:	9561c83a 	sub	r16,r18,r21
 40096d8:	80000e26 	beq	r16,zero,4009714 <___vfprintf_internal_r+0x140>
 40096dc:	da011d17 	ldw	r8,1140(sp)
 40096e0:	d8c11c17 	ldw	r3,1136(sp)
 40096e4:	4d400015 	stw	r21,0(r9)
 40096e8:	4c000115 	stw	r16,4(r9)
 40096ec:	4411883a 	add	r8,r8,r16
 40096f0:	18c00044 	addi	r3,r3,1
 40096f4:	da011d15 	stw	r8,1140(sp)
 40096f8:	d8c11c15 	stw	r3,1136(sp)
 40096fc:	008001c4 	movi	r2,7
 4009700:	10c15d16 	blt	r2,r3,4009c78 <___vfprintf_internal_r+0x6a4>
 4009704:	4a400204 	addi	r9,r9,8
 4009708:	d8812c17 	ldw	r2,1200(sp)
 400970c:	1405883a 	add	r2,r2,r16
 4009710:	d8812c15 	stw	r2,1200(sp)
 4009714:	90800007 	ldb	r2,0(r18)
 4009718:	10013b26 	beq	r2,zero,4009c08 <___vfprintf_internal_r+0x634>
 400971c:	95400044 	addi	r21,r18,1
 4009720:	94800047 	ldb	r18,1(r18)
 4009724:	d8012585 	stb	zero,1174(sp)
 4009728:	073fffc4 	movi	fp,-1
 400972c:	d8012e15 	stw	zero,1208(sp)
 4009730:	0021883a 	mov	r16,zero
 4009734:	00c01604 	movi	r3,88
 4009738:	01400244 	movi	r5,9
 400973c:	02800a84 	movi	r10,42
 4009740:	01c01b04 	movi	r7,108
 4009744:	01800ac4 	movi	r6,43
 4009748:	02c00804 	movi	r11,32
 400974c:	ad400044 	addi	r21,r21,1
 4009750:	90bff804 	addi	r2,r18,-32
 4009754:	1880092e 	bgeu	r3,r2,400977c <___vfprintf_internal_r+0x1a8>
 4009758:	90012b26 	beq	r18,zero,4009c08 <___vfprintf_internal_r+0x634>
 400975c:	00c00044 	movi	r3,1
 4009760:	d8c12815 	stw	r3,1184(sp)
 4009764:	dc810405 	stb	r18,1040(sp)
 4009768:	d8012585 	stb	zero,1174(sp)
 400976c:	d8c12b15 	stw	r3,1196(sp)
 4009770:	dcc10404 	addi	r19,sp,1040
 4009774:	d8013115 	stw	zero,1220(sp)
 4009778:	00008806 	br	400999c <___vfprintf_internal_r+0x3c8>
 400977c:	1085883a 	add	r2,r2,r2
 4009780:	1085883a 	add	r2,r2,r2
 4009784:	01010074 	movhi	r4,1025
 4009788:	2125e604 	addi	r4,r4,-26728
 400978c:	1105883a 	add	r2,r2,r4
 4009790:	10800017 	ldw	r2,0(r2)
 4009794:	1000683a 	jmp	r2
 4009798:	04009d4c 	andi	r16,zero,629
 400979c:	04009758 	cmpnei	r16,zero,605
 40097a0:	04009758 	cmpnei	r16,zero,605
 40097a4:	04009d60 	cmpeqi	r16,zero,629
 40097a8:	04009758 	cmpnei	r16,zero,605
 40097ac:	04009758 	cmpnei	r16,zero,605
 40097b0:	04009758 	cmpnei	r16,zero,605
 40097b4:	04009758 	cmpnei	r16,zero,605
 40097b8:	04009758 	cmpnei	r16,zero,605
 40097bc:	04009758 	cmpnei	r16,zero,605
 40097c0:	04009e48 	cmpgei	r16,zero,633
 40097c4:	04009d04 	movi	r16,628
 40097c8:	04009758 	cmpnei	r16,zero,605
 40097cc:	04009b2c 	andhi	r16,zero,620
 40097d0:	04009d10 	cmplti	r16,zero,628
 40097d4:	04009758 	cmpnei	r16,zero,605
 40097d8:	04009d6c 	andhi	r16,zero,629
 40097dc:	04009e6c 	andhi	r16,zero,633
 40097e0:	04009e6c 	andhi	r16,zero,633
 40097e4:	04009e6c 	andhi	r16,zero,633
 40097e8:	04009e6c 	andhi	r16,zero,633
 40097ec:	04009e6c 	andhi	r16,zero,633
 40097f0:	04009e6c 	andhi	r16,zero,633
 40097f4:	04009e6c 	andhi	r16,zero,633
 40097f8:	04009e6c 	andhi	r16,zero,633
 40097fc:	04009e6c 	andhi	r16,zero,633
 4009800:	04009758 	cmpnei	r16,zero,605
 4009804:	04009758 	cmpnei	r16,zero,605
 4009808:	04009758 	cmpnei	r16,zero,605
 400980c:	04009758 	cmpnei	r16,zero,605
 4009810:	04009758 	cmpnei	r16,zero,605
 4009814:	04009758 	cmpnei	r16,zero,605
 4009818:	04009758 	cmpnei	r16,zero,605
 400981c:	04009758 	cmpnei	r16,zero,605
 4009820:	04009758 	cmpnei	r16,zero,605
 4009824:	04009758 	cmpnei	r16,zero,605
 4009828:	04009ac8 	cmpgei	r16,zero,619
 400982c:	04009e94 	movui	r16,634
 4009830:	04009758 	cmpnei	r16,zero,605
 4009834:	04009e94 	movui	r16,634
 4009838:	04009758 	cmpnei	r16,zero,605
 400983c:	04009758 	cmpnei	r16,zero,605
 4009840:	04009758 	cmpnei	r16,zero,605
 4009844:	04009758 	cmpnei	r16,zero,605
 4009848:	0400a004 	movi	r16,640
 400984c:	04009758 	cmpnei	r16,zero,605
 4009850:	04009758 	cmpnei	r16,zero,605
 4009854:	04009a90 	cmplti	r16,zero,618
 4009858:	04009758 	cmpnei	r16,zero,605
 400985c:	04009758 	cmpnei	r16,zero,605
 4009860:	04009758 	cmpnei	r16,zero,605
 4009864:	04009758 	cmpnei	r16,zero,605
 4009868:	04009758 	cmpnei	r16,zero,605
 400986c:	040098fc 	xorhi	r16,zero,611
 4009870:	04009758 	cmpnei	r16,zero,605
 4009874:	04009758 	cmpnei	r16,zero,605
 4009878:	04009d78 	rdprs	r16,zero,629
 400987c:	04009758 	cmpnei	r16,zero,605
 4009880:	04009758 	cmpnei	r16,zero,605
 4009884:	04009758 	cmpnei	r16,zero,605
 4009888:	04009758 	cmpnei	r16,zero,605
 400988c:	04009758 	cmpnei	r16,zero,605
 4009890:	04009758 	cmpnei	r16,zero,605
 4009894:	04009758 	cmpnei	r16,zero,605
 4009898:	04009758 	cmpnei	r16,zero,605
 400989c:	04009758 	cmpnei	r16,zero,605
 40098a0:	04009758 	cmpnei	r16,zero,605
 40098a4:	04009dec 	andhi	r16,zero,631
 40098a8:	04009acc 	andi	r16,zero,619
 40098ac:	04009e94 	movui	r16,634
 40098b0:	04009e94 	movui	r16,634
 40098b4:	04009e94 	movui	r16,634
 40098b8:	04009dcc 	andi	r16,zero,631
 40098bc:	04009acc 	andi	r16,zero,619
 40098c0:	04009758 	cmpnei	r16,zero,605
 40098c4:	04009758 	cmpnei	r16,zero,605
 40098c8:	04009dd8 	cmpnei	r16,zero,631
 40098cc:	04009758 	cmpnei	r16,zero,605
 40098d0:	04009e1c 	xori	r16,zero,632
 40098d4:	04009a94 	movui	r16,618
 40098d8:	04009f1c 	xori	r16,zero,636
 40098dc:	04009f68 	cmpgeui	r16,zero,637
 40098e0:	04009758 	cmpnei	r16,zero,605
 40098e4:	04009f74 	movhi	r16,637
 40098e8:	04009758 	cmpnei	r16,zero,605
 40098ec:	04009900 	call	400990 <__alt_mem_sdram-0x3bff670>
 40098f0:	04009758 	cmpnei	r16,zero,605
 40098f4:	04009758 	cmpnei	r16,zero,605
 40098f8:	04009fd0 	cmplti	r16,zero,639
 40098fc:	84000414 	ori	r16,r16,16
 4009900:	8080080c 	andi	r2,r16,32
 4009904:	1000f51e 	bne	r2,zero,4009cdc <___vfprintf_internal_r+0x708>
 4009908:	8080040c 	andi	r2,r16,16
 400990c:	10042c26 	beq	r2,zero,400a9c0 <___vfprintf_internal_r+0x13ec>
 4009910:	da012d17 	ldw	r8,1204(sp)
 4009914:	002d883a 	mov	r22,zero
 4009918:	00c00044 	movi	r3,1
 400991c:	45c00017 	ldw	r23,0(r8)
 4009920:	42000104 	addi	r8,r8,4
 4009924:	da012d15 	stw	r8,1204(sp)
 4009928:	b805883a 	mov	r2,r23
 400992c:	d8012585 	stb	zero,1174(sp)
 4009930:	e0000216 	blt	fp,zero,400993c <___vfprintf_internal_r+0x368>
 4009934:	013fdfc4 	movi	r4,-129
 4009938:	8120703a 	and	r16,r16,r4
 400993c:	1002671e 	bne	r2,zero,400a2dc <___vfprintf_internal_r+0xd08>
 4009940:	e002661e 	bne	fp,zero,400a2dc <___vfprintf_internal_r+0xd08>
 4009944:	18c03fcc 	andi	r3,r3,255
 4009948:	1803561e 	bne	r3,zero,400a6a4 <___vfprintf_internal_r+0x10d0>
 400994c:	8080004c 	andi	r2,r16,1
 4009950:	10035426 	beq	r2,zero,400a6a4 <___vfprintf_internal_r+0x10d0>
 4009954:	da013917 	ldw	r8,1252(sp)
 4009958:	00800c04 	movi	r2,48
 400995c:	d8810dc5 	stb	r2,1079(sp)
 4009960:	da012b15 	stw	r8,1196(sp)
 4009964:	dcc10dc4 	addi	r19,sp,1079
 4009968:	d8812b17 	ldw	r2,1196(sp)
 400996c:	d8812815 	stw	r2,1184(sp)
 4009970:	1700010e 	bge	r2,fp,4009978 <___vfprintf_internal_r+0x3a4>
 4009974:	df012815 	stw	fp,1184(sp)
 4009978:	d8812583 	ldbu	r2,1174(sp)
 400997c:	df013115 	stw	fp,1220(sp)
 4009980:	10803fcc 	andi	r2,r2,255
 4009984:	1080201c 	xori	r2,r2,128
 4009988:	10bfe004 	addi	r2,r2,-128
 400998c:	10000326 	beq	r2,zero,400999c <___vfprintf_internal_r+0x3c8>
 4009990:	da012817 	ldw	r8,1184(sp)
 4009994:	42000044 	addi	r8,r8,1
 4009998:	da012815 	stw	r8,1184(sp)
 400999c:	80c0008c 	andi	r3,r16,2
 40099a0:	d8c12a15 	stw	r3,1192(sp)
 40099a4:	18000326 	beq	r3,zero,40099b4 <___vfprintf_internal_r+0x3e0>
 40099a8:	da012817 	ldw	r8,1184(sp)
 40099ac:	42000084 	addi	r8,r8,2
 40099b0:	da012815 	stw	r8,1184(sp)
 40099b4:	80c0210c 	andi	r3,r16,132
 40099b8:	d8c12f15 	stw	r3,1212(sp)
 40099bc:	1801941e 	bne	r3,zero,400a010 <___vfprintf_internal_r+0xa3c>
 40099c0:	da012e17 	ldw	r8,1208(sp)
 40099c4:	d8c12817 	ldw	r3,1184(sp)
 40099c8:	40edc83a 	sub	r22,r8,r3
 40099cc:	0581900e 	bge	zero,r22,400a010 <___vfprintf_internal_r+0xa3c>
 40099d0:	02800404 	movi	r10,16
 40099d4:	da011d17 	ldw	r8,1140(sp)
 40099d8:	d8c11c17 	ldw	r3,1136(sp)
 40099dc:	05c100f4 	movhi	r23,1027
 40099e0:	bdf66884 	addi	r23,r23,-9822
 40099e4:	5580200e 	bge	r10,r22,4009a68 <___vfprintf_internal_r+0x494>
 40099e8:	dc813815 	stw	r18,1248(sp)
 40099ec:	5039883a 	mov	fp,r10
 40099f0:	b825883a 	mov	r18,r23
 40099f4:	050001c4 	movi	r20,7
 40099f8:	b02f883a 	mov	r23,r22
 40099fc:	802d883a 	mov	r22,r16
 4009a00:	dc012917 	ldw	r16,1188(sp)
 4009a04:	00000306 	br	4009a14 <___vfprintf_internal_r+0x440>
 4009a08:	bdfffc04 	addi	r23,r23,-16
 4009a0c:	4a400204 	addi	r9,r9,8
 4009a10:	e5c0110e 	bge	fp,r23,4009a58 <___vfprintf_internal_r+0x484>
 4009a14:	4c800015 	stw	r18,0(r9)
 4009a18:	4f000115 	stw	fp,4(r9)
 4009a1c:	42000404 	addi	r8,r8,16
 4009a20:	18c00044 	addi	r3,r3,1
 4009a24:	da011d15 	stw	r8,1140(sp)
 4009a28:	d8c11c15 	stw	r3,1136(sp)
 4009a2c:	a0fff60e 	bge	r20,r3,4009a08 <___vfprintf_internal_r+0x434>
 4009a30:	8809883a 	mov	r4,r17
 4009a34:	800b883a 	mov	r5,r16
 4009a38:	d9811b04 	addi	r6,sp,1132
 4009a3c:	40095a00 	call	40095a0 <__sprint_r>
 4009a40:	1000771e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 4009a44:	bdfffc04 	addi	r23,r23,-16
 4009a48:	da011d17 	ldw	r8,1140(sp)
 4009a4c:	d8c11c17 	ldw	r3,1136(sp)
 4009a50:	da400404 	addi	r9,sp,16
 4009a54:	e5ffef16 	blt	fp,r23,4009a14 <___vfprintf_internal_r+0x440>
 4009a58:	b021883a 	mov	r16,r22
 4009a5c:	b82d883a 	mov	r22,r23
 4009a60:	902f883a 	mov	r23,r18
 4009a64:	dc813817 	ldw	r18,1248(sp)
 4009a68:	4dc00015 	stw	r23,0(r9)
 4009a6c:	4d800115 	stw	r22,4(r9)
 4009a70:	4591883a 	add	r8,r8,r22
 4009a74:	18c00044 	addi	r3,r3,1
 4009a78:	da011d15 	stw	r8,1140(sp)
 4009a7c:	d8c11c15 	stw	r3,1136(sp)
 4009a80:	008001c4 	movi	r2,7
 4009a84:	10c36d16 	blt	r2,r3,400a83c <___vfprintf_internal_r+0x1268>
 4009a88:	4a400204 	addi	r9,r9,8
 4009a8c:	00016206 	br	400a018 <___vfprintf_internal_r+0xa44>
 4009a90:	84000414 	ori	r16,r16,16
 4009a94:	8080080c 	andi	r2,r16,32
 4009a98:	1000801e 	bne	r2,zero,4009c9c <___vfprintf_internal_r+0x6c8>
 4009a9c:	8080040c 	andi	r2,r16,16
 4009aa0:	1003da26 	beq	r2,zero,400aa0c <___vfprintf_internal_r+0x1438>
 4009aa4:	d8c12d17 	ldw	r3,1204(sp)
 4009aa8:	002d883a 	mov	r22,zero
 4009aac:	1dc00017 	ldw	r23,0(r3)
 4009ab0:	18c00104 	addi	r3,r3,4
 4009ab4:	d8c12d15 	stw	r3,1204(sp)
 4009ab8:	b805883a 	mov	r2,r23
 4009abc:	0007883a 	mov	r3,zero
 4009ac0:	d8012585 	stb	zero,1174(sp)
 4009ac4:	003f9a06 	br	4009930 <___vfprintf_internal_r+0x35c>
 4009ac8:	84000414 	ori	r16,r16,16
 4009acc:	8080080c 	andi	r2,r16,32
 4009ad0:	10007b1e 	bne	r2,zero,4009cc0 <___vfprintf_internal_r+0x6ec>
 4009ad4:	8080040c 	andi	r2,r16,16
 4009ad8:	1003ed26 	beq	r2,zero,400aa90 <___vfprintf_internal_r+0x14bc>
 4009adc:	d9012d17 	ldw	r4,1204(sp)
 4009ae0:	25c00017 	ldw	r23,0(r4)
 4009ae4:	21000104 	addi	r4,r4,4
 4009ae8:	d9012d15 	stw	r4,1204(sp)
 4009aec:	b82dd7fa 	srai	r22,r23,31
 4009af0:	b005883a 	mov	r2,r22
 4009af4:	1003230e 	bge	r2,zero,400a784 <___vfprintf_internal_r+0x11b0>
 4009af8:	05efc83a 	sub	r23,zero,r23
 4009afc:	b804c03a 	cmpne	r2,r23,zero
 4009b00:	05adc83a 	sub	r22,zero,r22
 4009b04:	b0adc83a 	sub	r22,r22,r2
 4009b08:	00800b44 	movi	r2,45
 4009b0c:	d8812585 	stb	r2,1174(sp)
 4009b10:	00c00044 	movi	r3,1
 4009b14:	bd84b03a 	or	r2,r23,r22
 4009b18:	003f8506 	br	4009930 <___vfprintf_internal_r+0x35c>
 4009b1c:	da012e17 	ldw	r8,1208(sp)
 4009b20:	d8812d15 	stw	r2,1204(sp)
 4009b24:	0211c83a 	sub	r8,zero,r8
 4009b28:	da012e15 	stw	r8,1208(sp)
 4009b2c:	84000114 	ori	r16,r16,4
 4009b30:	ac800007 	ldb	r18,0(r21)
 4009b34:	003f0506 	br	400974c <___vfprintf_internal_r+0x178>
 4009b38:	d9013017 	ldw	r4,1216(sp)
 4009b3c:	d9412917 	ldw	r5,1188(sp)
 4009b40:	400b4dc0 	call	400b4dc <__swsetup_r>
 4009b44:	10003d1e 	bne	r2,zero,4009c3c <___vfprintf_internal_r+0x668>
 4009b48:	d8c12917 	ldw	r3,1188(sp)
 4009b4c:	1880030b 	ldhu	r2,12(r3)
 4009b50:	00c00284 	movi	r3,10
 4009b54:	1100068c 	andi	r4,r2,26
 4009b58:	20fec21e 	bne	r4,r3,4009664 <___vfprintf_internal_r+0x90>
 4009b5c:	d9012917 	ldw	r4,1188(sp)
 4009b60:	20c0038b 	ldhu	r3,14(r4)
 4009b64:	193fffcc 	andi	r4,r3,65535
 4009b68:	2120001c 	xori	r4,r4,32768
 4009b6c:	21200004 	addi	r4,r4,-32768
 4009b70:	203ebc16 	blt	r4,zero,4009664 <___vfprintf_internal_r+0x90>
 4009b74:	da012917 	ldw	r8,1188(sp)
 4009b78:	d9013017 	ldw	r4,1216(sp)
 4009b7c:	d9c12d17 	ldw	r7,1204(sp)
 4009b80:	42800717 	ldw	r10,28(r8)
 4009b84:	42400917 	ldw	r9,36(r8)
 4009b88:	10bfff4c 	andi	r2,r2,65533
 4009b8c:	02010004 	movi	r8,1024
 4009b90:	d881070d 	sth	r2,1052(sp)
 4009b94:	d9410404 	addi	r5,sp,1040
 4009b98:	d8800404 	addi	r2,sp,16
 4009b9c:	800d883a 	mov	r6,r16
 4009ba0:	d8c1078d 	sth	r3,1054(sp)
 4009ba4:	da810b15 	stw	r10,1068(sp)
 4009ba8:	da410d15 	stw	r9,1076(sp)
 4009bac:	d8810415 	stw	r2,1040(sp)
 4009bb0:	d8810815 	stw	r2,1056(sp)
 4009bb4:	da010615 	stw	r8,1048(sp)
 4009bb8:	da010915 	stw	r8,1060(sp)
 4009bbc:	d8010a15 	stw	zero,1064(sp)
 4009bc0:	40095d40 	call	40095d4 <___vfprintf_internal_r>
 4009bc4:	d8812c15 	stw	r2,1200(sp)
 4009bc8:	10000416 	blt	r2,zero,4009bdc <___vfprintf_internal_r+0x608>
 4009bcc:	d9013017 	ldw	r4,1216(sp)
 4009bd0:	d9410404 	addi	r5,sp,1040
 4009bd4:	400ce740 	call	400ce74 <_fflush_r>
 4009bd8:	1005d81e 	bne	r2,zero,400b33c <___vfprintf_internal_r+0x1d68>
 4009bdc:	d881070b 	ldhu	r2,1052(sp)
 4009be0:	1080100c 	andi	r2,r2,64
 4009be4:	10bfffcc 	andi	r2,r2,65535
 4009be8:	10a0001c 	xori	r2,r2,32768
 4009bec:	10a00004 	addi	r2,r2,-32768
 4009bf0:	10001426 	beq	r2,zero,4009c44 <___vfprintf_internal_r+0x670>
 4009bf4:	d8c12917 	ldw	r3,1188(sp)
 4009bf8:	1880030b 	ldhu	r2,12(r3)
 4009bfc:	10801014 	ori	r2,r2,64
 4009c00:	1880030d 	sth	r2,12(r3)
 4009c04:	00000f06 	br	4009c44 <___vfprintf_internal_r+0x670>
 4009c08:	d8811d17 	ldw	r2,1140(sp)
 4009c0c:	10000426 	beq	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 4009c10:	d9013017 	ldw	r4,1216(sp)
 4009c14:	d9412917 	ldw	r5,1188(sp)
 4009c18:	d9811b04 	addi	r6,sp,1132
 4009c1c:	40095a00 	call	40095a0 <__sprint_r>
 4009c20:	d8c12917 	ldw	r3,1188(sp)
 4009c24:	1880030b 	ldhu	r2,12(r3)
 4009c28:	1080100c 	andi	r2,r2,64
 4009c2c:	10bfffcc 	andi	r2,r2,65535
 4009c30:	10a0001c 	xori	r2,r2,32768
 4009c34:	10a00004 	addi	r2,r2,-32768
 4009c38:	10000226 	beq	r2,zero,4009c44 <___vfprintf_internal_r+0x670>
 4009c3c:	00bfffc4 	movi	r2,-1
 4009c40:	d8812c15 	stw	r2,1200(sp)
 4009c44:	d8812c17 	ldw	r2,1200(sp)
 4009c48:	dfc14617 	ldw	ra,1304(sp)
 4009c4c:	df014517 	ldw	fp,1300(sp)
 4009c50:	ddc14417 	ldw	r23,1296(sp)
 4009c54:	dd814317 	ldw	r22,1292(sp)
 4009c58:	dd414217 	ldw	r21,1288(sp)
 4009c5c:	dd014117 	ldw	r20,1284(sp)
 4009c60:	dcc14017 	ldw	r19,1280(sp)
 4009c64:	dc813f17 	ldw	r18,1276(sp)
 4009c68:	dc413e17 	ldw	r17,1272(sp)
 4009c6c:	dc013d17 	ldw	r16,1268(sp)
 4009c70:	dec14704 	addi	sp,sp,1308
 4009c74:	f800283a 	ret
 4009c78:	d9412917 	ldw	r5,1188(sp)
 4009c7c:	8809883a 	mov	r4,r17
 4009c80:	d9811b04 	addi	r6,sp,1132
 4009c84:	40095a00 	call	40095a0 <__sprint_r>
 4009c88:	103fe51e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 4009c8c:	da400404 	addi	r9,sp,16
 4009c90:	003e9d06 	br	4009708 <___vfprintf_internal_r+0x134>
 4009c94:	400d11c0 	call	400d11c <__sinit>
 4009c98:	003e6606 	br	4009634 <___vfprintf_internal_r+0x60>
 4009c9c:	d8812d17 	ldw	r2,1204(sp)
 4009ca0:	0007883a 	mov	r3,zero
 4009ca4:	15c00017 	ldw	r23,0(r2)
 4009ca8:	15800117 	ldw	r22,4(r2)
 4009cac:	10800204 	addi	r2,r2,8
 4009cb0:	d8812d15 	stw	r2,1204(sp)
 4009cb4:	d8012585 	stb	zero,1174(sp)
 4009cb8:	bd84b03a 	or	r2,r23,r22
 4009cbc:	003f1c06 	br	4009930 <___vfprintf_internal_r+0x35c>
 4009cc0:	d8c12d17 	ldw	r3,1204(sp)
 4009cc4:	18800117 	ldw	r2,4(r3)
 4009cc8:	1dc00017 	ldw	r23,0(r3)
 4009ccc:	18c00204 	addi	r3,r3,8
 4009cd0:	d8c12d15 	stw	r3,1204(sp)
 4009cd4:	102d883a 	mov	r22,r2
 4009cd8:	003f8606 	br	4009af4 <___vfprintf_internal_r+0x520>
 4009cdc:	d8c12d17 	ldw	r3,1204(sp)
 4009ce0:	d9012d17 	ldw	r4,1204(sp)
 4009ce4:	1dc00017 	ldw	r23,0(r3)
 4009ce8:	1d800117 	ldw	r22,4(r3)
 4009cec:	21000204 	addi	r4,r4,8
 4009cf0:	00c00044 	movi	r3,1
 4009cf4:	d9012d15 	stw	r4,1204(sp)
 4009cf8:	bd84b03a 	or	r2,r23,r22
 4009cfc:	d8012585 	stb	zero,1174(sp)
 4009d00:	003f0b06 	br	4009930 <___vfprintf_internal_r+0x35c>
 4009d04:	d9812585 	stb	r6,1174(sp)
 4009d08:	ac800007 	ldb	r18,0(r21)
 4009d0c:	003e8f06 	br	400974c <___vfprintf_internal_r+0x178>
 4009d10:	ac800007 	ldb	r18,0(r21)
 4009d14:	a9000044 	addi	r4,r21,1
 4009d18:	92857d26 	beq	r18,r10,400b310 <___vfprintf_internal_r+0x1d3c>
 4009d1c:	90bff404 	addi	r2,r18,-48
 4009d20:	0039883a 	mov	fp,zero
 4009d24:	28800736 	bltu	r5,r2,4009d44 <___vfprintf_internal_r+0x770>
 4009d28:	24800007 	ldb	r18,0(r4)
 4009d2c:	e70002a4 	muli	fp,fp,10
 4009d30:	21000044 	addi	r4,r4,1
 4009d34:	1739883a 	add	fp,r2,fp
 4009d38:	90bff404 	addi	r2,r18,-48
 4009d3c:	28bffa2e 	bgeu	r5,r2,4009d28 <___vfprintf_internal_r+0x754>
 4009d40:	e0044216 	blt	fp,zero,400ae4c <___vfprintf_internal_r+0x1878>
 4009d44:	202b883a 	mov	r21,r4
 4009d48:	003e8106 	br	4009750 <___vfprintf_internal_r+0x17c>
 4009d4c:	d8812587 	ldb	r2,1174(sp)
 4009d50:	1003581e 	bne	r2,zero,400aab4 <___vfprintf_internal_r+0x14e0>
 4009d54:	dac12585 	stb	r11,1174(sp)
 4009d58:	ac800007 	ldb	r18,0(r21)
 4009d5c:	003e7b06 	br	400974c <___vfprintf_internal_r+0x178>
 4009d60:	84000054 	ori	r16,r16,1
 4009d64:	ac800007 	ldb	r18,0(r21)
 4009d68:	003e7806 	br	400974c <___vfprintf_internal_r+0x178>
 4009d6c:	84002014 	ori	r16,r16,128
 4009d70:	ac800007 	ldb	r18,0(r21)
 4009d74:	003e7506 	br	400974c <___vfprintf_internal_r+0x178>
 4009d78:	020100f4 	movhi	r8,1027
 4009d7c:	42365c04 	addi	r8,r8,-9872
 4009d80:	da013615 	stw	r8,1240(sp)
 4009d84:	8080080c 	andi	r2,r16,32
 4009d88:	10009626 	beq	r2,zero,4009fe4 <___vfprintf_internal_r+0xa10>
 4009d8c:	d8812d17 	ldw	r2,1204(sp)
 4009d90:	15c00017 	ldw	r23,0(r2)
 4009d94:	15800117 	ldw	r22,4(r2)
 4009d98:	10800204 	addi	r2,r2,8
 4009d9c:	d8812d15 	stw	r2,1204(sp)
 4009da0:	8080004c 	andi	r2,r16,1
 4009da4:	1002ae26 	beq	r2,zero,400a860 <___vfprintf_internal_r+0x128c>
 4009da8:	bd84b03a 	or	r2,r23,r22
 4009dac:	10032a26 	beq	r2,zero,400aa58 <___vfprintf_internal_r+0x1484>
 4009db0:	00c00c04 	movi	r3,48
 4009db4:	d8c12505 	stb	r3,1172(sp)
 4009db8:	dc812545 	stb	r18,1173(sp)
 4009dbc:	84000094 	ori	r16,r16,2
 4009dc0:	00c00084 	movi	r3,2
 4009dc4:	d8012585 	stb	zero,1174(sp)
 4009dc8:	003ed906 	br	4009930 <___vfprintf_internal_r+0x35c>
 4009dcc:	84001014 	ori	r16,r16,64
 4009dd0:	ac800007 	ldb	r18,0(r21)
 4009dd4:	003e5d06 	br	400974c <___vfprintf_internal_r+0x178>
 4009dd8:	ac800007 	ldb	r18,0(r21)
 4009ddc:	a805883a 	mov	r2,r21
 4009de0:	91c43226 	beq	r18,r7,400aeac <___vfprintf_internal_r+0x18d8>
 4009de4:	84000414 	ori	r16,r16,16
 4009de8:	003e5806 	br	400974c <___vfprintf_internal_r+0x178>
 4009dec:	d8c12d17 	ldw	r3,1204(sp)
 4009df0:	02000044 	movi	r8,1
 4009df4:	da012815 	stw	r8,1184(sp)
 4009df8:	18800017 	ldw	r2,0(r3)
 4009dfc:	18c00104 	addi	r3,r3,4
 4009e00:	d8012585 	stb	zero,1174(sp)
 4009e04:	d8810405 	stb	r2,1040(sp)
 4009e08:	d8c12d15 	stw	r3,1204(sp)
 4009e0c:	da012b15 	stw	r8,1196(sp)
 4009e10:	dcc10404 	addi	r19,sp,1040
 4009e14:	d8013115 	stw	zero,1220(sp)
 4009e18:	003ee006 	br	400999c <___vfprintf_internal_r+0x3c8>
 4009e1c:	8080080c 	andi	r2,r16,32
 4009e20:	10031026 	beq	r2,zero,400aa64 <___vfprintf_internal_r+0x1490>
 4009e24:	d9012d17 	ldw	r4,1204(sp)
 4009e28:	da012c17 	ldw	r8,1200(sp)
 4009e2c:	20800017 	ldw	r2,0(r4)
 4009e30:	4007d7fa 	srai	r3,r8,31
 4009e34:	21000104 	addi	r4,r4,4
 4009e38:	d9012d15 	stw	r4,1204(sp)
 4009e3c:	12000015 	stw	r8,0(r2)
 4009e40:	10c00115 	stw	r3,4(r2)
 4009e44:	003e1906 	br	40096ac <___vfprintf_internal_r+0xd8>
 4009e48:	da012d17 	ldw	r8,1204(sp)
 4009e4c:	d9012d17 	ldw	r4,1204(sp)
 4009e50:	42000017 	ldw	r8,0(r8)
 4009e54:	20800104 	addi	r2,r4,4
 4009e58:	da012e15 	stw	r8,1208(sp)
 4009e5c:	403f2f16 	blt	r8,zero,4009b1c <___vfprintf_internal_r+0x548>
 4009e60:	d8812d15 	stw	r2,1204(sp)
 4009e64:	ac800007 	ldb	r18,0(r21)
 4009e68:	003e3806 	br	400974c <___vfprintf_internal_r+0x178>
 4009e6c:	0009883a 	mov	r4,zero
 4009e70:	90bff404 	addi	r2,r18,-48
 4009e74:	ac800007 	ldb	r18,0(r21)
 4009e78:	210002a4 	muli	r4,r4,10
 4009e7c:	ad400044 	addi	r21,r21,1
 4009e80:	2089883a 	add	r4,r4,r2
 4009e84:	90bff404 	addi	r2,r18,-48
 4009e88:	28bffa2e 	bgeu	r5,r2,4009e74 <___vfprintf_internal_r+0x8a0>
 4009e8c:	d9012e15 	stw	r4,1208(sp)
 4009e90:	003e2f06 	br	4009750 <___vfprintf_internal_r+0x17c>
 4009e94:	8080020c 	andi	r2,r16,8
 4009e98:	1002d426 	beq	r2,zero,400a9ec <___vfprintf_internal_r+0x1418>
 4009e9c:	d8c12d17 	ldw	r3,1204(sp)
 4009ea0:	1d800017 	ldw	r22,0(r3)
 4009ea4:	1d000117 	ldw	r20,4(r3)
 4009ea8:	18c00204 	addi	r3,r3,8
 4009eac:	d8c12d15 	stw	r3,1204(sp)
 4009eb0:	dd813315 	stw	r22,1228(sp)
 4009eb4:	dd013415 	stw	r20,1232(sp)
 4009eb8:	b009883a 	mov	r4,r22
 4009ebc:	a00b883a 	mov	r5,r20
 4009ec0:	da413c15 	stw	r9,1264(sp)
 4009ec4:	400f7fc0 	call	400f7fc <__isinfd>
 4009ec8:	da413c17 	ldw	r9,1264(sp)
 4009ecc:	b009883a 	mov	r4,r22
 4009ed0:	a00b883a 	mov	r5,r20
 4009ed4:	10035726 	beq	r2,zero,400ac34 <___vfprintf_internal_r+0x1660>
 4009ed8:	000d883a 	mov	r6,zero
 4009edc:	000f883a 	mov	r7,zero
 4009ee0:	40080080 	call	4008008 <__ltdf2>
 4009ee4:	da413c17 	ldw	r9,1264(sp)
 4009ee8:	10041b16 	blt	r2,zero,400af58 <___vfprintf_internal_r+0x1984>
 4009eec:	d8812583 	ldbu	r2,1174(sp)
 4009ef0:	00c011c4 	movi	r3,71
 4009ef4:	1c830b16 	blt	r3,r18,400ab24 <___vfprintf_internal_r+0x1550>
 4009ef8:	04c100f4 	movhi	r19,1027
 4009efc:	9cf65804 	addi	r19,r19,-9888
 4009f00:	020000c4 	movi	r8,3
 4009f04:	00ffdfc4 	movi	r3,-129
 4009f08:	da012815 	stw	r8,1184(sp)
 4009f0c:	80e0703a 	and	r16,r16,r3
 4009f10:	da012b15 	stw	r8,1196(sp)
 4009f14:	d8013115 	stw	zero,1220(sp)
 4009f18:	003e9906 	br	4009980 <___vfprintf_internal_r+0x3ac>
 4009f1c:	d8812d17 	ldw	r2,1204(sp)
 4009f20:	d8c12d17 	ldw	r3,1204(sp)
 4009f24:	020100f4 	movhi	r8,1027
 4009f28:	42366104 	addi	r8,r8,-9852
 4009f2c:	15c00017 	ldw	r23,0(r2)
 4009f30:	00800c04 	movi	r2,48
 4009f34:	18c00104 	addi	r3,r3,4
 4009f38:	d8812505 	stb	r2,1172(sp)
 4009f3c:	00801e04 	movi	r2,120
 4009f40:	d8812545 	stb	r2,1173(sp)
 4009f44:	d8c12d15 	stw	r3,1204(sp)
 4009f48:	002d883a 	mov	r22,zero
 4009f4c:	84000094 	ori	r16,r16,2
 4009f50:	da013615 	stw	r8,1240(sp)
 4009f54:	00c00084 	movi	r3,2
 4009f58:	04801e04 	movi	r18,120
 4009f5c:	b805883a 	mov	r2,r23
 4009f60:	d8012585 	stb	zero,1174(sp)
 4009f64:	003e7206 	br	4009930 <___vfprintf_internal_r+0x35c>
 4009f68:	84000814 	ori	r16,r16,32
 4009f6c:	ac800007 	ldb	r18,0(r21)
 4009f70:	003df606 	br	400974c <___vfprintf_internal_r+0x178>
 4009f74:	d8812d17 	ldw	r2,1204(sp)
 4009f78:	d8012585 	stb	zero,1174(sp)
 4009f7c:	14c00017 	ldw	r19,0(r2)
 4009f80:	15c00104 	addi	r23,r2,4
 4009f84:	98040126 	beq	r19,zero,400af8c <___vfprintf_internal_r+0x19b8>
 4009f88:	9809883a 	mov	r4,r19
 4009f8c:	e003dd16 	blt	fp,zero,400af04 <___vfprintf_internal_r+0x1930>
 4009f90:	000b883a 	mov	r5,zero
 4009f94:	e00d883a 	mov	r6,fp
 4009f98:	da413c15 	stw	r9,1264(sp)
 4009f9c:	400e0380 	call	400e038 <memchr>
 4009fa0:	da413c17 	ldw	r9,1264(sp)
 4009fa4:	10042e26 	beq	r2,zero,400b060 <___vfprintf_internal_r+0x1a8c>
 4009fa8:	14c5c83a 	sub	r2,r2,r19
 4009fac:	d8812b15 	stw	r2,1196(sp)
 4009fb0:	e083790e 	bge	fp,r2,400ad98 <___vfprintf_internal_r+0x17c4>
 4009fb4:	df012815 	stw	fp,1184(sp)
 4009fb8:	e0049516 	blt	fp,zero,400b210 <___vfprintf_internal_r+0x1c3c>
 4009fbc:	d8812583 	ldbu	r2,1174(sp)
 4009fc0:	df012b15 	stw	fp,1196(sp)
 4009fc4:	ddc12d15 	stw	r23,1204(sp)
 4009fc8:	d8013115 	stw	zero,1220(sp)
 4009fcc:	003e6c06 	br	4009980 <___vfprintf_internal_r+0x3ac>
 4009fd0:	020100f4 	movhi	r8,1027
 4009fd4:	42366104 	addi	r8,r8,-9852
 4009fd8:	da013615 	stw	r8,1240(sp)
 4009fdc:	8080080c 	andi	r2,r16,32
 4009fe0:	103f6a1e 	bne	r2,zero,4009d8c <___vfprintf_internal_r+0x7b8>
 4009fe4:	8080040c 	andi	r2,r16,16
 4009fe8:	10029326 	beq	r2,zero,400aa38 <___vfprintf_internal_r+0x1464>
 4009fec:	d8c12d17 	ldw	r3,1204(sp)
 4009ff0:	002d883a 	mov	r22,zero
 4009ff4:	1dc00017 	ldw	r23,0(r3)
 4009ff8:	18c00104 	addi	r3,r3,4
 4009ffc:	d8c12d15 	stw	r3,1204(sp)
 400a000:	003f6706 	br	4009da0 <___vfprintf_internal_r+0x7cc>
 400a004:	84000214 	ori	r16,r16,8
 400a008:	ac800007 	ldb	r18,0(r21)
 400a00c:	003dcf06 	br	400974c <___vfprintf_internal_r+0x178>
 400a010:	da011d17 	ldw	r8,1140(sp)
 400a014:	d8c11c17 	ldw	r3,1136(sp)
 400a018:	d8812587 	ldb	r2,1174(sp)
 400a01c:	10000b26 	beq	r2,zero,400a04c <___vfprintf_internal_r+0xa78>
 400a020:	d8812584 	addi	r2,sp,1174
 400a024:	48800015 	stw	r2,0(r9)
 400a028:	00800044 	movi	r2,1
 400a02c:	48800115 	stw	r2,4(r9)
 400a030:	4091883a 	add	r8,r8,r2
 400a034:	1887883a 	add	r3,r3,r2
 400a038:	da011d15 	stw	r8,1140(sp)
 400a03c:	d8c11c15 	stw	r3,1136(sp)
 400a040:	008001c4 	movi	r2,7
 400a044:	10c18516 	blt	r2,r3,400a65c <___vfprintf_internal_r+0x1088>
 400a048:	4a400204 	addi	r9,r9,8
 400a04c:	d9012a17 	ldw	r4,1192(sp)
 400a050:	20000b26 	beq	r4,zero,400a080 <___vfprintf_internal_r+0xaac>
 400a054:	d8812504 	addi	r2,sp,1172
 400a058:	48800015 	stw	r2,0(r9)
 400a05c:	00800084 	movi	r2,2
 400a060:	48800115 	stw	r2,4(r9)
 400a064:	4091883a 	add	r8,r8,r2
 400a068:	18c00044 	addi	r3,r3,1
 400a06c:	da011d15 	stw	r8,1140(sp)
 400a070:	d8c11c15 	stw	r3,1136(sp)
 400a074:	008001c4 	movi	r2,7
 400a078:	10c18116 	blt	r2,r3,400a680 <___vfprintf_internal_r+0x10ac>
 400a07c:	4a400204 	addi	r9,r9,8
 400a080:	d9012f17 	ldw	r4,1212(sp)
 400a084:	00802004 	movi	r2,128
 400a088:	2080fc26 	beq	r4,r2,400a47c <___vfprintf_internal_r+0xea8>
 400a08c:	d8813117 	ldw	r2,1220(sp)
 400a090:	d9012b17 	ldw	r4,1196(sp)
 400a094:	112fc83a 	sub	r23,r2,r4
 400a098:	05c02a0e 	bge	zero,r23,400a144 <___vfprintf_internal_r+0xb70>
 400a09c:	07000404 	movi	fp,16
 400a0a0:	050100f4 	movhi	r20,1027
 400a0a4:	a5366c84 	addi	r20,r20,-9806
 400a0a8:	e5c01d0e 	bge	fp,r23,400a120 <___vfprintf_internal_r+0xb4c>
 400a0ac:	dc812a15 	stw	r18,1192(sp)
 400a0b0:	058001c4 	movi	r22,7
 400a0b4:	a025883a 	mov	r18,r20
 400a0b8:	8029883a 	mov	r20,r16
 400a0bc:	dc012917 	ldw	r16,1188(sp)
 400a0c0:	00000306 	br	400a0d0 <___vfprintf_internal_r+0xafc>
 400a0c4:	bdfffc04 	addi	r23,r23,-16
 400a0c8:	4a400204 	addi	r9,r9,8
 400a0cc:	e5c0110e 	bge	fp,r23,400a114 <___vfprintf_internal_r+0xb40>
 400a0d0:	4c800015 	stw	r18,0(r9)
 400a0d4:	4f000115 	stw	fp,4(r9)
 400a0d8:	42000404 	addi	r8,r8,16
 400a0dc:	18c00044 	addi	r3,r3,1
 400a0e0:	da011d15 	stw	r8,1140(sp)
 400a0e4:	d8c11c15 	stw	r3,1136(sp)
 400a0e8:	b0fff60e 	bge	r22,r3,400a0c4 <___vfprintf_internal_r+0xaf0>
 400a0ec:	8809883a 	mov	r4,r17
 400a0f0:	800b883a 	mov	r5,r16
 400a0f4:	d9811b04 	addi	r6,sp,1132
 400a0f8:	40095a00 	call	40095a0 <__sprint_r>
 400a0fc:	103ec81e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a100:	bdfffc04 	addi	r23,r23,-16
 400a104:	da011d17 	ldw	r8,1140(sp)
 400a108:	d8c11c17 	ldw	r3,1136(sp)
 400a10c:	da400404 	addi	r9,sp,16
 400a110:	e5ffef16 	blt	fp,r23,400a0d0 <___vfprintf_internal_r+0xafc>
 400a114:	a021883a 	mov	r16,r20
 400a118:	9029883a 	mov	r20,r18
 400a11c:	dc812a17 	ldw	r18,1192(sp)
 400a120:	4d000015 	stw	r20,0(r9)
 400a124:	4dc00115 	stw	r23,4(r9)
 400a128:	45d1883a 	add	r8,r8,r23
 400a12c:	18c00044 	addi	r3,r3,1
 400a130:	da011d15 	stw	r8,1140(sp)
 400a134:	d8c11c15 	stw	r3,1136(sp)
 400a138:	008001c4 	movi	r2,7
 400a13c:	10c13e16 	blt	r2,r3,400a638 <___vfprintf_internal_r+0x1064>
 400a140:	4a400204 	addi	r9,r9,8
 400a144:	8080400c 	andi	r2,r16,256
 400a148:	1000831e 	bne	r2,zero,400a358 <___vfprintf_internal_r+0xd84>
 400a14c:	d8812b17 	ldw	r2,1196(sp)
 400a150:	4cc00015 	stw	r19,0(r9)
 400a154:	48800115 	stw	r2,4(r9)
 400a158:	4091883a 	add	r8,r8,r2
 400a15c:	18c00044 	addi	r3,r3,1
 400a160:	da011d15 	stw	r8,1140(sp)
 400a164:	d8c11c15 	stw	r3,1136(sp)
 400a168:	008001c4 	movi	r2,7
 400a16c:	10c05316 	blt	r2,r3,400a2bc <___vfprintf_internal_r+0xce8>
 400a170:	4a400204 	addi	r9,r9,8
 400a174:	8400010c 	andi	r16,r16,4
 400a178:	80002e26 	beq	r16,zero,400a234 <___vfprintf_internal_r+0xc60>
 400a17c:	d8812e17 	ldw	r2,1208(sp)
 400a180:	d8c12817 	ldw	r3,1184(sp)
 400a184:	10e1c83a 	sub	r16,r2,r3
 400a188:	04002a0e 	bge	zero,r16,400a234 <___vfprintf_internal_r+0xc60>
 400a18c:	04800404 	movi	r18,16
 400a190:	d8c11c17 	ldw	r3,1136(sp)
 400a194:	05c100f4 	movhi	r23,1027
 400a198:	bdf66884 	addi	r23,r23,-9822
 400a19c:	9400170e 	bge	r18,r16,400a1fc <___vfprintf_internal_r+0xc28>
 400a1a0:	04c001c4 	movi	r19,7
 400a1a4:	dd012917 	ldw	r20,1188(sp)
 400a1a8:	00000306 	br	400a1b8 <___vfprintf_internal_r+0xbe4>
 400a1ac:	843ffc04 	addi	r16,r16,-16
 400a1b0:	4a400204 	addi	r9,r9,8
 400a1b4:	9400110e 	bge	r18,r16,400a1fc <___vfprintf_internal_r+0xc28>
 400a1b8:	4dc00015 	stw	r23,0(r9)
 400a1bc:	4c800115 	stw	r18,4(r9)
 400a1c0:	42000404 	addi	r8,r8,16
 400a1c4:	18c00044 	addi	r3,r3,1
 400a1c8:	da011d15 	stw	r8,1140(sp)
 400a1cc:	d8c11c15 	stw	r3,1136(sp)
 400a1d0:	98fff60e 	bge	r19,r3,400a1ac <___vfprintf_internal_r+0xbd8>
 400a1d4:	8809883a 	mov	r4,r17
 400a1d8:	a00b883a 	mov	r5,r20
 400a1dc:	d9811b04 	addi	r6,sp,1132
 400a1e0:	40095a00 	call	40095a0 <__sprint_r>
 400a1e4:	103e8e1e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a1e8:	843ffc04 	addi	r16,r16,-16
 400a1ec:	da011d17 	ldw	r8,1140(sp)
 400a1f0:	d8c11c17 	ldw	r3,1136(sp)
 400a1f4:	da400404 	addi	r9,sp,16
 400a1f8:	943fef16 	blt	r18,r16,400a1b8 <___vfprintf_internal_r+0xbe4>
 400a1fc:	4dc00015 	stw	r23,0(r9)
 400a200:	4c000115 	stw	r16,4(r9)
 400a204:	8211883a 	add	r8,r16,r8
 400a208:	18c00044 	addi	r3,r3,1
 400a20c:	da011d15 	stw	r8,1140(sp)
 400a210:	d8c11c15 	stw	r3,1136(sp)
 400a214:	008001c4 	movi	r2,7
 400a218:	10c0060e 	bge	r2,r3,400a234 <___vfprintf_internal_r+0xc60>
 400a21c:	d9412917 	ldw	r5,1188(sp)
 400a220:	8809883a 	mov	r4,r17
 400a224:	d9811b04 	addi	r6,sp,1132
 400a228:	40095a00 	call	40095a0 <__sprint_r>
 400a22c:	103e7c1e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a230:	da011d17 	ldw	r8,1140(sp)
 400a234:	dd012817 	ldw	r20,1184(sp)
 400a238:	d9012e17 	ldw	r4,1208(sp)
 400a23c:	a100010e 	bge	r20,r4,400a244 <___vfprintf_internal_r+0xc70>
 400a240:	2029883a 	mov	r20,r4
 400a244:	d8812c17 	ldw	r2,1200(sp)
 400a248:	1505883a 	add	r2,r2,r20
 400a24c:	d8812c15 	stw	r2,1200(sp)
 400a250:	4000b91e 	bne	r8,zero,400a538 <___vfprintf_internal_r+0xf64>
 400a254:	d8011c15 	stw	zero,1136(sp)
 400a258:	a8800007 	ldb	r2,0(r21)
 400a25c:	da400404 	addi	r9,sp,16
 400a260:	103d141e 	bne	r2,zero,40096b4 <___vfprintf_internal_r+0xe0>
 400a264:	a825883a 	mov	r18,r21
 400a268:	003d2a06 	br	4009714 <___vfprintf_internal_r+0x140>
 400a26c:	d9412917 	ldw	r5,1188(sp)
 400a270:	8809883a 	mov	r4,r17
 400a274:	d9811b04 	addi	r6,sp,1132
 400a278:	40095a00 	call	40095a0 <__sprint_r>
 400a27c:	103e681e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a280:	da011d17 	ldw	r8,1140(sp)
 400a284:	da400404 	addi	r9,sp,16
 400a288:	8080004c 	andi	r2,r16,1
 400a28c:	103fb926 	beq	r2,zero,400a174 <___vfprintf_internal_r+0xba0>
 400a290:	d8c11c17 	ldw	r3,1136(sp)
 400a294:	d9013717 	ldw	r4,1244(sp)
 400a298:	00800044 	movi	r2,1
 400a29c:	48800115 	stw	r2,4(r9)
 400a2a0:	49000015 	stw	r4,0(r9)
 400a2a4:	4091883a 	add	r8,r8,r2
 400a2a8:	1887883a 	add	r3,r3,r2
 400a2ac:	da011d15 	stw	r8,1140(sp)
 400a2b0:	d8c11c15 	stw	r3,1136(sp)
 400a2b4:	008001c4 	movi	r2,7
 400a2b8:	10ffad0e 	bge	r2,r3,400a170 <___vfprintf_internal_r+0xb9c>
 400a2bc:	d9412917 	ldw	r5,1188(sp)
 400a2c0:	8809883a 	mov	r4,r17
 400a2c4:	d9811b04 	addi	r6,sp,1132
 400a2c8:	40095a00 	call	40095a0 <__sprint_r>
 400a2cc:	103e541e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a2d0:	da400404 	addi	r9,sp,16
 400a2d4:	da011d17 	ldw	r8,1140(sp)
 400a2d8:	003fa606 	br	400a174 <___vfprintf_internal_r+0xba0>
 400a2dc:	18803fcc 	andi	r2,r3,255
 400a2e0:	00c00044 	movi	r3,1
 400a2e4:	10c10126 	beq	r2,r3,400a6ec <___vfprintf_internal_r+0x1118>
 400a2e8:	00c00084 	movi	r3,2
 400a2ec:	10c0f026 	beq	r2,r3,400a6b0 <___vfprintf_internal_r+0x10dc>
 400a2f0:	d8c10dc4 	addi	r3,sp,1079
 400a2f4:	b808d0fa 	srli	r4,r23,3
 400a2f8:	b00a977a 	slli	r5,r22,29
 400a2fc:	b02cd0fa 	srli	r22,r22,3
 400a300:	bdc001cc 	andi	r23,r23,7
 400a304:	b8800c04 	addi	r2,r23,48
 400a308:	292eb03a 	or	r23,r5,r4
 400a30c:	18800005 	stb	r2,0(r3)
 400a310:	bd88b03a 	or	r4,r23,r22
 400a314:	1827883a 	mov	r19,r3
 400a318:	18ffffc4 	addi	r3,r3,-1
 400a31c:	203ff51e 	bne	r4,zero,400a2f4 <___vfprintf_internal_r+0xd20>
 400a320:	8100004c 	andi	r4,r16,1
 400a324:	980b883a 	mov	r5,r19
 400a328:	20000726 	beq	r4,zero,400a348 <___vfprintf_internal_r+0xd74>
 400a32c:	10803fcc 	andi	r2,r2,255
 400a330:	1080201c 	xori	r2,r2,128
 400a334:	10bfe004 	addi	r2,r2,-128
 400a338:	01000c04 	movi	r4,48
 400a33c:	11000226 	beq	r2,r4,400a348 <___vfprintf_internal_r+0xd74>
 400a340:	1827883a 	mov	r19,r3
 400a344:	293fffc5 	stb	r4,-1(r5)
 400a348:	d8812717 	ldw	r2,1180(sp)
 400a34c:	14c5c83a 	sub	r2,r2,r19
 400a350:	d8812b15 	stw	r2,1196(sp)
 400a354:	003d8406 	br	4009968 <___vfprintf_internal_r+0x394>
 400a358:	00801944 	movi	r2,101
 400a35c:	14807c0e 	bge	r2,r18,400a550 <___vfprintf_internal_r+0xf7c>
 400a360:	d9013317 	ldw	r4,1228(sp)
 400a364:	d9413417 	ldw	r5,1232(sp)
 400a368:	000d883a 	mov	r6,zero
 400a36c:	000f883a 	mov	r7,zero
 400a370:	d8c13b15 	stw	r3,1260(sp)
 400a374:	da013a15 	stw	r8,1256(sp)
 400a378:	da413c15 	stw	r9,1264(sp)
 400a37c:	40109ec0 	call	40109ec <__eqdf2>
 400a380:	d8c13b17 	ldw	r3,1260(sp)
 400a384:	da013a17 	ldw	r8,1256(sp)
 400a388:	da413c17 	ldw	r9,1264(sp)
 400a38c:	1001001e 	bne	r2,zero,400a790 <___vfprintf_internal_r+0x11bc>
 400a390:	008100f4 	movhi	r2,1027
 400a394:	10b66804 	addi	r2,r2,-9824
 400a398:	48800015 	stw	r2,0(r9)
 400a39c:	00800044 	movi	r2,1
 400a3a0:	48800115 	stw	r2,4(r9)
 400a3a4:	4091883a 	add	r8,r8,r2
 400a3a8:	1887883a 	add	r3,r3,r2
 400a3ac:	da011d15 	stw	r8,1140(sp)
 400a3b0:	d8c11c15 	stw	r3,1136(sp)
 400a3b4:	008001c4 	movi	r2,7
 400a3b8:	10c1dd16 	blt	r2,r3,400ab30 <___vfprintf_internal_r+0x155c>
 400a3bc:	4a400204 	addi	r9,r9,8
 400a3c0:	d8812417 	ldw	r2,1168(sp)
 400a3c4:	d8c13217 	ldw	r3,1224(sp)
 400a3c8:	10c00216 	blt	r2,r3,400a3d4 <___vfprintf_internal_r+0xe00>
 400a3cc:	8080004c 	andi	r2,r16,1
 400a3d0:	103f6826 	beq	r2,zero,400a174 <___vfprintf_internal_r+0xba0>
 400a3d4:	d8c11c17 	ldw	r3,1136(sp)
 400a3d8:	d9013717 	ldw	r4,1244(sp)
 400a3dc:	00800044 	movi	r2,1
 400a3e0:	48800115 	stw	r2,4(r9)
 400a3e4:	49000015 	stw	r4,0(r9)
 400a3e8:	4091883a 	add	r8,r8,r2
 400a3ec:	1887883a 	add	r3,r3,r2
 400a3f0:	da011d15 	stw	r8,1140(sp)
 400a3f4:	d8c11c15 	stw	r3,1136(sp)
 400a3f8:	008001c4 	movi	r2,7
 400a3fc:	10c2af16 	blt	r2,r3,400aebc <___vfprintf_internal_r+0x18e8>
 400a400:	4a400204 	addi	r9,r9,8
 400a404:	d8813217 	ldw	r2,1224(sp)
 400a408:	14bfffc4 	addi	r18,r2,-1
 400a40c:	04bf590e 	bge	zero,r18,400a174 <___vfprintf_internal_r+0xba0>
 400a410:	04c00404 	movi	r19,16
 400a414:	d8c11c17 	ldw	r3,1136(sp)
 400a418:	050100f4 	movhi	r20,1027
 400a41c:	a5366c84 	addi	r20,r20,-9806
 400a420:	9c81630e 	bge	r19,r18,400a9b0 <___vfprintf_internal_r+0x13dc>
 400a424:	058001c4 	movi	r22,7
 400a428:	ddc12917 	ldw	r23,1188(sp)
 400a42c:	00000306 	br	400a43c <___vfprintf_internal_r+0xe68>
 400a430:	4a400204 	addi	r9,r9,8
 400a434:	94bffc04 	addi	r18,r18,-16
 400a438:	9c815d0e 	bge	r19,r18,400a9b0 <___vfprintf_internal_r+0x13dc>
 400a43c:	4d000015 	stw	r20,0(r9)
 400a440:	4cc00115 	stw	r19,4(r9)
 400a444:	42000404 	addi	r8,r8,16
 400a448:	18c00044 	addi	r3,r3,1
 400a44c:	da011d15 	stw	r8,1140(sp)
 400a450:	d8c11c15 	stw	r3,1136(sp)
 400a454:	b0fff60e 	bge	r22,r3,400a430 <___vfprintf_internal_r+0xe5c>
 400a458:	8809883a 	mov	r4,r17
 400a45c:	b80b883a 	mov	r5,r23
 400a460:	d9811b04 	addi	r6,sp,1132
 400a464:	40095a00 	call	40095a0 <__sprint_r>
 400a468:	103ded1e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a46c:	da011d17 	ldw	r8,1140(sp)
 400a470:	d8c11c17 	ldw	r3,1136(sp)
 400a474:	da400404 	addi	r9,sp,16
 400a478:	003fee06 	br	400a434 <___vfprintf_internal_r+0xe60>
 400a47c:	d8812e17 	ldw	r2,1208(sp)
 400a480:	d9012817 	ldw	r4,1184(sp)
 400a484:	112fc83a 	sub	r23,r2,r4
 400a488:	05ff000e 	bge	zero,r23,400a08c <___vfprintf_internal_r+0xab8>
 400a48c:	07000404 	movi	fp,16
 400a490:	050100f4 	movhi	r20,1027
 400a494:	a5366c84 	addi	r20,r20,-9806
 400a498:	e5c01d0e 	bge	fp,r23,400a510 <___vfprintf_internal_r+0xf3c>
 400a49c:	dc812a15 	stw	r18,1192(sp)
 400a4a0:	058001c4 	movi	r22,7
 400a4a4:	a025883a 	mov	r18,r20
 400a4a8:	8029883a 	mov	r20,r16
 400a4ac:	dc012917 	ldw	r16,1188(sp)
 400a4b0:	00000306 	br	400a4c0 <___vfprintf_internal_r+0xeec>
 400a4b4:	bdfffc04 	addi	r23,r23,-16
 400a4b8:	4a400204 	addi	r9,r9,8
 400a4bc:	e5c0110e 	bge	fp,r23,400a504 <___vfprintf_internal_r+0xf30>
 400a4c0:	4c800015 	stw	r18,0(r9)
 400a4c4:	4f000115 	stw	fp,4(r9)
 400a4c8:	42000404 	addi	r8,r8,16
 400a4cc:	18c00044 	addi	r3,r3,1
 400a4d0:	da011d15 	stw	r8,1140(sp)
 400a4d4:	d8c11c15 	stw	r3,1136(sp)
 400a4d8:	b0fff60e 	bge	r22,r3,400a4b4 <___vfprintf_internal_r+0xee0>
 400a4dc:	8809883a 	mov	r4,r17
 400a4e0:	800b883a 	mov	r5,r16
 400a4e4:	d9811b04 	addi	r6,sp,1132
 400a4e8:	40095a00 	call	40095a0 <__sprint_r>
 400a4ec:	103dcc1e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a4f0:	bdfffc04 	addi	r23,r23,-16
 400a4f4:	da011d17 	ldw	r8,1140(sp)
 400a4f8:	d8c11c17 	ldw	r3,1136(sp)
 400a4fc:	da400404 	addi	r9,sp,16
 400a500:	e5ffef16 	blt	fp,r23,400a4c0 <___vfprintf_internal_r+0xeec>
 400a504:	a021883a 	mov	r16,r20
 400a508:	9029883a 	mov	r20,r18
 400a50c:	dc812a17 	ldw	r18,1192(sp)
 400a510:	4d000015 	stw	r20,0(r9)
 400a514:	4dc00115 	stw	r23,4(r9)
 400a518:	45d1883a 	add	r8,r8,r23
 400a51c:	18c00044 	addi	r3,r3,1
 400a520:	da011d15 	stw	r8,1140(sp)
 400a524:	d8c11c15 	stw	r3,1136(sp)
 400a528:	008001c4 	movi	r2,7
 400a52c:	10c11716 	blt	r2,r3,400a98c <___vfprintf_internal_r+0x13b8>
 400a530:	4a400204 	addi	r9,r9,8
 400a534:	003ed506 	br	400a08c <___vfprintf_internal_r+0xab8>
 400a538:	d9412917 	ldw	r5,1188(sp)
 400a53c:	8809883a 	mov	r4,r17
 400a540:	d9811b04 	addi	r6,sp,1132
 400a544:	40095a00 	call	40095a0 <__sprint_r>
 400a548:	103f4226 	beq	r2,zero,400a254 <___vfprintf_internal_r+0xc80>
 400a54c:	003db406 	br	4009c20 <___vfprintf_internal_r+0x64c>
 400a550:	d9013217 	ldw	r4,1224(sp)
 400a554:	00800044 	movi	r2,1
 400a558:	4cc00015 	stw	r19,0(r9)
 400a55c:	1100e10e 	bge	r2,r4,400a8e4 <___vfprintf_internal_r+0x1310>
 400a560:	00800044 	movi	r2,1
 400a564:	48800115 	stw	r2,4(r9)
 400a568:	4091883a 	add	r8,r8,r2
 400a56c:	1887883a 	add	r3,r3,r2
 400a570:	da011d15 	stw	r8,1140(sp)
 400a574:	d8c11c15 	stw	r3,1136(sp)
 400a578:	008001c4 	movi	r2,7
 400a57c:	10c0ed16 	blt	r2,r3,400a934 <___vfprintf_internal_r+0x1360>
 400a580:	4a400204 	addi	r9,r9,8
 400a584:	d8813717 	ldw	r2,1244(sp)
 400a588:	48800015 	stw	r2,0(r9)
 400a58c:	00800044 	movi	r2,1
 400a590:	48800115 	stw	r2,4(r9)
 400a594:	4091883a 	add	r8,r8,r2
 400a598:	1887883a 	add	r3,r3,r2
 400a59c:	da011d15 	stw	r8,1140(sp)
 400a5a0:	d8c11c15 	stw	r3,1136(sp)
 400a5a4:	008001c4 	movi	r2,7
 400a5a8:	10c0eb16 	blt	r2,r3,400a958 <___vfprintf_internal_r+0x1384>
 400a5ac:	4c800204 	addi	r18,r9,8
 400a5b0:	d9013317 	ldw	r4,1228(sp)
 400a5b4:	d9413417 	ldw	r5,1232(sp)
 400a5b8:	000d883a 	mov	r6,zero
 400a5bc:	000f883a 	mov	r7,zero
 400a5c0:	d8c13b15 	stw	r3,1260(sp)
 400a5c4:	da013a15 	stw	r8,1256(sp)
 400a5c8:	4010a480 	call	4010a48 <__nedf2>
 400a5cc:	d8c13b17 	ldw	r3,1260(sp)
 400a5d0:	da013a17 	ldw	r8,1256(sp)
 400a5d4:	1000a626 	beq	r2,zero,400a870 <___vfprintf_internal_r+0x129c>
 400a5d8:	d9013217 	ldw	r4,1224(sp)
 400a5dc:	9cc00044 	addi	r19,r19,1
 400a5e0:	94c00015 	stw	r19,0(r18)
 400a5e4:	20bfffc4 	addi	r2,r4,-1
 400a5e8:	90800115 	stw	r2,4(r18)
 400a5ec:	4091883a 	add	r8,r8,r2
 400a5f0:	18c00044 	addi	r3,r3,1
 400a5f4:	da011d15 	stw	r8,1140(sp)
 400a5f8:	d8c11c15 	stw	r3,1136(sp)
 400a5fc:	008001c4 	movi	r2,7
 400a600:	10c0c316 	blt	r2,r3,400a910 <___vfprintf_internal_r+0x133c>
 400a604:	94800204 	addi	r18,r18,8
 400a608:	d9013517 	ldw	r4,1236(sp)
 400a60c:	d8811fc4 	addi	r2,sp,1151
 400a610:	90800015 	stw	r2,0(r18)
 400a614:	91000115 	stw	r4,4(r18)
 400a618:	4111883a 	add	r8,r8,r4
 400a61c:	18c00044 	addi	r3,r3,1
 400a620:	da011d15 	stw	r8,1140(sp)
 400a624:	d8c11c15 	stw	r3,1136(sp)
 400a628:	008001c4 	movi	r2,7
 400a62c:	10ff2316 	blt	r2,r3,400a2bc <___vfprintf_internal_r+0xce8>
 400a630:	92400204 	addi	r9,r18,8
 400a634:	003ecf06 	br	400a174 <___vfprintf_internal_r+0xba0>
 400a638:	d9412917 	ldw	r5,1188(sp)
 400a63c:	8809883a 	mov	r4,r17
 400a640:	d9811b04 	addi	r6,sp,1132
 400a644:	40095a00 	call	40095a0 <__sprint_r>
 400a648:	103d751e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a64c:	da011d17 	ldw	r8,1140(sp)
 400a650:	d8c11c17 	ldw	r3,1136(sp)
 400a654:	da400404 	addi	r9,sp,16
 400a658:	003eba06 	br	400a144 <___vfprintf_internal_r+0xb70>
 400a65c:	d9412917 	ldw	r5,1188(sp)
 400a660:	8809883a 	mov	r4,r17
 400a664:	d9811b04 	addi	r6,sp,1132
 400a668:	40095a00 	call	40095a0 <__sprint_r>
 400a66c:	103d6c1e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a670:	da011d17 	ldw	r8,1140(sp)
 400a674:	d8c11c17 	ldw	r3,1136(sp)
 400a678:	da400404 	addi	r9,sp,16
 400a67c:	003e7306 	br	400a04c <___vfprintf_internal_r+0xa78>
 400a680:	d9412917 	ldw	r5,1188(sp)
 400a684:	8809883a 	mov	r4,r17
 400a688:	d9811b04 	addi	r6,sp,1132
 400a68c:	40095a00 	call	40095a0 <__sprint_r>
 400a690:	103d631e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a694:	da011d17 	ldw	r8,1140(sp)
 400a698:	d8c11c17 	ldw	r3,1136(sp)
 400a69c:	da400404 	addi	r9,sp,16
 400a6a0:	003e7706 	br	400a080 <___vfprintf_internal_r+0xaac>
 400a6a4:	d8012b15 	stw	zero,1196(sp)
 400a6a8:	dcc10e04 	addi	r19,sp,1080
 400a6ac:	003cae06 	br	4009968 <___vfprintf_internal_r+0x394>
 400a6b0:	d9413617 	ldw	r5,1240(sp)
 400a6b4:	d8810dc4 	addi	r2,sp,1079
 400a6b8:	b8c003cc 	andi	r3,r23,15
 400a6bc:	b008973a 	slli	r4,r22,28
 400a6c0:	28c7883a 	add	r3,r5,r3
 400a6c4:	b82ed13a 	srli	r23,r23,4
 400a6c8:	18c00003 	ldbu	r3,0(r3)
 400a6cc:	b02cd13a 	srli	r22,r22,4
 400a6d0:	25eeb03a 	or	r23,r4,r23
 400a6d4:	10c00005 	stb	r3,0(r2)
 400a6d8:	bd86b03a 	or	r3,r23,r22
 400a6dc:	1027883a 	mov	r19,r2
 400a6e0:	10bfffc4 	addi	r2,r2,-1
 400a6e4:	183ff41e 	bne	r3,zero,400a6b8 <___vfprintf_internal_r+0x10e4>
 400a6e8:	003f1706 	br	400a348 <___vfprintf_internal_r+0xd74>
 400a6ec:	b0025826 	beq	r22,zero,400b050 <___vfprintf_internal_r+0x1a7c>
 400a6f0:	b807883a 	mov	r3,r23
 400a6f4:	d8810dc4 	addi	r2,sp,1079
 400a6f8:	882f883a 	mov	r23,r17
 400a6fc:	04c00244 	movi	r19,9
 400a700:	8023883a 	mov	r17,r16
 400a704:	da412815 	stw	r9,1184(sp)
 400a708:	1821883a 	mov	r16,r3
 400a70c:	8009883a 	mov	r4,r16
 400a710:	b00b883a 	mov	r5,r22
 400a714:	01800284 	movi	r6,10
 400a718:	000f883a 	mov	r7,zero
 400a71c:	1029883a 	mov	r20,r2
 400a720:	40104600 	call	4010460 <__umoddi3>
 400a724:	10800c04 	addi	r2,r2,48
 400a728:	8009883a 	mov	r4,r16
 400a72c:	b00b883a 	mov	r5,r22
 400a730:	a0800005 	stb	r2,0(r20)
 400a734:	01800284 	movi	r6,10
 400a738:	000f883a 	mov	r7,zero
 400a73c:	400fe980 	call	400fe98 <__udivdi3>
 400a740:	1021883a 	mov	r16,r2
 400a744:	182d883a 	mov	r22,r3
 400a748:	a0bfffc4 	addi	r2,r20,-1
 400a74c:	183fef1e 	bne	r3,zero,400a70c <___vfprintf_internal_r+0x1138>
 400a750:	9c3fee36 	bltu	r19,r16,400a70c <___vfprintf_internal_r+0x1138>
 400a754:	da412817 	ldw	r9,1184(sp)
 400a758:	8005883a 	mov	r2,r16
 400a75c:	8821883a 	mov	r16,r17
 400a760:	b823883a 	mov	r17,r23
 400a764:	102f883a 	mov	r23,r2
 400a768:	d8812717 	ldw	r2,1180(sp)
 400a76c:	a4ffffc4 	addi	r19,r20,-1
 400a770:	bdc00c04 	addi	r23,r23,48
 400a774:	14c5c83a 	sub	r2,r2,r19
 400a778:	a5ffffc5 	stb	r23,-1(r20)
 400a77c:	d8812b15 	stw	r2,1196(sp)
 400a780:	003c7906 	br	4009968 <___vfprintf_internal_r+0x394>
 400a784:	00c00044 	movi	r3,1
 400a788:	bd84b03a 	or	r2,r23,r22
 400a78c:	003c6806 	br	4009930 <___vfprintf_internal_r+0x35c>
 400a790:	dc812417 	ldw	r18,1168(sp)
 400a794:	0480ee0e 	bge	zero,r18,400ab50 <___vfprintf_internal_r+0x157c>
 400a798:	d9013217 	ldw	r4,1224(sp)
 400a79c:	4cc00015 	stw	r19,0(r9)
 400a7a0:	9100c616 	blt	r18,r4,400aabc <___vfprintf_internal_r+0x14e8>
 400a7a4:	49000115 	stw	r4,4(r9)
 400a7a8:	4111883a 	add	r8,r8,r4
 400a7ac:	18c00044 	addi	r3,r3,1
 400a7b0:	da011d15 	stw	r8,1140(sp)
 400a7b4:	d8c11c15 	stw	r3,1136(sp)
 400a7b8:	008001c4 	movi	r2,7
 400a7bc:	10c20916 	blt	r2,r3,400afe4 <___vfprintf_internal_r+0x1a10>
 400a7c0:	4a400204 	addi	r9,r9,8
 400a7c4:	d8813217 	ldw	r2,1224(sp)
 400a7c8:	90a5c83a 	sub	r18,r18,r2
 400a7cc:	04beae0e 	bge	zero,r18,400a288 <___vfprintf_internal_r+0xcb4>
 400a7d0:	04c00404 	movi	r19,16
 400a7d4:	d8c11c17 	ldw	r3,1136(sp)
 400a7d8:	050100f4 	movhi	r20,1027
 400a7dc:	a5366c84 	addi	r20,r20,-9806
 400a7e0:	9c81be0e 	bge	r19,r18,400aedc <___vfprintf_internal_r+0x1908>
 400a7e4:	058001c4 	movi	r22,7
 400a7e8:	ddc12917 	ldw	r23,1188(sp)
 400a7ec:	00000306 	br	400a7fc <___vfprintf_internal_r+0x1228>
 400a7f0:	4a400204 	addi	r9,r9,8
 400a7f4:	94bffc04 	addi	r18,r18,-16
 400a7f8:	9c81b80e 	bge	r19,r18,400aedc <___vfprintf_internal_r+0x1908>
 400a7fc:	4d000015 	stw	r20,0(r9)
 400a800:	4cc00115 	stw	r19,4(r9)
 400a804:	42000404 	addi	r8,r8,16
 400a808:	18c00044 	addi	r3,r3,1
 400a80c:	da011d15 	stw	r8,1140(sp)
 400a810:	d8c11c15 	stw	r3,1136(sp)
 400a814:	b0fff60e 	bge	r22,r3,400a7f0 <___vfprintf_internal_r+0x121c>
 400a818:	8809883a 	mov	r4,r17
 400a81c:	b80b883a 	mov	r5,r23
 400a820:	d9811b04 	addi	r6,sp,1132
 400a824:	40095a00 	call	40095a0 <__sprint_r>
 400a828:	103cfd1e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a82c:	da011d17 	ldw	r8,1140(sp)
 400a830:	d8c11c17 	ldw	r3,1136(sp)
 400a834:	da400404 	addi	r9,sp,16
 400a838:	003fee06 	br	400a7f4 <___vfprintf_internal_r+0x1220>
 400a83c:	d9412917 	ldw	r5,1188(sp)
 400a840:	8809883a 	mov	r4,r17
 400a844:	d9811b04 	addi	r6,sp,1132
 400a848:	40095a00 	call	40095a0 <__sprint_r>
 400a84c:	103cf41e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a850:	da011d17 	ldw	r8,1140(sp)
 400a854:	d8c11c17 	ldw	r3,1136(sp)
 400a858:	da400404 	addi	r9,sp,16
 400a85c:	003dee06 	br	400a018 <___vfprintf_internal_r+0xa44>
 400a860:	00c00084 	movi	r3,2
 400a864:	bd84b03a 	or	r2,r23,r22
 400a868:	d8012585 	stb	zero,1174(sp)
 400a86c:	003c3006 	br	4009930 <___vfprintf_internal_r+0x35c>
 400a870:	d8813217 	ldw	r2,1224(sp)
 400a874:	14ffffc4 	addi	r19,r2,-1
 400a878:	04ff630e 	bge	zero,r19,400a608 <___vfprintf_internal_r+0x1034>
 400a87c:	05800404 	movi	r22,16
 400a880:	050100f4 	movhi	r20,1027
 400a884:	a5366c84 	addi	r20,r20,-9806
 400a888:	b4c03c0e 	bge	r22,r19,400a97c <___vfprintf_internal_r+0x13a8>
 400a88c:	05c001c4 	movi	r23,7
 400a890:	df012917 	ldw	fp,1188(sp)
 400a894:	00000306 	br	400a8a4 <___vfprintf_internal_r+0x12d0>
 400a898:	94800204 	addi	r18,r18,8
 400a89c:	9cfffc04 	addi	r19,r19,-16
 400a8a0:	b4c0360e 	bge	r22,r19,400a97c <___vfprintf_internal_r+0x13a8>
 400a8a4:	95000015 	stw	r20,0(r18)
 400a8a8:	95800115 	stw	r22,4(r18)
 400a8ac:	42000404 	addi	r8,r8,16
 400a8b0:	18c00044 	addi	r3,r3,1
 400a8b4:	da011d15 	stw	r8,1140(sp)
 400a8b8:	d8c11c15 	stw	r3,1136(sp)
 400a8bc:	b8fff60e 	bge	r23,r3,400a898 <___vfprintf_internal_r+0x12c4>
 400a8c0:	8809883a 	mov	r4,r17
 400a8c4:	e00b883a 	mov	r5,fp
 400a8c8:	d9811b04 	addi	r6,sp,1132
 400a8cc:	40095a00 	call	40095a0 <__sprint_r>
 400a8d0:	103cd31e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a8d4:	da011d17 	ldw	r8,1140(sp)
 400a8d8:	d8c11c17 	ldw	r3,1136(sp)
 400a8dc:	dc800404 	addi	r18,sp,16
 400a8e0:	003fee06 	br	400a89c <___vfprintf_internal_r+0x12c8>
 400a8e4:	8088703a 	and	r4,r16,r2
 400a8e8:	203f1d1e 	bne	r4,zero,400a560 <___vfprintf_internal_r+0xf8c>
 400a8ec:	48800115 	stw	r2,4(r9)
 400a8f0:	42000044 	addi	r8,r8,1
 400a8f4:	18c00044 	addi	r3,r3,1
 400a8f8:	da011d15 	stw	r8,1140(sp)
 400a8fc:	d8c11c15 	stw	r3,1136(sp)
 400a900:	008001c4 	movi	r2,7
 400a904:	10c00216 	blt	r2,r3,400a910 <___vfprintf_internal_r+0x133c>
 400a908:	4c800204 	addi	r18,r9,8
 400a90c:	003f3e06 	br	400a608 <___vfprintf_internal_r+0x1034>
 400a910:	d9412917 	ldw	r5,1188(sp)
 400a914:	8809883a 	mov	r4,r17
 400a918:	d9811b04 	addi	r6,sp,1132
 400a91c:	40095a00 	call	40095a0 <__sprint_r>
 400a920:	103cbf1e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a924:	dc800404 	addi	r18,sp,16
 400a928:	da011d17 	ldw	r8,1140(sp)
 400a92c:	d8c11c17 	ldw	r3,1136(sp)
 400a930:	003f3506 	br	400a608 <___vfprintf_internal_r+0x1034>
 400a934:	d9412917 	ldw	r5,1188(sp)
 400a938:	8809883a 	mov	r4,r17
 400a93c:	d9811b04 	addi	r6,sp,1132
 400a940:	40095a00 	call	40095a0 <__sprint_r>
 400a944:	103cb61e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a948:	da011d17 	ldw	r8,1140(sp)
 400a94c:	d8c11c17 	ldw	r3,1136(sp)
 400a950:	da400404 	addi	r9,sp,16
 400a954:	003f0b06 	br	400a584 <___vfprintf_internal_r+0xfb0>
 400a958:	d9412917 	ldw	r5,1188(sp)
 400a95c:	8809883a 	mov	r4,r17
 400a960:	d9811b04 	addi	r6,sp,1132
 400a964:	40095a00 	call	40095a0 <__sprint_r>
 400a968:	103cad1e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a96c:	da011d17 	ldw	r8,1140(sp)
 400a970:	d8c11c17 	ldw	r3,1136(sp)
 400a974:	dc800404 	addi	r18,sp,16
 400a978:	003f0d06 	br	400a5b0 <___vfprintf_internal_r+0xfdc>
 400a97c:	95000015 	stw	r20,0(r18)
 400a980:	94c00115 	stw	r19,4(r18)
 400a984:	44d1883a 	add	r8,r8,r19
 400a988:	003f1906 	br	400a5f0 <___vfprintf_internal_r+0x101c>
 400a98c:	d9412917 	ldw	r5,1188(sp)
 400a990:	8809883a 	mov	r4,r17
 400a994:	d9811b04 	addi	r6,sp,1132
 400a998:	40095a00 	call	40095a0 <__sprint_r>
 400a99c:	103ca01e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400a9a0:	da011d17 	ldw	r8,1140(sp)
 400a9a4:	d8c11c17 	ldw	r3,1136(sp)
 400a9a8:	da400404 	addi	r9,sp,16
 400a9ac:	003db706 	br	400a08c <___vfprintf_internal_r+0xab8>
 400a9b0:	4d000015 	stw	r20,0(r9)
 400a9b4:	4c800115 	stw	r18,4(r9)
 400a9b8:	4491883a 	add	r8,r8,r18
 400a9bc:	003de706 	br	400a15c <___vfprintf_internal_r+0xb88>
 400a9c0:	8080100c 	andi	r2,r16,64
 400a9c4:	10010226 	beq	r2,zero,400add0 <___vfprintf_internal_r+0x17fc>
 400a9c8:	d8812d17 	ldw	r2,1204(sp)
 400a9cc:	002d883a 	mov	r22,zero
 400a9d0:	00c00044 	movi	r3,1
 400a9d4:	15c0000b 	ldhu	r23,0(r2)
 400a9d8:	10800104 	addi	r2,r2,4
 400a9dc:	d8812d15 	stw	r2,1204(sp)
 400a9e0:	d8012585 	stb	zero,1174(sp)
 400a9e4:	b805883a 	mov	r2,r23
 400a9e8:	003bd106 	br	4009930 <___vfprintf_internal_r+0x35c>
 400a9ec:	d9012d17 	ldw	r4,1204(sp)
 400a9f0:	25800017 	ldw	r22,0(r4)
 400a9f4:	25000117 	ldw	r20,4(r4)
 400a9f8:	21000204 	addi	r4,r4,8
 400a9fc:	d9012d15 	stw	r4,1204(sp)
 400aa00:	dd813315 	stw	r22,1228(sp)
 400aa04:	dd013415 	stw	r20,1232(sp)
 400aa08:	003d2b06 	br	4009eb8 <___vfprintf_internal_r+0x8e4>
 400aa0c:	8080100c 	andi	r2,r16,64
 400aa10:	1000fe26 	beq	r2,zero,400ae0c <___vfprintf_internal_r+0x1838>
 400aa14:	d9012d17 	ldw	r4,1204(sp)
 400aa18:	002d883a 	mov	r22,zero
 400aa1c:	0007883a 	mov	r3,zero
 400aa20:	25c0000b 	ldhu	r23,0(r4)
 400aa24:	21000104 	addi	r4,r4,4
 400aa28:	d9012d15 	stw	r4,1204(sp)
 400aa2c:	b805883a 	mov	r2,r23
 400aa30:	d8012585 	stb	zero,1174(sp)
 400aa34:	003bbe06 	br	4009930 <___vfprintf_internal_r+0x35c>
 400aa38:	8080100c 	andi	r2,r16,64
 400aa3c:	1000ed26 	beq	r2,zero,400adf4 <___vfprintf_internal_r+0x1820>
 400aa40:	d9012d17 	ldw	r4,1204(sp)
 400aa44:	002d883a 	mov	r22,zero
 400aa48:	25c0000b 	ldhu	r23,0(r4)
 400aa4c:	21000104 	addi	r4,r4,4
 400aa50:	d9012d15 	stw	r4,1204(sp)
 400aa54:	003cd206 	br	4009da0 <___vfprintf_internal_r+0x7cc>
 400aa58:	00c00084 	movi	r3,2
 400aa5c:	d8012585 	stb	zero,1174(sp)
 400aa60:	003bb306 	br	4009930 <___vfprintf_internal_r+0x35c>
 400aa64:	8080040c 	andi	r2,r16,16
 400aa68:	1000f11e 	bne	r2,zero,400ae30 <___vfprintf_internal_r+0x185c>
 400aa6c:	8400100c 	andi	r16,r16,64
 400aa70:	80015526 	beq	r16,zero,400afc8 <___vfprintf_internal_r+0x19f4>
 400aa74:	da012d17 	ldw	r8,1204(sp)
 400aa78:	d8c12c17 	ldw	r3,1200(sp)
 400aa7c:	40800017 	ldw	r2,0(r8)
 400aa80:	42000104 	addi	r8,r8,4
 400aa84:	da012d15 	stw	r8,1204(sp)
 400aa88:	10c0000d 	sth	r3,0(r2)
 400aa8c:	003b0706 	br	40096ac <___vfprintf_internal_r+0xd8>
 400aa90:	8080100c 	andi	r2,r16,64
 400aa94:	1000c726 	beq	r2,zero,400adb4 <___vfprintf_internal_r+0x17e0>
 400aa98:	da012d17 	ldw	r8,1204(sp)
 400aa9c:	45c0000f 	ldh	r23,0(r8)
 400aaa0:	42000104 	addi	r8,r8,4
 400aaa4:	da012d15 	stw	r8,1204(sp)
 400aaa8:	b82dd7fa 	srai	r22,r23,31
 400aaac:	b005883a 	mov	r2,r22
 400aab0:	003c1006 	br	4009af4 <___vfprintf_internal_r+0x520>
 400aab4:	ac800007 	ldb	r18,0(r21)
 400aab8:	003b2406 	br	400974c <___vfprintf_internal_r+0x178>
 400aabc:	4c800115 	stw	r18,4(r9)
 400aac0:	9211883a 	add	r8,r18,r8
 400aac4:	18c00044 	addi	r3,r3,1
 400aac8:	da011d15 	stw	r8,1140(sp)
 400aacc:	d8c11c15 	stw	r3,1136(sp)
 400aad0:	008001c4 	movi	r2,7
 400aad4:	10c15416 	blt	r2,r3,400b028 <___vfprintf_internal_r+0x1a54>
 400aad8:	4a400204 	addi	r9,r9,8
 400aadc:	d8813717 	ldw	r2,1244(sp)
 400aae0:	9ca7883a 	add	r19,r19,r18
 400aae4:	48800015 	stw	r2,0(r9)
 400aae8:	00800044 	movi	r2,1
 400aaec:	48800115 	stw	r2,4(r9)
 400aaf0:	4091883a 	add	r8,r8,r2
 400aaf4:	1887883a 	add	r3,r3,r2
 400aaf8:	da011d15 	stw	r8,1140(sp)
 400aafc:	d8c11c15 	stw	r3,1136(sp)
 400ab00:	008001c4 	movi	r2,7
 400ab04:	10c14016 	blt	r2,r3,400b008 <___vfprintf_internal_r+0x1a34>
 400ab08:	4a400204 	addi	r9,r9,8
 400ab0c:	d9013217 	ldw	r4,1224(sp)
 400ab10:	da011d17 	ldw	r8,1140(sp)
 400ab14:	d8c11c17 	ldw	r3,1136(sp)
 400ab18:	24a5c83a 	sub	r18,r4,r18
 400ab1c:	4cc00015 	stw	r19,0(r9)
 400ab20:	003fa406 	br	400a9b4 <___vfprintf_internal_r+0x13e0>
 400ab24:	04c100f4 	movhi	r19,1027
 400ab28:	9cf65904 	addi	r19,r19,-9884
 400ab2c:	003cf406 	br	4009f00 <___vfprintf_internal_r+0x92c>
 400ab30:	d9412917 	ldw	r5,1188(sp)
 400ab34:	8809883a 	mov	r4,r17
 400ab38:	d9811b04 	addi	r6,sp,1132
 400ab3c:	40095a00 	call	40095a0 <__sprint_r>
 400ab40:	103c371e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400ab44:	da011d17 	ldw	r8,1140(sp)
 400ab48:	da400404 	addi	r9,sp,16
 400ab4c:	003e1c06 	br	400a3c0 <___vfprintf_internal_r+0xdec>
 400ab50:	008100f4 	movhi	r2,1027
 400ab54:	10b66804 	addi	r2,r2,-9824
 400ab58:	48800015 	stw	r2,0(r9)
 400ab5c:	00800044 	movi	r2,1
 400ab60:	48800115 	stw	r2,4(r9)
 400ab64:	4091883a 	add	r8,r8,r2
 400ab68:	1887883a 	add	r3,r3,r2
 400ab6c:	da011d15 	stw	r8,1140(sp)
 400ab70:	d8c11c15 	stw	r3,1136(sp)
 400ab74:	008001c4 	movi	r2,7
 400ab78:	10c0c316 	blt	r2,r3,400ae88 <___vfprintf_internal_r+0x18b4>
 400ab7c:	4a400204 	addi	r9,r9,8
 400ab80:	9000041e 	bne	r18,zero,400ab94 <___vfprintf_internal_r+0x15c0>
 400ab84:	d8c13217 	ldw	r3,1224(sp)
 400ab88:	1800021e 	bne	r3,zero,400ab94 <___vfprintf_internal_r+0x15c0>
 400ab8c:	8080004c 	andi	r2,r16,1
 400ab90:	103d7826 	beq	r2,zero,400a174 <___vfprintf_internal_r+0xba0>
 400ab94:	d8c11c17 	ldw	r3,1136(sp)
 400ab98:	d9013717 	ldw	r4,1244(sp)
 400ab9c:	00800044 	movi	r2,1
 400aba0:	48800115 	stw	r2,4(r9)
 400aba4:	49000015 	stw	r4,0(r9)
 400aba8:	4091883a 	add	r8,r8,r2
 400abac:	1887883a 	add	r3,r3,r2
 400abb0:	da011d15 	stw	r8,1140(sp)
 400abb4:	d8c11c15 	stw	r3,1136(sp)
 400abb8:	008001c4 	movi	r2,7
 400abbc:	10c12e16 	blt	r2,r3,400b078 <___vfprintf_internal_r+0x1aa4>
 400abc0:	4a400204 	addi	r9,r9,8
 400abc4:	04a5c83a 	sub	r18,zero,r18
 400abc8:	0480de0e 	bge	zero,r18,400af44 <___vfprintf_internal_r+0x1970>
 400abcc:	05800404 	movi	r22,16
 400abd0:	050100f4 	movhi	r20,1027
 400abd4:	a5366c84 	addi	r20,r20,-9806
 400abd8:	b480e20e 	bge	r22,r18,400af64 <___vfprintf_internal_r+0x1990>
 400abdc:	05c001c4 	movi	r23,7
 400abe0:	df012917 	ldw	fp,1188(sp)
 400abe4:	00000306 	br	400abf4 <___vfprintf_internal_r+0x1620>
 400abe8:	4a400204 	addi	r9,r9,8
 400abec:	94bffc04 	addi	r18,r18,-16
 400abf0:	b480dc0e 	bge	r22,r18,400af64 <___vfprintf_internal_r+0x1990>
 400abf4:	4d000015 	stw	r20,0(r9)
 400abf8:	4d800115 	stw	r22,4(r9)
 400abfc:	42000404 	addi	r8,r8,16
 400ac00:	18c00044 	addi	r3,r3,1
 400ac04:	da011d15 	stw	r8,1140(sp)
 400ac08:	d8c11c15 	stw	r3,1136(sp)
 400ac0c:	b8fff60e 	bge	r23,r3,400abe8 <___vfprintf_internal_r+0x1614>
 400ac10:	8809883a 	mov	r4,r17
 400ac14:	e00b883a 	mov	r5,fp
 400ac18:	d9811b04 	addi	r6,sp,1132
 400ac1c:	40095a00 	call	40095a0 <__sprint_r>
 400ac20:	103bff1e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400ac24:	da011d17 	ldw	r8,1140(sp)
 400ac28:	d8c11c17 	ldw	r3,1136(sp)
 400ac2c:	da400404 	addi	r9,sp,16
 400ac30:	003fee06 	br	400abec <___vfprintf_internal_r+0x1618>
 400ac34:	da413c15 	stw	r9,1264(sp)
 400ac38:	40077340 	call	4007734 <__isnand>
 400ac3c:	da413c17 	ldw	r9,1264(sp)
 400ac40:	1000851e 	bne	r2,zero,400ae58 <___vfprintf_internal_r+0x1884>
 400ac44:	00bfffc4 	movi	r2,-1
 400ac48:	e0817626 	beq	fp,r2,400b224 <___vfprintf_internal_r+0x1c50>
 400ac4c:	008019c4 	movi	r2,103
 400ac50:	90817126 	beq	r18,r2,400b218 <___vfprintf_internal_r+0x1c44>
 400ac54:	008011c4 	movi	r2,71
 400ac58:	90816f26 	beq	r18,r2,400b218 <___vfprintf_internal_r+0x1c44>
 400ac5c:	82004014 	ori	r8,r16,256
 400ac60:	da012a15 	stw	r8,1192(sp)
 400ac64:	a0017116 	blt	r20,zero,400b22c <___vfprintf_internal_r+0x1c58>
 400ac68:	d8012f05 	stb	zero,1212(sp)
 400ac6c:	00801984 	movi	r2,102
 400ac70:	90811226 	beq	r18,r2,400b0bc <___vfprintf_internal_r+0x1ae8>
 400ac74:	00801184 	movi	r2,70
 400ac78:	90811026 	beq	r18,r2,400b0bc <___vfprintf_internal_r+0x1ae8>
 400ac7c:	00801944 	movi	r2,101
 400ac80:	90819b26 	beq	r18,r2,400b2f0 <___vfprintf_internal_r+0x1d1c>
 400ac84:	00801144 	movi	r2,69
 400ac88:	90819926 	beq	r18,r2,400b2f0 <___vfprintf_internal_r+0x1d1c>
 400ac8c:	e02f883a 	mov	r23,fp
 400ac90:	d8812404 	addi	r2,sp,1168
 400ac94:	d8800115 	stw	r2,4(sp)
 400ac98:	d8812304 	addi	r2,sp,1164
 400ac9c:	d8800215 	stw	r2,8(sp)
 400aca0:	d8812204 	addi	r2,sp,1160
 400aca4:	ddc00015 	stw	r23,0(sp)
 400aca8:	d8800315 	stw	r2,12(sp)
 400acac:	8809883a 	mov	r4,r17
 400acb0:	b00b883a 	mov	r5,r22
 400acb4:	a00d883a 	mov	r6,r20
 400acb8:	01c00084 	movi	r7,2
 400acbc:	da413c15 	stw	r9,1264(sp)
 400acc0:	400b8580 	call	400b858 <_dtoa_r>
 400acc4:	1027883a 	mov	r19,r2
 400acc8:	008019c4 	movi	r2,103
 400accc:	da413c17 	ldw	r9,1264(sp)
 400acd0:	90818c1e 	bne	r18,r2,400b304 <___vfprintf_internal_r+0x1d30>
 400acd4:	8080004c 	andi	r2,r16,1
 400acd8:	10017926 	beq	r2,zero,400b2c0 <___vfprintf_internal_r+0x1cec>
 400acdc:	00801184 	movi	r2,70
 400ace0:	9dc7883a 	add	r3,r19,r23
 400ace4:	90810626 	beq	r18,r2,400b100 <___vfprintf_internal_r+0x1b2c>
 400ace8:	b009883a 	mov	r4,r22
 400acec:	a00b883a 	mov	r5,r20
 400acf0:	000d883a 	mov	r6,zero
 400acf4:	000f883a 	mov	r7,zero
 400acf8:	d8c13b15 	stw	r3,1260(sp)
 400acfc:	da413c15 	stw	r9,1264(sp)
 400ad00:	40109ec0 	call	40109ec <__eqdf2>
 400ad04:	d8c13b17 	ldw	r3,1260(sp)
 400ad08:	da413c17 	ldw	r9,1264(sp)
 400ad0c:	10000726 	beq	r2,zero,400ad2c <___vfprintf_internal_r+0x1758>
 400ad10:	d8812217 	ldw	r2,1160(sp)
 400ad14:	10c1962e 	bgeu	r2,r3,400b370 <___vfprintf_internal_r+0x1d9c>
 400ad18:	01000c04 	movi	r4,48
 400ad1c:	11000005 	stb	r4,0(r2)
 400ad20:	10800044 	addi	r2,r2,1
 400ad24:	d8812215 	stw	r2,1160(sp)
 400ad28:	10fffc1e 	bne	r2,r3,400ad1c <___vfprintf_internal_r+0x1748>
 400ad2c:	1cc7c83a 	sub	r3,r3,r19
 400ad30:	d8c13215 	stw	r3,1224(sp)
 400ad34:	008019c4 	movi	r2,103
 400ad38:	90810626 	beq	r18,r2,400b154 <___vfprintf_internal_r+0x1b80>
 400ad3c:	008011c4 	movi	r2,71
 400ad40:	90810426 	beq	r18,r2,400b154 <___vfprintf_internal_r+0x1b80>
 400ad44:	00801984 	movi	r2,102
 400ad48:	90819a1e 	bne	r18,r2,400b3b4 <___vfprintf_internal_r+0x1de0>
 400ad4c:	d8812417 	ldw	r2,1168(sp)
 400ad50:	d8812b15 	stw	r2,1196(sp)
 400ad54:	0081880e 	bge	zero,r2,400b378 <___vfprintf_internal_r+0x1da4>
 400ad58:	e000021e 	bne	fp,zero,400ad64 <___vfprintf_internal_r+0x1790>
 400ad5c:	8400004c 	andi	r16,r16,1
 400ad60:	80000426 	beq	r16,zero,400ad74 <___vfprintf_internal_r+0x17a0>
 400ad64:	d8812b17 	ldw	r2,1196(sp)
 400ad68:	e2000044 	addi	r8,fp,1
 400ad6c:	1205883a 	add	r2,r2,r8
 400ad70:	d8812b15 	stw	r2,1196(sp)
 400ad74:	d8812815 	stw	r2,1184(sp)
 400ad78:	10011716 	blt	r2,zero,400b1d8 <___vfprintf_internal_r+0x1c04>
 400ad7c:	ddc12f07 	ldb	r23,1212(sp)
 400ad80:	b800ca26 	beq	r23,zero,400b0ac <___vfprintf_internal_r+0x1ad8>
 400ad84:	00800b44 	movi	r2,45
 400ad88:	d8812585 	stb	r2,1174(sp)
 400ad8c:	dc012a17 	ldw	r16,1192(sp)
 400ad90:	d8013115 	stw	zero,1220(sp)
 400ad94:	003afe06 	br	4009990 <___vfprintf_internal_r+0x3bc>
 400ad98:	d8812b17 	ldw	r2,1196(sp)
 400ad9c:	d8812815 	stw	r2,1184(sp)
 400ada0:	10005e16 	blt	r2,zero,400af1c <___vfprintf_internal_r+0x1948>
 400ada4:	d8812583 	ldbu	r2,1174(sp)
 400ada8:	ddc12d15 	stw	r23,1204(sp)
 400adac:	d8013115 	stw	zero,1220(sp)
 400adb0:	003af306 	br	4009980 <___vfprintf_internal_r+0x3ac>
 400adb4:	d8812d17 	ldw	r2,1204(sp)
 400adb8:	15c00017 	ldw	r23,0(r2)
 400adbc:	10800104 	addi	r2,r2,4
 400adc0:	d8812d15 	stw	r2,1204(sp)
 400adc4:	b82dd7fa 	srai	r22,r23,31
 400adc8:	b005883a 	mov	r2,r22
 400adcc:	003b4906 	br	4009af4 <___vfprintf_internal_r+0x520>
 400add0:	d8c12d17 	ldw	r3,1204(sp)
 400add4:	002d883a 	mov	r22,zero
 400add8:	1dc00017 	ldw	r23,0(r3)
 400addc:	18c00104 	addi	r3,r3,4
 400ade0:	d8c12d15 	stw	r3,1204(sp)
 400ade4:	b805883a 	mov	r2,r23
 400ade8:	00c00044 	movi	r3,1
 400adec:	d8012585 	stb	zero,1174(sp)
 400adf0:	003acf06 	br	4009930 <___vfprintf_internal_r+0x35c>
 400adf4:	da012d17 	ldw	r8,1204(sp)
 400adf8:	002d883a 	mov	r22,zero
 400adfc:	45c00017 	ldw	r23,0(r8)
 400ae00:	42000104 	addi	r8,r8,4
 400ae04:	da012d15 	stw	r8,1204(sp)
 400ae08:	003be506 	br	4009da0 <___vfprintf_internal_r+0x7cc>
 400ae0c:	da012d17 	ldw	r8,1204(sp)
 400ae10:	002d883a 	mov	r22,zero
 400ae14:	0007883a 	mov	r3,zero
 400ae18:	45c00017 	ldw	r23,0(r8)
 400ae1c:	42000104 	addi	r8,r8,4
 400ae20:	da012d15 	stw	r8,1204(sp)
 400ae24:	b805883a 	mov	r2,r23
 400ae28:	d8012585 	stb	zero,1174(sp)
 400ae2c:	003ac006 	br	4009930 <___vfprintf_internal_r+0x35c>
 400ae30:	d8c12d17 	ldw	r3,1204(sp)
 400ae34:	d9012c17 	ldw	r4,1200(sp)
 400ae38:	18800017 	ldw	r2,0(r3)
 400ae3c:	18c00104 	addi	r3,r3,4
 400ae40:	d8c12d15 	stw	r3,1204(sp)
 400ae44:	11000015 	stw	r4,0(r2)
 400ae48:	003a1806 	br	40096ac <___vfprintf_internal_r+0xd8>
 400ae4c:	073fffc4 	movi	fp,-1
 400ae50:	202b883a 	mov	r21,r4
 400ae54:	003a3e06 	br	4009750 <___vfprintf_internal_r+0x17c>
 400ae58:	008011c4 	movi	r2,71
 400ae5c:	14809016 	blt	r2,r18,400b0a0 <___vfprintf_internal_r+0x1acc>
 400ae60:	04c100f4 	movhi	r19,1027
 400ae64:	9cf65a04 	addi	r19,r19,-9880
 400ae68:	00c000c4 	movi	r3,3
 400ae6c:	00bfdfc4 	movi	r2,-129
 400ae70:	80a0703a 	and	r16,r16,r2
 400ae74:	d8c12815 	stw	r3,1184(sp)
 400ae78:	d8812583 	ldbu	r2,1174(sp)
 400ae7c:	d8c12b15 	stw	r3,1196(sp)
 400ae80:	d8013115 	stw	zero,1220(sp)
 400ae84:	003abe06 	br	4009980 <___vfprintf_internal_r+0x3ac>
 400ae88:	d9412917 	ldw	r5,1188(sp)
 400ae8c:	8809883a 	mov	r4,r17
 400ae90:	d9811b04 	addi	r6,sp,1132
 400ae94:	40095a00 	call	40095a0 <__sprint_r>
 400ae98:	103b611e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400ae9c:	dc812417 	ldw	r18,1168(sp)
 400aea0:	da011d17 	ldw	r8,1140(sp)
 400aea4:	da400404 	addi	r9,sp,16
 400aea8:	003f3506 	br	400ab80 <___vfprintf_internal_r+0x15ac>
 400aeac:	ad400044 	addi	r21,r21,1
 400aeb0:	84000814 	ori	r16,r16,32
 400aeb4:	14800047 	ldb	r18,1(r2)
 400aeb8:	003a2406 	br	400974c <___vfprintf_internal_r+0x178>
 400aebc:	d9412917 	ldw	r5,1188(sp)
 400aec0:	8809883a 	mov	r4,r17
 400aec4:	d9811b04 	addi	r6,sp,1132
 400aec8:	40095a00 	call	40095a0 <__sprint_r>
 400aecc:	103b541e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400aed0:	da011d17 	ldw	r8,1140(sp)
 400aed4:	da400404 	addi	r9,sp,16
 400aed8:	003d4a06 	br	400a404 <___vfprintf_internal_r+0xe30>
 400aedc:	4d000015 	stw	r20,0(r9)
 400aee0:	4c800115 	stw	r18,4(r9)
 400aee4:	4491883a 	add	r8,r8,r18
 400aee8:	18c00044 	addi	r3,r3,1
 400aeec:	da011d15 	stw	r8,1140(sp)
 400aef0:	d8c11c15 	stw	r3,1136(sp)
 400aef4:	008001c4 	movi	r2,7
 400aef8:	10fcdc16 	blt	r2,r3,400a26c <___vfprintf_internal_r+0xc98>
 400aefc:	4a400204 	addi	r9,r9,8
 400af00:	003ce106 	br	400a288 <___vfprintf_internal_r+0xcb4>
 400af04:	da413c15 	stw	r9,1264(sp)
 400af08:	40095140 	call	4009514 <strlen>
 400af0c:	d8812b15 	stw	r2,1196(sp)
 400af10:	d8812815 	stw	r2,1184(sp)
 400af14:	da413c17 	ldw	r9,1264(sp)
 400af18:	103fa20e 	bge	r2,zero,400ada4 <___vfprintf_internal_r+0x17d0>
 400af1c:	d8012815 	stw	zero,1184(sp)
 400af20:	003fa006 	br	400ada4 <___vfprintf_internal_r+0x17d0>
 400af24:	d9412917 	ldw	r5,1188(sp)
 400af28:	8809883a 	mov	r4,r17
 400af2c:	d9811b04 	addi	r6,sp,1132
 400af30:	40095a00 	call	40095a0 <__sprint_r>
 400af34:	103b3a1e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400af38:	da011d17 	ldw	r8,1140(sp)
 400af3c:	d8c11c17 	ldw	r3,1136(sp)
 400af40:	da400404 	addi	r9,sp,16
 400af44:	d8813217 	ldw	r2,1224(sp)
 400af48:	4cc00015 	stw	r19,0(r9)
 400af4c:	48800115 	stw	r2,4(r9)
 400af50:	4091883a 	add	r8,r8,r2
 400af54:	003c8106 	br	400a15c <___vfprintf_internal_r+0xb88>
 400af58:	00800b44 	movi	r2,45
 400af5c:	d8812585 	stb	r2,1174(sp)
 400af60:	003be306 	br	4009ef0 <___vfprintf_internal_r+0x91c>
 400af64:	4d000015 	stw	r20,0(r9)
 400af68:	4c800115 	stw	r18,4(r9)
 400af6c:	4491883a 	add	r8,r8,r18
 400af70:	18c00044 	addi	r3,r3,1
 400af74:	da011d15 	stw	r8,1140(sp)
 400af78:	d8c11c15 	stw	r3,1136(sp)
 400af7c:	008001c4 	movi	r2,7
 400af80:	10ffe816 	blt	r2,r3,400af24 <___vfprintf_internal_r+0x1950>
 400af84:	4a400204 	addi	r9,r9,8
 400af88:	003fee06 	br	400af44 <___vfprintf_internal_r+0x1970>
 400af8c:	df012b15 	stw	fp,1196(sp)
 400af90:	00800184 	movi	r2,6
 400af94:	1700072e 	bgeu	r2,fp,400afb4 <___vfprintf_internal_r+0x19e0>
 400af98:	d8812b15 	stw	r2,1196(sp)
 400af9c:	d8812815 	stw	r2,1184(sp)
 400afa0:	ddc12d15 	stw	r23,1204(sp)
 400afa4:	04c100f4 	movhi	r19,1027
 400afa8:	9cf66604 	addi	r19,r19,-9832
 400afac:	d8013115 	stw	zero,1220(sp)
 400afb0:	003a7a06 	br	400999c <___vfprintf_internal_r+0x3c8>
 400afb4:	d8812b17 	ldw	r2,1196(sp)
 400afb8:	d8812815 	stw	r2,1184(sp)
 400afbc:	103ff80e 	bge	r2,zero,400afa0 <___vfprintf_internal_r+0x19cc>
 400afc0:	d8012815 	stw	zero,1184(sp)
 400afc4:	003ff606 	br	400afa0 <___vfprintf_internal_r+0x19cc>
 400afc8:	d9012d17 	ldw	r4,1204(sp)
 400afcc:	da012c17 	ldw	r8,1200(sp)
 400afd0:	20800017 	ldw	r2,0(r4)
 400afd4:	21000104 	addi	r4,r4,4
 400afd8:	d9012d15 	stw	r4,1204(sp)
 400afdc:	12000015 	stw	r8,0(r2)
 400afe0:	0039b206 	br	40096ac <___vfprintf_internal_r+0xd8>
 400afe4:	d9412917 	ldw	r5,1188(sp)
 400afe8:	8809883a 	mov	r4,r17
 400afec:	d9811b04 	addi	r6,sp,1132
 400aff0:	40095a00 	call	40095a0 <__sprint_r>
 400aff4:	103b0a1e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400aff8:	dc812417 	ldw	r18,1168(sp)
 400affc:	da011d17 	ldw	r8,1140(sp)
 400b000:	da400404 	addi	r9,sp,16
 400b004:	003def06 	br	400a7c4 <___vfprintf_internal_r+0x11f0>
 400b008:	d9412917 	ldw	r5,1188(sp)
 400b00c:	8809883a 	mov	r4,r17
 400b010:	d9811b04 	addi	r6,sp,1132
 400b014:	40095a00 	call	40095a0 <__sprint_r>
 400b018:	103b011e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400b01c:	dc812417 	ldw	r18,1168(sp)
 400b020:	da400404 	addi	r9,sp,16
 400b024:	003eb906 	br	400ab0c <___vfprintf_internal_r+0x1538>
 400b028:	d9412917 	ldw	r5,1188(sp)
 400b02c:	8809883a 	mov	r4,r17
 400b030:	d9811b04 	addi	r6,sp,1132
 400b034:	40095a00 	call	40095a0 <__sprint_r>
 400b038:	103af91e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400b03c:	dc812417 	ldw	r18,1168(sp)
 400b040:	da011d17 	ldw	r8,1140(sp)
 400b044:	d8c11c17 	ldw	r3,1136(sp)
 400b048:	da400404 	addi	r9,sp,16
 400b04c:	003ea306 	br	400aadc <___vfprintf_internal_r+0x1508>
 400b050:	00800244 	movi	r2,9
 400b054:	15fda636 	bltu	r2,r23,400a6f0 <___vfprintf_internal_r+0x111c>
 400b058:	dd010e04 	addi	r20,sp,1080
 400b05c:	003dc206 	br	400a768 <___vfprintf_internal_r+0x1194>
 400b060:	df012815 	stw	fp,1184(sp)
 400b064:	d8812583 	ldbu	r2,1174(sp)
 400b068:	df012b15 	stw	fp,1196(sp)
 400b06c:	ddc12d15 	stw	r23,1204(sp)
 400b070:	d8013115 	stw	zero,1220(sp)
 400b074:	003a4206 	br	4009980 <___vfprintf_internal_r+0x3ac>
 400b078:	d9412917 	ldw	r5,1188(sp)
 400b07c:	8809883a 	mov	r4,r17
 400b080:	d9811b04 	addi	r6,sp,1132
 400b084:	40095a00 	call	40095a0 <__sprint_r>
 400b088:	103ae51e 	bne	r2,zero,4009c20 <___vfprintf_internal_r+0x64c>
 400b08c:	dc812417 	ldw	r18,1168(sp)
 400b090:	da011d17 	ldw	r8,1140(sp)
 400b094:	d8c11c17 	ldw	r3,1136(sp)
 400b098:	da400404 	addi	r9,sp,16
 400b09c:	003ec906 	br	400abc4 <___vfprintf_internal_r+0x15f0>
 400b0a0:	04c100f4 	movhi	r19,1027
 400b0a4:	9cf65b04 	addi	r19,r19,-9876
 400b0a8:	003f6f06 	br	400ae68 <___vfprintf_internal_r+0x1894>
 400b0ac:	d8812583 	ldbu	r2,1174(sp)
 400b0b0:	dc012a17 	ldw	r16,1192(sp)
 400b0b4:	d8013115 	stw	zero,1220(sp)
 400b0b8:	003a3106 	br	4009980 <___vfprintf_internal_r+0x3ac>
 400b0bc:	d8812404 	addi	r2,sp,1168
 400b0c0:	d8800115 	stw	r2,4(sp)
 400b0c4:	d8812304 	addi	r2,sp,1164
 400b0c8:	d8800215 	stw	r2,8(sp)
 400b0cc:	d8812204 	addi	r2,sp,1160
 400b0d0:	df000015 	stw	fp,0(sp)
 400b0d4:	d8800315 	stw	r2,12(sp)
 400b0d8:	8809883a 	mov	r4,r17
 400b0dc:	b00b883a 	mov	r5,r22
 400b0e0:	a00d883a 	mov	r6,r20
 400b0e4:	01c000c4 	movi	r7,3
 400b0e8:	da413c15 	stw	r9,1264(sp)
 400b0ec:	400b8580 	call	400b858 <_dtoa_r>
 400b0f0:	da413c17 	ldw	r9,1264(sp)
 400b0f4:	1027883a 	mov	r19,r2
 400b0f8:	1707883a 	add	r3,r2,fp
 400b0fc:	e02f883a 	mov	r23,fp
 400b100:	99000007 	ldb	r4,0(r19)
 400b104:	00800c04 	movi	r2,48
 400b108:	20800326 	beq	r4,r2,400b118 <___vfprintf_internal_r+0x1b44>
 400b10c:	da812417 	ldw	r10,1168(sp)
 400b110:	1a87883a 	add	r3,r3,r10
 400b114:	003ef406 	br	400ace8 <___vfprintf_internal_r+0x1714>
 400b118:	b009883a 	mov	r4,r22
 400b11c:	a00b883a 	mov	r5,r20
 400b120:	000d883a 	mov	r6,zero
 400b124:	000f883a 	mov	r7,zero
 400b128:	d8c13b15 	stw	r3,1260(sp)
 400b12c:	da413c15 	stw	r9,1264(sp)
 400b130:	4010a480 	call	4010a48 <__nedf2>
 400b134:	d8c13b17 	ldw	r3,1260(sp)
 400b138:	da413c17 	ldw	r9,1264(sp)
 400b13c:	103ff326 	beq	r2,zero,400b10c <___vfprintf_internal_r+0x1b38>
 400b140:	00800044 	movi	r2,1
 400b144:	15d5c83a 	sub	r10,r2,r23
 400b148:	da812415 	stw	r10,1168(sp)
 400b14c:	1a87883a 	add	r3,r3,r10
 400b150:	003ee506 	br	400ace8 <___vfprintf_internal_r+0x1714>
 400b154:	d8812417 	ldw	r2,1168(sp)
 400b158:	d8812b15 	stw	r2,1196(sp)
 400b15c:	1029883a 	mov	r20,r2
 400b160:	00bfff44 	movi	r2,-3
 400b164:	a0800116 	blt	r20,r2,400b16c <___vfprintf_internal_r+0x1b98>
 400b168:	e5001d0e 	bge	fp,r20,400b1e0 <___vfprintf_internal_r+0x1c0c>
 400b16c:	94bfff84 	addi	r18,r18,-2
 400b170:	a53fffc4 	addi	r20,r20,-1
 400b174:	dd012415 	stw	r20,1168(sp)
 400b178:	dc811fc5 	stb	r18,1151(sp)
 400b17c:	a0007816 	blt	r20,zero,400b360 <___vfprintf_internal_r+0x1d8c>
 400b180:	00800ac4 	movi	r2,43
 400b184:	d8812005 	stb	r2,1152(sp)
 400b188:	00800244 	movi	r2,9
 400b18c:	15002b16 	blt	r2,r20,400b23c <___vfprintf_internal_r+0x1c68>
 400b190:	00800c04 	movi	r2,48
 400b194:	a5000c04 	addi	r20,r20,48
 400b198:	d8812045 	stb	r2,1153(sp)
 400b19c:	dd012085 	stb	r20,1154(sp)
 400b1a0:	d8c120c4 	addi	r3,sp,1155
 400b1a4:	d8811fc4 	addi	r2,sp,1151
 400b1a8:	da013217 	ldw	r8,1224(sp)
 400b1ac:	1885c83a 	sub	r2,r3,r2
 400b1b0:	d8813515 	stw	r2,1236(sp)
 400b1b4:	4085883a 	add	r2,r8,r2
 400b1b8:	d8812b15 	stw	r2,1196(sp)
 400b1bc:	00800044 	movi	r2,1
 400b1c0:	1200610e 	bge	r2,r8,400b348 <___vfprintf_internal_r+0x1d74>
 400b1c4:	d8812b17 	ldw	r2,1196(sp)
 400b1c8:	10800044 	addi	r2,r2,1
 400b1cc:	d8812b15 	stw	r2,1196(sp)
 400b1d0:	d8812815 	stw	r2,1184(sp)
 400b1d4:	103ee90e 	bge	r2,zero,400ad7c <___vfprintf_internal_r+0x17a8>
 400b1d8:	d8012815 	stw	zero,1184(sp)
 400b1dc:	003ee706 	br	400ad7c <___vfprintf_internal_r+0x17a8>
 400b1e0:	d8812b17 	ldw	r2,1196(sp)
 400b1e4:	da013217 	ldw	r8,1224(sp)
 400b1e8:	12003716 	blt	r2,r8,400b2c8 <___vfprintf_internal_r+0x1cf4>
 400b1ec:	8400004c 	andi	r16,r16,1
 400b1f0:	80000326 	beq	r16,zero,400b200 <___vfprintf_internal_r+0x1c2c>
 400b1f4:	d8812b17 	ldw	r2,1196(sp)
 400b1f8:	10800044 	addi	r2,r2,1
 400b1fc:	d8812b15 	stw	r2,1196(sp)
 400b200:	d8812815 	stw	r2,1184(sp)
 400b204:	10003716 	blt	r2,zero,400b2e4 <___vfprintf_internal_r+0x1d10>
 400b208:	048019c4 	movi	r18,103
 400b20c:	003edb06 	br	400ad7c <___vfprintf_internal_r+0x17a8>
 400b210:	d8012815 	stw	zero,1184(sp)
 400b214:	003b6906 	br	4009fbc <___vfprintf_internal_r+0x9e8>
 400b218:	e03e901e 	bne	fp,zero,400ac5c <___vfprintf_internal_r+0x1688>
 400b21c:	07000044 	movi	fp,1
 400b220:	003e8e06 	br	400ac5c <___vfprintf_internal_r+0x1688>
 400b224:	07000184 	movi	fp,6
 400b228:	003e8c06 	br	400ac5c <___vfprintf_internal_r+0x1688>
 400b22c:	00c00b44 	movi	r3,45
 400b230:	a520003c 	xorhi	r20,r20,32768
 400b234:	d8c12f05 	stb	r3,1212(sp)
 400b238:	003e8c06 	br	400ac6c <___vfprintf_internal_r+0x1698>
 400b23c:	d8c11f84 	addi	r3,sp,1150
 400b240:	102f883a 	mov	r23,r2
 400b244:	4839883a 	mov	fp,r9
 400b248:	a009883a 	mov	r4,r20
 400b24c:	01400284 	movi	r5,10
 400b250:	182d883a 	mov	r22,r3
 400b254:	40082d00 	call	40082d0 <__modsi3>
 400b258:	10800c04 	addi	r2,r2,48
 400b25c:	a009883a 	mov	r4,r20
 400b260:	b0800005 	stb	r2,0(r22)
 400b264:	01400284 	movi	r5,10
 400b268:	40082800 	call	4008280 <__divsi3>
 400b26c:	1029883a 	mov	r20,r2
 400b270:	b0ffffc4 	addi	r3,r22,-1
 400b274:	b8bff416 	blt	r23,r2,400b248 <___vfprintf_internal_r+0x1c74>
 400b278:	11400c04 	addi	r5,r2,48
 400b27c:	b17fffc5 	stb	r5,-1(r22)
 400b280:	d8811fc4 	addi	r2,sp,1151
 400b284:	e013883a 	mov	r9,fp
 400b288:	1880482e 	bgeu	r3,r2,400b3ac <___vfprintf_internal_r+0x1dd8>
 400b28c:	b007883a 	mov	r3,r22
 400b290:	d9012044 	addi	r4,sp,1153
 400b294:	00000206 	br	400b2a0 <___vfprintf_internal_r+0x1ccc>
 400b298:	19400003 	ldbu	r5,0(r3)
 400b29c:	18c00044 	addi	r3,r3,1
 400b2a0:	21400005 	stb	r5,0(r4)
 400b2a4:	21000044 	addi	r4,r4,1
 400b2a8:	10fffb1e 	bne	r2,r3,400b298 <___vfprintf_internal_r+0x1cc4>
 400b2ac:	d8c12004 	addi	r3,sp,1152
 400b2b0:	1d87c83a 	sub	r3,r3,r22
 400b2b4:	d9012044 	addi	r4,sp,1153
 400b2b8:	20c7883a 	add	r3,r4,r3
 400b2bc:	003fba06 	br	400b1a8 <___vfprintf_internal_r+0x1bd4>
 400b2c0:	d8c12217 	ldw	r3,1160(sp)
 400b2c4:	003e9906 	br	400ad2c <___vfprintf_internal_r+0x1758>
 400b2c8:	05000b0e 	bge	zero,r20,400b2f8 <___vfprintf_internal_r+0x1d24>
 400b2cc:	05000044 	movi	r20,1
 400b2d0:	da013217 	ldw	r8,1224(sp)
 400b2d4:	a229883a 	add	r20,r20,r8
 400b2d8:	dd012b15 	stw	r20,1196(sp)
 400b2dc:	dd012815 	stw	r20,1184(sp)
 400b2e0:	a03fc90e 	bge	r20,zero,400b208 <___vfprintf_internal_r+0x1c34>
 400b2e4:	d8012815 	stw	zero,1184(sp)
 400b2e8:	048019c4 	movi	r18,103
 400b2ec:	003ea306 	br	400ad7c <___vfprintf_internal_r+0x17a8>
 400b2f0:	e5c00044 	addi	r23,fp,1
 400b2f4:	003e6606 	br	400ac90 <___vfprintf_internal_r+0x16bc>
 400b2f8:	00800084 	movi	r2,2
 400b2fc:	1529c83a 	sub	r20,r2,r20
 400b300:	003ff306 	br	400b2d0 <___vfprintf_internal_r+0x1cfc>
 400b304:	008011c4 	movi	r2,71
 400b308:	90be7226 	beq	r18,r2,400acd4 <___vfprintf_internal_r+0x1700>
 400b30c:	003e7306 	br	400acdc <___vfprintf_internal_r+0x1708>
 400b310:	d8812d17 	ldw	r2,1204(sp)
 400b314:	ac800043 	ldbu	r18,1(r21)
 400b318:	202b883a 	mov	r21,r4
 400b31c:	17000017 	ldw	fp,0(r2)
 400b320:	10800104 	addi	r2,r2,4
 400b324:	d8812d15 	stw	r2,1204(sp)
 400b328:	e0001b16 	blt	fp,zero,400b398 <___vfprintf_internal_r+0x1dc4>
 400b32c:	94803fcc 	andi	r18,r18,255
 400b330:	9480201c 	xori	r18,r18,128
 400b334:	94bfe004 	addi	r18,r18,-128
 400b338:	00390406 	br	400974c <___vfprintf_internal_r+0x178>
 400b33c:	00bfffc4 	movi	r2,-1
 400b340:	d8812c15 	stw	r2,1200(sp)
 400b344:	003a2506 	br	4009bdc <___vfprintf_internal_r+0x608>
 400b348:	80a0703a 	and	r16,r16,r2
 400b34c:	803f9d1e 	bne	r16,zero,400b1c4 <___vfprintf_internal_r+0x1bf0>
 400b350:	d8812b17 	ldw	r2,1196(sp)
 400b354:	d8812815 	stw	r2,1184(sp)
 400b358:	103e880e 	bge	r2,zero,400ad7c <___vfprintf_internal_r+0x17a8>
 400b35c:	003f9e06 	br	400b1d8 <___vfprintf_internal_r+0x1c04>
 400b360:	00800b44 	movi	r2,45
 400b364:	0529c83a 	sub	r20,zero,r20
 400b368:	d8812005 	stb	r2,1152(sp)
 400b36c:	003f8606 	br	400b188 <___vfprintf_internal_r+0x1bb4>
 400b370:	1007883a 	mov	r3,r2
 400b374:	003e6d06 	br	400ad2c <___vfprintf_internal_r+0x1758>
 400b378:	e000021e 	bne	fp,zero,400b384 <___vfprintf_internal_r+0x1db0>
 400b37c:	8400004c 	andi	r16,r16,1
 400b380:	80000e26 	beq	r16,zero,400b3bc <___vfprintf_internal_r+0x1de8>
 400b384:	e7000084 	addi	fp,fp,2
 400b388:	df012b15 	stw	fp,1196(sp)
 400b38c:	df012815 	stw	fp,1184(sp)
 400b390:	e03e7a0e 	bge	fp,zero,400ad7c <___vfprintf_internal_r+0x17a8>
 400b394:	003f9006 	br	400b1d8 <___vfprintf_internal_r+0x1c04>
 400b398:	94803fcc 	andi	r18,r18,255
 400b39c:	9480201c 	xori	r18,r18,128
 400b3a0:	073fffc4 	movi	fp,-1
 400b3a4:	94bfe004 	addi	r18,r18,-128
 400b3a8:	0038e806 	br	400974c <___vfprintf_internal_r+0x178>
 400b3ac:	d8c12044 	addi	r3,sp,1153
 400b3b0:	003f7d06 	br	400b1a8 <___vfprintf_internal_r+0x1bd4>
 400b3b4:	dd012417 	ldw	r20,1168(sp)
 400b3b8:	003f6d06 	br	400b170 <___vfprintf_internal_r+0x1b9c>
 400b3bc:	00c00044 	movi	r3,1
 400b3c0:	d8c12815 	stw	r3,1184(sp)
 400b3c4:	d8c12b15 	stw	r3,1196(sp)
 400b3c8:	003e6c06 	br	400ad7c <___vfprintf_internal_r+0x17a8>

0400b3cc <__vfprintf_internal>:
 400b3cc:	008100f4 	movhi	r2,1027
 400b3d0:	10844f04 	addi	r2,r2,4412
 400b3d4:	2007883a 	mov	r3,r4
 400b3d8:	11000017 	ldw	r4,0(r2)
 400b3dc:	2805883a 	mov	r2,r5
 400b3e0:	300f883a 	mov	r7,r6
 400b3e4:	180b883a 	mov	r5,r3
 400b3e8:	100d883a 	mov	r6,r2
 400b3ec:	40095d41 	jmpi	40095d4 <___vfprintf_internal_r>

0400b3f0 <_vsnprintf_r>:
 400b3f0:	deffe604 	addi	sp,sp,-104
 400b3f4:	dc401815 	stw	r17,96(sp)
 400b3f8:	dc001715 	stw	r16,92(sp)
 400b3fc:	dfc01915 	stw	ra,100(sp)
 400b400:	3021883a 	mov	r16,r6
 400b404:	2023883a 	mov	r17,r4
 400b408:	30002016 	blt	r6,zero,400b48c <_vsnprintf_r+0x9c>
 400b40c:	00808204 	movi	r2,520
 400b410:	d880030d 	sth	r2,12(sp)
 400b414:	d9400015 	stw	r5,0(sp)
 400b418:	d9400415 	stw	r5,16(sp)
 400b41c:	3000161e 	bne	r6,zero,400b478 <_vsnprintf_r+0x88>
 400b420:	0005883a 	mov	r2,zero
 400b424:	00c100f4 	movhi	r3,1027
 400b428:	18c44f04 	addi	r3,r3,4412
 400b42c:	19000017 	ldw	r4,0(r3)
 400b430:	380d883a 	mov	r6,r7
 400b434:	d9c01a17 	ldw	r7,104(sp)
 400b438:	d8800215 	stw	r2,8(sp)
 400b43c:	d8800515 	stw	r2,20(sp)
 400b440:	d80b883a 	mov	r5,sp
 400b444:	00bfffc4 	movi	r2,-1
 400b448:	d880038d 	sth	r2,14(sp)
 400b44c:	40095d40 	call	40095d4 <___vfprintf_internal_r>
 400b450:	00ffffc4 	movi	r3,-1
 400b454:	10c00a16 	blt	r2,r3,400b480 <_vsnprintf_r+0x90>
 400b458:	80000226 	beq	r16,zero,400b464 <_vsnprintf_r+0x74>
 400b45c:	d8c00017 	ldw	r3,0(sp)
 400b460:	18000005 	stb	zero,0(r3)
 400b464:	dfc01917 	ldw	ra,100(sp)
 400b468:	dc401817 	ldw	r17,96(sp)
 400b46c:	dc001717 	ldw	r16,92(sp)
 400b470:	dec01a04 	addi	sp,sp,104
 400b474:	f800283a 	ret
 400b478:	30bfffc4 	addi	r2,r6,-1
 400b47c:	003fe906 	br	400b424 <_vsnprintf_r+0x34>
 400b480:	00c022c4 	movi	r3,139
 400b484:	88c00015 	stw	r3,0(r17)
 400b488:	003ff306 	br	400b458 <_vsnprintf_r+0x68>
 400b48c:	008022c4 	movi	r2,139
 400b490:	20800015 	stw	r2,0(r4)
 400b494:	00bfffc4 	movi	r2,-1
 400b498:	003ff206 	br	400b464 <_vsnprintf_r+0x74>

0400b49c <vsnprintf>:
 400b49c:	008100f4 	movhi	r2,1027
 400b4a0:	10844f04 	addi	r2,r2,4412
 400b4a4:	2011883a 	mov	r8,r4
 400b4a8:	11000017 	ldw	r4,0(r2)
 400b4ac:	defffe04 	addi	sp,sp,-8
 400b4b0:	2807883a 	mov	r3,r5
 400b4b4:	3005883a 	mov	r2,r6
 400b4b8:	d9c00015 	stw	r7,0(sp)
 400b4bc:	400b883a 	mov	r5,r8
 400b4c0:	180d883a 	mov	r6,r3
 400b4c4:	100f883a 	mov	r7,r2
 400b4c8:	dfc00115 	stw	ra,4(sp)
 400b4cc:	400b3f00 	call	400b3f0 <_vsnprintf_r>
 400b4d0:	dfc00117 	ldw	ra,4(sp)
 400b4d4:	dec00204 	addi	sp,sp,8
 400b4d8:	f800283a 	ret

0400b4dc <__swsetup_r>:
 400b4dc:	008100f4 	movhi	r2,1027
 400b4e0:	10844f04 	addi	r2,r2,4412
 400b4e4:	10800017 	ldw	r2,0(r2)
 400b4e8:	defffd04 	addi	sp,sp,-12
 400b4ec:	dc400115 	stw	r17,4(sp)
 400b4f0:	dc000015 	stw	r16,0(sp)
 400b4f4:	dfc00215 	stw	ra,8(sp)
 400b4f8:	2023883a 	mov	r17,r4
 400b4fc:	2821883a 	mov	r16,r5
 400b500:	10000226 	beq	r2,zero,400b50c <__swsetup_r+0x30>
 400b504:	10c00e17 	ldw	r3,56(r2)
 400b508:	18003d26 	beq	r3,zero,400b600 <__swsetup_r+0x124>
 400b50c:	8080030b 	ldhu	r2,12(r16)
 400b510:	10c0020c 	andi	r3,r2,8
 400b514:	18ffffcc 	andi	r3,r3,65535
 400b518:	18e0001c 	xori	r3,r3,32768
 400b51c:	18e00004 	addi	r3,r3,-32768
 400b520:	18001226 	beq	r3,zero,400b56c <__swsetup_r+0x90>
 400b524:	80c00417 	ldw	r3,16(r16)
 400b528:	18001f26 	beq	r3,zero,400b5a8 <__swsetup_r+0xcc>
 400b52c:	1100004c 	andi	r4,r2,1
 400b530:	2000261e 	bne	r4,zero,400b5cc <__swsetup_r+0xf0>
 400b534:	1080008c 	andi	r2,r2,2
 400b538:	10bfffcc 	andi	r2,r2,65535
 400b53c:	10a0001c 	xori	r2,r2,32768
 400b540:	10a00004 	addi	r2,r2,-32768
 400b544:	1000311e 	bne	r2,zero,400b60c <__swsetup_r+0x130>
 400b548:	80800517 	ldw	r2,20(r16)
 400b54c:	80800215 	stw	r2,8(r16)
 400b550:	18002326 	beq	r3,zero,400b5e0 <__swsetup_r+0x104>
 400b554:	0005883a 	mov	r2,zero
 400b558:	dfc00217 	ldw	ra,8(sp)
 400b55c:	dc400117 	ldw	r17,4(sp)
 400b560:	dc000017 	ldw	r16,0(sp)
 400b564:	dec00304 	addi	sp,sp,12
 400b568:	f800283a 	ret
 400b56c:	10c0040c 	andi	r3,r2,16
 400b570:	18ffffcc 	andi	r3,r3,65535
 400b574:	18e0001c 	xori	r3,r3,32768
 400b578:	18e00004 	addi	r3,r3,-32768
 400b57c:	18001e26 	beq	r3,zero,400b5f8 <__swsetup_r+0x11c>
 400b580:	10c0010c 	andi	r3,r2,4
 400b584:	18ffffcc 	andi	r3,r3,65535
 400b588:	18e0001c 	xori	r3,r3,32768
 400b58c:	18e00004 	addi	r3,r3,-32768
 400b590:	1800211e 	bne	r3,zero,400b618 <__swsetup_r+0x13c>
 400b594:	80c00417 	ldw	r3,16(r16)
 400b598:	11400214 	ori	r5,r2,8
 400b59c:	8140030d 	sth	r5,12(r16)
 400b5a0:	2805883a 	mov	r2,r5
 400b5a4:	183fe11e 	bne	r3,zero,400b52c <__swsetup_r+0x50>
 400b5a8:	1140a00c 	andi	r5,r2,640
 400b5ac:	01008004 	movi	r4,512
 400b5b0:	293fde26 	beq	r5,r4,400b52c <__swsetup_r+0x50>
 400b5b4:	8809883a 	mov	r4,r17
 400b5b8:	800b883a 	mov	r5,r16
 400b5bc:	400de900 	call	400de90 <__smakebuf_r>
 400b5c0:	8080030b 	ldhu	r2,12(r16)
 400b5c4:	80c00417 	ldw	r3,16(r16)
 400b5c8:	003fd806 	br	400b52c <__swsetup_r+0x50>
 400b5cc:	80800517 	ldw	r2,20(r16)
 400b5d0:	80000215 	stw	zero,8(r16)
 400b5d4:	0085c83a 	sub	r2,zero,r2
 400b5d8:	80800615 	stw	r2,24(r16)
 400b5dc:	183fdd1e 	bne	r3,zero,400b554 <__swsetup_r+0x78>
 400b5e0:	8080030b 	ldhu	r2,12(r16)
 400b5e4:	1080200c 	andi	r2,r2,128
 400b5e8:	10bfffcc 	andi	r2,r2,65535
 400b5ec:	10a0001c 	xori	r2,r2,32768
 400b5f0:	10a00004 	addi	r2,r2,-32768
 400b5f4:	103fd826 	beq	r2,zero,400b558 <__swsetup_r+0x7c>
 400b5f8:	00bfffc4 	movi	r2,-1
 400b5fc:	003fd606 	br	400b558 <__swsetup_r+0x7c>
 400b600:	1009883a 	mov	r4,r2
 400b604:	400d11c0 	call	400d11c <__sinit>
 400b608:	003fc006 	br	400b50c <__swsetup_r+0x30>
 400b60c:	0005883a 	mov	r2,zero
 400b610:	80800215 	stw	r2,8(r16)
 400b614:	003fce06 	br	400b550 <__swsetup_r+0x74>
 400b618:	81400c17 	ldw	r5,48(r16)
 400b61c:	28000626 	beq	r5,zero,400b638 <__swsetup_r+0x15c>
 400b620:	80c01004 	addi	r3,r16,64
 400b624:	28c00326 	beq	r5,r3,400b634 <__swsetup_r+0x158>
 400b628:	8809883a 	mov	r4,r17
 400b62c:	400d4a00 	call	400d4a0 <_free_r>
 400b630:	8080030b 	ldhu	r2,12(r16)
 400b634:	80000c15 	stw	zero,48(r16)
 400b638:	80c00417 	ldw	r3,16(r16)
 400b63c:	013ff6c4 	movi	r4,-37
 400b640:	2084703a 	and	r2,r4,r2
 400b644:	80000115 	stw	zero,4(r16)
 400b648:	80c00015 	stw	r3,0(r16)
 400b64c:	003fd206 	br	400b598 <__swsetup_r+0xbc>

0400b650 <quorem>:
 400b650:	defff704 	addi	sp,sp,-36
 400b654:	dc400115 	stw	r17,4(sp)
 400b658:	20800417 	ldw	r2,16(r4)
 400b65c:	2c400417 	ldw	r17,16(r5)
 400b660:	dd800615 	stw	r22,24(sp)
 400b664:	dd400515 	stw	r21,20(sp)
 400b668:	dfc00815 	stw	ra,32(sp)
 400b66c:	ddc00715 	stw	r23,28(sp)
 400b670:	dd000415 	stw	r20,16(sp)
 400b674:	dcc00315 	stw	r19,12(sp)
 400b678:	dc800215 	stw	r18,8(sp)
 400b67c:	dc000015 	stw	r16,0(sp)
 400b680:	202b883a 	mov	r21,r4
 400b684:	282d883a 	mov	r22,r5
 400b688:	14407116 	blt	r2,r17,400b850 <quorem+0x200>
 400b68c:	88800104 	addi	r2,r17,4
 400b690:	1085883a 	add	r2,r2,r2
 400b694:	1085883a 	add	r2,r2,r2
 400b698:	28a7883a 	add	r19,r5,r2
 400b69c:	2085883a 	add	r2,r4,r2
 400b6a0:	15c00017 	ldw	r23,0(r2)
 400b6a4:	99400017 	ldw	r5,0(r19)
 400b6a8:	8c7fffc4 	addi	r17,r17,-1
 400b6ac:	b809883a 	mov	r4,r23
 400b6b0:	29400044 	addi	r5,r5,1
 400b6b4:	400832c0 	call	400832c <__udivsi3>
 400b6b8:	1025883a 	mov	r18,r2
 400b6bc:	b4000504 	addi	r16,r22,20
 400b6c0:	ad000504 	addi	r20,r21,20
 400b6c4:	10002d26 	beq	r2,zero,400b77c <quorem+0x12c>
 400b6c8:	800d883a 	mov	r6,r16
 400b6cc:	a007883a 	mov	r3,r20
 400b6d0:	000f883a 	mov	r7,zero
 400b6d4:	0005883a 	mov	r2,zero
 400b6d8:	32c00017 	ldw	r11,0(r6)
 400b6dc:	1a400017 	ldw	r9,0(r3)
 400b6e0:	31800104 	addi	r6,r6,4
 400b6e4:	5abfffcc 	andi	r10,r11,65535
 400b6e8:	5495383a 	mul	r10,r10,r18
 400b6ec:	5816d43a 	srli	r11,r11,16
 400b6f0:	4a3fffcc 	andi	r8,r9,65535
 400b6f4:	3a95883a 	add	r10,r7,r10
 400b6f8:	500ed43a 	srli	r7,r10,16
 400b6fc:	5c97383a 	mul	r11,r11,r18
 400b700:	4085883a 	add	r2,r8,r2
 400b704:	52bfffcc 	andi	r10,r10,65535
 400b708:	1291c83a 	sub	r8,r2,r10
 400b70c:	4804d43a 	srli	r2,r9,16
 400b710:	3acf883a 	add	r7,r7,r11
 400b714:	4015d43a 	srai	r10,r8,16
 400b718:	393fffcc 	andi	r4,r7,65535
 400b71c:	1105c83a 	sub	r2,r2,r4
 400b720:	1285883a 	add	r2,r2,r10
 400b724:	1880008d 	sth	r2,2(r3)
 400b728:	1a00000d 	sth	r8,0(r3)
 400b72c:	380ed43a 	srli	r7,r7,16
 400b730:	1005d43a 	srai	r2,r2,16
 400b734:	18c00104 	addi	r3,r3,4
 400b738:	99bfe72e 	bgeu	r19,r6,400b6d8 <quorem+0x88>
 400b73c:	b8000f1e 	bne	r23,zero,400b77c <quorem+0x12c>
 400b740:	88800144 	addi	r2,r17,5
 400b744:	1085883a 	add	r2,r2,r2
 400b748:	1085883a 	add	r2,r2,r2
 400b74c:	a887883a 	add	r3,r21,r2
 400b750:	18bfff04 	addi	r2,r3,-4
 400b754:	a080082e 	bgeu	r20,r2,400b778 <quorem+0x128>
 400b758:	18ffff17 	ldw	r3,-4(r3)
 400b75c:	18000326 	beq	r3,zero,400b76c <quorem+0x11c>
 400b760:	00000506 	br	400b778 <quorem+0x128>
 400b764:	10c00017 	ldw	r3,0(r2)
 400b768:	1800031e 	bne	r3,zero,400b778 <quorem+0x128>
 400b76c:	10bfff04 	addi	r2,r2,-4
 400b770:	8c7fffc4 	addi	r17,r17,-1
 400b774:	a0bffb36 	bltu	r20,r2,400b764 <quorem+0x114>
 400b778:	ac400415 	stw	r17,16(r21)
 400b77c:	a809883a 	mov	r4,r21
 400b780:	b00b883a 	mov	r5,r22
 400b784:	400eafc0 	call	400eafc <__mcmp>
 400b788:	10002516 	blt	r2,zero,400b820 <quorem+0x1d0>
 400b78c:	94800044 	addi	r18,r18,1
 400b790:	a007883a 	mov	r3,r20
 400b794:	000b883a 	mov	r5,zero
 400b798:	1a000017 	ldw	r8,0(r3)
 400b79c:	81c00017 	ldw	r7,0(r16)
 400b7a0:	84000104 	addi	r16,r16,4
 400b7a4:	41bfffcc 	andi	r6,r8,65535
 400b7a8:	38bfffcc 	andi	r2,r7,65535
 400b7ac:	314b883a 	add	r5,r6,r5
 400b7b0:	288dc83a 	sub	r6,r5,r2
 400b7b4:	380ed43a 	srli	r7,r7,16
 400b7b8:	400ad43a 	srli	r5,r8,16
 400b7bc:	3005d43a 	srai	r2,r6,16
 400b7c0:	1980000d 	sth	r6,0(r3)
 400b7c4:	29cbc83a 	sub	r5,r5,r7
 400b7c8:	288b883a 	add	r5,r5,r2
 400b7cc:	1940008d 	sth	r5,2(r3)
 400b7d0:	280bd43a 	srai	r5,r5,16
 400b7d4:	18c00104 	addi	r3,r3,4
 400b7d8:	9c3fef2e 	bgeu	r19,r16,400b798 <quorem+0x148>
 400b7dc:	88800144 	addi	r2,r17,5
 400b7e0:	1085883a 	add	r2,r2,r2
 400b7e4:	1085883a 	add	r2,r2,r2
 400b7e8:	a885883a 	add	r2,r21,r2
 400b7ec:	10c00017 	ldw	r3,0(r2)
 400b7f0:	18000b1e 	bne	r3,zero,400b820 <quorem+0x1d0>
 400b7f4:	10ffff04 	addi	r3,r2,-4
 400b7f8:	a0c0082e 	bgeu	r20,r3,400b81c <quorem+0x1cc>
 400b7fc:	10bfff17 	ldw	r2,-4(r2)
 400b800:	10000326 	beq	r2,zero,400b810 <quorem+0x1c0>
 400b804:	00000506 	br	400b81c <quorem+0x1cc>
 400b808:	18800017 	ldw	r2,0(r3)
 400b80c:	1000031e 	bne	r2,zero,400b81c <quorem+0x1cc>
 400b810:	18ffff04 	addi	r3,r3,-4
 400b814:	8c7fffc4 	addi	r17,r17,-1
 400b818:	a0fffb36 	bltu	r20,r3,400b808 <quorem+0x1b8>
 400b81c:	ac400415 	stw	r17,16(r21)
 400b820:	9005883a 	mov	r2,r18
 400b824:	dfc00817 	ldw	ra,32(sp)
 400b828:	ddc00717 	ldw	r23,28(sp)
 400b82c:	dd800617 	ldw	r22,24(sp)
 400b830:	dd400517 	ldw	r21,20(sp)
 400b834:	dd000417 	ldw	r20,16(sp)
 400b838:	dcc00317 	ldw	r19,12(sp)
 400b83c:	dc800217 	ldw	r18,8(sp)
 400b840:	dc400117 	ldw	r17,4(sp)
 400b844:	dc000017 	ldw	r16,0(sp)
 400b848:	dec00904 	addi	sp,sp,36
 400b84c:	f800283a 	ret
 400b850:	0005883a 	mov	r2,zero
 400b854:	003ff306 	br	400b824 <quorem+0x1d4>

0400b858 <_dtoa_r>:
 400b858:	20801017 	ldw	r2,64(r4)
 400b85c:	deffdf04 	addi	sp,sp,-132
 400b860:	dcc01a15 	stw	r19,104(sp)
 400b864:	dc801915 	stw	r18,100(sp)
 400b868:	dc401815 	stw	r17,96(sp)
 400b86c:	dc001715 	stw	r16,92(sp)
 400b870:	dfc02015 	stw	ra,128(sp)
 400b874:	df001f15 	stw	fp,124(sp)
 400b878:	ddc01e15 	stw	r23,120(sp)
 400b87c:	dd801d15 	stw	r22,116(sp)
 400b880:	dd401c15 	stw	r21,112(sp)
 400b884:	dd001b15 	stw	r20,108(sp)
 400b888:	d9400315 	stw	r5,12(sp)
 400b88c:	d9c00415 	stw	r7,16(sp)
 400b890:	2021883a 	mov	r16,r4
 400b894:	3025883a 	mov	r18,r6
 400b898:	dcc02317 	ldw	r19,140(sp)
 400b89c:	3023883a 	mov	r17,r6
 400b8a0:	10000826 	beq	r2,zero,400b8c4 <_dtoa_r+0x6c>
 400b8a4:	20c01117 	ldw	r3,68(r4)
 400b8a8:	01800044 	movi	r6,1
 400b8ac:	100b883a 	mov	r5,r2
 400b8b0:	30cc983a 	sll	r6,r6,r3
 400b8b4:	10c00115 	stw	r3,4(r2)
 400b8b8:	11800215 	stw	r6,8(r2)
 400b8bc:	400e3000 	call	400e300 <_Bfree>
 400b8c0:	80001015 	stw	zero,64(r16)
 400b8c4:	90002f16 	blt	r18,zero,400b984 <_dtoa_r+0x12c>
 400b8c8:	98000015 	stw	zero,0(r19)
 400b8cc:	90dffc2c 	andhi	r3,r18,32752
 400b8d0:	009ffc34 	movhi	r2,32752
 400b8d4:	18801c26 	beq	r3,r2,400b948 <_dtoa_r+0xf0>
 400b8d8:	d9000317 	ldw	r4,12(sp)
 400b8dc:	880b883a 	mov	r5,r17
 400b8e0:	000d883a 	mov	r6,zero
 400b8e4:	000f883a 	mov	r7,zero
 400b8e8:	40109ec0 	call	40109ec <__eqdf2>
 400b8ec:	10002c1e 	bne	r2,zero,400b9a0 <_dtoa_r+0x148>
 400b8f0:	d9002217 	ldw	r4,136(sp)
 400b8f4:	d9c02417 	ldw	r7,144(sp)
 400b8f8:	00800044 	movi	r2,1
 400b8fc:	20800015 	stw	r2,0(r4)
 400b900:	38019426 	beq	r7,zero,400bf54 <_dtoa_r+0x6fc>
 400b904:	008100f4 	movhi	r2,1027
 400b908:	10b66844 	addi	r2,r2,-9823
 400b90c:	38800015 	stw	r2,0(r7)
 400b910:	15ffffc4 	addi	r23,r2,-1
 400b914:	b805883a 	mov	r2,r23
 400b918:	dfc02017 	ldw	ra,128(sp)
 400b91c:	df001f17 	ldw	fp,124(sp)
 400b920:	ddc01e17 	ldw	r23,120(sp)
 400b924:	dd801d17 	ldw	r22,116(sp)
 400b928:	dd401c17 	ldw	r21,112(sp)
 400b92c:	dd001b17 	ldw	r20,108(sp)
 400b930:	dcc01a17 	ldw	r19,104(sp)
 400b934:	dc801917 	ldw	r18,100(sp)
 400b938:	dc401817 	ldw	r17,96(sp)
 400b93c:	dc001717 	ldw	r16,92(sp)
 400b940:	dec02104 	addi	sp,sp,132
 400b944:	f800283a 	ret
 400b948:	d8c02217 	ldw	r3,136(sp)
 400b94c:	d9000317 	ldw	r4,12(sp)
 400b950:	0089c3c4 	movi	r2,9999
 400b954:	18800015 	stw	r2,0(r3)
 400b958:	20016c26 	beq	r4,zero,400bf0c <_dtoa_r+0x6b4>
 400b95c:	05c100f4 	movhi	r23,1027
 400b960:	bdf67404 	addi	r23,r23,-9776
 400b964:	d9c02417 	ldw	r7,144(sp)
 400b968:	383fea26 	beq	r7,zero,400b914 <_dtoa_r+0xbc>
 400b96c:	b88000c7 	ldb	r2,3(r23)
 400b970:	10016d1e 	bne	r2,zero,400bf28 <_dtoa_r+0x6d0>
 400b974:	b88000c4 	addi	r2,r23,3
 400b978:	d8c02417 	ldw	r3,144(sp)
 400b97c:	18800015 	stw	r2,0(r3)
 400b980:	003fe406 	br	400b914 <_dtoa_r+0xbc>
 400b984:	04600034 	movhi	r17,32768
 400b988:	8c7fffc4 	addi	r17,r17,-1
 400b98c:	9462703a 	and	r17,r18,r17
 400b990:	00800044 	movi	r2,1
 400b994:	98800015 	stw	r2,0(r19)
 400b998:	8825883a 	mov	r18,r17
 400b99c:	003fcb06 	br	400b8cc <_dtoa_r+0x74>
 400b9a0:	d9400317 	ldw	r5,12(sp)
 400b9a4:	9028d53a 	srli	r20,r18,20
 400b9a8:	d8800204 	addi	r2,sp,8
 400b9ac:	d8800015 	stw	r2,0(sp)
 400b9b0:	8009883a 	mov	r4,r16
 400b9b4:	880d883a 	mov	r6,r17
 400b9b8:	d9c00104 	addi	r7,sp,4
 400b9bc:	400eea40 	call	400eea4 <__d2b>
 400b9c0:	a501ffcc 	andi	r20,r20,2047
 400b9c4:	1039883a 	mov	fp,r2
 400b9c8:	a001591e 	bne	r20,zero,400bf30 <_dtoa_r+0x6d8>
 400b9cc:	dd400217 	ldw	r21,8(sp)
 400b9d0:	dd000117 	ldw	r20,4(sp)
 400b9d4:	00befbc4 	movi	r2,-1041
 400b9d8:	ad29883a 	add	r20,r21,r20
 400b9dc:	a082d216 	blt	r20,r2,400c528 <_dtoa_r+0xcd0>
 400b9e0:	d8c00317 	ldw	r3,12(sp)
 400b9e4:	013f0384 	movi	r4,-1010
 400b9e8:	2509c83a 	sub	r4,r4,r20
 400b9ec:	a0810484 	addi	r2,r20,1042
 400b9f0:	9124983a 	sll	r18,r18,r4
 400b9f4:	1884d83a 	srl	r2,r3,r2
 400b9f8:	9088b03a 	or	r4,r18,r2
 400b9fc:	4010b6c0 	call	4010b6c <__floatunsidf>
 400ba00:	1009883a 	mov	r4,r2
 400ba04:	017f8434 	movhi	r5,65040
 400ba08:	00800044 	movi	r2,1
 400ba0c:	194b883a 	add	r5,r3,r5
 400ba10:	a53fffc4 	addi	r20,r20,-1
 400ba14:	d8800f15 	stw	r2,60(sp)
 400ba18:	000d883a 	mov	r6,zero
 400ba1c:	01cffe34 	movhi	r7,16376
 400ba20:	4007b100 	call	4007b10 <__subdf3>
 400ba24:	1009883a 	mov	r4,r2
 400ba28:	180b883a 	mov	r5,r3
 400ba2c:	0198dbf4 	movhi	r6,25455
 400ba30:	3190d844 	addi	r6,r6,17249
 400ba34:	01cff4f4 	movhi	r7,16339
 400ba38:	39e1e9c4 	addi	r7,r7,-30809
 400ba3c:	4007b700 	call	4007b70 <__muldf3>
 400ba40:	180b883a 	mov	r5,r3
 400ba44:	01a2d874 	movhi	r6,35681
 400ba48:	31b22cc4 	addi	r6,r6,-14157
 400ba4c:	01cff1f4 	movhi	r7,16327
 400ba50:	39e28a04 	addi	r7,r7,-30168
 400ba54:	1009883a 	mov	r4,r2
 400ba58:	4007abc0 	call	4007abc <__adddf3>
 400ba5c:	a009883a 	mov	r4,r20
 400ba60:	1027883a 	mov	r19,r2
 400ba64:	1825883a 	mov	r18,r3
 400ba68:	40080640 	call	4008064 <__floatsidf>
 400ba6c:	1009883a 	mov	r4,r2
 400ba70:	180b883a 	mov	r5,r3
 400ba74:	019427f4 	movhi	r6,20639
 400ba78:	319e7ec4 	addi	r6,r6,31227
 400ba7c:	01cff4f4 	movhi	r7,16339
 400ba80:	39d104c4 	addi	r7,r7,17427
 400ba84:	4007b700 	call	4007b70 <__muldf3>
 400ba88:	9809883a 	mov	r4,r19
 400ba8c:	900b883a 	mov	r5,r18
 400ba90:	100d883a 	mov	r6,r2
 400ba94:	180f883a 	mov	r7,r3
 400ba98:	4007abc0 	call	4007abc <__adddf3>
 400ba9c:	1009883a 	mov	r4,r2
 400baa0:	180b883a 	mov	r5,r3
 400baa4:	1027883a 	mov	r19,r2
 400baa8:	1825883a 	mov	r18,r3
 400baac:	40081380 	call	4008138 <__fixdfsi>
 400bab0:	9809883a 	mov	r4,r19
 400bab4:	900b883a 	mov	r5,r18
 400bab8:	000d883a 	mov	r6,zero
 400babc:	000f883a 	mov	r7,zero
 400bac0:	d8800615 	stw	r2,24(sp)
 400bac4:	40080080 	call	4008008 <__ltdf2>
 400bac8:	10027e16 	blt	r2,zero,400c4c4 <_dtoa_r+0xc6c>
 400bacc:	d8c00617 	ldw	r3,24(sp)
 400bad0:	00800584 	movi	r2,22
 400bad4:	10c26c36 	bltu	r2,r3,400c488 <_dtoa_r+0xc30>
 400bad8:	180490fa 	slli	r2,r3,3
 400badc:	00c100f4 	movhi	r3,1027
 400bae0:	18f69904 	addi	r3,r3,-9628
 400bae4:	d9800317 	ldw	r6,12(sp)
 400bae8:	1885883a 	add	r2,r3,r2
 400baec:	11000017 	ldw	r4,0(r2)
 400baf0:	11400117 	ldw	r5,4(r2)
 400baf4:	880f883a 	mov	r7,r17
 400baf8:	4010aa40 	call	4010aa4 <__gtdf2>
 400bafc:	00828f0e 	bge	zero,r2,400c53c <_dtoa_r+0xce4>
 400bb00:	d8800617 	ldw	r2,24(sp)
 400bb04:	d8000d15 	stw	zero,52(sp)
 400bb08:	10bfffc4 	addi	r2,r2,-1
 400bb0c:	d8800615 	stw	r2,24(sp)
 400bb10:	ad29c83a 	sub	r20,r21,r20
 400bb14:	a53fffc4 	addi	r20,r20,-1
 400bb18:	a0026616 	blt	r20,zero,400c4b4 <_dtoa_r+0xc5c>
 400bb1c:	dd000715 	stw	r20,28(sp)
 400bb20:	d8000815 	stw	zero,32(sp)
 400bb24:	d8800617 	ldw	r2,24(sp)
 400bb28:	10025a16 	blt	r2,zero,400c494 <_dtoa_r+0xc3c>
 400bb2c:	d8c00717 	ldw	r3,28(sp)
 400bb30:	d8800b15 	stw	r2,44(sp)
 400bb34:	d8000a15 	stw	zero,40(sp)
 400bb38:	1887883a 	add	r3,r3,r2
 400bb3c:	d8c00715 	stw	r3,28(sp)
 400bb40:	d9c00417 	ldw	r7,16(sp)
 400bb44:	00800244 	movi	r2,9
 400bb48:	11c10536 	bltu	r2,r7,400bf60 <_dtoa_r+0x708>
 400bb4c:	00800144 	movi	r2,5
 400bb50:	11c4c60e 	bge	r2,r7,400ce6c <_dtoa_r+0x1614>
 400bb54:	39ffff04 	addi	r7,r7,-4
 400bb58:	d9c00415 	stw	r7,16(sp)
 400bb5c:	0027883a 	mov	r19,zero
 400bb60:	d9c00417 	ldw	r7,16(sp)
 400bb64:	008000c4 	movi	r2,3
 400bb68:	3883a226 	beq	r7,r2,400c9f4 <_dtoa_r+0x119c>
 400bb6c:	11c2bc16 	blt	r2,r7,400c660 <_dtoa_r+0xe08>
 400bb70:	00800084 	movi	r2,2
 400bb74:	3880fb1e 	bne	r7,r2,400bf64 <_dtoa_r+0x70c>
 400bb78:	d8000c15 	stw	zero,48(sp)
 400bb7c:	d9002117 	ldw	r4,132(sp)
 400bb80:	0103ae0e 	bge	zero,r4,400ca3c <_dtoa_r+0x11e4>
 400bb84:	2025883a 	mov	r18,r4
 400bb88:	d9000e15 	stw	r4,56(sp)
 400bb8c:	d9000915 	stw	r4,36(sp)
 400bb90:	80001115 	stw	zero,68(r16)
 400bb94:	008005c4 	movi	r2,23
 400bb98:	1484b22e 	bgeu	r2,r18,400ce64 <_dtoa_r+0x160c>
 400bb9c:	00c00044 	movi	r3,1
 400bba0:	00800104 	movi	r2,4
 400bba4:	1085883a 	add	r2,r2,r2
 400bba8:	11000504 	addi	r4,r2,20
 400bbac:	180b883a 	mov	r5,r3
 400bbb0:	18c00044 	addi	r3,r3,1
 400bbb4:	913ffb2e 	bgeu	r18,r4,400bba4 <_dtoa_r+0x34c>
 400bbb8:	81401115 	stw	r5,68(r16)
 400bbbc:	8009883a 	mov	r4,r16
 400bbc0:	400e2580 	call	400e258 <_Balloc>
 400bbc4:	102f883a 	mov	r23,r2
 400bbc8:	80801015 	stw	r2,64(r16)
 400bbcc:	00800384 	movi	r2,14
 400bbd0:	1480f036 	bltu	r2,r18,400bf94 <_dtoa_r+0x73c>
 400bbd4:	9800ef26 	beq	r19,zero,400bf94 <_dtoa_r+0x73c>
 400bbd8:	d8800617 	ldw	r2,24(sp)
 400bbdc:	00839c0e 	bge	zero,r2,400ca50 <_dtoa_r+0x11f8>
 400bbe0:	d8c00617 	ldw	r3,24(sp)
 400bbe4:	108003cc 	andi	r2,r2,15
 400bbe8:	100490fa 	slli	r2,r2,3
 400bbec:	182bd13a 	srai	r21,r3,4
 400bbf0:	00c100f4 	movhi	r3,1027
 400bbf4:	18f69904 	addi	r3,r3,-9628
 400bbf8:	1885883a 	add	r2,r3,r2
 400bbfc:	a8c0040c 	andi	r3,r21,16
 400bc00:	12800017 	ldw	r10,0(r2)
 400bc04:	15800117 	ldw	r22,4(r2)
 400bc08:	18038726 	beq	r3,zero,400ca28 <_dtoa_r+0x11d0>
 400bc0c:	008100f4 	movhi	r2,1027
 400bc10:	10b68f04 	addi	r2,r2,-9668
 400bc14:	11800817 	ldw	r6,32(r2)
 400bc18:	11c00917 	ldw	r7,36(r2)
 400bc1c:	d9000317 	ldw	r4,12(sp)
 400bc20:	880b883a 	mov	r5,r17
 400bc24:	da801515 	stw	r10,84(sp)
 400bc28:	4007e540 	call	4007e54 <__divdf3>
 400bc2c:	da801517 	ldw	r10,84(sp)
 400bc30:	d8801015 	stw	r2,64(sp)
 400bc34:	1829883a 	mov	r20,r3
 400bc38:	ad4003cc 	andi	r21,r21,15
 400bc3c:	048000c4 	movi	r18,3
 400bc40:	a8001126 	beq	r21,zero,400bc88 <_dtoa_r+0x430>
 400bc44:	04c100f4 	movhi	r19,1027
 400bc48:	9cf68f04 	addi	r19,r19,-9668
 400bc4c:	5005883a 	mov	r2,r10
 400bc50:	b007883a 	mov	r3,r22
 400bc54:	a980004c 	andi	r6,r21,1
 400bc58:	1009883a 	mov	r4,r2
 400bc5c:	a82bd07a 	srai	r21,r21,1
 400bc60:	180b883a 	mov	r5,r3
 400bc64:	30000426 	beq	r6,zero,400bc78 <_dtoa_r+0x420>
 400bc68:	99800017 	ldw	r6,0(r19)
 400bc6c:	99c00117 	ldw	r7,4(r19)
 400bc70:	94800044 	addi	r18,r18,1
 400bc74:	4007b700 	call	4007b70 <__muldf3>
 400bc78:	9cc00204 	addi	r19,r19,8
 400bc7c:	a83ff51e 	bne	r21,zero,400bc54 <_dtoa_r+0x3fc>
 400bc80:	1015883a 	mov	r10,r2
 400bc84:	182d883a 	mov	r22,r3
 400bc88:	d9001017 	ldw	r4,64(sp)
 400bc8c:	a00b883a 	mov	r5,r20
 400bc90:	500d883a 	mov	r6,r10
 400bc94:	b00f883a 	mov	r7,r22
 400bc98:	4007e540 	call	4007e54 <__divdf3>
 400bc9c:	1027883a 	mov	r19,r2
 400bca0:	1829883a 	mov	r20,r3
 400bca4:	d8c00d17 	ldw	r3,52(sp)
 400bca8:	18000626 	beq	r3,zero,400bcc4 <_dtoa_r+0x46c>
 400bcac:	9809883a 	mov	r4,r19
 400bcb0:	a00b883a 	mov	r5,r20
 400bcb4:	000d883a 	mov	r6,zero
 400bcb8:	01cffc34 	movhi	r7,16368
 400bcbc:	40080080 	call	4008008 <__ltdf2>
 400bcc0:	10040e16 	blt	r2,zero,400ccfc <_dtoa_r+0x14a4>
 400bcc4:	9009883a 	mov	r4,r18
 400bcc8:	40080640 	call	4008064 <__floatsidf>
 400bccc:	1009883a 	mov	r4,r2
 400bcd0:	180b883a 	mov	r5,r3
 400bcd4:	980d883a 	mov	r6,r19
 400bcd8:	a00f883a 	mov	r7,r20
 400bcdc:	4007b700 	call	4007b70 <__muldf3>
 400bce0:	1009883a 	mov	r4,r2
 400bce4:	180b883a 	mov	r5,r3
 400bce8:	000d883a 	mov	r6,zero
 400bcec:	01d00734 	movhi	r7,16412
 400bcf0:	4007abc0 	call	4007abc <__adddf3>
 400bcf4:	057f3034 	movhi	r21,64704
 400bcf8:	1d6b883a 	add	r21,r3,r21
 400bcfc:	d8c00917 	ldw	r3,36(sp)
 400bd00:	1025883a 	mov	r18,r2
 400bd04:	18031f26 	beq	r3,zero,400c984 <_dtoa_r+0x112c>
 400bd08:	d8800617 	ldw	r2,24(sp)
 400bd0c:	dac00917 	ldw	r11,36(sp)
 400bd10:	d8801315 	stw	r2,76(sp)
 400bd14:	d8c00c17 	ldw	r3,48(sp)
 400bd18:	18039026 	beq	r3,zero,400cb5c <_dtoa_r+0x1304>
 400bd1c:	58bfffc4 	addi	r2,r11,-1
 400bd20:	100490fa 	slli	r2,r2,3
 400bd24:	00c100f4 	movhi	r3,1027
 400bd28:	18f69904 	addi	r3,r3,-9628
 400bd2c:	0009883a 	mov	r4,zero
 400bd30:	1885883a 	add	r2,r3,r2
 400bd34:	11800017 	ldw	r6,0(r2)
 400bd38:	11c00117 	ldw	r7,4(r2)
 400bd3c:	014ff834 	movhi	r5,16352
 400bd40:	dac01615 	stw	r11,88(sp)
 400bd44:	4007e540 	call	4007e54 <__divdf3>
 400bd48:	900d883a 	mov	r6,r18
 400bd4c:	a80f883a 	mov	r7,r21
 400bd50:	1009883a 	mov	r4,r2
 400bd54:	180b883a 	mov	r5,r3
 400bd58:	4007b100 	call	4007b10 <__subdf3>
 400bd5c:	a00b883a 	mov	r5,r20
 400bd60:	9809883a 	mov	r4,r19
 400bd64:	182b883a 	mov	r21,r3
 400bd68:	d8801015 	stw	r2,64(sp)
 400bd6c:	40081380 	call	4008138 <__fixdfsi>
 400bd70:	1009883a 	mov	r4,r2
 400bd74:	d8801515 	stw	r2,84(sp)
 400bd78:	40080640 	call	4008064 <__floatsidf>
 400bd7c:	9809883a 	mov	r4,r19
 400bd80:	a00b883a 	mov	r5,r20
 400bd84:	100d883a 	mov	r6,r2
 400bd88:	180f883a 	mov	r7,r3
 400bd8c:	4007b100 	call	4007b10 <__subdf3>
 400bd90:	da401517 	ldw	r9,84(sp)
 400bd94:	d9001017 	ldw	r4,64(sp)
 400bd98:	a80b883a 	mov	r5,r21
 400bd9c:	4d000c04 	addi	r20,r9,48
 400bda0:	bd000005 	stb	r20,0(r23)
 400bda4:	100d883a 	mov	r6,r2
 400bda8:	180f883a 	mov	r7,r3
 400bdac:	bd800044 	addi	r22,r23,1
 400bdb0:	1025883a 	mov	r18,r2
 400bdb4:	1827883a 	mov	r19,r3
 400bdb8:	4010aa40 	call	4010aa4 <__gtdf2>
 400bdbc:	00842216 	blt	zero,r2,400ce48 <_dtoa_r+0x15f0>
 400bdc0:	0009883a 	mov	r4,zero
 400bdc4:	014ffc34 	movhi	r5,16368
 400bdc8:	900d883a 	mov	r6,r18
 400bdcc:	980f883a 	mov	r7,r19
 400bdd0:	4007b100 	call	4007b10 <__subdf3>
 400bdd4:	d9001017 	ldw	r4,64(sp)
 400bdd8:	a80b883a 	mov	r5,r21
 400bddc:	100d883a 	mov	r6,r2
 400bde0:	180f883a 	mov	r7,r3
 400bde4:	4010aa40 	call	4010aa4 <__gtdf2>
 400bde8:	dac01617 	ldw	r11,88(sp)
 400bdec:	00841316 	blt	zero,r2,400ce3c <_dtoa_r+0x15e4>
 400bdf0:	00800044 	movi	r2,1
 400bdf4:	12c0670e 	bge	r2,r11,400bf94 <_dtoa_r+0x73c>
 400bdf8:	bad7883a 	add	r11,r23,r11
 400bdfc:	df001115 	stw	fp,68(sp)
 400be00:	dc401215 	stw	r17,72(sp)
 400be04:	5839883a 	mov	fp,r11
 400be08:	dc401017 	ldw	r17,64(sp)
 400be0c:	00000806 	br	400be30 <_dtoa_r+0x5d8>
 400be10:	4007b100 	call	4007b10 <__subdf3>
 400be14:	1009883a 	mov	r4,r2
 400be18:	180b883a 	mov	r5,r3
 400be1c:	880d883a 	mov	r6,r17
 400be20:	a80f883a 	mov	r7,r21
 400be24:	40080080 	call	4008008 <__ltdf2>
 400be28:	1003ee16 	blt	r2,zero,400cde4 <_dtoa_r+0x158c>
 400be2c:	b703f126 	beq	r22,fp,400cdf4 <_dtoa_r+0x159c>
 400be30:	8809883a 	mov	r4,r17
 400be34:	a80b883a 	mov	r5,r21
 400be38:	000d883a 	mov	r6,zero
 400be3c:	01d00934 	movhi	r7,16420
 400be40:	4007b700 	call	4007b70 <__muldf3>
 400be44:	000d883a 	mov	r6,zero
 400be48:	01d00934 	movhi	r7,16420
 400be4c:	9009883a 	mov	r4,r18
 400be50:	980b883a 	mov	r5,r19
 400be54:	1023883a 	mov	r17,r2
 400be58:	182b883a 	mov	r21,r3
 400be5c:	4007b700 	call	4007b70 <__muldf3>
 400be60:	180b883a 	mov	r5,r3
 400be64:	1009883a 	mov	r4,r2
 400be68:	1825883a 	mov	r18,r3
 400be6c:	1027883a 	mov	r19,r2
 400be70:	40081380 	call	4008138 <__fixdfsi>
 400be74:	1009883a 	mov	r4,r2
 400be78:	1029883a 	mov	r20,r2
 400be7c:	40080640 	call	4008064 <__floatsidf>
 400be80:	9809883a 	mov	r4,r19
 400be84:	900b883a 	mov	r5,r18
 400be88:	100d883a 	mov	r6,r2
 400be8c:	180f883a 	mov	r7,r3
 400be90:	4007b100 	call	4007b10 <__subdf3>
 400be94:	a5000c04 	addi	r20,r20,48
 400be98:	b5000005 	stb	r20,0(r22)
 400be9c:	1009883a 	mov	r4,r2
 400bea0:	180b883a 	mov	r5,r3
 400bea4:	880d883a 	mov	r6,r17
 400bea8:	a80f883a 	mov	r7,r21
 400beac:	1025883a 	mov	r18,r2
 400beb0:	1827883a 	mov	r19,r3
 400beb4:	40080080 	call	4008008 <__ltdf2>
 400beb8:	b5800044 	addi	r22,r22,1
 400bebc:	0009883a 	mov	r4,zero
 400bec0:	014ffc34 	movhi	r5,16368
 400bec4:	900d883a 	mov	r6,r18
 400bec8:	980f883a 	mov	r7,r19
 400becc:	103fd00e 	bge	r2,zero,400be10 <_dtoa_r+0x5b8>
 400bed0:	d9001317 	ldw	r4,76(sp)
 400bed4:	df001117 	ldw	fp,68(sp)
 400bed8:	d9000615 	stw	r4,24(sp)
 400bedc:	8009883a 	mov	r4,r16
 400bee0:	e00b883a 	mov	r5,fp
 400bee4:	400e3000 	call	400e300 <_Bfree>
 400bee8:	d9c00617 	ldw	r7,24(sp)
 400beec:	d8c02217 	ldw	r3,136(sp)
 400bef0:	d9002417 	ldw	r4,144(sp)
 400bef4:	b0000005 	stb	zero,0(r22)
 400bef8:	38800044 	addi	r2,r7,1
 400befc:	18800015 	stw	r2,0(r3)
 400bf00:	203e8426 	beq	r4,zero,400b914 <_dtoa_r+0xbc>
 400bf04:	25800015 	stw	r22,0(r4)
 400bf08:	003e8206 	br	400b914 <_dtoa_r+0xbc>
 400bf0c:	00800434 	movhi	r2,16
 400bf10:	10bfffc4 	addi	r2,r2,-1
 400bf14:	90a4703a 	and	r18,r18,r2
 400bf18:	903e901e 	bne	r18,zero,400b95c <_dtoa_r+0x104>
 400bf1c:	05c100f4 	movhi	r23,1027
 400bf20:	bdf67104 	addi	r23,r23,-9788
 400bf24:	003e8f06 	br	400b964 <_dtoa_r+0x10c>
 400bf28:	b8800204 	addi	r2,r23,8
 400bf2c:	003e9206 	br	400b978 <_dtoa_r+0x120>
 400bf30:	01400434 	movhi	r5,16
 400bf34:	297fffc4 	addi	r5,r5,-1
 400bf38:	894a703a 	and	r5,r17,r5
 400bf3c:	d9000317 	ldw	r4,12(sp)
 400bf40:	294ffc34 	orhi	r5,r5,16368
 400bf44:	a53f0044 	addi	r20,r20,-1023
 400bf48:	dd400217 	ldw	r21,8(sp)
 400bf4c:	d8000f15 	stw	zero,60(sp)
 400bf50:	003eb106 	br	400ba18 <_dtoa_r+0x1c0>
 400bf54:	05c100f4 	movhi	r23,1027
 400bf58:	bdf66804 	addi	r23,r23,-9824
 400bf5c:	003e6d06 	br	400b914 <_dtoa_r+0xbc>
 400bf60:	d8000415 	stw	zero,16(sp)
 400bf64:	80001115 	stw	zero,68(r16)
 400bf68:	8009883a 	mov	r4,r16
 400bf6c:	000b883a 	mov	r5,zero
 400bf70:	400e2580 	call	400e258 <_Balloc>
 400bf74:	01ffffc4 	movi	r7,-1
 400bf78:	102f883a 	mov	r23,r2
 400bf7c:	80801015 	stw	r2,64(r16)
 400bf80:	00800044 	movi	r2,1
 400bf84:	d9c00915 	stw	r7,36(sp)
 400bf88:	d8002115 	stw	zero,132(sp)
 400bf8c:	d9c00e15 	stw	r7,56(sp)
 400bf90:	d8800c15 	stw	r2,48(sp)
 400bf94:	d8800117 	ldw	r2,4(sp)
 400bf98:	10008b16 	blt	r2,zero,400c1c8 <_dtoa_r+0x970>
 400bf9c:	d9000617 	ldw	r4,24(sp)
 400bfa0:	00c00384 	movi	r3,14
 400bfa4:	19008816 	blt	r3,r4,400c1c8 <_dtoa_r+0x970>
 400bfa8:	200490fa 	slli	r2,r4,3
 400bfac:	d9c02117 	ldw	r7,132(sp)
 400bfb0:	00c100f4 	movhi	r3,1027
 400bfb4:	18f69904 	addi	r3,r3,-9628
 400bfb8:	1885883a 	add	r2,r3,r2
 400bfbc:	14800017 	ldw	r18,0(r2)
 400bfc0:	14c00117 	ldw	r19,4(r2)
 400bfc4:	3801c916 	blt	r7,zero,400c6ec <_dtoa_r+0xe94>
 400bfc8:	d9000317 	ldw	r4,12(sp)
 400bfcc:	900d883a 	mov	r6,r18
 400bfd0:	980f883a 	mov	r7,r19
 400bfd4:	880b883a 	mov	r5,r17
 400bfd8:	4007e540 	call	4007e54 <__divdf3>
 400bfdc:	180b883a 	mov	r5,r3
 400bfe0:	1009883a 	mov	r4,r2
 400bfe4:	40081380 	call	4008138 <__fixdfsi>
 400bfe8:	1009883a 	mov	r4,r2
 400bfec:	102b883a 	mov	r21,r2
 400bff0:	40080640 	call	4008064 <__floatsidf>
 400bff4:	1009883a 	mov	r4,r2
 400bff8:	180b883a 	mov	r5,r3
 400bffc:	900d883a 	mov	r6,r18
 400c000:	980f883a 	mov	r7,r19
 400c004:	4007b700 	call	4007b70 <__muldf3>
 400c008:	d9000317 	ldw	r4,12(sp)
 400c00c:	880b883a 	mov	r5,r17
 400c010:	100d883a 	mov	r6,r2
 400c014:	180f883a 	mov	r7,r3
 400c018:	4007b100 	call	4007b10 <__subdf3>
 400c01c:	d9c00917 	ldw	r7,36(sp)
 400c020:	1009883a 	mov	r4,r2
 400c024:	a8800c04 	addi	r2,r21,48
 400c028:	b8800005 	stb	r2,0(r23)
 400c02c:	01800044 	movi	r6,1
 400c030:	180b883a 	mov	r5,r3
 400c034:	2005883a 	mov	r2,r4
 400c038:	bd800044 	addi	r22,r23,1
 400c03c:	39803726 	beq	r7,r6,400c11c <_dtoa_r+0x8c4>
 400c040:	000d883a 	mov	r6,zero
 400c044:	01d00934 	movhi	r7,16420
 400c048:	4007b700 	call	4007b70 <__muldf3>
 400c04c:	1009883a 	mov	r4,r2
 400c050:	180b883a 	mov	r5,r3
 400c054:	000d883a 	mov	r6,zero
 400c058:	000f883a 	mov	r7,zero
 400c05c:	1029883a 	mov	r20,r2
 400c060:	1823883a 	mov	r17,r3
 400c064:	40109ec0 	call	40109ec <__eqdf2>
 400c068:	103f9c26 	beq	r2,zero,400bedc <_dtoa_r+0x684>
 400c06c:	dd400917 	ldw	r21,36(sp)
 400c070:	dc000415 	stw	r16,16(sp)
 400c074:	00000906 	br	400c09c <_dtoa_r+0x844>
 400c078:	4007b700 	call	4007b70 <__muldf3>
 400c07c:	1009883a 	mov	r4,r2
 400c080:	180b883a 	mov	r5,r3
 400c084:	000d883a 	mov	r6,zero
 400c088:	000f883a 	mov	r7,zero
 400c08c:	1029883a 	mov	r20,r2
 400c090:	1823883a 	mov	r17,r3
 400c094:	40109ec0 	call	40109ec <__eqdf2>
 400c098:	10022926 	beq	r2,zero,400c940 <_dtoa_r+0x10e8>
 400c09c:	900d883a 	mov	r6,r18
 400c0a0:	980f883a 	mov	r7,r19
 400c0a4:	a009883a 	mov	r4,r20
 400c0a8:	880b883a 	mov	r5,r17
 400c0ac:	4007e540 	call	4007e54 <__divdf3>
 400c0b0:	180b883a 	mov	r5,r3
 400c0b4:	1009883a 	mov	r4,r2
 400c0b8:	40081380 	call	4008138 <__fixdfsi>
 400c0bc:	1009883a 	mov	r4,r2
 400c0c0:	1021883a 	mov	r16,r2
 400c0c4:	40080640 	call	4008064 <__floatsidf>
 400c0c8:	1009883a 	mov	r4,r2
 400c0cc:	180b883a 	mov	r5,r3
 400c0d0:	900d883a 	mov	r6,r18
 400c0d4:	980f883a 	mov	r7,r19
 400c0d8:	4007b700 	call	4007b70 <__muldf3>
 400c0dc:	a009883a 	mov	r4,r20
 400c0e0:	880b883a 	mov	r5,r17
 400c0e4:	100d883a 	mov	r6,r2
 400c0e8:	180f883a 	mov	r7,r3
 400c0ec:	4007b100 	call	4007b10 <__subdf3>
 400c0f0:	82400c04 	addi	r9,r16,48
 400c0f4:	b2400005 	stb	r9,0(r22)
 400c0f8:	b5800044 	addi	r22,r22,1
 400c0fc:	b5d3c83a 	sub	r9,r22,r23
 400c100:	000d883a 	mov	r6,zero
 400c104:	01d00934 	movhi	r7,16420
 400c108:	1009883a 	mov	r4,r2
 400c10c:	180b883a 	mov	r5,r3
 400c110:	aa7fd91e 	bne	r21,r9,400c078 <_dtoa_r+0x820>
 400c114:	802b883a 	mov	r21,r16
 400c118:	dc000417 	ldw	r16,16(sp)
 400c11c:	1009883a 	mov	r4,r2
 400c120:	180b883a 	mov	r5,r3
 400c124:	100d883a 	mov	r6,r2
 400c128:	180f883a 	mov	r7,r3
 400c12c:	4007abc0 	call	4007abc <__adddf3>
 400c130:	9009883a 	mov	r4,r18
 400c134:	980b883a 	mov	r5,r19
 400c138:	100d883a 	mov	r6,r2
 400c13c:	180f883a 	mov	r7,r3
 400c140:	1023883a 	mov	r17,r2
 400c144:	1829883a 	mov	r20,r3
 400c148:	40080080 	call	4008008 <__ltdf2>
 400c14c:	10000816 	blt	r2,zero,400c170 <_dtoa_r+0x918>
 400c150:	9009883a 	mov	r4,r18
 400c154:	980b883a 	mov	r5,r19
 400c158:	880d883a 	mov	r6,r17
 400c15c:	a00f883a 	mov	r7,r20
 400c160:	40109ec0 	call	40109ec <__eqdf2>
 400c164:	103f5d1e 	bne	r2,zero,400bedc <_dtoa_r+0x684>
 400c168:	ad40004c 	andi	r21,r21,1
 400c16c:	a83f5b26 	beq	r21,zero,400bedc <_dtoa_r+0x684>
 400c170:	b53fffc3 	ldbu	r20,-1(r22)
 400c174:	b0ffff84 	addi	r3,r22,-2
 400c178:	01400e44 	movi	r5,57
 400c17c:	00000306 	br	400c18c <_dtoa_r+0x934>
 400c180:	1d000003 	ldbu	r20,0(r3)
 400c184:	102d883a 	mov	r22,r2
 400c188:	18ffffc4 	addi	r3,r3,-1
 400c18c:	a1003fcc 	andi	r4,r20,255
 400c190:	2100201c 	xori	r4,r4,128
 400c194:	213fe004 	addi	r4,r4,-128
 400c198:	b0bfffc4 	addi	r2,r22,-1
 400c19c:	2142ca1e 	bne	r4,r5,400ccc8 <_dtoa_r+0x1470>
 400c1a0:	b8bff71e 	bne	r23,r2,400c180 <_dtoa_r+0x928>
 400c1a4:	d8800617 	ldw	r2,24(sp)
 400c1a8:	05000c44 	movi	r20,49
 400c1ac:	10800044 	addi	r2,r2,1
 400c1b0:	d8800615 	stw	r2,24(sp)
 400c1b4:	00800c04 	movi	r2,48
 400c1b8:	b8800005 	stb	r2,0(r23)
 400c1bc:	b805883a 	mov	r2,r23
 400c1c0:	15000005 	stb	r20,0(r2)
 400c1c4:	003f4506 	br	400bedc <_dtoa_r+0x684>
 400c1c8:	d9c00c17 	ldw	r7,48(sp)
 400c1cc:	3800c926 	beq	r7,zero,400c4f4 <_dtoa_r+0xc9c>
 400c1d0:	d9c00417 	ldw	r7,16(sp)
 400c1d4:	00c00044 	movi	r3,1
 400c1d8:	19c16c0e 	bge	r3,r7,400c78c <_dtoa_r+0xf34>
 400c1dc:	d9000917 	ldw	r4,36(sp)
 400c1e0:	d9c00a17 	ldw	r7,40(sp)
 400c1e4:	24ffffc4 	addi	r19,r4,-1
 400c1e8:	3cc20716 	blt	r7,r19,400ca08 <_dtoa_r+0x11b0>
 400c1ec:	3ce7c83a 	sub	r19,r7,r19
 400c1f0:	d9c00917 	ldw	r7,36(sp)
 400c1f4:	3802ae16 	blt	r7,zero,400ccb0 <_dtoa_r+0x1458>
 400c1f8:	dc800817 	ldw	r18,32(sp)
 400c1fc:	d8800917 	ldw	r2,36(sp)
 400c200:	d8c00817 	ldw	r3,32(sp)
 400c204:	d9c00717 	ldw	r7,28(sp)
 400c208:	8009883a 	mov	r4,r16
 400c20c:	1887883a 	add	r3,r3,r2
 400c210:	388f883a 	add	r7,r7,r2
 400c214:	01400044 	movi	r5,1
 400c218:	d8c00815 	stw	r3,32(sp)
 400c21c:	d9c00715 	stw	r7,28(sp)
 400c220:	400e6580 	call	400e658 <__i2b>
 400c224:	102b883a 	mov	r21,r2
 400c228:	90000a26 	beq	r18,zero,400c254 <_dtoa_r+0x9fc>
 400c22c:	d8800717 	ldw	r2,28(sp)
 400c230:	0080080e 	bge	zero,r2,400c254 <_dtoa_r+0x9fc>
 400c234:	90812b16 	blt	r18,r2,400c6e4 <_dtoa_r+0xe8c>
 400c238:	d8c00817 	ldw	r3,32(sp)
 400c23c:	d9000717 	ldw	r4,28(sp)
 400c240:	90a5c83a 	sub	r18,r18,r2
 400c244:	1887c83a 	sub	r3,r3,r2
 400c248:	2089c83a 	sub	r4,r4,r2
 400c24c:	d8c00815 	stw	r3,32(sp)
 400c250:	d9000715 	stw	r4,28(sp)
 400c254:	d9c00a17 	ldw	r7,40(sp)
 400c258:	01c0140e 	bge	zero,r7,400c2ac <_dtoa_r+0xa54>
 400c25c:	d8800c17 	ldw	r2,48(sp)
 400c260:	1001de26 	beq	r2,zero,400c9dc <_dtoa_r+0x1184>
 400c264:	04c00e0e 	bge	zero,r19,400c2a0 <_dtoa_r+0xa48>
 400c268:	a80b883a 	mov	r5,r21
 400c26c:	8009883a 	mov	r4,r16
 400c270:	980d883a 	mov	r6,r19
 400c274:	400e8740 	call	400e874 <__pow5mult>
 400c278:	e00d883a 	mov	r6,fp
 400c27c:	8009883a 	mov	r4,r16
 400c280:	100b883a 	mov	r5,r2
 400c284:	102b883a 	mov	r21,r2
 400c288:	400e6940 	call	400e694 <__multiply>
 400c28c:	1029883a 	mov	r20,r2
 400c290:	e00b883a 	mov	r5,fp
 400c294:	8009883a 	mov	r4,r16
 400c298:	400e3000 	call	400e300 <_Bfree>
 400c29c:	a039883a 	mov	fp,r20
 400c2a0:	d8c00a17 	ldw	r3,40(sp)
 400c2a4:	1ccdc83a 	sub	r6,r3,r19
 400c2a8:	3001291e 	bne	r6,zero,400c750 <_dtoa_r+0xef8>
 400c2ac:	8009883a 	mov	r4,r16
 400c2b0:	01400044 	movi	r5,1
 400c2b4:	400e6580 	call	400e658 <__i2b>
 400c2b8:	d9000b17 	ldw	r4,44(sp)
 400c2bc:	1029883a 	mov	r20,r2
 400c2c0:	0100050e 	bge	zero,r4,400c2d8 <_dtoa_r+0xa80>
 400c2c4:	d9800b17 	ldw	r6,44(sp)
 400c2c8:	8009883a 	mov	r4,r16
 400c2cc:	100b883a 	mov	r5,r2
 400c2d0:	400e8740 	call	400e874 <__pow5mult>
 400c2d4:	1029883a 	mov	r20,r2
 400c2d8:	d9c00417 	ldw	r7,16(sp)
 400c2dc:	00800044 	movi	r2,1
 400c2e0:	11c0f00e 	bge	r2,r7,400c6a4 <_dtoa_r+0xe4c>
 400c2e4:	0023883a 	mov	r17,zero
 400c2e8:	d8800b17 	ldw	r2,44(sp)
 400c2ec:	1001741e 	bne	r2,zero,400c8c0 <_dtoa_r+0x1068>
 400c2f0:	00800044 	movi	r2,1
 400c2f4:	d8c00717 	ldw	r3,28(sp)
 400c2f8:	10c5883a 	add	r2,r2,r3
 400c2fc:	108007cc 	andi	r2,r2,31
 400c300:	10008026 	beq	r2,zero,400c504 <_dtoa_r+0xcac>
 400c304:	01000804 	movi	r4,32
 400c308:	2089c83a 	sub	r4,r4,r2
 400c30c:	00c00104 	movi	r3,4
 400c310:	1902d00e 	bge	r3,r4,400ce54 <_dtoa_r+0x15fc>
 400c314:	d9000817 	ldw	r4,32(sp)
 400c318:	d9c00717 	ldw	r7,28(sp)
 400c31c:	00c00704 	movi	r3,28
 400c320:	1885c83a 	sub	r2,r3,r2
 400c324:	2089883a 	add	r4,r4,r2
 400c328:	388f883a 	add	r7,r7,r2
 400c32c:	d9000815 	stw	r4,32(sp)
 400c330:	90a5883a 	add	r18,r18,r2
 400c334:	d9c00715 	stw	r7,28(sp)
 400c338:	d9c00817 	ldw	r7,32(sp)
 400c33c:	01c0050e 	bge	zero,r7,400c354 <_dtoa_r+0xafc>
 400c340:	e00b883a 	mov	r5,fp
 400c344:	8009883a 	mov	r4,r16
 400c348:	380d883a 	mov	r6,r7
 400c34c:	400e9a00 	call	400e9a0 <__lshift>
 400c350:	1039883a 	mov	fp,r2
 400c354:	d8800717 	ldw	r2,28(sp)
 400c358:	0080050e 	bge	zero,r2,400c370 <_dtoa_r+0xb18>
 400c35c:	a00b883a 	mov	r5,r20
 400c360:	8009883a 	mov	r4,r16
 400c364:	100d883a 	mov	r6,r2
 400c368:	400e9a00 	call	400e9a0 <__lshift>
 400c36c:	1029883a 	mov	r20,r2
 400c370:	d8c00d17 	ldw	r3,52(sp)
 400c374:	1801401e 	bne	r3,zero,400c878 <_dtoa_r+0x1020>
 400c378:	d8800917 	ldw	r2,36(sp)
 400c37c:	00815a0e 	bge	zero,r2,400c8e8 <_dtoa_r+0x1090>
 400c380:	d8c00c17 	ldw	r3,48(sp)
 400c384:	18006f1e 	bne	r3,zero,400c544 <_dtoa_r+0xcec>
 400c388:	b823883a 	mov	r17,r23
 400c38c:	dc800917 	ldw	r18,36(sp)
 400c390:	00000206 	br	400c39c <_dtoa_r+0xb44>
 400c394:	400e3280 	call	400e328 <__multadd>
 400c398:	1039883a 	mov	fp,r2
 400c39c:	e009883a 	mov	r4,fp
 400c3a0:	a00b883a 	mov	r5,r20
 400c3a4:	400b6500 	call	400b650 <quorem>
 400c3a8:	10800c04 	addi	r2,r2,48
 400c3ac:	88800005 	stb	r2,0(r17)
 400c3b0:	8c400044 	addi	r17,r17,1
 400c3b4:	8dc7c83a 	sub	r3,r17,r23
 400c3b8:	8009883a 	mov	r4,r16
 400c3bc:	e00b883a 	mov	r5,fp
 400c3c0:	01800284 	movi	r6,10
 400c3c4:	000f883a 	mov	r7,zero
 400c3c8:	1cbff216 	blt	r3,r18,400c394 <_dtoa_r+0xb3c>
 400c3cc:	dd800917 	ldw	r22,36(sp)
 400c3d0:	1007883a 	mov	r3,r2
 400c3d4:	05823a0e 	bge	zero,r22,400ccc0 <_dtoa_r+0x1468>
 400c3d8:	bdad883a 	add	r22,r23,r22
 400c3dc:	0023883a 	mov	r17,zero
 400c3e0:	e00b883a 	mov	r5,fp
 400c3e4:	01800044 	movi	r6,1
 400c3e8:	8009883a 	mov	r4,r16
 400c3ec:	d8c01515 	stw	r3,84(sp)
 400c3f0:	400e9a00 	call	400e9a0 <__lshift>
 400c3f4:	1009883a 	mov	r4,r2
 400c3f8:	a00b883a 	mov	r5,r20
 400c3fc:	1039883a 	mov	fp,r2
 400c400:	400eafc0 	call	400eafc <__mcmp>
 400c404:	d8c01517 	ldw	r3,84(sp)
 400c408:	0080d60e 	bge	zero,r2,400c764 <_dtoa_r+0xf0c>
 400c40c:	b13fffc3 	ldbu	r4,-1(r22)
 400c410:	b0ffff84 	addi	r3,r22,-2
 400c414:	01800e44 	movi	r6,57
 400c418:	00000306 	br	400c428 <_dtoa_r+0xbd0>
 400c41c:	19000003 	ldbu	r4,0(r3)
 400c420:	102d883a 	mov	r22,r2
 400c424:	18ffffc4 	addi	r3,r3,-1
 400c428:	21403fcc 	andi	r5,r4,255
 400c42c:	2940201c 	xori	r5,r5,128
 400c430:	297fe004 	addi	r5,r5,-128
 400c434:	b0bfffc4 	addi	r2,r22,-1
 400c438:	2981a71e 	bne	r5,r6,400cad8 <_dtoa_r+0x1280>
 400c43c:	b8bff71e 	bne	r23,r2,400c41c <_dtoa_r+0xbc4>
 400c440:	d8800617 	ldw	r2,24(sp)
 400c444:	10800044 	addi	r2,r2,1
 400c448:	d8800615 	stw	r2,24(sp)
 400c44c:	00800c44 	movi	r2,49
 400c450:	b8800005 	stb	r2,0(r23)
 400c454:	8009883a 	mov	r4,r16
 400c458:	a00b883a 	mov	r5,r20
 400c45c:	400e3000 	call	400e300 <_Bfree>
 400c460:	a83e9e26 	beq	r21,zero,400bedc <_dtoa_r+0x684>
 400c464:	88000426 	beq	r17,zero,400c478 <_dtoa_r+0xc20>
 400c468:	8d400326 	beq	r17,r21,400c478 <_dtoa_r+0xc20>
 400c46c:	8009883a 	mov	r4,r16
 400c470:	880b883a 	mov	r5,r17
 400c474:	400e3000 	call	400e300 <_Bfree>
 400c478:	8009883a 	mov	r4,r16
 400c47c:	a80b883a 	mov	r5,r21
 400c480:	400e3000 	call	400e300 <_Bfree>
 400c484:	003e9506 	br	400bedc <_dtoa_r+0x684>
 400c488:	00c00044 	movi	r3,1
 400c48c:	d8c00d15 	stw	r3,52(sp)
 400c490:	003d9f06 	br	400bb10 <_dtoa_r+0x2b8>
 400c494:	d9000817 	ldw	r4,32(sp)
 400c498:	d8800617 	ldw	r2,24(sp)
 400c49c:	d8000b15 	stw	zero,44(sp)
 400c4a0:	2089c83a 	sub	r4,r4,r2
 400c4a4:	0087c83a 	sub	r3,zero,r2
 400c4a8:	d9000815 	stw	r4,32(sp)
 400c4ac:	d8c00a15 	stw	r3,40(sp)
 400c4b0:	003da306 	br	400bb40 <_dtoa_r+0x2e8>
 400c4b4:	0529c83a 	sub	r20,zero,r20
 400c4b8:	dd000815 	stw	r20,32(sp)
 400c4bc:	d8000715 	stw	zero,28(sp)
 400c4c0:	003d9806 	br	400bb24 <_dtoa_r+0x2cc>
 400c4c4:	d9000617 	ldw	r4,24(sp)
 400c4c8:	40080640 	call	4008064 <__floatsidf>
 400c4cc:	1009883a 	mov	r4,r2
 400c4d0:	180b883a 	mov	r5,r3
 400c4d4:	980d883a 	mov	r6,r19
 400c4d8:	900f883a 	mov	r7,r18
 400c4dc:	4010a480 	call	4010a48 <__nedf2>
 400c4e0:	103d7a26 	beq	r2,zero,400bacc <_dtoa_r+0x274>
 400c4e4:	d8800617 	ldw	r2,24(sp)
 400c4e8:	10bfffc4 	addi	r2,r2,-1
 400c4ec:	d8800615 	stw	r2,24(sp)
 400c4f0:	003d7606 	br	400bacc <_dtoa_r+0x274>
 400c4f4:	dcc00a17 	ldw	r19,40(sp)
 400c4f8:	dc800817 	ldw	r18,32(sp)
 400c4fc:	002b883a 	mov	r21,zero
 400c500:	003f4906 	br	400c228 <_dtoa_r+0x9d0>
 400c504:	00800704 	movi	r2,28
 400c508:	d8c00817 	ldw	r3,32(sp)
 400c50c:	d9000717 	ldw	r4,28(sp)
 400c510:	90a5883a 	add	r18,r18,r2
 400c514:	1887883a 	add	r3,r3,r2
 400c518:	2089883a 	add	r4,r4,r2
 400c51c:	d8c00815 	stw	r3,32(sp)
 400c520:	d9000715 	stw	r4,28(sp)
 400c524:	003f8406 	br	400c338 <_dtoa_r+0xae0>
 400c528:	d9c00317 	ldw	r7,12(sp)
 400c52c:	013efb84 	movi	r4,-1042
 400c530:	2509c83a 	sub	r4,r4,r20
 400c534:	3908983a 	sll	r4,r7,r4
 400c538:	003d3006 	br	400b9fc <_dtoa_r+0x1a4>
 400c53c:	d8000d15 	stw	zero,52(sp)
 400c540:	003d7306 	br	400bb10 <_dtoa_r+0x2b8>
 400c544:	0480050e 	bge	zero,r18,400c55c <_dtoa_r+0xd04>
 400c548:	a80b883a 	mov	r5,r21
 400c54c:	8009883a 	mov	r4,r16
 400c550:	900d883a 	mov	r6,r18
 400c554:	400e9a00 	call	400e9a0 <__lshift>
 400c558:	102b883a 	mov	r21,r2
 400c55c:	8801611e 	bne	r17,zero,400cae4 <_dtoa_r+0x128c>
 400c560:	a827883a 	mov	r19,r21
 400c564:	d8c00317 	ldw	r3,12(sp)
 400c568:	d9000917 	ldw	r4,36(sp)
 400c56c:	b8bfffc4 	addi	r2,r23,-1
 400c570:	18c0004c 	andi	r3,r3,1
 400c574:	1105883a 	add	r2,r2,r4
 400c578:	b825883a 	mov	r18,r23
 400c57c:	d8800515 	stw	r2,20(sp)
 400c580:	a823883a 	mov	r17,r21
 400c584:	d8c00315 	stw	r3,12(sp)
 400c588:	ddc00715 	stw	r23,28(sp)
 400c58c:	e009883a 	mov	r4,fp
 400c590:	a00b883a 	mov	r5,r20
 400c594:	400b6500 	call	400b650 <quorem>
 400c598:	e009883a 	mov	r4,fp
 400c59c:	880b883a 	mov	r5,r17
 400c5a0:	102d883a 	mov	r22,r2
 400c5a4:	400eafc0 	call	400eafc <__mcmp>
 400c5a8:	980d883a 	mov	r6,r19
 400c5ac:	8009883a 	mov	r4,r16
 400c5b0:	a00b883a 	mov	r5,r20
 400c5b4:	102b883a 	mov	r21,r2
 400c5b8:	400eb540 	call	400eb54 <__mdiff>
 400c5bc:	100d883a 	mov	r6,r2
 400c5c0:	10800317 	ldw	r2,12(r2)
 400c5c4:	b5c00c04 	addi	r23,r22,48
 400c5c8:	10008c26 	beq	r2,zero,400c7fc <_dtoa_r+0xfa4>
 400c5cc:	8009883a 	mov	r4,r16
 400c5d0:	300b883a 	mov	r5,r6
 400c5d4:	400e3000 	call	400e300 <_Bfree>
 400c5d8:	00800044 	movi	r2,1
 400c5dc:	a8007116 	blt	r21,zero,400c7a4 <_dtoa_r+0xf4c>
 400c5e0:	a800041e 	bne	r21,zero,400c5f4 <_dtoa_r+0xd9c>
 400c5e4:	d9c00417 	ldw	r7,16(sp)
 400c5e8:	3800021e 	bne	r7,zero,400c5f4 <_dtoa_r+0xd9c>
 400c5ec:	d8c00317 	ldw	r3,12(sp)
 400c5f0:	18006c26 	beq	r3,zero,400c7a4 <_dtoa_r+0xf4c>
 400c5f4:	00814c16 	blt	zero,r2,400cb28 <_dtoa_r+0x12d0>
 400c5f8:	d8c00517 	ldw	r3,20(sp)
 400c5fc:	95400044 	addi	r21,r18,1
 400c600:	95c00005 	stb	r23,0(r18)
 400c604:	a82d883a 	mov	r22,r21
 400c608:	90c14d26 	beq	r18,r3,400cb40 <_dtoa_r+0x12e8>
 400c60c:	e00b883a 	mov	r5,fp
 400c610:	8009883a 	mov	r4,r16
 400c614:	01800284 	movi	r6,10
 400c618:	000f883a 	mov	r7,zero
 400c61c:	400e3280 	call	400e328 <__multadd>
 400c620:	1039883a 	mov	fp,r2
 400c624:	8cc08b26 	beq	r17,r19,400c854 <_dtoa_r+0xffc>
 400c628:	880b883a 	mov	r5,r17
 400c62c:	01800284 	movi	r6,10
 400c630:	000f883a 	mov	r7,zero
 400c634:	8009883a 	mov	r4,r16
 400c638:	400e3280 	call	400e328 <__multadd>
 400c63c:	980b883a 	mov	r5,r19
 400c640:	8009883a 	mov	r4,r16
 400c644:	01800284 	movi	r6,10
 400c648:	000f883a 	mov	r7,zero
 400c64c:	1023883a 	mov	r17,r2
 400c650:	400e3280 	call	400e328 <__multadd>
 400c654:	1027883a 	mov	r19,r2
 400c658:	a825883a 	mov	r18,r21
 400c65c:	003fcb06 	br	400c58c <_dtoa_r+0xd34>
 400c660:	d9c00417 	ldw	r7,16(sp)
 400c664:	00800104 	movi	r2,4
 400c668:	3880e426 	beq	r7,r2,400c9fc <_dtoa_r+0x11a4>
 400c66c:	00800144 	movi	r2,5
 400c670:	38be3c1e 	bne	r7,r2,400bf64 <_dtoa_r+0x70c>
 400c674:	00c00044 	movi	r3,1
 400c678:	d8c00c15 	stw	r3,48(sp)
 400c67c:	d9c02117 	ldw	r7,132(sp)
 400c680:	d8800617 	ldw	r2,24(sp)
 400c684:	388f883a 	add	r7,r7,r2
 400c688:	3c800044 	addi	r18,r7,1
 400c68c:	d9c00e15 	stw	r7,56(sp)
 400c690:	dc800915 	stw	r18,36(sp)
 400c694:	04bd3e16 	blt	zero,r18,400bb90 <_dtoa_r+0x338>
 400c698:	80001115 	stw	zero,68(r16)
 400c69c:	000b883a 	mov	r5,zero
 400c6a0:	003d4606 	br	400bbbc <_dtoa_r+0x364>
 400c6a4:	d8c00317 	ldw	r3,12(sp)
 400c6a8:	183f0e1e 	bne	r3,zero,400c2e4 <_dtoa_r+0xa8c>
 400c6ac:	00c00434 	movhi	r3,16
 400c6b0:	18ffffc4 	addi	r3,r3,-1
 400c6b4:	88c6703a 	and	r3,r17,r3
 400c6b8:	183f0a1e 	bne	r3,zero,400c2e4 <_dtoa_r+0xa8c>
 400c6bc:	8c5ffc2c 	andhi	r17,r17,32752
 400c6c0:	883f0826 	beq	r17,zero,400c2e4 <_dtoa_r+0xa8c>
 400c6c4:	d9000817 	ldw	r4,32(sp)
 400c6c8:	d9c00717 	ldw	r7,28(sp)
 400c6cc:	1023883a 	mov	r17,r2
 400c6d0:	2089883a 	add	r4,r4,r2
 400c6d4:	388f883a 	add	r7,r7,r2
 400c6d8:	d9000815 	stw	r4,32(sp)
 400c6dc:	d9c00715 	stw	r7,28(sp)
 400c6e0:	003f0106 	br	400c2e8 <_dtoa_r+0xa90>
 400c6e4:	9005883a 	mov	r2,r18
 400c6e8:	003ed306 	br	400c238 <_dtoa_r+0x9e0>
 400c6ec:	d8800917 	ldw	r2,36(sp)
 400c6f0:	00be3516 	blt	zero,r2,400bfc8 <_dtoa_r+0x770>
 400c6f4:	1000b61e 	bne	r2,zero,400c9d0 <_dtoa_r+0x1178>
 400c6f8:	9009883a 	mov	r4,r18
 400c6fc:	980b883a 	mov	r5,r19
 400c700:	000d883a 	mov	r6,zero
 400c704:	01d00534 	movhi	r7,16404
 400c708:	4007b700 	call	4007b70 <__muldf3>
 400c70c:	d9800317 	ldw	r6,12(sp)
 400c710:	1009883a 	mov	r4,r2
 400c714:	180b883a 	mov	r5,r3
 400c718:	880f883a 	mov	r7,r17
 400c71c:	4010b080 	call	4010b08 <__gedf2>
 400c720:	0029883a 	mov	r20,zero
 400c724:	002b883a 	mov	r21,zero
 400c728:	10007e16 	blt	r2,zero,400c924 <_dtoa_r+0x10cc>
 400c72c:	d8802117 	ldw	r2,132(sp)
 400c730:	b82d883a 	mov	r22,r23
 400c734:	0084303a 	nor	r2,zero,r2
 400c738:	d8800615 	stw	r2,24(sp)
 400c73c:	8009883a 	mov	r4,r16
 400c740:	a00b883a 	mov	r5,r20
 400c744:	400e3000 	call	400e300 <_Bfree>
 400c748:	a83f4b1e 	bne	r21,zero,400c478 <_dtoa_r+0xc20>
 400c74c:	003de306 	br	400bedc <_dtoa_r+0x684>
 400c750:	e00b883a 	mov	r5,fp
 400c754:	8009883a 	mov	r4,r16
 400c758:	400e8740 	call	400e874 <__pow5mult>
 400c75c:	1039883a 	mov	fp,r2
 400c760:	003ed206 	br	400c2ac <_dtoa_r+0xa54>
 400c764:	1000021e 	bne	r2,zero,400c770 <_dtoa_r+0xf18>
 400c768:	18c0004c 	andi	r3,r3,1
 400c76c:	183f271e 	bne	r3,zero,400c40c <_dtoa_r+0xbb4>
 400c770:	01000c04 	movi	r4,48
 400c774:	00000106 	br	400c77c <_dtoa_r+0xf24>
 400c778:	102d883a 	mov	r22,r2
 400c77c:	b0bfffc4 	addi	r2,r22,-1
 400c780:	10c00007 	ldb	r3,0(r2)
 400c784:	193ffc26 	beq	r3,r4,400c778 <_dtoa_r+0xf20>
 400c788:	003f3206 	br	400c454 <_dtoa_r+0xbfc>
 400c78c:	d8c00f17 	ldw	r3,60(sp)
 400c790:	18015026 	beq	r3,zero,400ccd4 <_dtoa_r+0x147c>
 400c794:	10810cc4 	addi	r2,r2,1075
 400c798:	dcc00a17 	ldw	r19,40(sp)
 400c79c:	dc800817 	ldw	r18,32(sp)
 400c7a0:	003e9706 	br	400c200 <_dtoa_r+0x9a8>
 400c7a4:	b807883a 	mov	r3,r23
 400c7a8:	182b883a 	mov	r21,r3
 400c7ac:	ddc00717 	ldw	r23,28(sp)
 400c7b0:	00800e0e 	bge	zero,r2,400c7ec <_dtoa_r+0xf94>
 400c7b4:	e00b883a 	mov	r5,fp
 400c7b8:	01800044 	movi	r6,1
 400c7bc:	8009883a 	mov	r4,r16
 400c7c0:	d8c01515 	stw	r3,84(sp)
 400c7c4:	400e9a00 	call	400e9a0 <__lshift>
 400c7c8:	1009883a 	mov	r4,r2
 400c7cc:	a00b883a 	mov	r5,r20
 400c7d0:	1039883a 	mov	fp,r2
 400c7d4:	400eafc0 	call	400eafc <__mcmp>
 400c7d8:	d8c01517 	ldw	r3,84(sp)
 400c7dc:	0081880e 	bge	zero,r2,400ce00 <_dtoa_r+0x15a8>
 400c7e0:	00800e44 	movi	r2,57
 400c7e4:	b0c00c44 	addi	r3,r22,49
 400c7e8:	a8816326 	beq	r21,r2,400cd78 <_dtoa_r+0x1520>
 400c7ec:	90c00005 	stb	r3,0(r18)
 400c7f0:	95800044 	addi	r22,r18,1
 400c7f4:	982b883a 	mov	r21,r19
 400c7f8:	003f1606 	br	400c454 <_dtoa_r+0xbfc>
 400c7fc:	300b883a 	mov	r5,r6
 400c800:	e009883a 	mov	r4,fp
 400c804:	d9801515 	stw	r6,84(sp)
 400c808:	400eafc0 	call	400eafc <__mcmp>
 400c80c:	d9801517 	ldw	r6,84(sp)
 400c810:	8009883a 	mov	r4,r16
 400c814:	d8801515 	stw	r2,84(sp)
 400c818:	300b883a 	mov	r5,r6
 400c81c:	400e3000 	call	400e300 <_Bfree>
 400c820:	d8801517 	ldw	r2,84(sp)
 400c824:	103f6d1e 	bne	r2,zero,400c5dc <_dtoa_r+0xd84>
 400c828:	d9c00417 	ldw	r7,16(sp)
 400c82c:	383f6b1e 	bne	r7,zero,400c5dc <_dtoa_r+0xd84>
 400c830:	d8c00317 	ldw	r3,12(sp)
 400c834:	183f691e 	bne	r3,zero,400c5dc <_dtoa_r+0xd84>
 400c838:	b807883a 	mov	r3,r23
 400c83c:	00800e44 	movi	r2,57
 400c840:	ddc00717 	ldw	r23,28(sp)
 400c844:	18814c26 	beq	r3,r2,400cd78 <_dtoa_r+0x1520>
 400c848:	057fe80e 	bge	zero,r21,400c7ec <_dtoa_r+0xf94>
 400c84c:	b0c00c44 	addi	r3,r22,49
 400c850:	003fe606 	br	400c7ec <_dtoa_r+0xf94>
 400c854:	880b883a 	mov	r5,r17
 400c858:	8009883a 	mov	r4,r16
 400c85c:	01800284 	movi	r6,10
 400c860:	000f883a 	mov	r7,zero
 400c864:	400e3280 	call	400e328 <__multadd>
 400c868:	1023883a 	mov	r17,r2
 400c86c:	1027883a 	mov	r19,r2
 400c870:	a825883a 	mov	r18,r21
 400c874:	003f4506 	br	400c58c <_dtoa_r+0xd34>
 400c878:	e009883a 	mov	r4,fp
 400c87c:	a00b883a 	mov	r5,r20
 400c880:	400eafc0 	call	400eafc <__mcmp>
 400c884:	103ebc0e 	bge	r2,zero,400c378 <_dtoa_r+0xb20>
 400c888:	e00b883a 	mov	r5,fp
 400c88c:	8009883a 	mov	r4,r16
 400c890:	01800284 	movi	r6,10
 400c894:	000f883a 	mov	r7,zero
 400c898:	400e3280 	call	400e328 <__multadd>
 400c89c:	1039883a 	mov	fp,r2
 400c8a0:	d8800617 	ldw	r2,24(sp)
 400c8a4:	d8c00c17 	ldw	r3,48(sp)
 400c8a8:	10bfffc4 	addi	r2,r2,-1
 400c8ac:	d8800615 	stw	r2,24(sp)
 400c8b0:	1801571e 	bne	r3,zero,400ce10 <_dtoa_r+0x15b8>
 400c8b4:	d9c00e17 	ldw	r7,56(sp)
 400c8b8:	d9c00915 	stw	r7,36(sp)
 400c8bc:	003eae06 	br	400c378 <_dtoa_r+0xb20>
 400c8c0:	a0800417 	ldw	r2,16(r20)
 400c8c4:	10800104 	addi	r2,r2,4
 400c8c8:	1085883a 	add	r2,r2,r2
 400c8cc:	1085883a 	add	r2,r2,r2
 400c8d0:	a085883a 	add	r2,r20,r2
 400c8d4:	11000017 	ldw	r4,0(r2)
 400c8d8:	400e5400 	call	400e540 <__hi0bits>
 400c8dc:	00c00804 	movi	r3,32
 400c8e0:	1885c83a 	sub	r2,r3,r2
 400c8e4:	003e8306 	br	400c2f4 <_dtoa_r+0xa9c>
 400c8e8:	d9c00417 	ldw	r7,16(sp)
 400c8ec:	00800084 	movi	r2,2
 400c8f0:	11fea30e 	bge	r2,r7,400c380 <_dtoa_r+0xb28>
 400c8f4:	d8800917 	ldw	r2,36(sp)
 400c8f8:	103f8c1e 	bne	r2,zero,400c72c <_dtoa_r+0xed4>
 400c8fc:	a00b883a 	mov	r5,r20
 400c900:	8009883a 	mov	r4,r16
 400c904:	01800144 	movi	r6,5
 400c908:	000f883a 	mov	r7,zero
 400c90c:	400e3280 	call	400e328 <__multadd>
 400c910:	e009883a 	mov	r4,fp
 400c914:	100b883a 	mov	r5,r2
 400c918:	1029883a 	mov	r20,r2
 400c91c:	400eafc0 	call	400eafc <__mcmp>
 400c920:	00bf820e 	bge	zero,r2,400c72c <_dtoa_r+0xed4>
 400c924:	00800c44 	movi	r2,49
 400c928:	b8800005 	stb	r2,0(r23)
 400c92c:	d8800617 	ldw	r2,24(sp)
 400c930:	bd800044 	addi	r22,r23,1
 400c934:	10800044 	addi	r2,r2,1
 400c938:	d8800615 	stw	r2,24(sp)
 400c93c:	003f7f06 	br	400c73c <_dtoa_r+0xee4>
 400c940:	dc000417 	ldw	r16,16(sp)
 400c944:	003d6506 	br	400bedc <_dtoa_r+0x684>
 400c948:	9009883a 	mov	r4,r18
 400c94c:	40080640 	call	4008064 <__floatsidf>
 400c950:	1009883a 	mov	r4,r2
 400c954:	180b883a 	mov	r5,r3
 400c958:	980d883a 	mov	r6,r19
 400c95c:	a00f883a 	mov	r7,r20
 400c960:	4007b700 	call	4007b70 <__muldf3>
 400c964:	1009883a 	mov	r4,r2
 400c968:	180b883a 	mov	r5,r3
 400c96c:	000d883a 	mov	r6,zero
 400c970:	01d00734 	movhi	r7,16412
 400c974:	4007abc0 	call	4007abc <__adddf3>
 400c978:	057f3034 	movhi	r21,64704
 400c97c:	1025883a 	mov	r18,r2
 400c980:	1d6b883a 	add	r21,r3,r21
 400c984:	9809883a 	mov	r4,r19
 400c988:	a00b883a 	mov	r5,r20
 400c98c:	000d883a 	mov	r6,zero
 400c990:	01d00534 	movhi	r7,16404
 400c994:	4007b100 	call	4007b10 <__subdf3>
 400c998:	1009883a 	mov	r4,r2
 400c99c:	180b883a 	mov	r5,r3
 400c9a0:	900d883a 	mov	r6,r18
 400c9a4:	a80f883a 	mov	r7,r21
 400c9a8:	1027883a 	mov	r19,r2
 400c9ac:	1829883a 	mov	r20,r3
 400c9b0:	4010aa40 	call	4010aa4 <__gtdf2>
 400c9b4:	00806616 	blt	zero,r2,400cb50 <_dtoa_r+0x12f8>
 400c9b8:	a9e0003c 	xorhi	r7,r21,32768
 400c9bc:	9809883a 	mov	r4,r19
 400c9c0:	a00b883a 	mov	r5,r20
 400c9c4:	900d883a 	mov	r6,r18
 400c9c8:	40080080 	call	4008008 <__ltdf2>
 400c9cc:	103d710e 	bge	r2,zero,400bf94 <_dtoa_r+0x73c>
 400c9d0:	0029883a 	mov	r20,zero
 400c9d4:	002b883a 	mov	r21,zero
 400c9d8:	003f5406 	br	400c72c <_dtoa_r+0xed4>
 400c9dc:	d9800a17 	ldw	r6,40(sp)
 400c9e0:	e00b883a 	mov	r5,fp
 400c9e4:	8009883a 	mov	r4,r16
 400c9e8:	400e8740 	call	400e874 <__pow5mult>
 400c9ec:	1039883a 	mov	fp,r2
 400c9f0:	003e2e06 	br	400c2ac <_dtoa_r+0xa54>
 400c9f4:	d8000c15 	stw	zero,48(sp)
 400c9f8:	003f2006 	br	400c67c <_dtoa_r+0xe24>
 400c9fc:	00800044 	movi	r2,1
 400ca00:	d8800c15 	stw	r2,48(sp)
 400ca04:	003c5d06 	br	400bb7c <_dtoa_r+0x324>
 400ca08:	d8c00a17 	ldw	r3,40(sp)
 400ca0c:	d9000b17 	ldw	r4,44(sp)
 400ca10:	dcc00a15 	stw	r19,40(sp)
 400ca14:	98c5c83a 	sub	r2,r19,r3
 400ca18:	2089883a 	add	r4,r4,r2
 400ca1c:	d9000b15 	stw	r4,44(sp)
 400ca20:	0027883a 	mov	r19,zero
 400ca24:	003df206 	br	400c1f0 <_dtoa_r+0x998>
 400ca28:	d9000317 	ldw	r4,12(sp)
 400ca2c:	8829883a 	mov	r20,r17
 400ca30:	04800084 	movi	r18,2
 400ca34:	d9001015 	stw	r4,64(sp)
 400ca38:	003c8106 	br	400bc40 <_dtoa_r+0x3e8>
 400ca3c:	04800044 	movi	r18,1
 400ca40:	dc800e15 	stw	r18,56(sp)
 400ca44:	dc800915 	stw	r18,36(sp)
 400ca48:	dc802115 	stw	r18,132(sp)
 400ca4c:	003f1206 	br	400c698 <_dtoa_r+0xe40>
 400ca50:	d8800617 	ldw	r2,24(sp)
 400ca54:	00abc83a 	sub	r21,zero,r2
 400ca58:	a800a426 	beq	r21,zero,400ccec <_dtoa_r+0x1494>
 400ca5c:	a88003cc 	andi	r2,r21,15
 400ca60:	100490fa 	slli	r2,r2,3
 400ca64:	00c100f4 	movhi	r3,1027
 400ca68:	18f69904 	addi	r3,r3,-9628
 400ca6c:	d9000317 	ldw	r4,12(sp)
 400ca70:	1885883a 	add	r2,r3,r2
 400ca74:	11800017 	ldw	r6,0(r2)
 400ca78:	11c00117 	ldw	r7,4(r2)
 400ca7c:	a82bd13a 	srai	r21,r21,4
 400ca80:	880b883a 	mov	r5,r17
 400ca84:	4007b700 	call	4007b70 <__muldf3>
 400ca88:	1027883a 	mov	r19,r2
 400ca8c:	1829883a 	mov	r20,r3
 400ca90:	a800e826 	beq	r21,zero,400ce34 <_dtoa_r+0x15dc>
 400ca94:	058100f4 	movhi	r22,1027
 400ca98:	b5b68f04 	addi	r22,r22,-9668
 400ca9c:	04800084 	movi	r18,2
 400caa0:	a980004c 	andi	r6,r21,1
 400caa4:	1009883a 	mov	r4,r2
 400caa8:	a82bd07a 	srai	r21,r21,1
 400caac:	180b883a 	mov	r5,r3
 400cab0:	30000426 	beq	r6,zero,400cac4 <_dtoa_r+0x126c>
 400cab4:	b1800017 	ldw	r6,0(r22)
 400cab8:	b1c00117 	ldw	r7,4(r22)
 400cabc:	94800044 	addi	r18,r18,1
 400cac0:	4007b700 	call	4007b70 <__muldf3>
 400cac4:	b5800204 	addi	r22,r22,8
 400cac8:	a83ff51e 	bne	r21,zero,400caa0 <_dtoa_r+0x1248>
 400cacc:	1027883a 	mov	r19,r2
 400cad0:	1829883a 	mov	r20,r3
 400cad4:	003c7306 	br	400bca4 <_dtoa_r+0x44c>
 400cad8:	21000044 	addi	r4,r4,1
 400cadc:	11000005 	stb	r4,0(r2)
 400cae0:	003e5c06 	br	400c454 <_dtoa_r+0xbfc>
 400cae4:	a9400117 	ldw	r5,4(r21)
 400cae8:	8009883a 	mov	r4,r16
 400caec:	400e2580 	call	400e258 <_Balloc>
 400caf0:	a9800417 	ldw	r6,16(r21)
 400caf4:	11000304 	addi	r4,r2,12
 400caf8:	a9400304 	addi	r5,r21,12
 400cafc:	31800084 	addi	r6,r6,2
 400cb00:	318d883a 	add	r6,r6,r6
 400cb04:	318d883a 	add	r6,r6,r6
 400cb08:	1023883a 	mov	r17,r2
 400cb0c:	40090840 	call	4009084 <memcpy>
 400cb10:	8009883a 	mov	r4,r16
 400cb14:	880b883a 	mov	r5,r17
 400cb18:	01800044 	movi	r6,1
 400cb1c:	400e9a00 	call	400e9a0 <__lshift>
 400cb20:	1027883a 	mov	r19,r2
 400cb24:	003e8f06 	br	400c564 <_dtoa_r+0xd0c>
 400cb28:	b807883a 	mov	r3,r23
 400cb2c:	00800e44 	movi	r2,57
 400cb30:	ddc00717 	ldw	r23,28(sp)
 400cb34:	18809026 	beq	r3,r2,400cd78 <_dtoa_r+0x1520>
 400cb38:	18c00044 	addi	r3,r3,1
 400cb3c:	003f2b06 	br	400c7ec <_dtoa_r+0xf94>
 400cb40:	b807883a 	mov	r3,r23
 400cb44:	982b883a 	mov	r21,r19
 400cb48:	ddc00717 	ldw	r23,28(sp)
 400cb4c:	003e2406 	br	400c3e0 <_dtoa_r+0xb88>
 400cb50:	0029883a 	mov	r20,zero
 400cb54:	002b883a 	mov	r21,zero
 400cb58:	003f7206 	br	400c924 <_dtoa_r+0x10cc>
 400cb5c:	593fffc4 	addi	r4,r11,-1
 400cb60:	200490fa 	slli	r2,r4,3
 400cb64:	00c100f4 	movhi	r3,1027
 400cb68:	18f69904 	addi	r3,r3,-9628
 400cb6c:	d9001015 	stw	r4,64(sp)
 400cb70:	1885883a 	add	r2,r3,r2
 400cb74:	11000017 	ldw	r4,0(r2)
 400cb78:	11400117 	ldw	r5,4(r2)
 400cb7c:	900d883a 	mov	r6,r18
 400cb80:	a80f883a 	mov	r7,r21
 400cb84:	dac01615 	stw	r11,88(sp)
 400cb88:	4007b700 	call	4007b70 <__muldf3>
 400cb8c:	a00b883a 	mov	r5,r20
 400cb90:	9809883a 	mov	r4,r19
 400cb94:	d8c01215 	stw	r3,72(sp)
 400cb98:	d8801115 	stw	r2,68(sp)
 400cb9c:	40081380 	call	4008138 <__fixdfsi>
 400cba0:	1009883a 	mov	r4,r2
 400cba4:	1025883a 	mov	r18,r2
 400cba8:	40080640 	call	4008064 <__floatsidf>
 400cbac:	9809883a 	mov	r4,r19
 400cbb0:	a00b883a 	mov	r5,r20
 400cbb4:	100d883a 	mov	r6,r2
 400cbb8:	180f883a 	mov	r7,r3
 400cbbc:	94800c04 	addi	r18,r18,48
 400cbc0:	4007b100 	call	4007b10 <__subdf3>
 400cbc4:	bc800005 	stb	r18,0(r23)
 400cbc8:	dac01617 	ldw	r11,88(sp)
 400cbcc:	102b883a 	mov	r21,r2
 400cbd0:	00800044 	movi	r2,1
 400cbd4:	bd800044 	addi	r22,r23,1
 400cbd8:	1815883a 	mov	r10,r3
 400cbdc:	58802226 	beq	r11,r2,400cc68 <_dtoa_r+0x1410>
 400cbe0:	bad7883a 	add	r11,r23,r11
 400cbe4:	dc001415 	stw	r16,80(sp)
 400cbe8:	a805883a 	mov	r2,r21
 400cbec:	b027883a 	mov	r19,r22
 400cbf0:	5821883a 	mov	r16,r11
 400cbf4:	882b883a 	mov	r21,r17
 400cbf8:	000d883a 	mov	r6,zero
 400cbfc:	01d00934 	movhi	r7,16420
 400cc00:	1009883a 	mov	r4,r2
 400cc04:	180b883a 	mov	r5,r3
 400cc08:	4007b700 	call	4007b70 <__muldf3>
 400cc0c:	180b883a 	mov	r5,r3
 400cc10:	1009883a 	mov	r4,r2
 400cc14:	1829883a 	mov	r20,r3
 400cc18:	1023883a 	mov	r17,r2
 400cc1c:	40081380 	call	4008138 <__fixdfsi>
 400cc20:	1009883a 	mov	r4,r2
 400cc24:	1025883a 	mov	r18,r2
 400cc28:	40080640 	call	4008064 <__floatsidf>
 400cc2c:	8809883a 	mov	r4,r17
 400cc30:	a00b883a 	mov	r5,r20
 400cc34:	100d883a 	mov	r6,r2
 400cc38:	180f883a 	mov	r7,r3
 400cc3c:	94800c04 	addi	r18,r18,48
 400cc40:	4007b100 	call	4007b10 <__subdf3>
 400cc44:	9cc00044 	addi	r19,r19,1
 400cc48:	9cbfffc5 	stb	r18,-1(r19)
 400cc4c:	9c3fea1e 	bne	r19,r16,400cbf8 <_dtoa_r+0x13a0>
 400cc50:	1815883a 	mov	r10,r3
 400cc54:	d8c01017 	ldw	r3,64(sp)
 400cc58:	dc001417 	ldw	r16,80(sp)
 400cc5c:	a823883a 	mov	r17,r21
 400cc60:	b0ed883a 	add	r22,r22,r3
 400cc64:	102b883a 	mov	r21,r2
 400cc68:	d9001117 	ldw	r4,68(sp)
 400cc6c:	d9401217 	ldw	r5,72(sp)
 400cc70:	000d883a 	mov	r6,zero
 400cc74:	01cff834 	movhi	r7,16352
 400cc78:	da801515 	stw	r10,84(sp)
 400cc7c:	4007abc0 	call	4007abc <__adddf3>
 400cc80:	da801517 	ldw	r10,84(sp)
 400cc84:	1009883a 	mov	r4,r2
 400cc88:	180b883a 	mov	r5,r3
 400cc8c:	500f883a 	mov	r7,r10
 400cc90:	a80d883a 	mov	r6,r21
 400cc94:	40080080 	call	4008008 <__ltdf2>
 400cc98:	da801517 	ldw	r10,84(sp)
 400cc9c:	10003b0e 	bge	r2,zero,400cd8c <_dtoa_r+0x1534>
 400cca0:	d9c01317 	ldw	r7,76(sp)
 400cca4:	b53fffc3 	ldbu	r20,-1(r22)
 400cca8:	d9c00615 	stw	r7,24(sp)
 400ccac:	003d3106 	br	400c174 <_dtoa_r+0x91c>
 400ccb0:	d8800817 	ldw	r2,32(sp)
 400ccb4:	11e5c83a 	sub	r18,r2,r7
 400ccb8:	0005883a 	mov	r2,zero
 400ccbc:	003d5006 	br	400c200 <_dtoa_r+0x9a8>
 400ccc0:	05800044 	movi	r22,1
 400ccc4:	003dc406 	br	400c3d8 <_dtoa_r+0xb80>
 400ccc8:	a5000044 	addi	r20,r20,1
 400cccc:	15000005 	stb	r20,0(r2)
 400ccd0:	003c8206 	br	400bedc <_dtoa_r+0x684>
 400ccd4:	d8800217 	ldw	r2,8(sp)
 400ccd8:	00c00d84 	movi	r3,54
 400ccdc:	dcc00a17 	ldw	r19,40(sp)
 400cce0:	1885c83a 	sub	r2,r3,r2
 400cce4:	dc800817 	ldw	r18,32(sp)
 400cce8:	003d4506 	br	400c200 <_dtoa_r+0x9a8>
 400ccec:	dcc00317 	ldw	r19,12(sp)
 400ccf0:	8829883a 	mov	r20,r17
 400ccf4:	04800084 	movi	r18,2
 400ccf8:	003bea06 	br	400bca4 <_dtoa_r+0x44c>
 400ccfc:	d9000917 	ldw	r4,36(sp)
 400cd00:	203f1126 	beq	r4,zero,400c948 <_dtoa_r+0x10f0>
 400cd04:	d9c00e17 	ldw	r7,56(sp)
 400cd08:	01fca20e 	bge	zero,r7,400bf94 <_dtoa_r+0x73c>
 400cd0c:	a00b883a 	mov	r5,r20
 400cd10:	9809883a 	mov	r4,r19
 400cd14:	000d883a 	mov	r6,zero
 400cd18:	01d00934 	movhi	r7,16420
 400cd1c:	4007b700 	call	4007b70 <__muldf3>
 400cd20:	91000044 	addi	r4,r18,1
 400cd24:	1027883a 	mov	r19,r2
 400cd28:	1829883a 	mov	r20,r3
 400cd2c:	40080640 	call	4008064 <__floatsidf>
 400cd30:	9809883a 	mov	r4,r19
 400cd34:	a00b883a 	mov	r5,r20
 400cd38:	100d883a 	mov	r6,r2
 400cd3c:	180f883a 	mov	r7,r3
 400cd40:	4007b700 	call	4007b70 <__muldf3>
 400cd44:	1009883a 	mov	r4,r2
 400cd48:	180b883a 	mov	r5,r3
 400cd4c:	000d883a 	mov	r6,zero
 400cd50:	01d00734 	movhi	r7,16412
 400cd54:	4007abc0 	call	4007abc <__adddf3>
 400cd58:	1025883a 	mov	r18,r2
 400cd5c:	d8800617 	ldw	r2,24(sp)
 400cd60:	057f3034 	movhi	r21,64704
 400cd64:	1d6b883a 	add	r21,r3,r21
 400cd68:	10bfffc4 	addi	r2,r2,-1
 400cd6c:	d8801315 	stw	r2,76(sp)
 400cd70:	dac00e17 	ldw	r11,56(sp)
 400cd74:	003be706 	br	400bd14 <_dtoa_r+0x4bc>
 400cd78:	01000e44 	movi	r4,57
 400cd7c:	91000005 	stb	r4,0(r18)
 400cd80:	95800044 	addi	r22,r18,1
 400cd84:	982b883a 	mov	r21,r19
 400cd88:	003da106 	br	400c410 <_dtoa_r+0xbb8>
 400cd8c:	d9801117 	ldw	r6,68(sp)
 400cd90:	d9c01217 	ldw	r7,72(sp)
 400cd94:	0009883a 	mov	r4,zero
 400cd98:	014ff834 	movhi	r5,16352
 400cd9c:	da801515 	stw	r10,84(sp)
 400cda0:	4007b100 	call	4007b10 <__subdf3>
 400cda4:	da801517 	ldw	r10,84(sp)
 400cda8:	1009883a 	mov	r4,r2
 400cdac:	180b883a 	mov	r5,r3
 400cdb0:	a80d883a 	mov	r6,r21
 400cdb4:	500f883a 	mov	r7,r10
 400cdb8:	4010aa40 	call	4010aa4 <__gtdf2>
 400cdbc:	00bc750e 	bge	zero,r2,400bf94 <_dtoa_r+0x73c>
 400cdc0:	01000c04 	movi	r4,48
 400cdc4:	00000106 	br	400cdcc <_dtoa_r+0x1574>
 400cdc8:	102d883a 	mov	r22,r2
 400cdcc:	b0bfffc4 	addi	r2,r22,-1
 400cdd0:	10c00007 	ldb	r3,0(r2)
 400cdd4:	193ffc26 	beq	r3,r4,400cdc8 <_dtoa_r+0x1570>
 400cdd8:	d8801317 	ldw	r2,76(sp)
 400cddc:	d8800615 	stw	r2,24(sp)
 400cde0:	003c3e06 	br	400bedc <_dtoa_r+0x684>
 400cde4:	d9001317 	ldw	r4,76(sp)
 400cde8:	df001117 	ldw	fp,68(sp)
 400cdec:	d9000615 	stw	r4,24(sp)
 400cdf0:	003ce006 	br	400c174 <_dtoa_r+0x91c>
 400cdf4:	df001117 	ldw	fp,68(sp)
 400cdf8:	dc401217 	ldw	r17,72(sp)
 400cdfc:	003c6506 	br	400bf94 <_dtoa_r+0x73c>
 400ce00:	103e7a1e 	bne	r2,zero,400c7ec <_dtoa_r+0xf94>
 400ce04:	1880004c 	andi	r2,r3,1
 400ce08:	103e7826 	beq	r2,zero,400c7ec <_dtoa_r+0xf94>
 400ce0c:	003e7406 	br	400c7e0 <_dtoa_r+0xf88>
 400ce10:	8009883a 	mov	r4,r16
 400ce14:	a80b883a 	mov	r5,r21
 400ce18:	01800284 	movi	r6,10
 400ce1c:	000f883a 	mov	r7,zero
 400ce20:	400e3280 	call	400e328 <__multadd>
 400ce24:	d9000e17 	ldw	r4,56(sp)
 400ce28:	102b883a 	mov	r21,r2
 400ce2c:	d9000915 	stw	r4,36(sp)
 400ce30:	003d5106 	br	400c378 <_dtoa_r+0xb20>
 400ce34:	04800084 	movi	r18,2
 400ce38:	003b9a06 	br	400bca4 <_dtoa_r+0x44c>
 400ce3c:	d8c01317 	ldw	r3,76(sp)
 400ce40:	d8c00615 	stw	r3,24(sp)
 400ce44:	003ccb06 	br	400c174 <_dtoa_r+0x91c>
 400ce48:	d8c01317 	ldw	r3,76(sp)
 400ce4c:	d8c00615 	stw	r3,24(sp)
 400ce50:	003c2206 	br	400bedc <_dtoa_r+0x684>
 400ce54:	20fd3826 	beq	r4,r3,400c338 <_dtoa_r+0xae0>
 400ce58:	00c00f04 	movi	r3,60
 400ce5c:	1885c83a 	sub	r2,r3,r2
 400ce60:	003da906 	br	400c508 <_dtoa_r+0xcb0>
 400ce64:	000b883a 	mov	r5,zero
 400ce68:	003b5406 	br	400bbbc <_dtoa_r+0x364>
 400ce6c:	04c00044 	movi	r19,1
 400ce70:	003b3b06 	br	400bb60 <_dtoa_r+0x308>

0400ce74 <_fflush_r>:
 400ce74:	defffb04 	addi	sp,sp,-20
 400ce78:	dcc00315 	stw	r19,12(sp)
 400ce7c:	dc400115 	stw	r17,4(sp)
 400ce80:	dfc00415 	stw	ra,16(sp)
 400ce84:	dc800215 	stw	r18,8(sp)
 400ce88:	dc000015 	stw	r16,0(sp)
 400ce8c:	2027883a 	mov	r19,r4
 400ce90:	2823883a 	mov	r17,r5
 400ce94:	20000226 	beq	r4,zero,400cea0 <_fflush_r+0x2c>
 400ce98:	20800e17 	ldw	r2,56(r4)
 400ce9c:	10005726 	beq	r2,zero,400cffc <_fflush_r+0x188>
 400cea0:	8880030b 	ldhu	r2,12(r17)
 400cea4:	10c0020c 	andi	r3,r2,8
 400cea8:	18ffffcc 	andi	r3,r3,65535
 400ceac:	18e0001c 	xori	r3,r3,32768
 400ceb0:	18e00004 	addi	r3,r3,-32768
 400ceb4:	1800311e 	bne	r3,zero,400cf7c <_fflush_r+0x108>
 400ceb8:	89000117 	ldw	r4,4(r17)
 400cebc:	10c20014 	ori	r3,r2,2048
 400cec0:	88c0030d 	sth	r3,12(r17)
 400cec4:	180b883a 	mov	r5,r3
 400cec8:	0100520e 	bge	zero,r4,400d014 <_fflush_r+0x1a0>
 400cecc:	88c00a17 	ldw	r3,40(r17)
 400ced0:	18002226 	beq	r3,zero,400cf5c <_fflush_r+0xe8>
 400ced4:	1084000c 	andi	r2,r2,4096
 400ced8:	10bfffcc 	andi	r2,r2,65535
 400cedc:	10a0001c 	xori	r2,r2,32768
 400cee0:	10a00004 	addi	r2,r2,-32768
 400cee4:	10004e26 	beq	r2,zero,400d020 <_fflush_r+0x1ac>
 400cee8:	8c001417 	ldw	r16,80(r17)
 400ceec:	2940010c 	andi	r5,r5,4
 400cef0:	297fffcc 	andi	r5,r5,65535
 400cef4:	2960001c 	xori	r5,r5,32768
 400cef8:	29600004 	addi	r5,r5,-32768
 400cefc:	28000626 	beq	r5,zero,400cf18 <_fflush_r+0xa4>
 400cf00:	89000117 	ldw	r4,4(r17)
 400cf04:	88800c17 	ldw	r2,48(r17)
 400cf08:	8121c83a 	sub	r16,r16,r4
 400cf0c:	10000226 	beq	r2,zero,400cf18 <_fflush_r+0xa4>
 400cf10:	88800f17 	ldw	r2,60(r17)
 400cf14:	80a1c83a 	sub	r16,r16,r2
 400cf18:	89400717 	ldw	r5,28(r17)
 400cf1c:	9809883a 	mov	r4,r19
 400cf20:	800d883a 	mov	r6,r16
 400cf24:	000f883a 	mov	r7,zero
 400cf28:	183ee83a 	callr	r3
 400cf2c:	8080281e 	bne	r16,r2,400cfd0 <_fflush_r+0x15c>
 400cf30:	8880030b 	ldhu	r2,12(r17)
 400cf34:	88c00417 	ldw	r3,16(r17)
 400cf38:	88000115 	stw	zero,4(r17)
 400cf3c:	113dffcc 	andi	r4,r2,63487
 400cf40:	1084000c 	andi	r2,r2,4096
 400cf44:	10bfffcc 	andi	r2,r2,65535
 400cf48:	10a0001c 	xori	r2,r2,32768
 400cf4c:	8900030d 	sth	r4,12(r17)
 400cf50:	88c00015 	stw	r3,0(r17)
 400cf54:	10a00004 	addi	r2,r2,-32768
 400cf58:	10002c1e 	bne	r2,zero,400d00c <_fflush_r+0x198>
 400cf5c:	0005883a 	mov	r2,zero
 400cf60:	dfc00417 	ldw	ra,16(sp)
 400cf64:	dcc00317 	ldw	r19,12(sp)
 400cf68:	dc800217 	ldw	r18,8(sp)
 400cf6c:	dc400117 	ldw	r17,4(sp)
 400cf70:	dc000017 	ldw	r16,0(sp)
 400cf74:	dec00504 	addi	sp,sp,20
 400cf78:	f800283a 	ret
 400cf7c:	8c800417 	ldw	r18,16(r17)
 400cf80:	903ff626 	beq	r18,zero,400cf5c <_fflush_r+0xe8>
 400cf84:	8c000017 	ldw	r16,0(r17)
 400cf88:	108000cc 	andi	r2,r2,3
 400cf8c:	8c800015 	stw	r18,0(r17)
 400cf90:	84a1c83a 	sub	r16,r16,r18
 400cf94:	10001b1e 	bne	r2,zero,400d004 <_fflush_r+0x190>
 400cf98:	88800517 	ldw	r2,20(r17)
 400cf9c:	88800215 	stw	r2,8(r17)
 400cfa0:	04000316 	blt	zero,r16,400cfb0 <_fflush_r+0x13c>
 400cfa4:	003fed06 	br	400cf5c <_fflush_r+0xe8>
 400cfa8:	90a5883a 	add	r18,r18,r2
 400cfac:	043feb0e 	bge	zero,r16,400cf5c <_fflush_r+0xe8>
 400cfb0:	88800917 	ldw	r2,36(r17)
 400cfb4:	89400717 	ldw	r5,28(r17)
 400cfb8:	800f883a 	mov	r7,r16
 400cfbc:	900d883a 	mov	r6,r18
 400cfc0:	9809883a 	mov	r4,r19
 400cfc4:	103ee83a 	callr	r2
 400cfc8:	80a1c83a 	sub	r16,r16,r2
 400cfcc:	00bff616 	blt	zero,r2,400cfa8 <_fflush_r+0x134>
 400cfd0:	88c0030b 	ldhu	r3,12(r17)
 400cfd4:	00bfffc4 	movi	r2,-1
 400cfd8:	18c01014 	ori	r3,r3,64
 400cfdc:	88c0030d 	sth	r3,12(r17)
 400cfe0:	dfc00417 	ldw	ra,16(sp)
 400cfe4:	dcc00317 	ldw	r19,12(sp)
 400cfe8:	dc800217 	ldw	r18,8(sp)
 400cfec:	dc400117 	ldw	r17,4(sp)
 400cff0:	dc000017 	ldw	r16,0(sp)
 400cff4:	dec00504 	addi	sp,sp,20
 400cff8:	f800283a 	ret
 400cffc:	400d11c0 	call	400d11c <__sinit>
 400d000:	003fa706 	br	400cea0 <_fflush_r+0x2c>
 400d004:	0005883a 	mov	r2,zero
 400d008:	003fe406 	br	400cf9c <_fflush_r+0x128>
 400d00c:	8c001415 	stw	r16,80(r17)
 400d010:	003fd206 	br	400cf5c <_fflush_r+0xe8>
 400d014:	88c00f17 	ldw	r3,60(r17)
 400d018:	00ffac16 	blt	zero,r3,400cecc <_fflush_r+0x58>
 400d01c:	003fcf06 	br	400cf5c <_fflush_r+0xe8>
 400d020:	89400717 	ldw	r5,28(r17)
 400d024:	9809883a 	mov	r4,r19
 400d028:	000d883a 	mov	r6,zero
 400d02c:	01c00044 	movi	r7,1
 400d030:	183ee83a 	callr	r3
 400d034:	1021883a 	mov	r16,r2
 400d038:	00bfffc4 	movi	r2,-1
 400d03c:	80800326 	beq	r16,r2,400d04c <_fflush_r+0x1d8>
 400d040:	8940030b 	ldhu	r5,12(r17)
 400d044:	88c00a17 	ldw	r3,40(r17)
 400d048:	003fa806 	br	400ceec <_fflush_r+0x78>
 400d04c:	98c00017 	ldw	r3,0(r19)
 400d050:	00800744 	movi	r2,29
 400d054:	18bfde1e 	bne	r3,r2,400cfd0 <_fflush_r+0x15c>
 400d058:	003fc006 	br	400cf5c <_fflush_r+0xe8>

0400d05c <fflush>:
 400d05c:	200b883a 	mov	r5,r4
 400d060:	20000426 	beq	r4,zero,400d074 <fflush+0x18>
 400d064:	008100f4 	movhi	r2,1027
 400d068:	10844f04 	addi	r2,r2,4412
 400d06c:	11000017 	ldw	r4,0(r2)
 400d070:	400ce741 	jmpi	400ce74 <_fflush_r>
 400d074:	008100f4 	movhi	r2,1027
 400d078:	10844e04 	addi	r2,r2,4408
 400d07c:	11000017 	ldw	r4,0(r2)
 400d080:	01410074 	movhi	r5,1025
 400d084:	29739d04 	addi	r5,r5,-12684
 400d088:	400dcfc1 	jmpi	400dcfc <_fwalk_reent>

0400d08c <__fp_lock>:
 400d08c:	0005883a 	mov	r2,zero
 400d090:	f800283a 	ret

0400d094 <__fp_unlock>:
 400d094:	0005883a 	mov	r2,zero
 400d098:	f800283a 	ret

0400d09c <_cleanup_r>:
 400d09c:	01410074 	movhi	r5,1025
 400d0a0:	297f3804 	addi	r5,r5,-800
 400d0a4:	400dc541 	jmpi	400dc54 <_fwalk>

0400d0a8 <__sfmoreglue>:
 400d0a8:	defffc04 	addi	sp,sp,-16
 400d0ac:	dc400115 	stw	r17,4(sp)
 400d0b0:	2c401724 	muli	r17,r5,92
 400d0b4:	dc800215 	stw	r18,8(sp)
 400d0b8:	2825883a 	mov	r18,r5
 400d0bc:	89400304 	addi	r5,r17,12
 400d0c0:	dc000015 	stw	r16,0(sp)
 400d0c4:	dfc00315 	stw	ra,12(sp)
 400d0c8:	40089000 	call	4008900 <_malloc_r>
 400d0cc:	1021883a 	mov	r16,r2
 400d0d0:	10000726 	beq	r2,zero,400d0f0 <__sfmoreglue+0x48>
 400d0d4:	11000304 	addi	r4,r2,12
 400d0d8:	10000015 	stw	zero,0(r2)
 400d0dc:	14800115 	stw	r18,4(r2)
 400d0e0:	11000215 	stw	r4,8(r2)
 400d0e4:	000b883a 	mov	r5,zero
 400d0e8:	880d883a 	mov	r6,r17
 400d0ec:	400917c0 	call	400917c <memset>
 400d0f0:	8005883a 	mov	r2,r16
 400d0f4:	dfc00317 	ldw	ra,12(sp)
 400d0f8:	dc800217 	ldw	r18,8(sp)
 400d0fc:	dc400117 	ldw	r17,4(sp)
 400d100:	dc000017 	ldw	r16,0(sp)
 400d104:	dec00404 	addi	sp,sp,16
 400d108:	f800283a 	ret

0400d10c <_cleanup>:
 400d10c:	008100f4 	movhi	r2,1027
 400d110:	10844e04 	addi	r2,r2,4408
 400d114:	11000017 	ldw	r4,0(r2)
 400d118:	400d09c1 	jmpi	400d09c <_cleanup_r>

0400d11c <__sinit>:
 400d11c:	20800e17 	ldw	r2,56(r4)
 400d120:	1000401e 	bne	r2,zero,400d224 <__sinit+0x108>
 400d124:	21400117 	ldw	r5,4(r4)
 400d128:	01810074 	movhi	r6,1025
 400d12c:	31b42704 	addi	r6,r6,-12132
 400d130:	20c00217 	ldw	r3,8(r4)
 400d134:	21800f15 	stw	r6,60(r4)
 400d138:	2080bb04 	addi	r2,r4,748
 400d13c:	02400044 	movi	r9,1
 400d140:	018000c4 	movi	r6,3
 400d144:	2180b915 	stw	r6,740(r4)
 400d148:	2080ba15 	stw	r2,744(r4)
 400d14c:	22400e15 	stw	r9,56(r4)
 400d150:	20800317 	ldw	r2,12(r4)
 400d154:	2000b815 	stw	zero,736(r4)
 400d158:	02010074 	movhi	r8,1025
 400d15c:	423e0d04 	addi	r8,r8,-1996
 400d160:	01c10074 	movhi	r7,1025
 400d164:	39fe2204 	addi	r7,r7,-1912
 400d168:	01810074 	movhi	r6,1025
 400d16c:	31be4404 	addi	r6,r6,-1776
 400d170:	01010074 	movhi	r4,1025
 400d174:	213e5b04 	addi	r4,r4,-1684
 400d178:	02800104 	movi	r10,4
 400d17c:	28000015 	stw	zero,0(r5)
 400d180:	28000115 	stw	zero,4(r5)
 400d184:	28000215 	stw	zero,8(r5)
 400d188:	2a80030d 	sth	r10,12(r5)
 400d18c:	2800038d 	sth	zero,14(r5)
 400d190:	28000415 	stw	zero,16(r5)
 400d194:	28000515 	stw	zero,20(r5)
 400d198:	28000615 	stw	zero,24(r5)
 400d19c:	29400715 	stw	r5,28(r5)
 400d1a0:	2a000815 	stw	r8,32(r5)
 400d1a4:	29c00915 	stw	r7,36(r5)
 400d1a8:	29800a15 	stw	r6,40(r5)
 400d1ac:	29000b15 	stw	r4,44(r5)
 400d1b0:	01400284 	movi	r5,10
 400d1b4:	18000015 	stw	zero,0(r3)
 400d1b8:	18000115 	stw	zero,4(r3)
 400d1bc:	18000215 	stw	zero,8(r3)
 400d1c0:	1940030d 	sth	r5,12(r3)
 400d1c4:	1a40038d 	sth	r9,14(r3)
 400d1c8:	18000415 	stw	zero,16(r3)
 400d1cc:	18000515 	stw	zero,20(r3)
 400d1d0:	18000615 	stw	zero,24(r3)
 400d1d4:	18c00715 	stw	r3,28(r3)
 400d1d8:	1a000815 	stw	r8,32(r3)
 400d1dc:	19c00915 	stw	r7,36(r3)
 400d1e0:	19800a15 	stw	r6,40(r3)
 400d1e4:	19000b15 	stw	r4,44(r3)
 400d1e8:	00c00484 	movi	r3,18
 400d1ec:	10c0030d 	sth	r3,12(r2)
 400d1f0:	00c00084 	movi	r3,2
 400d1f4:	10000015 	stw	zero,0(r2)
 400d1f8:	10000115 	stw	zero,4(r2)
 400d1fc:	10000215 	stw	zero,8(r2)
 400d200:	10c0038d 	sth	r3,14(r2)
 400d204:	10000415 	stw	zero,16(r2)
 400d208:	10000515 	stw	zero,20(r2)
 400d20c:	10000615 	stw	zero,24(r2)
 400d210:	10800715 	stw	r2,28(r2)
 400d214:	12000815 	stw	r8,32(r2)
 400d218:	11c00915 	stw	r7,36(r2)
 400d21c:	11800a15 	stw	r6,40(r2)
 400d220:	11000b15 	stw	r4,44(r2)
 400d224:	f800283a 	ret

0400d228 <__sfp>:
 400d228:	defffc04 	addi	sp,sp,-16
 400d22c:	008100f4 	movhi	r2,1027
 400d230:	10844e04 	addi	r2,r2,4408
 400d234:	dc400115 	stw	r17,4(sp)
 400d238:	14400017 	ldw	r17,0(r2)
 400d23c:	dc800215 	stw	r18,8(sp)
 400d240:	dfc00315 	stw	ra,12(sp)
 400d244:	88800e17 	ldw	r2,56(r17)
 400d248:	dc000015 	stw	r16,0(sp)
 400d24c:	2025883a 	mov	r18,r4
 400d250:	10002826 	beq	r2,zero,400d2f4 <__sfp+0xcc>
 400d254:	8c40b804 	addi	r17,r17,736
 400d258:	043fffc4 	movi	r16,-1
 400d25c:	89400117 	ldw	r5,4(r17)
 400d260:	88800217 	ldw	r2,8(r17)
 400d264:	297fffc4 	addi	r5,r5,-1
 400d268:	28000a16 	blt	r5,zero,400d294 <__sfp+0x6c>
 400d26c:	10c0030f 	ldh	r3,12(r2)
 400d270:	18000c26 	beq	r3,zero,400d2a4 <__sfp+0x7c>
 400d274:	10c01a04 	addi	r3,r2,104
 400d278:	00000206 	br	400d284 <__sfp+0x5c>
 400d27c:	19bfe90f 	ldh	r6,-92(r3)
 400d280:	30000826 	beq	r6,zero,400d2a4 <__sfp+0x7c>
 400d284:	297fffc4 	addi	r5,r5,-1
 400d288:	18bffd04 	addi	r2,r3,-12
 400d28c:	18c01704 	addi	r3,r3,92
 400d290:	2c3ffa1e 	bne	r5,r16,400d27c <__sfp+0x54>
 400d294:	88800017 	ldw	r2,0(r17)
 400d298:	10001926 	beq	r2,zero,400d300 <__sfp+0xd8>
 400d29c:	1023883a 	mov	r17,r2
 400d2a0:	003fee06 	br	400d25c <__sfp+0x34>
 400d2a4:	00ffffc4 	movi	r3,-1
 400d2a8:	10c0038d 	sth	r3,14(r2)
 400d2ac:	00c00044 	movi	r3,1
 400d2b0:	10c0030d 	sth	r3,12(r2)
 400d2b4:	10000015 	stw	zero,0(r2)
 400d2b8:	10000215 	stw	zero,8(r2)
 400d2bc:	10000115 	stw	zero,4(r2)
 400d2c0:	10000415 	stw	zero,16(r2)
 400d2c4:	10000515 	stw	zero,20(r2)
 400d2c8:	10000615 	stw	zero,24(r2)
 400d2cc:	10000c15 	stw	zero,48(r2)
 400d2d0:	10000d15 	stw	zero,52(r2)
 400d2d4:	10001115 	stw	zero,68(r2)
 400d2d8:	10001215 	stw	zero,72(r2)
 400d2dc:	dfc00317 	ldw	ra,12(sp)
 400d2e0:	dc800217 	ldw	r18,8(sp)
 400d2e4:	dc400117 	ldw	r17,4(sp)
 400d2e8:	dc000017 	ldw	r16,0(sp)
 400d2ec:	dec00404 	addi	sp,sp,16
 400d2f0:	f800283a 	ret
 400d2f4:	8809883a 	mov	r4,r17
 400d2f8:	400d11c0 	call	400d11c <__sinit>
 400d2fc:	003fd506 	br	400d254 <__sfp+0x2c>
 400d300:	9009883a 	mov	r4,r18
 400d304:	01400104 	movi	r5,4
 400d308:	400d0a80 	call	400d0a8 <__sfmoreglue>
 400d30c:	88800015 	stw	r2,0(r17)
 400d310:	103fe21e 	bne	r2,zero,400d29c <__sfp+0x74>
 400d314:	00800304 	movi	r2,12
 400d318:	90800015 	stw	r2,0(r18)
 400d31c:	0005883a 	mov	r2,zero
 400d320:	003fee06 	br	400d2dc <__sfp+0xb4>

0400d324 <__sfp_lock_acquire>:
 400d324:	f800283a 	ret

0400d328 <__sfp_lock_release>:
 400d328:	f800283a 	ret

0400d32c <__sinit_lock_acquire>:
 400d32c:	f800283a 	ret

0400d330 <__sinit_lock_release>:
 400d330:	f800283a 	ret

0400d334 <__fp_lock_all>:
 400d334:	008100f4 	movhi	r2,1027
 400d338:	10844f04 	addi	r2,r2,4412
 400d33c:	11000017 	ldw	r4,0(r2)
 400d340:	01410074 	movhi	r5,1025
 400d344:	29742304 	addi	r5,r5,-12148
 400d348:	400dc541 	jmpi	400dc54 <_fwalk>

0400d34c <__fp_unlock_all>:
 400d34c:	008100f4 	movhi	r2,1027
 400d350:	10844f04 	addi	r2,r2,4412
 400d354:	11000017 	ldw	r4,0(r2)
 400d358:	01410074 	movhi	r5,1025
 400d35c:	29742504 	addi	r5,r5,-12140
 400d360:	400dc541 	jmpi	400dc54 <_fwalk>

0400d364 <_malloc_trim_r>:
 400d364:	defffb04 	addi	sp,sp,-20
 400d368:	dcc00315 	stw	r19,12(sp)
 400d36c:	dc800215 	stw	r18,8(sp)
 400d370:	dc400115 	stw	r17,4(sp)
 400d374:	dc000015 	stw	r16,0(sp)
 400d378:	2827883a 	mov	r19,r5
 400d37c:	dfc00415 	stw	ra,16(sp)
 400d380:	044100f4 	movhi	r17,1027
 400d384:	8c7ec404 	addi	r17,r17,-1264
 400d388:	2021883a 	mov	r16,r4
 400d38c:	40116440 	call	4011644 <__malloc_lock>
 400d390:	88800217 	ldw	r2,8(r17)
 400d394:	14800117 	ldw	r18,4(r2)
 400d398:	00bfff04 	movi	r2,-4
 400d39c:	90a4703a 	and	r18,r18,r2
 400d3a0:	9083fbc4 	addi	r2,r18,4079
 400d3a4:	14e7c83a 	sub	r19,r2,r19
 400d3a8:	9826d33a 	srli	r19,r19,12
 400d3ac:	0083ffc4 	movi	r2,4095
 400d3b0:	9cffffc4 	addi	r19,r19,-1
 400d3b4:	9826933a 	slli	r19,r19,12
 400d3b8:	14c0060e 	bge	r2,r19,400d3d4 <_malloc_trim_r+0x70>
 400d3bc:	8009883a 	mov	r4,r16
 400d3c0:	000b883a 	mov	r5,zero
 400d3c4:	40093580 	call	4009358 <_sbrk_r>
 400d3c8:	88c00217 	ldw	r3,8(r17)
 400d3cc:	1c87883a 	add	r3,r3,r18
 400d3d0:	10c00a26 	beq	r2,r3,400d3fc <_malloc_trim_r+0x98>
 400d3d4:	8009883a 	mov	r4,r16
 400d3d8:	40116640 	call	4011664 <__malloc_unlock>
 400d3dc:	0005883a 	mov	r2,zero
 400d3e0:	dfc00417 	ldw	ra,16(sp)
 400d3e4:	dcc00317 	ldw	r19,12(sp)
 400d3e8:	dc800217 	ldw	r18,8(sp)
 400d3ec:	dc400117 	ldw	r17,4(sp)
 400d3f0:	dc000017 	ldw	r16,0(sp)
 400d3f4:	dec00504 	addi	sp,sp,20
 400d3f8:	f800283a 	ret
 400d3fc:	8009883a 	mov	r4,r16
 400d400:	04cbc83a 	sub	r5,zero,r19
 400d404:	40093580 	call	4009358 <_sbrk_r>
 400d408:	00ffffc4 	movi	r3,-1
 400d40c:	10c01326 	beq	r2,r3,400d45c <_malloc_trim_r+0xf8>
 400d410:	008100f4 	movhi	r2,1027
 400d414:	1091ef04 	addi	r2,r2,18364
 400d418:	11000017 	ldw	r4,0(r2)
 400d41c:	88c00217 	ldw	r3,8(r17)
 400d420:	94e5c83a 	sub	r18,r18,r19
 400d424:	94800054 	ori	r18,r18,1
 400d428:	24e7c83a 	sub	r19,r4,r19
 400d42c:	1c800115 	stw	r18,4(r3)
 400d430:	8009883a 	mov	r4,r16
 400d434:	14c00015 	stw	r19,0(r2)
 400d438:	40116640 	call	4011664 <__malloc_unlock>
 400d43c:	00800044 	movi	r2,1
 400d440:	dfc00417 	ldw	ra,16(sp)
 400d444:	dcc00317 	ldw	r19,12(sp)
 400d448:	dc800217 	ldw	r18,8(sp)
 400d44c:	dc400117 	ldw	r17,4(sp)
 400d450:	dc000017 	ldw	r16,0(sp)
 400d454:	dec00504 	addi	sp,sp,20
 400d458:	f800283a 	ret
 400d45c:	8009883a 	mov	r4,r16
 400d460:	000b883a 	mov	r5,zero
 400d464:	40093580 	call	4009358 <_sbrk_r>
 400d468:	88c00217 	ldw	r3,8(r17)
 400d46c:	014003c4 	movi	r5,15
 400d470:	10c9c83a 	sub	r4,r2,r3
 400d474:	293fd70e 	bge	r5,r4,400d3d4 <_malloc_trim_r+0x70>
 400d478:	014100f4 	movhi	r5,1027
 400d47c:	29445004 	addi	r5,r5,4416
 400d480:	29400017 	ldw	r5,0(r5)
 400d484:	21000054 	ori	r4,r4,1
 400d488:	19000115 	stw	r4,4(r3)
 400d48c:	1145c83a 	sub	r2,r2,r5
 400d490:	014100f4 	movhi	r5,1027
 400d494:	2951ef04 	addi	r5,r5,18364
 400d498:	28800015 	stw	r2,0(r5)
 400d49c:	003fcd06 	br	400d3d4 <_malloc_trim_r+0x70>

0400d4a0 <_free_r>:
 400d4a0:	defffd04 	addi	sp,sp,-12
 400d4a4:	dc400115 	stw	r17,4(sp)
 400d4a8:	dc000015 	stw	r16,0(sp)
 400d4ac:	dfc00215 	stw	ra,8(sp)
 400d4b0:	2821883a 	mov	r16,r5
 400d4b4:	2023883a 	mov	r17,r4
 400d4b8:	28004b26 	beq	r5,zero,400d5e8 <_free_r+0x148>
 400d4bc:	40116440 	call	4011644 <__malloc_lock>
 400d4c0:	823fff17 	ldw	r8,-4(r16)
 400d4c4:	00bfff84 	movi	r2,-2
 400d4c8:	81bffe04 	addi	r6,r16,-8
 400d4cc:	4084703a 	and	r2,r8,r2
 400d4d0:	3087883a 	add	r3,r6,r2
 400d4d4:	014100f4 	movhi	r5,1027
 400d4d8:	297ec404 	addi	r5,r5,-1264
 400d4dc:	1a400117 	ldw	r9,4(r3)
 400d4e0:	29000217 	ldw	r4,8(r5)
 400d4e4:	01ffff04 	movi	r7,-4
 400d4e8:	49ce703a 	and	r7,r9,r7
 400d4ec:	20c06526 	beq	r4,r3,400d684 <_free_r+0x1e4>
 400d4f0:	19c00115 	stw	r7,4(r3)
 400d4f4:	4200004c 	andi	r8,r8,1
 400d4f8:	40003026 	beq	r8,zero,400d5bc <_free_r+0x11c>
 400d4fc:	0009883a 	mov	r4,zero
 400d500:	19d1883a 	add	r8,r3,r7
 400d504:	42000117 	ldw	r8,4(r8)
 400d508:	4200004c 	andi	r8,r8,1
 400d50c:	4000061e 	bne	r8,zero,400d528 <_free_r+0x88>
 400d510:	11c5883a 	add	r2,r2,r7
 400d514:	19c00217 	ldw	r7,8(r3)
 400d518:	20004e26 	beq	r4,zero,400d654 <_free_r+0x1b4>
 400d51c:	18c00317 	ldw	r3,12(r3)
 400d520:	38c00315 	stw	r3,12(r7)
 400d524:	19c00215 	stw	r7,8(r3)
 400d528:	11c00054 	ori	r7,r2,1
 400d52c:	3087883a 	add	r3,r6,r2
 400d530:	31c00115 	stw	r7,4(r6)
 400d534:	18800015 	stw	r2,0(r3)
 400d538:	20001a1e 	bne	r4,zero,400d5a4 <_free_r+0x104>
 400d53c:	00c07fc4 	movi	r3,511
 400d540:	18802e2e 	bgeu	r3,r2,400d5fc <_free_r+0x15c>
 400d544:	1006d27a 	srli	r3,r2,9
 400d548:	01000104 	movi	r4,4
 400d54c:	20c06636 	bltu	r4,r3,400d6e8 <_free_r+0x248>
 400d550:	1008d1ba 	srli	r4,r2,6
 400d554:	21000e04 	addi	r4,r4,56
 400d558:	210f883a 	add	r7,r4,r4
 400d55c:	39cf883a 	add	r7,r7,r7
 400d560:	39cf883a 	add	r7,r7,r7
 400d564:	29cf883a 	add	r7,r5,r7
 400d568:	38c00217 	ldw	r3,8(r7)
 400d56c:	014100f4 	movhi	r5,1027
 400d570:	297ec404 	addi	r5,r5,-1264
 400d574:	19c06126 	beq	r3,r7,400d6fc <_free_r+0x25c>
 400d578:	013fff04 	movi	r4,-4
 400d57c:	19400117 	ldw	r5,4(r3)
 400d580:	290a703a 	and	r5,r5,r4
 400d584:	1140022e 	bgeu	r2,r5,400d590 <_free_r+0xf0>
 400d588:	18c00217 	ldw	r3,8(r3)
 400d58c:	38fffb1e 	bne	r7,r3,400d57c <_free_r+0xdc>
 400d590:	18800317 	ldw	r2,12(r3)
 400d594:	30800315 	stw	r2,12(r6)
 400d598:	30c00215 	stw	r3,8(r6)
 400d59c:	11800215 	stw	r6,8(r2)
 400d5a0:	19800315 	stw	r6,12(r3)
 400d5a4:	8809883a 	mov	r4,r17
 400d5a8:	dfc00217 	ldw	ra,8(sp)
 400d5ac:	dc400117 	ldw	r17,4(sp)
 400d5b0:	dc000017 	ldw	r16,0(sp)
 400d5b4:	dec00304 	addi	sp,sp,12
 400d5b8:	40116641 	jmpi	4011664 <__malloc_unlock>
 400d5bc:	813ffe17 	ldw	r4,-8(r16)
 400d5c0:	2a400204 	addi	r9,r5,8
 400d5c4:	310dc83a 	sub	r6,r6,r4
 400d5c8:	32000217 	ldw	r8,8(r6)
 400d5cc:	1105883a 	add	r2,r2,r4
 400d5d0:	42404326 	beq	r8,r9,400d6e0 <_free_r+0x240>
 400d5d4:	32400317 	ldw	r9,12(r6)
 400d5d8:	0009883a 	mov	r4,zero
 400d5dc:	42400315 	stw	r9,12(r8)
 400d5e0:	4a000215 	stw	r8,8(r9)
 400d5e4:	003fc606 	br	400d500 <_free_r+0x60>
 400d5e8:	dfc00217 	ldw	ra,8(sp)
 400d5ec:	dc400117 	ldw	r17,4(sp)
 400d5f0:	dc000017 	ldw	r16,0(sp)
 400d5f4:	dec00304 	addi	sp,sp,12
 400d5f8:	f800283a 	ret
 400d5fc:	1004d0fa 	srli	r2,r2,3
 400d600:	02000044 	movi	r8,1
 400d604:	29c00117 	ldw	r7,4(r5)
 400d608:	1087883a 	add	r3,r2,r2
 400d60c:	18c7883a 	add	r3,r3,r3
 400d610:	1005d0ba 	srai	r2,r2,2
 400d614:	18c7883a 	add	r3,r3,r3
 400d618:	28c7883a 	add	r3,r5,r3
 400d61c:	19000217 	ldw	r4,8(r3)
 400d620:	4084983a 	sll	r2,r8,r2
 400d624:	30c00315 	stw	r3,12(r6)
 400d628:	31000215 	stw	r4,8(r6)
 400d62c:	11c4b03a 	or	r2,r2,r7
 400d630:	21800315 	stw	r6,12(r4)
 400d634:	8809883a 	mov	r4,r17
 400d638:	28800115 	stw	r2,4(r5)
 400d63c:	19800215 	stw	r6,8(r3)
 400d640:	dfc00217 	ldw	ra,8(sp)
 400d644:	dc400117 	ldw	r17,4(sp)
 400d648:	dc000017 	ldw	r16,0(sp)
 400d64c:	dec00304 	addi	sp,sp,12
 400d650:	40116641 	jmpi	4011664 <__malloc_unlock>
 400d654:	020100f4 	movhi	r8,1027
 400d658:	423ec604 	addi	r8,r8,-1256
 400d65c:	3a3faf1e 	bne	r7,r8,400d51c <_free_r+0x7c>
 400d660:	29800515 	stw	r6,20(r5)
 400d664:	29800415 	stw	r6,16(r5)
 400d668:	11000054 	ori	r4,r2,1
 400d66c:	3087883a 	add	r3,r6,r2
 400d670:	31c00315 	stw	r7,12(r6)
 400d674:	31c00215 	stw	r7,8(r6)
 400d678:	31000115 	stw	r4,4(r6)
 400d67c:	18800015 	stw	r2,0(r3)
 400d680:	003fc806 	br	400d5a4 <_free_r+0x104>
 400d684:	4200004c 	andi	r8,r8,1
 400d688:	3885883a 	add	r2,r7,r2
 400d68c:	4000071e 	bne	r8,zero,400d6ac <_free_r+0x20c>
 400d690:	81fffe17 	ldw	r7,-8(r16)
 400d694:	31cdc83a 	sub	r6,r6,r7
 400d698:	30c00317 	ldw	r3,12(r6)
 400d69c:	31000217 	ldw	r4,8(r6)
 400d6a0:	11c5883a 	add	r2,r2,r7
 400d6a4:	20c00315 	stw	r3,12(r4)
 400d6a8:	19000215 	stw	r4,8(r3)
 400d6ac:	00c100f4 	movhi	r3,1027
 400d6b0:	18c45104 	addi	r3,r3,4420
 400d6b4:	18c00017 	ldw	r3,0(r3)
 400d6b8:	11000054 	ori	r4,r2,1
 400d6bc:	31000115 	stw	r4,4(r6)
 400d6c0:	29800215 	stw	r6,8(r5)
 400d6c4:	10ffb736 	bltu	r2,r3,400d5a4 <_free_r+0x104>
 400d6c8:	008100f4 	movhi	r2,1027
 400d6cc:	1091e404 	addi	r2,r2,18320
 400d6d0:	11400017 	ldw	r5,0(r2)
 400d6d4:	8809883a 	mov	r4,r17
 400d6d8:	400d3640 	call	400d364 <_malloc_trim_r>
 400d6dc:	003fb106 	br	400d5a4 <_free_r+0x104>
 400d6e0:	01000044 	movi	r4,1
 400d6e4:	003f8606 	br	400d500 <_free_r+0x60>
 400d6e8:	01000504 	movi	r4,20
 400d6ec:	20c00b36 	bltu	r4,r3,400d71c <_free_r+0x27c>
 400d6f0:	190016c4 	addi	r4,r3,91
 400d6f4:	210f883a 	add	r7,r4,r4
 400d6f8:	003f9806 	br	400d55c <_free_r+0xbc>
 400d6fc:	2009d0ba 	srai	r4,r4,2
 400d700:	00800044 	movi	r2,1
 400d704:	29c00117 	ldw	r7,4(r5)
 400d708:	1108983a 	sll	r4,r2,r4
 400d70c:	1805883a 	mov	r2,r3
 400d710:	21c8b03a 	or	r4,r4,r7
 400d714:	29000115 	stw	r4,4(r5)
 400d718:	003f9e06 	br	400d594 <_free_r+0xf4>
 400d71c:	01001504 	movi	r4,84
 400d720:	20c00436 	bltu	r4,r3,400d734 <_free_r+0x294>
 400d724:	1008d33a 	srli	r4,r2,12
 400d728:	21001b84 	addi	r4,r4,110
 400d72c:	210f883a 	add	r7,r4,r4
 400d730:	003f8a06 	br	400d55c <_free_r+0xbc>
 400d734:	01005504 	movi	r4,340
 400d738:	20c00436 	bltu	r4,r3,400d74c <_free_r+0x2ac>
 400d73c:	1008d3fa 	srli	r4,r2,15
 400d740:	21001dc4 	addi	r4,r4,119
 400d744:	210f883a 	add	r7,r4,r4
 400d748:	003f8406 	br	400d55c <_free_r+0xbc>
 400d74c:	01015504 	movi	r4,1364
 400d750:	20c00436 	bltu	r4,r3,400d764 <_free_r+0x2c4>
 400d754:	1008d4ba 	srli	r4,r2,18
 400d758:	21001f04 	addi	r4,r4,124
 400d75c:	210f883a 	add	r7,r4,r4
 400d760:	003f7e06 	br	400d55c <_free_r+0xbc>
 400d764:	01c03f04 	movi	r7,252
 400d768:	01001f84 	movi	r4,126
 400d76c:	003f7b06 	br	400d55c <_free_r+0xbc>

0400d770 <__sfvwrite_r>:
 400d770:	30800217 	ldw	r2,8(r6)
 400d774:	defff504 	addi	sp,sp,-44
 400d778:	dd400615 	stw	r21,24(sp)
 400d77c:	dd000515 	stw	r20,20(sp)
 400d780:	dc000115 	stw	r16,4(sp)
 400d784:	dfc00a15 	stw	ra,40(sp)
 400d788:	df000915 	stw	fp,36(sp)
 400d78c:	ddc00815 	stw	r23,32(sp)
 400d790:	dd800715 	stw	r22,28(sp)
 400d794:	dcc00415 	stw	r19,16(sp)
 400d798:	dc800315 	stw	r18,12(sp)
 400d79c:	dc400215 	stw	r17,8(sp)
 400d7a0:	3029883a 	mov	r20,r6
 400d7a4:	202b883a 	mov	r21,r4
 400d7a8:	2821883a 	mov	r16,r5
 400d7ac:	10002126 	beq	r2,zero,400d834 <__sfvwrite_r+0xc4>
 400d7b0:	2880030b 	ldhu	r2,12(r5)
 400d7b4:	10c0020c 	andi	r3,r2,8
 400d7b8:	18ffffcc 	andi	r3,r3,65535
 400d7bc:	18e0001c 	xori	r3,r3,32768
 400d7c0:	18e00004 	addi	r3,r3,-32768
 400d7c4:	18002826 	beq	r3,zero,400d868 <__sfvwrite_r+0xf8>
 400d7c8:	28c00417 	ldw	r3,16(r5)
 400d7cc:	18002626 	beq	r3,zero,400d868 <__sfvwrite_r+0xf8>
 400d7d0:	10c0008c 	andi	r3,r2,2
 400d7d4:	18ffffcc 	andi	r3,r3,65535
 400d7d8:	18e0001c 	xori	r3,r3,32768
 400d7dc:	18e00004 	addi	r3,r3,-32768
 400d7e0:	a4400017 	ldw	r17,0(r20)
 400d7e4:	18002b26 	beq	r3,zero,400d894 <__sfvwrite_r+0x124>
 400d7e8:	0027883a 	mov	r19,zero
 400d7ec:	0025883a 	mov	r18,zero
 400d7f0:	05810004 	movi	r22,1024
 400d7f4:	980d883a 	mov	r6,r19
 400d7f8:	a809883a 	mov	r4,r21
 400d7fc:	90004f26 	beq	r18,zero,400d93c <__sfvwrite_r+0x1cc>
 400d800:	900f883a 	mov	r7,r18
 400d804:	81400717 	ldw	r5,28(r16)
 400d808:	b480012e 	bgeu	r22,r18,400d810 <__sfvwrite_r+0xa0>
 400d80c:	01c10004 	movi	r7,1024
 400d810:	80800917 	ldw	r2,36(r16)
 400d814:	103ee83a 	callr	r2
 400d818:	0080540e 	bge	zero,r2,400d96c <__sfvwrite_r+0x1fc>
 400d81c:	a0c00217 	ldw	r3,8(r20)
 400d820:	98a7883a 	add	r19,r19,r2
 400d824:	90a5c83a 	sub	r18,r18,r2
 400d828:	1885c83a 	sub	r2,r3,r2
 400d82c:	a0800215 	stw	r2,8(r20)
 400d830:	103ff01e 	bne	r2,zero,400d7f4 <__sfvwrite_r+0x84>
 400d834:	0005883a 	mov	r2,zero
 400d838:	dfc00a17 	ldw	ra,40(sp)
 400d83c:	df000917 	ldw	fp,36(sp)
 400d840:	ddc00817 	ldw	r23,32(sp)
 400d844:	dd800717 	ldw	r22,28(sp)
 400d848:	dd400617 	ldw	r21,24(sp)
 400d84c:	dd000517 	ldw	r20,20(sp)
 400d850:	dcc00417 	ldw	r19,16(sp)
 400d854:	dc800317 	ldw	r18,12(sp)
 400d858:	dc400217 	ldw	r17,8(sp)
 400d85c:	dc000117 	ldw	r16,4(sp)
 400d860:	dec00b04 	addi	sp,sp,44
 400d864:	f800283a 	ret
 400d868:	a809883a 	mov	r4,r21
 400d86c:	800b883a 	mov	r5,r16
 400d870:	400b4dc0 	call	400b4dc <__swsetup_r>
 400d874:	1000f01e 	bne	r2,zero,400dc38 <__sfvwrite_r+0x4c8>
 400d878:	8080030b 	ldhu	r2,12(r16)
 400d87c:	a4400017 	ldw	r17,0(r20)
 400d880:	10c0008c 	andi	r3,r2,2
 400d884:	18ffffcc 	andi	r3,r3,65535
 400d888:	18e0001c 	xori	r3,r3,32768
 400d88c:	18e00004 	addi	r3,r3,-32768
 400d890:	183fd51e 	bne	r3,zero,400d7e8 <__sfvwrite_r+0x78>
 400d894:	10c0004c 	andi	r3,r2,1
 400d898:	002d883a 	mov	r22,zero
 400d89c:	1800381e 	bne	r3,zero,400d980 <__sfvwrite_r+0x210>
 400d8a0:	0025883a 	mov	r18,zero
 400d8a4:	90002126 	beq	r18,zero,400d92c <__sfvwrite_r+0x1bc>
 400d8a8:	10c0800c 	andi	r3,r2,512
 400d8ac:	18ffffcc 	andi	r3,r3,65535
 400d8b0:	18e0001c 	xori	r3,r3,32768
 400d8b4:	18e00004 	addi	r3,r3,-32768
 400d8b8:	84c00217 	ldw	r19,8(r16)
 400d8bc:	18006b26 	beq	r3,zero,400da6c <__sfvwrite_r+0x2fc>
 400d8c0:	980f883a 	mov	r7,r19
 400d8c4:	94c08636 	bltu	r18,r19,400dae0 <__sfvwrite_r+0x370>
 400d8c8:	10c1200c 	andi	r3,r2,1152
 400d8cc:	18009f1e 	bne	r3,zero,400db4c <__sfvwrite_r+0x3dc>
 400d8d0:	81000017 	ldw	r4,0(r16)
 400d8d4:	982f883a 	mov	r23,r19
 400d8d8:	9039883a 	mov	fp,r18
 400d8dc:	9027883a 	mov	r19,r18
 400d8e0:	380d883a 	mov	r6,r7
 400d8e4:	b00b883a 	mov	r5,r22
 400d8e8:	d9c00015 	stw	r7,0(sp)
 400d8ec:	400e1300 	call	400e130 <memmove>
 400d8f0:	d9c00017 	ldw	r7,0(sp)
 400d8f4:	81000217 	ldw	r4,8(r16)
 400d8f8:	80800017 	ldw	r2,0(r16)
 400d8fc:	25efc83a 	sub	r23,r4,r23
 400d900:	11cf883a 	add	r7,r2,r7
 400d904:	85c00215 	stw	r23,8(r16)
 400d908:	81c00015 	stw	r7,0(r16)
 400d90c:	a0800217 	ldw	r2,8(r20)
 400d910:	b72d883a 	add	r22,r22,fp
 400d914:	9725c83a 	sub	r18,r18,fp
 400d918:	14e7c83a 	sub	r19,r2,r19
 400d91c:	a4c00215 	stw	r19,8(r20)
 400d920:	983fc426 	beq	r19,zero,400d834 <__sfvwrite_r+0xc4>
 400d924:	8080030b 	ldhu	r2,12(r16)
 400d928:	903fdf1e 	bne	r18,zero,400d8a8 <__sfvwrite_r+0x138>
 400d92c:	8d800017 	ldw	r22,0(r17)
 400d930:	8c800117 	ldw	r18,4(r17)
 400d934:	8c400204 	addi	r17,r17,8
 400d938:	003fda06 	br	400d8a4 <__sfvwrite_r+0x134>
 400d93c:	8cc00017 	ldw	r19,0(r17)
 400d940:	8c800117 	ldw	r18,4(r17)
 400d944:	8c400204 	addi	r17,r17,8
 400d948:	003faa06 	br	400d7f4 <__sfvwrite_r+0x84>
 400d94c:	400f2000 	call	400f200 <_realloc_r>
 400d950:	102f883a 	mov	r23,r2
 400d954:	10009f1e 	bne	r2,zero,400dbd4 <__sfvwrite_r+0x464>
 400d958:	81400417 	ldw	r5,16(r16)
 400d95c:	a809883a 	mov	r4,r21
 400d960:	400d4a00 	call	400d4a0 <_free_r>
 400d964:	00800304 	movi	r2,12
 400d968:	a8800015 	stw	r2,0(r21)
 400d96c:	80c0030b 	ldhu	r3,12(r16)
 400d970:	00bfffc4 	movi	r2,-1
 400d974:	18c01014 	ori	r3,r3,64
 400d978:	80c0030d 	sth	r3,12(r16)
 400d97c:	003fae06 	br	400d838 <__sfvwrite_r+0xc8>
 400d980:	0007883a 	mov	r3,zero
 400d984:	0039883a 	mov	fp,zero
 400d988:	0025883a 	mov	r18,zero
 400d98c:	90001e26 	beq	r18,zero,400da08 <__sfvwrite_r+0x298>
 400d990:	18006526 	beq	r3,zero,400db28 <__sfvwrite_r+0x3b8>
 400d994:	b02f883a 	mov	r23,r22
 400d998:	9580012e 	bgeu	r18,r22,400d9a0 <__sfvwrite_r+0x230>
 400d99c:	902f883a 	mov	r23,r18
 400d9a0:	81000017 	ldw	r4,0(r16)
 400d9a4:	80800417 	ldw	r2,16(r16)
 400d9a8:	84c00217 	ldw	r19,8(r16)
 400d9ac:	81c00517 	ldw	r7,20(r16)
 400d9b0:	1100022e 	bgeu	r2,r4,400d9bc <__sfvwrite_r+0x24c>
 400d9b4:	99e7883a 	add	r19,r19,r7
 400d9b8:	9dc01816 	blt	r19,r23,400da1c <__sfvwrite_r+0x2ac>
 400d9bc:	b9c03b16 	blt	r23,r7,400daac <__sfvwrite_r+0x33c>
 400d9c0:	80800917 	ldw	r2,36(r16)
 400d9c4:	81400717 	ldw	r5,28(r16)
 400d9c8:	a809883a 	mov	r4,r21
 400d9cc:	d8c00015 	stw	r3,0(sp)
 400d9d0:	e00d883a 	mov	r6,fp
 400d9d4:	103ee83a 	callr	r2
 400d9d8:	1027883a 	mov	r19,r2
 400d9dc:	d8c00017 	ldw	r3,0(sp)
 400d9e0:	00bfe20e 	bge	zero,r2,400d96c <__sfvwrite_r+0x1fc>
 400d9e4:	b4edc83a 	sub	r22,r22,r19
 400d9e8:	b0001a26 	beq	r22,zero,400da54 <__sfvwrite_r+0x2e4>
 400d9ec:	a0800217 	ldw	r2,8(r20)
 400d9f0:	e4f9883a 	add	fp,fp,r19
 400d9f4:	94e5c83a 	sub	r18,r18,r19
 400d9f8:	14e7c83a 	sub	r19,r2,r19
 400d9fc:	a4c00215 	stw	r19,8(r20)
 400da00:	983f8c26 	beq	r19,zero,400d834 <__sfvwrite_r+0xc4>
 400da04:	903fe21e 	bne	r18,zero,400d990 <__sfvwrite_r+0x220>
 400da08:	8f000017 	ldw	fp,0(r17)
 400da0c:	8c800117 	ldw	r18,4(r17)
 400da10:	0007883a 	mov	r3,zero
 400da14:	8c400204 	addi	r17,r17,8
 400da18:	003fdc06 	br	400d98c <__sfvwrite_r+0x21c>
 400da1c:	e00b883a 	mov	r5,fp
 400da20:	980d883a 	mov	r6,r19
 400da24:	d8c00015 	stw	r3,0(sp)
 400da28:	400e1300 	call	400e130 <memmove>
 400da2c:	80800017 	ldw	r2,0(r16)
 400da30:	a809883a 	mov	r4,r21
 400da34:	800b883a 	mov	r5,r16
 400da38:	14c5883a 	add	r2,r2,r19
 400da3c:	80800015 	stw	r2,0(r16)
 400da40:	400ce740 	call	400ce74 <_fflush_r>
 400da44:	d8c00017 	ldw	r3,0(sp)
 400da48:	103fc81e 	bne	r2,zero,400d96c <__sfvwrite_r+0x1fc>
 400da4c:	b4edc83a 	sub	r22,r22,r19
 400da50:	b03fe61e 	bne	r22,zero,400d9ec <__sfvwrite_r+0x27c>
 400da54:	a809883a 	mov	r4,r21
 400da58:	800b883a 	mov	r5,r16
 400da5c:	400ce740 	call	400ce74 <_fflush_r>
 400da60:	103fc21e 	bne	r2,zero,400d96c <__sfvwrite_r+0x1fc>
 400da64:	0007883a 	mov	r3,zero
 400da68:	003fe006 	br	400d9ec <__sfvwrite_r+0x27c>
 400da6c:	81000017 	ldw	r4,0(r16)
 400da70:	80800417 	ldw	r2,16(r16)
 400da74:	1100022e 	bgeu	r2,r4,400da80 <__sfvwrite_r+0x310>
 400da78:	9839883a 	mov	fp,r19
 400da7c:	9c806036 	bltu	r19,r18,400dc00 <__sfvwrite_r+0x490>
 400da80:	81c00517 	ldw	r7,20(r16)
 400da84:	91c01c36 	bltu	r18,r7,400daf8 <__sfvwrite_r+0x388>
 400da88:	80800917 	ldw	r2,36(r16)
 400da8c:	81400717 	ldw	r5,28(r16)
 400da90:	a809883a 	mov	r4,r21
 400da94:	b00d883a 	mov	r6,r22
 400da98:	103ee83a 	callr	r2
 400da9c:	1027883a 	mov	r19,r2
 400daa0:	00bfb20e 	bge	zero,r2,400d96c <__sfvwrite_r+0x1fc>
 400daa4:	1039883a 	mov	fp,r2
 400daa8:	003f9806 	br	400d90c <__sfvwrite_r+0x19c>
 400daac:	b80d883a 	mov	r6,r23
 400dab0:	e00b883a 	mov	r5,fp
 400dab4:	d8c00015 	stw	r3,0(sp)
 400dab8:	400e1300 	call	400e130 <memmove>
 400dabc:	80800217 	ldw	r2,8(r16)
 400dac0:	81000017 	ldw	r4,0(r16)
 400dac4:	b827883a 	mov	r19,r23
 400dac8:	15c5c83a 	sub	r2,r2,r23
 400dacc:	25ef883a 	add	r23,r4,r23
 400dad0:	80800215 	stw	r2,8(r16)
 400dad4:	85c00015 	stw	r23,0(r16)
 400dad8:	d8c00017 	ldw	r3,0(sp)
 400dadc:	003fc106 	br	400d9e4 <__sfvwrite_r+0x274>
 400dae0:	81000017 	ldw	r4,0(r16)
 400dae4:	902f883a 	mov	r23,r18
 400dae8:	9039883a 	mov	fp,r18
 400daec:	9027883a 	mov	r19,r18
 400daf0:	900f883a 	mov	r7,r18
 400daf4:	003f7a06 	br	400d8e0 <__sfvwrite_r+0x170>
 400daf8:	b00b883a 	mov	r5,r22
 400dafc:	900d883a 	mov	r6,r18
 400db00:	400e1300 	call	400e130 <memmove>
 400db04:	80c00217 	ldw	r3,8(r16)
 400db08:	80800017 	ldw	r2,0(r16)
 400db0c:	9027883a 	mov	r19,r18
 400db10:	1c87c83a 	sub	r3,r3,r18
 400db14:	1485883a 	add	r2,r2,r18
 400db18:	80c00215 	stw	r3,8(r16)
 400db1c:	80800015 	stw	r2,0(r16)
 400db20:	9039883a 	mov	fp,r18
 400db24:	003f7906 	br	400d90c <__sfvwrite_r+0x19c>
 400db28:	e009883a 	mov	r4,fp
 400db2c:	01400284 	movi	r5,10
 400db30:	900d883a 	mov	r6,r18
 400db34:	400e0380 	call	400e038 <memchr>
 400db38:	10003c26 	beq	r2,zero,400dc2c <__sfvwrite_r+0x4bc>
 400db3c:	15800044 	addi	r22,r2,1
 400db40:	b72dc83a 	sub	r22,r22,fp
 400db44:	00c00044 	movi	r3,1
 400db48:	003f9206 	br	400d994 <__sfvwrite_r+0x224>
 400db4c:	81000517 	ldw	r4,20(r16)
 400db50:	81400417 	ldw	r5,16(r16)
 400db54:	80c00017 	ldw	r3,0(r16)
 400db58:	210d883a 	add	r6,r4,r4
 400db5c:	3109883a 	add	r4,r6,r4
 400db60:	2026d7fa 	srli	r19,r4,31
 400db64:	1979c83a 	sub	fp,r3,r5
 400db68:	e1800044 	addi	r6,fp,1
 400db6c:	9909883a 	add	r4,r19,r4
 400db70:	2027d07a 	srai	r19,r4,1
 400db74:	3489883a 	add	r4,r6,r18
 400db78:	980d883a 	mov	r6,r19
 400db7c:	9900022e 	bgeu	r19,r4,400db88 <__sfvwrite_r+0x418>
 400db80:	2027883a 	mov	r19,r4
 400db84:	200d883a 	mov	r6,r4
 400db88:	1081000c 	andi	r2,r2,1024
 400db8c:	10bfffcc 	andi	r2,r2,65535
 400db90:	10a0001c 	xori	r2,r2,32768
 400db94:	10a00004 	addi	r2,r2,-32768
 400db98:	a809883a 	mov	r4,r21
 400db9c:	103f6b26 	beq	r2,zero,400d94c <__sfvwrite_r+0x1dc>
 400dba0:	300b883a 	mov	r5,r6
 400dba4:	40089000 	call	4008900 <_malloc_r>
 400dba8:	102f883a 	mov	r23,r2
 400dbac:	103f6d26 	beq	r2,zero,400d964 <__sfvwrite_r+0x1f4>
 400dbb0:	81400417 	ldw	r5,16(r16)
 400dbb4:	1009883a 	mov	r4,r2
 400dbb8:	e00d883a 	mov	r6,fp
 400dbbc:	40090840 	call	4009084 <memcpy>
 400dbc0:	8080030b 	ldhu	r2,12(r16)
 400dbc4:	00fedfc4 	movi	r3,-1153
 400dbc8:	10c4703a 	and	r2,r2,r3
 400dbcc:	10802014 	ori	r2,r2,128
 400dbd0:	8080030d 	sth	r2,12(r16)
 400dbd4:	bf09883a 	add	r4,r23,fp
 400dbd8:	9f07c83a 	sub	r3,r19,fp
 400dbdc:	85c00415 	stw	r23,16(r16)
 400dbe0:	84c00515 	stw	r19,20(r16)
 400dbe4:	81000015 	stw	r4,0(r16)
 400dbe8:	902f883a 	mov	r23,r18
 400dbec:	80c00215 	stw	r3,8(r16)
 400dbf0:	9039883a 	mov	fp,r18
 400dbf4:	9027883a 	mov	r19,r18
 400dbf8:	900f883a 	mov	r7,r18
 400dbfc:	003f3806 	br	400d8e0 <__sfvwrite_r+0x170>
 400dc00:	b00b883a 	mov	r5,r22
 400dc04:	980d883a 	mov	r6,r19
 400dc08:	400e1300 	call	400e130 <memmove>
 400dc0c:	80800017 	ldw	r2,0(r16)
 400dc10:	a809883a 	mov	r4,r21
 400dc14:	800b883a 	mov	r5,r16
 400dc18:	14c5883a 	add	r2,r2,r19
 400dc1c:	80800015 	stw	r2,0(r16)
 400dc20:	400ce740 	call	400ce74 <_fflush_r>
 400dc24:	103f3926 	beq	r2,zero,400d90c <__sfvwrite_r+0x19c>
 400dc28:	003f5006 	br	400d96c <__sfvwrite_r+0x1fc>
 400dc2c:	95800044 	addi	r22,r18,1
 400dc30:	00c00044 	movi	r3,1
 400dc34:	003f5706 	br	400d994 <__sfvwrite_r+0x224>
 400dc38:	80c0030b 	ldhu	r3,12(r16)
 400dc3c:	00bfffc4 	movi	r2,-1
 400dc40:	18c01014 	ori	r3,r3,64
 400dc44:	80c0030d 	sth	r3,12(r16)
 400dc48:	00c00244 	movi	r3,9
 400dc4c:	a8c00015 	stw	r3,0(r21)
 400dc50:	003ef906 	br	400d838 <__sfvwrite_r+0xc8>

0400dc54 <_fwalk>:
 400dc54:	defff904 	addi	sp,sp,-28
 400dc58:	dcc00315 	stw	r19,12(sp)
 400dc5c:	24c0b804 	addi	r19,r4,736
 400dc60:	dd400515 	stw	r21,20(sp)
 400dc64:	dd000415 	stw	r20,16(sp)
 400dc68:	dfc00615 	stw	ra,24(sp)
 400dc6c:	dc800215 	stw	r18,8(sp)
 400dc70:	dc400115 	stw	r17,4(sp)
 400dc74:	dc000015 	stw	r16,0(sp)
 400dc78:	282b883a 	mov	r21,r5
 400dc7c:	0029883a 	mov	r20,zero
 400dc80:	400d3240 	call	400d324 <__sfp_lock_acquire>
 400dc84:	98001226 	beq	r19,zero,400dcd0 <_fwalk+0x7c>
 400dc88:	04bfffc4 	movi	r18,-1
 400dc8c:	9c400117 	ldw	r17,4(r19)
 400dc90:	9c000217 	ldw	r16,8(r19)
 400dc94:	8c7fffc4 	addi	r17,r17,-1
 400dc98:	88000b16 	blt	r17,zero,400dcc8 <_fwalk+0x74>
 400dc9c:	84000304 	addi	r16,r16,12
 400dca0:	80c0000f 	ldh	r3,0(r16)
 400dca4:	8c7fffc4 	addi	r17,r17,-1
 400dca8:	813ffd04 	addi	r4,r16,-12
 400dcac:	18000426 	beq	r3,zero,400dcc0 <_fwalk+0x6c>
 400dcb0:	80c0008f 	ldh	r3,2(r16)
 400dcb4:	1c800226 	beq	r3,r18,400dcc0 <_fwalk+0x6c>
 400dcb8:	a83ee83a 	callr	r21
 400dcbc:	a0a8b03a 	or	r20,r20,r2
 400dcc0:	84001704 	addi	r16,r16,92
 400dcc4:	8cbff61e 	bne	r17,r18,400dca0 <_fwalk+0x4c>
 400dcc8:	9cc00017 	ldw	r19,0(r19)
 400dccc:	983fef1e 	bne	r19,zero,400dc8c <_fwalk+0x38>
 400dcd0:	400d3280 	call	400d328 <__sfp_lock_release>
 400dcd4:	a005883a 	mov	r2,r20
 400dcd8:	dfc00617 	ldw	ra,24(sp)
 400dcdc:	dd400517 	ldw	r21,20(sp)
 400dce0:	dd000417 	ldw	r20,16(sp)
 400dce4:	dcc00317 	ldw	r19,12(sp)
 400dce8:	dc800217 	ldw	r18,8(sp)
 400dcec:	dc400117 	ldw	r17,4(sp)
 400dcf0:	dc000017 	ldw	r16,0(sp)
 400dcf4:	dec00704 	addi	sp,sp,28
 400dcf8:	f800283a 	ret

0400dcfc <_fwalk_reent>:
 400dcfc:	defff804 	addi	sp,sp,-32
 400dd00:	dcc00315 	stw	r19,12(sp)
 400dd04:	24c0b804 	addi	r19,r4,736
 400dd08:	dd800615 	stw	r22,24(sp)
 400dd0c:	dd400515 	stw	r21,20(sp)
 400dd10:	dd000415 	stw	r20,16(sp)
 400dd14:	dfc00715 	stw	ra,28(sp)
 400dd18:	dc800215 	stw	r18,8(sp)
 400dd1c:	dc400115 	stw	r17,4(sp)
 400dd20:	dc000015 	stw	r16,0(sp)
 400dd24:	2029883a 	mov	r20,r4
 400dd28:	282b883a 	mov	r21,r5
 400dd2c:	002d883a 	mov	r22,zero
 400dd30:	400d3240 	call	400d324 <__sfp_lock_acquire>
 400dd34:	98001326 	beq	r19,zero,400dd84 <_fwalk_reent+0x88>
 400dd38:	04bfffc4 	movi	r18,-1
 400dd3c:	9c400117 	ldw	r17,4(r19)
 400dd40:	9c000217 	ldw	r16,8(r19)
 400dd44:	8c7fffc4 	addi	r17,r17,-1
 400dd48:	88000c16 	blt	r17,zero,400dd7c <_fwalk_reent+0x80>
 400dd4c:	84000304 	addi	r16,r16,12
 400dd50:	80c0000f 	ldh	r3,0(r16)
 400dd54:	8c7fffc4 	addi	r17,r17,-1
 400dd58:	817ffd04 	addi	r5,r16,-12
 400dd5c:	18000526 	beq	r3,zero,400dd74 <_fwalk_reent+0x78>
 400dd60:	80c0008f 	ldh	r3,2(r16)
 400dd64:	a009883a 	mov	r4,r20
 400dd68:	1c800226 	beq	r3,r18,400dd74 <_fwalk_reent+0x78>
 400dd6c:	a83ee83a 	callr	r21
 400dd70:	b0acb03a 	or	r22,r22,r2
 400dd74:	84001704 	addi	r16,r16,92
 400dd78:	8cbff51e 	bne	r17,r18,400dd50 <_fwalk_reent+0x54>
 400dd7c:	9cc00017 	ldw	r19,0(r19)
 400dd80:	983fee1e 	bne	r19,zero,400dd3c <_fwalk_reent+0x40>
 400dd84:	400d3280 	call	400d328 <__sfp_lock_release>
 400dd88:	b005883a 	mov	r2,r22
 400dd8c:	dfc00717 	ldw	ra,28(sp)
 400dd90:	dd800617 	ldw	r22,24(sp)
 400dd94:	dd400517 	ldw	r21,20(sp)
 400dd98:	dd000417 	ldw	r20,16(sp)
 400dd9c:	dcc00317 	ldw	r19,12(sp)
 400dda0:	dc800217 	ldw	r18,8(sp)
 400dda4:	dc400117 	ldw	r17,4(sp)
 400dda8:	dc000017 	ldw	r16,0(sp)
 400ddac:	dec00804 	addi	sp,sp,32
 400ddb0:	f800283a 	ret

0400ddb4 <_setlocale_r>:
 400ddb4:	defffc04 	addi	sp,sp,-16
 400ddb8:	dc800215 	stw	r18,8(sp)
 400ddbc:	dc400115 	stw	r17,4(sp)
 400ddc0:	dc000015 	stw	r16,0(sp)
 400ddc4:	dfc00315 	stw	ra,12(sp)
 400ddc8:	3021883a 	mov	r16,r6
 400ddcc:	2023883a 	mov	r17,r4
 400ddd0:	2825883a 	mov	r18,r5
 400ddd4:	30001626 	beq	r6,zero,400de30 <_setlocale_r+0x7c>
 400ddd8:	3009883a 	mov	r4,r6
 400dddc:	014100f4 	movhi	r5,1027
 400dde0:	29765604 	addi	r5,r5,-9896
 400dde4:	400f9740 	call	400f974 <strcmp>
 400dde8:	10000a1e 	bne	r2,zero,400de14 <_setlocale_r+0x60>
 400ddec:	8c800c15 	stw	r18,48(r17)
 400ddf0:	8c000d15 	stw	r16,52(r17)
 400ddf4:	008100f4 	movhi	r2,1027
 400ddf8:	10b65604 	addi	r2,r2,-9896
 400ddfc:	dfc00317 	ldw	ra,12(sp)
 400de00:	dc800217 	ldw	r18,8(sp)
 400de04:	dc400117 	ldw	r17,4(sp)
 400de08:	dc000017 	ldw	r16,0(sp)
 400de0c:	dec00404 	addi	sp,sp,16
 400de10:	f800283a 	ret
 400de14:	8009883a 	mov	r4,r16
 400de18:	014100f4 	movhi	r5,1027
 400de1c:	29766004 	addi	r5,r5,-9856
 400de20:	400f9740 	call	400f974 <strcmp>
 400de24:	103ff126 	beq	r2,zero,400ddec <_setlocale_r+0x38>
 400de28:	0005883a 	mov	r2,zero
 400de2c:	003ff306 	br	400ddfc <_setlocale_r+0x48>
 400de30:	008100f4 	movhi	r2,1027
 400de34:	10b65604 	addi	r2,r2,-9896
 400de38:	dfc00317 	ldw	ra,12(sp)
 400de3c:	dc800217 	ldw	r18,8(sp)
 400de40:	dc400117 	ldw	r17,4(sp)
 400de44:	dc000017 	ldw	r16,0(sp)
 400de48:	dec00404 	addi	sp,sp,16
 400de4c:	f800283a 	ret

0400de50 <__locale_charset>:
 400de50:	008100f4 	movhi	r2,1027
 400de54:	10b67504 	addi	r2,r2,-9772
 400de58:	f800283a 	ret

0400de5c <_localeconv_r>:
 400de5c:	008100f4 	movhi	r2,1027
 400de60:	10b67904 	addi	r2,r2,-9756
 400de64:	f800283a 	ret

0400de68 <setlocale>:
 400de68:	00c100f4 	movhi	r3,1027
 400de6c:	18c44f04 	addi	r3,r3,4412
 400de70:	2005883a 	mov	r2,r4
 400de74:	19000017 	ldw	r4,0(r3)
 400de78:	280d883a 	mov	r6,r5
 400de7c:	100b883a 	mov	r5,r2
 400de80:	400ddb41 	jmpi	400ddb4 <_setlocale_r>

0400de84 <localeconv>:
 400de84:	008100f4 	movhi	r2,1027
 400de88:	10b67904 	addi	r2,r2,-9756
 400de8c:	f800283a 	ret

0400de90 <__smakebuf_r>:
 400de90:	2880030b 	ldhu	r2,12(r5)
 400de94:	deffed04 	addi	sp,sp,-76
 400de98:	dc401015 	stw	r17,64(sp)
 400de9c:	10c0008c 	andi	r3,r2,2
 400dea0:	18ffffcc 	andi	r3,r3,65535
 400dea4:	18e0001c 	xori	r3,r3,32768
 400dea8:	dc000f15 	stw	r16,60(sp)
 400deac:	dfc01215 	stw	ra,72(sp)
 400deb0:	dc801115 	stw	r18,68(sp)
 400deb4:	18e00004 	addi	r3,r3,-32768
 400deb8:	2821883a 	mov	r16,r5
 400debc:	2023883a 	mov	r17,r4
 400dec0:	1800381e 	bne	r3,zero,400dfa4 <__smakebuf_r+0x114>
 400dec4:	2940038f 	ldh	r5,14(r5)
 400dec8:	28002d16 	blt	r5,zero,400df80 <__smakebuf_r+0xf0>
 400decc:	d80d883a 	mov	r6,sp
 400ded0:	400fcf40 	call	400fcf4 <_fstat_r>
 400ded4:	10002916 	blt	r2,zero,400df7c <__smakebuf_r+0xec>
 400ded8:	d8800117 	ldw	r2,4(sp)
 400dedc:	00e00014 	movui	r3,32768
 400dee0:	10bc000c 	andi	r2,r2,61440
 400dee4:	10c03c26 	beq	r2,r3,400dfd8 <__smakebuf_r+0x148>
 400dee8:	80c0030b 	ldhu	r3,12(r16)
 400deec:	18c20014 	ori	r3,r3,2048
 400def0:	80c0030d 	sth	r3,12(r16)
 400def4:	00c80004 	movi	r3,8192
 400def8:	10c00c1e 	bne	r2,r3,400df2c <__smakebuf_r+0x9c>
 400defc:	8140038f 	ldh	r5,14(r16)
 400df00:	8809883a 	mov	r4,r17
 400df04:	400fd5c0 	call	400fd5c <_isatty_r>
 400df08:	10000826 	beq	r2,zero,400df2c <__smakebuf_r+0x9c>
 400df0c:	80c0030b 	ldhu	r3,12(r16)
 400df10:	808010c4 	addi	r2,r16,67
 400df14:	80800015 	stw	r2,0(r16)
 400df18:	18c00054 	ori	r3,r3,1
 400df1c:	80800415 	stw	r2,16(r16)
 400df20:	00800044 	movi	r2,1
 400df24:	80c0030d 	sth	r3,12(r16)
 400df28:	80800515 	stw	r2,20(r16)
 400df2c:	04810004 	movi	r18,1024
 400df30:	8809883a 	mov	r4,r17
 400df34:	900b883a 	mov	r5,r18
 400df38:	40089000 	call	4008900 <_malloc_r>
 400df3c:	10003026 	beq	r2,zero,400e000 <__smakebuf_r+0x170>
 400df40:	80c0030b 	ldhu	r3,12(r16)
 400df44:	01010074 	movhi	r4,1025
 400df48:	21342704 	addi	r4,r4,-12132
 400df4c:	89000f15 	stw	r4,60(r17)
 400df50:	18c02014 	ori	r3,r3,128
 400df54:	80c0030d 	sth	r3,12(r16)
 400df58:	80800015 	stw	r2,0(r16)
 400df5c:	80800415 	stw	r2,16(r16)
 400df60:	84800515 	stw	r18,20(r16)
 400df64:	dfc01217 	ldw	ra,72(sp)
 400df68:	dc801117 	ldw	r18,68(sp)
 400df6c:	dc401017 	ldw	r17,64(sp)
 400df70:	dc000f17 	ldw	r16,60(sp)
 400df74:	dec01304 	addi	sp,sp,76
 400df78:	f800283a 	ret
 400df7c:	8080030b 	ldhu	r2,12(r16)
 400df80:	10c0200c 	andi	r3,r2,128
 400df84:	18ffffcc 	andi	r3,r3,65535
 400df88:	18e0001c 	xori	r3,r3,32768
 400df8c:	18e00004 	addi	r3,r3,-32768
 400df90:	18000f1e 	bne	r3,zero,400dfd0 <__smakebuf_r+0x140>
 400df94:	04810004 	movi	r18,1024
 400df98:	10820014 	ori	r2,r2,2048
 400df9c:	8080030d 	sth	r2,12(r16)
 400dfa0:	003fe306 	br	400df30 <__smakebuf_r+0xa0>
 400dfa4:	288010c4 	addi	r2,r5,67
 400dfa8:	28800015 	stw	r2,0(r5)
 400dfac:	28800415 	stw	r2,16(r5)
 400dfb0:	00800044 	movi	r2,1
 400dfb4:	28800515 	stw	r2,20(r5)
 400dfb8:	dfc01217 	ldw	ra,72(sp)
 400dfbc:	dc801117 	ldw	r18,68(sp)
 400dfc0:	dc401017 	ldw	r17,64(sp)
 400dfc4:	dc000f17 	ldw	r16,60(sp)
 400dfc8:	dec01304 	addi	sp,sp,76
 400dfcc:	f800283a 	ret
 400dfd0:	04801004 	movi	r18,64
 400dfd4:	003ff006 	br	400df98 <__smakebuf_r+0x108>
 400dfd8:	81000a17 	ldw	r4,40(r16)
 400dfdc:	00c10074 	movhi	r3,1025
 400dfe0:	18fe4404 	addi	r3,r3,-1776
 400dfe4:	20ffc01e 	bne	r4,r3,400dee8 <__smakebuf_r+0x58>
 400dfe8:	8080030b 	ldhu	r2,12(r16)
 400dfec:	00c10004 	movi	r3,1024
 400dff0:	80c01315 	stw	r3,76(r16)
 400dff4:	10c4b03a 	or	r2,r2,r3
 400dff8:	8080030d 	sth	r2,12(r16)
 400dffc:	003fcb06 	br	400df2c <__smakebuf_r+0x9c>
 400e000:	8080030b 	ldhu	r2,12(r16)
 400e004:	10c0800c 	andi	r3,r2,512
 400e008:	18ffffcc 	andi	r3,r3,65535
 400e00c:	18e0001c 	xori	r3,r3,32768
 400e010:	18e00004 	addi	r3,r3,-32768
 400e014:	183fd31e 	bne	r3,zero,400df64 <__smakebuf_r+0xd4>
 400e018:	10800094 	ori	r2,r2,2
 400e01c:	80c010c4 	addi	r3,r16,67
 400e020:	8080030d 	sth	r2,12(r16)
 400e024:	00800044 	movi	r2,1
 400e028:	80c00015 	stw	r3,0(r16)
 400e02c:	80c00415 	stw	r3,16(r16)
 400e030:	80800515 	stw	r2,20(r16)
 400e034:	003fcb06 	br	400df64 <__smakebuf_r+0xd4>

0400e038 <memchr>:
 400e038:	008000c4 	movi	r2,3
 400e03c:	29403fcc 	andi	r5,r5,255
 400e040:	1180282e 	bgeu	r2,r6,400e0e4 <memchr+0xac>
 400e044:	2086703a 	and	r3,r4,r2
 400e048:	1800351e 	bne	r3,zero,400e120 <memchr+0xe8>
 400e04c:	2816923a 	slli	r11,r5,8
 400e050:	2093883a 	add	r9,r4,r2
 400e054:	22000084 	addi	r8,r4,2
 400e058:	5957883a 	add	r11,r11,r5
 400e05c:	5816923a 	slli	r11,r11,8
 400e060:	20c00044 	addi	r3,r4,1
 400e064:	037fbff4 	movhi	r13,65279
 400e068:	6b7fbfc4 	addi	r13,r13,-257
 400e06c:	5957883a 	add	r11,r11,r5
 400e070:	5816923a 	slli	r11,r11,8
 400e074:	03202074 	movhi	r12,32897
 400e078:	63202004 	addi	r12,r12,-32640
 400e07c:	101d883a 	mov	r14,r2
 400e080:	5957883a 	add	r11,r11,r5
 400e084:	21c00017 	ldw	r7,0(r4)
 400e088:	31bfff04 	addi	r6,r6,-4
 400e08c:	1805883a 	mov	r2,r3
 400e090:	3acef03a 	xor	r7,r7,r11
 400e094:	3b55883a 	add	r10,r7,r13
 400e098:	01ce303a 	nor	r7,zero,r7
 400e09c:	51ce703a 	and	r7,r10,r7
 400e0a0:	3b0e703a 	and	r7,r7,r12
 400e0a4:	38000a26 	beq	r7,zero,400e0d0 <memchr+0x98>
 400e0a8:	21c00003 	ldbu	r7,0(r4)
 400e0ac:	39401e26 	beq	r7,r5,400e128 <memchr+0xf0>
 400e0b0:	19c00003 	ldbu	r7,0(r3)
 400e0b4:	39401926 	beq	r7,r5,400e11c <memchr+0xe4>
 400e0b8:	41c00003 	ldbu	r7,0(r8)
 400e0bc:	4005883a 	mov	r2,r8
 400e0c0:	39401626 	beq	r7,r5,400e11c <memchr+0xe4>
 400e0c4:	49c00003 	ldbu	r7,0(r9)
 400e0c8:	4805883a 	mov	r2,r9
 400e0cc:	39401326 	beq	r7,r5,400e11c <memchr+0xe4>
 400e0d0:	21000104 	addi	r4,r4,4
 400e0d4:	4a400104 	addi	r9,r9,4
 400e0d8:	42000104 	addi	r8,r8,4
 400e0dc:	18c00104 	addi	r3,r3,4
 400e0e0:	71bfe836 	bltu	r14,r6,400e084 <memchr+0x4c>
 400e0e4:	2005883a 	mov	r2,r4
 400e0e8:	30000a26 	beq	r6,zero,400e114 <memchr+0xdc>
 400e0ec:	10c00003 	ldbu	r3,0(r2)
 400e0f0:	19400a26 	beq	r3,r5,400e11c <memchr+0xe4>
 400e0f4:	10c00044 	addi	r3,r2,1
 400e0f8:	118d883a 	add	r6,r2,r6
 400e0fc:	00000306 	br	400e10c <memchr+0xd4>
 400e100:	11000003 	ldbu	r4,0(r2)
 400e104:	18c00044 	addi	r3,r3,1
 400e108:	21400426 	beq	r4,r5,400e11c <memchr+0xe4>
 400e10c:	1805883a 	mov	r2,r3
 400e110:	19bffb1e 	bne	r3,r6,400e100 <memchr+0xc8>
 400e114:	0005883a 	mov	r2,zero
 400e118:	f800283a 	ret
 400e11c:	f800283a 	ret
 400e120:	2005883a 	mov	r2,r4
 400e124:	003ff106 	br	400e0ec <memchr+0xb4>
 400e128:	2005883a 	mov	r2,r4
 400e12c:	f800283a 	ret

0400e130 <memmove>:
 400e130:	2005883a 	mov	r2,r4
 400e134:	300f883a 	mov	r7,r6
 400e138:	29000b2e 	bgeu	r5,r4,400e168 <memmove+0x38>
 400e13c:	2987883a 	add	r3,r5,r6
 400e140:	20c0092e 	bgeu	r4,r3,400e168 <memmove+0x38>
 400e144:	218b883a 	add	r5,r4,r6
 400e148:	198fc83a 	sub	r7,r3,r6
 400e14c:	30003f26 	beq	r6,zero,400e24c <memmove+0x11c>
 400e150:	18ffffc4 	addi	r3,r3,-1
 400e154:	19000003 	ldbu	r4,0(r3)
 400e158:	297fffc4 	addi	r5,r5,-1
 400e15c:	29000005 	stb	r4,0(r5)
 400e160:	19fffb1e 	bne	r3,r7,400e150 <memmove+0x20>
 400e164:	f800283a 	ret
 400e168:	00c003c4 	movi	r3,15
 400e16c:	1980382e 	bgeu	r3,r6,400e250 <memmove+0x120>
 400e170:	2886b03a 	or	r3,r5,r2
 400e174:	18c000cc 	andi	r3,r3,3
 400e178:	1800351e 	bne	r3,zero,400e250 <memmove+0x120>
 400e17c:	327ffc04 	addi	r9,r6,-16
 400e180:	4812d13a 	srli	r9,r9,4
 400e184:	12000404 	addi	r8,r2,16
 400e188:	1007883a 	mov	r3,r2
 400e18c:	4808913a 	slli	r4,r9,4
 400e190:	280f883a 	mov	r7,r5
 400e194:	4111883a 	add	r8,r8,r4
 400e198:	39000017 	ldw	r4,0(r7)
 400e19c:	18c00404 	addi	r3,r3,16
 400e1a0:	39c00404 	addi	r7,r7,16
 400e1a4:	193ffc15 	stw	r4,-16(r3)
 400e1a8:	393ffd17 	ldw	r4,-12(r7)
 400e1ac:	193ffd15 	stw	r4,-12(r3)
 400e1b0:	393ffe17 	ldw	r4,-8(r7)
 400e1b4:	193ffe15 	stw	r4,-8(r3)
 400e1b8:	393fff17 	ldw	r4,-4(r7)
 400e1bc:	193fff15 	stw	r4,-4(r3)
 400e1c0:	1a3ff51e 	bne	r3,r8,400e198 <memmove+0x68>
 400e1c4:	49000044 	addi	r4,r9,1
 400e1c8:	2008913a 	slli	r4,r4,4
 400e1cc:	31c003cc 	andi	r7,r6,15
 400e1d0:	1107883a 	add	r3,r2,r4
 400e1d4:	290b883a 	add	r5,r5,r4
 400e1d8:	010000c4 	movi	r4,3
 400e1dc:	21c0142e 	bgeu	r4,r7,400e230 <memmove+0x100>
 400e1e0:	39ffff04 	addi	r7,r7,-4
 400e1e4:	3814d0ba 	srli	r10,r7,2
 400e1e8:	1a400104 	addi	r9,r3,4
 400e1ec:	180d883a 	mov	r6,r3
 400e1f0:	5289883a 	add	r4,r10,r10
 400e1f4:	2109883a 	add	r4,r4,r4
 400e1f8:	4913883a 	add	r9,r9,r4
 400e1fc:	2809883a 	mov	r4,r5
 400e200:	22000017 	ldw	r8,0(r4)
 400e204:	31800104 	addi	r6,r6,4
 400e208:	21000104 	addi	r4,r4,4
 400e20c:	323fff15 	stw	r8,-4(r6)
 400e210:	327ffb1e 	bne	r6,r9,400e200 <memmove+0xd0>
 400e214:	51000044 	addi	r4,r10,1
 400e218:	52bfff24 	muli	r10,r10,-4
 400e21c:	2109883a 	add	r4,r4,r4
 400e220:	2109883a 	add	r4,r4,r4
 400e224:	51cf883a 	add	r7,r10,r7
 400e228:	290b883a 	add	r5,r5,r4
 400e22c:	1907883a 	add	r3,r3,r4
 400e230:	38000626 	beq	r7,zero,400e24c <memmove+0x11c>
 400e234:	19cf883a 	add	r7,r3,r7
 400e238:	29800003 	ldbu	r6,0(r5)
 400e23c:	18c00044 	addi	r3,r3,1
 400e240:	29400044 	addi	r5,r5,1
 400e244:	19bfffc5 	stb	r6,-1(r3)
 400e248:	19fffb1e 	bne	r3,r7,400e238 <memmove+0x108>
 400e24c:	f800283a 	ret
 400e250:	1007883a 	mov	r3,r2
 400e254:	003ff606 	br	400e230 <memmove+0x100>

0400e258 <_Balloc>:
 400e258:	20801317 	ldw	r2,76(r4)
 400e25c:	defffc04 	addi	sp,sp,-16
 400e260:	dc400115 	stw	r17,4(sp)
 400e264:	dc000015 	stw	r16,0(sp)
 400e268:	dfc00315 	stw	ra,12(sp)
 400e26c:	dc800215 	stw	r18,8(sp)
 400e270:	2023883a 	mov	r17,r4
 400e274:	2821883a 	mov	r16,r5
 400e278:	10000f26 	beq	r2,zero,400e2b8 <_Balloc+0x60>
 400e27c:	8407883a 	add	r3,r16,r16
 400e280:	18c7883a 	add	r3,r3,r3
 400e284:	10c7883a 	add	r3,r2,r3
 400e288:	18800017 	ldw	r2,0(r3)
 400e28c:	10001126 	beq	r2,zero,400e2d4 <_Balloc+0x7c>
 400e290:	11000017 	ldw	r4,0(r2)
 400e294:	19000015 	stw	r4,0(r3)
 400e298:	10000415 	stw	zero,16(r2)
 400e29c:	10000315 	stw	zero,12(r2)
 400e2a0:	dfc00317 	ldw	ra,12(sp)
 400e2a4:	dc800217 	ldw	r18,8(sp)
 400e2a8:	dc400117 	ldw	r17,4(sp)
 400e2ac:	dc000017 	ldw	r16,0(sp)
 400e2b0:	dec00404 	addi	sp,sp,16
 400e2b4:	f800283a 	ret
 400e2b8:	01400104 	movi	r5,4
 400e2bc:	01800404 	movi	r6,16
 400e2c0:	400fa840 	call	400fa84 <_calloc_r>
 400e2c4:	88801315 	stw	r2,76(r17)
 400e2c8:	103fec1e 	bne	r2,zero,400e27c <_Balloc+0x24>
 400e2cc:	0005883a 	mov	r2,zero
 400e2d0:	003ff306 	br	400e2a0 <_Balloc+0x48>
 400e2d4:	01400044 	movi	r5,1
 400e2d8:	2c24983a 	sll	r18,r5,r16
 400e2dc:	8809883a 	mov	r4,r17
 400e2e0:	91800144 	addi	r6,r18,5
 400e2e4:	318d883a 	add	r6,r6,r6
 400e2e8:	318d883a 	add	r6,r6,r6
 400e2ec:	400fa840 	call	400fa84 <_calloc_r>
 400e2f0:	103ff626 	beq	r2,zero,400e2cc <_Balloc+0x74>
 400e2f4:	14000115 	stw	r16,4(r2)
 400e2f8:	14800215 	stw	r18,8(r2)
 400e2fc:	003fe606 	br	400e298 <_Balloc+0x40>

0400e300 <_Bfree>:
 400e300:	28000826 	beq	r5,zero,400e324 <_Bfree+0x24>
 400e304:	28c00117 	ldw	r3,4(r5)
 400e308:	20801317 	ldw	r2,76(r4)
 400e30c:	18c7883a 	add	r3,r3,r3
 400e310:	18c7883a 	add	r3,r3,r3
 400e314:	10c5883a 	add	r2,r2,r3
 400e318:	10c00017 	ldw	r3,0(r2)
 400e31c:	28c00015 	stw	r3,0(r5)
 400e320:	11400015 	stw	r5,0(r2)
 400e324:	f800283a 	ret

0400e328 <__multadd>:
 400e328:	defffa04 	addi	sp,sp,-24
 400e32c:	dc000115 	stw	r16,4(sp)
 400e330:	2c000417 	ldw	r16,16(r5)
 400e334:	dc800315 	stw	r18,12(sp)
 400e338:	dc400215 	stw	r17,8(sp)
 400e33c:	dfc00515 	stw	ra,20(sp)
 400e340:	dcc00415 	stw	r19,16(sp)
 400e344:	2823883a 	mov	r17,r5
 400e348:	2025883a 	mov	r18,r4
 400e34c:	28c00504 	addi	r3,r5,20
 400e350:	0011883a 	mov	r8,zero
 400e354:	1a800017 	ldw	r10,0(r3)
 400e358:	18c00104 	addi	r3,r3,4
 400e35c:	42000044 	addi	r8,r8,1
 400e360:	527fffcc 	andi	r9,r10,65535
 400e364:	4993383a 	mul	r9,r9,r6
 400e368:	5014d43a 	srli	r10,r10,16
 400e36c:	49d3883a 	add	r9,r9,r7
 400e370:	480ed43a 	srli	r7,r9,16
 400e374:	5195383a 	mul	r10,r10,r6
 400e378:	4a7fffcc 	andi	r9,r9,65535
 400e37c:	3a8f883a 	add	r7,r7,r10
 400e380:	3814943a 	slli	r10,r7,16
 400e384:	380ed43a 	srli	r7,r7,16
 400e388:	5253883a 	add	r9,r10,r9
 400e38c:	1a7fff15 	stw	r9,-4(r3)
 400e390:	443ff016 	blt	r8,r16,400e354 <__multadd+0x2c>
 400e394:	38000926 	beq	r7,zero,400e3bc <__multadd+0x94>
 400e398:	88800217 	ldw	r2,8(r17)
 400e39c:	80800f0e 	bge	r16,r2,400e3dc <__multadd+0xb4>
 400e3a0:	80800144 	addi	r2,r16,5
 400e3a4:	1085883a 	add	r2,r2,r2
 400e3a8:	1085883a 	add	r2,r2,r2
 400e3ac:	8885883a 	add	r2,r17,r2
 400e3b0:	84000044 	addi	r16,r16,1
 400e3b4:	11c00015 	stw	r7,0(r2)
 400e3b8:	8c000415 	stw	r16,16(r17)
 400e3bc:	8805883a 	mov	r2,r17
 400e3c0:	dfc00517 	ldw	ra,20(sp)
 400e3c4:	dcc00417 	ldw	r19,16(sp)
 400e3c8:	dc800317 	ldw	r18,12(sp)
 400e3cc:	dc400217 	ldw	r17,8(sp)
 400e3d0:	dc000117 	ldw	r16,4(sp)
 400e3d4:	dec00604 	addi	sp,sp,24
 400e3d8:	f800283a 	ret
 400e3dc:	89400117 	ldw	r5,4(r17)
 400e3e0:	9009883a 	mov	r4,r18
 400e3e4:	d9c00015 	stw	r7,0(sp)
 400e3e8:	29400044 	addi	r5,r5,1
 400e3ec:	400e2580 	call	400e258 <_Balloc>
 400e3f0:	89800417 	ldw	r6,16(r17)
 400e3f4:	89400304 	addi	r5,r17,12
 400e3f8:	11000304 	addi	r4,r2,12
 400e3fc:	31800084 	addi	r6,r6,2
 400e400:	318d883a 	add	r6,r6,r6
 400e404:	318d883a 	add	r6,r6,r6
 400e408:	1027883a 	mov	r19,r2
 400e40c:	40090840 	call	4009084 <memcpy>
 400e410:	88c00117 	ldw	r3,4(r17)
 400e414:	90801317 	ldw	r2,76(r18)
 400e418:	d9c00017 	ldw	r7,0(sp)
 400e41c:	18c7883a 	add	r3,r3,r3
 400e420:	18c7883a 	add	r3,r3,r3
 400e424:	10c5883a 	add	r2,r2,r3
 400e428:	10c00017 	ldw	r3,0(r2)
 400e42c:	88c00015 	stw	r3,0(r17)
 400e430:	14400015 	stw	r17,0(r2)
 400e434:	9823883a 	mov	r17,r19
 400e438:	003fd906 	br	400e3a0 <__multadd+0x78>

0400e43c <__s2b>:
 400e43c:	defff904 	addi	sp,sp,-28
 400e440:	dd000415 	stw	r20,16(sp)
 400e444:	dc400115 	stw	r17,4(sp)
 400e448:	2829883a 	mov	r20,r5
 400e44c:	2023883a 	mov	r17,r4
 400e450:	01400244 	movi	r5,9
 400e454:	39000204 	addi	r4,r7,8
 400e458:	dcc00315 	stw	r19,12(sp)
 400e45c:	dc800215 	stw	r18,8(sp)
 400e460:	dfc00615 	stw	ra,24(sp)
 400e464:	dd400515 	stw	r21,20(sp)
 400e468:	dc000015 	stw	r16,0(sp)
 400e46c:	3825883a 	mov	r18,r7
 400e470:	3027883a 	mov	r19,r6
 400e474:	40082800 	call	4008280 <__divsi3>
 400e478:	00c00044 	movi	r3,1
 400e47c:	000b883a 	mov	r5,zero
 400e480:	1880030e 	bge	r3,r2,400e490 <__s2b+0x54>
 400e484:	18c7883a 	add	r3,r3,r3
 400e488:	29400044 	addi	r5,r5,1
 400e48c:	18bffd16 	blt	r3,r2,400e484 <__s2b+0x48>
 400e490:	8809883a 	mov	r4,r17
 400e494:	400e2580 	call	400e258 <_Balloc>
 400e498:	d8c00717 	ldw	r3,28(sp)
 400e49c:	10c00515 	stw	r3,20(r2)
 400e4a0:	00c00044 	movi	r3,1
 400e4a4:	10c00415 	stw	r3,16(r2)
 400e4a8:	00c00244 	movi	r3,9
 400e4ac:	1cc0210e 	bge	r3,r19,400e534 <__s2b+0xf8>
 400e4b0:	a0eb883a 	add	r21,r20,r3
 400e4b4:	a821883a 	mov	r16,r21
 400e4b8:	a4e9883a 	add	r20,r20,r19
 400e4bc:	81c00007 	ldb	r7,0(r16)
 400e4c0:	8809883a 	mov	r4,r17
 400e4c4:	84000044 	addi	r16,r16,1
 400e4c8:	100b883a 	mov	r5,r2
 400e4cc:	01800284 	movi	r6,10
 400e4d0:	39fff404 	addi	r7,r7,-48
 400e4d4:	400e3280 	call	400e328 <__multadd>
 400e4d8:	853ff81e 	bne	r16,r20,400e4bc <__s2b+0x80>
 400e4dc:	ace1883a 	add	r16,r21,r19
 400e4e0:	843ffe04 	addi	r16,r16,-8
 400e4e4:	9c800a0e 	bge	r19,r18,400e510 <__s2b+0xd4>
 400e4e8:	94e5c83a 	sub	r18,r18,r19
 400e4ec:	84a5883a 	add	r18,r16,r18
 400e4f0:	81c00007 	ldb	r7,0(r16)
 400e4f4:	8809883a 	mov	r4,r17
 400e4f8:	84000044 	addi	r16,r16,1
 400e4fc:	100b883a 	mov	r5,r2
 400e500:	01800284 	movi	r6,10
 400e504:	39fff404 	addi	r7,r7,-48
 400e508:	400e3280 	call	400e328 <__multadd>
 400e50c:	84bff81e 	bne	r16,r18,400e4f0 <__s2b+0xb4>
 400e510:	dfc00617 	ldw	ra,24(sp)
 400e514:	dd400517 	ldw	r21,20(sp)
 400e518:	dd000417 	ldw	r20,16(sp)
 400e51c:	dcc00317 	ldw	r19,12(sp)
 400e520:	dc800217 	ldw	r18,8(sp)
 400e524:	dc400117 	ldw	r17,4(sp)
 400e528:	dc000017 	ldw	r16,0(sp)
 400e52c:	dec00704 	addi	sp,sp,28
 400e530:	f800283a 	ret
 400e534:	a4000284 	addi	r16,r20,10
 400e538:	1827883a 	mov	r19,r3
 400e53c:	003fe906 	br	400e4e4 <__s2b+0xa8>

0400e540 <__hi0bits>:
 400e540:	20bfffec 	andhi	r2,r4,65535
 400e544:	1000141e 	bne	r2,zero,400e598 <__hi0bits+0x58>
 400e548:	2008943a 	slli	r4,r4,16
 400e54c:	00800404 	movi	r2,16
 400e550:	20ffc02c 	andhi	r3,r4,65280
 400e554:	1800021e 	bne	r3,zero,400e560 <__hi0bits+0x20>
 400e558:	2008923a 	slli	r4,r4,8
 400e55c:	10800204 	addi	r2,r2,8
 400e560:	20fc002c 	andhi	r3,r4,61440
 400e564:	1800021e 	bne	r3,zero,400e570 <__hi0bits+0x30>
 400e568:	2008913a 	slli	r4,r4,4
 400e56c:	10800104 	addi	r2,r2,4
 400e570:	20f0002c 	andhi	r3,r4,49152
 400e574:	1800031e 	bne	r3,zero,400e584 <__hi0bits+0x44>
 400e578:	2109883a 	add	r4,r4,r4
 400e57c:	10800084 	addi	r2,r2,2
 400e580:	2109883a 	add	r4,r4,r4
 400e584:	20000316 	blt	r4,zero,400e594 <__hi0bits+0x54>
 400e588:	2110002c 	andhi	r4,r4,16384
 400e58c:	2000041e 	bne	r4,zero,400e5a0 <__hi0bits+0x60>
 400e590:	00800804 	movi	r2,32
 400e594:	f800283a 	ret
 400e598:	0005883a 	mov	r2,zero
 400e59c:	003fec06 	br	400e550 <__hi0bits+0x10>
 400e5a0:	10800044 	addi	r2,r2,1
 400e5a4:	f800283a 	ret

0400e5a8 <__lo0bits>:
 400e5a8:	20c00017 	ldw	r3,0(r4)
 400e5ac:	188001cc 	andi	r2,r3,7
 400e5b0:	10000826 	beq	r2,zero,400e5d4 <__lo0bits+0x2c>
 400e5b4:	1880004c 	andi	r2,r3,1
 400e5b8:	1000211e 	bne	r2,zero,400e640 <__lo0bits+0x98>
 400e5bc:	1880008c 	andi	r2,r3,2
 400e5c0:	1000211e 	bne	r2,zero,400e648 <__lo0bits+0xa0>
 400e5c4:	1806d0ba 	srli	r3,r3,2
 400e5c8:	00800084 	movi	r2,2
 400e5cc:	20c00015 	stw	r3,0(r4)
 400e5d0:	f800283a 	ret
 400e5d4:	18bfffcc 	andi	r2,r3,65535
 400e5d8:	10001326 	beq	r2,zero,400e628 <__lo0bits+0x80>
 400e5dc:	0005883a 	mov	r2,zero
 400e5e0:	19403fcc 	andi	r5,r3,255
 400e5e4:	2800021e 	bne	r5,zero,400e5f0 <__lo0bits+0x48>
 400e5e8:	1806d23a 	srli	r3,r3,8
 400e5ec:	10800204 	addi	r2,r2,8
 400e5f0:	194003cc 	andi	r5,r3,15
 400e5f4:	2800021e 	bne	r5,zero,400e600 <__lo0bits+0x58>
 400e5f8:	1806d13a 	srli	r3,r3,4
 400e5fc:	10800104 	addi	r2,r2,4
 400e600:	194000cc 	andi	r5,r3,3
 400e604:	2800021e 	bne	r5,zero,400e610 <__lo0bits+0x68>
 400e608:	1806d0ba 	srli	r3,r3,2
 400e60c:	10800084 	addi	r2,r2,2
 400e610:	1940004c 	andi	r5,r3,1
 400e614:	2800081e 	bne	r5,zero,400e638 <__lo0bits+0x90>
 400e618:	1806d07a 	srli	r3,r3,1
 400e61c:	1800051e 	bne	r3,zero,400e634 <__lo0bits+0x8c>
 400e620:	00800804 	movi	r2,32
 400e624:	f800283a 	ret
 400e628:	1806d43a 	srli	r3,r3,16
 400e62c:	00800404 	movi	r2,16
 400e630:	003feb06 	br	400e5e0 <__lo0bits+0x38>
 400e634:	10800044 	addi	r2,r2,1
 400e638:	20c00015 	stw	r3,0(r4)
 400e63c:	f800283a 	ret
 400e640:	0005883a 	mov	r2,zero
 400e644:	f800283a 	ret
 400e648:	1806d07a 	srli	r3,r3,1
 400e64c:	00800044 	movi	r2,1
 400e650:	20c00015 	stw	r3,0(r4)
 400e654:	f800283a 	ret

0400e658 <__i2b>:
 400e658:	defffd04 	addi	sp,sp,-12
 400e65c:	dc000015 	stw	r16,0(sp)
 400e660:	04000044 	movi	r16,1
 400e664:	dc400115 	stw	r17,4(sp)
 400e668:	2823883a 	mov	r17,r5
 400e66c:	800b883a 	mov	r5,r16
 400e670:	dfc00215 	stw	ra,8(sp)
 400e674:	400e2580 	call	400e258 <_Balloc>
 400e678:	14400515 	stw	r17,20(r2)
 400e67c:	14000415 	stw	r16,16(r2)
 400e680:	dfc00217 	ldw	ra,8(sp)
 400e684:	dc400117 	ldw	r17,4(sp)
 400e688:	dc000017 	ldw	r16,0(sp)
 400e68c:	dec00304 	addi	sp,sp,12
 400e690:	f800283a 	ret

0400e694 <__multiply>:
 400e694:	defffa04 	addi	sp,sp,-24
 400e698:	dcc00315 	stw	r19,12(sp)
 400e69c:	dc400115 	stw	r17,4(sp)
 400e6a0:	34c00417 	ldw	r19,16(r6)
 400e6a4:	2c400417 	ldw	r17,16(r5)
 400e6a8:	dd000415 	stw	r20,16(sp)
 400e6ac:	dc800215 	stw	r18,8(sp)
 400e6b0:	dfc00515 	stw	ra,20(sp)
 400e6b4:	dc000015 	stw	r16,0(sp)
 400e6b8:	2825883a 	mov	r18,r5
 400e6bc:	3029883a 	mov	r20,r6
 400e6c0:	8cc0050e 	bge	r17,r19,400e6d8 <__multiply+0x44>
 400e6c4:	8807883a 	mov	r3,r17
 400e6c8:	3025883a 	mov	r18,r6
 400e6cc:	9823883a 	mov	r17,r19
 400e6d0:	2829883a 	mov	r20,r5
 400e6d4:	1827883a 	mov	r19,r3
 400e6d8:	90800217 	ldw	r2,8(r18)
 400e6dc:	8ce1883a 	add	r16,r17,r19
 400e6e0:	91400117 	ldw	r5,4(r18)
 400e6e4:	1400010e 	bge	r2,r16,400e6ec <__multiply+0x58>
 400e6e8:	29400044 	addi	r5,r5,1
 400e6ec:	400e2580 	call	400e258 <_Balloc>
 400e6f0:	83c00144 	addi	r15,r16,5
 400e6f4:	7bdf883a 	add	r15,r15,r15
 400e6f8:	7bdf883a 	add	r15,r15,r15
 400e6fc:	13800504 	addi	r14,r2,20
 400e700:	13df883a 	add	r15,r2,r15
 400e704:	7007883a 	mov	r3,r14
 400e708:	73c0032e 	bgeu	r14,r15,400e718 <__multiply+0x84>
 400e70c:	18000015 	stw	zero,0(r3)
 400e710:	18c00104 	addi	r3,r3,4
 400e714:	1bfffd36 	bltu	r3,r15,400e70c <__multiply+0x78>
 400e718:	99800144 	addi	r6,r19,5
 400e71c:	8b000144 	addi	r12,r17,5
 400e720:	318d883a 	add	r6,r6,r6
 400e724:	6319883a 	add	r12,r12,r12
 400e728:	318d883a 	add	r6,r6,r6
 400e72c:	6319883a 	add	r12,r12,r12
 400e730:	a3400504 	addi	r13,r20,20
 400e734:	a18d883a 	add	r6,r20,r6
 400e738:	94400504 	addi	r17,r18,20
 400e73c:	9319883a 	add	r12,r18,r12
 400e740:	6980392e 	bgeu	r13,r6,400e828 <__multiply+0x194>
 400e744:	6a800017 	ldw	r10,0(r13)
 400e748:	52ffffcc 	andi	r11,r10,65535
 400e74c:	58001826 	beq	r11,zero,400e7b0 <__multiply+0x11c>
 400e750:	7007883a 	mov	r3,r14
 400e754:	8809883a 	mov	r4,r17
 400e758:	000b883a 	mov	r5,zero
 400e75c:	22400017 	ldw	r9,0(r4)
 400e760:	1a000017 	ldw	r8,0(r3)
 400e764:	21000104 	addi	r4,r4,4
 400e768:	49ffffcc 	andi	r7,r9,65535
 400e76c:	3acf383a 	mul	r7,r7,r11
 400e770:	4812d43a 	srli	r9,r9,16
 400e774:	42bfffcc 	andi	r10,r8,65535
 400e778:	3a8f883a 	add	r7,r7,r10
 400e77c:	394f883a 	add	r7,r7,r5
 400e780:	4010d43a 	srli	r8,r8,16
 400e784:	4acb383a 	mul	r5,r9,r11
 400e788:	3814d43a 	srli	r10,r7,16
 400e78c:	19c0000d 	sth	r7,0(r3)
 400e790:	2a0b883a 	add	r5,r5,r8
 400e794:	2a8b883a 	add	r5,r5,r10
 400e798:	1940008d 	sth	r5,2(r3)
 400e79c:	280ad43a 	srli	r5,r5,16
 400e7a0:	18c00104 	addi	r3,r3,4
 400e7a4:	233fed36 	bltu	r4,r12,400e75c <__multiply+0xc8>
 400e7a8:	19400015 	stw	r5,0(r3)
 400e7ac:	6a800017 	ldw	r10,0(r13)
 400e7b0:	5014d43a 	srli	r10,r10,16
 400e7b4:	50001926 	beq	r10,zero,400e81c <__multiply+0x188>
 400e7b8:	71400017 	ldw	r5,0(r14)
 400e7bc:	7007883a 	mov	r3,r14
 400e7c0:	8809883a 	mov	r4,r17
 400e7c4:	280f883a 	mov	r7,r5
 400e7c8:	0017883a 	mov	r11,zero
 400e7cc:	22400017 	ldw	r9,0(r4)
 400e7d0:	380ed43a 	srli	r7,r7,16
 400e7d4:	1940000d 	sth	r5,0(r3)
 400e7d8:	4a3fffcc 	andi	r8,r9,65535
 400e7dc:	4291383a 	mul	r8,r8,r10
 400e7e0:	4812d43a 	srli	r9,r9,16
 400e7e4:	18c00104 	addi	r3,r3,4
 400e7e8:	41d1883a 	add	r8,r8,r7
 400e7ec:	19c00017 	ldw	r7,0(r3)
 400e7f0:	42d1883a 	add	r8,r8,r11
 400e7f4:	4a93383a 	mul	r9,r9,r10
 400e7f8:	1a3fff8d 	sth	r8,-2(r3)
 400e7fc:	4010d43a 	srli	r8,r8,16
 400e800:	397fffcc 	andi	r5,r7,65535
 400e804:	2a4b883a 	add	r5,r5,r9
 400e808:	2a0b883a 	add	r5,r5,r8
 400e80c:	21000104 	addi	r4,r4,4
 400e810:	2816d43a 	srli	r11,r5,16
 400e814:	233fed36 	bltu	r4,r12,400e7cc <__multiply+0x138>
 400e818:	19400015 	stw	r5,0(r3)
 400e81c:	6b400104 	addi	r13,r13,4
 400e820:	73800104 	addi	r14,r14,4
 400e824:	69bfc736 	bltu	r13,r6,400e744 <__multiply+0xb0>
 400e828:	0400090e 	bge	zero,r16,400e850 <__multiply+0x1bc>
 400e82c:	78ffff17 	ldw	r3,-4(r15)
 400e830:	7bffff04 	addi	r15,r15,-4
 400e834:	18000326 	beq	r3,zero,400e844 <__multiply+0x1b0>
 400e838:	00000506 	br	400e850 <__multiply+0x1bc>
 400e83c:	78c00017 	ldw	r3,0(r15)
 400e840:	1800031e 	bne	r3,zero,400e850 <__multiply+0x1bc>
 400e844:	843fffc4 	addi	r16,r16,-1
 400e848:	7bffff04 	addi	r15,r15,-4
 400e84c:	803ffb1e 	bne	r16,zero,400e83c <__multiply+0x1a8>
 400e850:	14000415 	stw	r16,16(r2)
 400e854:	dfc00517 	ldw	ra,20(sp)
 400e858:	dd000417 	ldw	r20,16(sp)
 400e85c:	dcc00317 	ldw	r19,12(sp)
 400e860:	dc800217 	ldw	r18,8(sp)
 400e864:	dc400117 	ldw	r17,4(sp)
 400e868:	dc000017 	ldw	r16,0(sp)
 400e86c:	dec00604 	addi	sp,sp,24
 400e870:	f800283a 	ret

0400e874 <__pow5mult>:
 400e874:	defffb04 	addi	sp,sp,-20
 400e878:	dcc00315 	stw	r19,12(sp)
 400e87c:	dc800215 	stw	r18,8(sp)
 400e880:	dc000015 	stw	r16,0(sp)
 400e884:	dfc00415 	stw	ra,16(sp)
 400e888:	dc400115 	stw	r17,4(sp)
 400e88c:	308000cc 	andi	r2,r6,3
 400e890:	3021883a 	mov	r16,r6
 400e894:	2027883a 	mov	r19,r4
 400e898:	2825883a 	mov	r18,r5
 400e89c:	10002e1e 	bne	r2,zero,400e958 <__pow5mult+0xe4>
 400e8a0:	8021d0ba 	srai	r16,r16,2
 400e8a4:	80001a26 	beq	r16,zero,400e910 <__pow5mult+0x9c>
 400e8a8:	9c401217 	ldw	r17,72(r19)
 400e8ac:	8800061e 	bne	r17,zero,400e8c8 <__pow5mult+0x54>
 400e8b0:	00003406 	br	400e984 <__pow5mult+0x110>
 400e8b4:	8021d07a 	srai	r16,r16,1
 400e8b8:	80001526 	beq	r16,zero,400e910 <__pow5mult+0x9c>
 400e8bc:	88c00017 	ldw	r3,0(r17)
 400e8c0:	18001b26 	beq	r3,zero,400e930 <__pow5mult+0xbc>
 400e8c4:	1823883a 	mov	r17,r3
 400e8c8:	80c0004c 	andi	r3,r16,1
 400e8cc:	183ff926 	beq	r3,zero,400e8b4 <__pow5mult+0x40>
 400e8d0:	900b883a 	mov	r5,r18
 400e8d4:	880d883a 	mov	r6,r17
 400e8d8:	9809883a 	mov	r4,r19
 400e8dc:	400e6940 	call	400e694 <__multiply>
 400e8e0:	90001b26 	beq	r18,zero,400e950 <__pow5mult+0xdc>
 400e8e4:	91000117 	ldw	r4,4(r18)
 400e8e8:	98c01317 	ldw	r3,76(r19)
 400e8ec:	8021d07a 	srai	r16,r16,1
 400e8f0:	2109883a 	add	r4,r4,r4
 400e8f4:	2109883a 	add	r4,r4,r4
 400e8f8:	1907883a 	add	r3,r3,r4
 400e8fc:	19000017 	ldw	r4,0(r3)
 400e900:	91000015 	stw	r4,0(r18)
 400e904:	1c800015 	stw	r18,0(r3)
 400e908:	1025883a 	mov	r18,r2
 400e90c:	803feb1e 	bne	r16,zero,400e8bc <__pow5mult+0x48>
 400e910:	9005883a 	mov	r2,r18
 400e914:	dfc00417 	ldw	ra,16(sp)
 400e918:	dcc00317 	ldw	r19,12(sp)
 400e91c:	dc800217 	ldw	r18,8(sp)
 400e920:	dc400117 	ldw	r17,4(sp)
 400e924:	dc000017 	ldw	r16,0(sp)
 400e928:	dec00504 	addi	sp,sp,20
 400e92c:	f800283a 	ret
 400e930:	880b883a 	mov	r5,r17
 400e934:	880d883a 	mov	r6,r17
 400e938:	9809883a 	mov	r4,r19
 400e93c:	400e6940 	call	400e694 <__multiply>
 400e940:	88800015 	stw	r2,0(r17)
 400e944:	10000015 	stw	zero,0(r2)
 400e948:	1023883a 	mov	r17,r2
 400e94c:	003fde06 	br	400e8c8 <__pow5mult+0x54>
 400e950:	1025883a 	mov	r18,r2
 400e954:	003fd706 	br	400e8b4 <__pow5mult+0x40>
 400e958:	10bfffc4 	addi	r2,r2,-1
 400e95c:	1085883a 	add	r2,r2,r2
 400e960:	00c100f4 	movhi	r3,1027
 400e964:	18f6cb04 	addi	r3,r3,-9428
 400e968:	1085883a 	add	r2,r2,r2
 400e96c:	1885883a 	add	r2,r3,r2
 400e970:	11800017 	ldw	r6,0(r2)
 400e974:	000f883a 	mov	r7,zero
 400e978:	400e3280 	call	400e328 <__multadd>
 400e97c:	1025883a 	mov	r18,r2
 400e980:	003fc706 	br	400e8a0 <__pow5mult+0x2c>
 400e984:	9809883a 	mov	r4,r19
 400e988:	01409c44 	movi	r5,625
 400e98c:	400e6580 	call	400e658 <__i2b>
 400e990:	98801215 	stw	r2,72(r19)
 400e994:	1023883a 	mov	r17,r2
 400e998:	10000015 	stw	zero,0(r2)
 400e99c:	003fca06 	br	400e8c8 <__pow5mult+0x54>

0400e9a0 <__lshift>:
 400e9a0:	defff904 	addi	sp,sp,-28
 400e9a4:	dd400515 	stw	r21,20(sp)
 400e9a8:	dc400115 	stw	r17,4(sp)
 400e9ac:	2d400417 	ldw	r21,16(r5)
 400e9b0:	3023d17a 	srai	r17,r6,5
 400e9b4:	28800217 	ldw	r2,8(r5)
 400e9b8:	dd000415 	stw	r20,16(sp)
 400e9bc:	8d6b883a 	add	r21,r17,r21
 400e9c0:	dcc00315 	stw	r19,12(sp)
 400e9c4:	dc800215 	stw	r18,8(sp)
 400e9c8:	dc000015 	stw	r16,0(sp)
 400e9cc:	dfc00615 	stw	ra,24(sp)
 400e9d0:	ac000044 	addi	r16,r21,1
 400e9d4:	2825883a 	mov	r18,r5
 400e9d8:	3029883a 	mov	r20,r6
 400e9dc:	2027883a 	mov	r19,r4
 400e9e0:	29400117 	ldw	r5,4(r5)
 400e9e4:	1400030e 	bge	r2,r16,400e9f4 <__lshift+0x54>
 400e9e8:	1085883a 	add	r2,r2,r2
 400e9ec:	29400044 	addi	r5,r5,1
 400e9f0:	143ffd16 	blt	r2,r16,400e9e8 <__lshift+0x48>
 400e9f4:	9809883a 	mov	r4,r19
 400e9f8:	400e2580 	call	400e258 <_Balloc>
 400e9fc:	10c00504 	addi	r3,r2,20
 400ea00:	0440090e 	bge	zero,r17,400ea28 <__lshift+0x88>
 400ea04:	000f883a 	mov	r7,zero
 400ea08:	18000015 	stw	zero,0(r3)
 400ea0c:	39c00044 	addi	r7,r7,1
 400ea10:	18c00104 	addi	r3,r3,4
 400ea14:	3c7ffc1e 	bne	r7,r17,400ea08 <__lshift+0x68>
 400ea18:	38c00144 	addi	r3,r7,5
 400ea1c:	18c7883a 	add	r3,r3,r3
 400ea20:	18c7883a 	add	r3,r3,r3
 400ea24:	10c7883a 	add	r3,r2,r3
 400ea28:	92000417 	ldw	r8,16(r18)
 400ea2c:	a18007cc 	andi	r6,r20,31
 400ea30:	91c00504 	addi	r7,r18,20
 400ea34:	42000144 	addi	r8,r8,5
 400ea38:	4211883a 	add	r8,r8,r8
 400ea3c:	4211883a 	add	r8,r8,r8
 400ea40:	9211883a 	add	r8,r18,r8
 400ea44:	30002226 	beq	r6,zero,400ead0 <__lshift+0x130>
 400ea48:	02800804 	movi	r10,32
 400ea4c:	5195c83a 	sub	r10,r10,r6
 400ea50:	000b883a 	mov	r5,zero
 400ea54:	3a400017 	ldw	r9,0(r7)
 400ea58:	18c00104 	addi	r3,r3,4
 400ea5c:	39c00104 	addi	r7,r7,4
 400ea60:	4992983a 	sll	r9,r9,r6
 400ea64:	2a4ab03a 	or	r5,r5,r9
 400ea68:	197fff15 	stw	r5,-4(r3)
 400ea6c:	397fff17 	ldw	r5,-4(r7)
 400ea70:	2a8ad83a 	srl	r5,r5,r10
 400ea74:	3a3ff736 	bltu	r7,r8,400ea54 <__lshift+0xb4>
 400ea78:	19400015 	stw	r5,0(r3)
 400ea7c:	28000126 	beq	r5,zero,400ea84 <__lshift+0xe4>
 400ea80:	ac000084 	addi	r16,r21,2
 400ea84:	91000117 	ldw	r4,4(r18)
 400ea88:	98c01317 	ldw	r3,76(r19)
 400ea8c:	843fffc4 	addi	r16,r16,-1
 400ea90:	2109883a 	add	r4,r4,r4
 400ea94:	2109883a 	add	r4,r4,r4
 400ea98:	1907883a 	add	r3,r3,r4
 400ea9c:	19000017 	ldw	r4,0(r3)
 400eaa0:	14000415 	stw	r16,16(r2)
 400eaa4:	91000015 	stw	r4,0(r18)
 400eaa8:	1c800015 	stw	r18,0(r3)
 400eaac:	dfc00617 	ldw	ra,24(sp)
 400eab0:	dd400517 	ldw	r21,20(sp)
 400eab4:	dd000417 	ldw	r20,16(sp)
 400eab8:	dcc00317 	ldw	r19,12(sp)
 400eabc:	dc800217 	ldw	r18,8(sp)
 400eac0:	dc400117 	ldw	r17,4(sp)
 400eac4:	dc000017 	ldw	r16,0(sp)
 400eac8:	dec00704 	addi	sp,sp,28
 400eacc:	f800283a 	ret
 400ead0:	39400017 	ldw	r5,0(r7)
 400ead4:	18c00104 	addi	r3,r3,4
 400ead8:	39c00104 	addi	r7,r7,4
 400eadc:	197fff15 	stw	r5,-4(r3)
 400eae0:	3a3fe82e 	bgeu	r7,r8,400ea84 <__lshift+0xe4>
 400eae4:	39400017 	ldw	r5,0(r7)
 400eae8:	18c00104 	addi	r3,r3,4
 400eaec:	39c00104 	addi	r7,r7,4
 400eaf0:	197fff15 	stw	r5,-4(r3)
 400eaf4:	3a3ff636 	bltu	r7,r8,400ead0 <__lshift+0x130>
 400eaf8:	003fe206 	br	400ea84 <__lshift+0xe4>

0400eafc <__mcmp>:
 400eafc:	20800417 	ldw	r2,16(r4)
 400eb00:	28c00417 	ldw	r3,16(r5)
 400eb04:	10c5c83a 	sub	r2,r2,r3
 400eb08:	10000f1e 	bne	r2,zero,400eb48 <__mcmp+0x4c>
 400eb0c:	18c00144 	addi	r3,r3,5
 400eb10:	18c7883a 	add	r3,r3,r3
 400eb14:	18c7883a 	add	r3,r3,r3
 400eb18:	21c00504 	addi	r7,r4,20
 400eb1c:	28cb883a 	add	r5,r5,r3
 400eb20:	20c9883a 	add	r4,r4,r3
 400eb24:	213fff04 	addi	r4,r4,-4
 400eb28:	297fff04 	addi	r5,r5,-4
 400eb2c:	21800017 	ldw	r6,0(r4)
 400eb30:	28c00017 	ldw	r3,0(r5)
 400eb34:	30c0021e 	bne	r6,r3,400eb40 <__mcmp+0x44>
 400eb38:	393ffa36 	bltu	r7,r4,400eb24 <__mcmp+0x28>
 400eb3c:	f800283a 	ret
 400eb40:	30c00236 	bltu	r6,r3,400eb4c <__mcmp+0x50>
 400eb44:	00800044 	movi	r2,1
 400eb48:	f800283a 	ret
 400eb4c:	00bfffc4 	movi	r2,-1
 400eb50:	f800283a 	ret

0400eb54 <__mdiff>:
 400eb54:	defffb04 	addi	sp,sp,-20
 400eb58:	dc000015 	stw	r16,0(sp)
 400eb5c:	2821883a 	mov	r16,r5
 400eb60:	dc800215 	stw	r18,8(sp)
 400eb64:	300b883a 	mov	r5,r6
 400eb68:	2025883a 	mov	r18,r4
 400eb6c:	8009883a 	mov	r4,r16
 400eb70:	dc400115 	stw	r17,4(sp)
 400eb74:	dfc00415 	stw	ra,16(sp)
 400eb78:	dcc00315 	stw	r19,12(sp)
 400eb7c:	3023883a 	mov	r17,r6
 400eb80:	400eafc0 	call	400eafc <__mcmp>
 400eb84:	10005026 	beq	r2,zero,400ecc8 <__mdiff+0x174>
 400eb88:	10004a16 	blt	r2,zero,400ecb4 <__mdiff+0x160>
 400eb8c:	0027883a 	mov	r19,zero
 400eb90:	81400117 	ldw	r5,4(r16)
 400eb94:	9009883a 	mov	r4,r18
 400eb98:	400e2580 	call	400e258 <_Balloc>
 400eb9c:	82400417 	ldw	r9,16(r16)
 400eba0:	89800417 	ldw	r6,16(r17)
 400eba4:	14c00315 	stw	r19,12(r2)
 400eba8:	4b800144 	addi	r14,r9,5
 400ebac:	31800144 	addi	r6,r6,5
 400ebb0:	739d883a 	add	r14,r14,r14
 400ebb4:	318d883a 	add	r6,r6,r6
 400ebb8:	739d883a 	add	r14,r14,r14
 400ebbc:	318d883a 	add	r6,r6,r6
 400ebc0:	81c00504 	addi	r7,r16,20
 400ebc4:	839d883a 	add	r14,r16,r14
 400ebc8:	8a000504 	addi	r8,r17,20
 400ebcc:	898d883a 	add	r6,r17,r6
 400ebd0:	10c00504 	addi	r3,r2,20
 400ebd4:	0009883a 	mov	r4,zero
 400ebd8:	3b000017 	ldw	r12,0(r7)
 400ebdc:	42c00017 	ldw	r11,0(r8)
 400ebe0:	42000104 	addi	r8,r8,4
 400ebe4:	62bfffcc 	andi	r10,r12,65535
 400ebe8:	5b7fffcc 	andi	r13,r11,65535
 400ebec:	5109883a 	add	r4,r10,r4
 400ebf0:	2355c83a 	sub	r10,r4,r13
 400ebf4:	5816d43a 	srli	r11,r11,16
 400ebf8:	6008d43a 	srli	r4,r12,16
 400ebfc:	501bd43a 	srai	r13,r10,16
 400ec00:	1a80000d 	sth	r10,0(r3)
 400ec04:	22c9c83a 	sub	r4,r4,r11
 400ec08:	2349883a 	add	r4,r4,r13
 400ec0c:	1900008d 	sth	r4,2(r3)
 400ec10:	39c00104 	addi	r7,r7,4
 400ec14:	2009d43a 	srai	r4,r4,16
 400ec18:	18c00104 	addi	r3,r3,4
 400ec1c:	41bfee36 	bltu	r8,r6,400ebd8 <__mdiff+0x84>
 400ec20:	180b883a 	mov	r5,r3
 400ec24:	3815883a 	mov	r10,r7
 400ec28:	3b80132e 	bgeu	r7,r14,400ec78 <__mdiff+0x124>
 400ec2c:	3a000017 	ldw	r8,0(r7)
 400ec30:	18c00104 	addi	r3,r3,4
 400ec34:	39c00104 	addi	r7,r7,4
 400ec38:	41bfffcc 	andi	r6,r8,65535
 400ec3c:	310d883a 	add	r6,r6,r4
 400ec40:	3009d43a 	srai	r4,r6,16
 400ec44:	4010d43a 	srli	r8,r8,16
 400ec48:	19bfff0d 	sth	r6,-4(r3)
 400ec4c:	2209883a 	add	r4,r4,r8
 400ec50:	193fff8d 	sth	r4,-2(r3)
 400ec54:	2009d43a 	srai	r4,r4,16
 400ec58:	3bbff436 	bltu	r7,r14,400ec2c <__mdiff+0xd8>
 400ec5c:	0286303a 	nor	r3,zero,r10
 400ec60:	1b87883a 	add	r3,r3,r14
 400ec64:	1806d0ba 	srli	r3,r3,2
 400ec68:	18c00044 	addi	r3,r3,1
 400ec6c:	18c7883a 	add	r3,r3,r3
 400ec70:	18c7883a 	add	r3,r3,r3
 400ec74:	28c7883a 	add	r3,r5,r3
 400ec78:	193fff17 	ldw	r4,-4(r3)
 400ec7c:	18ffff04 	addi	r3,r3,-4
 400ec80:	2000041e 	bne	r4,zero,400ec94 <__mdiff+0x140>
 400ec84:	18ffff04 	addi	r3,r3,-4
 400ec88:	19000017 	ldw	r4,0(r3)
 400ec8c:	4a7fffc4 	addi	r9,r9,-1
 400ec90:	203ffc26 	beq	r4,zero,400ec84 <__mdiff+0x130>
 400ec94:	12400415 	stw	r9,16(r2)
 400ec98:	dfc00417 	ldw	ra,16(sp)
 400ec9c:	dcc00317 	ldw	r19,12(sp)
 400eca0:	dc800217 	ldw	r18,8(sp)
 400eca4:	dc400117 	ldw	r17,4(sp)
 400eca8:	dc000017 	ldw	r16,0(sp)
 400ecac:	dec00504 	addi	sp,sp,20
 400ecb0:	f800283a 	ret
 400ecb4:	8005883a 	mov	r2,r16
 400ecb8:	04c00044 	movi	r19,1
 400ecbc:	8821883a 	mov	r16,r17
 400ecc0:	1023883a 	mov	r17,r2
 400ecc4:	003fb206 	br	400eb90 <__mdiff+0x3c>
 400ecc8:	9009883a 	mov	r4,r18
 400eccc:	000b883a 	mov	r5,zero
 400ecd0:	400e2580 	call	400e258 <_Balloc>
 400ecd4:	00c00044 	movi	r3,1
 400ecd8:	10c00415 	stw	r3,16(r2)
 400ecdc:	10000515 	stw	zero,20(r2)
 400ece0:	dfc00417 	ldw	ra,16(sp)
 400ece4:	dcc00317 	ldw	r19,12(sp)
 400ece8:	dc800217 	ldw	r18,8(sp)
 400ecec:	dc400117 	ldw	r17,4(sp)
 400ecf0:	dc000017 	ldw	r16,0(sp)
 400ecf4:	dec00504 	addi	sp,sp,20
 400ecf8:	f800283a 	ret

0400ecfc <__ulp>:
 400ecfc:	295ffc2c 	andhi	r5,r5,32752
 400ed00:	00bf3034 	movhi	r2,64704
 400ed04:	2887883a 	add	r3,r5,r2
 400ed08:	00c0020e 	bge	zero,r3,400ed14 <__ulp+0x18>
 400ed0c:	0005883a 	mov	r2,zero
 400ed10:	f800283a 	ret
 400ed14:	00c7c83a 	sub	r3,zero,r3
 400ed18:	1805d53a 	srai	r2,r3,20
 400ed1c:	00c004c4 	movi	r3,19
 400ed20:	18800a0e 	bge	r3,r2,400ed4c <__ulp+0x50>
 400ed24:	01000c84 	movi	r4,50
 400ed28:	0007883a 	mov	r3,zero
 400ed2c:	20800516 	blt	r4,r2,400ed44 <__ulp+0x48>
 400ed30:	01000cc4 	movi	r4,51
 400ed34:	2085c83a 	sub	r2,r4,r2
 400ed38:	01000044 	movi	r4,1
 400ed3c:	2084983a 	sll	r2,r4,r2
 400ed40:	f800283a 	ret
 400ed44:	00800044 	movi	r2,1
 400ed48:	f800283a 	ret
 400ed4c:	00c00234 	movhi	r3,8
 400ed50:	1887d83a 	sra	r3,r3,r2
 400ed54:	0005883a 	mov	r2,zero
 400ed58:	f800283a 	ret

0400ed5c <__b2d>:
 400ed5c:	defffa04 	addi	sp,sp,-24
 400ed60:	dc000015 	stw	r16,0(sp)
 400ed64:	24000417 	ldw	r16,16(r4)
 400ed68:	dc400115 	stw	r17,4(sp)
 400ed6c:	dcc00315 	stw	r19,12(sp)
 400ed70:	84000144 	addi	r16,r16,5
 400ed74:	8421883a 	add	r16,r16,r16
 400ed78:	8421883a 	add	r16,r16,r16
 400ed7c:	2421883a 	add	r16,r4,r16
 400ed80:	847fff17 	ldw	r17,-4(r16)
 400ed84:	24c00504 	addi	r19,r4,20
 400ed88:	dd000415 	stw	r20,16(sp)
 400ed8c:	8809883a 	mov	r4,r17
 400ed90:	dc800215 	stw	r18,8(sp)
 400ed94:	2829883a 	mov	r20,r5
 400ed98:	dfc00515 	stw	ra,20(sp)
 400ed9c:	400e5400 	call	400e540 <__hi0bits>
 400eda0:	00c00804 	movi	r3,32
 400eda4:	1887c83a 	sub	r3,r3,r2
 400eda8:	a0c00015 	stw	r3,0(r20)
 400edac:	00c00284 	movi	r3,10
 400edb0:	84bfff04 	addi	r18,r16,-4
 400edb4:	18801216 	blt	r3,r2,400ee00 <__b2d+0xa4>
 400edb8:	010002c4 	movi	r4,11
 400edbc:	2089c83a 	sub	r4,r4,r2
 400edc0:	8906d83a 	srl	r3,r17,r4
 400edc4:	18cffc34 	orhi	r3,r3,16368
 400edc8:	9c80322e 	bgeu	r19,r18,400ee94 <__b2d+0x138>
 400edcc:	817ffe17 	ldw	r5,-8(r16)
 400edd0:	2908d83a 	srl	r4,r5,r4
 400edd4:	10800544 	addi	r2,r2,21
 400edd8:	88a2983a 	sll	r17,r17,r2
 400eddc:	2444b03a 	or	r2,r4,r17
 400ede0:	dfc00517 	ldw	ra,20(sp)
 400ede4:	dd000417 	ldw	r20,16(sp)
 400ede8:	dcc00317 	ldw	r19,12(sp)
 400edec:	dc800217 	ldw	r18,8(sp)
 400edf0:	dc400117 	ldw	r17,4(sp)
 400edf4:	dc000017 	ldw	r16,0(sp)
 400edf8:	dec00604 	addi	sp,sp,24
 400edfc:	f800283a 	ret
 400ee00:	9c801636 	bltu	r19,r18,400ee5c <__b2d+0x100>
 400ee04:	113ffd44 	addi	r4,r2,-11
 400ee08:	000b883a 	mov	r5,zero
 400ee0c:	20001726 	beq	r4,zero,400ee6c <__b2d+0x110>
 400ee10:	00c00ac4 	movi	r3,43
 400ee14:	1885c83a 	sub	r2,r3,r2
 400ee18:	8906983a 	sll	r3,r17,r4
 400ee1c:	288cd83a 	srl	r6,r5,r2
 400ee20:	18cffc34 	orhi	r3,r3,16368
 400ee24:	1986b03a 	or	r3,r3,r6
 400ee28:	9c801c2e 	bgeu	r19,r18,400ee9c <__b2d+0x140>
 400ee2c:	91bfff17 	ldw	r6,-4(r18)
 400ee30:	3084d83a 	srl	r2,r6,r2
 400ee34:	2908983a 	sll	r4,r5,r4
 400ee38:	1104b03a 	or	r2,r2,r4
 400ee3c:	dfc00517 	ldw	ra,20(sp)
 400ee40:	dd000417 	ldw	r20,16(sp)
 400ee44:	dcc00317 	ldw	r19,12(sp)
 400ee48:	dc800217 	ldw	r18,8(sp)
 400ee4c:	dc400117 	ldw	r17,4(sp)
 400ee50:	dc000017 	ldw	r16,0(sp)
 400ee54:	dec00604 	addi	sp,sp,24
 400ee58:	f800283a 	ret
 400ee5c:	113ffd44 	addi	r4,r2,-11
 400ee60:	84bffe04 	addi	r18,r16,-8
 400ee64:	817ffe17 	ldw	r5,-8(r16)
 400ee68:	203fe91e 	bne	r4,zero,400ee10 <__b2d+0xb4>
 400ee6c:	88cffc34 	orhi	r3,r17,16368
 400ee70:	2805883a 	mov	r2,r5
 400ee74:	dfc00517 	ldw	ra,20(sp)
 400ee78:	dd000417 	ldw	r20,16(sp)
 400ee7c:	dcc00317 	ldw	r19,12(sp)
 400ee80:	dc800217 	ldw	r18,8(sp)
 400ee84:	dc400117 	ldw	r17,4(sp)
 400ee88:	dc000017 	ldw	r16,0(sp)
 400ee8c:	dec00604 	addi	sp,sp,24
 400ee90:	f800283a 	ret
 400ee94:	0009883a 	mov	r4,zero
 400ee98:	003fce06 	br	400edd4 <__b2d+0x78>
 400ee9c:	0005883a 	mov	r2,zero
 400eea0:	003fe406 	br	400ee34 <__b2d+0xd8>

0400eea4 <__d2b>:
 400eea4:	defff804 	addi	sp,sp,-32
 400eea8:	dc400315 	stw	r17,12(sp)
 400eeac:	3023883a 	mov	r17,r6
 400eeb0:	dc800415 	stw	r18,16(sp)
 400eeb4:	8824907a 	slli	r18,r17,1
 400eeb8:	dcc00515 	stw	r19,20(sp)
 400eebc:	2827883a 	mov	r19,r5
 400eec0:	9024d57a 	srli	r18,r18,21
 400eec4:	01400044 	movi	r5,1
 400eec8:	dd000615 	stw	r20,24(sp)
 400eecc:	dc000215 	stw	r16,8(sp)
 400eed0:	dfc00715 	stw	ra,28(sp)
 400eed4:	3829883a 	mov	r20,r7
 400eed8:	400e2580 	call	400e258 <_Balloc>
 400eedc:	1021883a 	mov	r16,r2
 400eee0:	00800434 	movhi	r2,16
 400eee4:	10bfffc4 	addi	r2,r2,-1
 400eee8:	88a2703a 	and	r17,r17,r2
 400eeec:	90000126 	beq	r18,zero,400eef4 <__d2b+0x50>
 400eef0:	8c400434 	orhi	r17,r17,16
 400eef4:	dc400015 	stw	r17,0(sp)
 400eef8:	98002226 	beq	r19,zero,400ef84 <__d2b+0xe0>
 400eefc:	d9000104 	addi	r4,sp,4
 400ef00:	dcc00115 	stw	r19,4(sp)
 400ef04:	400e5a80 	call	400e5a8 <__lo0bits>
 400ef08:	d8c00017 	ldw	r3,0(sp)
 400ef0c:	10002d1e 	bne	r2,zero,400efc4 <__d2b+0x120>
 400ef10:	d9000117 	ldw	r4,4(sp)
 400ef14:	81000515 	stw	r4,20(r16)
 400ef18:	1823003a 	cmpeq	r17,r3,zero
 400ef1c:	01000084 	movi	r4,2
 400ef20:	2463c83a 	sub	r17,r4,r17
 400ef24:	80c00615 	stw	r3,24(r16)
 400ef28:	84400415 	stw	r17,16(r16)
 400ef2c:	90001d1e 	bne	r18,zero,400efa4 <__d2b+0x100>
 400ef30:	88c00104 	addi	r3,r17,4
 400ef34:	18c7883a 	add	r3,r3,r3
 400ef38:	18c7883a 	add	r3,r3,r3
 400ef3c:	80c7883a 	add	r3,r16,r3
 400ef40:	19000017 	ldw	r4,0(r3)
 400ef44:	10bef384 	addi	r2,r2,-1074
 400ef48:	a0800015 	stw	r2,0(r20)
 400ef4c:	400e5400 	call	400e540 <__hi0bits>
 400ef50:	8822917a 	slli	r17,r17,5
 400ef54:	d8c00817 	ldw	r3,32(sp)
 400ef58:	8885c83a 	sub	r2,r17,r2
 400ef5c:	18800015 	stw	r2,0(r3)
 400ef60:	8005883a 	mov	r2,r16
 400ef64:	dfc00717 	ldw	ra,28(sp)
 400ef68:	dd000617 	ldw	r20,24(sp)
 400ef6c:	dcc00517 	ldw	r19,20(sp)
 400ef70:	dc800417 	ldw	r18,16(sp)
 400ef74:	dc400317 	ldw	r17,12(sp)
 400ef78:	dc000217 	ldw	r16,8(sp)
 400ef7c:	dec00804 	addi	sp,sp,32
 400ef80:	f800283a 	ret
 400ef84:	d809883a 	mov	r4,sp
 400ef88:	400e5a80 	call	400e5a8 <__lo0bits>
 400ef8c:	d8c00017 	ldw	r3,0(sp)
 400ef90:	04400044 	movi	r17,1
 400ef94:	84400415 	stw	r17,16(r16)
 400ef98:	80c00515 	stw	r3,20(r16)
 400ef9c:	10800804 	addi	r2,r2,32
 400efa0:	903fe326 	beq	r18,zero,400ef30 <__d2b+0x8c>
 400efa4:	00c00d44 	movi	r3,53
 400efa8:	94bef344 	addi	r18,r18,-1075
 400efac:	90a5883a 	add	r18,r18,r2
 400efb0:	1885c83a 	sub	r2,r3,r2
 400efb4:	d8c00817 	ldw	r3,32(sp)
 400efb8:	a4800015 	stw	r18,0(r20)
 400efbc:	18800015 	stw	r2,0(r3)
 400efc0:	003fe706 	br	400ef60 <__d2b+0xbc>
 400efc4:	01000804 	movi	r4,32
 400efc8:	2089c83a 	sub	r4,r4,r2
 400efcc:	1908983a 	sll	r4,r3,r4
 400efd0:	d9400117 	ldw	r5,4(sp)
 400efd4:	1886d83a 	srl	r3,r3,r2
 400efd8:	2148b03a 	or	r4,r4,r5
 400efdc:	81000515 	stw	r4,20(r16)
 400efe0:	d8c00015 	stw	r3,0(sp)
 400efe4:	003fcc06 	br	400ef18 <__d2b+0x74>

0400efe8 <__ratio>:
 400efe8:	defff904 	addi	sp,sp,-28
 400efec:	dc400315 	stw	r17,12(sp)
 400eff0:	2823883a 	mov	r17,r5
 400eff4:	d9400104 	addi	r5,sp,4
 400eff8:	dfc00615 	stw	ra,24(sp)
 400effc:	dcc00515 	stw	r19,20(sp)
 400f000:	dc800415 	stw	r18,16(sp)
 400f004:	2027883a 	mov	r19,r4
 400f008:	dc000215 	stw	r16,8(sp)
 400f00c:	400ed5c0 	call	400ed5c <__b2d>
 400f010:	8809883a 	mov	r4,r17
 400f014:	d80b883a 	mov	r5,sp
 400f018:	1025883a 	mov	r18,r2
 400f01c:	1821883a 	mov	r16,r3
 400f020:	400ed5c0 	call	400ed5c <__b2d>
 400f024:	99400417 	ldw	r5,16(r19)
 400f028:	89000417 	ldw	r4,16(r17)
 400f02c:	d9800117 	ldw	r6,4(sp)
 400f030:	2909c83a 	sub	r4,r5,r4
 400f034:	d9400017 	ldw	r5,0(sp)
 400f038:	2008917a 	slli	r4,r4,5
 400f03c:	314bc83a 	sub	r5,r6,r5
 400f040:	290b883a 	add	r5,r5,r4
 400f044:	01400e0e 	bge	zero,r5,400f080 <__ratio+0x98>
 400f048:	280a953a 	slli	r5,r5,20
 400f04c:	2c21883a 	add	r16,r5,r16
 400f050:	9009883a 	mov	r4,r18
 400f054:	800b883a 	mov	r5,r16
 400f058:	100d883a 	mov	r6,r2
 400f05c:	180f883a 	mov	r7,r3
 400f060:	4007e540 	call	4007e54 <__divdf3>
 400f064:	dfc00617 	ldw	ra,24(sp)
 400f068:	dcc00517 	ldw	r19,20(sp)
 400f06c:	dc800417 	ldw	r18,16(sp)
 400f070:	dc400317 	ldw	r17,12(sp)
 400f074:	dc000217 	ldw	r16,8(sp)
 400f078:	dec00704 	addi	sp,sp,28
 400f07c:	f800283a 	ret
 400f080:	280a953a 	slli	r5,r5,20
 400f084:	1947c83a 	sub	r3,r3,r5
 400f088:	003ff106 	br	400f050 <__ratio+0x68>

0400f08c <_mprec_log10>:
 400f08c:	defffe04 	addi	sp,sp,-8
 400f090:	dc000015 	stw	r16,0(sp)
 400f094:	dfc00115 	stw	ra,4(sp)
 400f098:	008005c4 	movi	r2,23
 400f09c:	2021883a 	mov	r16,r4
 400f0a0:	11000d0e 	bge	r2,r4,400f0d8 <_mprec_log10+0x4c>
 400f0a4:	0005883a 	mov	r2,zero
 400f0a8:	00cffc34 	movhi	r3,16368
 400f0ac:	843fffc4 	addi	r16,r16,-1
 400f0b0:	1009883a 	mov	r4,r2
 400f0b4:	180b883a 	mov	r5,r3
 400f0b8:	000d883a 	mov	r6,zero
 400f0bc:	01d00934 	movhi	r7,16420
 400f0c0:	4007b700 	call	4007b70 <__muldf3>
 400f0c4:	803ff91e 	bne	r16,zero,400f0ac <_mprec_log10+0x20>
 400f0c8:	dfc00117 	ldw	ra,4(sp)
 400f0cc:	dc000017 	ldw	r16,0(sp)
 400f0d0:	dec00204 	addi	sp,sp,8
 400f0d4:	f800283a 	ret
 400f0d8:	202090fa 	slli	r16,r4,3
 400f0dc:	008100f4 	movhi	r2,1027
 400f0e0:	10b69904 	addi	r2,r2,-9628
 400f0e4:	1421883a 	add	r16,r2,r16
 400f0e8:	80800017 	ldw	r2,0(r16)
 400f0ec:	80c00117 	ldw	r3,4(r16)
 400f0f0:	dfc00117 	ldw	ra,4(sp)
 400f0f4:	dc000017 	ldw	r16,0(sp)
 400f0f8:	dec00204 	addi	sp,sp,8
 400f0fc:	f800283a 	ret

0400f100 <__copybits>:
 400f100:	297fffc4 	addi	r5,r5,-1
 400f104:	31c00417 	ldw	r7,16(r6)
 400f108:	2811d17a 	srai	r8,r5,5
 400f10c:	30800504 	addi	r2,r6,20
 400f110:	39c00144 	addi	r7,r7,5
 400f114:	42000044 	addi	r8,r8,1
 400f118:	39cf883a 	add	r7,r7,r7
 400f11c:	4211883a 	add	r8,r8,r8
 400f120:	39cf883a 	add	r7,r7,r7
 400f124:	4211883a 	add	r8,r8,r8
 400f128:	31cf883a 	add	r7,r6,r7
 400f12c:	2211883a 	add	r8,r4,r8
 400f130:	11c00d2e 	bgeu	r2,r7,400f168 <__copybits+0x68>
 400f134:	2007883a 	mov	r3,r4
 400f138:	11400017 	ldw	r5,0(r2)
 400f13c:	18c00104 	addi	r3,r3,4
 400f140:	10800104 	addi	r2,r2,4
 400f144:	197fff15 	stw	r5,-4(r3)
 400f148:	11fffb36 	bltu	r2,r7,400f138 <__copybits+0x38>
 400f14c:	3985c83a 	sub	r2,r7,r6
 400f150:	10bffac4 	addi	r2,r2,-21
 400f154:	1004d0ba 	srli	r2,r2,2
 400f158:	10800044 	addi	r2,r2,1
 400f15c:	1085883a 	add	r2,r2,r2
 400f160:	1085883a 	add	r2,r2,r2
 400f164:	2089883a 	add	r4,r4,r2
 400f168:	2200032e 	bgeu	r4,r8,400f178 <__copybits+0x78>
 400f16c:	20000015 	stw	zero,0(r4)
 400f170:	21000104 	addi	r4,r4,4
 400f174:	223ffd36 	bltu	r4,r8,400f16c <__copybits+0x6c>
 400f178:	f800283a 	ret

0400f17c <__any_on>:
 400f17c:	21800417 	ldw	r6,16(r4)
 400f180:	2805d17a 	srai	r2,r5,5
 400f184:	20c00504 	addi	r3,r4,20
 400f188:	30800f0e 	bge	r6,r2,400f1c8 <__any_on+0x4c>
 400f18c:	3005883a 	mov	r2,r6
 400f190:	10800144 	addi	r2,r2,5
 400f194:	1085883a 	add	r2,r2,r2
 400f198:	1085883a 	add	r2,r2,r2
 400f19c:	2089883a 	add	r4,r4,r2
 400f1a0:	1900152e 	bgeu	r3,r4,400f1f8 <__any_on+0x7c>
 400f1a4:	20bfff17 	ldw	r2,-4(r4)
 400f1a8:	213fff04 	addi	r4,r4,-4
 400f1ac:	1000041e 	bne	r2,zero,400f1c0 <__any_on+0x44>
 400f1b0:	1900112e 	bgeu	r3,r4,400f1f8 <__any_on+0x7c>
 400f1b4:	213fff04 	addi	r4,r4,-4
 400f1b8:	20800017 	ldw	r2,0(r4)
 400f1bc:	103ffc26 	beq	r2,zero,400f1b0 <__any_on+0x34>
 400f1c0:	00800044 	movi	r2,1
 400f1c4:	f800283a 	ret
 400f1c8:	11bff10e 	bge	r2,r6,400f190 <__any_on+0x14>
 400f1cc:	294007cc 	andi	r5,r5,31
 400f1d0:	283fef26 	beq	r5,zero,400f190 <__any_on+0x14>
 400f1d4:	11800144 	addi	r6,r2,5
 400f1d8:	318d883a 	add	r6,r6,r6
 400f1dc:	318d883a 	add	r6,r6,r6
 400f1e0:	218d883a 	add	r6,r4,r6
 400f1e4:	31800017 	ldw	r6,0(r6)
 400f1e8:	314ed83a 	srl	r7,r6,r5
 400f1ec:	394a983a 	sll	r5,r7,r5
 400f1f0:	29bff31e 	bne	r5,r6,400f1c0 <__any_on+0x44>
 400f1f4:	003fe606 	br	400f190 <__any_on+0x14>
 400f1f8:	0005883a 	mov	r2,zero
 400f1fc:	f800283a 	ret

0400f200 <_realloc_r>:
 400f200:	defff504 	addi	sp,sp,-44
 400f204:	dd400615 	stw	r21,24(sp)
 400f208:	dc800315 	stw	r18,12(sp)
 400f20c:	dc000115 	stw	r16,4(sp)
 400f210:	dfc00a15 	stw	ra,40(sp)
 400f214:	df000915 	stw	fp,36(sp)
 400f218:	ddc00815 	stw	r23,32(sp)
 400f21c:	dd800715 	stw	r22,28(sp)
 400f220:	dd000515 	stw	r20,20(sp)
 400f224:	dcc00415 	stw	r19,16(sp)
 400f228:	dc400215 	stw	r17,8(sp)
 400f22c:	2821883a 	mov	r16,r5
 400f230:	202b883a 	mov	r21,r4
 400f234:	3025883a 	mov	r18,r6
 400f238:	28009626 	beq	r5,zero,400f494 <_realloc_r+0x294>
 400f23c:	40116440 	call	4011644 <__malloc_lock>
 400f240:	80bfff17 	ldw	r2,-4(r16)
 400f244:	04ffff04 	movi	r19,-4
 400f248:	90c002c4 	addi	r3,r18,11
 400f24c:	01000584 	movi	r4,22
 400f250:	85bffe04 	addi	r22,r16,-8
 400f254:	14e6703a 	and	r19,r2,r19
 400f258:	20c0372e 	bgeu	r4,r3,400f338 <_realloc_r+0x138>
 400f25c:	047ffe04 	movi	r17,-8
 400f260:	1c62703a 	and	r17,r3,r17
 400f264:	8807883a 	mov	r3,r17
 400f268:	88005a16 	blt	r17,zero,400f3d4 <_realloc_r+0x1d4>
 400f26c:	8c805936 	bltu	r17,r18,400f3d4 <_realloc_r+0x1d4>
 400f270:	98c0340e 	bge	r19,r3,400f344 <_realloc_r+0x144>
 400f274:	070100f4 	movhi	fp,1027
 400f278:	e73ec404 	addi	fp,fp,-1264
 400f27c:	e1400217 	ldw	r5,8(fp)
 400f280:	b4c9883a 	add	r4,r22,r19
 400f284:	29009026 	beq	r5,r4,400f4c8 <_realloc_r+0x2c8>
 400f288:	21800117 	ldw	r6,4(r4)
 400f28c:	01ffff84 	movi	r7,-2
 400f290:	31ce703a 	and	r7,r6,r7
 400f294:	21cf883a 	add	r7,r4,r7
 400f298:	39c00117 	ldw	r7,4(r7)
 400f29c:	39c0004c 	andi	r7,r7,1
 400f2a0:	38004326 	beq	r7,zero,400f3b0 <_realloc_r+0x1b0>
 400f2a4:	000d883a 	mov	r6,zero
 400f2a8:	0009883a 	mov	r4,zero
 400f2ac:	1080004c 	andi	r2,r2,1
 400f2b0:	10005a1e 	bne	r2,zero,400f41c <_realloc_r+0x21c>
 400f2b4:	85fffe17 	ldw	r23,-8(r16)
 400f2b8:	00bfff04 	movi	r2,-4
 400f2bc:	b5efc83a 	sub	r23,r22,r23
 400f2c0:	b9c00117 	ldw	r7,4(r23)
 400f2c4:	388e703a 	and	r7,r7,r2
 400f2c8:	3ccf883a 	add	r7,r7,r19
 400f2cc:	20005226 	beq	r4,zero,400f418 <_realloc_r+0x218>
 400f2d0:	31e9883a 	add	r20,r6,r7
 400f2d4:	2140c726 	beq	r4,r5,400f5f4 <_realloc_r+0x3f4>
 400f2d8:	a0c04f16 	blt	r20,r3,400f418 <_realloc_r+0x218>
 400f2dc:	20800317 	ldw	r2,12(r4)
 400f2e0:	20c00217 	ldw	r3,8(r4)
 400f2e4:	99bfff04 	addi	r6,r19,-4
 400f2e8:	01000904 	movi	r4,36
 400f2ec:	18800315 	stw	r2,12(r3)
 400f2f0:	10c00215 	stw	r3,8(r2)
 400f2f4:	b8c00217 	ldw	r3,8(r23)
 400f2f8:	b8800317 	ldw	r2,12(r23)
 400f2fc:	bc800204 	addi	r18,r23,8
 400f300:	18800315 	stw	r2,12(r3)
 400f304:	10c00215 	stw	r3,8(r2)
 400f308:	2180ed36 	bltu	r4,r6,400f6c0 <_realloc_r+0x4c0>
 400f30c:	008004c4 	movi	r2,19
 400f310:	11809b2e 	bgeu	r2,r6,400f580 <_realloc_r+0x380>
 400f314:	80800017 	ldw	r2,0(r16)
 400f318:	b8800215 	stw	r2,8(r23)
 400f31c:	80800117 	ldw	r2,4(r16)
 400f320:	b8800315 	stw	r2,12(r23)
 400f324:	008006c4 	movi	r2,27
 400f328:	1180f936 	bltu	r2,r6,400f710 <_realloc_r+0x510>
 400f32c:	b8800404 	addi	r2,r23,16
 400f330:	80c00204 	addi	r3,r16,8
 400f334:	00009406 	br	400f588 <_realloc_r+0x388>
 400f338:	00c00404 	movi	r3,16
 400f33c:	1823883a 	mov	r17,r3
 400f340:	003fca06 	br	400f26c <_realloc_r+0x6c>
 400f344:	9829883a 	mov	r20,r19
 400f348:	a447c83a 	sub	r3,r20,r17
 400f34c:	010003c4 	movi	r4,15
 400f350:	1080004c 	andi	r2,r2,1
 400f354:	20c02336 	bltu	r4,r3,400f3e4 <_realloc_r+0x1e4>
 400f358:	1504b03a 	or	r2,r2,r20
 400f35c:	b0800115 	stw	r2,4(r22)
 400f360:	b52d883a 	add	r22,r22,r20
 400f364:	b0800117 	ldw	r2,4(r22)
 400f368:	10800054 	ori	r2,r2,1
 400f36c:	b0800115 	stw	r2,4(r22)
 400f370:	a809883a 	mov	r4,r21
 400f374:	40116640 	call	4011664 <__malloc_unlock>
 400f378:	8025883a 	mov	r18,r16
 400f37c:	9005883a 	mov	r2,r18
 400f380:	dfc00a17 	ldw	ra,40(sp)
 400f384:	df000917 	ldw	fp,36(sp)
 400f388:	ddc00817 	ldw	r23,32(sp)
 400f38c:	dd800717 	ldw	r22,28(sp)
 400f390:	dd400617 	ldw	r21,24(sp)
 400f394:	dd000517 	ldw	r20,20(sp)
 400f398:	dcc00417 	ldw	r19,16(sp)
 400f39c:	dc800317 	ldw	r18,12(sp)
 400f3a0:	dc400217 	ldw	r17,8(sp)
 400f3a4:	dc000117 	ldw	r16,4(sp)
 400f3a8:	dec00b04 	addi	sp,sp,44
 400f3ac:	f800283a 	ret
 400f3b0:	01ffff04 	movi	r7,-4
 400f3b4:	31cc703a 	and	r6,r6,r7
 400f3b8:	34e9883a 	add	r20,r6,r19
 400f3bc:	a0ffbb16 	blt	r20,r3,400f2ac <_realloc_r+0xac>
 400f3c0:	20c00317 	ldw	r3,12(r4)
 400f3c4:	21000217 	ldw	r4,8(r4)
 400f3c8:	20c00315 	stw	r3,12(r4)
 400f3cc:	19000215 	stw	r4,8(r3)
 400f3d0:	003fdd06 	br	400f348 <_realloc_r+0x148>
 400f3d4:	00800304 	movi	r2,12
 400f3d8:	a8800015 	stw	r2,0(r21)
 400f3dc:	0025883a 	mov	r18,zero
 400f3e0:	003fe606 	br	400f37c <_realloc_r+0x17c>
 400f3e4:	1444b03a 	or	r2,r2,r17
 400f3e8:	b0800115 	stw	r2,4(r22)
 400f3ec:	b44b883a 	add	r5,r22,r17
 400f3f0:	18800054 	ori	r2,r3,1
 400f3f4:	28800115 	stw	r2,4(r5)
 400f3f8:	28c7883a 	add	r3,r5,r3
 400f3fc:	18800117 	ldw	r2,4(r3)
 400f400:	a809883a 	mov	r4,r21
 400f404:	29400204 	addi	r5,r5,8
 400f408:	10800054 	ori	r2,r2,1
 400f40c:	18800115 	stw	r2,4(r3)
 400f410:	400d4a00 	call	400d4a0 <_free_r>
 400f414:	003fd606 	br	400f370 <_realloc_r+0x170>
 400f418:	38c0330e 	bge	r7,r3,400f4e8 <_realloc_r+0x2e8>
 400f41c:	900b883a 	mov	r5,r18
 400f420:	a809883a 	mov	r4,r21
 400f424:	40089000 	call	4008900 <_malloc_r>
 400f428:	1025883a 	mov	r18,r2
 400f42c:	10001626 	beq	r2,zero,400f488 <_realloc_r+0x288>
 400f430:	80bfff17 	ldw	r2,-4(r16)
 400f434:	00ffff84 	movi	r3,-2
 400f438:	913ffe04 	addi	r4,r18,-8
 400f43c:	10c6703a 	and	r3,r2,r3
 400f440:	b0c7883a 	add	r3,r22,r3
 400f444:	20c09926 	beq	r4,r3,400f6ac <_realloc_r+0x4ac>
 400f448:	99bfff04 	addi	r6,r19,-4
 400f44c:	00800904 	movi	r2,36
 400f450:	11806436 	bltu	r2,r6,400f5e4 <_realloc_r+0x3e4>
 400f454:	00c004c4 	movi	r3,19
 400f458:	19804036 	bltu	r3,r6,400f55c <_realloc_r+0x35c>
 400f45c:	9005883a 	mov	r2,r18
 400f460:	8007883a 	mov	r3,r16
 400f464:	19000017 	ldw	r4,0(r3)
 400f468:	11000015 	stw	r4,0(r2)
 400f46c:	19000117 	ldw	r4,4(r3)
 400f470:	11000115 	stw	r4,4(r2)
 400f474:	18c00217 	ldw	r3,8(r3)
 400f478:	10c00215 	stw	r3,8(r2)
 400f47c:	a809883a 	mov	r4,r21
 400f480:	800b883a 	mov	r5,r16
 400f484:	400d4a00 	call	400d4a0 <_free_r>
 400f488:	a809883a 	mov	r4,r21
 400f48c:	40116640 	call	4011664 <__malloc_unlock>
 400f490:	003fba06 	br	400f37c <_realloc_r+0x17c>
 400f494:	300b883a 	mov	r5,r6
 400f498:	dfc00a17 	ldw	ra,40(sp)
 400f49c:	df000917 	ldw	fp,36(sp)
 400f4a0:	ddc00817 	ldw	r23,32(sp)
 400f4a4:	dd800717 	ldw	r22,28(sp)
 400f4a8:	dd400617 	ldw	r21,24(sp)
 400f4ac:	dd000517 	ldw	r20,20(sp)
 400f4b0:	dcc00417 	ldw	r19,16(sp)
 400f4b4:	dc800317 	ldw	r18,12(sp)
 400f4b8:	dc400217 	ldw	r17,8(sp)
 400f4bc:	dc000117 	ldw	r16,4(sp)
 400f4c0:	dec00b04 	addi	sp,sp,44
 400f4c4:	40089001 	jmpi	4008900 <_malloc_r>
 400f4c8:	29800117 	ldw	r6,4(r5)
 400f4cc:	013fff04 	movi	r4,-4
 400f4d0:	89c00404 	addi	r7,r17,16
 400f4d4:	310c703a 	and	r6,r6,r4
 400f4d8:	34c9883a 	add	r4,r6,r19
 400f4dc:	21c0340e 	bge	r4,r7,400f5b0 <_realloc_r+0x3b0>
 400f4e0:	2809883a 	mov	r4,r5
 400f4e4:	003f7106 	br	400f2ac <_realloc_r+0xac>
 400f4e8:	b8800317 	ldw	r2,12(r23)
 400f4ec:	b8c00217 	ldw	r3,8(r23)
 400f4f0:	99bfff04 	addi	r6,r19,-4
 400f4f4:	01000904 	movi	r4,36
 400f4f8:	18800315 	stw	r2,12(r3)
 400f4fc:	10c00215 	stw	r3,8(r2)
 400f500:	bc800204 	addi	r18,r23,8
 400f504:	21807836 	bltu	r4,r6,400f6e8 <_realloc_r+0x4e8>
 400f508:	008004c4 	movi	r2,19
 400f50c:	1180732e 	bgeu	r2,r6,400f6dc <_realloc_r+0x4dc>
 400f510:	80800017 	ldw	r2,0(r16)
 400f514:	b8800215 	stw	r2,8(r23)
 400f518:	80800117 	ldw	r2,4(r16)
 400f51c:	b8800315 	stw	r2,12(r23)
 400f520:	008006c4 	movi	r2,27
 400f524:	11808936 	bltu	r2,r6,400f74c <_realloc_r+0x54c>
 400f528:	b8800404 	addi	r2,r23,16
 400f52c:	80c00204 	addi	r3,r16,8
 400f530:	19000017 	ldw	r4,0(r3)
 400f534:	9021883a 	mov	r16,r18
 400f538:	3829883a 	mov	r20,r7
 400f53c:	11000015 	stw	r4,0(r2)
 400f540:	19000117 	ldw	r4,4(r3)
 400f544:	b82d883a 	mov	r22,r23
 400f548:	11000115 	stw	r4,4(r2)
 400f54c:	18c00217 	ldw	r3,8(r3)
 400f550:	10c00215 	stw	r3,8(r2)
 400f554:	b8800117 	ldw	r2,4(r23)
 400f558:	003f7b06 	br	400f348 <_realloc_r+0x148>
 400f55c:	80c00017 	ldw	r3,0(r16)
 400f560:	90c00015 	stw	r3,0(r18)
 400f564:	80c00117 	ldw	r3,4(r16)
 400f568:	90c00115 	stw	r3,4(r18)
 400f56c:	00c006c4 	movi	r3,27
 400f570:	19804636 	bltu	r3,r6,400f68c <_realloc_r+0x48c>
 400f574:	90800204 	addi	r2,r18,8
 400f578:	80c00204 	addi	r3,r16,8
 400f57c:	003fb906 	br	400f464 <_realloc_r+0x264>
 400f580:	9005883a 	mov	r2,r18
 400f584:	8007883a 	mov	r3,r16
 400f588:	19000017 	ldw	r4,0(r3)
 400f58c:	9021883a 	mov	r16,r18
 400f590:	b82d883a 	mov	r22,r23
 400f594:	11000015 	stw	r4,0(r2)
 400f598:	19000117 	ldw	r4,4(r3)
 400f59c:	11000115 	stw	r4,4(r2)
 400f5a0:	18c00217 	ldw	r3,8(r3)
 400f5a4:	10c00215 	stw	r3,8(r2)
 400f5a8:	b8800117 	ldw	r2,4(r23)
 400f5ac:	003f6606 	br	400f348 <_realloc_r+0x148>
 400f5b0:	2445c83a 	sub	r2,r4,r17
 400f5b4:	b46d883a 	add	r22,r22,r17
 400f5b8:	10800054 	ori	r2,r2,1
 400f5bc:	b0800115 	stw	r2,4(r22)
 400f5c0:	80bfff17 	ldw	r2,-4(r16)
 400f5c4:	a809883a 	mov	r4,r21
 400f5c8:	e5800215 	stw	r22,8(fp)
 400f5cc:	1080004c 	andi	r2,r2,1
 400f5d0:	88a2b03a 	or	r17,r17,r2
 400f5d4:	847fff15 	stw	r17,-4(r16)
 400f5d8:	40116640 	call	4011664 <__malloc_unlock>
 400f5dc:	8025883a 	mov	r18,r16
 400f5e0:	003f6606 	br	400f37c <_realloc_r+0x17c>
 400f5e4:	9009883a 	mov	r4,r18
 400f5e8:	800b883a 	mov	r5,r16
 400f5ec:	400e1300 	call	400e130 <memmove>
 400f5f0:	003fa206 	br	400f47c <_realloc_r+0x27c>
 400f5f4:	88800404 	addi	r2,r17,16
 400f5f8:	a0bf8716 	blt	r20,r2,400f418 <_realloc_r+0x218>
 400f5fc:	b8800317 	ldw	r2,12(r23)
 400f600:	b8c00217 	ldw	r3,8(r23)
 400f604:	99bfff04 	addi	r6,r19,-4
 400f608:	01000904 	movi	r4,36
 400f60c:	18800315 	stw	r2,12(r3)
 400f610:	10c00215 	stw	r3,8(r2)
 400f614:	bc800204 	addi	r18,r23,8
 400f618:	21806536 	bltu	r4,r6,400f7b0 <_realloc_r+0x5b0>
 400f61c:	008004c4 	movi	r2,19
 400f620:	1180592e 	bgeu	r2,r6,400f788 <_realloc_r+0x588>
 400f624:	80800017 	ldw	r2,0(r16)
 400f628:	b8800215 	stw	r2,8(r23)
 400f62c:	80800117 	ldw	r2,4(r16)
 400f630:	b8800315 	stw	r2,12(r23)
 400f634:	008006c4 	movi	r2,27
 400f638:	11806136 	bltu	r2,r6,400f7c0 <_realloc_r+0x5c0>
 400f63c:	b8800404 	addi	r2,r23,16
 400f640:	80c00204 	addi	r3,r16,8
 400f644:	19000017 	ldw	r4,0(r3)
 400f648:	11000015 	stw	r4,0(r2)
 400f64c:	19000117 	ldw	r4,4(r3)
 400f650:	11000115 	stw	r4,4(r2)
 400f654:	18c00217 	ldw	r3,8(r3)
 400f658:	10c00215 	stw	r3,8(r2)
 400f65c:	a447c83a 	sub	r3,r20,r17
 400f660:	bc45883a 	add	r2,r23,r17
 400f664:	18c00054 	ori	r3,r3,1
 400f668:	10c00115 	stw	r3,4(r2)
 400f66c:	b8c00117 	ldw	r3,4(r23)
 400f670:	e0800215 	stw	r2,8(fp)
 400f674:	a809883a 	mov	r4,r21
 400f678:	1880004c 	andi	r2,r3,1
 400f67c:	88a2b03a 	or	r17,r17,r2
 400f680:	bc400115 	stw	r17,4(r23)
 400f684:	40116640 	call	4011664 <__malloc_unlock>
 400f688:	003f3c06 	br	400f37c <_realloc_r+0x17c>
 400f68c:	80c00217 	ldw	r3,8(r16)
 400f690:	90c00215 	stw	r3,8(r18)
 400f694:	80c00317 	ldw	r3,12(r16)
 400f698:	90c00315 	stw	r3,12(r18)
 400f69c:	30802426 	beq	r6,r2,400f730 <_realloc_r+0x530>
 400f6a0:	90800404 	addi	r2,r18,16
 400f6a4:	80c00404 	addi	r3,r16,16
 400f6a8:	003f6e06 	br	400f464 <_realloc_r+0x264>
 400f6ac:	953fff17 	ldw	r20,-4(r18)
 400f6b0:	00ffff04 	movi	r3,-4
 400f6b4:	a0e8703a 	and	r20,r20,r3
 400f6b8:	a4e9883a 	add	r20,r20,r19
 400f6bc:	003f2206 	br	400f348 <_realloc_r+0x148>
 400f6c0:	800b883a 	mov	r5,r16
 400f6c4:	9009883a 	mov	r4,r18
 400f6c8:	400e1300 	call	400e130 <memmove>
 400f6cc:	9021883a 	mov	r16,r18
 400f6d0:	b8800117 	ldw	r2,4(r23)
 400f6d4:	b82d883a 	mov	r22,r23
 400f6d8:	003f1b06 	br	400f348 <_realloc_r+0x148>
 400f6dc:	9005883a 	mov	r2,r18
 400f6e0:	8007883a 	mov	r3,r16
 400f6e4:	003f9206 	br	400f530 <_realloc_r+0x330>
 400f6e8:	800b883a 	mov	r5,r16
 400f6ec:	9009883a 	mov	r4,r18
 400f6f0:	d9c00015 	stw	r7,0(sp)
 400f6f4:	400e1300 	call	400e130 <memmove>
 400f6f8:	d9c00017 	ldw	r7,0(sp)
 400f6fc:	9021883a 	mov	r16,r18
 400f700:	b8800117 	ldw	r2,4(r23)
 400f704:	3829883a 	mov	r20,r7
 400f708:	b82d883a 	mov	r22,r23
 400f70c:	003f0e06 	br	400f348 <_realloc_r+0x148>
 400f710:	80800217 	ldw	r2,8(r16)
 400f714:	b8800415 	stw	r2,16(r23)
 400f718:	80800317 	ldw	r2,12(r16)
 400f71c:	b8800515 	stw	r2,20(r23)
 400f720:	31001226 	beq	r6,r4,400f76c <_realloc_r+0x56c>
 400f724:	b8800604 	addi	r2,r23,24
 400f728:	80c00404 	addi	r3,r16,16
 400f72c:	003f9606 	br	400f588 <_realloc_r+0x388>
 400f730:	81000417 	ldw	r4,16(r16)
 400f734:	90800604 	addi	r2,r18,24
 400f738:	80c00604 	addi	r3,r16,24
 400f73c:	91000415 	stw	r4,16(r18)
 400f740:	81000517 	ldw	r4,20(r16)
 400f744:	91000515 	stw	r4,20(r18)
 400f748:	003f4606 	br	400f464 <_realloc_r+0x264>
 400f74c:	80800217 	ldw	r2,8(r16)
 400f750:	b8800415 	stw	r2,16(r23)
 400f754:	80800317 	ldw	r2,12(r16)
 400f758:	b8800515 	stw	r2,20(r23)
 400f75c:	31000d26 	beq	r6,r4,400f794 <_realloc_r+0x594>
 400f760:	b8800604 	addi	r2,r23,24
 400f764:	80c00404 	addi	r3,r16,16
 400f768:	003f7106 	br	400f530 <_realloc_r+0x330>
 400f76c:	81000417 	ldw	r4,16(r16)
 400f770:	b8800804 	addi	r2,r23,32
 400f774:	80c00604 	addi	r3,r16,24
 400f778:	b9000615 	stw	r4,24(r23)
 400f77c:	81000517 	ldw	r4,20(r16)
 400f780:	b9000715 	stw	r4,28(r23)
 400f784:	003f8006 	br	400f588 <_realloc_r+0x388>
 400f788:	9005883a 	mov	r2,r18
 400f78c:	8007883a 	mov	r3,r16
 400f790:	003fac06 	br	400f644 <_realloc_r+0x444>
 400f794:	81000417 	ldw	r4,16(r16)
 400f798:	b8800804 	addi	r2,r23,32
 400f79c:	80c00604 	addi	r3,r16,24
 400f7a0:	b9000615 	stw	r4,24(r23)
 400f7a4:	81000517 	ldw	r4,20(r16)
 400f7a8:	b9000715 	stw	r4,28(r23)
 400f7ac:	003f6006 	br	400f530 <_realloc_r+0x330>
 400f7b0:	9009883a 	mov	r4,r18
 400f7b4:	800b883a 	mov	r5,r16
 400f7b8:	400e1300 	call	400e130 <memmove>
 400f7bc:	003fa706 	br	400f65c <_realloc_r+0x45c>
 400f7c0:	80800217 	ldw	r2,8(r16)
 400f7c4:	b8800415 	stw	r2,16(r23)
 400f7c8:	80800317 	ldw	r2,12(r16)
 400f7cc:	b8800515 	stw	r2,20(r23)
 400f7d0:	31000326 	beq	r6,r4,400f7e0 <_realloc_r+0x5e0>
 400f7d4:	b8800604 	addi	r2,r23,24
 400f7d8:	80c00404 	addi	r3,r16,16
 400f7dc:	003f9906 	br	400f644 <_realloc_r+0x444>
 400f7e0:	81000417 	ldw	r4,16(r16)
 400f7e4:	b8800804 	addi	r2,r23,32
 400f7e8:	80c00604 	addi	r3,r16,24
 400f7ec:	b9000615 	stw	r4,24(r23)
 400f7f0:	81000517 	ldw	r4,20(r16)
 400f7f4:	b9000715 	stw	r4,28(r23)
 400f7f8:	003f9206 	br	400f644 <_realloc_r+0x444>

0400f7fc <__isinfd>:
 400f7fc:	0105c83a 	sub	r2,zero,r4
 400f800:	1108b03a 	or	r4,r2,r4
 400f804:	2004d7fa 	srli	r2,r4,31
 400f808:	00e00034 	movhi	r3,32768
 400f80c:	18ffffc4 	addi	r3,r3,-1
 400f810:	28ca703a 	and	r5,r5,r3
 400f814:	1144b03a 	or	r2,r2,r5
 400f818:	00dffc34 	movhi	r3,32752
 400f81c:	1885c83a 	sub	r2,r3,r2
 400f820:	0087c83a 	sub	r3,zero,r2
 400f824:	1884b03a 	or	r2,r3,r2
 400f828:	1005d7fa 	srai	r2,r2,31
 400f82c:	10800044 	addi	r2,r2,1
 400f830:	f800283a 	ret

0400f834 <__sread>:
 400f834:	defffe04 	addi	sp,sp,-8
 400f838:	dc000015 	stw	r16,0(sp)
 400f83c:	2821883a 	mov	r16,r5
 400f840:	2940038f 	ldh	r5,14(r5)
 400f844:	dfc00115 	stw	ra,4(sp)
 400f848:	400fe2c0 	call	400fe2c <_read_r>
 400f84c:	10000716 	blt	r2,zero,400f86c <__sread+0x38>
 400f850:	80c01417 	ldw	r3,80(r16)
 400f854:	1887883a 	add	r3,r3,r2
 400f858:	80c01415 	stw	r3,80(r16)
 400f85c:	dfc00117 	ldw	ra,4(sp)
 400f860:	dc000017 	ldw	r16,0(sp)
 400f864:	dec00204 	addi	sp,sp,8
 400f868:	f800283a 	ret
 400f86c:	80c0030b 	ldhu	r3,12(r16)
 400f870:	18fbffcc 	andi	r3,r3,61439
 400f874:	80c0030d 	sth	r3,12(r16)
 400f878:	dfc00117 	ldw	ra,4(sp)
 400f87c:	dc000017 	ldw	r16,0(sp)
 400f880:	dec00204 	addi	sp,sp,8
 400f884:	f800283a 	ret

0400f888 <__swrite>:
 400f888:	2880030b 	ldhu	r2,12(r5)
 400f88c:	defffb04 	addi	sp,sp,-20
 400f890:	dcc00315 	stw	r19,12(sp)
 400f894:	10c0400c 	andi	r3,r2,256
 400f898:	18ffffcc 	andi	r3,r3,65535
 400f89c:	18e0001c 	xori	r3,r3,32768
 400f8a0:	dc800215 	stw	r18,8(sp)
 400f8a4:	dc400115 	stw	r17,4(sp)
 400f8a8:	dc000015 	stw	r16,0(sp)
 400f8ac:	dfc00415 	stw	ra,16(sp)
 400f8b0:	18e00004 	addi	r3,r3,-32768
 400f8b4:	2821883a 	mov	r16,r5
 400f8b8:	2027883a 	mov	r19,r4
 400f8bc:	3025883a 	mov	r18,r6
 400f8c0:	3823883a 	mov	r17,r7
 400f8c4:	18000526 	beq	r3,zero,400f8dc <__swrite+0x54>
 400f8c8:	2940038f 	ldh	r5,14(r5)
 400f8cc:	000d883a 	mov	r6,zero
 400f8d0:	01c00084 	movi	r7,2
 400f8d4:	400fdc00 	call	400fdc0 <_lseek_r>
 400f8d8:	8080030b 	ldhu	r2,12(r16)
 400f8dc:	8140038f 	ldh	r5,14(r16)
 400f8e0:	10bbffcc 	andi	r2,r2,61439
 400f8e4:	9809883a 	mov	r4,r19
 400f8e8:	900d883a 	mov	r6,r18
 400f8ec:	880f883a 	mov	r7,r17
 400f8f0:	8080030d 	sth	r2,12(r16)
 400f8f4:	dfc00417 	ldw	ra,16(sp)
 400f8f8:	dcc00317 	ldw	r19,12(sp)
 400f8fc:	dc800217 	ldw	r18,8(sp)
 400f900:	dc400117 	ldw	r17,4(sp)
 400f904:	dc000017 	ldw	r16,0(sp)
 400f908:	dec00504 	addi	sp,sp,20
 400f90c:	400fa181 	jmpi	400fa18 <_write_r>

0400f910 <__sseek>:
 400f910:	defffe04 	addi	sp,sp,-8
 400f914:	dc000015 	stw	r16,0(sp)
 400f918:	2821883a 	mov	r16,r5
 400f91c:	2940038f 	ldh	r5,14(r5)
 400f920:	dfc00115 	stw	ra,4(sp)
 400f924:	400fdc00 	call	400fdc0 <_lseek_r>
 400f928:	00ffffc4 	movi	r3,-1
 400f92c:	10c00826 	beq	r2,r3,400f950 <__sseek+0x40>
 400f930:	80c0030b 	ldhu	r3,12(r16)
 400f934:	80801415 	stw	r2,80(r16)
 400f938:	18c40014 	ori	r3,r3,4096
 400f93c:	80c0030d 	sth	r3,12(r16)
 400f940:	dfc00117 	ldw	ra,4(sp)
 400f944:	dc000017 	ldw	r16,0(sp)
 400f948:	dec00204 	addi	sp,sp,8
 400f94c:	f800283a 	ret
 400f950:	80c0030b 	ldhu	r3,12(r16)
 400f954:	18fbffcc 	andi	r3,r3,61439
 400f958:	80c0030d 	sth	r3,12(r16)
 400f95c:	dfc00117 	ldw	ra,4(sp)
 400f960:	dc000017 	ldw	r16,0(sp)
 400f964:	dec00204 	addi	sp,sp,8
 400f968:	f800283a 	ret

0400f96c <__sclose>:
 400f96c:	2940038f 	ldh	r5,14(r5)
 400f970:	400fb401 	jmpi	400fb40 <_close_r>

0400f974 <strcmp>:
 400f974:	2904b03a 	or	r2,r5,r4
 400f978:	108000cc 	andi	r2,r2,3
 400f97c:	1000171e 	bne	r2,zero,400f9dc <strcmp+0x68>
 400f980:	20800017 	ldw	r2,0(r4)
 400f984:	28c00017 	ldw	r3,0(r5)
 400f988:	10c0141e 	bne	r2,r3,400f9dc <strcmp+0x68>
 400f98c:	027fbff4 	movhi	r9,65279
 400f990:	4a7fbfc4 	addi	r9,r9,-257
 400f994:	1247883a 	add	r3,r2,r9
 400f998:	0084303a 	nor	r2,zero,r2
 400f99c:	1884703a 	and	r2,r3,r2
 400f9a0:	02202074 	movhi	r8,32897
 400f9a4:	42202004 	addi	r8,r8,-32640
 400f9a8:	1204703a 	and	r2,r2,r8
 400f9ac:	10000226 	beq	r2,zero,400f9b8 <strcmp+0x44>
 400f9b0:	00001706 	br	400fa10 <strcmp+0x9c>
 400f9b4:	3000161e 	bne	r6,zero,400fa10 <strcmp+0x9c>
 400f9b8:	21000104 	addi	r4,r4,4
 400f9bc:	20800017 	ldw	r2,0(r4)
 400f9c0:	29400104 	addi	r5,r5,4
 400f9c4:	28c00017 	ldw	r3,0(r5)
 400f9c8:	124f883a 	add	r7,r2,r9
 400f9cc:	008c303a 	nor	r6,zero,r2
 400f9d0:	398c703a 	and	r6,r7,r6
 400f9d4:	320c703a 	and	r6,r6,r8
 400f9d8:	10fff626 	beq	r2,r3,400f9b4 <strcmp+0x40>
 400f9dc:	20800007 	ldb	r2,0(r4)
 400f9e0:	1000051e 	bne	r2,zero,400f9f8 <strcmp+0x84>
 400f9e4:	00000606 	br	400fa00 <strcmp+0x8c>
 400f9e8:	21000044 	addi	r4,r4,1
 400f9ec:	20800007 	ldb	r2,0(r4)
 400f9f0:	29400044 	addi	r5,r5,1
 400f9f4:	10000226 	beq	r2,zero,400fa00 <strcmp+0x8c>
 400f9f8:	28c00007 	ldb	r3,0(r5)
 400f9fc:	10fffa26 	beq	r2,r3,400f9e8 <strcmp+0x74>
 400fa00:	20c00003 	ldbu	r3,0(r4)
 400fa04:	28800003 	ldbu	r2,0(r5)
 400fa08:	1885c83a 	sub	r2,r3,r2
 400fa0c:	f800283a 	ret
 400fa10:	0005883a 	mov	r2,zero
 400fa14:	f800283a 	ret

0400fa18 <_write_r>:
 400fa18:	defffd04 	addi	sp,sp,-12
 400fa1c:	dc400115 	stw	r17,4(sp)
 400fa20:	dc000015 	stw	r16,0(sp)
 400fa24:	2023883a 	mov	r17,r4
 400fa28:	040100f4 	movhi	r16,1027
 400fa2c:	8411e504 	addi	r16,r16,18324
 400fa30:	2809883a 	mov	r4,r5
 400fa34:	300b883a 	mov	r5,r6
 400fa38:	380d883a 	mov	r6,r7
 400fa3c:	dfc00215 	stw	ra,8(sp)
 400fa40:	80000015 	stw	zero,0(r16)
 400fa44:	4011af00 	call	4011af0 <write>
 400fa48:	00ffffc4 	movi	r3,-1
 400fa4c:	10c00526 	beq	r2,r3,400fa64 <_write_r+0x4c>
 400fa50:	dfc00217 	ldw	ra,8(sp)
 400fa54:	dc400117 	ldw	r17,4(sp)
 400fa58:	dc000017 	ldw	r16,0(sp)
 400fa5c:	dec00304 	addi	sp,sp,12
 400fa60:	f800283a 	ret
 400fa64:	80c00017 	ldw	r3,0(r16)
 400fa68:	183ff926 	beq	r3,zero,400fa50 <_write_r+0x38>
 400fa6c:	88c00015 	stw	r3,0(r17)
 400fa70:	dfc00217 	ldw	ra,8(sp)
 400fa74:	dc400117 	ldw	r17,4(sp)
 400fa78:	dc000017 	ldw	r16,0(sp)
 400fa7c:	dec00304 	addi	sp,sp,12
 400fa80:	f800283a 	ret

0400fa84 <_calloc_r>:
 400fa84:	314b383a 	mul	r5,r6,r5
 400fa88:	defffe04 	addi	sp,sp,-8
 400fa8c:	dc000015 	stw	r16,0(sp)
 400fa90:	dfc00115 	stw	ra,4(sp)
 400fa94:	40089000 	call	4008900 <_malloc_r>
 400fa98:	1021883a 	mov	r16,r2
 400fa9c:	10000c26 	beq	r2,zero,400fad0 <_calloc_r+0x4c>
 400faa0:	11bfff17 	ldw	r6,-4(r2)
 400faa4:	00ffff04 	movi	r3,-4
 400faa8:	00800904 	movi	r2,36
 400faac:	30cc703a 	and	r6,r6,r3
 400fab0:	30cd883a 	add	r6,r6,r3
 400fab4:	11801436 	bltu	r2,r6,400fb08 <_calloc_r+0x84>
 400fab8:	00c004c4 	movi	r3,19
 400fabc:	19800936 	bltu	r3,r6,400fae4 <_calloc_r+0x60>
 400fac0:	8005883a 	mov	r2,r16
 400fac4:	10000015 	stw	zero,0(r2)
 400fac8:	10000115 	stw	zero,4(r2)
 400facc:	10000215 	stw	zero,8(r2)
 400fad0:	8005883a 	mov	r2,r16
 400fad4:	dfc00117 	ldw	ra,4(sp)
 400fad8:	dc000017 	ldw	r16,0(sp)
 400fadc:	dec00204 	addi	sp,sp,8
 400fae0:	f800283a 	ret
 400fae4:	80000015 	stw	zero,0(r16)
 400fae8:	80000115 	stw	zero,4(r16)
 400faec:	00c006c4 	movi	r3,27
 400faf0:	19800d2e 	bgeu	r3,r6,400fb28 <_calloc_r+0xa4>
 400faf4:	80000215 	stw	zero,8(r16)
 400faf8:	80000315 	stw	zero,12(r16)
 400fafc:	30800c26 	beq	r6,r2,400fb30 <_calloc_r+0xac>
 400fb00:	80800404 	addi	r2,r16,16
 400fb04:	003fef06 	br	400fac4 <_calloc_r+0x40>
 400fb08:	8009883a 	mov	r4,r16
 400fb0c:	000b883a 	mov	r5,zero
 400fb10:	400917c0 	call	400917c <memset>
 400fb14:	8005883a 	mov	r2,r16
 400fb18:	dfc00117 	ldw	ra,4(sp)
 400fb1c:	dc000017 	ldw	r16,0(sp)
 400fb20:	dec00204 	addi	sp,sp,8
 400fb24:	f800283a 	ret
 400fb28:	80800204 	addi	r2,r16,8
 400fb2c:	003fe506 	br	400fac4 <_calloc_r+0x40>
 400fb30:	80000415 	stw	zero,16(r16)
 400fb34:	80000515 	stw	zero,20(r16)
 400fb38:	80800604 	addi	r2,r16,24
 400fb3c:	003fe106 	br	400fac4 <_calloc_r+0x40>

0400fb40 <_close_r>:
 400fb40:	defffd04 	addi	sp,sp,-12
 400fb44:	dc400115 	stw	r17,4(sp)
 400fb48:	dc000015 	stw	r16,0(sp)
 400fb4c:	2023883a 	mov	r17,r4
 400fb50:	040100f4 	movhi	r16,1027
 400fb54:	8411e504 	addi	r16,r16,18324
 400fb58:	2809883a 	mov	r4,r5
 400fb5c:	dfc00215 	stw	ra,8(sp)
 400fb60:	80000015 	stw	zero,0(r16)
 400fb64:	4010e180 	call	4010e18 <close>
 400fb68:	00ffffc4 	movi	r3,-1
 400fb6c:	10c00526 	beq	r2,r3,400fb84 <_close_r+0x44>
 400fb70:	dfc00217 	ldw	ra,8(sp)
 400fb74:	dc400117 	ldw	r17,4(sp)
 400fb78:	dc000017 	ldw	r16,0(sp)
 400fb7c:	dec00304 	addi	sp,sp,12
 400fb80:	f800283a 	ret
 400fb84:	80c00017 	ldw	r3,0(r16)
 400fb88:	183ff926 	beq	r3,zero,400fb70 <_close_r+0x30>
 400fb8c:	88c00015 	stw	r3,0(r17)
 400fb90:	dfc00217 	ldw	ra,8(sp)
 400fb94:	dc400117 	ldw	r17,4(sp)
 400fb98:	dc000017 	ldw	r16,0(sp)
 400fb9c:	dec00304 	addi	sp,sp,12
 400fba0:	f800283a 	ret

0400fba4 <_fclose_r>:
 400fba4:	defffc04 	addi	sp,sp,-16
 400fba8:	dc400115 	stw	r17,4(sp)
 400fbac:	dc000015 	stw	r16,0(sp)
 400fbb0:	dfc00315 	stw	ra,12(sp)
 400fbb4:	dc800215 	stw	r18,8(sp)
 400fbb8:	2821883a 	mov	r16,r5
 400fbbc:	2023883a 	mov	r17,r4
 400fbc0:	28003426 	beq	r5,zero,400fc94 <_fclose_r+0xf0>
 400fbc4:	400d3240 	call	400d324 <__sfp_lock_acquire>
 400fbc8:	88000226 	beq	r17,zero,400fbd4 <_fclose_r+0x30>
 400fbcc:	88800e17 	ldw	r2,56(r17)
 400fbd0:	10003826 	beq	r2,zero,400fcb4 <_fclose_r+0x110>
 400fbd4:	8080030f 	ldh	r2,12(r16)
 400fbd8:	10002526 	beq	r2,zero,400fc70 <_fclose_r+0xcc>
 400fbdc:	8809883a 	mov	r4,r17
 400fbe0:	800b883a 	mov	r5,r16
 400fbe4:	400ce740 	call	400ce74 <_fflush_r>
 400fbe8:	1025883a 	mov	r18,r2
 400fbec:	80800b17 	ldw	r2,44(r16)
 400fbf0:	10000426 	beq	r2,zero,400fc04 <_fclose_r+0x60>
 400fbf4:	81400717 	ldw	r5,28(r16)
 400fbf8:	8809883a 	mov	r4,r17
 400fbfc:	103ee83a 	callr	r2
 400fc00:	10003516 	blt	r2,zero,400fcd8 <_fclose_r+0x134>
 400fc04:	8080030b 	ldhu	r2,12(r16)
 400fc08:	1080200c 	andi	r2,r2,128
 400fc0c:	10bfffcc 	andi	r2,r2,65535
 400fc10:	10a0001c 	xori	r2,r2,32768
 400fc14:	10a00004 	addi	r2,r2,-32768
 400fc18:	10002b1e 	bne	r2,zero,400fcc8 <_fclose_r+0x124>
 400fc1c:	81400c17 	ldw	r5,48(r16)
 400fc20:	28000526 	beq	r5,zero,400fc38 <_fclose_r+0x94>
 400fc24:	80801004 	addi	r2,r16,64
 400fc28:	28800226 	beq	r5,r2,400fc34 <_fclose_r+0x90>
 400fc2c:	8809883a 	mov	r4,r17
 400fc30:	400d4a00 	call	400d4a0 <_free_r>
 400fc34:	80000c15 	stw	zero,48(r16)
 400fc38:	81401117 	ldw	r5,68(r16)
 400fc3c:	28000326 	beq	r5,zero,400fc4c <_fclose_r+0xa8>
 400fc40:	8809883a 	mov	r4,r17
 400fc44:	400d4a00 	call	400d4a0 <_free_r>
 400fc48:	80001115 	stw	zero,68(r16)
 400fc4c:	8000030d 	sth	zero,12(r16)
 400fc50:	400d3280 	call	400d328 <__sfp_lock_release>
 400fc54:	9005883a 	mov	r2,r18
 400fc58:	dfc00317 	ldw	ra,12(sp)
 400fc5c:	dc800217 	ldw	r18,8(sp)
 400fc60:	dc400117 	ldw	r17,4(sp)
 400fc64:	dc000017 	ldw	r16,0(sp)
 400fc68:	dec00404 	addi	sp,sp,16
 400fc6c:	f800283a 	ret
 400fc70:	400d3280 	call	400d328 <__sfp_lock_release>
 400fc74:	0025883a 	mov	r18,zero
 400fc78:	9005883a 	mov	r2,r18
 400fc7c:	dfc00317 	ldw	ra,12(sp)
 400fc80:	dc800217 	ldw	r18,8(sp)
 400fc84:	dc400117 	ldw	r17,4(sp)
 400fc88:	dc000017 	ldw	r16,0(sp)
 400fc8c:	dec00404 	addi	sp,sp,16
 400fc90:	f800283a 	ret
 400fc94:	0025883a 	mov	r18,zero
 400fc98:	9005883a 	mov	r2,r18
 400fc9c:	dfc00317 	ldw	ra,12(sp)
 400fca0:	dc800217 	ldw	r18,8(sp)
 400fca4:	dc400117 	ldw	r17,4(sp)
 400fca8:	dc000017 	ldw	r16,0(sp)
 400fcac:	dec00404 	addi	sp,sp,16
 400fcb0:	f800283a 	ret
 400fcb4:	8809883a 	mov	r4,r17
 400fcb8:	400d11c0 	call	400d11c <__sinit>
 400fcbc:	8080030f 	ldh	r2,12(r16)
 400fcc0:	103fc61e 	bne	r2,zero,400fbdc <_fclose_r+0x38>
 400fcc4:	003fea06 	br	400fc70 <_fclose_r+0xcc>
 400fcc8:	81400417 	ldw	r5,16(r16)
 400fccc:	8809883a 	mov	r4,r17
 400fcd0:	400d4a00 	call	400d4a0 <_free_r>
 400fcd4:	003fd106 	br	400fc1c <_fclose_r+0x78>
 400fcd8:	04bfffc4 	movi	r18,-1
 400fcdc:	003fc906 	br	400fc04 <_fclose_r+0x60>

0400fce0 <fclose>:
 400fce0:	008100f4 	movhi	r2,1027
 400fce4:	10844f04 	addi	r2,r2,4412
 400fce8:	200b883a 	mov	r5,r4
 400fcec:	11000017 	ldw	r4,0(r2)
 400fcf0:	400fba41 	jmpi	400fba4 <_fclose_r>

0400fcf4 <_fstat_r>:
 400fcf4:	defffd04 	addi	sp,sp,-12
 400fcf8:	dc400115 	stw	r17,4(sp)
 400fcfc:	dc000015 	stw	r16,0(sp)
 400fd00:	2023883a 	mov	r17,r4
 400fd04:	040100f4 	movhi	r16,1027
 400fd08:	8411e504 	addi	r16,r16,18324
 400fd0c:	2809883a 	mov	r4,r5
 400fd10:	300b883a 	mov	r5,r6
 400fd14:	dfc00215 	stw	ra,8(sp)
 400fd18:	80000015 	stw	zero,0(r16)
 400fd1c:	4010f5c0 	call	4010f5c <fstat>
 400fd20:	00ffffc4 	movi	r3,-1
 400fd24:	10c00526 	beq	r2,r3,400fd3c <_fstat_r+0x48>
 400fd28:	dfc00217 	ldw	ra,8(sp)
 400fd2c:	dc400117 	ldw	r17,4(sp)
 400fd30:	dc000017 	ldw	r16,0(sp)
 400fd34:	dec00304 	addi	sp,sp,12
 400fd38:	f800283a 	ret
 400fd3c:	80c00017 	ldw	r3,0(r16)
 400fd40:	183ff926 	beq	r3,zero,400fd28 <_fstat_r+0x34>
 400fd44:	88c00015 	stw	r3,0(r17)
 400fd48:	dfc00217 	ldw	ra,8(sp)
 400fd4c:	dc400117 	ldw	r17,4(sp)
 400fd50:	dc000017 	ldw	r16,0(sp)
 400fd54:	dec00304 	addi	sp,sp,12
 400fd58:	f800283a 	ret

0400fd5c <_isatty_r>:
 400fd5c:	defffd04 	addi	sp,sp,-12
 400fd60:	dc400115 	stw	r17,4(sp)
 400fd64:	dc000015 	stw	r16,0(sp)
 400fd68:	2023883a 	mov	r17,r4
 400fd6c:	040100f4 	movhi	r16,1027
 400fd70:	8411e504 	addi	r16,r16,18324
 400fd74:	2809883a 	mov	r4,r5
 400fd78:	dfc00215 	stw	ra,8(sp)
 400fd7c:	80000015 	stw	zero,0(r16)
 400fd80:	40113200 	call	4011320 <isatty>
 400fd84:	00ffffc4 	movi	r3,-1
 400fd88:	10c00526 	beq	r2,r3,400fda0 <_isatty_r+0x44>
 400fd8c:	dfc00217 	ldw	ra,8(sp)
 400fd90:	dc400117 	ldw	r17,4(sp)
 400fd94:	dc000017 	ldw	r16,0(sp)
 400fd98:	dec00304 	addi	sp,sp,12
 400fd9c:	f800283a 	ret
 400fda0:	80c00017 	ldw	r3,0(r16)
 400fda4:	183ff926 	beq	r3,zero,400fd8c <_isatty_r+0x30>
 400fda8:	88c00015 	stw	r3,0(r17)
 400fdac:	dfc00217 	ldw	ra,8(sp)
 400fdb0:	dc400117 	ldw	r17,4(sp)
 400fdb4:	dc000017 	ldw	r16,0(sp)
 400fdb8:	dec00304 	addi	sp,sp,12
 400fdbc:	f800283a 	ret

0400fdc0 <_lseek_r>:
 400fdc0:	defffd04 	addi	sp,sp,-12
 400fdc4:	dc400115 	stw	r17,4(sp)
 400fdc8:	dc000015 	stw	r16,0(sp)
 400fdcc:	2023883a 	mov	r17,r4
 400fdd0:	040100f4 	movhi	r16,1027
 400fdd4:	8411e504 	addi	r16,r16,18324
 400fdd8:	2809883a 	mov	r4,r5
 400fddc:	300b883a 	mov	r5,r6
 400fde0:	380d883a 	mov	r6,r7
 400fde4:	dfc00215 	stw	ra,8(sp)
 400fde8:	80000015 	stw	zero,0(r16)
 400fdec:	40114fc0 	call	40114fc <lseek>
 400fdf0:	00ffffc4 	movi	r3,-1
 400fdf4:	10c00526 	beq	r2,r3,400fe0c <_lseek_r+0x4c>
 400fdf8:	dfc00217 	ldw	ra,8(sp)
 400fdfc:	dc400117 	ldw	r17,4(sp)
 400fe00:	dc000017 	ldw	r16,0(sp)
 400fe04:	dec00304 	addi	sp,sp,12
 400fe08:	f800283a 	ret
 400fe0c:	80c00017 	ldw	r3,0(r16)
 400fe10:	183ff926 	beq	r3,zero,400fdf8 <_lseek_r+0x38>
 400fe14:	88c00015 	stw	r3,0(r17)
 400fe18:	dfc00217 	ldw	ra,8(sp)
 400fe1c:	dc400117 	ldw	r17,4(sp)
 400fe20:	dc000017 	ldw	r16,0(sp)
 400fe24:	dec00304 	addi	sp,sp,12
 400fe28:	f800283a 	ret

0400fe2c <_read_r>:
 400fe2c:	defffd04 	addi	sp,sp,-12
 400fe30:	dc400115 	stw	r17,4(sp)
 400fe34:	dc000015 	stw	r16,0(sp)
 400fe38:	2023883a 	mov	r17,r4
 400fe3c:	040100f4 	movhi	r16,1027
 400fe40:	8411e504 	addi	r16,r16,18324
 400fe44:	2809883a 	mov	r4,r5
 400fe48:	300b883a 	mov	r5,r6
 400fe4c:	380d883a 	mov	r6,r7
 400fe50:	dfc00215 	stw	ra,8(sp)
 400fe54:	80000015 	stw	zero,0(r16)
 400fe58:	40116d40 	call	40116d4 <read>
 400fe5c:	00ffffc4 	movi	r3,-1
 400fe60:	10c00526 	beq	r2,r3,400fe78 <_read_r+0x4c>
 400fe64:	dfc00217 	ldw	ra,8(sp)
 400fe68:	dc400117 	ldw	r17,4(sp)
 400fe6c:	dc000017 	ldw	r16,0(sp)
 400fe70:	dec00304 	addi	sp,sp,12
 400fe74:	f800283a 	ret
 400fe78:	80c00017 	ldw	r3,0(r16)
 400fe7c:	183ff926 	beq	r3,zero,400fe64 <_read_r+0x38>
 400fe80:	88c00015 	stw	r3,0(r17)
 400fe84:	dfc00217 	ldw	ra,8(sp)
 400fe88:	dc400117 	ldw	r17,4(sp)
 400fe8c:	dc000017 	ldw	r16,0(sp)
 400fe90:	dec00304 	addi	sp,sp,12
 400fe94:	f800283a 	ret

0400fe98 <__udivdi3>:
 400fe98:	defff504 	addi	sp,sp,-44
 400fe9c:	dd000515 	stw	r20,20(sp)
 400fea0:	dcc00415 	stw	r19,16(sp)
 400fea4:	dc800315 	stw	r18,12(sp)
 400fea8:	dc400215 	stw	r17,8(sp)
 400feac:	dc000115 	stw	r16,4(sp)
 400feb0:	dfc00a15 	stw	ra,40(sp)
 400feb4:	df000915 	stw	fp,36(sp)
 400feb8:	ddc00815 	stw	r23,32(sp)
 400febc:	dd800715 	stw	r22,28(sp)
 400fec0:	dd400615 	stw	r21,24(sp)
 400fec4:	2025883a 	mov	r18,r4
 400fec8:	2823883a 	mov	r17,r5
 400fecc:	3021883a 	mov	r16,r6
 400fed0:	2027883a 	mov	r19,r4
 400fed4:	2829883a 	mov	r20,r5
 400fed8:	3800401e 	bne	r7,zero,400ffdc <__udivdi3+0x144>
 400fedc:	2980602e 	bgeu	r5,r6,4010060 <__udivdi3+0x1c8>
 400fee0:	00bfffd4 	movui	r2,65535
 400fee4:	1180aa36 	bltu	r2,r6,4010190 <__udivdi3+0x2f8>
 400fee8:	00803fc4 	movi	r2,255
 400feec:	11814436 	bltu	r2,r6,4010400 <__udivdi3+0x568>
 400fef0:	0005883a 	mov	r2,zero
 400fef4:	0007883a 	mov	r3,zero
 400fef8:	3084d83a 	srl	r2,r6,r2
 400fefc:	010100f4 	movhi	r4,1027
 400ff00:	21361604 	addi	r4,r4,-10152
 400ff04:	2085883a 	add	r2,r4,r2
 400ff08:	10800003 	ldbu	r2,0(r2)
 400ff0c:	10c7883a 	add	r3,r2,r3
 400ff10:	00800804 	movi	r2,32
 400ff14:	10c5c83a 	sub	r2,r2,r3
 400ff18:	10000526 	beq	r2,zero,400ff30 <__udivdi3+0x98>
 400ff1c:	88a2983a 	sll	r17,r17,r2
 400ff20:	90c6d83a 	srl	r3,r18,r3
 400ff24:	30a0983a 	sll	r16,r6,r2
 400ff28:	90a6983a 	sll	r19,r18,r2
 400ff2c:	88e8b03a 	or	r20,r17,r3
 400ff30:	8022d43a 	srli	r17,r16,16
 400ff34:	a009883a 	mov	r4,r20
 400ff38:	857fffcc 	andi	r21,r16,65535
 400ff3c:	880b883a 	mov	r5,r17
 400ff40:	40083340 	call	4008334 <__umodsi3>
 400ff44:	a009883a 	mov	r4,r20
 400ff48:	880b883a 	mov	r5,r17
 400ff4c:	102d883a 	mov	r22,r2
 400ff50:	400832c0 	call	400832c <__udivsi3>
 400ff54:	b02c943a 	slli	r22,r22,16
 400ff58:	9806d43a 	srli	r3,r19,16
 400ff5c:	1549383a 	mul	r4,r2,r21
 400ff60:	1025883a 	mov	r18,r2
 400ff64:	b0c6b03a 	or	r3,r22,r3
 400ff68:	1900052e 	bgeu	r3,r4,400ff80 <__udivdi3+0xe8>
 400ff6c:	1c07883a 	add	r3,r3,r16
 400ff70:	10bfffc4 	addi	r2,r2,-1
 400ff74:	1c000136 	bltu	r3,r16,400ff7c <__udivdi3+0xe4>
 400ff78:	19013636 	bltu	r3,r4,4010454 <__udivdi3+0x5bc>
 400ff7c:	1025883a 	mov	r18,r2
 400ff80:	1929c83a 	sub	r20,r3,r4
 400ff84:	a009883a 	mov	r4,r20
 400ff88:	880b883a 	mov	r5,r17
 400ff8c:	40083340 	call	4008334 <__umodsi3>
 400ff90:	102d883a 	mov	r22,r2
 400ff94:	a009883a 	mov	r4,r20
 400ff98:	880b883a 	mov	r5,r17
 400ff9c:	400832c0 	call	400832c <__udivsi3>
 400ffa0:	b02c943a 	slli	r22,r22,16
 400ffa4:	156b383a 	mul	r21,r2,r21
 400ffa8:	9cffffcc 	andi	r19,r19,65535
 400ffac:	b4e6b03a 	or	r19,r22,r19
 400ffb0:	1009883a 	mov	r4,r2
 400ffb4:	9d40052e 	bgeu	r19,r21,400ffcc <__udivdi3+0x134>
 400ffb8:	9c27883a 	add	r19,r19,r16
 400ffbc:	10bfffc4 	addi	r2,r2,-1
 400ffc0:	9c00f736 	bltu	r19,r16,40103a0 <__udivdi3+0x508>
 400ffc4:	9d40f62e 	bgeu	r19,r21,40103a0 <__udivdi3+0x508>
 400ffc8:	213fff84 	addi	r4,r4,-2
 400ffcc:	9004943a 	slli	r2,r18,16
 400ffd0:	0007883a 	mov	r3,zero
 400ffd4:	2084b03a 	or	r2,r4,r2
 400ffd8:	00001506 	br	4010030 <__udivdi3+0x198>
 400ffdc:	29c06536 	bltu	r5,r7,4010174 <__udivdi3+0x2dc>
 400ffe0:	00bfffd4 	movui	r2,65535
 400ffe4:	11c0652e 	bgeu	r2,r7,401017c <__udivdi3+0x2e4>
 400ffe8:	00804034 	movhi	r2,256
 400ffec:	10bfffc4 	addi	r2,r2,-1
 400fff0:	11c0f736 	bltu	r2,r7,40103d0 <__udivdi3+0x538>
 400fff4:	00c00404 	movi	r3,16
 400fff8:	180b883a 	mov	r5,r3
 400fffc:	38c6d83a 	srl	r3,r7,r3
 4010000:	010100f4 	movhi	r4,1027
 4010004:	21361604 	addi	r4,r4,-10152
 4010008:	04000804 	movi	r16,32
 401000c:	20c7883a 	add	r3,r4,r3
 4010010:	18800003 	ldbu	r2,0(r3)
 4010014:	1145883a 	add	r2,r2,r5
 4010018:	80a1c83a 	sub	r16,r16,r2
 401001c:	8000691e 	bne	r16,zero,40101c4 <__udivdi3+0x32c>
 4010020:	0007883a 	mov	r3,zero
 4010024:	3c406536 	bltu	r7,r17,40101bc <__udivdi3+0x324>
 4010028:	9180642e 	bgeu	r18,r6,40101bc <__udivdi3+0x324>
 401002c:	0005883a 	mov	r2,zero
 4010030:	dfc00a17 	ldw	ra,40(sp)
 4010034:	df000917 	ldw	fp,36(sp)
 4010038:	ddc00817 	ldw	r23,32(sp)
 401003c:	dd800717 	ldw	r22,28(sp)
 4010040:	dd400617 	ldw	r21,24(sp)
 4010044:	dd000517 	ldw	r20,20(sp)
 4010048:	dcc00417 	ldw	r19,16(sp)
 401004c:	dc800317 	ldw	r18,12(sp)
 4010050:	dc400217 	ldw	r17,8(sp)
 4010054:	dc000117 	ldw	r16,4(sp)
 4010058:	dec00b04 	addi	sp,sp,44
 401005c:	f800283a 	ret
 4010060:	3000041e 	bne	r6,zero,4010074 <__udivdi3+0x1dc>
 4010064:	01000044 	movi	r4,1
 4010068:	000b883a 	mov	r5,zero
 401006c:	400832c0 	call	400832c <__udivsi3>
 4010070:	1021883a 	mov	r16,r2
 4010074:	00bfffd4 	movui	r2,65535
 4010078:	14004b2e 	bgeu	r2,r16,40101a8 <__udivdi3+0x310>
 401007c:	00804034 	movhi	r2,256
 4010080:	10bfffc4 	addi	r2,r2,-1
 4010084:	1400d836 	bltu	r2,r16,40103e8 <__udivdi3+0x550>
 4010088:	00800404 	movi	r2,16
 401008c:	1007883a 	mov	r3,r2
 4010090:	8084d83a 	srl	r2,r16,r2
 4010094:	010100f4 	movhi	r4,1027
 4010098:	21361604 	addi	r4,r4,-10152
 401009c:	2085883a 	add	r2,r4,r2
 40100a0:	10800003 	ldbu	r2,0(r2)
 40100a4:	10c7883a 	add	r3,r2,r3
 40100a8:	00800804 	movi	r2,32
 40100ac:	10c5c83a 	sub	r2,r2,r3
 40100b0:	1000891e 	bne	r2,zero,40102d8 <__udivdi3+0x440>
 40100b4:	8028d43a 	srli	r20,r16,16
 40100b8:	8c23c83a 	sub	r17,r17,r16
 40100bc:	84bfffcc 	andi	r18,r16,65535
 40100c0:	00c00044 	movi	r3,1
 40100c4:	8809883a 	mov	r4,r17
 40100c8:	a00b883a 	mov	r5,r20
 40100cc:	d8c00015 	stw	r3,0(sp)
 40100d0:	40083340 	call	4008334 <__umodsi3>
 40100d4:	8809883a 	mov	r4,r17
 40100d8:	a00b883a 	mov	r5,r20
 40100dc:	102b883a 	mov	r21,r2
 40100e0:	400832c0 	call	400832c <__udivsi3>
 40100e4:	a82a943a 	slli	r21,r21,16
 40100e8:	9808d43a 	srli	r4,r19,16
 40100ec:	148b383a 	mul	r5,r2,r18
 40100f0:	1023883a 	mov	r17,r2
 40100f4:	a908b03a 	or	r4,r21,r4
 40100f8:	d8c00017 	ldw	r3,0(sp)
 40100fc:	2140052e 	bgeu	r4,r5,4010114 <__udivdi3+0x27c>
 4010100:	2409883a 	add	r4,r4,r16
 4010104:	10bfffc4 	addi	r2,r2,-1
 4010108:	24000136 	bltu	r4,r16,4010110 <__udivdi3+0x278>
 401010c:	2140ce36 	bltu	r4,r5,4010448 <__udivdi3+0x5b0>
 4010110:	1023883a 	mov	r17,r2
 4010114:	216bc83a 	sub	r21,r4,r5
 4010118:	a809883a 	mov	r4,r21
 401011c:	a00b883a 	mov	r5,r20
 4010120:	d8c00015 	stw	r3,0(sp)
 4010124:	40083340 	call	4008334 <__umodsi3>
 4010128:	102d883a 	mov	r22,r2
 401012c:	a809883a 	mov	r4,r21
 4010130:	a00b883a 	mov	r5,r20
 4010134:	400832c0 	call	400832c <__udivsi3>
 4010138:	b02c943a 	slli	r22,r22,16
 401013c:	14a5383a 	mul	r18,r2,r18
 4010140:	9cffffcc 	andi	r19,r19,65535
 4010144:	b4e6b03a 	or	r19,r22,r19
 4010148:	1009883a 	mov	r4,r2
 401014c:	d8c00017 	ldw	r3,0(sp)
 4010150:	9c80052e 	bgeu	r19,r18,4010168 <__udivdi3+0x2d0>
 4010154:	9c27883a 	add	r19,r19,r16
 4010158:	10bfffc4 	addi	r2,r2,-1
 401015c:	9c009236 	bltu	r19,r16,40103a8 <__udivdi3+0x510>
 4010160:	9c80912e 	bgeu	r19,r18,40103a8 <__udivdi3+0x510>
 4010164:	213fff84 	addi	r4,r4,-2
 4010168:	8804943a 	slli	r2,r17,16
 401016c:	2084b03a 	or	r2,r4,r2
 4010170:	003faf06 	br	4010030 <__udivdi3+0x198>
 4010174:	0007883a 	mov	r3,zero
 4010178:	003fac06 	br	401002c <__udivdi3+0x194>
 401017c:	00803fc4 	movi	r2,255
 4010180:	11c09636 	bltu	r2,r7,40103dc <__udivdi3+0x544>
 4010184:	0007883a 	mov	r3,zero
 4010188:	000b883a 	mov	r5,zero
 401018c:	003f9b06 	br	400fffc <__udivdi3+0x164>
 4010190:	00804034 	movhi	r2,256
 4010194:	10bfffc4 	addi	r2,r2,-1
 4010198:	11809636 	bltu	r2,r6,40103f4 <__udivdi3+0x55c>
 401019c:	00800404 	movi	r2,16
 40101a0:	1007883a 	mov	r3,r2
 40101a4:	003f5406 	br	400fef8 <__udivdi3+0x60>
 40101a8:	00803fc4 	movi	r2,255
 40101ac:	14009736 	bltu	r2,r16,401040c <__udivdi3+0x574>
 40101b0:	0005883a 	mov	r2,zero
 40101b4:	0007883a 	mov	r3,zero
 40101b8:	003fb506 	br	4010090 <__udivdi3+0x1f8>
 40101bc:	00800044 	movi	r2,1
 40101c0:	003f9b06 	br	4010030 <__udivdi3+0x198>
 40101c4:	3086d83a 	srl	r3,r6,r2
 40101c8:	3c0e983a 	sll	r7,r7,r16
 40101cc:	88aad83a 	srl	r21,r17,r2
 40101d0:	9084d83a 	srl	r2,r18,r2
 40101d4:	38e6b03a 	or	r19,r7,r3
 40101d8:	9828d43a 	srli	r20,r19,16
 40101dc:	8c22983a 	sll	r17,r17,r16
 40101e0:	a809883a 	mov	r4,r21
 40101e4:	a00b883a 	mov	r5,r20
 40101e8:	342c983a 	sll	r22,r6,r16
 40101ec:	88a2b03a 	or	r17,r17,r2
 40101f0:	40083340 	call	4008334 <__umodsi3>
 40101f4:	a809883a 	mov	r4,r21
 40101f8:	a00b883a 	mov	r5,r20
 40101fc:	1039883a 	mov	fp,r2
 4010200:	400832c0 	call	400832c <__udivsi3>
 4010204:	102b883a 	mov	r21,r2
 4010208:	9dffffcc 	andi	r23,r19,65535
 401020c:	e008943a 	slli	r4,fp,16
 4010210:	8804d43a 	srli	r2,r17,16
 4010214:	adcd383a 	mul	r6,r21,r23
 4010218:	2088b03a 	or	r4,r4,r2
 401021c:	2180042e 	bgeu	r4,r6,4010230 <__udivdi3+0x398>
 4010220:	24c9883a 	add	r4,r4,r19
 4010224:	a8bfffc4 	addi	r2,r21,-1
 4010228:	24c07f2e 	bgeu	r4,r19,4010428 <__udivdi3+0x590>
 401022c:	102b883a 	mov	r21,r2
 4010230:	21b9c83a 	sub	fp,r4,r6
 4010234:	e009883a 	mov	r4,fp
 4010238:	a00b883a 	mov	r5,r20
 401023c:	40083340 	call	4008334 <__umodsi3>
 4010240:	e009883a 	mov	r4,fp
 4010244:	a00b883a 	mov	r5,r20
 4010248:	d8800015 	stw	r2,0(sp)
 401024c:	400832c0 	call	400832c <__udivsi3>
 4010250:	d8c00017 	ldw	r3,0(sp)
 4010254:	15cb383a 	mul	r5,r2,r23
 4010258:	8c7fffcc 	andi	r17,r17,65535
 401025c:	1806943a 	slli	r3,r3,16
 4010260:	1009883a 	mov	r4,r2
 4010264:	1c46b03a 	or	r3,r3,r17
 4010268:	1940042e 	bgeu	r3,r5,401027c <__udivdi3+0x3e4>
 401026c:	1cc7883a 	add	r3,r3,r19
 4010270:	10bfffc4 	addi	r2,r2,-1
 4010274:	1cc0682e 	bgeu	r3,r19,4010418 <__udivdi3+0x580>
 4010278:	1009883a 	mov	r4,r2
 401027c:	a804943a 	slli	r2,r21,16
 4010280:	b1ffffcc 	andi	r7,r22,65535
 4010284:	b02cd43a 	srli	r22,r22,16
 4010288:	2084b03a 	or	r2,r4,r2
 401028c:	113fffcc 	andi	r4,r2,65535
 4010290:	100cd43a 	srli	r6,r2,16
 4010294:	21d1383a 	mul	r8,r4,r7
 4010298:	2589383a 	mul	r4,r4,r22
 401029c:	31cf383a 	mul	r7,r6,r7
 40102a0:	4012d43a 	srli	r9,r8,16
 40102a4:	1947c83a 	sub	r3,r3,r5
 40102a8:	3909883a 	add	r4,r7,r4
 40102ac:	2249883a 	add	r4,r4,r9
 40102b0:	35ad383a 	mul	r22,r6,r22
 40102b4:	21c0022e 	bgeu	r4,r7,40102c0 <__udivdi3+0x428>
 40102b8:	01400074 	movhi	r5,1
 40102bc:	b16d883a 	add	r22,r22,r5
 40102c0:	200ad43a 	srli	r5,r4,16
 40102c4:	b16d883a 	add	r22,r22,r5
 40102c8:	1d803e36 	bltu	r3,r22,40103c4 <__udivdi3+0x52c>
 40102cc:	1d803826 	beq	r3,r22,40103b0 <__udivdi3+0x518>
 40102d0:	0007883a 	mov	r3,zero
 40102d4:	003f5606 	br	4010030 <__udivdi3+0x198>
 40102d8:	80a0983a 	sll	r16,r16,r2
 40102dc:	88ead83a 	srl	r21,r17,r3
 40102e0:	90c6d83a 	srl	r3,r18,r3
 40102e4:	8028d43a 	srli	r20,r16,16
 40102e8:	88a2983a 	sll	r17,r17,r2
 40102ec:	a809883a 	mov	r4,r21
 40102f0:	a00b883a 	mov	r5,r20
 40102f4:	88ecb03a 	or	r22,r17,r3
 40102f8:	90a6983a 	sll	r19,r18,r2
 40102fc:	40083340 	call	4008334 <__umodsi3>
 4010300:	a809883a 	mov	r4,r21
 4010304:	a00b883a 	mov	r5,r20
 4010308:	1023883a 	mov	r17,r2
 401030c:	400832c0 	call	400832c <__udivsi3>
 4010310:	102b883a 	mov	r21,r2
 4010314:	84bfffcc 	andi	r18,r16,65535
 4010318:	8808943a 	slli	r4,r17,16
 401031c:	b004d43a 	srli	r2,r22,16
 4010320:	ac87383a 	mul	r3,r21,r18
 4010324:	2088b03a 	or	r4,r4,r2
 4010328:	20c0062e 	bgeu	r4,r3,4010344 <__udivdi3+0x4ac>
 401032c:	2409883a 	add	r4,r4,r16
 4010330:	a8bfffc4 	addi	r2,r21,-1
 4010334:	24004236 	bltu	r4,r16,4010440 <__udivdi3+0x5a8>
 4010338:	20c0412e 	bgeu	r4,r3,4010440 <__udivdi3+0x5a8>
 401033c:	ad7fff84 	addi	r21,r21,-2
 4010340:	2409883a 	add	r4,r4,r16
 4010344:	20efc83a 	sub	r23,r4,r3
 4010348:	b809883a 	mov	r4,r23
 401034c:	a00b883a 	mov	r5,r20
 4010350:	40083340 	call	4008334 <__umodsi3>
 4010354:	1023883a 	mov	r17,r2
 4010358:	a00b883a 	mov	r5,r20
 401035c:	b809883a 	mov	r4,r23
 4010360:	400832c0 	call	400832c <__udivsi3>
 4010364:	8822943a 	slli	r17,r17,16
 4010368:	148b383a 	mul	r5,r2,r18
 401036c:	b5bfffcc 	andi	r22,r22,65535
 4010370:	8da2b03a 	or	r17,r17,r22
 4010374:	8940062e 	bgeu	r17,r5,4010390 <__udivdi3+0x4f8>
 4010378:	8c23883a 	add	r17,r17,r16
 401037c:	10ffffc4 	addi	r3,r2,-1
 4010380:	8c002d36 	bltu	r17,r16,4010438 <__udivdi3+0x5a0>
 4010384:	89402c2e 	bgeu	r17,r5,4010438 <__udivdi3+0x5a0>
 4010388:	10bfff84 	addi	r2,r2,-2
 401038c:	8c23883a 	add	r17,r17,r16
 4010390:	a806943a 	slli	r3,r21,16
 4010394:	8963c83a 	sub	r17,r17,r5
 4010398:	10c6b03a 	or	r3,r2,r3
 401039c:	003f4906 	br	40100c4 <__udivdi3+0x22c>
 40103a0:	1009883a 	mov	r4,r2
 40103a4:	003f0906 	br	400ffcc <__udivdi3+0x134>
 40103a8:	1009883a 	mov	r4,r2
 40103ac:	003f6e06 	br	4010168 <__udivdi3+0x2d0>
 40103b0:	2008943a 	slli	r4,r4,16
 40103b4:	9420983a 	sll	r16,r18,r16
 40103b8:	423fffcc 	andi	r8,r8,65535
 40103bc:	2209883a 	add	r4,r4,r8
 40103c0:	813fc32e 	bgeu	r16,r4,40102d0 <__udivdi3+0x438>
 40103c4:	10bfffc4 	addi	r2,r2,-1
 40103c8:	0007883a 	mov	r3,zero
 40103cc:	003f1806 	br	4010030 <__udivdi3+0x198>
 40103d0:	00c00604 	movi	r3,24
 40103d4:	180b883a 	mov	r5,r3
 40103d8:	003f0806 	br	400fffc <__udivdi3+0x164>
 40103dc:	00c00204 	movi	r3,8
 40103e0:	180b883a 	mov	r5,r3
 40103e4:	003f0506 	br	400fffc <__udivdi3+0x164>
 40103e8:	00800604 	movi	r2,24
 40103ec:	1007883a 	mov	r3,r2
 40103f0:	003f2706 	br	4010090 <__udivdi3+0x1f8>
 40103f4:	00800604 	movi	r2,24
 40103f8:	1007883a 	mov	r3,r2
 40103fc:	003ebe06 	br	400fef8 <__udivdi3+0x60>
 4010400:	00800204 	movi	r2,8
 4010404:	1007883a 	mov	r3,r2
 4010408:	003ebb06 	br	400fef8 <__udivdi3+0x60>
 401040c:	00800204 	movi	r2,8
 4010410:	1007883a 	mov	r3,r2
 4010414:	003f1e06 	br	4010090 <__udivdi3+0x1f8>
 4010418:	197f972e 	bgeu	r3,r5,4010278 <__udivdi3+0x3e0>
 401041c:	213fff84 	addi	r4,r4,-2
 4010420:	1cc7883a 	add	r3,r3,r19
 4010424:	003f9506 	br	401027c <__udivdi3+0x3e4>
 4010428:	21bf802e 	bgeu	r4,r6,401022c <__udivdi3+0x394>
 401042c:	ad7fff84 	addi	r21,r21,-2
 4010430:	24c9883a 	add	r4,r4,r19
 4010434:	003f7e06 	br	4010230 <__udivdi3+0x398>
 4010438:	1805883a 	mov	r2,r3
 401043c:	003fd406 	br	4010390 <__udivdi3+0x4f8>
 4010440:	102b883a 	mov	r21,r2
 4010444:	003fbf06 	br	4010344 <__udivdi3+0x4ac>
 4010448:	8c7fff84 	addi	r17,r17,-2
 401044c:	2409883a 	add	r4,r4,r16
 4010450:	003f3006 	br	4010114 <__udivdi3+0x27c>
 4010454:	94bfff84 	addi	r18,r18,-2
 4010458:	1c07883a 	add	r3,r3,r16
 401045c:	003ec806 	br	400ff80 <__udivdi3+0xe8>

04010460 <__umoddi3>:
 4010460:	defff504 	addi	sp,sp,-44
 4010464:	dd000515 	stw	r20,20(sp)
 4010468:	dcc00415 	stw	r19,16(sp)
 401046c:	dc800315 	stw	r18,12(sp)
 4010470:	dc400215 	stw	r17,8(sp)
 4010474:	dc000115 	stw	r16,4(sp)
 4010478:	dfc00a15 	stw	ra,40(sp)
 401047c:	df000915 	stw	fp,36(sp)
 4010480:	ddc00815 	stw	r23,32(sp)
 4010484:	dd800715 	stw	r22,28(sp)
 4010488:	dd400615 	stw	r21,24(sp)
 401048c:	2025883a 	mov	r18,r4
 4010490:	2823883a 	mov	r17,r5
 4010494:	3021883a 	mov	r16,r6
 4010498:	2027883a 	mov	r19,r4
 401049c:	2829883a 	mov	r20,r5
 40104a0:	3800351e 	bne	r7,zero,4010578 <__umoddi3+0x118>
 40104a4:	29804d2e 	bgeu	r5,r6,40105dc <__umoddi3+0x17c>
 40104a8:	00bfffd4 	movui	r2,65535
 40104ac:	11809a36 	bltu	r2,r6,4010718 <__umoddi3+0x2b8>
 40104b0:	00803fc4 	movi	r2,255
 40104b4:	11813936 	bltu	r2,r6,401099c <__umoddi3+0x53c>
 40104b8:	0005883a 	mov	r2,zero
 40104bc:	0009883a 	mov	r4,zero
 40104c0:	3084d83a 	srl	r2,r6,r2
 40104c4:	00c100f4 	movhi	r3,1027
 40104c8:	18f61604 	addi	r3,r3,-10152
 40104cc:	05400804 	movi	r21,32
 40104d0:	1885883a 	add	r2,r3,r2
 40104d4:	10800003 	ldbu	r2,0(r2)
 40104d8:	1109883a 	add	r4,r2,r4
 40104dc:	a92bc83a 	sub	r21,r21,r4
 40104e0:	a800ec26 	beq	r21,zero,4010894 <__umoddi3+0x434>
 40104e4:	8d62983a 	sll	r17,r17,r21
 40104e8:	9108d83a 	srl	r4,r18,r4
 40104ec:	3560983a 	sll	r16,r6,r21
 40104f0:	9566983a 	sll	r19,r18,r21
 40104f4:	8928b03a 	or	r20,r17,r4
 40104f8:	8022d43a 	srli	r17,r16,16
 40104fc:	a009883a 	mov	r4,r20
 4010500:	84bfffcc 	andi	r18,r16,65535
 4010504:	880b883a 	mov	r5,r17
 4010508:	40083340 	call	4008334 <__umodsi3>
 401050c:	a009883a 	mov	r4,r20
 4010510:	880b883a 	mov	r5,r17
 4010514:	102d883a 	mov	r22,r2
 4010518:	400832c0 	call	400832c <__udivsi3>
 401051c:	b02c943a 	slli	r22,r22,16
 4010520:	9806d43a 	srli	r3,r19,16
 4010524:	1485383a 	mul	r2,r2,r18
 4010528:	b0c6b03a 	or	r3,r22,r3
 401052c:	1880042e 	bgeu	r3,r2,4010540 <__umoddi3+0xe0>
 4010530:	1c07883a 	add	r3,r3,r16
 4010534:	1c000236 	bltu	r3,r16,4010540 <__umoddi3+0xe0>
 4010538:	1880012e 	bgeu	r3,r2,4010540 <__umoddi3+0xe0>
 401053c:	1c07883a 	add	r3,r3,r16
 4010540:	18a9c83a 	sub	r20,r3,r2
 4010544:	a009883a 	mov	r4,r20
 4010548:	880b883a 	mov	r5,r17
 401054c:	40083340 	call	4008334 <__umodsi3>
 4010550:	102d883a 	mov	r22,r2
 4010554:	a009883a 	mov	r4,r20
 4010558:	880b883a 	mov	r5,r17
 401055c:	400832c0 	call	400832c <__udivsi3>
 4010560:	b02c943a 	slli	r22,r22,16
 4010564:	1485383a 	mul	r2,r2,r18
 4010568:	9cffffcc 	andi	r19,r19,65535
 401056c:	b4e6b03a 	or	r19,r22,r19
 4010570:	9880522e 	bgeu	r19,r2,40106bc <__umoddi3+0x25c>
 4010574:	00004d06 	br	40106ac <__umoddi3+0x24c>
 4010578:	29c05436 	bltu	r5,r7,40106cc <__umoddi3+0x26c>
 401057c:	00bfffd4 	movui	r2,65535
 4010580:	11c0602e 	bgeu	r2,r7,4010704 <__umoddi3+0x2a4>
 4010584:	00804034 	movhi	r2,256
 4010588:	10bfffc4 	addi	r2,r2,-1
 401058c:	11c0f736 	bltu	r2,r7,401096c <__umoddi3+0x50c>
 4010590:	00c00404 	movi	r3,16
 4010594:	1827883a 	mov	r19,r3
 4010598:	38c6d83a 	srl	r3,r7,r3
 401059c:	010100f4 	movhi	r4,1027
 40105a0:	21361604 	addi	r4,r4,-10152
 40105a4:	04000804 	movi	r16,32
 40105a8:	20c7883a 	add	r3,r4,r3
 40105ac:	18800003 	ldbu	r2,0(r3)
 40105b0:	14e7883a 	add	r19,r2,r19
 40105b4:	84e1c83a 	sub	r16,r16,r19
 40105b8:	8000621e 	bne	r16,zero,4010744 <__umoddi3+0x2e4>
 40105bc:	3c400136 	bltu	r7,r17,40105c4 <__umoddi3+0x164>
 40105c0:	91810336 	bltu	r18,r6,40109d0 <__umoddi3+0x570>
 40105c4:	9185c83a 	sub	r2,r18,r6
 40105c8:	89e3c83a 	sub	r17,r17,r7
 40105cc:	90a5803a 	cmpltu	r18,r18,r2
 40105d0:	8ca9c83a 	sub	r20,r17,r18
 40105d4:	a007883a 	mov	r3,r20
 40105d8:	00003e06 	br	40106d4 <__umoddi3+0x274>
 40105dc:	3000041e 	bne	r6,zero,40105f0 <__umoddi3+0x190>
 40105e0:	01000044 	movi	r4,1
 40105e4:	000b883a 	mov	r5,zero
 40105e8:	400832c0 	call	400832c <__udivsi3>
 40105ec:	1021883a 	mov	r16,r2
 40105f0:	00bfffd4 	movui	r2,65535
 40105f4:	14004e2e 	bgeu	r2,r16,4010730 <__umoddi3+0x2d0>
 40105f8:	00804034 	movhi	r2,256
 40105fc:	10bfffc4 	addi	r2,r2,-1
 4010600:	1400e336 	bltu	r2,r16,4010990 <__umoddi3+0x530>
 4010604:	00800404 	movi	r2,16
 4010608:	1007883a 	mov	r3,r2
 401060c:	8084d83a 	srl	r2,r16,r2
 4010610:	010100f4 	movhi	r4,1027
 4010614:	21361604 	addi	r4,r4,-10152
 4010618:	05400804 	movi	r21,32
 401061c:	2085883a 	add	r2,r4,r2
 4010620:	10800003 	ldbu	r2,0(r2)
 4010624:	10c7883a 	add	r3,r2,r3
 4010628:	a8ebc83a 	sub	r21,r21,r3
 401062c:	a8009b1e 	bne	r21,zero,401089c <__umoddi3+0x43c>
 4010630:	8028d43a 	srli	r20,r16,16
 4010634:	8c23c83a 	sub	r17,r17,r16
 4010638:	85bfffcc 	andi	r22,r16,65535
 401063c:	8809883a 	mov	r4,r17
 4010640:	a00b883a 	mov	r5,r20
 4010644:	40083340 	call	4008334 <__umodsi3>
 4010648:	8809883a 	mov	r4,r17
 401064c:	a00b883a 	mov	r5,r20
 4010650:	1025883a 	mov	r18,r2
 4010654:	400832c0 	call	400832c <__udivsi3>
 4010658:	9024943a 	slli	r18,r18,16
 401065c:	9806d43a 	srli	r3,r19,16
 4010660:	1585383a 	mul	r2,r2,r22
 4010664:	90c6b03a 	or	r3,r18,r3
 4010668:	1880032e 	bgeu	r3,r2,4010678 <__umoddi3+0x218>
 401066c:	1c07883a 	add	r3,r3,r16
 4010670:	1c000136 	bltu	r3,r16,4010678 <__umoddi3+0x218>
 4010674:	1880d436 	bltu	r3,r2,40109c8 <__umoddi3+0x568>
 4010678:	18a3c83a 	sub	r17,r3,r2
 401067c:	8809883a 	mov	r4,r17
 4010680:	a00b883a 	mov	r5,r20
 4010684:	40083340 	call	4008334 <__umodsi3>
 4010688:	1025883a 	mov	r18,r2
 401068c:	8809883a 	mov	r4,r17
 4010690:	a00b883a 	mov	r5,r20
 4010694:	400832c0 	call	400832c <__udivsi3>
 4010698:	9024943a 	slli	r18,r18,16
 401069c:	1585383a 	mul	r2,r2,r22
 40106a0:	9cffffcc 	andi	r19,r19,65535
 40106a4:	94e6b03a 	or	r19,r18,r19
 40106a8:	9880042e 	bgeu	r19,r2,40106bc <__umoddi3+0x25c>
 40106ac:	9c27883a 	add	r19,r19,r16
 40106b0:	9c000236 	bltu	r19,r16,40106bc <__umoddi3+0x25c>
 40106b4:	9880012e 	bgeu	r19,r2,40106bc <__umoddi3+0x25c>
 40106b8:	9c27883a 	add	r19,r19,r16
 40106bc:	98a7c83a 	sub	r19,r19,r2
 40106c0:	9d44d83a 	srl	r2,r19,r21
 40106c4:	0007883a 	mov	r3,zero
 40106c8:	00000206 	br	40106d4 <__umoddi3+0x274>
 40106cc:	2005883a 	mov	r2,r4
 40106d0:	2807883a 	mov	r3,r5
 40106d4:	dfc00a17 	ldw	ra,40(sp)
 40106d8:	df000917 	ldw	fp,36(sp)
 40106dc:	ddc00817 	ldw	r23,32(sp)
 40106e0:	dd800717 	ldw	r22,28(sp)
 40106e4:	dd400617 	ldw	r21,24(sp)
 40106e8:	dd000517 	ldw	r20,20(sp)
 40106ec:	dcc00417 	ldw	r19,16(sp)
 40106f0:	dc800317 	ldw	r18,12(sp)
 40106f4:	dc400217 	ldw	r17,8(sp)
 40106f8:	dc000117 	ldw	r16,4(sp)
 40106fc:	dec00b04 	addi	sp,sp,44
 4010700:	f800283a 	ret
 4010704:	00803fc4 	movi	r2,255
 4010708:	11c09536 	bltu	r2,r7,4010960 <__umoddi3+0x500>
 401070c:	0007883a 	mov	r3,zero
 4010710:	0027883a 	mov	r19,zero
 4010714:	003fa006 	br	4010598 <__umoddi3+0x138>
 4010718:	00804034 	movhi	r2,256
 401071c:	10bfffc4 	addi	r2,r2,-1
 4010720:	11809536 	bltu	r2,r6,4010978 <__umoddi3+0x518>
 4010724:	00800404 	movi	r2,16
 4010728:	1009883a 	mov	r4,r2
 401072c:	003f6406 	br	40104c0 <__umoddi3+0x60>
 4010730:	00803fc4 	movi	r2,255
 4010734:	14009336 	bltu	r2,r16,4010984 <__umoddi3+0x524>
 4010738:	0005883a 	mov	r2,zero
 401073c:	0007883a 	mov	r3,zero
 4010740:	003fb206 	br	401060c <__umoddi3+0x1ac>
 4010744:	34c4d83a 	srl	r2,r6,r19
 4010748:	3c0e983a 	sll	r7,r7,r16
 401074c:	8ceed83a 	srl	r23,r17,r19
 4010750:	8c22983a 	sll	r17,r17,r16
 4010754:	38a8b03a 	or	r20,r7,r2
 4010758:	a02ad43a 	srli	r21,r20,16
 401075c:	94c4d83a 	srl	r2,r18,r19
 4010760:	b809883a 	mov	r4,r23
 4010764:	a80b883a 	mov	r5,r21
 4010768:	88a2b03a 	or	r17,r17,r2
 401076c:	342c983a 	sll	r22,r6,r16
 4010770:	40083340 	call	4008334 <__umodsi3>
 4010774:	b809883a 	mov	r4,r23
 4010778:	a80b883a 	mov	r5,r21
 401077c:	d8800015 	stw	r2,0(sp)
 4010780:	400832c0 	call	400832c <__udivsi3>
 4010784:	d8c00017 	ldw	r3,0(sp)
 4010788:	102f883a 	mov	r23,r2
 401078c:	a73fffcc 	andi	fp,r20,65535
 4010790:	180a943a 	slli	r5,r3,16
 4010794:	8804d43a 	srli	r2,r17,16
 4010798:	bf09383a 	mul	r4,r23,fp
 401079c:	9424983a 	sll	r18,r18,r16
 40107a0:	288ab03a 	or	r5,r5,r2
 40107a4:	2900042e 	bgeu	r5,r4,40107b8 <__umoddi3+0x358>
 40107a8:	2d0b883a 	add	r5,r5,r20
 40107ac:	b8bfffc4 	addi	r2,r23,-1
 40107b0:	2d00812e 	bgeu	r5,r20,40109b8 <__umoddi3+0x558>
 40107b4:	102f883a 	mov	r23,r2
 40107b8:	2907c83a 	sub	r3,r5,r4
 40107bc:	1809883a 	mov	r4,r3
 40107c0:	a80b883a 	mov	r5,r21
 40107c4:	d8c00015 	stw	r3,0(sp)
 40107c8:	40083340 	call	4008334 <__umodsi3>
 40107cc:	d8c00017 	ldw	r3,0(sp)
 40107d0:	a80b883a 	mov	r5,r21
 40107d4:	d8800015 	stw	r2,0(sp)
 40107d8:	1809883a 	mov	r4,r3
 40107dc:	400832c0 	call	400832c <__udivsi3>
 40107e0:	d9800017 	ldw	r6,0(sp)
 40107e4:	8c7fffcc 	andi	r17,r17,65535
 40107e8:	3008943a 	slli	r4,r6,16
 40107ec:	170d383a 	mul	r6,r2,fp
 40107f0:	2448b03a 	or	r4,r4,r17
 40107f4:	2180042e 	bgeu	r4,r6,4010808 <__umoddi3+0x3a8>
 40107f8:	2509883a 	add	r4,r4,r20
 40107fc:	10ffffc4 	addi	r3,r2,-1
 4010800:	2500692e 	bgeu	r4,r20,40109a8 <__umoddi3+0x548>
 4010804:	1805883a 	mov	r2,r3
 4010808:	b82e943a 	slli	r23,r23,16
 401080c:	b010d43a 	srli	r8,r22,16
 4010810:	b1ffffcc 	andi	r7,r22,65535
 4010814:	15eeb03a 	or	r23,r2,r23
 4010818:	b8bfffcc 	andi	r2,r23,65535
 401081c:	b82ed43a 	srli	r23,r23,16
 4010820:	11c7383a 	mul	r3,r2,r7
 4010824:	1205383a 	mul	r2,r2,r8
 4010828:	b9cf383a 	mul	r7,r23,r7
 401082c:	400b883a 	mov	r5,r8
 4010830:	1810d43a 	srli	r8,r3,16
 4010834:	3885883a 	add	r2,r7,r2
 4010838:	2189c83a 	sub	r4,r4,r6
 401083c:	1205883a 	add	r2,r2,r8
 4010840:	b94b383a 	mul	r5,r23,r5
 4010844:	11c0022e 	bgeu	r2,r7,4010850 <__umoddi3+0x3f0>
 4010848:	01800074 	movhi	r6,1
 401084c:	298b883a 	add	r5,r5,r6
 4010850:	100cd43a 	srli	r6,r2,16
 4010854:	1004943a 	slli	r2,r2,16
 4010858:	18ffffcc 	andi	r3,r3,65535
 401085c:	298b883a 	add	r5,r5,r6
 4010860:	10c5883a 	add	r2,r2,r3
 4010864:	21403836 	bltu	r4,r5,4010948 <__umoddi3+0x4e8>
 4010868:	21405c26 	beq	r4,r5,40109dc <__umoddi3+0x57c>
 401086c:	2147c83a 	sub	r3,r4,r5
 4010870:	102d883a 	mov	r22,r2
 4010874:	95adc83a 	sub	r22,r18,r22
 4010878:	95a5803a 	cmpltu	r18,r18,r22
 401087c:	1c87c83a 	sub	r3,r3,r18
 4010880:	1cc4983a 	sll	r2,r3,r19
 4010884:	b42cd83a 	srl	r22,r22,r16
 4010888:	1c06d83a 	srl	r3,r3,r16
 401088c:	1584b03a 	or	r2,r2,r22
 4010890:	003f9006 	br	40106d4 <__umoddi3+0x274>
 4010894:	002b883a 	mov	r21,zero
 4010898:	003f1706 	br	40104f8 <__umoddi3+0x98>
 401089c:	8560983a 	sll	r16,r16,r21
 40108a0:	88e6d83a 	srl	r19,r17,r3
 40108a4:	90c6d83a 	srl	r3,r18,r3
 40108a8:	8028d43a 	srli	r20,r16,16
 40108ac:	8d62983a 	sll	r17,r17,r21
 40108b0:	9809883a 	mov	r4,r19
 40108b4:	a00b883a 	mov	r5,r20
 40108b8:	88eeb03a 	or	r23,r17,r3
 40108bc:	40083340 	call	4008334 <__umodsi3>
 40108c0:	9809883a 	mov	r4,r19
 40108c4:	a00b883a 	mov	r5,r20
 40108c8:	1023883a 	mov	r17,r2
 40108cc:	400832c0 	call	400832c <__udivsi3>
 40108d0:	85bfffcc 	andi	r22,r16,65535
 40108d4:	880a943a 	slli	r5,r17,16
 40108d8:	b806d43a 	srli	r3,r23,16
 40108dc:	1585383a 	mul	r2,r2,r22
 40108e0:	9566983a 	sll	r19,r18,r21
 40108e4:	28cab03a 	or	r5,r5,r3
 40108e8:	2880042e 	bgeu	r5,r2,40108fc <__umoddi3+0x49c>
 40108ec:	2c0b883a 	add	r5,r5,r16
 40108f0:	2c000236 	bltu	r5,r16,40108fc <__umoddi3+0x49c>
 40108f4:	2880012e 	bgeu	r5,r2,40108fc <__umoddi3+0x49c>
 40108f8:	2c0b883a 	add	r5,r5,r16
 40108fc:	28a5c83a 	sub	r18,r5,r2
 4010900:	9009883a 	mov	r4,r18
 4010904:	a00b883a 	mov	r5,r20
 4010908:	40083340 	call	4008334 <__umodsi3>
 401090c:	1023883a 	mov	r17,r2
 4010910:	9009883a 	mov	r4,r18
 4010914:	a00b883a 	mov	r5,r20
 4010918:	400832c0 	call	400832c <__udivsi3>
 401091c:	8822943a 	slli	r17,r17,16
 4010920:	1585383a 	mul	r2,r2,r22
 4010924:	bdffffcc 	andi	r23,r23,65535
 4010928:	8de2b03a 	or	r17,r17,r23
 401092c:	8880042e 	bgeu	r17,r2,4010940 <__umoddi3+0x4e0>
 4010930:	8c23883a 	add	r17,r17,r16
 4010934:	8c000236 	bltu	r17,r16,4010940 <__umoddi3+0x4e0>
 4010938:	8880012e 	bgeu	r17,r2,4010940 <__umoddi3+0x4e0>
 401093c:	8c23883a 	add	r17,r17,r16
 4010940:	88a3c83a 	sub	r17,r17,r2
 4010944:	003f3d06 	br	401063c <__umoddi3+0x1dc>
 4010948:	15adc83a 	sub	r22,r2,r22
 401094c:	2d07c83a 	sub	r3,r5,r20
 4010950:	1585803a 	cmpltu	r2,r2,r22
 4010954:	1887c83a 	sub	r3,r3,r2
 4010958:	20c7c83a 	sub	r3,r4,r3
 401095c:	003fc506 	br	4010874 <__umoddi3+0x414>
 4010960:	00c00204 	movi	r3,8
 4010964:	1827883a 	mov	r19,r3
 4010968:	003f0b06 	br	4010598 <__umoddi3+0x138>
 401096c:	00c00604 	movi	r3,24
 4010970:	1827883a 	mov	r19,r3
 4010974:	003f0806 	br	4010598 <__umoddi3+0x138>
 4010978:	00800604 	movi	r2,24
 401097c:	1009883a 	mov	r4,r2
 4010980:	003ecf06 	br	40104c0 <__umoddi3+0x60>
 4010984:	00800204 	movi	r2,8
 4010988:	1007883a 	mov	r3,r2
 401098c:	003f1f06 	br	401060c <__umoddi3+0x1ac>
 4010990:	00800604 	movi	r2,24
 4010994:	1007883a 	mov	r3,r2
 4010998:	003f1c06 	br	401060c <__umoddi3+0x1ac>
 401099c:	00800204 	movi	r2,8
 40109a0:	1009883a 	mov	r4,r2
 40109a4:	003ec606 	br	40104c0 <__umoddi3+0x60>
 40109a8:	21bf962e 	bgeu	r4,r6,4010804 <__umoddi3+0x3a4>
 40109ac:	10bfff84 	addi	r2,r2,-2
 40109b0:	2509883a 	add	r4,r4,r20
 40109b4:	003f9406 	br	4010808 <__umoddi3+0x3a8>
 40109b8:	293f7e2e 	bgeu	r5,r4,40107b4 <__umoddi3+0x354>
 40109bc:	bdffff84 	addi	r23,r23,-2
 40109c0:	2d0b883a 	add	r5,r5,r20
 40109c4:	003f7c06 	br	40107b8 <__umoddi3+0x358>
 40109c8:	1c07883a 	add	r3,r3,r16
 40109cc:	003f2a06 	br	4010678 <__umoddi3+0x218>
 40109d0:	9005883a 	mov	r2,r18
 40109d4:	a007883a 	mov	r3,r20
 40109d8:	003f3e06 	br	40106d4 <__umoddi3+0x274>
 40109dc:	90bfda36 	bltu	r18,r2,4010948 <__umoddi3+0x4e8>
 40109e0:	102d883a 	mov	r22,r2
 40109e4:	0007883a 	mov	r3,zero
 40109e8:	003fa206 	br	4010874 <__umoddi3+0x414>

040109ec <__eqdf2>:
 40109ec:	defff104 	addi	sp,sp,-60
 40109f0:	d9000c15 	stw	r4,48(sp)
 40109f4:	d9400d15 	stw	r5,52(sp)
 40109f8:	d9000c04 	addi	r4,sp,48
 40109fc:	d9400504 	addi	r5,sp,20
 4010a00:	dfc00e15 	stw	ra,56(sp)
 4010a04:	d9800a15 	stw	r6,40(sp)
 4010a08:	d9c00b15 	stw	r7,44(sp)
 4010a0c:	400866c0 	call	400866c <__unpack_d>
 4010a10:	d9000a04 	addi	r4,sp,40
 4010a14:	d80b883a 	mov	r5,sp
 4010a18:	400866c0 	call	400866c <__unpack_d>
 4010a1c:	d8c00517 	ldw	r3,20(sp)
 4010a20:	00800044 	movi	r2,1
 4010a24:	10c0052e 	bgeu	r2,r3,4010a3c <__eqdf2+0x50>
 4010a28:	d8c00017 	ldw	r3,0(sp)
 4010a2c:	10c0032e 	bgeu	r2,r3,4010a3c <__eqdf2+0x50>
 4010a30:	d9000504 	addi	r4,sp,20
 4010a34:	d80b883a 	mov	r5,sp
 4010a38:	40087700 	call	4008770 <__fpcmp_parts_d>
 4010a3c:	dfc00e17 	ldw	ra,56(sp)
 4010a40:	dec00f04 	addi	sp,sp,60
 4010a44:	f800283a 	ret

04010a48 <__nedf2>:
 4010a48:	defff104 	addi	sp,sp,-60
 4010a4c:	d9000c15 	stw	r4,48(sp)
 4010a50:	d9400d15 	stw	r5,52(sp)
 4010a54:	d9000c04 	addi	r4,sp,48
 4010a58:	d9400504 	addi	r5,sp,20
 4010a5c:	dfc00e15 	stw	ra,56(sp)
 4010a60:	d9800a15 	stw	r6,40(sp)
 4010a64:	d9c00b15 	stw	r7,44(sp)
 4010a68:	400866c0 	call	400866c <__unpack_d>
 4010a6c:	d9000a04 	addi	r4,sp,40
 4010a70:	d80b883a 	mov	r5,sp
 4010a74:	400866c0 	call	400866c <__unpack_d>
 4010a78:	d8c00517 	ldw	r3,20(sp)
 4010a7c:	00800044 	movi	r2,1
 4010a80:	10c0052e 	bgeu	r2,r3,4010a98 <__nedf2+0x50>
 4010a84:	d8c00017 	ldw	r3,0(sp)
 4010a88:	10c0032e 	bgeu	r2,r3,4010a98 <__nedf2+0x50>
 4010a8c:	d9000504 	addi	r4,sp,20
 4010a90:	d80b883a 	mov	r5,sp
 4010a94:	40087700 	call	4008770 <__fpcmp_parts_d>
 4010a98:	dfc00e17 	ldw	ra,56(sp)
 4010a9c:	dec00f04 	addi	sp,sp,60
 4010aa0:	f800283a 	ret

04010aa4 <__gtdf2>:
 4010aa4:	defff104 	addi	sp,sp,-60
 4010aa8:	d9000c15 	stw	r4,48(sp)
 4010aac:	d9400d15 	stw	r5,52(sp)
 4010ab0:	d9000c04 	addi	r4,sp,48
 4010ab4:	d9400504 	addi	r5,sp,20
 4010ab8:	dfc00e15 	stw	ra,56(sp)
 4010abc:	d9800a15 	stw	r6,40(sp)
 4010ac0:	d9c00b15 	stw	r7,44(sp)
 4010ac4:	400866c0 	call	400866c <__unpack_d>
 4010ac8:	d9000a04 	addi	r4,sp,40
 4010acc:	d80b883a 	mov	r5,sp
 4010ad0:	400866c0 	call	400866c <__unpack_d>
 4010ad4:	d8c00517 	ldw	r3,20(sp)
 4010ad8:	00800044 	movi	r2,1
 4010adc:	10c0082e 	bgeu	r2,r3,4010b00 <__gtdf2+0x5c>
 4010ae0:	d8c00017 	ldw	r3,0(sp)
 4010ae4:	10c0062e 	bgeu	r2,r3,4010b00 <__gtdf2+0x5c>
 4010ae8:	d9000504 	addi	r4,sp,20
 4010aec:	d80b883a 	mov	r5,sp
 4010af0:	40087700 	call	4008770 <__fpcmp_parts_d>
 4010af4:	dfc00e17 	ldw	ra,56(sp)
 4010af8:	dec00f04 	addi	sp,sp,60
 4010afc:	f800283a 	ret
 4010b00:	00bfffc4 	movi	r2,-1
 4010b04:	003ffb06 	br	4010af4 <__gtdf2+0x50>

04010b08 <__gedf2>:
 4010b08:	defff104 	addi	sp,sp,-60
 4010b0c:	d9000c15 	stw	r4,48(sp)
 4010b10:	d9400d15 	stw	r5,52(sp)
 4010b14:	d9000c04 	addi	r4,sp,48
 4010b18:	d9400504 	addi	r5,sp,20
 4010b1c:	dfc00e15 	stw	ra,56(sp)
 4010b20:	d9800a15 	stw	r6,40(sp)
 4010b24:	d9c00b15 	stw	r7,44(sp)
 4010b28:	400866c0 	call	400866c <__unpack_d>
 4010b2c:	d9000a04 	addi	r4,sp,40
 4010b30:	d80b883a 	mov	r5,sp
 4010b34:	400866c0 	call	400866c <__unpack_d>
 4010b38:	d8c00517 	ldw	r3,20(sp)
 4010b3c:	00800044 	movi	r2,1
 4010b40:	10c0082e 	bgeu	r2,r3,4010b64 <__gedf2+0x5c>
 4010b44:	d8c00017 	ldw	r3,0(sp)
 4010b48:	10c0062e 	bgeu	r2,r3,4010b64 <__gedf2+0x5c>
 4010b4c:	d9000504 	addi	r4,sp,20
 4010b50:	d80b883a 	mov	r5,sp
 4010b54:	40087700 	call	4008770 <__fpcmp_parts_d>
 4010b58:	dfc00e17 	ldw	ra,56(sp)
 4010b5c:	dec00f04 	addi	sp,sp,60
 4010b60:	f800283a 	ret
 4010b64:	00bfffc4 	movi	r2,-1
 4010b68:	003ffb06 	br	4010b58 <__gedf2+0x50>

04010b6c <__floatunsidf>:
 4010b6c:	defff904 	addi	sp,sp,-28
 4010b70:	dc000515 	stw	r16,20(sp)
 4010b74:	dfc00615 	stw	ra,24(sp)
 4010b78:	d8000115 	stw	zero,4(sp)
 4010b7c:	2021883a 	mov	r16,r4
 4010b80:	20001726 	beq	r4,zero,4010be0 <__floatunsidf+0x74>
 4010b84:	008000c4 	movi	r2,3
 4010b88:	d8800015 	stw	r2,0(sp)
 4010b8c:	00800f04 	movi	r2,60
 4010b90:	d8800215 	stw	r2,8(sp)
 4010b94:	400839c0 	call	400839c <__clzsi2>
 4010b98:	10c00744 	addi	r3,r2,29
 4010b9c:	18001816 	blt	r3,zero,4010c00 <__floatunsidf+0x94>
 4010ba0:	18002d26 	beq	r3,zero,4010c58 <__floatunsidf+0xec>
 4010ba4:	113fff44 	addi	r4,r2,-3
 4010ba8:	20002e16 	blt	r4,zero,4010c64 <__floatunsidf+0xf8>
 4010bac:	8108983a 	sll	r4,r16,r4
 4010bb0:	0021883a 	mov	r16,zero
 4010bb4:	014007c4 	movi	r5,31
 4010bb8:	2885c83a 	sub	r2,r5,r2
 4010bbc:	dc000315 	stw	r16,12(sp)
 4010bc0:	d9000415 	stw	r4,16(sp)
 4010bc4:	d8800215 	stw	r2,8(sp)
 4010bc8:	d809883a 	mov	r4,sp
 4010bcc:	40084480 	call	4008448 <__pack_d>
 4010bd0:	dfc00617 	ldw	ra,24(sp)
 4010bd4:	dc000517 	ldw	r16,20(sp)
 4010bd8:	dec00704 	addi	sp,sp,28
 4010bdc:	f800283a 	ret
 4010be0:	00800084 	movi	r2,2
 4010be4:	d809883a 	mov	r4,sp
 4010be8:	d8800015 	stw	r2,0(sp)
 4010bec:	40084480 	call	4008448 <__pack_d>
 4010bf0:	dfc00617 	ldw	ra,24(sp)
 4010bf4:	dc000517 	ldw	r16,20(sp)
 4010bf8:	dec00704 	addi	sp,sp,28
 4010bfc:	f800283a 	ret
 4010c00:	00c7c83a 	sub	r3,zero,r3
 4010c04:	193ff804 	addi	r4,r3,-32
 4010c08:	20001c16 	blt	r4,zero,4010c7c <__floatunsidf+0x110>
 4010c0c:	000b883a 	mov	r5,zero
 4010c10:	2009d7fa 	srai	r4,r4,31
 4010c14:	80c6d83a 	srl	r3,r16,r3
 4010c18:	297fffc4 	addi	r5,r5,-1
 4010c1c:	2c20703a 	and	r16,r5,r16
 4010c20:	8020c03a 	cmpne	r16,r16,zero
 4010c24:	1906703a 	and	r3,r3,r4
 4010c28:	010007c4 	movi	r4,31
 4010c2c:	80c6b03a 	or	r3,r16,r3
 4010c30:	2085c83a 	sub	r2,r4,r2
 4010c34:	d809883a 	mov	r4,sp
 4010c38:	d8c00315 	stw	r3,12(sp)
 4010c3c:	d8000415 	stw	zero,16(sp)
 4010c40:	d8800215 	stw	r2,8(sp)
 4010c44:	40084480 	call	4008448 <__pack_d>
 4010c48:	dfc00617 	ldw	ra,24(sp)
 4010c4c:	dc000517 	ldw	r16,20(sp)
 4010c50:	dec00704 	addi	sp,sp,28
 4010c54:	f800283a 	ret
 4010c58:	dc000315 	stw	r16,12(sp)
 4010c5c:	d8000415 	stw	zero,16(sp)
 4010c60:	003fd906 	br	4010bc8 <__floatunsidf+0x5c>
 4010c64:	800ad07a 	srli	r5,r16,1
 4010c68:	010007c4 	movi	r4,31
 4010c6c:	20c9c83a 	sub	r4,r4,r3
 4010c70:	2908d83a 	srl	r4,r5,r4
 4010c74:	80e0983a 	sll	r16,r16,r3
 4010c78:	003fce06 	br	4010bb4 <__floatunsidf+0x48>
 4010c7c:	01400044 	movi	r5,1
 4010c80:	28ca983a 	sll	r5,r5,r3
 4010c84:	003fe206 	br	4010c10 <__floatunsidf+0xa4>

04010c88 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4010c88:	defff504 	addi	sp,sp,-44
 4010c8c:	df000a15 	stw	fp,40(sp)
 4010c90:	df000a04 	addi	fp,sp,40
 4010c94:	e13ffc15 	stw	r4,-16(fp)
 4010c98:	e17ffd15 	stw	r5,-12(fp)
 4010c9c:	e1bffe15 	stw	r6,-8(fp)
 4010ca0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4010ca4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4010ca8:	008100f4 	movhi	r2,1027
 4010cac:	1091ed04 	addi	r2,r2,18356
 4010cb0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 4010cb4:	10003f26 	beq	r2,zero,4010db4 <alt_alarm_start+0x12c>
  {
    if (alarm)
 4010cb8:	e0bffc17 	ldw	r2,-16(fp)
 4010cbc:	10003b26 	beq	r2,zero,4010dac <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 4010cc0:	e0bffc17 	ldw	r2,-16(fp)
 4010cc4:	e0fffe17 	ldw	r3,-8(fp)
 4010cc8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4010ccc:	e0bffc17 	ldw	r2,-16(fp)
 4010cd0:	e0ffff17 	ldw	r3,-4(fp)
 4010cd4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010cd8:	0005303a 	rdctl	r2,status
 4010cdc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010ce0:	e0fff817 	ldw	r3,-32(fp)
 4010ce4:	00bfff84 	movi	r2,-2
 4010ce8:	1884703a 	and	r2,r3,r2
 4010cec:	1001703a 	wrctl	status,r2
  
  return context;
 4010cf0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 4010cf4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4010cf8:	008100f4 	movhi	r2,1027
 4010cfc:	1091ee04 	addi	r2,r2,18360
 4010d00:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 4010d04:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4010d08:	e0fffd17 	ldw	r3,-12(fp)
 4010d0c:	e0bff617 	ldw	r2,-40(fp)
 4010d10:	1885883a 	add	r2,r3,r2
 4010d14:	10c00044 	addi	r3,r2,1
 4010d18:	e0bffc17 	ldw	r2,-16(fp)
 4010d1c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4010d20:	e0bffc17 	ldw	r2,-16(fp)
 4010d24:	10c00217 	ldw	r3,8(r2)
 4010d28:	e0bff617 	ldw	r2,-40(fp)
 4010d2c:	1880042e 	bgeu	r3,r2,4010d40 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 4010d30:	e0bffc17 	ldw	r2,-16(fp)
 4010d34:	00c00044 	movi	r3,1
 4010d38:	10c00405 	stb	r3,16(r2)
 4010d3c:	00000206 	br	4010d48 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 4010d40:	e0bffc17 	ldw	r2,-16(fp)
 4010d44:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4010d48:	e0bffc17 	ldw	r2,-16(fp)
 4010d4c:	00c100f4 	movhi	r3,1027
 4010d50:	18c45b04 	addi	r3,r3,4460
 4010d54:	e0fff915 	stw	r3,-28(fp)
 4010d58:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4010d5c:	e0bffa17 	ldw	r2,-24(fp)
 4010d60:	e0fff917 	ldw	r3,-28(fp)
 4010d64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4010d68:	e0bff917 	ldw	r2,-28(fp)
 4010d6c:	10c00017 	ldw	r3,0(r2)
 4010d70:	e0bffa17 	ldw	r2,-24(fp)
 4010d74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4010d78:	e0bff917 	ldw	r2,-28(fp)
 4010d7c:	10800017 	ldw	r2,0(r2)
 4010d80:	e0fffa17 	ldw	r3,-24(fp)
 4010d84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4010d88:	e0bff917 	ldw	r2,-28(fp)
 4010d8c:	e0fffa17 	ldw	r3,-24(fp)
 4010d90:	10c00015 	stw	r3,0(r2)
 4010d94:	e0bff717 	ldw	r2,-36(fp)
 4010d98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010d9c:	e0bffb17 	ldw	r2,-20(fp)
 4010da0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4010da4:	0005883a 	mov	r2,zero
 4010da8:	00000306 	br	4010db8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 4010dac:	00bffa84 	movi	r2,-22
 4010db0:	00000106 	br	4010db8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 4010db4:	00bfde84 	movi	r2,-134
  }
}
 4010db8:	e037883a 	mov	sp,fp
 4010dbc:	df000017 	ldw	fp,0(sp)
 4010dc0:	dec00104 	addi	sp,sp,4
 4010dc4:	f800283a 	ret

04010dc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010dc8:	defffe04 	addi	sp,sp,-8
 4010dcc:	dfc00115 	stw	ra,4(sp)
 4010dd0:	df000015 	stw	fp,0(sp)
 4010dd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010dd8:	008100f4 	movhi	r2,1027
 4010ddc:	10845804 	addi	r2,r2,4448
 4010de0:	10800017 	ldw	r2,0(r2)
 4010de4:	10000526 	beq	r2,zero,4010dfc <alt_get_errno+0x34>
 4010de8:	008100f4 	movhi	r2,1027
 4010dec:	10845804 	addi	r2,r2,4448
 4010df0:	10800017 	ldw	r2,0(r2)
 4010df4:	103ee83a 	callr	r2
 4010df8:	00000206 	br	4010e04 <alt_get_errno+0x3c>
 4010dfc:	008100f4 	movhi	r2,1027
 4010e00:	1091e504 	addi	r2,r2,18324
}
 4010e04:	e037883a 	mov	sp,fp
 4010e08:	dfc00117 	ldw	ra,4(sp)
 4010e0c:	df000017 	ldw	fp,0(sp)
 4010e10:	dec00204 	addi	sp,sp,8
 4010e14:	f800283a 	ret

04010e18 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4010e18:	defffb04 	addi	sp,sp,-20
 4010e1c:	dfc00415 	stw	ra,16(sp)
 4010e20:	df000315 	stw	fp,12(sp)
 4010e24:	df000304 	addi	fp,sp,12
 4010e28:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4010e2c:	e0bfff17 	ldw	r2,-4(fp)
 4010e30:	10000616 	blt	r2,zero,4010e4c <close+0x34>
 4010e34:	e0bfff17 	ldw	r2,-4(fp)
 4010e38:	10c00324 	muli	r3,r2,12
 4010e3c:	008100f4 	movhi	r2,1027
 4010e40:	10bfd304 	addi	r2,r2,-180
 4010e44:	1885883a 	add	r2,r3,r2
 4010e48:	00000106 	br	4010e50 <close+0x38>
 4010e4c:	0005883a 	mov	r2,zero
 4010e50:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4010e54:	e0bffd17 	ldw	r2,-12(fp)
 4010e58:	10001826 	beq	r2,zero,4010ebc <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4010e5c:	e0bffd17 	ldw	r2,-12(fp)
 4010e60:	10800017 	ldw	r2,0(r2)
 4010e64:	10800417 	ldw	r2,16(r2)
 4010e68:	10000626 	beq	r2,zero,4010e84 <close+0x6c>
 4010e6c:	e0bffd17 	ldw	r2,-12(fp)
 4010e70:	10800017 	ldw	r2,0(r2)
 4010e74:	10800417 	ldw	r2,16(r2)
 4010e78:	e13ffd17 	ldw	r4,-12(fp)
 4010e7c:	103ee83a 	callr	r2
 4010e80:	00000106 	br	4010e88 <close+0x70>
 4010e84:	0005883a 	mov	r2,zero
 4010e88:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4010e8c:	e13fff17 	ldw	r4,-4(fp)
 4010e90:	40117c40 	call	40117c4 <alt_release_fd>
    if (rval < 0)
 4010e94:	e0bffe17 	ldw	r2,-8(fp)
 4010e98:	1000060e 	bge	r2,zero,4010eb4 <close+0x9c>
    {
      ALT_ERRNO = -rval;
 4010e9c:	4010dc80 	call	4010dc8 <alt_get_errno>
 4010ea0:	e0fffe17 	ldw	r3,-8(fp)
 4010ea4:	00c7c83a 	sub	r3,zero,r3
 4010ea8:	10c00015 	stw	r3,0(r2)
      return -1;
 4010eac:	00bfffc4 	movi	r2,-1
 4010eb0:	00000606 	br	4010ecc <close+0xb4>
    }
    return 0;
 4010eb4:	0005883a 	mov	r2,zero
 4010eb8:	00000406 	br	4010ecc <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4010ebc:	4010dc80 	call	4010dc8 <alt_get_errno>
 4010ec0:	00c01444 	movi	r3,81
 4010ec4:	10c00015 	stw	r3,0(r2)
    return -1;
 4010ec8:	00bfffc4 	movi	r2,-1
  }
}
 4010ecc:	e037883a 	mov	sp,fp
 4010ed0:	dfc00117 	ldw	ra,4(sp)
 4010ed4:	df000017 	ldw	fp,0(sp)
 4010ed8:	dec00204 	addi	sp,sp,8
 4010edc:	f800283a 	ret

04010ee0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4010ee0:	defffc04 	addi	sp,sp,-16
 4010ee4:	df000315 	stw	fp,12(sp)
 4010ee8:	df000304 	addi	fp,sp,12
 4010eec:	e13ffd15 	stw	r4,-12(fp)
 4010ef0:	e17ffe15 	stw	r5,-8(fp)
 4010ef4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4010ef8:	e0bfff17 	ldw	r2,-4(fp)
}
 4010efc:	e037883a 	mov	sp,fp
 4010f00:	df000017 	ldw	fp,0(sp)
 4010f04:	dec00104 	addi	sp,sp,4
 4010f08:	f800283a 	ret

04010f0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010f0c:	defffe04 	addi	sp,sp,-8
 4010f10:	dfc00115 	stw	ra,4(sp)
 4010f14:	df000015 	stw	fp,0(sp)
 4010f18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010f1c:	008100f4 	movhi	r2,1027
 4010f20:	10845804 	addi	r2,r2,4448
 4010f24:	10800017 	ldw	r2,0(r2)
 4010f28:	10000526 	beq	r2,zero,4010f40 <alt_get_errno+0x34>
 4010f2c:	008100f4 	movhi	r2,1027
 4010f30:	10845804 	addi	r2,r2,4448
 4010f34:	10800017 	ldw	r2,0(r2)
 4010f38:	103ee83a 	callr	r2
 4010f3c:	00000206 	br	4010f48 <alt_get_errno+0x3c>
 4010f40:	008100f4 	movhi	r2,1027
 4010f44:	1091e504 	addi	r2,r2,18324
}
 4010f48:	e037883a 	mov	sp,fp
 4010f4c:	dfc00117 	ldw	ra,4(sp)
 4010f50:	df000017 	ldw	fp,0(sp)
 4010f54:	dec00204 	addi	sp,sp,8
 4010f58:	f800283a 	ret

04010f5c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4010f5c:	defffb04 	addi	sp,sp,-20
 4010f60:	dfc00415 	stw	ra,16(sp)
 4010f64:	df000315 	stw	fp,12(sp)
 4010f68:	df000304 	addi	fp,sp,12
 4010f6c:	e13ffe15 	stw	r4,-8(fp)
 4010f70:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4010f74:	e0bffe17 	ldw	r2,-8(fp)
 4010f78:	10000616 	blt	r2,zero,4010f94 <fstat+0x38>
 4010f7c:	e0bffe17 	ldw	r2,-8(fp)
 4010f80:	10c00324 	muli	r3,r2,12
 4010f84:	008100f4 	movhi	r2,1027
 4010f88:	10bfd304 	addi	r2,r2,-180
 4010f8c:	1885883a 	add	r2,r3,r2
 4010f90:	00000106 	br	4010f98 <fstat+0x3c>
 4010f94:	0005883a 	mov	r2,zero
 4010f98:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4010f9c:	e0bffd17 	ldw	r2,-12(fp)
 4010fa0:	10001026 	beq	r2,zero,4010fe4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4010fa4:	e0bffd17 	ldw	r2,-12(fp)
 4010fa8:	10800017 	ldw	r2,0(r2)
 4010fac:	10800817 	ldw	r2,32(r2)
 4010fb0:	10000726 	beq	r2,zero,4010fd0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4010fb4:	e0bffd17 	ldw	r2,-12(fp)
 4010fb8:	10800017 	ldw	r2,0(r2)
 4010fbc:	10800817 	ldw	r2,32(r2)
 4010fc0:	e13ffd17 	ldw	r4,-12(fp)
 4010fc4:	e17fff17 	ldw	r5,-4(fp)
 4010fc8:	103ee83a 	callr	r2
 4010fcc:	00000906 	br	4010ff4 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4010fd0:	e0bfff17 	ldw	r2,-4(fp)
 4010fd4:	00c80004 	movi	r3,8192
 4010fd8:	10c00115 	stw	r3,4(r2)
      return 0;
 4010fdc:	0005883a 	mov	r2,zero
 4010fe0:	00000406 	br	4010ff4 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4010fe4:	4010f0c0 	call	4010f0c <alt_get_errno>
 4010fe8:	00c01444 	movi	r3,81
 4010fec:	10c00015 	stw	r3,0(r2)
    return -1;
 4010ff0:	00bfffc4 	movi	r2,-1
  }
}
 4010ff4:	e037883a 	mov	sp,fp
 4010ff8:	dfc00117 	ldw	ra,4(sp)
 4010ffc:	df000017 	ldw	fp,0(sp)
 4011000:	dec00204 	addi	sp,sp,8
 4011004:	f800283a 	ret

04011008 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4011008:	defff904 	addi	sp,sp,-28
 401100c:	dfc00615 	stw	ra,24(sp)
 4011010:	df000515 	stw	fp,20(sp)
 4011014:	df000504 	addi	fp,sp,20
 4011018:	e13ffc15 	stw	r4,-16(fp)
 401101c:	e17ffd15 	stw	r5,-12(fp)
 4011020:	e1bffe15 	stw	r6,-8(fp)
 4011024:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4011028:	e0800217 	ldw	r2,8(fp)
 401102c:	d8800015 	stw	r2,0(sp)
 4011030:	e13ffc17 	ldw	r4,-16(fp)
 4011034:	e17ffd17 	ldw	r5,-12(fp)
 4011038:	e1bffe17 	ldw	r6,-8(fp)
 401103c:	e1ffff17 	ldw	r7,-4(fp)
 4011040:	40111e00 	call	40111e0 <alt_iic_isr_register>
}  
 4011044:	e037883a 	mov	sp,fp
 4011048:	dfc00117 	ldw	ra,4(sp)
 401104c:	df000017 	ldw	fp,0(sp)
 4011050:	dec00204 	addi	sp,sp,8
 4011054:	f800283a 	ret

04011058 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4011058:	defff904 	addi	sp,sp,-28
 401105c:	df000615 	stw	fp,24(sp)
 4011060:	df000604 	addi	fp,sp,24
 4011064:	e13ffe15 	stw	r4,-8(fp)
 4011068:	e17fff15 	stw	r5,-4(fp)
 401106c:	e0bfff17 	ldw	r2,-4(fp)
 4011070:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011074:	0005303a 	rdctl	r2,status
 4011078:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401107c:	e0fffb17 	ldw	r3,-20(fp)
 4011080:	00bfff84 	movi	r2,-2
 4011084:	1884703a 	and	r2,r3,r2
 4011088:	1001703a 	wrctl	status,r2
  
  return context;
 401108c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4011090:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4011094:	e0bffa17 	ldw	r2,-24(fp)
 4011098:	00c00044 	movi	r3,1
 401109c:	1884983a 	sll	r2,r3,r2
 40110a0:	1007883a 	mov	r3,r2
 40110a4:	008100f4 	movhi	r2,1027
 40110a8:	1091e904 	addi	r2,r2,18340
 40110ac:	10800017 	ldw	r2,0(r2)
 40110b0:	1886b03a 	or	r3,r3,r2
 40110b4:	008100f4 	movhi	r2,1027
 40110b8:	1091e904 	addi	r2,r2,18340
 40110bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40110c0:	008100f4 	movhi	r2,1027
 40110c4:	1091e904 	addi	r2,r2,18340
 40110c8:	10800017 	ldw	r2,0(r2)
 40110cc:	100170fa 	wrctl	ienable,r2
 40110d0:	e0bffc17 	ldw	r2,-16(fp)
 40110d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40110d8:	e0bffd17 	ldw	r2,-12(fp)
 40110dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40110e0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 40110e4:	e037883a 	mov	sp,fp
 40110e8:	df000017 	ldw	fp,0(sp)
 40110ec:	dec00104 	addi	sp,sp,4
 40110f0:	f800283a 	ret

040110f4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40110f4:	defff904 	addi	sp,sp,-28
 40110f8:	df000615 	stw	fp,24(sp)
 40110fc:	df000604 	addi	fp,sp,24
 4011100:	e13ffe15 	stw	r4,-8(fp)
 4011104:	e17fff15 	stw	r5,-4(fp)
 4011108:	e0bfff17 	ldw	r2,-4(fp)
 401110c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011110:	0005303a 	rdctl	r2,status
 4011114:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011118:	e0fffb17 	ldw	r3,-20(fp)
 401111c:	00bfff84 	movi	r2,-2
 4011120:	1884703a 	and	r2,r3,r2
 4011124:	1001703a 	wrctl	status,r2
  
  return context;
 4011128:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401112c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4011130:	e0bffa17 	ldw	r2,-24(fp)
 4011134:	00c00044 	movi	r3,1
 4011138:	1884983a 	sll	r2,r3,r2
 401113c:	0084303a 	nor	r2,zero,r2
 4011140:	1007883a 	mov	r3,r2
 4011144:	008100f4 	movhi	r2,1027
 4011148:	1091e904 	addi	r2,r2,18340
 401114c:	10800017 	ldw	r2,0(r2)
 4011150:	1886703a 	and	r3,r3,r2
 4011154:	008100f4 	movhi	r2,1027
 4011158:	1091e904 	addi	r2,r2,18340
 401115c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011160:	008100f4 	movhi	r2,1027
 4011164:	1091e904 	addi	r2,r2,18340
 4011168:	10800017 	ldw	r2,0(r2)
 401116c:	100170fa 	wrctl	ienable,r2
 4011170:	e0bffc17 	ldw	r2,-16(fp)
 4011174:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011178:	e0bffd17 	ldw	r2,-12(fp)
 401117c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4011180:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 4011184:	e037883a 	mov	sp,fp
 4011188:	df000017 	ldw	fp,0(sp)
 401118c:	dec00104 	addi	sp,sp,4
 4011190:	f800283a 	ret

04011194 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4011194:	defffc04 	addi	sp,sp,-16
 4011198:	df000315 	stw	fp,12(sp)
 401119c:	df000304 	addi	fp,sp,12
 40111a0:	e13ffe15 	stw	r4,-8(fp)
 40111a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 40111a8:	000530fa 	rdctl	r2,ienable
 40111ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 40111b0:	e0bfff17 	ldw	r2,-4(fp)
 40111b4:	00c00044 	movi	r3,1
 40111b8:	1884983a 	sll	r2,r3,r2
 40111bc:	1007883a 	mov	r3,r2
 40111c0:	e0bffd17 	ldw	r2,-12(fp)
 40111c4:	1884703a 	and	r2,r3,r2
 40111c8:	1004c03a 	cmpne	r2,r2,zero
 40111cc:	10803fcc 	andi	r2,r2,255
}
 40111d0:	e037883a 	mov	sp,fp
 40111d4:	df000017 	ldw	fp,0(sp)
 40111d8:	dec00104 	addi	sp,sp,4
 40111dc:	f800283a 	ret

040111e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40111e0:	defff504 	addi	sp,sp,-44
 40111e4:	dfc00a15 	stw	ra,40(sp)
 40111e8:	df000915 	stw	fp,36(sp)
 40111ec:	df000904 	addi	fp,sp,36
 40111f0:	e13ffc15 	stw	r4,-16(fp)
 40111f4:	e17ffd15 	stw	r5,-12(fp)
 40111f8:	e1bffe15 	stw	r6,-8(fp)
 40111fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4011200:	00bffa84 	movi	r2,-22
 4011204:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4011208:	e0bffd17 	ldw	r2,-12(fp)
 401120c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4011210:	e0bff817 	ldw	r2,-32(fp)
 4011214:	10800808 	cmpgei	r2,r2,32
 4011218:	1000271e 	bne	r2,zero,40112b8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401121c:	0005303a 	rdctl	r2,status
 4011220:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011224:	e0fffa17 	ldw	r3,-24(fp)
 4011228:	00bfff84 	movi	r2,-2
 401122c:	1884703a 	and	r2,r3,r2
 4011230:	1001703a 	wrctl	status,r2
  
  return context;
 4011234:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4011238:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 401123c:	00c100f4 	movhi	r3,1027
 4011240:	18d1f904 	addi	r3,r3,18404
 4011244:	e0bff817 	ldw	r2,-32(fp)
 4011248:	100490fa 	slli	r2,r2,3
 401124c:	1885883a 	add	r2,r3,r2
 4011250:	e0fffe17 	ldw	r3,-8(fp)
 4011254:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4011258:	00c100f4 	movhi	r3,1027
 401125c:	18d1f904 	addi	r3,r3,18404
 4011260:	e0bff817 	ldw	r2,-32(fp)
 4011264:	100490fa 	slli	r2,r2,3
 4011268:	1885883a 	add	r2,r3,r2
 401126c:	10800104 	addi	r2,r2,4
 4011270:	e0ffff17 	ldw	r3,-4(fp)
 4011274:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4011278:	e0bffe17 	ldw	r2,-8(fp)
 401127c:	10000526 	beq	r2,zero,4011294 <alt_iic_isr_register+0xb4>
 4011280:	e0bff817 	ldw	r2,-32(fp)
 4011284:	e13ffc17 	ldw	r4,-16(fp)
 4011288:	100b883a 	mov	r5,r2
 401128c:	40110580 	call	4011058 <alt_ic_irq_enable>
 4011290:	00000406 	br	40112a4 <alt_iic_isr_register+0xc4>
 4011294:	e0bff817 	ldw	r2,-32(fp)
 4011298:	e13ffc17 	ldw	r4,-16(fp)
 401129c:	100b883a 	mov	r5,r2
 40112a0:	40110f40 	call	40110f4 <alt_ic_irq_disable>
 40112a4:	e0bff715 	stw	r2,-36(fp)
 40112a8:	e0bff917 	ldw	r2,-28(fp)
 40112ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40112b0:	e0bffb17 	ldw	r2,-20(fp)
 40112b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 40112b8:	e0bff717 	ldw	r2,-36(fp)
}
 40112bc:	e037883a 	mov	sp,fp
 40112c0:	dfc00117 	ldw	ra,4(sp)
 40112c4:	df000017 	ldw	fp,0(sp)
 40112c8:	dec00204 	addi	sp,sp,8
 40112cc:	f800283a 	ret

040112d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40112d0:	defffe04 	addi	sp,sp,-8
 40112d4:	dfc00115 	stw	ra,4(sp)
 40112d8:	df000015 	stw	fp,0(sp)
 40112dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40112e0:	008100f4 	movhi	r2,1027
 40112e4:	10845804 	addi	r2,r2,4448
 40112e8:	10800017 	ldw	r2,0(r2)
 40112ec:	10000526 	beq	r2,zero,4011304 <alt_get_errno+0x34>
 40112f0:	008100f4 	movhi	r2,1027
 40112f4:	10845804 	addi	r2,r2,4448
 40112f8:	10800017 	ldw	r2,0(r2)
 40112fc:	103ee83a 	callr	r2
 4011300:	00000206 	br	401130c <alt_get_errno+0x3c>
 4011304:	008100f4 	movhi	r2,1027
 4011308:	1091e504 	addi	r2,r2,18324
}
 401130c:	e037883a 	mov	sp,fp
 4011310:	dfc00117 	ldw	ra,4(sp)
 4011314:	df000017 	ldw	fp,0(sp)
 4011318:	dec00204 	addi	sp,sp,8
 401131c:	f800283a 	ret

04011320 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4011320:	deffed04 	addi	sp,sp,-76
 4011324:	dfc01215 	stw	ra,72(sp)
 4011328:	df001115 	stw	fp,68(sp)
 401132c:	df001104 	addi	fp,sp,68
 4011330:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4011334:	e0bfff17 	ldw	r2,-4(fp)
 4011338:	10000616 	blt	r2,zero,4011354 <isatty+0x34>
 401133c:	e0bfff17 	ldw	r2,-4(fp)
 4011340:	10c00324 	muli	r3,r2,12
 4011344:	008100f4 	movhi	r2,1027
 4011348:	10bfd304 	addi	r2,r2,-180
 401134c:	1885883a 	add	r2,r3,r2
 4011350:	00000106 	br	4011358 <isatty+0x38>
 4011354:	0005883a 	mov	r2,zero
 4011358:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 401135c:	e0bfef17 	ldw	r2,-68(fp)
 4011360:	10000e26 	beq	r2,zero,401139c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4011364:	e0bfef17 	ldw	r2,-68(fp)
 4011368:	10800017 	ldw	r2,0(r2)
 401136c:	10800817 	ldw	r2,32(r2)
 4011370:	1000021e 	bne	r2,zero,401137c <isatty+0x5c>
    {
      return 1;
 4011374:	00800044 	movi	r2,1
 4011378:	00000c06 	br	40113ac <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 401137c:	e0bff004 	addi	r2,fp,-64
 4011380:	e13fff17 	ldw	r4,-4(fp)
 4011384:	100b883a 	mov	r5,r2
 4011388:	4010f5c0 	call	4010f5c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 401138c:	e0bff117 	ldw	r2,-60(fp)
 4011390:	10880020 	cmpeqi	r2,r2,8192
 4011394:	10803fcc 	andi	r2,r2,255
 4011398:	00000406 	br	40113ac <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401139c:	40112d00 	call	40112d0 <alt_get_errno>
 40113a0:	00c01444 	movi	r3,81
 40113a4:	10c00015 	stw	r3,0(r2)
    return 0;
 40113a8:	0005883a 	mov	r2,zero
  }
}
 40113ac:	e037883a 	mov	sp,fp
 40113b0:	dfc00117 	ldw	ra,4(sp)
 40113b4:	df000017 	ldw	fp,0(sp)
 40113b8:	dec00204 	addi	sp,sp,8
 40113bc:	f800283a 	ret

040113c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 40113c0:	defffc04 	addi	sp,sp,-16
 40113c4:	df000315 	stw	fp,12(sp)
 40113c8:	df000304 	addi	fp,sp,12
 40113cc:	e13ffd15 	stw	r4,-12(fp)
 40113d0:	e17ffe15 	stw	r5,-8(fp)
 40113d4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40113d8:	e0fffe17 	ldw	r3,-8(fp)
 40113dc:	e0bffd17 	ldw	r2,-12(fp)
 40113e0:	18800e26 	beq	r3,r2,401141c <alt_load_section+0x5c>
  {
    while( to != end )
 40113e4:	00000a06 	br	4011410 <alt_load_section+0x50>
    {
      *to++ = *from++;
 40113e8:	e0bffd17 	ldw	r2,-12(fp)
 40113ec:	10c00017 	ldw	r3,0(r2)
 40113f0:	e0bffe17 	ldw	r2,-8(fp)
 40113f4:	10c00015 	stw	r3,0(r2)
 40113f8:	e0bffe17 	ldw	r2,-8(fp)
 40113fc:	10800104 	addi	r2,r2,4
 4011400:	e0bffe15 	stw	r2,-8(fp)
 4011404:	e0bffd17 	ldw	r2,-12(fp)
 4011408:	10800104 	addi	r2,r2,4
 401140c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4011410:	e0fffe17 	ldw	r3,-8(fp)
 4011414:	e0bfff17 	ldw	r2,-4(fp)
 4011418:	18bff31e 	bne	r3,r2,40113e8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 401141c:	e037883a 	mov	sp,fp
 4011420:	df000017 	ldw	fp,0(sp)
 4011424:	dec00104 	addi	sp,sp,4
 4011428:	f800283a 	ret

0401142c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 401142c:	defffe04 	addi	sp,sp,-8
 4011430:	dfc00115 	stw	ra,4(sp)
 4011434:	df000015 	stw	fp,0(sp)
 4011438:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 401143c:	010100f4 	movhi	r4,1027
 4011440:	21045d04 	addi	r4,r4,4468
 4011444:	014100f4 	movhi	r5,1027
 4011448:	2976d904 	addi	r5,r5,-9372
 401144c:	018100f4 	movhi	r6,1027
 4011450:	31845d04 	addi	r6,r6,4468
 4011454:	40113c00 	call	40113c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4011458:	01010034 	movhi	r4,1024
 401145c:	21000804 	addi	r4,r4,32
 4011460:	01410034 	movhi	r5,1024
 4011464:	29400804 	addi	r5,r5,32
 4011468:	01810034 	movhi	r6,1024
 401146c:	31806e04 	addi	r6,r6,440
 4011470:	40113c00 	call	40113c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4011474:	01010074 	movhi	r4,1025
 4011478:	210e0104 	addi	r4,r4,14340
 401147c:	01410074 	movhi	r5,1025
 4011480:	294e0104 	addi	r5,r5,14340
 4011484:	018100f4 	movhi	r6,1027
 4011488:	31b6d904 	addi	r6,r6,-9372
 401148c:	40113c00 	call	40113c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4011490:	4012b680 	call	4012b68 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4011494:	4012d540 	call	4012d54 <alt_icache_flush_all>
}
 4011498:	e037883a 	mov	sp,fp
 401149c:	dfc00117 	ldw	ra,4(sp)
 40114a0:	df000017 	ldw	fp,0(sp)
 40114a4:	dec00204 	addi	sp,sp,8
 40114a8:	f800283a 	ret

040114ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40114ac:	defffe04 	addi	sp,sp,-8
 40114b0:	dfc00115 	stw	ra,4(sp)
 40114b4:	df000015 	stw	fp,0(sp)
 40114b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40114bc:	008100f4 	movhi	r2,1027
 40114c0:	10845804 	addi	r2,r2,4448
 40114c4:	10800017 	ldw	r2,0(r2)
 40114c8:	10000526 	beq	r2,zero,40114e0 <alt_get_errno+0x34>
 40114cc:	008100f4 	movhi	r2,1027
 40114d0:	10845804 	addi	r2,r2,4448
 40114d4:	10800017 	ldw	r2,0(r2)
 40114d8:	103ee83a 	callr	r2
 40114dc:	00000206 	br	40114e8 <alt_get_errno+0x3c>
 40114e0:	008100f4 	movhi	r2,1027
 40114e4:	1091e504 	addi	r2,r2,18324
}
 40114e8:	e037883a 	mov	sp,fp
 40114ec:	dfc00117 	ldw	ra,4(sp)
 40114f0:	df000017 	ldw	fp,0(sp)
 40114f4:	dec00204 	addi	sp,sp,8
 40114f8:	f800283a 	ret

040114fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 40114fc:	defff904 	addi	sp,sp,-28
 4011500:	dfc00615 	stw	ra,24(sp)
 4011504:	df000515 	stw	fp,20(sp)
 4011508:	df000504 	addi	fp,sp,20
 401150c:	e13ffd15 	stw	r4,-12(fp)
 4011510:	e17ffe15 	stw	r5,-8(fp)
 4011514:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4011518:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401151c:	e0bffd17 	ldw	r2,-12(fp)
 4011520:	10000616 	blt	r2,zero,401153c <lseek+0x40>
 4011524:	e0bffd17 	ldw	r2,-12(fp)
 4011528:	10c00324 	muli	r3,r2,12
 401152c:	008100f4 	movhi	r2,1027
 4011530:	10bfd304 	addi	r2,r2,-180
 4011534:	1885883a 	add	r2,r3,r2
 4011538:	00000106 	br	4011540 <lseek+0x44>
 401153c:	0005883a 	mov	r2,zero
 4011540:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4011544:	e0bffc17 	ldw	r2,-16(fp)
 4011548:	10001026 	beq	r2,zero,401158c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 401154c:	e0bffc17 	ldw	r2,-16(fp)
 4011550:	10800017 	ldw	r2,0(r2)
 4011554:	10800717 	ldw	r2,28(r2)
 4011558:	10000926 	beq	r2,zero,4011580 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 401155c:	e0bffc17 	ldw	r2,-16(fp)
 4011560:	10800017 	ldw	r2,0(r2)
 4011564:	10800717 	ldw	r2,28(r2)
 4011568:	e13ffc17 	ldw	r4,-16(fp)
 401156c:	e17ffe17 	ldw	r5,-8(fp)
 4011570:	e1bfff17 	ldw	r6,-4(fp)
 4011574:	103ee83a 	callr	r2
 4011578:	e0bffb15 	stw	r2,-20(fp)
 401157c:	00000506 	br	4011594 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4011580:	00bfde84 	movi	r2,-134
 4011584:	e0bffb15 	stw	r2,-20(fp)
 4011588:	00000206 	br	4011594 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 401158c:	00bfebc4 	movi	r2,-81
 4011590:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4011594:	e0bffb17 	ldw	r2,-20(fp)
 4011598:	1000060e 	bge	r2,zero,40115b4 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
 401159c:	40114ac0 	call	40114ac <alt_get_errno>
 40115a0:	e0fffb17 	ldw	r3,-20(fp)
 40115a4:	00c7c83a 	sub	r3,zero,r3
 40115a8:	10c00015 	stw	r3,0(r2)
    rc = -1;
 40115ac:	00bfffc4 	movi	r2,-1
 40115b0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 40115b4:	e0bffb17 	ldw	r2,-20(fp)
}
 40115b8:	e037883a 	mov	sp,fp
 40115bc:	dfc00117 	ldw	ra,4(sp)
 40115c0:	df000017 	ldw	fp,0(sp)
 40115c4:	dec00204 	addi	sp,sp,8
 40115c8:	f800283a 	ret

040115cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40115cc:	defffd04 	addi	sp,sp,-12
 40115d0:	dfc00215 	stw	ra,8(sp)
 40115d4:	df000115 	stw	fp,4(sp)
 40115d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40115dc:	0009883a 	mov	r4,zero
 40115e0:	4011c140 	call	4011c14 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40115e4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40115e8:	4011c480 	call	4011c48 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40115ec:	010100f4 	movhi	r4,1027
 40115f0:	2136d104 	addi	r4,r4,-9404
 40115f4:	014100f4 	movhi	r5,1027
 40115f8:	2976d104 	addi	r5,r5,-9404
 40115fc:	018100f4 	movhi	r6,1027
 4011600:	31b6d104 	addi	r6,r6,-9404
 4011604:	4012e440 	call	4012e44 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4011608:	4012c9c0 	call	4012c9c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 401160c:	01010074 	movhi	r4,1025
 4011610:	210b3e04 	addi	r4,r4,11512
 4011614:	40134300 	call	4013430 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4011618:	d12d9f17 	ldw	r4,-18820(gp)
 401161c:	d0eda017 	ldw	r3,-18816(gp)
 4011620:	d0ada117 	ldw	r2,-18812(gp)
 4011624:	180b883a 	mov	r5,r3
 4011628:	100d883a 	mov	r6,r2
 401162c:	40052680 	call	4005268 <main>
 4011630:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4011634:	01000044 	movi	r4,1
 4011638:	4010e180 	call	4010e18 <close>
  exit (result);
 401163c:	e13fff17 	ldw	r4,-4(fp)
 4011640:	40134440 	call	4013444 <exit>

04011644 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4011644:	defffe04 	addi	sp,sp,-8
 4011648:	df000115 	stw	fp,4(sp)
 401164c:	df000104 	addi	fp,sp,4
 4011650:	e13fff15 	stw	r4,-4(fp)
}
 4011654:	e037883a 	mov	sp,fp
 4011658:	df000017 	ldw	fp,0(sp)
 401165c:	dec00104 	addi	sp,sp,4
 4011660:	f800283a 	ret

04011664 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4011664:	defffe04 	addi	sp,sp,-8
 4011668:	df000115 	stw	fp,4(sp)
 401166c:	df000104 	addi	fp,sp,4
 4011670:	e13fff15 	stw	r4,-4(fp)
}
 4011674:	e037883a 	mov	sp,fp
 4011678:	df000017 	ldw	fp,0(sp)
 401167c:	dec00104 	addi	sp,sp,4
 4011680:	f800283a 	ret

04011684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011684:	defffe04 	addi	sp,sp,-8
 4011688:	dfc00115 	stw	ra,4(sp)
 401168c:	df000015 	stw	fp,0(sp)
 4011690:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011694:	008100f4 	movhi	r2,1027
 4011698:	10845804 	addi	r2,r2,4448
 401169c:	10800017 	ldw	r2,0(r2)
 40116a0:	10000526 	beq	r2,zero,40116b8 <alt_get_errno+0x34>
 40116a4:	008100f4 	movhi	r2,1027
 40116a8:	10845804 	addi	r2,r2,4448
 40116ac:	10800017 	ldw	r2,0(r2)
 40116b0:	103ee83a 	callr	r2
 40116b4:	00000206 	br	40116c0 <alt_get_errno+0x3c>
 40116b8:	008100f4 	movhi	r2,1027
 40116bc:	1091e504 	addi	r2,r2,18324
}
 40116c0:	e037883a 	mov	sp,fp
 40116c4:	dfc00117 	ldw	ra,4(sp)
 40116c8:	df000017 	ldw	fp,0(sp)
 40116cc:	dec00204 	addi	sp,sp,8
 40116d0:	f800283a 	ret

040116d4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 40116d4:	defff904 	addi	sp,sp,-28
 40116d8:	dfc00615 	stw	ra,24(sp)
 40116dc:	df000515 	stw	fp,20(sp)
 40116e0:	df000504 	addi	fp,sp,20
 40116e4:	e13ffd15 	stw	r4,-12(fp)
 40116e8:	e17ffe15 	stw	r5,-8(fp)
 40116ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40116f0:	e0bffd17 	ldw	r2,-12(fp)
 40116f4:	10000616 	blt	r2,zero,4011710 <read+0x3c>
 40116f8:	e0bffd17 	ldw	r2,-12(fp)
 40116fc:	10c00324 	muli	r3,r2,12
 4011700:	008100f4 	movhi	r2,1027
 4011704:	10bfd304 	addi	r2,r2,-180
 4011708:	1885883a 	add	r2,r3,r2
 401170c:	00000106 	br	4011714 <read+0x40>
 4011710:	0005883a 	mov	r2,zero
 4011714:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4011718:	e0bffb17 	ldw	r2,-20(fp)
 401171c:	10002026 	beq	r2,zero,40117a0 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4011720:	e0bffb17 	ldw	r2,-20(fp)
 4011724:	10800217 	ldw	r2,8(r2)
 4011728:	108000cc 	andi	r2,r2,3
 401172c:	10800060 	cmpeqi	r2,r2,1
 4011730:	1000171e 	bne	r2,zero,4011790 <read+0xbc>
        (fd->dev->read))
 4011734:	e0bffb17 	ldw	r2,-20(fp)
 4011738:	10800017 	ldw	r2,0(r2)
 401173c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4011740:	10001326 	beq	r2,zero,4011790 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4011744:	e0bffb17 	ldw	r2,-20(fp)
 4011748:	10800017 	ldw	r2,0(r2)
 401174c:	10c00517 	ldw	r3,20(r2)
 4011750:	e0bfff17 	ldw	r2,-4(fp)
 4011754:	e13ffb17 	ldw	r4,-20(fp)
 4011758:	e17ffe17 	ldw	r5,-8(fp)
 401175c:	100d883a 	mov	r6,r2
 4011760:	183ee83a 	callr	r3
 4011764:	e0bffc15 	stw	r2,-16(fp)
 4011768:	e0bffc17 	ldw	r2,-16(fp)
 401176c:	1000060e 	bge	r2,zero,4011788 <read+0xb4>
        {
          ALT_ERRNO = -rval;
 4011770:	40116840 	call	4011684 <alt_get_errno>
 4011774:	e0fffc17 	ldw	r3,-16(fp)
 4011778:	00c7c83a 	sub	r3,zero,r3
 401177c:	10c00015 	stw	r3,0(r2)
          return -1;
 4011780:	00bfffc4 	movi	r2,-1
 4011784:	00000a06 	br	40117b0 <read+0xdc>
        }
        return rval;
 4011788:	e0bffc17 	ldw	r2,-16(fp)
 401178c:	00000806 	br	40117b0 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4011790:	40116840 	call	4011684 <alt_get_errno>
 4011794:	00c00344 	movi	r3,13
 4011798:	10c00015 	stw	r3,0(r2)
 401179c:	00000306 	br	40117ac <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 40117a0:	40116840 	call	4011684 <alt_get_errno>
 40117a4:	00c01444 	movi	r3,81
 40117a8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 40117ac:	00bfffc4 	movi	r2,-1
}
 40117b0:	e037883a 	mov	sp,fp
 40117b4:	dfc00117 	ldw	ra,4(sp)
 40117b8:	df000017 	ldw	fp,0(sp)
 40117bc:	dec00204 	addi	sp,sp,8
 40117c0:	f800283a 	ret

040117c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40117c4:	defffe04 	addi	sp,sp,-8
 40117c8:	df000115 	stw	fp,4(sp)
 40117cc:	df000104 	addi	fp,sp,4
 40117d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 40117d4:	e0bfff17 	ldw	r2,-4(fp)
 40117d8:	108000d0 	cmplti	r2,r2,3
 40117dc:	10000d1e 	bne	r2,zero,4011814 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 40117e0:	00c100f4 	movhi	r3,1027
 40117e4:	18ffd304 	addi	r3,r3,-180
 40117e8:	e0bfff17 	ldw	r2,-4(fp)
 40117ec:	10800324 	muli	r2,r2,12
 40117f0:	1885883a 	add	r2,r3,r2
 40117f4:	10800204 	addi	r2,r2,8
 40117f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40117fc:	00c100f4 	movhi	r3,1027
 4011800:	18ffd304 	addi	r3,r3,-180
 4011804:	e0bfff17 	ldw	r2,-4(fp)
 4011808:	10800324 	muli	r2,r2,12
 401180c:	1885883a 	add	r2,r3,r2
 4011810:	10000015 	stw	zero,0(r2)
  }
}
 4011814:	e037883a 	mov	sp,fp
 4011818:	df000017 	ldw	fp,0(sp)
 401181c:	dec00104 	addi	sp,sp,4
 4011820:	f800283a 	ret

04011824 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4011824:	defff904 	addi	sp,sp,-28
 4011828:	df000615 	stw	fp,24(sp)
 401182c:	df000604 	addi	fp,sp,24
 4011830:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011834:	0005303a 	rdctl	r2,status
 4011838:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401183c:	e0fffc17 	ldw	r3,-16(fp)
 4011840:	00bfff84 	movi	r2,-2
 4011844:	1884703a 	and	r2,r3,r2
 4011848:	1001703a 	wrctl	status,r2
  
  return context;
 401184c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4011850:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4011854:	d0a00f17 	ldw	r2,-32708(gp)
 4011858:	10c000c4 	addi	r3,r2,3
 401185c:	00bfff04 	movi	r2,-4
 4011860:	1884703a 	and	r2,r3,r2
 4011864:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4011868:	d0e00f17 	ldw	r3,-32708(gp)
 401186c:	e0bfff17 	ldw	r2,-4(fp)
 4011870:	1885883a 	add	r2,r3,r2
 4011874:	00c20034 	movhi	r3,2048
 4011878:	18c00004 	addi	r3,r3,0
 401187c:	1880062e 	bgeu	r3,r2,4011898 <sbrk+0x74>
 4011880:	e0bffa17 	ldw	r2,-24(fp)
 4011884:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011888:	e0bffd17 	ldw	r2,-12(fp)
 401188c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4011890:	00bfffc4 	movi	r2,-1
 4011894:	00000b06 	br	40118c4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4011898:	d0a00f17 	ldw	r2,-32708(gp)
 401189c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 40118a0:	d0e00f17 	ldw	r3,-32708(gp)
 40118a4:	e0bfff17 	ldw	r2,-4(fp)
 40118a8:	1885883a 	add	r2,r3,r2
 40118ac:	d0a00f15 	stw	r2,-32708(gp)
 40118b0:	e0bffa17 	ldw	r2,-24(fp)
 40118b4:	e0bffe15 	stw	r2,-8(fp)
 40118b8:	e0bffe17 	ldw	r2,-8(fp)
 40118bc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 40118c0:	e0bffb17 	ldw	r2,-20(fp)
} 
 40118c4:	e037883a 	mov	sp,fp
 40118c8:	df000017 	ldw	fp,0(sp)
 40118cc:	dec00104 	addi	sp,sp,4
 40118d0:	f800283a 	ret

040118d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 40118d4:	defffa04 	addi	sp,sp,-24
 40118d8:	df000515 	stw	fp,20(sp)
 40118dc:	df000504 	addi	fp,sp,20
 40118e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40118e4:	0005303a 	rdctl	r2,status
 40118e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40118ec:	e0fffc17 	ldw	r3,-16(fp)
 40118f0:	00bfff84 	movi	r2,-2
 40118f4:	1884703a 	and	r2,r3,r2
 40118f8:	1001703a 	wrctl	status,r2
  
  return context;
 40118fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4011900:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4011904:	e0bfff17 	ldw	r2,-4(fp)
 4011908:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401190c:	e0bffd17 	ldw	r2,-12(fp)
 4011910:	10800017 	ldw	r2,0(r2)
 4011914:	e0fffd17 	ldw	r3,-12(fp)
 4011918:	18c00117 	ldw	r3,4(r3)
 401191c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4011920:	e0bffd17 	ldw	r2,-12(fp)
 4011924:	10800117 	ldw	r2,4(r2)
 4011928:	e0fffd17 	ldw	r3,-12(fp)
 401192c:	18c00017 	ldw	r3,0(r3)
 4011930:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4011934:	e0bffd17 	ldw	r2,-12(fp)
 4011938:	e0fffd17 	ldw	r3,-12(fp)
 401193c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4011940:	e0bffd17 	ldw	r2,-12(fp)
 4011944:	e0fffd17 	ldw	r3,-12(fp)
 4011948:	10c00015 	stw	r3,0(r2)
 401194c:	e0bffb17 	ldw	r2,-20(fp)
 4011950:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011954:	e0bffe17 	ldw	r2,-8(fp)
 4011958:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 401195c:	e037883a 	mov	sp,fp
 4011960:	df000017 	ldw	fp,0(sp)
 4011964:	dec00104 	addi	sp,sp,4
 4011968:	f800283a 	ret

0401196c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 401196c:	defffb04 	addi	sp,sp,-20
 4011970:	dfc00415 	stw	ra,16(sp)
 4011974:	df000315 	stw	fp,12(sp)
 4011978:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 401197c:	d0a01017 	ldw	r2,-32704(gp)
 4011980:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4011984:	d0ada317 	ldw	r2,-18804(gp)
 4011988:	10800044 	addi	r2,r2,1
 401198c:	d0ada315 	stw	r2,-18804(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4011990:	00002e06 	br	4011a4c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4011994:	e0bffd17 	ldw	r2,-12(fp)
 4011998:	10800017 	ldw	r2,0(r2)
 401199c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40119a0:	e0bffd17 	ldw	r2,-12(fp)
 40119a4:	10800403 	ldbu	r2,16(r2)
 40119a8:	10803fcc 	andi	r2,r2,255
 40119ac:	10000426 	beq	r2,zero,40119c0 <alt_tick+0x54>
 40119b0:	d0ada317 	ldw	r2,-18804(gp)
 40119b4:	1000021e 	bne	r2,zero,40119c0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 40119b8:	e0bffd17 	ldw	r2,-12(fp)
 40119bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 40119c0:	e0bffd17 	ldw	r2,-12(fp)
 40119c4:	10800217 	ldw	r2,8(r2)
 40119c8:	d0eda317 	ldw	r3,-18804(gp)
 40119cc:	18801d36 	bltu	r3,r2,4011a44 <alt_tick+0xd8>
 40119d0:	e0bffd17 	ldw	r2,-12(fp)
 40119d4:	10800403 	ldbu	r2,16(r2)
 40119d8:	10803fcc 	andi	r2,r2,255
 40119dc:	1000191e 	bne	r2,zero,4011a44 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 40119e0:	e0bffd17 	ldw	r2,-12(fp)
 40119e4:	10c00317 	ldw	r3,12(r2)
 40119e8:	e0bffd17 	ldw	r2,-12(fp)
 40119ec:	10800517 	ldw	r2,20(r2)
 40119f0:	1009883a 	mov	r4,r2
 40119f4:	183ee83a 	callr	r3
 40119f8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 40119fc:	e0bfff17 	ldw	r2,-4(fp)
 4011a00:	1000031e 	bne	r2,zero,4011a10 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4011a04:	e13ffd17 	ldw	r4,-12(fp)
 4011a08:	40118d40 	call	40118d4 <alt_alarm_stop>
 4011a0c:	00000d06 	br	4011a44 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4011a10:	e0bffd17 	ldw	r2,-12(fp)
 4011a14:	10c00217 	ldw	r3,8(r2)
 4011a18:	e0bfff17 	ldw	r2,-4(fp)
 4011a1c:	1887883a 	add	r3,r3,r2
 4011a20:	e0bffd17 	ldw	r2,-12(fp)
 4011a24:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4011a28:	e0bffd17 	ldw	r2,-12(fp)
 4011a2c:	10c00217 	ldw	r3,8(r2)
 4011a30:	d0ada317 	ldw	r2,-18804(gp)
 4011a34:	1880032e 	bgeu	r3,r2,4011a44 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4011a38:	e0bffd17 	ldw	r2,-12(fp)
 4011a3c:	00c00044 	movi	r3,1
 4011a40:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4011a44:	e0bffe17 	ldw	r2,-8(fp)
 4011a48:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4011a4c:	e0fffd17 	ldw	r3,-12(fp)
 4011a50:	d0a01004 	addi	r2,gp,-32704
 4011a54:	18bfcf1e 	bne	r3,r2,4011994 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4011a58:	0001883a 	nop
}
 4011a5c:	e037883a 	mov	sp,fp
 4011a60:	dfc00117 	ldw	ra,4(sp)
 4011a64:	df000017 	ldw	fp,0(sp)
 4011a68:	dec00204 	addi	sp,sp,8
 4011a6c:	f800283a 	ret

04011a70 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4011a70:	defffd04 	addi	sp,sp,-12
 4011a74:	dfc00215 	stw	ra,8(sp)
 4011a78:	df000115 	stw	fp,4(sp)
 4011a7c:	df000104 	addi	fp,sp,4
 4011a80:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4011a84:	e13fff17 	ldw	r4,-4(fp)
 4011a88:	4012a140 	call	4012a14 <alt_busy_sleep>
}
 4011a8c:	e037883a 	mov	sp,fp
 4011a90:	dfc00117 	ldw	ra,4(sp)
 4011a94:	df000017 	ldw	fp,0(sp)
 4011a98:	dec00204 	addi	sp,sp,8
 4011a9c:	f800283a 	ret

04011aa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011aa0:	defffe04 	addi	sp,sp,-8
 4011aa4:	dfc00115 	stw	ra,4(sp)
 4011aa8:	df000015 	stw	fp,0(sp)
 4011aac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011ab0:	008100f4 	movhi	r2,1027
 4011ab4:	10845804 	addi	r2,r2,4448
 4011ab8:	10800017 	ldw	r2,0(r2)
 4011abc:	10000526 	beq	r2,zero,4011ad4 <alt_get_errno+0x34>
 4011ac0:	008100f4 	movhi	r2,1027
 4011ac4:	10845804 	addi	r2,r2,4448
 4011ac8:	10800017 	ldw	r2,0(r2)
 4011acc:	103ee83a 	callr	r2
 4011ad0:	00000206 	br	4011adc <alt_get_errno+0x3c>
 4011ad4:	008100f4 	movhi	r2,1027
 4011ad8:	1091e504 	addi	r2,r2,18324
}
 4011adc:	e037883a 	mov	sp,fp
 4011ae0:	dfc00117 	ldw	ra,4(sp)
 4011ae4:	df000017 	ldw	fp,0(sp)
 4011ae8:	dec00204 	addi	sp,sp,8
 4011aec:	f800283a 	ret

04011af0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4011af0:	defff904 	addi	sp,sp,-28
 4011af4:	dfc00615 	stw	ra,24(sp)
 4011af8:	df000515 	stw	fp,20(sp)
 4011afc:	df000504 	addi	fp,sp,20
 4011b00:	e13ffd15 	stw	r4,-12(fp)
 4011b04:	e17ffe15 	stw	r5,-8(fp)
 4011b08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4011b0c:	e0bffd17 	ldw	r2,-12(fp)
 4011b10:	10000616 	blt	r2,zero,4011b2c <write+0x3c>
 4011b14:	e0bffd17 	ldw	r2,-12(fp)
 4011b18:	10c00324 	muli	r3,r2,12
 4011b1c:	008100f4 	movhi	r2,1027
 4011b20:	10bfd304 	addi	r2,r2,-180
 4011b24:	1885883a 	add	r2,r3,r2
 4011b28:	00000106 	br	4011b30 <write+0x40>
 4011b2c:	0005883a 	mov	r2,zero
 4011b30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4011b34:	e0bffb17 	ldw	r2,-20(fp)
 4011b38:	10001f26 	beq	r2,zero,4011bb8 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4011b3c:	e0bffb17 	ldw	r2,-20(fp)
 4011b40:	10800217 	ldw	r2,8(r2)
 4011b44:	108000cc 	andi	r2,r2,3
 4011b48:	10001726 	beq	r2,zero,4011ba8 <write+0xb8>
 4011b4c:	e0bffb17 	ldw	r2,-20(fp)
 4011b50:	10800017 	ldw	r2,0(r2)
 4011b54:	10800617 	ldw	r2,24(r2)
 4011b58:	10001326 	beq	r2,zero,4011ba8 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4011b5c:	e0bffb17 	ldw	r2,-20(fp)
 4011b60:	10800017 	ldw	r2,0(r2)
 4011b64:	10c00617 	ldw	r3,24(r2)
 4011b68:	e0bfff17 	ldw	r2,-4(fp)
 4011b6c:	e13ffb17 	ldw	r4,-20(fp)
 4011b70:	e17ffe17 	ldw	r5,-8(fp)
 4011b74:	100d883a 	mov	r6,r2
 4011b78:	183ee83a 	callr	r3
 4011b7c:	e0bffc15 	stw	r2,-16(fp)
 4011b80:	e0bffc17 	ldw	r2,-16(fp)
 4011b84:	1000060e 	bge	r2,zero,4011ba0 <write+0xb0>
      {
        ALT_ERRNO = -rval;
 4011b88:	4011aa00 	call	4011aa0 <alt_get_errno>
 4011b8c:	e0fffc17 	ldw	r3,-16(fp)
 4011b90:	00c7c83a 	sub	r3,zero,r3
 4011b94:	10c00015 	stw	r3,0(r2)
        return -1;
 4011b98:	00bfffc4 	movi	r2,-1
 4011b9c:	00000a06 	br	4011bc8 <write+0xd8>
      }
      return rval;
 4011ba0:	e0bffc17 	ldw	r2,-16(fp)
 4011ba4:	00000806 	br	4011bc8 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4011ba8:	4011aa00 	call	4011aa0 <alt_get_errno>
 4011bac:	00c00344 	movi	r3,13
 4011bb0:	10c00015 	stw	r3,0(r2)
 4011bb4:	00000306 	br	4011bc4 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4011bb8:	4011aa00 	call	4011aa0 <alt_get_errno>
 4011bbc:	00c01444 	movi	r3,81
 4011bc0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 4011bc4:	00bfffc4 	movi	r2,-1
}
 4011bc8:	e037883a 	mov	sp,fp
 4011bcc:	dfc00117 	ldw	ra,4(sp)
 4011bd0:	df000017 	ldw	fp,0(sp)
 4011bd4:	dec00204 	addi	sp,sp,8
 4011bd8:	f800283a 	ret

04011bdc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4011bdc:	defffd04 	addi	sp,sp,-12
 4011be0:	dfc00215 	stw	ra,8(sp)
 4011be4:	df000115 	stw	fp,4(sp)
 4011be8:	df000104 	addi	fp,sp,4
 4011bec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4011bf0:	e13fff17 	ldw	r4,-4(fp)
 4011bf4:	014100f4 	movhi	r5,1027
 4011bf8:	29445504 	addi	r5,r5,4436
 4011bfc:	4012bfc0 	call	4012bfc <alt_dev_llist_insert>
}
 4011c00:	e037883a 	mov	sp,fp
 4011c04:	dfc00117 	ldw	ra,4(sp)
 4011c08:	df000017 	ldw	fp,0(sp)
 4011c0c:	dec00204 	addi	sp,sp,8
 4011c10:	f800283a 	ret

04011c14 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4011c14:	defffd04 	addi	sp,sp,-12
 4011c18:	dfc00215 	stw	ra,8(sp)
 4011c1c:	df000115 	stw	fp,4(sp)
 4011c20:	df000104 	addi	fp,sp,4
 4011c24:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
 4011c28:	401312c0 	call	401312c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4011c2c:	00800044 	movi	r2,1
 4011c30:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4011c34:	e037883a 	mov	sp,fp
 4011c38:	dfc00117 	ldw	ra,4(sp)
 4011c3c:	df000017 	ldw	fp,0(sp)
 4011c40:	dec00204 	addi	sp,sp,8
 4011c44:	f800283a 	ret

04011c48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4011c48:	defffe04 	addi	sp,sp,-8
 4011c4c:	dfc00115 	stw	ra,4(sp)
 4011c50:	df000015 	stw	fp,0(sp)
 4011c54:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4011c58:	01020034 	movhi	r4,2048
 4011c5c:	21040804 	addi	r4,r4,4128
 4011c60:	000b883a 	mov	r5,zero
 4011c64:	01800044 	movi	r6,1
 4011c68:	01c0fa04 	movi	r7,1000
 4011c6c:	401298c0 	call	401298c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4011c70:	010100f4 	movhi	r4,1027
 4011c74:	21003d04 	addi	r4,r4,244
 4011c78:	000b883a 	mov	r5,zero
 4011c7c:	000d883a 	mov	r6,zero
 4011c80:	4011e100 	call	4011e10 <altera_avalon_jtag_uart_init>
 4011c84:	010100f4 	movhi	r4,1027
 4011c88:	21003304 	addi	r4,r4,204
 4011c8c:	4011bdc0 	call	4011bdc <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( TOUCH_PANEL_SPI, touch_panel_spi);
 4011c90:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 4011c94:	0001883a 	nop
}
 4011c98:	e037883a 	mov	sp,fp
 4011c9c:	dfc00117 	ldw	ra,4(sp)
 4011ca0:	df000017 	ldw	fp,0(sp)
 4011ca4:	dec00204 	addi	sp,sp,8
 4011ca8:	f800283a 	ret

04011cac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4011cac:	defffa04 	addi	sp,sp,-24
 4011cb0:	dfc00515 	stw	ra,20(sp)
 4011cb4:	df000415 	stw	fp,16(sp)
 4011cb8:	df000404 	addi	fp,sp,16
 4011cbc:	e13ffd15 	stw	r4,-12(fp)
 4011cc0:	e17ffe15 	stw	r5,-8(fp)
 4011cc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4011cc8:	e0bffd17 	ldw	r2,-12(fp)
 4011ccc:	10800017 	ldw	r2,0(r2)
 4011cd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4011cd4:	e0bffc17 	ldw	r2,-16(fp)
 4011cd8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 4011cdc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4011ce0:	10800217 	ldw	r2,8(r2)
 4011ce4:	1809883a 	mov	r4,r3
 4011ce8:	e17ffe17 	ldw	r5,-8(fp)
 4011cec:	e1bfff17 	ldw	r6,-4(fp)
 4011cf0:	100f883a 	mov	r7,r2
 4011cf4:	40122d40 	call	40122d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4011cf8:	e037883a 	mov	sp,fp
 4011cfc:	dfc00117 	ldw	ra,4(sp)
 4011d00:	df000017 	ldw	fp,0(sp)
 4011d04:	dec00204 	addi	sp,sp,8
 4011d08:	f800283a 	ret

04011d0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4011d0c:	defffa04 	addi	sp,sp,-24
 4011d10:	dfc00515 	stw	ra,20(sp)
 4011d14:	df000415 	stw	fp,16(sp)
 4011d18:	df000404 	addi	fp,sp,16
 4011d1c:	e13ffd15 	stw	r4,-12(fp)
 4011d20:	e17ffe15 	stw	r5,-8(fp)
 4011d24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4011d28:	e0bffd17 	ldw	r2,-12(fp)
 4011d2c:	10800017 	ldw	r2,0(r2)
 4011d30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4011d34:	e0bffc17 	ldw	r2,-16(fp)
 4011d38:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 4011d3c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4011d40:	10800217 	ldw	r2,8(r2)
 4011d44:	1809883a 	mov	r4,r3
 4011d48:	e17ffe17 	ldw	r5,-8(fp)
 4011d4c:	e1bfff17 	ldw	r6,-4(fp)
 4011d50:	100f883a 	mov	r7,r2
 4011d54:	40124ec0 	call	40124ec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4011d58:	e037883a 	mov	sp,fp
 4011d5c:	dfc00117 	ldw	ra,4(sp)
 4011d60:	df000017 	ldw	fp,0(sp)
 4011d64:	dec00204 	addi	sp,sp,8
 4011d68:	f800283a 	ret

04011d6c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4011d6c:	defffc04 	addi	sp,sp,-16
 4011d70:	dfc00315 	stw	ra,12(sp)
 4011d74:	df000215 	stw	fp,8(sp)
 4011d78:	df000204 	addi	fp,sp,8
 4011d7c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4011d80:	e0bfff17 	ldw	r2,-4(fp)
 4011d84:	10800017 	ldw	r2,0(r2)
 4011d88:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4011d8c:	e0bffe17 	ldw	r2,-8(fp)
 4011d90:	10c00a04 	addi	r3,r2,40
 4011d94:	e0bfff17 	ldw	r2,-4(fp)
 4011d98:	10800217 	ldw	r2,8(r2)
 4011d9c:	1809883a 	mov	r4,r3
 4011da0:	100b883a 	mov	r5,r2
 4011da4:	40121780 	call	4012178 <altera_avalon_jtag_uart_close>
}
 4011da8:	e037883a 	mov	sp,fp
 4011dac:	dfc00117 	ldw	ra,4(sp)
 4011db0:	df000017 	ldw	fp,0(sp)
 4011db4:	dec00204 	addi	sp,sp,8
 4011db8:	f800283a 	ret

04011dbc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4011dbc:	defffa04 	addi	sp,sp,-24
 4011dc0:	dfc00515 	stw	ra,20(sp)
 4011dc4:	df000415 	stw	fp,16(sp)
 4011dc8:	df000404 	addi	fp,sp,16
 4011dcc:	e13ffd15 	stw	r4,-12(fp)
 4011dd0:	e17ffe15 	stw	r5,-8(fp)
 4011dd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4011dd8:	e0bffd17 	ldw	r2,-12(fp)
 4011ddc:	10800017 	ldw	r2,0(r2)
 4011de0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4011de4:	e0bffc17 	ldw	r2,-16(fp)
 4011de8:	10800a04 	addi	r2,r2,40
 4011dec:	1009883a 	mov	r4,r2
 4011df0:	e17ffe17 	ldw	r5,-8(fp)
 4011df4:	e1bfff17 	ldw	r6,-4(fp)
 4011df8:	40121e00 	call	40121e0 <altera_avalon_jtag_uart_ioctl>
}
 4011dfc:	e037883a 	mov	sp,fp
 4011e00:	dfc00117 	ldw	ra,4(sp)
 4011e04:	df000017 	ldw	fp,0(sp)
 4011e08:	dec00204 	addi	sp,sp,8
 4011e0c:	f800283a 	ret

04011e10 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4011e10:	defffa04 	addi	sp,sp,-24
 4011e14:	dfc00515 	stw	ra,20(sp)
 4011e18:	df000415 	stw	fp,16(sp)
 4011e1c:	df000404 	addi	fp,sp,16
 4011e20:	e13ffd15 	stw	r4,-12(fp)
 4011e24:	e17ffe15 	stw	r5,-8(fp)
 4011e28:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4011e2c:	e0bffd17 	ldw	r2,-12(fp)
 4011e30:	00c00044 	movi	r3,1
 4011e34:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4011e38:	e0bffd17 	ldw	r2,-12(fp)
 4011e3c:	10800017 	ldw	r2,0(r2)
 4011e40:	10800104 	addi	r2,r2,4
 4011e44:	e0fffd17 	ldw	r3,-12(fp)
 4011e48:	18c00817 	ldw	r3,32(r3)
 4011e4c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4011e50:	e0fffe17 	ldw	r3,-8(fp)
 4011e54:	e0bfff17 	ldw	r2,-4(fp)
 4011e58:	d8000015 	stw	zero,0(sp)
 4011e5c:	1809883a 	mov	r4,r3
 4011e60:	100b883a 	mov	r5,r2
 4011e64:	01810074 	movhi	r6,1025
 4011e68:	3187b404 	addi	r6,r6,7888
 4011e6c:	e1fffd17 	ldw	r7,-12(fp)
 4011e70:	40110080 	call	4011008 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4011e74:	e0bffd17 	ldw	r2,-12(fp)
 4011e78:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4011e7c:	e0bffd17 	ldw	r2,-12(fp)
 4011e80:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4011e84:	008100f4 	movhi	r2,1027
 4011e88:	1091ed04 	addi	r2,r2,18356
 4011e8c:	10800017 	ldw	r2,0(r2)
 4011e90:	1809883a 	mov	r4,r3
 4011e94:	100b883a 	mov	r5,r2
 4011e98:	01810074 	movhi	r6,1025
 4011e9c:	31883504 	addi	r6,r6,8404
 4011ea0:	e1fffd17 	ldw	r7,-12(fp)
 4011ea4:	4010c880 	call	4010c88 <alt_alarm_start>
 4011ea8:	1000040e 	bge	r2,zero,4011ebc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4011eac:	e0bffd17 	ldw	r2,-12(fp)
 4011eb0:	00e00034 	movhi	r3,32768
 4011eb4:	18ffffc4 	addi	r3,r3,-1
 4011eb8:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4011ebc:	e037883a 	mov	sp,fp
 4011ec0:	dfc00117 	ldw	ra,4(sp)
 4011ec4:	df000017 	ldw	fp,0(sp)
 4011ec8:	dec00204 	addi	sp,sp,8
 4011ecc:	f800283a 	ret

04011ed0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4011ed0:	defff804 	addi	sp,sp,-32
 4011ed4:	df000715 	stw	fp,28(sp)
 4011ed8:	df000704 	addi	fp,sp,28
 4011edc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4011ee0:	e0bfff17 	ldw	r2,-4(fp)
 4011ee4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4011ee8:	e0bffb17 	ldw	r2,-20(fp)
 4011eec:	10800017 	ldw	r2,0(r2)
 4011ef0:	e0bffc15 	stw	r2,-16(fp)
 4011ef4:	00000106 	br	4011efc <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 4011ef8:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4011efc:	e0bffc17 	ldw	r2,-16(fp)
 4011f00:	10800104 	addi	r2,r2,4
 4011f04:	10800037 	ldwio	r2,0(r2)
 4011f08:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4011f0c:	e0bffd17 	ldw	r2,-12(fp)
 4011f10:	1080c00c 	andi	r2,r2,768
 4011f14:	10006a26 	beq	r2,zero,40120c0 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4011f18:	e0bffd17 	ldw	r2,-12(fp)
 4011f1c:	1080400c 	andi	r2,r2,256
 4011f20:	10003326 	beq	r2,zero,4011ff0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4011f24:	00800074 	movhi	r2,1
 4011f28:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4011f2c:	e0bffb17 	ldw	r2,-20(fp)
 4011f30:	10800a17 	ldw	r2,40(r2)
 4011f34:	10800044 	addi	r2,r2,1
 4011f38:	1081ffcc 	andi	r2,r2,2047
 4011f3c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4011f40:	e0bffb17 	ldw	r2,-20(fp)
 4011f44:	10c00b17 	ldw	r3,44(r2)
 4011f48:	e0bffe17 	ldw	r2,-8(fp)
 4011f4c:	18801426 	beq	r3,r2,4011fa0 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4011f50:	e0bffc17 	ldw	r2,-16(fp)
 4011f54:	10800037 	ldwio	r2,0(r2)
 4011f58:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4011f5c:	e0bff917 	ldw	r2,-28(fp)
 4011f60:	10a0000c 	andi	r2,r2,32768
 4011f64:	10001026 	beq	r2,zero,4011fa8 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4011f68:	e0bffb17 	ldw	r2,-20(fp)
 4011f6c:	10800a17 	ldw	r2,40(r2)
 4011f70:	e0fff917 	ldw	r3,-28(fp)
 4011f74:	e13ffb17 	ldw	r4,-20(fp)
 4011f78:	2085883a 	add	r2,r4,r2
 4011f7c:	10800e04 	addi	r2,r2,56
 4011f80:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4011f84:	e0bffb17 	ldw	r2,-20(fp)
 4011f88:	10800a17 	ldw	r2,40(r2)
 4011f8c:	10800044 	addi	r2,r2,1
 4011f90:	10c1ffcc 	andi	r3,r2,2047
 4011f94:	e0bffb17 	ldw	r2,-20(fp)
 4011f98:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4011f9c:	003fe306 	br	4011f2c <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4011fa0:	0001883a 	nop
 4011fa4:	00000106 	br	4011fac <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4011fa8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4011fac:	e0bff917 	ldw	r2,-28(fp)
 4011fb0:	10bfffec 	andhi	r2,r2,65535
 4011fb4:	10000e26 	beq	r2,zero,4011ff0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4011fb8:	e0bffb17 	ldw	r2,-20(fp)
 4011fbc:	10c00817 	ldw	r3,32(r2)
 4011fc0:	00bfff84 	movi	r2,-2
 4011fc4:	1886703a 	and	r3,r3,r2
 4011fc8:	e0bffb17 	ldw	r2,-20(fp)
 4011fcc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4011fd0:	e0bffc17 	ldw	r2,-16(fp)
 4011fd4:	10800104 	addi	r2,r2,4
 4011fd8:	e0fffb17 	ldw	r3,-20(fp)
 4011fdc:	18c00817 	ldw	r3,32(r3)
 4011fe0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4011fe4:	e0bffc17 	ldw	r2,-16(fp)
 4011fe8:	10800104 	addi	r2,r2,4
 4011fec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4011ff0:	e0bffd17 	ldw	r2,-12(fp)
 4011ff4:	1080800c 	andi	r2,r2,512
 4011ff8:	103fbf26 	beq	r2,zero,4011ef8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4011ffc:	e0bffd17 	ldw	r2,-12(fp)
 4012000:	1004d43a 	srli	r2,r2,16
 4012004:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4012008:	00001406 	br	401205c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 401200c:	e0bffc17 	ldw	r2,-16(fp)
 4012010:	e0fffb17 	ldw	r3,-20(fp)
 4012014:	18c00d17 	ldw	r3,52(r3)
 4012018:	e13ffb17 	ldw	r4,-20(fp)
 401201c:	20c7883a 	add	r3,r4,r3
 4012020:	18c20e04 	addi	r3,r3,2104
 4012024:	18c00003 	ldbu	r3,0(r3)
 4012028:	18c03fcc 	andi	r3,r3,255
 401202c:	18c0201c 	xori	r3,r3,128
 4012030:	18ffe004 	addi	r3,r3,-128
 4012034:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4012038:	e0bffb17 	ldw	r2,-20(fp)
 401203c:	10800d17 	ldw	r2,52(r2)
 4012040:	10800044 	addi	r2,r2,1
 4012044:	10c1ffcc 	andi	r3,r2,2047
 4012048:	e0bffb17 	ldw	r2,-20(fp)
 401204c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4012050:	e0bffa17 	ldw	r2,-24(fp)
 4012054:	10bfffc4 	addi	r2,r2,-1
 4012058:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 401205c:	e0bffa17 	ldw	r2,-24(fp)
 4012060:	10000526 	beq	r2,zero,4012078 <altera_avalon_jtag_uart_irq+0x1a8>
 4012064:	e0bffb17 	ldw	r2,-20(fp)
 4012068:	10c00d17 	ldw	r3,52(r2)
 401206c:	e0bffb17 	ldw	r2,-20(fp)
 4012070:	10800c17 	ldw	r2,48(r2)
 4012074:	18bfe51e 	bne	r3,r2,401200c <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4012078:	e0bffa17 	ldw	r2,-24(fp)
 401207c:	103f9e26 	beq	r2,zero,4011ef8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4012080:	e0bffb17 	ldw	r2,-20(fp)
 4012084:	10c00817 	ldw	r3,32(r2)
 4012088:	00bfff44 	movi	r2,-3
 401208c:	1886703a 	and	r3,r3,r2
 4012090:	e0bffb17 	ldw	r2,-20(fp)
 4012094:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4012098:	e0bffb17 	ldw	r2,-20(fp)
 401209c:	10800017 	ldw	r2,0(r2)
 40120a0:	10800104 	addi	r2,r2,4
 40120a4:	e0fffb17 	ldw	r3,-20(fp)
 40120a8:	18c00817 	ldw	r3,32(r3)
 40120ac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40120b0:	e0bffc17 	ldw	r2,-16(fp)
 40120b4:	10800104 	addi	r2,r2,4
 40120b8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 40120bc:	003f8e06 	br	4011ef8 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 40120c0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 40120c4:	e037883a 	mov	sp,fp
 40120c8:	df000017 	ldw	fp,0(sp)
 40120cc:	dec00104 	addi	sp,sp,4
 40120d0:	f800283a 	ret

040120d4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 40120d4:	defffc04 	addi	sp,sp,-16
 40120d8:	df000315 	stw	fp,12(sp)
 40120dc:	df000304 	addi	fp,sp,12
 40120e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 40120e4:	e0bfff17 	ldw	r2,-4(fp)
 40120e8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 40120ec:	e0bffd17 	ldw	r2,-12(fp)
 40120f0:	10800017 	ldw	r2,0(r2)
 40120f4:	10800104 	addi	r2,r2,4
 40120f8:	10800037 	ldwio	r2,0(r2)
 40120fc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4012100:	e0bffe17 	ldw	r2,-8(fp)
 4012104:	1081000c 	andi	r2,r2,1024
 4012108:	10000a26 	beq	r2,zero,4012134 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 401210c:	e0bffd17 	ldw	r2,-12(fp)
 4012110:	10800017 	ldw	r2,0(r2)
 4012114:	10800104 	addi	r2,r2,4
 4012118:	e0fffd17 	ldw	r3,-12(fp)
 401211c:	18c00817 	ldw	r3,32(r3)
 4012120:	18c10014 	ori	r3,r3,1024
 4012124:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 4012128:	e0bffd17 	ldw	r2,-12(fp)
 401212c:	10000915 	stw	zero,36(r2)
 4012130:	00000a06 	br	401215c <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4012134:	e0bffd17 	ldw	r2,-12(fp)
 4012138:	10800917 	ldw	r2,36(r2)
 401213c:	00e00034 	movhi	r3,32768
 4012140:	18ffff04 	addi	r3,r3,-4
 4012144:	18800536 	bltu	r3,r2,401215c <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 4012148:	e0bffd17 	ldw	r2,-12(fp)
 401214c:	10800917 	ldw	r2,36(r2)
 4012150:	10c00044 	addi	r3,r2,1
 4012154:	e0bffd17 	ldw	r2,-12(fp)
 4012158:	10c00915 	stw	r3,36(r2)
 401215c:	008100f4 	movhi	r2,1027
 4012160:	1091ed04 	addi	r2,r2,18356
 4012164:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4012168:	e037883a 	mov	sp,fp
 401216c:	df000017 	ldw	fp,0(sp)
 4012170:	dec00104 	addi	sp,sp,4
 4012174:	f800283a 	ret

04012178 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4012178:	defffd04 	addi	sp,sp,-12
 401217c:	df000215 	stw	fp,8(sp)
 4012180:	df000204 	addi	fp,sp,8
 4012184:	e13ffe15 	stw	r4,-8(fp)
 4012188:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401218c:	00000506 	br	40121a4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4012190:	e0bfff17 	ldw	r2,-4(fp)
 4012194:	1090000c 	andi	r2,r2,16384
 4012198:	10000226 	beq	r2,zero,40121a4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 401219c:	00bffd44 	movi	r2,-11
 40121a0:	00000b06 	br	40121d0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 40121a4:	e0bffe17 	ldw	r2,-8(fp)
 40121a8:	10c00d17 	ldw	r3,52(r2)
 40121ac:	e0bffe17 	ldw	r2,-8(fp)
 40121b0:	10800c17 	ldw	r2,48(r2)
 40121b4:	18800526 	beq	r3,r2,40121cc <altera_avalon_jtag_uart_close+0x54>
 40121b8:	e0bffe17 	ldw	r2,-8(fp)
 40121bc:	10c00917 	ldw	r3,36(r2)
 40121c0:	e0bffe17 	ldw	r2,-8(fp)
 40121c4:	10800117 	ldw	r2,4(r2)
 40121c8:	18bff136 	bltu	r3,r2,4012190 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 40121cc:	0005883a 	mov	r2,zero
}
 40121d0:	e037883a 	mov	sp,fp
 40121d4:	df000017 	ldw	fp,0(sp)
 40121d8:	dec00104 	addi	sp,sp,4
 40121dc:	f800283a 	ret

040121e0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 40121e0:	defffa04 	addi	sp,sp,-24
 40121e4:	df000515 	stw	fp,20(sp)
 40121e8:	df000504 	addi	fp,sp,20
 40121ec:	e13ffd15 	stw	r4,-12(fp)
 40121f0:	e17ffe15 	stw	r5,-8(fp)
 40121f4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 40121f8:	00bff9c4 	movi	r2,-25
 40121fc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4012200:	e0bffe17 	ldw	r2,-8(fp)
 4012204:	10da8060 	cmpeqi	r3,r2,27137
 4012208:	1800031e 	bne	r3,zero,4012218 <altera_avalon_jtag_uart_ioctl+0x38>
 401220c:	109a80a0 	cmpeqi	r2,r2,27138
 4012210:	1000181e 	bne	r2,zero,4012274 <altera_avalon_jtag_uart_ioctl+0x94>
 4012214:	00002606 	br	40122b0 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4012218:	e0bffd17 	ldw	r2,-12(fp)
 401221c:	10c00117 	ldw	r3,4(r2)
 4012220:	00a00034 	movhi	r2,32768
 4012224:	10bfffc4 	addi	r2,r2,-1
 4012228:	18802226 	beq	r3,r2,40122b4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 401222c:	e0bfff17 	ldw	r2,-4(fp)
 4012230:	10800017 	ldw	r2,0(r2)
 4012234:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4012238:	e0bffc17 	ldw	r2,-16(fp)
 401223c:	10800090 	cmplti	r2,r2,2
 4012240:	1000061e 	bne	r2,zero,401225c <altera_avalon_jtag_uart_ioctl+0x7c>
 4012244:	e0fffc17 	ldw	r3,-16(fp)
 4012248:	00a00034 	movhi	r2,32768
 401224c:	10bfffc4 	addi	r2,r2,-1
 4012250:	18800226 	beq	r3,r2,401225c <altera_avalon_jtag_uart_ioctl+0x7c>
 4012254:	e0bffc17 	ldw	r2,-16(fp)
 4012258:	00000206 	br	4012264 <altera_avalon_jtag_uart_ioctl+0x84>
 401225c:	00a00034 	movhi	r2,32768
 4012260:	10bfff84 	addi	r2,r2,-2
 4012264:	e0fffd17 	ldw	r3,-12(fp)
 4012268:	18800115 	stw	r2,4(r3)
      rc = 0;
 401226c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4012270:	00001006 	br	40122b4 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4012274:	e0bffd17 	ldw	r2,-12(fp)
 4012278:	10c00117 	ldw	r3,4(r2)
 401227c:	00a00034 	movhi	r2,32768
 4012280:	10bfffc4 	addi	r2,r2,-1
 4012284:	18800d26 	beq	r3,r2,40122bc <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4012288:	e0bffd17 	ldw	r2,-12(fp)
 401228c:	10c00917 	ldw	r3,36(r2)
 4012290:	e0bffd17 	ldw	r2,-12(fp)
 4012294:	10800117 	ldw	r2,4(r2)
 4012298:	1885803a 	cmpltu	r2,r3,r2
 401229c:	10c03fcc 	andi	r3,r2,255
 40122a0:	e0bfff17 	ldw	r2,-4(fp)
 40122a4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 40122a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 40122ac:	00000306 	br	40122bc <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 40122b0:	00000306 	br	40122c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 40122b4:	0001883a 	nop
 40122b8:	00000106 	br	40122c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 40122bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 40122c0:	e0bffb17 	ldw	r2,-20(fp)
}
 40122c4:	e037883a 	mov	sp,fp
 40122c8:	df000017 	ldw	fp,0(sp)
 40122cc:	dec00104 	addi	sp,sp,4
 40122d0:	f800283a 	ret

040122d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 40122d4:	defff304 	addi	sp,sp,-52
 40122d8:	dfc00c15 	stw	ra,48(sp)
 40122dc:	df000b15 	stw	fp,44(sp)
 40122e0:	df000b04 	addi	fp,sp,44
 40122e4:	e13ffc15 	stw	r4,-16(fp)
 40122e8:	e17ffd15 	stw	r5,-12(fp)
 40122ec:	e1bffe15 	stw	r6,-8(fp)
 40122f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 40122f4:	e0bffd17 	ldw	r2,-12(fp)
 40122f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40122fc:	00004706 	br	401241c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4012300:	e0bffc17 	ldw	r2,-16(fp)
 4012304:	10800a17 	ldw	r2,40(r2)
 4012308:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 401230c:	e0bffc17 	ldw	r2,-16(fp)
 4012310:	10800b17 	ldw	r2,44(r2)
 4012314:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4012318:	e0fff717 	ldw	r3,-36(fp)
 401231c:	e0bff817 	ldw	r2,-32(fp)
 4012320:	18800536 	bltu	r3,r2,4012338 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4012324:	e0fff717 	ldw	r3,-36(fp)
 4012328:	e0bff817 	ldw	r2,-32(fp)
 401232c:	1885c83a 	sub	r2,r3,r2
 4012330:	e0bff615 	stw	r2,-40(fp)
 4012334:	00000406 	br	4012348 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4012338:	00c20004 	movi	r3,2048
 401233c:	e0bff817 	ldw	r2,-32(fp)
 4012340:	1885c83a 	sub	r2,r3,r2
 4012344:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4012348:	e0bff617 	ldw	r2,-40(fp)
 401234c:	10001e26 	beq	r2,zero,40123c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4012350:	e0fffe17 	ldw	r3,-8(fp)
 4012354:	e0bff617 	ldw	r2,-40(fp)
 4012358:	1880022e 	bgeu	r3,r2,4012364 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 401235c:	e0bffe17 	ldw	r2,-8(fp)
 4012360:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4012364:	e0bff817 	ldw	r2,-32(fp)
 4012368:	10800e04 	addi	r2,r2,56
 401236c:	e0fffc17 	ldw	r3,-16(fp)
 4012370:	1885883a 	add	r2,r3,r2
 4012374:	e13ff517 	ldw	r4,-44(fp)
 4012378:	100b883a 	mov	r5,r2
 401237c:	e1bff617 	ldw	r6,-40(fp)
 4012380:	40090840 	call	4009084 <memcpy>
      ptr   += n;
 4012384:	e0fff517 	ldw	r3,-44(fp)
 4012388:	e0bff617 	ldw	r2,-40(fp)
 401238c:	1885883a 	add	r2,r3,r2
 4012390:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4012394:	e0fffe17 	ldw	r3,-8(fp)
 4012398:	e0bff617 	ldw	r2,-40(fp)
 401239c:	1885c83a 	sub	r2,r3,r2
 40123a0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40123a4:	e0fff817 	ldw	r3,-32(fp)
 40123a8:	e0bff617 	ldw	r2,-40(fp)
 40123ac:	1885883a 	add	r2,r3,r2
 40123b0:	10c1ffcc 	andi	r3,r2,2047
 40123b4:	e0bffc17 	ldw	r2,-16(fp)
 40123b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 40123bc:	e0bffe17 	ldw	r2,-8(fp)
 40123c0:	00bfcf16 	blt	zero,r2,4012300 <altera_avalon_jtag_uart_read+0x2c>
 40123c4:	00000106 	br	40123cc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 40123c8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 40123cc:	e0fff517 	ldw	r3,-44(fp)
 40123d0:	e0bffd17 	ldw	r2,-12(fp)
 40123d4:	1880141e 	bne	r3,r2,4012428 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 40123d8:	e0bfff17 	ldw	r2,-4(fp)
 40123dc:	1090000c 	andi	r2,r2,16384
 40123e0:	1000131e 	bne	r2,zero,4012430 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 40123e4:	0001883a 	nop
 40123e8:	e0bffc17 	ldw	r2,-16(fp)
 40123ec:	10c00a17 	ldw	r3,40(r2)
 40123f0:	e0bff717 	ldw	r2,-36(fp)
 40123f4:	1880051e 	bne	r3,r2,401240c <altera_avalon_jtag_uart_read+0x138>
 40123f8:	e0bffc17 	ldw	r2,-16(fp)
 40123fc:	10c00917 	ldw	r3,36(r2)
 4012400:	e0bffc17 	ldw	r2,-16(fp)
 4012404:	10800117 	ldw	r2,4(r2)
 4012408:	18bff736 	bltu	r3,r2,40123e8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 401240c:	e0bffc17 	ldw	r2,-16(fp)
 4012410:	10c00a17 	ldw	r3,40(r2)
 4012414:	e0bff717 	ldw	r2,-36(fp)
 4012418:	18800726 	beq	r3,r2,4012438 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401241c:	e0bffe17 	ldw	r2,-8(fp)
 4012420:	00bfb716 	blt	zero,r2,4012300 <altera_avalon_jtag_uart_read+0x2c>
 4012424:	00000506 	br	401243c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4012428:	0001883a 	nop
 401242c:	00000306 	br	401243c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4012430:	0001883a 	nop
 4012434:	00000106 	br	401243c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4012438:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 401243c:	e0fff517 	ldw	r3,-44(fp)
 4012440:	e0bffd17 	ldw	r2,-12(fp)
 4012444:	18801726 	beq	r3,r2,40124a4 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012448:	0005303a 	rdctl	r2,status
 401244c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012450:	e0fffa17 	ldw	r3,-24(fp)
 4012454:	00bfff84 	movi	r2,-2
 4012458:	1884703a 	and	r2,r3,r2
 401245c:	1001703a 	wrctl	status,r2
  
  return context;
 4012460:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4012464:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4012468:	e0bffc17 	ldw	r2,-16(fp)
 401246c:	10800817 	ldw	r2,32(r2)
 4012470:	10c00054 	ori	r3,r2,1
 4012474:	e0bffc17 	ldw	r2,-16(fp)
 4012478:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401247c:	e0bffc17 	ldw	r2,-16(fp)
 4012480:	10800017 	ldw	r2,0(r2)
 4012484:	10800104 	addi	r2,r2,4
 4012488:	e0fffc17 	ldw	r3,-16(fp)
 401248c:	18c00817 	ldw	r3,32(r3)
 4012490:	10c00035 	stwio	r3,0(r2)
 4012494:	e0bff917 	ldw	r2,-28(fp)
 4012498:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401249c:	e0bffb17 	ldw	r2,-20(fp)
 40124a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 40124a4:	e0fff517 	ldw	r3,-44(fp)
 40124a8:	e0bffd17 	ldw	r2,-12(fp)
 40124ac:	18800426 	beq	r3,r2,40124c0 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 40124b0:	e0fff517 	ldw	r3,-44(fp)
 40124b4:	e0bffd17 	ldw	r2,-12(fp)
 40124b8:	1885c83a 	sub	r2,r3,r2
 40124bc:	00000606 	br	40124d8 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 40124c0:	e0bfff17 	ldw	r2,-4(fp)
 40124c4:	1090000c 	andi	r2,r2,16384
 40124c8:	10000226 	beq	r2,zero,40124d4 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 40124cc:	00bffd44 	movi	r2,-11
 40124d0:	00000106 	br	40124d8 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 40124d4:	00bffec4 	movi	r2,-5
}
 40124d8:	e037883a 	mov	sp,fp
 40124dc:	dfc00117 	ldw	ra,4(sp)
 40124e0:	df000017 	ldw	fp,0(sp)
 40124e4:	dec00204 	addi	sp,sp,8
 40124e8:	f800283a 	ret

040124ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40124ec:	defff304 	addi	sp,sp,-52
 40124f0:	dfc00c15 	stw	ra,48(sp)
 40124f4:	df000b15 	stw	fp,44(sp)
 40124f8:	df000b04 	addi	fp,sp,44
 40124fc:	e13ffc15 	stw	r4,-16(fp)
 4012500:	e17ffd15 	stw	r5,-12(fp)
 4012504:	e1bffe15 	stw	r6,-8(fp)
 4012508:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401250c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4012510:	e0bffd17 	ldw	r2,-12(fp)
 4012514:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4012518:	00003706 	br	40125f8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401251c:	e0bffc17 	ldw	r2,-16(fp)
 4012520:	10800c17 	ldw	r2,48(r2)
 4012524:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 4012528:	e0bffc17 	ldw	r2,-16(fp)
 401252c:	10800d17 	ldw	r2,52(r2)
 4012530:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4012534:	e0fff817 	ldw	r3,-32(fp)
 4012538:	e0bff517 	ldw	r2,-44(fp)
 401253c:	1880062e 	bgeu	r3,r2,4012558 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4012540:	e0fff517 	ldw	r3,-44(fp)
 4012544:	e0bff817 	ldw	r2,-32(fp)
 4012548:	1885c83a 	sub	r2,r3,r2
 401254c:	10bfffc4 	addi	r2,r2,-1
 4012550:	e0bff615 	stw	r2,-40(fp)
 4012554:	00000b06 	br	4012584 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4012558:	e0bff517 	ldw	r2,-44(fp)
 401255c:	10000526 	beq	r2,zero,4012574 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4012560:	00c20004 	movi	r3,2048
 4012564:	e0bff817 	ldw	r2,-32(fp)
 4012568:	1885c83a 	sub	r2,r3,r2
 401256c:	e0bff615 	stw	r2,-40(fp)
 4012570:	00000406 	br	4012584 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4012574:	00c1ffc4 	movi	r3,2047
 4012578:	e0bff817 	ldw	r2,-32(fp)
 401257c:	1885c83a 	sub	r2,r3,r2
 4012580:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4012584:	e0bff617 	ldw	r2,-40(fp)
 4012588:	10001e26 	beq	r2,zero,4012604 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 401258c:	e0fffe17 	ldw	r3,-8(fp)
 4012590:	e0bff617 	ldw	r2,-40(fp)
 4012594:	1880022e 	bgeu	r3,r2,40125a0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4012598:	e0bffe17 	ldw	r2,-8(fp)
 401259c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40125a0:	e0bff817 	ldw	r2,-32(fp)
 40125a4:	10820e04 	addi	r2,r2,2104
 40125a8:	e0fffc17 	ldw	r3,-16(fp)
 40125ac:	1885883a 	add	r2,r3,r2
 40125b0:	1009883a 	mov	r4,r2
 40125b4:	e17ffd17 	ldw	r5,-12(fp)
 40125b8:	e1bff617 	ldw	r6,-40(fp)
 40125bc:	40090840 	call	4009084 <memcpy>
      ptr   += n;
 40125c0:	e0fffd17 	ldw	r3,-12(fp)
 40125c4:	e0bff617 	ldw	r2,-40(fp)
 40125c8:	1885883a 	add	r2,r3,r2
 40125cc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 40125d0:	e0fffe17 	ldw	r3,-8(fp)
 40125d4:	e0bff617 	ldw	r2,-40(fp)
 40125d8:	1885c83a 	sub	r2,r3,r2
 40125dc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40125e0:	e0fff817 	ldw	r3,-32(fp)
 40125e4:	e0bff617 	ldw	r2,-40(fp)
 40125e8:	1885883a 	add	r2,r3,r2
 40125ec:	10c1ffcc 	andi	r3,r2,2047
 40125f0:	e0bffc17 	ldw	r2,-16(fp)
 40125f4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40125f8:	e0bffe17 	ldw	r2,-8(fp)
 40125fc:	00bfc716 	blt	zero,r2,401251c <altera_avalon_jtag_uart_write+0x30>
 4012600:	00000106 	br	4012608 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4012604:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012608:	0005303a 	rdctl	r2,status
 401260c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012610:	e0fffa17 	ldw	r3,-24(fp)
 4012614:	00bfff84 	movi	r2,-2
 4012618:	1884703a 	and	r2,r3,r2
 401261c:	1001703a 	wrctl	status,r2
  
  return context;
 4012620:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4012624:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4012628:	e0bffc17 	ldw	r2,-16(fp)
 401262c:	10800817 	ldw	r2,32(r2)
 4012630:	10c00094 	ori	r3,r2,2
 4012634:	e0bffc17 	ldw	r2,-16(fp)
 4012638:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401263c:	e0bffc17 	ldw	r2,-16(fp)
 4012640:	10800017 	ldw	r2,0(r2)
 4012644:	10800104 	addi	r2,r2,4
 4012648:	e0fffc17 	ldw	r3,-16(fp)
 401264c:	18c00817 	ldw	r3,32(r3)
 4012650:	10c00035 	stwio	r3,0(r2)
 4012654:	e0bff917 	ldw	r2,-28(fp)
 4012658:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401265c:	e0bffb17 	ldw	r2,-20(fp)
 4012660:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4012664:	e0bffe17 	ldw	r2,-8(fp)
 4012668:	0080110e 	bge	zero,r2,40126b0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 401266c:	e0bfff17 	ldw	r2,-4(fp)
 4012670:	1090000c 	andi	r2,r2,16384
 4012674:	1000111e 	bne	r2,zero,40126bc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4012678:	0001883a 	nop
 401267c:	e0bffc17 	ldw	r2,-16(fp)
 4012680:	10c00d17 	ldw	r3,52(r2)
 4012684:	e0bff517 	ldw	r2,-44(fp)
 4012688:	1880051e 	bne	r3,r2,40126a0 <altera_avalon_jtag_uart_write+0x1b4>
 401268c:	e0bffc17 	ldw	r2,-16(fp)
 4012690:	10c00917 	ldw	r3,36(r2)
 4012694:	e0bffc17 	ldw	r2,-16(fp)
 4012698:	10800117 	ldw	r2,4(r2)
 401269c:	18bff736 	bltu	r3,r2,401267c <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 40126a0:	e0bffc17 	ldw	r2,-16(fp)
 40126a4:	10c00d17 	ldw	r3,52(r2)
 40126a8:	e0bff517 	ldw	r2,-44(fp)
 40126ac:	18800526 	beq	r3,r2,40126c4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 40126b0:	e0bffe17 	ldw	r2,-8(fp)
 40126b4:	00bfd016 	blt	zero,r2,40125f8 <altera_avalon_jtag_uart_write+0x10c>
 40126b8:	00000306 	br	40126c8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 40126bc:	0001883a 	nop
 40126c0:	00000106 	br	40126c8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 40126c4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 40126c8:	e0fffd17 	ldw	r3,-12(fp)
 40126cc:	e0bff717 	ldw	r2,-36(fp)
 40126d0:	18800426 	beq	r3,r2,40126e4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 40126d4:	e0fffd17 	ldw	r3,-12(fp)
 40126d8:	e0bff717 	ldw	r2,-36(fp)
 40126dc:	1885c83a 	sub	r2,r3,r2
 40126e0:	00000606 	br	40126fc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 40126e4:	e0bfff17 	ldw	r2,-4(fp)
 40126e8:	1090000c 	andi	r2,r2,16384
 40126ec:	10000226 	beq	r2,zero,40126f8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 40126f0:	00bffd44 	movi	r2,-11
 40126f4:	00000106 	br	40126fc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 40126f8:	00bffec4 	movi	r2,-5
}
 40126fc:	e037883a 	mov	sp,fp
 4012700:	dfc00117 	ldw	ra,4(sp)
 4012704:	df000017 	ldw	fp,0(sp)
 4012708:	dec00204 	addi	sp,sp,8
 401270c:	f800283a 	ret

04012710 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 4012710:	defff404 	addi	sp,sp,-48
 4012714:	df000b15 	stw	fp,44(sp)
 4012718:	df000b04 	addi	fp,sp,44
 401271c:	e13ffc15 	stw	r4,-16(fp)
 4012720:	e17ffd15 	stw	r5,-12(fp)
 4012724:	e1bffe15 	stw	r6,-8(fp)
 4012728:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 401272c:	e0ffff17 	ldw	r3,-4(fp)
 4012730:	e0bffe17 	ldw	r2,-8(fp)
 4012734:	1885883a 	add	r2,r3,r2
 4012738:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 401273c:	e0c00217 	ldw	r3,8(fp)
 4012740:	e0800117 	ldw	r2,4(fp)
 4012744:	1885883a 	add	r2,r3,r2
 4012748:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 401274c:	e0800117 	ldw	r2,4(fp)
 4012750:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 4012754:	e0bffe17 	ldw	r2,-8(fp)
 4012758:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 401275c:	00800044 	movi	r2,1
 4012760:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 4012764:	e0bffc17 	ldw	r2,-16(fp)
 4012768:	10800504 	addi	r2,r2,20
 401276c:	e0fffd17 	ldw	r3,-12(fp)
 4012770:	01000044 	movi	r4,1
 4012774:	20c6983a 	sll	r3,r4,r3
 4012778:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 401277c:	e0800317 	ldw	r2,12(fp)
 4012780:	1080008c 	andi	r2,r2,2
 4012784:	1000041e 	bne	r2,zero,4012798 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4012788:	e0bffc17 	ldw	r2,-16(fp)
 401278c:	10800304 	addi	r2,r2,12
 4012790:	00c10004 	movi	r3,1024
 4012794:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4012798:	e0bffc17 	ldw	r2,-16(fp)
 401279c:	10800037 	ldwio	r2,0(r2)
 40127a0:	00000106 	br	40127a8 <alt_avalon_spi_command+0x98>

      if (read_ignore == 0 && read_data == read_end)
        break;
    }
    
  }
 40127a4:	0001883a 	nop
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 40127a8:	e0bffc17 	ldw	r2,-16(fp)
 40127ac:	10800204 	addi	r2,r2,8
 40127b0:	10800037 	ldwio	r2,0(r2)
 40127b4:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 40127b8:	e0bffa17 	ldw	r2,-24(fp)
 40127bc:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 40127c0:	10000226 	beq	r2,zero,40127cc <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 40127c4:	e0bff717 	ldw	r2,-36(fp)
 40127c8:	1000031e 	bne	r2,zero,40127d8 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 40127cc:	e0bffa17 	ldw	r2,-24(fp)
 40127d0:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 40127d4:	103ff426 	beq	r2,zero,40127a8 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 40127d8:	e0bffa17 	ldw	r2,-24(fp)
 40127dc:	1080100c 	andi	r2,r2,64
 40127e0:	10001e26 	beq	r2,zero,401285c <alt_avalon_spi_command+0x14c>
 40127e4:	e0bff717 	ldw	r2,-36(fp)
 40127e8:	00801c0e 	bge	zero,r2,401285c <alt_avalon_spi_command+0x14c>
    {
      credits--;
 40127ec:	e0bff717 	ldw	r2,-36(fp)
 40127f0:	10bfffc4 	addi	r2,r2,-1
 40127f4:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 40127f8:	e0ffff17 	ldw	r3,-4(fp)
 40127fc:	e0bff817 	ldw	r2,-32(fp)
 4012800:	18800a2e 	bgeu	r3,r2,401282c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 4012804:	e0bffc17 	ldw	r2,-16(fp)
 4012808:	10800104 	addi	r2,r2,4
 401280c:	e0ffff17 	ldw	r3,-4(fp)
 4012810:	18c00003 	ldbu	r3,0(r3)
 4012814:	18c03fcc 	andi	r3,r3,255
 4012818:	e13fff17 	ldw	r4,-4(fp)
 401281c:	21000044 	addi	r4,r4,1
 4012820:	e13fff15 	stw	r4,-4(fp)
 4012824:	10c00035 	stwio	r3,0(r2)
 4012828:	00000c06 	br	401285c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 401282c:	e0bff517 	ldw	r2,-44(fp)
 4012830:	10000826 	beq	r2,zero,4012854 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 4012834:	e0bff517 	ldw	r2,-44(fp)
 4012838:	10bfffc4 	addi	r2,r2,-1
 401283c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 4012840:	e0bffc17 	ldw	r2,-16(fp)
 4012844:	10800104 	addi	r2,r2,4
 4012848:	0007883a 	mov	r3,zero
 401284c:	10c00035 	stwio	r3,0(r2)
 4012850:	00000206 	br	401285c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 4012854:	00bf0004 	movi	r2,-1024
 4012858:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 401285c:	e0bffa17 	ldw	r2,-24(fp)
 4012860:	1080200c 	andi	r2,r2,128
 4012864:	103fcf26 	beq	r2,zero,40127a4 <alt_avalon_spi_command+0x94>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4012868:	e0bffc17 	ldw	r2,-16(fp)
 401286c:	10800037 	ldwio	r2,0(r2)
 4012870:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 4012874:	e0bff617 	ldw	r2,-40(fp)
 4012878:	10000426 	beq	r2,zero,401288c <alt_avalon_spi_command+0x17c>
        read_ignore--;
 401287c:	e0bff617 	ldw	r2,-40(fp)
 4012880:	10bfffc4 	addi	r2,r2,-1
 4012884:	e0bff615 	stw	r2,-40(fp)
 4012888:	00000706 	br	40128a8 <alt_avalon_spi_command+0x198>
      else
        *read_data++ = (alt_u8)rxdata;
 401288c:	e0bffb17 	ldw	r2,-20(fp)
 4012890:	1007883a 	mov	r3,r2
 4012894:	e0800217 	ldw	r2,8(fp)
 4012898:	10c00005 	stb	r3,0(r2)
 401289c:	e0800217 	ldw	r2,8(fp)
 40128a0:	10800044 	addi	r2,r2,1
 40128a4:	e0800215 	stw	r2,8(fp)
      credits++;
 40128a8:	e0bff717 	ldw	r2,-36(fp)
 40128ac:	10800044 	addi	r2,r2,1
 40128b0:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 40128b4:	e0bff617 	ldw	r2,-40(fp)
 40128b8:	103fba1e 	bne	r2,zero,40127a4 <alt_avalon_spi_command+0x94>
 40128bc:	e0c00217 	ldw	r3,8(fp)
 40128c0:	e0bff917 	ldw	r2,-28(fp)
 40128c4:	18bfb71e 	bne	r3,r2,40127a4 <alt_avalon_spi_command+0x94>
        break;
 40128c8:	0001883a 	nop
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 40128cc:	e0bffc17 	ldw	r2,-16(fp)
 40128d0:	10800204 	addi	r2,r2,8
 40128d4:	10800037 	ldwio	r2,0(r2)
 40128d8:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 40128dc:	e0bffa17 	ldw	r2,-24(fp)
 40128e0:	1080080c 	andi	r2,r2,32
 40128e4:	103ff926 	beq	r2,zero,40128cc <alt_avalon_spi_command+0x1bc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 40128e8:	e0800317 	ldw	r2,12(fp)
 40128ec:	1080004c 	andi	r2,r2,1
 40128f0:	1000041e 	bne	r2,zero,4012904 <alt_avalon_spi_command+0x1f4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 40128f4:	e0bffc17 	ldw	r2,-16(fp)
 40128f8:	10800304 	addi	r2,r2,12
 40128fc:	0007883a 	mov	r3,zero
 4012900:	10c00035 	stwio	r3,0(r2)

  return read_length;
 4012904:	e0800117 	ldw	r2,4(fp)
}
 4012908:	e037883a 	mov	sp,fp
 401290c:	df000017 	ldw	fp,0(sp)
 4012910:	dec00104 	addi	sp,sp,4
 4012914:	f800283a 	ret

04012918 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4012918:	defffa04 	addi	sp,sp,-24
 401291c:	dfc00515 	stw	ra,20(sp)
 4012920:	df000415 	stw	fp,16(sp)
 4012924:	df000404 	addi	fp,sp,16
 4012928:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 401292c:	0007883a 	mov	r3,zero
 4012930:	e0bfff17 	ldw	r2,-4(fp)
 4012934:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4012938:	e0bfff17 	ldw	r2,-4(fp)
 401293c:	10800104 	addi	r2,r2,4
 4012940:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012944:	0005303a 	rdctl	r2,status
 4012948:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401294c:	e0fffd17 	ldw	r3,-12(fp)
 4012950:	00bfff84 	movi	r2,-2
 4012954:	1884703a 	and	r2,r3,r2
 4012958:	1001703a 	wrctl	status,r2
  
  return context;
 401295c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4012960:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 4012964:	401196c0 	call	401196c <alt_tick>
 4012968:	e0bffc17 	ldw	r2,-16(fp)
 401296c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012970:	e0bffe17 	ldw	r2,-8(fp)
 4012974:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4012978:	e037883a 	mov	sp,fp
 401297c:	dfc00117 	ldw	ra,4(sp)
 4012980:	df000017 	ldw	fp,0(sp)
 4012984:	dec00204 	addi	sp,sp,8
 4012988:	f800283a 	ret

0401298c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401298c:	defff804 	addi	sp,sp,-32
 4012990:	dfc00715 	stw	ra,28(sp)
 4012994:	df000615 	stw	fp,24(sp)
 4012998:	df000604 	addi	fp,sp,24
 401299c:	e13ffc15 	stw	r4,-16(fp)
 40129a0:	e17ffd15 	stw	r5,-12(fp)
 40129a4:	e1bffe15 	stw	r6,-8(fp)
 40129a8:	e1ffff15 	stw	r7,-4(fp)
 40129ac:	e0bfff17 	ldw	r2,-4(fp)
 40129b0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 40129b4:	008100f4 	movhi	r2,1027
 40129b8:	1091ed04 	addi	r2,r2,18356
 40129bc:	10800017 	ldw	r2,0(r2)
 40129c0:	1000041e 	bne	r2,zero,40129d4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 40129c4:	008100f4 	movhi	r2,1027
 40129c8:	1091ed04 	addi	r2,r2,18356
 40129cc:	e0fffb17 	ldw	r3,-20(fp)
 40129d0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 40129d4:	e0bffc17 	ldw	r2,-16(fp)
 40129d8:	10800104 	addi	r2,r2,4
 40129dc:	00c001c4 	movi	r3,7
 40129e0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 40129e4:	d8000015 	stw	zero,0(sp)
 40129e8:	e13ffd17 	ldw	r4,-12(fp)
 40129ec:	e17ffe17 	ldw	r5,-8(fp)
 40129f0:	01810074 	movhi	r6,1025
 40129f4:	318a4604 	addi	r6,r6,10520
 40129f8:	e1fffc17 	ldw	r7,-16(fp)
 40129fc:	40110080 	call	4011008 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4012a00:	e037883a 	mov	sp,fp
 4012a04:	dfc00117 	ldw	ra,4(sp)
 4012a08:	df000017 	ldw	fp,0(sp)
 4012a0c:	dec00204 	addi	sp,sp,8
 4012a10:	f800283a 	ret

04012a14 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4012a14:	defffa04 	addi	sp,sp,-24
 4012a18:	dfc00515 	stw	ra,20(sp)
 4012a1c:	df000415 	stw	fp,16(sp)
 4012a20:	df000404 	addi	fp,sp,16
 4012a24:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4012a28:	008000c4 	movi	r2,3
 4012a2c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4012a30:	e0fffd17 	ldw	r3,-12(fp)
 4012a34:	008003f4 	movhi	r2,15
 4012a38:	10909004 	addi	r2,r2,16960
 4012a3c:	1885383a 	mul	r2,r3,r2
 4012a40:	01017db4 	movhi	r4,1526
 4012a44:	21384004 	addi	r4,r4,-7936
 4012a48:	100b883a 	mov	r5,r2
 4012a4c:	400832c0 	call	400832c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4012a50:	01200034 	movhi	r4,32768
 4012a54:	213fffc4 	addi	r4,r4,-1
 4012a58:	100b883a 	mov	r5,r2
 4012a5c:	400832c0 	call	400832c <__udivsi3>
 4012a60:	e13fff17 	ldw	r4,-4(fp)
 4012a64:	100b883a 	mov	r5,r2
 4012a68:	400832c0 	call	400832c <__udivsi3>
 4012a6c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4012a70:	e0bffe17 	ldw	r2,-8(fp)
 4012a74:	10002926 	beq	r2,zero,4012b1c <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
 4012a78:	e03ffc15 	stw	zero,-16(fp)
 4012a7c:	00001606 	br	4012ad8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4012a80:	00a00034 	movhi	r2,32768
 4012a84:	10bfffc4 	addi	r2,r2,-1
 4012a88:	10bfffc4 	addi	r2,r2,-1
 4012a8c:	103ffe1e 	bne	r2,zero,4012a88 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4012a90:	e0fffd17 	ldw	r3,-12(fp)
 4012a94:	008003f4 	movhi	r2,15
 4012a98:	10909004 	addi	r2,r2,16960
 4012a9c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4012aa0:	01017db4 	movhi	r4,1526
 4012aa4:	21384004 	addi	r4,r4,-7936
 4012aa8:	100b883a 	mov	r5,r2
 4012aac:	400832c0 	call	400832c <__udivsi3>
 4012ab0:	01200034 	movhi	r4,32768
 4012ab4:	213fffc4 	addi	r4,r4,-1
 4012ab8:	100b883a 	mov	r5,r2
 4012abc:	400832c0 	call	400832c <__udivsi3>
 4012ac0:	e0ffff17 	ldw	r3,-4(fp)
 4012ac4:	1885c83a 	sub	r2,r3,r2
 4012ac8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4012acc:	e0bffc17 	ldw	r2,-16(fp)
 4012ad0:	10800044 	addi	r2,r2,1
 4012ad4:	e0bffc15 	stw	r2,-16(fp)
 4012ad8:	e0fffc17 	ldw	r3,-16(fp)
 4012adc:	e0bffe17 	ldw	r2,-8(fp)
 4012ae0:	18bfe716 	blt	r3,r2,4012a80 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4012ae4:	e0fffd17 	ldw	r3,-12(fp)
 4012ae8:	008003f4 	movhi	r2,15
 4012aec:	10909004 	addi	r2,r2,16960
 4012af0:	1885383a 	mul	r2,r3,r2
 4012af4:	01017db4 	movhi	r4,1526
 4012af8:	21384004 	addi	r4,r4,-7936
 4012afc:	100b883a 	mov	r5,r2
 4012b00:	400832c0 	call	400832c <__udivsi3>
 4012b04:	1007883a 	mov	r3,r2
 4012b08:	e0bfff17 	ldw	r2,-4(fp)
 4012b0c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4012b10:	10bfffc4 	addi	r2,r2,-1
 4012b14:	103ffe1e 	bne	r2,zero,4012b10 <alt_busy_sleep+0xfc>
 4012b18:	00000d06 	br	4012b50 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4012b1c:	e0fffd17 	ldw	r3,-12(fp)
 4012b20:	008003f4 	movhi	r2,15
 4012b24:	10909004 	addi	r2,r2,16960
 4012b28:	1885383a 	mul	r2,r3,r2
 4012b2c:	01017db4 	movhi	r4,1526
 4012b30:	21384004 	addi	r4,r4,-7936
 4012b34:	100b883a 	mov	r5,r2
 4012b38:	400832c0 	call	400832c <__udivsi3>
 4012b3c:	1007883a 	mov	r3,r2
 4012b40:	e0bfff17 	ldw	r2,-4(fp)
 4012b44:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4012b48:	10bfffc4 	addi	r2,r2,-1
 4012b4c:	00bffe16 	blt	zero,r2,4012b48 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4012b50:	0005883a 	mov	r2,zero
}
 4012b54:	e037883a 	mov	sp,fp
 4012b58:	dfc00117 	ldw	ra,4(sp)
 4012b5c:	df000017 	ldw	fp,0(sp)
 4012b60:	dec00204 	addi	sp,sp,8
 4012b64:	f800283a 	ret

04012b68 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4012b68:	defffe04 	addi	sp,sp,-8
 4012b6c:	df000115 	stw	fp,4(sp)
 4012b70:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4012b74:	e03fff15 	stw	zero,-4(fp)
 4012b78:	00000506 	br	4012b90 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4012b7c:	e0bfff17 	ldw	r2,-4(fp)
 4012b80:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4012b84:	e0bfff17 	ldw	r2,-4(fp)
 4012b88:	10800804 	addi	r2,r2,32
 4012b8c:	e0bfff15 	stw	r2,-4(fp)
 4012b90:	e0bfff17 	ldw	r2,-4(fp)
 4012b94:	10820030 	cmpltui	r2,r2,2048
 4012b98:	103ff81e 	bne	r2,zero,4012b7c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4012b9c:	e037883a 	mov	sp,fp
 4012ba0:	df000017 	ldw	fp,0(sp)
 4012ba4:	dec00104 	addi	sp,sp,4
 4012ba8:	f800283a 	ret

04012bac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4012bac:	defffe04 	addi	sp,sp,-8
 4012bb0:	dfc00115 	stw	ra,4(sp)
 4012bb4:	df000015 	stw	fp,0(sp)
 4012bb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4012bbc:	008100f4 	movhi	r2,1027
 4012bc0:	10845804 	addi	r2,r2,4448
 4012bc4:	10800017 	ldw	r2,0(r2)
 4012bc8:	10000526 	beq	r2,zero,4012be0 <alt_get_errno+0x34>
 4012bcc:	008100f4 	movhi	r2,1027
 4012bd0:	10845804 	addi	r2,r2,4448
 4012bd4:	10800017 	ldw	r2,0(r2)
 4012bd8:	103ee83a 	callr	r2
 4012bdc:	00000206 	br	4012be8 <alt_get_errno+0x3c>
 4012be0:	008100f4 	movhi	r2,1027
 4012be4:	1091e504 	addi	r2,r2,18324
}
 4012be8:	e037883a 	mov	sp,fp
 4012bec:	dfc00117 	ldw	ra,4(sp)
 4012bf0:	df000017 	ldw	fp,0(sp)
 4012bf4:	dec00204 	addi	sp,sp,8
 4012bf8:	f800283a 	ret

04012bfc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4012bfc:	defffa04 	addi	sp,sp,-24
 4012c00:	dfc00515 	stw	ra,20(sp)
 4012c04:	df000415 	stw	fp,16(sp)
 4012c08:	df000404 	addi	fp,sp,16
 4012c0c:	e13ffe15 	stw	r4,-8(fp)
 4012c10:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4012c14:	e0bffe17 	ldw	r2,-8(fp)
 4012c18:	10000326 	beq	r2,zero,4012c28 <alt_dev_llist_insert+0x2c>
 4012c1c:	e0bffe17 	ldw	r2,-8(fp)
 4012c20:	10800217 	ldw	r2,8(r2)
 4012c24:	1000051e 	bne	r2,zero,4012c3c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 4012c28:	4012bac0 	call	4012bac <alt_get_errno>
 4012c2c:	00c00584 	movi	r3,22
 4012c30:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4012c34:	00bffa84 	movi	r2,-22
 4012c38:	00001306 	br	4012c88 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4012c3c:	e0bffe17 	ldw	r2,-8(fp)
 4012c40:	e0ffff17 	ldw	r3,-4(fp)
 4012c44:	e0fffc15 	stw	r3,-16(fp)
 4012c48:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4012c4c:	e0bffd17 	ldw	r2,-12(fp)
 4012c50:	e0fffc17 	ldw	r3,-16(fp)
 4012c54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4012c58:	e0bffc17 	ldw	r2,-16(fp)
 4012c5c:	10c00017 	ldw	r3,0(r2)
 4012c60:	e0bffd17 	ldw	r2,-12(fp)
 4012c64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4012c68:	e0bffc17 	ldw	r2,-16(fp)
 4012c6c:	10800017 	ldw	r2,0(r2)
 4012c70:	e0fffd17 	ldw	r3,-12(fp)
 4012c74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4012c78:	e0bffc17 	ldw	r2,-16(fp)
 4012c7c:	e0fffd17 	ldw	r3,-12(fp)
 4012c80:	10c00015 	stw	r3,0(r2)

  return 0;  
 4012c84:	0005883a 	mov	r2,zero
}
 4012c88:	e037883a 	mov	sp,fp
 4012c8c:	dfc00117 	ldw	ra,4(sp)
 4012c90:	df000017 	ldw	fp,0(sp)
 4012c94:	dec00204 	addi	sp,sp,8
 4012c98:	f800283a 	ret

04012c9c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4012c9c:	defffd04 	addi	sp,sp,-12
 4012ca0:	dfc00215 	stw	ra,8(sp)
 4012ca4:	df000115 	stw	fp,4(sp)
 4012ca8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4012cac:	00810074 	movhi	r2,1025
 4012cb0:	108e0004 	addi	r2,r2,14336
 4012cb4:	e0bfff15 	stw	r2,-4(fp)
 4012cb8:	00000606 	br	4012cd4 <_do_ctors+0x38>
        (*ctor) (); 
 4012cbc:	e0bfff17 	ldw	r2,-4(fp)
 4012cc0:	10800017 	ldw	r2,0(r2)
 4012cc4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4012cc8:	e0bfff17 	ldw	r2,-4(fp)
 4012ccc:	10bfff04 	addi	r2,r2,-4
 4012cd0:	e0bfff15 	stw	r2,-4(fp)
 4012cd4:	e0ffff17 	ldw	r3,-4(fp)
 4012cd8:	00810074 	movhi	r2,1025
 4012cdc:	108e0104 	addi	r2,r2,14340
 4012ce0:	18bff62e 	bgeu	r3,r2,4012cbc <_do_ctors+0x20>
        (*ctor) (); 
}
 4012ce4:	e037883a 	mov	sp,fp
 4012ce8:	dfc00117 	ldw	ra,4(sp)
 4012cec:	df000017 	ldw	fp,0(sp)
 4012cf0:	dec00204 	addi	sp,sp,8
 4012cf4:	f800283a 	ret

04012cf8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4012cf8:	defffd04 	addi	sp,sp,-12
 4012cfc:	dfc00215 	stw	ra,8(sp)
 4012d00:	df000115 	stw	fp,4(sp)
 4012d04:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4012d08:	00810074 	movhi	r2,1025
 4012d0c:	108e0004 	addi	r2,r2,14336
 4012d10:	e0bfff15 	stw	r2,-4(fp)
 4012d14:	00000606 	br	4012d30 <_do_dtors+0x38>
        (*dtor) (); 
 4012d18:	e0bfff17 	ldw	r2,-4(fp)
 4012d1c:	10800017 	ldw	r2,0(r2)
 4012d20:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4012d24:	e0bfff17 	ldw	r2,-4(fp)
 4012d28:	10bfff04 	addi	r2,r2,-4
 4012d2c:	e0bfff15 	stw	r2,-4(fp)
 4012d30:	e0ffff17 	ldw	r3,-4(fp)
 4012d34:	00810074 	movhi	r2,1025
 4012d38:	108e0104 	addi	r2,r2,14340
 4012d3c:	18bff62e 	bgeu	r3,r2,4012d18 <_do_dtors+0x20>
        (*dtor) (); 
}
 4012d40:	e037883a 	mov	sp,fp
 4012d44:	dfc00117 	ldw	ra,4(sp)
 4012d48:	df000017 	ldw	fp,0(sp)
 4012d4c:	dec00204 	addi	sp,sp,8
 4012d50:	f800283a 	ret

04012d54 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4012d54:	defffe04 	addi	sp,sp,-8
 4012d58:	dfc00115 	stw	ra,4(sp)
 4012d5c:	df000015 	stw	fp,0(sp)
 4012d60:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4012d64:	0009883a 	mov	r4,zero
 4012d68:	01440004 	movi	r5,4096
 4012d6c:	40133a40 	call	40133a4 <alt_icache_flush>
#endif
}
 4012d70:	e037883a 	mov	sp,fp
 4012d74:	dfc00117 	ldw	ra,4(sp)
 4012d78:	df000017 	ldw	fp,0(sp)
 4012d7c:	dec00204 	addi	sp,sp,8
 4012d80:	f800283a 	ret

04012d84 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4012d84:	defff904 	addi	sp,sp,-28
 4012d88:	dfc00615 	stw	ra,24(sp)
 4012d8c:	df000515 	stw	fp,20(sp)
 4012d90:	df000504 	addi	fp,sp,20
 4012d94:	e13ffc15 	stw	r4,-16(fp)
 4012d98:	e17ffd15 	stw	r5,-12(fp)
 4012d9c:	e1bffe15 	stw	r6,-8(fp)
 4012da0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4012da4:	e13ffd17 	ldw	r4,-12(fp)
 4012da8:	e17ffe17 	ldw	r5,-8(fp)
 4012dac:	e1bfff17 	ldw	r6,-4(fp)
 4012db0:	4012fd80 	call	4012fd8 <open>
 4012db4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4012db8:	e0bffb17 	ldw	r2,-20(fp)
 4012dbc:	10001c16 	blt	r2,zero,4012e30 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4012dc0:	00c100f4 	movhi	r3,1027
 4012dc4:	18ffd304 	addi	r3,r3,-180
 4012dc8:	e0bffb17 	ldw	r2,-20(fp)
 4012dcc:	10800324 	muli	r2,r2,12
 4012dd0:	1885883a 	add	r2,r3,r2
 4012dd4:	10c00017 	ldw	r3,0(r2)
 4012dd8:	e0bffc17 	ldw	r2,-16(fp)
 4012ddc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4012de0:	00c100f4 	movhi	r3,1027
 4012de4:	18ffd304 	addi	r3,r3,-180
 4012de8:	e0bffb17 	ldw	r2,-20(fp)
 4012dec:	10800324 	muli	r2,r2,12
 4012df0:	1885883a 	add	r2,r3,r2
 4012df4:	10800104 	addi	r2,r2,4
 4012df8:	10c00017 	ldw	r3,0(r2)
 4012dfc:	e0bffc17 	ldw	r2,-16(fp)
 4012e00:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4012e04:	00c100f4 	movhi	r3,1027
 4012e08:	18ffd304 	addi	r3,r3,-180
 4012e0c:	e0bffb17 	ldw	r2,-20(fp)
 4012e10:	10800324 	muli	r2,r2,12
 4012e14:	1885883a 	add	r2,r3,r2
 4012e18:	10800204 	addi	r2,r2,8
 4012e1c:	10c00017 	ldw	r3,0(r2)
 4012e20:	e0bffc17 	ldw	r2,-16(fp)
 4012e24:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4012e28:	e13ffb17 	ldw	r4,-20(fp)
 4012e2c:	40117c40 	call	40117c4 <alt_release_fd>
  }
} 
 4012e30:	e037883a 	mov	sp,fp
 4012e34:	dfc00117 	ldw	ra,4(sp)
 4012e38:	df000017 	ldw	fp,0(sp)
 4012e3c:	dec00204 	addi	sp,sp,8
 4012e40:	f800283a 	ret

04012e44 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4012e44:	defffb04 	addi	sp,sp,-20
 4012e48:	dfc00415 	stw	ra,16(sp)
 4012e4c:	df000315 	stw	fp,12(sp)
 4012e50:	df000304 	addi	fp,sp,12
 4012e54:	e13ffd15 	stw	r4,-12(fp)
 4012e58:	e17ffe15 	stw	r5,-8(fp)
 4012e5c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4012e60:	010100f4 	movhi	r4,1027
 4012e64:	213fd604 	addi	r4,r4,-168
 4012e68:	e17ffd17 	ldw	r5,-12(fp)
 4012e6c:	01800044 	movi	r6,1
 4012e70:	01c07fc4 	movi	r7,511
 4012e74:	4012d840 	call	4012d84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4012e78:	010100f4 	movhi	r4,1027
 4012e7c:	213fd304 	addi	r4,r4,-180
 4012e80:	e17ffe17 	ldw	r5,-8(fp)
 4012e84:	000d883a 	mov	r6,zero
 4012e88:	01c07fc4 	movi	r7,511
 4012e8c:	4012d840 	call	4012d84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4012e90:	010100f4 	movhi	r4,1027
 4012e94:	213fd904 	addi	r4,r4,-156
 4012e98:	e17fff17 	ldw	r5,-4(fp)
 4012e9c:	01800044 	movi	r6,1
 4012ea0:	01c07fc4 	movi	r7,511
 4012ea4:	4012d840 	call	4012d84 <alt_open_fd>
}  
 4012ea8:	e037883a 	mov	sp,fp
 4012eac:	dfc00117 	ldw	ra,4(sp)
 4012eb0:	df000017 	ldw	fp,0(sp)
 4012eb4:	dec00204 	addi	sp,sp,8
 4012eb8:	f800283a 	ret

04012ebc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4012ebc:	defffe04 	addi	sp,sp,-8
 4012ec0:	dfc00115 	stw	ra,4(sp)
 4012ec4:	df000015 	stw	fp,0(sp)
 4012ec8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4012ecc:	008100f4 	movhi	r2,1027
 4012ed0:	10845804 	addi	r2,r2,4448
 4012ed4:	10800017 	ldw	r2,0(r2)
 4012ed8:	10000526 	beq	r2,zero,4012ef0 <alt_get_errno+0x34>
 4012edc:	008100f4 	movhi	r2,1027
 4012ee0:	10845804 	addi	r2,r2,4448
 4012ee4:	10800017 	ldw	r2,0(r2)
 4012ee8:	103ee83a 	callr	r2
 4012eec:	00000206 	br	4012ef8 <alt_get_errno+0x3c>
 4012ef0:	008100f4 	movhi	r2,1027
 4012ef4:	1091e504 	addi	r2,r2,18324
}
 4012ef8:	e037883a 	mov	sp,fp
 4012efc:	dfc00117 	ldw	ra,4(sp)
 4012f00:	df000017 	ldw	fp,0(sp)
 4012f04:	dec00204 	addi	sp,sp,8
 4012f08:	f800283a 	ret

04012f0c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4012f0c:	defffd04 	addi	sp,sp,-12
 4012f10:	df000215 	stw	fp,8(sp)
 4012f14:	df000204 	addi	fp,sp,8
 4012f18:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4012f1c:	e0bfff17 	ldw	r2,-4(fp)
 4012f20:	10800217 	ldw	r2,8(r2)
 4012f24:	10d00034 	orhi	r3,r2,16384
 4012f28:	e0bfff17 	ldw	r2,-4(fp)
 4012f2c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4012f30:	e03ffe15 	stw	zero,-8(fp)
 4012f34:	00001d06 	br	4012fac <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4012f38:	00c100f4 	movhi	r3,1027
 4012f3c:	18ffd304 	addi	r3,r3,-180
 4012f40:	e0bffe17 	ldw	r2,-8(fp)
 4012f44:	10800324 	muli	r2,r2,12
 4012f48:	1885883a 	add	r2,r3,r2
 4012f4c:	10c00017 	ldw	r3,0(r2)
 4012f50:	e0bfff17 	ldw	r2,-4(fp)
 4012f54:	10800017 	ldw	r2,0(r2)
 4012f58:	1880111e 	bne	r3,r2,4012fa0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4012f5c:	00c100f4 	movhi	r3,1027
 4012f60:	18ffd304 	addi	r3,r3,-180
 4012f64:	e0bffe17 	ldw	r2,-8(fp)
 4012f68:	10800324 	muli	r2,r2,12
 4012f6c:	1885883a 	add	r2,r3,r2
 4012f70:	10800204 	addi	r2,r2,8
 4012f74:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4012f78:	1000090e 	bge	r2,zero,4012fa0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4012f7c:	e0bffe17 	ldw	r2,-8(fp)
 4012f80:	10c00324 	muli	r3,r2,12
 4012f84:	008100f4 	movhi	r2,1027
 4012f88:	10bfd304 	addi	r2,r2,-180
 4012f8c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4012f90:	e0bfff17 	ldw	r2,-4(fp)
 4012f94:	18800226 	beq	r3,r2,4012fa0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4012f98:	00bffcc4 	movi	r2,-13
 4012f9c:	00000a06 	br	4012fc8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4012fa0:	e0bffe17 	ldw	r2,-8(fp)
 4012fa4:	10800044 	addi	r2,r2,1
 4012fa8:	e0bffe15 	stw	r2,-8(fp)
 4012fac:	008100f4 	movhi	r2,1027
 4012fb0:	10845704 	addi	r2,r2,4444
 4012fb4:	10800017 	ldw	r2,0(r2)
 4012fb8:	1007883a 	mov	r3,r2
 4012fbc:	e0bffe17 	ldw	r2,-8(fp)
 4012fc0:	18bfdd2e 	bgeu	r3,r2,4012f38 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4012fc4:	0005883a 	mov	r2,zero
}
 4012fc8:	e037883a 	mov	sp,fp
 4012fcc:	df000017 	ldw	fp,0(sp)
 4012fd0:	dec00104 	addi	sp,sp,4
 4012fd4:	f800283a 	ret

04012fd8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4012fd8:	defff604 	addi	sp,sp,-40
 4012fdc:	dfc00915 	stw	ra,36(sp)
 4012fe0:	df000815 	stw	fp,32(sp)
 4012fe4:	df000804 	addi	fp,sp,32
 4012fe8:	e13ffd15 	stw	r4,-12(fp)
 4012fec:	e17ffe15 	stw	r5,-8(fp)
 4012ff0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4012ff4:	00bfffc4 	movi	r2,-1
 4012ff8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4012ffc:	00bffb44 	movi	r2,-19
 4013000:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4013004:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4013008:	e13ffd17 	ldw	r4,-12(fp)
 401300c:	014100f4 	movhi	r5,1027
 4013010:	29445504 	addi	r5,r5,4436
 4013014:	401314c0 	call	401314c <alt_find_dev>
 4013018:	e0bff815 	stw	r2,-32(fp)
 401301c:	e0bff817 	ldw	r2,-32(fp)
 4013020:	1000051e 	bne	r2,zero,4013038 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4013024:	e13ffd17 	ldw	r4,-12(fp)
 4013028:	40131dc0 	call	40131dc <alt_find_file>
 401302c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4013030:	00800044 	movi	r2,1
 4013034:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4013038:	e0bff817 	ldw	r2,-32(fp)
 401303c:	10002926 	beq	r2,zero,40130e4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4013040:	e13ff817 	ldw	r4,-32(fp)
 4013044:	40132f00 	call	40132f0 <alt_get_fd>
 4013048:	e0bff915 	stw	r2,-28(fp)
 401304c:	e0bff917 	ldw	r2,-28(fp)
 4013050:	1000030e 	bge	r2,zero,4013060 <open+0x88>
    {
      status = index;
 4013054:	e0bff917 	ldw	r2,-28(fp)
 4013058:	e0bffa15 	stw	r2,-24(fp)
 401305c:	00002306 	br	40130ec <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 4013060:	e0bff917 	ldw	r2,-28(fp)
 4013064:	10c00324 	muli	r3,r2,12
 4013068:	008100f4 	movhi	r2,1027
 401306c:	10bfd304 	addi	r2,r2,-180
 4013070:	1885883a 	add	r2,r3,r2
 4013074:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4013078:	e0fffe17 	ldw	r3,-8(fp)
 401307c:	00900034 	movhi	r2,16384
 4013080:	10bfffc4 	addi	r2,r2,-1
 4013084:	1886703a 	and	r3,r3,r2
 4013088:	e0bffc17 	ldw	r2,-16(fp)
 401308c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4013090:	e0bffb17 	ldw	r2,-20(fp)
 4013094:	1000051e 	bne	r2,zero,40130ac <open+0xd4>
 4013098:	e13ffc17 	ldw	r4,-16(fp)
 401309c:	4012f0c0 	call	4012f0c <alt_file_locked>
 40130a0:	e0bffa15 	stw	r2,-24(fp)
 40130a4:	e0bffa17 	ldw	r2,-24(fp)
 40130a8:	10001016 	blt	r2,zero,40130ec <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40130ac:	e0bff817 	ldw	r2,-32(fp)
 40130b0:	10800317 	ldw	r2,12(r2)
 40130b4:	10000826 	beq	r2,zero,40130d8 <open+0x100>
 40130b8:	e0bff817 	ldw	r2,-32(fp)
 40130bc:	10800317 	ldw	r2,12(r2)
 40130c0:	e13ffc17 	ldw	r4,-16(fp)
 40130c4:	e17ffd17 	ldw	r5,-12(fp)
 40130c8:	e1bffe17 	ldw	r6,-8(fp)
 40130cc:	e1ffff17 	ldw	r7,-4(fp)
 40130d0:	103ee83a 	callr	r2
 40130d4:	00000106 	br	40130dc <open+0x104>
 40130d8:	0005883a 	mov	r2,zero
 40130dc:	e0bffa15 	stw	r2,-24(fp)
 40130e0:	00000206 	br	40130ec <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40130e4:	00bffb44 	movi	r2,-19
 40130e8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40130ec:	e0bffa17 	ldw	r2,-24(fp)
 40130f0:	1000080e 	bge	r2,zero,4013114 <open+0x13c>
  {
    alt_release_fd (index);  
 40130f4:	e13ff917 	ldw	r4,-28(fp)
 40130f8:	40117c40 	call	40117c4 <alt_release_fd>
    ALT_ERRNO = -status;
 40130fc:	4012ebc0 	call	4012ebc <alt_get_errno>
 4013100:	e0fffa17 	ldw	r3,-24(fp)
 4013104:	00c7c83a 	sub	r3,zero,r3
 4013108:	10c00015 	stw	r3,0(r2)
    return -1;
 401310c:	00bfffc4 	movi	r2,-1
 4013110:	00000106 	br	4013118 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4013114:	e0bff917 	ldw	r2,-28(fp)
}
 4013118:	e037883a 	mov	sp,fp
 401311c:	dfc00117 	ldw	ra,4(sp)
 4013120:	df000017 	ldw	fp,0(sp)
 4013124:	dec00204 	addi	sp,sp,8
 4013128:	f800283a 	ret

0401312c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 401312c:	deffff04 	addi	sp,sp,-4
 4013130:	df000015 	stw	fp,0(sp)
 4013134:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4013138:	000170fa 	wrctl	ienable,zero
}
 401313c:	e037883a 	mov	sp,fp
 4013140:	df000017 	ldw	fp,0(sp)
 4013144:	dec00104 	addi	sp,sp,4
 4013148:	f800283a 	ret

0401314c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401314c:	defffa04 	addi	sp,sp,-24
 4013150:	dfc00515 	stw	ra,20(sp)
 4013154:	df000415 	stw	fp,16(sp)
 4013158:	df000404 	addi	fp,sp,16
 401315c:	e13ffe15 	stw	r4,-8(fp)
 4013160:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4013164:	e0bfff17 	ldw	r2,-4(fp)
 4013168:	10800017 	ldw	r2,0(r2)
 401316c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4013170:	e13ffe17 	ldw	r4,-8(fp)
 4013174:	40095140 	call	4009514 <strlen>
 4013178:	10800044 	addi	r2,r2,1
 401317c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4013180:	00000d06 	br	40131b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4013184:	e0bffc17 	ldw	r2,-16(fp)
 4013188:	10c00217 	ldw	r3,8(r2)
 401318c:	e0bffd17 	ldw	r2,-12(fp)
 4013190:	1809883a 	mov	r4,r3
 4013194:	e17ffe17 	ldw	r5,-8(fp)
 4013198:	100d883a 	mov	r6,r2
 401319c:	401347c0 	call	401347c <memcmp>
 40131a0:	1000021e 	bne	r2,zero,40131ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40131a4:	e0bffc17 	ldw	r2,-16(fp)
 40131a8:	00000706 	br	40131c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40131ac:	e0bffc17 	ldw	r2,-16(fp)
 40131b0:	10800017 	ldw	r2,0(r2)
 40131b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40131b8:	e0fffc17 	ldw	r3,-16(fp)
 40131bc:	e0bfff17 	ldw	r2,-4(fp)
 40131c0:	18bff01e 	bne	r3,r2,4013184 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40131c4:	0005883a 	mov	r2,zero
}
 40131c8:	e037883a 	mov	sp,fp
 40131cc:	dfc00117 	ldw	ra,4(sp)
 40131d0:	df000017 	ldw	fp,0(sp)
 40131d4:	dec00204 	addi	sp,sp,8
 40131d8:	f800283a 	ret

040131dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40131dc:	defffb04 	addi	sp,sp,-20
 40131e0:	dfc00415 	stw	ra,16(sp)
 40131e4:	df000315 	stw	fp,12(sp)
 40131e8:	df000304 	addi	fp,sp,12
 40131ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40131f0:	008100f4 	movhi	r2,1027
 40131f4:	10845304 	addi	r2,r2,4428
 40131f8:	10800017 	ldw	r2,0(r2)
 40131fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4013200:	00003106 	br	40132c8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 4013204:	e0bffd17 	ldw	r2,-12(fp)
 4013208:	10800217 	ldw	r2,8(r2)
 401320c:	1009883a 	mov	r4,r2
 4013210:	40095140 	call	4009514 <strlen>
 4013214:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4013218:	e0bffd17 	ldw	r2,-12(fp)
 401321c:	10c00217 	ldw	r3,8(r2)
 4013220:	e0bffe17 	ldw	r2,-8(fp)
 4013224:	10bfffc4 	addi	r2,r2,-1
 4013228:	1885883a 	add	r2,r3,r2
 401322c:	10800003 	ldbu	r2,0(r2)
 4013230:	10803fcc 	andi	r2,r2,255
 4013234:	1080201c 	xori	r2,r2,128
 4013238:	10bfe004 	addi	r2,r2,-128
 401323c:	10800bd8 	cmpnei	r2,r2,47
 4013240:	1000031e 	bne	r2,zero,4013250 <alt_find_file+0x74>
    {
      len -= 1;
 4013244:	e0bffe17 	ldw	r2,-8(fp)
 4013248:	10bfffc4 	addi	r2,r2,-1
 401324c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4013250:	e0bffe17 	ldw	r2,-8(fp)
 4013254:	e0ffff17 	ldw	r3,-4(fp)
 4013258:	1885883a 	add	r2,r3,r2
 401325c:	10800003 	ldbu	r2,0(r2)
 4013260:	10803fcc 	andi	r2,r2,255
 4013264:	1080201c 	xori	r2,r2,128
 4013268:	10bfe004 	addi	r2,r2,-128
 401326c:	10800be0 	cmpeqi	r2,r2,47
 4013270:	1000081e 	bne	r2,zero,4013294 <alt_find_file+0xb8>
 4013274:	e0bffe17 	ldw	r2,-8(fp)
 4013278:	e0ffff17 	ldw	r3,-4(fp)
 401327c:	1885883a 	add	r2,r3,r2
 4013280:	10800003 	ldbu	r2,0(r2)
 4013284:	10803fcc 	andi	r2,r2,255
 4013288:	1080201c 	xori	r2,r2,128
 401328c:	10bfe004 	addi	r2,r2,-128
 4013290:	10000a1e 	bne	r2,zero,40132bc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 4013294:	e0bffd17 	ldw	r2,-12(fp)
 4013298:	10c00217 	ldw	r3,8(r2)
 401329c:	e0bffe17 	ldw	r2,-8(fp)
 40132a0:	1809883a 	mov	r4,r3
 40132a4:	e17fff17 	ldw	r5,-4(fp)
 40132a8:	100d883a 	mov	r6,r2
 40132ac:	401347c0 	call	401347c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40132b0:	1000021e 	bne	r2,zero,40132bc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40132b4:	e0bffd17 	ldw	r2,-12(fp)
 40132b8:	00000806 	br	40132dc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 40132bc:	e0bffd17 	ldw	r2,-12(fp)
 40132c0:	10800017 	ldw	r2,0(r2)
 40132c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40132c8:	e0fffd17 	ldw	r3,-12(fp)
 40132cc:	008100f4 	movhi	r2,1027
 40132d0:	10845304 	addi	r2,r2,4428
 40132d4:	18bfcb1e 	bne	r3,r2,4013204 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40132d8:	0005883a 	mov	r2,zero
}
 40132dc:	e037883a 	mov	sp,fp
 40132e0:	dfc00117 	ldw	ra,4(sp)
 40132e4:	df000017 	ldw	fp,0(sp)
 40132e8:	dec00204 	addi	sp,sp,8
 40132ec:	f800283a 	ret

040132f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40132f0:	defffc04 	addi	sp,sp,-16
 40132f4:	df000315 	stw	fp,12(sp)
 40132f8:	df000304 	addi	fp,sp,12
 40132fc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4013300:	00bffa04 	movi	r2,-24
 4013304:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4013308:	e03ffd15 	stw	zero,-12(fp)
 401330c:	00001d06 	br	4013384 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 4013310:	00c100f4 	movhi	r3,1027
 4013314:	18ffd304 	addi	r3,r3,-180
 4013318:	e0bffd17 	ldw	r2,-12(fp)
 401331c:	10800324 	muli	r2,r2,12
 4013320:	1885883a 	add	r2,r3,r2
 4013324:	10800017 	ldw	r2,0(r2)
 4013328:	1000131e 	bne	r2,zero,4013378 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 401332c:	00c100f4 	movhi	r3,1027
 4013330:	18ffd304 	addi	r3,r3,-180
 4013334:	e0bffd17 	ldw	r2,-12(fp)
 4013338:	10800324 	muli	r2,r2,12
 401333c:	1885883a 	add	r2,r3,r2
 4013340:	e0ffff17 	ldw	r3,-4(fp)
 4013344:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4013348:	008100f4 	movhi	r2,1027
 401334c:	10845704 	addi	r2,r2,4444
 4013350:	10c00017 	ldw	r3,0(r2)
 4013354:	e0bffd17 	ldw	r2,-12(fp)
 4013358:	1880040e 	bge	r3,r2,401336c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 401335c:	008100f4 	movhi	r2,1027
 4013360:	10845704 	addi	r2,r2,4444
 4013364:	e0fffd17 	ldw	r3,-12(fp)
 4013368:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 401336c:	e0bffd17 	ldw	r2,-12(fp)
 4013370:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4013374:	00000606 	br	4013390 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4013378:	e0bffd17 	ldw	r2,-12(fp)
 401337c:	10800044 	addi	r2,r2,1
 4013380:	e0bffd15 	stw	r2,-12(fp)
 4013384:	e0bffd17 	ldw	r2,-12(fp)
 4013388:	10800810 	cmplti	r2,r2,32
 401338c:	103fe01e 	bne	r2,zero,4013310 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4013390:	e0bffe17 	ldw	r2,-8(fp)
}
 4013394:	e037883a 	mov	sp,fp
 4013398:	df000017 	ldw	fp,0(sp)
 401339c:	dec00104 	addi	sp,sp,4
 40133a0:	f800283a 	ret

040133a4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 40133a4:	defffb04 	addi	sp,sp,-20
 40133a8:	df000415 	stw	fp,16(sp)
 40133ac:	df000404 	addi	fp,sp,16
 40133b0:	e13ffe15 	stw	r4,-8(fp)
 40133b4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 40133b8:	e0bfff17 	ldw	r2,-4(fp)
 40133bc:	10840070 	cmpltui	r2,r2,4097
 40133c0:	1000021e 	bne	r2,zero,40133cc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 40133c4:	00840004 	movi	r2,4096
 40133c8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 40133cc:	e0fffe17 	ldw	r3,-8(fp)
 40133d0:	e0bfff17 	ldw	r2,-4(fp)
 40133d4:	1885883a 	add	r2,r3,r2
 40133d8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40133dc:	e0bffe17 	ldw	r2,-8(fp)
 40133e0:	e0bffc15 	stw	r2,-16(fp)
 40133e4:	00000506 	br	40133fc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 40133e8:	e0bffc17 	ldw	r2,-16(fp)
 40133ec:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40133f0:	e0bffc17 	ldw	r2,-16(fp)
 40133f4:	10800804 	addi	r2,r2,32
 40133f8:	e0bffc15 	stw	r2,-16(fp)
 40133fc:	e0fffc17 	ldw	r3,-16(fp)
 4013400:	e0bffd17 	ldw	r2,-12(fp)
 4013404:	18bff836 	bltu	r3,r2,40133e8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4013408:	e0bffe17 	ldw	r2,-8(fp)
 401340c:	108007cc 	andi	r2,r2,31
 4013410:	10000226 	beq	r2,zero,401341c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4013414:	e0bffc17 	ldw	r2,-16(fp)
 4013418:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 401341c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4013420:	e037883a 	mov	sp,fp
 4013424:	df000017 	ldw	fp,0(sp)
 4013428:	dec00104 	addi	sp,sp,4
 401342c:	f800283a 	ret

04013430 <atexit>:
 4013430:	200b883a 	mov	r5,r4
 4013434:	000d883a 	mov	r6,zero
 4013438:	0009883a 	mov	r4,zero
 401343c:	000f883a 	mov	r7,zero
 4013440:	40134f81 	jmpi	40134f8 <__register_exitproc>

04013444 <exit>:
 4013444:	defffe04 	addi	sp,sp,-8
 4013448:	000b883a 	mov	r5,zero
 401344c:	dc000015 	stw	r16,0(sp)
 4013450:	dfc00115 	stw	ra,4(sp)
 4013454:	2021883a 	mov	r16,r4
 4013458:	40136280 	call	4013628 <__call_exitprocs>
 401345c:	008100f4 	movhi	r2,1027
 4013460:	10844e04 	addi	r2,r2,4408
 4013464:	11000017 	ldw	r4,0(r2)
 4013468:	20800f17 	ldw	r2,60(r4)
 401346c:	10000126 	beq	r2,zero,4013474 <exit+0x30>
 4013470:	103ee83a 	callr	r2
 4013474:	8009883a 	mov	r4,r16
 4013478:	40137c80 	call	40137c8 <_exit>

0401347c <memcmp>:
 401347c:	01c000c4 	movi	r7,3
 4013480:	3980192e 	bgeu	r7,r6,40134e8 <memcmp+0x6c>
 4013484:	2904b03a 	or	r2,r5,r4
 4013488:	11c4703a 	and	r2,r2,r7
 401348c:	10000f26 	beq	r2,zero,40134cc <memcmp+0x50>
 4013490:	20c00003 	ldbu	r3,0(r4)
 4013494:	28800003 	ldbu	r2,0(r5)
 4013498:	1880151e 	bne	r3,r2,40134f0 <memcmp+0x74>
 401349c:	31bfff84 	addi	r6,r6,-2
 40134a0:	01ffffc4 	movi	r7,-1
 40134a4:	00000406 	br	40134b8 <memcmp+0x3c>
 40134a8:	20c00003 	ldbu	r3,0(r4)
 40134ac:	28800003 	ldbu	r2,0(r5)
 40134b0:	31bfffc4 	addi	r6,r6,-1
 40134b4:	18800e1e 	bne	r3,r2,40134f0 <memcmp+0x74>
 40134b8:	21000044 	addi	r4,r4,1
 40134bc:	29400044 	addi	r5,r5,1
 40134c0:	31fff91e 	bne	r6,r7,40134a8 <memcmp+0x2c>
 40134c4:	0005883a 	mov	r2,zero
 40134c8:	f800283a 	ret
 40134cc:	20c00017 	ldw	r3,0(r4)
 40134d0:	28800017 	ldw	r2,0(r5)
 40134d4:	1880041e 	bne	r3,r2,40134e8 <memcmp+0x6c>
 40134d8:	31bfff04 	addi	r6,r6,-4
 40134dc:	21000104 	addi	r4,r4,4
 40134e0:	29400104 	addi	r5,r5,4
 40134e4:	39bff936 	bltu	r7,r6,40134cc <memcmp+0x50>
 40134e8:	303fe91e 	bne	r6,zero,4013490 <memcmp+0x14>
 40134ec:	003ff506 	br	40134c4 <memcmp+0x48>
 40134f0:	1885c83a 	sub	r2,r3,r2
 40134f4:	f800283a 	ret

040134f8 <__register_exitproc>:
 40134f8:	defffa04 	addi	sp,sp,-24
 40134fc:	008100f4 	movhi	r2,1027
 4013500:	10844e04 	addi	r2,r2,4408
 4013504:	dc000315 	stw	r16,12(sp)
 4013508:	14000017 	ldw	r16,0(r2)
 401350c:	dc400415 	stw	r17,16(sp)
 4013510:	dfc00515 	stw	ra,20(sp)
 4013514:	80805217 	ldw	r2,328(r16)
 4013518:	2023883a 	mov	r17,r4
 401351c:	10003e26 	beq	r2,zero,4013618 <__register_exitproc+0x120>
 4013520:	10c00117 	ldw	r3,4(r2)
 4013524:	020007c4 	movi	r8,31
 4013528:	40c0180e 	bge	r8,r3,401358c <__register_exitproc+0x94>
 401352c:	00810074 	movhi	r2,1025
 4013530:	10a23604 	addi	r2,r2,-30504
 4013534:	1000061e 	bne	r2,zero,4013550 <__register_exitproc+0x58>
 4013538:	00bfffc4 	movi	r2,-1
 401353c:	dfc00517 	ldw	ra,20(sp)
 4013540:	dc400417 	ldw	r17,16(sp)
 4013544:	dc000317 	ldw	r16,12(sp)
 4013548:	dec00604 	addi	sp,sp,24
 401354c:	f800283a 	ret
 4013550:	01006404 	movi	r4,400
 4013554:	d9400015 	stw	r5,0(sp)
 4013558:	d9800115 	stw	r6,4(sp)
 401355c:	d9c00215 	stw	r7,8(sp)
 4013560:	40088d80 	call	40088d8 <malloc>
 4013564:	d9400017 	ldw	r5,0(sp)
 4013568:	d9800117 	ldw	r6,4(sp)
 401356c:	d9c00217 	ldw	r7,8(sp)
 4013570:	103ff126 	beq	r2,zero,4013538 <__register_exitproc+0x40>
 4013574:	80c05217 	ldw	r3,328(r16)
 4013578:	10000115 	stw	zero,4(r2)
 401357c:	10c00015 	stw	r3,0(r2)
 4013580:	80805215 	stw	r2,328(r16)
 4013584:	10006215 	stw	zero,392(r2)
 4013588:	10006315 	stw	zero,396(r2)
 401358c:	10c00117 	ldw	r3,4(r2)
 4013590:	88000d1e 	bne	r17,zero,40135c8 <__register_exitproc+0xd0>
 4013594:	19000084 	addi	r4,r3,2
 4013598:	2109883a 	add	r4,r4,r4
 401359c:	18c00044 	addi	r3,r3,1
 40135a0:	2109883a 	add	r4,r4,r4
 40135a4:	1109883a 	add	r4,r2,r4
 40135a8:	10c00115 	stw	r3,4(r2)
 40135ac:	0005883a 	mov	r2,zero
 40135b0:	21400015 	stw	r5,0(r4)
 40135b4:	dfc00517 	ldw	ra,20(sp)
 40135b8:	dc400417 	ldw	r17,16(sp)
 40135bc:	dc000317 	ldw	r16,12(sp)
 40135c0:	dec00604 	addi	sp,sp,24
 40135c4:	f800283a 	ret
 40135c8:	02400044 	movi	r9,1
 40135cc:	12806217 	ldw	r10,392(r2)
 40135d0:	48d2983a 	sll	r9,r9,r3
 40135d4:	19000804 	addi	r4,r3,32
 40135d8:	18d1883a 	add	r8,r3,r3
 40135dc:	2109883a 	add	r4,r4,r4
 40135e0:	4211883a 	add	r8,r8,r8
 40135e4:	2109883a 	add	r4,r4,r4
 40135e8:	1109883a 	add	r4,r2,r4
 40135ec:	1211883a 	add	r8,r2,r8
 40135f0:	5254b03a 	or	r10,r10,r9
 40135f4:	21c02215 	stw	r7,136(r4)
 40135f8:	41802215 	stw	r6,136(r8)
 40135fc:	12806215 	stw	r10,392(r2)
 4013600:	01000084 	movi	r4,2
 4013604:	893fe31e 	bne	r17,r4,4013594 <__register_exitproc+0x9c>
 4013608:	11006317 	ldw	r4,396(r2)
 401360c:	2252b03a 	or	r9,r4,r9
 4013610:	12406315 	stw	r9,396(r2)
 4013614:	003fdf06 	br	4013594 <__register_exitproc+0x9c>
 4013618:	008100f4 	movhi	r2,1027
 401361c:	10923904 	addi	r2,r2,18660
 4013620:	80805215 	stw	r2,328(r16)
 4013624:	003fbe06 	br	4013520 <__register_exitproc+0x28>

04013628 <__call_exitprocs>:
 4013628:	008100f4 	movhi	r2,1027
 401362c:	10844e04 	addi	r2,r2,4408
 4013630:	10800017 	ldw	r2,0(r2)
 4013634:	defff304 	addi	sp,sp,-52
 4013638:	df000b15 	stw	fp,44(sp)
 401363c:	d8800015 	stw	r2,0(sp)
 4013640:	10805204 	addi	r2,r2,328
 4013644:	dd400815 	stw	r21,32(sp)
 4013648:	dfc00c15 	stw	ra,48(sp)
 401364c:	ddc00a15 	stw	r23,40(sp)
 4013650:	dd800915 	stw	r22,36(sp)
 4013654:	dd000715 	stw	r20,28(sp)
 4013658:	dcc00615 	stw	r19,24(sp)
 401365c:	dc800515 	stw	r18,20(sp)
 4013660:	dc400415 	stw	r17,16(sp)
 4013664:	dc000315 	stw	r16,12(sp)
 4013668:	d9000115 	stw	r4,4(sp)
 401366c:	2839883a 	mov	fp,r5
 4013670:	d8800215 	stw	r2,8(sp)
 4013674:	057fffc4 	movi	r21,-1
 4013678:	d8800017 	ldw	r2,0(sp)
 401367c:	ddc00217 	ldw	r23,8(sp)
 4013680:	14805217 	ldw	r18,328(r2)
 4013684:	90001726 	beq	r18,zero,40136e4 <__call_exitprocs+0xbc>
 4013688:	94400117 	ldw	r17,4(r18)
 401368c:	8c3fffc4 	addi	r16,r17,-1
 4013690:	80001116 	blt	r16,zero,40136d8 <__call_exitprocs+0xb0>
 4013694:	8c400044 	addi	r17,r17,1
 4013698:	8427883a 	add	r19,r16,r16
 401369c:	8c63883a 	add	r17,r17,r17
 40136a0:	95802204 	addi	r22,r18,136
 40136a4:	9ce7883a 	add	r19,r19,r19
 40136a8:	8c63883a 	add	r17,r17,r17
 40136ac:	b4e7883a 	add	r19,r22,r19
 40136b0:	9463883a 	add	r17,r18,r17
 40136b4:	e0001726 	beq	fp,zero,4013714 <__call_exitprocs+0xec>
 40136b8:	8c87c83a 	sub	r3,r17,r18
 40136bc:	b0c7883a 	add	r3,r22,r3
 40136c0:	18c01e17 	ldw	r3,120(r3)
 40136c4:	1f001326 	beq	r3,fp,4013714 <__call_exitprocs+0xec>
 40136c8:	843fffc4 	addi	r16,r16,-1
 40136cc:	9cffff04 	addi	r19,r19,-4
 40136d0:	8c7fff04 	addi	r17,r17,-4
 40136d4:	857ff71e 	bne	r16,r21,40136b4 <__call_exitprocs+0x8c>
 40136d8:	00810074 	movhi	r2,1025
 40136dc:	10a23b04 	addi	r2,r2,-30484
 40136e0:	10002a1e 	bne	r2,zero,401378c <__call_exitprocs+0x164>
 40136e4:	dfc00c17 	ldw	ra,48(sp)
 40136e8:	df000b17 	ldw	fp,44(sp)
 40136ec:	ddc00a17 	ldw	r23,40(sp)
 40136f0:	dd800917 	ldw	r22,36(sp)
 40136f4:	dd400817 	ldw	r21,32(sp)
 40136f8:	dd000717 	ldw	r20,28(sp)
 40136fc:	dcc00617 	ldw	r19,24(sp)
 4013700:	dc800517 	ldw	r18,20(sp)
 4013704:	dc400417 	ldw	r17,16(sp)
 4013708:	dc000317 	ldw	r16,12(sp)
 401370c:	dec00d04 	addi	sp,sp,52
 4013710:	f800283a 	ret
 4013714:	91000117 	ldw	r4,4(r18)
 4013718:	88c00017 	ldw	r3,0(r17)
 401371c:	213fffc4 	addi	r4,r4,-1
 4013720:	24001526 	beq	r4,r16,4013778 <__call_exitprocs+0x150>
 4013724:	88000015 	stw	zero,0(r17)
 4013728:	183fe726 	beq	r3,zero,40136c8 <__call_exitprocs+0xa0>
 401372c:	00800044 	movi	r2,1
 4013730:	1408983a 	sll	r4,r2,r16
 4013734:	91406217 	ldw	r5,392(r18)
 4013738:	95000117 	ldw	r20,4(r18)
 401373c:	214a703a 	and	r5,r4,r5
 4013740:	28000b26 	beq	r5,zero,4013770 <__call_exitprocs+0x148>
 4013744:	91406317 	ldw	r5,396(r18)
 4013748:	2148703a 	and	r4,r4,r5
 401374c:	20000c1e 	bne	r4,zero,4013780 <__call_exitprocs+0x158>
 4013750:	99400017 	ldw	r5,0(r19)
 4013754:	d9000117 	ldw	r4,4(sp)
 4013758:	183ee83a 	callr	r3
 401375c:	90c00117 	ldw	r3,4(r18)
 4013760:	1d3fc51e 	bne	r3,r20,4013678 <__call_exitprocs+0x50>
 4013764:	b8c00017 	ldw	r3,0(r23)
 4013768:	1cbfd726 	beq	r3,r18,40136c8 <__call_exitprocs+0xa0>
 401376c:	003fc206 	br	4013678 <__call_exitprocs+0x50>
 4013770:	183ee83a 	callr	r3
 4013774:	003ff906 	br	401375c <__call_exitprocs+0x134>
 4013778:	94000115 	stw	r16,4(r18)
 401377c:	003fea06 	br	4013728 <__call_exitprocs+0x100>
 4013780:	99000017 	ldw	r4,0(r19)
 4013784:	183ee83a 	callr	r3
 4013788:	003ff406 	br	401375c <__call_exitprocs+0x134>
 401378c:	90c00117 	ldw	r3,4(r18)
 4013790:	1800071e 	bne	r3,zero,40137b0 <__call_exitprocs+0x188>
 4013794:	90c00017 	ldw	r3,0(r18)
 4013798:	18000926 	beq	r3,zero,40137c0 <__call_exitprocs+0x198>
 401379c:	9009883a 	mov	r4,r18
 40137a0:	b8c00015 	stw	r3,0(r23)
 40137a4:	40088ec0 	call	40088ec <free>
 40137a8:	bc800017 	ldw	r18,0(r23)
 40137ac:	003fb506 	br	4013684 <__call_exitprocs+0x5c>
 40137b0:	90c00017 	ldw	r3,0(r18)
 40137b4:	902f883a 	mov	r23,r18
 40137b8:	1825883a 	mov	r18,r3
 40137bc:	003fb106 	br	4013684 <__call_exitprocs+0x5c>
 40137c0:	0007883a 	mov	r3,zero
 40137c4:	003ffb06 	br	40137b4 <__call_exitprocs+0x18c>

040137c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40137c8:	defffc04 	addi	sp,sp,-16
 40137cc:	df000315 	stw	fp,12(sp)
 40137d0:	df000304 	addi	fp,sp,12
 40137d4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40137d8:	0001883a 	nop
 40137dc:	e0bfff17 	ldw	r2,-4(fp)
 40137e0:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 40137e4:	e0bffd17 	ldw	r2,-12(fp)
 40137e8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40137ec:	e0bffe17 	ldw	r2,-8(fp)
 40137f0:	10000226 	beq	r2,zero,40137fc <_exit+0x34>
    ALT_SIM_FAIL();
 40137f4:	002af070 	cmpltui	zero,zero,43969
 40137f8:	00000106 	br	4013800 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 40137fc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4013800:	003fff06 	br	4013800 <_exit+0x38>
