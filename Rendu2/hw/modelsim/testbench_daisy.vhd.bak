library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity tb_daisy is
end tb_daisy;

architecture test of tb_daisy is
	constant CLK_PERIOD : time := 20 ns;

	signal clk	:	std_logic;
	signal nReset	:	std_logic;
	
	signal address	:	std_logic_vector(3 downto 0);
	signal write	:	std_logic;
	signal writedata:	std_logic_vector(31 downto 0);
	signal LEDPort	:	std_logic;
	signal enablePort	:	std_logic;

	begin
	daisy : entity work.DaisyPort
	port map(
		clk => clk,
		nReset => nReset,
		address => address,
		write => write,
		writedata => writedata,
		LEDPort => LEDPort,
		enablePort => enablePort
	);

	-- Generate CLK signal
	clk_generation : process
		begin
			clk <= '1';
			wait for CLK_PERIOD / 2;
			clk <= '0';
			wait for CLK_PERIOD / 2;
		end process clk_generation;

	simulation : process
		procedure async_reset is
		begin
			wait until rising_edge(clk);
			wait for CLK_PERIOD / 4;
			nReset <= '0';
			wait for CLK_PERIOD / 2;
			nReset <= '1';
		end procedure async_reset;

	procedure daisy_write(	constant add : in natural ; 
				constant val	: in natural) is 
	begin

		write <= '1';
		address <= std_logic_vector(to_unsigned(add, address'length));
		writedata  <= std_logic_vector(to_unsigned(val, writedata'length));
		write <= '0';
	end procedure daisy_write;

	begin
		write <= '0';
		writedata <= ('0' => others);
		address <= ('0' => others);

		async_reset;
		wait for 100000ns;
		daisy_write(1, 162);
		daisy_write(2, 1001);
		daisy_write(3, 1234);
		daisy_write(4, 1010);

	wait;
end process simulation;

end architecture test;
