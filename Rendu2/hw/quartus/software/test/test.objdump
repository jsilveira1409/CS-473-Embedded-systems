
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020224

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005b60 memsz 0x00005b60 flags r-x
    LOAD off    0x00006b80 vaddr 0x00025b80 paddr 0x000275ec align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00000058 vaddr 0x00029058 paddr 0x00029058 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005910  00020224  00020224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  00025b34  00025b34  00006b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00025b80  000275ec  00006b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  00029058  00029058  00009058  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000291b0  000291b0  000085ec  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  000085ec  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000aa0  00000000  00000000  00008620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   000194a6  00000000  00000000  000090c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006fd3  00000000  00000000  00022566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   0000a07d  00000000  00000000  00029539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  0000170c  00000000  00000000  000335b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00002a79  00000000  00000000  00034cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005f9a  00000000  00000000  0003773d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003d6d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008c0  00000000  00000000  0003d6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  00040602  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00040605  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00040611  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00040612  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00040613  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0004061e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00040629  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  00040634  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002f  00000000  00000000  0004063a  2**0
                  CONTENTS, READONLY
 26 .jdi          00004d23  00000000  00000000  00040669  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00031477  00000000  00000000  0004538c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020224 l    d  .text	00000000 .text
00025b34 l    d  .rodata	00000000 .rodata
00025b80 l    d  .rwdata	00000000 .rwdata
00029058 l    d  .bss	00000000 .bss
000291b0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/osour/Desktop/EmbSys/Rendu2/hw/quartus/software/test_bsp//obj/HAL/src/crt0.o
0002025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 daisyport.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
00025b80 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 findfp.c
00020800 l     F .text	00000008 __fp_lock
00020814 l     F .text	00000008 __fp_unlock
0002081c l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00022640 l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
00023480 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00023598 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000235c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000236bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000237a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023894 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00023a74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000275dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
00023ce0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00023d98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023ed8 l     F .text	00000034 alt_dev_reg
00026554 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
000241b4 l     F .text	0000020c altera_avalon_jtag_uart_irq
000243c0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00024b84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00024fe8 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00025138 l     F .text	0000003c alt_get_errno
00025174 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00029084 g     O .bss	00000004 alt_instruction_exception_handler
00023274 g     F .text	00000058 _isatty_r
000239b0 g     F .text	0000007c alt_main
00020684 g     F .text	000000cc _puts_r
000290b0 g     O .bss	00000100 alt_irq
00022f04 g     F .text	00000064 _lseek_r
000275ec g       *ABS*	00000000 __flash_rwdata_start
000291b0 g       *ABS*	00000000 __alt_heap_start
000223bc g     F .text	0000005c __sseek
00020b64 g     F .text	00000010 __sinit
00020984 g     F .text	00000078 __sfmoreglue
00023a50 g     F .text	00000024 __malloc_unlock
00020410 g     F .text	000000b8 daisy_all_set
00021b30 g     F .text	0000012c memmove
00020b50 g     F .text	00000014 _cleanup
00025580 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00023d1c g     F .text	0000007c times
00020020 g       *ABS*	00000000 __flash_exceptions_start
00023214 g     F .text	00000060 _fstat_r
00029064 g     O .bss	00000004 errno
00022334 g     F .text	00000008 __seofread
0002906c g     O .bss	00000004 alt_argv
0002f5b4 g       *ABS*	00000000 _gp
00020338 g     F .text	0000006c daisy_d3_set
000202cc g     F .text	0000006c daisy_d2_set
000263d4 g     O .rwdata	00000180 alt_fd_list
000255a4 g     F .text	00000090 alt_find_dev
00021a30 g     F .text	00000100 memcpy
000207f8 g     F .text	00000008 _times_r
000203a4 g     F .text	0000006c daisy_d4_set
00020808 g     F .text	0000000c _cleanup_r
000250bc g     F .text	0000007c alt_io_redirect
00025b34 g       *ABS*	00000000 __DTOR_END__
00020750 g     F .text	00000010 puts
000257f4 g     F .text	00000098 alt_exception_cause_generated_bad_addr
000245bc g     F .text	00000220 altera_avalon_jtag_uart_read
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000233c0 g     F .text	00000064 .hidden __udivsi3
000236f8 g     F .text	000000b0 isatty
00029060 g     O .bss	00000004 __malloc_top_pad
00020bac g     F .text	00000494 __sfvwrite_r
00022288 g     F .text	00000058 _sbrk_r
000231b0 g     F .text	00000064 _read_r
000275d4 g     O .rwdata	00000004 alt_max_fd
00022700 g     F .text	00000070 _fclose_r
00022a68 g     F .text	00000084 fflush
0002905c g     O .bss	00000004 __malloc_max_sbrked_mem
000238d0 g     F .text	000000e0 lseek
000275b4 g     O .rwdata	00000004 _global_impure_ptr
00021d4c g     F .text	0000053c _realloc_r
000291b0 g       *ABS*	00000000 __bss_end
00024f00 g     F .text	000000e8 alt_iic_isr_register
00025454 g     F .text	0000012c alt_tick
00020b84 g     F .text	00000014 __fp_lock_all
00024eb4 g     F .text	0000004c alt_ic_irq_enabled
000253b0 g     F .text	000000a4 alt_alarm_stop
00029074 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000c8 alt_irq_handler
000263ac g     O .rwdata	00000028 alt_dev_null
00024b64 g     F .text	00000020 alt_dcache_flush_all
000275ec g       *ABS*	00000000 __ram_rwdata_end
000275cc g     O .rwdata	00000008 alt_dev_list
00023dd4 g     F .text	00000104 write
00025b80 g       *ABS*	00000000 __ram_rodata_end
00023600 g     F .text	000000bc fstat
00023424 g     F .text	0000005c .hidden __umodsi3
000291b0 g       *ABS*	00000000 end
000240f4 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201c4 g     F .exceptions	00000060 alt_instruction_exception_entry
00025b34 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
000247dc g     F .text	00000228 altera_avalon_jtag_uart_write
00020b74 g     F .text	00000004 __sfp_lock_acquire
00021960 g     F .text	000000d0 memchr
00022c08 g     F .text	000002fc _free_r
000259dc g     F .text	00000120 __call_exitprocs
000275bc g     O .rwdata	00000004 __malloc_sbrk_base
00020224 g     F .text	0000003c _start
00029078 g     O .bss	00000004 _alt_tick_rate
0002907c g     O .bss	00000008 _alt_nticks
00023ab0 g     F .text	00000108 read
00023f48 g     F .text	00000048 alt_sys_init
0002594c g     F .text	00000090 __register_exitproc
00024460 g     F .text	00000068 altera_avalon_jtag_uart_close
00020614 g     F .text	00000028 .hidden __mulsi3
00025b80 g       *ABS*	00000000 __ram_rwdata_start
00025b34 g       *ABS*	00000000 __ram_rodata_start
00029088 g     O .bss	00000028 __malloc_current_mallinfo
00023f90 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002573c g     F .text	000000b8 alt_get_fd
000225e8 g     F .text	00000058 _close_r
000258d4 g     F .text	00000078 memcmp
00024050 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000291b0 g       *ABS*	00000000 __alt_stack_base
000240a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022484 g     F .text	00000164 __swsetup_r
000209fc g     F .text	00000154 __sfp
00025fa4 g     O .rwdata	00000408 __malloc_av_
00020b80 g     F .text	00000004 __sinit_lock_release
000222e0 g     F .text	00000054 __sread
00025634 g     F .text	00000108 alt_find_file
000204c8 g     F .text	00000030 daisy_enable
00024bc0 g     F .text	000000a8 alt_dev_llist_insert
00023a2c g     F .text	00000024 __malloc_lock
00023c28 g     F .text	000000b8 sbrk
00022a08 g     F .text	00000060 _fflush_r
00029058 g       *ABS*	00000000 __bss_start
00021c5c g     F .text	000000f0 memset
0002055c g     F .text	000000b8 main
00029070 g     O .bss	00000004 alt_envp
00029058 g     O .bss	00000004 __malloc_max_total_mem
00023ff0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00022418 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00022770 g     F .text	00000070 fclose
00021180 g     F .text	000007e0 _malloc_r
000275d8 g     O .rwdata	00000004 alt_errno
00021040 g     F .text	00000098 _fwalk
000232cc g     F .text	00000080 .hidden __divsi3
00022aec g     F .text	0000011c _malloc_trim_r
00025b34 g       *ABS*	00000000 __CTOR_END__
00025b34 g       *ABS*	00000000 __flash_rodata_start
00025b34 g       *ABS*	00000000 __DTOR_LIST__
000204f8 g     F .text	00000064 delay
00023f0c g     F .text	0000003c alt_irq_init
00023bb8 g     F .text	00000070 alt_release_fd
0002588c g     F .text	00000014 atexit
00022420 g     F .text	00000064 _write_r
000275b8 g     O .rwdata	00000004 _impure_ptr
00029068 g     O .bss	00000004 alt_argc
000227e0 g     F .text	00000228 __sflush_r
00024ccc g     F .text	00000064 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00020b98 g     F .text	00000014 __fp_unlock_all
000275c4 g     O .rwdata	00000008 alt_fs_list
00020260 g     F .text	0000006c daisy_d1_set
00020020 g       *ABS*	00000000 __ram_exceptions_start
00023118 g     F .text	00000098 __swhatbuf_r
00024d50 g     F .text	00000050 alt_ic_isr_register
000275ec g       *ABS*	00000000 _edata
000291b0 g       *ABS*	00000000 _end
00020224 g       *ABS*	00000000 __ram_exceptions_end
000244c8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00024e28 g     F .text	0000008c alt_ic_irq_disable
0002233c g     F .text	00000080 __swrite
000275c0 g     O .rwdata	00000004 __malloc_trim_threshold
000258a0 g     F .text	00000034 exit
000210d8 g     F .text	000000a8 _fwalk_reent
0002334c g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020b78 g     F .text	00000004 __sfp_lock_release
00025afc g     F .text	00000038 _exit
00024a04 g     F .text	00000160 alt_alarm_start
00022f68 g     F .text	000001b0 __smakebuf_r
00020760 g     F .text	00000098 strlen
00025250 g     F .text	00000160 open
0002063c g     F .text	00000048 clock
00024d30 g     F .text	00000020 alt_icache_flush_all
000275e0 g     O .rwdata	00000004 alt_priority_mask
00024da0 g     F .text	00000088 alt_ic_irq_enable
000275e4 g     O .rwdata	00000008 alt_alarm_list
00024c68 g     F .text	00000064 _do_ctors
000234bc g     F .text	000000dc close
00023810 g     F .text	00000084 alt_load
00020b7c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408914 	ori	at,at,548
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201c40 	call	201c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0ffff17 	ldw	r3,-4(fp)
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001126 	beq	r2,zero,20180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	e0bffd17 	ldw	r2,-12(fp)
   20140:	100690fa 	slli	r3,r2,3
   20144:	008000f4 	movhi	r2,3
   20148:	1885883a 	add	r2,r3,r2
   2014c:	10e42c17 	ldw	r3,-28496(r2)
   20150:	e0bffd17 	ldw	r2,-12(fp)
   20154:	100890fa 	slli	r4,r2,3
   20158:	008000f4 	movhi	r2,3
   2015c:	2085883a 	add	r2,r4,r2
   20160:	10a42d17 	ldw	r2,-28492(r2)
   20164:	1009883a 	mov	r4,r2
   20168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   2016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   20170:	0005313a 	rdctl	r2,ipending
   20174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   20178:	e0bffb17 	ldw	r2,-20(fp)
   2017c:	00000706 	br	2019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   20180:	e0bffe17 	ldw	r2,-8(fp)
   20184:	1085883a 	add	r2,r2,r2
   20188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   2018c:	e0bffd17 	ldw	r2,-12(fp)
   20190:	10800044 	addi	r2,r2,1
   20194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   20198:	003fe406 	br	2012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   2019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   201a0:	e0bfff17 	ldw	r2,-4(fp)
   201a4:	103fde1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201a8:	0001883a 	nop
}
   201ac:	0001883a 	nop
   201b0:	e037883a 	mov	sp,fp
   201b4:	dfc00117 	ldw	ra,4(sp)
   201b8:	df000017 	ldw	fp,0(sp)
   201bc:	dec00204 	addi	sp,sp,8
   201c0:	f800283a 	ret

000201c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201c4:	defffb04 	addi	sp,sp,-20
   201c8:	dfc00415 	stw	ra,16(sp)
   201cc:	df000315 	stw	fp,12(sp)
   201d0:	df000304 	addi	fp,sp,12
   201d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201d8:	00bfffc4 	movi	r2,-1
   201dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   201e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201e4:	d0a6b417 	ldw	r2,-25904(gp)
   201e8:	10000726 	beq	r2,zero,20208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201ec:	d0a6b417 	ldw	r2,-25904(gp)
   201f0:	e0ffff17 	ldw	r3,-4(fp)
   201f4:	e1bffe17 	ldw	r6,-8(fp)
   201f8:	e17ffd17 	ldw	r5,-12(fp)
   201fc:	1809883a 	mov	r4,r3
   20200:	103ee83a 	callr	r2
   20204:	00000206 	br	20210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2020c:	0005883a 	mov	r2,zero
}
   20210:	e037883a 	mov	sp,fp
   20214:	dfc00117 	ldw	ra,4(sp)
   20218:	df000017 	ldw	fp,0(sp)
   2021c:	dec00204 	addi	sp,sp,8
   20220:	f800283a 	ret

Disassembly of section .text:

00020224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20224:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2022c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20230:	d6bd6d14 	ori	gp,gp,62900
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20234:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20238:	10a41614 	ori	r2,r2,36952

    movhi r3, %hi(__bss_end)
   2023c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20240:	18e46c14 	ori	r3,r3,37296

    beq r2, r3, 1f
   20244:	10c00326 	beq	r2,r3,20254 <_start+0x30>

0:
    stw zero, (r2)
   20248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20250:	10fffd36 	bltu	r2,r3,20248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20254:	00238100 	call	23810 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20258:	00239b00 	call	239b0 <alt_main>

0002025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2025c:	003fff06 	br	2025c <alt_after_alt_main>

00020260 <daisy_d1_set>:
#include "daisyport.h"
#include "io.h"

void daisy_d1_set(uint8_t red, uint8_t green, uint8_t blue){
   20260:	defffb04 	addi	sp,sp,-20
   20264:	df000415 	stw	fp,16(sp)
   20268:	df000404 	addi	fp,sp,16
   2026c:	2005883a 	mov	r2,r4
   20270:	2809883a 	mov	r4,r5
   20274:	3007883a 	mov	r3,r6
   20278:	e0bffe05 	stb	r2,-8(fp)
   2027c:	2005883a 	mov	r2,r4
   20280:	e0bffd05 	stb	r2,-12(fp)
   20284:	1805883a 	mov	r2,r3
   20288:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   2028c:	e0bffc03 	ldbu	r2,-16(fp)
   20290:	1006943a 	slli	r3,r2,16
   20294:	e0bffe03 	ldbu	r2,-8(fp)
   20298:	1004923a 	slli	r2,r2,8
   2029c:	1886b03a 	or	r3,r3,r2
   202a0:	e0bffd03 	ldbu	r2,-12(fp)
   202a4:	1884b03a 	or	r2,r3,r2
   202a8:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D1_OFFSET,color);
   202ac:	e0ffff17 	ldw	r3,-4(fp)
   202b0:	00800134 	movhi	r2,4
   202b4:	10c40135 	stwio	r3,4100(r2)
}
   202b8:	0001883a 	nop
   202bc:	e037883a 	mov	sp,fp
   202c0:	df000017 	ldw	fp,0(sp)
   202c4:	dec00104 	addi	sp,sp,4
   202c8:	f800283a 	ret

000202cc <daisy_d2_set>:

void daisy_d2_set(uint8_t red, uint8_t green, uint8_t blue){
   202cc:	defffb04 	addi	sp,sp,-20
   202d0:	df000415 	stw	fp,16(sp)
   202d4:	df000404 	addi	fp,sp,16
   202d8:	2005883a 	mov	r2,r4
   202dc:	2809883a 	mov	r4,r5
   202e0:	3007883a 	mov	r3,r6
   202e4:	e0bffe05 	stb	r2,-8(fp)
   202e8:	2005883a 	mov	r2,r4
   202ec:	e0bffd05 	stb	r2,-12(fp)
   202f0:	1805883a 	mov	r2,r3
   202f4:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   202f8:	e0bffc03 	ldbu	r2,-16(fp)
   202fc:	1006943a 	slli	r3,r2,16
   20300:	e0bffe03 	ldbu	r2,-8(fp)
   20304:	1004923a 	slli	r2,r2,8
   20308:	1886b03a 	or	r3,r3,r2
   2030c:	e0bffd03 	ldbu	r2,-12(fp)
   20310:	1884b03a 	or	r2,r3,r2
   20314:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D2_OFFSET,color);
   20318:	e0ffff17 	ldw	r3,-4(fp)
   2031c:	00800134 	movhi	r2,4
   20320:	10c40235 	stwio	r3,4104(r2)
}
   20324:	0001883a 	nop
   20328:	e037883a 	mov	sp,fp
   2032c:	df000017 	ldw	fp,0(sp)
   20330:	dec00104 	addi	sp,sp,4
   20334:	f800283a 	ret

00020338 <daisy_d3_set>:

void daisy_d3_set(uint8_t red, uint8_t green, uint8_t blue){
   20338:	defffb04 	addi	sp,sp,-20
   2033c:	df000415 	stw	fp,16(sp)
   20340:	df000404 	addi	fp,sp,16
   20344:	2005883a 	mov	r2,r4
   20348:	2809883a 	mov	r4,r5
   2034c:	3007883a 	mov	r3,r6
   20350:	e0bffe05 	stb	r2,-8(fp)
   20354:	2005883a 	mov	r2,r4
   20358:	e0bffd05 	stb	r2,-12(fp)
   2035c:	1805883a 	mov	r2,r3
   20360:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   20364:	e0bffc03 	ldbu	r2,-16(fp)
   20368:	1006943a 	slli	r3,r2,16
   2036c:	e0bffe03 	ldbu	r2,-8(fp)
   20370:	1004923a 	slli	r2,r2,8
   20374:	1886b03a 	or	r3,r3,r2
   20378:	e0bffd03 	ldbu	r2,-12(fp)
   2037c:	1884b03a 	or	r2,r3,r2
   20380:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D3_OFFSET,color);
   20384:	e0ffff17 	ldw	r3,-4(fp)
   20388:	00800134 	movhi	r2,4
   2038c:	10c40335 	stwio	r3,4108(r2)
}
   20390:	0001883a 	nop
   20394:	e037883a 	mov	sp,fp
   20398:	df000017 	ldw	fp,0(sp)
   2039c:	dec00104 	addi	sp,sp,4
   203a0:	f800283a 	ret

000203a4 <daisy_d4_set>:

void daisy_d4_set(uint8_t red, uint8_t green, uint8_t blue){
   203a4:	defffb04 	addi	sp,sp,-20
   203a8:	df000415 	stw	fp,16(sp)
   203ac:	df000404 	addi	fp,sp,16
   203b0:	2005883a 	mov	r2,r4
   203b4:	2809883a 	mov	r4,r5
   203b8:	3007883a 	mov	r3,r6
   203bc:	e0bffe05 	stb	r2,-8(fp)
   203c0:	2005883a 	mov	r2,r4
   203c4:	e0bffd05 	stb	r2,-12(fp)
   203c8:	1805883a 	mov	r2,r3
   203cc:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   203d0:	e0bffc03 	ldbu	r2,-16(fp)
   203d4:	1006943a 	slli	r3,r2,16
   203d8:	e0bffe03 	ldbu	r2,-8(fp)
   203dc:	1004923a 	slli	r2,r2,8
   203e0:	1886b03a 	or	r3,r3,r2
   203e4:	e0bffd03 	ldbu	r2,-12(fp)
   203e8:	1884b03a 	or	r2,r3,r2
   203ec:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D4_OFFSET,color);
   203f0:	e0ffff17 	ldw	r3,-4(fp)
   203f4:	00800134 	movhi	r2,4
   203f8:	10c40435 	stwio	r3,4112(r2)
}
   203fc:	0001883a 	nop
   20400:	e037883a 	mov	sp,fp
   20404:	df000017 	ldw	fp,0(sp)
   20408:	dec00104 	addi	sp,sp,4
   2040c:	f800283a 	ret

00020410 <daisy_all_set>:


void daisy_all_set(uint8_t red, uint8_t green, uint8_t blue){
   20410:	defffb04 	addi	sp,sp,-20
   20414:	dfc00415 	stw	ra,16(sp)
   20418:	df000315 	stw	fp,12(sp)
   2041c:	df000304 	addi	fp,sp,12
   20420:	2005883a 	mov	r2,r4
   20424:	2809883a 	mov	r4,r5
   20428:	3007883a 	mov	r3,r6
   2042c:	e0bfff05 	stb	r2,-4(fp)
   20430:	2005883a 	mov	r2,r4
   20434:	e0bffe05 	stb	r2,-8(fp)
   20438:	1805883a 	mov	r2,r3
   2043c:	e0bffd05 	stb	r2,-12(fp)
	daisy_d1_set(red, green, blue);
   20440:	e0bfff03 	ldbu	r2,-4(fp)
   20444:	e0fffe03 	ldbu	r3,-8(fp)
   20448:	e13ffd03 	ldbu	r4,-12(fp)
   2044c:	200d883a 	mov	r6,r4
   20450:	180b883a 	mov	r5,r3
   20454:	1009883a 	mov	r4,r2
   20458:	00202600 	call	20260 <daisy_d1_set>
	daisy_d2_set(red, green, blue);
   2045c:	e0bfff03 	ldbu	r2,-4(fp)
   20460:	e0fffe03 	ldbu	r3,-8(fp)
   20464:	e13ffd03 	ldbu	r4,-12(fp)
   20468:	200d883a 	mov	r6,r4
   2046c:	180b883a 	mov	r5,r3
   20470:	1009883a 	mov	r4,r2
   20474:	00202cc0 	call	202cc <daisy_d2_set>
	daisy_d3_set(red, green, blue);
   20478:	e0bfff03 	ldbu	r2,-4(fp)
   2047c:	e0fffe03 	ldbu	r3,-8(fp)
   20480:	e13ffd03 	ldbu	r4,-12(fp)
   20484:	200d883a 	mov	r6,r4
   20488:	180b883a 	mov	r5,r3
   2048c:	1009883a 	mov	r4,r2
   20490:	00203380 	call	20338 <daisy_d3_set>
	daisy_d4_set(red, green, blue);
   20494:	e0bfff03 	ldbu	r2,-4(fp)
   20498:	e0fffe03 	ldbu	r3,-8(fp)
   2049c:	e13ffd03 	ldbu	r4,-12(fp)
   204a0:	200d883a 	mov	r6,r4
   204a4:	180b883a 	mov	r5,r3
   204a8:	1009883a 	mov	r4,r2
   204ac:	00203a40 	call	203a4 <daisy_d4_set>
}
   204b0:	0001883a 	nop
   204b4:	e037883a 	mov	sp,fp
   204b8:	dfc00117 	ldw	ra,4(sp)
   204bc:	df000017 	ldw	fp,0(sp)
   204c0:	dec00204 	addi	sp,sp,8
   204c4:	f800283a 	ret

000204c8 <daisy_enable>:


void daisy_enable(uint32_t enable){
   204c8:	defffe04 	addi	sp,sp,-8
   204cc:	df000115 	stw	fp,4(sp)
   204d0:	df000104 	addi	fp,sp,4
   204d4:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_ENABLE_OFFSET,enable);
   204d8:	e0ffff17 	ldw	r3,-4(fp)
   204dc:	00800134 	movhi	r2,4
   204e0:	10c40435 	stwio	r3,4112(r2)
}
   204e4:	0001883a 	nop
   204e8:	e037883a 	mov	sp,fp
   204ec:	df000017 	ldw	fp,0(sp)
   204f0:	dec00104 	addi	sp,sp,4
   204f4:	f800283a 	ret

000204f8 <delay>:
#include <stdio.h>
#include "daisyport.h"
#include <time.h>

void delay(int number_of_seconds)
{
   204f8:	defffb04 	addi	sp,sp,-20
   204fc:	dfc00415 	stw	ra,16(sp)
   20500:	df000315 	stw	fp,12(sp)
   20504:	df000304 	addi	fp,sp,12
   20508:	e13ffd15 	stw	r4,-12(fp)
    // Converting time into milli_seconds
    int milli_seconds = 1000 * number_of_seconds;
   2050c:	0140fa04 	movi	r5,1000
   20510:	e13ffd17 	ldw	r4,-12(fp)
   20514:	00206140 	call	20614 <__mulsi3>
   20518:	e0bfff15 	stw	r2,-4(fp)

    // Storing start time
    clock_t start_time = clock();
   2051c:	002063c0 	call	2063c <clock>
   20520:	e0bffe15 	stw	r2,-8(fp)

    // looping till required time is not achieved
    while (clock() < start_time + milli_seconds)
   20524:	0001883a 	nop
   20528:	002063c0 	call	2063c <clock>
   2052c:	1009883a 	mov	r4,r2
   20530:	e0ffff17 	ldw	r3,-4(fp)
   20534:	e0bffe17 	ldw	r2,-8(fp)
   20538:	1885883a 	add	r2,r3,r2
   2053c:	20bffa36 	bltu	r4,r2,20528 <delay+0x30>
        ;
}
   20540:	0001883a 	nop
   20544:	0001883a 	nop
   20548:	e037883a 	mov	sp,fp
   2054c:	dfc00117 	ldw	ra,4(sp)
   20550:	df000017 	ldw	fp,0(sp)
   20554:	dec00204 	addi	sp,sp,8
   20558:	f800283a 	ret

0002055c <main>:


int main()
{
   2055c:	defffe04 	addi	sp,sp,-8
   20560:	dfc00115 	stw	ra,4(sp)
   20564:	df000015 	stw	fp,0(sp)
   20568:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
   2056c:	010000b4 	movhi	r4,2
   20570:	2116cd04 	addi	r4,r4,23348
   20574:	00207500 	call	20750 <puts>



  daisy_enable(0);
   20578:	0009883a 	mov	r4,zero
   2057c:	00204c80 	call	204c8 <daisy_enable>
  daisy_all_set(0, 255, 0);
   20580:	000d883a 	mov	r6,zero
   20584:	01403fc4 	movi	r5,255
   20588:	0009883a 	mov	r4,zero
   2058c:	00204100 	call	20410 <daisy_all_set>
  daisy_enable(1);
   20590:	01000044 	movi	r4,1
   20594:	00204c80 	call	204c8 <daisy_enable>
  while(1){
	  daisy_enable(0);
   20598:	0009883a 	mov	r4,zero
   2059c:	00204c80 	call	204c8 <daisy_enable>
	  daisy_all_set(255, 0, 0);
   205a0:	000d883a 	mov	r6,zero
   205a4:	000b883a 	mov	r5,zero
   205a8:	01003fc4 	movi	r4,255
   205ac:	00204100 	call	20410 <daisy_all_set>
	  daisy_enable(1);
   205b0:	01000044 	movi	r4,1
   205b4:	00204c80 	call	204c8 <daisy_enable>
	  delay(2);
   205b8:	01000084 	movi	r4,2
   205bc:	00204f80 	call	204f8 <delay>
	  daisy_enable(0);
   205c0:	0009883a 	mov	r4,zero
   205c4:	00204c80 	call	204c8 <daisy_enable>
	  daisy_all_set(0, 255, 0);
   205c8:	000d883a 	mov	r6,zero
   205cc:	01403fc4 	movi	r5,255
   205d0:	0009883a 	mov	r4,zero
   205d4:	00204100 	call	20410 <daisy_all_set>
	  daisy_enable(1);
   205d8:	01000044 	movi	r4,1
   205dc:	00204c80 	call	204c8 <daisy_enable>
	  delay(2);
   205e0:	01000084 	movi	r4,2
   205e4:	00204f80 	call	204f8 <delay>
	  daisy_enable(0);
   205e8:	0009883a 	mov	r4,zero
   205ec:	00204c80 	call	204c8 <daisy_enable>
	  daisy_all_set(0, 0, 255);
   205f0:	01803fc4 	movi	r6,255
   205f4:	000b883a 	mov	r5,zero
   205f8:	0009883a 	mov	r4,zero
   205fc:	00204100 	call	20410 <daisy_all_set>
	  daisy_enable(1);
   20600:	01000044 	movi	r4,1
   20604:	00204c80 	call	204c8 <daisy_enable>
	  delay(2);
   20608:	01000084 	movi	r4,2
   2060c:	00204f80 	call	204f8 <delay>
	  daisy_enable(0);
   20610:	003fe106 	br	20598 <main+0x3c>

00020614 <__mulsi3>:
   20614:	0005883a 	mov	r2,zero
   20618:	20000726 	beq	r4,zero,20638 <__mulsi3+0x24>
   2061c:	20c0004c 	andi	r3,r4,1
   20620:	2008d07a 	srli	r4,r4,1
   20624:	18000126 	beq	r3,zero,2062c <__mulsi3+0x18>
   20628:	1145883a 	add	r2,r2,r5
   2062c:	294b883a 	add	r5,r5,r5
   20630:	203ffa1e 	bne	r4,zero,2061c <__mulsi3+0x8>
   20634:	f800283a 	ret
   20638:	f800283a 	ret

0002063c <clock>:
   2063c:	008000b4 	movhi	r2,2
   20640:	111d6e17 	ldw	r4,30136(r2)
   20644:	defffb04 	addi	sp,sp,-20
   20648:	d80b883a 	mov	r5,sp
   2064c:	dfc00415 	stw	ra,16(sp)
   20650:	00207f80 	call	207f8 <_times_r>
   20654:	10ffffe0 	cmpeqi	r3,r2,-1
   20658:	1800071e 	bne	r3,zero,20678 <clock+0x3c>
   2065c:	d8c00117 	ldw	r3,4(sp)
   20660:	d8800017 	ldw	r2,0(sp)
   20664:	10c5883a 	add	r2,r2,r3
   20668:	d8c00217 	ldw	r3,8(sp)
   2066c:	10c5883a 	add	r2,r2,r3
   20670:	d8c00317 	ldw	r3,12(sp)
   20674:	10c5883a 	add	r2,r2,r3
   20678:	dfc00417 	ldw	ra,16(sp)
   2067c:	dec00504 	addi	sp,sp,20
   20680:	f800283a 	ret

00020684 <_puts_r>:
   20684:	defff504 	addi	sp,sp,-44
   20688:	dc000815 	stw	r16,32(sp)
   2068c:	2021883a 	mov	r16,r4
   20690:	2809883a 	mov	r4,r5
   20694:	dc400915 	stw	r17,36(sp)
   20698:	dfc00a15 	stw	ra,40(sp)
   2069c:	2823883a 	mov	r17,r5
   206a0:	00207600 	call	20760 <strlen>
   206a4:	11000044 	addi	r4,r2,1
   206a8:	d8800515 	stw	r2,20(sp)
   206ac:	00800044 	movi	r2,1
   206b0:	00c000b4 	movhi	r3,2
   206b4:	d8800715 	stw	r2,28(sp)
   206b8:	d8800404 	addi	r2,sp,16
   206bc:	18d6d204 	addi	r3,r3,23368
   206c0:	d8800115 	stw	r2,4(sp)
   206c4:	00800084 	movi	r2,2
   206c8:	dc400415 	stw	r17,16(sp)
   206cc:	d8c00615 	stw	r3,24(sp)
   206d0:	d9000315 	stw	r4,12(sp)
   206d4:	d8800215 	stw	r2,8(sp)
   206d8:	81400217 	ldw	r5,8(r16)
   206dc:	80000226 	beq	r16,zero,206e8 <_puts_r+0x64>
   206e0:	80800e17 	ldw	r2,56(r16)
   206e4:	10001326 	beq	r2,zero,20734 <_puts_r+0xb0>
   206e8:	2880030b 	ldhu	r2,12(r5)
   206ec:	10c8000c 	andi	r3,r2,8192
   206f0:	1800061e 	bne	r3,zero,2070c <_puts_r+0x88>
   206f4:	28c01917 	ldw	r3,100(r5)
   206f8:	0137ffc4 	movi	r4,-8193
   206fc:	10880014 	ori	r2,r2,8192
   20700:	1906703a 	and	r3,r3,r4
   20704:	2880030d 	sth	r2,12(r5)
   20708:	28c01915 	stw	r3,100(r5)
   2070c:	d9800104 	addi	r6,sp,4
   20710:	8009883a 	mov	r4,r16
   20714:	0020bac0 	call	20bac <__sfvwrite_r>
   20718:	10000b1e 	bne	r2,zero,20748 <_puts_r+0xc4>
   2071c:	00800284 	movi	r2,10
   20720:	dfc00a17 	ldw	ra,40(sp)
   20724:	dc400917 	ldw	r17,36(sp)
   20728:	dc000817 	ldw	r16,32(sp)
   2072c:	dec00b04 	addi	sp,sp,44
   20730:	f800283a 	ret
   20734:	8009883a 	mov	r4,r16
   20738:	d9400015 	stw	r5,0(sp)
   2073c:	0020b640 	call	20b64 <__sinit>
   20740:	d9400017 	ldw	r5,0(sp)
   20744:	003fe806 	br	206e8 <_puts_r+0x64>
   20748:	00bfffc4 	movi	r2,-1
   2074c:	003ff406 	br	20720 <_puts_r+0x9c>

00020750 <puts>:
   20750:	008000b4 	movhi	r2,2
   20754:	200b883a 	mov	r5,r4
   20758:	111d6e17 	ldw	r4,30136(r2)
   2075c:	00206841 	jmpi	20684 <_puts_r>

00020760 <strlen>:
   20760:	208000cc 	andi	r2,r4,3
   20764:	10000926 	beq	r2,zero,2078c <strlen+0x2c>
   20768:	2005883a 	mov	r2,r4
   2076c:	00000306 	br	2077c <strlen+0x1c>
   20770:	10800044 	addi	r2,r2,1
   20774:	10c000cc 	andi	r3,r2,3
   20778:	18000526 	beq	r3,zero,20790 <strlen+0x30>
   2077c:	10c00007 	ldb	r3,0(r2)
   20780:	183ffb1e 	bne	r3,zero,20770 <strlen+0x10>
   20784:	1105c83a 	sub	r2,r2,r4
   20788:	f800283a 	ret
   2078c:	2005883a 	mov	r2,r4
   20790:	11400017 	ldw	r5,0(r2)
   20794:	01ffbff4 	movhi	r7,65279
   20798:	39ffbfc4 	addi	r7,r7,-257
   2079c:	29c7883a 	add	r3,r5,r7
   207a0:	01a02074 	movhi	r6,32897
   207a4:	014a303a 	nor	r5,zero,r5
   207a8:	1946703a 	and	r3,r3,r5
   207ac:	31a02004 	addi	r6,r6,-32640
   207b0:	1986703a 	and	r3,r3,r6
   207b4:	1800071e 	bne	r3,zero,207d4 <strlen+0x74>
   207b8:	11400117 	ldw	r5,4(r2)
   207bc:	10800104 	addi	r2,r2,4
   207c0:	29c7883a 	add	r3,r5,r7
   207c4:	014a303a 	nor	r5,zero,r5
   207c8:	1946703a 	and	r3,r3,r5
   207cc:	1986703a 	and	r3,r3,r6
   207d0:	183ff926 	beq	r3,zero,207b8 <strlen+0x58>
   207d4:	10c00007 	ldb	r3,0(r2)
   207d8:	183fea26 	beq	r3,zero,20784 <strlen+0x24>
   207dc:	10c00047 	ldb	r3,1(r2)
   207e0:	10800044 	addi	r2,r2,1
   207e4:	183fe726 	beq	r3,zero,20784 <strlen+0x24>
   207e8:	10c00047 	ldb	r3,1(r2)
   207ec:	10800044 	addi	r2,r2,1
   207f0:	183ffa1e 	bne	r3,zero,207dc <strlen+0x7c>
   207f4:	003fe306 	br	20784 <strlen+0x24>

000207f8 <_times_r>:
   207f8:	2809883a 	mov	r4,r5
   207fc:	0023d1c1 	jmpi	23d1c <times>

00020800 <__fp_lock>:
   20800:	0005883a 	mov	r2,zero
   20804:	f800283a 	ret

00020808 <_cleanup_r>:
   20808:	014000b4 	movhi	r5,2
   2080c:	2949c004 	addi	r5,r5,9984
   20810:	00210d81 	jmpi	210d8 <_fwalk_reent>

00020814 <__fp_unlock>:
   20814:	0005883a 	mov	r2,zero
   20818:	f800283a 	ret

0002081c <__sinit.part.0>:
   2081c:	00c000b4 	movhi	r3,2
   20820:	20800117 	ldw	r2,4(r4)
   20824:	18c20204 	addi	r3,r3,2056
   20828:	20c00f15 	stw	r3,60(r4)
   2082c:	2140bb04 	addi	r5,r4,748
   20830:	00c000c4 	movi	r3,3
   20834:	20c0b915 	stw	r3,740(r4)
   20838:	2140ba15 	stw	r5,744(r4)
   2083c:	2000b815 	stw	zero,736(r4)
   20840:	10001705 	stb	zero,92(r2)
   20844:	10001745 	stb	zero,93(r2)
   20848:	10001785 	stb	zero,94(r2)
   2084c:	100017c5 	stb	zero,95(r2)
   20850:	10001805 	stb	zero,96(r2)
   20854:	10001845 	stb	zero,97(r2)
   20858:	10001885 	stb	zero,98(r2)
   2085c:	100018c5 	stb	zero,99(r2)
   20860:	00c00104 	movi	r3,4
   20864:	10c00315 	stw	r3,12(r2)
   20868:	020000b4 	movhi	r8,2
   2086c:	20c00217 	ldw	r3,8(r4)
   20870:	01c000b4 	movhi	r7,2
   20874:	018000b4 	movhi	r6,2
   20878:	014000b4 	movhi	r5,2
   2087c:	4208b804 	addi	r8,r8,8928
   20880:	39c8cf04 	addi	r7,r7,9020
   20884:	3188ef04 	addi	r6,r6,9148
   20888:	29490604 	addi	r5,r5,9240
   2088c:	02400074 	movhi	r9,1
   20890:	10001915 	stw	zero,100(r2)
   20894:	10000015 	stw	zero,0(r2)
   20898:	10000115 	stw	zero,4(r2)
   2089c:	10000215 	stw	zero,8(r2)
   208a0:	10000415 	stw	zero,16(r2)
   208a4:	10000515 	stw	zero,20(r2)
   208a8:	10000615 	stw	zero,24(r2)
   208ac:	10800715 	stw	r2,28(r2)
   208b0:	12000815 	stw	r8,32(r2)
   208b4:	11c00915 	stw	r7,36(r2)
   208b8:	11800a15 	stw	r6,40(r2)
   208bc:	11400b15 	stw	r5,44(r2)
   208c0:	4a400284 	addi	r9,r9,10
   208c4:	1a400315 	stw	r9,12(r3)
   208c8:	18001915 	stw	zero,100(r3)
   208cc:	18000015 	stw	zero,0(r3)
   208d0:	18000115 	stw	zero,4(r3)
   208d4:	18000215 	stw	zero,8(r3)
   208d8:	18000415 	stw	zero,16(r3)
   208dc:	18001705 	stb	zero,92(r3)
   208e0:	18001745 	stb	zero,93(r3)
   208e4:	18001785 	stb	zero,94(r3)
   208e8:	180017c5 	stb	zero,95(r3)
   208ec:	18001805 	stb	zero,96(r3)
   208f0:	18001845 	stb	zero,97(r3)
   208f4:	18001885 	stb	zero,98(r3)
   208f8:	180018c5 	stb	zero,99(r3)
   208fc:	20800317 	ldw	r2,12(r4)
   20900:	024000b4 	movhi	r9,2
   20904:	18000515 	stw	zero,20(r3)
   20908:	18000615 	stw	zero,24(r3)
   2090c:	18c00715 	stw	r3,28(r3)
   20910:	1a000815 	stw	r8,32(r3)
   20914:	19c00915 	stw	r7,36(r3)
   20918:	19800a15 	stw	r6,40(r3)
   2091c:	19400b15 	stw	r5,44(r3)
   20920:	4a400484 	addi	r9,r9,18
   20924:	10001915 	stw	zero,100(r2)
   20928:	10000015 	stw	zero,0(r2)
   2092c:	10000115 	stw	zero,4(r2)
   20930:	10000215 	stw	zero,8(r2)
   20934:	12400315 	stw	r9,12(r2)
   20938:	10000415 	stw	zero,16(r2)
   2093c:	10000515 	stw	zero,20(r2)
   20940:	10000615 	stw	zero,24(r2)
   20944:	10001705 	stb	zero,92(r2)
   20948:	10001745 	stb	zero,93(r2)
   2094c:	10001785 	stb	zero,94(r2)
   20950:	100017c5 	stb	zero,95(r2)
   20954:	10001805 	stb	zero,96(r2)
   20958:	10001845 	stb	zero,97(r2)
   2095c:	10001885 	stb	zero,98(r2)
   20960:	100018c5 	stb	zero,99(r2)
   20964:	10800715 	stw	r2,28(r2)
   20968:	12000815 	stw	r8,32(r2)
   2096c:	11c00915 	stw	r7,36(r2)
   20970:	11800a15 	stw	r6,40(r2)
   20974:	11400b15 	stw	r5,44(r2)
   20978:	00800044 	movi	r2,1
   2097c:	20800e15 	stw	r2,56(r4)
   20980:	f800283a 	ret

00020984 <__sfmoreglue>:
   20984:	defffc04 	addi	sp,sp,-16
   20988:	dc800215 	stw	r18,8(sp)
   2098c:	2825883a 	mov	r18,r5
   20990:	dc000015 	stw	r16,0(sp)
   20994:	01401a04 	movi	r5,104
   20998:	2021883a 	mov	r16,r4
   2099c:	913fffc4 	addi	r4,r18,-1
   209a0:	dfc00315 	stw	ra,12(sp)
   209a4:	dc400115 	stw	r17,4(sp)
   209a8:	00206140 	call	20614 <__mulsi3>
   209ac:	8009883a 	mov	r4,r16
   209b0:	11401d04 	addi	r5,r2,116
   209b4:	1023883a 	mov	r17,r2
   209b8:	00211800 	call	21180 <_malloc_r>
   209bc:	1021883a 	mov	r16,r2
   209c0:	10000726 	beq	r2,zero,209e0 <__sfmoreglue+0x5c>
   209c4:	11000304 	addi	r4,r2,12
   209c8:	10000015 	stw	zero,0(r2)
   209cc:	14800115 	stw	r18,4(r2)
   209d0:	11000215 	stw	r4,8(r2)
   209d4:	89801a04 	addi	r6,r17,104
   209d8:	000b883a 	mov	r5,zero
   209dc:	0021c5c0 	call	21c5c <memset>
   209e0:	8005883a 	mov	r2,r16
   209e4:	dfc00317 	ldw	ra,12(sp)
   209e8:	dc800217 	ldw	r18,8(sp)
   209ec:	dc400117 	ldw	r17,4(sp)
   209f0:	dc000017 	ldw	r16,0(sp)
   209f4:	dec00404 	addi	sp,sp,16
   209f8:	f800283a 	ret

000209fc <__sfp>:
   209fc:	defffb04 	addi	sp,sp,-20
   20a00:	008000b4 	movhi	r2,2
   20a04:	dc000015 	stw	r16,0(sp)
   20a08:	141d6d17 	ldw	r16,30132(r2)
   20a0c:	dc400115 	stw	r17,4(sp)
   20a10:	dfc00415 	stw	ra,16(sp)
   20a14:	80800e17 	ldw	r2,56(r16)
   20a18:	dcc00315 	stw	r19,12(sp)
   20a1c:	dc800215 	stw	r18,8(sp)
   20a20:	2023883a 	mov	r17,r4
   20a24:	10003126 	beq	r2,zero,20aec <__sfp+0xf0>
   20a28:	8100ba17 	ldw	r4,744(r16)
   20a2c:	8140b917 	ldw	r5,740(r16)
   20a30:	04c00104 	movi	r19,4
   20a34:	8400b804 	addi	r16,r16,736
   20a38:	297fffc4 	addi	r5,r5,-1
   20a3c:	2800050e 	bge	r5,zero,20a54 <__sfp+0x58>
   20a40:	00002406 	br	20ad4 <__sfp+0xd8>
   20a44:	297fffc4 	addi	r5,r5,-1
   20a48:	28bfffd8 	cmpnei	r2,r5,-1
   20a4c:	21001a04 	addi	r4,r4,104
   20a50:	10002026 	beq	r2,zero,20ad4 <__sfp+0xd8>
   20a54:	2080030f 	ldh	r2,12(r4)
   20a58:	103ffa1e 	bne	r2,zero,20a44 <__sfp+0x48>
   20a5c:	00bffff4 	movhi	r2,65535
   20a60:	10800044 	addi	r2,r2,1
   20a64:	20001915 	stw	zero,100(r4)
   20a68:	20000015 	stw	zero,0(r4)
   20a6c:	20000115 	stw	zero,4(r4)
   20a70:	20000215 	stw	zero,8(r4)
   20a74:	20800315 	stw	r2,12(r4)
   20a78:	20000415 	stw	zero,16(r4)
   20a7c:	20000515 	stw	zero,20(r4)
   20a80:	20000615 	stw	zero,24(r4)
   20a84:	20001705 	stb	zero,92(r4)
   20a88:	20001745 	stb	zero,93(r4)
   20a8c:	20001785 	stb	zero,94(r4)
   20a90:	200017c5 	stb	zero,95(r4)
   20a94:	20001805 	stb	zero,96(r4)
   20a98:	20001845 	stb	zero,97(r4)
   20a9c:	20001885 	stb	zero,98(r4)
   20aa0:	200018c5 	stb	zero,99(r4)
   20aa4:	20000c15 	stw	zero,48(r4)
   20aa8:	20000d15 	stw	zero,52(r4)
   20aac:	20001115 	stw	zero,68(r4)
   20ab0:	20001215 	stw	zero,72(r4)
   20ab4:	2005883a 	mov	r2,r4
   20ab8:	dfc00417 	ldw	ra,16(sp)
   20abc:	dcc00317 	ldw	r19,12(sp)
   20ac0:	dc800217 	ldw	r18,8(sp)
   20ac4:	dc400117 	ldw	r17,4(sp)
   20ac8:	dc000017 	ldw	r16,0(sp)
   20acc:	dec00504 	addi	sp,sp,20
   20ad0:	f800283a 	ret
   20ad4:	80800017 	ldw	r2,0(r16)
   20ad8:	10000726 	beq	r2,zero,20af8 <__sfp+0xfc>
   20adc:	11000217 	ldw	r4,8(r2)
   20ae0:	11400117 	ldw	r5,4(r2)
   20ae4:	1021883a 	mov	r16,r2
   20ae8:	003fd306 	br	20a38 <__sfp+0x3c>
   20aec:	8009883a 	mov	r4,r16
   20af0:	002081c0 	call	2081c <__sinit.part.0>
   20af4:	003fcc06 	br	20a28 <__sfp+0x2c>
   20af8:	01406b04 	movi	r5,428
   20afc:	8809883a 	mov	r4,r17
   20b00:	00211800 	call	21180 <_malloc_r>
   20b04:	1025883a 	mov	r18,r2
   20b08:	10000c26 	beq	r2,zero,20b3c <__sfp+0x140>
   20b0c:	11000304 	addi	r4,r2,12
   20b10:	11000215 	stw	r4,8(r2)
   20b14:	000b883a 	mov	r5,zero
   20b18:	10000015 	stw	zero,0(r2)
   20b1c:	14c00115 	stw	r19,4(r2)
   20b20:	01806804 	movi	r6,416
   20b24:	0021c5c0 	call	21c5c <memset>
   20b28:	1009883a 	mov	r4,r2
   20b2c:	84800015 	stw	r18,0(r16)
   20b30:	014000c4 	movi	r5,3
   20b34:	9021883a 	mov	r16,r18
   20b38:	003fc606 	br	20a54 <__sfp+0x58>
   20b3c:	80000015 	stw	zero,0(r16)
   20b40:	00800304 	movi	r2,12
   20b44:	88800015 	stw	r2,0(r17)
   20b48:	0009883a 	mov	r4,zero
   20b4c:	003fd906 	br	20ab4 <__sfp+0xb8>

00020b50 <_cleanup>:
   20b50:	008000b4 	movhi	r2,2
   20b54:	111d6d17 	ldw	r4,30132(r2)
   20b58:	014000b4 	movhi	r5,2
   20b5c:	2949c004 	addi	r5,r5,9984
   20b60:	00210d81 	jmpi	210d8 <_fwalk_reent>

00020b64 <__sinit>:
   20b64:	20800e17 	ldw	r2,56(r4)
   20b68:	10000126 	beq	r2,zero,20b70 <__sinit+0xc>
   20b6c:	f800283a 	ret
   20b70:	002081c1 	jmpi	2081c <__sinit.part.0>

00020b74 <__sfp_lock_acquire>:
   20b74:	f800283a 	ret

00020b78 <__sfp_lock_release>:
   20b78:	f800283a 	ret

00020b7c <__sinit_lock_acquire>:
   20b7c:	f800283a 	ret

00020b80 <__sinit_lock_release>:
   20b80:	f800283a 	ret

00020b84 <__fp_lock_all>:
   20b84:	008000b4 	movhi	r2,2
   20b88:	111d6e17 	ldw	r4,30136(r2)
   20b8c:	014000b4 	movhi	r5,2
   20b90:	29420004 	addi	r5,r5,2048
   20b94:	00210401 	jmpi	21040 <_fwalk>

00020b98 <__fp_unlock_all>:
   20b98:	008000b4 	movhi	r2,2
   20b9c:	111d6e17 	ldw	r4,30136(r2)
   20ba0:	014000b4 	movhi	r5,2
   20ba4:	29420504 	addi	r5,r5,2068
   20ba8:	00210401 	jmpi	21040 <_fwalk>

00020bac <__sfvwrite_r>:
   20bac:	30800217 	ldw	r2,8(r6)
   20bb0:	10009b26 	beq	r2,zero,20e20 <__sfvwrite_r+0x274>
   20bb4:	2a00030b 	ldhu	r8,12(r5)
   20bb8:	defff404 	addi	sp,sp,-48
   20bbc:	dd400715 	stw	r21,28(sp)
   20bc0:	dd000615 	stw	r20,24(sp)
   20bc4:	dc000215 	stw	r16,8(sp)
   20bc8:	dfc00b15 	stw	ra,44(sp)
   20bcc:	df000a15 	stw	fp,40(sp)
   20bd0:	ddc00915 	stw	r23,36(sp)
   20bd4:	dd800815 	stw	r22,32(sp)
   20bd8:	dcc00515 	stw	r19,20(sp)
   20bdc:	dc800415 	stw	r18,16(sp)
   20be0:	dc400315 	stw	r17,12(sp)
   20be4:	4080020c 	andi	r2,r8,8
   20be8:	3029883a 	mov	r20,r6
   20bec:	202b883a 	mov	r21,r4
   20bf0:	2821883a 	mov	r16,r5
   20bf4:	10002626 	beq	r2,zero,20c90 <__sfvwrite_r+0xe4>
   20bf8:	28800417 	ldw	r2,16(r5)
   20bfc:	10002426 	beq	r2,zero,20c90 <__sfvwrite_r+0xe4>
   20c00:	4080008c 	andi	r2,r8,2
   20c04:	a4400017 	ldw	r17,0(r20)
   20c08:	10002926 	beq	r2,zero,20cb0 <__sfvwrite_r+0x104>
   20c0c:	05a00034 	movhi	r22,32768
   20c10:	0027883a 	mov	r19,zero
   20c14:	0025883a 	mov	r18,zero
   20c18:	b5bf0004 	addi	r22,r22,-1024
   20c1c:	980d883a 	mov	r6,r19
   20c20:	a809883a 	mov	r4,r21
   20c24:	90007126 	beq	r18,zero,20dec <__sfvwrite_r+0x240>
   20c28:	900f883a 	mov	r7,r18
   20c2c:	b480012e 	bgeu	r22,r18,20c34 <__sfvwrite_r+0x88>
   20c30:	b00f883a 	mov	r7,r22
   20c34:	80800917 	ldw	r2,36(r16)
   20c38:	81400717 	ldw	r5,28(r16)
   20c3c:	103ee83a 	callr	r2
   20c40:	0080720e 	bge	zero,r2,20e0c <__sfvwrite_r+0x260>
   20c44:	a0c00217 	ldw	r3,8(r20)
   20c48:	98a7883a 	add	r19,r19,r2
   20c4c:	90a5c83a 	sub	r18,r18,r2
   20c50:	1885c83a 	sub	r2,r3,r2
   20c54:	a0800215 	stw	r2,8(r20)
   20c58:	103ff01e 	bne	r2,zero,20c1c <__sfvwrite_r+0x70>
   20c5c:	0005883a 	mov	r2,zero
   20c60:	dfc00b17 	ldw	ra,44(sp)
   20c64:	df000a17 	ldw	fp,40(sp)
   20c68:	ddc00917 	ldw	r23,36(sp)
   20c6c:	dd800817 	ldw	r22,32(sp)
   20c70:	dd400717 	ldw	r21,28(sp)
   20c74:	dd000617 	ldw	r20,24(sp)
   20c78:	dcc00517 	ldw	r19,20(sp)
   20c7c:	dc800417 	ldw	r18,16(sp)
   20c80:	dc400317 	ldw	r17,12(sp)
   20c84:	dc000217 	ldw	r16,8(sp)
   20c88:	dec00c04 	addi	sp,sp,48
   20c8c:	f800283a 	ret
   20c90:	800b883a 	mov	r5,r16
   20c94:	a809883a 	mov	r4,r21
   20c98:	00224840 	call	22484 <__swsetup_r>
   20c9c:	1000e61e 	bne	r2,zero,21038 <__sfvwrite_r+0x48c>
   20ca0:	8200030b 	ldhu	r8,12(r16)
   20ca4:	a4400017 	ldw	r17,0(r20)
   20ca8:	4080008c 	andi	r2,r8,2
   20cac:	103fd71e 	bne	r2,zero,20c0c <__sfvwrite_r+0x60>
   20cb0:	4080004c 	andi	r2,r8,1
   20cb4:	10005c1e 	bne	r2,zero,20e28 <__sfvwrite_r+0x27c>
   20cb8:	00a00034 	movhi	r2,32768
   20cbc:	10bfff84 	addi	r2,r2,-2
   20cc0:	00e00034 	movhi	r3,32768
   20cc4:	d8800015 	stw	r2,0(sp)
   20cc8:	18bfffc4 	addi	r2,r3,-1
   20ccc:	0039883a 	mov	fp,zero
   20cd0:	0025883a 	mov	r18,zero
   20cd4:	d8800115 	stw	r2,4(sp)
   20cd8:	90004026 	beq	r18,zero,20ddc <__sfvwrite_r+0x230>
   20cdc:	4080800c 	andi	r2,r8,512
   20ce0:	81000017 	ldw	r4,0(r16)
   20ce4:	85c00217 	ldw	r23,8(r16)
   20ce8:	10008826 	beq	r2,zero,20f0c <__sfvwrite_r+0x360>
   20cec:	b82d883a 	mov	r22,r23
   20cf0:	95c0ae36 	bltu	r18,r23,20fac <__sfvwrite_r+0x400>
   20cf4:	4081200c 	andi	r2,r8,1152
   20cf8:	10002626 	beq	r2,zero,20d94 <__sfvwrite_r+0x1e8>
   20cfc:	81800517 	ldw	r6,20(r16)
   20d00:	81400417 	ldw	r5,16(r16)
   20d04:	3185883a 	add	r2,r6,r6
   20d08:	1185883a 	add	r2,r2,r6
   20d0c:	1026d7fa 	srli	r19,r2,31
   20d10:	216dc83a 	sub	r22,r4,r5
   20d14:	b1000044 	addi	r4,r22,1
   20d18:	98a7883a 	add	r19,r19,r2
   20d1c:	9827d07a 	srai	r19,r19,1
   20d20:	2485883a 	add	r2,r4,r18
   20d24:	980d883a 	mov	r6,r19
   20d28:	9880022e 	bgeu	r19,r2,20d34 <__sfvwrite_r+0x188>
   20d2c:	1027883a 	mov	r19,r2
   20d30:	100d883a 	mov	r6,r2
   20d34:	4201000c 	andi	r8,r8,1024
   20d38:	4000af26 	beq	r8,zero,20ff8 <__sfvwrite_r+0x44c>
   20d3c:	300b883a 	mov	r5,r6
   20d40:	a809883a 	mov	r4,r21
   20d44:	00211800 	call	21180 <_malloc_r>
   20d48:	1000b726 	beq	r2,zero,21028 <__sfvwrite_r+0x47c>
   20d4c:	81400417 	ldw	r5,16(r16)
   20d50:	b00d883a 	mov	r6,r22
   20d54:	1009883a 	mov	r4,r2
   20d58:	0021a300 	call	21a30 <memcpy>
   20d5c:	100f883a 	mov	r7,r2
   20d60:	8080030b 	ldhu	r2,12(r16)
   20d64:	00fedfc4 	movi	r3,-1153
   20d68:	10c4703a 	and	r2,r2,r3
   20d6c:	10802014 	ori	r2,r2,128
   20d70:	8080030d 	sth	r2,12(r16)
   20d74:	3d89883a 	add	r4,r7,r22
   20d78:	9d85c83a 	sub	r2,r19,r22
   20d7c:	81c00415 	stw	r7,16(r16)
   20d80:	81000015 	stw	r4,0(r16)
   20d84:	84c00515 	stw	r19,20(r16)
   20d88:	902f883a 	mov	r23,r18
   20d8c:	80800215 	stw	r2,8(r16)
   20d90:	902d883a 	mov	r22,r18
   20d94:	b00d883a 	mov	r6,r22
   20d98:	e00b883a 	mov	r5,fp
   20d9c:	0021b300 	call	21b30 <memmove>
   20da0:	81000217 	ldw	r4,8(r16)
   20da4:	80800017 	ldw	r2,0(r16)
   20da8:	9027883a 	mov	r19,r18
   20dac:	25c9c83a 	sub	r4,r4,r23
   20db0:	1585883a 	add	r2,r2,r22
   20db4:	81000215 	stw	r4,8(r16)
   20db8:	80800015 	stw	r2,0(r16)
   20dbc:	0025883a 	mov	r18,zero
   20dc0:	a1800217 	ldw	r6,8(r20)
   20dc4:	e4f9883a 	add	fp,fp,r19
   20dc8:	34e7c83a 	sub	r19,r6,r19
   20dcc:	a4c00215 	stw	r19,8(r20)
   20dd0:	983fa226 	beq	r19,zero,20c5c <__sfvwrite_r+0xb0>
   20dd4:	8200030b 	ldhu	r8,12(r16)
   20dd8:	903fc01e 	bne	r18,zero,20cdc <__sfvwrite_r+0x130>
   20ddc:	8f000017 	ldw	fp,0(r17)
   20de0:	8c800117 	ldw	r18,4(r17)
   20de4:	8c400204 	addi	r17,r17,8
   20de8:	003fbb06 	br	20cd8 <__sfvwrite_r+0x12c>
   20dec:	8cc00017 	ldw	r19,0(r17)
   20df0:	8c800117 	ldw	r18,4(r17)
   20df4:	8c400204 	addi	r17,r17,8
   20df8:	003f8806 	br	20c1c <__sfvwrite_r+0x70>
   20dfc:	800b883a 	mov	r5,r16
   20e00:	a809883a 	mov	r4,r21
   20e04:	0022a080 	call	22a08 <_fflush_r>
   20e08:	10002226 	beq	r2,zero,20e94 <__sfvwrite_r+0x2e8>
   20e0c:	8080030b 	ldhu	r2,12(r16)
   20e10:	10801014 	ori	r2,r2,64
   20e14:	8080030d 	sth	r2,12(r16)
   20e18:	00bfffc4 	movi	r2,-1
   20e1c:	003f9006 	br	20c60 <__sfvwrite_r+0xb4>
   20e20:	0005883a 	mov	r2,zero
   20e24:	f800283a 	ret
   20e28:	002d883a 	mov	r22,zero
   20e2c:	0039883a 	mov	fp,zero
   20e30:	0005883a 	mov	r2,zero
   20e34:	002f883a 	mov	r23,zero
   20e38:	b0001d26 	beq	r22,zero,20eb0 <__sfvwrite_r+0x304>
   20e3c:	10002026 	beq	r2,zero,20ec0 <__sfvwrite_r+0x314>
   20e40:	e027883a 	mov	r19,fp
   20e44:	b4c0012e 	bgeu	r22,r19,20e4c <__sfvwrite_r+0x2a0>
   20e48:	b027883a 	mov	r19,r22
   20e4c:	81000017 	ldw	r4,0(r16)
   20e50:	80800417 	ldw	r2,16(r16)
   20e54:	81c00517 	ldw	r7,20(r16)
   20e58:	1100032e 	bgeu	r2,r4,20e68 <__sfvwrite_r+0x2bc>
   20e5c:	84800217 	ldw	r18,8(r16)
   20e60:	3ca5883a 	add	r18,r7,r18
   20e64:	94c01e16 	blt	r18,r19,20ee0 <__sfvwrite_r+0x334>
   20e68:	99c05316 	blt	r19,r7,20fb8 <__sfvwrite_r+0x40c>
   20e6c:	80800917 	ldw	r2,36(r16)
   20e70:	81400717 	ldw	r5,28(r16)
   20e74:	b80d883a 	mov	r6,r23
   20e78:	a809883a 	mov	r4,r21
   20e7c:	103ee83a 	callr	r2
   20e80:	1025883a 	mov	r18,r2
   20e84:	00bfe10e 	bge	zero,r2,20e0c <__sfvwrite_r+0x260>
   20e88:	e4b9c83a 	sub	fp,fp,r18
   20e8c:	e03fdb26 	beq	fp,zero,20dfc <__sfvwrite_r+0x250>
   20e90:	00800044 	movi	r2,1
   20e94:	a1800217 	ldw	r6,8(r20)
   20e98:	bcaf883a 	add	r23,r23,r18
   20e9c:	b4adc83a 	sub	r22,r22,r18
   20ea0:	34a5c83a 	sub	r18,r6,r18
   20ea4:	a4800215 	stw	r18,8(r20)
   20ea8:	903f6c26 	beq	r18,zero,20c5c <__sfvwrite_r+0xb0>
   20eac:	b03fe31e 	bne	r22,zero,20e3c <__sfvwrite_r+0x290>
   20eb0:	8d800117 	ldw	r22,4(r17)
   20eb4:	8dc00017 	ldw	r23,0(r17)
   20eb8:	8c400204 	addi	r17,r17,8
   20ebc:	b03ffc26 	beq	r22,zero,20eb0 <__sfvwrite_r+0x304>
   20ec0:	b00d883a 	mov	r6,r22
   20ec4:	01400284 	movi	r5,10
   20ec8:	b809883a 	mov	r4,r23
   20ecc:	00219600 	call	21960 <memchr>
   20ed0:	10004626 	beq	r2,zero,20fec <__sfvwrite_r+0x440>
   20ed4:	10800044 	addi	r2,r2,1
   20ed8:	15f9c83a 	sub	fp,r2,r23
   20edc:	003fd806 	br	20e40 <__sfvwrite_r+0x294>
   20ee0:	b80b883a 	mov	r5,r23
   20ee4:	900d883a 	mov	r6,r18
   20ee8:	0021b300 	call	21b30 <memmove>
   20eec:	80800017 	ldw	r2,0(r16)
   20ef0:	800b883a 	mov	r5,r16
   20ef4:	a809883a 	mov	r4,r21
   20ef8:	1485883a 	add	r2,r2,r18
   20efc:	80800015 	stw	r2,0(r16)
   20f00:	0022a080 	call	22a08 <_fflush_r>
   20f04:	103fe026 	beq	r2,zero,20e88 <__sfvwrite_r+0x2dc>
   20f08:	003fc006 	br	20e0c <__sfvwrite_r+0x260>
   20f0c:	80800417 	ldw	r2,16(r16)
   20f10:	11001436 	bltu	r2,r4,20f64 <__sfvwrite_r+0x3b8>
   20f14:	84c00517 	ldw	r19,20(r16)
   20f18:	94c01236 	bltu	r18,r19,20f64 <__sfvwrite_r+0x3b8>
   20f1c:	d8800017 	ldw	r2,0(sp)
   20f20:	1480302e 	bgeu	r2,r18,20fe4 <__sfvwrite_r+0x438>
   20f24:	d9000117 	ldw	r4,4(sp)
   20f28:	980b883a 	mov	r5,r19
   20f2c:	00232cc0 	call	232cc <__divsi3>
   20f30:	980b883a 	mov	r5,r19
   20f34:	1009883a 	mov	r4,r2
   20f38:	00206140 	call	20614 <__mulsi3>
   20f3c:	82000917 	ldw	r8,36(r16)
   20f40:	81400717 	ldw	r5,28(r16)
   20f44:	100f883a 	mov	r7,r2
   20f48:	e00d883a 	mov	r6,fp
   20f4c:	a809883a 	mov	r4,r21
   20f50:	403ee83a 	callr	r8
   20f54:	1027883a 	mov	r19,r2
   20f58:	00bfac0e 	bge	zero,r2,20e0c <__sfvwrite_r+0x260>
   20f5c:	94e5c83a 	sub	r18,r18,r19
   20f60:	003f9706 	br	20dc0 <__sfvwrite_r+0x214>
   20f64:	b827883a 	mov	r19,r23
   20f68:	95c0012e 	bgeu	r18,r23,20f70 <__sfvwrite_r+0x3c4>
   20f6c:	9027883a 	mov	r19,r18
   20f70:	980d883a 	mov	r6,r19
   20f74:	e00b883a 	mov	r5,fp
   20f78:	0021b300 	call	21b30 <memmove>
   20f7c:	80800217 	ldw	r2,8(r16)
   20f80:	81000017 	ldw	r4,0(r16)
   20f84:	14c5c83a 	sub	r2,r2,r19
   20f88:	24c9883a 	add	r4,r4,r19
   20f8c:	80800215 	stw	r2,8(r16)
   20f90:	81000015 	stw	r4,0(r16)
   20f94:	103ff11e 	bne	r2,zero,20f5c <__sfvwrite_r+0x3b0>
   20f98:	800b883a 	mov	r5,r16
   20f9c:	a809883a 	mov	r4,r21
   20fa0:	0022a080 	call	22a08 <_fflush_r>
   20fa4:	103fed26 	beq	r2,zero,20f5c <__sfvwrite_r+0x3b0>
   20fa8:	003f9806 	br	20e0c <__sfvwrite_r+0x260>
   20fac:	902f883a 	mov	r23,r18
   20fb0:	902d883a 	mov	r22,r18
   20fb4:	003f7706 	br	20d94 <__sfvwrite_r+0x1e8>
   20fb8:	980d883a 	mov	r6,r19
   20fbc:	b80b883a 	mov	r5,r23
   20fc0:	0021b300 	call	21b30 <memmove>
   20fc4:	80c00217 	ldw	r3,8(r16)
   20fc8:	80800017 	ldw	r2,0(r16)
   20fcc:	9825883a 	mov	r18,r19
   20fd0:	1cc7c83a 	sub	r3,r3,r19
   20fd4:	14c5883a 	add	r2,r2,r19
   20fd8:	80c00215 	stw	r3,8(r16)
   20fdc:	80800015 	stw	r2,0(r16)
   20fe0:	003fa906 	br	20e88 <__sfvwrite_r+0x2dc>
   20fe4:	9009883a 	mov	r4,r18
   20fe8:	003fcf06 	br	20f28 <__sfvwrite_r+0x37c>
   20fec:	b4c00044 	addi	r19,r22,1
   20ff0:	9839883a 	mov	fp,r19
   20ff4:	003f9306 	br	20e44 <__sfvwrite_r+0x298>
   20ff8:	a809883a 	mov	r4,r21
   20ffc:	0021d4c0 	call	21d4c <_realloc_r>
   21000:	100f883a 	mov	r7,r2
   21004:	103f5b1e 	bne	r2,zero,20d74 <__sfvwrite_r+0x1c8>
   21008:	81400417 	ldw	r5,16(r16)
   2100c:	a809883a 	mov	r4,r21
   21010:	0022c080 	call	22c08 <_free_r>
   21014:	8080030b 	ldhu	r2,12(r16)
   21018:	00c00304 	movi	r3,12
   2101c:	a8c00015 	stw	r3,0(r21)
   21020:	10bfdfcc 	andi	r2,r2,65407
   21024:	003f7a06 	br	20e10 <__sfvwrite_r+0x264>
   21028:	00c00304 	movi	r3,12
   2102c:	8080030b 	ldhu	r2,12(r16)
   21030:	a8c00015 	stw	r3,0(r21)
   21034:	003f7606 	br	20e10 <__sfvwrite_r+0x264>
   21038:	00bfffc4 	movi	r2,-1
   2103c:	003f0806 	br	20c60 <__sfvwrite_r+0xb4>

00021040 <_fwalk>:
   21040:	defffa04 	addi	sp,sp,-24
   21044:	dd000415 	stw	r20,16(sp)
   21048:	dcc00315 	stw	r19,12(sp)
   2104c:	dc800215 	stw	r18,8(sp)
   21050:	dfc00515 	stw	ra,20(sp)
   21054:	dc400115 	stw	r17,4(sp)
   21058:	dc000015 	stw	r16,0(sp)
   2105c:	2827883a 	mov	r19,r5
   21060:	2480b804 	addi	r18,r4,736
   21064:	0029883a 	mov	r20,zero
   21068:	94400117 	ldw	r17,4(r18)
   2106c:	94000217 	ldw	r16,8(r18)
   21070:	8c7fffc4 	addi	r17,r17,-1
   21074:	88000d16 	blt	r17,zero,210ac <_fwalk+0x6c>
   21078:	8080030b 	ldhu	r2,12(r16)
   2107c:	8c7fffc4 	addi	r17,r17,-1
   21080:	108000b0 	cmpltui	r2,r2,2
   21084:	1000061e 	bne	r2,zero,210a0 <_fwalk+0x60>
   21088:	8080038f 	ldh	r2,14(r16)
   2108c:	8009883a 	mov	r4,r16
   21090:	10bfffe0 	cmpeqi	r2,r2,-1
   21094:	1000021e 	bne	r2,zero,210a0 <_fwalk+0x60>
   21098:	983ee83a 	callr	r19
   2109c:	a0a8b03a 	or	r20,r20,r2
   210a0:	88bfffd8 	cmpnei	r2,r17,-1
   210a4:	84001a04 	addi	r16,r16,104
   210a8:	103ff31e 	bne	r2,zero,21078 <_fwalk+0x38>
   210ac:	94800017 	ldw	r18,0(r18)
   210b0:	903fed1e 	bne	r18,zero,21068 <_fwalk+0x28>
   210b4:	a005883a 	mov	r2,r20
   210b8:	dfc00517 	ldw	ra,20(sp)
   210bc:	dd000417 	ldw	r20,16(sp)
   210c0:	dcc00317 	ldw	r19,12(sp)
   210c4:	dc800217 	ldw	r18,8(sp)
   210c8:	dc400117 	ldw	r17,4(sp)
   210cc:	dc000017 	ldw	r16,0(sp)
   210d0:	dec00604 	addi	sp,sp,24
   210d4:	f800283a 	ret

000210d8 <_fwalk_reent>:
   210d8:	defff904 	addi	sp,sp,-28
   210dc:	dd400515 	stw	r21,20(sp)
   210e0:	dd000415 	stw	r20,16(sp)
   210e4:	dcc00315 	stw	r19,12(sp)
   210e8:	dc800215 	stw	r18,8(sp)
   210ec:	dfc00615 	stw	ra,24(sp)
   210f0:	dc400115 	stw	r17,4(sp)
   210f4:	dc000015 	stw	r16,0(sp)
   210f8:	202b883a 	mov	r21,r4
   210fc:	2827883a 	mov	r19,r5
   21100:	2480b804 	addi	r18,r4,736
   21104:	0029883a 	mov	r20,zero
   21108:	94400117 	ldw	r17,4(r18)
   2110c:	94000217 	ldw	r16,8(r18)
   21110:	8c7fffc4 	addi	r17,r17,-1
   21114:	88000e16 	blt	r17,zero,21150 <_fwalk_reent+0x78>
   21118:	8080030b 	ldhu	r2,12(r16)
   2111c:	8c7fffc4 	addi	r17,r17,-1
   21120:	108000b0 	cmpltui	r2,r2,2
   21124:	1000071e 	bne	r2,zero,21144 <_fwalk_reent+0x6c>
   21128:	8080038f 	ldh	r2,14(r16)
   2112c:	800b883a 	mov	r5,r16
   21130:	a809883a 	mov	r4,r21
   21134:	10bfffe0 	cmpeqi	r2,r2,-1
   21138:	1000021e 	bne	r2,zero,21144 <_fwalk_reent+0x6c>
   2113c:	983ee83a 	callr	r19
   21140:	a0a8b03a 	or	r20,r20,r2
   21144:	88bfffd8 	cmpnei	r2,r17,-1
   21148:	84001a04 	addi	r16,r16,104
   2114c:	103ff21e 	bne	r2,zero,21118 <_fwalk_reent+0x40>
   21150:	94800017 	ldw	r18,0(r18)
   21154:	903fec1e 	bne	r18,zero,21108 <_fwalk_reent+0x30>
   21158:	a005883a 	mov	r2,r20
   2115c:	dfc00617 	ldw	ra,24(sp)
   21160:	dd400517 	ldw	r21,20(sp)
   21164:	dd000417 	ldw	r20,16(sp)
   21168:	dcc00317 	ldw	r19,12(sp)
   2116c:	dc800217 	ldw	r18,8(sp)
   21170:	dc400117 	ldw	r17,4(sp)
   21174:	dc000017 	ldw	r16,0(sp)
   21178:	dec00704 	addi	sp,sp,28
   2117c:	f800283a 	ret

00021180 <_malloc_r>:
   21180:	defff604 	addi	sp,sp,-40
   21184:	dc400115 	stw	r17,4(sp)
   21188:	2c4002c4 	addi	r17,r5,11
   2118c:	dc800215 	stw	r18,8(sp)
   21190:	dfc00915 	stw	ra,36(sp)
   21194:	df000815 	stw	fp,32(sp)
   21198:	ddc00715 	stw	r23,28(sp)
   2119c:	dd800615 	stw	r22,24(sp)
   211a0:	dd400515 	stw	r21,20(sp)
   211a4:	dd000415 	stw	r20,16(sp)
   211a8:	dcc00315 	stw	r19,12(sp)
   211ac:	dc000015 	stw	r16,0(sp)
   211b0:	888005e8 	cmpgeui	r2,r17,23
   211b4:	2025883a 	mov	r18,r4
   211b8:	10001b1e 	bne	r2,zero,21228 <_malloc_r+0xa8>
   211bc:	29400468 	cmpgeui	r5,r5,17
   211c0:	2800821e 	bne	r5,zero,213cc <_malloc_r+0x24c>
   211c4:	0023a2c0 	call	23a2c <__malloc_lock>
   211c8:	04400404 	movi	r17,16
   211cc:	00800604 	movi	r2,24
   211d0:	01c00084 	movi	r7,2
   211d4:	04c000b4 	movhi	r19,2
   211d8:	9cd7e904 	addi	r19,r19,24484
   211dc:	9885883a 	add	r2,r19,r2
   211e0:	14000117 	ldw	r16,4(r2)
   211e4:	10fffe04 	addi	r3,r2,-8
   211e8:	80c08b26 	beq	r16,r3,21418 <_malloc_r+0x298>
   211ec:	80800117 	ldw	r2,4(r16)
   211f0:	81000317 	ldw	r4,12(r16)
   211f4:	00ffff04 	movi	r3,-4
   211f8:	10c4703a 	and	r2,r2,r3
   211fc:	81400217 	ldw	r5,8(r16)
   21200:	8085883a 	add	r2,r16,r2
   21204:	10c00117 	ldw	r3,4(r2)
   21208:	29000315 	stw	r4,12(r5)
   2120c:	21400215 	stw	r5,8(r4)
   21210:	18c00054 	ori	r3,r3,1
   21214:	10c00115 	stw	r3,4(r2)
   21218:	9009883a 	mov	r4,r18
   2121c:	0023a500 	call	23a50 <__malloc_unlock>
   21220:	80800204 	addi	r2,r16,8
   21224:	00006c06 	br	213d8 <_malloc_r+0x258>
   21228:	00bffe04 	movi	r2,-8
   2122c:	88a2703a 	and	r17,r17,r2
   21230:	88006616 	blt	r17,zero,213cc <_malloc_r+0x24c>
   21234:	89406536 	bltu	r17,r5,213cc <_malloc_r+0x24c>
   21238:	0023a2c0 	call	23a2c <__malloc_lock>
   2123c:	88807e28 	cmpgeui	r2,r17,504
   21240:	10012226 	beq	r2,zero,216cc <_malloc_r+0x54c>
   21244:	8804d27a 	srli	r2,r17,9
   21248:	10006f26 	beq	r2,zero,21408 <_malloc_r+0x288>
   2124c:	10c00168 	cmpgeui	r3,r2,5
   21250:	1800fe1e 	bne	r3,zero,2164c <_malloc_r+0x4cc>
   21254:	8804d1ba 	srli	r2,r17,6
   21258:	11c00e44 	addi	r7,r2,57
   2125c:	380890fa 	slli	r4,r7,3
   21260:	12000e04 	addi	r8,r2,56
   21264:	04c000b4 	movhi	r19,2
   21268:	9cd7e904 	addi	r19,r19,24484
   2126c:	9909883a 	add	r4,r19,r4
   21270:	24000117 	ldw	r16,4(r4)
   21274:	213ffe04 	addi	r4,r4,-8
   21278:	24000b26 	beq	r4,r16,212a8 <_malloc_r+0x128>
   2127c:	01bfff04 	movi	r6,-4
   21280:	00000306 	br	21290 <_malloc_r+0x110>
   21284:	1800d60e 	bge	r3,zero,215e0 <_malloc_r+0x460>
   21288:	84000317 	ldw	r16,12(r16)
   2128c:	24000626 	beq	r4,r16,212a8 <_malloc_r+0x128>
   21290:	80800117 	ldw	r2,4(r16)
   21294:	1184703a 	and	r2,r2,r6
   21298:	1447c83a 	sub	r3,r2,r17
   2129c:	19400408 	cmpgei	r5,r3,16
   212a0:	283ff826 	beq	r5,zero,21284 <_malloc_r+0x104>
   212a4:	400f883a 	mov	r7,r8
   212a8:	9c000417 	ldw	r16,16(r19)
   212ac:	024000b4 	movhi	r9,2
   212b0:	4a57eb04 	addi	r9,r9,24492
   212b4:	82405f26 	beq	r16,r9,21434 <_malloc_r+0x2b4>
   212b8:	80c00117 	ldw	r3,4(r16)
   212bc:	00bfff04 	movi	r2,-4
   212c0:	1884703a 	and	r2,r3,r2
   212c4:	1447c83a 	sub	r3,r2,r17
   212c8:	19000410 	cmplti	r4,r3,16
   212cc:	20010a26 	beq	r4,zero,216f8 <_malloc_r+0x578>
   212d0:	9a400515 	stw	r9,20(r19)
   212d4:	9a400415 	stw	r9,16(r19)
   212d8:	1800ff0e 	bge	r3,zero,216d8 <_malloc_r+0x558>
   212dc:	10c08028 	cmpgeui	r3,r2,512
   212e0:	1800c11e 	bne	r3,zero,215e8 <_malloc_r+0x468>
   212e4:	1006d0fa 	srli	r3,r2,3
   212e8:	1008d17a 	srli	r4,r2,5
   212ec:	00800044 	movi	r2,1
   212f0:	18c00044 	addi	r3,r3,1
   212f4:	180690fa 	slli	r3,r3,3
   212f8:	99400117 	ldw	r5,4(r19)
   212fc:	1104983a 	sll	r2,r2,r4
   21300:	98c7883a 	add	r3,r19,r3
   21304:	19000017 	ldw	r4,0(r3)
   21308:	1144b03a 	or	r2,r2,r5
   2130c:	197ffe04 	addi	r5,r3,-8
   21310:	81400315 	stw	r5,12(r16)
   21314:	81000215 	stw	r4,8(r16)
   21318:	98800115 	stw	r2,4(r19)
   2131c:	1c000015 	stw	r16,0(r3)
   21320:	24000315 	stw	r16,12(r4)
   21324:	3807d0ba 	srai	r3,r7,2
   21328:	01000044 	movi	r4,1
   2132c:	20c8983a 	sll	r4,r4,r3
   21330:	11004536 	bltu	r2,r4,21448 <_malloc_r+0x2c8>
   21334:	2086703a 	and	r3,r4,r2
   21338:	18000a1e 	bne	r3,zero,21364 <_malloc_r+0x1e4>
   2133c:	00ffff04 	movi	r3,-4
   21340:	2109883a 	add	r4,r4,r4
   21344:	38ce703a 	and	r7,r7,r3
   21348:	2086703a 	and	r3,r4,r2
   2134c:	39c00104 	addi	r7,r7,4
   21350:	1800041e 	bne	r3,zero,21364 <_malloc_r+0x1e4>
   21354:	2109883a 	add	r4,r4,r4
   21358:	2086703a 	and	r3,r4,r2
   2135c:	39c00104 	addi	r7,r7,4
   21360:	183ffc26 	beq	r3,zero,21354 <_malloc_r+0x1d4>
   21364:	02bfff04 	movi	r10,-4
   21368:	381690fa 	slli	r11,r7,3
   2136c:	3819883a 	mov	r12,r7
   21370:	9ad7883a 	add	r11,r19,r11
   21374:	5811883a 	mov	r8,r11
   21378:	40800317 	ldw	r2,12(r8)
   2137c:	4080bc26 	beq	r8,r2,21670 <_malloc_r+0x4f0>
   21380:	10c00117 	ldw	r3,4(r2)
   21384:	1021883a 	mov	r16,r2
   21388:	10800317 	ldw	r2,12(r2)
   2138c:	1a86703a 	and	r3,r3,r10
   21390:	1c4bc83a 	sub	r5,r3,r17
   21394:	29800410 	cmplti	r6,r5,16
   21398:	3000ba26 	beq	r6,zero,21684 <_malloc_r+0x504>
   2139c:	283ff716 	blt	r5,zero,2137c <_malloc_r+0x1fc>
   213a0:	80c7883a 	add	r3,r16,r3
   213a4:	19400117 	ldw	r5,4(r3)
   213a8:	81800217 	ldw	r6,8(r16)
   213ac:	9009883a 	mov	r4,r18
   213b0:	29400054 	ori	r5,r5,1
   213b4:	19400115 	stw	r5,4(r3)
   213b8:	30800315 	stw	r2,12(r6)
   213bc:	11800215 	stw	r6,8(r2)
   213c0:	0023a500 	call	23a50 <__malloc_unlock>
   213c4:	80800204 	addi	r2,r16,8
   213c8:	00000306 	br	213d8 <_malloc_r+0x258>
   213cc:	00800304 	movi	r2,12
   213d0:	90800015 	stw	r2,0(r18)
   213d4:	0005883a 	mov	r2,zero
   213d8:	dfc00917 	ldw	ra,36(sp)
   213dc:	df000817 	ldw	fp,32(sp)
   213e0:	ddc00717 	ldw	r23,28(sp)
   213e4:	dd800617 	ldw	r22,24(sp)
   213e8:	dd400517 	ldw	r21,20(sp)
   213ec:	dd000417 	ldw	r20,16(sp)
   213f0:	dcc00317 	ldw	r19,12(sp)
   213f4:	dc800217 	ldw	r18,8(sp)
   213f8:	dc400117 	ldw	r17,4(sp)
   213fc:	dc000017 	ldw	r16,0(sp)
   21400:	dec00a04 	addi	sp,sp,40
   21404:	f800283a 	ret
   21408:	01008004 	movi	r4,512
   2140c:	01c01004 	movi	r7,64
   21410:	02000fc4 	movi	r8,63
   21414:	003f9306 	br	21264 <_malloc_r+0xe4>
   21418:	14000317 	ldw	r16,12(r2)
   2141c:	39c00084 	addi	r7,r7,2
   21420:	143f721e 	bne	r2,r16,211ec <_malloc_r+0x6c>
   21424:	9c000417 	ldw	r16,16(r19)
   21428:	024000b4 	movhi	r9,2
   2142c:	4a57eb04 	addi	r9,r9,24492
   21430:	827fa11e 	bne	r16,r9,212b8 <_malloc_r+0x138>
   21434:	3807d0ba 	srai	r3,r7,2
   21438:	01000044 	movi	r4,1
   2143c:	98800117 	ldw	r2,4(r19)
   21440:	20c8983a 	sll	r4,r4,r3
   21444:	113fbb2e 	bgeu	r2,r4,21334 <_malloc_r+0x1b4>
   21448:	9c000217 	ldw	r16,8(r19)
   2144c:	00bfff04 	movi	r2,-4
   21450:	85400117 	ldw	r21,4(r16)
   21454:	a8ac703a 	and	r22,r21,r2
   21458:	b4400336 	bltu	r22,r17,21468 <_malloc_r+0x2e8>
   2145c:	b445c83a 	sub	r2,r22,r17
   21460:	10c00408 	cmpgei	r3,r2,16
   21464:	1800541e 	bne	r3,zero,215b8 <_malloc_r+0x438>
   21468:	008000b4 	movhi	r2,2
   2146c:	109d6f17 	ldw	r2,30140(r2)
   21470:	00c000f4 	movhi	r3,3
   21474:	1d641817 	ldw	r21,-28576(r3)
   21478:	10bfffd8 	cmpnei	r2,r2,-1
   2147c:	85b9883a 	add	fp,r16,r22
   21480:	8d6b883a 	add	r21,r17,r21
   21484:	1000d626 	beq	r2,zero,217e0 <_malloc_r+0x660>
   21488:	ad4403c4 	addi	r21,r21,4111
   2148c:	00bc0004 	movi	r2,-4096
   21490:	a8aa703a 	and	r21,r21,r2
   21494:	a80b883a 	mov	r5,r21
   21498:	9009883a 	mov	r4,r18
   2149c:	00222880 	call	22288 <_sbrk_r>
   214a0:	102f883a 	mov	r23,r2
   214a4:	10bfffd8 	cmpnei	r2,r2,-1
   214a8:	1000a826 	beq	r2,zero,2174c <_malloc_r+0x5cc>
   214ac:	bf00a636 	bltu	r23,fp,21748 <_malloc_r+0x5c8>
   214b0:	008000f4 	movhi	r2,3
   214b4:	15242217 	ldw	r20,-28536(r2)
   214b8:	ad29883a 	add	r20,r21,r20
   214bc:	15242215 	stw	r20,-28536(r2)
   214c0:	a007883a 	mov	r3,r20
   214c4:	e5c0ec26 	beq	fp,r23,21878 <_malloc_r+0x6f8>
   214c8:	008000b4 	movhi	r2,2
   214cc:	109d6f17 	ldw	r2,30140(r2)
   214d0:	10bfffd8 	cmpnei	r2,r2,-1
   214d4:	1000ef26 	beq	r2,zero,21894 <_malloc_r+0x714>
   214d8:	bf39c83a 	sub	fp,r23,fp
   214dc:	e0c7883a 	add	r3,fp,r3
   214e0:	008000f4 	movhi	r2,3
   214e4:	10e42215 	stw	r3,-28536(r2)
   214e8:	bf0001cc 	andi	fp,r23,7
   214ec:	e000c526 	beq	fp,zero,21804 <_malloc_r+0x684>
   214f0:	bf2fc83a 	sub	r23,r23,fp
   214f4:	bdc00204 	addi	r23,r23,8
   214f8:	05040204 	movi	r20,4104
   214fc:	a729c83a 	sub	r20,r20,fp
   21500:	bd6b883a 	add	r21,r23,r21
   21504:	a569c83a 	sub	r20,r20,r21
   21508:	a503ffcc 	andi	r20,r20,4095
   2150c:	a00b883a 	mov	r5,r20
   21510:	9009883a 	mov	r4,r18
   21514:	00222880 	call	22288 <_sbrk_r>
   21518:	10ffffe0 	cmpeqi	r3,r2,-1
   2151c:	1800f31e 	bne	r3,zero,218ec <_malloc_r+0x76c>
   21520:	15c5c83a 	sub	r2,r2,r23
   21524:	152b883a 	add	r21,r2,r20
   21528:	008000f4 	movhi	r2,3
   2152c:	11642217 	ldw	r5,-28536(r2)
   21530:	9dc00215 	stw	r23,8(r19)
   21534:	ad400054 	ori	r21,r21,1
   21538:	a169883a 	add	r20,r20,r5
   2153c:	15242215 	stw	r20,-28536(r2)
   21540:	bd400115 	stw	r21,4(r23)
   21544:	84c0d626 	beq	r16,r19,218a0 <_malloc_r+0x720>
   21548:	b0800428 	cmpgeui	r2,r22,16
   2154c:	1000d626 	beq	r2,zero,218a8 <_malloc_r+0x728>
   21550:	80c00117 	ldw	r3,4(r16)
   21554:	013ffe04 	movi	r4,-8
   21558:	b0bffd04 	addi	r2,r22,-12
   2155c:	1104703a 	and	r2,r2,r4
   21560:	18c0004c 	andi	r3,r3,1
   21564:	1886b03a 	or	r3,r3,r2
   21568:	80c00115 	stw	r3,4(r16)
   2156c:	01000144 	movi	r4,5
   21570:	8087883a 	add	r3,r16,r2
   21574:	19000115 	stw	r4,4(r3)
   21578:	19000215 	stw	r4,8(r3)
   2157c:	10800428 	cmpgeui	r2,r2,16
   21580:	1000df1e 	bne	r2,zero,21900 <_malloc_r+0x780>
   21584:	bd400117 	ldw	r21,4(r23)
   21588:	b821883a 	mov	r16,r23
   2158c:	008000f4 	movhi	r2,3
   21590:	10a41717 	ldw	r2,-28580(r2)
   21594:	1500022e 	bgeu	r2,r20,215a0 <_malloc_r+0x420>
   21598:	008000f4 	movhi	r2,3
   2159c:	15241715 	stw	r20,-28580(r2)
   215a0:	008000f4 	movhi	r2,3
   215a4:	10a41617 	ldw	r2,-28584(r2)
   215a8:	15006a2e 	bgeu	r2,r20,21754 <_malloc_r+0x5d4>
   215ac:	008000f4 	movhi	r2,3
   215b0:	15241615 	stw	r20,-28584(r2)
   215b4:	00006706 	br	21754 <_malloc_r+0x5d4>
   215b8:	88c00054 	ori	r3,r17,1
   215bc:	80c00115 	stw	r3,4(r16)
   215c0:	8463883a 	add	r17,r16,r17
   215c4:	10800054 	ori	r2,r2,1
   215c8:	9c400215 	stw	r17,8(r19)
   215cc:	88800115 	stw	r2,4(r17)
   215d0:	9009883a 	mov	r4,r18
   215d4:	0023a500 	call	23a50 <__malloc_unlock>
   215d8:	80800204 	addi	r2,r16,8
   215dc:	003f7e06 	br	213d8 <_malloc_r+0x258>
   215e0:	81000317 	ldw	r4,12(r16)
   215e4:	003f0506 	br	211fc <_malloc_r+0x7c>
   215e8:	1006d27a 	srli	r3,r2,9
   215ec:	19000168 	cmpgeui	r4,r3,5
   215f0:	20005026 	beq	r4,zero,21734 <_malloc_r+0x5b4>
   215f4:	19000568 	cmpgeui	r4,r3,21
   215f8:	20008c1e 	bne	r4,zero,2182c <_malloc_r+0x6ac>
   215fc:	19401704 	addi	r5,r3,92
   21600:	280a90fa 	slli	r5,r5,3
   21604:	190016c4 	addi	r4,r3,91
   21608:	994b883a 	add	r5,r19,r5
   2160c:	28c00017 	ldw	r3,0(r5)
   21610:	297ffe04 	addi	r5,r5,-8
   21614:	28c07426 	beq	r5,r3,217e8 <_malloc_r+0x668>
   21618:	01bfff04 	movi	r6,-4
   2161c:	19000117 	ldw	r4,4(r3)
   21620:	2188703a 	and	r4,r4,r6
   21624:	1100022e 	bgeu	r2,r4,21630 <_malloc_r+0x4b0>
   21628:	18c00217 	ldw	r3,8(r3)
   2162c:	28fffb1e 	bne	r5,r3,2161c <_malloc_r+0x49c>
   21630:	19400317 	ldw	r5,12(r3)
   21634:	98800117 	ldw	r2,4(r19)
   21638:	81400315 	stw	r5,12(r16)
   2163c:	80c00215 	stw	r3,8(r16)
   21640:	2c000215 	stw	r16,8(r5)
   21644:	1c000315 	stw	r16,12(r3)
   21648:	003f3606 	br	21324 <_malloc_r+0x1a4>
   2164c:	10c00568 	cmpgeui	r3,r2,21
   21650:	18004a26 	beq	r3,zero,2177c <_malloc_r+0x5fc>
   21654:	10c01568 	cmpgeui	r3,r2,85
   21658:	18007b1e 	bne	r3,zero,21848 <_malloc_r+0x6c8>
   2165c:	8804d33a 	srli	r2,r17,12
   21660:	11c01bc4 	addi	r7,r2,111
   21664:	380890fa 	slli	r4,r7,3
   21668:	12001b84 	addi	r8,r2,110
   2166c:	003efd06 	br	21264 <_malloc_r+0xe4>
   21670:	63000044 	addi	r12,r12,1
   21674:	608000cc 	andi	r2,r12,3
   21678:	42000204 	addi	r8,r8,8
   2167c:	103f3e1e 	bne	r2,zero,21378 <_malloc_r+0x1f8>
   21680:	00004506 	br	21798 <_malloc_r+0x618>
   21684:	81000217 	ldw	r4,8(r16)
   21688:	89800054 	ori	r6,r17,1
   2168c:	81800115 	stw	r6,4(r16)
   21690:	20800315 	stw	r2,12(r4)
   21694:	11000215 	stw	r4,8(r2)
   21698:	8463883a 	add	r17,r16,r17
   2169c:	9c400515 	stw	r17,20(r19)
   216a0:	9c400415 	stw	r17,16(r19)
   216a4:	28800054 	ori	r2,r5,1
   216a8:	88800115 	stw	r2,4(r17)
   216ac:	8a400315 	stw	r9,12(r17)
   216b0:	8a400215 	stw	r9,8(r17)
   216b4:	80c7883a 	add	r3,r16,r3
   216b8:	19400015 	stw	r5,0(r3)
   216bc:	9009883a 	mov	r4,r18
   216c0:	0023a500 	call	23a50 <__malloc_unlock>
   216c4:	80800204 	addi	r2,r16,8
   216c8:	003f4306 	br	213d8 <_malloc_r+0x258>
   216cc:	880ed0fa 	srli	r7,r17,3
   216d0:	88800204 	addi	r2,r17,8
   216d4:	003ebf06 	br	211d4 <_malloc_r+0x54>
   216d8:	8085883a 	add	r2,r16,r2
   216dc:	10c00117 	ldw	r3,4(r2)
   216e0:	9009883a 	mov	r4,r18
   216e4:	18c00054 	ori	r3,r3,1
   216e8:	10c00115 	stw	r3,4(r2)
   216ec:	0023a500 	call	23a50 <__malloc_unlock>
   216f0:	80800204 	addi	r2,r16,8
   216f4:	003f3806 	br	213d8 <_malloc_r+0x258>
   216f8:	89000054 	ori	r4,r17,1
   216fc:	81000115 	stw	r4,4(r16)
   21700:	8463883a 	add	r17,r16,r17
   21704:	9c400515 	stw	r17,20(r19)
   21708:	9c400415 	stw	r17,16(r19)
   2170c:	19000054 	ori	r4,r3,1
   21710:	89000115 	stw	r4,4(r17)
   21714:	8085883a 	add	r2,r16,r2
   21718:	8a400315 	stw	r9,12(r17)
   2171c:	8a400215 	stw	r9,8(r17)
   21720:	10c00015 	stw	r3,0(r2)
   21724:	9009883a 	mov	r4,r18
   21728:	0023a500 	call	23a50 <__malloc_unlock>
   2172c:	80800204 	addi	r2,r16,8
   21730:	003f2906 	br	213d8 <_malloc_r+0x258>
   21734:	1006d1ba 	srli	r3,r2,6
   21738:	19400e44 	addi	r5,r3,57
   2173c:	280a90fa 	slli	r5,r5,3
   21740:	19000e04 	addi	r4,r3,56
   21744:	003fb006 	br	21608 <_malloc_r+0x488>
   21748:	84c04626 	beq	r16,r19,21864 <_malloc_r+0x6e4>
   2174c:	9c000217 	ldw	r16,8(r19)
   21750:	85400117 	ldw	r21,4(r16)
   21754:	00bfff04 	movi	r2,-4
   21758:	a8aa703a 	and	r21,r21,r2
   2175c:	ac45c83a 	sub	r2,r21,r17
   21760:	ac400236 	bltu	r21,r17,2176c <_malloc_r+0x5ec>
   21764:	10c00408 	cmpgei	r3,r2,16
   21768:	183f931e 	bne	r3,zero,215b8 <_malloc_r+0x438>
   2176c:	9009883a 	mov	r4,r18
   21770:	0023a500 	call	23a50 <__malloc_unlock>
   21774:	0005883a 	mov	r2,zero
   21778:	003f1706 	br	213d8 <_malloc_r+0x258>
   2177c:	11c01704 	addi	r7,r2,92
   21780:	380890fa 	slli	r4,r7,3
   21784:	120016c4 	addi	r8,r2,91
   21788:	003eb606 	br	21264 <_malloc_r+0xe4>
   2178c:	58800217 	ldw	r2,8(r11)
   21790:	39ffffc4 	addi	r7,r7,-1
   21794:	12c0701e 	bne	r2,r11,21958 <_malloc_r+0x7d8>
   21798:	388000cc 	andi	r2,r7,3
   2179c:	5afffe04 	addi	r11,r11,-8
   217a0:	103ffa1e 	bne	r2,zero,2178c <_malloc_r+0x60c>
   217a4:	98c00117 	ldw	r3,4(r19)
   217a8:	0104303a 	nor	r2,zero,r4
   217ac:	10c4703a 	and	r2,r2,r3
   217b0:	98800115 	stw	r2,4(r19)
   217b4:	2109883a 	add	r4,r4,r4
   217b8:	113f2336 	bltu	r2,r4,21448 <_malloc_r+0x2c8>
   217bc:	203f2226 	beq	r4,zero,21448 <_malloc_r+0x2c8>
   217c0:	2086703a 	and	r3,r4,r2
   217c4:	1800041e 	bne	r3,zero,217d8 <_malloc_r+0x658>
   217c8:	2109883a 	add	r4,r4,r4
   217cc:	2086703a 	and	r3,r4,r2
   217d0:	63000104 	addi	r12,r12,4
   217d4:	183ffc26 	beq	r3,zero,217c8 <_malloc_r+0x648>
   217d8:	600f883a 	mov	r7,r12
   217dc:	003ee206 	br	21368 <_malloc_r+0x1e8>
   217e0:	ad400404 	addi	r21,r21,16
   217e4:	003f2b06 	br	21494 <_malloc_r+0x314>
   217e8:	2009d0ba 	srai	r4,r4,2
   217ec:	00800044 	movi	r2,1
   217f0:	99800117 	ldw	r6,4(r19)
   217f4:	1104983a 	sll	r2,r2,r4
   217f8:	1184b03a 	or	r2,r2,r6
   217fc:	98800115 	stw	r2,4(r19)
   21800:	003f8d06 	br	21638 <_malloc_r+0x4b8>
   21804:	bd69883a 	add	r20,r23,r21
   21808:	0529c83a 	sub	r20,zero,r20
   2180c:	a503ffcc 	andi	r20,r20,4095
   21810:	a00b883a 	mov	r5,r20
   21814:	9009883a 	mov	r4,r18
   21818:	00222880 	call	22288 <_sbrk_r>
   2181c:	10ffffe0 	cmpeqi	r3,r2,-1
   21820:	183f3f26 	beq	r3,zero,21520 <_malloc_r+0x3a0>
   21824:	0029883a 	mov	r20,zero
   21828:	003f3f06 	br	21528 <_malloc_r+0x3a8>
   2182c:	19001568 	cmpgeui	r4,r3,85
   21830:	2000201e 	bne	r4,zero,218b4 <_malloc_r+0x734>
   21834:	1006d33a 	srli	r3,r2,12
   21838:	19401bc4 	addi	r5,r3,111
   2183c:	280a90fa 	slli	r5,r5,3
   21840:	19001b84 	addi	r4,r3,110
   21844:	003f7006 	br	21608 <_malloc_r+0x488>
   21848:	10c05568 	cmpgeui	r3,r2,341
   2184c:	1800201e 	bne	r3,zero,218d0 <_malloc_r+0x750>
   21850:	8804d3fa 	srli	r2,r17,15
   21854:	11c01e04 	addi	r7,r2,120
   21858:	380890fa 	slli	r4,r7,3
   2185c:	12001dc4 	addi	r8,r2,119
   21860:	003e8006 	br	21264 <_malloc_r+0xe4>
   21864:	008000f4 	movhi	r2,3
   21868:	10e42217 	ldw	r3,-28536(r2)
   2186c:	a8c7883a 	add	r3,r21,r3
   21870:	10e42215 	stw	r3,-28536(r2)
   21874:	003f1406 	br	214c8 <_malloc_r+0x348>
   21878:	e083ffcc 	andi	r2,fp,4095
   2187c:	103f121e 	bne	r2,zero,214c8 <_malloc_r+0x348>
   21880:	9c000217 	ldw	r16,8(r19)
   21884:	b56b883a 	add	r21,r22,r21
   21888:	ad400054 	ori	r21,r21,1
   2188c:	85400115 	stw	r21,4(r16)
   21890:	003f3e06 	br	2158c <_malloc_r+0x40c>
   21894:	008000b4 	movhi	r2,2
   21898:	15dd6f15 	stw	r23,30140(r2)
   2189c:	003f1206 	br	214e8 <_malloc_r+0x368>
   218a0:	b821883a 	mov	r16,r23
   218a4:	003f3906 	br	2158c <_malloc_r+0x40c>
   218a8:	00800044 	movi	r2,1
   218ac:	b8800115 	stw	r2,4(r23)
   218b0:	003fae06 	br	2176c <_malloc_r+0x5ec>
   218b4:	19005568 	cmpgeui	r4,r3,341
   218b8:	2000191e 	bne	r4,zero,21920 <_malloc_r+0x7a0>
   218bc:	1006d3fa 	srli	r3,r2,15
   218c0:	19401e04 	addi	r5,r3,120
   218c4:	280a90fa 	slli	r5,r5,3
   218c8:	19001dc4 	addi	r4,r3,119
   218cc:	003f4e06 	br	21608 <_malloc_r+0x488>
   218d0:	10815568 	cmpgeui	r2,r2,1365
   218d4:	1000191e 	bne	r2,zero,2193c <_malloc_r+0x7bc>
   218d8:	8804d4ba 	srli	r2,r17,18
   218dc:	11c01f44 	addi	r7,r2,125
   218e0:	380890fa 	slli	r4,r7,3
   218e4:	12001f04 	addi	r8,r2,124
   218e8:	003e5e06 	br	21264 <_malloc_r+0xe4>
   218ec:	e73ffe04 	addi	fp,fp,-8
   218f0:	af2b883a 	add	r21,r21,fp
   218f4:	adebc83a 	sub	r21,r21,r23
   218f8:	0029883a 	mov	r20,zero
   218fc:	003f0a06 	br	21528 <_malloc_r+0x3a8>
   21900:	81400204 	addi	r5,r16,8
   21904:	9009883a 	mov	r4,r18
   21908:	0022c080 	call	22c08 <_free_r>
   2190c:	9c000217 	ldw	r16,8(r19)
   21910:	008000f4 	movhi	r2,3
   21914:	15242217 	ldw	r20,-28536(r2)
   21918:	85400117 	ldw	r21,4(r16)
   2191c:	003f1b06 	br	2158c <_malloc_r+0x40c>
   21920:	18c15568 	cmpgeui	r3,r3,1365
   21924:	1800091e 	bne	r3,zero,2194c <_malloc_r+0x7cc>
   21928:	1006d4ba 	srli	r3,r2,18
   2192c:	19401f44 	addi	r5,r3,125
   21930:	280a90fa 	slli	r5,r5,3
   21934:	19001f04 	addi	r4,r3,124
   21938:	003f3306 	br	21608 <_malloc_r+0x488>
   2193c:	0100fe04 	movi	r4,1016
   21940:	01c01fc4 	movi	r7,127
   21944:	02001f84 	movi	r8,126
   21948:	003e4606 	br	21264 <_malloc_r+0xe4>
   2194c:	0140fe04 	movi	r5,1016
   21950:	01001f84 	movi	r4,126
   21954:	003f2c06 	br	21608 <_malloc_r+0x488>
   21958:	98800117 	ldw	r2,4(r19)
   2195c:	003f9506 	br	217b4 <_malloc_r+0x634>

00021960 <memchr>:
   21960:	208000cc 	andi	r2,r4,3
   21964:	280f883a 	mov	r7,r5
   21968:	10000e26 	beq	r2,zero,219a4 <memchr+0x44>
   2196c:	30bfffc4 	addi	r2,r6,-1
   21970:	30001726 	beq	r6,zero,219d0 <memchr+0x70>
   21974:	29803fcc 	andi	r6,r5,255
   21978:	00000606 	br	21994 <memchr+0x34>
   2197c:	21000044 	addi	r4,r4,1
   21980:	20c000cc 	andi	r3,r4,3
   21984:	18000826 	beq	r3,zero,219a8 <memchr+0x48>
   21988:	10bfffc4 	addi	r2,r2,-1
   2198c:	10ffffe0 	cmpeqi	r3,r2,-1
   21990:	18000f1e 	bne	r3,zero,219d0 <memchr+0x70>
   21994:	20c00003 	ldbu	r3,0(r4)
   21998:	19bff81e 	bne	r3,r6,2197c <memchr+0x1c>
   2199c:	2005883a 	mov	r2,r4
   219a0:	f800283a 	ret
   219a4:	3005883a 	mov	r2,r6
   219a8:	10c00128 	cmpgeui	r3,r2,4
   219ac:	18000a1e 	bne	r3,zero,219d8 <memchr+0x78>
   219b0:	10001e26 	beq	r2,zero,21a2c <memchr+0xcc>
   219b4:	2087883a 	add	r3,r4,r2
   219b8:	39803fcc 	andi	r6,r7,255
   219bc:	2005883a 	mov	r2,r4
   219c0:	11000003 	ldbu	r4,0(r2)
   219c4:	21bff626 	beq	r4,r6,219a0 <memchr+0x40>
   219c8:	10800044 	addi	r2,r2,1
   219cc:	18bffc1e 	bne	r3,r2,219c0 <memchr+0x60>
   219d0:	0005883a 	mov	r2,zero
   219d4:	f800283a 	ret
   219d8:	29403fcc 	andi	r5,r5,255
   219dc:	280c923a 	slli	r6,r5,8
   219e0:	027fbff4 	movhi	r9,65279
   219e4:	02202074 	movhi	r8,32897
   219e8:	314ab03a 	or	r5,r6,r5
   219ec:	280c943a 	slli	r6,r5,16
   219f0:	4a7fbfc4 	addi	r9,r9,-257
   219f4:	42202004 	addi	r8,r8,-32640
   219f8:	314cb03a 	or	r6,r6,r5
   219fc:	20c00017 	ldw	r3,0(r4)
   21a00:	30c6f03a 	xor	r3,r6,r3
   21a04:	1a4b883a 	add	r5,r3,r9
   21a08:	00c6303a 	nor	r3,zero,r3
   21a0c:	28c6703a 	and	r3,r5,r3
   21a10:	1a06703a 	and	r3,r3,r8
   21a14:	183fe71e 	bne	r3,zero,219b4 <memchr+0x54>
   21a18:	10bfff04 	addi	r2,r2,-4
   21a1c:	10c00128 	cmpgeui	r3,r2,4
   21a20:	21000104 	addi	r4,r4,4
   21a24:	183ff51e 	bne	r3,zero,219fc <memchr+0x9c>
   21a28:	003fe106 	br	219b0 <memchr+0x50>
   21a2c:	f800283a 	ret

00021a30 <memcpy>:
   21a30:	30c00430 	cmpltui	r3,r6,16
   21a34:	2005883a 	mov	r2,r4
   21a38:	18002d1e 	bne	r3,zero,21af0 <memcpy+0xc0>
   21a3c:	2906b03a 	or	r3,r5,r4
   21a40:	18c000cc 	andi	r3,r3,3
   21a44:	1800351e 	bne	r3,zero,21b1c <memcpy+0xec>
   21a48:	32fffc04 	addi	r11,r6,-16
   21a4c:	5816d13a 	srli	r11,r11,4
   21a50:	280f883a 	mov	r7,r5
   21a54:	2007883a 	mov	r3,r4
   21a58:	5ac00044 	addi	r11,r11,1
   21a5c:	5816913a 	slli	r11,r11,4
   21a60:	22d5883a 	add	r10,r4,r11
   21a64:	39000117 	ldw	r4,4(r7)
   21a68:	3a400017 	ldw	r9,0(r7)
   21a6c:	3a000217 	ldw	r8,8(r7)
   21a70:	19000115 	stw	r4,4(r3)
   21a74:	39000317 	ldw	r4,12(r7)
   21a78:	1a400015 	stw	r9,0(r3)
   21a7c:	1a000215 	stw	r8,8(r3)
   21a80:	19000315 	stw	r4,12(r3)
   21a84:	18c00404 	addi	r3,r3,16
   21a88:	39c00404 	addi	r7,r7,16
   21a8c:	50fff51e 	bne	r10,r3,21a64 <memcpy+0x34>
   21a90:	3100030c 	andi	r4,r6,12
   21a94:	2acb883a 	add	r5,r5,r11
   21a98:	320003cc 	andi	r8,r6,15
   21a9c:	20002226 	beq	r4,zero,21b28 <memcpy+0xf8>
   21aa0:	280f883a 	mov	r7,r5
   21aa4:	1813883a 	mov	r9,r3
   21aa8:	39c00104 	addi	r7,r7,4
   21aac:	3abfff17 	ldw	r10,-4(r7)
   21ab0:	41c9c83a 	sub	r4,r8,r7
   21ab4:	2909883a 	add	r4,r5,r4
   21ab8:	4a800015 	stw	r10,0(r9)
   21abc:	21000128 	cmpgeui	r4,r4,4
   21ac0:	4a400104 	addi	r9,r9,4
   21ac4:	203ff81e 	bne	r4,zero,21aa8 <memcpy+0x78>
   21ac8:	413fff04 	addi	r4,r8,-4
   21acc:	2008d0ba 	srli	r4,r4,2
   21ad0:	318000cc 	andi	r6,r6,3
   21ad4:	31ffffc4 	addi	r7,r6,-1
   21ad8:	21000044 	addi	r4,r4,1
   21adc:	200890ba 	slli	r4,r4,2
   21ae0:	1907883a 	add	r3,r3,r4
   21ae4:	290b883a 	add	r5,r5,r4
   21ae8:	3000041e 	bne	r6,zero,21afc <memcpy+0xcc>
   21aec:	f800283a 	ret
   21af0:	2007883a 	mov	r3,r4
   21af4:	31ffffc4 	addi	r7,r6,-1
   21af8:	303ffc26 	beq	r6,zero,21aec <memcpy+0xbc>
   21afc:	39c00044 	addi	r7,r7,1
   21b00:	19cf883a 	add	r7,r3,r7
   21b04:	29800003 	ldbu	r6,0(r5)
   21b08:	18c00044 	addi	r3,r3,1
   21b0c:	29400044 	addi	r5,r5,1
   21b10:	19bfffc5 	stb	r6,-1(r3)
   21b14:	38fffb1e 	bne	r7,r3,21b04 <memcpy+0xd4>
   21b18:	f800283a 	ret
   21b1c:	31ffffc4 	addi	r7,r6,-1
   21b20:	2007883a 	mov	r3,r4
   21b24:	003ff506 	br	21afc <memcpy+0xcc>
   21b28:	400d883a 	mov	r6,r8
   21b2c:	003ff106 	br	21af4 <memcpy+0xc4>

00021b30 <memmove>:
   21b30:	2005883a 	mov	r2,r4
   21b34:	29000a2e 	bgeu	r5,r4,21b60 <memmove+0x30>
   21b38:	2989883a 	add	r4,r5,r6
   21b3c:	1100082e 	bgeu	r2,r4,21b60 <memmove+0x30>
   21b40:	1187883a 	add	r3,r2,r6
   21b44:	30003e26 	beq	r6,zero,21c40 <memmove+0x110>
   21b48:	217fffc3 	ldbu	r5,-1(r4)
   21b4c:	18ffffc4 	addi	r3,r3,-1
   21b50:	213fffc4 	addi	r4,r4,-1
   21b54:	19400005 	stb	r5,0(r3)
   21b58:	10fffb1e 	bne	r2,r3,21b48 <memmove+0x18>
   21b5c:	f800283a 	ret
   21b60:	30c00430 	cmpltui	r3,r6,16
   21b64:	18000b26 	beq	r3,zero,21b94 <memmove+0x64>
   21b68:	1007883a 	mov	r3,r2
   21b6c:	31ffffc4 	addi	r7,r6,-1
   21b70:	30003726 	beq	r6,zero,21c50 <memmove+0x120>
   21b74:	39c00044 	addi	r7,r7,1
   21b78:	29cf883a 	add	r7,r5,r7
   21b7c:	29800003 	ldbu	r6,0(r5)
   21b80:	29400044 	addi	r5,r5,1
   21b84:	18c00044 	addi	r3,r3,1
   21b88:	19bfffc5 	stb	r6,-1(r3)
   21b8c:	29fffb1e 	bne	r5,r7,21b7c <memmove+0x4c>
   21b90:	f800283a 	ret
   21b94:	2886b03a 	or	r3,r5,r2
   21b98:	18c000cc 	andi	r3,r3,3
   21b9c:	1800291e 	bne	r3,zero,21c44 <memmove+0x114>
   21ba0:	327ffc04 	addi	r9,r6,-16
   21ba4:	4812d13a 	srli	r9,r9,4
   21ba8:	280f883a 	mov	r7,r5
   21bac:	1007883a 	mov	r3,r2
   21bb0:	4a400044 	addi	r9,r9,1
   21bb4:	4812913a 	slli	r9,r9,4
   21bb8:	1251883a 	add	r8,r2,r9
   21bbc:	39000017 	ldw	r4,0(r7)
   21bc0:	39c00404 	addi	r7,r7,16
   21bc4:	18c00404 	addi	r3,r3,16
   21bc8:	193ffc15 	stw	r4,-16(r3)
   21bcc:	393ffd17 	ldw	r4,-12(r7)
   21bd0:	193ffd15 	stw	r4,-12(r3)
   21bd4:	393ffe17 	ldw	r4,-8(r7)
   21bd8:	193ffe15 	stw	r4,-8(r3)
   21bdc:	393fff17 	ldw	r4,-4(r7)
   21be0:	193fff15 	stw	r4,-4(r3)
   21be4:	40fff51e 	bne	r8,r3,21bbc <memmove+0x8c>
   21be8:	3100030c 	andi	r4,r6,12
   21bec:	2a4b883a 	add	r5,r5,r9
   21bf0:	320003cc 	andi	r8,r6,15
   21bf4:	20001726 	beq	r4,zero,21c54 <memmove+0x124>
   21bf8:	2813883a 	mov	r9,r5
   21bfc:	180f883a 	mov	r7,r3
   21c00:	4a800017 	ldw	r10,0(r9)
   21c04:	39c00104 	addi	r7,r7,4
   21c08:	41c9c83a 	sub	r4,r8,r7
   21c0c:	1909883a 	add	r4,r3,r4
   21c10:	21000128 	cmpgeui	r4,r4,4
   21c14:	3abfff15 	stw	r10,-4(r7)
   21c18:	4a400104 	addi	r9,r9,4
   21c1c:	203ff81e 	bne	r4,zero,21c00 <memmove+0xd0>
   21c20:	413fff04 	addi	r4,r8,-4
   21c24:	2008d0ba 	srli	r4,r4,2
   21c28:	318000cc 	andi	r6,r6,3
   21c2c:	21000044 	addi	r4,r4,1
   21c30:	200890ba 	slli	r4,r4,2
   21c34:	1907883a 	add	r3,r3,r4
   21c38:	290b883a 	add	r5,r5,r4
   21c3c:	003fcb06 	br	21b6c <memmove+0x3c>
   21c40:	f800283a 	ret
   21c44:	31ffffc4 	addi	r7,r6,-1
   21c48:	1007883a 	mov	r3,r2
   21c4c:	003fc906 	br	21b74 <memmove+0x44>
   21c50:	f800283a 	ret
   21c54:	400d883a 	mov	r6,r8
   21c58:	003fc406 	br	21b6c <memmove+0x3c>

00021c5c <memset>:
   21c5c:	20c000cc 	andi	r3,r4,3
   21c60:	2005883a 	mov	r2,r4
   21c64:	18003626 	beq	r3,zero,21d40 <memset+0xe4>
   21c68:	31ffffc4 	addi	r7,r6,-1
   21c6c:	30003326 	beq	r6,zero,21d3c <memset+0xe0>
   21c70:	2811883a 	mov	r8,r5
   21c74:	2007883a 	mov	r3,r4
   21c78:	00000306 	br	21c88 <memset+0x2c>
   21c7c:	39ffffc4 	addi	r7,r7,-1
   21c80:	39bfffe0 	cmpeqi	r6,r7,-1
   21c84:	30002d1e 	bne	r6,zero,21d3c <memset+0xe0>
   21c88:	18c00044 	addi	r3,r3,1
   21c8c:	198000cc 	andi	r6,r3,3
   21c90:	1a3fffc5 	stb	r8,-1(r3)
   21c94:	303ff91e 	bne	r6,zero,21c7c <memset+0x20>
   21c98:	39000130 	cmpltui	r4,r7,4
   21c9c:	2000221e 	bne	r4,zero,21d28 <memset+0xcc>
   21ca0:	29003fcc 	andi	r4,r5,255
   21ca4:	200c923a 	slli	r6,r4,8
   21ca8:	3a000430 	cmpltui	r8,r7,16
   21cac:	3108b03a 	or	r4,r6,r4
   21cb0:	200c943a 	slli	r6,r4,16
   21cb4:	310cb03a 	or	r6,r6,r4
   21cb8:	40000e1e 	bne	r8,zero,21cf4 <memset+0x98>
   21cbc:	393ffc04 	addi	r4,r7,-16
   21cc0:	2008d13a 	srli	r4,r4,4
   21cc4:	21000044 	addi	r4,r4,1
   21cc8:	2008913a 	slli	r4,r4,4
   21ccc:	1909883a 	add	r4,r3,r4
   21cd0:	19800015 	stw	r6,0(r3)
   21cd4:	19800115 	stw	r6,4(r3)
   21cd8:	19800215 	stw	r6,8(r3)
   21cdc:	19800315 	stw	r6,12(r3)
   21ce0:	18c00404 	addi	r3,r3,16
   21ce4:	20fffa1e 	bne	r4,r3,21cd0 <memset+0x74>
   21ce8:	3900030c 	andi	r4,r7,12
   21cec:	39c003cc 	andi	r7,r7,15
   21cf0:	20000d26 	beq	r4,zero,21d28 <memset+0xcc>
   21cf4:	1811883a 	mov	r8,r3
   21cf8:	42000104 	addi	r8,r8,4
   21cfc:	3a09c83a 	sub	r4,r7,r8
   21d00:	1909883a 	add	r4,r3,r4
   21d04:	21000128 	cmpgeui	r4,r4,4
   21d08:	41bfff15 	stw	r6,-4(r8)
   21d0c:	203ffa1e 	bne	r4,zero,21cf8 <memset+0x9c>
   21d10:	393fff04 	addi	r4,r7,-4
   21d14:	2008d0ba 	srli	r4,r4,2
   21d18:	39c000cc 	andi	r7,r7,3
   21d1c:	21000044 	addi	r4,r4,1
   21d20:	200890ba 	slli	r4,r4,2
   21d24:	1907883a 	add	r3,r3,r4
   21d28:	38000426 	beq	r7,zero,21d3c <memset+0xe0>
   21d2c:	19cf883a 	add	r7,r3,r7
   21d30:	18c00044 	addi	r3,r3,1
   21d34:	197fffc5 	stb	r5,-1(r3)
   21d38:	38fffd1e 	bne	r7,r3,21d30 <memset+0xd4>
   21d3c:	f800283a 	ret
   21d40:	2007883a 	mov	r3,r4
   21d44:	300f883a 	mov	r7,r6
   21d48:	003fd306 	br	21c98 <memset+0x3c>

00021d4c <_realloc_r>:
   21d4c:	defff604 	addi	sp,sp,-40
   21d50:	dc800215 	stw	r18,8(sp)
   21d54:	dfc00915 	stw	ra,36(sp)
   21d58:	df000815 	stw	fp,32(sp)
   21d5c:	ddc00715 	stw	r23,28(sp)
   21d60:	dd800615 	stw	r22,24(sp)
   21d64:	dd400515 	stw	r21,20(sp)
   21d68:	dd000415 	stw	r20,16(sp)
   21d6c:	dcc00315 	stw	r19,12(sp)
   21d70:	dc400115 	stw	r17,4(sp)
   21d74:	dc000015 	stw	r16,0(sp)
   21d78:	3025883a 	mov	r18,r6
   21d7c:	28008b26 	beq	r5,zero,21fac <_realloc_r+0x260>
   21d80:	2821883a 	mov	r16,r5
   21d84:	2027883a 	mov	r19,r4
   21d88:	944002c4 	addi	r17,r18,11
   21d8c:	0023a2c0 	call	23a2c <__malloc_lock>
   21d90:	888005f0 	cmpltui	r2,r17,23
   21d94:	1000521e 	bne	r2,zero,21ee0 <_realloc_r+0x194>
   21d98:	017ffe04 	movi	r5,-8
   21d9c:	8962703a 	and	r17,r17,r5
   21da0:	8807883a 	mov	r3,r17
   21da4:	88005116 	blt	r17,zero,21eec <_realloc_r+0x1a0>
   21da8:	8c805036 	bltu	r17,r18,21eec <_realloc_r+0x1a0>
   21dac:	80bfff17 	ldw	r2,-4(r16)
   21db0:	017fff04 	movi	r5,-4
   21db4:	857ffe04 	addi	r21,r16,-8
   21db8:	1168703a 	and	r20,r2,r5
   21dbc:	a0c0390e 	bge	r20,r3,21ea4 <_realloc_r+0x158>
   21dc0:	05c000b4 	movhi	r23,2
   21dc4:	bdd7e904 	addi	r23,r23,24484
   21dc8:	ba000217 	ldw	r8,8(r23)
   21dcc:	ad0f883a 	add	r7,r21,r20
   21dd0:	39000117 	ldw	r4,4(r7)
   21dd4:	41c08e26 	beq	r8,r7,22010 <_realloc_r+0x2c4>
   21dd8:	01bfff84 	movi	r6,-2
   21ddc:	218c703a 	and	r6,r4,r6
   21de0:	398d883a 	add	r6,r7,r6
   21de4:	31800117 	ldw	r6,4(r6)
   21de8:	3180004c 	andi	r6,r6,1
   21dec:	30004f1e 	bne	r6,zero,21f2c <_realloc_r+0x1e0>
   21df0:	2148703a 	and	r4,r4,r5
   21df4:	a10b883a 	add	r5,r20,r4
   21df8:	28c0bb0e 	bge	r5,r3,220e8 <_realloc_r+0x39c>
   21dfc:	1080004c 	andi	r2,r2,1
   21e00:	10004c1e 	bne	r2,zero,21f34 <_realloc_r+0x1e8>
   21e04:	873ffe17 	ldw	fp,-8(r16)
   21e08:	00bfff04 	movi	r2,-4
   21e0c:	af39c83a 	sub	fp,r21,fp
   21e10:	e1400117 	ldw	r5,4(fp)
   21e14:	288a703a 	and	r5,r5,r2
   21e18:	38000426 	beq	r7,zero,21e2c <_realloc_r+0xe0>
   21e1c:	a16d883a 	add	r22,r20,r5
   21e20:	b12d883a 	add	r22,r22,r4
   21e24:	41c0ba26 	beq	r8,r7,22110 <_realloc_r+0x3c4>
   21e28:	b0c0930e 	bge	r22,r3,22078 <_realloc_r+0x32c>
   21e2c:	e0004126 	beq	fp,zero,21f34 <_realloc_r+0x1e8>
   21e30:	a16d883a 	add	r22,r20,r5
   21e34:	b0c03f16 	blt	r22,r3,21f34 <_realloc_r+0x1e8>
   21e38:	e0800317 	ldw	r2,12(fp)
   21e3c:	e0c00217 	ldw	r3,8(fp)
   21e40:	a1bfff04 	addi	r6,r20,-4
   21e44:	31400968 	cmpgeui	r5,r6,37
   21e48:	18800315 	stw	r2,12(r3)
   21e4c:	10c00215 	stw	r3,8(r2)
   21e50:	e1000204 	addi	r4,fp,8
   21e54:	2800941e 	bne	r5,zero,220a8 <_realloc_r+0x35c>
   21e58:	30800530 	cmpltui	r2,r6,20
   21e5c:	1000db1e 	bne	r2,zero,221cc <_realloc_r+0x480>
   21e60:	80c00017 	ldw	r3,0(r16)
   21e64:	30800728 	cmpgeui	r2,r6,28
   21e68:	e0c00215 	stw	r3,8(fp)
   21e6c:	80c00117 	ldw	r3,4(r16)
   21e70:	e0c00315 	stw	r3,12(fp)
   21e74:	1000d71e 	bne	r2,zero,221d4 <_realloc_r+0x488>
   21e78:	84000204 	addi	r16,r16,8
   21e7c:	e0800404 	addi	r2,fp,16
   21e80:	80c00017 	ldw	r3,0(r16)
   21e84:	b029883a 	mov	r20,r22
   21e88:	e02b883a 	mov	r21,fp
   21e8c:	10c00015 	stw	r3,0(r2)
   21e90:	80c00117 	ldw	r3,4(r16)
   21e94:	10c00115 	stw	r3,4(r2)
   21e98:	80c00217 	ldw	r3,8(r16)
   21e9c:	2021883a 	mov	r16,r4
   21ea0:	10c00215 	stw	r3,8(r2)
   21ea4:	a9800117 	ldw	r6,4(r21)
   21ea8:	a447c83a 	sub	r3,r20,r17
   21eac:	19000430 	cmpltui	r4,r3,16
   21eb0:	3180004c 	andi	r6,r6,1
   21eb4:	ad05883a 	add	r2,r21,r20
   21eb8:	20004926 	beq	r4,zero,21fe0 <_realloc_r+0x294>
   21ebc:	a18cb03a 	or	r6,r20,r6
   21ec0:	a9800115 	stw	r6,4(r21)
   21ec4:	10c00117 	ldw	r3,4(r2)
   21ec8:	18c00054 	ori	r3,r3,1
   21ecc:	10c00115 	stw	r3,4(r2)
   21ed0:	9809883a 	mov	r4,r19
   21ed4:	0023a500 	call	23a50 <__malloc_unlock>
   21ed8:	8025883a 	mov	r18,r16
   21edc:	00000606 	br	21ef8 <_realloc_r+0x1ac>
   21ee0:	04400404 	movi	r17,16
   21ee4:	00c00404 	movi	r3,16
   21ee8:	8cbfb02e 	bgeu	r17,r18,21dac <_realloc_r+0x60>
   21eec:	00800304 	movi	r2,12
   21ef0:	98800015 	stw	r2,0(r19)
   21ef4:	0025883a 	mov	r18,zero
   21ef8:	9005883a 	mov	r2,r18
   21efc:	dfc00917 	ldw	ra,36(sp)
   21f00:	df000817 	ldw	fp,32(sp)
   21f04:	ddc00717 	ldw	r23,28(sp)
   21f08:	dd800617 	ldw	r22,24(sp)
   21f0c:	dd400517 	ldw	r21,20(sp)
   21f10:	dd000417 	ldw	r20,16(sp)
   21f14:	dcc00317 	ldw	r19,12(sp)
   21f18:	dc800217 	ldw	r18,8(sp)
   21f1c:	dc400117 	ldw	r17,4(sp)
   21f20:	dc000017 	ldw	r16,0(sp)
   21f24:	dec00a04 	addi	sp,sp,40
   21f28:	f800283a 	ret
   21f2c:	1080004c 	andi	r2,r2,1
   21f30:	10006826 	beq	r2,zero,220d4 <_realloc_r+0x388>
   21f34:	900b883a 	mov	r5,r18
   21f38:	9809883a 	mov	r4,r19
   21f3c:	00211800 	call	21180 <_malloc_r>
   21f40:	1025883a 	mov	r18,r2
   21f44:	10001626 	beq	r2,zero,21fa0 <_realloc_r+0x254>
   21f48:	80bfff17 	ldw	r2,-4(r16)
   21f4c:	013fff84 	movi	r4,-2
   21f50:	90fffe04 	addi	r3,r18,-8
   21f54:	1104703a 	and	r2,r2,r4
   21f58:	a885883a 	add	r2,r21,r2
   21f5c:	10c05826 	beq	r2,r3,220c0 <_realloc_r+0x374>
   21f60:	a1bfff04 	addi	r6,r20,-4
   21f64:	30800968 	cmpgeui	r2,r6,37
   21f68:	1000651e 	bne	r2,zero,22100 <_realloc_r+0x3b4>
   21f6c:	30800530 	cmpltui	r2,r6,20
   21f70:	10003826 	beq	r2,zero,22054 <_realloc_r+0x308>
   21f74:	9005883a 	mov	r2,r18
   21f78:	8007883a 	mov	r3,r16
   21f7c:	19000017 	ldw	r4,0(r3)
   21f80:	11000015 	stw	r4,0(r2)
   21f84:	19000117 	ldw	r4,4(r3)
   21f88:	11000115 	stw	r4,4(r2)
   21f8c:	18c00217 	ldw	r3,8(r3)
   21f90:	10c00215 	stw	r3,8(r2)
   21f94:	800b883a 	mov	r5,r16
   21f98:	9809883a 	mov	r4,r19
   21f9c:	0022c080 	call	22c08 <_free_r>
   21fa0:	9809883a 	mov	r4,r19
   21fa4:	0023a500 	call	23a50 <__malloc_unlock>
   21fa8:	003fd306 	br	21ef8 <_realloc_r+0x1ac>
   21fac:	300b883a 	mov	r5,r6
   21fb0:	dfc00917 	ldw	ra,36(sp)
   21fb4:	df000817 	ldw	fp,32(sp)
   21fb8:	ddc00717 	ldw	r23,28(sp)
   21fbc:	dd800617 	ldw	r22,24(sp)
   21fc0:	dd400517 	ldw	r21,20(sp)
   21fc4:	dd000417 	ldw	r20,16(sp)
   21fc8:	dcc00317 	ldw	r19,12(sp)
   21fcc:	dc800217 	ldw	r18,8(sp)
   21fd0:	dc400117 	ldw	r17,4(sp)
   21fd4:	dc000017 	ldw	r16,0(sp)
   21fd8:	dec00a04 	addi	sp,sp,40
   21fdc:	00211801 	jmpi	21180 <_malloc_r>
   21fe0:	344cb03a 	or	r6,r6,r17
   21fe4:	a9800115 	stw	r6,4(r21)
   21fe8:	ac4b883a 	add	r5,r21,r17
   21fec:	18c00054 	ori	r3,r3,1
   21ff0:	28c00115 	stw	r3,4(r5)
   21ff4:	10c00117 	ldw	r3,4(r2)
   21ff8:	29400204 	addi	r5,r5,8
   21ffc:	9809883a 	mov	r4,r19
   22000:	18c00054 	ori	r3,r3,1
   22004:	10c00115 	stw	r3,4(r2)
   22008:	0022c080 	call	22c08 <_free_r>
   2200c:	003fb006 	br	21ed0 <_realloc_r+0x184>
   22010:	2148703a 	and	r4,r4,r5
   22014:	a10b883a 	add	r5,r20,r4
   22018:	89800404 	addi	r6,r17,16
   2201c:	29bf7716 	blt	r5,r6,21dfc <_realloc_r+0xb0>
   22020:	ac6b883a 	add	r21,r21,r17
   22024:	2c45c83a 	sub	r2,r5,r17
   22028:	bd400215 	stw	r21,8(r23)
   2202c:	10800054 	ori	r2,r2,1
   22030:	a8800115 	stw	r2,4(r21)
   22034:	80bfff17 	ldw	r2,-4(r16)
   22038:	9809883a 	mov	r4,r19
   2203c:	8025883a 	mov	r18,r16
   22040:	1080004c 	andi	r2,r2,1
   22044:	1462b03a 	or	r17,r2,r17
   22048:	847fff15 	stw	r17,-4(r16)
   2204c:	0023a500 	call	23a50 <__malloc_unlock>
   22050:	003fa906 	br	21ef8 <_realloc_r+0x1ac>
   22054:	80c00017 	ldw	r3,0(r16)
   22058:	30800728 	cmpgeui	r2,r6,28
   2205c:	90c00015 	stw	r3,0(r18)
   22060:	80c00117 	ldw	r3,4(r16)
   22064:	90c00115 	stw	r3,4(r18)
   22068:	10004f1e 	bne	r2,zero,221a8 <_realloc_r+0x45c>
   2206c:	80c00204 	addi	r3,r16,8
   22070:	90800204 	addi	r2,r18,8
   22074:	003fc106 	br	21f7c <_realloc_r+0x230>
   22078:	38800317 	ldw	r2,12(r7)
   2207c:	38c00217 	ldw	r3,8(r7)
   22080:	a1bfff04 	addi	r6,r20,-4
   22084:	31400968 	cmpgeui	r5,r6,37
   22088:	18800315 	stw	r2,12(r3)
   2208c:	10c00215 	stw	r3,8(r2)
   22090:	e0c00217 	ldw	r3,8(fp)
   22094:	e0800317 	ldw	r2,12(fp)
   22098:	e1000204 	addi	r4,fp,8
   2209c:	18800315 	stw	r2,12(r3)
   220a0:	10c00215 	stw	r3,8(r2)
   220a4:	283f6c26 	beq	r5,zero,21e58 <_realloc_r+0x10c>
   220a8:	800b883a 	mov	r5,r16
   220ac:	0021b300 	call	21b30 <memmove>
   220b0:	1021883a 	mov	r16,r2
   220b4:	b029883a 	mov	r20,r22
   220b8:	e02b883a 	mov	r21,fp
   220bc:	003f7906 	br	21ea4 <_realloc_r+0x158>
   220c0:	90bfff17 	ldw	r2,-4(r18)
   220c4:	00ffff04 	movi	r3,-4
   220c8:	10c4703a 	and	r2,r2,r3
   220cc:	a0a9883a 	add	r20,r20,r2
   220d0:	003f7406 	br	21ea4 <_realloc_r+0x158>
   220d4:	873ffe17 	ldw	fp,-8(r16)
   220d8:	af39c83a 	sub	fp,r21,fp
   220dc:	e0800117 	ldw	r2,4(fp)
   220e0:	114a703a 	and	r5,r2,r5
   220e4:	003f5106 	br	21e2c <_realloc_r+0xe0>
   220e8:	38800317 	ldw	r2,12(r7)
   220ec:	38c00217 	ldw	r3,8(r7)
   220f0:	2829883a 	mov	r20,r5
   220f4:	18800315 	stw	r2,12(r3)
   220f8:	10c00215 	stw	r3,8(r2)
   220fc:	003f6906 	br	21ea4 <_realloc_r+0x158>
   22100:	800b883a 	mov	r5,r16
   22104:	9009883a 	mov	r4,r18
   22108:	0021b300 	call	21b30 <memmove>
   2210c:	003fa106 	br	21f94 <_realloc_r+0x248>
   22110:	88800404 	addi	r2,r17,16
   22114:	b0bf4516 	blt	r22,r2,21e2c <_realloc_r+0xe0>
   22118:	e0800317 	ldw	r2,12(fp)
   2211c:	e0c00217 	ldw	r3,8(fp)
   22120:	a1bfff04 	addi	r6,r20,-4
   22124:	31000968 	cmpgeui	r4,r6,37
   22128:	18800315 	stw	r2,12(r3)
   2212c:	10c00215 	stw	r3,8(r2)
   22130:	e4800204 	addi	r18,fp,8
   22134:	2000391e 	bne	r4,zero,2221c <_realloc_r+0x4d0>
   22138:	30800530 	cmpltui	r2,r6,20
   2213c:	1000351e 	bne	r2,zero,22214 <_realloc_r+0x4c8>
   22140:	80c00017 	ldw	r3,0(r16)
   22144:	30800728 	cmpgeui	r2,r6,28
   22148:	e0c00215 	stw	r3,8(fp)
   2214c:	80c00117 	ldw	r3,4(r16)
   22150:	e0c00315 	stw	r3,12(fp)
   22154:	10003c1e 	bne	r2,zero,22248 <_realloc_r+0x4fc>
   22158:	84000204 	addi	r16,r16,8
   2215c:	e0800404 	addi	r2,fp,16
   22160:	80c00017 	ldw	r3,0(r16)
   22164:	10c00015 	stw	r3,0(r2)
   22168:	80c00117 	ldw	r3,4(r16)
   2216c:	10c00115 	stw	r3,4(r2)
   22170:	80c00217 	ldw	r3,8(r16)
   22174:	10c00215 	stw	r3,8(r2)
   22178:	e447883a 	add	r3,fp,r17
   2217c:	b445c83a 	sub	r2,r22,r17
   22180:	b8c00215 	stw	r3,8(r23)
   22184:	10800054 	ori	r2,r2,1
   22188:	18800115 	stw	r2,4(r3)
   2218c:	e0800117 	ldw	r2,4(fp)
   22190:	9809883a 	mov	r4,r19
   22194:	1080004c 	andi	r2,r2,1
   22198:	1462b03a 	or	r17,r2,r17
   2219c:	e4400115 	stw	r17,4(fp)
   221a0:	0023a500 	call	23a50 <__malloc_unlock>
   221a4:	003f5406 	br	21ef8 <_realloc_r+0x1ac>
   221a8:	80800217 	ldw	r2,8(r16)
   221ac:	31800920 	cmpeqi	r6,r6,36
   221b0:	90800215 	stw	r2,8(r18)
   221b4:	80800317 	ldw	r2,12(r16)
   221b8:	90800315 	stw	r2,12(r18)
   221bc:	30000e1e 	bne	r6,zero,221f8 <_realloc_r+0x4ac>
   221c0:	80c00404 	addi	r3,r16,16
   221c4:	90800404 	addi	r2,r18,16
   221c8:	003f6c06 	br	21f7c <_realloc_r+0x230>
   221cc:	2005883a 	mov	r2,r4
   221d0:	003f2b06 	br	21e80 <_realloc_r+0x134>
   221d4:	80800217 	ldw	r2,8(r16)
   221d8:	31800920 	cmpeqi	r6,r6,36
   221dc:	e0800415 	stw	r2,16(fp)
   221e0:	80800317 	ldw	r2,12(r16)
   221e4:	e0800515 	stw	r2,20(fp)
   221e8:	3000101e 	bne	r6,zero,2222c <_realloc_r+0x4e0>
   221ec:	84000404 	addi	r16,r16,16
   221f0:	e0800604 	addi	r2,fp,24
   221f4:	003f2206 	br	21e80 <_realloc_r+0x134>
   221f8:	81000417 	ldw	r4,16(r16)
   221fc:	80c00604 	addi	r3,r16,24
   22200:	90800604 	addi	r2,r18,24
   22204:	91000415 	stw	r4,16(r18)
   22208:	81000517 	ldw	r4,20(r16)
   2220c:	91000515 	stw	r4,20(r18)
   22210:	003f5a06 	br	21f7c <_realloc_r+0x230>
   22214:	9005883a 	mov	r2,r18
   22218:	003fd106 	br	22160 <_realloc_r+0x414>
   2221c:	800b883a 	mov	r5,r16
   22220:	9009883a 	mov	r4,r18
   22224:	0021b300 	call	21b30 <memmove>
   22228:	003fd306 	br	22178 <_realloc_r+0x42c>
   2222c:	80c00417 	ldw	r3,16(r16)
   22230:	84000604 	addi	r16,r16,24
   22234:	e0800804 	addi	r2,fp,32
   22238:	e0c00615 	stw	r3,24(fp)
   2223c:	80ffff17 	ldw	r3,-4(r16)
   22240:	e0c00715 	stw	r3,28(fp)
   22244:	003f0e06 	br	21e80 <_realloc_r+0x134>
   22248:	80800217 	ldw	r2,8(r16)
   2224c:	31800920 	cmpeqi	r6,r6,36
   22250:	e0800415 	stw	r2,16(fp)
   22254:	80800317 	ldw	r2,12(r16)
   22258:	e0800515 	stw	r2,20(fp)
   2225c:	3000031e 	bne	r6,zero,2226c <_realloc_r+0x520>
   22260:	84000404 	addi	r16,r16,16
   22264:	e0800604 	addi	r2,fp,24
   22268:	003fbd06 	br	22160 <_realloc_r+0x414>
   2226c:	80c00417 	ldw	r3,16(r16)
   22270:	84000604 	addi	r16,r16,24
   22274:	e0800804 	addi	r2,fp,32
   22278:	e0c00615 	stw	r3,24(fp)
   2227c:	80ffff17 	ldw	r3,-4(r16)
   22280:	e0c00715 	stw	r3,28(fp)
   22284:	003fb606 	br	22160 <_realloc_r+0x414>

00022288 <_sbrk_r>:
   22288:	defffe04 	addi	sp,sp,-8
   2228c:	dc000015 	stw	r16,0(sp)
   22290:	008000f4 	movhi	r2,3
   22294:	2021883a 	mov	r16,r4
   22298:	2809883a 	mov	r4,r5
   2229c:	dfc00115 	stw	ra,4(sp)
   222a0:	10241915 	stw	zero,-28572(r2)
   222a4:	0023c280 	call	23c28 <sbrk>
   222a8:	10ffffd8 	cmpnei	r3,r2,-1
   222ac:	18000426 	beq	r3,zero,222c0 <_sbrk_r+0x38>
   222b0:	dfc00117 	ldw	ra,4(sp)
   222b4:	dc000017 	ldw	r16,0(sp)
   222b8:	dec00204 	addi	sp,sp,8
   222bc:	f800283a 	ret
   222c0:	00c000f4 	movhi	r3,3
   222c4:	18e41917 	ldw	r3,-28572(r3)
   222c8:	183ff926 	beq	r3,zero,222b0 <_sbrk_r+0x28>
   222cc:	80c00015 	stw	r3,0(r16)
   222d0:	dfc00117 	ldw	ra,4(sp)
   222d4:	dc000017 	ldw	r16,0(sp)
   222d8:	dec00204 	addi	sp,sp,8
   222dc:	f800283a 	ret

000222e0 <__sread>:
   222e0:	defffe04 	addi	sp,sp,-8
   222e4:	dc000015 	stw	r16,0(sp)
   222e8:	2821883a 	mov	r16,r5
   222ec:	2940038f 	ldh	r5,14(r5)
   222f0:	dfc00115 	stw	ra,4(sp)
   222f4:	00231b00 	call	231b0 <_read_r>
   222f8:	10000716 	blt	r2,zero,22318 <__sread+0x38>
   222fc:	80c01417 	ldw	r3,80(r16)
   22300:	1887883a 	add	r3,r3,r2
   22304:	80c01415 	stw	r3,80(r16)
   22308:	dfc00117 	ldw	ra,4(sp)
   2230c:	dc000017 	ldw	r16,0(sp)
   22310:	dec00204 	addi	sp,sp,8
   22314:	f800283a 	ret
   22318:	80c0030b 	ldhu	r3,12(r16)
   2231c:	18fbffcc 	andi	r3,r3,61439
   22320:	80c0030d 	sth	r3,12(r16)
   22324:	dfc00117 	ldw	ra,4(sp)
   22328:	dc000017 	ldw	r16,0(sp)
   2232c:	dec00204 	addi	sp,sp,8
   22330:	f800283a 	ret

00022334 <__seofread>:
   22334:	0005883a 	mov	r2,zero
   22338:	f800283a 	ret

0002233c <__swrite>:
   2233c:	2880030b 	ldhu	r2,12(r5)
   22340:	defffb04 	addi	sp,sp,-20
   22344:	dcc00315 	stw	r19,12(sp)
   22348:	dc800215 	stw	r18,8(sp)
   2234c:	dc400115 	stw	r17,4(sp)
   22350:	dc000015 	stw	r16,0(sp)
   22354:	dfc00415 	stw	ra,16(sp)
   22358:	10c0400c 	andi	r3,r2,256
   2235c:	2821883a 	mov	r16,r5
   22360:	2023883a 	mov	r17,r4
   22364:	3025883a 	mov	r18,r6
   22368:	3827883a 	mov	r19,r7
   2236c:	18000d1e 	bne	r3,zero,223a4 <__swrite+0x68>
   22370:	8140038f 	ldh	r5,14(r16)
   22374:	10bbffcc 	andi	r2,r2,61439
   22378:	980f883a 	mov	r7,r19
   2237c:	900d883a 	mov	r6,r18
   22380:	8809883a 	mov	r4,r17
   22384:	8080030d 	sth	r2,12(r16)
   22388:	dfc00417 	ldw	ra,16(sp)
   2238c:	dcc00317 	ldw	r19,12(sp)
   22390:	dc800217 	ldw	r18,8(sp)
   22394:	dc400117 	ldw	r17,4(sp)
   22398:	dc000017 	ldw	r16,0(sp)
   2239c:	dec00504 	addi	sp,sp,20
   223a0:	00224201 	jmpi	22420 <_write_r>
   223a4:	2940038f 	ldh	r5,14(r5)
   223a8:	01c00084 	movi	r7,2
   223ac:	000d883a 	mov	r6,zero
   223b0:	0022f040 	call	22f04 <_lseek_r>
   223b4:	8080030b 	ldhu	r2,12(r16)
   223b8:	003fed06 	br	22370 <__swrite+0x34>

000223bc <__sseek>:
   223bc:	defffe04 	addi	sp,sp,-8
   223c0:	dc000015 	stw	r16,0(sp)
   223c4:	2821883a 	mov	r16,r5
   223c8:	2940038f 	ldh	r5,14(r5)
   223cc:	dfc00115 	stw	ra,4(sp)
   223d0:	0022f040 	call	22f04 <_lseek_r>
   223d4:	10ffffd8 	cmpnei	r3,r2,-1
   223d8:	18000826 	beq	r3,zero,223fc <__sseek+0x40>
   223dc:	80c0030b 	ldhu	r3,12(r16)
   223e0:	80801415 	stw	r2,80(r16)
   223e4:	18c40014 	ori	r3,r3,4096
   223e8:	80c0030d 	sth	r3,12(r16)
   223ec:	dfc00117 	ldw	ra,4(sp)
   223f0:	dc000017 	ldw	r16,0(sp)
   223f4:	dec00204 	addi	sp,sp,8
   223f8:	f800283a 	ret
   223fc:	80c0030b 	ldhu	r3,12(r16)
   22400:	18fbffcc 	andi	r3,r3,61439
   22404:	80c0030d 	sth	r3,12(r16)
   22408:	dfc00117 	ldw	ra,4(sp)
   2240c:	dc000017 	ldw	r16,0(sp)
   22410:	dec00204 	addi	sp,sp,8
   22414:	f800283a 	ret

00022418 <__sclose>:
   22418:	2940038f 	ldh	r5,14(r5)
   2241c:	00225e81 	jmpi	225e8 <_close_r>

00022420 <_write_r>:
   22420:	2807883a 	mov	r3,r5
   22424:	defffe04 	addi	sp,sp,-8
   22428:	dc000015 	stw	r16,0(sp)
   2242c:	300b883a 	mov	r5,r6
   22430:	008000f4 	movhi	r2,3
   22434:	380d883a 	mov	r6,r7
   22438:	2021883a 	mov	r16,r4
   2243c:	1809883a 	mov	r4,r3
   22440:	dfc00115 	stw	ra,4(sp)
   22444:	10241915 	stw	zero,-28572(r2)
   22448:	0023dd40 	call	23dd4 <write>
   2244c:	10ffffd8 	cmpnei	r3,r2,-1
   22450:	18000426 	beq	r3,zero,22464 <_write_r+0x44>
   22454:	dfc00117 	ldw	ra,4(sp)
   22458:	dc000017 	ldw	r16,0(sp)
   2245c:	dec00204 	addi	sp,sp,8
   22460:	f800283a 	ret
   22464:	00c000f4 	movhi	r3,3
   22468:	18e41917 	ldw	r3,-28572(r3)
   2246c:	183ff926 	beq	r3,zero,22454 <_write_r+0x34>
   22470:	80c00015 	stw	r3,0(r16)
   22474:	dfc00117 	ldw	ra,4(sp)
   22478:	dc000017 	ldw	r16,0(sp)
   2247c:	dec00204 	addi	sp,sp,8
   22480:	f800283a 	ret

00022484 <__swsetup_r>:
   22484:	008000b4 	movhi	r2,2
   22488:	109d6e17 	ldw	r2,30136(r2)
   2248c:	defffd04 	addi	sp,sp,-12
   22490:	dc400115 	stw	r17,4(sp)
   22494:	dc000015 	stw	r16,0(sp)
   22498:	dfc00215 	stw	ra,8(sp)
   2249c:	2023883a 	mov	r17,r4
   224a0:	2821883a 	mov	r16,r5
   224a4:	10000226 	beq	r2,zero,224b0 <__swsetup_r+0x2c>
   224a8:	10c00e17 	ldw	r3,56(r2)
   224ac:	18001f26 	beq	r3,zero,2252c <__swsetup_r+0xa8>
   224b0:	8180030b 	ldhu	r6,12(r16)
   224b4:	30c0020c 	andi	r3,r6,8
   224b8:	3005883a 	mov	r2,r6
   224bc:	18002126 	beq	r3,zero,22544 <__swsetup_r+0xc0>
   224c0:	80c00417 	ldw	r3,16(r16)
   224c4:	18002826 	beq	r3,zero,22568 <__swsetup_r+0xe4>
   224c8:	1100004c 	andi	r4,r2,1
   224cc:	20000b1e 	bne	r4,zero,224fc <__swsetup_r+0x78>
   224d0:	1100008c 	andi	r4,r2,2
   224d4:	20002e1e 	bne	r4,zero,22590 <__swsetup_r+0x10c>
   224d8:	81000517 	ldw	r4,20(r16)
   224dc:	81000215 	stw	r4,8(r16)
   224e0:	18000b26 	beq	r3,zero,22510 <__swsetup_r+0x8c>
   224e4:	0005883a 	mov	r2,zero
   224e8:	dfc00217 	ldw	ra,8(sp)
   224ec:	dc400117 	ldw	r17,4(sp)
   224f0:	dc000017 	ldw	r16,0(sp)
   224f4:	dec00304 	addi	sp,sp,12
   224f8:	f800283a 	ret
   224fc:	81000517 	ldw	r4,20(r16)
   22500:	80000215 	stw	zero,8(r16)
   22504:	0109c83a 	sub	r4,zero,r4
   22508:	81000615 	stw	r4,24(r16)
   2250c:	183ff51e 	bne	r3,zero,224e4 <__swsetup_r+0x60>
   22510:	10c0200c 	andi	r3,r2,128
   22514:	0005883a 	mov	r2,zero
   22518:	183ff326 	beq	r3,zero,224e8 <__swsetup_r+0x64>
   2251c:	31801014 	ori	r6,r6,64
   22520:	8180030d 	sth	r6,12(r16)
   22524:	00bfffc4 	movi	r2,-1
   22528:	003fef06 	br	224e8 <__swsetup_r+0x64>
   2252c:	1009883a 	mov	r4,r2
   22530:	0020b640 	call	20b64 <__sinit>
   22534:	8180030b 	ldhu	r6,12(r16)
   22538:	30c0020c 	andi	r3,r6,8
   2253c:	3005883a 	mov	r2,r6
   22540:	183fdf1e 	bne	r3,zero,224c0 <__swsetup_r+0x3c>
   22544:	3080040c 	andi	r2,r6,16
   22548:	10002126 	beq	r2,zero,225d0 <__swsetup_r+0x14c>
   2254c:	3080010c 	andi	r2,r6,4
   22550:	1000111e 	bne	r2,zero,22598 <__swsetup_r+0x114>
   22554:	80c00417 	ldw	r3,16(r16)
   22558:	30800214 	ori	r2,r6,8
   2255c:	8080030d 	sth	r2,12(r16)
   22560:	100d883a 	mov	r6,r2
   22564:	183fd81e 	bne	r3,zero,224c8 <__swsetup_r+0x44>
   22568:	1100a00c 	andi	r4,r2,640
   2256c:	21008020 	cmpeqi	r4,r4,512
   22570:	203fd51e 	bne	r4,zero,224c8 <__swsetup_r+0x44>
   22574:	800b883a 	mov	r5,r16
   22578:	8809883a 	mov	r4,r17
   2257c:	0022f680 	call	22f68 <__smakebuf_r>
   22580:	8180030b 	ldhu	r6,12(r16)
   22584:	80c00417 	ldw	r3,16(r16)
   22588:	3005883a 	mov	r2,r6
   2258c:	003fce06 	br	224c8 <__swsetup_r+0x44>
   22590:	0009883a 	mov	r4,zero
   22594:	003fd106 	br	224dc <__swsetup_r+0x58>
   22598:	81400c17 	ldw	r5,48(r16)
   2259c:	28000626 	beq	r5,zero,225b8 <__swsetup_r+0x134>
   225a0:	80801004 	addi	r2,r16,64
   225a4:	28800326 	beq	r5,r2,225b4 <__swsetup_r+0x130>
   225a8:	8809883a 	mov	r4,r17
   225ac:	0022c080 	call	22c08 <_free_r>
   225b0:	8180030b 	ldhu	r6,12(r16)
   225b4:	80000c15 	stw	zero,48(r16)
   225b8:	80c00417 	ldw	r3,16(r16)
   225bc:	00bff6c4 	movi	r2,-37
   225c0:	118c703a 	and	r6,r2,r6
   225c4:	80000115 	stw	zero,4(r16)
   225c8:	80c00015 	stw	r3,0(r16)
   225cc:	003fe206 	br	22558 <__swsetup_r+0xd4>
   225d0:	00800244 	movi	r2,9
   225d4:	88800015 	stw	r2,0(r17)
   225d8:	31801014 	ori	r6,r6,64
   225dc:	8180030d 	sth	r6,12(r16)
   225e0:	00bfffc4 	movi	r2,-1
   225e4:	003fc006 	br	224e8 <__swsetup_r+0x64>

000225e8 <_close_r>:
   225e8:	defffe04 	addi	sp,sp,-8
   225ec:	dc000015 	stw	r16,0(sp)
   225f0:	008000f4 	movhi	r2,3
   225f4:	2021883a 	mov	r16,r4
   225f8:	2809883a 	mov	r4,r5
   225fc:	dfc00115 	stw	ra,4(sp)
   22600:	10241915 	stw	zero,-28572(r2)
   22604:	00234bc0 	call	234bc <close>
   22608:	10ffffd8 	cmpnei	r3,r2,-1
   2260c:	18000426 	beq	r3,zero,22620 <_close_r+0x38>
   22610:	dfc00117 	ldw	ra,4(sp)
   22614:	dc000017 	ldw	r16,0(sp)
   22618:	dec00204 	addi	sp,sp,8
   2261c:	f800283a 	ret
   22620:	00c000f4 	movhi	r3,3
   22624:	18e41917 	ldw	r3,-28572(r3)
   22628:	183ff926 	beq	r3,zero,22610 <_close_r+0x28>
   2262c:	80c00015 	stw	r3,0(r16)
   22630:	dfc00117 	ldw	ra,4(sp)
   22634:	dc000017 	ldw	r16,0(sp)
   22638:	dec00204 	addi	sp,sp,8
   2263c:	f800283a 	ret

00022640 <_fclose_r.part.0>:
   22640:	defffc04 	addi	sp,sp,-16
   22644:	dc800215 	stw	r18,8(sp)
   22648:	dc400115 	stw	r17,4(sp)
   2264c:	dc000015 	stw	r16,0(sp)
   22650:	dfc00315 	stw	ra,12(sp)
   22654:	2821883a 	mov	r16,r5
   22658:	2023883a 	mov	r17,r4
   2265c:	00227e00 	call	227e0 <__sflush_r>
   22660:	80c00b17 	ldw	r3,44(r16)
   22664:	1025883a 	mov	r18,r2
   22668:	18000426 	beq	r3,zero,2267c <_fclose_r.part.0+0x3c>
   2266c:	81400717 	ldw	r5,28(r16)
   22670:	8809883a 	mov	r4,r17
   22674:	183ee83a 	callr	r3
   22678:	10001916 	blt	r2,zero,226e0 <_fclose_r.part.0+0xa0>
   2267c:	8080030b 	ldhu	r2,12(r16)
   22680:	1080200c 	andi	r2,r2,128
   22684:	10001a1e 	bne	r2,zero,226f0 <_fclose_r.part.0+0xb0>
   22688:	81400c17 	ldw	r5,48(r16)
   2268c:	28000526 	beq	r5,zero,226a4 <_fclose_r.part.0+0x64>
   22690:	80801004 	addi	r2,r16,64
   22694:	28800226 	beq	r5,r2,226a0 <_fclose_r.part.0+0x60>
   22698:	8809883a 	mov	r4,r17
   2269c:	0022c080 	call	22c08 <_free_r>
   226a0:	80000c15 	stw	zero,48(r16)
   226a4:	81401117 	ldw	r5,68(r16)
   226a8:	28000326 	beq	r5,zero,226b8 <_fclose_r.part.0+0x78>
   226ac:	8809883a 	mov	r4,r17
   226b0:	0022c080 	call	22c08 <_free_r>
   226b4:	80001115 	stw	zero,68(r16)
   226b8:	0020b740 	call	20b74 <__sfp_lock_acquire>
   226bc:	8000030d 	sth	zero,12(r16)
   226c0:	0020b780 	call	20b78 <__sfp_lock_release>
   226c4:	9005883a 	mov	r2,r18
   226c8:	dfc00317 	ldw	ra,12(sp)
   226cc:	dc800217 	ldw	r18,8(sp)
   226d0:	dc400117 	ldw	r17,4(sp)
   226d4:	dc000017 	ldw	r16,0(sp)
   226d8:	dec00404 	addi	sp,sp,16
   226dc:	f800283a 	ret
   226e0:	8080030b 	ldhu	r2,12(r16)
   226e4:	04bfffc4 	movi	r18,-1
   226e8:	1080200c 	andi	r2,r2,128
   226ec:	103fe626 	beq	r2,zero,22688 <_fclose_r.part.0+0x48>
   226f0:	81400417 	ldw	r5,16(r16)
   226f4:	8809883a 	mov	r4,r17
   226f8:	0022c080 	call	22c08 <_free_r>
   226fc:	003fe206 	br	22688 <_fclose_r.part.0+0x48>

00022700 <_fclose_r>:
   22700:	28001926 	beq	r5,zero,22768 <_fclose_r+0x68>
   22704:	defffd04 	addi	sp,sp,-12
   22708:	dc000115 	stw	r16,4(sp)
   2270c:	dfc00215 	stw	ra,8(sp)
   22710:	2021883a 	mov	r16,r4
   22714:	20000226 	beq	r4,zero,22720 <_fclose_r+0x20>
   22718:	20800e17 	ldw	r2,56(r4)
   2271c:	10000c26 	beq	r2,zero,22750 <_fclose_r+0x50>
   22720:	2880030f 	ldh	r2,12(r5)
   22724:	1000051e 	bne	r2,zero,2273c <_fclose_r+0x3c>
   22728:	0005883a 	mov	r2,zero
   2272c:	dfc00217 	ldw	ra,8(sp)
   22730:	dc000117 	ldw	r16,4(sp)
   22734:	dec00304 	addi	sp,sp,12
   22738:	f800283a 	ret
   2273c:	8009883a 	mov	r4,r16
   22740:	dfc00217 	ldw	ra,8(sp)
   22744:	dc000117 	ldw	r16,4(sp)
   22748:	dec00304 	addi	sp,sp,12
   2274c:	00226401 	jmpi	22640 <_fclose_r.part.0>
   22750:	d9400015 	stw	r5,0(sp)
   22754:	0020b640 	call	20b64 <__sinit>
   22758:	d9400017 	ldw	r5,0(sp)
   2275c:	2880030f 	ldh	r2,12(r5)
   22760:	103ff126 	beq	r2,zero,22728 <_fclose_r+0x28>
   22764:	003ff506 	br	2273c <_fclose_r+0x3c>
   22768:	0005883a 	mov	r2,zero
   2276c:	f800283a 	ret

00022770 <fclose>:
   22770:	20000826 	beq	r4,zero,22794 <fclose+0x24>
   22774:	008000b4 	movhi	r2,2
   22778:	200b883a 	mov	r5,r4
   2277c:	111d6e17 	ldw	r4,30136(r2)
   22780:	20000226 	beq	r4,zero,2278c <fclose+0x1c>
   22784:	20800e17 	ldw	r2,56(r4)
   22788:	10000526 	beq	r2,zero,227a0 <fclose+0x30>
   2278c:	2880030f 	ldh	r2,12(r5)
   22790:	1000021e 	bne	r2,zero,2279c <fclose+0x2c>
   22794:	0005883a 	mov	r2,zero
   22798:	f800283a 	ret
   2279c:	00226401 	jmpi	22640 <_fclose_r.part.0>
   227a0:	defffd04 	addi	sp,sp,-12
   227a4:	d9400115 	stw	r5,4(sp)
   227a8:	d9000015 	stw	r4,0(sp)
   227ac:	dfc00215 	stw	ra,8(sp)
   227b0:	0020b640 	call	20b64 <__sinit>
   227b4:	d9400117 	ldw	r5,4(sp)
   227b8:	d9000017 	ldw	r4,0(sp)
   227bc:	2880030f 	ldh	r2,12(r5)
   227c0:	10000326 	beq	r2,zero,227d0 <fclose+0x60>
   227c4:	dfc00217 	ldw	ra,8(sp)
   227c8:	dec00304 	addi	sp,sp,12
   227cc:	00226401 	jmpi	22640 <_fclose_r.part.0>
   227d0:	0005883a 	mov	r2,zero
   227d4:	dfc00217 	ldw	ra,8(sp)
   227d8:	dec00304 	addi	sp,sp,12
   227dc:	f800283a 	ret

000227e0 <__sflush_r>:
   227e0:	2880030b 	ldhu	r2,12(r5)
   227e4:	defffb04 	addi	sp,sp,-20
   227e8:	dcc00315 	stw	r19,12(sp)
   227ec:	dc000015 	stw	r16,0(sp)
   227f0:	dfc00415 	stw	ra,16(sp)
   227f4:	dc800215 	stw	r18,8(sp)
   227f8:	dc400115 	stw	r17,4(sp)
   227fc:	10c0020c 	andi	r3,r2,8
   22800:	2821883a 	mov	r16,r5
   22804:	2027883a 	mov	r19,r4
   22808:	18003f1e 	bne	r3,zero,22908 <__sflush_r+0x128>
   2280c:	28c00117 	ldw	r3,4(r5)
   22810:	10820014 	ori	r2,r2,2048
   22814:	2880030d 	sth	r2,12(r5)
   22818:	00c0550e 	bge	zero,r3,22970 <__sflush_r+0x190>
   2281c:	82000a17 	ldw	r8,40(r16)
   22820:	40003126 	beq	r8,zero,228e8 <__sflush_r+0x108>
   22824:	9c400017 	ldw	r17,0(r19)
   22828:	1104000c 	andi	r4,r2,4096
   2282c:	98000015 	stw	zero,0(r19)
   22830:	1007883a 	mov	r3,r2
   22834:	2000531e 	bne	r4,zero,22984 <__sflush_r+0x1a4>
   22838:	81400717 	ldw	r5,28(r16)
   2283c:	01c00044 	movi	r7,1
   22840:	000d883a 	mov	r6,zero
   22844:	9809883a 	mov	r4,r19
   22848:	403ee83a 	callr	r8
   2284c:	10ffffd8 	cmpnei	r3,r2,-1
   22850:	18005826 	beq	r3,zero,229b4 <__sflush_r+0x1d4>
   22854:	80c0030b 	ldhu	r3,12(r16)
   22858:	82000a17 	ldw	r8,40(r16)
   2285c:	18c0010c 	andi	r3,r3,4
   22860:	18000626 	beq	r3,zero,2287c <__sflush_r+0x9c>
   22864:	81000117 	ldw	r4,4(r16)
   22868:	80c00c17 	ldw	r3,48(r16)
   2286c:	1105c83a 	sub	r2,r2,r4
   22870:	18000226 	beq	r3,zero,2287c <__sflush_r+0x9c>
   22874:	80c00f17 	ldw	r3,60(r16)
   22878:	10c5c83a 	sub	r2,r2,r3
   2287c:	81400717 	ldw	r5,28(r16)
   22880:	100d883a 	mov	r6,r2
   22884:	000f883a 	mov	r7,zero
   22888:	9809883a 	mov	r4,r19
   2288c:	403ee83a 	callr	r8
   22890:	10ffffd8 	cmpnei	r3,r2,-1
   22894:	18003d1e 	bne	r3,zero,2298c <__sflush_r+0x1ac>
   22898:	99000017 	ldw	r4,0(r19)
   2289c:	80c0030b 	ldhu	r3,12(r16)
   228a0:	20004e26 	beq	r4,zero,229dc <__sflush_r+0x1fc>
   228a4:	21400760 	cmpeqi	r5,r4,29
   228a8:	2800021e 	bne	r5,zero,228b4 <__sflush_r+0xd4>
   228ac:	210005a0 	cmpeqi	r4,r4,22
   228b0:	20002c26 	beq	r4,zero,22964 <__sflush_r+0x184>
   228b4:	80800417 	ldw	r2,16(r16)
   228b8:	18fdffcc 	andi	r3,r3,63487
   228bc:	80c0030d 	sth	r3,12(r16)
   228c0:	80000115 	stw	zero,4(r16)
   228c4:	80800015 	stw	r2,0(r16)
   228c8:	81400c17 	ldw	r5,48(r16)
   228cc:	9c400015 	stw	r17,0(r19)
   228d0:	28000526 	beq	r5,zero,228e8 <__sflush_r+0x108>
   228d4:	80801004 	addi	r2,r16,64
   228d8:	28800226 	beq	r5,r2,228e4 <__sflush_r+0x104>
   228dc:	9809883a 	mov	r4,r19
   228e0:	0022c080 	call	22c08 <_free_r>
   228e4:	80000c15 	stw	zero,48(r16)
   228e8:	0005883a 	mov	r2,zero
   228ec:	dfc00417 	ldw	ra,16(sp)
   228f0:	dcc00317 	ldw	r19,12(sp)
   228f4:	dc800217 	ldw	r18,8(sp)
   228f8:	dc400117 	ldw	r17,4(sp)
   228fc:	dc000017 	ldw	r16,0(sp)
   22900:	dec00504 	addi	sp,sp,20
   22904:	f800283a 	ret
   22908:	2c800417 	ldw	r18,16(r5)
   2290c:	903ff626 	beq	r18,zero,228e8 <__sflush_r+0x108>
   22910:	2c400017 	ldw	r17,0(r5)
   22914:	108000cc 	andi	r2,r2,3
   22918:	2c800015 	stw	r18,0(r5)
   2291c:	8ca3c83a 	sub	r17,r17,r18
   22920:	1000161e 	bne	r2,zero,2297c <__sflush_r+0x19c>
   22924:	28800517 	ldw	r2,20(r5)
   22928:	80800215 	stw	r2,8(r16)
   2292c:	04400316 	blt	zero,r17,2293c <__sflush_r+0x15c>
   22930:	003fed06 	br	228e8 <__sflush_r+0x108>
   22934:	90a5883a 	add	r18,r18,r2
   22938:	047feb0e 	bge	zero,r17,228e8 <__sflush_r+0x108>
   2293c:	80800917 	ldw	r2,36(r16)
   22940:	81400717 	ldw	r5,28(r16)
   22944:	880f883a 	mov	r7,r17
   22948:	900d883a 	mov	r6,r18
   2294c:	9809883a 	mov	r4,r19
   22950:	103ee83a 	callr	r2
   22954:	88a3c83a 	sub	r17,r17,r2
   22958:	00bff616 	blt	zero,r2,22934 <__sflush_r+0x154>
   2295c:	80c0030b 	ldhu	r3,12(r16)
   22960:	00bfffc4 	movi	r2,-1
   22964:	18c01014 	ori	r3,r3,64
   22968:	80c0030d 	sth	r3,12(r16)
   2296c:	003fdf06 	br	228ec <__sflush_r+0x10c>
   22970:	28c00f17 	ldw	r3,60(r5)
   22974:	00ffa916 	blt	zero,r3,2281c <__sflush_r+0x3c>
   22978:	003fdb06 	br	228e8 <__sflush_r+0x108>
   2297c:	0005883a 	mov	r2,zero
   22980:	003fe906 	br	22928 <__sflush_r+0x148>
   22984:	80801417 	ldw	r2,80(r16)
   22988:	003fb406 	br	2285c <__sflush_r+0x7c>
   2298c:	80c0030b 	ldhu	r3,12(r16)
   22990:	81000417 	ldw	r4,16(r16)
   22994:	80000115 	stw	zero,4(r16)
   22998:	197dffcc 	andi	r5,r3,63487
   2299c:	8140030d 	sth	r5,12(r16)
   229a0:	81000015 	stw	r4,0(r16)
   229a4:	18c4000c 	andi	r3,r3,4096
   229a8:	183fc726 	beq	r3,zero,228c8 <__sflush_r+0xe8>
   229ac:	80801415 	stw	r2,80(r16)
   229b0:	003fc506 	br	228c8 <__sflush_r+0xe8>
   229b4:	98c00017 	ldw	r3,0(r19)
   229b8:	183fa626 	beq	r3,zero,22854 <__sflush_r+0x74>
   229bc:	19000760 	cmpeqi	r4,r3,29
   229c0:	20000e1e 	bne	r4,zero,229fc <__sflush_r+0x21c>
   229c4:	18c00598 	cmpnei	r3,r3,22
   229c8:	18000c26 	beq	r3,zero,229fc <__sflush_r+0x21c>
   229cc:	80c0030b 	ldhu	r3,12(r16)
   229d0:	18c01014 	ori	r3,r3,64
   229d4:	80c0030d 	sth	r3,12(r16)
   229d8:	003fc406 	br	228ec <__sflush_r+0x10c>
   229dc:	81000417 	ldw	r4,16(r16)
   229e0:	197dffcc 	andi	r5,r3,63487
   229e4:	8140030d 	sth	r5,12(r16)
   229e8:	80000115 	stw	zero,4(r16)
   229ec:	81000015 	stw	r4,0(r16)
   229f0:	18c4000c 	andi	r3,r3,4096
   229f4:	183fb426 	beq	r3,zero,228c8 <__sflush_r+0xe8>
   229f8:	003fec06 	br	229ac <__sflush_r+0x1cc>
   229fc:	9c400015 	stw	r17,0(r19)
   22a00:	0005883a 	mov	r2,zero
   22a04:	003fb906 	br	228ec <__sflush_r+0x10c>

00022a08 <_fflush_r>:
   22a08:	defffd04 	addi	sp,sp,-12
   22a0c:	dc000115 	stw	r16,4(sp)
   22a10:	dfc00215 	stw	ra,8(sp)
   22a14:	2021883a 	mov	r16,r4
   22a18:	20000226 	beq	r4,zero,22a24 <_fflush_r+0x1c>
   22a1c:	20800e17 	ldw	r2,56(r4)
   22a20:	10000726 	beq	r2,zero,22a40 <_fflush_r+0x38>
   22a24:	2880030f 	ldh	r2,12(r5)
   22a28:	10000a1e 	bne	r2,zero,22a54 <_fflush_r+0x4c>
   22a2c:	0005883a 	mov	r2,zero
   22a30:	dfc00217 	ldw	ra,8(sp)
   22a34:	dc000117 	ldw	r16,4(sp)
   22a38:	dec00304 	addi	sp,sp,12
   22a3c:	f800283a 	ret
   22a40:	d9400015 	stw	r5,0(sp)
   22a44:	0020b640 	call	20b64 <__sinit>
   22a48:	d9400017 	ldw	r5,0(sp)
   22a4c:	2880030f 	ldh	r2,12(r5)
   22a50:	103ff626 	beq	r2,zero,22a2c <_fflush_r+0x24>
   22a54:	8009883a 	mov	r4,r16
   22a58:	dfc00217 	ldw	ra,8(sp)
   22a5c:	dc000117 	ldw	r16,4(sp)
   22a60:	dec00304 	addi	sp,sp,12
   22a64:	00227e01 	jmpi	227e0 <__sflush_r>

00022a68 <fflush>:
   22a68:	20001726 	beq	r4,zero,22ac8 <fflush+0x60>
   22a6c:	008000b4 	movhi	r2,2
   22a70:	200b883a 	mov	r5,r4
   22a74:	111d6e17 	ldw	r4,30136(r2)
   22a78:	20000226 	beq	r4,zero,22a84 <fflush+0x1c>
   22a7c:	20800e17 	ldw	r2,56(r4)
   22a80:	10000526 	beq	r2,zero,22a98 <fflush+0x30>
   22a84:	2880030f 	ldh	r2,12(r5)
   22a88:	1000021e 	bne	r2,zero,22a94 <fflush+0x2c>
   22a8c:	0005883a 	mov	r2,zero
   22a90:	f800283a 	ret
   22a94:	00227e01 	jmpi	227e0 <__sflush_r>
   22a98:	defffd04 	addi	sp,sp,-12
   22a9c:	d9400115 	stw	r5,4(sp)
   22aa0:	d9000015 	stw	r4,0(sp)
   22aa4:	dfc00215 	stw	ra,8(sp)
   22aa8:	0020b640 	call	20b64 <__sinit>
   22aac:	d9400117 	ldw	r5,4(sp)
   22ab0:	d9000017 	ldw	r4,0(sp)
   22ab4:	2880030f 	ldh	r2,12(r5)
   22ab8:	10000826 	beq	r2,zero,22adc <fflush+0x74>
   22abc:	dfc00217 	ldw	ra,8(sp)
   22ac0:	dec00304 	addi	sp,sp,12
   22ac4:	00227e01 	jmpi	227e0 <__sflush_r>
   22ac8:	008000b4 	movhi	r2,2
   22acc:	111d6d17 	ldw	r4,30132(r2)
   22ad0:	014000b4 	movhi	r5,2
   22ad4:	294a8204 	addi	r5,r5,10760
   22ad8:	00210d81 	jmpi	210d8 <_fwalk_reent>
   22adc:	0005883a 	mov	r2,zero
   22ae0:	dfc00217 	ldw	ra,8(sp)
   22ae4:	dec00304 	addi	sp,sp,12
   22ae8:	f800283a 	ret

00022aec <_malloc_trim_r>:
   22aec:	defffb04 	addi	sp,sp,-20
   22af0:	dcc00315 	stw	r19,12(sp)
   22af4:	04c000b4 	movhi	r19,2
   22af8:	dc800215 	stw	r18,8(sp)
   22afc:	dc400115 	stw	r17,4(sp)
   22b00:	dc000015 	stw	r16,0(sp)
   22b04:	dfc00415 	stw	ra,16(sp)
   22b08:	2821883a 	mov	r16,r5
   22b0c:	9cd7e904 	addi	r19,r19,24484
   22b10:	2025883a 	mov	r18,r4
   22b14:	0023a2c0 	call	23a2c <__malloc_lock>
   22b18:	98800217 	ldw	r2,8(r19)
   22b1c:	14400117 	ldw	r17,4(r2)
   22b20:	00bfff04 	movi	r2,-4
   22b24:	88a2703a 	and	r17,r17,r2
   22b28:	8c21c83a 	sub	r16,r17,r16
   22b2c:	8403fbc4 	addi	r16,r16,4079
   22b30:	8020d33a 	srli	r16,r16,12
   22b34:	843fffc4 	addi	r16,r16,-1
   22b38:	8020933a 	slli	r16,r16,12
   22b3c:	80840008 	cmpgei	r2,r16,4096
   22b40:	10000626 	beq	r2,zero,22b5c <_malloc_trim_r+0x70>
   22b44:	000b883a 	mov	r5,zero
   22b48:	9009883a 	mov	r4,r18
   22b4c:	00222880 	call	22288 <_sbrk_r>
   22b50:	98c00217 	ldw	r3,8(r19)
   22b54:	1c47883a 	add	r3,r3,r17
   22b58:	10c00a26 	beq	r2,r3,22b84 <_malloc_trim_r+0x98>
   22b5c:	9009883a 	mov	r4,r18
   22b60:	0023a500 	call	23a50 <__malloc_unlock>
   22b64:	0005883a 	mov	r2,zero
   22b68:	dfc00417 	ldw	ra,16(sp)
   22b6c:	dcc00317 	ldw	r19,12(sp)
   22b70:	dc800217 	ldw	r18,8(sp)
   22b74:	dc400117 	ldw	r17,4(sp)
   22b78:	dc000017 	ldw	r16,0(sp)
   22b7c:	dec00504 	addi	sp,sp,20
   22b80:	f800283a 	ret
   22b84:	040bc83a 	sub	r5,zero,r16
   22b88:	9009883a 	mov	r4,r18
   22b8c:	00222880 	call	22288 <_sbrk_r>
   22b90:	10bfffd8 	cmpnei	r2,r2,-1
   22b94:	10000d26 	beq	r2,zero,22bcc <_malloc_trim_r+0xe0>
   22b98:	008000f4 	movhi	r2,3
   22b9c:	10a42217 	ldw	r2,-28536(r2)
   22ba0:	98c00217 	ldw	r3,8(r19)
   22ba4:	8c23c83a 	sub	r17,r17,r16
   22ba8:	8c400054 	ori	r17,r17,1
   22bac:	1421c83a 	sub	r16,r2,r16
   22bb0:	1c400115 	stw	r17,4(r3)
   22bb4:	008000f4 	movhi	r2,3
   22bb8:	9009883a 	mov	r4,r18
   22bbc:	14242215 	stw	r16,-28536(r2)
   22bc0:	0023a500 	call	23a50 <__malloc_unlock>
   22bc4:	00800044 	movi	r2,1
   22bc8:	003fe706 	br	22b68 <_malloc_trim_r+0x7c>
   22bcc:	000b883a 	mov	r5,zero
   22bd0:	9009883a 	mov	r4,r18
   22bd4:	00222880 	call	22288 <_sbrk_r>
   22bd8:	99000217 	ldw	r4,8(r19)
   22bdc:	1107c83a 	sub	r3,r2,r4
   22be0:	19400410 	cmplti	r5,r3,16
   22be4:	283fdd1e 	bne	r5,zero,22b5c <_malloc_trim_r+0x70>
   22be8:	014000b4 	movhi	r5,2
   22bec:	295d6f17 	ldw	r5,30140(r5)
   22bf0:	18c00054 	ori	r3,r3,1
   22bf4:	20c00115 	stw	r3,4(r4)
   22bf8:	1145c83a 	sub	r2,r2,r5
   22bfc:	014000f4 	movhi	r5,3
   22c00:	28a42215 	stw	r2,-28536(r5)
   22c04:	003fd506 	br	22b5c <_malloc_trim_r+0x70>

00022c08 <_free_r>:
   22c08:	28004f26 	beq	r5,zero,22d48 <_free_r+0x140>
   22c0c:	defffd04 	addi	sp,sp,-12
   22c10:	dc400115 	stw	r17,4(sp)
   22c14:	dc000015 	stw	r16,0(sp)
   22c18:	2023883a 	mov	r17,r4
   22c1c:	2821883a 	mov	r16,r5
   22c20:	dfc00215 	stw	ra,8(sp)
   22c24:	0023a2c0 	call	23a2c <__malloc_lock>
   22c28:	81ffff17 	ldw	r7,-4(r16)
   22c2c:	00bfff84 	movi	r2,-2
   22c30:	80fffe04 	addi	r3,r16,-8
   22c34:	3884703a 	and	r2,r7,r2
   22c38:	010000b4 	movhi	r4,2
   22c3c:	188d883a 	add	r6,r3,r2
   22c40:	2117e904 	addi	r4,r4,24484
   22c44:	31400117 	ldw	r5,4(r6)
   22c48:	22000217 	ldw	r8,8(r4)
   22c4c:	027fff04 	movi	r9,-4
   22c50:	2a4a703a 	and	r5,r5,r9
   22c54:	41806426 	beq	r8,r6,22de8 <_free_r+0x1e0>
   22c58:	31400115 	stw	r5,4(r6)
   22c5c:	39c0004c 	andi	r7,r7,1
   22c60:	3151883a 	add	r8,r6,r5
   22c64:	3800281e 	bne	r7,zero,22d08 <_free_r+0x100>
   22c68:	82bffe17 	ldw	r10,-8(r16)
   22c6c:	42000117 	ldw	r8,4(r8)
   22c70:	01c000b4 	movhi	r7,2
   22c74:	1a87c83a 	sub	r3,r3,r10
   22c78:	1a400217 	ldw	r9,8(r3)
   22c7c:	39d7eb04 	addi	r7,r7,24492
   22c80:	1285883a 	add	r2,r2,r10
   22c84:	4200004c 	andi	r8,r8,1
   22c88:	49c04c26 	beq	r9,r7,22dbc <_free_r+0x1b4>
   22c8c:	1a800317 	ldw	r10,12(r3)
   22c90:	4a800315 	stw	r10,12(r9)
   22c94:	52400215 	stw	r9,8(r10)
   22c98:	40007126 	beq	r8,zero,22e60 <_free_r+0x258>
   22c9c:	11400054 	ori	r5,r2,1
   22ca0:	19400115 	stw	r5,4(r3)
   22ca4:	30800015 	stw	r2,0(r6)
   22ca8:	11408028 	cmpgeui	r5,r2,512
   22cac:	28002c1e 	bne	r5,zero,22d60 <_free_r+0x158>
   22cb0:	100ad0fa 	srli	r5,r2,3
   22cb4:	100cd17a 	srli	r6,r2,5
   22cb8:	00800044 	movi	r2,1
   22cbc:	29400044 	addi	r5,r5,1
   22cc0:	280a90fa 	slli	r5,r5,3
   22cc4:	21c00117 	ldw	r7,4(r4)
   22cc8:	1184983a 	sll	r2,r2,r6
   22ccc:	214b883a 	add	r5,r4,r5
   22cd0:	29800017 	ldw	r6,0(r5)
   22cd4:	11c4b03a 	or	r2,r2,r7
   22cd8:	29fffe04 	addi	r7,r5,-8
   22cdc:	19c00315 	stw	r7,12(r3)
   22ce0:	19800215 	stw	r6,8(r3)
   22ce4:	20800115 	stw	r2,4(r4)
   22ce8:	28c00015 	stw	r3,0(r5)
   22cec:	30c00315 	stw	r3,12(r6)
   22cf0:	8809883a 	mov	r4,r17
   22cf4:	dfc00217 	ldw	ra,8(sp)
   22cf8:	dc400117 	ldw	r17,4(sp)
   22cfc:	dc000017 	ldw	r16,0(sp)
   22d00:	dec00304 	addi	sp,sp,12
   22d04:	0023a501 	jmpi	23a50 <__malloc_unlock>
   22d08:	41c00117 	ldw	r7,4(r8)
   22d0c:	39c0004c 	andi	r7,r7,1
   22d10:	38000e1e 	bne	r7,zero,22d4c <_free_r+0x144>
   22d14:	01c000b4 	movhi	r7,2
   22d18:	1145883a 	add	r2,r2,r5
   22d1c:	39d7eb04 	addi	r7,r7,24492
   22d20:	31400217 	ldw	r5,8(r6)
   22d24:	12400054 	ori	r9,r2,1
   22d28:	1891883a 	add	r8,r3,r2
   22d2c:	29c05226 	beq	r5,r7,22e78 <_free_r+0x270>
   22d30:	31800317 	ldw	r6,12(r6)
   22d34:	29800315 	stw	r6,12(r5)
   22d38:	31400215 	stw	r5,8(r6)
   22d3c:	1a400115 	stw	r9,4(r3)
   22d40:	40800015 	stw	r2,0(r8)
   22d44:	003fd806 	br	22ca8 <_free_r+0xa0>
   22d48:	f800283a 	ret
   22d4c:	11400054 	ori	r5,r2,1
   22d50:	817fff15 	stw	r5,-4(r16)
   22d54:	30800015 	stw	r2,0(r6)
   22d58:	11408028 	cmpgeui	r5,r2,512
   22d5c:	283fd426 	beq	r5,zero,22cb0 <_free_r+0xa8>
   22d60:	100ad27a 	srli	r5,r2,9
   22d64:	29800168 	cmpgeui	r6,r5,5
   22d68:	3000341e 	bne	r6,zero,22e3c <_free_r+0x234>
   22d6c:	100ad1ba 	srli	r5,r2,6
   22d70:	29800e44 	addi	r6,r5,57
   22d74:	300c90fa 	slli	r6,r6,3
   22d78:	29c00e04 	addi	r7,r5,56
   22d7c:	218d883a 	add	r6,r4,r6
   22d80:	31400017 	ldw	r5,0(r6)
   22d84:	31bffe04 	addi	r6,r6,-8
   22d88:	31404226 	beq	r6,r5,22e94 <_free_r+0x28c>
   22d8c:	01ffff04 	movi	r7,-4
   22d90:	29000117 	ldw	r4,4(r5)
   22d94:	21c8703a 	and	r4,r4,r7
   22d98:	1100022e 	bgeu	r2,r4,22da4 <_free_r+0x19c>
   22d9c:	29400217 	ldw	r5,8(r5)
   22da0:	317ffb1e 	bne	r6,r5,22d90 <_free_r+0x188>
   22da4:	29800317 	ldw	r6,12(r5)
   22da8:	19800315 	stw	r6,12(r3)
   22dac:	19400215 	stw	r5,8(r3)
   22db0:	30c00215 	stw	r3,8(r6)
   22db4:	28c00315 	stw	r3,12(r5)
   22db8:	003fcd06 	br	22cf0 <_free_r+0xe8>
   22dbc:	40004d1e 	bne	r8,zero,22ef4 <_free_r+0x2ec>
   22dc0:	31000317 	ldw	r4,12(r6)
   22dc4:	31800217 	ldw	r6,8(r6)
   22dc8:	2885883a 	add	r2,r5,r2
   22dcc:	11400054 	ori	r5,r2,1
   22dd0:	31000315 	stw	r4,12(r6)
   22dd4:	21800215 	stw	r6,8(r4)
   22dd8:	19400115 	stw	r5,4(r3)
   22ddc:	1887883a 	add	r3,r3,r2
   22de0:	18800015 	stw	r2,0(r3)
   22de4:	003fc206 	br	22cf0 <_free_r+0xe8>
   22de8:	39c0004c 	andi	r7,r7,1
   22dec:	1145883a 	add	r2,r2,r5
   22df0:	3800071e 	bne	r7,zero,22e10 <_free_r+0x208>
   22df4:	81fffe17 	ldw	r7,-8(r16)
   22df8:	19c7c83a 	sub	r3,r3,r7
   22dfc:	19400317 	ldw	r5,12(r3)
   22e00:	19800217 	ldw	r6,8(r3)
   22e04:	11c5883a 	add	r2,r2,r7
   22e08:	31400315 	stw	r5,12(r6)
   22e0c:	29800215 	stw	r6,8(r5)
   22e10:	014000b4 	movhi	r5,2
   22e14:	11800054 	ori	r6,r2,1
   22e18:	295d7017 	ldw	r5,30144(r5)
   22e1c:	19800115 	stw	r6,4(r3)
   22e20:	20c00215 	stw	r3,8(r4)
   22e24:	117fb236 	bltu	r2,r5,22cf0 <_free_r+0xe8>
   22e28:	008000f4 	movhi	r2,3
   22e2c:	11641817 	ldw	r5,-28576(r2)
   22e30:	8809883a 	mov	r4,r17
   22e34:	0022aec0 	call	22aec <_malloc_trim_r>
   22e38:	003fad06 	br	22cf0 <_free_r+0xe8>
   22e3c:	29800568 	cmpgeui	r6,r5,21
   22e40:	30000926 	beq	r6,zero,22e68 <_free_r+0x260>
   22e44:	29801568 	cmpgeui	r6,r5,85
   22e48:	3000191e 	bne	r6,zero,22eb0 <_free_r+0x2a8>
   22e4c:	100ad33a 	srli	r5,r2,12
   22e50:	29801bc4 	addi	r6,r5,111
   22e54:	300c90fa 	slli	r6,r6,3
   22e58:	29c01b84 	addi	r7,r5,110
   22e5c:	003fc706 	br	22d7c <_free_r+0x174>
   22e60:	1145883a 	add	r2,r2,r5
   22e64:	003fae06 	br	22d20 <_free_r+0x118>
   22e68:	29801704 	addi	r6,r5,92
   22e6c:	300c90fa 	slli	r6,r6,3
   22e70:	29c016c4 	addi	r7,r5,91
   22e74:	003fc106 	br	22d7c <_free_r+0x174>
   22e78:	20c00515 	stw	r3,20(r4)
   22e7c:	20c00415 	stw	r3,16(r4)
   22e80:	19c00315 	stw	r7,12(r3)
   22e84:	19c00215 	stw	r7,8(r3)
   22e88:	1a400115 	stw	r9,4(r3)
   22e8c:	40800015 	stw	r2,0(r8)
   22e90:	003f9706 	br	22cf0 <_free_r+0xe8>
   22e94:	380fd0ba 	srai	r7,r7,2
   22e98:	00800044 	movi	r2,1
   22e9c:	22000117 	ldw	r8,4(r4)
   22ea0:	11ce983a 	sll	r7,r2,r7
   22ea4:	3a0eb03a 	or	r7,r7,r8
   22ea8:	21c00115 	stw	r7,4(r4)
   22eac:	003fbe06 	br	22da8 <_free_r+0x1a0>
   22eb0:	29805568 	cmpgeui	r6,r5,341
   22eb4:	3000051e 	bne	r6,zero,22ecc <_free_r+0x2c4>
   22eb8:	100ad3fa 	srli	r5,r2,15
   22ebc:	29801e04 	addi	r6,r5,120
   22ec0:	300c90fa 	slli	r6,r6,3
   22ec4:	29c01dc4 	addi	r7,r5,119
   22ec8:	003fac06 	br	22d7c <_free_r+0x174>
   22ecc:	29415568 	cmpgeui	r5,r5,1365
   22ed0:	2800051e 	bne	r5,zero,22ee8 <_free_r+0x2e0>
   22ed4:	100ad4ba 	srli	r5,r2,18
   22ed8:	29801f44 	addi	r6,r5,125
   22edc:	300c90fa 	slli	r6,r6,3
   22ee0:	29c01f04 	addi	r7,r5,124
   22ee4:	003fa506 	br	22d7c <_free_r+0x174>
   22ee8:	0180fe04 	movi	r6,1016
   22eec:	01c01f84 	movi	r7,126
   22ef0:	003fa206 	br	22d7c <_free_r+0x174>
   22ef4:	11000054 	ori	r4,r2,1
   22ef8:	19000115 	stw	r4,4(r3)
   22efc:	30800015 	stw	r2,0(r6)
   22f00:	003f7b06 	br	22cf0 <_free_r+0xe8>

00022f04 <_lseek_r>:
   22f04:	2807883a 	mov	r3,r5
   22f08:	defffe04 	addi	sp,sp,-8
   22f0c:	dc000015 	stw	r16,0(sp)
   22f10:	300b883a 	mov	r5,r6
   22f14:	008000f4 	movhi	r2,3
   22f18:	380d883a 	mov	r6,r7
   22f1c:	2021883a 	mov	r16,r4
   22f20:	1809883a 	mov	r4,r3
   22f24:	dfc00115 	stw	ra,4(sp)
   22f28:	10241915 	stw	zero,-28572(r2)
   22f2c:	00238d00 	call	238d0 <lseek>
   22f30:	10ffffd8 	cmpnei	r3,r2,-1
   22f34:	18000426 	beq	r3,zero,22f48 <_lseek_r+0x44>
   22f38:	dfc00117 	ldw	ra,4(sp)
   22f3c:	dc000017 	ldw	r16,0(sp)
   22f40:	dec00204 	addi	sp,sp,8
   22f44:	f800283a 	ret
   22f48:	00c000f4 	movhi	r3,3
   22f4c:	18e41917 	ldw	r3,-28572(r3)
   22f50:	183ff926 	beq	r3,zero,22f38 <_lseek_r+0x34>
   22f54:	80c00015 	stw	r3,0(r16)
   22f58:	dfc00117 	ldw	ra,4(sp)
   22f5c:	dc000017 	ldw	r16,0(sp)
   22f60:	dec00204 	addi	sp,sp,8
   22f64:	f800283a 	ret

00022f68 <__smakebuf_r>:
   22f68:	2880030b 	ldhu	r2,12(r5)
   22f6c:	deffe804 	addi	sp,sp,-96
   22f70:	dc001215 	stw	r16,72(sp)
   22f74:	dfc01715 	stw	ra,92(sp)
   22f78:	dd001615 	stw	r20,88(sp)
   22f7c:	dcc01515 	stw	r19,84(sp)
   22f80:	dc801415 	stw	r18,80(sp)
   22f84:	dc401315 	stw	r17,76(sp)
   22f88:	10c0008c 	andi	r3,r2,2
   22f8c:	2821883a 	mov	r16,r5
   22f90:	18000d26 	beq	r3,zero,22fc8 <__smakebuf_r+0x60>
   22f94:	288010c4 	addi	r2,r5,67
   22f98:	28800015 	stw	r2,0(r5)
   22f9c:	28800415 	stw	r2,16(r5)
   22fa0:	00800044 	movi	r2,1
   22fa4:	28800515 	stw	r2,20(r5)
   22fa8:	dfc01717 	ldw	ra,92(sp)
   22fac:	dd001617 	ldw	r20,88(sp)
   22fb0:	dcc01517 	ldw	r19,84(sp)
   22fb4:	dc801417 	ldw	r18,80(sp)
   22fb8:	dc401317 	ldw	r17,76(sp)
   22fbc:	dc001217 	ldw	r16,72(sp)
   22fc0:	dec01804 	addi	sp,sp,96
   22fc4:	f800283a 	ret
   22fc8:	2940038f 	ldh	r5,14(r5)
   22fcc:	2023883a 	mov	r17,r4
   22fd0:	28002816 	blt	r5,zero,23074 <__smakebuf_r+0x10c>
   22fd4:	d80d883a 	mov	r6,sp
   22fd8:	00232140 	call	23214 <_fstat_r>
   22fdc:	10002416 	blt	r2,zero,23070 <__smakebuf_r+0x108>
   22fe0:	d8800117 	ldw	r2,4(sp)
   22fe4:	10bc000c 	andi	r2,r2,61440
   22fe8:	10880018 	cmpnei	r2,r2,8192
   22fec:	1000461e 	bne	r2,zero,23108 <__smakebuf_r+0x1a0>
   22ff0:	8140038f 	ldh	r5,14(r16)
   22ff4:	8809883a 	mov	r4,r17
   22ff8:	00232740 	call	23274 <_isatty_r>
   22ffc:	10003e26 	beq	r2,zero,230f8 <__smakebuf_r+0x190>
   23000:	8080030b 	ldhu	r2,12(r16)
   23004:	80c010c4 	addi	r3,r16,67
   23008:	80c00015 	stw	r3,0(r16)
   2300c:	10800054 	ori	r2,r2,1
   23010:	8080030d 	sth	r2,12(r16)
   23014:	00800044 	movi	r2,1
   23018:	80c00415 	stw	r3,16(r16)
   2301c:	80800515 	stw	r2,20(r16)
   23020:	04c00044 	movi	r19,1
   23024:	05010004 	movi	r20,1024
   23028:	04820004 	movi	r18,2048
   2302c:	a00b883a 	mov	r5,r20
   23030:	8809883a 	mov	r4,r17
   23034:	00211800 	call	21180 <_malloc_r>
   23038:	10001726 	beq	r2,zero,23098 <__smakebuf_r+0x130>
   2303c:	80c0030b 	ldhu	r3,12(r16)
   23040:	010000b4 	movhi	r4,2
   23044:	21020204 	addi	r4,r4,2056
   23048:	89000f15 	stw	r4,60(r17)
   2304c:	18c02014 	ori	r3,r3,128
   23050:	80c0030d 	sth	r3,12(r16)
   23054:	80800015 	stw	r2,0(r16)
   23058:	80800415 	stw	r2,16(r16)
   2305c:	85000515 	stw	r20,20(r16)
   23060:	98001d1e 	bne	r19,zero,230d8 <__smakebuf_r+0x170>
   23064:	90c6b03a 	or	r3,r18,r3
   23068:	80c0030d 	sth	r3,12(r16)
   2306c:	003fce06 	br	22fa8 <__smakebuf_r+0x40>
   23070:	8080030b 	ldhu	r2,12(r16)
   23074:	1080200c 	andi	r2,r2,128
   23078:	0027883a 	mov	r19,zero
   2307c:	10001326 	beq	r2,zero,230cc <__smakebuf_r+0x164>
   23080:	05001004 	movi	r20,64
   23084:	a00b883a 	mov	r5,r20
   23088:	8809883a 	mov	r4,r17
   2308c:	0025883a 	mov	r18,zero
   23090:	00211800 	call	21180 <_malloc_r>
   23094:	103fe91e 	bne	r2,zero,2303c <__smakebuf_r+0xd4>
   23098:	8080030b 	ldhu	r2,12(r16)
   2309c:	10c0800c 	andi	r3,r2,512
   230a0:	183fc11e 	bne	r3,zero,22fa8 <__smakebuf_r+0x40>
   230a4:	00ffff04 	movi	r3,-4
   230a8:	10c4703a 	and	r2,r2,r3
   230ac:	10800094 	ori	r2,r2,2
   230b0:	80c010c4 	addi	r3,r16,67
   230b4:	8080030d 	sth	r2,12(r16)
   230b8:	00800044 	movi	r2,1
   230bc:	80c00015 	stw	r3,0(r16)
   230c0:	80c00415 	stw	r3,16(r16)
   230c4:	80800515 	stw	r2,20(r16)
   230c8:	003fb706 	br	22fa8 <__smakebuf_r+0x40>
   230cc:	05010004 	movi	r20,1024
   230d0:	0025883a 	mov	r18,zero
   230d4:	003fd506 	br	2302c <__smakebuf_r+0xc4>
   230d8:	8140038f 	ldh	r5,14(r16)
   230dc:	8809883a 	mov	r4,r17
   230e0:	00232740 	call	23274 <_isatty_r>
   230e4:	80c0030b 	ldhu	r3,12(r16)
   230e8:	103fde26 	beq	r2,zero,23064 <__smakebuf_r+0xfc>
   230ec:	18ffff0c 	andi	r3,r3,65532
   230f0:	18c00054 	ori	r3,r3,1
   230f4:	003fdb06 	br	23064 <__smakebuf_r+0xfc>
   230f8:	04c00044 	movi	r19,1
   230fc:	05010004 	movi	r20,1024
   23100:	04820004 	movi	r18,2048
   23104:	003fc906 	br	2302c <__smakebuf_r+0xc4>
   23108:	0027883a 	mov	r19,zero
   2310c:	05010004 	movi	r20,1024
   23110:	04820004 	movi	r18,2048
   23114:	003fc506 	br	2302c <__smakebuf_r+0xc4>

00023118 <__swhatbuf_r>:
   23118:	deffea04 	addi	sp,sp,-88
   2311c:	dc001215 	stw	r16,72(sp)
   23120:	2821883a 	mov	r16,r5
   23124:	2940038f 	ldh	r5,14(r5)
   23128:	dc801415 	stw	r18,80(sp)
   2312c:	dc401315 	stw	r17,76(sp)
   23130:	dfc01515 	stw	ra,84(sp)
   23134:	3023883a 	mov	r17,r6
   23138:	3825883a 	mov	r18,r7
   2313c:	28001016 	blt	r5,zero,23180 <__swhatbuf_r+0x68>
   23140:	d80d883a 	mov	r6,sp
   23144:	00232140 	call	23214 <_fstat_r>
   23148:	10000d16 	blt	r2,zero,23180 <__swhatbuf_r+0x68>
   2314c:	d8c00117 	ldw	r3,4(sp)
   23150:	00820004 	movi	r2,2048
   23154:	18fc000c 	andi	r3,r3,61440
   23158:	18c80020 	cmpeqi	r3,r3,8192
   2315c:	90c00015 	stw	r3,0(r18)
   23160:	00c10004 	movi	r3,1024
   23164:	88c00015 	stw	r3,0(r17)
   23168:	dfc01517 	ldw	ra,84(sp)
   2316c:	dc801417 	ldw	r18,80(sp)
   23170:	dc401317 	ldw	r17,76(sp)
   23174:	dc001217 	ldw	r16,72(sp)
   23178:	dec01604 	addi	sp,sp,88
   2317c:	f800283a 	ret
   23180:	8080030b 	ldhu	r2,12(r16)
   23184:	90000015 	stw	zero,0(r18)
   23188:	1080200c 	andi	r2,r2,128
   2318c:	10000426 	beq	r2,zero,231a0 <__swhatbuf_r+0x88>
   23190:	00801004 	movi	r2,64
   23194:	88800015 	stw	r2,0(r17)
   23198:	0005883a 	mov	r2,zero
   2319c:	003ff206 	br	23168 <__swhatbuf_r+0x50>
   231a0:	00810004 	movi	r2,1024
   231a4:	88800015 	stw	r2,0(r17)
   231a8:	0005883a 	mov	r2,zero
   231ac:	003fee06 	br	23168 <__swhatbuf_r+0x50>

000231b0 <_read_r>:
   231b0:	2807883a 	mov	r3,r5
   231b4:	defffe04 	addi	sp,sp,-8
   231b8:	dc000015 	stw	r16,0(sp)
   231bc:	300b883a 	mov	r5,r6
   231c0:	008000f4 	movhi	r2,3
   231c4:	380d883a 	mov	r6,r7
   231c8:	2021883a 	mov	r16,r4
   231cc:	1809883a 	mov	r4,r3
   231d0:	dfc00115 	stw	ra,4(sp)
   231d4:	10241915 	stw	zero,-28572(r2)
   231d8:	0023ab00 	call	23ab0 <read>
   231dc:	10ffffd8 	cmpnei	r3,r2,-1
   231e0:	18000426 	beq	r3,zero,231f4 <_read_r+0x44>
   231e4:	dfc00117 	ldw	ra,4(sp)
   231e8:	dc000017 	ldw	r16,0(sp)
   231ec:	dec00204 	addi	sp,sp,8
   231f0:	f800283a 	ret
   231f4:	00c000f4 	movhi	r3,3
   231f8:	18e41917 	ldw	r3,-28572(r3)
   231fc:	183ff926 	beq	r3,zero,231e4 <_read_r+0x34>
   23200:	80c00015 	stw	r3,0(r16)
   23204:	dfc00117 	ldw	ra,4(sp)
   23208:	dc000017 	ldw	r16,0(sp)
   2320c:	dec00204 	addi	sp,sp,8
   23210:	f800283a 	ret

00023214 <_fstat_r>:
   23214:	2807883a 	mov	r3,r5
   23218:	defffe04 	addi	sp,sp,-8
   2321c:	dc000015 	stw	r16,0(sp)
   23220:	008000f4 	movhi	r2,3
   23224:	300b883a 	mov	r5,r6
   23228:	2021883a 	mov	r16,r4
   2322c:	1809883a 	mov	r4,r3
   23230:	dfc00115 	stw	ra,4(sp)
   23234:	10241915 	stw	zero,-28572(r2)
   23238:	00236000 	call	23600 <fstat>
   2323c:	10ffffd8 	cmpnei	r3,r2,-1
   23240:	18000426 	beq	r3,zero,23254 <_fstat_r+0x40>
   23244:	dfc00117 	ldw	ra,4(sp)
   23248:	dc000017 	ldw	r16,0(sp)
   2324c:	dec00204 	addi	sp,sp,8
   23250:	f800283a 	ret
   23254:	00c000f4 	movhi	r3,3
   23258:	18e41917 	ldw	r3,-28572(r3)
   2325c:	183ff926 	beq	r3,zero,23244 <_fstat_r+0x30>
   23260:	80c00015 	stw	r3,0(r16)
   23264:	dfc00117 	ldw	ra,4(sp)
   23268:	dc000017 	ldw	r16,0(sp)
   2326c:	dec00204 	addi	sp,sp,8
   23270:	f800283a 	ret

00023274 <_isatty_r>:
   23274:	defffe04 	addi	sp,sp,-8
   23278:	dc000015 	stw	r16,0(sp)
   2327c:	008000f4 	movhi	r2,3
   23280:	2021883a 	mov	r16,r4
   23284:	2809883a 	mov	r4,r5
   23288:	dfc00115 	stw	ra,4(sp)
   2328c:	10241915 	stw	zero,-28572(r2)
   23290:	00236f80 	call	236f8 <isatty>
   23294:	10ffffd8 	cmpnei	r3,r2,-1
   23298:	18000426 	beq	r3,zero,232ac <_isatty_r+0x38>
   2329c:	dfc00117 	ldw	ra,4(sp)
   232a0:	dc000017 	ldw	r16,0(sp)
   232a4:	dec00204 	addi	sp,sp,8
   232a8:	f800283a 	ret
   232ac:	00c000f4 	movhi	r3,3
   232b0:	18e41917 	ldw	r3,-28572(r3)
   232b4:	183ff926 	beq	r3,zero,2329c <_isatty_r+0x28>
   232b8:	80c00015 	stw	r3,0(r16)
   232bc:	dfc00117 	ldw	ra,4(sp)
   232c0:	dc000017 	ldw	r16,0(sp)
   232c4:	dec00204 	addi	sp,sp,8
   232c8:	f800283a 	ret

000232cc <__divsi3>:
   232cc:	20001a16 	blt	r4,zero,23338 <__divsi3+0x6c>
   232d0:	000f883a 	mov	r7,zero
   232d4:	2800020e 	bge	r5,zero,232e0 <__divsi3+0x14>
   232d8:	014bc83a 	sub	r5,zero,r5
   232dc:	39c0005c 	xori	r7,r7,1
   232e0:	200d883a 	mov	r6,r4
   232e4:	00c00044 	movi	r3,1
   232e8:	2900092e 	bgeu	r5,r4,23310 <__divsi3+0x44>
   232ec:	00800804 	movi	r2,32
   232f0:	00c00044 	movi	r3,1
   232f4:	00000106 	br	232fc <__divsi3+0x30>
   232f8:	10001226 	beq	r2,zero,23344 <__divsi3+0x78>
   232fc:	294b883a 	add	r5,r5,r5
   23300:	10bfffc4 	addi	r2,r2,-1
   23304:	18c7883a 	add	r3,r3,r3
   23308:	293ffb36 	bltu	r5,r4,232f8 <__divsi3+0x2c>
   2330c:	18000d26 	beq	r3,zero,23344 <__divsi3+0x78>
   23310:	0005883a 	mov	r2,zero
   23314:	31400236 	bltu	r6,r5,23320 <__divsi3+0x54>
   23318:	314dc83a 	sub	r6,r6,r5
   2331c:	10c4b03a 	or	r2,r2,r3
   23320:	1806d07a 	srli	r3,r3,1
   23324:	280ad07a 	srli	r5,r5,1
   23328:	183ffa1e 	bne	r3,zero,23314 <__divsi3+0x48>
   2332c:	38000126 	beq	r7,zero,23334 <__divsi3+0x68>
   23330:	0085c83a 	sub	r2,zero,r2
   23334:	f800283a 	ret
   23338:	0109c83a 	sub	r4,zero,r4
   2333c:	01c00044 	movi	r7,1
   23340:	003fe406 	br	232d4 <__divsi3+0x8>
   23344:	0005883a 	mov	r2,zero
   23348:	003ff806 	br	2332c <__divsi3+0x60>

0002334c <__modsi3>:
   2334c:	20001916 	blt	r4,zero,233b4 <__modsi3+0x68>
   23350:	000f883a 	mov	r7,zero
   23354:	2005883a 	mov	r2,r4
   23358:	2800010e 	bge	r5,zero,23360 <__modsi3+0x14>
   2335c:	014bc83a 	sub	r5,zero,r5
   23360:	00c00044 	movi	r3,1
   23364:	2900092e 	bgeu	r5,r4,2338c <__modsi3+0x40>
   23368:	01800804 	movi	r6,32
   2336c:	00c00044 	movi	r3,1
   23370:	00000106 	br	23378 <__modsi3+0x2c>
   23374:	30000d26 	beq	r6,zero,233ac <__modsi3+0x60>
   23378:	294b883a 	add	r5,r5,r5
   2337c:	31bfffc4 	addi	r6,r6,-1
   23380:	18c7883a 	add	r3,r3,r3
   23384:	293ffb36 	bltu	r5,r4,23374 <__modsi3+0x28>
   23388:	18000826 	beq	r3,zero,233ac <__modsi3+0x60>
   2338c:	1806d07a 	srli	r3,r3,1
   23390:	11400136 	bltu	r2,r5,23398 <__modsi3+0x4c>
   23394:	1145c83a 	sub	r2,r2,r5
   23398:	280ad07a 	srli	r5,r5,1
   2339c:	183ffb1e 	bne	r3,zero,2338c <__modsi3+0x40>
   233a0:	38000126 	beq	r7,zero,233a8 <__modsi3+0x5c>
   233a4:	0085c83a 	sub	r2,zero,r2
   233a8:	f800283a 	ret
   233ac:	2005883a 	mov	r2,r4
   233b0:	003ffb06 	br	233a0 <__modsi3+0x54>
   233b4:	0109c83a 	sub	r4,zero,r4
   233b8:	01c00044 	movi	r7,1
   233bc:	003fe506 	br	23354 <__modsi3+0x8>

000233c0 <__udivsi3>:
   233c0:	200d883a 	mov	r6,r4
   233c4:	2900152e 	bgeu	r5,r4,2341c <__udivsi3+0x5c>
   233c8:	28001416 	blt	r5,zero,2341c <__udivsi3+0x5c>
   233cc:	00800804 	movi	r2,32
   233d0:	00c00044 	movi	r3,1
   233d4:	00000206 	br	233e0 <__udivsi3+0x20>
   233d8:	10000e26 	beq	r2,zero,23414 <__udivsi3+0x54>
   233dc:	28000516 	blt	r5,zero,233f4 <__udivsi3+0x34>
   233e0:	294b883a 	add	r5,r5,r5
   233e4:	10bfffc4 	addi	r2,r2,-1
   233e8:	18c7883a 	add	r3,r3,r3
   233ec:	293ffa36 	bltu	r5,r4,233d8 <__udivsi3+0x18>
   233f0:	18000826 	beq	r3,zero,23414 <__udivsi3+0x54>
   233f4:	0005883a 	mov	r2,zero
   233f8:	31400236 	bltu	r6,r5,23404 <__udivsi3+0x44>
   233fc:	314dc83a 	sub	r6,r6,r5
   23400:	10c4b03a 	or	r2,r2,r3
   23404:	1806d07a 	srli	r3,r3,1
   23408:	280ad07a 	srli	r5,r5,1
   2340c:	183ffa1e 	bne	r3,zero,233f8 <__udivsi3+0x38>
   23410:	f800283a 	ret
   23414:	0005883a 	mov	r2,zero
   23418:	f800283a 	ret
   2341c:	00c00044 	movi	r3,1
   23420:	003ff406 	br	233f4 <__udivsi3+0x34>

00023424 <__umodsi3>:
   23424:	2005883a 	mov	r2,r4
   23428:	2900132e 	bgeu	r5,r4,23478 <__umodsi3+0x54>
   2342c:	28001216 	blt	r5,zero,23478 <__umodsi3+0x54>
   23430:	01800804 	movi	r6,32
   23434:	00c00044 	movi	r3,1
   23438:	00000206 	br	23444 <__umodsi3+0x20>
   2343c:	30000c26 	beq	r6,zero,23470 <__umodsi3+0x4c>
   23440:	28000516 	blt	r5,zero,23458 <__umodsi3+0x34>
   23444:	294b883a 	add	r5,r5,r5
   23448:	31bfffc4 	addi	r6,r6,-1
   2344c:	18c7883a 	add	r3,r3,r3
   23450:	293ffa36 	bltu	r5,r4,2343c <__umodsi3+0x18>
   23454:	18000626 	beq	r3,zero,23470 <__umodsi3+0x4c>
   23458:	1806d07a 	srli	r3,r3,1
   2345c:	11400136 	bltu	r2,r5,23464 <__umodsi3+0x40>
   23460:	1145c83a 	sub	r2,r2,r5
   23464:	280ad07a 	srli	r5,r5,1
   23468:	183ffb1e 	bne	r3,zero,23458 <__umodsi3+0x34>
   2346c:	f800283a 	ret
   23470:	2005883a 	mov	r2,r4
   23474:	f800283a 	ret
   23478:	00c00044 	movi	r3,1
   2347c:	003ff606 	br	23458 <__umodsi3+0x34>

00023480 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23480:	defffe04 	addi	sp,sp,-8
   23484:	dfc00115 	stw	ra,4(sp)
   23488:	df000015 	stw	fp,0(sp)
   2348c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23490:	d0a00917 	ldw	r2,-32732(gp)
   23494:	10000326 	beq	r2,zero,234a4 <alt_get_errno+0x24>
   23498:	d0a00917 	ldw	r2,-32732(gp)
   2349c:	103ee83a 	callr	r2
   234a0:	00000106 	br	234a8 <alt_get_errno+0x28>
   234a4:	d0a6ac04 	addi	r2,gp,-25936
}
   234a8:	e037883a 	mov	sp,fp
   234ac:	dfc00117 	ldw	ra,4(sp)
   234b0:	df000017 	ldw	fp,0(sp)
   234b4:	dec00204 	addi	sp,sp,8
   234b8:	f800283a 	ret

000234bc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   234bc:	defffb04 	addi	sp,sp,-20
   234c0:	dfc00415 	stw	ra,16(sp)
   234c4:	df000315 	stw	fp,12(sp)
   234c8:	df000304 	addi	fp,sp,12
   234cc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   234d0:	e0bffd17 	ldw	r2,-12(fp)
   234d4:	10000916 	blt	r2,zero,234fc <close+0x40>
   234d8:	e0fffd17 	ldw	r3,-12(fp)
   234dc:	1805883a 	mov	r2,r3
   234e0:	1085883a 	add	r2,r2,r2
   234e4:	10c5883a 	add	r2,r2,r3
   234e8:	100490ba 	slli	r2,r2,2
   234ec:	00c000b4 	movhi	r3,2
   234f0:	18d8f504 	addi	r3,r3,25556
   234f4:	10c5883a 	add	r2,r2,r3
   234f8:	00000106 	br	23500 <close+0x44>
   234fc:	0005883a 	mov	r2,zero
   23500:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   23504:	e0bfff17 	ldw	r2,-4(fp)
   23508:	10001926 	beq	r2,zero,23570 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2350c:	e0bfff17 	ldw	r2,-4(fp)
   23510:	10800017 	ldw	r2,0(r2)
   23514:	10800417 	ldw	r2,16(r2)
   23518:	10000626 	beq	r2,zero,23534 <close+0x78>
   2351c:	e0bfff17 	ldw	r2,-4(fp)
   23520:	10800017 	ldw	r2,0(r2)
   23524:	10800417 	ldw	r2,16(r2)
   23528:	e13fff17 	ldw	r4,-4(fp)
   2352c:	103ee83a 	callr	r2
   23530:	00000106 	br	23538 <close+0x7c>
   23534:	0005883a 	mov	r2,zero
   23538:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2353c:	e13ffd17 	ldw	r4,-12(fp)
   23540:	0023bb80 	call	23bb8 <alt_release_fd>
    if (rval < 0)
   23544:	e0bffe17 	ldw	r2,-8(fp)
   23548:	1000070e 	bge	r2,zero,23568 <close+0xac>
    {
      ALT_ERRNO = -rval;
   2354c:	00234800 	call	23480 <alt_get_errno>
   23550:	1007883a 	mov	r3,r2
   23554:	e0bffe17 	ldw	r2,-8(fp)
   23558:	0085c83a 	sub	r2,zero,r2
   2355c:	18800015 	stw	r2,0(r3)
      return -1;
   23560:	00bfffc4 	movi	r2,-1
   23564:	00000706 	br	23584 <close+0xc8>
    }
    return 0;
   23568:	0005883a 	mov	r2,zero
   2356c:	00000506 	br	23584 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23570:	00234800 	call	23480 <alt_get_errno>
   23574:	1007883a 	mov	r3,r2
   23578:	00801444 	movi	r2,81
   2357c:	18800015 	stw	r2,0(r3)
    return -1;
   23580:	00bfffc4 	movi	r2,-1
  }
}
   23584:	e037883a 	mov	sp,fp
   23588:	dfc00117 	ldw	ra,4(sp)
   2358c:	df000017 	ldw	fp,0(sp)
   23590:	dec00204 	addi	sp,sp,8
   23594:	f800283a 	ret

00023598 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23598:	defffc04 	addi	sp,sp,-16
   2359c:	df000315 	stw	fp,12(sp)
   235a0:	df000304 	addi	fp,sp,12
   235a4:	e13fff15 	stw	r4,-4(fp)
   235a8:	e17ffe15 	stw	r5,-8(fp)
   235ac:	e1bffd15 	stw	r6,-12(fp)
  return len;
   235b0:	e0bffd17 	ldw	r2,-12(fp)
}
   235b4:	e037883a 	mov	sp,fp
   235b8:	df000017 	ldw	fp,0(sp)
   235bc:	dec00104 	addi	sp,sp,4
   235c0:	f800283a 	ret

000235c4 <alt_get_errno>:
{
   235c4:	defffe04 	addi	sp,sp,-8
   235c8:	dfc00115 	stw	ra,4(sp)
   235cc:	df000015 	stw	fp,0(sp)
   235d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   235d4:	d0a00917 	ldw	r2,-32732(gp)
   235d8:	10000326 	beq	r2,zero,235e8 <alt_get_errno+0x24>
   235dc:	d0a00917 	ldw	r2,-32732(gp)
   235e0:	103ee83a 	callr	r2
   235e4:	00000106 	br	235ec <alt_get_errno+0x28>
   235e8:	d0a6ac04 	addi	r2,gp,-25936
}
   235ec:	e037883a 	mov	sp,fp
   235f0:	dfc00117 	ldw	ra,4(sp)
   235f4:	df000017 	ldw	fp,0(sp)
   235f8:	dec00204 	addi	sp,sp,8
   235fc:	f800283a 	ret

00023600 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   23600:	defffb04 	addi	sp,sp,-20
   23604:	dfc00415 	stw	ra,16(sp)
   23608:	df000315 	stw	fp,12(sp)
   2360c:	df000304 	addi	fp,sp,12
   23610:	e13ffe15 	stw	r4,-8(fp)
   23614:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23618:	e0bffe17 	ldw	r2,-8(fp)
   2361c:	10000916 	blt	r2,zero,23644 <fstat+0x44>
   23620:	e0fffe17 	ldw	r3,-8(fp)
   23624:	1805883a 	mov	r2,r3
   23628:	1085883a 	add	r2,r2,r2
   2362c:	10c5883a 	add	r2,r2,r3
   23630:	100490ba 	slli	r2,r2,2
   23634:	00c000b4 	movhi	r3,2
   23638:	18d8f504 	addi	r3,r3,25556
   2363c:	10c5883a 	add	r2,r2,r3
   23640:	00000106 	br	23648 <fstat+0x48>
   23644:	0005883a 	mov	r2,zero
   23648:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   2364c:	e0bfff17 	ldw	r2,-4(fp)
   23650:	10001026 	beq	r2,zero,23694 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23654:	e0bfff17 	ldw	r2,-4(fp)
   23658:	10800017 	ldw	r2,0(r2)
   2365c:	10800817 	ldw	r2,32(r2)
   23660:	10000726 	beq	r2,zero,23680 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   23664:	e0bfff17 	ldw	r2,-4(fp)
   23668:	10800017 	ldw	r2,0(r2)
   2366c:	10800817 	ldw	r2,32(r2)
   23670:	e17ffd17 	ldw	r5,-12(fp)
   23674:	e13fff17 	ldw	r4,-4(fp)
   23678:	103ee83a 	callr	r2
   2367c:	00000a06 	br	236a8 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   23680:	e0bffd17 	ldw	r2,-12(fp)
   23684:	00c80004 	movi	r3,8192
   23688:	10c00115 	stw	r3,4(r2)
      return 0;
   2368c:	0005883a 	mov	r2,zero
   23690:	00000506 	br	236a8 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23694:	00235c40 	call	235c4 <alt_get_errno>
   23698:	1007883a 	mov	r3,r2
   2369c:	00801444 	movi	r2,81
   236a0:	18800015 	stw	r2,0(r3)
    return -1;
   236a4:	00bfffc4 	movi	r2,-1
  }
}
   236a8:	e037883a 	mov	sp,fp
   236ac:	dfc00117 	ldw	ra,4(sp)
   236b0:	df000017 	ldw	fp,0(sp)
   236b4:	dec00204 	addi	sp,sp,8
   236b8:	f800283a 	ret

000236bc <alt_get_errno>:
{
   236bc:	defffe04 	addi	sp,sp,-8
   236c0:	dfc00115 	stw	ra,4(sp)
   236c4:	df000015 	stw	fp,0(sp)
   236c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   236cc:	d0a00917 	ldw	r2,-32732(gp)
   236d0:	10000326 	beq	r2,zero,236e0 <alt_get_errno+0x24>
   236d4:	d0a00917 	ldw	r2,-32732(gp)
   236d8:	103ee83a 	callr	r2
   236dc:	00000106 	br	236e4 <alt_get_errno+0x28>
   236e0:	d0a6ac04 	addi	r2,gp,-25936
}
   236e4:	e037883a 	mov	sp,fp
   236e8:	dfc00117 	ldw	ra,4(sp)
   236ec:	df000017 	ldw	fp,0(sp)
   236f0:	dec00204 	addi	sp,sp,8
   236f4:	f800283a 	ret

000236f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   236f8:	deffea04 	addi	sp,sp,-88
   236fc:	dfc01515 	stw	ra,84(sp)
   23700:	df001415 	stw	fp,80(sp)
   23704:	df001404 	addi	fp,sp,80
   23708:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2370c:	e0bfec17 	ldw	r2,-80(fp)
   23710:	10000916 	blt	r2,zero,23738 <isatty+0x40>
   23714:	e0ffec17 	ldw	r3,-80(fp)
   23718:	1805883a 	mov	r2,r3
   2371c:	1085883a 	add	r2,r2,r2
   23720:	10c5883a 	add	r2,r2,r3
   23724:	100490ba 	slli	r2,r2,2
   23728:	00c000b4 	movhi	r3,2
   2372c:	18d8f504 	addi	r3,r3,25556
   23730:	10c5883a 	add	r2,r2,r3
   23734:	00000106 	br	2373c <isatty+0x44>
   23738:	0005883a 	mov	r2,zero
   2373c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   23740:	e0bfff17 	ldw	r2,-4(fp)
   23744:	10000e26 	beq	r2,zero,23780 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23748:	e0bfff17 	ldw	r2,-4(fp)
   2374c:	10800017 	ldw	r2,0(r2)
   23750:	10800817 	ldw	r2,32(r2)
   23754:	1000021e 	bne	r2,zero,23760 <isatty+0x68>
    {
      return 1;
   23758:	00800044 	movi	r2,1
   2375c:	00000d06 	br	23794 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23760:	e0bfed04 	addi	r2,fp,-76
   23764:	100b883a 	mov	r5,r2
   23768:	e13fec17 	ldw	r4,-80(fp)
   2376c:	00236000 	call	23600 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23770:	e0bfee17 	ldw	r2,-72(fp)
   23774:	10880020 	cmpeqi	r2,r2,8192
   23778:	10803fcc 	andi	r2,r2,255
   2377c:	00000506 	br	23794 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23780:	00236bc0 	call	236bc <alt_get_errno>
   23784:	1007883a 	mov	r3,r2
   23788:	00801444 	movi	r2,81
   2378c:	18800015 	stw	r2,0(r3)
    return 0;
   23790:	0005883a 	mov	r2,zero
  }
}
   23794:	e037883a 	mov	sp,fp
   23798:	dfc00117 	ldw	ra,4(sp)
   2379c:	df000017 	ldw	fp,0(sp)
   237a0:	dec00204 	addi	sp,sp,8
   237a4:	f800283a 	ret

000237a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   237a8:	defffc04 	addi	sp,sp,-16
   237ac:	df000315 	stw	fp,12(sp)
   237b0:	df000304 	addi	fp,sp,12
   237b4:	e13fff15 	stw	r4,-4(fp)
   237b8:	e17ffe15 	stw	r5,-8(fp)
   237bc:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   237c0:	e0fffe17 	ldw	r3,-8(fp)
   237c4:	e0bfff17 	ldw	r2,-4(fp)
   237c8:	18800c26 	beq	r3,r2,237fc <alt_load_section+0x54>
  {
    while( to != end )
   237cc:	00000806 	br	237f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
   237d0:	e0ffff17 	ldw	r3,-4(fp)
   237d4:	18800104 	addi	r2,r3,4
   237d8:	e0bfff15 	stw	r2,-4(fp)
   237dc:	e0bffe17 	ldw	r2,-8(fp)
   237e0:	11000104 	addi	r4,r2,4
   237e4:	e13ffe15 	stw	r4,-8(fp)
   237e8:	18c00017 	ldw	r3,0(r3)
   237ec:	10c00015 	stw	r3,0(r2)
    while( to != end )
   237f0:	e0fffe17 	ldw	r3,-8(fp)
   237f4:	e0bffd17 	ldw	r2,-12(fp)
   237f8:	18bff51e 	bne	r3,r2,237d0 <alt_load_section+0x28>
    }
  }
}
   237fc:	0001883a 	nop
   23800:	e037883a 	mov	sp,fp
   23804:	df000017 	ldw	fp,0(sp)
   23808:	dec00104 	addi	sp,sp,4
   2380c:	f800283a 	ret

00023810 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23810:	defffe04 	addi	sp,sp,-8
   23814:	dfc00115 	stw	ra,4(sp)
   23818:	df000015 	stw	fp,0(sp)
   2381c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23820:	018000b4 	movhi	r6,2
   23824:	319d7b04 	addi	r6,r6,30188
   23828:	014000b4 	movhi	r5,2
   2382c:	2956e004 	addi	r5,r5,23424
   23830:	010000b4 	movhi	r4,2
   23834:	211d7b04 	addi	r4,r4,30188
   23838:	00237a80 	call	237a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2383c:	018000b4 	movhi	r6,2
   23840:	31808904 	addi	r6,r6,548
   23844:	014000b4 	movhi	r5,2
   23848:	29400804 	addi	r5,r5,32
   2384c:	010000b4 	movhi	r4,2
   23850:	21000804 	addi	r4,r4,32
   23854:	00237a80 	call	237a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23858:	018000b4 	movhi	r6,2
   2385c:	3196e004 	addi	r6,r6,23424
   23860:	014000b4 	movhi	r5,2
   23864:	2956cd04 	addi	r5,r5,23348
   23868:	010000b4 	movhi	r4,2
   2386c:	2116cd04 	addi	r4,r4,23348
   23870:	00237a80 	call	237a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23874:	0024b640 	call	24b64 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23878:	0024d300 	call	24d30 <alt_icache_flush_all>
}
   2387c:	0001883a 	nop
   23880:	e037883a 	mov	sp,fp
   23884:	dfc00117 	ldw	ra,4(sp)
   23888:	df000017 	ldw	fp,0(sp)
   2388c:	dec00204 	addi	sp,sp,8
   23890:	f800283a 	ret

00023894 <alt_get_errno>:
{
   23894:	defffe04 	addi	sp,sp,-8
   23898:	dfc00115 	stw	ra,4(sp)
   2389c:	df000015 	stw	fp,0(sp)
   238a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   238a4:	d0a00917 	ldw	r2,-32732(gp)
   238a8:	10000326 	beq	r2,zero,238b8 <alt_get_errno+0x24>
   238ac:	d0a00917 	ldw	r2,-32732(gp)
   238b0:	103ee83a 	callr	r2
   238b4:	00000106 	br	238bc <alt_get_errno+0x28>
   238b8:	d0a6ac04 	addi	r2,gp,-25936
}
   238bc:	e037883a 	mov	sp,fp
   238c0:	dfc00117 	ldw	ra,4(sp)
   238c4:	df000017 	ldw	fp,0(sp)
   238c8:	dec00204 	addi	sp,sp,8
   238cc:	f800283a 	ret

000238d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   238d0:	defff904 	addi	sp,sp,-28
   238d4:	dfc00615 	stw	ra,24(sp)
   238d8:	df000515 	stw	fp,20(sp)
   238dc:	df000504 	addi	fp,sp,20
   238e0:	e13ffd15 	stw	r4,-12(fp)
   238e4:	e17ffc15 	stw	r5,-16(fp)
   238e8:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   238ec:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   238f0:	e0bffd17 	ldw	r2,-12(fp)
   238f4:	10000916 	blt	r2,zero,2391c <lseek+0x4c>
   238f8:	e0fffd17 	ldw	r3,-12(fp)
   238fc:	1805883a 	mov	r2,r3
   23900:	1085883a 	add	r2,r2,r2
   23904:	10c5883a 	add	r2,r2,r3
   23908:	100490ba 	slli	r2,r2,2
   2390c:	00c000b4 	movhi	r3,2
   23910:	18d8f504 	addi	r3,r3,25556
   23914:	10c5883a 	add	r2,r2,r3
   23918:	00000106 	br	23920 <lseek+0x50>
   2391c:	0005883a 	mov	r2,zero
   23920:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   23924:	e0bffe17 	ldw	r2,-8(fp)
   23928:	10001026 	beq	r2,zero,2396c <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2392c:	e0bffe17 	ldw	r2,-8(fp)
   23930:	10800017 	ldw	r2,0(r2)
   23934:	10800717 	ldw	r2,28(r2)
   23938:	10000926 	beq	r2,zero,23960 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2393c:	e0bffe17 	ldw	r2,-8(fp)
   23940:	10800017 	ldw	r2,0(r2)
   23944:	10800717 	ldw	r2,28(r2)
   23948:	e1bffb17 	ldw	r6,-20(fp)
   2394c:	e17ffc17 	ldw	r5,-16(fp)
   23950:	e13ffe17 	ldw	r4,-8(fp)
   23954:	103ee83a 	callr	r2
   23958:	e0bfff15 	stw	r2,-4(fp)
   2395c:	00000506 	br	23974 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23960:	00bfde84 	movi	r2,-134
   23964:	e0bfff15 	stw	r2,-4(fp)
   23968:	00000206 	br	23974 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   2396c:	00bfebc4 	movi	r2,-81
   23970:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   23974:	e0bfff17 	ldw	r2,-4(fp)
   23978:	1000070e 	bge	r2,zero,23998 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   2397c:	00238940 	call	23894 <alt_get_errno>
   23980:	1007883a 	mov	r3,r2
   23984:	e0bfff17 	ldw	r2,-4(fp)
   23988:	0085c83a 	sub	r2,zero,r2
   2398c:	18800015 	stw	r2,0(r3)
    rc = -1;
   23990:	00bfffc4 	movi	r2,-1
   23994:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   23998:	e0bfff17 	ldw	r2,-4(fp)
}
   2399c:	e037883a 	mov	sp,fp
   239a0:	dfc00117 	ldw	ra,4(sp)
   239a4:	df000017 	ldw	fp,0(sp)
   239a8:	dec00204 	addi	sp,sp,8
   239ac:	f800283a 	ret

000239b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   239b0:	defffd04 	addi	sp,sp,-12
   239b4:	dfc00215 	stw	ra,8(sp)
   239b8:	df000115 	stw	fp,4(sp)
   239bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   239c0:	0009883a 	mov	r4,zero
   239c4:	0023f0c0 	call	23f0c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   239c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   239cc:	0023f480 	call	23f48 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   239d0:	018000b4 	movhi	r6,2
   239d4:	3196d604 	addi	r6,r6,23384
   239d8:	014000b4 	movhi	r5,2
   239dc:	2956d604 	addi	r5,r5,23384
   239e0:	010000b4 	movhi	r4,2
   239e4:	2116d604 	addi	r4,r4,23384
   239e8:	00250bc0 	call	250bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   239ec:	0024c680 	call	24c68 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   239f0:	010000b4 	movhi	r4,2
   239f4:	21133304 	addi	r4,r4,19660
   239f8:	002588c0 	call	2588c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   239fc:	d0a6ad17 	ldw	r2,-25932(gp)
   23a00:	d0e6ae17 	ldw	r3,-25928(gp)
   23a04:	d126af17 	ldw	r4,-25924(gp)
   23a08:	200d883a 	mov	r6,r4
   23a0c:	180b883a 	mov	r5,r3
   23a10:	1009883a 	mov	r4,r2
   23a14:	002055c0 	call	2055c <main>
   23a18:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23a1c:	01000044 	movi	r4,1
   23a20:	00234bc0 	call	234bc <close>
  exit (result);
   23a24:	e13fff17 	ldw	r4,-4(fp)
   23a28:	00258a00 	call	258a0 <exit>

00023a2c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   23a2c:	defffe04 	addi	sp,sp,-8
   23a30:	df000115 	stw	fp,4(sp)
   23a34:	df000104 	addi	fp,sp,4
   23a38:	e13fff15 	stw	r4,-4(fp)
}
   23a3c:	0001883a 	nop
   23a40:	e037883a 	mov	sp,fp
   23a44:	df000017 	ldw	fp,0(sp)
   23a48:	dec00104 	addi	sp,sp,4
   23a4c:	f800283a 	ret

00023a50 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23a50:	defffe04 	addi	sp,sp,-8
   23a54:	df000115 	stw	fp,4(sp)
   23a58:	df000104 	addi	fp,sp,4
   23a5c:	e13fff15 	stw	r4,-4(fp)
}
   23a60:	0001883a 	nop
   23a64:	e037883a 	mov	sp,fp
   23a68:	df000017 	ldw	fp,0(sp)
   23a6c:	dec00104 	addi	sp,sp,4
   23a70:	f800283a 	ret

00023a74 <alt_get_errno>:
{
   23a74:	defffe04 	addi	sp,sp,-8
   23a78:	dfc00115 	stw	ra,4(sp)
   23a7c:	df000015 	stw	fp,0(sp)
   23a80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23a84:	d0a00917 	ldw	r2,-32732(gp)
   23a88:	10000326 	beq	r2,zero,23a98 <alt_get_errno+0x24>
   23a8c:	d0a00917 	ldw	r2,-32732(gp)
   23a90:	103ee83a 	callr	r2
   23a94:	00000106 	br	23a9c <alt_get_errno+0x28>
   23a98:	d0a6ac04 	addi	r2,gp,-25936
}
   23a9c:	e037883a 	mov	sp,fp
   23aa0:	dfc00117 	ldw	ra,4(sp)
   23aa4:	df000017 	ldw	fp,0(sp)
   23aa8:	dec00204 	addi	sp,sp,8
   23aac:	f800283a 	ret

00023ab0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   23ab0:	defff904 	addi	sp,sp,-28
   23ab4:	dfc00615 	stw	ra,24(sp)
   23ab8:	df000515 	stw	fp,20(sp)
   23abc:	df000504 	addi	fp,sp,20
   23ac0:	e13ffd15 	stw	r4,-12(fp)
   23ac4:	e17ffc15 	stw	r5,-16(fp)
   23ac8:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23acc:	e0bffd17 	ldw	r2,-12(fp)
   23ad0:	10000916 	blt	r2,zero,23af8 <read+0x48>
   23ad4:	e0fffd17 	ldw	r3,-12(fp)
   23ad8:	1805883a 	mov	r2,r3
   23adc:	1085883a 	add	r2,r2,r2
   23ae0:	10c5883a 	add	r2,r2,r3
   23ae4:	100490ba 	slli	r2,r2,2
   23ae8:	00c000b4 	movhi	r3,2
   23aec:	18d8f504 	addi	r3,r3,25556
   23af0:	10c5883a 	add	r2,r2,r3
   23af4:	00000106 	br	23afc <read+0x4c>
   23af8:	0005883a 	mov	r2,zero
   23afc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   23b00:	e0bfff17 	ldw	r2,-4(fp)
   23b04:	10002226 	beq	r2,zero,23b90 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23b08:	e0bfff17 	ldw	r2,-4(fp)
   23b0c:	10800217 	ldw	r2,8(r2)
   23b10:	108000cc 	andi	r2,r2,3
   23b14:	10800060 	cmpeqi	r2,r2,1
   23b18:	1000181e 	bne	r2,zero,23b7c <read+0xcc>
        (fd->dev->read))
   23b1c:	e0bfff17 	ldw	r2,-4(fp)
   23b20:	10800017 	ldw	r2,0(r2)
   23b24:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23b28:	10001426 	beq	r2,zero,23b7c <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   23b2c:	e0bfff17 	ldw	r2,-4(fp)
   23b30:	10800017 	ldw	r2,0(r2)
   23b34:	10800517 	ldw	r2,20(r2)
   23b38:	e0fffb17 	ldw	r3,-20(fp)
   23b3c:	180d883a 	mov	r6,r3
   23b40:	e17ffc17 	ldw	r5,-16(fp)
   23b44:	e13fff17 	ldw	r4,-4(fp)
   23b48:	103ee83a 	callr	r2
   23b4c:	e0bffe15 	stw	r2,-8(fp)
   23b50:	e0bffe17 	ldw	r2,-8(fp)
   23b54:	1000070e 	bge	r2,zero,23b74 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   23b58:	0023a740 	call	23a74 <alt_get_errno>
   23b5c:	1007883a 	mov	r3,r2
   23b60:	e0bffe17 	ldw	r2,-8(fp)
   23b64:	0085c83a 	sub	r2,zero,r2
   23b68:	18800015 	stw	r2,0(r3)
          return -1;
   23b6c:	00bfffc4 	movi	r2,-1
   23b70:	00000c06 	br	23ba4 <read+0xf4>
        }
        return rval;
   23b74:	e0bffe17 	ldw	r2,-8(fp)
   23b78:	00000a06 	br	23ba4 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   23b7c:	0023a740 	call	23a74 <alt_get_errno>
   23b80:	1007883a 	mov	r3,r2
   23b84:	00800344 	movi	r2,13
   23b88:	18800015 	stw	r2,0(r3)
   23b8c:	00000406 	br	23ba0 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   23b90:	0023a740 	call	23a74 <alt_get_errno>
   23b94:	1007883a 	mov	r3,r2
   23b98:	00801444 	movi	r2,81
   23b9c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23ba0:	00bfffc4 	movi	r2,-1
}
   23ba4:	e037883a 	mov	sp,fp
   23ba8:	dfc00117 	ldw	ra,4(sp)
   23bac:	df000017 	ldw	fp,0(sp)
   23bb0:	dec00204 	addi	sp,sp,8
   23bb4:	f800283a 	ret

00023bb8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23bb8:	defffe04 	addi	sp,sp,-8
   23bbc:	df000115 	stw	fp,4(sp)
   23bc0:	df000104 	addi	fp,sp,4
   23bc4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   23bc8:	e0bfff17 	ldw	r2,-4(fp)
   23bcc:	108000d0 	cmplti	r2,r2,3
   23bd0:	1000101e 	bne	r2,zero,23c14 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   23bd4:	e0ffff17 	ldw	r3,-4(fp)
   23bd8:	1805883a 	mov	r2,r3
   23bdc:	1085883a 	add	r2,r2,r2
   23be0:	10c5883a 	add	r2,r2,r3
   23be4:	100490ba 	slli	r2,r2,2
   23be8:	00c000b4 	movhi	r3,2
   23bec:	10c7883a 	add	r3,r2,r3
   23bf0:	1818f715 	stw	zero,25564(r3)
    alt_fd_list[fd].dev      = 0;
   23bf4:	e0ffff17 	ldw	r3,-4(fp)
   23bf8:	1805883a 	mov	r2,r3
   23bfc:	1085883a 	add	r2,r2,r2
   23c00:	10c5883a 	add	r2,r2,r3
   23c04:	100490ba 	slli	r2,r2,2
   23c08:	00c000b4 	movhi	r3,2
   23c0c:	10c7883a 	add	r3,r2,r3
   23c10:	1818f515 	stw	zero,25556(r3)
  }
}
   23c14:	0001883a 	nop
   23c18:	e037883a 	mov	sp,fp
   23c1c:	df000017 	ldw	fp,0(sp)
   23c20:	dec00104 	addi	sp,sp,4
   23c24:	f800283a 	ret

00023c28 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23c28:	defff904 	addi	sp,sp,-28
   23c2c:	df000615 	stw	fp,24(sp)
   23c30:	df000604 	addi	fp,sp,24
   23c34:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   23c38:	0005303a 	rdctl	r2,status
   23c3c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23c40:	e0fffd17 	ldw	r3,-12(fp)
   23c44:	00bfff84 	movi	r2,-2
   23c48:	1884703a 	and	r2,r3,r2
   23c4c:	1001703a 	wrctl	status,r2
  return context;
   23c50:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23c54:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23c58:	d0a00a17 	ldw	r2,-32728(gp)
   23c5c:	10c000c4 	addi	r3,r2,3
   23c60:	00bfff04 	movi	r2,-4
   23c64:	1884703a 	and	r2,r3,r2
   23c68:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23c6c:	d0e00a17 	ldw	r3,-32728(gp)
   23c70:	e0bffa17 	ldw	r2,-24(fp)
   23c74:	1887883a 	add	r3,r3,r2
   23c78:	00800134 	movhi	r2,4
   23c7c:	10800004 	addi	r2,r2,0
   23c80:	10c0072e 	bgeu	r2,r3,23ca0 <sbrk+0x78>
   23c84:	e0bfff17 	ldw	r2,-4(fp)
   23c88:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   23c8c:	e0bffc17 	ldw	r2,-16(fp)
   23c90:	1001703a 	wrctl	status,r2
}
   23c94:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23c98:	00bfffc4 	movi	r2,-1
   23c9c:	00000c06 	br	23cd0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   23ca0:	d0a00a17 	ldw	r2,-32728(gp)
   23ca4:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   23ca8:	d0e00a17 	ldw	r3,-32728(gp)
   23cac:	e0bffa17 	ldw	r2,-24(fp)
   23cb0:	1885883a 	add	r2,r3,r2
   23cb4:	d0a00a15 	stw	r2,-32728(gp)
   23cb8:	e0bfff17 	ldw	r2,-4(fp)
   23cbc:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   23cc0:	e0bffb17 	ldw	r2,-20(fp)
   23cc4:	1001703a 	wrctl	status,r2
}
   23cc8:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23ccc:	e0bffe17 	ldw	r2,-8(fp)
} 
   23cd0:	e037883a 	mov	sp,fp
   23cd4:	df000017 	ldw	fp,0(sp)
   23cd8:	dec00104 	addi	sp,sp,4
   23cdc:	f800283a 	ret

00023ce0 <alt_get_errno>:
{
   23ce0:	defffe04 	addi	sp,sp,-8
   23ce4:	dfc00115 	stw	ra,4(sp)
   23ce8:	df000015 	stw	fp,0(sp)
   23cec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23cf0:	d0a00917 	ldw	r2,-32732(gp)
   23cf4:	10000326 	beq	r2,zero,23d04 <alt_get_errno+0x24>
   23cf8:	d0a00917 	ldw	r2,-32732(gp)
   23cfc:	103ee83a 	callr	r2
   23d00:	00000106 	br	23d08 <alt_get_errno+0x28>
   23d04:	d0a6ac04 	addi	r2,gp,-25936
}
   23d08:	e037883a 	mov	sp,fp
   23d0c:	dfc00117 	ldw	ra,4(sp)
   23d10:	df000017 	ldw	fp,0(sp)
   23d14:	dec00204 	addi	sp,sp,8
   23d18:	f800283a 	ret

00023d1c <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
   23d1c:	defffc04 	addi	sp,sp,-16
   23d20:	dfc00315 	stw	ra,12(sp)
   23d24:	df000215 	stw	fp,8(sp)
   23d28:	df000204 	addi	fp,sp,8
   23d2c:	e13ffe15 	stw	r4,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   23d30:	d0a6b217 	ldw	r2,-25912(gp)
   23d34:	d0e6b317 	ldw	r3,-25908(gp)
  clock_t ticks = alt_nticks(); 
   23d38:	e0bfff15 	stw	r2,-4(fp)
  return _alt_tick_rate;
   23d3c:	d0a6b117 	ldw	r2,-25916(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
   23d40:	1000061e 	bne	r2,zero,23d5c <times+0x40>
  {
    ALT_ERRNO = ENOSYS;
   23d44:	0023ce00 	call	23ce0 <alt_get_errno>
   23d48:	1007883a 	mov	r3,r2
   23d4c:	00801604 	movi	r2,88
   23d50:	18800015 	stw	r2,0(r3)
    return 0;
   23d54:	0005883a 	mov	r2,zero
   23d58:	00000a06 	br	23d84 <times+0x68>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
   23d5c:	e0bffe17 	ldw	r2,-8(fp)
   23d60:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
   23d64:	e0bffe17 	ldw	r2,-8(fp)
   23d68:	e0ffff17 	ldw	r3,-4(fp)
   23d6c:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
   23d70:	e0bffe17 	ldw	r2,-8(fp)
   23d74:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
   23d78:	e0bffe17 	ldw	r2,-8(fp)
   23d7c:	10000315 	stw	zero,12(r2)

  return ticks;
   23d80:	e0bfff17 	ldw	r2,-4(fp)
}
   23d84:	e037883a 	mov	sp,fp
   23d88:	dfc00117 	ldw	ra,4(sp)
   23d8c:	df000017 	ldw	fp,0(sp)
   23d90:	dec00204 	addi	sp,sp,8
   23d94:	f800283a 	ret

00023d98 <alt_get_errno>:
{
   23d98:	defffe04 	addi	sp,sp,-8
   23d9c:	dfc00115 	stw	ra,4(sp)
   23da0:	df000015 	stw	fp,0(sp)
   23da4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23da8:	d0a00917 	ldw	r2,-32732(gp)
   23dac:	10000326 	beq	r2,zero,23dbc <alt_get_errno+0x24>
   23db0:	d0a00917 	ldw	r2,-32732(gp)
   23db4:	103ee83a 	callr	r2
   23db8:	00000106 	br	23dc0 <alt_get_errno+0x28>
   23dbc:	d0a6ac04 	addi	r2,gp,-25936
}
   23dc0:	e037883a 	mov	sp,fp
   23dc4:	dfc00117 	ldw	ra,4(sp)
   23dc8:	df000017 	ldw	fp,0(sp)
   23dcc:	dec00204 	addi	sp,sp,8
   23dd0:	f800283a 	ret

00023dd4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23dd4:	defff904 	addi	sp,sp,-28
   23dd8:	dfc00615 	stw	ra,24(sp)
   23ddc:	df000515 	stw	fp,20(sp)
   23de0:	df000504 	addi	fp,sp,20
   23de4:	e13ffd15 	stw	r4,-12(fp)
   23de8:	e17ffc15 	stw	r5,-16(fp)
   23dec:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23df0:	e0bffd17 	ldw	r2,-12(fp)
   23df4:	10000916 	blt	r2,zero,23e1c <write+0x48>
   23df8:	e0fffd17 	ldw	r3,-12(fp)
   23dfc:	1805883a 	mov	r2,r3
   23e00:	1085883a 	add	r2,r2,r2
   23e04:	10c5883a 	add	r2,r2,r3
   23e08:	100490ba 	slli	r2,r2,2
   23e0c:	00c000b4 	movhi	r3,2
   23e10:	18d8f504 	addi	r3,r3,25556
   23e14:	10c5883a 	add	r2,r2,r3
   23e18:	00000106 	br	23e20 <write+0x4c>
   23e1c:	0005883a 	mov	r2,zero
   23e20:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   23e24:	e0bfff17 	ldw	r2,-4(fp)
   23e28:	10002126 	beq	r2,zero,23eb0 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23e2c:	e0bfff17 	ldw	r2,-4(fp)
   23e30:	10800217 	ldw	r2,8(r2)
   23e34:	108000cc 	andi	r2,r2,3
   23e38:	10001826 	beq	r2,zero,23e9c <write+0xc8>
   23e3c:	e0bfff17 	ldw	r2,-4(fp)
   23e40:	10800017 	ldw	r2,0(r2)
   23e44:	10800617 	ldw	r2,24(r2)
   23e48:	10001426 	beq	r2,zero,23e9c <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23e4c:	e0bfff17 	ldw	r2,-4(fp)
   23e50:	10800017 	ldw	r2,0(r2)
   23e54:	10800617 	ldw	r2,24(r2)
   23e58:	e0fffb17 	ldw	r3,-20(fp)
   23e5c:	180d883a 	mov	r6,r3
   23e60:	e17ffc17 	ldw	r5,-16(fp)
   23e64:	e13fff17 	ldw	r4,-4(fp)
   23e68:	103ee83a 	callr	r2
   23e6c:	e0bffe15 	stw	r2,-8(fp)
   23e70:	e0bffe17 	ldw	r2,-8(fp)
   23e74:	1000070e 	bge	r2,zero,23e94 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   23e78:	0023d980 	call	23d98 <alt_get_errno>
   23e7c:	1007883a 	mov	r3,r2
   23e80:	e0bffe17 	ldw	r2,-8(fp)
   23e84:	0085c83a 	sub	r2,zero,r2
   23e88:	18800015 	stw	r2,0(r3)
        return -1;
   23e8c:	00bfffc4 	movi	r2,-1
   23e90:	00000c06 	br	23ec4 <write+0xf0>
      }
      return rval;
   23e94:	e0bffe17 	ldw	r2,-8(fp)
   23e98:	00000a06 	br	23ec4 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23e9c:	0023d980 	call	23d98 <alt_get_errno>
   23ea0:	1007883a 	mov	r3,r2
   23ea4:	00800344 	movi	r2,13
   23ea8:	18800015 	stw	r2,0(r3)
   23eac:	00000406 	br	23ec0 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23eb0:	0023d980 	call	23d98 <alt_get_errno>
   23eb4:	1007883a 	mov	r3,r2
   23eb8:	00801444 	movi	r2,81
   23ebc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23ec0:	00bfffc4 	movi	r2,-1
}
   23ec4:	e037883a 	mov	sp,fp
   23ec8:	dfc00117 	ldw	ra,4(sp)
   23ecc:	df000017 	ldw	fp,0(sp)
   23ed0:	dec00204 	addi	sp,sp,8
   23ed4:	f800283a 	ret

00023ed8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23ed8:	defffd04 	addi	sp,sp,-12
   23edc:	dfc00215 	stw	ra,8(sp)
   23ee0:	df000115 	stw	fp,4(sp)
   23ee4:	df000104 	addi	fp,sp,4
   23ee8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23eec:	d1600604 	addi	r5,gp,-32744
   23ef0:	e13fff17 	ldw	r4,-4(fp)
   23ef4:	0024bc00 	call	24bc0 <alt_dev_llist_insert>
}
   23ef8:	e037883a 	mov	sp,fp
   23efc:	dfc00117 	ldw	ra,4(sp)
   23f00:	df000017 	ldw	fp,0(sp)
   23f04:	dec00204 	addi	sp,sp,8
   23f08:	f800283a 	ret

00023f0c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23f0c:	defffd04 	addi	sp,sp,-12
   23f10:	dfc00215 	stw	ra,8(sp)
   23f14:	df000115 	stw	fp,4(sp)
   23f18:	df000104 	addi	fp,sp,4
   23f1c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   23f20:	00255800 	call	25580 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23f24:	00800044 	movi	r2,1
   23f28:	1001703a 	wrctl	status,r2
}
   23f2c:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   23f30:	0001883a 	nop
   23f34:	e037883a 	mov	sp,fp
   23f38:	dfc00117 	ldw	ra,4(sp)
   23f3c:	df000017 	ldw	fp,0(sp)
   23f40:	dec00204 	addi	sp,sp,8
   23f44:	f800283a 	ret

00023f48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23f48:	defffe04 	addi	sp,sp,-8
   23f4c:	dfc00115 	stw	ra,4(sp)
   23f50:	df000015 	stw	fp,0(sp)
   23f54:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   23f58:	000d883a 	mov	r6,zero
   23f5c:	000b883a 	mov	r5,zero
   23f60:	010000b4 	movhi	r4,2
   23f64:	21195f04 	addi	r4,r4,25980
   23f68:	00240f40 	call	240f4 <altera_avalon_jtag_uart_init>
   23f6c:	010000b4 	movhi	r4,2
   23f70:	21195504 	addi	r4,r4,25940
   23f74:	0023ed80 	call	23ed8 <alt_dev_reg>
}
   23f78:	0001883a 	nop
   23f7c:	e037883a 	mov	sp,fp
   23f80:	dfc00117 	ldw	ra,4(sp)
   23f84:	df000017 	ldw	fp,0(sp)
   23f88:	dec00204 	addi	sp,sp,8
   23f8c:	f800283a 	ret

00023f90 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23f90:	defffa04 	addi	sp,sp,-24
   23f94:	dfc00515 	stw	ra,20(sp)
   23f98:	df000415 	stw	fp,16(sp)
   23f9c:	df000404 	addi	fp,sp,16
   23fa0:	e13ffe15 	stw	r4,-8(fp)
   23fa4:	e17ffd15 	stw	r5,-12(fp)
   23fa8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23fac:	e0bffe17 	ldw	r2,-8(fp)
   23fb0:	10800017 	ldw	r2,0(r2)
   23fb4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23fb8:	e0bfff17 	ldw	r2,-4(fp)
   23fbc:	10c00a04 	addi	r3,r2,40
   23fc0:	e0bffe17 	ldw	r2,-8(fp)
   23fc4:	10800217 	ldw	r2,8(r2)
   23fc8:	100f883a 	mov	r7,r2
   23fcc:	e1bffc17 	ldw	r6,-16(fp)
   23fd0:	e17ffd17 	ldw	r5,-12(fp)
   23fd4:	1809883a 	mov	r4,r3
   23fd8:	00245bc0 	call	245bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23fdc:	e037883a 	mov	sp,fp
   23fe0:	dfc00117 	ldw	ra,4(sp)
   23fe4:	df000017 	ldw	fp,0(sp)
   23fe8:	dec00204 	addi	sp,sp,8
   23fec:	f800283a 	ret

00023ff0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23ff0:	defffa04 	addi	sp,sp,-24
   23ff4:	dfc00515 	stw	ra,20(sp)
   23ff8:	df000415 	stw	fp,16(sp)
   23ffc:	df000404 	addi	fp,sp,16
   24000:	e13ffe15 	stw	r4,-8(fp)
   24004:	e17ffd15 	stw	r5,-12(fp)
   24008:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2400c:	e0bffe17 	ldw	r2,-8(fp)
   24010:	10800017 	ldw	r2,0(r2)
   24014:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   24018:	e0bfff17 	ldw	r2,-4(fp)
   2401c:	10c00a04 	addi	r3,r2,40
   24020:	e0bffe17 	ldw	r2,-8(fp)
   24024:	10800217 	ldw	r2,8(r2)
   24028:	100f883a 	mov	r7,r2
   2402c:	e1bffc17 	ldw	r6,-16(fp)
   24030:	e17ffd17 	ldw	r5,-12(fp)
   24034:	1809883a 	mov	r4,r3
   24038:	00247dc0 	call	247dc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2403c:	e037883a 	mov	sp,fp
   24040:	dfc00117 	ldw	ra,4(sp)
   24044:	df000017 	ldw	fp,0(sp)
   24048:	dec00204 	addi	sp,sp,8
   2404c:	f800283a 	ret

00024050 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   24050:	defffc04 	addi	sp,sp,-16
   24054:	dfc00315 	stw	ra,12(sp)
   24058:	df000215 	stw	fp,8(sp)
   2405c:	df000204 	addi	fp,sp,8
   24060:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24064:	e0bffe17 	ldw	r2,-8(fp)
   24068:	10800017 	ldw	r2,0(r2)
   2406c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   24070:	e0bfff17 	ldw	r2,-4(fp)
   24074:	10c00a04 	addi	r3,r2,40
   24078:	e0bffe17 	ldw	r2,-8(fp)
   2407c:	10800217 	ldw	r2,8(r2)
   24080:	100b883a 	mov	r5,r2
   24084:	1809883a 	mov	r4,r3
   24088:	00244600 	call	24460 <altera_avalon_jtag_uart_close>
}
   2408c:	e037883a 	mov	sp,fp
   24090:	dfc00117 	ldw	ra,4(sp)
   24094:	df000017 	ldw	fp,0(sp)
   24098:	dec00204 	addi	sp,sp,8
   2409c:	f800283a 	ret

000240a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   240a0:	defffa04 	addi	sp,sp,-24
   240a4:	dfc00515 	stw	ra,20(sp)
   240a8:	df000415 	stw	fp,16(sp)
   240ac:	df000404 	addi	fp,sp,16
   240b0:	e13ffe15 	stw	r4,-8(fp)
   240b4:	e17ffd15 	stw	r5,-12(fp)
   240b8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   240bc:	e0bffe17 	ldw	r2,-8(fp)
   240c0:	10800017 	ldw	r2,0(r2)
   240c4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   240c8:	e0bfff17 	ldw	r2,-4(fp)
   240cc:	10800a04 	addi	r2,r2,40
   240d0:	e1bffc17 	ldw	r6,-16(fp)
   240d4:	e17ffd17 	ldw	r5,-12(fp)
   240d8:	1009883a 	mov	r4,r2
   240dc:	00244c80 	call	244c8 <altera_avalon_jtag_uart_ioctl>
}
   240e0:	e037883a 	mov	sp,fp
   240e4:	dfc00117 	ldw	ra,4(sp)
   240e8:	df000017 	ldw	fp,0(sp)
   240ec:	dec00204 	addi	sp,sp,8
   240f0:	f800283a 	ret

000240f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   240f4:	defffa04 	addi	sp,sp,-24
   240f8:	dfc00515 	stw	ra,20(sp)
   240fc:	df000415 	stw	fp,16(sp)
   24100:	df000404 	addi	fp,sp,16
   24104:	e13fff15 	stw	r4,-4(fp)
   24108:	e17ffe15 	stw	r5,-8(fp)
   2410c:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24110:	e0bfff17 	ldw	r2,-4(fp)
   24114:	00c00044 	movi	r3,1
   24118:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2411c:	e0bfff17 	ldw	r2,-4(fp)
   24120:	10800017 	ldw	r2,0(r2)
   24124:	10800104 	addi	r2,r2,4
   24128:	1007883a 	mov	r3,r2
   2412c:	e0bfff17 	ldw	r2,-4(fp)
   24130:	10800817 	ldw	r2,32(r2)
   24134:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   24138:	e0bffe17 	ldw	r2,-8(fp)
   2413c:	e0fffd17 	ldw	r3,-12(fp)
   24140:	d8000015 	stw	zero,0(sp)
   24144:	e1ffff17 	ldw	r7,-4(fp)
   24148:	018000b4 	movhi	r6,2
   2414c:	31906d04 	addi	r6,r6,16820
   24150:	180b883a 	mov	r5,r3
   24154:	1009883a 	mov	r4,r2
   24158:	0024d500 	call	24d50 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2415c:	e0bfff17 	ldw	r2,-4(fp)
   24160:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   24164:	e0bfff17 	ldw	r2,-4(fp)
   24168:	10800204 	addi	r2,r2,8
   2416c:	d0e6b117 	ldw	r3,-25916(gp)
   24170:	e1ffff17 	ldw	r7,-4(fp)
   24174:	018000b4 	movhi	r6,2
   24178:	3190f004 	addi	r6,r6,17344
   2417c:	180b883a 	mov	r5,r3
   24180:	1009883a 	mov	r4,r2
   24184:	0024a040 	call	24a04 <alt_alarm_start>
   24188:	1000040e 	bge	r2,zero,2419c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2418c:	e0ffff17 	ldw	r3,-4(fp)
   24190:	00a00034 	movhi	r2,32768
   24194:	10bfffc4 	addi	r2,r2,-1
   24198:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2419c:	0001883a 	nop
   241a0:	e037883a 	mov	sp,fp
   241a4:	dfc00117 	ldw	ra,4(sp)
   241a8:	df000017 	ldw	fp,0(sp)
   241ac:	dec00204 	addi	sp,sp,8
   241b0:	f800283a 	ret

000241b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   241b4:	defff804 	addi	sp,sp,-32
   241b8:	df000715 	stw	fp,28(sp)
   241bc:	df000704 	addi	fp,sp,28
   241c0:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   241c4:	e0bff917 	ldw	r2,-28(fp)
   241c8:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   241cc:	e0bffd17 	ldw	r2,-12(fp)
   241d0:	10800017 	ldw	r2,0(r2)
   241d4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   241d8:	e0bffc17 	ldw	r2,-16(fp)
   241dc:	10800104 	addi	r2,r2,4
   241e0:	10800037 	ldwio	r2,0(r2)
   241e4:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   241e8:	e0bffb17 	ldw	r2,-20(fp)
   241ec:	1080c00c 	andi	r2,r2,768
   241f0:	10006d26 	beq	r2,zero,243a8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   241f4:	e0bffb17 	ldw	r2,-20(fp)
   241f8:	1080400c 	andi	r2,r2,256
   241fc:	10003526 	beq	r2,zero,242d4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   24200:	00800074 	movhi	r2,1
   24204:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24208:	e0bffd17 	ldw	r2,-12(fp)
   2420c:	10800a17 	ldw	r2,40(r2)
   24210:	10800044 	addi	r2,r2,1
   24214:	1081ffcc 	andi	r2,r2,2047
   24218:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   2421c:	e0bffd17 	ldw	r2,-12(fp)
   24220:	10800b17 	ldw	r2,44(r2)
   24224:	e0fffa17 	ldw	r3,-24(fp)
   24228:	18801526 	beq	r3,r2,24280 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2422c:	e0bffc17 	ldw	r2,-16(fp)
   24230:	10800037 	ldwio	r2,0(r2)
   24234:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   24238:	e0bfff17 	ldw	r2,-4(fp)
   2423c:	10a0000c 	andi	r2,r2,32768
   24240:	10001126 	beq	r2,zero,24288 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   24244:	e0bffd17 	ldw	r2,-12(fp)
   24248:	10800a17 	ldw	r2,40(r2)
   2424c:	e0ffff17 	ldw	r3,-4(fp)
   24250:	1809883a 	mov	r4,r3
   24254:	e0fffd17 	ldw	r3,-12(fp)
   24258:	1885883a 	add	r2,r3,r2
   2425c:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24260:	e0bffd17 	ldw	r2,-12(fp)
   24264:	10800a17 	ldw	r2,40(r2)
   24268:	10800044 	addi	r2,r2,1
   2426c:	10c1ffcc 	andi	r3,r2,2047
   24270:	e0bffd17 	ldw	r2,-12(fp)
   24274:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   24278:	0001883a 	nop
      {
   2427c:	003fe206 	br	24208 <altera_avalon_jtag_uart_irq+0x54>
          break;
   24280:	0001883a 	nop
   24284:	00000106 	br	2428c <altera_avalon_jtag_uart_irq+0xd8>
          break;
   24288:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2428c:	e0bfff17 	ldw	r2,-4(fp)
   24290:	10bfffec 	andhi	r2,r2,65535
   24294:	10000f26 	beq	r2,zero,242d4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24298:	e0bffd17 	ldw	r2,-12(fp)
   2429c:	10c00817 	ldw	r3,32(r2)
   242a0:	00bfff84 	movi	r2,-2
   242a4:	1886703a 	and	r3,r3,r2
   242a8:	e0bffd17 	ldw	r2,-12(fp)
   242ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   242b0:	e0bffc17 	ldw	r2,-16(fp)
   242b4:	10800104 	addi	r2,r2,4
   242b8:	1007883a 	mov	r3,r2
   242bc:	e0bffd17 	ldw	r2,-12(fp)
   242c0:	10800817 	ldw	r2,32(r2)
   242c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   242c8:	e0bffc17 	ldw	r2,-16(fp)
   242cc:	10800104 	addi	r2,r2,4
   242d0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   242d4:	e0bffb17 	ldw	r2,-20(fp)
   242d8:	1080800c 	andi	r2,r2,512
   242dc:	103fbe26 	beq	r2,zero,241d8 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   242e0:	e0bffb17 	ldw	r2,-20(fp)
   242e4:	1004d43a 	srli	r2,r2,16
   242e8:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   242ec:	00001406 	br	24340 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   242f0:	e0bffc17 	ldw	r2,-16(fp)
   242f4:	e0fffd17 	ldw	r3,-12(fp)
   242f8:	18c00d17 	ldw	r3,52(r3)
   242fc:	e13ffd17 	ldw	r4,-12(fp)
   24300:	20c7883a 	add	r3,r4,r3
   24304:	18c20e03 	ldbu	r3,2104(r3)
   24308:	18c03fcc 	andi	r3,r3,255
   2430c:	18c0201c 	xori	r3,r3,128
   24310:	18ffe004 	addi	r3,r3,-128
   24314:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24318:	e0bffd17 	ldw	r2,-12(fp)
   2431c:	10800d17 	ldw	r2,52(r2)
   24320:	10800044 	addi	r2,r2,1
   24324:	10c1ffcc 	andi	r3,r2,2047
   24328:	e0bffd17 	ldw	r2,-12(fp)
   2432c:	10c00d15 	stw	r3,52(r2)
   24330:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   24334:	e0bffe17 	ldw	r2,-8(fp)
   24338:	10bfffc4 	addi	r2,r2,-1
   2433c:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   24340:	e0bffe17 	ldw	r2,-8(fp)
   24344:	10000526 	beq	r2,zero,2435c <altera_avalon_jtag_uart_irq+0x1a8>
   24348:	e0bffd17 	ldw	r2,-12(fp)
   2434c:	10c00d17 	ldw	r3,52(r2)
   24350:	e0bffd17 	ldw	r2,-12(fp)
   24354:	10800c17 	ldw	r2,48(r2)
   24358:	18bfe51e 	bne	r3,r2,242f0 <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
   2435c:	e0bffe17 	ldw	r2,-8(fp)
   24360:	103f9d26 	beq	r2,zero,241d8 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24364:	e0bffd17 	ldw	r2,-12(fp)
   24368:	10c00817 	ldw	r3,32(r2)
   2436c:	00bfff44 	movi	r2,-3
   24370:	1886703a 	and	r3,r3,r2
   24374:	e0bffd17 	ldw	r2,-12(fp)
   24378:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2437c:	e0bffd17 	ldw	r2,-12(fp)
   24380:	10800017 	ldw	r2,0(r2)
   24384:	10800104 	addi	r2,r2,4
   24388:	1007883a 	mov	r3,r2
   2438c:	e0bffd17 	ldw	r2,-12(fp)
   24390:	10800817 	ldw	r2,32(r2)
   24394:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24398:	e0bffc17 	ldw	r2,-16(fp)
   2439c:	10800104 	addi	r2,r2,4
   243a0:	10800037 	ldwio	r2,0(r2)
  {
   243a4:	003f8c06 	br	241d8 <altera_avalon_jtag_uart_irq+0x24>
      break;
   243a8:	0001883a 	nop
      }
    }
  }
}
   243ac:	0001883a 	nop
   243b0:	e037883a 	mov	sp,fp
   243b4:	df000017 	ldw	fp,0(sp)
   243b8:	dec00104 	addi	sp,sp,4
   243bc:	f800283a 	ret

000243c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   243c0:	defffc04 	addi	sp,sp,-16
   243c4:	df000315 	stw	fp,12(sp)
   243c8:	df000304 	addi	fp,sp,12
   243cc:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   243d0:	e0bffd17 	ldw	r2,-12(fp)
   243d4:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   243d8:	e0bfff17 	ldw	r2,-4(fp)
   243dc:	10800017 	ldw	r2,0(r2)
   243e0:	10800104 	addi	r2,r2,4
   243e4:	10800037 	ldwio	r2,0(r2)
   243e8:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   243ec:	e0bffe17 	ldw	r2,-8(fp)
   243f0:	1081000c 	andi	r2,r2,1024
   243f4:	10000b26 	beq	r2,zero,24424 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   243f8:	e0bfff17 	ldw	r2,-4(fp)
   243fc:	10800017 	ldw	r2,0(r2)
   24400:	10800104 	addi	r2,r2,4
   24404:	1007883a 	mov	r3,r2
   24408:	e0bfff17 	ldw	r2,-4(fp)
   2440c:	10800817 	ldw	r2,32(r2)
   24410:	10810014 	ori	r2,r2,1024
   24414:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   24418:	e0bfff17 	ldw	r2,-4(fp)
   2441c:	10000915 	stw	zero,36(r2)
   24420:	00000a06 	br	2444c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   24424:	e0bfff17 	ldw	r2,-4(fp)
   24428:	10c00917 	ldw	r3,36(r2)
   2442c:	00a00034 	movhi	r2,32768
   24430:	10bfff04 	addi	r2,r2,-4
   24434:	10c00536 	bltu	r2,r3,2444c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   24438:	e0bfff17 	ldw	r2,-4(fp)
   2443c:	10800917 	ldw	r2,36(r2)
   24440:	10c00044 	addi	r3,r2,1
   24444:	e0bfff17 	ldw	r2,-4(fp)
   24448:	10c00915 	stw	r3,36(r2)
   2444c:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   24450:	e037883a 	mov	sp,fp
   24454:	df000017 	ldw	fp,0(sp)
   24458:	dec00104 	addi	sp,sp,4
   2445c:	f800283a 	ret

00024460 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   24460:	defffd04 	addi	sp,sp,-12
   24464:	df000215 	stw	fp,8(sp)
   24468:	df000204 	addi	fp,sp,8
   2446c:	e13fff15 	stw	r4,-4(fp)
   24470:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24474:	00000506 	br	2448c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   24478:	e0bffe17 	ldw	r2,-8(fp)
   2447c:	1090000c 	andi	r2,r2,16384
   24480:	10000226 	beq	r2,zero,2448c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   24484:	00bffd44 	movi	r2,-11
   24488:	00000b06 	br	244b8 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2448c:	e0bfff17 	ldw	r2,-4(fp)
   24490:	10c00d17 	ldw	r3,52(r2)
   24494:	e0bfff17 	ldw	r2,-4(fp)
   24498:	10800c17 	ldw	r2,48(r2)
   2449c:	18800526 	beq	r3,r2,244b4 <altera_avalon_jtag_uart_close+0x54>
   244a0:	e0bfff17 	ldw	r2,-4(fp)
   244a4:	10c00917 	ldw	r3,36(r2)
   244a8:	e0bfff17 	ldw	r2,-4(fp)
   244ac:	10800117 	ldw	r2,4(r2)
   244b0:	18bff136 	bltu	r3,r2,24478 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   244b4:	0005883a 	mov	r2,zero
}
   244b8:	e037883a 	mov	sp,fp
   244bc:	df000017 	ldw	fp,0(sp)
   244c0:	dec00104 	addi	sp,sp,4
   244c4:	f800283a 	ret

000244c8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   244c8:	defffa04 	addi	sp,sp,-24
   244cc:	df000515 	stw	fp,20(sp)
   244d0:	df000504 	addi	fp,sp,20
   244d4:	e13ffd15 	stw	r4,-12(fp)
   244d8:	e17ffc15 	stw	r5,-16(fp)
   244dc:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   244e0:	00bff9c4 	movi	r2,-25
   244e4:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   244e8:	e0bffc17 	ldw	r2,-16(fp)
   244ec:	109a8060 	cmpeqi	r2,r2,27137
   244f0:	1000041e 	bne	r2,zero,24504 <altera_avalon_jtag_uart_ioctl+0x3c>
   244f4:	e0bffc17 	ldw	r2,-16(fp)
   244f8:	109a80a0 	cmpeqi	r2,r2,27138
   244fc:	1000181e 	bne	r2,zero,24560 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   24500:	00002906 	br	245a8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   24504:	e0bffd17 	ldw	r2,-12(fp)
   24508:	10c00117 	ldw	r3,4(r2)
   2450c:	00a00034 	movhi	r2,32768
   24510:	10bfffc4 	addi	r2,r2,-1
   24514:	18802126 	beq	r3,r2,2459c <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   24518:	e0bffb17 	ldw	r2,-20(fp)
   2451c:	10800017 	ldw	r2,0(r2)
   24520:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   24524:	e0bffe17 	ldw	r2,-8(fp)
   24528:	10800090 	cmplti	r2,r2,2
   2452c:	1000061e 	bne	r2,zero,24548 <altera_avalon_jtag_uart_ioctl+0x80>
   24530:	e0fffe17 	ldw	r3,-8(fp)
   24534:	00a00034 	movhi	r2,32768
   24538:	10bfffc4 	addi	r2,r2,-1
   2453c:	18800226 	beq	r3,r2,24548 <altera_avalon_jtag_uart_ioctl+0x80>
   24540:	e0bffe17 	ldw	r2,-8(fp)
   24544:	00000206 	br	24550 <altera_avalon_jtag_uart_ioctl+0x88>
   24548:	00a00034 	movhi	r2,32768
   2454c:	10bfff84 	addi	r2,r2,-2
   24550:	e0fffd17 	ldw	r3,-12(fp)
   24554:	18800115 	stw	r2,4(r3)
      rc = 0;
   24558:	e03fff15 	stw	zero,-4(fp)
    break;
   2455c:	00000f06 	br	2459c <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   24560:	e0bffd17 	ldw	r2,-12(fp)
   24564:	10c00117 	ldw	r3,4(r2)
   24568:	00a00034 	movhi	r2,32768
   2456c:	10bfffc4 	addi	r2,r2,-1
   24570:	18800c26 	beq	r3,r2,245a4 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   24574:	e0bffd17 	ldw	r2,-12(fp)
   24578:	10c00917 	ldw	r3,36(r2)
   2457c:	e0bffd17 	ldw	r2,-12(fp)
   24580:	10800117 	ldw	r2,4(r2)
   24584:	1885803a 	cmpltu	r2,r3,r2
   24588:	10c03fcc 	andi	r3,r2,255
   2458c:	e0bffb17 	ldw	r2,-20(fp)
   24590:	10c00015 	stw	r3,0(r2)
      rc = 0;
   24594:	e03fff15 	stw	zero,-4(fp)
    break;
   24598:	00000206 	br	245a4 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   2459c:	0001883a 	nop
   245a0:	00000106 	br	245a8 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   245a4:	0001883a 	nop
  }

  return rc;
   245a8:	e0bfff17 	ldw	r2,-4(fp)
}
   245ac:	e037883a 	mov	sp,fp
   245b0:	df000017 	ldw	fp,0(sp)
   245b4:	dec00104 	addi	sp,sp,4
   245b8:	f800283a 	ret

000245bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   245bc:	defff304 	addi	sp,sp,-52
   245c0:	dfc00c15 	stw	ra,48(sp)
   245c4:	df000b15 	stw	fp,44(sp)
   245c8:	df000b04 	addi	fp,sp,44
   245cc:	e13ff815 	stw	r4,-32(fp)
   245d0:	e17ff715 	stw	r5,-36(fp)
   245d4:	e1bff615 	stw	r6,-40(fp)
   245d8:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   245dc:	e0bff717 	ldw	r2,-36(fp)
   245e0:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   245e4:	00004706 	br	24704 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   245e8:	e0bff817 	ldw	r2,-32(fp)
   245ec:	10800a17 	ldw	r2,40(r2)
   245f0:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   245f4:	e0bff817 	ldw	r2,-32(fp)
   245f8:	10800b17 	ldw	r2,44(r2)
   245fc:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   24600:	e0fffd17 	ldw	r3,-12(fp)
   24604:	e0bffc17 	ldw	r2,-16(fp)
   24608:	18800536 	bltu	r3,r2,24620 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2460c:	e0fffd17 	ldw	r3,-12(fp)
   24610:	e0bffc17 	ldw	r2,-16(fp)
   24614:	1885c83a 	sub	r2,r3,r2
   24618:	e0bffe15 	stw	r2,-8(fp)
   2461c:	00000406 	br	24630 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   24620:	00c20004 	movi	r3,2048
   24624:	e0bffc17 	ldw	r2,-16(fp)
   24628:	1885c83a 	sub	r2,r3,r2
   2462c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   24630:	e0bffe17 	ldw	r2,-8(fp)
   24634:	10001e26 	beq	r2,zero,246b0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   24638:	e0fff617 	ldw	r3,-40(fp)
   2463c:	e0bffe17 	ldw	r2,-8(fp)
   24640:	1880022e 	bgeu	r3,r2,2464c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   24644:	e0bff617 	ldw	r2,-40(fp)
   24648:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2464c:	e0bff817 	ldw	r2,-32(fp)
   24650:	10c00e04 	addi	r3,r2,56
   24654:	e0bffc17 	ldw	r2,-16(fp)
   24658:	1885883a 	add	r2,r3,r2
   2465c:	e1bffe17 	ldw	r6,-8(fp)
   24660:	100b883a 	mov	r5,r2
   24664:	e13fff17 	ldw	r4,-4(fp)
   24668:	0021a300 	call	21a30 <memcpy>
      ptr   += n;
   2466c:	e0ffff17 	ldw	r3,-4(fp)
   24670:	e0bffe17 	ldw	r2,-8(fp)
   24674:	1885883a 	add	r2,r3,r2
   24678:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   2467c:	e0fff617 	ldw	r3,-40(fp)
   24680:	e0bffe17 	ldw	r2,-8(fp)
   24684:	1885c83a 	sub	r2,r3,r2
   24688:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2468c:	e0fffc17 	ldw	r3,-16(fp)
   24690:	e0bffe17 	ldw	r2,-8(fp)
   24694:	1885883a 	add	r2,r3,r2
   24698:	10c1ffcc 	andi	r3,r2,2047
   2469c:	e0bff817 	ldw	r2,-32(fp)
   246a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   246a4:	e0bff617 	ldw	r2,-40(fp)
   246a8:	00bfcf16 	blt	zero,r2,245e8 <altera_avalon_jtag_uart_read+0x2c>
   246ac:	00000106 	br	246b4 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   246b0:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   246b4:	e0ffff17 	ldw	r3,-4(fp)
   246b8:	e0bff717 	ldw	r2,-36(fp)
   246bc:	1880141e 	bne	r3,r2,24710 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   246c0:	e0bff517 	ldw	r2,-44(fp)
   246c4:	1090000c 	andi	r2,r2,16384
   246c8:	1000131e 	bne	r2,zero,24718 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   246cc:	0001883a 	nop
   246d0:	e0bff817 	ldw	r2,-32(fp)
   246d4:	10800a17 	ldw	r2,40(r2)
   246d8:	e0fffd17 	ldw	r3,-12(fp)
   246dc:	1880051e 	bne	r3,r2,246f4 <altera_avalon_jtag_uart_read+0x138>
   246e0:	e0bff817 	ldw	r2,-32(fp)
   246e4:	10c00917 	ldw	r3,36(r2)
   246e8:	e0bff817 	ldw	r2,-32(fp)
   246ec:	10800117 	ldw	r2,4(r2)
   246f0:	18bff736 	bltu	r3,r2,246d0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   246f4:	e0bff817 	ldw	r2,-32(fp)
   246f8:	10800a17 	ldw	r2,40(r2)
   246fc:	e0fffd17 	ldw	r3,-12(fp)
   24700:	18800726 	beq	r3,r2,24720 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   24704:	e0bff617 	ldw	r2,-40(fp)
   24708:	00bfb716 	blt	zero,r2,245e8 <altera_avalon_jtag_uart_read+0x2c>
   2470c:	00000506 	br	24724 <altera_avalon_jtag_uart_read+0x168>
      break;
   24710:	0001883a 	nop
   24714:	00000306 	br	24724 <altera_avalon_jtag_uart_read+0x168>
      break;
   24718:	0001883a 	nop
   2471c:	00000106 	br	24724 <altera_avalon_jtag_uart_read+0x168>
      break;
   24720:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   24724:	e0ffff17 	ldw	r3,-4(fp)
   24728:	e0bff717 	ldw	r2,-36(fp)
   2472c:	18801926 	beq	r3,r2,24794 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   24730:	0005303a 	rdctl	r2,status
   24734:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24738:	e0fff917 	ldw	r3,-28(fp)
   2473c:	00bfff84 	movi	r2,-2
   24740:	1884703a 	and	r2,r3,r2
   24744:	1001703a 	wrctl	status,r2
  return context;
   24748:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2474c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24750:	e0bff817 	ldw	r2,-32(fp)
   24754:	10800817 	ldw	r2,32(r2)
   24758:	10c00054 	ori	r3,r2,1
   2475c:	e0bff817 	ldw	r2,-32(fp)
   24760:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24764:	e0bff817 	ldw	r2,-32(fp)
   24768:	10800017 	ldw	r2,0(r2)
   2476c:	10800104 	addi	r2,r2,4
   24770:	1007883a 	mov	r3,r2
   24774:	e0bff817 	ldw	r2,-32(fp)
   24778:	10800817 	ldw	r2,32(r2)
   2477c:	18800035 	stwio	r2,0(r3)
   24780:	e0bffb17 	ldw	r2,-20(fp)
   24784:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   24788:	e0bffa17 	ldw	r2,-24(fp)
   2478c:	1001703a 	wrctl	status,r2
}
   24790:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   24794:	e0ffff17 	ldw	r3,-4(fp)
   24798:	e0bff717 	ldw	r2,-36(fp)
   2479c:	18800426 	beq	r3,r2,247b0 <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   247a0:	e0ffff17 	ldw	r3,-4(fp)
   247a4:	e0bff717 	ldw	r2,-36(fp)
   247a8:	1885c83a 	sub	r2,r3,r2
   247ac:	00000606 	br	247c8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   247b0:	e0bff517 	ldw	r2,-44(fp)
   247b4:	1090000c 	andi	r2,r2,16384
   247b8:	10000226 	beq	r2,zero,247c4 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   247bc:	00bffd44 	movi	r2,-11
   247c0:	00000106 	br	247c8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   247c4:	00bffec4 	movi	r2,-5
}
   247c8:	e037883a 	mov	sp,fp
   247cc:	dfc00117 	ldw	ra,4(sp)
   247d0:	df000017 	ldw	fp,0(sp)
   247d4:	dec00204 	addi	sp,sp,8
   247d8:	f800283a 	ret

000247dc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   247dc:	defff304 	addi	sp,sp,-52
   247e0:	dfc00c15 	stw	ra,48(sp)
   247e4:	df000b15 	stw	fp,44(sp)
   247e8:	df000b04 	addi	fp,sp,44
   247ec:	e13ff815 	stw	r4,-32(fp)
   247f0:	e17ff715 	stw	r5,-36(fp)
   247f4:	e1bff615 	stw	r6,-40(fp)
   247f8:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   247fc:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   24800:	e0bff717 	ldw	r2,-36(fp)
   24804:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24808:	00003706 	br	248e8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2480c:	e0bff817 	ldw	r2,-32(fp)
   24810:	10800c17 	ldw	r2,48(r2)
   24814:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   24818:	e0bff817 	ldw	r2,-32(fp)
   2481c:	10800d17 	ldw	r2,52(r2)
   24820:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   24824:	e0fffc17 	ldw	r3,-16(fp)
   24828:	e0bfff17 	ldw	r2,-4(fp)
   2482c:	1880062e 	bgeu	r3,r2,24848 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   24830:	e0ffff17 	ldw	r3,-4(fp)
   24834:	e0bffc17 	ldw	r2,-16(fp)
   24838:	1885c83a 	sub	r2,r3,r2
   2483c:	10bfffc4 	addi	r2,r2,-1
   24840:	e0bffe15 	stw	r2,-8(fp)
   24844:	00000b06 	br	24874 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   24848:	e0bfff17 	ldw	r2,-4(fp)
   2484c:	10000526 	beq	r2,zero,24864 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24850:	00c20004 	movi	r3,2048
   24854:	e0bffc17 	ldw	r2,-16(fp)
   24858:	1885c83a 	sub	r2,r3,r2
   2485c:	e0bffe15 	stw	r2,-8(fp)
   24860:	00000406 	br	24874 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24864:	00c1ffc4 	movi	r3,2047
   24868:	e0bffc17 	ldw	r2,-16(fp)
   2486c:	1885c83a 	sub	r2,r3,r2
   24870:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   24874:	e0bffe17 	ldw	r2,-8(fp)
   24878:	10001e26 	beq	r2,zero,248f4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2487c:	e0fff617 	ldw	r3,-40(fp)
   24880:	e0bffe17 	ldw	r2,-8(fp)
   24884:	1880022e 	bgeu	r3,r2,24890 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   24888:	e0bff617 	ldw	r2,-40(fp)
   2488c:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   24890:	e0bff817 	ldw	r2,-32(fp)
   24894:	10c20e04 	addi	r3,r2,2104
   24898:	e0bffc17 	ldw	r2,-16(fp)
   2489c:	1885883a 	add	r2,r3,r2
   248a0:	e1bffe17 	ldw	r6,-8(fp)
   248a4:	e17ff717 	ldw	r5,-36(fp)
   248a8:	1009883a 	mov	r4,r2
   248ac:	0021a300 	call	21a30 <memcpy>
      ptr   += n;
   248b0:	e0fff717 	ldw	r3,-36(fp)
   248b4:	e0bffe17 	ldw	r2,-8(fp)
   248b8:	1885883a 	add	r2,r3,r2
   248bc:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   248c0:	e0fff617 	ldw	r3,-40(fp)
   248c4:	e0bffe17 	ldw	r2,-8(fp)
   248c8:	1885c83a 	sub	r2,r3,r2
   248cc:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   248d0:	e0fffc17 	ldw	r3,-16(fp)
   248d4:	e0bffe17 	ldw	r2,-8(fp)
   248d8:	1885883a 	add	r2,r3,r2
   248dc:	10c1ffcc 	andi	r3,r2,2047
   248e0:	e0bff817 	ldw	r2,-32(fp)
   248e4:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   248e8:	e0bff617 	ldw	r2,-40(fp)
   248ec:	00bfc716 	blt	zero,r2,2480c <altera_avalon_jtag_uart_write+0x30>
   248f0:	00000106 	br	248f8 <altera_avalon_jtag_uart_write+0x11c>
        break;
   248f4:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   248f8:	0005303a 	rdctl	r2,status
   248fc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24900:	e0fff917 	ldw	r3,-28(fp)
   24904:	00bfff84 	movi	r2,-2
   24908:	1884703a 	and	r2,r3,r2
   2490c:	1001703a 	wrctl	status,r2
  return context;
   24910:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   24914:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24918:	e0bff817 	ldw	r2,-32(fp)
   2491c:	10800817 	ldw	r2,32(r2)
   24920:	10c00094 	ori	r3,r2,2
   24924:	e0bff817 	ldw	r2,-32(fp)
   24928:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2492c:	e0bff817 	ldw	r2,-32(fp)
   24930:	10800017 	ldw	r2,0(r2)
   24934:	10800104 	addi	r2,r2,4
   24938:	1007883a 	mov	r3,r2
   2493c:	e0bff817 	ldw	r2,-32(fp)
   24940:	10800817 	ldw	r2,32(r2)
   24944:	18800035 	stwio	r2,0(r3)
   24948:	e0bffb17 	ldw	r2,-20(fp)
   2494c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   24950:	e0bffa17 	ldw	r2,-24(fp)
   24954:	1001703a 	wrctl	status,r2
}
   24958:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2495c:	e0bff617 	ldw	r2,-40(fp)
   24960:	0080100e 	bge	zero,r2,249a4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   24964:	e0bff517 	ldw	r2,-44(fp)
   24968:	1090000c 	andi	r2,r2,16384
   2496c:	1000101e 	bne	r2,zero,249b0 <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   24970:	0001883a 	nop
   24974:	e0bff817 	ldw	r2,-32(fp)
   24978:	10800d17 	ldw	r2,52(r2)
   2497c:	e0ffff17 	ldw	r3,-4(fp)
   24980:	1880051e 	bne	r3,r2,24998 <altera_avalon_jtag_uart_write+0x1bc>
   24984:	e0bff817 	ldw	r2,-32(fp)
   24988:	10c00917 	ldw	r3,36(r2)
   2498c:	e0bff817 	ldw	r2,-32(fp)
   24990:	10800117 	ldw	r2,4(r2)
   24994:	18bff736 	bltu	r3,r2,24974 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   24998:	e0bff817 	ldw	r2,-32(fp)
   2499c:	10800917 	ldw	r2,36(r2)
   249a0:	1000051e 	bne	r2,zero,249b8 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   249a4:	e0bff617 	ldw	r2,-40(fp)
   249a8:	00bfcf16 	blt	zero,r2,248e8 <altera_avalon_jtag_uart_write+0x10c>
   249ac:	00000306 	br	249bc <altera_avalon_jtag_uart_write+0x1e0>
        break;
   249b0:	0001883a 	nop
   249b4:	00000106 	br	249bc <altera_avalon_jtag_uart_write+0x1e0>
         break;
   249b8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   249bc:	e0fff717 	ldw	r3,-36(fp)
   249c0:	e0bffd17 	ldw	r2,-12(fp)
   249c4:	18800426 	beq	r3,r2,249d8 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   249c8:	e0fff717 	ldw	r3,-36(fp)
   249cc:	e0bffd17 	ldw	r2,-12(fp)
   249d0:	1885c83a 	sub	r2,r3,r2
   249d4:	00000606 	br	249f0 <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   249d8:	e0bff517 	ldw	r2,-44(fp)
   249dc:	1090000c 	andi	r2,r2,16384
   249e0:	10000226 	beq	r2,zero,249ec <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   249e4:	00bffd44 	movi	r2,-11
   249e8:	00000106 	br	249f0 <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   249ec:	00bffec4 	movi	r2,-5
}
   249f0:	e037883a 	mov	sp,fp
   249f4:	dfc00117 	ldw	ra,4(sp)
   249f8:	df000017 	ldw	fp,0(sp)
   249fc:	dec00204 	addi	sp,sp,8
   24a00:	f800283a 	ret

00024a04 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   24a04:	defff404 	addi	sp,sp,-48
   24a08:	df000b15 	stw	fp,44(sp)
   24a0c:	df000b04 	addi	fp,sp,44
   24a10:	e13ff815 	stw	r4,-32(fp)
   24a14:	e17ff715 	stw	r5,-36(fp)
   24a18:	e1bff615 	stw	r6,-40(fp)
   24a1c:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   24a20:	e03ffe15 	stw	zero,-8(fp)
   24a24:	e03fff15 	stw	zero,-4(fp)
   24a28:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
   24a2c:	10004826 	beq	r2,zero,24b50 <alt_alarm_start+0x14c>
  {
    if (alarm)
   24a30:	e0bff817 	ldw	r2,-32(fp)
   24a34:	10004426 	beq	r2,zero,24b48 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   24a38:	e0bff817 	ldw	r2,-32(fp)
   24a3c:	e0fff617 	ldw	r3,-40(fp)
   24a40:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   24a44:	e0bff817 	ldw	r2,-32(fp)
   24a48:	e0fff517 	ldw	r3,-44(fp)
   24a4c:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   24a50:	0005303a 	rdctl	r2,status
   24a54:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24a58:	e0fff917 	ldw	r3,-28(fp)
   24a5c:	00bfff84 	movi	r2,-2
   24a60:	1884703a 	and	r2,r3,r2
   24a64:	1001703a 	wrctl	status,r2
  return context;
   24a68:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   24a6c:	e0bffd15 	stw	r2,-12(fp)
  return _alt_nticks;
   24a70:	d0a6b217 	ldw	r2,-25912(gp)
   24a74:	d0e6b317 	ldw	r3,-25908(gp)
      
      current_nticks = alt_nticks();
   24a78:	e0bffe15 	stw	r2,-8(fp)
   24a7c:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   24a80:	e0bff717 	ldw	r2,-36(fp)
   24a84:	1011883a 	mov	r8,r2
   24a88:	0013883a 	mov	r9,zero
   24a8c:	e13ffe17 	ldw	r4,-8(fp)
   24a90:	e17fff17 	ldw	r5,-4(fp)
   24a94:	4105883a 	add	r2,r8,r4
   24a98:	120d803a 	cmpltu	r6,r2,r8
   24a9c:	4947883a 	add	r3,r9,r5
   24aa0:	30c9883a 	add	r4,r6,r3
   24aa4:	2007883a 	mov	r3,r4
   24aa8:	1009883a 	mov	r4,r2
   24aac:	180b883a 	mov	r5,r3
   24ab0:	01800044 	movi	r6,1
   24ab4:	000f883a 	mov	r7,zero
   24ab8:	2185883a 	add	r2,r4,r6
   24abc:	1111803a 	cmpltu	r8,r2,r4
   24ac0:	29c7883a 	add	r3,r5,r7
   24ac4:	40c9883a 	add	r4,r8,r3
   24ac8:	2007883a 	mov	r3,r4
   24acc:	1009883a 	mov	r4,r2
   24ad0:	180b883a 	mov	r5,r3
   24ad4:	e0bff817 	ldw	r2,-32(fp)
   24ad8:	11000215 	stw	r4,8(r2)
   24adc:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   24ae0:	e0bff817 	ldw	r2,-32(fp)
   24ae4:	d0e00c04 	addi	r3,gp,-32720
   24ae8:	e0fffb15 	stw	r3,-20(fp)
   24aec:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24af0:	e0bffa17 	ldw	r2,-24(fp)
   24af4:	e0fffb17 	ldw	r3,-20(fp)
   24af8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24afc:	e0bffb17 	ldw	r2,-20(fp)
   24b00:	10c00017 	ldw	r3,0(r2)
   24b04:	e0bffa17 	ldw	r2,-24(fp)
   24b08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24b0c:	e0bffb17 	ldw	r2,-20(fp)
   24b10:	10800017 	ldw	r2,0(r2)
   24b14:	e0fffa17 	ldw	r3,-24(fp)
   24b18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24b1c:	e0bffb17 	ldw	r2,-20(fp)
   24b20:	e0fffa17 	ldw	r3,-24(fp)
   24b24:	10c00015 	stw	r3,0(r2)
}
   24b28:	0001883a 	nop
   24b2c:	e0bffd17 	ldw	r2,-12(fp)
   24b30:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   24b34:	e0bffc17 	ldw	r2,-16(fp)
   24b38:	1001703a 	wrctl	status,r2
}
   24b3c:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   24b40:	0005883a 	mov	r2,zero
   24b44:	00000306 	br	24b54 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   24b48:	00bffa84 	movi	r2,-22
   24b4c:	00000106 	br	24b54 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   24b50:	00bfde84 	movi	r2,-134
  }
}
   24b54:	e037883a 	mov	sp,fp
   24b58:	df000017 	ldw	fp,0(sp)
   24b5c:	dec00104 	addi	sp,sp,4
   24b60:	f800283a 	ret

00024b64 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24b64:	deffff04 	addi	sp,sp,-4
   24b68:	df000015 	stw	fp,0(sp)
   24b6c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24b70:	0001883a 	nop
   24b74:	e037883a 	mov	sp,fp
   24b78:	df000017 	ldw	fp,0(sp)
   24b7c:	dec00104 	addi	sp,sp,4
   24b80:	f800283a 	ret

00024b84 <alt_get_errno>:
{
   24b84:	defffe04 	addi	sp,sp,-8
   24b88:	dfc00115 	stw	ra,4(sp)
   24b8c:	df000015 	stw	fp,0(sp)
   24b90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24b94:	d0a00917 	ldw	r2,-32732(gp)
   24b98:	10000326 	beq	r2,zero,24ba8 <alt_get_errno+0x24>
   24b9c:	d0a00917 	ldw	r2,-32732(gp)
   24ba0:	103ee83a 	callr	r2
   24ba4:	00000106 	br	24bac <alt_get_errno+0x28>
   24ba8:	d0a6ac04 	addi	r2,gp,-25936
}
   24bac:	e037883a 	mov	sp,fp
   24bb0:	dfc00117 	ldw	ra,4(sp)
   24bb4:	df000017 	ldw	fp,0(sp)
   24bb8:	dec00204 	addi	sp,sp,8
   24bbc:	f800283a 	ret

00024bc0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24bc0:	defffa04 	addi	sp,sp,-24
   24bc4:	dfc00515 	stw	ra,20(sp)
   24bc8:	df000415 	stw	fp,16(sp)
   24bcc:	df000404 	addi	fp,sp,16
   24bd0:	e13ffd15 	stw	r4,-12(fp)
   24bd4:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   24bd8:	e0bffd17 	ldw	r2,-12(fp)
   24bdc:	10000326 	beq	r2,zero,24bec <alt_dev_llist_insert+0x2c>
   24be0:	e0bffd17 	ldw	r2,-12(fp)
   24be4:	10800217 	ldw	r2,8(r2)
   24be8:	1000061e 	bne	r2,zero,24c04 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   24bec:	0024b840 	call	24b84 <alt_get_errno>
   24bf0:	1007883a 	mov	r3,r2
   24bf4:	00800584 	movi	r2,22
   24bf8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   24bfc:	00bffa84 	movi	r2,-22
   24c00:	00001406 	br	24c54 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   24c04:	e0bffd17 	ldw	r2,-12(fp)
   24c08:	e0fffc17 	ldw	r3,-16(fp)
   24c0c:	e0ffff15 	stw	r3,-4(fp)
   24c10:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   24c14:	e0bffe17 	ldw	r2,-8(fp)
   24c18:	e0ffff17 	ldw	r3,-4(fp)
   24c1c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24c20:	e0bfff17 	ldw	r2,-4(fp)
   24c24:	10c00017 	ldw	r3,0(r2)
   24c28:	e0bffe17 	ldw	r2,-8(fp)
   24c2c:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   24c30:	e0bfff17 	ldw	r2,-4(fp)
   24c34:	10800017 	ldw	r2,0(r2)
   24c38:	e0fffe17 	ldw	r3,-8(fp)
   24c3c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24c40:	e0bfff17 	ldw	r2,-4(fp)
   24c44:	e0fffe17 	ldw	r3,-8(fp)
   24c48:	10c00015 	stw	r3,0(r2)
}
   24c4c:	0001883a 	nop

  return 0;  
   24c50:	0005883a 	mov	r2,zero
}
   24c54:	e037883a 	mov	sp,fp
   24c58:	dfc00117 	ldw	ra,4(sp)
   24c5c:	df000017 	ldw	fp,0(sp)
   24c60:	dec00204 	addi	sp,sp,8
   24c64:	f800283a 	ret

00024c68 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   24c68:	defffd04 	addi	sp,sp,-12
   24c6c:	dfc00215 	stw	ra,8(sp)
   24c70:	df000115 	stw	fp,4(sp)
   24c74:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24c78:	008000b4 	movhi	r2,2
   24c7c:	1096cc04 	addi	r2,r2,23344
   24c80:	e0bfff15 	stw	r2,-4(fp)
   24c84:	00000606 	br	24ca0 <_do_ctors+0x38>
        (*ctor) (); 
   24c88:	e0bfff17 	ldw	r2,-4(fp)
   24c8c:	10800017 	ldw	r2,0(r2)
   24c90:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   24c94:	e0bfff17 	ldw	r2,-4(fp)
   24c98:	10bfff04 	addi	r2,r2,-4
   24c9c:	e0bfff15 	stw	r2,-4(fp)
   24ca0:	e0ffff17 	ldw	r3,-4(fp)
   24ca4:	008000b4 	movhi	r2,2
   24ca8:	1096cd04 	addi	r2,r2,23348
   24cac:	18bff62e 	bgeu	r3,r2,24c88 <_do_ctors+0x20>
}
   24cb0:	0001883a 	nop
   24cb4:	0001883a 	nop
   24cb8:	e037883a 	mov	sp,fp
   24cbc:	dfc00117 	ldw	ra,4(sp)
   24cc0:	df000017 	ldw	fp,0(sp)
   24cc4:	dec00204 	addi	sp,sp,8
   24cc8:	f800283a 	ret

00024ccc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   24ccc:	defffd04 	addi	sp,sp,-12
   24cd0:	dfc00215 	stw	ra,8(sp)
   24cd4:	df000115 	stw	fp,4(sp)
   24cd8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24cdc:	008000b4 	movhi	r2,2
   24ce0:	1096cc04 	addi	r2,r2,23344
   24ce4:	e0bfff15 	stw	r2,-4(fp)
   24ce8:	00000606 	br	24d04 <_do_dtors+0x38>
        (*dtor) (); 
   24cec:	e0bfff17 	ldw	r2,-4(fp)
   24cf0:	10800017 	ldw	r2,0(r2)
   24cf4:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24cf8:	e0bfff17 	ldw	r2,-4(fp)
   24cfc:	10bfff04 	addi	r2,r2,-4
   24d00:	e0bfff15 	stw	r2,-4(fp)
   24d04:	e0ffff17 	ldw	r3,-4(fp)
   24d08:	008000b4 	movhi	r2,2
   24d0c:	1096cd04 	addi	r2,r2,23348
   24d10:	18bff62e 	bgeu	r3,r2,24cec <_do_dtors+0x20>
}
   24d14:	0001883a 	nop
   24d18:	0001883a 	nop
   24d1c:	e037883a 	mov	sp,fp
   24d20:	dfc00117 	ldw	ra,4(sp)
   24d24:	df000017 	ldw	fp,0(sp)
   24d28:	dec00204 	addi	sp,sp,8
   24d2c:	f800283a 	ret

00024d30 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   24d30:	deffff04 	addi	sp,sp,-4
   24d34:	df000015 	stw	fp,0(sp)
   24d38:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   24d3c:	0001883a 	nop
   24d40:	e037883a 	mov	sp,fp
   24d44:	df000017 	ldw	fp,0(sp)
   24d48:	dec00104 	addi	sp,sp,4
   24d4c:	f800283a 	ret

00024d50 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24d50:	defff904 	addi	sp,sp,-28
   24d54:	dfc00615 	stw	ra,24(sp)
   24d58:	df000515 	stw	fp,20(sp)
   24d5c:	df000504 	addi	fp,sp,20
   24d60:	e13fff15 	stw	r4,-4(fp)
   24d64:	e17ffe15 	stw	r5,-8(fp)
   24d68:	e1bffd15 	stw	r6,-12(fp)
   24d6c:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   24d70:	e0800217 	ldw	r2,8(fp)
   24d74:	d8800015 	stw	r2,0(sp)
   24d78:	e1fffc17 	ldw	r7,-16(fp)
   24d7c:	e1bffd17 	ldw	r6,-12(fp)
   24d80:	e17ffe17 	ldw	r5,-8(fp)
   24d84:	e13fff17 	ldw	r4,-4(fp)
   24d88:	0024f000 	call	24f00 <alt_iic_isr_register>
}  
   24d8c:	e037883a 	mov	sp,fp
   24d90:	dfc00117 	ldw	ra,4(sp)
   24d94:	df000017 	ldw	fp,0(sp)
   24d98:	dec00204 	addi	sp,sp,8
   24d9c:	f800283a 	ret

00024da0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   24da0:	defff904 	addi	sp,sp,-28
   24da4:	df000615 	stw	fp,24(sp)
   24da8:	df000604 	addi	fp,sp,24
   24dac:	e13ffb15 	stw	r4,-20(fp)
   24db0:	e17ffa15 	stw	r5,-24(fp)
   24db4:	e0bffa17 	ldw	r2,-24(fp)
   24db8:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   24dbc:	0005303a 	rdctl	r2,status
   24dc0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24dc4:	e0fffe17 	ldw	r3,-8(fp)
   24dc8:	00bfff84 	movi	r2,-2
   24dcc:	1884703a 	and	r2,r3,r2
   24dd0:	1001703a 	wrctl	status,r2
  return context;
   24dd4:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24dd8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   24ddc:	00c00044 	movi	r3,1
   24de0:	e0bfff17 	ldw	r2,-4(fp)
   24de4:	1884983a 	sll	r2,r3,r2
   24de8:	1007883a 	mov	r3,r2
   24dec:	d0a6b017 	ldw	r2,-25920(gp)
   24df0:	1884b03a 	or	r2,r3,r2
   24df4:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24df8:	d0a6b017 	ldw	r2,-25920(gp)
   24dfc:	100170fa 	wrctl	ienable,r2
   24e00:	e0bffd17 	ldw	r2,-12(fp)
   24e04:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   24e08:	e0bffc17 	ldw	r2,-16(fp)
   24e0c:	1001703a 	wrctl	status,r2
}
   24e10:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   24e14:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   24e18:	e037883a 	mov	sp,fp
   24e1c:	df000017 	ldw	fp,0(sp)
   24e20:	dec00104 	addi	sp,sp,4
   24e24:	f800283a 	ret

00024e28 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   24e28:	defff904 	addi	sp,sp,-28
   24e2c:	df000615 	stw	fp,24(sp)
   24e30:	df000604 	addi	fp,sp,24
   24e34:	e13ffb15 	stw	r4,-20(fp)
   24e38:	e17ffa15 	stw	r5,-24(fp)
   24e3c:	e0bffa17 	ldw	r2,-24(fp)
   24e40:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   24e44:	0005303a 	rdctl	r2,status
   24e48:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24e4c:	e0fffe17 	ldw	r3,-8(fp)
   24e50:	00bfff84 	movi	r2,-2
   24e54:	1884703a 	and	r2,r3,r2
   24e58:	1001703a 	wrctl	status,r2
  return context;
   24e5c:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   24e60:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   24e64:	00c00044 	movi	r3,1
   24e68:	e0bfff17 	ldw	r2,-4(fp)
   24e6c:	1884983a 	sll	r2,r3,r2
   24e70:	0084303a 	nor	r2,zero,r2
   24e74:	1007883a 	mov	r3,r2
   24e78:	d0a6b017 	ldw	r2,-25920(gp)
   24e7c:	1884703a 	and	r2,r3,r2
   24e80:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24e84:	d0a6b017 	ldw	r2,-25920(gp)
   24e88:	100170fa 	wrctl	ienable,r2
   24e8c:	e0bffd17 	ldw	r2,-12(fp)
   24e90:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   24e94:	e0bffc17 	ldw	r2,-16(fp)
   24e98:	1001703a 	wrctl	status,r2
}
   24e9c:	0001883a 	nop
  return 0;
   24ea0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   24ea4:	e037883a 	mov	sp,fp
   24ea8:	df000017 	ldw	fp,0(sp)
   24eac:	dec00104 	addi	sp,sp,4
   24eb0:	f800283a 	ret

00024eb4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   24eb4:	defffc04 	addi	sp,sp,-16
   24eb8:	df000315 	stw	fp,12(sp)
   24ebc:	df000304 	addi	fp,sp,12
   24ec0:	e13ffe15 	stw	r4,-8(fp)
   24ec4:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   24ec8:	000530fa 	rdctl	r2,ienable
   24ecc:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   24ed0:	00c00044 	movi	r3,1
   24ed4:	e0bffd17 	ldw	r2,-12(fp)
   24ed8:	1884983a 	sll	r2,r3,r2
   24edc:	1007883a 	mov	r3,r2
   24ee0:	e0bfff17 	ldw	r2,-4(fp)
   24ee4:	1884703a 	and	r2,r3,r2
   24ee8:	1004c03a 	cmpne	r2,r2,zero
   24eec:	10803fcc 	andi	r2,r2,255
}
   24ef0:	e037883a 	mov	sp,fp
   24ef4:	df000017 	ldw	fp,0(sp)
   24ef8:	dec00104 	addi	sp,sp,4
   24efc:	f800283a 	ret

00024f00 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24f00:	defff504 	addi	sp,sp,-44
   24f04:	dfc00a15 	stw	ra,40(sp)
   24f08:	df000915 	stw	fp,36(sp)
   24f0c:	df000904 	addi	fp,sp,36
   24f10:	e13ffa15 	stw	r4,-24(fp)
   24f14:	e17ff915 	stw	r5,-28(fp)
   24f18:	e1bff815 	stw	r6,-32(fp)
   24f1c:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   24f20:	00bffa84 	movi	r2,-22
   24f24:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   24f28:	e0bff917 	ldw	r2,-28(fp)
   24f2c:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   24f30:	e0bffe17 	ldw	r2,-8(fp)
   24f34:	10800808 	cmpgei	r2,r2,32
   24f38:	1000251e 	bne	r2,zero,24fd0 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   24f3c:	0005303a 	rdctl	r2,status
   24f40:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24f44:	e0fffc17 	ldw	r3,-16(fp)
   24f48:	00bfff84 	movi	r2,-2
   24f4c:	1884703a 	and	r2,r3,r2
   24f50:	1001703a 	wrctl	status,r2
  return context;
   24f54:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   24f58:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   24f5c:	e0bffe17 	ldw	r2,-8(fp)
   24f60:	100890fa 	slli	r4,r2,3
   24f64:	e0fff817 	ldw	r3,-32(fp)
   24f68:	008000f4 	movhi	r2,3
   24f6c:	2085883a 	add	r2,r4,r2
   24f70:	10e42c15 	stw	r3,-28496(r2)
    alt_irq[id].context = isr_context;
   24f74:	e0bffe17 	ldw	r2,-8(fp)
   24f78:	100890fa 	slli	r4,r2,3
   24f7c:	e0fff717 	ldw	r3,-36(fp)
   24f80:	008000f4 	movhi	r2,3
   24f84:	2085883a 	add	r2,r4,r2
   24f88:	10e42d15 	stw	r3,-28492(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   24f8c:	e0bff817 	ldw	r2,-32(fp)
   24f90:	10000526 	beq	r2,zero,24fa8 <alt_iic_isr_register+0xa8>
   24f94:	e0bffe17 	ldw	r2,-8(fp)
   24f98:	100b883a 	mov	r5,r2
   24f9c:	e13ffa17 	ldw	r4,-24(fp)
   24fa0:	0024da00 	call	24da0 <alt_ic_irq_enable>
   24fa4:	00000406 	br	24fb8 <alt_iic_isr_register+0xb8>
   24fa8:	e0bffe17 	ldw	r2,-8(fp)
   24fac:	100b883a 	mov	r5,r2
   24fb0:	e13ffa17 	ldw	r4,-24(fp)
   24fb4:	0024e280 	call	24e28 <alt_ic_irq_disable>
   24fb8:	e0bfff15 	stw	r2,-4(fp)
   24fbc:	e0bffd17 	ldw	r2,-12(fp)
   24fc0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   24fc4:	e0bffb17 	ldw	r2,-20(fp)
   24fc8:	1001703a 	wrctl	status,r2
}
   24fcc:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   24fd0:	e0bfff17 	ldw	r2,-4(fp)
}
   24fd4:	e037883a 	mov	sp,fp
   24fd8:	dfc00117 	ldw	ra,4(sp)
   24fdc:	df000017 	ldw	fp,0(sp)
   24fe0:	dec00204 	addi	sp,sp,8
   24fe4:	f800283a 	ret

00024fe8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   24fe8:	defff904 	addi	sp,sp,-28
   24fec:	dfc00615 	stw	ra,24(sp)
   24ff0:	df000515 	stw	fp,20(sp)
   24ff4:	df000504 	addi	fp,sp,20
   24ff8:	e13ffe15 	stw	r4,-8(fp)
   24ffc:	e17ffd15 	stw	r5,-12(fp)
   25000:	e1bffc15 	stw	r6,-16(fp)
   25004:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   25008:	e1bffb17 	ldw	r6,-20(fp)
   2500c:	e17ffc17 	ldw	r5,-16(fp)
   25010:	e13ffd17 	ldw	r4,-12(fp)
   25014:	00252500 	call	25250 <open>
   25018:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   2501c:	e0bfff17 	ldw	r2,-4(fp)
   25020:	10002016 	blt	r2,zero,250a4 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   25024:	e0ffff17 	ldw	r3,-4(fp)
   25028:	1805883a 	mov	r2,r3
   2502c:	1085883a 	add	r2,r2,r2
   25030:	10c5883a 	add	r2,r2,r3
   25034:	100490ba 	slli	r2,r2,2
   25038:	00c000b4 	movhi	r3,2
   2503c:	10c7883a 	add	r3,r2,r3
   25040:	18d8f517 	ldw	r3,25556(r3)
   25044:	e0bffe17 	ldw	r2,-8(fp)
   25048:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2504c:	e0ffff17 	ldw	r3,-4(fp)
   25050:	1805883a 	mov	r2,r3
   25054:	1085883a 	add	r2,r2,r2
   25058:	10c5883a 	add	r2,r2,r3
   2505c:	100490ba 	slli	r2,r2,2
   25060:	00c000b4 	movhi	r3,2
   25064:	10c7883a 	add	r3,r2,r3
   25068:	18d8f617 	ldw	r3,25560(r3)
   2506c:	e0bffe17 	ldw	r2,-8(fp)
   25070:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   25074:	e0ffff17 	ldw	r3,-4(fp)
   25078:	1805883a 	mov	r2,r3
   2507c:	1085883a 	add	r2,r2,r2
   25080:	10c5883a 	add	r2,r2,r3
   25084:	100490ba 	slli	r2,r2,2
   25088:	00c000b4 	movhi	r3,2
   2508c:	10c7883a 	add	r3,r2,r3
   25090:	18d8f717 	ldw	r3,25564(r3)
   25094:	e0bffe17 	ldw	r2,-8(fp)
   25098:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2509c:	e13fff17 	ldw	r4,-4(fp)
   250a0:	0023bb80 	call	23bb8 <alt_release_fd>
  }
} 
   250a4:	0001883a 	nop
   250a8:	e037883a 	mov	sp,fp
   250ac:	dfc00117 	ldw	ra,4(sp)
   250b0:	df000017 	ldw	fp,0(sp)
   250b4:	dec00204 	addi	sp,sp,8
   250b8:	f800283a 	ret

000250bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   250bc:	defffb04 	addi	sp,sp,-20
   250c0:	dfc00415 	stw	ra,16(sp)
   250c4:	df000315 	stw	fp,12(sp)
   250c8:	df000304 	addi	fp,sp,12
   250cc:	e13fff15 	stw	r4,-4(fp)
   250d0:	e17ffe15 	stw	r5,-8(fp)
   250d4:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   250d8:	01c07fc4 	movi	r7,511
   250dc:	01800044 	movi	r6,1
   250e0:	e17fff17 	ldw	r5,-4(fp)
   250e4:	010000b4 	movhi	r4,2
   250e8:	2118f804 	addi	r4,r4,25568
   250ec:	0024fe80 	call	24fe8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   250f0:	01c07fc4 	movi	r7,511
   250f4:	000d883a 	mov	r6,zero
   250f8:	e17ffe17 	ldw	r5,-8(fp)
   250fc:	010000b4 	movhi	r4,2
   25100:	2118f504 	addi	r4,r4,25556
   25104:	0024fe80 	call	24fe8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   25108:	01c07fc4 	movi	r7,511
   2510c:	01800044 	movi	r6,1
   25110:	e17ffd17 	ldw	r5,-12(fp)
   25114:	010000b4 	movhi	r4,2
   25118:	2118fb04 	addi	r4,r4,25580
   2511c:	0024fe80 	call	24fe8 <alt_open_fd>
}  
   25120:	0001883a 	nop
   25124:	e037883a 	mov	sp,fp
   25128:	dfc00117 	ldw	ra,4(sp)
   2512c:	df000017 	ldw	fp,0(sp)
   25130:	dec00204 	addi	sp,sp,8
   25134:	f800283a 	ret

00025138 <alt_get_errno>:
{
   25138:	defffe04 	addi	sp,sp,-8
   2513c:	dfc00115 	stw	ra,4(sp)
   25140:	df000015 	stw	fp,0(sp)
   25144:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25148:	d0a00917 	ldw	r2,-32732(gp)
   2514c:	10000326 	beq	r2,zero,2515c <alt_get_errno+0x24>
   25150:	d0a00917 	ldw	r2,-32732(gp)
   25154:	103ee83a 	callr	r2
   25158:	00000106 	br	25160 <alt_get_errno+0x28>
   2515c:	d0a6ac04 	addi	r2,gp,-25936
}
   25160:	e037883a 	mov	sp,fp
   25164:	dfc00117 	ldw	ra,4(sp)
   25168:	df000017 	ldw	fp,0(sp)
   2516c:	dec00204 	addi	sp,sp,8
   25170:	f800283a 	ret

00025174 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   25174:	defffd04 	addi	sp,sp,-12
   25178:	df000215 	stw	fp,8(sp)
   2517c:	df000204 	addi	fp,sp,8
   25180:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   25184:	e0bffe17 	ldw	r2,-8(fp)
   25188:	10800217 	ldw	r2,8(r2)
   2518c:	10d00034 	orhi	r3,r2,16384
   25190:	e0bffe17 	ldw	r2,-8(fp)
   25194:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   25198:	e03fff15 	stw	zero,-4(fp)
   2519c:	00002306 	br	2522c <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   251a0:	e0ffff17 	ldw	r3,-4(fp)
   251a4:	1805883a 	mov	r2,r3
   251a8:	1085883a 	add	r2,r2,r2
   251ac:	10c5883a 	add	r2,r2,r3
   251b0:	100490ba 	slli	r2,r2,2
   251b4:	00c000b4 	movhi	r3,2
   251b8:	10c7883a 	add	r3,r2,r3
   251bc:	18d8f517 	ldw	r3,25556(r3)
   251c0:	e0bffe17 	ldw	r2,-8(fp)
   251c4:	10800017 	ldw	r2,0(r2)
   251c8:	1880151e 	bne	r3,r2,25220 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   251cc:	e0ffff17 	ldw	r3,-4(fp)
   251d0:	1805883a 	mov	r2,r3
   251d4:	1085883a 	add	r2,r2,r2
   251d8:	10c5883a 	add	r2,r2,r3
   251dc:	100490ba 	slli	r2,r2,2
   251e0:	00c000b4 	movhi	r3,2
   251e4:	10c7883a 	add	r3,r2,r3
   251e8:	1898f717 	ldw	r2,25564(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   251ec:	10000c0e 	bge	r2,zero,25220 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   251f0:	e0ffff17 	ldw	r3,-4(fp)
   251f4:	1805883a 	mov	r2,r3
   251f8:	1085883a 	add	r2,r2,r2
   251fc:	10c5883a 	add	r2,r2,r3
   25200:	100490ba 	slli	r2,r2,2
   25204:	00c000b4 	movhi	r3,2
   25208:	18d8f504 	addi	r3,r3,25556
   2520c:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25210:	e0fffe17 	ldw	r3,-8(fp)
   25214:	18800226 	beq	r3,r2,25220 <alt_file_locked+0xac>
    {
      return -EACCES;
   25218:	00bffcc4 	movi	r2,-13
   2521c:	00000806 	br	25240 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   25220:	e0bfff17 	ldw	r2,-4(fp)
   25224:	10800044 	addi	r2,r2,1
   25228:	e0bfff15 	stw	r2,-4(fp)
   2522c:	d0a00817 	ldw	r2,-32736(gp)
   25230:	1007883a 	mov	r3,r2
   25234:	e0bfff17 	ldw	r2,-4(fp)
   25238:	18bfd92e 	bgeu	r3,r2,251a0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2523c:	0005883a 	mov	r2,zero
}
   25240:	e037883a 	mov	sp,fp
   25244:	df000017 	ldw	fp,0(sp)
   25248:	dec00104 	addi	sp,sp,4
   2524c:	f800283a 	ret

00025250 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   25250:	defff604 	addi	sp,sp,-40
   25254:	dfc00915 	stw	ra,36(sp)
   25258:	df000815 	stw	fp,32(sp)
   2525c:	df000804 	addi	fp,sp,32
   25260:	e13ffa15 	stw	r4,-24(fp)
   25264:	e17ff915 	stw	r5,-28(fp)
   25268:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2526c:	00bfffc4 	movi	r2,-1
   25270:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   25274:	00bffb44 	movi	r2,-19
   25278:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   2527c:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   25280:	d1600604 	addi	r5,gp,-32744
   25284:	e13ffa17 	ldw	r4,-24(fp)
   25288:	00255a40 	call	255a4 <alt_find_dev>
   2528c:	e0bfff15 	stw	r2,-4(fp)
   25290:	e0bfff17 	ldw	r2,-4(fp)
   25294:	1000051e 	bne	r2,zero,252ac <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   25298:	e13ffa17 	ldw	r4,-24(fp)
   2529c:	00256340 	call	25634 <alt_find_file>
   252a0:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   252a4:	00800044 	movi	r2,1
   252a8:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   252ac:	e0bfff17 	ldw	r2,-4(fp)
   252b0:	10002c26 	beq	r2,zero,25364 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   252b4:	e13fff17 	ldw	r4,-4(fp)
   252b8:	002573c0 	call	2573c <alt_get_fd>
   252bc:	e0bffe15 	stw	r2,-8(fp)
   252c0:	e0bffe17 	ldw	r2,-8(fp)
   252c4:	1000030e 	bge	r2,zero,252d4 <open+0x84>
    {
      status = index;
   252c8:	e0bffe17 	ldw	r2,-8(fp)
   252cc:	e0bffd15 	stw	r2,-12(fp)
   252d0:	00002606 	br	2536c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   252d4:	e0fffe17 	ldw	r3,-8(fp)
   252d8:	1805883a 	mov	r2,r3
   252dc:	1085883a 	add	r2,r2,r2
   252e0:	10c5883a 	add	r2,r2,r3
   252e4:	100490ba 	slli	r2,r2,2
   252e8:	00c000b4 	movhi	r3,2
   252ec:	18d8f504 	addi	r3,r3,25556
   252f0:	10c5883a 	add	r2,r2,r3
   252f4:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   252f8:	e0fff917 	ldw	r3,-28(fp)
   252fc:	00900034 	movhi	r2,16384
   25300:	10bfffc4 	addi	r2,r2,-1
   25304:	1886703a 	and	r3,r3,r2
   25308:	e0bffb17 	ldw	r2,-20(fp)
   2530c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   25310:	e0bffc17 	ldw	r2,-16(fp)
   25314:	1000051e 	bne	r2,zero,2532c <open+0xdc>
   25318:	e13ffb17 	ldw	r4,-20(fp)
   2531c:	00251740 	call	25174 <alt_file_locked>
   25320:	e0bffd15 	stw	r2,-12(fp)
   25324:	e0bffd17 	ldw	r2,-12(fp)
   25328:	10001016 	blt	r2,zero,2536c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2532c:	e0bfff17 	ldw	r2,-4(fp)
   25330:	10800317 	ldw	r2,12(r2)
   25334:	10000826 	beq	r2,zero,25358 <open+0x108>
   25338:	e0bfff17 	ldw	r2,-4(fp)
   2533c:	10800317 	ldw	r2,12(r2)
   25340:	e1fff817 	ldw	r7,-32(fp)
   25344:	e1bff917 	ldw	r6,-28(fp)
   25348:	e17ffa17 	ldw	r5,-24(fp)
   2534c:	e13ffb17 	ldw	r4,-20(fp)
   25350:	103ee83a 	callr	r2
   25354:	00000106 	br	2535c <open+0x10c>
   25358:	0005883a 	mov	r2,zero
   2535c:	e0bffd15 	stw	r2,-12(fp)
   25360:	00000206 	br	2536c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   25364:	00bffb44 	movi	r2,-19
   25368:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2536c:	e0bffd17 	ldw	r2,-12(fp)
   25370:	1000090e 	bge	r2,zero,25398 <open+0x148>
  {
    alt_release_fd (index);  
   25374:	e13ffe17 	ldw	r4,-8(fp)
   25378:	0023bb80 	call	23bb8 <alt_release_fd>
    ALT_ERRNO = -status;
   2537c:	00251380 	call	25138 <alt_get_errno>
   25380:	1007883a 	mov	r3,r2
   25384:	e0bffd17 	ldw	r2,-12(fp)
   25388:	0085c83a 	sub	r2,zero,r2
   2538c:	18800015 	stw	r2,0(r3)
    return -1;
   25390:	00bfffc4 	movi	r2,-1
   25394:	00000106 	br	2539c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   25398:	e0bffe17 	ldw	r2,-8(fp)
}
   2539c:	e037883a 	mov	sp,fp
   253a0:	dfc00117 	ldw	ra,4(sp)
   253a4:	df000017 	ldw	fp,0(sp)
   253a8:	dec00204 	addi	sp,sp,8
   253ac:	f800283a 	ret

000253b0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   253b0:	defffa04 	addi	sp,sp,-24
   253b4:	df000515 	stw	fp,20(sp)
   253b8:	df000504 	addi	fp,sp,20
   253bc:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   253c0:	0005303a 	rdctl	r2,status
   253c4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   253c8:	e0fffc17 	ldw	r3,-16(fp)
   253cc:	00bfff84 	movi	r2,-2
   253d0:	1884703a 	and	r2,r3,r2
   253d4:	1001703a 	wrctl	status,r2
  return context;
   253d8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   253dc:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   253e0:	e0bffb17 	ldw	r2,-20(fp)
   253e4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   253e8:	e0bffd17 	ldw	r2,-12(fp)
   253ec:	10800017 	ldw	r2,0(r2)
   253f0:	e0fffd17 	ldw	r3,-12(fp)
   253f4:	18c00117 	ldw	r3,4(r3)
   253f8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   253fc:	e0bffd17 	ldw	r2,-12(fp)
   25400:	10800117 	ldw	r2,4(r2)
   25404:	e0fffd17 	ldw	r3,-12(fp)
   25408:	18c00017 	ldw	r3,0(r3)
   2540c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   25410:	e0bffd17 	ldw	r2,-12(fp)
   25414:	e0fffd17 	ldw	r3,-12(fp)
   25418:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2541c:	e0bffd17 	ldw	r2,-12(fp)
   25420:	e0fffd17 	ldw	r3,-12(fp)
   25424:	10c00015 	stw	r3,0(r2)
} 
   25428:	0001883a 	nop
   2542c:	e0bfff17 	ldw	r2,-4(fp)
   25430:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   25434:	e0bffe17 	ldw	r2,-8(fp)
   25438:	1001703a 	wrctl	status,r2
}
   2543c:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   25440:	0001883a 	nop
   25444:	e037883a 	mov	sp,fp
   25448:	df000017 	ldw	fp,0(sp)
   2544c:	dec00104 	addi	sp,sp,4
   25450:	f800283a 	ret

00025454 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   25454:	defff904 	addi	sp,sp,-28
   25458:	dfc00615 	stw	ra,24(sp)
   2545c:	df000515 	stw	fp,20(sp)
   25460:	dc400415 	stw	r17,16(sp)
   25464:	dc000315 	stw	r16,12(sp)
   25468:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2546c:	d0a00c17 	ldw	r2,-32720(gp)
   25470:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   25474:	d126b217 	ldw	r4,-25912(gp)
   25478:	d166b317 	ldw	r5,-25908(gp)
   2547c:	01800044 	movi	r6,1
   25480:	000f883a 	mov	r7,zero
   25484:	2185883a 	add	r2,r4,r6
   25488:	1111803a 	cmpltu	r8,r2,r4
   2548c:	29c7883a 	add	r3,r5,r7
   25490:	40c9883a 	add	r4,r8,r3
   25494:	2007883a 	mov	r3,r4
   25498:	1009883a 	mov	r4,r2
   2549c:	180b883a 	mov	r5,r3
   254a0:	d126b215 	stw	r4,-25912(gp)
   254a4:	d166b315 	stw	r5,-25908(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   254a8:	00002906 	br	25550 <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   254ac:	e0bffd17 	ldw	r2,-12(fp)
   254b0:	10800017 	ldw	r2,0(r2)
   254b4:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   254b8:	e13ffd17 	ldw	r4,-12(fp)
   254bc:	20800217 	ldw	r2,8(r4)
   254c0:	20c00317 	ldw	r3,12(r4)
   254c4:	d126b217 	ldw	r4,-25912(gp)
   254c8:	d166b317 	ldw	r5,-25908(gp)
   254cc:	28c01e36 	bltu	r5,r3,25548 <alt_tick+0xf4>
   254d0:	1940011e 	bne	r3,r5,254d8 <alt_tick+0x84>
   254d4:	20801c36 	bltu	r4,r2,25548 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   254d8:	e0bffd17 	ldw	r2,-12(fp)
   254dc:	10800417 	ldw	r2,16(r2)
   254e0:	e0fffd17 	ldw	r3,-12(fp)
   254e4:	18c00517 	ldw	r3,20(r3)
   254e8:	1809883a 	mov	r4,r3
   254ec:	103ee83a 	callr	r2
   254f0:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   254f4:	e0bffb17 	ldw	r2,-20(fp)
   254f8:	1000031e 	bne	r2,zero,25508 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   254fc:	e13ffd17 	ldw	r4,-12(fp)
   25500:	00253b00 	call	253b0 <alt_alarm_stop>
   25504:	00001006 	br	25548 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   25508:	e0bffd17 	ldw	r2,-12(fp)
   2550c:	11000217 	ldw	r4,8(r2)
   25510:	11400317 	ldw	r5,12(r2)
   25514:	e0bffb17 	ldw	r2,-20(fp)
   25518:	1021883a 	mov	r16,r2
   2551c:	0023883a 	mov	r17,zero
   25520:	2405883a 	add	r2,r4,r16
   25524:	110d803a 	cmpltu	r6,r2,r4
   25528:	2c47883a 	add	r3,r5,r17
   2552c:	30c9883a 	add	r4,r6,r3
   25530:	2007883a 	mov	r3,r4
   25534:	1009883a 	mov	r4,r2
   25538:	180b883a 	mov	r5,r3
   2553c:	e0bffd17 	ldw	r2,-12(fp)
   25540:	11000215 	stw	r4,8(r2)
   25544:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   25548:	e0bffc17 	ldw	r2,-16(fp)
   2554c:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   25550:	e0fffd17 	ldw	r3,-12(fp)
   25554:	d0a00c04 	addi	r2,gp,-32720
   25558:	18bfd41e 	bne	r3,r2,254ac <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2555c:	0001883a 	nop
}
   25560:	0001883a 	nop
   25564:	e6fffe04 	addi	sp,fp,-8
   25568:	dfc00317 	ldw	ra,12(sp)
   2556c:	df000217 	ldw	fp,8(sp)
   25570:	dc400117 	ldw	r17,4(sp)
   25574:	dc000017 	ldw	r16,0(sp)
   25578:	dec00404 	addi	sp,sp,16
   2557c:	f800283a 	ret

00025580 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   25580:	deffff04 	addi	sp,sp,-4
   25584:	df000015 	stw	fp,0(sp)
   25588:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2558c:	000170fa 	wrctl	ienable,zero
}
   25590:	0001883a 	nop
   25594:	e037883a 	mov	sp,fp
   25598:	df000017 	ldw	fp,0(sp)
   2559c:	dec00104 	addi	sp,sp,4
   255a0:	f800283a 	ret

000255a4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   255a4:	defffa04 	addi	sp,sp,-24
   255a8:	dfc00515 	stw	ra,20(sp)
   255ac:	df000415 	stw	fp,16(sp)
   255b0:	df000404 	addi	fp,sp,16
   255b4:	e13ffd15 	stw	r4,-12(fp)
   255b8:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   255bc:	e0bffc17 	ldw	r2,-16(fp)
   255c0:	10800017 	ldw	r2,0(r2)
   255c4:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   255c8:	e13ffd17 	ldw	r4,-12(fp)
   255cc:	00207600 	call	20760 <strlen>
   255d0:	10800044 	addi	r2,r2,1
   255d4:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   255d8:	00000d06 	br	25610 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   255dc:	e0bfff17 	ldw	r2,-4(fp)
   255e0:	10800217 	ldw	r2,8(r2)
   255e4:	e0fffe17 	ldw	r3,-8(fp)
   255e8:	180d883a 	mov	r6,r3
   255ec:	e17ffd17 	ldw	r5,-12(fp)
   255f0:	1009883a 	mov	r4,r2
   255f4:	00258d40 	call	258d4 <memcmp>
   255f8:	1000021e 	bne	r2,zero,25604 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   255fc:	e0bfff17 	ldw	r2,-4(fp)
   25600:	00000706 	br	25620 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   25604:	e0bfff17 	ldw	r2,-4(fp)
   25608:	10800017 	ldw	r2,0(r2)
   2560c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   25610:	e0ffff17 	ldw	r3,-4(fp)
   25614:	e0bffc17 	ldw	r2,-16(fp)
   25618:	18bff01e 	bne	r3,r2,255dc <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   2561c:	0005883a 	mov	r2,zero
}
   25620:	e037883a 	mov	sp,fp
   25624:	dfc00117 	ldw	ra,4(sp)
   25628:	df000017 	ldw	fp,0(sp)
   2562c:	dec00204 	addi	sp,sp,8
   25630:	f800283a 	ret

00025634 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   25634:	defffb04 	addi	sp,sp,-20
   25638:	dfc00415 	stw	ra,16(sp)
   2563c:	df000315 	stw	fp,12(sp)
   25640:	df000304 	addi	fp,sp,12
   25644:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   25648:	d0a00417 	ldw	r2,-32752(gp)
   2564c:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25650:	00003106 	br	25718 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   25654:	e0bfff17 	ldw	r2,-4(fp)
   25658:	10800217 	ldw	r2,8(r2)
   2565c:	1009883a 	mov	r4,r2
   25660:	00207600 	call	20760 <strlen>
   25664:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   25668:	e0bfff17 	ldw	r2,-4(fp)
   2566c:	10c00217 	ldw	r3,8(r2)
   25670:	e0bffe17 	ldw	r2,-8(fp)
   25674:	10bfffc4 	addi	r2,r2,-1
   25678:	1885883a 	add	r2,r3,r2
   2567c:	10800003 	ldbu	r2,0(r2)
   25680:	10803fcc 	andi	r2,r2,255
   25684:	1080201c 	xori	r2,r2,128
   25688:	10bfe004 	addi	r2,r2,-128
   2568c:	10800bd8 	cmpnei	r2,r2,47
   25690:	1000031e 	bne	r2,zero,256a0 <alt_find_file+0x6c>
    {
      len -= 1;
   25694:	e0bffe17 	ldw	r2,-8(fp)
   25698:	10bfffc4 	addi	r2,r2,-1
   2569c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   256a0:	e0bffe17 	ldw	r2,-8(fp)
   256a4:	e0fffd17 	ldw	r3,-12(fp)
   256a8:	1885883a 	add	r2,r3,r2
   256ac:	10800003 	ldbu	r2,0(r2)
   256b0:	10803fcc 	andi	r2,r2,255
   256b4:	1080201c 	xori	r2,r2,128
   256b8:	10bfe004 	addi	r2,r2,-128
   256bc:	10800be0 	cmpeqi	r2,r2,47
   256c0:	1000081e 	bne	r2,zero,256e4 <alt_find_file+0xb0>
   256c4:	e0bffe17 	ldw	r2,-8(fp)
   256c8:	e0fffd17 	ldw	r3,-12(fp)
   256cc:	1885883a 	add	r2,r3,r2
   256d0:	10800003 	ldbu	r2,0(r2)
   256d4:	10803fcc 	andi	r2,r2,255
   256d8:	1080201c 	xori	r2,r2,128
   256dc:	10bfe004 	addi	r2,r2,-128
   256e0:	10000a1e 	bne	r2,zero,2570c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   256e4:	e0bfff17 	ldw	r2,-4(fp)
   256e8:	10800217 	ldw	r2,8(r2)
   256ec:	e0fffe17 	ldw	r3,-8(fp)
   256f0:	180d883a 	mov	r6,r3
   256f4:	e17ffd17 	ldw	r5,-12(fp)
   256f8:	1009883a 	mov	r4,r2
   256fc:	00258d40 	call	258d4 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   25700:	1000021e 	bne	r2,zero,2570c <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   25704:	e0bfff17 	ldw	r2,-4(fp)
   25708:	00000706 	br	25728 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   2570c:	e0bfff17 	ldw	r2,-4(fp)
   25710:	10800017 	ldw	r2,0(r2)
   25714:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   25718:	e0ffff17 	ldw	r3,-4(fp)
   2571c:	d0a00404 	addi	r2,gp,-32752
   25720:	18bfcc1e 	bne	r3,r2,25654 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   25724:	0005883a 	mov	r2,zero
}
   25728:	e037883a 	mov	sp,fp
   2572c:	dfc00117 	ldw	ra,4(sp)
   25730:	df000017 	ldw	fp,0(sp)
   25734:	dec00204 	addi	sp,sp,8
   25738:	f800283a 	ret

0002573c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2573c:	defffc04 	addi	sp,sp,-16
   25740:	df000315 	stw	fp,12(sp)
   25744:	df000304 	addi	fp,sp,12
   25748:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   2574c:	00bffa04 	movi	r2,-24
   25750:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25754:	e03fff15 	stw	zero,-4(fp)
   25758:	00001d06 	br	257d0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   2575c:	e0ffff17 	ldw	r3,-4(fp)
   25760:	1805883a 	mov	r2,r3
   25764:	1085883a 	add	r2,r2,r2
   25768:	10c5883a 	add	r2,r2,r3
   2576c:	100490ba 	slli	r2,r2,2
   25770:	00c000b4 	movhi	r3,2
   25774:	10c7883a 	add	r3,r2,r3
   25778:	1898f517 	ldw	r2,25556(r3)
   2577c:	1000111e 	bne	r2,zero,257c4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   25780:	e0ffff17 	ldw	r3,-4(fp)
   25784:	1805883a 	mov	r2,r3
   25788:	1085883a 	add	r2,r2,r2
   2578c:	10c5883a 	add	r2,r2,r3
   25790:	100490ba 	slli	r2,r2,2
   25794:	e13ffd17 	ldw	r4,-12(fp)
   25798:	00c000b4 	movhi	r3,2
   2579c:	10c7883a 	add	r3,r2,r3
   257a0:	1918f515 	stw	r4,25556(r3)
      if (i > alt_max_fd)
   257a4:	d0e00817 	ldw	r3,-32736(gp)
   257a8:	e0bfff17 	ldw	r2,-4(fp)
   257ac:	1880020e 	bge	r3,r2,257b8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   257b0:	e0bfff17 	ldw	r2,-4(fp)
   257b4:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   257b8:	e0bfff17 	ldw	r2,-4(fp)
   257bc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   257c0:	00000706 	br	257e0 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   257c4:	e0bfff17 	ldw	r2,-4(fp)
   257c8:	10800044 	addi	r2,r2,1
   257cc:	e0bfff15 	stw	r2,-4(fp)
   257d0:	e0bfff17 	ldw	r2,-4(fp)
   257d4:	10800810 	cmplti	r2,r2,32
   257d8:	103fe01e 	bne	r2,zero,2575c <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   257dc:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   257e0:	e0bffe17 	ldw	r2,-8(fp)
}
   257e4:	e037883a 	mov	sp,fp
   257e8:	df000017 	ldw	fp,0(sp)
   257ec:	dec00104 	addi	sp,sp,4
   257f0:	f800283a 	ret

000257f4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   257f4:	defffe04 	addi	sp,sp,-8
   257f8:	df000115 	stw	fp,4(sp)
   257fc:	df000104 	addi	fp,sp,4
   25800:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   25804:	e0bfff17 	ldw	r2,-4(fp)
   25808:	10bffe84 	addi	r2,r2,-6
   2580c:	10c00428 	cmpgeui	r3,r2,16
   25810:	1800191e 	bne	r3,zero,25878 <alt_exception_cause_generated_bad_addr+0x84>
   25814:	100690ba 	slli	r3,r2,2
   25818:	008000b4 	movhi	r2,2
   2581c:	1885883a 	add	r2,r3,r2
   25820:	10960a17 	ldw	r2,22568(r2)
   25824:	1000683a 	jmp	r2
   25828:	00025868 	cmpgeui	zero,zero,2401
   2582c:	00025868 	cmpgeui	zero,zero,2401
   25830:	00025878 	rdprs	zero,zero,2401
   25834:	00025878 	rdprs	zero,zero,2401
   25838:	00025878 	rdprs	zero,zero,2401
   2583c:	00025868 	cmpgeui	zero,zero,2401
   25840:	00025870 	cmpltui	zero,zero,2401
   25844:	00025878 	rdprs	zero,zero,2401
   25848:	00025868 	cmpgeui	zero,zero,2401
   2584c:	00025868 	cmpgeui	zero,zero,2401
   25850:	00025878 	rdprs	zero,zero,2401
   25854:	00025868 	cmpgeui	zero,zero,2401
   25858:	00025870 	cmpltui	zero,zero,2401
   2585c:	00025878 	rdprs	zero,zero,2401
   25860:	00025878 	rdprs	zero,zero,2401
   25864:	00025868 	cmpgeui	zero,zero,2401
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   25868:	00800044 	movi	r2,1
   2586c:	00000306 	br	2587c <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   25870:	0005883a 	mov	r2,zero
   25874:	00000106 	br	2587c <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   25878:	0005883a 	mov	r2,zero
  }
}
   2587c:	e037883a 	mov	sp,fp
   25880:	df000017 	ldw	fp,0(sp)
   25884:	dec00104 	addi	sp,sp,4
   25888:	f800283a 	ret

0002588c <atexit>:
   2588c:	200b883a 	mov	r5,r4
   25890:	000f883a 	mov	r7,zero
   25894:	000d883a 	mov	r6,zero
   25898:	0009883a 	mov	r4,zero
   2589c:	002594c1 	jmpi	2594c <__register_exitproc>

000258a0 <exit>:
   258a0:	defffe04 	addi	sp,sp,-8
   258a4:	000b883a 	mov	r5,zero
   258a8:	dc000015 	stw	r16,0(sp)
   258ac:	dfc00115 	stw	ra,4(sp)
   258b0:	2021883a 	mov	r16,r4
   258b4:	00259dc0 	call	259dc <__call_exitprocs>
   258b8:	008000b4 	movhi	r2,2
   258bc:	111d6d17 	ldw	r4,30132(r2)
   258c0:	20800f17 	ldw	r2,60(r4)
   258c4:	10000126 	beq	r2,zero,258cc <exit+0x2c>
   258c8:	103ee83a 	callr	r2
   258cc:	8009883a 	mov	r4,r16
   258d0:	0025afc0 	call	25afc <_exit>

000258d4 <memcmp>:
   258d4:	30800130 	cmpltui	r2,r6,4
   258d8:	10000b1e 	bne	r2,zero,25908 <memcmp+0x34>
   258dc:	2144b03a 	or	r2,r4,r5
   258e0:	108000cc 	andi	r2,r2,3
   258e4:	1000171e 	bne	r2,zero,25944 <memcmp+0x70>
   258e8:	20c00017 	ldw	r3,0(r4)
   258ec:	28800017 	ldw	r2,0(r5)
   258f0:	1880141e 	bne	r3,r2,25944 <memcmp+0x70>
   258f4:	31bfff04 	addi	r6,r6,-4
   258f8:	30800128 	cmpgeui	r2,r6,4
   258fc:	21000104 	addi	r4,r4,4
   25900:	29400104 	addi	r5,r5,4
   25904:	103ff81e 	bne	r2,zero,258e8 <memcmp+0x14>
   25908:	30bfffc4 	addi	r2,r6,-1
   2590c:	30000b26 	beq	r6,zero,2593c <memcmp+0x68>
   25910:	11800044 	addi	r6,r2,1
   25914:	218d883a 	add	r6,r4,r6
   25918:	00000106 	br	25920 <memcmp+0x4c>
   2591c:	21800726 	beq	r4,r6,2593c <memcmp+0x68>
   25920:	20800003 	ldbu	r2,0(r4)
   25924:	28c00003 	ldbu	r3,0(r5)
   25928:	21000044 	addi	r4,r4,1
   2592c:	29400044 	addi	r5,r5,1
   25930:	10fffa26 	beq	r2,r3,2591c <memcmp+0x48>
   25934:	10c5c83a 	sub	r2,r2,r3
   25938:	f800283a 	ret
   2593c:	0005883a 	mov	r2,zero
   25940:	f800283a 	ret
   25944:	30bfffc4 	addi	r2,r6,-1
   25948:	003ff106 	br	25910 <memcmp+0x3c>

0002594c <__register_exitproc>:
   2594c:	008000b4 	movhi	r2,2
   25950:	10dd6d17 	ldw	r3,30132(r2)
   25954:	18805217 	ldw	r2,328(r3)
   25958:	10001726 	beq	r2,zero,259b8 <__register_exitproc+0x6c>
   2595c:	10c00117 	ldw	r3,4(r2)
   25960:	1a000808 	cmpgei	r8,r3,32
   25964:	40001b1e 	bne	r8,zero,259d4 <__register_exitproc+0x88>
   25968:	20000b26 	beq	r4,zero,25998 <__register_exitproc+0x4c>
   2596c:	181090ba 	slli	r8,r3,2
   25970:	02400044 	movi	r9,1
   25974:	48d2983a 	sll	r9,r9,r3
   25978:	1211883a 	add	r8,r2,r8
   2597c:	41802215 	stw	r6,136(r8)
   25980:	11806217 	ldw	r6,392(r2)
   25984:	21000098 	cmpnei	r4,r4,2
   25988:	324cb03a 	or	r6,r6,r9
   2598c:	11806215 	stw	r6,392(r2)
   25990:	41c04215 	stw	r7,264(r8)
   25994:	20000b26 	beq	r4,zero,259c4 <__register_exitproc+0x78>
   25998:	19000084 	addi	r4,r3,2
   2599c:	200890ba 	slli	r4,r4,2
   259a0:	18c00044 	addi	r3,r3,1
   259a4:	10c00115 	stw	r3,4(r2)
   259a8:	1105883a 	add	r2,r2,r4
   259ac:	11400015 	stw	r5,0(r2)
   259b0:	0005883a 	mov	r2,zero
   259b4:	f800283a 	ret
   259b8:	18805304 	addi	r2,r3,332
   259bc:	18805215 	stw	r2,328(r3)
   259c0:	003fe606 	br	2595c <__register_exitproc+0x10>
   259c4:	11006317 	ldw	r4,396(r2)
   259c8:	2252b03a 	or	r9,r4,r9
   259cc:	12406315 	stw	r9,396(r2)
   259d0:	003ff106 	br	25998 <__register_exitproc+0x4c>
   259d4:	00bfffc4 	movi	r2,-1
   259d8:	f800283a 	ret

000259dc <__call_exitprocs>:
   259dc:	defff704 	addi	sp,sp,-36
   259e0:	008000b4 	movhi	r2,2
   259e4:	dcc00315 	stw	r19,12(sp)
   259e8:	14dd6d17 	ldw	r19,30132(r2)
   259ec:	dc800215 	stw	r18,8(sp)
   259f0:	dfc00815 	stw	ra,32(sp)
   259f4:	9c805217 	ldw	r18,328(r19)
   259f8:	ddc00715 	stw	r23,28(sp)
   259fc:	dd800615 	stw	r22,24(sp)
   25a00:	dd400515 	stw	r21,20(sp)
   25a04:	dd000415 	stw	r20,16(sp)
   25a08:	dc400115 	stw	r17,4(sp)
   25a0c:	dc000015 	stw	r16,0(sp)
   25a10:	90001026 	beq	r18,zero,25a54 <__call_exitprocs+0x78>
   25a14:	202b883a 	mov	r21,r4
   25a18:	282d883a 	mov	r22,r5
   25a1c:	05000044 	movi	r20,1
   25a20:	94000117 	ldw	r16,4(r18)
   25a24:	847fffc4 	addi	r17,r16,-1
   25a28:	88000a16 	blt	r17,zero,25a54 <__call_exitprocs+0x78>
   25a2c:	84000044 	addi	r16,r16,1
   25a30:	802090ba 	slli	r16,r16,2
   25a34:	9421883a 	add	r16,r18,r16
   25a38:	b0001126 	beq	r22,zero,25a80 <__call_exitprocs+0xa4>
   25a3c:	80804017 	ldw	r2,256(r16)
   25a40:	15800f26 	beq	r2,r22,25a80 <__call_exitprocs+0xa4>
   25a44:	8c7fffc4 	addi	r17,r17,-1
   25a48:	88bfffd8 	cmpnei	r2,r17,-1
   25a4c:	843fff04 	addi	r16,r16,-4
   25a50:	103ff91e 	bne	r2,zero,25a38 <__call_exitprocs+0x5c>
   25a54:	dfc00817 	ldw	ra,32(sp)
   25a58:	ddc00717 	ldw	r23,28(sp)
   25a5c:	dd800617 	ldw	r22,24(sp)
   25a60:	dd400517 	ldw	r21,20(sp)
   25a64:	dd000417 	ldw	r20,16(sp)
   25a68:	dcc00317 	ldw	r19,12(sp)
   25a6c:	dc800217 	ldw	r18,8(sp)
   25a70:	dc400117 	ldw	r17,4(sp)
   25a74:	dc000017 	ldw	r16,0(sp)
   25a78:	dec00904 	addi	sp,sp,36
   25a7c:	f800283a 	ret
   25a80:	90800117 	ldw	r2,4(r18)
   25a84:	81800017 	ldw	r6,0(r16)
   25a88:	10bfffc4 	addi	r2,r2,-1
   25a8c:	14401726 	beq	r2,r17,25aec <__call_exitprocs+0x110>
   25a90:	80000015 	stw	zero,0(r16)
   25a94:	303feb26 	beq	r6,zero,25a44 <__call_exitprocs+0x68>
   25a98:	a446983a 	sll	r3,r20,r17
   25a9c:	90806217 	ldw	r2,392(r18)
   25aa0:	95c00117 	ldw	r23,4(r18)
   25aa4:	1884703a 	and	r2,r3,r2
   25aa8:	1000081e 	bne	r2,zero,25acc <__call_exitprocs+0xf0>
   25aac:	303ee83a 	callr	r6
   25ab0:	90c00117 	ldw	r3,4(r18)
   25ab4:	98805217 	ldw	r2,328(r19)
   25ab8:	1dc0011e 	bne	r3,r23,25ac0 <__call_exitprocs+0xe4>
   25abc:	90bfe126 	beq	r18,r2,25a44 <__call_exitprocs+0x68>
   25ac0:	103fe426 	beq	r2,zero,25a54 <__call_exitprocs+0x78>
   25ac4:	1025883a 	mov	r18,r2
   25ac8:	003fd506 	br	25a20 <__call_exitprocs+0x44>
   25acc:	90806317 	ldw	r2,396(r18)
   25ad0:	81002017 	ldw	r4,128(r16)
   25ad4:	1886703a 	and	r3,r3,r2
   25ad8:	1800061e 	bne	r3,zero,25af4 <__call_exitprocs+0x118>
   25adc:	200b883a 	mov	r5,r4
   25ae0:	a809883a 	mov	r4,r21
   25ae4:	303ee83a 	callr	r6
   25ae8:	003ff106 	br	25ab0 <__call_exitprocs+0xd4>
   25aec:	94400115 	stw	r17,4(r18)
   25af0:	003fe806 	br	25a94 <__call_exitprocs+0xb8>
   25af4:	303ee83a 	callr	r6
   25af8:	003fed06 	br	25ab0 <__call_exitprocs+0xd4>

00025afc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   25afc:	defffd04 	addi	sp,sp,-12
   25b00:	df000215 	stw	fp,8(sp)
   25b04:	df000204 	addi	fp,sp,8
   25b08:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   25b0c:	0001883a 	nop
   25b10:	e0bffe17 	ldw	r2,-8(fp)
   25b14:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   25b18:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   25b1c:	10000226 	beq	r2,zero,25b28 <_exit+0x2c>
    ALT_SIM_FAIL();
   25b20:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   25b24:	00000106 	br	25b2c <_exit+0x30>
    ALT_SIM_PASS();
   25b28:	002af0b0 	cmpltui	zero,zero,43970
}
   25b2c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25b30:	003fff06 	br	25b30 <_exit+0x34>
