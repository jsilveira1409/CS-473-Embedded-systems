
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020224

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000060dc memsz 0x000060dc flags r-x
    LOAD off    0x000070fc vaddr 0x000260fc paddr 0x00027b68 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x000005d4 vaddr 0x000295d4 paddr 0x000295d4 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005e8c  00020224  00020224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000004c  000260b0  000260b0  000070b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  000260fc  00027b68  000070fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  000295d4  000295d4  000095d4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0002972c  0002972c  00008b68  2**0
                  CONTENTS
  7 .comment      0000002d  00000000  00000000  00008b68  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a40  00000000  00000000  00008b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0001831c  00000000  00000000  000095d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00006a37  00000000  00000000  000218f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00009b93  00000000  00000000  0002832b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  000017f8  00000000  00000000  00031ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00002983  00000000  00000000  000336b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00005f2e  00000000  00000000  0003603b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_alt_sim_info 00000010  00000000  00000000  0003bf6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008a0  00000000  00000000  0003bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .thread_model 00000003  00000000  00000000  0003ef26  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0003ef29  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003ef35  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003ef36  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0003ef37  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0003ef42  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0003ef4d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000006  00000000  00000000  0003ef58  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002f  00000000  00000000  0003ef5e  2**0
                  CONTENTS, READONLY
 26 .jdi          00004d23  00000000  00000000  0003ef8d  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00031477  00000000  00000000  00043cb0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020224 l    d  .text	00000000 .text
000260b0 l    d  .rodata	00000000 .rodata
000260fc l    d  .rwdata	00000000 .rwdata
000295d4 l    d  .bss	00000000 .bss
0002972c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/osour/Desktop/EmbSys/Rendu2/hw/quartus/software/test_bsp//obj/HAL/src/crt0.o
0002025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 daisyport.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
00020e0c l     F .text	00000008 __fp_lock
00020e20 l     F .text	00000008 __fp_unlock
00020e28 l     F .text	00000168 __sinit.part.0
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000260fc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00022c4c l     F .text	000000c0 _fclose_r.part.0
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00023ab4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00023bcc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00023bf8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00023cf0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00023ddc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023ec8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
000240a8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00027b58 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00024314 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00024454 l     F .text	00000034 alt_dev_reg
00026ad0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00024730 l     F .text	0000020c altera_avalon_jtag_uart_irq
0002493c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00025100 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00025564 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000256b4 l     F .text	0000003c alt_get_errno
000256f0 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00029600 g     O .bss	00000004 alt_instruction_exception_handler
00023880 g     F .text	00000058 _isatty_r
00023fe4 g     F .text	0000007c alt_main
00020c98 g     F .text	000000cc _puts_r
0002962c g     O .bss	00000100 alt_irq
00023510 g     F .text	00000064 _lseek_r
00027b68 g       *ABS*	00000000 __flash_rwdata_start
0002972c g       *ABS*	00000000 __alt_heap_start
000229c8 g     F .text	0000005c __sseek
00021170 g     F .text	00000010 __sinit
00020770 g     F .text	0000006c daisy_d13_set
00020f90 g     F .text	00000078 __sfmoreglue
00024084 g     F .text	00000024 __malloc_unlock
00020920 g     F .text	00000208 daisy_all_set
0002213c g     F .text	0000012c memmove
0002115c g     F .text	00000014 _cleanup
00025afc g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00023820 g     F .text	00000060 _fstat_r
000295e0 g     O .bss	00000004 errno
00022940 g     F .text	00000008 __seofread
000295e8 g     O .bss	00000004 alt_argv
0002fb30 g       *ABS*	00000000 _gp
00020338 g     F .text	0000006c daisy_d3_set
000202cc g     F .text	0000006c daisy_d2_set
00026950 g     O .rwdata	00000180 alt_fd_list
00025b20 g     F .text	00000090 alt_find_dev
0002203c g     F .text	00000100 memcpy
000203a4 g     F .text	0000006c daisy_d4_set
00020e14 g     F .text	0000000c _cleanup_r
00025638 g     F .text	0000007c alt_io_redirect
000260b0 g       *ABS*	00000000 __DTOR_END__
00020d64 g     F .text	00000010 puts
00025d70 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00020554 g     F .text	0000006c daisy_d8_set
0002062c g     F .text	0000006c daisy_d10_set
00024b38 g     F .text	00000220 altera_avalon_jtag_uart_read
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
000239cc g     F .text	00000064 .hidden __udivsi3
00023d2c g     F .text	000000b0 isatty
000295dc g     O .bss	00000004 __malloc_top_pad
00020b28 g     F .text	00000128 daisy_rainbow
000211b8 g     F .text	00000494 __sfvwrite_r
00022894 g     F .text	00000058 _sbrk_r
000237bc g     F .text	00000064 _read_r
00027b50 g     O .rwdata	00000004 alt_max_fd
00022d0c g     F .text	00000070 _fclose_r
00023074 g     F .text	00000084 fflush
000295d8 g     O .bss	00000004 __malloc_max_sbrked_mem
00023f04 g     F .text	000000e0 lseek
00027b30 g     O .rwdata	00000004 _global_impure_ptr
00022358 g     F .text	0000053c _realloc_r
00020410 g     F .text	0000006c daisy_d5_set
0002972c g       *ABS*	00000000 __bss_end
0002547c g     F .text	000000e8 alt_iic_isr_register
000259d0 g     F .text	0000012c alt_tick
00020698 g     F .text	0000006c daisy_d11_set
00021190 g     F .text	00000014 __fp_lock_all
00025430 g     F .text	0000004c alt_ic_irq_enabled
000204e8 g     F .text	0000006c daisy_d7_set
0002592c g     F .text	000000a4 alt_alarm_stop
000295f0 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000c8 alt_irq_handler
00026928 g     O .rwdata	00000028 alt_dev_null
000250e0 g     F .text	00000020 alt_dcache_flush_all
00027b68 g       *ABS*	00000000 __ram_rwdata_end
00027b48 g     O .rwdata	00000008 alt_dev_list
00024350 g     F .text	00000104 write
000260fc g       *ABS*	00000000 __ram_rodata_end
00023c34 g     F .text	000000bc fstat
00023a30 g     F .text	0000005c .hidden __umodsi3
0002972c g       *ABS*	00000000 end
00024670 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201c4 g     F .exceptions	00000060 alt_instruction_exception_entry
000260b0 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00024d58 g     F .text	00000228 altera_avalon_jtag_uart_write
00021180 g     F .text	00000004 __sfp_lock_acquire
00021f6c g     F .text	000000d0 memchr
00023214 g     F .text	000002fc _free_r
00020704 g     F .text	0000006c daisy_d12_set
00025f58 g     F .text	00000120 __call_exitprocs
00027b38 g     O .rwdata	00000004 __malloc_sbrk_base
00020224 g     F .text	0000003c _start
000295f4 g     O .bss	00000004 _alt_tick_rate
000295f8 g     O .bss	00000008 _alt_nticks
000240e4 g     F .text	00000108 read
000244c4 g     F .text	00000048 alt_sys_init
00025ec8 g     F .text	00000090 __register_exitproc
000249dc g     F .text	00000068 altera_avalon_jtag_uart_close
00023a8c g     F .text	00000028 .hidden __mulsi3
000260fc g       *ABS*	00000000 __ram_rwdata_start
000260b0 g       *ABS*	00000000 __ram_rodata_start
00029604 g     O .bss	00000028 __malloc_current_mallinfo
0002450c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00025cb8 g     F .text	000000b8 alt_get_fd
00022bf4 g     F .text	00000058 _close_r
00025e50 g     F .text	00000078 memcmp
000245cc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0002972c g       *ABS*	00000000 __alt_stack_base
0002461c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022a90 g     F .text	00000164 __swsetup_r
00021008 g     F .text	00000154 __sfp
00026520 g     O .rwdata	00000408 __malloc_av_
0002118c g     F .text	00000004 __sinit_lock_release
000228ec g     F .text	00000054 __sread
00025bb0 g     F .text	00000108 alt_find_file
0002513c g     F .text	000000a8 alt_dev_llist_insert
00024060 g     F .text	00000024 __malloc_lock
0002425c g     F .text	000000b8 sbrk
000207dc g     F .text	0000006c daisy_d14_set
00023014 g     F .text	00000060 _fflush_r
000295d4 g       *ABS*	00000000 __bss_start
00022268 g     F .text	000000f0 memset
00020c50 g     F .text	00000048 main
000295ec g     O .bss	00000004 alt_envp
000295d4 g     O .bss	00000004 __malloc_max_total_mem
0002456c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00022a24 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00022d7c g     F .text	00000070 fclose
00020848 g     F .text	0000006c daisy_d15_set
0002178c g     F .text	000007e0 _malloc_r
00027b54 g     O .rwdata	00000004 alt_errno
0002164c g     F .text	00000098 _fwalk
000238d8 g     F .text	00000080 .hidden __divsi3
000230f8 g     F .text	0000011c _malloc_trim_r
000260b0 g       *ABS*	00000000 __CTOR_END__
000260b0 g       *ABS*	00000000 __flash_rodata_start
000260b0 g       *ABS*	00000000 __DTOR_LIST__
00024488 g     F .text	0000003c alt_irq_init
000241ec g     F .text	00000070 alt_release_fd
00025e08 g     F .text	00000014 atexit
00022a2c g     F .text	00000064 _write_r
00027b34 g     O .rwdata	00000004 _impure_ptr
000295e4 g     O .bss	00000004 alt_argc
00022dec g     F .text	00000228 __sflush_r
00025248 g     F .text	00000064 _do_dtors
0002047c g     F .text	0000006c daisy_d6_set
00020020 g       .exceptions	00000000 alt_irq_entry
000211a4 g     F .text	00000014 __fp_unlock_all
00027b40 g     O .rwdata	00000008 alt_fs_list
00020260 g     F .text	0000006c daisy_d1_set
00020020 g       *ABS*	00000000 __ram_exceptions_start
00023724 g     F .text	00000098 __swhatbuf_r
000252cc g     F .text	00000050 alt_ic_isr_register
00027b68 g       *ABS*	00000000 _edata
0002972c g       *ABS*	00000000 _end
00020224 g       *ABS*	00000000 __ram_exceptions_end
00024a44 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000253a4 g     F .text	0000008c alt_ic_irq_disable
00022948 g     F .text	00000080 __swrite
00027b3c g     O .rwdata	00000004 __malloc_trim_threshold
00025e1c g     F .text	00000034 exit
000216e4 g     F .text	000000a8 _fwalk_reent
00023958 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000208b4 g     F .text	0000006c daisy_d16_set
00021184 g     F .text	00000004 __sfp_lock_release
00026078 g     F .text	00000038 _exit
00024f80 g     F .text	00000160 alt_alarm_start
00023574 g     F .text	000001b0 __smakebuf_r
00020d74 g     F .text	00000098 strlen
000257cc g     F .text	00000160 open
000252ac g     F .text	00000020 alt_icache_flush_all
00027b5c g     O .rwdata	00000004 alt_priority_mask
0002531c g     F .text	00000088 alt_ic_irq_enable
000205c0 g     F .text	0000006c daisy_d9_set
00027b60 g     O .rwdata	00000008 alt_alarm_list
000251e4 g     F .text	00000064 _do_ctors
00023af0 g     F .text	000000dc close
00023e44 g     F .text	00000084 alt_load
00021188 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408914 	ori	at,at,548
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201c40 	call	201c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0ffff17 	ldw	r3,-4(fp)
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001126 	beq	r2,zero,20180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	e0bffd17 	ldw	r2,-12(fp)
   20140:	100690fa 	slli	r3,r2,3
   20144:	008000f4 	movhi	r2,3
   20148:	1885883a 	add	r2,r3,r2
   2014c:	10e58b17 	ldw	r3,-27092(r2)
   20150:	e0bffd17 	ldw	r2,-12(fp)
   20154:	100890fa 	slli	r4,r2,3
   20158:	008000f4 	movhi	r2,3
   2015c:	2085883a 	add	r2,r4,r2
   20160:	10a58c17 	ldw	r2,-27088(r2)
   20164:	1009883a 	mov	r4,r2
   20168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   2016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   20170:	0005313a 	rdctl	r2,ipending
   20174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   20178:	e0bffb17 	ldw	r2,-20(fp)
   2017c:	00000706 	br	2019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   20180:	e0bffe17 	ldw	r2,-8(fp)
   20184:	1085883a 	add	r2,r2,r2
   20188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   2018c:	e0bffd17 	ldw	r2,-12(fp)
   20190:	10800044 	addi	r2,r2,1
   20194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   20198:	003fe406 	br	2012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   2019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   201a0:	e0bfff17 	ldw	r2,-4(fp)
   201a4:	103fde1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201a8:	0001883a 	nop
}
   201ac:	0001883a 	nop
   201b0:	e037883a 	mov	sp,fp
   201b4:	dfc00117 	ldw	ra,4(sp)
   201b8:	df000017 	ldw	fp,0(sp)
   201bc:	dec00204 	addi	sp,sp,8
   201c0:	f800283a 	ret

000201c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201c4:	defffb04 	addi	sp,sp,-20
   201c8:	dfc00415 	stw	ra,16(sp)
   201cc:	df000315 	stw	fp,12(sp)
   201d0:	df000304 	addi	fp,sp,12
   201d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201d8:	00bfffc4 	movi	r2,-1
   201dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   201e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201e4:	d0a6b417 	ldw	r2,-25904(gp)
   201e8:	10000726 	beq	r2,zero,20208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201ec:	d0a6b417 	ldw	r2,-25904(gp)
   201f0:	e0ffff17 	ldw	r3,-4(fp)
   201f4:	e1bffe17 	ldw	r6,-8(fp)
   201f8:	e17ffd17 	ldw	r5,-12(fp)
   201fc:	1809883a 	mov	r4,r3
   20200:	103ee83a 	callr	r2
   20204:	00000206 	br	20210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2020c:	0005883a 	mov	r2,zero
}
   20210:	e037883a 	mov	sp,fp
   20214:	dfc00117 	ldw	ra,4(sp)
   20218:	df000017 	ldw	fp,0(sp)
   2021c:	dec00204 	addi	sp,sp,8
   20220:	f800283a 	ret

Disassembly of section .text:

00020224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20224:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2022c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20230:	d6becc14 	ori	gp,gp,64304
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20234:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20238:	10a57514 	ori	r2,r2,38356

    movhi r3, %hi(__bss_end)
   2023c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20240:	18e5cb14 	ori	r3,r3,38700

    beq r2, r3, 1f
   20244:	10c00326 	beq	r2,r3,20254 <_start+0x30>

0:
    stw zero, (r2)
   20248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20250:	10fffd36 	bltu	r2,r3,20248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20254:	0023e440 	call	23e44 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20258:	0023fe40 	call	23fe4 <alt_main>

0002025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2025c:	003fff06 	br	2025c <alt_after_alt_main>

00020260 <daisy_d1_set>:
#include "daisyport.h"
#include "io.h"

void daisy_d1_set(uint8_t red, uint8_t green, uint8_t blue){
   20260:	defffb04 	addi	sp,sp,-20
   20264:	df000415 	stw	fp,16(sp)
   20268:	df000404 	addi	fp,sp,16
   2026c:	2005883a 	mov	r2,r4
   20270:	2809883a 	mov	r4,r5
   20274:	3007883a 	mov	r3,r6
   20278:	e0bffe05 	stb	r2,-8(fp)
   2027c:	2005883a 	mov	r2,r4
   20280:	e0bffd05 	stb	r2,-12(fp)
   20284:	1805883a 	mov	r2,r3
   20288:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   2028c:	e0bffc03 	ldbu	r2,-16(fp)
   20290:	1006943a 	slli	r3,r2,16
   20294:	e0bffe03 	ldbu	r2,-8(fp)
   20298:	1004923a 	slli	r2,r2,8
   2029c:	1886b03a 	or	r3,r3,r2
   202a0:	e0bffd03 	ldbu	r2,-12(fp)
   202a4:	1884b03a 	or	r2,r3,r2
   202a8:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D1_OFFSET,color);
   202ac:	e0ffff17 	ldw	r3,-4(fp)
   202b0:	00800134 	movhi	r2,4
   202b4:	10c40035 	stwio	r3,4096(r2)
}
   202b8:	0001883a 	nop
   202bc:	e037883a 	mov	sp,fp
   202c0:	df000017 	ldw	fp,0(sp)
   202c4:	dec00104 	addi	sp,sp,4
   202c8:	f800283a 	ret

000202cc <daisy_d2_set>:

void daisy_d2_set(uint8_t red, uint8_t green, uint8_t blue){
   202cc:	defffb04 	addi	sp,sp,-20
   202d0:	df000415 	stw	fp,16(sp)
   202d4:	df000404 	addi	fp,sp,16
   202d8:	2005883a 	mov	r2,r4
   202dc:	2809883a 	mov	r4,r5
   202e0:	3007883a 	mov	r3,r6
   202e4:	e0bffe05 	stb	r2,-8(fp)
   202e8:	2005883a 	mov	r2,r4
   202ec:	e0bffd05 	stb	r2,-12(fp)
   202f0:	1805883a 	mov	r2,r3
   202f4:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   202f8:	e0bffc03 	ldbu	r2,-16(fp)
   202fc:	1006943a 	slli	r3,r2,16
   20300:	e0bffe03 	ldbu	r2,-8(fp)
   20304:	1004923a 	slli	r2,r2,8
   20308:	1886b03a 	or	r3,r3,r2
   2030c:	e0bffd03 	ldbu	r2,-12(fp)
   20310:	1884b03a 	or	r2,r3,r2
   20314:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D2_OFFSET,color);
   20318:	e0ffff17 	ldw	r3,-4(fp)
   2031c:	00800134 	movhi	r2,4
   20320:	10c40135 	stwio	r3,4100(r2)
}
   20324:	0001883a 	nop
   20328:	e037883a 	mov	sp,fp
   2032c:	df000017 	ldw	fp,0(sp)
   20330:	dec00104 	addi	sp,sp,4
   20334:	f800283a 	ret

00020338 <daisy_d3_set>:

void daisy_d3_set(uint8_t red, uint8_t green, uint8_t blue){
   20338:	defffb04 	addi	sp,sp,-20
   2033c:	df000415 	stw	fp,16(sp)
   20340:	df000404 	addi	fp,sp,16
   20344:	2005883a 	mov	r2,r4
   20348:	2809883a 	mov	r4,r5
   2034c:	3007883a 	mov	r3,r6
   20350:	e0bffe05 	stb	r2,-8(fp)
   20354:	2005883a 	mov	r2,r4
   20358:	e0bffd05 	stb	r2,-12(fp)
   2035c:	1805883a 	mov	r2,r3
   20360:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   20364:	e0bffc03 	ldbu	r2,-16(fp)
   20368:	1006943a 	slli	r3,r2,16
   2036c:	e0bffe03 	ldbu	r2,-8(fp)
   20370:	1004923a 	slli	r2,r2,8
   20374:	1886b03a 	or	r3,r3,r2
   20378:	e0bffd03 	ldbu	r2,-12(fp)
   2037c:	1884b03a 	or	r2,r3,r2
   20380:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D3_OFFSET,color);
   20384:	e0ffff17 	ldw	r3,-4(fp)
   20388:	00800134 	movhi	r2,4
   2038c:	10c40235 	stwio	r3,4104(r2)
}
   20390:	0001883a 	nop
   20394:	e037883a 	mov	sp,fp
   20398:	df000017 	ldw	fp,0(sp)
   2039c:	dec00104 	addi	sp,sp,4
   203a0:	f800283a 	ret

000203a4 <daisy_d4_set>:

void daisy_d4_set(uint8_t red, uint8_t green, uint8_t blue){
   203a4:	defffb04 	addi	sp,sp,-20
   203a8:	df000415 	stw	fp,16(sp)
   203ac:	df000404 	addi	fp,sp,16
   203b0:	2005883a 	mov	r2,r4
   203b4:	2809883a 	mov	r4,r5
   203b8:	3007883a 	mov	r3,r6
   203bc:	e0bffe05 	stb	r2,-8(fp)
   203c0:	2005883a 	mov	r2,r4
   203c4:	e0bffd05 	stb	r2,-12(fp)
   203c8:	1805883a 	mov	r2,r3
   203cc:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   203d0:	e0bffc03 	ldbu	r2,-16(fp)
   203d4:	1006943a 	slli	r3,r2,16
   203d8:	e0bffe03 	ldbu	r2,-8(fp)
   203dc:	1004923a 	slli	r2,r2,8
   203e0:	1886b03a 	or	r3,r3,r2
   203e4:	e0bffd03 	ldbu	r2,-12(fp)
   203e8:	1884b03a 	or	r2,r3,r2
   203ec:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D4_OFFSET,color);
   203f0:	e0ffff17 	ldw	r3,-4(fp)
   203f4:	00800134 	movhi	r2,4
   203f8:	10c40335 	stwio	r3,4108(r2)
}
   203fc:	0001883a 	nop
   20400:	e037883a 	mov	sp,fp
   20404:	df000017 	ldw	fp,0(sp)
   20408:	dec00104 	addi	sp,sp,4
   2040c:	f800283a 	ret

00020410 <daisy_d5_set>:

void daisy_d5_set(uint8_t red, uint8_t green, uint8_t blue){
   20410:	defffb04 	addi	sp,sp,-20
   20414:	df000415 	stw	fp,16(sp)
   20418:	df000404 	addi	fp,sp,16
   2041c:	2005883a 	mov	r2,r4
   20420:	2809883a 	mov	r4,r5
   20424:	3007883a 	mov	r3,r6
   20428:	e0bffe05 	stb	r2,-8(fp)
   2042c:	2005883a 	mov	r2,r4
   20430:	e0bffd05 	stb	r2,-12(fp)
   20434:	1805883a 	mov	r2,r3
   20438:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   2043c:	e0bffc03 	ldbu	r2,-16(fp)
   20440:	1006943a 	slli	r3,r2,16
   20444:	e0bffe03 	ldbu	r2,-8(fp)
   20448:	1004923a 	slli	r2,r2,8
   2044c:	1886b03a 	or	r3,r3,r2
   20450:	e0bffd03 	ldbu	r2,-12(fp)
   20454:	1884b03a 	or	r2,r3,r2
   20458:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D5_OFFSET,color);
   2045c:	e0ffff17 	ldw	r3,-4(fp)
   20460:	00800134 	movhi	r2,4
   20464:	10c40435 	stwio	r3,4112(r2)
}
   20468:	0001883a 	nop
   2046c:	e037883a 	mov	sp,fp
   20470:	df000017 	ldw	fp,0(sp)
   20474:	dec00104 	addi	sp,sp,4
   20478:	f800283a 	ret

0002047c <daisy_d6_set>:

void daisy_d6_set(uint8_t red, uint8_t green, uint8_t blue){
   2047c:	defffb04 	addi	sp,sp,-20
   20480:	df000415 	stw	fp,16(sp)
   20484:	df000404 	addi	fp,sp,16
   20488:	2005883a 	mov	r2,r4
   2048c:	2809883a 	mov	r4,r5
   20490:	3007883a 	mov	r3,r6
   20494:	e0bffe05 	stb	r2,-8(fp)
   20498:	2005883a 	mov	r2,r4
   2049c:	e0bffd05 	stb	r2,-12(fp)
   204a0:	1805883a 	mov	r2,r3
   204a4:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   204a8:	e0bffc03 	ldbu	r2,-16(fp)
   204ac:	1006943a 	slli	r3,r2,16
   204b0:	e0bffe03 	ldbu	r2,-8(fp)
   204b4:	1004923a 	slli	r2,r2,8
   204b8:	1886b03a 	or	r3,r3,r2
   204bc:	e0bffd03 	ldbu	r2,-12(fp)
   204c0:	1884b03a 	or	r2,r3,r2
   204c4:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D6_OFFSET,color);
   204c8:	e0ffff17 	ldw	r3,-4(fp)
   204cc:	00800134 	movhi	r2,4
   204d0:	10c40535 	stwio	r3,4116(r2)
}
   204d4:	0001883a 	nop
   204d8:	e037883a 	mov	sp,fp
   204dc:	df000017 	ldw	fp,0(sp)
   204e0:	dec00104 	addi	sp,sp,4
   204e4:	f800283a 	ret

000204e8 <daisy_d7_set>:

void daisy_d7_set(uint8_t red, uint8_t green, uint8_t blue){
   204e8:	defffb04 	addi	sp,sp,-20
   204ec:	df000415 	stw	fp,16(sp)
   204f0:	df000404 	addi	fp,sp,16
   204f4:	2005883a 	mov	r2,r4
   204f8:	2809883a 	mov	r4,r5
   204fc:	3007883a 	mov	r3,r6
   20500:	e0bffe05 	stb	r2,-8(fp)
   20504:	2005883a 	mov	r2,r4
   20508:	e0bffd05 	stb	r2,-12(fp)
   2050c:	1805883a 	mov	r2,r3
   20510:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   20514:	e0bffc03 	ldbu	r2,-16(fp)
   20518:	1006943a 	slli	r3,r2,16
   2051c:	e0bffe03 	ldbu	r2,-8(fp)
   20520:	1004923a 	slli	r2,r2,8
   20524:	1886b03a 	or	r3,r3,r2
   20528:	e0bffd03 	ldbu	r2,-12(fp)
   2052c:	1884b03a 	or	r2,r3,r2
   20530:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D7_OFFSET,color);
   20534:	e0ffff17 	ldw	r3,-4(fp)
   20538:	00800134 	movhi	r2,4
   2053c:	10c40635 	stwio	r3,4120(r2)
}
   20540:	0001883a 	nop
   20544:	e037883a 	mov	sp,fp
   20548:	df000017 	ldw	fp,0(sp)
   2054c:	dec00104 	addi	sp,sp,4
   20550:	f800283a 	ret

00020554 <daisy_d8_set>:

void daisy_d8_set(uint8_t red, uint8_t green, uint8_t blue){
   20554:	defffb04 	addi	sp,sp,-20
   20558:	df000415 	stw	fp,16(sp)
   2055c:	df000404 	addi	fp,sp,16
   20560:	2005883a 	mov	r2,r4
   20564:	2809883a 	mov	r4,r5
   20568:	3007883a 	mov	r3,r6
   2056c:	e0bffe05 	stb	r2,-8(fp)
   20570:	2005883a 	mov	r2,r4
   20574:	e0bffd05 	stb	r2,-12(fp)
   20578:	1805883a 	mov	r2,r3
   2057c:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   20580:	e0bffc03 	ldbu	r2,-16(fp)
   20584:	1006943a 	slli	r3,r2,16
   20588:	e0bffe03 	ldbu	r2,-8(fp)
   2058c:	1004923a 	slli	r2,r2,8
   20590:	1886b03a 	or	r3,r3,r2
   20594:	e0bffd03 	ldbu	r2,-12(fp)
   20598:	1884b03a 	or	r2,r3,r2
   2059c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D8_OFFSET,color);
   205a0:	e0ffff17 	ldw	r3,-4(fp)
   205a4:	00800134 	movhi	r2,4
   205a8:	10c40735 	stwio	r3,4124(r2)
}
   205ac:	0001883a 	nop
   205b0:	e037883a 	mov	sp,fp
   205b4:	df000017 	ldw	fp,0(sp)
   205b8:	dec00104 	addi	sp,sp,4
   205bc:	f800283a 	ret

000205c0 <daisy_d9_set>:

void daisy_d9_set(uint8_t red, uint8_t green, uint8_t blue){
   205c0:	defffb04 	addi	sp,sp,-20
   205c4:	df000415 	stw	fp,16(sp)
   205c8:	df000404 	addi	fp,sp,16
   205cc:	2005883a 	mov	r2,r4
   205d0:	2809883a 	mov	r4,r5
   205d4:	3007883a 	mov	r3,r6
   205d8:	e0bffe05 	stb	r2,-8(fp)
   205dc:	2005883a 	mov	r2,r4
   205e0:	e0bffd05 	stb	r2,-12(fp)
   205e4:	1805883a 	mov	r2,r3
   205e8:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   205ec:	e0bffc03 	ldbu	r2,-16(fp)
   205f0:	1006943a 	slli	r3,r2,16
   205f4:	e0bffe03 	ldbu	r2,-8(fp)
   205f8:	1004923a 	slli	r2,r2,8
   205fc:	1886b03a 	or	r3,r3,r2
   20600:	e0bffd03 	ldbu	r2,-12(fp)
   20604:	1884b03a 	or	r2,r3,r2
   20608:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D9_OFFSET,color);
   2060c:	e0ffff17 	ldw	r3,-4(fp)
   20610:	00800134 	movhi	r2,4
   20614:	10c40835 	stwio	r3,4128(r2)
}
   20618:	0001883a 	nop
   2061c:	e037883a 	mov	sp,fp
   20620:	df000017 	ldw	fp,0(sp)
   20624:	dec00104 	addi	sp,sp,4
   20628:	f800283a 	ret

0002062c <daisy_d10_set>:

void daisy_d10_set(uint8_t red, uint8_t green, uint8_t blue){
   2062c:	defffb04 	addi	sp,sp,-20
   20630:	df000415 	stw	fp,16(sp)
   20634:	df000404 	addi	fp,sp,16
   20638:	2005883a 	mov	r2,r4
   2063c:	2809883a 	mov	r4,r5
   20640:	3007883a 	mov	r3,r6
   20644:	e0bffe05 	stb	r2,-8(fp)
   20648:	2005883a 	mov	r2,r4
   2064c:	e0bffd05 	stb	r2,-12(fp)
   20650:	1805883a 	mov	r2,r3
   20654:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   20658:	e0bffc03 	ldbu	r2,-16(fp)
   2065c:	1006943a 	slli	r3,r2,16
   20660:	e0bffe03 	ldbu	r2,-8(fp)
   20664:	1004923a 	slli	r2,r2,8
   20668:	1886b03a 	or	r3,r3,r2
   2066c:	e0bffd03 	ldbu	r2,-12(fp)
   20670:	1884b03a 	or	r2,r3,r2
   20674:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D10_OFFSET,color);
   20678:	e0ffff17 	ldw	r3,-4(fp)
   2067c:	00800134 	movhi	r2,4
   20680:	10c40935 	stwio	r3,4132(r2)
}
   20684:	0001883a 	nop
   20688:	e037883a 	mov	sp,fp
   2068c:	df000017 	ldw	fp,0(sp)
   20690:	dec00104 	addi	sp,sp,4
   20694:	f800283a 	ret

00020698 <daisy_d11_set>:

void daisy_d11_set(uint8_t red, uint8_t green, uint8_t blue){
   20698:	defffb04 	addi	sp,sp,-20
   2069c:	df000415 	stw	fp,16(sp)
   206a0:	df000404 	addi	fp,sp,16
   206a4:	2005883a 	mov	r2,r4
   206a8:	2809883a 	mov	r4,r5
   206ac:	3007883a 	mov	r3,r6
   206b0:	e0bffe05 	stb	r2,-8(fp)
   206b4:	2005883a 	mov	r2,r4
   206b8:	e0bffd05 	stb	r2,-12(fp)
   206bc:	1805883a 	mov	r2,r3
   206c0:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   206c4:	e0bffc03 	ldbu	r2,-16(fp)
   206c8:	1006943a 	slli	r3,r2,16
   206cc:	e0bffe03 	ldbu	r2,-8(fp)
   206d0:	1004923a 	slli	r2,r2,8
   206d4:	1886b03a 	or	r3,r3,r2
   206d8:	e0bffd03 	ldbu	r2,-12(fp)
   206dc:	1884b03a 	or	r2,r3,r2
   206e0:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D11_OFFSET,color);
   206e4:	e0ffff17 	ldw	r3,-4(fp)
   206e8:	00800134 	movhi	r2,4
   206ec:	10c40a35 	stwio	r3,4136(r2)
}
   206f0:	0001883a 	nop
   206f4:	e037883a 	mov	sp,fp
   206f8:	df000017 	ldw	fp,0(sp)
   206fc:	dec00104 	addi	sp,sp,4
   20700:	f800283a 	ret

00020704 <daisy_d12_set>:
void daisy_d12_set(uint8_t red, uint8_t green, uint8_t blue){
   20704:	defffb04 	addi	sp,sp,-20
   20708:	df000415 	stw	fp,16(sp)
   2070c:	df000404 	addi	fp,sp,16
   20710:	2005883a 	mov	r2,r4
   20714:	2809883a 	mov	r4,r5
   20718:	3007883a 	mov	r3,r6
   2071c:	e0bffe05 	stb	r2,-8(fp)
   20720:	2005883a 	mov	r2,r4
   20724:	e0bffd05 	stb	r2,-12(fp)
   20728:	1805883a 	mov	r2,r3
   2072c:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   20730:	e0bffc03 	ldbu	r2,-16(fp)
   20734:	1006943a 	slli	r3,r2,16
   20738:	e0bffe03 	ldbu	r2,-8(fp)
   2073c:	1004923a 	slli	r2,r2,8
   20740:	1886b03a 	or	r3,r3,r2
   20744:	e0bffd03 	ldbu	r2,-12(fp)
   20748:	1884b03a 	or	r2,r3,r2
   2074c:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D12_OFFSET,color);
   20750:	e0ffff17 	ldw	r3,-4(fp)
   20754:	00800134 	movhi	r2,4
   20758:	10c40b35 	stwio	r3,4140(r2)
}
   2075c:	0001883a 	nop
   20760:	e037883a 	mov	sp,fp
   20764:	df000017 	ldw	fp,0(sp)
   20768:	dec00104 	addi	sp,sp,4
   2076c:	f800283a 	ret

00020770 <daisy_d13_set>:

void daisy_d13_set(uint8_t red, uint8_t green, uint8_t blue){
   20770:	defffb04 	addi	sp,sp,-20
   20774:	df000415 	stw	fp,16(sp)
   20778:	df000404 	addi	fp,sp,16
   2077c:	2005883a 	mov	r2,r4
   20780:	2809883a 	mov	r4,r5
   20784:	3007883a 	mov	r3,r6
   20788:	e0bffe05 	stb	r2,-8(fp)
   2078c:	2005883a 	mov	r2,r4
   20790:	e0bffd05 	stb	r2,-12(fp)
   20794:	1805883a 	mov	r2,r3
   20798:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   2079c:	e0bffc03 	ldbu	r2,-16(fp)
   207a0:	1006943a 	slli	r3,r2,16
   207a4:	e0bffe03 	ldbu	r2,-8(fp)
   207a8:	1004923a 	slli	r2,r2,8
   207ac:	1886b03a 	or	r3,r3,r2
   207b0:	e0bffd03 	ldbu	r2,-12(fp)
   207b4:	1884b03a 	or	r2,r3,r2
   207b8:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D13_OFFSET,color);
   207bc:	e0ffff17 	ldw	r3,-4(fp)
   207c0:	00800134 	movhi	r2,4
   207c4:	10c40c35 	stwio	r3,4144(r2)
}
   207c8:	0001883a 	nop
   207cc:	e037883a 	mov	sp,fp
   207d0:	df000017 	ldw	fp,0(sp)
   207d4:	dec00104 	addi	sp,sp,4
   207d8:	f800283a 	ret

000207dc <daisy_d14_set>:
void daisy_d14_set(uint8_t red, uint8_t green, uint8_t blue){
   207dc:	defffb04 	addi	sp,sp,-20
   207e0:	df000415 	stw	fp,16(sp)
   207e4:	df000404 	addi	fp,sp,16
   207e8:	2005883a 	mov	r2,r4
   207ec:	2809883a 	mov	r4,r5
   207f0:	3007883a 	mov	r3,r6
   207f4:	e0bffe05 	stb	r2,-8(fp)
   207f8:	2005883a 	mov	r2,r4
   207fc:	e0bffd05 	stb	r2,-12(fp)
   20800:	1805883a 	mov	r2,r3
   20804:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   20808:	e0bffc03 	ldbu	r2,-16(fp)
   2080c:	1006943a 	slli	r3,r2,16
   20810:	e0bffe03 	ldbu	r2,-8(fp)
   20814:	1004923a 	slli	r2,r2,8
   20818:	1886b03a 	or	r3,r3,r2
   2081c:	e0bffd03 	ldbu	r2,-12(fp)
   20820:	1884b03a 	or	r2,r3,r2
   20824:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D14_OFFSET,color);
   20828:	e0ffff17 	ldw	r3,-4(fp)
   2082c:	00800134 	movhi	r2,4
   20830:	10c40d35 	stwio	r3,4148(r2)
}
   20834:	0001883a 	nop
   20838:	e037883a 	mov	sp,fp
   2083c:	df000017 	ldw	fp,0(sp)
   20840:	dec00104 	addi	sp,sp,4
   20844:	f800283a 	ret

00020848 <daisy_d15_set>:

void daisy_d15_set(uint8_t red, uint8_t green, uint8_t blue){
   20848:	defffb04 	addi	sp,sp,-20
   2084c:	df000415 	stw	fp,16(sp)
   20850:	df000404 	addi	fp,sp,16
   20854:	2005883a 	mov	r2,r4
   20858:	2809883a 	mov	r4,r5
   2085c:	3007883a 	mov	r3,r6
   20860:	e0bffe05 	stb	r2,-8(fp)
   20864:	2005883a 	mov	r2,r4
   20868:	e0bffd05 	stb	r2,-12(fp)
   2086c:	1805883a 	mov	r2,r3
   20870:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   20874:	e0bffc03 	ldbu	r2,-16(fp)
   20878:	1006943a 	slli	r3,r2,16
   2087c:	e0bffe03 	ldbu	r2,-8(fp)
   20880:	1004923a 	slli	r2,r2,8
   20884:	1886b03a 	or	r3,r3,r2
   20888:	e0bffd03 	ldbu	r2,-12(fp)
   2088c:	1884b03a 	or	r2,r3,r2
   20890:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D15_OFFSET,color);
   20894:	e0ffff17 	ldw	r3,-4(fp)
   20898:	00800134 	movhi	r2,4
   2089c:	10c40e35 	stwio	r3,4152(r2)
}
   208a0:	0001883a 	nop
   208a4:	e037883a 	mov	sp,fp
   208a8:	df000017 	ldw	fp,0(sp)
   208ac:	dec00104 	addi	sp,sp,4
   208b0:	f800283a 	ret

000208b4 <daisy_d16_set>:

void daisy_d16_set(uint8_t red, uint8_t green, uint8_t blue){
   208b4:	defffb04 	addi	sp,sp,-20
   208b8:	df000415 	stw	fp,16(sp)
   208bc:	df000404 	addi	fp,sp,16
   208c0:	2005883a 	mov	r2,r4
   208c4:	2809883a 	mov	r4,r5
   208c8:	3007883a 	mov	r3,r6
   208cc:	e0bffe05 	stb	r2,-8(fp)
   208d0:	2005883a 	mov	r2,r4
   208d4:	e0bffd05 	stb	r2,-12(fp)
   208d8:	1805883a 	mov	r2,r3
   208dc:	e0bffc05 	stb	r2,-16(fp)
	uint32_t color = (blue << 16) | (red << 8) | green;
   208e0:	e0bffc03 	ldbu	r2,-16(fp)
   208e4:	1006943a 	slli	r3,r2,16
   208e8:	e0bffe03 	ldbu	r2,-8(fp)
   208ec:	1004923a 	slli	r2,r2,8
   208f0:	1886b03a 	or	r3,r3,r2
   208f4:	e0bffd03 	ldbu	r2,-12(fp)
   208f8:	1884b03a 	or	r2,r3,r2
   208fc:	e0bfff15 	stw	r2,-4(fp)
	IOWR_32DIRECT(DAISY_BASE_ADDRESS,4 * DAISY_REG_D16_OFFSET,color);
   20900:	e0ffff17 	ldw	r3,-4(fp)
   20904:	00800134 	movhi	r2,4
   20908:	10c40f35 	stwio	r3,4156(r2)
}
   2090c:	0001883a 	nop
   20910:	e037883a 	mov	sp,fp
   20914:	df000017 	ldw	fp,0(sp)
   20918:	dec00104 	addi	sp,sp,4
   2091c:	f800283a 	ret

00020920 <daisy_all_set>:

void daisy_all_set(uint8_t red, uint8_t green, uint8_t blue){
   20920:	defffb04 	addi	sp,sp,-20
   20924:	dfc00415 	stw	ra,16(sp)
   20928:	df000315 	stw	fp,12(sp)
   2092c:	df000304 	addi	fp,sp,12
   20930:	2005883a 	mov	r2,r4
   20934:	2809883a 	mov	r4,r5
   20938:	3007883a 	mov	r3,r6
   2093c:	e0bfff05 	stb	r2,-4(fp)
   20940:	2005883a 	mov	r2,r4
   20944:	e0bffe05 	stb	r2,-8(fp)
   20948:	1805883a 	mov	r2,r3
   2094c:	e0bffd05 	stb	r2,-12(fp)
	daisy_d1_set(red, green, blue);
   20950:	e0bfff03 	ldbu	r2,-4(fp)
   20954:	e0fffe03 	ldbu	r3,-8(fp)
   20958:	e13ffd03 	ldbu	r4,-12(fp)
   2095c:	200d883a 	mov	r6,r4
   20960:	180b883a 	mov	r5,r3
   20964:	1009883a 	mov	r4,r2
   20968:	00202600 	call	20260 <daisy_d1_set>
	daisy_d2_set(red, green, blue);
   2096c:	e0bfff03 	ldbu	r2,-4(fp)
   20970:	e0fffe03 	ldbu	r3,-8(fp)
   20974:	e13ffd03 	ldbu	r4,-12(fp)
   20978:	200d883a 	mov	r6,r4
   2097c:	180b883a 	mov	r5,r3
   20980:	1009883a 	mov	r4,r2
   20984:	00202cc0 	call	202cc <daisy_d2_set>
	daisy_d3_set(red, green, blue);
   20988:	e0bfff03 	ldbu	r2,-4(fp)
   2098c:	e0fffe03 	ldbu	r3,-8(fp)
   20990:	e13ffd03 	ldbu	r4,-12(fp)
   20994:	200d883a 	mov	r6,r4
   20998:	180b883a 	mov	r5,r3
   2099c:	1009883a 	mov	r4,r2
   209a0:	00203380 	call	20338 <daisy_d3_set>
	daisy_d4_set(red, green, blue);
   209a4:	e0bfff03 	ldbu	r2,-4(fp)
   209a8:	e0fffe03 	ldbu	r3,-8(fp)
   209ac:	e13ffd03 	ldbu	r4,-12(fp)
   209b0:	200d883a 	mov	r6,r4
   209b4:	180b883a 	mov	r5,r3
   209b8:	1009883a 	mov	r4,r2
   209bc:	00203a40 	call	203a4 <daisy_d4_set>
	daisy_d5_set(red, green, blue);
   209c0:	e0bfff03 	ldbu	r2,-4(fp)
   209c4:	e0fffe03 	ldbu	r3,-8(fp)
   209c8:	e13ffd03 	ldbu	r4,-12(fp)
   209cc:	200d883a 	mov	r6,r4
   209d0:	180b883a 	mov	r5,r3
   209d4:	1009883a 	mov	r4,r2
   209d8:	00204100 	call	20410 <daisy_d5_set>
	daisy_d6_set(red, green, blue);
   209dc:	e0bfff03 	ldbu	r2,-4(fp)
   209e0:	e0fffe03 	ldbu	r3,-8(fp)
   209e4:	e13ffd03 	ldbu	r4,-12(fp)
   209e8:	200d883a 	mov	r6,r4
   209ec:	180b883a 	mov	r5,r3
   209f0:	1009883a 	mov	r4,r2
   209f4:	002047c0 	call	2047c <daisy_d6_set>
	daisy_d7_set(red, green, blue);
   209f8:	e0bfff03 	ldbu	r2,-4(fp)
   209fc:	e0fffe03 	ldbu	r3,-8(fp)
   20a00:	e13ffd03 	ldbu	r4,-12(fp)
   20a04:	200d883a 	mov	r6,r4
   20a08:	180b883a 	mov	r5,r3
   20a0c:	1009883a 	mov	r4,r2
   20a10:	00204e80 	call	204e8 <daisy_d7_set>
	daisy_d8_set(red, green, blue);
   20a14:	e0bfff03 	ldbu	r2,-4(fp)
   20a18:	e0fffe03 	ldbu	r3,-8(fp)
   20a1c:	e13ffd03 	ldbu	r4,-12(fp)
   20a20:	200d883a 	mov	r6,r4
   20a24:	180b883a 	mov	r5,r3
   20a28:	1009883a 	mov	r4,r2
   20a2c:	00205540 	call	20554 <daisy_d8_set>
	daisy_d9_set(red, green, blue);
   20a30:	e0bfff03 	ldbu	r2,-4(fp)
   20a34:	e0fffe03 	ldbu	r3,-8(fp)
   20a38:	e13ffd03 	ldbu	r4,-12(fp)
   20a3c:	200d883a 	mov	r6,r4
   20a40:	180b883a 	mov	r5,r3
   20a44:	1009883a 	mov	r4,r2
   20a48:	00205c00 	call	205c0 <daisy_d9_set>
	daisy_d10_set(red, green, blue);
   20a4c:	e0bfff03 	ldbu	r2,-4(fp)
   20a50:	e0fffe03 	ldbu	r3,-8(fp)
   20a54:	e13ffd03 	ldbu	r4,-12(fp)
   20a58:	200d883a 	mov	r6,r4
   20a5c:	180b883a 	mov	r5,r3
   20a60:	1009883a 	mov	r4,r2
   20a64:	002062c0 	call	2062c <daisy_d10_set>
	daisy_d11_set(red, green, blue);
   20a68:	e0bfff03 	ldbu	r2,-4(fp)
   20a6c:	e0fffe03 	ldbu	r3,-8(fp)
   20a70:	e13ffd03 	ldbu	r4,-12(fp)
   20a74:	200d883a 	mov	r6,r4
   20a78:	180b883a 	mov	r5,r3
   20a7c:	1009883a 	mov	r4,r2
   20a80:	00206980 	call	20698 <daisy_d11_set>
	daisy_d12_set(red, green, blue);
   20a84:	e0bfff03 	ldbu	r2,-4(fp)
   20a88:	e0fffe03 	ldbu	r3,-8(fp)
   20a8c:	e13ffd03 	ldbu	r4,-12(fp)
   20a90:	200d883a 	mov	r6,r4
   20a94:	180b883a 	mov	r5,r3
   20a98:	1009883a 	mov	r4,r2
   20a9c:	00207040 	call	20704 <daisy_d12_set>
	daisy_d13_set(red, green, blue);
   20aa0:	e0bfff03 	ldbu	r2,-4(fp)
   20aa4:	e0fffe03 	ldbu	r3,-8(fp)
   20aa8:	e13ffd03 	ldbu	r4,-12(fp)
   20aac:	200d883a 	mov	r6,r4
   20ab0:	180b883a 	mov	r5,r3
   20ab4:	1009883a 	mov	r4,r2
   20ab8:	00207700 	call	20770 <daisy_d13_set>
	daisy_d14_set(red, green, blue);
   20abc:	e0bfff03 	ldbu	r2,-4(fp)
   20ac0:	e0fffe03 	ldbu	r3,-8(fp)
   20ac4:	e13ffd03 	ldbu	r4,-12(fp)
   20ac8:	200d883a 	mov	r6,r4
   20acc:	180b883a 	mov	r5,r3
   20ad0:	1009883a 	mov	r4,r2
   20ad4:	00207dc0 	call	207dc <daisy_d14_set>
	daisy_d15_set(red, green, blue);
   20ad8:	e0bfff03 	ldbu	r2,-4(fp)
   20adc:	e0fffe03 	ldbu	r3,-8(fp)
   20ae0:	e13ffd03 	ldbu	r4,-12(fp)
   20ae4:	200d883a 	mov	r6,r4
   20ae8:	180b883a 	mov	r5,r3
   20aec:	1009883a 	mov	r4,r2
   20af0:	00208480 	call	20848 <daisy_d15_set>
	daisy_d16_set(red, green, blue);
   20af4:	e0bfff03 	ldbu	r2,-4(fp)
   20af8:	e0fffe03 	ldbu	r3,-8(fp)
   20afc:	e13ffd03 	ldbu	r4,-12(fp)
   20b00:	200d883a 	mov	r6,r4
   20b04:	180b883a 	mov	r5,r3
   20b08:	1009883a 	mov	r4,r2
   20b0c:	00208b40 	call	208b4 <daisy_d16_set>
}
   20b10:	0001883a 	nop
   20b14:	e037883a 	mov	sp,fp
   20b18:	dfc00117 	ldw	ra,4(sp)
   20b1c:	df000017 	ldw	fp,0(sp)
   20b20:	dec00204 	addi	sp,sp,8
   20b24:	f800283a 	ret

00020b28 <daisy_rainbow>:


void daisy_rainbow(){
   20b28:	defffe04 	addi	sp,sp,-8
   20b2c:	dfc00115 	stw	ra,4(sp)
   20b30:	df000015 	stw	fp,0(sp)
   20b34:	d839883a 	mov	fp,sp
	daisy_d1_set(254, 0, 0);
   20b38:	000d883a 	mov	r6,zero
   20b3c:	000b883a 	mov	r5,zero
   20b40:	01003f84 	movi	r4,254
   20b44:	00202600 	call	20260 <daisy_d1_set>
	daisy_d2_set(254, 125, 0);
   20b48:	000d883a 	mov	r6,zero
   20b4c:	01401f44 	movi	r5,125
   20b50:	01003f84 	movi	r4,254
   20b54:	00202cc0 	call	202cc <daisy_d2_set>
	daisy_d3_set(254, 254, 0);
   20b58:	000d883a 	mov	r6,zero
   20b5c:	01403f84 	movi	r5,254
   20b60:	01003f84 	movi	r4,254
   20b64:	00203380 	call	20338 <daisy_d3_set>
	daisy_d4_set(125, 254, 0);
   20b68:	000d883a 	mov	r6,zero
   20b6c:	01403f84 	movi	r5,254
   20b70:	01001f44 	movi	r4,125
   20b74:	00203a40 	call	203a4 <daisy_d4_set>
	daisy_d5_set(0, 254, 0);
   20b78:	000d883a 	mov	r6,zero
   20b7c:	01403f84 	movi	r5,254
   20b80:	0009883a 	mov	r4,zero
   20b84:	00204100 	call	20410 <daisy_d5_set>
	daisy_d6_set(0, 254, 120);
   20b88:	01801e04 	movi	r6,120
   20b8c:	01403f84 	movi	r5,254
   20b90:	0009883a 	mov	r4,zero
   20b94:	002047c0 	call	2047c <daisy_d6_set>
	daisy_d7_set(0, 254, 254);
   20b98:	01803f84 	movi	r6,254
   20b9c:	01403f84 	movi	r5,254
   20ba0:	0009883a 	mov	r4,zero
   20ba4:	00204e80 	call	204e8 <daisy_d7_set>
	daisy_d8_set(0, 125, 254);
   20ba8:	01803f84 	movi	r6,254
   20bac:	01401f44 	movi	r5,125
   20bb0:	0009883a 	mov	r4,zero
   20bb4:	00205540 	call	20554 <daisy_d8_set>
	daisy_d9_set(0, 0, 254);
   20bb8:	01803f84 	movi	r6,254
   20bbc:	000b883a 	mov	r5,zero
   20bc0:	0009883a 	mov	r4,zero
   20bc4:	00205c00 	call	205c0 <daisy_d9_set>
	daisy_d10_set(125, 0, 254);
   20bc8:	01803f84 	movi	r6,254
   20bcc:	000b883a 	mov	r5,zero
   20bd0:	01001f44 	movi	r4,125
   20bd4:	002062c0 	call	2062c <daisy_d10_set>
	daisy_d11_set(254, 0, 254);
   20bd8:	01803f84 	movi	r6,254
   20bdc:	000b883a 	mov	r5,zero
   20be0:	01003f84 	movi	r4,254
   20be4:	00206980 	call	20698 <daisy_d11_set>
	daisy_d12_set(254, 0, 125);
   20be8:	01801f44 	movi	r6,125
   20bec:	000b883a 	mov	r5,zero
   20bf0:	01003f84 	movi	r4,254
   20bf4:	00207040 	call	20704 <daisy_d12_set>
	daisy_d13_set(254, 0, 200);
   20bf8:	01803204 	movi	r6,200
   20bfc:	000b883a 	mov	r5,zero
   20c00:	01003f84 	movi	r4,254
   20c04:	00207700 	call	20770 <daisy_d13_set>
	daisy_d14_set(200, 0, 220);
   20c08:	01803704 	movi	r6,220
   20c0c:	000b883a 	mov	r5,zero
   20c10:	01003204 	movi	r4,200
   20c14:	00207dc0 	call	207dc <daisy_d14_set>
	daisy_d15_set(100, 0, 230);
   20c18:	01803984 	movi	r6,230
   20c1c:	000b883a 	mov	r5,zero
   20c20:	01001904 	movi	r4,100
   20c24:	00208480 	call	20848 <daisy_d15_set>
	daisy_d16_set(0, 0, 254);
   20c28:	01803f84 	movi	r6,254
   20c2c:	000b883a 	mov	r5,zero
   20c30:	0009883a 	mov	r4,zero
   20c34:	00208b40 	call	208b4 <daisy_d16_set>
}
   20c38:	0001883a 	nop
   20c3c:	e037883a 	mov	sp,fp
   20c40:	dfc00117 	ldw	ra,4(sp)
   20c44:	df000017 	ldw	fp,0(sp)
   20c48:	dec00204 	addi	sp,sp,8
   20c4c:	f800283a 	ret

00020c50 <main>:
#include "daisyport.h"
#include <time.h>


int main()
{
   20c50:	defffe04 	addi	sp,sp,-8
   20c54:	dfc00115 	stw	ra,4(sp)
   20c58:	df000015 	stw	fp,0(sp)
   20c5c:	d839883a 	mov	fp,sp
	daisy_all_set(0, 0, 0);
   20c60:	000d883a 	mov	r6,zero
   20c64:	000b883a 	mov	r5,zero
   20c68:	0009883a 	mov	r4,zero
   20c6c:	00209200 	call	20920 <daisy_all_set>
	printf("Hello from Nios II!\n");
   20c70:	010000b4 	movhi	r4,2
   20c74:	21182c04 	addi	r4,r4,24752
   20c78:	0020d640 	call	20d64 <puts>
	daisy_rainbow();
   20c7c:	0020b280 	call	20b28 <daisy_rainbow>
  return 0;
   20c80:	0005883a 	mov	r2,zero
}
   20c84:	e037883a 	mov	sp,fp
   20c88:	dfc00117 	ldw	ra,4(sp)
   20c8c:	df000017 	ldw	fp,0(sp)
   20c90:	dec00204 	addi	sp,sp,8
   20c94:	f800283a 	ret

00020c98 <_puts_r>:
   20c98:	defff504 	addi	sp,sp,-44
   20c9c:	dc000815 	stw	r16,32(sp)
   20ca0:	2021883a 	mov	r16,r4
   20ca4:	2809883a 	mov	r4,r5
   20ca8:	dc400915 	stw	r17,36(sp)
   20cac:	dfc00a15 	stw	ra,40(sp)
   20cb0:	2823883a 	mov	r17,r5
   20cb4:	0020d740 	call	20d74 <strlen>
   20cb8:	11000044 	addi	r4,r2,1
   20cbc:	d8800515 	stw	r2,20(sp)
   20cc0:	00800044 	movi	r2,1
   20cc4:	00c000b4 	movhi	r3,2
   20cc8:	d8800715 	stw	r2,28(sp)
   20ccc:	d8800404 	addi	r2,sp,16
   20cd0:	18d83104 	addi	r3,r3,24772
   20cd4:	d8800115 	stw	r2,4(sp)
   20cd8:	00800084 	movi	r2,2
   20cdc:	dc400415 	stw	r17,16(sp)
   20ce0:	d8c00615 	stw	r3,24(sp)
   20ce4:	d9000315 	stw	r4,12(sp)
   20ce8:	d8800215 	stw	r2,8(sp)
   20cec:	81400217 	ldw	r5,8(r16)
   20cf0:	80000226 	beq	r16,zero,20cfc <_puts_r+0x64>
   20cf4:	80800e17 	ldw	r2,56(r16)
   20cf8:	10001326 	beq	r2,zero,20d48 <_puts_r+0xb0>
   20cfc:	2880030b 	ldhu	r2,12(r5)
   20d00:	10c8000c 	andi	r3,r2,8192
   20d04:	1800061e 	bne	r3,zero,20d20 <_puts_r+0x88>
   20d08:	28c01917 	ldw	r3,100(r5)
   20d0c:	0137ffc4 	movi	r4,-8193
   20d10:	10880014 	ori	r2,r2,8192
   20d14:	1906703a 	and	r3,r3,r4
   20d18:	2880030d 	sth	r2,12(r5)
   20d1c:	28c01915 	stw	r3,100(r5)
   20d20:	d9800104 	addi	r6,sp,4
   20d24:	8009883a 	mov	r4,r16
   20d28:	00211b80 	call	211b8 <__sfvwrite_r>
   20d2c:	10000b1e 	bne	r2,zero,20d5c <_puts_r+0xc4>
   20d30:	00800284 	movi	r2,10
   20d34:	dfc00a17 	ldw	ra,40(sp)
   20d38:	dc400917 	ldw	r17,36(sp)
   20d3c:	dc000817 	ldw	r16,32(sp)
   20d40:	dec00b04 	addi	sp,sp,44
   20d44:	f800283a 	ret
   20d48:	8009883a 	mov	r4,r16
   20d4c:	d9400015 	stw	r5,0(sp)
   20d50:	00211700 	call	21170 <__sinit>
   20d54:	d9400017 	ldw	r5,0(sp)
   20d58:	003fe806 	br	20cfc <_puts_r+0x64>
   20d5c:	00bfffc4 	movi	r2,-1
   20d60:	003ff406 	br	20d34 <_puts_r+0x9c>

00020d64 <puts>:
   20d64:	008000b4 	movhi	r2,2
   20d68:	200b883a 	mov	r5,r4
   20d6c:	111ecd17 	ldw	r4,31540(r2)
   20d70:	0020c981 	jmpi	20c98 <_puts_r>

00020d74 <strlen>:
   20d74:	208000cc 	andi	r2,r4,3
   20d78:	10000926 	beq	r2,zero,20da0 <strlen+0x2c>
   20d7c:	2005883a 	mov	r2,r4
   20d80:	00000306 	br	20d90 <strlen+0x1c>
   20d84:	10800044 	addi	r2,r2,1
   20d88:	10c000cc 	andi	r3,r2,3
   20d8c:	18000526 	beq	r3,zero,20da4 <strlen+0x30>
   20d90:	10c00007 	ldb	r3,0(r2)
   20d94:	183ffb1e 	bne	r3,zero,20d84 <strlen+0x10>
   20d98:	1105c83a 	sub	r2,r2,r4
   20d9c:	f800283a 	ret
   20da0:	2005883a 	mov	r2,r4
   20da4:	11400017 	ldw	r5,0(r2)
   20da8:	01ffbff4 	movhi	r7,65279
   20dac:	39ffbfc4 	addi	r7,r7,-257
   20db0:	29c7883a 	add	r3,r5,r7
   20db4:	01a02074 	movhi	r6,32897
   20db8:	014a303a 	nor	r5,zero,r5
   20dbc:	1946703a 	and	r3,r3,r5
   20dc0:	31a02004 	addi	r6,r6,-32640
   20dc4:	1986703a 	and	r3,r3,r6
   20dc8:	1800071e 	bne	r3,zero,20de8 <strlen+0x74>
   20dcc:	11400117 	ldw	r5,4(r2)
   20dd0:	10800104 	addi	r2,r2,4
   20dd4:	29c7883a 	add	r3,r5,r7
   20dd8:	014a303a 	nor	r5,zero,r5
   20ddc:	1946703a 	and	r3,r3,r5
   20de0:	1986703a 	and	r3,r3,r6
   20de4:	183ff926 	beq	r3,zero,20dcc <strlen+0x58>
   20de8:	10c00007 	ldb	r3,0(r2)
   20dec:	183fea26 	beq	r3,zero,20d98 <strlen+0x24>
   20df0:	10c00047 	ldb	r3,1(r2)
   20df4:	10800044 	addi	r2,r2,1
   20df8:	183fe726 	beq	r3,zero,20d98 <strlen+0x24>
   20dfc:	10c00047 	ldb	r3,1(r2)
   20e00:	10800044 	addi	r2,r2,1
   20e04:	183ffa1e 	bne	r3,zero,20df0 <strlen+0x7c>
   20e08:	003fe306 	br	20d98 <strlen+0x24>

00020e0c <__fp_lock>:
   20e0c:	0005883a 	mov	r2,zero
   20e10:	f800283a 	ret

00020e14 <_cleanup_r>:
   20e14:	014000b4 	movhi	r5,2
   20e18:	294b4304 	addi	r5,r5,11532
   20e1c:	00216e41 	jmpi	216e4 <_fwalk_reent>

00020e20 <__fp_unlock>:
   20e20:	0005883a 	mov	r2,zero
   20e24:	f800283a 	ret

00020e28 <__sinit.part.0>:
   20e28:	00c000b4 	movhi	r3,2
   20e2c:	20800117 	ldw	r2,4(r4)
   20e30:	18c38504 	addi	r3,r3,3604
   20e34:	20c00f15 	stw	r3,60(r4)
   20e38:	2140bb04 	addi	r5,r4,748
   20e3c:	00c000c4 	movi	r3,3
   20e40:	20c0b915 	stw	r3,740(r4)
   20e44:	2140ba15 	stw	r5,744(r4)
   20e48:	2000b815 	stw	zero,736(r4)
   20e4c:	10001705 	stb	zero,92(r2)
   20e50:	10001745 	stb	zero,93(r2)
   20e54:	10001785 	stb	zero,94(r2)
   20e58:	100017c5 	stb	zero,95(r2)
   20e5c:	10001805 	stb	zero,96(r2)
   20e60:	10001845 	stb	zero,97(r2)
   20e64:	10001885 	stb	zero,98(r2)
   20e68:	100018c5 	stb	zero,99(r2)
   20e6c:	00c00104 	movi	r3,4
   20e70:	10c00315 	stw	r3,12(r2)
   20e74:	020000b4 	movhi	r8,2
   20e78:	20c00217 	ldw	r3,8(r4)
   20e7c:	01c000b4 	movhi	r7,2
   20e80:	018000b4 	movhi	r6,2
   20e84:	014000b4 	movhi	r5,2
   20e88:	420a3b04 	addi	r8,r8,10476
   20e8c:	39ca5204 	addi	r7,r7,10568
   20e90:	318a7204 	addi	r6,r6,10696
   20e94:	294a8904 	addi	r5,r5,10788
   20e98:	02400074 	movhi	r9,1
   20e9c:	10001915 	stw	zero,100(r2)
   20ea0:	10000015 	stw	zero,0(r2)
   20ea4:	10000115 	stw	zero,4(r2)
   20ea8:	10000215 	stw	zero,8(r2)
   20eac:	10000415 	stw	zero,16(r2)
   20eb0:	10000515 	stw	zero,20(r2)
   20eb4:	10000615 	stw	zero,24(r2)
   20eb8:	10800715 	stw	r2,28(r2)
   20ebc:	12000815 	stw	r8,32(r2)
   20ec0:	11c00915 	stw	r7,36(r2)
   20ec4:	11800a15 	stw	r6,40(r2)
   20ec8:	11400b15 	stw	r5,44(r2)
   20ecc:	4a400284 	addi	r9,r9,10
   20ed0:	1a400315 	stw	r9,12(r3)
   20ed4:	18001915 	stw	zero,100(r3)
   20ed8:	18000015 	stw	zero,0(r3)
   20edc:	18000115 	stw	zero,4(r3)
   20ee0:	18000215 	stw	zero,8(r3)
   20ee4:	18000415 	stw	zero,16(r3)
   20ee8:	18001705 	stb	zero,92(r3)
   20eec:	18001745 	stb	zero,93(r3)
   20ef0:	18001785 	stb	zero,94(r3)
   20ef4:	180017c5 	stb	zero,95(r3)
   20ef8:	18001805 	stb	zero,96(r3)
   20efc:	18001845 	stb	zero,97(r3)
   20f00:	18001885 	stb	zero,98(r3)
   20f04:	180018c5 	stb	zero,99(r3)
   20f08:	20800317 	ldw	r2,12(r4)
   20f0c:	024000b4 	movhi	r9,2
   20f10:	18000515 	stw	zero,20(r3)
   20f14:	18000615 	stw	zero,24(r3)
   20f18:	18c00715 	stw	r3,28(r3)
   20f1c:	1a000815 	stw	r8,32(r3)
   20f20:	19c00915 	stw	r7,36(r3)
   20f24:	19800a15 	stw	r6,40(r3)
   20f28:	19400b15 	stw	r5,44(r3)
   20f2c:	4a400484 	addi	r9,r9,18
   20f30:	10001915 	stw	zero,100(r2)
   20f34:	10000015 	stw	zero,0(r2)
   20f38:	10000115 	stw	zero,4(r2)
   20f3c:	10000215 	stw	zero,8(r2)
   20f40:	12400315 	stw	r9,12(r2)
   20f44:	10000415 	stw	zero,16(r2)
   20f48:	10000515 	stw	zero,20(r2)
   20f4c:	10000615 	stw	zero,24(r2)
   20f50:	10001705 	stb	zero,92(r2)
   20f54:	10001745 	stb	zero,93(r2)
   20f58:	10001785 	stb	zero,94(r2)
   20f5c:	100017c5 	stb	zero,95(r2)
   20f60:	10001805 	stb	zero,96(r2)
   20f64:	10001845 	stb	zero,97(r2)
   20f68:	10001885 	stb	zero,98(r2)
   20f6c:	100018c5 	stb	zero,99(r2)
   20f70:	10800715 	stw	r2,28(r2)
   20f74:	12000815 	stw	r8,32(r2)
   20f78:	11c00915 	stw	r7,36(r2)
   20f7c:	11800a15 	stw	r6,40(r2)
   20f80:	11400b15 	stw	r5,44(r2)
   20f84:	00800044 	movi	r2,1
   20f88:	20800e15 	stw	r2,56(r4)
   20f8c:	f800283a 	ret

00020f90 <__sfmoreglue>:
   20f90:	defffc04 	addi	sp,sp,-16
   20f94:	dc800215 	stw	r18,8(sp)
   20f98:	2825883a 	mov	r18,r5
   20f9c:	dc000015 	stw	r16,0(sp)
   20fa0:	01401a04 	movi	r5,104
   20fa4:	2021883a 	mov	r16,r4
   20fa8:	913fffc4 	addi	r4,r18,-1
   20fac:	dfc00315 	stw	ra,12(sp)
   20fb0:	dc400115 	stw	r17,4(sp)
   20fb4:	0023a8c0 	call	23a8c <__mulsi3>
   20fb8:	8009883a 	mov	r4,r16
   20fbc:	11401d04 	addi	r5,r2,116
   20fc0:	1023883a 	mov	r17,r2
   20fc4:	002178c0 	call	2178c <_malloc_r>
   20fc8:	1021883a 	mov	r16,r2
   20fcc:	10000726 	beq	r2,zero,20fec <__sfmoreglue+0x5c>
   20fd0:	11000304 	addi	r4,r2,12
   20fd4:	10000015 	stw	zero,0(r2)
   20fd8:	14800115 	stw	r18,4(r2)
   20fdc:	11000215 	stw	r4,8(r2)
   20fe0:	89801a04 	addi	r6,r17,104
   20fe4:	000b883a 	mov	r5,zero
   20fe8:	00222680 	call	22268 <memset>
   20fec:	8005883a 	mov	r2,r16
   20ff0:	dfc00317 	ldw	ra,12(sp)
   20ff4:	dc800217 	ldw	r18,8(sp)
   20ff8:	dc400117 	ldw	r17,4(sp)
   20ffc:	dc000017 	ldw	r16,0(sp)
   21000:	dec00404 	addi	sp,sp,16
   21004:	f800283a 	ret

00021008 <__sfp>:
   21008:	defffb04 	addi	sp,sp,-20
   2100c:	008000b4 	movhi	r2,2
   21010:	dc000015 	stw	r16,0(sp)
   21014:	141ecc17 	ldw	r16,31536(r2)
   21018:	dc400115 	stw	r17,4(sp)
   2101c:	dfc00415 	stw	ra,16(sp)
   21020:	80800e17 	ldw	r2,56(r16)
   21024:	dcc00315 	stw	r19,12(sp)
   21028:	dc800215 	stw	r18,8(sp)
   2102c:	2023883a 	mov	r17,r4
   21030:	10003126 	beq	r2,zero,210f8 <__sfp+0xf0>
   21034:	8100ba17 	ldw	r4,744(r16)
   21038:	8140b917 	ldw	r5,740(r16)
   2103c:	04c00104 	movi	r19,4
   21040:	8400b804 	addi	r16,r16,736
   21044:	297fffc4 	addi	r5,r5,-1
   21048:	2800050e 	bge	r5,zero,21060 <__sfp+0x58>
   2104c:	00002406 	br	210e0 <__sfp+0xd8>
   21050:	297fffc4 	addi	r5,r5,-1
   21054:	28bfffd8 	cmpnei	r2,r5,-1
   21058:	21001a04 	addi	r4,r4,104
   2105c:	10002026 	beq	r2,zero,210e0 <__sfp+0xd8>
   21060:	2080030f 	ldh	r2,12(r4)
   21064:	103ffa1e 	bne	r2,zero,21050 <__sfp+0x48>
   21068:	00bffff4 	movhi	r2,65535
   2106c:	10800044 	addi	r2,r2,1
   21070:	20001915 	stw	zero,100(r4)
   21074:	20000015 	stw	zero,0(r4)
   21078:	20000115 	stw	zero,4(r4)
   2107c:	20000215 	stw	zero,8(r4)
   21080:	20800315 	stw	r2,12(r4)
   21084:	20000415 	stw	zero,16(r4)
   21088:	20000515 	stw	zero,20(r4)
   2108c:	20000615 	stw	zero,24(r4)
   21090:	20001705 	stb	zero,92(r4)
   21094:	20001745 	stb	zero,93(r4)
   21098:	20001785 	stb	zero,94(r4)
   2109c:	200017c5 	stb	zero,95(r4)
   210a0:	20001805 	stb	zero,96(r4)
   210a4:	20001845 	stb	zero,97(r4)
   210a8:	20001885 	stb	zero,98(r4)
   210ac:	200018c5 	stb	zero,99(r4)
   210b0:	20000c15 	stw	zero,48(r4)
   210b4:	20000d15 	stw	zero,52(r4)
   210b8:	20001115 	stw	zero,68(r4)
   210bc:	20001215 	stw	zero,72(r4)
   210c0:	2005883a 	mov	r2,r4
   210c4:	dfc00417 	ldw	ra,16(sp)
   210c8:	dcc00317 	ldw	r19,12(sp)
   210cc:	dc800217 	ldw	r18,8(sp)
   210d0:	dc400117 	ldw	r17,4(sp)
   210d4:	dc000017 	ldw	r16,0(sp)
   210d8:	dec00504 	addi	sp,sp,20
   210dc:	f800283a 	ret
   210e0:	80800017 	ldw	r2,0(r16)
   210e4:	10000726 	beq	r2,zero,21104 <__sfp+0xfc>
   210e8:	11000217 	ldw	r4,8(r2)
   210ec:	11400117 	ldw	r5,4(r2)
   210f0:	1021883a 	mov	r16,r2
   210f4:	003fd306 	br	21044 <__sfp+0x3c>
   210f8:	8009883a 	mov	r4,r16
   210fc:	0020e280 	call	20e28 <__sinit.part.0>
   21100:	003fcc06 	br	21034 <__sfp+0x2c>
   21104:	01406b04 	movi	r5,428
   21108:	8809883a 	mov	r4,r17
   2110c:	002178c0 	call	2178c <_malloc_r>
   21110:	1025883a 	mov	r18,r2
   21114:	10000c26 	beq	r2,zero,21148 <__sfp+0x140>
   21118:	11000304 	addi	r4,r2,12
   2111c:	11000215 	stw	r4,8(r2)
   21120:	000b883a 	mov	r5,zero
   21124:	10000015 	stw	zero,0(r2)
   21128:	14c00115 	stw	r19,4(r2)
   2112c:	01806804 	movi	r6,416
   21130:	00222680 	call	22268 <memset>
   21134:	1009883a 	mov	r4,r2
   21138:	84800015 	stw	r18,0(r16)
   2113c:	014000c4 	movi	r5,3
   21140:	9021883a 	mov	r16,r18
   21144:	003fc606 	br	21060 <__sfp+0x58>
   21148:	80000015 	stw	zero,0(r16)
   2114c:	00800304 	movi	r2,12
   21150:	88800015 	stw	r2,0(r17)
   21154:	0009883a 	mov	r4,zero
   21158:	003fd906 	br	210c0 <__sfp+0xb8>

0002115c <_cleanup>:
   2115c:	008000b4 	movhi	r2,2
   21160:	111ecc17 	ldw	r4,31536(r2)
   21164:	014000b4 	movhi	r5,2
   21168:	294b4304 	addi	r5,r5,11532
   2116c:	00216e41 	jmpi	216e4 <_fwalk_reent>

00021170 <__sinit>:
   21170:	20800e17 	ldw	r2,56(r4)
   21174:	10000126 	beq	r2,zero,2117c <__sinit+0xc>
   21178:	f800283a 	ret
   2117c:	0020e281 	jmpi	20e28 <__sinit.part.0>

00021180 <__sfp_lock_acquire>:
   21180:	f800283a 	ret

00021184 <__sfp_lock_release>:
   21184:	f800283a 	ret

00021188 <__sinit_lock_acquire>:
   21188:	f800283a 	ret

0002118c <__sinit_lock_release>:
   2118c:	f800283a 	ret

00021190 <__fp_lock_all>:
   21190:	008000b4 	movhi	r2,2
   21194:	111ecd17 	ldw	r4,31540(r2)
   21198:	014000b4 	movhi	r5,2
   2119c:	29438304 	addi	r5,r5,3596
   211a0:	002164c1 	jmpi	2164c <_fwalk>

000211a4 <__fp_unlock_all>:
   211a4:	008000b4 	movhi	r2,2
   211a8:	111ecd17 	ldw	r4,31540(r2)
   211ac:	014000b4 	movhi	r5,2
   211b0:	29438804 	addi	r5,r5,3616
   211b4:	002164c1 	jmpi	2164c <_fwalk>

000211b8 <__sfvwrite_r>:
   211b8:	30800217 	ldw	r2,8(r6)
   211bc:	10009b26 	beq	r2,zero,2142c <__sfvwrite_r+0x274>
   211c0:	2a00030b 	ldhu	r8,12(r5)
   211c4:	defff404 	addi	sp,sp,-48
   211c8:	dd400715 	stw	r21,28(sp)
   211cc:	dd000615 	stw	r20,24(sp)
   211d0:	dc000215 	stw	r16,8(sp)
   211d4:	dfc00b15 	stw	ra,44(sp)
   211d8:	df000a15 	stw	fp,40(sp)
   211dc:	ddc00915 	stw	r23,36(sp)
   211e0:	dd800815 	stw	r22,32(sp)
   211e4:	dcc00515 	stw	r19,20(sp)
   211e8:	dc800415 	stw	r18,16(sp)
   211ec:	dc400315 	stw	r17,12(sp)
   211f0:	4080020c 	andi	r2,r8,8
   211f4:	3029883a 	mov	r20,r6
   211f8:	202b883a 	mov	r21,r4
   211fc:	2821883a 	mov	r16,r5
   21200:	10002626 	beq	r2,zero,2129c <__sfvwrite_r+0xe4>
   21204:	28800417 	ldw	r2,16(r5)
   21208:	10002426 	beq	r2,zero,2129c <__sfvwrite_r+0xe4>
   2120c:	4080008c 	andi	r2,r8,2
   21210:	a4400017 	ldw	r17,0(r20)
   21214:	10002926 	beq	r2,zero,212bc <__sfvwrite_r+0x104>
   21218:	05a00034 	movhi	r22,32768
   2121c:	0027883a 	mov	r19,zero
   21220:	0025883a 	mov	r18,zero
   21224:	b5bf0004 	addi	r22,r22,-1024
   21228:	980d883a 	mov	r6,r19
   2122c:	a809883a 	mov	r4,r21
   21230:	90007126 	beq	r18,zero,213f8 <__sfvwrite_r+0x240>
   21234:	900f883a 	mov	r7,r18
   21238:	b480012e 	bgeu	r22,r18,21240 <__sfvwrite_r+0x88>
   2123c:	b00f883a 	mov	r7,r22
   21240:	80800917 	ldw	r2,36(r16)
   21244:	81400717 	ldw	r5,28(r16)
   21248:	103ee83a 	callr	r2
   2124c:	0080720e 	bge	zero,r2,21418 <__sfvwrite_r+0x260>
   21250:	a0c00217 	ldw	r3,8(r20)
   21254:	98a7883a 	add	r19,r19,r2
   21258:	90a5c83a 	sub	r18,r18,r2
   2125c:	1885c83a 	sub	r2,r3,r2
   21260:	a0800215 	stw	r2,8(r20)
   21264:	103ff01e 	bne	r2,zero,21228 <__sfvwrite_r+0x70>
   21268:	0005883a 	mov	r2,zero
   2126c:	dfc00b17 	ldw	ra,44(sp)
   21270:	df000a17 	ldw	fp,40(sp)
   21274:	ddc00917 	ldw	r23,36(sp)
   21278:	dd800817 	ldw	r22,32(sp)
   2127c:	dd400717 	ldw	r21,28(sp)
   21280:	dd000617 	ldw	r20,24(sp)
   21284:	dcc00517 	ldw	r19,20(sp)
   21288:	dc800417 	ldw	r18,16(sp)
   2128c:	dc400317 	ldw	r17,12(sp)
   21290:	dc000217 	ldw	r16,8(sp)
   21294:	dec00c04 	addi	sp,sp,48
   21298:	f800283a 	ret
   2129c:	800b883a 	mov	r5,r16
   212a0:	a809883a 	mov	r4,r21
   212a4:	0022a900 	call	22a90 <__swsetup_r>
   212a8:	1000e61e 	bne	r2,zero,21644 <__sfvwrite_r+0x48c>
   212ac:	8200030b 	ldhu	r8,12(r16)
   212b0:	a4400017 	ldw	r17,0(r20)
   212b4:	4080008c 	andi	r2,r8,2
   212b8:	103fd71e 	bne	r2,zero,21218 <__sfvwrite_r+0x60>
   212bc:	4080004c 	andi	r2,r8,1
   212c0:	10005c1e 	bne	r2,zero,21434 <__sfvwrite_r+0x27c>
   212c4:	00a00034 	movhi	r2,32768
   212c8:	10bfff84 	addi	r2,r2,-2
   212cc:	00e00034 	movhi	r3,32768
   212d0:	d8800015 	stw	r2,0(sp)
   212d4:	18bfffc4 	addi	r2,r3,-1
   212d8:	0039883a 	mov	fp,zero
   212dc:	0025883a 	mov	r18,zero
   212e0:	d8800115 	stw	r2,4(sp)
   212e4:	90004026 	beq	r18,zero,213e8 <__sfvwrite_r+0x230>
   212e8:	4080800c 	andi	r2,r8,512
   212ec:	81000017 	ldw	r4,0(r16)
   212f0:	85c00217 	ldw	r23,8(r16)
   212f4:	10008826 	beq	r2,zero,21518 <__sfvwrite_r+0x360>
   212f8:	b82d883a 	mov	r22,r23
   212fc:	95c0ae36 	bltu	r18,r23,215b8 <__sfvwrite_r+0x400>
   21300:	4081200c 	andi	r2,r8,1152
   21304:	10002626 	beq	r2,zero,213a0 <__sfvwrite_r+0x1e8>
   21308:	81800517 	ldw	r6,20(r16)
   2130c:	81400417 	ldw	r5,16(r16)
   21310:	3185883a 	add	r2,r6,r6
   21314:	1185883a 	add	r2,r2,r6
   21318:	1026d7fa 	srli	r19,r2,31
   2131c:	216dc83a 	sub	r22,r4,r5
   21320:	b1000044 	addi	r4,r22,1
   21324:	98a7883a 	add	r19,r19,r2
   21328:	9827d07a 	srai	r19,r19,1
   2132c:	2485883a 	add	r2,r4,r18
   21330:	980d883a 	mov	r6,r19
   21334:	9880022e 	bgeu	r19,r2,21340 <__sfvwrite_r+0x188>
   21338:	1027883a 	mov	r19,r2
   2133c:	100d883a 	mov	r6,r2
   21340:	4201000c 	andi	r8,r8,1024
   21344:	4000af26 	beq	r8,zero,21604 <__sfvwrite_r+0x44c>
   21348:	300b883a 	mov	r5,r6
   2134c:	a809883a 	mov	r4,r21
   21350:	002178c0 	call	2178c <_malloc_r>
   21354:	1000b726 	beq	r2,zero,21634 <__sfvwrite_r+0x47c>
   21358:	81400417 	ldw	r5,16(r16)
   2135c:	b00d883a 	mov	r6,r22
   21360:	1009883a 	mov	r4,r2
   21364:	002203c0 	call	2203c <memcpy>
   21368:	100f883a 	mov	r7,r2
   2136c:	8080030b 	ldhu	r2,12(r16)
   21370:	00fedfc4 	movi	r3,-1153
   21374:	10c4703a 	and	r2,r2,r3
   21378:	10802014 	ori	r2,r2,128
   2137c:	8080030d 	sth	r2,12(r16)
   21380:	3d89883a 	add	r4,r7,r22
   21384:	9d85c83a 	sub	r2,r19,r22
   21388:	81c00415 	stw	r7,16(r16)
   2138c:	81000015 	stw	r4,0(r16)
   21390:	84c00515 	stw	r19,20(r16)
   21394:	902f883a 	mov	r23,r18
   21398:	80800215 	stw	r2,8(r16)
   2139c:	902d883a 	mov	r22,r18
   213a0:	b00d883a 	mov	r6,r22
   213a4:	e00b883a 	mov	r5,fp
   213a8:	002213c0 	call	2213c <memmove>
   213ac:	81000217 	ldw	r4,8(r16)
   213b0:	80800017 	ldw	r2,0(r16)
   213b4:	9027883a 	mov	r19,r18
   213b8:	25c9c83a 	sub	r4,r4,r23
   213bc:	1585883a 	add	r2,r2,r22
   213c0:	81000215 	stw	r4,8(r16)
   213c4:	80800015 	stw	r2,0(r16)
   213c8:	0025883a 	mov	r18,zero
   213cc:	a1800217 	ldw	r6,8(r20)
   213d0:	e4f9883a 	add	fp,fp,r19
   213d4:	34e7c83a 	sub	r19,r6,r19
   213d8:	a4c00215 	stw	r19,8(r20)
   213dc:	983fa226 	beq	r19,zero,21268 <__sfvwrite_r+0xb0>
   213e0:	8200030b 	ldhu	r8,12(r16)
   213e4:	903fc01e 	bne	r18,zero,212e8 <__sfvwrite_r+0x130>
   213e8:	8f000017 	ldw	fp,0(r17)
   213ec:	8c800117 	ldw	r18,4(r17)
   213f0:	8c400204 	addi	r17,r17,8
   213f4:	003fbb06 	br	212e4 <__sfvwrite_r+0x12c>
   213f8:	8cc00017 	ldw	r19,0(r17)
   213fc:	8c800117 	ldw	r18,4(r17)
   21400:	8c400204 	addi	r17,r17,8
   21404:	003f8806 	br	21228 <__sfvwrite_r+0x70>
   21408:	800b883a 	mov	r5,r16
   2140c:	a809883a 	mov	r4,r21
   21410:	00230140 	call	23014 <_fflush_r>
   21414:	10002226 	beq	r2,zero,214a0 <__sfvwrite_r+0x2e8>
   21418:	8080030b 	ldhu	r2,12(r16)
   2141c:	10801014 	ori	r2,r2,64
   21420:	8080030d 	sth	r2,12(r16)
   21424:	00bfffc4 	movi	r2,-1
   21428:	003f9006 	br	2126c <__sfvwrite_r+0xb4>
   2142c:	0005883a 	mov	r2,zero
   21430:	f800283a 	ret
   21434:	002d883a 	mov	r22,zero
   21438:	0039883a 	mov	fp,zero
   2143c:	0005883a 	mov	r2,zero
   21440:	002f883a 	mov	r23,zero
   21444:	b0001d26 	beq	r22,zero,214bc <__sfvwrite_r+0x304>
   21448:	10002026 	beq	r2,zero,214cc <__sfvwrite_r+0x314>
   2144c:	e027883a 	mov	r19,fp
   21450:	b4c0012e 	bgeu	r22,r19,21458 <__sfvwrite_r+0x2a0>
   21454:	b027883a 	mov	r19,r22
   21458:	81000017 	ldw	r4,0(r16)
   2145c:	80800417 	ldw	r2,16(r16)
   21460:	81c00517 	ldw	r7,20(r16)
   21464:	1100032e 	bgeu	r2,r4,21474 <__sfvwrite_r+0x2bc>
   21468:	84800217 	ldw	r18,8(r16)
   2146c:	3ca5883a 	add	r18,r7,r18
   21470:	94c01e16 	blt	r18,r19,214ec <__sfvwrite_r+0x334>
   21474:	99c05316 	blt	r19,r7,215c4 <__sfvwrite_r+0x40c>
   21478:	80800917 	ldw	r2,36(r16)
   2147c:	81400717 	ldw	r5,28(r16)
   21480:	b80d883a 	mov	r6,r23
   21484:	a809883a 	mov	r4,r21
   21488:	103ee83a 	callr	r2
   2148c:	1025883a 	mov	r18,r2
   21490:	00bfe10e 	bge	zero,r2,21418 <__sfvwrite_r+0x260>
   21494:	e4b9c83a 	sub	fp,fp,r18
   21498:	e03fdb26 	beq	fp,zero,21408 <__sfvwrite_r+0x250>
   2149c:	00800044 	movi	r2,1
   214a0:	a1800217 	ldw	r6,8(r20)
   214a4:	bcaf883a 	add	r23,r23,r18
   214a8:	b4adc83a 	sub	r22,r22,r18
   214ac:	34a5c83a 	sub	r18,r6,r18
   214b0:	a4800215 	stw	r18,8(r20)
   214b4:	903f6c26 	beq	r18,zero,21268 <__sfvwrite_r+0xb0>
   214b8:	b03fe31e 	bne	r22,zero,21448 <__sfvwrite_r+0x290>
   214bc:	8d800117 	ldw	r22,4(r17)
   214c0:	8dc00017 	ldw	r23,0(r17)
   214c4:	8c400204 	addi	r17,r17,8
   214c8:	b03ffc26 	beq	r22,zero,214bc <__sfvwrite_r+0x304>
   214cc:	b00d883a 	mov	r6,r22
   214d0:	01400284 	movi	r5,10
   214d4:	b809883a 	mov	r4,r23
   214d8:	0021f6c0 	call	21f6c <memchr>
   214dc:	10004626 	beq	r2,zero,215f8 <__sfvwrite_r+0x440>
   214e0:	10800044 	addi	r2,r2,1
   214e4:	15f9c83a 	sub	fp,r2,r23
   214e8:	003fd806 	br	2144c <__sfvwrite_r+0x294>
   214ec:	b80b883a 	mov	r5,r23
   214f0:	900d883a 	mov	r6,r18
   214f4:	002213c0 	call	2213c <memmove>
   214f8:	80800017 	ldw	r2,0(r16)
   214fc:	800b883a 	mov	r5,r16
   21500:	a809883a 	mov	r4,r21
   21504:	1485883a 	add	r2,r2,r18
   21508:	80800015 	stw	r2,0(r16)
   2150c:	00230140 	call	23014 <_fflush_r>
   21510:	103fe026 	beq	r2,zero,21494 <__sfvwrite_r+0x2dc>
   21514:	003fc006 	br	21418 <__sfvwrite_r+0x260>
   21518:	80800417 	ldw	r2,16(r16)
   2151c:	11001436 	bltu	r2,r4,21570 <__sfvwrite_r+0x3b8>
   21520:	84c00517 	ldw	r19,20(r16)
   21524:	94c01236 	bltu	r18,r19,21570 <__sfvwrite_r+0x3b8>
   21528:	d8800017 	ldw	r2,0(sp)
   2152c:	1480302e 	bgeu	r2,r18,215f0 <__sfvwrite_r+0x438>
   21530:	d9000117 	ldw	r4,4(sp)
   21534:	980b883a 	mov	r5,r19
   21538:	00238d80 	call	238d8 <__divsi3>
   2153c:	980b883a 	mov	r5,r19
   21540:	1009883a 	mov	r4,r2
   21544:	0023a8c0 	call	23a8c <__mulsi3>
   21548:	82000917 	ldw	r8,36(r16)
   2154c:	81400717 	ldw	r5,28(r16)
   21550:	100f883a 	mov	r7,r2
   21554:	e00d883a 	mov	r6,fp
   21558:	a809883a 	mov	r4,r21
   2155c:	403ee83a 	callr	r8
   21560:	1027883a 	mov	r19,r2
   21564:	00bfac0e 	bge	zero,r2,21418 <__sfvwrite_r+0x260>
   21568:	94e5c83a 	sub	r18,r18,r19
   2156c:	003f9706 	br	213cc <__sfvwrite_r+0x214>
   21570:	b827883a 	mov	r19,r23
   21574:	95c0012e 	bgeu	r18,r23,2157c <__sfvwrite_r+0x3c4>
   21578:	9027883a 	mov	r19,r18
   2157c:	980d883a 	mov	r6,r19
   21580:	e00b883a 	mov	r5,fp
   21584:	002213c0 	call	2213c <memmove>
   21588:	80800217 	ldw	r2,8(r16)
   2158c:	81000017 	ldw	r4,0(r16)
   21590:	14c5c83a 	sub	r2,r2,r19
   21594:	24c9883a 	add	r4,r4,r19
   21598:	80800215 	stw	r2,8(r16)
   2159c:	81000015 	stw	r4,0(r16)
   215a0:	103ff11e 	bne	r2,zero,21568 <__sfvwrite_r+0x3b0>
   215a4:	800b883a 	mov	r5,r16
   215a8:	a809883a 	mov	r4,r21
   215ac:	00230140 	call	23014 <_fflush_r>
   215b0:	103fed26 	beq	r2,zero,21568 <__sfvwrite_r+0x3b0>
   215b4:	003f9806 	br	21418 <__sfvwrite_r+0x260>
   215b8:	902f883a 	mov	r23,r18
   215bc:	902d883a 	mov	r22,r18
   215c0:	003f7706 	br	213a0 <__sfvwrite_r+0x1e8>
   215c4:	980d883a 	mov	r6,r19
   215c8:	b80b883a 	mov	r5,r23
   215cc:	002213c0 	call	2213c <memmove>
   215d0:	80c00217 	ldw	r3,8(r16)
   215d4:	80800017 	ldw	r2,0(r16)
   215d8:	9825883a 	mov	r18,r19
   215dc:	1cc7c83a 	sub	r3,r3,r19
   215e0:	14c5883a 	add	r2,r2,r19
   215e4:	80c00215 	stw	r3,8(r16)
   215e8:	80800015 	stw	r2,0(r16)
   215ec:	003fa906 	br	21494 <__sfvwrite_r+0x2dc>
   215f0:	9009883a 	mov	r4,r18
   215f4:	003fcf06 	br	21534 <__sfvwrite_r+0x37c>
   215f8:	b4c00044 	addi	r19,r22,1
   215fc:	9839883a 	mov	fp,r19
   21600:	003f9306 	br	21450 <__sfvwrite_r+0x298>
   21604:	a809883a 	mov	r4,r21
   21608:	00223580 	call	22358 <_realloc_r>
   2160c:	100f883a 	mov	r7,r2
   21610:	103f5b1e 	bne	r2,zero,21380 <__sfvwrite_r+0x1c8>
   21614:	81400417 	ldw	r5,16(r16)
   21618:	a809883a 	mov	r4,r21
   2161c:	00232140 	call	23214 <_free_r>
   21620:	8080030b 	ldhu	r2,12(r16)
   21624:	00c00304 	movi	r3,12
   21628:	a8c00015 	stw	r3,0(r21)
   2162c:	10bfdfcc 	andi	r2,r2,65407
   21630:	003f7a06 	br	2141c <__sfvwrite_r+0x264>
   21634:	00c00304 	movi	r3,12
   21638:	8080030b 	ldhu	r2,12(r16)
   2163c:	a8c00015 	stw	r3,0(r21)
   21640:	003f7606 	br	2141c <__sfvwrite_r+0x264>
   21644:	00bfffc4 	movi	r2,-1
   21648:	003f0806 	br	2126c <__sfvwrite_r+0xb4>

0002164c <_fwalk>:
   2164c:	defffa04 	addi	sp,sp,-24
   21650:	dd000415 	stw	r20,16(sp)
   21654:	dcc00315 	stw	r19,12(sp)
   21658:	dc800215 	stw	r18,8(sp)
   2165c:	dfc00515 	stw	ra,20(sp)
   21660:	dc400115 	stw	r17,4(sp)
   21664:	dc000015 	stw	r16,0(sp)
   21668:	2827883a 	mov	r19,r5
   2166c:	2480b804 	addi	r18,r4,736
   21670:	0029883a 	mov	r20,zero
   21674:	94400117 	ldw	r17,4(r18)
   21678:	94000217 	ldw	r16,8(r18)
   2167c:	8c7fffc4 	addi	r17,r17,-1
   21680:	88000d16 	blt	r17,zero,216b8 <_fwalk+0x6c>
   21684:	8080030b 	ldhu	r2,12(r16)
   21688:	8c7fffc4 	addi	r17,r17,-1
   2168c:	108000b0 	cmpltui	r2,r2,2
   21690:	1000061e 	bne	r2,zero,216ac <_fwalk+0x60>
   21694:	8080038f 	ldh	r2,14(r16)
   21698:	8009883a 	mov	r4,r16
   2169c:	10bfffe0 	cmpeqi	r2,r2,-1
   216a0:	1000021e 	bne	r2,zero,216ac <_fwalk+0x60>
   216a4:	983ee83a 	callr	r19
   216a8:	a0a8b03a 	or	r20,r20,r2
   216ac:	88bfffd8 	cmpnei	r2,r17,-1
   216b0:	84001a04 	addi	r16,r16,104
   216b4:	103ff31e 	bne	r2,zero,21684 <_fwalk+0x38>
   216b8:	94800017 	ldw	r18,0(r18)
   216bc:	903fed1e 	bne	r18,zero,21674 <_fwalk+0x28>
   216c0:	a005883a 	mov	r2,r20
   216c4:	dfc00517 	ldw	ra,20(sp)
   216c8:	dd000417 	ldw	r20,16(sp)
   216cc:	dcc00317 	ldw	r19,12(sp)
   216d0:	dc800217 	ldw	r18,8(sp)
   216d4:	dc400117 	ldw	r17,4(sp)
   216d8:	dc000017 	ldw	r16,0(sp)
   216dc:	dec00604 	addi	sp,sp,24
   216e0:	f800283a 	ret

000216e4 <_fwalk_reent>:
   216e4:	defff904 	addi	sp,sp,-28
   216e8:	dd400515 	stw	r21,20(sp)
   216ec:	dd000415 	stw	r20,16(sp)
   216f0:	dcc00315 	stw	r19,12(sp)
   216f4:	dc800215 	stw	r18,8(sp)
   216f8:	dfc00615 	stw	ra,24(sp)
   216fc:	dc400115 	stw	r17,4(sp)
   21700:	dc000015 	stw	r16,0(sp)
   21704:	202b883a 	mov	r21,r4
   21708:	2827883a 	mov	r19,r5
   2170c:	2480b804 	addi	r18,r4,736
   21710:	0029883a 	mov	r20,zero
   21714:	94400117 	ldw	r17,4(r18)
   21718:	94000217 	ldw	r16,8(r18)
   2171c:	8c7fffc4 	addi	r17,r17,-1
   21720:	88000e16 	blt	r17,zero,2175c <_fwalk_reent+0x78>
   21724:	8080030b 	ldhu	r2,12(r16)
   21728:	8c7fffc4 	addi	r17,r17,-1
   2172c:	108000b0 	cmpltui	r2,r2,2
   21730:	1000071e 	bne	r2,zero,21750 <_fwalk_reent+0x6c>
   21734:	8080038f 	ldh	r2,14(r16)
   21738:	800b883a 	mov	r5,r16
   2173c:	a809883a 	mov	r4,r21
   21740:	10bfffe0 	cmpeqi	r2,r2,-1
   21744:	1000021e 	bne	r2,zero,21750 <_fwalk_reent+0x6c>
   21748:	983ee83a 	callr	r19
   2174c:	a0a8b03a 	or	r20,r20,r2
   21750:	88bfffd8 	cmpnei	r2,r17,-1
   21754:	84001a04 	addi	r16,r16,104
   21758:	103ff21e 	bne	r2,zero,21724 <_fwalk_reent+0x40>
   2175c:	94800017 	ldw	r18,0(r18)
   21760:	903fec1e 	bne	r18,zero,21714 <_fwalk_reent+0x30>
   21764:	a005883a 	mov	r2,r20
   21768:	dfc00617 	ldw	ra,24(sp)
   2176c:	dd400517 	ldw	r21,20(sp)
   21770:	dd000417 	ldw	r20,16(sp)
   21774:	dcc00317 	ldw	r19,12(sp)
   21778:	dc800217 	ldw	r18,8(sp)
   2177c:	dc400117 	ldw	r17,4(sp)
   21780:	dc000017 	ldw	r16,0(sp)
   21784:	dec00704 	addi	sp,sp,28
   21788:	f800283a 	ret

0002178c <_malloc_r>:
   2178c:	defff604 	addi	sp,sp,-40
   21790:	dc400115 	stw	r17,4(sp)
   21794:	2c4002c4 	addi	r17,r5,11
   21798:	dc800215 	stw	r18,8(sp)
   2179c:	dfc00915 	stw	ra,36(sp)
   217a0:	df000815 	stw	fp,32(sp)
   217a4:	ddc00715 	stw	r23,28(sp)
   217a8:	dd800615 	stw	r22,24(sp)
   217ac:	dd400515 	stw	r21,20(sp)
   217b0:	dd000415 	stw	r20,16(sp)
   217b4:	dcc00315 	stw	r19,12(sp)
   217b8:	dc000015 	stw	r16,0(sp)
   217bc:	888005e8 	cmpgeui	r2,r17,23
   217c0:	2025883a 	mov	r18,r4
   217c4:	10001b1e 	bne	r2,zero,21834 <_malloc_r+0xa8>
   217c8:	29400468 	cmpgeui	r5,r5,17
   217cc:	2800821e 	bne	r5,zero,219d8 <_malloc_r+0x24c>
   217d0:	00240600 	call	24060 <__malloc_lock>
   217d4:	04400404 	movi	r17,16
   217d8:	00800604 	movi	r2,24
   217dc:	01c00084 	movi	r7,2
   217e0:	04c000b4 	movhi	r19,2
   217e4:	9cd94804 	addi	r19,r19,25888
   217e8:	9885883a 	add	r2,r19,r2
   217ec:	14000117 	ldw	r16,4(r2)
   217f0:	10fffe04 	addi	r3,r2,-8
   217f4:	80c08b26 	beq	r16,r3,21a24 <_malloc_r+0x298>
   217f8:	80800117 	ldw	r2,4(r16)
   217fc:	81000317 	ldw	r4,12(r16)
   21800:	00ffff04 	movi	r3,-4
   21804:	10c4703a 	and	r2,r2,r3
   21808:	81400217 	ldw	r5,8(r16)
   2180c:	8085883a 	add	r2,r16,r2
   21810:	10c00117 	ldw	r3,4(r2)
   21814:	29000315 	stw	r4,12(r5)
   21818:	21400215 	stw	r5,8(r4)
   2181c:	18c00054 	ori	r3,r3,1
   21820:	10c00115 	stw	r3,4(r2)
   21824:	9009883a 	mov	r4,r18
   21828:	00240840 	call	24084 <__malloc_unlock>
   2182c:	80800204 	addi	r2,r16,8
   21830:	00006c06 	br	219e4 <_malloc_r+0x258>
   21834:	00bffe04 	movi	r2,-8
   21838:	88a2703a 	and	r17,r17,r2
   2183c:	88006616 	blt	r17,zero,219d8 <_malloc_r+0x24c>
   21840:	89406536 	bltu	r17,r5,219d8 <_malloc_r+0x24c>
   21844:	00240600 	call	24060 <__malloc_lock>
   21848:	88807e28 	cmpgeui	r2,r17,504
   2184c:	10012226 	beq	r2,zero,21cd8 <_malloc_r+0x54c>
   21850:	8804d27a 	srli	r2,r17,9
   21854:	10006f26 	beq	r2,zero,21a14 <_malloc_r+0x288>
   21858:	10c00168 	cmpgeui	r3,r2,5
   2185c:	1800fe1e 	bne	r3,zero,21c58 <_malloc_r+0x4cc>
   21860:	8804d1ba 	srli	r2,r17,6
   21864:	11c00e44 	addi	r7,r2,57
   21868:	380890fa 	slli	r4,r7,3
   2186c:	12000e04 	addi	r8,r2,56
   21870:	04c000b4 	movhi	r19,2
   21874:	9cd94804 	addi	r19,r19,25888
   21878:	9909883a 	add	r4,r19,r4
   2187c:	24000117 	ldw	r16,4(r4)
   21880:	213ffe04 	addi	r4,r4,-8
   21884:	24000b26 	beq	r4,r16,218b4 <_malloc_r+0x128>
   21888:	01bfff04 	movi	r6,-4
   2188c:	00000306 	br	2189c <_malloc_r+0x110>
   21890:	1800d60e 	bge	r3,zero,21bec <_malloc_r+0x460>
   21894:	84000317 	ldw	r16,12(r16)
   21898:	24000626 	beq	r4,r16,218b4 <_malloc_r+0x128>
   2189c:	80800117 	ldw	r2,4(r16)
   218a0:	1184703a 	and	r2,r2,r6
   218a4:	1447c83a 	sub	r3,r2,r17
   218a8:	19400408 	cmpgei	r5,r3,16
   218ac:	283ff826 	beq	r5,zero,21890 <_malloc_r+0x104>
   218b0:	400f883a 	mov	r7,r8
   218b4:	9c000417 	ldw	r16,16(r19)
   218b8:	024000b4 	movhi	r9,2
   218bc:	4a594a04 	addi	r9,r9,25896
   218c0:	82405f26 	beq	r16,r9,21a40 <_malloc_r+0x2b4>
   218c4:	80c00117 	ldw	r3,4(r16)
   218c8:	00bfff04 	movi	r2,-4
   218cc:	1884703a 	and	r2,r3,r2
   218d0:	1447c83a 	sub	r3,r2,r17
   218d4:	19000410 	cmplti	r4,r3,16
   218d8:	20010a26 	beq	r4,zero,21d04 <_malloc_r+0x578>
   218dc:	9a400515 	stw	r9,20(r19)
   218e0:	9a400415 	stw	r9,16(r19)
   218e4:	1800ff0e 	bge	r3,zero,21ce4 <_malloc_r+0x558>
   218e8:	10c08028 	cmpgeui	r3,r2,512
   218ec:	1800c11e 	bne	r3,zero,21bf4 <_malloc_r+0x468>
   218f0:	1006d0fa 	srli	r3,r2,3
   218f4:	1008d17a 	srli	r4,r2,5
   218f8:	00800044 	movi	r2,1
   218fc:	18c00044 	addi	r3,r3,1
   21900:	180690fa 	slli	r3,r3,3
   21904:	99400117 	ldw	r5,4(r19)
   21908:	1104983a 	sll	r2,r2,r4
   2190c:	98c7883a 	add	r3,r19,r3
   21910:	19000017 	ldw	r4,0(r3)
   21914:	1144b03a 	or	r2,r2,r5
   21918:	197ffe04 	addi	r5,r3,-8
   2191c:	81400315 	stw	r5,12(r16)
   21920:	81000215 	stw	r4,8(r16)
   21924:	98800115 	stw	r2,4(r19)
   21928:	1c000015 	stw	r16,0(r3)
   2192c:	24000315 	stw	r16,12(r4)
   21930:	3807d0ba 	srai	r3,r7,2
   21934:	01000044 	movi	r4,1
   21938:	20c8983a 	sll	r4,r4,r3
   2193c:	11004536 	bltu	r2,r4,21a54 <_malloc_r+0x2c8>
   21940:	2086703a 	and	r3,r4,r2
   21944:	18000a1e 	bne	r3,zero,21970 <_malloc_r+0x1e4>
   21948:	00ffff04 	movi	r3,-4
   2194c:	2109883a 	add	r4,r4,r4
   21950:	38ce703a 	and	r7,r7,r3
   21954:	2086703a 	and	r3,r4,r2
   21958:	39c00104 	addi	r7,r7,4
   2195c:	1800041e 	bne	r3,zero,21970 <_malloc_r+0x1e4>
   21960:	2109883a 	add	r4,r4,r4
   21964:	2086703a 	and	r3,r4,r2
   21968:	39c00104 	addi	r7,r7,4
   2196c:	183ffc26 	beq	r3,zero,21960 <_malloc_r+0x1d4>
   21970:	02bfff04 	movi	r10,-4
   21974:	381690fa 	slli	r11,r7,3
   21978:	3819883a 	mov	r12,r7
   2197c:	9ad7883a 	add	r11,r19,r11
   21980:	5811883a 	mov	r8,r11
   21984:	40800317 	ldw	r2,12(r8)
   21988:	4080bc26 	beq	r8,r2,21c7c <_malloc_r+0x4f0>
   2198c:	10c00117 	ldw	r3,4(r2)
   21990:	1021883a 	mov	r16,r2
   21994:	10800317 	ldw	r2,12(r2)
   21998:	1a86703a 	and	r3,r3,r10
   2199c:	1c4bc83a 	sub	r5,r3,r17
   219a0:	29800410 	cmplti	r6,r5,16
   219a4:	3000ba26 	beq	r6,zero,21c90 <_malloc_r+0x504>
   219a8:	283ff716 	blt	r5,zero,21988 <_malloc_r+0x1fc>
   219ac:	80c7883a 	add	r3,r16,r3
   219b0:	19400117 	ldw	r5,4(r3)
   219b4:	81800217 	ldw	r6,8(r16)
   219b8:	9009883a 	mov	r4,r18
   219bc:	29400054 	ori	r5,r5,1
   219c0:	19400115 	stw	r5,4(r3)
   219c4:	30800315 	stw	r2,12(r6)
   219c8:	11800215 	stw	r6,8(r2)
   219cc:	00240840 	call	24084 <__malloc_unlock>
   219d0:	80800204 	addi	r2,r16,8
   219d4:	00000306 	br	219e4 <_malloc_r+0x258>
   219d8:	00800304 	movi	r2,12
   219dc:	90800015 	stw	r2,0(r18)
   219e0:	0005883a 	mov	r2,zero
   219e4:	dfc00917 	ldw	ra,36(sp)
   219e8:	df000817 	ldw	fp,32(sp)
   219ec:	ddc00717 	ldw	r23,28(sp)
   219f0:	dd800617 	ldw	r22,24(sp)
   219f4:	dd400517 	ldw	r21,20(sp)
   219f8:	dd000417 	ldw	r20,16(sp)
   219fc:	dcc00317 	ldw	r19,12(sp)
   21a00:	dc800217 	ldw	r18,8(sp)
   21a04:	dc400117 	ldw	r17,4(sp)
   21a08:	dc000017 	ldw	r16,0(sp)
   21a0c:	dec00a04 	addi	sp,sp,40
   21a10:	f800283a 	ret
   21a14:	01008004 	movi	r4,512
   21a18:	01c01004 	movi	r7,64
   21a1c:	02000fc4 	movi	r8,63
   21a20:	003f9306 	br	21870 <_malloc_r+0xe4>
   21a24:	14000317 	ldw	r16,12(r2)
   21a28:	39c00084 	addi	r7,r7,2
   21a2c:	143f721e 	bne	r2,r16,217f8 <_malloc_r+0x6c>
   21a30:	9c000417 	ldw	r16,16(r19)
   21a34:	024000b4 	movhi	r9,2
   21a38:	4a594a04 	addi	r9,r9,25896
   21a3c:	827fa11e 	bne	r16,r9,218c4 <_malloc_r+0x138>
   21a40:	3807d0ba 	srai	r3,r7,2
   21a44:	01000044 	movi	r4,1
   21a48:	98800117 	ldw	r2,4(r19)
   21a4c:	20c8983a 	sll	r4,r4,r3
   21a50:	113fbb2e 	bgeu	r2,r4,21940 <_malloc_r+0x1b4>
   21a54:	9c000217 	ldw	r16,8(r19)
   21a58:	00bfff04 	movi	r2,-4
   21a5c:	85400117 	ldw	r21,4(r16)
   21a60:	a8ac703a 	and	r22,r21,r2
   21a64:	b4400336 	bltu	r22,r17,21a74 <_malloc_r+0x2e8>
   21a68:	b445c83a 	sub	r2,r22,r17
   21a6c:	10c00408 	cmpgei	r3,r2,16
   21a70:	1800541e 	bne	r3,zero,21bc4 <_malloc_r+0x438>
   21a74:	008000b4 	movhi	r2,2
   21a78:	109ece17 	ldw	r2,31544(r2)
   21a7c:	00c000f4 	movhi	r3,3
   21a80:	1d657717 	ldw	r21,-27172(r3)
   21a84:	10bfffd8 	cmpnei	r2,r2,-1
   21a88:	85b9883a 	add	fp,r16,r22
   21a8c:	8d6b883a 	add	r21,r17,r21
   21a90:	1000d626 	beq	r2,zero,21dec <_malloc_r+0x660>
   21a94:	ad4403c4 	addi	r21,r21,4111
   21a98:	00bc0004 	movi	r2,-4096
   21a9c:	a8aa703a 	and	r21,r21,r2
   21aa0:	a80b883a 	mov	r5,r21
   21aa4:	9009883a 	mov	r4,r18
   21aa8:	00228940 	call	22894 <_sbrk_r>
   21aac:	102f883a 	mov	r23,r2
   21ab0:	10bfffd8 	cmpnei	r2,r2,-1
   21ab4:	1000a826 	beq	r2,zero,21d58 <_malloc_r+0x5cc>
   21ab8:	bf00a636 	bltu	r23,fp,21d54 <_malloc_r+0x5c8>
   21abc:	008000f4 	movhi	r2,3
   21ac0:	15258117 	ldw	r20,-27132(r2)
   21ac4:	ad29883a 	add	r20,r21,r20
   21ac8:	15258115 	stw	r20,-27132(r2)
   21acc:	a007883a 	mov	r3,r20
   21ad0:	e5c0ec26 	beq	fp,r23,21e84 <_malloc_r+0x6f8>
   21ad4:	008000b4 	movhi	r2,2
   21ad8:	109ece17 	ldw	r2,31544(r2)
   21adc:	10bfffd8 	cmpnei	r2,r2,-1
   21ae0:	1000ef26 	beq	r2,zero,21ea0 <_malloc_r+0x714>
   21ae4:	bf39c83a 	sub	fp,r23,fp
   21ae8:	e0c7883a 	add	r3,fp,r3
   21aec:	008000f4 	movhi	r2,3
   21af0:	10e58115 	stw	r3,-27132(r2)
   21af4:	bf0001cc 	andi	fp,r23,7
   21af8:	e000c526 	beq	fp,zero,21e10 <_malloc_r+0x684>
   21afc:	bf2fc83a 	sub	r23,r23,fp
   21b00:	bdc00204 	addi	r23,r23,8
   21b04:	05040204 	movi	r20,4104
   21b08:	a729c83a 	sub	r20,r20,fp
   21b0c:	bd6b883a 	add	r21,r23,r21
   21b10:	a569c83a 	sub	r20,r20,r21
   21b14:	a503ffcc 	andi	r20,r20,4095
   21b18:	a00b883a 	mov	r5,r20
   21b1c:	9009883a 	mov	r4,r18
   21b20:	00228940 	call	22894 <_sbrk_r>
   21b24:	10ffffe0 	cmpeqi	r3,r2,-1
   21b28:	1800f31e 	bne	r3,zero,21ef8 <_malloc_r+0x76c>
   21b2c:	15c5c83a 	sub	r2,r2,r23
   21b30:	152b883a 	add	r21,r2,r20
   21b34:	008000f4 	movhi	r2,3
   21b38:	11658117 	ldw	r5,-27132(r2)
   21b3c:	9dc00215 	stw	r23,8(r19)
   21b40:	ad400054 	ori	r21,r21,1
   21b44:	a169883a 	add	r20,r20,r5
   21b48:	15258115 	stw	r20,-27132(r2)
   21b4c:	bd400115 	stw	r21,4(r23)
   21b50:	84c0d626 	beq	r16,r19,21eac <_malloc_r+0x720>
   21b54:	b0800428 	cmpgeui	r2,r22,16
   21b58:	1000d626 	beq	r2,zero,21eb4 <_malloc_r+0x728>
   21b5c:	80c00117 	ldw	r3,4(r16)
   21b60:	013ffe04 	movi	r4,-8
   21b64:	b0bffd04 	addi	r2,r22,-12
   21b68:	1104703a 	and	r2,r2,r4
   21b6c:	18c0004c 	andi	r3,r3,1
   21b70:	1886b03a 	or	r3,r3,r2
   21b74:	80c00115 	stw	r3,4(r16)
   21b78:	01000144 	movi	r4,5
   21b7c:	8087883a 	add	r3,r16,r2
   21b80:	19000115 	stw	r4,4(r3)
   21b84:	19000215 	stw	r4,8(r3)
   21b88:	10800428 	cmpgeui	r2,r2,16
   21b8c:	1000df1e 	bne	r2,zero,21f0c <_malloc_r+0x780>
   21b90:	bd400117 	ldw	r21,4(r23)
   21b94:	b821883a 	mov	r16,r23
   21b98:	008000f4 	movhi	r2,3
   21b9c:	10a57617 	ldw	r2,-27176(r2)
   21ba0:	1500022e 	bgeu	r2,r20,21bac <_malloc_r+0x420>
   21ba4:	008000f4 	movhi	r2,3
   21ba8:	15257615 	stw	r20,-27176(r2)
   21bac:	008000f4 	movhi	r2,3
   21bb0:	10a57517 	ldw	r2,-27180(r2)
   21bb4:	15006a2e 	bgeu	r2,r20,21d60 <_malloc_r+0x5d4>
   21bb8:	008000f4 	movhi	r2,3
   21bbc:	15257515 	stw	r20,-27180(r2)
   21bc0:	00006706 	br	21d60 <_malloc_r+0x5d4>
   21bc4:	88c00054 	ori	r3,r17,1
   21bc8:	80c00115 	stw	r3,4(r16)
   21bcc:	8463883a 	add	r17,r16,r17
   21bd0:	10800054 	ori	r2,r2,1
   21bd4:	9c400215 	stw	r17,8(r19)
   21bd8:	88800115 	stw	r2,4(r17)
   21bdc:	9009883a 	mov	r4,r18
   21be0:	00240840 	call	24084 <__malloc_unlock>
   21be4:	80800204 	addi	r2,r16,8
   21be8:	003f7e06 	br	219e4 <_malloc_r+0x258>
   21bec:	81000317 	ldw	r4,12(r16)
   21bf0:	003f0506 	br	21808 <_malloc_r+0x7c>
   21bf4:	1006d27a 	srli	r3,r2,9
   21bf8:	19000168 	cmpgeui	r4,r3,5
   21bfc:	20005026 	beq	r4,zero,21d40 <_malloc_r+0x5b4>
   21c00:	19000568 	cmpgeui	r4,r3,21
   21c04:	20008c1e 	bne	r4,zero,21e38 <_malloc_r+0x6ac>
   21c08:	19401704 	addi	r5,r3,92
   21c0c:	280a90fa 	slli	r5,r5,3
   21c10:	190016c4 	addi	r4,r3,91
   21c14:	994b883a 	add	r5,r19,r5
   21c18:	28c00017 	ldw	r3,0(r5)
   21c1c:	297ffe04 	addi	r5,r5,-8
   21c20:	28c07426 	beq	r5,r3,21df4 <_malloc_r+0x668>
   21c24:	01bfff04 	movi	r6,-4
   21c28:	19000117 	ldw	r4,4(r3)
   21c2c:	2188703a 	and	r4,r4,r6
   21c30:	1100022e 	bgeu	r2,r4,21c3c <_malloc_r+0x4b0>
   21c34:	18c00217 	ldw	r3,8(r3)
   21c38:	28fffb1e 	bne	r5,r3,21c28 <_malloc_r+0x49c>
   21c3c:	19400317 	ldw	r5,12(r3)
   21c40:	98800117 	ldw	r2,4(r19)
   21c44:	81400315 	stw	r5,12(r16)
   21c48:	80c00215 	stw	r3,8(r16)
   21c4c:	2c000215 	stw	r16,8(r5)
   21c50:	1c000315 	stw	r16,12(r3)
   21c54:	003f3606 	br	21930 <_malloc_r+0x1a4>
   21c58:	10c00568 	cmpgeui	r3,r2,21
   21c5c:	18004a26 	beq	r3,zero,21d88 <_malloc_r+0x5fc>
   21c60:	10c01568 	cmpgeui	r3,r2,85
   21c64:	18007b1e 	bne	r3,zero,21e54 <_malloc_r+0x6c8>
   21c68:	8804d33a 	srli	r2,r17,12
   21c6c:	11c01bc4 	addi	r7,r2,111
   21c70:	380890fa 	slli	r4,r7,3
   21c74:	12001b84 	addi	r8,r2,110
   21c78:	003efd06 	br	21870 <_malloc_r+0xe4>
   21c7c:	63000044 	addi	r12,r12,1
   21c80:	608000cc 	andi	r2,r12,3
   21c84:	42000204 	addi	r8,r8,8
   21c88:	103f3e1e 	bne	r2,zero,21984 <_malloc_r+0x1f8>
   21c8c:	00004506 	br	21da4 <_malloc_r+0x618>
   21c90:	81000217 	ldw	r4,8(r16)
   21c94:	89800054 	ori	r6,r17,1
   21c98:	81800115 	stw	r6,4(r16)
   21c9c:	20800315 	stw	r2,12(r4)
   21ca0:	11000215 	stw	r4,8(r2)
   21ca4:	8463883a 	add	r17,r16,r17
   21ca8:	9c400515 	stw	r17,20(r19)
   21cac:	9c400415 	stw	r17,16(r19)
   21cb0:	28800054 	ori	r2,r5,1
   21cb4:	88800115 	stw	r2,4(r17)
   21cb8:	8a400315 	stw	r9,12(r17)
   21cbc:	8a400215 	stw	r9,8(r17)
   21cc0:	80c7883a 	add	r3,r16,r3
   21cc4:	19400015 	stw	r5,0(r3)
   21cc8:	9009883a 	mov	r4,r18
   21ccc:	00240840 	call	24084 <__malloc_unlock>
   21cd0:	80800204 	addi	r2,r16,8
   21cd4:	003f4306 	br	219e4 <_malloc_r+0x258>
   21cd8:	880ed0fa 	srli	r7,r17,3
   21cdc:	88800204 	addi	r2,r17,8
   21ce0:	003ebf06 	br	217e0 <_malloc_r+0x54>
   21ce4:	8085883a 	add	r2,r16,r2
   21ce8:	10c00117 	ldw	r3,4(r2)
   21cec:	9009883a 	mov	r4,r18
   21cf0:	18c00054 	ori	r3,r3,1
   21cf4:	10c00115 	stw	r3,4(r2)
   21cf8:	00240840 	call	24084 <__malloc_unlock>
   21cfc:	80800204 	addi	r2,r16,8
   21d00:	003f3806 	br	219e4 <_malloc_r+0x258>
   21d04:	89000054 	ori	r4,r17,1
   21d08:	81000115 	stw	r4,4(r16)
   21d0c:	8463883a 	add	r17,r16,r17
   21d10:	9c400515 	stw	r17,20(r19)
   21d14:	9c400415 	stw	r17,16(r19)
   21d18:	19000054 	ori	r4,r3,1
   21d1c:	89000115 	stw	r4,4(r17)
   21d20:	8085883a 	add	r2,r16,r2
   21d24:	8a400315 	stw	r9,12(r17)
   21d28:	8a400215 	stw	r9,8(r17)
   21d2c:	10c00015 	stw	r3,0(r2)
   21d30:	9009883a 	mov	r4,r18
   21d34:	00240840 	call	24084 <__malloc_unlock>
   21d38:	80800204 	addi	r2,r16,8
   21d3c:	003f2906 	br	219e4 <_malloc_r+0x258>
   21d40:	1006d1ba 	srli	r3,r2,6
   21d44:	19400e44 	addi	r5,r3,57
   21d48:	280a90fa 	slli	r5,r5,3
   21d4c:	19000e04 	addi	r4,r3,56
   21d50:	003fb006 	br	21c14 <_malloc_r+0x488>
   21d54:	84c04626 	beq	r16,r19,21e70 <_malloc_r+0x6e4>
   21d58:	9c000217 	ldw	r16,8(r19)
   21d5c:	85400117 	ldw	r21,4(r16)
   21d60:	00bfff04 	movi	r2,-4
   21d64:	a8aa703a 	and	r21,r21,r2
   21d68:	ac45c83a 	sub	r2,r21,r17
   21d6c:	ac400236 	bltu	r21,r17,21d78 <_malloc_r+0x5ec>
   21d70:	10c00408 	cmpgei	r3,r2,16
   21d74:	183f931e 	bne	r3,zero,21bc4 <_malloc_r+0x438>
   21d78:	9009883a 	mov	r4,r18
   21d7c:	00240840 	call	24084 <__malloc_unlock>
   21d80:	0005883a 	mov	r2,zero
   21d84:	003f1706 	br	219e4 <_malloc_r+0x258>
   21d88:	11c01704 	addi	r7,r2,92
   21d8c:	380890fa 	slli	r4,r7,3
   21d90:	120016c4 	addi	r8,r2,91
   21d94:	003eb606 	br	21870 <_malloc_r+0xe4>
   21d98:	58800217 	ldw	r2,8(r11)
   21d9c:	39ffffc4 	addi	r7,r7,-1
   21da0:	12c0701e 	bne	r2,r11,21f64 <_malloc_r+0x7d8>
   21da4:	388000cc 	andi	r2,r7,3
   21da8:	5afffe04 	addi	r11,r11,-8
   21dac:	103ffa1e 	bne	r2,zero,21d98 <_malloc_r+0x60c>
   21db0:	98c00117 	ldw	r3,4(r19)
   21db4:	0104303a 	nor	r2,zero,r4
   21db8:	10c4703a 	and	r2,r2,r3
   21dbc:	98800115 	stw	r2,4(r19)
   21dc0:	2109883a 	add	r4,r4,r4
   21dc4:	113f2336 	bltu	r2,r4,21a54 <_malloc_r+0x2c8>
   21dc8:	203f2226 	beq	r4,zero,21a54 <_malloc_r+0x2c8>
   21dcc:	2086703a 	and	r3,r4,r2
   21dd0:	1800041e 	bne	r3,zero,21de4 <_malloc_r+0x658>
   21dd4:	2109883a 	add	r4,r4,r4
   21dd8:	2086703a 	and	r3,r4,r2
   21ddc:	63000104 	addi	r12,r12,4
   21de0:	183ffc26 	beq	r3,zero,21dd4 <_malloc_r+0x648>
   21de4:	600f883a 	mov	r7,r12
   21de8:	003ee206 	br	21974 <_malloc_r+0x1e8>
   21dec:	ad400404 	addi	r21,r21,16
   21df0:	003f2b06 	br	21aa0 <_malloc_r+0x314>
   21df4:	2009d0ba 	srai	r4,r4,2
   21df8:	00800044 	movi	r2,1
   21dfc:	99800117 	ldw	r6,4(r19)
   21e00:	1104983a 	sll	r2,r2,r4
   21e04:	1184b03a 	or	r2,r2,r6
   21e08:	98800115 	stw	r2,4(r19)
   21e0c:	003f8d06 	br	21c44 <_malloc_r+0x4b8>
   21e10:	bd69883a 	add	r20,r23,r21
   21e14:	0529c83a 	sub	r20,zero,r20
   21e18:	a503ffcc 	andi	r20,r20,4095
   21e1c:	a00b883a 	mov	r5,r20
   21e20:	9009883a 	mov	r4,r18
   21e24:	00228940 	call	22894 <_sbrk_r>
   21e28:	10ffffe0 	cmpeqi	r3,r2,-1
   21e2c:	183f3f26 	beq	r3,zero,21b2c <_malloc_r+0x3a0>
   21e30:	0029883a 	mov	r20,zero
   21e34:	003f3f06 	br	21b34 <_malloc_r+0x3a8>
   21e38:	19001568 	cmpgeui	r4,r3,85
   21e3c:	2000201e 	bne	r4,zero,21ec0 <_malloc_r+0x734>
   21e40:	1006d33a 	srli	r3,r2,12
   21e44:	19401bc4 	addi	r5,r3,111
   21e48:	280a90fa 	slli	r5,r5,3
   21e4c:	19001b84 	addi	r4,r3,110
   21e50:	003f7006 	br	21c14 <_malloc_r+0x488>
   21e54:	10c05568 	cmpgeui	r3,r2,341
   21e58:	1800201e 	bne	r3,zero,21edc <_malloc_r+0x750>
   21e5c:	8804d3fa 	srli	r2,r17,15
   21e60:	11c01e04 	addi	r7,r2,120
   21e64:	380890fa 	slli	r4,r7,3
   21e68:	12001dc4 	addi	r8,r2,119
   21e6c:	003e8006 	br	21870 <_malloc_r+0xe4>
   21e70:	008000f4 	movhi	r2,3
   21e74:	10e58117 	ldw	r3,-27132(r2)
   21e78:	a8c7883a 	add	r3,r21,r3
   21e7c:	10e58115 	stw	r3,-27132(r2)
   21e80:	003f1406 	br	21ad4 <_malloc_r+0x348>
   21e84:	e083ffcc 	andi	r2,fp,4095
   21e88:	103f121e 	bne	r2,zero,21ad4 <_malloc_r+0x348>
   21e8c:	9c000217 	ldw	r16,8(r19)
   21e90:	b56b883a 	add	r21,r22,r21
   21e94:	ad400054 	ori	r21,r21,1
   21e98:	85400115 	stw	r21,4(r16)
   21e9c:	003f3e06 	br	21b98 <_malloc_r+0x40c>
   21ea0:	008000b4 	movhi	r2,2
   21ea4:	15dece15 	stw	r23,31544(r2)
   21ea8:	003f1206 	br	21af4 <_malloc_r+0x368>
   21eac:	b821883a 	mov	r16,r23
   21eb0:	003f3906 	br	21b98 <_malloc_r+0x40c>
   21eb4:	00800044 	movi	r2,1
   21eb8:	b8800115 	stw	r2,4(r23)
   21ebc:	003fae06 	br	21d78 <_malloc_r+0x5ec>
   21ec0:	19005568 	cmpgeui	r4,r3,341
   21ec4:	2000191e 	bne	r4,zero,21f2c <_malloc_r+0x7a0>
   21ec8:	1006d3fa 	srli	r3,r2,15
   21ecc:	19401e04 	addi	r5,r3,120
   21ed0:	280a90fa 	slli	r5,r5,3
   21ed4:	19001dc4 	addi	r4,r3,119
   21ed8:	003f4e06 	br	21c14 <_malloc_r+0x488>
   21edc:	10815568 	cmpgeui	r2,r2,1365
   21ee0:	1000191e 	bne	r2,zero,21f48 <_malloc_r+0x7bc>
   21ee4:	8804d4ba 	srli	r2,r17,18
   21ee8:	11c01f44 	addi	r7,r2,125
   21eec:	380890fa 	slli	r4,r7,3
   21ef0:	12001f04 	addi	r8,r2,124
   21ef4:	003e5e06 	br	21870 <_malloc_r+0xe4>
   21ef8:	e73ffe04 	addi	fp,fp,-8
   21efc:	af2b883a 	add	r21,r21,fp
   21f00:	adebc83a 	sub	r21,r21,r23
   21f04:	0029883a 	mov	r20,zero
   21f08:	003f0a06 	br	21b34 <_malloc_r+0x3a8>
   21f0c:	81400204 	addi	r5,r16,8
   21f10:	9009883a 	mov	r4,r18
   21f14:	00232140 	call	23214 <_free_r>
   21f18:	9c000217 	ldw	r16,8(r19)
   21f1c:	008000f4 	movhi	r2,3
   21f20:	15258117 	ldw	r20,-27132(r2)
   21f24:	85400117 	ldw	r21,4(r16)
   21f28:	003f1b06 	br	21b98 <_malloc_r+0x40c>
   21f2c:	18c15568 	cmpgeui	r3,r3,1365
   21f30:	1800091e 	bne	r3,zero,21f58 <_malloc_r+0x7cc>
   21f34:	1006d4ba 	srli	r3,r2,18
   21f38:	19401f44 	addi	r5,r3,125
   21f3c:	280a90fa 	slli	r5,r5,3
   21f40:	19001f04 	addi	r4,r3,124
   21f44:	003f3306 	br	21c14 <_malloc_r+0x488>
   21f48:	0100fe04 	movi	r4,1016
   21f4c:	01c01fc4 	movi	r7,127
   21f50:	02001f84 	movi	r8,126
   21f54:	003e4606 	br	21870 <_malloc_r+0xe4>
   21f58:	0140fe04 	movi	r5,1016
   21f5c:	01001f84 	movi	r4,126
   21f60:	003f2c06 	br	21c14 <_malloc_r+0x488>
   21f64:	98800117 	ldw	r2,4(r19)
   21f68:	003f9506 	br	21dc0 <_malloc_r+0x634>

00021f6c <memchr>:
   21f6c:	208000cc 	andi	r2,r4,3
   21f70:	280f883a 	mov	r7,r5
   21f74:	10000e26 	beq	r2,zero,21fb0 <memchr+0x44>
   21f78:	30bfffc4 	addi	r2,r6,-1
   21f7c:	30001726 	beq	r6,zero,21fdc <memchr+0x70>
   21f80:	29803fcc 	andi	r6,r5,255
   21f84:	00000606 	br	21fa0 <memchr+0x34>
   21f88:	21000044 	addi	r4,r4,1
   21f8c:	20c000cc 	andi	r3,r4,3
   21f90:	18000826 	beq	r3,zero,21fb4 <memchr+0x48>
   21f94:	10bfffc4 	addi	r2,r2,-1
   21f98:	10ffffe0 	cmpeqi	r3,r2,-1
   21f9c:	18000f1e 	bne	r3,zero,21fdc <memchr+0x70>
   21fa0:	20c00003 	ldbu	r3,0(r4)
   21fa4:	19bff81e 	bne	r3,r6,21f88 <memchr+0x1c>
   21fa8:	2005883a 	mov	r2,r4
   21fac:	f800283a 	ret
   21fb0:	3005883a 	mov	r2,r6
   21fb4:	10c00128 	cmpgeui	r3,r2,4
   21fb8:	18000a1e 	bne	r3,zero,21fe4 <memchr+0x78>
   21fbc:	10001e26 	beq	r2,zero,22038 <memchr+0xcc>
   21fc0:	2087883a 	add	r3,r4,r2
   21fc4:	39803fcc 	andi	r6,r7,255
   21fc8:	2005883a 	mov	r2,r4
   21fcc:	11000003 	ldbu	r4,0(r2)
   21fd0:	21bff626 	beq	r4,r6,21fac <memchr+0x40>
   21fd4:	10800044 	addi	r2,r2,1
   21fd8:	18bffc1e 	bne	r3,r2,21fcc <memchr+0x60>
   21fdc:	0005883a 	mov	r2,zero
   21fe0:	f800283a 	ret
   21fe4:	29403fcc 	andi	r5,r5,255
   21fe8:	280c923a 	slli	r6,r5,8
   21fec:	027fbff4 	movhi	r9,65279
   21ff0:	02202074 	movhi	r8,32897
   21ff4:	314ab03a 	or	r5,r6,r5
   21ff8:	280c943a 	slli	r6,r5,16
   21ffc:	4a7fbfc4 	addi	r9,r9,-257
   22000:	42202004 	addi	r8,r8,-32640
   22004:	314cb03a 	or	r6,r6,r5
   22008:	20c00017 	ldw	r3,0(r4)
   2200c:	30c6f03a 	xor	r3,r6,r3
   22010:	1a4b883a 	add	r5,r3,r9
   22014:	00c6303a 	nor	r3,zero,r3
   22018:	28c6703a 	and	r3,r5,r3
   2201c:	1a06703a 	and	r3,r3,r8
   22020:	183fe71e 	bne	r3,zero,21fc0 <memchr+0x54>
   22024:	10bfff04 	addi	r2,r2,-4
   22028:	10c00128 	cmpgeui	r3,r2,4
   2202c:	21000104 	addi	r4,r4,4
   22030:	183ff51e 	bne	r3,zero,22008 <memchr+0x9c>
   22034:	003fe106 	br	21fbc <memchr+0x50>
   22038:	f800283a 	ret

0002203c <memcpy>:
   2203c:	30c00430 	cmpltui	r3,r6,16
   22040:	2005883a 	mov	r2,r4
   22044:	18002d1e 	bne	r3,zero,220fc <memcpy+0xc0>
   22048:	2906b03a 	or	r3,r5,r4
   2204c:	18c000cc 	andi	r3,r3,3
   22050:	1800351e 	bne	r3,zero,22128 <memcpy+0xec>
   22054:	32fffc04 	addi	r11,r6,-16
   22058:	5816d13a 	srli	r11,r11,4
   2205c:	280f883a 	mov	r7,r5
   22060:	2007883a 	mov	r3,r4
   22064:	5ac00044 	addi	r11,r11,1
   22068:	5816913a 	slli	r11,r11,4
   2206c:	22d5883a 	add	r10,r4,r11
   22070:	39000117 	ldw	r4,4(r7)
   22074:	3a400017 	ldw	r9,0(r7)
   22078:	3a000217 	ldw	r8,8(r7)
   2207c:	19000115 	stw	r4,4(r3)
   22080:	39000317 	ldw	r4,12(r7)
   22084:	1a400015 	stw	r9,0(r3)
   22088:	1a000215 	stw	r8,8(r3)
   2208c:	19000315 	stw	r4,12(r3)
   22090:	18c00404 	addi	r3,r3,16
   22094:	39c00404 	addi	r7,r7,16
   22098:	50fff51e 	bne	r10,r3,22070 <memcpy+0x34>
   2209c:	3100030c 	andi	r4,r6,12
   220a0:	2acb883a 	add	r5,r5,r11
   220a4:	320003cc 	andi	r8,r6,15
   220a8:	20002226 	beq	r4,zero,22134 <memcpy+0xf8>
   220ac:	280f883a 	mov	r7,r5
   220b0:	1813883a 	mov	r9,r3
   220b4:	39c00104 	addi	r7,r7,4
   220b8:	3abfff17 	ldw	r10,-4(r7)
   220bc:	41c9c83a 	sub	r4,r8,r7
   220c0:	2909883a 	add	r4,r5,r4
   220c4:	4a800015 	stw	r10,0(r9)
   220c8:	21000128 	cmpgeui	r4,r4,4
   220cc:	4a400104 	addi	r9,r9,4
   220d0:	203ff81e 	bne	r4,zero,220b4 <memcpy+0x78>
   220d4:	413fff04 	addi	r4,r8,-4
   220d8:	2008d0ba 	srli	r4,r4,2
   220dc:	318000cc 	andi	r6,r6,3
   220e0:	31ffffc4 	addi	r7,r6,-1
   220e4:	21000044 	addi	r4,r4,1
   220e8:	200890ba 	slli	r4,r4,2
   220ec:	1907883a 	add	r3,r3,r4
   220f0:	290b883a 	add	r5,r5,r4
   220f4:	3000041e 	bne	r6,zero,22108 <memcpy+0xcc>
   220f8:	f800283a 	ret
   220fc:	2007883a 	mov	r3,r4
   22100:	31ffffc4 	addi	r7,r6,-1
   22104:	303ffc26 	beq	r6,zero,220f8 <memcpy+0xbc>
   22108:	39c00044 	addi	r7,r7,1
   2210c:	19cf883a 	add	r7,r3,r7
   22110:	29800003 	ldbu	r6,0(r5)
   22114:	18c00044 	addi	r3,r3,1
   22118:	29400044 	addi	r5,r5,1
   2211c:	19bfffc5 	stb	r6,-1(r3)
   22120:	38fffb1e 	bne	r7,r3,22110 <memcpy+0xd4>
   22124:	f800283a 	ret
   22128:	31ffffc4 	addi	r7,r6,-1
   2212c:	2007883a 	mov	r3,r4
   22130:	003ff506 	br	22108 <memcpy+0xcc>
   22134:	400d883a 	mov	r6,r8
   22138:	003ff106 	br	22100 <memcpy+0xc4>

0002213c <memmove>:
   2213c:	2005883a 	mov	r2,r4
   22140:	29000a2e 	bgeu	r5,r4,2216c <memmove+0x30>
   22144:	2989883a 	add	r4,r5,r6
   22148:	1100082e 	bgeu	r2,r4,2216c <memmove+0x30>
   2214c:	1187883a 	add	r3,r2,r6
   22150:	30003e26 	beq	r6,zero,2224c <memmove+0x110>
   22154:	217fffc3 	ldbu	r5,-1(r4)
   22158:	18ffffc4 	addi	r3,r3,-1
   2215c:	213fffc4 	addi	r4,r4,-1
   22160:	19400005 	stb	r5,0(r3)
   22164:	10fffb1e 	bne	r2,r3,22154 <memmove+0x18>
   22168:	f800283a 	ret
   2216c:	30c00430 	cmpltui	r3,r6,16
   22170:	18000b26 	beq	r3,zero,221a0 <memmove+0x64>
   22174:	1007883a 	mov	r3,r2
   22178:	31ffffc4 	addi	r7,r6,-1
   2217c:	30003726 	beq	r6,zero,2225c <memmove+0x120>
   22180:	39c00044 	addi	r7,r7,1
   22184:	29cf883a 	add	r7,r5,r7
   22188:	29800003 	ldbu	r6,0(r5)
   2218c:	29400044 	addi	r5,r5,1
   22190:	18c00044 	addi	r3,r3,1
   22194:	19bfffc5 	stb	r6,-1(r3)
   22198:	29fffb1e 	bne	r5,r7,22188 <memmove+0x4c>
   2219c:	f800283a 	ret
   221a0:	2886b03a 	or	r3,r5,r2
   221a4:	18c000cc 	andi	r3,r3,3
   221a8:	1800291e 	bne	r3,zero,22250 <memmove+0x114>
   221ac:	327ffc04 	addi	r9,r6,-16
   221b0:	4812d13a 	srli	r9,r9,4
   221b4:	280f883a 	mov	r7,r5
   221b8:	1007883a 	mov	r3,r2
   221bc:	4a400044 	addi	r9,r9,1
   221c0:	4812913a 	slli	r9,r9,4
   221c4:	1251883a 	add	r8,r2,r9
   221c8:	39000017 	ldw	r4,0(r7)
   221cc:	39c00404 	addi	r7,r7,16
   221d0:	18c00404 	addi	r3,r3,16
   221d4:	193ffc15 	stw	r4,-16(r3)
   221d8:	393ffd17 	ldw	r4,-12(r7)
   221dc:	193ffd15 	stw	r4,-12(r3)
   221e0:	393ffe17 	ldw	r4,-8(r7)
   221e4:	193ffe15 	stw	r4,-8(r3)
   221e8:	393fff17 	ldw	r4,-4(r7)
   221ec:	193fff15 	stw	r4,-4(r3)
   221f0:	40fff51e 	bne	r8,r3,221c8 <memmove+0x8c>
   221f4:	3100030c 	andi	r4,r6,12
   221f8:	2a4b883a 	add	r5,r5,r9
   221fc:	320003cc 	andi	r8,r6,15
   22200:	20001726 	beq	r4,zero,22260 <memmove+0x124>
   22204:	2813883a 	mov	r9,r5
   22208:	180f883a 	mov	r7,r3
   2220c:	4a800017 	ldw	r10,0(r9)
   22210:	39c00104 	addi	r7,r7,4
   22214:	41c9c83a 	sub	r4,r8,r7
   22218:	1909883a 	add	r4,r3,r4
   2221c:	21000128 	cmpgeui	r4,r4,4
   22220:	3abfff15 	stw	r10,-4(r7)
   22224:	4a400104 	addi	r9,r9,4
   22228:	203ff81e 	bne	r4,zero,2220c <memmove+0xd0>
   2222c:	413fff04 	addi	r4,r8,-4
   22230:	2008d0ba 	srli	r4,r4,2
   22234:	318000cc 	andi	r6,r6,3
   22238:	21000044 	addi	r4,r4,1
   2223c:	200890ba 	slli	r4,r4,2
   22240:	1907883a 	add	r3,r3,r4
   22244:	290b883a 	add	r5,r5,r4
   22248:	003fcb06 	br	22178 <memmove+0x3c>
   2224c:	f800283a 	ret
   22250:	31ffffc4 	addi	r7,r6,-1
   22254:	1007883a 	mov	r3,r2
   22258:	003fc906 	br	22180 <memmove+0x44>
   2225c:	f800283a 	ret
   22260:	400d883a 	mov	r6,r8
   22264:	003fc406 	br	22178 <memmove+0x3c>

00022268 <memset>:
   22268:	20c000cc 	andi	r3,r4,3
   2226c:	2005883a 	mov	r2,r4
   22270:	18003626 	beq	r3,zero,2234c <memset+0xe4>
   22274:	31ffffc4 	addi	r7,r6,-1
   22278:	30003326 	beq	r6,zero,22348 <memset+0xe0>
   2227c:	2811883a 	mov	r8,r5
   22280:	2007883a 	mov	r3,r4
   22284:	00000306 	br	22294 <memset+0x2c>
   22288:	39ffffc4 	addi	r7,r7,-1
   2228c:	39bfffe0 	cmpeqi	r6,r7,-1
   22290:	30002d1e 	bne	r6,zero,22348 <memset+0xe0>
   22294:	18c00044 	addi	r3,r3,1
   22298:	198000cc 	andi	r6,r3,3
   2229c:	1a3fffc5 	stb	r8,-1(r3)
   222a0:	303ff91e 	bne	r6,zero,22288 <memset+0x20>
   222a4:	39000130 	cmpltui	r4,r7,4
   222a8:	2000221e 	bne	r4,zero,22334 <memset+0xcc>
   222ac:	29003fcc 	andi	r4,r5,255
   222b0:	200c923a 	slli	r6,r4,8
   222b4:	3a000430 	cmpltui	r8,r7,16
   222b8:	3108b03a 	or	r4,r6,r4
   222bc:	200c943a 	slli	r6,r4,16
   222c0:	310cb03a 	or	r6,r6,r4
   222c4:	40000e1e 	bne	r8,zero,22300 <memset+0x98>
   222c8:	393ffc04 	addi	r4,r7,-16
   222cc:	2008d13a 	srli	r4,r4,4
   222d0:	21000044 	addi	r4,r4,1
   222d4:	2008913a 	slli	r4,r4,4
   222d8:	1909883a 	add	r4,r3,r4
   222dc:	19800015 	stw	r6,0(r3)
   222e0:	19800115 	stw	r6,4(r3)
   222e4:	19800215 	stw	r6,8(r3)
   222e8:	19800315 	stw	r6,12(r3)
   222ec:	18c00404 	addi	r3,r3,16
   222f0:	20fffa1e 	bne	r4,r3,222dc <memset+0x74>
   222f4:	3900030c 	andi	r4,r7,12
   222f8:	39c003cc 	andi	r7,r7,15
   222fc:	20000d26 	beq	r4,zero,22334 <memset+0xcc>
   22300:	1811883a 	mov	r8,r3
   22304:	42000104 	addi	r8,r8,4
   22308:	3a09c83a 	sub	r4,r7,r8
   2230c:	1909883a 	add	r4,r3,r4
   22310:	21000128 	cmpgeui	r4,r4,4
   22314:	41bfff15 	stw	r6,-4(r8)
   22318:	203ffa1e 	bne	r4,zero,22304 <memset+0x9c>
   2231c:	393fff04 	addi	r4,r7,-4
   22320:	2008d0ba 	srli	r4,r4,2
   22324:	39c000cc 	andi	r7,r7,3
   22328:	21000044 	addi	r4,r4,1
   2232c:	200890ba 	slli	r4,r4,2
   22330:	1907883a 	add	r3,r3,r4
   22334:	38000426 	beq	r7,zero,22348 <memset+0xe0>
   22338:	19cf883a 	add	r7,r3,r7
   2233c:	18c00044 	addi	r3,r3,1
   22340:	197fffc5 	stb	r5,-1(r3)
   22344:	38fffd1e 	bne	r7,r3,2233c <memset+0xd4>
   22348:	f800283a 	ret
   2234c:	2007883a 	mov	r3,r4
   22350:	300f883a 	mov	r7,r6
   22354:	003fd306 	br	222a4 <memset+0x3c>

00022358 <_realloc_r>:
   22358:	defff604 	addi	sp,sp,-40
   2235c:	dc800215 	stw	r18,8(sp)
   22360:	dfc00915 	stw	ra,36(sp)
   22364:	df000815 	stw	fp,32(sp)
   22368:	ddc00715 	stw	r23,28(sp)
   2236c:	dd800615 	stw	r22,24(sp)
   22370:	dd400515 	stw	r21,20(sp)
   22374:	dd000415 	stw	r20,16(sp)
   22378:	dcc00315 	stw	r19,12(sp)
   2237c:	dc400115 	stw	r17,4(sp)
   22380:	dc000015 	stw	r16,0(sp)
   22384:	3025883a 	mov	r18,r6
   22388:	28008b26 	beq	r5,zero,225b8 <_realloc_r+0x260>
   2238c:	2821883a 	mov	r16,r5
   22390:	2027883a 	mov	r19,r4
   22394:	944002c4 	addi	r17,r18,11
   22398:	00240600 	call	24060 <__malloc_lock>
   2239c:	888005f0 	cmpltui	r2,r17,23
   223a0:	1000521e 	bne	r2,zero,224ec <_realloc_r+0x194>
   223a4:	017ffe04 	movi	r5,-8
   223a8:	8962703a 	and	r17,r17,r5
   223ac:	8807883a 	mov	r3,r17
   223b0:	88005116 	blt	r17,zero,224f8 <_realloc_r+0x1a0>
   223b4:	8c805036 	bltu	r17,r18,224f8 <_realloc_r+0x1a0>
   223b8:	80bfff17 	ldw	r2,-4(r16)
   223bc:	017fff04 	movi	r5,-4
   223c0:	857ffe04 	addi	r21,r16,-8
   223c4:	1168703a 	and	r20,r2,r5
   223c8:	a0c0390e 	bge	r20,r3,224b0 <_realloc_r+0x158>
   223cc:	05c000b4 	movhi	r23,2
   223d0:	bdd94804 	addi	r23,r23,25888
   223d4:	ba000217 	ldw	r8,8(r23)
   223d8:	ad0f883a 	add	r7,r21,r20
   223dc:	39000117 	ldw	r4,4(r7)
   223e0:	41c08e26 	beq	r8,r7,2261c <_realloc_r+0x2c4>
   223e4:	01bfff84 	movi	r6,-2
   223e8:	218c703a 	and	r6,r4,r6
   223ec:	398d883a 	add	r6,r7,r6
   223f0:	31800117 	ldw	r6,4(r6)
   223f4:	3180004c 	andi	r6,r6,1
   223f8:	30004f1e 	bne	r6,zero,22538 <_realloc_r+0x1e0>
   223fc:	2148703a 	and	r4,r4,r5
   22400:	a10b883a 	add	r5,r20,r4
   22404:	28c0bb0e 	bge	r5,r3,226f4 <_realloc_r+0x39c>
   22408:	1080004c 	andi	r2,r2,1
   2240c:	10004c1e 	bne	r2,zero,22540 <_realloc_r+0x1e8>
   22410:	873ffe17 	ldw	fp,-8(r16)
   22414:	00bfff04 	movi	r2,-4
   22418:	af39c83a 	sub	fp,r21,fp
   2241c:	e1400117 	ldw	r5,4(fp)
   22420:	288a703a 	and	r5,r5,r2
   22424:	38000426 	beq	r7,zero,22438 <_realloc_r+0xe0>
   22428:	a16d883a 	add	r22,r20,r5
   2242c:	b12d883a 	add	r22,r22,r4
   22430:	41c0ba26 	beq	r8,r7,2271c <_realloc_r+0x3c4>
   22434:	b0c0930e 	bge	r22,r3,22684 <_realloc_r+0x32c>
   22438:	e0004126 	beq	fp,zero,22540 <_realloc_r+0x1e8>
   2243c:	a16d883a 	add	r22,r20,r5
   22440:	b0c03f16 	blt	r22,r3,22540 <_realloc_r+0x1e8>
   22444:	e0800317 	ldw	r2,12(fp)
   22448:	e0c00217 	ldw	r3,8(fp)
   2244c:	a1bfff04 	addi	r6,r20,-4
   22450:	31400968 	cmpgeui	r5,r6,37
   22454:	18800315 	stw	r2,12(r3)
   22458:	10c00215 	stw	r3,8(r2)
   2245c:	e1000204 	addi	r4,fp,8
   22460:	2800941e 	bne	r5,zero,226b4 <_realloc_r+0x35c>
   22464:	30800530 	cmpltui	r2,r6,20
   22468:	1000db1e 	bne	r2,zero,227d8 <_realloc_r+0x480>
   2246c:	80c00017 	ldw	r3,0(r16)
   22470:	30800728 	cmpgeui	r2,r6,28
   22474:	e0c00215 	stw	r3,8(fp)
   22478:	80c00117 	ldw	r3,4(r16)
   2247c:	e0c00315 	stw	r3,12(fp)
   22480:	1000d71e 	bne	r2,zero,227e0 <_realloc_r+0x488>
   22484:	84000204 	addi	r16,r16,8
   22488:	e0800404 	addi	r2,fp,16
   2248c:	80c00017 	ldw	r3,0(r16)
   22490:	b029883a 	mov	r20,r22
   22494:	e02b883a 	mov	r21,fp
   22498:	10c00015 	stw	r3,0(r2)
   2249c:	80c00117 	ldw	r3,4(r16)
   224a0:	10c00115 	stw	r3,4(r2)
   224a4:	80c00217 	ldw	r3,8(r16)
   224a8:	2021883a 	mov	r16,r4
   224ac:	10c00215 	stw	r3,8(r2)
   224b0:	a9800117 	ldw	r6,4(r21)
   224b4:	a447c83a 	sub	r3,r20,r17
   224b8:	19000430 	cmpltui	r4,r3,16
   224bc:	3180004c 	andi	r6,r6,1
   224c0:	ad05883a 	add	r2,r21,r20
   224c4:	20004926 	beq	r4,zero,225ec <_realloc_r+0x294>
   224c8:	a18cb03a 	or	r6,r20,r6
   224cc:	a9800115 	stw	r6,4(r21)
   224d0:	10c00117 	ldw	r3,4(r2)
   224d4:	18c00054 	ori	r3,r3,1
   224d8:	10c00115 	stw	r3,4(r2)
   224dc:	9809883a 	mov	r4,r19
   224e0:	00240840 	call	24084 <__malloc_unlock>
   224e4:	8025883a 	mov	r18,r16
   224e8:	00000606 	br	22504 <_realloc_r+0x1ac>
   224ec:	04400404 	movi	r17,16
   224f0:	00c00404 	movi	r3,16
   224f4:	8cbfb02e 	bgeu	r17,r18,223b8 <_realloc_r+0x60>
   224f8:	00800304 	movi	r2,12
   224fc:	98800015 	stw	r2,0(r19)
   22500:	0025883a 	mov	r18,zero
   22504:	9005883a 	mov	r2,r18
   22508:	dfc00917 	ldw	ra,36(sp)
   2250c:	df000817 	ldw	fp,32(sp)
   22510:	ddc00717 	ldw	r23,28(sp)
   22514:	dd800617 	ldw	r22,24(sp)
   22518:	dd400517 	ldw	r21,20(sp)
   2251c:	dd000417 	ldw	r20,16(sp)
   22520:	dcc00317 	ldw	r19,12(sp)
   22524:	dc800217 	ldw	r18,8(sp)
   22528:	dc400117 	ldw	r17,4(sp)
   2252c:	dc000017 	ldw	r16,0(sp)
   22530:	dec00a04 	addi	sp,sp,40
   22534:	f800283a 	ret
   22538:	1080004c 	andi	r2,r2,1
   2253c:	10006826 	beq	r2,zero,226e0 <_realloc_r+0x388>
   22540:	900b883a 	mov	r5,r18
   22544:	9809883a 	mov	r4,r19
   22548:	002178c0 	call	2178c <_malloc_r>
   2254c:	1025883a 	mov	r18,r2
   22550:	10001626 	beq	r2,zero,225ac <_realloc_r+0x254>
   22554:	80bfff17 	ldw	r2,-4(r16)
   22558:	013fff84 	movi	r4,-2
   2255c:	90fffe04 	addi	r3,r18,-8
   22560:	1104703a 	and	r2,r2,r4
   22564:	a885883a 	add	r2,r21,r2
   22568:	10c05826 	beq	r2,r3,226cc <_realloc_r+0x374>
   2256c:	a1bfff04 	addi	r6,r20,-4
   22570:	30800968 	cmpgeui	r2,r6,37
   22574:	1000651e 	bne	r2,zero,2270c <_realloc_r+0x3b4>
   22578:	30800530 	cmpltui	r2,r6,20
   2257c:	10003826 	beq	r2,zero,22660 <_realloc_r+0x308>
   22580:	9005883a 	mov	r2,r18
   22584:	8007883a 	mov	r3,r16
   22588:	19000017 	ldw	r4,0(r3)
   2258c:	11000015 	stw	r4,0(r2)
   22590:	19000117 	ldw	r4,4(r3)
   22594:	11000115 	stw	r4,4(r2)
   22598:	18c00217 	ldw	r3,8(r3)
   2259c:	10c00215 	stw	r3,8(r2)
   225a0:	800b883a 	mov	r5,r16
   225a4:	9809883a 	mov	r4,r19
   225a8:	00232140 	call	23214 <_free_r>
   225ac:	9809883a 	mov	r4,r19
   225b0:	00240840 	call	24084 <__malloc_unlock>
   225b4:	003fd306 	br	22504 <_realloc_r+0x1ac>
   225b8:	300b883a 	mov	r5,r6
   225bc:	dfc00917 	ldw	ra,36(sp)
   225c0:	df000817 	ldw	fp,32(sp)
   225c4:	ddc00717 	ldw	r23,28(sp)
   225c8:	dd800617 	ldw	r22,24(sp)
   225cc:	dd400517 	ldw	r21,20(sp)
   225d0:	dd000417 	ldw	r20,16(sp)
   225d4:	dcc00317 	ldw	r19,12(sp)
   225d8:	dc800217 	ldw	r18,8(sp)
   225dc:	dc400117 	ldw	r17,4(sp)
   225e0:	dc000017 	ldw	r16,0(sp)
   225e4:	dec00a04 	addi	sp,sp,40
   225e8:	002178c1 	jmpi	2178c <_malloc_r>
   225ec:	344cb03a 	or	r6,r6,r17
   225f0:	a9800115 	stw	r6,4(r21)
   225f4:	ac4b883a 	add	r5,r21,r17
   225f8:	18c00054 	ori	r3,r3,1
   225fc:	28c00115 	stw	r3,4(r5)
   22600:	10c00117 	ldw	r3,4(r2)
   22604:	29400204 	addi	r5,r5,8
   22608:	9809883a 	mov	r4,r19
   2260c:	18c00054 	ori	r3,r3,1
   22610:	10c00115 	stw	r3,4(r2)
   22614:	00232140 	call	23214 <_free_r>
   22618:	003fb006 	br	224dc <_realloc_r+0x184>
   2261c:	2148703a 	and	r4,r4,r5
   22620:	a10b883a 	add	r5,r20,r4
   22624:	89800404 	addi	r6,r17,16
   22628:	29bf7716 	blt	r5,r6,22408 <_realloc_r+0xb0>
   2262c:	ac6b883a 	add	r21,r21,r17
   22630:	2c45c83a 	sub	r2,r5,r17
   22634:	bd400215 	stw	r21,8(r23)
   22638:	10800054 	ori	r2,r2,1
   2263c:	a8800115 	stw	r2,4(r21)
   22640:	80bfff17 	ldw	r2,-4(r16)
   22644:	9809883a 	mov	r4,r19
   22648:	8025883a 	mov	r18,r16
   2264c:	1080004c 	andi	r2,r2,1
   22650:	1462b03a 	or	r17,r2,r17
   22654:	847fff15 	stw	r17,-4(r16)
   22658:	00240840 	call	24084 <__malloc_unlock>
   2265c:	003fa906 	br	22504 <_realloc_r+0x1ac>
   22660:	80c00017 	ldw	r3,0(r16)
   22664:	30800728 	cmpgeui	r2,r6,28
   22668:	90c00015 	stw	r3,0(r18)
   2266c:	80c00117 	ldw	r3,4(r16)
   22670:	90c00115 	stw	r3,4(r18)
   22674:	10004f1e 	bne	r2,zero,227b4 <_realloc_r+0x45c>
   22678:	80c00204 	addi	r3,r16,8
   2267c:	90800204 	addi	r2,r18,8
   22680:	003fc106 	br	22588 <_realloc_r+0x230>
   22684:	38800317 	ldw	r2,12(r7)
   22688:	38c00217 	ldw	r3,8(r7)
   2268c:	a1bfff04 	addi	r6,r20,-4
   22690:	31400968 	cmpgeui	r5,r6,37
   22694:	18800315 	stw	r2,12(r3)
   22698:	10c00215 	stw	r3,8(r2)
   2269c:	e0c00217 	ldw	r3,8(fp)
   226a0:	e0800317 	ldw	r2,12(fp)
   226a4:	e1000204 	addi	r4,fp,8
   226a8:	18800315 	stw	r2,12(r3)
   226ac:	10c00215 	stw	r3,8(r2)
   226b0:	283f6c26 	beq	r5,zero,22464 <_realloc_r+0x10c>
   226b4:	800b883a 	mov	r5,r16
   226b8:	002213c0 	call	2213c <memmove>
   226bc:	1021883a 	mov	r16,r2
   226c0:	b029883a 	mov	r20,r22
   226c4:	e02b883a 	mov	r21,fp
   226c8:	003f7906 	br	224b0 <_realloc_r+0x158>
   226cc:	90bfff17 	ldw	r2,-4(r18)
   226d0:	00ffff04 	movi	r3,-4
   226d4:	10c4703a 	and	r2,r2,r3
   226d8:	a0a9883a 	add	r20,r20,r2
   226dc:	003f7406 	br	224b0 <_realloc_r+0x158>
   226e0:	873ffe17 	ldw	fp,-8(r16)
   226e4:	af39c83a 	sub	fp,r21,fp
   226e8:	e0800117 	ldw	r2,4(fp)
   226ec:	114a703a 	and	r5,r2,r5
   226f0:	003f5106 	br	22438 <_realloc_r+0xe0>
   226f4:	38800317 	ldw	r2,12(r7)
   226f8:	38c00217 	ldw	r3,8(r7)
   226fc:	2829883a 	mov	r20,r5
   22700:	18800315 	stw	r2,12(r3)
   22704:	10c00215 	stw	r3,8(r2)
   22708:	003f6906 	br	224b0 <_realloc_r+0x158>
   2270c:	800b883a 	mov	r5,r16
   22710:	9009883a 	mov	r4,r18
   22714:	002213c0 	call	2213c <memmove>
   22718:	003fa106 	br	225a0 <_realloc_r+0x248>
   2271c:	88800404 	addi	r2,r17,16
   22720:	b0bf4516 	blt	r22,r2,22438 <_realloc_r+0xe0>
   22724:	e0800317 	ldw	r2,12(fp)
   22728:	e0c00217 	ldw	r3,8(fp)
   2272c:	a1bfff04 	addi	r6,r20,-4
   22730:	31000968 	cmpgeui	r4,r6,37
   22734:	18800315 	stw	r2,12(r3)
   22738:	10c00215 	stw	r3,8(r2)
   2273c:	e4800204 	addi	r18,fp,8
   22740:	2000391e 	bne	r4,zero,22828 <_realloc_r+0x4d0>
   22744:	30800530 	cmpltui	r2,r6,20
   22748:	1000351e 	bne	r2,zero,22820 <_realloc_r+0x4c8>
   2274c:	80c00017 	ldw	r3,0(r16)
   22750:	30800728 	cmpgeui	r2,r6,28
   22754:	e0c00215 	stw	r3,8(fp)
   22758:	80c00117 	ldw	r3,4(r16)
   2275c:	e0c00315 	stw	r3,12(fp)
   22760:	10003c1e 	bne	r2,zero,22854 <_realloc_r+0x4fc>
   22764:	84000204 	addi	r16,r16,8
   22768:	e0800404 	addi	r2,fp,16
   2276c:	80c00017 	ldw	r3,0(r16)
   22770:	10c00015 	stw	r3,0(r2)
   22774:	80c00117 	ldw	r3,4(r16)
   22778:	10c00115 	stw	r3,4(r2)
   2277c:	80c00217 	ldw	r3,8(r16)
   22780:	10c00215 	stw	r3,8(r2)
   22784:	e447883a 	add	r3,fp,r17
   22788:	b445c83a 	sub	r2,r22,r17
   2278c:	b8c00215 	stw	r3,8(r23)
   22790:	10800054 	ori	r2,r2,1
   22794:	18800115 	stw	r2,4(r3)
   22798:	e0800117 	ldw	r2,4(fp)
   2279c:	9809883a 	mov	r4,r19
   227a0:	1080004c 	andi	r2,r2,1
   227a4:	1462b03a 	or	r17,r2,r17
   227a8:	e4400115 	stw	r17,4(fp)
   227ac:	00240840 	call	24084 <__malloc_unlock>
   227b0:	003f5406 	br	22504 <_realloc_r+0x1ac>
   227b4:	80800217 	ldw	r2,8(r16)
   227b8:	31800920 	cmpeqi	r6,r6,36
   227bc:	90800215 	stw	r2,8(r18)
   227c0:	80800317 	ldw	r2,12(r16)
   227c4:	90800315 	stw	r2,12(r18)
   227c8:	30000e1e 	bne	r6,zero,22804 <_realloc_r+0x4ac>
   227cc:	80c00404 	addi	r3,r16,16
   227d0:	90800404 	addi	r2,r18,16
   227d4:	003f6c06 	br	22588 <_realloc_r+0x230>
   227d8:	2005883a 	mov	r2,r4
   227dc:	003f2b06 	br	2248c <_realloc_r+0x134>
   227e0:	80800217 	ldw	r2,8(r16)
   227e4:	31800920 	cmpeqi	r6,r6,36
   227e8:	e0800415 	stw	r2,16(fp)
   227ec:	80800317 	ldw	r2,12(r16)
   227f0:	e0800515 	stw	r2,20(fp)
   227f4:	3000101e 	bne	r6,zero,22838 <_realloc_r+0x4e0>
   227f8:	84000404 	addi	r16,r16,16
   227fc:	e0800604 	addi	r2,fp,24
   22800:	003f2206 	br	2248c <_realloc_r+0x134>
   22804:	81000417 	ldw	r4,16(r16)
   22808:	80c00604 	addi	r3,r16,24
   2280c:	90800604 	addi	r2,r18,24
   22810:	91000415 	stw	r4,16(r18)
   22814:	81000517 	ldw	r4,20(r16)
   22818:	91000515 	stw	r4,20(r18)
   2281c:	003f5a06 	br	22588 <_realloc_r+0x230>
   22820:	9005883a 	mov	r2,r18
   22824:	003fd106 	br	2276c <_realloc_r+0x414>
   22828:	800b883a 	mov	r5,r16
   2282c:	9009883a 	mov	r4,r18
   22830:	002213c0 	call	2213c <memmove>
   22834:	003fd306 	br	22784 <_realloc_r+0x42c>
   22838:	80c00417 	ldw	r3,16(r16)
   2283c:	84000604 	addi	r16,r16,24
   22840:	e0800804 	addi	r2,fp,32
   22844:	e0c00615 	stw	r3,24(fp)
   22848:	80ffff17 	ldw	r3,-4(r16)
   2284c:	e0c00715 	stw	r3,28(fp)
   22850:	003f0e06 	br	2248c <_realloc_r+0x134>
   22854:	80800217 	ldw	r2,8(r16)
   22858:	31800920 	cmpeqi	r6,r6,36
   2285c:	e0800415 	stw	r2,16(fp)
   22860:	80800317 	ldw	r2,12(r16)
   22864:	e0800515 	stw	r2,20(fp)
   22868:	3000031e 	bne	r6,zero,22878 <_realloc_r+0x520>
   2286c:	84000404 	addi	r16,r16,16
   22870:	e0800604 	addi	r2,fp,24
   22874:	003fbd06 	br	2276c <_realloc_r+0x414>
   22878:	80c00417 	ldw	r3,16(r16)
   2287c:	84000604 	addi	r16,r16,24
   22880:	e0800804 	addi	r2,fp,32
   22884:	e0c00615 	stw	r3,24(fp)
   22888:	80ffff17 	ldw	r3,-4(r16)
   2288c:	e0c00715 	stw	r3,28(fp)
   22890:	003fb606 	br	2276c <_realloc_r+0x414>

00022894 <_sbrk_r>:
   22894:	defffe04 	addi	sp,sp,-8
   22898:	dc000015 	stw	r16,0(sp)
   2289c:	008000f4 	movhi	r2,3
   228a0:	2021883a 	mov	r16,r4
   228a4:	2809883a 	mov	r4,r5
   228a8:	dfc00115 	stw	ra,4(sp)
   228ac:	10257815 	stw	zero,-27168(r2)
   228b0:	002425c0 	call	2425c <sbrk>
   228b4:	10ffffd8 	cmpnei	r3,r2,-1
   228b8:	18000426 	beq	r3,zero,228cc <_sbrk_r+0x38>
   228bc:	dfc00117 	ldw	ra,4(sp)
   228c0:	dc000017 	ldw	r16,0(sp)
   228c4:	dec00204 	addi	sp,sp,8
   228c8:	f800283a 	ret
   228cc:	00c000f4 	movhi	r3,3
   228d0:	18e57817 	ldw	r3,-27168(r3)
   228d4:	183ff926 	beq	r3,zero,228bc <_sbrk_r+0x28>
   228d8:	80c00015 	stw	r3,0(r16)
   228dc:	dfc00117 	ldw	ra,4(sp)
   228e0:	dc000017 	ldw	r16,0(sp)
   228e4:	dec00204 	addi	sp,sp,8
   228e8:	f800283a 	ret

000228ec <__sread>:
   228ec:	defffe04 	addi	sp,sp,-8
   228f0:	dc000015 	stw	r16,0(sp)
   228f4:	2821883a 	mov	r16,r5
   228f8:	2940038f 	ldh	r5,14(r5)
   228fc:	dfc00115 	stw	ra,4(sp)
   22900:	00237bc0 	call	237bc <_read_r>
   22904:	10000716 	blt	r2,zero,22924 <__sread+0x38>
   22908:	80c01417 	ldw	r3,80(r16)
   2290c:	1887883a 	add	r3,r3,r2
   22910:	80c01415 	stw	r3,80(r16)
   22914:	dfc00117 	ldw	ra,4(sp)
   22918:	dc000017 	ldw	r16,0(sp)
   2291c:	dec00204 	addi	sp,sp,8
   22920:	f800283a 	ret
   22924:	80c0030b 	ldhu	r3,12(r16)
   22928:	18fbffcc 	andi	r3,r3,61439
   2292c:	80c0030d 	sth	r3,12(r16)
   22930:	dfc00117 	ldw	ra,4(sp)
   22934:	dc000017 	ldw	r16,0(sp)
   22938:	dec00204 	addi	sp,sp,8
   2293c:	f800283a 	ret

00022940 <__seofread>:
   22940:	0005883a 	mov	r2,zero
   22944:	f800283a 	ret

00022948 <__swrite>:
   22948:	2880030b 	ldhu	r2,12(r5)
   2294c:	defffb04 	addi	sp,sp,-20
   22950:	dcc00315 	stw	r19,12(sp)
   22954:	dc800215 	stw	r18,8(sp)
   22958:	dc400115 	stw	r17,4(sp)
   2295c:	dc000015 	stw	r16,0(sp)
   22960:	dfc00415 	stw	ra,16(sp)
   22964:	10c0400c 	andi	r3,r2,256
   22968:	2821883a 	mov	r16,r5
   2296c:	2023883a 	mov	r17,r4
   22970:	3025883a 	mov	r18,r6
   22974:	3827883a 	mov	r19,r7
   22978:	18000d1e 	bne	r3,zero,229b0 <__swrite+0x68>
   2297c:	8140038f 	ldh	r5,14(r16)
   22980:	10bbffcc 	andi	r2,r2,61439
   22984:	980f883a 	mov	r7,r19
   22988:	900d883a 	mov	r6,r18
   2298c:	8809883a 	mov	r4,r17
   22990:	8080030d 	sth	r2,12(r16)
   22994:	dfc00417 	ldw	ra,16(sp)
   22998:	dcc00317 	ldw	r19,12(sp)
   2299c:	dc800217 	ldw	r18,8(sp)
   229a0:	dc400117 	ldw	r17,4(sp)
   229a4:	dc000017 	ldw	r16,0(sp)
   229a8:	dec00504 	addi	sp,sp,20
   229ac:	0022a2c1 	jmpi	22a2c <_write_r>
   229b0:	2940038f 	ldh	r5,14(r5)
   229b4:	01c00084 	movi	r7,2
   229b8:	000d883a 	mov	r6,zero
   229bc:	00235100 	call	23510 <_lseek_r>
   229c0:	8080030b 	ldhu	r2,12(r16)
   229c4:	003fed06 	br	2297c <__swrite+0x34>

000229c8 <__sseek>:
   229c8:	defffe04 	addi	sp,sp,-8
   229cc:	dc000015 	stw	r16,0(sp)
   229d0:	2821883a 	mov	r16,r5
   229d4:	2940038f 	ldh	r5,14(r5)
   229d8:	dfc00115 	stw	ra,4(sp)
   229dc:	00235100 	call	23510 <_lseek_r>
   229e0:	10ffffd8 	cmpnei	r3,r2,-1
   229e4:	18000826 	beq	r3,zero,22a08 <__sseek+0x40>
   229e8:	80c0030b 	ldhu	r3,12(r16)
   229ec:	80801415 	stw	r2,80(r16)
   229f0:	18c40014 	ori	r3,r3,4096
   229f4:	80c0030d 	sth	r3,12(r16)
   229f8:	dfc00117 	ldw	ra,4(sp)
   229fc:	dc000017 	ldw	r16,0(sp)
   22a00:	dec00204 	addi	sp,sp,8
   22a04:	f800283a 	ret
   22a08:	80c0030b 	ldhu	r3,12(r16)
   22a0c:	18fbffcc 	andi	r3,r3,61439
   22a10:	80c0030d 	sth	r3,12(r16)
   22a14:	dfc00117 	ldw	ra,4(sp)
   22a18:	dc000017 	ldw	r16,0(sp)
   22a1c:	dec00204 	addi	sp,sp,8
   22a20:	f800283a 	ret

00022a24 <__sclose>:
   22a24:	2940038f 	ldh	r5,14(r5)
   22a28:	0022bf41 	jmpi	22bf4 <_close_r>

00022a2c <_write_r>:
   22a2c:	2807883a 	mov	r3,r5
   22a30:	defffe04 	addi	sp,sp,-8
   22a34:	dc000015 	stw	r16,0(sp)
   22a38:	300b883a 	mov	r5,r6
   22a3c:	008000f4 	movhi	r2,3
   22a40:	380d883a 	mov	r6,r7
   22a44:	2021883a 	mov	r16,r4
   22a48:	1809883a 	mov	r4,r3
   22a4c:	dfc00115 	stw	ra,4(sp)
   22a50:	10257815 	stw	zero,-27168(r2)
   22a54:	00243500 	call	24350 <write>
   22a58:	10ffffd8 	cmpnei	r3,r2,-1
   22a5c:	18000426 	beq	r3,zero,22a70 <_write_r+0x44>
   22a60:	dfc00117 	ldw	ra,4(sp)
   22a64:	dc000017 	ldw	r16,0(sp)
   22a68:	dec00204 	addi	sp,sp,8
   22a6c:	f800283a 	ret
   22a70:	00c000f4 	movhi	r3,3
   22a74:	18e57817 	ldw	r3,-27168(r3)
   22a78:	183ff926 	beq	r3,zero,22a60 <_write_r+0x34>
   22a7c:	80c00015 	stw	r3,0(r16)
   22a80:	dfc00117 	ldw	ra,4(sp)
   22a84:	dc000017 	ldw	r16,0(sp)
   22a88:	dec00204 	addi	sp,sp,8
   22a8c:	f800283a 	ret

00022a90 <__swsetup_r>:
   22a90:	008000b4 	movhi	r2,2
   22a94:	109ecd17 	ldw	r2,31540(r2)
   22a98:	defffd04 	addi	sp,sp,-12
   22a9c:	dc400115 	stw	r17,4(sp)
   22aa0:	dc000015 	stw	r16,0(sp)
   22aa4:	dfc00215 	stw	ra,8(sp)
   22aa8:	2023883a 	mov	r17,r4
   22aac:	2821883a 	mov	r16,r5
   22ab0:	10000226 	beq	r2,zero,22abc <__swsetup_r+0x2c>
   22ab4:	10c00e17 	ldw	r3,56(r2)
   22ab8:	18001f26 	beq	r3,zero,22b38 <__swsetup_r+0xa8>
   22abc:	8180030b 	ldhu	r6,12(r16)
   22ac0:	30c0020c 	andi	r3,r6,8
   22ac4:	3005883a 	mov	r2,r6
   22ac8:	18002126 	beq	r3,zero,22b50 <__swsetup_r+0xc0>
   22acc:	80c00417 	ldw	r3,16(r16)
   22ad0:	18002826 	beq	r3,zero,22b74 <__swsetup_r+0xe4>
   22ad4:	1100004c 	andi	r4,r2,1
   22ad8:	20000b1e 	bne	r4,zero,22b08 <__swsetup_r+0x78>
   22adc:	1100008c 	andi	r4,r2,2
   22ae0:	20002e1e 	bne	r4,zero,22b9c <__swsetup_r+0x10c>
   22ae4:	81000517 	ldw	r4,20(r16)
   22ae8:	81000215 	stw	r4,8(r16)
   22aec:	18000b26 	beq	r3,zero,22b1c <__swsetup_r+0x8c>
   22af0:	0005883a 	mov	r2,zero
   22af4:	dfc00217 	ldw	ra,8(sp)
   22af8:	dc400117 	ldw	r17,4(sp)
   22afc:	dc000017 	ldw	r16,0(sp)
   22b00:	dec00304 	addi	sp,sp,12
   22b04:	f800283a 	ret
   22b08:	81000517 	ldw	r4,20(r16)
   22b0c:	80000215 	stw	zero,8(r16)
   22b10:	0109c83a 	sub	r4,zero,r4
   22b14:	81000615 	stw	r4,24(r16)
   22b18:	183ff51e 	bne	r3,zero,22af0 <__swsetup_r+0x60>
   22b1c:	10c0200c 	andi	r3,r2,128
   22b20:	0005883a 	mov	r2,zero
   22b24:	183ff326 	beq	r3,zero,22af4 <__swsetup_r+0x64>
   22b28:	31801014 	ori	r6,r6,64
   22b2c:	8180030d 	sth	r6,12(r16)
   22b30:	00bfffc4 	movi	r2,-1
   22b34:	003fef06 	br	22af4 <__swsetup_r+0x64>
   22b38:	1009883a 	mov	r4,r2
   22b3c:	00211700 	call	21170 <__sinit>
   22b40:	8180030b 	ldhu	r6,12(r16)
   22b44:	30c0020c 	andi	r3,r6,8
   22b48:	3005883a 	mov	r2,r6
   22b4c:	183fdf1e 	bne	r3,zero,22acc <__swsetup_r+0x3c>
   22b50:	3080040c 	andi	r2,r6,16
   22b54:	10002126 	beq	r2,zero,22bdc <__swsetup_r+0x14c>
   22b58:	3080010c 	andi	r2,r6,4
   22b5c:	1000111e 	bne	r2,zero,22ba4 <__swsetup_r+0x114>
   22b60:	80c00417 	ldw	r3,16(r16)
   22b64:	30800214 	ori	r2,r6,8
   22b68:	8080030d 	sth	r2,12(r16)
   22b6c:	100d883a 	mov	r6,r2
   22b70:	183fd81e 	bne	r3,zero,22ad4 <__swsetup_r+0x44>
   22b74:	1100a00c 	andi	r4,r2,640
   22b78:	21008020 	cmpeqi	r4,r4,512
   22b7c:	203fd51e 	bne	r4,zero,22ad4 <__swsetup_r+0x44>
   22b80:	800b883a 	mov	r5,r16
   22b84:	8809883a 	mov	r4,r17
   22b88:	00235740 	call	23574 <__smakebuf_r>
   22b8c:	8180030b 	ldhu	r6,12(r16)
   22b90:	80c00417 	ldw	r3,16(r16)
   22b94:	3005883a 	mov	r2,r6
   22b98:	003fce06 	br	22ad4 <__swsetup_r+0x44>
   22b9c:	0009883a 	mov	r4,zero
   22ba0:	003fd106 	br	22ae8 <__swsetup_r+0x58>
   22ba4:	81400c17 	ldw	r5,48(r16)
   22ba8:	28000626 	beq	r5,zero,22bc4 <__swsetup_r+0x134>
   22bac:	80801004 	addi	r2,r16,64
   22bb0:	28800326 	beq	r5,r2,22bc0 <__swsetup_r+0x130>
   22bb4:	8809883a 	mov	r4,r17
   22bb8:	00232140 	call	23214 <_free_r>
   22bbc:	8180030b 	ldhu	r6,12(r16)
   22bc0:	80000c15 	stw	zero,48(r16)
   22bc4:	80c00417 	ldw	r3,16(r16)
   22bc8:	00bff6c4 	movi	r2,-37
   22bcc:	118c703a 	and	r6,r2,r6
   22bd0:	80000115 	stw	zero,4(r16)
   22bd4:	80c00015 	stw	r3,0(r16)
   22bd8:	003fe206 	br	22b64 <__swsetup_r+0xd4>
   22bdc:	00800244 	movi	r2,9
   22be0:	88800015 	stw	r2,0(r17)
   22be4:	31801014 	ori	r6,r6,64
   22be8:	8180030d 	sth	r6,12(r16)
   22bec:	00bfffc4 	movi	r2,-1
   22bf0:	003fc006 	br	22af4 <__swsetup_r+0x64>

00022bf4 <_close_r>:
   22bf4:	defffe04 	addi	sp,sp,-8
   22bf8:	dc000015 	stw	r16,0(sp)
   22bfc:	008000f4 	movhi	r2,3
   22c00:	2021883a 	mov	r16,r4
   22c04:	2809883a 	mov	r4,r5
   22c08:	dfc00115 	stw	ra,4(sp)
   22c0c:	10257815 	stw	zero,-27168(r2)
   22c10:	0023af00 	call	23af0 <close>
   22c14:	10ffffd8 	cmpnei	r3,r2,-1
   22c18:	18000426 	beq	r3,zero,22c2c <_close_r+0x38>
   22c1c:	dfc00117 	ldw	ra,4(sp)
   22c20:	dc000017 	ldw	r16,0(sp)
   22c24:	dec00204 	addi	sp,sp,8
   22c28:	f800283a 	ret
   22c2c:	00c000f4 	movhi	r3,3
   22c30:	18e57817 	ldw	r3,-27168(r3)
   22c34:	183ff926 	beq	r3,zero,22c1c <_close_r+0x28>
   22c38:	80c00015 	stw	r3,0(r16)
   22c3c:	dfc00117 	ldw	ra,4(sp)
   22c40:	dc000017 	ldw	r16,0(sp)
   22c44:	dec00204 	addi	sp,sp,8
   22c48:	f800283a 	ret

00022c4c <_fclose_r.part.0>:
   22c4c:	defffc04 	addi	sp,sp,-16
   22c50:	dc800215 	stw	r18,8(sp)
   22c54:	dc400115 	stw	r17,4(sp)
   22c58:	dc000015 	stw	r16,0(sp)
   22c5c:	dfc00315 	stw	ra,12(sp)
   22c60:	2821883a 	mov	r16,r5
   22c64:	2023883a 	mov	r17,r4
   22c68:	0022dec0 	call	22dec <__sflush_r>
   22c6c:	80c00b17 	ldw	r3,44(r16)
   22c70:	1025883a 	mov	r18,r2
   22c74:	18000426 	beq	r3,zero,22c88 <_fclose_r.part.0+0x3c>
   22c78:	81400717 	ldw	r5,28(r16)
   22c7c:	8809883a 	mov	r4,r17
   22c80:	183ee83a 	callr	r3
   22c84:	10001916 	blt	r2,zero,22cec <_fclose_r.part.0+0xa0>
   22c88:	8080030b 	ldhu	r2,12(r16)
   22c8c:	1080200c 	andi	r2,r2,128
   22c90:	10001a1e 	bne	r2,zero,22cfc <_fclose_r.part.0+0xb0>
   22c94:	81400c17 	ldw	r5,48(r16)
   22c98:	28000526 	beq	r5,zero,22cb0 <_fclose_r.part.0+0x64>
   22c9c:	80801004 	addi	r2,r16,64
   22ca0:	28800226 	beq	r5,r2,22cac <_fclose_r.part.0+0x60>
   22ca4:	8809883a 	mov	r4,r17
   22ca8:	00232140 	call	23214 <_free_r>
   22cac:	80000c15 	stw	zero,48(r16)
   22cb0:	81401117 	ldw	r5,68(r16)
   22cb4:	28000326 	beq	r5,zero,22cc4 <_fclose_r.part.0+0x78>
   22cb8:	8809883a 	mov	r4,r17
   22cbc:	00232140 	call	23214 <_free_r>
   22cc0:	80001115 	stw	zero,68(r16)
   22cc4:	00211800 	call	21180 <__sfp_lock_acquire>
   22cc8:	8000030d 	sth	zero,12(r16)
   22ccc:	00211840 	call	21184 <__sfp_lock_release>
   22cd0:	9005883a 	mov	r2,r18
   22cd4:	dfc00317 	ldw	ra,12(sp)
   22cd8:	dc800217 	ldw	r18,8(sp)
   22cdc:	dc400117 	ldw	r17,4(sp)
   22ce0:	dc000017 	ldw	r16,0(sp)
   22ce4:	dec00404 	addi	sp,sp,16
   22ce8:	f800283a 	ret
   22cec:	8080030b 	ldhu	r2,12(r16)
   22cf0:	04bfffc4 	movi	r18,-1
   22cf4:	1080200c 	andi	r2,r2,128
   22cf8:	103fe626 	beq	r2,zero,22c94 <_fclose_r.part.0+0x48>
   22cfc:	81400417 	ldw	r5,16(r16)
   22d00:	8809883a 	mov	r4,r17
   22d04:	00232140 	call	23214 <_free_r>
   22d08:	003fe206 	br	22c94 <_fclose_r.part.0+0x48>

00022d0c <_fclose_r>:
   22d0c:	28001926 	beq	r5,zero,22d74 <_fclose_r+0x68>
   22d10:	defffd04 	addi	sp,sp,-12
   22d14:	dc000115 	stw	r16,4(sp)
   22d18:	dfc00215 	stw	ra,8(sp)
   22d1c:	2021883a 	mov	r16,r4
   22d20:	20000226 	beq	r4,zero,22d2c <_fclose_r+0x20>
   22d24:	20800e17 	ldw	r2,56(r4)
   22d28:	10000c26 	beq	r2,zero,22d5c <_fclose_r+0x50>
   22d2c:	2880030f 	ldh	r2,12(r5)
   22d30:	1000051e 	bne	r2,zero,22d48 <_fclose_r+0x3c>
   22d34:	0005883a 	mov	r2,zero
   22d38:	dfc00217 	ldw	ra,8(sp)
   22d3c:	dc000117 	ldw	r16,4(sp)
   22d40:	dec00304 	addi	sp,sp,12
   22d44:	f800283a 	ret
   22d48:	8009883a 	mov	r4,r16
   22d4c:	dfc00217 	ldw	ra,8(sp)
   22d50:	dc000117 	ldw	r16,4(sp)
   22d54:	dec00304 	addi	sp,sp,12
   22d58:	0022c4c1 	jmpi	22c4c <_fclose_r.part.0>
   22d5c:	d9400015 	stw	r5,0(sp)
   22d60:	00211700 	call	21170 <__sinit>
   22d64:	d9400017 	ldw	r5,0(sp)
   22d68:	2880030f 	ldh	r2,12(r5)
   22d6c:	103ff126 	beq	r2,zero,22d34 <_fclose_r+0x28>
   22d70:	003ff506 	br	22d48 <_fclose_r+0x3c>
   22d74:	0005883a 	mov	r2,zero
   22d78:	f800283a 	ret

00022d7c <fclose>:
   22d7c:	20000826 	beq	r4,zero,22da0 <fclose+0x24>
   22d80:	008000b4 	movhi	r2,2
   22d84:	200b883a 	mov	r5,r4
   22d88:	111ecd17 	ldw	r4,31540(r2)
   22d8c:	20000226 	beq	r4,zero,22d98 <fclose+0x1c>
   22d90:	20800e17 	ldw	r2,56(r4)
   22d94:	10000526 	beq	r2,zero,22dac <fclose+0x30>
   22d98:	2880030f 	ldh	r2,12(r5)
   22d9c:	1000021e 	bne	r2,zero,22da8 <fclose+0x2c>
   22da0:	0005883a 	mov	r2,zero
   22da4:	f800283a 	ret
   22da8:	0022c4c1 	jmpi	22c4c <_fclose_r.part.0>
   22dac:	defffd04 	addi	sp,sp,-12
   22db0:	d9400115 	stw	r5,4(sp)
   22db4:	d9000015 	stw	r4,0(sp)
   22db8:	dfc00215 	stw	ra,8(sp)
   22dbc:	00211700 	call	21170 <__sinit>
   22dc0:	d9400117 	ldw	r5,4(sp)
   22dc4:	d9000017 	ldw	r4,0(sp)
   22dc8:	2880030f 	ldh	r2,12(r5)
   22dcc:	10000326 	beq	r2,zero,22ddc <fclose+0x60>
   22dd0:	dfc00217 	ldw	ra,8(sp)
   22dd4:	dec00304 	addi	sp,sp,12
   22dd8:	0022c4c1 	jmpi	22c4c <_fclose_r.part.0>
   22ddc:	0005883a 	mov	r2,zero
   22de0:	dfc00217 	ldw	ra,8(sp)
   22de4:	dec00304 	addi	sp,sp,12
   22de8:	f800283a 	ret

00022dec <__sflush_r>:
   22dec:	2880030b 	ldhu	r2,12(r5)
   22df0:	defffb04 	addi	sp,sp,-20
   22df4:	dcc00315 	stw	r19,12(sp)
   22df8:	dc000015 	stw	r16,0(sp)
   22dfc:	dfc00415 	stw	ra,16(sp)
   22e00:	dc800215 	stw	r18,8(sp)
   22e04:	dc400115 	stw	r17,4(sp)
   22e08:	10c0020c 	andi	r3,r2,8
   22e0c:	2821883a 	mov	r16,r5
   22e10:	2027883a 	mov	r19,r4
   22e14:	18003f1e 	bne	r3,zero,22f14 <__sflush_r+0x128>
   22e18:	28c00117 	ldw	r3,4(r5)
   22e1c:	10820014 	ori	r2,r2,2048
   22e20:	2880030d 	sth	r2,12(r5)
   22e24:	00c0550e 	bge	zero,r3,22f7c <__sflush_r+0x190>
   22e28:	82000a17 	ldw	r8,40(r16)
   22e2c:	40003126 	beq	r8,zero,22ef4 <__sflush_r+0x108>
   22e30:	9c400017 	ldw	r17,0(r19)
   22e34:	1104000c 	andi	r4,r2,4096
   22e38:	98000015 	stw	zero,0(r19)
   22e3c:	1007883a 	mov	r3,r2
   22e40:	2000531e 	bne	r4,zero,22f90 <__sflush_r+0x1a4>
   22e44:	81400717 	ldw	r5,28(r16)
   22e48:	01c00044 	movi	r7,1
   22e4c:	000d883a 	mov	r6,zero
   22e50:	9809883a 	mov	r4,r19
   22e54:	403ee83a 	callr	r8
   22e58:	10ffffd8 	cmpnei	r3,r2,-1
   22e5c:	18005826 	beq	r3,zero,22fc0 <__sflush_r+0x1d4>
   22e60:	80c0030b 	ldhu	r3,12(r16)
   22e64:	82000a17 	ldw	r8,40(r16)
   22e68:	18c0010c 	andi	r3,r3,4
   22e6c:	18000626 	beq	r3,zero,22e88 <__sflush_r+0x9c>
   22e70:	81000117 	ldw	r4,4(r16)
   22e74:	80c00c17 	ldw	r3,48(r16)
   22e78:	1105c83a 	sub	r2,r2,r4
   22e7c:	18000226 	beq	r3,zero,22e88 <__sflush_r+0x9c>
   22e80:	80c00f17 	ldw	r3,60(r16)
   22e84:	10c5c83a 	sub	r2,r2,r3
   22e88:	81400717 	ldw	r5,28(r16)
   22e8c:	100d883a 	mov	r6,r2
   22e90:	000f883a 	mov	r7,zero
   22e94:	9809883a 	mov	r4,r19
   22e98:	403ee83a 	callr	r8
   22e9c:	10ffffd8 	cmpnei	r3,r2,-1
   22ea0:	18003d1e 	bne	r3,zero,22f98 <__sflush_r+0x1ac>
   22ea4:	99000017 	ldw	r4,0(r19)
   22ea8:	80c0030b 	ldhu	r3,12(r16)
   22eac:	20004e26 	beq	r4,zero,22fe8 <__sflush_r+0x1fc>
   22eb0:	21400760 	cmpeqi	r5,r4,29
   22eb4:	2800021e 	bne	r5,zero,22ec0 <__sflush_r+0xd4>
   22eb8:	210005a0 	cmpeqi	r4,r4,22
   22ebc:	20002c26 	beq	r4,zero,22f70 <__sflush_r+0x184>
   22ec0:	80800417 	ldw	r2,16(r16)
   22ec4:	18fdffcc 	andi	r3,r3,63487
   22ec8:	80c0030d 	sth	r3,12(r16)
   22ecc:	80000115 	stw	zero,4(r16)
   22ed0:	80800015 	stw	r2,0(r16)
   22ed4:	81400c17 	ldw	r5,48(r16)
   22ed8:	9c400015 	stw	r17,0(r19)
   22edc:	28000526 	beq	r5,zero,22ef4 <__sflush_r+0x108>
   22ee0:	80801004 	addi	r2,r16,64
   22ee4:	28800226 	beq	r5,r2,22ef0 <__sflush_r+0x104>
   22ee8:	9809883a 	mov	r4,r19
   22eec:	00232140 	call	23214 <_free_r>
   22ef0:	80000c15 	stw	zero,48(r16)
   22ef4:	0005883a 	mov	r2,zero
   22ef8:	dfc00417 	ldw	ra,16(sp)
   22efc:	dcc00317 	ldw	r19,12(sp)
   22f00:	dc800217 	ldw	r18,8(sp)
   22f04:	dc400117 	ldw	r17,4(sp)
   22f08:	dc000017 	ldw	r16,0(sp)
   22f0c:	dec00504 	addi	sp,sp,20
   22f10:	f800283a 	ret
   22f14:	2c800417 	ldw	r18,16(r5)
   22f18:	903ff626 	beq	r18,zero,22ef4 <__sflush_r+0x108>
   22f1c:	2c400017 	ldw	r17,0(r5)
   22f20:	108000cc 	andi	r2,r2,3
   22f24:	2c800015 	stw	r18,0(r5)
   22f28:	8ca3c83a 	sub	r17,r17,r18
   22f2c:	1000161e 	bne	r2,zero,22f88 <__sflush_r+0x19c>
   22f30:	28800517 	ldw	r2,20(r5)
   22f34:	80800215 	stw	r2,8(r16)
   22f38:	04400316 	blt	zero,r17,22f48 <__sflush_r+0x15c>
   22f3c:	003fed06 	br	22ef4 <__sflush_r+0x108>
   22f40:	90a5883a 	add	r18,r18,r2
   22f44:	047feb0e 	bge	zero,r17,22ef4 <__sflush_r+0x108>
   22f48:	80800917 	ldw	r2,36(r16)
   22f4c:	81400717 	ldw	r5,28(r16)
   22f50:	880f883a 	mov	r7,r17
   22f54:	900d883a 	mov	r6,r18
   22f58:	9809883a 	mov	r4,r19
   22f5c:	103ee83a 	callr	r2
   22f60:	88a3c83a 	sub	r17,r17,r2
   22f64:	00bff616 	blt	zero,r2,22f40 <__sflush_r+0x154>
   22f68:	80c0030b 	ldhu	r3,12(r16)
   22f6c:	00bfffc4 	movi	r2,-1
   22f70:	18c01014 	ori	r3,r3,64
   22f74:	80c0030d 	sth	r3,12(r16)
   22f78:	003fdf06 	br	22ef8 <__sflush_r+0x10c>
   22f7c:	28c00f17 	ldw	r3,60(r5)
   22f80:	00ffa916 	blt	zero,r3,22e28 <__sflush_r+0x3c>
   22f84:	003fdb06 	br	22ef4 <__sflush_r+0x108>
   22f88:	0005883a 	mov	r2,zero
   22f8c:	003fe906 	br	22f34 <__sflush_r+0x148>
   22f90:	80801417 	ldw	r2,80(r16)
   22f94:	003fb406 	br	22e68 <__sflush_r+0x7c>
   22f98:	80c0030b 	ldhu	r3,12(r16)
   22f9c:	81000417 	ldw	r4,16(r16)
   22fa0:	80000115 	stw	zero,4(r16)
   22fa4:	197dffcc 	andi	r5,r3,63487
   22fa8:	8140030d 	sth	r5,12(r16)
   22fac:	81000015 	stw	r4,0(r16)
   22fb0:	18c4000c 	andi	r3,r3,4096
   22fb4:	183fc726 	beq	r3,zero,22ed4 <__sflush_r+0xe8>
   22fb8:	80801415 	stw	r2,80(r16)
   22fbc:	003fc506 	br	22ed4 <__sflush_r+0xe8>
   22fc0:	98c00017 	ldw	r3,0(r19)
   22fc4:	183fa626 	beq	r3,zero,22e60 <__sflush_r+0x74>
   22fc8:	19000760 	cmpeqi	r4,r3,29
   22fcc:	20000e1e 	bne	r4,zero,23008 <__sflush_r+0x21c>
   22fd0:	18c00598 	cmpnei	r3,r3,22
   22fd4:	18000c26 	beq	r3,zero,23008 <__sflush_r+0x21c>
   22fd8:	80c0030b 	ldhu	r3,12(r16)
   22fdc:	18c01014 	ori	r3,r3,64
   22fe0:	80c0030d 	sth	r3,12(r16)
   22fe4:	003fc406 	br	22ef8 <__sflush_r+0x10c>
   22fe8:	81000417 	ldw	r4,16(r16)
   22fec:	197dffcc 	andi	r5,r3,63487
   22ff0:	8140030d 	sth	r5,12(r16)
   22ff4:	80000115 	stw	zero,4(r16)
   22ff8:	81000015 	stw	r4,0(r16)
   22ffc:	18c4000c 	andi	r3,r3,4096
   23000:	183fb426 	beq	r3,zero,22ed4 <__sflush_r+0xe8>
   23004:	003fec06 	br	22fb8 <__sflush_r+0x1cc>
   23008:	9c400015 	stw	r17,0(r19)
   2300c:	0005883a 	mov	r2,zero
   23010:	003fb906 	br	22ef8 <__sflush_r+0x10c>

00023014 <_fflush_r>:
   23014:	defffd04 	addi	sp,sp,-12
   23018:	dc000115 	stw	r16,4(sp)
   2301c:	dfc00215 	stw	ra,8(sp)
   23020:	2021883a 	mov	r16,r4
   23024:	20000226 	beq	r4,zero,23030 <_fflush_r+0x1c>
   23028:	20800e17 	ldw	r2,56(r4)
   2302c:	10000726 	beq	r2,zero,2304c <_fflush_r+0x38>
   23030:	2880030f 	ldh	r2,12(r5)
   23034:	10000a1e 	bne	r2,zero,23060 <_fflush_r+0x4c>
   23038:	0005883a 	mov	r2,zero
   2303c:	dfc00217 	ldw	ra,8(sp)
   23040:	dc000117 	ldw	r16,4(sp)
   23044:	dec00304 	addi	sp,sp,12
   23048:	f800283a 	ret
   2304c:	d9400015 	stw	r5,0(sp)
   23050:	00211700 	call	21170 <__sinit>
   23054:	d9400017 	ldw	r5,0(sp)
   23058:	2880030f 	ldh	r2,12(r5)
   2305c:	103ff626 	beq	r2,zero,23038 <_fflush_r+0x24>
   23060:	8009883a 	mov	r4,r16
   23064:	dfc00217 	ldw	ra,8(sp)
   23068:	dc000117 	ldw	r16,4(sp)
   2306c:	dec00304 	addi	sp,sp,12
   23070:	0022dec1 	jmpi	22dec <__sflush_r>

00023074 <fflush>:
   23074:	20001726 	beq	r4,zero,230d4 <fflush+0x60>
   23078:	008000b4 	movhi	r2,2
   2307c:	200b883a 	mov	r5,r4
   23080:	111ecd17 	ldw	r4,31540(r2)
   23084:	20000226 	beq	r4,zero,23090 <fflush+0x1c>
   23088:	20800e17 	ldw	r2,56(r4)
   2308c:	10000526 	beq	r2,zero,230a4 <fflush+0x30>
   23090:	2880030f 	ldh	r2,12(r5)
   23094:	1000021e 	bne	r2,zero,230a0 <fflush+0x2c>
   23098:	0005883a 	mov	r2,zero
   2309c:	f800283a 	ret
   230a0:	0022dec1 	jmpi	22dec <__sflush_r>
   230a4:	defffd04 	addi	sp,sp,-12
   230a8:	d9400115 	stw	r5,4(sp)
   230ac:	d9000015 	stw	r4,0(sp)
   230b0:	dfc00215 	stw	ra,8(sp)
   230b4:	00211700 	call	21170 <__sinit>
   230b8:	d9400117 	ldw	r5,4(sp)
   230bc:	d9000017 	ldw	r4,0(sp)
   230c0:	2880030f 	ldh	r2,12(r5)
   230c4:	10000826 	beq	r2,zero,230e8 <fflush+0x74>
   230c8:	dfc00217 	ldw	ra,8(sp)
   230cc:	dec00304 	addi	sp,sp,12
   230d0:	0022dec1 	jmpi	22dec <__sflush_r>
   230d4:	008000b4 	movhi	r2,2
   230d8:	111ecc17 	ldw	r4,31536(r2)
   230dc:	014000b4 	movhi	r5,2
   230e0:	294c0504 	addi	r5,r5,12308
   230e4:	00216e41 	jmpi	216e4 <_fwalk_reent>
   230e8:	0005883a 	mov	r2,zero
   230ec:	dfc00217 	ldw	ra,8(sp)
   230f0:	dec00304 	addi	sp,sp,12
   230f4:	f800283a 	ret

000230f8 <_malloc_trim_r>:
   230f8:	defffb04 	addi	sp,sp,-20
   230fc:	dcc00315 	stw	r19,12(sp)
   23100:	04c000b4 	movhi	r19,2
   23104:	dc800215 	stw	r18,8(sp)
   23108:	dc400115 	stw	r17,4(sp)
   2310c:	dc000015 	stw	r16,0(sp)
   23110:	dfc00415 	stw	ra,16(sp)
   23114:	2821883a 	mov	r16,r5
   23118:	9cd94804 	addi	r19,r19,25888
   2311c:	2025883a 	mov	r18,r4
   23120:	00240600 	call	24060 <__malloc_lock>
   23124:	98800217 	ldw	r2,8(r19)
   23128:	14400117 	ldw	r17,4(r2)
   2312c:	00bfff04 	movi	r2,-4
   23130:	88a2703a 	and	r17,r17,r2
   23134:	8c21c83a 	sub	r16,r17,r16
   23138:	8403fbc4 	addi	r16,r16,4079
   2313c:	8020d33a 	srli	r16,r16,12
   23140:	843fffc4 	addi	r16,r16,-1
   23144:	8020933a 	slli	r16,r16,12
   23148:	80840008 	cmpgei	r2,r16,4096
   2314c:	10000626 	beq	r2,zero,23168 <_malloc_trim_r+0x70>
   23150:	000b883a 	mov	r5,zero
   23154:	9009883a 	mov	r4,r18
   23158:	00228940 	call	22894 <_sbrk_r>
   2315c:	98c00217 	ldw	r3,8(r19)
   23160:	1c47883a 	add	r3,r3,r17
   23164:	10c00a26 	beq	r2,r3,23190 <_malloc_trim_r+0x98>
   23168:	9009883a 	mov	r4,r18
   2316c:	00240840 	call	24084 <__malloc_unlock>
   23170:	0005883a 	mov	r2,zero
   23174:	dfc00417 	ldw	ra,16(sp)
   23178:	dcc00317 	ldw	r19,12(sp)
   2317c:	dc800217 	ldw	r18,8(sp)
   23180:	dc400117 	ldw	r17,4(sp)
   23184:	dc000017 	ldw	r16,0(sp)
   23188:	dec00504 	addi	sp,sp,20
   2318c:	f800283a 	ret
   23190:	040bc83a 	sub	r5,zero,r16
   23194:	9009883a 	mov	r4,r18
   23198:	00228940 	call	22894 <_sbrk_r>
   2319c:	10bfffd8 	cmpnei	r2,r2,-1
   231a0:	10000d26 	beq	r2,zero,231d8 <_malloc_trim_r+0xe0>
   231a4:	008000f4 	movhi	r2,3
   231a8:	10a58117 	ldw	r2,-27132(r2)
   231ac:	98c00217 	ldw	r3,8(r19)
   231b0:	8c23c83a 	sub	r17,r17,r16
   231b4:	8c400054 	ori	r17,r17,1
   231b8:	1421c83a 	sub	r16,r2,r16
   231bc:	1c400115 	stw	r17,4(r3)
   231c0:	008000f4 	movhi	r2,3
   231c4:	9009883a 	mov	r4,r18
   231c8:	14258115 	stw	r16,-27132(r2)
   231cc:	00240840 	call	24084 <__malloc_unlock>
   231d0:	00800044 	movi	r2,1
   231d4:	003fe706 	br	23174 <_malloc_trim_r+0x7c>
   231d8:	000b883a 	mov	r5,zero
   231dc:	9009883a 	mov	r4,r18
   231e0:	00228940 	call	22894 <_sbrk_r>
   231e4:	99000217 	ldw	r4,8(r19)
   231e8:	1107c83a 	sub	r3,r2,r4
   231ec:	19400410 	cmplti	r5,r3,16
   231f0:	283fdd1e 	bne	r5,zero,23168 <_malloc_trim_r+0x70>
   231f4:	014000b4 	movhi	r5,2
   231f8:	295ece17 	ldw	r5,31544(r5)
   231fc:	18c00054 	ori	r3,r3,1
   23200:	20c00115 	stw	r3,4(r4)
   23204:	1145c83a 	sub	r2,r2,r5
   23208:	014000f4 	movhi	r5,3
   2320c:	28a58115 	stw	r2,-27132(r5)
   23210:	003fd506 	br	23168 <_malloc_trim_r+0x70>

00023214 <_free_r>:
   23214:	28004f26 	beq	r5,zero,23354 <_free_r+0x140>
   23218:	defffd04 	addi	sp,sp,-12
   2321c:	dc400115 	stw	r17,4(sp)
   23220:	dc000015 	stw	r16,0(sp)
   23224:	2023883a 	mov	r17,r4
   23228:	2821883a 	mov	r16,r5
   2322c:	dfc00215 	stw	ra,8(sp)
   23230:	00240600 	call	24060 <__malloc_lock>
   23234:	81ffff17 	ldw	r7,-4(r16)
   23238:	00bfff84 	movi	r2,-2
   2323c:	80fffe04 	addi	r3,r16,-8
   23240:	3884703a 	and	r2,r7,r2
   23244:	010000b4 	movhi	r4,2
   23248:	188d883a 	add	r6,r3,r2
   2324c:	21194804 	addi	r4,r4,25888
   23250:	31400117 	ldw	r5,4(r6)
   23254:	22000217 	ldw	r8,8(r4)
   23258:	027fff04 	movi	r9,-4
   2325c:	2a4a703a 	and	r5,r5,r9
   23260:	41806426 	beq	r8,r6,233f4 <_free_r+0x1e0>
   23264:	31400115 	stw	r5,4(r6)
   23268:	39c0004c 	andi	r7,r7,1
   2326c:	3151883a 	add	r8,r6,r5
   23270:	3800281e 	bne	r7,zero,23314 <_free_r+0x100>
   23274:	82bffe17 	ldw	r10,-8(r16)
   23278:	42000117 	ldw	r8,4(r8)
   2327c:	01c000b4 	movhi	r7,2
   23280:	1a87c83a 	sub	r3,r3,r10
   23284:	1a400217 	ldw	r9,8(r3)
   23288:	39d94a04 	addi	r7,r7,25896
   2328c:	1285883a 	add	r2,r2,r10
   23290:	4200004c 	andi	r8,r8,1
   23294:	49c04c26 	beq	r9,r7,233c8 <_free_r+0x1b4>
   23298:	1a800317 	ldw	r10,12(r3)
   2329c:	4a800315 	stw	r10,12(r9)
   232a0:	52400215 	stw	r9,8(r10)
   232a4:	40007126 	beq	r8,zero,2346c <_free_r+0x258>
   232a8:	11400054 	ori	r5,r2,1
   232ac:	19400115 	stw	r5,4(r3)
   232b0:	30800015 	stw	r2,0(r6)
   232b4:	11408028 	cmpgeui	r5,r2,512
   232b8:	28002c1e 	bne	r5,zero,2336c <_free_r+0x158>
   232bc:	100ad0fa 	srli	r5,r2,3
   232c0:	100cd17a 	srli	r6,r2,5
   232c4:	00800044 	movi	r2,1
   232c8:	29400044 	addi	r5,r5,1
   232cc:	280a90fa 	slli	r5,r5,3
   232d0:	21c00117 	ldw	r7,4(r4)
   232d4:	1184983a 	sll	r2,r2,r6
   232d8:	214b883a 	add	r5,r4,r5
   232dc:	29800017 	ldw	r6,0(r5)
   232e0:	11c4b03a 	or	r2,r2,r7
   232e4:	29fffe04 	addi	r7,r5,-8
   232e8:	19c00315 	stw	r7,12(r3)
   232ec:	19800215 	stw	r6,8(r3)
   232f0:	20800115 	stw	r2,4(r4)
   232f4:	28c00015 	stw	r3,0(r5)
   232f8:	30c00315 	stw	r3,12(r6)
   232fc:	8809883a 	mov	r4,r17
   23300:	dfc00217 	ldw	ra,8(sp)
   23304:	dc400117 	ldw	r17,4(sp)
   23308:	dc000017 	ldw	r16,0(sp)
   2330c:	dec00304 	addi	sp,sp,12
   23310:	00240841 	jmpi	24084 <__malloc_unlock>
   23314:	41c00117 	ldw	r7,4(r8)
   23318:	39c0004c 	andi	r7,r7,1
   2331c:	38000e1e 	bne	r7,zero,23358 <_free_r+0x144>
   23320:	01c000b4 	movhi	r7,2
   23324:	1145883a 	add	r2,r2,r5
   23328:	39d94a04 	addi	r7,r7,25896
   2332c:	31400217 	ldw	r5,8(r6)
   23330:	12400054 	ori	r9,r2,1
   23334:	1891883a 	add	r8,r3,r2
   23338:	29c05226 	beq	r5,r7,23484 <_free_r+0x270>
   2333c:	31800317 	ldw	r6,12(r6)
   23340:	29800315 	stw	r6,12(r5)
   23344:	31400215 	stw	r5,8(r6)
   23348:	1a400115 	stw	r9,4(r3)
   2334c:	40800015 	stw	r2,0(r8)
   23350:	003fd806 	br	232b4 <_free_r+0xa0>
   23354:	f800283a 	ret
   23358:	11400054 	ori	r5,r2,1
   2335c:	817fff15 	stw	r5,-4(r16)
   23360:	30800015 	stw	r2,0(r6)
   23364:	11408028 	cmpgeui	r5,r2,512
   23368:	283fd426 	beq	r5,zero,232bc <_free_r+0xa8>
   2336c:	100ad27a 	srli	r5,r2,9
   23370:	29800168 	cmpgeui	r6,r5,5
   23374:	3000341e 	bne	r6,zero,23448 <_free_r+0x234>
   23378:	100ad1ba 	srli	r5,r2,6
   2337c:	29800e44 	addi	r6,r5,57
   23380:	300c90fa 	slli	r6,r6,3
   23384:	29c00e04 	addi	r7,r5,56
   23388:	218d883a 	add	r6,r4,r6
   2338c:	31400017 	ldw	r5,0(r6)
   23390:	31bffe04 	addi	r6,r6,-8
   23394:	31404226 	beq	r6,r5,234a0 <_free_r+0x28c>
   23398:	01ffff04 	movi	r7,-4
   2339c:	29000117 	ldw	r4,4(r5)
   233a0:	21c8703a 	and	r4,r4,r7
   233a4:	1100022e 	bgeu	r2,r4,233b0 <_free_r+0x19c>
   233a8:	29400217 	ldw	r5,8(r5)
   233ac:	317ffb1e 	bne	r6,r5,2339c <_free_r+0x188>
   233b0:	29800317 	ldw	r6,12(r5)
   233b4:	19800315 	stw	r6,12(r3)
   233b8:	19400215 	stw	r5,8(r3)
   233bc:	30c00215 	stw	r3,8(r6)
   233c0:	28c00315 	stw	r3,12(r5)
   233c4:	003fcd06 	br	232fc <_free_r+0xe8>
   233c8:	40004d1e 	bne	r8,zero,23500 <_free_r+0x2ec>
   233cc:	31000317 	ldw	r4,12(r6)
   233d0:	31800217 	ldw	r6,8(r6)
   233d4:	2885883a 	add	r2,r5,r2
   233d8:	11400054 	ori	r5,r2,1
   233dc:	31000315 	stw	r4,12(r6)
   233e0:	21800215 	stw	r6,8(r4)
   233e4:	19400115 	stw	r5,4(r3)
   233e8:	1887883a 	add	r3,r3,r2
   233ec:	18800015 	stw	r2,0(r3)
   233f0:	003fc206 	br	232fc <_free_r+0xe8>
   233f4:	39c0004c 	andi	r7,r7,1
   233f8:	1145883a 	add	r2,r2,r5
   233fc:	3800071e 	bne	r7,zero,2341c <_free_r+0x208>
   23400:	81fffe17 	ldw	r7,-8(r16)
   23404:	19c7c83a 	sub	r3,r3,r7
   23408:	19400317 	ldw	r5,12(r3)
   2340c:	19800217 	ldw	r6,8(r3)
   23410:	11c5883a 	add	r2,r2,r7
   23414:	31400315 	stw	r5,12(r6)
   23418:	29800215 	stw	r6,8(r5)
   2341c:	014000b4 	movhi	r5,2
   23420:	11800054 	ori	r6,r2,1
   23424:	295ecf17 	ldw	r5,31548(r5)
   23428:	19800115 	stw	r6,4(r3)
   2342c:	20c00215 	stw	r3,8(r4)
   23430:	117fb236 	bltu	r2,r5,232fc <_free_r+0xe8>
   23434:	008000f4 	movhi	r2,3
   23438:	11657717 	ldw	r5,-27172(r2)
   2343c:	8809883a 	mov	r4,r17
   23440:	00230f80 	call	230f8 <_malloc_trim_r>
   23444:	003fad06 	br	232fc <_free_r+0xe8>
   23448:	29800568 	cmpgeui	r6,r5,21
   2344c:	30000926 	beq	r6,zero,23474 <_free_r+0x260>
   23450:	29801568 	cmpgeui	r6,r5,85
   23454:	3000191e 	bne	r6,zero,234bc <_free_r+0x2a8>
   23458:	100ad33a 	srli	r5,r2,12
   2345c:	29801bc4 	addi	r6,r5,111
   23460:	300c90fa 	slli	r6,r6,3
   23464:	29c01b84 	addi	r7,r5,110
   23468:	003fc706 	br	23388 <_free_r+0x174>
   2346c:	1145883a 	add	r2,r2,r5
   23470:	003fae06 	br	2332c <_free_r+0x118>
   23474:	29801704 	addi	r6,r5,92
   23478:	300c90fa 	slli	r6,r6,3
   2347c:	29c016c4 	addi	r7,r5,91
   23480:	003fc106 	br	23388 <_free_r+0x174>
   23484:	20c00515 	stw	r3,20(r4)
   23488:	20c00415 	stw	r3,16(r4)
   2348c:	19c00315 	stw	r7,12(r3)
   23490:	19c00215 	stw	r7,8(r3)
   23494:	1a400115 	stw	r9,4(r3)
   23498:	40800015 	stw	r2,0(r8)
   2349c:	003f9706 	br	232fc <_free_r+0xe8>
   234a0:	380fd0ba 	srai	r7,r7,2
   234a4:	00800044 	movi	r2,1
   234a8:	22000117 	ldw	r8,4(r4)
   234ac:	11ce983a 	sll	r7,r2,r7
   234b0:	3a0eb03a 	or	r7,r7,r8
   234b4:	21c00115 	stw	r7,4(r4)
   234b8:	003fbe06 	br	233b4 <_free_r+0x1a0>
   234bc:	29805568 	cmpgeui	r6,r5,341
   234c0:	3000051e 	bne	r6,zero,234d8 <_free_r+0x2c4>
   234c4:	100ad3fa 	srli	r5,r2,15
   234c8:	29801e04 	addi	r6,r5,120
   234cc:	300c90fa 	slli	r6,r6,3
   234d0:	29c01dc4 	addi	r7,r5,119
   234d4:	003fac06 	br	23388 <_free_r+0x174>
   234d8:	29415568 	cmpgeui	r5,r5,1365
   234dc:	2800051e 	bne	r5,zero,234f4 <_free_r+0x2e0>
   234e0:	100ad4ba 	srli	r5,r2,18
   234e4:	29801f44 	addi	r6,r5,125
   234e8:	300c90fa 	slli	r6,r6,3
   234ec:	29c01f04 	addi	r7,r5,124
   234f0:	003fa506 	br	23388 <_free_r+0x174>
   234f4:	0180fe04 	movi	r6,1016
   234f8:	01c01f84 	movi	r7,126
   234fc:	003fa206 	br	23388 <_free_r+0x174>
   23500:	11000054 	ori	r4,r2,1
   23504:	19000115 	stw	r4,4(r3)
   23508:	30800015 	stw	r2,0(r6)
   2350c:	003f7b06 	br	232fc <_free_r+0xe8>

00023510 <_lseek_r>:
   23510:	2807883a 	mov	r3,r5
   23514:	defffe04 	addi	sp,sp,-8
   23518:	dc000015 	stw	r16,0(sp)
   2351c:	300b883a 	mov	r5,r6
   23520:	008000f4 	movhi	r2,3
   23524:	380d883a 	mov	r6,r7
   23528:	2021883a 	mov	r16,r4
   2352c:	1809883a 	mov	r4,r3
   23530:	dfc00115 	stw	ra,4(sp)
   23534:	10257815 	stw	zero,-27168(r2)
   23538:	0023f040 	call	23f04 <lseek>
   2353c:	10ffffd8 	cmpnei	r3,r2,-1
   23540:	18000426 	beq	r3,zero,23554 <_lseek_r+0x44>
   23544:	dfc00117 	ldw	ra,4(sp)
   23548:	dc000017 	ldw	r16,0(sp)
   2354c:	dec00204 	addi	sp,sp,8
   23550:	f800283a 	ret
   23554:	00c000f4 	movhi	r3,3
   23558:	18e57817 	ldw	r3,-27168(r3)
   2355c:	183ff926 	beq	r3,zero,23544 <_lseek_r+0x34>
   23560:	80c00015 	stw	r3,0(r16)
   23564:	dfc00117 	ldw	ra,4(sp)
   23568:	dc000017 	ldw	r16,0(sp)
   2356c:	dec00204 	addi	sp,sp,8
   23570:	f800283a 	ret

00023574 <__smakebuf_r>:
   23574:	2880030b 	ldhu	r2,12(r5)
   23578:	deffe804 	addi	sp,sp,-96
   2357c:	dc001215 	stw	r16,72(sp)
   23580:	dfc01715 	stw	ra,92(sp)
   23584:	dd001615 	stw	r20,88(sp)
   23588:	dcc01515 	stw	r19,84(sp)
   2358c:	dc801415 	stw	r18,80(sp)
   23590:	dc401315 	stw	r17,76(sp)
   23594:	10c0008c 	andi	r3,r2,2
   23598:	2821883a 	mov	r16,r5
   2359c:	18000d26 	beq	r3,zero,235d4 <__smakebuf_r+0x60>
   235a0:	288010c4 	addi	r2,r5,67
   235a4:	28800015 	stw	r2,0(r5)
   235a8:	28800415 	stw	r2,16(r5)
   235ac:	00800044 	movi	r2,1
   235b0:	28800515 	stw	r2,20(r5)
   235b4:	dfc01717 	ldw	ra,92(sp)
   235b8:	dd001617 	ldw	r20,88(sp)
   235bc:	dcc01517 	ldw	r19,84(sp)
   235c0:	dc801417 	ldw	r18,80(sp)
   235c4:	dc401317 	ldw	r17,76(sp)
   235c8:	dc001217 	ldw	r16,72(sp)
   235cc:	dec01804 	addi	sp,sp,96
   235d0:	f800283a 	ret
   235d4:	2940038f 	ldh	r5,14(r5)
   235d8:	2023883a 	mov	r17,r4
   235dc:	28002816 	blt	r5,zero,23680 <__smakebuf_r+0x10c>
   235e0:	d80d883a 	mov	r6,sp
   235e4:	00238200 	call	23820 <_fstat_r>
   235e8:	10002416 	blt	r2,zero,2367c <__smakebuf_r+0x108>
   235ec:	d8800117 	ldw	r2,4(sp)
   235f0:	10bc000c 	andi	r2,r2,61440
   235f4:	10880018 	cmpnei	r2,r2,8192
   235f8:	1000461e 	bne	r2,zero,23714 <__smakebuf_r+0x1a0>
   235fc:	8140038f 	ldh	r5,14(r16)
   23600:	8809883a 	mov	r4,r17
   23604:	00238800 	call	23880 <_isatty_r>
   23608:	10003e26 	beq	r2,zero,23704 <__smakebuf_r+0x190>
   2360c:	8080030b 	ldhu	r2,12(r16)
   23610:	80c010c4 	addi	r3,r16,67
   23614:	80c00015 	stw	r3,0(r16)
   23618:	10800054 	ori	r2,r2,1
   2361c:	8080030d 	sth	r2,12(r16)
   23620:	00800044 	movi	r2,1
   23624:	80c00415 	stw	r3,16(r16)
   23628:	80800515 	stw	r2,20(r16)
   2362c:	04c00044 	movi	r19,1
   23630:	05010004 	movi	r20,1024
   23634:	04820004 	movi	r18,2048
   23638:	a00b883a 	mov	r5,r20
   2363c:	8809883a 	mov	r4,r17
   23640:	002178c0 	call	2178c <_malloc_r>
   23644:	10001726 	beq	r2,zero,236a4 <__smakebuf_r+0x130>
   23648:	80c0030b 	ldhu	r3,12(r16)
   2364c:	010000b4 	movhi	r4,2
   23650:	21038504 	addi	r4,r4,3604
   23654:	89000f15 	stw	r4,60(r17)
   23658:	18c02014 	ori	r3,r3,128
   2365c:	80c0030d 	sth	r3,12(r16)
   23660:	80800015 	stw	r2,0(r16)
   23664:	80800415 	stw	r2,16(r16)
   23668:	85000515 	stw	r20,20(r16)
   2366c:	98001d1e 	bne	r19,zero,236e4 <__smakebuf_r+0x170>
   23670:	90c6b03a 	or	r3,r18,r3
   23674:	80c0030d 	sth	r3,12(r16)
   23678:	003fce06 	br	235b4 <__smakebuf_r+0x40>
   2367c:	8080030b 	ldhu	r2,12(r16)
   23680:	1080200c 	andi	r2,r2,128
   23684:	0027883a 	mov	r19,zero
   23688:	10001326 	beq	r2,zero,236d8 <__smakebuf_r+0x164>
   2368c:	05001004 	movi	r20,64
   23690:	a00b883a 	mov	r5,r20
   23694:	8809883a 	mov	r4,r17
   23698:	0025883a 	mov	r18,zero
   2369c:	002178c0 	call	2178c <_malloc_r>
   236a0:	103fe91e 	bne	r2,zero,23648 <__smakebuf_r+0xd4>
   236a4:	8080030b 	ldhu	r2,12(r16)
   236a8:	10c0800c 	andi	r3,r2,512
   236ac:	183fc11e 	bne	r3,zero,235b4 <__smakebuf_r+0x40>
   236b0:	00ffff04 	movi	r3,-4
   236b4:	10c4703a 	and	r2,r2,r3
   236b8:	10800094 	ori	r2,r2,2
   236bc:	80c010c4 	addi	r3,r16,67
   236c0:	8080030d 	sth	r2,12(r16)
   236c4:	00800044 	movi	r2,1
   236c8:	80c00015 	stw	r3,0(r16)
   236cc:	80c00415 	stw	r3,16(r16)
   236d0:	80800515 	stw	r2,20(r16)
   236d4:	003fb706 	br	235b4 <__smakebuf_r+0x40>
   236d8:	05010004 	movi	r20,1024
   236dc:	0025883a 	mov	r18,zero
   236e0:	003fd506 	br	23638 <__smakebuf_r+0xc4>
   236e4:	8140038f 	ldh	r5,14(r16)
   236e8:	8809883a 	mov	r4,r17
   236ec:	00238800 	call	23880 <_isatty_r>
   236f0:	80c0030b 	ldhu	r3,12(r16)
   236f4:	103fde26 	beq	r2,zero,23670 <__smakebuf_r+0xfc>
   236f8:	18ffff0c 	andi	r3,r3,65532
   236fc:	18c00054 	ori	r3,r3,1
   23700:	003fdb06 	br	23670 <__smakebuf_r+0xfc>
   23704:	04c00044 	movi	r19,1
   23708:	05010004 	movi	r20,1024
   2370c:	04820004 	movi	r18,2048
   23710:	003fc906 	br	23638 <__smakebuf_r+0xc4>
   23714:	0027883a 	mov	r19,zero
   23718:	05010004 	movi	r20,1024
   2371c:	04820004 	movi	r18,2048
   23720:	003fc506 	br	23638 <__smakebuf_r+0xc4>

00023724 <__swhatbuf_r>:
   23724:	deffea04 	addi	sp,sp,-88
   23728:	dc001215 	stw	r16,72(sp)
   2372c:	2821883a 	mov	r16,r5
   23730:	2940038f 	ldh	r5,14(r5)
   23734:	dc801415 	stw	r18,80(sp)
   23738:	dc401315 	stw	r17,76(sp)
   2373c:	dfc01515 	stw	ra,84(sp)
   23740:	3023883a 	mov	r17,r6
   23744:	3825883a 	mov	r18,r7
   23748:	28001016 	blt	r5,zero,2378c <__swhatbuf_r+0x68>
   2374c:	d80d883a 	mov	r6,sp
   23750:	00238200 	call	23820 <_fstat_r>
   23754:	10000d16 	blt	r2,zero,2378c <__swhatbuf_r+0x68>
   23758:	d8c00117 	ldw	r3,4(sp)
   2375c:	00820004 	movi	r2,2048
   23760:	18fc000c 	andi	r3,r3,61440
   23764:	18c80020 	cmpeqi	r3,r3,8192
   23768:	90c00015 	stw	r3,0(r18)
   2376c:	00c10004 	movi	r3,1024
   23770:	88c00015 	stw	r3,0(r17)
   23774:	dfc01517 	ldw	ra,84(sp)
   23778:	dc801417 	ldw	r18,80(sp)
   2377c:	dc401317 	ldw	r17,76(sp)
   23780:	dc001217 	ldw	r16,72(sp)
   23784:	dec01604 	addi	sp,sp,88
   23788:	f800283a 	ret
   2378c:	8080030b 	ldhu	r2,12(r16)
   23790:	90000015 	stw	zero,0(r18)
   23794:	1080200c 	andi	r2,r2,128
   23798:	10000426 	beq	r2,zero,237ac <__swhatbuf_r+0x88>
   2379c:	00801004 	movi	r2,64
   237a0:	88800015 	stw	r2,0(r17)
   237a4:	0005883a 	mov	r2,zero
   237a8:	003ff206 	br	23774 <__swhatbuf_r+0x50>
   237ac:	00810004 	movi	r2,1024
   237b0:	88800015 	stw	r2,0(r17)
   237b4:	0005883a 	mov	r2,zero
   237b8:	003fee06 	br	23774 <__swhatbuf_r+0x50>

000237bc <_read_r>:
   237bc:	2807883a 	mov	r3,r5
   237c0:	defffe04 	addi	sp,sp,-8
   237c4:	dc000015 	stw	r16,0(sp)
   237c8:	300b883a 	mov	r5,r6
   237cc:	008000f4 	movhi	r2,3
   237d0:	380d883a 	mov	r6,r7
   237d4:	2021883a 	mov	r16,r4
   237d8:	1809883a 	mov	r4,r3
   237dc:	dfc00115 	stw	ra,4(sp)
   237e0:	10257815 	stw	zero,-27168(r2)
   237e4:	00240e40 	call	240e4 <read>
   237e8:	10ffffd8 	cmpnei	r3,r2,-1
   237ec:	18000426 	beq	r3,zero,23800 <_read_r+0x44>
   237f0:	dfc00117 	ldw	ra,4(sp)
   237f4:	dc000017 	ldw	r16,0(sp)
   237f8:	dec00204 	addi	sp,sp,8
   237fc:	f800283a 	ret
   23800:	00c000f4 	movhi	r3,3
   23804:	18e57817 	ldw	r3,-27168(r3)
   23808:	183ff926 	beq	r3,zero,237f0 <_read_r+0x34>
   2380c:	80c00015 	stw	r3,0(r16)
   23810:	dfc00117 	ldw	ra,4(sp)
   23814:	dc000017 	ldw	r16,0(sp)
   23818:	dec00204 	addi	sp,sp,8
   2381c:	f800283a 	ret

00023820 <_fstat_r>:
   23820:	2807883a 	mov	r3,r5
   23824:	defffe04 	addi	sp,sp,-8
   23828:	dc000015 	stw	r16,0(sp)
   2382c:	008000f4 	movhi	r2,3
   23830:	300b883a 	mov	r5,r6
   23834:	2021883a 	mov	r16,r4
   23838:	1809883a 	mov	r4,r3
   2383c:	dfc00115 	stw	ra,4(sp)
   23840:	10257815 	stw	zero,-27168(r2)
   23844:	0023c340 	call	23c34 <fstat>
   23848:	10ffffd8 	cmpnei	r3,r2,-1
   2384c:	18000426 	beq	r3,zero,23860 <_fstat_r+0x40>
   23850:	dfc00117 	ldw	ra,4(sp)
   23854:	dc000017 	ldw	r16,0(sp)
   23858:	dec00204 	addi	sp,sp,8
   2385c:	f800283a 	ret
   23860:	00c000f4 	movhi	r3,3
   23864:	18e57817 	ldw	r3,-27168(r3)
   23868:	183ff926 	beq	r3,zero,23850 <_fstat_r+0x30>
   2386c:	80c00015 	stw	r3,0(r16)
   23870:	dfc00117 	ldw	ra,4(sp)
   23874:	dc000017 	ldw	r16,0(sp)
   23878:	dec00204 	addi	sp,sp,8
   2387c:	f800283a 	ret

00023880 <_isatty_r>:
   23880:	defffe04 	addi	sp,sp,-8
   23884:	dc000015 	stw	r16,0(sp)
   23888:	008000f4 	movhi	r2,3
   2388c:	2021883a 	mov	r16,r4
   23890:	2809883a 	mov	r4,r5
   23894:	dfc00115 	stw	ra,4(sp)
   23898:	10257815 	stw	zero,-27168(r2)
   2389c:	0023d2c0 	call	23d2c <isatty>
   238a0:	10ffffd8 	cmpnei	r3,r2,-1
   238a4:	18000426 	beq	r3,zero,238b8 <_isatty_r+0x38>
   238a8:	dfc00117 	ldw	ra,4(sp)
   238ac:	dc000017 	ldw	r16,0(sp)
   238b0:	dec00204 	addi	sp,sp,8
   238b4:	f800283a 	ret
   238b8:	00c000f4 	movhi	r3,3
   238bc:	18e57817 	ldw	r3,-27168(r3)
   238c0:	183ff926 	beq	r3,zero,238a8 <_isatty_r+0x28>
   238c4:	80c00015 	stw	r3,0(r16)
   238c8:	dfc00117 	ldw	ra,4(sp)
   238cc:	dc000017 	ldw	r16,0(sp)
   238d0:	dec00204 	addi	sp,sp,8
   238d4:	f800283a 	ret

000238d8 <__divsi3>:
   238d8:	20001a16 	blt	r4,zero,23944 <__divsi3+0x6c>
   238dc:	000f883a 	mov	r7,zero
   238e0:	2800020e 	bge	r5,zero,238ec <__divsi3+0x14>
   238e4:	014bc83a 	sub	r5,zero,r5
   238e8:	39c0005c 	xori	r7,r7,1
   238ec:	200d883a 	mov	r6,r4
   238f0:	00c00044 	movi	r3,1
   238f4:	2900092e 	bgeu	r5,r4,2391c <__divsi3+0x44>
   238f8:	00800804 	movi	r2,32
   238fc:	00c00044 	movi	r3,1
   23900:	00000106 	br	23908 <__divsi3+0x30>
   23904:	10001226 	beq	r2,zero,23950 <__divsi3+0x78>
   23908:	294b883a 	add	r5,r5,r5
   2390c:	10bfffc4 	addi	r2,r2,-1
   23910:	18c7883a 	add	r3,r3,r3
   23914:	293ffb36 	bltu	r5,r4,23904 <__divsi3+0x2c>
   23918:	18000d26 	beq	r3,zero,23950 <__divsi3+0x78>
   2391c:	0005883a 	mov	r2,zero
   23920:	31400236 	bltu	r6,r5,2392c <__divsi3+0x54>
   23924:	314dc83a 	sub	r6,r6,r5
   23928:	10c4b03a 	or	r2,r2,r3
   2392c:	1806d07a 	srli	r3,r3,1
   23930:	280ad07a 	srli	r5,r5,1
   23934:	183ffa1e 	bne	r3,zero,23920 <__divsi3+0x48>
   23938:	38000126 	beq	r7,zero,23940 <__divsi3+0x68>
   2393c:	0085c83a 	sub	r2,zero,r2
   23940:	f800283a 	ret
   23944:	0109c83a 	sub	r4,zero,r4
   23948:	01c00044 	movi	r7,1
   2394c:	003fe406 	br	238e0 <__divsi3+0x8>
   23950:	0005883a 	mov	r2,zero
   23954:	003ff806 	br	23938 <__divsi3+0x60>

00023958 <__modsi3>:
   23958:	20001916 	blt	r4,zero,239c0 <__modsi3+0x68>
   2395c:	000f883a 	mov	r7,zero
   23960:	2005883a 	mov	r2,r4
   23964:	2800010e 	bge	r5,zero,2396c <__modsi3+0x14>
   23968:	014bc83a 	sub	r5,zero,r5
   2396c:	00c00044 	movi	r3,1
   23970:	2900092e 	bgeu	r5,r4,23998 <__modsi3+0x40>
   23974:	01800804 	movi	r6,32
   23978:	00c00044 	movi	r3,1
   2397c:	00000106 	br	23984 <__modsi3+0x2c>
   23980:	30000d26 	beq	r6,zero,239b8 <__modsi3+0x60>
   23984:	294b883a 	add	r5,r5,r5
   23988:	31bfffc4 	addi	r6,r6,-1
   2398c:	18c7883a 	add	r3,r3,r3
   23990:	293ffb36 	bltu	r5,r4,23980 <__modsi3+0x28>
   23994:	18000826 	beq	r3,zero,239b8 <__modsi3+0x60>
   23998:	1806d07a 	srli	r3,r3,1
   2399c:	11400136 	bltu	r2,r5,239a4 <__modsi3+0x4c>
   239a0:	1145c83a 	sub	r2,r2,r5
   239a4:	280ad07a 	srli	r5,r5,1
   239a8:	183ffb1e 	bne	r3,zero,23998 <__modsi3+0x40>
   239ac:	38000126 	beq	r7,zero,239b4 <__modsi3+0x5c>
   239b0:	0085c83a 	sub	r2,zero,r2
   239b4:	f800283a 	ret
   239b8:	2005883a 	mov	r2,r4
   239bc:	003ffb06 	br	239ac <__modsi3+0x54>
   239c0:	0109c83a 	sub	r4,zero,r4
   239c4:	01c00044 	movi	r7,1
   239c8:	003fe506 	br	23960 <__modsi3+0x8>

000239cc <__udivsi3>:
   239cc:	200d883a 	mov	r6,r4
   239d0:	2900152e 	bgeu	r5,r4,23a28 <__udivsi3+0x5c>
   239d4:	28001416 	blt	r5,zero,23a28 <__udivsi3+0x5c>
   239d8:	00800804 	movi	r2,32
   239dc:	00c00044 	movi	r3,1
   239e0:	00000206 	br	239ec <__udivsi3+0x20>
   239e4:	10000e26 	beq	r2,zero,23a20 <__udivsi3+0x54>
   239e8:	28000516 	blt	r5,zero,23a00 <__udivsi3+0x34>
   239ec:	294b883a 	add	r5,r5,r5
   239f0:	10bfffc4 	addi	r2,r2,-1
   239f4:	18c7883a 	add	r3,r3,r3
   239f8:	293ffa36 	bltu	r5,r4,239e4 <__udivsi3+0x18>
   239fc:	18000826 	beq	r3,zero,23a20 <__udivsi3+0x54>
   23a00:	0005883a 	mov	r2,zero
   23a04:	31400236 	bltu	r6,r5,23a10 <__udivsi3+0x44>
   23a08:	314dc83a 	sub	r6,r6,r5
   23a0c:	10c4b03a 	or	r2,r2,r3
   23a10:	1806d07a 	srli	r3,r3,1
   23a14:	280ad07a 	srli	r5,r5,1
   23a18:	183ffa1e 	bne	r3,zero,23a04 <__udivsi3+0x38>
   23a1c:	f800283a 	ret
   23a20:	0005883a 	mov	r2,zero
   23a24:	f800283a 	ret
   23a28:	00c00044 	movi	r3,1
   23a2c:	003ff406 	br	23a00 <__udivsi3+0x34>

00023a30 <__umodsi3>:
   23a30:	2005883a 	mov	r2,r4
   23a34:	2900132e 	bgeu	r5,r4,23a84 <__umodsi3+0x54>
   23a38:	28001216 	blt	r5,zero,23a84 <__umodsi3+0x54>
   23a3c:	01800804 	movi	r6,32
   23a40:	00c00044 	movi	r3,1
   23a44:	00000206 	br	23a50 <__umodsi3+0x20>
   23a48:	30000c26 	beq	r6,zero,23a7c <__umodsi3+0x4c>
   23a4c:	28000516 	blt	r5,zero,23a64 <__umodsi3+0x34>
   23a50:	294b883a 	add	r5,r5,r5
   23a54:	31bfffc4 	addi	r6,r6,-1
   23a58:	18c7883a 	add	r3,r3,r3
   23a5c:	293ffa36 	bltu	r5,r4,23a48 <__umodsi3+0x18>
   23a60:	18000626 	beq	r3,zero,23a7c <__umodsi3+0x4c>
   23a64:	1806d07a 	srli	r3,r3,1
   23a68:	11400136 	bltu	r2,r5,23a70 <__umodsi3+0x40>
   23a6c:	1145c83a 	sub	r2,r2,r5
   23a70:	280ad07a 	srli	r5,r5,1
   23a74:	183ffb1e 	bne	r3,zero,23a64 <__umodsi3+0x34>
   23a78:	f800283a 	ret
   23a7c:	2005883a 	mov	r2,r4
   23a80:	f800283a 	ret
   23a84:	00c00044 	movi	r3,1
   23a88:	003ff606 	br	23a64 <__umodsi3+0x34>

00023a8c <__mulsi3>:
   23a8c:	0005883a 	mov	r2,zero
   23a90:	20000726 	beq	r4,zero,23ab0 <__mulsi3+0x24>
   23a94:	20c0004c 	andi	r3,r4,1
   23a98:	2008d07a 	srli	r4,r4,1
   23a9c:	18000126 	beq	r3,zero,23aa4 <__mulsi3+0x18>
   23aa0:	1145883a 	add	r2,r2,r5
   23aa4:	294b883a 	add	r5,r5,r5
   23aa8:	203ffa1e 	bne	r4,zero,23a94 <__mulsi3+0x8>
   23aac:	f800283a 	ret
   23ab0:	f800283a 	ret

00023ab4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23ab4:	defffe04 	addi	sp,sp,-8
   23ab8:	dfc00115 	stw	ra,4(sp)
   23abc:	df000015 	stw	fp,0(sp)
   23ac0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23ac4:	d0a00917 	ldw	r2,-32732(gp)
   23ac8:	10000326 	beq	r2,zero,23ad8 <alt_get_errno+0x24>
   23acc:	d0a00917 	ldw	r2,-32732(gp)
   23ad0:	103ee83a 	callr	r2
   23ad4:	00000106 	br	23adc <alt_get_errno+0x28>
   23ad8:	d0a6ac04 	addi	r2,gp,-25936
}
   23adc:	e037883a 	mov	sp,fp
   23ae0:	dfc00117 	ldw	ra,4(sp)
   23ae4:	df000017 	ldw	fp,0(sp)
   23ae8:	dec00204 	addi	sp,sp,8
   23aec:	f800283a 	ret

00023af0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   23af0:	defffb04 	addi	sp,sp,-20
   23af4:	dfc00415 	stw	ra,16(sp)
   23af8:	df000315 	stw	fp,12(sp)
   23afc:	df000304 	addi	fp,sp,12
   23b00:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   23b04:	e0bffd17 	ldw	r2,-12(fp)
   23b08:	10000916 	blt	r2,zero,23b30 <close+0x40>
   23b0c:	e0fffd17 	ldw	r3,-12(fp)
   23b10:	1805883a 	mov	r2,r3
   23b14:	1085883a 	add	r2,r2,r2
   23b18:	10c5883a 	add	r2,r2,r3
   23b1c:	100490ba 	slli	r2,r2,2
   23b20:	00c000b4 	movhi	r3,2
   23b24:	18da5404 	addi	r3,r3,26960
   23b28:	10c5883a 	add	r2,r2,r3
   23b2c:	00000106 	br	23b34 <close+0x44>
   23b30:	0005883a 	mov	r2,zero
   23b34:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   23b38:	e0bfff17 	ldw	r2,-4(fp)
   23b3c:	10001926 	beq	r2,zero,23ba4 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   23b40:	e0bfff17 	ldw	r2,-4(fp)
   23b44:	10800017 	ldw	r2,0(r2)
   23b48:	10800417 	ldw	r2,16(r2)
   23b4c:	10000626 	beq	r2,zero,23b68 <close+0x78>
   23b50:	e0bfff17 	ldw	r2,-4(fp)
   23b54:	10800017 	ldw	r2,0(r2)
   23b58:	10800417 	ldw	r2,16(r2)
   23b5c:	e13fff17 	ldw	r4,-4(fp)
   23b60:	103ee83a 	callr	r2
   23b64:	00000106 	br	23b6c <close+0x7c>
   23b68:	0005883a 	mov	r2,zero
   23b6c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   23b70:	e13ffd17 	ldw	r4,-12(fp)
   23b74:	00241ec0 	call	241ec <alt_release_fd>
    if (rval < 0)
   23b78:	e0bffe17 	ldw	r2,-8(fp)
   23b7c:	1000070e 	bge	r2,zero,23b9c <close+0xac>
    {
      ALT_ERRNO = -rval;
   23b80:	0023ab40 	call	23ab4 <alt_get_errno>
   23b84:	1007883a 	mov	r3,r2
   23b88:	e0bffe17 	ldw	r2,-8(fp)
   23b8c:	0085c83a 	sub	r2,zero,r2
   23b90:	18800015 	stw	r2,0(r3)
      return -1;
   23b94:	00bfffc4 	movi	r2,-1
   23b98:	00000706 	br	23bb8 <close+0xc8>
    }
    return 0;
   23b9c:	0005883a 	mov	r2,zero
   23ba0:	00000506 	br	23bb8 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23ba4:	0023ab40 	call	23ab4 <alt_get_errno>
   23ba8:	1007883a 	mov	r3,r2
   23bac:	00801444 	movi	r2,81
   23bb0:	18800015 	stw	r2,0(r3)
    return -1;
   23bb4:	00bfffc4 	movi	r2,-1
  }
}
   23bb8:	e037883a 	mov	sp,fp
   23bbc:	dfc00117 	ldw	ra,4(sp)
   23bc0:	df000017 	ldw	fp,0(sp)
   23bc4:	dec00204 	addi	sp,sp,8
   23bc8:	f800283a 	ret

00023bcc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23bcc:	defffc04 	addi	sp,sp,-16
   23bd0:	df000315 	stw	fp,12(sp)
   23bd4:	df000304 	addi	fp,sp,12
   23bd8:	e13fff15 	stw	r4,-4(fp)
   23bdc:	e17ffe15 	stw	r5,-8(fp)
   23be0:	e1bffd15 	stw	r6,-12(fp)
  return len;
   23be4:	e0bffd17 	ldw	r2,-12(fp)
}
   23be8:	e037883a 	mov	sp,fp
   23bec:	df000017 	ldw	fp,0(sp)
   23bf0:	dec00104 	addi	sp,sp,4
   23bf4:	f800283a 	ret

00023bf8 <alt_get_errno>:
{
   23bf8:	defffe04 	addi	sp,sp,-8
   23bfc:	dfc00115 	stw	ra,4(sp)
   23c00:	df000015 	stw	fp,0(sp)
   23c04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23c08:	d0a00917 	ldw	r2,-32732(gp)
   23c0c:	10000326 	beq	r2,zero,23c1c <alt_get_errno+0x24>
   23c10:	d0a00917 	ldw	r2,-32732(gp)
   23c14:	103ee83a 	callr	r2
   23c18:	00000106 	br	23c20 <alt_get_errno+0x28>
   23c1c:	d0a6ac04 	addi	r2,gp,-25936
}
   23c20:	e037883a 	mov	sp,fp
   23c24:	dfc00117 	ldw	ra,4(sp)
   23c28:	df000017 	ldw	fp,0(sp)
   23c2c:	dec00204 	addi	sp,sp,8
   23c30:	f800283a 	ret

00023c34 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   23c34:	defffb04 	addi	sp,sp,-20
   23c38:	dfc00415 	stw	ra,16(sp)
   23c3c:	df000315 	stw	fp,12(sp)
   23c40:	df000304 	addi	fp,sp,12
   23c44:	e13ffe15 	stw	r4,-8(fp)
   23c48:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23c4c:	e0bffe17 	ldw	r2,-8(fp)
   23c50:	10000916 	blt	r2,zero,23c78 <fstat+0x44>
   23c54:	e0fffe17 	ldw	r3,-8(fp)
   23c58:	1805883a 	mov	r2,r3
   23c5c:	1085883a 	add	r2,r2,r2
   23c60:	10c5883a 	add	r2,r2,r3
   23c64:	100490ba 	slli	r2,r2,2
   23c68:	00c000b4 	movhi	r3,2
   23c6c:	18da5404 	addi	r3,r3,26960
   23c70:	10c5883a 	add	r2,r2,r3
   23c74:	00000106 	br	23c7c <fstat+0x48>
   23c78:	0005883a 	mov	r2,zero
   23c7c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   23c80:	e0bfff17 	ldw	r2,-4(fp)
   23c84:	10001026 	beq	r2,zero,23cc8 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23c88:	e0bfff17 	ldw	r2,-4(fp)
   23c8c:	10800017 	ldw	r2,0(r2)
   23c90:	10800817 	ldw	r2,32(r2)
   23c94:	10000726 	beq	r2,zero,23cb4 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
   23c98:	e0bfff17 	ldw	r2,-4(fp)
   23c9c:	10800017 	ldw	r2,0(r2)
   23ca0:	10800817 	ldw	r2,32(r2)
   23ca4:	e17ffd17 	ldw	r5,-12(fp)
   23ca8:	e13fff17 	ldw	r4,-4(fp)
   23cac:	103ee83a 	callr	r2
   23cb0:	00000a06 	br	23cdc <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   23cb4:	e0bffd17 	ldw	r2,-12(fp)
   23cb8:	00c80004 	movi	r3,8192
   23cbc:	10c00115 	stw	r3,4(r2)
      return 0;
   23cc0:	0005883a 	mov	r2,zero
   23cc4:	00000506 	br	23cdc <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23cc8:	0023bf80 	call	23bf8 <alt_get_errno>
   23ccc:	1007883a 	mov	r3,r2
   23cd0:	00801444 	movi	r2,81
   23cd4:	18800015 	stw	r2,0(r3)
    return -1;
   23cd8:	00bfffc4 	movi	r2,-1
  }
}
   23cdc:	e037883a 	mov	sp,fp
   23ce0:	dfc00117 	ldw	ra,4(sp)
   23ce4:	df000017 	ldw	fp,0(sp)
   23ce8:	dec00204 	addi	sp,sp,8
   23cec:	f800283a 	ret

00023cf0 <alt_get_errno>:
{
   23cf0:	defffe04 	addi	sp,sp,-8
   23cf4:	dfc00115 	stw	ra,4(sp)
   23cf8:	df000015 	stw	fp,0(sp)
   23cfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23d00:	d0a00917 	ldw	r2,-32732(gp)
   23d04:	10000326 	beq	r2,zero,23d14 <alt_get_errno+0x24>
   23d08:	d0a00917 	ldw	r2,-32732(gp)
   23d0c:	103ee83a 	callr	r2
   23d10:	00000106 	br	23d18 <alt_get_errno+0x28>
   23d14:	d0a6ac04 	addi	r2,gp,-25936
}
   23d18:	e037883a 	mov	sp,fp
   23d1c:	dfc00117 	ldw	ra,4(sp)
   23d20:	df000017 	ldw	fp,0(sp)
   23d24:	dec00204 	addi	sp,sp,8
   23d28:	f800283a 	ret

00023d2c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   23d2c:	deffea04 	addi	sp,sp,-88
   23d30:	dfc01515 	stw	ra,84(sp)
   23d34:	df001415 	stw	fp,80(sp)
   23d38:	df001404 	addi	fp,sp,80
   23d3c:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23d40:	e0bfec17 	ldw	r2,-80(fp)
   23d44:	10000916 	blt	r2,zero,23d6c <isatty+0x40>
   23d48:	e0ffec17 	ldw	r3,-80(fp)
   23d4c:	1805883a 	mov	r2,r3
   23d50:	1085883a 	add	r2,r2,r2
   23d54:	10c5883a 	add	r2,r2,r3
   23d58:	100490ba 	slli	r2,r2,2
   23d5c:	00c000b4 	movhi	r3,2
   23d60:	18da5404 	addi	r3,r3,26960
   23d64:	10c5883a 	add	r2,r2,r3
   23d68:	00000106 	br	23d70 <isatty+0x44>
   23d6c:	0005883a 	mov	r2,zero
   23d70:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   23d74:	e0bfff17 	ldw	r2,-4(fp)
   23d78:	10000e26 	beq	r2,zero,23db4 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23d7c:	e0bfff17 	ldw	r2,-4(fp)
   23d80:	10800017 	ldw	r2,0(r2)
   23d84:	10800817 	ldw	r2,32(r2)
   23d88:	1000021e 	bne	r2,zero,23d94 <isatty+0x68>
    {
      return 1;
   23d8c:	00800044 	movi	r2,1
   23d90:	00000d06 	br	23dc8 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23d94:	e0bfed04 	addi	r2,fp,-76
   23d98:	100b883a 	mov	r5,r2
   23d9c:	e13fec17 	ldw	r4,-80(fp)
   23da0:	0023c340 	call	23c34 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23da4:	e0bfee17 	ldw	r2,-72(fp)
   23da8:	10880020 	cmpeqi	r2,r2,8192
   23dac:	10803fcc 	andi	r2,r2,255
   23db0:	00000506 	br	23dc8 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23db4:	0023cf00 	call	23cf0 <alt_get_errno>
   23db8:	1007883a 	mov	r3,r2
   23dbc:	00801444 	movi	r2,81
   23dc0:	18800015 	stw	r2,0(r3)
    return 0;
   23dc4:	0005883a 	mov	r2,zero
  }
}
   23dc8:	e037883a 	mov	sp,fp
   23dcc:	dfc00117 	ldw	ra,4(sp)
   23dd0:	df000017 	ldw	fp,0(sp)
   23dd4:	dec00204 	addi	sp,sp,8
   23dd8:	f800283a 	ret

00023ddc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23ddc:	defffc04 	addi	sp,sp,-16
   23de0:	df000315 	stw	fp,12(sp)
   23de4:	df000304 	addi	fp,sp,12
   23de8:	e13fff15 	stw	r4,-4(fp)
   23dec:	e17ffe15 	stw	r5,-8(fp)
   23df0:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   23df4:	e0fffe17 	ldw	r3,-8(fp)
   23df8:	e0bfff17 	ldw	r2,-4(fp)
   23dfc:	18800c26 	beq	r3,r2,23e30 <alt_load_section+0x54>
  {
    while( to != end )
   23e00:	00000806 	br	23e24 <alt_load_section+0x48>
    {
      *to++ = *from++;
   23e04:	e0ffff17 	ldw	r3,-4(fp)
   23e08:	18800104 	addi	r2,r3,4
   23e0c:	e0bfff15 	stw	r2,-4(fp)
   23e10:	e0bffe17 	ldw	r2,-8(fp)
   23e14:	11000104 	addi	r4,r2,4
   23e18:	e13ffe15 	stw	r4,-8(fp)
   23e1c:	18c00017 	ldw	r3,0(r3)
   23e20:	10c00015 	stw	r3,0(r2)
    while( to != end )
   23e24:	e0fffe17 	ldw	r3,-8(fp)
   23e28:	e0bffd17 	ldw	r2,-12(fp)
   23e2c:	18bff51e 	bne	r3,r2,23e04 <alt_load_section+0x28>
    }
  }
}
   23e30:	0001883a 	nop
   23e34:	e037883a 	mov	sp,fp
   23e38:	df000017 	ldw	fp,0(sp)
   23e3c:	dec00104 	addi	sp,sp,4
   23e40:	f800283a 	ret

00023e44 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23e44:	defffe04 	addi	sp,sp,-8
   23e48:	dfc00115 	stw	ra,4(sp)
   23e4c:	df000015 	stw	fp,0(sp)
   23e50:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23e54:	018000b4 	movhi	r6,2
   23e58:	319eda04 	addi	r6,r6,31592
   23e5c:	014000b4 	movhi	r5,2
   23e60:	29583f04 	addi	r5,r5,24828
   23e64:	010000b4 	movhi	r4,2
   23e68:	211eda04 	addi	r4,r4,31592
   23e6c:	0023ddc0 	call	23ddc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23e70:	018000b4 	movhi	r6,2
   23e74:	31808904 	addi	r6,r6,548
   23e78:	014000b4 	movhi	r5,2
   23e7c:	29400804 	addi	r5,r5,32
   23e80:	010000b4 	movhi	r4,2
   23e84:	21000804 	addi	r4,r4,32
   23e88:	0023ddc0 	call	23ddc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23e8c:	018000b4 	movhi	r6,2
   23e90:	31983f04 	addi	r6,r6,24828
   23e94:	014000b4 	movhi	r5,2
   23e98:	29582c04 	addi	r5,r5,24752
   23e9c:	010000b4 	movhi	r4,2
   23ea0:	21182c04 	addi	r4,r4,24752
   23ea4:	0023ddc0 	call	23ddc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23ea8:	00250e00 	call	250e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23eac:	00252ac0 	call	252ac <alt_icache_flush_all>
}
   23eb0:	0001883a 	nop
   23eb4:	e037883a 	mov	sp,fp
   23eb8:	dfc00117 	ldw	ra,4(sp)
   23ebc:	df000017 	ldw	fp,0(sp)
   23ec0:	dec00204 	addi	sp,sp,8
   23ec4:	f800283a 	ret

00023ec8 <alt_get_errno>:
{
   23ec8:	defffe04 	addi	sp,sp,-8
   23ecc:	dfc00115 	stw	ra,4(sp)
   23ed0:	df000015 	stw	fp,0(sp)
   23ed4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23ed8:	d0a00917 	ldw	r2,-32732(gp)
   23edc:	10000326 	beq	r2,zero,23eec <alt_get_errno+0x24>
   23ee0:	d0a00917 	ldw	r2,-32732(gp)
   23ee4:	103ee83a 	callr	r2
   23ee8:	00000106 	br	23ef0 <alt_get_errno+0x28>
   23eec:	d0a6ac04 	addi	r2,gp,-25936
}
   23ef0:	e037883a 	mov	sp,fp
   23ef4:	dfc00117 	ldw	ra,4(sp)
   23ef8:	df000017 	ldw	fp,0(sp)
   23efc:	dec00204 	addi	sp,sp,8
   23f00:	f800283a 	ret

00023f04 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   23f04:	defff904 	addi	sp,sp,-28
   23f08:	dfc00615 	stw	ra,24(sp)
   23f0c:	df000515 	stw	fp,20(sp)
   23f10:	df000504 	addi	fp,sp,20
   23f14:	e13ffd15 	stw	r4,-12(fp)
   23f18:	e17ffc15 	stw	r5,-16(fp)
   23f1c:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   23f20:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23f24:	e0bffd17 	ldw	r2,-12(fp)
   23f28:	10000916 	blt	r2,zero,23f50 <lseek+0x4c>
   23f2c:	e0fffd17 	ldw	r3,-12(fp)
   23f30:	1805883a 	mov	r2,r3
   23f34:	1085883a 	add	r2,r2,r2
   23f38:	10c5883a 	add	r2,r2,r3
   23f3c:	100490ba 	slli	r2,r2,2
   23f40:	00c000b4 	movhi	r3,2
   23f44:	18da5404 	addi	r3,r3,26960
   23f48:	10c5883a 	add	r2,r2,r3
   23f4c:	00000106 	br	23f54 <lseek+0x50>
   23f50:	0005883a 	mov	r2,zero
   23f54:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
   23f58:	e0bffe17 	ldw	r2,-8(fp)
   23f5c:	10001026 	beq	r2,zero,23fa0 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   23f60:	e0bffe17 	ldw	r2,-8(fp)
   23f64:	10800017 	ldw	r2,0(r2)
   23f68:	10800717 	ldw	r2,28(r2)
   23f6c:	10000926 	beq	r2,zero,23f94 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   23f70:	e0bffe17 	ldw	r2,-8(fp)
   23f74:	10800017 	ldw	r2,0(r2)
   23f78:	10800717 	ldw	r2,28(r2)
   23f7c:	e1bffb17 	ldw	r6,-20(fp)
   23f80:	e17ffc17 	ldw	r5,-16(fp)
   23f84:	e13ffe17 	ldw	r4,-8(fp)
   23f88:	103ee83a 	callr	r2
   23f8c:	e0bfff15 	stw	r2,-4(fp)
   23f90:	00000506 	br	23fa8 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23f94:	00bfde84 	movi	r2,-134
   23f98:	e0bfff15 	stw	r2,-4(fp)
   23f9c:	00000206 	br	23fa8 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
   23fa0:	00bfebc4 	movi	r2,-81
   23fa4:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
   23fa8:	e0bfff17 	ldw	r2,-4(fp)
   23fac:	1000070e 	bge	r2,zero,23fcc <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
   23fb0:	0023ec80 	call	23ec8 <alt_get_errno>
   23fb4:	1007883a 	mov	r3,r2
   23fb8:	e0bfff17 	ldw	r2,-4(fp)
   23fbc:	0085c83a 	sub	r2,zero,r2
   23fc0:	18800015 	stw	r2,0(r3)
    rc = -1;
   23fc4:	00bfffc4 	movi	r2,-1
   23fc8:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
   23fcc:	e0bfff17 	ldw	r2,-4(fp)
}
   23fd0:	e037883a 	mov	sp,fp
   23fd4:	dfc00117 	ldw	ra,4(sp)
   23fd8:	df000017 	ldw	fp,0(sp)
   23fdc:	dec00204 	addi	sp,sp,8
   23fe0:	f800283a 	ret

00023fe4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23fe4:	defffd04 	addi	sp,sp,-12
   23fe8:	dfc00215 	stw	ra,8(sp)
   23fec:	df000115 	stw	fp,4(sp)
   23ff0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23ff4:	0009883a 	mov	r4,zero
   23ff8:	00244880 	call	24488 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23ffc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   24000:	00244c40 	call	244c4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   24004:	018000b4 	movhi	r6,2
   24008:	31983504 	addi	r6,r6,24788
   2400c:	014000b4 	movhi	r5,2
   24010:	29583504 	addi	r5,r5,24788
   24014:	010000b4 	movhi	r4,2
   24018:	21183504 	addi	r4,r4,24788
   2401c:	00256380 	call	25638 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   24020:	00251e40 	call	251e4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   24024:	010000b4 	movhi	r4,2
   24028:	21149204 	addi	r4,r4,21064
   2402c:	0025e080 	call	25e08 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   24030:	d0a6ad17 	ldw	r2,-25932(gp)
   24034:	d0e6ae17 	ldw	r3,-25928(gp)
   24038:	d126af17 	ldw	r4,-25924(gp)
   2403c:	200d883a 	mov	r6,r4
   24040:	180b883a 	mov	r5,r3
   24044:	1009883a 	mov	r4,r2
   24048:	0020c500 	call	20c50 <main>
   2404c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   24050:	01000044 	movi	r4,1
   24054:	0023af00 	call	23af0 <close>
  exit (result);
   24058:	e13fff17 	ldw	r4,-4(fp)
   2405c:	0025e1c0 	call	25e1c <exit>

00024060 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   24060:	defffe04 	addi	sp,sp,-8
   24064:	df000115 	stw	fp,4(sp)
   24068:	df000104 	addi	fp,sp,4
   2406c:	e13fff15 	stw	r4,-4(fp)
}
   24070:	0001883a 	nop
   24074:	e037883a 	mov	sp,fp
   24078:	df000017 	ldw	fp,0(sp)
   2407c:	dec00104 	addi	sp,sp,4
   24080:	f800283a 	ret

00024084 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   24084:	defffe04 	addi	sp,sp,-8
   24088:	df000115 	stw	fp,4(sp)
   2408c:	df000104 	addi	fp,sp,4
   24090:	e13fff15 	stw	r4,-4(fp)
}
   24094:	0001883a 	nop
   24098:	e037883a 	mov	sp,fp
   2409c:	df000017 	ldw	fp,0(sp)
   240a0:	dec00104 	addi	sp,sp,4
   240a4:	f800283a 	ret

000240a8 <alt_get_errno>:
{
   240a8:	defffe04 	addi	sp,sp,-8
   240ac:	dfc00115 	stw	ra,4(sp)
   240b0:	df000015 	stw	fp,0(sp)
   240b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   240b8:	d0a00917 	ldw	r2,-32732(gp)
   240bc:	10000326 	beq	r2,zero,240cc <alt_get_errno+0x24>
   240c0:	d0a00917 	ldw	r2,-32732(gp)
   240c4:	103ee83a 	callr	r2
   240c8:	00000106 	br	240d0 <alt_get_errno+0x28>
   240cc:	d0a6ac04 	addi	r2,gp,-25936
}
   240d0:	e037883a 	mov	sp,fp
   240d4:	dfc00117 	ldw	ra,4(sp)
   240d8:	df000017 	ldw	fp,0(sp)
   240dc:	dec00204 	addi	sp,sp,8
   240e0:	f800283a 	ret

000240e4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   240e4:	defff904 	addi	sp,sp,-28
   240e8:	dfc00615 	stw	ra,24(sp)
   240ec:	df000515 	stw	fp,20(sp)
   240f0:	df000504 	addi	fp,sp,20
   240f4:	e13ffd15 	stw	r4,-12(fp)
   240f8:	e17ffc15 	stw	r5,-16(fp)
   240fc:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   24100:	e0bffd17 	ldw	r2,-12(fp)
   24104:	10000916 	blt	r2,zero,2412c <read+0x48>
   24108:	e0fffd17 	ldw	r3,-12(fp)
   2410c:	1805883a 	mov	r2,r3
   24110:	1085883a 	add	r2,r2,r2
   24114:	10c5883a 	add	r2,r2,r3
   24118:	100490ba 	slli	r2,r2,2
   2411c:	00c000b4 	movhi	r3,2
   24120:	18da5404 	addi	r3,r3,26960
   24124:	10c5883a 	add	r2,r2,r3
   24128:	00000106 	br	24130 <read+0x4c>
   2412c:	0005883a 	mov	r2,zero
   24130:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   24134:	e0bfff17 	ldw	r2,-4(fp)
   24138:	10002226 	beq	r2,zero,241c4 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2413c:	e0bfff17 	ldw	r2,-4(fp)
   24140:	10800217 	ldw	r2,8(r2)
   24144:	108000cc 	andi	r2,r2,3
   24148:	10800060 	cmpeqi	r2,r2,1
   2414c:	1000181e 	bne	r2,zero,241b0 <read+0xcc>
        (fd->dev->read))
   24150:	e0bfff17 	ldw	r2,-4(fp)
   24154:	10800017 	ldw	r2,0(r2)
   24158:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2415c:	10001426 	beq	r2,zero,241b0 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   24160:	e0bfff17 	ldw	r2,-4(fp)
   24164:	10800017 	ldw	r2,0(r2)
   24168:	10800517 	ldw	r2,20(r2)
   2416c:	e0fffb17 	ldw	r3,-20(fp)
   24170:	180d883a 	mov	r6,r3
   24174:	e17ffc17 	ldw	r5,-16(fp)
   24178:	e13fff17 	ldw	r4,-4(fp)
   2417c:	103ee83a 	callr	r2
   24180:	e0bffe15 	stw	r2,-8(fp)
   24184:	e0bffe17 	ldw	r2,-8(fp)
   24188:	1000070e 	bge	r2,zero,241a8 <read+0xc4>
        {
          ALT_ERRNO = -rval;
   2418c:	00240a80 	call	240a8 <alt_get_errno>
   24190:	1007883a 	mov	r3,r2
   24194:	e0bffe17 	ldw	r2,-8(fp)
   24198:	0085c83a 	sub	r2,zero,r2
   2419c:	18800015 	stw	r2,0(r3)
          return -1;
   241a0:	00bfffc4 	movi	r2,-1
   241a4:	00000c06 	br	241d8 <read+0xf4>
        }
        return rval;
   241a8:	e0bffe17 	ldw	r2,-8(fp)
   241ac:	00000a06 	br	241d8 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
   241b0:	00240a80 	call	240a8 <alt_get_errno>
   241b4:	1007883a 	mov	r3,r2
   241b8:	00800344 	movi	r2,13
   241bc:	18800015 	stw	r2,0(r3)
   241c0:	00000406 	br	241d4 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   241c4:	00240a80 	call	240a8 <alt_get_errno>
   241c8:	1007883a 	mov	r3,r2
   241cc:	00801444 	movi	r2,81
   241d0:	18800015 	stw	r2,0(r3)
  }
  return -1;
   241d4:	00bfffc4 	movi	r2,-1
}
   241d8:	e037883a 	mov	sp,fp
   241dc:	dfc00117 	ldw	ra,4(sp)
   241e0:	df000017 	ldw	fp,0(sp)
   241e4:	dec00204 	addi	sp,sp,8
   241e8:	f800283a 	ret

000241ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   241ec:	defffe04 	addi	sp,sp,-8
   241f0:	df000115 	stw	fp,4(sp)
   241f4:	df000104 	addi	fp,sp,4
   241f8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   241fc:	e0bfff17 	ldw	r2,-4(fp)
   24200:	108000d0 	cmplti	r2,r2,3
   24204:	1000101e 	bne	r2,zero,24248 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   24208:	e0ffff17 	ldw	r3,-4(fp)
   2420c:	1805883a 	mov	r2,r3
   24210:	1085883a 	add	r2,r2,r2
   24214:	10c5883a 	add	r2,r2,r3
   24218:	100490ba 	slli	r2,r2,2
   2421c:	00c000b4 	movhi	r3,2
   24220:	10c7883a 	add	r3,r2,r3
   24224:	181a5615 	stw	zero,26968(r3)
    alt_fd_list[fd].dev      = 0;
   24228:	e0ffff17 	ldw	r3,-4(fp)
   2422c:	1805883a 	mov	r2,r3
   24230:	1085883a 	add	r2,r2,r2
   24234:	10c5883a 	add	r2,r2,r3
   24238:	100490ba 	slli	r2,r2,2
   2423c:	00c000b4 	movhi	r3,2
   24240:	10c7883a 	add	r3,r2,r3
   24244:	181a5415 	stw	zero,26960(r3)
  }
}
   24248:	0001883a 	nop
   2424c:	e037883a 	mov	sp,fp
   24250:	df000017 	ldw	fp,0(sp)
   24254:	dec00104 	addi	sp,sp,4
   24258:	f800283a 	ret

0002425c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2425c:	defff904 	addi	sp,sp,-28
   24260:	df000615 	stw	fp,24(sp)
   24264:	df000604 	addi	fp,sp,24
   24268:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
   2426c:	0005303a 	rdctl	r2,status
   24270:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24274:	e0fffd17 	ldw	r3,-12(fp)
   24278:	00bfff84 	movi	r2,-2
   2427c:	1884703a 	and	r2,r3,r2
   24280:	1001703a 	wrctl	status,r2
  return context;
   24284:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   24288:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2428c:	d0a00a17 	ldw	r2,-32728(gp)
   24290:	10c000c4 	addi	r3,r2,3
   24294:	00bfff04 	movi	r2,-4
   24298:	1884703a 	and	r2,r3,r2
   2429c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   242a0:	d0e00a17 	ldw	r3,-32728(gp)
   242a4:	e0bffa17 	ldw	r2,-24(fp)
   242a8:	1887883a 	add	r3,r3,r2
   242ac:	00800134 	movhi	r2,4
   242b0:	10800004 	addi	r2,r2,0
   242b4:	10c0072e 	bgeu	r2,r3,242d4 <sbrk+0x78>
   242b8:	e0bfff17 	ldw	r2,-4(fp)
   242bc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   242c0:	e0bffc17 	ldw	r2,-16(fp)
   242c4:	1001703a 	wrctl	status,r2
}
   242c8:	0001883a 	nop
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   242cc:	00bfffc4 	movi	r2,-1
   242d0:	00000c06 	br	24304 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
   242d4:	d0a00a17 	ldw	r2,-32728(gp)
   242d8:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
   242dc:	d0e00a17 	ldw	r3,-32728(gp)
   242e0:	e0bffa17 	ldw	r2,-24(fp)
   242e4:	1885883a 	add	r2,r3,r2
   242e8:	d0a00a15 	stw	r2,-32728(gp)
   242ec:	e0bfff17 	ldw	r2,-4(fp)
   242f0:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   242f4:	e0bffb17 	ldw	r2,-20(fp)
   242f8:	1001703a 	wrctl	status,r2
}
   242fc:	0001883a 	nop

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   24300:	e0bffe17 	ldw	r2,-8(fp)
} 
   24304:	e037883a 	mov	sp,fp
   24308:	df000017 	ldw	fp,0(sp)
   2430c:	dec00104 	addi	sp,sp,4
   24310:	f800283a 	ret

00024314 <alt_get_errno>:
{
   24314:	defffe04 	addi	sp,sp,-8
   24318:	dfc00115 	stw	ra,4(sp)
   2431c:	df000015 	stw	fp,0(sp)
   24320:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24324:	d0a00917 	ldw	r2,-32732(gp)
   24328:	10000326 	beq	r2,zero,24338 <alt_get_errno+0x24>
   2432c:	d0a00917 	ldw	r2,-32732(gp)
   24330:	103ee83a 	callr	r2
   24334:	00000106 	br	2433c <alt_get_errno+0x28>
   24338:	d0a6ac04 	addi	r2,gp,-25936
}
   2433c:	e037883a 	mov	sp,fp
   24340:	dfc00117 	ldw	ra,4(sp)
   24344:	df000017 	ldw	fp,0(sp)
   24348:	dec00204 	addi	sp,sp,8
   2434c:	f800283a 	ret

00024350 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   24350:	defff904 	addi	sp,sp,-28
   24354:	dfc00615 	stw	ra,24(sp)
   24358:	df000515 	stw	fp,20(sp)
   2435c:	df000504 	addi	fp,sp,20
   24360:	e13ffd15 	stw	r4,-12(fp)
   24364:	e17ffc15 	stw	r5,-16(fp)
   24368:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2436c:	e0bffd17 	ldw	r2,-12(fp)
   24370:	10000916 	blt	r2,zero,24398 <write+0x48>
   24374:	e0fffd17 	ldw	r3,-12(fp)
   24378:	1805883a 	mov	r2,r3
   2437c:	1085883a 	add	r2,r2,r2
   24380:	10c5883a 	add	r2,r2,r3
   24384:	100490ba 	slli	r2,r2,2
   24388:	00c000b4 	movhi	r3,2
   2438c:	18da5404 	addi	r3,r3,26960
   24390:	10c5883a 	add	r2,r2,r3
   24394:	00000106 	br	2439c <write+0x4c>
   24398:	0005883a 	mov	r2,zero
   2439c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   243a0:	e0bfff17 	ldw	r2,-4(fp)
   243a4:	10002126 	beq	r2,zero,2442c <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   243a8:	e0bfff17 	ldw	r2,-4(fp)
   243ac:	10800217 	ldw	r2,8(r2)
   243b0:	108000cc 	andi	r2,r2,3
   243b4:	10001826 	beq	r2,zero,24418 <write+0xc8>
   243b8:	e0bfff17 	ldw	r2,-4(fp)
   243bc:	10800017 	ldw	r2,0(r2)
   243c0:	10800617 	ldw	r2,24(r2)
   243c4:	10001426 	beq	r2,zero,24418 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   243c8:	e0bfff17 	ldw	r2,-4(fp)
   243cc:	10800017 	ldw	r2,0(r2)
   243d0:	10800617 	ldw	r2,24(r2)
   243d4:	e0fffb17 	ldw	r3,-20(fp)
   243d8:	180d883a 	mov	r6,r3
   243dc:	e17ffc17 	ldw	r5,-16(fp)
   243e0:	e13fff17 	ldw	r4,-4(fp)
   243e4:	103ee83a 	callr	r2
   243e8:	e0bffe15 	stw	r2,-8(fp)
   243ec:	e0bffe17 	ldw	r2,-8(fp)
   243f0:	1000070e 	bge	r2,zero,24410 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   243f4:	00243140 	call	24314 <alt_get_errno>
   243f8:	1007883a 	mov	r3,r2
   243fc:	e0bffe17 	ldw	r2,-8(fp)
   24400:	0085c83a 	sub	r2,zero,r2
   24404:	18800015 	stw	r2,0(r3)
        return -1;
   24408:	00bfffc4 	movi	r2,-1
   2440c:	00000c06 	br	24440 <write+0xf0>
      }
      return rval;
   24410:	e0bffe17 	ldw	r2,-8(fp)
   24414:	00000a06 	br	24440 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   24418:	00243140 	call	24314 <alt_get_errno>
   2441c:	1007883a 	mov	r3,r2
   24420:	00800344 	movi	r2,13
   24424:	18800015 	stw	r2,0(r3)
   24428:	00000406 	br	2443c <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2442c:	00243140 	call	24314 <alt_get_errno>
   24430:	1007883a 	mov	r3,r2
   24434:	00801444 	movi	r2,81
   24438:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2443c:	00bfffc4 	movi	r2,-1
}
   24440:	e037883a 	mov	sp,fp
   24444:	dfc00117 	ldw	ra,4(sp)
   24448:	df000017 	ldw	fp,0(sp)
   2444c:	dec00204 	addi	sp,sp,8
   24450:	f800283a 	ret

00024454 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   24454:	defffd04 	addi	sp,sp,-12
   24458:	dfc00215 	stw	ra,8(sp)
   2445c:	df000115 	stw	fp,4(sp)
   24460:	df000104 	addi	fp,sp,4
   24464:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   24468:	d1600604 	addi	r5,gp,-32744
   2446c:	e13fff17 	ldw	r4,-4(fp)
   24470:	002513c0 	call	2513c <alt_dev_llist_insert>
}
   24474:	e037883a 	mov	sp,fp
   24478:	dfc00117 	ldw	ra,4(sp)
   2447c:	df000017 	ldw	fp,0(sp)
   24480:	dec00204 	addi	sp,sp,8
   24484:	f800283a 	ret

00024488 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   24488:	defffd04 	addi	sp,sp,-12
   2448c:	dfc00215 	stw	ra,8(sp)
   24490:	df000115 	stw	fp,4(sp)
   24494:	df000104 	addi	fp,sp,4
   24498:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   2449c:	0025afc0 	call	25afc <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   244a0:	00800044 	movi	r2,1
   244a4:	1001703a 	wrctl	status,r2
}
   244a8:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   244ac:	0001883a 	nop
   244b0:	e037883a 	mov	sp,fp
   244b4:	dfc00117 	ldw	ra,4(sp)
   244b8:	df000017 	ldw	fp,0(sp)
   244bc:	dec00204 	addi	sp,sp,8
   244c0:	f800283a 	ret

000244c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   244c4:	defffe04 	addi	sp,sp,-8
   244c8:	dfc00115 	stw	ra,4(sp)
   244cc:	df000015 	stw	fp,0(sp)
   244d0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   244d4:	000d883a 	mov	r6,zero
   244d8:	000b883a 	mov	r5,zero
   244dc:	010000b4 	movhi	r4,2
   244e0:	211abe04 	addi	r4,r4,27384
   244e4:	00246700 	call	24670 <altera_avalon_jtag_uart_init>
   244e8:	010000b4 	movhi	r4,2
   244ec:	211ab404 	addi	r4,r4,27344
   244f0:	00244540 	call	24454 <alt_dev_reg>
}
   244f4:	0001883a 	nop
   244f8:	e037883a 	mov	sp,fp
   244fc:	dfc00117 	ldw	ra,4(sp)
   24500:	df000017 	ldw	fp,0(sp)
   24504:	dec00204 	addi	sp,sp,8
   24508:	f800283a 	ret

0002450c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2450c:	defffa04 	addi	sp,sp,-24
   24510:	dfc00515 	stw	ra,20(sp)
   24514:	df000415 	stw	fp,16(sp)
   24518:	df000404 	addi	fp,sp,16
   2451c:	e13ffe15 	stw	r4,-8(fp)
   24520:	e17ffd15 	stw	r5,-12(fp)
   24524:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24528:	e0bffe17 	ldw	r2,-8(fp)
   2452c:	10800017 	ldw	r2,0(r2)
   24530:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   24534:	e0bfff17 	ldw	r2,-4(fp)
   24538:	10c00a04 	addi	r3,r2,40
   2453c:	e0bffe17 	ldw	r2,-8(fp)
   24540:	10800217 	ldw	r2,8(r2)
   24544:	100f883a 	mov	r7,r2
   24548:	e1bffc17 	ldw	r6,-16(fp)
   2454c:	e17ffd17 	ldw	r5,-12(fp)
   24550:	1809883a 	mov	r4,r3
   24554:	0024b380 	call	24b38 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   24558:	e037883a 	mov	sp,fp
   2455c:	dfc00117 	ldw	ra,4(sp)
   24560:	df000017 	ldw	fp,0(sp)
   24564:	dec00204 	addi	sp,sp,8
   24568:	f800283a 	ret

0002456c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2456c:	defffa04 	addi	sp,sp,-24
   24570:	dfc00515 	stw	ra,20(sp)
   24574:	df000415 	stw	fp,16(sp)
   24578:	df000404 	addi	fp,sp,16
   2457c:	e13ffe15 	stw	r4,-8(fp)
   24580:	e17ffd15 	stw	r5,-12(fp)
   24584:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   24588:	e0bffe17 	ldw	r2,-8(fp)
   2458c:	10800017 	ldw	r2,0(r2)
   24590:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   24594:	e0bfff17 	ldw	r2,-4(fp)
   24598:	10c00a04 	addi	r3,r2,40
   2459c:	e0bffe17 	ldw	r2,-8(fp)
   245a0:	10800217 	ldw	r2,8(r2)
   245a4:	100f883a 	mov	r7,r2
   245a8:	e1bffc17 	ldw	r6,-16(fp)
   245ac:	e17ffd17 	ldw	r5,-12(fp)
   245b0:	1809883a 	mov	r4,r3
   245b4:	0024d580 	call	24d58 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   245b8:	e037883a 	mov	sp,fp
   245bc:	dfc00117 	ldw	ra,4(sp)
   245c0:	df000017 	ldw	fp,0(sp)
   245c4:	dec00204 	addi	sp,sp,8
   245c8:	f800283a 	ret

000245cc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   245cc:	defffc04 	addi	sp,sp,-16
   245d0:	dfc00315 	stw	ra,12(sp)
   245d4:	df000215 	stw	fp,8(sp)
   245d8:	df000204 	addi	fp,sp,8
   245dc:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   245e0:	e0bffe17 	ldw	r2,-8(fp)
   245e4:	10800017 	ldw	r2,0(r2)
   245e8:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   245ec:	e0bfff17 	ldw	r2,-4(fp)
   245f0:	10c00a04 	addi	r3,r2,40
   245f4:	e0bffe17 	ldw	r2,-8(fp)
   245f8:	10800217 	ldw	r2,8(r2)
   245fc:	100b883a 	mov	r5,r2
   24600:	1809883a 	mov	r4,r3
   24604:	00249dc0 	call	249dc <altera_avalon_jtag_uart_close>
}
   24608:	e037883a 	mov	sp,fp
   2460c:	dfc00117 	ldw	ra,4(sp)
   24610:	df000017 	ldw	fp,0(sp)
   24614:	dec00204 	addi	sp,sp,8
   24618:	f800283a 	ret

0002461c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2461c:	defffa04 	addi	sp,sp,-24
   24620:	dfc00515 	stw	ra,20(sp)
   24624:	df000415 	stw	fp,16(sp)
   24628:	df000404 	addi	fp,sp,16
   2462c:	e13ffe15 	stw	r4,-8(fp)
   24630:	e17ffd15 	stw	r5,-12(fp)
   24634:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   24638:	e0bffe17 	ldw	r2,-8(fp)
   2463c:	10800017 	ldw	r2,0(r2)
   24640:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   24644:	e0bfff17 	ldw	r2,-4(fp)
   24648:	10800a04 	addi	r2,r2,40
   2464c:	e1bffc17 	ldw	r6,-16(fp)
   24650:	e17ffd17 	ldw	r5,-12(fp)
   24654:	1009883a 	mov	r4,r2
   24658:	0024a440 	call	24a44 <altera_avalon_jtag_uart_ioctl>
}
   2465c:	e037883a 	mov	sp,fp
   24660:	dfc00117 	ldw	ra,4(sp)
   24664:	df000017 	ldw	fp,0(sp)
   24668:	dec00204 	addi	sp,sp,8
   2466c:	f800283a 	ret

00024670 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   24670:	defffa04 	addi	sp,sp,-24
   24674:	dfc00515 	stw	ra,20(sp)
   24678:	df000415 	stw	fp,16(sp)
   2467c:	df000404 	addi	fp,sp,16
   24680:	e13fff15 	stw	r4,-4(fp)
   24684:	e17ffe15 	stw	r5,-8(fp)
   24688:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2468c:	e0bfff17 	ldw	r2,-4(fp)
   24690:	00c00044 	movi	r3,1
   24694:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   24698:	e0bfff17 	ldw	r2,-4(fp)
   2469c:	10800017 	ldw	r2,0(r2)
   246a0:	10800104 	addi	r2,r2,4
   246a4:	1007883a 	mov	r3,r2
   246a8:	e0bfff17 	ldw	r2,-4(fp)
   246ac:	10800817 	ldw	r2,32(r2)
   246b0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   246b4:	e0bffe17 	ldw	r2,-8(fp)
   246b8:	e0fffd17 	ldw	r3,-12(fp)
   246bc:	d8000015 	stw	zero,0(sp)
   246c0:	e1ffff17 	ldw	r7,-4(fp)
   246c4:	018000b4 	movhi	r6,2
   246c8:	3191cc04 	addi	r6,r6,18224
   246cc:	180b883a 	mov	r5,r3
   246d0:	1009883a 	mov	r4,r2
   246d4:	00252cc0 	call	252cc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   246d8:	e0bfff17 	ldw	r2,-4(fp)
   246dc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   246e0:	e0bfff17 	ldw	r2,-4(fp)
   246e4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   246e8:	d0e6b117 	ldw	r3,-25916(gp)
   246ec:	e1ffff17 	ldw	r7,-4(fp)
   246f0:	018000b4 	movhi	r6,2
   246f4:	31924f04 	addi	r6,r6,18748
   246f8:	180b883a 	mov	r5,r3
   246fc:	1009883a 	mov	r4,r2
   24700:	0024f800 	call	24f80 <alt_alarm_start>
   24704:	1000040e 	bge	r2,zero,24718 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   24708:	e0ffff17 	ldw	r3,-4(fp)
   2470c:	00a00034 	movhi	r2,32768
   24710:	10bfffc4 	addi	r2,r2,-1
   24714:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   24718:	0001883a 	nop
   2471c:	e037883a 	mov	sp,fp
   24720:	dfc00117 	ldw	ra,4(sp)
   24724:	df000017 	ldw	fp,0(sp)
   24728:	dec00204 	addi	sp,sp,8
   2472c:	f800283a 	ret

00024730 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   24730:	defff804 	addi	sp,sp,-32
   24734:	df000715 	stw	fp,28(sp)
   24738:	df000704 	addi	fp,sp,28
   2473c:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   24740:	e0bff917 	ldw	r2,-28(fp)
   24744:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
   24748:	e0bffd17 	ldw	r2,-12(fp)
   2474c:	10800017 	ldw	r2,0(r2)
   24750:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24754:	e0bffc17 	ldw	r2,-16(fp)
   24758:	10800104 	addi	r2,r2,4
   2475c:	10800037 	ldwio	r2,0(r2)
   24760:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   24764:	e0bffb17 	ldw	r2,-20(fp)
   24768:	1080c00c 	andi	r2,r2,768
   2476c:	10006d26 	beq	r2,zero,24924 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   24770:	e0bffb17 	ldw	r2,-20(fp)
   24774:	1080400c 	andi	r2,r2,256
   24778:	10003526 	beq	r2,zero,24850 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2477c:	00800074 	movhi	r2,1
   24780:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24784:	e0bffd17 	ldw	r2,-12(fp)
   24788:	10800a17 	ldw	r2,40(r2)
   2478c:	10800044 	addi	r2,r2,1
   24790:	1081ffcc 	andi	r2,r2,2047
   24794:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
   24798:	e0bffd17 	ldw	r2,-12(fp)
   2479c:	10800b17 	ldw	r2,44(r2)
   247a0:	e0fffa17 	ldw	r3,-24(fp)
   247a4:	18801526 	beq	r3,r2,247fc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   247a8:	e0bffc17 	ldw	r2,-16(fp)
   247ac:	10800037 	ldwio	r2,0(r2)
   247b0:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   247b4:	e0bfff17 	ldw	r2,-4(fp)
   247b8:	10a0000c 	andi	r2,r2,32768
   247bc:	10001126 	beq	r2,zero,24804 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   247c0:	e0bffd17 	ldw	r2,-12(fp)
   247c4:	10800a17 	ldw	r2,40(r2)
   247c8:	e0ffff17 	ldw	r3,-4(fp)
   247cc:	1809883a 	mov	r4,r3
   247d0:	e0fffd17 	ldw	r3,-12(fp)
   247d4:	1885883a 	add	r2,r3,r2
   247d8:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   247dc:	e0bffd17 	ldw	r2,-12(fp)
   247e0:	10800a17 	ldw	r2,40(r2)
   247e4:	10800044 	addi	r2,r2,1
   247e8:	10c1ffcc 	andi	r3,r2,2047
   247ec:	e0bffd17 	ldw	r2,-12(fp)
   247f0:	10c00a15 	stw	r3,40(r2)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
   247f4:	0001883a 	nop
      {
   247f8:	003fe206 	br	24784 <altera_avalon_jtag_uart_irq+0x54>
          break;
   247fc:	0001883a 	nop
   24800:	00000106 	br	24808 <altera_avalon_jtag_uart_irq+0xd8>
          break;
   24804:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   24808:	e0bfff17 	ldw	r2,-4(fp)
   2480c:	10bfffec 	andhi	r2,r2,65535
   24810:	10000f26 	beq	r2,zero,24850 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24814:	e0bffd17 	ldw	r2,-12(fp)
   24818:	10c00817 	ldw	r3,32(r2)
   2481c:	00bfff84 	movi	r2,-2
   24820:	1886703a 	and	r3,r3,r2
   24824:	e0bffd17 	ldw	r2,-12(fp)
   24828:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2482c:	e0bffc17 	ldw	r2,-16(fp)
   24830:	10800104 	addi	r2,r2,4
   24834:	1007883a 	mov	r3,r2
   24838:	e0bffd17 	ldw	r2,-12(fp)
   2483c:	10800817 	ldw	r2,32(r2)
   24840:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24844:	e0bffc17 	ldw	r2,-16(fp)
   24848:	10800104 	addi	r2,r2,4
   2484c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   24850:	e0bffb17 	ldw	r2,-20(fp)
   24854:	1080800c 	andi	r2,r2,512
   24858:	103fbe26 	beq	r2,zero,24754 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2485c:	e0bffb17 	ldw	r2,-20(fp)
   24860:	1004d43a 	srli	r2,r2,16
   24864:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   24868:	00001406 	br	248bc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2486c:	e0bffc17 	ldw	r2,-16(fp)
   24870:	e0fffd17 	ldw	r3,-12(fp)
   24874:	18c00d17 	ldw	r3,52(r3)
   24878:	e13ffd17 	ldw	r4,-12(fp)
   2487c:	20c7883a 	add	r3,r4,r3
   24880:	18c20e03 	ldbu	r3,2104(r3)
   24884:	18c03fcc 	andi	r3,r3,255
   24888:	18c0201c 	xori	r3,r3,128
   2488c:	18ffe004 	addi	r3,r3,-128
   24890:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24894:	e0bffd17 	ldw	r2,-12(fp)
   24898:	10800d17 	ldw	r2,52(r2)
   2489c:	10800044 	addi	r2,r2,1
   248a0:	10c1ffcc 	andi	r3,r2,2047
   248a4:	e0bffd17 	ldw	r2,-12(fp)
   248a8:	10c00d15 	stw	r3,52(r2)
   248ac:	0001883a 	nop

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   248b0:	e0bffe17 	ldw	r2,-8(fp)
   248b4:	10bfffc4 	addi	r2,r2,-1
   248b8:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
   248bc:	e0bffe17 	ldw	r2,-8(fp)
   248c0:	10000526 	beq	r2,zero,248d8 <altera_avalon_jtag_uart_irq+0x1a8>
   248c4:	e0bffd17 	ldw	r2,-12(fp)
   248c8:	10c00d17 	ldw	r3,52(r2)
   248cc:	e0bffd17 	ldw	r2,-12(fp)
   248d0:	10800c17 	ldw	r2,48(r2)
   248d4:	18bfe51e 	bne	r3,r2,2486c <altera_avalon_jtag_uart_irq+0x13c>
      }

      if (space > 0)
   248d8:	e0bffe17 	ldw	r2,-8(fp)
   248dc:	103f9d26 	beq	r2,zero,24754 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   248e0:	e0bffd17 	ldw	r2,-12(fp)
   248e4:	10c00817 	ldw	r3,32(r2)
   248e8:	00bfff44 	movi	r2,-3
   248ec:	1886703a 	and	r3,r3,r2
   248f0:	e0bffd17 	ldw	r2,-12(fp)
   248f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   248f8:	e0bffd17 	ldw	r2,-12(fp)
   248fc:	10800017 	ldw	r2,0(r2)
   24900:	10800104 	addi	r2,r2,4
   24904:	1007883a 	mov	r3,r2
   24908:	e0bffd17 	ldw	r2,-12(fp)
   2490c:	10800817 	ldw	r2,32(r2)
   24910:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24914:	e0bffc17 	ldw	r2,-16(fp)
   24918:	10800104 	addi	r2,r2,4
   2491c:	10800037 	ldwio	r2,0(r2)
  {
   24920:	003f8c06 	br	24754 <altera_avalon_jtag_uart_irq+0x24>
      break;
   24924:	0001883a 	nop
      }
    }
  }
}
   24928:	0001883a 	nop
   2492c:	e037883a 	mov	sp,fp
   24930:	df000017 	ldw	fp,0(sp)
   24934:	dec00104 	addi	sp,sp,4
   24938:	f800283a 	ret

0002493c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2493c:	defffc04 	addi	sp,sp,-16
   24940:	df000315 	stw	fp,12(sp)
   24944:	df000304 	addi	fp,sp,12
   24948:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2494c:	e0bffd17 	ldw	r2,-12(fp)
   24950:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   24954:	e0bfff17 	ldw	r2,-4(fp)
   24958:	10800017 	ldw	r2,0(r2)
   2495c:	10800104 	addi	r2,r2,4
   24960:	10800037 	ldwio	r2,0(r2)
   24964:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   24968:	e0bffe17 	ldw	r2,-8(fp)
   2496c:	1081000c 	andi	r2,r2,1024
   24970:	10000b26 	beq	r2,zero,249a0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   24974:	e0bfff17 	ldw	r2,-4(fp)
   24978:	10800017 	ldw	r2,0(r2)
   2497c:	10800104 	addi	r2,r2,4
   24980:	1007883a 	mov	r3,r2
   24984:	e0bfff17 	ldw	r2,-4(fp)
   24988:	10800817 	ldw	r2,32(r2)
   2498c:	10810014 	ori	r2,r2,1024
   24990:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   24994:	e0bfff17 	ldw	r2,-4(fp)
   24998:	10000915 	stw	zero,36(r2)
   2499c:	00000a06 	br	249c8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   249a0:	e0bfff17 	ldw	r2,-4(fp)
   249a4:	10c00917 	ldw	r3,36(r2)
   249a8:	00a00034 	movhi	r2,32768
   249ac:	10bfff04 	addi	r2,r2,-4
   249b0:	10c00536 	bltu	r2,r3,249c8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   249b4:	e0bfff17 	ldw	r2,-4(fp)
   249b8:	10800917 	ldw	r2,36(r2)
   249bc:	10c00044 	addi	r3,r2,1
   249c0:	e0bfff17 	ldw	r2,-4(fp)
   249c4:	10c00915 	stw	r3,36(r2)
   249c8:	d0a6b117 	ldw	r2,-25916(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   249cc:	e037883a 	mov	sp,fp
   249d0:	df000017 	ldw	fp,0(sp)
   249d4:	dec00104 	addi	sp,sp,4
   249d8:	f800283a 	ret

000249dc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   249dc:	defffd04 	addi	sp,sp,-12
   249e0:	df000215 	stw	fp,8(sp)
   249e4:	df000204 	addi	fp,sp,8
   249e8:	e13fff15 	stw	r4,-4(fp)
   249ec:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   249f0:	00000506 	br	24a08 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   249f4:	e0bffe17 	ldw	r2,-8(fp)
   249f8:	1090000c 	andi	r2,r2,16384
   249fc:	10000226 	beq	r2,zero,24a08 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   24a00:	00bffd44 	movi	r2,-11
   24a04:	00000b06 	br	24a34 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   24a08:	e0bfff17 	ldw	r2,-4(fp)
   24a0c:	10c00d17 	ldw	r3,52(r2)
   24a10:	e0bfff17 	ldw	r2,-4(fp)
   24a14:	10800c17 	ldw	r2,48(r2)
   24a18:	18800526 	beq	r3,r2,24a30 <altera_avalon_jtag_uart_close+0x54>
   24a1c:	e0bfff17 	ldw	r2,-4(fp)
   24a20:	10c00917 	ldw	r3,36(r2)
   24a24:	e0bfff17 	ldw	r2,-4(fp)
   24a28:	10800117 	ldw	r2,4(r2)
   24a2c:	18bff136 	bltu	r3,r2,249f4 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
   24a30:	0005883a 	mov	r2,zero
}
   24a34:	e037883a 	mov	sp,fp
   24a38:	df000017 	ldw	fp,0(sp)
   24a3c:	dec00104 	addi	sp,sp,4
   24a40:	f800283a 	ret

00024a44 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   24a44:	defffa04 	addi	sp,sp,-24
   24a48:	df000515 	stw	fp,20(sp)
   24a4c:	df000504 	addi	fp,sp,20
   24a50:	e13ffd15 	stw	r4,-12(fp)
   24a54:	e17ffc15 	stw	r5,-16(fp)
   24a58:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
   24a5c:	00bff9c4 	movi	r2,-25
   24a60:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
   24a64:	e0bffc17 	ldw	r2,-16(fp)
   24a68:	109a8060 	cmpeqi	r2,r2,27137
   24a6c:	1000041e 	bne	r2,zero,24a80 <altera_avalon_jtag_uart_ioctl+0x3c>
   24a70:	e0bffc17 	ldw	r2,-16(fp)
   24a74:	109a80a0 	cmpeqi	r2,r2,27138
   24a78:	1000181e 	bne	r2,zero,24adc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   24a7c:	00002906 	br	24b24 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
   24a80:	e0bffd17 	ldw	r2,-12(fp)
   24a84:	10c00117 	ldw	r3,4(r2)
   24a88:	00a00034 	movhi	r2,32768
   24a8c:	10bfffc4 	addi	r2,r2,-1
   24a90:	18802126 	beq	r3,r2,24b18 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
   24a94:	e0bffb17 	ldw	r2,-20(fp)
   24a98:	10800017 	ldw	r2,0(r2)
   24a9c:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   24aa0:	e0bffe17 	ldw	r2,-8(fp)
   24aa4:	10800090 	cmplti	r2,r2,2
   24aa8:	1000061e 	bne	r2,zero,24ac4 <altera_avalon_jtag_uart_ioctl+0x80>
   24aac:	e0fffe17 	ldw	r3,-8(fp)
   24ab0:	00a00034 	movhi	r2,32768
   24ab4:	10bfffc4 	addi	r2,r2,-1
   24ab8:	18800226 	beq	r3,r2,24ac4 <altera_avalon_jtag_uart_ioctl+0x80>
   24abc:	e0bffe17 	ldw	r2,-8(fp)
   24ac0:	00000206 	br	24acc <altera_avalon_jtag_uart_ioctl+0x88>
   24ac4:	00a00034 	movhi	r2,32768
   24ac8:	10bfff84 	addi	r2,r2,-2
   24acc:	e0fffd17 	ldw	r3,-12(fp)
   24ad0:	18800115 	stw	r2,4(r3)
      rc = 0;
   24ad4:	e03fff15 	stw	zero,-4(fp)
    break;
   24ad8:	00000f06 	br	24b18 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
   24adc:	e0bffd17 	ldw	r2,-12(fp)
   24ae0:	10c00117 	ldw	r3,4(r2)
   24ae4:	00a00034 	movhi	r2,32768
   24ae8:	10bfffc4 	addi	r2,r2,-1
   24aec:	18800c26 	beq	r3,r2,24b20 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   24af0:	e0bffd17 	ldw	r2,-12(fp)
   24af4:	10c00917 	ldw	r3,36(r2)
   24af8:	e0bffd17 	ldw	r2,-12(fp)
   24afc:	10800117 	ldw	r2,4(r2)
   24b00:	1885803a 	cmpltu	r2,r3,r2
   24b04:	10c03fcc 	andi	r3,r2,255
   24b08:	e0bffb17 	ldw	r2,-20(fp)
   24b0c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   24b10:	e03fff15 	stw	zero,-4(fp)
    break;
   24b14:	00000206 	br	24b20 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
   24b18:	0001883a 	nop
   24b1c:	00000106 	br	24b24 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
   24b20:	0001883a 	nop
  }

  return rc;
   24b24:	e0bfff17 	ldw	r2,-4(fp)
}
   24b28:	e037883a 	mov	sp,fp
   24b2c:	df000017 	ldw	fp,0(sp)
   24b30:	dec00104 	addi	sp,sp,4
   24b34:	f800283a 	ret

00024b38 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   24b38:	defff304 	addi	sp,sp,-52
   24b3c:	dfc00c15 	stw	ra,48(sp)
   24b40:	df000b15 	stw	fp,44(sp)
   24b44:	df000b04 	addi	fp,sp,44
   24b48:	e13ff815 	stw	r4,-32(fp)
   24b4c:	e17ff715 	stw	r5,-36(fp)
   24b50:	e1bff615 	stw	r6,-40(fp)
   24b54:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
   24b58:	e0bff717 	ldw	r2,-36(fp)
   24b5c:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24b60:	00004706 	br	24c80 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   24b64:	e0bff817 	ldw	r2,-32(fp)
   24b68:	10800a17 	ldw	r2,40(r2)
   24b6c:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
   24b70:	e0bff817 	ldw	r2,-32(fp)
   24b74:	10800b17 	ldw	r2,44(r2)
   24b78:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
   24b7c:	e0fffd17 	ldw	r3,-12(fp)
   24b80:	e0bffc17 	ldw	r2,-16(fp)
   24b84:	18800536 	bltu	r3,r2,24b9c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   24b88:	e0fffd17 	ldw	r3,-12(fp)
   24b8c:	e0bffc17 	ldw	r2,-16(fp)
   24b90:	1885c83a 	sub	r2,r3,r2
   24b94:	e0bffe15 	stw	r2,-8(fp)
   24b98:	00000406 	br	24bac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   24b9c:	00c20004 	movi	r3,2048
   24ba0:	e0bffc17 	ldw	r2,-16(fp)
   24ba4:	1885c83a 	sub	r2,r3,r2
   24ba8:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   24bac:	e0bffe17 	ldw	r2,-8(fp)
   24bb0:	10001e26 	beq	r2,zero,24c2c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   24bb4:	e0fff617 	ldw	r3,-40(fp)
   24bb8:	e0bffe17 	ldw	r2,-8(fp)
   24bbc:	1880022e 	bgeu	r3,r2,24bc8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   24bc0:	e0bff617 	ldw	r2,-40(fp)
   24bc4:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   24bc8:	e0bff817 	ldw	r2,-32(fp)
   24bcc:	10c00e04 	addi	r3,r2,56
   24bd0:	e0bffc17 	ldw	r2,-16(fp)
   24bd4:	1885883a 	add	r2,r3,r2
   24bd8:	e1bffe17 	ldw	r6,-8(fp)
   24bdc:	100b883a 	mov	r5,r2
   24be0:	e13fff17 	ldw	r4,-4(fp)
   24be4:	002203c0 	call	2203c <memcpy>
      ptr   += n;
   24be8:	e0ffff17 	ldw	r3,-4(fp)
   24bec:	e0bffe17 	ldw	r2,-8(fp)
   24bf0:	1885883a 	add	r2,r3,r2
   24bf4:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
   24bf8:	e0fff617 	ldw	r3,-40(fp)
   24bfc:	e0bffe17 	ldw	r2,-8(fp)
   24c00:	1885c83a 	sub	r2,r3,r2
   24c04:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24c08:	e0fffc17 	ldw	r3,-16(fp)
   24c0c:	e0bffe17 	ldw	r2,-8(fp)
   24c10:	1885883a 	add	r2,r3,r2
   24c14:	10c1ffcc 	andi	r3,r2,2047
   24c18:	e0bff817 	ldw	r2,-32(fp)
   24c1c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   24c20:	e0bff617 	ldw	r2,-40(fp)
   24c24:	00bfcf16 	blt	zero,r2,24b64 <altera_avalon_jtag_uart_read+0x2c>
   24c28:	00000106 	br	24c30 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
   24c2c:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
   24c30:	e0ffff17 	ldw	r3,-4(fp)
   24c34:	e0bff717 	ldw	r2,-36(fp)
   24c38:	1880141e 	bne	r3,r2,24c8c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   24c3c:	e0bff517 	ldw	r2,-44(fp)
   24c40:	1090000c 	andi	r2,r2,16384
   24c44:	1000131e 	bne	r2,zero,24c94 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   24c48:	0001883a 	nop
   24c4c:	e0bff817 	ldw	r2,-32(fp)
   24c50:	10800a17 	ldw	r2,40(r2)
   24c54:	e0fffd17 	ldw	r3,-12(fp)
   24c58:	1880051e 	bne	r3,r2,24c70 <altera_avalon_jtag_uart_read+0x138>
   24c5c:	e0bff817 	ldw	r2,-32(fp)
   24c60:	10c00917 	ldw	r3,36(r2)
   24c64:	e0bff817 	ldw	r2,-32(fp)
   24c68:	10800117 	ldw	r2,4(r2)
   24c6c:	18bff736 	bltu	r3,r2,24c4c <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   24c70:	e0bff817 	ldw	r2,-32(fp)
   24c74:	10800a17 	ldw	r2,40(r2)
   24c78:	e0fffd17 	ldw	r3,-12(fp)
   24c7c:	18800726 	beq	r3,r2,24c9c <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
   24c80:	e0bff617 	ldw	r2,-40(fp)
   24c84:	00bfb716 	blt	zero,r2,24b64 <altera_avalon_jtag_uart_read+0x2c>
   24c88:	00000506 	br	24ca0 <altera_avalon_jtag_uart_read+0x168>
      break;
   24c8c:	0001883a 	nop
   24c90:	00000306 	br	24ca0 <altera_avalon_jtag_uart_read+0x168>
      break;
   24c94:	0001883a 	nop
   24c98:	00000106 	br	24ca0 <altera_avalon_jtag_uart_read+0x168>
      break;
   24c9c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   24ca0:	e0ffff17 	ldw	r3,-4(fp)
   24ca4:	e0bff717 	ldw	r2,-36(fp)
   24ca8:	18801926 	beq	r3,r2,24d10 <altera_avalon_jtag_uart_read+0x1d8>
  NIOS2_READ_STATUS (context);
   24cac:	0005303a 	rdctl	r2,status
   24cb0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24cb4:	e0fff917 	ldw	r3,-28(fp)
   24cb8:	00bfff84 	movi	r2,-2
   24cbc:	1884703a 	and	r2,r3,r2
   24cc0:	1001703a 	wrctl	status,r2
  return context;
   24cc4:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   24cc8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24ccc:	e0bff817 	ldw	r2,-32(fp)
   24cd0:	10800817 	ldw	r2,32(r2)
   24cd4:	10c00054 	ori	r3,r2,1
   24cd8:	e0bff817 	ldw	r2,-32(fp)
   24cdc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24ce0:	e0bff817 	ldw	r2,-32(fp)
   24ce4:	10800017 	ldw	r2,0(r2)
   24ce8:	10800104 	addi	r2,r2,4
   24cec:	1007883a 	mov	r3,r2
   24cf0:	e0bff817 	ldw	r2,-32(fp)
   24cf4:	10800817 	ldw	r2,32(r2)
   24cf8:	18800035 	stwio	r2,0(r3)
   24cfc:	e0bffb17 	ldw	r2,-20(fp)
   24d00:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   24d04:	e0bffa17 	ldw	r2,-24(fp)
   24d08:	1001703a 	wrctl	status,r2
}
   24d0c:	0001883a 	nop
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   24d10:	e0ffff17 	ldw	r3,-4(fp)
   24d14:	e0bff717 	ldw	r2,-36(fp)
   24d18:	18800426 	beq	r3,r2,24d2c <altera_avalon_jtag_uart_read+0x1f4>
    return ptr - buffer;
   24d1c:	e0ffff17 	ldw	r3,-4(fp)
   24d20:	e0bff717 	ldw	r2,-36(fp)
   24d24:	1885c83a 	sub	r2,r3,r2
   24d28:	00000606 	br	24d44 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
   24d2c:	e0bff517 	ldw	r2,-44(fp)
   24d30:	1090000c 	andi	r2,r2,16384
   24d34:	10000226 	beq	r2,zero,24d40 <altera_avalon_jtag_uart_read+0x208>
    return -EWOULDBLOCK;
   24d38:	00bffd44 	movi	r2,-11
   24d3c:	00000106 	br	24d44 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
   24d40:	00bffec4 	movi	r2,-5
}
   24d44:	e037883a 	mov	sp,fp
   24d48:	dfc00117 	ldw	ra,4(sp)
   24d4c:	df000017 	ldw	fp,0(sp)
   24d50:	dec00204 	addi	sp,sp,8
   24d54:	f800283a 	ret

00024d58 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   24d58:	defff304 	addi	sp,sp,-52
   24d5c:	dfc00c15 	stw	ra,48(sp)
   24d60:	df000b15 	stw	fp,44(sp)
   24d64:	df000b04 	addi	fp,sp,44
   24d68:	e13ff815 	stw	r4,-32(fp)
   24d6c:	e17ff715 	stw	r5,-36(fp)
   24d70:	e1bff615 	stw	r6,-40(fp)
   24d74:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   24d78:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   24d7c:	e0bff717 	ldw	r2,-36(fp)
   24d80:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24d84:	00003706 	br	24e64 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   24d88:	e0bff817 	ldw	r2,-32(fp)
   24d8c:	10800c17 	ldw	r2,48(r2)
   24d90:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
   24d94:	e0bff817 	ldw	r2,-32(fp)
   24d98:	10800d17 	ldw	r2,52(r2)
   24d9c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
   24da0:	e0fffc17 	ldw	r3,-16(fp)
   24da4:	e0bfff17 	ldw	r2,-4(fp)
   24da8:	1880062e 	bgeu	r3,r2,24dc4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   24dac:	e0ffff17 	ldw	r3,-4(fp)
   24db0:	e0bffc17 	ldw	r2,-16(fp)
   24db4:	1885c83a 	sub	r2,r3,r2
   24db8:	10bfffc4 	addi	r2,r2,-1
   24dbc:	e0bffe15 	stw	r2,-8(fp)
   24dc0:	00000b06 	br	24df0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   24dc4:	e0bfff17 	ldw	r2,-4(fp)
   24dc8:	10000526 	beq	r2,zero,24de0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   24dcc:	00c20004 	movi	r3,2048
   24dd0:	e0bffc17 	ldw	r2,-16(fp)
   24dd4:	1885c83a 	sub	r2,r3,r2
   24dd8:	e0bffe15 	stw	r2,-8(fp)
   24ddc:	00000406 	br	24df0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   24de0:	00c1ffc4 	movi	r3,2047
   24de4:	e0bffc17 	ldw	r2,-16(fp)
   24de8:	1885c83a 	sub	r2,r3,r2
   24dec:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
   24df0:	e0bffe17 	ldw	r2,-8(fp)
   24df4:	10001e26 	beq	r2,zero,24e70 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   24df8:	e0fff617 	ldw	r3,-40(fp)
   24dfc:	e0bffe17 	ldw	r2,-8(fp)
   24e00:	1880022e 	bgeu	r3,r2,24e0c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   24e04:	e0bff617 	ldw	r2,-40(fp)
   24e08:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   24e0c:	e0bff817 	ldw	r2,-32(fp)
   24e10:	10c20e04 	addi	r3,r2,2104
   24e14:	e0bffc17 	ldw	r2,-16(fp)
   24e18:	1885883a 	add	r2,r3,r2
   24e1c:	e1bffe17 	ldw	r6,-8(fp)
   24e20:	e17ff717 	ldw	r5,-36(fp)
   24e24:	1009883a 	mov	r4,r2
   24e28:	002203c0 	call	2203c <memcpy>
      ptr   += n;
   24e2c:	e0fff717 	ldw	r3,-36(fp)
   24e30:	e0bffe17 	ldw	r2,-8(fp)
   24e34:	1885883a 	add	r2,r3,r2
   24e38:	e0bff715 	stw	r2,-36(fp)
      count -= n;
   24e3c:	e0fff617 	ldw	r3,-40(fp)
   24e40:	e0bffe17 	ldw	r2,-8(fp)
   24e44:	1885c83a 	sub	r2,r3,r2
   24e48:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24e4c:	e0fffc17 	ldw	r3,-16(fp)
   24e50:	e0bffe17 	ldw	r2,-8(fp)
   24e54:	1885883a 	add	r2,r3,r2
   24e58:	10c1ffcc 	andi	r3,r2,2047
   24e5c:	e0bff817 	ldw	r2,-32(fp)
   24e60:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
   24e64:	e0bff617 	ldw	r2,-40(fp)
   24e68:	00bfc716 	blt	zero,r2,24d88 <altera_avalon_jtag_uart_write+0x30>
   24e6c:	00000106 	br	24e74 <altera_avalon_jtag_uart_write+0x11c>
        break;
   24e70:	0001883a 	nop
  NIOS2_READ_STATUS (context);
   24e74:	0005303a 	rdctl	r2,status
   24e78:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24e7c:	e0fff917 	ldw	r3,-28(fp)
   24e80:	00bfff84 	movi	r2,-2
   24e84:	1884703a 	and	r2,r3,r2
   24e88:	1001703a 	wrctl	status,r2
  return context;
   24e8c:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   24e90:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24e94:	e0bff817 	ldw	r2,-32(fp)
   24e98:	10800817 	ldw	r2,32(r2)
   24e9c:	10c00094 	ori	r3,r2,2
   24ea0:	e0bff817 	ldw	r2,-32(fp)
   24ea4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24ea8:	e0bff817 	ldw	r2,-32(fp)
   24eac:	10800017 	ldw	r2,0(r2)
   24eb0:	10800104 	addi	r2,r2,4
   24eb4:	1007883a 	mov	r3,r2
   24eb8:	e0bff817 	ldw	r2,-32(fp)
   24ebc:	10800817 	ldw	r2,32(r2)
   24ec0:	18800035 	stwio	r2,0(r3)
   24ec4:	e0bffb17 	ldw	r2,-20(fp)
   24ec8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
   24ecc:	e0bffa17 	ldw	r2,-24(fp)
   24ed0:	1001703a 	wrctl	status,r2
}
   24ed4:	0001883a 	nop
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   24ed8:	e0bff617 	ldw	r2,-40(fp)
   24edc:	0080100e 	bge	zero,r2,24f20 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   24ee0:	e0bff517 	ldw	r2,-44(fp)
   24ee4:	1090000c 	andi	r2,r2,16384
   24ee8:	1000101e 	bne	r2,zero,24f2c <altera_avalon_jtag_uart_write+0x1d4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   24eec:	0001883a 	nop
   24ef0:	e0bff817 	ldw	r2,-32(fp)
   24ef4:	10800d17 	ldw	r2,52(r2)
   24ef8:	e0ffff17 	ldw	r3,-4(fp)
   24efc:	1880051e 	bne	r3,r2,24f14 <altera_avalon_jtag_uart_write+0x1bc>
   24f00:	e0bff817 	ldw	r2,-32(fp)
   24f04:	10c00917 	ldw	r3,36(r2)
   24f08:	e0bff817 	ldw	r2,-32(fp)
   24f0c:	10800117 	ldw	r2,4(r2)
   24f10:	18bff736 	bltu	r3,r2,24ef0 <altera_avalon_jtag_uart_write+0x198>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   24f14:	e0bff817 	ldw	r2,-32(fp)
   24f18:	10800917 	ldw	r2,36(r2)
   24f1c:	1000051e 	bne	r2,zero,24f34 <altera_avalon_jtag_uart_write+0x1dc>
         break;
    }
  }
  while (count > 0);
   24f20:	e0bff617 	ldw	r2,-40(fp)
   24f24:	00bfcf16 	blt	zero,r2,24e64 <altera_avalon_jtag_uart_write+0x10c>
   24f28:	00000306 	br	24f38 <altera_avalon_jtag_uart_write+0x1e0>
        break;
   24f2c:	0001883a 	nop
   24f30:	00000106 	br	24f38 <altera_avalon_jtag_uart_write+0x1e0>
         break;
   24f34:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   24f38:	e0fff717 	ldw	r3,-36(fp)
   24f3c:	e0bffd17 	ldw	r2,-12(fp)
   24f40:	18800426 	beq	r3,r2,24f54 <altera_avalon_jtag_uart_write+0x1fc>
    return ptr - start;
   24f44:	e0fff717 	ldw	r3,-36(fp)
   24f48:	e0bffd17 	ldw	r2,-12(fp)
   24f4c:	1885c83a 	sub	r2,r3,r2
   24f50:	00000606 	br	24f6c <altera_avalon_jtag_uart_write+0x214>
  else if (flags & O_NONBLOCK)
   24f54:	e0bff517 	ldw	r2,-44(fp)
   24f58:	1090000c 	andi	r2,r2,16384
   24f5c:	10000226 	beq	r2,zero,24f68 <altera_avalon_jtag_uart_write+0x210>
    return -EWOULDBLOCK;
   24f60:	00bffd44 	movi	r2,-11
   24f64:	00000106 	br	24f6c <altera_avalon_jtag_uart_write+0x214>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   24f68:	00bffec4 	movi	r2,-5
}
   24f6c:	e037883a 	mov	sp,fp
   24f70:	dfc00117 	ldw	ra,4(sp)
   24f74:	df000017 	ldw	fp,0(sp)
   24f78:	dec00204 	addi	sp,sp,8
   24f7c:	f800283a 	ret

00024f80 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   24f80:	defff404 	addi	sp,sp,-48
   24f84:	df000b15 	stw	fp,44(sp)
   24f88:	df000b04 	addi	fp,sp,44
   24f8c:	e13ff815 	stw	r4,-32(fp)
   24f90:	e17ff715 	stw	r5,-36(fp)
   24f94:	e1bff615 	stw	r6,-40(fp)
   24f98:	e1fff515 	stw	r7,-44(fp)
  alt_irq_context irq_context;
  alt_u64 current_nticks = 0;
   24f9c:	e03ffe15 	stw	zero,-8(fp)
   24fa0:	e03fff15 	stw	zero,-4(fp)
   24fa4:	d0a6b117 	ldw	r2,-25916(gp)
  
  if (alt_ticks_per_second ())
   24fa8:	10004826 	beq	r2,zero,250cc <alt_alarm_start+0x14c>
  {
    if (alarm)
   24fac:	e0bff817 	ldw	r2,-32(fp)
   24fb0:	10004426 	beq	r2,zero,250c4 <alt_alarm_start+0x144>
    {
      alarm->callback = callback;
   24fb4:	e0bff817 	ldw	r2,-32(fp)
   24fb8:	e0fff617 	ldw	r3,-40(fp)
   24fbc:	10c00415 	stw	r3,16(r2)
      alarm->context  = context;
   24fc0:	e0bff817 	ldw	r2,-32(fp)
   24fc4:	e0fff517 	ldw	r3,-44(fp)
   24fc8:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
   24fcc:	0005303a 	rdctl	r2,status
   24fd0:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24fd4:	e0fff917 	ldw	r3,-28(fp)
   24fd8:	00bfff84 	movi	r2,-2
   24fdc:	1884703a 	and	r2,r3,r2
   24fe0:	1001703a 	wrctl	status,r2
  return context;
   24fe4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   24fe8:	e0bffd15 	stw	r2,-12(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u64 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   24fec:	d0a6b217 	ldw	r2,-25912(gp)
   24ff0:	d0e6b317 	ldw	r3,-25908(gp)
      
      current_nticks = alt_nticks();
   24ff4:	e0bffe15 	stw	r2,-8(fp)
   24ff8:	e0ffff15 	stw	r3,-4(fp)
      
      alarm->time = (alt_u64)nticks + current_nticks + 1; 
   24ffc:	e0bff717 	ldw	r2,-36(fp)
   25000:	1011883a 	mov	r8,r2
   25004:	0013883a 	mov	r9,zero
   25008:	e13ffe17 	ldw	r4,-8(fp)
   2500c:	e17fff17 	ldw	r5,-4(fp)
   25010:	4105883a 	add	r2,r8,r4
   25014:	120d803a 	cmpltu	r6,r2,r8
   25018:	4947883a 	add	r3,r9,r5
   2501c:	30c9883a 	add	r4,r6,r3
   25020:	2007883a 	mov	r3,r4
   25024:	1009883a 	mov	r4,r2
   25028:	180b883a 	mov	r5,r3
   2502c:	01800044 	movi	r6,1
   25030:	000f883a 	mov	r7,zero
   25034:	2185883a 	add	r2,r4,r6
   25038:	1111803a 	cmpltu	r8,r2,r4
   2503c:	29c7883a 	add	r3,r5,r7
   25040:	40c9883a 	add	r4,r8,r3
   25044:	2007883a 	mov	r3,r4
   25048:	1009883a 	mov	r4,r2
   2504c:	180b883a 	mov	r5,r3
   25050:	e0bff817 	ldw	r2,-32(fp)
   25054:	11000215 	stw	r4,8(r2)
   25058:	11400315 	stw	r5,12(r2)
          
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2505c:	e0bff817 	ldw	r2,-32(fp)
   25060:	d0e00c04 	addi	r3,gp,-32720
   25064:	e0fffb15 	stw	r3,-20(fp)
   25068:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2506c:	e0bffa17 	ldw	r2,-24(fp)
   25070:	e0fffb17 	ldw	r3,-20(fp)
   25074:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   25078:	e0bffb17 	ldw	r2,-20(fp)
   2507c:	10c00017 	ldw	r3,0(r2)
   25080:	e0bffa17 	ldw	r2,-24(fp)
   25084:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   25088:	e0bffb17 	ldw	r2,-20(fp)
   2508c:	10800017 	ldw	r2,0(r2)
   25090:	e0fffa17 	ldw	r3,-24(fp)
   25094:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   25098:	e0bffb17 	ldw	r2,-20(fp)
   2509c:	e0fffa17 	ldw	r3,-24(fp)
   250a0:	10c00015 	stw	r3,0(r2)
}
   250a4:	0001883a 	nop
   250a8:	e0bffd17 	ldw	r2,-12(fp)
   250ac:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   250b0:	e0bffc17 	ldw	r2,-16(fp)
   250b4:	1001703a 	wrctl	status,r2
}
   250b8:	0001883a 	nop
      alt_irq_enable_all (irq_context);

      return 0;
   250bc:	0005883a 	mov	r2,zero
   250c0:	00000306 	br	250d0 <alt_alarm_start+0x150>
    }
    else
    {
      return -EINVAL;
   250c4:	00bffa84 	movi	r2,-22
   250c8:	00000106 	br	250d0 <alt_alarm_start+0x150>
    }
  }
  else
  {
    return -ENOTSUP;
   250cc:	00bfde84 	movi	r2,-134
  }
}
   250d0:	e037883a 	mov	sp,fp
   250d4:	df000017 	ldw	fp,0(sp)
   250d8:	dec00104 	addi	sp,sp,4
   250dc:	f800283a 	ret

000250e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   250e0:	deffff04 	addi	sp,sp,-4
   250e4:	df000015 	stw	fp,0(sp)
   250e8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   250ec:	0001883a 	nop
   250f0:	e037883a 	mov	sp,fp
   250f4:	df000017 	ldw	fp,0(sp)
   250f8:	dec00104 	addi	sp,sp,4
   250fc:	f800283a 	ret

00025100 <alt_get_errno>:
{
   25100:	defffe04 	addi	sp,sp,-8
   25104:	dfc00115 	stw	ra,4(sp)
   25108:	df000015 	stw	fp,0(sp)
   2510c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25110:	d0a00917 	ldw	r2,-32732(gp)
   25114:	10000326 	beq	r2,zero,25124 <alt_get_errno+0x24>
   25118:	d0a00917 	ldw	r2,-32732(gp)
   2511c:	103ee83a 	callr	r2
   25120:	00000106 	br	25128 <alt_get_errno+0x28>
   25124:	d0a6ac04 	addi	r2,gp,-25936
}
   25128:	e037883a 	mov	sp,fp
   2512c:	dfc00117 	ldw	ra,4(sp)
   25130:	df000017 	ldw	fp,0(sp)
   25134:	dec00204 	addi	sp,sp,8
   25138:	f800283a 	ret

0002513c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2513c:	defffa04 	addi	sp,sp,-24
   25140:	dfc00515 	stw	ra,20(sp)
   25144:	df000415 	stw	fp,16(sp)
   25148:	df000404 	addi	fp,sp,16
   2514c:	e13ffd15 	stw	r4,-12(fp)
   25150:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   25154:	e0bffd17 	ldw	r2,-12(fp)
   25158:	10000326 	beq	r2,zero,25168 <alt_dev_llist_insert+0x2c>
   2515c:	e0bffd17 	ldw	r2,-12(fp)
   25160:	10800217 	ldw	r2,8(r2)
   25164:	1000061e 	bne	r2,zero,25180 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   25168:	00251000 	call	25100 <alt_get_errno>
   2516c:	1007883a 	mov	r3,r2
   25170:	00800584 	movi	r2,22
   25174:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   25178:	00bffa84 	movi	r2,-22
   2517c:	00001406 	br	251d0 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   25180:	e0bffd17 	ldw	r2,-12(fp)
   25184:	e0fffc17 	ldw	r3,-16(fp)
   25188:	e0ffff15 	stw	r3,-4(fp)
   2518c:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
   25190:	e0bffe17 	ldw	r2,-8(fp)
   25194:	e0ffff17 	ldw	r3,-4(fp)
   25198:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2519c:	e0bfff17 	ldw	r2,-4(fp)
   251a0:	10c00017 	ldw	r3,0(r2)
   251a4:	e0bffe17 	ldw	r2,-8(fp)
   251a8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
   251ac:	e0bfff17 	ldw	r2,-4(fp)
   251b0:	10800017 	ldw	r2,0(r2)
   251b4:	e0fffe17 	ldw	r3,-8(fp)
   251b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   251bc:	e0bfff17 	ldw	r2,-4(fp)
   251c0:	e0fffe17 	ldw	r3,-8(fp)
   251c4:	10c00015 	stw	r3,0(r2)
}
   251c8:	0001883a 	nop

  return 0;  
   251cc:	0005883a 	mov	r2,zero
}
   251d0:	e037883a 	mov	sp,fp
   251d4:	dfc00117 	ldw	ra,4(sp)
   251d8:	df000017 	ldw	fp,0(sp)
   251dc:	dec00204 	addi	sp,sp,8
   251e0:	f800283a 	ret

000251e4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   251e4:	defffd04 	addi	sp,sp,-12
   251e8:	dfc00215 	stw	ra,8(sp)
   251ec:	df000115 	stw	fp,4(sp)
   251f0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   251f4:	008000b4 	movhi	r2,2
   251f8:	10982b04 	addi	r2,r2,24748
   251fc:	e0bfff15 	stw	r2,-4(fp)
   25200:	00000606 	br	2521c <_do_ctors+0x38>
        (*ctor) (); 
   25204:	e0bfff17 	ldw	r2,-4(fp)
   25208:	10800017 	ldw	r2,0(r2)
   2520c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25210:	e0bfff17 	ldw	r2,-4(fp)
   25214:	10bfff04 	addi	r2,r2,-4
   25218:	e0bfff15 	stw	r2,-4(fp)
   2521c:	e0ffff17 	ldw	r3,-4(fp)
   25220:	008000b4 	movhi	r2,2
   25224:	10982c04 	addi	r2,r2,24752
   25228:	18bff62e 	bgeu	r3,r2,25204 <_do_ctors+0x20>
}
   2522c:	0001883a 	nop
   25230:	0001883a 	nop
   25234:	e037883a 	mov	sp,fp
   25238:	dfc00117 	ldw	ra,4(sp)
   2523c:	df000017 	ldw	fp,0(sp)
   25240:	dec00204 	addi	sp,sp,8
   25244:	f800283a 	ret

00025248 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   25248:	defffd04 	addi	sp,sp,-12
   2524c:	dfc00215 	stw	ra,8(sp)
   25250:	df000115 	stw	fp,4(sp)
   25254:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   25258:	008000b4 	movhi	r2,2
   2525c:	10982b04 	addi	r2,r2,24748
   25260:	e0bfff15 	stw	r2,-4(fp)
   25264:	00000606 	br	25280 <_do_dtors+0x38>
        (*dtor) (); 
   25268:	e0bfff17 	ldw	r2,-4(fp)
   2526c:	10800017 	ldw	r2,0(r2)
   25270:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   25274:	e0bfff17 	ldw	r2,-4(fp)
   25278:	10bfff04 	addi	r2,r2,-4
   2527c:	e0bfff15 	stw	r2,-4(fp)
   25280:	e0ffff17 	ldw	r3,-4(fp)
   25284:	008000b4 	movhi	r2,2
   25288:	10982c04 	addi	r2,r2,24752
   2528c:	18bff62e 	bgeu	r3,r2,25268 <_do_dtors+0x20>
}
   25290:	0001883a 	nop
   25294:	0001883a 	nop
   25298:	e037883a 	mov	sp,fp
   2529c:	dfc00117 	ldw	ra,4(sp)
   252a0:	df000017 	ldw	fp,0(sp)
   252a4:	dec00204 	addi	sp,sp,8
   252a8:	f800283a 	ret

000252ac <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   252ac:	deffff04 	addi	sp,sp,-4
   252b0:	df000015 	stw	fp,0(sp)
   252b4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   252b8:	0001883a 	nop
   252bc:	e037883a 	mov	sp,fp
   252c0:	df000017 	ldw	fp,0(sp)
   252c4:	dec00104 	addi	sp,sp,4
   252c8:	f800283a 	ret

000252cc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   252cc:	defff904 	addi	sp,sp,-28
   252d0:	dfc00615 	stw	ra,24(sp)
   252d4:	df000515 	stw	fp,20(sp)
   252d8:	df000504 	addi	fp,sp,20
   252dc:	e13fff15 	stw	r4,-4(fp)
   252e0:	e17ffe15 	stw	r5,-8(fp)
   252e4:	e1bffd15 	stw	r6,-12(fp)
   252e8:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   252ec:	e0800217 	ldw	r2,8(fp)
   252f0:	d8800015 	stw	r2,0(sp)
   252f4:	e1fffc17 	ldw	r7,-16(fp)
   252f8:	e1bffd17 	ldw	r6,-12(fp)
   252fc:	e17ffe17 	ldw	r5,-8(fp)
   25300:	e13fff17 	ldw	r4,-4(fp)
   25304:	002547c0 	call	2547c <alt_iic_isr_register>
}  
   25308:	e037883a 	mov	sp,fp
   2530c:	dfc00117 	ldw	ra,4(sp)
   25310:	df000017 	ldw	fp,0(sp)
   25314:	dec00204 	addi	sp,sp,8
   25318:	f800283a 	ret

0002531c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2531c:	defff904 	addi	sp,sp,-28
   25320:	df000615 	stw	fp,24(sp)
   25324:	df000604 	addi	fp,sp,24
   25328:	e13ffb15 	stw	r4,-20(fp)
   2532c:	e17ffa15 	stw	r5,-24(fp)
   25330:	e0bffa17 	ldw	r2,-24(fp)
   25334:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   25338:	0005303a 	rdctl	r2,status
   2533c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25340:	e0fffe17 	ldw	r3,-8(fp)
   25344:	00bfff84 	movi	r2,-2
   25348:	1884703a 	and	r2,r3,r2
   2534c:	1001703a 	wrctl	status,r2
  return context;
   25350:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   25354:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   25358:	00c00044 	movi	r3,1
   2535c:	e0bfff17 	ldw	r2,-4(fp)
   25360:	1884983a 	sll	r2,r3,r2
   25364:	1007883a 	mov	r3,r2
   25368:	d0a6b017 	ldw	r2,-25920(gp)
   2536c:	1884b03a 	or	r2,r3,r2
   25370:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25374:	d0a6b017 	ldw	r2,-25920(gp)
   25378:	100170fa 	wrctl	ienable,r2
   2537c:	e0bffd17 	ldw	r2,-12(fp)
   25380:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   25384:	e0bffc17 	ldw	r2,-16(fp)
   25388:	1001703a 	wrctl	status,r2
}
   2538c:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   25390:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   25394:	e037883a 	mov	sp,fp
   25398:	df000017 	ldw	fp,0(sp)
   2539c:	dec00104 	addi	sp,sp,4
   253a0:	f800283a 	ret

000253a4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   253a4:	defff904 	addi	sp,sp,-28
   253a8:	df000615 	stw	fp,24(sp)
   253ac:	df000604 	addi	fp,sp,24
   253b0:	e13ffb15 	stw	r4,-20(fp)
   253b4:	e17ffa15 	stw	r5,-24(fp)
   253b8:	e0bffa17 	ldw	r2,-24(fp)
   253bc:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   253c0:	0005303a 	rdctl	r2,status
   253c4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   253c8:	e0fffe17 	ldw	r3,-8(fp)
   253cc:	00bfff84 	movi	r2,-2
   253d0:	1884703a 	and	r2,r3,r2
   253d4:	1001703a 	wrctl	status,r2
  return context;
   253d8:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   253dc:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   253e0:	00c00044 	movi	r3,1
   253e4:	e0bfff17 	ldw	r2,-4(fp)
   253e8:	1884983a 	sll	r2,r3,r2
   253ec:	0084303a 	nor	r2,zero,r2
   253f0:	1007883a 	mov	r3,r2
   253f4:	d0a6b017 	ldw	r2,-25920(gp)
   253f8:	1884703a 	and	r2,r3,r2
   253fc:	d0a6b015 	stw	r2,-25920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25400:	d0a6b017 	ldw	r2,-25920(gp)
   25404:	100170fa 	wrctl	ienable,r2
   25408:	e0bffd17 	ldw	r2,-12(fp)
   2540c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   25410:	e0bffc17 	ldw	r2,-16(fp)
   25414:	1001703a 	wrctl	status,r2
}
   25418:	0001883a 	nop
  return 0;
   2541c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   25420:	e037883a 	mov	sp,fp
   25424:	df000017 	ldw	fp,0(sp)
   25428:	dec00104 	addi	sp,sp,4
   2542c:	f800283a 	ret

00025430 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   25430:	defffc04 	addi	sp,sp,-16
   25434:	df000315 	stw	fp,12(sp)
   25438:	df000304 	addi	fp,sp,12
   2543c:	e13ffe15 	stw	r4,-8(fp)
   25440:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   25444:	000530fa 	rdctl	r2,ienable
   25448:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2544c:	00c00044 	movi	r3,1
   25450:	e0bffd17 	ldw	r2,-12(fp)
   25454:	1884983a 	sll	r2,r3,r2
   25458:	1007883a 	mov	r3,r2
   2545c:	e0bfff17 	ldw	r2,-4(fp)
   25460:	1884703a 	and	r2,r3,r2
   25464:	1004c03a 	cmpne	r2,r2,zero
   25468:	10803fcc 	andi	r2,r2,255
}
   2546c:	e037883a 	mov	sp,fp
   25470:	df000017 	ldw	fp,0(sp)
   25474:	dec00104 	addi	sp,sp,4
   25478:	f800283a 	ret

0002547c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2547c:	defff504 	addi	sp,sp,-44
   25480:	dfc00a15 	stw	ra,40(sp)
   25484:	df000915 	stw	fp,36(sp)
   25488:	df000904 	addi	fp,sp,36
   2548c:	e13ffa15 	stw	r4,-24(fp)
   25490:	e17ff915 	stw	r5,-28(fp)
   25494:	e1bff815 	stw	r6,-32(fp)
   25498:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   2549c:	00bffa84 	movi	r2,-22
   254a0:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   254a4:	e0bff917 	ldw	r2,-28(fp)
   254a8:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   254ac:	e0bffe17 	ldw	r2,-8(fp)
   254b0:	10800808 	cmpgei	r2,r2,32
   254b4:	1000251e 	bne	r2,zero,2554c <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   254b8:	0005303a 	rdctl	r2,status
   254bc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   254c0:	e0fffc17 	ldw	r3,-16(fp)
   254c4:	00bfff84 	movi	r2,-2
   254c8:	1884703a 	and	r2,r3,r2
   254cc:	1001703a 	wrctl	status,r2
  return context;
   254d0:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   254d4:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   254d8:	e0bffe17 	ldw	r2,-8(fp)
   254dc:	100890fa 	slli	r4,r2,3
   254e0:	e0fff817 	ldw	r3,-32(fp)
   254e4:	008000f4 	movhi	r2,3
   254e8:	2085883a 	add	r2,r4,r2
   254ec:	10e58b15 	stw	r3,-27092(r2)
    alt_irq[id].context = isr_context;
   254f0:	e0bffe17 	ldw	r2,-8(fp)
   254f4:	100890fa 	slli	r4,r2,3
   254f8:	e0fff717 	ldw	r3,-36(fp)
   254fc:	008000f4 	movhi	r2,3
   25500:	2085883a 	add	r2,r4,r2
   25504:	10e58c15 	stw	r3,-27088(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   25508:	e0bff817 	ldw	r2,-32(fp)
   2550c:	10000526 	beq	r2,zero,25524 <alt_iic_isr_register+0xa8>
   25510:	e0bffe17 	ldw	r2,-8(fp)
   25514:	100b883a 	mov	r5,r2
   25518:	e13ffa17 	ldw	r4,-24(fp)
   2551c:	002531c0 	call	2531c <alt_ic_irq_enable>
   25520:	00000406 	br	25534 <alt_iic_isr_register+0xb8>
   25524:	e0bffe17 	ldw	r2,-8(fp)
   25528:	100b883a 	mov	r5,r2
   2552c:	e13ffa17 	ldw	r4,-24(fp)
   25530:	00253a40 	call	253a4 <alt_ic_irq_disable>
   25534:	e0bfff15 	stw	r2,-4(fp)
   25538:	e0bffd17 	ldw	r2,-12(fp)
   2553c:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   25540:	e0bffb17 	ldw	r2,-20(fp)
   25544:	1001703a 	wrctl	status,r2
}
   25548:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   2554c:	e0bfff17 	ldw	r2,-4(fp)
}
   25550:	e037883a 	mov	sp,fp
   25554:	dfc00117 	ldw	ra,4(sp)
   25558:	df000017 	ldw	fp,0(sp)
   2555c:	dec00204 	addi	sp,sp,8
   25560:	f800283a 	ret

00025564 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   25564:	defff904 	addi	sp,sp,-28
   25568:	dfc00615 	stw	ra,24(sp)
   2556c:	df000515 	stw	fp,20(sp)
   25570:	df000504 	addi	fp,sp,20
   25574:	e13ffe15 	stw	r4,-8(fp)
   25578:	e17ffd15 	stw	r5,-12(fp)
   2557c:	e1bffc15 	stw	r6,-16(fp)
   25580:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   25584:	e1bffb17 	ldw	r6,-20(fp)
   25588:	e17ffc17 	ldw	r5,-16(fp)
   2558c:	e13ffd17 	ldw	r4,-12(fp)
   25590:	00257cc0 	call	257cc <open>
   25594:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   25598:	e0bfff17 	ldw	r2,-4(fp)
   2559c:	10002016 	blt	r2,zero,25620 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   255a0:	e0ffff17 	ldw	r3,-4(fp)
   255a4:	1805883a 	mov	r2,r3
   255a8:	1085883a 	add	r2,r2,r2
   255ac:	10c5883a 	add	r2,r2,r3
   255b0:	100490ba 	slli	r2,r2,2
   255b4:	00c000b4 	movhi	r3,2
   255b8:	10c7883a 	add	r3,r2,r3
   255bc:	18da5417 	ldw	r3,26960(r3)
   255c0:	e0bffe17 	ldw	r2,-8(fp)
   255c4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   255c8:	e0ffff17 	ldw	r3,-4(fp)
   255cc:	1805883a 	mov	r2,r3
   255d0:	1085883a 	add	r2,r2,r2
   255d4:	10c5883a 	add	r2,r2,r3
   255d8:	100490ba 	slli	r2,r2,2
   255dc:	00c000b4 	movhi	r3,2
   255e0:	10c7883a 	add	r3,r2,r3
   255e4:	18da5517 	ldw	r3,26964(r3)
   255e8:	e0bffe17 	ldw	r2,-8(fp)
   255ec:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   255f0:	e0ffff17 	ldw	r3,-4(fp)
   255f4:	1805883a 	mov	r2,r3
   255f8:	1085883a 	add	r2,r2,r2
   255fc:	10c5883a 	add	r2,r2,r3
   25600:	100490ba 	slli	r2,r2,2
   25604:	00c000b4 	movhi	r3,2
   25608:	10c7883a 	add	r3,r2,r3
   2560c:	18da5617 	ldw	r3,26968(r3)
   25610:	e0bffe17 	ldw	r2,-8(fp)
   25614:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   25618:	e13fff17 	ldw	r4,-4(fp)
   2561c:	00241ec0 	call	241ec <alt_release_fd>
  }
} 
   25620:	0001883a 	nop
   25624:	e037883a 	mov	sp,fp
   25628:	dfc00117 	ldw	ra,4(sp)
   2562c:	df000017 	ldw	fp,0(sp)
   25630:	dec00204 	addi	sp,sp,8
   25634:	f800283a 	ret

00025638 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   25638:	defffb04 	addi	sp,sp,-20
   2563c:	dfc00415 	stw	ra,16(sp)
   25640:	df000315 	stw	fp,12(sp)
   25644:	df000304 	addi	fp,sp,12
   25648:	e13fff15 	stw	r4,-4(fp)
   2564c:	e17ffe15 	stw	r5,-8(fp)
   25650:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   25654:	01c07fc4 	movi	r7,511
   25658:	01800044 	movi	r6,1
   2565c:	e17fff17 	ldw	r5,-4(fp)
   25660:	010000b4 	movhi	r4,2
   25664:	211a5704 	addi	r4,r4,26972
   25668:	00255640 	call	25564 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2566c:	01c07fc4 	movi	r7,511
   25670:	000d883a 	mov	r6,zero
   25674:	e17ffe17 	ldw	r5,-8(fp)
   25678:	010000b4 	movhi	r4,2
   2567c:	211a5404 	addi	r4,r4,26960
   25680:	00255640 	call	25564 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   25684:	01c07fc4 	movi	r7,511
   25688:	01800044 	movi	r6,1
   2568c:	e17ffd17 	ldw	r5,-12(fp)
   25690:	010000b4 	movhi	r4,2
   25694:	211a5a04 	addi	r4,r4,26984
   25698:	00255640 	call	25564 <alt_open_fd>
}  
   2569c:	0001883a 	nop
   256a0:	e037883a 	mov	sp,fp
   256a4:	dfc00117 	ldw	ra,4(sp)
   256a8:	df000017 	ldw	fp,0(sp)
   256ac:	dec00204 	addi	sp,sp,8
   256b0:	f800283a 	ret

000256b4 <alt_get_errno>:
{
   256b4:	defffe04 	addi	sp,sp,-8
   256b8:	dfc00115 	stw	ra,4(sp)
   256bc:	df000015 	stw	fp,0(sp)
   256c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   256c4:	d0a00917 	ldw	r2,-32732(gp)
   256c8:	10000326 	beq	r2,zero,256d8 <alt_get_errno+0x24>
   256cc:	d0a00917 	ldw	r2,-32732(gp)
   256d0:	103ee83a 	callr	r2
   256d4:	00000106 	br	256dc <alt_get_errno+0x28>
   256d8:	d0a6ac04 	addi	r2,gp,-25936
}
   256dc:	e037883a 	mov	sp,fp
   256e0:	dfc00117 	ldw	ra,4(sp)
   256e4:	df000017 	ldw	fp,0(sp)
   256e8:	dec00204 	addi	sp,sp,8
   256ec:	f800283a 	ret

000256f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   256f0:	defffd04 	addi	sp,sp,-12
   256f4:	df000215 	stw	fp,8(sp)
   256f8:	df000204 	addi	fp,sp,8
   256fc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   25700:	e0bffe17 	ldw	r2,-8(fp)
   25704:	10800217 	ldw	r2,8(r2)
   25708:	10d00034 	orhi	r3,r2,16384
   2570c:	e0bffe17 	ldw	r2,-8(fp)
   25710:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   25714:	e03fff15 	stw	zero,-4(fp)
   25718:	00002306 	br	257a8 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2571c:	e0ffff17 	ldw	r3,-4(fp)
   25720:	1805883a 	mov	r2,r3
   25724:	1085883a 	add	r2,r2,r2
   25728:	10c5883a 	add	r2,r2,r3
   2572c:	100490ba 	slli	r2,r2,2
   25730:	00c000b4 	movhi	r3,2
   25734:	10c7883a 	add	r3,r2,r3
   25738:	18da5417 	ldw	r3,26960(r3)
   2573c:	e0bffe17 	ldw	r2,-8(fp)
   25740:	10800017 	ldw	r2,0(r2)
   25744:	1880151e 	bne	r3,r2,2579c <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25748:	e0ffff17 	ldw	r3,-4(fp)
   2574c:	1805883a 	mov	r2,r3
   25750:	1085883a 	add	r2,r2,r2
   25754:	10c5883a 	add	r2,r2,r3
   25758:	100490ba 	slli	r2,r2,2
   2575c:	00c000b4 	movhi	r3,2
   25760:	10c7883a 	add	r3,r2,r3
   25764:	189a5617 	ldw	r2,26968(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   25768:	10000c0e 	bge	r2,zero,2579c <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   2576c:	e0ffff17 	ldw	r3,-4(fp)
   25770:	1805883a 	mov	r2,r3
   25774:	1085883a 	add	r2,r2,r2
   25778:	10c5883a 	add	r2,r2,r3
   2577c:	100490ba 	slli	r2,r2,2
   25780:	00c000b4 	movhi	r3,2
   25784:	18da5404 	addi	r3,r3,26960
   25788:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2578c:	e0fffe17 	ldw	r3,-8(fp)
   25790:	18800226 	beq	r3,r2,2579c <alt_file_locked+0xac>
    {
      return -EACCES;
   25794:	00bffcc4 	movi	r2,-13
   25798:	00000806 	br	257bc <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   2579c:	e0bfff17 	ldw	r2,-4(fp)
   257a0:	10800044 	addi	r2,r2,1
   257a4:	e0bfff15 	stw	r2,-4(fp)
   257a8:	d0a00817 	ldw	r2,-32736(gp)
   257ac:	1007883a 	mov	r3,r2
   257b0:	e0bfff17 	ldw	r2,-4(fp)
   257b4:	18bfd92e 	bgeu	r3,r2,2571c <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   257b8:	0005883a 	mov	r2,zero
}
   257bc:	e037883a 	mov	sp,fp
   257c0:	df000017 	ldw	fp,0(sp)
   257c4:	dec00104 	addi	sp,sp,4
   257c8:	f800283a 	ret

000257cc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   257cc:	defff604 	addi	sp,sp,-40
   257d0:	dfc00915 	stw	ra,36(sp)
   257d4:	df000815 	stw	fp,32(sp)
   257d8:	df000804 	addi	fp,sp,32
   257dc:	e13ffa15 	stw	r4,-24(fp)
   257e0:	e17ff915 	stw	r5,-28(fp)
   257e4:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   257e8:	00bfffc4 	movi	r2,-1
   257ec:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   257f0:	00bffb44 	movi	r2,-19
   257f4:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   257f8:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   257fc:	d1600604 	addi	r5,gp,-32744
   25800:	e13ffa17 	ldw	r4,-24(fp)
   25804:	0025b200 	call	25b20 <alt_find_dev>
   25808:	e0bfff15 	stw	r2,-4(fp)
   2580c:	e0bfff17 	ldw	r2,-4(fp)
   25810:	1000051e 	bne	r2,zero,25828 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   25814:	e13ffa17 	ldw	r4,-24(fp)
   25818:	0025bb00 	call	25bb0 <alt_find_file>
   2581c:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   25820:	00800044 	movi	r2,1
   25824:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   25828:	e0bfff17 	ldw	r2,-4(fp)
   2582c:	10002c26 	beq	r2,zero,258e0 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   25830:	e13fff17 	ldw	r4,-4(fp)
   25834:	0025cb80 	call	25cb8 <alt_get_fd>
   25838:	e0bffe15 	stw	r2,-8(fp)
   2583c:	e0bffe17 	ldw	r2,-8(fp)
   25840:	1000030e 	bge	r2,zero,25850 <open+0x84>
    {
      status = index;
   25844:	e0bffe17 	ldw	r2,-8(fp)
   25848:	e0bffd15 	stw	r2,-12(fp)
   2584c:	00002606 	br	258e8 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   25850:	e0fffe17 	ldw	r3,-8(fp)
   25854:	1805883a 	mov	r2,r3
   25858:	1085883a 	add	r2,r2,r2
   2585c:	10c5883a 	add	r2,r2,r3
   25860:	100490ba 	slli	r2,r2,2
   25864:	00c000b4 	movhi	r3,2
   25868:	18da5404 	addi	r3,r3,26960
   2586c:	10c5883a 	add	r2,r2,r3
   25870:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   25874:	e0fff917 	ldw	r3,-28(fp)
   25878:	00900034 	movhi	r2,16384
   2587c:	10bfffc4 	addi	r2,r2,-1
   25880:	1886703a 	and	r3,r3,r2
   25884:	e0bffb17 	ldw	r2,-20(fp)
   25888:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2588c:	e0bffc17 	ldw	r2,-16(fp)
   25890:	1000051e 	bne	r2,zero,258a8 <open+0xdc>
   25894:	e13ffb17 	ldw	r4,-20(fp)
   25898:	00256f00 	call	256f0 <alt_file_locked>
   2589c:	e0bffd15 	stw	r2,-12(fp)
   258a0:	e0bffd17 	ldw	r2,-12(fp)
   258a4:	10001016 	blt	r2,zero,258e8 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   258a8:	e0bfff17 	ldw	r2,-4(fp)
   258ac:	10800317 	ldw	r2,12(r2)
   258b0:	10000826 	beq	r2,zero,258d4 <open+0x108>
   258b4:	e0bfff17 	ldw	r2,-4(fp)
   258b8:	10800317 	ldw	r2,12(r2)
   258bc:	e1fff817 	ldw	r7,-32(fp)
   258c0:	e1bff917 	ldw	r6,-28(fp)
   258c4:	e17ffa17 	ldw	r5,-24(fp)
   258c8:	e13ffb17 	ldw	r4,-20(fp)
   258cc:	103ee83a 	callr	r2
   258d0:	00000106 	br	258d8 <open+0x10c>
   258d4:	0005883a 	mov	r2,zero
   258d8:	e0bffd15 	stw	r2,-12(fp)
   258dc:	00000206 	br	258e8 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   258e0:	00bffb44 	movi	r2,-19
   258e4:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   258e8:	e0bffd17 	ldw	r2,-12(fp)
   258ec:	1000090e 	bge	r2,zero,25914 <open+0x148>
  {
    alt_release_fd (index);  
   258f0:	e13ffe17 	ldw	r4,-8(fp)
   258f4:	00241ec0 	call	241ec <alt_release_fd>
    ALT_ERRNO = -status;
   258f8:	00256b40 	call	256b4 <alt_get_errno>
   258fc:	1007883a 	mov	r3,r2
   25900:	e0bffd17 	ldw	r2,-12(fp)
   25904:	0085c83a 	sub	r2,zero,r2
   25908:	18800015 	stw	r2,0(r3)
    return -1;
   2590c:	00bfffc4 	movi	r2,-1
   25910:	00000106 	br	25918 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   25914:	e0bffe17 	ldw	r2,-8(fp)
}
   25918:	e037883a 	mov	sp,fp
   2591c:	dfc00117 	ldw	ra,4(sp)
   25920:	df000017 	ldw	fp,0(sp)
   25924:	dec00204 	addi	sp,sp,8
   25928:	f800283a 	ret

0002592c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2592c:	defffa04 	addi	sp,sp,-24
   25930:	df000515 	stw	fp,20(sp)
   25934:	df000504 	addi	fp,sp,20
   25938:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   2593c:	0005303a 	rdctl	r2,status
   25940:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25944:	e0fffc17 	ldw	r3,-16(fp)
   25948:	00bfff84 	movi	r2,-2
   2594c:	1884703a 	and	r2,r3,r2
   25950:	1001703a 	wrctl	status,r2
  return context;
   25954:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   25958:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   2595c:	e0bffb17 	ldw	r2,-20(fp)
   25960:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   25964:	e0bffd17 	ldw	r2,-12(fp)
   25968:	10800017 	ldw	r2,0(r2)
   2596c:	e0fffd17 	ldw	r3,-12(fp)
   25970:	18c00117 	ldw	r3,4(r3)
   25974:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   25978:	e0bffd17 	ldw	r2,-12(fp)
   2597c:	10800117 	ldw	r2,4(r2)
   25980:	e0fffd17 	ldw	r3,-12(fp)
   25984:	18c00017 	ldw	r3,0(r3)
   25988:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2598c:	e0bffd17 	ldw	r2,-12(fp)
   25990:	e0fffd17 	ldw	r3,-12(fp)
   25994:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   25998:	e0bffd17 	ldw	r2,-12(fp)
   2599c:	e0fffd17 	ldw	r3,-12(fp)
   259a0:	10c00015 	stw	r3,0(r2)
} 
   259a4:	0001883a 	nop
   259a8:	e0bfff17 	ldw	r2,-4(fp)
   259ac:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   259b0:	e0bffe17 	ldw	r2,-8(fp)
   259b4:	1001703a 	wrctl	status,r2
}
   259b8:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   259bc:	0001883a 	nop
   259c0:	e037883a 	mov	sp,fp
   259c4:	df000017 	ldw	fp,0(sp)
   259c8:	dec00104 	addi	sp,sp,4
   259cc:	f800283a 	ret

000259d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   259d0:	defff904 	addi	sp,sp,-28
   259d4:	dfc00615 	stw	ra,24(sp)
   259d8:	df000515 	stw	fp,20(sp)
   259dc:	dc400415 	stw	r17,16(sp)
   259e0:	dc000315 	stw	r16,12(sp)
   259e4:	df000504 	addi	fp,sp,20
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   259e8:	d0a00c17 	ldw	r2,-32720(gp)
   259ec:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   259f0:	d126b217 	ldw	r4,-25912(gp)
   259f4:	d166b317 	ldw	r5,-25908(gp)
   259f8:	01800044 	movi	r6,1
   259fc:	000f883a 	mov	r7,zero
   25a00:	2185883a 	add	r2,r4,r6
   25a04:	1111803a 	cmpltu	r8,r2,r4
   25a08:	29c7883a 	add	r3,r5,r7
   25a0c:	40c9883a 	add	r4,r8,r3
   25a10:	2007883a 	mov	r3,r4
   25a14:	1009883a 	mov	r4,r2
   25a18:	180b883a 	mov	r5,r3
   25a1c:	d126b215 	stw	r4,-25912(gp)
   25a20:	d166b315 	stw	r5,-25908(gp)
 
  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   25a24:	00002906 	br	25acc <alt_tick+0xfc>
  {
    next = (alt_alarm*) alarm->llist.next;
   25a28:	e0bffd17 	ldw	r2,-12(fp)
   25a2c:	10800017 	ldw	r2,0(r2)
   25a30:	e0bffc15 	stw	r2,-16(fp)
    
    /* if the alarm period has expired, make the callback */    
    if (alarm->time <= _alt_nticks)
   25a34:	e13ffd17 	ldw	r4,-12(fp)
   25a38:	20800217 	ldw	r2,8(r4)
   25a3c:	20c00317 	ldw	r3,12(r4)
   25a40:	d126b217 	ldw	r4,-25912(gp)
   25a44:	d166b317 	ldw	r5,-25908(gp)
   25a48:	28c01e36 	bltu	r5,r3,25ac4 <alt_tick+0xf4>
   25a4c:	1940011e 	bne	r3,r5,25a54 <alt_tick+0x84>
   25a50:	20801c36 	bltu	r4,r2,25ac4 <alt_tick+0xf4>
    {
      next_callback = alarm->callback (alarm->context);
   25a54:	e0bffd17 	ldw	r2,-12(fp)
   25a58:	10800417 	ldw	r2,16(r2)
   25a5c:	e0fffd17 	ldw	r3,-12(fp)
   25a60:	18c00517 	ldw	r3,20(r3)
   25a64:	1809883a 	mov	r4,r3
   25a68:	103ee83a 	callr	r2
   25a6c:	e0bffb15 	stw	r2,-20(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   25a70:	e0bffb17 	ldw	r2,-20(fp)
   25a74:	1000031e 	bne	r2,zero,25a84 <alt_tick+0xb4>
      {
        alt_alarm_stop (alarm);
   25a78:	e13ffd17 	ldw	r4,-12(fp)
   25a7c:	002592c0 	call	2592c <alt_alarm_stop>
   25a80:	00001006 	br	25ac4 <alt_tick+0xf4>
      }
      else
      {
        alarm->time += next_callback;
   25a84:	e0bffd17 	ldw	r2,-12(fp)
   25a88:	11000217 	ldw	r4,8(r2)
   25a8c:	11400317 	ldw	r5,12(r2)
   25a90:	e0bffb17 	ldw	r2,-20(fp)
   25a94:	1021883a 	mov	r16,r2
   25a98:	0023883a 	mov	r17,zero
   25a9c:	2405883a 	add	r2,r4,r16
   25aa0:	110d803a 	cmpltu	r6,r2,r4
   25aa4:	2c47883a 	add	r3,r5,r17
   25aa8:	30c9883a 	add	r4,r6,r3
   25aac:	2007883a 	mov	r3,r4
   25ab0:	1009883a 	mov	r4,r2
   25ab4:	180b883a 	mov	r5,r3
   25ab8:	e0bffd17 	ldw	r2,-12(fp)
   25abc:	11000215 	stw	r4,8(r2)
   25ac0:	11400315 	stw	r5,12(r2)
      }
    }
    alarm = next;
   25ac4:	e0bffc17 	ldw	r2,-16(fp)
   25ac8:	e0bffd15 	stw	r2,-12(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   25acc:	e0fffd17 	ldw	r3,-12(fp)
   25ad0:	d0a00c04 	addi	r2,gp,-32720
   25ad4:	18bfd41e 	bne	r3,r2,25a28 <alt_tick+0x58>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   25ad8:	0001883a 	nop
}
   25adc:	0001883a 	nop
   25ae0:	e6fffe04 	addi	sp,fp,-8
   25ae4:	dfc00317 	ldw	ra,12(sp)
   25ae8:	df000217 	ldw	fp,8(sp)
   25aec:	dc400117 	ldw	r17,4(sp)
   25af0:	dc000017 	ldw	r16,0(sp)
   25af4:	dec00404 	addi	sp,sp,16
   25af8:	f800283a 	ret

00025afc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   25afc:	deffff04 	addi	sp,sp,-4
   25b00:	df000015 	stw	fp,0(sp)
   25b04:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   25b08:	000170fa 	wrctl	ienable,zero
}
   25b0c:	0001883a 	nop
   25b10:	e037883a 	mov	sp,fp
   25b14:	df000017 	ldw	fp,0(sp)
   25b18:	dec00104 	addi	sp,sp,4
   25b1c:	f800283a 	ret

00025b20 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   25b20:	defffa04 	addi	sp,sp,-24
   25b24:	dfc00515 	stw	ra,20(sp)
   25b28:	df000415 	stw	fp,16(sp)
   25b2c:	df000404 	addi	fp,sp,16
   25b30:	e13ffd15 	stw	r4,-12(fp)
   25b34:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   25b38:	e0bffc17 	ldw	r2,-16(fp)
   25b3c:	10800017 	ldw	r2,0(r2)
   25b40:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   25b44:	e13ffd17 	ldw	r4,-12(fp)
   25b48:	0020d740 	call	20d74 <strlen>
   25b4c:	10800044 	addi	r2,r2,1
   25b50:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   25b54:	00000d06 	br	25b8c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   25b58:	e0bfff17 	ldw	r2,-4(fp)
   25b5c:	10800217 	ldw	r2,8(r2)
   25b60:	e0fffe17 	ldw	r3,-8(fp)
   25b64:	180d883a 	mov	r6,r3
   25b68:	e17ffd17 	ldw	r5,-12(fp)
   25b6c:	1009883a 	mov	r4,r2
   25b70:	0025e500 	call	25e50 <memcmp>
   25b74:	1000021e 	bne	r2,zero,25b80 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   25b78:	e0bfff17 	ldw	r2,-4(fp)
   25b7c:	00000706 	br	25b9c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   25b80:	e0bfff17 	ldw	r2,-4(fp)
   25b84:	10800017 	ldw	r2,0(r2)
   25b88:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   25b8c:	e0ffff17 	ldw	r3,-4(fp)
   25b90:	e0bffc17 	ldw	r2,-16(fp)
   25b94:	18bff01e 	bne	r3,r2,25b58 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   25b98:	0005883a 	mov	r2,zero
}
   25b9c:	e037883a 	mov	sp,fp
   25ba0:	dfc00117 	ldw	ra,4(sp)
   25ba4:	df000017 	ldw	fp,0(sp)
   25ba8:	dec00204 	addi	sp,sp,8
   25bac:	f800283a 	ret

00025bb0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   25bb0:	defffb04 	addi	sp,sp,-20
   25bb4:	dfc00415 	stw	ra,16(sp)
   25bb8:	df000315 	stw	fp,12(sp)
   25bbc:	df000304 	addi	fp,sp,12
   25bc0:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   25bc4:	d0a00417 	ldw	r2,-32752(gp)
   25bc8:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25bcc:	00003106 	br	25c94 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   25bd0:	e0bfff17 	ldw	r2,-4(fp)
   25bd4:	10800217 	ldw	r2,8(r2)
   25bd8:	1009883a 	mov	r4,r2
   25bdc:	0020d740 	call	20d74 <strlen>
   25be0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   25be4:	e0bfff17 	ldw	r2,-4(fp)
   25be8:	10c00217 	ldw	r3,8(r2)
   25bec:	e0bffe17 	ldw	r2,-8(fp)
   25bf0:	10bfffc4 	addi	r2,r2,-1
   25bf4:	1885883a 	add	r2,r3,r2
   25bf8:	10800003 	ldbu	r2,0(r2)
   25bfc:	10803fcc 	andi	r2,r2,255
   25c00:	1080201c 	xori	r2,r2,128
   25c04:	10bfe004 	addi	r2,r2,-128
   25c08:	10800bd8 	cmpnei	r2,r2,47
   25c0c:	1000031e 	bne	r2,zero,25c1c <alt_find_file+0x6c>
    {
      len -= 1;
   25c10:	e0bffe17 	ldw	r2,-8(fp)
   25c14:	10bfffc4 	addi	r2,r2,-1
   25c18:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   25c1c:	e0bffe17 	ldw	r2,-8(fp)
   25c20:	e0fffd17 	ldw	r3,-12(fp)
   25c24:	1885883a 	add	r2,r3,r2
   25c28:	10800003 	ldbu	r2,0(r2)
   25c2c:	10803fcc 	andi	r2,r2,255
   25c30:	1080201c 	xori	r2,r2,128
   25c34:	10bfe004 	addi	r2,r2,-128
   25c38:	10800be0 	cmpeqi	r2,r2,47
   25c3c:	1000081e 	bne	r2,zero,25c60 <alt_find_file+0xb0>
   25c40:	e0bffe17 	ldw	r2,-8(fp)
   25c44:	e0fffd17 	ldw	r3,-12(fp)
   25c48:	1885883a 	add	r2,r3,r2
   25c4c:	10800003 	ldbu	r2,0(r2)
   25c50:	10803fcc 	andi	r2,r2,255
   25c54:	1080201c 	xori	r2,r2,128
   25c58:	10bfe004 	addi	r2,r2,-128
   25c5c:	10000a1e 	bne	r2,zero,25c88 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   25c60:	e0bfff17 	ldw	r2,-4(fp)
   25c64:	10800217 	ldw	r2,8(r2)
   25c68:	e0fffe17 	ldw	r3,-8(fp)
   25c6c:	180d883a 	mov	r6,r3
   25c70:	e17ffd17 	ldw	r5,-12(fp)
   25c74:	1009883a 	mov	r4,r2
   25c78:	0025e500 	call	25e50 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   25c7c:	1000021e 	bne	r2,zero,25c88 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   25c80:	e0bfff17 	ldw	r2,-4(fp)
   25c84:	00000706 	br	25ca4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   25c88:	e0bfff17 	ldw	r2,-4(fp)
   25c8c:	10800017 	ldw	r2,0(r2)
   25c90:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   25c94:	e0ffff17 	ldw	r3,-4(fp)
   25c98:	d0a00404 	addi	r2,gp,-32752
   25c9c:	18bfcc1e 	bne	r3,r2,25bd0 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   25ca0:	0005883a 	mov	r2,zero
}
   25ca4:	e037883a 	mov	sp,fp
   25ca8:	dfc00117 	ldw	ra,4(sp)
   25cac:	df000017 	ldw	fp,0(sp)
   25cb0:	dec00204 	addi	sp,sp,8
   25cb4:	f800283a 	ret

00025cb8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   25cb8:	defffc04 	addi	sp,sp,-16
   25cbc:	df000315 	stw	fp,12(sp)
   25cc0:	df000304 	addi	fp,sp,12
   25cc4:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   25cc8:	00bffa04 	movi	r2,-24
   25ccc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25cd0:	e03fff15 	stw	zero,-4(fp)
   25cd4:	00001d06 	br	25d4c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   25cd8:	e0ffff17 	ldw	r3,-4(fp)
   25cdc:	1805883a 	mov	r2,r3
   25ce0:	1085883a 	add	r2,r2,r2
   25ce4:	10c5883a 	add	r2,r2,r3
   25ce8:	100490ba 	slli	r2,r2,2
   25cec:	00c000b4 	movhi	r3,2
   25cf0:	10c7883a 	add	r3,r2,r3
   25cf4:	189a5417 	ldw	r2,26960(r3)
   25cf8:	1000111e 	bne	r2,zero,25d40 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   25cfc:	e0ffff17 	ldw	r3,-4(fp)
   25d00:	1805883a 	mov	r2,r3
   25d04:	1085883a 	add	r2,r2,r2
   25d08:	10c5883a 	add	r2,r2,r3
   25d0c:	100490ba 	slli	r2,r2,2
   25d10:	e13ffd17 	ldw	r4,-12(fp)
   25d14:	00c000b4 	movhi	r3,2
   25d18:	10c7883a 	add	r3,r2,r3
   25d1c:	191a5415 	stw	r4,26960(r3)
      if (i > alt_max_fd)
   25d20:	d0e00817 	ldw	r3,-32736(gp)
   25d24:	e0bfff17 	ldw	r2,-4(fp)
   25d28:	1880020e 	bge	r3,r2,25d34 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   25d2c:	e0bfff17 	ldw	r2,-4(fp)
   25d30:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
   25d34:	e0bfff17 	ldw	r2,-4(fp)
   25d38:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   25d3c:	00000706 	br	25d5c <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   25d40:	e0bfff17 	ldw	r2,-4(fp)
   25d44:	10800044 	addi	r2,r2,1
   25d48:	e0bfff15 	stw	r2,-4(fp)
   25d4c:	e0bfff17 	ldw	r2,-4(fp)
   25d50:	10800810 	cmplti	r2,r2,32
   25d54:	103fe01e 	bne	r2,zero,25cd8 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   25d58:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   25d5c:	e0bffe17 	ldw	r2,-8(fp)
}
   25d60:	e037883a 	mov	sp,fp
   25d64:	df000017 	ldw	fp,0(sp)
   25d68:	dec00104 	addi	sp,sp,4
   25d6c:	f800283a 	ret

00025d70 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   25d70:	defffe04 	addi	sp,sp,-8
   25d74:	df000115 	stw	fp,4(sp)
   25d78:	df000104 	addi	fp,sp,4
   25d7c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   25d80:	e0bfff17 	ldw	r2,-4(fp)
   25d84:	10bffe84 	addi	r2,r2,-6
   25d88:	10c00428 	cmpgeui	r3,r2,16
   25d8c:	1800191e 	bne	r3,zero,25df4 <alt_exception_cause_generated_bad_addr+0x84>
   25d90:	100690ba 	slli	r3,r2,2
   25d94:	008000b4 	movhi	r2,2
   25d98:	1885883a 	add	r2,r3,r2
   25d9c:	10976917 	ldw	r2,23972(r2)
   25da0:	1000683a 	jmp	r2
   25da4:	00025de4 	muli	zero,zero,2423
   25da8:	00025de4 	muli	zero,zero,2423
   25dac:	00025df4 	movhi	zero,2423
   25db0:	00025df4 	movhi	zero,2423
   25db4:	00025df4 	movhi	zero,2423
   25db8:	00025de4 	muli	zero,zero,2423
   25dbc:	00025dec 	andhi	zero,zero,2423
   25dc0:	00025df4 	movhi	zero,2423
   25dc4:	00025de4 	muli	zero,zero,2423
   25dc8:	00025de4 	muli	zero,zero,2423
   25dcc:	00025df4 	movhi	zero,2423
   25dd0:	00025de4 	muli	zero,zero,2423
   25dd4:	00025dec 	andhi	zero,zero,2423
   25dd8:	00025df4 	movhi	zero,2423
   25ddc:	00025df4 	movhi	zero,2423
   25de0:	00025de4 	muli	zero,zero,2423
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   25de4:	00800044 	movi	r2,1
   25de8:	00000306 	br	25df8 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   25dec:	0005883a 	mov	r2,zero
   25df0:	00000106 	br	25df8 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   25df4:	0005883a 	mov	r2,zero
  }
}
   25df8:	e037883a 	mov	sp,fp
   25dfc:	df000017 	ldw	fp,0(sp)
   25e00:	dec00104 	addi	sp,sp,4
   25e04:	f800283a 	ret

00025e08 <atexit>:
   25e08:	200b883a 	mov	r5,r4
   25e0c:	000f883a 	mov	r7,zero
   25e10:	000d883a 	mov	r6,zero
   25e14:	0009883a 	mov	r4,zero
   25e18:	0025ec81 	jmpi	25ec8 <__register_exitproc>

00025e1c <exit>:
   25e1c:	defffe04 	addi	sp,sp,-8
   25e20:	000b883a 	mov	r5,zero
   25e24:	dc000015 	stw	r16,0(sp)
   25e28:	dfc00115 	stw	ra,4(sp)
   25e2c:	2021883a 	mov	r16,r4
   25e30:	0025f580 	call	25f58 <__call_exitprocs>
   25e34:	008000b4 	movhi	r2,2
   25e38:	111ecc17 	ldw	r4,31536(r2)
   25e3c:	20800f17 	ldw	r2,60(r4)
   25e40:	10000126 	beq	r2,zero,25e48 <exit+0x2c>
   25e44:	103ee83a 	callr	r2
   25e48:	8009883a 	mov	r4,r16
   25e4c:	00260780 	call	26078 <_exit>

00025e50 <memcmp>:
   25e50:	30800130 	cmpltui	r2,r6,4
   25e54:	10000b1e 	bne	r2,zero,25e84 <memcmp+0x34>
   25e58:	2144b03a 	or	r2,r4,r5
   25e5c:	108000cc 	andi	r2,r2,3
   25e60:	1000171e 	bne	r2,zero,25ec0 <memcmp+0x70>
   25e64:	20c00017 	ldw	r3,0(r4)
   25e68:	28800017 	ldw	r2,0(r5)
   25e6c:	1880141e 	bne	r3,r2,25ec0 <memcmp+0x70>
   25e70:	31bfff04 	addi	r6,r6,-4
   25e74:	30800128 	cmpgeui	r2,r6,4
   25e78:	21000104 	addi	r4,r4,4
   25e7c:	29400104 	addi	r5,r5,4
   25e80:	103ff81e 	bne	r2,zero,25e64 <memcmp+0x14>
   25e84:	30bfffc4 	addi	r2,r6,-1
   25e88:	30000b26 	beq	r6,zero,25eb8 <memcmp+0x68>
   25e8c:	11800044 	addi	r6,r2,1
   25e90:	218d883a 	add	r6,r4,r6
   25e94:	00000106 	br	25e9c <memcmp+0x4c>
   25e98:	21800726 	beq	r4,r6,25eb8 <memcmp+0x68>
   25e9c:	20800003 	ldbu	r2,0(r4)
   25ea0:	28c00003 	ldbu	r3,0(r5)
   25ea4:	21000044 	addi	r4,r4,1
   25ea8:	29400044 	addi	r5,r5,1
   25eac:	10fffa26 	beq	r2,r3,25e98 <memcmp+0x48>
   25eb0:	10c5c83a 	sub	r2,r2,r3
   25eb4:	f800283a 	ret
   25eb8:	0005883a 	mov	r2,zero
   25ebc:	f800283a 	ret
   25ec0:	30bfffc4 	addi	r2,r6,-1
   25ec4:	003ff106 	br	25e8c <memcmp+0x3c>

00025ec8 <__register_exitproc>:
   25ec8:	008000b4 	movhi	r2,2
   25ecc:	10decc17 	ldw	r3,31536(r2)
   25ed0:	18805217 	ldw	r2,328(r3)
   25ed4:	10001726 	beq	r2,zero,25f34 <__register_exitproc+0x6c>
   25ed8:	10c00117 	ldw	r3,4(r2)
   25edc:	1a000808 	cmpgei	r8,r3,32
   25ee0:	40001b1e 	bne	r8,zero,25f50 <__register_exitproc+0x88>
   25ee4:	20000b26 	beq	r4,zero,25f14 <__register_exitproc+0x4c>
   25ee8:	181090ba 	slli	r8,r3,2
   25eec:	02400044 	movi	r9,1
   25ef0:	48d2983a 	sll	r9,r9,r3
   25ef4:	1211883a 	add	r8,r2,r8
   25ef8:	41802215 	stw	r6,136(r8)
   25efc:	11806217 	ldw	r6,392(r2)
   25f00:	21000098 	cmpnei	r4,r4,2
   25f04:	324cb03a 	or	r6,r6,r9
   25f08:	11806215 	stw	r6,392(r2)
   25f0c:	41c04215 	stw	r7,264(r8)
   25f10:	20000b26 	beq	r4,zero,25f40 <__register_exitproc+0x78>
   25f14:	19000084 	addi	r4,r3,2
   25f18:	200890ba 	slli	r4,r4,2
   25f1c:	18c00044 	addi	r3,r3,1
   25f20:	10c00115 	stw	r3,4(r2)
   25f24:	1105883a 	add	r2,r2,r4
   25f28:	11400015 	stw	r5,0(r2)
   25f2c:	0005883a 	mov	r2,zero
   25f30:	f800283a 	ret
   25f34:	18805304 	addi	r2,r3,332
   25f38:	18805215 	stw	r2,328(r3)
   25f3c:	003fe606 	br	25ed8 <__register_exitproc+0x10>
   25f40:	11006317 	ldw	r4,396(r2)
   25f44:	2252b03a 	or	r9,r4,r9
   25f48:	12406315 	stw	r9,396(r2)
   25f4c:	003ff106 	br	25f14 <__register_exitproc+0x4c>
   25f50:	00bfffc4 	movi	r2,-1
   25f54:	f800283a 	ret

00025f58 <__call_exitprocs>:
   25f58:	defff704 	addi	sp,sp,-36
   25f5c:	008000b4 	movhi	r2,2
   25f60:	dcc00315 	stw	r19,12(sp)
   25f64:	14decc17 	ldw	r19,31536(r2)
   25f68:	dc800215 	stw	r18,8(sp)
   25f6c:	dfc00815 	stw	ra,32(sp)
   25f70:	9c805217 	ldw	r18,328(r19)
   25f74:	ddc00715 	stw	r23,28(sp)
   25f78:	dd800615 	stw	r22,24(sp)
   25f7c:	dd400515 	stw	r21,20(sp)
   25f80:	dd000415 	stw	r20,16(sp)
   25f84:	dc400115 	stw	r17,4(sp)
   25f88:	dc000015 	stw	r16,0(sp)
   25f8c:	90001026 	beq	r18,zero,25fd0 <__call_exitprocs+0x78>
   25f90:	202b883a 	mov	r21,r4
   25f94:	282d883a 	mov	r22,r5
   25f98:	05000044 	movi	r20,1
   25f9c:	94000117 	ldw	r16,4(r18)
   25fa0:	847fffc4 	addi	r17,r16,-1
   25fa4:	88000a16 	blt	r17,zero,25fd0 <__call_exitprocs+0x78>
   25fa8:	84000044 	addi	r16,r16,1
   25fac:	802090ba 	slli	r16,r16,2
   25fb0:	9421883a 	add	r16,r18,r16
   25fb4:	b0001126 	beq	r22,zero,25ffc <__call_exitprocs+0xa4>
   25fb8:	80804017 	ldw	r2,256(r16)
   25fbc:	15800f26 	beq	r2,r22,25ffc <__call_exitprocs+0xa4>
   25fc0:	8c7fffc4 	addi	r17,r17,-1
   25fc4:	88bfffd8 	cmpnei	r2,r17,-1
   25fc8:	843fff04 	addi	r16,r16,-4
   25fcc:	103ff91e 	bne	r2,zero,25fb4 <__call_exitprocs+0x5c>
   25fd0:	dfc00817 	ldw	ra,32(sp)
   25fd4:	ddc00717 	ldw	r23,28(sp)
   25fd8:	dd800617 	ldw	r22,24(sp)
   25fdc:	dd400517 	ldw	r21,20(sp)
   25fe0:	dd000417 	ldw	r20,16(sp)
   25fe4:	dcc00317 	ldw	r19,12(sp)
   25fe8:	dc800217 	ldw	r18,8(sp)
   25fec:	dc400117 	ldw	r17,4(sp)
   25ff0:	dc000017 	ldw	r16,0(sp)
   25ff4:	dec00904 	addi	sp,sp,36
   25ff8:	f800283a 	ret
   25ffc:	90800117 	ldw	r2,4(r18)
   26000:	81800017 	ldw	r6,0(r16)
   26004:	10bfffc4 	addi	r2,r2,-1
   26008:	14401726 	beq	r2,r17,26068 <__call_exitprocs+0x110>
   2600c:	80000015 	stw	zero,0(r16)
   26010:	303feb26 	beq	r6,zero,25fc0 <__call_exitprocs+0x68>
   26014:	a446983a 	sll	r3,r20,r17
   26018:	90806217 	ldw	r2,392(r18)
   2601c:	95c00117 	ldw	r23,4(r18)
   26020:	1884703a 	and	r2,r3,r2
   26024:	1000081e 	bne	r2,zero,26048 <__call_exitprocs+0xf0>
   26028:	303ee83a 	callr	r6
   2602c:	90c00117 	ldw	r3,4(r18)
   26030:	98805217 	ldw	r2,328(r19)
   26034:	1dc0011e 	bne	r3,r23,2603c <__call_exitprocs+0xe4>
   26038:	90bfe126 	beq	r18,r2,25fc0 <__call_exitprocs+0x68>
   2603c:	103fe426 	beq	r2,zero,25fd0 <__call_exitprocs+0x78>
   26040:	1025883a 	mov	r18,r2
   26044:	003fd506 	br	25f9c <__call_exitprocs+0x44>
   26048:	90806317 	ldw	r2,396(r18)
   2604c:	81002017 	ldw	r4,128(r16)
   26050:	1886703a 	and	r3,r3,r2
   26054:	1800061e 	bne	r3,zero,26070 <__call_exitprocs+0x118>
   26058:	200b883a 	mov	r5,r4
   2605c:	a809883a 	mov	r4,r21
   26060:	303ee83a 	callr	r6
   26064:	003ff106 	br	2602c <__call_exitprocs+0xd4>
   26068:	94400115 	stw	r17,4(r18)
   2606c:	003fe806 	br	26010 <__call_exitprocs+0xb8>
   26070:	303ee83a 	callr	r6
   26074:	003fed06 	br	2602c <__call_exitprocs+0xd4>

00026078 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   26078:	defffd04 	addi	sp,sp,-12
   2607c:	df000215 	stw	fp,8(sp)
   26080:	df000204 	addi	fp,sp,8
   26084:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   26088:	0001883a 	nop
   2608c:	e0bffe17 	ldw	r2,-8(fp)
   26090:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   26094:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   26098:	10000226 	beq	r2,zero,260a4 <_exit+0x2c>
    ALT_SIM_FAIL();
   2609c:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   260a0:	00000106 	br	260a8 <_exit+0x30>
    ALT_SIM_PASS();
   260a4:	002af0b0 	cmpltui	zero,zero,43970
}
   260a8:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   260ac:	003fff06 	br	260ac <_exit+0x34>
