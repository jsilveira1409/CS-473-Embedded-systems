
LT24_Painter.elf:     file format elf32-littlenios2
LT24_Painter.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00027fe4 memsz 0x00027fe4 flags r-x
    LOAD off    0x00029004 vaddr 0x000a8004 paddr 0x000ab2e4 align 2**12
         filesz 0x000032e0 memsz 0x000032e0 flags rw-
    LOAD off    0x0002c5c4 vaddr 0x000ae5c4 paddr 0x000ae5c4 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000dcd8  000801bc  000801bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0001a170  0008de94  0008de94  0000ee94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000032e0  000a8004  000ab2e4  00029004  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  000ae5c4  000ae5c4  0002c5c4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  000ae718  000ae718  0002c2e4  2**0
                  CONTENTS
  7 .comment      00000039  00000000  00000000  0002c2e4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000bd0  00000000  00000000  0002c320  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00015d48  00000000  00000000  0002cef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000673e  00000000  00000000  00042c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007fff  00000000  00000000  00049376  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002568  00000000  00000000  00051378  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000046a2  00000000  00000000  000538e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009584  00000000  00000000  00057f82  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00061508  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000af8  00000000  00000000  00061568  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00066de2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00066de5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00066def  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00066df0  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00066df1  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00066df5  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00066df9  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00066dfd  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00066e06  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00066e0f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  00066e18  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000027  00000000  00000000  00066e21  2**0
                  CONTENTS, READONLY
 29 .jdi          00003da8  00000000  00000000  00066e48  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000723de  00000000  00000000  0006abf0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801bc l    d  .text	00000000 .text
0008de94 l    d  .rodata	00000000 .rodata
000a8004 l    d  .rwdata	00000000 .rwdata
000ae5c4 l    d  .bss	00000000 .bss
000ae718 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../LT24_Painter_bsp//obj/HAL/src/crt0.o
00080204 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tahomabold_20.c
0008de94 l     O .rodata	000000b6 tahomabold_20_33
0008df4a l     O .rodata	00000104 tahomabold_20_34
0008e04e l     O .rodata	000001a0 tahomabold_20_35
0008e1ee l     O .rodata	00000152 tahomabold_20_36
0008e340 l     O .rodata	00000270 tahomabold_20_37
0008e5b0 l     O .rodata	000001ba tahomabold_20_38
0008e76a l     O .rodata	0000009c tahomabold_20_39
0008e806 l     O .rodata	000000ea tahomabold_20_40
0008e8f0 l     O .rodata	000000ea tahomabold_20_41
0008e9da l     O .rodata	00000152 tahomabold_20_42
0008eb2c l     O .rodata	000001a0 tahomabold_20_43
0008eccc l     O .rodata	0000009c tahomabold_20_44
0008ed68 l     O .rodata	000000ea tahomabold_20_45
0008ee52 l     O .rodata	0000009c tahomabold_20_46
0008eeee l     O .rodata	00000138 tahomabold_20_47
0008f026 l     O .rodata	00000152 tahomabold_20_48
0008f178 l     O .rodata	00000152 tahomabold_20_49
0008f2ca l     O .rodata	00000152 tahomabold_20_50
0008f41c l     O .rodata	00000152 tahomabold_20_51
0008f56e l     O .rodata	00000152 tahomabold_20_52
0008f6c0 l     O .rodata	00000152 tahomabold_20_53
0008f812 l     O .rodata	00000152 tahomabold_20_54
0008f964 l     O .rodata	00000152 tahomabold_20_55
0008fab6 l     O .rodata	00000152 tahomabold_20_56
0008fc08 l     O .rodata	00000152 tahomabold_20_57
0008fd5a l     O .rodata	000000b6 tahomabold_20_58
0008fe10 l     O .rodata	000000b6 tahomabold_20_59
0008fec6 l     O .rodata	000001a0 tahomabold_20_60
00090066 l     O .rodata	000001a0 tahomabold_20_61
00090206 l     O .rodata	000001a0 tahomabold_20_62
000903a6 l     O .rodata	0000011e tahomabold_20_63
000904c4 l     O .rodata	000001d4 tahomabold_20_64
00090698 l     O .rodata	0000016c tahomabold_20_65
00090804 l     O .rodata	0000016c tahomabold_20_66
00090970 l     O .rodata	00000152 tahomabold_20_67
00090ac2 l     O .rodata	00000186 tahomabold_20_68
00090c48 l     O .rodata	00000138 tahomabold_20_69
00090d80 l     O .rodata	00000138 tahomabold_20_70
00090eb8 l     O .rodata	00000186 tahomabold_20_71
0009103e l     O .rodata	00000186 tahomabold_20_72
000911c4 l     O .rodata	00000104 tahomabold_20_73
000912c8 l     O .rodata	00000104 tahomabold_20_74
000913cc l     O .rodata	0000016c tahomabold_20_75
00091538 l     O .rodata	0000011e tahomabold_20_76
00091656 l     O .rodata	000001d4 tahomabold_20_77
0009182a l     O .rodata	00000186 tahomabold_20_78
000919b0 l     O .rodata	00000186 tahomabold_20_79
00091b36 l     O .rodata	00000152 tahomabold_20_80
00091c88 l     O .rodata	00000186 tahomabold_20_81
00091e0e l     O .rodata	00000186 tahomabold_20_82
00091f94 l     O .rodata	00000152 tahomabold_20_83
000920e6 l     O .rodata	00000138 tahomabold_20_84
0009221e l     O .rodata	00000186 tahomabold_20_85
000923a4 l     O .rodata	0000016c tahomabold_20_86
00092510 l     O .rodata	00000222 tahomabold_20_87
00092732 l     O .rodata	0000016c tahomabold_20_88
0009289e l     O .rodata	0000016c tahomabold_20_89
00092a0a l     O .rodata	00000138 tahomabold_20_90
00092b42 l     O .rodata	000000ea tahomabold_20_91
00092c2c l     O .rodata	00000138 tahomabold_20_92
00092d64 l     O .rodata	000000ea tahomabold_20_93
00092e4e l     O .rodata	000001a0 tahomabold_20_94
00092fee l     O .rodata	00000152 tahomabold_20_95
00093140 l     O .rodata	0000011e tahomabold_20_96
0009325e l     O .rodata	00000138 tahomabold_20_97
00093396 l     O .rodata	00000152 tahomabold_20_98
000934e8 l     O .rodata	0000011e tahomabold_20_99
00093606 l     O .rodata	00000152 tahomabold_20_100
00093758 l     O .rodata	00000138 tahomabold_20_101
00093890 l     O .rodata	000000d0 tahomabold_20_102
00093960 l     O .rodata	00000152 tahomabold_20_103
00093ab2 l     O .rodata	00000152 tahomabold_20_104
00093c04 l     O .rodata	0000009c tahomabold_20_105
00093ca0 l     O .rodata	000000ea tahomabold_20_106
00093d8a l     O .rodata	00000138 tahomabold_20_107
00093ec2 l     O .rodata	0000009c tahomabold_20_108
00093f5e l     O .rodata	000001ee tahomabold_20_109
0009414c l     O .rodata	00000152 tahomabold_20_110
0009429e l     O .rodata	00000138 tahomabold_20_111
000943d6 l     O .rodata	00000152 tahomabold_20_112
00094528 l     O .rodata	00000152 tahomabold_20_113
0009467a l     O .rodata	000000ea tahomabold_20_114
00094764 l     O .rodata	00000104 tahomabold_20_115
00094868 l     O .rodata	000000d0 tahomabold_20_116
00094938 l     O .rodata	00000152 tahomabold_20_117
00094a8a l     O .rodata	00000138 tahomabold_20_118
00094bc2 l     O .rodata	000001d4 tahomabold_20_119
00094d96 l     O .rodata	00000138 tahomabold_20_120
00094ece l     O .rodata	00000138 tahomabold_20_121
00095006 l     O .rodata	0000011e tahomabold_20_122
00095124 l     O .rodata	00000138 tahomabold_20_123
0009525c l     O .rodata	00000152 tahomabold_20_124
000953ae l     O .rodata	00000138 tahomabold_20_125
000954e6 l     O .rodata	000001a0 tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.c
00095686 l     O .rodata	000001b8 tahomabold_32_33
0009583e l     O .rodata	00000280 tahomabold_32_34
00095abe l     O .rodata	00000410 tahomabold_32_35
00095ece l     O .rodata	00000320 tahomabold_32_36
000961ee l     O .rodata	000005f0 tahomabold_32_37
000967de l     O .rodata	00000410 tahomabold_32_38
00096bee l     O .rodata	00000168 tahomabold_32_39
00096d56 l     O .rodata	00000258 tahomabold_32_40
00096fae l     O .rodata	00000258 tahomabold_32_41
00097206 l     O .rodata	00000320 tahomabold_32_42
00097526 l     O .rodata	00000410 tahomabold_32_43
00097936 l     O .rodata	00000190 tahomabold_32_44
00097ac6 l     O .rodata	00000230 tahomabold_32_45
00097cf6 l     O .rodata	00000190 tahomabold_32_46
00097e86 l     O .rodata	000002d0 tahomabold_32_47
00098156 l     O .rodata	00000320 tahomabold_32_48
00098476 l     O .rodata	00000320 tahomabold_32_49
00098796 l     O .rodata	00000320 tahomabold_32_50
00098ab6 l     O .rodata	00000320 tahomabold_32_51
00098dd6 l     O .rodata	00000320 tahomabold_32_52
000990f6 l     O .rodata	00000320 tahomabold_32_53
00099416 l     O .rodata	00000320 tahomabold_32_54
00099736 l     O .rodata	00000320 tahomabold_32_55
00099a56 l     O .rodata	00000320 tahomabold_32_56
00099d76 l     O .rodata	00000320 tahomabold_32_57
0009a096 l     O .rodata	000001e0 tahomabold_32_58
0009a276 l     O .rodata	000001e0 tahomabold_32_59
0009a456 l     O .rodata	00000410 tahomabold_32_60
0009a866 l     O .rodata	00000410 tahomabold_32_61
0009ac76 l     O .rodata	00000410 tahomabold_32_62
0009b086 l     O .rodata	000002d0 tahomabold_32_63
0009b356 l     O .rodata	00000488 tahomabold_32_64
0009b7de l     O .rodata	00000370 tahomabold_32_65
0009bb4e l     O .rodata	00000370 tahomabold_32_66
0009bebe l     O .rodata	00000348 tahomabold_32_67
0009c206 l     O .rodata	000003c0 tahomabold_32_68
0009c5c6 l     O .rodata	00000320 tahomabold_32_69
0009c8e6 l     O .rodata	000002f8 tahomabold_32_70
0009cbde l     O .rodata	000003c0 tahomabold_32_71
0009cf9e l     O .rodata	000003c0 tahomabold_32_72
0009d35e l     O .rodata	00000258 tahomabold_32_73
0009d5b6 l     O .rodata	00000280 tahomabold_32_74
0009d836 l     O .rodata	00000398 tahomabold_32_75
0009dbce l     O .rodata	000002d0 tahomabold_32_76
0009de9e l     O .rodata	00000488 tahomabold_32_77
0009e326 l     O .rodata	000003e8 tahomabold_32_78
0009e70e l     O .rodata	000003e8 tahomabold_32_79
0009eaf6 l     O .rodata	00000348 tahomabold_32_80
0009ee3e l     O .rodata	000003e8 tahomabold_32_81
0009f226 l     O .rodata	000003c0 tahomabold_32_82
0009f5e6 l     O .rodata	00000320 tahomabold_32_83
0009f906 l     O .rodata	00000320 tahomabold_32_84
0009fc26 l     O .rodata	000003c0 tahomabold_32_85
0009ffe6 l     O .rodata	00000370 tahomabold_32_86
000a0356 l     O .rodata	00000528 tahomabold_32_87
000a087e l     O .rodata	00000370 tahomabold_32_88
000a0bee l     O .rodata	00000370 tahomabold_32_89
000a0f5e l     O .rodata	00000320 tahomabold_32_90
000a127e l     O .rodata	00000258 tahomabold_32_91
000a14d6 l     O .rodata	000002d0 tahomabold_32_92
000a17a6 l     O .rodata	00000258 tahomabold_32_93
000a19fe l     O .rodata	00000410 tahomabold_32_94
000a1e0e l     O .rodata	00000320 tahomabold_32_95
000a212e l     O .rodata	000002a8 tahomabold_32_96
000a23d6 l     O .rodata	000002f8 tahomabold_32_97
000a26ce l     O .rodata	00000320 tahomabold_32_98
000a29ee l     O .rodata	000002a8 tahomabold_32_99
000a2c96 l     O .rodata	00000320 tahomabold_32_100
000a2fb6 l     O .rodata	000002f8 tahomabold_32_101
000a32ae l     O .rodata	00000230 tahomabold_32_102
000a34de l     O .rodata	00000320 tahomabold_32_103
000a37fe l     O .rodata	00000320 tahomabold_32_104
000a3b1e l     O .rodata	00000190 tahomabold_32_105
000a3cae l     O .rodata	00000208 tahomabold_32_106
000a3eb6 l     O .rodata	000002f8 tahomabold_32_107
000a41ae l     O .rodata	00000190 tahomabold_32_108
000a433e l     O .rodata	000004d8 tahomabold_32_109
000a4816 l     O .rodata	00000320 tahomabold_32_110
000a4b36 l     O .rodata	00000320 tahomabold_32_111
000a4e56 l     O .rodata	00000320 tahomabold_32_112
000a5176 l     O .rodata	00000320 tahomabold_32_113
000a5496 l     O .rodata	00000230 tahomabold_32_114
000a56c6 l     O .rodata	00000280 tahomabold_32_115
000a5946 l     O .rodata	00000208 tahomabold_32_116
000a5b4e l     O .rodata	00000320 tahomabold_32_117
000a5e6e l     O .rodata	000002f8 tahomabold_32_118
000a6166 l     O .rodata	00000460 tahomabold_32_119
000a65c6 l     O .rodata	000002f8 tahomabold_32_120
000a68be l     O .rodata	000002d0 tahomabold_32_121
000a6b8e l     O .rodata	000002a8 tahomabold_32_122
000a6e36 l     O .rodata	00000320 tahomabold_32_123
000a7156 l     O .rodata	00000320 tahomabold_32_124
000a7476 l     O .rodata	00000320 tahomabold_32_125
000a7796 l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 geometry.c
00000000 l    df *ABS*	00000000 ILI9341.c
00000000 l    df *ABS*	00000000 simple_graphics.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 gui.c
000ae5c4 l     O .bss	00000004 x.3925
000ab2a4 l     O .rwdata	00000004 y.3926
00000000 l    df *ABS*	00000000 gui_vpg.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 touch_spi.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00087770 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
000a9bb0 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0008a5b4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vfprintf.c
0008ab7c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 fvwrite_small_str.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0008bc0c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000ab2c0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0008c024 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0008c160 l     F .text	00000038 alt_dev_reg
000aa098 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008c454 l     F .text	000001fc altera_avalon_jtag_uart_irq
0008c650 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0008ce64 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0008d0b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0008d210 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0008d23c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008d414 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0008d54c l     F .text	00000050 alt_get_errno
0008d59c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00081c7c g     F .text	00000078 vid_draw_horiz_line
000855a8 g     F .text	00000124 I2C_Read
0008077c g     F .text	0000006c LCD_DrawPoint
0008bcf0 g     F .text	00000078 alt_main
0008a578 g     F .text	00000020 strcpy
0008a3b8 g     F .text	00000080 _puts_r
000ae618 g     O .bss	00000100 alt_irq
00081de0 g     F .text	0000006c vid_color_convert16_24
00087308 g     F .text	0000014c sqrt
00086348 g     F .text	000000a0 I2CL_Read16
000ab2e4 g       *ABS*	00000000 __flash_rwdata_start
00086d00 g     F .text	00000164 touch_enable_penirq
000ae718 g       *ABS*	00000000 __alt_heap_start
00086704 g     F .text	00000064 QUEUE_IsFull
00080e54 g     F .text	00000138 LCD_Pattern_Horizon
0008a36c g     F .text	0000004c printf
000841f0 g     F .text	000001dc GUI_DeskInit
0008bd88 g     F .text	00000020 __malloc_unlock
000818d0 g     F .text	00000150 vid_draw_box
000805b8 g     F .text	00000044 PtCopy
00083718 g     F .text	0000025c vid_print_string_alpha
0008b740 g     F .text	0000006c memmove
000a9784 g     O .rwdata	00000415 cour10_font_array
000816ac g     F .text	0000011c vid_move_block
00089c30 g     F .text	00000010 __errno
000861cc g     F .text	0000017c I2CL_MultipleWrite
00084040 g     F .text	000000e0 vid_string_pixel_length_alpha
00085ab4 g     F .text	00000160 i2c_write
0008b6a4 g     F .text	0000009c __sfvwrite_small_str
00080000 g     F .entry	0000001c __reset
0008532c g     F .text	00000040 my_wait
00080020 g       *ABS*	00000000 __flash_exceptions_start
000806fc g     F .text	00000080 LCD_Clear
000ae5d4 g     O .bss	00000004 errno
000856cc g     F .text	00000178 I2C_Read16
000ae5e0 g     O .bss	00000004 alt_argv
000b32a0 g       *ABS*	00000000 _gp
0008bff4 g     F .text	00000030 usleep
00084b04 g     F .text	000000b0 VPG_ColorPanel
00083974 g     F .text	00000148 seperate_color_channels
000ab120 g     O .rwdata	00000180 alt_fd_list
0008d83c g     F .text	00000090 alt_find_dev
0008a2e8 g     F .text	00000028 memcpy
00089ab4 g     F .text	000000d0 .hidden __floatsidf
000825e0 g     F .text	00000758 vid_round_corner_points
00086a2c g     F .text	00000068 Touch_UnInit
0008d4d4 g     F .text	00000078 alt_io_redirect
000889d4 g     F .text	000000ec .hidden __ltdf2
0008de94 g       *ABS*	00000000 __DTOR_END__
000843cc g     F .text	00000090 GUI_CheckButton
0008a438 g     F .text	00000014 puts
0008106c g     F .text	00000060 vid_clean_screen
00087700 g     F .text	00000068 __fpclassifyd
000866c4 g     F .text	00000040 QUEUE_IsEmpty
000811d8 g     F .text	00000154 vid_scroll_string_init
0008c848 g     F .text	00000208 altera_avalon_jtag_uart_read
00089c40 g     F .text	00000014 malloc
0008a330 g     F .text	0000003c _printf_r
000868bc g     F .text	00000170 Touch_Init
00087874 g     F .text	00000008 .hidden __udivsi3
0008b1fc g     F .text	00000040 vsnprintf
0008445c g     F .text	00000238 GUI_DeskDraw
0008da94 g     F .text	0000008c alt_icache_flush
00085844 g     F .text	0000017c I2C_MultipleRead
000ae5d0 g     O .bss	00000004 __malloc_top_pad
0008688c g     F .text	00000030 QUEUE_Empty
000867fc g     F .text	00000090 QUEUE_Pop
0008a44c g     F .text	00000050 _sbrk_r
00086c90 g     F .text	00000030 touch_empty_fifo
000804d0 g     F .text	00000034 RectHeight
000ab2dc g     O .rwdata	00000004 alt_max_fd
00084ae0 g     F .text	00000024 VPG_XLine
000ae5cc g     O .bss	00000004 __malloc_max_sbrked_mem
00085ea4 g     F .text	00000168 I2CL_Read
000a8bc4 g     O .rwdata	00000bc0 tahomabold_32
00087884 g     F .text	0000087c .hidden __adddf3
00084720 g     F .text	00000080 GUI_ClearPaintArea
0008028c g     F .text	00000040 PtSet
000ab2a8 g     O .rwdata	00000004 __fdlib_version
000ab2ac g     O .rwdata	00000004 _global_impure_ptr
000820ec g     F .text	0000013c vid_draw_circle
000ae718 g       *ABS*	00000000 __bss_end
0008bb1c g     F .text	000000f0 alt_iic_isr_register
0008bef0 g     F .text	00000104 alt_tick
00085468 g     F .text	00000140 I2C_Write16
000803b0 g     F .text	00000088 RectOffset
00081e8c g     F .text	00000260 vid_draw_sloped_line
00084cb0 g     F .text	000000e4 VPG_VGrid
0008bad0 g     F .text	0000004c alt_ic_irq_enabled
0008536c g     F .text	000000fc I2C_Write
00082228 g     F .text	000003b8 vid_draw_round_corner_box
0008be58 g     F .text	00000098 alt_alarm_stop
000ae5d8 g     O .bss	00000004 alt_irq_active
00080f8c g     F .text	000000e0 LCD_Pattern_Vertical
000800ec g     F .exceptions	000000d0 alt_irq_handler
000ab0f8 g     O .rwdata	00000028 alt_dev_null
000863e8 g     F .text	0000008c I2CL_Write16
000859c0 g     F .text	00000084 i2c_start
0008d1cc g     F .text	00000044 alt_dcache_flush_all
000871b4 g     F .text	00000078 touch_alarm_callback
00089a34 g     F .text	00000080 .hidden __fixdfsi
00086cc0 g     F .text	00000040 touch_is_pen_pressed
000ab2e4 g       *ABS*	00000000 __ram_rwdata_end
0008316c g     F .text	000003a4 vid_draw_triangle
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory
000ab2d4 g     O .rwdata	00000008 alt_dev_list
0008c074 g     F .text	000000ec write
000a9b9c g     O .rwdata	00000014 szPallete
000835ec g     F .text	0000012c CropImage16
000a8004 g       *ABS*	00000000 __ram_rodata_end
000889d4 g     F .text	000000ec .hidden __ledf2
0008132c g     F .text	00000380 vid_scroll_string
000864a4 g     F .text	0000006c myprintf
00086e94 g     F .text	00000320 touch_get_xy
0008787c g     F .text	00000008 .hidden __umodsi3
00086c18 g     F .text	00000078 touch_isr
0008049c g     F .text	00000034 RectWidth
00083510 g     F .text	000000dc CopyImage16
000ae718 g       *ABS*	00000000 end
00085198 g     F .text	000000ac GUI_VPG
000849c4 g     F .text	00000064 GUI_ShowInfo
0008c394 g     F .text	000000c0 altera_avalon_jtag_uart_init
00081a20 g     F .text	000000f0 vid_print_char
0008de94 g       *ABS*	00000000 __CTOR_LIST__
000b8270 g       *ABS*	00000000 __alt_stack_pointer
0008ced8 g     F .text	00000088 alt_avalon_timer_sc_init
00089b84 g     F .text	000000ac .hidden __clzsi2
0008ca50 g     F .text	00000218 altera_avalon_jtag_uart_write
00085018 g     F .text	00000180 GUI_ShowPAT
00082d8c g     F .text	00000054 min3
000810cc g     F .text	000000cc vid_draw_line
0008abe8 g     F .text	00000538 ___vfprintf_internal_r
0008a49c g     F .text	00000064 _sprintf_r
0008b360 g     F .text	00000298 _free_r
00080648 g     F .text	000000b4 LCD_SetCursor
0008dcc8 g     F .text	00000198 __call_exitprocs
00084bb4 g     F .text	000000fc VPG_Grid
000ab2b4 g     O .rwdata	00000004 __malloc_sbrk_base
000801bc g     F .text	0000004c _start
000ae5e8 g     O .bss	00000004 _alt_tick_rate
00086e64 g     F .text	00000030 touch_clear_input
0008cc68 g     F .text	000001fc alt_avalon_spi_command
00086768 g     F .text	00000094 QUEUE_Push
000ae5ec g     O .bss	00000004 _alt_nticks
00082e44 g     F .text	000000f0 vid_put_pixel_in_span_map
00084e78 g     F .text	000001a0 VPG_ColorBar
0008c1cc g     F .text	00000064 alt_sys_init
0008db84 g     F .text	00000144 __register_exitproc
00081be8 g     F .text	00000094 vid_paint_block
0008c6f4 g     F .text	00000068 altera_avalon_jtag_uart_close
000a8004 g       *ABS*	00000000 __ram_rwdata_start
0008de94 g       *ABS*	00000000 __ram_rodata_start
000ae5f0 g     O .bss	00000028 __malloc_current_mallinfo
00084d94 g     F .text	000000e4 VPG_HGrid
00081d40 g     F .text	000000a0 vid_color_convert24_16
0008c230 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0008d9e0 g     F .text	000000b4 alt_get_fd
0008cf60 g     F .text	00000154 alt_busy_sleep
000847a0 g     F .text	00000224 GUI
00083c2c g     F .text	00000254 alpha_blending
0008db54 g     F .text	00000030 memcmp
0008c2f0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000ae718 g       *ABS*	00000000 __alt_stack_base
0008c340 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00088100 g     F .text	000008d4 .hidden __divdf3
000a9c90 g     O .rwdata	00000408 __malloc_av_
0008b144 g     F .text	000000b8 _vsnprintf_r
00085a44 g     F .text	00000070 i2c_stop
00088ac0 g     F .text	000006ec .hidden __muldf3
0008d8cc g     F .text	00000114 alt_find_file
0008d28c g     F .text	000000a0 alt_dev_llist_insert
0008bd68 g     F .text	00000020 __malloc_lock
00081e4c g     F .text	00000040 vid_copy_line_to_frame_buffer
0008bda8 g     F .text	000000b0 sbrk
0008a620 g     F .text	00000538 ___svfprintf_internal_r
0008b5f8 g     F .text	000000ac __sfvwrite_small_dev
00086624 g     F .text	00000070 QUEUE_New
000ae5c4 g       *ABS*	00000000 __bss_start
000807e8 g     F .text	0000066c LCD_Init
0008a310 g     F .text	00000020 memset
00085244 g     F .text	000000e8 main
000ae5e4 g     O .bss	00000004 alt_envp
000ae5c8 g     O .bss	00000004 __malloc_max_total_mem
00086510 g     F .text	00000088 myprintf_hexarray
0008c290 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00084a28 g     F .text	00000058 GUI_ShowTouchPoint
00085c14 g     F .text	00000150 i2c_read
000a8004 g     O .rwdata	00000bc0 tahomabold_20
00087768 g     F .text	00000008 matherr
000b8270 g       *ABS*	00000000 __alt_heap_limit
00083e80 g     F .text	000001c0 vid_print_char_alpha
000ab2a0 g     O .rwdata	00000004 cour10_font
00089c68 g     F .text	00000680 _malloc_r
000ab2e0 g     O .rwdata	00000004 alt_errno
00080504 g     F .text	000000b4 PtDistance
000802cc g     F .text	0000005c RectSet
000877e0 g     F .text	00000048 .hidden __divsi3
000805fc g     F .text	0000004c Delay_Ms
00080438 g     F .text	00000064 RectCopy
0008b23c g     F .text	00000124 _malloc_trim_r
0008de94 g       *ABS*	00000000 __CTOR_END__
00083bec g     F .text	00000040 read_from_frame
0008de94 g       *ABS*	00000000 __flash_rodata_start
0008de94 g       *ABS*	00000000 __DTOR_LIST__
00081bac g     F .text	0000003c vid_get_pixel
0008c198 g     F .text	00000034 alt_irq_init
0008d7bc g     F .text	00000060 alt_release_fd
0008a500 g     F .text	00000078 sprintf
000a7ed1 g     O .rodata	00000100 .hidden __clz_tab
00086474 g     F .text	00000030 debug_output
0008db20 g     F .text	00000014 atexit
0008b7ac g     F .text	00000058 _write_r
00080208 g     F .text	00000084 IsPtInRect
000ab2b0 g     O .rwdata	00000004 _impure_ptr
000ae5dc g     O .bss	00000004 alt_argc
0008d388 g     F .text	0000005c _do_dtors
00086598 g     F .text	0000008c myprintf_dwordarray
0008600c g     F .text	000001c0 I2CL_MultipleRead
00080020 g       .exceptions	00000000 alt_irq_entry
00086acc g     F .text	0000014c Touch_GetXY
000ab2cc g     O .rwdata	00000008 alt_fs_list
0008ab58 g     F .text	00000024 __vfprintf_internal_unused
000817c8 g     F .text	00000108 vid_print_string
00080020 g       *ABS*	00000000 __ram_exceptions_start
00087454 g     F .text	000002ac __ieee754_sqrt
0008b944 g     F .text	00000050 alt_ic_isr_register
000ab2e4 g       *ABS*	00000000 _edata
000ae718 g       *ABS*	00000000 _end
00084a80 g     F .text	00000060 ShowInfo
00082d38 g     F .text	00000054 max3
000801bc g       *ABS*	00000000 __ram_exceptions_end
0008c75c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0008ba30 g     F .text	000000a0 alt_ic_irq_disable
00081cf4 g     F .text	0000004c vid_merge_colors
000ab2b8 g     O .rwdata	00000004 __malloc_trim_threshold
0008d81c g     F .text	00000020 altera_nios2_qsys_irq_init
0008db34 g     F .text	00000020 exit
00084694 g     F .text	0000008c IsContinuedPoint
00087828 g     F .text	0000004c .hidden __modsi3
000b8270 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00086694 g     F .text	00000030 QUEUE_Delete
0008722c g     F .text	000000dc touch_xy_transform
00081b10 g     F .text	0000009c vid_set_pixel
0008de60 g     F .text	00000034 _exit
0008b804 g     F .text	00000140 alt_alarm_start
00081198 g     F .text	00000040 vid_scroll_string_quit
0008a598 g     F .text	0000001c strlen
0008d668 g     F .text	00000154 open
00080328 g     F .text	00000088 RectInflate
0008d3e4 g     F .text	00000030 alt_icache_flush_all
000ab2bc g     O .rwdata	00000004 alt_priority_mask
0008b994 g     F .text	0000009c alt_ic_irq_enable
0008b120 g     F .text	00000024 __vfprintf_internal
000891ac g     F .text	00000888 .hidden __subdf3
00082f34 g     F .text	00000238 vid_bres_scan_edges
000ab2c4 g     O .rwdata	00000008 alt_alarm_list
00082de0 g     F .text	00000064 max_diff3
0008d32c g     F .text	0000005c _do_ctors
00085d64 g     F .text	00000140 I2CL_Write
00084120 g     F .text	000000d0 GUI_ShowWelcome
00083abc g     F .text	00000130 merge_color_channels
0008d104 g     F .text	000000c8 close
0008bc70 g     F .text	00000080 alt_load
00086a94 g     F .text	00000038 Touch_EmptyFifo
00089c54 g     F .text	00000014 free



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__alt_data_end+0xfffc7d94>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08406f14 	ori	at,at,444
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__alt_mem_onchip_memory-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)

00080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0fffb17 	ldw	r3,-20(fp)
   80120:	e0bffc17 	ldw	r2,-16(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	10001726 	beq	r2,zero,80188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	00c002f4 	movhi	r3,11
   80130:	18f98604 	addi	r3,r3,-6632
   80134:	e0bffd17 	ldw	r2,-12(fp)
   80138:	100490fa 	slli	r2,r2,3
   8013c:	1885883a 	add	r2,r3,r2
   80140:	10800017 	ldw	r2,0(r2)
   80144:	010002f4 	movhi	r4,11
   80148:	21398604 	addi	r4,r4,-6632
   8014c:	e0fffd17 	ldw	r3,-12(fp)
   80150:	180690fa 	slli	r3,r3,3
   80154:	20c7883a 	add	r3,r4,r3
   80158:	18c00104 	addi	r3,r3,4
   8015c:	18c00017 	ldw	r3,0(r3)
   80160:	1809883a 	mov	r4,r3
   80164:	103ee83a 	callr	r2
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8016c:	0005313a 	rdctl	r2,ipending
   80170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   8017c:	e0bffb17 	ldw	r2,-20(fp)
   80180:	103fe31e 	bne	r2,zero,80110 <__alt_data_end+0xfffc7ea0>
   80184:	00000706 	br	801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80188:	e0bffc17 	ldw	r2,-16(fp)
   8018c:	1085883a 	add	r2,r2,r2
   80190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80194:	e0bffd17 	ldw	r2,-12(fp)
   80198:	10800044 	addi	r2,r2,1
   8019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a0:	003fde06 	br	8011c <__alt_data_end+0xfffc7eac>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801a4:	0001883a 	nop
}
   801a8:	e037883a 	mov	sp,fp
   801ac:	dfc00117 	ldw	ra,4(sp)
   801b0:	df000017 	ldw	fp,0(sp)
   801b4:	dec00204 	addi	sp,sp,8
   801b8:	f800283a 	ret

Disassembly of section .text:

000801bc <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   801bc:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   801c0:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   801c4:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   801c8:	00bffd16 	blt	zero,r2,801c0 <__alt_data_end+0xfffc7f50>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801cc:	06c002f4 	movhi	sp,11
    ori sp, sp, %lo(__alt_stack_pointer)
   801d0:	dee09c14 	ori	sp,sp,33392
    movhi gp, %hi(_gp)
   801d4:	068002f4 	movhi	gp,11
    ori gp, gp, %lo(_gp)
   801d8:	d68ca814 	ori	gp,gp,12960
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801dc:	008002b4 	movhi	r2,10
    ori r2, r2, %lo(__bss_start)
   801e0:	10b97114 	ori	r2,r2,58820

    movhi r3, %hi(__bss_end)
   801e4:	00c002b4 	movhi	r3,10
    ori r3, r3, %lo(__bss_end)
   801e8:	18f9c614 	ori	r3,r3,59160

    beq r2, r3, 1f
   801ec:	10c00326 	beq	r2,r3,801fc <_start+0x40>

0:
    stw zero, (r2)
   801f0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801f4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801f8:	10fffd36 	bltu	r2,r3,801f0 <__alt_data_end+0xfffc7f80>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801fc:	008bc700 	call	8bc70 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80200:	008bcf00 	call	8bcf0 <alt_main>

00080204 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80204:	003fff06 	br	80204 <__alt_data_end+0xfffc7f94>

00080208 <IsPtInRect>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
   80208:	defffc04 	addi	sp,sp,-16
   8020c:	df000315 	stw	fp,12(sp)
   80210:	df000304 	addi	fp,sp,12
   80214:	e13ffe15 	stw	r4,-8(fp)
   80218:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
   8021c:	e03ffd15 	stw	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
   80220:	e0bffe17 	ldw	r2,-8(fp)
   80224:	10c00017 	ldw	r3,0(r2)
   80228:	e0bfff17 	ldw	r2,-4(fp)
   8022c:	10800017 	ldw	r2,0(r2)
   80230:	18801116 	blt	r3,r2,80278 <IsPtInRect+0x70>
   80234:	e0bffe17 	ldw	r2,-8(fp)
   80238:	10800017 	ldw	r2,0(r2)
   8023c:	e0ffff17 	ldw	r3,-4(fp)
   80240:	18c00117 	ldw	r3,4(r3)
   80244:	18800c16 	blt	r3,r2,80278 <IsPtInRect+0x70>
   80248:	e0bffe17 	ldw	r2,-8(fp)
   8024c:	10c00117 	ldw	r3,4(r2)
   80250:	e0bfff17 	ldw	r2,-4(fp)
   80254:	10800217 	ldw	r2,8(r2)
   80258:	18800716 	blt	r3,r2,80278 <IsPtInRect+0x70>
   8025c:	e0bffe17 	ldw	r2,-8(fp)
   80260:	10800117 	ldw	r2,4(r2)
   80264:	e0ffff17 	ldw	r3,-4(fp)
   80268:	18c00317 	ldw	r3,12(r3)
   8026c:	18800216 	blt	r3,r2,80278 <IsPtInRect+0x70>
        bYes = TRUE;
   80270:	00800044 	movi	r2,1
   80274:	e0bffd15 	stw	r2,-12(fp)
    
    return bYes;
   80278:	e0bffd17 	ldw	r2,-12(fp)
}
   8027c:	e037883a 	mov	sp,fp
   80280:	df000017 	ldw	fp,0(sp)
   80284:	dec00104 	addi	sp,sp,4
   80288:	f800283a 	ret

0008028c <PtSet>:

void PtSet(POINT *pt, int x, int y){
   8028c:	defffc04 	addi	sp,sp,-16
   80290:	df000315 	stw	fp,12(sp)
   80294:	df000304 	addi	fp,sp,12
   80298:	e13ffd15 	stw	r4,-12(fp)
   8029c:	e17ffe15 	stw	r5,-8(fp)
   802a0:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
   802a4:	e0bffd17 	ldw	r2,-12(fp)
   802a8:	e0fffe17 	ldw	r3,-8(fp)
   802ac:	10c00015 	stw	r3,0(r2)
    pt->y = y;
   802b0:	e0bffd17 	ldw	r2,-12(fp)
   802b4:	e0ffff17 	ldw	r3,-4(fp)
   802b8:	10c00115 	stw	r3,4(r2)
}
   802bc:	e037883a 	mov	sp,fp
   802c0:	df000017 	ldw	fp,0(sp)
   802c4:	dec00104 	addi	sp,sp,4
   802c8:	f800283a 	ret

000802cc <RectSet>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
   802cc:	defffb04 	addi	sp,sp,-20
   802d0:	df000415 	stw	fp,16(sp)
   802d4:	df000404 	addi	fp,sp,16
   802d8:	e13ffc15 	stw	r4,-16(fp)
   802dc:	e17ffd15 	stw	r5,-12(fp)
   802e0:	e1bffe15 	stw	r6,-8(fp)
   802e4:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
   802e8:	e0bffc17 	ldw	r2,-16(fp)
   802ec:	e0fffd17 	ldw	r3,-12(fp)
   802f0:	10c00015 	stw	r3,0(r2)
    rc->right = right;
   802f4:	e0bffc17 	ldw	r2,-16(fp)
   802f8:	e0fffe17 	ldw	r3,-8(fp)
   802fc:	10c00115 	stw	r3,4(r2)
    rc->top = top;
   80300:	e0bffc17 	ldw	r2,-16(fp)
   80304:	e0ffff17 	ldw	r3,-4(fp)
   80308:	10c00215 	stw	r3,8(r2)
    rc->bottom = bottom;
   8030c:	e0bffc17 	ldw	r2,-16(fp)
   80310:	e0c00117 	ldw	r3,4(fp)
   80314:	10c00315 	stw	r3,12(r2)
}
   80318:	e037883a 	mov	sp,fp
   8031c:	df000017 	ldw	fp,0(sp)
   80320:	dec00104 	addi	sp,sp,4
   80324:	f800283a 	ret

00080328 <RectInflate>:

void RectInflate(RECT *rc, int x, int y){
   80328:	defffc04 	addi	sp,sp,-16
   8032c:	df000315 	stw	fp,12(sp)
   80330:	df000304 	addi	fp,sp,12
   80334:	e13ffd15 	stw	r4,-12(fp)
   80338:	e17ffe15 	stw	r5,-8(fp)
   8033c:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
   80340:	e0bffd17 	ldw	r2,-12(fp)
   80344:	10c00017 	ldw	r3,0(r2)
   80348:	e0bffe17 	ldw	r2,-8(fp)
   8034c:	1887c83a 	sub	r3,r3,r2
   80350:	e0bffd17 	ldw	r2,-12(fp)
   80354:	10c00015 	stw	r3,0(r2)
    rc->right += x;
   80358:	e0bffd17 	ldw	r2,-12(fp)
   8035c:	10c00117 	ldw	r3,4(r2)
   80360:	e0bffe17 	ldw	r2,-8(fp)
   80364:	1887883a 	add	r3,r3,r2
   80368:	e0bffd17 	ldw	r2,-12(fp)
   8036c:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
   80370:	e0bffd17 	ldw	r2,-12(fp)
   80374:	10c00217 	ldw	r3,8(r2)
   80378:	e0bfff17 	ldw	r2,-4(fp)
   8037c:	1887c83a 	sub	r3,r3,r2
   80380:	e0bffd17 	ldw	r2,-12(fp)
   80384:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
   80388:	e0bffd17 	ldw	r2,-12(fp)
   8038c:	10c00317 	ldw	r3,12(r2)
   80390:	e0bfff17 	ldw	r2,-4(fp)
   80394:	1887883a 	add	r3,r3,r2
   80398:	e0bffd17 	ldw	r2,-12(fp)
   8039c:	10c00315 	stw	r3,12(r2)
}
   803a0:	e037883a 	mov	sp,fp
   803a4:	df000017 	ldw	fp,0(sp)
   803a8:	dec00104 	addi	sp,sp,4
   803ac:	f800283a 	ret

000803b0 <RectOffset>:

void RectOffset(RECT *rc, int x, int y){
   803b0:	defffc04 	addi	sp,sp,-16
   803b4:	df000315 	stw	fp,12(sp)
   803b8:	df000304 	addi	fp,sp,12
   803bc:	e13ffd15 	stw	r4,-12(fp)
   803c0:	e17ffe15 	stw	r5,-8(fp)
   803c4:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
   803c8:	e0bffd17 	ldw	r2,-12(fp)
   803cc:	10c00017 	ldw	r3,0(r2)
   803d0:	e0bffe17 	ldw	r2,-8(fp)
   803d4:	1887883a 	add	r3,r3,r2
   803d8:	e0bffd17 	ldw	r2,-12(fp)
   803dc:	10c00015 	stw	r3,0(r2)
    rc->right += x;
   803e0:	e0bffd17 	ldw	r2,-12(fp)
   803e4:	10c00117 	ldw	r3,4(r2)
   803e8:	e0bffe17 	ldw	r2,-8(fp)
   803ec:	1887883a 	add	r3,r3,r2
   803f0:	e0bffd17 	ldw	r2,-12(fp)
   803f4:	10c00115 	stw	r3,4(r2)
    rc->top += y;
   803f8:	e0bffd17 	ldw	r2,-12(fp)
   803fc:	10c00217 	ldw	r3,8(r2)
   80400:	e0bfff17 	ldw	r2,-4(fp)
   80404:	1887883a 	add	r3,r3,r2
   80408:	e0bffd17 	ldw	r2,-12(fp)
   8040c:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
   80410:	e0bffd17 	ldw	r2,-12(fp)
   80414:	10c00317 	ldw	r3,12(r2)
   80418:	e0bfff17 	ldw	r2,-4(fp)
   8041c:	1887883a 	add	r3,r3,r2
   80420:	e0bffd17 	ldw	r2,-12(fp)
   80424:	10c00315 	stw	r3,12(r2)
}
   80428:	e037883a 	mov	sp,fp
   8042c:	df000017 	ldw	fp,0(sp)
   80430:	dec00104 	addi	sp,sp,4
   80434:	f800283a 	ret

00080438 <RectCopy>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
   80438:	defffd04 	addi	sp,sp,-12
   8043c:	df000215 	stw	fp,8(sp)
   80440:	df000204 	addi	fp,sp,8
   80444:	e13ffe15 	stw	r4,-8(fp)
   80448:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
   8044c:	e0bfff17 	ldw	r2,-4(fp)
   80450:	10c00017 	ldw	r3,0(r2)
   80454:	e0bffe17 	ldw	r2,-8(fp)
   80458:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
   8045c:	e0bfff17 	ldw	r2,-4(fp)
   80460:	10c00117 	ldw	r3,4(r2)
   80464:	e0bffe17 	ldw	r2,-8(fp)
   80468:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
   8046c:	e0bfff17 	ldw	r2,-4(fp)
   80470:	10c00217 	ldw	r3,8(r2)
   80474:	e0bffe17 	ldw	r2,-8(fp)
   80478:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
   8047c:	e0bfff17 	ldw	r2,-4(fp)
   80480:	10c00317 	ldw	r3,12(r2)
   80484:	e0bffe17 	ldw	r2,-8(fp)
   80488:	10c00315 	stw	r3,12(r2)
}
   8048c:	e037883a 	mov	sp,fp
   80490:	df000017 	ldw	fp,0(sp)
   80494:	dec00104 	addi	sp,sp,4
   80498:	f800283a 	ret

0008049c <RectWidth>:

int RectWidth(RECT *rc){
   8049c:	defffe04 	addi	sp,sp,-8
   804a0:	df000115 	stw	fp,4(sp)
   804a4:	df000104 	addi	fp,sp,4
   804a8:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
   804ac:	e0bfff17 	ldw	r2,-4(fp)
   804b0:	10c00117 	ldw	r3,4(r2)
   804b4:	e0bfff17 	ldw	r2,-4(fp)
   804b8:	10800017 	ldw	r2,0(r2)
   804bc:	1885c83a 	sub	r2,r3,r2
}
   804c0:	e037883a 	mov	sp,fp
   804c4:	df000017 	ldw	fp,0(sp)
   804c8:	dec00104 	addi	sp,sp,4
   804cc:	f800283a 	ret

000804d0 <RectHeight>:

int RectHeight(RECT *rc){
   804d0:	defffe04 	addi	sp,sp,-8
   804d4:	df000115 	stw	fp,4(sp)
   804d8:	df000104 	addi	fp,sp,4
   804dc:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
   804e0:	e0bfff17 	ldw	r2,-4(fp)
   804e4:	10c00317 	ldw	r3,12(r2)
   804e8:	e0bfff17 	ldw	r2,-4(fp)
   804ec:	10800217 	ldw	r2,8(r2)
   804f0:	1885c83a 	sub	r2,r3,r2
}
   804f4:	e037883a 	mov	sp,fp
   804f8:	df000017 	ldw	fp,0(sp)
   804fc:	dec00104 	addi	sp,sp,4
   80500:	f800283a 	ret

00080504 <PtDistance>:

int PtDistance(POINT *pt1, POINT *pt2){
   80504:	defff904 	addi	sp,sp,-28
   80508:	dfc00615 	stw	ra,24(sp)
   8050c:	df000515 	stw	fp,20(sp)
   80510:	df000504 	addi	fp,sp,20
   80514:	e13ffe15 	stw	r4,-8(fp)
   80518:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
   8051c:	e0bffe17 	ldw	r2,-8(fp)
   80520:	10c00017 	ldw	r3,0(r2)
   80524:	e0bfff17 	ldw	r2,-4(fp)
   80528:	10800017 	ldw	r2,0(r2)
   8052c:	1885c83a 	sub	r2,r3,r2
   80530:	e0bffb15 	stw	r2,-20(fp)
    b = pt1->y - pt2->y;
   80534:	e0bffe17 	ldw	r2,-8(fp)
   80538:	10c00117 	ldw	r3,4(r2)
   8053c:	e0bfff17 	ldw	r2,-4(fp)
   80540:	10800117 	ldw	r2,4(r2)
   80544:	1885c83a 	sub	r2,r3,r2
   80548:	e0bffc15 	stw	r2,-16(fp)
    nDistance = a*a + b*b;
   8054c:	e0fffb17 	ldw	r3,-20(fp)
   80550:	e0bffb17 	ldw	r2,-20(fp)
   80554:	1887383a 	mul	r3,r3,r2
   80558:	e13ffc17 	ldw	r4,-16(fp)
   8055c:	e0bffc17 	ldw	r2,-16(fp)
   80560:	2085383a 	mul	r2,r4,r2
   80564:	1885883a 	add	r2,r3,r2
   80568:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
   8056c:	e13ffd17 	ldw	r4,-12(fp)
   80570:	0089ab40 	call	89ab4 <__floatsidf>
   80574:	100b883a 	mov	r5,r2
   80578:	180d883a 	mov	r6,r3
   8057c:	2809883a 	mov	r4,r5
   80580:	300b883a 	mov	r5,r6
   80584:	00873080 	call	87308 <sqrt>
   80588:	100b883a 	mov	r5,r2
   8058c:	180d883a 	mov	r6,r3
   80590:	2809883a 	mov	r4,r5
   80594:	300b883a 	mov	r5,r6
   80598:	0089a340 	call	89a34 <__fixdfsi>
   8059c:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
   805a0:	e0bffd17 	ldw	r2,-12(fp)
}
   805a4:	e037883a 	mov	sp,fp
   805a8:	dfc00117 	ldw	ra,4(sp)
   805ac:	df000017 	ldw	fp,0(sp)
   805b0:	dec00204 	addi	sp,sp,8
   805b4:	f800283a 	ret

000805b8 <PtCopy>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
   805b8:	defffd04 	addi	sp,sp,-12
   805bc:	df000215 	stw	fp,8(sp)
   805c0:	df000204 	addi	fp,sp,8
   805c4:	e13ffe15 	stw	r4,-8(fp)
   805c8:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
   805cc:	e0bfff17 	ldw	r2,-4(fp)
   805d0:	10c00017 	ldw	r3,0(r2)
   805d4:	e0bffe17 	ldw	r2,-8(fp)
   805d8:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
   805dc:	e0bfff17 	ldw	r2,-4(fp)
   805e0:	10c00117 	ldw	r3,4(r2)
   805e4:	e0bffe17 	ldw	r2,-8(fp)
   805e8:	10c00115 	stw	r3,4(r2)
}
   805ec:	e037883a 	mov	sp,fp
   805f0:	df000017 	ldw	fp,0(sp)
   805f4:	dec00104 	addi	sp,sp,4
   805f8:	f800283a 	ret

000805fc <Delay_Ms>:
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
   805fc:	defffd04 	addi	sp,sp,-12
   80600:	dfc00215 	stw	ra,8(sp)
   80604:	df000115 	stw	fp,4(sp)
   80608:	df000104 	addi	fp,sp,4
   8060c:	2005883a 	mov	r2,r4
   80610:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
   80614:	00000206 	br	80620 <Delay_Ms+0x24>
    {
        usleep(1000);
   80618:	0100fa04 	movi	r4,1000
   8061c:	008bff40 	call	8bff4 <usleep>
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
   80620:	e0bfff0b 	ldhu	r2,-4(fp)
   80624:	10ffffc4 	addi	r3,r2,-1
   80628:	e0ffff0d 	sth	r3,-4(fp)
   8062c:	10bfffcc 	andi	r2,r2,65535
   80630:	103ff91e 	bne	r2,zero,80618 <__alt_data_end+0xfffc83a8>
    {
        usleep(1000);
    }
}
   80634:	e037883a 	mov	sp,fp
   80638:	dfc00117 	ldw	ra,4(sp)
   8063c:	df000017 	ldw	fp,0(sp)
   80640:	dec00204 	addi	sp,sp,8
   80644:	f800283a 	ret

00080648 <LCD_SetCursor>:


void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos)
{
   80648:	defffd04 	addi	sp,sp,-12
   8064c:	df000215 	stw	fp,8(sp)
   80650:	df000204 	addi	fp,sp,8
   80654:	2007883a 	mov	r3,r4
   80658:	2805883a 	mov	r2,r5
   8065c:	e0fffe0d 	sth	r3,-8(fp)
   80660:	e0bfff0d 	sth	r2,-4(fp)
	 LCD_WR_REG(0x002A);
   80664:	00c00a84 	movi	r3,42
   80668:	00800434 	movhi	r2,16
   8066c:	10842604 	addi	r2,r2,4248
   80670:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos>>8);
   80674:	e0bffe0b 	ldhu	r2,-8(fp)
   80678:	1004d23a 	srli	r2,r2,8
   8067c:	10ffffcc 	andi	r3,r2,65535
   80680:	00800434 	movhi	r2,16
   80684:	10842704 	addi	r2,r2,4252
   80688:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos&0XFF);
   8068c:	e0bffe0b 	ldhu	r2,-8(fp)
   80690:	10c03fcc 	andi	r3,r2,255
   80694:	00800434 	movhi	r2,16
   80698:	10842704 	addi	r2,r2,4252
   8069c:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002B);
   806a0:	00c00ac4 	movi	r3,43
   806a4:	00800434 	movhi	r2,16
   806a8:	10842604 	addi	r2,r2,4248
   806ac:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos>>8);
   806b0:	e0bfff0b 	ldhu	r2,-4(fp)
   806b4:	1004d23a 	srli	r2,r2,8
   806b8:	10ffffcc 	andi	r3,r2,65535
   806bc:	00800434 	movhi	r2,16
   806c0:	10842704 	addi	r2,r2,4252
   806c4:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos&0XFF);
   806c8:	e0bfff0b 	ldhu	r2,-4(fp)
   806cc:	10c03fcc 	andi	r3,r2,255
   806d0:	00800434 	movhi	r2,16
   806d4:	10842704 	addi	r2,r2,4252
   806d8:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002C);
   806dc:	00c00b04 	movi	r3,44
   806e0:	00800434 	movhi	r2,16
   806e4:	10842604 	addi	r2,r2,4248
   806e8:	10c00035 	stwio	r3,0(r2)
}
   806ec:	e037883a 	mov	sp,fp
   806f0:	df000017 	ldw	fp,0(sp)
   806f4:	dec00104 	addi	sp,sp,4
   806f8:	f800283a 	ret

000806fc <LCD_Clear>:

void LCD_Clear(alt_u16 Color)
{
   806fc:	defffc04 	addi	sp,sp,-16
   80700:	dfc00315 	stw	ra,12(sp)
   80704:	df000215 	stw	fp,8(sp)
   80708:	df000204 	addi	fp,sp,8
   8070c:	2005883a 	mov	r2,r4
   80710:	e0bfff0d 	sth	r2,-4(fp)
        alt_u32 index=0;
   80714:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
   80718:	0009883a 	mov	r4,zero
   8071c:	000b883a 	mov	r5,zero
   80720:	00806480 	call	80648 <LCD_SetCursor>
        LCD_WR_REG(0x002C);
   80724:	00c00b04 	movi	r3,44
   80728:	00800434 	movhi	r2,16
   8072c:	10842604 	addi	r2,r2,4248
   80730:	10c00035 	stwio	r3,0(r2)
        for(index=0;index<76800;index++)
   80734:	e03ffe15 	stw	zero,-8(fp)
   80738:	00000706 	br	80758 <LCD_Clear+0x5c>
        {
        	LCD_WR_DATA(Color);
   8073c:	e0ffff0b 	ldhu	r3,-4(fp)
   80740:	00800434 	movhi	r2,16
   80744:	10842704 	addi	r2,r2,4252
   80748:	10c00035 	stwio	r3,0(r2)
void LCD_Clear(alt_u16 Color)
{
        alt_u32 index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
   8074c:	e0bffe17 	ldw	r2,-8(fp)
   80750:	10800044 	addi	r2,r2,1
   80754:	e0bffe15 	stw	r2,-8(fp)
   80758:	e0bffe17 	ldw	r2,-8(fp)
   8075c:	00c00074 	movhi	r3,1
   80760:	18caffc4 	addi	r3,r3,11263
   80764:	18bff52e 	bgeu	r3,r2,8073c <__alt_data_end+0xfffc84cc>
        {
        	LCD_WR_DATA(Color);
        }
}
   80768:	e037883a 	mov	sp,fp
   8076c:	dfc00117 	ldw	ra,4(sp)
   80770:	df000017 	ldw	fp,0(sp)
   80774:	dec00204 	addi	sp,sp,8
   80778:	f800283a 	ret

0008077c <LCD_DrawPoint>:

void LCD_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color )
{
   8077c:	defffb04 	addi	sp,sp,-20
   80780:	dfc00415 	stw	ra,16(sp)
   80784:	df000315 	stw	fp,12(sp)
   80788:	df000304 	addi	fp,sp,12
   8078c:	2807883a 	mov	r3,r5
   80790:	3005883a 	mov	r2,r6
   80794:	e13ffd0d 	sth	r4,-12(fp)
   80798:	e0fffe0d 	sth	r3,-8(fp)
   8079c:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(x,y);
   807a0:	e0fffd0b 	ldhu	r3,-12(fp)
   807a4:	e0bffe0b 	ldhu	r2,-8(fp)
   807a8:	1809883a 	mov	r4,r3
   807ac:	100b883a 	mov	r5,r2
   807b0:	00806480 	call	80648 <LCD_SetCursor>
        LCD_WR_REG(0x002C);
   807b4:	00c00b04 	movi	r3,44
   807b8:	00800434 	movhi	r2,16
   807bc:	10842604 	addi	r2,r2,4248
   807c0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(color);
   807c4:	e0ffff0b 	ldhu	r3,-4(fp)
   807c8:	00800434 	movhi	r2,16
   807cc:	10842704 	addi	r2,r2,4252
   807d0:	10c00035 	stwio	r3,0(r2)
}
   807d4:	e037883a 	mov	sp,fp
   807d8:	dfc00117 	ldw	ra,4(sp)
   807dc:	df000017 	ldw	fp,0(sp)
   807e0:	dec00204 	addi	sp,sp,8
   807e4:	f800283a 	ret

000807e8 <LCD_Init>:
void LCD_Init()
{
   807e8:	defffe04 	addi	sp,sp,-8
   807ec:	dfc00115 	stw	ra,4(sp)
   807f0:	df000015 	stw	fp,0(sp)
   807f4:	d839883a 	mov	fp,sp
	alt_u16 data1,data2;
	alt_u16 data3,data4;
	Set_LCD_RST;
   807f8:	00c00044 	movi	r3,1
   807fc:	00800434 	movhi	r2,16
   80800:	10842004 	addi	r2,r2,4224
   80804:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
   80808:	01000044 	movi	r4,1
   8080c:	00805fc0 	call	805fc <Delay_Ms>
	Clr_LCD_RST;
   80810:	0007883a 	mov	r3,zero
   80814:	00800434 	movhi	r2,16
   80818:	10842004 	addi	r2,r2,4224
   8081c:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
   80820:	01000284 	movi	r4,10
   80824:	00805fc0 	call	805fc <Delay_Ms>
	Set_LCD_RST;
   80828:	00c00044 	movi	r3,1
   8082c:	00800434 	movhi	r2,16
   80830:	10842004 	addi	r2,r2,4224
   80834:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);       // Delay 120 ms
   80838:	01001e04 	movi	r4,120
   8083c:	00805fc0 	call	805fc <Delay_Ms>
//	Clr_LCD_CS;



	LCD_WR_REG(0x0011); //Exit Sleep
   80840:	00c00444 	movi	r3,17
   80844:	00800434 	movhi	r2,16
   80848:	10842604 	addi	r2,r2,4248
   8084c:	10c00035 	stwio	r3,0(r2)
	LCD_WR_REG(0x00CF);
   80850:	00c033c4 	movi	r3,207
   80854:	00800434 	movhi	r2,16
   80858:	10842604 	addi	r2,r2,4248
   8085c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80860:	0007883a 	mov	r3,zero
   80864:	00800434 	movhi	r2,16
   80868:	10842704 	addi	r2,r2,4252
   8086c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0081);
   80870:	00c02044 	movi	r3,129
   80874:	00800434 	movhi	r2,16
   80878:	10842704 	addi	r2,r2,4252
   8087c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00c0);
   80880:	00c03004 	movi	r3,192
   80884:	00800434 	movhi	r2,16
   80888:	10842704 	addi	r2,r2,4252
   8088c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00ED);
   80890:	00c03b44 	movi	r3,237
   80894:	00800434 	movhi	r2,16
   80898:	10842604 	addi	r2,r2,4248
   8089c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0064);
   808a0:	00c01904 	movi	r3,100
   808a4:	00800434 	movhi	r2,16
   808a8:	10842704 	addi	r2,r2,4252
   808ac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0003);
   808b0:	00c000c4 	movi	r3,3
   808b4:	00800434 	movhi	r2,16
   808b8:	10842704 	addi	r2,r2,4252
   808bc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0012);
   808c0:	00c00484 	movi	r3,18
   808c4:	00800434 	movhi	r2,16
   808c8:	10842704 	addi	r2,r2,4252
   808cc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0081);
   808d0:	00c02044 	movi	r3,129
   808d4:	00800434 	movhi	r2,16
   808d8:	10842704 	addi	r2,r2,4252
   808dc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E8);
   808e0:	00c03a04 	movi	r3,232
   808e4:	00800434 	movhi	r2,16
   808e8:	10842604 	addi	r2,r2,4248
   808ec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0085);
   808f0:	00c02144 	movi	r3,133
   808f4:	00800434 	movhi	r2,16
   808f8:	10842704 	addi	r2,r2,4252
   808fc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   80900:	00c00044 	movi	r3,1
   80904:	00800434 	movhi	r2,16
   80908:	10842704 	addi	r2,r2,4252
   8090c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00798);
   80910:	00c1e604 	movi	r3,1944
   80914:	00800434 	movhi	r2,16
   80918:	10842704 	addi	r2,r2,4252
   8091c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00CB);
   80920:	00c032c4 	movi	r3,203
   80924:	00800434 	movhi	r2,16
   80928:	10842604 	addi	r2,r2,4248
   8092c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0039);
   80930:	00c00e44 	movi	r3,57
   80934:	00800434 	movhi	r2,16
   80938:	10842704 	addi	r2,r2,4252
   8093c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002C);
   80940:	00c00b04 	movi	r3,44
   80944:	00800434 	movhi	r2,16
   80948:	10842704 	addi	r2,r2,4252
   8094c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80950:	0007883a 	mov	r3,zero
   80954:	00800434 	movhi	r2,16
   80958:	10842704 	addi	r2,r2,4252
   8095c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
   80960:	00c00d04 	movi	r3,52
   80964:	00800434 	movhi	r2,16
   80968:	10842704 	addi	r2,r2,4252
   8096c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0002);
   80970:	00c00084 	movi	r3,2
   80974:	00800434 	movhi	r2,16
   80978:	10842704 	addi	r2,r2,4252
   8097c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F7);
   80980:	00c03dc4 	movi	r3,247
   80984:	00800434 	movhi	r2,16
   80988:	10842604 	addi	r2,r2,4248
   8098c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
   80990:	00c00804 	movi	r3,32
   80994:	00800434 	movhi	r2,16
   80998:	10842704 	addi	r2,r2,4252
   8099c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00EA);
   809a0:	00c03a84 	movi	r3,234
   809a4:	00800434 	movhi	r2,16
   809a8:	10842604 	addi	r2,r2,4248
   809ac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   809b0:	0007883a 	mov	r3,zero
   809b4:	00800434 	movhi	r2,16
   809b8:	10842704 	addi	r2,r2,4252
   809bc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   809c0:	0007883a 	mov	r3,zero
   809c4:	00800434 	movhi	r2,16
   809c8:	10842704 	addi	r2,r2,4252
   809cc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B1);
   809d0:	00c02c44 	movi	r3,177
   809d4:	00800434 	movhi	r2,16
   809d8:	10842604 	addi	r2,r2,4248
   809dc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   809e0:	0007883a 	mov	r3,zero
   809e4:	00800434 	movhi	r2,16
   809e8:	10842704 	addi	r2,r2,4252
   809ec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001b);
   809f0:	00c006c4 	movi	r3,27
   809f4:	00800434 	movhi	r2,16
   809f8:	10842704 	addi	r2,r2,4252
   809fc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B6);
   80a00:	00c02d84 	movi	r3,182
   80a04:	00800434 	movhi	r2,16
   80a08:	10842604 	addi	r2,r2,4248
   80a0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000A);
   80a10:	00c00284 	movi	r3,10
   80a14:	00800434 	movhi	r2,16
   80a18:	10842704 	addi	r2,r2,4252
   80a1c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00A2);
   80a20:	00c02884 	movi	r3,162
   80a24:	00800434 	movhi	r2,16
   80a28:	10842704 	addi	r2,r2,4252
   80a2c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C0);    //Power control
   80a30:	00c03004 	movi	r3,192
   80a34:	00800434 	movhi	r2,16
   80a38:	10842604 	addi	r2,r2,4248
   80a3c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);   //VRH[5:0]
   80a40:	00c00144 	movi	r3,5
   80a44:	00800434 	movhi	r2,16
   80a48:	10842704 	addi	r2,r2,4252
   80a4c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C1);    //Power control
   80a50:	00c03044 	movi	r3,193
   80a54:	00800434 	movhi	r2,16
   80a58:	10842604 	addi	r2,r2,4248
   80a5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
   80a60:	00c00444 	movi	r3,17
   80a64:	00800434 	movhi	r2,16
   80a68:	10842704 	addi	r2,r2,4252
   80a6c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C5);    //VCM control
   80a70:	00c03144 	movi	r3,197
   80a74:	00800434 	movhi	r2,16
   80a78:	10842604 	addi	r2,r2,4248
   80a7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3F
   80a80:	00c01144 	movi	r3,69
   80a84:	00800434 	movhi	r2,16
   80a88:	10842704 	addi	r2,r2,4252
   80a8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3C
   80a90:	00c01144 	movi	r3,69
   80a94:	00800434 	movhi	r2,16
   80a98:	10842704 	addi	r2,r2,4252
   80a9c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00C7);    //VCM control2
   80aa0:	00c031c4 	movi	r3,199
   80aa4:	00800434 	movhi	r2,16
   80aa8:	10842604 	addi	r2,r2,4248
   80aac:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(0X00a2);
   80ab0:	00c02884 	movi	r3,162
   80ab4:	00800434 	movhi	r2,16
   80ab8:	10842704 	addi	r2,r2,4252
   80abc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0036);    // Memory Access Control
   80ac0:	00c00d84 	movi	r3,54
   80ac4:	00800434 	movhi	r2,16
   80ac8:	10842604 	addi	r2,r2,4248
   80acc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);//48
   80ad0:	00c00204 	movi	r3,8
   80ad4:	00800434 	movhi	r2,16
   80ad8:	10842704 	addi	r2,r2,4252
   80adc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
   80ae0:	00c03c84 	movi	r3,242
   80ae4:	00800434 	movhi	r2,16
   80ae8:	10842604 	addi	r2,r2,4248
   80aec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80af0:	0007883a 	mov	r3,zero
   80af4:	00800434 	movhi	r2,16
   80af8:	10842704 	addi	r2,r2,4252
   80afc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0026);    //Gamma curve selected
   80b00:	00c00984 	movi	r3,38
   80b04:	00800434 	movhi	r2,16
   80b08:	10842604 	addi	r2,r2,4248
   80b0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   80b10:	00c00044 	movi	r3,1
   80b14:	00800434 	movhi	r2,16
   80b18:	10842704 	addi	r2,r2,4252
   80b1c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E0);    //Set Gamma
   80b20:	00c03804 	movi	r3,224
   80b24:	00800434 	movhi	r2,16
   80b28:	10842604 	addi	r2,r2,4248
   80b2c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000F);
   80b30:	00c003c4 	movi	r3,15
   80b34:	00800434 	movhi	r2,16
   80b38:	10842704 	addi	r2,r2,4252
   80b3c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0026);
   80b40:	00c00984 	movi	r3,38
   80b44:	00800434 	movhi	r2,16
   80b48:	10842704 	addi	r2,r2,4252
   80b4c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0024);
   80b50:	00c00904 	movi	r3,36
   80b54:	00800434 	movhi	r2,16
   80b58:	10842704 	addi	r2,r2,4252
   80b5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
   80b60:	00c002c4 	movi	r3,11
   80b64:	00800434 	movhi	r2,16
   80b68:	10842704 	addi	r2,r2,4252
   80b6c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000E);
   80b70:	00c00384 	movi	r3,14
   80b74:	00800434 	movhi	r2,16
   80b78:	10842704 	addi	r2,r2,4252
   80b7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
   80b80:	00c00204 	movi	r3,8
   80b84:	00800434 	movhi	r2,16
   80b88:	10842704 	addi	r2,r2,4252
   80b8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x004b);
   80b90:	00c012c4 	movi	r3,75
   80b94:	00800434 	movhi	r2,16
   80b98:	10842704 	addi	r2,r2,4252
   80b9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00a8);
   80ba0:	00c02a04 	movi	r3,168
   80ba4:	00800434 	movhi	r2,16
   80ba8:	10842704 	addi	r2,r2,4252
   80bac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003b);
   80bb0:	00c00ec4 	movi	r3,59
   80bb4:	00800434 	movhi	r2,16
   80bb8:	10842704 	addi	r2,r2,4252
   80bbc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000a);
   80bc0:	00c00284 	movi	r3,10
   80bc4:	00800434 	movhi	r2,16
   80bc8:	10842704 	addi	r2,r2,4252
   80bcc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0014);
   80bd0:	00c00504 	movi	r3,20
   80bd4:	00800434 	movhi	r2,16
   80bd8:	10842704 	addi	r2,r2,4252
   80bdc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0006);
   80be0:	00c00184 	movi	r3,6
   80be4:	00800434 	movhi	r2,16
   80be8:	10842704 	addi	r2,r2,4252
   80bec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
   80bf0:	00c00404 	movi	r3,16
   80bf4:	00800434 	movhi	r2,16
   80bf8:	10842704 	addi	r2,r2,4252
   80bfc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
   80c00:	00c00244 	movi	r3,9
   80c04:	00800434 	movhi	r2,16
   80c08:	10842704 	addi	r2,r2,4252
   80c0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80c10:	0007883a 	mov	r3,zero
   80c14:	00800434 	movhi	r2,16
   80c18:	10842704 	addi	r2,r2,4252
   80c1c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0X00E1);    //Set Gamma
   80c20:	00c03844 	movi	r3,225
   80c24:	00800434 	movhi	r2,16
   80c28:	10842604 	addi	r2,r2,4248
   80c2c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80c30:	0007883a 	mov	r3,zero
   80c34:	00800434 	movhi	r2,16
   80c38:	10842704 	addi	r2,r2,4252
   80c3c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001c);
   80c40:	00c00704 	movi	r3,28
   80c44:	00800434 	movhi	r2,16
   80c48:	10842704 	addi	r2,r2,4252
   80c4c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
   80c50:	00c00804 	movi	r3,32
   80c54:	00800434 	movhi	r2,16
   80c58:	10842704 	addi	r2,r2,4252
   80c5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0004);
   80c60:	00c00104 	movi	r3,4
   80c64:	00800434 	movhi	r2,16
   80c68:	10842704 	addi	r2,r2,4252
   80c6c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
   80c70:	00c00404 	movi	r3,16
   80c74:	00800434 	movhi	r2,16
   80c78:	10842704 	addi	r2,r2,4252
   80c7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
   80c80:	00c00204 	movi	r3,8
   80c84:	00800434 	movhi	r2,16
   80c88:	10842704 	addi	r2,r2,4252
   80c8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
   80c90:	00c00d04 	movi	r3,52
   80c94:	00800434 	movhi	r2,16
   80c98:	10842704 	addi	r2,r2,4252
   80c9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0047);
   80ca0:	00c011c4 	movi	r3,71
   80ca4:	00800434 	movhi	r2,16
   80ca8:	10842704 	addi	r2,r2,4252
   80cac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0044);
   80cb0:	00c01104 	movi	r3,68
   80cb4:	00800434 	movhi	r2,16
   80cb8:	10842704 	addi	r2,r2,4252
   80cbc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);
   80cc0:	00c00144 	movi	r3,5
   80cc4:	00800434 	movhi	r2,16
   80cc8:	10842704 	addi	r2,r2,4252
   80ccc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
   80cd0:	00c002c4 	movi	r3,11
   80cd4:	00800434 	movhi	r2,16
   80cd8:	10842704 	addi	r2,r2,4252
   80cdc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
   80ce0:	00c00244 	movi	r3,9
   80ce4:	00800434 	movhi	r2,16
   80ce8:	10842704 	addi	r2,r2,4252
   80cec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002f);
   80cf0:	00c00bc4 	movi	r3,47
   80cf4:	00800434 	movhi	r2,16
   80cf8:	10842704 	addi	r2,r2,4252
   80cfc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0036);
   80d00:	00c00d84 	movi	r3,54
   80d04:	00800434 	movhi	r2,16
   80d08:	10842704 	addi	r2,r2,4252
   80d0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000f);
   80d10:	00c003c4 	movi	r3,15
   80d14:	00800434 	movhi	r2,16
   80d18:	10842704 	addi	r2,r2,4252
   80d1c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002A);
   80d20:	00c00a84 	movi	r3,42
   80d24:	00800434 	movhi	r2,16
   80d28:	10842604 	addi	r2,r2,4248
   80d2c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80d30:	0007883a 	mov	r3,zero
   80d34:	00800434 	movhi	r2,16
   80d38:	10842704 	addi	r2,r2,4252
   80d3c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80d40:	0007883a 	mov	r3,zero
   80d44:	00800434 	movhi	r2,16
   80d48:	10842704 	addi	r2,r2,4252
   80d4c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80d50:	0007883a 	mov	r3,zero
   80d54:	00800434 	movhi	r2,16
   80d58:	10842704 	addi	r2,r2,4252
   80d5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00ef);
   80d60:	00c03bc4 	movi	r3,239
   80d64:	00800434 	movhi	r2,16
   80d68:	10842704 	addi	r2,r2,4252
   80d6c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x002B);
   80d70:	00c00ac4 	movi	r3,43
   80d74:	00800434 	movhi	r2,16
   80d78:	10842604 	addi	r2,r2,4248
   80d7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80d80:	0007883a 	mov	r3,zero
   80d84:	00800434 	movhi	r2,16
   80d88:	10842704 	addi	r2,r2,4252
   80d8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80d90:	0007883a 	mov	r3,zero
   80d94:	00800434 	movhi	r2,16
   80d98:	10842704 	addi	r2,r2,4252
   80d9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   80da0:	00c00044 	movi	r3,1
   80da4:	00800434 	movhi	r2,16
   80da8:	10842704 	addi	r2,r2,4252
   80dac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003f);
   80db0:	00c00fc4 	movi	r3,63
   80db4:	00800434 	movhi	r2,16
   80db8:	10842704 	addi	r2,r2,4252
   80dbc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x003A);
   80dc0:	00c00e84 	movi	r3,58
   80dc4:	00800434 	movhi	r2,16
   80dc8:	10842604 	addi	r2,r2,4248
   80dcc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0055);
   80dd0:	00c01544 	movi	r3,85
   80dd4:	00800434 	movhi	r2,16
   80dd8:	10842704 	addi	r2,r2,4252
   80ddc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00f6);
   80de0:	00c03d84 	movi	r3,246
   80de4:	00800434 	movhi	r2,16
   80de8:	10842604 	addi	r2,r2,4248
   80dec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   80df0:	00c00044 	movi	r3,1
   80df4:	00800434 	movhi	r2,16
   80df8:	10842704 	addi	r2,r2,4252
   80dfc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0030);
   80e00:	00c00c04 	movi	r3,48
   80e04:	00800434 	movhi	r2,16
   80e08:	10842704 	addi	r2,r2,4252
   80e0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80e10:	0007883a 	mov	r3,zero
   80e14:	00800434 	movhi	r2,16
   80e18:	10842704 	addi	r2,r2,4252
   80e1c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0029); //display on
   80e20:	00c00a44 	movi	r3,41
   80e24:	00800434 	movhi	r2,16
   80e28:	10842604 	addi	r2,r2,4248
   80e2c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002c);    // 0x2C
   80e30:	00c00b04 	movi	r3,44
   80e34:	00800434 	movhi	r2,16
   80e38:	10842604 	addi	r2,r2,4248
   80e3c:	10c00035 	stwio	r3,0(r2)

}
   80e40:	e037883a 	mov	sp,fp
   80e44:	dfc00117 	ldw	ra,4(sp)
   80e48:	df000017 	ldw	fp,0(sp)
   80e4c:	dec00204 	addi	sp,sp,8
   80e50:	f800283a 	ret

00080e54 <LCD_Pattern_Horizon>:


void LCD_Pattern_Horizon(void)
{
   80e54:	defffc04 	addi	sp,sp,-16
   80e58:	dfc00315 	stw	ra,12(sp)
   80e5c:	df000215 	stw	fp,8(sp)
   80e60:	df000204 	addi	fp,sp,8
        alt_u32 index=0;
   80e64:	e03ffe15 	stw	zero,-8(fp)
        alt_u16  data=0;
   80e68:	e03fff0d 	sth	zero,-4(fp)
        LCD_SetCursor(0x00,0x0000);
   80e6c:	0009883a 	mov	r4,zero
   80e70:	000b883a 	mov	r5,zero
   80e74:	00806480 	call	80648 <LCD_SetCursor>
        data=0x0000;
   80e78:	e03fff0d 	sth	zero,-4(fp)
        for(index=0;index<240*80;index++)
   80e7c:	e03ffe15 	stw	zero,-8(fp)
   80e80:	00000706 	br	80ea0 <LCD_Pattern_Horizon+0x4c>
        {
        	LCD_WR_DATA(data);
   80e84:	e0ffff0b 	ldhu	r3,-4(fp)
   80e88:	00800434 	movhi	r2,16
   80e8c:	10842704 	addi	r2,r2,4252
   80e90:	10c00035 	stwio	r3,0(r2)
{
        alt_u32 index=0;
        alt_u16  data=0;
        LCD_SetCursor(0x00,0x0000);
        data=0x0000;
        for(index=0;index<240*80;index++)
   80e94:	e0bffe17 	ldw	r2,-8(fp)
   80e98:	10800044 	addi	r2,r2,1
   80e9c:	e0bffe15 	stw	r2,-8(fp)
   80ea0:	e0bffe17 	ldw	r2,-8(fp)
   80ea4:	1092c030 	cmpltui	r2,r2,19200
   80ea8:	103ff61e 	bne	r2,zero,80e84 <__alt_data_end+0xfffc8c14>
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
   80eac:	0009883a 	mov	r4,zero
   80eb0:	01401404 	movi	r5,80
   80eb4:	00806480 	call	80648 <LCD_SetCursor>
        data=RED;
   80eb8:	00be0004 	movi	r2,-2048
   80ebc:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
   80ec0:	e03ffe15 	stw	zero,-8(fp)
   80ec4:	00000706 	br	80ee4 <LCD_Pattern_Horizon+0x90>
		{
			LCD_WR_DATA(data);
   80ec8:	e0ffff0b 	ldhu	r3,-4(fp)
   80ecc:	00800434 	movhi	r2,16
   80ed0:	10842704 	addi	r2,r2,4252
   80ed4:	10c00035 	stwio	r3,0(r2)
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
        data=RED;
		for(index=0;index<240*80;index++)
   80ed8:	e0bffe17 	ldw	r2,-8(fp)
   80edc:	10800044 	addi	r2,r2,1
   80ee0:	e0bffe15 	stw	r2,-8(fp)
   80ee4:	e0bffe17 	ldw	r2,-8(fp)
   80ee8:	1092c030 	cmpltui	r2,r2,19200
   80eec:	103ff61e 	bne	r2,zero,80ec8 <__alt_data_end+0xfffc8c58>
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
   80ef0:	0009883a 	mov	r4,zero
   80ef4:	01402804 	movi	r5,160
   80ef8:	00806480 	call	80648 <LCD_SetCursor>
		data=GREEN;
   80efc:	0081f804 	movi	r2,2016
   80f00:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
   80f04:	e03ffe15 	stw	zero,-8(fp)
   80f08:	00000706 	br	80f28 <LCD_Pattern_Horizon+0xd4>
		{
			LCD_WR_DATA(data);
   80f0c:	e0ffff0b 	ldhu	r3,-4(fp)
   80f10:	00800434 	movhi	r2,16
   80f14:	10842704 	addi	r2,r2,4252
   80f18:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
		data=GREEN;
		for(index=0;index<240*80;index++)
   80f1c:	e0bffe17 	ldw	r2,-8(fp)
   80f20:	10800044 	addi	r2,r2,1
   80f24:	e0bffe15 	stw	r2,-8(fp)
   80f28:	e0bffe17 	ldw	r2,-8(fp)
   80f2c:	1092c030 	cmpltui	r2,r2,19200
   80f30:	103ff61e 	bne	r2,zero,80f0c <__alt_data_end+0xfffc8c9c>
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
   80f34:	0009883a 	mov	r4,zero
   80f38:	01403c04 	movi	r5,240
   80f3c:	00806480 	call	80648 <LCD_SetCursor>
		data=BLUE;
   80f40:	008007c4 	movi	r2,31
   80f44:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
   80f48:	e03ffe15 	stw	zero,-8(fp)
   80f4c:	00000706 	br	80f6c <LCD_Pattern_Horizon+0x118>
		{
			LCD_WR_DATA(data);
   80f50:	e0ffff0b 	ldhu	r3,-4(fp)
   80f54:	00800434 	movhi	r2,16
   80f58:	10842704 	addi	r2,r2,4252
   80f5c:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
		data=BLUE;
		for(index=0;index<240*80;index++)
   80f60:	e0bffe17 	ldw	r2,-8(fp)
   80f64:	10800044 	addi	r2,r2,1
   80f68:	e0bffe15 	stw	r2,-8(fp)
   80f6c:	e0bffe17 	ldw	r2,-8(fp)
   80f70:	1092c030 	cmpltui	r2,r2,19200
   80f74:	103ff61e 	bne	r2,zero,80f50 <__alt_data_end+0xfffc8ce0>
		{
			LCD_WR_DATA(data);
		}
}
   80f78:	e037883a 	mov	sp,fp
   80f7c:	dfc00117 	ldw	ra,4(sp)
   80f80:	df000017 	ldw	fp,0(sp)
   80f84:	dec00204 	addi	sp,sp,8
   80f88:	f800283a 	ret

00080f8c <LCD_Pattern_Vertical>:

void LCD_Pattern_Vertical(void)
{
   80f8c:	defff804 	addi	sp,sp,-32
   80f90:	dfc00715 	stw	ra,28(sp)
   80f94:	df000615 	stw	fp,24(sp)
   80f98:	df000604 	addi	fp,sp,24
        int i,j,m;
        alt_u16  data=0;
   80f9c:	e03ffd0d 	sth	zero,-12(fp)
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
   80fa0:	00bfffc4 	movi	r2,-1
   80fa4:	e0bffd8d 	sth	r2,-10(fp)
   80fa8:	008007c4 	movi	r2,31
   80fac:	e0bffe0d 	sth	r2,-8(fp)
   80fb0:	0081f804 	movi	r2,2016
   80fb4:	e0bffe8d 	sth	r2,-6(fp)
   80fb8:	00be0004 	movi	r2,-2048
   80fbc:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(0x00,0x0000);
   80fc0:	0009883a 	mov	r4,zero
   80fc4:	000b883a 	mov	r5,zero
   80fc8:	00806480 	call	80648 <LCD_SetCursor>
        for(m=0;m<320;m++)
   80fcc:	e03ffc15 	stw	zero,-16(fp)
   80fd0:	00001e06 	br	8104c <LCD_Pattern_Vertical+0xc0>
        {
			for(i=0;i<4;i++)
   80fd4:	e03ffa15 	stw	zero,-24(fp)
   80fd8:	00001606 	br	81034 <LCD_Pattern_Vertical+0xa8>
			{
				data=color[i];
   80fdc:	e0bffa17 	ldw	r2,-24(fp)
   80fe0:	1085883a 	add	r2,r2,r2
   80fe4:	e0fffa04 	addi	r3,fp,-24
   80fe8:	1885883a 	add	r2,r3,r2
   80fec:	10800384 	addi	r2,r2,14
   80ff0:	1080000b 	ldhu	r2,0(r2)
   80ff4:	e0bffd0d 	sth	r2,-12(fp)
				for(j=0;j<60;j++)
   80ff8:	e03ffb15 	stw	zero,-20(fp)
   80ffc:	00000706 	br	8101c <LCD_Pattern_Vertical+0x90>
				{
					LCD_WR_DATA(data);
   81000:	e0fffd0b 	ldhu	r3,-12(fp)
   81004:	00800434 	movhi	r2,16
   81008:	10842704 	addi	r2,r2,4252
   8100c:	10c00035 	stwio	r3,0(r2)
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
			{
				data=color[i];
				for(j=0;j<60;j++)
   81010:	e0bffb17 	ldw	r2,-20(fp)
   81014:	10800044 	addi	r2,r2,1
   81018:	e0bffb15 	stw	r2,-20(fp)
   8101c:	e0bffb17 	ldw	r2,-20(fp)
   81020:	10800f10 	cmplti	r2,r2,60
   81024:	103ff61e 	bne	r2,zero,81000 <__alt_data_end+0xfffc8d90>
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
   81028:	e0bffa17 	ldw	r2,-24(fp)
   8102c:	10800044 	addi	r2,r2,1
   81030:	e0bffa15 	stw	r2,-24(fp)
   81034:	e0bffa17 	ldw	r2,-24(fp)
   81038:	10800110 	cmplti	r2,r2,4
   8103c:	103fe71e 	bne	r2,zero,80fdc <__alt_data_end+0xfffc8d6c>
{
        int i,j,m;
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
   81040:	e0bffc17 	ldw	r2,-16(fp)
   81044:	10800044 	addi	r2,r2,1
   81048:	e0bffc15 	stw	r2,-16(fp)
   8104c:	e0bffc17 	ldw	r2,-16(fp)
   81050:	10805010 	cmplti	r2,r2,320
   81054:	103fdf1e 	bne	r2,zero,80fd4 <__alt_data_end+0xfffc8d64>
				{
					LCD_WR_DATA(data);
				}
			}
        }
}
   81058:	e037883a 	mov	sp,fp
   8105c:	dfc00117 	ldw	ra,4(sp)
   81060:	df000017 	ldw	fp,0(sp)
   81064:	dec00204 	addi	sp,sp,8
   81068:	f800283a 	ret

0008106c <vid_clean_screen>:
#include "ILI9341.h"
#endif


// richard add
void vid_clean_screen(alt_video_display* display, int color){
   8106c:	defffa04 	addi	sp,sp,-24
   81070:	dfc00515 	stw	ra,20(sp)
   81074:	df000415 	stw	fp,16(sp)
   81078:	df000404 	addi	fp,sp,16
   8107c:	e13ffe15 	stw	r4,-8(fp)
   81080:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
   81084:	e0bffe17 	ldw	r2,-8(fp)
   81088:	10c00117 	ldw	r3,4(r2)
   8108c:	e0bffe17 	ldw	r2,-8(fp)
   81090:	10800217 	ldw	r2,8(r2)
   81094:	e13fff17 	ldw	r4,-4(fp)
   81098:	d9000015 	stw	r4,0(sp)
   8109c:	e13ffe17 	ldw	r4,-8(fp)
   810a0:	d9000115 	stw	r4,4(sp)
   810a4:	0009883a 	mov	r4,zero
   810a8:	000b883a 	mov	r5,zero
   810ac:	180d883a 	mov	r6,r3
   810b0:	100f883a 	mov	r7,r2
   810b4:	0081be80 	call	81be8 <vid_paint_block>
}
   810b8:	e037883a 	mov	sp,fp
   810bc:	dfc00117 	ldw	ra,4(sp)
   810c0:	df000017 	ldw	fp,0(sp)
   810c4:	dec00204 	addi	sp,sp,8
   810c8:	f800283a 	ret

000810cc <vid_draw_line>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
   810cc:	defff704 	addi	sp,sp,-36
   810d0:	dfc00815 	stw	ra,32(sp)
   810d4:	df000715 	stw	fp,28(sp)
   810d8:	df000704 	addi	fp,sp,28
   810dc:	e13ffc15 	stw	r4,-16(fp)
   810e0:	e17ffd15 	stw	r5,-12(fp)
   810e4:	e1bffe15 	stw	r6,-8(fp)
   810e8:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
   810ec:	e0fffd17 	ldw	r3,-12(fp)
   810f0:	e0bfff17 	ldw	r2,-4(fp)
   810f4:	1880111e 	bne	r3,r2,8113c <vid_draw_line+0x70>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
   810f8:	e0bffc17 	ldw	r2,-16(fp)
   810fc:	113fffcc 	andi	r4,r2,65535
   81100:	2120001c 	xori	r4,r4,32768
   81104:	21200004 	addi	r4,r4,-32768
   81108:	e0bffe17 	ldw	r2,-8(fp)
   8110c:	10ffffcc 	andi	r3,r2,65535
   81110:	18e0001c 	xori	r3,r3,32768
   81114:	18e00004 	addi	r3,r3,-32768
                         (unsigned short)horiz_end, 
                         (unsigned short)vert_start,
   81118:	e0bffd17 	ldw	r2,-12(fp)
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
   8111c:	10bfffcc 	andi	r2,r2,65535
   81120:	e1400417 	ldw	r5,16(fp)
   81124:	d9400015 	stw	r5,0(sp)
   81128:	180b883a 	mov	r5,r3
   8112c:	100d883a 	mov	r6,r2
   81130:	e1c00317 	ldw	r7,12(fp)
   81134:	0081c7c0 	call	81c7c <vid_draw_horiz_line>
   81138:	00001206 	br	81184 <vid_draw_line+0xb8>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   8113c:	e0bffc17 	ldw	r2,-16(fp)
   81140:	113fffcc 	andi	r4,r2,65535
                          (unsigned short)vert_start, 
   81144:	e0bffd17 	ldw	r2,-12(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   81148:	117fffcc 	andi	r5,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
   8114c:	e0bffe17 	ldw	r2,-8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   81150:	10ffffcc 	andi	r3,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
   81154:	e0bfff17 	ldw	r2,-4(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   81158:	10bfffcc 	andi	r2,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
   8115c:	e1800217 	ldw	r6,8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   81160:	31bfffcc 	andi	r6,r6,65535
   81164:	d9800015 	stw	r6,0(sp)
   81168:	e1800317 	ldw	r6,12(fp)
   8116c:	d9800115 	stw	r6,4(sp)
   81170:	e1800417 	ldw	r6,16(fp)
   81174:	d9800215 	stw	r6,8(sp)
   81178:	180d883a 	mov	r6,r3
   8117c:	100f883a 	mov	r7,r2
   81180:	0081e8c0 	call	81e8c <vid_draw_sloped_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
   81184:	e037883a 	mov	sp,fp
   81188:	dfc00117 	ldw	ra,4(sp)
   8118c:	df000017 	ldw	fp,0(sp)
   81190:	dec00204 	addi	sp,sp,8
   81194:	f800283a 	ret

00081198 <vid_scroll_string_quit>:



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
   81198:	defffd04 	addi	sp,sp,-12
   8119c:	dfc00215 	stw	ra,8(sp)
   811a0:	df000115 	stw	fp,4(sp)
   811a4:	df000104 	addi	fp,sp,4
   811a8:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
   811ac:	e0bfff17 	ldw	r2,-4(fp)
   811b0:	10800517 	ldw	r2,20(r2)
   811b4:	1009883a 	mov	r4,r2
   811b8:	0089c540 	call	89c54 <free>
  free(scroll);
   811bc:	e13fff17 	ldw	r4,-4(fp)
   811c0:	0089c540 	call	89c54 <free>
}
   811c4:	e037883a 	mov	sp,fp
   811c8:	dfc00117 	ldw	ra,4(sp)
   811cc:	df000017 	ldw	fp,0(sp)
   811d0:	dec00204 	addi	sp,sp,8
   811d4:	f800283a 	ret

000811d8 <vid_scroll_string_init>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
   811d8:	defff904 	addi	sp,sp,-28
   811dc:	dfc00615 	stw	ra,24(sp)
   811e0:	df000515 	stw	fp,20(sp)
   811e4:	df000504 	addi	fp,sp,20
   811e8:	e13ffc15 	stw	r4,-16(fp)
   811ec:	e17ffd15 	stw	r5,-12(fp)
   811f0:	e1bffe15 	stw	r6,-8(fp)
   811f4:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = malloc(sizeof (vid_text_scroll_struct));
   811f8:	01000f04 	movi	r4,60
   811fc:	0089c400 	call	89c40 <malloc>
   81200:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
   81204:	e0bffb17 	ldw	r2,-20(fp)
   81208:	e0fffc17 	ldw	r3,-16(fp)
   8120c:	10c00015 	stw	r3,0(r2)
  scroll->vbegin = vbegin;
   81210:	e0bffb17 	ldw	r2,-20(fp)
   81214:	e0fffd17 	ldw	r3,-12(fp)
   81218:	10c00115 	stw	r3,4(r2)
  scroll->hend = hend;
   8121c:	e0bffb17 	ldw	r2,-20(fp)
   81220:	e0fffe17 	ldw	r3,-8(fp)
   81224:	10c00215 	stw	r3,8(r2)
  scroll->f_color = f_color;
   81228:	e0bffb17 	ldw	r2,-20(fp)
   8122c:	e0ffff17 	ldw	r3,-4(fp)
   81230:	10c00315 	stw	r3,12(r2)
  scroll->b_color = b_color;
   81234:	e0bffb17 	ldw	r2,-20(fp)
   81238:	e0c00217 	ldw	r3,8(fp)
   8123c:	10c00415 	stw	r3,16(r2)
  scroll->string = malloc(strlen(string)+2);
   81240:	e1000517 	ldw	r4,20(fp)
   81244:	008a5980 	call	8a598 <strlen>
   81248:	10800084 	addi	r2,r2,2
   8124c:	1009883a 	mov	r4,r2
   81250:	0089c400 	call	89c40 <malloc>
   81254:	1007883a 	mov	r3,r2
   81258:	e0bffb17 	ldw	r2,-20(fp)
   8125c:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
   81260:	e0bffb17 	ldw	r2,-20(fp)
   81264:	10800517 	ldw	r2,20(r2)
   81268:	1009883a 	mov	r4,r2
   8126c:	e1400517 	ldw	r5,20(fp)
   81270:	008a5780 	call	8a578 <strcpy>
  scroll->font = font;
   81274:	e0bffb17 	ldw	r2,-20(fp)
   81278:	e0c00317 	ldw	r3,12(fp)
   8127c:	10c00615 	stw	r3,24(r2)
  scroll->ms_delay = ms_delay;
   81280:	e0bffb17 	ldw	r2,-20(fp)
   81284:	e0c00417 	ldw	r3,16(fp)
   81288:	10c00715 	stw	r3,28(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8128c:	008002f4 	movhi	r2,11
   81290:	10b97b04 	addi	r2,r2,-6676
   81294:	10800017 	ldw	r2,0(r2)
  scroll->ticks_at_last_move = alt_nticks();
   81298:	1007883a 	mov	r3,r2
   8129c:	e0bffb17 	ldw	r2,-20(fp)
   812a0:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
   812a4:	e0bffb17 	ldw	r2,-20(fp)
   812a8:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
   812ac:	e0bffb17 	ldw	r2,-20(fp)
   812b0:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
   812b4:	e0bffb17 	ldw	r2,-20(fp)
   812b8:	10c00217 	ldw	r3,8(r2)
   812bc:	e0bffb17 	ldw	r2,-20(fp)
   812c0:	10800017 	ldw	r2,0(r2)
   812c4:	1887c83a 	sub	r3,r3,r2
   812c8:	e0bffb17 	ldw	r2,-20(fp)
   812cc:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
   812d0:	e1000517 	ldw	r4,20(fp)
   812d4:	008a5980 	call	8a598 <strlen>
   812d8:	1007883a 	mov	r3,r2
   812dc:	e0bffb17 	ldw	r2,-20(fp)
   812e0:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
   812e4:	e0bffb17 	ldw	r2,-20(fp)
   812e8:	10800c17 	ldw	r2,48(r2)
   812ec:	100690fa 	slli	r3,r2,3
   812f0:	e0bffb17 	ldw	r2,-20(fp)
   812f4:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
   812f8:	e0bffb17 	ldw	r2,-20(fp)
   812fc:	10c00b17 	ldw	r3,44(r2)
   81300:	e0bffb17 	ldw	r2,-20(fp)
   81304:	10800e17 	ldw	r2,56(r2)
   81308:	1887883a 	add	r3,r3,r2
   8130c:	e0bffb17 	ldw	r2,-20(fp)
   81310:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
   81314:	e0bffb17 	ldw	r2,-20(fp)
  
}
   81318:	e037883a 	mov	sp,fp
   8131c:	dfc00117 	ldw	ra,4(sp)
   81320:	df000017 	ldw	fp,0(sp)
   81324:	dec00204 	addi	sp,sp,8
   81328:	f800283a 	ret

0008132c <vid_scroll_string>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
   8132c:	deffec04 	addi	sp,sp,-80
   81330:	dfc01315 	stw	ra,76(sp)
   81334:	df001215 	stw	fp,72(sp)
   81338:	dc401115 	stw	r17,68(sp)
   8133c:	dc001015 	stw	r16,64(sp)
   81340:	df001204 	addi	fp,sp,72
   81344:	e13ffc15 	stw	r4,-16(fp)
   81348:	e17ffd15 	stw	r5,-12(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
   8134c:	00800044 	movi	r2,1
   81350:	e0bff605 	stb	r2,-40(fp)
   81354:	008002f4 	movhi	r2,11
   81358:	10b97b04 	addi	r2,r2,-6676
   8135c:	10800017 	ldw	r2,0(r2)

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
   81360:	1021883a 	mov	r16,r2
   81364:	e0bffc17 	ldw	r2,-16(fp)
   81368:	10800817 	ldw	r2,32(r2)
   8136c:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   81370:	008002f4 	movhi	r2,11
   81374:	10b97a04 	addi	r2,r2,-6680
   81378:	10800017 	ldw	r2,0(r2)
   8137c:	1007883a 	mov	r3,r2
   81380:	e0bffc17 	ldw	r2,-16(fp)
   81384:	10800717 	ldw	r2,28(r2)
   81388:	1885383a 	mul	r2,r3,r2
   8138c:	1009883a 	mov	r4,r2
   81390:	0140fa04 	movi	r5,1000
   81394:	00878740 	call	87874 <__udivsi3>
   81398:	8885883a 	add	r2,r17,r2
   8139c:	8080bb36 	bltu	r16,r2,8168c <vid_scroll_string+0x360>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   813a0:	008002f4 	movhi	r2,11
   813a4:	10b97b04 	addi	r2,r2,-6676
   813a8:	10800017 	ldw	r2,0(r2)
    scroll->ticks_at_last_move = alt_nticks();
   813ac:	1007883a 	mov	r3,r2
   813b0:	e0bffc17 	ldw	r2,-16(fp)
   813b4:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
   813b8:	e0bffc17 	ldw	r2,-16(fp)
   813bc:	10800a03 	ldbu	r2,40(r2)
   813c0:	10803fcc 	andi	r2,r2,255
   813c4:	1080201c 	xori	r2,r2,128
   813c8:	10bfe004 	addi	r2,r2,-128
   813cc:	1000061e 	bne	r2,zero,813e8 <vid_scroll_string+0xbc>
      scroll->text_scroll_index = 0;
   813d0:	e0bffc17 	ldw	r2,-16(fp)
   813d4:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
   813d8:	e0bffc17 	ldw	r2,-16(fp)
   813dc:	00c00044 	movi	r3,1
   813e0:	10c00a05 	stb	r3,40(r2)
   813e4:	00000e06 	br	81420 <vid_scroll_string+0xf4>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
   813e8:	e0bffc17 	ldw	r2,-16(fp)
   813ec:	10c00917 	ldw	r3,36(r2)
   813f0:	e0bffc17 	ldw	r2,-16(fp)
   813f4:	10800d17 	ldw	r2,52(r2)
   813f8:	18800316 	blt	r3,r2,81408 <vid_scroll_string+0xdc>
      scroll->text_scroll_started = 0;
   813fc:	e0bffc17 	ldw	r2,-16(fp)
   81400:	10000a05 	stb	zero,40(r2)
   81404:	00000606 	br	81420 <vid_scroll_string+0xf4>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
   81408:	e0bffc17 	ldw	r2,-16(fp)
   8140c:	10c00917 	ldw	r3,36(r2)
   81410:	e0bff607 	ldb	r2,-40(fp)
   81414:	1887883a 	add	r3,r3,r2
   81418:	e0bffc17 	ldw	r2,-16(fp)
   8141c:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
   81420:	e0bffc17 	ldw	r2,-16(fp)
   81424:	10c00917 	ldw	r3,36(r2)
   81428:	e0bffc17 	ldw	r2,-16(fp)
   8142c:	10800b17 	ldw	r2,44(r2)
   81430:	18800a0e 	bge	r3,r2,8145c <vid_scroll_string+0x130>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
   81434:	e0bffc17 	ldw	r2,-16(fp)
   81438:	10c00017 	ldw	r3,0(r2)
   8143c:	e0bffc17 	ldw	r2,-16(fp)
   81440:	10800b17 	ldw	r2,44(r2)
   81444:	1887883a 	add	r3,r3,r2
   81448:	e0bffc17 	ldw	r2,-16(fp)
   8144c:	10800917 	ldw	r2,36(r2)
   81450:	1885c83a 	sub	r2,r3,r2
   81454:	e0bff115 	stw	r2,-60(fp)
   81458:	00000306 	br	81468 <vid_scroll_string+0x13c>
    } else {
      x_start = scroll->hbegin;
   8145c:	e0bffc17 	ldw	r2,-16(fp)
   81460:	10800017 	ldw	r2,0(r2)
   81464:	e0bff115 	stw	r2,-60(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
   81468:	e0bffc17 	ldw	r2,-16(fp)
   8146c:	10800e17 	ldw	r2,56(r2)
   81470:	e0fffc17 	ldw	r3,-16(fp)
   81474:	18c00917 	ldw	r3,36(r3)
   81478:	1880040e 	bge	r3,r2,8148c <vid_scroll_string+0x160>
      x_end = scroll->hend;
   8147c:	e0bffc17 	ldw	r2,-16(fp)
   81480:	10800217 	ldw	r2,8(r2)
   81484:	e0bff215 	stw	r2,-56(fp)
   81488:	00000906 	br	814b0 <vid_scroll_string+0x184>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
   8148c:	e0bffc17 	ldw	r2,-16(fp)
   81490:	10c00217 	ldw	r3,8(r2)
   81494:	e0bffc17 	ldw	r2,-16(fp)
   81498:	10800917 	ldw	r2,36(r2)
   8149c:	1887c83a 	sub	r3,r3,r2
   814a0:	e0bffc17 	ldw	r2,-16(fp)
   814a4:	10800e17 	ldw	r2,56(r2)
   814a8:	1885883a 	add	r2,r3,r2
   814ac:	e0bff215 	stw	r2,-56(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
   814b0:	e0bff117 	ldw	r2,-60(fp)
   814b4:	e0bff315 	stw	r2,-52(fp)
   814b8:	00006006 	br	8163c <vid_scroll_string+0x310>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
   814bc:	e0bffc17 	ldw	r2,-16(fp)
   814c0:	10c00917 	ldw	r3,36(r2)
   814c4:	e0bffc17 	ldw	r2,-16(fp)
   814c8:	10800b17 	ldw	r2,44(r2)
   814cc:	1880050e 	bge	r3,r2,814e4 <vid_scroll_string+0x1b8>
        string_x_index = (x_index - x_start);
   814d0:	e0fff317 	ldw	r3,-52(fp)
   814d4:	e0bff117 	ldw	r2,-60(fp)
   814d8:	1885c83a 	sub	r2,r3,r2
   814dc:	e0bff415 	stw	r2,-48(fp)
   814e0:	00000a06 	br	8150c <vid_scroll_string+0x1e0>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
   814e4:	e0bffc17 	ldw	r2,-16(fp)
   814e8:	10c00917 	ldw	r3,36(r2)
   814ec:	e0bffc17 	ldw	r2,-16(fp)
   814f0:	10800b17 	ldw	r2,44(r2)
   814f4:	1887c83a 	sub	r3,r3,r2
   814f8:	e0bff317 	ldw	r2,-52(fp)
   814fc:	1887883a 	add	r3,r3,r2
   81500:	e0bff117 	ldw	r2,-60(fp)
   81504:	1885c83a 	sub	r2,r3,r2
   81508:	e0bff415 	stw	r2,-48(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
   8150c:	e0bff417 	ldw	r2,-48(fp)
   81510:	1000010e 	bge	r2,zero,81518 <vid_scroll_string+0x1ec>
   81514:	108001c4 	addi	r2,r2,7
   81518:	1005d0fa 	srai	r2,r2,3
   8151c:	e0bff715 	stw	r2,-36(fp)
      character = scroll->string[string_char_index];
   81520:	e0bffc17 	ldw	r2,-16(fp)
   81524:	10c00517 	ldw	r3,20(r2)
   81528:	e0bff717 	ldw	r2,-36(fp)
   8152c:	1885883a 	add	r2,r3,r2
   81530:	10800003 	ldbu	r2,0(r2)
   81534:	e0bff805 	stb	r2,-32(fp)
      char_column = (string_x_index % 8);
   81538:	e0fff417 	ldw	r3,-48(fp)
   8153c:	00a00034 	movhi	r2,32768
   81540:	108001c4 	addi	r2,r2,7
   81544:	1884703a 	and	r2,r3,r2
   81548:	1000040e 	bge	r2,zero,8155c <vid_scroll_string+0x230>
   8154c:	10bfffc4 	addi	r2,r2,-1
   81550:	00fffe04 	movi	r3,-8
   81554:	10c4b03a 	or	r2,r2,r3
   81558:	10800044 	addi	r2,r2,1
   8155c:	e0bff915 	stw	r2,-28(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
   81560:	00c02004 	movi	r3,128
   81564:	e0bff917 	ldw	r2,-28(fp)
   81568:	1884d83a 	srl	r2,r3,r2
   8156c:	e0bffa05 	stb	r2,-24(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
   81570:	e0bffc17 	ldw	r2,-16(fp)
   81574:	10c00617 	ldw	r3,24(r2)
   81578:	e0bff807 	ldb	r2,-32(fp)
   8157c:	10bff804 	addi	r2,r2,-32
   81580:	108002e4 	muli	r2,r2,11
   81584:	1885883a 	add	r2,r3,r2
   81588:	e0bffb15 	stw	r2,-20(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
   8158c:	e03ff515 	stw	zero,-44(fp)
   81590:	00002406 	br	81624 <vid_scroll_string+0x2f8>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
   81594:	e0bff517 	ldw	r2,-44(fp)
   81598:	e0fffb17 	ldw	r3,-20(fp)
   8159c:	1885883a 	add	r2,r3,r2
   815a0:	10c00003 	ldbu	r3,0(r2)
   815a4:	e0bffa03 	ldbu	r2,-24(fp)
   815a8:	1884703a 	and	r2,r3,r2
   815ac:	10803fcc 	andi	r2,r2,255
   815b0:	1080201c 	xori	r2,r2,128
   815b4:	10bfe004 	addi	r2,r2,-128
   815b8:	10000c26 	beq	r2,zero,815ec <vid_scroll_string+0x2c0>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
   815bc:	e0bffc17 	ldw	r2,-16(fp)
   815c0:	10c00117 	ldw	r3,4(r2)
   815c4:	e0bff517 	ldw	r2,-44(fp)
   815c8:	1887883a 	add	r3,r3,r2
   815cc:	e0bffc17 	ldw	r2,-16(fp)
   815d0:	10800317 	ldw	r2,12(r2)
   815d4:	e13ff317 	ldw	r4,-52(fp)
   815d8:	180b883a 	mov	r5,r3
   815dc:	100d883a 	mov	r6,r2
   815e0:	e1fffd17 	ldw	r7,-12(fp)
   815e4:	0081b100 	call	81b10 <vid_set_pixel>
   815e8:	00000b06 	br	81618 <vid_scroll_string+0x2ec>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
   815ec:	e0bffc17 	ldw	r2,-16(fp)
   815f0:	10c00117 	ldw	r3,4(r2)
   815f4:	e0bff517 	ldw	r2,-44(fp)
   815f8:	1887883a 	add	r3,r3,r2
   815fc:	e0bffc17 	ldw	r2,-16(fp)
   81600:	10800417 	ldw	r2,16(r2)
   81604:	e13ff317 	ldw	r4,-52(fp)
   81608:	180b883a 	mov	r5,r3
   8160c:	100d883a 	mov	r6,r2
   81610:	e1fffd17 	ldw	r7,-12(fp)
   81614:	0081b100 	call	81b10 <vid_set_pixel>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
   81618:	e0bff517 	ldw	r2,-44(fp)
   8161c:	10800044 	addi	r2,r2,1
   81620:	e0bff515 	stw	r2,-44(fp)
   81624:	e0bff517 	ldw	r2,-44(fp)
   81628:	108002d0 	cmplti	r2,r2,11
   8162c:	103fd91e 	bne	r2,zero,81594 <__alt_data_end+0xfffc9324>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
   81630:	e0bff317 	ldw	r2,-52(fp)
   81634:	10800044 	addi	r2,r2,1
   81638:	e0bff315 	stw	r2,-52(fp)
   8163c:	e0fff317 	ldw	r3,-52(fp)
   81640:	e0bff217 	ldw	r2,-56(fp)
   81644:	18bf9d16 	blt	r3,r2,814bc <__alt_data_end+0xfffc924c>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
   81648:	e0bffc17 	ldw	r2,-16(fp)
   8164c:	10c00117 	ldw	r3,4(r2)
   81650:	e0bffc17 	ldw	r2,-16(fp)
   81654:	10800117 	ldw	r2,4(r2)
   81658:	10800284 	addi	r2,r2,10
   8165c:	e13ffc17 	ldw	r4,-16(fp)
   81660:	21000417 	ldw	r4,16(r4)
   81664:	01400044 	movi	r5,1
   81668:	d9400015 	stw	r5,0(sp)
   8166c:	d9000115 	stw	r4,4(sp)
   81670:	e13ffd17 	ldw	r4,-12(fp)
   81674:	d9000215 	stw	r4,8(sp)
   81678:	e13ff217 	ldw	r4,-56(fp)
   8167c:	180b883a 	mov	r5,r3
   81680:	e1bff217 	ldw	r6,-56(fp)
   81684:	100f883a 	mov	r7,r2
   81688:	00810cc0 	call	810cc <vid_draw_line>
    // Log what time we moved the scroll.
  }
  return(0);
   8168c:	0005883a 	mov	r2,zero
}
   81690:	e6fffe04 	addi	sp,fp,-8
   81694:	dfc00317 	ldw	ra,12(sp)
   81698:	df000217 	ldw	fp,8(sp)
   8169c:	dc400117 	ldw	r17,4(sp)
   816a0:	dc000017 	ldw	r16,0(sp)
   816a4:	dec00404 	addi	sp,sp,16
   816a8:	f800283a 	ret

000816ac <vid_move_block>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
   816ac:	defff504 	addi	sp,sp,-44
   816b0:	dfc00a15 	stw	ra,40(sp)
   816b4:	df000915 	stw	fp,36(sp)
   816b8:	df000904 	addi	fp,sp,36
   816bc:	e13ffc15 	stw	r4,-16(fp)
   816c0:	e17ffd15 	stw	r5,-12(fp)
   816c4:	e1bffe15 	stw	r6,-8(fp)
   816c8:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
   816cc:	e0800217 	ldw	r2,8(fp)
   816d0:	00803716 	blt	zero,r2,817b0 <vid_move_block+0x104>
   816d4:	e0800317 	ldw	r2,12(fp)
   816d8:	00803516 	blt	zero,r2,817b0 <vid_move_block+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
   816dc:	e0bffd17 	ldw	r2,-12(fp)
   816e0:	e0bff815 	stw	r2,-32(fp)
   816e4:	00002f06 	br	817a4 <vid_move_block+0xf8>
      write_y = read_y + y_distance;
   816e8:	e0fff817 	ldw	r3,-32(fp)
   816ec:	e0800317 	ldw	r2,12(fp)
   816f0:	1885883a 	add	r2,r3,r2
   816f4:	e0bff915 	stw	r2,-28(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
   816f8:	e0bffc17 	ldw	r2,-16(fp)
   816fc:	e0bff715 	stw	r2,-36(fp)
   81700:	00002206 	br	8178c <vid_move_block+0xe0>
        write_x = read_x + x_distance;
   81704:	e0fff717 	ldw	r3,-36(fp)
   81708:	e0800217 	ldw	r2,8(fp)
   8170c:	1885883a 	add	r2,r3,r2
   81710:	e0bffa15 	stw	r2,-24(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
   81714:	e13ff717 	ldw	r4,-36(fp)
   81718:	e17ff817 	ldw	r5,-32(fp)
   8171c:	e1800517 	ldw	r6,20(fp)
   81720:	0081bac0 	call	81bac <vid_get_pixel>
   81724:	e0bffb0d 	sth	r2,-20(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
   81728:	e0bffb0f 	ldh	r2,-20(fp)
   8172c:	e13ffa17 	ldw	r4,-24(fp)
   81730:	e17ff917 	ldw	r5,-28(fp)
   81734:	100d883a 	mov	r6,r2
   81738:	e1c00517 	ldw	r7,20(fp)
   8173c:	0081b100 	call	81b10 <vid_set_pixel>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
   81740:	e0fffe17 	ldw	r3,-8(fp)
   81744:	e0800217 	ldw	r2,8(fp)
   81748:	1885883a 	add	r2,r3,r2
   8174c:	e0fff717 	ldw	r3,-36(fp)
   81750:	1880050e 	bge	r3,r2,81768 <vid_move_block+0xbc>
   81754:	e0ffff17 	ldw	r3,-4(fp)
   81758:	e0800317 	ldw	r2,12(fp)
   8175c:	1885883a 	add	r2,r3,r2
   81760:	e0fff817 	ldw	r3,-32(fp)
   81764:	18800616 	blt	r3,r2,81780 <vid_move_block+0xd4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
   81768:	e0800417 	ldw	r2,16(fp)
   8176c:	e13ff717 	ldw	r4,-36(fp)
   81770:	e17ff817 	ldw	r5,-32(fp)
   81774:	100d883a 	mov	r6,r2
   81778:	e1c00517 	ldw	r7,20(fp)
   8177c:	0081b100 	call	81b10 <vid_set_pixel>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
   81780:	e0bff717 	ldw	r2,-36(fp)
   81784:	10800044 	addi	r2,r2,1
   81788:	e0bff715 	stw	r2,-36(fp)
   8178c:	e0fff717 	ldw	r3,-36(fp)
   81790:	e0bffe17 	ldw	r2,-8(fp)
   81794:	18bfdb16 	blt	r3,r2,81704 <__alt_data_end+0xfffc9494>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
   81798:	e0bff817 	ldw	r2,-32(fp)
   8179c:	10800044 	addi	r2,r2,1
   817a0:	e0bff815 	stw	r2,-32(fp)
   817a4:	e0fff817 	ldw	r3,-32(fp)
   817a8:	e0bfff17 	ldw	r2,-4(fp)
   817ac:	18bfce16 	blt	r3,r2,816e8 <__alt_data_end+0xfffc9478>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
   817b0:	0005883a 	mov	r2,zero
}
   817b4:	e037883a 	mov	sp,fp
   817b8:	dfc00117 	ldw	ra,4(sp)
   817bc:	df000017 	ldw	fp,0(sp)
   817c0:	dec00204 	addi	sp,sp,8
   817c4:	f800283a 	ret

000817c8 <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
   817c8:	defff604 	addi	sp,sp,-40
   817cc:	dfc00915 	stw	ra,36(sp)
   817d0:	df000815 	stw	fp,32(sp)
   817d4:	df000804 	addi	fp,sp,32
   817d8:	e13ffc15 	stw	r4,-16(fp)
   817dc:	e17ffd15 	stw	r5,-12(fp)
   817e0:	e1bffe15 	stw	r6,-8(fp)
   817e4:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
   817e8:	e03ffa15 	stw	zero,-24(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
   817ec:	e0bffc17 	ldw	r2,-16(fp)
   817f0:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
   817f4:	00002806 	br	81898 <vid_print_string+0xd0>
    //Handle newline char here.
    if (string[i] == '\n') {
   817f8:	e0bffa17 	ldw	r2,-24(fp)
   817fc:	e0c00317 	ldw	r3,12(fp)
   81800:	1885883a 	add	r2,r3,r2
   81804:	10800003 	ldbu	r2,0(r2)
   81808:	10803fcc 	andi	r2,r2,255
   8180c:	1080201c 	xori	r2,r2,128
   81810:	10bfe004 	addi	r2,r2,-128
   81814:	10800298 	cmpnei	r2,r2,10
   81818:	1000091e 	bne	r2,zero,81840 <vid_print_string+0x78>
      horiz_offset = original_horiz_offset;
   8181c:	e0bffb17 	ldw	r2,-20(fp)
   81820:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
   81824:	e0bffd17 	ldw	r2,-12(fp)
   81828:	10800304 	addi	r2,r2,12
   8182c:	e0bffd15 	stw	r2,-12(fp)
      i++;
   81830:	e0bffa17 	ldw	r2,-24(fp)
   81834:	10800044 	addi	r2,r2,1
   81838:	e0bffa15 	stw	r2,-24(fp)
      continue;
   8183c:	00001606 	br	81898 <vid_print_string+0xd0>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
   81840:	e0bffa17 	ldw	r2,-24(fp)
   81844:	e0c00317 	ldw	r3,12(fp)
   81848:	1885883a 	add	r2,r3,r2
   8184c:	10800003 	ldbu	r2,0(r2)
   81850:	10803fcc 	andi	r2,r2,255
   81854:	1080201c 	xori	r2,r2,128
   81858:	10bfe004 	addi	r2,r2,-128
   8185c:	e0ffff17 	ldw	r3,-4(fp)
   81860:	d8c00015 	stw	r3,0(sp)
   81864:	e0c00217 	ldw	r3,8(fp)
   81868:	d8c00115 	stw	r3,4(sp)
   8186c:	e13ffc17 	ldw	r4,-16(fp)
   81870:	e17ffd17 	ldw	r5,-12(fp)
   81874:	e1bffe17 	ldw	r6,-8(fp)
   81878:	100f883a 	mov	r7,r2
   8187c:	0081a200 	call	81a20 <vid_print_char>
    i++;
   81880:	e0bffa17 	ldw	r2,-24(fp)
   81884:	10800044 	addi	r2,r2,1
   81888:	e0bffa15 	stw	r2,-24(fp)
    horiz_offset += 8;
   8188c:	e0bffc17 	ldw	r2,-16(fp)
   81890:	10800204 	addi	r2,r2,8
   81894:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
   81898:	e0bffa17 	ldw	r2,-24(fp)
   8189c:	e0c00317 	ldw	r3,12(fp)
   818a0:	1885883a 	add	r2,r3,r2
   818a4:	10800003 	ldbu	r2,0(r2)
   818a8:	10803fcc 	andi	r2,r2,255
   818ac:	1080201c 	xori	r2,r2,128
   818b0:	10bfe004 	addi	r2,r2,-128
   818b4:	103fd01e 	bne	r2,zero,817f8 <__alt_data_end+0xfffc9588>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
   818b8:	0005883a 	mov	r2,zero
}
   818bc:	e037883a 	mov	sp,fp
   818c0:	dfc00117 	ldw	ra,4(sp)
   818c4:	df000017 	ldw	fp,0(sp)
   818c8:	dec00204 	addi	sp,sp,8
   818cc:	f800283a 	ret

000818d0 <vid_draw_box>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
   818d0:	defff704 	addi	sp,sp,-36
   818d4:	dfc00815 	stw	ra,32(sp)
   818d8:	df000715 	stw	fp,28(sp)
   818dc:	df000704 	addi	fp,sp,28
   818e0:	e13ffc15 	stw	r4,-16(fp)
   818e4:	e17ffd15 	stw	r5,-12(fp)
   818e8:	e1bffe15 	stw	r6,-8(fp)
   818ec:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
   818f0:	e0800317 	ldw	r2,12(fp)
   818f4:	10000a26 	beq	r2,zero,81920 <vid_draw_box+0x50>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
   818f8:	e0800217 	ldw	r2,8(fp)
   818fc:	d8800015 	stw	r2,0(sp)
   81900:	e0800417 	ldw	r2,16(fp)
   81904:	d8800115 	stw	r2,4(sp)
   81908:	e13ffc17 	ldw	r4,-16(fp)
   8190c:	e17ffd17 	ldw	r5,-12(fp)
   81910:	e1bffe17 	ldw	r6,-8(fp)
   81914:	e1ffff17 	ldw	r7,-4(fp)
   81918:	0081be80 	call	81be8 <vid_paint_block>
   8191c:	00003a06 	br	81a08 <vid_draw_box+0x138>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
   81920:	e0bfff17 	ldw	r2,-4(fp)
   81924:	10bfffc4 	addi	r2,r2,-1
   81928:	00c00044 	movi	r3,1
   8192c:	d8c00015 	stw	r3,0(sp)
   81930:	e0c00217 	ldw	r3,8(fp)
   81934:	d8c00115 	stw	r3,4(sp)
   81938:	e0c00417 	ldw	r3,16(fp)
   8193c:	d8c00215 	stw	r3,8(sp)
   81940:	e13ffc17 	ldw	r4,-16(fp)
   81944:	e17ffd17 	ldw	r5,-12(fp)
   81948:	e1bffc17 	ldw	r6,-16(fp)
   8194c:	100f883a 	mov	r7,r2
   81950:	00810cc0 	call	810cc <vid_draw_line>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
   81954:	e0bffe17 	ldw	r2,-8(fp)
   81958:	113fffc4 	addi	r4,r2,-1
   8195c:	e0bffe17 	ldw	r2,-8(fp)
   81960:	10ffffc4 	addi	r3,r2,-1
   81964:	e0bfff17 	ldw	r2,-4(fp)
   81968:	10bfffc4 	addi	r2,r2,-1
   8196c:	01400044 	movi	r5,1
   81970:	d9400015 	stw	r5,0(sp)
   81974:	e1400217 	ldw	r5,8(fp)
   81978:	d9400115 	stw	r5,4(sp)
   8197c:	e1400417 	ldw	r5,16(fp)
   81980:	d9400215 	stw	r5,8(sp)
   81984:	e17ffd17 	ldw	r5,-12(fp)
   81988:	180d883a 	mov	r6,r3
   8198c:	100f883a 	mov	r7,r2
   81990:	00810cc0 	call	810cc <vid_draw_line>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
   81994:	e0bffe17 	ldw	r2,-8(fp)
   81998:	10bfffc4 	addi	r2,r2,-1
   8199c:	00c00044 	movi	r3,1
   819a0:	d8c00015 	stw	r3,0(sp)
   819a4:	e0c00217 	ldw	r3,8(fp)
   819a8:	d8c00115 	stw	r3,4(sp)
   819ac:	e0c00417 	ldw	r3,16(fp)
   819b0:	d8c00215 	stw	r3,8(sp)
   819b4:	e13ffc17 	ldw	r4,-16(fp)
   819b8:	e17ffd17 	ldw	r5,-12(fp)
   819bc:	100d883a 	mov	r6,r2
   819c0:	e1fffd17 	ldw	r7,-12(fp)
   819c4:	00810cc0 	call	810cc <vid_draw_line>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
   819c8:	e0bfff17 	ldw	r2,-4(fp)
   819cc:	117fffc4 	addi	r5,r2,-1
   819d0:	e0bffe17 	ldw	r2,-8(fp)
   819d4:	10ffffc4 	addi	r3,r2,-1
   819d8:	e0bfff17 	ldw	r2,-4(fp)
   819dc:	10bfffc4 	addi	r2,r2,-1
   819e0:	01000044 	movi	r4,1
   819e4:	d9000015 	stw	r4,0(sp)
   819e8:	e1000217 	ldw	r4,8(fp)
   819ec:	d9000115 	stw	r4,4(sp)
   819f0:	e1000417 	ldw	r4,16(fp)
   819f4:	d9000215 	stw	r4,8(sp)
   819f8:	e13ffc17 	ldw	r4,-16(fp)
   819fc:	180d883a 	mov	r6,r3
   81a00:	100f883a 	mov	r7,r2
   81a04:	00810cc0 	call	810cc <vid_draw_line>
  }

  return (0);
   81a08:	0005883a 	mov	r2,zero
}
   81a0c:	e037883a 	mov	sp,fp
   81a10:	dfc00117 	ldw	ra,4(sp)
   81a14:	df000017 	ldw	fp,0(sp)
   81a18:	dec00204 	addi	sp,sp,8
   81a1c:	f800283a 	ret

00081a20 <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
   81a20:	defff704 	addi	sp,sp,-36
   81a24:	dfc00815 	stw	ra,32(sp)
   81a28:	df000715 	stw	fp,28(sp)
   81a2c:	df000704 	addi	fp,sp,28
   81a30:	e13ffc15 	stw	r4,-16(fp)
   81a34:	e17ffd15 	stw	r5,-12(fp)
   81a38:	e1bffe15 	stw	r6,-8(fp)
   81a3c:	3805883a 	mov	r2,r7
   81a40:	e0bfff05 	stb	r2,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
   81a44:	e0bfff03 	ldbu	r2,-4(fp)
   81a48:	10bff804 	addi	r2,r2,-32
   81a4c:	e0bffb05 	stb	r2,-20(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
   81a50:	e03ff915 	stw	zero,-28(fp)
   81a54:	00002506 	br	81aec <vid_print_char+0xcc>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
   81a58:	e0bffb07 	ldb	r2,-20(fp)
   81a5c:	108002e4 	muli	r2,r2,11
   81a60:	1007883a 	mov	r3,r2
   81a64:	e0bff917 	ldw	r2,-28(fp)
   81a68:	1885883a 	add	r2,r3,r2
   81a6c:	e0c00217 	ldw	r3,8(fp)
   81a70:	1885883a 	add	r2,r3,r2
   81a74:	10800003 	ldbu	r2,0(r2)
   81a78:	e0bffb45 	stb	r2,-19(fp)
    for (j = 0; j < 8; j++) {
   81a7c:	e03ffa15 	stw	zero,-24(fp)
   81a80:	00001406 	br	81ad4 <vid_print_char+0xb4>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
   81a84:	e0fffb47 	ldb	r3,-19(fp)
   81a88:	01002004 	movi	r4,128
   81a8c:	e0bffa17 	ldw	r2,-24(fp)
   81a90:	2085d83a 	sra	r2,r4,r2
   81a94:	1884703a 	and	r2,r3,r2
   81a98:	10000b26 	beq	r2,zero,81ac8 <vid_print_char+0xa8>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
   81a9c:	e0fffc17 	ldw	r3,-16(fp)
   81aa0:	e0bffa17 	ldw	r2,-24(fp)
   81aa4:	1889883a 	add	r4,r3,r2
   81aa8:	e0fffd17 	ldw	r3,-12(fp)
   81aac:	e0bff917 	ldw	r2,-28(fp)
   81ab0:	1887883a 	add	r3,r3,r2
   81ab4:	e0bffe17 	ldw	r2,-8(fp)
   81ab8:	180b883a 	mov	r5,r3
   81abc:	100d883a 	mov	r6,r2
   81ac0:	e1c00317 	ldw	r7,12(fp)
   81ac4:	0081b100 	call	81b10 <vid_set_pixel>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
   81ac8:	e0bffa17 	ldw	r2,-24(fp)
   81acc:	10800044 	addi	r2,r2,1
   81ad0:	e0bffa15 	stw	r2,-24(fp)
   81ad4:	e0bffa17 	ldw	r2,-24(fp)
   81ad8:	10800210 	cmplti	r2,r2,8
   81adc:	103fe91e 	bne	r2,zero,81a84 <__alt_data_end+0xfffc9814>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
   81ae0:	e0bff917 	ldw	r2,-28(fp)
   81ae4:	10800044 	addi	r2,r2,1
   81ae8:	e0bff915 	stw	r2,-28(fp)
   81aec:	e0bff917 	ldw	r2,-28(fp)
   81af0:	108002d0 	cmplti	r2,r2,11
   81af4:	103fd81e 	bne	r2,zero,81a58 <__alt_data_end+0xfffc97e8>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
   81af8:	0005883a 	mov	r2,zero
}
   81afc:	e037883a 	mov	sp,fp
   81b00:	dfc00117 	ldw	ra,4(sp)
   81b04:	df000017 	ldw	fp,0(sp)
   81b08:	dec00204 	addi	sp,sp,8
   81b0c:	f800283a 	ret

00081b10 <vid_set_pixel>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
   81b10:	defff904 	addi	sp,sp,-28
   81b14:	dfc00615 	stw	ra,24(sp)
   81b18:	df000515 	stw	fp,20(sp)
   81b1c:	df000504 	addi	fp,sp,20
   81b20:	e13ffc15 	stw	r4,-16(fp)
   81b24:	e17ffd15 	stw	r5,-12(fp)
   81b28:	e1bffe15 	stw	r6,-8(fp)
   81b2c:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	alt_u16 color16;


	// encode to RGB  5 6 5
	color16 = (color & 0xFF) >> 3; // blue
   81b30:	e0bffe17 	ldw	r2,-8(fp)
   81b34:	10803fcc 	andi	r2,r2,255
   81b38:	1004d0fa 	srli	r2,r2,3
   81b3c:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xFC00) >> 5; // green
   81b40:	e0bffe17 	ldw	r2,-8(fp)
   81b44:	10bf000c 	andi	r2,r2,64512
   81b48:	1004d17a 	srli	r2,r2,5
   81b4c:	1007883a 	mov	r3,r2
   81b50:	e0bffb0b 	ldhu	r2,-20(fp)
   81b54:	1884b03a 	or	r2,r3,r2
   81b58:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xF80000) >> 8; // blue
   81b5c:	e0bffe17 	ldw	r2,-8(fp)
   81b60:	10803e2c 	andhi	r2,r2,248
   81b64:	1004d23a 	srli	r2,r2,8
   81b68:	1007883a 	mov	r3,r2
   81b6c:	e0bffb0b 	ldhu	r2,-20(fp)
   81b70:	1884b03a 	or	r2,r3,r2
   81b74:	e0bffb0d 	sth	r2,-20(fp)
	LCD_DrawPoint(horiz, vert, color16);
   81b78:	e0bffc17 	ldw	r2,-16(fp)
   81b7c:	113fffcc 	andi	r4,r2,65535
   81b80:	e0bffd17 	ldw	r2,-12(fp)
   81b84:	10ffffcc 	andi	r3,r2,65535
   81b88:	e0bffb0b 	ldhu	r2,-20(fp)
   81b8c:	180b883a 	mov	r5,r3
   81b90:	100d883a 	mov	r6,r2
   81b94:	008077c0 	call	8077c <LCD_DrawPoint>
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}
#endif

}
   81b98:	e037883a 	mov	sp,fp
   81b9c:	dfc00117 	ldw	ra,4(sp)
   81ba0:	df000017 	ldw	fp,0(sp)
   81ba4:	dec00204 	addi	sp,sp,8
   81ba8:	f800283a 	ret

00081bac <vid_get_pixel>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
   81bac:	defffb04 	addi	sp,sp,-20
   81bb0:	dfc00415 	stw	ra,16(sp)
   81bb4:	df000315 	stw	fp,12(sp)
   81bb8:	df000304 	addi	fp,sp,12
   81bbc:	e13ffd15 	stw	r4,-12(fp)
   81bc0:	e17ffe15 	stw	r5,-8(fp)
   81bc4:	e1bfff15 	stw	r6,-4(fp)
#ifdef LT24
	printf("vid_get_pixel is not implemented\r\n");
   81bc8:	010002b4 	movhi	r4,10
   81bcc:	211eea04 	addi	r4,r4,31656
   81bd0:	008a4380 	call	8a438 <puts>
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  return(IORD_16DIRECT(addr, 0));
#endif
}
   81bd4:	e037883a 	mov	sp,fp
   81bd8:	dfc00117 	ldw	ra,4(sp)
   81bdc:	df000017 	ldw	fp,0(sp)
   81be0:	dec00204 	addi	sp,sp,8
   81be4:	f800283a 	ret

00081be8 <vid_paint_block>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
   81be8:	defff804 	addi	sp,sp,-32
   81bec:	dfc00715 	stw	ra,28(sp)
   81bf0:	df000615 	stw	fp,24(sp)
   81bf4:	df000604 	addi	fp,sp,24
   81bf8:	e13ffc15 	stw	r4,-16(fp)
   81bfc:	e17ffd15 	stw	r5,-12(fp)
   81c00:	e1bffe15 	stw	r6,-8(fp)
   81c04:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
   81c08:	e0bffd17 	ldw	r2,-12(fp)
   81c0c:	e0bffb15 	stw	r2,-20(fp)
   81c10:	00001206 	br	81c5c <vid_paint_block+0x74>
		for(x=Hstart;x<Hend;x++){
   81c14:	e0bffc17 	ldw	r2,-16(fp)
   81c18:	e0bffa15 	stw	r2,-24(fp)
   81c1c:	00000906 	br	81c44 <vid_paint_block+0x5c>
			vid_set_pixel(x, y, color, display);
   81c20:	e0800217 	ldw	r2,8(fp)
   81c24:	e13ffa17 	ldw	r4,-24(fp)
   81c28:	e17ffb17 	ldw	r5,-20(fp)
   81c2c:	100d883a 	mov	r6,r2
   81c30:	e1c00317 	ldw	r7,12(fp)
   81c34:	0081b100 	call	81b10 <vid_set_pixel>
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
		for(x=Hstart;x<Hend;x++){
   81c38:	e0bffa17 	ldw	r2,-24(fp)
   81c3c:	10800044 	addi	r2,r2,1
   81c40:	e0bffa15 	stw	r2,-24(fp)
   81c44:	e0fffa17 	ldw	r3,-24(fp)
   81c48:	e0bffe17 	ldw	r2,-8(fp)
   81c4c:	18bff416 	blt	r3,r2,81c20 <__alt_data_end+0xfffc99b0>
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
   81c50:	e0bffb17 	ldw	r2,-20(fp)
   81c54:	10800044 	addi	r2,r2,1
   81c58:	e0bffb15 	stw	r2,-20(fp)
   81c5c:	e0fffb17 	ldw	r3,-20(fp)
   81c60:	e0bfff17 	ldw	r2,-4(fp)
   81c64:	18bfeb16 	blt	r3,r2,81c14 <__alt_data_end+0xfffc99a4>
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
#endif
}
   81c68:	e037883a 	mov	sp,fp
   81c6c:	dfc00117 	ldw	ra,4(sp)
   81c70:	df000017 	ldw	fp,0(sp)
   81c74:	dec00204 	addi	sp,sp,8
   81c78:	f800283a 	ret

00081c7c <vid_draw_horiz_line>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
   81c7c:	defff904 	addi	sp,sp,-28
   81c80:	dfc00615 	stw	ra,24(sp)
   81c84:	df000515 	stw	fp,20(sp)
   81c88:	df000504 	addi	fp,sp,20
   81c8c:	2007883a 	mov	r3,r4
   81c90:	2805883a 	mov	r2,r5
   81c94:	e1bffe15 	stw	r6,-8(fp)
   81c98:	e1ffff15 	stw	r7,-4(fp)
   81c9c:	e0fffc0d 	sth	r3,-16(fp)
   81ca0:	e0bffd0d 	sth	r2,-12(fp)
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
   81ca4:	e0bffc0f 	ldh	r2,-16(fp)
   81ca8:	e0bffb15 	stw	r2,-20(fp)
   81cac:	00000906 	br	81cd4 <vid_draw_horiz_line+0x58>
		vid_set_pixel(x, V, color, display);
   81cb0:	e0bfff17 	ldw	r2,-4(fp)
   81cb4:	e13ffb17 	ldw	r4,-20(fp)
   81cb8:	e17ffe17 	ldw	r5,-8(fp)
   81cbc:	100d883a 	mov	r6,r2
   81cc0:	e1c00217 	ldw	r7,8(fp)
   81cc4:	0081b100 	call	81b10 <vid_set_pixel>
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
   81cc8:	e0bffb17 	ldw	r2,-20(fp)
   81ccc:	10800044 	addi	r2,r2,1
   81cd0:	e0bffb15 	stw	r2,-20(fp)
   81cd4:	e0bffd0f 	ldh	r2,-12(fp)
   81cd8:	e0fffb17 	ldw	r3,-20(fp)
   81cdc:	18bff416 	blt	r3,r2,81cb0 <__alt_data_end+0xfffc9a40>
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
  }
  free(fast_buffer);
#endif

}
   81ce0:	e037883a 	mov	sp,fp
   81ce4:	dfc00117 	ldw	ra,4(sp)
   81ce8:	df000017 	ldw	fp,0(sp)
   81cec:	dec00204 	addi	sp,sp,8
   81cf0:	f800283a 	ret

00081cf4 <vid_merge_colors>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
   81cf4:	defffc04 	addi	sp,sp,-16
   81cf8:	df000315 	stw	fp,12(sp)
   81cfc:	df000304 	addi	fp,sp,12
   81d00:	e13ffd15 	stw	r4,-12(fp)
   81d04:	e17ffe15 	stw	r5,-8(fp)
   81d08:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
   81d0c:	e0bffe17 	ldw	r2,-8(fp)
   81d10:	1085883a 	add	r2,r2,r2
   81d14:	10800054 	ori	r2,r2,1
   81d18:	1006917a 	slli	r3,r2,5
   81d1c:	e0bfff17 	ldw	r2,-4(fp)
   81d20:	1886b03a 	or	r3,r3,r2
   81d24:	e0bffd17 	ldw	r2,-12(fp)
   81d28:	100492fa 	slli	r2,r2,11
   81d2c:	1884b03a 	or	r2,r3,r2
}
   81d30:	e037883a 	mov	sp,fp
   81d34:	df000017 	ldw	fp,0(sp)
   81d38:	dec00104 	addi	sp,sp,4
   81d3c:	f800283a 	ret

00081d40 <vid_color_convert24_16>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
   81d40:	defffc04 	addi	sp,sp,-16
   81d44:	df000315 	stw	fp,12(sp)
   81d48:	df000304 	addi	fp,sp,12
   81d4c:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
   81d50:	e0bfff17 	ldw	r2,-4(fp)
   81d54:	10800003 	ldbu	r2,0(r2)
   81d58:	1007883a 	mov	r3,r2
   81d5c:	00bffe04 	movi	r2,-8
   81d60:	1884703a 	and	r2,r3,r2
   81d64:	e0bffd05 	stb	r2,-12(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
   81d68:	e0bfff17 	ldw	r2,-4(fp)
   81d6c:	10800044 	addi	r2,r2,1
   81d70:	10800003 	ldbu	r2,0(r2)
   81d74:	1007883a 	mov	r3,r2
   81d78:	00bfff04 	movi	r2,-4
   81d7c:	1884703a 	and	r2,r3,r2
   81d80:	e0bffd45 	stb	r2,-11(fp)
	blue = *(color24 + 2) & 0xF8;
   81d84:	e0bfff17 	ldw	r2,-4(fp)
   81d88:	10800084 	addi	r2,r2,2
   81d8c:	10800003 	ldbu	r2,0(r2)
   81d90:	1007883a 	mov	r3,r2
   81d94:	00bffe04 	movi	r2,-8
   81d98:	1884703a 	and	r2,r3,r2
   81d9c:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
   81da0:	e0bffd83 	ldbu	r2,-10(fp)
   81da4:	1004d0fa 	srli	r2,r2,3
   81da8:	10c03fcc 	andi	r3,r2,255
   81dac:	e0bffd43 	ldbu	r2,-11(fp)
   81db0:	100490fa 	slli	r2,r2,3
   81db4:	1884b03a 	or	r2,r3,r2
   81db8:	1007883a 	mov	r3,r2
   81dbc:	e0bffd03 	ldbu	r2,-12(fp)
   81dc0:	1004923a 	slli	r2,r2,8
   81dc4:	1884b03a 	or	r2,r3,r2
   81dc8:	e0bffe0d 	sth	r2,-8(fp)
	return output;
   81dcc:	e0bffe0b 	ldhu	r2,-8(fp)
}
   81dd0:	e037883a 	mov	sp,fp
   81dd4:	df000017 	ldw	fp,0(sp)
   81dd8:	dec00104 	addi	sp,sp,4
   81ddc:	f800283a 	ret

00081de0 <vid_color_convert16_24>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
   81de0:	defffd04 	addi	sp,sp,-12
   81de4:	df000215 	stw	fp,8(sp)
   81de8:	df000204 	addi	fp,sp,8
   81dec:	2005883a 	mov	r2,r4
   81df0:	e17fff15 	stw	r5,-4(fp)
   81df4:	e0bffe0d 	sth	r2,-8(fp)
	*(color24 + 0) = color16 >> 11;
   81df8:	e0bffe0b 	ldhu	r2,-8(fp)
   81dfc:	1004d2fa 	srli	r2,r2,11
   81e00:	1007883a 	mov	r3,r2
   81e04:	e0bfff17 	ldw	r2,-4(fp)
   81e08:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
   81e0c:	e0bfff17 	ldw	r2,-4(fp)
   81e10:	10800044 	addi	r2,r2,1
   81e14:	e0fffe0b 	ldhu	r3,-8(fp)
   81e18:	18c00f8c 	andi	r3,r3,62
   81e1c:	1807d17a 	srai	r3,r3,5
   81e20:	10c00005 	stb	r3,0(r2)
	*(color24 + 2) = (color16 & 0x1F);
   81e24:	e0bfff17 	ldw	r2,-4(fp)
   81e28:	10800084 	addi	r2,r2,2
   81e2c:	e0fffe0b 	ldhu	r3,-8(fp)
   81e30:	18c007cc 	andi	r3,r3,31
   81e34:	10c00005 	stb	r3,0(r2)
	
	return (0);
   81e38:	0005883a 	mov	r2,zero
}
   81e3c:	e037883a 	mov	sp,fp
   81e40:	df000017 	ldw	fp,0(sp)
   81e44:	dec00104 	addi	sp,sp,4
   81e48:	f800283a 	ret

00081e4c <vid_copy_line_to_frame_buffer>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
   81e4c:	defffa04 	addi	sp,sp,-24
   81e50:	dfc00515 	stw	ra,20(sp)
   81e54:	df000415 	stw	fp,16(sp)
   81e58:	df000404 	addi	fp,sp,16
   81e5c:	e13ffc15 	stw	r4,-16(fp)
   81e60:	e17ffd15 	stw	r5,-12(fp)
   81e64:	e1bffe15 	stw	r6,-8(fp)
   81e68:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("vid_copy_line_to_frame_buffer is not implemented!\r\n");
   81e6c:	010002b4 	movhi	r4,10
   81e70:	211ef304 	addi	r4,r4,31692
   81e74:	008a4380 	call	8a438 <puts>
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
    }
  }
  return(0);
#endif
}
   81e78:	e037883a 	mov	sp,fp
   81e7c:	dfc00117 	ldw	ra,4(sp)
   81e80:	df000017 	ldw	fp,0(sp)
   81e84:	dec00204 	addi	sp,sp,8
   81e88:	f800283a 	ret

00081e8c <vid_draw_sloped_line>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
   81e8c:	deffef04 	addi	sp,sp,-68
   81e90:	dfc01015 	stw	ra,64(sp)
   81e94:	df000f15 	stw	fp,60(sp)
   81e98:	df000f04 	addi	fp,sp,60
   81e9c:	2011883a 	mov	r8,r4
   81ea0:	3009883a 	mov	r4,r6
   81ea4:	3807883a 	mov	r3,r7
   81ea8:	e0800217 	ldw	r2,8(fp)
   81eac:	e23ffb0d 	sth	r8,-20(fp)
   81eb0:	e17ffc0d 	sth	r5,-16(fp)
   81eb4:	e13ffd0d 	sth	r4,-12(fp)
   81eb8:	e0fffe0d 	sth	r3,-8(fp)
   81ebc:	e0bfff0d 	sth	r2,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
   81ec0:	e0fffd0b 	ldhu	r3,-12(fp)
   81ec4:	e0bffb0b 	ldhu	r2,-20(fp)
   81ec8:	1885c83a 	sub	r2,r3,r2
   81ecc:	1000010e 	bge	r2,zero,81ed4 <vid_draw_sloped_line+0x48>
   81ed0:	0085c83a 	sub	r2,zero,r2
   81ed4:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
   81ed8:	e0fffe0b 	ldhu	r3,-8(fp)
   81edc:	e0bffc0b 	ldhu	r2,-16(fp)
   81ee0:	1885c83a 	sub	r2,r3,r2
   81ee4:	1000010e 	bge	r2,zero,81eec <vid_draw_sloped_line+0x60>
   81ee8:	0085c83a 	sub	r2,zero,r2
   81eec:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
   81ef0:	e0bffb0b 	ldhu	r2,-20(fp)
   81ef4:	e0fffd0b 	ldhu	r3,-12(fp)
   81ef8:	1880032e 	bgeu	r3,r2,81f08 <vid_draw_sloped_line+0x7c>
   81efc:	00bfffc4 	movi	r2,-1
   81f00:	e0bff315 	stw	r2,-52(fp)
   81f04:	00000206 	br	81f10 <vid_draw_sloped_line+0x84>
   81f08:	00800044 	movi	r2,1
   81f0c:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
   81f10:	e0bffc0b 	ldhu	r2,-16(fp)
   81f14:	e0fffe0b 	ldhu	r3,-8(fp)
   81f18:	1880032e 	bgeu	r3,r2,81f28 <vid_draw_sloped_line+0x9c>
   81f1c:	00bfffc4 	movi	r2,-1
   81f20:	e0bff415 	stw	r2,-48(fp)
   81f24:	00000206 	br	81f30 <vid_draw_sloped_line+0xa4>
   81f28:	00800044 	movi	r2,1
   81f2c:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
   81f30:	e0fff117 	ldw	r3,-60(fp)
   81f34:	e0bff217 	ldw	r2,-56(fp)
   81f38:	18803416 	blt	r3,r2,8200c <vid_draw_sloped_line+0x180>
    int dPr   = vert_delta<<1;
   81f3c:	e0bff217 	ldw	r2,-56(fp)
   81f40:	1085883a 	add	r2,r2,r2
   81f44:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
   81f48:	e0bff117 	ldw	r2,-60(fp)
   81f4c:	1085883a 	add	r2,r2,r2
   81f50:	e0fff717 	ldw	r3,-36(fp)
   81f54:	1885c83a 	sub	r2,r3,r2
   81f58:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
   81f5c:	e0fff717 	ldw	r3,-36(fp)
   81f60:	e0bff117 	ldw	r2,-60(fp)
   81f64:	1885c83a 	sub	r2,r3,r2
   81f68:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
   81f6c:	00002406 	br	82000 <vid_draw_sloped_line+0x174>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
   81f70:	e13ffb0b 	ldhu	r4,-20(fp)
   81f74:	e0fffc0b 	ldhu	r3,-16(fp)
   81f78:	e0800317 	ldw	r2,12(fp)
   81f7c:	180b883a 	mov	r5,r3
   81f80:	100d883a 	mov	r6,r2
   81f84:	e1c00417 	ldw	r7,16(fp)
   81f88:	0081b100 	call	81b10 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
   81f8c:	e0bff517 	ldw	r2,-44(fp)
   81f90:	00800f0e 	bge	zero,r2,81fd0 <vid_draw_sloped_line+0x144>
        horiz_start+=horiz_incr;
   81f94:	e0bff317 	ldw	r2,-52(fp)
   81f98:	1007883a 	mov	r3,r2
   81f9c:	e0bffb0b 	ldhu	r2,-20(fp)
   81fa0:	1885883a 	add	r2,r3,r2
   81fa4:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
   81fa8:	e0bff417 	ldw	r2,-48(fp)
   81fac:	1007883a 	mov	r3,r2
   81fb0:	e0bffc0b 	ldhu	r2,-16(fp)
   81fb4:	1885883a 	add	r2,r3,r2
   81fb8:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
   81fbc:	e0fff517 	ldw	r3,-44(fp)
   81fc0:	e0bff817 	ldw	r2,-32(fp)
   81fc4:	1885883a 	add	r2,r3,r2
   81fc8:	e0bff515 	stw	r2,-44(fp)
   81fcc:	00000906 	br	81ff4 <vid_draw_sloped_line+0x168>
      } else {
        horiz_start+=horiz_incr;
   81fd0:	e0bff317 	ldw	r2,-52(fp)
   81fd4:	1007883a 	mov	r3,r2
   81fd8:	e0bffb0b 	ldhu	r2,-20(fp)
   81fdc:	1885883a 	add	r2,r3,r2
   81fe0:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
   81fe4:	e0fff517 	ldw	r3,-44(fp)
   81fe8:	e0bff717 	ldw	r2,-36(fp)
   81fec:	1885883a 	add	r2,r3,r2
   81ff0:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
   81ff4:	e0bff117 	ldw	r2,-60(fp)
   81ff8:	10bfffc4 	addi	r2,r2,-1
   81ffc:	e0bff115 	stw	r2,-60(fp)
   82000:	e0bff117 	ldw	r2,-60(fp)
   82004:	103fda0e 	bge	r2,zero,81f70 <__alt_data_end+0xfffc9d00>
   82008:	00003306 	br	820d8 <vid_draw_sloped_line+0x24c>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
   8200c:	e0bff117 	ldw	r2,-60(fp)
   82010:	1085883a 	add	r2,r2,r2
   82014:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
   82018:	e0bff217 	ldw	r2,-56(fp)
   8201c:	1085883a 	add	r2,r2,r2
   82020:	e0fff917 	ldw	r3,-28(fp)
   82024:	1885c83a 	sub	r2,r3,r2
   82028:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
   8202c:	e0fff917 	ldw	r3,-28(fp)
   82030:	e0bff217 	ldw	r2,-56(fp)
   82034:	1885c83a 	sub	r2,r3,r2
   82038:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
   8203c:	00002406 	br	820d0 <vid_draw_sloped_line+0x244>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
   82040:	e13ffb0b 	ldhu	r4,-20(fp)
   82044:	e0fffc0b 	ldhu	r3,-16(fp)
   82048:	e0800317 	ldw	r2,12(fp)
   8204c:	180b883a 	mov	r5,r3
   82050:	100d883a 	mov	r6,r2
   82054:	e1c00417 	ldw	r7,16(fp)
   82058:	0081b100 	call	81b10 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
   8205c:	e0bff617 	ldw	r2,-40(fp)
   82060:	00800f0e 	bge	zero,r2,820a0 <vid_draw_sloped_line+0x214>
        horiz_start+=horiz_incr;
   82064:	e0bff317 	ldw	r2,-52(fp)
   82068:	1007883a 	mov	r3,r2
   8206c:	e0bffb0b 	ldhu	r2,-20(fp)
   82070:	1885883a 	add	r2,r3,r2
   82074:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
   82078:	e0bff417 	ldw	r2,-48(fp)
   8207c:	1007883a 	mov	r3,r2
   82080:	e0bffc0b 	ldhu	r2,-16(fp)
   82084:	1885883a 	add	r2,r3,r2
   82088:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
   8208c:	e0fff617 	ldw	r3,-40(fp)
   82090:	e0bffa17 	ldw	r2,-24(fp)
   82094:	1885883a 	add	r2,r3,r2
   82098:	e0bff615 	stw	r2,-40(fp)
   8209c:	00000906 	br	820c4 <vid_draw_sloped_line+0x238>
      } else {
        vert_start+=vert_incr;
   820a0:	e0bff417 	ldw	r2,-48(fp)
   820a4:	1007883a 	mov	r3,r2
   820a8:	e0bffc0b 	ldhu	r2,-16(fp)
   820ac:	1885883a 	add	r2,r3,r2
   820b0:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
   820b4:	e0fff617 	ldw	r3,-40(fp)
   820b8:	e0bff917 	ldw	r2,-28(fp)
   820bc:	1885883a 	add	r2,r3,r2
   820c0:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
   820c4:	e0bff217 	ldw	r2,-56(fp)
   820c8:	10bfffc4 	addi	r2,r2,-1
   820cc:	e0bff215 	stw	r2,-56(fp)
   820d0:	e0bff217 	ldw	r2,-56(fp)
   820d4:	103fda0e 	bge	r2,zero,82040 <__alt_data_end+0xfffc9dd0>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
   820d8:	e037883a 	mov	sp,fp
   820dc:	dfc00117 	ldw	ra,4(sp)
   820e0:	df000017 	ldw	fp,0(sp)
   820e4:	dec00204 	addi	sp,sp,8
   820e8:	f800283a 	ret

000820ec <vid_draw_circle>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
   820ec:	defff104 	addi	sp,sp,-60
   820f0:	dfc00e15 	stw	ra,56(sp)
   820f4:	df000d15 	stw	fp,52(sp)
   820f8:	df000d04 	addi	fp,sp,52
   820fc:	e13ffb15 	stw	r4,-20(fp)
   82100:	e17ffc15 	stw	r5,-16(fp)
   82104:	e1bffd15 	stw	r6,-12(fp)
   82108:	e1fffe15 	stw	r7,-8(fp)
   8210c:	e0800217 	ldw	r2,8(fp)
   82110:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
   82114:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
   82118:	e0bffd17 	ldw	r2,-12(fp)
   8211c:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
   82120:	e0bffd17 	ldw	r2,-12(fp)
   82124:	10bfff24 	muli	r2,r2,-4
   82128:	10800144 	addi	r2,r2,5
   8212c:	1000010e 	bge	r2,zero,82134 <vid_draw_circle+0x48>
   82130:	108000c4 	addi	r2,r2,3
   82134:	1005d0ba 	srai	r2,r2,2
   82138:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
   8213c:	e0bfff07 	ldb	r2,-4(fp)
   82140:	d8000015 	stw	zero,0(sp)
   82144:	d8000115 	stw	zero,4(sp)
   82148:	e0fffe17 	ldw	r3,-8(fp)
   8214c:	d8c00215 	stw	r3,8(sp)
   82150:	d8800315 	stw	r2,12(sp)
   82154:	e0800317 	ldw	r2,12(fp)
   82158:	d8800415 	stw	r2,16(sp)
   8215c:	e13ffb17 	ldw	r4,-20(fp)
   82160:	e17ffc17 	ldw	r5,-16(fp)
   82164:	e1bff817 	ldw	r6,-32(fp)
   82168:	e1fff917 	ldw	r7,-28(fp)
   8216c:	00825e00 	call	825e0 <vid_round_corner_points>

  // Now start moving out from those points until the lines meet
  while (x < y) {
   82170:	00002406 	br	82204 <vid_draw_circle+0x118>
    x++;
   82174:	e0bff817 	ldw	r2,-32(fp)
   82178:	10800044 	addi	r2,r2,1
   8217c:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
   82180:	e0bffa17 	ldw	r2,-24(fp)
   82184:	1000070e 	bge	r2,zero,821a4 <vid_draw_circle+0xb8>
      p += 2*x+1;
   82188:	e0bff817 	ldw	r2,-32(fp)
   8218c:	1085883a 	add	r2,r2,r2
   82190:	10800044 	addi	r2,r2,1
   82194:	e0fffa17 	ldw	r3,-24(fp)
   82198:	1885883a 	add	r2,r3,r2
   8219c:	e0bffa15 	stw	r2,-24(fp)
   821a0:	00000b06 	br	821d0 <vid_draw_circle+0xe4>
    } else {
      y--;
   821a4:	e0bff917 	ldw	r2,-28(fp)
   821a8:	10bfffc4 	addi	r2,r2,-1
   821ac:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
   821b0:	e0fff817 	ldw	r3,-32(fp)
   821b4:	e0bff917 	ldw	r2,-28(fp)
   821b8:	1885c83a 	sub	r2,r3,r2
   821bc:	1085883a 	add	r2,r2,r2
   821c0:	10800044 	addi	r2,r2,1
   821c4:	e0fffa17 	ldw	r3,-24(fp)
   821c8:	1885883a 	add	r2,r3,r2
   821cc:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
   821d0:	e0bfff07 	ldb	r2,-4(fp)
   821d4:	d8000015 	stw	zero,0(sp)
   821d8:	d8000115 	stw	zero,4(sp)
   821dc:	e0fffe17 	ldw	r3,-8(fp)
   821e0:	d8c00215 	stw	r3,8(sp)
   821e4:	d8800315 	stw	r2,12(sp)
   821e8:	e0800317 	ldw	r2,12(fp)
   821ec:	d8800415 	stw	r2,16(sp)
   821f0:	e13ffb17 	ldw	r4,-20(fp)
   821f4:	e17ffc17 	ldw	r5,-16(fp)
   821f8:	e1bff817 	ldw	r6,-32(fp)
   821fc:	e1fff917 	ldw	r7,-28(fp)
   82200:	00825e00 	call	825e0 <vid_round_corner_points>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
   82204:	e0fff817 	ldw	r3,-32(fp)
   82208:	e0bff917 	ldw	r2,-28(fp)
   8220c:	18bfd916 	blt	r3,r2,82174 <__alt_data_end+0xfffc9f04>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
   82210:	0005883a 	mov	r2,zero
}
   82214:	e037883a 	mov	sp,fp
   82218:	dfc00117 	ldw	ra,4(sp)
   8221c:	df000017 	ldw	fp,0(sp)
   82220:	dec00204 	addi	sp,sp,8
   82224:	f800283a 	ret

00082228 <vid_draw_round_corner_box>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
   82228:	deffec04 	addi	sp,sp,-80
   8222c:	dfc01315 	stw	ra,76(sp)
   82230:	df001215 	stw	fp,72(sp)
   82234:	df001204 	addi	fp,sp,72
   82238:	e13ffc15 	stw	r4,-16(fp)
   8223c:	e17ffd15 	stw	r5,-12(fp)
   82240:	e1bffe15 	stw	r6,-8(fp)
   82244:	e1ffff15 	stw	r7,-4(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
   82248:	e0bffc17 	ldw	r2,-16(fp)
   8224c:	e0fffe17 	ldw	r3,-8(fp)
   82250:	1880060e 	bge	r3,r2,8226c <vid_draw_round_corner_box+0x44>
  {
    temp = horiz_end;
   82254:	e0bffe17 	ldw	r2,-8(fp)
   82258:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
   8225c:	e0bffc17 	ldw	r2,-16(fp)
   82260:	e0bffe15 	stw	r2,-8(fp)
    horiz_start = temp;
   82264:	e0bff617 	ldw	r2,-40(fp)
   82268:	e0bffc15 	stw	r2,-16(fp)
  }
  
  if( vert_start > vert_end )
   8226c:	e0bffd17 	ldw	r2,-12(fp)
   82270:	e0ffff17 	ldw	r3,-4(fp)
   82274:	1880060e 	bge	r3,r2,82290 <vid_draw_round_corner_box+0x68>
  {
    temp = vert_end;
   82278:	e0bfff17 	ldw	r2,-4(fp)
   8227c:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
   82280:	e0bffd17 	ldw	r2,-12(fp)
   82284:	e0bfff15 	stw	r2,-4(fp)
    vert_start = temp;
   82288:	e0bff617 	ldw	r2,-40(fp)
   8228c:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
   82290:	e0fffe17 	ldw	r3,-8(fp)
   82294:	e0bffc17 	ldw	r2,-16(fp)
   82298:	1885c83a 	sub	r2,r3,r2
   8229c:	e0bff715 	stw	r2,-36(fp)
  height = vert_end - vert_start;
   822a0:	e0ffff17 	ldw	r3,-4(fp)
   822a4:	e0bffd17 	ldw	r2,-12(fp)
   822a8:	1885c83a 	sub	r2,r3,r2
   822ac:	e0bff815 	stw	r2,-32(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
   822b0:	e0800217 	ldw	r2,8(fp)
   822b4:	e0fff717 	ldw	r3,-36(fp)
   822b8:	1806d07a 	srli	r3,r3,1
   822bc:	1880032e 	bgeu	r3,r2,822cc <vid_draw_round_corner_box+0xa4>
    radius = width / 2;
   822c0:	e0bff717 	ldw	r2,-36(fp)
   822c4:	1004d07a 	srli	r2,r2,1
   822c8:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
   822cc:	e0800217 	ldw	r2,8(fp)
   822d0:	e0fff817 	ldw	r3,-32(fp)
   822d4:	1806d07a 	srli	r3,r3,1
   822d8:	1880032e 	bgeu	r3,r2,822e8 <vid_draw_round_corner_box+0xc0>
    radius = height / 2;
   822dc:	e0bff817 	ldw	r2,-32(fp)
   822e0:	1004d07a 	srli	r2,r2,1
   822e4:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
   822e8:	e0800217 	ldw	r2,8(fp)
   822ec:	1085883a 	add	r2,r2,r2
   822f0:	e0bff915 	stw	r2,-28(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
   822f4:	e0bff917 	ldw	r2,-28(fp)
   822f8:	e0fff717 	ldw	r3,-36(fp)
   822fc:	1885c83a 	sub	r2,r3,r2
   82300:	e0bffa15 	stw	r2,-24(fp)
  straight_height = height - diameter;
   82304:	e0bff917 	ldw	r2,-28(fp)
   82308:	e0fff817 	ldw	r3,-32(fp)
   8230c:	1885c83a 	sub	r2,r3,r2
   82310:	e0bffb15 	stw	r2,-20(fp)

  x = 0;
   82314:	e03ff315 	stw	zero,-52(fp)
  y = radius;
   82318:	e0800217 	ldw	r2,8(fp)
   8231c:	e0bff415 	stw	r2,-48(fp)
  p = (5 - radius*4)/4;
   82320:	e0800217 	ldw	r2,8(fp)
   82324:	10bfff24 	muli	r2,r2,-4
   82328:	10800144 	addi	r2,r2,5
   8232c:	1000010e 	bge	r2,zero,82334 <vid_draw_round_corner_box+0x10c>
   82330:	108000c4 	addi	r2,r2,3
   82334:	1005d0ba 	srai	r2,r2,2
   82338:	e0bff515 	stw	r2,-44(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
   8233c:	e0fffc17 	ldw	r3,-16(fp)
   82340:	e0800217 	ldw	r2,8(fp)
   82344:	1889883a 	add	r4,r3,r2
   82348:	e0fffd17 	ldw	r3,-12(fp)
   8234c:	e0800217 	ldw	r2,8(fp)
   82350:	188b883a 	add	r5,r3,r2
   82354:	e0fff317 	ldw	r3,-52(fp)
   82358:	e0bff417 	ldw	r2,-48(fp)
   8235c:	e23ffa17 	ldw	r8,-24(fp)
   82360:	e1fffb17 	ldw	r7,-20(fp)
   82364:	e1800417 	ldw	r6,16(fp)
   82368:	31803fcc 	andi	r6,r6,255
   8236c:	3180201c 	xori	r6,r6,128
   82370:	31bfe004 	addi	r6,r6,-128
   82374:	da000015 	stw	r8,0(sp)
   82378:	d9c00115 	stw	r7,4(sp)
   8237c:	e1c00317 	ldw	r7,12(fp)
   82380:	d9c00215 	stw	r7,8(sp)
   82384:	d9800315 	stw	r6,12(sp)
   82388:	e1800517 	ldw	r6,20(fp)
   8238c:	d9800415 	stw	r6,16(sp)
   82390:	180d883a 	mov	r6,r3
   82394:	100f883a 	mov	r7,r2
   82398:	00825e00 	call	825e0 <vid_round_corner_points>
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
   8239c:	00003106 	br	82464 <vid_draw_round_corner_box+0x23c>
    x++;
   823a0:	e0bff317 	ldw	r2,-52(fp)
   823a4:	10800044 	addi	r2,r2,1
   823a8:	e0bff315 	stw	r2,-52(fp)
    if (p < 0) {
   823ac:	e0bff517 	ldw	r2,-44(fp)
   823b0:	1000080e 	bge	r2,zero,823d4 <vid_draw_round_corner_box+0x1ac>
      p += 2*x+1;
   823b4:	e0bff317 	ldw	r2,-52(fp)
   823b8:	1085883a 	add	r2,r2,r2
   823bc:	1007883a 	mov	r3,r2
   823c0:	e0bff517 	ldw	r2,-44(fp)
   823c4:	1885883a 	add	r2,r3,r2
   823c8:	10800044 	addi	r2,r2,1
   823cc:	e0bff515 	stw	r2,-44(fp)
   823d0:	00000c06 	br	82404 <vid_draw_round_corner_box+0x1dc>
    } else {
      y--;
   823d4:	e0bff417 	ldw	r2,-48(fp)
   823d8:	10bfffc4 	addi	r2,r2,-1
   823dc:	e0bff415 	stw	r2,-48(fp)
      p += 2*(x-y)+1;
   823e0:	e0fff317 	ldw	r3,-52(fp)
   823e4:	e0bff417 	ldw	r2,-48(fp)
   823e8:	1885c83a 	sub	r2,r3,r2
   823ec:	1085883a 	add	r2,r2,r2
   823f0:	1007883a 	mov	r3,r2
   823f4:	e0bff517 	ldw	r2,-44(fp)
   823f8:	1885883a 	add	r2,r3,r2
   823fc:	10800044 	addi	r2,r2,1
   82400:	e0bff515 	stw	r2,-44(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
   82404:	e0fffc17 	ldw	r3,-16(fp)
   82408:	e0800217 	ldw	r2,8(fp)
   8240c:	1889883a 	add	r4,r3,r2
   82410:	e0fffd17 	ldw	r3,-12(fp)
   82414:	e0800217 	ldw	r2,8(fp)
   82418:	188b883a 	add	r5,r3,r2
   8241c:	e0fff317 	ldw	r3,-52(fp)
   82420:	e0bff417 	ldw	r2,-48(fp)
   82424:	e23ffa17 	ldw	r8,-24(fp)
   82428:	e1fffb17 	ldw	r7,-20(fp)
   8242c:	e1800417 	ldw	r6,16(fp)
   82430:	31803fcc 	andi	r6,r6,255
   82434:	3180201c 	xori	r6,r6,128
   82438:	31bfe004 	addi	r6,r6,-128
   8243c:	da000015 	stw	r8,0(sp)
   82440:	d9c00115 	stw	r7,4(sp)
   82444:	e1c00317 	ldw	r7,12(fp)
   82448:	d9c00215 	stw	r7,8(sp)
   8244c:	d9800315 	stw	r6,12(sp)
   82450:	e1800517 	ldw	r6,20(fp)
   82454:	d9800415 	stw	r6,16(sp)
   82458:	180d883a 	mov	r6,r3
   8245c:	100f883a 	mov	r7,r2
   82460:	00825e00 	call	825e0 <vid_round_corner_points>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
   82464:	e0fff317 	ldw	r3,-52(fp)
   82468:	e0bff417 	ldw	r2,-48(fp)
   8246c:	18bfcc36 	bltu	r3,r2,823a0 <__alt_data_end+0xfffca130>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
   82470:	e0800417 	ldw	r2,16(fp)
   82474:	10001026 	beq	r2,zero,824b8 <vid_draw_round_corner_box+0x290>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
   82478:	e0fffd17 	ldw	r3,-12(fp)
   8247c:	e0800217 	ldw	r2,8(fp)
   82480:	1887883a 	add	r3,r3,r2
   82484:	e13fff17 	ldw	r4,-4(fp)
   82488:	e0800217 	ldw	r2,8(fp)
   8248c:	2085c83a 	sub	r2,r4,r2
   82490:	e1000317 	ldw	r4,12(fp)
   82494:	d9000015 	stw	r4,0(sp)
   82498:	e1000517 	ldw	r4,20(fp)
   8249c:	d9000115 	stw	r4,4(sp)
   824a0:	e13ffc17 	ldw	r4,-16(fp)
   824a4:	180b883a 	mov	r5,r3
   824a8:	e1bffe17 	ldw	r6,-8(fp)
   824ac:	100f883a 	mov	r7,r2
   824b0:	0081be80 	call	81be8 <vid_paint_block>
   824b4:	00004406 	br	825c8 <vid_draw_round_corner_box+0x3a0>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
   824b8:	e0fffd17 	ldw	r3,-12(fp)
   824bc:	e0800217 	ldw	r2,8(fp)
   824c0:	1887883a 	add	r3,r3,r2
   824c4:	e13fff17 	ldw	r4,-4(fp)
   824c8:	e0800217 	ldw	r2,8(fp)
   824cc:	2085c83a 	sub	r2,r4,r2
   824d0:	01000044 	movi	r4,1
   824d4:	d9000015 	stw	r4,0(sp)
   824d8:	e1000317 	ldw	r4,12(fp)
   824dc:	d9000115 	stw	r4,4(sp)
   824e0:	e1000517 	ldw	r4,20(fp)
   824e4:	d9000215 	stw	r4,8(sp)
   824e8:	e13ffc17 	ldw	r4,-16(fp)
   824ec:	180b883a 	mov	r5,r3
   824f0:	e1bffc17 	ldw	r6,-16(fp)
   824f4:	100f883a 	mov	r7,r2
   824f8:	00810cc0 	call	810cc <vid_draw_line>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
   824fc:	e0fffd17 	ldw	r3,-12(fp)
   82500:	e0800217 	ldw	r2,8(fp)
   82504:	1887883a 	add	r3,r3,r2
   82508:	e13fff17 	ldw	r4,-4(fp)
   8250c:	e0800217 	ldw	r2,8(fp)
   82510:	2085c83a 	sub	r2,r4,r2
   82514:	01000044 	movi	r4,1
   82518:	d9000015 	stw	r4,0(sp)
   8251c:	e1000317 	ldw	r4,12(fp)
   82520:	d9000115 	stw	r4,4(sp)
   82524:	e1000517 	ldw	r4,20(fp)
   82528:	d9000215 	stw	r4,8(sp)
   8252c:	e13ffe17 	ldw	r4,-8(fp)
   82530:	180b883a 	mov	r5,r3
   82534:	e1bffe17 	ldw	r6,-8(fp)
   82538:	100f883a 	mov	r7,r2
   8253c:	00810cc0 	call	810cc <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
   82540:	e0fffc17 	ldw	r3,-16(fp)
   82544:	e0800217 	ldw	r2,8(fp)
   82548:	1887883a 	add	r3,r3,r2
   8254c:	e13ffe17 	ldw	r4,-8(fp)
   82550:	e0800217 	ldw	r2,8(fp)
   82554:	2085c83a 	sub	r2,r4,r2
   82558:	01000044 	movi	r4,1
   8255c:	d9000015 	stw	r4,0(sp)
   82560:	e1000317 	ldw	r4,12(fp)
   82564:	d9000115 	stw	r4,4(sp)
   82568:	e1000517 	ldw	r4,20(fp)
   8256c:	d9000215 	stw	r4,8(sp)
   82570:	1809883a 	mov	r4,r3
   82574:	e17ffd17 	ldw	r5,-12(fp)
   82578:	100d883a 	mov	r6,r2
   8257c:	e1fffd17 	ldw	r7,-12(fp)
   82580:	00810cc0 	call	810cc <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
   82584:	e0fffc17 	ldw	r3,-16(fp)
   82588:	e0800217 	ldw	r2,8(fp)
   8258c:	1887883a 	add	r3,r3,r2
   82590:	e13ffe17 	ldw	r4,-8(fp)
   82594:	e0800217 	ldw	r2,8(fp)
   82598:	2085c83a 	sub	r2,r4,r2
   8259c:	01000044 	movi	r4,1
   825a0:	d9000015 	stw	r4,0(sp)
   825a4:	e1000317 	ldw	r4,12(fp)
   825a8:	d9000115 	stw	r4,4(sp)
   825ac:	e1000517 	ldw	r4,20(fp)
   825b0:	d9000215 	stw	r4,8(sp)
   825b4:	1809883a 	mov	r4,r3
   825b8:	e17fff17 	ldw	r5,-4(fp)
   825bc:	100d883a 	mov	r6,r2
   825c0:	e1ffff17 	ldw	r7,-4(fp)
   825c4:	00810cc0 	call	810cc <vid_draw_line>
  }

  return (0);
   825c8:	0005883a 	mov	r2,zero
}
   825cc:	e037883a 	mov	sp,fp
   825d0:	dfc00117 	ldw	ra,4(sp)
   825d4:	df000017 	ldw	fp,0(sp)
   825d8:	dec00204 	addi	sp,sp,8
   825dc:	f800283a 	ret

000825e0 <vid_round_corner_points>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
   825e0:	defff604 	addi	sp,sp,-40
   825e4:	dfc00915 	stw	ra,36(sp)
   825e8:	df000815 	stw	fp,32(sp)
   825ec:	df000804 	addi	fp,sp,32
   825f0:	e13ffb15 	stw	r4,-20(fp)
   825f4:	e17ffc15 	stw	r5,-16(fp)
   825f8:	e1bffd15 	stw	r6,-12(fp)
   825fc:	e1fffe15 	stw	r7,-8(fp)
   82600:	e0800517 	ldw	r2,20(fp)
   82604:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
   82608:	e0bffd17 	ldw	r2,-12(fp)
   8260c:	1000861e 	bne	r2,zero,82828 <vid_round_corner_points+0x248>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
   82610:	e0fffc17 	ldw	r3,-16(fp)
   82614:	e0bffe17 	ldw	r2,-8(fp)
   82618:	1887883a 	add	r3,r3,r2
   8261c:	e0800317 	ldw	r2,12(fp)
   82620:	1887883a 	add	r3,r3,r2
   82624:	e0800417 	ldw	r2,16(fp)
   82628:	e13ffb17 	ldw	r4,-20(fp)
   8262c:	180b883a 	mov	r5,r3
   82630:	100d883a 	mov	r6,r2
   82634:	e1c00617 	ldw	r7,24(fp)
   82638:	0081b100 	call	81b10 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
   8263c:	e0fffb17 	ldw	r3,-20(fp)
   82640:	e0800217 	ldw	r2,8(fp)
   82644:	1889883a 	add	r4,r3,r2
   82648:	e0fffc17 	ldw	r3,-16(fp)
   8264c:	e0bffe17 	ldw	r2,-8(fp)
   82650:	1887883a 	add	r3,r3,r2
   82654:	e0800317 	ldw	r2,12(fp)
   82658:	1887883a 	add	r3,r3,r2
   8265c:	e0800417 	ldw	r2,16(fp)
   82660:	180b883a 	mov	r5,r3
   82664:	100d883a 	mov	r6,r2
   82668:	e1c00617 	ldw	r7,24(fp)
   8266c:	0081b100 	call	81b10 <vid_set_pixel>
        // top
        vid_set_pixel(cx, cy - y, color, display);
   82670:	e0fffc17 	ldw	r3,-16(fp)
   82674:	e0bffe17 	ldw	r2,-8(fp)
   82678:	1887c83a 	sub	r3,r3,r2
   8267c:	e0800417 	ldw	r2,16(fp)
   82680:	e13ffb17 	ldw	r4,-20(fp)
   82684:	180b883a 	mov	r5,r3
   82688:	100d883a 	mov	r6,r2
   8268c:	e1c00617 	ldw	r7,24(fp)
   82690:	0081b100 	call	81b10 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
   82694:	e0fffb17 	ldw	r3,-20(fp)
   82698:	e0800217 	ldw	r2,8(fp)
   8269c:	1889883a 	add	r4,r3,r2
   826a0:	e0fffc17 	ldw	r3,-16(fp)
   826a4:	e0bffe17 	ldw	r2,-8(fp)
   826a8:	1887c83a 	sub	r3,r3,r2
   826ac:	e0800417 	ldw	r2,16(fp)
   826b0:	180b883a 	mov	r5,r3
   826b4:	100d883a 	mov	r6,r2
   826b8:	e1c00617 	ldw	r7,24(fp)
   826bc:	0081b100 	call	81b10 <vid_set_pixel>

        if(fill) {
   826c0:	e0bfff07 	ldb	r2,-4(fp)
   826c4:	10002b26 	beq	r2,zero,82774 <vid_round_corner_points+0x194>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
   826c8:	e0fffb17 	ldw	r3,-20(fp)
   826cc:	e0bffe17 	ldw	r2,-8(fp)
   826d0:	1887c83a 	sub	r3,r3,r2
   826d4:	e13ffb17 	ldw	r4,-20(fp)
   826d8:	e0bffe17 	ldw	r2,-8(fp)
   826dc:	2089883a 	add	r4,r4,r2
   826e0:	e0800217 	ldw	r2,8(fp)
   826e4:	2085883a 	add	r2,r4,r2
   826e8:	01000044 	movi	r4,1
   826ec:	d9000015 	stw	r4,0(sp)
   826f0:	e1000417 	ldw	r4,16(fp)
   826f4:	d9000115 	stw	r4,4(sp)
   826f8:	e1000617 	ldw	r4,24(fp)
   826fc:	d9000215 	stw	r4,8(sp)
   82700:	1809883a 	mov	r4,r3
   82704:	e17ffc17 	ldw	r5,-16(fp)
   82708:	100d883a 	mov	r6,r2
   8270c:	e1fffc17 	ldw	r7,-16(fp)
   82710:	00810cc0 	call	810cc <vid_draw_line>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
   82714:	e0fffb17 	ldw	r3,-20(fp)
   82718:	e0bffe17 	ldw	r2,-8(fp)
   8271c:	1889c83a 	sub	r4,r3,r2
   82720:	e0fffc17 	ldw	r3,-16(fp)
   82724:	e0800317 	ldw	r2,12(fp)
   82728:	188b883a 	add	r5,r3,r2
   8272c:	e0fffb17 	ldw	r3,-20(fp)
   82730:	e0bffe17 	ldw	r2,-8(fp)
   82734:	1887883a 	add	r3,r3,r2
   82738:	e0800217 	ldw	r2,8(fp)
   8273c:	1887883a 	add	r3,r3,r2
   82740:	e1bffc17 	ldw	r6,-16(fp)
   82744:	e0800317 	ldw	r2,12(fp)
   82748:	3085883a 	add	r2,r6,r2
   8274c:	01800044 	movi	r6,1
   82750:	d9800015 	stw	r6,0(sp)
   82754:	e1800417 	ldw	r6,16(fp)
   82758:	d9800115 	stw	r6,4(sp)
   8275c:	e1800617 	ldw	r6,24(fp)
   82760:	d9800215 	stw	r6,8(sp)
   82764:	180d883a 	mov	r6,r3
   82768:	100f883a 	mov	r7,r2
   8276c:	00810cc0 	call	810cc <vid_draw_line>
   82770:	00016c06 	br	82d24 <vid_round_corner_points+0x744>
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
   82774:	e0fffb17 	ldw	r3,-20(fp)
   82778:	e0bffe17 	ldw	r2,-8(fp)
   8277c:	1887883a 	add	r3,r3,r2
   82780:	e0800217 	ldw	r2,8(fp)
   82784:	1887883a 	add	r3,r3,r2
   82788:	e0800417 	ldw	r2,16(fp)
   8278c:	1809883a 	mov	r4,r3
   82790:	e17ffc17 	ldw	r5,-16(fp)
   82794:	100d883a 	mov	r6,r2
   82798:	e1c00617 	ldw	r7,24(fp)
   8279c:	0081b100 	call	81b10 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
   827a0:	e0fffb17 	ldw	r3,-20(fp)
   827a4:	e0bffe17 	ldw	r2,-8(fp)
   827a8:	1887883a 	add	r3,r3,r2
   827ac:	e0800217 	ldw	r2,8(fp)
   827b0:	1889883a 	add	r4,r3,r2
   827b4:	e0fffc17 	ldw	r3,-16(fp)
   827b8:	e0800317 	ldw	r2,12(fp)
   827bc:	1887883a 	add	r3,r3,r2
   827c0:	e0800417 	ldw	r2,16(fp)
   827c4:	180b883a 	mov	r5,r3
   827c8:	100d883a 	mov	r6,r2
   827cc:	e1c00617 	ldw	r7,24(fp)
   827d0:	0081b100 	call	81b10 <vid_set_pixel>
          //left
          vid_set_pixel(cx - y, cy, color, display);
   827d4:	e0fffb17 	ldw	r3,-20(fp)
   827d8:	e0bffe17 	ldw	r2,-8(fp)
   827dc:	1887c83a 	sub	r3,r3,r2
   827e0:	e0800417 	ldw	r2,16(fp)
   827e4:	1809883a 	mov	r4,r3
   827e8:	e17ffc17 	ldw	r5,-16(fp)
   827ec:	100d883a 	mov	r6,r2
   827f0:	e1c00617 	ldw	r7,24(fp)
   827f4:	0081b100 	call	81b10 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
   827f8:	e0fffb17 	ldw	r3,-20(fp)
   827fc:	e0bffe17 	ldw	r2,-8(fp)
   82800:	1889c83a 	sub	r4,r3,r2
   82804:	e0fffc17 	ldw	r3,-16(fp)
   82808:	e0800317 	ldw	r2,12(fp)
   8280c:	1887883a 	add	r3,r3,r2
   82810:	e0800417 	ldw	r2,16(fp)
   82814:	180b883a 	mov	r5,r3
   82818:	100d883a 	mov	r6,r2
   8281c:	e1c00617 	ldw	r7,24(fp)
   82820:	0081b100 	call	81b10 <vid_set_pixel>
   82824:	00013f06 	br	82d24 <vid_round_corner_points+0x744>
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
   82828:	e0fffd17 	ldw	r3,-12(fp)
   8282c:	e0bffe17 	ldw	r2,-8(fp)
   82830:	18806a1e 	bne	r3,r2,829dc <vid_round_corner_points+0x3fc>
      if(fill) {
   82834:	e0bfff07 	ldb	r2,-4(fp)
   82838:	10003326 	beq	r2,zero,82908 <vid_round_corner_points+0x328>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
   8283c:	e0fffb17 	ldw	r3,-20(fp)
   82840:	e0bffd17 	ldw	r2,-12(fp)
   82844:	1889c83a 	sub	r4,r3,r2
   82848:	e0fffc17 	ldw	r3,-16(fp)
   8284c:	e0bffe17 	ldw	r2,-8(fp)
   82850:	1887883a 	add	r3,r3,r2
   82854:	e0800317 	ldw	r2,12(fp)
   82858:	188b883a 	add	r5,r3,r2
   8285c:	e0fffb17 	ldw	r3,-20(fp)
   82860:	e0bffd17 	ldw	r2,-12(fp)
   82864:	1887883a 	add	r3,r3,r2
   82868:	e0800217 	ldw	r2,8(fp)
   8286c:	1887883a 	add	r3,r3,r2
   82870:	e1bffc17 	ldw	r6,-16(fp)
   82874:	e0bffe17 	ldw	r2,-8(fp)
   82878:	308d883a 	add	r6,r6,r2
   8287c:	e0800317 	ldw	r2,12(fp)
   82880:	3085883a 	add	r2,r6,r2
   82884:	01800044 	movi	r6,1
   82888:	d9800015 	stw	r6,0(sp)
   8288c:	e1800417 	ldw	r6,16(fp)
   82890:	d9800115 	stw	r6,4(sp)
   82894:	e1800617 	ldw	r6,24(fp)
   82898:	d9800215 	stw	r6,8(sp)
   8289c:	180d883a 	mov	r6,r3
   828a0:	100f883a 	mov	r7,r2
   828a4:	00810cc0 	call	810cc <vid_draw_line>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
   828a8:	e0fffb17 	ldw	r3,-20(fp)
   828ac:	e0bffd17 	ldw	r2,-12(fp)
   828b0:	1889c83a 	sub	r4,r3,r2
   828b4:	e0fffc17 	ldw	r3,-16(fp)
   828b8:	e0bffe17 	ldw	r2,-8(fp)
   828bc:	188bc83a 	sub	r5,r3,r2
   828c0:	e0fffb17 	ldw	r3,-20(fp)
   828c4:	e0bffd17 	ldw	r2,-12(fp)
   828c8:	1887883a 	add	r3,r3,r2
   828cc:	e0800217 	ldw	r2,8(fp)
   828d0:	1887883a 	add	r3,r3,r2
   828d4:	e1bffc17 	ldw	r6,-16(fp)
   828d8:	e0bffe17 	ldw	r2,-8(fp)
   828dc:	3085c83a 	sub	r2,r6,r2
   828e0:	01800044 	movi	r6,1
   828e4:	d9800015 	stw	r6,0(sp)
   828e8:	e1800417 	ldw	r6,16(fp)
   828ec:	d9800115 	stw	r6,4(sp)
   828f0:	e1800617 	ldw	r6,24(fp)
   828f4:	d9800215 	stw	r6,8(sp)
   828f8:	180d883a 	mov	r6,r3
   828fc:	100f883a 	mov	r7,r2
   82900:	00810cc0 	call	810cc <vid_draw_line>
   82904:	00010706 	br	82d24 <vid_round_corner_points+0x744>
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
   82908:	e0fffb17 	ldw	r3,-20(fp)
   8290c:	e0bffd17 	ldw	r2,-12(fp)
   82910:	1887883a 	add	r3,r3,r2
   82914:	e0800217 	ldw	r2,8(fp)
   82918:	1889883a 	add	r4,r3,r2
   8291c:	e0fffc17 	ldw	r3,-16(fp)
   82920:	e0bffe17 	ldw	r2,-8(fp)
   82924:	1887883a 	add	r3,r3,r2
   82928:	e0800317 	ldw	r2,12(fp)
   8292c:	1887883a 	add	r3,r3,r2
   82930:	e0800417 	ldw	r2,16(fp)
   82934:	180b883a 	mov	r5,r3
   82938:	100d883a 	mov	r6,r2
   8293c:	e1c00617 	ldw	r7,24(fp)
   82940:	0081b100 	call	81b10 <vid_set_pixel>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
   82944:	e0fffb17 	ldw	r3,-20(fp)
   82948:	e0bffd17 	ldw	r2,-12(fp)
   8294c:	1889c83a 	sub	r4,r3,r2
   82950:	e0fffc17 	ldw	r3,-16(fp)
   82954:	e0bffe17 	ldw	r2,-8(fp)
   82958:	1887883a 	add	r3,r3,r2
   8295c:	e0800317 	ldw	r2,12(fp)
   82960:	1887883a 	add	r3,r3,r2
   82964:	e0800417 	ldw	r2,16(fp)
   82968:	180b883a 	mov	r5,r3
   8296c:	100d883a 	mov	r6,r2
   82970:	e1c00617 	ldw	r7,24(fp)
   82974:	0081b100 	call	81b10 <vid_set_pixel>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
   82978:	e0fffb17 	ldw	r3,-20(fp)
   8297c:	e0bffd17 	ldw	r2,-12(fp)
   82980:	1887883a 	add	r3,r3,r2
   82984:	e0800217 	ldw	r2,8(fp)
   82988:	1889883a 	add	r4,r3,r2
   8298c:	e0fffc17 	ldw	r3,-16(fp)
   82990:	e0bffe17 	ldw	r2,-8(fp)
   82994:	1887c83a 	sub	r3,r3,r2
   82998:	e0800417 	ldw	r2,16(fp)
   8299c:	180b883a 	mov	r5,r3
   829a0:	100d883a 	mov	r6,r2
   829a4:	e1c00617 	ldw	r7,24(fp)
   829a8:	0081b100 	call	81b10 <vid_set_pixel>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
   829ac:	e0fffb17 	ldw	r3,-20(fp)
   829b0:	e0bffd17 	ldw	r2,-12(fp)
   829b4:	1889c83a 	sub	r4,r3,r2
   829b8:	e0fffc17 	ldw	r3,-16(fp)
   829bc:	e0bffe17 	ldw	r2,-8(fp)
   829c0:	1887c83a 	sub	r3,r3,r2
   829c4:	e0800417 	ldw	r2,16(fp)
   829c8:	180b883a 	mov	r5,r3
   829cc:	100d883a 	mov	r6,r2
   829d0:	e1c00617 	ldw	r7,24(fp)
   829d4:	0081b100 	call	81b10 <vid_set_pixel>
   829d8:	0000d206 	br	82d24 <vid_round_corner_points+0x744>
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
   829dc:	e0fffd17 	ldw	r3,-12(fp)
   829e0:	e0bffe17 	ldw	r2,-8(fp)
   829e4:	1880cf0e 	bge	r3,r2,82d24 <vid_round_corner_points+0x744>
        if(fill) {
   829e8:	e0bfff07 	ldb	r2,-4(fp)
   829ec:	10006526 	beq	r2,zero,82b84 <vid_round_corner_points+0x5a4>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
   829f0:	e0fffb17 	ldw	r3,-20(fp)
   829f4:	e0bffd17 	ldw	r2,-12(fp)
   829f8:	1889c83a 	sub	r4,r3,r2
   829fc:	e0fffc17 	ldw	r3,-16(fp)
   82a00:	e0bffe17 	ldw	r2,-8(fp)
   82a04:	1887883a 	add	r3,r3,r2
   82a08:	e0800317 	ldw	r2,12(fp)
   82a0c:	188b883a 	add	r5,r3,r2
   82a10:	e0fffb17 	ldw	r3,-20(fp)
   82a14:	e0bffd17 	ldw	r2,-12(fp)
   82a18:	1887883a 	add	r3,r3,r2
   82a1c:	e0800217 	ldw	r2,8(fp)
   82a20:	1887883a 	add	r3,r3,r2
   82a24:	e1bffc17 	ldw	r6,-16(fp)
   82a28:	e0bffe17 	ldw	r2,-8(fp)
   82a2c:	308d883a 	add	r6,r6,r2
   82a30:	e0800317 	ldw	r2,12(fp)
   82a34:	3085883a 	add	r2,r6,r2
   82a38:	01800044 	movi	r6,1
   82a3c:	d9800015 	stw	r6,0(sp)
   82a40:	e1800417 	ldw	r6,16(fp)
   82a44:	d9800115 	stw	r6,4(sp)
   82a48:	e1800617 	ldw	r6,24(fp)
   82a4c:	d9800215 	stw	r6,8(sp)
   82a50:	180d883a 	mov	r6,r3
   82a54:	100f883a 	mov	r7,r2
   82a58:	00810cc0 	call	810cc <vid_draw_line>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
   82a5c:	e0fffb17 	ldw	r3,-20(fp)
   82a60:	e0bffe17 	ldw	r2,-8(fp)
   82a64:	1889c83a 	sub	r4,r3,r2
   82a68:	e0fffc17 	ldw	r3,-16(fp)
   82a6c:	e0bffd17 	ldw	r2,-12(fp)
   82a70:	1887883a 	add	r3,r3,r2
   82a74:	e0800317 	ldw	r2,12(fp)
   82a78:	188b883a 	add	r5,r3,r2
   82a7c:	e0fffb17 	ldw	r3,-20(fp)
   82a80:	e0bffe17 	ldw	r2,-8(fp)
   82a84:	1887883a 	add	r3,r3,r2
   82a88:	e0800217 	ldw	r2,8(fp)
   82a8c:	1887883a 	add	r3,r3,r2
   82a90:	e1bffc17 	ldw	r6,-16(fp)
   82a94:	e0bffd17 	ldw	r2,-12(fp)
   82a98:	308d883a 	add	r6,r6,r2
   82a9c:	e0800317 	ldw	r2,12(fp)
   82aa0:	3085883a 	add	r2,r6,r2
   82aa4:	01800044 	movi	r6,1
   82aa8:	d9800015 	stw	r6,0(sp)
   82aac:	e1800417 	ldw	r6,16(fp)
   82ab0:	d9800115 	stw	r6,4(sp)
   82ab4:	e1800617 	ldw	r6,24(fp)
   82ab8:	d9800215 	stw	r6,8(sp)
   82abc:	180d883a 	mov	r6,r3
   82ac0:	100f883a 	mov	r7,r2
   82ac4:	00810cc0 	call	810cc <vid_draw_line>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
   82ac8:	e0fffb17 	ldw	r3,-20(fp)
   82acc:	e0bffe17 	ldw	r2,-8(fp)
   82ad0:	1889c83a 	sub	r4,r3,r2
   82ad4:	e0fffc17 	ldw	r3,-16(fp)
   82ad8:	e0bffd17 	ldw	r2,-12(fp)
   82adc:	188bc83a 	sub	r5,r3,r2
   82ae0:	e0fffb17 	ldw	r3,-20(fp)
   82ae4:	e0bffe17 	ldw	r2,-8(fp)
   82ae8:	1887883a 	add	r3,r3,r2
   82aec:	e0800217 	ldw	r2,8(fp)
   82af0:	1887883a 	add	r3,r3,r2
   82af4:	e1bffc17 	ldw	r6,-16(fp)
   82af8:	e0bffd17 	ldw	r2,-12(fp)
   82afc:	3085c83a 	sub	r2,r6,r2
   82b00:	01800044 	movi	r6,1
   82b04:	d9800015 	stw	r6,0(sp)
   82b08:	e1800417 	ldw	r6,16(fp)
   82b0c:	d9800115 	stw	r6,4(sp)
   82b10:	e1800617 	ldw	r6,24(fp)
   82b14:	d9800215 	stw	r6,8(sp)
   82b18:	180d883a 	mov	r6,r3
   82b1c:	100f883a 	mov	r7,r2
   82b20:	00810cc0 	call	810cc <vid_draw_line>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
   82b24:	e0fffb17 	ldw	r3,-20(fp)
   82b28:	e0bffd17 	ldw	r2,-12(fp)
   82b2c:	1889c83a 	sub	r4,r3,r2
   82b30:	e0fffc17 	ldw	r3,-16(fp)
   82b34:	e0bffe17 	ldw	r2,-8(fp)
   82b38:	188bc83a 	sub	r5,r3,r2
   82b3c:	e0fffb17 	ldw	r3,-20(fp)
   82b40:	e0bffd17 	ldw	r2,-12(fp)
   82b44:	1887883a 	add	r3,r3,r2
   82b48:	e0800217 	ldw	r2,8(fp)
   82b4c:	1887883a 	add	r3,r3,r2
   82b50:	e1bffc17 	ldw	r6,-16(fp)
   82b54:	e0bffe17 	ldw	r2,-8(fp)
   82b58:	3085c83a 	sub	r2,r6,r2
   82b5c:	01800044 	movi	r6,1
   82b60:	d9800015 	stw	r6,0(sp)
   82b64:	e1800417 	ldw	r6,16(fp)
   82b68:	d9800115 	stw	r6,4(sp)
   82b6c:	e1800617 	ldw	r6,24(fp)
   82b70:	d9800215 	stw	r6,8(sp)
   82b74:	180d883a 	mov	r6,r3
   82b78:	100f883a 	mov	r7,r2
   82b7c:	00810cc0 	call	810cc <vid_draw_line>
   82b80:	00006806 	br	82d24 <vid_round_corner_points+0x744>
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
   82b84:	e0fffb17 	ldw	r3,-20(fp)
   82b88:	e0bffd17 	ldw	r2,-12(fp)
   82b8c:	1887883a 	add	r3,r3,r2
   82b90:	e0800217 	ldw	r2,8(fp)
   82b94:	1889883a 	add	r4,r3,r2
   82b98:	e0fffc17 	ldw	r3,-16(fp)
   82b9c:	e0bffe17 	ldw	r2,-8(fp)
   82ba0:	1887883a 	add	r3,r3,r2
   82ba4:	e0800317 	ldw	r2,12(fp)
   82ba8:	1887883a 	add	r3,r3,r2
   82bac:	e0800417 	ldw	r2,16(fp)
   82bb0:	180b883a 	mov	r5,r3
   82bb4:	100d883a 	mov	r6,r2
   82bb8:	e1c00617 	ldw	r7,24(fp)
   82bbc:	0081b100 	call	81b10 <vid_set_pixel>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
   82bc0:	e0fffb17 	ldw	r3,-20(fp)
   82bc4:	e0bffd17 	ldw	r2,-12(fp)
   82bc8:	1889c83a 	sub	r4,r3,r2
   82bcc:	e0fffc17 	ldw	r3,-16(fp)
   82bd0:	e0bffe17 	ldw	r2,-8(fp)
   82bd4:	1887883a 	add	r3,r3,r2
   82bd8:	e0800317 	ldw	r2,12(fp)
   82bdc:	1887883a 	add	r3,r3,r2
   82be0:	e0800417 	ldw	r2,16(fp)
   82be4:	180b883a 	mov	r5,r3
   82be8:	100d883a 	mov	r6,r2
   82bec:	e1c00617 	ldw	r7,24(fp)
   82bf0:	0081b100 	call	81b10 <vid_set_pixel>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
   82bf4:	e0fffb17 	ldw	r3,-20(fp)
   82bf8:	e0bffd17 	ldw	r2,-12(fp)
   82bfc:	1887883a 	add	r3,r3,r2
   82c00:	e0800217 	ldw	r2,8(fp)
   82c04:	1889883a 	add	r4,r3,r2
   82c08:	e0fffc17 	ldw	r3,-16(fp)
   82c0c:	e0bffe17 	ldw	r2,-8(fp)
   82c10:	1887c83a 	sub	r3,r3,r2
   82c14:	e0800417 	ldw	r2,16(fp)
   82c18:	180b883a 	mov	r5,r3
   82c1c:	100d883a 	mov	r6,r2
   82c20:	e1c00617 	ldw	r7,24(fp)
   82c24:	0081b100 	call	81b10 <vid_set_pixel>
          vid_set_pixel(cx - x, cy - y, color, display);
   82c28:	e0fffb17 	ldw	r3,-20(fp)
   82c2c:	e0bffd17 	ldw	r2,-12(fp)
   82c30:	1889c83a 	sub	r4,r3,r2
   82c34:	e0fffc17 	ldw	r3,-16(fp)
   82c38:	e0bffe17 	ldw	r2,-8(fp)
   82c3c:	1887c83a 	sub	r3,r3,r2
   82c40:	e0800417 	ldw	r2,16(fp)
   82c44:	180b883a 	mov	r5,r3
   82c48:	100d883a 	mov	r6,r2
   82c4c:	e1c00617 	ldw	r7,24(fp)
   82c50:	0081b100 	call	81b10 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
   82c54:	e0fffb17 	ldw	r3,-20(fp)
   82c58:	e0bffe17 	ldw	r2,-8(fp)
   82c5c:	1887883a 	add	r3,r3,r2
   82c60:	e0800217 	ldw	r2,8(fp)
   82c64:	1889883a 	add	r4,r3,r2
   82c68:	e0fffc17 	ldw	r3,-16(fp)
   82c6c:	e0bffd17 	ldw	r2,-12(fp)
   82c70:	1887883a 	add	r3,r3,r2
   82c74:	e0800317 	ldw	r2,12(fp)
   82c78:	1887883a 	add	r3,r3,r2
   82c7c:	e0800417 	ldw	r2,16(fp)
   82c80:	180b883a 	mov	r5,r3
   82c84:	100d883a 	mov	r6,r2
   82c88:	e1c00617 	ldw	r7,24(fp)
   82c8c:	0081b100 	call	81b10 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
   82c90:	e0fffb17 	ldw	r3,-20(fp)
   82c94:	e0bffe17 	ldw	r2,-8(fp)
   82c98:	1889c83a 	sub	r4,r3,r2
   82c9c:	e0fffc17 	ldw	r3,-16(fp)
   82ca0:	e0bffd17 	ldw	r2,-12(fp)
   82ca4:	1887883a 	add	r3,r3,r2
   82ca8:	e0800317 	ldw	r2,12(fp)
   82cac:	1887883a 	add	r3,r3,r2
   82cb0:	e0800417 	ldw	r2,16(fp)
   82cb4:	180b883a 	mov	r5,r3
   82cb8:	100d883a 	mov	r6,r2
   82cbc:	e1c00617 	ldw	r7,24(fp)
   82cc0:	0081b100 	call	81b10 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
   82cc4:	e0fffb17 	ldw	r3,-20(fp)
   82cc8:	e0bffe17 	ldw	r2,-8(fp)
   82ccc:	1887883a 	add	r3,r3,r2
   82cd0:	e0800217 	ldw	r2,8(fp)
   82cd4:	1889883a 	add	r4,r3,r2
   82cd8:	e0fffc17 	ldw	r3,-16(fp)
   82cdc:	e0bffd17 	ldw	r2,-12(fp)
   82ce0:	1887c83a 	sub	r3,r3,r2
   82ce4:	e0800417 	ldw	r2,16(fp)
   82ce8:	180b883a 	mov	r5,r3
   82cec:	100d883a 	mov	r6,r2
   82cf0:	e1c00617 	ldw	r7,24(fp)
   82cf4:	0081b100 	call	81b10 <vid_set_pixel>
          vid_set_pixel(cx - y, cy - x, color, display);
   82cf8:	e0fffb17 	ldw	r3,-20(fp)
   82cfc:	e0bffe17 	ldw	r2,-8(fp)
   82d00:	1889c83a 	sub	r4,r3,r2
   82d04:	e0fffc17 	ldw	r3,-16(fp)
   82d08:	e0bffd17 	ldw	r2,-12(fp)
   82d0c:	1887c83a 	sub	r3,r3,r2
   82d10:	e0800417 	ldw	r2,16(fp)
   82d14:	180b883a 	mov	r5,r3
   82d18:	100d883a 	mov	r6,r2
   82d1c:	e1c00617 	ldw	r7,24(fp)
   82d20:	0081b100 	call	81b10 <vid_set_pixel>
        }
    }
}
   82d24:	e037883a 	mov	sp,fp
   82d28:	dfc00117 	ldw	ra,4(sp)
   82d2c:	df000017 	ldw	fp,0(sp)
   82d30:	dec00204 	addi	sp,sp,8
   82d34:	f800283a 	ret

00082d38 <max3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
__inline__ int max3( int a, int b, int c )
{
   82d38:	defffc04 	addi	sp,sp,-16
   82d3c:	df000315 	stw	fp,12(sp)
   82d40:	df000304 	addi	fp,sp,12
   82d44:	e13ffd15 	stw	r4,-12(fp)
   82d48:	e17ffe15 	stw	r5,-8(fp)
   82d4c:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
   82d50:	e0fffd17 	ldw	r3,-12(fp)
   82d54:	e0bffe17 	ldw	r2,-8(fp)
   82d58:	1880020e 	bge	r3,r2,82d64 <max3+0x2c>
    a = b;
   82d5c:	e0bffe17 	ldw	r2,-8(fp)
   82d60:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
   82d64:	e0fffd17 	ldw	r3,-12(fp)
   82d68:	e0bfff17 	ldw	r2,-4(fp)
   82d6c:	1880020e 	bge	r3,r2,82d78 <max3+0x40>
    a = c;
   82d70:	e0bfff17 	ldw	r2,-4(fp)
   82d74:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
   82d78:	e0bffd17 	ldw	r2,-12(fp)
}
   82d7c:	e037883a 	mov	sp,fp
   82d80:	df000017 	ldw	fp,0(sp)
   82d84:	dec00104 	addi	sp,sp,4
   82d88:	f800283a 	ret

00082d8c <min3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
__inline__ int min3( int a, int b, int c )
{
   82d8c:	defffc04 	addi	sp,sp,-16
   82d90:	df000315 	stw	fp,12(sp)
   82d94:	df000304 	addi	fp,sp,12
   82d98:	e13ffd15 	stw	r4,-12(fp)
   82d9c:	e17ffe15 	stw	r5,-8(fp)
   82da0:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
   82da4:	e0bffd17 	ldw	r2,-12(fp)
   82da8:	e0fffe17 	ldw	r3,-8(fp)
   82dac:	1880020e 	bge	r3,r2,82db8 <min3+0x2c>
    a = b;
   82db0:	e0bffe17 	ldw	r2,-8(fp)
   82db4:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
   82db8:	e0bffd17 	ldw	r2,-12(fp)
   82dbc:	e0ffff17 	ldw	r3,-4(fp)
   82dc0:	1880020e 	bge	r3,r2,82dcc <min3+0x40>
    a = c;
   82dc4:	e0bfff17 	ldw	r2,-4(fp)
   82dc8:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
   82dcc:	e0bffd17 	ldw	r2,-12(fp)
}
   82dd0:	e037883a 	mov	sp,fp
   82dd4:	df000017 	ldw	fp,0(sp)
   82dd8:	dec00104 	addi	sp,sp,4
   82ddc:	f800283a 	ret

00082de0 <max_diff3>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
__inline__ int max_diff3(int a, int b, int c)
{
   82de0:	defff904 	addi	sp,sp,-28
   82de4:	dfc00615 	stw	ra,24(sp)
   82de8:	df000515 	stw	fp,20(sp)
   82dec:	df000504 	addi	fp,sp,20
   82df0:	e13ffd15 	stw	r4,-12(fp)
   82df4:	e17ffe15 	stw	r5,-8(fp)
   82df8:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
   82dfc:	e13ffd17 	ldw	r4,-12(fp)
   82e00:	e17ffe17 	ldw	r5,-8(fp)
   82e04:	e1bfff17 	ldw	r6,-4(fp)
   82e08:	0082d380 	call	82d38 <max3>
   82e0c:	e0bffb15 	stw	r2,-20(fp)
  min = min3( a, b, c );
   82e10:	e13ffd17 	ldw	r4,-12(fp)
   82e14:	e17ffe17 	ldw	r5,-8(fp)
   82e18:	e1bfff17 	ldw	r6,-4(fp)
   82e1c:	0082d8c0 	call	82d8c <min3>
   82e20:	e0bffc15 	stw	r2,-16(fp)
  return (max - min);
   82e24:	e0fffb17 	ldw	r3,-20(fp)
   82e28:	e0bffc17 	ldw	r2,-16(fp)
   82e2c:	1885c83a 	sub	r2,r3,r2
}
   82e30:	e037883a 	mov	sp,fp
   82e34:	dfc00117 	ldw	ra,4(sp)
   82e38:	df000017 	ldw	fp,0(sp)
   82e3c:	dec00204 	addi	sp,sp,8
   82e40:	f800283a 	ret

00082e44 <vid_put_pixel_in_span_map>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
inline void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
   82e44:	defffc04 	addi	sp,sp,-16
   82e48:	df000315 	stw	fp,12(sp)
   82e4c:	df000304 	addi	fp,sp,12
   82e50:	e13ffd15 	stw	r4,-12(fp)
   82e54:	e17ffe15 	stw	r5,-8(fp)
   82e58:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
   82e5c:	e0bffe17 	ldw	r2,-8(fp)
   82e60:	100490fa 	slli	r2,r2,3
   82e64:	e0ffff17 	ldw	r3,-4(fp)
   82e68:	1885883a 	add	r2,r3,r2
   82e6c:	10800017 	ldw	r2,0(r2)
   82e70:	10bfffd8 	cmpnei	r2,r2,-1
   82e74:	10000e1e 	bne	r2,zero,82eb0 <vid_put_pixel_in_span_map+0x6c>
  {
    span_array[y*2] = x;
   82e78:	e0bffe17 	ldw	r2,-8(fp)
   82e7c:	100490fa 	slli	r2,r2,3
   82e80:	e0ffff17 	ldw	r3,-4(fp)
   82e84:	1885883a 	add	r2,r3,r2
   82e88:	e0fffd17 	ldw	r3,-12(fp)
   82e8c:	10c00015 	stw	r3,0(r2)
    span_array[(y*2)+1] = x;
   82e90:	e0bffe17 	ldw	r2,-8(fp)
   82e94:	100490fa 	slli	r2,r2,3
   82e98:	10800104 	addi	r2,r2,4
   82e9c:	e0ffff17 	ldw	r3,-4(fp)
   82ea0:	1885883a 	add	r2,r3,r2
   82ea4:	e0fffd17 	ldw	r3,-12(fp)
   82ea8:	10c00015 	stw	r3,0(r2)
   82eac:	00001d06 	br	82f24 <vid_put_pixel_in_span_map+0xe0>
  }
  else if( span_array[y*2] > x )
   82eb0:	e0bffe17 	ldw	r2,-8(fp)
   82eb4:	100490fa 	slli	r2,r2,3
   82eb8:	e0ffff17 	ldw	r3,-4(fp)
   82ebc:	1885883a 	add	r2,r3,r2
   82ec0:	10800017 	ldw	r2,0(r2)
   82ec4:	e0fffd17 	ldw	r3,-12(fp)
   82ec8:	1880070e 	bge	r3,r2,82ee8 <vid_put_pixel_in_span_map+0xa4>
    span_array[y*2] = x;
   82ecc:	e0bffe17 	ldw	r2,-8(fp)
   82ed0:	100490fa 	slli	r2,r2,3
   82ed4:	e0ffff17 	ldw	r3,-4(fp)
   82ed8:	1885883a 	add	r2,r3,r2
   82edc:	e0fffd17 	ldw	r3,-12(fp)
   82ee0:	10c00015 	stw	r3,0(r2)
   82ee4:	00000f06 	br	82f24 <vid_put_pixel_in_span_map+0xe0>
  else if( span_array[(y*2)+1] < x )
   82ee8:	e0bffe17 	ldw	r2,-8(fp)
   82eec:	100490fa 	slli	r2,r2,3
   82ef0:	10800104 	addi	r2,r2,4
   82ef4:	e0ffff17 	ldw	r3,-4(fp)
   82ef8:	1885883a 	add	r2,r3,r2
   82efc:	10c00017 	ldw	r3,0(r2)
   82f00:	e0bffd17 	ldw	r2,-12(fp)
   82f04:	1880070e 	bge	r3,r2,82f24 <vid_put_pixel_in_span_map+0xe0>
    span_array[(y*2)+1] = x;
   82f08:	e0bffe17 	ldw	r2,-8(fp)
   82f0c:	100490fa 	slli	r2,r2,3
   82f10:	10800104 	addi	r2,r2,4
   82f14:	e0ffff17 	ldw	r3,-4(fp)
   82f18:	1885883a 	add	r2,r3,r2
   82f1c:	e0fffd17 	ldw	r3,-12(fp)
   82f20:	10c00015 	stw	r3,0(r2)
}
   82f24:	e037883a 	mov	sp,fp
   82f28:	df000017 	ldw	fp,0(sp)
   82f2c:	dec00104 	addi	sp,sp,4
   82f30:	f800283a 	ret

00082f34 <vid_bres_scan_edges>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
   82f34:	deffee04 	addi	sp,sp,-72
   82f38:	dfc01115 	stw	ra,68(sp)
   82f3c:	df001015 	stw	fp,64(sp)
   82f40:	df001004 	addi	fp,sp,64
   82f44:	e13ffc15 	stw	r4,-16(fp)
   82f48:	e17ffd15 	stw	r5,-12(fp)
   82f4c:	e1bffe15 	stw	r6,-8(fp)
   82f50:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
   82f54:	e0bffc17 	ldw	r2,-16(fp)
   82f58:	e0fffe17 	ldw	r3,-8(fp)
   82f5c:	18800c0e 	bge	r3,r2,82f90 <vid_bres_scan_edges+0x5c>
  {
    int tempx = x2;
   82f60:	e0bffe17 	ldw	r2,-8(fp)
   82f64:	e0bff515 	stw	r2,-44(fp)
    x2 = x1;
   82f68:	e0bffc17 	ldw	r2,-16(fp)
   82f6c:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
   82f70:	e0bff517 	ldw	r2,-44(fp)
   82f74:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
   82f78:	e0bfff17 	ldw	r2,-4(fp)
   82f7c:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
   82f80:	e0bffd17 	ldw	r2,-12(fp)
   82f84:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
   82f88:	e0bff617 	ldw	r2,-40(fp)
   82f8c:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
   82f90:	e0fffd17 	ldw	r3,-12(fp)
   82f94:	e0bfff17 	ldw	r2,-4(fp)
   82f98:	1885c83a 	sub	r2,r3,r2
   82f9c:	1000010e 	bge	r2,zero,82fa4 <vid_bres_scan_edges+0x70>
   82fa0:	0085c83a 	sub	r2,zero,r2
   82fa4:	e0bff115 	stw	r2,-60(fp)
  x_delta = (x2-x1);
   82fa8:	e0fffe17 	ldw	r3,-8(fp)
   82fac:	e0bffc17 	ldw	r2,-16(fp)
   82fb0:	1885c83a 	sub	r2,r3,r2
   82fb4:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
   82fb8:	e0bffd17 	ldw	r2,-12(fp)
   82fbc:	e0ffff17 	ldw	r3,-4(fp)
   82fc0:	1880030e 	bge	r3,r2,82fd0 <vid_bres_scan_edges+0x9c>
   82fc4:	00bfffc4 	movi	r2,-1
   82fc8:	e0bff015 	stw	r2,-64(fp)
   82fcc:	00000206 	br	82fd8 <vid_bres_scan_edges+0xa4>
   82fd0:	00800044 	movi	r2,1
   82fd4:	e0bff015 	stw	r2,-64(fp)
  x_incr=1;
   82fd8:	00800044 	movi	r2,1
   82fdc:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
   82fe0:	e0fff217 	ldw	r3,-56(fp)
   82fe4:	e0bff117 	ldw	r2,-60(fp)
   82fe8:	18802e16 	blt	r3,r2,830a4 <vid_bres_scan_edges+0x170>
    int dPr   = y_delta<<1;
   82fec:	e0bff117 	ldw	r2,-60(fp)
   82ff0:	1085883a 	add	r2,r2,r2
   82ff4:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (x_delta<<1);
   82ff8:	e0bff217 	ldw	r2,-56(fp)
   82ffc:	1085883a 	add	r2,r2,r2
   83000:	e0fff817 	ldw	r3,-32(fp)
   83004:	1885c83a 	sub	r2,r3,r2
   83008:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - x_delta;
   8300c:	e0fff817 	ldw	r3,-32(fp)
   83010:	e0bff217 	ldw	r2,-56(fp)
   83014:	1885c83a 	sub	r2,r3,r2
   83018:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
   8301c:	00001e06 	br	83098 <vid_bres_scan_edges+0x164>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
   83020:	e13ffc17 	ldw	r4,-16(fp)
   83024:	e17ffd17 	ldw	r5,-12(fp)
   83028:	e1800217 	ldw	r6,8(fp)
   8302c:	0082e440 	call	82e44 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
   83030:	e0bff317 	ldw	r2,-52(fp)
   83034:	00800d0e 	bge	zero,r2,8306c <vid_bres_scan_edges+0x138>
        x1+=x_incr;
   83038:	e0fffc17 	ldw	r3,-16(fp)
   8303c:	e0bff717 	ldw	r2,-36(fp)
   83040:	1885883a 	add	r2,r3,r2
   83044:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
   83048:	e0fffd17 	ldw	r3,-12(fp)
   8304c:	e0bff017 	ldw	r2,-64(fp)
   83050:	1885883a 	add	r2,r3,r2
   83054:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
   83058:	e0fff317 	ldw	r3,-52(fp)
   8305c:	e0bff917 	ldw	r2,-28(fp)
   83060:	1885883a 	add	r2,r3,r2
   83064:	e0bff315 	stw	r2,-52(fp)
   83068:	00000806 	br	8308c <vid_bres_scan_edges+0x158>
      } else {
        x1+=x_incr;
   8306c:	e0fffc17 	ldw	r3,-16(fp)
   83070:	e0bff717 	ldw	r2,-36(fp)
   83074:	1885883a 	add	r2,r3,r2
   83078:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
   8307c:	e0fff317 	ldw	r3,-52(fp)
   83080:	e0bff817 	ldw	r2,-32(fp)
   83084:	1885883a 	add	r2,r3,r2
   83088:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
   8308c:	e0bff217 	ldw	r2,-56(fp)
   83090:	10bfffc4 	addi	r2,r2,-1
   83094:	e0bff215 	stw	r2,-56(fp)
   83098:	e0bff217 	ldw	r2,-56(fp)
   8309c:	103fe00e 	bge	r2,zero,83020 <__alt_data_end+0xfffcadb0>
   830a0:	00002d06 	br	83158 <vid_bres_scan_edges+0x224>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
   830a4:	e0bff217 	ldw	r2,-56(fp)
   830a8:	1085883a 	add	r2,r2,r2
   830ac:	e0bffa15 	stw	r2,-24(fp)
    int dPru  = dPr - (y_delta<<1);
   830b0:	e0bff117 	ldw	r2,-60(fp)
   830b4:	1085883a 	add	r2,r2,r2
   830b8:	e0fffa17 	ldw	r3,-24(fp)
   830bc:	1885c83a 	sub	r2,r3,r2
   830c0:	e0bffb15 	stw	r2,-20(fp)
    int P     = dPr - y_delta;
   830c4:	e0fffa17 	ldw	r3,-24(fp)
   830c8:	e0bff117 	ldw	r2,-60(fp)
   830cc:	1885c83a 	sub	r2,r3,r2
   830d0:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
   830d4:	00001e06 	br	83150 <vid_bres_scan_edges+0x21c>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
   830d8:	e13ffc17 	ldw	r4,-16(fp)
   830dc:	e17ffd17 	ldw	r5,-12(fp)
   830e0:	e1800217 	ldw	r6,8(fp)
   830e4:	0082e440 	call	82e44 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
   830e8:	e0bff417 	ldw	r2,-48(fp)
   830ec:	00800d0e 	bge	zero,r2,83124 <vid_bres_scan_edges+0x1f0>
        x1+=x_incr;
   830f0:	e0fffc17 	ldw	r3,-16(fp)
   830f4:	e0bff717 	ldw	r2,-36(fp)
   830f8:	1885883a 	add	r2,r3,r2
   830fc:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
   83100:	e0fffd17 	ldw	r3,-12(fp)
   83104:	e0bff017 	ldw	r2,-64(fp)
   83108:	1885883a 	add	r2,r3,r2
   8310c:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
   83110:	e0fff417 	ldw	r3,-48(fp)
   83114:	e0bffb17 	ldw	r2,-20(fp)
   83118:	1885883a 	add	r2,r3,r2
   8311c:	e0bff415 	stw	r2,-48(fp)
   83120:	00000806 	br	83144 <vid_bres_scan_edges+0x210>
      } else {
        y1+=y_incr;
   83124:	e0fffd17 	ldw	r3,-12(fp)
   83128:	e0bff017 	ldw	r2,-64(fp)
   8312c:	1885883a 	add	r2,r3,r2
   83130:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
   83134:	e0fff417 	ldw	r3,-48(fp)
   83138:	e0bffa17 	ldw	r2,-24(fp)
   8313c:	1885883a 	add	r2,r3,r2
   83140:	e0bff415 	stw	r2,-48(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
   83144:	e0bff117 	ldw	r2,-60(fp)
   83148:	10bfffc4 	addi	r2,r2,-1
   8314c:	e0bff115 	stw	r2,-60(fp)
   83150:	e0bff117 	ldw	r2,-60(fp)
   83154:	103fe00e 	bge	r2,zero,830d8 <__alt_data_end+0xfffcae68>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
   83158:	e037883a 	mov	sp,fp
   8315c:	dfc00117 	ldw	ra,4(sp)
   83160:	df000017 	ldw	fp,0(sp)
   83164:	dec00204 	addi	sp,sp,8
   83168:	f800283a 	ret

0008316c <vid_draw_triangle>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
   8316c:	defff804 	addi	sp,sp,-32
   83170:	dfc00715 	stw	ra,28(sp)
   83174:	df000615 	stw	fp,24(sp)
   83178:	df000604 	addi	fp,sp,24
   8317c:	e13ffe15 	stw	r4,-8(fp)
   83180:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
   83184:	e0bffe17 	ldw	r2,-8(fp)
   83188:	11000017 	ldw	r4,0(r2)
   8318c:	e0bffe17 	ldw	r2,-8(fp)
   83190:	11400317 	ldw	r5,12(r2)
   83194:	e0bffe17 	ldw	r2,-8(fp)
   83198:	10c00117 	ldw	r3,4(r2)
   8319c:	e0bffe17 	ldw	r2,-8(fp)
   831a0:	10800417 	ldw	r2,16(r2)
   831a4:	e1bffe17 	ldw	r6,-8(fp)
   831a8:	31800a17 	ldw	r6,40(r6)
   831ac:	01c00044 	movi	r7,1
   831b0:	d9c00015 	stw	r7,0(sp)
   831b4:	d9800115 	stw	r6,4(sp)
   831b8:	e1bfff17 	ldw	r6,-4(fp)
   831bc:	d9800215 	stw	r6,8(sp)
   831c0:	180d883a 	mov	r6,r3
   831c4:	100f883a 	mov	r7,r2
   831c8:	00810cc0 	call	810cc <vid_draw_line>
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
   831cc:	e0bffe17 	ldw	r2,-8(fp)
   831d0:	11000117 	ldw	r4,4(r2)
   831d4:	e0bffe17 	ldw	r2,-8(fp)
   831d8:	11400417 	ldw	r5,16(r2)
   831dc:	e0bffe17 	ldw	r2,-8(fp)
   831e0:	10c00217 	ldw	r3,8(r2)
   831e4:	e0bffe17 	ldw	r2,-8(fp)
   831e8:	10800517 	ldw	r2,20(r2)
   831ec:	e1bffe17 	ldw	r6,-8(fp)
   831f0:	31800a17 	ldw	r6,40(r6)
   831f4:	01c00044 	movi	r7,1
   831f8:	d9c00015 	stw	r7,0(sp)
   831fc:	d9800115 	stw	r6,4(sp)
   83200:	e1bfff17 	ldw	r6,-4(fp)
   83204:	d9800215 	stw	r6,8(sp)
   83208:	180d883a 	mov	r6,r3
   8320c:	100f883a 	mov	r7,r2
   83210:	00810cc0 	call	810cc <vid_draw_line>
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
   83214:	e0bffe17 	ldw	r2,-8(fp)
   83218:	11000217 	ldw	r4,8(r2)
   8321c:	e0bffe17 	ldw	r2,-8(fp)
   83220:	11400517 	ldw	r5,20(r2)
   83224:	e0bffe17 	ldw	r2,-8(fp)
   83228:	10c00017 	ldw	r3,0(r2)
   8322c:	e0bffe17 	ldw	r2,-8(fp)
   83230:	10800317 	ldw	r2,12(r2)
   83234:	e1bffe17 	ldw	r6,-8(fp)
   83238:	31800a17 	ldw	r6,40(r6)
   8323c:	01c00044 	movi	r7,1
   83240:	d9c00015 	stw	r7,0(sp)
   83244:	d9800115 	stw	r6,4(sp)
   83248:	e1bfff17 	ldw	r6,-4(fp)
   8324c:	d9800215 	stw	r6,8(sp)
   83250:	180d883a 	mov	r6,r3
   83254:	100f883a 	mov	r7,r2
   83258:	00810cc0 	call	810cc <vid_draw_line>
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
   8325c:	e0bffe17 	ldw	r2,-8(fp)
   83260:	10800b17 	ldw	r2,44(r2)
   83264:	10800058 	cmpnei	r2,r2,1
   83268:	1000a41e 	bne	r2,zero,834fc <vid_draw_triangle+0x390>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
   8326c:	e0bffe17 	ldw	r2,-8(fp)
   83270:	11000317 	ldw	r4,12(r2)
   83274:	e0bffe17 	ldw	r2,-8(fp)
   83278:	10c00417 	ldw	r3,16(r2)
   8327c:	e0bffe17 	ldw	r2,-8(fp)
   83280:	10800517 	ldw	r2,20(r2)
   83284:	180b883a 	mov	r5,r3
   83288:	100d883a 	mov	r6,r2
   8328c:	0082d8c0 	call	82d8c <min3>
   83290:	1007883a 	mov	r3,r2
   83294:	e0bffe17 	ldw	r2,-8(fp)
   83298:	10c00815 	stw	r3,32(r2)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
   8329c:	e0bffe17 	ldw	r2,-8(fp)
   832a0:	11000317 	ldw	r4,12(r2)
   832a4:	e0bffe17 	ldw	r2,-8(fp)
   832a8:	10c00417 	ldw	r3,16(r2)
   832ac:	e0bffe17 	ldw	r2,-8(fp)
   832b0:	10800517 	ldw	r2,20(r2)
   832b4:	180b883a 	mov	r5,r3
   832b8:	100d883a 	mov	r6,r2
   832bc:	0082d380 	call	82d38 <max3>
   832c0:	1007883a 	mov	r3,r2
   832c4:	e0bffe17 	ldw	r2,-8(fp)
   832c8:	10c00915 	stw	r3,36(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
   832cc:	e0bffe17 	ldw	r2,-8(fp)
   832d0:	11000317 	ldw	r4,12(r2)
   832d4:	e0bffe17 	ldw	r2,-8(fp)
   832d8:	10c00417 	ldw	r3,16(r2)
   832dc:	e0bffe17 	ldw	r2,-8(fp)
   832e0:	10800517 	ldw	r2,20(r2)
   832e4:	180b883a 	mov	r5,r3
   832e8:	100d883a 	mov	r6,r2
   832ec:	0082de00 	call	82de0 <max_diff3>
   832f0:	1007883a 	mov	r3,r2
   832f4:	e0bffe17 	ldw	r2,-8(fp)
   832f8:	10c00615 	stw	r3,24(r2)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
   832fc:	e0bffe17 	ldw	r2,-8(fp)
   83300:	11000017 	ldw	r4,0(r2)
   83304:	e0bffe17 	ldw	r2,-8(fp)
   83308:	10c00117 	ldw	r3,4(r2)
   8330c:	e0bffe17 	ldw	r2,-8(fp)
   83310:	10800217 	ldw	r2,8(r2)
   83314:	180b883a 	mov	r5,r3
   83318:	100d883a 	mov	r6,r2
   8331c:	0082de00 	call	82de0 <max_diff3>
   83320:	1007883a 	mov	r3,r2
   83324:	e0bffe17 	ldw	r2,-8(fp)
   83328:	10c00715 	stw	r3,28(r2)
    tri->span_array = malloc(display->height * 4 * 2);
   8332c:	e0bfff17 	ldw	r2,-4(fp)
   83330:	10800217 	ldw	r2,8(r2)
   83334:	100490fa 	slli	r2,r2,3
   83338:	1009883a 	mov	r4,r2
   8333c:	0089c400 	call	89c40 <malloc>
   83340:	1007883a 	mov	r3,r2
   83344:	e0bffe17 	ldw	r2,-8(fp)
   83348:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
   8334c:	e0bffe17 	ldw	r2,-8(fp)
   83350:	10800817 	ldw	r2,32(r2)
   83354:	e0bffd15 	stw	r2,-12(fp)
   83358:	00001206 	br	833a4 <vid_draw_triangle+0x238>
    {
      tri->span_array[i*2] = -1;
   8335c:	e0bffe17 	ldw	r2,-8(fp)
   83360:	10c00d17 	ldw	r3,52(r2)
   83364:	e0bffd17 	ldw	r2,-12(fp)
   83368:	100490fa 	slli	r2,r2,3
   8336c:	1885883a 	add	r2,r3,r2
   83370:	00ffffc4 	movi	r3,-1
   83374:	10c00015 	stw	r3,0(r2)
      tri->span_array[(i*2) + 1] = -1;
   83378:	e0bffe17 	ldw	r2,-8(fp)
   8337c:	10c00d17 	ldw	r3,52(r2)
   83380:	e0bffd17 	ldw	r2,-12(fp)
   83384:	100490fa 	slli	r2,r2,3
   83388:	10800104 	addi	r2,r2,4
   8338c:	1885883a 	add	r2,r3,r2
   83390:	00ffffc4 	movi	r3,-1
   83394:	10c00015 	stw	r3,0(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
   83398:	e0bffd17 	ldw	r2,-12(fp)
   8339c:	10800044 	addi	r2,r2,1
   833a0:	e0bffd15 	stw	r2,-12(fp)
   833a4:	e0bffe17 	ldw	r2,-8(fp)
   833a8:	10c00917 	ldw	r3,36(r2)
   833ac:	e0bffd17 	ldw	r2,-12(fp)
   833b0:	18bfea0e 	bge	r3,r2,8335c <__alt_data_end+0xfffcb0ec>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
   833b4:	e0bffe17 	ldw	r2,-8(fp)
   833b8:	11000017 	ldw	r4,0(r2)
   833bc:	e0bffe17 	ldw	r2,-8(fp)
   833c0:	11400317 	ldw	r5,12(r2)
   833c4:	e0bffe17 	ldw	r2,-8(fp)
   833c8:	10c00117 	ldw	r3,4(r2)
   833cc:	e0bffe17 	ldw	r2,-8(fp)
   833d0:	10800417 	ldw	r2,16(r2)
   833d4:	e1bffe17 	ldw	r6,-8(fp)
   833d8:	31800d17 	ldw	r6,52(r6)
   833dc:	d9800015 	stw	r6,0(sp)
   833e0:	180d883a 	mov	r6,r3
   833e4:	100f883a 	mov	r7,r2
   833e8:	0082f340 	call	82f34 <vid_bres_scan_edges>
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
   833ec:	e0bffe17 	ldw	r2,-8(fp)
   833f0:	11000117 	ldw	r4,4(r2)
   833f4:	e0bffe17 	ldw	r2,-8(fp)
   833f8:	11400417 	ldw	r5,16(r2)
   833fc:	e0bffe17 	ldw	r2,-8(fp)
   83400:	10c00217 	ldw	r3,8(r2)
   83404:	e0bffe17 	ldw	r2,-8(fp)
   83408:	10800517 	ldw	r2,20(r2)
   8340c:	e1bffe17 	ldw	r6,-8(fp)
   83410:	31800d17 	ldw	r6,52(r6)
   83414:	d9800015 	stw	r6,0(sp)
   83418:	180d883a 	mov	r6,r3
   8341c:	100f883a 	mov	r7,r2
   83420:	0082f340 	call	82f34 <vid_bres_scan_edges>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
   83424:	e0bffe17 	ldw	r2,-8(fp)
   83428:	11000217 	ldw	r4,8(r2)
   8342c:	e0bffe17 	ldw	r2,-8(fp)
   83430:	11400517 	ldw	r5,20(r2)
   83434:	e0bffe17 	ldw	r2,-8(fp)
   83438:	10c00017 	ldw	r3,0(r2)
   8343c:	e0bffe17 	ldw	r2,-8(fp)
   83440:	10800317 	ldw	r2,12(r2)
   83444:	e1bffe17 	ldw	r6,-8(fp)
   83448:	31800d17 	ldw	r6,52(r6)
   8344c:	d9800015 	stw	r6,0(sp)
   83450:	180d883a 	mov	r6,r3
   83454:	100f883a 	mov	r7,r2
   83458:	0082f340 	call	82f34 <vid_bres_scan_edges>
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
   8345c:	e0bffe17 	ldw	r2,-8(fp)
   83460:	10800817 	ldw	r2,32(r2)
   83464:	e0bffd15 	stw	r2,-12(fp)
   83468:	00001c06 	br	834dc <vid_draw_triangle+0x370>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
   8346c:	e0bffe17 	ldw	r2,-8(fp)
   83470:	10c00d17 	ldw	r3,52(r2)
   83474:	e0bffd17 	ldw	r2,-12(fp)
   83478:	100490fa 	slli	r2,r2,3
   8347c:	1885883a 	add	r2,r3,r2
   83480:	10c00017 	ldw	r3,0(r2)
   83484:	e0bffe17 	ldw	r2,-8(fp)
   83488:	11000d17 	ldw	r4,52(r2)
   8348c:	e0bffd17 	ldw	r2,-12(fp)
   83490:	100490fa 	slli	r2,r2,3
   83494:	10800104 	addi	r2,r2,4
   83498:	2085883a 	add	r2,r4,r2
   8349c:	10800017 	ldw	r2,0(r2)
   834a0:	e13ffe17 	ldw	r4,-8(fp)
   834a4:	21000a17 	ldw	r4,40(r4)
   834a8:	01400044 	movi	r5,1
   834ac:	d9400015 	stw	r5,0(sp)
   834b0:	d9000115 	stw	r4,4(sp)
   834b4:	e13fff17 	ldw	r4,-4(fp)
   834b8:	d9000215 	stw	r4,8(sp)
   834bc:	1809883a 	mov	r4,r3
   834c0:	e17ffd17 	ldw	r5,-12(fp)
   834c4:	100d883a 	mov	r6,r2
   834c8:	e1fffd17 	ldw	r7,-12(fp)
   834cc:	00810cc0 	call	810cc <vid_draw_line>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
   834d0:	e0bffd17 	ldw	r2,-12(fp)
   834d4:	10800044 	addi	r2,r2,1
   834d8:	e0bffd15 	stw	r2,-12(fp)
   834dc:	e0bffe17 	ldw	r2,-8(fp)
   834e0:	10c00917 	ldw	r3,36(r2)
   834e4:	e0bffd17 	ldw	r2,-12(fp)
   834e8:	18bfe00e 	bge	r3,r2,8346c <__alt_data_end+0xfffcb1fc>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
   834ec:	e0bffe17 	ldw	r2,-8(fp)
   834f0:	10800d17 	ldw	r2,52(r2)
   834f4:	1009883a 	mov	r4,r2
   834f8:	0089c540 	call	89c54 <free>
  }
}
   834fc:	e037883a 	mov	sp,fp
   83500:	dfc00117 	ldw	ra,4(sp)
   83504:	df000017 	ldw	fp,0(sp)
   83508:	dec00204 	addi	sp,sp,8
   8350c:	f800283a 	ret

00083510 <CopyImage16>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
   83510:	defff404 	addi	sp,sp,-48
   83514:	dfc00b15 	stw	ra,44(sp)
   83518:	df000a15 	stw	fp,40(sp)
   8351c:	df000a04 	addi	fp,sp,40
   83520:	e13ffa15 	stw	r4,-24(fp)
   83524:	e17ffb15 	stw	r5,-20(fp)
   83528:	300b883a 	mov	r5,r6
   8352c:	3809883a 	mov	r4,r7
   83530:	e0c00217 	ldw	r3,8(fp)
   83534:	e0800317 	ldw	r2,12(fp)
   83538:	e17ffc0d 	sth	r5,-16(fp)
   8353c:	e13ffd0d 	sth	r4,-12(fp)
   83540:	e0fffe0d 	sth	r3,-8(fp)
   83544:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
   83548:	e03ff815 	stw	zero,-32(fp)
  int y_dst_offset = 0;
   8354c:	e03ff915 	stw	zero,-28(fp)
  
  for( y_src = 0, y_dst = 0; 
   83550:	e03ff615 	stw	zero,-40(fp)
   83554:	e03ff715 	stw	zero,-36(fp)
   83558:	00001b06 	br	835c8 <CopyImage16+0xb8>
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   8355c:	e0bff917 	ldw	r2,-28(fp)
   83560:	1085883a 	add	r2,r2,r2
   83564:	e0fffb17 	ldw	r3,-20(fp)
   83568:	1889883a 	add	r4,r3,r2
   8356c:	e0bff817 	ldw	r2,-32(fp)
           ( source_buffer + y_src_offset ), 
   83570:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   83574:	e0fffa17 	ldw	r3,-24(fp)
   83578:	1887883a 	add	r3,r3,r2
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
   8357c:	e0bffc0f 	ldh	r2,-16(fp)
   83580:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   83584:	180b883a 	mov	r5,r3
   83588:	100d883a 	mov	r6,r2
   8358c:	008a2e80 	call	8a2e8 <memcpy>
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
   83590:	e0bff617 	ldw	r2,-40(fp)
   83594:	10800044 	addi	r2,r2,1
   83598:	e0bff615 	stw	r2,-40(fp)
   8359c:	e0bff717 	ldw	r2,-36(fp)
   835a0:	10800044 	addi	r2,r2,1
   835a4:	e0bff715 	stw	r2,-36(fp)
   835a8:	e0bffc0f 	ldh	r2,-16(fp)
   835ac:	e0fff817 	ldw	r3,-32(fp)
   835b0:	1885883a 	add	r2,r3,r2
   835b4:	e0bff815 	stw	r2,-32(fp)
   835b8:	e0bffe0f 	ldh	r2,-8(fp)
   835bc:	e0fff917 	ldw	r3,-28(fp)
   835c0:	1885883a 	add	r2,r3,r2
   835c4:	e0bff915 	stw	r2,-28(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
   835c8:	e0bffd0f 	ldh	r2,-12(fp)
   835cc:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
   835d0:	e0bff617 	ldw	r2,-40(fp)
   835d4:	18bfe10e 	bge	r3,r2,8355c <__alt_data_end+0xfffcb2ec>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
   835d8:	e037883a 	mov	sp,fp
   835dc:	dfc00117 	ldw	ra,4(sp)
   835e0:	df000017 	ldw	fp,0(sp)
   835e4:	dec00204 	addi	sp,sp,8
   835e8:	f800283a 	ret

000835ec <CropImage16>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
   835ec:	defff004 	addi	sp,sp,-64
   835f0:	dfc00f15 	stw	ra,60(sp)
   835f4:	df000e15 	stw	fp,56(sp)
   835f8:	df000e04 	addi	fp,sp,56
   835fc:	e13ff615 	stw	r4,-40(fp)
   83600:	e17ff715 	stw	r5,-36(fp)
   83604:	3013883a 	mov	r9,r6
   83608:	3811883a 	mov	r8,r7
   8360c:	e1c00217 	ldw	r7,8(fp)
   83610:	e1800317 	ldw	r6,12(fp)
   83614:	e1400417 	ldw	r5,16(fp)
   83618:	e1000517 	ldw	r4,20(fp)
   8361c:	e0c00617 	ldw	r3,24(fp)
   83620:	e0800717 	ldw	r2,28(fp)
   83624:	e27ff80d 	sth	r9,-32(fp)
   83628:	e23ff90d 	sth	r8,-28(fp)
   8362c:	e1fffa0d 	sth	r7,-24(fp)
   83630:	e1bffb0d 	sth	r6,-20(fp)
   83634:	e17ffc0d 	sth	r5,-16(fp)
   83638:	e13ffd0d 	sth	r4,-12(fp)
   8363c:	e0fffe0d 	sth	r3,-8(fp)
   83640:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
   83644:	e0fff80f 	ldh	r3,-32(fp)
   83648:	e0bffc0f 	ldh	r2,-16(fp)
   8364c:	1885383a 	mul	r2,r3,r2
   83650:	e0bff415 	stw	r2,-48(fp)
  int y_dst_offset = 0;
   83654:	e03ff515 	stw	zero,-44(fp)
  
  for( y_src = crop_top, y_dst = 0; 
   83658:	e0bffc0f 	ldh	r2,-16(fp)
   8365c:	e0bff215 	stw	r2,-56(fp)
   83660:	e03ff315 	stw	zero,-52(fp)
   83664:	00002106 	br	836ec <CropImage16+0x100>
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   83668:	e0bff517 	ldw	r2,-44(fp)
   8366c:	1085883a 	add	r2,r2,r2
   83670:	e0fff717 	ldw	r3,-36(fp)
   83674:	1889883a 	add	r4,r3,r2
           ( source_buffer + y_src_offset + crop_left ), 
   83678:	e0fffa0f 	ldh	r3,-24(fp)
   8367c:	e0bff417 	ldw	r2,-48(fp)
   83680:	1885883a 	add	r2,r3,r2
   83684:	1085883a 	add	r2,r2,r2
   83688:	e0fff617 	ldw	r3,-40(fp)
   8368c:	1887883a 	add	r3,r3,r2
           ((source_width - crop_left - crop_right) << 1));
   83690:	e17ff80f 	ldh	r5,-32(fp)
   83694:	e0bffa0f 	ldh	r2,-24(fp)
   83698:	288bc83a 	sub	r5,r5,r2
   8369c:	e0bffb0f 	ldh	r2,-20(fp)
   836a0:	2885c83a 	sub	r2,r5,r2
   836a4:	1085883a 	add	r2,r2,r2
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   836a8:	180b883a 	mov	r5,r3
   836ac:	100d883a 	mov	r6,r2
   836b0:	008a2e80 	call	8a2e8 <memcpy>
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
   836b4:	e0bff217 	ldw	r2,-56(fp)
   836b8:	10800044 	addi	r2,r2,1
   836bc:	e0bff215 	stw	r2,-56(fp)
   836c0:	e0bff317 	ldw	r2,-52(fp)
   836c4:	10800044 	addi	r2,r2,1
   836c8:	e0bff315 	stw	r2,-52(fp)
   836cc:	e0bff80f 	ldh	r2,-32(fp)
   836d0:	e0fff417 	ldw	r3,-48(fp)
   836d4:	1885883a 	add	r2,r3,r2
   836d8:	e0bff415 	stw	r2,-48(fp)
   836dc:	e0bffe0f 	ldh	r2,-8(fp)
   836e0:	e0fff517 	ldw	r3,-44(fp)
   836e4:	1885883a 	add	r2,r3,r2
   836e8:	e0bff515 	stw	r2,-44(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
   836ec:	e0fff90f 	ldh	r3,-28(fp)
   836f0:	e0bffd0f 	ldh	r2,-12(fp)
   836f4:	1885c83a 	sub	r2,r3,r2
   836f8:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
   836fc:	e0bff217 	ldw	r2,-56(fp)
   83700:	18bfd90e 	bge	r3,r2,83668 <__alt_data_end+0xfffcb3f8>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
   83704:	e037883a 	mov	sp,fp
   83708:	dfc00117 	ldw	ra,4(sp)
   8370c:	df000017 	ldw	fp,0(sp)
   83710:	dec00204 	addi	sp,sp,8
   83714:	f800283a 	ret

00083718 <vid_print_string_alpha>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
   83718:	defff404 	addi	sp,sp,-48
   8371c:	dfc00b15 	stw	ra,44(sp)
   83720:	df000a15 	stw	fp,40(sp)
   83724:	df000a04 	addi	fp,sp,40
   83728:	e13ffc15 	stw	r4,-16(fp)
   8372c:	e17ffd15 	stw	r5,-12(fp)
   83730:	e1bffe15 	stw	r6,-8(fp)
   83734:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
   83738:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
   8373c:	e0bffc17 	ldw	r2,-16(fp)
   83740:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
   83744:	00007d06 	br	8393c <vid_print_string_alpha+0x224>
    //Handle newline char here.
    if (string[i] == '\n') {
   83748:	e0bff917 	ldw	r2,-28(fp)
   8374c:	e0c00417 	ldw	r3,16(fp)
   83750:	1885883a 	add	r2,r3,r2
   83754:	10800003 	ldbu	r2,0(r2)
   83758:	10803fcc 	andi	r2,r2,255
   8375c:	1080201c 	xori	r2,r2,128
   83760:	10bfe004 	addi	r2,r2,-128
   83764:	10800298 	cmpnei	r2,r2,10
   83768:	10000c1e 	bne	r2,zero,8379c <vid_print_string_alpha+0x84>
      horiz_offset = original_horiz_offset;
   8376c:	e0bffb17 	ldw	r2,-20(fp)
   83770:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
   83774:	e0800217 	ldw	r2,8(fp)
   83778:	1082d804 	addi	r2,r2,2912
   8377c:	10c00517 	ldw	r3,20(r2)
   83780:	e0bffd17 	ldw	r2,-12(fp)
   83784:	1885883a 	add	r2,r3,r2
   83788:	e0bffd15 	stw	r2,-12(fp)
      i++;
   8378c:	e0bff917 	ldw	r2,-28(fp)
   83790:	10800044 	addi	r2,r2,1
   83794:	e0bff915 	stw	r2,-28(fp)
      continue;
   83798:	00006806 	br	8393c <vid_print_string_alpha+0x224>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
   8379c:	e0bff917 	ldw	r2,-28(fp)
   837a0:	e0c00417 	ldw	r3,16(fp)
   837a4:	1885883a 	add	r2,r3,r2
   837a8:	10800003 	ldbu	r2,0(r2)
   837ac:	10803fcc 	andi	r2,r2,255
   837b0:	1080201c 	xori	r2,r2,128
   837b4:	10bfe004 	addi	r2,r2,-128
   837b8:	10800818 	cmpnei	r2,r2,32
   837bc:	1000151e 	bne	r2,zero,83814 <vid_print_string_alpha+0xfc>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
   837c0:	e0bfff17 	ldw	r2,-4(fp)
   837c4:	10bfffe0 	cmpeqi	r2,r2,-1
   837c8:	10000b1e 	bne	r2,zero,837f8 <vid_print_string_alpha+0xe0>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
   837cc:	e0bfff17 	ldw	r2,-4(fp)
   837d0:	d8800015 	stw	r2,0(sp)
   837d4:	e0800217 	ldw	r2,8(fp)
   837d8:	d8800115 	stw	r2,4(sp)
   837dc:	e0800317 	ldw	r2,12(fp)
   837e0:	d8800215 	stw	r2,8(sp)
   837e4:	e13ffc17 	ldw	r4,-16(fp)
   837e8:	e17ffd17 	ldw	r5,-12(fp)
   837ec:	e1bfff17 	ldw	r6,-4(fp)
   837f0:	01c00b44 	movi	r7,45
   837f4:	0083e800 	call	83e80 <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
   837f8:	e0800217 	ldw	r2,8(fp)
   837fc:	10806004 	addi	r2,r2,384
   83800:	10c00417 	ldw	r3,16(r2)
   83804:	e0bffc17 	ldw	r2,-16(fp)
   83808:	1885883a 	add	r2,r3,r2
   8380c:	e0bffc15 	stw	r2,-16(fp)
   83810:	00004706 	br	83930 <vid_print_string_alpha+0x218>
    }
    else if(string[i] == '\t')  // this is a tab
   83814:	e0bff917 	ldw	r2,-28(fp)
   83818:	e0c00417 	ldw	r3,16(fp)
   8381c:	1885883a 	add	r2,r3,r2
   83820:	10800003 	ldbu	r2,0(r2)
   83824:	10803fcc 	andi	r2,r2,255
   83828:	1080201c 	xori	r2,r2,128
   8382c:	10bfe004 	addi	r2,r2,-128
   83830:	10800258 	cmpnei	r2,r2,9
   83834:	10001d1e 	bne	r2,zero,838ac <vid_print_string_alpha+0x194>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
   83838:	e03ffa15 	stw	zero,-24(fp)
   8383c:	00001706 	br	8389c <vid_print_string_alpha+0x184>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
   83840:	e0bfff17 	ldw	r2,-4(fp)
   83844:	10bfffe0 	cmpeqi	r2,r2,-1
   83848:	10000b1e 	bne	r2,zero,83878 <vid_print_string_alpha+0x160>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
   8384c:	e0bfff17 	ldw	r2,-4(fp)
   83850:	d8800015 	stw	r2,0(sp)
   83854:	e0800217 	ldw	r2,8(fp)
   83858:	d8800115 	stw	r2,4(sp)
   8385c:	e0800317 	ldw	r2,12(fp)
   83860:	d8800215 	stw	r2,8(sp)
   83864:	e13ffc17 	ldw	r4,-16(fp)
   83868:	e17ffd17 	ldw	r5,-12(fp)
   8386c:	e1bfff17 	ldw	r6,-4(fp)
   83870:	01c00b44 	movi	r7,45
   83874:	0083e800 	call	83e80 <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
   83878:	e0800217 	ldw	r2,8(fp)
   8387c:	10806004 	addi	r2,r2,384
   83880:	10c00417 	ldw	r3,16(r2)
   83884:	e0bffc17 	ldw	r2,-16(fp)
   83888:	1885883a 	add	r2,r3,r2
   8388c:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
   83890:	e0bffa17 	ldw	r2,-24(fp)
   83894:	10800044 	addi	r2,r2,1
   83898:	e0bffa15 	stw	r2,-24(fp)
   8389c:	e0bffa17 	ldw	r2,-24(fp)
   838a0:	10800090 	cmplti	r2,r2,2
   838a4:	103fe61e 	bne	r2,zero,83840 <__alt_data_end+0xfffcb5d0>
   838a8:	00002106 	br	83930 <vid_print_string_alpha+0x218>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
   838ac:	e0bff917 	ldw	r2,-28(fp)
   838b0:	e0c00417 	ldw	r3,16(fp)
   838b4:	1885883a 	add	r2,r3,r2
   838b8:	10800003 	ldbu	r2,0(r2)
   838bc:	10803fcc 	andi	r2,r2,255
   838c0:	1080201c 	xori	r2,r2,128
   838c4:	10bfe004 	addi	r2,r2,-128
   838c8:	e0ffff17 	ldw	r3,-4(fp)
   838cc:	d8c00015 	stw	r3,0(sp)
   838d0:	e0c00217 	ldw	r3,8(fp)
   838d4:	d8c00115 	stw	r3,4(sp)
   838d8:	e0c00317 	ldw	r3,12(fp)
   838dc:	d8c00215 	stw	r3,8(sp)
   838e0:	e13ffc17 	ldw	r4,-16(fp)
   838e4:	e17ffd17 	ldw	r5,-12(fp)
   838e8:	e1bffe17 	ldw	r6,-8(fp)
   838ec:	100f883a 	mov	r7,r2
   838f0:	0083e800 	call	83e80 <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
   838f4:	e0bff917 	ldw	r2,-28(fp)
   838f8:	e0c00417 	ldw	r3,16(fp)
   838fc:	1885883a 	add	r2,r3,r2
   83900:	10800003 	ldbu	r2,0(r2)
   83904:	10803fcc 	andi	r2,r2,255
   83908:	1080201c 	xori	r2,r2,128
   8390c:	10bfe004 	addi	r2,r2,-128
   83910:	1004917a 	slli	r2,r2,5
   83914:	10bef804 	addi	r2,r2,-1056
   83918:	e0c00217 	ldw	r3,8(fp)
   8391c:	1885883a 	add	r2,r3,r2
   83920:	10c00417 	ldw	r3,16(r2)
   83924:	e0bffc17 	ldw	r2,-16(fp)
   83928:	1885883a 	add	r2,r3,r2
   8392c:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
   83930:	e0bff917 	ldw	r2,-28(fp)
   83934:	10800044 	addi	r2,r2,1
   83938:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
   8393c:	e0bff917 	ldw	r2,-28(fp)
   83940:	e0c00417 	ldw	r3,16(fp)
   83944:	1885883a 	add	r2,r3,r2
   83948:	10800003 	ldbu	r2,0(r2)
   8394c:	10803fcc 	andi	r2,r2,255
   83950:	1080201c 	xori	r2,r2,128
   83954:	10bfe004 	addi	r2,r2,-128
   83958:	103f7b1e 	bne	r2,zero,83748 <__alt_data_end+0xfffcb4d8>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
   8395c:	0005883a 	mov	r2,zero
}
   83960:	e037883a 	mov	sp,fp
   83964:	dfc00117 	ldw	ra,4(sp)
   83968:	df000017 	ldw	fp,0(sp)
   8396c:	dec00204 	addi	sp,sp,8
   83970:	f800283a 	ret

00083974 <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

__inline__ int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
   83974:	defff904 	addi	sp,sp,-28
   83978:	df000615 	stw	fp,24(sp)
   8397c:	df000604 	addi	fp,sp,24
   83980:	e13ffc15 	stw	r4,-16(fp)
   83984:	e17ffd15 	stw	r5,-12(fp)
   83988:	e1bffe15 	stw	r6,-8(fp)
   8398c:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
   83990:	e03ffb0d 	sth	zero,-20(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
   83994:	e0bffc17 	ldw	r2,-16(fp)
   83998:	10800418 	cmpnei	r2,r2,16
   8399c:	1000221e 	bne	r2,zero,83a28 <seperate_color_channels+0xb4>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
   839a0:	e0bffd17 	ldw	r2,-12(fp)
   839a4:	10c00044 	addi	r3,r2,1
   839a8:	e0fffd15 	stw	r3,-12(fp)
   839ac:	10800003 	ldbu	r2,0(r2)
   839b0:	10803fcc 	andi	r2,r2,255
   839b4:	e0bffb0d 	sth	r2,-20(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
   839b8:	e0bffd17 	ldw	r2,-12(fp)
   839bc:	10800003 	ldbu	r2,0(r2)
   839c0:	10803fcc 	andi	r2,r2,255
   839c4:	1004923a 	slli	r2,r2,8
   839c8:	1007883a 	mov	r3,r2
   839cc:	e0bffb0b 	ldhu	r2,-20(fp)
   839d0:	1885883a 	add	r2,r3,r2
   839d4:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F; 
   839d8:	e0bffb0b 	ldhu	r2,-20(fp)
   839dc:	108007cc 	andi	r2,r2,31
   839e0:	1007883a 	mov	r3,r2
   839e4:	e0800117 	ldw	r2,4(fp)
   839e8:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
   839ec:	e0bffb0b 	ldhu	r2,-20(fp)
   839f0:	1004d17a 	srli	r2,r2,5
   839f4:	10800fcc 	andi	r2,r2,63
   839f8:	1007883a 	mov	r3,r2
   839fc:	e0bfff17 	ldw	r2,-4(fp)
   83a00:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
   83a04:	e0bffb0b 	ldhu	r2,-20(fp)
   83a08:	1004d2fa 	srli	r2,r2,11
   83a0c:	108007cc 	andi	r2,r2,31
   83a10:	1007883a 	mov	r3,r2
   83a14:	e0bffe17 	ldw	r2,-8(fp)
   83a18:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   83a1c:	00800044 	movi	r2,1
   83a20:	e0bffa15 	stw	r2,-24(fp)
   83a24:	00002006 	br	83aa8 <seperate_color_channels+0x134>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
   83a28:	e0bffc17 	ldw	r2,-16(fp)
   83a2c:	10800620 	cmpeqi	r2,r2,24
   83a30:	1000031e 	bne	r2,zero,83a40 <seperate_color_channels+0xcc>
   83a34:	e0bffc17 	ldw	r2,-16(fp)
   83a38:	10800818 	cmpnei	r2,r2,32
   83a3c:	1000131e 	bne	r2,zero,83a8c <seperate_color_channels+0x118>
  {
    *blue = *color++;
   83a40:	e0bffd17 	ldw	r2,-12(fp)
   83a44:	10c00044 	addi	r3,r2,1
   83a48:	e0fffd15 	stw	r3,-12(fp)
   83a4c:	10c00003 	ldbu	r3,0(r2)
   83a50:	e0800117 	ldw	r2,4(fp)
   83a54:	10c00005 	stb	r3,0(r2)
    *green = *color++;
   83a58:	e0bffd17 	ldw	r2,-12(fp)
   83a5c:	10c00044 	addi	r3,r2,1
   83a60:	e0fffd15 	stw	r3,-12(fp)
   83a64:	10c00003 	ldbu	r3,0(r2)
   83a68:	e0bfff17 	ldw	r2,-4(fp)
   83a6c:	10c00005 	stb	r3,0(r2)
    *red = *color;   
   83a70:	e0bffd17 	ldw	r2,-12(fp)
   83a74:	10c00003 	ldbu	r3,0(r2)
   83a78:	e0bffe17 	ldw	r2,-8(fp)
   83a7c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   83a80:	00800044 	movi	r2,1
   83a84:	e0bffa15 	stw	r2,-24(fp)
   83a88:	00000706 	br	83aa8 <seperate_color_channels+0x134>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
   83a8c:	e0bffe17 	ldw	r2,-8(fp)
   83a90:	10000005 	stb	zero,0(r2)
    *green = 0;
   83a94:	e0bfff17 	ldw	r2,-4(fp)
   83a98:	10000005 	stb	zero,0(r2)
    *blue = 0;    
   83a9c:	e0800117 	ldw	r2,4(fp)
   83aa0:	10000005 	stb	zero,0(r2)
    return_value = 0;    
   83aa4:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
   83aa8:	e0bffa17 	ldw	r2,-24(fp)
}
   83aac:	e037883a 	mov	sp,fp
   83ab0:	df000017 	ldw	fp,0(sp)
   83ab4:	dec00104 	addi	sp,sp,4
   83ab8:	f800283a 	ret

00083abc <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

__inline__ int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
   83abc:	defff904 	addi	sp,sp,-28
   83ac0:	df000615 	stw	fp,24(sp)
   83ac4:	df000604 	addi	fp,sp,24
   83ac8:	e13ffc15 	stw	r4,-16(fp)
   83acc:	2809883a 	mov	r4,r5
   83ad0:	3007883a 	mov	r3,r6
   83ad4:	3805883a 	mov	r2,r7
   83ad8:	e13ffd05 	stb	r4,-12(fp)
   83adc:	e0fffe05 	stb	r3,-8(fp)
   83ae0:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
   83ae4:	e0bffc17 	ldw	r2,-16(fp)
   83ae8:	10800418 	cmpnei	r2,r2,16
   83aec:	1000191e 	bne	r2,zero,83b54 <merge_color_channels+0x98>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
   83af0:	e0bfff03 	ldbu	r2,-4(fp)
   83af4:	108007cc 	andi	r2,r2,31
   83af8:	1007883a 	mov	r3,r2
   83afc:	e0bffe03 	ldbu	r2,-8(fp)
   83b00:	10800fcc 	andi	r2,r2,63
   83b04:	1004917a 	slli	r2,r2,5
   83b08:	1884b03a 	or	r2,r3,r2
   83b0c:	1007883a 	mov	r3,r2
   83b10:	e0bffd03 	ldbu	r2,-12(fp)
   83b14:	100492fa 	slli	r2,r2,11
   83b18:	1884b03a 	or	r2,r3,r2
   83b1c:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
   83b20:	e0800117 	ldw	r2,4(fp)
   83b24:	10c00044 	addi	r3,r2,1
   83b28:	e0c00115 	stw	r3,4(fp)
   83b2c:	e0fffb0b 	ldhu	r3,-20(fp)
   83b30:	10c00005 	stb	r3,0(r2)
    *color = (temp_color >> 8) & 0xFF;
   83b34:	e0bffb0b 	ldhu	r2,-20(fp)
   83b38:	1004d23a 	srli	r2,r2,8
   83b3c:	1007883a 	mov	r3,r2
   83b40:	e0800117 	ldw	r2,4(fp)
   83b44:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   83b48:	00800044 	movi	r2,1
   83b4c:	e0bffa15 	stw	r2,-24(fp)
   83b50:	00002106 	br	83bd8 <merge_color_channels+0x11c>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
   83b54:	e0bffc17 	ldw	r2,-16(fp)
   83b58:	10800620 	cmpeqi	r2,r2,24
   83b5c:	1000031e 	bne	r2,zero,83b6c <merge_color_channels+0xb0>
   83b60:	e0bffc17 	ldw	r2,-16(fp)
   83b64:	10800818 	cmpnei	r2,r2,32
   83b68:	1000101e 	bne	r2,zero,83bac <merge_color_channels+0xf0>
  {
    *color++ = blue;
   83b6c:	e0800117 	ldw	r2,4(fp)
   83b70:	10c00044 	addi	r3,r2,1
   83b74:	e0c00115 	stw	r3,4(fp)
   83b78:	e0ffff03 	ldbu	r3,-4(fp)
   83b7c:	10c00005 	stb	r3,0(r2)
    *color++ = green;
   83b80:	e0800117 	ldw	r2,4(fp)
   83b84:	10c00044 	addi	r3,r2,1
   83b88:	e0c00115 	stw	r3,4(fp)
   83b8c:	e0fffe03 	ldbu	r3,-8(fp)
   83b90:	10c00005 	stb	r3,0(r2)
    *color = red;
   83b94:	e0800117 	ldw	r2,4(fp)
   83b98:	e0fffd03 	ldbu	r3,-12(fp)
   83b9c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   83ba0:	00800044 	movi	r2,1
   83ba4:	e0bffa15 	stw	r2,-24(fp)
   83ba8:	00000b06 	br	83bd8 <merge_color_channels+0x11c>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
   83bac:	e0800117 	ldw	r2,4(fp)
   83bb0:	10c00044 	addi	r3,r2,1
   83bb4:	e0c00115 	stw	r3,4(fp)
   83bb8:	10000005 	stb	zero,0(r2)
    *color++ = 0;
   83bbc:	e0800117 	ldw	r2,4(fp)
   83bc0:	10c00044 	addi	r3,r2,1
   83bc4:	e0c00115 	stw	r3,4(fp)
   83bc8:	10000005 	stb	zero,0(r2)
    *color = 0;
   83bcc:	e0800117 	ldw	r2,4(fp)
   83bd0:	10000005 	stb	zero,0(r2)
    return_value = 0;    
   83bd4:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;  
   83bd8:	e0bffa17 	ldw	r2,-24(fp)
}
   83bdc:	e037883a 	mov	sp,fp
   83be0:	df000017 	ldw	fp,0(sp)
   83be4:	dec00104 	addi	sp,sp,4
   83be8:	f800283a 	ret

00083bec <read_from_frame>:
*           needed to calculate the new one.
*
******************************************************************/

__inline__ int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
   83bec:	defffa04 	addi	sp,sp,-24
   83bf0:	dfc00515 	stw	ra,20(sp)
   83bf4:	df000415 	stw	fp,16(sp)
   83bf8:	df000404 	addi	fp,sp,16
   83bfc:	e13ffc15 	stw	r4,-16(fp)
   83c00:	e17ffd15 	stw	r5,-12(fp)
   83c04:	e1bffe15 	stw	r6,-8(fp)
   83c08:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("read_from_frame is not implemented!\r\n");
   83c0c:	010002b4 	movhi	r4,10
   83c10:	211f0004 	addi	r4,r4,31744
   83c14:	008a4380 	call	8a438 <puts>
    return_value = 0; 
  }

  return return_value;
#endif
}
   83c18:	e037883a 	mov	sp,fp
   83c1c:	dfc00117 	ldw	ra,4(sp)
   83c20:	df000017 	ldw	fp,0(sp)
   83c24:	dec00204 	addi	sp,sp,8
   83c28:	f800283a 	ret

00083c2c <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

__inline__ int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
   83c2c:	defff304 	addi	sp,sp,-52
   83c30:	dfc00c15 	stw	ra,48(sp)
   83c34:	df000b15 	stw	fp,44(sp)
   83c38:	df000b04 	addi	fp,sp,44
   83c3c:	e13ffc15 	stw	r4,-16(fp)
   83c40:	e17ffd15 	stw	r5,-12(fp)
   83c44:	e1bffe15 	stw	r6,-8(fp)
   83c48:	3805883a 	mov	r2,r7
   83c4c:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
   83c50:	e0bffe17 	ldw	r2,-8(fp)
   83c54:	10bfffd8 	cmpnei	r2,r2,-1
   83c58:	10000c1e 	bne	r2,zero,83c8c <alpha_blending+0x60>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
   83c5c:	e0fffb04 	addi	r3,fp,-20
   83c60:	e0bffb44 	addi	r2,fp,-19
   83c64:	e13ffb84 	addi	r4,fp,-18
   83c68:	d9000015 	stw	r4,0(sp)
   83c6c:	e1000517 	ldw	r4,20(fp)
   83c70:	d9000115 	stw	r4,4(sp)
   83c74:	e13ffc17 	ldw	r4,-16(fp)
   83c78:	e17ffd17 	ldw	r5,-12(fp)
   83c7c:	180d883a 	mov	r6,r3
   83c80:	100f883a 	mov	r7,r2
   83c84:	0083bec0 	call	83bec <read_from_frame>
   83c88:	00000a06 	br	83cb4 <alpha_blending+0x88>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
   83c8c:	e0800517 	ldw	r2,20(fp)
   83c90:	11000017 	ldw	r4,0(r2)
   83c94:	e17ffe04 	addi	r5,fp,-8
   83c98:	e0fffb04 	addi	r3,fp,-20
   83c9c:	e0bffb44 	addi	r2,fp,-19
   83ca0:	e1bffb84 	addi	r6,fp,-18
   83ca4:	d9800015 	stw	r6,0(sp)
   83ca8:	180d883a 	mov	r6,r3
   83cac:	100f883a 	mov	r7,r2
   83cb0:	00839740 	call	83974 <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
   83cb4:	e0800217 	ldw	r2,8(fp)
   83cb8:	10800003 	ldbu	r2,0(r2)
   83cbc:	10c03fcc 	andi	r3,r2,255
   83cc0:	e0bfff03 	ldbu	r2,-4(fp)
   83cc4:	1887383a 	mul	r3,r3,r2
   83cc8:	e0bffb03 	ldbu	r2,-20(fp)
   83ccc:	11003fcc 	andi	r4,r2,255
   83cd0:	e0bfff03 	ldbu	r2,-4(fp)
   83cd4:	01403fc4 	movi	r5,255
   83cd8:	2885c83a 	sub	r2,r5,r2
   83cdc:	2085383a 	mul	r2,r4,r2
   83ce0:	1885883a 	add	r2,r3,r2
   83ce4:	1009883a 	mov	r4,r2
   83ce8:	01403fc4 	movi	r5,255
   83cec:	00877e00 	call	877e0 <__divsi3>
   83cf0:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
   83cf4:	e0800317 	ldw	r2,12(fp)
   83cf8:	10800003 	ldbu	r2,0(r2)
   83cfc:	10c03fcc 	andi	r3,r2,255
   83d00:	e0bfff03 	ldbu	r2,-4(fp)
   83d04:	1887383a 	mul	r3,r3,r2
   83d08:	e0bffb43 	ldbu	r2,-19(fp)
   83d0c:	11003fcc 	andi	r4,r2,255
   83d10:	e0bfff03 	ldbu	r2,-4(fp)
   83d14:	01403fc4 	movi	r5,255
   83d18:	2885c83a 	sub	r2,r5,r2
   83d1c:	2085383a 	mul	r2,r4,r2
   83d20:	1885883a 	add	r2,r3,r2
   83d24:	1009883a 	mov	r4,r2
   83d28:	01403fc4 	movi	r5,255
   83d2c:	00877e00 	call	877e0 <__divsi3>
   83d30:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
   83d34:	e0800417 	ldw	r2,16(fp)
   83d38:	10800003 	ldbu	r2,0(r2)
   83d3c:	10c03fcc 	andi	r3,r2,255
   83d40:	e0bfff03 	ldbu	r2,-4(fp)
   83d44:	1887383a 	mul	r3,r3,r2
   83d48:	e0bffb83 	ldbu	r2,-18(fp)
   83d4c:	11003fcc 	andi	r4,r2,255
   83d50:	e0bfff03 	ldbu	r2,-4(fp)
   83d54:	01403fc4 	movi	r5,255
   83d58:	2885c83a 	sub	r2,r5,r2
   83d5c:	2085383a 	mul	r2,r4,r2
   83d60:	1885883a 	add	r2,r3,r2
   83d64:	1009883a 	mov	r4,r2
   83d68:	01403fc4 	movi	r5,255
   83d6c:	00877e00 	call	877e0 <__divsi3>
   83d70:	e0bffa15 	stw	r2,-24(fp)
  

  if(display->color_depth == 16)
   83d74:	e0800517 	ldw	r2,20(fp)
   83d78:	10800017 	ldw	r2,0(r2)
   83d7c:	10800418 	cmpnei	r2,r2,16
   83d80:	1000181e 	bne	r2,zero,83de4 <alpha_blending+0x1b8>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
   83d84:	e0bff817 	ldw	r2,-32(fp)
   83d88:	10c00830 	cmpltui	r3,r2,32
   83d8c:	1800011e 	bne	r3,zero,83d94 <alpha_blending+0x168>
   83d90:	008007c4 	movi	r2,31
   83d94:	1007883a 	mov	r3,r2
   83d98:	e0800217 	ldw	r2,8(fp)
   83d9c:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
   83da0:	e0bff917 	ldw	r2,-28(fp)
   83da4:	10c01030 	cmpltui	r3,r2,64
   83da8:	1800011e 	bne	r3,zero,83db0 <alpha_blending+0x184>
   83dac:	00800fc4 	movi	r2,63
   83db0:	1007883a 	mov	r3,r2
   83db4:	e0800317 	ldw	r2,12(fp)
   83db8:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
   83dbc:	e0bffa17 	ldw	r2,-24(fp)
   83dc0:	10c00830 	cmpltui	r3,r2,32
   83dc4:	1800011e 	bne	r3,zero,83dcc <alpha_blending+0x1a0>
   83dc8:	008007c4 	movi	r2,31
   83dcc:	1007883a 	mov	r3,r2
   83dd0:	e0800417 	ldw	r2,16(fp)
   83dd4:	10c00005 	stb	r3,0(r2)
    return_value = 1;        
   83dd8:	00800044 	movi	r2,1
   83ddc:	e0bff715 	stw	r2,-36(fp)
   83de0:	00002106 	br	83e68 <alpha_blending+0x23c>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
   83de4:	e0800517 	ldw	r2,20(fp)
   83de8:	10800017 	ldw	r2,0(r2)
   83dec:	10800620 	cmpeqi	r2,r2,24
   83df0:	1000041e 	bne	r2,zero,83e04 <alpha_blending+0x1d8>
   83df4:	e0800517 	ldw	r2,20(fp)
   83df8:	10800017 	ldw	r2,0(r2)
   83dfc:	10800818 	cmpnei	r2,r2,32
   83e00:	1000181e 	bne	r2,zero,83e64 <alpha_blending+0x238>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
   83e04:	e0bff817 	ldw	r2,-32(fp)
   83e08:	10c04030 	cmpltui	r3,r2,256
   83e0c:	1800011e 	bne	r3,zero,83e14 <alpha_blending+0x1e8>
   83e10:	00803fc4 	movi	r2,255
   83e14:	1007883a 	mov	r3,r2
   83e18:	e0800217 	ldw	r2,8(fp)
   83e1c:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
   83e20:	e0bff917 	ldw	r2,-28(fp)
   83e24:	10c04030 	cmpltui	r3,r2,256
   83e28:	1800011e 	bne	r3,zero,83e30 <alpha_blending+0x204>
   83e2c:	00803fc4 	movi	r2,255
   83e30:	1007883a 	mov	r3,r2
   83e34:	e0800317 	ldw	r2,12(fp)
   83e38:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
   83e3c:	e0bffa17 	ldw	r2,-24(fp)
   83e40:	10c04030 	cmpltui	r3,r2,256
   83e44:	1800011e 	bne	r3,zero,83e4c <alpha_blending+0x220>
   83e48:	00803fc4 	movi	r2,255
   83e4c:	1007883a 	mov	r3,r2
   83e50:	e0800417 	ldw	r2,16(fp)
   83e54:	10c00005 	stb	r3,0(r2)
    return_value = 1;            
   83e58:	00800044 	movi	r2,1
   83e5c:	e0bff715 	stw	r2,-36(fp)
   83e60:	00000106 	br	83e68 <alpha_blending+0x23c>
  }
  else
  {
    return_value = 0;     
   83e64:	e03ff715 	stw	zero,-36(fp)
  }  
 
  return return_value;
   83e68:	e0bff717 	ldw	r2,-36(fp)
} 
   83e6c:	e037883a 	mov	sp,fp
   83e70:	dfc00117 	ldw	ra,4(sp)
   83e74:	df000017 	ldw	fp,0(sp)
   83e78:	dec00204 	addi	sp,sp,8
   83e7c:	f800283a 	ret

00083e80 <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
   83e80:	defff004 	addi	sp,sp,-64
   83e84:	dfc00f15 	stw	ra,60(sp)
   83e88:	df000e15 	stw	fp,56(sp)
   83e8c:	df000e04 	addi	fp,sp,56
   83e90:	e13ffc15 	stw	r4,-16(fp)
   83e94:	e17ffd15 	stw	r5,-12(fp)
   83e98:	e1bffe15 	stw	r6,-8(fp)
   83e9c:	3805883a 	mov	r2,r7
   83ea0:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
   83ea4:	e0bfff07 	ldb	r2,-4(fp)
   83ea8:	1004917a 	slli	r2,r2,5
   83eac:	10bef804 	addi	r2,r2,-1056
   83eb0:	e0c00317 	ldw	r3,12(fp)
   83eb4:	1885883a 	add	r2,r3,r2
   83eb8:	10800617 	ldw	r2,24(r2)
   83ebc:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
   83ec0:	e0800417 	ldw	r2,16(fp)
   83ec4:	11000017 	ldw	r4,0(r2)
   83ec8:	e17ffe04 	addi	r5,fp,-8
   83ecc:	e0fff904 	addi	r3,fp,-28
   83ed0:	e0bff984 	addi	r2,fp,-26
   83ed4:	e1bff944 	addi	r6,fp,-27
   83ed8:	d9800015 	stw	r6,0(sp)
   83edc:	180d883a 	mov	r6,r3
   83ee0:	100f883a 	mov	r7,r2
   83ee4:	00839740 	call	83974 <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
   83ee8:	e03ff615 	stw	zero,-40(fp)
   83eec:	00004606 	br	84008 <vid_print_char_alpha+0x188>
    for (j = 0; j < font[character-33].bounds_width; j++) {
   83ef0:	e03ff715 	stw	zero,-36(fp)
   83ef4:	00003906 	br	83fdc <vid_print_char_alpha+0x15c>
      red = original_red;
   83ef8:	e0bff903 	ldbu	r2,-28(fp)
   83efc:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
   83f00:	e0bff983 	ldbu	r2,-26(fp)
   83f04:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
   83f08:	e0bff943 	ldbu	r2,-27(fp)
   83f0c:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
   83f10:	e0fffc17 	ldw	r3,-16(fp)
   83f14:	e0bff717 	ldw	r2,-36(fp)
   83f18:	1889883a 	add	r4,r3,r2
   83f1c:	e0fffd17 	ldw	r3,-12(fp)
   83f20:	e0bff617 	ldw	r2,-40(fp)
   83f24:	1887883a 	add	r3,r3,r2
   83f28:	e0bff817 	ldw	r2,-32(fp)
   83f2c:	10800003 	ldbu	r2,0(r2)
   83f30:	10803fcc 	andi	r2,r2,255
   83f34:	e17ff9c4 	addi	r5,fp,-25
   83f38:	d9400015 	stw	r5,0(sp)
   83f3c:	e17ffa04 	addi	r5,fp,-24
   83f40:	d9400115 	stw	r5,4(sp)
   83f44:	e17ffa44 	addi	r5,fp,-23
   83f48:	d9400215 	stw	r5,8(sp)
   83f4c:	e1400417 	ldw	r5,16(fp)
   83f50:	d9400315 	stw	r5,12(sp)
   83f54:	180b883a 	mov	r5,r3
   83f58:	e1800217 	ldw	r6,8(fp)
   83f5c:	100f883a 	mov	r7,r2
   83f60:	0083c2c0 	call	83c2c <alpha_blending>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
   83f64:	e0800417 	ldw	r2,16(fp)
   83f68:	11000017 	ldw	r4,0(r2)
   83f6c:	e0bff9c3 	ldbu	r2,-25(fp)
   83f70:	11403fcc 	andi	r5,r2,255
   83f74:	e0bffa03 	ldbu	r2,-24(fp)
   83f78:	10c03fcc 	andi	r3,r2,255
   83f7c:	e0bffa43 	ldbu	r2,-23(fp)
   83f80:	10803fcc 	andi	r2,r2,255
   83f84:	e1bffb04 	addi	r6,fp,-20
   83f88:	d9800015 	stw	r6,0(sp)
   83f8c:	180d883a 	mov	r6,r3
   83f90:	100f883a 	mov	r7,r2
   83f94:	0083abc0 	call	83abc <merge_color_channels>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
   83f98:	e0fffc17 	ldw	r3,-16(fp)
   83f9c:	e0bff717 	ldw	r2,-36(fp)
   83fa0:	1889883a 	add	r4,r3,r2
   83fa4:	e0fffd17 	ldw	r3,-12(fp)
   83fa8:	e0bff617 	ldw	r2,-40(fp)
   83fac:	1887883a 	add	r3,r3,r2
   83fb0:	e0bffb17 	ldw	r2,-20(fp)
   83fb4:	180b883a 	mov	r5,r3
   83fb8:	100d883a 	mov	r6,r2
   83fbc:	e1c00417 	ldw	r7,16(fp)
   83fc0:	0081b100 	call	81b10 <vid_set_pixel>

      alpha++;
   83fc4:	e0bff817 	ldw	r2,-32(fp)
   83fc8:	10800044 	addi	r2,r2,1
   83fcc:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
   83fd0:	e0bff717 	ldw	r2,-36(fp)
   83fd4:	10800044 	addi	r2,r2,1
   83fd8:	e0bff715 	stw	r2,-36(fp)
   83fdc:	e0fff717 	ldw	r3,-36(fp)
   83fe0:	e0bfff07 	ldb	r2,-4(fp)
   83fe4:	1004917a 	slli	r2,r2,5
   83fe8:	10bef804 	addi	r2,r2,-1056
   83fec:	e1000317 	ldw	r4,12(fp)
   83ff0:	2085883a 	add	r2,r4,r2
   83ff4:	10800417 	ldw	r2,16(r2)
   83ff8:	18bfbf36 	bltu	r3,r2,83ef8 <__alt_data_end+0xfffcbc88>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
   83ffc:	e0bff617 	ldw	r2,-40(fp)
   84000:	10800044 	addi	r2,r2,1
   84004:	e0bff615 	stw	r2,-40(fp)
   84008:	e0fff617 	ldw	r3,-40(fp)
   8400c:	e0bfff07 	ldb	r2,-4(fp)
   84010:	1004917a 	slli	r2,r2,5
   84014:	10bef804 	addi	r2,r2,-1056
   84018:	e1000317 	ldw	r4,12(fp)
   8401c:	2085883a 	add	r2,r4,r2
   84020:	10800517 	ldw	r2,20(r2)
   84024:	18bfb236 	bltu	r3,r2,83ef0 <__alt_data_end+0xfffcbc80>

      alpha++;
    }
  }

  return(0);
   84028:	0005883a 	mov	r2,zero
}
   8402c:	e037883a 	mov	sp,fp
   84030:	dfc00117 	ldw	ra,4(sp)
   84034:	df000017 	ldw	fp,0(sp)
   84038:	dec00204 	addi	sp,sp,8
   8403c:	f800283a 	ret

00084040 <vid_string_pixel_length_alpha>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
   84040:	defffb04 	addi	sp,sp,-20
   84044:	df000415 	stw	fp,16(sp)
   84048:	df000404 	addi	fp,sp,16
   8404c:	e13ffe15 	stw	r4,-8(fp)
   84050:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
   84054:	e03ffc15 	stw	zero,-16(fp)
  int length = 0;
   84058:	e03ffd15 	stw	zero,-12(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
   8405c:	e03ffc15 	stw	zero,-16(fp)
   84060:	00002206 	br	840ec <vid_string_pixel_length_alpha+0xac>
  {
    if( string[i] == ' ' )
   84064:	e0bffc17 	ldw	r2,-16(fp)
   84068:	e0ffff17 	ldw	r3,-4(fp)
   8406c:	1885883a 	add	r2,r3,r2
   84070:	10800003 	ldbu	r2,0(r2)
   84074:	10803fcc 	andi	r2,r2,255
   84078:	1080201c 	xori	r2,r2,128
   8407c:	10bfe004 	addi	r2,r2,-128
   84080:	10800818 	cmpnei	r2,r2,32
   84084:	1000071e 	bne	r2,zero,840a4 <vid_string_pixel_length_alpha+0x64>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
   84088:	e0bffe17 	ldw	r2,-8(fp)
   8408c:	10806004 	addi	r2,r2,384
   84090:	10c00417 	ldw	r3,16(r2)
   84094:	e0bffd17 	ldw	r2,-12(fp)
   84098:	1885883a 	add	r2,r3,r2
   8409c:	e0bffd15 	stw	r2,-12(fp)
   840a0:	00000f06 	br	840e0 <vid_string_pixel_length_alpha+0xa0>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
   840a4:	e0bffc17 	ldw	r2,-16(fp)
   840a8:	e0ffff17 	ldw	r3,-4(fp)
   840ac:	1885883a 	add	r2,r3,r2
   840b0:	10800003 	ldbu	r2,0(r2)
   840b4:	10803fcc 	andi	r2,r2,255
   840b8:	1080201c 	xori	r2,r2,128
   840bc:	10bfe004 	addi	r2,r2,-128
   840c0:	1004917a 	slli	r2,r2,5
   840c4:	10bef804 	addi	r2,r2,-1056
   840c8:	e0fffe17 	ldw	r3,-8(fp)
   840cc:	1885883a 	add	r2,r3,r2
   840d0:	10c00417 	ldw	r3,16(r2)
   840d4:	e0bffd17 	ldw	r2,-12(fp)
   840d8:	1885883a 	add	r2,r3,r2
   840dc:	e0bffd15 	stw	r2,-12(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
   840e0:	e0bffc17 	ldw	r2,-16(fp)
   840e4:	10800044 	addi	r2,r2,1
   840e8:	e0bffc15 	stw	r2,-16(fp)
   840ec:	e0bffc17 	ldw	r2,-16(fp)
   840f0:	e0ffff17 	ldw	r3,-4(fp)
   840f4:	1885883a 	add	r2,r3,r2
   840f8:	10800003 	ldbu	r2,0(r2)
   840fc:	10803fcc 	andi	r2,r2,255
   84100:	1080201c 	xori	r2,r2,128
   84104:	10bfe004 	addi	r2,r2,-128
   84108:	103fd61e 	bne	r2,zero,84064 <__alt_data_end+0xfffcbdf4>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
   8410c:	e0bffd17 	ldw	r2,-12(fp)
}
   84110:	e037883a 	mov	sp,fp
   84114:	df000017 	ldw	fp,0(sp)
   84118:	dec00104 	addi	sp,sp,4
   8411c:	f800283a 	ret

00084120 <GUI_ShowWelcome>:
    RECT rcPaint;
    PALETTE_INFO szPalette[BTN_NUM];
}DESK_INFO;


void GUI_ShowWelcome(alt_video_display *pDisplay){
   84120:	defff804 	addi	sp,sp,-32
   84124:	dfc00715 	stw	ra,28(sp)
   84128:	df000615 	stw	fp,24(sp)
   8412c:	df000604 	addi	fp,sp,24
   84130:	e13fff15 	stw	r4,-4(fp)
	int x, y;


	x = pDisplay->width / 2 - 60;
   84134:	e0bfff17 	ldw	r2,-4(fp)
   84138:	10800117 	ldw	r2,4(r2)
   8413c:	1006d7fa 	srli	r3,r2,31
   84140:	1885883a 	add	r2,r3,r2
   84144:	1005d07a 	srai	r2,r2,1
   84148:	10bff104 	addi	r2,r2,-60
   8414c:	e0bffd15 	stw	r2,-12(fp)
	y = pDisplay->height / 2 - 10;
   84150:	e0bfff17 	ldw	r2,-4(fp)
   84154:	10800217 	ldw	r2,8(r2)
   84158:	1006d7fa 	srli	r3,r2,31
   8415c:	1885883a 	add	r2,r3,r2
   84160:	1005d07a 	srai	r2,r2,1
   84164:	10bffd84 	addi	r2,r2,-10
   84168:	e0bffe15 	stw	r2,-8(fp)

	vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
   8416c:	008002f4 	movhi	r2,11
   84170:	10a00104 	addi	r2,r2,-32764
   84174:	d8800015 	stw	r2,0(sp)
   84178:	e0bfff17 	ldw	r2,-4(fp)
   8417c:	d8800115 	stw	r2,4(sp)
   84180:	008002b4 	movhi	r2,10
   84184:	109f0a04 	addi	r2,r2,31784
   84188:	d8800215 	stw	r2,8(sp)
   8418c:	e13ffd17 	ldw	r4,-12(fp)
   84190:	e17ffe17 	ldw	r5,-8(fp)
   84194:	01803fc4 	movi	r6,255
   84198:	000f883a 	mov	r7,zero
   8419c:	00837180 	call	83718 <vid_print_string_alpha>
	vid_print_string_alpha(x, y+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch Demo");
   841a0:	e0bffe17 	ldw	r2,-8(fp)
   841a4:	10800584 	addi	r2,r2,22
   841a8:	00c002f4 	movhi	r3,11
   841ac:	18e00104 	addi	r3,r3,-32764
   841b0:	d8c00015 	stw	r3,0(sp)
   841b4:	e0ffff17 	ldw	r3,-4(fp)
   841b8:	d8c00115 	stw	r3,4(sp)
   841bc:	00c002b4 	movhi	r3,10
   841c0:	18df0c04 	addi	r3,r3,31792
   841c4:	d8c00215 	stw	r3,8(sp)
   841c8:	e13ffd17 	ldw	r4,-12(fp)
   841cc:	100b883a 	mov	r5,r2
   841d0:	01803fc4 	movi	r6,255
   841d4:	000f883a 	mov	r7,zero
   841d8:	00837180 	call	83718 <vid_print_string_alpha>



}
   841dc:	e037883a 	mov	sp,fp
   841e0:	dfc00117 	ldw	ra,4(sp)
   841e4:	df000017 	ldw	fp,0(sp)
   841e8:	dec00204 	addi	sp,sp,8
   841ec:	f800283a 	ret

000841f0 <GUI_DeskInit>:

void GUI_DeskInit(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
   841f0:	deffef04 	addi	sp,sp,-68
   841f4:	dfc01015 	stw	ra,64(sp)
   841f8:	df000f15 	stw	fp,60(sp)
   841fc:	df000f04 	addi	fp,sp,60
   84200:	e13ffe15 	stw	r4,-8(fp)
   84204:	e17fff15 	stw	r5,-4(fp)
    int i;
    RECT rc;
    const int BoxH = 40;
   84208:	00800a04 	movi	r2,40
   8420c:	e0bff315 	stw	r2,-52(fp)
    const int BoxW = 40;
   84210:	00800a04 	movi	r2,40
   84214:	e0bff415 	stw	r2,-48(fp)
    const int GapH = 5;
   84218:	00800144 	movi	r2,5
   8421c:	e0bff515 	stw	r2,-44(fp)
    const int DrawBorder = 2;
   84220:	00800084 	movi	r2,2
   84224:	e0bff615 	stw	r2,-40(fp)
    const int TextW = 0;
   84228:	e03ff715 	stw	zero,-36(fp)
    const int ClearExtraW = 30;
   8422c:	00800784 	movi	r2,30
   84230:	e0bff815 	stw	r2,-32(fp)
    int GapW;

    
    GapW = (pDisplay->width - TextW - ClearExtraW - (BTN_NUM*BoxW))/(BTN_NUM+1);
   84234:	e0bffe17 	ldw	r2,-8(fp)
   84238:	10c00117 	ldw	r3,4(r2)
   8423c:	e0bff717 	ldw	r2,-36(fp)
   84240:	1887c83a 	sub	r3,r3,r2
   84244:	e0bff817 	ldw	r2,-32(fp)
   84248:	1887c83a 	sub	r3,r3,r2
   8424c:	e0bff417 	ldw	r2,-48(fp)
   84250:	10bffee4 	muli	r2,r2,-5
   84254:	1885883a 	add	r2,r3,r2
   84258:	1009883a 	mov	r4,r2
   8425c:	01400184 	movi	r5,6
   84260:	00877e00 	call	877e0 <__divsi3>
   84264:	e0bff915 	stw	r2,-28(fp)
    //printf("GapW=%d\r\n", GapW);
    rc.top = pDisplay->height - BoxH - GapH;
   84268:	e0bffe17 	ldw	r2,-8(fp)
   8426c:	10c00217 	ldw	r3,8(r2)
   84270:	e0bff317 	ldw	r2,-52(fp)
   84274:	1887c83a 	sub	r3,r3,r2
   84278:	e0bff517 	ldw	r2,-44(fp)
   8427c:	1885c83a 	sub	r2,r3,r2
   84280:	e0bffc15 	stw	r2,-16(fp)
    rc.bottom = rc.top + BoxH;
   84284:	e0fffc17 	ldw	r3,-16(fp)
   84288:	e0bff317 	ldw	r2,-52(fp)
   8428c:	1885883a 	add	r2,r3,r2
   84290:	e0bffd15 	stw	r2,-12(fp)
    rc.left = GapW + TextW + ClearExtraW;
   84294:	e0fff917 	ldw	r3,-28(fp)
   84298:	e0bff717 	ldw	r2,-36(fp)
   8429c:	1887883a 	add	r3,r3,r2
   842a0:	e0bff817 	ldw	r2,-32(fp)
   842a4:	1885883a 	add	r2,r3,r2
   842a8:	e0bffa15 	stw	r2,-24(fp)
    rc.right = rc.left + BoxW;
   842ac:	e0fffa17 	ldw	r3,-24(fp)
   842b0:	e0bff417 	ldw	r2,-48(fp)
   842b4:	1885883a 	add	r2,r3,r2
   842b8:	e0bffb15 	stw	r2,-20(fp)
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
   842bc:	e0bfff17 	ldw	r2,-4(fp)
   842c0:	10c00104 	addi	r3,r2,4
   842c4:	e0bffe17 	ldw	r2,-8(fp)
   842c8:	11000117 	ldw	r4,4(r2)
   842cc:	e0bff617 	ldw	r2,-40(fp)
   842d0:	2085c83a 	sub	r2,r4,r2
   842d4:	e17ffc17 	ldw	r5,-16(fp)
   842d8:	e13ff617 	ldw	r4,-40(fp)
   842dc:	2909c83a 	sub	r4,r5,r4
   842e0:	d9000015 	stw	r4,0(sp)
   842e4:	1809883a 	mov	r4,r3
   842e8:	e17ff617 	ldw	r5,-40(fp)
   842ec:	100d883a 	mov	r6,r2
   842f0:	e1fff617 	ldw	r7,-40(fp)
   842f4:	00802cc0 	call	802cc <RectSet>
    
    for(i=0;i<BTN_NUM;i++){
   842f8:	e03ff215 	stw	zero,-56(fp)
   842fc:	00002206 	br	84388 <GUI_DeskInit+0x198>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
   84300:	e0bff217 	ldw	r2,-56(fp)
   84304:	10800044 	addi	r2,r2,1
   84308:	10800524 	muli	r2,r2,20
   8430c:	e0ffff17 	ldw	r3,-4(fp)
   84310:	1887883a 	add	r3,r3,r2
   84314:	e0bffa04 	addi	r2,fp,-24
   84318:	1809883a 	mov	r4,r3
   8431c:	100b883a 	mov	r5,r2
   84320:	00804380 	call	80438 <RectCopy>
        pDeskInfo->szPalette[i].color = szPallete[i];
   84324:	00c002f4 	movhi	r3,11
   84328:	18e6e704 	addi	r3,r3,-25700
   8432c:	e0bff217 	ldw	r2,-56(fp)
   84330:	1085883a 	add	r2,r2,r2
   84334:	1085883a 	add	r2,r2,r2
   84338:	1885883a 	add	r2,r3,r2
   8433c:	10800017 	ldw	r2,0(r2)
   84340:	1007883a 	mov	r3,r2
   84344:	e13fff17 	ldw	r4,-4(fp)
   84348:	e0bff217 	ldw	r2,-56(fp)
   8434c:	10800524 	muli	r2,r2,20
   84350:	2085883a 	add	r2,r4,r2
   84354:	10800904 	addi	r2,r2,36
   84358:	10c00015 	stw	r3,0(r2)
        RectOffset(&rc, BoxW+GapW, 0);
   8435c:	e0fff417 	ldw	r3,-48(fp)
   84360:	e0bff917 	ldw	r2,-28(fp)
   84364:	1885883a 	add	r2,r3,r2
   84368:	e0fffa04 	addi	r3,fp,-24
   8436c:	1809883a 	mov	r4,r3
   84370:	100b883a 	mov	r5,r2
   84374:	000d883a 	mov	r6,zero
   84378:	00803b00 	call	803b0 <RectOffset>
    rc.right = rc.left + BoxW;
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
    
    for(i=0;i<BTN_NUM;i++){
   8437c:	e0bff217 	ldw	r2,-56(fp)
   84380:	10800044 	addi	r2,r2,1
   84384:	e0bff215 	stw	r2,-56(fp)
   84388:	e0bff217 	ldw	r2,-56(fp)
   8438c:	10800150 	cmplti	r2,r2,5
   84390:	103fdb1e 	bne	r2,zero,84300 <__alt_data_end+0xfffcc090>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
        pDeskInfo->szPalette[i].color = szPallete[i];
        RectOffset(&rc, BoxW+GapW, 0);
    }
    pDeskInfo->szPalette[BTN_CLEAR].rc.left -= ClearExtraW;
   84394:	e0bfff17 	ldw	r2,-4(fp)
   84398:	10c00517 	ldw	r3,20(r2)
   8439c:	e0bff817 	ldw	r2,-32(fp)
   843a0:	1887c83a 	sub	r3,r3,r2
   843a4:	e0bfff17 	ldw	r2,-4(fp)
   843a8:	10c00515 	stw	r3,20(r2)
    pDeskInfo->Paint_Index = BTN_BLUE;
   843ac:	e0bfff17 	ldw	r2,-4(fp)
   843b0:	00c00084 	movi	r3,2
   843b4:	10c00015 	stw	r3,0(r2)
}
   843b8:	e037883a 	mov	sp,fp
   843bc:	dfc00117 	ldw	ra,4(sp)
   843c0:	df000017 	ldw	fp,0(sp)
   843c4:	dec00204 	addi	sp,sp,8
   843c8:	f800283a 	ret

000843cc <GUI_CheckButton>:

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
   843cc:	defffa04 	addi	sp,sp,-24
   843d0:	dfc00515 	stw	ra,20(sp)
   843d4:	df000415 	stw	fp,16(sp)
   843d8:	df000404 	addi	fp,sp,16
   843dc:	e13ffe15 	stw	r4,-8(fp)
   843e0:	e17fff15 	stw	r5,-4(fp)
    int ButtonId = BTN_NONE;
   843e4:	00800184 	movi	r2,6
   843e8:	e0bffc15 	stw	r2,-16(fp)
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
   843ec:	e03ffd15 	stw	zero,-12(fp)
   843f0:	00000e06 	br	8442c <GUI_CheckButton+0x60>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
   843f4:	e0bffd17 	ldw	r2,-12(fp)
   843f8:	10800044 	addi	r2,r2,1
   843fc:	10800524 	muli	r2,r2,20
   84400:	e0fffe17 	ldw	r3,-8(fp)
   84404:	1885883a 	add	r2,r3,r2
   84408:	e13fff17 	ldw	r4,-4(fp)
   8440c:	100b883a 	mov	r5,r2
   84410:	00802080 	call	80208 <IsPtInRect>
   84414:	10000226 	beq	r2,zero,84420 <GUI_CheckButton+0x54>
            ButtonId = i;
   84418:	e0bffd17 	ldw	r2,-12(fp)
   8441c:	e0bffc15 	stw	r2,-16(fp)

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    int ButtonId = BTN_NONE;
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
   84420:	e0bffd17 	ldw	r2,-12(fp)
   84424:	10800044 	addi	r2,r2,1
   84428:	e0bffd15 	stw	r2,-12(fp)
   8442c:	e0bffd17 	ldw	r2,-12(fp)
   84430:	10800148 	cmpgei	r2,r2,5
   84434:	1000031e 	bne	r2,zero,84444 <GUI_CheckButton+0x78>
   84438:	e0bffc17 	ldw	r2,-16(fp)
   8443c:	108001a0 	cmpeqi	r2,r2,6
   84440:	103fec1e 	bne	r2,zero,843f4 <__alt_data_end+0xfffcc184>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
            ButtonId = i;
    }
    return ButtonId;
   84444:	e0bffc17 	ldw	r2,-16(fp)
}
   84448:	e037883a 	mov	sp,fp
   8444c:	dfc00117 	ldw	ra,4(sp)
   84450:	df000017 	ldw	fp,0(sp)
   84454:	dec00204 	addi	sp,sp,8
   84458:	f800283a 	ret

0008445c <GUI_DeskDraw>:

void GUI_DeskDraw(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
   8445c:	defff104 	addi	sp,sp,-60
   84460:	dfc00e15 	stw	ra,56(sp)
   84464:	df000d15 	stw	fp,52(sp)
   84468:	dc400c15 	stw	r17,48(sp)
   8446c:	dc000b15 	stw	r16,44(sp)
   84470:	df000d04 	addi	fp,sp,52
   84474:	e13ffc15 	stw	r4,-16(fp)
   84478:	e17ffd15 	stw	r5,-12(fp)
    // show text
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch");

    // draw border
    RectCopy(&rc, &pDeskInfo->rcPaint);
   8447c:	e0bffd17 	ldw	r2,-12(fp)
   84480:	10800104 	addi	r2,r2,4
   84484:	e0fff804 	addi	r3,fp,-32
   84488:	1809883a 	mov	r4,r3
   8448c:	100b883a 	mov	r5,r2
   84490:	00804380 	call	80438 <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
   84494:	e13ff817 	ldw	r4,-32(fp)
   84498:	e17ffa17 	ldw	r5,-24(fp)
   8449c:	e0fff917 	ldw	r3,-28(fp)
   844a0:	e0bffb17 	ldw	r2,-20(fp)
   844a4:	01804034 	movhi	r6,256
   844a8:	31bfffc4 	addi	r6,r6,-1
   844ac:	d9800015 	stw	r6,0(sp)
   844b0:	d8000115 	stw	zero,4(sp)
   844b4:	e1bffc17 	ldw	r6,-16(fp)
   844b8:	d9800215 	stw	r6,8(sp)
   844bc:	180d883a 	mov	r6,r3
   844c0:	100f883a 	mov	r7,r2
   844c4:	00818d00 	call	818d0 <vid_draw_box>
    

    // draw palette
	active = pDeskInfo->Paint_Index;
   844c8:	e0bffd17 	ldw	r2,-12(fp)
   844cc:	10800017 	ldw	r2,0(r2)
   844d0:	e0bff715 	stw	r2,-36(fp)
    for(i=0;i<BTN_NUM;i++){
   844d4:	e03ff615 	stw	zero,-40(fp)
   844d8:	00006406 	br	8466c <GUI_DeskDraw+0x210>
        RectCopy(&rc, &(pDeskInfo->szPalette[i].rc));
   844dc:	e0bff617 	ldw	r2,-40(fp)
   844e0:	10800044 	addi	r2,r2,1
   844e4:	10800524 	muli	r2,r2,20
   844e8:	e0fffd17 	ldw	r3,-12(fp)
   844ec:	1885883a 	add	r2,r3,r2
   844f0:	e0fff804 	addi	r3,fp,-32
   844f4:	1809883a 	mov	r4,r3
   844f8:	100b883a 	mov	r5,r2
   844fc:	00804380 	call	80438 <RectCopy>
        if (i == BTN_CLEAR){
   84500:	e0bff617 	ldw	r2,-40(fp)
   84504:	1000301e 	bne	r2,zero,845c8 <GUI_DeskDraw+0x16c>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_NOT_FILL, pDisplay);
   84508:	e13ff817 	ldw	r4,-32(fp)
   8450c:	e17ffa17 	ldw	r5,-24(fp)
   84510:	e0fff917 	ldw	r3,-28(fp)
   84514:	e0bffb17 	ldw	r2,-20(fp)
   84518:	e1fffd17 	ldw	r7,-12(fp)
   8451c:	e1bff617 	ldw	r6,-40(fp)
   84520:	31800524 	muli	r6,r6,20
   84524:	398d883a 	add	r6,r7,r6
   84528:	31800904 	addi	r6,r6,36
   8452c:	31800017 	ldw	r6,0(r6)
   84530:	d9800015 	stw	r6,0(sp)
   84534:	d8000115 	stw	zero,4(sp)
   84538:	e1bffc17 	ldw	r6,-16(fp)
   8453c:	d9800215 	stw	r6,8(sp)
   84540:	180d883a 	mov	r6,r3
   84544:	100f883a 	mov	r7,r2
   84548:	00818d00 	call	818d0 <vid_draw_box>
            vid_print_string_alpha(rc.left+8, rc.top+(RectHeight(&rc)-22)/2, pDeskInfo->szPalette[i].color, BLACK_24, tahomabold_20, pDisplay, "Clear");
   8454c:	e0bff817 	ldw	r2,-32(fp)
   84550:	14000204 	addi	r16,r2,8
   84554:	e47ffa17 	ldw	r17,-24(fp)
   84558:	e0bff804 	addi	r2,fp,-32
   8455c:	1009883a 	mov	r4,r2
   84560:	00804d00 	call	804d0 <RectHeight>
   84564:	10bffa84 	addi	r2,r2,-22
   84568:	1006d7fa 	srli	r3,r2,31
   8456c:	1885883a 	add	r2,r3,r2
   84570:	1005d07a 	srai	r2,r2,1
   84574:	8887883a 	add	r3,r17,r2
   84578:	e13ffd17 	ldw	r4,-12(fp)
   8457c:	e0bff617 	ldw	r2,-40(fp)
   84580:	10800524 	muli	r2,r2,20
   84584:	2085883a 	add	r2,r4,r2
   84588:	10800904 	addi	r2,r2,36
   8458c:	10800017 	ldw	r2,0(r2)
   84590:	010002f4 	movhi	r4,11
   84594:	21200104 	addi	r4,r4,-32764
   84598:	d9000015 	stw	r4,0(sp)
   8459c:	e13ffc17 	ldw	r4,-16(fp)
   845a0:	d9000115 	stw	r4,4(sp)
   845a4:	010002b4 	movhi	r4,10
   845a8:	211f0f04 	addi	r4,r4,31804
   845ac:	d9000215 	stw	r4,8(sp)
   845b0:	8009883a 	mov	r4,r16
   845b4:	180b883a 	mov	r5,r3
   845b8:	100d883a 	mov	r6,r2
   845bc:	000f883a 	mov	r7,zero
   845c0:	00837180 	call	83718 <vid_print_string_alpha>
   845c4:	00002606 	br	84660 <GUI_DeskDraw+0x204>
        }else{
        	if (active != i){
   845c8:	e0fff717 	ldw	r3,-36(fp)
   845cc:	e0bff617 	ldw	r2,-40(fp)
   845d0:	18801126 	beq	r3,r2,84618 <GUI_DeskDraw+0x1bc>
          		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
   845d4:	e13ff817 	ldw	r4,-32(fp)
   845d8:	e17ffa17 	ldw	r5,-24(fp)
   845dc:	e0fff917 	ldw	r3,-28(fp)
   845e0:	e0bffb17 	ldw	r2,-20(fp)
   845e4:	d8000015 	stw	zero,0(sp)
   845e8:	01800044 	movi	r6,1
   845ec:	d9800115 	stw	r6,4(sp)
   845f0:	e1bffc17 	ldw	r6,-16(fp)
   845f4:	d9800215 	stw	r6,8(sp)
   845f8:	180d883a 	mov	r6,r3
   845fc:	100f883a 	mov	r7,r2
   84600:	00818d00 	call	818d0 <vid_draw_box>
        		RectInflate(&rc, -4, -4);
   84604:	e0bff804 	addi	r2,fp,-32
   84608:	1009883a 	mov	r4,r2
   8460c:	017fff04 	movi	r5,-4
   84610:	01bfff04 	movi	r6,-4
   84614:	00803280 	call	80328 <RectInflate>
        	}
      		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pDisplay);
   84618:	e13ff817 	ldw	r4,-32(fp)
   8461c:	e17ffa17 	ldw	r5,-24(fp)
   84620:	e0fff917 	ldw	r3,-28(fp)
   84624:	e0bffb17 	ldw	r2,-20(fp)
   84628:	e1fffd17 	ldw	r7,-12(fp)
   8462c:	e1bff617 	ldw	r6,-40(fp)
   84630:	31800524 	muli	r6,r6,20
   84634:	398d883a 	add	r6,r7,r6
   84638:	31800904 	addi	r6,r6,36
   8463c:	31800017 	ldw	r6,0(r6)
   84640:	d9800015 	stw	r6,0(sp)
   84644:	01800044 	movi	r6,1
   84648:	d9800115 	stw	r6,4(sp)
   8464c:	e1bffc17 	ldw	r6,-16(fp)
   84650:	d9800215 	stw	r6,8(sp)
   84654:	180d883a 	mov	r6,r3
   84658:	100f883a 	mov	r7,r2
   8465c:	00818d00 	call	818d0 <vid_draw_box>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
    

    // draw palette
	active = pDeskInfo->Paint_Index;
    for(i=0;i<BTN_NUM;i++){
   84660:	e0bff617 	ldw	r2,-40(fp)
   84664:	10800044 	addi	r2,r2,1
   84668:	e0bff615 	stw	r2,-40(fp)
   8466c:	e0bff617 	ldw	r2,-40(fp)
   84670:	10800150 	cmplti	r2,r2,5
   84674:	103f991e 	bne	r2,zero,844dc <__alt_data_end+0xfffcc26c>
    //RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    //vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pDisplay, "2");
    
        
        
}
   84678:	e6fffe04 	addi	sp,fp,-8
   8467c:	dfc00317 	ldw	ra,12(sp)
   84680:	df000217 	ldw	fp,8(sp)
   84684:	dc400117 	ldw	r17,4(sp)
   84688:	dc000017 	ldw	r16,0(sp)
   8468c:	dec00404 	addi	sp,sp,16
   84690:	f800283a 	ret

00084694 <IsContinuedPoint>:

bool IsContinuedPoint(POINT *ptPre, POINT *ptNew){
   84694:	defffb04 	addi	sp,sp,-20
   84698:	df000415 	stw	fp,16(sp)
   8469c:	df000404 	addi	fp,sp,16
   846a0:	e13ffe15 	stw	r4,-8(fp)
   846a4:	e17fff15 	stw	r5,-4(fp)
    bool bYes = TRUE;
   846a8:	00800044 	movi	r2,1
   846ac:	e0bffc15 	stw	r2,-16(fp)
    const int nMax = 50;
   846b0:	00800c84 	movi	r2,50
   846b4:	e0bffd15 	stw	r2,-12(fp)
    if (abs(ptPre->x - ptNew->x) > nMax)
   846b8:	e0bffe17 	ldw	r2,-8(fp)
   846bc:	10c00017 	ldw	r3,0(r2)
   846c0:	e0bfff17 	ldw	r2,-4(fp)
   846c4:	10800017 	ldw	r2,0(r2)
   846c8:	1885c83a 	sub	r2,r3,r2
   846cc:	1000010e 	bge	r2,zero,846d4 <IsContinuedPoint+0x40>
   846d0:	0085c83a 	sub	r2,zero,r2
   846d4:	e0fffd17 	ldw	r3,-12(fp)
   846d8:	1880020e 	bge	r3,r2,846e4 <IsContinuedPoint+0x50>
        bYes = FALSE;
   846dc:	e03ffc15 	stw	zero,-16(fp)
   846e0:	00000a06 	br	8470c <IsContinuedPoint+0x78>
    else if (abs(ptPre->y - ptNew->y) > nMax)
   846e4:	e0bffe17 	ldw	r2,-8(fp)
   846e8:	10c00117 	ldw	r3,4(r2)
   846ec:	e0bfff17 	ldw	r2,-4(fp)
   846f0:	10800117 	ldw	r2,4(r2)
   846f4:	1885c83a 	sub	r2,r3,r2
   846f8:	1000010e 	bge	r2,zero,84700 <IsContinuedPoint+0x6c>
   846fc:	0085c83a 	sub	r2,zero,r2
   84700:	e0fffd17 	ldw	r3,-12(fp)
   84704:	1880010e 	bge	r3,r2,8470c <IsContinuedPoint+0x78>
        bYes = FALSE;
   84708:	e03ffc15 	stw	zero,-16(fp)
        
    return bYes;        
   8470c:	e0bffc17 	ldw	r2,-16(fp)
        
}
   84710:	e037883a 	mov	sp,fp
   84714:	df000017 	ldw	fp,0(sp)
   84718:	dec00104 	addi	sp,sp,4
   8471c:	f800283a 	ret

00084720 <GUI_ClearPaintArea>:



void GUI_ClearPaintArea(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
   84720:	defff504 	addi	sp,sp,-44
   84724:	dfc00a15 	stw	ra,40(sp)
   84728:	df000915 	stw	fp,36(sp)
   8472c:	df000904 	addi	fp,sp,36
   84730:	e13ffe15 	stw	r4,-8(fp)
   84734:	e17fff15 	stw	r5,-4(fp)
    RECT rc;
    RectCopy(&rc, &pDeskInfo->rcPaint);
   84738:	e0bfff17 	ldw	r2,-4(fp)
   8473c:	10800104 	addi	r2,r2,4
   84740:	e13ffa04 	addi	r4,fp,-24
   84744:	100b883a 	mov	r5,r2
   84748:	00804380 	call	80438 <RectCopy>
    RectInflate(&rc, -1, -1);
   8474c:	e13ffa04 	addi	r4,fp,-24
   84750:	017fffc4 	movi	r5,-1
   84754:	01bfffc4 	movi	r6,-1
   84758:	00803280 	call	80328 <RectInflate>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
   8475c:	e13ffa17 	ldw	r4,-24(fp)
   84760:	e17ffc17 	ldw	r5,-16(fp)
   84764:	e0fffb17 	ldw	r3,-20(fp)
   84768:	e0bffd17 	ldw	r2,-12(fp)
   8476c:	d8000015 	stw	zero,0(sp)
   84770:	01800044 	movi	r6,1
   84774:	d9800115 	stw	r6,4(sp)
   84778:	e1bffe17 	ldw	r6,-8(fp)
   8477c:	d9800215 	stw	r6,8(sp)
   84780:	180d883a 	mov	r6,r3
   84784:	100f883a 	mov	r7,r2
   84788:	00818d00 	call	818d0 <vid_draw_box>
    //
  //  RectCopy(&rc, &pDeskInfo->szPalette[BTN_GESTRUE].rc);
  //  vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
}
   8478c:	e037883a 	mov	sp,fp
   84790:	dfc00117 	ldw	ra,4(sp)
   84794:	df000017 	ldw	fp,0(sp)
   84798:	dec00204 	addi	sp,sp,8
   8479c:	f800283a 	ret

000847a0 <GUI>:

//void GUI(MTC_INFO *pTouch){
void GUI(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
   847a0:	deffd004 	addi	sp,sp,-192
   847a4:	dfc02f15 	stw	ra,188(sp)
   847a8:	df002e15 	stw	fp,184(sp)
   847ac:	df002e04 	addi	fp,sp,184
   847b0:	e13ffe15 	stw	r4,-8(fp)
   847b4:	e17fff15 	stw	r5,-4(fp)
    // video
    DESK_INFO DeskInfo;
    int X, Y;
    POINT Pt;
    const int nDotSize = DOT_SIZE;
   847b8:	00800144 	movi	r2,5
   847bc:	e0bfd615 	stw	r2,-168(fp)
    


    
    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
   847c0:	e13ffe17 	ldw	r4,-8(fp)
   847c4:	000b883a 	mov	r5,zero
   847c8:	008106c0 	call	8106c <vid_clean_screen>
    
    // Show Terasic Welcome
    GUI_ShowWelcome(pDisplay);
   847cc:	e13ffe17 	ldw	r4,-8(fp)
   847d0:	00841200 	call	84120 <GUI_ShowWelcome>
    usleep(1*1000*1000);
   847d4:	010003f4 	movhi	r4,15
   847d8:	21109004 	addi	r4,r4,16960
   847dc:	008bff40 	call	8bff4 <usleep>
    vid_clean_screen(pDisplay, BLACK_24);
   847e0:	e13ffe17 	ldw	r4,-8(fp)
   847e4:	000b883a 	mov	r5,zero
   847e8:	008106c0 	call	8106c <vid_clean_screen>

   
    GUI_DeskInit(pDisplay, &DeskInfo);
   847ec:	e0bfd804 	addi	r2,fp,-160
   847f0:	e13ffe17 	ldw	r4,-8(fp)
   847f4:	100b883a 	mov	r5,r2
   847f8:	00841f00 	call	841f0 <GUI_DeskInit>
    GUI_DeskDraw(pDisplay, &DeskInfo);
   847fc:	e0bfd804 	addi	r2,fp,-160
   84800:	e13ffe17 	ldw	r4,-8(fp)
   84804:	100b883a 	mov	r5,r2
   84808:	008445c0 	call	8445c <GUI_DeskDraw>
    
   // VIPFR_ActiveDrawFrame(pReader);
    
    RectCopy(&rcTouch, &DeskInfo.rcPaint);
   8480c:	e0fffa04 	addi	r3,fp,-24
   84810:	e0bfd804 	addi	r2,fp,-160
   84814:	10800104 	addi	r2,r2,4
   84818:	1809883a 	mov	r4,r3
   8481c:	100b883a 	mov	r5,r2
   84820:	00804380 	call	80438 <RectCopy>
    RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);
   84824:	00ffff84 	movi	r3,-2
   84828:	e0bfd617 	ldw	r2,-168(fp)
   8482c:	1887c83a 	sub	r3,r3,r2
   84830:	013fff84 	movi	r4,-2
   84834:	e0bfd617 	ldw	r2,-168(fp)
   84838:	2085c83a 	sub	r2,r4,r2
   8483c:	e13ffa04 	addi	r4,fp,-24
   84840:	180b883a 	mov	r5,r3
   84844:	100d883a 	mov	r6,r2
   84848:	00803280 	call	80328 <RectInflate>
    
    ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
   8484c:	e0bfd817 	ldw	r2,-160(fp)
   84850:	10800524 	muli	r2,r2,20
   84854:	e0ffd404 	addi	r3,fp,-176
   84858:	1885883a 	add	r2,r3,r2
   8485c:	10800d04 	addi	r2,r2,52
   84860:	10800017 	ldw	r2,0(r2)
   84864:	e0bfd415 	stw	r2,-176(fp)
  //  printf("ContinuedTime=%d\r\n", ContinuedTime);
   // PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);

    while(1){
            // touch
            if (Touch_GetXY(pTouch, &X, &Y)){
   84868:	e0fff604 	addi	r3,fp,-40
   8486c:	e0bff704 	addi	r2,fp,-36
   84870:	e13fff17 	ldw	r4,-4(fp)
   84874:	180b883a 	mov	r5,r3
   84878:	100d883a 	mov	r6,r2
   8487c:	0086acc0 	call	86acc <Touch_GetXY>
   84880:	10004f26 	beq	r2,zero,849c0 <GUI+0x220>
           //     IOWR(LED_BASE, 0x00, LedMask);
             //   LedMask <<= 1;
             //   if (LedMask == 0x00)
               //     LedMask = 0x01;
                //
                printf("x=%d, y=%d\r\n", X,Y);
   84884:	e0fff617 	ldw	r3,-40(fp)
   84888:	e0bff717 	ldw	r2,-36(fp)
   8488c:	010002b4 	movhi	r4,10
   84890:	211f1104 	addi	r4,r4,31812
   84894:	180b883a 	mov	r5,r3
   84898:	100d883a 	mov	r6,r2
   8489c:	008a36c0 	call	8a36c <printf>
                PtSet(&Pt, X, Y);
   848a0:	e0fff617 	ldw	r3,-40(fp)
   848a4:	e0bff717 	ldw	r2,-36(fp)
   848a8:	e13ff804 	addi	r4,fp,-32
   848ac:	180b883a 	mov	r5,r3
   848b0:	100d883a 	mov	r6,r2
   848b4:	008028c0 	call	8028c <PtSet>


             //   printf("t:%d, %d\r\n", (int)alt_nticks(), LastTimePt1);
                //
                if ( IsPtInRect(&Pt, &rcTouch)){
   848b8:	e0fff804 	addi	r3,fp,-32
   848bc:	e0bffa04 	addi	r2,fp,-24
   848c0:	1809883a 	mov	r4,r3
   848c4:	100b883a 	mov	r5,r2
   848c8:	00802080 	call	80208 <IsPtInRect>
   848cc:	10000c26 	beq	r2,zero,84900 <GUI+0x160>

                    vid_draw_circle(Pt.x, Pt.y, nDotSize, ColorPen, DO_FILL, pDisplay);
   848d0:	e0fff817 	ldw	r3,-32(fp)
   848d4:	e0bff917 	ldw	r2,-28(fp)
   848d8:	01000044 	movi	r4,1
   848dc:	d9000015 	stw	r4,0(sp)
   848e0:	e13ffe17 	ldw	r4,-8(fp)
   848e4:	d9000115 	stw	r4,4(sp)
   848e8:	1809883a 	mov	r4,r3
   848ec:	100b883a 	mov	r5,r2
   848f0:	e1bfd617 	ldw	r6,-168(fp)
   848f4:	e1ffd417 	ldw	r7,-176(fp)
   848f8:	00820ec0 	call	820ec <vid_draw_circle>
   848fc:	00003006 	br	849c0 <GUI+0x220>
                   // VIPFR_ActiveDrawFrame(pReader);
                }else if (GUI_CheckButton(&DeskInfo, &Pt) == BTN_CLEAR){
   84900:	e0ffd804 	addi	r3,fp,-160
   84904:	e0bff804 	addi	r2,fp,-32
   84908:	1809883a 	mov	r4,r3
   8490c:	100b883a 	mov	r5,r2
   84910:	00843cc0 	call	843cc <GUI_CheckButton>
   84914:	1000071e 	bne	r2,zero,84934 <GUI+0x194>
                    GUI_ClearPaintArea(pDisplay, &DeskInfo);
   84918:	e0bfd804 	addi	r2,fp,-160
   8491c:	e13ffe17 	ldw	r4,-8(fp)
   84920:	100b883a 	mov	r5,r2
   84924:	00847200 	call	84720 <GUI_ClearPaintArea>
                  //  VIPFR_ActiveDrawFrame(pReader);
                    Touch_EmptyFifo(pTouch);
   84928:	e13fff17 	ldw	r4,-4(fp)
   8492c:	0086a940 	call	86a94 <Touch_EmptyFifo>
   84930:	00002306 	br	849c0 <GUI+0x220>
                }else {
                    ButtonId = GUI_CheckButton(&DeskInfo, &Pt);
   84934:	e0ffd804 	addi	r3,fp,-160
   84938:	e0bff804 	addi	r2,fp,-32
   8493c:	1809883a 	mov	r4,r3
   84940:	100b883a 	mov	r5,r2
   84944:	00843cc0 	call	843cc <GUI_CheckButton>
   84948:	e0bfd715 	stw	r2,-164(fp)
                    UpdatePalette = FALSE;
   8494c:	e03fd515 	stw	zero,-172(fp)
                    if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR){
   84950:	e0bfd717 	ldw	r2,-164(fp)
   84954:	108001a0 	cmpeqi	r2,r2,6
   84958:	1000191e 	bne	r2,zero,849c0 <GUI+0x220>
   8495c:	e0bfd717 	ldw	r2,-164(fp)
   84960:	10001726 	beq	r2,zero,849c0 <GUI+0x220>
                        // chang draw color
                        if ( ButtonId != DeskInfo.Paint_Index ){
   84964:	e0ffd817 	ldw	r3,-160(fp)
   84968:	e0bfd717 	ldw	r2,-164(fp)
   8496c:	18800426 	beq	r3,r2,84980 <GUI+0x1e0>
                            DeskInfo.Paint_Index = ButtonId;
   84970:	e0bfd717 	ldw	r2,-164(fp)
   84974:	e0bfd815 	stw	r2,-160(fp)
                            UpdatePalette = TRUE;
   84978:	00800044 	movi	r2,1
   8497c:	e0bfd515 	stw	r2,-172(fp)
                            //
                        }

                        if (UpdatePalette){
   84980:	e0bfd517 	ldw	r2,-172(fp)
   84984:	10000e26 	beq	r2,zero,849c0 <GUI+0x220>
                            ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
   84988:	e0bfd817 	ldw	r2,-160(fp)
   8498c:	10800524 	muli	r2,r2,20
   84990:	e0ffd404 	addi	r3,fp,-176
   84994:	1885883a 	add	r2,r3,r2
   84998:	10800d04 	addi	r2,r2,52
   8499c:	10800017 	ldw	r2,0(r2)
   849a0:	e0bfd415 	stw	r2,-176(fp)
                            GUI_DeskDraw(pDisplay, &DeskInfo);
   849a4:	e0bfd804 	addi	r2,fp,-160
   849a8:	e13ffe17 	ldw	r4,-8(fp)
   849ac:	100b883a 	mov	r5,r2
   849b0:	008445c0 	call	8445c <GUI_DeskDraw>
                        //    VIPFR_ActiveDrawFrame(pReader);
                            Touch_EmptyFifo(pTouch);
   849b4:	e13fff17 	ldw	r4,-4(fp)
   849b8:	0086a940 	call	86a94 <Touch_EmptyFifo>
                        }
                    }
                }
            } // if touch
        } // while
   849bc:	003faa06 	br	84868 <__alt_data_end+0xfffcc5f8>
   849c0:	003fa906 	br	84868 <__alt_data_end+0xfffcc5f8>

000849c4 <GUI_ShowInfo>:
    
}



void GUI_ShowInfo(alt_video_display *pDisplay, char *pText){
   849c4:	defff904 	addi	sp,sp,-28
   849c8:	dfc00615 	stw	ra,24(sp)
   849cc:	df000515 	stw	fp,20(sp)
   849d0:	df000504 	addi	fp,sp,20
   849d4:	e13ffe15 	stw	r4,-8(fp)
   849d8:	e17fff15 	stw	r5,-4(fp)
    static int x=0,y=100;
   // vid_clean_screen(pReader, BLACK_24);
    vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, pText);
   849dc:	d0ecc917 	ldw	r3,-19676(gp)
   849e0:	d0a00117 	ldw	r2,-32764(gp)
   849e4:	010002f4 	movhi	r4,11
   849e8:	21200104 	addi	r4,r4,-32764
   849ec:	d9000015 	stw	r4,0(sp)
   849f0:	e13ffe17 	ldw	r4,-8(fp)
   849f4:	d9000115 	stw	r4,4(sp)
   849f8:	e13fff17 	ldw	r4,-4(fp)
   849fc:	d9000215 	stw	r4,8(sp)
   84a00:	1809883a 	mov	r4,r3
   84a04:	100b883a 	mov	r5,r2
   84a08:	01803fc4 	movi	r6,255
   84a0c:	000f883a 	mov	r7,zero
   84a10:	00837180 	call	83718 <vid_print_string_alpha>
 //   VIPFR_ActiveDrawFrame(pReader);
}
   84a14:	e037883a 	mov	sp,fp
   84a18:	dfc00117 	ldw	ra,4(sp)
   84a1c:	df000017 	ldw	fp,0(sp)
   84a20:	dec00204 	addi	sp,sp,8
   84a24:	f800283a 	ret

00084a28 <GUI_ShowTouchPoint>:

void GUI_ShowTouchPoint(alt_video_display *pDisplay, int X, int Y, int color){
   84a28:	defff804 	addi	sp,sp,-32
   84a2c:	dfc00715 	stw	ra,28(sp)
   84a30:	df000615 	stw	fp,24(sp)
   84a34:	df000604 	addi	fp,sp,24
   84a38:	e13ffc15 	stw	r4,-16(fp)
   84a3c:	e17ffd15 	stw	r5,-12(fp)
   84a40:	e1bffe15 	stw	r6,-8(fp)
   84a44:	e1ffff15 	stw	r7,-4(fp)
    vid_draw_circle(X, Y, 10, color, DO_FILL, pDisplay);
   84a48:	00800044 	movi	r2,1
   84a4c:	d8800015 	stw	r2,0(sp)
   84a50:	e0bffc17 	ldw	r2,-16(fp)
   84a54:	d8800115 	stw	r2,4(sp)
   84a58:	e13ffd17 	ldw	r4,-12(fp)
   84a5c:	e17ffe17 	ldw	r5,-8(fp)
   84a60:	01800284 	movi	r6,10
   84a64:	e1ffff17 	ldw	r7,-4(fp)
   84a68:	00820ec0 	call	820ec <vid_draw_circle>
   // VIPFR_ActiveDrawFrame(pReader);
}
   84a6c:	e037883a 	mov	sp,fp
   84a70:	dfc00117 	ldw	ra,4(sp)
   84a74:	df000017 	ldw	fp,0(sp)
   84a78:	dec00204 	addi	sp,sp,8
   84a7c:	f800283a 	ret

00084a80 <ShowInfo>:
#include "simple_graphics.h"
#include "geometry.h"



void ShowInfo(alt_video_display *pDisplay, char *pText){
   84a80:	defff904 	addi	sp,sp,-28
   84a84:	dfc00615 	stw	ra,24(sp)
   84a88:	df000515 	stw	fp,20(sp)
   84a8c:	df000504 	addi	fp,sp,20
   84a90:	e13ffe15 	stw	r4,-8(fp)
   84a94:	e17fff15 	stw	r5,-4(fp)
    vid_print_string_alpha(1, 1, WHITE_24, BLACK_24, tahomabold_20, pDisplay, pText);
   84a98:	008002f4 	movhi	r2,11
   84a9c:	10a00104 	addi	r2,r2,-32764
   84aa0:	d8800015 	stw	r2,0(sp)
   84aa4:	e0bffe17 	ldw	r2,-8(fp)
   84aa8:	d8800115 	stw	r2,4(sp)
   84aac:	e0bfff17 	ldw	r2,-4(fp)
   84ab0:	d8800215 	stw	r2,8(sp)
   84ab4:	01000044 	movi	r4,1
   84ab8:	01400044 	movi	r5,1
   84abc:	01804034 	movhi	r6,256
   84ac0:	31bfffc4 	addi	r6,r6,-1
   84ac4:	000f883a 	mov	r7,zero
   84ac8:	00837180 	call	83718 <vid_print_string_alpha>
}
   84acc:	e037883a 	mov	sp,fp
   84ad0:	dfc00117 	ldw	ra,4(sp)
   84ad4:	df000017 	ldw	fp,0(sp)
   84ad8:	dec00204 	addi	sp,sp,8
   84adc:	f800283a 	ret

00084ae0 <VPG_XLine>:


void VPG_XLine(alt_video_display *pDisplay){
   84ae0:	defffe04 	addi	sp,sp,-8
   84ae4:	df000115 	stw	fp,4(sp)
   84ae8:	df000104 	addi	fp,sp,4
   84aec:	e13fff15 	stw	r4,-4(fp)
return ;
   84af0:	0001883a 	nop

    // show text
    ShowInfo(pDisplay, "X Line");


}
   84af4:	e037883a 	mov	sp,fp
   84af8:	df000017 	ldw	fp,0(sp)
   84afc:	dec00104 	addi	sp,sp,4
   84b00:	f800283a 	ret

00084b04 <VPG_ColorPanel>:


void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
   84b04:	defff204 	addi	sp,sp,-56
   84b08:	dfc00d15 	stw	ra,52(sp)
   84b0c:	df000c15 	stw	fp,48(sp)
   84b10:	df000c04 	addi	fp,sp,48
   84b14:	e13ffe15 	stw	r4,-8(fp)
   84b18:	e17fff15 	stw	r5,-4(fp)
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   84b1c:	e03ff515 	stw	zero,-44(fp)
   84b20:	00001106 	br	84b68 <VPG_ColorPanel+0x64>
        for(x=0;x<pDisplay->width;x++){
   84b24:	e03ff415 	stw	zero,-48(fp)
   84b28:	00000806 	br	84b4c <VPG_ColorPanel+0x48>
        	vid_set_pixel(x,y,Color, pDisplay);
   84b2c:	e13ff417 	ldw	r4,-48(fp)
   84b30:	e17ff517 	ldw	r5,-44(fp)
   84b34:	e1bfff17 	ldw	r6,-4(fp)
   84b38:	e1fffe17 	ldw	r7,-8(fp)
   84b3c:	0081b100 	call	81b10 <vid_set_pixel>
void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84b40:	e0bff417 	ldw	r2,-48(fp)
   84b44:	10800044 	addi	r2,r2,1
   84b48:	e0bff415 	stw	r2,-48(fp)
   84b4c:	e0bffe17 	ldw	r2,-8(fp)
   84b50:	10800117 	ldw	r2,4(r2)
   84b54:	e0fff417 	ldw	r3,-48(fp)
   84b58:	18bff416 	blt	r3,r2,84b2c <__alt_data_end+0xfffcc8bc>

void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   84b5c:	e0bff517 	ldw	r2,-44(fp)
   84b60:	10800044 	addi	r2,r2,1
   84b64:	e0bff515 	stw	r2,-44(fp)
   84b68:	e0bffe17 	ldw	r2,-8(fp)
   84b6c:	10800217 	ldw	r2,8(r2)
   84b70:	e0fff517 	ldw	r3,-44(fp)
   84b74:	18bfeb16 	blt	r3,r2,84b24 <__alt_data_end+0xfffcc8b4>
        	vid_set_pixel(x,y,Color, pDisplay);
        }
    }

    // show text
    sprintf(szText,"Panel: %08xh", Color);
   84b78:	e0bff604 	addi	r2,fp,-40
   84b7c:	1009883a 	mov	r4,r2
   84b80:	014002b4 	movhi	r5,10
   84b84:	295f1504 	addi	r5,r5,31828
   84b88:	e1bfff17 	ldw	r6,-4(fp)
   84b8c:	008a5000 	call	8a500 <sprintf>
    ShowInfo(pDisplay, szText);
   84b90:	e0bff604 	addi	r2,fp,-40
   84b94:	e13ffe17 	ldw	r4,-8(fp)
   84b98:	100b883a 	mov	r5,r2
   84b9c:	0084a800 	call	84a80 <ShowInfo>



}
   84ba0:	e037883a 	mov	sp,fp
   84ba4:	dfc00117 	ldw	ra,4(sp)
   84ba8:	df000017 	ldw	fp,0(sp)
   84bac:	dec00204 	addi	sp,sp,8
   84bb0:	f800283a 	ret

00084bb4 <VPG_Grid>:

void VPG_Grid(alt_video_display *pDisplay, alt_u8 GridSize){
   84bb4:	defff104 	addi	sp,sp,-60
   84bb8:	dfc00e15 	stw	ra,56(sp)
   84bbc:	df000d15 	stw	fp,52(sp)
   84bc0:	df000d04 	addi	fp,sp,52
   84bc4:	e13ffe15 	stw	r4,-8(fp)
   84bc8:	2805883a 	mov	r2,r5
   84bcc:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   84bd0:	e03ff415 	stw	zero,-48(fp)
   84bd4:	00002206 	br	84c60 <VPG_Grid+0xac>
        for(x=0;x<pDisplay->width;x++){
   84bd8:	e03ff315 	stw	zero,-52(fp)
   84bdc:	00001906 	br	84c44 <VPG_Grid+0x90>
            if (x%GridSize == 0 || y%GridSize == 0)
   84be0:	e0bfff03 	ldbu	r2,-4(fp)
   84be4:	e0fff317 	ldw	r3,-52(fp)
   84be8:	1809883a 	mov	r4,r3
   84bec:	100b883a 	mov	r5,r2
   84bf0:	00878280 	call	87828 <__modsi3>
   84bf4:	10000626 	beq	r2,zero,84c10 <VPG_Grid+0x5c>
   84bf8:	e0bfff03 	ldbu	r2,-4(fp)
   84bfc:	e0fff417 	ldw	r3,-48(fp)
   84c00:	1809883a 	mov	r4,r3
   84c04:	100b883a 	mov	r5,r2
   84c08:	00878280 	call	87828 <__modsi3>
   84c0c:	1000041e 	bne	r2,zero,84c20 <VPG_Grid+0x6c>
                Value32 = WHITE_24;
   84c10:	00804034 	movhi	r2,256
   84c14:	10bfffc4 	addi	r2,r2,-1
   84c18:	e0bff515 	stw	r2,-44(fp)
   84c1c:	00000106 	br	84c24 <VPG_Grid+0x70>
            else
                Value32 = BLACK_24;
   84c20:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
   84c24:	e13ff317 	ldw	r4,-52(fp)
   84c28:	e17ff417 	ldw	r5,-48(fp)
   84c2c:	e1bff517 	ldw	r6,-44(fp)
   84c30:	e1fffe17 	ldw	r7,-8(fp)
   84c34:	0081b100 	call	81b10 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84c38:	e0bff317 	ldw	r2,-52(fp)
   84c3c:	10800044 	addi	r2,r2,1
   84c40:	e0bff315 	stw	r2,-52(fp)
   84c44:	e0bffe17 	ldw	r2,-8(fp)
   84c48:	10800117 	ldw	r2,4(r2)
   84c4c:	e0fff317 	ldw	r3,-52(fp)
   84c50:	18bfe316 	blt	r3,r2,84be0 <__alt_data_end+0xfffcc970>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   84c54:	e0bff417 	ldw	r2,-48(fp)
   84c58:	10800044 	addi	r2,r2,1
   84c5c:	e0bff415 	stw	r2,-48(fp)
   84c60:	e0bffe17 	ldw	r2,-8(fp)
   84c64:	10800217 	ldw	r2,8(r2)
   84c68:	e0fff417 	ldw	r3,-48(fp)
   84c6c:	18bfda16 	blt	r3,r2,84bd8 <__alt_data_end+0xfffcc968>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"Grid%d", GridSize);
   84c70:	e0bfff03 	ldbu	r2,-4(fp)
   84c74:	e0fff604 	addi	r3,fp,-40
   84c78:	1809883a 	mov	r4,r3
   84c7c:	014002b4 	movhi	r5,10
   84c80:	295f1904 	addi	r5,r5,31844
   84c84:	100d883a 	mov	r6,r2
   84c88:	008a5000 	call	8a500 <sprintf>
    ShowInfo(pDisplay, szText);
   84c8c:	e0bff604 	addi	r2,fp,-40
   84c90:	e13ffe17 	ldw	r4,-8(fp)
   84c94:	100b883a 	mov	r5,r2
   84c98:	0084a800 	call	84a80 <ShowInfo>

}
   84c9c:	e037883a 	mov	sp,fp
   84ca0:	dfc00117 	ldw	ra,4(sp)
   84ca4:	df000017 	ldw	fp,0(sp)
   84ca8:	dec00204 	addi	sp,sp,8
   84cac:	f800283a 	ret

00084cb0 <VPG_VGrid>:

void VPG_VGrid(alt_video_display *pDisplay, alt_u8 GridSize){
   84cb0:	defff104 	addi	sp,sp,-60
   84cb4:	dfc00e15 	stw	ra,56(sp)
   84cb8:	df000d15 	stw	fp,52(sp)
   84cbc:	df000d04 	addi	fp,sp,52
   84cc0:	e13ffe15 	stw	r4,-8(fp)
   84cc4:	2805883a 	mov	r2,r5
   84cc8:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   84ccc:	e03ff415 	stw	zero,-48(fp)
   84cd0:	00001c06 	br	84d44 <VPG_VGrid+0x94>
        for(x=0;x<pDisplay->width;x++){
   84cd4:	e03ff315 	stw	zero,-52(fp)
   84cd8:	00001306 	br	84d28 <VPG_VGrid+0x78>
            if (x%GridSize == 0)
   84cdc:	e0bfff03 	ldbu	r2,-4(fp)
   84ce0:	e0fff317 	ldw	r3,-52(fp)
   84ce4:	1809883a 	mov	r4,r3
   84ce8:	100b883a 	mov	r5,r2
   84cec:	00878280 	call	87828 <__modsi3>
   84cf0:	1000041e 	bne	r2,zero,84d04 <VPG_VGrid+0x54>
                Value32 = WHITE_24;
   84cf4:	00804034 	movhi	r2,256
   84cf8:	10bfffc4 	addi	r2,r2,-1
   84cfc:	e0bff515 	stw	r2,-44(fp)
   84d00:	00000106 	br	84d08 <VPG_VGrid+0x58>
            else
                Value32 = BLACK_24;
   84d04:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
   84d08:	e13ff317 	ldw	r4,-52(fp)
   84d0c:	e17ff417 	ldw	r5,-48(fp)
   84d10:	e1bff517 	ldw	r6,-44(fp)
   84d14:	e1fffe17 	ldw	r7,-8(fp)
   84d18:	0081b100 	call	81b10 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84d1c:	e0bff317 	ldw	r2,-52(fp)
   84d20:	10800044 	addi	r2,r2,1
   84d24:	e0bff315 	stw	r2,-52(fp)
   84d28:	e0bffe17 	ldw	r2,-8(fp)
   84d2c:	10800117 	ldw	r2,4(r2)
   84d30:	e0fff317 	ldw	r3,-52(fp)
   84d34:	18bfe916 	blt	r3,r2,84cdc <__alt_data_end+0xfffcca6c>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   84d38:	e0bff417 	ldw	r2,-48(fp)
   84d3c:	10800044 	addi	r2,r2,1
   84d40:	e0bff415 	stw	r2,-48(fp)
   84d44:	e0bffe17 	ldw	r2,-8(fp)
   84d48:	10800217 	ldw	r2,8(r2)
   84d4c:	e0fff417 	ldw	r3,-48(fp)
   84d50:	18bfe016 	blt	r3,r2,84cd4 <__alt_data_end+0xfffcca64>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"VGrid%d", GridSize);
   84d54:	e0bfff03 	ldbu	r2,-4(fp)
   84d58:	e0fff604 	addi	r3,fp,-40
   84d5c:	1809883a 	mov	r4,r3
   84d60:	014002b4 	movhi	r5,10
   84d64:	295f1b04 	addi	r5,r5,31852
   84d68:	100d883a 	mov	r6,r2
   84d6c:	008a5000 	call	8a500 <sprintf>
    ShowInfo(pDisplay, szText);
   84d70:	e0bff604 	addi	r2,fp,-40
   84d74:	e13ffe17 	ldw	r4,-8(fp)
   84d78:	100b883a 	mov	r5,r2
   84d7c:	0084a800 	call	84a80 <ShowInfo>

}
   84d80:	e037883a 	mov	sp,fp
   84d84:	dfc00117 	ldw	ra,4(sp)
   84d88:	df000017 	ldw	fp,0(sp)
   84d8c:	dec00204 	addi	sp,sp,8
   84d90:	f800283a 	ret

00084d94 <VPG_HGrid>:

void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
   84d94:	defff104 	addi	sp,sp,-60
   84d98:	dfc00e15 	stw	ra,56(sp)
   84d9c:	df000d15 	stw	fp,52(sp)
   84da0:	df000d04 	addi	fp,sp,52
   84da4:	e13ffe15 	stw	r4,-8(fp)
   84da8:	2805883a 	mov	r2,r5
   84dac:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   84db0:	e03ff415 	stw	zero,-48(fp)
   84db4:	00001c06 	br	84e28 <VPG_HGrid+0x94>
        for(x=0;x<pDisplay->width;x++){
   84db8:	e03ff315 	stw	zero,-52(fp)
   84dbc:	00001306 	br	84e0c <VPG_HGrid+0x78>
            if (y%GridSize == 0)
   84dc0:	e0bfff03 	ldbu	r2,-4(fp)
   84dc4:	e0fff417 	ldw	r3,-48(fp)
   84dc8:	1809883a 	mov	r4,r3
   84dcc:	100b883a 	mov	r5,r2
   84dd0:	00878280 	call	87828 <__modsi3>
   84dd4:	1000041e 	bne	r2,zero,84de8 <VPG_HGrid+0x54>
                Value32 = WHITE_24;
   84dd8:	00804034 	movhi	r2,256
   84ddc:	10bfffc4 	addi	r2,r2,-1
   84de0:	e0bff515 	stw	r2,-44(fp)
   84de4:	00000106 	br	84dec <VPG_HGrid+0x58>
            else
                Value32 = BLACK_24;
   84de8:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
   84dec:	e13ff317 	ldw	r4,-52(fp)
   84df0:	e17ff417 	ldw	r5,-48(fp)
   84df4:	e1bff517 	ldw	r6,-44(fp)
   84df8:	e1fffe17 	ldw	r7,-8(fp)
   84dfc:	0081b100 	call	81b10 <vid_set_pixel>
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84e00:	e0bff317 	ldw	r2,-52(fp)
   84e04:	10800044 	addi	r2,r2,1
   84e08:	e0bff315 	stw	r2,-52(fp)
   84e0c:	e0bffe17 	ldw	r2,-8(fp)
   84e10:	10800117 	ldw	r2,4(r2)
   84e14:	e0fff317 	ldw	r3,-52(fp)
   84e18:	18bfe916 	blt	r3,r2,84dc0 <__alt_data_end+0xfffccb50>
void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   84e1c:	e0bff417 	ldw	r2,-48(fp)
   84e20:	10800044 	addi	r2,r2,1
   84e24:	e0bff415 	stw	r2,-48(fp)
   84e28:	e0bffe17 	ldw	r2,-8(fp)
   84e2c:	10800217 	ldw	r2,8(r2)
   84e30:	e0fff417 	ldw	r3,-48(fp)
   84e34:	18bfe016 	blt	r3,r2,84db8 <__alt_data_end+0xfffccb48>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"HGrid%d", GridSize);
   84e38:	e0bfff03 	ldbu	r2,-4(fp)
   84e3c:	e0fff604 	addi	r3,fp,-40
   84e40:	1809883a 	mov	r4,r3
   84e44:	014002b4 	movhi	r5,10
   84e48:	295f1d04 	addi	r5,r5,31860
   84e4c:	100d883a 	mov	r6,r2
   84e50:	008a5000 	call	8a500 <sprintf>
    ShowInfo(pDisplay, szText);
   84e54:	e0bff604 	addi	r2,fp,-40
   84e58:	e13ffe17 	ldw	r4,-8(fp)
   84e5c:	100b883a 	mov	r5,r2
   84e60:	0084a800 	call	84a80 <ShowInfo>

}
   84e64:	e037883a 	mov	sp,fp
   84e68:	dfc00117 	ldw	ra,4(sp)
   84e6c:	df000017 	ldw	fp,0(sp)
   84e70:	dec00204 	addi	sp,sp,8
   84e74:	f800283a 	ret

00084e78 <VPG_ColorBar>:




void VPG_ColorBar(alt_video_display *pDisplay){
   84e78:	defffa04 	addi	sp,sp,-24
   84e7c:	dfc00515 	stw	ra,20(sp)
   84e80:	df000415 	stw	fp,16(sp)
   84e84:	df000404 	addi	fp,sp,16
   84e88:	e13fff15 	stw	r4,-4(fp)
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
   84e8c:	e03ffd15 	stw	zero,-12(fp)
   84e90:	00005806 	br	84ff4 <VPG_ColorBar+0x17c>
        for(x=0;x<pDisplay->width;x++){
   84e94:	e03ffc15 	stw	zero,-16(fp)
   84e98:	00004f06 	br	84fd8 <VPG_ColorBar+0x160>
            if (x == 0 || y == 0 || x == pDisplay->width-1 || y == pDisplay->height-1){
   84e9c:	e0bffc17 	ldw	r2,-16(fp)
   84ea0:	10000c26 	beq	r2,zero,84ed4 <VPG_ColorBar+0x5c>
   84ea4:	e0bffd17 	ldw	r2,-12(fp)
   84ea8:	10000a26 	beq	r2,zero,84ed4 <VPG_ColorBar+0x5c>
   84eac:	e0bfff17 	ldw	r2,-4(fp)
   84eb0:	10800117 	ldw	r2,4(r2)
   84eb4:	10ffffc4 	addi	r3,r2,-1
   84eb8:	e0bffc17 	ldw	r2,-16(fp)
   84ebc:	18800526 	beq	r3,r2,84ed4 <VPG_ColorBar+0x5c>
   84ec0:	e0bfff17 	ldw	r2,-4(fp)
   84ec4:	10800217 	ldw	r2,8(r2)
   84ec8:	10ffffc4 	addi	r3,r2,-1
   84ecc:	e0bffd17 	ldw	r2,-12(fp)
   84ed0:	1880041e 	bne	r3,r2,84ee4 <VPG_ColorBar+0x6c>
                Value32 = WHITE_24;
   84ed4:	00804034 	movhi	r2,256
   84ed8:	10bfffc4 	addi	r2,r2,-1
   84edc:	e0bffe15 	stw	r2,-8(fp)
   84ee0:	00003506 	br	84fb8 <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height/4){
   84ee4:	e0bfff17 	ldw	r2,-4(fp)
   84ee8:	10800217 	ldw	r2,8(r2)
   84eec:	1000010e 	bge	r2,zero,84ef4 <VPG_ColorBar+0x7c>
   84ef0:	108000c4 	addi	r2,r2,3
   84ef4:	1005d0ba 	srai	r2,r2,2
   84ef8:	e0fffd17 	ldw	r3,-12(fp)
   84efc:	1880040e 	bge	r3,r2,84f10 <VPG_ColorBar+0x98>
                // red
                Value32 = x & 0xFF;
   84f00:	e0bffc17 	ldw	r2,-16(fp)
   84f04:	10803fcc 	andi	r2,r2,255
   84f08:	e0bffe15 	stw	r2,-8(fp)
   84f0c:	00002a06 	br	84fb8 <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height/2){
   84f10:	e0bfff17 	ldw	r2,-4(fp)
   84f14:	10800217 	ldw	r2,8(r2)
   84f18:	1006d7fa 	srli	r3,r2,31
   84f1c:	1885883a 	add	r2,r3,r2
   84f20:	1005d07a 	srai	r2,r2,1
   84f24:	e0fffd17 	ldw	r3,-12(fp)
   84f28:	1880050e 	bge	r3,r2,84f40 <VPG_ColorBar+0xc8>
                Value32 = (x & 0xFF) << 8;
   84f2c:	e0bffc17 	ldw	r2,-16(fp)
   84f30:	1004923a 	slli	r2,r2,8
   84f34:	10bfffcc 	andi	r2,r2,65535
   84f38:	e0bffe15 	stw	r2,-8(fp)
   84f3c:	00001e06 	br	84fb8 <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height*3/4){
   84f40:	e0bfff17 	ldw	r2,-4(fp)
   84f44:	10c00217 	ldw	r3,8(r2)
   84f48:	1805883a 	mov	r2,r3
   84f4c:	1085883a 	add	r2,r2,r2
   84f50:	10c5883a 	add	r2,r2,r3
   84f54:	1000010e 	bge	r2,zero,84f5c <VPG_ColorBar+0xe4>
   84f58:	108000c4 	addi	r2,r2,3
   84f5c:	1005d0ba 	srai	r2,r2,2
   84f60:	e0fffd17 	ldw	r3,-12(fp)
   84f64:	1880050e 	bge	r3,r2,84f7c <VPG_ColorBar+0x104>
                Value32 = (x & 0xFF) << 16;
   84f68:	e0bffc17 	ldw	r2,-16(fp)
   84f6c:	10803fcc 	andi	r2,r2,255
   84f70:	1004943a 	slli	r2,r2,16
   84f74:	e0bffe15 	stw	r2,-8(fp)
   84f78:	00000f06 	br	84fb8 <VPG_ColorBar+0x140>
            }else{
                Value32 = x & 0xFF;
   84f7c:	e0bffc17 	ldw	r2,-16(fp)
   84f80:	10803fcc 	andi	r2,r2,255
   84f84:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 8;
   84f88:	e0bffc17 	ldw	r2,-16(fp)
   84f8c:	1004923a 	slli	r2,r2,8
   84f90:	10bfffcc 	andi	r2,r2,65535
   84f94:	e0fffe17 	ldw	r3,-8(fp)
   84f98:	1884b03a 	or	r2,r3,r2
   84f9c:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 16;
   84fa0:	e0bffc17 	ldw	r2,-16(fp)
   84fa4:	10803fcc 	andi	r2,r2,255
   84fa8:	1004943a 	slli	r2,r2,16
   84fac:	e0fffe17 	ldw	r3,-8(fp)
   84fb0:	1884b03a 	or	r2,r3,r2
   84fb4:	e0bffe15 	stw	r2,-8(fp)
            }
            vid_set_pixel(x,y,Value32, pDisplay);
   84fb8:	e13ffc17 	ldw	r4,-16(fp)
   84fbc:	e17ffd17 	ldw	r5,-12(fp)
   84fc0:	e1bffe17 	ldw	r6,-8(fp)
   84fc4:	e1ffff17 	ldw	r7,-4(fp)
   84fc8:	0081b100 	call	81b10 <vid_set_pixel>
void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84fcc:	e0bffc17 	ldw	r2,-16(fp)
   84fd0:	10800044 	addi	r2,r2,1
   84fd4:	e0bffc15 	stw	r2,-16(fp)
   84fd8:	e0bfff17 	ldw	r2,-4(fp)
   84fdc:	10800117 	ldw	r2,4(r2)
   84fe0:	e0fffc17 	ldw	r3,-16(fp)
   84fe4:	18bfad16 	blt	r3,r2,84e9c <__alt_data_end+0xfffccc2c>

void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
   84fe8:	e0bffd17 	ldw	r2,-12(fp)
   84fec:	10800044 	addi	r2,r2,1
   84ff0:	e0bffd15 	stw	r2,-12(fp)
   84ff4:	e0bfff17 	ldw	r2,-4(fp)
   84ff8:	10800217 	ldw	r2,8(r2)
   84ffc:	e0fffd17 	ldw	r3,-12(fp)
   85000:	18bfa416 	blt	r3,r2,84e94 <__alt_data_end+0xfffccc24>

        }

    }

}
   85004:	e037883a 	mov	sp,fp
   85008:	dfc00117 	ldw	ra,4(sp)
   8500c:	df000017 	ldw	fp,0(sp)
   85010:	dec00204 	addi	sp,sp,8
   85014:	f800283a 	ret

00085018 <GUI_ShowPAT>:


void GUI_ShowPAT(alt_video_display *pDisplay, int PatId){
   85018:	defffc04 	addi	sp,sp,-16
   8501c:	dfc00315 	stw	ra,12(sp)
   85020:	df000215 	stw	fp,8(sp)
   85024:	df000204 	addi	fp,sp,8
   85028:	e13ffe15 	stw	r4,-8(fp)
   8502c:	e17fff15 	stw	r5,-4(fp)

                switch(PatId){
   85030:	e0bfff17 	ldw	r2,-4(fp)
   85034:	108003e8 	cmpgeui	r2,r2,15
   85038:	1000521e 	bne	r2,zero,85184 <GUI_ShowPAT+0x16c>
   8503c:	e0bfff17 	ldw	r2,-4(fp)
   85040:	1085883a 	add	r2,r2,r2
   85044:	1087883a 	add	r3,r2,r2
   85048:	00800234 	movhi	r2,8
   8504c:	10941704 	addi	r2,r2,20572
   85050:	1885883a 	add	r2,r3,r2
   85054:	10800017 	ldw	r2,0(r2)
   85058:	1000683a 	jmp	r2
   8505c:	00085098 	cmpnei	zero,zero,8514
   85060:	000850a4 	muli	zero,zero,8514
   85064:	000850b8 	rdprs	zero,zero,8514
   85068:	000850c8 	cmpgei	zero,zero,8515
   8506c:	000850d8 	cmpnei	zero,zero,8515
   85070:	000850e8 	cmpgeui	zero,zero,8515
   85074:	000850f4 	movhi	zero,8515
   85078:	00085104 	movi	zero,8516
   8507c:	00085114 	movui	zero,8516
   85080:	00085124 	muli	zero,zero,8516
   85084:	00085134 	movhi	zero,8516
   85088:	00085144 	movi	zero,8517
   8508c:	00085154 	movui	zero,8517
   85090:	00085164 	muli	zero,zero,8517
   85094:	00085174 	movhi	zero,8517
                    case 0: VPG_ColorBar(pDisplay); break;
   85098:	e13ffe17 	ldw	r4,-8(fp)
   8509c:	0084e780 	call	84e78 <VPG_ColorBar>
   850a0:	00003806 	br	85184 <GUI_ShowPAT+0x16c>
                    case 1: VPG_ColorPanel(pDisplay, WHITE_24); break;
   850a4:	e13ffe17 	ldw	r4,-8(fp)
   850a8:	01404034 	movhi	r5,256
   850ac:	297fffc4 	addi	r5,r5,-1
   850b0:	0084b040 	call	84b04 <VPG_ColorPanel>
   850b4:	00003306 	br	85184 <GUI_ShowPAT+0x16c>
                    case 2: VPG_ColorPanel(pDisplay, RED_24); break;
   850b8:	e13ffe17 	ldw	r4,-8(fp)
   850bc:	01403ff4 	movhi	r5,255
   850c0:	0084b040 	call	84b04 <VPG_ColorPanel>
   850c4:	00002f06 	br	85184 <GUI_ShowPAT+0x16c>
                    case 3: VPG_ColorPanel(pDisplay, GREEN_24); break;
   850c8:	e13ffe17 	ldw	r4,-8(fp)
   850cc:	01600014 	movui	r5,32768
   850d0:	0084b040 	call	84b04 <VPG_ColorPanel>
   850d4:	00002b06 	br	85184 <GUI_ShowPAT+0x16c>
                    case 4: VPG_ColorPanel(pDisplay, BLUE_24); break;
   850d8:	e13ffe17 	ldw	r4,-8(fp)
   850dc:	01403fc4 	movi	r5,255
   850e0:	0084b040 	call	84b04 <VPG_ColorPanel>
   850e4:	00002706 	br	85184 <GUI_ShowPAT+0x16c>
                    case 5: VPG_XLine(pDisplay); break;
   850e8:	e13ffe17 	ldw	r4,-8(fp)
   850ec:	0084ae00 	call	84ae0 <VPG_XLine>
   850f0:	00002406 	br	85184 <GUI_ShowPAT+0x16c>
                    case 6: VPG_VGrid(pDisplay, 2); break;
   850f4:	e13ffe17 	ldw	r4,-8(fp)
   850f8:	01400084 	movi	r5,2
   850fc:	0084cb00 	call	84cb0 <VPG_VGrid>
   85100:	00002006 	br	85184 <GUI_ShowPAT+0x16c>
                    case 7: VPG_VGrid(pDisplay, 4); break;
   85104:	e13ffe17 	ldw	r4,-8(fp)
   85108:	01400104 	movi	r5,4
   8510c:	0084cb00 	call	84cb0 <VPG_VGrid>
   85110:	00001c06 	br	85184 <GUI_ShowPAT+0x16c>
                    case 8: VPG_VGrid(pDisplay, 8); break;
   85114:	e13ffe17 	ldw	r4,-8(fp)
   85118:	01400204 	movi	r5,8
   8511c:	0084cb00 	call	84cb0 <VPG_VGrid>
   85120:	00001806 	br	85184 <GUI_ShowPAT+0x16c>
                    case 9: VPG_HGrid(pDisplay, 2); break;
   85124:	e13ffe17 	ldw	r4,-8(fp)
   85128:	01400084 	movi	r5,2
   8512c:	0084d940 	call	84d94 <VPG_HGrid>
   85130:	00001406 	br	85184 <GUI_ShowPAT+0x16c>
                    case 10: VPG_HGrid(pDisplay, 4); break;
   85134:	e13ffe17 	ldw	r4,-8(fp)
   85138:	01400104 	movi	r5,4
   8513c:	0084d940 	call	84d94 <VPG_HGrid>
   85140:	00001006 	br	85184 <GUI_ShowPAT+0x16c>
                    case 11: VPG_HGrid(pDisplay, 8); break;
   85144:	e13ffe17 	ldw	r4,-8(fp)
   85148:	01400204 	movi	r5,8
   8514c:	0084d940 	call	84d94 <VPG_HGrid>
   85150:	00000c06 	br	85184 <GUI_ShowPAT+0x16c>
                    case 12: VPG_Grid(pDisplay, 2); break;
   85154:	e13ffe17 	ldw	r4,-8(fp)
   85158:	01400084 	movi	r5,2
   8515c:	0084bb40 	call	84bb4 <VPG_Grid>
   85160:	00000806 	br	85184 <GUI_ShowPAT+0x16c>
                    case 13: VPG_Grid(pDisplay, 4); break;
   85164:	e13ffe17 	ldw	r4,-8(fp)
   85168:	01400104 	movi	r5,4
   8516c:	0084bb40 	call	84bb4 <VPG_Grid>
   85170:	00000406 	br	85184 <GUI_ShowPAT+0x16c>
                    case 14: VPG_Grid(pDisplay, 8); break;
   85174:	e13ffe17 	ldw	r4,-8(fp)
   85178:	01400204 	movi	r5,8
   8517c:	0084bb40 	call	84bb4 <VPG_Grid>
   85180:	0001883a 	nop
                }

}
   85184:	e037883a 	mov	sp,fp
   85188:	dfc00117 	ldw	ra,4(sp)
   8518c:	df000017 	ldw	fp,0(sp)
   85190:	dec00204 	addi	sp,sp,8
   85194:	f800283a 	ret

00085198 <GUI_VPG>:

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
   85198:	defff904 	addi	sp,sp,-28
   8519c:	dfc00615 	stw	ra,24(sp)
   851a0:	df000515 	stw	fp,20(sp)
   851a4:	df000504 	addi	fp,sp,20
   851a8:	e13ffe15 	stw	r4,-8(fp)
   851ac:	e17fff15 	stw	r5,-4(fp)
	int X, Y;
	int PatId = 0;
   851b0:	e03ffb15 	stw	zero,-20(fp)

    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
   851b4:	e13ffe17 	ldw	r4,-8(fp)
   851b8:	000b883a 	mov	r5,zero
   851bc:	008106c0 	call	8106c <vid_clean_screen>


    VPG_ColorBar(pDisplay);
   851c0:	e13ffe17 	ldw	r4,-8(fp)
   851c4:	0084e780 	call	84e78 <VPG_ColorBar>

    GUI_ShowPAT(pDisplay, PatId);
   851c8:	e13ffe17 	ldw	r4,-8(fp)
   851cc:	e17ffb17 	ldw	r5,-20(fp)
   851d0:	00850180 	call	85018 <GUI_ShowPAT>

    while(1){
        if (Touch_GetXY(pTouch, &X, &Y)){
   851d4:	e0fffc04 	addi	r3,fp,-16
   851d8:	e0bffd04 	addi	r2,fp,-12
   851dc:	e13fff17 	ldw	r4,-4(fp)
   851e0:	180b883a 	mov	r5,r3
   851e4:	100d883a 	mov	r6,r2
   851e8:	0086acc0 	call	86acc <Touch_GetXY>
   851ec:	10001426 	beq	r2,zero,85240 <GUI_VPG+0xa8>
            //printf(".");

            // change pattern
            PatId++;
   851f0:	e0bffb17 	ldw	r2,-20(fp)
   851f4:	10800044 	addi	r2,r2,1
   851f8:	e0bffb15 	stw	r2,-20(fp)
            if (PatId > 14)
   851fc:	e0bffb17 	ldw	r2,-20(fp)
   85200:	108003d0 	cmplti	r2,r2,15
   85204:	1000011e 	bne	r2,zero,8520c <GUI_VPG+0x74>
                PatId = 0;
   85208:	e03ffb15 	stw	zero,-20(fp)

            printf("PatId=%d\r\n", PatId);
   8520c:	010002b4 	movhi	r4,10
   85210:	211f1f04 	addi	r4,r4,31868
   85214:	e17ffb17 	ldw	r5,-20(fp)
   85218:	008a36c0 	call	8a36c <printf>
            GUI_ShowPAT(pDisplay, PatId);
   8521c:	e13ffe17 	ldw	r4,-8(fp)
   85220:	e17ffb17 	ldw	r5,-20(fp)
   85224:	00850180 	call	85018 <GUI_ShowPAT>
            usleep(300*1000); // debounce
   85228:	01000174 	movhi	r4,5
   8522c:	2124f804 	addi	r4,r4,-27680
   85230:	008bff40 	call	8bff4 <usleep>
            Touch_EmptyFifo( pTouch);
   85234:	e13fff17 	ldw	r4,-4(fp)
   85238:	0086a940 	call	86a94 <Touch_EmptyFifo>
        }
    }
   8523c:	003fe506 	br	851d4 <__alt_data_end+0xfffccf64>
   85240:	003fe406 	br	851d4 <__alt_data_end+0xfffccf64>

00085244 <main>:
#include "system.h"

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch);

int main()
{
   85244:	defff704 	addi	sp,sp,-36
   85248:	dfc00815 	stw	ra,32(sp)
   8524c:	df000715 	stw	fp,28(sp)
   85250:	df000704 	addi	fp,sp,28
	TOUCH_HANDLE *pTouch;
	alt_video_display Display;


    const bool bVPG = ((IORD(KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
   85254:	00800434 	movhi	r2,16
   85258:	10841004 	addi	r2,r2,4160
   8525c:	10800037 	ldwio	r2,0(r2)
   85260:	1080004c 	andi	r2,r2,1
   85264:	1005003a 	cmpeq	r2,r2,zero
   85268:	10803fcc 	andi	r2,r2,255
   8526c:	e0bff915 	stw	r2,-28(fp)

   printf("LT24 Demo!\n");
   85270:	010002b4 	movhi	r4,10
   85274:	211f2204 	addi	r4,r4,31880
   85278:	008a4380 	call	8a438 <puts>

   // init touch
   pTouch = Touch_Init(TOUCH_PANEL_SPI_BASE, TOUCH_PANEL_PEN_IRQ_N_BASE, TOUCH_PANEL_PEN_IRQ_N_IRQ);
   8527c:	01000434 	movhi	r4,16
   85280:	21040004 	addi	r4,r4,4096
   85284:	01400434 	movhi	r5,16
   85288:	29441c04 	addi	r5,r5,4208
   8528c:	01800144 	movi	r6,5
   85290:	00868bc0 	call	868bc <Touch_Init>
   85294:	e0bffa15 	stw	r2,-24(fp)
   if (!pTouch){
   85298:	e0bffa17 	ldw	r2,-24(fp)
   8529c:	1000041e 	bne	r2,zero,852b0 <main+0x6c>
       printf("Failed to init touch\r\n");
   852a0:	010002b4 	movhi	r4,10
   852a4:	211f2504 	addi	r4,r4,31892
   852a8:	008a4380 	call	8a438 <puts>
   852ac:	00000306 	br	852bc <main+0x78>
   }else{
       printf("Init touch successfully\r\n");
   852b0:	010002b4 	movhi	r4,10
   852b4:	211f2b04 	addi	r4,r4,31916
   852b8:	008a4380 	call	8a438 <puts>

   }

   // init LCD
   LCD_Init();
   852bc:	00807e80 	call	807e8 <LCD_Init>
   LCD_Clear(0X0000);
   852c0:	0009883a 	mov	r4,zero
   852c4:	00806fc0 	call	806fc <LCD_Clear>

   Display.interlace = 0;
   852c8:	e03fff15 	stw	zero,-4(fp)
   Display.bytes_per_pixel = 2;
   852cc:	00800084 	movi	r2,2
   852d0:	e0bffe15 	stw	r2,-8(fp)
   Display.color_depth = 16;
   852d4:	00800404 	movi	r2,16
   852d8:	e0bffb15 	stw	r2,-20(fp)
   Display.height = SCREEN_HEIGHT;
   852dc:	00805004 	movi	r2,320
   852e0:	e0bffd15 	stw	r2,-12(fp)
   Display.width = SCREEN_WIDTH;
   852e4:	00803c04 	movi	r2,240
   852e8:	e0bffc15 	stw	r2,-16(fp)
//
//   // run demo
  if (bVPG)
   852ec:	e0bff917 	ldw	r2,-28(fp)
   852f0:	10000526 	beq	r2,zero,85308 <main+0xc4>
       GUI_VPG(&Display, pTouch); // enter vpg mode when users press KEY0
   852f4:	e0bffb04 	addi	r2,fp,-20
   852f8:	1009883a 	mov	r4,r2
   852fc:	e17ffa17 	ldw	r5,-24(fp)
   85300:	00851980 	call	85198 <GUI_VPG>
   85304:	00000406 	br	85318 <main+0xd4>
   else
	   GUI(&Display, pTouch);
   85308:	e0bffb04 	addi	r2,fp,-20
   8530c:	1009883a 	mov	r4,r2
   85310:	e17ffa17 	ldw	r5,-24(fp)
   85314:	00847a00 	call	847a0 <GUI>


}
   85318:	e037883a 	mov	sp,fp
   8531c:	dfc00117 	ldw	ra,4(sp)
   85320:	df000017 	ldw	fp,0(sp)
   85324:	dec00204 	addi	sp,sp,8
   85328:	f800283a 	ret

0008532c <my_wait>:
    #define I2C_DEBUG(x)    DEBUG(x)  
#else
    #define I2C_DEBUG(x)
#endif

void my_wait(int nWait){
   8532c:	defffd04 	addi	sp,sp,-12
   85330:	df000215 	stw	fp,8(sp)
   85334:	df000204 	addi	fp,sp,8
   85338:	e13fff15 	stw	r4,-4(fp)
    int i;
    i = 0;
   8533c:	e03ffe15 	stw	zero,-8(fp)
    while (i < nWait){
   85340:	00000306 	br	85350 <my_wait+0x24>
        i++;
   85344:	e0bffe17 	ldw	r2,-8(fp)
   85348:	10800044 	addi	r2,r2,1
   8534c:	e0bffe15 	stw	r2,-8(fp)
#endif

void my_wait(int nWait){
    int i;
    i = 0;
    while (i < nWait){
   85350:	e0fffe17 	ldw	r3,-8(fp)
   85354:	e0bfff17 	ldw	r2,-4(fp)
   85358:	18bffa16 	blt	r3,r2,85344 <__alt_data_end+0xfffcd0d4>
        i++;
     //   IOWR(LED_BASE, 0, i);
    }    
}
   8535c:	e037883a 	mov	sp,fp
   85360:	df000017 	ldw	fp,0(sp)
   85364:	dec00104 	addi	sp,sp,4
   85368:	f800283a 	ret

0008536c <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
   8536c:	defff804 	addi	sp,sp,-32
   85370:	dfc00715 	stw	ra,28(sp)
   85374:	df000615 	stw	fp,24(sp)
   85378:	df000604 	addi	fp,sp,24
   8537c:	e13ffb15 	stw	r4,-20(fp)
   85380:	e17ffc15 	stw	r5,-16(fp)
   85384:	3009883a 	mov	r4,r6
   85388:	3807883a 	mov	r3,r7
   8538c:	e0800217 	ldw	r2,8(fp)
   85390:	e13ffd05 	stb	r4,-12(fp)
   85394:	e0fffe05 	stb	r3,-8(fp)
   85398:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   8539c:	00800044 	movi	r2,1
   853a0:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   853a4:	e13ffb17 	ldw	r4,-20(fp)
   853a8:	e17ffc17 	ldw	r5,-16(fp)
   853ac:	00859c00 	call	859c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   853b0:	e0bffd03 	ldbu	r2,-12(fp)
   853b4:	10803fcc 	andi	r2,r2,255
   853b8:	e13ffb17 	ldw	r4,-20(fp)
   853bc:	e17ffc17 	ldw	r5,-16(fp)
   853c0:	100d883a 	mov	r6,r2
   853c4:	0085ab40 	call	85ab4 <i2c_write>
   853c8:	1000041e 	bne	r2,zero,853dc <I2C_Write+0x70>
        bSuccess = FALSE;
   853cc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   853d0:	010002b4 	movhi	r4,10
   853d4:	211f3204 	addi	r4,r4,31944
   853d8:	00864a40 	call	864a4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   853dc:	e0bffa17 	ldw	r2,-24(fp)
   853e0:	10000a26 	beq	r2,zero,8540c <I2C_Write+0xa0>
   853e4:	e0bffe03 	ldbu	r2,-8(fp)
   853e8:	e13ffb17 	ldw	r4,-20(fp)
   853ec:	e17ffc17 	ldw	r5,-16(fp)
   853f0:	100d883a 	mov	r6,r2
   853f4:	0085ab40 	call	85ab4 <i2c_write>
   853f8:	1000041e 	bne	r2,zero,8540c <I2C_Write+0xa0>
        bSuccess = FALSE;
   853fc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
   85400:	010002b4 	movhi	r4,10
   85404:	211f3a04 	addi	r4,r4,31976
   85408:	00864a40 	call	864a4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
   8540c:	e0bffa17 	ldw	r2,-24(fp)
   85410:	10000a26 	beq	r2,zero,8543c <I2C_Write+0xd0>
   85414:	e0bfff03 	ldbu	r2,-4(fp)
   85418:	e13ffb17 	ldw	r4,-20(fp)
   8541c:	e17ffc17 	ldw	r5,-16(fp)
   85420:	100d883a 	mov	r6,r2
   85424:	0085ab40 	call	85ab4 <i2c_write>
   85428:	1000041e 	bne	r2,zero,8543c <I2C_Write+0xd0>
        bSuccess = FALSE;
   8542c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   85430:	010002b4 	movhi	r4,10
   85434:	211f4304 	addi	r4,r4,32012
   85438:	00864a40 	call	864a4 <myprintf>
    }
    i2c_stop(clk_base, data_base);
   8543c:	e13ffb17 	ldw	r4,-20(fp)
   85440:	e17ffc17 	ldw	r5,-16(fp)
   85444:	0085a440 	call	85a44 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   85448:	0106d604 	movi	r4,7000
   8544c:	008bff40 	call	8bff4 <usleep>
    
    return bSuccess;
   85450:	e0bffa17 	ldw	r2,-24(fp)

    
}
   85454:	e037883a 	mov	sp,fp
   85458:	dfc00117 	ldw	ra,4(sp)
   8545c:	df000017 	ldw	fp,0(sp)
   85460:	dec00204 	addi	sp,sp,8
   85464:	f800283a 	ret

00085468 <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
   85468:	defff704 	addi	sp,sp,-36
   8546c:	dfc00815 	stw	ra,32(sp)
   85470:	df000715 	stw	fp,28(sp)
   85474:	df000704 	addi	fp,sp,28
   85478:	e13ffb15 	stw	r4,-20(fp)
   8547c:	e17ffc15 	stw	r5,-16(fp)
   85480:	3009883a 	mov	r4,r6
   85484:	3807883a 	mov	r3,r7
   85488:	e0800217 	ldw	r2,8(fp)
   8548c:	e13ffd05 	stb	r4,-12(fp)
   85490:	e0fffe05 	stb	r3,-8(fp)
   85494:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
   85498:	00800044 	movi	r2,1
   8549c:	e0bff915 	stw	r2,-28(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
   854a0:	e0bfff0b 	ldhu	r2,-4(fp)
   854a4:	1004d23a 	srli	r2,r2,8
   854a8:	e0bffa05 	stb	r2,-24(fp)
    LowByte = ControlData & 0xFF; 
   854ac:	e0bfff0b 	ldhu	r2,-4(fp)
   854b0:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   854b4:	e13ffb17 	ldw	r4,-20(fp)
   854b8:	e17ffc17 	ldw	r5,-16(fp)
   854bc:	00859c00 	call	859c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   854c0:	e0bffd03 	ldbu	r2,-12(fp)
   854c4:	10803fcc 	andi	r2,r2,255
   854c8:	e13ffb17 	ldw	r4,-20(fp)
   854cc:	e17ffc17 	ldw	r5,-16(fp)
   854d0:	100d883a 	mov	r6,r2
   854d4:	0085ab40 	call	85ab4 <i2c_write>
   854d8:	1000041e 	bne	r2,zero,854ec <I2C_Write16+0x84>
        bSuccess = FALSE;
   854dc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   854e0:	010002b4 	movhi	r4,10
   854e4:	211f3204 	addi	r4,r4,31944
   854e8:	00864a40 	call	864a4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   854ec:	e0bff917 	ldw	r2,-28(fp)
   854f0:	10000a26 	beq	r2,zero,8551c <I2C_Write16+0xb4>
   854f4:	e0bffe03 	ldbu	r2,-8(fp)
   854f8:	e13ffb17 	ldw	r4,-20(fp)
   854fc:	e17ffc17 	ldw	r5,-16(fp)
   85500:	100d883a 	mov	r6,r2
   85504:	0085ab40 	call	85ab4 <i2c_write>
   85508:	1000041e 	bne	r2,zero,8551c <I2C_Write16+0xb4>
        bSuccess = FALSE;
   8550c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
   85510:	010002b4 	movhi	r4,10
   85514:	211f3a04 	addi	r4,r4,31976
   85518:	00864a40 	call	864a4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
   8551c:	e0bff917 	ldw	r2,-28(fp)
   85520:	10000a26 	beq	r2,zero,8554c <I2C_Write16+0xe4>
   85524:	e0bffa03 	ldbu	r2,-24(fp)
   85528:	e13ffb17 	ldw	r4,-20(fp)
   8552c:	e17ffc17 	ldw	r5,-16(fp)
   85530:	100d883a 	mov	r6,r2
   85534:	0085ab40 	call	85ab4 <i2c_write>
   85538:	1000041e 	bne	r2,zero,8554c <I2C_Write16+0xe4>
        bSuccess = FALSE;
   8553c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   85540:	010002b4 	movhi	r4,10
   85544:	211f4304 	addi	r4,r4,32012
   85548:	00864a40 	call	864a4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
   8554c:	e0bff917 	ldw	r2,-28(fp)
   85550:	10000a26 	beq	r2,zero,8557c <I2C_Write16+0x114>
   85554:	e0bffa43 	ldbu	r2,-23(fp)
   85558:	e13ffb17 	ldw	r4,-20(fp)
   8555c:	e17ffc17 	ldw	r5,-16(fp)
   85560:	100d883a 	mov	r6,r2
   85564:	0085ab40 	call	85ab4 <i2c_write>
   85568:	1000041e 	bne	r2,zero,8557c <I2C_Write16+0x114>
        bSuccess = FALSE;
   8556c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   85570:	010002b4 	movhi	r4,10
   85574:	211f4304 	addi	r4,r4,32012
   85578:	00864a40 	call	864a4 <myprintf>
    }    
    i2c_stop(clk_base, data_base);
   8557c:	e13ffb17 	ldw	r4,-20(fp)
   85580:	e17ffc17 	ldw	r5,-16(fp)
   85584:	0085a440 	call	85a44 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   85588:	0106d604 	movi	r4,7000
   8558c:	008bff40 	call	8bff4 <usleep>
    
    return bSuccess;
   85590:	e0bff917 	ldw	r2,-28(fp)

    
}
   85594:	e037883a 	mov	sp,fp
   85598:	dfc00117 	ldw	ra,4(sp)
   8559c:	df000017 	ldw	fp,0(sp)
   855a0:	dec00204 	addi	sp,sp,8
   855a4:	f800283a 	ret

000855a8 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
   855a8:	defff904 	addi	sp,sp,-28
   855ac:	dfc00615 	stw	ra,24(sp)
   855b0:	df000515 	stw	fp,20(sp)
   855b4:	df000504 	addi	fp,sp,20
   855b8:	e13ffc15 	stw	r4,-16(fp)
   855bc:	e17ffd15 	stw	r5,-12(fp)
   855c0:	3007883a 	mov	r3,r6
   855c4:	3805883a 	mov	r2,r7
   855c8:	e0fffe05 	stb	r3,-8(fp)
   855cc:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   855d0:	00800044 	movi	r2,1
   855d4:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   855d8:	e13ffc17 	ldw	r4,-16(fp)
   855dc:	e17ffd17 	ldw	r5,-12(fp)
   855e0:	00859c00 	call	859c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   855e4:	e0bffe03 	ldbu	r2,-8(fp)
   855e8:	10803fcc 	andi	r2,r2,255
   855ec:	e13ffc17 	ldw	r4,-16(fp)
   855f0:	e17ffd17 	ldw	r5,-12(fp)
   855f4:	100d883a 	mov	r6,r2
   855f8:	0085ab40 	call	85ab4 <i2c_write>
   855fc:	1000041e 	bne	r2,zero,85610 <I2C_Read+0x68>
        bSuccess = FALSE;
   85600:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(1) Fail: Address NACK!\n"));
   85604:	010002b4 	movhi	r4,10
   85608:	211f4b04 	addi	r4,r4,32044
   8560c:	00864a40 	call	864a4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   85610:	e0bffb17 	ldw	r2,-20(fp)
   85614:	10000a26 	beq	r2,zero,85640 <I2C_Read+0x98>
   85618:	e0bfff03 	ldbu	r2,-4(fp)
   8561c:	e13ffc17 	ldw	r4,-16(fp)
   85620:	e17ffd17 	ldw	r5,-12(fp)
   85624:	100d883a 	mov	r6,r2
   85628:	0085ab40 	call	85ab4 <i2c_write>
   8562c:	1000041e 	bne	r2,zero,85640 <I2C_Read+0x98>
        bSuccess = FALSE;
   85630:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(2) Fail: SubAddress NACK!\n"));
   85634:	010002b4 	movhi	r4,10
   85638:	211f5404 	addi	r4,r4,32080
   8563c:	00864a40 	call	864a4 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
   85640:	e13ffc17 	ldw	r4,-16(fp)
   85644:	e17ffd17 	ldw	r5,-12(fp)
   85648:	00859c00 	call	859c0 <i2c_start>
    DeviceAddr |= 1; // Read
   8564c:	e0bffe03 	ldbu	r2,-8(fp)
   85650:	10800054 	ori	r2,r2,1
   85654:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   85658:	e0bffb17 	ldw	r2,-20(fp)
   8565c:	10000b26 	beq	r2,zero,8568c <I2C_Read+0xe4>
   85660:	e0bffe03 	ldbu	r2,-8(fp)
   85664:	10803fcc 	andi	r2,r2,255
   85668:	e13ffc17 	ldw	r4,-16(fp)
   8566c:	e17ffd17 	ldw	r5,-12(fp)
   85670:	100d883a 	mov	r6,r2
   85674:	0085ab40 	call	85ab4 <i2c_write>
   85678:	1000041e 	bne	r2,zero,8568c <I2C_Read+0xe4>
        bSuccess = FALSE;
   8567c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(3) Fail: Address+1 NACK!\n"));
   85680:	010002b4 	movhi	r4,10
   85684:	211f5d04 	addi	r4,r4,32116
   85688:	00864a40 	call	864a4 <myprintf>
    }
    
    if (bSuccess){
   8568c:	e0bffb17 	ldw	r2,-20(fp)
   85690:	10000526 	beq	r2,zero,856a8 <I2C_Read+0x100>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   85694:	e13ffc17 	ldw	r4,-16(fp)
   85698:	e17ffd17 	ldw	r5,-12(fp)
   8569c:	e1800217 	ldw	r6,8(fp)
   856a0:	000f883a 	mov	r7,zero
   856a4:	0085c140 	call	85c14 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
   856a8:	e13ffc17 	ldw	r4,-16(fp)
   856ac:	e17ffd17 	ldw	r5,-12(fp)
   856b0:	0085a440 	call	85a44 <i2c_stop>
    
    return bSuccess;
   856b4:	e0bffb17 	ldw	r2,-20(fp)
}
   856b8:	e037883a 	mov	sp,fp
   856bc:	dfc00117 	ldw	ra,4(sp)
   856c0:	df000017 	ldw	fp,0(sp)
   856c4:	dec00204 	addi	sp,sp,8
   856c8:	f800283a 	ret

000856cc <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
   856cc:	defff804 	addi	sp,sp,-32
   856d0:	dfc00715 	stw	ra,28(sp)
   856d4:	df000615 	stw	fp,24(sp)
   856d8:	df000604 	addi	fp,sp,24
   856dc:	e13ffc15 	stw	r4,-16(fp)
   856e0:	e17ffd15 	stw	r5,-12(fp)
   856e4:	3007883a 	mov	r3,r6
   856e8:	3805883a 	mov	r2,r7
   856ec:	e0fffe05 	stb	r3,-8(fp)
   856f0:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   856f4:	00800044 	movi	r2,1
   856f8:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   856fc:	e13ffc17 	ldw	r4,-16(fp)
   85700:	e17ffd17 	ldw	r5,-12(fp)
   85704:	00859c00 	call	859c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   85708:	e0bffe03 	ldbu	r2,-8(fp)
   8570c:	10803fcc 	andi	r2,r2,255
   85710:	e13ffc17 	ldw	r4,-16(fp)
   85714:	e17ffd17 	ldw	r5,-12(fp)
   85718:	100d883a 	mov	r6,r2
   8571c:	0085ab40 	call	85ab4 <i2c_write>
   85720:	1000041e 	bne	r2,zero,85734 <I2C_Read16+0x68>
        bSuccess = FALSE;
   85724:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   85728:	010002b4 	movhi	r4,10
   8572c:	211f3204 	addi	r4,r4,31944
   85730:	00864a40 	call	864a4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   85734:	e0bffa17 	ldw	r2,-24(fp)
   85738:	10000a26 	beq	r2,zero,85764 <I2C_Read16+0x98>
   8573c:	e0bfff03 	ldbu	r2,-4(fp)
   85740:	e13ffc17 	ldw	r4,-16(fp)
   85744:	e17ffd17 	ldw	r5,-12(fp)
   85748:	100d883a 	mov	r6,r2
   8574c:	0085ab40 	call	85ab4 <i2c_write>
   85750:	1000041e 	bne	r2,zero,85764 <I2C_Read16+0x98>
        bSuccess = FALSE;
   85754:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
   85758:	010002b4 	movhi	r4,10
   8575c:	211f3a04 	addi	r4,r4,31976
   85760:	00864a40 	call	864a4 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
   85764:	e13ffc17 	ldw	r4,-16(fp)
   85768:	e17ffd17 	ldw	r5,-12(fp)
   8576c:	00859c00 	call	859c0 <i2c_start>
    DeviceAddr |= 1; // Read
   85770:	e0bffe03 	ldbu	r2,-8(fp)
   85774:	10800054 	ori	r2,r2,1
   85778:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   8577c:	e0bffa17 	ldw	r2,-24(fp)
   85780:	10000b26 	beq	r2,zero,857b0 <I2C_Read16+0xe4>
   85784:	e0bffe03 	ldbu	r2,-8(fp)
   85788:	10803fcc 	andi	r2,r2,255
   8578c:	e13ffc17 	ldw	r4,-16(fp)
   85790:	e17ffd17 	ldw	r5,-12(fp)
   85794:	100d883a 	mov	r6,r2
   85798:	0085ab40 	call	85ab4 <i2c_write>
   8579c:	1000041e 	bne	r2,zero,857b0 <I2C_Read16+0xe4>
        bSuccess = FALSE;
   857a0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
   857a4:	010002b4 	movhi	r4,10
   857a8:	211f6604 	addi	r4,r4,32152
   857ac:	00864a40 	call	864a4 <myprintf>
    }
    
    if (bSuccess){
   857b0:	e0bffa17 	ldw	r2,-24(fp)
   857b4:	10000626 	beq	r2,zero,857d0 <I2C_Read16+0x104>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
   857b8:	e0bffb44 	addi	r2,fp,-19
   857bc:	e13ffc17 	ldw	r4,-16(fp)
   857c0:	e17ffd17 	ldw	r5,-12(fp)
   857c4:	100d883a 	mov	r6,r2
   857c8:	01c00044 	movi	r7,1
   857cc:	0085c140 	call	85c14 <i2c_read>
    }        
    if (bSuccess){
   857d0:	e0bffa17 	ldw	r2,-24(fp)
   857d4:	10000626 	beq	r2,zero,857f0 <I2C_Read16+0x124>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
   857d8:	e0bffb04 	addi	r2,fp,-20
   857dc:	e13ffc17 	ldw	r4,-16(fp)
   857e0:	e17ffd17 	ldw	r5,-12(fp)
   857e4:	100d883a 	mov	r6,r2
   857e8:	000f883a 	mov	r7,zero
   857ec:	0085c140 	call	85c14 <i2c_read>
    }        
    if (bSuccess)
   857f0:	e0bffa17 	ldw	r2,-24(fp)
   857f4:	10000a26 	beq	r2,zero,85820 <I2C_Read16+0x154>
        *pControlData = (HighByte << 8) | LowByte;
   857f8:	e0bffb43 	ldbu	r2,-19(fp)
   857fc:	10803fcc 	andi	r2,r2,255
   85800:	1004923a 	slli	r2,r2,8
   85804:	1007883a 	mov	r3,r2
   85808:	e0bffb03 	ldbu	r2,-20(fp)
   8580c:	10803fcc 	andi	r2,r2,255
   85810:	1884b03a 	or	r2,r3,r2
   85814:	1007883a 	mov	r3,r2
   85818:	e0800217 	ldw	r2,8(fp)
   8581c:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
   85820:	e13ffc17 	ldw	r4,-16(fp)
   85824:	e17ffd17 	ldw	r5,-12(fp)
   85828:	0085a440 	call	85a44 <i2c_stop>
    
    return bSuccess;
   8582c:	e0bffa17 	ldw	r2,-24(fp)
}
   85830:	e037883a 	mov	sp,fp
   85834:	dfc00117 	ldw	ra,4(sp)
   85838:	df000017 	ldw	fp,0(sp)
   8583c:	dec00204 	addi	sp,sp,8
   85840:	f800283a 	ret

00085844 <I2C_MultipleRead>:


bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
   85844:	defff704 	addi	sp,sp,-36
   85848:	dfc00815 	stw	ra,32(sp)
   8584c:	df000715 	stw	fp,28(sp)
   85850:	df000704 	addi	fp,sp,28
   85854:	e13ffb15 	stw	r4,-20(fp)
   85858:	e17ffc15 	stw	r5,-16(fp)
   8585c:	3009883a 	mov	r4,r6
   85860:	3807883a 	mov	r3,r7
   85864:	e0800317 	ldw	r2,12(fp)
   85868:	e13ffd05 	stb	r4,-12(fp)
   8586c:	e0fffe05 	stb	r3,-8(fp)
   85870:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
   85874:	00800044 	movi	r2,1
   85878:	e0bffa15 	stw	r2,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   8587c:	e13ffb17 	ldw	r4,-20(fp)
   85880:	e17ffc17 	ldw	r5,-16(fp)
   85884:	00859c00 	call	859c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   85888:	e0bffd03 	ldbu	r2,-12(fp)
   8588c:	10803fcc 	andi	r2,r2,255
   85890:	e13ffb17 	ldw	r4,-20(fp)
   85894:	e17ffc17 	ldw	r5,-16(fp)
   85898:	100d883a 	mov	r6,r2
   8589c:	0085ab40 	call	85ab4 <i2c_write>
   858a0:	1000041e 	bne	r2,zero,858b4 <I2C_MultipleRead+0x70>
        bSuccess = FALSE;
   858a4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(1) Fail: Address NACK!\n"));
   858a8:	010002b4 	movhi	r4,10
   858ac:	211f6f04 	addi	r4,r4,32188
   858b0:	00864a40 	call	864a4 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   858b4:	e0bffa17 	ldw	r2,-24(fp)
   858b8:	10000a26 	beq	r2,zero,858e4 <I2C_MultipleRead+0xa0>
   858bc:	e0bffe03 	ldbu	r2,-8(fp)
   858c0:	e13ffb17 	ldw	r4,-20(fp)
   858c4:	e17ffc17 	ldw	r5,-16(fp)
   858c8:	100d883a 	mov	r6,r2
   858cc:	0085ab40 	call	85ab4 <i2c_write>
   858d0:	1000041e 	bne	r2,zero,858e4 <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
   858d4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(2) Fail: SubAddress NACK!\n"));
   858d8:	010002b4 	movhi	r4,10
   858dc:	211f7a04 	addi	r4,r4,32232
   858e0:	00864a40 	call	864a4 <myprintf>
    }    
    if (bSuccess)        
   858e4:	e0bffa17 	ldw	r2,-24(fp)
   858e8:	10000326 	beq	r2,zero,858f8 <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
   858ec:	e13ffb17 	ldw	r4,-20(fp)
   858f0:	e17ffc17 	ldw	r5,-16(fp)
   858f4:	00859c00 	call	859c0 <i2c_start>
    DeviceAddr |= 1; // Read
   858f8:	e0bffd03 	ldbu	r2,-12(fp)
   858fc:	10800054 	ori	r2,r2,1
   85900:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   85904:	e0bffa17 	ldw	r2,-24(fp)
   85908:	10000b26 	beq	r2,zero,85938 <I2C_MultipleRead+0xf4>
   8590c:	e0bffd03 	ldbu	r2,-12(fp)
   85910:	10803fcc 	andi	r2,r2,255
   85914:	e13ffb17 	ldw	r4,-20(fp)
   85918:	e17ffc17 	ldw	r5,-16(fp)
   8591c:	100d883a 	mov	r6,r2
   85920:	0085ab40 	call	85ab4 <i2c_write>
   85924:	1000041e 	bne	r2,zero,85938 <I2C_MultipleRead+0xf4>
        bSuccess = FALSE;
   85928:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
   8592c:	010002b4 	movhi	r4,10
   85930:	211f8504 	addi	r4,r4,32276
   85934:	00864a40 	call	864a4 <myprintf>
    }
    
    if (bSuccess){
   85938:	e0bffa17 	ldw	r2,-24(fp)
   8593c:	10001726 	beq	r2,zero,8599c <I2C_MultipleRead+0x158>
        for(i=0;i<len && bSuccess;i++){
   85940:	e03ff915 	stw	zero,-28(fp)
   85944:	00001006 	br	85988 <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
   85948:	e0bfff0b 	ldhu	r2,-4(fp)
   8594c:	10ffffc4 	addi	r3,r2,-1
   85950:	e0bff917 	ldw	r2,-28(fp)
   85954:	1884c03a 	cmpne	r2,r3,r2
   85958:	10803fcc 	andi	r2,r2,255
   8595c:	e13ffb17 	ldw	r4,-20(fp)
   85960:	e17ffc17 	ldw	r5,-16(fp)
   85964:	e1800217 	ldw	r6,8(fp)
   85968:	100f883a 	mov	r7,r2
   8596c:	0085c140 	call	85c14 <i2c_read>
            pBuf++;
   85970:	e0800217 	ldw	r2,8(fp)
   85974:	10800044 	addi	r2,r2,1
   85978:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   8597c:	e0bff917 	ldw	r2,-28(fp)
   85980:	10800044 	addi	r2,r2,1
   85984:	e0bff915 	stw	r2,-28(fp)
   85988:	e0bfff0b 	ldhu	r2,-4(fp)
   8598c:	e0fff917 	ldw	r3,-28(fp)
   85990:	1880020e 	bge	r3,r2,8599c <I2C_MultipleRead+0x158>
   85994:	e0bffa17 	ldw	r2,-24(fp)
   85998:	103feb1e 	bne	r2,zero,85948 <__alt_data_end+0xfffcd6d8>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
   8599c:	e13ffb17 	ldw	r4,-20(fp)
   859a0:	e17ffc17 	ldw	r5,-16(fp)
   859a4:	0085a440 	call	85a44 <i2c_stop>
    
    return bSuccess;    
   859a8:	e0bffa17 	ldw	r2,-24(fp)
    
}
   859ac:	e037883a 	mov	sp,fp
   859b0:	dfc00117 	ldw	ra,4(sp)
   859b4:	df000017 	ldw	fp,0(sp)
   859b8:	dec00204 	addi	sp,sp,8
   859bc:	f800283a 	ret

000859c0 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
   859c0:	defffc04 	addi	sp,sp,-16
   859c4:	dfc00315 	stw	ra,12(sp)
   859c8:	df000215 	stw	fp,8(sp)
   859cc:	df000204 	addi	fp,sp,8
   859d0:	e13ffe15 	stw	r4,-8(fp)
   859d4:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
   859d8:	e0bfff17 	ldw	r2,-4(fp)
   859dc:	10800104 	addi	r2,r2,4
   859e0:	00c00044 	movi	r3,1
   859e4:	10c00035 	stwio	r3,0(r2)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
   859e8:	e0bfff17 	ldw	r2,-4(fp)
   859ec:	00c00044 	movi	r3,1
   859f0:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
   859f4:	e0bffe17 	ldw	r2,-8(fp)
   859f8:	00c00044 	movi	r3,1
   859fc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   85a00:	01000584 	movi	r4,22
   85a04:	008532c0 	call	8532c <my_wait>
     
    SDA_LOW(data_base); // data low
   85a08:	e0bfff17 	ldw	r2,-4(fp)
   85a0c:	0007883a 	mov	r3,zero
   85a10:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
   85a14:	01000584 	movi	r4,22
   85a18:	008532c0 	call	8532c <my_wait>
    SCL_LOW(clk_base); // clock low
   85a1c:	e0bffe17 	ldw	r2,-8(fp)
   85a20:	0007883a 	mov	r3,zero
   85a24:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   85a28:	01000584 	movi	r4,22
   85a2c:	008532c0 	call	8532c <my_wait>
}
   85a30:	e037883a 	mov	sp,fp
   85a34:	dfc00117 	ldw	ra,4(sp)
   85a38:	df000017 	ldw	fp,0(sp)
   85a3c:	dec00204 	addi	sp,sp,8
   85a40:	f800283a 	ret

00085a44 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
   85a44:	defffc04 	addi	sp,sp,-16
   85a48:	dfc00315 	stw	ra,12(sp)
   85a4c:	df000215 	stw	fp,8(sp)
   85a50:	df000204 	addi	fp,sp,8
   85a54:	e13ffe15 	stw	r4,-8(fp)
   85a58:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
   85a5c:	e0bfff17 	ldw	r2,-4(fp)
   85a60:	10800104 	addi	r2,r2,4
   85a64:	00c00044 	movi	r3,1
   85a68:	10c00035 	stwio	r3,0(r2)
    SDA_LOW(data_base); // Data Low
   85a6c:	e0bfff17 	ldw	r2,-4(fp)
   85a70:	0007883a 	mov	r3,zero
   85a74:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
   85a78:	e0bffe17 	ldw	r2,-8(fp)
   85a7c:	00c00044 	movi	r3,1
   85a80:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
   85a84:	01000584 	movi	r4,22
   85a88:	008532c0 	call	8532c <my_wait>
    SDA_HIGH(data_base); // data high
   85a8c:	e0bfff17 	ldw	r2,-4(fp)
   85a90:	00c00044 	movi	r3,1
   85a94:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
   85a98:	01000584 	movi	r4,22
   85a9c:	008532c0 	call	8532c <my_wait>
    

    
}
   85aa0:	e037883a 	mov	sp,fp
   85aa4:	dfc00117 	ldw	ra,4(sp)
   85aa8:	df000017 	ldw	fp,0(sp)
   85aac:	dec00204 	addi	sp,sp,8
   85ab0:	f800283a 	ret

00085ab4 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
   85ab4:	defff704 	addi	sp,sp,-36
   85ab8:	dfc00815 	stw	ra,32(sp)
   85abc:	df000715 	stw	fp,28(sp)
   85ac0:	df000704 	addi	fp,sp,28
   85ac4:	e13ffd15 	stw	r4,-12(fp)
   85ac8:	e17ffe15 	stw	r5,-8(fp)
   85acc:	3005883a 	mov	r2,r6
   85ad0:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
   85ad4:	00bfe004 	movi	r2,-128
   85ad8:	e0bff905 	stb	r2,-28(fp)
    int i;
    int w;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
   85adc:	e0bffe17 	ldw	r2,-8(fp)
   85ae0:	10800104 	addi	r2,r2,4
   85ae4:	00c00044 	movi	r3,1
   85ae8:	10c00035 	stwio	r3,0(r2)
    
    for(i=0;i<8;i++){
   85aec:	e03ffa15 	stw	zero,-24(fp)
   85af0:	00001f06 	br	85b70 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
   85af4:	e0bffd17 	ldw	r2,-12(fp)
   85af8:	0007883a 	mov	r3,zero
   85afc:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
   85b00:	e0ffff03 	ldbu	r3,-4(fp)
   85b04:	e0bff903 	ldbu	r2,-28(fp)
   85b08:	1884703a 	and	r2,r3,r2
   85b0c:	10803fcc 	andi	r2,r2,255
   85b10:	10000426 	beq	r2,zero,85b24 <i2c_write+0x70>
            SDA_HIGH(data_base);
   85b14:	e0bffe17 	ldw	r2,-8(fp)
   85b18:	00c00044 	movi	r3,1
   85b1c:	10c00035 	stwio	r3,0(r2)
   85b20:	00000306 	br	85b30 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
   85b24:	e0bffe17 	ldw	r2,-8(fp)
   85b28:	0007883a 	mov	r3,zero
   85b2c:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
   85b30:	e0bff903 	ldbu	r2,-28(fp)
   85b34:	1004d07a 	srli	r2,r2,1
   85b38:	e0bff905 	stb	r2,-28(fp)
        // clock high
        SCL_HIGH(clk_base);
   85b3c:	e0bffd17 	ldw	r2,-12(fp)
   85b40:	00c00044 	movi	r3,1
   85b44:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   85b48:	01000584 	movi	r4,22
   85b4c:	008532c0 	call	8532c <my_wait>
        SCL_LOW(clk_base);
   85b50:	e0bffd17 	ldw	r2,-12(fp)
   85b54:	0007883a 	mov	r3,zero
   85b58:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   85b5c:	01000584 	movi	r4,22
   85b60:	008532c0 	call	8532c <my_wait>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
   85b64:	e0bffa17 	ldw	r2,-24(fp)
   85b68:	10800044 	addi	r2,r2,1
   85b6c:	e0bffa15 	stw	r2,-24(fp)
   85b70:	e0bffa17 	ldw	r2,-24(fp)
   85b74:	10800210 	cmplti	r2,r2,8
   85b78:	103fde1e 	bne	r2,zero,85af4 <__alt_data_end+0xfffcd884>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
   85b7c:	e0bffe17 	ldw	r2,-8(fp)
   85b80:	10800104 	addi	r2,r2,4
   85b84:	0007883a 	mov	r3,zero
   85b88:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
//------------------ wait ack for muti-touch panel
SCL_DELAY;
   85b8c:	01000584 	movi	r4,22
   85b90:	008532c0 	call	8532c <my_wait>
w = 0;
   85b94:	e03ffb15 	stw	zero,-20(fp)
while(SDA_READ(data_base) && w++ < 1000000){
   85b98:	0001883a 	nop
   85b9c:	e0bffe17 	ldw	r2,-8(fp)
   85ba0:	10800037 	ldwio	r2,0(r2)
   85ba4:	10000626 	beq	r2,zero,85bc0 <i2c_write+0x10c>
   85ba8:	e0bffb17 	ldw	r2,-20(fp)
   85bac:	10c00044 	addi	r3,r2,1
   85bb0:	e0fffb15 	stw	r3,-20(fp)
   85bb4:	00c003f4 	movhi	r3,15
   85bb8:	18d08fc4 	addi	r3,r3,16959
   85bbc:	18bff70e 	bge	r3,r2,85b9c <__alt_data_end+0xfffcd92c>
}    
    // clock high
    SCL_HIGH(clk_base);  // clock high
   85bc0:	e0bffd17 	ldw	r2,-12(fp)
   85bc4:	00c00044 	movi	r3,1
   85bc8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
   85bcc:	01000584 	movi	r4,22
   85bd0:	008532c0 	call	8532c <my_wait>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
   85bd4:	e0bffe17 	ldw	r2,-8(fp)
   85bd8:	10800037 	ldwio	r2,0(r2)
   85bdc:	1005003a 	cmpeq	r2,r2,zero
   85be0:	10803fcc 	andi	r2,r2,255
   85be4:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
   85be8:	e0bffd17 	ldw	r2,-12(fp)
   85bec:	0007883a 	mov	r3,zero
   85bf0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   85bf4:	01000584 	movi	r4,22
   85bf8:	008532c0 	call	8532c <my_wait>
    return bAck;
   85bfc:	e0bffc17 	ldw	r2,-16(fp)
}    
   85c00:	e037883a 	mov	sp,fp
   85c04:	dfc00117 	ldw	ra,4(sp)
   85c08:	df000017 	ldw	fp,0(sp)
   85c0c:	dec00204 	addi	sp,sp,8
   85c10:	f800283a 	ret

00085c14 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
   85c14:	defff804 	addi	sp,sp,-32
   85c18:	dfc00715 	stw	ra,28(sp)
   85c1c:	df000615 	stw	fp,24(sp)
   85c20:	df000604 	addi	fp,sp,24
   85c24:	e13ffc15 	stw	r4,-16(fp)
   85c28:	e17ffd15 	stw	r5,-12(fp)
   85c2c:	e1bffe15 	stw	r6,-8(fp)
   85c30:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
   85c34:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
   85c38:	e0bffd17 	ldw	r2,-12(fp)
   85c3c:	10800104 	addi	r2,r2,4
   85c40:	0007883a 	mov	r3,zero
   85c44:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
   85c48:	e0bffc17 	ldw	r2,-16(fp)
   85c4c:	0007883a 	mov	r3,zero
   85c50:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   85c54:	01000584 	movi	r4,22
   85c58:	008532c0 	call	8532c <my_wait>

    for(i=0;i<8;i++){
   85c5c:	e03ffb15 	stw	zero,-20(fp)
   85c60:	00001606 	br	85cbc <i2c_read+0xa8>
        Data <<= 1;
   85c64:	e0bffa03 	ldbu	r2,-24(fp)
   85c68:	1085883a 	add	r2,r2,r2
   85c6c:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
   85c70:	e0bffc17 	ldw	r2,-16(fp)
   85c74:	00c00044 	movi	r3,1
   85c78:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   85c7c:	01000584 	movi	r4,22
   85c80:	008532c0 	call	8532c <my_wait>
        if (SDA_READ(data_base))  // read data   
   85c84:	e0bffd17 	ldw	r2,-12(fp)
   85c88:	10800037 	ldwio	r2,0(r2)
   85c8c:	10000326 	beq	r2,zero,85c9c <i2c_read+0x88>
            Data |= 0x01;
   85c90:	e0bffa03 	ldbu	r2,-24(fp)
   85c94:	10800054 	ori	r2,r2,1
   85c98:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
   85c9c:	e0bffc17 	ldw	r2,-16(fp)
   85ca0:	0007883a 	mov	r3,zero
   85ca4:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   85ca8:	01000584 	movi	r4,22
   85cac:	008532c0 	call	8532c <my_wait>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
   85cb0:	e0bffb17 	ldw	r2,-20(fp)
   85cb4:	10800044 	addi	r2,r2,1
   85cb8:	e0bffb15 	stw	r2,-20(fp)
   85cbc:	e0bffb17 	ldw	r2,-20(fp)
   85cc0:	10800210 	cmplti	r2,r2,8
   85cc4:	103fe71e 	bne	r2,zero,85c64 <__alt_data_end+0xfffcd9f4>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
   85cc8:	e0bffc17 	ldw	r2,-16(fp)
   85ccc:	0007883a 	mov	r3,zero
   85cd0:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
   85cd4:	e0bffd17 	ldw	r2,-12(fp)
   85cd8:	10800104 	addi	r2,r2,4
   85cdc:	00c00044 	movi	r3,1
   85ce0:	10c00035 	stwio	r3,0(r2)
    if (bAck)
   85ce4:	e0bfff17 	ldw	r2,-4(fp)
   85ce8:	10000426 	beq	r2,zero,85cfc <i2c_read+0xe8>
        SDA_LOW(data_base);
   85cec:	e0bffd17 	ldw	r2,-12(fp)
   85cf0:	0007883a 	mov	r3,zero
   85cf4:	10c00035 	stwio	r3,0(r2)
   85cf8:	00000306 	br	85d08 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
   85cfc:	e0bffd17 	ldw	r2,-12(fp)
   85d00:	00c00044 	movi	r3,1
   85d04:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
   85d08:	e0bffc17 	ldw	r2,-16(fp)
   85d0c:	00c00044 	movi	r3,1
   85d10:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
   85d14:	01000584 	movi	r4,22
   85d18:	008532c0 	call	8532c <my_wait>
    SCL_LOW(clk_base); // clock low
   85d1c:	e0bffc17 	ldw	r2,-16(fp)
   85d20:	0007883a 	mov	r3,zero
   85d24:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   85d28:	01000584 	movi	r4,22
   85d2c:	008532c0 	call	8532c <my_wait>
    SDA_LOW(data_base);  // data low
   85d30:	e0bffd17 	ldw	r2,-12(fp)
   85d34:	0007883a 	mov	r3,zero
   85d38:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
   85d3c:	01000584 	movi	r4,22
   85d40:	008532c0 	call	8532c <my_wait>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
   85d44:	e0bffe17 	ldw	r2,-8(fp)
   85d48:	e0fffa03 	ldbu	r3,-24(fp)
   85d4c:	10c00005 	stb	r3,0(r2)
}
   85d50:	e037883a 	mov	sp,fp
   85d54:	dfc00117 	ldw	ra,4(sp)
   85d58:	df000017 	ldw	fp,0(sp)
   85d5c:	dec00204 	addi	sp,sp,8
   85d60:	f800283a 	ret

00085d64 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
   85d64:	defff704 	addi	sp,sp,-36
   85d68:	dfc00815 	stw	ra,32(sp)
   85d6c:	df000715 	stw	fp,28(sp)
   85d70:	df000704 	addi	fp,sp,28
   85d74:	e13ffb15 	stw	r4,-20(fp)
   85d78:	e17ffc15 	stw	r5,-16(fp)
   85d7c:	3009883a 	mov	r4,r6
   85d80:	3807883a 	mov	r3,r7
   85d84:	e0800217 	ldw	r2,8(fp)
   85d88:	e13ffd05 	stb	r4,-12(fp)
   85d8c:	e0fffe0d 	sth	r3,-8(fp)
   85d90:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   85d94:	00800044 	movi	r2,1
   85d98:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   85d9c:	e0bffe0b 	ldhu	r2,-8(fp)
   85da0:	1004d23a 	srli	r2,r2,8
   85da4:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
   85da8:	e0bffe0b 	ldhu	r2,-8(fp)
   85dac:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   85db0:	e13ffb17 	ldw	r4,-20(fp)
   85db4:	e17ffc17 	ldw	r5,-16(fp)
   85db8:	00859c00 	call	859c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   85dbc:	e0bffd03 	ldbu	r2,-12(fp)
   85dc0:	10803fcc 	andi	r2,r2,255
   85dc4:	e13ffb17 	ldw	r4,-20(fp)
   85dc8:	e17ffc17 	ldw	r5,-16(fp)
   85dcc:	100d883a 	mov	r6,r2
   85dd0:	0085ab40 	call	85ab4 <i2c_write>
   85dd4:	1000041e 	bne	r2,zero,85de8 <I2CL_Write+0x84>
        bSuccess = FALSE;
   85dd8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   85ddc:	010002b4 	movhi	r4,10
   85de0:	211f3204 	addi	r4,r4,31944
   85de4:	00864a40 	call	864a4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   85de8:	e0bff917 	ldw	r2,-28(fp)
   85dec:	10000a26 	beq	r2,zero,85e18 <I2CL_Write+0xb4>
   85df0:	e0bffa03 	ldbu	r2,-24(fp)
   85df4:	e13ffb17 	ldw	r4,-20(fp)
   85df8:	e17ffc17 	ldw	r5,-16(fp)
   85dfc:	100d883a 	mov	r6,r2
   85e00:	0085ab40 	call	85ab4 <i2c_write>
   85e04:	1000041e 	bne	r2,zero,85e18 <I2CL_Write+0xb4>
        bSuccess = FALSE;
   85e08:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   85e0c:	010002b4 	movhi	r4,10
   85e10:	211f9004 	addi	r4,r4,32320
   85e14:	00864a40 	call	864a4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   85e18:	e0bff917 	ldw	r2,-28(fp)
   85e1c:	10000a26 	beq	r2,zero,85e48 <I2CL_Write+0xe4>
   85e20:	e0bffa43 	ldbu	r2,-23(fp)
   85e24:	e13ffb17 	ldw	r4,-20(fp)
   85e28:	e17ffc17 	ldw	r5,-16(fp)
   85e2c:	100d883a 	mov	r6,r2
   85e30:	0085ab40 	call	85ab4 <i2c_write>
   85e34:	1000041e 	bne	r2,zero,85e48 <I2CL_Write+0xe4>
        bSuccess = FALSE;
   85e38:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   85e3c:	010002b4 	movhi	r4,10
   85e40:	211f9a04 	addi	r4,r4,32360
   85e44:	00864a40 	call	864a4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
   85e48:	e0bff917 	ldw	r2,-28(fp)
   85e4c:	10000a26 	beq	r2,zero,85e78 <I2CL_Write+0x114>
   85e50:	e0bfff03 	ldbu	r2,-4(fp)
   85e54:	e13ffb17 	ldw	r4,-20(fp)
   85e58:	e17ffc17 	ldw	r5,-16(fp)
   85e5c:	100d883a 	mov	r6,r2
   85e60:	0085ab40 	call	85ab4 <i2c_write>
   85e64:	1000041e 	bne	r2,zero,85e78 <I2CL_Write+0x114>
        bSuccess = FALSE;
   85e68:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   85e6c:	010002b4 	movhi	r4,10
   85e70:	211f4304 	addi	r4,r4,32012
   85e74:	00864a40 	call	864a4 <myprintf>
    }
    i2c_stop(clk_base, data_base);
   85e78:	e13ffb17 	ldw	r4,-20(fp)
   85e7c:	e17ffc17 	ldw	r5,-16(fp)
   85e80:	0085a440 	call	85a44 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   85e84:	0106d604 	movi	r4,7000
   85e88:	008bff40 	call	8bff4 <usleep>
    
    return bSuccess;
   85e8c:	e0bff917 	ldw	r2,-28(fp)
    
}
   85e90:	e037883a 	mov	sp,fp
   85e94:	dfc00117 	ldw	ra,4(sp)
   85e98:	df000017 	ldw	fp,0(sp)
   85e9c:	dec00204 	addi	sp,sp,8
   85ea0:	f800283a 	ret

00085ea4 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
   85ea4:	defff804 	addi	sp,sp,-32
   85ea8:	dfc00715 	stw	ra,28(sp)
   85eac:	df000615 	stw	fp,24(sp)
   85eb0:	df000604 	addi	fp,sp,24
   85eb4:	e13ffc15 	stw	r4,-16(fp)
   85eb8:	e17ffd15 	stw	r5,-12(fp)
   85ebc:	3007883a 	mov	r3,r6
   85ec0:	3805883a 	mov	r2,r7
   85ec4:	e0fffe05 	stb	r3,-8(fp)
   85ec8:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
   85ecc:	00800044 	movi	r2,1
   85ed0:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   85ed4:	e0bfff0b 	ldhu	r2,-4(fp)
   85ed8:	1004d23a 	srli	r2,r2,8
   85edc:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
   85ee0:	e0bfff0b 	ldhu	r2,-4(fp)
   85ee4:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
   85ee8:	e13ffc17 	ldw	r4,-16(fp)
   85eec:	e17ffd17 	ldw	r5,-12(fp)
   85ef0:	00859c00 	call	859c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   85ef4:	e0bffe03 	ldbu	r2,-8(fp)
   85ef8:	10803fcc 	andi	r2,r2,255
   85efc:	e13ffc17 	ldw	r4,-16(fp)
   85f00:	e17ffd17 	ldw	r5,-12(fp)
   85f04:	100d883a 	mov	r6,r2
   85f08:	0085ab40 	call	85ab4 <i2c_write>
   85f0c:	1000041e 	bne	r2,zero,85f20 <I2CL_Read+0x7c>
        bSuccess = FALSE;
   85f10:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   85f14:	010002b4 	movhi	r4,10
   85f18:	211f3204 	addi	r4,r4,31944
   85f1c:	00864a40 	call	864a4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   85f20:	e0bffa17 	ldw	r2,-24(fp)
   85f24:	10000a26 	beq	r2,zero,85f50 <I2CL_Read+0xac>
   85f28:	e0bffb03 	ldbu	r2,-20(fp)
   85f2c:	e13ffc17 	ldw	r4,-16(fp)
   85f30:	e17ffd17 	ldw	r5,-12(fp)
   85f34:	100d883a 	mov	r6,r2
   85f38:	0085ab40 	call	85ab4 <i2c_write>
   85f3c:	1000041e 	bne	r2,zero,85f50 <I2CL_Read+0xac>
        bSuccess = FALSE;
   85f40:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   85f44:	010002b4 	movhi	r4,10
   85f48:	211f9004 	addi	r4,r4,32320
   85f4c:	00864a40 	call	864a4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   85f50:	e0bffa17 	ldw	r2,-24(fp)
   85f54:	10000a26 	beq	r2,zero,85f80 <I2CL_Read+0xdc>
   85f58:	e0bffb43 	ldbu	r2,-19(fp)
   85f5c:	e13ffc17 	ldw	r4,-16(fp)
   85f60:	e17ffd17 	ldw	r5,-12(fp)
   85f64:	100d883a 	mov	r6,r2
   85f68:	0085ab40 	call	85ab4 <i2c_write>
   85f6c:	1000041e 	bne	r2,zero,85f80 <I2CL_Read+0xdc>
        bSuccess = FALSE;
   85f70:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   85f74:	010002b4 	movhi	r4,10
   85f78:	211f9a04 	addi	r4,r4,32360
   85f7c:	00864a40 	call	864a4 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
   85f80:	e13ffc17 	ldw	r4,-16(fp)
   85f84:	e17ffd17 	ldw	r5,-12(fp)
   85f88:	00859c00 	call	859c0 <i2c_start>
    DeviceAddr |= 1; // Read
   85f8c:	e0bffe03 	ldbu	r2,-8(fp)
   85f90:	10800054 	ori	r2,r2,1
   85f94:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   85f98:	e0bffa17 	ldw	r2,-24(fp)
   85f9c:	10000b26 	beq	r2,zero,85fcc <I2CL_Read+0x128>
   85fa0:	e0bffe03 	ldbu	r2,-8(fp)
   85fa4:	10803fcc 	andi	r2,r2,255
   85fa8:	e13ffc17 	ldw	r4,-16(fp)
   85fac:	e17ffd17 	ldw	r5,-12(fp)
   85fb0:	100d883a 	mov	r6,r2
   85fb4:	0085ab40 	call	85ab4 <i2c_write>
   85fb8:	1000041e 	bne	r2,zero,85fcc <I2CL_Read+0x128>
        bSuccess = FALSE;
   85fbc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
   85fc0:	010002b4 	movhi	r4,10
   85fc4:	211f6604 	addi	r4,r4,32152
   85fc8:	00864a40 	call	864a4 <myprintf>
    }
    
    if (bSuccess){
   85fcc:	e0bffa17 	ldw	r2,-24(fp)
   85fd0:	10000526 	beq	r2,zero,85fe8 <I2CL_Read+0x144>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   85fd4:	e13ffc17 	ldw	r4,-16(fp)
   85fd8:	e17ffd17 	ldw	r5,-12(fp)
   85fdc:	e1800217 	ldw	r6,8(fp)
   85fe0:	000f883a 	mov	r7,zero
   85fe4:	0085c140 	call	85c14 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
   85fe8:	e13ffc17 	ldw	r4,-16(fp)
   85fec:	e17ffd17 	ldw	r5,-12(fp)
   85ff0:	0085a440 	call	85a44 <i2c_stop>
    
    return bSuccess;    
   85ff4:	e0bffa17 	ldw	r2,-24(fp)
}
   85ff8:	e037883a 	mov	sp,fp
   85ffc:	dfc00117 	ldw	ra,4(sp)
   86000:	df000017 	ldw	fp,0(sp)
   86004:	dec00204 	addi	sp,sp,8
   86008:	f800283a 	ret

0008600c <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
   8600c:	defff604 	addi	sp,sp,-40
   86010:	dfc00915 	stw	ra,36(sp)
   86014:	df000815 	stw	fp,32(sp)
   86018:	df000804 	addi	fp,sp,32
   8601c:	e13ffb15 	stw	r4,-20(fp)
   86020:	e17ffc15 	stw	r5,-16(fp)
   86024:	3009883a 	mov	r4,r6
   86028:	3807883a 	mov	r3,r7
   8602c:	e0800317 	ldw	r2,12(fp)
   86030:	e13ffd05 	stb	r4,-12(fp)
   86034:	e0fffe0d 	sth	r3,-8(fp)
   86038:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
   8603c:	00800044 	movi	r2,1
   86040:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   86044:	e0bffe0b 	ldhu	r2,-8(fp)
   86048:	1004d23a 	srli	r2,r2,8
   8604c:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;     
   86050:	e0bffe0b 	ldhu	r2,-8(fp)
   86054:	e0bffa45 	stb	r2,-23(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   86058:	e13ffb17 	ldw	r4,-20(fp)
   8605c:	e17ffc17 	ldw	r5,-16(fp)
   86060:	00859c00 	call	859c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   86064:	e0bffd03 	ldbu	r2,-12(fp)
   86068:	10803fcc 	andi	r2,r2,255
   8606c:	e13ffb17 	ldw	r4,-20(fp)
   86070:	e17ffc17 	ldw	r5,-16(fp)
   86074:	100d883a 	mov	r6,r2
   86078:	0085ab40 	call	85ab4 <i2c_write>
   8607c:	1000041e 	bne	r2,zero,86090 <I2CL_MultipleRead+0x84>
        bSuccess = FALSE;
   86080:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   86084:	010002b4 	movhi	r4,10
   86088:	211f3204 	addi	r4,r4,31944
   8608c:	00864a40 	call	864a4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   86090:	e0bff917 	ldw	r2,-28(fp)
   86094:	10000a26 	beq	r2,zero,860c0 <I2CL_MultipleRead+0xb4>
   86098:	e0bffa03 	ldbu	r2,-24(fp)
   8609c:	e13ffb17 	ldw	r4,-20(fp)
   860a0:	e17ffc17 	ldw	r5,-16(fp)
   860a4:	100d883a 	mov	r6,r2
   860a8:	0085ab40 	call	85ab4 <i2c_write>
   860ac:	1000041e 	bne	r2,zero,860c0 <I2CL_MultipleRead+0xb4>
        bSuccess = FALSE;
   860b0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   860b4:	010002b4 	movhi	r4,10
   860b8:	211f9004 	addi	r4,r4,32320
   860bc:	00864a40 	call	864a4 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   860c0:	e0bff917 	ldw	r2,-28(fp)
   860c4:	10000a26 	beq	r2,zero,860f0 <I2CL_MultipleRead+0xe4>
   860c8:	e0bffa43 	ldbu	r2,-23(fp)
   860cc:	e13ffb17 	ldw	r4,-20(fp)
   860d0:	e17ffc17 	ldw	r5,-16(fp)
   860d4:	100d883a 	mov	r6,r2
   860d8:	0085ab40 	call	85ab4 <i2c_write>
   860dc:	1000041e 	bne	r2,zero,860f0 <I2CL_MultipleRead+0xe4>
        bSuccess = FALSE;
   860e0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   860e4:	010002b4 	movhi	r4,10
   860e8:	211f9a04 	addi	r4,r4,32360
   860ec:	00864a40 	call	864a4 <myprintf>
    }    
    if (bSuccess)        
   860f0:	e0bff917 	ldw	r2,-28(fp)
   860f4:	10000326 	beq	r2,zero,86104 <I2CL_MultipleRead+0xf8>
        i2c_start(clk_base, data_base);  // restart
   860f8:	e13ffb17 	ldw	r4,-20(fp)
   860fc:	e17ffc17 	ldw	r5,-16(fp)
   86100:	00859c00 	call	859c0 <i2c_start>
    DeviceAddr |= 1; // Read
   86104:	e0bffd03 	ldbu	r2,-12(fp)
   86108:	10800054 	ori	r2,r2,1
   8610c:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   86110:	e0bff917 	ldw	r2,-28(fp)
   86114:	10000b26 	beq	r2,zero,86144 <I2CL_MultipleRead+0x138>
   86118:	e0bffd03 	ldbu	r2,-12(fp)
   8611c:	10803fcc 	andi	r2,r2,255
   86120:	e13ffb17 	ldw	r4,-20(fp)
   86124:	e17ffc17 	ldw	r5,-16(fp)
   86128:	100d883a 	mov	r6,r2
   8612c:	0085ab40 	call	85ab4 <i2c_write>
   86130:	1000041e 	bne	r2,zero,86144 <I2CL_MultipleRead+0x138>
        bSuccess = FALSE;
   86134:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
   86138:	010002b4 	movhi	r4,10
   8613c:	211fa404 	addi	r4,r4,32400
   86140:	00864a40 	call	864a4 <myprintf>
    }
    
    if (bSuccess){
   86144:	e0bff917 	ldw	r2,-28(fp)
   86148:	10001726 	beq	r2,zero,861a8 <I2CL_MultipleRead+0x19c>
        for(i=0;i<len && bSuccess;i++){
   8614c:	e03ff815 	stw	zero,-32(fp)
   86150:	00001006 	br	86194 <I2CL_MultipleRead+0x188>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   86154:	e0bff817 	ldw	r2,-32(fp)
   86158:	e0c00217 	ldw	r3,8(fp)
   8615c:	1887883a 	add	r3,r3,r2
   86160:	e0bfff0b 	ldhu	r2,-4(fp)
   86164:	113fffc4 	addi	r4,r2,-1
   86168:	e0bff817 	ldw	r2,-32(fp)
   8616c:	2084c03a 	cmpne	r2,r4,r2
   86170:	10803fcc 	andi	r2,r2,255
   86174:	e13ffb17 	ldw	r4,-20(fp)
   86178:	e17ffc17 	ldw	r5,-16(fp)
   8617c:	180d883a 	mov	r6,r3
   86180:	100f883a 	mov	r7,r2
   86184:	0085c140 	call	85c14 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   86188:	e0bff817 	ldw	r2,-32(fp)
   8618c:	10800044 	addi	r2,r2,1
   86190:	e0bff815 	stw	r2,-32(fp)
   86194:	e0bfff0b 	ldhu	r2,-4(fp)
   86198:	e0fff817 	ldw	r3,-32(fp)
   8619c:	1880020e 	bge	r3,r2,861a8 <I2CL_MultipleRead+0x19c>
   861a0:	e0bff917 	ldw	r2,-28(fp)
   861a4:	103feb1e 	bne	r2,zero,86154 <__alt_data_end+0xfffcdee4>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
   861a8:	e13ffb17 	ldw	r4,-20(fp)
   861ac:	e17ffc17 	ldw	r5,-16(fp)
   861b0:	0085a440 	call	85a44 <i2c_stop>
    
    return bSuccess;    
   861b4:	e0bff917 	ldw	r2,-28(fp)
    
} 
   861b8:	e037883a 	mov	sp,fp
   861bc:	dfc00117 	ldw	ra,4(sp)
   861c0:	df000017 	ldw	fp,0(sp)
   861c4:	dec00204 	addi	sp,sp,8
   861c8:	f800283a 	ret

000861cc <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
   861cc:	defff604 	addi	sp,sp,-40
   861d0:	dfc00915 	stw	ra,36(sp)
   861d4:	df000815 	stw	fp,32(sp)
   861d8:	df000804 	addi	fp,sp,32
   861dc:	e13ffb15 	stw	r4,-20(fp)
   861e0:	e17ffc15 	stw	r5,-16(fp)
   861e4:	3009883a 	mov	r4,r6
   861e8:	3807883a 	mov	r3,r7
   861ec:	e0800317 	ldw	r2,12(fp)
   861f0:	e13ffd05 	stb	r4,-12(fp)
   861f4:	e0fffe0d 	sth	r3,-8(fp)
   861f8:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
   861fc:	00800044 	movi	r2,1
   86200:	e0bff815 	stw	r2,-32(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   86204:	e0bffe0b 	ldhu	r2,-8(fp)
   86208:	1004d23a 	srli	r2,r2,8
   8620c:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
   86210:	e0bffe0b 	ldhu	r2,-8(fp)
   86214:	e0bffa45 	stb	r2,-23(fp)
    

    i2c_start(clk_base, data_base);
   86218:	e13ffb17 	ldw	r4,-20(fp)
   8621c:	e17ffc17 	ldw	r5,-16(fp)
   86220:	00859c00 	call	859c0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   86224:	e0bffd03 	ldbu	r2,-12(fp)
   86228:	10803fcc 	andi	r2,r2,255
   8622c:	e13ffb17 	ldw	r4,-20(fp)
   86230:	e17ffc17 	ldw	r5,-16(fp)
   86234:	100d883a 	mov	r6,r2
   86238:	0085ab40 	call	85ab4 <i2c_write>
   8623c:	1000041e 	bne	r2,zero,86250 <I2CL_MultipleWrite+0x84>
        bSuccess = FALSE;
   86240:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   86244:	010002b4 	movhi	r4,10
   86248:	211f3204 	addi	r4,r4,31944
   8624c:	00864a40 	call	864a4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   86250:	e0bff817 	ldw	r2,-32(fp)
   86254:	10000a26 	beq	r2,zero,86280 <I2CL_MultipleWrite+0xb4>
   86258:	e0bffa03 	ldbu	r2,-24(fp)
   8625c:	e13ffb17 	ldw	r4,-20(fp)
   86260:	e17ffc17 	ldw	r5,-16(fp)
   86264:	100d883a 	mov	r6,r2
   86268:	0085ab40 	call	85ab4 <i2c_write>
   8626c:	1000041e 	bne	r2,zero,86280 <I2CL_MultipleWrite+0xb4>
        bSuccess = FALSE;
   86270:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   86274:	010002b4 	movhi	r4,10
   86278:	211f9004 	addi	r4,r4,32320
   8627c:	00864a40 	call	864a4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   86280:	e0bff817 	ldw	r2,-32(fp)
   86284:	10000a26 	beq	r2,zero,862b0 <I2CL_MultipleWrite+0xe4>
   86288:	e0bffa43 	ldbu	r2,-23(fp)
   8628c:	e13ffb17 	ldw	r4,-20(fp)
   86290:	e17ffc17 	ldw	r5,-16(fp)
   86294:	100d883a 	mov	r6,r2
   86298:	0085ab40 	call	85ab4 <i2c_write>
   8629c:	1000041e 	bne	r2,zero,862b0 <I2CL_MultipleWrite+0xe4>
        bSuccess = FALSE;
   862a0:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   862a4:	010002b4 	movhi	r4,10
   862a8:	211f9a04 	addi	r4,r4,32360
   862ac:	00864a40 	call	864a4 <myprintf>
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
   862b0:	e0bff817 	ldw	r2,-32(fp)
   862b4:	10001926 	beq	r2,zero,8631c <I2CL_MultipleWrite+0x150>
        for(i=0;i<len && bSuccess;i++){
   862b8:	e03ff915 	stw	zero,-28(fp)
   862bc:	00000d06 	br	862f4 <I2CL_MultipleWrite+0x128>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
   862c0:	e0bff917 	ldw	r2,-28(fp)
   862c4:	e0c00217 	ldw	r3,8(fp)
   862c8:	1885883a 	add	r2,r3,r2
   862cc:	10800003 	ldbu	r2,0(r2)
   862d0:	10803fcc 	andi	r2,r2,255
   862d4:	e13ffb17 	ldw	r4,-20(fp)
   862d8:	e17ffc17 	ldw	r5,-16(fp)
   862dc:	100d883a 	mov	r6,r2
   862e0:	0085ab40 	call	85ab4 <i2c_write>
   862e4:	e0bff815 	stw	r2,-32(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
   862e8:	e0bff917 	ldw	r2,-28(fp)
   862ec:	10800044 	addi	r2,r2,1
   862f0:	e0bff915 	stw	r2,-28(fp)
   862f4:	e0bfff0b 	ldhu	r2,-4(fp)
   862f8:	e0fff917 	ldw	r3,-28(fp)
   862fc:	1880020e 	bge	r3,r2,86308 <I2CL_MultipleWrite+0x13c>
   86300:	e0bff817 	ldw	r2,-32(fp)
   86304:	103fee1e 	bne	r2,zero,862c0 <__alt_data_end+0xfffce050>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
   86308:	e0bff817 	ldw	r2,-32(fp)
   8630c:	1000031e 	bne	r2,zero,8631c <I2CL_MultipleWrite+0x150>
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   86310:	010002b4 	movhi	r4,10
   86314:	211f4304 	addi	r4,r4,32012
   86318:	00864a40 	call	864a4 <myprintf>
    }
    i2c_stop(clk_base, data_base);
   8631c:	e13ffb17 	ldw	r4,-20(fp)
   86320:	e17ffc17 	ldw	r5,-16(fp)
   86324:	0085a440 	call	85a44 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   86328:	0106d604 	movi	r4,7000
   8632c:	008bff40 	call	8bff4 <usleep>
    
    return bSuccess;
   86330:	e0bff817 	ldw	r2,-32(fp)
    
}
   86334:	e037883a 	mov	sp,fp
   86338:	dfc00117 	ldw	ra,4(sp)
   8633c:	df000017 	ldw	fp,0(sp)
   86340:	dec00204 	addi	sp,sp,8
   86344:	f800283a 	ret

00086348 <I2CL_Read16>:
 


bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
   86348:	defff604 	addi	sp,sp,-40
   8634c:	dfc00915 	stw	ra,36(sp)
   86350:	df000815 	stw	fp,32(sp)
   86354:	df000804 	addi	fp,sp,32
   86358:	e13ffc15 	stw	r4,-16(fp)
   8635c:	e17ffd15 	stw	r5,-12(fp)
   86360:	3007883a 	mov	r3,r6
   86364:	3805883a 	mov	r2,r7
   86368:	e0fffe05 	stb	r3,-8(fp)
   8636c:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
   86370:	e0fffe07 	ldb	r3,-8(fp)
   86374:	e0bfff0b 	ldhu	r2,-4(fp)
   86378:	e13ffb04 	addi	r4,fp,-20
   8637c:	d9000015 	stw	r4,0(sp)
   86380:	01000084 	movi	r4,2
   86384:	d9000115 	stw	r4,4(sp)
   86388:	e13ffc17 	ldw	r4,-16(fp)
   8638c:	e17ffd17 	ldw	r5,-12(fp)
   86390:	180d883a 	mov	r6,r3
   86394:	100f883a 	mov	r7,r2
   86398:	008600c0 	call	8600c <I2CL_MultipleRead>
   8639c:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
   863a0:	e0bffa17 	ldw	r2,-24(fp)
   863a4:	10000a26 	beq	r2,zero,863d0 <I2CL_Read16+0x88>
        *pControlData = (szData[0] << 8 ) | szData[1];
   863a8:	e0bffb03 	ldbu	r2,-20(fp)
   863ac:	10803fcc 	andi	r2,r2,255
   863b0:	1004923a 	slli	r2,r2,8
   863b4:	1007883a 	mov	r3,r2
   863b8:	e0bffb43 	ldbu	r2,-19(fp)
   863bc:	10803fcc 	andi	r2,r2,255
   863c0:	1884b03a 	or	r2,r3,r2
   863c4:	1007883a 	mov	r3,r2
   863c8:	e0800217 	ldw	r2,8(fp)
   863cc:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
   863d0:	e0bffa17 	ldw	r2,-24(fp)
}
   863d4:	e037883a 	mov	sp,fp
   863d8:	dfc00117 	ldw	ra,4(sp)
   863dc:	df000017 	ldw	fp,0(sp)
   863e0:	dec00204 	addi	sp,sp,8
   863e4:	f800283a 	ret

000863e8 <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
   863e8:	defff504 	addi	sp,sp,-44
   863ec:	dfc00a15 	stw	ra,40(sp)
   863f0:	df000915 	stw	fp,36(sp)
   863f4:	df000904 	addi	fp,sp,36
   863f8:	e13ffb15 	stw	r4,-20(fp)
   863fc:	e17ffc15 	stw	r5,-16(fp)
   86400:	3009883a 	mov	r4,r6
   86404:	3807883a 	mov	r3,r7
   86408:	e0800217 	ldw	r2,8(fp)
   8640c:	e13ffd05 	stb	r4,-12(fp)
   86410:	e0fffe0d 	sth	r3,-8(fp)
   86414:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
   86418:	e0bfff0b 	ldhu	r2,-4(fp)
   8641c:	1004d23a 	srli	r2,r2,8
   86420:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
   86424:	e0bfff0b 	ldhu	r2,-4(fp)
   86428:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
   8642c:	e0fffd07 	ldb	r3,-12(fp)
   86430:	e0bffe0b 	ldhu	r2,-8(fp)
   86434:	e13ffa04 	addi	r4,fp,-24
   86438:	d9000015 	stw	r4,0(sp)
   8643c:	01000084 	movi	r4,2
   86440:	d9000115 	stw	r4,4(sp)
   86444:	e13ffb17 	ldw	r4,-20(fp)
   86448:	e17ffc17 	ldw	r5,-16(fp)
   8644c:	180d883a 	mov	r6,r3
   86450:	100f883a 	mov	r7,r2
   86454:	00861cc0 	call	861cc <I2CL_MultipleWrite>
   86458:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
   8645c:	e0bff917 	ldw	r2,-28(fp)
}
   86460:	e037883a 	mov	sp,fp
   86464:	dfc00117 	ldw	ra,4(sp)
   86468:	df000017 	ldw	fp,0(sp)
   8646c:	dec00204 	addi	sp,sp,8
   86470:	f800283a 	ret

00086474 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
   86474:	defffd04 	addi	sp,sp,-12
   86478:	dfc00215 	stw	ra,8(sp)
   8647c:	df000115 	stw	fp,4(sp)
   86480:	df000104 	addi	fp,sp,4
   86484:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
   86488:	e13fff17 	ldw	r4,-4(fp)
   8648c:	008a36c0 	call	8a36c <printf>
}
   86490:	e037883a 	mov	sp,fp
   86494:	dfc00117 	ldw	ra,4(sp)
   86498:	df000017 	ldw	fp,0(sp)
   8649c:	dec00204 	addi	sp,sp,8
   864a0:	f800283a 	ret

000864a4 <myprintf>:





int myprintf(char *format, ...){
   864a4:	deff7804 	addi	sp,sp,-544
   864a8:	dfc08415 	stw	ra,528(sp)
   864ac:	df008315 	stw	fp,524(sp)
   864b0:	df008304 	addi	fp,sp,524
   864b4:	e1400215 	stw	r5,8(fp)
   864b8:	e1800315 	stw	r6,12(fp)
   864bc:	e1c00415 	stw	r7,16(fp)
   864c0:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
   864c4:	e0800204 	addi	r2,fp,8
   864c8:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
   864cc:	e0bffe17 	ldw	r2,-8(fp)
   864d0:	e0ff7e04 	addi	r3,fp,-520
   864d4:	1809883a 	mov	r4,r3
   864d8:	01408004 	movi	r5,512
   864dc:	e1bfff17 	ldw	r6,-4(fp)
   864e0:	100f883a 	mov	r7,r2
   864e4:	008b1fc0 	call	8b1fc <vsnprintf>
   864e8:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
   864ec:	e0bf7e04 	addi	r2,fp,-520
   864f0:	1009883a 	mov	r4,r2
   864f4:	00864740 	call	86474 <debug_output>

    return rc;    
   864f8:	e0bf7d17 	ldw	r2,-524(fp)
}
   864fc:	e037883a 	mov	sp,fp
   86500:	dfc00117 	ldw	ra,4(sp)
   86504:	df000017 	ldw	fp,0(sp)
   86508:	dec00504 	addi	sp,sp,20
   8650c:	f800283a 	ret

00086510 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
   86510:	defff704 	addi	sp,sp,-36
   86514:	dfc00815 	stw	ra,32(sp)
   86518:	df000715 	stw	fp,28(sp)
   8651c:	df000704 	addi	fp,sp,28
   86520:	e13ffe15 	stw	r4,-8(fp)
   86524:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   86528:	e03ff915 	stw	zero,-28(fp)
   8652c:	00001106 	br	86574 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
   86530:	e0bff917 	ldw	r2,-28(fp)
   86534:	e0fffe17 	ldw	r3,-8(fp)
   86538:	1885883a 	add	r2,r3,r2
   8653c:	10800003 	ldbu	r2,0(r2)
   86540:	10803fcc 	andi	r2,r2,255
   86544:	e0fffa04 	addi	r3,fp,-24
   86548:	1809883a 	mov	r4,r3
   8654c:	014002b4 	movhi	r5,10
   86550:	295faf04 	addi	r5,r5,32444
   86554:	100d883a 	mov	r6,r2
   86558:	008a5000 	call	8a500 <sprintf>
        DEBUG((szText));
   8655c:	e0bffa04 	addi	r2,fp,-24
   86560:	1009883a 	mov	r4,r2
   86564:	00864a40 	call	864a4 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   86568:	e0bff917 	ldw	r2,-28(fp)
   8656c:	10800044 	addi	r2,r2,1
   86570:	e0bff915 	stw	r2,-28(fp)
   86574:	e0fff917 	ldw	r3,-28(fp)
   86578:	e0bfff17 	ldw	r2,-4(fp)
   8657c:	18bfec16 	blt	r3,r2,86530 <__alt_data_end+0xfffce2c0>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
   86580:	e0bfff17 	ldw	r2,-4(fp)
}
   86584:	e037883a 	mov	sp,fp
   86588:	dfc00117 	ldw	ra,4(sp)
   8658c:	df000017 	ldw	fp,0(sp)
   86590:	dec00204 	addi	sp,sp,8
   86594:	f800283a 	ret

00086598 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
   86598:	defff704 	addi	sp,sp,-36
   8659c:	dfc00815 	stw	ra,32(sp)
   865a0:	df000715 	stw	fp,28(sp)
   865a4:	df000704 	addi	fp,sp,28
   865a8:	e13ffe15 	stw	r4,-8(fp)
   865ac:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   865b0:	e03ff915 	stw	zero,-28(fp)
   865b4:	00001206 	br	86600 <myprintf_dwordarray+0x68>
        sprintf(szText, "[%08X]", *(pArray+i));
   865b8:	e0bff917 	ldw	r2,-28(fp)
   865bc:	1085883a 	add	r2,r2,r2
   865c0:	1085883a 	add	r2,r2,r2
   865c4:	e0fffe17 	ldw	r3,-8(fp)
   865c8:	1885883a 	add	r2,r3,r2
   865cc:	10800017 	ldw	r2,0(r2)
   865d0:	e0fffa04 	addi	r3,fp,-24
   865d4:	1809883a 	mov	r4,r3
   865d8:	014002b4 	movhi	r5,10
   865dc:	295fb104 	addi	r5,r5,32452
   865e0:	100d883a 	mov	r6,r2
   865e4:	008a5000 	call	8a500 <sprintf>
        DEBUG((szText));
   865e8:	e0bffa04 	addi	r2,fp,-24
   865ec:	1009883a 	mov	r4,r2
   865f0:	00864a40 	call	864a4 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   865f4:	e0bff917 	ldw	r2,-28(fp)
   865f8:	10800044 	addi	r2,r2,1
   865fc:	e0bff915 	stw	r2,-28(fp)
   86600:	e0fff917 	ldw	r3,-28(fp)
   86604:	e0bfff17 	ldw	r2,-4(fp)
   86608:	18bfeb16 	blt	r3,r2,865b8 <__alt_data_end+0xfffce348>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
   8660c:	e0bfff17 	ldw	r2,-4(fp)
}
   86610:	e037883a 	mov	sp,fp
   86614:	dfc00117 	ldw	ra,4(sp)
   86618:	df000017 	ldw	fp,0(sp)
   8661c:	dec00204 	addi	sp,sp,8
   86620:	f800283a 	ret

00086624 <QUEUE_New>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
   86624:	defffb04 	addi	sp,sp,-20
   86628:	dfc00415 	stw	ra,16(sp)
   8662c:	df000315 	stw	fp,12(sp)
   86630:	df000304 	addi	fp,sp,12
   86634:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
   86638:	e0bfff17 	ldw	r2,-4(fp)
   8663c:	10800144 	addi	r2,r2,5
   86640:	1085883a 	add	r2,r2,r2
   86644:	1085883a 	add	r2,r2,r2
   86648:	e0bffd15 	stw	r2,-12(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
   8664c:	e0bffd17 	ldw	r2,-12(fp)
   86650:	1009883a 	mov	r4,r2
   86654:	0089c400 	call	89c40 <malloc>
   86658:	e0bffe15 	stw	r2,-8(fp)
    memset((void *)pQueue, 0, nSize);
   8665c:	e0bffd17 	ldw	r2,-12(fp)
   86660:	e13ffe17 	ldw	r4,-8(fp)
   86664:	000b883a 	mov	r5,zero
   86668:	100d883a 	mov	r6,r2
   8666c:	008a3100 	call	8a310 <memset>
    pQueue->num = nQueueNum;
   86670:	e0ffff17 	ldw	r3,-4(fp)
   86674:	e0bffe17 	ldw	r2,-8(fp)
   86678:	10c00015 	stw	r3,0(r2)
    return pQueue;
   8667c:	e0bffe17 	ldw	r2,-8(fp)
}
   86680:	e037883a 	mov	sp,fp
   86684:	dfc00117 	ldw	ra,4(sp)
   86688:	df000017 	ldw	fp,0(sp)
   8668c:	dec00204 	addi	sp,sp,8
   86690:	f800283a 	ret

00086694 <QUEUE_Delete>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
   86694:	defffd04 	addi	sp,sp,-12
   86698:	dfc00215 	stw	ra,8(sp)
   8669c:	df000115 	stw	fp,4(sp)
   866a0:	df000104 	addi	fp,sp,4
   866a4:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
   866a8:	e13fff17 	ldw	r4,-4(fp)
   866ac:	0089c540 	call	89c54 <free>
}
   866b0:	e037883a 	mov	sp,fp
   866b4:	dfc00117 	ldw	ra,4(sp)
   866b8:	df000017 	ldw	fp,0(sp)
   866bc:	dec00204 	addi	sp,sp,8
   866c0:	f800283a 	ret

000866c4 <QUEUE_IsEmpty>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
   866c4:	defffe04 	addi	sp,sp,-8
   866c8:	df000115 	stw	fp,4(sp)
   866cc:	df000104 	addi	fp,sp,4
   866d0:	e13fff15 	stw	r4,-4(fp)
    if (pQueue->front == pQueue->rear)
   866d4:	e0bfff17 	ldw	r2,-4(fp)
   866d8:	10c00117 	ldw	r3,4(r2)
   866dc:	e0bfff17 	ldw	r2,-4(fp)
   866e0:	10800217 	ldw	r2,8(r2)
   866e4:	1880021e 	bne	r3,r2,866f0 <QUEUE_IsEmpty+0x2c>
        return TRUE;
   866e8:	00800044 	movi	r2,1
   866ec:	00000106 	br	866f4 <QUEUE_IsEmpty+0x30>
    return FALSE;
   866f0:	0005883a 	mov	r2,zero
}
   866f4:	e037883a 	mov	sp,fp
   866f8:	df000017 	ldw	fp,0(sp)
   866fc:	dec00104 	addi	sp,sp,4
   86700:	f800283a 	ret

00086704 <QUEUE_IsFull>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
   86704:	defffd04 	addi	sp,sp,-12
   86708:	dfc00215 	stw	ra,8(sp)
   8670c:	df000115 	stw	fp,4(sp)
   86710:	df000104 	addi	fp,sp,4
   86714:	e13fff15 	stw	r4,-4(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
   86718:	e0bfff17 	ldw	r2,-4(fp)
   8671c:	10800117 	ldw	r2,4(r2)
   86720:	10c00044 	addi	r3,r2,1
   86724:	e0bfff17 	ldw	r2,-4(fp)
   86728:	10800017 	ldw	r2,0(r2)
   8672c:	1809883a 	mov	r4,r3
   86730:	100b883a 	mov	r5,r2
   86734:	008787c0 	call	8787c <__umodsi3>
   86738:	1007883a 	mov	r3,r2
   8673c:	e0bfff17 	ldw	r2,-4(fp)
   86740:	10800217 	ldw	r2,8(r2)
   86744:	1880021e 	bne	r3,r2,86750 <QUEUE_IsFull+0x4c>
        return TRUE;
   86748:	00800044 	movi	r2,1
   8674c:	00000106 	br	86754 <QUEUE_IsFull+0x50>
    return FALSE;
   86750:	0005883a 	mov	r2,zero
}
   86754:	e037883a 	mov	sp,fp
   86758:	dfc00117 	ldw	ra,4(sp)
   8675c:	df000017 	ldw	fp,0(sp)
   86760:	dec00204 	addi	sp,sp,8
   86764:	f800283a 	ret

00086768 <QUEUE_Push>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
   86768:	defffc04 	addi	sp,sp,-16
   8676c:	dfc00315 	stw	ra,12(sp)
   86770:	df000215 	stw	fp,8(sp)
   86774:	df000204 	addi	fp,sp,8
   86778:	e13ffe15 	stw	r4,-8(fp)
   8677c:	e17fff15 	stw	r5,-4(fp)
    if (QUEUE_IsFull(pQueue))
   86780:	e13ffe17 	ldw	r4,-8(fp)
   86784:	00867040 	call	86704 <QUEUE_IsFull>
   86788:	10000226 	beq	r2,zero,86794 <QUEUE_Push+0x2c>
        return FALSE;
   8678c:	0005883a 	mov	r2,zero
   86790:	00001506 	br	867e8 <QUEUE_Push+0x80>
    pQueue->data[pQueue->front] = data32;
   86794:	e0bffe17 	ldw	r2,-8(fp)
   86798:	10800117 	ldw	r2,4(r2)
   8679c:	e0fffe17 	ldw	r3,-8(fp)
   867a0:	108000c4 	addi	r2,r2,3
   867a4:	1085883a 	add	r2,r2,r2
   867a8:	1085883a 	add	r2,r2,r2
   867ac:	1885883a 	add	r2,r3,r2
   867b0:	e0ffff17 	ldw	r3,-4(fp)
   867b4:	10c00015 	stw	r3,0(r2)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
   867b8:	e0bffe17 	ldw	r2,-8(fp)
   867bc:	10800117 	ldw	r2,4(r2)
   867c0:	10c00044 	addi	r3,r2,1
   867c4:	e0bffe17 	ldw	r2,-8(fp)
   867c8:	10800017 	ldw	r2,0(r2)
   867cc:	1809883a 	mov	r4,r3
   867d0:	100b883a 	mov	r5,r2
   867d4:	008787c0 	call	8787c <__umodsi3>
   867d8:	1007883a 	mov	r3,r2
   867dc:	e0bffe17 	ldw	r2,-8(fp)
   867e0:	10c00115 	stw	r3,4(r2)
    return TRUE;
   867e4:	00800044 	movi	r2,1
}
   867e8:	e037883a 	mov	sp,fp
   867ec:	dfc00117 	ldw	ra,4(sp)
   867f0:	df000017 	ldw	fp,0(sp)
   867f4:	dec00204 	addi	sp,sp,8
   867f8:	f800283a 	ret

000867fc <QUEUE_Pop>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
   867fc:	defffc04 	addi	sp,sp,-16
   86800:	dfc00315 	stw	ra,12(sp)
   86804:	df000215 	stw	fp,8(sp)
   86808:	df000204 	addi	fp,sp,8
   8680c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
   86810:	e13fff17 	ldw	r4,-4(fp)
   86814:	00866c40 	call	866c4 <QUEUE_IsEmpty>
   86818:	10000226 	beq	r2,zero,86824 <QUEUE_Pop+0x28>
        return 0;
   8681c:	0005883a 	mov	r2,zero
   86820:	00001506 	br	86878 <QUEUE_Pop+0x7c>
    data32 = pQueue->data[pQueue->rear];
   86824:	e0bfff17 	ldw	r2,-4(fp)
   86828:	10800217 	ldw	r2,8(r2)
   8682c:	e0ffff17 	ldw	r3,-4(fp)
   86830:	108000c4 	addi	r2,r2,3
   86834:	1085883a 	add	r2,r2,r2
   86838:	1085883a 	add	r2,r2,r2
   8683c:	1885883a 	add	r2,r3,r2
   86840:	10800017 	ldw	r2,0(r2)
   86844:	e0bffe15 	stw	r2,-8(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
   86848:	e0bfff17 	ldw	r2,-4(fp)
   8684c:	10800217 	ldw	r2,8(r2)
   86850:	10c00044 	addi	r3,r2,1
   86854:	e0bfff17 	ldw	r2,-4(fp)
   86858:	10800017 	ldw	r2,0(r2)
   8685c:	1809883a 	mov	r4,r3
   86860:	100b883a 	mov	r5,r2
   86864:	008787c0 	call	8787c <__umodsi3>
   86868:	1007883a 	mov	r3,r2
   8686c:	e0bfff17 	ldw	r2,-4(fp)
   86870:	10c00215 	stw	r3,8(r2)
    return data32;
   86874:	e0bffe17 	ldw	r2,-8(fp)
}
   86878:	e037883a 	mov	sp,fp
   8687c:	dfc00117 	ldw	ra,4(sp)
   86880:	df000017 	ldw	fp,0(sp)
   86884:	dec00204 	addi	sp,sp,8
   86888:	f800283a 	ret

0008688c <QUEUE_Empty>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
   8688c:	defffe04 	addi	sp,sp,-8
   86890:	df000115 	stw	fp,4(sp)
   86894:	df000104 	addi	fp,sp,4
   86898:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
   8689c:	e0bfff17 	ldw	r2,-4(fp)
   868a0:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
   868a4:	e0bfff17 	ldw	r2,-4(fp)
   868a8:	10000215 	stw	zero,8(r2)
}
   868ac:	e037883a 	mov	sp,fp
   868b0:	df000017 	ldw	fp,0(sp)
   868b4:	dec00104 	addi	sp,sp,4
   868b8:	f800283a 	ret

000868bc <Touch_Init>:
bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p);
void touch_empty_fifo(TERASIC_TOUCH_PANEL *p);
void touch_clear_input(TERASIC_TOUCH_PANEL *p);

// init touch panel
TOUCH_HANDLE Touch_Init(const alt_u32 spi_base, const alt_u32 penirq_base, const alt_u32 penirq_irq){
   868bc:	defff804 	addi	sp,sp,-32
   868c0:	dfc00715 	stw	ra,28(sp)
   868c4:	df000615 	stw	fp,24(sp)
   868c8:	df000604 	addi	fp,sp,24
   868cc:	e13ffd15 	stw	r4,-12(fp)
   868d0:	e17ffe15 	stw	r5,-8(fp)
   868d4:	e1bfff15 	stw	r6,-4(fp)
    bool bSuccess = TRUE;
   868d8:	00800044 	movi	r2,1
   868dc:	e0bffb15 	stw	r2,-20(fp)
    
    TERASIC_TOUCH_PANEL *p;
    
    p = malloc(sizeof(TERASIC_TOUCH_PANEL));
   868e0:	01001804 	movi	r4,96
   868e4:	0089c400 	call	89c40 <malloc>
   868e8:	e0bffc15 	stw	r2,-16(fp)
    if (!p)
   868ec:	e0bffc17 	ldw	r2,-16(fp)
   868f0:	1000021e 	bne	r2,zero,868fc <Touch_Init+0x40>
        return p;
   868f4:	e0bffc17 	ldw	r2,-16(fp)
   868f8:	00004706 	br	86a18 <Touch_Init+0x15c>

    
    //
    memset(p, 0, sizeof(TERASIC_TOUCH_PANEL));
   868fc:	e13ffc17 	ldw	r4,-16(fp)
   86900:	000b883a 	mov	r5,zero
   86904:	01801804 	movi	r6,96
   86908:	008a3100 	call	8a310 <memset>
    p->spi_base = spi_base;
   8690c:	e0bffc17 	ldw	r2,-16(fp)
   86910:	e0fffd17 	ldw	r3,-12(fp)
   86914:	10c00015 	stw	r3,0(r2)
    p->penirq_base = penirq_base;
   86918:	e0bffc17 	ldw	r2,-16(fp)
   8691c:	e0fffe17 	ldw	r3,-8(fp)
   86920:	10c00115 	stw	r3,4(r2)
    p->irq_mask = 0x01;  // 1-pin
   86924:	e0bffc17 	ldw	r2,-16(fp)
   86928:	00c00044 	movi	r3,1
   8692c:	10c00315 	stw	r3,12(r2)
    p->penirq_irq = penirq_irq;
   86930:	e0bffc17 	ldw	r2,-16(fp)
   86934:	e0ffff17 	ldw	r3,-4(fp)
   86938:	10c00215 	stw	r3,8(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8693c:	008002f4 	movhi	r2,11
   86940:	10b97a04 	addi	r2,r2,-6680
   86944:	10800017 	ldw	r2,0(r2)
    p->alarm_dur = alt_ticks_per_second()/SAMPLE_RATE;
   86948:	1009883a 	mov	r4,r2
   8694c:	01400f04 	movi	r5,60
   86950:	00878740 	call	87874 <__udivsi3>
   86954:	1007883a 	mov	r3,r2
   86958:	e0bffc17 	ldw	r2,-16(fp)
   8695c:	10c01615 	stw	r3,88(r2)
    
    // enalbe penirq_n interrupt (P1=1, P1=0)
    touch_enable_penirq(p);    
   86960:	e13ffc17 	ldw	r4,-16(fp)
   86964:	0086d000 	call	86d00 <touch_enable_penirq>
    

    // enable interrupt, 1-pin
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, p->irq_mask); 
   86968:	e0bffc17 	ldw	r2,-16(fp)
   8696c:	10800117 	ldw	r2,4(r2)
   86970:	10800204 	addi	r2,r2,8
   86974:	e0fffc17 	ldw	r3,-16(fp)
   86978:	18c00317 	ldw	r3,12(r3)
   8697c:	10c00035 	stwio	r3,0(r2)
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);
   86980:	e0bffc17 	ldw	r2,-16(fp)
   86984:	10800117 	ldw	r2,4(r2)
   86988:	10800304 	addi	r2,r2,12
   8698c:	0007883a 	mov	r3,zero
   86990:	10c00035 	stwio	r3,0(r2)
    // register ISR
    // register callback function

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,
   86994:	e0bffc17 	ldw	r2,-16(fp)
   86998:	10800217 	ldw	r2,8(r2)
   8699c:	d8000015 	stw	zero,0(sp)
   869a0:	0009883a 	mov	r4,zero
   869a4:	100b883a 	mov	r5,r2
   869a8:	01800234 	movhi	r6,8
   869ac:	319b0604 	addi	r6,r6,27672
   869b0:	e1fffc17 	ldw	r7,-16(fp)
   869b4:	008b9440 	call	8b944 <alt_ic_isr_register>
   869b8:	10000126 	beq	r2,zero,869c0 <Touch_Init+0x104>
		                   ) != 0)){
 #else
  if ((alt_irq_register(p->penirq_irq, (void *)p, touch_isr) != 0)){
 #endif
        DEBUG_OUT(("[TOUCH]register IRQ fail\n"));
        bSuccess = FALSE;
   869bc:	e03ffb15 	stw	zero,-20(fp)
    }else{        
        DEBUG_OUT(("[TOUCH]register IRQ success\n"));
    }

    if (bSuccess){    
   869c0:	e0bffb17 	ldw	r2,-20(fp)
   869c4:	10000c26 	beq	r2,zero,869f8 <Touch_Init+0x13c>
        if (alt_alarm_start(&p->alarm, p->alarm_dur, touch_alarm_callback, p) == 0){
   869c8:	e0bffc17 	ldw	r2,-16(fp)
   869cc:	10c01004 	addi	r3,r2,64
   869d0:	e0bffc17 	ldw	r2,-16(fp)
   869d4:	10801617 	ldw	r2,88(r2)
   869d8:	1809883a 	mov	r4,r3
   869dc:	100b883a 	mov	r5,r2
   869e0:	01800234 	movhi	r6,8
   869e4:	319c6d04 	addi	r6,r6,29108
   869e8:	e1fffc17 	ldw	r7,-16(fp)
   869ec:	008b8040 	call	8b804 <alt_alarm_start>
   869f0:	10000126 	beq	r2,zero,869f8 <Touch_Init+0x13c>
            DEBUG_OUT(("[TOUCH]alarm start success\n"));
        }else{
            DEBUG_OUT(("[TOUCH]alarm start fail\n"));
            bSuccess = FALSE;
   869f4:	e03ffb15 	stw	zero,-20(fp)
        }
    }
    
    if (!bSuccess && p){
   869f8:	e0bffb17 	ldw	r2,-20(fp)
   869fc:	1000051e 	bne	r2,zero,86a14 <Touch_Init+0x158>
   86a00:	e0bffc17 	ldw	r2,-16(fp)
   86a04:	10000326 	beq	r2,zero,86a14 <Touch_Init+0x158>
        free(p);
   86a08:	e13ffc17 	ldw	r4,-16(fp)
   86a0c:	0089c540 	call	89c54 <free>
        p = NULL;
   86a10:	e03ffc15 	stw	zero,-16(fp)
    }        
                
    return p;        
   86a14:	e0bffc17 	ldw	r2,-16(fp)
    

}
   86a18:	e037883a 	mov	sp,fp
   86a1c:	dfc00117 	ldw	ra,4(sp)
   86a20:	df000017 	ldw	fp,0(sp)
   86a24:	dec00204 	addi	sp,sp,8
   86a28:	f800283a 	ret

00086a2c <Touch_UnInit>:

// uninit touch panel
void Touch_UnInit(TOUCH_HANDLE pHandle){
   86a2c:	defffc04 	addi	sp,sp,-16
   86a30:	dfc00315 	stw	ra,12(sp)
   86a34:	df000215 	stw	fp,8(sp)
   86a38:	df000204 	addi	fp,sp,8
   86a3c:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
   86a40:	e0bfff17 	ldw	r2,-4(fp)
   86a44:	e0bffe15 	stw	r2,-8(fp)
    if (!p)
   86a48:	e0bffe17 	ldw	r2,-8(fp)
   86a4c:	1000011e 	bne	r2,zero,86a54 <Touch_UnInit+0x28>
        return;
   86a50:	00000b06 	br	86a80 <Touch_UnInit+0x54>
        
    // stop alarm
    alt_alarm_stop(&(p->alarm));
   86a54:	e0bffe17 	ldw	r2,-8(fp)
   86a58:	10801004 	addi	r2,r2,64
   86a5c:	1009883a 	mov	r4,r2
   86a60:	008be580 	call	8be58 <alt_alarm_stop>
    // disable irq
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, 0x00);
   86a64:	e0bffe17 	ldw	r2,-8(fp)
   86a68:	10800117 	ldw	r2,4(r2)
   86a6c:	10800204 	addi	r2,r2,8
   86a70:	0007883a 	mov	r3,zero
   86a74:	10c00035 	stwio	r3,0(r2)
    
    // zero varialbe
    free(p);
   86a78:	e13ffe17 	ldw	r4,-8(fp)
   86a7c:	0089c540 	call	89c54 <free>
}
   86a80:	e037883a 	mov	sp,fp
   86a84:	dfc00117 	ldw	ra,4(sp)
   86a88:	df000017 	ldw	fp,0(sp)
   86a8c:	dec00204 	addi	sp,sp,8
   86a90:	f800283a 	ret

00086a94 <Touch_EmptyFifo>:


void Touch_EmptyFifo(TOUCH_HANDLE pHandle){
   86a94:	defffc04 	addi	sp,sp,-16
   86a98:	dfc00315 	stw	ra,12(sp)
   86a9c:	df000215 	stw	fp,8(sp)
   86aa0:	df000204 	addi	fp,sp,8
   86aa4:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
   86aa8:	e0bfff17 	ldw	r2,-4(fp)
   86aac:	e0bffe15 	stw	r2,-8(fp)
    touch_empty_fifo(p);
   86ab0:	e13ffe17 	ldw	r4,-8(fp)
   86ab4:	0086c900 	call	86c90 <touch_empty_fifo>
}
   86ab8:	e037883a 	mov	sp,fp
   86abc:	dfc00117 	ldw	ra,4(sp)
   86ac0:	df000017 	ldw	fp,0(sp)
   86ac4:	dec00204 	addi	sp,sp,8
   86ac8:	f800283a 	ret

00086acc <Touch_GetXY>:

// get x/y from internal FIFO
bool Touch_GetXY(TOUCH_HANDLE pHandle, int *x, int *y){
   86acc:	defff904 	addi	sp,sp,-28
   86ad0:	dfc00615 	stw	ra,24(sp)
   86ad4:	df000515 	stw	fp,20(sp)
   86ad8:	dc000415 	stw	r16,16(sp)
   86adc:	df000504 	addi	fp,sp,20
   86ae0:	e13ffc15 	stw	r4,-16(fp)
   86ae4:	e17ffd15 	stw	r5,-12(fp)
   86ae8:	e1bffe15 	stw	r6,-8(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
   86aec:	e0bffc17 	ldw	r2,-16(fp)
   86af0:	e0bffb15 	stw	r2,-20(fp)
    if (!p)
   86af4:	e0bffb17 	ldw	r2,-20(fp)
   86af8:	1000021e 	bne	r2,zero,86b04 <Touch_GetXY+0x38>
        return FALSE;    
   86afc:	0005883a 	mov	r2,zero
   86b00:	00003f06 	br	86c00 <Touch_GetXY+0x134>
    
    if (p->fifo_front == p->fifo_rear){
   86b04:	e0bffb17 	ldw	r2,-20(fp)
   86b08:	10c0040b 	ldhu	r3,16(r2)
   86b0c:	e0bffb17 	ldw	r2,-20(fp)
   86b10:	1080048b 	ldhu	r2,18(r2)
   86b14:	18ffffcc 	andi	r3,r3,65535
   86b18:	10bfffcc 	andi	r2,r2,65535
   86b1c:	1880021e 	bne	r3,r2,86b28 <Touch_GetXY+0x5c>
        // empty
        return FALSE;
   86b20:	0005883a 	mov	r2,zero
   86b24:	00003606 	br	86c00 <Touch_GetXY+0x134>
    }
    *x = p->fifo_x[p->fifo_rear];
   86b28:	e0bffb17 	ldw	r2,-20(fp)
   86b2c:	1080048b 	ldhu	r2,18(r2)
   86b30:	10bfffcc 	andi	r2,r2,65535
   86b34:	e0fffb17 	ldw	r3,-20(fp)
   86b38:	10800284 	addi	r2,r2,10
   86b3c:	1085883a 	add	r2,r2,r2
   86b40:	1885883a 	add	r2,r3,r2
   86b44:	1080000b 	ldhu	r2,0(r2)
   86b48:	10ffffcc 	andi	r3,r2,65535
   86b4c:	e0bffd17 	ldw	r2,-12(fp)
   86b50:	10c00015 	stw	r3,0(r2)
    *y = p->fifo_y[p->fifo_rear];
   86b54:	e0bffb17 	ldw	r2,-20(fp)
   86b58:	1080048b 	ldhu	r2,18(r2)
   86b5c:	10bfffcc 	andi	r2,r2,65535
   86b60:	e0fffb17 	ldw	r3,-20(fp)
   86b64:	10800504 	addi	r2,r2,20
   86b68:	1085883a 	add	r2,r2,r2
   86b6c:	1885883a 	add	r2,r3,r2
   86b70:	1080000b 	ldhu	r2,0(r2)
   86b74:	10ffffcc 	andi	r3,r2,65535
   86b78:	e0bffe17 	ldw	r2,-8(fp)
   86b7c:	10c00015 	stw	r3,0(r2)
    //
    p->fifo_rear++;
   86b80:	e0bffb17 	ldw	r2,-20(fp)
   86b84:	1080048b 	ldhu	r2,18(r2)
   86b88:	10800044 	addi	r2,r2,1
   86b8c:	1007883a 	mov	r3,r2
   86b90:	e0bffb17 	ldw	r2,-20(fp)
   86b94:	10c0048d 	sth	r3,18(r2)
    p->fifo_rear %= FIFO_SIZE;
   86b98:	e0bffb17 	ldw	r2,-20(fp)
   86b9c:	1080048b 	ldhu	r2,18(r2)
   86ba0:	10bfffcc 	andi	r2,r2,65535
   86ba4:	1009883a 	mov	r4,r2
   86ba8:	01400284 	movi	r5,10
   86bac:	008787c0 	call	8787c <__umodsi3>
   86bb0:	1007883a 	mov	r3,r2
   86bb4:	e0bffb17 	ldw	r2,-20(fp)
   86bb8:	10c0048d 	sth	r3,18(r2)
    //
    // translate
    touch_xy_transform(x, y);
   86bbc:	e13ffd17 	ldw	r4,-12(fp)
   86bc0:	e17ffe17 	ldw	r5,-8(fp)
   86bc4:	008722c0 	call	8722c <touch_xy_transform>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   86bc8:	008002f4 	movhi	r2,11
   86bcc:	10b97b04 	addi	r2,r2,-6676
   86bd0:	10800017 	ldw	r2,0(r2)

    DEBUG_OUT("[TOUCH] x=%d, y=%d\n", *x,*y);
//    touch_clear_input(p);
//    touch_empty_fifo(p);
    p->next_active_time = alt_nticks() + ACTIVE_DELAY_TIME;
   86bd4:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   86bd8:	008002f4 	movhi	r2,11
   86bdc:	10b97a04 	addi	r2,r2,-6680
   86be0:	10800017 	ldw	r2,0(r2)
   86be4:	1009883a 	mov	r4,r2
   86be8:	01400f04 	movi	r5,60
   86bec:	00878740 	call	87874 <__udivsi3>
   86bf0:	8087883a 	add	r3,r16,r2
   86bf4:	e0bffb17 	ldw	r2,-20(fp)
   86bf8:	10c01715 	stw	r3,92(r2)
    
    return TRUE;
   86bfc:	00800044 	movi	r2,1
}
   86c00:	e6ffff04 	addi	sp,fp,-4
   86c04:	dfc00217 	ldw	ra,8(sp)
   86c08:	df000117 	ldw	fp,4(sp)
   86c0c:	dc000017 	ldw	r16,0(sp)
   86c10:	dec00304 	addi	sp,sp,12
   86c14:	f800283a 	ret

00086c18 <touch_isr>:



// penirq_n ISR
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void touch_isr(void* context){
   86c18:	defffb04 	addi	sp,sp,-20
   86c1c:	dfc00415 	stw	ra,16(sp)
   86c20:	df000315 	stw	fp,12(sp)
   86c24:	df000304 	addi	fp,sp,12
   86c28:	e13fff15 	stw	r4,-4(fp)
#else
void touch_isr(void* context, alt_u32 id){
#endif
    alt_u8 mask;
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
   86c2c:	e0bfff17 	ldw	r2,-4(fp)
   86c30:	e0bffd15 	stw	r2,-12(fp)

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_disable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
   86c34:	0009883a 	mov	r4,zero
   86c38:	01400144 	movi	r5,5
   86c3c:	008ba300 	call	8ba30 <alt_ic_irq_disable>
#else
    alt_irq_disable(id);
#endif

    // get the edge capture mask
    mask = IORD_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base);
   86c40:	e0bffd17 	ldw	r2,-12(fp)
   86c44:	10800117 	ldw	r2,4(r2)
   86c48:	10800304 	addi	r2,r2,12
   86c4c:	10800037 	ldwio	r2,0(r2)
   86c50:	e0bffe05 	stb	r2,-8(fp)
    //if ((mask & Touch.irq_mask) == 0)  // 1-pin
    //    return;
    DEBUG_OUT("Touched!!\n");
    usleep(1000);
   86c54:	0100fa04 	movi	r4,1000
   86c58:	008bff40 	call	8bff4 <usleep>
    }
    IOWR(PIO_RED_LED_BASE, 0, Touch.pen_pressed);
#endif                    
    
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);    
   86c5c:	e0bffd17 	ldw	r2,-12(fp)
   86c60:	10800117 	ldw	r2,4(r2)
   86c64:	10800304 	addi	r2,r2,12
   86c68:	0007883a 	mov	r3,zero
   86c6c:	10c00035 	stwio	r3,0(r2)
    
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_enable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
   86c70:	0009883a 	mov	r4,zero
   86c74:	01400144 	movi	r5,5
   86c78:	008b9940 	call	8b994 <alt_ic_irq_enable>
#else
    alt_irq_enable(id);
#endif

}
   86c7c:	e037883a 	mov	sp,fp
   86c80:	dfc00117 	ldw	ra,4(sp)
   86c84:	df000017 	ldw	fp,0(sp)
   86c88:	dec00204 	addi	sp,sp,8
   86c8c:	f800283a 	ret

00086c90 <touch_empty_fifo>:

void touch_empty_fifo(TERASIC_TOUCH_PANEL *p){
   86c90:	defffe04 	addi	sp,sp,-8
   86c94:	df000115 	stw	fp,4(sp)
   86c98:	df000104 	addi	fp,sp,4
   86c9c:	e13fff15 	stw	r4,-4(fp)
    p->fifo_rear = p->fifo_front;
   86ca0:	e0bfff17 	ldw	r2,-4(fp)
   86ca4:	10c0040b 	ldhu	r3,16(r2)
   86ca8:	e0bfff17 	ldw	r2,-4(fp)
   86cac:	10c0048d 	sth	r3,18(r2)
}
   86cb0:	e037883a 	mov	sp,fp
   86cb4:	df000017 	ldw	fp,0(sp)
   86cb8:	dec00104 	addi	sp,sp,4
   86cbc:	f800283a 	ret

00086cc0 <touch_is_pen_pressed>:

bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p){
   86cc0:	defffd04 	addi	sp,sp,-12
   86cc4:	df000215 	stw	fp,8(sp)
   86cc8:	df000204 	addi	fp,sp,8
   86ccc:	e13fff15 	stw	r4,-4(fp)
    bool bPressed;
    bPressed = (IORD(p->penirq_base, 0) & 0x01)?FALSE:TRUE;
   86cd0:	e0bfff17 	ldw	r2,-4(fp)
   86cd4:	10800117 	ldw	r2,4(r2)
   86cd8:	10800037 	ldwio	r2,0(r2)
   86cdc:	1080004c 	andi	r2,r2,1
   86ce0:	1005003a 	cmpeq	r2,r2,zero
   86ce4:	10803fcc 	andi	r2,r2,255
   86ce8:	e0bffe15 	stw	r2,-8(fp)
    return bPressed;
   86cec:	e0bffe17 	ldw	r2,-8(fp)
}
   86cf0:	e037883a 	mov	sp,fp
   86cf4:	df000017 	ldw	fp,0(sp)
   86cf8:	dec00104 	addi	sp,sp,4
   86cfc:	f800283a 	ret

00086d00 <touch_enable_penirq>:


void touch_enable_penirq(TERASIC_TOUCH_PANEL *p){
   86d00:	defff904 	addi	sp,sp,-28
   86d04:	dfc00615 	stw	ra,24(sp)
   86d08:	df000515 	stw	fp,20(sp)
   86d0c:	df000504 	addi	fp,sp,20
   86d10:	e13fff15 	stw	r4,-4(fp)
    const alt_u8 CommandGetX = 0x82;
   86d14:	00bfe084 	movi	r2,-126
   86d18:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
   86d1c:	00bff484 	movi	r2,-46
   86d20:	e0bffe45 	stb	r2,-7(fp)
    alt_u8 data8;
    
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   86d24:	e0bfff17 	ldw	r2,-4(fp)
   86d28:	10800017 	ldw	r2,0(r2)
   86d2c:	d8000015 	stw	zero,0(sp)
   86d30:	d8000115 	stw	zero,4(sp)
   86d34:	00c00044 	movi	r3,1
   86d38:	d8c00215 	stw	r3,8(sp)
   86d3c:	1009883a 	mov	r4,r2
   86d40:	000b883a 	mov	r5,zero
   86d44:	01800044 	movi	r6,1
   86d48:	e1fffe04 	addi	r7,fp,-8
   86d4c:	008cc680 	call	8cc68 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
   86d50:	e0bfff17 	ldw	r2,-4(fp)
   86d54:	10800017 	ldw	r2,0(r2)
   86d58:	00c00044 	movi	r3,1
   86d5c:	d8c00015 	stw	r3,0(sp)
   86d60:	e0fffe84 	addi	r3,fp,-6
   86d64:	d8c00115 	stw	r3,4(sp)
   86d68:	00c00044 	movi	r3,1
   86d6c:	d8c00215 	stw	r3,8(sp)
   86d70:	1009883a 	mov	r4,r2
   86d74:	000b883a 	mov	r5,zero
   86d78:	000d883a 	mov	r6,zero
   86d7c:	000f883a 	mov	r7,zero
   86d80:	008cc680 	call	8cc68 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   86d84:	e0bfff17 	ldw	r2,-4(fp)
   86d88:	10800017 	ldw	r2,0(r2)
   86d8c:	00c00044 	movi	r3,1
   86d90:	d8c00015 	stw	r3,0(sp)
   86d94:	e0fffe84 	addi	r3,fp,-6
   86d98:	d8c00115 	stw	r3,4(sp)
   86d9c:	00c00084 	movi	r3,2
   86da0:	d8c00215 	stw	r3,8(sp)
   86da4:	1009883a 	mov	r4,r2
   86da8:	000b883a 	mov	r5,zero
   86dac:	000d883a 	mov	r6,zero
   86db0:	000f883a 	mov	r7,zero
   86db4:	008cc680 	call	8cc68 <alt_avalon_spi_command>
   
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   86db8:	e0bfff17 	ldw	r2,-4(fp)
   86dbc:	10c00017 	ldw	r3,0(r2)
   86dc0:	e0bffe44 	addi	r2,fp,-7
   86dc4:	d8000015 	stw	zero,0(sp)
   86dc8:	d8000115 	stw	zero,4(sp)
   86dcc:	01000044 	movi	r4,1
   86dd0:	d9000215 	stw	r4,8(sp)
   86dd4:	1809883a 	mov	r4,r3
   86dd8:	000b883a 	mov	r5,zero
   86ddc:	01800044 	movi	r6,1
   86de0:	100f883a 	mov	r7,r2
   86de4:	008cc680 	call	8cc68 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
   86de8:	e0bfff17 	ldw	r2,-4(fp)
   86dec:	10800017 	ldw	r2,0(r2)
   86df0:	00c00044 	movi	r3,1
   86df4:	d8c00015 	stw	r3,0(sp)
   86df8:	e0fffe84 	addi	r3,fp,-6
   86dfc:	d8c00115 	stw	r3,4(sp)
   86e00:	00c00044 	movi	r3,1
   86e04:	d8c00215 	stw	r3,8(sp)
   86e08:	1009883a 	mov	r4,r2
   86e0c:	000b883a 	mov	r5,zero
   86e10:	000d883a 	mov	r6,zero
   86e14:	000f883a 	mov	r7,zero
   86e18:	008cc680 	call	8cc68 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   86e1c:	e0bfff17 	ldw	r2,-4(fp)
   86e20:	10800017 	ldw	r2,0(r2)
   86e24:	00c00044 	movi	r3,1
   86e28:	d8c00015 	stw	r3,0(sp)
   86e2c:	e0fffe84 	addi	r3,fp,-6
   86e30:	d8c00115 	stw	r3,4(sp)
   86e34:	00c00084 	movi	r3,2
   86e38:	d8c00215 	stw	r3,8(sp)
   86e3c:	1009883a 	mov	r4,r2
   86e40:	000b883a 	mov	r5,zero
   86e44:	000d883a 	mov	r6,zero
   86e48:	000f883a 	mov	r7,zero
   86e4c:	008cc680 	call	8cc68 <alt_avalon_spi_command>
}
   86e50:	e037883a 	mov	sp,fp
   86e54:	dfc00117 	ldw	ra,4(sp)
   86e58:	df000017 	ldw	fp,0(sp)
   86e5c:	dec00204 	addi	sp,sp,8
   86e60:	f800283a 	ret

00086e64 <touch_clear_input>:

void touch_clear_input(TERASIC_TOUCH_PANEL *p){
   86e64:	defffd04 	addi	sp,sp,-12
   86e68:	dfc00215 	stw	ra,8(sp)
   86e6c:	df000115 	stw	fp,4(sp)
   86e70:	df000104 	addi	fp,sp,4
   86e74:	e13fff15 	stw	r4,-4(fp)
    touch_enable_penirq(p);
   86e78:	e13fff17 	ldw	r4,-4(fp)
   86e7c:	0086d000 	call	86d00 <touch_enable_penirq>
}
   86e80:	e037883a 	mov	sp,fp
   86e84:	dfc00117 	ldw	ra,4(sp)
   86e88:	df000017 	ldw	fp,0(sp)
   86e8c:	dec00204 	addi	sp,sp,8
   86e90:	f800283a 	ret

00086e94 <touch_get_xy>:

// get x/y by SPI command
void touch_get_xy(TERASIC_TOUCH_PANEL *p){
   86e94:	defff604 	addi	sp,sp,-40
   86e98:	dfc00915 	stw	ra,36(sp)
   86e9c:	df000815 	stw	fp,32(sp)
   86ea0:	df000804 	addi	fp,sp,32
   86ea4:	e13fff15 	stw	r4,-4(fp)
    alt_u16 x, y;
    int result;
    const alt_u8 CommandGetX = 0x92;
   86ea8:	00bfe484 	movi	r2,-110
   86eac:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
   86eb0:	00bff484 	movi	r2,-46
   86eb4:	e0bffe45 	stb	r2,-7(fp)
    
       
    //DEBUG_OUT(("[TOUCH] get x/y\n"));

    // x
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   86eb8:	e0bfff17 	ldw	r2,-4(fp)
   86ebc:	10c00017 	ldw	r3,0(r2)
   86ec0:	e0bffe04 	addi	r2,fp,-8
   86ec4:	d8000015 	stw	zero,0(sp)
   86ec8:	d8000115 	stw	zero,4(sp)
   86ecc:	01000044 	movi	r4,1
   86ed0:	d9000215 	stw	r4,8(sp)
   86ed4:	1809883a 	mov	r4,r3
   86ed8:	000b883a 	mov	r5,zero
   86edc:	01800044 	movi	r6,1
   86ee0:	100f883a 	mov	r7,r2
   86ee4:	008cc680 	call	8cc68 <alt_avalon_spi_command>
   86ee8:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
   86eec:	e0bfff17 	ldw	r2,-4(fp)
   86ef0:	10800017 	ldw	r2,0(r2)
   86ef4:	00c00044 	movi	r3,1
   86ef8:	d8c00015 	stw	r3,0(sp)
   86efc:	e0fffe84 	addi	r3,fp,-6
   86f00:	d8c00115 	stw	r3,4(sp)
   86f04:	00c00044 	movi	r3,1
   86f08:	d8c00215 	stw	r3,8(sp)
   86f0c:	1009883a 	mov	r4,r2
   86f10:	000b883a 	mov	r5,zero
   86f14:	000d883a 	mov	r6,zero
   86f18:	000f883a 	mov	r7,zero
   86f1c:	008cc680 	call	8cc68 <alt_avalon_spi_command>
   86f20:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
   86f24:	e0bffb17 	ldw	r2,-20(fp)
   86f28:	10800060 	cmpeqi	r2,r2,1
   86f2c:	1000011e 	bne	r2,zero,86f34 <touch_get_xy+0xa0>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
   86f30:	00009b06 	br	871a0 <touch_get_xy+0x30c>
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   86f34:	e0bfff17 	ldw	r2,-4(fp)
   86f38:	10800017 	ldw	r2,0(r2)
   86f3c:	00c00044 	movi	r3,1
   86f40:	d8c00015 	stw	r3,0(sp)
   86f44:	e0fffec4 	addi	r3,fp,-5
   86f48:	d8c00115 	stw	r3,4(sp)
   86f4c:	00c00084 	movi	r3,2
   86f50:	d8c00215 	stw	r3,8(sp)
   86f54:	1009883a 	mov	r4,r2
   86f58:	000b883a 	mov	r5,zero
   86f5c:	000d883a 	mov	r6,zero
   86f60:	000f883a 	mov	r7,zero
   86f64:	008cc680 	call	8cc68 <alt_avalon_spi_command>
   86f68:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
   86f6c:	e0bffb17 	ldw	r2,-20(fp)
   86f70:	10800060 	cmpeqi	r2,r2,1
   86f74:	1000011e 	bne	r2,zero,86f7c <touch_get_xy+0xe8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
   86f78:	00008906 	br	871a0 <touch_get_xy+0x30c>
    }  
    ResponseX = (high_byte << 8) | low_byte;        
   86f7c:	e0bffe83 	ldbu	r2,-6(fp)
   86f80:	10803fcc 	andi	r2,r2,255
   86f84:	1004923a 	slli	r2,r2,8
   86f88:	1007883a 	mov	r3,r2
   86f8c:	e0bffec3 	ldbu	r2,-5(fp)
   86f90:	10803fcc 	andi	r2,r2,255
   86f94:	1884b03a 	or	r2,r3,r2
   86f98:	e0bffc0d 	sth	r2,-16(fp)
    
    // y
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   86f9c:	e0bfff17 	ldw	r2,-4(fp)
   86fa0:	10c00017 	ldw	r3,0(r2)
   86fa4:	e0bffe44 	addi	r2,fp,-7
   86fa8:	d8000015 	stw	zero,0(sp)
   86fac:	d8000115 	stw	zero,4(sp)
   86fb0:	01000044 	movi	r4,1
   86fb4:	d9000215 	stw	r4,8(sp)
   86fb8:	1809883a 	mov	r4,r3
   86fbc:	000b883a 	mov	r5,zero
   86fc0:	01800044 	movi	r6,1
   86fc4:	100f883a 	mov	r7,r2
   86fc8:	008cc680 	call	8cc68 <alt_avalon_spi_command>
   86fcc:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
   86fd0:	e0bfff17 	ldw	r2,-4(fp)
   86fd4:	10800017 	ldw	r2,0(r2)
   86fd8:	00c00044 	movi	r3,1
   86fdc:	d8c00015 	stw	r3,0(sp)
   86fe0:	e0fffe84 	addi	r3,fp,-6
   86fe4:	d8c00115 	stw	r3,4(sp)
   86fe8:	00c00044 	movi	r3,1
   86fec:	d8c00215 	stw	r3,8(sp)
   86ff0:	1009883a 	mov	r4,r2
   86ff4:	000b883a 	mov	r5,zero
   86ff8:	000d883a 	mov	r6,zero
   86ffc:	000f883a 	mov	r7,zero
   87000:	008cc680 	call	8cc68 <alt_avalon_spi_command>
   87004:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
   87008:	e0bffb17 	ldw	r2,-20(fp)
   8700c:	10800060 	cmpeqi	r2,r2,1
   87010:	1000011e 	bne	r2,zero,87018 <touch_get_xy+0x184>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
   87014:	00006206 	br	871a0 <touch_get_xy+0x30c>
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   87018:	e0bfff17 	ldw	r2,-4(fp)
   8701c:	10800017 	ldw	r2,0(r2)
   87020:	00c00044 	movi	r3,1
   87024:	d8c00015 	stw	r3,0(sp)
   87028:	e0fffec4 	addi	r3,fp,-5
   8702c:	d8c00115 	stw	r3,4(sp)
   87030:	00c00084 	movi	r3,2
   87034:	d8c00215 	stw	r3,8(sp)
   87038:	1009883a 	mov	r4,r2
   8703c:	000b883a 	mov	r5,zero
   87040:	000d883a 	mov	r6,zero
   87044:	000f883a 	mov	r7,zero
   87048:	008cc680 	call	8cc68 <alt_avalon_spi_command>
   8704c:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
   87050:	e0bffb17 	ldw	r2,-20(fp)
   87054:	10800060 	cmpeqi	r2,r2,1
   87058:	1000011e 	bne	r2,zero,87060 <touch_get_xy+0x1cc>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
   8705c:	00005006 	br	871a0 <touch_get_xy+0x30c>
    }  
    ResponseY = (high_byte << 8) | low_byte;        
   87060:	e0bffe83 	ldbu	r2,-6(fp)
   87064:	10803fcc 	andi	r2,r2,255
   87068:	1004923a 	slli	r2,r2,8
   8706c:	1007883a 	mov	r3,r2
   87070:	e0bffec3 	ldbu	r2,-5(fp)
   87074:	10803fcc 	andi	r2,r2,255
   87078:	1884b03a 	or	r2,r3,r2
   8707c:	e0bffc8d 	sth	r2,-14(fp)

    if (!touch_is_pen_pressed(p))
   87080:	e13fff17 	ldw	r4,-4(fp)
   87084:	0086cc00 	call	86cc0 <touch_is_pen_pressed>
   87088:	1000011e 	bne	r2,zero,87090 <touch_get_xy+0x1fc>
        return; // do not use this data    
   8708c:	00004406 	br	871a0 <touch_get_xy+0x30c>
        
    x = (ResponseX >> 3 ) & 0xFFF;  // 12 bits    
   87090:	e0bffc0b 	ldhu	r2,-16(fp)
   87094:	1004d0fa 	srli	r2,r2,3
   87098:	1083ffcc 	andi	r2,r2,4095
   8709c:	e0bffd0d 	sth	r2,-12(fp)
    y = (ResponseY >> 3 ) & 0xFFF;  // 12 bits
   870a0:	e0bffc8b 	ldhu	r2,-14(fp)
   870a4:	1004d0fa 	srli	r2,r2,3
   870a8:	1083ffcc 	andi	r2,r2,4095
   870ac:	e0bffd8d 	sth	r2,-10(fp)
    
    
    // check whether the fifo is full!
    if (((p->fifo_front+1)%FIFO_SIZE) == p->fifo_rear){
   870b0:	e0bfff17 	ldw	r2,-4(fp)
   870b4:	1080040b 	ldhu	r2,16(r2)
   870b8:	10bfffcc 	andi	r2,r2,65535
   870bc:	10800044 	addi	r2,r2,1
   870c0:	1009883a 	mov	r4,r2
   870c4:	01400284 	movi	r5,10
   870c8:	00878280 	call	87828 <__modsi3>
   870cc:	1007883a 	mov	r3,r2
   870d0:	e0bfff17 	ldw	r2,-4(fp)
   870d4:	1080048b 	ldhu	r2,18(r2)
   870d8:	10bfffcc 	andi	r2,r2,65535
   870dc:	18800f1e 	bne	r3,r2,8711c <touch_get_xy+0x288>
        // full, pop an old one
        p->fifo_rear++;
   870e0:	e0bfff17 	ldw	r2,-4(fp)
   870e4:	1080048b 	ldhu	r2,18(r2)
   870e8:	10800044 	addi	r2,r2,1
   870ec:	1007883a 	mov	r3,r2
   870f0:	e0bfff17 	ldw	r2,-4(fp)
   870f4:	10c0048d 	sth	r3,18(r2)
        p->fifo_rear %= FIFO_SIZE;        
   870f8:	e0bfff17 	ldw	r2,-4(fp)
   870fc:	1080048b 	ldhu	r2,18(r2)
   87100:	10bfffcc 	andi	r2,r2,65535
   87104:	1009883a 	mov	r4,r2
   87108:	01400284 	movi	r5,10
   8710c:	008787c0 	call	8787c <__umodsi3>
   87110:	1007883a 	mov	r3,r2
   87114:	e0bfff17 	ldw	r2,-4(fp)
   87118:	10c0048d 	sth	r3,18(r2)
        
    }
    DEBUG_OUT("[ ADC] x=%d, y=%d\n", x,y);

    // push now
    p->fifo_x[p->fifo_front] = x;
   8711c:	e0bfff17 	ldw	r2,-4(fp)
   87120:	1080040b 	ldhu	r2,16(r2)
   87124:	10bfffcc 	andi	r2,r2,65535
   87128:	e0ffff17 	ldw	r3,-4(fp)
   8712c:	10800284 	addi	r2,r2,10
   87130:	1085883a 	add	r2,r2,r2
   87134:	1885883a 	add	r2,r3,r2
   87138:	e0fffd0b 	ldhu	r3,-12(fp)
   8713c:	10c0000d 	sth	r3,0(r2)
    p->fifo_y[p->fifo_front] = y;    
   87140:	e0bfff17 	ldw	r2,-4(fp)
   87144:	1080040b 	ldhu	r2,16(r2)
   87148:	10bfffcc 	andi	r2,r2,65535
   8714c:	e0ffff17 	ldw	r3,-4(fp)
   87150:	10800504 	addi	r2,r2,20
   87154:	1085883a 	add	r2,r2,r2
   87158:	1885883a 	add	r2,r3,r2
   8715c:	e0fffd8b 	ldhu	r3,-10(fp)
   87160:	10c0000d 	sth	r3,0(r2)
    p->fifo_front++;
   87164:	e0bfff17 	ldw	r2,-4(fp)
   87168:	1080040b 	ldhu	r2,16(r2)
   8716c:	10800044 	addi	r2,r2,1
   87170:	1007883a 	mov	r3,r2
   87174:	e0bfff17 	ldw	r2,-4(fp)
   87178:	10c0040d 	sth	r3,16(r2)
    p->fifo_front %= FIFO_SIZE;   
   8717c:	e0bfff17 	ldw	r2,-4(fp)
   87180:	1080040b 	ldhu	r2,16(r2)
   87184:	10bfffcc 	andi	r2,r2,65535
   87188:	1009883a 	mov	r4,r2
   8718c:	01400284 	movi	r5,10
   87190:	008787c0 	call	8787c <__umodsi3>
   87194:	1007883a 	mov	r3,r2
   87198:	e0bfff17 	ldw	r2,-4(fp)
   8719c:	10c0040d 	sth	r3,16(r2)
    
}
   871a0:	e037883a 	mov	sp,fp
   871a4:	dfc00117 	ldw	ra,4(sp)
   871a8:	df000017 	ldw	fp,0(sp)
   871ac:	dec00204 	addi	sp,sp,8
   871b0:	f800283a 	ret

000871b4 <touch_alarm_callback>:

// polling x/y when penirq_n is low
alt_u32 touch_alarm_callback(void *context){
   871b4:	defffc04 	addi	sp,sp,-16
   871b8:	dfc00315 	stw	ra,12(sp)
   871bc:	df000215 	stw	fp,8(sp)
   871c0:	df000204 	addi	fp,sp,8
   871c4:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
   871c8:	e0bfff17 	ldw	r2,-4(fp)
   871cc:	e0bffe15 	stw	r2,-8(fp)
    
    if (touch_is_pen_pressed(p)){//Touch.pen_pressed){
   871d0:	e13ffe17 	ldw	r4,-8(fp)
   871d4:	0086cc00 	call	86cc0 <touch_is_pen_pressed>
   871d8:	10000926 	beq	r2,zero,87200 <touch_alarm_callback+0x4c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   871dc:	008002f4 	movhi	r2,11
   871e0:	10b97b04 	addi	r2,r2,-6676
   871e4:	10800017 	ldw	r2,0(r2)
        if (alt_nticks() > p->next_active_time)
   871e8:	e0fffe17 	ldw	r3,-8(fp)
   871ec:	18c01717 	ldw	r3,92(r3)
   871f0:	1880072e 	bgeu	r3,r2,87210 <touch_alarm_callback+0x5c>
            touch_get_xy(p);
   871f4:	e13ffe17 	ldw	r4,-8(fp)
   871f8:	0086e940 	call	86e94 <touch_get_xy>
   871fc:	00000406 	br	87210 <touch_alarm_callback+0x5c>
      //  p->last_active_time = alt_nticks(); 
    }else{
       // touch_empty_fifo(p);
        //if ((alt_nticks() - Touch.last_active_time) > alt_ticks_per_second()/10){
         touch_enable_penirq(p);
   87200:	e13ffe17 	ldw	r4,-8(fp)
   87204:	0086d000 	call	86d00 <touch_enable_penirq>
         touch_clear_input(p);
   87208:	e13ffe17 	ldw	r4,-8(fp)
   8720c:	0086e640 	call	86e64 <touch_clear_input>
          //  p->last_active_time = alt_nticks(); 
        //}            
    }        
    return p->alarm_dur;
   87210:	e0bffe17 	ldw	r2,-8(fp)
   87214:	10801617 	ldw	r2,88(r2)
}
   87218:	e037883a 	mov	sp,fp
   8721c:	dfc00117 	ldw	ra,4(sp)
   87220:	df000017 	ldw	fp,0(sp)
   87224:	dec00204 	addi	sp,sp,8
   87228:	f800283a 	ret

0008722c <touch_xy_transform>:

void touch_xy_transform(int *x, int *y){
   8722c:	defff904 	addi	sp,sp,-28
   87230:	dfc00615 	stw	ra,24(sp)
   87234:	df000515 	stw	fp,20(sp)
   87238:	df000504 	addi	fp,sp,20
   8723c:	e13ffe15 	stw	r4,-8(fp)
   87240:	e17fff15 	stw	r5,-4(fp)
    int xx, yy;
    const int y_ignore = 200;
   87244:	00803204 	movi	r2,200
   87248:	e0bffc15 	stw	r2,-16(fp)
    xx = *y;
   8724c:	e0bfff17 	ldw	r2,-4(fp)
   87250:	10800017 	ldw	r2,0(r2)
   87254:	e0bffd15 	stw	r2,-12(fp)
    yy = *x;
   87258:	e0bffe17 	ldw	r2,-8(fp)
   8725c:	10800017 	ldw	r2,0(r2)
   87260:	e0bffb15 	stw	r2,-20(fp)

    // scale & swap
   // xx = 4096 -1 - xx;
    xx = xx * X_RES / 4096;
   87264:	e0bffd17 	ldw	r2,-12(fp)
   87268:	10803c24 	muli	r2,r2,240
   8726c:	1000010e 	bge	r2,zero,87274 <touch_xy_transform+0x48>
   87270:	1083ffc4 	addi	r2,r2,4095
   87274:	1005d33a 	srai	r2,r2,12
   87278:	e0bffd15 	stw	r2,-12(fp)

   // yy = 4096 -1 - yy;

    // special calibrate for LT24
    if (yy > (4096-y_ignore))
   8727c:	00c40004 	movi	r3,4096
   87280:	e0bffc17 	ldw	r2,-16(fp)
   87284:	1887c83a 	sub	r3,r3,r2
   87288:	e0bffb17 	ldw	r2,-20(fp)
   8728c:	1880040e 	bge	r3,r2,872a0 <touch_xy_transform+0x74>
    	yy = 4096-y_ignore;
   87290:	00c40004 	movi	r3,4096
   87294:	e0bffc17 	ldw	r2,-16(fp)
   87298:	1885c83a 	sub	r2,r3,r2
   8729c:	e0bffb15 	stw	r2,-20(fp)
    yy = yy * 4095/ (4096-y_ignore);
   872a0:	e0bffb17 	ldw	r2,-20(fp)
   872a4:	10c3ffe4 	muli	r3,r2,4095
   872a8:	01040004 	movi	r4,4096
   872ac:	e0bffc17 	ldw	r2,-16(fp)
   872b0:	2085c83a 	sub	r2,r4,r2
   872b4:	1809883a 	mov	r4,r3
   872b8:	100b883a 	mov	r5,r2
   872bc:	00877e00 	call	877e0 <__divsi3>
   872c0:	e0bffb15 	stw	r2,-20(fp)

    yy = yy * Y_RES / 4096;
   872c4:	e0bffb17 	ldw	r2,-20(fp)
   872c8:	10805024 	muli	r2,r2,320
   872cc:	1000010e 	bge	r2,zero,872d4 <touch_xy_transform+0xa8>
   872d0:	1083ffc4 	addi	r2,r2,4095
   872d4:	1005d33a 	srai	r2,r2,12
   872d8:	e0bffb15 	stw	r2,-20(fp)

    // swap
    *x = xx;
   872dc:	e0bffe17 	ldw	r2,-8(fp)
   872e0:	e0fffd17 	ldw	r3,-12(fp)
   872e4:	10c00015 	stw	r3,0(r2)
    *y = yy;
   872e8:	e0bfff17 	ldw	r2,-4(fp)
   872ec:	e0fffb17 	ldw	r3,-20(fp)
   872f0:	10c00015 	stw	r3,0(r2)

}
   872f4:	e037883a 	mov	sp,fp
   872f8:	dfc00117 	ldw	ra,4(sp)
   872fc:	df000017 	ldw	fp,0(sp)
   87300:	dec00204 	addi	sp,sp,8
   87304:	f800283a 	ret

00087308 <sqrt>:
   87308:	defff104 	addi	sp,sp,-60
   8730c:	dd000d15 	stw	r20,52(sp)
   87310:	dcc00c15 	stw	r19,48(sp)
   87314:	dc800b15 	stw	r18,44(sp)
   87318:	dc400a15 	stw	r17,40(sp)
   8731c:	dc000915 	stw	r16,36(sp)
   87320:	2023883a 	mov	r17,r4
   87324:	2821883a 	mov	r16,r5
   87328:	dfc00e15 	stw	ra,56(sp)
   8732c:	048002f4 	movhi	r18,11
   87330:	94acaa04 	addi	r18,r18,-19800
   87334:	00874540 	call	87454 <__ieee754_sqrt>
   87338:	91400017 	ldw	r5,0(r18)
   8733c:	013fffc4 	movi	r4,-1
   87340:	1027883a 	mov	r19,r2
   87344:	1829883a 	mov	r20,r3
   87348:	29000a26 	beq	r5,r4,87374 <sqrt+0x6c>
   8734c:	8809883a 	mov	r4,r17
   87350:	800b883a 	mov	r5,r16
   87354:	00877000 	call	87700 <__fpclassifyd>
   87358:	10000626 	beq	r2,zero,87374 <sqrt+0x6c>
   8735c:	8809883a 	mov	r4,r17
   87360:	800b883a 	mov	r5,r16
   87364:	000d883a 	mov	r6,zero
   87368:	000f883a 	mov	r7,zero
   8736c:	00889d40 	call	889d4 <__ledf2>
   87370:	10000a16 	blt	r2,zero,8739c <sqrt+0x94>
   87374:	9805883a 	mov	r2,r19
   87378:	a007883a 	mov	r3,r20
   8737c:	dfc00e17 	ldw	ra,56(sp)
   87380:	dd000d17 	ldw	r20,52(sp)
   87384:	dcc00c17 	ldw	r19,48(sp)
   87388:	dc800b17 	ldw	r18,44(sp)
   8738c:	dc400a17 	ldw	r17,40(sp)
   87390:	dc000917 	ldw	r16,36(sp)
   87394:	dec00f04 	addi	sp,sp,60
   87398:	f800283a 	ret
   8739c:	00800044 	movi	r2,1
   873a0:	94800017 	ldw	r18,0(r18)
   873a4:	d8800015 	stw	r2,0(sp)
   873a8:	008002b4 	movhi	r2,10
   873ac:	109fb304 	addi	r2,r2,32460
   873b0:	d8800115 	stw	r2,4(sp)
   873b4:	d8000815 	stw	zero,32(sp)
   873b8:	dc400415 	stw	r17,16(sp)
   873bc:	dc000515 	stw	r16,20(sp)
   873c0:	dc400215 	stw	r17,8(sp)
   873c4:	dc000315 	stw	r16,12(sp)
   873c8:	9000111e 	bne	r18,zero,87410 <sqrt+0x108>
   873cc:	d8000615 	stw	zero,24(sp)
   873d0:	d8000715 	stw	zero,28(sp)
   873d4:	d809883a 	mov	r4,sp
   873d8:	00877680 	call	87768 <matherr>
   873dc:	10001526 	beq	r2,zero,87434 <sqrt+0x12c>
   873e0:	d8800817 	ldw	r2,32(sp)
   873e4:	1000171e 	bne	r2,zero,87444 <sqrt+0x13c>
   873e8:	d8800617 	ldw	r2,24(sp)
   873ec:	d8c00717 	ldw	r3,28(sp)
   873f0:	dfc00e17 	ldw	ra,56(sp)
   873f4:	dd000d17 	ldw	r20,52(sp)
   873f8:	dcc00c17 	ldw	r19,48(sp)
   873fc:	dc800b17 	ldw	r18,44(sp)
   87400:	dc400a17 	ldw	r17,40(sp)
   87404:	dc000917 	ldw	r16,36(sp)
   87408:	dec00f04 	addi	sp,sp,60
   8740c:	f800283a 	ret
   87410:	0009883a 	mov	r4,zero
   87414:	000b883a 	mov	r5,zero
   87418:	000d883a 	mov	r6,zero
   8741c:	000f883a 	mov	r7,zero
   87420:	00881000 	call	88100 <__divdf3>
   87424:	d8800615 	stw	r2,24(sp)
   87428:	d8c00715 	stw	r3,28(sp)
   8742c:	00800084 	movi	r2,2
   87430:	90bfe81e 	bne	r18,r2,873d4 <__alt_data_end+0xfffcf164>
   87434:	0089c300 	call	89c30 <__errno>
   87438:	00c00844 	movi	r3,33
   8743c:	10c00015 	stw	r3,0(r2)
   87440:	003fe706 	br	873e0 <__alt_data_end+0xfffcf170>
   87444:	0089c300 	call	89c30 <__errno>
   87448:	d8c00817 	ldw	r3,32(sp)
   8744c:	10c00015 	stw	r3,0(r2)
   87450:	003fe506 	br	873e8 <__alt_data_end+0xfffcf178>

00087454 <__ieee754_sqrt>:
   87454:	defffd04 	addi	sp,sp,-12
   87458:	dc400115 	stw	r17,4(sp)
   8745c:	dc000015 	stw	r16,0(sp)
   87460:	dfc00215 	stw	ra,8(sp)
   87464:	28dffc2c 	andhi	r3,r5,32752
   87468:	009ffc34 	movhi	r2,32752
   8746c:	2821883a 	mov	r16,r5
   87470:	2023883a 	mov	r17,r4
   87474:	18808226 	beq	r3,r2,87680 <__ieee754_sqrt+0x22c>
   87478:	200f883a 	mov	r7,r4
   8747c:	01405f0e 	bge	zero,r5,875fc <__ieee754_sqrt+0x1a8>
   87480:	2805d53a 	srai	r2,r5,20
   87484:	10006826 	beq	r2,zero,87628 <__ieee754_sqrt+0x1d4>
   87488:	00c00434 	movhi	r3,16
   8748c:	18ffffc4 	addi	r3,r3,-1
   87490:	10bf0044 	addi	r2,r2,-1023
   87494:	80e0703a 	and	r16,r16,r3
   87498:	10c0004c 	andi	r3,r2,1
   8749c:	84000434 	orhi	r16,r16,16
   874a0:	18004f1e 	bne	r3,zero,875e0 <__ieee754_sqrt+0x18c>
   874a4:	3808d7fa 	srli	r4,r7,31
   874a8:	8421883a 	add	r16,r16,r16
   874ac:	101bd07a 	srai	r13,r2,1
   874b0:	8107883a 	add	r3,r16,r4
   874b4:	01800584 	movi	r6,22
   874b8:	39c9883a 	add	r4,r7,r7
   874bc:	0013883a 	mov	r9,zero
   874c0:	000b883a 	mov	r5,zero
   874c4:	00800834 	movhi	r2,32
   874c8:	288f883a 	add	r7,r5,r2
   874cc:	2010d7fa 	srli	r8,r4,31
   874d0:	31bfffc4 	addi	r6,r6,-1
   874d4:	19c00316 	blt	r3,r7,874e4 <__ieee754_sqrt+0x90>
   874d8:	19c7c83a 	sub	r3,r3,r7
   874dc:	388b883a 	add	r5,r7,r2
   874e0:	4893883a 	add	r9,r9,r2
   874e4:	18c7883a 	add	r3,r3,r3
   874e8:	1a07883a 	add	r3,r3,r8
   874ec:	2109883a 	add	r4,r4,r4
   874f0:	1004d07a 	srli	r2,r2,1
   874f4:	303ff41e 	bne	r6,zero,874c8 <__alt_data_end+0xfffcf258>
   874f8:	01a00034 	movhi	r6,32768
   874fc:	02000804 	movi	r8,32
   87500:	0005883a 	mov	r2,zero
   87504:	0015883a 	mov	r10,zero
   87508:	3019883a 	mov	r12,r6
   8750c:	00000806 	br	87530 <__ieee754_sqrt+0xdc>
   87510:	19403026 	beq	r3,r5,875d4 <__ieee754_sqrt+0x180>
   87514:	200ed7fa 	srli	r7,r4,31
   87518:	18c7883a 	add	r3,r3,r3
   8751c:	423fffc4 	addi	r8,r8,-1
   87520:	19c7883a 	add	r3,r3,r7
   87524:	2109883a 	add	r4,r4,r4
   87528:	300cd07a 	srli	r6,r6,1
   8752c:	40001326 	beq	r8,zero,8757c <__ieee754_sqrt+0x128>
   87530:	328f883a 	add	r7,r6,r10
   87534:	28fff60e 	bge	r5,r3,87510 <__alt_data_end+0xfffcf2a0>
   87538:	3ae0002c 	andhi	r11,r7,32768
   8753c:	3995883a 	add	r10,r7,r6
   87540:	5b002126 	beq	r11,r12,875c8 <__ieee754_sqrt+0x174>
   87544:	2817883a 	mov	r11,r5
   87548:	1947c83a 	sub	r3,r3,r5
   8754c:	21c0012e 	bgeu	r4,r7,87554 <__ieee754_sqrt+0x100>
   87550:	18ffffc4 	addi	r3,r3,-1
   87554:	21c9c83a 	sub	r4,r4,r7
   87558:	200ed7fa 	srli	r7,r4,31
   8755c:	18c7883a 	add	r3,r3,r3
   87560:	423fffc4 	addi	r8,r8,-1
   87564:	1185883a 	add	r2,r2,r6
   87568:	580b883a 	mov	r5,r11
   8756c:	19c7883a 	add	r3,r3,r7
   87570:	2109883a 	add	r4,r4,r4
   87574:	300cd07a 	srli	r6,r6,1
   87578:	403fed1e 	bne	r8,zero,87530 <__alt_data_end+0xfffcf2c0>
   8757c:	1906b03a 	or	r3,r3,r4
   87580:	18000426 	beq	r3,zero,87594 <__ieee754_sqrt+0x140>
   87584:	00ffffc4 	movi	r3,-1
   87588:	10c04d26 	beq	r2,r3,876c0 <__ieee754_sqrt+0x26c>
   8758c:	10c0004c 	andi	r3,r2,1
   87590:	1885883a 	add	r2,r3,r2
   87594:	1004d07a 	srli	r2,r2,1
   87598:	4809d07a 	srai	r4,r9,1
   8759c:	00cff834 	movhi	r3,16352
   875a0:	4a40004c 	andi	r9,r9,1
   875a4:	20c9883a 	add	r4,r4,r3
   875a8:	4800121e 	bne	r9,zero,875f4 <__ieee754_sqrt+0x1a0>
   875ac:	6806953a 	slli	r3,r13,20
   875b0:	1907883a 	add	r3,r3,r4
   875b4:	dfc00217 	ldw	ra,8(sp)
   875b8:	dc400117 	ldw	r17,4(sp)
   875bc:	dc000017 	ldw	r16,0(sp)
   875c0:	dec00304 	addi	sp,sp,12
   875c4:	f800283a 	ret
   875c8:	503fde16 	blt	r10,zero,87544 <__alt_data_end+0xfffcf2d4>
   875cc:	2ac00044 	addi	r11,r5,1
   875d0:	003fdd06 	br	87548 <__alt_data_end+0xfffcf2d8>
   875d4:	21ffd82e 	bgeu	r4,r7,87538 <__alt_data_end+0xfffcf2c8>
   875d8:	180b883a 	mov	r5,r3
   875dc:	003fcd06 	br	87514 <__alt_data_end+0xfffcf2a4>
   875e0:	3806d7fa 	srli	r3,r7,31
   875e4:	8421883a 	add	r16,r16,r16
   875e8:	39cf883a 	add	r7,r7,r7
   875ec:	80e1883a 	add	r16,r16,r3
   875f0:	003fac06 	br	874a4 <__alt_data_end+0xfffcf234>
   875f4:	10a00034 	orhi	r2,r2,32768
   875f8:	003fec06 	br	875ac <__alt_data_end+0xfffcf33c>
   875fc:	00a00034 	movhi	r2,32768
   87600:	10bfffc4 	addi	r2,r2,-1
   87604:	2884703a 	and	r2,r5,r2
   87608:	1104b03a 	or	r2,r2,r4
   8760c:	10002926 	beq	r2,zero,876b4 <__ieee754_sqrt+0x260>
   87610:	2800321e 	bne	r5,zero,876dc <__ieee754_sqrt+0x288>
   87614:	0005883a 	mov	r2,zero
   87618:	3820d2fa 	srli	r16,r7,11
   8761c:	10bffac4 	addi	r2,r2,-21
   87620:	380e957a 	slli	r7,r7,21
   87624:	803ffc26 	beq	r16,zero,87618 <__alt_data_end+0xfffcf3a8>
   87628:	80c0042c 	andhi	r3,r16,16
   8762c:	1800271e 	bne	r3,zero,876cc <__ieee754_sqrt+0x278>
   87630:	8421883a 	add	r16,r16,r16
   87634:	8100042c 	andhi	r4,r16,16
   87638:	18c00044 	addi	r3,r3,1
   8763c:	203ffc26 	beq	r4,zero,87630 <__alt_data_end+0xfffcf3c0>
   87640:	01400044 	movi	r5,1
   87644:	01000804 	movi	r4,32
   87648:	28cbc83a 	sub	r5,r5,r3
   8764c:	20c9c83a 	sub	r4,r4,r3
   87650:	3908d83a 	srl	r4,r7,r4
   87654:	1145883a 	add	r2,r2,r5
   87658:	38ce983a 	sll	r7,r7,r3
   8765c:	8120b03a 	or	r16,r16,r4
   87660:	00c00434 	movhi	r3,16
   87664:	18ffffc4 	addi	r3,r3,-1
   87668:	10bf0044 	addi	r2,r2,-1023
   8766c:	80e0703a 	and	r16,r16,r3
   87670:	10c0004c 	andi	r3,r2,1
   87674:	84000434 	orhi	r16,r16,16
   87678:	183f8a26 	beq	r3,zero,874a4 <__alt_data_end+0xfffcf234>
   8767c:	003fd806 	br	875e0 <__alt_data_end+0xfffcf370>
   87680:	200d883a 	mov	r6,r4
   87684:	280f883a 	mov	r7,r5
   87688:	0088ac00 	call	88ac0 <__muldf3>
   8768c:	1009883a 	mov	r4,r2
   87690:	180b883a 	mov	r5,r3
   87694:	880d883a 	mov	r6,r17
   87698:	800f883a 	mov	r7,r16
   8769c:	00878840 	call	87884 <__adddf3>
   876a0:	dfc00217 	ldw	ra,8(sp)
   876a4:	dc400117 	ldw	r17,4(sp)
   876a8:	dc000017 	ldw	r16,0(sp)
   876ac:	dec00304 	addi	sp,sp,12
   876b0:	f800283a 	ret
   876b4:	2005883a 	mov	r2,r4
   876b8:	2807883a 	mov	r3,r5
   876bc:	003fbd06 	br	875b4 <__alt_data_end+0xfffcf344>
   876c0:	4a400044 	addi	r9,r9,1
   876c4:	0005883a 	mov	r2,zero
   876c8:	003fb306 	br	87598 <__alt_data_end+0xfffcf328>
   876cc:	01000804 	movi	r4,32
   876d0:	01400044 	movi	r5,1
   876d4:	0007883a 	mov	r3,zero
   876d8:	003fdd06 	br	87650 <__alt_data_end+0xfffcf3e0>
   876dc:	200d883a 	mov	r6,r4
   876e0:	280f883a 	mov	r7,r5
   876e4:	00891ac0 	call	891ac <__subdf3>
   876e8:	1009883a 	mov	r4,r2
   876ec:	180b883a 	mov	r5,r3
   876f0:	100d883a 	mov	r6,r2
   876f4:	180f883a 	mov	r7,r3
   876f8:	00881000 	call	88100 <__divdf3>
   876fc:	003fad06 	br	875b4 <__alt_data_end+0xfffcf344>

00087700 <__fpclassifyd>:
   87700:	00a00034 	movhi	r2,32768
   87704:	10bfffc4 	addi	r2,r2,-1
   87708:	288a703a 	and	r5,r5,r2
   8770c:	28000726 	beq	r5,zero,8772c <__fpclassifyd+0x2c>
   87710:	00bffc34 	movhi	r2,65520
   87714:	2885883a 	add	r2,r5,r2
   87718:	00dff834 	movhi	r3,32736
   8771c:	18ffffc4 	addi	r3,r3,-1
   87720:	18800636 	bltu	r3,r2,8773c <__fpclassifyd+0x3c>
   87724:	00800104 	movi	r2,4
   87728:	f800283a 	ret
   8772c:	2005003a 	cmpeq	r2,r4,zero
   87730:	00c000c4 	movi	r3,3
   87734:	1885c83a 	sub	r2,r3,r2
   87738:	f800283a 	ret
   8773c:	00800434 	movhi	r2,16
   87740:	10bfffc4 	addi	r2,r2,-1
   87744:	11400236 	bltu	r2,r5,87750 <__fpclassifyd+0x50>
   87748:	008000c4 	movi	r2,3
   8774c:	f800283a 	ret
   87750:	009ffc34 	movhi	r2,32752
   87754:	28800226 	beq	r5,r2,87760 <__fpclassifyd+0x60>
   87758:	0005883a 	mov	r2,zero
   8775c:	f800283a 	ret
   87760:	2005003a 	cmpeq	r2,r4,zero
   87764:	f800283a 	ret

00087768 <matherr>:
   87768:	0005883a 	mov	r2,zero
   8776c:	f800283a 	ret

00087770 <udivmodsi4>:
   87770:	2900182e 	bgeu	r5,r4,877d4 <udivmodsi4+0x64>
   87774:	28001716 	blt	r5,zero,877d4 <udivmodsi4+0x64>
   87778:	00800804 	movi	r2,32
   8777c:	00c00044 	movi	r3,1
   87780:	00000206 	br	8778c <udivmodsi4+0x1c>
   87784:	10001126 	beq	r2,zero,877cc <udivmodsi4+0x5c>
   87788:	28000516 	blt	r5,zero,877a0 <udivmodsi4+0x30>
   8778c:	294b883a 	add	r5,r5,r5
   87790:	10bfffc4 	addi	r2,r2,-1
   87794:	18c7883a 	add	r3,r3,r3
   87798:	293ffa36 	bltu	r5,r4,87784 <__alt_data_end+0xfffcf514>
   8779c:	18000b26 	beq	r3,zero,877cc <udivmodsi4+0x5c>
   877a0:	0005883a 	mov	r2,zero
   877a4:	21400236 	bltu	r4,r5,877b0 <udivmodsi4+0x40>
   877a8:	2149c83a 	sub	r4,r4,r5
   877ac:	10c4b03a 	or	r2,r2,r3
   877b0:	1806d07a 	srli	r3,r3,1
   877b4:	280ad07a 	srli	r5,r5,1
   877b8:	183ffa1e 	bne	r3,zero,877a4 <__alt_data_end+0xfffcf534>
   877bc:	3000011e 	bne	r6,zero,877c4 <udivmodsi4+0x54>
   877c0:	f800283a 	ret
   877c4:	2005883a 	mov	r2,r4
   877c8:	f800283a 	ret
   877cc:	0005883a 	mov	r2,zero
   877d0:	003ffa06 	br	877bc <__alt_data_end+0xfffcf54c>
   877d4:	00c00044 	movi	r3,1
   877d8:	0005883a 	mov	r2,zero
   877dc:	003ff106 	br	877a4 <__alt_data_end+0xfffcf534>

000877e0 <__divsi3>:
   877e0:	deffff04 	addi	sp,sp,-4
   877e4:	dfc00015 	stw	ra,0(sp)
   877e8:	20000916 	blt	r4,zero,87810 <__divsi3+0x30>
   877ec:	000f883a 	mov	r7,zero
   877f0:	28000a16 	blt	r5,zero,8781c <__divsi3+0x3c>
   877f4:	000d883a 	mov	r6,zero
   877f8:	00877700 	call	87770 <udivmodsi4>
   877fc:	38000126 	beq	r7,zero,87804 <__divsi3+0x24>
   87800:	0085c83a 	sub	r2,zero,r2
   87804:	dfc00017 	ldw	ra,0(sp)
   87808:	dec00104 	addi	sp,sp,4
   8780c:	f800283a 	ret
   87810:	0109c83a 	sub	r4,zero,r4
   87814:	01c00044 	movi	r7,1
   87818:	283ff60e 	bge	r5,zero,877f4 <__alt_data_end+0xfffcf584>
   8781c:	014bc83a 	sub	r5,zero,r5
   87820:	39c0005c 	xori	r7,r7,1
   87824:	003ff306 	br	877f4 <__alt_data_end+0xfffcf584>

00087828 <__modsi3>:
   87828:	20000316 	blt	r4,zero,87838 <__modsi3+0x10>
   8782c:	28000c16 	blt	r5,zero,87860 <__modsi3+0x38>
   87830:	01800044 	movi	r6,1
   87834:	00877701 	jmpi	87770 <udivmodsi4>
   87838:	deffff04 	addi	sp,sp,-4
   8783c:	dfc00015 	stw	ra,0(sp)
   87840:	0109c83a 	sub	r4,zero,r4
   87844:	28000916 	blt	r5,zero,8786c <__modsi3+0x44>
   87848:	01800044 	movi	r6,1
   8784c:	00877700 	call	87770 <udivmodsi4>
   87850:	0085c83a 	sub	r2,zero,r2
   87854:	dfc00017 	ldw	ra,0(sp)
   87858:	dec00104 	addi	sp,sp,4
   8785c:	f800283a 	ret
   87860:	014bc83a 	sub	r5,zero,r5
   87864:	01800044 	movi	r6,1
   87868:	00877701 	jmpi	87770 <udivmodsi4>
   8786c:	014bc83a 	sub	r5,zero,r5
   87870:	003ff506 	br	87848 <__alt_data_end+0xfffcf5d8>

00087874 <__udivsi3>:
   87874:	000d883a 	mov	r6,zero
   87878:	00877701 	jmpi	87770 <udivmodsi4>

0008787c <__umodsi3>:
   8787c:	01800044 	movi	r6,1
   87880:	00877701 	jmpi	87770 <udivmodsi4>

00087884 <__adddf3>:
   87884:	00800434 	movhi	r2,16
   87888:	10bfffc4 	addi	r2,r2,-1
   8788c:	defffb04 	addi	sp,sp,-20
   87890:	2890703a 	and	r8,r5,r2
   87894:	2806d7fa 	srli	r3,r5,31
   87898:	3884703a 	and	r2,r7,r2
   8789c:	2014d77a 	srli	r10,r4,29
   878a0:	3812d53a 	srli	r9,r7,20
   878a4:	dc400115 	stw	r17,4(sp)
   878a8:	100490fa 	slli	r2,r2,3
   878ac:	2822d53a 	srli	r17,r5,20
   878b0:	380ed7fa 	srli	r7,r7,31
   878b4:	400a90fa 	slli	r5,r8,3
   878b8:	3010d77a 	srli	r8,r6,29
   878bc:	dc800215 	stw	r18,8(sp)
   878c0:	dc000015 	stw	r16,0(sp)
   878c4:	dfc00415 	stw	ra,16(sp)
   878c8:	dcc00315 	stw	r19,12(sp)
   878cc:	1c803fcc 	andi	r18,r3,255
   878d0:	202090fa 	slli	r16,r4,3
   878d4:	8c41ffcc 	andi	r17,r17,2047
   878d8:	2a8ab03a 	or	r5,r5,r10
   878dc:	4901ffcc 	andi	r4,r9,2047
   878e0:	1204b03a 	or	r2,r2,r8
   878e4:	300c90fa 	slli	r6,r6,3
   878e8:	91c07126 	beq	r18,r7,87ab0 <__adddf3+0x22c>
   878ec:	8907c83a 	sub	r3,r17,r4
   878f0:	00c0a00e 	bge	zero,r3,87b74 <__adddf3+0x2f0>
   878f4:	2000291e 	bne	r4,zero,8799c <__adddf3+0x118>
   878f8:	1188b03a 	or	r4,r2,r6
   878fc:	20008b1e 	bne	r4,zero,87b2c <__adddf3+0x2a8>
   87900:	808001cc 	andi	r2,r16,7
   87904:	10005a26 	beq	r2,zero,87a70 <__adddf3+0x1ec>
   87908:	80c003cc 	andi	r3,r16,15
   8790c:	00800104 	movi	r2,4
   87910:	18805726 	beq	r3,r2,87a70 <__adddf3+0x1ec>
   87914:	81000104 	addi	r4,r16,4
   87918:	2421803a 	cmpltu	r16,r4,r16
   8791c:	2c0b883a 	add	r5,r5,r16
   87920:	2880202c 	andhi	r2,r5,128
   87924:	9007883a 	mov	r3,r18
   87928:	2021883a 	mov	r16,r4
   8792c:	10005326 	beq	r2,zero,87a7c <__adddf3+0x1f8>
   87930:	8c400044 	addi	r17,r17,1
   87934:	0081ffc4 	movi	r2,2047
   87938:	8880ae26 	beq	r17,r2,87bf4 <__adddf3+0x370>
   8793c:	00bfe034 	movhi	r2,65408
   87940:	10bfffc4 	addi	r2,r2,-1
   87944:	288a703a 	and	r5,r5,r2
   87948:	2804977a 	slli	r2,r5,29
   8794c:	280a927a 	slli	r5,r5,9
   87950:	8020d0fa 	srli	r16,r16,3
   87954:	280ad33a 	srli	r5,r5,12
   87958:	1404b03a 	or	r2,r2,r16
   8795c:	8c41ffcc 	andi	r17,r17,2047
   87960:	8822953a 	slli	r17,r17,20
   87964:	18c03fcc 	andi	r3,r3,255
   87968:	180897fa 	slli	r4,r3,31
   8796c:	00c00434 	movhi	r3,16
   87970:	18ffffc4 	addi	r3,r3,-1
   87974:	28c6703a 	and	r3,r5,r3
   87978:	1c46b03a 	or	r3,r3,r17
   8797c:	1906b03a 	or	r3,r3,r4
   87980:	dfc00417 	ldw	ra,16(sp)
   87984:	dcc00317 	ldw	r19,12(sp)
   87988:	dc800217 	ldw	r18,8(sp)
   8798c:	dc400117 	ldw	r17,4(sp)
   87990:	dc000017 	ldw	r16,0(sp)
   87994:	dec00504 	addi	sp,sp,20
   87998:	f800283a 	ret
   8799c:	0101ffc4 	movi	r4,2047
   879a0:	893fd726 	beq	r17,r4,87900 <__alt_data_end+0xfffcf690>
   879a4:	10802034 	orhi	r2,r2,128
   879a8:	01000e04 	movi	r4,56
   879ac:	20c09416 	blt	r4,r3,87c00 <__adddf3+0x37c>
   879b0:	010007c4 	movi	r4,31
   879b4:	20c0b716 	blt	r4,r3,87c94 <__adddf3+0x410>
   879b8:	01000804 	movi	r4,32
   879bc:	20c9c83a 	sub	r4,r4,r3
   879c0:	30ced83a 	srl	r7,r6,r3
   879c4:	1110983a 	sll	r8,r2,r4
   879c8:	3108983a 	sll	r4,r6,r4
   879cc:	10c6d83a 	srl	r3,r2,r3
   879d0:	41c4b03a 	or	r2,r8,r7
   879d4:	2008c03a 	cmpne	r4,r4,zero
   879d8:	110cb03a 	or	r6,r2,r4
   879dc:	818dc83a 	sub	r6,r16,r6
   879e0:	81a1803a 	cmpltu	r16,r16,r6
   879e4:	28cbc83a 	sub	r5,r5,r3
   879e8:	2c0bc83a 	sub	r5,r5,r16
   879ec:	3021883a 	mov	r16,r6
   879f0:	2880202c 	andhi	r2,r5,128
   879f4:	103fc226 	beq	r2,zero,87900 <__alt_data_end+0xfffcf690>
   879f8:	04c02034 	movhi	r19,128
   879fc:	9cffffc4 	addi	r19,r19,-1
   87a00:	2ce6703a 	and	r19,r5,r19
   87a04:	98006c26 	beq	r19,zero,87bb8 <__adddf3+0x334>
   87a08:	9809883a 	mov	r4,r19
   87a0c:	0089b840 	call	89b84 <__clzsi2>
   87a10:	10fffe04 	addi	r3,r2,-8
   87a14:	010007c4 	movi	r4,31
   87a18:	20c06d16 	blt	r4,r3,87bd0 <__adddf3+0x34c>
   87a1c:	01000a04 	movi	r4,40
   87a20:	2085c83a 	sub	r2,r4,r2
   87a24:	8084d83a 	srl	r2,r16,r2
   87a28:	98e6983a 	sll	r19,r19,r3
   87a2c:	80e0983a 	sll	r16,r16,r3
   87a30:	14c4b03a 	or	r2,r2,r19
   87a34:	1c406a16 	blt	r3,r17,87be0 <__adddf3+0x35c>
   87a38:	1c63c83a 	sub	r17,r3,r17
   87a3c:	89400044 	addi	r5,r17,1
   87a40:	00c007c4 	movi	r3,31
   87a44:	19408616 	blt	r3,r5,87c60 <__adddf3+0x3dc>
   87a48:	1c47c83a 	sub	r3,r3,r17
   87a4c:	8148d83a 	srl	r4,r16,r5
   87a50:	80e0983a 	sll	r16,r16,r3
   87a54:	10c6983a 	sll	r3,r2,r3
   87a58:	114ad83a 	srl	r5,r2,r5
   87a5c:	8004c03a 	cmpne	r2,r16,zero
   87a60:	20e0b03a 	or	r16,r4,r3
   87a64:	80a0b03a 	or	r16,r16,r2
   87a68:	0023883a 	mov	r17,zero
   87a6c:	003fa406 	br	87900 <__alt_data_end+0xfffcf690>
   87a70:	2880202c 	andhi	r2,r5,128
   87a74:	9007883a 	mov	r3,r18
   87a78:	103fad1e 	bne	r2,zero,87930 <__alt_data_end+0xfffcf6c0>
   87a7c:	2804977a 	slli	r2,r5,29
   87a80:	8020d0fa 	srli	r16,r16,3
   87a84:	0101ffc4 	movi	r4,2047
   87a88:	280ad0fa 	srli	r5,r5,3
   87a8c:	1404b03a 	or	r2,r2,r16
   87a90:	8900031e 	bne	r17,r4,87aa0 <__adddf3+0x21c>
   87a94:	1148b03a 	or	r4,r2,r5
   87a98:	20005626 	beq	r4,zero,87bf4 <__adddf3+0x370>
   87a9c:	29400234 	orhi	r5,r5,8
   87aa0:	01000434 	movhi	r4,16
   87aa4:	213fffc4 	addi	r4,r4,-1
   87aa8:	290a703a 	and	r5,r5,r4
   87aac:	003fab06 	br	8795c <__alt_data_end+0xfffcf6ec>
   87ab0:	890fc83a 	sub	r7,r17,r4
   87ab4:	01c0560e 	bge	zero,r7,87c10 <__adddf3+0x38c>
   87ab8:	20002426 	beq	r4,zero,87b4c <__adddf3+0x2c8>
   87abc:	0101ffc4 	movi	r4,2047
   87ac0:	893f8f26 	beq	r17,r4,87900 <__alt_data_end+0xfffcf690>
   87ac4:	10802034 	orhi	r2,r2,128
   87ac8:	01000e04 	movi	r4,56
   87acc:	21c09d0e 	bge	r4,r7,87d44 <__adddf3+0x4c0>
   87ad0:	118cb03a 	or	r6,r2,r6
   87ad4:	300cc03a 	cmpne	r6,r6,zero
   87ad8:	000f883a 	mov	r7,zero
   87adc:	340d883a 	add	r6,r6,r16
   87ae0:	3421803a 	cmpltu	r16,r6,r16
   87ae4:	394b883a 	add	r5,r7,r5
   87ae8:	2c0b883a 	add	r5,r5,r16
   87aec:	3021883a 	mov	r16,r6
   87af0:	2880202c 	andhi	r2,r5,128
   87af4:	103f8226 	beq	r2,zero,87900 <__alt_data_end+0xfffcf690>
   87af8:	8c400044 	addi	r17,r17,1
   87afc:	0081ffc4 	movi	r2,2047
   87b00:	8880cb26 	beq	r17,r2,87e30 <__adddf3+0x5ac>
   87b04:	00bfe034 	movhi	r2,65408
   87b08:	10bfffc4 	addi	r2,r2,-1
   87b0c:	288a703a 	and	r5,r5,r2
   87b10:	8006d07a 	srli	r3,r16,1
   87b14:	280497fa 	slli	r2,r5,31
   87b18:	8400004c 	andi	r16,r16,1
   87b1c:	80e0b03a 	or	r16,r16,r3
   87b20:	80a0b03a 	or	r16,r16,r2
   87b24:	280ad07a 	srli	r5,r5,1
   87b28:	003f7506 	br	87900 <__alt_data_end+0xfffcf690>
   87b2c:	18ffffc4 	addi	r3,r3,-1
   87b30:	1800481e 	bne	r3,zero,87c54 <__adddf3+0x3d0>
   87b34:	818dc83a 	sub	r6,r16,r6
   87b38:	81a1803a 	cmpltu	r16,r16,r6
   87b3c:	288bc83a 	sub	r5,r5,r2
   87b40:	2c0bc83a 	sub	r5,r5,r16
   87b44:	3021883a 	mov	r16,r6
   87b48:	003fa906 	br	879f0 <__alt_data_end+0xfffcf780>
   87b4c:	1188b03a 	or	r4,r2,r6
   87b50:	203f6b26 	beq	r4,zero,87900 <__alt_data_end+0xfffcf690>
   87b54:	39ffffc4 	addi	r7,r7,-1
   87b58:	3800931e 	bne	r7,zero,87da8 <__adddf3+0x524>
   87b5c:	340d883a 	add	r6,r6,r16
   87b60:	3421803a 	cmpltu	r16,r6,r16
   87b64:	114b883a 	add	r5,r2,r5
   87b68:	2c0b883a 	add	r5,r5,r16
   87b6c:	3021883a 	mov	r16,r6
   87b70:	003fdf06 	br	87af0 <__alt_data_end+0xfffcf880>
   87b74:	1800531e 	bne	r3,zero,87cc4 <__adddf3+0x440>
   87b78:	88c00044 	addi	r3,r17,1
   87b7c:	18c1ffcc 	andi	r3,r3,2047
   87b80:	01000044 	movi	r4,1
   87b84:	20c0a00e 	bge	r4,r3,87e08 <__adddf3+0x584>
   87b88:	8187c83a 	sub	r3,r16,r6
   87b8c:	80c9803a 	cmpltu	r4,r16,r3
   87b90:	28a7c83a 	sub	r19,r5,r2
   87b94:	9927c83a 	sub	r19,r19,r4
   87b98:	9900202c 	andhi	r4,r19,128
   87b9c:	20006226 	beq	r4,zero,87d28 <__adddf3+0x4a4>
   87ba0:	3421c83a 	sub	r16,r6,r16
   87ba4:	1145c83a 	sub	r2,r2,r5
   87ba8:	340d803a 	cmpltu	r6,r6,r16
   87bac:	11a7c83a 	sub	r19,r2,r6
   87bb0:	3825883a 	mov	r18,r7
   87bb4:	983f941e 	bne	r19,zero,87a08 <__alt_data_end+0xfffcf798>
   87bb8:	8009883a 	mov	r4,r16
   87bbc:	0089b840 	call	89b84 <__clzsi2>
   87bc0:	10800804 	addi	r2,r2,32
   87bc4:	10fffe04 	addi	r3,r2,-8
   87bc8:	010007c4 	movi	r4,31
   87bcc:	20ff930e 	bge	r4,r3,87a1c <__alt_data_end+0xfffcf7ac>
   87bd0:	10bff604 	addi	r2,r2,-40
   87bd4:	8084983a 	sll	r2,r16,r2
   87bd8:	0021883a 	mov	r16,zero
   87bdc:	1c7f960e 	bge	r3,r17,87a38 <__alt_data_end+0xfffcf7c8>
   87be0:	017fe034 	movhi	r5,65408
   87be4:	297fffc4 	addi	r5,r5,-1
   87be8:	88e3c83a 	sub	r17,r17,r3
   87bec:	114a703a 	and	r5,r2,r5
   87bf0:	003f4306 	br	87900 <__alt_data_end+0xfffcf690>
   87bf4:	000b883a 	mov	r5,zero
   87bf8:	0005883a 	mov	r2,zero
   87bfc:	003f5706 	br	8795c <__alt_data_end+0xfffcf6ec>
   87c00:	118cb03a 	or	r6,r2,r6
   87c04:	300cc03a 	cmpne	r6,r6,zero
   87c08:	0007883a 	mov	r3,zero
   87c0c:	003f7306 	br	879dc <__alt_data_end+0xfffcf76c>
   87c10:	3800961e 	bne	r7,zero,87e6c <__adddf3+0x5e8>
   87c14:	89000044 	addi	r4,r17,1
   87c18:	2201ffcc 	andi	r8,r4,2047
   87c1c:	01c00044 	movi	r7,1
   87c20:	3a00680e 	bge	r7,r8,87dc4 <__adddf3+0x540>
   87c24:	01c1ffc4 	movi	r7,2047
   87c28:	21c0a726 	beq	r4,r7,87ec8 <__adddf3+0x644>
   87c2c:	340d883a 	add	r6,r6,r16
   87c30:	3421803a 	cmpltu	r16,r6,r16
   87c34:	114b883a 	add	r5,r2,r5
   87c38:	2c0b883a 	add	r5,r5,r16
   87c3c:	282097fa 	slli	r16,r5,31
   87c40:	300cd07a 	srli	r6,r6,1
   87c44:	280ad07a 	srli	r5,r5,1
   87c48:	2023883a 	mov	r17,r4
   87c4c:	81a0b03a 	or	r16,r16,r6
   87c50:	003f2b06 	br	87900 <__alt_data_end+0xfffcf690>
   87c54:	0101ffc4 	movi	r4,2047
   87c58:	893f531e 	bne	r17,r4,879a8 <__alt_data_end+0xfffcf738>
   87c5c:	003f2806 	br	87900 <__alt_data_end+0xfffcf690>
   87c60:	893ff844 	addi	r4,r17,-31
   87c64:	00c00804 	movi	r3,32
   87c68:	1108d83a 	srl	r4,r2,r4
   87c6c:	28c05126 	beq	r5,r3,87db4 <__adddf3+0x530>
   87c70:	00c00fc4 	movi	r3,63
   87c74:	1c63c83a 	sub	r17,r3,r17
   87c78:	1444983a 	sll	r2,r2,r17
   87c7c:	1420b03a 	or	r16,r2,r16
   87c80:	8020c03a 	cmpne	r16,r16,zero
   87c84:	8120b03a 	or	r16,r16,r4
   87c88:	000b883a 	mov	r5,zero
   87c8c:	0023883a 	mov	r17,zero
   87c90:	003f1b06 	br	87900 <__alt_data_end+0xfffcf690>
   87c94:	193ff804 	addi	r4,r3,-32
   87c98:	01c00804 	movi	r7,32
   87c9c:	1108d83a 	srl	r4,r2,r4
   87ca0:	19c04626 	beq	r3,r7,87dbc <__adddf3+0x538>
   87ca4:	01c01004 	movi	r7,64
   87ca8:	38c7c83a 	sub	r3,r7,r3
   87cac:	10c4983a 	sll	r2,r2,r3
   87cb0:	118cb03a 	or	r6,r2,r6
   87cb4:	300cc03a 	cmpne	r6,r6,zero
   87cb8:	310cb03a 	or	r6,r6,r4
   87cbc:	0007883a 	mov	r3,zero
   87cc0:	003f4606 	br	879dc <__alt_data_end+0xfffcf76c>
   87cc4:	88002b26 	beq	r17,zero,87d74 <__adddf3+0x4f0>
   87cc8:	0201ffc4 	movi	r8,2047
   87ccc:	22002f26 	beq	r4,r8,87d8c <__adddf3+0x508>
   87cd0:	00c7c83a 	sub	r3,zero,r3
   87cd4:	29402034 	orhi	r5,r5,128
   87cd8:	02000e04 	movi	r8,56
   87cdc:	40c07616 	blt	r8,r3,87eb8 <__adddf3+0x634>
   87ce0:	020007c4 	movi	r8,31
   87ce4:	40c0d216 	blt	r8,r3,88030 <__adddf3+0x7ac>
   87ce8:	02000804 	movi	r8,32
   87cec:	40d1c83a 	sub	r8,r8,r3
   87cf0:	2a14983a 	sll	r10,r5,r8
   87cf4:	80d2d83a 	srl	r9,r16,r3
   87cf8:	8210983a 	sll	r8,r16,r8
   87cfc:	28cad83a 	srl	r5,r5,r3
   87d00:	5252b03a 	or	r9,r10,r9
   87d04:	4006c03a 	cmpne	r3,r8,zero
   87d08:	48e0b03a 	or	r16,r9,r3
   87d0c:	3421c83a 	sub	r16,r6,r16
   87d10:	114bc83a 	sub	r5,r2,r5
   87d14:	340d803a 	cmpltu	r6,r6,r16
   87d18:	298bc83a 	sub	r5,r5,r6
   87d1c:	2023883a 	mov	r17,r4
   87d20:	3825883a 	mov	r18,r7
   87d24:	003f3206 	br	879f0 <__alt_data_end+0xfffcf780>
   87d28:	98c4b03a 	or	r2,r19,r3
   87d2c:	10001c1e 	bne	r2,zero,87da0 <__adddf3+0x51c>
   87d30:	0007883a 	mov	r3,zero
   87d34:	000b883a 	mov	r5,zero
   87d38:	0021883a 	mov	r16,zero
   87d3c:	0023883a 	mov	r17,zero
   87d40:	003f4e06 	br	87a7c <__alt_data_end+0xfffcf80c>
   87d44:	010007c4 	movi	r4,31
   87d48:	21c03c16 	blt	r4,r7,87e3c <__adddf3+0x5b8>
   87d4c:	01000804 	movi	r4,32
   87d50:	21c9c83a 	sub	r4,r4,r7
   87d54:	31d0d83a 	srl	r8,r6,r7
   87d58:	1112983a 	sll	r9,r2,r4
   87d5c:	3108983a 	sll	r4,r6,r4
   87d60:	11ced83a 	srl	r7,r2,r7
   87d64:	4a04b03a 	or	r2,r9,r8
   87d68:	2008c03a 	cmpne	r4,r4,zero
   87d6c:	110cb03a 	or	r6,r2,r4
   87d70:	003f5a06 	br	87adc <__alt_data_end+0xfffcf86c>
   87d74:	2c10b03a 	or	r8,r5,r16
   87d78:	40000426 	beq	r8,zero,87d8c <__adddf3+0x508>
   87d7c:	00c6303a 	nor	r3,zero,r3
   87d80:	183fe226 	beq	r3,zero,87d0c <__alt_data_end+0xfffcfa9c>
   87d84:	0201ffc4 	movi	r8,2047
   87d88:	223fd31e 	bne	r4,r8,87cd8 <__alt_data_end+0xfffcfa68>
   87d8c:	100b883a 	mov	r5,r2
   87d90:	3021883a 	mov	r16,r6
   87d94:	2023883a 	mov	r17,r4
   87d98:	3825883a 	mov	r18,r7
   87d9c:	003ed806 	br	87900 <__alt_data_end+0xfffcf690>
   87da0:	1821883a 	mov	r16,r3
   87da4:	003f1706 	br	87a04 <__alt_data_end+0xfffcf794>
   87da8:	0101ffc4 	movi	r4,2047
   87dac:	893f461e 	bne	r17,r4,87ac8 <__alt_data_end+0xfffcf858>
   87db0:	003ed306 	br	87900 <__alt_data_end+0xfffcf690>
   87db4:	0005883a 	mov	r2,zero
   87db8:	003fb006 	br	87c7c <__alt_data_end+0xfffcfa0c>
   87dbc:	0005883a 	mov	r2,zero
   87dc0:	003fbb06 	br	87cb0 <__alt_data_end+0xfffcfa40>
   87dc4:	2c06b03a 	or	r3,r5,r16
   87dc8:	8800841e 	bne	r17,zero,87fdc <__adddf3+0x758>
   87dcc:	1800b226 	beq	r3,zero,88098 <__adddf3+0x814>
   87dd0:	1186b03a 	or	r3,r2,r6
   87dd4:	183eca26 	beq	r3,zero,87900 <__alt_data_end+0xfffcf690>
   87dd8:	340d883a 	add	r6,r6,r16
   87ddc:	114b883a 	add	r5,r2,r5
   87de0:	3421803a 	cmpltu	r16,r6,r16
   87de4:	2c0b883a 	add	r5,r5,r16
   87de8:	2880202c 	andhi	r2,r5,128
   87dec:	1000c026 	beq	r2,zero,880f0 <__adddf3+0x86c>
   87df0:	00bfe034 	movhi	r2,65408
   87df4:	10bfffc4 	addi	r2,r2,-1
   87df8:	288a703a 	and	r5,r5,r2
   87dfc:	3021883a 	mov	r16,r6
   87e00:	3823883a 	mov	r17,r7
   87e04:	003ebe06 	br	87900 <__alt_data_end+0xfffcf690>
   87e08:	2c06b03a 	or	r3,r5,r16
   87e0c:	8800221e 	bne	r17,zero,87e98 <__adddf3+0x614>
   87e10:	1800481e 	bne	r3,zero,87f34 <__adddf3+0x6b0>
   87e14:	1186b03a 	or	r3,r2,r6
   87e18:	18000426 	beq	r3,zero,87e2c <__adddf3+0x5a8>
   87e1c:	100b883a 	mov	r5,r2
   87e20:	3021883a 	mov	r16,r6
   87e24:	3825883a 	mov	r18,r7
   87e28:	003eb506 	br	87900 <__alt_data_end+0xfffcf690>
   87e2c:	0007883a 	mov	r3,zero
   87e30:	000b883a 	mov	r5,zero
   87e34:	0021883a 	mov	r16,zero
   87e38:	003f1006 	br	87a7c <__alt_data_end+0xfffcf80c>
   87e3c:	393ff804 	addi	r4,r7,-32
   87e40:	02000804 	movi	r8,32
   87e44:	1108d83a 	srl	r4,r2,r4
   87e48:	3a007726 	beq	r7,r8,88028 <__adddf3+0x7a4>
   87e4c:	02001004 	movi	r8,64
   87e50:	41cfc83a 	sub	r7,r8,r7
   87e54:	11c4983a 	sll	r2,r2,r7
   87e58:	118cb03a 	or	r6,r2,r6
   87e5c:	300cc03a 	cmpne	r6,r6,zero
   87e60:	310cb03a 	or	r6,r6,r4
   87e64:	000f883a 	mov	r7,zero
   87e68:	003f1c06 	br	87adc <__alt_data_end+0xfffcf86c>
   87e6c:	88001a1e 	bne	r17,zero,87ed8 <__adddf3+0x654>
   87e70:	2c10b03a 	or	r8,r5,r16
   87e74:	40005526 	beq	r8,zero,87fcc <__adddf3+0x748>
   87e78:	01ce303a 	nor	r7,zero,r7
   87e7c:	3800511e 	bne	r7,zero,87fc4 <__adddf3+0x740>
   87e80:	81a1883a 	add	r16,r16,r6
   87e84:	114b883a 	add	r5,r2,r5
   87e88:	818d803a 	cmpltu	r6,r16,r6
   87e8c:	298b883a 	add	r5,r5,r6
   87e90:	2023883a 	mov	r17,r4
   87e94:	003f1606 	br	87af0 <__alt_data_end+0xfffcf880>
   87e98:	1800341e 	bne	r3,zero,87f6c <__adddf3+0x6e8>
   87e9c:	1186b03a 	or	r3,r2,r6
   87ea0:	18006f26 	beq	r3,zero,88060 <__adddf3+0x7dc>
   87ea4:	100b883a 	mov	r5,r2
   87ea8:	3021883a 	mov	r16,r6
   87eac:	3825883a 	mov	r18,r7
   87eb0:	0441ffc4 	movi	r17,2047
   87eb4:	003e9206 	br	87900 <__alt_data_end+0xfffcf690>
   87eb8:	2c20b03a 	or	r16,r5,r16
   87ebc:	8020c03a 	cmpne	r16,r16,zero
   87ec0:	000b883a 	mov	r5,zero
   87ec4:	003f9106 	br	87d0c <__alt_data_end+0xfffcfa9c>
   87ec8:	2023883a 	mov	r17,r4
   87ecc:	000b883a 	mov	r5,zero
   87ed0:	0021883a 	mov	r16,zero
   87ed4:	003ee906 	br	87a7c <__alt_data_end+0xfffcf80c>
   87ed8:	0201ffc4 	movi	r8,2047
   87edc:	22003b26 	beq	r4,r8,87fcc <__adddf3+0x748>
   87ee0:	01cfc83a 	sub	r7,zero,r7
   87ee4:	29402034 	orhi	r5,r5,128
   87ee8:	02000e04 	movi	r8,56
   87eec:	41c06216 	blt	r8,r7,88078 <__adddf3+0x7f4>
   87ef0:	020007c4 	movi	r8,31
   87ef4:	41c07016 	blt	r8,r7,880b8 <__adddf3+0x834>
   87ef8:	02000804 	movi	r8,32
   87efc:	41d1c83a 	sub	r8,r8,r7
   87f00:	2a14983a 	sll	r10,r5,r8
   87f04:	81d2d83a 	srl	r9,r16,r7
   87f08:	8210983a 	sll	r8,r16,r8
   87f0c:	29cad83a 	srl	r5,r5,r7
   87f10:	5252b03a 	or	r9,r10,r9
   87f14:	400ec03a 	cmpne	r7,r8,zero
   87f18:	49e0b03a 	or	r16,r9,r7
   87f1c:	81a1883a 	add	r16,r16,r6
   87f20:	2885883a 	add	r2,r5,r2
   87f24:	818d803a 	cmpltu	r6,r16,r6
   87f28:	118b883a 	add	r5,r2,r6
   87f2c:	2023883a 	mov	r17,r4
   87f30:	003eef06 	br	87af0 <__alt_data_end+0xfffcf880>
   87f34:	1186b03a 	or	r3,r2,r6
   87f38:	183e7126 	beq	r3,zero,87900 <__alt_data_end+0xfffcf690>
   87f3c:	8187c83a 	sub	r3,r16,r6
   87f40:	80d1803a 	cmpltu	r8,r16,r3
   87f44:	2889c83a 	sub	r4,r5,r2
   87f48:	2209c83a 	sub	r4,r4,r8
   87f4c:	2200202c 	andhi	r8,r4,128
   87f50:	40005426 	beq	r8,zero,880a4 <__adddf3+0x820>
   87f54:	3421c83a 	sub	r16,r6,r16
   87f58:	114bc83a 	sub	r5,r2,r5
   87f5c:	340d803a 	cmpltu	r6,r6,r16
   87f60:	298bc83a 	sub	r5,r5,r6
   87f64:	3825883a 	mov	r18,r7
   87f68:	003e6506 	br	87900 <__alt_data_end+0xfffcf690>
   87f6c:	1186b03a 	or	r3,r2,r6
   87f70:	18002b26 	beq	r3,zero,88020 <__adddf3+0x79c>
   87f74:	2806d0fa 	srli	r3,r5,3
   87f78:	8020d0fa 	srli	r16,r16,3
   87f7c:	280a977a 	slli	r5,r5,29
   87f80:	1900022c 	andhi	r4,r3,8
   87f84:	2c20b03a 	or	r16,r5,r16
   87f88:	20000826 	beq	r4,zero,87fac <__adddf3+0x728>
   87f8c:	1008d0fa 	srli	r4,r2,3
   87f90:	2140022c 	andhi	r5,r4,8
   87f94:	2800051e 	bne	r5,zero,87fac <__adddf3+0x728>
   87f98:	300cd0fa 	srli	r6,r6,3
   87f9c:	1004977a 	slli	r2,r2,29
   87fa0:	2007883a 	mov	r3,r4
   87fa4:	3825883a 	mov	r18,r7
   87fa8:	11a0b03a 	or	r16,r2,r6
   87fac:	800ad77a 	srli	r5,r16,29
   87fb0:	180690fa 	slli	r3,r3,3
   87fb4:	802090fa 	slli	r16,r16,3
   87fb8:	0441ffc4 	movi	r17,2047
   87fbc:	28cab03a 	or	r5,r5,r3
   87fc0:	003e4f06 	br	87900 <__alt_data_end+0xfffcf690>
   87fc4:	0201ffc4 	movi	r8,2047
   87fc8:	223fc71e 	bne	r4,r8,87ee8 <__alt_data_end+0xfffcfc78>
   87fcc:	100b883a 	mov	r5,r2
   87fd0:	3021883a 	mov	r16,r6
   87fd4:	2023883a 	mov	r17,r4
   87fd8:	003e4906 	br	87900 <__alt_data_end+0xfffcf690>
   87fdc:	18002a26 	beq	r3,zero,88088 <__adddf3+0x804>
   87fe0:	1186b03a 	or	r3,r2,r6
   87fe4:	18000e26 	beq	r3,zero,88020 <__adddf3+0x79c>
   87fe8:	2806d0fa 	srli	r3,r5,3
   87fec:	8020d0fa 	srli	r16,r16,3
   87ff0:	280a977a 	slli	r5,r5,29
   87ff4:	1900022c 	andhi	r4,r3,8
   87ff8:	2c20b03a 	or	r16,r5,r16
   87ffc:	203feb26 	beq	r4,zero,87fac <__alt_data_end+0xfffcfd3c>
   88000:	1008d0fa 	srli	r4,r2,3
   88004:	2140022c 	andhi	r5,r4,8
   88008:	283fe81e 	bne	r5,zero,87fac <__alt_data_end+0xfffcfd3c>
   8800c:	300cd0fa 	srli	r6,r6,3
   88010:	1004977a 	slli	r2,r2,29
   88014:	2007883a 	mov	r3,r4
   88018:	11a0b03a 	or	r16,r2,r6
   8801c:	003fe306 	br	87fac <__alt_data_end+0xfffcfd3c>
   88020:	0441ffc4 	movi	r17,2047
   88024:	003e3606 	br	87900 <__alt_data_end+0xfffcf690>
   88028:	0005883a 	mov	r2,zero
   8802c:	003f8a06 	br	87e58 <__alt_data_end+0xfffcfbe8>
   88030:	1a3ff804 	addi	r8,r3,-32
   88034:	02400804 	movi	r9,32
   88038:	2a10d83a 	srl	r8,r5,r8
   8803c:	1a402a26 	beq	r3,r9,880e8 <__adddf3+0x864>
   88040:	02401004 	movi	r9,64
   88044:	48c7c83a 	sub	r3,r9,r3
   88048:	28ca983a 	sll	r5,r5,r3
   8804c:	2c20b03a 	or	r16,r5,r16
   88050:	8020c03a 	cmpne	r16,r16,zero
   88054:	8220b03a 	or	r16,r16,r8
   88058:	000b883a 	mov	r5,zero
   8805c:	003f2b06 	br	87d0c <__alt_data_end+0xfffcfa9c>
   88060:	0007883a 	mov	r3,zero
   88064:	01402034 	movhi	r5,128
   88068:	297fffc4 	addi	r5,r5,-1
   8806c:	043ffe04 	movi	r16,-8
   88070:	0441ffc4 	movi	r17,2047
   88074:	003e8106 	br	87a7c <__alt_data_end+0xfffcf80c>
   88078:	2c20b03a 	or	r16,r5,r16
   8807c:	8020c03a 	cmpne	r16,r16,zero
   88080:	000b883a 	mov	r5,zero
   88084:	003fa506 	br	87f1c <__alt_data_end+0xfffcfcac>
   88088:	100b883a 	mov	r5,r2
   8808c:	3021883a 	mov	r16,r6
   88090:	0441ffc4 	movi	r17,2047
   88094:	003e1a06 	br	87900 <__alt_data_end+0xfffcf690>
   88098:	100b883a 	mov	r5,r2
   8809c:	3021883a 	mov	r16,r6
   880a0:	003e1706 	br	87900 <__alt_data_end+0xfffcf690>
   880a4:	20c4b03a 	or	r2,r4,r3
   880a8:	103f6026 	beq	r2,zero,87e2c <__alt_data_end+0xfffcfbbc>
   880ac:	200b883a 	mov	r5,r4
   880b0:	1821883a 	mov	r16,r3
   880b4:	003e1206 	br	87900 <__alt_data_end+0xfffcf690>
   880b8:	3a3ff804 	addi	r8,r7,-32
   880bc:	02400804 	movi	r9,32
   880c0:	2a10d83a 	srl	r8,r5,r8
   880c4:	3a400c26 	beq	r7,r9,880f8 <__adddf3+0x874>
   880c8:	02401004 	movi	r9,64
   880cc:	49cfc83a 	sub	r7,r9,r7
   880d0:	29ca983a 	sll	r5,r5,r7
   880d4:	2c20b03a 	or	r16,r5,r16
   880d8:	8020c03a 	cmpne	r16,r16,zero
   880dc:	8220b03a 	or	r16,r16,r8
   880e0:	000b883a 	mov	r5,zero
   880e4:	003f8d06 	br	87f1c <__alt_data_end+0xfffcfcac>
   880e8:	000b883a 	mov	r5,zero
   880ec:	003fd706 	br	8804c <__alt_data_end+0xfffcfddc>
   880f0:	3021883a 	mov	r16,r6
   880f4:	003e0206 	br	87900 <__alt_data_end+0xfffcf690>
   880f8:	000b883a 	mov	r5,zero
   880fc:	003ff506 	br	880d4 <__alt_data_end+0xfffcfe64>

00088100 <__divdf3>:
   88100:	defff204 	addi	sp,sp,-56
   88104:	dcc00715 	stw	r19,28(sp)
   88108:	2826d53a 	srli	r19,r5,20
   8810c:	dd400915 	stw	r21,36(sp)
   88110:	282ad7fa 	srli	r21,r5,31
   88114:	ddc00b15 	stw	r23,44(sp)
   88118:	dd800a15 	stw	r22,40(sp)
   8811c:	dc800615 	stw	r18,24(sp)
   88120:	dfc00d15 	stw	ra,52(sp)
   88124:	04800434 	movhi	r18,16
   88128:	94bfffc4 	addi	r18,r18,-1
   8812c:	df000c15 	stw	fp,48(sp)
   88130:	dd000815 	stw	r20,32(sp)
   88134:	dc400515 	stw	r17,20(sp)
   88138:	dc000415 	stw	r16,16(sp)
   8813c:	9cc1ffcc 	andi	r19,r19,2047
   88140:	202d883a 	mov	r22,r4
   88144:	2ca4703a 	and	r18,r5,r18
   88148:	adc03fcc 	andi	r23,r21,255
   8814c:	98006a26 	beq	r19,zero,882f8 <__divdf3+0x1f8>
   88150:	0081ffc4 	movi	r2,2047
   88154:	2021883a 	mov	r16,r4
   88158:	98803726 	beq	r19,r2,88238 <__divdf3+0x138>
   8815c:	90800434 	orhi	r2,r18,16
   88160:	100490fa 	slli	r2,r2,3
   88164:	2024d77a 	srli	r18,r4,29
   88168:	202090fa 	slli	r16,r4,3
   8816c:	9cff0044 	addi	r19,r19,-1023
   88170:	14a4b03a 	or	r18,r2,r18
   88174:	0029883a 	mov	r20,zero
   88178:	0039883a 	mov	fp,zero
   8817c:	3804d53a 	srli	r2,r7,20
   88180:	382cd7fa 	srli	r22,r7,31
   88184:	04400434 	movhi	r17,16
   88188:	8c7fffc4 	addi	r17,r17,-1
   8818c:	1081ffcc 	andi	r2,r2,2047
   88190:	3011883a 	mov	r8,r6
   88194:	3c62703a 	and	r17,r7,r17
   88198:	b2403fcc 	andi	r9,r22,255
   8819c:	10007326 	beq	r2,zero,8836c <__divdf3+0x26c>
   881a0:	0101ffc4 	movi	r4,2047
   881a4:	11006b26 	beq	r2,r4,88354 <__divdf3+0x254>
   881a8:	89000434 	orhi	r4,r17,16
   881ac:	200890fa 	slli	r4,r4,3
   881b0:	3022d77a 	srli	r17,r6,29
   881b4:	301090fa 	slli	r8,r6,3
   881b8:	10bf0044 	addi	r2,r2,-1023
   881bc:	2462b03a 	or	r17,r4,r17
   881c0:	000d883a 	mov	r6,zero
   881c4:	ad8af03a 	xor	r5,r21,r22
   881c8:	3508b03a 	or	r4,r6,r20
   881cc:	00c003c4 	movi	r3,15
   881d0:	280f883a 	mov	r7,r5
   881d4:	2d003fcc 	andi	r20,r5,255
   881d8:	19009236 	bltu	r3,r4,88424 <__divdf3+0x324>
   881dc:	2109883a 	add	r4,r4,r4
   881e0:	00c00274 	movhi	r3,9
   881e4:	18e07e04 	addi	r3,r3,-32264
   881e8:	2109883a 	add	r4,r4,r4
   881ec:	20c9883a 	add	r4,r4,r3
   881f0:	20c00017 	ldw	r3,0(r4)
   881f4:	1800683a 	jmp	r3
   881f8:	00088424 	muli	zero,zero,8720
   881fc:	00088294 	movui	zero,8714
   88200:	00088414 	movui	zero,8720
   88204:	00088264 	muli	zero,zero,8713
   88208:	00088414 	movui	zero,8720
   8820c:	000883fc 	xorhi	zero,zero,8719
   88210:	00088414 	movui	zero,8720
   88214:	00088264 	muli	zero,zero,8713
   88218:	00088294 	movui	zero,8714
   8821c:	00088294 	movui	zero,8714
   88220:	000883fc 	xorhi	zero,zero,8719
   88224:	00088264 	muli	zero,zero,8713
   88228:	00088254 	movui	zero,8713
   8822c:	00088254 	movui	zero,8713
   88230:	00088254 	movui	zero,8713
   88234:	00088710 	cmplti	zero,zero,8732
   88238:	9104b03a 	or	r2,r18,r4
   8823c:	10006c1e 	bne	r2,zero,883f0 <__divdf3+0x2f0>
   88240:	05000204 	movi	r20,8
   88244:	0025883a 	mov	r18,zero
   88248:	0021883a 	mov	r16,zero
   8824c:	07000084 	movi	fp,2
   88250:	003fca06 	br	8817c <__alt_data_end+0xfffcff0c>
   88254:	9023883a 	mov	r17,r18
   88258:	8011883a 	mov	r8,r16
   8825c:	b813883a 	mov	r9,r23
   88260:	e00d883a 	mov	r6,fp
   88264:	00800084 	movi	r2,2
   88268:	30800926 	beq	r6,r2,88290 <__divdf3+0x190>
   8826c:	008000c4 	movi	r2,3
   88270:	3081d026 	beq	r6,r2,889b4 <__divdf3+0x8b4>
   88274:	00800044 	movi	r2,1
   88278:	3081881e 	bne	r6,r2,8889c <__divdf3+0x79c>
   8827c:	480f883a 	mov	r7,r9
   88280:	0005883a 	mov	r2,zero
   88284:	0025883a 	mov	r18,zero
   88288:	0021883a 	mov	r16,zero
   8828c:	00000506 	br	882a4 <__divdf3+0x1a4>
   88290:	4829883a 	mov	r20,r9
   88294:	a1c0004c 	andi	r7,r20,1
   88298:	0081ffc4 	movi	r2,2047
   8829c:	0025883a 	mov	r18,zero
   882a0:	0021883a 	mov	r16,zero
   882a4:	1004953a 	slli	r2,r2,20
   882a8:	39c03fcc 	andi	r7,r7,255
   882ac:	380e97fa 	slli	r7,r7,31
   882b0:	00c00434 	movhi	r3,16
   882b4:	18ffffc4 	addi	r3,r3,-1
   882b8:	90e4703a 	and	r18,r18,r3
   882bc:	9086b03a 	or	r3,r18,r2
   882c0:	19c6b03a 	or	r3,r3,r7
   882c4:	8005883a 	mov	r2,r16
   882c8:	dfc00d17 	ldw	ra,52(sp)
   882cc:	df000c17 	ldw	fp,48(sp)
   882d0:	ddc00b17 	ldw	r23,44(sp)
   882d4:	dd800a17 	ldw	r22,40(sp)
   882d8:	dd400917 	ldw	r21,36(sp)
   882dc:	dd000817 	ldw	r20,32(sp)
   882e0:	dcc00717 	ldw	r19,28(sp)
   882e4:	dc800617 	ldw	r18,24(sp)
   882e8:	dc400517 	ldw	r17,20(sp)
   882ec:	dc000417 	ldw	r16,16(sp)
   882f0:	dec00e04 	addi	sp,sp,56
   882f4:	f800283a 	ret
   882f8:	9104b03a 	or	r2,r18,r4
   882fc:	10003726 	beq	r2,zero,883dc <__divdf3+0x2dc>
   88300:	90012626 	beq	r18,zero,8879c <__divdf3+0x69c>
   88304:	9009883a 	mov	r4,r18
   88308:	d9800215 	stw	r6,8(sp)
   8830c:	d9c00115 	stw	r7,4(sp)
   88310:	0089b840 	call	89b84 <__clzsi2>
   88314:	d9800217 	ldw	r6,8(sp)
   88318:	d9c00117 	ldw	r7,4(sp)
   8831c:	00c009c4 	movi	r3,39
   88320:	18811a16 	blt	r3,r2,8878c <__divdf3+0x68c>
   88324:	01400a04 	movi	r5,40
   88328:	143ffe04 	addi	r16,r2,-8
   8832c:	288bc83a 	sub	r5,r5,r2
   88330:	9424983a 	sll	r18,r18,r16
   88334:	b14ad83a 	srl	r5,r22,r5
   88338:	b420983a 	sll	r16,r22,r16
   8833c:	2ca4b03a 	or	r18,r5,r18
   88340:	04ff0344 	movi	r19,-1011
   88344:	98a7c83a 	sub	r19,r19,r2
   88348:	0029883a 	mov	r20,zero
   8834c:	0039883a 	mov	fp,zero
   88350:	003f8a06 	br	8817c <__alt_data_end+0xfffcff0c>
   88354:	8988b03a 	or	r4,r17,r6
   88358:	20001e1e 	bne	r4,zero,883d4 <__divdf3+0x2d4>
   8835c:	0023883a 	mov	r17,zero
   88360:	0011883a 	mov	r8,zero
   88364:	01800084 	movi	r6,2
   88368:	003f9606 	br	881c4 <__alt_data_end+0xfffcff54>
   8836c:	8988b03a 	or	r4,r17,r6
   88370:	20001426 	beq	r4,zero,883c4 <__divdf3+0x2c4>
   88374:	8800fd26 	beq	r17,zero,8876c <__divdf3+0x66c>
   88378:	8809883a 	mov	r4,r17
   8837c:	d9800215 	stw	r6,8(sp)
   88380:	da400115 	stw	r9,4(sp)
   88384:	0089b840 	call	89b84 <__clzsi2>
   88388:	d9800217 	ldw	r6,8(sp)
   8838c:	da400117 	ldw	r9,4(sp)
   88390:	010009c4 	movi	r4,39
   88394:	2080f116 	blt	r4,r2,8875c <__divdf3+0x65c>
   88398:	01000a04 	movi	r4,40
   8839c:	123ffe04 	addi	r8,r2,-8
   883a0:	2089c83a 	sub	r4,r4,r2
   883a4:	8a22983a 	sll	r17,r17,r8
   883a8:	3108d83a 	srl	r4,r6,r4
   883ac:	3210983a 	sll	r8,r6,r8
   883b0:	2462b03a 	or	r17,r4,r17
   883b4:	013f0344 	movi	r4,-1011
   883b8:	2085c83a 	sub	r2,r4,r2
   883bc:	000d883a 	mov	r6,zero
   883c0:	003f8006 	br	881c4 <__alt_data_end+0xfffcff54>
   883c4:	0023883a 	mov	r17,zero
   883c8:	0011883a 	mov	r8,zero
   883cc:	01800044 	movi	r6,1
   883d0:	003f7c06 	br	881c4 <__alt_data_end+0xfffcff54>
   883d4:	018000c4 	movi	r6,3
   883d8:	003f7a06 	br	881c4 <__alt_data_end+0xfffcff54>
   883dc:	05000104 	movi	r20,4
   883e0:	0025883a 	mov	r18,zero
   883e4:	0021883a 	mov	r16,zero
   883e8:	07000044 	movi	fp,1
   883ec:	003f6306 	br	8817c <__alt_data_end+0xfffcff0c>
   883f0:	05000304 	movi	r20,12
   883f4:	070000c4 	movi	fp,3
   883f8:	003f6006 	br	8817c <__alt_data_end+0xfffcff0c>
   883fc:	000f883a 	mov	r7,zero
   88400:	04800434 	movhi	r18,16
   88404:	94bfffc4 	addi	r18,r18,-1
   88408:	043fffc4 	movi	r16,-1
   8840c:	0081ffc4 	movi	r2,2047
   88410:	003fa406 	br	882a4 <__alt_data_end+0xfffd0034>
   88414:	0005883a 	mov	r2,zero
   88418:	0025883a 	mov	r18,zero
   8841c:	0021883a 	mov	r16,zero
   88420:	003fa006 	br	882a4 <__alt_data_end+0xfffd0034>
   88424:	9885c83a 	sub	r2,r19,r2
   88428:	d8800015 	stw	r2,0(sp)
   8842c:	8c80ef36 	bltu	r17,r18,887ec <__divdf3+0x6ec>
   88430:	9440ed26 	beq	r18,r17,887e8 <__divdf3+0x6e8>
   88434:	d8c00017 	ldw	r3,0(sp)
   88438:	002d883a 	mov	r22,zero
   8843c:	18ffffc4 	addi	r3,r3,-1
   88440:	d8c00015 	stw	r3,0(sp)
   88444:	9007883a 	mov	r3,r18
   88448:	4026d63a 	srli	r19,r8,24
   8844c:	8822923a 	slli	r17,r17,8
   88450:	1809883a 	mov	r4,r3
   88454:	402e923a 	slli	r23,r8,8
   88458:	9c66b03a 	or	r19,r19,r17
   8845c:	982ad43a 	srli	r21,r19,16
   88460:	d8c00315 	stw	r3,12(sp)
   88464:	9f3fffcc 	andi	fp,r19,65535
   88468:	a80b883a 	mov	r5,r21
   8846c:	00878740 	call	87874 <__udivsi3>
   88470:	d8c00317 	ldw	r3,12(sp)
   88474:	a80b883a 	mov	r5,r21
   88478:	1025883a 	mov	r18,r2
   8847c:	1809883a 	mov	r4,r3
   88480:	008787c0 	call	8787c <__umodsi3>
   88484:	1004943a 	slli	r2,r2,16
   88488:	8006d43a 	srli	r3,r16,16
   8848c:	9709383a 	mul	r4,r18,fp
   88490:	10c6b03a 	or	r3,r2,r3
   88494:	1900062e 	bgeu	r3,r4,884b0 <__divdf3+0x3b0>
   88498:	1cc7883a 	add	r3,r3,r19
   8849c:	90bfffc4 	addi	r2,r18,-1
   884a0:	1cc0e436 	bltu	r3,r19,88834 <__divdf3+0x734>
   884a4:	1900e32e 	bgeu	r3,r4,88834 <__divdf3+0x734>
   884a8:	94bfff84 	addi	r18,r18,-2
   884ac:	1cc7883a 	add	r3,r3,r19
   884b0:	1907c83a 	sub	r3,r3,r4
   884b4:	1809883a 	mov	r4,r3
   884b8:	a80b883a 	mov	r5,r21
   884bc:	d8c00315 	stw	r3,12(sp)
   884c0:	00878740 	call	87874 <__udivsi3>
   884c4:	d8c00317 	ldw	r3,12(sp)
   884c8:	a80b883a 	mov	r5,r21
   884cc:	1023883a 	mov	r17,r2
   884d0:	1809883a 	mov	r4,r3
   884d4:	008787c0 	call	8787c <__umodsi3>
   884d8:	1004943a 	slli	r2,r2,16
   884dc:	8f0b383a 	mul	r5,r17,fp
   884e0:	843fffcc 	andi	r16,r16,65535
   884e4:	1420b03a 	or	r16,r2,r16
   884e8:	8140062e 	bgeu	r16,r5,88504 <__divdf3+0x404>
   884ec:	84e1883a 	add	r16,r16,r19
   884f0:	88bfffc4 	addi	r2,r17,-1
   884f4:	84c0cd36 	bltu	r16,r19,8882c <__divdf3+0x72c>
   884f8:	8140cc2e 	bgeu	r16,r5,8882c <__divdf3+0x72c>
   884fc:	8c7fff84 	addi	r17,r17,-2
   88500:	84e1883a 	add	r16,r16,r19
   88504:	9004943a 	slli	r2,r18,16
   88508:	b8ffffcc 	andi	r3,r23,65535
   8850c:	b824d43a 	srli	r18,r23,16
   88510:	88a2b03a 	or	r17,r17,r2
   88514:	8808d43a 	srli	r4,r17,16
   88518:	88bfffcc 	andi	r2,r17,65535
   8851c:	10cd383a 	mul	r6,r2,r3
   88520:	20cf383a 	mul	r7,r4,r3
   88524:	1485383a 	mul	r2,r2,r18
   88528:	3010d43a 	srli	r8,r6,16
   8852c:	814bc83a 	sub	r5,r16,r5
   88530:	3885883a 	add	r2,r7,r2
   88534:	1205883a 	add	r2,r2,r8
   88538:	2489383a 	mul	r4,r4,r18
   8853c:	11c0022e 	bgeu	r2,r7,88548 <__divdf3+0x448>
   88540:	01c00074 	movhi	r7,1
   88544:	21c9883a 	add	r4,r4,r7
   88548:	100ed43a 	srli	r7,r2,16
   8854c:	1020943a 	slli	r16,r2,16
   88550:	31bfffcc 	andi	r6,r6,65535
   88554:	21c9883a 	add	r4,r4,r7
   88558:	81a1883a 	add	r16,r16,r6
   8855c:	29009736 	bltu	r5,r4,887bc <__divdf3+0x6bc>
   88560:	29009526 	beq	r5,r4,887b8 <__divdf3+0x6b8>
   88564:	2909c83a 	sub	r4,r5,r4
   88568:	b421c83a 	sub	r16,r22,r16
   8856c:	b42d803a 	cmpltu	r22,r22,r16
   88570:	25adc83a 	sub	r22,r4,r22
   88574:	b4c0c326 	beq	r22,r19,88884 <__divdf3+0x784>
   88578:	b009883a 	mov	r4,r22
   8857c:	a80b883a 	mov	r5,r21
   88580:	d8c00315 	stw	r3,12(sp)
   88584:	00878740 	call	87874 <__udivsi3>
   88588:	b009883a 	mov	r4,r22
   8858c:	a80b883a 	mov	r5,r21
   88590:	d8800115 	stw	r2,4(sp)
   88594:	008787c0 	call	8787c <__umodsi3>
   88598:	da000117 	ldw	r8,4(sp)
   8859c:	1004943a 	slli	r2,r2,16
   885a0:	800ad43a 	srli	r5,r16,16
   885a4:	4709383a 	mul	r4,r8,fp
   885a8:	d8c00317 	ldw	r3,12(sp)
   885ac:	114ab03a 	or	r5,r2,r5
   885b0:	2900062e 	bgeu	r5,r4,885cc <__divdf3+0x4cc>
   885b4:	2ccb883a 	add	r5,r5,r19
   885b8:	40bfffc4 	addi	r2,r8,-1
   885bc:	2cc0b536 	bltu	r5,r19,88894 <__divdf3+0x794>
   885c0:	2900b42e 	bgeu	r5,r4,88894 <__divdf3+0x794>
   885c4:	423fff84 	addi	r8,r8,-2
   885c8:	2ccb883a 	add	r5,r5,r19
   885cc:	290dc83a 	sub	r6,r5,r4
   885d0:	3009883a 	mov	r4,r6
   885d4:	a80b883a 	mov	r5,r21
   885d8:	d8c00315 	stw	r3,12(sp)
   885dc:	da000115 	stw	r8,4(sp)
   885e0:	d9800215 	stw	r6,8(sp)
   885e4:	00878740 	call	87874 <__udivsi3>
   885e8:	d9800217 	ldw	r6,8(sp)
   885ec:	a80b883a 	mov	r5,r21
   885f0:	102d883a 	mov	r22,r2
   885f4:	3009883a 	mov	r4,r6
   885f8:	008787c0 	call	8787c <__umodsi3>
   885fc:	1004943a 	slli	r2,r2,16
   88600:	b739383a 	mul	fp,r22,fp
   88604:	843fffcc 	andi	r16,r16,65535
   88608:	1408b03a 	or	r4,r2,r16
   8860c:	d8c00317 	ldw	r3,12(sp)
   88610:	da000117 	ldw	r8,4(sp)
   88614:	2700062e 	bgeu	r4,fp,88630 <__divdf3+0x530>
   88618:	24c9883a 	add	r4,r4,r19
   8861c:	b0bfffc4 	addi	r2,r22,-1
   88620:	24c09a36 	bltu	r4,r19,8888c <__divdf3+0x78c>
   88624:	2700992e 	bgeu	r4,fp,8888c <__divdf3+0x78c>
   88628:	b5bfff84 	addi	r22,r22,-2
   8862c:	24c9883a 	add	r4,r4,r19
   88630:	4010943a 	slli	r8,r8,16
   88634:	2739c83a 	sub	fp,r4,fp
   88638:	b210b03a 	or	r8,r22,r8
   8863c:	400ad43a 	srli	r5,r8,16
   88640:	40bfffcc 	andi	r2,r8,65535
   88644:	10c9383a 	mul	r4,r2,r3
   88648:	1485383a 	mul	r2,r2,r18
   8864c:	28c7383a 	mul	r3,r5,r3
   88650:	200cd43a 	srli	r6,r4,16
   88654:	2ca5383a 	mul	r18,r5,r18
   88658:	1885883a 	add	r2,r3,r2
   8865c:	1185883a 	add	r2,r2,r6
   88660:	10c0022e 	bgeu	r2,r3,8866c <__divdf3+0x56c>
   88664:	00c00074 	movhi	r3,1
   88668:	90e5883a 	add	r18,r18,r3
   8866c:	1006d43a 	srli	r3,r2,16
   88670:	1004943a 	slli	r2,r2,16
   88674:	213fffcc 	andi	r4,r4,65535
   88678:	90e5883a 	add	r18,r18,r3
   8867c:	1109883a 	add	r4,r2,r4
   88680:	e480602e 	bgeu	fp,r18,88804 <__divdf3+0x704>
   88684:	e4f9883a 	add	fp,fp,r19
   88688:	40bfffc4 	addi	r2,r8,-1
   8868c:	e4c06b2e 	bgeu	fp,r19,8883c <__divdf3+0x73c>
   88690:	1011883a 	mov	r8,r2
   88694:	e4805e26 	beq	fp,r18,88810 <__divdf3+0x710>
   88698:	42000054 	ori	r8,r8,1
   8869c:	d8c00017 	ldw	r3,0(sp)
   886a0:	1880ffc4 	addi	r2,r3,1023
   886a4:	00806d0e 	bge	zero,r2,8885c <__divdf3+0x75c>
   886a8:	40c001cc 	andi	r3,r8,7
   886ac:	18000726 	beq	r3,zero,886cc <__divdf3+0x5cc>
   886b0:	410003cc 	andi	r4,r8,15
   886b4:	00c00104 	movi	r3,4
   886b8:	20c00426 	beq	r4,r3,886cc <__divdf3+0x5cc>
   886bc:	40c7883a 	add	r3,r8,r3
   886c0:	1a11803a 	cmpltu	r8,r3,r8
   886c4:	8a23883a 	add	r17,r17,r8
   886c8:	1811883a 	mov	r8,r3
   886cc:	88c0402c 	andhi	r3,r17,256
   886d0:	18000526 	beq	r3,zero,886e8 <__divdf3+0x5e8>
   886d4:	d8c00017 	ldw	r3,0(sp)
   886d8:	00bfc034 	movhi	r2,65280
   886dc:	10bfffc4 	addi	r2,r2,-1
   886e0:	88a2703a 	and	r17,r17,r2
   886e4:	18810004 	addi	r2,r3,1024
   886e8:	00c1ff84 	movi	r3,2046
   886ec:	18bee916 	blt	r3,r2,88294 <__alt_data_end+0xfffd0024>
   886f0:	8820977a 	slli	r16,r17,29
   886f4:	4010d0fa 	srli	r8,r8,3
   886f8:	8822927a 	slli	r17,r17,9
   886fc:	1081ffcc 	andi	r2,r2,2047
   88700:	8220b03a 	or	r16,r16,r8
   88704:	8824d33a 	srli	r18,r17,12
   88708:	a1c0004c 	andi	r7,r20,1
   8870c:	003ee506 	br	882a4 <__alt_data_end+0xfffd0034>
   88710:	9080022c 	andhi	r2,r18,8
   88714:	10000a26 	beq	r2,zero,88740 <__divdf3+0x640>
   88718:	8880022c 	andhi	r2,r17,8
   8871c:	1000081e 	bne	r2,zero,88740 <__divdf3+0x640>
   88720:	00800434 	movhi	r2,16
   88724:	10bfffc4 	addi	r2,r2,-1
   88728:	8c800234 	orhi	r18,r17,8
   8872c:	90a4703a 	and	r18,r18,r2
   88730:	b00f883a 	mov	r7,r22
   88734:	4021883a 	mov	r16,r8
   88738:	0081ffc4 	movi	r2,2047
   8873c:	003ed906 	br	882a4 <__alt_data_end+0xfffd0034>
   88740:	00800434 	movhi	r2,16
   88744:	10bfffc4 	addi	r2,r2,-1
   88748:	94800234 	orhi	r18,r18,8
   8874c:	90a4703a 	and	r18,r18,r2
   88750:	a80f883a 	mov	r7,r21
   88754:	0081ffc4 	movi	r2,2047
   88758:	003ed206 	br	882a4 <__alt_data_end+0xfffd0034>
   8875c:	147ff604 	addi	r17,r2,-40
   88760:	3462983a 	sll	r17,r6,r17
   88764:	0011883a 	mov	r8,zero
   88768:	003f1206 	br	883b4 <__alt_data_end+0xfffd0144>
   8876c:	3009883a 	mov	r4,r6
   88770:	d9800215 	stw	r6,8(sp)
   88774:	da400115 	stw	r9,4(sp)
   88778:	0089b840 	call	89b84 <__clzsi2>
   8877c:	10800804 	addi	r2,r2,32
   88780:	da400117 	ldw	r9,4(sp)
   88784:	d9800217 	ldw	r6,8(sp)
   88788:	003f0106 	br	88390 <__alt_data_end+0xfffd0120>
   8878c:	14bff604 	addi	r18,r2,-40
   88790:	b4a4983a 	sll	r18,r22,r18
   88794:	0021883a 	mov	r16,zero
   88798:	003ee906 	br	88340 <__alt_data_end+0xfffd00d0>
   8879c:	d9800215 	stw	r6,8(sp)
   887a0:	d9c00115 	stw	r7,4(sp)
   887a4:	0089b840 	call	89b84 <__clzsi2>
   887a8:	10800804 	addi	r2,r2,32
   887ac:	d9c00117 	ldw	r7,4(sp)
   887b0:	d9800217 	ldw	r6,8(sp)
   887b4:	003ed906 	br	8831c <__alt_data_end+0xfffd00ac>
   887b8:	b400262e 	bgeu	r22,r16,88854 <__divdf3+0x754>
   887bc:	b5ed883a 	add	r22,r22,r23
   887c0:	b5c5803a 	cmpltu	r2,r22,r23
   887c4:	14c5883a 	add	r2,r2,r19
   887c8:	114b883a 	add	r5,r2,r5
   887cc:	88bfffc4 	addi	r2,r17,-1
   887d0:	9940112e 	bgeu	r19,r5,88818 <__divdf3+0x718>
   887d4:	29004e36 	bltu	r5,r4,88910 <__divdf3+0x810>
   887d8:	21401c26 	beq	r4,r5,8884c <__divdf3+0x74c>
   887dc:	2909c83a 	sub	r4,r5,r4
   887e0:	1023883a 	mov	r17,r2
   887e4:	003f6006 	br	88568 <__alt_data_end+0xfffd02f8>
   887e8:	443f122e 	bgeu	r8,r16,88434 <__alt_data_end+0xfffd01c4>
   887ec:	8008d07a 	srli	r4,r16,1
   887f0:	900497fa 	slli	r2,r18,31
   887f4:	802c97fa 	slli	r22,r16,31
   887f8:	9006d07a 	srli	r3,r18,1
   887fc:	20a0b03a 	or	r16,r4,r2
   88800:	003f1106 	br	88448 <__alt_data_end+0xfffd01d8>
   88804:	e4bfa41e 	bne	fp,r18,88698 <__alt_data_end+0xfffd0428>
   88808:	203f9e1e 	bne	r4,zero,88684 <__alt_data_end+0xfffd0414>
   8880c:	002f883a 	mov	r23,zero
   88810:	b93fa11e 	bne	r23,r4,88698 <__alt_data_end+0xfffd0428>
   88814:	003fa106 	br	8869c <__alt_data_end+0xfffd042c>
   88818:	2cfff01e 	bne	r5,r19,887dc <__alt_data_end+0xfffd056c>
   8881c:	b5ffed2e 	bgeu	r22,r23,887d4 <__alt_data_end+0xfffd0564>
   88820:	9909c83a 	sub	r4,r19,r4
   88824:	1023883a 	mov	r17,r2
   88828:	003f4f06 	br	88568 <__alt_data_end+0xfffd02f8>
   8882c:	1023883a 	mov	r17,r2
   88830:	003f3406 	br	88504 <__alt_data_end+0xfffd0294>
   88834:	1025883a 	mov	r18,r2
   88838:	003f1d06 	br	884b0 <__alt_data_end+0xfffd0240>
   8883c:	e4803a36 	bltu	fp,r18,88928 <__divdf3+0x828>
   88840:	97005626 	beq	r18,fp,8899c <__divdf3+0x89c>
   88844:	1011883a 	mov	r8,r2
   88848:	003f9306 	br	88698 <__alt_data_end+0xfffd0428>
   8884c:	b4003036 	bltu	r22,r16,88910 <__divdf3+0x810>
   88850:	1023883a 	mov	r17,r2
   88854:	0009883a 	mov	r4,zero
   88858:	003f4306 	br	88568 <__alt_data_end+0xfffd02f8>
   8885c:	d8c00017 	ldw	r3,0(sp)
   88860:	00bf0084 	movi	r2,-1022
   88864:	10c5c83a 	sub	r2,r2,r3
   88868:	00c00e04 	movi	r3,56
   8886c:	18800d0e 	bge	r3,r2,888a4 <__divdf3+0x7a4>
   88870:	a1c0004c 	andi	r7,r20,1
   88874:	0005883a 	mov	r2,zero
   88878:	0025883a 	mov	r18,zero
   8887c:	0021883a 	mov	r16,zero
   88880:	003e8806 	br	882a4 <__alt_data_end+0xfffd0034>
   88884:	023fffc4 	movi	r8,-1
   88888:	003f8406 	br	8869c <__alt_data_end+0xfffd042c>
   8888c:	102d883a 	mov	r22,r2
   88890:	003f6706 	br	88630 <__alt_data_end+0xfffd03c0>
   88894:	1011883a 	mov	r8,r2
   88898:	003f4c06 	br	885cc <__alt_data_end+0xfffd035c>
   8889c:	4829883a 	mov	r20,r9
   888a0:	003f7e06 	br	8869c <__alt_data_end+0xfffd042c>
   888a4:	00c007c4 	movi	r3,31
   888a8:	18802616 	blt	r3,r2,88944 <__divdf3+0x844>
   888ac:	d9000017 	ldw	r4,0(sp)
   888b0:	408ad83a 	srl	r5,r8,r2
   888b4:	8884d83a 	srl	r2,r17,r2
   888b8:	20c10784 	addi	r3,r4,1054
   888bc:	88c8983a 	sll	r4,r17,r3
   888c0:	40c6983a 	sll	r3,r8,r3
   888c4:	2908b03a 	or	r4,r5,r4
   888c8:	1806c03a 	cmpne	r3,r3,zero
   888cc:	20c6b03a 	or	r3,r4,r3
   888d0:	190001cc 	andi	r4,r3,7
   888d4:	20000726 	beq	r4,zero,888f4 <__divdf3+0x7f4>
   888d8:	194003cc 	andi	r5,r3,15
   888dc:	01000104 	movi	r4,4
   888e0:	29000426 	beq	r5,r4,888f4 <__divdf3+0x7f4>
   888e4:	1909883a 	add	r4,r3,r4
   888e8:	20c7803a 	cmpltu	r3,r4,r3
   888ec:	10c5883a 	add	r2,r2,r3
   888f0:	2007883a 	mov	r3,r4
   888f4:	1100202c 	andhi	r4,r2,128
   888f8:	20002026 	beq	r4,zero,8897c <__divdf3+0x87c>
   888fc:	a1c0004c 	andi	r7,r20,1
   88900:	00800044 	movi	r2,1
   88904:	0025883a 	mov	r18,zero
   88908:	0021883a 	mov	r16,zero
   8890c:	003e6506 	br	882a4 <__alt_data_end+0xfffd0034>
   88910:	b5ed883a 	add	r22,r22,r23
   88914:	b5c5803a 	cmpltu	r2,r22,r23
   88918:	14c5883a 	add	r2,r2,r19
   8891c:	114b883a 	add	r5,r2,r5
   88920:	8c7fff84 	addi	r17,r17,-2
   88924:	003f0f06 	br	88564 <__alt_data_end+0xfffd02f4>
   88928:	bdc7883a 	add	r3,r23,r23
   8892c:	1def803a 	cmpltu	r23,r3,r23
   88930:	bce7883a 	add	r19,r23,r19
   88934:	40bfff84 	addi	r2,r8,-2
   88938:	e4f9883a 	add	fp,fp,r19
   8893c:	182f883a 	mov	r23,r3
   88940:	003f5306 	br	88690 <__alt_data_end+0xfffd0420>
   88944:	d9000017 	ldw	r4,0(sp)
   88948:	00fef884 	movi	r3,-1054
   8894c:	1907c83a 	sub	r3,r3,r4
   88950:	01000804 	movi	r4,32
   88954:	88c6d83a 	srl	r3,r17,r3
   88958:	11001426 	beq	r2,r4,889ac <__divdf3+0x8ac>
   8895c:	d9000017 	ldw	r4,0(sp)
   88960:	20810f84 	addi	r2,r4,1086
   88964:	8884983a 	sll	r2,r17,r2
   88968:	1204b03a 	or	r2,r2,r8
   8896c:	1004c03a 	cmpne	r2,r2,zero
   88970:	10c6b03a 	or	r3,r2,r3
   88974:	0005883a 	mov	r2,zero
   88978:	003fd506 	br	888d0 <__alt_data_end+0xfffd0660>
   8897c:	1020977a 	slli	r16,r2,29
   88980:	1806d0fa 	srli	r3,r3,3
   88984:	1004927a 	slli	r2,r2,9
   88988:	a1c0004c 	andi	r7,r20,1
   8898c:	80e0b03a 	or	r16,r16,r3
   88990:	1024d33a 	srli	r18,r2,12
   88994:	0005883a 	mov	r2,zero
   88998:	003e4206 	br	882a4 <__alt_data_end+0xfffd0034>
   8899c:	b93fe236 	bltu	r23,r4,88928 <__alt_data_end+0xfffd06b8>
   889a0:	1011883a 	mov	r8,r2
   889a4:	b93f3c1e 	bne	r23,r4,88698 <__alt_data_end+0xfffd0428>
   889a8:	003f3c06 	br	8869c <__alt_data_end+0xfffd042c>
   889ac:	0005883a 	mov	r2,zero
   889b0:	003fed06 	br	88968 <__alt_data_end+0xfffd06f8>
   889b4:	00800434 	movhi	r2,16
   889b8:	10bfffc4 	addi	r2,r2,-1
   889bc:	8c800234 	orhi	r18,r17,8
   889c0:	90a4703a 	and	r18,r18,r2
   889c4:	480f883a 	mov	r7,r9
   889c8:	4021883a 	mov	r16,r8
   889cc:	0081ffc4 	movi	r2,2047
   889d0:	003e3406 	br	882a4 <__alt_data_end+0xfffd0034>

000889d4 <__ledf2>:
   889d4:	2806d53a 	srli	r3,r5,20
   889d8:	3810d53a 	srli	r8,r7,20
   889dc:	00800434 	movhi	r2,16
   889e0:	10bfffc4 	addi	r2,r2,-1
   889e4:	18c1ffcc 	andi	r3,r3,2047
   889e8:	0241ffc4 	movi	r9,2047
   889ec:	2894703a 	and	r10,r5,r2
   889f0:	4201ffcc 	andi	r8,r8,2047
   889f4:	3884703a 	and	r2,r7,r2
   889f8:	280ad7fa 	srli	r5,r5,31
   889fc:	380ed7fa 	srli	r7,r7,31
   88a00:	1a402026 	beq	r3,r9,88a84 <__ledf2+0xb0>
   88a04:	0241ffc4 	movi	r9,2047
   88a08:	42401726 	beq	r8,r9,88a68 <__ledf2+0x94>
   88a0c:	18000b26 	beq	r3,zero,88a3c <__ledf2+0x68>
   88a10:	29403fcc 	andi	r5,r5,255
   88a14:	39c03fcc 	andi	r7,r7,255
   88a18:	40000f1e 	bne	r8,zero,88a58 <__ledf2+0x84>
   88a1c:	0017883a 	mov	r11,zero
   88a20:	1192b03a 	or	r9,r2,r6
   88a24:	4813003a 	cmpeq	r9,r9,zero
   88a28:	58001326 	beq	r11,zero,88a78 <__ledf2+0xa4>
   88a2c:	48001e1e 	bne	r9,zero,88aa8 <__ledf2+0xd4>
   88a30:	38000b1e 	bne	r7,zero,88a60 <__ledf2+0x8c>
   88a34:	00bfffc4 	movi	r2,-1
   88a38:	f800283a 	ret
   88a3c:	5112b03a 	or	r9,r10,r4
   88a40:	4813003a 	cmpeq	r9,r9,zero
   88a44:	4817883a 	mov	r11,r9
   88a48:	29403fcc 	andi	r5,r5,255
   88a4c:	39c03fcc 	andi	r7,r7,255
   88a50:	403ff326 	beq	r8,zero,88a20 <__alt_data_end+0xfffd07b0>
   88a54:	483ff61e 	bne	r9,zero,88a30 <__alt_data_end+0xfffd07c0>
   88a58:	29c00e26 	beq	r5,r7,88a94 <__ledf2+0xc0>
   88a5c:	283ff51e 	bne	r5,zero,88a34 <__alt_data_end+0xfffd07c4>
   88a60:	00800044 	movi	r2,1
   88a64:	f800283a 	ret
   88a68:	1192b03a 	or	r9,r2,r6
   88a6c:	483fe726 	beq	r9,zero,88a0c <__alt_data_end+0xfffd079c>
   88a70:	00800084 	movi	r2,2
   88a74:	f800283a 	ret
   88a78:	483ff726 	beq	r9,zero,88a58 <__alt_data_end+0xfffd07e8>
   88a7c:	283ff826 	beq	r5,zero,88a60 <__alt_data_end+0xfffd07f0>
   88a80:	003fec06 	br	88a34 <__alt_data_end+0xfffd07c4>
   88a84:	5112b03a 	or	r9,r10,r4
   88a88:	483fde26 	beq	r9,zero,88a04 <__alt_data_end+0xfffd0794>
   88a8c:	00800084 	movi	r2,2
   88a90:	f800283a 	ret
   88a94:	40fff116 	blt	r8,r3,88a5c <__alt_data_end+0xfffd07ec>
   88a98:	1a000716 	blt	r3,r8,88ab8 <__ledf2+0xe4>
   88a9c:	12bfef36 	bltu	r2,r10,88a5c <__alt_data_end+0xfffd07ec>
   88aa0:	50800326 	beq	r10,r2,88ab0 <__ledf2+0xdc>
   88aa4:	50800436 	bltu	r10,r2,88ab8 <__ledf2+0xe4>
   88aa8:	0005883a 	mov	r2,zero
   88aac:	f800283a 	ret
   88ab0:	313fea36 	bltu	r6,r4,88a5c <__alt_data_end+0xfffd07ec>
   88ab4:	21bffc2e 	bgeu	r4,r6,88aa8 <__alt_data_end+0xfffd0838>
   88ab8:	283fde26 	beq	r5,zero,88a34 <__alt_data_end+0xfffd07c4>
   88abc:	003fe806 	br	88a60 <__alt_data_end+0xfffd07f0>

00088ac0 <__muldf3>:
   88ac0:	defff204 	addi	sp,sp,-56
   88ac4:	dd000815 	stw	r20,32(sp)
   88ac8:	2828d53a 	srli	r20,r5,20
   88acc:	dc800615 	stw	r18,24(sp)
   88ad0:	2824d7fa 	srli	r18,r5,31
   88ad4:	ddc00b15 	stw	r23,44(sp)
   88ad8:	dd400915 	stw	r21,36(sp)
   88adc:	dcc00715 	stw	r19,28(sp)
   88ae0:	dc400515 	stw	r17,20(sp)
   88ae4:	dfc00d15 	stw	ra,52(sp)
   88ae8:	04400434 	movhi	r17,16
   88aec:	8c7fffc4 	addi	r17,r17,-1
   88af0:	df000c15 	stw	fp,48(sp)
   88af4:	dd800a15 	stw	r22,40(sp)
   88af8:	dc000415 	stw	r16,16(sp)
   88afc:	a501ffcc 	andi	r20,r20,2047
   88b00:	2027883a 	mov	r19,r4
   88b04:	2c62703a 	and	r17,r5,r17
   88b08:	902f883a 	mov	r23,r18
   88b0c:	95403fcc 	andi	r21,r18,255
   88b10:	a0005d26 	beq	r20,zero,88c88 <__muldf3+0x1c8>
   88b14:	0081ffc4 	movi	r2,2047
   88b18:	2021883a 	mov	r16,r4
   88b1c:	a0803326 	beq	r20,r2,88bec <__muldf3+0x12c>
   88b20:	88800434 	orhi	r2,r17,16
   88b24:	100490fa 	slli	r2,r2,3
   88b28:	2022d77a 	srli	r17,r4,29
   88b2c:	202090fa 	slli	r16,r4,3
   88b30:	a53f0044 	addi	r20,r20,-1023
   88b34:	1462b03a 	or	r17,r2,r17
   88b38:	0015883a 	mov	r10,zero
   88b3c:	0039883a 	mov	fp,zero
   88b40:	3804d53a 	srli	r2,r7,20
   88b44:	382cd7fa 	srli	r22,r7,31
   88b48:	04c00434 	movhi	r19,16
   88b4c:	9cffffc4 	addi	r19,r19,-1
   88b50:	1081ffcc 	andi	r2,r2,2047
   88b54:	300b883a 	mov	r5,r6
   88b58:	3ce6703a 	and	r19,r7,r19
   88b5c:	b2403fcc 	andi	r9,r22,255
   88b60:	10006626 	beq	r2,zero,88cfc <__muldf3+0x23c>
   88b64:	00c1ffc4 	movi	r3,2047
   88b68:	10c05e26 	beq	r2,r3,88ce4 <__muldf3+0x224>
   88b6c:	98c00434 	orhi	r3,r19,16
   88b70:	180690fa 	slli	r3,r3,3
   88b74:	3026d77a 	srli	r19,r6,29
   88b78:	300a90fa 	slli	r5,r6,3
   88b7c:	10bf0044 	addi	r2,r2,-1023
   88b80:	1ce6b03a 	or	r19,r3,r19
   88b84:	0007883a 	mov	r3,zero
   88b88:	1a88b03a 	or	r4,r3,r10
   88b8c:	2109883a 	add	r4,r4,r4
   88b90:	2109883a 	add	r4,r4,r4
   88b94:	01800274 	movhi	r6,9
   88b98:	31a2eb04 	addi	r6,r6,-29780
   88b9c:	2189883a 	add	r4,r4,r6
   88ba0:	21000017 	ldw	r4,0(r4)
   88ba4:	95a4f03a 	xor	r18,r18,r22
   88ba8:	2000683a 	jmp	r4
   88bac:	00088de4 	muli	zero,zero,8759
   88bb0:	00088dd4 	movui	zero,8759
   88bb4:	00088dd4 	movui	zero,8759
   88bb8:	00088dc0 	call	88dc <__alt_mem_onchip_memory-0x77724>
   88bbc:	00088c0c 	andi	zero,zero,8752
   88bc0:	00088c0c 	andi	zero,zero,8752
   88bc4:	00088da8 	cmpgeui	zero,zero,8758
   88bc8:	00088dc0 	call	88dc <__alt_mem_onchip_memory-0x77724>
   88bcc:	00088c0c 	andi	zero,zero,8752
   88bd0:	00088da8 	cmpgeui	zero,zero,8758
   88bd4:	00088c0c 	andi	zero,zero,8752
   88bd8:	00088dc0 	call	88dc <__alt_mem_onchip_memory-0x77724>
   88bdc:	00088c08 	cmpgei	zero,zero,8752
   88be0:	00088c08 	cmpgei	zero,zero,8752
   88be4:	00088c08 	cmpgei	zero,zero,8752
   88be8:	00089004 	movi	zero,8768
   88bec:	8904b03a 	or	r2,r17,r4
   88bf0:	10006a1e 	bne	r2,zero,88d9c <__muldf3+0x2dc>
   88bf4:	02800204 	movi	r10,8
   88bf8:	0023883a 	mov	r17,zero
   88bfc:	0021883a 	mov	r16,zero
   88c00:	07000084 	movi	fp,2
   88c04:	003fce06 	br	88b40 <__alt_data_end+0xfffd08d0>
   88c08:	a825883a 	mov	r18,r21
   88c0c:	00800084 	movi	r2,2
   88c10:	e0805226 	beq	fp,r2,88d5c <__muldf3+0x29c>
   88c14:	008000c4 	movi	r2,3
   88c18:	e0815d26 	beq	fp,r2,89190 <__muldf3+0x6d0>
   88c1c:	00800044 	movi	r2,1
   88c20:	e080db1e 	bne	fp,r2,88f90 <__muldf3+0x4d0>
   88c24:	902f883a 	mov	r23,r18
   88c28:	0005883a 	mov	r2,zero
   88c2c:	0023883a 	mov	r17,zero
   88c30:	0021883a 	mov	r16,zero
   88c34:	1004953a 	slli	r2,r2,20
   88c38:	bdc03fcc 	andi	r23,r23,255
   88c3c:	b82e97fa 	slli	r23,r23,31
   88c40:	00c00434 	movhi	r3,16
   88c44:	18ffffc4 	addi	r3,r3,-1
   88c48:	88e2703a 	and	r17,r17,r3
   88c4c:	8886b03a 	or	r3,r17,r2
   88c50:	1dc6b03a 	or	r3,r3,r23
   88c54:	8005883a 	mov	r2,r16
   88c58:	dfc00d17 	ldw	ra,52(sp)
   88c5c:	df000c17 	ldw	fp,48(sp)
   88c60:	ddc00b17 	ldw	r23,44(sp)
   88c64:	dd800a17 	ldw	r22,40(sp)
   88c68:	dd400917 	ldw	r21,36(sp)
   88c6c:	dd000817 	ldw	r20,32(sp)
   88c70:	dcc00717 	ldw	r19,28(sp)
   88c74:	dc800617 	ldw	r18,24(sp)
   88c78:	dc400517 	ldw	r17,20(sp)
   88c7c:	dc000417 	ldw	r16,16(sp)
   88c80:	dec00e04 	addi	sp,sp,56
   88c84:	f800283a 	ret
   88c88:	8904b03a 	or	r2,r17,r4
   88c8c:	10003e26 	beq	r2,zero,88d88 <__muldf3+0x2c8>
   88c90:	8800f226 	beq	r17,zero,8905c <__muldf3+0x59c>
   88c94:	8809883a 	mov	r4,r17
   88c98:	d9800315 	stw	r6,12(sp)
   88c9c:	d9c00115 	stw	r7,4(sp)
   88ca0:	0089b840 	call	89b84 <__clzsi2>
   88ca4:	d9800317 	ldw	r6,12(sp)
   88ca8:	d9c00117 	ldw	r7,4(sp)
   88cac:	00c009c4 	movi	r3,39
   88cb0:	1880e616 	blt	r3,r2,8904c <__muldf3+0x58c>
   88cb4:	00c00a04 	movi	r3,40
   88cb8:	143ffe04 	addi	r16,r2,-8
   88cbc:	1887c83a 	sub	r3,r3,r2
   88cc0:	8c22983a 	sll	r17,r17,r16
   88cc4:	98c6d83a 	srl	r3,r19,r3
   88cc8:	9c20983a 	sll	r16,r19,r16
   88ccc:	1c62b03a 	or	r17,r3,r17
   88cd0:	053f0344 	movi	r20,-1011
   88cd4:	a0a9c83a 	sub	r20,r20,r2
   88cd8:	0015883a 	mov	r10,zero
   88cdc:	0039883a 	mov	fp,zero
   88ce0:	003f9706 	br	88b40 <__alt_data_end+0xfffd08d0>
   88ce4:	9986b03a 	or	r3,r19,r6
   88ce8:	1800251e 	bne	r3,zero,88d80 <__muldf3+0x2c0>
   88cec:	0027883a 	mov	r19,zero
   88cf0:	000b883a 	mov	r5,zero
   88cf4:	00c00084 	movi	r3,2
   88cf8:	003fa306 	br	88b88 <__alt_data_end+0xfffd0918>
   88cfc:	9986b03a 	or	r3,r19,r6
   88d00:	18001b26 	beq	r3,zero,88d70 <__muldf3+0x2b0>
   88d04:	9800e026 	beq	r19,zero,89088 <__muldf3+0x5c8>
   88d08:	9809883a 	mov	r4,r19
   88d0c:	d9800315 	stw	r6,12(sp)
   88d10:	da400115 	stw	r9,4(sp)
   88d14:	da800215 	stw	r10,8(sp)
   88d18:	0089b840 	call	89b84 <__clzsi2>
   88d1c:	d9800317 	ldw	r6,12(sp)
   88d20:	da400117 	ldw	r9,4(sp)
   88d24:	da800217 	ldw	r10,8(sp)
   88d28:	00c009c4 	movi	r3,39
   88d2c:	1880d216 	blt	r3,r2,89078 <__muldf3+0x5b8>
   88d30:	01c00a04 	movi	r7,40
   88d34:	117ffe04 	addi	r5,r2,-8
   88d38:	388fc83a 	sub	r7,r7,r2
   88d3c:	9966983a 	sll	r19,r19,r5
   88d40:	31ced83a 	srl	r7,r6,r7
   88d44:	314a983a 	sll	r5,r6,r5
   88d48:	3ce6b03a 	or	r19,r7,r19
   88d4c:	00ff0344 	movi	r3,-1011
   88d50:	1885c83a 	sub	r2,r3,r2
   88d54:	0007883a 	mov	r3,zero
   88d58:	003f8b06 	br	88b88 <__alt_data_end+0xfffd0918>
   88d5c:	902f883a 	mov	r23,r18
   88d60:	0081ffc4 	movi	r2,2047
   88d64:	0023883a 	mov	r17,zero
   88d68:	0021883a 	mov	r16,zero
   88d6c:	003fb106 	br	88c34 <__alt_data_end+0xfffd09c4>
   88d70:	0027883a 	mov	r19,zero
   88d74:	000b883a 	mov	r5,zero
   88d78:	00c00044 	movi	r3,1
   88d7c:	003f8206 	br	88b88 <__alt_data_end+0xfffd0918>
   88d80:	00c000c4 	movi	r3,3
   88d84:	003f8006 	br	88b88 <__alt_data_end+0xfffd0918>
   88d88:	02800104 	movi	r10,4
   88d8c:	0023883a 	mov	r17,zero
   88d90:	0021883a 	mov	r16,zero
   88d94:	07000044 	movi	fp,1
   88d98:	003f6906 	br	88b40 <__alt_data_end+0xfffd08d0>
   88d9c:	02800304 	movi	r10,12
   88da0:	070000c4 	movi	fp,3
   88da4:	003f6606 	br	88b40 <__alt_data_end+0xfffd08d0>
   88da8:	002f883a 	mov	r23,zero
   88dac:	04400434 	movhi	r17,16
   88db0:	8c7fffc4 	addi	r17,r17,-1
   88db4:	043fffc4 	movi	r16,-1
   88db8:	0081ffc4 	movi	r2,2047
   88dbc:	003f9d06 	br	88c34 <__alt_data_end+0xfffd09c4>
   88dc0:	9823883a 	mov	r17,r19
   88dc4:	2821883a 	mov	r16,r5
   88dc8:	4825883a 	mov	r18,r9
   88dcc:	1839883a 	mov	fp,r3
   88dd0:	003f8e06 	br	88c0c <__alt_data_end+0xfffd099c>
   88dd4:	9823883a 	mov	r17,r19
   88dd8:	2821883a 	mov	r16,r5
   88ddc:	1839883a 	mov	fp,r3
   88de0:	003f8a06 	br	88c0c <__alt_data_end+0xfffd099c>
   88de4:	800cd43a 	srli	r6,r16,16
   88de8:	2808d43a 	srli	r4,r5,16
   88dec:	843fffcc 	andi	r16,r16,65535
   88df0:	297fffcc 	andi	r5,r5,65535
   88df4:	2c15383a 	mul	r10,r5,r16
   88df8:	2411383a 	mul	r8,r4,r16
   88dfc:	2987383a 	mul	r3,r5,r6
   88e00:	500ed43a 	srli	r7,r10,16
   88e04:	a085883a 	add	r2,r20,r2
   88e08:	d8800015 	stw	r2,0(sp)
   88e0c:	1a05883a 	add	r2,r3,r8
   88e10:	11c5883a 	add	r2,r2,r7
   88e14:	2197383a 	mul	r11,r4,r6
   88e18:	10c0022e 	bgeu	r2,r3,88e24 <__muldf3+0x364>
   88e1c:	00c00074 	movhi	r3,1
   88e20:	58d7883a 	add	r11,r11,r3
   88e24:	9806d43a 	srli	r3,r19,16
   88e28:	9cffffcc 	andi	r19,r19,65535
   88e2c:	9c13383a 	mul	r9,r19,r16
   88e30:	9991383a 	mul	r8,r19,r6
   88e34:	1c21383a 	mul	r16,r3,r16
   88e38:	481ad43a 	srli	r13,r9,16
   88e3c:	1018943a 	slli	r12,r2,16
   88e40:	440f883a 	add	r7,r8,r16
   88e44:	52bfffcc 	andi	r10,r10,65535
   88e48:	3b4f883a 	add	r7,r7,r13
   88e4c:	1020d43a 	srli	r16,r2,16
   88e50:	6299883a 	add	r12,r12,r10
   88e54:	198d383a 	mul	r6,r3,r6
   88e58:	3a00022e 	bgeu	r7,r8,88e64 <__muldf3+0x3a4>
   88e5c:	00800074 	movhi	r2,1
   88e60:	308d883a 	add	r6,r6,r2
   88e64:	8804d43a 	srli	r2,r17,16
   88e68:	8c7fffcc 	andi	r17,r17,65535
   88e6c:	2c55383a 	mul	r10,r5,r17
   88e70:	2451383a 	mul	r8,r4,r17
   88e74:	288b383a 	mul	r5,r5,r2
   88e78:	501cd43a 	srli	r14,r10,16
   88e7c:	381ad43a 	srli	r13,r7,16
   88e80:	380e943a 	slli	r7,r7,16
   88e84:	2a11883a 	add	r8,r5,r8
   88e88:	4a7fffcc 	andi	r9,r9,65535
   88e8c:	4391883a 	add	r8,r8,r14
   88e90:	334d883a 	add	r6,r6,r13
   88e94:	3a4f883a 	add	r7,r7,r9
   88e98:	2089383a 	mul	r4,r4,r2
   88e9c:	4140022e 	bgeu	r8,r5,88ea8 <__muldf3+0x3e8>
   88ea0:	01400074 	movhi	r5,1
   88ea4:	2149883a 	add	r4,r4,r5
   88ea8:	9c53383a 	mul	r9,r19,r17
   88eac:	1c63383a 	mul	r17,r3,r17
   88eb0:	98a7383a 	mul	r19,r19,r2
   88eb4:	481cd43a 	srli	r14,r9,16
   88eb8:	401ad43a 	srli	r13,r8,16
   88ebc:	4010943a 	slli	r8,r8,16
   88ec0:	9c4b883a 	add	r5,r19,r17
   88ec4:	52bfffcc 	andi	r10,r10,65535
   88ec8:	2b8b883a 	add	r5,r5,r14
   88ecc:	2349883a 	add	r4,r4,r13
   88ed0:	4291883a 	add	r8,r8,r10
   88ed4:	1887383a 	mul	r3,r3,r2
   88ed8:	2cc0022e 	bgeu	r5,r19,88ee4 <__muldf3+0x424>
   88edc:	00800074 	movhi	r2,1
   88ee0:	1887883a 	add	r3,r3,r2
   88ee4:	2814943a 	slli	r10,r5,16
   88ee8:	3c21883a 	add	r16,r7,r16
   88eec:	4a7fffcc 	andi	r9,r9,65535
   88ef0:	82e1883a 	add	r16,r16,r11
   88ef4:	5255883a 	add	r10,r10,r9
   88ef8:	81cf803a 	cmpltu	r7,r16,r7
   88efc:	5195883a 	add	r10,r10,r6
   88f00:	8221883a 	add	r16,r16,r8
   88f04:	51d7883a 	add	r11,r10,r7
   88f08:	8211803a 	cmpltu	r8,r16,r8
   88f0c:	2804d43a 	srli	r2,r5,16
   88f10:	22d3883a 	add	r9,r4,r11
   88f14:	4a0b883a 	add	r5,r9,r8
   88f18:	518d803a 	cmpltu	r6,r10,r6
   88f1c:	59e3803a 	cmpltu	r17,r11,r7
   88f20:	89a2b03a 	or	r17,r17,r6
   88f24:	2a11803a 	cmpltu	r8,r5,r8
   88f28:	4909803a 	cmpltu	r4,r9,r4
   88f2c:	88a3883a 	add	r17,r17,r2
   88f30:	4108b03a 	or	r4,r8,r4
   88f34:	8923883a 	add	r17,r17,r4
   88f38:	800c927a 	slli	r6,r16,9
   88f3c:	88c7883a 	add	r3,r17,r3
   88f40:	2808d5fa 	srli	r4,r5,23
   88f44:	1822927a 	slli	r17,r3,9
   88f48:	8020d5fa 	srli	r16,r16,23
   88f4c:	3318b03a 	or	r12,r6,r12
   88f50:	280a927a 	slli	r5,r5,9
   88f54:	8922b03a 	or	r17,r17,r4
   88f58:	6018c03a 	cmpne	r12,r12,zero
   88f5c:	6420b03a 	or	r16,r12,r16
   88f60:	8880402c 	andhi	r2,r17,256
   88f64:	8160b03a 	or	r16,r16,r5
   88f68:	10000926 	beq	r2,zero,88f90 <__muldf3+0x4d0>
   88f6c:	8006d07a 	srli	r3,r16,1
   88f70:	8400004c 	andi	r16,r16,1
   88f74:	880497fa 	slli	r2,r17,31
   88f78:	80e0b03a 	or	r16,r16,r3
   88f7c:	d8c00017 	ldw	r3,0(sp)
   88f80:	8822d07a 	srli	r17,r17,1
   88f84:	80a0b03a 	or	r16,r16,r2
   88f88:	18c00044 	addi	r3,r3,1
   88f8c:	d8c00015 	stw	r3,0(sp)
   88f90:	d8c00017 	ldw	r3,0(sp)
   88f94:	1880ffc4 	addi	r2,r3,1023
   88f98:	0080450e 	bge	zero,r2,890b0 <__muldf3+0x5f0>
   88f9c:	80c001cc 	andi	r3,r16,7
   88fa0:	18000726 	beq	r3,zero,88fc0 <__muldf3+0x500>
   88fa4:	810003cc 	andi	r4,r16,15
   88fa8:	00c00104 	movi	r3,4
   88fac:	20c00426 	beq	r4,r3,88fc0 <__muldf3+0x500>
   88fb0:	80c7883a 	add	r3,r16,r3
   88fb4:	1c21803a 	cmpltu	r16,r3,r16
   88fb8:	8c23883a 	add	r17,r17,r16
   88fbc:	1821883a 	mov	r16,r3
   88fc0:	88c0402c 	andhi	r3,r17,256
   88fc4:	18000526 	beq	r3,zero,88fdc <__muldf3+0x51c>
   88fc8:	d8c00017 	ldw	r3,0(sp)
   88fcc:	00bfc034 	movhi	r2,65280
   88fd0:	10bfffc4 	addi	r2,r2,-1
   88fd4:	88a2703a 	and	r17,r17,r2
   88fd8:	18810004 	addi	r2,r3,1024
   88fdc:	00c1ff84 	movi	r3,2046
   88fe0:	18bf5e16 	blt	r3,r2,88d5c <__alt_data_end+0xfffd0aec>
   88fe4:	8806977a 	slli	r3,r17,29
   88fe8:	8020d0fa 	srli	r16,r16,3
   88fec:	8822927a 	slli	r17,r17,9
   88ff0:	1081ffcc 	andi	r2,r2,2047
   88ff4:	1c20b03a 	or	r16,r3,r16
   88ff8:	8822d33a 	srli	r17,r17,12
   88ffc:	902f883a 	mov	r23,r18
   89000:	003f0c06 	br	88c34 <__alt_data_end+0xfffd09c4>
   89004:	8880022c 	andhi	r2,r17,8
   89008:	10000a26 	beq	r2,zero,89034 <__muldf3+0x574>
   8900c:	9880022c 	andhi	r2,r19,8
   89010:	1000081e 	bne	r2,zero,89034 <__muldf3+0x574>
   89014:	00800434 	movhi	r2,16
   89018:	10bfffc4 	addi	r2,r2,-1
   8901c:	9c400234 	orhi	r17,r19,8
   89020:	88a2703a 	and	r17,r17,r2
   89024:	b02f883a 	mov	r23,r22
   89028:	2821883a 	mov	r16,r5
   8902c:	0081ffc4 	movi	r2,2047
   89030:	003f0006 	br	88c34 <__alt_data_end+0xfffd09c4>
   89034:	00800434 	movhi	r2,16
   89038:	10bfffc4 	addi	r2,r2,-1
   8903c:	8c400234 	orhi	r17,r17,8
   89040:	88a2703a 	and	r17,r17,r2
   89044:	0081ffc4 	movi	r2,2047
   89048:	003efa06 	br	88c34 <__alt_data_end+0xfffd09c4>
   8904c:	147ff604 	addi	r17,r2,-40
   89050:	9c62983a 	sll	r17,r19,r17
   89054:	0021883a 	mov	r16,zero
   89058:	003f1d06 	br	88cd0 <__alt_data_end+0xfffd0a60>
   8905c:	d9800315 	stw	r6,12(sp)
   89060:	d9c00115 	stw	r7,4(sp)
   89064:	0089b840 	call	89b84 <__clzsi2>
   89068:	10800804 	addi	r2,r2,32
   8906c:	d9c00117 	ldw	r7,4(sp)
   89070:	d9800317 	ldw	r6,12(sp)
   89074:	003f0d06 	br	88cac <__alt_data_end+0xfffd0a3c>
   89078:	14fff604 	addi	r19,r2,-40
   8907c:	34e6983a 	sll	r19,r6,r19
   89080:	000b883a 	mov	r5,zero
   89084:	003f3106 	br	88d4c <__alt_data_end+0xfffd0adc>
   89088:	3009883a 	mov	r4,r6
   8908c:	d9800315 	stw	r6,12(sp)
   89090:	da400115 	stw	r9,4(sp)
   89094:	da800215 	stw	r10,8(sp)
   89098:	0089b840 	call	89b84 <__clzsi2>
   8909c:	10800804 	addi	r2,r2,32
   890a0:	da800217 	ldw	r10,8(sp)
   890a4:	da400117 	ldw	r9,4(sp)
   890a8:	d9800317 	ldw	r6,12(sp)
   890ac:	003f1e06 	br	88d28 <__alt_data_end+0xfffd0ab8>
   890b0:	d8c00017 	ldw	r3,0(sp)
   890b4:	00bf0084 	movi	r2,-1022
   890b8:	10c5c83a 	sub	r2,r2,r3
   890bc:	00c00e04 	movi	r3,56
   890c0:	18bed816 	blt	r3,r2,88c24 <__alt_data_end+0xfffd09b4>
   890c4:	00c007c4 	movi	r3,31
   890c8:	18801916 	blt	r3,r2,89130 <__muldf3+0x670>
   890cc:	d8c00017 	ldw	r3,0(sp)
   890d0:	808ad83a 	srl	r5,r16,r2
   890d4:	8884d83a 	srl	r2,r17,r2
   890d8:	1d410784 	addi	r21,r3,1054
   890dc:	8d48983a 	sll	r4,r17,r21
   890e0:	8546983a 	sll	r3,r16,r21
   890e4:	2908b03a 	or	r4,r5,r4
   890e8:	1806c03a 	cmpne	r3,r3,zero
   890ec:	20c6b03a 	or	r3,r4,r3
   890f0:	190001cc 	andi	r4,r3,7
   890f4:	20000726 	beq	r4,zero,89114 <__muldf3+0x654>
   890f8:	194003cc 	andi	r5,r3,15
   890fc:	01000104 	movi	r4,4
   89100:	29000426 	beq	r5,r4,89114 <__muldf3+0x654>
   89104:	1909883a 	add	r4,r3,r4
   89108:	20c7803a 	cmpltu	r3,r4,r3
   8910c:	10c5883a 	add	r2,r2,r3
   89110:	2007883a 	mov	r3,r4
   89114:	1100202c 	andhi	r4,r2,128
   89118:	20001326 	beq	r4,zero,89168 <__muldf3+0x6a8>
   8911c:	902f883a 	mov	r23,r18
   89120:	00800044 	movi	r2,1
   89124:	0023883a 	mov	r17,zero
   89128:	0021883a 	mov	r16,zero
   8912c:	003ec106 	br	88c34 <__alt_data_end+0xfffd09c4>
   89130:	d9000017 	ldw	r4,0(sp)
   89134:	00fef884 	movi	r3,-1054
   89138:	1907c83a 	sub	r3,r3,r4
   8913c:	01000804 	movi	r4,32
   89140:	88c6d83a 	srl	r3,r17,r3
   89144:	11001026 	beq	r2,r4,89188 <__muldf3+0x6c8>
   89148:	d9000017 	ldw	r4,0(sp)
   8914c:	20810f84 	addi	r2,r4,1086
   89150:	8884983a 	sll	r2,r17,r2
   89154:	1404b03a 	or	r2,r2,r16
   89158:	1004c03a 	cmpne	r2,r2,zero
   8915c:	10c6b03a 	or	r3,r2,r3
   89160:	0005883a 	mov	r2,zero
   89164:	003fe206 	br	890f0 <__alt_data_end+0xfffd0e80>
   89168:	1020977a 	slli	r16,r2,29
   8916c:	1806d0fa 	srli	r3,r3,3
   89170:	1004927a 	slli	r2,r2,9
   89174:	902f883a 	mov	r23,r18
   89178:	80e0b03a 	or	r16,r16,r3
   8917c:	1022d33a 	srli	r17,r2,12
   89180:	0005883a 	mov	r2,zero
   89184:	003eab06 	br	88c34 <__alt_data_end+0xfffd09c4>
   89188:	0005883a 	mov	r2,zero
   8918c:	003ff106 	br	89154 <__alt_data_end+0xfffd0ee4>
   89190:	00800434 	movhi	r2,16
   89194:	10bfffc4 	addi	r2,r2,-1
   89198:	8c400234 	orhi	r17,r17,8
   8919c:	88a2703a 	and	r17,r17,r2
   891a0:	902f883a 	mov	r23,r18
   891a4:	0081ffc4 	movi	r2,2047
   891a8:	003ea206 	br	88c34 <__alt_data_end+0xfffd09c4>

000891ac <__subdf3>:
   891ac:	02000434 	movhi	r8,16
   891b0:	423fffc4 	addi	r8,r8,-1
   891b4:	defffb04 	addi	sp,sp,-20
   891b8:	2a06703a 	and	r3,r5,r8
   891bc:	3a10703a 	and	r8,r7,r8
   891c0:	3804d53a 	srli	r2,r7,20
   891c4:	dc800215 	stw	r18,8(sp)
   891c8:	dc400115 	stw	r17,4(sp)
   891cc:	2824d7fa 	srli	r18,r5,31
   891d0:	2822d53a 	srli	r17,r5,20
   891d4:	401090fa 	slli	r8,r8,3
   891d8:	180a90fa 	slli	r5,r3,3
   891dc:	3006d77a 	srli	r3,r6,29
   891e0:	2014d77a 	srli	r10,r4,29
   891e4:	dc000015 	stw	r16,0(sp)
   891e8:	40d0b03a 	or	r8,r8,r3
   891ec:	dfc00415 	stw	ra,16(sp)
   891f0:	dcc00315 	stw	r19,12(sp)
   891f4:	1081ffcc 	andi	r2,r2,2047
   891f8:	00c1ffc4 	movi	r3,2047
   891fc:	9013883a 	mov	r9,r18
   89200:	8c41ffcc 	andi	r17,r17,2047
   89204:	94803fcc 	andi	r18,r18,255
   89208:	2a8ab03a 	or	r5,r5,r10
   8920c:	202090fa 	slli	r16,r4,3
   89210:	380ed7fa 	srli	r7,r7,31
   89214:	300c90fa 	slli	r6,r6,3
   89218:	10c02e26 	beq	r2,r3,892d4 <__subdf3+0x128>
   8921c:	39c0005c 	xori	r7,r7,1
   89220:	8887c83a 	sub	r3,r17,r2
   89224:	91c03026 	beq	r18,r7,892e8 <__subdf3+0x13c>
   89228:	00c0a40e 	bge	zero,r3,894bc <__subdf3+0x310>
   8922c:	10004c1e 	bne	r2,zero,89360 <__subdf3+0x1b4>
   89230:	4184b03a 	or	r2,r8,r6
   89234:	10008f1e 	bne	r2,zero,89474 <__subdf3+0x2c8>
   89238:	808001cc 	andi	r2,r16,7
   8923c:	10007d26 	beq	r2,zero,89434 <__subdf3+0x288>
   89240:	80c003cc 	andi	r3,r16,15
   89244:	00800104 	movi	r2,4
   89248:	18807a26 	beq	r3,r2,89434 <__subdf3+0x288>
   8924c:	80c00104 	addi	r3,r16,4
   89250:	1c21803a 	cmpltu	r16,r3,r16
   89254:	2c0b883a 	add	r5,r5,r16
   89258:	2880202c 	andhi	r2,r5,128
   8925c:	9240004c 	andi	r9,r18,1
   89260:	1821883a 	mov	r16,r3
   89264:	10007626 	beq	r2,zero,89440 <__subdf3+0x294>
   89268:	8c400044 	addi	r17,r17,1
   8926c:	0081ffc4 	movi	r2,2047
   89270:	8880b226 	beq	r17,r2,8953c <__subdf3+0x390>
   89274:	00bfe034 	movhi	r2,65408
   89278:	10bfffc4 	addi	r2,r2,-1
   8927c:	288a703a 	and	r5,r5,r2
   89280:	2804977a 	slli	r2,r5,29
   89284:	280a927a 	slli	r5,r5,9
   89288:	8020d0fa 	srli	r16,r16,3
   8928c:	280ad33a 	srli	r5,r5,12
   89290:	1404b03a 	or	r2,r2,r16
   89294:	8c41ffcc 	andi	r17,r17,2047
   89298:	8822953a 	slli	r17,r17,20
   8929c:	4a403fcc 	andi	r9,r9,255
   892a0:	481297fa 	slli	r9,r9,31
   892a4:	00c00434 	movhi	r3,16
   892a8:	18ffffc4 	addi	r3,r3,-1
   892ac:	28c6703a 	and	r3,r5,r3
   892b0:	1c46b03a 	or	r3,r3,r17
   892b4:	1a46b03a 	or	r3,r3,r9
   892b8:	dfc00417 	ldw	ra,16(sp)
   892bc:	dcc00317 	ldw	r19,12(sp)
   892c0:	dc800217 	ldw	r18,8(sp)
   892c4:	dc400117 	ldw	r17,4(sp)
   892c8:	dc000017 	ldw	r16,0(sp)
   892cc:	dec00504 	addi	sp,sp,20
   892d0:	f800283a 	ret
   892d4:	4186b03a 	or	r3,r8,r6
   892d8:	183fd026 	beq	r3,zero,8921c <__alt_data_end+0xfffd0fac>
   892dc:	39c03fcc 	andi	r7,r7,255
   892e0:	8887c83a 	sub	r3,r17,r2
   892e4:	91ffd01e 	bne	r18,r7,89228 <__alt_data_end+0xfffd0fb8>
   892e8:	00c09b0e 	bge	zero,r3,89558 <__subdf3+0x3ac>
   892ec:	10006926 	beq	r2,zero,89494 <__subdf3+0x2e8>
   892f0:	0081ffc4 	movi	r2,2047
   892f4:	88bfd026 	beq	r17,r2,89238 <__alt_data_end+0xfffd0fc8>
   892f8:	42002034 	orhi	r8,r8,128
   892fc:	00800e04 	movi	r2,56
   89300:	10c0e20e 	bge	r2,r3,8968c <__subdf3+0x4e0>
   89304:	418cb03a 	or	r6,r8,r6
   89308:	300cc03a 	cmpne	r6,r6,zero
   8930c:	0007883a 	mov	r3,zero
   89310:	340d883a 	add	r6,r6,r16
   89314:	3421803a 	cmpltu	r16,r6,r16
   89318:	194b883a 	add	r5,r3,r5
   8931c:	2c0b883a 	add	r5,r5,r16
   89320:	3021883a 	mov	r16,r6
   89324:	2880202c 	andhi	r2,r5,128
   89328:	103fc326 	beq	r2,zero,89238 <__alt_data_end+0xfffd0fc8>
   8932c:	8c400044 	addi	r17,r17,1
   89330:	0081ffc4 	movi	r2,2047
   89334:	88811026 	beq	r17,r2,89778 <__subdf3+0x5cc>
   89338:	00bfe034 	movhi	r2,65408
   8933c:	10bfffc4 	addi	r2,r2,-1
   89340:	288a703a 	and	r5,r5,r2
   89344:	8006d07a 	srli	r3,r16,1
   89348:	280497fa 	slli	r2,r5,31
   8934c:	8400004c 	andi	r16,r16,1
   89350:	80e0b03a 	or	r16,r16,r3
   89354:	80a0b03a 	or	r16,r16,r2
   89358:	280ad07a 	srli	r5,r5,1
   8935c:	003fb606 	br	89238 <__alt_data_end+0xfffd0fc8>
   89360:	0081ffc4 	movi	r2,2047
   89364:	88bfb426 	beq	r17,r2,89238 <__alt_data_end+0xfffd0fc8>
   89368:	42002034 	orhi	r8,r8,128
   8936c:	00800e04 	movi	r2,56
   89370:	10c07516 	blt	r2,r3,89548 <__subdf3+0x39c>
   89374:	008007c4 	movi	r2,31
   89378:	10c09816 	blt	r2,r3,895dc <__subdf3+0x430>
   8937c:	00800804 	movi	r2,32
   89380:	10c5c83a 	sub	r2,r2,r3
   89384:	30c8d83a 	srl	r4,r6,r3
   89388:	408e983a 	sll	r7,r8,r2
   8938c:	3084983a 	sll	r2,r6,r2
   89390:	40c6d83a 	srl	r3,r8,r3
   89394:	3908b03a 	or	r4,r7,r4
   89398:	1004c03a 	cmpne	r2,r2,zero
   8939c:	208cb03a 	or	r6,r4,r2
   893a0:	818dc83a 	sub	r6,r16,r6
   893a4:	81a1803a 	cmpltu	r16,r16,r6
   893a8:	28cbc83a 	sub	r5,r5,r3
   893ac:	2c0bc83a 	sub	r5,r5,r16
   893b0:	3021883a 	mov	r16,r6
   893b4:	2880202c 	andhi	r2,r5,128
   893b8:	103f9f26 	beq	r2,zero,89238 <__alt_data_end+0xfffd0fc8>
   893bc:	04c02034 	movhi	r19,128
   893c0:	9cffffc4 	addi	r19,r19,-1
   893c4:	2ce6703a 	and	r19,r5,r19
   893c8:	98004d26 	beq	r19,zero,89500 <__subdf3+0x354>
   893cc:	9809883a 	mov	r4,r19
   893d0:	0089b840 	call	89b84 <__clzsi2>
   893d4:	10fffe04 	addi	r3,r2,-8
   893d8:	010007c4 	movi	r4,31
   893dc:	20c04e16 	blt	r4,r3,89518 <__subdf3+0x36c>
   893e0:	01000a04 	movi	r4,40
   893e4:	2085c83a 	sub	r2,r4,r2
   893e8:	8084d83a 	srl	r2,r16,r2
   893ec:	98e6983a 	sll	r19,r19,r3
   893f0:	80e0983a 	sll	r16,r16,r3
   893f4:	14c4b03a 	or	r2,r2,r19
   893f8:	1c404b16 	blt	r3,r17,89528 <__subdf3+0x37c>
   893fc:	1c63c83a 	sub	r17,r3,r17
   89400:	89400044 	addi	r5,r17,1
   89404:	00c007c4 	movi	r3,31
   89408:	19406716 	blt	r3,r5,895a8 <__subdf3+0x3fc>
   8940c:	1c47c83a 	sub	r3,r3,r17
   89410:	8148d83a 	srl	r4,r16,r5
   89414:	80e0983a 	sll	r16,r16,r3
   89418:	10c6983a 	sll	r3,r2,r3
   8941c:	114ad83a 	srl	r5,r2,r5
   89420:	8004c03a 	cmpne	r2,r16,zero
   89424:	20e0b03a 	or	r16,r4,r3
   89428:	80a0b03a 	or	r16,r16,r2
   8942c:	0023883a 	mov	r17,zero
   89430:	003f8106 	br	89238 <__alt_data_end+0xfffd0fc8>
   89434:	2880202c 	andhi	r2,r5,128
   89438:	9240004c 	andi	r9,r18,1
   8943c:	103f8a1e 	bne	r2,zero,89268 <__alt_data_end+0xfffd0ff8>
   89440:	2804977a 	slli	r2,r5,29
   89444:	8020d0fa 	srli	r16,r16,3
   89448:	00c1ffc4 	movi	r3,2047
   8944c:	280ad0fa 	srli	r5,r5,3
   89450:	1404b03a 	or	r2,r2,r16
   89454:	88c0031e 	bne	r17,r3,89464 <__subdf3+0x2b8>
   89458:	1146b03a 	or	r3,r2,r5
   8945c:	18003726 	beq	r3,zero,8953c <__subdf3+0x390>
   89460:	29400234 	orhi	r5,r5,8
   89464:	00c00434 	movhi	r3,16
   89468:	18ffffc4 	addi	r3,r3,-1
   8946c:	28ca703a 	and	r5,r5,r3
   89470:	003f8806 	br	89294 <__alt_data_end+0xfffd1024>
   89474:	18ffffc4 	addi	r3,r3,-1
   89478:	1800481e 	bne	r3,zero,8959c <__subdf3+0x3f0>
   8947c:	818dc83a 	sub	r6,r16,r6
   89480:	81a1803a 	cmpltu	r16,r16,r6
   89484:	2a0bc83a 	sub	r5,r5,r8
   89488:	2c0bc83a 	sub	r5,r5,r16
   8948c:	3021883a 	mov	r16,r6
   89490:	003fc806 	br	893b4 <__alt_data_end+0xfffd1144>
   89494:	4184b03a 	or	r2,r8,r6
   89498:	103f6726 	beq	r2,zero,89238 <__alt_data_end+0xfffd0fc8>
   8949c:	18ffffc4 	addi	r3,r3,-1
   894a0:	1800931e 	bne	r3,zero,896f0 <__subdf3+0x544>
   894a4:	340d883a 	add	r6,r6,r16
   894a8:	3421803a 	cmpltu	r16,r6,r16
   894ac:	414b883a 	add	r5,r8,r5
   894b0:	2c0b883a 	add	r5,r5,r16
   894b4:	3021883a 	mov	r16,r6
   894b8:	003f9a06 	br	89324 <__alt_data_end+0xfffd10b4>
   894bc:	1800531e 	bne	r3,zero,8960c <__subdf3+0x460>
   894c0:	88800044 	addi	r2,r17,1
   894c4:	1081ffcc 	andi	r2,r2,2047
   894c8:	00c00044 	movi	r3,1
   894cc:	1880a00e 	bge	r3,r2,89750 <__subdf3+0x5a4>
   894d0:	8185c83a 	sub	r2,r16,r6
   894d4:	8087803a 	cmpltu	r3,r16,r2
   894d8:	2a27c83a 	sub	r19,r5,r8
   894dc:	98e7c83a 	sub	r19,r19,r3
   894e0:	98c0202c 	andhi	r3,r19,128
   894e4:	18006226 	beq	r3,zero,89670 <__subdf3+0x4c4>
   894e8:	3421c83a 	sub	r16,r6,r16
   894ec:	414bc83a 	sub	r5,r8,r5
   894f0:	340d803a 	cmpltu	r6,r6,r16
   894f4:	29a7c83a 	sub	r19,r5,r6
   894f8:	3825883a 	mov	r18,r7
   894fc:	983fb31e 	bne	r19,zero,893cc <__alt_data_end+0xfffd115c>
   89500:	8009883a 	mov	r4,r16
   89504:	0089b840 	call	89b84 <__clzsi2>
   89508:	10800804 	addi	r2,r2,32
   8950c:	10fffe04 	addi	r3,r2,-8
   89510:	010007c4 	movi	r4,31
   89514:	20ffb20e 	bge	r4,r3,893e0 <__alt_data_end+0xfffd1170>
   89518:	10bff604 	addi	r2,r2,-40
   8951c:	8084983a 	sll	r2,r16,r2
   89520:	0021883a 	mov	r16,zero
   89524:	1c7fb50e 	bge	r3,r17,893fc <__alt_data_end+0xfffd118c>
   89528:	017fe034 	movhi	r5,65408
   8952c:	297fffc4 	addi	r5,r5,-1
   89530:	88e3c83a 	sub	r17,r17,r3
   89534:	114a703a 	and	r5,r2,r5
   89538:	003f3f06 	br	89238 <__alt_data_end+0xfffd0fc8>
   8953c:	000b883a 	mov	r5,zero
   89540:	0005883a 	mov	r2,zero
   89544:	003f5306 	br	89294 <__alt_data_end+0xfffd1024>
   89548:	418cb03a 	or	r6,r8,r6
   8954c:	300cc03a 	cmpne	r6,r6,zero
   89550:	0007883a 	mov	r3,zero
   89554:	003f9206 	br	893a0 <__alt_data_end+0xfffd1130>
   89558:	1800961e 	bne	r3,zero,897b4 <__subdf3+0x608>
   8955c:	88800044 	addi	r2,r17,1
   89560:	1101ffcc 	andi	r4,r2,2047
   89564:	00c00044 	movi	r3,1
   89568:	1900680e 	bge	r3,r4,8970c <__subdf3+0x560>
   8956c:	00c1ffc4 	movi	r3,2047
   89570:	10c0b626 	beq	r2,r3,8984c <__subdf3+0x6a0>
   89574:	340d883a 	add	r6,r6,r16
   89578:	3421803a 	cmpltu	r16,r6,r16
   8957c:	414b883a 	add	r5,r8,r5
   89580:	2c0b883a 	add	r5,r5,r16
   89584:	282097fa 	slli	r16,r5,31
   89588:	300cd07a 	srli	r6,r6,1
   8958c:	280ad07a 	srli	r5,r5,1
   89590:	1023883a 	mov	r17,r2
   89594:	81a0b03a 	or	r16,r16,r6
   89598:	003f2706 	br	89238 <__alt_data_end+0xfffd0fc8>
   8959c:	0081ffc4 	movi	r2,2047
   895a0:	88bf721e 	bne	r17,r2,8936c <__alt_data_end+0xfffd10fc>
   895a4:	003f2406 	br	89238 <__alt_data_end+0xfffd0fc8>
   895a8:	893ff844 	addi	r4,r17,-31
   895ac:	00c00804 	movi	r3,32
   895b0:	1108d83a 	srl	r4,r2,r4
   895b4:	28c05126 	beq	r5,r3,896fc <__subdf3+0x550>
   895b8:	00c00fc4 	movi	r3,63
   895bc:	1c63c83a 	sub	r17,r3,r17
   895c0:	1444983a 	sll	r2,r2,r17
   895c4:	1420b03a 	or	r16,r2,r16
   895c8:	8020c03a 	cmpne	r16,r16,zero
   895cc:	8120b03a 	or	r16,r16,r4
   895d0:	000b883a 	mov	r5,zero
   895d4:	0023883a 	mov	r17,zero
   895d8:	003f1706 	br	89238 <__alt_data_end+0xfffd0fc8>
   895dc:	18bff804 	addi	r2,r3,-32
   895e0:	01000804 	movi	r4,32
   895e4:	4084d83a 	srl	r2,r8,r2
   895e8:	19004626 	beq	r3,r4,89704 <__subdf3+0x558>
   895ec:	01001004 	movi	r4,64
   895f0:	20c7c83a 	sub	r3,r4,r3
   895f4:	40d0983a 	sll	r8,r8,r3
   895f8:	418cb03a 	or	r6,r8,r6
   895fc:	300cc03a 	cmpne	r6,r6,zero
   89600:	308cb03a 	or	r6,r6,r2
   89604:	0007883a 	mov	r3,zero
   89608:	003f6506 	br	893a0 <__alt_data_end+0xfffd1130>
   8960c:	88002b26 	beq	r17,zero,896bc <__subdf3+0x510>
   89610:	0101ffc4 	movi	r4,2047
   89614:	11002f26 	beq	r2,r4,896d4 <__subdf3+0x528>
   89618:	00c7c83a 	sub	r3,zero,r3
   8961c:	29402034 	orhi	r5,r5,128
   89620:	01000e04 	movi	r4,56
   89624:	20c08516 	blt	r4,r3,8983c <__subdf3+0x690>
   89628:	010007c4 	movi	r4,31
   8962c:	20c0cd16 	blt	r4,r3,89964 <__subdf3+0x7b8>
   89630:	01000804 	movi	r4,32
   89634:	20c9c83a 	sub	r4,r4,r3
   89638:	2914983a 	sll	r10,r5,r4
   8963c:	80d2d83a 	srl	r9,r16,r3
   89640:	8108983a 	sll	r4,r16,r4
   89644:	28cad83a 	srl	r5,r5,r3
   89648:	5252b03a 	or	r9,r10,r9
   8964c:	2006c03a 	cmpne	r3,r4,zero
   89650:	48e0b03a 	or	r16,r9,r3
   89654:	3421c83a 	sub	r16,r6,r16
   89658:	414bc83a 	sub	r5,r8,r5
   8965c:	340d803a 	cmpltu	r6,r6,r16
   89660:	298bc83a 	sub	r5,r5,r6
   89664:	1023883a 	mov	r17,r2
   89668:	3825883a 	mov	r18,r7
   8966c:	003f5106 	br	893b4 <__alt_data_end+0xfffd1144>
   89670:	9886b03a 	or	r3,r19,r2
   89674:	18001c1e 	bne	r3,zero,896e8 <__subdf3+0x53c>
   89678:	0013883a 	mov	r9,zero
   8967c:	000b883a 	mov	r5,zero
   89680:	0021883a 	mov	r16,zero
   89684:	0023883a 	mov	r17,zero
   89688:	003f6d06 	br	89440 <__alt_data_end+0xfffd11d0>
   8968c:	008007c4 	movi	r2,31
   89690:	10c03c16 	blt	r2,r3,89784 <__subdf3+0x5d8>
   89694:	00800804 	movi	r2,32
   89698:	10c5c83a 	sub	r2,r2,r3
   8969c:	30c8d83a 	srl	r4,r6,r3
   896a0:	408e983a 	sll	r7,r8,r2
   896a4:	3084983a 	sll	r2,r6,r2
   896a8:	40c6d83a 	srl	r3,r8,r3
   896ac:	3908b03a 	or	r4,r7,r4
   896b0:	1004c03a 	cmpne	r2,r2,zero
   896b4:	208cb03a 	or	r6,r4,r2
   896b8:	003f1506 	br	89310 <__alt_data_end+0xfffd10a0>
   896bc:	2c08b03a 	or	r4,r5,r16
   896c0:	20000426 	beq	r4,zero,896d4 <__subdf3+0x528>
   896c4:	00c6303a 	nor	r3,zero,r3
   896c8:	183fe226 	beq	r3,zero,89654 <__alt_data_end+0xfffd13e4>
   896cc:	0101ffc4 	movi	r4,2047
   896d0:	113fd31e 	bne	r2,r4,89620 <__alt_data_end+0xfffd13b0>
   896d4:	400b883a 	mov	r5,r8
   896d8:	3021883a 	mov	r16,r6
   896dc:	1023883a 	mov	r17,r2
   896e0:	3825883a 	mov	r18,r7
   896e4:	003ed406 	br	89238 <__alt_data_end+0xfffd0fc8>
   896e8:	1021883a 	mov	r16,r2
   896ec:	003f3606 	br	893c8 <__alt_data_end+0xfffd1158>
   896f0:	0081ffc4 	movi	r2,2047
   896f4:	88bf011e 	bne	r17,r2,892fc <__alt_data_end+0xfffd108c>
   896f8:	003ecf06 	br	89238 <__alt_data_end+0xfffd0fc8>
   896fc:	0005883a 	mov	r2,zero
   89700:	003fb006 	br	895c4 <__alt_data_end+0xfffd1354>
   89704:	0011883a 	mov	r8,zero
   89708:	003fbb06 	br	895f8 <__alt_data_end+0xfffd1388>
   8970c:	2c04b03a 	or	r2,r5,r16
   89710:	88007f1e 	bne	r17,zero,89910 <__subdf3+0x764>
   89714:	1000a926 	beq	r2,zero,899bc <__subdf3+0x810>
   89718:	4184b03a 	or	r2,r8,r6
   8971c:	103ec626 	beq	r2,zero,89238 <__alt_data_end+0xfffd0fc8>
   89720:	340d883a 	add	r6,r6,r16
   89724:	414b883a 	add	r5,r8,r5
   89728:	3421803a 	cmpltu	r16,r6,r16
   8972c:	2c0b883a 	add	r5,r5,r16
   89730:	2880202c 	andhi	r2,r5,128
   89734:	1000bb26 	beq	r2,zero,89a24 <__subdf3+0x878>
   89738:	00bfe034 	movhi	r2,65408
   8973c:	10bfffc4 	addi	r2,r2,-1
   89740:	288a703a 	and	r5,r5,r2
   89744:	3021883a 	mov	r16,r6
   89748:	1823883a 	mov	r17,r3
   8974c:	003eba06 	br	89238 <__alt_data_end+0xfffd0fc8>
   89750:	2c04b03a 	or	r2,r5,r16
   89754:	8800311e 	bne	r17,zero,8981c <__subdf3+0x670>
   89758:	1000451e 	bne	r2,zero,89870 <__subdf3+0x6c4>
   8975c:	4184b03a 	or	r2,r8,r6
   89760:	10000426 	beq	r2,zero,89774 <__subdf3+0x5c8>
   89764:	400b883a 	mov	r5,r8
   89768:	3021883a 	mov	r16,r6
   8976c:	3825883a 	mov	r18,r7
   89770:	003eb106 	br	89238 <__alt_data_end+0xfffd0fc8>
   89774:	0013883a 	mov	r9,zero
   89778:	000b883a 	mov	r5,zero
   8977c:	0021883a 	mov	r16,zero
   89780:	003f2f06 	br	89440 <__alt_data_end+0xfffd11d0>
   89784:	18bff804 	addi	r2,r3,-32
   89788:	01000804 	movi	r4,32
   8978c:	4084d83a 	srl	r2,r8,r2
   89790:	19007226 	beq	r3,r4,8995c <__subdf3+0x7b0>
   89794:	01001004 	movi	r4,64
   89798:	20c7c83a 	sub	r3,r4,r3
   8979c:	40d0983a 	sll	r8,r8,r3
   897a0:	418cb03a 	or	r6,r8,r6
   897a4:	300cc03a 	cmpne	r6,r6,zero
   897a8:	308cb03a 	or	r6,r6,r2
   897ac:	0007883a 	mov	r3,zero
   897b0:	003ed706 	br	89310 <__alt_data_end+0xfffd10a0>
   897b4:	8800291e 	bne	r17,zero,8985c <__subdf3+0x6b0>
   897b8:	2c08b03a 	or	r4,r5,r16
   897bc:	20005026 	beq	r4,zero,89900 <__subdf3+0x754>
   897c0:	00c6303a 	nor	r3,zero,r3
   897c4:	18000f26 	beq	r3,zero,89804 <__subdf3+0x658>
   897c8:	0101ffc4 	movi	r4,2047
   897cc:	11004c26 	beq	r2,r4,89900 <__subdf3+0x754>
   897d0:	01000e04 	movi	r4,56
   897d4:	20c07516 	blt	r4,r3,899ac <__subdf3+0x800>
   897d8:	010007c4 	movi	r4,31
   897dc:	20c08316 	blt	r4,r3,899ec <__subdf3+0x840>
   897e0:	01000804 	movi	r4,32
   897e4:	20c9c83a 	sub	r4,r4,r3
   897e8:	2914983a 	sll	r10,r5,r4
   897ec:	80ced83a 	srl	r7,r16,r3
   897f0:	8108983a 	sll	r4,r16,r4
   897f4:	28cad83a 	srl	r5,r5,r3
   897f8:	51ceb03a 	or	r7,r10,r7
   897fc:	2006c03a 	cmpne	r3,r4,zero
   89800:	38e0b03a 	or	r16,r7,r3
   89804:	81a1883a 	add	r16,r16,r6
   89808:	2a0b883a 	add	r5,r5,r8
   8980c:	818d803a 	cmpltu	r6,r16,r6
   89810:	298b883a 	add	r5,r5,r6
   89814:	1023883a 	mov	r17,r2
   89818:	003ec206 	br	89324 <__alt_data_end+0xfffd10b4>
   8981c:	1000221e 	bne	r2,zero,898a8 <__subdf3+0x6fc>
   89820:	4184b03a 	or	r2,r8,r6
   89824:	10005b26 	beq	r2,zero,89994 <__subdf3+0x7e8>
   89828:	400b883a 	mov	r5,r8
   8982c:	3021883a 	mov	r16,r6
   89830:	3825883a 	mov	r18,r7
   89834:	0441ffc4 	movi	r17,2047
   89838:	003e7f06 	br	89238 <__alt_data_end+0xfffd0fc8>
   8983c:	2c20b03a 	or	r16,r5,r16
   89840:	8020c03a 	cmpne	r16,r16,zero
   89844:	000b883a 	mov	r5,zero
   89848:	003f8206 	br	89654 <__alt_data_end+0xfffd13e4>
   8984c:	1023883a 	mov	r17,r2
   89850:	000b883a 	mov	r5,zero
   89854:	0021883a 	mov	r16,zero
   89858:	003ef906 	br	89440 <__alt_data_end+0xfffd11d0>
   8985c:	0101ffc4 	movi	r4,2047
   89860:	11002726 	beq	r2,r4,89900 <__subdf3+0x754>
   89864:	00c7c83a 	sub	r3,zero,r3
   89868:	29402034 	orhi	r5,r5,128
   8986c:	003fd806 	br	897d0 <__alt_data_end+0xfffd1560>
   89870:	4184b03a 	or	r2,r8,r6
   89874:	103e7026 	beq	r2,zero,89238 <__alt_data_end+0xfffd0fc8>
   89878:	8185c83a 	sub	r2,r16,r6
   8987c:	8089803a 	cmpltu	r4,r16,r2
   89880:	2a07c83a 	sub	r3,r5,r8
   89884:	1907c83a 	sub	r3,r3,r4
   89888:	1900202c 	andhi	r4,r3,128
   8988c:	20005226 	beq	r4,zero,899d8 <__subdf3+0x82c>
   89890:	3421c83a 	sub	r16,r6,r16
   89894:	414bc83a 	sub	r5,r8,r5
   89898:	340d803a 	cmpltu	r6,r6,r16
   8989c:	298bc83a 	sub	r5,r5,r6
   898a0:	3825883a 	mov	r18,r7
   898a4:	003e6406 	br	89238 <__alt_data_end+0xfffd0fc8>
   898a8:	4184b03a 	or	r2,r8,r6
   898ac:	10002926 	beq	r2,zero,89954 <__subdf3+0x7a8>
   898b0:	2804d0fa 	srli	r2,r5,3
   898b4:	8020d0fa 	srli	r16,r16,3
   898b8:	280a977a 	slli	r5,r5,29
   898bc:	10c0022c 	andhi	r3,r2,8
   898c0:	2c20b03a 	or	r16,r5,r16
   898c4:	18000826 	beq	r3,zero,898e8 <__subdf3+0x73c>
   898c8:	4006d0fa 	srli	r3,r8,3
   898cc:	1900022c 	andhi	r4,r3,8
   898d0:	2000051e 	bne	r4,zero,898e8 <__subdf3+0x73c>
   898d4:	300cd0fa 	srli	r6,r6,3
   898d8:	4010977a 	slli	r8,r8,29
   898dc:	1805883a 	mov	r2,r3
   898e0:	3825883a 	mov	r18,r7
   898e4:	41a0b03a 	or	r16,r8,r6
   898e8:	800ad77a 	srli	r5,r16,29
   898ec:	100490fa 	slli	r2,r2,3
   898f0:	802090fa 	slli	r16,r16,3
   898f4:	0441ffc4 	movi	r17,2047
   898f8:	288ab03a 	or	r5,r5,r2
   898fc:	003e4e06 	br	89238 <__alt_data_end+0xfffd0fc8>
   89900:	400b883a 	mov	r5,r8
   89904:	3021883a 	mov	r16,r6
   89908:	1023883a 	mov	r17,r2
   8990c:	003e4a06 	br	89238 <__alt_data_end+0xfffd0fc8>
   89910:	10002d26 	beq	r2,zero,899c8 <__subdf3+0x81c>
   89914:	4184b03a 	or	r2,r8,r6
   89918:	10000e26 	beq	r2,zero,89954 <__subdf3+0x7a8>
   8991c:	2804d0fa 	srli	r2,r5,3
   89920:	8020d0fa 	srli	r16,r16,3
   89924:	280a977a 	slli	r5,r5,29
   89928:	10c0022c 	andhi	r3,r2,8
   8992c:	2c20b03a 	or	r16,r5,r16
   89930:	183fed26 	beq	r3,zero,898e8 <__alt_data_end+0xfffd1678>
   89934:	4006d0fa 	srli	r3,r8,3
   89938:	1900022c 	andhi	r4,r3,8
   8993c:	203fea1e 	bne	r4,zero,898e8 <__alt_data_end+0xfffd1678>
   89940:	300cd0fa 	srli	r6,r6,3
   89944:	4010977a 	slli	r8,r8,29
   89948:	1805883a 	mov	r2,r3
   8994c:	41a0b03a 	or	r16,r8,r6
   89950:	003fe506 	br	898e8 <__alt_data_end+0xfffd1678>
   89954:	0441ffc4 	movi	r17,2047
   89958:	003e3706 	br	89238 <__alt_data_end+0xfffd0fc8>
   8995c:	0011883a 	mov	r8,zero
   89960:	003f8f06 	br	897a0 <__alt_data_end+0xfffd1530>
   89964:	193ff804 	addi	r4,r3,-32
   89968:	02400804 	movi	r9,32
   8996c:	2908d83a 	srl	r4,r5,r4
   89970:	1a402a26 	beq	r3,r9,89a1c <__subdf3+0x870>
   89974:	02401004 	movi	r9,64
   89978:	48c7c83a 	sub	r3,r9,r3
   8997c:	28ca983a 	sll	r5,r5,r3
   89980:	2c20b03a 	or	r16,r5,r16
   89984:	8020c03a 	cmpne	r16,r16,zero
   89988:	8120b03a 	or	r16,r16,r4
   8998c:	000b883a 	mov	r5,zero
   89990:	003f3006 	br	89654 <__alt_data_end+0xfffd13e4>
   89994:	0013883a 	mov	r9,zero
   89998:	01402034 	movhi	r5,128
   8999c:	297fffc4 	addi	r5,r5,-1
   899a0:	043ffe04 	movi	r16,-8
   899a4:	0441ffc4 	movi	r17,2047
   899a8:	003ea506 	br	89440 <__alt_data_end+0xfffd11d0>
   899ac:	2c20b03a 	or	r16,r5,r16
   899b0:	8020c03a 	cmpne	r16,r16,zero
   899b4:	000b883a 	mov	r5,zero
   899b8:	003f9206 	br	89804 <__alt_data_end+0xfffd1594>
   899bc:	400b883a 	mov	r5,r8
   899c0:	3021883a 	mov	r16,r6
   899c4:	003e1c06 	br	89238 <__alt_data_end+0xfffd0fc8>
   899c8:	400b883a 	mov	r5,r8
   899cc:	3021883a 	mov	r16,r6
   899d0:	0441ffc4 	movi	r17,2047
   899d4:	003e1806 	br	89238 <__alt_data_end+0xfffd0fc8>
   899d8:	1888b03a 	or	r4,r3,r2
   899dc:	203f6526 	beq	r4,zero,89774 <__alt_data_end+0xfffd1504>
   899e0:	180b883a 	mov	r5,r3
   899e4:	1021883a 	mov	r16,r2
   899e8:	003e1306 	br	89238 <__alt_data_end+0xfffd0fc8>
   899ec:	193ff804 	addi	r4,r3,-32
   899f0:	01c00804 	movi	r7,32
   899f4:	2908d83a 	srl	r4,r5,r4
   899f8:	19c00c26 	beq	r3,r7,89a2c <__subdf3+0x880>
   899fc:	01c01004 	movi	r7,64
   89a00:	38c7c83a 	sub	r3,r7,r3
   89a04:	28ca983a 	sll	r5,r5,r3
   89a08:	2c20b03a 	or	r16,r5,r16
   89a0c:	8020c03a 	cmpne	r16,r16,zero
   89a10:	8120b03a 	or	r16,r16,r4
   89a14:	000b883a 	mov	r5,zero
   89a18:	003f7a06 	br	89804 <__alt_data_end+0xfffd1594>
   89a1c:	000b883a 	mov	r5,zero
   89a20:	003fd706 	br	89980 <__alt_data_end+0xfffd1710>
   89a24:	3021883a 	mov	r16,r6
   89a28:	003e0306 	br	89238 <__alt_data_end+0xfffd0fc8>
   89a2c:	000b883a 	mov	r5,zero
   89a30:	003ff506 	br	89a08 <__alt_data_end+0xfffd1798>

00089a34 <__fixdfsi>:
   89a34:	2806d53a 	srli	r3,r5,20
   89a38:	00800434 	movhi	r2,16
   89a3c:	10bfffc4 	addi	r2,r2,-1
   89a40:	0180ff84 	movi	r6,1022
   89a44:	18c1ffcc 	andi	r3,r3,2047
   89a48:	2884703a 	and	r2,r5,r2
   89a4c:	280ad7fa 	srli	r5,r5,31
   89a50:	30c0120e 	bge	r6,r3,89a9c <__fixdfsi+0x68>
   89a54:	01810744 	movi	r6,1053
   89a58:	30c00c16 	blt	r6,r3,89a8c <__fixdfsi+0x58>
   89a5c:	01810cc4 	movi	r6,1075
   89a60:	30cdc83a 	sub	r6,r6,r3
   89a64:	01c007c4 	movi	r7,31
   89a68:	10800434 	orhi	r2,r2,16
   89a6c:	39800d16 	blt	r7,r6,89aa4 <__fixdfsi+0x70>
   89a70:	18fefb44 	addi	r3,r3,-1043
   89a74:	2188d83a 	srl	r4,r4,r6
   89a78:	10c4983a 	sll	r2,r2,r3
   89a7c:	2084b03a 	or	r2,r4,r2
   89a80:	28000726 	beq	r5,zero,89aa0 <__fixdfsi+0x6c>
   89a84:	0085c83a 	sub	r2,zero,r2
   89a88:	f800283a 	ret
   89a8c:	00a00034 	movhi	r2,32768
   89a90:	10bfffc4 	addi	r2,r2,-1
   89a94:	2885883a 	add	r2,r5,r2
   89a98:	f800283a 	ret
   89a9c:	0005883a 	mov	r2,zero
   89aa0:	f800283a 	ret
   89aa4:	010104c4 	movi	r4,1043
   89aa8:	20c7c83a 	sub	r3,r4,r3
   89aac:	10c4d83a 	srl	r2,r2,r3
   89ab0:	003ff306 	br	89a80 <__alt_data_end+0xfffd1810>

00089ab4 <__floatsidf>:
   89ab4:	defffd04 	addi	sp,sp,-12
   89ab8:	dc000015 	stw	r16,0(sp)
   89abc:	dfc00215 	stw	ra,8(sp)
   89ac0:	dc400115 	stw	r17,4(sp)
   89ac4:	2021883a 	mov	r16,r4
   89ac8:	20002926 	beq	r4,zero,89b70 <__floatsidf+0xbc>
   89acc:	2022d7fa 	srli	r17,r4,31
   89ad0:	88000126 	beq	r17,zero,89ad8 <__floatsidf+0x24>
   89ad4:	0121c83a 	sub	r16,zero,r4
   89ad8:	8009883a 	mov	r4,r16
   89adc:	0089b840 	call	89b84 <__clzsi2>
   89ae0:	01810784 	movi	r6,1054
   89ae4:	00c00284 	movi	r3,10
   89ae8:	308dc83a 	sub	r6,r6,r2
   89aec:	1880150e 	bge	r3,r2,89b44 <__floatsidf+0x90>
   89af0:	113ffd44 	addi	r4,r2,-11
   89af4:	8108983a 	sll	r4,r16,r4
   89af8:	00800434 	movhi	r2,16
   89afc:	10bfffc4 	addi	r2,r2,-1
   89b00:	3181ffcc 	andi	r6,r6,2047
   89b04:	2088703a 	and	r4,r4,r2
   89b08:	880b883a 	mov	r5,r17
   89b0c:	0005883a 	mov	r2,zero
   89b10:	300c953a 	slli	r6,r6,20
   89b14:	29403fcc 	andi	r5,r5,255
   89b18:	280a97fa 	slli	r5,r5,31
   89b1c:	00c00434 	movhi	r3,16
   89b20:	18ffffc4 	addi	r3,r3,-1
   89b24:	20c8703a 	and	r4,r4,r3
   89b28:	2186b03a 	or	r3,r4,r6
   89b2c:	1946b03a 	or	r3,r3,r5
   89b30:	dfc00217 	ldw	ra,8(sp)
   89b34:	dc400117 	ldw	r17,4(sp)
   89b38:	dc000017 	ldw	r16,0(sp)
   89b3c:	dec00304 	addi	sp,sp,12
   89b40:	f800283a 	ret
   89b44:	010002c4 	movi	r4,11
   89b48:	2089c83a 	sub	r4,r4,r2
   89b4c:	8108d83a 	srl	r4,r16,r4
   89b50:	10800544 	addi	r2,r2,21
   89b54:	00c00434 	movhi	r3,16
   89b58:	18ffffc4 	addi	r3,r3,-1
   89b5c:	8084983a 	sll	r2,r16,r2
   89b60:	20c8703a 	and	r4,r4,r3
   89b64:	3181ffcc 	andi	r6,r6,2047
   89b68:	880b883a 	mov	r5,r17
   89b6c:	003fe806 	br	89b10 <__alt_data_end+0xfffd18a0>
   89b70:	000b883a 	mov	r5,zero
   89b74:	000d883a 	mov	r6,zero
   89b78:	0009883a 	mov	r4,zero
   89b7c:	0005883a 	mov	r2,zero
   89b80:	003fe306 	br	89b10 <__alt_data_end+0xfffd18a0>

00089b84 <__clzsi2>:
   89b84:	00bfffd4 	movui	r2,65535
   89b88:	11000b36 	bltu	r2,r4,89bb8 <__clzsi2+0x34>
   89b8c:	00803fc4 	movi	r2,255
   89b90:	11001e2e 	bgeu	r2,r4,89c0c <__clzsi2+0x88>
   89b94:	00c00204 	movi	r3,8
   89b98:	20c8d83a 	srl	r4,r4,r3
   89b9c:	00c002b4 	movhi	r3,10
   89ba0:	18dfb444 	addi	r3,r3,32465
   89ba4:	00800604 	movi	r2,24
   89ba8:	1909883a 	add	r4,r3,r4
   89bac:	20c00003 	ldbu	r3,0(r4)
   89bb0:	10c5c83a 	sub	r2,r2,r3
   89bb4:	f800283a 	ret
   89bb8:	00804034 	movhi	r2,256
   89bbc:	10bfffc4 	addi	r2,r2,-1
   89bc0:	11000936 	bltu	r2,r4,89be8 <__clzsi2+0x64>
   89bc4:	00800404 	movi	r2,16
   89bc8:	1007883a 	mov	r3,r2
   89bcc:	20c8d83a 	srl	r4,r4,r3
   89bd0:	00c002b4 	movhi	r3,10
   89bd4:	18dfb444 	addi	r3,r3,32465
   89bd8:	1909883a 	add	r4,r3,r4
   89bdc:	20c00003 	ldbu	r3,0(r4)
   89be0:	10c5c83a 	sub	r2,r2,r3
   89be4:	f800283a 	ret
   89be8:	00c00604 	movi	r3,24
   89bec:	20c8d83a 	srl	r4,r4,r3
   89bf0:	00c002b4 	movhi	r3,10
   89bf4:	18dfb444 	addi	r3,r3,32465
   89bf8:	00800204 	movi	r2,8
   89bfc:	1909883a 	add	r4,r3,r4
   89c00:	20c00003 	ldbu	r3,0(r4)
   89c04:	10c5c83a 	sub	r2,r2,r3
   89c08:	f800283a 	ret
   89c0c:	0007883a 	mov	r3,zero
   89c10:	20c8d83a 	srl	r4,r4,r3
   89c14:	00c002b4 	movhi	r3,10
   89c18:	18dfb444 	addi	r3,r3,32465
   89c1c:	00800804 	movi	r2,32
   89c20:	1909883a 	add	r4,r3,r4
   89c24:	20c00003 	ldbu	r3,0(r4)
   89c28:	10c5c83a 	sub	r2,r2,r3
   89c2c:	f800283a 	ret

00089c30 <__errno>:
   89c30:	008002f4 	movhi	r2,11
   89c34:	10acac04 	addi	r2,r2,-19792
   89c38:	10800017 	ldw	r2,0(r2)
   89c3c:	f800283a 	ret

00089c40 <malloc>:
   89c40:	008002f4 	movhi	r2,11
   89c44:	10acac04 	addi	r2,r2,-19792
   89c48:	200b883a 	mov	r5,r4
   89c4c:	11000017 	ldw	r4,0(r2)
   89c50:	0089c681 	jmpi	89c68 <_malloc_r>

00089c54 <free>:
   89c54:	008002f4 	movhi	r2,11
   89c58:	10acac04 	addi	r2,r2,-19792
   89c5c:	200b883a 	mov	r5,r4
   89c60:	11000017 	ldw	r4,0(r2)
   89c64:	008b3601 	jmpi	8b360 <_free_r>

00089c68 <_malloc_r>:
   89c68:	defff604 	addi	sp,sp,-40
   89c6c:	dcc00315 	stw	r19,12(sp)
   89c70:	dfc00915 	stw	ra,36(sp)
   89c74:	df000815 	stw	fp,32(sp)
   89c78:	ddc00715 	stw	r23,28(sp)
   89c7c:	dd800615 	stw	r22,24(sp)
   89c80:	dd400515 	stw	r21,20(sp)
   89c84:	dd000415 	stw	r20,16(sp)
   89c88:	dc800215 	stw	r18,8(sp)
   89c8c:	dc400115 	stw	r17,4(sp)
   89c90:	dc000015 	stw	r16,0(sp)
   89c94:	288002c4 	addi	r2,r5,11
   89c98:	00c00584 	movi	r3,22
   89c9c:	2027883a 	mov	r19,r4
   89ca0:	1880042e 	bgeu	r3,r2,89cb4 <_malloc_r+0x4c>
   89ca4:	043ffe04 	movi	r16,-8
   89ca8:	1420703a 	and	r16,r2,r16
   89cac:	8000020e 	bge	r16,zero,89cb8 <_malloc_r+0x50>
   89cb0:	00000206 	br	89cbc <_malloc_r+0x54>
   89cb4:	04000404 	movi	r16,16
   89cb8:	8140032e 	bgeu	r16,r5,89cc8 <_malloc_r+0x60>
   89cbc:	00800304 	movi	r2,12
   89cc0:	98800015 	stw	r2,0(r19)
   89cc4:	00017006 	br	8a288 <_malloc_r+0x620>
   89cc8:	9809883a 	mov	r4,r19
   89ccc:	008bd680 	call	8bd68 <__malloc_lock>
   89cd0:	00807dc4 	movi	r2,503
   89cd4:	044002f4 	movhi	r17,11
   89cd8:	8c672404 	addi	r17,r17,-25456
   89cdc:	14001436 	bltu	r2,r16,89d30 <_malloc_r+0xc8>
   89ce0:	800ad0fa 	srli	r5,r16,3
   89ce4:	2945883a 	add	r2,r5,r5
   89ce8:	1085883a 	add	r2,r2,r2
   89cec:	1085883a 	add	r2,r2,r2
   89cf0:	8885883a 	add	r2,r17,r2
   89cf4:	14800317 	ldw	r18,12(r2)
   89cf8:	9080031e 	bne	r18,r2,89d08 <_malloc_r+0xa0>
   89cfc:	90800204 	addi	r2,r18,8
   89d00:	94800517 	ldw	r18,20(r18)
   89d04:	90800826 	beq	r18,r2,89d28 <_malloc_r+0xc0>
   89d08:	90c00117 	ldw	r3,4(r18)
   89d0c:	00bfff04 	movi	r2,-4
   89d10:	91000217 	ldw	r4,8(r18)
   89d14:	1884703a 	and	r2,r3,r2
   89d18:	90c00317 	ldw	r3,12(r18)
   89d1c:	20c00315 	stw	r3,12(r4)
   89d20:	19000215 	stw	r4,8(r3)
   89d24:	00004b06 	br	89e54 <_malloc_r+0x1ec>
   89d28:	29400084 	addi	r5,r5,2
   89d2c:	00003506 	br	89e04 <_malloc_r+0x19c>
   89d30:	800ad27a 	srli	r5,r16,9
   89d34:	28001826 	beq	r5,zero,89d98 <_malloc_r+0x130>
   89d38:	00800104 	movi	r2,4
   89d3c:	11400336 	bltu	r2,r5,89d4c <_malloc_r+0xe4>
   89d40:	800ad1ba 	srli	r5,r16,6
   89d44:	29400e04 	addi	r5,r5,56
   89d48:	00001606 	br	89da4 <_malloc_r+0x13c>
   89d4c:	00800504 	movi	r2,20
   89d50:	11400236 	bltu	r2,r5,89d5c <_malloc_r+0xf4>
   89d54:	294016c4 	addi	r5,r5,91
   89d58:	00001206 	br	89da4 <_malloc_r+0x13c>
   89d5c:	00801504 	movi	r2,84
   89d60:	11400336 	bltu	r2,r5,89d70 <_malloc_r+0x108>
   89d64:	800ad33a 	srli	r5,r16,12
   89d68:	29401b84 	addi	r5,r5,110
   89d6c:	00000d06 	br	89da4 <_malloc_r+0x13c>
   89d70:	00805504 	movi	r2,340
   89d74:	11400336 	bltu	r2,r5,89d84 <_malloc_r+0x11c>
   89d78:	800ad3fa 	srli	r5,r16,15
   89d7c:	29401dc4 	addi	r5,r5,119
   89d80:	00000806 	br	89da4 <_malloc_r+0x13c>
   89d84:	00815504 	movi	r2,1364
   89d88:	11400536 	bltu	r2,r5,89da0 <_malloc_r+0x138>
   89d8c:	800ad4ba 	srli	r5,r16,18
   89d90:	29401f04 	addi	r5,r5,124
   89d94:	00000306 	br	89da4 <_malloc_r+0x13c>
   89d98:	01400fc4 	movi	r5,63
   89d9c:	00000106 	br	89da4 <_malloc_r+0x13c>
   89da0:	01401f84 	movi	r5,126
   89da4:	2945883a 	add	r2,r5,r5
   89da8:	1085883a 	add	r2,r2,r2
   89dac:	1085883a 	add	r2,r2,r2
   89db0:	8885883a 	add	r2,r17,r2
   89db4:	14800317 	ldw	r18,12(r2)
   89db8:	01bfff04 	movi	r6,-4
   89dbc:	01c003c4 	movi	r7,15
   89dc0:	90800f26 	beq	r18,r2,89e00 <_malloc_r+0x198>
   89dc4:	90c00117 	ldw	r3,4(r18)
   89dc8:	1986703a 	and	r3,r3,r6
   89dcc:	1c09c83a 	sub	r4,r3,r16
   89dd0:	3900020e 	bge	r7,r4,89ddc <_malloc_r+0x174>
   89dd4:	297fffc4 	addi	r5,r5,-1
   89dd8:	00000906 	br	89e00 <_malloc_r+0x198>
   89ddc:	20000616 	blt	r4,zero,89df8 <_malloc_r+0x190>
   89de0:	90800317 	ldw	r2,12(r18)
   89de4:	91000217 	ldw	r4,8(r18)
   89de8:	20800315 	stw	r2,12(r4)
   89dec:	11000215 	stw	r4,8(r2)
   89df0:	90c5883a 	add	r2,r18,r3
   89df4:	00001806 	br	89e58 <_malloc_r+0x1f0>
   89df8:	94800317 	ldw	r18,12(r18)
   89dfc:	003ff006 	br	89dc0 <__alt_data_end+0xfffd1b50>
   89e00:	29400044 	addi	r5,r5,1
   89e04:	8c800417 	ldw	r18,16(r17)
   89e08:	00c002f4 	movhi	r3,11
   89e0c:	18e72404 	addi	r3,r3,-25456
   89e10:	19800204 	addi	r6,r3,8
   89e14:	91805d26 	beq	r18,r6,89f8c <_malloc_r+0x324>
   89e18:	91000117 	ldw	r4,4(r18)
   89e1c:	00bfff04 	movi	r2,-4
   89e20:	01c003c4 	movi	r7,15
   89e24:	2084703a 	and	r2,r4,r2
   89e28:	1409c83a 	sub	r4,r2,r16
   89e2c:	3900060e 	bge	r7,r4,89e48 <_malloc_r+0x1e0>
   89e30:	9405883a 	add	r2,r18,r16
   89e34:	84000054 	ori	r16,r16,1
   89e38:	94000115 	stw	r16,4(r18)
   89e3c:	18800515 	stw	r2,20(r3)
   89e40:	18800415 	stw	r2,16(r3)
   89e44:	00007706 	br	8a024 <_malloc_r+0x3bc>
   89e48:	19800515 	stw	r6,20(r3)
   89e4c:	19800415 	stw	r6,16(r3)
   89e50:	20000516 	blt	r4,zero,89e68 <_malloc_r+0x200>
   89e54:	9085883a 	add	r2,r18,r2
   89e58:	10c00117 	ldw	r3,4(r2)
   89e5c:	18c00054 	ori	r3,r3,1
   89e60:	10c00115 	stw	r3,4(r2)
   89e64:	00011106 	br	8a2ac <_malloc_r+0x644>
   89e68:	01007fc4 	movi	r4,511
   89e6c:	20801136 	bltu	r4,r2,89eb4 <_malloc_r+0x24c>
   89e70:	1004d0fa 	srli	r2,r2,3
   89e74:	01c00044 	movi	r7,1
   89e78:	1009d0ba 	srai	r4,r2,2
   89e7c:	1085883a 	add	r2,r2,r2
   89e80:	1085883a 	add	r2,r2,r2
   89e84:	3908983a 	sll	r4,r7,r4
   89e88:	19c00117 	ldw	r7,4(r3)
   89e8c:	1085883a 	add	r2,r2,r2
   89e90:	21c8b03a 	or	r4,r4,r7
   89e94:	19000115 	stw	r4,4(r3)
   89e98:	10c7883a 	add	r3,r2,r3
   89e9c:	18800217 	ldw	r2,8(r3)
   89ea0:	90c00315 	stw	r3,12(r18)
   89ea4:	90800215 	stw	r2,8(r18)
   89ea8:	1c800215 	stw	r18,8(r3)
   89eac:	14800315 	stw	r18,12(r2)
   89eb0:	00003606 	br	89f8c <_malloc_r+0x324>
   89eb4:	1008d27a 	srli	r4,r2,9
   89eb8:	00c00104 	movi	r3,4
   89ebc:	19000336 	bltu	r3,r4,89ecc <_malloc_r+0x264>
   89ec0:	1008d1ba 	srli	r4,r2,6
   89ec4:	21000e04 	addi	r4,r4,56
   89ec8:	00001406 	br	89f1c <_malloc_r+0x2b4>
   89ecc:	00c00504 	movi	r3,20
   89ed0:	19000236 	bltu	r3,r4,89edc <_malloc_r+0x274>
   89ed4:	210016c4 	addi	r4,r4,91
   89ed8:	00001006 	br	89f1c <_malloc_r+0x2b4>
   89edc:	00c01504 	movi	r3,84
   89ee0:	19000336 	bltu	r3,r4,89ef0 <_malloc_r+0x288>
   89ee4:	1008d33a 	srli	r4,r2,12
   89ee8:	21001b84 	addi	r4,r4,110
   89eec:	00000b06 	br	89f1c <_malloc_r+0x2b4>
   89ef0:	00c05504 	movi	r3,340
   89ef4:	19000336 	bltu	r3,r4,89f04 <_malloc_r+0x29c>
   89ef8:	1008d3fa 	srli	r4,r2,15
   89efc:	21001dc4 	addi	r4,r4,119
   89f00:	00000606 	br	89f1c <_malloc_r+0x2b4>
   89f04:	00c15504 	movi	r3,1364
   89f08:	19000336 	bltu	r3,r4,89f18 <_malloc_r+0x2b0>
   89f0c:	1008d4ba 	srli	r4,r2,18
   89f10:	21001f04 	addi	r4,r4,124
   89f14:	00000106 	br	89f1c <_malloc_r+0x2b4>
   89f18:	01001f84 	movi	r4,126
   89f1c:	210f883a 	add	r7,r4,r4
   89f20:	39cf883a 	add	r7,r7,r7
   89f24:	39cf883a 	add	r7,r7,r7
   89f28:	89cf883a 	add	r7,r17,r7
   89f2c:	38c00217 	ldw	r3,8(r7)
   89f30:	020002f4 	movhi	r8,11
   89f34:	42272404 	addi	r8,r8,-25456
   89f38:	19c00226 	beq	r3,r7,89f44 <_malloc_r+0x2dc>
   89f3c:	023fff04 	movi	r8,-4
   89f40:	00000a06 	br	89f6c <_malloc_r+0x304>
   89f44:	2009d0ba 	srai	r4,r4,2
   89f48:	00800044 	movi	r2,1
   89f4c:	1108983a 	sll	r4,r2,r4
   89f50:	40800117 	ldw	r2,4(r8)
   89f54:	2088b03a 	or	r4,r4,r2
   89f58:	41000115 	stw	r4,4(r8)
   89f5c:	1805883a 	mov	r2,r3
   89f60:	00000606 	br	89f7c <_malloc_r+0x314>
   89f64:	18c00217 	ldw	r3,8(r3)
   89f68:	19c00326 	beq	r3,r7,89f78 <_malloc_r+0x310>
   89f6c:	19000117 	ldw	r4,4(r3)
   89f70:	2208703a 	and	r4,r4,r8
   89f74:	113ffb36 	bltu	r2,r4,89f64 <__alt_data_end+0xfffd1cf4>
   89f78:	18800317 	ldw	r2,12(r3)
   89f7c:	90800315 	stw	r2,12(r18)
   89f80:	90c00215 	stw	r3,8(r18)
   89f84:	14800215 	stw	r18,8(r2)
   89f88:	1c800315 	stw	r18,12(r3)
   89f8c:	2805d0ba 	srai	r2,r5,2
   89f90:	00c00044 	movi	r3,1
   89f94:	1886983a 	sll	r3,r3,r2
   89f98:	88800117 	ldw	r2,4(r17)
   89f9c:	10c04b36 	bltu	r2,r3,8a0cc <_malloc_r+0x464>
   89fa0:	1888703a 	and	r4,r3,r2
   89fa4:	2000061e 	bne	r4,zero,89fc0 <_malloc_r+0x358>
   89fa8:	013fff04 	movi	r4,-4
   89fac:	290a703a 	and	r5,r5,r4
   89fb0:	18c7883a 	add	r3,r3,r3
   89fb4:	1888703a 	and	r4,r3,r2
   89fb8:	29400104 	addi	r5,r5,4
   89fbc:	203ffc26 	beq	r4,zero,89fb0 <__alt_data_end+0xfffd1d40>
   89fc0:	02bfff04 	movi	r10,-4
   89fc4:	02c003c4 	movi	r11,15
   89fc8:	2945883a 	add	r2,r5,r5
   89fcc:	1085883a 	add	r2,r2,r2
   89fd0:	1085883a 	add	r2,r2,r2
   89fd4:	8885883a 	add	r2,r17,r2
   89fd8:	1011883a 	mov	r8,r2
   89fdc:	280f883a 	mov	r7,r5
   89fe0:	44800317 	ldw	r18,12(r8)
   89fe4:	00000106 	br	89fec <_malloc_r+0x384>
   89fe8:	94800317 	ldw	r18,12(r18)
   89fec:	92001e26 	beq	r18,r8,8a068 <_malloc_r+0x400>
   89ff0:	92400117 	ldw	r9,4(r18)
   89ff4:	4a92703a 	and	r9,r9,r10
   89ff8:	4c09c83a 	sub	r4,r9,r16
   89ffc:	5900100e 	bge	r11,r4,8a040 <_malloc_r+0x3d8>
   8a000:	90c00317 	ldw	r3,12(r18)
   8a004:	91400217 	ldw	r5,8(r18)
   8a008:	9405883a 	add	r2,r18,r16
   8a00c:	84000054 	ori	r16,r16,1
   8a010:	94000115 	stw	r16,4(r18)
   8a014:	28c00315 	stw	r3,12(r5)
   8a018:	19400215 	stw	r5,8(r3)
   8a01c:	88800515 	stw	r2,20(r17)
   8a020:	88800415 	stw	r2,16(r17)
   8a024:	20c00054 	ori	r3,r4,1
   8a028:	11800315 	stw	r6,12(r2)
   8a02c:	11800215 	stw	r6,8(r2)
   8a030:	10c00115 	stw	r3,4(r2)
   8a034:	1105883a 	add	r2,r2,r4
   8a038:	11000015 	stw	r4,0(r2)
   8a03c:	00009b06 	br	8a2ac <_malloc_r+0x644>
   8a040:	203fe916 	blt	r4,zero,89fe8 <__alt_data_end+0xfffd1d78>
   8a044:	9245883a 	add	r2,r18,r9
   8a048:	10c00117 	ldw	r3,4(r2)
   8a04c:	18c00054 	ori	r3,r3,1
   8a050:	10c00115 	stw	r3,4(r2)
   8a054:	90800317 	ldw	r2,12(r18)
   8a058:	90c00217 	ldw	r3,8(r18)
   8a05c:	18800315 	stw	r2,12(r3)
   8a060:	10c00215 	stw	r3,8(r2)
   8a064:	00009106 	br	8a2ac <_malloc_r+0x644>
   8a068:	39c00044 	addi	r7,r7,1
   8a06c:	390000cc 	andi	r4,r7,3
   8a070:	42000204 	addi	r8,r8,8
   8a074:	203fda1e 	bne	r4,zero,89fe0 <__alt_data_end+0xfffd1d70>
   8a078:	290000cc 	andi	r4,r5,3
   8a07c:	2000051e 	bne	r4,zero,8a094 <_malloc_r+0x42c>
   8a080:	89000117 	ldw	r4,4(r17)
   8a084:	00c4303a 	nor	r2,zero,r3
   8a088:	1104703a 	and	r2,r2,r4
   8a08c:	88800115 	stw	r2,4(r17)
   8a090:	00000406 	br	8a0a4 <_malloc_r+0x43c>
   8a094:	113ffe04 	addi	r4,r2,-8
   8a098:	10800017 	ldw	r2,0(r2)
   8a09c:	297fffc4 	addi	r5,r5,-1
   8a0a0:	113ff526 	beq	r2,r4,8a078 <__alt_data_end+0xfffd1e08>
   8a0a4:	88800117 	ldw	r2,4(r17)
   8a0a8:	18c7883a 	add	r3,r3,r3
   8a0ac:	10c00736 	bltu	r2,r3,8a0cc <_malloc_r+0x464>
   8a0b0:	18000626 	beq	r3,zero,8a0cc <_malloc_r+0x464>
   8a0b4:	380b883a 	mov	r5,r7
   8a0b8:	1888703a 	and	r4,r3,r2
   8a0bc:	203fc21e 	bne	r4,zero,89fc8 <__alt_data_end+0xfffd1d58>
   8a0c0:	29400104 	addi	r5,r5,4
   8a0c4:	18c7883a 	add	r3,r3,r3
   8a0c8:	003ffb06 	br	8a0b8 <__alt_data_end+0xfffd1e48>
   8a0cc:	8d000217 	ldw	r20,8(r17)
   8a0d0:	00bfff04 	movi	r2,-4
   8a0d4:	a5400117 	ldw	r21,4(r20)
   8a0d8:	a8aa703a 	and	r21,r21,r2
   8a0dc:	ac000336 	bltu	r21,r16,8a0ec <_malloc_r+0x484>
   8a0e0:	ac07c83a 	sub	r3,r21,r16
   8a0e4:	008003c4 	movi	r2,15
   8a0e8:	10c06916 	blt	r2,r3,8a290 <_malloc_r+0x628>
   8a0ec:	d5accc17 	ldw	r22,-19664(gp)
   8a0f0:	d0a00517 	ldw	r2,-32748(gp)
   8a0f4:	05ffffc4 	movi	r23,-1
   8a0f8:	a579883a 	add	fp,r20,r21
   8a0fc:	85ad883a 	add	r22,r16,r22
   8a100:	15c0021e 	bne	r2,r23,8a10c <_malloc_r+0x4a4>
   8a104:	b5800404 	addi	r22,r22,16
   8a108:	00000306 	br	8a118 <_malloc_r+0x4b0>
   8a10c:	b58023c4 	addi	r22,r22,143
   8a110:	00bfe004 	movi	r2,-128
   8a114:	b0ac703a 	and	r22,r22,r2
   8a118:	9809883a 	mov	r4,r19
   8a11c:	b00b883a 	mov	r5,r22
   8a120:	008a44c0 	call	8a44c <_sbrk_r>
   8a124:	1025883a 	mov	r18,r2
   8a128:	15c04d26 	beq	r2,r23,8a260 <_malloc_r+0x5f8>
   8a12c:	1700012e 	bgeu	r2,fp,8a134 <_malloc_r+0x4cc>
   8a130:	a4404b1e 	bne	r20,r17,8a260 <_malloc_r+0x5f8>
   8a134:	05c002f4 	movhi	r23,11
   8a138:	bdf97c04 	addi	r23,r23,-6672
   8a13c:	b8800017 	ldw	r2,0(r23)
   8a140:	b085883a 	add	r2,r22,r2
   8a144:	b8800015 	stw	r2,0(r23)
   8a148:	9700071e 	bne	r18,fp,8a168 <_malloc_r+0x500>
   8a14c:	90c01fcc 	andi	r3,r18,127
   8a150:	1800051e 	bne	r3,zero,8a168 <_malloc_r+0x500>
   8a154:	88800217 	ldw	r2,8(r17)
   8a158:	b56b883a 	add	r21,r22,r21
   8a15c:	ad400054 	ori	r21,r21,1
   8a160:	15400115 	stw	r21,4(r2)
   8a164:	00003706 	br	8a244 <_malloc_r+0x5dc>
   8a168:	d1200517 	ldw	r4,-32748(gp)
   8a16c:	00ffffc4 	movi	r3,-1
   8a170:	20c0021e 	bne	r4,r3,8a17c <_malloc_r+0x514>
   8a174:	d4a00515 	stw	r18,-32748(gp)
   8a178:	00000306 	br	8a188 <_malloc_r+0x520>
   8a17c:	9739c83a 	sub	fp,r18,fp
   8a180:	1705883a 	add	r2,r2,fp
   8a184:	b8800015 	stw	r2,0(r23)
   8a188:	908001cc 	andi	r2,r18,7
   8a18c:	10000426 	beq	r2,zero,8a1a0 <_malloc_r+0x538>
   8a190:	00c00204 	movi	r3,8
   8a194:	1885c83a 	sub	r2,r3,r2
   8a198:	90a5883a 	add	r18,r18,r2
   8a19c:	00000106 	br	8a1a4 <_malloc_r+0x53c>
   8a1a0:	0005883a 	mov	r2,zero
   8a1a4:	95ad883a 	add	r22,r18,r22
   8a1a8:	10802004 	addi	r2,r2,128
   8a1ac:	b5801fcc 	andi	r22,r22,127
   8a1b0:	15adc83a 	sub	r22,r2,r22
   8a1b4:	9809883a 	mov	r4,r19
   8a1b8:	b00b883a 	mov	r5,r22
   8a1bc:	008a44c0 	call	8a44c <_sbrk_r>
   8a1c0:	00ffffc4 	movi	r3,-1
   8a1c4:	10c0021e 	bne	r2,r3,8a1d0 <_malloc_r+0x568>
   8a1c8:	9005883a 	mov	r2,r18
   8a1cc:	002d883a 	mov	r22,zero
   8a1d0:	b8c00017 	ldw	r3,0(r23)
   8a1d4:	1485c83a 	sub	r2,r2,r18
   8a1d8:	8c800215 	stw	r18,8(r17)
   8a1dc:	b0c7883a 	add	r3,r22,r3
   8a1e0:	15ad883a 	add	r22,r2,r22
   8a1e4:	b5800054 	ori	r22,r22,1
   8a1e8:	b8c00015 	stw	r3,0(r23)
   8a1ec:	95800115 	stw	r22,4(r18)
   8a1f0:	a4401426 	beq	r20,r17,8a244 <_malloc_r+0x5dc>
   8a1f4:	008003c4 	movi	r2,15
   8a1f8:	15400336 	bltu	r2,r21,8a208 <_malloc_r+0x5a0>
   8a1fc:	00800044 	movi	r2,1
   8a200:	90800115 	stw	r2,4(r18)
   8a204:	00001606 	br	8a260 <_malloc_r+0x5f8>
   8a208:	00fffe04 	movi	r3,-8
   8a20c:	ad7ffd04 	addi	r21,r21,-12
   8a210:	a8ea703a 	and	r21,r21,r3
   8a214:	a0c00117 	ldw	r3,4(r20)
   8a218:	01000144 	movi	r4,5
   8a21c:	18c0004c 	andi	r3,r3,1
   8a220:	a8c6b03a 	or	r3,r21,r3
   8a224:	a0c00115 	stw	r3,4(r20)
   8a228:	a547883a 	add	r3,r20,r21
   8a22c:	19000115 	stw	r4,4(r3)
   8a230:	19000215 	stw	r4,8(r3)
   8a234:	1540032e 	bgeu	r2,r21,8a244 <_malloc_r+0x5dc>
   8a238:	9809883a 	mov	r4,r19
   8a23c:	a1400204 	addi	r5,r20,8
   8a240:	008b3600 	call	8b360 <_free_r>
   8a244:	b8800017 	ldw	r2,0(r23)
   8a248:	d0eccb17 	ldw	r3,-19668(gp)
   8a24c:	1880012e 	bgeu	r3,r2,8a254 <_malloc_r+0x5ec>
   8a250:	d0accb15 	stw	r2,-19668(gp)
   8a254:	d0ecca17 	ldw	r3,-19672(gp)
   8a258:	1880012e 	bgeu	r3,r2,8a260 <_malloc_r+0x5f8>
   8a25c:	d0acca15 	stw	r2,-19672(gp)
   8a260:	88800217 	ldw	r2,8(r17)
   8a264:	10c00117 	ldw	r3,4(r2)
   8a268:	00bfff04 	movi	r2,-4
   8a26c:	1884703a 	and	r2,r3,r2
   8a270:	1407c83a 	sub	r3,r2,r16
   8a274:	14000236 	bltu	r2,r16,8a280 <_malloc_r+0x618>
   8a278:	008003c4 	movi	r2,15
   8a27c:	10c00416 	blt	r2,r3,8a290 <_malloc_r+0x628>
   8a280:	9809883a 	mov	r4,r19
   8a284:	008bd880 	call	8bd88 <__malloc_unlock>
   8a288:	0005883a 	mov	r2,zero
   8a28c:	00000a06 	br	8a2b8 <_malloc_r+0x650>
   8a290:	8c800217 	ldw	r18,8(r17)
   8a294:	80800054 	ori	r2,r16,1
   8a298:	18c00054 	ori	r3,r3,1
   8a29c:	90800115 	stw	r2,4(r18)
   8a2a0:	9421883a 	add	r16,r18,r16
   8a2a4:	8c000215 	stw	r16,8(r17)
   8a2a8:	80c00115 	stw	r3,4(r16)
   8a2ac:	9809883a 	mov	r4,r19
   8a2b0:	008bd880 	call	8bd88 <__malloc_unlock>
   8a2b4:	90800204 	addi	r2,r18,8
   8a2b8:	dfc00917 	ldw	ra,36(sp)
   8a2bc:	df000817 	ldw	fp,32(sp)
   8a2c0:	ddc00717 	ldw	r23,28(sp)
   8a2c4:	dd800617 	ldw	r22,24(sp)
   8a2c8:	dd400517 	ldw	r21,20(sp)
   8a2cc:	dd000417 	ldw	r20,16(sp)
   8a2d0:	dcc00317 	ldw	r19,12(sp)
   8a2d4:	dc800217 	ldw	r18,8(sp)
   8a2d8:	dc400117 	ldw	r17,4(sp)
   8a2dc:	dc000017 	ldw	r16,0(sp)
   8a2e0:	dec00a04 	addi	sp,sp,40
   8a2e4:	f800283a 	ret

0008a2e8 <memcpy>:
   8a2e8:	2005883a 	mov	r2,r4
   8a2ec:	0007883a 	mov	r3,zero
   8a2f0:	19800626 	beq	r3,r6,8a30c <memcpy+0x24>
   8a2f4:	28c9883a 	add	r4,r5,r3
   8a2f8:	21c00003 	ldbu	r7,0(r4)
   8a2fc:	10c9883a 	add	r4,r2,r3
   8a300:	18c00044 	addi	r3,r3,1
   8a304:	21c00005 	stb	r7,0(r4)
   8a308:	003ff906 	br	8a2f0 <__alt_data_end+0xfffd2080>
   8a30c:	f800283a 	ret

0008a310 <memset>:
   8a310:	2005883a 	mov	r2,r4
   8a314:	2007883a 	mov	r3,r4
   8a318:	218d883a 	add	r6,r4,r6
   8a31c:	19800326 	beq	r3,r6,8a32c <memset+0x1c>
   8a320:	19400005 	stb	r5,0(r3)
   8a324:	18c00044 	addi	r3,r3,1
   8a328:	003ffc06 	br	8a31c <__alt_data_end+0xfffd20ac>
   8a32c:	f800283a 	ret

0008a330 <_printf_r>:
   8a330:	defffd04 	addi	sp,sp,-12
   8a334:	dfc00015 	stw	ra,0(sp)
   8a338:	d9800115 	stw	r6,4(sp)
   8a33c:	d9c00215 	stw	r7,8(sp)
   8a340:	20800217 	ldw	r2,8(r4)
   8a344:	280d883a 	mov	r6,r5
   8a348:	21400217 	ldw	r5,8(r4)
   8a34c:	00c00274 	movhi	r3,9
   8a350:	18ed7e04 	addi	r3,r3,-18952
   8a354:	10c00115 	stw	r3,4(r2)
   8a358:	d9c00104 	addi	r7,sp,4
   8a35c:	008abe80 	call	8abe8 <___vfprintf_internal_r>
   8a360:	dfc00017 	ldw	ra,0(sp)
   8a364:	dec00304 	addi	sp,sp,12
   8a368:	f800283a 	ret

0008a36c <printf>:
   8a36c:	defffc04 	addi	sp,sp,-16
   8a370:	dfc00015 	stw	ra,0(sp)
   8a374:	d9400115 	stw	r5,4(sp)
   8a378:	d9800215 	stw	r6,8(sp)
   8a37c:	d9c00315 	stw	r7,12(sp)
   8a380:	008002f4 	movhi	r2,11
   8a384:	10acac04 	addi	r2,r2,-19792
   8a388:	10800017 	ldw	r2,0(r2)
   8a38c:	200b883a 	mov	r5,r4
   8a390:	01000274 	movhi	r4,9
   8a394:	212d7e04 	addi	r4,r4,-18952
   8a398:	10c00217 	ldw	r3,8(r2)
   8a39c:	d9800104 	addi	r6,sp,4
   8a3a0:	19000115 	stw	r4,4(r3)
   8a3a4:	11000217 	ldw	r4,8(r2)
   8a3a8:	008b1200 	call	8b120 <__vfprintf_internal>
   8a3ac:	dfc00017 	ldw	ra,0(sp)
   8a3b0:	dec00404 	addi	sp,sp,16
   8a3b4:	f800283a 	ret

0008a3b8 <_puts_r>:
   8a3b8:	defffd04 	addi	sp,sp,-12
   8a3bc:	dc000015 	stw	r16,0(sp)
   8a3c0:	2021883a 	mov	r16,r4
   8a3c4:	2809883a 	mov	r4,r5
   8a3c8:	dfc00215 	stw	ra,8(sp)
   8a3cc:	dc400115 	stw	r17,4(sp)
   8a3d0:	2823883a 	mov	r17,r5
   8a3d4:	008a5980 	call	8a598 <strlen>
   8a3d8:	81400217 	ldw	r5,8(r16)
   8a3dc:	00c00274 	movhi	r3,9
   8a3e0:	18ed7e04 	addi	r3,r3,-18952
   8a3e4:	8009883a 	mov	r4,r16
   8a3e8:	28c00115 	stw	r3,4(r5)
   8a3ec:	880d883a 	mov	r6,r17
   8a3f0:	100f883a 	mov	r7,r2
   8a3f4:	183ee83a 	callr	r3
   8a3f8:	00ffffc4 	movi	r3,-1
   8a3fc:	10c00926 	beq	r2,r3,8a424 <_puts_r+0x6c>
   8a400:	81400217 	ldw	r5,8(r16)
   8a404:	8009883a 	mov	r4,r16
   8a408:	018002b4 	movhi	r6,10
   8a40c:	319ff504 	addi	r6,r6,32724
   8a410:	28800117 	ldw	r2,4(r5)
   8a414:	01c00044 	movi	r7,1
   8a418:	103ee83a 	callr	r2
   8a41c:	10bfffe0 	cmpeqi	r2,r2,-1
   8a420:	0085c83a 	sub	r2,zero,r2
   8a424:	dfc00217 	ldw	ra,8(sp)
   8a428:	dc400117 	ldw	r17,4(sp)
   8a42c:	dc000017 	ldw	r16,0(sp)
   8a430:	dec00304 	addi	sp,sp,12
   8a434:	f800283a 	ret

0008a438 <puts>:
   8a438:	008002f4 	movhi	r2,11
   8a43c:	10acac04 	addi	r2,r2,-19792
   8a440:	200b883a 	mov	r5,r4
   8a444:	11000017 	ldw	r4,0(r2)
   8a448:	008a3b81 	jmpi	8a3b8 <_puts_r>

0008a44c <_sbrk_r>:
   8a44c:	defffd04 	addi	sp,sp,-12
   8a450:	dc400115 	stw	r17,4(sp)
   8a454:	dc000015 	stw	r16,0(sp)
   8a458:	2023883a 	mov	r17,r4
   8a45c:	040002f4 	movhi	r16,11
   8a460:	84397504 	addi	r16,r16,-6700
   8a464:	2809883a 	mov	r4,r5
   8a468:	dfc00215 	stw	ra,8(sp)
   8a46c:	80000015 	stw	zero,0(r16)
   8a470:	008bda80 	call	8bda8 <sbrk>
   8a474:	00ffffc4 	movi	r3,-1
   8a478:	10c0031e 	bne	r2,r3,8a488 <_sbrk_r+0x3c>
   8a47c:	80c00017 	ldw	r3,0(r16)
   8a480:	18000126 	beq	r3,zero,8a488 <_sbrk_r+0x3c>
   8a484:	88c00015 	stw	r3,0(r17)
   8a488:	dfc00217 	ldw	ra,8(sp)
   8a48c:	dc400117 	ldw	r17,4(sp)
   8a490:	dc000017 	ldw	r16,0(sp)
   8a494:	dec00304 	addi	sp,sp,12
   8a498:	f800283a 	ret

0008a49c <_sprintf_r>:
   8a49c:	defff704 	addi	sp,sp,-36
   8a4a0:	dfc00715 	stw	ra,28(sp)
   8a4a4:	d9c00815 	stw	r7,32(sp)
   8a4a8:	00808204 	movi	r2,520
   8a4ac:	d880000d 	sth	r2,0(sp)
   8a4b0:	00a00034 	movhi	r2,32768
   8a4b4:	10bfffc4 	addi	r2,r2,-1
   8a4b8:	d8800515 	stw	r2,20(sp)
   8a4bc:	d8800315 	stw	r2,12(sp)
   8a4c0:	00bfffc4 	movi	r2,-1
   8a4c4:	d9400415 	stw	r5,16(sp)
   8a4c8:	d9400215 	stw	r5,8(sp)
   8a4cc:	d880008d 	sth	r2,2(sp)
   8a4d0:	d80b883a 	mov	r5,sp
   8a4d4:	00800274 	movhi	r2,9
   8a4d8:	10ada904 	addi	r2,r2,-18780
   8a4dc:	d9c00804 	addi	r7,sp,32
   8a4e0:	d8800115 	stw	r2,4(sp)
   8a4e4:	d8000615 	stw	zero,24(sp)
   8a4e8:	008a6200 	call	8a620 <___svfprintf_internal_r>
   8a4ec:	d8c00417 	ldw	r3,16(sp)
   8a4f0:	18000005 	stb	zero,0(r3)
   8a4f4:	dfc00717 	ldw	ra,28(sp)
   8a4f8:	dec00904 	addi	sp,sp,36
   8a4fc:	f800283a 	ret

0008a500 <sprintf>:
   8a500:	defff604 	addi	sp,sp,-40
   8a504:	dfc00715 	stw	ra,28(sp)
   8a508:	d9800815 	stw	r6,32(sp)
   8a50c:	d9c00915 	stw	r7,36(sp)
   8a510:	00808204 	movi	r2,520
   8a514:	d880000d 	sth	r2,0(sp)
   8a518:	00a00034 	movhi	r2,32768
   8a51c:	10bfffc4 	addi	r2,r2,-1
   8a520:	d8800515 	stw	r2,20(sp)
   8a524:	d8800315 	stw	r2,12(sp)
   8a528:	00bfffc4 	movi	r2,-1
   8a52c:	d880008d 	sth	r2,2(sp)
   8a530:	00800274 	movhi	r2,9
   8a534:	10ada904 	addi	r2,r2,-18780
   8a538:	d8800115 	stw	r2,4(sp)
   8a53c:	008002f4 	movhi	r2,11
   8a540:	10acac04 	addi	r2,r2,-19792
   8a544:	d9000415 	stw	r4,16(sp)
   8a548:	d9000215 	stw	r4,8(sp)
   8a54c:	11000017 	ldw	r4,0(r2)
   8a550:	280d883a 	mov	r6,r5
   8a554:	d9c00804 	addi	r7,sp,32
   8a558:	d80b883a 	mov	r5,sp
   8a55c:	d8000615 	stw	zero,24(sp)
   8a560:	008a6200 	call	8a620 <___svfprintf_internal_r>
   8a564:	d8c00417 	ldw	r3,16(sp)
   8a568:	18000005 	stb	zero,0(r3)
   8a56c:	dfc00717 	ldw	ra,28(sp)
   8a570:	dec00a04 	addi	sp,sp,40
   8a574:	f800283a 	ret

0008a578 <strcpy>:
   8a578:	2005883a 	mov	r2,r4
   8a57c:	2007883a 	mov	r3,r4
   8a580:	29000007 	ldb	r4,0(r5)
   8a584:	18c00044 	addi	r3,r3,1
   8a588:	29400044 	addi	r5,r5,1
   8a58c:	193fffc5 	stb	r4,-1(r3)
   8a590:	203ffb1e 	bne	r4,zero,8a580 <__alt_data_end+0xfffd2310>
   8a594:	f800283a 	ret

0008a598 <strlen>:
   8a598:	2005883a 	mov	r2,r4
   8a59c:	10c00007 	ldb	r3,0(r2)
   8a5a0:	18000226 	beq	r3,zero,8a5ac <strlen+0x14>
   8a5a4:	10800044 	addi	r2,r2,1
   8a5a8:	003ffc06 	br	8a59c <__alt_data_end+0xfffd232c>
   8a5ac:	1105c83a 	sub	r2,r2,r4
   8a5b0:	f800283a 	ret

0008a5b4 <print_repeat>:
   8a5b4:	defffb04 	addi	sp,sp,-20
   8a5b8:	dc800315 	stw	r18,12(sp)
   8a5bc:	dc400215 	stw	r17,8(sp)
   8a5c0:	dc000115 	stw	r16,4(sp)
   8a5c4:	dfc00415 	stw	ra,16(sp)
   8a5c8:	2025883a 	mov	r18,r4
   8a5cc:	2823883a 	mov	r17,r5
   8a5d0:	d9800005 	stb	r6,0(sp)
   8a5d4:	3821883a 	mov	r16,r7
   8a5d8:	04000a0e 	bge	zero,r16,8a604 <print_repeat+0x50>
   8a5dc:	88800117 	ldw	r2,4(r17)
   8a5e0:	9009883a 	mov	r4,r18
   8a5e4:	880b883a 	mov	r5,r17
   8a5e8:	d80d883a 	mov	r6,sp
   8a5ec:	01c00044 	movi	r7,1
   8a5f0:	103ee83a 	callr	r2
   8a5f4:	843fffc4 	addi	r16,r16,-1
   8a5f8:	103ff726 	beq	r2,zero,8a5d8 <__alt_data_end+0xfffd2368>
   8a5fc:	00bfffc4 	movi	r2,-1
   8a600:	00000106 	br	8a608 <print_repeat+0x54>
   8a604:	0005883a 	mov	r2,zero
   8a608:	dfc00417 	ldw	ra,16(sp)
   8a60c:	dc800317 	ldw	r18,12(sp)
   8a610:	dc400217 	ldw	r17,8(sp)
   8a614:	dc000117 	ldw	r16,4(sp)
   8a618:	dec00504 	addi	sp,sp,20
   8a61c:	f800283a 	ret

0008a620 <___svfprintf_internal_r>:
   8a620:	deffe504 	addi	sp,sp,-108
   8a624:	d8c00804 	addi	r3,sp,32
   8a628:	df001915 	stw	fp,100(sp)
   8a62c:	dd801715 	stw	r22,92(sp)
   8a630:	dd401615 	stw	r21,88(sp)
   8a634:	dd001515 	stw	r20,84(sp)
   8a638:	dcc01415 	stw	r19,80(sp)
   8a63c:	dc801315 	stw	r18,76(sp)
   8a640:	dc401215 	stw	r17,72(sp)
   8a644:	dc001115 	stw	r16,68(sp)
   8a648:	dfc01a15 	stw	ra,104(sp)
   8a64c:	ddc01815 	stw	r23,96(sp)
   8a650:	2021883a 	mov	r16,r4
   8a654:	282b883a 	mov	r21,r5
   8a658:	3839883a 	mov	fp,r7
   8a65c:	d9800f15 	stw	r6,60(sp)
   8a660:	002d883a 	mov	r22,zero
   8a664:	d8000e15 	stw	zero,56(sp)
   8a668:	0027883a 	mov	r19,zero
   8a66c:	d8000a15 	stw	zero,40(sp)
   8a670:	0025883a 	mov	r18,zero
   8a674:	0023883a 	mov	r17,zero
   8a678:	d8000c15 	stw	zero,48(sp)
   8a67c:	d8000b15 	stw	zero,44(sp)
   8a680:	0029883a 	mov	r20,zero
   8a684:	d8c00915 	stw	r3,36(sp)
   8a688:	d8c00f17 	ldw	r3,60(sp)
   8a68c:	19000003 	ldbu	r4,0(r3)
   8a690:	20803fcc 	andi	r2,r4,255
   8a694:	1080201c 	xori	r2,r2,128
   8a698:	10bfe004 	addi	r2,r2,-128
   8a69c:	10011e26 	beq	r2,zero,8ab18 <___svfprintf_internal_r+0x4f8>
   8a6a0:	00c00044 	movi	r3,1
   8a6a4:	a0c01426 	beq	r20,r3,8a6f8 <___svfprintf_internal_r+0xd8>
   8a6a8:	1d000216 	blt	r3,r20,8a6b4 <___svfprintf_internal_r+0x94>
   8a6ac:	a0000626 	beq	r20,zero,8a6c8 <___svfprintf_internal_r+0xa8>
   8a6b0:	00011506 	br	8ab08 <___svfprintf_internal_r+0x4e8>
   8a6b4:	01400084 	movi	r5,2
   8a6b8:	a1401d26 	beq	r20,r5,8a730 <___svfprintf_internal_r+0x110>
   8a6bc:	014000c4 	movi	r5,3
   8a6c0:	a1402926 	beq	r20,r5,8a768 <___svfprintf_internal_r+0x148>
   8a6c4:	00011006 	br	8ab08 <___svfprintf_internal_r+0x4e8>
   8a6c8:	01400944 	movi	r5,37
   8a6cc:	1140fc26 	beq	r2,r5,8aac0 <___svfprintf_internal_r+0x4a0>
   8a6d0:	a8800117 	ldw	r2,4(r21)
   8a6d4:	d9000005 	stb	r4,0(sp)
   8a6d8:	a80b883a 	mov	r5,r21
   8a6dc:	8009883a 	mov	r4,r16
   8a6e0:	d80d883a 	mov	r6,sp
   8a6e4:	01c00044 	movi	r7,1
   8a6e8:	103ee83a 	callr	r2
   8a6ec:	1000d81e 	bne	r2,zero,8aa50 <___svfprintf_internal_r+0x430>
   8a6f0:	b5800044 	addi	r22,r22,1
   8a6f4:	00010406 	br	8ab08 <___svfprintf_internal_r+0x4e8>
   8a6f8:	01400c04 	movi	r5,48
   8a6fc:	1140fa26 	beq	r2,r5,8aae8 <___svfprintf_internal_r+0x4c8>
   8a700:	01400944 	movi	r5,37
   8a704:	11400a1e 	bne	r2,r5,8a730 <___svfprintf_internal_r+0x110>
   8a708:	d8800005 	stb	r2,0(sp)
   8a70c:	a8800117 	ldw	r2,4(r21)
   8a710:	8009883a 	mov	r4,r16
   8a714:	a80b883a 	mov	r5,r21
   8a718:	d80d883a 	mov	r6,sp
   8a71c:	a00f883a 	mov	r7,r20
   8a720:	103ee83a 	callr	r2
   8a724:	1000ca1e 	bne	r2,zero,8aa50 <___svfprintf_internal_r+0x430>
   8a728:	b5800044 	addi	r22,r22,1
   8a72c:	0000f506 	br	8ab04 <___svfprintf_internal_r+0x4e4>
   8a730:	217ff404 	addi	r5,r4,-48
   8a734:	29403fcc 	andi	r5,r5,255
   8a738:	00c00244 	movi	r3,9
   8a73c:	19400736 	bltu	r3,r5,8a75c <___svfprintf_internal_r+0x13c>
   8a740:	00bfffc4 	movi	r2,-1
   8a744:	88800226 	beq	r17,r2,8a750 <___svfprintf_internal_r+0x130>
   8a748:	8c4002a4 	muli	r17,r17,10
   8a74c:	00000106 	br	8a754 <___svfprintf_internal_r+0x134>
   8a750:	0023883a 	mov	r17,zero
   8a754:	8963883a 	add	r17,r17,r5
   8a758:	0000e406 	br	8aaec <___svfprintf_internal_r+0x4cc>
   8a75c:	01400b84 	movi	r5,46
   8a760:	1140e626 	beq	r2,r5,8aafc <___svfprintf_internal_r+0x4dc>
   8a764:	05000084 	movi	r20,2
   8a768:	213ff404 	addi	r4,r4,-48
   8a76c:	21003fcc 	andi	r4,r4,255
   8a770:	00c00244 	movi	r3,9
   8a774:	19000736 	bltu	r3,r4,8a794 <___svfprintf_internal_r+0x174>
   8a778:	00bfffc4 	movi	r2,-1
   8a77c:	90800226 	beq	r18,r2,8a788 <___svfprintf_internal_r+0x168>
   8a780:	948002a4 	muli	r18,r18,10
   8a784:	00000106 	br	8a78c <___svfprintf_internal_r+0x16c>
   8a788:	0025883a 	mov	r18,zero
   8a78c:	9125883a 	add	r18,r18,r4
   8a790:	0000dd06 	br	8ab08 <___svfprintf_internal_r+0x4e8>
   8a794:	00c01b04 	movi	r3,108
   8a798:	10c0d626 	beq	r2,r3,8aaf4 <___svfprintf_internal_r+0x4d4>
   8a79c:	013fffc4 	movi	r4,-1
   8a7a0:	9100021e 	bne	r18,r4,8a7ac <___svfprintf_internal_r+0x18c>
   8a7a4:	04800044 	movi	r18,1
   8a7a8:	00000106 	br	8a7b0 <___svfprintf_internal_r+0x190>
   8a7ac:	d8000b15 	stw	zero,44(sp)
   8a7b0:	01001a44 	movi	r4,105
   8a7b4:	11001526 	beq	r2,r4,8a80c <___svfprintf_internal_r+0x1ec>
   8a7b8:	20800916 	blt	r4,r2,8a7e0 <___svfprintf_internal_r+0x1c0>
   8a7bc:	010018c4 	movi	r4,99
   8a7c0:	11008c26 	beq	r2,r4,8a9f4 <___svfprintf_internal_r+0x3d4>
   8a7c4:	01001904 	movi	r4,100
   8a7c8:	11001026 	beq	r2,r4,8a80c <___svfprintf_internal_r+0x1ec>
   8a7cc:	01001604 	movi	r4,88
   8a7d0:	1100cc1e 	bne	r2,r4,8ab04 <___svfprintf_internal_r+0x4e4>
   8a7d4:	00c00044 	movi	r3,1
   8a7d8:	d8c00e15 	stw	r3,56(sp)
   8a7dc:	00001406 	br	8a830 <___svfprintf_internal_r+0x210>
   8a7e0:	01001cc4 	movi	r4,115
   8a7e4:	11009c26 	beq	r2,r4,8aa58 <___svfprintf_internal_r+0x438>
   8a7e8:	20800316 	blt	r4,r2,8a7f8 <___svfprintf_internal_r+0x1d8>
   8a7ec:	01001bc4 	movi	r4,111
   8a7f0:	1100cb26 	beq	r2,r4,8ab20 <___svfprintf_internal_r+0x500>
   8a7f4:	0000c306 	br	8ab04 <___svfprintf_internal_r+0x4e4>
   8a7f8:	01001d44 	movi	r4,117
   8a7fc:	11000e26 	beq	r2,r4,8a838 <___svfprintf_internal_r+0x218>
   8a800:	01001e04 	movi	r4,120
   8a804:	11000a26 	beq	r2,r4,8a830 <___svfprintf_internal_r+0x210>
   8a808:	0000be06 	br	8ab04 <___svfprintf_internal_r+0x4e4>
   8a80c:	e5c00104 	addi	r23,fp,4
   8a810:	98000926 	beq	r19,zero,8a838 <___svfprintf_internal_r+0x218>
   8a814:	ddc00d15 	stw	r23,52(sp)
   8a818:	e7000017 	ldw	fp,0(fp)
   8a81c:	e0000b0e 	bge	fp,zero,8a84c <___svfprintf_internal_r+0x22c>
   8a820:	04c00044 	movi	r19,1
   8a824:	0739c83a 	sub	fp,zero,fp
   8a828:	9815883a 	mov	r10,r19
   8a82c:	00000906 	br	8a854 <___svfprintf_internal_r+0x234>
   8a830:	00c00404 	movi	r3,16
   8a834:	d8c00a15 	stw	r3,40(sp)
   8a838:	e0c00104 	addi	r3,fp,4
   8a83c:	d8c00d15 	stw	r3,52(sp)
   8a840:	e7000017 	ldw	fp,0(fp)
   8a844:	0027883a 	mov	r19,zero
   8a848:	00000106 	br	8a850 <___svfprintf_internal_r+0x230>
   8a84c:	04c00044 	movi	r19,1
   8a850:	0015883a 	mov	r10,zero
   8a854:	002f883a 	mov	r23,zero
   8a858:	dde9883a 	add	r20,sp,r23
   8a85c:	e0001526 	beq	fp,zero,8a8b4 <___svfprintf_internal_r+0x294>
   8a860:	d9400a17 	ldw	r5,40(sp)
   8a864:	e009883a 	mov	r4,fp
   8a868:	da801015 	stw	r10,64(sp)
   8a86c:	00878740 	call	87874 <__udivsi3>
   8a870:	d8c00a17 	ldw	r3,40(sp)
   8a874:	da801017 	ldw	r10,64(sp)
   8a878:	1889383a 	mul	r4,r3,r2
   8a87c:	00c00244 	movi	r3,9
   8a880:	e139c83a 	sub	fp,fp,r4
   8a884:	1f000216 	blt	r3,fp,8a890 <___svfprintf_internal_r+0x270>
   8a888:	e7000c04 	addi	fp,fp,48
   8a88c:	00000506 	br	8a8a4 <___svfprintf_internal_r+0x284>
   8a890:	d8c00e17 	ldw	r3,56(sp)
   8a894:	18000226 	beq	r3,zero,8a8a0 <___svfprintf_internal_r+0x280>
   8a898:	e7000dc4 	addi	fp,fp,55
   8a89c:	00000106 	br	8a8a4 <___svfprintf_internal_r+0x284>
   8a8a0:	e70015c4 	addi	fp,fp,87
   8a8a4:	a7000005 	stb	fp,0(r20)
   8a8a8:	bdc00044 	addi	r23,r23,1
   8a8ac:	1039883a 	mov	fp,r2
   8a8b0:	003fe906 	br	8a858 <__alt_data_end+0xfffd25e8>
   8a8b4:	a6f9c83a 	sub	fp,r20,sp
   8a8b8:	9709c83a 	sub	r4,r18,fp
   8a8bc:	01000d0e 	bge	zero,r4,8a8f4 <___svfprintf_internal_r+0x2d4>
   8a8c0:	a005883a 	mov	r2,r20
   8a8c4:	a10b883a 	add	r5,r20,r4
   8a8c8:	01800c04 	movi	r6,48
   8a8cc:	d8c00917 	ldw	r3,36(sp)
   8a8d0:	10c0062e 	bgeu	r2,r3,8a8ec <___svfprintf_internal_r+0x2cc>
   8a8d4:	11000044 	addi	r4,r2,1
   8a8d8:	11800005 	stb	r6,0(r2)
   8a8dc:	2029883a 	mov	r20,r4
   8a8e0:	21400326 	beq	r4,r5,8a8f0 <___svfprintf_internal_r+0x2d0>
   8a8e4:	2005883a 	mov	r2,r4
   8a8e8:	003ff806 	br	8a8cc <__alt_data_end+0xfffd265c>
   8a8ec:	1029883a 	mov	r20,r2
   8a8f0:	a6f9c83a 	sub	fp,r20,sp
   8a8f4:	d8c00b17 	ldw	r3,44(sp)
   8a8f8:	e293883a 	add	r9,fp,r10
   8a8fc:	8a6fc83a 	sub	r23,r17,r9
   8a900:	18001626 	beq	r3,zero,8a95c <___svfprintf_internal_r+0x33c>
   8a904:	50000a26 	beq	r10,zero,8a930 <___svfprintf_internal_r+0x310>
   8a908:	00800b44 	movi	r2,45
   8a90c:	d8800805 	stb	r2,32(sp)
   8a910:	a8800117 	ldw	r2,4(r21)
   8a914:	8009883a 	mov	r4,r16
   8a918:	a80b883a 	mov	r5,r21
   8a91c:	d9800804 	addi	r6,sp,32
   8a920:	01c00044 	movi	r7,1
   8a924:	103ee83a 	callr	r2
   8a928:	1000491e 	bne	r2,zero,8aa50 <___svfprintf_internal_r+0x430>
   8a92c:	b5800044 	addi	r22,r22,1
   8a930:	05c0070e 	bge	zero,r23,8a950 <___svfprintf_internal_r+0x330>
   8a934:	8009883a 	mov	r4,r16
   8a938:	a80b883a 	mov	r5,r21
   8a93c:	01800c04 	movi	r6,48
   8a940:	b80f883a 	mov	r7,r23
   8a944:	008a5b40 	call	8a5b4 <print_repeat>
   8a948:	1000411e 	bne	r2,zero,8aa50 <___svfprintf_internal_r+0x430>
   8a94c:	b5ed883a 	add	r22,r22,r23
   8a950:	b52d883a 	add	r22,r22,r20
   8a954:	e539c83a 	sub	fp,fp,r20
   8a958:	00002006 	br	8a9dc <___svfprintf_internal_r+0x3bc>
   8a95c:	05c0090e 	bge	zero,r23,8a984 <___svfprintf_internal_r+0x364>
   8a960:	8009883a 	mov	r4,r16
   8a964:	a80b883a 	mov	r5,r21
   8a968:	01800804 	movi	r6,32
   8a96c:	b80f883a 	mov	r7,r23
   8a970:	da801015 	stw	r10,64(sp)
   8a974:	008a5b40 	call	8a5b4 <print_repeat>
   8a978:	da801017 	ldw	r10,64(sp)
   8a97c:	1000341e 	bne	r2,zero,8aa50 <___svfprintf_internal_r+0x430>
   8a980:	b5ed883a 	add	r22,r22,r23
   8a984:	503ff226 	beq	r10,zero,8a950 <__alt_data_end+0xfffd26e0>
   8a988:	00800b44 	movi	r2,45
   8a98c:	d8800805 	stb	r2,32(sp)
   8a990:	a8800117 	ldw	r2,4(r21)
   8a994:	8009883a 	mov	r4,r16
   8a998:	a80b883a 	mov	r5,r21
   8a99c:	d9800804 	addi	r6,sp,32
   8a9a0:	01c00044 	movi	r7,1
   8a9a4:	103ee83a 	callr	r2
   8a9a8:	1000291e 	bne	r2,zero,8aa50 <___svfprintf_internal_r+0x430>
   8a9ac:	b5800044 	addi	r22,r22,1
   8a9b0:	003fe706 	br	8a950 <__alt_data_end+0xfffd26e0>
   8a9b4:	a53fffc4 	addi	r20,r20,-1
   8a9b8:	a0800003 	ldbu	r2,0(r20)
   8a9bc:	8009883a 	mov	r4,r16
   8a9c0:	a80b883a 	mov	r5,r21
   8a9c4:	d8800805 	stb	r2,32(sp)
   8a9c8:	a8800117 	ldw	r2,4(r21)
   8a9cc:	d9800804 	addi	r6,sp,32
   8a9d0:	01c00044 	movi	r7,1
   8a9d4:	103ee83a 	callr	r2
   8a9d8:	10001d1e 	bne	r2,zero,8aa50 <___svfprintf_internal_r+0x430>
   8a9dc:	e505883a 	add	r2,fp,r20
   8a9e0:	b507c83a 	sub	r3,r22,r20
   8a9e4:	00bff316 	blt	zero,r2,8a9b4 <__alt_data_end+0xfffd2744>
   8a9e8:	182d883a 	mov	r22,r3
   8a9ec:	df000d17 	ldw	fp,52(sp)
   8a9f0:	00004406 	br	8ab04 <___svfprintf_internal_r+0x4e4>
   8a9f4:	00800044 	movi	r2,1
   8a9f8:	1440080e 	bge	r2,r17,8aa1c <___svfprintf_internal_r+0x3fc>
   8a9fc:	8d3fffc4 	addi	r20,r17,-1
   8aa00:	8009883a 	mov	r4,r16
   8aa04:	a80b883a 	mov	r5,r21
   8aa08:	01800804 	movi	r6,32
   8aa0c:	a00f883a 	mov	r7,r20
   8aa10:	008a5b40 	call	8a5b4 <print_repeat>
   8aa14:	10000e1e 	bne	r2,zero,8aa50 <___svfprintf_internal_r+0x430>
   8aa18:	b52d883a 	add	r22,r22,r20
   8aa1c:	e0800017 	ldw	r2,0(fp)
   8aa20:	8009883a 	mov	r4,r16
   8aa24:	a80b883a 	mov	r5,r21
   8aa28:	d8800005 	stb	r2,0(sp)
   8aa2c:	a8800117 	ldw	r2,4(r21)
   8aa30:	d80d883a 	mov	r6,sp
   8aa34:	01c00044 	movi	r7,1
   8aa38:	e5000104 	addi	r20,fp,4
   8aa3c:	103ee83a 	callr	r2
   8aa40:	1000031e 	bne	r2,zero,8aa50 <___svfprintf_internal_r+0x430>
   8aa44:	b5800044 	addi	r22,r22,1
   8aa48:	a039883a 	mov	fp,r20
   8aa4c:	00002d06 	br	8ab04 <___svfprintf_internal_r+0x4e4>
   8aa50:	00bfffc4 	movi	r2,-1
   8aa54:	00003406 	br	8ab28 <___svfprintf_internal_r+0x508>
   8aa58:	e5000017 	ldw	r20,0(fp)
   8aa5c:	e5c00104 	addi	r23,fp,4
   8aa60:	a009883a 	mov	r4,r20
   8aa64:	008a5980 	call	8a598 <strlen>
   8aa68:	8893c83a 	sub	r9,r17,r2
   8aa6c:	1039883a 	mov	fp,r2
   8aa70:	0240090e 	bge	zero,r9,8aa98 <___svfprintf_internal_r+0x478>
   8aa74:	480f883a 	mov	r7,r9
   8aa78:	8009883a 	mov	r4,r16
   8aa7c:	a80b883a 	mov	r5,r21
   8aa80:	01800804 	movi	r6,32
   8aa84:	da401015 	stw	r9,64(sp)
   8aa88:	008a5b40 	call	8a5b4 <print_repeat>
   8aa8c:	da401017 	ldw	r9,64(sp)
   8aa90:	103fef1e 	bne	r2,zero,8aa50 <__alt_data_end+0xfffd27e0>
   8aa94:	b26d883a 	add	r22,r22,r9
   8aa98:	a8800117 	ldw	r2,4(r21)
   8aa9c:	8009883a 	mov	r4,r16
   8aaa0:	a80b883a 	mov	r5,r21
   8aaa4:	a00d883a 	mov	r6,r20
   8aaa8:	e00f883a 	mov	r7,fp
   8aaac:	103ee83a 	callr	r2
   8aab0:	103fe71e 	bne	r2,zero,8aa50 <__alt_data_end+0xfffd27e0>
   8aab4:	b72d883a 	add	r22,r22,fp
   8aab8:	b839883a 	mov	fp,r23
   8aabc:	00001106 	br	8ab04 <___svfprintf_internal_r+0x4e4>
   8aac0:	04c00044 	movi	r19,1
   8aac4:	00c00284 	movi	r3,10
   8aac8:	04bfffc4 	movi	r18,-1
   8aacc:	d8000e15 	stw	zero,56(sp)
   8aad0:	d8c00a15 	stw	r3,40(sp)
   8aad4:	9023883a 	mov	r17,r18
   8aad8:	d8000c15 	stw	zero,48(sp)
   8aadc:	d8000b15 	stw	zero,44(sp)
   8aae0:	9829883a 	mov	r20,r19
   8aae4:	00000806 	br	8ab08 <___svfprintf_internal_r+0x4e8>
   8aae8:	dd000b15 	stw	r20,44(sp)
   8aaec:	05000084 	movi	r20,2
   8aaf0:	00000506 	br	8ab08 <___svfprintf_internal_r+0x4e8>
   8aaf4:	00c00044 	movi	r3,1
   8aaf8:	d8c00c15 	stw	r3,48(sp)
   8aafc:	050000c4 	movi	r20,3
   8ab00:	00000106 	br	8ab08 <___svfprintf_internal_r+0x4e8>
   8ab04:	0029883a 	mov	r20,zero
   8ab08:	d8c00f17 	ldw	r3,60(sp)
   8ab0c:	18c00044 	addi	r3,r3,1
   8ab10:	d8c00f15 	stw	r3,60(sp)
   8ab14:	003edc06 	br	8a688 <__alt_data_end+0xfffd2418>
   8ab18:	b005883a 	mov	r2,r22
   8ab1c:	00000206 	br	8ab28 <___svfprintf_internal_r+0x508>
   8ab20:	00c00204 	movi	r3,8
   8ab24:	003f4306 	br	8a834 <__alt_data_end+0xfffd25c4>
   8ab28:	dfc01a17 	ldw	ra,104(sp)
   8ab2c:	df001917 	ldw	fp,100(sp)
   8ab30:	ddc01817 	ldw	r23,96(sp)
   8ab34:	dd801717 	ldw	r22,92(sp)
   8ab38:	dd401617 	ldw	r21,88(sp)
   8ab3c:	dd001517 	ldw	r20,84(sp)
   8ab40:	dcc01417 	ldw	r19,80(sp)
   8ab44:	dc801317 	ldw	r18,76(sp)
   8ab48:	dc401217 	ldw	r17,72(sp)
   8ab4c:	dc001117 	ldw	r16,68(sp)
   8ab50:	dec01b04 	addi	sp,sp,108
   8ab54:	f800283a 	ret

0008ab58 <__vfprintf_internal_unused>:
   8ab58:	2007883a 	mov	r3,r4
   8ab5c:	010002f4 	movhi	r4,11
   8ab60:	212cac04 	addi	r4,r4,-19792
   8ab64:	21000017 	ldw	r4,0(r4)
   8ab68:	2805883a 	mov	r2,r5
   8ab6c:	300f883a 	mov	r7,r6
   8ab70:	180b883a 	mov	r5,r3
   8ab74:	100d883a 	mov	r6,r2
   8ab78:	008a6201 	jmpi	8a620 <___svfprintf_internal_r>

0008ab7c <print_repeat>:
   8ab7c:	defffb04 	addi	sp,sp,-20
   8ab80:	dc800315 	stw	r18,12(sp)
   8ab84:	dc400215 	stw	r17,8(sp)
   8ab88:	dc000115 	stw	r16,4(sp)
   8ab8c:	dfc00415 	stw	ra,16(sp)
   8ab90:	2025883a 	mov	r18,r4
   8ab94:	2823883a 	mov	r17,r5
   8ab98:	d9800005 	stb	r6,0(sp)
   8ab9c:	3821883a 	mov	r16,r7
   8aba0:	04000a0e 	bge	zero,r16,8abcc <print_repeat+0x50>
   8aba4:	88800117 	ldw	r2,4(r17)
   8aba8:	9009883a 	mov	r4,r18
   8abac:	880b883a 	mov	r5,r17
   8abb0:	d80d883a 	mov	r6,sp
   8abb4:	01c00044 	movi	r7,1
   8abb8:	103ee83a 	callr	r2
   8abbc:	843fffc4 	addi	r16,r16,-1
   8abc0:	103ff726 	beq	r2,zero,8aba0 <__alt_data_end+0xfffd2930>
   8abc4:	00bfffc4 	movi	r2,-1
   8abc8:	00000106 	br	8abd0 <print_repeat+0x54>
   8abcc:	0005883a 	mov	r2,zero
   8abd0:	dfc00417 	ldw	ra,16(sp)
   8abd4:	dc800317 	ldw	r18,12(sp)
   8abd8:	dc400217 	ldw	r17,8(sp)
   8abdc:	dc000117 	ldw	r16,4(sp)
   8abe0:	dec00504 	addi	sp,sp,20
   8abe4:	f800283a 	ret

0008abe8 <___vfprintf_internal_r>:
   8abe8:	deffe504 	addi	sp,sp,-108
   8abec:	d8c00804 	addi	r3,sp,32
   8abf0:	df001915 	stw	fp,100(sp)
   8abf4:	dd801715 	stw	r22,92(sp)
   8abf8:	dd401615 	stw	r21,88(sp)
   8abfc:	dd001515 	stw	r20,84(sp)
   8ac00:	dcc01415 	stw	r19,80(sp)
   8ac04:	dc801315 	stw	r18,76(sp)
   8ac08:	dc401215 	stw	r17,72(sp)
   8ac0c:	dc001115 	stw	r16,68(sp)
   8ac10:	dfc01a15 	stw	ra,104(sp)
   8ac14:	ddc01815 	stw	r23,96(sp)
   8ac18:	2021883a 	mov	r16,r4
   8ac1c:	282b883a 	mov	r21,r5
   8ac20:	3839883a 	mov	fp,r7
   8ac24:	d9800f15 	stw	r6,60(sp)
   8ac28:	002d883a 	mov	r22,zero
   8ac2c:	d8000e15 	stw	zero,56(sp)
   8ac30:	0027883a 	mov	r19,zero
   8ac34:	d8000a15 	stw	zero,40(sp)
   8ac38:	0025883a 	mov	r18,zero
   8ac3c:	0023883a 	mov	r17,zero
   8ac40:	d8000c15 	stw	zero,48(sp)
   8ac44:	d8000b15 	stw	zero,44(sp)
   8ac48:	0029883a 	mov	r20,zero
   8ac4c:	d8c00915 	stw	r3,36(sp)
   8ac50:	d8c00f17 	ldw	r3,60(sp)
   8ac54:	19000003 	ldbu	r4,0(r3)
   8ac58:	20803fcc 	andi	r2,r4,255
   8ac5c:	1080201c 	xori	r2,r2,128
   8ac60:	10bfe004 	addi	r2,r2,-128
   8ac64:	10011e26 	beq	r2,zero,8b0e0 <___vfprintf_internal_r+0x4f8>
   8ac68:	00c00044 	movi	r3,1
   8ac6c:	a0c01426 	beq	r20,r3,8acc0 <___vfprintf_internal_r+0xd8>
   8ac70:	1d000216 	blt	r3,r20,8ac7c <___vfprintf_internal_r+0x94>
   8ac74:	a0000626 	beq	r20,zero,8ac90 <___vfprintf_internal_r+0xa8>
   8ac78:	00011506 	br	8b0d0 <___vfprintf_internal_r+0x4e8>
   8ac7c:	01400084 	movi	r5,2
   8ac80:	a1401d26 	beq	r20,r5,8acf8 <___vfprintf_internal_r+0x110>
   8ac84:	014000c4 	movi	r5,3
   8ac88:	a1402926 	beq	r20,r5,8ad30 <___vfprintf_internal_r+0x148>
   8ac8c:	00011006 	br	8b0d0 <___vfprintf_internal_r+0x4e8>
   8ac90:	01400944 	movi	r5,37
   8ac94:	1140fc26 	beq	r2,r5,8b088 <___vfprintf_internal_r+0x4a0>
   8ac98:	a8800117 	ldw	r2,4(r21)
   8ac9c:	d9000005 	stb	r4,0(sp)
   8aca0:	a80b883a 	mov	r5,r21
   8aca4:	8009883a 	mov	r4,r16
   8aca8:	d80d883a 	mov	r6,sp
   8acac:	01c00044 	movi	r7,1
   8acb0:	103ee83a 	callr	r2
   8acb4:	1000d81e 	bne	r2,zero,8b018 <___vfprintf_internal_r+0x430>
   8acb8:	b5800044 	addi	r22,r22,1
   8acbc:	00010406 	br	8b0d0 <___vfprintf_internal_r+0x4e8>
   8acc0:	01400c04 	movi	r5,48
   8acc4:	1140fa26 	beq	r2,r5,8b0b0 <___vfprintf_internal_r+0x4c8>
   8acc8:	01400944 	movi	r5,37
   8accc:	11400a1e 	bne	r2,r5,8acf8 <___vfprintf_internal_r+0x110>
   8acd0:	d8800005 	stb	r2,0(sp)
   8acd4:	a8800117 	ldw	r2,4(r21)
   8acd8:	8009883a 	mov	r4,r16
   8acdc:	a80b883a 	mov	r5,r21
   8ace0:	d80d883a 	mov	r6,sp
   8ace4:	a00f883a 	mov	r7,r20
   8ace8:	103ee83a 	callr	r2
   8acec:	1000ca1e 	bne	r2,zero,8b018 <___vfprintf_internal_r+0x430>
   8acf0:	b5800044 	addi	r22,r22,1
   8acf4:	0000f506 	br	8b0cc <___vfprintf_internal_r+0x4e4>
   8acf8:	217ff404 	addi	r5,r4,-48
   8acfc:	29403fcc 	andi	r5,r5,255
   8ad00:	00c00244 	movi	r3,9
   8ad04:	19400736 	bltu	r3,r5,8ad24 <___vfprintf_internal_r+0x13c>
   8ad08:	00bfffc4 	movi	r2,-1
   8ad0c:	88800226 	beq	r17,r2,8ad18 <___vfprintf_internal_r+0x130>
   8ad10:	8c4002a4 	muli	r17,r17,10
   8ad14:	00000106 	br	8ad1c <___vfprintf_internal_r+0x134>
   8ad18:	0023883a 	mov	r17,zero
   8ad1c:	8963883a 	add	r17,r17,r5
   8ad20:	0000e406 	br	8b0b4 <___vfprintf_internal_r+0x4cc>
   8ad24:	01400b84 	movi	r5,46
   8ad28:	1140e626 	beq	r2,r5,8b0c4 <___vfprintf_internal_r+0x4dc>
   8ad2c:	05000084 	movi	r20,2
   8ad30:	213ff404 	addi	r4,r4,-48
   8ad34:	21003fcc 	andi	r4,r4,255
   8ad38:	00c00244 	movi	r3,9
   8ad3c:	19000736 	bltu	r3,r4,8ad5c <___vfprintf_internal_r+0x174>
   8ad40:	00bfffc4 	movi	r2,-1
   8ad44:	90800226 	beq	r18,r2,8ad50 <___vfprintf_internal_r+0x168>
   8ad48:	948002a4 	muli	r18,r18,10
   8ad4c:	00000106 	br	8ad54 <___vfprintf_internal_r+0x16c>
   8ad50:	0025883a 	mov	r18,zero
   8ad54:	9125883a 	add	r18,r18,r4
   8ad58:	0000dd06 	br	8b0d0 <___vfprintf_internal_r+0x4e8>
   8ad5c:	00c01b04 	movi	r3,108
   8ad60:	10c0d626 	beq	r2,r3,8b0bc <___vfprintf_internal_r+0x4d4>
   8ad64:	013fffc4 	movi	r4,-1
   8ad68:	9100021e 	bne	r18,r4,8ad74 <___vfprintf_internal_r+0x18c>
   8ad6c:	04800044 	movi	r18,1
   8ad70:	00000106 	br	8ad78 <___vfprintf_internal_r+0x190>
   8ad74:	d8000b15 	stw	zero,44(sp)
   8ad78:	01001a44 	movi	r4,105
   8ad7c:	11001526 	beq	r2,r4,8add4 <___vfprintf_internal_r+0x1ec>
   8ad80:	20800916 	blt	r4,r2,8ada8 <___vfprintf_internal_r+0x1c0>
   8ad84:	010018c4 	movi	r4,99
   8ad88:	11008c26 	beq	r2,r4,8afbc <___vfprintf_internal_r+0x3d4>
   8ad8c:	01001904 	movi	r4,100
   8ad90:	11001026 	beq	r2,r4,8add4 <___vfprintf_internal_r+0x1ec>
   8ad94:	01001604 	movi	r4,88
   8ad98:	1100cc1e 	bne	r2,r4,8b0cc <___vfprintf_internal_r+0x4e4>
   8ad9c:	00c00044 	movi	r3,1
   8ada0:	d8c00e15 	stw	r3,56(sp)
   8ada4:	00001406 	br	8adf8 <___vfprintf_internal_r+0x210>
   8ada8:	01001cc4 	movi	r4,115
   8adac:	11009c26 	beq	r2,r4,8b020 <___vfprintf_internal_r+0x438>
   8adb0:	20800316 	blt	r4,r2,8adc0 <___vfprintf_internal_r+0x1d8>
   8adb4:	01001bc4 	movi	r4,111
   8adb8:	1100cb26 	beq	r2,r4,8b0e8 <___vfprintf_internal_r+0x500>
   8adbc:	0000c306 	br	8b0cc <___vfprintf_internal_r+0x4e4>
   8adc0:	01001d44 	movi	r4,117
   8adc4:	11000e26 	beq	r2,r4,8ae00 <___vfprintf_internal_r+0x218>
   8adc8:	01001e04 	movi	r4,120
   8adcc:	11000a26 	beq	r2,r4,8adf8 <___vfprintf_internal_r+0x210>
   8add0:	0000be06 	br	8b0cc <___vfprintf_internal_r+0x4e4>
   8add4:	e5c00104 	addi	r23,fp,4
   8add8:	98000926 	beq	r19,zero,8ae00 <___vfprintf_internal_r+0x218>
   8addc:	ddc00d15 	stw	r23,52(sp)
   8ade0:	e7000017 	ldw	fp,0(fp)
   8ade4:	e0000b0e 	bge	fp,zero,8ae14 <___vfprintf_internal_r+0x22c>
   8ade8:	04c00044 	movi	r19,1
   8adec:	0739c83a 	sub	fp,zero,fp
   8adf0:	9815883a 	mov	r10,r19
   8adf4:	00000906 	br	8ae1c <___vfprintf_internal_r+0x234>
   8adf8:	00c00404 	movi	r3,16
   8adfc:	d8c00a15 	stw	r3,40(sp)
   8ae00:	e0c00104 	addi	r3,fp,4
   8ae04:	d8c00d15 	stw	r3,52(sp)
   8ae08:	e7000017 	ldw	fp,0(fp)
   8ae0c:	0027883a 	mov	r19,zero
   8ae10:	00000106 	br	8ae18 <___vfprintf_internal_r+0x230>
   8ae14:	04c00044 	movi	r19,1
   8ae18:	0015883a 	mov	r10,zero
   8ae1c:	002f883a 	mov	r23,zero
   8ae20:	dde9883a 	add	r20,sp,r23
   8ae24:	e0001526 	beq	fp,zero,8ae7c <___vfprintf_internal_r+0x294>
   8ae28:	d9400a17 	ldw	r5,40(sp)
   8ae2c:	e009883a 	mov	r4,fp
   8ae30:	da801015 	stw	r10,64(sp)
   8ae34:	00878740 	call	87874 <__udivsi3>
   8ae38:	d8c00a17 	ldw	r3,40(sp)
   8ae3c:	da801017 	ldw	r10,64(sp)
   8ae40:	1889383a 	mul	r4,r3,r2
   8ae44:	00c00244 	movi	r3,9
   8ae48:	e139c83a 	sub	fp,fp,r4
   8ae4c:	1f000216 	blt	r3,fp,8ae58 <___vfprintf_internal_r+0x270>
   8ae50:	e7000c04 	addi	fp,fp,48
   8ae54:	00000506 	br	8ae6c <___vfprintf_internal_r+0x284>
   8ae58:	d8c00e17 	ldw	r3,56(sp)
   8ae5c:	18000226 	beq	r3,zero,8ae68 <___vfprintf_internal_r+0x280>
   8ae60:	e7000dc4 	addi	fp,fp,55
   8ae64:	00000106 	br	8ae6c <___vfprintf_internal_r+0x284>
   8ae68:	e70015c4 	addi	fp,fp,87
   8ae6c:	a7000005 	stb	fp,0(r20)
   8ae70:	bdc00044 	addi	r23,r23,1
   8ae74:	1039883a 	mov	fp,r2
   8ae78:	003fe906 	br	8ae20 <__alt_data_end+0xfffd2bb0>
   8ae7c:	a6f9c83a 	sub	fp,r20,sp
   8ae80:	9709c83a 	sub	r4,r18,fp
   8ae84:	01000d0e 	bge	zero,r4,8aebc <___vfprintf_internal_r+0x2d4>
   8ae88:	a005883a 	mov	r2,r20
   8ae8c:	a10b883a 	add	r5,r20,r4
   8ae90:	01800c04 	movi	r6,48
   8ae94:	d8c00917 	ldw	r3,36(sp)
   8ae98:	10c0062e 	bgeu	r2,r3,8aeb4 <___vfprintf_internal_r+0x2cc>
   8ae9c:	11000044 	addi	r4,r2,1
   8aea0:	11800005 	stb	r6,0(r2)
   8aea4:	2029883a 	mov	r20,r4
   8aea8:	21400326 	beq	r4,r5,8aeb8 <___vfprintf_internal_r+0x2d0>
   8aeac:	2005883a 	mov	r2,r4
   8aeb0:	003ff806 	br	8ae94 <__alt_data_end+0xfffd2c24>
   8aeb4:	1029883a 	mov	r20,r2
   8aeb8:	a6f9c83a 	sub	fp,r20,sp
   8aebc:	d8c00b17 	ldw	r3,44(sp)
   8aec0:	e293883a 	add	r9,fp,r10
   8aec4:	8a6fc83a 	sub	r23,r17,r9
   8aec8:	18001626 	beq	r3,zero,8af24 <___vfprintf_internal_r+0x33c>
   8aecc:	50000a26 	beq	r10,zero,8aef8 <___vfprintf_internal_r+0x310>
   8aed0:	00800b44 	movi	r2,45
   8aed4:	d8800805 	stb	r2,32(sp)
   8aed8:	a8800117 	ldw	r2,4(r21)
   8aedc:	8009883a 	mov	r4,r16
   8aee0:	a80b883a 	mov	r5,r21
   8aee4:	d9800804 	addi	r6,sp,32
   8aee8:	01c00044 	movi	r7,1
   8aeec:	103ee83a 	callr	r2
   8aef0:	1000491e 	bne	r2,zero,8b018 <___vfprintf_internal_r+0x430>
   8aef4:	b5800044 	addi	r22,r22,1
   8aef8:	05c0070e 	bge	zero,r23,8af18 <___vfprintf_internal_r+0x330>
   8aefc:	8009883a 	mov	r4,r16
   8af00:	a80b883a 	mov	r5,r21
   8af04:	01800c04 	movi	r6,48
   8af08:	b80f883a 	mov	r7,r23
   8af0c:	008ab7c0 	call	8ab7c <print_repeat>
   8af10:	1000411e 	bne	r2,zero,8b018 <___vfprintf_internal_r+0x430>
   8af14:	b5ed883a 	add	r22,r22,r23
   8af18:	b52d883a 	add	r22,r22,r20
   8af1c:	e539c83a 	sub	fp,fp,r20
   8af20:	00002006 	br	8afa4 <___vfprintf_internal_r+0x3bc>
   8af24:	05c0090e 	bge	zero,r23,8af4c <___vfprintf_internal_r+0x364>
   8af28:	8009883a 	mov	r4,r16
   8af2c:	a80b883a 	mov	r5,r21
   8af30:	01800804 	movi	r6,32
   8af34:	b80f883a 	mov	r7,r23
   8af38:	da801015 	stw	r10,64(sp)
   8af3c:	008ab7c0 	call	8ab7c <print_repeat>
   8af40:	da801017 	ldw	r10,64(sp)
   8af44:	1000341e 	bne	r2,zero,8b018 <___vfprintf_internal_r+0x430>
   8af48:	b5ed883a 	add	r22,r22,r23
   8af4c:	503ff226 	beq	r10,zero,8af18 <__alt_data_end+0xfffd2ca8>
   8af50:	00800b44 	movi	r2,45
   8af54:	d8800805 	stb	r2,32(sp)
   8af58:	a8800117 	ldw	r2,4(r21)
   8af5c:	8009883a 	mov	r4,r16
   8af60:	a80b883a 	mov	r5,r21
   8af64:	d9800804 	addi	r6,sp,32
   8af68:	01c00044 	movi	r7,1
   8af6c:	103ee83a 	callr	r2
   8af70:	1000291e 	bne	r2,zero,8b018 <___vfprintf_internal_r+0x430>
   8af74:	b5800044 	addi	r22,r22,1
   8af78:	003fe706 	br	8af18 <__alt_data_end+0xfffd2ca8>
   8af7c:	a53fffc4 	addi	r20,r20,-1
   8af80:	a0800003 	ldbu	r2,0(r20)
   8af84:	8009883a 	mov	r4,r16
   8af88:	a80b883a 	mov	r5,r21
   8af8c:	d8800805 	stb	r2,32(sp)
   8af90:	a8800117 	ldw	r2,4(r21)
   8af94:	d9800804 	addi	r6,sp,32
   8af98:	01c00044 	movi	r7,1
   8af9c:	103ee83a 	callr	r2
   8afa0:	10001d1e 	bne	r2,zero,8b018 <___vfprintf_internal_r+0x430>
   8afa4:	e505883a 	add	r2,fp,r20
   8afa8:	b507c83a 	sub	r3,r22,r20
   8afac:	00bff316 	blt	zero,r2,8af7c <__alt_data_end+0xfffd2d0c>
   8afb0:	182d883a 	mov	r22,r3
   8afb4:	df000d17 	ldw	fp,52(sp)
   8afb8:	00004406 	br	8b0cc <___vfprintf_internal_r+0x4e4>
   8afbc:	00800044 	movi	r2,1
   8afc0:	1440080e 	bge	r2,r17,8afe4 <___vfprintf_internal_r+0x3fc>
   8afc4:	8d3fffc4 	addi	r20,r17,-1
   8afc8:	8009883a 	mov	r4,r16
   8afcc:	a80b883a 	mov	r5,r21
   8afd0:	01800804 	movi	r6,32
   8afd4:	a00f883a 	mov	r7,r20
   8afd8:	008ab7c0 	call	8ab7c <print_repeat>
   8afdc:	10000e1e 	bne	r2,zero,8b018 <___vfprintf_internal_r+0x430>
   8afe0:	b52d883a 	add	r22,r22,r20
   8afe4:	e0800017 	ldw	r2,0(fp)
   8afe8:	8009883a 	mov	r4,r16
   8afec:	a80b883a 	mov	r5,r21
   8aff0:	d8800005 	stb	r2,0(sp)
   8aff4:	a8800117 	ldw	r2,4(r21)
   8aff8:	d80d883a 	mov	r6,sp
   8affc:	01c00044 	movi	r7,1
   8b000:	e5000104 	addi	r20,fp,4
   8b004:	103ee83a 	callr	r2
   8b008:	1000031e 	bne	r2,zero,8b018 <___vfprintf_internal_r+0x430>
   8b00c:	b5800044 	addi	r22,r22,1
   8b010:	a039883a 	mov	fp,r20
   8b014:	00002d06 	br	8b0cc <___vfprintf_internal_r+0x4e4>
   8b018:	00bfffc4 	movi	r2,-1
   8b01c:	00003406 	br	8b0f0 <___vfprintf_internal_r+0x508>
   8b020:	e5000017 	ldw	r20,0(fp)
   8b024:	e5c00104 	addi	r23,fp,4
   8b028:	a009883a 	mov	r4,r20
   8b02c:	008a5980 	call	8a598 <strlen>
   8b030:	8893c83a 	sub	r9,r17,r2
   8b034:	1039883a 	mov	fp,r2
   8b038:	0240090e 	bge	zero,r9,8b060 <___vfprintf_internal_r+0x478>
   8b03c:	480f883a 	mov	r7,r9
   8b040:	8009883a 	mov	r4,r16
   8b044:	a80b883a 	mov	r5,r21
   8b048:	01800804 	movi	r6,32
   8b04c:	da401015 	stw	r9,64(sp)
   8b050:	008ab7c0 	call	8ab7c <print_repeat>
   8b054:	da401017 	ldw	r9,64(sp)
   8b058:	103fef1e 	bne	r2,zero,8b018 <__alt_data_end+0xfffd2da8>
   8b05c:	b26d883a 	add	r22,r22,r9
   8b060:	a8800117 	ldw	r2,4(r21)
   8b064:	8009883a 	mov	r4,r16
   8b068:	a80b883a 	mov	r5,r21
   8b06c:	a00d883a 	mov	r6,r20
   8b070:	e00f883a 	mov	r7,fp
   8b074:	103ee83a 	callr	r2
   8b078:	103fe71e 	bne	r2,zero,8b018 <__alt_data_end+0xfffd2da8>
   8b07c:	b72d883a 	add	r22,r22,fp
   8b080:	b839883a 	mov	fp,r23
   8b084:	00001106 	br	8b0cc <___vfprintf_internal_r+0x4e4>
   8b088:	04c00044 	movi	r19,1
   8b08c:	00c00284 	movi	r3,10
   8b090:	04bfffc4 	movi	r18,-1
   8b094:	d8000e15 	stw	zero,56(sp)
   8b098:	d8c00a15 	stw	r3,40(sp)
   8b09c:	9023883a 	mov	r17,r18
   8b0a0:	d8000c15 	stw	zero,48(sp)
   8b0a4:	d8000b15 	stw	zero,44(sp)
   8b0a8:	9829883a 	mov	r20,r19
   8b0ac:	00000806 	br	8b0d0 <___vfprintf_internal_r+0x4e8>
   8b0b0:	dd000b15 	stw	r20,44(sp)
   8b0b4:	05000084 	movi	r20,2
   8b0b8:	00000506 	br	8b0d0 <___vfprintf_internal_r+0x4e8>
   8b0bc:	00c00044 	movi	r3,1
   8b0c0:	d8c00c15 	stw	r3,48(sp)
   8b0c4:	050000c4 	movi	r20,3
   8b0c8:	00000106 	br	8b0d0 <___vfprintf_internal_r+0x4e8>
   8b0cc:	0029883a 	mov	r20,zero
   8b0d0:	d8c00f17 	ldw	r3,60(sp)
   8b0d4:	18c00044 	addi	r3,r3,1
   8b0d8:	d8c00f15 	stw	r3,60(sp)
   8b0dc:	003edc06 	br	8ac50 <__alt_data_end+0xfffd29e0>
   8b0e0:	b005883a 	mov	r2,r22
   8b0e4:	00000206 	br	8b0f0 <___vfprintf_internal_r+0x508>
   8b0e8:	00c00204 	movi	r3,8
   8b0ec:	003f4306 	br	8adfc <__alt_data_end+0xfffd2b8c>
   8b0f0:	dfc01a17 	ldw	ra,104(sp)
   8b0f4:	df001917 	ldw	fp,100(sp)
   8b0f8:	ddc01817 	ldw	r23,96(sp)
   8b0fc:	dd801717 	ldw	r22,92(sp)
   8b100:	dd401617 	ldw	r21,88(sp)
   8b104:	dd001517 	ldw	r20,84(sp)
   8b108:	dcc01417 	ldw	r19,80(sp)
   8b10c:	dc801317 	ldw	r18,76(sp)
   8b110:	dc401217 	ldw	r17,72(sp)
   8b114:	dc001117 	ldw	r16,68(sp)
   8b118:	dec01b04 	addi	sp,sp,108
   8b11c:	f800283a 	ret

0008b120 <__vfprintf_internal>:
   8b120:	2007883a 	mov	r3,r4
   8b124:	010002f4 	movhi	r4,11
   8b128:	212cac04 	addi	r4,r4,-19792
   8b12c:	21000017 	ldw	r4,0(r4)
   8b130:	2805883a 	mov	r2,r5
   8b134:	300f883a 	mov	r7,r6
   8b138:	180b883a 	mov	r5,r3
   8b13c:	100d883a 	mov	r6,r2
   8b140:	008abe81 	jmpi	8abe8 <___vfprintf_internal_r>

0008b144 <_vsnprintf_r>:
   8b144:	defff604 	addi	sp,sp,-40
   8b148:	dc400815 	stw	r17,32(sp)
   8b14c:	dc000715 	stw	r16,28(sp)
   8b150:	dfc00915 	stw	ra,36(sp)
   8b154:	2023883a 	mov	r17,r4
   8b158:	3021883a 	mov	r16,r6
   8b15c:	3000040e 	bge	r6,zero,8b170 <_vsnprintf_r+0x2c>
   8b160:	008022c4 	movi	r2,139
   8b164:	20800015 	stw	r2,0(r4)
   8b168:	00bfffc4 	movi	r2,-1
   8b16c:	00001e06 	br	8b1e8 <_vsnprintf_r+0xa4>
   8b170:	00808204 	movi	r2,520
   8b174:	d880000d 	sth	r2,0(sp)
   8b178:	d9400415 	stw	r5,16(sp)
   8b17c:	d9400215 	stw	r5,8(sp)
   8b180:	380d883a 	mov	r6,r7
   8b184:	80000226 	beq	r16,zero,8b190 <_vsnprintf_r+0x4c>
   8b188:	80bfffc4 	addi	r2,r16,-1
   8b18c:	00000106 	br	8b194 <_vsnprintf_r+0x50>
   8b190:	0005883a 	mov	r2,zero
   8b194:	d8800515 	stw	r2,20(sp)
   8b198:	d8800315 	stw	r2,12(sp)
   8b19c:	00bfffc4 	movi	r2,-1
   8b1a0:	d880008d 	sth	r2,2(sp)
   8b1a4:	00800274 	movhi	r2,9
   8b1a8:	10ada904 	addi	r2,r2,-18780
   8b1ac:	d8800115 	stw	r2,4(sp)
   8b1b0:	008002f4 	movhi	r2,11
   8b1b4:	10acac04 	addi	r2,r2,-19792
   8b1b8:	11000017 	ldw	r4,0(r2)
   8b1bc:	d9c00a17 	ldw	r7,40(sp)
   8b1c0:	d80b883a 	mov	r5,sp
   8b1c4:	d8000615 	stw	zero,24(sp)
   8b1c8:	008a6200 	call	8a620 <___svfprintf_internal_r>
   8b1cc:	00ffffc4 	movi	r3,-1
   8b1d0:	10c0020e 	bge	r2,r3,8b1dc <_vsnprintf_r+0x98>
   8b1d4:	00c022c4 	movi	r3,139
   8b1d8:	88c00015 	stw	r3,0(r17)
   8b1dc:	80000226 	beq	r16,zero,8b1e8 <_vsnprintf_r+0xa4>
   8b1e0:	d8c00417 	ldw	r3,16(sp)
   8b1e4:	18000005 	stb	zero,0(r3)
   8b1e8:	dfc00917 	ldw	ra,36(sp)
   8b1ec:	dc400817 	ldw	r17,32(sp)
   8b1f0:	dc000717 	ldw	r16,28(sp)
   8b1f4:	dec00a04 	addi	sp,sp,40
   8b1f8:	f800283a 	ret

0008b1fc <vsnprintf>:
   8b1fc:	defffe04 	addi	sp,sp,-8
   8b200:	2011883a 	mov	r8,r4
   8b204:	d9c00015 	stw	r7,0(sp)
   8b208:	010002f4 	movhi	r4,11
   8b20c:	212cac04 	addi	r4,r4,-19792
   8b210:	21000017 	ldw	r4,0(r4)
   8b214:	2807883a 	mov	r3,r5
   8b218:	3005883a 	mov	r2,r6
   8b21c:	400b883a 	mov	r5,r8
   8b220:	180d883a 	mov	r6,r3
   8b224:	100f883a 	mov	r7,r2
   8b228:	dfc00115 	stw	ra,4(sp)
   8b22c:	008b1440 	call	8b144 <_vsnprintf_r>
   8b230:	dfc00117 	ldw	ra,4(sp)
   8b234:	dec00204 	addi	sp,sp,8
   8b238:	f800283a 	ret

0008b23c <_malloc_trim_r>:
   8b23c:	defffb04 	addi	sp,sp,-20
   8b240:	dcc00315 	stw	r19,12(sp)
   8b244:	dc800215 	stw	r18,8(sp)
   8b248:	dc400115 	stw	r17,4(sp)
   8b24c:	dc000015 	stw	r16,0(sp)
   8b250:	2823883a 	mov	r17,r5
   8b254:	dfc00415 	stw	ra,16(sp)
   8b258:	2021883a 	mov	r16,r4
   8b25c:	048002f4 	movhi	r18,11
   8b260:	94a72404 	addi	r18,r18,-25456
   8b264:	008bd680 	call	8bd68 <__malloc_lock>
   8b268:	90800217 	ldw	r2,8(r18)
   8b26c:	14c00117 	ldw	r19,4(r2)
   8b270:	00bfff04 	movi	r2,-4
   8b274:	98a6703a 	and	r19,r19,r2
   8b278:	9c63c83a 	sub	r17,r19,r17
   8b27c:	8c401bc4 	addi	r17,r17,111
   8b280:	8822d1fa 	srli	r17,r17,7
   8b284:	00801fc4 	movi	r2,127
   8b288:	8c7fffc4 	addi	r17,r17,-1
   8b28c:	882291fa 	slli	r17,r17,7
   8b290:	14400416 	blt	r2,r17,8b2a4 <_malloc_trim_r+0x68>
   8b294:	8009883a 	mov	r4,r16
   8b298:	008bd880 	call	8bd88 <__malloc_unlock>
   8b29c:	0005883a 	mov	r2,zero
   8b2a0:	00002806 	br	8b344 <_malloc_trim_r+0x108>
   8b2a4:	8009883a 	mov	r4,r16
   8b2a8:	000b883a 	mov	r5,zero
   8b2ac:	008a44c0 	call	8a44c <_sbrk_r>
   8b2b0:	90c00217 	ldw	r3,8(r18)
   8b2b4:	1cc7883a 	add	r3,r3,r19
   8b2b8:	10fff61e 	bne	r2,r3,8b294 <__alt_data_end+0xfffd3024>
   8b2bc:	8009883a 	mov	r4,r16
   8b2c0:	044bc83a 	sub	r5,zero,r17
   8b2c4:	008a44c0 	call	8a44c <_sbrk_r>
   8b2c8:	00ffffc4 	movi	r3,-1
   8b2cc:	10c0111e 	bne	r2,r3,8b314 <_malloc_trim_r+0xd8>
   8b2d0:	8009883a 	mov	r4,r16
   8b2d4:	000b883a 	mov	r5,zero
   8b2d8:	008a44c0 	call	8a44c <_sbrk_r>
   8b2dc:	90c00217 	ldw	r3,8(r18)
   8b2e0:	014003c4 	movi	r5,15
   8b2e4:	10c9c83a 	sub	r4,r2,r3
   8b2e8:	293fea0e 	bge	r5,r4,8b294 <__alt_data_end+0xfffd3024>
   8b2ec:	014002f4 	movhi	r5,11
   8b2f0:	296cad04 	addi	r5,r5,-19788
   8b2f4:	29400017 	ldw	r5,0(r5)
   8b2f8:	21000054 	ori	r4,r4,1
   8b2fc:	19000115 	stw	r4,4(r3)
   8b300:	1145c83a 	sub	r2,r2,r5
   8b304:	014002f4 	movhi	r5,11
   8b308:	29797c04 	addi	r5,r5,-6672
   8b30c:	28800015 	stw	r2,0(r5)
   8b310:	003fe006 	br	8b294 <__alt_data_end+0xfffd3024>
   8b314:	90800217 	ldw	r2,8(r18)
   8b318:	9c67c83a 	sub	r19,r19,r17
   8b31c:	9cc00054 	ori	r19,r19,1
   8b320:	14c00115 	stw	r19,4(r2)
   8b324:	008002f4 	movhi	r2,11
   8b328:	10b97c04 	addi	r2,r2,-6672
   8b32c:	10c00017 	ldw	r3,0(r2)
   8b330:	8009883a 	mov	r4,r16
   8b334:	1c63c83a 	sub	r17,r3,r17
   8b338:	14400015 	stw	r17,0(r2)
   8b33c:	008bd880 	call	8bd88 <__malloc_unlock>
   8b340:	00800044 	movi	r2,1
   8b344:	dfc00417 	ldw	ra,16(sp)
   8b348:	dcc00317 	ldw	r19,12(sp)
   8b34c:	dc800217 	ldw	r18,8(sp)
   8b350:	dc400117 	ldw	r17,4(sp)
   8b354:	dc000017 	ldw	r16,0(sp)
   8b358:	dec00504 	addi	sp,sp,20
   8b35c:	f800283a 	ret

0008b360 <_free_r>:
   8b360:	defffd04 	addi	sp,sp,-12
   8b364:	dc400115 	stw	r17,4(sp)
   8b368:	dfc00215 	stw	ra,8(sp)
   8b36c:	dc000015 	stw	r16,0(sp)
   8b370:	2823883a 	mov	r17,r5
   8b374:	28009b26 	beq	r5,zero,8b5e4 <_free_r+0x284>
   8b378:	2021883a 	mov	r16,r4
   8b37c:	008bd680 	call	8bd68 <__malloc_lock>
   8b380:	893fff17 	ldw	r4,-4(r17)
   8b384:	00ffff84 	movi	r3,-2
   8b388:	88bffe04 	addi	r2,r17,-8
   8b38c:	20c6703a 	and	r3,r4,r3
   8b390:	10cf883a 	add	r7,r2,r3
   8b394:	39800117 	ldw	r6,4(r7)
   8b398:	017fff04 	movi	r5,-4
   8b39c:	2100004c 	andi	r4,r4,1
   8b3a0:	314a703a 	and	r5,r6,r5
   8b3a4:	018002f4 	movhi	r6,11
   8b3a8:	31a72404 	addi	r6,r6,-25456
   8b3ac:	32000217 	ldw	r8,8(r6)
   8b3b0:	3a001b1e 	bne	r7,r8,8b420 <_free_r+0xc0>
   8b3b4:	28c7883a 	add	r3,r5,r3
   8b3b8:	2000071e 	bne	r4,zero,8b3d8 <_free_r+0x78>
   8b3bc:	893ffe17 	ldw	r4,-8(r17)
   8b3c0:	1105c83a 	sub	r2,r2,r4
   8b3c4:	11400217 	ldw	r5,8(r2)
   8b3c8:	1907883a 	add	r3,r3,r4
   8b3cc:	11000317 	ldw	r4,12(r2)
   8b3d0:	29000315 	stw	r4,12(r5)
   8b3d4:	21400215 	stw	r5,8(r4)
   8b3d8:	19000054 	ori	r4,r3,1
   8b3dc:	11000115 	stw	r4,4(r2)
   8b3e0:	30800215 	stw	r2,8(r6)
   8b3e4:	008002f4 	movhi	r2,11
   8b3e8:	10acae04 	addi	r2,r2,-19784
   8b3ec:	10800017 	ldw	r2,0(r2)
   8b3f0:	18800536 	bltu	r3,r2,8b408 <_free_r+0xa8>
   8b3f4:	008002f4 	movhi	r2,11
   8b3f8:	10b97404 	addi	r2,r2,-6704
   8b3fc:	11400017 	ldw	r5,0(r2)
   8b400:	8009883a 	mov	r4,r16
   8b404:	008b23c0 	call	8b23c <_malloc_trim_r>
   8b408:	8009883a 	mov	r4,r16
   8b40c:	dfc00217 	ldw	ra,8(sp)
   8b410:	dc400117 	ldw	r17,4(sp)
   8b414:	dc000017 	ldw	r16,0(sp)
   8b418:	dec00304 	addi	sp,sp,12
   8b41c:	008bd881 	jmpi	8bd88 <__malloc_unlock>
   8b420:	39400115 	stw	r5,4(r7)
   8b424:	2000091e 	bne	r4,zero,8b44c <_free_r+0xec>
   8b428:	893ffe17 	ldw	r4,-8(r17)
   8b42c:	32000204 	addi	r8,r6,8
   8b430:	1105c83a 	sub	r2,r2,r4
   8b434:	1907883a 	add	r3,r3,r4
   8b438:	11000217 	ldw	r4,8(r2)
   8b43c:	22000526 	beq	r4,r8,8b454 <_free_r+0xf4>
   8b440:	12000317 	ldw	r8,12(r2)
   8b444:	22000315 	stw	r8,12(r4)
   8b448:	41000215 	stw	r4,8(r8)
   8b44c:	0009883a 	mov	r4,zero
   8b450:	00000106 	br	8b458 <_free_r+0xf8>
   8b454:	01000044 	movi	r4,1
   8b458:	3951883a 	add	r8,r7,r5
   8b45c:	42000117 	ldw	r8,4(r8)
   8b460:	4200004c 	andi	r8,r8,1
   8b464:	40000f1e 	bne	r8,zero,8b4a4 <_free_r+0x144>
   8b468:	1947883a 	add	r3,r3,r5
   8b46c:	39400217 	ldw	r5,8(r7)
   8b470:	2000091e 	bne	r4,zero,8b498 <_free_r+0x138>
   8b474:	020002f4 	movhi	r8,11
   8b478:	42272604 	addi	r8,r8,-25448
   8b47c:	2a00061e 	bne	r5,r8,8b498 <_free_r+0x138>
   8b480:	30800515 	stw	r2,20(r6)
   8b484:	30800415 	stw	r2,16(r6)
   8b488:	11400315 	stw	r5,12(r2)
   8b48c:	11400215 	stw	r5,8(r2)
   8b490:	01000044 	movi	r4,1
   8b494:	00000306 	br	8b4a4 <_free_r+0x144>
   8b498:	39c00317 	ldw	r7,12(r7)
   8b49c:	29c00315 	stw	r7,12(r5)
   8b4a0:	39400215 	stw	r5,8(r7)
   8b4a4:	19400054 	ori	r5,r3,1
   8b4a8:	11400115 	stw	r5,4(r2)
   8b4ac:	10cb883a 	add	r5,r2,r3
   8b4b0:	28c00015 	stw	r3,0(r5)
   8b4b4:	203fd41e 	bne	r4,zero,8b408 <__alt_data_end+0xfffd3198>
   8b4b8:	01007fc4 	movi	r4,511
   8b4bc:	20c01136 	bltu	r4,r3,8b504 <_free_r+0x1a4>
   8b4c0:	1806d0fa 	srli	r3,r3,3
   8b4c4:	01400044 	movi	r5,1
   8b4c8:	1809d0ba 	srai	r4,r3,2
   8b4cc:	18c7883a 	add	r3,r3,r3
   8b4d0:	18c7883a 	add	r3,r3,r3
   8b4d4:	2908983a 	sll	r4,r5,r4
   8b4d8:	31400117 	ldw	r5,4(r6)
   8b4dc:	18c7883a 	add	r3,r3,r3
   8b4e0:	2148b03a 	or	r4,r4,r5
   8b4e4:	31000115 	stw	r4,4(r6)
   8b4e8:	30cd883a 	add	r6,r6,r3
   8b4ec:	30c00217 	ldw	r3,8(r6)
   8b4f0:	11800315 	stw	r6,12(r2)
   8b4f4:	10c00215 	stw	r3,8(r2)
   8b4f8:	30800215 	stw	r2,8(r6)
   8b4fc:	18800315 	stw	r2,12(r3)
   8b500:	003fc106 	br	8b408 <__alt_data_end+0xfffd3198>
   8b504:	180ad27a 	srli	r5,r3,9
   8b508:	01000104 	movi	r4,4
   8b50c:	21400336 	bltu	r4,r5,8b51c <_free_r+0x1bc>
   8b510:	180ad1ba 	srli	r5,r3,6
   8b514:	29400e04 	addi	r5,r5,56
   8b518:	00001406 	br	8b56c <_free_r+0x20c>
   8b51c:	01000504 	movi	r4,20
   8b520:	21400236 	bltu	r4,r5,8b52c <_free_r+0x1cc>
   8b524:	294016c4 	addi	r5,r5,91
   8b528:	00001006 	br	8b56c <_free_r+0x20c>
   8b52c:	01001504 	movi	r4,84
   8b530:	21400336 	bltu	r4,r5,8b540 <_free_r+0x1e0>
   8b534:	180ad33a 	srli	r5,r3,12
   8b538:	29401b84 	addi	r5,r5,110
   8b53c:	00000b06 	br	8b56c <_free_r+0x20c>
   8b540:	01005504 	movi	r4,340
   8b544:	21400336 	bltu	r4,r5,8b554 <_free_r+0x1f4>
   8b548:	180ad3fa 	srli	r5,r3,15
   8b54c:	29401dc4 	addi	r5,r5,119
   8b550:	00000606 	br	8b56c <_free_r+0x20c>
   8b554:	01015504 	movi	r4,1364
   8b558:	21400336 	bltu	r4,r5,8b568 <_free_r+0x208>
   8b55c:	180ad4ba 	srli	r5,r3,18
   8b560:	29401f04 	addi	r5,r5,124
   8b564:	00000106 	br	8b56c <_free_r+0x20c>
   8b568:	01401f84 	movi	r5,126
   8b56c:	2949883a 	add	r4,r5,r5
   8b570:	2109883a 	add	r4,r4,r4
   8b574:	210f883a 	add	r7,r4,r4
   8b578:	31cd883a 	add	r6,r6,r7
   8b57c:	31c00217 	ldw	r7,8(r6)
   8b580:	010002f4 	movhi	r4,11
   8b584:	21272404 	addi	r4,r4,-25456
   8b588:	39800326 	beq	r7,r6,8b598 <_free_r+0x238>
   8b58c:	380b883a 	mov	r5,r7
   8b590:	01ffff04 	movi	r7,-4
   8b594:	00000a06 	br	8b5c0 <_free_r+0x260>
   8b598:	280bd0ba 	srai	r5,r5,2
   8b59c:	00c00044 	movi	r3,1
   8b5a0:	194a983a 	sll	r5,r3,r5
   8b5a4:	20c00117 	ldw	r3,4(r4)
   8b5a8:	28cab03a 	or	r5,r5,r3
   8b5ac:	21400115 	stw	r5,4(r4)
   8b5b0:	380b883a 	mov	r5,r7
   8b5b4:	00000606 	br	8b5d0 <_free_r+0x270>
   8b5b8:	29400217 	ldw	r5,8(r5)
   8b5bc:	29800326 	beq	r5,r6,8b5cc <_free_r+0x26c>
   8b5c0:	29000117 	ldw	r4,4(r5)
   8b5c4:	21c8703a 	and	r4,r4,r7
   8b5c8:	193ffb36 	bltu	r3,r4,8b5b8 <__alt_data_end+0xfffd3348>
   8b5cc:	29c00317 	ldw	r7,12(r5)
   8b5d0:	11c00315 	stw	r7,12(r2)
   8b5d4:	11400215 	stw	r5,8(r2)
   8b5d8:	38800215 	stw	r2,8(r7)
   8b5dc:	28800315 	stw	r2,12(r5)
   8b5e0:	003f8906 	br	8b408 <__alt_data_end+0xfffd3198>
   8b5e4:	dfc00217 	ldw	ra,8(sp)
   8b5e8:	dc400117 	ldw	r17,4(sp)
   8b5ec:	dc000017 	ldw	r16,0(sp)
   8b5f0:	dec00304 	addi	sp,sp,12
   8b5f4:	f800283a 	ret

0008b5f8 <__sfvwrite_small_dev>:
   8b5f8:	2880000b 	ldhu	r2,0(r5)
   8b5fc:	defffa04 	addi	sp,sp,-24
   8b600:	dc000015 	stw	r16,0(sp)
   8b604:	dfc00515 	stw	ra,20(sp)
   8b608:	dd000415 	stw	r20,16(sp)
   8b60c:	dcc00315 	stw	r19,12(sp)
   8b610:	dc800215 	stw	r18,8(sp)
   8b614:	dc400115 	stw	r17,4(sp)
   8b618:	1080020c 	andi	r2,r2,8
   8b61c:	2821883a 	mov	r16,r5
   8b620:	10001726 	beq	r2,zero,8b680 <__sfvwrite_small_dev+0x88>
   8b624:	2880008f 	ldh	r2,2(r5)
   8b628:	10001216 	blt	r2,zero,8b674 <__sfvwrite_small_dev+0x7c>
   8b62c:	2027883a 	mov	r19,r4
   8b630:	3025883a 	mov	r18,r6
   8b634:	3823883a 	mov	r17,r7
   8b638:	05010004 	movi	r20,1024
   8b63c:	04400b0e 	bge	zero,r17,8b66c <__sfvwrite_small_dev+0x74>
   8b640:	8140008f 	ldh	r5,2(r16)
   8b644:	880f883a 	mov	r7,r17
   8b648:	a440010e 	bge	r20,r17,8b650 <__sfvwrite_small_dev+0x58>
   8b64c:	01c10004 	movi	r7,1024
   8b650:	9809883a 	mov	r4,r19
   8b654:	900d883a 	mov	r6,r18
   8b658:	008b7ac0 	call	8b7ac <_write_r>
   8b65c:	0080050e 	bge	zero,r2,8b674 <__sfvwrite_small_dev+0x7c>
   8b660:	88a3c83a 	sub	r17,r17,r2
   8b664:	90a5883a 	add	r18,r18,r2
   8b668:	003ff406 	br	8b63c <__alt_data_end+0xfffd33cc>
   8b66c:	0005883a 	mov	r2,zero
   8b670:	00000406 	br	8b684 <__sfvwrite_small_dev+0x8c>
   8b674:	8080000b 	ldhu	r2,0(r16)
   8b678:	10801014 	ori	r2,r2,64
   8b67c:	8080000d 	sth	r2,0(r16)
   8b680:	00bfffc4 	movi	r2,-1
   8b684:	dfc00517 	ldw	ra,20(sp)
   8b688:	dd000417 	ldw	r20,16(sp)
   8b68c:	dcc00317 	ldw	r19,12(sp)
   8b690:	dc800217 	ldw	r18,8(sp)
   8b694:	dc400117 	ldw	r17,4(sp)
   8b698:	dc000017 	ldw	r16,0(sp)
   8b69c:	dec00604 	addi	sp,sp,24
   8b6a0:	f800283a 	ret

0008b6a4 <__sfvwrite_small_str>:
   8b6a4:	2880000b 	ldhu	r2,0(r5)
   8b6a8:	defffd04 	addi	sp,sp,-12
   8b6ac:	dc000015 	stw	r16,0(sp)
   8b6b0:	dfc00215 	stw	ra,8(sp)
   8b6b4:	dc400115 	stw	r17,4(sp)
   8b6b8:	10c0020c 	andi	r3,r2,8
   8b6bc:	2821883a 	mov	r16,r5
   8b6c0:	18001926 	beq	r3,zero,8b728 <__sfvwrite_small_str+0x84>
   8b6c4:	28c0008f 	ldh	r3,2(r5)
   8b6c8:	1800150e 	bge	r3,zero,8b720 <__sfvwrite_small_str+0x7c>
   8b6cc:	10c0800c 	andi	r3,r2,512
   8b6d0:	18001326 	beq	r3,zero,8b720 <__sfvwrite_small_str+0x7c>
   8b6d4:	84400517 	ldw	r17,20(r16)
   8b6d8:	300b883a 	mov	r5,r6
   8b6dc:	89c0030e 	bge	r17,r7,8b6ec <__sfvwrite_small_str+0x48>
   8b6e0:	10c0200c 	andi	r3,r2,128
   8b6e4:	18000326 	beq	r3,zero,8b6f4 <__sfvwrite_small_str+0x50>
   8b6e8:	00000d06 	br	8b720 <__sfvwrite_small_str+0x7c>
   8b6ec:	3c40010e 	bge	r7,r17,8b6f4 <__sfvwrite_small_str+0x50>
   8b6f0:	3823883a 	mov	r17,r7
   8b6f4:	81000417 	ldw	r4,16(r16)
   8b6f8:	880d883a 	mov	r6,r17
   8b6fc:	008b7400 	call	8b740 <memmove>
   8b700:	80800517 	ldw	r2,20(r16)
   8b704:	1445c83a 	sub	r2,r2,r17
   8b708:	80800515 	stw	r2,20(r16)
   8b70c:	80800417 	ldw	r2,16(r16)
   8b710:	1463883a 	add	r17,r2,r17
   8b714:	84400415 	stw	r17,16(r16)
   8b718:	0005883a 	mov	r2,zero
   8b71c:	00000306 	br	8b72c <__sfvwrite_small_str+0x88>
   8b720:	10801014 	ori	r2,r2,64
   8b724:	8080000d 	sth	r2,0(r16)
   8b728:	00bfffc4 	movi	r2,-1
   8b72c:	dfc00217 	ldw	ra,8(sp)
   8b730:	dc400117 	ldw	r17,4(sp)
   8b734:	dc000017 	ldw	r16,0(sp)
   8b738:	dec00304 	addi	sp,sp,12
   8b73c:	f800283a 	ret

0008b740 <memmove>:
   8b740:	2005883a 	mov	r2,r4
   8b744:	29000236 	bltu	r5,r4,8b750 <memmove+0x10>
   8b748:	0007883a 	mov	r3,zero
   8b74c:	00000f06 	br	8b78c <memmove+0x4c>
   8b750:	2989883a 	add	r4,r5,r6
   8b754:	113ffc2e 	bgeu	r2,r4,8b748 <__alt_data_end+0xfffd34d8>
   8b758:	0187c83a 	sub	r3,zero,r6
   8b75c:	118f883a 	add	r7,r2,r6
   8b760:	20c9883a 	add	r4,r4,r3
   8b764:	017fffc4 	movi	r5,-1
   8b768:	38c7883a 	add	r3,r7,r3
   8b76c:	31bfffc4 	addi	r6,r6,-1
   8b770:	31400526 	beq	r6,r5,8b788 <memmove+0x48>
   8b774:	218f883a 	add	r7,r4,r6
   8b778:	3a000003 	ldbu	r8,0(r7)
   8b77c:	198f883a 	add	r7,r3,r6
   8b780:	3a000005 	stb	r8,0(r7)
   8b784:	003ff906 	br	8b76c <__alt_data_end+0xfffd34fc>
   8b788:	f800283a 	ret
   8b78c:	19800626 	beq	r3,r6,8b7a8 <memmove+0x68>
   8b790:	28c9883a 	add	r4,r5,r3
   8b794:	21c00003 	ldbu	r7,0(r4)
   8b798:	10c9883a 	add	r4,r2,r3
   8b79c:	18c00044 	addi	r3,r3,1
   8b7a0:	21c00005 	stb	r7,0(r4)
   8b7a4:	003ff906 	br	8b78c <__alt_data_end+0xfffd351c>
   8b7a8:	f800283a 	ret

0008b7ac <_write_r>:
   8b7ac:	defffd04 	addi	sp,sp,-12
   8b7b0:	dc400115 	stw	r17,4(sp)
   8b7b4:	dc000015 	stw	r16,0(sp)
   8b7b8:	2023883a 	mov	r17,r4
   8b7bc:	040002f4 	movhi	r16,11
   8b7c0:	84397504 	addi	r16,r16,-6700
   8b7c4:	2809883a 	mov	r4,r5
   8b7c8:	300b883a 	mov	r5,r6
   8b7cc:	380d883a 	mov	r6,r7
   8b7d0:	dfc00215 	stw	ra,8(sp)
   8b7d4:	80000015 	stw	zero,0(r16)
   8b7d8:	008c0740 	call	8c074 <write>
   8b7dc:	00ffffc4 	movi	r3,-1
   8b7e0:	10c0031e 	bne	r2,r3,8b7f0 <_write_r+0x44>
   8b7e4:	80c00017 	ldw	r3,0(r16)
   8b7e8:	18000126 	beq	r3,zero,8b7f0 <_write_r+0x44>
   8b7ec:	88c00015 	stw	r3,0(r17)
   8b7f0:	dfc00217 	ldw	ra,8(sp)
   8b7f4:	dc400117 	ldw	r17,4(sp)
   8b7f8:	dc000017 	ldw	r16,0(sp)
   8b7fc:	dec00304 	addi	sp,sp,12
   8b800:	f800283a 	ret

0008b804 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   8b804:	defff504 	addi	sp,sp,-44
   8b808:	df000a15 	stw	fp,40(sp)
   8b80c:	df000a04 	addi	fp,sp,40
   8b810:	e13ffc15 	stw	r4,-16(fp)
   8b814:	e17ffd15 	stw	r5,-12(fp)
   8b818:	e1bffe15 	stw	r6,-8(fp)
   8b81c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8b820:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8b824:	008002f4 	movhi	r2,11
   8b828:	10b97a04 	addi	r2,r2,-6680
   8b82c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   8b830:	10003f26 	beq	r2,zero,8b930 <alt_alarm_start+0x12c>
  {
    if (alarm)
   8b834:	e0bffc17 	ldw	r2,-16(fp)
   8b838:	10003b26 	beq	r2,zero,8b928 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   8b83c:	e0bffc17 	ldw	r2,-16(fp)
   8b840:	e0fffe17 	ldw	r3,-8(fp)
   8b844:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   8b848:	e0bffc17 	ldw	r2,-16(fp)
   8b84c:	e0ffff17 	ldw	r3,-4(fp)
   8b850:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b854:	0005303a 	rdctl	r2,status
   8b858:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b85c:	e0fff817 	ldw	r3,-32(fp)
   8b860:	00bfff84 	movi	r2,-2
   8b864:	1884703a 	and	r2,r3,r2
   8b868:	1001703a 	wrctl	status,r2
  
  return context;
   8b86c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8b870:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8b874:	008002f4 	movhi	r2,11
   8b878:	10b97b04 	addi	r2,r2,-6676
   8b87c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8b880:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   8b884:	e0fffd17 	ldw	r3,-12(fp)
   8b888:	e0bff617 	ldw	r2,-40(fp)
   8b88c:	1885883a 	add	r2,r3,r2
   8b890:	10c00044 	addi	r3,r2,1
   8b894:	e0bffc17 	ldw	r2,-16(fp)
   8b898:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8b89c:	e0bffc17 	ldw	r2,-16(fp)
   8b8a0:	10c00217 	ldw	r3,8(r2)
   8b8a4:	e0bff617 	ldw	r2,-40(fp)
   8b8a8:	1880042e 	bgeu	r3,r2,8b8bc <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   8b8ac:	e0bffc17 	ldw	r2,-16(fp)
   8b8b0:	00c00044 	movi	r3,1
   8b8b4:	10c00405 	stb	r3,16(r2)
   8b8b8:	00000206 	br	8b8c4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   8b8bc:	e0bffc17 	ldw	r2,-16(fp)
   8b8c0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   8b8c4:	e0bffc17 	ldw	r2,-16(fp)
   8b8c8:	00c002f4 	movhi	r3,11
   8b8cc:	18ecb104 	addi	r3,r3,-19772
   8b8d0:	e0fff915 	stw	r3,-28(fp)
   8b8d4:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8b8d8:	e0bffa17 	ldw	r2,-24(fp)
   8b8dc:	e0fff917 	ldw	r3,-28(fp)
   8b8e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8b8e4:	e0bff917 	ldw	r2,-28(fp)
   8b8e8:	10c00017 	ldw	r3,0(r2)
   8b8ec:	e0bffa17 	ldw	r2,-24(fp)
   8b8f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8b8f4:	e0bff917 	ldw	r2,-28(fp)
   8b8f8:	10800017 	ldw	r2,0(r2)
   8b8fc:	e0fffa17 	ldw	r3,-24(fp)
   8b900:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8b904:	e0bff917 	ldw	r2,-28(fp)
   8b908:	e0fffa17 	ldw	r3,-24(fp)
   8b90c:	10c00015 	stw	r3,0(r2)
   8b910:	e0bff717 	ldw	r2,-36(fp)
   8b914:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8b918:	e0bffb17 	ldw	r2,-20(fp)
   8b91c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8b920:	0005883a 	mov	r2,zero
   8b924:	00000306 	br	8b934 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   8b928:	00bffa84 	movi	r2,-22
   8b92c:	00000106 	br	8b934 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   8b930:	00bfde84 	movi	r2,-134
  }
}
   8b934:	e037883a 	mov	sp,fp
   8b938:	df000017 	ldw	fp,0(sp)
   8b93c:	dec00104 	addi	sp,sp,4
   8b940:	f800283a 	ret

0008b944 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8b944:	defff904 	addi	sp,sp,-28
   8b948:	dfc00615 	stw	ra,24(sp)
   8b94c:	df000515 	stw	fp,20(sp)
   8b950:	df000504 	addi	fp,sp,20
   8b954:	e13ffc15 	stw	r4,-16(fp)
   8b958:	e17ffd15 	stw	r5,-12(fp)
   8b95c:	e1bffe15 	stw	r6,-8(fp)
   8b960:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8b964:	e0800217 	ldw	r2,8(fp)
   8b968:	d8800015 	stw	r2,0(sp)
   8b96c:	e13ffc17 	ldw	r4,-16(fp)
   8b970:	e17ffd17 	ldw	r5,-12(fp)
   8b974:	e1bffe17 	ldw	r6,-8(fp)
   8b978:	e1ffff17 	ldw	r7,-4(fp)
   8b97c:	008bb1c0 	call	8bb1c <alt_iic_isr_register>
}  
   8b980:	e037883a 	mov	sp,fp
   8b984:	dfc00117 	ldw	ra,4(sp)
   8b988:	df000017 	ldw	fp,0(sp)
   8b98c:	dec00204 	addi	sp,sp,8
   8b990:	f800283a 	ret

0008b994 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   8b994:	defff904 	addi	sp,sp,-28
   8b998:	df000615 	stw	fp,24(sp)
   8b99c:	df000604 	addi	fp,sp,24
   8b9a0:	e13ffe15 	stw	r4,-8(fp)
   8b9a4:	e17fff15 	stw	r5,-4(fp)
   8b9a8:	e0bfff17 	ldw	r2,-4(fp)
   8b9ac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8b9b0:	0005303a 	rdctl	r2,status
   8b9b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8b9b8:	e0fffb17 	ldw	r3,-20(fp)
   8b9bc:	00bfff84 	movi	r2,-2
   8b9c0:	1884703a 	and	r2,r3,r2
   8b9c4:	1001703a 	wrctl	status,r2
  
  return context;
   8b9c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8b9cc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   8b9d0:	e0bffa17 	ldw	r2,-24(fp)
   8b9d4:	00c00044 	movi	r3,1
   8b9d8:	1884983a 	sll	r2,r3,r2
   8b9dc:	1007883a 	mov	r3,r2
   8b9e0:	008002f4 	movhi	r2,11
   8b9e4:	10b97604 	addi	r2,r2,-6696
   8b9e8:	10800017 	ldw	r2,0(r2)
   8b9ec:	1886b03a 	or	r3,r3,r2
   8b9f0:	008002f4 	movhi	r2,11
   8b9f4:	10b97604 	addi	r2,r2,-6696
   8b9f8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8b9fc:	008002f4 	movhi	r2,11
   8ba00:	10b97604 	addi	r2,r2,-6696
   8ba04:	10800017 	ldw	r2,0(r2)
   8ba08:	100170fa 	wrctl	ienable,r2
   8ba0c:	e0bffc17 	ldw	r2,-16(fp)
   8ba10:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ba14:	e0bffd17 	ldw	r2,-12(fp)
   8ba18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8ba1c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   8ba20:	e037883a 	mov	sp,fp
   8ba24:	df000017 	ldw	fp,0(sp)
   8ba28:	dec00104 	addi	sp,sp,4
   8ba2c:	f800283a 	ret

0008ba30 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   8ba30:	defff904 	addi	sp,sp,-28
   8ba34:	df000615 	stw	fp,24(sp)
   8ba38:	df000604 	addi	fp,sp,24
   8ba3c:	e13ffe15 	stw	r4,-8(fp)
   8ba40:	e17fff15 	stw	r5,-4(fp)
   8ba44:	e0bfff17 	ldw	r2,-4(fp)
   8ba48:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ba4c:	0005303a 	rdctl	r2,status
   8ba50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ba54:	e0fffb17 	ldw	r3,-20(fp)
   8ba58:	00bfff84 	movi	r2,-2
   8ba5c:	1884703a 	and	r2,r3,r2
   8ba60:	1001703a 	wrctl	status,r2
  
  return context;
   8ba64:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   8ba68:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   8ba6c:	e0bffa17 	ldw	r2,-24(fp)
   8ba70:	00c00044 	movi	r3,1
   8ba74:	1884983a 	sll	r2,r3,r2
   8ba78:	0084303a 	nor	r2,zero,r2
   8ba7c:	1007883a 	mov	r3,r2
   8ba80:	008002f4 	movhi	r2,11
   8ba84:	10b97604 	addi	r2,r2,-6696
   8ba88:	10800017 	ldw	r2,0(r2)
   8ba8c:	1886703a 	and	r3,r3,r2
   8ba90:	008002f4 	movhi	r2,11
   8ba94:	10b97604 	addi	r2,r2,-6696
   8ba98:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8ba9c:	008002f4 	movhi	r2,11
   8baa0:	10b97604 	addi	r2,r2,-6696
   8baa4:	10800017 	ldw	r2,0(r2)
   8baa8:	100170fa 	wrctl	ienable,r2
   8baac:	e0bffc17 	ldw	r2,-16(fp)
   8bab0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bab4:	e0bffd17 	ldw	r2,-12(fp)
   8bab8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   8babc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   8bac0:	e037883a 	mov	sp,fp
   8bac4:	df000017 	ldw	fp,0(sp)
   8bac8:	dec00104 	addi	sp,sp,4
   8bacc:	f800283a 	ret

0008bad0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   8bad0:	defffc04 	addi	sp,sp,-16
   8bad4:	df000315 	stw	fp,12(sp)
   8bad8:	df000304 	addi	fp,sp,12
   8badc:	e13ffe15 	stw	r4,-8(fp)
   8bae0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8bae4:	000530fa 	rdctl	r2,ienable
   8bae8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8baec:	e0bfff17 	ldw	r2,-4(fp)
   8baf0:	00c00044 	movi	r3,1
   8baf4:	1884983a 	sll	r2,r3,r2
   8baf8:	1007883a 	mov	r3,r2
   8bafc:	e0bffd17 	ldw	r2,-12(fp)
   8bb00:	1884703a 	and	r2,r3,r2
   8bb04:	1004c03a 	cmpne	r2,r2,zero
   8bb08:	10803fcc 	andi	r2,r2,255
}
   8bb0c:	e037883a 	mov	sp,fp
   8bb10:	df000017 	ldw	fp,0(sp)
   8bb14:	dec00104 	addi	sp,sp,4
   8bb18:	f800283a 	ret

0008bb1c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8bb1c:	defff504 	addi	sp,sp,-44
   8bb20:	dfc00a15 	stw	ra,40(sp)
   8bb24:	df000915 	stw	fp,36(sp)
   8bb28:	df000904 	addi	fp,sp,36
   8bb2c:	e13ffc15 	stw	r4,-16(fp)
   8bb30:	e17ffd15 	stw	r5,-12(fp)
   8bb34:	e1bffe15 	stw	r6,-8(fp)
   8bb38:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   8bb3c:	00bffa84 	movi	r2,-22
   8bb40:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   8bb44:	e0bffd17 	ldw	r2,-12(fp)
   8bb48:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8bb4c:	e0bff817 	ldw	r2,-32(fp)
   8bb50:	10800808 	cmpgei	r2,r2,32
   8bb54:	1000271e 	bne	r2,zero,8bbf4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bb58:	0005303a 	rdctl	r2,status
   8bb5c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bb60:	e0fffa17 	ldw	r3,-24(fp)
   8bb64:	00bfff84 	movi	r2,-2
   8bb68:	1884703a 	and	r2,r3,r2
   8bb6c:	1001703a 	wrctl	status,r2
  
  return context;
   8bb70:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   8bb74:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   8bb78:	00c002f4 	movhi	r3,11
   8bb7c:	18f98604 	addi	r3,r3,-6632
   8bb80:	e0bff817 	ldw	r2,-32(fp)
   8bb84:	100490fa 	slli	r2,r2,3
   8bb88:	1885883a 	add	r2,r3,r2
   8bb8c:	e0fffe17 	ldw	r3,-8(fp)
   8bb90:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   8bb94:	00c002f4 	movhi	r3,11
   8bb98:	18f98604 	addi	r3,r3,-6632
   8bb9c:	e0bff817 	ldw	r2,-32(fp)
   8bba0:	100490fa 	slli	r2,r2,3
   8bba4:	1885883a 	add	r2,r3,r2
   8bba8:	10800104 	addi	r2,r2,4
   8bbac:	e0ffff17 	ldw	r3,-4(fp)
   8bbb0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8bbb4:	e0bffe17 	ldw	r2,-8(fp)
   8bbb8:	10000526 	beq	r2,zero,8bbd0 <alt_iic_isr_register+0xb4>
   8bbbc:	e0bff817 	ldw	r2,-32(fp)
   8bbc0:	e13ffc17 	ldw	r4,-16(fp)
   8bbc4:	100b883a 	mov	r5,r2
   8bbc8:	008b9940 	call	8b994 <alt_ic_irq_enable>
   8bbcc:	00000406 	br	8bbe0 <alt_iic_isr_register+0xc4>
   8bbd0:	e0bff817 	ldw	r2,-32(fp)
   8bbd4:	e13ffc17 	ldw	r4,-16(fp)
   8bbd8:	100b883a 	mov	r5,r2
   8bbdc:	008ba300 	call	8ba30 <alt_ic_irq_disable>
   8bbe0:	e0bff715 	stw	r2,-36(fp)
   8bbe4:	e0bff917 	ldw	r2,-28(fp)
   8bbe8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bbec:	e0bffb17 	ldw	r2,-20(fp)
   8bbf0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   8bbf4:	e0bff717 	ldw	r2,-36(fp)
}
   8bbf8:	e037883a 	mov	sp,fp
   8bbfc:	dfc00117 	ldw	ra,4(sp)
   8bc00:	df000017 	ldw	fp,0(sp)
   8bc04:	dec00204 	addi	sp,sp,8
   8bc08:	f800283a 	ret

0008bc0c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   8bc0c:	defffc04 	addi	sp,sp,-16
   8bc10:	df000315 	stw	fp,12(sp)
   8bc14:	df000304 	addi	fp,sp,12
   8bc18:	e13ffd15 	stw	r4,-12(fp)
   8bc1c:	e17ffe15 	stw	r5,-8(fp)
   8bc20:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   8bc24:	e0fffe17 	ldw	r3,-8(fp)
   8bc28:	e0bffd17 	ldw	r2,-12(fp)
   8bc2c:	18800c26 	beq	r3,r2,8bc60 <alt_load_section+0x54>
  {
    while( to != end )
   8bc30:	00000806 	br	8bc54 <alt_load_section+0x48>
    {
      *to++ = *from++;
   8bc34:	e0bffe17 	ldw	r2,-8(fp)
   8bc38:	10c00104 	addi	r3,r2,4
   8bc3c:	e0fffe15 	stw	r3,-8(fp)
   8bc40:	e0fffd17 	ldw	r3,-12(fp)
   8bc44:	19000104 	addi	r4,r3,4
   8bc48:	e13ffd15 	stw	r4,-12(fp)
   8bc4c:	18c00017 	ldw	r3,0(r3)
   8bc50:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8bc54:	e0fffe17 	ldw	r3,-8(fp)
   8bc58:	e0bfff17 	ldw	r2,-4(fp)
   8bc5c:	18bff51e 	bne	r3,r2,8bc34 <__alt_data_end+0xfffd39c4>
    {
      *to++ = *from++;
    }
  }
}
   8bc60:	e037883a 	mov	sp,fp
   8bc64:	df000017 	ldw	fp,0(sp)
   8bc68:	dec00104 	addi	sp,sp,4
   8bc6c:	f800283a 	ret

0008bc70 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8bc70:	defffe04 	addi	sp,sp,-8
   8bc74:	dfc00115 	stw	ra,4(sp)
   8bc78:	df000015 	stw	fp,0(sp)
   8bc7c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   8bc80:	010002f4 	movhi	r4,11
   8bc84:	212cb904 	addi	r4,r4,-19740
   8bc88:	014002f4 	movhi	r5,11
   8bc8c:	29600104 	addi	r5,r5,-32764
   8bc90:	018002f4 	movhi	r6,11
   8bc94:	31acb904 	addi	r6,r6,-19740
   8bc98:	008bc0c0 	call	8bc0c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   8bc9c:	01000234 	movhi	r4,8
   8bca0:	21000804 	addi	r4,r4,32
   8bca4:	01400234 	movhi	r5,8
   8bca8:	29400804 	addi	r5,r5,32
   8bcac:	01800234 	movhi	r6,8
   8bcb0:	31806f04 	addi	r6,r6,444
   8bcb4:	008bc0c0 	call	8bc0c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8bcb8:	01000274 	movhi	r4,9
   8bcbc:	2137a504 	addi	r4,r4,-8556
   8bcc0:	01400274 	movhi	r5,9
   8bcc4:	2977a504 	addi	r5,r5,-8556
   8bcc8:	018002f4 	movhi	r6,11
   8bccc:	31a00104 	addi	r6,r6,-32764
   8bcd0:	008bc0c0 	call	8bc0c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8bcd4:	008d1cc0 	call	8d1cc <alt_dcache_flush_all>
  alt_icache_flush_all();
   8bcd8:	008d3e40 	call	8d3e4 <alt_icache_flush_all>
}
   8bcdc:	e037883a 	mov	sp,fp
   8bce0:	dfc00117 	ldw	ra,4(sp)
   8bce4:	df000017 	ldw	fp,0(sp)
   8bce8:	dec00204 	addi	sp,sp,8
   8bcec:	f800283a 	ret

0008bcf0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8bcf0:	defffd04 	addi	sp,sp,-12
   8bcf4:	dfc00215 	stw	ra,8(sp)
   8bcf8:	df000115 	stw	fp,4(sp)
   8bcfc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8bd00:	0009883a 	mov	r4,zero
   8bd04:	008c1980 	call	8c198 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8bd08:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8bd0c:	008c1cc0 	call	8c1cc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8bd10:	010002b4 	movhi	r4,10
   8bd14:	211ff604 	addi	r4,r4,32728
   8bd18:	014002b4 	movhi	r5,10
   8bd1c:	295ff604 	addi	r5,r5,32728
   8bd20:	018002b4 	movhi	r6,10
   8bd24:	319ff604 	addi	r6,r6,32728
   8bd28:	008d4d40 	call	8d4d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8bd2c:	008d32c0 	call	8d32c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8bd30:	01000274 	movhi	r4,9
   8bd34:	2134e204 	addi	r4,r4,-11384
   8bd38:	008db200 	call	8db20 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8bd3c:	d12ccf17 	ldw	r4,-19652(gp)
   8bd40:	d0ecd017 	ldw	r3,-19648(gp)
   8bd44:	d0acd117 	ldw	r2,-19644(gp)
   8bd48:	180b883a 	mov	r5,r3
   8bd4c:	100d883a 	mov	r6,r2
   8bd50:	00852440 	call	85244 <main>
   8bd54:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8bd58:	01000044 	movi	r4,1
   8bd5c:	008d1040 	call	8d104 <close>
  exit (result);
   8bd60:	e13fff17 	ldw	r4,-4(fp)
   8bd64:	008db340 	call	8db34 <exit>

0008bd68 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8bd68:	defffe04 	addi	sp,sp,-8
   8bd6c:	df000115 	stw	fp,4(sp)
   8bd70:	df000104 	addi	fp,sp,4
   8bd74:	e13fff15 	stw	r4,-4(fp)
}
   8bd78:	e037883a 	mov	sp,fp
   8bd7c:	df000017 	ldw	fp,0(sp)
   8bd80:	dec00104 	addi	sp,sp,4
   8bd84:	f800283a 	ret

0008bd88 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8bd88:	defffe04 	addi	sp,sp,-8
   8bd8c:	df000115 	stw	fp,4(sp)
   8bd90:	df000104 	addi	fp,sp,4
   8bd94:	e13fff15 	stw	r4,-4(fp)
}
   8bd98:	e037883a 	mov	sp,fp
   8bd9c:	df000017 	ldw	fp,0(sp)
   8bda0:	dec00104 	addi	sp,sp,4
   8bda4:	f800283a 	ret

0008bda8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   8bda8:	defff904 	addi	sp,sp,-28
   8bdac:	df000615 	stw	fp,24(sp)
   8bdb0:	df000604 	addi	fp,sp,24
   8bdb4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8bdb8:	0005303a 	rdctl	r2,status
   8bdbc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8bdc0:	e0fffc17 	ldw	r3,-16(fp)
   8bdc4:	00bfff84 	movi	r2,-2
   8bdc8:	1884703a 	and	r2,r3,r2
   8bdcc:	1001703a 	wrctl	status,r2
  
  return context;
   8bdd0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   8bdd4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8bdd8:	d0a00817 	ldw	r2,-32736(gp)
   8bddc:	10c000c4 	addi	r3,r2,3
   8bde0:	00bfff04 	movi	r2,-4
   8bde4:	1884703a 	and	r2,r3,r2
   8bde8:	d0a00815 	stw	r2,-32736(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8bdec:	d0e00817 	ldw	r3,-32736(gp)
   8bdf0:	e0bfff17 	ldw	r2,-4(fp)
   8bdf4:	1885883a 	add	r2,r3,r2
   8bdf8:	00c00334 	movhi	r3,12
   8bdfc:	18e09c04 	addi	r3,r3,-32144
   8be00:	1880062e 	bgeu	r3,r2,8be1c <sbrk+0x74>
   8be04:	e0bffa17 	ldw	r2,-24(fp)
   8be08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8be0c:	e0bffd17 	ldw	r2,-12(fp)
   8be10:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8be14:	00bfffc4 	movi	r2,-1
   8be18:	00000b06 	br	8be48 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   8be1c:	d0a00817 	ldw	r2,-32736(gp)
   8be20:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   8be24:	d0e00817 	ldw	r3,-32736(gp)
   8be28:	e0bfff17 	ldw	r2,-4(fp)
   8be2c:	1885883a 	add	r2,r3,r2
   8be30:	d0a00815 	stw	r2,-32736(gp)
   8be34:	e0bffa17 	ldw	r2,-24(fp)
   8be38:	e0bffe15 	stw	r2,-8(fp)
   8be3c:	e0bffe17 	ldw	r2,-8(fp)
   8be40:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   8be44:	e0bffb17 	ldw	r2,-20(fp)
} 
   8be48:	e037883a 	mov	sp,fp
   8be4c:	df000017 	ldw	fp,0(sp)
   8be50:	dec00104 	addi	sp,sp,4
   8be54:	f800283a 	ret

0008be58 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8be58:	defffa04 	addi	sp,sp,-24
   8be5c:	df000515 	stw	fp,20(sp)
   8be60:	df000504 	addi	fp,sp,20
   8be64:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8be68:	0005303a 	rdctl	r2,status
   8be6c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8be70:	e0fffc17 	ldw	r3,-16(fp)
   8be74:	00bfff84 	movi	r2,-2
   8be78:	1884703a 	and	r2,r3,r2
   8be7c:	1001703a 	wrctl	status,r2
  
  return context;
   8be80:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   8be84:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   8be88:	e0bfff17 	ldw	r2,-4(fp)
   8be8c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8be90:	e0bffd17 	ldw	r2,-12(fp)
   8be94:	10800017 	ldw	r2,0(r2)
   8be98:	e0fffd17 	ldw	r3,-12(fp)
   8be9c:	18c00117 	ldw	r3,4(r3)
   8bea0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   8bea4:	e0bffd17 	ldw	r2,-12(fp)
   8bea8:	10800117 	ldw	r2,4(r2)
   8beac:	e0fffd17 	ldw	r3,-12(fp)
   8beb0:	18c00017 	ldw	r3,0(r3)
   8beb4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8beb8:	e0bffd17 	ldw	r2,-12(fp)
   8bebc:	e0fffd17 	ldw	r3,-12(fp)
   8bec0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   8bec4:	e0bffd17 	ldw	r2,-12(fp)
   8bec8:	e0fffd17 	ldw	r3,-12(fp)
   8becc:	10c00015 	stw	r3,0(r2)
   8bed0:	e0bffb17 	ldw	r2,-20(fp)
   8bed4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8bed8:	e0bffe17 	ldw	r2,-8(fp)
   8bedc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   8bee0:	e037883a 	mov	sp,fp
   8bee4:	df000017 	ldw	fp,0(sp)
   8bee8:	dec00104 	addi	sp,sp,4
   8beec:	f800283a 	ret

0008bef0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8bef0:	defffb04 	addi	sp,sp,-20
   8bef4:	dfc00415 	stw	ra,16(sp)
   8bef8:	df000315 	stw	fp,12(sp)
   8befc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8bf00:	d0a00917 	ldw	r2,-32732(gp)
   8bf04:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8bf08:	d0acd317 	ldw	r2,-19636(gp)
   8bf0c:	10800044 	addi	r2,r2,1
   8bf10:	d0acd315 	stw	r2,-19636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8bf14:	00002e06 	br	8bfd0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   8bf18:	e0bffd17 	ldw	r2,-12(fp)
   8bf1c:	10800017 	ldw	r2,0(r2)
   8bf20:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8bf24:	e0bffd17 	ldw	r2,-12(fp)
   8bf28:	10800403 	ldbu	r2,16(r2)
   8bf2c:	10803fcc 	andi	r2,r2,255
   8bf30:	10000426 	beq	r2,zero,8bf44 <alt_tick+0x54>
   8bf34:	d0acd317 	ldw	r2,-19636(gp)
   8bf38:	1000021e 	bne	r2,zero,8bf44 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   8bf3c:	e0bffd17 	ldw	r2,-12(fp)
   8bf40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8bf44:	e0bffd17 	ldw	r2,-12(fp)
   8bf48:	10800217 	ldw	r2,8(r2)
   8bf4c:	d0ecd317 	ldw	r3,-19636(gp)
   8bf50:	18801d36 	bltu	r3,r2,8bfc8 <alt_tick+0xd8>
   8bf54:	e0bffd17 	ldw	r2,-12(fp)
   8bf58:	10800403 	ldbu	r2,16(r2)
   8bf5c:	10803fcc 	andi	r2,r2,255
   8bf60:	1000191e 	bne	r2,zero,8bfc8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   8bf64:	e0bffd17 	ldw	r2,-12(fp)
   8bf68:	10800317 	ldw	r2,12(r2)
   8bf6c:	e0fffd17 	ldw	r3,-12(fp)
   8bf70:	18c00517 	ldw	r3,20(r3)
   8bf74:	1809883a 	mov	r4,r3
   8bf78:	103ee83a 	callr	r2
   8bf7c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8bf80:	e0bfff17 	ldw	r2,-4(fp)
   8bf84:	1000031e 	bne	r2,zero,8bf94 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   8bf88:	e13ffd17 	ldw	r4,-12(fp)
   8bf8c:	008be580 	call	8be58 <alt_alarm_stop>
   8bf90:	00000d06 	br	8bfc8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   8bf94:	e0bffd17 	ldw	r2,-12(fp)
   8bf98:	10c00217 	ldw	r3,8(r2)
   8bf9c:	e0bfff17 	ldw	r2,-4(fp)
   8bfa0:	1887883a 	add	r3,r3,r2
   8bfa4:	e0bffd17 	ldw	r2,-12(fp)
   8bfa8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8bfac:	e0bffd17 	ldw	r2,-12(fp)
   8bfb0:	10c00217 	ldw	r3,8(r2)
   8bfb4:	d0acd317 	ldw	r2,-19636(gp)
   8bfb8:	1880032e 	bgeu	r3,r2,8bfc8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   8bfbc:	e0bffd17 	ldw	r2,-12(fp)
   8bfc0:	00c00044 	movi	r3,1
   8bfc4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   8bfc8:	e0bffe17 	ldw	r2,-8(fp)
   8bfcc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8bfd0:	e0fffd17 	ldw	r3,-12(fp)
   8bfd4:	d0a00904 	addi	r2,gp,-32732
   8bfd8:	18bfcf1e 	bne	r3,r2,8bf18 <__alt_data_end+0xfffd3ca8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   8bfdc:	0001883a 	nop
}
   8bfe0:	e037883a 	mov	sp,fp
   8bfe4:	dfc00117 	ldw	ra,4(sp)
   8bfe8:	df000017 	ldw	fp,0(sp)
   8bfec:	dec00204 	addi	sp,sp,8
   8bff0:	f800283a 	ret

0008bff4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   8bff4:	defffd04 	addi	sp,sp,-12
   8bff8:	dfc00215 	stw	ra,8(sp)
   8bffc:	df000115 	stw	fp,4(sp)
   8c000:	df000104 	addi	fp,sp,4
   8c004:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   8c008:	e13fff17 	ldw	r4,-4(fp)
   8c00c:	008cf600 	call	8cf60 <alt_busy_sleep>
}
   8c010:	e037883a 	mov	sp,fp
   8c014:	dfc00117 	ldw	ra,4(sp)
   8c018:	df000017 	ldw	fp,0(sp)
   8c01c:	dec00204 	addi	sp,sp,8
   8c020:	f800283a 	ret

0008c024 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8c024:	defffe04 	addi	sp,sp,-8
   8c028:	dfc00115 	stw	ra,4(sp)
   8c02c:	df000015 	stw	fp,0(sp)
   8c030:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8c034:	008002f4 	movhi	r2,11
   8c038:	10acb804 	addi	r2,r2,-19744
   8c03c:	10800017 	ldw	r2,0(r2)
   8c040:	10000526 	beq	r2,zero,8c058 <alt_get_errno+0x34>
   8c044:	008002f4 	movhi	r2,11
   8c048:	10acb804 	addi	r2,r2,-19744
   8c04c:	10800017 	ldw	r2,0(r2)
   8c050:	103ee83a 	callr	r2
   8c054:	00000206 	br	8c060 <alt_get_errno+0x3c>
   8c058:	008002f4 	movhi	r2,11
   8c05c:	10b97504 	addi	r2,r2,-6700
}
   8c060:	e037883a 	mov	sp,fp
   8c064:	dfc00117 	ldw	ra,4(sp)
   8c068:	df000017 	ldw	fp,0(sp)
   8c06c:	dec00204 	addi	sp,sp,8
   8c070:	f800283a 	ret

0008c074 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8c074:	defff904 	addi	sp,sp,-28
   8c078:	dfc00615 	stw	ra,24(sp)
   8c07c:	df000515 	stw	fp,20(sp)
   8c080:	df000504 	addi	fp,sp,20
   8c084:	e13ffd15 	stw	r4,-12(fp)
   8c088:	e17ffe15 	stw	r5,-8(fp)
   8c08c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8c090:	e0bffd17 	ldw	r2,-12(fp)
   8c094:	10000616 	blt	r2,zero,8c0b0 <write+0x3c>
   8c098:	e0bffd17 	ldw	r2,-12(fp)
   8c09c:	10c00324 	muli	r3,r2,12
   8c0a0:	008002f4 	movhi	r2,11
   8c0a4:	10ac4804 	addi	r2,r2,-20192
   8c0a8:	1885883a 	add	r2,r3,r2
   8c0ac:	00000106 	br	8c0b4 <write+0x40>
   8c0b0:	0005883a 	mov	r2,zero
   8c0b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   8c0b8:	e0bffb17 	ldw	r2,-20(fp)
   8c0bc:	10001f26 	beq	r2,zero,8c13c <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8c0c0:	e0bffb17 	ldw	r2,-20(fp)
   8c0c4:	10800217 	ldw	r2,8(r2)
   8c0c8:	108000cc 	andi	r2,r2,3
   8c0cc:	10001726 	beq	r2,zero,8c12c <write+0xb8>
   8c0d0:	e0bffb17 	ldw	r2,-20(fp)
   8c0d4:	10800017 	ldw	r2,0(r2)
   8c0d8:	10800617 	ldw	r2,24(r2)
   8c0dc:	10001326 	beq	r2,zero,8c12c <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8c0e0:	e0bffb17 	ldw	r2,-20(fp)
   8c0e4:	10800017 	ldw	r2,0(r2)
   8c0e8:	10800617 	ldw	r2,24(r2)
   8c0ec:	e0ffff17 	ldw	r3,-4(fp)
   8c0f0:	e13ffb17 	ldw	r4,-20(fp)
   8c0f4:	e17ffe17 	ldw	r5,-8(fp)
   8c0f8:	180d883a 	mov	r6,r3
   8c0fc:	103ee83a 	callr	r2
   8c100:	e0bffc15 	stw	r2,-16(fp)
   8c104:	e0bffc17 	ldw	r2,-16(fp)
   8c108:	1000060e 	bge	r2,zero,8c124 <write+0xb0>
      {
        ALT_ERRNO = -rval;
   8c10c:	008c0240 	call	8c024 <alt_get_errno>
   8c110:	e0fffc17 	ldw	r3,-16(fp)
   8c114:	00c7c83a 	sub	r3,zero,r3
   8c118:	10c00015 	stw	r3,0(r2)
        return -1;
   8c11c:	00bfffc4 	movi	r2,-1
   8c120:	00000a06 	br	8c14c <write+0xd8>
      }
      return rval;
   8c124:	e0bffc17 	ldw	r2,-16(fp)
   8c128:	00000806 	br	8c14c <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
   8c12c:	008c0240 	call	8c024 <alt_get_errno>
   8c130:	00c00344 	movi	r3,13
   8c134:	10c00015 	stw	r3,0(r2)
   8c138:	00000306 	br	8c148 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8c13c:	008c0240 	call	8c024 <alt_get_errno>
   8c140:	00c01444 	movi	r3,81
   8c144:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   8c148:	00bfffc4 	movi	r2,-1
}
   8c14c:	e037883a 	mov	sp,fp
   8c150:	dfc00117 	ldw	ra,4(sp)
   8c154:	df000017 	ldw	fp,0(sp)
   8c158:	dec00204 	addi	sp,sp,8
   8c15c:	f800283a 	ret

0008c160 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   8c160:	defffd04 	addi	sp,sp,-12
   8c164:	dfc00215 	stw	ra,8(sp)
   8c168:	df000115 	stw	fp,4(sp)
   8c16c:	df000104 	addi	fp,sp,4
   8c170:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8c174:	e13fff17 	ldw	r4,-4(fp)
   8c178:	014002f4 	movhi	r5,11
   8c17c:	296cb504 	addi	r5,r5,-19756
   8c180:	008d28c0 	call	8d28c <alt_dev_llist_insert>
}
   8c184:	e037883a 	mov	sp,fp
   8c188:	dfc00117 	ldw	ra,4(sp)
   8c18c:	df000017 	ldw	fp,0(sp)
   8c190:	dec00204 	addi	sp,sp,8
   8c194:	f800283a 	ret

0008c198 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8c198:	defffd04 	addi	sp,sp,-12
   8c19c:	dfc00215 	stw	ra,8(sp)
   8c1a0:	df000115 	stw	fp,4(sp)
   8c1a4:	df000104 	addi	fp,sp,4
   8c1a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   8c1ac:	008d81c0 	call	8d81c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8c1b0:	00800044 	movi	r2,1
   8c1b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8c1b8:	e037883a 	mov	sp,fp
   8c1bc:	dfc00117 	ldw	ra,4(sp)
   8c1c0:	df000017 	ldw	fp,0(sp)
   8c1c4:	dec00204 	addi	sp,sp,8
   8c1c8:	f800283a 	ret

0008c1cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8c1cc:	defffe04 	addi	sp,sp,-8
   8c1d0:	dfc00115 	stw	ra,4(sp)
   8c1d4:	df000015 	stw	fp,0(sp)
   8c1d8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   8c1dc:	01000434 	movhi	r4,16
   8c1e0:	21040804 	addi	r4,r4,4128
   8c1e4:	000b883a 	mov	r5,zero
   8c1e8:	018000c4 	movi	r6,3
   8c1ec:	01c0fa04 	movi	r7,1000
   8c1f0:	008ced80 	call	8ced8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   8c1f4:	010002f4 	movhi	r4,11
   8c1f8:	21283004 	addi	r4,r4,-24384
   8c1fc:	000b883a 	mov	r5,zero
   8c200:	000d883a 	mov	r6,zero
   8c204:	008c3940 	call	8c394 <altera_avalon_jtag_uart_init>
   8c208:	010002f4 	movhi	r4,11
   8c20c:	21282604 	addi	r4,r4,-24424
   8c210:	008c1600 	call	8c160 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( TOUCH_PANEL_SPI, touch_panel_spi);
   8c214:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   8c218:	0001883a 	nop
}
   8c21c:	e037883a 	mov	sp,fp
   8c220:	dfc00117 	ldw	ra,4(sp)
   8c224:	df000017 	ldw	fp,0(sp)
   8c228:	dec00204 	addi	sp,sp,8
   8c22c:	f800283a 	ret

0008c230 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   8c230:	defffa04 	addi	sp,sp,-24
   8c234:	dfc00515 	stw	ra,20(sp)
   8c238:	df000415 	stw	fp,16(sp)
   8c23c:	df000404 	addi	fp,sp,16
   8c240:	e13ffd15 	stw	r4,-12(fp)
   8c244:	e17ffe15 	stw	r5,-8(fp)
   8c248:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8c24c:	e0bffd17 	ldw	r2,-12(fp)
   8c250:	10800017 	ldw	r2,0(r2)
   8c254:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8c258:	e0bffc17 	ldw	r2,-16(fp)
   8c25c:	10c00a04 	addi	r3,r2,40
   8c260:	e0bffd17 	ldw	r2,-12(fp)
   8c264:	10800217 	ldw	r2,8(r2)
   8c268:	1809883a 	mov	r4,r3
   8c26c:	e17ffe17 	ldw	r5,-8(fp)
   8c270:	e1bfff17 	ldw	r6,-4(fp)
   8c274:	100f883a 	mov	r7,r2
   8c278:	008c8480 	call	8c848 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   8c27c:	e037883a 	mov	sp,fp
   8c280:	dfc00117 	ldw	ra,4(sp)
   8c284:	df000017 	ldw	fp,0(sp)
   8c288:	dec00204 	addi	sp,sp,8
   8c28c:	f800283a 	ret

0008c290 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   8c290:	defffa04 	addi	sp,sp,-24
   8c294:	dfc00515 	stw	ra,20(sp)
   8c298:	df000415 	stw	fp,16(sp)
   8c29c:	df000404 	addi	fp,sp,16
   8c2a0:	e13ffd15 	stw	r4,-12(fp)
   8c2a4:	e17ffe15 	stw	r5,-8(fp)
   8c2a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8c2ac:	e0bffd17 	ldw	r2,-12(fp)
   8c2b0:	10800017 	ldw	r2,0(r2)
   8c2b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8c2b8:	e0bffc17 	ldw	r2,-16(fp)
   8c2bc:	10c00a04 	addi	r3,r2,40
   8c2c0:	e0bffd17 	ldw	r2,-12(fp)
   8c2c4:	10800217 	ldw	r2,8(r2)
   8c2c8:	1809883a 	mov	r4,r3
   8c2cc:	e17ffe17 	ldw	r5,-8(fp)
   8c2d0:	e1bfff17 	ldw	r6,-4(fp)
   8c2d4:	100f883a 	mov	r7,r2
   8c2d8:	008ca500 	call	8ca50 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   8c2dc:	e037883a 	mov	sp,fp
   8c2e0:	dfc00117 	ldw	ra,4(sp)
   8c2e4:	df000017 	ldw	fp,0(sp)
   8c2e8:	dec00204 	addi	sp,sp,8
   8c2ec:	f800283a 	ret

0008c2f0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   8c2f0:	defffc04 	addi	sp,sp,-16
   8c2f4:	dfc00315 	stw	ra,12(sp)
   8c2f8:	df000215 	stw	fp,8(sp)
   8c2fc:	df000204 	addi	fp,sp,8
   8c300:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   8c304:	e0bfff17 	ldw	r2,-4(fp)
   8c308:	10800017 	ldw	r2,0(r2)
   8c30c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8c310:	e0bffe17 	ldw	r2,-8(fp)
   8c314:	10c00a04 	addi	r3,r2,40
   8c318:	e0bfff17 	ldw	r2,-4(fp)
   8c31c:	10800217 	ldw	r2,8(r2)
   8c320:	1809883a 	mov	r4,r3
   8c324:	100b883a 	mov	r5,r2
   8c328:	008c6f40 	call	8c6f4 <altera_avalon_jtag_uart_close>
}
   8c32c:	e037883a 	mov	sp,fp
   8c330:	dfc00117 	ldw	ra,4(sp)
   8c334:	df000017 	ldw	fp,0(sp)
   8c338:	dec00204 	addi	sp,sp,8
   8c33c:	f800283a 	ret

0008c340 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   8c340:	defffa04 	addi	sp,sp,-24
   8c344:	dfc00515 	stw	ra,20(sp)
   8c348:	df000415 	stw	fp,16(sp)
   8c34c:	df000404 	addi	fp,sp,16
   8c350:	e13ffd15 	stw	r4,-12(fp)
   8c354:	e17ffe15 	stw	r5,-8(fp)
   8c358:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   8c35c:	e0bffd17 	ldw	r2,-12(fp)
   8c360:	10800017 	ldw	r2,0(r2)
   8c364:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8c368:	e0bffc17 	ldw	r2,-16(fp)
   8c36c:	10800a04 	addi	r2,r2,40
   8c370:	1009883a 	mov	r4,r2
   8c374:	e17ffe17 	ldw	r5,-8(fp)
   8c378:	e1bfff17 	ldw	r6,-4(fp)
   8c37c:	008c75c0 	call	8c75c <altera_avalon_jtag_uart_ioctl>
}
   8c380:	e037883a 	mov	sp,fp
   8c384:	dfc00117 	ldw	ra,4(sp)
   8c388:	df000017 	ldw	fp,0(sp)
   8c38c:	dec00204 	addi	sp,sp,8
   8c390:	f800283a 	ret

0008c394 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8c394:	defffa04 	addi	sp,sp,-24
   8c398:	dfc00515 	stw	ra,20(sp)
   8c39c:	df000415 	stw	fp,16(sp)
   8c3a0:	df000404 	addi	fp,sp,16
   8c3a4:	e13ffd15 	stw	r4,-12(fp)
   8c3a8:	e17ffe15 	stw	r5,-8(fp)
   8c3ac:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c3b0:	e0bffd17 	ldw	r2,-12(fp)
   8c3b4:	00c00044 	movi	r3,1
   8c3b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8c3bc:	e0bffd17 	ldw	r2,-12(fp)
   8c3c0:	10800017 	ldw	r2,0(r2)
   8c3c4:	10800104 	addi	r2,r2,4
   8c3c8:	e0fffd17 	ldw	r3,-12(fp)
   8c3cc:	18c00817 	ldw	r3,32(r3)
   8c3d0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8c3d4:	e0fffe17 	ldw	r3,-8(fp)
   8c3d8:	e0bfff17 	ldw	r2,-4(fp)
   8c3dc:	d8000015 	stw	zero,0(sp)
   8c3e0:	1809883a 	mov	r4,r3
   8c3e4:	100b883a 	mov	r5,r2
   8c3e8:	01800274 	movhi	r6,9
   8c3ec:	31b11504 	addi	r6,r6,-15276
   8c3f0:	e1fffd17 	ldw	r7,-12(fp)
   8c3f4:	008b9440 	call	8b944 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8c3f8:	e0bffd17 	ldw	r2,-12(fp)
   8c3fc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8c400:	e0bffd17 	ldw	r2,-12(fp)
   8c404:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8c408:	008002f4 	movhi	r2,11
   8c40c:	10b97a04 	addi	r2,r2,-6680
   8c410:	10800017 	ldw	r2,0(r2)
   8c414:	1809883a 	mov	r4,r3
   8c418:	100b883a 	mov	r5,r2
   8c41c:	01800274 	movhi	r6,9
   8c420:	31b19404 	addi	r6,r6,-14768
   8c424:	e1fffd17 	ldw	r7,-12(fp)
   8c428:	008b8040 	call	8b804 <alt_alarm_start>
   8c42c:	1000040e 	bge	r2,zero,8c440 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8c430:	e0bffd17 	ldw	r2,-12(fp)
   8c434:	00e00034 	movhi	r3,32768
   8c438:	18ffffc4 	addi	r3,r3,-1
   8c43c:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8c440:	e037883a 	mov	sp,fp
   8c444:	dfc00117 	ldw	ra,4(sp)
   8c448:	df000017 	ldw	fp,0(sp)
   8c44c:	dec00204 	addi	sp,sp,8
   8c450:	f800283a 	ret

0008c454 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   8c454:	defff804 	addi	sp,sp,-32
   8c458:	df000715 	stw	fp,28(sp)
   8c45c:	df000704 	addi	fp,sp,28
   8c460:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   8c464:	e0bfff17 	ldw	r2,-4(fp)
   8c468:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   8c46c:	e0bffb17 	ldw	r2,-20(fp)
   8c470:	10800017 	ldw	r2,0(r2)
   8c474:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c478:	e0bffc17 	ldw	r2,-16(fp)
   8c47c:	10800104 	addi	r2,r2,4
   8c480:	10800037 	ldwio	r2,0(r2)
   8c484:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8c488:	e0bffd17 	ldw	r2,-12(fp)
   8c48c:	1080c00c 	andi	r2,r2,768
   8c490:	1000011e 	bne	r2,zero,8c498 <altera_avalon_jtag_uart_irq+0x44>
      break;
   8c494:	00006a06 	br	8c640 <altera_avalon_jtag_uart_irq+0x1ec>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8c498:	e0bffd17 	ldw	r2,-12(fp)
   8c49c:	1080400c 	andi	r2,r2,256
   8c4a0:	10003226 	beq	r2,zero,8c56c <altera_avalon_jtag_uart_irq+0x118>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   8c4a4:	00800074 	movhi	r2,1
   8c4a8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c4ac:	e0bffb17 	ldw	r2,-20(fp)
   8c4b0:	10800a17 	ldw	r2,40(r2)
   8c4b4:	10800044 	addi	r2,r2,1
   8c4b8:	1081ffcc 	andi	r2,r2,2047
   8c4bc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   8c4c0:	e0bffb17 	ldw	r2,-20(fp)
   8c4c4:	10c00b17 	ldw	r3,44(r2)
   8c4c8:	e0bffe17 	ldw	r2,-8(fp)
   8c4cc:	1880011e 	bne	r3,r2,8c4d4 <altera_avalon_jtag_uart_irq+0x80>
          break;
   8c4d0:	00001506 	br	8c528 <altera_avalon_jtag_uart_irq+0xd4>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8c4d4:	e0bffc17 	ldw	r2,-16(fp)
   8c4d8:	10800037 	ldwio	r2,0(r2)
   8c4dc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8c4e0:	e0bff917 	ldw	r2,-28(fp)
   8c4e4:	10a0000c 	andi	r2,r2,32768
   8c4e8:	1000011e 	bne	r2,zero,8c4f0 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   8c4ec:	00000e06 	br	8c528 <altera_avalon_jtag_uart_irq+0xd4>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8c4f0:	e0bffb17 	ldw	r2,-20(fp)
   8c4f4:	10800a17 	ldw	r2,40(r2)
   8c4f8:	e0fff917 	ldw	r3,-28(fp)
   8c4fc:	e13ffb17 	ldw	r4,-20(fp)
   8c500:	2085883a 	add	r2,r4,r2
   8c504:	10800e04 	addi	r2,r2,56
   8c508:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c50c:	e0bffb17 	ldw	r2,-20(fp)
   8c510:	10800a17 	ldw	r2,40(r2)
   8c514:	10800044 	addi	r2,r2,1
   8c518:	10c1ffcc 	andi	r3,r2,2047
   8c51c:	e0bffb17 	ldw	r2,-20(fp)
   8c520:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   8c524:	003fe106 	br	8c4ac <__alt_data_end+0xfffd423c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8c528:	e0bff917 	ldw	r2,-28(fp)
   8c52c:	10bfffec 	andhi	r2,r2,65535
   8c530:	10000e26 	beq	r2,zero,8c56c <altera_avalon_jtag_uart_irq+0x118>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c534:	e0bffb17 	ldw	r2,-20(fp)
   8c538:	10c00817 	ldw	r3,32(r2)
   8c53c:	00bfff84 	movi	r2,-2
   8c540:	1886703a 	and	r3,r3,r2
   8c544:	e0bffb17 	ldw	r2,-20(fp)
   8c548:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8c54c:	e0bffc17 	ldw	r2,-16(fp)
   8c550:	10800104 	addi	r2,r2,4
   8c554:	e0fffb17 	ldw	r3,-20(fp)
   8c558:	18c00817 	ldw	r3,32(r3)
   8c55c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c560:	e0bffc17 	ldw	r2,-16(fp)
   8c564:	10800104 	addi	r2,r2,4
   8c568:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8c56c:	e0bffd17 	ldw	r2,-12(fp)
   8c570:	1080800c 	andi	r2,r2,512
   8c574:	10003126 	beq	r2,zero,8c63c <altera_avalon_jtag_uart_irq+0x1e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8c578:	e0bffd17 	ldw	r2,-12(fp)
   8c57c:	1004d43a 	srli	r2,r2,16
   8c580:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   8c584:	00001406 	br	8c5d8 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8c588:	e0bffc17 	ldw	r2,-16(fp)
   8c58c:	e0fffb17 	ldw	r3,-20(fp)
   8c590:	18c00d17 	ldw	r3,52(r3)
   8c594:	e13ffb17 	ldw	r4,-20(fp)
   8c598:	20c7883a 	add	r3,r4,r3
   8c59c:	18c20e04 	addi	r3,r3,2104
   8c5a0:	18c00003 	ldbu	r3,0(r3)
   8c5a4:	18c03fcc 	andi	r3,r3,255
   8c5a8:	18c0201c 	xori	r3,r3,128
   8c5ac:	18ffe004 	addi	r3,r3,-128
   8c5b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c5b4:	e0bffb17 	ldw	r2,-20(fp)
   8c5b8:	10800d17 	ldw	r2,52(r2)
   8c5bc:	10800044 	addi	r2,r2,1
   8c5c0:	10c1ffcc 	andi	r3,r2,2047
   8c5c4:	e0bffb17 	ldw	r2,-20(fp)
   8c5c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8c5cc:	e0bffa17 	ldw	r2,-24(fp)
   8c5d0:	10bfffc4 	addi	r2,r2,-1
   8c5d4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8c5d8:	e0bffa17 	ldw	r2,-24(fp)
   8c5dc:	10000526 	beq	r2,zero,8c5f4 <altera_avalon_jtag_uart_irq+0x1a0>
   8c5e0:	e0bffb17 	ldw	r2,-20(fp)
   8c5e4:	10c00d17 	ldw	r3,52(r2)
   8c5e8:	e0bffb17 	ldw	r2,-20(fp)
   8c5ec:	10800c17 	ldw	r2,48(r2)
   8c5f0:	18bfe51e 	bne	r3,r2,8c588 <__alt_data_end+0xfffd4318>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   8c5f4:	e0bffa17 	ldw	r2,-24(fp)
   8c5f8:	10001026 	beq	r2,zero,8c63c <altera_avalon_jtag_uart_irq+0x1e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8c5fc:	e0bffb17 	ldw	r2,-20(fp)
   8c600:	10c00817 	ldw	r3,32(r2)
   8c604:	00bfff44 	movi	r2,-3
   8c608:	1886703a 	and	r3,r3,r2
   8c60c:	e0bffb17 	ldw	r2,-20(fp)
   8c610:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c614:	e0bffb17 	ldw	r2,-20(fp)
   8c618:	10800017 	ldw	r2,0(r2)
   8c61c:	10800104 	addi	r2,r2,4
   8c620:	e0fffb17 	ldw	r3,-20(fp)
   8c624:	18c00817 	ldw	r3,32(r3)
   8c628:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8c62c:	e0bffc17 	ldw	r2,-16(fp)
   8c630:	10800104 	addi	r2,r2,4
   8c634:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   8c638:	003f8f06 	br	8c478 <__alt_data_end+0xfffd4208>
   8c63c:	003f8e06 	br	8c478 <__alt_data_end+0xfffd4208>
}
   8c640:	e037883a 	mov	sp,fp
   8c644:	df000017 	ldw	fp,0(sp)
   8c648:	dec00104 	addi	sp,sp,4
   8c64c:	f800283a 	ret

0008c650 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   8c650:	defff804 	addi	sp,sp,-32
   8c654:	df000715 	stw	fp,28(sp)
   8c658:	df000704 	addi	fp,sp,28
   8c65c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   8c660:	e0bffb17 	ldw	r2,-20(fp)
   8c664:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8c668:	e0bff917 	ldw	r2,-28(fp)
   8c66c:	10800017 	ldw	r2,0(r2)
   8c670:	10800104 	addi	r2,r2,4
   8c674:	10800037 	ldwio	r2,0(r2)
   8c678:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8c67c:	e0bffa17 	ldw	r2,-24(fp)
   8c680:	1081000c 	andi	r2,r2,1024
   8c684:	10000a26 	beq	r2,zero,8c6b0 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8c688:	e0bff917 	ldw	r2,-28(fp)
   8c68c:	10800017 	ldw	r2,0(r2)
   8c690:	10800104 	addi	r2,r2,4
   8c694:	e0fff917 	ldw	r3,-28(fp)
   8c698:	18c00817 	ldw	r3,32(r3)
   8c69c:	18c10014 	ori	r3,r3,1024
   8c6a0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   8c6a4:	e0bff917 	ldw	r2,-28(fp)
   8c6a8:	10000915 	stw	zero,36(r2)
   8c6ac:	00000a06 	br	8c6d8 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8c6b0:	e0bff917 	ldw	r2,-28(fp)
   8c6b4:	10800917 	ldw	r2,36(r2)
   8c6b8:	00e00034 	movhi	r3,32768
   8c6bc:	18ffff04 	addi	r3,r3,-4
   8c6c0:	18800536 	bltu	r3,r2,8c6d8 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   8c6c4:	e0bff917 	ldw	r2,-28(fp)
   8c6c8:	10800917 	ldw	r2,36(r2)
   8c6cc:	10c00044 	addi	r3,r2,1
   8c6d0:	e0bff917 	ldw	r2,-28(fp)
   8c6d4:	10c00915 	stw	r3,36(r2)
   8c6d8:	008002f4 	movhi	r2,11
   8c6dc:	10b97a04 	addi	r2,r2,-6680
   8c6e0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8c6e4:	e037883a 	mov	sp,fp
   8c6e8:	df000017 	ldw	fp,0(sp)
   8c6ec:	dec00104 	addi	sp,sp,4
   8c6f0:	f800283a 	ret

0008c6f4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8c6f4:	defffd04 	addi	sp,sp,-12
   8c6f8:	df000215 	stw	fp,8(sp)
   8c6fc:	df000204 	addi	fp,sp,8
   8c700:	e13ffe15 	stw	r4,-8(fp)
   8c704:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8c708:	00000506 	br	8c720 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   8c70c:	e0bfff17 	ldw	r2,-4(fp)
   8c710:	1090000c 	andi	r2,r2,16384
   8c714:	10000226 	beq	r2,zero,8c720 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   8c718:	00bffd44 	movi	r2,-11
   8c71c:	00000b06 	br	8c74c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8c720:	e0bffe17 	ldw	r2,-8(fp)
   8c724:	10c00d17 	ldw	r3,52(r2)
   8c728:	e0bffe17 	ldw	r2,-8(fp)
   8c72c:	10800c17 	ldw	r2,48(r2)
   8c730:	18800526 	beq	r3,r2,8c748 <altera_avalon_jtag_uart_close+0x54>
   8c734:	e0bffe17 	ldw	r2,-8(fp)
   8c738:	10c00917 	ldw	r3,36(r2)
   8c73c:	e0bffe17 	ldw	r2,-8(fp)
   8c740:	10800117 	ldw	r2,4(r2)
   8c744:	18bff136 	bltu	r3,r2,8c70c <__alt_data_end+0xfffd449c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8c748:	0005883a 	mov	r2,zero
}
   8c74c:	e037883a 	mov	sp,fp
   8c750:	df000017 	ldw	fp,0(sp)
   8c754:	dec00104 	addi	sp,sp,4
   8c758:	f800283a 	ret

0008c75c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   8c75c:	defffa04 	addi	sp,sp,-24
   8c760:	df000515 	stw	fp,20(sp)
   8c764:	df000504 	addi	fp,sp,20
   8c768:	e13ffd15 	stw	r4,-12(fp)
   8c76c:	e17ffe15 	stw	r5,-8(fp)
   8c770:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   8c774:	00bff9c4 	movi	r2,-25
   8c778:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   8c77c:	e0bffe17 	ldw	r2,-8(fp)
   8c780:	10da8060 	cmpeqi	r3,r2,27137
   8c784:	1800031e 	bne	r3,zero,8c794 <altera_avalon_jtag_uart_ioctl+0x38>
   8c788:	109a80a0 	cmpeqi	r2,r2,27138
   8c78c:	1000191e 	bne	r2,zero,8c7f4 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   8c790:	00002806 	br	8c834 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8c794:	e0bffd17 	ldw	r2,-12(fp)
   8c798:	10c00117 	ldw	r3,4(r2)
   8c79c:	00a00034 	movhi	r2,32768
   8c7a0:	10bfffc4 	addi	r2,r2,-1
   8c7a4:	18801226 	beq	r3,r2,8c7f0 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   8c7a8:	e0bfff17 	ldw	r2,-4(fp)
   8c7ac:	10800017 	ldw	r2,0(r2)
   8c7b0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8c7b4:	e0bffc17 	ldw	r2,-16(fp)
   8c7b8:	10800090 	cmplti	r2,r2,2
   8c7bc:	1000061e 	bne	r2,zero,8c7d8 <altera_avalon_jtag_uart_ioctl+0x7c>
   8c7c0:	e0fffc17 	ldw	r3,-16(fp)
   8c7c4:	00a00034 	movhi	r2,32768
   8c7c8:	10bfffc4 	addi	r2,r2,-1
   8c7cc:	18800226 	beq	r3,r2,8c7d8 <altera_avalon_jtag_uart_ioctl+0x7c>
   8c7d0:	e0bffc17 	ldw	r2,-16(fp)
   8c7d4:	00000206 	br	8c7e0 <altera_avalon_jtag_uart_ioctl+0x84>
   8c7d8:	00a00034 	movhi	r2,32768
   8c7dc:	10bfff84 	addi	r2,r2,-2
   8c7e0:	e0fffd17 	ldw	r3,-12(fp)
   8c7e4:	18800115 	stw	r2,4(r3)
      rc = 0;
   8c7e8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8c7ec:	00001106 	br	8c834 <altera_avalon_jtag_uart_ioctl+0xd8>
   8c7f0:	00001006 	br	8c834 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8c7f4:	e0bffd17 	ldw	r2,-12(fp)
   8c7f8:	10c00117 	ldw	r3,4(r2)
   8c7fc:	00a00034 	movhi	r2,32768
   8c800:	10bfffc4 	addi	r2,r2,-1
   8c804:	18800a26 	beq	r3,r2,8c830 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8c808:	e0bffd17 	ldw	r2,-12(fp)
   8c80c:	10c00917 	ldw	r3,36(r2)
   8c810:	e0bffd17 	ldw	r2,-12(fp)
   8c814:	10800117 	ldw	r2,4(r2)
   8c818:	1885803a 	cmpltu	r2,r3,r2
   8c81c:	10c03fcc 	andi	r3,r2,255
   8c820:	e0bfff17 	ldw	r2,-4(fp)
   8c824:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8c828:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   8c82c:	00000006 	br	8c830 <altera_avalon_jtag_uart_ioctl+0xd4>
   8c830:	0001883a 	nop

  default:
    break;
  }

  return rc;
   8c834:	e0bffb17 	ldw	r2,-20(fp)
}
   8c838:	e037883a 	mov	sp,fp
   8c83c:	df000017 	ldw	fp,0(sp)
   8c840:	dec00104 	addi	sp,sp,4
   8c844:	f800283a 	ret

0008c848 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8c848:	defff304 	addi	sp,sp,-52
   8c84c:	dfc00c15 	stw	ra,48(sp)
   8c850:	df000b15 	stw	fp,44(sp)
   8c854:	df000b04 	addi	fp,sp,44
   8c858:	e13ffc15 	stw	r4,-16(fp)
   8c85c:	e17ffd15 	stw	r5,-12(fp)
   8c860:	e1bffe15 	stw	r6,-8(fp)
   8c864:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8c868:	e0bffd17 	ldw	r2,-12(fp)
   8c86c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c870:	00004906 	br	8c998 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8c874:	e0bffc17 	ldw	r2,-16(fp)
   8c878:	10800a17 	ldw	r2,40(r2)
   8c87c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   8c880:	e0bffc17 	ldw	r2,-16(fp)
   8c884:	10800b17 	ldw	r2,44(r2)
   8c888:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   8c88c:	e0fff717 	ldw	r3,-36(fp)
   8c890:	e0bff817 	ldw	r2,-32(fp)
   8c894:	18800536 	bltu	r3,r2,8c8ac <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8c898:	e0fff717 	ldw	r3,-36(fp)
   8c89c:	e0bff817 	ldw	r2,-32(fp)
   8c8a0:	1885c83a 	sub	r2,r3,r2
   8c8a4:	e0bff615 	stw	r2,-40(fp)
   8c8a8:	00000406 	br	8c8bc <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8c8ac:	00c20004 	movi	r3,2048
   8c8b0:	e0bff817 	ldw	r2,-32(fp)
   8c8b4:	1885c83a 	sub	r2,r3,r2
   8c8b8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8c8bc:	e0bff617 	ldw	r2,-40(fp)
   8c8c0:	1000011e 	bne	r2,zero,8c8c8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   8c8c4:	00001d06 	br	8c93c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   8c8c8:	e0fffe17 	ldw	r3,-8(fp)
   8c8cc:	e0bff617 	ldw	r2,-40(fp)
   8c8d0:	1880022e 	bgeu	r3,r2,8c8dc <altera_avalon_jtag_uart_read+0x94>
        n = space;
   8c8d4:	e0bffe17 	ldw	r2,-8(fp)
   8c8d8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   8c8dc:	e0bff817 	ldw	r2,-32(fp)
   8c8e0:	10800e04 	addi	r2,r2,56
   8c8e4:	e0fffc17 	ldw	r3,-16(fp)
   8c8e8:	1885883a 	add	r2,r3,r2
   8c8ec:	e13ff517 	ldw	r4,-44(fp)
   8c8f0:	100b883a 	mov	r5,r2
   8c8f4:	e1bff617 	ldw	r6,-40(fp)
   8c8f8:	008a2e80 	call	8a2e8 <memcpy>
      ptr   += n;
   8c8fc:	e0fff517 	ldw	r3,-44(fp)
   8c900:	e0bff617 	ldw	r2,-40(fp)
   8c904:	1885883a 	add	r2,r3,r2
   8c908:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   8c90c:	e0fffe17 	ldw	r3,-8(fp)
   8c910:	e0bff617 	ldw	r2,-40(fp)
   8c914:	1885c83a 	sub	r2,r3,r2
   8c918:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8c91c:	e0fff817 	ldw	r3,-32(fp)
   8c920:	e0bff617 	ldw	r2,-40(fp)
   8c924:	1885883a 	add	r2,r3,r2
   8c928:	10c1ffcc 	andi	r3,r2,2047
   8c92c:	e0bffc17 	ldw	r2,-16(fp)
   8c930:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   8c934:	e0bffe17 	ldw	r2,-8(fp)
   8c938:	00bfce16 	blt	zero,r2,8c874 <__alt_data_end+0xfffd4604>

    /* If we read any data then return it */
    if (ptr != buffer)
   8c93c:	e0fff517 	ldw	r3,-44(fp)
   8c940:	e0bffd17 	ldw	r2,-12(fp)
   8c944:	18800126 	beq	r3,r2,8c94c <altera_avalon_jtag_uart_read+0x104>
      break;
   8c948:	00001506 	br	8c9a0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8c94c:	e0bfff17 	ldw	r2,-4(fp)
   8c950:	1090000c 	andi	r2,r2,16384
   8c954:	10000126 	beq	r2,zero,8c95c <altera_avalon_jtag_uart_read+0x114>
      break;
   8c958:	00001106 	br	8c9a0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8c95c:	0001883a 	nop
   8c960:	e0bffc17 	ldw	r2,-16(fp)
   8c964:	10c00a17 	ldw	r3,40(r2)
   8c968:	e0bff717 	ldw	r2,-36(fp)
   8c96c:	1880051e 	bne	r3,r2,8c984 <altera_avalon_jtag_uart_read+0x13c>
   8c970:	e0bffc17 	ldw	r2,-16(fp)
   8c974:	10c00917 	ldw	r3,36(r2)
   8c978:	e0bffc17 	ldw	r2,-16(fp)
   8c97c:	10800117 	ldw	r2,4(r2)
   8c980:	18bff736 	bltu	r3,r2,8c960 <__alt_data_end+0xfffd46f0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8c984:	e0bffc17 	ldw	r2,-16(fp)
   8c988:	10c00a17 	ldw	r3,40(r2)
   8c98c:	e0bff717 	ldw	r2,-36(fp)
   8c990:	1880011e 	bne	r3,r2,8c998 <altera_avalon_jtag_uart_read+0x150>
      break;
   8c994:	00000206 	br	8c9a0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8c998:	e0bffe17 	ldw	r2,-8(fp)
   8c99c:	00bfb516 	blt	zero,r2,8c874 <__alt_data_end+0xfffd4604>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   8c9a0:	e0fff517 	ldw	r3,-44(fp)
   8c9a4:	e0bffd17 	ldw	r2,-12(fp)
   8c9a8:	18801726 	beq	r3,r2,8ca08 <altera_avalon_jtag_uart_read+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8c9ac:	0005303a 	rdctl	r2,status
   8c9b0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8c9b4:	e0fffa17 	ldw	r3,-24(fp)
   8c9b8:	00bfff84 	movi	r2,-2
   8c9bc:	1884703a 	and	r2,r3,r2
   8c9c0:	1001703a 	wrctl	status,r2
  
  return context;
   8c9c4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8c9c8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8c9cc:	e0bffc17 	ldw	r2,-16(fp)
   8c9d0:	10800817 	ldw	r2,32(r2)
   8c9d4:	10c00054 	ori	r3,r2,1
   8c9d8:	e0bffc17 	ldw	r2,-16(fp)
   8c9dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8c9e0:	e0bffc17 	ldw	r2,-16(fp)
   8c9e4:	10800017 	ldw	r2,0(r2)
   8c9e8:	10800104 	addi	r2,r2,4
   8c9ec:	e0fffc17 	ldw	r3,-16(fp)
   8c9f0:	18c00817 	ldw	r3,32(r3)
   8c9f4:	10c00035 	stwio	r3,0(r2)
   8c9f8:	e0bff917 	ldw	r2,-28(fp)
   8c9fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ca00:	e0bffb17 	ldw	r2,-20(fp)
   8ca04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   8ca08:	e0fff517 	ldw	r3,-44(fp)
   8ca0c:	e0bffd17 	ldw	r2,-12(fp)
   8ca10:	18800426 	beq	r3,r2,8ca24 <altera_avalon_jtag_uart_read+0x1dc>
    return ptr - buffer;
   8ca14:	e0fff517 	ldw	r3,-44(fp)
   8ca18:	e0bffd17 	ldw	r2,-12(fp)
   8ca1c:	1885c83a 	sub	r2,r3,r2
   8ca20:	00000606 	br	8ca3c <altera_avalon_jtag_uart_read+0x1f4>
  else if (flags & O_NONBLOCK)
   8ca24:	e0bfff17 	ldw	r2,-4(fp)
   8ca28:	1090000c 	andi	r2,r2,16384
   8ca2c:	10000226 	beq	r2,zero,8ca38 <altera_avalon_jtag_uart_read+0x1f0>
    return -EWOULDBLOCK;
   8ca30:	00bffd44 	movi	r2,-11
   8ca34:	00000106 	br	8ca3c <altera_avalon_jtag_uart_read+0x1f4>
  else
    return -EIO;
   8ca38:	00bffec4 	movi	r2,-5
}
   8ca3c:	e037883a 	mov	sp,fp
   8ca40:	dfc00117 	ldw	ra,4(sp)
   8ca44:	df000017 	ldw	fp,0(sp)
   8ca48:	dec00204 	addi	sp,sp,8
   8ca4c:	f800283a 	ret

0008ca50 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8ca50:	defff304 	addi	sp,sp,-52
   8ca54:	dfc00c15 	stw	ra,48(sp)
   8ca58:	df000b15 	stw	fp,44(sp)
   8ca5c:	df000b04 	addi	fp,sp,44
   8ca60:	e13ffc15 	stw	r4,-16(fp)
   8ca64:	e17ffd15 	stw	r5,-12(fp)
   8ca68:	e1bffe15 	stw	r6,-8(fp)
   8ca6c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   8ca70:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8ca74:	e0bffd17 	ldw	r2,-12(fp)
   8ca78:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8ca7c:	00003906 	br	8cb64 <altera_avalon_jtag_uart_write+0x114>
   8ca80:	00003806 	br	8cb64 <altera_avalon_jtag_uart_write+0x114>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8ca84:	e0bffc17 	ldw	r2,-16(fp)
   8ca88:	10800c17 	ldw	r2,48(r2)
   8ca8c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   8ca90:	e0bffc17 	ldw	r2,-16(fp)
   8ca94:	10800d17 	ldw	r2,52(r2)
   8ca98:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   8ca9c:	e0fff817 	ldw	r3,-32(fp)
   8caa0:	e0bff517 	ldw	r2,-44(fp)
   8caa4:	1880062e 	bgeu	r3,r2,8cac0 <altera_avalon_jtag_uart_write+0x70>
        n = out - 1 - in;
   8caa8:	e0fff517 	ldw	r3,-44(fp)
   8caac:	e0bff817 	ldw	r2,-32(fp)
   8cab0:	1885c83a 	sub	r2,r3,r2
   8cab4:	10bfffc4 	addi	r2,r2,-1
   8cab8:	e0bff615 	stw	r2,-40(fp)
   8cabc:	00000b06 	br	8caec <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
   8cac0:	e0bff517 	ldw	r2,-44(fp)
   8cac4:	10000526 	beq	r2,zero,8cadc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8cac8:	00c20004 	movi	r3,2048
   8cacc:	e0bff817 	ldw	r2,-32(fp)
   8cad0:	1885c83a 	sub	r2,r3,r2
   8cad4:	e0bff615 	stw	r2,-40(fp)
   8cad8:	00000406 	br	8caec <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8cadc:	00c1ffc4 	movi	r3,2047
   8cae0:	e0bff817 	ldw	r2,-32(fp)
   8cae4:	1885c83a 	sub	r2,r3,r2
   8cae8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   8caec:	e0bff617 	ldw	r2,-40(fp)
   8caf0:	1000011e 	bne	r2,zero,8caf8 <altera_avalon_jtag_uart_write+0xa8>
        break;
   8caf4:	00001d06 	br	8cb6c <altera_avalon_jtag_uart_write+0x11c>

      if (n > count)
   8caf8:	e0fffe17 	ldw	r3,-8(fp)
   8cafc:	e0bff617 	ldw	r2,-40(fp)
   8cb00:	1880022e 	bgeu	r3,r2,8cb0c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
   8cb04:	e0bffe17 	ldw	r2,-8(fp)
   8cb08:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   8cb0c:	e0bff817 	ldw	r2,-32(fp)
   8cb10:	10820e04 	addi	r2,r2,2104
   8cb14:	e0fffc17 	ldw	r3,-16(fp)
   8cb18:	1885883a 	add	r2,r3,r2
   8cb1c:	1009883a 	mov	r4,r2
   8cb20:	e17ffd17 	ldw	r5,-12(fp)
   8cb24:	e1bff617 	ldw	r6,-40(fp)
   8cb28:	008a2e80 	call	8a2e8 <memcpy>
      ptr   += n;
   8cb2c:	e0fffd17 	ldw	r3,-12(fp)
   8cb30:	e0bff617 	ldw	r2,-40(fp)
   8cb34:	1885883a 	add	r2,r3,r2
   8cb38:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   8cb3c:	e0fffe17 	ldw	r3,-8(fp)
   8cb40:	e0bff617 	ldw	r2,-40(fp)
   8cb44:	1885c83a 	sub	r2,r3,r2
   8cb48:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8cb4c:	e0fff817 	ldw	r3,-32(fp)
   8cb50:	e0bff617 	ldw	r2,-40(fp)
   8cb54:	1885883a 	add	r2,r3,r2
   8cb58:	10c1ffcc 	andi	r3,r2,2047
   8cb5c:	e0bffc17 	ldw	r2,-16(fp)
   8cb60:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8cb64:	e0bffe17 	ldw	r2,-8(fp)
   8cb68:	00bfc616 	blt	zero,r2,8ca84 <__alt_data_end+0xfffd4814>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8cb6c:	0005303a 	rdctl	r2,status
   8cb70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8cb74:	e0fffa17 	ldw	r3,-24(fp)
   8cb78:	00bfff84 	movi	r2,-2
   8cb7c:	1884703a 	and	r2,r3,r2
   8cb80:	1001703a 	wrctl	status,r2
  
  return context;
   8cb84:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8cb88:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8cb8c:	e0bffc17 	ldw	r2,-16(fp)
   8cb90:	10800817 	ldw	r2,32(r2)
   8cb94:	10c00094 	ori	r3,r2,2
   8cb98:	e0bffc17 	ldw	r2,-16(fp)
   8cb9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8cba0:	e0bffc17 	ldw	r2,-16(fp)
   8cba4:	10800017 	ldw	r2,0(r2)
   8cba8:	10800104 	addi	r2,r2,4
   8cbac:	e0fffc17 	ldw	r3,-16(fp)
   8cbb0:	18c00817 	ldw	r3,32(r3)
   8cbb4:	10c00035 	stwio	r3,0(r2)
   8cbb8:	e0bff917 	ldw	r2,-28(fp)
   8cbbc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cbc0:	e0bffb17 	ldw	r2,-20(fp)
   8cbc4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   8cbc8:	e0bffe17 	ldw	r2,-8(fp)
   8cbcc:	0080120e 	bge	zero,r2,8cc18 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   8cbd0:	e0bfff17 	ldw	r2,-4(fp)
   8cbd4:	1090000c 	andi	r2,r2,16384
   8cbd8:	10000126 	beq	r2,zero,8cbe0 <altera_avalon_jtag_uart_write+0x190>
        break;
   8cbdc:	00001006 	br	8cc20 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8cbe0:	0001883a 	nop
   8cbe4:	e0bffc17 	ldw	r2,-16(fp)
   8cbe8:	10c00d17 	ldw	r3,52(r2)
   8cbec:	e0bff517 	ldw	r2,-44(fp)
   8cbf0:	1880051e 	bne	r3,r2,8cc08 <altera_avalon_jtag_uart_write+0x1b8>
   8cbf4:	e0bffc17 	ldw	r2,-16(fp)
   8cbf8:	10c00917 	ldw	r3,36(r2)
   8cbfc:	e0bffc17 	ldw	r2,-16(fp)
   8cc00:	10800117 	ldw	r2,4(r2)
   8cc04:	18bff736 	bltu	r3,r2,8cbe4 <__alt_data_end+0xfffd4974>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   8cc08:	e0bffc17 	ldw	r2,-16(fp)
   8cc0c:	10800917 	ldw	r2,36(r2)
   8cc10:	10000126 	beq	r2,zero,8cc18 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   8cc14:	00000206 	br	8cc20 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   8cc18:	e0bffe17 	ldw	r2,-8(fp)
   8cc1c:	00bf9816 	blt	zero,r2,8ca80 <__alt_data_end+0xfffd4810>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8cc20:	e0fffd17 	ldw	r3,-12(fp)
   8cc24:	e0bff717 	ldw	r2,-36(fp)
   8cc28:	18800426 	beq	r3,r2,8cc3c <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   8cc2c:	e0fffd17 	ldw	r3,-12(fp)
   8cc30:	e0bff717 	ldw	r2,-36(fp)
   8cc34:	1885c83a 	sub	r2,r3,r2
   8cc38:	00000606 	br	8cc54 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   8cc3c:	e0bfff17 	ldw	r2,-4(fp)
   8cc40:	1090000c 	andi	r2,r2,16384
   8cc44:	10000226 	beq	r2,zero,8cc50 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   8cc48:	00bffd44 	movi	r2,-11
   8cc4c:	00000106 	br	8cc54 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8cc50:	00bffec4 	movi	r2,-5
}
   8cc54:	e037883a 	mov	sp,fp
   8cc58:	dfc00117 	ldw	ra,4(sp)
   8cc5c:	df000017 	ldw	fp,0(sp)
   8cc60:	dec00204 	addi	sp,sp,8
   8cc64:	f800283a 	ret

0008cc68 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   8cc68:	defff404 	addi	sp,sp,-48
   8cc6c:	df000b15 	stw	fp,44(sp)
   8cc70:	df000b04 	addi	fp,sp,44
   8cc74:	e13ffc15 	stw	r4,-16(fp)
   8cc78:	e17ffd15 	stw	r5,-12(fp)
   8cc7c:	e1bffe15 	stw	r6,-8(fp)
   8cc80:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   8cc84:	e0ffff17 	ldw	r3,-4(fp)
   8cc88:	e0bffe17 	ldw	r2,-8(fp)
   8cc8c:	1885883a 	add	r2,r3,r2
   8cc90:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   8cc94:	e0c00217 	ldw	r3,8(fp)
   8cc98:	e0800117 	ldw	r2,4(fp)
   8cc9c:	1885883a 	add	r2,r3,r2
   8cca0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   8cca4:	e0800117 	ldw	r2,4(fp)
   8cca8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   8ccac:	e0bffe17 	ldw	r2,-8(fp)
   8ccb0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   8ccb4:	00800044 	movi	r2,1
   8ccb8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   8ccbc:	e0bffc17 	ldw	r2,-16(fp)
   8ccc0:	10800504 	addi	r2,r2,20
   8ccc4:	e0fffd17 	ldw	r3,-12(fp)
   8ccc8:	01000044 	movi	r4,1
   8cccc:	20c6983a 	sll	r3,r4,r3
   8ccd0:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   8ccd4:	e0800317 	ldw	r2,12(fp)
   8ccd8:	1080008c 	andi	r2,r2,2
   8ccdc:	1000041e 	bne	r2,zero,8ccf0 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   8cce0:	e0bffc17 	ldw	r2,-16(fp)
   8cce4:	10800304 	addi	r2,r2,12
   8cce8:	00c10004 	movi	r3,1024
   8ccec:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   8ccf0:	e0bffc17 	ldw	r2,-16(fp)
   8ccf4:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   8ccf8:	e0bffc17 	ldw	r2,-16(fp)
   8ccfc:	10800204 	addi	r2,r2,8
   8cd00:	10800037 	ldwio	r2,0(r2)
   8cd04:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   8cd08:	e0bffa17 	ldw	r2,-24(fp)
   8cd0c:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   8cd10:	10000226 	beq	r2,zero,8cd1c <alt_avalon_spi_command+0xb4>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   8cd14:	e0bff717 	ldw	r2,-36(fp)
   8cd18:	1000031e 	bne	r2,zero,8cd28 <alt_avalon_spi_command+0xc0>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   8cd1c:	e0bffa17 	ldw	r2,-24(fp)
   8cd20:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   8cd24:	103ff426 	beq	r2,zero,8ccf8 <__alt_data_end+0xfffd4a88>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   8cd28:	e0bffa17 	ldw	r2,-24(fp)
   8cd2c:	1080100c 	andi	r2,r2,64
   8cd30:	10001e26 	beq	r2,zero,8cdac <alt_avalon_spi_command+0x144>
   8cd34:	e0bff717 	ldw	r2,-36(fp)
   8cd38:	00801c0e 	bge	zero,r2,8cdac <alt_avalon_spi_command+0x144>
    {
      credits--;
   8cd3c:	e0bff717 	ldw	r2,-36(fp)
   8cd40:	10bfffc4 	addi	r2,r2,-1
   8cd44:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   8cd48:	e0ffff17 	ldw	r3,-4(fp)
   8cd4c:	e0bff817 	ldw	r2,-32(fp)
   8cd50:	18800a2e 	bgeu	r3,r2,8cd7c <alt_avalon_spi_command+0x114>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   8cd54:	e0bffc17 	ldw	r2,-16(fp)
   8cd58:	10800104 	addi	r2,r2,4
   8cd5c:	1007883a 	mov	r3,r2
   8cd60:	e0bfff17 	ldw	r2,-4(fp)
   8cd64:	11000044 	addi	r4,r2,1
   8cd68:	e13fff15 	stw	r4,-4(fp)
   8cd6c:	10800003 	ldbu	r2,0(r2)
   8cd70:	10803fcc 	andi	r2,r2,255
   8cd74:	18800035 	stwio	r2,0(r3)
   8cd78:	00000c06 	br	8cdac <alt_avalon_spi_command+0x144>
      else if (write_zeros > 0)
   8cd7c:	e0bff517 	ldw	r2,-44(fp)
   8cd80:	10000826 	beq	r2,zero,8cda4 <alt_avalon_spi_command+0x13c>
      {
        write_zeros--;
   8cd84:	e0bff517 	ldw	r2,-44(fp)
   8cd88:	10bfffc4 	addi	r2,r2,-1
   8cd8c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   8cd90:	e0bffc17 	ldw	r2,-16(fp)
   8cd94:	10800104 	addi	r2,r2,4
   8cd98:	0007883a 	mov	r3,zero
   8cd9c:	10c00035 	stwio	r3,0(r2)
   8cda0:	00000206 	br	8cdac <alt_avalon_spi_command+0x144>
      }
      else
        credits = -1024;
   8cda4:	00bf0004 	movi	r2,-1024
   8cda8:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   8cdac:	e0bffa17 	ldw	r2,-24(fp)
   8cdb0:	1080200c 	andi	r2,r2,128
   8cdb4:	10001726 	beq	r2,zero,8ce14 <alt_avalon_spi_command+0x1ac>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   8cdb8:	e0bffc17 	ldw	r2,-16(fp)
   8cdbc:	10800037 	ldwio	r2,0(r2)
   8cdc0:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   8cdc4:	e0bff617 	ldw	r2,-40(fp)
   8cdc8:	10000426 	beq	r2,zero,8cddc <alt_avalon_spi_command+0x174>
        read_ignore--;
   8cdcc:	e0bff617 	ldw	r2,-40(fp)
   8cdd0:	10bfffc4 	addi	r2,r2,-1
   8cdd4:	e0bff615 	stw	r2,-40(fp)
   8cdd8:	00000506 	br	8cdf0 <alt_avalon_spi_command+0x188>
      else
        *read_data++ = (alt_u8)rxdata;
   8cddc:	e0800217 	ldw	r2,8(fp)
   8cde0:	10c00044 	addi	r3,r2,1
   8cde4:	e0c00215 	stw	r3,8(fp)
   8cde8:	e0fffb17 	ldw	r3,-20(fp)
   8cdec:	10c00005 	stb	r3,0(r2)
      credits++;
   8cdf0:	e0bff717 	ldw	r2,-36(fp)
   8cdf4:	10800044 	addi	r2,r2,1
   8cdf8:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   8cdfc:	e0bff617 	ldw	r2,-40(fp)
   8ce00:	1000041e 	bne	r2,zero,8ce14 <alt_avalon_spi_command+0x1ac>
   8ce04:	e0c00217 	ldw	r3,8(fp)
   8ce08:	e0bff917 	ldw	r2,-28(fp)
   8ce0c:	1880011e 	bne	r3,r2,8ce14 <alt_avalon_spi_command+0x1ac>
        break;
   8ce10:	00000106 	br	8ce18 <alt_avalon_spi_command+0x1b0>
    }
    
  }
   8ce14:	003fb806 	br	8ccf8 <__alt_data_end+0xfffd4a88>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   8ce18:	e0bffc17 	ldw	r2,-16(fp)
   8ce1c:	10800204 	addi	r2,r2,8
   8ce20:	10800037 	ldwio	r2,0(r2)
   8ce24:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   8ce28:	e0bffa17 	ldw	r2,-24(fp)
   8ce2c:	1080080c 	andi	r2,r2,32
   8ce30:	103ff926 	beq	r2,zero,8ce18 <__alt_data_end+0xfffd4ba8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   8ce34:	e0800317 	ldw	r2,12(fp)
   8ce38:	1080004c 	andi	r2,r2,1
   8ce3c:	1000041e 	bne	r2,zero,8ce50 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   8ce40:	e0bffc17 	ldw	r2,-16(fp)
   8ce44:	10800304 	addi	r2,r2,12
   8ce48:	0007883a 	mov	r3,zero
   8ce4c:	10c00035 	stwio	r3,0(r2)

  return read_length;
   8ce50:	e0800117 	ldw	r2,4(fp)
}
   8ce54:	e037883a 	mov	sp,fp
   8ce58:	df000017 	ldw	fp,0(sp)
   8ce5c:	dec00104 	addi	sp,sp,4
   8ce60:	f800283a 	ret

0008ce64 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   8ce64:	defffa04 	addi	sp,sp,-24
   8ce68:	dfc00515 	stw	ra,20(sp)
   8ce6c:	df000415 	stw	fp,16(sp)
   8ce70:	df000404 	addi	fp,sp,16
   8ce74:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   8ce78:	0007883a 	mov	r3,zero
   8ce7c:	e0bfff17 	ldw	r2,-4(fp)
   8ce80:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   8ce84:	e0bfff17 	ldw	r2,-4(fp)
   8ce88:	10800104 	addi	r2,r2,4
   8ce8c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ce90:	0005303a 	rdctl	r2,status
   8ce94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ce98:	e0fffd17 	ldw	r3,-12(fp)
   8ce9c:	00bfff84 	movi	r2,-2
   8cea0:	1884703a 	and	r2,r3,r2
   8cea4:	1001703a 	wrctl	status,r2
  
  return context;
   8cea8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   8ceac:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   8ceb0:	008bef00 	call	8bef0 <alt_tick>
   8ceb4:	e0bffc17 	ldw	r2,-16(fp)
   8ceb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8cebc:	e0bffe17 	ldw	r2,-8(fp)
   8cec0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   8cec4:	e037883a 	mov	sp,fp
   8cec8:	dfc00117 	ldw	ra,4(sp)
   8cecc:	df000017 	ldw	fp,0(sp)
   8ced0:	dec00204 	addi	sp,sp,8
   8ced4:	f800283a 	ret

0008ced8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   8ced8:	defff804 	addi	sp,sp,-32
   8cedc:	dfc00715 	stw	ra,28(sp)
   8cee0:	df000615 	stw	fp,24(sp)
   8cee4:	df000604 	addi	fp,sp,24
   8cee8:	e13ffc15 	stw	r4,-16(fp)
   8ceec:	e17ffd15 	stw	r5,-12(fp)
   8cef0:	e1bffe15 	stw	r6,-8(fp)
   8cef4:	e1ffff15 	stw	r7,-4(fp)
   8cef8:	e0bfff17 	ldw	r2,-4(fp)
   8cefc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   8cf00:	008002f4 	movhi	r2,11
   8cf04:	10b97a04 	addi	r2,r2,-6680
   8cf08:	10800017 	ldw	r2,0(r2)
   8cf0c:	1000041e 	bne	r2,zero,8cf20 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   8cf10:	008002f4 	movhi	r2,11
   8cf14:	10b97a04 	addi	r2,r2,-6680
   8cf18:	e0fffb17 	ldw	r3,-20(fp)
   8cf1c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   8cf20:	e0bffc17 	ldw	r2,-16(fp)
   8cf24:	10800104 	addi	r2,r2,4
   8cf28:	00c001c4 	movi	r3,7
   8cf2c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8cf30:	d8000015 	stw	zero,0(sp)
   8cf34:	e13ffd17 	ldw	r4,-12(fp)
   8cf38:	e17ffe17 	ldw	r5,-8(fp)
   8cf3c:	01800274 	movhi	r6,9
   8cf40:	31b39904 	addi	r6,r6,-12700
   8cf44:	e1fffc17 	ldw	r7,-16(fp)
   8cf48:	008b9440 	call	8b944 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8cf4c:	e037883a 	mov	sp,fp
   8cf50:	dfc00117 	ldw	ra,4(sp)
   8cf54:	df000017 	ldw	fp,0(sp)
   8cf58:	dec00204 	addi	sp,sp,8
   8cf5c:	f800283a 	ret

0008cf60 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   8cf60:	defffa04 	addi	sp,sp,-24
   8cf64:	dfc00515 	stw	ra,20(sp)
   8cf68:	df000415 	stw	fp,16(sp)
   8cf6c:	df000404 	addi	fp,sp,16
   8cf70:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   8cf74:	008000c4 	movi	r2,3
   8cf78:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   8cf7c:	e0fffd17 	ldw	r3,-12(fp)
   8cf80:	008003f4 	movhi	r2,15
   8cf84:	10909004 	addi	r2,r2,16960
   8cf88:	1885383a 	mul	r2,r3,r2
   8cf8c:	0100bef4 	movhi	r4,763
   8cf90:	213c2004 	addi	r4,r4,-3968
   8cf94:	100b883a 	mov	r5,r2
   8cf98:	00878740 	call	87874 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   8cf9c:	01200034 	movhi	r4,32768
   8cfa0:	213fffc4 	addi	r4,r4,-1
   8cfa4:	100b883a 	mov	r5,r2
   8cfa8:	00878740 	call	87874 <__udivsi3>
   8cfac:	e13fff17 	ldw	r4,-4(fp)
   8cfb0:	100b883a 	mov	r5,r2
   8cfb4:	00878740 	call	87874 <__udivsi3>
   8cfb8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   8cfbc:	e0bffe17 	ldw	r2,-8(fp)
   8cfc0:	10002926 	beq	r2,zero,8d068 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   8cfc4:	e03ffc15 	stw	zero,-16(fp)
   8cfc8:	00001606 	br	8d024 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   8cfcc:	00a00034 	movhi	r2,32768
   8cfd0:	10bfffc4 	addi	r2,r2,-1
   8cfd4:	10bfffc4 	addi	r2,r2,-1
   8cfd8:	103ffe1e 	bne	r2,zero,8cfd4 <__alt_data_end+0xfffd4d64>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   8cfdc:	e0fffd17 	ldw	r3,-12(fp)
   8cfe0:	008003f4 	movhi	r2,15
   8cfe4:	10909004 	addi	r2,r2,16960
   8cfe8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   8cfec:	0100bef4 	movhi	r4,763
   8cff0:	213c2004 	addi	r4,r4,-3968
   8cff4:	100b883a 	mov	r5,r2
   8cff8:	00878740 	call	87874 <__udivsi3>
   8cffc:	01200034 	movhi	r4,32768
   8d000:	213fffc4 	addi	r4,r4,-1
   8d004:	100b883a 	mov	r5,r2
   8d008:	00878740 	call	87874 <__udivsi3>
   8d00c:	e0ffff17 	ldw	r3,-4(fp)
   8d010:	1885c83a 	sub	r2,r3,r2
   8d014:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   8d018:	e0bffc17 	ldw	r2,-16(fp)
   8d01c:	10800044 	addi	r2,r2,1
   8d020:	e0bffc15 	stw	r2,-16(fp)
   8d024:	e0fffc17 	ldw	r3,-16(fp)
   8d028:	e0bffe17 	ldw	r2,-8(fp)
   8d02c:	18bfe716 	blt	r3,r2,8cfcc <__alt_data_end+0xfffd4d5c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   8d030:	e0fffd17 	ldw	r3,-12(fp)
   8d034:	008003f4 	movhi	r2,15
   8d038:	10909004 	addi	r2,r2,16960
   8d03c:	1885383a 	mul	r2,r3,r2
   8d040:	0100bef4 	movhi	r4,763
   8d044:	213c2004 	addi	r4,r4,-3968
   8d048:	100b883a 	mov	r5,r2
   8d04c:	00878740 	call	87874 <__udivsi3>
   8d050:	1007883a 	mov	r3,r2
   8d054:	e0bfff17 	ldw	r2,-4(fp)
   8d058:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8d05c:	10bfffc4 	addi	r2,r2,-1
   8d060:	103ffe1e 	bne	r2,zero,8d05c <__alt_data_end+0xfffd4dec>
   8d064:	00000d06 	br	8d09c <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   8d068:	e0fffd17 	ldw	r3,-12(fp)
   8d06c:	008003f4 	movhi	r2,15
   8d070:	10909004 	addi	r2,r2,16960
   8d074:	1885383a 	mul	r2,r3,r2
   8d078:	0100bef4 	movhi	r4,763
   8d07c:	213c2004 	addi	r4,r4,-3968
   8d080:	100b883a 	mov	r5,r2
   8d084:	00878740 	call	87874 <__udivsi3>
   8d088:	1007883a 	mov	r3,r2
   8d08c:	e0bfff17 	ldw	r2,-4(fp)
   8d090:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   8d094:	10bfffc4 	addi	r2,r2,-1
   8d098:	00bffe16 	blt	zero,r2,8d094 <__alt_data_end+0xfffd4e24>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   8d09c:	0005883a 	mov	r2,zero
}
   8d0a0:	e037883a 	mov	sp,fp
   8d0a4:	dfc00117 	ldw	ra,4(sp)
   8d0a8:	df000017 	ldw	fp,0(sp)
   8d0ac:	dec00204 	addi	sp,sp,8
   8d0b0:	f800283a 	ret

0008d0b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d0b4:	defffe04 	addi	sp,sp,-8
   8d0b8:	dfc00115 	stw	ra,4(sp)
   8d0bc:	df000015 	stw	fp,0(sp)
   8d0c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8d0c4:	008002f4 	movhi	r2,11
   8d0c8:	10acb804 	addi	r2,r2,-19744
   8d0cc:	10800017 	ldw	r2,0(r2)
   8d0d0:	10000526 	beq	r2,zero,8d0e8 <alt_get_errno+0x34>
   8d0d4:	008002f4 	movhi	r2,11
   8d0d8:	10acb804 	addi	r2,r2,-19744
   8d0dc:	10800017 	ldw	r2,0(r2)
   8d0e0:	103ee83a 	callr	r2
   8d0e4:	00000206 	br	8d0f0 <alt_get_errno+0x3c>
   8d0e8:	008002f4 	movhi	r2,11
   8d0ec:	10b97504 	addi	r2,r2,-6700
}
   8d0f0:	e037883a 	mov	sp,fp
   8d0f4:	dfc00117 	ldw	ra,4(sp)
   8d0f8:	df000017 	ldw	fp,0(sp)
   8d0fc:	dec00204 	addi	sp,sp,8
   8d100:	f800283a 	ret

0008d104 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8d104:	defffb04 	addi	sp,sp,-20
   8d108:	dfc00415 	stw	ra,16(sp)
   8d10c:	df000315 	stw	fp,12(sp)
   8d110:	df000304 	addi	fp,sp,12
   8d114:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8d118:	e0bfff17 	ldw	r2,-4(fp)
   8d11c:	10000616 	blt	r2,zero,8d138 <close+0x34>
   8d120:	e0bfff17 	ldw	r2,-4(fp)
   8d124:	10c00324 	muli	r3,r2,12
   8d128:	008002f4 	movhi	r2,11
   8d12c:	10ac4804 	addi	r2,r2,-20192
   8d130:	1885883a 	add	r2,r3,r2
   8d134:	00000106 	br	8d13c <close+0x38>
   8d138:	0005883a 	mov	r2,zero
   8d13c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8d140:	e0bffd17 	ldw	r2,-12(fp)
   8d144:	10001826 	beq	r2,zero,8d1a8 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8d148:	e0bffd17 	ldw	r2,-12(fp)
   8d14c:	10800017 	ldw	r2,0(r2)
   8d150:	10800417 	ldw	r2,16(r2)
   8d154:	10000626 	beq	r2,zero,8d170 <close+0x6c>
   8d158:	e0bffd17 	ldw	r2,-12(fp)
   8d15c:	10800017 	ldw	r2,0(r2)
   8d160:	10800417 	ldw	r2,16(r2)
   8d164:	e13ffd17 	ldw	r4,-12(fp)
   8d168:	103ee83a 	callr	r2
   8d16c:	00000106 	br	8d174 <close+0x70>
   8d170:	0005883a 	mov	r2,zero
   8d174:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8d178:	e13fff17 	ldw	r4,-4(fp)
   8d17c:	008d7bc0 	call	8d7bc <alt_release_fd>
    if (rval < 0)
   8d180:	e0bffe17 	ldw	r2,-8(fp)
   8d184:	1000060e 	bge	r2,zero,8d1a0 <close+0x9c>
    {
      ALT_ERRNO = -rval;
   8d188:	008d0b40 	call	8d0b4 <alt_get_errno>
   8d18c:	e0fffe17 	ldw	r3,-8(fp)
   8d190:	00c7c83a 	sub	r3,zero,r3
   8d194:	10c00015 	stw	r3,0(r2)
      return -1;
   8d198:	00bfffc4 	movi	r2,-1
   8d19c:	00000606 	br	8d1b8 <close+0xb4>
    }
    return 0;
   8d1a0:	0005883a 	mov	r2,zero
   8d1a4:	00000406 	br	8d1b8 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8d1a8:	008d0b40 	call	8d0b4 <alt_get_errno>
   8d1ac:	00c01444 	movi	r3,81
   8d1b0:	10c00015 	stw	r3,0(r2)
    return -1;
   8d1b4:	00bfffc4 	movi	r2,-1
  }
}
   8d1b8:	e037883a 	mov	sp,fp
   8d1bc:	dfc00117 	ldw	ra,4(sp)
   8d1c0:	df000017 	ldw	fp,0(sp)
   8d1c4:	dec00204 	addi	sp,sp,8
   8d1c8:	f800283a 	ret

0008d1cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8d1cc:	defffe04 	addi	sp,sp,-8
   8d1d0:	df000115 	stw	fp,4(sp)
   8d1d4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8d1d8:	e03fff15 	stw	zero,-4(fp)
   8d1dc:	00000506 	br	8d1f4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   8d1e0:	e0bfff17 	ldw	r2,-4(fp)
   8d1e4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   8d1e8:	e0bfff17 	ldw	r2,-4(fp)
   8d1ec:	10800804 	addi	r2,r2,32
   8d1f0:	e0bfff15 	stw	r2,-4(fp)
   8d1f4:	e0bfff17 	ldw	r2,-4(fp)
   8d1f8:	10820030 	cmpltui	r2,r2,2048
   8d1fc:	103ff81e 	bne	r2,zero,8d1e0 <__alt_data_end+0xfffd4f70>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   8d200:	e037883a 	mov	sp,fp
   8d204:	df000017 	ldw	fp,0(sp)
   8d208:	dec00104 	addi	sp,sp,4
   8d20c:	f800283a 	ret

0008d210 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   8d210:	defffc04 	addi	sp,sp,-16
   8d214:	df000315 	stw	fp,12(sp)
   8d218:	df000304 	addi	fp,sp,12
   8d21c:	e13ffd15 	stw	r4,-12(fp)
   8d220:	e17ffe15 	stw	r5,-8(fp)
   8d224:	e1bfff15 	stw	r6,-4(fp)
  return len;
   8d228:	e0bfff17 	ldw	r2,-4(fp)
}
   8d22c:	e037883a 	mov	sp,fp
   8d230:	df000017 	ldw	fp,0(sp)
   8d234:	dec00104 	addi	sp,sp,4
   8d238:	f800283a 	ret

0008d23c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d23c:	defffe04 	addi	sp,sp,-8
   8d240:	dfc00115 	stw	ra,4(sp)
   8d244:	df000015 	stw	fp,0(sp)
   8d248:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8d24c:	008002f4 	movhi	r2,11
   8d250:	10acb804 	addi	r2,r2,-19744
   8d254:	10800017 	ldw	r2,0(r2)
   8d258:	10000526 	beq	r2,zero,8d270 <alt_get_errno+0x34>
   8d25c:	008002f4 	movhi	r2,11
   8d260:	10acb804 	addi	r2,r2,-19744
   8d264:	10800017 	ldw	r2,0(r2)
   8d268:	103ee83a 	callr	r2
   8d26c:	00000206 	br	8d278 <alt_get_errno+0x3c>
   8d270:	008002f4 	movhi	r2,11
   8d274:	10b97504 	addi	r2,r2,-6700
}
   8d278:	e037883a 	mov	sp,fp
   8d27c:	dfc00117 	ldw	ra,4(sp)
   8d280:	df000017 	ldw	fp,0(sp)
   8d284:	dec00204 	addi	sp,sp,8
   8d288:	f800283a 	ret

0008d28c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8d28c:	defffa04 	addi	sp,sp,-24
   8d290:	dfc00515 	stw	ra,20(sp)
   8d294:	df000415 	stw	fp,16(sp)
   8d298:	df000404 	addi	fp,sp,16
   8d29c:	e13ffe15 	stw	r4,-8(fp)
   8d2a0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8d2a4:	e0bffe17 	ldw	r2,-8(fp)
   8d2a8:	10000326 	beq	r2,zero,8d2b8 <alt_dev_llist_insert+0x2c>
   8d2ac:	e0bffe17 	ldw	r2,-8(fp)
   8d2b0:	10800217 	ldw	r2,8(r2)
   8d2b4:	1000051e 	bne	r2,zero,8d2cc <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   8d2b8:	008d23c0 	call	8d23c <alt_get_errno>
   8d2bc:	00c00584 	movi	r3,22
   8d2c0:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   8d2c4:	00bffa84 	movi	r2,-22
   8d2c8:	00001306 	br	8d318 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   8d2cc:	e0bffe17 	ldw	r2,-8(fp)
   8d2d0:	e0ffff17 	ldw	r3,-4(fp)
   8d2d4:	e0fffc15 	stw	r3,-16(fp)
   8d2d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8d2dc:	e0bffd17 	ldw	r2,-12(fp)
   8d2e0:	e0fffc17 	ldw	r3,-16(fp)
   8d2e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   8d2e8:	e0bffc17 	ldw	r2,-16(fp)
   8d2ec:	10c00017 	ldw	r3,0(r2)
   8d2f0:	e0bffd17 	ldw	r2,-12(fp)
   8d2f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   8d2f8:	e0bffc17 	ldw	r2,-16(fp)
   8d2fc:	10800017 	ldw	r2,0(r2)
   8d300:	e0fffd17 	ldw	r3,-12(fp)
   8d304:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   8d308:	e0bffc17 	ldw	r2,-16(fp)
   8d30c:	e0fffd17 	ldw	r3,-12(fp)
   8d310:	10c00015 	stw	r3,0(r2)

  return 0;  
   8d314:	0005883a 	mov	r2,zero
}
   8d318:	e037883a 	mov	sp,fp
   8d31c:	dfc00117 	ldw	ra,4(sp)
   8d320:	df000017 	ldw	fp,0(sp)
   8d324:	dec00204 	addi	sp,sp,8
   8d328:	f800283a 	ret

0008d32c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8d32c:	defffd04 	addi	sp,sp,-12
   8d330:	dfc00215 	stw	ra,8(sp)
   8d334:	df000115 	stw	fp,4(sp)
   8d338:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8d33c:	00800274 	movhi	r2,9
   8d340:	10b7a404 	addi	r2,r2,-8560
   8d344:	e0bfff15 	stw	r2,-4(fp)
   8d348:	00000606 	br	8d364 <_do_ctors+0x38>
        (*ctor) (); 
   8d34c:	e0bfff17 	ldw	r2,-4(fp)
   8d350:	10800017 	ldw	r2,0(r2)
   8d354:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8d358:	e0bfff17 	ldw	r2,-4(fp)
   8d35c:	10bfff04 	addi	r2,r2,-4
   8d360:	e0bfff15 	stw	r2,-4(fp)
   8d364:	e0ffff17 	ldw	r3,-4(fp)
   8d368:	00800274 	movhi	r2,9
   8d36c:	10b7a504 	addi	r2,r2,-8556
   8d370:	18bff62e 	bgeu	r3,r2,8d34c <__alt_data_end+0xfffd50dc>
        (*ctor) (); 
}
   8d374:	e037883a 	mov	sp,fp
   8d378:	dfc00117 	ldw	ra,4(sp)
   8d37c:	df000017 	ldw	fp,0(sp)
   8d380:	dec00204 	addi	sp,sp,8
   8d384:	f800283a 	ret

0008d388 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8d388:	defffd04 	addi	sp,sp,-12
   8d38c:	dfc00215 	stw	ra,8(sp)
   8d390:	df000115 	stw	fp,4(sp)
   8d394:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8d398:	00800274 	movhi	r2,9
   8d39c:	10b7a404 	addi	r2,r2,-8560
   8d3a0:	e0bfff15 	stw	r2,-4(fp)
   8d3a4:	00000606 	br	8d3c0 <_do_dtors+0x38>
        (*dtor) (); 
   8d3a8:	e0bfff17 	ldw	r2,-4(fp)
   8d3ac:	10800017 	ldw	r2,0(r2)
   8d3b0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8d3b4:	e0bfff17 	ldw	r2,-4(fp)
   8d3b8:	10bfff04 	addi	r2,r2,-4
   8d3bc:	e0bfff15 	stw	r2,-4(fp)
   8d3c0:	e0ffff17 	ldw	r3,-4(fp)
   8d3c4:	00800274 	movhi	r2,9
   8d3c8:	10b7a504 	addi	r2,r2,-8556
   8d3cc:	18bff62e 	bgeu	r3,r2,8d3a8 <__alt_data_end+0xfffd5138>
        (*dtor) (); 
}
   8d3d0:	e037883a 	mov	sp,fp
   8d3d4:	dfc00117 	ldw	ra,4(sp)
   8d3d8:	df000017 	ldw	fp,0(sp)
   8d3dc:	dec00204 	addi	sp,sp,8
   8d3e0:	f800283a 	ret

0008d3e4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8d3e4:	defffe04 	addi	sp,sp,-8
   8d3e8:	dfc00115 	stw	ra,4(sp)
   8d3ec:	df000015 	stw	fp,0(sp)
   8d3f0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   8d3f4:	0009883a 	mov	r4,zero
   8d3f8:	01440004 	movi	r5,4096
   8d3fc:	008da940 	call	8da94 <alt_icache_flush>
#endif
}
   8d400:	e037883a 	mov	sp,fp
   8d404:	dfc00117 	ldw	ra,4(sp)
   8d408:	df000017 	ldw	fp,0(sp)
   8d40c:	dec00204 	addi	sp,sp,8
   8d410:	f800283a 	ret

0008d414 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   8d414:	defff904 	addi	sp,sp,-28
   8d418:	dfc00615 	stw	ra,24(sp)
   8d41c:	df000515 	stw	fp,20(sp)
   8d420:	df000504 	addi	fp,sp,20
   8d424:	e13ffc15 	stw	r4,-16(fp)
   8d428:	e17ffd15 	stw	r5,-12(fp)
   8d42c:	e1bffe15 	stw	r6,-8(fp)
   8d430:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   8d434:	e13ffd17 	ldw	r4,-12(fp)
   8d438:	e17ffe17 	ldw	r5,-8(fp)
   8d43c:	e1bfff17 	ldw	r6,-4(fp)
   8d440:	008d6680 	call	8d668 <open>
   8d444:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   8d448:	e0bffb17 	ldw	r2,-20(fp)
   8d44c:	10001c16 	blt	r2,zero,8d4c0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   8d450:	00c002f4 	movhi	r3,11
   8d454:	18ec4804 	addi	r3,r3,-20192
   8d458:	e0bffb17 	ldw	r2,-20(fp)
   8d45c:	10800324 	muli	r2,r2,12
   8d460:	1885883a 	add	r2,r3,r2
   8d464:	10c00017 	ldw	r3,0(r2)
   8d468:	e0bffc17 	ldw	r2,-16(fp)
   8d46c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8d470:	00c002f4 	movhi	r3,11
   8d474:	18ec4804 	addi	r3,r3,-20192
   8d478:	e0bffb17 	ldw	r2,-20(fp)
   8d47c:	10800324 	muli	r2,r2,12
   8d480:	1885883a 	add	r2,r3,r2
   8d484:	10800104 	addi	r2,r2,4
   8d488:	10c00017 	ldw	r3,0(r2)
   8d48c:	e0bffc17 	ldw	r2,-16(fp)
   8d490:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8d494:	00c002f4 	movhi	r3,11
   8d498:	18ec4804 	addi	r3,r3,-20192
   8d49c:	e0bffb17 	ldw	r2,-20(fp)
   8d4a0:	10800324 	muli	r2,r2,12
   8d4a4:	1885883a 	add	r2,r3,r2
   8d4a8:	10800204 	addi	r2,r2,8
   8d4ac:	10c00017 	ldw	r3,0(r2)
   8d4b0:	e0bffc17 	ldw	r2,-16(fp)
   8d4b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   8d4b8:	e13ffb17 	ldw	r4,-20(fp)
   8d4bc:	008d7bc0 	call	8d7bc <alt_release_fd>
  }
} 
   8d4c0:	e037883a 	mov	sp,fp
   8d4c4:	dfc00117 	ldw	ra,4(sp)
   8d4c8:	df000017 	ldw	fp,0(sp)
   8d4cc:	dec00204 	addi	sp,sp,8
   8d4d0:	f800283a 	ret

0008d4d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8d4d4:	defffb04 	addi	sp,sp,-20
   8d4d8:	dfc00415 	stw	ra,16(sp)
   8d4dc:	df000315 	stw	fp,12(sp)
   8d4e0:	df000304 	addi	fp,sp,12
   8d4e4:	e13ffd15 	stw	r4,-12(fp)
   8d4e8:	e17ffe15 	stw	r5,-8(fp)
   8d4ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8d4f0:	010002f4 	movhi	r4,11
   8d4f4:	212c4b04 	addi	r4,r4,-20180
   8d4f8:	e17ffd17 	ldw	r5,-12(fp)
   8d4fc:	01800044 	movi	r6,1
   8d500:	01c07fc4 	movi	r7,511
   8d504:	008d4140 	call	8d414 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8d508:	010002f4 	movhi	r4,11
   8d50c:	212c4804 	addi	r4,r4,-20192
   8d510:	e17ffe17 	ldw	r5,-8(fp)
   8d514:	000d883a 	mov	r6,zero
   8d518:	01c07fc4 	movi	r7,511
   8d51c:	008d4140 	call	8d414 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8d520:	010002f4 	movhi	r4,11
   8d524:	212c4e04 	addi	r4,r4,-20168
   8d528:	e17fff17 	ldw	r5,-4(fp)
   8d52c:	01800044 	movi	r6,1
   8d530:	01c07fc4 	movi	r7,511
   8d534:	008d4140 	call	8d414 <alt_open_fd>
}  
   8d538:	e037883a 	mov	sp,fp
   8d53c:	dfc00117 	ldw	ra,4(sp)
   8d540:	df000017 	ldw	fp,0(sp)
   8d544:	dec00204 	addi	sp,sp,8
   8d548:	f800283a 	ret

0008d54c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8d54c:	defffe04 	addi	sp,sp,-8
   8d550:	dfc00115 	stw	ra,4(sp)
   8d554:	df000015 	stw	fp,0(sp)
   8d558:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8d55c:	008002f4 	movhi	r2,11
   8d560:	10acb804 	addi	r2,r2,-19744
   8d564:	10800017 	ldw	r2,0(r2)
   8d568:	10000526 	beq	r2,zero,8d580 <alt_get_errno+0x34>
   8d56c:	008002f4 	movhi	r2,11
   8d570:	10acb804 	addi	r2,r2,-19744
   8d574:	10800017 	ldw	r2,0(r2)
   8d578:	103ee83a 	callr	r2
   8d57c:	00000206 	br	8d588 <alt_get_errno+0x3c>
   8d580:	008002f4 	movhi	r2,11
   8d584:	10b97504 	addi	r2,r2,-6700
}
   8d588:	e037883a 	mov	sp,fp
   8d58c:	dfc00117 	ldw	ra,4(sp)
   8d590:	df000017 	ldw	fp,0(sp)
   8d594:	dec00204 	addi	sp,sp,8
   8d598:	f800283a 	ret

0008d59c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   8d59c:	defffd04 	addi	sp,sp,-12
   8d5a0:	df000215 	stw	fp,8(sp)
   8d5a4:	df000204 	addi	fp,sp,8
   8d5a8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8d5ac:	e0bfff17 	ldw	r2,-4(fp)
   8d5b0:	10800217 	ldw	r2,8(r2)
   8d5b4:	10d00034 	orhi	r3,r2,16384
   8d5b8:	e0bfff17 	ldw	r2,-4(fp)
   8d5bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8d5c0:	e03ffe15 	stw	zero,-8(fp)
   8d5c4:	00001d06 	br	8d63c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8d5c8:	00c002f4 	movhi	r3,11
   8d5cc:	18ec4804 	addi	r3,r3,-20192
   8d5d0:	e0bffe17 	ldw	r2,-8(fp)
   8d5d4:	10800324 	muli	r2,r2,12
   8d5d8:	1885883a 	add	r2,r3,r2
   8d5dc:	10c00017 	ldw	r3,0(r2)
   8d5e0:	e0bfff17 	ldw	r2,-4(fp)
   8d5e4:	10800017 	ldw	r2,0(r2)
   8d5e8:	1880111e 	bne	r3,r2,8d630 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8d5ec:	00c002f4 	movhi	r3,11
   8d5f0:	18ec4804 	addi	r3,r3,-20192
   8d5f4:	e0bffe17 	ldw	r2,-8(fp)
   8d5f8:	10800324 	muli	r2,r2,12
   8d5fc:	1885883a 	add	r2,r3,r2
   8d600:	10800204 	addi	r2,r2,8
   8d604:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8d608:	1000090e 	bge	r2,zero,8d630 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   8d60c:	e0bffe17 	ldw	r2,-8(fp)
   8d610:	10c00324 	muli	r3,r2,12
   8d614:	008002f4 	movhi	r2,11
   8d618:	10ac4804 	addi	r2,r2,-20192
   8d61c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8d620:	e0bfff17 	ldw	r2,-4(fp)
   8d624:	18800226 	beq	r3,r2,8d630 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   8d628:	00bffcc4 	movi	r2,-13
   8d62c:	00000a06 	br	8d658 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8d630:	e0bffe17 	ldw	r2,-8(fp)
   8d634:	10800044 	addi	r2,r2,1
   8d638:	e0bffe15 	stw	r2,-8(fp)
   8d63c:	008002f4 	movhi	r2,11
   8d640:	10acb704 	addi	r2,r2,-19748
   8d644:	10800017 	ldw	r2,0(r2)
   8d648:	1007883a 	mov	r3,r2
   8d64c:	e0bffe17 	ldw	r2,-8(fp)
   8d650:	18bfdd2e 	bgeu	r3,r2,8d5c8 <__alt_data_end+0xfffd5358>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   8d654:	0005883a 	mov	r2,zero
}
   8d658:	e037883a 	mov	sp,fp
   8d65c:	df000017 	ldw	fp,0(sp)
   8d660:	dec00104 	addi	sp,sp,4
   8d664:	f800283a 	ret

0008d668 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8d668:	defff604 	addi	sp,sp,-40
   8d66c:	dfc00915 	stw	ra,36(sp)
   8d670:	df000815 	stw	fp,32(sp)
   8d674:	df000804 	addi	fp,sp,32
   8d678:	e13ffd15 	stw	r4,-12(fp)
   8d67c:	e17ffe15 	stw	r5,-8(fp)
   8d680:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8d684:	00bfffc4 	movi	r2,-1
   8d688:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   8d68c:	00bffb44 	movi	r2,-19
   8d690:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   8d694:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8d698:	e13ffd17 	ldw	r4,-12(fp)
   8d69c:	014002f4 	movhi	r5,11
   8d6a0:	296cb504 	addi	r5,r5,-19756
   8d6a4:	008d83c0 	call	8d83c <alt_find_dev>
   8d6a8:	e0bff815 	stw	r2,-32(fp)
   8d6ac:	e0bff817 	ldw	r2,-32(fp)
   8d6b0:	1000051e 	bne	r2,zero,8d6c8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8d6b4:	e13ffd17 	ldw	r4,-12(fp)
   8d6b8:	008d8cc0 	call	8d8cc <alt_find_file>
   8d6bc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   8d6c0:	00800044 	movi	r2,1
   8d6c4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8d6c8:	e0bff817 	ldw	r2,-32(fp)
   8d6cc:	10002926 	beq	r2,zero,8d774 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   8d6d0:	e13ff817 	ldw	r4,-32(fp)
   8d6d4:	008d9e00 	call	8d9e0 <alt_get_fd>
   8d6d8:	e0bff915 	stw	r2,-28(fp)
   8d6dc:	e0bff917 	ldw	r2,-28(fp)
   8d6e0:	1000030e 	bge	r2,zero,8d6f0 <open+0x88>
    {
      status = index;
   8d6e4:	e0bff917 	ldw	r2,-28(fp)
   8d6e8:	e0bffa15 	stw	r2,-24(fp)
   8d6ec:	00002306 	br	8d77c <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   8d6f0:	e0bff917 	ldw	r2,-28(fp)
   8d6f4:	10c00324 	muli	r3,r2,12
   8d6f8:	008002f4 	movhi	r2,11
   8d6fc:	10ac4804 	addi	r2,r2,-20192
   8d700:	1885883a 	add	r2,r3,r2
   8d704:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8d708:	e0fffe17 	ldw	r3,-8(fp)
   8d70c:	00900034 	movhi	r2,16384
   8d710:	10bfffc4 	addi	r2,r2,-1
   8d714:	1886703a 	and	r3,r3,r2
   8d718:	e0bffc17 	ldw	r2,-16(fp)
   8d71c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8d720:	e0bffb17 	ldw	r2,-20(fp)
   8d724:	1000051e 	bne	r2,zero,8d73c <open+0xd4>
   8d728:	e13ffc17 	ldw	r4,-16(fp)
   8d72c:	008d59c0 	call	8d59c <alt_file_locked>
   8d730:	e0bffa15 	stw	r2,-24(fp)
   8d734:	e0bffa17 	ldw	r2,-24(fp)
   8d738:	10001016 	blt	r2,zero,8d77c <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8d73c:	e0bff817 	ldw	r2,-32(fp)
   8d740:	10800317 	ldw	r2,12(r2)
   8d744:	10000826 	beq	r2,zero,8d768 <open+0x100>
   8d748:	e0bff817 	ldw	r2,-32(fp)
   8d74c:	10800317 	ldw	r2,12(r2)
   8d750:	e13ffc17 	ldw	r4,-16(fp)
   8d754:	e17ffd17 	ldw	r5,-12(fp)
   8d758:	e1bffe17 	ldw	r6,-8(fp)
   8d75c:	e1ffff17 	ldw	r7,-4(fp)
   8d760:	103ee83a 	callr	r2
   8d764:	00000106 	br	8d76c <open+0x104>
   8d768:	0005883a 	mov	r2,zero
   8d76c:	e0bffa15 	stw	r2,-24(fp)
   8d770:	00000206 	br	8d77c <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   8d774:	00bffb44 	movi	r2,-19
   8d778:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8d77c:	e0bffa17 	ldw	r2,-24(fp)
   8d780:	1000080e 	bge	r2,zero,8d7a4 <open+0x13c>
  {
    alt_release_fd (index);  
   8d784:	e13ff917 	ldw	r4,-28(fp)
   8d788:	008d7bc0 	call	8d7bc <alt_release_fd>
    ALT_ERRNO = -status;
   8d78c:	008d54c0 	call	8d54c <alt_get_errno>
   8d790:	e0fffa17 	ldw	r3,-24(fp)
   8d794:	00c7c83a 	sub	r3,zero,r3
   8d798:	10c00015 	stw	r3,0(r2)
    return -1;
   8d79c:	00bfffc4 	movi	r2,-1
   8d7a0:	00000106 	br	8d7a8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   8d7a4:	e0bff917 	ldw	r2,-28(fp)
}
   8d7a8:	e037883a 	mov	sp,fp
   8d7ac:	dfc00117 	ldw	ra,4(sp)
   8d7b0:	df000017 	ldw	fp,0(sp)
   8d7b4:	dec00204 	addi	sp,sp,8
   8d7b8:	f800283a 	ret

0008d7bc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8d7bc:	defffe04 	addi	sp,sp,-8
   8d7c0:	df000115 	stw	fp,4(sp)
   8d7c4:	df000104 	addi	fp,sp,4
   8d7c8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   8d7cc:	e0bfff17 	ldw	r2,-4(fp)
   8d7d0:	108000d0 	cmplti	r2,r2,3
   8d7d4:	10000d1e 	bne	r2,zero,8d80c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   8d7d8:	00c002f4 	movhi	r3,11
   8d7dc:	18ec4804 	addi	r3,r3,-20192
   8d7e0:	e0bfff17 	ldw	r2,-4(fp)
   8d7e4:	10800324 	muli	r2,r2,12
   8d7e8:	1885883a 	add	r2,r3,r2
   8d7ec:	10800204 	addi	r2,r2,8
   8d7f0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   8d7f4:	00c002f4 	movhi	r3,11
   8d7f8:	18ec4804 	addi	r3,r3,-20192
   8d7fc:	e0bfff17 	ldw	r2,-4(fp)
   8d800:	10800324 	muli	r2,r2,12
   8d804:	1885883a 	add	r2,r3,r2
   8d808:	10000015 	stw	zero,0(r2)
  }
}
   8d80c:	e037883a 	mov	sp,fp
   8d810:	df000017 	ldw	fp,0(sp)
   8d814:	dec00104 	addi	sp,sp,4
   8d818:	f800283a 	ret

0008d81c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   8d81c:	deffff04 	addi	sp,sp,-4
   8d820:	df000015 	stw	fp,0(sp)
   8d824:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   8d828:	000170fa 	wrctl	ienable,zero
}
   8d82c:	e037883a 	mov	sp,fp
   8d830:	df000017 	ldw	fp,0(sp)
   8d834:	dec00104 	addi	sp,sp,4
   8d838:	f800283a 	ret

0008d83c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8d83c:	defffa04 	addi	sp,sp,-24
   8d840:	dfc00515 	stw	ra,20(sp)
   8d844:	df000415 	stw	fp,16(sp)
   8d848:	df000404 	addi	fp,sp,16
   8d84c:	e13ffe15 	stw	r4,-8(fp)
   8d850:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   8d854:	e0bfff17 	ldw	r2,-4(fp)
   8d858:	10800017 	ldw	r2,0(r2)
   8d85c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   8d860:	e13ffe17 	ldw	r4,-8(fp)
   8d864:	008a5980 	call	8a598 <strlen>
   8d868:	10800044 	addi	r2,r2,1
   8d86c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8d870:	00000d06 	br	8d8a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8d874:	e0bffc17 	ldw	r2,-16(fp)
   8d878:	10c00217 	ldw	r3,8(r2)
   8d87c:	e0bffd17 	ldw	r2,-12(fp)
   8d880:	1809883a 	mov	r4,r3
   8d884:	e17ffe17 	ldw	r5,-8(fp)
   8d888:	100d883a 	mov	r6,r2
   8d88c:	008db540 	call	8db54 <memcmp>
   8d890:	1000021e 	bne	r2,zero,8d89c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   8d894:	e0bffc17 	ldw	r2,-16(fp)
   8d898:	00000706 	br	8d8b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   8d89c:	e0bffc17 	ldw	r2,-16(fp)
   8d8a0:	10800017 	ldw	r2,0(r2)
   8d8a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8d8a8:	e0fffc17 	ldw	r3,-16(fp)
   8d8ac:	e0bfff17 	ldw	r2,-4(fp)
   8d8b0:	18bff01e 	bne	r3,r2,8d874 <__alt_data_end+0xfffd5604>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8d8b4:	0005883a 	mov	r2,zero
}
   8d8b8:	e037883a 	mov	sp,fp
   8d8bc:	dfc00117 	ldw	ra,4(sp)
   8d8c0:	df000017 	ldw	fp,0(sp)
   8d8c4:	dec00204 	addi	sp,sp,8
   8d8c8:	f800283a 	ret

0008d8cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8d8cc:	defffb04 	addi	sp,sp,-20
   8d8d0:	dfc00415 	stw	ra,16(sp)
   8d8d4:	df000315 	stw	fp,12(sp)
   8d8d8:	df000304 	addi	fp,sp,12
   8d8dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8d8e0:	008002f4 	movhi	r2,11
   8d8e4:	10acb304 	addi	r2,r2,-19764
   8d8e8:	10800017 	ldw	r2,0(r2)
   8d8ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8d8f0:	00003106 	br	8d9b8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   8d8f4:	e0bffd17 	ldw	r2,-12(fp)
   8d8f8:	10800217 	ldw	r2,8(r2)
   8d8fc:	1009883a 	mov	r4,r2
   8d900:	008a5980 	call	8a598 <strlen>
   8d904:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   8d908:	e0bffd17 	ldw	r2,-12(fp)
   8d90c:	10c00217 	ldw	r3,8(r2)
   8d910:	e0bffe17 	ldw	r2,-8(fp)
   8d914:	10bfffc4 	addi	r2,r2,-1
   8d918:	1885883a 	add	r2,r3,r2
   8d91c:	10800003 	ldbu	r2,0(r2)
   8d920:	10803fcc 	andi	r2,r2,255
   8d924:	1080201c 	xori	r2,r2,128
   8d928:	10bfe004 	addi	r2,r2,-128
   8d92c:	10800bd8 	cmpnei	r2,r2,47
   8d930:	1000031e 	bne	r2,zero,8d940 <alt_find_file+0x74>
    {
      len -= 1;
   8d934:	e0bffe17 	ldw	r2,-8(fp)
   8d938:	10bfffc4 	addi	r2,r2,-1
   8d93c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8d940:	e0bffe17 	ldw	r2,-8(fp)
   8d944:	e0ffff17 	ldw	r3,-4(fp)
   8d948:	1885883a 	add	r2,r3,r2
   8d94c:	10800003 	ldbu	r2,0(r2)
   8d950:	10803fcc 	andi	r2,r2,255
   8d954:	1080201c 	xori	r2,r2,128
   8d958:	10bfe004 	addi	r2,r2,-128
   8d95c:	10800be0 	cmpeqi	r2,r2,47
   8d960:	1000081e 	bne	r2,zero,8d984 <alt_find_file+0xb8>
   8d964:	e0bffe17 	ldw	r2,-8(fp)
   8d968:	e0ffff17 	ldw	r3,-4(fp)
   8d96c:	1885883a 	add	r2,r3,r2
   8d970:	10800003 	ldbu	r2,0(r2)
   8d974:	10803fcc 	andi	r2,r2,255
   8d978:	1080201c 	xori	r2,r2,128
   8d97c:	10bfe004 	addi	r2,r2,-128
   8d980:	10000a1e 	bne	r2,zero,8d9ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   8d984:	e0bffd17 	ldw	r2,-12(fp)
   8d988:	10c00217 	ldw	r3,8(r2)
   8d98c:	e0bffe17 	ldw	r2,-8(fp)
   8d990:	1809883a 	mov	r4,r3
   8d994:	e17fff17 	ldw	r5,-4(fp)
   8d998:	100d883a 	mov	r6,r2
   8d99c:	008db540 	call	8db54 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8d9a0:	1000021e 	bne	r2,zero,8d9ac <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   8d9a4:	e0bffd17 	ldw	r2,-12(fp)
   8d9a8:	00000806 	br	8d9cc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   8d9ac:	e0bffd17 	ldw	r2,-12(fp)
   8d9b0:	10800017 	ldw	r2,0(r2)
   8d9b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8d9b8:	e0fffd17 	ldw	r3,-12(fp)
   8d9bc:	008002f4 	movhi	r2,11
   8d9c0:	10acb304 	addi	r2,r2,-19764
   8d9c4:	18bfcb1e 	bne	r3,r2,8d8f4 <__alt_data_end+0xfffd5684>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8d9c8:	0005883a 	mov	r2,zero
}
   8d9cc:	e037883a 	mov	sp,fp
   8d9d0:	dfc00117 	ldw	ra,4(sp)
   8d9d4:	df000017 	ldw	fp,0(sp)
   8d9d8:	dec00204 	addi	sp,sp,8
   8d9dc:	f800283a 	ret

0008d9e0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8d9e0:	defffc04 	addi	sp,sp,-16
   8d9e4:	df000315 	stw	fp,12(sp)
   8d9e8:	df000304 	addi	fp,sp,12
   8d9ec:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8d9f0:	00bffa04 	movi	r2,-24
   8d9f4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8d9f8:	e03ffd15 	stw	zero,-12(fp)
   8d9fc:	00001d06 	br	8da74 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   8da00:	00c002f4 	movhi	r3,11
   8da04:	18ec4804 	addi	r3,r3,-20192
   8da08:	e0bffd17 	ldw	r2,-12(fp)
   8da0c:	10800324 	muli	r2,r2,12
   8da10:	1885883a 	add	r2,r3,r2
   8da14:	10800017 	ldw	r2,0(r2)
   8da18:	1000131e 	bne	r2,zero,8da68 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   8da1c:	00c002f4 	movhi	r3,11
   8da20:	18ec4804 	addi	r3,r3,-20192
   8da24:	e0bffd17 	ldw	r2,-12(fp)
   8da28:	10800324 	muli	r2,r2,12
   8da2c:	1885883a 	add	r2,r3,r2
   8da30:	e0ffff17 	ldw	r3,-4(fp)
   8da34:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   8da38:	008002f4 	movhi	r2,11
   8da3c:	10acb704 	addi	r2,r2,-19748
   8da40:	10c00017 	ldw	r3,0(r2)
   8da44:	e0bffd17 	ldw	r2,-12(fp)
   8da48:	1880040e 	bge	r3,r2,8da5c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   8da4c:	008002f4 	movhi	r2,11
   8da50:	10acb704 	addi	r2,r2,-19748
   8da54:	e0fffd17 	ldw	r3,-12(fp)
   8da58:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   8da5c:	e0bffd17 	ldw	r2,-12(fp)
   8da60:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   8da64:	00000606 	br	8da80 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8da68:	e0bffd17 	ldw	r2,-12(fp)
   8da6c:	10800044 	addi	r2,r2,1
   8da70:	e0bffd15 	stw	r2,-12(fp)
   8da74:	e0bffd17 	ldw	r2,-12(fp)
   8da78:	10800810 	cmplti	r2,r2,32
   8da7c:	103fe01e 	bne	r2,zero,8da00 <__alt_data_end+0xfffd5790>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8da80:	e0bffe17 	ldw	r2,-8(fp)
}
   8da84:	e037883a 	mov	sp,fp
   8da88:	df000017 	ldw	fp,0(sp)
   8da8c:	dec00104 	addi	sp,sp,4
   8da90:	f800283a 	ret

0008da94 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   8da94:	defffb04 	addi	sp,sp,-20
   8da98:	df000415 	stw	fp,16(sp)
   8da9c:	df000404 	addi	fp,sp,16
   8daa0:	e13ffe15 	stw	r4,-8(fp)
   8daa4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   8daa8:	e0bfff17 	ldw	r2,-4(fp)
   8daac:	10840070 	cmpltui	r2,r2,4097
   8dab0:	1000021e 	bne	r2,zero,8dabc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   8dab4:	00840004 	movi	r2,4096
   8dab8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   8dabc:	e0fffe17 	ldw	r3,-8(fp)
   8dac0:	e0bfff17 	ldw	r2,-4(fp)
   8dac4:	1885883a 	add	r2,r3,r2
   8dac8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   8dacc:	e0bffe17 	ldw	r2,-8(fp)
   8dad0:	e0bffc15 	stw	r2,-16(fp)
   8dad4:	00000506 	br	8daec <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   8dad8:	e0bffc17 	ldw	r2,-16(fp)
   8dadc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   8dae0:	e0bffc17 	ldw	r2,-16(fp)
   8dae4:	10800804 	addi	r2,r2,32
   8dae8:	e0bffc15 	stw	r2,-16(fp)
   8daec:	e0fffc17 	ldw	r3,-16(fp)
   8daf0:	e0bffd17 	ldw	r2,-12(fp)
   8daf4:	18bff836 	bltu	r3,r2,8dad8 <__alt_data_end+0xfffd5868>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   8daf8:	e0bffe17 	ldw	r2,-8(fp)
   8dafc:	108007cc 	andi	r2,r2,31
   8db00:	10000226 	beq	r2,zero,8db0c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   8db04:	e0bffc17 	ldw	r2,-16(fp)
   8db08:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   8db0c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   8db10:	e037883a 	mov	sp,fp
   8db14:	df000017 	ldw	fp,0(sp)
   8db18:	dec00104 	addi	sp,sp,4
   8db1c:	f800283a 	ret

0008db20 <atexit>:
   8db20:	200b883a 	mov	r5,r4
   8db24:	000d883a 	mov	r6,zero
   8db28:	0009883a 	mov	r4,zero
   8db2c:	000f883a 	mov	r7,zero
   8db30:	008db841 	jmpi	8db84 <__register_exitproc>

0008db34 <exit>:
   8db34:	defffe04 	addi	sp,sp,-8
   8db38:	000b883a 	mov	r5,zero
   8db3c:	dc000015 	stw	r16,0(sp)
   8db40:	dfc00115 	stw	ra,4(sp)
   8db44:	2021883a 	mov	r16,r4
   8db48:	008dcc80 	call	8dcc8 <__call_exitprocs>
   8db4c:	8009883a 	mov	r4,r16
   8db50:	008de600 	call	8de60 <_exit>

0008db54 <memcmp>:
   8db54:	218d883a 	add	r6,r4,r6
   8db58:	21800826 	beq	r4,r6,8db7c <memcmp+0x28>
   8db5c:	20c00003 	ldbu	r3,0(r4)
   8db60:	28800003 	ldbu	r2,0(r5)
   8db64:	18800226 	beq	r3,r2,8db70 <memcmp+0x1c>
   8db68:	1885c83a 	sub	r2,r3,r2
   8db6c:	f800283a 	ret
   8db70:	21000044 	addi	r4,r4,1
   8db74:	29400044 	addi	r5,r5,1
   8db78:	003ff706 	br	8db58 <__alt_data_end+0xfffd58e8>
   8db7c:	0005883a 	mov	r2,zero
   8db80:	f800283a 	ret

0008db84 <__register_exitproc>:
   8db84:	defff904 	addi	sp,sp,-28
   8db88:	008002f4 	movhi	r2,11
   8db8c:	10acab04 	addi	r2,r2,-19796
   8db90:	dc400115 	stw	r17,4(sp)
   8db94:	14400017 	ldw	r17,0(r2)
   8db98:	dc000015 	stw	r16,0(sp)
   8db9c:	dd400515 	stw	r21,20(sp)
   8dba0:	8c000c17 	ldw	r16,48(r17)
   8dba4:	dd000415 	stw	r20,16(sp)
   8dba8:	dcc00315 	stw	r19,12(sp)
   8dbac:	dc800215 	stw	r18,8(sp)
   8dbb0:	dfc00615 	stw	ra,24(sp)
   8dbb4:	2025883a 	mov	r18,r4
   8dbb8:	2827883a 	mov	r19,r5
   8dbbc:	302b883a 	mov	r21,r6
   8dbc0:	3829883a 	mov	r20,r7
   8dbc4:	8000021e 	bne	r16,zero,8dbd0 <__register_exitproc+0x4c>
   8dbc8:	8c000d04 	addi	r16,r17,52
   8dbcc:	8c000c15 	stw	r16,48(r17)
   8dbd0:	80800117 	ldw	r2,4(r16)
   8dbd4:	00c007c4 	movi	r3,31
   8dbd8:	18800d0e 	bge	r3,r2,8dc10 <__register_exitproc+0x8c>
   8dbdc:	00800274 	movhi	r2,9
   8dbe0:	10a71004 	addi	r2,r2,-25536
   8dbe4:	1000021e 	bne	r2,zero,8dbf0 <__register_exitproc+0x6c>
   8dbe8:	00bfffc4 	movi	r2,-1
   8dbec:	00002d06 	br	8dca4 <__register_exitproc+0x120>
   8dbf0:	01002304 	movi	r4,140
   8dbf4:	0089c400 	call	89c40 <malloc>
   8dbf8:	1021883a 	mov	r16,r2
   8dbfc:	103ffa26 	beq	r2,zero,8dbe8 <__alt_data_end+0xfffd5978>
   8dc00:	10000115 	stw	zero,4(r2)
   8dc04:	88800c17 	ldw	r2,48(r17)
   8dc08:	80800015 	stw	r2,0(r16)
   8dc0c:	8c000c15 	stw	r16,48(r17)
   8dc10:	90001b26 	beq	r18,zero,8dc80 <__register_exitproc+0xfc>
   8dc14:	80802217 	ldw	r2,136(r16)
   8dc18:	1000091e 	bne	r2,zero,8dc40 <__register_exitproc+0xbc>
   8dc1c:	00800274 	movhi	r2,9
   8dc20:	10a71004 	addi	r2,r2,-25536
   8dc24:	103ff026 	beq	r2,zero,8dbe8 <__alt_data_end+0xfffd5978>
   8dc28:	01004204 	movi	r4,264
   8dc2c:	103ee83a 	callr	r2
   8dc30:	103fed26 	beq	r2,zero,8dbe8 <__alt_data_end+0xfffd5978>
   8dc34:	10004015 	stw	zero,256(r2)
   8dc38:	10004115 	stw	zero,260(r2)
   8dc3c:	80802215 	stw	r2,136(r16)
   8dc40:	80c00117 	ldw	r3,4(r16)
   8dc44:	01400044 	movi	r5,1
   8dc48:	18c9883a 	add	r4,r3,r3
   8dc4c:	2109883a 	add	r4,r4,r4
   8dc50:	1109883a 	add	r4,r2,r4
   8dc54:	25400015 	stw	r21,0(r4)
   8dc58:	28c6983a 	sll	r3,r5,r3
   8dc5c:	11404017 	ldw	r5,256(r2)
   8dc60:	28cab03a 	or	r5,r5,r3
   8dc64:	11404015 	stw	r5,256(r2)
   8dc68:	25002015 	stw	r20,128(r4)
   8dc6c:	01000084 	movi	r4,2
   8dc70:	9100031e 	bne	r18,r4,8dc80 <__register_exitproc+0xfc>
   8dc74:	11004117 	ldw	r4,260(r2)
   8dc78:	20c6b03a 	or	r3,r4,r3
   8dc7c:	10c04115 	stw	r3,260(r2)
   8dc80:	80800117 	ldw	r2,4(r16)
   8dc84:	10c00044 	addi	r3,r2,1
   8dc88:	10800084 	addi	r2,r2,2
   8dc8c:	1085883a 	add	r2,r2,r2
   8dc90:	1085883a 	add	r2,r2,r2
   8dc94:	80c00115 	stw	r3,4(r16)
   8dc98:	80a1883a 	add	r16,r16,r2
   8dc9c:	84c00015 	stw	r19,0(r16)
   8dca0:	0005883a 	mov	r2,zero
   8dca4:	dfc00617 	ldw	ra,24(sp)
   8dca8:	dd400517 	ldw	r21,20(sp)
   8dcac:	dd000417 	ldw	r20,16(sp)
   8dcb0:	dcc00317 	ldw	r19,12(sp)
   8dcb4:	dc800217 	ldw	r18,8(sp)
   8dcb8:	dc400117 	ldw	r17,4(sp)
   8dcbc:	dc000017 	ldw	r16,0(sp)
   8dcc0:	dec00704 	addi	sp,sp,28
   8dcc4:	f800283a 	ret

0008dcc8 <__call_exitprocs>:
   8dcc8:	008002f4 	movhi	r2,11
   8dccc:	10acab04 	addi	r2,r2,-19796
   8dcd0:	10800017 	ldw	r2,0(r2)
   8dcd4:	defff304 	addi	sp,sp,-52
   8dcd8:	ddc00a15 	stw	r23,40(sp)
   8dcdc:	d8800015 	stw	r2,0(sp)
   8dce0:	10800c04 	addi	r2,r2,48
   8dce4:	dc800515 	stw	r18,20(sp)
   8dce8:	dfc00c15 	stw	ra,48(sp)
   8dcec:	df000b15 	stw	fp,44(sp)
   8dcf0:	dd800915 	stw	r22,36(sp)
   8dcf4:	dd400815 	stw	r21,32(sp)
   8dcf8:	dd000715 	stw	r20,28(sp)
   8dcfc:	dcc00615 	stw	r19,24(sp)
   8dd00:	dc400415 	stw	r17,16(sp)
   8dd04:	dc000315 	stw	r16,12(sp)
   8dd08:	d9000115 	stw	r4,4(sp)
   8dd0c:	2825883a 	mov	r18,r5
   8dd10:	d8800215 	stw	r2,8(sp)
   8dd14:	05c00274 	movhi	r23,9
   8dd18:	bde71504 	addi	r23,r23,-25516
   8dd1c:	d8800017 	ldw	r2,0(sp)
   8dd20:	dc000217 	ldw	r16,8(sp)
   8dd24:	14c00c17 	ldw	r19,48(r2)
   8dd28:	98004126 	beq	r19,zero,8de30 <__call_exitprocs+0x168>
   8dd2c:	9c400117 	ldw	r17,4(r19)
   8dd30:	9d002217 	ldw	r20,136(r19)
   8dd34:	8d7fffc4 	addi	r21,r17,-1
   8dd38:	8c400044 	addi	r17,r17,1
   8dd3c:	ad4f883a 	add	r7,r21,r21
   8dd40:	8c63883a 	add	r17,r17,r17
   8dd44:	39cf883a 	add	r7,r7,r7
   8dd48:	8c63883a 	add	r17,r17,r17
   8dd4c:	a1ed883a 	add	r22,r20,r7
   8dd50:	9c63883a 	add	r17,r19,r17
   8dd54:	a8002616 	blt	r21,zero,8ddf0 <__call_exitprocs+0x128>
   8dd58:	90000326 	beq	r18,zero,8dd68 <__call_exitprocs+0xa0>
   8dd5c:	a0002026 	beq	r20,zero,8dde0 <__call_exitprocs+0x118>
   8dd60:	b1002017 	ldw	r4,128(r22)
   8dd64:	24801e1e 	bne	r4,r18,8dde0 <__call_exitprocs+0x118>
   8dd68:	99000117 	ldw	r4,4(r19)
   8dd6c:	8a000017 	ldw	r8,0(r17)
   8dd70:	213fffc4 	addi	r4,r4,-1
   8dd74:	a900021e 	bne	r21,r4,8dd80 <__call_exitprocs+0xb8>
   8dd78:	9d400115 	stw	r21,4(r19)
   8dd7c:	00000106 	br	8dd84 <__call_exitprocs+0xbc>
   8dd80:	88000015 	stw	zero,0(r17)
   8dd84:	40001626 	beq	r8,zero,8dde0 <__call_exitprocs+0x118>
   8dd88:	9f000117 	ldw	fp,4(r19)
   8dd8c:	a0000526 	beq	r20,zero,8dda4 <__call_exitprocs+0xdc>
   8dd90:	00800044 	movi	r2,1
   8dd94:	1548983a 	sll	r4,r2,r21
   8dd98:	a1404017 	ldw	r5,256(r20)
   8dd9c:	214a703a 	and	r5,r4,r5
   8dda0:	2800021e 	bne	r5,zero,8ddac <__call_exitprocs+0xe4>
   8dda4:	403ee83a 	callr	r8
   8dda8:	00000906 	br	8ddd0 <__call_exitprocs+0x108>
   8ddac:	a1404117 	ldw	r5,260(r20)
   8ddb0:	2148703a 	and	r4,r4,r5
   8ddb4:	2000041e 	bne	r4,zero,8ddc8 <__call_exitprocs+0x100>
   8ddb8:	d9000117 	ldw	r4,4(sp)
   8ddbc:	b1400017 	ldw	r5,0(r22)
   8ddc0:	403ee83a 	callr	r8
   8ddc4:	00000206 	br	8ddd0 <__call_exitprocs+0x108>
   8ddc8:	b1000017 	ldw	r4,0(r22)
   8ddcc:	403ee83a 	callr	r8
   8ddd0:	99000117 	ldw	r4,4(r19)
   8ddd4:	e13fd11e 	bne	fp,r4,8dd1c <__alt_data_end+0xfffd5aac>
   8ddd8:	81000017 	ldw	r4,0(r16)
   8dddc:	24ffcf1e 	bne	r4,r19,8dd1c <__alt_data_end+0xfffd5aac>
   8dde0:	ad7fffc4 	addi	r21,r21,-1
   8dde4:	b5bfff04 	addi	r22,r22,-4
   8dde8:	8c7fff04 	addi	r17,r17,-4
   8ddec:	003fd906 	br	8dd54 <__alt_data_end+0xfffd5ae4>
   8ddf0:	b8000f26 	beq	r23,zero,8de30 <__call_exitprocs+0x168>
   8ddf4:	99000117 	ldw	r4,4(r19)
   8ddf8:	98c00017 	ldw	r3,0(r19)
   8ddfc:	2000091e 	bne	r4,zero,8de24 <__call_exitprocs+0x15c>
   8de00:	18000826 	beq	r3,zero,8de24 <__call_exitprocs+0x15c>
   8de04:	80c00015 	stw	r3,0(r16)
   8de08:	a0000226 	beq	r20,zero,8de14 <__call_exitprocs+0x14c>
   8de0c:	a009883a 	mov	r4,r20
   8de10:	0089c540 	call	89c54 <free>
   8de14:	9809883a 	mov	r4,r19
   8de18:	0089c540 	call	89c54 <free>
   8de1c:	84c00017 	ldw	r19,0(r16)
   8de20:	003fc106 	br	8dd28 <__alt_data_end+0xfffd5ab8>
   8de24:	9821883a 	mov	r16,r19
   8de28:	1827883a 	mov	r19,r3
   8de2c:	003fbe06 	br	8dd28 <__alt_data_end+0xfffd5ab8>
   8de30:	dfc00c17 	ldw	ra,48(sp)
   8de34:	df000b17 	ldw	fp,44(sp)
   8de38:	ddc00a17 	ldw	r23,40(sp)
   8de3c:	dd800917 	ldw	r22,36(sp)
   8de40:	dd400817 	ldw	r21,32(sp)
   8de44:	dd000717 	ldw	r20,28(sp)
   8de48:	dcc00617 	ldw	r19,24(sp)
   8de4c:	dc800517 	ldw	r18,20(sp)
   8de50:	dc400417 	ldw	r17,16(sp)
   8de54:	dc000317 	ldw	r16,12(sp)
   8de58:	dec00d04 	addi	sp,sp,52
   8de5c:	f800283a 	ret

0008de60 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   8de60:	defffd04 	addi	sp,sp,-12
   8de64:	df000215 	stw	fp,8(sp)
   8de68:	df000204 	addi	fp,sp,8
   8de6c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   8de70:	0001883a 	nop
   8de74:	e0bfff17 	ldw	r2,-4(fp)
   8de78:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   8de7c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8de80:	10000226 	beq	r2,zero,8de8c <_exit+0x2c>
    ALT_SIM_FAIL();
   8de84:	002af070 	cmpltui	zero,zero,43969
   8de88:	00000106 	br	8de90 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   8de8c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   8de90:	003fff06 	br	8de90 <__alt_data_end+0xfffd5c20>
