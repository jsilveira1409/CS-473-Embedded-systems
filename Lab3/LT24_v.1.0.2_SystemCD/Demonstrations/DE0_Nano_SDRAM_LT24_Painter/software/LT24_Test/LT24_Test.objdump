
LT24_Test.elf:     file format elf32-littlenios2
LT24_Test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b8

Program Header:
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x000320c8 memsz 0x000323b8 flags rwx
    LOAD off    0x00034000 vaddr 0x05001000 paddr 0x05001000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  05001000  05001000  00034000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000144d0  020001b8  020001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0001a380  02014688  02014688  00015688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000036e0  0202ea08  0202ea08  0002fa08  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  020320e8  020320e8  000330e8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00034000  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001000  00000000  00000000  00034028  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002c323  00000000  00000000  00035028  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000ac90  00000000  00000000  0006134b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000cbe4  00000000  00000000  0006bfdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002834  00000000  00000000  00078bc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00005285  00000000  00000000  0007b3f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000126d5  00000000  00000000  00080679  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000050  00000000  00000000  00092d50  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a38  00000000  00000000  00092da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  000992f2  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  000992f5  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  000992f8  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000992f9  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000992fa  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000992fe  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00099302  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00099306  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  0009930f  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  00099318  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000d  00000000  00000000  00099321  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000003e  00000000  00000000  0009932e  2**0
                  CONTENTS, READONLY
 28 .jdi          0000513b  00000000  00000000  0009936c  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00085323  00000000  00000000  0009e4a7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05001000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b8 l    d  .text	00000000 .text
02014688 l    d  .rodata	00000000 .rodata
0202ea08 l    d  .rwdata	00000000 .rwdata
020320e8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../LT24_Test_bsp//obj/HAL/src/crt0.o
020001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
02000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tahomabold_20.c
02014688 l     O .rodata	000000b6 tahomabold_20_33
0201473e l     O .rodata	00000104 tahomabold_20_34
02014842 l     O .rodata	000001a0 tahomabold_20_35
020149e2 l     O .rodata	00000152 tahomabold_20_36
02014b34 l     O .rodata	00000270 tahomabold_20_37
02014da4 l     O .rodata	000001ba tahomabold_20_38
02014f5e l     O .rodata	0000009c tahomabold_20_39
02014ffa l     O .rodata	000000ea tahomabold_20_40
020150e4 l     O .rodata	000000ea tahomabold_20_41
020151ce l     O .rodata	00000152 tahomabold_20_42
02015320 l     O .rodata	000001a0 tahomabold_20_43
020154c0 l     O .rodata	0000009c tahomabold_20_44
0201555c l     O .rodata	000000ea tahomabold_20_45
02015646 l     O .rodata	0000009c tahomabold_20_46
020156e2 l     O .rodata	00000138 tahomabold_20_47
0201581a l     O .rodata	00000152 tahomabold_20_48
0201596c l     O .rodata	00000152 tahomabold_20_49
02015abe l     O .rodata	00000152 tahomabold_20_50
02015c10 l     O .rodata	00000152 tahomabold_20_51
02015d62 l     O .rodata	00000152 tahomabold_20_52
02015eb4 l     O .rodata	00000152 tahomabold_20_53
02016006 l     O .rodata	00000152 tahomabold_20_54
02016158 l     O .rodata	00000152 tahomabold_20_55
020162aa l     O .rodata	00000152 tahomabold_20_56
020163fc l     O .rodata	00000152 tahomabold_20_57
0201654e l     O .rodata	000000b6 tahomabold_20_58
02016604 l     O .rodata	000000b6 tahomabold_20_59
020166ba l     O .rodata	000001a0 tahomabold_20_60
0201685a l     O .rodata	000001a0 tahomabold_20_61
020169fa l     O .rodata	000001a0 tahomabold_20_62
02016b9a l     O .rodata	0000011e tahomabold_20_63
02016cb8 l     O .rodata	000001d4 tahomabold_20_64
02016e8c l     O .rodata	0000016c tahomabold_20_65
02016ff8 l     O .rodata	0000016c tahomabold_20_66
02017164 l     O .rodata	00000152 tahomabold_20_67
020172b6 l     O .rodata	00000186 tahomabold_20_68
0201743c l     O .rodata	00000138 tahomabold_20_69
02017574 l     O .rodata	00000138 tahomabold_20_70
020176ac l     O .rodata	00000186 tahomabold_20_71
02017832 l     O .rodata	00000186 tahomabold_20_72
020179b8 l     O .rodata	00000104 tahomabold_20_73
02017abc l     O .rodata	00000104 tahomabold_20_74
02017bc0 l     O .rodata	0000016c tahomabold_20_75
02017d2c l     O .rodata	0000011e tahomabold_20_76
02017e4a l     O .rodata	000001d4 tahomabold_20_77
0201801e l     O .rodata	00000186 tahomabold_20_78
020181a4 l     O .rodata	00000186 tahomabold_20_79
0201832a l     O .rodata	00000152 tahomabold_20_80
0201847c l     O .rodata	00000186 tahomabold_20_81
02018602 l     O .rodata	00000186 tahomabold_20_82
02018788 l     O .rodata	00000152 tahomabold_20_83
020188da l     O .rodata	00000138 tahomabold_20_84
02018a12 l     O .rodata	00000186 tahomabold_20_85
02018b98 l     O .rodata	0000016c tahomabold_20_86
02018d04 l     O .rodata	00000222 tahomabold_20_87
02018f26 l     O .rodata	0000016c tahomabold_20_88
02019092 l     O .rodata	0000016c tahomabold_20_89
020191fe l     O .rodata	00000138 tahomabold_20_90
02019336 l     O .rodata	000000ea tahomabold_20_91
02019420 l     O .rodata	00000138 tahomabold_20_92
02019558 l     O .rodata	000000ea tahomabold_20_93
02019642 l     O .rodata	000001a0 tahomabold_20_94
020197e2 l     O .rodata	00000152 tahomabold_20_95
02019934 l     O .rodata	0000011e tahomabold_20_96
02019a52 l     O .rodata	00000138 tahomabold_20_97
02019b8a l     O .rodata	00000152 tahomabold_20_98
02019cdc l     O .rodata	0000011e tahomabold_20_99
02019dfa l     O .rodata	00000152 tahomabold_20_100
02019f4c l     O .rodata	00000138 tahomabold_20_101
0201a084 l     O .rodata	000000d0 tahomabold_20_102
0201a154 l     O .rodata	00000152 tahomabold_20_103
0201a2a6 l     O .rodata	00000152 tahomabold_20_104
0201a3f8 l     O .rodata	0000009c tahomabold_20_105
0201a494 l     O .rodata	000000ea tahomabold_20_106
0201a57e l     O .rodata	00000138 tahomabold_20_107
0201a6b6 l     O .rodata	0000009c tahomabold_20_108
0201a752 l     O .rodata	000001ee tahomabold_20_109
0201a940 l     O .rodata	00000152 tahomabold_20_110
0201aa92 l     O .rodata	00000138 tahomabold_20_111
0201abca l     O .rodata	00000152 tahomabold_20_112
0201ad1c l     O .rodata	00000152 tahomabold_20_113
0201ae6e l     O .rodata	000000ea tahomabold_20_114
0201af58 l     O .rodata	00000104 tahomabold_20_115
0201b05c l     O .rodata	000000d0 tahomabold_20_116
0201b12c l     O .rodata	00000152 tahomabold_20_117
0201b27e l     O .rodata	00000138 tahomabold_20_118
0201b3b6 l     O .rodata	000001d4 tahomabold_20_119
0201b58a l     O .rodata	00000138 tahomabold_20_120
0201b6c2 l     O .rodata	00000138 tahomabold_20_121
0201b7fa l     O .rodata	0000011e tahomabold_20_122
0201b918 l     O .rodata	00000138 tahomabold_20_123
0201ba50 l     O .rodata	00000152 tahomabold_20_124
0201bba2 l     O .rodata	00000138 tahomabold_20_125
0201bcda l     O .rodata	000001a0 tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.c
0201be7a l     O .rodata	000001b8 tahomabold_32_33
0201c032 l     O .rodata	00000280 tahomabold_32_34
0201c2b2 l     O .rodata	00000410 tahomabold_32_35
0201c6c2 l     O .rodata	00000320 tahomabold_32_36
0201c9e2 l     O .rodata	000005f0 tahomabold_32_37
0201cfd2 l     O .rodata	00000410 tahomabold_32_38
0201d3e2 l     O .rodata	00000168 tahomabold_32_39
0201d54a l     O .rodata	00000258 tahomabold_32_40
0201d7a2 l     O .rodata	00000258 tahomabold_32_41
0201d9fa l     O .rodata	00000320 tahomabold_32_42
0201dd1a l     O .rodata	00000410 tahomabold_32_43
0201e12a l     O .rodata	00000190 tahomabold_32_44
0201e2ba l     O .rodata	00000230 tahomabold_32_45
0201e4ea l     O .rodata	00000190 tahomabold_32_46
0201e67a l     O .rodata	000002d0 tahomabold_32_47
0201e94a l     O .rodata	00000320 tahomabold_32_48
0201ec6a l     O .rodata	00000320 tahomabold_32_49
0201ef8a l     O .rodata	00000320 tahomabold_32_50
0201f2aa l     O .rodata	00000320 tahomabold_32_51
0201f5ca l     O .rodata	00000320 tahomabold_32_52
0201f8ea l     O .rodata	00000320 tahomabold_32_53
0201fc0a l     O .rodata	00000320 tahomabold_32_54
0201ff2a l     O .rodata	00000320 tahomabold_32_55
0202024a l     O .rodata	00000320 tahomabold_32_56
0202056a l     O .rodata	00000320 tahomabold_32_57
0202088a l     O .rodata	000001e0 tahomabold_32_58
02020a6a l     O .rodata	000001e0 tahomabold_32_59
02020c4a l     O .rodata	00000410 tahomabold_32_60
0202105a l     O .rodata	00000410 tahomabold_32_61
0202146a l     O .rodata	00000410 tahomabold_32_62
0202187a l     O .rodata	000002d0 tahomabold_32_63
02021b4a l     O .rodata	00000488 tahomabold_32_64
02021fd2 l     O .rodata	00000370 tahomabold_32_65
02022342 l     O .rodata	00000370 tahomabold_32_66
020226b2 l     O .rodata	00000348 tahomabold_32_67
020229fa l     O .rodata	000003c0 tahomabold_32_68
02022dba l     O .rodata	00000320 tahomabold_32_69
020230da l     O .rodata	000002f8 tahomabold_32_70
020233d2 l     O .rodata	000003c0 tahomabold_32_71
02023792 l     O .rodata	000003c0 tahomabold_32_72
02023b52 l     O .rodata	00000258 tahomabold_32_73
02023daa l     O .rodata	00000280 tahomabold_32_74
0202402a l     O .rodata	00000398 tahomabold_32_75
020243c2 l     O .rodata	000002d0 tahomabold_32_76
02024692 l     O .rodata	00000488 tahomabold_32_77
02024b1a l     O .rodata	000003e8 tahomabold_32_78
02024f02 l     O .rodata	000003e8 tahomabold_32_79
020252ea l     O .rodata	00000348 tahomabold_32_80
02025632 l     O .rodata	000003e8 tahomabold_32_81
02025a1a l     O .rodata	000003c0 tahomabold_32_82
02025dda l     O .rodata	00000320 tahomabold_32_83
020260fa l     O .rodata	00000320 tahomabold_32_84
0202641a l     O .rodata	000003c0 tahomabold_32_85
020267da l     O .rodata	00000370 tahomabold_32_86
02026b4a l     O .rodata	00000528 tahomabold_32_87
02027072 l     O .rodata	00000370 tahomabold_32_88
020273e2 l     O .rodata	00000370 tahomabold_32_89
02027752 l     O .rodata	00000320 tahomabold_32_90
02027a72 l     O .rodata	00000258 tahomabold_32_91
02027cca l     O .rodata	000002d0 tahomabold_32_92
02027f9a l     O .rodata	00000258 tahomabold_32_93
020281f2 l     O .rodata	00000410 tahomabold_32_94
02028602 l     O .rodata	00000320 tahomabold_32_95
02028922 l     O .rodata	000002a8 tahomabold_32_96
02028bca l     O .rodata	000002f8 tahomabold_32_97
02028ec2 l     O .rodata	00000320 tahomabold_32_98
020291e2 l     O .rodata	000002a8 tahomabold_32_99
0202948a l     O .rodata	00000320 tahomabold_32_100
020297aa l     O .rodata	000002f8 tahomabold_32_101
02029aa2 l     O .rodata	00000230 tahomabold_32_102
02029cd2 l     O .rodata	00000320 tahomabold_32_103
02029ff2 l     O .rodata	00000320 tahomabold_32_104
0202a312 l     O .rodata	00000190 tahomabold_32_105
0202a4a2 l     O .rodata	00000208 tahomabold_32_106
0202a6aa l     O .rodata	000002f8 tahomabold_32_107
0202a9a2 l     O .rodata	00000190 tahomabold_32_108
0202ab32 l     O .rodata	000004d8 tahomabold_32_109
0202b00a l     O .rodata	00000320 tahomabold_32_110
0202b32a l     O .rodata	00000320 tahomabold_32_111
0202b64a l     O .rodata	00000320 tahomabold_32_112
0202b96a l     O .rodata	00000320 tahomabold_32_113
0202bc8a l     O .rodata	00000230 tahomabold_32_114
0202beba l     O .rodata	00000280 tahomabold_32_115
0202c13a l     O .rodata	00000208 tahomabold_32_116
0202c342 l     O .rodata	00000320 tahomabold_32_117
0202c662 l     O .rodata	000002f8 tahomabold_32_118
0202c95a l     O .rodata	00000460 tahomabold_32_119
0202cdba l     O .rodata	000002f8 tahomabold_32_120
0202d0b2 l     O .rodata	000002d0 tahomabold_32_121
0202d382 l     O .rodata	000002a8 tahomabold_32_122
0202d62a l     O .rodata	00000320 tahomabold_32_123
0202d94a l     O .rodata	00000320 tahomabold_32_124
0202dc6a l     O .rodata	00000320 tahomabold_32_125
0202df8a l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 geometry.c
00000000 l    df *ABS*	00000000 ILI9341.c
00000000 l    df *ABS*	00000000 simple_graphics.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 gui.c
020320e8 l     O .bss	00000004 x.3825
0203209c l     O .rwdata	00000004 y.3826
00000000 l    df *ABS*	00000000 gui_vpg.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 touch_spi.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 fp-bit.c
02007764 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
02008208 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
020305b4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200959c l     F .text	00000034 __sprint_r
0202e826 l     O .rodata	00000010 blanks.3515
0202e836 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0200b64c l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0200d088 l     F .text	00000008 __fp_lock
0200d090 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0202e868 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0202e9b0 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
02010dc4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02010edc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02010f08 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
020112cc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
020113bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
02011594 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020320d4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
020119b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
02011aec l     F .text	00000038 alt_dev_reg
02030f70 l     O .rwdata	000000c8 epcs_flash_controller_0
02031038 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
02011bc4 l     F .text	00000038 alt_flash_device_register
02011c50 l     F .text	0000028c alt_epcs_flash_query
02011edc l     F .text	000000e8 alt_epcs_flash_memcmp
020122b0 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02012778 l     F .text	00000204 altera_avalon_jtag_uart_irq
0201297c l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
020131c0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 epcs_commands.c
02013318 l     F .text	00000038 epcs_test_wip
02013350 l     F .text	00000038 epcs_await_wip_released
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02013a34 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02013c94 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
02013dcc l     F .text	00000050 alt_get_errno
02013e1c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
02001c7c g     F .text	00000078 vid_draw_horiz_line
0200f088 g     F .text	00000074 _mprec_log10
020055c8 g     F .text	00000124 I2C_Read
02012224 g     F .text	0000008c alt_epcs_flash_get_info
0200f178 g     F .text	00000084 __any_on
0200fd58 g     F .text	00000064 _isatty_r
0202e898 g     O .rodata	00000028 __mprec_tinytens
0200077c g     F .text	0000006c LCD_DrawPoint
020114dc g     F .text	00000078 alt_main
0200947c g     F .text	00000094 strcpy
02008880 g     F .text	00000044 __ashldi3
020092bc g     F .text	00000084 _puts_r
02032148 g     O .bss	00000100 alt_irq
0200fdbc g     F .text	0000006c _lseek_r
02001de0 g     F .text	0000006c vid_color_convert16_24
02007324 g     F .text	00000148 sqrt
02006374 g     F .text	000000a0 I2CL_Read16
020109e8 g     F .text	0000005c __eqdf2
02006d30 g     F .text	00000164 touch_enable_penirq
020323d8 g       *ABS*	00000000 __alt_heap_start
02006730 g     F .text	00000064 QUEUE_IsFull
02000e54 g     F .text	00000138 LCD_Pattern_Horizon
02009280 g     F .text	0000003c printf
02004208 g     F .text	000001dc GUI_DeskInit
0200f90c g     F .text	0000005c __sseek
0200d118 g     F .text	0000010c __sinit
0200ddb0 g     F .text	0000009c _setlocale_r
0200d0a4 g     F .text	00000064 __sfmoreglue
02011574 g     F .text	00000020 __malloc_unlock
020018d0 g     F .text	00000150 vid_draw_box
020005b0 g     F .text	00000044 PtCopy
0200370c g     F .text	0000025c vid_print_string_alpha
0200e12c g     F .text	00000128 memmove
0200d108 g     F .text	00000010 _cleanup
0200e254 g     F .text	000000a8 _Balloc
02030188 g     O .rwdata	00000415 cour10_font_array
02010aa0 g     F .text	00000064 __gtdf2
020016ac g     F .text	0000011c vid_move_block
020088c4 g     F .text	00000010 __errno
02013388 g     F .text	000000f8 epcs_sector_erase
020061f8 g     F .text	0000017c I2CL_MultipleWrite
02004058 g     F .text	000000e0 vid_string_pixel_length_alpha
02005ad4 g     F .text	0000016c i2c_write
05001000 g     F .entry	00000000 __reset
0200534c g     F .text	00000040 my_wait
020006fc g     F .text	00000080 LCD_Clear
0200fcf0 g     F .text	00000068 _fstat_r
020320f8 g     O .bss	00000004 errno
020056ec g     F .text	00000178 I2C_Read16
02032110 g     O .bss	00000004 alt_argv
0203a098 g       *ABS*	00000000 _gp
02011980 g     F .text	00000030 usleep
02004b20 g     F .text	000000b0 VPG_ColorPanel
02003968 g     F .text	00000154 seperate_color_channels
02030df0 g     O .rwdata	00000180 alt_fd_list
020135c4 g     F .text	00000068 epcs_write_status_register
0201405c g     F .text	00000090 alt_find_dev
02009080 g     F .text	000000f8 memcpy
0200d098 g     F .text	0000000c _cleanup_r
02008060 g     F .text	000000d4 __floatsidf
020025e4 g     F .text	00000758 vid_round_corner_points
02006a58 g     F .text	0000006c Touch_UnInit
02013d54 g     F .text	00000078 alt_io_redirect
02008004 g     F .text	0000005c __ltdf2
02014688 g       *ABS*	00000000 __DTOR_END__
020043e4 g     F .text	00000090 GUI_CheckButton
02009340 g     F .text	00000014 puts
0200106c g     F .text	00000060 vid_clean_screen
020123b8 g     F .text	00000104 alt_epcs_flash_write_block
0200efe4 g     F .text	000000a4 __ratio
020066f0 g     F .text	00000040 QUEUE_IsEmpty
020011d8 g     F .text	00000154 vid_scroll_string_init
02012b7c g     F .text	00000218 altera_avalon_jtag_uart_read
020088d4 g     F .text	00000014 malloc
02009254 g     F .text	0000002c _printf_r
020068e8 g     F .text	00000170 Touch_Init
02008328 g     F .text	00000008 __udivsi3
0201131c g     F .text	000000a0 isatty
0202e8e8 g     O .rodata	000000c8 __mprec_tens
0200de4c g     F .text	0000000c __locale_charset
0200b498 g     F .text	00000040 vsnprintf
02004474 g     F .text	00000238 GUI_DeskDraw
02005864 g     F .text	0000017c I2C_MultipleRead
020320f4 g     O .bss	00000004 __malloc_top_pad
020068b8 g     F .text	00000030 QUEUE_Empty
020320b4 g     O .rwdata	00000004 __mb_cur_max
0200de58 g     F .text	0000000c _localeconv_r
0200e654 g     F .text	0000003c __i2b
0200d76c g     F .text	000004e4 __sfvwrite_r
02006828 g     F .text	00000090 QUEUE_Pop
02009354 g     F .text	00000064 _sbrk_r
02006cc0 g     F .text	00000030 touch_empty_fifo
020004c8 g     F .text	00000034 RectHeight
0200fe28 g     F .text	0000006c _read_r
02030dbc g     O .rwdata	0000000c __lc_ctype
020320c8 g     O .rwdata	00000004 alt_max_fd
02008668 g     F .text	00000104 __unpack_d
02004afc g     F .text	00000024 VPG_XLine
0200fba0 g     F .text	0000013c _fclose_r
0200d058 g     F .text	00000030 fflush
020320f0 g     O .bss	00000004 __malloc_max_sbrked_mem
02005ed0 g     F .text	00000168 I2CL_Read
0202f5c8 g     O .rwdata	00000bc0 tahomabold_32
02007ab8 g     F .text	00000054 __adddf3
02004738 g     F .text	00000080 GUI_ClearPaintArea
02012344 g     F .text	00000074 alt_epcs_flash_erase_block
02000284 g     F .text	00000040 PtSet
0200ed58 g     F .text	00000148 __b2d
0201045c g     F .text	0000058c __umoddi3
0201140c g     F .text	000000d0 lseek
020320a0 g     O .rwdata	00000004 __fdlib_version
020320a4 g     O .rwdata	00000004 _global_impure_ptr
020020f0 g     F .text	0000013c vid_draw_circle
02013888 g     F .text	00000058 epcs_exit_4_bytes_mode
0200f1fc g     F .text	000005fc _realloc_r
020323d8 g       *ABS*	00000000 __bss_end
020111dc g     F .text	000000f0 alt_iic_isr_register
0201187c g     F .text	00000104 alt_tick
02005488 g     F .text	00000140 I2C_Write16
020003a8 g     F .text	00000088 RectOffset
0200fe94 g     F .text	000005c8 __udivdi3
0202e8c0 g     O .rodata	00000028 __mprec_bigtens
0200e438 g     F .text	00000104 __s2b
02001e8c g     F .text	00000264 vid_draw_sloped_line
02010b68 g     F .text	0000011c __floatunsidf
0200eaf8 g     F .text	00000058 __mcmp
02004ccc g     F .text	000000e4 VPG_VGrid
0200d330 g     F .text	00000018 __fp_lock_all
02011190 g     F .text	0000004c alt_ic_irq_enabled
0200538c g     F .text	000000fc I2C_Write
0200222c g     F .text	000003b8 vid_draw_round_corner_box
020117e4 g     F .text	00000098 alt_alarm_stop
02032108 g     O .bss	00000004 alt_irq_active
02000f8c g     F .text	000000e0 LCD_Pattern_Vertical
020000ec g     F .exceptions	000000cc alt_irq_handler
02030dc8 g     O .rwdata	00000028 alt_dev_null
02006414 g     F .text	0000008c I2CL_Write16
020059e0 g     F .text	00000084 i2c_start
0200e53c g     F .text	00000068 __hi0bits
020071d0 g     F .text	00000078 touch_alarm_callback
02008134 g     F .text	000000d4 __fixdfsi
02006cf0 g     F .text	00000040 touch_is_pen_pressed
02003170 g     F .text	00000394 vid_draw_triangle
020320c0 g     O .rwdata	00000008 alt_dev_list
02011a00 g     F .text	000000ec write
020305a0 g     O .rwdata	00000014 szPallete
020035e0 g     F .text	0000012c CropImage16
02010f58 g     F .text	000000ac fstat
0200883c g     F .text	00000044 __lshrdi3
0200132c g     F .text	00000380 vid_scroll_string
020064d0 g     F .text	0000006c myprintf
02006ec4 g     F .text	0000030c touch_get_xy
0200e870 g     F .text	0000012c __pow5mult
02032104 g     O .bss	00000004 __nlocale_changed
02008330 g     F .text	00000008 __umodsi3
02006c48 g     F .text	00000078 touch_isr
02000494 g     F .text	00000034 RectWidth
02013748 g     F .text	00000068 epcs_read_electronic_signature
02003504 g     F .text	000000dc CopyImage16
020323d8 g       *ABS*	00000000 end
020051b4 g     F .text	000000b0 GUI_VPG
020049e0 g     F .text	00000064 GUI_ShowInfo
020126b8 g     F .text	000000c0 altera_avalon_jtag_uart_init
02001a20 g     F .text	000000f0 vid_print_char
02014688 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
02013234 g     F .text	00000088 alt_avalon_timer_sc_init
02008398 g     F .text	000000ac __clzsi2
02012d94 g     F .text	00000224 altera_avalon_jtag_uart_write
02005034 g     F .text	00000180 GUI_ShowPAT
02002d90 g     F .text	00000054 min3
020010cc g     F .text	000000cc vid_draw_line
0200d320 g     F .text	00000004 __sfp_lock_acquire
0200e034 g     F .text	000000f8 memchr
020095d0 g     F .text	00001df8 ___vfprintf_internal_r
020093b8 g     F .text	00000058 _sprintf_r
0200d49c g     F .text	000002d0 _free_r
02000648 g     F .text	000000b4 LCD_SetCursor
020144ac g     F .text	000001a0 __call_exitprocs
02032100 g     O .bss	00000004 __mlocale_changed
02004bd0 g     F .text	000000fc VPG_Grid
020320ac g     O .rwdata	00000004 __malloc_sbrk_base
020001b8 g     F .text	00000048 _start
02032118 g     O .bss	00000004 _alt_tick_rate
02006e94 g     F .text	00000030 touch_clear_input
0200e99c g     F .text	0000015c __lshift
02012fb8 g     F .text	00000208 alt_avalon_spi_command
02006794 g     F .text	00000094 QUEUE_Push
0203211c g     O .bss	00000004 _alt_nticks
02002e48 g     F .text	000000f0 vid_put_pixel_in_span_map
020115e4 g     F .text	000000f0 read
02004e94 g     F .text	000001a0 VPG_ColorBar
02011b58 g     F .text	0000006c alt_sys_init
0201437c g     F .text	00000130 __register_exitproc
0200e690 g     F .text	000001e0 __multiply
02001be8 g     F .text	00000094 vid_paint_block
02012a20 g     F .text	00000068 altera_avalon_jtag_uart_close
02032120 g     O .bss	00000028 __malloc_current_mallinfo
0200eea0 g     F .text	00000144 __d2b
02004db0 g     F .text	000000e4 VPG_HGrid
020132bc g     F .text	0000005c epcs_read_status_register
02001d40 g     F .text	000000a0 vid_color_convert24_16
02012554 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
02014200 g     F .text	000000b4 alt_get_fd
020138e0 g     F .text	00000154 alt_busy_sleep
0200876c g     F .text	000000d0 __fpcmp_parts_d
0200fb3c g     F .text	00000064 _close_r
020047b8 g     F .text	00000228 GUI
02003c44 g     F .text	00000254 alpha_blending
020137b0 g     F .text	00000080 epcs_read_device_id
02014300 g     F .text	0000007c memcmp
02012614 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
020323d8 g       *ABS*	00000000 __alt_stack_base
02012664 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
05001000 g       *ABS*	00000000 __alt_mem_epcs_flash_controller_0
0200b4d8 g     F .text	00000174 __swsetup_r
02007e50 g     F .text	000001b4 __divdf3
0200d224 g     F .text	000000fc __sfp
0200f0fc g     F .text	0000007c __copybits
020309b4 g     O .rwdata	00000408 __malloc_av_
0200d32c g     F .text	00000004 __sinit_lock_release
0200b3ec g     F .text	000000ac _vsnprintf_r
02005a64 g     F .text	00000070 i2c_stop
02007b6c g     F .text	000002e4 __muldf3
0200f830 g     F .text	00000054 __sread
020140ec g     F .text	00000114 alt_find_file
02013a84 g     F .text	000000a0 alt_dev_llist_insert
02011554 g     F .text	00000020 __malloc_lock
02001e4c g     F .text	00000040 vid_copy_line_to_frame_buffer
02011734 g     F .text	000000b0 sbrk
0200ce70 g     F .text	000001e8 _fflush_r
0200fa80 g     F .text	000000bc _calloc_r
020320e0 g     O .rwdata	00000008 alt_flash_dev_list
02006650 g     F .text	00000070 QUEUE_New
020320e8 g       *ABS*	00000000 __bss_start
020007e8 g     F .text	0000066c LCD_Init
02009178 g     F .text	000000dc memset
02005264 g     F .text	000000e8 main
02032114 g     O .bss	00000004 alt_envp
020320ec g     O .bss	00000004 __malloc_max_total_mem
0200653c g     F .text	00000088 myprintf_hexarray
020125b4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
02004a44 g     F .text	00000058 GUI_ShowTouchPoint
02005c40 g     F .text	00000150 i2c_read
0202ea08 g     O .rwdata	00000bc0 tahomabold_20
0200f968 g     F .text	00000008 __sclose
0200775c g     F .text	00000008 matherr
04000000 g       *ABS*	00000000 __alt_heap_limit
02003e98 g     F .text	000001c0 vid_print_char_alpha
0200fcdc g     F .text	00000014 fclose
02032098 g     O .rwdata	00000004 cour10_font
02032248 g     O .bss	00000190 _atexit0
0200b854 g     F .text	0000161c _dtoa_r
020088fc g     F .text	00000784 _malloc_r
020320cc g     O .rwdata	00000004 alt_errno
0200dc50 g     F .text	000000a8 _fwalk
020004fc g     F .text	000000b4 PtDistance
020002c4 g     F .text	0000005c RectSet
0200827c g     F .text	00000050 __divsi3
020005f4 g     F .text	00000054 Delay_Ms
02000430 g     F .text	00000064 RectCopy
0202e6c8 g     O .rodata	00000014 __thenan_df
0200d360 g     F .text	0000013c _malloc_trim_r
02014688 g       *ABS*	00000000 __CTOR_END__
02011fc4 g     F .text	00000260 alt_epcs_flash_write
0200f970 g     F .text	000000a4 strcmp
02003c04 g     F .text	00000040 read_from_frame
02014688 g       *ABS*	00000000 __DTOR_LIST__
02001bac g     F .text	0000003c vid_get_pixel
02010a44 g     F .text	0000005c __nedf2
02011b24 g     F .text	00000034 alt_irq_init
020116d4 g     F .text	00000060 alt_release_fd
02009410 g     F .text	0000006c sprintf
0202e6dc g     O .rodata	00000100 __clz_tab
020064a0 g     F .text	00000030 debug_output
020320fc g     O .bss	00000004 _PathLocale
020142b4 g     F .text	00000014 atexit
0200fa14 g     F .text	0000006c _write_r
02000200 g     F .text	00000084 IsPtInRect
0200de64 g     F .text	0000001c setlocale
020320a8 g     O .rwdata	00000004 _impure_ptr
0203210c g     O .bss	00000004 alt_argc
02013b80 g     F .text	0000005c _do_dtors
020065c4 g     F .text	0000008c myprintf_dwordarray
02006038 g     F .text	000001c0 I2CL_MultipleRead
02000020 g       .exceptions	00000000 alt_irq_entry
0200ecf8 g     F .text	00000060 __ulp
0200f7f8 g     F .text	00000038 __isinfd
0200d348 g     F .text	00000018 __fp_unlock_all
02006afc g     F .text	0000014c Touch_GetXY
020320b8 g     O .rwdata	00000008 alt_fs_list
020017c8 g     F .text	00000108 vid_print_string
0200de80 g     F .text	0000000c localeconv
02013480 g     F .text	000000f4 epcs_read_buffer
0200746c g     F .text	000002c4 __ieee754_sqrt
02011bfc g     F .text	00000054 alt_epcs_flash_init
02011004 g     F .text	00000050 alt_ic_isr_register
020320e8 g       *ABS*	00000000 _edata
020323d8 g       *ABS*	00000000 _end
02013bdc g     F .text	00000068 alt_flash_open_dev
02004a9c g     F .text	00000060 ShowInfo
02002d3c g     F .text	00000054 max3
02012a88 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
020110f0 g     F .text	000000a0 alt_ic_irq_disable
02013830 g     F .text	00000058 epcs_enter_4_bytes_mode
02001cf4 g     F .text	0000004c vid_merge_colors
0200f884 g     F .text	00000088 __swrite
020320b0 g     O .rwdata	00000004 __malloc_trim_threshold
0201403c g     F .text	00000020 altera_nios2_qsys_irq_init
020142c8 g     F .text	00000038 exit
0200dcf8 g     F .text	000000b8 _fwalk_reent
0200eb50 g     F .text	000001a8 __mdiff
02013c44 g     F .text	00000050 alt_flash_close_dev
020046ac g     F .text	0000008c IsContinuedPoint
020082cc g     F .text	0000005c __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
0200d324 g     F .text	00000004 __sfp_lock_release
02000000 g       *ABS*	00000000 __alt_mem_sdram
020066c0 g     F .text	00000030 QUEUE_Delete
02007248 g     F .text	000000dc touch_xy_transform
02001b10 g     F .text	0000009c vid_set_pixel
0201464c g     F .text	0000003c _exit
02007730 g     F .text	0000002c __isnand
02010c84 g     F .text	00000140 alt_alarm_start
02001198 g     F .text	00000040 vid_scroll_string_quit
02008338 g     F .text	00000060 __muldi3
0200de8c g     F .text	000001a8 __smakebuf_r
02009510 g     F .text	0000008c strlen
02013574 g     F .text	00000050 epcs_write_enable
02013ee8 g     F .text	00000154 open
02010b04 g     F .text	00000064 __gedf2
02000320 g     F .text	00000088 RectInflate
020320d0 g     O .rwdata	00000004 alt_priority_mask
02011054 g     F .text	0000009c alt_ic_irq_enable
0200b3c8 g     F .text	00000024 __vfprintf_internal
02007b0c g     F .text	00000060 __subdf3
02002f38 g     F .text	00000238 vid_bres_scan_edges
020124bc g     F .text	00000098 alt_epcs_flash_read
0200e5a4 g     F .text	000000b0 __lo0bits
020320d8 g     O .rwdata	00000008 alt_alarm_list
02002de4 g     F .text	00000064 max_diff3
02013b24 g     F .text	0000005c _do_ctors
02005d90 g     F .text	00000140 I2CL_Write
02004138 g     F .text	000000d0 GUI_ShowWelcome
02003abc g     F .text	00000148 merge_color_channels
02010e14 g     F .text	000000c8 close
02006ac4 g     F .text	00000038 Touch_EmptyFifo
02008444 g     F .text	00000224 __pack_d
020088e8 g     F .text	00000014 free
0200d328 g     F .text	00000004 __sinit_lock_acquire
0201362c g     F .text	0000011c epcs_write_buffer
0200e324 g     F .text	00000114 __multadd
0200e2fc g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)

02000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 20000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000100:	0005313a 	rdctl	r2,ipending
 2000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000114:	00800044 	movi	r2,1
 2000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200011c:	e0fffb17 	ldw	r3,-20(fp)
 2000120:	e0bffc17 	ldw	r2,-16(fp)
 2000124:	1884703a 	and	r2,r3,r2
 2000128:	10001726 	beq	r2,zero,2000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	00c080f4 	movhi	r3,515
 2000130:	18c85204 	addi	r3,r3,8520
 2000134:	e0bffd17 	ldw	r2,-12(fp)
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	1885883a 	add	r2,r3,r2
 2000140:	10c00017 	ldw	r3,0(r2)
 2000144:	010080f4 	movhi	r4,515
 2000148:	21085204 	addi	r4,r4,8520
 200014c:	e0bffd17 	ldw	r2,-12(fp)
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	2085883a 	add	r2,r4,r2
 2000158:	10800104 	addi	r2,r2,4
 200015c:	10800017 	ldw	r2,0(r2)
 2000160:	1009883a 	mov	r4,r2
 2000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200016c:	0005313a 	rdctl	r2,ipending
 2000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 200017c:	e0bffb17 	ldw	r2,-20(fp)
 2000180:	103fe31e 	bne	r2,zero,2000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 2000184:	00000706 	br	20001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000188:	e0bffc17 	ldw	r2,-16(fp)
 200018c:	1085883a 	add	r2,r2,r2
 2000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000194:	e0bffd17 	ldw	r2,-12(fp)
 2000198:	10800044 	addi	r2,r2,1
 200019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a0:	003fde06 	br	200011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a4:	e037883a 	mov	sp,fp
 20001a8:	dfc00117 	ldw	ra,4(sp)
 20001ac:	df000017 	ldw	fp,0(sp)
 20001b0:	dec00204 	addi	sp,sp,8
 20001b4:	f800283a 	ret

Disassembly of section .text:

020001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 20001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 20001bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 20001c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 20001c4:	00bffd16 	blt	zero,r2,20001bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001c8:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 20001d0:	068080f4 	movhi	gp,515
    ori gp, gp, %lo(_gp)
 20001d4:	d6a82614 	ori	gp,gp,41112
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001d8:	008080f4 	movhi	r2,515
    ori r2, r2, %lo(__bss_start)
 20001dc:	10883a14 	ori	r2,r2,8424

    movhi r3, %hi(__bss_end)
 20001e0:	00c080f4 	movhi	r3,515
    ori r3, r3, %lo(__bss_end)
 20001e4:	18c8f614 	ori	r3,r3,9176

    beq r2, r3, 1f
 20001e8:	10c00326 	beq	r2,r3,20001f8 <_start+0x40>

0:
    stw zero, (r2)
 20001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001f4:	10fffd36 	bltu	r2,r3,20001ec <_start+0x34>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001f8:	20114dc0 	call	20114dc <alt_main>

020001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001fc:	003fff06 	br	20001fc <alt_after_alt_main>

02000200 <IsPtInRect>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
 2000200:	defffc04 	addi	sp,sp,-16
 2000204:	df000315 	stw	fp,12(sp)
 2000208:	df000304 	addi	fp,sp,12
 200020c:	e13ffe15 	stw	r4,-8(fp)
 2000210:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
 2000214:	e03ffd15 	stw	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
 2000218:	e0bffe17 	ldw	r2,-8(fp)
 200021c:	10c00017 	ldw	r3,0(r2)
 2000220:	e0bfff17 	ldw	r2,-4(fp)
 2000224:	10800017 	ldw	r2,0(r2)
 2000228:	18801116 	blt	r3,r2,2000270 <IsPtInRect+0x70>
 200022c:	e0bffe17 	ldw	r2,-8(fp)
 2000230:	10800017 	ldw	r2,0(r2)
 2000234:	e0ffff17 	ldw	r3,-4(fp)
 2000238:	18c00117 	ldw	r3,4(r3)
 200023c:	18800c16 	blt	r3,r2,2000270 <IsPtInRect+0x70>
 2000240:	e0bffe17 	ldw	r2,-8(fp)
 2000244:	10c00117 	ldw	r3,4(r2)
 2000248:	e0bfff17 	ldw	r2,-4(fp)
 200024c:	10800217 	ldw	r2,8(r2)
 2000250:	18800716 	blt	r3,r2,2000270 <IsPtInRect+0x70>
 2000254:	e0bffe17 	ldw	r2,-8(fp)
 2000258:	10800117 	ldw	r2,4(r2)
 200025c:	e0ffff17 	ldw	r3,-4(fp)
 2000260:	18c00317 	ldw	r3,12(r3)
 2000264:	18800216 	blt	r3,r2,2000270 <IsPtInRect+0x70>
        bYes = TRUE;
 2000268:	00800044 	movi	r2,1
 200026c:	e0bffd15 	stw	r2,-12(fp)
    
    return bYes;
 2000270:	e0bffd17 	ldw	r2,-12(fp)
}
 2000274:	e037883a 	mov	sp,fp
 2000278:	df000017 	ldw	fp,0(sp)
 200027c:	dec00104 	addi	sp,sp,4
 2000280:	f800283a 	ret

02000284 <PtSet>:

void PtSet(POINT *pt, int x, int y){
 2000284:	defffc04 	addi	sp,sp,-16
 2000288:	df000315 	stw	fp,12(sp)
 200028c:	df000304 	addi	fp,sp,12
 2000290:	e13ffd15 	stw	r4,-12(fp)
 2000294:	e17ffe15 	stw	r5,-8(fp)
 2000298:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
 200029c:	e0bffd17 	ldw	r2,-12(fp)
 20002a0:	e0fffe17 	ldw	r3,-8(fp)
 20002a4:	10c00015 	stw	r3,0(r2)
    pt->y = y;
 20002a8:	e0bffd17 	ldw	r2,-12(fp)
 20002ac:	e0ffff17 	ldw	r3,-4(fp)
 20002b0:	10c00115 	stw	r3,4(r2)
}
 20002b4:	e037883a 	mov	sp,fp
 20002b8:	df000017 	ldw	fp,0(sp)
 20002bc:	dec00104 	addi	sp,sp,4
 20002c0:	f800283a 	ret

020002c4 <RectSet>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
 20002c4:	defffb04 	addi	sp,sp,-20
 20002c8:	df000415 	stw	fp,16(sp)
 20002cc:	df000404 	addi	fp,sp,16
 20002d0:	e13ffc15 	stw	r4,-16(fp)
 20002d4:	e17ffd15 	stw	r5,-12(fp)
 20002d8:	e1bffe15 	stw	r6,-8(fp)
 20002dc:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
 20002e0:	e0bffc17 	ldw	r2,-16(fp)
 20002e4:	e0fffd17 	ldw	r3,-12(fp)
 20002e8:	10c00015 	stw	r3,0(r2)
    rc->right = right;
 20002ec:	e0bffc17 	ldw	r2,-16(fp)
 20002f0:	e0fffe17 	ldw	r3,-8(fp)
 20002f4:	10c00115 	stw	r3,4(r2)
    rc->top = top;
 20002f8:	e0bffc17 	ldw	r2,-16(fp)
 20002fc:	e0ffff17 	ldw	r3,-4(fp)
 2000300:	10c00215 	stw	r3,8(r2)
    rc->bottom = bottom;
 2000304:	e0bffc17 	ldw	r2,-16(fp)
 2000308:	e0c00117 	ldw	r3,4(fp)
 200030c:	10c00315 	stw	r3,12(r2)
}
 2000310:	e037883a 	mov	sp,fp
 2000314:	df000017 	ldw	fp,0(sp)
 2000318:	dec00104 	addi	sp,sp,4
 200031c:	f800283a 	ret

02000320 <RectInflate>:

void RectInflate(RECT *rc, int x, int y){
 2000320:	defffc04 	addi	sp,sp,-16
 2000324:	df000315 	stw	fp,12(sp)
 2000328:	df000304 	addi	fp,sp,12
 200032c:	e13ffd15 	stw	r4,-12(fp)
 2000330:	e17ffe15 	stw	r5,-8(fp)
 2000334:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
 2000338:	e0bffd17 	ldw	r2,-12(fp)
 200033c:	10c00017 	ldw	r3,0(r2)
 2000340:	e0bffe17 	ldw	r2,-8(fp)
 2000344:	1887c83a 	sub	r3,r3,r2
 2000348:	e0bffd17 	ldw	r2,-12(fp)
 200034c:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 2000350:	e0bffd17 	ldw	r2,-12(fp)
 2000354:	10c00117 	ldw	r3,4(r2)
 2000358:	e0bffe17 	ldw	r2,-8(fp)
 200035c:	1887883a 	add	r3,r3,r2
 2000360:	e0bffd17 	ldw	r2,-12(fp)
 2000364:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
 2000368:	e0bffd17 	ldw	r2,-12(fp)
 200036c:	10c00217 	ldw	r3,8(r2)
 2000370:	e0bfff17 	ldw	r2,-4(fp)
 2000374:	1887c83a 	sub	r3,r3,r2
 2000378:	e0bffd17 	ldw	r2,-12(fp)
 200037c:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 2000380:	e0bffd17 	ldw	r2,-12(fp)
 2000384:	10c00317 	ldw	r3,12(r2)
 2000388:	e0bfff17 	ldw	r2,-4(fp)
 200038c:	1887883a 	add	r3,r3,r2
 2000390:	e0bffd17 	ldw	r2,-12(fp)
 2000394:	10c00315 	stw	r3,12(r2)
}
 2000398:	e037883a 	mov	sp,fp
 200039c:	df000017 	ldw	fp,0(sp)
 20003a0:	dec00104 	addi	sp,sp,4
 20003a4:	f800283a 	ret

020003a8 <RectOffset>:

void RectOffset(RECT *rc, int x, int y){
 20003a8:	defffc04 	addi	sp,sp,-16
 20003ac:	df000315 	stw	fp,12(sp)
 20003b0:	df000304 	addi	fp,sp,12
 20003b4:	e13ffd15 	stw	r4,-12(fp)
 20003b8:	e17ffe15 	stw	r5,-8(fp)
 20003bc:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
 20003c0:	e0bffd17 	ldw	r2,-12(fp)
 20003c4:	10c00017 	ldw	r3,0(r2)
 20003c8:	e0bffe17 	ldw	r2,-8(fp)
 20003cc:	1887883a 	add	r3,r3,r2
 20003d0:	e0bffd17 	ldw	r2,-12(fp)
 20003d4:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 20003d8:	e0bffd17 	ldw	r2,-12(fp)
 20003dc:	10c00117 	ldw	r3,4(r2)
 20003e0:	e0bffe17 	ldw	r2,-8(fp)
 20003e4:	1887883a 	add	r3,r3,r2
 20003e8:	e0bffd17 	ldw	r2,-12(fp)
 20003ec:	10c00115 	stw	r3,4(r2)
    rc->top += y;
 20003f0:	e0bffd17 	ldw	r2,-12(fp)
 20003f4:	10c00217 	ldw	r3,8(r2)
 20003f8:	e0bfff17 	ldw	r2,-4(fp)
 20003fc:	1887883a 	add	r3,r3,r2
 2000400:	e0bffd17 	ldw	r2,-12(fp)
 2000404:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 2000408:	e0bffd17 	ldw	r2,-12(fp)
 200040c:	10c00317 	ldw	r3,12(r2)
 2000410:	e0bfff17 	ldw	r2,-4(fp)
 2000414:	1887883a 	add	r3,r3,r2
 2000418:	e0bffd17 	ldw	r2,-12(fp)
 200041c:	10c00315 	stw	r3,12(r2)
}
 2000420:	e037883a 	mov	sp,fp
 2000424:	df000017 	ldw	fp,0(sp)
 2000428:	dec00104 	addi	sp,sp,4
 200042c:	f800283a 	ret

02000430 <RectCopy>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
 2000430:	defffd04 	addi	sp,sp,-12
 2000434:	df000215 	stw	fp,8(sp)
 2000438:	df000204 	addi	fp,sp,8
 200043c:	e13ffe15 	stw	r4,-8(fp)
 2000440:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
 2000444:	e0bfff17 	ldw	r2,-4(fp)
 2000448:	10c00017 	ldw	r3,0(r2)
 200044c:	e0bffe17 	ldw	r2,-8(fp)
 2000450:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
 2000454:	e0bfff17 	ldw	r2,-4(fp)
 2000458:	10c00117 	ldw	r3,4(r2)
 200045c:	e0bffe17 	ldw	r2,-8(fp)
 2000460:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
 2000464:	e0bfff17 	ldw	r2,-4(fp)
 2000468:	10c00217 	ldw	r3,8(r2)
 200046c:	e0bffe17 	ldw	r2,-8(fp)
 2000470:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
 2000474:	e0bfff17 	ldw	r2,-4(fp)
 2000478:	10c00317 	ldw	r3,12(r2)
 200047c:	e0bffe17 	ldw	r2,-8(fp)
 2000480:	10c00315 	stw	r3,12(r2)
}
 2000484:	e037883a 	mov	sp,fp
 2000488:	df000017 	ldw	fp,0(sp)
 200048c:	dec00104 	addi	sp,sp,4
 2000490:	f800283a 	ret

02000494 <RectWidth>:

int RectWidth(RECT *rc){
 2000494:	defffe04 	addi	sp,sp,-8
 2000498:	df000115 	stw	fp,4(sp)
 200049c:	df000104 	addi	fp,sp,4
 20004a0:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
 20004a4:	e0bfff17 	ldw	r2,-4(fp)
 20004a8:	10c00117 	ldw	r3,4(r2)
 20004ac:	e0bfff17 	ldw	r2,-4(fp)
 20004b0:	10800017 	ldw	r2,0(r2)
 20004b4:	1885c83a 	sub	r2,r3,r2
}
 20004b8:	e037883a 	mov	sp,fp
 20004bc:	df000017 	ldw	fp,0(sp)
 20004c0:	dec00104 	addi	sp,sp,4
 20004c4:	f800283a 	ret

020004c8 <RectHeight>:

int RectHeight(RECT *rc){
 20004c8:	defffe04 	addi	sp,sp,-8
 20004cc:	df000115 	stw	fp,4(sp)
 20004d0:	df000104 	addi	fp,sp,4
 20004d4:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
 20004d8:	e0bfff17 	ldw	r2,-4(fp)
 20004dc:	10c00317 	ldw	r3,12(r2)
 20004e0:	e0bfff17 	ldw	r2,-4(fp)
 20004e4:	10800217 	ldw	r2,8(r2)
 20004e8:	1885c83a 	sub	r2,r3,r2
}
 20004ec:	e037883a 	mov	sp,fp
 20004f0:	df000017 	ldw	fp,0(sp)
 20004f4:	dec00104 	addi	sp,sp,4
 20004f8:	f800283a 	ret

020004fc <PtDistance>:

int PtDistance(POINT *pt1, POINT *pt2){
 20004fc:	defff904 	addi	sp,sp,-28
 2000500:	dfc00615 	stw	ra,24(sp)
 2000504:	df000515 	stw	fp,20(sp)
 2000508:	df000504 	addi	fp,sp,20
 200050c:	e13ffe15 	stw	r4,-8(fp)
 2000510:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
 2000514:	e0bffe17 	ldw	r2,-8(fp)
 2000518:	10c00017 	ldw	r3,0(r2)
 200051c:	e0bfff17 	ldw	r2,-4(fp)
 2000520:	10800017 	ldw	r2,0(r2)
 2000524:	1885c83a 	sub	r2,r3,r2
 2000528:	e0bffb15 	stw	r2,-20(fp)
    b = pt1->y - pt2->y;
 200052c:	e0bffe17 	ldw	r2,-8(fp)
 2000530:	10c00117 	ldw	r3,4(r2)
 2000534:	e0bfff17 	ldw	r2,-4(fp)
 2000538:	10800117 	ldw	r2,4(r2)
 200053c:	1885c83a 	sub	r2,r3,r2
 2000540:	e0bffc15 	stw	r2,-16(fp)
    nDistance = a*a + b*b;
 2000544:	e0fffb17 	ldw	r3,-20(fp)
 2000548:	e0bffb17 	ldw	r2,-20(fp)
 200054c:	1887383a 	mul	r3,r3,r2
 2000550:	e13ffc17 	ldw	r4,-16(fp)
 2000554:	e0bffc17 	ldw	r2,-16(fp)
 2000558:	2085383a 	mul	r2,r4,r2
 200055c:	1885883a 	add	r2,r3,r2
 2000560:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
 2000564:	e13ffd17 	ldw	r4,-12(fp)
 2000568:	20080600 	call	2008060 <__floatsidf>
 200056c:	100b883a 	mov	r5,r2
 2000570:	180d883a 	mov	r6,r3
 2000574:	2809883a 	mov	r4,r5
 2000578:	300b883a 	mov	r5,r6
 200057c:	20073240 	call	2007324 <sqrt>
 2000580:	100b883a 	mov	r5,r2
 2000584:	180d883a 	mov	r6,r3
 2000588:	2809883a 	mov	r4,r5
 200058c:	300b883a 	mov	r5,r6
 2000590:	20081340 	call	2008134 <__fixdfsi>
 2000594:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
 2000598:	e0bffd17 	ldw	r2,-12(fp)
}
 200059c:	e037883a 	mov	sp,fp
 20005a0:	dfc00117 	ldw	ra,4(sp)
 20005a4:	df000017 	ldw	fp,0(sp)
 20005a8:	dec00204 	addi	sp,sp,8
 20005ac:	f800283a 	ret

020005b0 <PtCopy>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
 20005b0:	defffd04 	addi	sp,sp,-12
 20005b4:	df000215 	stw	fp,8(sp)
 20005b8:	df000204 	addi	fp,sp,8
 20005bc:	e13ffe15 	stw	r4,-8(fp)
 20005c0:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
 20005c4:	e0bfff17 	ldw	r2,-4(fp)
 20005c8:	10c00017 	ldw	r3,0(r2)
 20005cc:	e0bffe17 	ldw	r2,-8(fp)
 20005d0:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
 20005d4:	e0bfff17 	ldw	r2,-4(fp)
 20005d8:	10c00117 	ldw	r3,4(r2)
 20005dc:	e0bffe17 	ldw	r2,-8(fp)
 20005e0:	10c00115 	stw	r3,4(r2)
}
 20005e4:	e037883a 	mov	sp,fp
 20005e8:	df000017 	ldw	fp,0(sp)
 20005ec:	dec00104 	addi	sp,sp,4
 20005f0:	f800283a 	ret

020005f4 <Delay_Ms>:
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
 20005f4:	defffd04 	addi	sp,sp,-12
 20005f8:	dfc00215 	stw	ra,8(sp)
 20005fc:	df000115 	stw	fp,4(sp)
 2000600:	df000104 	addi	fp,sp,4
 2000604:	2005883a 	mov	r2,r4
 2000608:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
 200060c:	00000206 	br	2000618 <Delay_Ms+0x24>
    {
        usleep(1000);
 2000610:	0100fa04 	movi	r4,1000
 2000614:	20119800 	call	2011980 <usleep>
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
 2000618:	e0bfff0b 	ldhu	r2,-4(fp)
 200061c:	1004c03a 	cmpne	r2,r2,zero
 2000620:	e0ffff0b 	ldhu	r3,-4(fp)
 2000624:	18ffffc4 	addi	r3,r3,-1
 2000628:	e0ffff0d 	sth	r3,-4(fp)
 200062c:	10803fcc 	andi	r2,r2,255
 2000630:	103ff71e 	bne	r2,zero,2000610 <Delay_Ms+0x1c>
    {
        usleep(1000);
    }
}
 2000634:	e037883a 	mov	sp,fp
 2000638:	dfc00117 	ldw	ra,4(sp)
 200063c:	df000017 	ldw	fp,0(sp)
 2000640:	dec00204 	addi	sp,sp,8
 2000644:	f800283a 	ret

02000648 <LCD_SetCursor>:


void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos)
{
 2000648:	defffd04 	addi	sp,sp,-12
 200064c:	df000215 	stw	fp,8(sp)
 2000650:	df000204 	addi	fp,sp,8
 2000654:	2007883a 	mov	r3,r4
 2000658:	2805883a 	mov	r2,r5
 200065c:	e0fffe0d 	sth	r3,-8(fp)
 2000660:	e0bfff0d 	sth	r2,-4(fp)
	 LCD_WR_REG(0x002A);
 2000664:	00c00a84 	movi	r3,42
 2000668:	00814034 	movhi	r2,1280
 200066c:	10881804 	addi	r2,r2,8288
 2000670:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos>>8);
 2000674:	e0bffe0b 	ldhu	r2,-8(fp)
 2000678:	1004d23a 	srli	r2,r2,8
 200067c:	10ffffcc 	andi	r3,r2,65535
 2000680:	00814034 	movhi	r2,1280
 2000684:	10881904 	addi	r2,r2,8292
 2000688:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos&0XFF);
 200068c:	e0bffe0b 	ldhu	r2,-8(fp)
 2000690:	10c03fcc 	andi	r3,r2,255
 2000694:	00814034 	movhi	r2,1280
 2000698:	10881904 	addi	r2,r2,8292
 200069c:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002B);
 20006a0:	00c00ac4 	movi	r3,43
 20006a4:	00814034 	movhi	r2,1280
 20006a8:	10881804 	addi	r2,r2,8288
 20006ac:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos>>8);
 20006b0:	e0bfff0b 	ldhu	r2,-4(fp)
 20006b4:	1004d23a 	srli	r2,r2,8
 20006b8:	10ffffcc 	andi	r3,r2,65535
 20006bc:	00814034 	movhi	r2,1280
 20006c0:	10881904 	addi	r2,r2,8292
 20006c4:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos&0XFF);
 20006c8:	e0bfff0b 	ldhu	r2,-4(fp)
 20006cc:	10c03fcc 	andi	r3,r2,255
 20006d0:	00814034 	movhi	r2,1280
 20006d4:	10881904 	addi	r2,r2,8292
 20006d8:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002C);
 20006dc:	00c00b04 	movi	r3,44
 20006e0:	00814034 	movhi	r2,1280
 20006e4:	10881804 	addi	r2,r2,8288
 20006e8:	10c00035 	stwio	r3,0(r2)
}
 20006ec:	e037883a 	mov	sp,fp
 20006f0:	df000017 	ldw	fp,0(sp)
 20006f4:	dec00104 	addi	sp,sp,4
 20006f8:	f800283a 	ret

020006fc <LCD_Clear>:

void LCD_Clear(alt_u16 Color)
{
 20006fc:	defffc04 	addi	sp,sp,-16
 2000700:	dfc00315 	stw	ra,12(sp)
 2000704:	df000215 	stw	fp,8(sp)
 2000708:	df000204 	addi	fp,sp,8
 200070c:	2005883a 	mov	r2,r4
 2000710:	e0bfff0d 	sth	r2,-4(fp)
        alt_u32 index=0;
 2000714:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
 2000718:	0009883a 	mov	r4,zero
 200071c:	000b883a 	mov	r5,zero
 2000720:	20006480 	call	2000648 <LCD_SetCursor>
        LCD_WR_REG(0x002C);
 2000724:	00c00b04 	movi	r3,44
 2000728:	00814034 	movhi	r2,1280
 200072c:	10881804 	addi	r2,r2,8288
 2000730:	10c00035 	stwio	r3,0(r2)
        for(index=0;index<76800;index++)
 2000734:	e03ffe15 	stw	zero,-8(fp)
 2000738:	00000706 	br	2000758 <LCD_Clear+0x5c>
        {
        	LCD_WR_DATA(Color);
 200073c:	e0ffff0b 	ldhu	r3,-4(fp)
 2000740:	00814034 	movhi	r2,1280
 2000744:	10881904 	addi	r2,r2,8292
 2000748:	10c00035 	stwio	r3,0(r2)
void LCD_Clear(alt_u16 Color)
{
        alt_u32 index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
 200074c:	e0bffe17 	ldw	r2,-8(fp)
 2000750:	10800044 	addi	r2,r2,1
 2000754:	e0bffe15 	stw	r2,-8(fp)
 2000758:	e0bffe17 	ldw	r2,-8(fp)
 200075c:	00c00074 	movhi	r3,1
 2000760:	18caffc4 	addi	r3,r3,11263
 2000764:	18bff52e 	bgeu	r3,r2,200073c <LCD_Clear+0x40>
        {
        	LCD_WR_DATA(Color);
        }
}
 2000768:	e037883a 	mov	sp,fp
 200076c:	dfc00117 	ldw	ra,4(sp)
 2000770:	df000017 	ldw	fp,0(sp)
 2000774:	dec00204 	addi	sp,sp,8
 2000778:	f800283a 	ret

0200077c <LCD_DrawPoint>:

void LCD_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color )
{
 200077c:	defffb04 	addi	sp,sp,-20
 2000780:	dfc00415 	stw	ra,16(sp)
 2000784:	df000315 	stw	fp,12(sp)
 2000788:	df000304 	addi	fp,sp,12
 200078c:	2807883a 	mov	r3,r5
 2000790:	3005883a 	mov	r2,r6
 2000794:	e13ffd0d 	sth	r4,-12(fp)
 2000798:	e0fffe0d 	sth	r3,-8(fp)
 200079c:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(x,y);
 20007a0:	e0fffd0b 	ldhu	r3,-12(fp)
 20007a4:	e0bffe0b 	ldhu	r2,-8(fp)
 20007a8:	1809883a 	mov	r4,r3
 20007ac:	100b883a 	mov	r5,r2
 20007b0:	20006480 	call	2000648 <LCD_SetCursor>
        LCD_WR_REG(0x002C);
 20007b4:	00c00b04 	movi	r3,44
 20007b8:	00814034 	movhi	r2,1280
 20007bc:	10881804 	addi	r2,r2,8288
 20007c0:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(color);
 20007c4:	e0ffff0b 	ldhu	r3,-4(fp)
 20007c8:	00814034 	movhi	r2,1280
 20007cc:	10881904 	addi	r2,r2,8292
 20007d0:	10c00035 	stwio	r3,0(r2)
}
 20007d4:	e037883a 	mov	sp,fp
 20007d8:	dfc00117 	ldw	ra,4(sp)
 20007dc:	df000017 	ldw	fp,0(sp)
 20007e0:	dec00204 	addi	sp,sp,8
 20007e4:	f800283a 	ret

020007e8 <LCD_Init>:
void LCD_Init()
{
 20007e8:	defffe04 	addi	sp,sp,-8
 20007ec:	dfc00115 	stw	ra,4(sp)
 20007f0:	df000015 	stw	fp,0(sp)
 20007f4:	d839883a 	mov	fp,sp
	alt_u16 data1,data2;
	alt_u16 data3,data4;
	Set_LCD_RST;
 20007f8:	00c00044 	movi	r3,1
 20007fc:	00814034 	movhi	r2,1280
 2000800:	10881004 	addi	r2,r2,8256
 2000804:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
 2000808:	01000044 	movi	r4,1
 200080c:	20005f40 	call	20005f4 <Delay_Ms>
	Clr_LCD_RST;
 2000810:	0007883a 	mov	r3,zero
 2000814:	00814034 	movhi	r2,1280
 2000818:	10881004 	addi	r2,r2,8256
 200081c:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
 2000820:	01000284 	movi	r4,10
 2000824:	20005f40 	call	20005f4 <Delay_Ms>
	Set_LCD_RST;
 2000828:	00c00044 	movi	r3,1
 200082c:	00814034 	movhi	r2,1280
 2000830:	10881004 	addi	r2,r2,8256
 2000834:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);       // Delay 120 ms
 2000838:	01001e04 	movi	r4,120
 200083c:	20005f40 	call	20005f4 <Delay_Ms>
//	Clr_LCD_CS;



	LCD_WR_REG(0x0011); //Exit Sleep
 2000840:	00c00444 	movi	r3,17
 2000844:	00814034 	movhi	r2,1280
 2000848:	10881804 	addi	r2,r2,8288
 200084c:	10c00035 	stwio	r3,0(r2)
	LCD_WR_REG(0x00CF);
 2000850:	00c033c4 	movi	r3,207
 2000854:	00814034 	movhi	r2,1280
 2000858:	10881804 	addi	r2,r2,8288
 200085c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2000860:	0007883a 	mov	r3,zero
 2000864:	00814034 	movhi	r2,1280
 2000868:	10881904 	addi	r2,r2,8292
 200086c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0081);
 2000870:	00c02044 	movi	r3,129
 2000874:	00814034 	movhi	r2,1280
 2000878:	10881904 	addi	r2,r2,8292
 200087c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00c0);
 2000880:	00c03004 	movi	r3,192
 2000884:	00814034 	movhi	r2,1280
 2000888:	10881904 	addi	r2,r2,8292
 200088c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00ED);
 2000890:	00c03b44 	movi	r3,237
 2000894:	00814034 	movhi	r2,1280
 2000898:	10881804 	addi	r2,r2,8288
 200089c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0064);
 20008a0:	00c01904 	movi	r3,100
 20008a4:	00814034 	movhi	r2,1280
 20008a8:	10881904 	addi	r2,r2,8292
 20008ac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0003);
 20008b0:	00c000c4 	movi	r3,3
 20008b4:	00814034 	movhi	r2,1280
 20008b8:	10881904 	addi	r2,r2,8292
 20008bc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0012);
 20008c0:	00c00484 	movi	r3,18
 20008c4:	00814034 	movhi	r2,1280
 20008c8:	10881904 	addi	r2,r2,8292
 20008cc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0081);
 20008d0:	00c02044 	movi	r3,129
 20008d4:	00814034 	movhi	r2,1280
 20008d8:	10881904 	addi	r2,r2,8292
 20008dc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E8);
 20008e0:	00c03a04 	movi	r3,232
 20008e4:	00814034 	movhi	r2,1280
 20008e8:	10881804 	addi	r2,r2,8288
 20008ec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0085);
 20008f0:	00c02144 	movi	r3,133
 20008f4:	00814034 	movhi	r2,1280
 20008f8:	10881904 	addi	r2,r2,8292
 20008fc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 2000900:	00c00044 	movi	r3,1
 2000904:	00814034 	movhi	r2,1280
 2000908:	10881904 	addi	r2,r2,8292
 200090c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00798);
 2000910:	00c1e604 	movi	r3,1944
 2000914:	00814034 	movhi	r2,1280
 2000918:	10881904 	addi	r2,r2,8292
 200091c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00CB);
 2000920:	00c032c4 	movi	r3,203
 2000924:	00814034 	movhi	r2,1280
 2000928:	10881804 	addi	r2,r2,8288
 200092c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0039);
 2000930:	00c00e44 	movi	r3,57
 2000934:	00814034 	movhi	r2,1280
 2000938:	10881904 	addi	r2,r2,8292
 200093c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002C);
 2000940:	00c00b04 	movi	r3,44
 2000944:	00814034 	movhi	r2,1280
 2000948:	10881904 	addi	r2,r2,8292
 200094c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2000950:	0007883a 	mov	r3,zero
 2000954:	00814034 	movhi	r2,1280
 2000958:	10881904 	addi	r2,r2,8292
 200095c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
 2000960:	00c00d04 	movi	r3,52
 2000964:	00814034 	movhi	r2,1280
 2000968:	10881904 	addi	r2,r2,8292
 200096c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0002);
 2000970:	00c00084 	movi	r3,2
 2000974:	00814034 	movhi	r2,1280
 2000978:	10881904 	addi	r2,r2,8292
 200097c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F7);
 2000980:	00c03dc4 	movi	r3,247
 2000984:	00814034 	movhi	r2,1280
 2000988:	10881804 	addi	r2,r2,8288
 200098c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
 2000990:	00c00804 	movi	r3,32
 2000994:	00814034 	movhi	r2,1280
 2000998:	10881904 	addi	r2,r2,8292
 200099c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00EA);
 20009a0:	00c03a84 	movi	r3,234
 20009a4:	00814034 	movhi	r2,1280
 20009a8:	10881804 	addi	r2,r2,8288
 20009ac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 20009b0:	0007883a 	mov	r3,zero
 20009b4:	00814034 	movhi	r2,1280
 20009b8:	10881904 	addi	r2,r2,8292
 20009bc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 20009c0:	0007883a 	mov	r3,zero
 20009c4:	00814034 	movhi	r2,1280
 20009c8:	10881904 	addi	r2,r2,8292
 20009cc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B1);
 20009d0:	00c02c44 	movi	r3,177
 20009d4:	00814034 	movhi	r2,1280
 20009d8:	10881804 	addi	r2,r2,8288
 20009dc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 20009e0:	0007883a 	mov	r3,zero
 20009e4:	00814034 	movhi	r2,1280
 20009e8:	10881904 	addi	r2,r2,8292
 20009ec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001b);
 20009f0:	00c006c4 	movi	r3,27
 20009f4:	00814034 	movhi	r2,1280
 20009f8:	10881904 	addi	r2,r2,8292
 20009fc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B6);
 2000a00:	00c02d84 	movi	r3,182
 2000a04:	00814034 	movhi	r2,1280
 2000a08:	10881804 	addi	r2,r2,8288
 2000a0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000A);
 2000a10:	00c00284 	movi	r3,10
 2000a14:	00814034 	movhi	r2,1280
 2000a18:	10881904 	addi	r2,r2,8292
 2000a1c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00A2);
 2000a20:	00c02884 	movi	r3,162
 2000a24:	00814034 	movhi	r2,1280
 2000a28:	10881904 	addi	r2,r2,8292
 2000a2c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C0);    //Power control
 2000a30:	00c03004 	movi	r3,192
 2000a34:	00814034 	movhi	r2,1280
 2000a38:	10881804 	addi	r2,r2,8288
 2000a3c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);   //VRH[5:0]
 2000a40:	00c00144 	movi	r3,5
 2000a44:	00814034 	movhi	r2,1280
 2000a48:	10881904 	addi	r2,r2,8292
 2000a4c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C1);    //Power control
 2000a50:	00c03044 	movi	r3,193
 2000a54:	00814034 	movhi	r2,1280
 2000a58:	10881804 	addi	r2,r2,8288
 2000a5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
 2000a60:	00c00444 	movi	r3,17
 2000a64:	00814034 	movhi	r2,1280
 2000a68:	10881904 	addi	r2,r2,8292
 2000a6c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C5);    //VCM control
 2000a70:	00c03144 	movi	r3,197
 2000a74:	00814034 	movhi	r2,1280
 2000a78:	10881804 	addi	r2,r2,8288
 2000a7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3F
 2000a80:	00c01144 	movi	r3,69
 2000a84:	00814034 	movhi	r2,1280
 2000a88:	10881904 	addi	r2,r2,8292
 2000a8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3C
 2000a90:	00c01144 	movi	r3,69
 2000a94:	00814034 	movhi	r2,1280
 2000a98:	10881904 	addi	r2,r2,8292
 2000a9c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00C7);    //VCM control2
 2000aa0:	00c031c4 	movi	r3,199
 2000aa4:	00814034 	movhi	r2,1280
 2000aa8:	10881804 	addi	r2,r2,8288
 2000aac:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(0X00a2);
 2000ab0:	00c02884 	movi	r3,162
 2000ab4:	00814034 	movhi	r2,1280
 2000ab8:	10881904 	addi	r2,r2,8292
 2000abc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0036);    // Memory Access Control
 2000ac0:	00c00d84 	movi	r3,54
 2000ac4:	00814034 	movhi	r2,1280
 2000ac8:	10881804 	addi	r2,r2,8288
 2000acc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);//48
 2000ad0:	00c00204 	movi	r3,8
 2000ad4:	00814034 	movhi	r2,1280
 2000ad8:	10881904 	addi	r2,r2,8292
 2000adc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
 2000ae0:	00c03c84 	movi	r3,242
 2000ae4:	00814034 	movhi	r2,1280
 2000ae8:	10881804 	addi	r2,r2,8288
 2000aec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2000af0:	0007883a 	mov	r3,zero
 2000af4:	00814034 	movhi	r2,1280
 2000af8:	10881904 	addi	r2,r2,8292
 2000afc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0026);    //Gamma curve selected
 2000b00:	00c00984 	movi	r3,38
 2000b04:	00814034 	movhi	r2,1280
 2000b08:	10881804 	addi	r2,r2,8288
 2000b0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 2000b10:	00c00044 	movi	r3,1
 2000b14:	00814034 	movhi	r2,1280
 2000b18:	10881904 	addi	r2,r2,8292
 2000b1c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E0);    //Set Gamma
 2000b20:	00c03804 	movi	r3,224
 2000b24:	00814034 	movhi	r2,1280
 2000b28:	10881804 	addi	r2,r2,8288
 2000b2c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000F);
 2000b30:	00c003c4 	movi	r3,15
 2000b34:	00814034 	movhi	r2,1280
 2000b38:	10881904 	addi	r2,r2,8292
 2000b3c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0026);
 2000b40:	00c00984 	movi	r3,38
 2000b44:	00814034 	movhi	r2,1280
 2000b48:	10881904 	addi	r2,r2,8292
 2000b4c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0024);
 2000b50:	00c00904 	movi	r3,36
 2000b54:	00814034 	movhi	r2,1280
 2000b58:	10881904 	addi	r2,r2,8292
 2000b5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
 2000b60:	00c002c4 	movi	r3,11
 2000b64:	00814034 	movhi	r2,1280
 2000b68:	10881904 	addi	r2,r2,8292
 2000b6c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000E);
 2000b70:	00c00384 	movi	r3,14
 2000b74:	00814034 	movhi	r2,1280
 2000b78:	10881904 	addi	r2,r2,8292
 2000b7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
 2000b80:	00c00204 	movi	r3,8
 2000b84:	00814034 	movhi	r2,1280
 2000b88:	10881904 	addi	r2,r2,8292
 2000b8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x004b);
 2000b90:	00c012c4 	movi	r3,75
 2000b94:	00814034 	movhi	r2,1280
 2000b98:	10881904 	addi	r2,r2,8292
 2000b9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00a8);
 2000ba0:	00c02a04 	movi	r3,168
 2000ba4:	00814034 	movhi	r2,1280
 2000ba8:	10881904 	addi	r2,r2,8292
 2000bac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003b);
 2000bb0:	00c00ec4 	movi	r3,59
 2000bb4:	00814034 	movhi	r2,1280
 2000bb8:	10881904 	addi	r2,r2,8292
 2000bbc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000a);
 2000bc0:	00c00284 	movi	r3,10
 2000bc4:	00814034 	movhi	r2,1280
 2000bc8:	10881904 	addi	r2,r2,8292
 2000bcc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0014);
 2000bd0:	00c00504 	movi	r3,20
 2000bd4:	00814034 	movhi	r2,1280
 2000bd8:	10881904 	addi	r2,r2,8292
 2000bdc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0006);
 2000be0:	00c00184 	movi	r3,6
 2000be4:	00814034 	movhi	r2,1280
 2000be8:	10881904 	addi	r2,r2,8292
 2000bec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
 2000bf0:	00c00404 	movi	r3,16
 2000bf4:	00814034 	movhi	r2,1280
 2000bf8:	10881904 	addi	r2,r2,8292
 2000bfc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
 2000c00:	00c00244 	movi	r3,9
 2000c04:	00814034 	movhi	r2,1280
 2000c08:	10881904 	addi	r2,r2,8292
 2000c0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2000c10:	0007883a 	mov	r3,zero
 2000c14:	00814034 	movhi	r2,1280
 2000c18:	10881904 	addi	r2,r2,8292
 2000c1c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0X00E1);    //Set Gamma
 2000c20:	00c03844 	movi	r3,225
 2000c24:	00814034 	movhi	r2,1280
 2000c28:	10881804 	addi	r2,r2,8288
 2000c2c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2000c30:	0007883a 	mov	r3,zero
 2000c34:	00814034 	movhi	r2,1280
 2000c38:	10881904 	addi	r2,r2,8292
 2000c3c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001c);
 2000c40:	00c00704 	movi	r3,28
 2000c44:	00814034 	movhi	r2,1280
 2000c48:	10881904 	addi	r2,r2,8292
 2000c4c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
 2000c50:	00c00804 	movi	r3,32
 2000c54:	00814034 	movhi	r2,1280
 2000c58:	10881904 	addi	r2,r2,8292
 2000c5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0004);
 2000c60:	00c00104 	movi	r3,4
 2000c64:	00814034 	movhi	r2,1280
 2000c68:	10881904 	addi	r2,r2,8292
 2000c6c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
 2000c70:	00c00404 	movi	r3,16
 2000c74:	00814034 	movhi	r2,1280
 2000c78:	10881904 	addi	r2,r2,8292
 2000c7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
 2000c80:	00c00204 	movi	r3,8
 2000c84:	00814034 	movhi	r2,1280
 2000c88:	10881904 	addi	r2,r2,8292
 2000c8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
 2000c90:	00c00d04 	movi	r3,52
 2000c94:	00814034 	movhi	r2,1280
 2000c98:	10881904 	addi	r2,r2,8292
 2000c9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0047);
 2000ca0:	00c011c4 	movi	r3,71
 2000ca4:	00814034 	movhi	r2,1280
 2000ca8:	10881904 	addi	r2,r2,8292
 2000cac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0044);
 2000cb0:	00c01104 	movi	r3,68
 2000cb4:	00814034 	movhi	r2,1280
 2000cb8:	10881904 	addi	r2,r2,8292
 2000cbc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);
 2000cc0:	00c00144 	movi	r3,5
 2000cc4:	00814034 	movhi	r2,1280
 2000cc8:	10881904 	addi	r2,r2,8292
 2000ccc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
 2000cd0:	00c002c4 	movi	r3,11
 2000cd4:	00814034 	movhi	r2,1280
 2000cd8:	10881904 	addi	r2,r2,8292
 2000cdc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
 2000ce0:	00c00244 	movi	r3,9
 2000ce4:	00814034 	movhi	r2,1280
 2000ce8:	10881904 	addi	r2,r2,8292
 2000cec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002f);
 2000cf0:	00c00bc4 	movi	r3,47
 2000cf4:	00814034 	movhi	r2,1280
 2000cf8:	10881904 	addi	r2,r2,8292
 2000cfc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0036);
 2000d00:	00c00d84 	movi	r3,54
 2000d04:	00814034 	movhi	r2,1280
 2000d08:	10881904 	addi	r2,r2,8292
 2000d0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000f);
 2000d10:	00c003c4 	movi	r3,15
 2000d14:	00814034 	movhi	r2,1280
 2000d18:	10881904 	addi	r2,r2,8292
 2000d1c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002A);
 2000d20:	00c00a84 	movi	r3,42
 2000d24:	00814034 	movhi	r2,1280
 2000d28:	10881804 	addi	r2,r2,8288
 2000d2c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2000d30:	0007883a 	mov	r3,zero
 2000d34:	00814034 	movhi	r2,1280
 2000d38:	10881904 	addi	r2,r2,8292
 2000d3c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2000d40:	0007883a 	mov	r3,zero
 2000d44:	00814034 	movhi	r2,1280
 2000d48:	10881904 	addi	r2,r2,8292
 2000d4c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2000d50:	0007883a 	mov	r3,zero
 2000d54:	00814034 	movhi	r2,1280
 2000d58:	10881904 	addi	r2,r2,8292
 2000d5c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00ef);
 2000d60:	00c03bc4 	movi	r3,239
 2000d64:	00814034 	movhi	r2,1280
 2000d68:	10881904 	addi	r2,r2,8292
 2000d6c:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x002B);
 2000d70:	00c00ac4 	movi	r3,43
 2000d74:	00814034 	movhi	r2,1280
 2000d78:	10881804 	addi	r2,r2,8288
 2000d7c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2000d80:	0007883a 	mov	r3,zero
 2000d84:	00814034 	movhi	r2,1280
 2000d88:	10881904 	addi	r2,r2,8292
 2000d8c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2000d90:	0007883a 	mov	r3,zero
 2000d94:	00814034 	movhi	r2,1280
 2000d98:	10881904 	addi	r2,r2,8292
 2000d9c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 2000da0:	00c00044 	movi	r3,1
 2000da4:	00814034 	movhi	r2,1280
 2000da8:	10881904 	addi	r2,r2,8292
 2000dac:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003f);
 2000db0:	00c00fc4 	movi	r3,63
 2000db4:	00814034 	movhi	r2,1280
 2000db8:	10881904 	addi	r2,r2,8292
 2000dbc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x003A);
 2000dc0:	00c00e84 	movi	r3,58
 2000dc4:	00814034 	movhi	r2,1280
 2000dc8:	10881804 	addi	r2,r2,8288
 2000dcc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0055);
 2000dd0:	00c01544 	movi	r3,85
 2000dd4:	00814034 	movhi	r2,1280
 2000dd8:	10881904 	addi	r2,r2,8292
 2000ddc:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00f6);
 2000de0:	00c03d84 	movi	r3,246
 2000de4:	00814034 	movhi	r2,1280
 2000de8:	10881804 	addi	r2,r2,8288
 2000dec:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
 2000df0:	00c00044 	movi	r3,1
 2000df4:	00814034 	movhi	r2,1280
 2000df8:	10881904 	addi	r2,r2,8292
 2000dfc:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0030);
 2000e00:	00c00c04 	movi	r3,48
 2000e04:	00814034 	movhi	r2,1280
 2000e08:	10881904 	addi	r2,r2,8292
 2000e0c:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
 2000e10:	0007883a 	mov	r3,zero
 2000e14:	00814034 	movhi	r2,1280
 2000e18:	10881904 	addi	r2,r2,8292
 2000e1c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0029); //display on
 2000e20:	00c00a44 	movi	r3,41
 2000e24:	00814034 	movhi	r2,1280
 2000e28:	10881804 	addi	r2,r2,8288
 2000e2c:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002c);    // 0x2C
 2000e30:	00c00b04 	movi	r3,44
 2000e34:	00814034 	movhi	r2,1280
 2000e38:	10881804 	addi	r2,r2,8288
 2000e3c:	10c00035 	stwio	r3,0(r2)

}
 2000e40:	e037883a 	mov	sp,fp
 2000e44:	dfc00117 	ldw	ra,4(sp)
 2000e48:	df000017 	ldw	fp,0(sp)
 2000e4c:	dec00204 	addi	sp,sp,8
 2000e50:	f800283a 	ret

02000e54 <LCD_Pattern_Horizon>:


void LCD_Pattern_Horizon(void)
{
 2000e54:	defffc04 	addi	sp,sp,-16
 2000e58:	dfc00315 	stw	ra,12(sp)
 2000e5c:	df000215 	stw	fp,8(sp)
 2000e60:	df000204 	addi	fp,sp,8
        alt_u32 index=0;
 2000e64:	e03ffe15 	stw	zero,-8(fp)
        alt_u16  data=0;
 2000e68:	e03fff0d 	sth	zero,-4(fp)
        LCD_SetCursor(0x00,0x0000);
 2000e6c:	0009883a 	mov	r4,zero
 2000e70:	000b883a 	mov	r5,zero
 2000e74:	20006480 	call	2000648 <LCD_SetCursor>
        data=0x0000;
 2000e78:	e03fff0d 	sth	zero,-4(fp)
        for(index=0;index<240*80;index++)
 2000e7c:	e03ffe15 	stw	zero,-8(fp)
 2000e80:	00000706 	br	2000ea0 <LCD_Pattern_Horizon+0x4c>
        {
        	LCD_WR_DATA(data);
 2000e84:	e0ffff0b 	ldhu	r3,-4(fp)
 2000e88:	00814034 	movhi	r2,1280
 2000e8c:	10881904 	addi	r2,r2,8292
 2000e90:	10c00035 	stwio	r3,0(r2)
{
        alt_u32 index=0;
        alt_u16  data=0;
        LCD_SetCursor(0x00,0x0000);
        data=0x0000;
        for(index=0;index<240*80;index++)
 2000e94:	e0bffe17 	ldw	r2,-8(fp)
 2000e98:	10800044 	addi	r2,r2,1
 2000e9c:	e0bffe15 	stw	r2,-8(fp)
 2000ea0:	e0bffe17 	ldw	r2,-8(fp)
 2000ea4:	1092c030 	cmpltui	r2,r2,19200
 2000ea8:	103ff61e 	bne	r2,zero,2000e84 <LCD_Pattern_Horizon+0x30>
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
 2000eac:	0009883a 	mov	r4,zero
 2000eb0:	01401404 	movi	r5,80
 2000eb4:	20006480 	call	2000648 <LCD_SetCursor>
        data=RED;
 2000eb8:	00be0004 	movi	r2,-2048
 2000ebc:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 2000ec0:	e03ffe15 	stw	zero,-8(fp)
 2000ec4:	00000706 	br	2000ee4 <LCD_Pattern_Horizon+0x90>
		{
			LCD_WR_DATA(data);
 2000ec8:	e0ffff0b 	ldhu	r3,-4(fp)
 2000ecc:	00814034 	movhi	r2,1280
 2000ed0:	10881904 	addi	r2,r2,8292
 2000ed4:	10c00035 	stwio	r3,0(r2)
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
        data=RED;
		for(index=0;index<240*80;index++)
 2000ed8:	e0bffe17 	ldw	r2,-8(fp)
 2000edc:	10800044 	addi	r2,r2,1
 2000ee0:	e0bffe15 	stw	r2,-8(fp)
 2000ee4:	e0bffe17 	ldw	r2,-8(fp)
 2000ee8:	1092c030 	cmpltui	r2,r2,19200
 2000eec:	103ff61e 	bne	r2,zero,2000ec8 <LCD_Pattern_Horizon+0x74>
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
 2000ef0:	0009883a 	mov	r4,zero
 2000ef4:	01402804 	movi	r5,160
 2000ef8:	20006480 	call	2000648 <LCD_SetCursor>
		data=GREEN;
 2000efc:	0081f804 	movi	r2,2016
 2000f00:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 2000f04:	e03ffe15 	stw	zero,-8(fp)
 2000f08:	00000706 	br	2000f28 <LCD_Pattern_Horizon+0xd4>
		{
			LCD_WR_DATA(data);
 2000f0c:	e0ffff0b 	ldhu	r3,-4(fp)
 2000f10:	00814034 	movhi	r2,1280
 2000f14:	10881904 	addi	r2,r2,8292
 2000f18:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
		data=GREEN;
		for(index=0;index<240*80;index++)
 2000f1c:	e0bffe17 	ldw	r2,-8(fp)
 2000f20:	10800044 	addi	r2,r2,1
 2000f24:	e0bffe15 	stw	r2,-8(fp)
 2000f28:	e0bffe17 	ldw	r2,-8(fp)
 2000f2c:	1092c030 	cmpltui	r2,r2,19200
 2000f30:	103ff61e 	bne	r2,zero,2000f0c <LCD_Pattern_Horizon+0xb8>
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
 2000f34:	0009883a 	mov	r4,zero
 2000f38:	01403c04 	movi	r5,240
 2000f3c:	20006480 	call	2000648 <LCD_SetCursor>
		data=BLUE;
 2000f40:	008007c4 	movi	r2,31
 2000f44:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
 2000f48:	e03ffe15 	stw	zero,-8(fp)
 2000f4c:	00000706 	br	2000f6c <LCD_Pattern_Horizon+0x118>
		{
			LCD_WR_DATA(data);
 2000f50:	e0ffff0b 	ldhu	r3,-4(fp)
 2000f54:	00814034 	movhi	r2,1280
 2000f58:	10881904 	addi	r2,r2,8292
 2000f5c:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
		data=BLUE;
		for(index=0;index<240*80;index++)
 2000f60:	e0bffe17 	ldw	r2,-8(fp)
 2000f64:	10800044 	addi	r2,r2,1
 2000f68:	e0bffe15 	stw	r2,-8(fp)
 2000f6c:	e0bffe17 	ldw	r2,-8(fp)
 2000f70:	1092c030 	cmpltui	r2,r2,19200
 2000f74:	103ff61e 	bne	r2,zero,2000f50 <LCD_Pattern_Horizon+0xfc>
		{
			LCD_WR_DATA(data);
		}
}
 2000f78:	e037883a 	mov	sp,fp
 2000f7c:	dfc00117 	ldw	ra,4(sp)
 2000f80:	df000017 	ldw	fp,0(sp)
 2000f84:	dec00204 	addi	sp,sp,8
 2000f88:	f800283a 	ret

02000f8c <LCD_Pattern_Vertical>:

void LCD_Pattern_Vertical(void)
{
 2000f8c:	defff804 	addi	sp,sp,-32
 2000f90:	dfc00715 	stw	ra,28(sp)
 2000f94:	df000615 	stw	fp,24(sp)
 2000f98:	df000604 	addi	fp,sp,24
        int i,j,m;
        alt_u16  data=0;
 2000f9c:	e03ffd0d 	sth	zero,-12(fp)
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
 2000fa0:	00bfffc4 	movi	r2,-1
 2000fa4:	e0bffd8d 	sth	r2,-10(fp)
 2000fa8:	008007c4 	movi	r2,31
 2000fac:	e0bffe0d 	sth	r2,-8(fp)
 2000fb0:	0081f804 	movi	r2,2016
 2000fb4:	e0bffe8d 	sth	r2,-6(fp)
 2000fb8:	00be0004 	movi	r2,-2048
 2000fbc:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(0x00,0x0000);
 2000fc0:	0009883a 	mov	r4,zero
 2000fc4:	000b883a 	mov	r5,zero
 2000fc8:	20006480 	call	2000648 <LCD_SetCursor>
        for(m=0;m<320;m++)
 2000fcc:	e03ffc15 	stw	zero,-16(fp)
 2000fd0:	00001e06 	br	200104c <LCD_Pattern_Vertical+0xc0>
        {
			for(i=0;i<4;i++)
 2000fd4:	e03ffa15 	stw	zero,-24(fp)
 2000fd8:	00001606 	br	2001034 <LCD_Pattern_Vertical+0xa8>
			{
				data=color[i];
 2000fdc:	e0bffa17 	ldw	r2,-24(fp)
 2000fe0:	1085883a 	add	r2,r2,r2
 2000fe4:	e0fffa04 	addi	r3,fp,-24
 2000fe8:	1885883a 	add	r2,r3,r2
 2000fec:	10800384 	addi	r2,r2,14
 2000ff0:	1080000b 	ldhu	r2,0(r2)
 2000ff4:	e0bffd0d 	sth	r2,-12(fp)
				for(j=0;j<60;j++)
 2000ff8:	e03ffb15 	stw	zero,-20(fp)
 2000ffc:	00000706 	br	200101c <LCD_Pattern_Vertical+0x90>
				{
					LCD_WR_DATA(data);
 2001000:	e0fffd0b 	ldhu	r3,-12(fp)
 2001004:	00814034 	movhi	r2,1280
 2001008:	10881904 	addi	r2,r2,8292
 200100c:	10c00035 	stwio	r3,0(r2)
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
			{
				data=color[i];
				for(j=0;j<60;j++)
 2001010:	e0bffb17 	ldw	r2,-20(fp)
 2001014:	10800044 	addi	r2,r2,1
 2001018:	e0bffb15 	stw	r2,-20(fp)
 200101c:	e0bffb17 	ldw	r2,-20(fp)
 2001020:	10800f10 	cmplti	r2,r2,60
 2001024:	103ff61e 	bne	r2,zero,2001000 <LCD_Pattern_Vertical+0x74>
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
 2001028:	e0bffa17 	ldw	r2,-24(fp)
 200102c:	10800044 	addi	r2,r2,1
 2001030:	e0bffa15 	stw	r2,-24(fp)
 2001034:	e0bffa17 	ldw	r2,-24(fp)
 2001038:	10800110 	cmplti	r2,r2,4
 200103c:	103fe71e 	bne	r2,zero,2000fdc <LCD_Pattern_Vertical+0x50>
{
        int i,j,m;
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
 2001040:	e0bffc17 	ldw	r2,-16(fp)
 2001044:	10800044 	addi	r2,r2,1
 2001048:	e0bffc15 	stw	r2,-16(fp)
 200104c:	e0bffc17 	ldw	r2,-16(fp)
 2001050:	10805010 	cmplti	r2,r2,320
 2001054:	103fdf1e 	bne	r2,zero,2000fd4 <LCD_Pattern_Vertical+0x48>
				{
					LCD_WR_DATA(data);
				}
			}
        }
}
 2001058:	e037883a 	mov	sp,fp
 200105c:	dfc00117 	ldw	ra,4(sp)
 2001060:	df000017 	ldw	fp,0(sp)
 2001064:	dec00204 	addi	sp,sp,8
 2001068:	f800283a 	ret

0200106c <vid_clean_screen>:
#include "ILI9341.h"
#endif


// richard add
void vid_clean_screen(alt_video_display* display, int color){
 200106c:	defffa04 	addi	sp,sp,-24
 2001070:	dfc00515 	stw	ra,20(sp)
 2001074:	df000415 	stw	fp,16(sp)
 2001078:	df000404 	addi	fp,sp,16
 200107c:	e13ffe15 	stw	r4,-8(fp)
 2001080:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
 2001084:	e0bffe17 	ldw	r2,-8(fp)
 2001088:	10c00117 	ldw	r3,4(r2)
 200108c:	e0bffe17 	ldw	r2,-8(fp)
 2001090:	10800217 	ldw	r2,8(r2)
 2001094:	e13fff17 	ldw	r4,-4(fp)
 2001098:	d9000015 	stw	r4,0(sp)
 200109c:	e13ffe17 	ldw	r4,-8(fp)
 20010a0:	d9000115 	stw	r4,4(sp)
 20010a4:	0009883a 	mov	r4,zero
 20010a8:	000b883a 	mov	r5,zero
 20010ac:	180d883a 	mov	r6,r3
 20010b0:	100f883a 	mov	r7,r2
 20010b4:	2001be80 	call	2001be8 <vid_paint_block>
}
 20010b8:	e037883a 	mov	sp,fp
 20010bc:	dfc00117 	ldw	ra,4(sp)
 20010c0:	df000017 	ldw	fp,0(sp)
 20010c4:	dec00204 	addi	sp,sp,8
 20010c8:	f800283a 	ret

020010cc <vid_draw_line>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
 20010cc:	defff704 	addi	sp,sp,-36
 20010d0:	dfc00815 	stw	ra,32(sp)
 20010d4:	df000715 	stw	fp,28(sp)
 20010d8:	df000704 	addi	fp,sp,28
 20010dc:	e13ffc15 	stw	r4,-16(fp)
 20010e0:	e17ffd15 	stw	r5,-12(fp)
 20010e4:	e1bffe15 	stw	r6,-8(fp)
 20010e8:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
 20010ec:	e0fffd17 	ldw	r3,-12(fp)
 20010f0:	e0bfff17 	ldw	r2,-4(fp)
 20010f4:	1880111e 	bne	r3,r2,200113c <vid_draw_line+0x70>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
 20010f8:	e0bffc17 	ldw	r2,-16(fp)
 20010fc:	113fffcc 	andi	r4,r2,65535
 2001100:	2120001c 	xori	r4,r4,32768
 2001104:	21200004 	addi	r4,r4,-32768
 2001108:	e0bffe17 	ldw	r2,-8(fp)
 200110c:	10ffffcc 	andi	r3,r2,65535
 2001110:	18e0001c 	xori	r3,r3,32768
 2001114:	18e00004 	addi	r3,r3,-32768
                         (unsigned short)horiz_end, 
                         (unsigned short)vert_start,
 2001118:	e0bffd17 	ldw	r2,-12(fp)
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
 200111c:	10bfffcc 	andi	r2,r2,65535
 2001120:	e1400417 	ldw	r5,16(fp)
 2001124:	d9400015 	stw	r5,0(sp)
 2001128:	180b883a 	mov	r5,r3
 200112c:	100d883a 	mov	r6,r2
 2001130:	e1c00317 	ldw	r7,12(fp)
 2001134:	2001c7c0 	call	2001c7c <vid_draw_horiz_line>
 2001138:	00001206 	br	2001184 <vid_draw_line+0xb8>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 200113c:	e0bffc17 	ldw	r2,-16(fp)
 2001140:	113fffcc 	andi	r4,r2,65535
                          (unsigned short)vert_start, 
 2001144:	e0bffd17 	ldw	r2,-12(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 2001148:	117fffcc 	andi	r5,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
 200114c:	e0bffe17 	ldw	r2,-8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 2001150:	10ffffcc 	andi	r3,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
 2001154:	e0bfff17 	ldw	r2,-4(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 2001158:	10bfffcc 	andi	r2,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
 200115c:	e1800217 	ldw	r6,8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 2001160:	31bfffcc 	andi	r6,r6,65535
 2001164:	d9800015 	stw	r6,0(sp)
 2001168:	e1800317 	ldw	r6,12(fp)
 200116c:	d9800115 	stw	r6,4(sp)
 2001170:	e1800417 	ldw	r6,16(fp)
 2001174:	d9800215 	stw	r6,8(sp)
 2001178:	180d883a 	mov	r6,r3
 200117c:	100f883a 	mov	r7,r2
 2001180:	2001e8c0 	call	2001e8c <vid_draw_sloped_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
 2001184:	e037883a 	mov	sp,fp
 2001188:	dfc00117 	ldw	ra,4(sp)
 200118c:	df000017 	ldw	fp,0(sp)
 2001190:	dec00204 	addi	sp,sp,8
 2001194:	f800283a 	ret

02001198 <vid_scroll_string_quit>:



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
 2001198:	defffd04 	addi	sp,sp,-12
 200119c:	dfc00215 	stw	ra,8(sp)
 20011a0:	df000115 	stw	fp,4(sp)
 20011a4:	df000104 	addi	fp,sp,4
 20011a8:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
 20011ac:	e0bfff17 	ldw	r2,-4(fp)
 20011b0:	10800517 	ldw	r2,20(r2)
 20011b4:	1009883a 	mov	r4,r2
 20011b8:	20088e80 	call	20088e8 <free>
  free(scroll);
 20011bc:	e13fff17 	ldw	r4,-4(fp)
 20011c0:	20088e80 	call	20088e8 <free>
}
 20011c4:	e037883a 	mov	sp,fp
 20011c8:	dfc00117 	ldw	ra,4(sp)
 20011cc:	df000017 	ldw	fp,0(sp)
 20011d0:	dec00204 	addi	sp,sp,8
 20011d4:	f800283a 	ret

020011d8 <vid_scroll_string_init>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
 20011d8:	defff904 	addi	sp,sp,-28
 20011dc:	dfc00615 	stw	ra,24(sp)
 20011e0:	df000515 	stw	fp,20(sp)
 20011e4:	df000504 	addi	fp,sp,20
 20011e8:	e13ffc15 	stw	r4,-16(fp)
 20011ec:	e17ffd15 	stw	r5,-12(fp)
 20011f0:	e1bffe15 	stw	r6,-8(fp)
 20011f4:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = malloc(sizeof (vid_text_scroll_struct));
 20011f8:	01000f04 	movi	r4,60
 20011fc:	20088d40 	call	20088d4 <malloc>
 2001200:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
 2001204:	e0bffb17 	ldw	r2,-20(fp)
 2001208:	e0fffc17 	ldw	r3,-16(fp)
 200120c:	10c00015 	stw	r3,0(r2)
  scroll->vbegin = vbegin;
 2001210:	e0bffb17 	ldw	r2,-20(fp)
 2001214:	e0fffd17 	ldw	r3,-12(fp)
 2001218:	10c00115 	stw	r3,4(r2)
  scroll->hend = hend;
 200121c:	e0bffb17 	ldw	r2,-20(fp)
 2001220:	e0fffe17 	ldw	r3,-8(fp)
 2001224:	10c00215 	stw	r3,8(r2)
  scroll->f_color = f_color;
 2001228:	e0bffb17 	ldw	r2,-20(fp)
 200122c:	e0ffff17 	ldw	r3,-4(fp)
 2001230:	10c00315 	stw	r3,12(r2)
  scroll->b_color = b_color;
 2001234:	e0bffb17 	ldw	r2,-20(fp)
 2001238:	e0c00217 	ldw	r3,8(fp)
 200123c:	10c00415 	stw	r3,16(r2)
  scroll->string = malloc(strlen(string)+2);
 2001240:	e1000517 	ldw	r4,20(fp)
 2001244:	20095100 	call	2009510 <strlen>
 2001248:	10800084 	addi	r2,r2,2
 200124c:	1009883a 	mov	r4,r2
 2001250:	20088d40 	call	20088d4 <malloc>
 2001254:	1007883a 	mov	r3,r2
 2001258:	e0bffb17 	ldw	r2,-20(fp)
 200125c:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
 2001260:	e0bffb17 	ldw	r2,-20(fp)
 2001264:	10800517 	ldw	r2,20(r2)
 2001268:	1009883a 	mov	r4,r2
 200126c:	e1400517 	ldw	r5,20(fp)
 2001270:	200947c0 	call	200947c <strcpy>
  scroll->font = font;
 2001274:	e0bffb17 	ldw	r2,-20(fp)
 2001278:	e0c00317 	ldw	r3,12(fp)
 200127c:	10c00615 	stw	r3,24(r2)
  scroll->ms_delay = ms_delay;
 2001280:	e0bffb17 	ldw	r2,-20(fp)
 2001284:	e0c00417 	ldw	r3,16(fp)
 2001288:	10c00715 	stw	r3,28(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 200128c:	008080f4 	movhi	r2,515
 2001290:	10884704 	addi	r2,r2,8476
 2001294:	10800017 	ldw	r2,0(r2)
  scroll->ticks_at_last_move = alt_nticks();
 2001298:	1007883a 	mov	r3,r2
 200129c:	e0bffb17 	ldw	r2,-20(fp)
 20012a0:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
 20012a4:	e0bffb17 	ldw	r2,-20(fp)
 20012a8:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
 20012ac:	e0bffb17 	ldw	r2,-20(fp)
 20012b0:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
 20012b4:	e0bffb17 	ldw	r2,-20(fp)
 20012b8:	10c00217 	ldw	r3,8(r2)
 20012bc:	e0bffb17 	ldw	r2,-20(fp)
 20012c0:	10800017 	ldw	r2,0(r2)
 20012c4:	1887c83a 	sub	r3,r3,r2
 20012c8:	e0bffb17 	ldw	r2,-20(fp)
 20012cc:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
 20012d0:	e1000517 	ldw	r4,20(fp)
 20012d4:	20095100 	call	2009510 <strlen>
 20012d8:	1007883a 	mov	r3,r2
 20012dc:	e0bffb17 	ldw	r2,-20(fp)
 20012e0:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
 20012e4:	e0bffb17 	ldw	r2,-20(fp)
 20012e8:	10800c17 	ldw	r2,48(r2)
 20012ec:	100690fa 	slli	r3,r2,3
 20012f0:	e0bffb17 	ldw	r2,-20(fp)
 20012f4:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
 20012f8:	e0bffb17 	ldw	r2,-20(fp)
 20012fc:	10c00b17 	ldw	r3,44(r2)
 2001300:	e0bffb17 	ldw	r2,-20(fp)
 2001304:	10800e17 	ldw	r2,56(r2)
 2001308:	1887883a 	add	r3,r3,r2
 200130c:	e0bffb17 	ldw	r2,-20(fp)
 2001310:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
 2001314:	e0bffb17 	ldw	r2,-20(fp)
  
}
 2001318:	e037883a 	mov	sp,fp
 200131c:	dfc00117 	ldw	ra,4(sp)
 2001320:	df000017 	ldw	fp,0(sp)
 2001324:	dec00204 	addi	sp,sp,8
 2001328:	f800283a 	ret

0200132c <vid_scroll_string>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
 200132c:	deffec04 	addi	sp,sp,-80
 2001330:	dfc01315 	stw	ra,76(sp)
 2001334:	df001215 	stw	fp,72(sp)
 2001338:	dc401115 	stw	r17,68(sp)
 200133c:	dc001015 	stw	r16,64(sp)
 2001340:	df001004 	addi	fp,sp,64
 2001344:	e13ffe15 	stw	r4,-8(fp)
 2001348:	e17fff15 	stw	r5,-4(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
 200134c:	00800044 	movi	r2,1
 2001350:	e0bff805 	stb	r2,-32(fp)
 2001354:	008080f4 	movhi	r2,515
 2001358:	10884704 	addi	r2,r2,8476
 200135c:	10800017 	ldw	r2,0(r2)

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
 2001360:	1021883a 	mov	r16,r2
 2001364:	e0bffe17 	ldw	r2,-8(fp)
 2001368:	10800817 	ldw	r2,32(r2)
 200136c:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2001370:	008080f4 	movhi	r2,515
 2001374:	10884604 	addi	r2,r2,8472
 2001378:	10800017 	ldw	r2,0(r2)
 200137c:	1007883a 	mov	r3,r2
 2001380:	e0bffe17 	ldw	r2,-8(fp)
 2001384:	10800717 	ldw	r2,28(r2)
 2001388:	1885383a 	mul	r2,r3,r2
 200138c:	1009883a 	mov	r4,r2
 2001390:	0140fa04 	movi	r5,1000
 2001394:	20083280 	call	2008328 <__udivsi3>
 2001398:	8885883a 	add	r2,r17,r2
 200139c:	8080bb36 	bltu	r16,r2,200168c <vid_scroll_string+0x360>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20013a0:	008080f4 	movhi	r2,515
 20013a4:	10884704 	addi	r2,r2,8476
 20013a8:	10800017 	ldw	r2,0(r2)
    scroll->ticks_at_last_move = alt_nticks();
 20013ac:	1007883a 	mov	r3,r2
 20013b0:	e0bffe17 	ldw	r2,-8(fp)
 20013b4:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
 20013b8:	e0bffe17 	ldw	r2,-8(fp)
 20013bc:	10800a03 	ldbu	r2,40(r2)
 20013c0:	10803fcc 	andi	r2,r2,255
 20013c4:	1080201c 	xori	r2,r2,128
 20013c8:	10bfe004 	addi	r2,r2,-128
 20013cc:	1000061e 	bne	r2,zero,20013e8 <vid_scroll_string+0xbc>
      scroll->text_scroll_index = 0;
 20013d0:	e0bffe17 	ldw	r2,-8(fp)
 20013d4:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
 20013d8:	e0bffe17 	ldw	r2,-8(fp)
 20013dc:	00c00044 	movi	r3,1
 20013e0:	10c00a05 	stb	r3,40(r2)
 20013e4:	00000e06 	br	2001420 <vid_scroll_string+0xf4>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
 20013e8:	e0bffe17 	ldw	r2,-8(fp)
 20013ec:	10c00917 	ldw	r3,36(r2)
 20013f0:	e0bffe17 	ldw	r2,-8(fp)
 20013f4:	10800d17 	ldw	r2,52(r2)
 20013f8:	18800316 	blt	r3,r2,2001408 <vid_scroll_string+0xdc>
      scroll->text_scroll_started = 0;
 20013fc:	e0bffe17 	ldw	r2,-8(fp)
 2001400:	10000a05 	stb	zero,40(r2)
 2001404:	00000606 	br	2001420 <vid_scroll_string+0xf4>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
 2001408:	e0bffe17 	ldw	r2,-8(fp)
 200140c:	10c00917 	ldw	r3,36(r2)
 2001410:	e0bff807 	ldb	r2,-32(fp)
 2001414:	1887883a 	add	r3,r3,r2
 2001418:	e0bffe17 	ldw	r2,-8(fp)
 200141c:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
 2001420:	e0bffe17 	ldw	r2,-8(fp)
 2001424:	10c00917 	ldw	r3,36(r2)
 2001428:	e0bffe17 	ldw	r2,-8(fp)
 200142c:	10800b17 	ldw	r2,44(r2)
 2001430:	18800a0e 	bge	r3,r2,200145c <vid_scroll_string+0x130>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
 2001434:	e0bffe17 	ldw	r2,-8(fp)
 2001438:	10c00017 	ldw	r3,0(r2)
 200143c:	e0bffe17 	ldw	r2,-8(fp)
 2001440:	10800b17 	ldw	r2,44(r2)
 2001444:	1887883a 	add	r3,r3,r2
 2001448:	e0bffe17 	ldw	r2,-8(fp)
 200144c:	10800917 	ldw	r2,36(r2)
 2001450:	1885c83a 	sub	r2,r3,r2
 2001454:	e0bff315 	stw	r2,-52(fp)
 2001458:	00000306 	br	2001468 <vid_scroll_string+0x13c>
    } else {
      x_start = scroll->hbegin;
 200145c:	e0bffe17 	ldw	r2,-8(fp)
 2001460:	10800017 	ldw	r2,0(r2)
 2001464:	e0bff315 	stw	r2,-52(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
 2001468:	e0bffe17 	ldw	r2,-8(fp)
 200146c:	10800e17 	ldw	r2,56(r2)
 2001470:	e0fffe17 	ldw	r3,-8(fp)
 2001474:	18c00917 	ldw	r3,36(r3)
 2001478:	1880040e 	bge	r3,r2,200148c <vid_scroll_string+0x160>
      x_end = scroll->hend;
 200147c:	e0bffe17 	ldw	r2,-8(fp)
 2001480:	10800217 	ldw	r2,8(r2)
 2001484:	e0bff415 	stw	r2,-48(fp)
 2001488:	00000906 	br	20014b0 <vid_scroll_string+0x184>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
 200148c:	e0bffe17 	ldw	r2,-8(fp)
 2001490:	10c00217 	ldw	r3,8(r2)
 2001494:	e0bffe17 	ldw	r2,-8(fp)
 2001498:	10800917 	ldw	r2,36(r2)
 200149c:	1887c83a 	sub	r3,r3,r2
 20014a0:	e0bffe17 	ldw	r2,-8(fp)
 20014a4:	10800e17 	ldw	r2,56(r2)
 20014a8:	1885883a 	add	r2,r3,r2
 20014ac:	e0bff415 	stw	r2,-48(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 20014b0:	e0bff317 	ldw	r2,-52(fp)
 20014b4:	e0bff515 	stw	r2,-44(fp)
 20014b8:	00006006 	br	200163c <vid_scroll_string+0x310>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
 20014bc:	e0bffe17 	ldw	r2,-8(fp)
 20014c0:	10c00917 	ldw	r3,36(r2)
 20014c4:	e0bffe17 	ldw	r2,-8(fp)
 20014c8:	10800b17 	ldw	r2,44(r2)
 20014cc:	1880050e 	bge	r3,r2,20014e4 <vid_scroll_string+0x1b8>
        string_x_index = (x_index - x_start);
 20014d0:	e0fff517 	ldw	r3,-44(fp)
 20014d4:	e0bff317 	ldw	r2,-52(fp)
 20014d8:	1885c83a 	sub	r2,r3,r2
 20014dc:	e0bff615 	stw	r2,-40(fp)
 20014e0:	00000a06 	br	200150c <vid_scroll_string+0x1e0>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
 20014e4:	e0bffe17 	ldw	r2,-8(fp)
 20014e8:	10c00917 	ldw	r3,36(r2)
 20014ec:	e0bffe17 	ldw	r2,-8(fp)
 20014f0:	10800b17 	ldw	r2,44(r2)
 20014f4:	1887c83a 	sub	r3,r3,r2
 20014f8:	e0bff517 	ldw	r2,-44(fp)
 20014fc:	1887883a 	add	r3,r3,r2
 2001500:	e0bff317 	ldw	r2,-52(fp)
 2001504:	1885c83a 	sub	r2,r3,r2
 2001508:	e0bff615 	stw	r2,-40(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
 200150c:	e0bff617 	ldw	r2,-40(fp)
 2001510:	1000010e 	bge	r2,zero,2001518 <vid_scroll_string+0x1ec>
 2001514:	108001c4 	addi	r2,r2,7
 2001518:	1005d0fa 	srai	r2,r2,3
 200151c:	e0bff915 	stw	r2,-28(fp)
      character = scroll->string[string_char_index];
 2001520:	e0bffe17 	ldw	r2,-8(fp)
 2001524:	10c00517 	ldw	r3,20(r2)
 2001528:	e0bff917 	ldw	r2,-28(fp)
 200152c:	1885883a 	add	r2,r3,r2
 2001530:	10800003 	ldbu	r2,0(r2)
 2001534:	e0bffa05 	stb	r2,-24(fp)
      char_column = (string_x_index % 8);
 2001538:	e0fff617 	ldw	r3,-40(fp)
 200153c:	00a00034 	movhi	r2,32768
 2001540:	108001c4 	addi	r2,r2,7
 2001544:	1884703a 	and	r2,r3,r2
 2001548:	1000040e 	bge	r2,zero,200155c <vid_scroll_string+0x230>
 200154c:	10bfffc4 	addi	r2,r2,-1
 2001550:	00fffe04 	movi	r3,-8
 2001554:	10c4b03a 	or	r2,r2,r3
 2001558:	10800044 	addi	r2,r2,1
 200155c:	e0bffb15 	stw	r2,-20(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
 2001560:	00c02004 	movi	r3,128
 2001564:	e0bffb17 	ldw	r2,-20(fp)
 2001568:	1884d83a 	srl	r2,r3,r2
 200156c:	e0bffc05 	stb	r2,-16(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
 2001570:	e0bffe17 	ldw	r2,-8(fp)
 2001574:	10c00617 	ldw	r3,24(r2)
 2001578:	e0bffa07 	ldb	r2,-24(fp)
 200157c:	108002e4 	muli	r2,r2,11
 2001580:	10bfa804 	addi	r2,r2,-352
 2001584:	1885883a 	add	r2,r3,r2
 2001588:	e0bffd15 	stw	r2,-12(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 200158c:	e03ff715 	stw	zero,-36(fp)
 2001590:	00002406 	br	2001624 <vid_scroll_string+0x2f8>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
 2001594:	e0bff717 	ldw	r2,-36(fp)
 2001598:	e0fffd17 	ldw	r3,-12(fp)
 200159c:	1885883a 	add	r2,r3,r2
 20015a0:	10c00003 	ldbu	r3,0(r2)
 20015a4:	e0bffc03 	ldbu	r2,-16(fp)
 20015a8:	1884703a 	and	r2,r3,r2
 20015ac:	10803fcc 	andi	r2,r2,255
 20015b0:	1080201c 	xori	r2,r2,128
 20015b4:	10bfe004 	addi	r2,r2,-128
 20015b8:	10000c26 	beq	r2,zero,20015ec <vid_scroll_string+0x2c0>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
 20015bc:	e0bffe17 	ldw	r2,-8(fp)
 20015c0:	10c00117 	ldw	r3,4(r2)
 20015c4:	e0bff717 	ldw	r2,-36(fp)
 20015c8:	1887883a 	add	r3,r3,r2
 20015cc:	e0bffe17 	ldw	r2,-8(fp)
 20015d0:	10800317 	ldw	r2,12(r2)
 20015d4:	e13ff517 	ldw	r4,-44(fp)
 20015d8:	180b883a 	mov	r5,r3
 20015dc:	100d883a 	mov	r6,r2
 20015e0:	e1ffff17 	ldw	r7,-4(fp)
 20015e4:	2001b100 	call	2001b10 <vid_set_pixel>
 20015e8:	00000b06 	br	2001618 <vid_scroll_string+0x2ec>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
 20015ec:	e0bffe17 	ldw	r2,-8(fp)
 20015f0:	10c00117 	ldw	r3,4(r2)
 20015f4:	e0bff717 	ldw	r2,-36(fp)
 20015f8:	1887883a 	add	r3,r3,r2
 20015fc:	e0bffe17 	ldw	r2,-8(fp)
 2001600:	10800417 	ldw	r2,16(r2)
 2001604:	e13ff517 	ldw	r4,-44(fp)
 2001608:	180b883a 	mov	r5,r3
 200160c:	100d883a 	mov	r6,r2
 2001610:	e1ffff17 	ldw	r7,-4(fp)
 2001614:	2001b100 	call	2001b10 <vid_set_pixel>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 2001618:	e0bff717 	ldw	r2,-36(fp)
 200161c:	10800044 	addi	r2,r2,1
 2001620:	e0bff715 	stw	r2,-36(fp)
 2001624:	e0bff717 	ldw	r2,-36(fp)
 2001628:	108002d0 	cmplti	r2,r2,11
 200162c:	103fd91e 	bne	r2,zero,2001594 <vid_scroll_string+0x268>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 2001630:	e0bff517 	ldw	r2,-44(fp)
 2001634:	10800044 	addi	r2,r2,1
 2001638:	e0bff515 	stw	r2,-44(fp)
 200163c:	e0fff517 	ldw	r3,-44(fp)
 2001640:	e0bff417 	ldw	r2,-48(fp)
 2001644:	18bf9d16 	blt	r3,r2,20014bc <vid_scroll_string+0x190>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
 2001648:	e0bffe17 	ldw	r2,-8(fp)
 200164c:	10c00117 	ldw	r3,4(r2)
 2001650:	e0bffe17 	ldw	r2,-8(fp)
 2001654:	10800117 	ldw	r2,4(r2)
 2001658:	10800284 	addi	r2,r2,10
 200165c:	e13ffe17 	ldw	r4,-8(fp)
 2001660:	21000417 	ldw	r4,16(r4)
 2001664:	01400044 	movi	r5,1
 2001668:	d9400015 	stw	r5,0(sp)
 200166c:	d9000115 	stw	r4,4(sp)
 2001670:	e13fff17 	ldw	r4,-4(fp)
 2001674:	d9000215 	stw	r4,8(sp)
 2001678:	e13ff417 	ldw	r4,-48(fp)
 200167c:	180b883a 	mov	r5,r3
 2001680:	e1bff417 	ldw	r6,-48(fp)
 2001684:	100f883a 	mov	r7,r2
 2001688:	20010cc0 	call	20010cc <vid_draw_line>
    // Log what time we moved the scroll.
  }
  return(0);
 200168c:	0005883a 	mov	r2,zero
}
 2001690:	e037883a 	mov	sp,fp
 2001694:	dfc00317 	ldw	ra,12(sp)
 2001698:	df000217 	ldw	fp,8(sp)
 200169c:	dc400117 	ldw	r17,4(sp)
 20016a0:	dc000017 	ldw	r16,0(sp)
 20016a4:	dec00404 	addi	sp,sp,16
 20016a8:	f800283a 	ret

020016ac <vid_move_block>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
 20016ac:	defff504 	addi	sp,sp,-44
 20016b0:	dfc00a15 	stw	ra,40(sp)
 20016b4:	df000915 	stw	fp,36(sp)
 20016b8:	df000904 	addi	fp,sp,36
 20016bc:	e13ffc15 	stw	r4,-16(fp)
 20016c0:	e17ffd15 	stw	r5,-12(fp)
 20016c4:	e1bffe15 	stw	r6,-8(fp)
 20016c8:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
 20016cc:	e0800217 	ldw	r2,8(fp)
 20016d0:	00803716 	blt	zero,r2,20017b0 <vid_move_block+0x104>
 20016d4:	e0800317 	ldw	r2,12(fp)
 20016d8:	00803516 	blt	zero,r2,20017b0 <vid_move_block+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 20016dc:	e0bffd17 	ldw	r2,-12(fp)
 20016e0:	e0bff815 	stw	r2,-32(fp)
 20016e4:	00002f06 	br	20017a4 <vid_move_block+0xf8>
      write_y = read_y + y_distance;
 20016e8:	e0fff817 	ldw	r3,-32(fp)
 20016ec:	e0800317 	ldw	r2,12(fp)
 20016f0:	1885883a 	add	r2,r3,r2
 20016f4:	e0bff915 	stw	r2,-28(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
 20016f8:	e0bffc17 	ldw	r2,-16(fp)
 20016fc:	e0bff715 	stw	r2,-36(fp)
 2001700:	00002206 	br	200178c <vid_move_block+0xe0>
        write_x = read_x + x_distance;
 2001704:	e0fff717 	ldw	r3,-36(fp)
 2001708:	e0800217 	ldw	r2,8(fp)
 200170c:	1885883a 	add	r2,r3,r2
 2001710:	e0bffa15 	stw	r2,-24(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
 2001714:	e13ff717 	ldw	r4,-36(fp)
 2001718:	e17ff817 	ldw	r5,-32(fp)
 200171c:	e1800517 	ldw	r6,20(fp)
 2001720:	2001bac0 	call	2001bac <vid_get_pixel>
 2001724:	e0bffb0d 	sth	r2,-20(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
 2001728:	e0bffb0f 	ldh	r2,-20(fp)
 200172c:	e13ffa17 	ldw	r4,-24(fp)
 2001730:	e17ff917 	ldw	r5,-28(fp)
 2001734:	100d883a 	mov	r6,r2
 2001738:	e1c00517 	ldw	r7,20(fp)
 200173c:	2001b100 	call	2001b10 <vid_set_pixel>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
 2001740:	e0fffe17 	ldw	r3,-8(fp)
 2001744:	e0800217 	ldw	r2,8(fp)
 2001748:	1885883a 	add	r2,r3,r2
 200174c:	e0fff717 	ldw	r3,-36(fp)
 2001750:	1880050e 	bge	r3,r2,2001768 <vid_move_block+0xbc>
 2001754:	e0ffff17 	ldw	r3,-4(fp)
 2001758:	e0800317 	ldw	r2,12(fp)
 200175c:	1885883a 	add	r2,r3,r2
 2001760:	e0fff817 	ldw	r3,-32(fp)
 2001764:	18800616 	blt	r3,r2,2001780 <vid_move_block+0xd4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
 2001768:	e0800417 	ldw	r2,16(fp)
 200176c:	e13ff717 	ldw	r4,-36(fp)
 2001770:	e17ff817 	ldw	r5,-32(fp)
 2001774:	100d883a 	mov	r6,r2
 2001778:	e1c00517 	ldw	r7,20(fp)
 200177c:	2001b100 	call	2001b10 <vid_set_pixel>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
 2001780:	e0bff717 	ldw	r2,-36(fp)
 2001784:	10800044 	addi	r2,r2,1
 2001788:	e0bff715 	stw	r2,-36(fp)
 200178c:	e0fff717 	ldw	r3,-36(fp)
 2001790:	e0bffe17 	ldw	r2,-8(fp)
 2001794:	18bfdb16 	blt	r3,r2,2001704 <vid_move_block+0x58>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 2001798:	e0bff817 	ldw	r2,-32(fp)
 200179c:	10800044 	addi	r2,r2,1
 20017a0:	e0bff815 	stw	r2,-32(fp)
 20017a4:	e0fff817 	ldw	r3,-32(fp)
 20017a8:	e0bfff17 	ldw	r2,-4(fp)
 20017ac:	18bfce16 	blt	r3,r2,20016e8 <vid_move_block+0x3c>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
 20017b0:	0005883a 	mov	r2,zero
}
 20017b4:	e037883a 	mov	sp,fp
 20017b8:	dfc00117 	ldw	ra,4(sp)
 20017bc:	df000017 	ldw	fp,0(sp)
 20017c0:	dec00204 	addi	sp,sp,8
 20017c4:	f800283a 	ret

020017c8 <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
 20017c8:	defff604 	addi	sp,sp,-40
 20017cc:	dfc00915 	stw	ra,36(sp)
 20017d0:	df000815 	stw	fp,32(sp)
 20017d4:	df000804 	addi	fp,sp,32
 20017d8:	e13ffc15 	stw	r4,-16(fp)
 20017dc:	e17ffd15 	stw	r5,-12(fp)
 20017e0:	e1bffe15 	stw	r6,-8(fp)
 20017e4:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 20017e8:	e03ffa15 	stw	zero,-24(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 20017ec:	e0bffc17 	ldw	r2,-16(fp)
 20017f0:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 20017f4:	00002806 	br	2001898 <vid_print_string+0xd0>
    //Handle newline char here.
    if (string[i] == '\n') {
 20017f8:	e0bffa17 	ldw	r2,-24(fp)
 20017fc:	e0c00317 	ldw	r3,12(fp)
 2001800:	1885883a 	add	r2,r3,r2
 2001804:	10800003 	ldbu	r2,0(r2)
 2001808:	10803fcc 	andi	r2,r2,255
 200180c:	1080201c 	xori	r2,r2,128
 2001810:	10bfe004 	addi	r2,r2,-128
 2001814:	10800298 	cmpnei	r2,r2,10
 2001818:	1000091e 	bne	r2,zero,2001840 <vid_print_string+0x78>
      horiz_offset = original_horiz_offset;
 200181c:	e0bffb17 	ldw	r2,-20(fp)
 2001820:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
 2001824:	e0bffd17 	ldw	r2,-12(fp)
 2001828:	10800304 	addi	r2,r2,12
 200182c:	e0bffd15 	stw	r2,-12(fp)
      i++;
 2001830:	e0bffa17 	ldw	r2,-24(fp)
 2001834:	10800044 	addi	r2,r2,1
 2001838:	e0bffa15 	stw	r2,-24(fp)
      continue;
 200183c:	00001606 	br	2001898 <vid_print_string+0xd0>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
 2001840:	e0bffa17 	ldw	r2,-24(fp)
 2001844:	e0c00317 	ldw	r3,12(fp)
 2001848:	1885883a 	add	r2,r3,r2
 200184c:	10800003 	ldbu	r2,0(r2)
 2001850:	10803fcc 	andi	r2,r2,255
 2001854:	1080201c 	xori	r2,r2,128
 2001858:	10bfe004 	addi	r2,r2,-128
 200185c:	e0ffff17 	ldw	r3,-4(fp)
 2001860:	d8c00015 	stw	r3,0(sp)
 2001864:	e0c00217 	ldw	r3,8(fp)
 2001868:	d8c00115 	stw	r3,4(sp)
 200186c:	e13ffc17 	ldw	r4,-16(fp)
 2001870:	e17ffd17 	ldw	r5,-12(fp)
 2001874:	e1bffe17 	ldw	r6,-8(fp)
 2001878:	100f883a 	mov	r7,r2
 200187c:	2001a200 	call	2001a20 <vid_print_char>
    i++;
 2001880:	e0bffa17 	ldw	r2,-24(fp)
 2001884:	10800044 	addi	r2,r2,1
 2001888:	e0bffa15 	stw	r2,-24(fp)
    horiz_offset += 8;
 200188c:	e0bffc17 	ldw	r2,-16(fp)
 2001890:	10800204 	addi	r2,r2,8
 2001894:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 2001898:	e0bffa17 	ldw	r2,-24(fp)
 200189c:	e0c00317 	ldw	r3,12(fp)
 20018a0:	1885883a 	add	r2,r3,r2
 20018a4:	10800003 	ldbu	r2,0(r2)
 20018a8:	10803fcc 	andi	r2,r2,255
 20018ac:	1080201c 	xori	r2,r2,128
 20018b0:	10bfe004 	addi	r2,r2,-128
 20018b4:	103fd01e 	bne	r2,zero,20017f8 <vid_print_string+0x30>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
 20018b8:	0005883a 	mov	r2,zero
}
 20018bc:	e037883a 	mov	sp,fp
 20018c0:	dfc00117 	ldw	ra,4(sp)
 20018c4:	df000017 	ldw	fp,0(sp)
 20018c8:	dec00204 	addi	sp,sp,8
 20018cc:	f800283a 	ret

020018d0 <vid_draw_box>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
 20018d0:	defff704 	addi	sp,sp,-36
 20018d4:	dfc00815 	stw	ra,32(sp)
 20018d8:	df000715 	stw	fp,28(sp)
 20018dc:	df000704 	addi	fp,sp,28
 20018e0:	e13ffc15 	stw	r4,-16(fp)
 20018e4:	e17ffd15 	stw	r5,-12(fp)
 20018e8:	e1bffe15 	stw	r6,-8(fp)
 20018ec:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
 20018f0:	e0800317 	ldw	r2,12(fp)
 20018f4:	10000a26 	beq	r2,zero,2001920 <vid_draw_box+0x50>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
 20018f8:	e0800217 	ldw	r2,8(fp)
 20018fc:	d8800015 	stw	r2,0(sp)
 2001900:	e0800417 	ldw	r2,16(fp)
 2001904:	d8800115 	stw	r2,4(sp)
 2001908:	e13ffc17 	ldw	r4,-16(fp)
 200190c:	e17ffd17 	ldw	r5,-12(fp)
 2001910:	e1bffe17 	ldw	r6,-8(fp)
 2001914:	e1ffff17 	ldw	r7,-4(fp)
 2001918:	2001be80 	call	2001be8 <vid_paint_block>
 200191c:	00003a06 	br	2001a08 <vid_draw_box+0x138>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
 2001920:	e0bfff17 	ldw	r2,-4(fp)
 2001924:	10bfffc4 	addi	r2,r2,-1
 2001928:	00c00044 	movi	r3,1
 200192c:	d8c00015 	stw	r3,0(sp)
 2001930:	e0c00217 	ldw	r3,8(fp)
 2001934:	d8c00115 	stw	r3,4(sp)
 2001938:	e0c00417 	ldw	r3,16(fp)
 200193c:	d8c00215 	stw	r3,8(sp)
 2001940:	e13ffc17 	ldw	r4,-16(fp)
 2001944:	e17ffd17 	ldw	r5,-12(fp)
 2001948:	e1bffc17 	ldw	r6,-16(fp)
 200194c:	100f883a 	mov	r7,r2
 2001950:	20010cc0 	call	20010cc <vid_draw_line>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
 2001954:	e0bffe17 	ldw	r2,-8(fp)
 2001958:	113fffc4 	addi	r4,r2,-1
 200195c:	e0bffe17 	ldw	r2,-8(fp)
 2001960:	10ffffc4 	addi	r3,r2,-1
 2001964:	e0bfff17 	ldw	r2,-4(fp)
 2001968:	10bfffc4 	addi	r2,r2,-1
 200196c:	01400044 	movi	r5,1
 2001970:	d9400015 	stw	r5,0(sp)
 2001974:	e1400217 	ldw	r5,8(fp)
 2001978:	d9400115 	stw	r5,4(sp)
 200197c:	e1400417 	ldw	r5,16(fp)
 2001980:	d9400215 	stw	r5,8(sp)
 2001984:	e17ffd17 	ldw	r5,-12(fp)
 2001988:	180d883a 	mov	r6,r3
 200198c:	100f883a 	mov	r7,r2
 2001990:	20010cc0 	call	20010cc <vid_draw_line>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
 2001994:	e0bffe17 	ldw	r2,-8(fp)
 2001998:	10bfffc4 	addi	r2,r2,-1
 200199c:	00c00044 	movi	r3,1
 20019a0:	d8c00015 	stw	r3,0(sp)
 20019a4:	e0c00217 	ldw	r3,8(fp)
 20019a8:	d8c00115 	stw	r3,4(sp)
 20019ac:	e0c00417 	ldw	r3,16(fp)
 20019b0:	d8c00215 	stw	r3,8(sp)
 20019b4:	e13ffc17 	ldw	r4,-16(fp)
 20019b8:	e17ffd17 	ldw	r5,-12(fp)
 20019bc:	100d883a 	mov	r6,r2
 20019c0:	e1fffd17 	ldw	r7,-12(fp)
 20019c4:	20010cc0 	call	20010cc <vid_draw_line>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
 20019c8:	e0bfff17 	ldw	r2,-4(fp)
 20019cc:	117fffc4 	addi	r5,r2,-1
 20019d0:	e0bffe17 	ldw	r2,-8(fp)
 20019d4:	10ffffc4 	addi	r3,r2,-1
 20019d8:	e0bfff17 	ldw	r2,-4(fp)
 20019dc:	10bfffc4 	addi	r2,r2,-1
 20019e0:	01000044 	movi	r4,1
 20019e4:	d9000015 	stw	r4,0(sp)
 20019e8:	e1000217 	ldw	r4,8(fp)
 20019ec:	d9000115 	stw	r4,4(sp)
 20019f0:	e1000417 	ldw	r4,16(fp)
 20019f4:	d9000215 	stw	r4,8(sp)
 20019f8:	e13ffc17 	ldw	r4,-16(fp)
 20019fc:	180d883a 	mov	r6,r3
 2001a00:	100f883a 	mov	r7,r2
 2001a04:	20010cc0 	call	20010cc <vid_draw_line>
  }

  return (0);
 2001a08:	0005883a 	mov	r2,zero
}
 2001a0c:	e037883a 	mov	sp,fp
 2001a10:	dfc00117 	ldw	ra,4(sp)
 2001a14:	df000017 	ldw	fp,0(sp)
 2001a18:	dec00204 	addi	sp,sp,8
 2001a1c:	f800283a 	ret

02001a20 <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
 2001a20:	defff704 	addi	sp,sp,-36
 2001a24:	dfc00815 	stw	ra,32(sp)
 2001a28:	df000715 	stw	fp,28(sp)
 2001a2c:	df000704 	addi	fp,sp,28
 2001a30:	e13ffc15 	stw	r4,-16(fp)
 2001a34:	e17ffd15 	stw	r5,-12(fp)
 2001a38:	e1bffe15 	stw	r6,-8(fp)
 2001a3c:	3805883a 	mov	r2,r7
 2001a40:	e0bfff05 	stb	r2,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
 2001a44:	e0bfff03 	ldbu	r2,-4(fp)
 2001a48:	10bff804 	addi	r2,r2,-32
 2001a4c:	e0bffb05 	stb	r2,-20(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 2001a50:	e03ff915 	stw	zero,-28(fp)
 2001a54:	00002506 	br	2001aec <vid_print_char+0xcc>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
 2001a58:	e0bffb07 	ldb	r2,-20(fp)
 2001a5c:	108002e4 	muli	r2,r2,11
 2001a60:	1007883a 	mov	r3,r2
 2001a64:	e0bff917 	ldw	r2,-28(fp)
 2001a68:	1885883a 	add	r2,r3,r2
 2001a6c:	e0c00217 	ldw	r3,8(fp)
 2001a70:	1885883a 	add	r2,r3,r2
 2001a74:	10800003 	ldbu	r2,0(r2)
 2001a78:	e0bffb45 	stb	r2,-19(fp)
    for (j = 0; j < 8; j++) {
 2001a7c:	e03ffa15 	stw	zero,-24(fp)
 2001a80:	00001406 	br	2001ad4 <vid_print_char+0xb4>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
 2001a84:	e0fffb47 	ldb	r3,-19(fp)
 2001a88:	01002004 	movi	r4,128
 2001a8c:	e0bffa17 	ldw	r2,-24(fp)
 2001a90:	2085d83a 	sra	r2,r4,r2
 2001a94:	1884703a 	and	r2,r3,r2
 2001a98:	10000b26 	beq	r2,zero,2001ac8 <vid_print_char+0xa8>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
 2001a9c:	e0fffc17 	ldw	r3,-16(fp)
 2001aa0:	e0bffa17 	ldw	r2,-24(fp)
 2001aa4:	1889883a 	add	r4,r3,r2
 2001aa8:	e0fffd17 	ldw	r3,-12(fp)
 2001aac:	e0bff917 	ldw	r2,-28(fp)
 2001ab0:	1887883a 	add	r3,r3,r2
 2001ab4:	e0bffe17 	ldw	r2,-8(fp)
 2001ab8:	180b883a 	mov	r5,r3
 2001abc:	100d883a 	mov	r6,r2
 2001ac0:	e1c00317 	ldw	r7,12(fp)
 2001ac4:	2001b100 	call	2001b10 <vid_set_pixel>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
 2001ac8:	e0bffa17 	ldw	r2,-24(fp)
 2001acc:	10800044 	addi	r2,r2,1
 2001ad0:	e0bffa15 	stw	r2,-24(fp)
 2001ad4:	e0bffa17 	ldw	r2,-24(fp)
 2001ad8:	10800210 	cmplti	r2,r2,8
 2001adc:	103fe91e 	bne	r2,zero,2001a84 <vid_print_char+0x64>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 2001ae0:	e0bff917 	ldw	r2,-28(fp)
 2001ae4:	10800044 	addi	r2,r2,1
 2001ae8:	e0bff915 	stw	r2,-28(fp)
 2001aec:	e0bff917 	ldw	r2,-28(fp)
 2001af0:	108002d0 	cmplti	r2,r2,11
 2001af4:	103fd81e 	bne	r2,zero,2001a58 <vid_print_char+0x38>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
 2001af8:	0005883a 	mov	r2,zero
}
 2001afc:	e037883a 	mov	sp,fp
 2001b00:	dfc00117 	ldw	ra,4(sp)
 2001b04:	df000017 	ldw	fp,0(sp)
 2001b08:	dec00204 	addi	sp,sp,8
 2001b0c:	f800283a 	ret

02001b10 <vid_set_pixel>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
 2001b10:	defff904 	addi	sp,sp,-28
 2001b14:	dfc00615 	stw	ra,24(sp)
 2001b18:	df000515 	stw	fp,20(sp)
 2001b1c:	df000504 	addi	fp,sp,20
 2001b20:	e13ffc15 	stw	r4,-16(fp)
 2001b24:	e17ffd15 	stw	r5,-12(fp)
 2001b28:	e1bffe15 	stw	r6,-8(fp)
 2001b2c:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	alt_u16 color16;


	// encode to RGB  5 6 5
	color16 = (color & 0xFF) >> 3; // blue
 2001b30:	e0bffe17 	ldw	r2,-8(fp)
 2001b34:	10803fcc 	andi	r2,r2,255
 2001b38:	1004d0fa 	srli	r2,r2,3
 2001b3c:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xFC00) >> 5; // green
 2001b40:	e0bffe17 	ldw	r2,-8(fp)
 2001b44:	10bf000c 	andi	r2,r2,64512
 2001b48:	1004d17a 	srli	r2,r2,5
 2001b4c:	1007883a 	mov	r3,r2
 2001b50:	e0bffb0b 	ldhu	r2,-20(fp)
 2001b54:	1884b03a 	or	r2,r3,r2
 2001b58:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xF80000) >> 8; // blue
 2001b5c:	e0bffe17 	ldw	r2,-8(fp)
 2001b60:	10803e2c 	andhi	r2,r2,248
 2001b64:	1004d23a 	srli	r2,r2,8
 2001b68:	1007883a 	mov	r3,r2
 2001b6c:	e0bffb0b 	ldhu	r2,-20(fp)
 2001b70:	1884b03a 	or	r2,r3,r2
 2001b74:	e0bffb0d 	sth	r2,-20(fp)
	LCD_DrawPoint(horiz, vert, color16);
 2001b78:	e0bffc17 	ldw	r2,-16(fp)
 2001b7c:	113fffcc 	andi	r4,r2,65535
 2001b80:	e0bffd17 	ldw	r2,-12(fp)
 2001b84:	10ffffcc 	andi	r3,r2,65535
 2001b88:	e0bffb0b 	ldhu	r2,-20(fp)
 2001b8c:	180b883a 	mov	r5,r3
 2001b90:	100d883a 	mov	r6,r2
 2001b94:	200077c0 	call	200077c <LCD_DrawPoint>
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}
#endif

}
 2001b98:	e037883a 	mov	sp,fp
 2001b9c:	dfc00117 	ldw	ra,4(sp)
 2001ba0:	df000017 	ldw	fp,0(sp)
 2001ba4:	dec00204 	addi	sp,sp,8
 2001ba8:	f800283a 	ret

02001bac <vid_get_pixel>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
 2001bac:	defffb04 	addi	sp,sp,-20
 2001bb0:	dfc00415 	stw	ra,16(sp)
 2001bb4:	df000315 	stw	fp,12(sp)
 2001bb8:	df000304 	addi	fp,sp,12
 2001bbc:	e13ffd15 	stw	r4,-12(fp)
 2001bc0:	e17ffe15 	stw	r5,-8(fp)
 2001bc4:	e1bfff15 	stw	r6,-4(fp)
#ifdef LT24
	printf("vid_get_pixel is not implemented\r\n");
 2001bc8:	010080f4 	movhi	r4,515
 2001bcc:	2138e704 	addi	r4,r4,-7268
 2001bd0:	20093400 	call	2009340 <puts>
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  return(IORD_16DIRECT(addr, 0));
#endif
}
 2001bd4:	e037883a 	mov	sp,fp
 2001bd8:	dfc00117 	ldw	ra,4(sp)
 2001bdc:	df000017 	ldw	fp,0(sp)
 2001be0:	dec00204 	addi	sp,sp,8
 2001be4:	f800283a 	ret

02001be8 <vid_paint_block>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
 2001be8:	defff804 	addi	sp,sp,-32
 2001bec:	dfc00715 	stw	ra,28(sp)
 2001bf0:	df000615 	stw	fp,24(sp)
 2001bf4:	df000604 	addi	fp,sp,24
 2001bf8:	e13ffc15 	stw	r4,-16(fp)
 2001bfc:	e17ffd15 	stw	r5,-12(fp)
 2001c00:	e1bffe15 	stw	r6,-8(fp)
 2001c04:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
 2001c08:	e0bffd17 	ldw	r2,-12(fp)
 2001c0c:	e0bffb15 	stw	r2,-20(fp)
 2001c10:	00001206 	br	2001c5c <vid_paint_block+0x74>
		for(x=Hstart;x<Hend;x++){
 2001c14:	e0bffc17 	ldw	r2,-16(fp)
 2001c18:	e0bffa15 	stw	r2,-24(fp)
 2001c1c:	00000906 	br	2001c44 <vid_paint_block+0x5c>
			vid_set_pixel(x, y, color, display);
 2001c20:	e0800217 	ldw	r2,8(fp)
 2001c24:	e13ffa17 	ldw	r4,-24(fp)
 2001c28:	e17ffb17 	ldw	r5,-20(fp)
 2001c2c:	100d883a 	mov	r6,r2
 2001c30:	e1c00317 	ldw	r7,12(fp)
 2001c34:	2001b100 	call	2001b10 <vid_set_pixel>
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
		for(x=Hstart;x<Hend;x++){
 2001c38:	e0bffa17 	ldw	r2,-24(fp)
 2001c3c:	10800044 	addi	r2,r2,1
 2001c40:	e0bffa15 	stw	r2,-24(fp)
 2001c44:	e0fffa17 	ldw	r3,-24(fp)
 2001c48:	e0bffe17 	ldw	r2,-8(fp)
 2001c4c:	18bff416 	blt	r3,r2,2001c20 <vid_paint_block+0x38>
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
 2001c50:	e0bffb17 	ldw	r2,-20(fp)
 2001c54:	10800044 	addi	r2,r2,1
 2001c58:	e0bffb15 	stw	r2,-20(fp)
 2001c5c:	e0fffb17 	ldw	r3,-20(fp)
 2001c60:	e0bfff17 	ldw	r2,-4(fp)
 2001c64:	18bfeb16 	blt	r3,r2,2001c14 <vid_paint_block+0x2c>
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
#endif
}
 2001c68:	e037883a 	mov	sp,fp
 2001c6c:	dfc00117 	ldw	ra,4(sp)
 2001c70:	df000017 	ldw	fp,0(sp)
 2001c74:	dec00204 	addi	sp,sp,8
 2001c78:	f800283a 	ret

02001c7c <vid_draw_horiz_line>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
 2001c7c:	defff904 	addi	sp,sp,-28
 2001c80:	dfc00615 	stw	ra,24(sp)
 2001c84:	df000515 	stw	fp,20(sp)
 2001c88:	df000504 	addi	fp,sp,20
 2001c8c:	2007883a 	mov	r3,r4
 2001c90:	2805883a 	mov	r2,r5
 2001c94:	e1bffe15 	stw	r6,-8(fp)
 2001c98:	e1ffff15 	stw	r7,-4(fp)
 2001c9c:	e0fffc0d 	sth	r3,-16(fp)
 2001ca0:	e0bffd0d 	sth	r2,-12(fp)
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
 2001ca4:	e0bffc0f 	ldh	r2,-16(fp)
 2001ca8:	e0bffb15 	stw	r2,-20(fp)
 2001cac:	00000906 	br	2001cd4 <vid_draw_horiz_line+0x58>
		vid_set_pixel(x, V, color, display);
 2001cb0:	e0bfff17 	ldw	r2,-4(fp)
 2001cb4:	e13ffb17 	ldw	r4,-20(fp)
 2001cb8:	e17ffe17 	ldw	r5,-8(fp)
 2001cbc:	100d883a 	mov	r6,r2
 2001cc0:	e1c00217 	ldw	r7,8(fp)
 2001cc4:	2001b100 	call	2001b10 <vid_set_pixel>
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
 2001cc8:	e0bffb17 	ldw	r2,-20(fp)
 2001ccc:	10800044 	addi	r2,r2,1
 2001cd0:	e0bffb15 	stw	r2,-20(fp)
 2001cd4:	e0bffd0f 	ldh	r2,-12(fp)
 2001cd8:	e0fffb17 	ldw	r3,-20(fp)
 2001cdc:	18bff416 	blt	r3,r2,2001cb0 <vid_draw_horiz_line+0x34>
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
  }
  free(fast_buffer);
#endif

}
 2001ce0:	e037883a 	mov	sp,fp
 2001ce4:	dfc00117 	ldw	ra,4(sp)
 2001ce8:	df000017 	ldw	fp,0(sp)
 2001cec:	dec00204 	addi	sp,sp,8
 2001cf0:	f800283a 	ret

02001cf4 <vid_merge_colors>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
 2001cf4:	defffc04 	addi	sp,sp,-16
 2001cf8:	df000315 	stw	fp,12(sp)
 2001cfc:	df000304 	addi	fp,sp,12
 2001d00:	e13ffd15 	stw	r4,-12(fp)
 2001d04:	e17ffe15 	stw	r5,-8(fp)
 2001d08:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
 2001d0c:	e0bffe17 	ldw	r2,-8(fp)
 2001d10:	1085883a 	add	r2,r2,r2
 2001d14:	10800054 	ori	r2,r2,1
 2001d18:	1006917a 	slli	r3,r2,5
 2001d1c:	e0bfff17 	ldw	r2,-4(fp)
 2001d20:	1886b03a 	or	r3,r3,r2
 2001d24:	e0bffd17 	ldw	r2,-12(fp)
 2001d28:	100492fa 	slli	r2,r2,11
 2001d2c:	1884b03a 	or	r2,r3,r2
}
 2001d30:	e037883a 	mov	sp,fp
 2001d34:	df000017 	ldw	fp,0(sp)
 2001d38:	dec00104 	addi	sp,sp,4
 2001d3c:	f800283a 	ret

02001d40 <vid_color_convert24_16>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
 2001d40:	defffc04 	addi	sp,sp,-16
 2001d44:	df000315 	stw	fp,12(sp)
 2001d48:	df000304 	addi	fp,sp,12
 2001d4c:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
 2001d50:	e0bfff17 	ldw	r2,-4(fp)
 2001d54:	10800003 	ldbu	r2,0(r2)
 2001d58:	1007883a 	mov	r3,r2
 2001d5c:	00bffe04 	movi	r2,-8
 2001d60:	1884703a 	and	r2,r3,r2
 2001d64:	e0bffd05 	stb	r2,-12(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
 2001d68:	e0bfff17 	ldw	r2,-4(fp)
 2001d6c:	10800044 	addi	r2,r2,1
 2001d70:	10800003 	ldbu	r2,0(r2)
 2001d74:	1007883a 	mov	r3,r2
 2001d78:	00bfff04 	movi	r2,-4
 2001d7c:	1884703a 	and	r2,r3,r2
 2001d80:	e0bffd45 	stb	r2,-11(fp)
	blue = *(color24 + 2) & 0xF8;
 2001d84:	e0bfff17 	ldw	r2,-4(fp)
 2001d88:	10800084 	addi	r2,r2,2
 2001d8c:	10800003 	ldbu	r2,0(r2)
 2001d90:	1007883a 	mov	r3,r2
 2001d94:	00bffe04 	movi	r2,-8
 2001d98:	1884703a 	and	r2,r3,r2
 2001d9c:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
 2001da0:	e0bffd83 	ldbu	r2,-10(fp)
 2001da4:	1004d0fa 	srli	r2,r2,3
 2001da8:	10c03fcc 	andi	r3,r2,255
 2001dac:	e0bffd43 	ldbu	r2,-11(fp)
 2001db0:	100490fa 	slli	r2,r2,3
 2001db4:	1884b03a 	or	r2,r3,r2
 2001db8:	1007883a 	mov	r3,r2
 2001dbc:	e0bffd03 	ldbu	r2,-12(fp)
 2001dc0:	1004923a 	slli	r2,r2,8
 2001dc4:	1884b03a 	or	r2,r3,r2
 2001dc8:	e0bffe0d 	sth	r2,-8(fp)
	return output;
 2001dcc:	e0bffe0b 	ldhu	r2,-8(fp)
}
 2001dd0:	e037883a 	mov	sp,fp
 2001dd4:	df000017 	ldw	fp,0(sp)
 2001dd8:	dec00104 	addi	sp,sp,4
 2001ddc:	f800283a 	ret

02001de0 <vid_color_convert16_24>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
 2001de0:	defffd04 	addi	sp,sp,-12
 2001de4:	df000215 	stw	fp,8(sp)
 2001de8:	df000204 	addi	fp,sp,8
 2001dec:	2005883a 	mov	r2,r4
 2001df0:	e17fff15 	stw	r5,-4(fp)
 2001df4:	e0bffe0d 	sth	r2,-8(fp)
	*(color24 + 0) = color16 >> 11;
 2001df8:	e0bffe0b 	ldhu	r2,-8(fp)
 2001dfc:	1004d2fa 	srli	r2,r2,11
 2001e00:	1007883a 	mov	r3,r2
 2001e04:	e0bfff17 	ldw	r2,-4(fp)
 2001e08:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
 2001e0c:	e0bfff17 	ldw	r2,-4(fp)
 2001e10:	10800044 	addi	r2,r2,1
 2001e14:	e0fffe0b 	ldhu	r3,-8(fp)
 2001e18:	18c00f8c 	andi	r3,r3,62
 2001e1c:	1807d17a 	srai	r3,r3,5
 2001e20:	10c00005 	stb	r3,0(r2)
	*(color24 + 2) = (color16 & 0x1F);
 2001e24:	e0bfff17 	ldw	r2,-4(fp)
 2001e28:	10800084 	addi	r2,r2,2
 2001e2c:	e0fffe0b 	ldhu	r3,-8(fp)
 2001e30:	18c007cc 	andi	r3,r3,31
 2001e34:	10c00005 	stb	r3,0(r2)
	
	return (0);
 2001e38:	0005883a 	mov	r2,zero
}
 2001e3c:	e037883a 	mov	sp,fp
 2001e40:	df000017 	ldw	fp,0(sp)
 2001e44:	dec00104 	addi	sp,sp,4
 2001e48:	f800283a 	ret

02001e4c <vid_copy_line_to_frame_buffer>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
 2001e4c:	defffa04 	addi	sp,sp,-24
 2001e50:	dfc00515 	stw	ra,20(sp)
 2001e54:	df000415 	stw	fp,16(sp)
 2001e58:	df000404 	addi	fp,sp,16
 2001e5c:	e13ffc15 	stw	r4,-16(fp)
 2001e60:	e17ffd15 	stw	r5,-12(fp)
 2001e64:	e1bffe15 	stw	r6,-8(fp)
 2001e68:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("vid_copy_line_to_frame_buffer is not implemented!\r\n");
 2001e6c:	010080f4 	movhi	r4,515
 2001e70:	2138f004 	addi	r4,r4,-7232
 2001e74:	20093400 	call	2009340 <puts>
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
    }
  }
  return(0);
#endif
}
 2001e78:	e037883a 	mov	sp,fp
 2001e7c:	dfc00117 	ldw	ra,4(sp)
 2001e80:	df000017 	ldw	fp,0(sp)
 2001e84:	dec00204 	addi	sp,sp,8
 2001e88:	f800283a 	ret

02001e8c <vid_draw_sloped_line>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
 2001e8c:	deffef04 	addi	sp,sp,-68
 2001e90:	dfc01015 	stw	ra,64(sp)
 2001e94:	df000f15 	stw	fp,60(sp)
 2001e98:	df000f04 	addi	fp,sp,60
 2001e9c:	2011883a 	mov	r8,r4
 2001ea0:	2809883a 	mov	r4,r5
 2001ea4:	3007883a 	mov	r3,r6
 2001ea8:	3805883a 	mov	r2,r7
 2001eac:	e1400217 	ldw	r5,8(fp)
 2001eb0:	e23ffb0d 	sth	r8,-20(fp)
 2001eb4:	e13ffc0d 	sth	r4,-16(fp)
 2001eb8:	e0fffd0d 	sth	r3,-12(fp)
 2001ebc:	e0bffe0d 	sth	r2,-8(fp)
 2001ec0:	e17fff0d 	sth	r5,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
 2001ec4:	e0fffd0b 	ldhu	r3,-12(fp)
 2001ec8:	e0bffb0b 	ldhu	r2,-20(fp)
 2001ecc:	1885c83a 	sub	r2,r3,r2
 2001ed0:	1000010e 	bge	r2,zero,2001ed8 <vid_draw_sloped_line+0x4c>
 2001ed4:	0085c83a 	sub	r2,zero,r2
 2001ed8:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
 2001edc:	e0fffe0b 	ldhu	r3,-8(fp)
 2001ee0:	e0bffc0b 	ldhu	r2,-16(fp)
 2001ee4:	1885c83a 	sub	r2,r3,r2
 2001ee8:	1000010e 	bge	r2,zero,2001ef0 <vid_draw_sloped_line+0x64>
 2001eec:	0085c83a 	sub	r2,zero,r2
 2001ef0:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
 2001ef4:	e0bffb0b 	ldhu	r2,-20(fp)
 2001ef8:	e0fffd0b 	ldhu	r3,-12(fp)
 2001efc:	1880032e 	bgeu	r3,r2,2001f0c <vid_draw_sloped_line+0x80>
 2001f00:	00bfffc4 	movi	r2,-1
 2001f04:	e0bff315 	stw	r2,-52(fp)
 2001f08:	00000206 	br	2001f14 <vid_draw_sloped_line+0x88>
 2001f0c:	00800044 	movi	r2,1
 2001f10:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
 2001f14:	e0bffc0b 	ldhu	r2,-16(fp)
 2001f18:	e0fffe0b 	ldhu	r3,-8(fp)
 2001f1c:	1880032e 	bgeu	r3,r2,2001f2c <vid_draw_sloped_line+0xa0>
 2001f20:	00bfffc4 	movi	r2,-1
 2001f24:	e0bff415 	stw	r2,-48(fp)
 2001f28:	00000206 	br	2001f34 <vid_draw_sloped_line+0xa8>
 2001f2c:	00800044 	movi	r2,1
 2001f30:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
 2001f34:	e0fff117 	ldw	r3,-60(fp)
 2001f38:	e0bff217 	ldw	r2,-56(fp)
 2001f3c:	18803416 	blt	r3,r2,2002010 <vid_draw_sloped_line+0x184>
    int dPr   = vert_delta<<1;
 2001f40:	e0bff217 	ldw	r2,-56(fp)
 2001f44:	1085883a 	add	r2,r2,r2
 2001f48:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
 2001f4c:	e0bff117 	ldw	r2,-60(fp)
 2001f50:	1085883a 	add	r2,r2,r2
 2001f54:	e0fff717 	ldw	r3,-36(fp)
 2001f58:	1885c83a 	sub	r2,r3,r2
 2001f5c:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
 2001f60:	e0fff717 	ldw	r3,-36(fp)
 2001f64:	e0bff117 	ldw	r2,-60(fp)
 2001f68:	1885c83a 	sub	r2,r3,r2
 2001f6c:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 2001f70:	00002406 	br	2002004 <vid_draw_sloped_line+0x178>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 2001f74:	e13ffb0b 	ldhu	r4,-20(fp)
 2001f78:	e0fffc0b 	ldhu	r3,-16(fp)
 2001f7c:	e0800317 	ldw	r2,12(fp)
 2001f80:	180b883a 	mov	r5,r3
 2001f84:	100d883a 	mov	r6,r2
 2001f88:	e1c00417 	ldw	r7,16(fp)
 2001f8c:	2001b100 	call	2001b10 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
 2001f90:	e0bff517 	ldw	r2,-44(fp)
 2001f94:	00800f0e 	bge	zero,r2,2001fd4 <vid_draw_sloped_line+0x148>
        horiz_start+=horiz_incr;
 2001f98:	e0bff317 	ldw	r2,-52(fp)
 2001f9c:	1007883a 	mov	r3,r2
 2001fa0:	e0bffb0b 	ldhu	r2,-20(fp)
 2001fa4:	1885883a 	add	r2,r3,r2
 2001fa8:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 2001fac:	e0bff417 	ldw	r2,-48(fp)
 2001fb0:	1007883a 	mov	r3,r2
 2001fb4:	e0bffc0b 	ldhu	r2,-16(fp)
 2001fb8:	1885883a 	add	r2,r3,r2
 2001fbc:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 2001fc0:	e0fff517 	ldw	r3,-44(fp)
 2001fc4:	e0bff817 	ldw	r2,-32(fp)
 2001fc8:	1885883a 	add	r2,r3,r2
 2001fcc:	e0bff515 	stw	r2,-44(fp)
 2001fd0:	00000906 	br	2001ff8 <vid_draw_sloped_line+0x16c>
      } else {
        horiz_start+=horiz_incr;
 2001fd4:	e0bff317 	ldw	r2,-52(fp)
 2001fd8:	1007883a 	mov	r3,r2
 2001fdc:	e0bffb0b 	ldhu	r2,-20(fp)
 2001fe0:	1885883a 	add	r2,r3,r2
 2001fe4:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
 2001fe8:	e0fff517 	ldw	r3,-44(fp)
 2001fec:	e0bff717 	ldw	r2,-36(fp)
 2001ff0:	1885883a 	add	r2,r3,r2
 2001ff4:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 2001ff8:	e0bff117 	ldw	r2,-60(fp)
 2001ffc:	10bfffc4 	addi	r2,r2,-1
 2002000:	e0bff115 	stw	r2,-60(fp)
 2002004:	e0bff117 	ldw	r2,-60(fp)
 2002008:	103fda0e 	bge	r2,zero,2001f74 <vid_draw_sloped_line+0xe8>
 200200c:	00003306 	br	20020dc <vid_draw_sloped_line+0x250>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
 2002010:	e0bff117 	ldw	r2,-60(fp)
 2002014:	1085883a 	add	r2,r2,r2
 2002018:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
 200201c:	e0bff217 	ldw	r2,-56(fp)
 2002020:	1085883a 	add	r2,r2,r2
 2002024:	e0fff917 	ldw	r3,-28(fp)
 2002028:	1885c83a 	sub	r2,r3,r2
 200202c:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
 2002030:	e0fff917 	ldw	r3,-28(fp)
 2002034:	e0bff217 	ldw	r2,-56(fp)
 2002038:	1885c83a 	sub	r2,r3,r2
 200203c:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 2002040:	00002406 	br	20020d4 <vid_draw_sloped_line+0x248>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 2002044:	e13ffb0b 	ldhu	r4,-20(fp)
 2002048:	e0fffc0b 	ldhu	r3,-16(fp)
 200204c:	e0800317 	ldw	r2,12(fp)
 2002050:	180b883a 	mov	r5,r3
 2002054:	100d883a 	mov	r6,r2
 2002058:	e1c00417 	ldw	r7,16(fp)
 200205c:	2001b100 	call	2001b10 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
 2002060:	e0bff617 	ldw	r2,-40(fp)
 2002064:	00800f0e 	bge	zero,r2,20020a4 <vid_draw_sloped_line+0x218>
        horiz_start+=horiz_incr;
 2002068:	e0bff317 	ldw	r2,-52(fp)
 200206c:	1007883a 	mov	r3,r2
 2002070:	e0bffb0b 	ldhu	r2,-20(fp)
 2002074:	1885883a 	add	r2,r3,r2
 2002078:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 200207c:	e0bff417 	ldw	r2,-48(fp)
 2002080:	1007883a 	mov	r3,r2
 2002084:	e0bffc0b 	ldhu	r2,-16(fp)
 2002088:	1885883a 	add	r2,r3,r2
 200208c:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 2002090:	e0fff617 	ldw	r3,-40(fp)
 2002094:	e0bffa17 	ldw	r2,-24(fp)
 2002098:	1885883a 	add	r2,r3,r2
 200209c:	e0bff615 	stw	r2,-40(fp)
 20020a0:	00000906 	br	20020c8 <vid_draw_sloped_line+0x23c>
      } else {
        vert_start+=vert_incr;
 20020a4:	e0bff417 	ldw	r2,-48(fp)
 20020a8:	1007883a 	mov	r3,r2
 20020ac:	e0bffc0b 	ldhu	r2,-16(fp)
 20020b0:	1885883a 	add	r2,r3,r2
 20020b4:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
 20020b8:	e0fff617 	ldw	r3,-40(fp)
 20020bc:	e0bff917 	ldw	r2,-28(fp)
 20020c0:	1885883a 	add	r2,r3,r2
 20020c4:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 20020c8:	e0bff217 	ldw	r2,-56(fp)
 20020cc:	10bfffc4 	addi	r2,r2,-1
 20020d0:	e0bff215 	stw	r2,-56(fp)
 20020d4:	e0bff217 	ldw	r2,-56(fp)
 20020d8:	103fda0e 	bge	r2,zero,2002044 <vid_draw_sloped_line+0x1b8>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 20020dc:	e037883a 	mov	sp,fp
 20020e0:	dfc00117 	ldw	ra,4(sp)
 20020e4:	df000017 	ldw	fp,0(sp)
 20020e8:	dec00204 	addi	sp,sp,8
 20020ec:	f800283a 	ret

020020f0 <vid_draw_circle>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
 20020f0:	defff104 	addi	sp,sp,-60
 20020f4:	dfc00e15 	stw	ra,56(sp)
 20020f8:	df000d15 	stw	fp,52(sp)
 20020fc:	df000d04 	addi	fp,sp,52
 2002100:	e13ffb15 	stw	r4,-20(fp)
 2002104:	e17ffc15 	stw	r5,-16(fp)
 2002108:	e1bffd15 	stw	r6,-12(fp)
 200210c:	e1fffe15 	stw	r7,-8(fp)
 2002110:	e0800217 	ldw	r2,8(fp)
 2002114:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
 2002118:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
 200211c:	e0bffd17 	ldw	r2,-12(fp)
 2002120:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
 2002124:	e0bffd17 	ldw	r2,-12(fp)
 2002128:	10bfff24 	muli	r2,r2,-4
 200212c:	10800144 	addi	r2,r2,5
 2002130:	1000010e 	bge	r2,zero,2002138 <vid_draw_circle+0x48>
 2002134:	108000c4 	addi	r2,r2,3
 2002138:	1005d0ba 	srai	r2,r2,2
 200213c:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 2002140:	e0bfff07 	ldb	r2,-4(fp)
 2002144:	d8000015 	stw	zero,0(sp)
 2002148:	d8000115 	stw	zero,4(sp)
 200214c:	e0fffe17 	ldw	r3,-8(fp)
 2002150:	d8c00215 	stw	r3,8(sp)
 2002154:	d8800315 	stw	r2,12(sp)
 2002158:	e0800317 	ldw	r2,12(fp)
 200215c:	d8800415 	stw	r2,16(sp)
 2002160:	e13ffb17 	ldw	r4,-20(fp)
 2002164:	e17ffc17 	ldw	r5,-16(fp)
 2002168:	e1bff817 	ldw	r6,-32(fp)
 200216c:	e1fff917 	ldw	r7,-28(fp)
 2002170:	20025e40 	call	20025e4 <vid_round_corner_points>

  // Now start moving out from those points until the lines meet
  while (x < y) {
 2002174:	00002406 	br	2002208 <vid_draw_circle+0x118>
    x++;
 2002178:	e0bff817 	ldw	r2,-32(fp)
 200217c:	10800044 	addi	r2,r2,1
 2002180:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
 2002184:	e0bffa17 	ldw	r2,-24(fp)
 2002188:	1000070e 	bge	r2,zero,20021a8 <vid_draw_circle+0xb8>
      p += 2*x+1;
 200218c:	e0bff817 	ldw	r2,-32(fp)
 2002190:	1085883a 	add	r2,r2,r2
 2002194:	10800044 	addi	r2,r2,1
 2002198:	e0fffa17 	ldw	r3,-24(fp)
 200219c:	1885883a 	add	r2,r3,r2
 20021a0:	e0bffa15 	stw	r2,-24(fp)
 20021a4:	00000b06 	br	20021d4 <vid_draw_circle+0xe4>
    } else {
      y--;
 20021a8:	e0bff917 	ldw	r2,-28(fp)
 20021ac:	10bfffc4 	addi	r2,r2,-1
 20021b0:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
 20021b4:	e0fff817 	ldw	r3,-32(fp)
 20021b8:	e0bff917 	ldw	r2,-28(fp)
 20021bc:	1885c83a 	sub	r2,r3,r2
 20021c0:	1085883a 	add	r2,r2,r2
 20021c4:	10800044 	addi	r2,r2,1
 20021c8:	e0fffa17 	ldw	r3,-24(fp)
 20021cc:	1885883a 	add	r2,r3,r2
 20021d0:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 20021d4:	e0bfff07 	ldb	r2,-4(fp)
 20021d8:	d8000015 	stw	zero,0(sp)
 20021dc:	d8000115 	stw	zero,4(sp)
 20021e0:	e0fffe17 	ldw	r3,-8(fp)
 20021e4:	d8c00215 	stw	r3,8(sp)
 20021e8:	d8800315 	stw	r2,12(sp)
 20021ec:	e0800317 	ldw	r2,12(fp)
 20021f0:	d8800415 	stw	r2,16(sp)
 20021f4:	e13ffb17 	ldw	r4,-20(fp)
 20021f8:	e17ffc17 	ldw	r5,-16(fp)
 20021fc:	e1bff817 	ldw	r6,-32(fp)
 2002200:	e1fff917 	ldw	r7,-28(fp)
 2002204:	20025e40 	call	20025e4 <vid_round_corner_points>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
 2002208:	e0fff817 	ldw	r3,-32(fp)
 200220c:	e0bff917 	ldw	r2,-28(fp)
 2002210:	18bfd916 	blt	r3,r2,2002178 <vid_draw_circle+0x88>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
 2002214:	0005883a 	mov	r2,zero
}
 2002218:	e037883a 	mov	sp,fp
 200221c:	dfc00117 	ldw	ra,4(sp)
 2002220:	df000017 	ldw	fp,0(sp)
 2002224:	dec00204 	addi	sp,sp,8
 2002228:	f800283a 	ret

0200222c <vid_draw_round_corner_box>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
 200222c:	deffec04 	addi	sp,sp,-80
 2002230:	dfc01315 	stw	ra,76(sp)
 2002234:	df001215 	stw	fp,72(sp)
 2002238:	df001204 	addi	fp,sp,72
 200223c:	e13ffc15 	stw	r4,-16(fp)
 2002240:	e17ffd15 	stw	r5,-12(fp)
 2002244:	e1bffe15 	stw	r6,-8(fp)
 2002248:	e1ffff15 	stw	r7,-4(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
 200224c:	e0bffc17 	ldw	r2,-16(fp)
 2002250:	e0fffe17 	ldw	r3,-8(fp)
 2002254:	1880060e 	bge	r3,r2,2002270 <vid_draw_round_corner_box+0x44>
  {
    temp = horiz_end;
 2002258:	e0bffe17 	ldw	r2,-8(fp)
 200225c:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
 2002260:	e0bffc17 	ldw	r2,-16(fp)
 2002264:	e0bffe15 	stw	r2,-8(fp)
    horiz_start = temp;
 2002268:	e0bff617 	ldw	r2,-40(fp)
 200226c:	e0bffc15 	stw	r2,-16(fp)
  }
  
  if( vert_start > vert_end )
 2002270:	e0bffd17 	ldw	r2,-12(fp)
 2002274:	e0ffff17 	ldw	r3,-4(fp)
 2002278:	1880060e 	bge	r3,r2,2002294 <vid_draw_round_corner_box+0x68>
  {
    temp = vert_end;
 200227c:	e0bfff17 	ldw	r2,-4(fp)
 2002280:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
 2002284:	e0bffd17 	ldw	r2,-12(fp)
 2002288:	e0bfff15 	stw	r2,-4(fp)
    vert_start = temp;
 200228c:	e0bff617 	ldw	r2,-40(fp)
 2002290:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
 2002294:	e0fffe17 	ldw	r3,-8(fp)
 2002298:	e0bffc17 	ldw	r2,-16(fp)
 200229c:	1885c83a 	sub	r2,r3,r2
 20022a0:	e0bff715 	stw	r2,-36(fp)
  height = vert_end - vert_start;
 20022a4:	e0ffff17 	ldw	r3,-4(fp)
 20022a8:	e0bffd17 	ldw	r2,-12(fp)
 20022ac:	1885c83a 	sub	r2,r3,r2
 20022b0:	e0bff815 	stw	r2,-32(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
 20022b4:	e0800217 	ldw	r2,8(fp)
 20022b8:	e0fff717 	ldw	r3,-36(fp)
 20022bc:	1806d07a 	srli	r3,r3,1
 20022c0:	1880032e 	bgeu	r3,r2,20022d0 <vid_draw_round_corner_box+0xa4>
    radius = width / 2;
 20022c4:	e0bff717 	ldw	r2,-36(fp)
 20022c8:	1004d07a 	srli	r2,r2,1
 20022cc:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
 20022d0:	e0800217 	ldw	r2,8(fp)
 20022d4:	e0fff817 	ldw	r3,-32(fp)
 20022d8:	1806d07a 	srli	r3,r3,1
 20022dc:	1880032e 	bgeu	r3,r2,20022ec <vid_draw_round_corner_box+0xc0>
    radius = height / 2;
 20022e0:	e0bff817 	ldw	r2,-32(fp)
 20022e4:	1004d07a 	srli	r2,r2,1
 20022e8:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
 20022ec:	e0800217 	ldw	r2,8(fp)
 20022f0:	1085883a 	add	r2,r2,r2
 20022f4:	e0bff915 	stw	r2,-28(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
 20022f8:	e0bff917 	ldw	r2,-28(fp)
 20022fc:	e0fff717 	ldw	r3,-36(fp)
 2002300:	1885c83a 	sub	r2,r3,r2
 2002304:	e0bffa15 	stw	r2,-24(fp)
  straight_height = height - diameter;
 2002308:	e0bff917 	ldw	r2,-28(fp)
 200230c:	e0fff817 	ldw	r3,-32(fp)
 2002310:	1885c83a 	sub	r2,r3,r2
 2002314:	e0bffb15 	stw	r2,-20(fp)

  x = 0;
 2002318:	e03ff315 	stw	zero,-52(fp)
  y = radius;
 200231c:	e0800217 	ldw	r2,8(fp)
 2002320:	e0bff415 	stw	r2,-48(fp)
  p = (5 - radius*4)/4;
 2002324:	e0800217 	ldw	r2,8(fp)
 2002328:	10bfff24 	muli	r2,r2,-4
 200232c:	10800144 	addi	r2,r2,5
 2002330:	1000010e 	bge	r2,zero,2002338 <vid_draw_round_corner_box+0x10c>
 2002334:	108000c4 	addi	r2,r2,3
 2002338:	1005d0ba 	srai	r2,r2,2
 200233c:	e0bff515 	stw	r2,-44(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 2002340:	e0fffc17 	ldw	r3,-16(fp)
 2002344:	e0800217 	ldw	r2,8(fp)
 2002348:	1889883a 	add	r4,r3,r2
 200234c:	e0fffd17 	ldw	r3,-12(fp)
 2002350:	e0800217 	ldw	r2,8(fp)
 2002354:	188b883a 	add	r5,r3,r2
 2002358:	e0fff317 	ldw	r3,-52(fp)
 200235c:	e0bff417 	ldw	r2,-48(fp)
 2002360:	e23ffa17 	ldw	r8,-24(fp)
 2002364:	e1fffb17 	ldw	r7,-20(fp)
 2002368:	e1800417 	ldw	r6,16(fp)
 200236c:	31803fcc 	andi	r6,r6,255
 2002370:	3180201c 	xori	r6,r6,128
 2002374:	31bfe004 	addi	r6,r6,-128
 2002378:	da000015 	stw	r8,0(sp)
 200237c:	d9c00115 	stw	r7,4(sp)
 2002380:	e1c00317 	ldw	r7,12(fp)
 2002384:	d9c00215 	stw	r7,8(sp)
 2002388:	d9800315 	stw	r6,12(sp)
 200238c:	e1800517 	ldw	r6,20(fp)
 2002390:	d9800415 	stw	r6,16(sp)
 2002394:	180d883a 	mov	r6,r3
 2002398:	100f883a 	mov	r7,r2
 200239c:	20025e40 	call	20025e4 <vid_round_corner_points>
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 20023a0:	00003106 	br	2002468 <vid_draw_round_corner_box+0x23c>
    x++;
 20023a4:	e0bff317 	ldw	r2,-52(fp)
 20023a8:	10800044 	addi	r2,r2,1
 20023ac:	e0bff315 	stw	r2,-52(fp)
    if (p < 0) {
 20023b0:	e0bff517 	ldw	r2,-44(fp)
 20023b4:	1000080e 	bge	r2,zero,20023d8 <vid_draw_round_corner_box+0x1ac>
      p += 2*x+1;
 20023b8:	e0bff317 	ldw	r2,-52(fp)
 20023bc:	1085883a 	add	r2,r2,r2
 20023c0:	1007883a 	mov	r3,r2
 20023c4:	e0bff517 	ldw	r2,-44(fp)
 20023c8:	1885883a 	add	r2,r3,r2
 20023cc:	10800044 	addi	r2,r2,1
 20023d0:	e0bff515 	stw	r2,-44(fp)
 20023d4:	00000c06 	br	2002408 <vid_draw_round_corner_box+0x1dc>
    } else {
      y--;
 20023d8:	e0bff417 	ldw	r2,-48(fp)
 20023dc:	10bfffc4 	addi	r2,r2,-1
 20023e0:	e0bff415 	stw	r2,-48(fp)
      p += 2*(x-y)+1;
 20023e4:	e0fff317 	ldw	r3,-52(fp)
 20023e8:	e0bff417 	ldw	r2,-48(fp)
 20023ec:	1885c83a 	sub	r2,r3,r2
 20023f0:	1085883a 	add	r2,r2,r2
 20023f4:	1007883a 	mov	r3,r2
 20023f8:	e0bff517 	ldw	r2,-44(fp)
 20023fc:	1885883a 	add	r2,r3,r2
 2002400:	10800044 	addi	r2,r2,1
 2002404:	e0bff515 	stw	r2,-44(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 2002408:	e0fffc17 	ldw	r3,-16(fp)
 200240c:	e0800217 	ldw	r2,8(fp)
 2002410:	1889883a 	add	r4,r3,r2
 2002414:	e0fffd17 	ldw	r3,-12(fp)
 2002418:	e0800217 	ldw	r2,8(fp)
 200241c:	188b883a 	add	r5,r3,r2
 2002420:	e0fff317 	ldw	r3,-52(fp)
 2002424:	e0bff417 	ldw	r2,-48(fp)
 2002428:	e23ffa17 	ldw	r8,-24(fp)
 200242c:	e1fffb17 	ldw	r7,-20(fp)
 2002430:	e1800417 	ldw	r6,16(fp)
 2002434:	31803fcc 	andi	r6,r6,255
 2002438:	3180201c 	xori	r6,r6,128
 200243c:	31bfe004 	addi	r6,r6,-128
 2002440:	da000015 	stw	r8,0(sp)
 2002444:	d9c00115 	stw	r7,4(sp)
 2002448:	e1c00317 	ldw	r7,12(fp)
 200244c:	d9c00215 	stw	r7,8(sp)
 2002450:	d9800315 	stw	r6,12(sp)
 2002454:	e1800517 	ldw	r6,20(fp)
 2002458:	d9800415 	stw	r6,16(sp)
 200245c:	180d883a 	mov	r6,r3
 2002460:	100f883a 	mov	r7,r2
 2002464:	20025e40 	call	20025e4 <vid_round_corner_points>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 2002468:	e0fff317 	ldw	r3,-52(fp)
 200246c:	e0bff417 	ldw	r2,-48(fp)
 2002470:	18bfcc36 	bltu	r3,r2,20023a4 <vid_draw_round_corner_box+0x178>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
 2002474:	e0800417 	ldw	r2,16(fp)
 2002478:	10001026 	beq	r2,zero,20024bc <vid_draw_round_corner_box+0x290>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
 200247c:	e0fffd17 	ldw	r3,-12(fp)
 2002480:	e0800217 	ldw	r2,8(fp)
 2002484:	1887883a 	add	r3,r3,r2
 2002488:	e13fff17 	ldw	r4,-4(fp)
 200248c:	e0800217 	ldw	r2,8(fp)
 2002490:	2085c83a 	sub	r2,r4,r2
 2002494:	e1000317 	ldw	r4,12(fp)
 2002498:	d9000015 	stw	r4,0(sp)
 200249c:	e1000517 	ldw	r4,20(fp)
 20024a0:	d9000115 	stw	r4,4(sp)
 20024a4:	e13ffc17 	ldw	r4,-16(fp)
 20024a8:	180b883a 	mov	r5,r3
 20024ac:	e1bffe17 	ldw	r6,-8(fp)
 20024b0:	100f883a 	mov	r7,r2
 20024b4:	2001be80 	call	2001be8 <vid_paint_block>
 20024b8:	00004406 	br	20025cc <vid_draw_round_corner_box+0x3a0>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
 20024bc:	e0fffd17 	ldw	r3,-12(fp)
 20024c0:	e0800217 	ldw	r2,8(fp)
 20024c4:	1887883a 	add	r3,r3,r2
 20024c8:	e13fff17 	ldw	r4,-4(fp)
 20024cc:	e0800217 	ldw	r2,8(fp)
 20024d0:	2085c83a 	sub	r2,r4,r2
 20024d4:	01000044 	movi	r4,1
 20024d8:	d9000015 	stw	r4,0(sp)
 20024dc:	e1000317 	ldw	r4,12(fp)
 20024e0:	d9000115 	stw	r4,4(sp)
 20024e4:	e1000517 	ldw	r4,20(fp)
 20024e8:	d9000215 	stw	r4,8(sp)
 20024ec:	e13ffc17 	ldw	r4,-16(fp)
 20024f0:	180b883a 	mov	r5,r3
 20024f4:	e1bffc17 	ldw	r6,-16(fp)
 20024f8:	100f883a 	mov	r7,r2
 20024fc:	20010cc0 	call	20010cc <vid_draw_line>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
 2002500:	e0fffd17 	ldw	r3,-12(fp)
 2002504:	e0800217 	ldw	r2,8(fp)
 2002508:	1887883a 	add	r3,r3,r2
 200250c:	e13fff17 	ldw	r4,-4(fp)
 2002510:	e0800217 	ldw	r2,8(fp)
 2002514:	2085c83a 	sub	r2,r4,r2
 2002518:	01000044 	movi	r4,1
 200251c:	d9000015 	stw	r4,0(sp)
 2002520:	e1000317 	ldw	r4,12(fp)
 2002524:	d9000115 	stw	r4,4(sp)
 2002528:	e1000517 	ldw	r4,20(fp)
 200252c:	d9000215 	stw	r4,8(sp)
 2002530:	e13ffe17 	ldw	r4,-8(fp)
 2002534:	180b883a 	mov	r5,r3
 2002538:	e1bffe17 	ldw	r6,-8(fp)
 200253c:	100f883a 	mov	r7,r2
 2002540:	20010cc0 	call	20010cc <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
 2002544:	e0fffc17 	ldw	r3,-16(fp)
 2002548:	e0800217 	ldw	r2,8(fp)
 200254c:	1887883a 	add	r3,r3,r2
 2002550:	e13ffe17 	ldw	r4,-8(fp)
 2002554:	e0800217 	ldw	r2,8(fp)
 2002558:	2085c83a 	sub	r2,r4,r2
 200255c:	01000044 	movi	r4,1
 2002560:	d9000015 	stw	r4,0(sp)
 2002564:	e1000317 	ldw	r4,12(fp)
 2002568:	d9000115 	stw	r4,4(sp)
 200256c:	e1000517 	ldw	r4,20(fp)
 2002570:	d9000215 	stw	r4,8(sp)
 2002574:	1809883a 	mov	r4,r3
 2002578:	e17ffd17 	ldw	r5,-12(fp)
 200257c:	100d883a 	mov	r6,r2
 2002580:	e1fffd17 	ldw	r7,-12(fp)
 2002584:	20010cc0 	call	20010cc <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
 2002588:	e0fffc17 	ldw	r3,-16(fp)
 200258c:	e0800217 	ldw	r2,8(fp)
 2002590:	1887883a 	add	r3,r3,r2
 2002594:	e13ffe17 	ldw	r4,-8(fp)
 2002598:	e0800217 	ldw	r2,8(fp)
 200259c:	2085c83a 	sub	r2,r4,r2
 20025a0:	01000044 	movi	r4,1
 20025a4:	d9000015 	stw	r4,0(sp)
 20025a8:	e1000317 	ldw	r4,12(fp)
 20025ac:	d9000115 	stw	r4,4(sp)
 20025b0:	e1000517 	ldw	r4,20(fp)
 20025b4:	d9000215 	stw	r4,8(sp)
 20025b8:	1809883a 	mov	r4,r3
 20025bc:	e17fff17 	ldw	r5,-4(fp)
 20025c0:	100d883a 	mov	r6,r2
 20025c4:	e1ffff17 	ldw	r7,-4(fp)
 20025c8:	20010cc0 	call	20010cc <vid_draw_line>
  }

  return (0);
 20025cc:	0005883a 	mov	r2,zero
}
 20025d0:	e037883a 	mov	sp,fp
 20025d4:	dfc00117 	ldw	ra,4(sp)
 20025d8:	df000017 	ldw	fp,0(sp)
 20025dc:	dec00204 	addi	sp,sp,8
 20025e0:	f800283a 	ret

020025e4 <vid_round_corner_points>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
 20025e4:	defff604 	addi	sp,sp,-40
 20025e8:	dfc00915 	stw	ra,36(sp)
 20025ec:	df000815 	stw	fp,32(sp)
 20025f0:	df000804 	addi	fp,sp,32
 20025f4:	e13ffb15 	stw	r4,-20(fp)
 20025f8:	e17ffc15 	stw	r5,-16(fp)
 20025fc:	e1bffd15 	stw	r6,-12(fp)
 2002600:	e1fffe15 	stw	r7,-8(fp)
 2002604:	e0800517 	ldw	r2,20(fp)
 2002608:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
 200260c:	e0bffd17 	ldw	r2,-12(fp)
 2002610:	1000861e 	bne	r2,zero,200282c <vid_round_corner_points+0x248>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
 2002614:	e0fffc17 	ldw	r3,-16(fp)
 2002618:	e0bffe17 	ldw	r2,-8(fp)
 200261c:	1887883a 	add	r3,r3,r2
 2002620:	e0800317 	ldw	r2,12(fp)
 2002624:	1887883a 	add	r3,r3,r2
 2002628:	e0800417 	ldw	r2,16(fp)
 200262c:	e13ffb17 	ldw	r4,-20(fp)
 2002630:	180b883a 	mov	r5,r3
 2002634:	100d883a 	mov	r6,r2
 2002638:	e1c00617 	ldw	r7,24(fp)
 200263c:	2001b100 	call	2001b10 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
 2002640:	e0fffb17 	ldw	r3,-20(fp)
 2002644:	e0800217 	ldw	r2,8(fp)
 2002648:	1889883a 	add	r4,r3,r2
 200264c:	e0fffc17 	ldw	r3,-16(fp)
 2002650:	e0bffe17 	ldw	r2,-8(fp)
 2002654:	1887883a 	add	r3,r3,r2
 2002658:	e0800317 	ldw	r2,12(fp)
 200265c:	1887883a 	add	r3,r3,r2
 2002660:	e0800417 	ldw	r2,16(fp)
 2002664:	180b883a 	mov	r5,r3
 2002668:	100d883a 	mov	r6,r2
 200266c:	e1c00617 	ldw	r7,24(fp)
 2002670:	2001b100 	call	2001b10 <vid_set_pixel>
        // top
        vid_set_pixel(cx, cy - y, color, display);
 2002674:	e0fffc17 	ldw	r3,-16(fp)
 2002678:	e0bffe17 	ldw	r2,-8(fp)
 200267c:	1887c83a 	sub	r3,r3,r2
 2002680:	e0800417 	ldw	r2,16(fp)
 2002684:	e13ffb17 	ldw	r4,-20(fp)
 2002688:	180b883a 	mov	r5,r3
 200268c:	100d883a 	mov	r6,r2
 2002690:	e1c00617 	ldw	r7,24(fp)
 2002694:	2001b100 	call	2001b10 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
 2002698:	e0fffb17 	ldw	r3,-20(fp)
 200269c:	e0800217 	ldw	r2,8(fp)
 20026a0:	1889883a 	add	r4,r3,r2
 20026a4:	e0fffc17 	ldw	r3,-16(fp)
 20026a8:	e0bffe17 	ldw	r2,-8(fp)
 20026ac:	1887c83a 	sub	r3,r3,r2
 20026b0:	e0800417 	ldw	r2,16(fp)
 20026b4:	180b883a 	mov	r5,r3
 20026b8:	100d883a 	mov	r6,r2
 20026bc:	e1c00617 	ldw	r7,24(fp)
 20026c0:	2001b100 	call	2001b10 <vid_set_pixel>

        if(fill) {
 20026c4:	e0bfff07 	ldb	r2,-4(fp)
 20026c8:	10002b26 	beq	r2,zero,2002778 <vid_round_corner_points+0x194>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
 20026cc:	e0fffb17 	ldw	r3,-20(fp)
 20026d0:	e0bffe17 	ldw	r2,-8(fp)
 20026d4:	1887c83a 	sub	r3,r3,r2
 20026d8:	e13ffb17 	ldw	r4,-20(fp)
 20026dc:	e0bffe17 	ldw	r2,-8(fp)
 20026e0:	2089883a 	add	r4,r4,r2
 20026e4:	e0800217 	ldw	r2,8(fp)
 20026e8:	2085883a 	add	r2,r4,r2
 20026ec:	01000044 	movi	r4,1
 20026f0:	d9000015 	stw	r4,0(sp)
 20026f4:	e1000417 	ldw	r4,16(fp)
 20026f8:	d9000115 	stw	r4,4(sp)
 20026fc:	e1000617 	ldw	r4,24(fp)
 2002700:	d9000215 	stw	r4,8(sp)
 2002704:	1809883a 	mov	r4,r3
 2002708:	e17ffc17 	ldw	r5,-16(fp)
 200270c:	100d883a 	mov	r6,r2
 2002710:	e1fffc17 	ldw	r7,-16(fp)
 2002714:	20010cc0 	call	20010cc <vid_draw_line>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
 2002718:	e0fffb17 	ldw	r3,-20(fp)
 200271c:	e0bffe17 	ldw	r2,-8(fp)
 2002720:	1889c83a 	sub	r4,r3,r2
 2002724:	e0fffc17 	ldw	r3,-16(fp)
 2002728:	e0800317 	ldw	r2,12(fp)
 200272c:	188b883a 	add	r5,r3,r2
 2002730:	e0fffb17 	ldw	r3,-20(fp)
 2002734:	e0bffe17 	ldw	r2,-8(fp)
 2002738:	1887883a 	add	r3,r3,r2
 200273c:	e0800217 	ldw	r2,8(fp)
 2002740:	1887883a 	add	r3,r3,r2
 2002744:	e1bffc17 	ldw	r6,-16(fp)
 2002748:	e0800317 	ldw	r2,12(fp)
 200274c:	3085883a 	add	r2,r6,r2
 2002750:	01800044 	movi	r6,1
 2002754:	d9800015 	stw	r6,0(sp)
 2002758:	e1800417 	ldw	r6,16(fp)
 200275c:	d9800115 	stw	r6,4(sp)
 2002760:	e1800617 	ldw	r6,24(fp)
 2002764:	d9800215 	stw	r6,8(sp)
 2002768:	180d883a 	mov	r6,r3
 200276c:	100f883a 	mov	r7,r2
 2002770:	20010cc0 	call	20010cc <vid_draw_line>
 2002774:	00016c06 	br	2002d28 <vid_round_corner_points+0x744>
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
 2002778:	e0fffb17 	ldw	r3,-20(fp)
 200277c:	e0bffe17 	ldw	r2,-8(fp)
 2002780:	1887883a 	add	r3,r3,r2
 2002784:	e0800217 	ldw	r2,8(fp)
 2002788:	1887883a 	add	r3,r3,r2
 200278c:	e0800417 	ldw	r2,16(fp)
 2002790:	1809883a 	mov	r4,r3
 2002794:	e17ffc17 	ldw	r5,-16(fp)
 2002798:	100d883a 	mov	r6,r2
 200279c:	e1c00617 	ldw	r7,24(fp)
 20027a0:	2001b100 	call	2001b10 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
 20027a4:	e0fffb17 	ldw	r3,-20(fp)
 20027a8:	e0bffe17 	ldw	r2,-8(fp)
 20027ac:	1887883a 	add	r3,r3,r2
 20027b0:	e0800217 	ldw	r2,8(fp)
 20027b4:	1889883a 	add	r4,r3,r2
 20027b8:	e0fffc17 	ldw	r3,-16(fp)
 20027bc:	e0800317 	ldw	r2,12(fp)
 20027c0:	1887883a 	add	r3,r3,r2
 20027c4:	e0800417 	ldw	r2,16(fp)
 20027c8:	180b883a 	mov	r5,r3
 20027cc:	100d883a 	mov	r6,r2
 20027d0:	e1c00617 	ldw	r7,24(fp)
 20027d4:	2001b100 	call	2001b10 <vid_set_pixel>
          //left
          vid_set_pixel(cx - y, cy, color, display);
 20027d8:	e0fffb17 	ldw	r3,-20(fp)
 20027dc:	e0bffe17 	ldw	r2,-8(fp)
 20027e0:	1887c83a 	sub	r3,r3,r2
 20027e4:	e0800417 	ldw	r2,16(fp)
 20027e8:	1809883a 	mov	r4,r3
 20027ec:	e17ffc17 	ldw	r5,-16(fp)
 20027f0:	100d883a 	mov	r6,r2
 20027f4:	e1c00617 	ldw	r7,24(fp)
 20027f8:	2001b100 	call	2001b10 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
 20027fc:	e0fffb17 	ldw	r3,-20(fp)
 2002800:	e0bffe17 	ldw	r2,-8(fp)
 2002804:	1889c83a 	sub	r4,r3,r2
 2002808:	e0fffc17 	ldw	r3,-16(fp)
 200280c:	e0800317 	ldw	r2,12(fp)
 2002810:	1887883a 	add	r3,r3,r2
 2002814:	e0800417 	ldw	r2,16(fp)
 2002818:	180b883a 	mov	r5,r3
 200281c:	100d883a 	mov	r6,r2
 2002820:	e1c00617 	ldw	r7,24(fp)
 2002824:	2001b100 	call	2001b10 <vid_set_pixel>
 2002828:	00013f06 	br	2002d28 <vid_round_corner_points+0x744>
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
 200282c:	e0fffd17 	ldw	r3,-12(fp)
 2002830:	e0bffe17 	ldw	r2,-8(fp)
 2002834:	18806a1e 	bne	r3,r2,20029e0 <vid_round_corner_points+0x3fc>
      if(fill) {
 2002838:	e0bfff07 	ldb	r2,-4(fp)
 200283c:	10003326 	beq	r2,zero,200290c <vid_round_corner_points+0x328>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
 2002840:	e0fffb17 	ldw	r3,-20(fp)
 2002844:	e0bffd17 	ldw	r2,-12(fp)
 2002848:	1889c83a 	sub	r4,r3,r2
 200284c:	e0fffc17 	ldw	r3,-16(fp)
 2002850:	e0bffe17 	ldw	r2,-8(fp)
 2002854:	1887883a 	add	r3,r3,r2
 2002858:	e0800317 	ldw	r2,12(fp)
 200285c:	188b883a 	add	r5,r3,r2
 2002860:	e0fffb17 	ldw	r3,-20(fp)
 2002864:	e0bffd17 	ldw	r2,-12(fp)
 2002868:	1887883a 	add	r3,r3,r2
 200286c:	e0800217 	ldw	r2,8(fp)
 2002870:	1887883a 	add	r3,r3,r2
 2002874:	e1bffc17 	ldw	r6,-16(fp)
 2002878:	e0bffe17 	ldw	r2,-8(fp)
 200287c:	308d883a 	add	r6,r6,r2
 2002880:	e0800317 	ldw	r2,12(fp)
 2002884:	3085883a 	add	r2,r6,r2
 2002888:	01800044 	movi	r6,1
 200288c:	d9800015 	stw	r6,0(sp)
 2002890:	e1800417 	ldw	r6,16(fp)
 2002894:	d9800115 	stw	r6,4(sp)
 2002898:	e1800617 	ldw	r6,24(fp)
 200289c:	d9800215 	stw	r6,8(sp)
 20028a0:	180d883a 	mov	r6,r3
 20028a4:	100f883a 	mov	r7,r2
 20028a8:	20010cc0 	call	20010cc <vid_draw_line>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
 20028ac:	e0fffb17 	ldw	r3,-20(fp)
 20028b0:	e0bffd17 	ldw	r2,-12(fp)
 20028b4:	1889c83a 	sub	r4,r3,r2
 20028b8:	e0fffc17 	ldw	r3,-16(fp)
 20028bc:	e0bffe17 	ldw	r2,-8(fp)
 20028c0:	188bc83a 	sub	r5,r3,r2
 20028c4:	e0fffb17 	ldw	r3,-20(fp)
 20028c8:	e0bffd17 	ldw	r2,-12(fp)
 20028cc:	1887883a 	add	r3,r3,r2
 20028d0:	e0800217 	ldw	r2,8(fp)
 20028d4:	1887883a 	add	r3,r3,r2
 20028d8:	e1bffc17 	ldw	r6,-16(fp)
 20028dc:	e0bffe17 	ldw	r2,-8(fp)
 20028e0:	3085c83a 	sub	r2,r6,r2
 20028e4:	01800044 	movi	r6,1
 20028e8:	d9800015 	stw	r6,0(sp)
 20028ec:	e1800417 	ldw	r6,16(fp)
 20028f0:	d9800115 	stw	r6,4(sp)
 20028f4:	e1800617 	ldw	r6,24(fp)
 20028f8:	d9800215 	stw	r6,8(sp)
 20028fc:	180d883a 	mov	r6,r3
 2002900:	100f883a 	mov	r7,r2
 2002904:	20010cc0 	call	20010cc <vid_draw_line>
 2002908:	00010706 	br	2002d28 <vid_round_corner_points+0x744>
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
 200290c:	e0fffb17 	ldw	r3,-20(fp)
 2002910:	e0bffd17 	ldw	r2,-12(fp)
 2002914:	1887883a 	add	r3,r3,r2
 2002918:	e0800217 	ldw	r2,8(fp)
 200291c:	1889883a 	add	r4,r3,r2
 2002920:	e0fffc17 	ldw	r3,-16(fp)
 2002924:	e0bffe17 	ldw	r2,-8(fp)
 2002928:	1887883a 	add	r3,r3,r2
 200292c:	e0800317 	ldw	r2,12(fp)
 2002930:	1887883a 	add	r3,r3,r2
 2002934:	e0800417 	ldw	r2,16(fp)
 2002938:	180b883a 	mov	r5,r3
 200293c:	100d883a 	mov	r6,r2
 2002940:	e1c00617 	ldw	r7,24(fp)
 2002944:	2001b100 	call	2001b10 <vid_set_pixel>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
 2002948:	e0fffb17 	ldw	r3,-20(fp)
 200294c:	e0bffd17 	ldw	r2,-12(fp)
 2002950:	1889c83a 	sub	r4,r3,r2
 2002954:	e0fffc17 	ldw	r3,-16(fp)
 2002958:	e0bffe17 	ldw	r2,-8(fp)
 200295c:	1887883a 	add	r3,r3,r2
 2002960:	e0800317 	ldw	r2,12(fp)
 2002964:	1887883a 	add	r3,r3,r2
 2002968:	e0800417 	ldw	r2,16(fp)
 200296c:	180b883a 	mov	r5,r3
 2002970:	100d883a 	mov	r6,r2
 2002974:	e1c00617 	ldw	r7,24(fp)
 2002978:	2001b100 	call	2001b10 <vid_set_pixel>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
 200297c:	e0fffb17 	ldw	r3,-20(fp)
 2002980:	e0bffd17 	ldw	r2,-12(fp)
 2002984:	1887883a 	add	r3,r3,r2
 2002988:	e0800217 	ldw	r2,8(fp)
 200298c:	1889883a 	add	r4,r3,r2
 2002990:	e0fffc17 	ldw	r3,-16(fp)
 2002994:	e0bffe17 	ldw	r2,-8(fp)
 2002998:	1887c83a 	sub	r3,r3,r2
 200299c:	e0800417 	ldw	r2,16(fp)
 20029a0:	180b883a 	mov	r5,r3
 20029a4:	100d883a 	mov	r6,r2
 20029a8:	e1c00617 	ldw	r7,24(fp)
 20029ac:	2001b100 	call	2001b10 <vid_set_pixel>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
 20029b0:	e0fffb17 	ldw	r3,-20(fp)
 20029b4:	e0bffd17 	ldw	r2,-12(fp)
 20029b8:	1889c83a 	sub	r4,r3,r2
 20029bc:	e0fffc17 	ldw	r3,-16(fp)
 20029c0:	e0bffe17 	ldw	r2,-8(fp)
 20029c4:	1887c83a 	sub	r3,r3,r2
 20029c8:	e0800417 	ldw	r2,16(fp)
 20029cc:	180b883a 	mov	r5,r3
 20029d0:	100d883a 	mov	r6,r2
 20029d4:	e1c00617 	ldw	r7,24(fp)
 20029d8:	2001b100 	call	2001b10 <vid_set_pixel>
 20029dc:	0000d206 	br	2002d28 <vid_round_corner_points+0x744>
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
 20029e0:	e0fffd17 	ldw	r3,-12(fp)
 20029e4:	e0bffe17 	ldw	r2,-8(fp)
 20029e8:	1880cf0e 	bge	r3,r2,2002d28 <vid_round_corner_points+0x744>
        if(fill) {
 20029ec:	e0bfff07 	ldb	r2,-4(fp)
 20029f0:	10006526 	beq	r2,zero,2002b88 <vid_round_corner_points+0x5a4>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
 20029f4:	e0fffb17 	ldw	r3,-20(fp)
 20029f8:	e0bffd17 	ldw	r2,-12(fp)
 20029fc:	1889c83a 	sub	r4,r3,r2
 2002a00:	e0fffc17 	ldw	r3,-16(fp)
 2002a04:	e0bffe17 	ldw	r2,-8(fp)
 2002a08:	1887883a 	add	r3,r3,r2
 2002a0c:	e0800317 	ldw	r2,12(fp)
 2002a10:	188b883a 	add	r5,r3,r2
 2002a14:	e0fffb17 	ldw	r3,-20(fp)
 2002a18:	e0bffd17 	ldw	r2,-12(fp)
 2002a1c:	1887883a 	add	r3,r3,r2
 2002a20:	e0800217 	ldw	r2,8(fp)
 2002a24:	1887883a 	add	r3,r3,r2
 2002a28:	e1bffc17 	ldw	r6,-16(fp)
 2002a2c:	e0bffe17 	ldw	r2,-8(fp)
 2002a30:	308d883a 	add	r6,r6,r2
 2002a34:	e0800317 	ldw	r2,12(fp)
 2002a38:	3085883a 	add	r2,r6,r2
 2002a3c:	01800044 	movi	r6,1
 2002a40:	d9800015 	stw	r6,0(sp)
 2002a44:	e1800417 	ldw	r6,16(fp)
 2002a48:	d9800115 	stw	r6,4(sp)
 2002a4c:	e1800617 	ldw	r6,24(fp)
 2002a50:	d9800215 	stw	r6,8(sp)
 2002a54:	180d883a 	mov	r6,r3
 2002a58:	100f883a 	mov	r7,r2
 2002a5c:	20010cc0 	call	20010cc <vid_draw_line>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
 2002a60:	e0fffb17 	ldw	r3,-20(fp)
 2002a64:	e0bffe17 	ldw	r2,-8(fp)
 2002a68:	1889c83a 	sub	r4,r3,r2
 2002a6c:	e0fffc17 	ldw	r3,-16(fp)
 2002a70:	e0bffd17 	ldw	r2,-12(fp)
 2002a74:	1887883a 	add	r3,r3,r2
 2002a78:	e0800317 	ldw	r2,12(fp)
 2002a7c:	188b883a 	add	r5,r3,r2
 2002a80:	e0fffb17 	ldw	r3,-20(fp)
 2002a84:	e0bffe17 	ldw	r2,-8(fp)
 2002a88:	1887883a 	add	r3,r3,r2
 2002a8c:	e0800217 	ldw	r2,8(fp)
 2002a90:	1887883a 	add	r3,r3,r2
 2002a94:	e1bffc17 	ldw	r6,-16(fp)
 2002a98:	e0bffd17 	ldw	r2,-12(fp)
 2002a9c:	308d883a 	add	r6,r6,r2
 2002aa0:	e0800317 	ldw	r2,12(fp)
 2002aa4:	3085883a 	add	r2,r6,r2
 2002aa8:	01800044 	movi	r6,1
 2002aac:	d9800015 	stw	r6,0(sp)
 2002ab0:	e1800417 	ldw	r6,16(fp)
 2002ab4:	d9800115 	stw	r6,4(sp)
 2002ab8:	e1800617 	ldw	r6,24(fp)
 2002abc:	d9800215 	stw	r6,8(sp)
 2002ac0:	180d883a 	mov	r6,r3
 2002ac4:	100f883a 	mov	r7,r2
 2002ac8:	20010cc0 	call	20010cc <vid_draw_line>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
 2002acc:	e0fffb17 	ldw	r3,-20(fp)
 2002ad0:	e0bffe17 	ldw	r2,-8(fp)
 2002ad4:	1889c83a 	sub	r4,r3,r2
 2002ad8:	e0fffc17 	ldw	r3,-16(fp)
 2002adc:	e0bffd17 	ldw	r2,-12(fp)
 2002ae0:	188bc83a 	sub	r5,r3,r2
 2002ae4:	e0fffb17 	ldw	r3,-20(fp)
 2002ae8:	e0bffe17 	ldw	r2,-8(fp)
 2002aec:	1887883a 	add	r3,r3,r2
 2002af0:	e0800217 	ldw	r2,8(fp)
 2002af4:	1887883a 	add	r3,r3,r2
 2002af8:	e1bffc17 	ldw	r6,-16(fp)
 2002afc:	e0bffd17 	ldw	r2,-12(fp)
 2002b00:	3085c83a 	sub	r2,r6,r2
 2002b04:	01800044 	movi	r6,1
 2002b08:	d9800015 	stw	r6,0(sp)
 2002b0c:	e1800417 	ldw	r6,16(fp)
 2002b10:	d9800115 	stw	r6,4(sp)
 2002b14:	e1800617 	ldw	r6,24(fp)
 2002b18:	d9800215 	stw	r6,8(sp)
 2002b1c:	180d883a 	mov	r6,r3
 2002b20:	100f883a 	mov	r7,r2
 2002b24:	20010cc0 	call	20010cc <vid_draw_line>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
 2002b28:	e0fffb17 	ldw	r3,-20(fp)
 2002b2c:	e0bffd17 	ldw	r2,-12(fp)
 2002b30:	1889c83a 	sub	r4,r3,r2
 2002b34:	e0fffc17 	ldw	r3,-16(fp)
 2002b38:	e0bffe17 	ldw	r2,-8(fp)
 2002b3c:	188bc83a 	sub	r5,r3,r2
 2002b40:	e0fffb17 	ldw	r3,-20(fp)
 2002b44:	e0bffd17 	ldw	r2,-12(fp)
 2002b48:	1887883a 	add	r3,r3,r2
 2002b4c:	e0800217 	ldw	r2,8(fp)
 2002b50:	1887883a 	add	r3,r3,r2
 2002b54:	e1bffc17 	ldw	r6,-16(fp)
 2002b58:	e0bffe17 	ldw	r2,-8(fp)
 2002b5c:	3085c83a 	sub	r2,r6,r2
 2002b60:	01800044 	movi	r6,1
 2002b64:	d9800015 	stw	r6,0(sp)
 2002b68:	e1800417 	ldw	r6,16(fp)
 2002b6c:	d9800115 	stw	r6,4(sp)
 2002b70:	e1800617 	ldw	r6,24(fp)
 2002b74:	d9800215 	stw	r6,8(sp)
 2002b78:	180d883a 	mov	r6,r3
 2002b7c:	100f883a 	mov	r7,r2
 2002b80:	20010cc0 	call	20010cc <vid_draw_line>
 2002b84:	00006806 	br	2002d28 <vid_round_corner_points+0x744>
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
 2002b88:	e0fffb17 	ldw	r3,-20(fp)
 2002b8c:	e0bffd17 	ldw	r2,-12(fp)
 2002b90:	1887883a 	add	r3,r3,r2
 2002b94:	e0800217 	ldw	r2,8(fp)
 2002b98:	1889883a 	add	r4,r3,r2
 2002b9c:	e0fffc17 	ldw	r3,-16(fp)
 2002ba0:	e0bffe17 	ldw	r2,-8(fp)
 2002ba4:	1887883a 	add	r3,r3,r2
 2002ba8:	e0800317 	ldw	r2,12(fp)
 2002bac:	1887883a 	add	r3,r3,r2
 2002bb0:	e0800417 	ldw	r2,16(fp)
 2002bb4:	180b883a 	mov	r5,r3
 2002bb8:	100d883a 	mov	r6,r2
 2002bbc:	e1c00617 	ldw	r7,24(fp)
 2002bc0:	2001b100 	call	2001b10 <vid_set_pixel>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
 2002bc4:	e0fffb17 	ldw	r3,-20(fp)
 2002bc8:	e0bffd17 	ldw	r2,-12(fp)
 2002bcc:	1889c83a 	sub	r4,r3,r2
 2002bd0:	e0fffc17 	ldw	r3,-16(fp)
 2002bd4:	e0bffe17 	ldw	r2,-8(fp)
 2002bd8:	1887883a 	add	r3,r3,r2
 2002bdc:	e0800317 	ldw	r2,12(fp)
 2002be0:	1887883a 	add	r3,r3,r2
 2002be4:	e0800417 	ldw	r2,16(fp)
 2002be8:	180b883a 	mov	r5,r3
 2002bec:	100d883a 	mov	r6,r2
 2002bf0:	e1c00617 	ldw	r7,24(fp)
 2002bf4:	2001b100 	call	2001b10 <vid_set_pixel>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
 2002bf8:	e0fffb17 	ldw	r3,-20(fp)
 2002bfc:	e0bffd17 	ldw	r2,-12(fp)
 2002c00:	1887883a 	add	r3,r3,r2
 2002c04:	e0800217 	ldw	r2,8(fp)
 2002c08:	1889883a 	add	r4,r3,r2
 2002c0c:	e0fffc17 	ldw	r3,-16(fp)
 2002c10:	e0bffe17 	ldw	r2,-8(fp)
 2002c14:	1887c83a 	sub	r3,r3,r2
 2002c18:	e0800417 	ldw	r2,16(fp)
 2002c1c:	180b883a 	mov	r5,r3
 2002c20:	100d883a 	mov	r6,r2
 2002c24:	e1c00617 	ldw	r7,24(fp)
 2002c28:	2001b100 	call	2001b10 <vid_set_pixel>
          vid_set_pixel(cx - x, cy - y, color, display);
 2002c2c:	e0fffb17 	ldw	r3,-20(fp)
 2002c30:	e0bffd17 	ldw	r2,-12(fp)
 2002c34:	1889c83a 	sub	r4,r3,r2
 2002c38:	e0fffc17 	ldw	r3,-16(fp)
 2002c3c:	e0bffe17 	ldw	r2,-8(fp)
 2002c40:	1887c83a 	sub	r3,r3,r2
 2002c44:	e0800417 	ldw	r2,16(fp)
 2002c48:	180b883a 	mov	r5,r3
 2002c4c:	100d883a 	mov	r6,r2
 2002c50:	e1c00617 	ldw	r7,24(fp)
 2002c54:	2001b100 	call	2001b10 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
 2002c58:	e0fffb17 	ldw	r3,-20(fp)
 2002c5c:	e0bffe17 	ldw	r2,-8(fp)
 2002c60:	1887883a 	add	r3,r3,r2
 2002c64:	e0800217 	ldw	r2,8(fp)
 2002c68:	1889883a 	add	r4,r3,r2
 2002c6c:	e0fffc17 	ldw	r3,-16(fp)
 2002c70:	e0bffd17 	ldw	r2,-12(fp)
 2002c74:	1887883a 	add	r3,r3,r2
 2002c78:	e0800317 	ldw	r2,12(fp)
 2002c7c:	1887883a 	add	r3,r3,r2
 2002c80:	e0800417 	ldw	r2,16(fp)
 2002c84:	180b883a 	mov	r5,r3
 2002c88:	100d883a 	mov	r6,r2
 2002c8c:	e1c00617 	ldw	r7,24(fp)
 2002c90:	2001b100 	call	2001b10 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
 2002c94:	e0fffb17 	ldw	r3,-20(fp)
 2002c98:	e0bffe17 	ldw	r2,-8(fp)
 2002c9c:	1889c83a 	sub	r4,r3,r2
 2002ca0:	e0fffc17 	ldw	r3,-16(fp)
 2002ca4:	e0bffd17 	ldw	r2,-12(fp)
 2002ca8:	1887883a 	add	r3,r3,r2
 2002cac:	e0800317 	ldw	r2,12(fp)
 2002cb0:	1887883a 	add	r3,r3,r2
 2002cb4:	e0800417 	ldw	r2,16(fp)
 2002cb8:	180b883a 	mov	r5,r3
 2002cbc:	100d883a 	mov	r6,r2
 2002cc0:	e1c00617 	ldw	r7,24(fp)
 2002cc4:	2001b100 	call	2001b10 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
 2002cc8:	e0fffb17 	ldw	r3,-20(fp)
 2002ccc:	e0bffe17 	ldw	r2,-8(fp)
 2002cd0:	1887883a 	add	r3,r3,r2
 2002cd4:	e0800217 	ldw	r2,8(fp)
 2002cd8:	1889883a 	add	r4,r3,r2
 2002cdc:	e0fffc17 	ldw	r3,-16(fp)
 2002ce0:	e0bffd17 	ldw	r2,-12(fp)
 2002ce4:	1887c83a 	sub	r3,r3,r2
 2002ce8:	e0800417 	ldw	r2,16(fp)
 2002cec:	180b883a 	mov	r5,r3
 2002cf0:	100d883a 	mov	r6,r2
 2002cf4:	e1c00617 	ldw	r7,24(fp)
 2002cf8:	2001b100 	call	2001b10 <vid_set_pixel>
          vid_set_pixel(cx - y, cy - x, color, display);
 2002cfc:	e0fffb17 	ldw	r3,-20(fp)
 2002d00:	e0bffe17 	ldw	r2,-8(fp)
 2002d04:	1889c83a 	sub	r4,r3,r2
 2002d08:	e0fffc17 	ldw	r3,-16(fp)
 2002d0c:	e0bffd17 	ldw	r2,-12(fp)
 2002d10:	1887c83a 	sub	r3,r3,r2
 2002d14:	e0800417 	ldw	r2,16(fp)
 2002d18:	180b883a 	mov	r5,r3
 2002d1c:	100d883a 	mov	r6,r2
 2002d20:	e1c00617 	ldw	r7,24(fp)
 2002d24:	2001b100 	call	2001b10 <vid_set_pixel>
        }
    }
}
 2002d28:	e037883a 	mov	sp,fp
 2002d2c:	dfc00117 	ldw	ra,4(sp)
 2002d30:	df000017 	ldw	fp,0(sp)
 2002d34:	dec00204 	addi	sp,sp,8
 2002d38:	f800283a 	ret

02002d3c <max3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
__inline__ int max3( int a, int b, int c )
{
 2002d3c:	defffc04 	addi	sp,sp,-16
 2002d40:	df000315 	stw	fp,12(sp)
 2002d44:	df000304 	addi	fp,sp,12
 2002d48:	e13ffd15 	stw	r4,-12(fp)
 2002d4c:	e17ffe15 	stw	r5,-8(fp)
 2002d50:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
 2002d54:	e0fffd17 	ldw	r3,-12(fp)
 2002d58:	e0bffe17 	ldw	r2,-8(fp)
 2002d5c:	1880020e 	bge	r3,r2,2002d68 <max3+0x2c>
    a = b;
 2002d60:	e0bffe17 	ldw	r2,-8(fp)
 2002d64:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
 2002d68:	e0fffd17 	ldw	r3,-12(fp)
 2002d6c:	e0bfff17 	ldw	r2,-4(fp)
 2002d70:	1880020e 	bge	r3,r2,2002d7c <max3+0x40>
    a = c;
 2002d74:	e0bfff17 	ldw	r2,-4(fp)
 2002d78:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 2002d7c:	e0bffd17 	ldw	r2,-12(fp)
}
 2002d80:	e037883a 	mov	sp,fp
 2002d84:	df000017 	ldw	fp,0(sp)
 2002d88:	dec00104 	addi	sp,sp,4
 2002d8c:	f800283a 	ret

02002d90 <min3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
__inline__ int min3( int a, int b, int c )
{
 2002d90:	defffc04 	addi	sp,sp,-16
 2002d94:	df000315 	stw	fp,12(sp)
 2002d98:	df000304 	addi	fp,sp,12
 2002d9c:	e13ffd15 	stw	r4,-12(fp)
 2002da0:	e17ffe15 	stw	r5,-8(fp)
 2002da4:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
 2002da8:	e0bffd17 	ldw	r2,-12(fp)
 2002dac:	e0fffe17 	ldw	r3,-8(fp)
 2002db0:	1880020e 	bge	r3,r2,2002dbc <min3+0x2c>
    a = b;
 2002db4:	e0bffe17 	ldw	r2,-8(fp)
 2002db8:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
 2002dbc:	e0bffd17 	ldw	r2,-12(fp)
 2002dc0:	e0ffff17 	ldw	r3,-4(fp)
 2002dc4:	1880020e 	bge	r3,r2,2002dd0 <min3+0x40>
    a = c;
 2002dc8:	e0bfff17 	ldw	r2,-4(fp)
 2002dcc:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 2002dd0:	e0bffd17 	ldw	r2,-12(fp)
}
 2002dd4:	e037883a 	mov	sp,fp
 2002dd8:	df000017 	ldw	fp,0(sp)
 2002ddc:	dec00104 	addi	sp,sp,4
 2002de0:	f800283a 	ret

02002de4 <max_diff3>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
__inline__ int max_diff3(int a, int b, int c)
{
 2002de4:	defff904 	addi	sp,sp,-28
 2002de8:	dfc00615 	stw	ra,24(sp)
 2002dec:	df000515 	stw	fp,20(sp)
 2002df0:	df000504 	addi	fp,sp,20
 2002df4:	e13ffd15 	stw	r4,-12(fp)
 2002df8:	e17ffe15 	stw	r5,-8(fp)
 2002dfc:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
 2002e00:	e13ffd17 	ldw	r4,-12(fp)
 2002e04:	e17ffe17 	ldw	r5,-8(fp)
 2002e08:	e1bfff17 	ldw	r6,-4(fp)
 2002e0c:	2002d3c0 	call	2002d3c <max3>
 2002e10:	e0bffb15 	stw	r2,-20(fp)
  min = min3( a, b, c );
 2002e14:	e13ffd17 	ldw	r4,-12(fp)
 2002e18:	e17ffe17 	ldw	r5,-8(fp)
 2002e1c:	e1bfff17 	ldw	r6,-4(fp)
 2002e20:	2002d900 	call	2002d90 <min3>
 2002e24:	e0bffc15 	stw	r2,-16(fp)
  return (max - min);
 2002e28:	e0fffb17 	ldw	r3,-20(fp)
 2002e2c:	e0bffc17 	ldw	r2,-16(fp)
 2002e30:	1885c83a 	sub	r2,r3,r2
}
 2002e34:	e037883a 	mov	sp,fp
 2002e38:	dfc00117 	ldw	ra,4(sp)
 2002e3c:	df000017 	ldw	fp,0(sp)
 2002e40:	dec00204 	addi	sp,sp,8
 2002e44:	f800283a 	ret

02002e48 <vid_put_pixel_in_span_map>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
inline void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
 2002e48:	defffc04 	addi	sp,sp,-16
 2002e4c:	df000315 	stw	fp,12(sp)
 2002e50:	df000304 	addi	fp,sp,12
 2002e54:	e13ffd15 	stw	r4,-12(fp)
 2002e58:	e17ffe15 	stw	r5,-8(fp)
 2002e5c:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
 2002e60:	e0bffe17 	ldw	r2,-8(fp)
 2002e64:	100490fa 	slli	r2,r2,3
 2002e68:	e0ffff17 	ldw	r3,-4(fp)
 2002e6c:	1885883a 	add	r2,r3,r2
 2002e70:	10800017 	ldw	r2,0(r2)
 2002e74:	10bfffd8 	cmpnei	r2,r2,-1
 2002e78:	10000e1e 	bne	r2,zero,2002eb4 <vid_put_pixel_in_span_map+0x6c>
  {
    span_array[y*2] = x;
 2002e7c:	e0bffe17 	ldw	r2,-8(fp)
 2002e80:	100490fa 	slli	r2,r2,3
 2002e84:	e0ffff17 	ldw	r3,-4(fp)
 2002e88:	1885883a 	add	r2,r3,r2
 2002e8c:	e0fffd17 	ldw	r3,-12(fp)
 2002e90:	10c00015 	stw	r3,0(r2)
    span_array[(y*2)+1] = x;
 2002e94:	e0bffe17 	ldw	r2,-8(fp)
 2002e98:	100490fa 	slli	r2,r2,3
 2002e9c:	10800104 	addi	r2,r2,4
 2002ea0:	e0ffff17 	ldw	r3,-4(fp)
 2002ea4:	1885883a 	add	r2,r3,r2
 2002ea8:	e0fffd17 	ldw	r3,-12(fp)
 2002eac:	10c00015 	stw	r3,0(r2)
 2002eb0:	00001d06 	br	2002f28 <vid_put_pixel_in_span_map+0xe0>
  }
  else if( span_array[y*2] > x )
 2002eb4:	e0bffe17 	ldw	r2,-8(fp)
 2002eb8:	100490fa 	slli	r2,r2,3
 2002ebc:	e0ffff17 	ldw	r3,-4(fp)
 2002ec0:	1885883a 	add	r2,r3,r2
 2002ec4:	10800017 	ldw	r2,0(r2)
 2002ec8:	e0fffd17 	ldw	r3,-12(fp)
 2002ecc:	1880070e 	bge	r3,r2,2002eec <vid_put_pixel_in_span_map+0xa4>
    span_array[y*2] = x;
 2002ed0:	e0bffe17 	ldw	r2,-8(fp)
 2002ed4:	100490fa 	slli	r2,r2,3
 2002ed8:	e0ffff17 	ldw	r3,-4(fp)
 2002edc:	1885883a 	add	r2,r3,r2
 2002ee0:	e0fffd17 	ldw	r3,-12(fp)
 2002ee4:	10c00015 	stw	r3,0(r2)
 2002ee8:	00000f06 	br	2002f28 <vid_put_pixel_in_span_map+0xe0>
  else if( span_array[(y*2)+1] < x )
 2002eec:	e0bffe17 	ldw	r2,-8(fp)
 2002ef0:	100490fa 	slli	r2,r2,3
 2002ef4:	10800104 	addi	r2,r2,4
 2002ef8:	e0ffff17 	ldw	r3,-4(fp)
 2002efc:	1885883a 	add	r2,r3,r2
 2002f00:	10c00017 	ldw	r3,0(r2)
 2002f04:	e0bffd17 	ldw	r2,-12(fp)
 2002f08:	1880070e 	bge	r3,r2,2002f28 <vid_put_pixel_in_span_map+0xe0>
    span_array[(y*2)+1] = x;
 2002f0c:	e0bffe17 	ldw	r2,-8(fp)
 2002f10:	100490fa 	slli	r2,r2,3
 2002f14:	10800104 	addi	r2,r2,4
 2002f18:	e0ffff17 	ldw	r3,-4(fp)
 2002f1c:	1885883a 	add	r2,r3,r2
 2002f20:	e0fffd17 	ldw	r3,-12(fp)
 2002f24:	10c00015 	stw	r3,0(r2)
}
 2002f28:	e037883a 	mov	sp,fp
 2002f2c:	df000017 	ldw	fp,0(sp)
 2002f30:	dec00104 	addi	sp,sp,4
 2002f34:	f800283a 	ret

02002f38 <vid_bres_scan_edges>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
 2002f38:	deffee04 	addi	sp,sp,-72
 2002f3c:	dfc01115 	stw	ra,68(sp)
 2002f40:	df001015 	stw	fp,64(sp)
 2002f44:	df001004 	addi	fp,sp,64
 2002f48:	e13ffc15 	stw	r4,-16(fp)
 2002f4c:	e17ffd15 	stw	r5,-12(fp)
 2002f50:	e1bffe15 	stw	r6,-8(fp)
 2002f54:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
 2002f58:	e0bffc17 	ldw	r2,-16(fp)
 2002f5c:	e0fffe17 	ldw	r3,-8(fp)
 2002f60:	18800c0e 	bge	r3,r2,2002f94 <vid_bres_scan_edges+0x5c>
  {
    int tempx = x2;
 2002f64:	e0bffe17 	ldw	r2,-8(fp)
 2002f68:	e0bff515 	stw	r2,-44(fp)
    x2 = x1;
 2002f6c:	e0bffc17 	ldw	r2,-16(fp)
 2002f70:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
 2002f74:	e0bff517 	ldw	r2,-44(fp)
 2002f78:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
 2002f7c:	e0bfff17 	ldw	r2,-4(fp)
 2002f80:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
 2002f84:	e0bffd17 	ldw	r2,-12(fp)
 2002f88:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
 2002f8c:	e0bff617 	ldw	r2,-40(fp)
 2002f90:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
 2002f94:	e0fffd17 	ldw	r3,-12(fp)
 2002f98:	e0bfff17 	ldw	r2,-4(fp)
 2002f9c:	1885c83a 	sub	r2,r3,r2
 2002fa0:	1000010e 	bge	r2,zero,2002fa8 <vid_bres_scan_edges+0x70>
 2002fa4:	0085c83a 	sub	r2,zero,r2
 2002fa8:	e0bff115 	stw	r2,-60(fp)
  x_delta = (x2-x1);
 2002fac:	e0fffe17 	ldw	r3,-8(fp)
 2002fb0:	e0bffc17 	ldw	r2,-16(fp)
 2002fb4:	1885c83a 	sub	r2,r3,r2
 2002fb8:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
 2002fbc:	e0bffd17 	ldw	r2,-12(fp)
 2002fc0:	e0ffff17 	ldw	r3,-4(fp)
 2002fc4:	1880030e 	bge	r3,r2,2002fd4 <vid_bres_scan_edges+0x9c>
 2002fc8:	00bfffc4 	movi	r2,-1
 2002fcc:	e0bff015 	stw	r2,-64(fp)
 2002fd0:	00000206 	br	2002fdc <vid_bres_scan_edges+0xa4>
 2002fd4:	00800044 	movi	r2,1
 2002fd8:	e0bff015 	stw	r2,-64(fp)
  x_incr=1;
 2002fdc:	00800044 	movi	r2,1
 2002fe0:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
 2002fe4:	e0fff217 	ldw	r3,-56(fp)
 2002fe8:	e0bff117 	ldw	r2,-60(fp)
 2002fec:	18802e16 	blt	r3,r2,20030a8 <vid_bres_scan_edges+0x170>
    int dPr   = y_delta<<1;
 2002ff0:	e0bff117 	ldw	r2,-60(fp)
 2002ff4:	1085883a 	add	r2,r2,r2
 2002ff8:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (x_delta<<1);
 2002ffc:	e0bff217 	ldw	r2,-56(fp)
 2003000:	1085883a 	add	r2,r2,r2
 2003004:	e0fff817 	ldw	r3,-32(fp)
 2003008:	1885c83a 	sub	r2,r3,r2
 200300c:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - x_delta;
 2003010:	e0fff817 	ldw	r3,-32(fp)
 2003014:	e0bff217 	ldw	r2,-56(fp)
 2003018:	1885c83a 	sub	r2,r3,r2
 200301c:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 2003020:	00001e06 	br	200309c <vid_bres_scan_edges+0x164>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 2003024:	e13ffc17 	ldw	r4,-16(fp)
 2003028:	e17ffd17 	ldw	r5,-12(fp)
 200302c:	e1800217 	ldw	r6,8(fp)
 2003030:	2002e480 	call	2002e48 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 2003034:	e0bff317 	ldw	r2,-52(fp)
 2003038:	00800d0e 	bge	zero,r2,2003070 <vid_bres_scan_edges+0x138>
        x1+=x_incr;
 200303c:	e0fffc17 	ldw	r3,-16(fp)
 2003040:	e0bff717 	ldw	r2,-36(fp)
 2003044:	1885883a 	add	r2,r3,r2
 2003048:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 200304c:	e0fffd17 	ldw	r3,-12(fp)
 2003050:	e0bff017 	ldw	r2,-64(fp)
 2003054:	1885883a 	add	r2,r3,r2
 2003058:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 200305c:	e0fff317 	ldw	r3,-52(fp)
 2003060:	e0bff917 	ldw	r2,-28(fp)
 2003064:	1885883a 	add	r2,r3,r2
 2003068:	e0bff315 	stw	r2,-52(fp)
 200306c:	00000806 	br	2003090 <vid_bres_scan_edges+0x158>
      } else {
        x1+=x_incr;
 2003070:	e0fffc17 	ldw	r3,-16(fp)
 2003074:	e0bff717 	ldw	r2,-36(fp)
 2003078:	1885883a 	add	r2,r3,r2
 200307c:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
 2003080:	e0fff317 	ldw	r3,-52(fp)
 2003084:	e0bff817 	ldw	r2,-32(fp)
 2003088:	1885883a 	add	r2,r3,r2
 200308c:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 2003090:	e0bff217 	ldw	r2,-56(fp)
 2003094:	10bfffc4 	addi	r2,r2,-1
 2003098:	e0bff215 	stw	r2,-56(fp)
 200309c:	e0bff217 	ldw	r2,-56(fp)
 20030a0:	103fe00e 	bge	r2,zero,2003024 <vid_bres_scan_edges+0xec>
 20030a4:	00002d06 	br	200315c <vid_bres_scan_edges+0x224>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
 20030a8:	e0bff217 	ldw	r2,-56(fp)
 20030ac:	1085883a 	add	r2,r2,r2
 20030b0:	e0bffa15 	stw	r2,-24(fp)
    int dPru  = dPr - (y_delta<<1);
 20030b4:	e0bff117 	ldw	r2,-60(fp)
 20030b8:	1085883a 	add	r2,r2,r2
 20030bc:	e0fffa17 	ldw	r3,-24(fp)
 20030c0:	1885c83a 	sub	r2,r3,r2
 20030c4:	e0bffb15 	stw	r2,-20(fp)
    int P     = dPr - y_delta;
 20030c8:	e0fffa17 	ldw	r3,-24(fp)
 20030cc:	e0bff117 	ldw	r2,-60(fp)
 20030d0:	1885c83a 	sub	r2,r3,r2
 20030d4:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 20030d8:	00001e06 	br	2003154 <vid_bres_scan_edges+0x21c>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 20030dc:	e13ffc17 	ldw	r4,-16(fp)
 20030e0:	e17ffd17 	ldw	r5,-12(fp)
 20030e4:	e1800217 	ldw	r6,8(fp)
 20030e8:	2002e480 	call	2002e48 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 20030ec:	e0bff417 	ldw	r2,-48(fp)
 20030f0:	00800d0e 	bge	zero,r2,2003128 <vid_bres_scan_edges+0x1f0>
        x1+=x_incr;
 20030f4:	e0fffc17 	ldw	r3,-16(fp)
 20030f8:	e0bff717 	ldw	r2,-36(fp)
 20030fc:	1885883a 	add	r2,r3,r2
 2003100:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 2003104:	e0fffd17 	ldw	r3,-12(fp)
 2003108:	e0bff017 	ldw	r2,-64(fp)
 200310c:	1885883a 	add	r2,r3,r2
 2003110:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 2003114:	e0fff417 	ldw	r3,-48(fp)
 2003118:	e0bffb17 	ldw	r2,-20(fp)
 200311c:	1885883a 	add	r2,r3,r2
 2003120:	e0bff415 	stw	r2,-48(fp)
 2003124:	00000806 	br	2003148 <vid_bres_scan_edges+0x210>
      } else {
        y1+=y_incr;
 2003128:	e0fffd17 	ldw	r3,-12(fp)
 200312c:	e0bff017 	ldw	r2,-64(fp)
 2003130:	1885883a 	add	r2,r3,r2
 2003134:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
 2003138:	e0fff417 	ldw	r3,-48(fp)
 200313c:	e0bffa17 	ldw	r2,-24(fp)
 2003140:	1885883a 	add	r2,r3,r2
 2003144:	e0bff415 	stw	r2,-48(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 2003148:	e0bff117 	ldw	r2,-60(fp)
 200314c:	10bfffc4 	addi	r2,r2,-1
 2003150:	e0bff115 	stw	r2,-60(fp)
 2003154:	e0bff117 	ldw	r2,-60(fp)
 2003158:	103fe00e 	bge	r2,zero,20030dc <vid_bres_scan_edges+0x1a4>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
 200315c:	e037883a 	mov	sp,fp
 2003160:	dfc00117 	ldw	ra,4(sp)
 2003164:	df000017 	ldw	fp,0(sp)
 2003168:	dec00204 	addi	sp,sp,8
 200316c:	f800283a 	ret

02003170 <vid_draw_triangle>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
 2003170:	defff804 	addi	sp,sp,-32
 2003174:	dfc00715 	stw	ra,28(sp)
 2003178:	df000615 	stw	fp,24(sp)
 200317c:	df000604 	addi	fp,sp,24
 2003180:	e13ffe15 	stw	r4,-8(fp)
 2003184:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 2003188:	e0bffe17 	ldw	r2,-8(fp)
 200318c:	11000017 	ldw	r4,0(r2)
 2003190:	e0bffe17 	ldw	r2,-8(fp)
 2003194:	11400317 	ldw	r5,12(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
 2003198:	e0bffe17 	ldw	r2,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 200319c:	10c00117 	ldw	r3,4(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
 20031a0:	e0bffe17 	ldw	r2,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 20031a4:	10800417 	ldw	r2,16(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
 20031a8:	e1bffe17 	ldw	r6,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 20031ac:	31800a17 	ldw	r6,40(r6)
 20031b0:	01c00044 	movi	r7,1
 20031b4:	d9c00015 	stw	r7,0(sp)
 20031b8:	d9800115 	stw	r6,4(sp)
 20031bc:	e1bfff17 	ldw	r6,-4(fp)
 20031c0:	d9800215 	stw	r6,8(sp)
 20031c4:	180d883a 	mov	r6,r3
 20031c8:	100f883a 	mov	r7,r2
 20031cc:	20010cc0 	call	20010cc <vid_draw_line>
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 20031d0:	e0bffe17 	ldw	r2,-8(fp)
 20031d4:	11000117 	ldw	r4,4(r2)
 20031d8:	e0bffe17 	ldw	r2,-8(fp)
 20031dc:	11400417 	ldw	r5,16(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
 20031e0:	e0bffe17 	ldw	r2,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 20031e4:	10c00217 	ldw	r3,8(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
 20031e8:	e0bffe17 	ldw	r2,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 20031ec:	10800517 	ldw	r2,20(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
 20031f0:	e1bffe17 	ldw	r6,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 20031f4:	31800a17 	ldw	r6,40(r6)
 20031f8:	01c00044 	movi	r7,1
 20031fc:	d9c00015 	stw	r7,0(sp)
 2003200:	d9800115 	stw	r6,4(sp)
 2003204:	e1bfff17 	ldw	r6,-4(fp)
 2003208:	d9800215 	stw	r6,8(sp)
 200320c:	180d883a 	mov	r6,r3
 2003210:	100f883a 	mov	r7,r2
 2003214:	20010cc0 	call	20010cc <vid_draw_line>
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 2003218:	e0bffe17 	ldw	r2,-8(fp)
 200321c:	11000217 	ldw	r4,8(r2)
 2003220:	e0bffe17 	ldw	r2,-8(fp)
 2003224:	11400517 	ldw	r5,20(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
 2003228:	e0bffe17 	ldw	r2,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 200322c:	10c00017 	ldw	r3,0(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
 2003230:	e0bffe17 	ldw	r2,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 2003234:	10800317 	ldw	r2,12(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
 2003238:	e1bffe17 	ldw	r6,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 200323c:	31800a17 	ldw	r6,40(r6)
 2003240:	01c00044 	movi	r7,1
 2003244:	d9c00015 	stw	r7,0(sp)
 2003248:	d9800115 	stw	r6,4(sp)
 200324c:	e1bfff17 	ldw	r6,-4(fp)
 2003250:	d9800215 	stw	r6,8(sp)
 2003254:	180d883a 	mov	r6,r3
 2003258:	100f883a 	mov	r7,r2
 200325c:	20010cc0 	call	20010cc <vid_draw_line>
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
 2003260:	e0bffe17 	ldw	r2,-8(fp)
 2003264:	10800b17 	ldw	r2,44(r2)
 2003268:	10800058 	cmpnei	r2,r2,1
 200326c:	1000a01e 	bne	r2,zero,20034f0 <vid_draw_triangle+0x380>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 2003270:	e0bffe17 	ldw	r2,-8(fp)
 2003274:	11000317 	ldw	r4,12(r2)
 2003278:	e0bffe17 	ldw	r2,-8(fp)
 200327c:	10c00417 	ldw	r3,16(r2)
 2003280:	e0bffe17 	ldw	r2,-8(fp)
 2003284:	10800517 	ldw	r2,20(r2)
 2003288:	180b883a 	mov	r5,r3
 200328c:	100d883a 	mov	r6,r2
 2003290:	2002d900 	call	2002d90 <min3>
 2003294:	e0fffe17 	ldw	r3,-8(fp)
 2003298:	18800815 	stw	r2,32(r3)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 200329c:	e0bffe17 	ldw	r2,-8(fp)
 20032a0:	11000317 	ldw	r4,12(r2)
 20032a4:	e0bffe17 	ldw	r2,-8(fp)
 20032a8:	10c00417 	ldw	r3,16(r2)
 20032ac:	e0bffe17 	ldw	r2,-8(fp)
 20032b0:	10800517 	ldw	r2,20(r2)
 20032b4:	180b883a 	mov	r5,r3
 20032b8:	100d883a 	mov	r6,r2
 20032bc:	2002d3c0 	call	2002d3c <max3>
 20032c0:	e0fffe17 	ldw	r3,-8(fp)
 20032c4:	18800915 	stw	r2,36(r3)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 20032c8:	e0bffe17 	ldw	r2,-8(fp)
 20032cc:	11000317 	ldw	r4,12(r2)
 20032d0:	e0bffe17 	ldw	r2,-8(fp)
 20032d4:	10c00417 	ldw	r3,16(r2)
 20032d8:	e0bffe17 	ldw	r2,-8(fp)
 20032dc:	10800517 	ldw	r2,20(r2)
 20032e0:	180b883a 	mov	r5,r3
 20032e4:	100d883a 	mov	r6,r2
 20032e8:	2002de40 	call	2002de4 <max_diff3>
 20032ec:	e0fffe17 	ldw	r3,-8(fp)
 20032f0:	18800615 	stw	r2,24(r3)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
 20032f4:	e0bffe17 	ldw	r2,-8(fp)
 20032f8:	11000017 	ldw	r4,0(r2)
 20032fc:	e0bffe17 	ldw	r2,-8(fp)
 2003300:	10c00117 	ldw	r3,4(r2)
 2003304:	e0bffe17 	ldw	r2,-8(fp)
 2003308:	10800217 	ldw	r2,8(r2)
 200330c:	180b883a 	mov	r5,r3
 2003310:	100d883a 	mov	r6,r2
 2003314:	2002de40 	call	2002de4 <max_diff3>
 2003318:	e0fffe17 	ldw	r3,-8(fp)
 200331c:	18800715 	stw	r2,28(r3)
    tri->span_array = malloc(display->height * 4 * 2);
 2003320:	e0bfff17 	ldw	r2,-4(fp)
 2003324:	10800217 	ldw	r2,8(r2)
 2003328:	100490fa 	slli	r2,r2,3
 200332c:	1009883a 	mov	r4,r2
 2003330:	20088d40 	call	20088d4 <malloc>
 2003334:	1007883a 	mov	r3,r2
 2003338:	e0bffe17 	ldw	r2,-8(fp)
 200333c:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 2003340:	e0bffe17 	ldw	r2,-8(fp)
 2003344:	10800817 	ldw	r2,32(r2)
 2003348:	e0bffd15 	stw	r2,-12(fp)
 200334c:	00001206 	br	2003398 <vid_draw_triangle+0x228>
    {
      tri->span_array[i*2] = -1;
 2003350:	e0bffe17 	ldw	r2,-8(fp)
 2003354:	10c00d17 	ldw	r3,52(r2)
 2003358:	e0bffd17 	ldw	r2,-12(fp)
 200335c:	100490fa 	slli	r2,r2,3
 2003360:	1885883a 	add	r2,r3,r2
 2003364:	00ffffc4 	movi	r3,-1
 2003368:	10c00015 	stw	r3,0(r2)
      tri->span_array[(i*2) + 1] = -1;
 200336c:	e0bffe17 	ldw	r2,-8(fp)
 2003370:	10c00d17 	ldw	r3,52(r2)
 2003374:	e0bffd17 	ldw	r2,-12(fp)
 2003378:	100490fa 	slli	r2,r2,3
 200337c:	10800104 	addi	r2,r2,4
 2003380:	1885883a 	add	r2,r3,r2
 2003384:	00ffffc4 	movi	r3,-1
 2003388:	10c00015 	stw	r3,0(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 200338c:	e0bffd17 	ldw	r2,-12(fp)
 2003390:	10800044 	addi	r2,r2,1
 2003394:	e0bffd15 	stw	r2,-12(fp)
 2003398:	e0bffe17 	ldw	r2,-8(fp)
 200339c:	10c00917 	ldw	r3,36(r2)
 20033a0:	e0bffd17 	ldw	r2,-12(fp)
 20033a4:	18bfea0e 	bge	r3,r2,2003350 <vid_draw_triangle+0x1e0>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 20033a8:	e0bffe17 	ldw	r2,-8(fp)
 20033ac:	11000017 	ldw	r4,0(r2)
 20033b0:	e0bffe17 	ldw	r2,-8(fp)
 20033b4:	11400317 	ldw	r5,12(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
 20033b8:	e0bffe17 	ldw	r2,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 20033bc:	10c00117 	ldw	r3,4(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
 20033c0:	e0bffe17 	ldw	r2,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 20033c4:	10800417 	ldw	r2,16(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
 20033c8:	e1bffe17 	ldw	r6,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 20033cc:	31800d17 	ldw	r6,52(r6)
 20033d0:	d9800015 	stw	r6,0(sp)
 20033d4:	180d883a 	mov	r6,r3
 20033d8:	100f883a 	mov	r7,r2
 20033dc:	2002f380 	call	2002f38 <vid_bres_scan_edges>
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 20033e0:	e0bffe17 	ldw	r2,-8(fp)
 20033e4:	11000117 	ldw	r4,4(r2)
 20033e8:	e0bffe17 	ldw	r2,-8(fp)
 20033ec:	11400417 	ldw	r5,16(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
 20033f0:	e0bffe17 	ldw	r2,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 20033f4:	10c00217 	ldw	r3,8(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
 20033f8:	e0bffe17 	ldw	r2,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 20033fc:	10800517 	ldw	r2,20(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
 2003400:	e1bffe17 	ldw	r6,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 2003404:	31800d17 	ldw	r6,52(r6)
 2003408:	d9800015 	stw	r6,0(sp)
 200340c:	180d883a 	mov	r6,r3
 2003410:	100f883a 	mov	r7,r2
 2003414:	2002f380 	call	2002f38 <vid_bres_scan_edges>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 2003418:	e0bffe17 	ldw	r2,-8(fp)
 200341c:	11000217 	ldw	r4,8(r2)
 2003420:	e0bffe17 	ldw	r2,-8(fp)
 2003424:	11400517 	ldw	r5,20(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
 2003428:	e0bffe17 	ldw	r2,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 200342c:	10c00017 	ldw	r3,0(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
 2003430:	e0bffe17 	ldw	r2,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 2003434:	10800317 	ldw	r2,12(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
 2003438:	e1bffe17 	ldw	r6,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 200343c:	31800d17 	ldw	r6,52(r6)
 2003440:	d9800015 	stw	r6,0(sp)
 2003444:	180d883a 	mov	r6,r3
 2003448:	100f883a 	mov	r7,r2
 200344c:	2002f380 	call	2002f38 <vid_bres_scan_edges>
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 2003450:	e0bffe17 	ldw	r2,-8(fp)
 2003454:	10800817 	ldw	r2,32(r2)
 2003458:	e0bffd15 	stw	r2,-12(fp)
 200345c:	00001c06 	br	20034d0 <vid_draw_triangle+0x360>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
 2003460:	e0bffe17 	ldw	r2,-8(fp)
 2003464:	10c00d17 	ldw	r3,52(r2)
 2003468:	e0bffd17 	ldw	r2,-12(fp)
 200346c:	100490fa 	slli	r2,r2,3
 2003470:	1885883a 	add	r2,r3,r2
 2003474:	10c00017 	ldw	r3,0(r2)
 2003478:	e0bffe17 	ldw	r2,-8(fp)
 200347c:	11000d17 	ldw	r4,52(r2)
 2003480:	e0bffd17 	ldw	r2,-12(fp)
 2003484:	100490fa 	slli	r2,r2,3
 2003488:	10800104 	addi	r2,r2,4
 200348c:	2085883a 	add	r2,r4,r2
 2003490:	10800017 	ldw	r2,0(r2)
 2003494:	e13ffe17 	ldw	r4,-8(fp)
 2003498:	21000a17 	ldw	r4,40(r4)
 200349c:	01400044 	movi	r5,1
 20034a0:	d9400015 	stw	r5,0(sp)
 20034a4:	d9000115 	stw	r4,4(sp)
 20034a8:	e13fff17 	ldw	r4,-4(fp)
 20034ac:	d9000215 	stw	r4,8(sp)
 20034b0:	1809883a 	mov	r4,r3
 20034b4:	e17ffd17 	ldw	r5,-12(fp)
 20034b8:	100d883a 	mov	r6,r2
 20034bc:	e1fffd17 	ldw	r7,-12(fp)
 20034c0:	20010cc0 	call	20010cc <vid_draw_line>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 20034c4:	e0bffd17 	ldw	r2,-12(fp)
 20034c8:	10800044 	addi	r2,r2,1
 20034cc:	e0bffd15 	stw	r2,-12(fp)
 20034d0:	e0bffe17 	ldw	r2,-8(fp)
 20034d4:	10c00917 	ldw	r3,36(r2)
 20034d8:	e0bffd17 	ldw	r2,-12(fp)
 20034dc:	18bfe00e 	bge	r3,r2,2003460 <vid_draw_triangle+0x2f0>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
 20034e0:	e0bffe17 	ldw	r2,-8(fp)
 20034e4:	10800d17 	ldw	r2,52(r2)
 20034e8:	1009883a 	mov	r4,r2
 20034ec:	20088e80 	call	20088e8 <free>
  }
}
 20034f0:	e037883a 	mov	sp,fp
 20034f4:	dfc00117 	ldw	ra,4(sp)
 20034f8:	df000017 	ldw	fp,0(sp)
 20034fc:	dec00204 	addi	sp,sp,8
 2003500:	f800283a 	ret

02003504 <CopyImage16>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
 2003504:	defff404 	addi	sp,sp,-48
 2003508:	dfc00b15 	stw	ra,44(sp)
 200350c:	df000a15 	stw	fp,40(sp)
 2003510:	df000a04 	addi	fp,sp,40
 2003514:	e13ffa15 	stw	r4,-24(fp)
 2003518:	e17ffb15 	stw	r5,-20(fp)
 200351c:	3007883a 	mov	r3,r6
 2003520:	3805883a 	mov	r2,r7
 2003524:	e1400217 	ldw	r5,8(fp)
 2003528:	e1000317 	ldw	r4,12(fp)
 200352c:	e0fffc0d 	sth	r3,-16(fp)
 2003530:	e0bffd0d 	sth	r2,-12(fp)
 2003534:	e17ffe0d 	sth	r5,-8(fp)
 2003538:	e13fff0d 	sth	r4,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
 200353c:	e03ff815 	stw	zero,-32(fp)
  int y_dst_offset = 0;
 2003540:	e03ff915 	stw	zero,-28(fp)
  
  for( y_src = 0, y_dst = 0; 
 2003544:	e03ff615 	stw	zero,-40(fp)
 2003548:	e03ff715 	stw	zero,-36(fp)
 200354c:	00001b06 	br	20035bc <CopyImage16+0xb8>
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 2003550:	e0bff917 	ldw	r2,-28(fp)
 2003554:	1085883a 	add	r2,r2,r2
 2003558:	e0fffb17 	ldw	r3,-20(fp)
 200355c:	1889883a 	add	r4,r3,r2
 2003560:	e0bff817 	ldw	r2,-32(fp)
           ( source_buffer + y_src_offset ), 
 2003564:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 2003568:	e0fffa17 	ldw	r3,-24(fp)
 200356c:	1887883a 	add	r3,r3,r2
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
 2003570:	e0bffc0f 	ldh	r2,-16(fp)
 2003574:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 2003578:	180b883a 	mov	r5,r3
 200357c:	100d883a 	mov	r6,r2
 2003580:	20090800 	call	2009080 <memcpy>
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 2003584:	e0bff617 	ldw	r2,-40(fp)
 2003588:	10800044 	addi	r2,r2,1
 200358c:	e0bff615 	stw	r2,-40(fp)
 2003590:	e0bff717 	ldw	r2,-36(fp)
 2003594:	10800044 	addi	r2,r2,1
 2003598:	e0bff715 	stw	r2,-36(fp)
 200359c:	e0bffc0f 	ldh	r2,-16(fp)
 20035a0:	e0fff817 	ldw	r3,-32(fp)
 20035a4:	1885883a 	add	r2,r3,r2
 20035a8:	e0bff815 	stw	r2,-32(fp)
 20035ac:	e0bffe0f 	ldh	r2,-8(fp)
 20035b0:	e0fff917 	ldw	r3,-28(fp)
 20035b4:	1885883a 	add	r2,r3,r2
 20035b8:	e0bff915 	stw	r2,-28(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
 20035bc:	e0bffd0f 	ldh	r2,-12(fp)
 20035c0:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
 20035c4:	e0bff617 	ldw	r2,-40(fp)
 20035c8:	18bfe10e 	bge	r3,r2,2003550 <CopyImage16+0x4c>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
 20035cc:	e037883a 	mov	sp,fp
 20035d0:	dfc00117 	ldw	ra,4(sp)
 20035d4:	df000017 	ldw	fp,0(sp)
 20035d8:	dec00204 	addi	sp,sp,8
 20035dc:	f800283a 	ret

020035e0 <CropImage16>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
 20035e0:	defff004 	addi	sp,sp,-64
 20035e4:	dfc00f15 	stw	ra,60(sp)
 20035e8:	df000e15 	stw	fp,56(sp)
 20035ec:	df000e04 	addi	fp,sp,56
 20035f0:	e13ff615 	stw	r4,-40(fp)
 20035f4:	e17ff715 	stw	r5,-36(fp)
 20035f8:	3007883a 	mov	r3,r6
 20035fc:	3805883a 	mov	r2,r7
 2003600:	e2400217 	ldw	r9,8(fp)
 2003604:	e2000317 	ldw	r8,12(fp)
 2003608:	e1c00417 	ldw	r7,16(fp)
 200360c:	e1800517 	ldw	r6,20(fp)
 2003610:	e1400617 	ldw	r5,24(fp)
 2003614:	e1000717 	ldw	r4,28(fp)
 2003618:	e0fff80d 	sth	r3,-32(fp)
 200361c:	e0bff90d 	sth	r2,-28(fp)
 2003620:	e27ffa0d 	sth	r9,-24(fp)
 2003624:	e23ffb0d 	sth	r8,-20(fp)
 2003628:	e1fffc0d 	sth	r7,-16(fp)
 200362c:	e1bffd0d 	sth	r6,-12(fp)
 2003630:	e17ffe0d 	sth	r5,-8(fp)
 2003634:	e13fff0d 	sth	r4,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
 2003638:	e0fff80f 	ldh	r3,-32(fp)
 200363c:	e0bffc0f 	ldh	r2,-16(fp)
 2003640:	1885383a 	mul	r2,r3,r2
 2003644:	e0bff415 	stw	r2,-48(fp)
  int y_dst_offset = 0;
 2003648:	e03ff515 	stw	zero,-44(fp)
  
  for( y_src = crop_top, y_dst = 0; 
 200364c:	e0bffc0f 	ldh	r2,-16(fp)
 2003650:	e0bff215 	stw	r2,-56(fp)
 2003654:	e03ff315 	stw	zero,-52(fp)
 2003658:	00002106 	br	20036e0 <CropImage16+0x100>
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 200365c:	e0bff517 	ldw	r2,-44(fp)
 2003660:	1085883a 	add	r2,r2,r2
 2003664:	e0fff717 	ldw	r3,-36(fp)
 2003668:	1889883a 	add	r4,r3,r2
           ( source_buffer + y_src_offset + crop_left ), 
 200366c:	e0fffa0f 	ldh	r3,-24(fp)
 2003670:	e0bff417 	ldw	r2,-48(fp)
 2003674:	1885883a 	add	r2,r3,r2
 2003678:	1085883a 	add	r2,r2,r2
 200367c:	e0fff617 	ldw	r3,-40(fp)
 2003680:	1887883a 	add	r3,r3,r2
           ((source_width - crop_left - crop_right) << 1));
 2003684:	e17ff80f 	ldh	r5,-32(fp)
 2003688:	e0bffa0f 	ldh	r2,-24(fp)
 200368c:	288bc83a 	sub	r5,r5,r2
 2003690:	e0bffb0f 	ldh	r2,-20(fp)
 2003694:	2885c83a 	sub	r2,r5,r2
 2003698:	1085883a 	add	r2,r2,r2
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 200369c:	180b883a 	mov	r5,r3
 20036a0:	100d883a 	mov	r6,r2
 20036a4:	20090800 	call	2009080 <memcpy>
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 20036a8:	e0bff217 	ldw	r2,-56(fp)
 20036ac:	10800044 	addi	r2,r2,1
 20036b0:	e0bff215 	stw	r2,-56(fp)
 20036b4:	e0bff317 	ldw	r2,-52(fp)
 20036b8:	10800044 	addi	r2,r2,1
 20036bc:	e0bff315 	stw	r2,-52(fp)
 20036c0:	e0bff80f 	ldh	r2,-32(fp)
 20036c4:	e0fff417 	ldw	r3,-48(fp)
 20036c8:	1885883a 	add	r2,r3,r2
 20036cc:	e0bff415 	stw	r2,-48(fp)
 20036d0:	e0bffe0f 	ldh	r2,-8(fp)
 20036d4:	e0fff517 	ldw	r3,-44(fp)
 20036d8:	1885883a 	add	r2,r3,r2
 20036dc:	e0bff515 	stw	r2,-44(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
 20036e0:	e0fff90f 	ldh	r3,-28(fp)
 20036e4:	e0bffd0f 	ldh	r2,-12(fp)
 20036e8:	1885c83a 	sub	r2,r3,r2
 20036ec:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
 20036f0:	e0bff217 	ldw	r2,-56(fp)
 20036f4:	18bfd90e 	bge	r3,r2,200365c <CropImage16+0x7c>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
 20036f8:	e037883a 	mov	sp,fp
 20036fc:	dfc00117 	ldw	ra,4(sp)
 2003700:	df000017 	ldw	fp,0(sp)
 2003704:	dec00204 	addi	sp,sp,8
 2003708:	f800283a 	ret

0200370c <vid_print_string_alpha>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
 200370c:	defff404 	addi	sp,sp,-48
 2003710:	dfc00b15 	stw	ra,44(sp)
 2003714:	df000a15 	stw	fp,40(sp)
 2003718:	df000a04 	addi	fp,sp,40
 200371c:	e13ffc15 	stw	r4,-16(fp)
 2003720:	e17ffd15 	stw	r5,-12(fp)
 2003724:	e1bffe15 	stw	r6,-8(fp)
 2003728:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 200372c:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 2003730:	e0bffc17 	ldw	r2,-16(fp)
 2003734:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 2003738:	00007d06 	br	2003930 <vid_print_string_alpha+0x224>
    //Handle newline char here.
    if (string[i] == '\n') {
 200373c:	e0bff917 	ldw	r2,-28(fp)
 2003740:	e0c00417 	ldw	r3,16(fp)
 2003744:	1885883a 	add	r2,r3,r2
 2003748:	10800003 	ldbu	r2,0(r2)
 200374c:	10803fcc 	andi	r2,r2,255
 2003750:	1080201c 	xori	r2,r2,128
 2003754:	10bfe004 	addi	r2,r2,-128
 2003758:	10800298 	cmpnei	r2,r2,10
 200375c:	10000c1e 	bne	r2,zero,2003790 <vid_print_string_alpha+0x84>
      horiz_offset = original_horiz_offset;
 2003760:	e0bffb17 	ldw	r2,-20(fp)
 2003764:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
 2003768:	e0800217 	ldw	r2,8(fp)
 200376c:	1082d804 	addi	r2,r2,2912
 2003770:	10c00517 	ldw	r3,20(r2)
 2003774:	e0bffd17 	ldw	r2,-12(fp)
 2003778:	1885883a 	add	r2,r3,r2
 200377c:	e0bffd15 	stw	r2,-12(fp)
      i++;
 2003780:	e0bff917 	ldw	r2,-28(fp)
 2003784:	10800044 	addi	r2,r2,1
 2003788:	e0bff915 	stw	r2,-28(fp)
      continue;
 200378c:	00006806 	br	2003930 <vid_print_string_alpha+0x224>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
 2003790:	e0bff917 	ldw	r2,-28(fp)
 2003794:	e0c00417 	ldw	r3,16(fp)
 2003798:	1885883a 	add	r2,r3,r2
 200379c:	10800003 	ldbu	r2,0(r2)
 20037a0:	10803fcc 	andi	r2,r2,255
 20037a4:	1080201c 	xori	r2,r2,128
 20037a8:	10bfe004 	addi	r2,r2,-128
 20037ac:	10800818 	cmpnei	r2,r2,32
 20037b0:	1000151e 	bne	r2,zero,2003808 <vid_print_string_alpha+0xfc>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 20037b4:	e0bfff17 	ldw	r2,-4(fp)
 20037b8:	10bfffe0 	cmpeqi	r2,r2,-1
 20037bc:	10000b1e 	bne	r2,zero,20037ec <vid_print_string_alpha+0xe0>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 20037c0:	e0bfff17 	ldw	r2,-4(fp)
 20037c4:	d8800015 	stw	r2,0(sp)
 20037c8:	e0800217 	ldw	r2,8(fp)
 20037cc:	d8800115 	stw	r2,4(sp)
 20037d0:	e0800317 	ldw	r2,12(fp)
 20037d4:	d8800215 	stw	r2,8(sp)
 20037d8:	e13ffc17 	ldw	r4,-16(fp)
 20037dc:	e17ffd17 	ldw	r5,-12(fp)
 20037e0:	e1bfff17 	ldw	r6,-4(fp)
 20037e4:	01c00b44 	movi	r7,45
 20037e8:	2003e980 	call	2003e98 <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 20037ec:	e0800217 	ldw	r2,8(fp)
 20037f0:	10806004 	addi	r2,r2,384
 20037f4:	10c00417 	ldw	r3,16(r2)
 20037f8:	e0bffc17 	ldw	r2,-16(fp)
 20037fc:	1885883a 	add	r2,r3,r2
 2003800:	e0bffc15 	stw	r2,-16(fp)
 2003804:	00004706 	br	2003924 <vid_print_string_alpha+0x218>
    }
    else if(string[i] == '\t')  // this is a tab
 2003808:	e0bff917 	ldw	r2,-28(fp)
 200380c:	e0c00417 	ldw	r3,16(fp)
 2003810:	1885883a 	add	r2,r3,r2
 2003814:	10800003 	ldbu	r2,0(r2)
 2003818:	10803fcc 	andi	r2,r2,255
 200381c:	1080201c 	xori	r2,r2,128
 2003820:	10bfe004 	addi	r2,r2,-128
 2003824:	10800258 	cmpnei	r2,r2,9
 2003828:	10001d1e 	bne	r2,zero,20038a0 <vid_print_string_alpha+0x194>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 200382c:	e03ffa15 	stw	zero,-24(fp)
 2003830:	00001706 	br	2003890 <vid_print_string_alpha+0x184>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 2003834:	e0bfff17 	ldw	r2,-4(fp)
 2003838:	10bfffe0 	cmpeqi	r2,r2,-1
 200383c:	10000b1e 	bne	r2,zero,200386c <vid_print_string_alpha+0x160>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 2003840:	e0bfff17 	ldw	r2,-4(fp)
 2003844:	d8800015 	stw	r2,0(sp)
 2003848:	e0800217 	ldw	r2,8(fp)
 200384c:	d8800115 	stw	r2,4(sp)
 2003850:	e0800317 	ldw	r2,12(fp)
 2003854:	d8800215 	stw	r2,8(sp)
 2003858:	e13ffc17 	ldw	r4,-16(fp)
 200385c:	e17ffd17 	ldw	r5,-12(fp)
 2003860:	e1bfff17 	ldw	r6,-4(fp)
 2003864:	01c00b44 	movi	r7,45
 2003868:	2003e980 	call	2003e98 <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 200386c:	e0800217 	ldw	r2,8(fp)
 2003870:	10806004 	addi	r2,r2,384
 2003874:	10c00417 	ldw	r3,16(r2)
 2003878:	e0bffc17 	ldw	r2,-16(fp)
 200387c:	1885883a 	add	r2,r3,r2
 2003880:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 2003884:	e0bffa17 	ldw	r2,-24(fp)
 2003888:	10800044 	addi	r2,r2,1
 200388c:	e0bffa15 	stw	r2,-24(fp)
 2003890:	e0bffa17 	ldw	r2,-24(fp)
 2003894:	10800090 	cmplti	r2,r2,2
 2003898:	103fe61e 	bne	r2,zero,2003834 <vid_print_string_alpha+0x128>
 200389c:	00002106 	br	2003924 <vid_print_string_alpha+0x218>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
 20038a0:	e0bff917 	ldw	r2,-28(fp)
 20038a4:	e0c00417 	ldw	r3,16(fp)
 20038a8:	1885883a 	add	r2,r3,r2
 20038ac:	10800003 	ldbu	r2,0(r2)
 20038b0:	10803fcc 	andi	r2,r2,255
 20038b4:	1080201c 	xori	r2,r2,128
 20038b8:	10bfe004 	addi	r2,r2,-128
 20038bc:	e0ffff17 	ldw	r3,-4(fp)
 20038c0:	d8c00015 	stw	r3,0(sp)
 20038c4:	e0c00217 	ldw	r3,8(fp)
 20038c8:	d8c00115 	stw	r3,4(sp)
 20038cc:	e0c00317 	ldw	r3,12(fp)
 20038d0:	d8c00215 	stw	r3,8(sp)
 20038d4:	e13ffc17 	ldw	r4,-16(fp)
 20038d8:	e17ffd17 	ldw	r5,-12(fp)
 20038dc:	e1bffe17 	ldw	r6,-8(fp)
 20038e0:	100f883a 	mov	r7,r2
 20038e4:	2003e980 	call	2003e98 <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
 20038e8:	e0bff917 	ldw	r2,-28(fp)
 20038ec:	e0c00417 	ldw	r3,16(fp)
 20038f0:	1885883a 	add	r2,r3,r2
 20038f4:	10800003 	ldbu	r2,0(r2)
 20038f8:	10803fcc 	andi	r2,r2,255
 20038fc:	1080201c 	xori	r2,r2,128
 2003900:	10bfe004 	addi	r2,r2,-128
 2003904:	10bff7c4 	addi	r2,r2,-33
 2003908:	1004917a 	slli	r2,r2,5
 200390c:	e0c00217 	ldw	r3,8(fp)
 2003910:	1885883a 	add	r2,r3,r2
 2003914:	10c00417 	ldw	r3,16(r2)
 2003918:	e0bffc17 	ldw	r2,-16(fp)
 200391c:	1885883a 	add	r2,r3,r2
 2003920:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
 2003924:	e0bff917 	ldw	r2,-28(fp)
 2003928:	10800044 	addi	r2,r2,1
 200392c:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 2003930:	e0bff917 	ldw	r2,-28(fp)
 2003934:	e0c00417 	ldw	r3,16(fp)
 2003938:	1885883a 	add	r2,r3,r2
 200393c:	10800003 	ldbu	r2,0(r2)
 2003940:	10803fcc 	andi	r2,r2,255
 2003944:	1080201c 	xori	r2,r2,128
 2003948:	10bfe004 	addi	r2,r2,-128
 200394c:	103f7b1e 	bne	r2,zero,200373c <vid_print_string_alpha+0x30>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
 2003950:	0005883a 	mov	r2,zero
}
 2003954:	e037883a 	mov	sp,fp
 2003958:	dfc00117 	ldw	ra,4(sp)
 200395c:	df000017 	ldw	fp,0(sp)
 2003960:	dec00204 	addi	sp,sp,8
 2003964:	f800283a 	ret

02003968 <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

__inline__ int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
 2003968:	defff904 	addi	sp,sp,-28
 200396c:	df000615 	stw	fp,24(sp)
 2003970:	df000604 	addi	fp,sp,24
 2003974:	e13ffc15 	stw	r4,-16(fp)
 2003978:	e17ffd15 	stw	r5,-12(fp)
 200397c:	e1bffe15 	stw	r6,-8(fp)
 2003980:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
 2003984:	e03ffb0d 	sth	zero,-20(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
 2003988:	e0bffc17 	ldw	r2,-16(fp)
 200398c:	10800418 	cmpnei	r2,r2,16
 2003990:	1000231e 	bne	r2,zero,2003a20 <seperate_color_channels+0xb8>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
 2003994:	e0bffd17 	ldw	r2,-12(fp)
 2003998:	10800003 	ldbu	r2,0(r2)
 200399c:	10803fcc 	andi	r2,r2,255
 20039a0:	e0bffb0d 	sth	r2,-20(fp)
 20039a4:	e0bffd17 	ldw	r2,-12(fp)
 20039a8:	10800044 	addi	r2,r2,1
 20039ac:	e0bffd15 	stw	r2,-12(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
 20039b0:	e0bffd17 	ldw	r2,-12(fp)
 20039b4:	10800003 	ldbu	r2,0(r2)
 20039b8:	10803fcc 	andi	r2,r2,255
 20039bc:	1004923a 	slli	r2,r2,8
 20039c0:	1007883a 	mov	r3,r2
 20039c4:	e0bffb0b 	ldhu	r2,-20(fp)
 20039c8:	1885883a 	add	r2,r3,r2
 20039cc:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F; 
 20039d0:	e0bffb0b 	ldhu	r2,-20(fp)
 20039d4:	108007cc 	andi	r2,r2,31
 20039d8:	1007883a 	mov	r3,r2
 20039dc:	e0800117 	ldw	r2,4(fp)
 20039e0:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
 20039e4:	e0bffb0b 	ldhu	r2,-20(fp)
 20039e8:	1004d17a 	srli	r2,r2,5
 20039ec:	10800fcc 	andi	r2,r2,63
 20039f0:	1007883a 	mov	r3,r2
 20039f4:	e0bfff17 	ldw	r2,-4(fp)
 20039f8:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
 20039fc:	e0bffb0b 	ldhu	r2,-20(fp)
 2003a00:	1004d2fa 	srli	r2,r2,11
 2003a04:	108007cc 	andi	r2,r2,31
 2003a08:	1007883a 	mov	r3,r2
 2003a0c:	e0bffe17 	ldw	r2,-8(fp)
 2003a10:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 2003a14:	00800044 	movi	r2,1
 2003a18:	e0bffa15 	stw	r2,-24(fp)
 2003a1c:	00002206 	br	2003aa8 <seperate_color_channels+0x140>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 2003a20:	e0bffc17 	ldw	r2,-16(fp)
 2003a24:	10800620 	cmpeqi	r2,r2,24
 2003a28:	1000031e 	bne	r2,zero,2003a38 <seperate_color_channels+0xd0>
 2003a2c:	e0bffc17 	ldw	r2,-16(fp)
 2003a30:	10800818 	cmpnei	r2,r2,32
 2003a34:	1000151e 	bne	r2,zero,2003a8c <seperate_color_channels+0x124>
  {
    *blue = *color++;
 2003a38:	e0bffd17 	ldw	r2,-12(fp)
 2003a3c:	10c00003 	ldbu	r3,0(r2)
 2003a40:	e0800117 	ldw	r2,4(fp)
 2003a44:	10c00005 	stb	r3,0(r2)
 2003a48:	e0bffd17 	ldw	r2,-12(fp)
 2003a4c:	10800044 	addi	r2,r2,1
 2003a50:	e0bffd15 	stw	r2,-12(fp)
    *green = *color++;
 2003a54:	e0bffd17 	ldw	r2,-12(fp)
 2003a58:	10c00003 	ldbu	r3,0(r2)
 2003a5c:	e0bfff17 	ldw	r2,-4(fp)
 2003a60:	10c00005 	stb	r3,0(r2)
 2003a64:	e0bffd17 	ldw	r2,-12(fp)
 2003a68:	10800044 	addi	r2,r2,1
 2003a6c:	e0bffd15 	stw	r2,-12(fp)
    *red = *color;   
 2003a70:	e0bffd17 	ldw	r2,-12(fp)
 2003a74:	10c00003 	ldbu	r3,0(r2)
 2003a78:	e0bffe17 	ldw	r2,-8(fp)
 2003a7c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 2003a80:	00800044 	movi	r2,1
 2003a84:	e0bffa15 	stw	r2,-24(fp)
 2003a88:	00000706 	br	2003aa8 <seperate_color_channels+0x140>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
 2003a8c:	e0bffe17 	ldw	r2,-8(fp)
 2003a90:	10000005 	stb	zero,0(r2)
    *green = 0;
 2003a94:	e0bfff17 	ldw	r2,-4(fp)
 2003a98:	10000005 	stb	zero,0(r2)
    *blue = 0;    
 2003a9c:	e0800117 	ldw	r2,4(fp)
 2003aa0:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 2003aa4:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
 2003aa8:	e0bffa17 	ldw	r2,-24(fp)
}
 2003aac:	e037883a 	mov	sp,fp
 2003ab0:	df000017 	ldw	fp,0(sp)
 2003ab4:	dec00104 	addi	sp,sp,4
 2003ab8:	f800283a 	ret

02003abc <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

__inline__ int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
 2003abc:	defff904 	addi	sp,sp,-28
 2003ac0:	df000615 	stw	fp,24(sp)
 2003ac4:	df000604 	addi	fp,sp,24
 2003ac8:	e13ffc15 	stw	r4,-16(fp)
 2003acc:	2809883a 	mov	r4,r5
 2003ad0:	3007883a 	mov	r3,r6
 2003ad4:	3805883a 	mov	r2,r7
 2003ad8:	e13ffd05 	stb	r4,-12(fp)
 2003adc:	e0fffe05 	stb	r3,-8(fp)
 2003ae0:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
 2003ae4:	e0bffc17 	ldw	r2,-16(fp)
 2003ae8:	10800418 	cmpnei	r2,r2,16
 2003aec:	10001b1e 	bne	r2,zero,2003b5c <merge_color_channels+0xa0>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
 2003af0:	e0bfff03 	ldbu	r2,-4(fp)
 2003af4:	108007cc 	andi	r2,r2,31
 2003af8:	1007883a 	mov	r3,r2
 2003afc:	e0bffe03 	ldbu	r2,-8(fp)
 2003b00:	10800fcc 	andi	r2,r2,63
 2003b04:	1004917a 	slli	r2,r2,5
 2003b08:	1884b03a 	or	r2,r3,r2
 2003b0c:	1007883a 	mov	r3,r2
 2003b10:	e0bffd03 	ldbu	r2,-12(fp)
 2003b14:	100492fa 	slli	r2,r2,11
 2003b18:	1884b03a 	or	r2,r3,r2
 2003b1c:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
 2003b20:	e0bffb0b 	ldhu	r2,-20(fp)
 2003b24:	1007883a 	mov	r3,r2
 2003b28:	e0800117 	ldw	r2,4(fp)
 2003b2c:	10c00005 	stb	r3,0(r2)
 2003b30:	e0800117 	ldw	r2,4(fp)
 2003b34:	10800044 	addi	r2,r2,1
 2003b38:	e0800115 	stw	r2,4(fp)
    *color = (temp_color >> 8) & 0xFF;
 2003b3c:	e0bffb0b 	ldhu	r2,-20(fp)
 2003b40:	1004d23a 	srli	r2,r2,8
 2003b44:	1007883a 	mov	r3,r2
 2003b48:	e0800117 	ldw	r2,4(fp)
 2003b4c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 2003b50:	00800044 	movi	r2,1
 2003b54:	e0bffa15 	stw	r2,-24(fp)
 2003b58:	00002506 	br	2003bf0 <merge_color_channels+0x134>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 2003b5c:	e0bffc17 	ldw	r2,-16(fp)
 2003b60:	10800620 	cmpeqi	r2,r2,24
 2003b64:	1000031e 	bne	r2,zero,2003b74 <merge_color_channels+0xb8>
 2003b68:	e0bffc17 	ldw	r2,-16(fp)
 2003b6c:	10800818 	cmpnei	r2,r2,32
 2003b70:	1000121e 	bne	r2,zero,2003bbc <merge_color_channels+0x100>
  {
    *color++ = blue;
 2003b74:	e0800117 	ldw	r2,4(fp)
 2003b78:	e0ffff03 	ldbu	r3,-4(fp)
 2003b7c:	10c00005 	stb	r3,0(r2)
 2003b80:	e0800117 	ldw	r2,4(fp)
 2003b84:	10800044 	addi	r2,r2,1
 2003b88:	e0800115 	stw	r2,4(fp)
    *color++ = green;
 2003b8c:	e0800117 	ldw	r2,4(fp)
 2003b90:	e0fffe03 	ldbu	r3,-8(fp)
 2003b94:	10c00005 	stb	r3,0(r2)
 2003b98:	e0800117 	ldw	r2,4(fp)
 2003b9c:	10800044 	addi	r2,r2,1
 2003ba0:	e0800115 	stw	r2,4(fp)
    *color = red;
 2003ba4:	e0800117 	ldw	r2,4(fp)
 2003ba8:	e0fffd03 	ldbu	r3,-12(fp)
 2003bac:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 2003bb0:	00800044 	movi	r2,1
 2003bb4:	e0bffa15 	stw	r2,-24(fp)
 2003bb8:	00000d06 	br	2003bf0 <merge_color_channels+0x134>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
 2003bbc:	e0800117 	ldw	r2,4(fp)
 2003bc0:	10000005 	stb	zero,0(r2)
 2003bc4:	e0800117 	ldw	r2,4(fp)
 2003bc8:	10800044 	addi	r2,r2,1
 2003bcc:	e0800115 	stw	r2,4(fp)
    *color++ = 0;
 2003bd0:	e0800117 	ldw	r2,4(fp)
 2003bd4:	10000005 	stb	zero,0(r2)
 2003bd8:	e0800117 	ldw	r2,4(fp)
 2003bdc:	10800044 	addi	r2,r2,1
 2003be0:	e0800115 	stw	r2,4(fp)
    *color = 0;
 2003be4:	e0800117 	ldw	r2,4(fp)
 2003be8:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 2003bec:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;  
 2003bf0:	e0bffa17 	ldw	r2,-24(fp)
}
 2003bf4:	e037883a 	mov	sp,fp
 2003bf8:	df000017 	ldw	fp,0(sp)
 2003bfc:	dec00104 	addi	sp,sp,4
 2003c00:	f800283a 	ret

02003c04 <read_from_frame>:
*           needed to calculate the new one.
*
******************************************************************/

__inline__ int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 2003c04:	defffa04 	addi	sp,sp,-24
 2003c08:	dfc00515 	stw	ra,20(sp)
 2003c0c:	df000415 	stw	fp,16(sp)
 2003c10:	df000404 	addi	fp,sp,16
 2003c14:	e13ffc15 	stw	r4,-16(fp)
 2003c18:	e17ffd15 	stw	r5,-12(fp)
 2003c1c:	e1bffe15 	stw	r6,-8(fp)
 2003c20:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("read_from_frame is not implemented!\r\n");
 2003c24:	010080f4 	movhi	r4,515
 2003c28:	2138fd04 	addi	r4,r4,-7180
 2003c2c:	20093400 	call	2009340 <puts>
    return_value = 0; 
  }

  return return_value;
#endif
}
 2003c30:	e037883a 	mov	sp,fp
 2003c34:	dfc00117 	ldw	ra,4(sp)
 2003c38:	df000017 	ldw	fp,0(sp)
 2003c3c:	dec00204 	addi	sp,sp,8
 2003c40:	f800283a 	ret

02003c44 <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

__inline__ int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 2003c44:	defff304 	addi	sp,sp,-52
 2003c48:	dfc00c15 	stw	ra,48(sp)
 2003c4c:	df000b15 	stw	fp,44(sp)
 2003c50:	df000b04 	addi	fp,sp,44
 2003c54:	e13ffc15 	stw	r4,-16(fp)
 2003c58:	e17ffd15 	stw	r5,-12(fp)
 2003c5c:	e1bffe15 	stw	r6,-8(fp)
 2003c60:	3805883a 	mov	r2,r7
 2003c64:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
 2003c68:	e0bffe17 	ldw	r2,-8(fp)
 2003c6c:	10bfffd8 	cmpnei	r2,r2,-1
 2003c70:	10000c1e 	bne	r2,zero,2003ca4 <alpha_blending+0x60>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
 2003c74:	e0fffb04 	addi	r3,fp,-20
 2003c78:	e0bffb44 	addi	r2,fp,-19
 2003c7c:	e13ffb84 	addi	r4,fp,-18
 2003c80:	d9000015 	stw	r4,0(sp)
 2003c84:	e1000517 	ldw	r4,20(fp)
 2003c88:	d9000115 	stw	r4,4(sp)
 2003c8c:	e13ffc17 	ldw	r4,-16(fp)
 2003c90:	e17ffd17 	ldw	r5,-12(fp)
 2003c94:	180d883a 	mov	r6,r3
 2003c98:	100f883a 	mov	r7,r2
 2003c9c:	2003c040 	call	2003c04 <read_from_frame>
 2003ca0:	00000a06 	br	2003ccc <alpha_blending+0x88>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
 2003ca4:	e0800517 	ldw	r2,20(fp)
 2003ca8:	11000017 	ldw	r4,0(r2)
 2003cac:	e17ffe04 	addi	r5,fp,-8
 2003cb0:	e0fffb04 	addi	r3,fp,-20
 2003cb4:	e0bffb44 	addi	r2,fp,-19
 2003cb8:	e1bffb84 	addi	r6,fp,-18
 2003cbc:	d9800015 	stw	r6,0(sp)
 2003cc0:	180d883a 	mov	r6,r3
 2003cc4:	100f883a 	mov	r7,r2
 2003cc8:	20039680 	call	2003968 <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
 2003ccc:	e0800217 	ldw	r2,8(fp)
 2003cd0:	10800003 	ldbu	r2,0(r2)
 2003cd4:	10c03fcc 	andi	r3,r2,255
 2003cd8:	e0bfff03 	ldbu	r2,-4(fp)
 2003cdc:	1887383a 	mul	r3,r3,r2
 2003ce0:	e0bffb03 	ldbu	r2,-20(fp)
 2003ce4:	11003fcc 	andi	r4,r2,255
 2003ce8:	e0bfff03 	ldbu	r2,-4(fp)
 2003cec:	01403fc4 	movi	r5,255
 2003cf0:	2885c83a 	sub	r2,r5,r2
 2003cf4:	2085383a 	mul	r2,r4,r2
 2003cf8:	1885883a 	add	r2,r3,r2
 2003cfc:	1009883a 	mov	r4,r2
 2003d00:	01403fc4 	movi	r5,255
 2003d04:	200827c0 	call	200827c <__divsi3>
 2003d08:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
 2003d0c:	e0800317 	ldw	r2,12(fp)
 2003d10:	10800003 	ldbu	r2,0(r2)
 2003d14:	10c03fcc 	andi	r3,r2,255
 2003d18:	e0bfff03 	ldbu	r2,-4(fp)
 2003d1c:	1887383a 	mul	r3,r3,r2
 2003d20:	e0bffb43 	ldbu	r2,-19(fp)
 2003d24:	11003fcc 	andi	r4,r2,255
 2003d28:	e0bfff03 	ldbu	r2,-4(fp)
 2003d2c:	01403fc4 	movi	r5,255
 2003d30:	2885c83a 	sub	r2,r5,r2
 2003d34:	2085383a 	mul	r2,r4,r2
 2003d38:	1885883a 	add	r2,r3,r2
 2003d3c:	1009883a 	mov	r4,r2
 2003d40:	01403fc4 	movi	r5,255
 2003d44:	200827c0 	call	200827c <__divsi3>
 2003d48:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
 2003d4c:	e0800417 	ldw	r2,16(fp)
 2003d50:	10800003 	ldbu	r2,0(r2)
 2003d54:	10c03fcc 	andi	r3,r2,255
 2003d58:	e0bfff03 	ldbu	r2,-4(fp)
 2003d5c:	1887383a 	mul	r3,r3,r2
 2003d60:	e0bffb83 	ldbu	r2,-18(fp)
 2003d64:	11003fcc 	andi	r4,r2,255
 2003d68:	e0bfff03 	ldbu	r2,-4(fp)
 2003d6c:	01403fc4 	movi	r5,255
 2003d70:	2885c83a 	sub	r2,r5,r2
 2003d74:	2085383a 	mul	r2,r4,r2
 2003d78:	1885883a 	add	r2,r3,r2
 2003d7c:	1009883a 	mov	r4,r2
 2003d80:	01403fc4 	movi	r5,255
 2003d84:	200827c0 	call	200827c <__divsi3>
 2003d88:	e0bffa15 	stw	r2,-24(fp)
  

  if(display->color_depth == 16)
 2003d8c:	e0800517 	ldw	r2,20(fp)
 2003d90:	10800017 	ldw	r2,0(r2)
 2003d94:	10800418 	cmpnei	r2,r2,16
 2003d98:	1000181e 	bne	r2,zero,2003dfc <alpha_blending+0x1b8>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
 2003d9c:	e0bff817 	ldw	r2,-32(fp)
 2003da0:	10c00830 	cmpltui	r3,r2,32
 2003da4:	1800011e 	bne	r3,zero,2003dac <alpha_blending+0x168>
 2003da8:	008007c4 	movi	r2,31
 2003dac:	1007883a 	mov	r3,r2
 2003db0:	e0800217 	ldw	r2,8(fp)
 2003db4:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
 2003db8:	e0bff917 	ldw	r2,-28(fp)
 2003dbc:	10c01030 	cmpltui	r3,r2,64
 2003dc0:	1800011e 	bne	r3,zero,2003dc8 <alpha_blending+0x184>
 2003dc4:	00800fc4 	movi	r2,63
 2003dc8:	1007883a 	mov	r3,r2
 2003dcc:	e0800317 	ldw	r2,12(fp)
 2003dd0:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
 2003dd4:	e0bffa17 	ldw	r2,-24(fp)
 2003dd8:	10c00830 	cmpltui	r3,r2,32
 2003ddc:	1800011e 	bne	r3,zero,2003de4 <alpha_blending+0x1a0>
 2003de0:	008007c4 	movi	r2,31
 2003de4:	1007883a 	mov	r3,r2
 2003de8:	e0800417 	ldw	r2,16(fp)
 2003dec:	10c00005 	stb	r3,0(r2)
    return_value = 1;        
 2003df0:	00800044 	movi	r2,1
 2003df4:	e0bff715 	stw	r2,-36(fp)
 2003df8:	00002106 	br	2003e80 <alpha_blending+0x23c>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
 2003dfc:	e0800517 	ldw	r2,20(fp)
 2003e00:	10800017 	ldw	r2,0(r2)
 2003e04:	10800620 	cmpeqi	r2,r2,24
 2003e08:	1000041e 	bne	r2,zero,2003e1c <alpha_blending+0x1d8>
 2003e0c:	e0800517 	ldw	r2,20(fp)
 2003e10:	10800017 	ldw	r2,0(r2)
 2003e14:	10800818 	cmpnei	r2,r2,32
 2003e18:	1000181e 	bne	r2,zero,2003e7c <alpha_blending+0x238>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
 2003e1c:	e0bff817 	ldw	r2,-32(fp)
 2003e20:	10c04030 	cmpltui	r3,r2,256
 2003e24:	1800011e 	bne	r3,zero,2003e2c <alpha_blending+0x1e8>
 2003e28:	00803fc4 	movi	r2,255
 2003e2c:	1007883a 	mov	r3,r2
 2003e30:	e0800217 	ldw	r2,8(fp)
 2003e34:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
 2003e38:	e0bff917 	ldw	r2,-28(fp)
 2003e3c:	10c04030 	cmpltui	r3,r2,256
 2003e40:	1800011e 	bne	r3,zero,2003e48 <alpha_blending+0x204>
 2003e44:	00803fc4 	movi	r2,255
 2003e48:	1007883a 	mov	r3,r2
 2003e4c:	e0800317 	ldw	r2,12(fp)
 2003e50:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
 2003e54:	e0bffa17 	ldw	r2,-24(fp)
 2003e58:	10c04030 	cmpltui	r3,r2,256
 2003e5c:	1800011e 	bne	r3,zero,2003e64 <alpha_blending+0x220>
 2003e60:	00803fc4 	movi	r2,255
 2003e64:	1007883a 	mov	r3,r2
 2003e68:	e0800417 	ldw	r2,16(fp)
 2003e6c:	10c00005 	stb	r3,0(r2)
    return_value = 1;            
 2003e70:	00800044 	movi	r2,1
 2003e74:	e0bff715 	stw	r2,-36(fp)
 2003e78:	00000106 	br	2003e80 <alpha_blending+0x23c>
  }
  else
  {
    return_value = 0;     
 2003e7c:	e03ff715 	stw	zero,-36(fp)
  }  
 
  return return_value;
 2003e80:	e0bff717 	ldw	r2,-36(fp)
} 
 2003e84:	e037883a 	mov	sp,fp
 2003e88:	dfc00117 	ldw	ra,4(sp)
 2003e8c:	df000017 	ldw	fp,0(sp)
 2003e90:	dec00204 	addi	sp,sp,8
 2003e94:	f800283a 	ret

02003e98 <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
 2003e98:	defff004 	addi	sp,sp,-64
 2003e9c:	dfc00f15 	stw	ra,60(sp)
 2003ea0:	df000e15 	stw	fp,56(sp)
 2003ea4:	df000e04 	addi	fp,sp,56
 2003ea8:	e13ffc15 	stw	r4,-16(fp)
 2003eac:	e17ffd15 	stw	r5,-12(fp)
 2003eb0:	e1bffe15 	stw	r6,-8(fp)
 2003eb4:	3805883a 	mov	r2,r7
 2003eb8:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
 2003ebc:	e0bfff07 	ldb	r2,-4(fp)
 2003ec0:	10bff7c4 	addi	r2,r2,-33
 2003ec4:	1004917a 	slli	r2,r2,5
 2003ec8:	e0c00317 	ldw	r3,12(fp)
 2003ecc:	1885883a 	add	r2,r3,r2
 2003ed0:	10800617 	ldw	r2,24(r2)
 2003ed4:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
 2003ed8:	e0800417 	ldw	r2,16(fp)
 2003edc:	11000017 	ldw	r4,0(r2)
 2003ee0:	e17ffe04 	addi	r5,fp,-8
 2003ee4:	e0fff904 	addi	r3,fp,-28
 2003ee8:	e0bff984 	addi	r2,fp,-26
 2003eec:	e1bff944 	addi	r6,fp,-27
 2003ef0:	d9800015 	stw	r6,0(sp)
 2003ef4:	180d883a 	mov	r6,r3
 2003ef8:	100f883a 	mov	r7,r2
 2003efc:	20039680 	call	2003968 <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
 2003f00:	e03ff615 	stw	zero,-40(fp)
 2003f04:	00004606 	br	2004020 <vid_print_char_alpha+0x188>
    for (j = 0; j < font[character-33].bounds_width; j++) {
 2003f08:	e03ff715 	stw	zero,-36(fp)
 2003f0c:	00003906 	br	2003ff4 <vid_print_char_alpha+0x15c>
      red = original_red;
 2003f10:	e0bff903 	ldbu	r2,-28(fp)
 2003f14:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
 2003f18:	e0bff983 	ldbu	r2,-26(fp)
 2003f1c:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
 2003f20:	e0bff943 	ldbu	r2,-27(fp)
 2003f24:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
 2003f28:	e0fffc17 	ldw	r3,-16(fp)
 2003f2c:	e0bff717 	ldw	r2,-36(fp)
 2003f30:	1889883a 	add	r4,r3,r2
 2003f34:	e0fffd17 	ldw	r3,-12(fp)
 2003f38:	e0bff617 	ldw	r2,-40(fp)
 2003f3c:	1887883a 	add	r3,r3,r2
 2003f40:	e0bff817 	ldw	r2,-32(fp)
 2003f44:	10800003 	ldbu	r2,0(r2)
 2003f48:	10803fcc 	andi	r2,r2,255
 2003f4c:	e17ff9c4 	addi	r5,fp,-25
 2003f50:	d9400015 	stw	r5,0(sp)
 2003f54:	e17ffa04 	addi	r5,fp,-24
 2003f58:	d9400115 	stw	r5,4(sp)
 2003f5c:	e17ffa44 	addi	r5,fp,-23
 2003f60:	d9400215 	stw	r5,8(sp)
 2003f64:	e1400417 	ldw	r5,16(fp)
 2003f68:	d9400315 	stw	r5,12(sp)
 2003f6c:	180b883a 	mov	r5,r3
 2003f70:	e1800217 	ldw	r6,8(fp)
 2003f74:	100f883a 	mov	r7,r2
 2003f78:	2003c440 	call	2003c44 <alpha_blending>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
 2003f7c:	e0800417 	ldw	r2,16(fp)
 2003f80:	11000017 	ldw	r4,0(r2)
 2003f84:	e0bff9c3 	ldbu	r2,-25(fp)
 2003f88:	11403fcc 	andi	r5,r2,255
 2003f8c:	e0bffa03 	ldbu	r2,-24(fp)
 2003f90:	10c03fcc 	andi	r3,r2,255
 2003f94:	e0bffa43 	ldbu	r2,-23(fp)
 2003f98:	10803fcc 	andi	r2,r2,255
 2003f9c:	e1bffb04 	addi	r6,fp,-20
 2003fa0:	d9800015 	stw	r6,0(sp)
 2003fa4:	180d883a 	mov	r6,r3
 2003fa8:	100f883a 	mov	r7,r2
 2003fac:	2003abc0 	call	2003abc <merge_color_channels>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
 2003fb0:	e0fffc17 	ldw	r3,-16(fp)
 2003fb4:	e0bff717 	ldw	r2,-36(fp)
 2003fb8:	1889883a 	add	r4,r3,r2
 2003fbc:	e0fffd17 	ldw	r3,-12(fp)
 2003fc0:	e0bff617 	ldw	r2,-40(fp)
 2003fc4:	1887883a 	add	r3,r3,r2
 2003fc8:	e0bffb17 	ldw	r2,-20(fp)
 2003fcc:	180b883a 	mov	r5,r3
 2003fd0:	100d883a 	mov	r6,r2
 2003fd4:	e1c00417 	ldw	r7,16(fp)
 2003fd8:	2001b100 	call	2001b10 <vid_set_pixel>

      alpha++;
 2003fdc:	e0bff817 	ldw	r2,-32(fp)
 2003fe0:	10800044 	addi	r2,r2,1
 2003fe4:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
 2003fe8:	e0bff717 	ldw	r2,-36(fp)
 2003fec:	10800044 	addi	r2,r2,1
 2003ff0:	e0bff715 	stw	r2,-36(fp)
 2003ff4:	e0fff717 	ldw	r3,-36(fp)
 2003ff8:	e0bfff07 	ldb	r2,-4(fp)
 2003ffc:	10bff7c4 	addi	r2,r2,-33
 2004000:	1004917a 	slli	r2,r2,5
 2004004:	e1000317 	ldw	r4,12(fp)
 2004008:	2085883a 	add	r2,r4,r2
 200400c:	10800417 	ldw	r2,16(r2)
 2004010:	18bfbf36 	bltu	r3,r2,2003f10 <vid_print_char_alpha+0x78>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
 2004014:	e0bff617 	ldw	r2,-40(fp)
 2004018:	10800044 	addi	r2,r2,1
 200401c:	e0bff615 	stw	r2,-40(fp)
 2004020:	e0fff617 	ldw	r3,-40(fp)
 2004024:	e0bfff07 	ldb	r2,-4(fp)
 2004028:	10bff7c4 	addi	r2,r2,-33
 200402c:	1004917a 	slli	r2,r2,5
 2004030:	e1000317 	ldw	r4,12(fp)
 2004034:	2085883a 	add	r2,r4,r2
 2004038:	10800517 	ldw	r2,20(r2)
 200403c:	18bfb236 	bltu	r3,r2,2003f08 <vid_print_char_alpha+0x70>

      alpha++;
    }
  }

  return(0);
 2004040:	0005883a 	mov	r2,zero
}
 2004044:	e037883a 	mov	sp,fp
 2004048:	dfc00117 	ldw	ra,4(sp)
 200404c:	df000017 	ldw	fp,0(sp)
 2004050:	dec00204 	addi	sp,sp,8
 2004054:	f800283a 	ret

02004058 <vid_string_pixel_length_alpha>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
 2004058:	defffb04 	addi	sp,sp,-20
 200405c:	df000415 	stw	fp,16(sp)
 2004060:	df000404 	addi	fp,sp,16
 2004064:	e13ffe15 	stw	r4,-8(fp)
 2004068:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
 200406c:	e03ffc15 	stw	zero,-16(fp)
  int length = 0;
 2004070:	e03ffd15 	stw	zero,-12(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 2004074:	e03ffc15 	stw	zero,-16(fp)
 2004078:	00002206 	br	2004104 <vid_string_pixel_length_alpha+0xac>
  {
    if( string[i] == ' ' )
 200407c:	e0bffc17 	ldw	r2,-16(fp)
 2004080:	e0ffff17 	ldw	r3,-4(fp)
 2004084:	1885883a 	add	r2,r3,r2
 2004088:	10800003 	ldbu	r2,0(r2)
 200408c:	10803fcc 	andi	r2,r2,255
 2004090:	1080201c 	xori	r2,r2,128
 2004094:	10bfe004 	addi	r2,r2,-128
 2004098:	10800818 	cmpnei	r2,r2,32
 200409c:	1000071e 	bne	r2,zero,20040bc <vid_string_pixel_length_alpha+0x64>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
 20040a0:	e0bffe17 	ldw	r2,-8(fp)
 20040a4:	10806004 	addi	r2,r2,384
 20040a8:	10c00417 	ldw	r3,16(r2)
 20040ac:	e0bffd17 	ldw	r2,-12(fp)
 20040b0:	1885883a 	add	r2,r3,r2
 20040b4:	e0bffd15 	stw	r2,-12(fp)
 20040b8:	00000f06 	br	20040f8 <vid_string_pixel_length_alpha+0xa0>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
 20040bc:	e0bffc17 	ldw	r2,-16(fp)
 20040c0:	e0ffff17 	ldw	r3,-4(fp)
 20040c4:	1885883a 	add	r2,r3,r2
 20040c8:	10800003 	ldbu	r2,0(r2)
 20040cc:	10803fcc 	andi	r2,r2,255
 20040d0:	1080201c 	xori	r2,r2,128
 20040d4:	10bfe004 	addi	r2,r2,-128
 20040d8:	10bff7c4 	addi	r2,r2,-33
 20040dc:	1004917a 	slli	r2,r2,5
 20040e0:	e0fffe17 	ldw	r3,-8(fp)
 20040e4:	1885883a 	add	r2,r3,r2
 20040e8:	10c00417 	ldw	r3,16(r2)
 20040ec:	e0bffd17 	ldw	r2,-12(fp)
 20040f0:	1885883a 	add	r2,r3,r2
 20040f4:	e0bffd15 	stw	r2,-12(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 20040f8:	e0bffc17 	ldw	r2,-16(fp)
 20040fc:	10800044 	addi	r2,r2,1
 2004100:	e0bffc15 	stw	r2,-16(fp)
 2004104:	e0bffc17 	ldw	r2,-16(fp)
 2004108:	e0ffff17 	ldw	r3,-4(fp)
 200410c:	1885883a 	add	r2,r3,r2
 2004110:	10800003 	ldbu	r2,0(r2)
 2004114:	10803fcc 	andi	r2,r2,255
 2004118:	1080201c 	xori	r2,r2,128
 200411c:	10bfe004 	addi	r2,r2,-128
 2004120:	103fd61e 	bne	r2,zero,200407c <vid_string_pixel_length_alpha+0x24>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
 2004124:	e0bffd17 	ldw	r2,-12(fp)
}
 2004128:	e037883a 	mov	sp,fp
 200412c:	df000017 	ldw	fp,0(sp)
 2004130:	dec00104 	addi	sp,sp,4
 2004134:	f800283a 	ret

02004138 <GUI_ShowWelcome>:
    RECT rcPaint;
    PALETTE_INFO szPalette[BTN_NUM];
}DESK_INFO;


void GUI_ShowWelcome(alt_video_display *pDisplay){
 2004138:	defff804 	addi	sp,sp,-32
 200413c:	dfc00715 	stw	ra,28(sp)
 2004140:	df000615 	stw	fp,24(sp)
 2004144:	df000604 	addi	fp,sp,24
 2004148:	e13fff15 	stw	r4,-4(fp)
	int x, y;


	x = pDisplay->width / 2 - 60;
 200414c:	e0bfff17 	ldw	r2,-4(fp)
 2004150:	10800117 	ldw	r2,4(r2)
 2004154:	1006d7fa 	srli	r3,r2,31
 2004158:	1885883a 	add	r2,r3,r2
 200415c:	1005d07a 	srai	r2,r2,1
 2004160:	10bff104 	addi	r2,r2,-60
 2004164:	e0bffd15 	stw	r2,-12(fp)
	y = pDisplay->height / 2 - 10;
 2004168:	e0bfff17 	ldw	r2,-4(fp)
 200416c:	10800217 	ldw	r2,8(r2)
 2004170:	1006d7fa 	srli	r3,r2,31
 2004174:	1885883a 	add	r2,r3,r2
 2004178:	1005d07a 	srai	r2,r2,1
 200417c:	10bffd84 	addi	r2,r2,-10
 2004180:	e0bffe15 	stw	r2,-8(fp)

	vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
 2004184:	008080f4 	movhi	r2,515
 2004188:	10ba8204 	addi	r2,r2,-5624
 200418c:	d8800015 	stw	r2,0(sp)
 2004190:	e0bfff17 	ldw	r2,-4(fp)
 2004194:	d8800115 	stw	r2,4(sp)
 2004198:	008080f4 	movhi	r2,515
 200419c:	10b90704 	addi	r2,r2,-7140
 20041a0:	d8800215 	stw	r2,8(sp)
 20041a4:	e13ffd17 	ldw	r4,-12(fp)
 20041a8:	e17ffe17 	ldw	r5,-8(fp)
 20041ac:	01803fc4 	movi	r6,255
 20041b0:	000f883a 	mov	r7,zero
 20041b4:	200370c0 	call	200370c <vid_print_string_alpha>
	vid_print_string_alpha(x, y+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch Demo");
 20041b8:	e0bffe17 	ldw	r2,-8(fp)
 20041bc:	10800584 	addi	r2,r2,22
 20041c0:	00c080f4 	movhi	r3,515
 20041c4:	18fa8204 	addi	r3,r3,-5624
 20041c8:	d8c00015 	stw	r3,0(sp)
 20041cc:	e0ffff17 	ldw	r3,-4(fp)
 20041d0:	d8c00115 	stw	r3,4(sp)
 20041d4:	00c080f4 	movhi	r3,515
 20041d8:	18f90904 	addi	r3,r3,-7132
 20041dc:	d8c00215 	stw	r3,8(sp)
 20041e0:	e13ffd17 	ldw	r4,-12(fp)
 20041e4:	100b883a 	mov	r5,r2
 20041e8:	01803fc4 	movi	r6,255
 20041ec:	000f883a 	mov	r7,zero
 20041f0:	200370c0 	call	200370c <vid_print_string_alpha>



}
 20041f4:	e037883a 	mov	sp,fp
 20041f8:	dfc00117 	ldw	ra,4(sp)
 20041fc:	df000017 	ldw	fp,0(sp)
 2004200:	dec00204 	addi	sp,sp,8
 2004204:	f800283a 	ret

02004208 <GUI_DeskInit>:

void GUI_DeskInit(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
 2004208:	deffef04 	addi	sp,sp,-68
 200420c:	dfc01015 	stw	ra,64(sp)
 2004210:	df000f15 	stw	fp,60(sp)
 2004214:	df000f04 	addi	fp,sp,60
 2004218:	e13ffe15 	stw	r4,-8(fp)
 200421c:	e17fff15 	stw	r5,-4(fp)
    int i;
    RECT rc;
    const int BoxH = 40;
 2004220:	00800a04 	movi	r2,40
 2004224:	e0bff315 	stw	r2,-52(fp)
    const int BoxW = 40;
 2004228:	00800a04 	movi	r2,40
 200422c:	e0bff415 	stw	r2,-48(fp)
    const int GapH = 5;
 2004230:	00800144 	movi	r2,5
 2004234:	e0bff515 	stw	r2,-44(fp)
    const int DrawBorder = 2;
 2004238:	00800084 	movi	r2,2
 200423c:	e0bff615 	stw	r2,-40(fp)
    const int TextW = 0;
 2004240:	e03ff715 	stw	zero,-36(fp)
    const int ClearExtraW = 30;
 2004244:	00800784 	movi	r2,30
 2004248:	e0bff815 	stw	r2,-32(fp)
    int GapW;

    
    GapW = (pDisplay->width - TextW - ClearExtraW - (BTN_NUM*BoxW))/(BTN_NUM+1);
 200424c:	e0bffe17 	ldw	r2,-8(fp)
 2004250:	10c00117 	ldw	r3,4(r2)
 2004254:	e0bff717 	ldw	r2,-36(fp)
 2004258:	1887c83a 	sub	r3,r3,r2
 200425c:	e0bff817 	ldw	r2,-32(fp)
 2004260:	1887c83a 	sub	r3,r3,r2
 2004264:	e0bff417 	ldw	r2,-48(fp)
 2004268:	10bffee4 	muli	r2,r2,-5
 200426c:	1885883a 	add	r2,r3,r2
 2004270:	1009883a 	mov	r4,r2
 2004274:	01400184 	movi	r5,6
 2004278:	200827c0 	call	200827c <__divsi3>
 200427c:	e0bff915 	stw	r2,-28(fp)
    //printf("GapW=%d\r\n", GapW);
    rc.top = pDisplay->height - BoxH - GapH;
 2004280:	e0bffe17 	ldw	r2,-8(fp)
 2004284:	10c00217 	ldw	r3,8(r2)
 2004288:	e0bff317 	ldw	r2,-52(fp)
 200428c:	1887c83a 	sub	r3,r3,r2
 2004290:	e0bff517 	ldw	r2,-44(fp)
 2004294:	1885c83a 	sub	r2,r3,r2
 2004298:	e0bffc15 	stw	r2,-16(fp)
    rc.bottom = rc.top + BoxH;
 200429c:	e0fffc17 	ldw	r3,-16(fp)
 20042a0:	e0bff317 	ldw	r2,-52(fp)
 20042a4:	1885883a 	add	r2,r3,r2
 20042a8:	e0bffd15 	stw	r2,-12(fp)
    rc.left = GapW + TextW + ClearExtraW;
 20042ac:	e0fff917 	ldw	r3,-28(fp)
 20042b0:	e0bff717 	ldw	r2,-36(fp)
 20042b4:	1887883a 	add	r3,r3,r2
 20042b8:	e0bff817 	ldw	r2,-32(fp)
 20042bc:	1885883a 	add	r2,r3,r2
 20042c0:	e0bffa15 	stw	r2,-24(fp)
    rc.right = rc.left + BoxW;
 20042c4:	e0fffa17 	ldw	r3,-24(fp)
 20042c8:	e0bff417 	ldw	r2,-48(fp)
 20042cc:	1885883a 	add	r2,r3,r2
 20042d0:	e0bffb15 	stw	r2,-20(fp)
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
 20042d4:	e0bfff17 	ldw	r2,-4(fp)
 20042d8:	10c00104 	addi	r3,r2,4
 20042dc:	e0bffe17 	ldw	r2,-8(fp)
 20042e0:	11000117 	ldw	r4,4(r2)
 20042e4:	e0bff617 	ldw	r2,-40(fp)
 20042e8:	2085c83a 	sub	r2,r4,r2
 20042ec:	e17ffc17 	ldw	r5,-16(fp)
 20042f0:	e13ff617 	ldw	r4,-40(fp)
 20042f4:	2909c83a 	sub	r4,r5,r4
 20042f8:	d9000015 	stw	r4,0(sp)
 20042fc:	1809883a 	mov	r4,r3
 2004300:	e17ff617 	ldw	r5,-40(fp)
 2004304:	100d883a 	mov	r6,r2
 2004308:	e1fff617 	ldw	r7,-40(fp)
 200430c:	20002c40 	call	20002c4 <RectSet>
    
    for(i=0;i<BTN_NUM;i++){
 2004310:	e03ff215 	stw	zero,-56(fp)
 2004314:	00002206 	br	20043a0 <GUI_DeskInit+0x198>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
 2004318:	e0bff217 	ldw	r2,-56(fp)
 200431c:	10800044 	addi	r2,r2,1
 2004320:	10800524 	muli	r2,r2,20
 2004324:	e0ffff17 	ldw	r3,-4(fp)
 2004328:	1887883a 	add	r3,r3,r2
 200432c:	e0bffa04 	addi	r2,fp,-24
 2004330:	1809883a 	mov	r4,r3
 2004334:	100b883a 	mov	r5,r2
 2004338:	20004300 	call	2000430 <RectCopy>
        pDeskInfo->szPalette[i].color = szPallete[i];
 200433c:	00c080f4 	movhi	r3,515
 2004340:	18c16804 	addi	r3,r3,1440
 2004344:	e0bff217 	ldw	r2,-56(fp)
 2004348:	1085883a 	add	r2,r2,r2
 200434c:	1085883a 	add	r2,r2,r2
 2004350:	1885883a 	add	r2,r3,r2
 2004354:	10800017 	ldw	r2,0(r2)
 2004358:	1007883a 	mov	r3,r2
 200435c:	e13fff17 	ldw	r4,-4(fp)
 2004360:	e0bff217 	ldw	r2,-56(fp)
 2004364:	10800524 	muli	r2,r2,20
 2004368:	2085883a 	add	r2,r4,r2
 200436c:	10800904 	addi	r2,r2,36
 2004370:	10c00015 	stw	r3,0(r2)
        RectOffset(&rc, BoxW+GapW, 0);
 2004374:	e0fff417 	ldw	r3,-48(fp)
 2004378:	e0bff917 	ldw	r2,-28(fp)
 200437c:	1885883a 	add	r2,r3,r2
 2004380:	e0fffa04 	addi	r3,fp,-24
 2004384:	1809883a 	mov	r4,r3
 2004388:	100b883a 	mov	r5,r2
 200438c:	000d883a 	mov	r6,zero
 2004390:	20003a80 	call	20003a8 <RectOffset>
    rc.right = rc.left + BoxW;
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
    
    for(i=0;i<BTN_NUM;i++){
 2004394:	e0bff217 	ldw	r2,-56(fp)
 2004398:	10800044 	addi	r2,r2,1
 200439c:	e0bff215 	stw	r2,-56(fp)
 20043a0:	e0bff217 	ldw	r2,-56(fp)
 20043a4:	10800150 	cmplti	r2,r2,5
 20043a8:	103fdb1e 	bne	r2,zero,2004318 <GUI_DeskInit+0x110>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
        pDeskInfo->szPalette[i].color = szPallete[i];
        RectOffset(&rc, BoxW+GapW, 0);
    }
    pDeskInfo->szPalette[BTN_CLEAR].rc.left -= ClearExtraW;
 20043ac:	e0bfff17 	ldw	r2,-4(fp)
 20043b0:	10c00517 	ldw	r3,20(r2)
 20043b4:	e0bff817 	ldw	r2,-32(fp)
 20043b8:	1887c83a 	sub	r3,r3,r2
 20043bc:	e0bfff17 	ldw	r2,-4(fp)
 20043c0:	10c00515 	stw	r3,20(r2)
    pDeskInfo->Paint_Index = BTN_BLUE;
 20043c4:	e0bfff17 	ldw	r2,-4(fp)
 20043c8:	00c00084 	movi	r3,2
 20043cc:	10c00015 	stw	r3,0(r2)
}
 20043d0:	e037883a 	mov	sp,fp
 20043d4:	dfc00117 	ldw	ra,4(sp)
 20043d8:	df000017 	ldw	fp,0(sp)
 20043dc:	dec00204 	addi	sp,sp,8
 20043e0:	f800283a 	ret

020043e4 <GUI_CheckButton>:

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
 20043e4:	defffa04 	addi	sp,sp,-24
 20043e8:	dfc00515 	stw	ra,20(sp)
 20043ec:	df000415 	stw	fp,16(sp)
 20043f0:	df000404 	addi	fp,sp,16
 20043f4:	e13ffe15 	stw	r4,-8(fp)
 20043f8:	e17fff15 	stw	r5,-4(fp)
    int ButtonId = BTN_NONE;
 20043fc:	00800184 	movi	r2,6
 2004400:	e0bffc15 	stw	r2,-16(fp)
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
 2004404:	e03ffd15 	stw	zero,-12(fp)
 2004408:	00000e06 	br	2004444 <GUI_CheckButton+0x60>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
 200440c:	e0bffd17 	ldw	r2,-12(fp)
 2004410:	10800044 	addi	r2,r2,1
 2004414:	10800524 	muli	r2,r2,20
 2004418:	e0fffe17 	ldw	r3,-8(fp)
 200441c:	1885883a 	add	r2,r3,r2
 2004420:	e13fff17 	ldw	r4,-4(fp)
 2004424:	100b883a 	mov	r5,r2
 2004428:	20002000 	call	2000200 <IsPtInRect>
 200442c:	10000226 	beq	r2,zero,2004438 <GUI_CheckButton+0x54>
            ButtonId = i;
 2004430:	e0bffd17 	ldw	r2,-12(fp)
 2004434:	e0bffc15 	stw	r2,-16(fp)

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    int ButtonId = BTN_NONE;
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
 2004438:	e0bffd17 	ldw	r2,-12(fp)
 200443c:	10800044 	addi	r2,r2,1
 2004440:	e0bffd15 	stw	r2,-12(fp)
 2004444:	e0bffd17 	ldw	r2,-12(fp)
 2004448:	10800148 	cmpgei	r2,r2,5
 200444c:	1000031e 	bne	r2,zero,200445c <GUI_CheckButton+0x78>
 2004450:	e0bffc17 	ldw	r2,-16(fp)
 2004454:	108001a0 	cmpeqi	r2,r2,6
 2004458:	103fec1e 	bne	r2,zero,200440c <GUI_CheckButton+0x28>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
            ButtonId = i;
    }
    return ButtonId;
 200445c:	e0bffc17 	ldw	r2,-16(fp)
}
 2004460:	e037883a 	mov	sp,fp
 2004464:	dfc00117 	ldw	ra,4(sp)
 2004468:	df000017 	ldw	fp,0(sp)
 200446c:	dec00204 	addi	sp,sp,8
 2004470:	f800283a 	ret

02004474 <GUI_DeskDraw>:

void GUI_DeskDraw(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
 2004474:	defff104 	addi	sp,sp,-60
 2004478:	dfc00e15 	stw	ra,56(sp)
 200447c:	df000d15 	stw	fp,52(sp)
 2004480:	dc400c15 	stw	r17,48(sp)
 2004484:	dc000b15 	stw	r16,44(sp)
 2004488:	df000b04 	addi	fp,sp,44
 200448c:	e13ffe15 	stw	r4,-8(fp)
 2004490:	e17fff15 	stw	r5,-4(fp)
    // show text
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch");

    // draw border
    RectCopy(&rc, &pDeskInfo->rcPaint);
 2004494:	e0bfff17 	ldw	r2,-4(fp)
 2004498:	10800104 	addi	r2,r2,4
 200449c:	e0fffa04 	addi	r3,fp,-24
 20044a0:	1809883a 	mov	r4,r3
 20044a4:	100b883a 	mov	r5,r2
 20044a8:	20004300 	call	2000430 <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
 20044ac:	e13ffa17 	ldw	r4,-24(fp)
 20044b0:	e17ffc17 	ldw	r5,-16(fp)
 20044b4:	e0fffb17 	ldw	r3,-20(fp)
 20044b8:	e0bffd17 	ldw	r2,-12(fp)
 20044bc:	01804034 	movhi	r6,256
 20044c0:	31bfffc4 	addi	r6,r6,-1
 20044c4:	d9800015 	stw	r6,0(sp)
 20044c8:	d8000115 	stw	zero,4(sp)
 20044cc:	e1bffe17 	ldw	r6,-8(fp)
 20044d0:	d9800215 	stw	r6,8(sp)
 20044d4:	180d883a 	mov	r6,r3
 20044d8:	100f883a 	mov	r7,r2
 20044dc:	20018d00 	call	20018d0 <vid_draw_box>
    

    // draw palette
	active = pDeskInfo->Paint_Index;
 20044e0:	e0bfff17 	ldw	r2,-4(fp)
 20044e4:	10800017 	ldw	r2,0(r2)
 20044e8:	e0bff915 	stw	r2,-28(fp)
    for(i=0;i<BTN_NUM;i++){
 20044ec:	e03ff815 	stw	zero,-32(fp)
 20044f0:	00006406 	br	2004684 <GUI_DeskDraw+0x210>
        RectCopy(&rc, &(pDeskInfo->szPalette[i].rc));
 20044f4:	e0bff817 	ldw	r2,-32(fp)
 20044f8:	10800044 	addi	r2,r2,1
 20044fc:	10800524 	muli	r2,r2,20
 2004500:	e0ffff17 	ldw	r3,-4(fp)
 2004504:	1885883a 	add	r2,r3,r2
 2004508:	e0fffa04 	addi	r3,fp,-24
 200450c:	1809883a 	mov	r4,r3
 2004510:	100b883a 	mov	r5,r2
 2004514:	20004300 	call	2000430 <RectCopy>
        if (i == BTN_CLEAR){
 2004518:	e0bff817 	ldw	r2,-32(fp)
 200451c:	1000301e 	bne	r2,zero,20045e0 <GUI_DeskDraw+0x16c>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_NOT_FILL, pDisplay);
 2004520:	e13ffa17 	ldw	r4,-24(fp)
 2004524:	e17ffc17 	ldw	r5,-16(fp)
 2004528:	e0fffb17 	ldw	r3,-20(fp)
 200452c:	e0bffd17 	ldw	r2,-12(fp)
 2004530:	e1ffff17 	ldw	r7,-4(fp)
 2004534:	e1bff817 	ldw	r6,-32(fp)
 2004538:	31800524 	muli	r6,r6,20
 200453c:	398d883a 	add	r6,r7,r6
 2004540:	31800904 	addi	r6,r6,36
 2004544:	31800017 	ldw	r6,0(r6)
 2004548:	d9800015 	stw	r6,0(sp)
 200454c:	d8000115 	stw	zero,4(sp)
 2004550:	e1bffe17 	ldw	r6,-8(fp)
 2004554:	d9800215 	stw	r6,8(sp)
 2004558:	180d883a 	mov	r6,r3
 200455c:	100f883a 	mov	r7,r2
 2004560:	20018d00 	call	20018d0 <vid_draw_box>
            vid_print_string_alpha(rc.left+8, rc.top+(RectHeight(&rc)-22)/2, pDeskInfo->szPalette[i].color, BLACK_24, tahomabold_20, pDisplay, "Clear");
 2004564:	e0bffa17 	ldw	r2,-24(fp)
 2004568:	14000204 	addi	r16,r2,8
 200456c:	e47ffc17 	ldw	r17,-16(fp)
 2004570:	e0bffa04 	addi	r2,fp,-24
 2004574:	1009883a 	mov	r4,r2
 2004578:	20004c80 	call	20004c8 <RectHeight>
 200457c:	10bffa84 	addi	r2,r2,-22
 2004580:	1006d7fa 	srli	r3,r2,31
 2004584:	1885883a 	add	r2,r3,r2
 2004588:	1005d07a 	srai	r2,r2,1
 200458c:	8887883a 	add	r3,r17,r2
 2004590:	e13fff17 	ldw	r4,-4(fp)
 2004594:	e0bff817 	ldw	r2,-32(fp)
 2004598:	10800524 	muli	r2,r2,20
 200459c:	2085883a 	add	r2,r4,r2
 20045a0:	10800904 	addi	r2,r2,36
 20045a4:	10800017 	ldw	r2,0(r2)
 20045a8:	010080f4 	movhi	r4,515
 20045ac:	213a8204 	addi	r4,r4,-5624
 20045b0:	d9000015 	stw	r4,0(sp)
 20045b4:	e13ffe17 	ldw	r4,-8(fp)
 20045b8:	d9000115 	stw	r4,4(sp)
 20045bc:	010080f4 	movhi	r4,515
 20045c0:	21390c04 	addi	r4,r4,-7120
 20045c4:	d9000215 	stw	r4,8(sp)
 20045c8:	8009883a 	mov	r4,r16
 20045cc:	180b883a 	mov	r5,r3
 20045d0:	100d883a 	mov	r6,r2
 20045d4:	000f883a 	mov	r7,zero
 20045d8:	200370c0 	call	200370c <vid_print_string_alpha>
 20045dc:	00002606 	br	2004678 <GUI_DeskDraw+0x204>
        }else{
        	if (active != i){
 20045e0:	e0fff917 	ldw	r3,-28(fp)
 20045e4:	e0bff817 	ldw	r2,-32(fp)
 20045e8:	18801126 	beq	r3,r2,2004630 <GUI_DeskDraw+0x1bc>
          		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
 20045ec:	e13ffa17 	ldw	r4,-24(fp)
 20045f0:	e17ffc17 	ldw	r5,-16(fp)
 20045f4:	e0fffb17 	ldw	r3,-20(fp)
 20045f8:	e0bffd17 	ldw	r2,-12(fp)
 20045fc:	d8000015 	stw	zero,0(sp)
 2004600:	01800044 	movi	r6,1
 2004604:	d9800115 	stw	r6,4(sp)
 2004608:	e1bffe17 	ldw	r6,-8(fp)
 200460c:	d9800215 	stw	r6,8(sp)
 2004610:	180d883a 	mov	r6,r3
 2004614:	100f883a 	mov	r7,r2
 2004618:	20018d00 	call	20018d0 <vid_draw_box>
        		RectInflate(&rc, -4, -4);
 200461c:	e0bffa04 	addi	r2,fp,-24
 2004620:	1009883a 	mov	r4,r2
 2004624:	017fff04 	movi	r5,-4
 2004628:	01bfff04 	movi	r6,-4
 200462c:	20003200 	call	2000320 <RectInflate>
        	}
      		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pDisplay);
 2004630:	e13ffa17 	ldw	r4,-24(fp)
 2004634:	e17ffc17 	ldw	r5,-16(fp)
 2004638:	e0fffb17 	ldw	r3,-20(fp)
 200463c:	e0bffd17 	ldw	r2,-12(fp)
 2004640:	e1ffff17 	ldw	r7,-4(fp)
 2004644:	e1bff817 	ldw	r6,-32(fp)
 2004648:	31800524 	muli	r6,r6,20
 200464c:	398d883a 	add	r6,r7,r6
 2004650:	31800904 	addi	r6,r6,36
 2004654:	31800017 	ldw	r6,0(r6)
 2004658:	d9800015 	stw	r6,0(sp)
 200465c:	01800044 	movi	r6,1
 2004660:	d9800115 	stw	r6,4(sp)
 2004664:	e1bffe17 	ldw	r6,-8(fp)
 2004668:	d9800215 	stw	r6,8(sp)
 200466c:	180d883a 	mov	r6,r3
 2004670:	100f883a 	mov	r7,r2
 2004674:	20018d00 	call	20018d0 <vid_draw_box>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
    

    // draw palette
	active = pDeskInfo->Paint_Index;
    for(i=0;i<BTN_NUM;i++){
 2004678:	e0bff817 	ldw	r2,-32(fp)
 200467c:	10800044 	addi	r2,r2,1
 2004680:	e0bff815 	stw	r2,-32(fp)
 2004684:	e0bff817 	ldw	r2,-32(fp)
 2004688:	10800150 	cmplti	r2,r2,5
 200468c:	103f991e 	bne	r2,zero,20044f4 <GUI_DeskDraw+0x80>
    //RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    //vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pDisplay, "2");
    
        
        
}
 2004690:	e037883a 	mov	sp,fp
 2004694:	dfc00317 	ldw	ra,12(sp)
 2004698:	df000217 	ldw	fp,8(sp)
 200469c:	dc400117 	ldw	r17,4(sp)
 20046a0:	dc000017 	ldw	r16,0(sp)
 20046a4:	dec00404 	addi	sp,sp,16
 20046a8:	f800283a 	ret

020046ac <IsContinuedPoint>:

bool IsContinuedPoint(POINT *ptPre, POINT *ptNew){
 20046ac:	defffb04 	addi	sp,sp,-20
 20046b0:	df000415 	stw	fp,16(sp)
 20046b4:	df000404 	addi	fp,sp,16
 20046b8:	e13ffe15 	stw	r4,-8(fp)
 20046bc:	e17fff15 	stw	r5,-4(fp)
    bool bYes = TRUE;
 20046c0:	00800044 	movi	r2,1
 20046c4:	e0bffc15 	stw	r2,-16(fp)
    const int nMax = 50;
 20046c8:	00800c84 	movi	r2,50
 20046cc:	e0bffd15 	stw	r2,-12(fp)
    if (abs(ptPre->x - ptNew->x) > nMax)
 20046d0:	e0bffe17 	ldw	r2,-8(fp)
 20046d4:	10c00017 	ldw	r3,0(r2)
 20046d8:	e0bfff17 	ldw	r2,-4(fp)
 20046dc:	10800017 	ldw	r2,0(r2)
 20046e0:	1885c83a 	sub	r2,r3,r2
 20046e4:	1000010e 	bge	r2,zero,20046ec <IsContinuedPoint+0x40>
 20046e8:	0085c83a 	sub	r2,zero,r2
 20046ec:	e0fffd17 	ldw	r3,-12(fp)
 20046f0:	1880020e 	bge	r3,r2,20046fc <IsContinuedPoint+0x50>
        bYes = FALSE;
 20046f4:	e03ffc15 	stw	zero,-16(fp)
 20046f8:	00000a06 	br	2004724 <IsContinuedPoint+0x78>
    else if (abs(ptPre->y - ptNew->y) > nMax)
 20046fc:	e0bffe17 	ldw	r2,-8(fp)
 2004700:	10c00117 	ldw	r3,4(r2)
 2004704:	e0bfff17 	ldw	r2,-4(fp)
 2004708:	10800117 	ldw	r2,4(r2)
 200470c:	1885c83a 	sub	r2,r3,r2
 2004710:	1000010e 	bge	r2,zero,2004718 <IsContinuedPoint+0x6c>
 2004714:	0085c83a 	sub	r2,zero,r2
 2004718:	e0fffd17 	ldw	r3,-12(fp)
 200471c:	1880010e 	bge	r3,r2,2004724 <IsContinuedPoint+0x78>
        bYes = FALSE;
 2004720:	e03ffc15 	stw	zero,-16(fp)
        
    return bYes;        
 2004724:	e0bffc17 	ldw	r2,-16(fp)
        
}
 2004728:	e037883a 	mov	sp,fp
 200472c:	df000017 	ldw	fp,0(sp)
 2004730:	dec00104 	addi	sp,sp,4
 2004734:	f800283a 	ret

02004738 <GUI_ClearPaintArea>:



void GUI_ClearPaintArea(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
 2004738:	defff504 	addi	sp,sp,-44
 200473c:	dfc00a15 	stw	ra,40(sp)
 2004740:	df000915 	stw	fp,36(sp)
 2004744:	df000904 	addi	fp,sp,36
 2004748:	e13ffe15 	stw	r4,-8(fp)
 200474c:	e17fff15 	stw	r5,-4(fp)
    RECT rc;
    RectCopy(&rc, &pDeskInfo->rcPaint);
 2004750:	e0bfff17 	ldw	r2,-4(fp)
 2004754:	10800104 	addi	r2,r2,4
 2004758:	e13ffa04 	addi	r4,fp,-24
 200475c:	100b883a 	mov	r5,r2
 2004760:	20004300 	call	2000430 <RectCopy>
    RectInflate(&rc, -1, -1);
 2004764:	e13ffa04 	addi	r4,fp,-24
 2004768:	017fffc4 	movi	r5,-1
 200476c:	01bfffc4 	movi	r6,-1
 2004770:	20003200 	call	2000320 <RectInflate>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
 2004774:	e13ffa17 	ldw	r4,-24(fp)
 2004778:	e17ffc17 	ldw	r5,-16(fp)
 200477c:	e0fffb17 	ldw	r3,-20(fp)
 2004780:	e0bffd17 	ldw	r2,-12(fp)
 2004784:	d8000015 	stw	zero,0(sp)
 2004788:	01800044 	movi	r6,1
 200478c:	d9800115 	stw	r6,4(sp)
 2004790:	e1bffe17 	ldw	r6,-8(fp)
 2004794:	d9800215 	stw	r6,8(sp)
 2004798:	180d883a 	mov	r6,r3
 200479c:	100f883a 	mov	r7,r2
 20047a0:	20018d00 	call	20018d0 <vid_draw_box>
    //
  //  RectCopy(&rc, &pDeskInfo->szPalette[BTN_GESTRUE].rc);
  //  vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
}
 20047a4:	e037883a 	mov	sp,fp
 20047a8:	dfc00117 	ldw	ra,4(sp)
 20047ac:	df000017 	ldw	fp,0(sp)
 20047b0:	dec00204 	addi	sp,sp,8
 20047b4:	f800283a 	ret

020047b8 <GUI>:

//void GUI(MTC_INFO *pTouch){
void GUI(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
 20047b8:	deffd004 	addi	sp,sp,-192
 20047bc:	dfc02f15 	stw	ra,188(sp)
 20047c0:	df002e15 	stw	fp,184(sp)
 20047c4:	df002e04 	addi	fp,sp,184
 20047c8:	e13ffe15 	stw	r4,-8(fp)
 20047cc:	e17fff15 	stw	r5,-4(fp)
    // video
    DESK_INFO DeskInfo;
    int X, Y;
    POINT Pt;
    const int nDotSize = DOT_SIZE;
 20047d0:	00800144 	movi	r2,5
 20047d4:	e0bfd615 	stw	r2,-168(fp)
    


    
    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
 20047d8:	e13ffe17 	ldw	r4,-8(fp)
 20047dc:	000b883a 	mov	r5,zero
 20047e0:	200106c0 	call	200106c <vid_clean_screen>
    
    // Show Terasic Welcome
    GUI_ShowWelcome(pDisplay);
 20047e4:	e13ffe17 	ldw	r4,-8(fp)
 20047e8:	20041380 	call	2004138 <GUI_ShowWelcome>
    usleep(1*1000*1000);
 20047ec:	010003f4 	movhi	r4,15
 20047f0:	21109004 	addi	r4,r4,16960
 20047f4:	20119800 	call	2011980 <usleep>
    vid_clean_screen(pDisplay, BLACK_24);
 20047f8:	e13ffe17 	ldw	r4,-8(fp)
 20047fc:	000b883a 	mov	r5,zero
 2004800:	200106c0 	call	200106c <vid_clean_screen>

   
    GUI_DeskInit(pDisplay, &DeskInfo);
 2004804:	e0bfd804 	addi	r2,fp,-160
 2004808:	e13ffe17 	ldw	r4,-8(fp)
 200480c:	100b883a 	mov	r5,r2
 2004810:	20042080 	call	2004208 <GUI_DeskInit>
    GUI_DeskDraw(pDisplay, &DeskInfo);
 2004814:	e0bfd804 	addi	r2,fp,-160
 2004818:	e13ffe17 	ldw	r4,-8(fp)
 200481c:	100b883a 	mov	r5,r2
 2004820:	20044740 	call	2004474 <GUI_DeskDraw>
    
   // VIPFR_ActiveDrawFrame(pReader);
    
    RectCopy(&rcTouch, &DeskInfo.rcPaint);
 2004824:	e0fffa04 	addi	r3,fp,-24
 2004828:	e0bfd804 	addi	r2,fp,-160
 200482c:	10800104 	addi	r2,r2,4
 2004830:	1809883a 	mov	r4,r3
 2004834:	100b883a 	mov	r5,r2
 2004838:	20004300 	call	2000430 <RectCopy>
    RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);
 200483c:	00ffff84 	movi	r3,-2
 2004840:	e0bfd617 	ldw	r2,-168(fp)
 2004844:	1887c83a 	sub	r3,r3,r2
 2004848:	013fff84 	movi	r4,-2
 200484c:	e0bfd617 	ldw	r2,-168(fp)
 2004850:	2085c83a 	sub	r2,r4,r2
 2004854:	e13ffa04 	addi	r4,fp,-24
 2004858:	180b883a 	mov	r5,r3
 200485c:	100d883a 	mov	r6,r2
 2004860:	20003200 	call	2000320 <RectInflate>
    
    ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
 2004864:	e0bfd817 	ldw	r2,-160(fp)
 2004868:	10800524 	muli	r2,r2,20
 200486c:	e0ffd404 	addi	r3,fp,-176
 2004870:	1885883a 	add	r2,r3,r2
 2004874:	10800d04 	addi	r2,r2,52
 2004878:	10800017 	ldw	r2,0(r2)
 200487c:	e0bfd415 	stw	r2,-176(fp)
 2004880:	00000106 	br	2004888 <GUI+0xd0>
                            Touch_EmptyFifo(pTouch);
                        }
                    }
                }
            } // if touch
        } // while
 2004884:	0001883a 	nop
  //  printf("ContinuedTime=%d\r\n", ContinuedTime);
   // PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);

    while(1){
            // touch
            if (Touch_GetXY(pTouch, &X, &Y)){
 2004888:	e0fff604 	addi	r3,fp,-40
 200488c:	e0bff704 	addi	r2,fp,-36
 2004890:	e13fff17 	ldw	r4,-4(fp)
 2004894:	180b883a 	mov	r5,r3
 2004898:	100d883a 	mov	r6,r2
 200489c:	2006afc0 	call	2006afc <Touch_GetXY>
 20048a0:	103ff826 	beq	r2,zero,2004884 <GUI+0xcc>
           //     IOWR(LED_BASE, 0x00, LedMask);
             //   LedMask <<= 1;
             //   if (LedMask == 0x00)
               //     LedMask = 0x01;
                //
                printf("x=%d, y=%d\r\n", X,Y);
 20048a4:	e0fff617 	ldw	r3,-40(fp)
 20048a8:	e0bff717 	ldw	r2,-36(fp)
 20048ac:	010080f4 	movhi	r4,515
 20048b0:	21390e04 	addi	r4,r4,-7112
 20048b4:	180b883a 	mov	r5,r3
 20048b8:	100d883a 	mov	r6,r2
 20048bc:	20092800 	call	2009280 <printf>
                PtSet(&Pt, X, Y);
 20048c0:	e0fff617 	ldw	r3,-40(fp)
 20048c4:	e0bff717 	ldw	r2,-36(fp)
 20048c8:	e13ff804 	addi	r4,fp,-32
 20048cc:	180b883a 	mov	r5,r3
 20048d0:	100d883a 	mov	r6,r2
 20048d4:	20002840 	call	2000284 <PtSet>


             //   printf("t:%d, %d\r\n", (int)alt_nticks(), LastTimePt1);
                //
                if ( IsPtInRect(&Pt, &rcTouch)){
 20048d8:	e0fff804 	addi	r3,fp,-32
 20048dc:	e0bffa04 	addi	r2,fp,-24
 20048e0:	1809883a 	mov	r4,r3
 20048e4:	100b883a 	mov	r5,r2
 20048e8:	20002000 	call	2000200 <IsPtInRect>
 20048ec:	10000c26 	beq	r2,zero,2004920 <GUI+0x168>

                    vid_draw_circle(Pt.x, Pt.y, nDotSize, ColorPen, DO_FILL, pDisplay);
 20048f0:	e0fff817 	ldw	r3,-32(fp)
 20048f4:	e0bff917 	ldw	r2,-28(fp)
 20048f8:	01000044 	movi	r4,1
 20048fc:	d9000015 	stw	r4,0(sp)
 2004900:	e13ffe17 	ldw	r4,-8(fp)
 2004904:	d9000115 	stw	r4,4(sp)
 2004908:	1809883a 	mov	r4,r3
 200490c:	100b883a 	mov	r5,r2
 2004910:	e1bfd617 	ldw	r6,-168(fp)
 2004914:	e1ffd417 	ldw	r7,-176(fp)
 2004918:	20020f00 	call	20020f0 <vid_draw_circle>
                            Touch_EmptyFifo(pTouch);
                        }
                    }
                }
            } // if touch
        } // while
 200491c:	003fd906 	br	2004884 <GUI+0xcc>
                //
                if ( IsPtInRect(&Pt, &rcTouch)){

                    vid_draw_circle(Pt.x, Pt.y, nDotSize, ColorPen, DO_FILL, pDisplay);
                   // VIPFR_ActiveDrawFrame(pReader);
                }else if (GUI_CheckButton(&DeskInfo, &Pt) == BTN_CLEAR){
 2004920:	e0ffd804 	addi	r3,fp,-160
 2004924:	e0bff804 	addi	r2,fp,-32
 2004928:	1809883a 	mov	r4,r3
 200492c:	100b883a 	mov	r5,r2
 2004930:	20043e40 	call	20043e4 <GUI_CheckButton>
 2004934:	1000071e 	bne	r2,zero,2004954 <GUI+0x19c>
                    GUI_ClearPaintArea(pDisplay, &DeskInfo);
 2004938:	e0bfd804 	addi	r2,fp,-160
 200493c:	e13ffe17 	ldw	r4,-8(fp)
 2004940:	100b883a 	mov	r5,r2
 2004944:	20047380 	call	2004738 <GUI_ClearPaintArea>
                  //  VIPFR_ActiveDrawFrame(pReader);
                    Touch_EmptyFifo(pTouch);
 2004948:	e13fff17 	ldw	r4,-4(fp)
 200494c:	2006ac40 	call	2006ac4 <Touch_EmptyFifo>
                            Touch_EmptyFifo(pTouch);
                        }
                    }
                }
            } // if touch
        } // while
 2004950:	003fcc06 	br	2004884 <GUI+0xcc>
                }else if (GUI_CheckButton(&DeskInfo, &Pt) == BTN_CLEAR){
                    GUI_ClearPaintArea(pDisplay, &DeskInfo);
                  //  VIPFR_ActiveDrawFrame(pReader);
                    Touch_EmptyFifo(pTouch);
                }else {
                    ButtonId = GUI_CheckButton(&DeskInfo, &Pt);
 2004954:	e0ffd804 	addi	r3,fp,-160
 2004958:	e0bff804 	addi	r2,fp,-32
 200495c:	1809883a 	mov	r4,r3
 2004960:	100b883a 	mov	r5,r2
 2004964:	20043e40 	call	20043e4 <GUI_CheckButton>
 2004968:	e0bfd715 	stw	r2,-164(fp)
                    UpdatePalette = FALSE;
 200496c:	e03fd515 	stw	zero,-172(fp)
                    if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR){
 2004970:	e0bfd717 	ldw	r2,-164(fp)
 2004974:	108001a0 	cmpeqi	r2,r2,6
 2004978:	103fc21e 	bne	r2,zero,2004884 <GUI+0xcc>
 200497c:	e0bfd717 	ldw	r2,-164(fp)
 2004980:	103fc026 	beq	r2,zero,2004884 <GUI+0xcc>
                        // chang draw color
                        if ( ButtonId != DeskInfo.Paint_Index ){
 2004984:	e0ffd817 	ldw	r3,-160(fp)
 2004988:	e0bfd717 	ldw	r2,-164(fp)
 200498c:	18800426 	beq	r3,r2,20049a0 <GUI+0x1e8>
                            DeskInfo.Paint_Index = ButtonId;
 2004990:	e0bfd717 	ldw	r2,-164(fp)
 2004994:	e0bfd815 	stw	r2,-160(fp)
                            UpdatePalette = TRUE;
 2004998:	00800044 	movi	r2,1
 200499c:	e0bfd515 	stw	r2,-172(fp)
                            //
                        }

                        if (UpdatePalette){
 20049a0:	e0bfd517 	ldw	r2,-172(fp)
 20049a4:	103fb726 	beq	r2,zero,2004884 <GUI+0xcc>
                            ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
 20049a8:	e0bfd817 	ldw	r2,-160(fp)
 20049ac:	10800524 	muli	r2,r2,20
 20049b0:	e0ffd404 	addi	r3,fp,-176
 20049b4:	1885883a 	add	r2,r3,r2
 20049b8:	10800d04 	addi	r2,r2,52
 20049bc:	10800017 	ldw	r2,0(r2)
 20049c0:	e0bfd415 	stw	r2,-176(fp)
                            GUI_DeskDraw(pDisplay, &DeskInfo);
 20049c4:	e0bfd804 	addi	r2,fp,-160
 20049c8:	e13ffe17 	ldw	r4,-8(fp)
 20049cc:	100b883a 	mov	r5,r2
 20049d0:	20044740 	call	2004474 <GUI_DeskDraw>
                        //    VIPFR_ActiveDrawFrame(pReader);
                            Touch_EmptyFifo(pTouch);
 20049d4:	e13fff17 	ldw	r4,-4(fp)
 20049d8:	2006ac40 	call	2006ac4 <Touch_EmptyFifo>
                        }
                    }
                }
            } // if touch
        } // while
 20049dc:	003fa906 	br	2004884 <GUI+0xcc>

020049e0 <GUI_ShowInfo>:
    
}



void GUI_ShowInfo(alt_video_display *pDisplay, char *pText){
 20049e0:	defff904 	addi	sp,sp,-28
 20049e4:	dfc00615 	stw	ra,24(sp)
 20049e8:	df000515 	stw	fp,20(sp)
 20049ec:	df000504 	addi	fp,sp,20
 20049f0:	e13ffe15 	stw	r4,-8(fp)
 20049f4:	e17fff15 	stw	r5,-4(fp)
    static int x=0,y=100;
   // vid_clean_screen(pReader, BLACK_24);
    vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, pText);
 20049f8:	d0e01417 	ldw	r3,-32688(gp)
 20049fc:	d0a00117 	ldw	r2,-32764(gp)
 2004a00:	010080f4 	movhi	r4,515
 2004a04:	213a8204 	addi	r4,r4,-5624
 2004a08:	d9000015 	stw	r4,0(sp)
 2004a0c:	e13ffe17 	ldw	r4,-8(fp)
 2004a10:	d9000115 	stw	r4,4(sp)
 2004a14:	e13fff17 	ldw	r4,-4(fp)
 2004a18:	d9000215 	stw	r4,8(sp)
 2004a1c:	1809883a 	mov	r4,r3
 2004a20:	100b883a 	mov	r5,r2
 2004a24:	01803fc4 	movi	r6,255
 2004a28:	000f883a 	mov	r7,zero
 2004a2c:	200370c0 	call	200370c <vid_print_string_alpha>
 //   VIPFR_ActiveDrawFrame(pReader);
}
 2004a30:	e037883a 	mov	sp,fp
 2004a34:	dfc00117 	ldw	ra,4(sp)
 2004a38:	df000017 	ldw	fp,0(sp)
 2004a3c:	dec00204 	addi	sp,sp,8
 2004a40:	f800283a 	ret

02004a44 <GUI_ShowTouchPoint>:

void GUI_ShowTouchPoint(alt_video_display *pDisplay, int X, int Y, int color){
 2004a44:	defff804 	addi	sp,sp,-32
 2004a48:	dfc00715 	stw	ra,28(sp)
 2004a4c:	df000615 	stw	fp,24(sp)
 2004a50:	df000604 	addi	fp,sp,24
 2004a54:	e13ffc15 	stw	r4,-16(fp)
 2004a58:	e17ffd15 	stw	r5,-12(fp)
 2004a5c:	e1bffe15 	stw	r6,-8(fp)
 2004a60:	e1ffff15 	stw	r7,-4(fp)
    vid_draw_circle(X, Y, 10, color, DO_FILL, pDisplay);
 2004a64:	00800044 	movi	r2,1
 2004a68:	d8800015 	stw	r2,0(sp)
 2004a6c:	e0bffc17 	ldw	r2,-16(fp)
 2004a70:	d8800115 	stw	r2,4(sp)
 2004a74:	e13ffd17 	ldw	r4,-12(fp)
 2004a78:	e17ffe17 	ldw	r5,-8(fp)
 2004a7c:	01800284 	movi	r6,10
 2004a80:	e1ffff17 	ldw	r7,-4(fp)
 2004a84:	20020f00 	call	20020f0 <vid_draw_circle>
   // VIPFR_ActiveDrawFrame(pReader);
}
 2004a88:	e037883a 	mov	sp,fp
 2004a8c:	dfc00117 	ldw	ra,4(sp)
 2004a90:	df000017 	ldw	fp,0(sp)
 2004a94:	dec00204 	addi	sp,sp,8
 2004a98:	f800283a 	ret

02004a9c <ShowInfo>:
#include "simple_graphics.h"
#include "geometry.h"



void ShowInfo(alt_video_display *pDisplay, char *pText){
 2004a9c:	defff904 	addi	sp,sp,-28
 2004aa0:	dfc00615 	stw	ra,24(sp)
 2004aa4:	df000515 	stw	fp,20(sp)
 2004aa8:	df000504 	addi	fp,sp,20
 2004aac:	e13ffe15 	stw	r4,-8(fp)
 2004ab0:	e17fff15 	stw	r5,-4(fp)
    vid_print_string_alpha(1, 1, WHITE_24, BLACK_24, tahomabold_20, pDisplay, pText);
 2004ab4:	008080f4 	movhi	r2,515
 2004ab8:	10ba8204 	addi	r2,r2,-5624
 2004abc:	d8800015 	stw	r2,0(sp)
 2004ac0:	e0bffe17 	ldw	r2,-8(fp)
 2004ac4:	d8800115 	stw	r2,4(sp)
 2004ac8:	e0bfff17 	ldw	r2,-4(fp)
 2004acc:	d8800215 	stw	r2,8(sp)
 2004ad0:	01000044 	movi	r4,1
 2004ad4:	01400044 	movi	r5,1
 2004ad8:	01804034 	movhi	r6,256
 2004adc:	31bfffc4 	addi	r6,r6,-1
 2004ae0:	000f883a 	mov	r7,zero
 2004ae4:	200370c0 	call	200370c <vid_print_string_alpha>
}
 2004ae8:	e037883a 	mov	sp,fp
 2004aec:	dfc00117 	ldw	ra,4(sp)
 2004af0:	df000017 	ldw	fp,0(sp)
 2004af4:	dec00204 	addi	sp,sp,8
 2004af8:	f800283a 	ret

02004afc <VPG_XLine>:


void VPG_XLine(alt_video_display *pDisplay){
 2004afc:	defffe04 	addi	sp,sp,-8
 2004b00:	df000115 	stw	fp,4(sp)
 2004b04:	df000104 	addi	fp,sp,4
 2004b08:	e13fff15 	stw	r4,-4(fp)
return ;
 2004b0c:	0001883a 	nop

    // show text
    ShowInfo(pDisplay, "X Line");


}
 2004b10:	e037883a 	mov	sp,fp
 2004b14:	df000017 	ldw	fp,0(sp)
 2004b18:	dec00104 	addi	sp,sp,4
 2004b1c:	f800283a 	ret

02004b20 <VPG_ColorPanel>:


void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
 2004b20:	defff204 	addi	sp,sp,-56
 2004b24:	dfc00d15 	stw	ra,52(sp)
 2004b28:	df000c15 	stw	fp,48(sp)
 2004b2c:	df000c04 	addi	fp,sp,48
 2004b30:	e13ffe15 	stw	r4,-8(fp)
 2004b34:	e17fff15 	stw	r5,-4(fp)
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 2004b38:	e03ff515 	stw	zero,-44(fp)
 2004b3c:	00001106 	br	2004b84 <VPG_ColorPanel+0x64>
        for(x=0;x<pDisplay->width;x++){
 2004b40:	e03ff415 	stw	zero,-48(fp)
 2004b44:	00000806 	br	2004b68 <VPG_ColorPanel+0x48>
        	vid_set_pixel(x,y,Color, pDisplay);
 2004b48:	e13ff417 	ldw	r4,-48(fp)
 2004b4c:	e17ff517 	ldw	r5,-44(fp)
 2004b50:	e1bfff17 	ldw	r6,-4(fp)
 2004b54:	e1fffe17 	ldw	r7,-8(fp)
 2004b58:	2001b100 	call	2001b10 <vid_set_pixel>
void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 2004b5c:	e0bff417 	ldw	r2,-48(fp)
 2004b60:	10800044 	addi	r2,r2,1
 2004b64:	e0bff415 	stw	r2,-48(fp)
 2004b68:	e0bffe17 	ldw	r2,-8(fp)
 2004b6c:	10800117 	ldw	r2,4(r2)
 2004b70:	e0fff417 	ldw	r3,-48(fp)
 2004b74:	18bff416 	blt	r3,r2,2004b48 <VPG_ColorPanel+0x28>

void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 2004b78:	e0bff517 	ldw	r2,-44(fp)
 2004b7c:	10800044 	addi	r2,r2,1
 2004b80:	e0bff515 	stw	r2,-44(fp)
 2004b84:	e0bffe17 	ldw	r2,-8(fp)
 2004b88:	10800217 	ldw	r2,8(r2)
 2004b8c:	e0fff517 	ldw	r3,-44(fp)
 2004b90:	18bfeb16 	blt	r3,r2,2004b40 <VPG_ColorPanel+0x20>
        	vid_set_pixel(x,y,Color, pDisplay);
        }
    }

    // show text
    sprintf(szText,"Panel: %08xh", Color);
 2004b94:	e0bff604 	addi	r2,fp,-40
 2004b98:	1009883a 	mov	r4,r2
 2004b9c:	014080f4 	movhi	r5,515
 2004ba0:	29791204 	addi	r5,r5,-7096
 2004ba4:	e1bfff17 	ldw	r6,-4(fp)
 2004ba8:	20094100 	call	2009410 <sprintf>
    ShowInfo(pDisplay, szText);
 2004bac:	e0bff604 	addi	r2,fp,-40
 2004bb0:	e13ffe17 	ldw	r4,-8(fp)
 2004bb4:	100b883a 	mov	r5,r2
 2004bb8:	2004a9c0 	call	2004a9c <ShowInfo>



}
 2004bbc:	e037883a 	mov	sp,fp
 2004bc0:	dfc00117 	ldw	ra,4(sp)
 2004bc4:	df000017 	ldw	fp,0(sp)
 2004bc8:	dec00204 	addi	sp,sp,8
 2004bcc:	f800283a 	ret

02004bd0 <VPG_Grid>:

void VPG_Grid(alt_video_display *pDisplay, alt_u8 GridSize){
 2004bd0:	defff104 	addi	sp,sp,-60
 2004bd4:	dfc00e15 	stw	ra,56(sp)
 2004bd8:	df000d15 	stw	fp,52(sp)
 2004bdc:	df000d04 	addi	fp,sp,52
 2004be0:	e13ffe15 	stw	r4,-8(fp)
 2004be4:	2805883a 	mov	r2,r5
 2004be8:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 2004bec:	e03ff415 	stw	zero,-48(fp)
 2004bf0:	00002206 	br	2004c7c <VPG_Grid+0xac>
        for(x=0;x<pDisplay->width;x++){
 2004bf4:	e03ff315 	stw	zero,-52(fp)
 2004bf8:	00001906 	br	2004c60 <VPG_Grid+0x90>
            if (x%GridSize == 0 || y%GridSize == 0)
 2004bfc:	e0bfff03 	ldbu	r2,-4(fp)
 2004c00:	e0fff317 	ldw	r3,-52(fp)
 2004c04:	1809883a 	mov	r4,r3
 2004c08:	100b883a 	mov	r5,r2
 2004c0c:	20082cc0 	call	20082cc <__modsi3>
 2004c10:	10000626 	beq	r2,zero,2004c2c <VPG_Grid+0x5c>
 2004c14:	e0bfff03 	ldbu	r2,-4(fp)
 2004c18:	e0fff417 	ldw	r3,-48(fp)
 2004c1c:	1809883a 	mov	r4,r3
 2004c20:	100b883a 	mov	r5,r2
 2004c24:	20082cc0 	call	20082cc <__modsi3>
 2004c28:	1000041e 	bne	r2,zero,2004c3c <VPG_Grid+0x6c>
                Value32 = WHITE_24;
 2004c2c:	00804034 	movhi	r2,256
 2004c30:	10bfffc4 	addi	r2,r2,-1
 2004c34:	e0bff515 	stw	r2,-44(fp)
 2004c38:	00000106 	br	2004c40 <VPG_Grid+0x70>
            else
                Value32 = BLACK_24;
 2004c3c:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
 2004c40:	e13ff317 	ldw	r4,-52(fp)
 2004c44:	e17ff417 	ldw	r5,-48(fp)
 2004c48:	e1bff517 	ldw	r6,-44(fp)
 2004c4c:	e1fffe17 	ldw	r7,-8(fp)
 2004c50:	2001b100 	call	2001b10 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 2004c54:	e0bff317 	ldw	r2,-52(fp)
 2004c58:	10800044 	addi	r2,r2,1
 2004c5c:	e0bff315 	stw	r2,-52(fp)
 2004c60:	e0bffe17 	ldw	r2,-8(fp)
 2004c64:	10800117 	ldw	r2,4(r2)
 2004c68:	e0fff317 	ldw	r3,-52(fp)
 2004c6c:	18bfe316 	blt	r3,r2,2004bfc <VPG_Grid+0x2c>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 2004c70:	e0bff417 	ldw	r2,-48(fp)
 2004c74:	10800044 	addi	r2,r2,1
 2004c78:	e0bff415 	stw	r2,-48(fp)
 2004c7c:	e0bffe17 	ldw	r2,-8(fp)
 2004c80:	10800217 	ldw	r2,8(r2)
 2004c84:	e0fff417 	ldw	r3,-48(fp)
 2004c88:	18bfda16 	blt	r3,r2,2004bf4 <VPG_Grid+0x24>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"Grid%d", GridSize);
 2004c8c:	e0bfff03 	ldbu	r2,-4(fp)
 2004c90:	e0fff604 	addi	r3,fp,-40
 2004c94:	1809883a 	mov	r4,r3
 2004c98:	014080f4 	movhi	r5,515
 2004c9c:	29791604 	addi	r5,r5,-7080
 2004ca0:	100d883a 	mov	r6,r2
 2004ca4:	20094100 	call	2009410 <sprintf>
    ShowInfo(pDisplay, szText);
 2004ca8:	e0bff604 	addi	r2,fp,-40
 2004cac:	e13ffe17 	ldw	r4,-8(fp)
 2004cb0:	100b883a 	mov	r5,r2
 2004cb4:	2004a9c0 	call	2004a9c <ShowInfo>

}
 2004cb8:	e037883a 	mov	sp,fp
 2004cbc:	dfc00117 	ldw	ra,4(sp)
 2004cc0:	df000017 	ldw	fp,0(sp)
 2004cc4:	dec00204 	addi	sp,sp,8
 2004cc8:	f800283a 	ret

02004ccc <VPG_VGrid>:

void VPG_VGrid(alt_video_display *pDisplay, alt_u8 GridSize){
 2004ccc:	defff104 	addi	sp,sp,-60
 2004cd0:	dfc00e15 	stw	ra,56(sp)
 2004cd4:	df000d15 	stw	fp,52(sp)
 2004cd8:	df000d04 	addi	fp,sp,52
 2004cdc:	e13ffe15 	stw	r4,-8(fp)
 2004ce0:	2805883a 	mov	r2,r5
 2004ce4:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 2004ce8:	e03ff415 	stw	zero,-48(fp)
 2004cec:	00001c06 	br	2004d60 <VPG_VGrid+0x94>
        for(x=0;x<pDisplay->width;x++){
 2004cf0:	e03ff315 	stw	zero,-52(fp)
 2004cf4:	00001306 	br	2004d44 <VPG_VGrid+0x78>
            if (x%GridSize == 0)
 2004cf8:	e0bfff03 	ldbu	r2,-4(fp)
 2004cfc:	e0fff317 	ldw	r3,-52(fp)
 2004d00:	1809883a 	mov	r4,r3
 2004d04:	100b883a 	mov	r5,r2
 2004d08:	20082cc0 	call	20082cc <__modsi3>
 2004d0c:	1000041e 	bne	r2,zero,2004d20 <VPG_VGrid+0x54>
                Value32 = WHITE_24;
 2004d10:	00804034 	movhi	r2,256
 2004d14:	10bfffc4 	addi	r2,r2,-1
 2004d18:	e0bff515 	stw	r2,-44(fp)
 2004d1c:	00000106 	br	2004d24 <VPG_VGrid+0x58>
            else
                Value32 = BLACK_24;
 2004d20:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
 2004d24:	e13ff317 	ldw	r4,-52(fp)
 2004d28:	e17ff417 	ldw	r5,-48(fp)
 2004d2c:	e1bff517 	ldw	r6,-44(fp)
 2004d30:	e1fffe17 	ldw	r7,-8(fp)
 2004d34:	2001b100 	call	2001b10 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 2004d38:	e0bff317 	ldw	r2,-52(fp)
 2004d3c:	10800044 	addi	r2,r2,1
 2004d40:	e0bff315 	stw	r2,-52(fp)
 2004d44:	e0bffe17 	ldw	r2,-8(fp)
 2004d48:	10800117 	ldw	r2,4(r2)
 2004d4c:	e0fff317 	ldw	r3,-52(fp)
 2004d50:	18bfe916 	blt	r3,r2,2004cf8 <VPG_VGrid+0x2c>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 2004d54:	e0bff417 	ldw	r2,-48(fp)
 2004d58:	10800044 	addi	r2,r2,1
 2004d5c:	e0bff415 	stw	r2,-48(fp)
 2004d60:	e0bffe17 	ldw	r2,-8(fp)
 2004d64:	10800217 	ldw	r2,8(r2)
 2004d68:	e0fff417 	ldw	r3,-48(fp)
 2004d6c:	18bfe016 	blt	r3,r2,2004cf0 <VPG_VGrid+0x24>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"VGrid%d", GridSize);
 2004d70:	e0bfff03 	ldbu	r2,-4(fp)
 2004d74:	e0fff604 	addi	r3,fp,-40
 2004d78:	1809883a 	mov	r4,r3
 2004d7c:	014080f4 	movhi	r5,515
 2004d80:	29791804 	addi	r5,r5,-7072
 2004d84:	100d883a 	mov	r6,r2
 2004d88:	20094100 	call	2009410 <sprintf>
    ShowInfo(pDisplay, szText);
 2004d8c:	e0bff604 	addi	r2,fp,-40
 2004d90:	e13ffe17 	ldw	r4,-8(fp)
 2004d94:	100b883a 	mov	r5,r2
 2004d98:	2004a9c0 	call	2004a9c <ShowInfo>

}
 2004d9c:	e037883a 	mov	sp,fp
 2004da0:	dfc00117 	ldw	ra,4(sp)
 2004da4:	df000017 	ldw	fp,0(sp)
 2004da8:	dec00204 	addi	sp,sp,8
 2004dac:	f800283a 	ret

02004db0 <VPG_HGrid>:

void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
 2004db0:	defff104 	addi	sp,sp,-60
 2004db4:	dfc00e15 	stw	ra,56(sp)
 2004db8:	df000d15 	stw	fp,52(sp)
 2004dbc:	df000d04 	addi	fp,sp,52
 2004dc0:	e13ffe15 	stw	r4,-8(fp)
 2004dc4:	2805883a 	mov	r2,r5
 2004dc8:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 2004dcc:	e03ff415 	stw	zero,-48(fp)
 2004dd0:	00001c06 	br	2004e44 <VPG_HGrid+0x94>
        for(x=0;x<pDisplay->width;x++){
 2004dd4:	e03ff315 	stw	zero,-52(fp)
 2004dd8:	00001306 	br	2004e28 <VPG_HGrid+0x78>
            if (y%GridSize == 0)
 2004ddc:	e0bfff03 	ldbu	r2,-4(fp)
 2004de0:	e0fff417 	ldw	r3,-48(fp)
 2004de4:	1809883a 	mov	r4,r3
 2004de8:	100b883a 	mov	r5,r2
 2004dec:	20082cc0 	call	20082cc <__modsi3>
 2004df0:	1000041e 	bne	r2,zero,2004e04 <VPG_HGrid+0x54>
                Value32 = WHITE_24;
 2004df4:	00804034 	movhi	r2,256
 2004df8:	10bfffc4 	addi	r2,r2,-1
 2004dfc:	e0bff515 	stw	r2,-44(fp)
 2004e00:	00000106 	br	2004e08 <VPG_HGrid+0x58>
            else
                Value32 = BLACK_24;
 2004e04:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
 2004e08:	e13ff317 	ldw	r4,-52(fp)
 2004e0c:	e17ff417 	ldw	r5,-48(fp)
 2004e10:	e1bff517 	ldw	r6,-44(fp)
 2004e14:	e1fffe17 	ldw	r7,-8(fp)
 2004e18:	2001b100 	call	2001b10 <vid_set_pixel>
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 2004e1c:	e0bff317 	ldw	r2,-52(fp)
 2004e20:	10800044 	addi	r2,r2,1
 2004e24:	e0bff315 	stw	r2,-52(fp)
 2004e28:	e0bffe17 	ldw	r2,-8(fp)
 2004e2c:	10800117 	ldw	r2,4(r2)
 2004e30:	e0fff317 	ldw	r3,-52(fp)
 2004e34:	18bfe916 	blt	r3,r2,2004ddc <VPG_HGrid+0x2c>
void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 2004e38:	e0bff417 	ldw	r2,-48(fp)
 2004e3c:	10800044 	addi	r2,r2,1
 2004e40:	e0bff415 	stw	r2,-48(fp)
 2004e44:	e0bffe17 	ldw	r2,-8(fp)
 2004e48:	10800217 	ldw	r2,8(r2)
 2004e4c:	e0fff417 	ldw	r3,-48(fp)
 2004e50:	18bfe016 	blt	r3,r2,2004dd4 <VPG_HGrid+0x24>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"HGrid%d", GridSize);
 2004e54:	e0bfff03 	ldbu	r2,-4(fp)
 2004e58:	e0fff604 	addi	r3,fp,-40
 2004e5c:	1809883a 	mov	r4,r3
 2004e60:	014080f4 	movhi	r5,515
 2004e64:	29791a04 	addi	r5,r5,-7064
 2004e68:	100d883a 	mov	r6,r2
 2004e6c:	20094100 	call	2009410 <sprintf>
    ShowInfo(pDisplay, szText);
 2004e70:	e0bff604 	addi	r2,fp,-40
 2004e74:	e13ffe17 	ldw	r4,-8(fp)
 2004e78:	100b883a 	mov	r5,r2
 2004e7c:	2004a9c0 	call	2004a9c <ShowInfo>

}
 2004e80:	e037883a 	mov	sp,fp
 2004e84:	dfc00117 	ldw	ra,4(sp)
 2004e88:	df000017 	ldw	fp,0(sp)
 2004e8c:	dec00204 	addi	sp,sp,8
 2004e90:	f800283a 	ret

02004e94 <VPG_ColorBar>:




void VPG_ColorBar(alt_video_display *pDisplay){
 2004e94:	defffa04 	addi	sp,sp,-24
 2004e98:	dfc00515 	stw	ra,20(sp)
 2004e9c:	df000415 	stw	fp,16(sp)
 2004ea0:	df000404 	addi	fp,sp,16
 2004ea4:	e13fff15 	stw	r4,-4(fp)
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
 2004ea8:	e03ffd15 	stw	zero,-12(fp)
 2004eac:	00005806 	br	2005010 <VPG_ColorBar+0x17c>
        for(x=0;x<pDisplay->width;x++){
 2004eb0:	e03ffc15 	stw	zero,-16(fp)
 2004eb4:	00004f06 	br	2004ff4 <VPG_ColorBar+0x160>
            if (x == 0 || y == 0 || x == pDisplay->width-1 || y == pDisplay->height-1){
 2004eb8:	e0bffc17 	ldw	r2,-16(fp)
 2004ebc:	10000c26 	beq	r2,zero,2004ef0 <VPG_ColorBar+0x5c>
 2004ec0:	e0bffd17 	ldw	r2,-12(fp)
 2004ec4:	10000a26 	beq	r2,zero,2004ef0 <VPG_ColorBar+0x5c>
 2004ec8:	e0bfff17 	ldw	r2,-4(fp)
 2004ecc:	10800117 	ldw	r2,4(r2)
 2004ed0:	10ffffc4 	addi	r3,r2,-1
 2004ed4:	e0bffc17 	ldw	r2,-16(fp)
 2004ed8:	18800526 	beq	r3,r2,2004ef0 <VPG_ColorBar+0x5c>
 2004edc:	e0bfff17 	ldw	r2,-4(fp)
 2004ee0:	10800217 	ldw	r2,8(r2)
 2004ee4:	10ffffc4 	addi	r3,r2,-1
 2004ee8:	e0bffd17 	ldw	r2,-12(fp)
 2004eec:	1880041e 	bne	r3,r2,2004f00 <VPG_ColorBar+0x6c>
                Value32 = WHITE_24;
 2004ef0:	00804034 	movhi	r2,256
 2004ef4:	10bfffc4 	addi	r2,r2,-1
 2004ef8:	e0bffe15 	stw	r2,-8(fp)
 2004efc:	00003506 	br	2004fd4 <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height/4){
 2004f00:	e0bfff17 	ldw	r2,-4(fp)
 2004f04:	10800217 	ldw	r2,8(r2)
 2004f08:	1000010e 	bge	r2,zero,2004f10 <VPG_ColorBar+0x7c>
 2004f0c:	108000c4 	addi	r2,r2,3
 2004f10:	1005d0ba 	srai	r2,r2,2
 2004f14:	e0fffd17 	ldw	r3,-12(fp)
 2004f18:	1880040e 	bge	r3,r2,2004f2c <VPG_ColorBar+0x98>
                // red
                Value32 = x & 0xFF;
 2004f1c:	e0bffc17 	ldw	r2,-16(fp)
 2004f20:	10803fcc 	andi	r2,r2,255
 2004f24:	e0bffe15 	stw	r2,-8(fp)
 2004f28:	00002a06 	br	2004fd4 <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height/2){
 2004f2c:	e0bfff17 	ldw	r2,-4(fp)
 2004f30:	10800217 	ldw	r2,8(r2)
 2004f34:	1006d7fa 	srli	r3,r2,31
 2004f38:	1885883a 	add	r2,r3,r2
 2004f3c:	1005d07a 	srai	r2,r2,1
 2004f40:	e0fffd17 	ldw	r3,-12(fp)
 2004f44:	1880050e 	bge	r3,r2,2004f5c <VPG_ColorBar+0xc8>
                Value32 = (x & 0xFF) << 8;
 2004f48:	e0bffc17 	ldw	r2,-16(fp)
 2004f4c:	1004923a 	slli	r2,r2,8
 2004f50:	10bfffcc 	andi	r2,r2,65535
 2004f54:	e0bffe15 	stw	r2,-8(fp)
 2004f58:	00001e06 	br	2004fd4 <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height*3/4){
 2004f5c:	e0bfff17 	ldw	r2,-4(fp)
 2004f60:	10c00217 	ldw	r3,8(r2)
 2004f64:	1805883a 	mov	r2,r3
 2004f68:	1085883a 	add	r2,r2,r2
 2004f6c:	10c5883a 	add	r2,r2,r3
 2004f70:	1000010e 	bge	r2,zero,2004f78 <VPG_ColorBar+0xe4>
 2004f74:	108000c4 	addi	r2,r2,3
 2004f78:	1005d0ba 	srai	r2,r2,2
 2004f7c:	e0fffd17 	ldw	r3,-12(fp)
 2004f80:	1880050e 	bge	r3,r2,2004f98 <VPG_ColorBar+0x104>
                Value32 = (x & 0xFF) << 16;
 2004f84:	e0bffc17 	ldw	r2,-16(fp)
 2004f88:	10803fcc 	andi	r2,r2,255
 2004f8c:	1004943a 	slli	r2,r2,16
 2004f90:	e0bffe15 	stw	r2,-8(fp)
 2004f94:	00000f06 	br	2004fd4 <VPG_ColorBar+0x140>
            }else{
                Value32 = x & 0xFF;
 2004f98:	e0bffc17 	ldw	r2,-16(fp)
 2004f9c:	10803fcc 	andi	r2,r2,255
 2004fa0:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 8;
 2004fa4:	e0bffc17 	ldw	r2,-16(fp)
 2004fa8:	1004923a 	slli	r2,r2,8
 2004fac:	10bfffcc 	andi	r2,r2,65535
 2004fb0:	e0fffe17 	ldw	r3,-8(fp)
 2004fb4:	1884b03a 	or	r2,r3,r2
 2004fb8:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 16;
 2004fbc:	e0bffc17 	ldw	r2,-16(fp)
 2004fc0:	10803fcc 	andi	r2,r2,255
 2004fc4:	1004943a 	slli	r2,r2,16
 2004fc8:	e0fffe17 	ldw	r3,-8(fp)
 2004fcc:	1884b03a 	or	r2,r3,r2
 2004fd0:	e0bffe15 	stw	r2,-8(fp)
            }
            vid_set_pixel(x,y,Value32, pDisplay);
 2004fd4:	e13ffc17 	ldw	r4,-16(fp)
 2004fd8:	e17ffd17 	ldw	r5,-12(fp)
 2004fdc:	e1bffe17 	ldw	r6,-8(fp)
 2004fe0:	e1ffff17 	ldw	r7,-4(fp)
 2004fe4:	2001b100 	call	2001b10 <vid_set_pixel>
void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 2004fe8:	e0bffc17 	ldw	r2,-16(fp)
 2004fec:	10800044 	addi	r2,r2,1
 2004ff0:	e0bffc15 	stw	r2,-16(fp)
 2004ff4:	e0bfff17 	ldw	r2,-4(fp)
 2004ff8:	10800117 	ldw	r2,4(r2)
 2004ffc:	e0fffc17 	ldw	r3,-16(fp)
 2005000:	18bfad16 	blt	r3,r2,2004eb8 <VPG_ColorBar+0x24>

void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
 2005004:	e0bffd17 	ldw	r2,-12(fp)
 2005008:	10800044 	addi	r2,r2,1
 200500c:	e0bffd15 	stw	r2,-12(fp)
 2005010:	e0bfff17 	ldw	r2,-4(fp)
 2005014:	10800217 	ldw	r2,8(r2)
 2005018:	e0fffd17 	ldw	r3,-12(fp)
 200501c:	18bfa416 	blt	r3,r2,2004eb0 <VPG_ColorBar+0x1c>

        }

    }

}
 2005020:	e037883a 	mov	sp,fp
 2005024:	dfc00117 	ldw	ra,4(sp)
 2005028:	df000017 	ldw	fp,0(sp)
 200502c:	dec00204 	addi	sp,sp,8
 2005030:	f800283a 	ret

02005034 <GUI_ShowPAT>:


void GUI_ShowPAT(alt_video_display *pDisplay, int PatId){
 2005034:	defffc04 	addi	sp,sp,-16
 2005038:	dfc00315 	stw	ra,12(sp)
 200503c:	df000215 	stw	fp,8(sp)
 2005040:	df000204 	addi	fp,sp,8
 2005044:	e13ffe15 	stw	r4,-8(fp)
 2005048:	e17fff15 	stw	r5,-4(fp)

                switch(PatId){
 200504c:	e0bfff17 	ldw	r2,-4(fp)
 2005050:	108003e8 	cmpgeui	r2,r2,15
 2005054:	1000521e 	bne	r2,zero,20051a0 <GUI_ShowPAT+0x16c>
 2005058:	e0bfff17 	ldw	r2,-4(fp)
 200505c:	1085883a 	add	r2,r2,r2
 2005060:	1087883a 	add	r3,r2,r2
 2005064:	00808034 	movhi	r2,512
 2005068:	10941e04 	addi	r2,r2,20600
 200506c:	1885883a 	add	r2,r3,r2
 2005070:	10800017 	ldw	r2,0(r2)
 2005074:	1000683a 	jmp	r2
 2005078:	020050b4 	movhi	r8,322
 200507c:	020050c0 	call	20050c <__alt_mem_sdram-0x1dffaf4>
 2005080:	020050d4 	movui	r8,323
 2005084:	020050e4 	muli	r8,zero,323
 2005088:	020050f4 	movhi	r8,323
 200508c:	02005104 	movi	r8,324
 2005090:	02005110 	cmplti	r8,zero,324
 2005094:	02005120 	cmpeqi	r8,zero,324
 2005098:	02005130 	cmpltui	r8,zero,324
 200509c:	02005140 	call	200514 <__alt_mem_sdram-0x1dffaec>
 20050a0:	02005150 	cmplti	r8,zero,325
 20050a4:	02005160 	cmpeqi	r8,zero,325
 20050a8:	02005170 	cmpltui	r8,zero,325
 20050ac:	02005180 	call	200518 <__alt_mem_sdram-0x1dffae8>
 20050b0:	02005190 	cmplti	r8,zero,326
                    case 0: VPG_ColorBar(pDisplay); break;
 20050b4:	e13ffe17 	ldw	r4,-8(fp)
 20050b8:	2004e940 	call	2004e94 <VPG_ColorBar>
 20050bc:	00003806 	br	20051a0 <GUI_ShowPAT+0x16c>
                    case 1: VPG_ColorPanel(pDisplay, WHITE_24); break;
 20050c0:	e13ffe17 	ldw	r4,-8(fp)
 20050c4:	01404034 	movhi	r5,256
 20050c8:	297fffc4 	addi	r5,r5,-1
 20050cc:	2004b200 	call	2004b20 <VPG_ColorPanel>
 20050d0:	00003306 	br	20051a0 <GUI_ShowPAT+0x16c>
                    case 2: VPG_ColorPanel(pDisplay, RED_24); break;
 20050d4:	e13ffe17 	ldw	r4,-8(fp)
 20050d8:	01403ff4 	movhi	r5,255
 20050dc:	2004b200 	call	2004b20 <VPG_ColorPanel>
 20050e0:	00002f06 	br	20051a0 <GUI_ShowPAT+0x16c>
                    case 3: VPG_ColorPanel(pDisplay, GREEN_24); break;
 20050e4:	e13ffe17 	ldw	r4,-8(fp)
 20050e8:	01600014 	movui	r5,32768
 20050ec:	2004b200 	call	2004b20 <VPG_ColorPanel>
 20050f0:	00002b06 	br	20051a0 <GUI_ShowPAT+0x16c>
                    case 4: VPG_ColorPanel(pDisplay, BLUE_24); break;
 20050f4:	e13ffe17 	ldw	r4,-8(fp)
 20050f8:	01403fc4 	movi	r5,255
 20050fc:	2004b200 	call	2004b20 <VPG_ColorPanel>
 2005100:	00002706 	br	20051a0 <GUI_ShowPAT+0x16c>
                    case 5: VPG_XLine(pDisplay); break;
 2005104:	e13ffe17 	ldw	r4,-8(fp)
 2005108:	2004afc0 	call	2004afc <VPG_XLine>
 200510c:	00002406 	br	20051a0 <GUI_ShowPAT+0x16c>
                    case 6: VPG_VGrid(pDisplay, 2); break;
 2005110:	e13ffe17 	ldw	r4,-8(fp)
 2005114:	01400084 	movi	r5,2
 2005118:	2004ccc0 	call	2004ccc <VPG_VGrid>
 200511c:	00002006 	br	20051a0 <GUI_ShowPAT+0x16c>
                    case 7: VPG_VGrid(pDisplay, 4); break;
 2005120:	e13ffe17 	ldw	r4,-8(fp)
 2005124:	01400104 	movi	r5,4
 2005128:	2004ccc0 	call	2004ccc <VPG_VGrid>
 200512c:	00001c06 	br	20051a0 <GUI_ShowPAT+0x16c>
                    case 8: VPG_VGrid(pDisplay, 8); break;
 2005130:	e13ffe17 	ldw	r4,-8(fp)
 2005134:	01400204 	movi	r5,8
 2005138:	2004ccc0 	call	2004ccc <VPG_VGrid>
 200513c:	00001806 	br	20051a0 <GUI_ShowPAT+0x16c>
                    case 9: VPG_HGrid(pDisplay, 2); break;
 2005140:	e13ffe17 	ldw	r4,-8(fp)
 2005144:	01400084 	movi	r5,2
 2005148:	2004db00 	call	2004db0 <VPG_HGrid>
 200514c:	00001406 	br	20051a0 <GUI_ShowPAT+0x16c>
                    case 10: VPG_HGrid(pDisplay, 4); break;
 2005150:	e13ffe17 	ldw	r4,-8(fp)
 2005154:	01400104 	movi	r5,4
 2005158:	2004db00 	call	2004db0 <VPG_HGrid>
 200515c:	00001006 	br	20051a0 <GUI_ShowPAT+0x16c>
                    case 11: VPG_HGrid(pDisplay, 8); break;
 2005160:	e13ffe17 	ldw	r4,-8(fp)
 2005164:	01400204 	movi	r5,8
 2005168:	2004db00 	call	2004db0 <VPG_HGrid>
 200516c:	00000c06 	br	20051a0 <GUI_ShowPAT+0x16c>
                    case 12: VPG_Grid(pDisplay, 2); break;
 2005170:	e13ffe17 	ldw	r4,-8(fp)
 2005174:	01400084 	movi	r5,2
 2005178:	2004bd00 	call	2004bd0 <VPG_Grid>
 200517c:	00000806 	br	20051a0 <GUI_ShowPAT+0x16c>
                    case 13: VPG_Grid(pDisplay, 4); break;
 2005180:	e13ffe17 	ldw	r4,-8(fp)
 2005184:	01400104 	movi	r5,4
 2005188:	2004bd00 	call	2004bd0 <VPG_Grid>
 200518c:	00000406 	br	20051a0 <GUI_ShowPAT+0x16c>
                    case 14: VPG_Grid(pDisplay, 8); break;
 2005190:	e13ffe17 	ldw	r4,-8(fp)
 2005194:	01400204 	movi	r5,8
 2005198:	2004bd00 	call	2004bd0 <VPG_Grid>
 200519c:	0001883a 	nop
                }

}
 20051a0:	e037883a 	mov	sp,fp
 20051a4:	dfc00117 	ldw	ra,4(sp)
 20051a8:	df000017 	ldw	fp,0(sp)
 20051ac:	dec00204 	addi	sp,sp,8
 20051b0:	f800283a 	ret

020051b4 <GUI_VPG>:

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
 20051b4:	defff904 	addi	sp,sp,-28
 20051b8:	dfc00615 	stw	ra,24(sp)
 20051bc:	df000515 	stw	fp,20(sp)
 20051c0:	df000504 	addi	fp,sp,20
 20051c4:	e13ffe15 	stw	r4,-8(fp)
 20051c8:	e17fff15 	stw	r5,-4(fp)
	int X, Y;
	int PatId = 0;
 20051cc:	e03ffb15 	stw	zero,-20(fp)

    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
 20051d0:	e13ffe17 	ldw	r4,-8(fp)
 20051d4:	000b883a 	mov	r5,zero
 20051d8:	200106c0 	call	200106c <vid_clean_screen>


    VPG_ColorBar(pDisplay);
 20051dc:	e13ffe17 	ldw	r4,-8(fp)
 20051e0:	2004e940 	call	2004e94 <VPG_ColorBar>

    GUI_ShowPAT(pDisplay, PatId);
 20051e4:	e13ffe17 	ldw	r4,-8(fp)
 20051e8:	e17ffb17 	ldw	r5,-20(fp)
 20051ec:	20050340 	call	2005034 <GUI_ShowPAT>
 20051f0:	00000106 	br	20051f8 <GUI_VPG+0x44>
            printf("PatId=%d\r\n", PatId);
            GUI_ShowPAT(pDisplay, PatId);
            usleep(300*1000); // debounce
            Touch_EmptyFifo( pTouch);
        }
    }
 20051f4:	0001883a 	nop
    VPG_ColorBar(pDisplay);

    GUI_ShowPAT(pDisplay, PatId);

    while(1){
        if (Touch_GetXY(pTouch, &X, &Y)){
 20051f8:	e0fffc04 	addi	r3,fp,-16
 20051fc:	e0bffd04 	addi	r2,fp,-12
 2005200:	e13fff17 	ldw	r4,-4(fp)
 2005204:	180b883a 	mov	r5,r3
 2005208:	100d883a 	mov	r6,r2
 200520c:	2006afc0 	call	2006afc <Touch_GetXY>
 2005210:	103ff826 	beq	r2,zero,20051f4 <GUI_VPG+0x40>
            //printf(".");

            // change pattern
            PatId++;
 2005214:	e0bffb17 	ldw	r2,-20(fp)
 2005218:	10800044 	addi	r2,r2,1
 200521c:	e0bffb15 	stw	r2,-20(fp)
            if (PatId > 14)
 2005220:	e0bffb17 	ldw	r2,-20(fp)
 2005224:	108003d0 	cmplti	r2,r2,15
 2005228:	1000011e 	bne	r2,zero,2005230 <GUI_VPG+0x7c>
                PatId = 0;
 200522c:	e03ffb15 	stw	zero,-20(fp)

            printf("PatId=%d\r\n", PatId);
 2005230:	010080f4 	movhi	r4,515
 2005234:	21391c04 	addi	r4,r4,-7056
 2005238:	e17ffb17 	ldw	r5,-20(fp)
 200523c:	20092800 	call	2009280 <printf>
            GUI_ShowPAT(pDisplay, PatId);
 2005240:	e13ffe17 	ldw	r4,-8(fp)
 2005244:	e17ffb17 	ldw	r5,-20(fp)
 2005248:	20050340 	call	2005034 <GUI_ShowPAT>
            usleep(300*1000); // debounce
 200524c:	01000174 	movhi	r4,5
 2005250:	2124f804 	addi	r4,r4,-27680
 2005254:	20119800 	call	2011980 <usleep>
            Touch_EmptyFifo( pTouch);
 2005258:	e13fff17 	ldw	r4,-4(fp)
 200525c:	2006ac40 	call	2006ac4 <Touch_EmptyFifo>
        }
    }
 2005260:	003fe406 	br	20051f4 <GUI_VPG+0x40>

02005264 <main>:
#include "system.h"

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch);

int main()
{
 2005264:	defff704 	addi	sp,sp,-36
 2005268:	dfc00815 	stw	ra,32(sp)
 200526c:	df000715 	stw	fp,28(sp)
 2005270:	df000704 	addi	fp,sp,28
	TOUCH_HANDLE *pTouch;
	alt_video_display Display;


    const bool bVPG = ((IORD(KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
 2005274:	00810034 	movhi	r2,1024
 2005278:	10801004 	addi	r2,r2,64
 200527c:	10800037 	ldwio	r2,0(r2)
 2005280:	1080004c 	andi	r2,r2,1
 2005284:	1005003a 	cmpeq	r2,r2,zero
 2005288:	10803fcc 	andi	r2,r2,255
 200528c:	e0bff915 	stw	r2,-28(fp)

   printf("LT24 Demo!\n");
 2005290:	010080f4 	movhi	r4,515
 2005294:	21391f04 	addi	r4,r4,-7044
 2005298:	20093400 	call	2009340 <puts>

   // init touch
   pTouch = Touch_Init(TOUCH_PANEL_SPI_BASE, TOUCH_PANEL_PEN_IRQ_N_BASE, TOUCH_PANEL_PEN_IRQ_N_IRQ);
 200529c:	01014034 	movhi	r4,1280
 20052a0:	21080004 	addi	r4,r4,8192
 20052a4:	01414034 	movhi	r5,1280
 20052a8:	29480c04 	addi	r5,r5,8240
 20052ac:	01800184 	movi	r6,6
 20052b0:	20068e80 	call	20068e8 <Touch_Init>
 20052b4:	e0bffa15 	stw	r2,-24(fp)
   if (!pTouch){
 20052b8:	e0bffa17 	ldw	r2,-24(fp)
 20052bc:	1000041e 	bne	r2,zero,20052d0 <main+0x6c>
       printf("Failed to init touch\r\n");
 20052c0:	010080f4 	movhi	r4,515
 20052c4:	21392204 	addi	r4,r4,-7032
 20052c8:	20093400 	call	2009340 <puts>
 20052cc:	00000306 	br	20052dc <main+0x78>
   }else{
       printf("Init touch successfully\r\n");
 20052d0:	010080f4 	movhi	r4,515
 20052d4:	21392804 	addi	r4,r4,-7008
 20052d8:	20093400 	call	2009340 <puts>

   }

   // init LCD
   LCD_Init();
 20052dc:	20007e80 	call	20007e8 <LCD_Init>
   LCD_Clear(0X0000);
 20052e0:	0009883a 	mov	r4,zero
 20052e4:	20006fc0 	call	20006fc <LCD_Clear>

   Display.interlace = 0;
 20052e8:	e03fff15 	stw	zero,-4(fp)
   Display.bytes_per_pixel = 2;
 20052ec:	00800084 	movi	r2,2
 20052f0:	e0bffe15 	stw	r2,-8(fp)
   Display.color_depth = 16;
 20052f4:	00800404 	movi	r2,16
 20052f8:	e0bffb15 	stw	r2,-20(fp)
   Display.height = SCREEN_HEIGHT;
 20052fc:	00805004 	movi	r2,320
 2005300:	e0bffd15 	stw	r2,-12(fp)
   Display.width = SCREEN_WIDTH;
 2005304:	00803c04 	movi	r2,240
 2005308:	e0bffc15 	stw	r2,-16(fp)

   // run demo
   if (bVPG)
 200530c:	e0bff917 	ldw	r2,-28(fp)
 2005310:	10000526 	beq	r2,zero,2005328 <main+0xc4>
       GUI_VPG(&Display, pTouch); // enter vpg mode when users press KEY0
 2005314:	e0bffb04 	addi	r2,fp,-20
 2005318:	1009883a 	mov	r4,r2
 200531c:	e17ffa17 	ldw	r5,-24(fp)
 2005320:	20051b40 	call	20051b4 <GUI_VPG>
 2005324:	00000406 	br	2005338 <main+0xd4>
   else
	   GUI(&Display, pTouch);
 2005328:	e0bffb04 	addi	r2,fp,-20
 200532c:	1009883a 	mov	r4,r2
 2005330:	e17ffa17 	ldw	r5,-24(fp)
 2005334:	20047b80 	call	20047b8 <GUI>


}
 2005338:	e037883a 	mov	sp,fp
 200533c:	dfc00117 	ldw	ra,4(sp)
 2005340:	df000017 	ldw	fp,0(sp)
 2005344:	dec00204 	addi	sp,sp,8
 2005348:	f800283a 	ret

0200534c <my_wait>:
    #define I2C_DEBUG(x)    DEBUG(x)  
#else
    #define I2C_DEBUG(x)
#endif

void my_wait(int nWait){
 200534c:	defffd04 	addi	sp,sp,-12
 2005350:	df000215 	stw	fp,8(sp)
 2005354:	df000204 	addi	fp,sp,8
 2005358:	e13fff15 	stw	r4,-4(fp)
    int i;
    i = 0;
 200535c:	e03ffe15 	stw	zero,-8(fp)
    while (i < nWait){
 2005360:	00000306 	br	2005370 <my_wait+0x24>
        i++;
 2005364:	e0bffe17 	ldw	r2,-8(fp)
 2005368:	10800044 	addi	r2,r2,1
 200536c:	e0bffe15 	stw	r2,-8(fp)
#endif

void my_wait(int nWait){
    int i;
    i = 0;
    while (i < nWait){
 2005370:	e0fffe17 	ldw	r3,-8(fp)
 2005374:	e0bfff17 	ldw	r2,-4(fp)
 2005378:	18bffa16 	blt	r3,r2,2005364 <my_wait+0x18>
        i++;
     //   IOWR(LED_BASE, 0, i);
    }    
}
 200537c:	e037883a 	mov	sp,fp
 2005380:	df000017 	ldw	fp,0(sp)
 2005384:	dec00104 	addi	sp,sp,4
 2005388:	f800283a 	ret

0200538c <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 200538c:	defff804 	addi	sp,sp,-32
 2005390:	dfc00715 	stw	ra,28(sp)
 2005394:	df000615 	stw	fp,24(sp)
 2005398:	df000604 	addi	fp,sp,24
 200539c:	e13ffb15 	stw	r4,-20(fp)
 20053a0:	e17ffc15 	stw	r5,-16(fp)
 20053a4:	3007883a 	mov	r3,r6
 20053a8:	3805883a 	mov	r2,r7
 20053ac:	e1000217 	ldw	r4,8(fp)
 20053b0:	e0fffd05 	stb	r3,-12(fp)
 20053b4:	e0bffe05 	stb	r2,-8(fp)
 20053b8:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
 20053bc:	00800044 	movi	r2,1
 20053c0:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 20053c4:	e13ffb17 	ldw	r4,-20(fp)
 20053c8:	e17ffc17 	ldw	r5,-16(fp)
 20053cc:	20059e00 	call	20059e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 20053d0:	e0bffd03 	ldbu	r2,-12(fp)
 20053d4:	10803fcc 	andi	r2,r2,255
 20053d8:	e13ffb17 	ldw	r4,-20(fp)
 20053dc:	e17ffc17 	ldw	r5,-16(fp)
 20053e0:	100d883a 	mov	r6,r2
 20053e4:	2005ad40 	call	2005ad4 <i2c_write>
 20053e8:	1000041e 	bne	r2,zero,20053fc <I2C_Write+0x70>
        bSuccess = FALSE;
 20053ec:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 20053f0:	010080f4 	movhi	r4,515
 20053f4:	21392f04 	addi	r4,r4,-6980
 20053f8:	20064d00 	call	20064d0 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 20053fc:	e0bffa17 	ldw	r2,-24(fp)
 2005400:	10000a26 	beq	r2,zero,200542c <I2C_Write+0xa0>
 2005404:	e0bffe03 	ldbu	r2,-8(fp)
 2005408:	e13ffb17 	ldw	r4,-20(fp)
 200540c:	e17ffc17 	ldw	r5,-16(fp)
 2005410:	100d883a 	mov	r6,r2
 2005414:	2005ad40 	call	2005ad4 <i2c_write>
 2005418:	1000041e 	bne	r2,zero,200542c <I2C_Write+0xa0>
        bSuccess = FALSE;
 200541c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 2005420:	010080f4 	movhi	r4,515
 2005424:	21393704 	addi	r4,r4,-6948
 2005428:	20064d00 	call	20064d0 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 200542c:	e0bffa17 	ldw	r2,-24(fp)
 2005430:	10000a26 	beq	r2,zero,200545c <I2C_Write+0xd0>
 2005434:	e0bfff03 	ldbu	r2,-4(fp)
 2005438:	e13ffb17 	ldw	r4,-20(fp)
 200543c:	e17ffc17 	ldw	r5,-16(fp)
 2005440:	100d883a 	mov	r6,r2
 2005444:	2005ad40 	call	2005ad4 <i2c_write>
 2005448:	1000041e 	bne	r2,zero,200545c <I2C_Write+0xd0>
        bSuccess = FALSE;
 200544c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 2005450:	010080f4 	movhi	r4,515
 2005454:	21394004 	addi	r4,r4,-6912
 2005458:	20064d00 	call	20064d0 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 200545c:	e13ffb17 	ldw	r4,-20(fp)
 2005460:	e17ffc17 	ldw	r5,-16(fp)
 2005464:	2005a640 	call	2005a64 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 2005468:	0106d604 	movi	r4,7000
 200546c:	20119800 	call	2011980 <usleep>
    
    return bSuccess;
 2005470:	e0bffa17 	ldw	r2,-24(fp)

    
}
 2005474:	e037883a 	mov	sp,fp
 2005478:	dfc00117 	ldw	ra,4(sp)
 200547c:	df000017 	ldw	fp,0(sp)
 2005480:	dec00204 	addi	sp,sp,8
 2005484:	f800283a 	ret

02005488 <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
 2005488:	defff704 	addi	sp,sp,-36
 200548c:	dfc00815 	stw	ra,32(sp)
 2005490:	df000715 	stw	fp,28(sp)
 2005494:	df000704 	addi	fp,sp,28
 2005498:	e13ffb15 	stw	r4,-20(fp)
 200549c:	e17ffc15 	stw	r5,-16(fp)
 20054a0:	3007883a 	mov	r3,r6
 20054a4:	3805883a 	mov	r2,r7
 20054a8:	e1000217 	ldw	r4,8(fp)
 20054ac:	e0fffd05 	stb	r3,-12(fp)
 20054b0:	e0bffe05 	stb	r2,-8(fp)
 20054b4:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess = TRUE;
 20054b8:	00800044 	movi	r2,1
 20054bc:	e0bff915 	stw	r2,-28(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
 20054c0:	e0bfff0b 	ldhu	r2,-4(fp)
 20054c4:	1004d23a 	srli	r2,r2,8
 20054c8:	e0bffa05 	stb	r2,-24(fp)
    LowByte = ControlData & 0xFF; 
 20054cc:	e0bfff0b 	ldhu	r2,-4(fp)
 20054d0:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 20054d4:	e13ffb17 	ldw	r4,-20(fp)
 20054d8:	e17ffc17 	ldw	r5,-16(fp)
 20054dc:	20059e00 	call	20059e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 20054e0:	e0bffd03 	ldbu	r2,-12(fp)
 20054e4:	10803fcc 	andi	r2,r2,255
 20054e8:	e13ffb17 	ldw	r4,-20(fp)
 20054ec:	e17ffc17 	ldw	r5,-16(fp)
 20054f0:	100d883a 	mov	r6,r2
 20054f4:	2005ad40 	call	2005ad4 <i2c_write>
 20054f8:	1000041e 	bne	r2,zero,200550c <I2C_Write16+0x84>
        bSuccess = FALSE;
 20054fc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 2005500:	010080f4 	movhi	r4,515
 2005504:	21392f04 	addi	r4,r4,-6980
 2005508:	20064d00 	call	20064d0 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 200550c:	e0bff917 	ldw	r2,-28(fp)
 2005510:	10000a26 	beq	r2,zero,200553c <I2C_Write16+0xb4>
 2005514:	e0bffe03 	ldbu	r2,-8(fp)
 2005518:	e13ffb17 	ldw	r4,-20(fp)
 200551c:	e17ffc17 	ldw	r5,-16(fp)
 2005520:	100d883a 	mov	r6,r2
 2005524:	2005ad40 	call	2005ad4 <i2c_write>
 2005528:	1000041e 	bne	r2,zero,200553c <I2C_Write16+0xb4>
        bSuccess = FALSE;
 200552c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 2005530:	010080f4 	movhi	r4,515
 2005534:	21393704 	addi	r4,r4,-6948
 2005538:	20064d00 	call	20064d0 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
 200553c:	e0bff917 	ldw	r2,-28(fp)
 2005540:	10000a26 	beq	r2,zero,200556c <I2C_Write16+0xe4>
 2005544:	e0bffa03 	ldbu	r2,-24(fp)
 2005548:	e13ffb17 	ldw	r4,-20(fp)
 200554c:	e17ffc17 	ldw	r5,-16(fp)
 2005550:	100d883a 	mov	r6,r2
 2005554:	2005ad40 	call	2005ad4 <i2c_write>
 2005558:	1000041e 	bne	r2,zero,200556c <I2C_Write16+0xe4>
        bSuccess = FALSE;
 200555c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 2005560:	010080f4 	movhi	r4,515
 2005564:	21394004 	addi	r4,r4,-6912
 2005568:	20064d00 	call	20064d0 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
 200556c:	e0bff917 	ldw	r2,-28(fp)
 2005570:	10000a26 	beq	r2,zero,200559c <I2C_Write16+0x114>
 2005574:	e0bffa43 	ldbu	r2,-23(fp)
 2005578:	e13ffb17 	ldw	r4,-20(fp)
 200557c:	e17ffc17 	ldw	r5,-16(fp)
 2005580:	100d883a 	mov	r6,r2
 2005584:	2005ad40 	call	2005ad4 <i2c_write>
 2005588:	1000041e 	bne	r2,zero,200559c <I2C_Write16+0x114>
        bSuccess = FALSE;
 200558c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 2005590:	010080f4 	movhi	r4,515
 2005594:	21394004 	addi	r4,r4,-6912
 2005598:	20064d00 	call	20064d0 <myprintf>
    }    
    i2c_stop(clk_base, data_base);
 200559c:	e13ffb17 	ldw	r4,-20(fp)
 20055a0:	e17ffc17 	ldw	r5,-16(fp)
 20055a4:	2005a640 	call	2005a64 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 20055a8:	0106d604 	movi	r4,7000
 20055ac:	20119800 	call	2011980 <usleep>
    
    return bSuccess;
 20055b0:	e0bff917 	ldw	r2,-28(fp)

    
}
 20055b4:	e037883a 	mov	sp,fp
 20055b8:	dfc00117 	ldw	ra,4(sp)
 20055bc:	df000017 	ldw	fp,0(sp)
 20055c0:	dec00204 	addi	sp,sp,8
 20055c4:	f800283a 	ret

020055c8 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 20055c8:	defff904 	addi	sp,sp,-28
 20055cc:	dfc00615 	stw	ra,24(sp)
 20055d0:	df000515 	stw	fp,20(sp)
 20055d4:	df000504 	addi	fp,sp,20
 20055d8:	e13ffc15 	stw	r4,-16(fp)
 20055dc:	e17ffd15 	stw	r5,-12(fp)
 20055e0:	3007883a 	mov	r3,r6
 20055e4:	3805883a 	mov	r2,r7
 20055e8:	e0fffe05 	stb	r3,-8(fp)
 20055ec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 20055f0:	00800044 	movi	r2,1
 20055f4:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 20055f8:	e13ffc17 	ldw	r4,-16(fp)
 20055fc:	e17ffd17 	ldw	r5,-12(fp)
 2005600:	20059e00 	call	20059e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2005604:	e0bffe03 	ldbu	r2,-8(fp)
 2005608:	10803fcc 	andi	r2,r2,255
 200560c:	e13ffc17 	ldw	r4,-16(fp)
 2005610:	e17ffd17 	ldw	r5,-12(fp)
 2005614:	100d883a 	mov	r6,r2
 2005618:	2005ad40 	call	2005ad4 <i2c_write>
 200561c:	1000041e 	bne	r2,zero,2005630 <I2C_Read+0x68>
        bSuccess = FALSE;
 2005620:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(1) Fail: Address NACK!\n"));
 2005624:	010080f4 	movhi	r4,515
 2005628:	21394804 	addi	r4,r4,-6880
 200562c:	20064d00 	call	20064d0 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2005630:	e0bffb17 	ldw	r2,-20(fp)
 2005634:	10000a26 	beq	r2,zero,2005660 <I2C_Read+0x98>
 2005638:	e0bfff03 	ldbu	r2,-4(fp)
 200563c:	e13ffc17 	ldw	r4,-16(fp)
 2005640:	e17ffd17 	ldw	r5,-12(fp)
 2005644:	100d883a 	mov	r6,r2
 2005648:	2005ad40 	call	2005ad4 <i2c_write>
 200564c:	1000041e 	bne	r2,zero,2005660 <I2C_Read+0x98>
        bSuccess = FALSE;
 2005650:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(2) Fail: SubAddress NACK!\n"));
 2005654:	010080f4 	movhi	r4,515
 2005658:	21395104 	addi	r4,r4,-6844
 200565c:	20064d00 	call	20064d0 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 2005660:	e13ffc17 	ldw	r4,-16(fp)
 2005664:	e17ffd17 	ldw	r5,-12(fp)
 2005668:	20059e00 	call	20059e0 <i2c_start>
    DeviceAddr |= 1; // Read
 200566c:	e0bffe03 	ldbu	r2,-8(fp)
 2005670:	10800054 	ori	r2,r2,1
 2005674:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 2005678:	e0bffb17 	ldw	r2,-20(fp)
 200567c:	10000b26 	beq	r2,zero,20056ac <I2C_Read+0xe4>
 2005680:	e0bffe03 	ldbu	r2,-8(fp)
 2005684:	10803fcc 	andi	r2,r2,255
 2005688:	e13ffc17 	ldw	r4,-16(fp)
 200568c:	e17ffd17 	ldw	r5,-12(fp)
 2005690:	100d883a 	mov	r6,r2
 2005694:	2005ad40 	call	2005ad4 <i2c_write>
 2005698:	1000041e 	bne	r2,zero,20056ac <I2C_Read+0xe4>
        bSuccess = FALSE;
 200569c:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(3) Fail: Address+1 NACK!\n"));
 20056a0:	010080f4 	movhi	r4,515
 20056a4:	21395a04 	addi	r4,r4,-6808
 20056a8:	20064d00 	call	20064d0 <myprintf>
    }
    
    if (bSuccess){
 20056ac:	e0bffb17 	ldw	r2,-20(fp)
 20056b0:	10000526 	beq	r2,zero,20056c8 <I2C_Read+0x100>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 20056b4:	e13ffc17 	ldw	r4,-16(fp)
 20056b8:	e17ffd17 	ldw	r5,-12(fp)
 20056bc:	e1800217 	ldw	r6,8(fp)
 20056c0:	000f883a 	mov	r7,zero
 20056c4:	2005c400 	call	2005c40 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 20056c8:	e13ffc17 	ldw	r4,-16(fp)
 20056cc:	e17ffd17 	ldw	r5,-12(fp)
 20056d0:	2005a640 	call	2005a64 <i2c_stop>
    
    return bSuccess;
 20056d4:	e0bffb17 	ldw	r2,-20(fp)
}
 20056d8:	e037883a 	mov	sp,fp
 20056dc:	dfc00117 	ldw	ra,4(sp)
 20056e0:	df000017 	ldw	fp,0(sp)
 20056e4:	dec00204 	addi	sp,sp,8
 20056e8:	f800283a 	ret

020056ec <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
 20056ec:	defff804 	addi	sp,sp,-32
 20056f0:	dfc00715 	stw	ra,28(sp)
 20056f4:	df000615 	stw	fp,24(sp)
 20056f8:	df000604 	addi	fp,sp,24
 20056fc:	e13ffc15 	stw	r4,-16(fp)
 2005700:	e17ffd15 	stw	r5,-12(fp)
 2005704:	3007883a 	mov	r3,r6
 2005708:	3805883a 	mov	r2,r7
 200570c:	e0fffe05 	stb	r3,-8(fp)
 2005710:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 2005714:	00800044 	movi	r2,1
 2005718:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 200571c:	e13ffc17 	ldw	r4,-16(fp)
 2005720:	e17ffd17 	ldw	r5,-12(fp)
 2005724:	20059e00 	call	20059e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2005728:	e0bffe03 	ldbu	r2,-8(fp)
 200572c:	10803fcc 	andi	r2,r2,255
 2005730:	e13ffc17 	ldw	r4,-16(fp)
 2005734:	e17ffd17 	ldw	r5,-12(fp)
 2005738:	100d883a 	mov	r6,r2
 200573c:	2005ad40 	call	2005ad4 <i2c_write>
 2005740:	1000041e 	bne	r2,zero,2005754 <I2C_Read16+0x68>
        bSuccess = FALSE;
 2005744:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 2005748:	010080f4 	movhi	r4,515
 200574c:	21392f04 	addi	r4,r4,-6980
 2005750:	20064d00 	call	20064d0 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2005754:	e0bffa17 	ldw	r2,-24(fp)
 2005758:	10000a26 	beq	r2,zero,2005784 <I2C_Read16+0x98>
 200575c:	e0bfff03 	ldbu	r2,-4(fp)
 2005760:	e13ffc17 	ldw	r4,-16(fp)
 2005764:	e17ffd17 	ldw	r5,-12(fp)
 2005768:	100d883a 	mov	r6,r2
 200576c:	2005ad40 	call	2005ad4 <i2c_write>
 2005770:	1000041e 	bne	r2,zero,2005784 <I2C_Read16+0x98>
        bSuccess = FALSE;
 2005774:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 2005778:	010080f4 	movhi	r4,515
 200577c:	21393704 	addi	r4,r4,-6948
 2005780:	20064d00 	call	20064d0 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 2005784:	e13ffc17 	ldw	r4,-16(fp)
 2005788:	e17ffd17 	ldw	r5,-12(fp)
 200578c:	20059e00 	call	20059e0 <i2c_start>
    DeviceAddr |= 1; // Read
 2005790:	e0bffe03 	ldbu	r2,-8(fp)
 2005794:	10800054 	ori	r2,r2,1
 2005798:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 200579c:	e0bffa17 	ldw	r2,-24(fp)
 20057a0:	10000b26 	beq	r2,zero,20057d0 <I2C_Read16+0xe4>
 20057a4:	e0bffe03 	ldbu	r2,-8(fp)
 20057a8:	10803fcc 	andi	r2,r2,255
 20057ac:	e13ffc17 	ldw	r4,-16(fp)
 20057b0:	e17ffd17 	ldw	r5,-12(fp)
 20057b4:	100d883a 	mov	r6,r2
 20057b8:	2005ad40 	call	2005ad4 <i2c_write>
 20057bc:	1000041e 	bne	r2,zero,20057d0 <I2C_Read16+0xe4>
        bSuccess = FALSE;
 20057c0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 20057c4:	010080f4 	movhi	r4,515
 20057c8:	21396304 	addi	r4,r4,-6772
 20057cc:	20064d00 	call	20064d0 <myprintf>
    }
    
    if (bSuccess){
 20057d0:	e0bffa17 	ldw	r2,-24(fp)
 20057d4:	10000626 	beq	r2,zero,20057f0 <I2C_Read16+0x104>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
 20057d8:	e0bffb44 	addi	r2,fp,-19
 20057dc:	e13ffc17 	ldw	r4,-16(fp)
 20057e0:	e17ffd17 	ldw	r5,-12(fp)
 20057e4:	100d883a 	mov	r6,r2
 20057e8:	01c00044 	movi	r7,1
 20057ec:	2005c400 	call	2005c40 <i2c_read>
    }        
    if (bSuccess){
 20057f0:	e0bffa17 	ldw	r2,-24(fp)
 20057f4:	10000626 	beq	r2,zero,2005810 <I2C_Read16+0x124>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
 20057f8:	e0bffb04 	addi	r2,fp,-20
 20057fc:	e13ffc17 	ldw	r4,-16(fp)
 2005800:	e17ffd17 	ldw	r5,-12(fp)
 2005804:	100d883a 	mov	r6,r2
 2005808:	000f883a 	mov	r7,zero
 200580c:	2005c400 	call	2005c40 <i2c_read>
    }        
    if (bSuccess)
 2005810:	e0bffa17 	ldw	r2,-24(fp)
 2005814:	10000a26 	beq	r2,zero,2005840 <I2C_Read16+0x154>
        *pControlData = (HighByte << 8) | LowByte;
 2005818:	e0bffb43 	ldbu	r2,-19(fp)
 200581c:	10803fcc 	andi	r2,r2,255
 2005820:	1004923a 	slli	r2,r2,8
 2005824:	1007883a 	mov	r3,r2
 2005828:	e0bffb03 	ldbu	r2,-20(fp)
 200582c:	10803fcc 	andi	r2,r2,255
 2005830:	1884b03a 	or	r2,r3,r2
 2005834:	1007883a 	mov	r3,r2
 2005838:	e0800217 	ldw	r2,8(fp)
 200583c:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
 2005840:	e13ffc17 	ldw	r4,-16(fp)
 2005844:	e17ffd17 	ldw	r5,-12(fp)
 2005848:	2005a640 	call	2005a64 <i2c_stop>
    
    return bSuccess;
 200584c:	e0bffa17 	ldw	r2,-24(fp)
}
 2005850:	e037883a 	mov	sp,fp
 2005854:	dfc00117 	ldw	ra,4(sp)
 2005858:	df000017 	ldw	fp,0(sp)
 200585c:	dec00204 	addi	sp,sp,8
 2005860:	f800283a 	ret

02005864 <I2C_MultipleRead>:


bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
 2005864:	defff704 	addi	sp,sp,-36
 2005868:	dfc00815 	stw	ra,32(sp)
 200586c:	df000715 	stw	fp,28(sp)
 2005870:	df000704 	addi	fp,sp,28
 2005874:	e13ffb15 	stw	r4,-20(fp)
 2005878:	e17ffc15 	stw	r5,-16(fp)
 200587c:	3007883a 	mov	r3,r6
 2005880:	3805883a 	mov	r2,r7
 2005884:	e1000317 	ldw	r4,12(fp)
 2005888:	e0fffd05 	stb	r3,-12(fp)
 200588c:	e0bffe05 	stb	r2,-8(fp)
 2005890:	e13fff0d 	sth	r4,-4(fp)
    int i;
    bool bSuccess = TRUE;
 2005894:	00800044 	movi	r2,1
 2005898:	e0bffa15 	stw	r2,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 200589c:	e13ffb17 	ldw	r4,-20(fp)
 20058a0:	e17ffc17 	ldw	r5,-16(fp)
 20058a4:	20059e00 	call	20059e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 20058a8:	e0bffd03 	ldbu	r2,-12(fp)
 20058ac:	10803fcc 	andi	r2,r2,255
 20058b0:	e13ffb17 	ldw	r4,-20(fp)
 20058b4:	e17ffc17 	ldw	r5,-16(fp)
 20058b8:	100d883a 	mov	r6,r2
 20058bc:	2005ad40 	call	2005ad4 <i2c_write>
 20058c0:	1000041e 	bne	r2,zero,20058d4 <I2C_MultipleRead+0x70>
        bSuccess = FALSE;
 20058c4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(1) Fail: Address NACK!\n"));
 20058c8:	010080f4 	movhi	r4,515
 20058cc:	21396c04 	addi	r4,r4,-6736
 20058d0:	20064d00 	call	20064d0 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 20058d4:	e0bffa17 	ldw	r2,-24(fp)
 20058d8:	10000a26 	beq	r2,zero,2005904 <I2C_MultipleRead+0xa0>
 20058dc:	e0bffe03 	ldbu	r2,-8(fp)
 20058e0:	e13ffb17 	ldw	r4,-20(fp)
 20058e4:	e17ffc17 	ldw	r5,-16(fp)
 20058e8:	100d883a 	mov	r6,r2
 20058ec:	2005ad40 	call	2005ad4 <i2c_write>
 20058f0:	1000041e 	bne	r2,zero,2005904 <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
 20058f4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(2) Fail: SubAddress NACK!\n"));
 20058f8:	010080f4 	movhi	r4,515
 20058fc:	21397704 	addi	r4,r4,-6692
 2005900:	20064d00 	call	20064d0 <myprintf>
    }    
    if (bSuccess)        
 2005904:	e0bffa17 	ldw	r2,-24(fp)
 2005908:	10000326 	beq	r2,zero,2005918 <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
 200590c:	e13ffb17 	ldw	r4,-20(fp)
 2005910:	e17ffc17 	ldw	r5,-16(fp)
 2005914:	20059e00 	call	20059e0 <i2c_start>
    DeviceAddr |= 1; // Read
 2005918:	e0bffd03 	ldbu	r2,-12(fp)
 200591c:	10800054 	ori	r2,r2,1
 2005920:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 2005924:	e0bffa17 	ldw	r2,-24(fp)
 2005928:	10000b26 	beq	r2,zero,2005958 <I2C_MultipleRead+0xf4>
 200592c:	e0bffd03 	ldbu	r2,-12(fp)
 2005930:	10803fcc 	andi	r2,r2,255
 2005934:	e13ffb17 	ldw	r4,-20(fp)
 2005938:	e17ffc17 	ldw	r5,-16(fp)
 200593c:	100d883a 	mov	r6,r2
 2005940:	2005ad40 	call	2005ad4 <i2c_write>
 2005944:	1000041e 	bne	r2,zero,2005958 <I2C_MultipleRead+0xf4>
        bSuccess = FALSE;
 2005948:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
 200594c:	010080f4 	movhi	r4,515
 2005950:	21398204 	addi	r4,r4,-6648
 2005954:	20064d00 	call	20064d0 <myprintf>
    }
    
    if (bSuccess){
 2005958:	e0bffa17 	ldw	r2,-24(fp)
 200595c:	10001726 	beq	r2,zero,20059bc <I2C_MultipleRead+0x158>
        for(i=0;i<len && bSuccess;i++){
 2005960:	e03ff915 	stw	zero,-28(fp)
 2005964:	00001006 	br	20059a8 <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
 2005968:	e0bfff0b 	ldhu	r2,-4(fp)
 200596c:	10ffffc4 	addi	r3,r2,-1
 2005970:	e0bff917 	ldw	r2,-28(fp)
 2005974:	1884c03a 	cmpne	r2,r3,r2
 2005978:	10803fcc 	andi	r2,r2,255
 200597c:	e13ffb17 	ldw	r4,-20(fp)
 2005980:	e17ffc17 	ldw	r5,-16(fp)
 2005984:	e1800217 	ldw	r6,8(fp)
 2005988:	100f883a 	mov	r7,r2
 200598c:	2005c400 	call	2005c40 <i2c_read>
            pBuf++;
 2005990:	e0800217 	ldw	r2,8(fp)
 2005994:	10800044 	addi	r2,r2,1
 2005998:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 200599c:	e0bff917 	ldw	r2,-28(fp)
 20059a0:	10800044 	addi	r2,r2,1
 20059a4:	e0bff915 	stw	r2,-28(fp)
 20059a8:	e0bfff0b 	ldhu	r2,-4(fp)
 20059ac:	e0fff917 	ldw	r3,-28(fp)
 20059b0:	1880020e 	bge	r3,r2,20059bc <I2C_MultipleRead+0x158>
 20059b4:	e0bffa17 	ldw	r2,-24(fp)
 20059b8:	103feb1e 	bne	r2,zero,2005968 <I2C_MultipleRead+0x104>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
 20059bc:	e13ffb17 	ldw	r4,-20(fp)
 20059c0:	e17ffc17 	ldw	r5,-16(fp)
 20059c4:	2005a640 	call	2005a64 <i2c_stop>
    
    return bSuccess;    
 20059c8:	e0bffa17 	ldw	r2,-24(fp)
    
}
 20059cc:	e037883a 	mov	sp,fp
 20059d0:	dfc00117 	ldw	ra,4(sp)
 20059d4:	df000017 	ldw	fp,0(sp)
 20059d8:	dec00204 	addi	sp,sp,8
 20059dc:	f800283a 	ret

020059e0 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 20059e0:	defffc04 	addi	sp,sp,-16
 20059e4:	dfc00315 	stw	ra,12(sp)
 20059e8:	df000215 	stw	fp,8(sp)
 20059ec:	df000204 	addi	fp,sp,8
 20059f0:	e13ffe15 	stw	r4,-8(fp)
 20059f4:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 20059f8:	e0bfff17 	ldw	r2,-4(fp)
 20059fc:	10800104 	addi	r2,r2,4
 2005a00:	00c00044 	movi	r3,1
 2005a04:	10c00035 	stwio	r3,0(r2)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
 2005a08:	e0bfff17 	ldw	r2,-4(fp)
 2005a0c:	00c00044 	movi	r3,1
 2005a10:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
 2005a14:	e0bffe17 	ldw	r2,-8(fp)
 2005a18:	00c00044 	movi	r3,1
 2005a1c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 2005a20:	01000584 	movi	r4,22
 2005a24:	200534c0 	call	200534c <my_wait>
     
    SDA_LOW(data_base); // data low
 2005a28:	e0bfff17 	ldw	r2,-4(fp)
 2005a2c:	0007883a 	mov	r3,zero
 2005a30:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
 2005a34:	01000584 	movi	r4,22
 2005a38:	200534c0 	call	200534c <my_wait>
    SCL_LOW(clk_base); // clock low
 2005a3c:	e0bffe17 	ldw	r2,-8(fp)
 2005a40:	0007883a 	mov	r3,zero
 2005a44:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 2005a48:	01000584 	movi	r4,22
 2005a4c:	200534c0 	call	200534c <my_wait>
}
 2005a50:	e037883a 	mov	sp,fp
 2005a54:	dfc00117 	ldw	ra,4(sp)
 2005a58:	df000017 	ldw	fp,0(sp)
 2005a5c:	dec00204 	addi	sp,sp,8
 2005a60:	f800283a 	ret

02005a64 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 2005a64:	defffc04 	addi	sp,sp,-16
 2005a68:	dfc00315 	stw	ra,12(sp)
 2005a6c:	df000215 	stw	fp,8(sp)
 2005a70:	df000204 	addi	fp,sp,8
 2005a74:	e13ffe15 	stw	r4,-8(fp)
 2005a78:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 2005a7c:	e0bfff17 	ldw	r2,-4(fp)
 2005a80:	10800104 	addi	r2,r2,4
 2005a84:	00c00044 	movi	r3,1
 2005a88:	10c00035 	stwio	r3,0(r2)
    SDA_LOW(data_base); // Data Low
 2005a8c:	e0bfff17 	ldw	r2,-4(fp)
 2005a90:	0007883a 	mov	r3,zero
 2005a94:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 2005a98:	e0bffe17 	ldw	r2,-8(fp)
 2005a9c:	00c00044 	movi	r3,1
 2005aa0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
 2005aa4:	01000584 	movi	r4,22
 2005aa8:	200534c0 	call	200534c <my_wait>
    SDA_HIGH(data_base); // data high
 2005aac:	e0bfff17 	ldw	r2,-4(fp)
 2005ab0:	00c00044 	movi	r3,1
 2005ab4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
 2005ab8:	01000584 	movi	r4,22
 2005abc:	200534c0 	call	200534c <my_wait>
    

    
}
 2005ac0:	e037883a 	mov	sp,fp
 2005ac4:	dfc00117 	ldw	ra,4(sp)
 2005ac8:	df000017 	ldw	fp,0(sp)
 2005acc:	dec00204 	addi	sp,sp,8
 2005ad0:	f800283a 	ret

02005ad4 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 2005ad4:	defff704 	addi	sp,sp,-36
 2005ad8:	dfc00815 	stw	ra,32(sp)
 2005adc:	df000715 	stw	fp,28(sp)
 2005ae0:	df000704 	addi	fp,sp,28
 2005ae4:	e13ffd15 	stw	r4,-12(fp)
 2005ae8:	e17ffe15 	stw	r5,-8(fp)
 2005aec:	3005883a 	mov	r2,r6
 2005af0:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
 2005af4:	00bfe004 	movi	r2,-128
 2005af8:	e0bff905 	stb	r2,-28(fp)
    int i;
    int w;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 2005afc:	e0bffe17 	ldw	r2,-8(fp)
 2005b00:	10800104 	addi	r2,r2,4
 2005b04:	00c00044 	movi	r3,1
 2005b08:	10c00035 	stwio	r3,0(r2)
    
    for(i=0;i<8;i++){
 2005b0c:	e03ffa15 	stw	zero,-24(fp)
 2005b10:	00001f06 	br	2005b90 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 2005b14:	e0bffd17 	ldw	r2,-12(fp)
 2005b18:	0007883a 	mov	r3,zero
 2005b1c:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 2005b20:	e0ffff03 	ldbu	r3,-4(fp)
 2005b24:	e0bff903 	ldbu	r2,-28(fp)
 2005b28:	1884703a 	and	r2,r3,r2
 2005b2c:	10803fcc 	andi	r2,r2,255
 2005b30:	10000426 	beq	r2,zero,2005b44 <i2c_write+0x70>
            SDA_HIGH(data_base);
 2005b34:	e0bffe17 	ldw	r2,-8(fp)
 2005b38:	00c00044 	movi	r3,1
 2005b3c:	10c00035 	stwio	r3,0(r2)
 2005b40:	00000306 	br	2005b50 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
 2005b44:	e0bffe17 	ldw	r2,-8(fp)
 2005b48:	0007883a 	mov	r3,zero
 2005b4c:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 2005b50:	e0bff903 	ldbu	r2,-28(fp)
 2005b54:	1004d07a 	srli	r2,r2,1
 2005b58:	e0bff905 	stb	r2,-28(fp)
        // clock high
        SCL_HIGH(clk_base);
 2005b5c:	e0bffd17 	ldw	r2,-12(fp)
 2005b60:	00c00044 	movi	r3,1
 2005b64:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 2005b68:	01000584 	movi	r4,22
 2005b6c:	200534c0 	call	200534c <my_wait>
        SCL_LOW(clk_base);
 2005b70:	e0bffd17 	ldw	r2,-12(fp)
 2005b74:	0007883a 	mov	r3,zero
 2005b78:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 2005b7c:	01000584 	movi	r4,22
 2005b80:	200534c0 	call	200534c <my_wait>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 2005b84:	e0bffa17 	ldw	r2,-24(fp)
 2005b88:	10800044 	addi	r2,r2,1
 2005b8c:	e0bffa15 	stw	r2,-24(fp)
 2005b90:	e0bffa17 	ldw	r2,-24(fp)
 2005b94:	10800210 	cmplti	r2,r2,8
 2005b98:	103fde1e 	bne	r2,zero,2005b14 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 2005b9c:	e0bffe17 	ldw	r2,-8(fp)
 2005ba0:	10800104 	addi	r2,r2,4
 2005ba4:	0007883a 	mov	r3,zero
 2005ba8:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
//------------------ wait ack for muti-touch panel
SCL_DELAY;
 2005bac:	01000584 	movi	r4,22
 2005bb0:	200534c0 	call	200534c <my_wait>
w = 0;
 2005bb4:	e03ffb15 	stw	zero,-20(fp)
while(SDA_READ(data_base) && w++ < 1000000){
 2005bb8:	0001883a 	nop
 2005bbc:	e0bffe17 	ldw	r2,-8(fp)
 2005bc0:	10800037 	ldwio	r2,0(r2)
 2005bc4:	10000926 	beq	r2,zero,2005bec <i2c_write+0x118>
 2005bc8:	e0bffb17 	ldw	r2,-20(fp)
 2005bcc:	00c003f4 	movhi	r3,15
 2005bd0:	18d08fc4 	addi	r3,r3,16959
 2005bd4:	1884403a 	cmpge	r2,r3,r2
 2005bd8:	e0fffb17 	ldw	r3,-20(fp)
 2005bdc:	18c00044 	addi	r3,r3,1
 2005be0:	e0fffb15 	stw	r3,-20(fp)
 2005be4:	10803fcc 	andi	r2,r2,255
 2005be8:	103ff41e 	bne	r2,zero,2005bbc <i2c_write+0xe8>
}    
    // clock high
    SCL_HIGH(clk_base);  // clock high
 2005bec:	e0bffd17 	ldw	r2,-12(fp)
 2005bf0:	00c00044 	movi	r3,1
 2005bf4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
 2005bf8:	01000584 	movi	r4,22
 2005bfc:	200534c0 	call	200534c <my_wait>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 2005c00:	e0bffe17 	ldw	r2,-8(fp)
 2005c04:	10800037 	ldwio	r2,0(r2)
 2005c08:	1005003a 	cmpeq	r2,r2,zero
 2005c0c:	10803fcc 	andi	r2,r2,255
 2005c10:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 2005c14:	e0bffd17 	ldw	r2,-12(fp)
 2005c18:	0007883a 	mov	r3,zero
 2005c1c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 2005c20:	01000584 	movi	r4,22
 2005c24:	200534c0 	call	200534c <my_wait>
    return bAck;
 2005c28:	e0bffc17 	ldw	r2,-16(fp)
}    
 2005c2c:	e037883a 	mov	sp,fp
 2005c30:	dfc00117 	ldw	ra,4(sp)
 2005c34:	df000017 	ldw	fp,0(sp)
 2005c38:	dec00204 	addi	sp,sp,8
 2005c3c:	f800283a 	ret

02005c40 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 2005c40:	defff804 	addi	sp,sp,-32
 2005c44:	dfc00715 	stw	ra,28(sp)
 2005c48:	df000615 	stw	fp,24(sp)
 2005c4c:	df000604 	addi	fp,sp,24
 2005c50:	e13ffc15 	stw	r4,-16(fp)
 2005c54:	e17ffd15 	stw	r5,-12(fp)
 2005c58:	e1bffe15 	stw	r6,-8(fp)
 2005c5c:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 2005c60:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 2005c64:	e0bffd17 	ldw	r2,-12(fp)
 2005c68:	10800104 	addi	r2,r2,4
 2005c6c:	0007883a 	mov	r3,zero
 2005c70:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
 2005c74:	e0bffc17 	ldw	r2,-16(fp)
 2005c78:	0007883a 	mov	r3,zero
 2005c7c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 2005c80:	01000584 	movi	r4,22
 2005c84:	200534c0 	call	200534c <my_wait>

    for(i=0;i<8;i++){
 2005c88:	e03ffb15 	stw	zero,-20(fp)
 2005c8c:	00001606 	br	2005ce8 <i2c_read+0xa8>
        Data <<= 1;
 2005c90:	e0bffa03 	ldbu	r2,-24(fp)
 2005c94:	1085883a 	add	r2,r2,r2
 2005c98:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
 2005c9c:	e0bffc17 	ldw	r2,-16(fp)
 2005ca0:	00c00044 	movi	r3,1
 2005ca4:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 2005ca8:	01000584 	movi	r4,22
 2005cac:	200534c0 	call	200534c <my_wait>
        if (SDA_READ(data_base))  // read data   
 2005cb0:	e0bffd17 	ldw	r2,-12(fp)
 2005cb4:	10800037 	ldwio	r2,0(r2)
 2005cb8:	10000326 	beq	r2,zero,2005cc8 <i2c_read+0x88>
            Data |= 0x01;
 2005cbc:	e0bffa03 	ldbu	r2,-24(fp)
 2005cc0:	10800054 	ori	r2,r2,1
 2005cc4:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
 2005cc8:	e0bffc17 	ldw	r2,-16(fp)
 2005ccc:	0007883a 	mov	r3,zero
 2005cd0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 2005cd4:	01000584 	movi	r4,22
 2005cd8:	200534c0 	call	200534c <my_wait>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 2005cdc:	e0bffb17 	ldw	r2,-20(fp)
 2005ce0:	10800044 	addi	r2,r2,1
 2005ce4:	e0bffb15 	stw	r2,-20(fp)
 2005ce8:	e0bffb17 	ldw	r2,-20(fp)
 2005cec:	10800210 	cmplti	r2,r2,8
 2005cf0:	103fe71e 	bne	r2,zero,2005c90 <i2c_read+0x50>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 2005cf4:	e0bffc17 	ldw	r2,-16(fp)
 2005cf8:	0007883a 	mov	r3,zero
 2005cfc:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 2005d00:	e0bffd17 	ldw	r2,-12(fp)
 2005d04:	10800104 	addi	r2,r2,4
 2005d08:	00c00044 	movi	r3,1
 2005d0c:	10c00035 	stwio	r3,0(r2)
    if (bAck)
 2005d10:	e0bfff17 	ldw	r2,-4(fp)
 2005d14:	10000426 	beq	r2,zero,2005d28 <i2c_read+0xe8>
        SDA_LOW(data_base);
 2005d18:	e0bffd17 	ldw	r2,-12(fp)
 2005d1c:	0007883a 	mov	r3,zero
 2005d20:	10c00035 	stwio	r3,0(r2)
 2005d24:	00000306 	br	2005d34 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
 2005d28:	e0bffd17 	ldw	r2,-12(fp)
 2005d2c:	00c00044 	movi	r3,1
 2005d30:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
 2005d34:	e0bffc17 	ldw	r2,-16(fp)
 2005d38:	00c00044 	movi	r3,1
 2005d3c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
 2005d40:	01000584 	movi	r4,22
 2005d44:	200534c0 	call	200534c <my_wait>
    SCL_LOW(clk_base); // clock low
 2005d48:	e0bffc17 	ldw	r2,-16(fp)
 2005d4c:	0007883a 	mov	r3,zero
 2005d50:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 2005d54:	01000584 	movi	r4,22
 2005d58:	200534c0 	call	200534c <my_wait>
    SDA_LOW(data_base);  // data low
 2005d5c:	e0bffd17 	ldw	r2,-12(fp)
 2005d60:	0007883a 	mov	r3,zero
 2005d64:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
 2005d68:	01000584 	movi	r4,22
 2005d6c:	200534c0 	call	200534c <my_wait>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 2005d70:	e0bffe17 	ldw	r2,-8(fp)
 2005d74:	e0fffa03 	ldbu	r3,-24(fp)
 2005d78:	10c00005 	stb	r3,0(r2)
}
 2005d7c:	e037883a 	mov	sp,fp
 2005d80:	dfc00117 	ldw	ra,4(sp)
 2005d84:	df000017 	ldw	fp,0(sp)
 2005d88:	dec00204 	addi	sp,sp,8
 2005d8c:	f800283a 	ret

02005d90 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
 2005d90:	defff704 	addi	sp,sp,-36
 2005d94:	dfc00815 	stw	ra,32(sp)
 2005d98:	df000715 	stw	fp,28(sp)
 2005d9c:	df000704 	addi	fp,sp,28
 2005da0:	e13ffb15 	stw	r4,-20(fp)
 2005da4:	e17ffc15 	stw	r5,-16(fp)
 2005da8:	3007883a 	mov	r3,r6
 2005dac:	3805883a 	mov	r2,r7
 2005db0:	e1000217 	ldw	r4,8(fp)
 2005db4:	e0fffd05 	stb	r3,-12(fp)
 2005db8:	e0bffe0d 	sth	r2,-8(fp)
 2005dbc:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
 2005dc0:	00800044 	movi	r2,1
 2005dc4:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 2005dc8:	e0bffe0b 	ldhu	r2,-8(fp)
 2005dcc:	1004d23a 	srli	r2,r2,8
 2005dd0:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 2005dd4:	e0bffe0b 	ldhu	r2,-8(fp)
 2005dd8:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2005ddc:	e13ffb17 	ldw	r4,-20(fp)
 2005de0:	e17ffc17 	ldw	r5,-16(fp)
 2005de4:	20059e00 	call	20059e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2005de8:	e0bffd03 	ldbu	r2,-12(fp)
 2005dec:	10803fcc 	andi	r2,r2,255
 2005df0:	e13ffb17 	ldw	r4,-20(fp)
 2005df4:	e17ffc17 	ldw	r5,-16(fp)
 2005df8:	100d883a 	mov	r6,r2
 2005dfc:	2005ad40 	call	2005ad4 <i2c_write>
 2005e00:	1000041e 	bne	r2,zero,2005e14 <I2CL_Write+0x84>
        bSuccess = FALSE;
 2005e04:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 2005e08:	010080f4 	movhi	r4,515
 2005e0c:	21392f04 	addi	r4,r4,-6980
 2005e10:	20064d00 	call	20064d0 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 2005e14:	e0bff917 	ldw	r2,-28(fp)
 2005e18:	10000a26 	beq	r2,zero,2005e44 <I2CL_Write+0xb4>
 2005e1c:	e0bffa03 	ldbu	r2,-24(fp)
 2005e20:	e13ffb17 	ldw	r4,-20(fp)
 2005e24:	e17ffc17 	ldw	r5,-16(fp)
 2005e28:	100d883a 	mov	r6,r2
 2005e2c:	2005ad40 	call	2005ad4 <i2c_write>
 2005e30:	1000041e 	bne	r2,zero,2005e44 <I2CL_Write+0xb4>
        bSuccess = FALSE;
 2005e34:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 2005e38:	010080f4 	movhi	r4,515
 2005e3c:	21398d04 	addi	r4,r4,-6604
 2005e40:	20064d00 	call	20064d0 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 2005e44:	e0bff917 	ldw	r2,-28(fp)
 2005e48:	10000a26 	beq	r2,zero,2005e74 <I2CL_Write+0xe4>
 2005e4c:	e0bffa43 	ldbu	r2,-23(fp)
 2005e50:	e13ffb17 	ldw	r4,-20(fp)
 2005e54:	e17ffc17 	ldw	r5,-16(fp)
 2005e58:	100d883a 	mov	r6,r2
 2005e5c:	2005ad40 	call	2005ad4 <i2c_write>
 2005e60:	1000041e 	bne	r2,zero,2005e74 <I2CL_Write+0xe4>
        bSuccess = FALSE;
 2005e64:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 2005e68:	010080f4 	movhi	r4,515
 2005e6c:	21399704 	addi	r4,r4,-6564
 2005e70:	20064d00 	call	20064d0 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 2005e74:	e0bff917 	ldw	r2,-28(fp)
 2005e78:	10000a26 	beq	r2,zero,2005ea4 <I2CL_Write+0x114>
 2005e7c:	e0bfff03 	ldbu	r2,-4(fp)
 2005e80:	e13ffb17 	ldw	r4,-20(fp)
 2005e84:	e17ffc17 	ldw	r5,-16(fp)
 2005e88:	100d883a 	mov	r6,r2
 2005e8c:	2005ad40 	call	2005ad4 <i2c_write>
 2005e90:	1000041e 	bne	r2,zero,2005ea4 <I2CL_Write+0x114>
        bSuccess = FALSE;
 2005e94:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 2005e98:	010080f4 	movhi	r4,515
 2005e9c:	21394004 	addi	r4,r4,-6912
 2005ea0:	20064d00 	call	20064d0 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 2005ea4:	e13ffb17 	ldw	r4,-20(fp)
 2005ea8:	e17ffc17 	ldw	r5,-16(fp)
 2005eac:	2005a640 	call	2005a64 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 2005eb0:	0106d604 	movi	r4,7000
 2005eb4:	20119800 	call	2011980 <usleep>
    
    return bSuccess;
 2005eb8:	e0bff917 	ldw	r2,-28(fp)
    
}
 2005ebc:	e037883a 	mov	sp,fp
 2005ec0:	dfc00117 	ldw	ra,4(sp)
 2005ec4:	df000017 	ldw	fp,0(sp)
 2005ec8:	dec00204 	addi	sp,sp,8
 2005ecc:	f800283a 	ret

02005ed0 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
 2005ed0:	defff804 	addi	sp,sp,-32
 2005ed4:	dfc00715 	stw	ra,28(sp)
 2005ed8:	df000615 	stw	fp,24(sp)
 2005edc:	df000604 	addi	fp,sp,24
 2005ee0:	e13ffc15 	stw	r4,-16(fp)
 2005ee4:	e17ffd15 	stw	r5,-12(fp)
 2005ee8:	3007883a 	mov	r3,r6
 2005eec:	3805883a 	mov	r2,r7
 2005ef0:	e0fffe05 	stb	r3,-8(fp)
 2005ef4:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 2005ef8:	00800044 	movi	r2,1
 2005efc:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 2005f00:	e0bfff0b 	ldhu	r2,-4(fp)
 2005f04:	1004d23a 	srli	r2,r2,8
 2005f08:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
 2005f0c:	e0bfff0b 	ldhu	r2,-4(fp)
 2005f10:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
 2005f14:	e13ffc17 	ldw	r4,-16(fp)
 2005f18:	e17ffd17 	ldw	r5,-12(fp)
 2005f1c:	20059e00 	call	20059e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2005f20:	e0bffe03 	ldbu	r2,-8(fp)
 2005f24:	10803fcc 	andi	r2,r2,255
 2005f28:	e13ffc17 	ldw	r4,-16(fp)
 2005f2c:	e17ffd17 	ldw	r5,-12(fp)
 2005f30:	100d883a 	mov	r6,r2
 2005f34:	2005ad40 	call	2005ad4 <i2c_write>
 2005f38:	1000041e 	bne	r2,zero,2005f4c <I2CL_Read+0x7c>
        bSuccess = FALSE;
 2005f3c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 2005f40:	010080f4 	movhi	r4,515
 2005f44:	21392f04 	addi	r4,r4,-6980
 2005f48:	20064d00 	call	20064d0 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 2005f4c:	e0bffa17 	ldw	r2,-24(fp)
 2005f50:	10000a26 	beq	r2,zero,2005f7c <I2CL_Read+0xac>
 2005f54:	e0bffb03 	ldbu	r2,-20(fp)
 2005f58:	e13ffc17 	ldw	r4,-16(fp)
 2005f5c:	e17ffd17 	ldw	r5,-12(fp)
 2005f60:	100d883a 	mov	r6,r2
 2005f64:	2005ad40 	call	2005ad4 <i2c_write>
 2005f68:	1000041e 	bne	r2,zero,2005f7c <I2CL_Read+0xac>
        bSuccess = FALSE;
 2005f6c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 2005f70:	010080f4 	movhi	r4,515
 2005f74:	21398d04 	addi	r4,r4,-6604
 2005f78:	20064d00 	call	20064d0 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 2005f7c:	e0bffa17 	ldw	r2,-24(fp)
 2005f80:	10000a26 	beq	r2,zero,2005fac <I2CL_Read+0xdc>
 2005f84:	e0bffb43 	ldbu	r2,-19(fp)
 2005f88:	e13ffc17 	ldw	r4,-16(fp)
 2005f8c:	e17ffd17 	ldw	r5,-12(fp)
 2005f90:	100d883a 	mov	r6,r2
 2005f94:	2005ad40 	call	2005ad4 <i2c_write>
 2005f98:	1000041e 	bne	r2,zero,2005fac <I2CL_Read+0xdc>
        bSuccess = FALSE;
 2005f9c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 2005fa0:	010080f4 	movhi	r4,515
 2005fa4:	21399704 	addi	r4,r4,-6564
 2005fa8:	20064d00 	call	20064d0 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 2005fac:	e13ffc17 	ldw	r4,-16(fp)
 2005fb0:	e17ffd17 	ldw	r5,-12(fp)
 2005fb4:	20059e00 	call	20059e0 <i2c_start>
    DeviceAddr |= 1; // Read
 2005fb8:	e0bffe03 	ldbu	r2,-8(fp)
 2005fbc:	10800054 	ori	r2,r2,1
 2005fc0:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 2005fc4:	e0bffa17 	ldw	r2,-24(fp)
 2005fc8:	10000b26 	beq	r2,zero,2005ff8 <I2CL_Read+0x128>
 2005fcc:	e0bffe03 	ldbu	r2,-8(fp)
 2005fd0:	10803fcc 	andi	r2,r2,255
 2005fd4:	e13ffc17 	ldw	r4,-16(fp)
 2005fd8:	e17ffd17 	ldw	r5,-12(fp)
 2005fdc:	100d883a 	mov	r6,r2
 2005fe0:	2005ad40 	call	2005ad4 <i2c_write>
 2005fe4:	1000041e 	bne	r2,zero,2005ff8 <I2CL_Read+0x128>
        bSuccess = FALSE;
 2005fe8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 2005fec:	010080f4 	movhi	r4,515
 2005ff0:	21396304 	addi	r4,r4,-6772
 2005ff4:	20064d00 	call	20064d0 <myprintf>
    }
    
    if (bSuccess){
 2005ff8:	e0bffa17 	ldw	r2,-24(fp)
 2005ffc:	10000526 	beq	r2,zero,2006014 <I2CL_Read+0x144>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 2006000:	e13ffc17 	ldw	r4,-16(fp)
 2006004:	e17ffd17 	ldw	r5,-12(fp)
 2006008:	e1800217 	ldw	r6,8(fp)
 200600c:	000f883a 	mov	r7,zero
 2006010:	2005c400 	call	2005c40 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 2006014:	e13ffc17 	ldw	r4,-16(fp)
 2006018:	e17ffd17 	ldw	r5,-12(fp)
 200601c:	2005a640 	call	2005a64 <i2c_stop>
    
    return bSuccess;    
 2006020:	e0bffa17 	ldw	r2,-24(fp)
}
 2006024:	e037883a 	mov	sp,fp
 2006028:	dfc00117 	ldw	ra,4(sp)
 200602c:	df000017 	ldw	fp,0(sp)
 2006030:	dec00204 	addi	sp,sp,8
 2006034:	f800283a 	ret

02006038 <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 2006038:	defff604 	addi	sp,sp,-40
 200603c:	dfc00915 	stw	ra,36(sp)
 2006040:	df000815 	stw	fp,32(sp)
 2006044:	df000804 	addi	fp,sp,32
 2006048:	e13ffb15 	stw	r4,-20(fp)
 200604c:	e17ffc15 	stw	r5,-16(fp)
 2006050:	3007883a 	mov	r3,r6
 2006054:	3805883a 	mov	r2,r7
 2006058:	e1000317 	ldw	r4,12(fp)
 200605c:	e0fffd05 	stb	r3,-12(fp)
 2006060:	e0bffe0d 	sth	r2,-8(fp)
 2006064:	e13fff0d 	sth	r4,-4(fp)
    int i;
    bool bSuccess = TRUE;
 2006068:	00800044 	movi	r2,1
 200606c:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 2006070:	e0bffe0b 	ldhu	r2,-8(fp)
 2006074:	1004d23a 	srli	r2,r2,8
 2006078:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;     
 200607c:	e0bffe0b 	ldhu	r2,-8(fp)
 2006080:	e0bffa45 	stb	r2,-23(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2006084:	e13ffb17 	ldw	r4,-20(fp)
 2006088:	e17ffc17 	ldw	r5,-16(fp)
 200608c:	20059e00 	call	20059e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2006090:	e0bffd03 	ldbu	r2,-12(fp)
 2006094:	10803fcc 	andi	r2,r2,255
 2006098:	e13ffb17 	ldw	r4,-20(fp)
 200609c:	e17ffc17 	ldw	r5,-16(fp)
 20060a0:	100d883a 	mov	r6,r2
 20060a4:	2005ad40 	call	2005ad4 <i2c_write>
 20060a8:	1000041e 	bne	r2,zero,20060bc <I2CL_MultipleRead+0x84>
        bSuccess = FALSE;
 20060ac:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 20060b0:	010080f4 	movhi	r4,515
 20060b4:	21392f04 	addi	r4,r4,-6980
 20060b8:	20064d00 	call	20064d0 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 20060bc:	e0bff917 	ldw	r2,-28(fp)
 20060c0:	10000a26 	beq	r2,zero,20060ec <I2CL_MultipleRead+0xb4>
 20060c4:	e0bffa03 	ldbu	r2,-24(fp)
 20060c8:	e13ffb17 	ldw	r4,-20(fp)
 20060cc:	e17ffc17 	ldw	r5,-16(fp)
 20060d0:	100d883a 	mov	r6,r2
 20060d4:	2005ad40 	call	2005ad4 <i2c_write>
 20060d8:	1000041e 	bne	r2,zero,20060ec <I2CL_MultipleRead+0xb4>
        bSuccess = FALSE;
 20060dc:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 20060e0:	010080f4 	movhi	r4,515
 20060e4:	21398d04 	addi	r4,r4,-6604
 20060e8:	20064d00 	call	20064d0 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 20060ec:	e0bff917 	ldw	r2,-28(fp)
 20060f0:	10000a26 	beq	r2,zero,200611c <I2CL_MultipleRead+0xe4>
 20060f4:	e0bffa43 	ldbu	r2,-23(fp)
 20060f8:	e13ffb17 	ldw	r4,-20(fp)
 20060fc:	e17ffc17 	ldw	r5,-16(fp)
 2006100:	100d883a 	mov	r6,r2
 2006104:	2005ad40 	call	2005ad4 <i2c_write>
 2006108:	1000041e 	bne	r2,zero,200611c <I2CL_MultipleRead+0xe4>
        bSuccess = FALSE;
 200610c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 2006110:	010080f4 	movhi	r4,515
 2006114:	21399704 	addi	r4,r4,-6564
 2006118:	20064d00 	call	20064d0 <myprintf>
    }    
    if (bSuccess)        
 200611c:	e0bff917 	ldw	r2,-28(fp)
 2006120:	10000326 	beq	r2,zero,2006130 <I2CL_MultipleRead+0xf8>
        i2c_start(clk_base, data_base);  // restart
 2006124:	e13ffb17 	ldw	r4,-20(fp)
 2006128:	e17ffc17 	ldw	r5,-16(fp)
 200612c:	20059e00 	call	20059e0 <i2c_start>
    DeviceAddr |= 1; // Read
 2006130:	e0bffd03 	ldbu	r2,-12(fp)
 2006134:	10800054 	ori	r2,r2,1
 2006138:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 200613c:	e0bff917 	ldw	r2,-28(fp)
 2006140:	10000b26 	beq	r2,zero,2006170 <I2CL_MultipleRead+0x138>
 2006144:	e0bffd03 	ldbu	r2,-12(fp)
 2006148:	10803fcc 	andi	r2,r2,255
 200614c:	e13ffb17 	ldw	r4,-20(fp)
 2006150:	e17ffc17 	ldw	r5,-16(fp)
 2006154:	100d883a 	mov	r6,r2
 2006158:	2005ad40 	call	2005ad4 <i2c_write>
 200615c:	1000041e 	bne	r2,zero,2006170 <I2CL_MultipleRead+0x138>
        bSuccess = FALSE;
 2006160:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
 2006164:	010080f4 	movhi	r4,515
 2006168:	2139a104 	addi	r4,r4,-6524
 200616c:	20064d00 	call	20064d0 <myprintf>
    }
    
    if (bSuccess){
 2006170:	e0bff917 	ldw	r2,-28(fp)
 2006174:	10001726 	beq	r2,zero,20061d4 <I2CL_MultipleRead+0x19c>
        for(i=0;i<len && bSuccess;i++){
 2006178:	e03ff815 	stw	zero,-32(fp)
 200617c:	00001006 	br	20061c0 <I2CL_MultipleRead+0x188>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 2006180:	e0bff817 	ldw	r2,-32(fp)
 2006184:	e0c00217 	ldw	r3,8(fp)
 2006188:	1887883a 	add	r3,r3,r2
 200618c:	e0bfff0b 	ldhu	r2,-4(fp)
 2006190:	113fffc4 	addi	r4,r2,-1
 2006194:	e0bff817 	ldw	r2,-32(fp)
 2006198:	2084c03a 	cmpne	r2,r4,r2
 200619c:	10803fcc 	andi	r2,r2,255
 20061a0:	e13ffb17 	ldw	r4,-20(fp)
 20061a4:	e17ffc17 	ldw	r5,-16(fp)
 20061a8:	180d883a 	mov	r6,r3
 20061ac:	100f883a 	mov	r7,r2
 20061b0:	2005c400 	call	2005c40 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 20061b4:	e0bff817 	ldw	r2,-32(fp)
 20061b8:	10800044 	addi	r2,r2,1
 20061bc:	e0bff815 	stw	r2,-32(fp)
 20061c0:	e0bfff0b 	ldhu	r2,-4(fp)
 20061c4:	e0fff817 	ldw	r3,-32(fp)
 20061c8:	1880020e 	bge	r3,r2,20061d4 <I2CL_MultipleRead+0x19c>
 20061cc:	e0bff917 	ldw	r2,-28(fp)
 20061d0:	103feb1e 	bne	r2,zero,2006180 <I2CL_MultipleRead+0x148>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 20061d4:	e13ffb17 	ldw	r4,-20(fp)
 20061d8:	e17ffc17 	ldw	r5,-16(fp)
 20061dc:	2005a640 	call	2005a64 <i2c_stop>
    
    return bSuccess;    
 20061e0:	e0bff917 	ldw	r2,-28(fp)
    
} 
 20061e4:	e037883a 	mov	sp,fp
 20061e8:	dfc00117 	ldw	ra,4(sp)
 20061ec:	df000017 	ldw	fp,0(sp)
 20061f0:	dec00204 	addi	sp,sp,8
 20061f4:	f800283a 	ret

020061f8 <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 20061f8:	defff604 	addi	sp,sp,-40
 20061fc:	dfc00915 	stw	ra,36(sp)
 2006200:	df000815 	stw	fp,32(sp)
 2006204:	df000804 	addi	fp,sp,32
 2006208:	e13ffb15 	stw	r4,-20(fp)
 200620c:	e17ffc15 	stw	r5,-16(fp)
 2006210:	3007883a 	mov	r3,r6
 2006214:	3805883a 	mov	r2,r7
 2006218:	e1000317 	ldw	r4,12(fp)
 200621c:	e0fffd05 	stb	r3,-12(fp)
 2006220:	e0bffe0d 	sth	r2,-8(fp)
 2006224:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess = TRUE;
 2006228:	00800044 	movi	r2,1
 200622c:	e0bff815 	stw	r2,-32(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 2006230:	e0bffe0b 	ldhu	r2,-8(fp)
 2006234:	1004d23a 	srli	r2,r2,8
 2006238:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 200623c:	e0bffe0b 	ldhu	r2,-8(fp)
 2006240:	e0bffa45 	stb	r2,-23(fp)
    

    i2c_start(clk_base, data_base);
 2006244:	e13ffb17 	ldw	r4,-20(fp)
 2006248:	e17ffc17 	ldw	r5,-16(fp)
 200624c:	20059e00 	call	20059e0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2006250:	e0bffd03 	ldbu	r2,-12(fp)
 2006254:	10803fcc 	andi	r2,r2,255
 2006258:	e13ffb17 	ldw	r4,-20(fp)
 200625c:	e17ffc17 	ldw	r5,-16(fp)
 2006260:	100d883a 	mov	r6,r2
 2006264:	2005ad40 	call	2005ad4 <i2c_write>
 2006268:	1000041e 	bne	r2,zero,200627c <I2CL_MultipleWrite+0x84>
        bSuccess = FALSE;
 200626c:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 2006270:	010080f4 	movhi	r4,515
 2006274:	21392f04 	addi	r4,r4,-6980
 2006278:	20064d00 	call	20064d0 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 200627c:	e0bff817 	ldw	r2,-32(fp)
 2006280:	10000a26 	beq	r2,zero,20062ac <I2CL_MultipleWrite+0xb4>
 2006284:	e0bffa03 	ldbu	r2,-24(fp)
 2006288:	e13ffb17 	ldw	r4,-20(fp)
 200628c:	e17ffc17 	ldw	r5,-16(fp)
 2006290:	100d883a 	mov	r6,r2
 2006294:	2005ad40 	call	2005ad4 <i2c_write>
 2006298:	1000041e 	bne	r2,zero,20062ac <I2CL_MultipleWrite+0xb4>
        bSuccess = FALSE;
 200629c:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 20062a0:	010080f4 	movhi	r4,515
 20062a4:	21398d04 	addi	r4,r4,-6604
 20062a8:	20064d00 	call	20064d0 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 20062ac:	e0bff817 	ldw	r2,-32(fp)
 20062b0:	10000a26 	beq	r2,zero,20062dc <I2CL_MultipleWrite+0xe4>
 20062b4:	e0bffa43 	ldbu	r2,-23(fp)
 20062b8:	e13ffb17 	ldw	r4,-20(fp)
 20062bc:	e17ffc17 	ldw	r5,-16(fp)
 20062c0:	100d883a 	mov	r6,r2
 20062c4:	2005ad40 	call	2005ad4 <i2c_write>
 20062c8:	1000041e 	bne	r2,zero,20062dc <I2CL_MultipleWrite+0xe4>
        bSuccess = FALSE;
 20062cc:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 20062d0:	010080f4 	movhi	r4,515
 20062d4:	21399704 	addi	r4,r4,-6564
 20062d8:	20064d00 	call	20064d0 <myprintf>
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
 20062dc:	e0bff817 	ldw	r2,-32(fp)
 20062e0:	10001926 	beq	r2,zero,2006348 <I2CL_MultipleWrite+0x150>
        for(i=0;i<len && bSuccess;i++){
 20062e4:	e03ff915 	stw	zero,-28(fp)
 20062e8:	00000d06 	br	2006320 <I2CL_MultipleWrite+0x128>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
 20062ec:	e0bff917 	ldw	r2,-28(fp)
 20062f0:	e0c00217 	ldw	r3,8(fp)
 20062f4:	1885883a 	add	r2,r3,r2
 20062f8:	10800003 	ldbu	r2,0(r2)
 20062fc:	10803fcc 	andi	r2,r2,255
 2006300:	e13ffb17 	ldw	r4,-20(fp)
 2006304:	e17ffc17 	ldw	r5,-16(fp)
 2006308:	100d883a 	mov	r6,r2
 200630c:	2005ad40 	call	2005ad4 <i2c_write>
 2006310:	e0bff815 	stw	r2,-32(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
 2006314:	e0bff917 	ldw	r2,-28(fp)
 2006318:	10800044 	addi	r2,r2,1
 200631c:	e0bff915 	stw	r2,-28(fp)
 2006320:	e0bfff0b 	ldhu	r2,-4(fp)
 2006324:	e0fff917 	ldw	r3,-28(fp)
 2006328:	1880020e 	bge	r3,r2,2006334 <I2CL_MultipleWrite+0x13c>
 200632c:	e0bff817 	ldw	r2,-32(fp)
 2006330:	103fee1e 	bne	r2,zero,20062ec <I2CL_MultipleWrite+0xf4>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
 2006334:	e0bff817 	ldw	r2,-32(fp)
 2006338:	1000031e 	bne	r2,zero,2006348 <I2CL_MultipleWrite+0x150>
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 200633c:	010080f4 	movhi	r4,515
 2006340:	21394004 	addi	r4,r4,-6912
 2006344:	20064d00 	call	20064d0 <myprintf>
    }
    i2c_stop(clk_base, data_base);
 2006348:	e13ffb17 	ldw	r4,-20(fp)
 200634c:	e17ffc17 	ldw	r5,-16(fp)
 2006350:	2005a640 	call	2005a64 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 2006354:	0106d604 	movi	r4,7000
 2006358:	20119800 	call	2011980 <usleep>
    
    return bSuccess;
 200635c:	e0bff817 	ldw	r2,-32(fp)
    
}
 2006360:	e037883a 	mov	sp,fp
 2006364:	dfc00117 	ldw	ra,4(sp)
 2006368:	df000017 	ldw	fp,0(sp)
 200636c:	dec00204 	addi	sp,sp,8
 2006370:	f800283a 	ret

02006374 <I2CL_Read16>:
 


bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
 2006374:	defff604 	addi	sp,sp,-40
 2006378:	dfc00915 	stw	ra,36(sp)
 200637c:	df000815 	stw	fp,32(sp)
 2006380:	df000804 	addi	fp,sp,32
 2006384:	e13ffc15 	stw	r4,-16(fp)
 2006388:	e17ffd15 	stw	r5,-12(fp)
 200638c:	3007883a 	mov	r3,r6
 2006390:	3805883a 	mov	r2,r7
 2006394:	e0fffe05 	stb	r3,-8(fp)
 2006398:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 200639c:	e0fffe07 	ldb	r3,-8(fp)
 20063a0:	e0bfff0b 	ldhu	r2,-4(fp)
 20063a4:	e13ffb04 	addi	r4,fp,-20
 20063a8:	d9000015 	stw	r4,0(sp)
 20063ac:	01000084 	movi	r4,2
 20063b0:	d9000115 	stw	r4,4(sp)
 20063b4:	e13ffc17 	ldw	r4,-16(fp)
 20063b8:	e17ffd17 	ldw	r5,-12(fp)
 20063bc:	180d883a 	mov	r6,r3
 20063c0:	100f883a 	mov	r7,r2
 20063c4:	20060380 	call	2006038 <I2CL_MultipleRead>
 20063c8:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
 20063cc:	e0bffa17 	ldw	r2,-24(fp)
 20063d0:	10000a26 	beq	r2,zero,20063fc <I2CL_Read16+0x88>
        *pControlData = (szData[0] << 8 ) | szData[1];
 20063d4:	e0bffb03 	ldbu	r2,-20(fp)
 20063d8:	10803fcc 	andi	r2,r2,255
 20063dc:	1004923a 	slli	r2,r2,8
 20063e0:	1007883a 	mov	r3,r2
 20063e4:	e0bffb43 	ldbu	r2,-19(fp)
 20063e8:	10803fcc 	andi	r2,r2,255
 20063ec:	1884b03a 	or	r2,r3,r2
 20063f0:	1007883a 	mov	r3,r2
 20063f4:	e0800217 	ldw	r2,8(fp)
 20063f8:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
 20063fc:	e0bffa17 	ldw	r2,-24(fp)
}
 2006400:	e037883a 	mov	sp,fp
 2006404:	dfc00117 	ldw	ra,4(sp)
 2006408:	df000017 	ldw	fp,0(sp)
 200640c:	dec00204 	addi	sp,sp,8
 2006410:	f800283a 	ret

02006414 <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
 2006414:	defff504 	addi	sp,sp,-44
 2006418:	dfc00a15 	stw	ra,40(sp)
 200641c:	df000915 	stw	fp,36(sp)
 2006420:	df000904 	addi	fp,sp,36
 2006424:	e13ffb15 	stw	r4,-20(fp)
 2006428:	e17ffc15 	stw	r5,-16(fp)
 200642c:	3007883a 	mov	r3,r6
 2006430:	3805883a 	mov	r2,r7
 2006434:	e1000217 	ldw	r4,8(fp)
 2006438:	e0fffd05 	stb	r3,-12(fp)
 200643c:	e0bffe0d 	sth	r2,-8(fp)
 2006440:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
 2006444:	e0bfff0b 	ldhu	r2,-4(fp)
 2006448:	1004d23a 	srli	r2,r2,8
 200644c:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
 2006450:	e0bfff0b 	ldhu	r2,-4(fp)
 2006454:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 2006458:	e0fffd07 	ldb	r3,-12(fp)
 200645c:	e0bffe0b 	ldhu	r2,-8(fp)
 2006460:	e13ffa04 	addi	r4,fp,-24
 2006464:	d9000015 	stw	r4,0(sp)
 2006468:	01000084 	movi	r4,2
 200646c:	d9000115 	stw	r4,4(sp)
 2006470:	e13ffb17 	ldw	r4,-20(fp)
 2006474:	e17ffc17 	ldw	r5,-16(fp)
 2006478:	180d883a 	mov	r6,r3
 200647c:	100f883a 	mov	r7,r2
 2006480:	20061f80 	call	20061f8 <I2CL_MultipleWrite>
 2006484:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
 2006488:	e0bff917 	ldw	r2,-28(fp)
}
 200648c:	e037883a 	mov	sp,fp
 2006490:	dfc00117 	ldw	ra,4(sp)
 2006494:	df000017 	ldw	fp,0(sp)
 2006498:	dec00204 	addi	sp,sp,8
 200649c:	f800283a 	ret

020064a0 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
 20064a0:	defffd04 	addi	sp,sp,-12
 20064a4:	dfc00215 	stw	ra,8(sp)
 20064a8:	df000115 	stw	fp,4(sp)
 20064ac:	df000104 	addi	fp,sp,4
 20064b0:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
 20064b4:	e13fff17 	ldw	r4,-4(fp)
 20064b8:	20092800 	call	2009280 <printf>
}
 20064bc:	e037883a 	mov	sp,fp
 20064c0:	dfc00117 	ldw	ra,4(sp)
 20064c4:	df000017 	ldw	fp,0(sp)
 20064c8:	dec00204 	addi	sp,sp,8
 20064cc:	f800283a 	ret

020064d0 <myprintf>:





int myprintf(char *format, ...){
 20064d0:	deff7804 	addi	sp,sp,-544
 20064d4:	dfc08415 	stw	ra,528(sp)
 20064d8:	df008315 	stw	fp,524(sp)
 20064dc:	df008304 	addi	fp,sp,524
 20064e0:	e1400215 	stw	r5,8(fp)
 20064e4:	e1800315 	stw	r6,12(fp)
 20064e8:	e1c00415 	stw	r7,16(fp)
 20064ec:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
 20064f0:	e0800204 	addi	r2,fp,8
 20064f4:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
 20064f8:	e0bffe17 	ldw	r2,-8(fp)
 20064fc:	e0ff7e04 	addi	r3,fp,-520
 2006500:	1809883a 	mov	r4,r3
 2006504:	01408004 	movi	r5,512
 2006508:	e1bfff17 	ldw	r6,-4(fp)
 200650c:	100f883a 	mov	r7,r2
 2006510:	200b4980 	call	200b498 <vsnprintf>
 2006514:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
 2006518:	e0bf7e04 	addi	r2,fp,-520
 200651c:	1009883a 	mov	r4,r2
 2006520:	20064a00 	call	20064a0 <debug_output>

    return rc;    
 2006524:	e0bf7d17 	ldw	r2,-524(fp)
}
 2006528:	e037883a 	mov	sp,fp
 200652c:	dfc00117 	ldw	ra,4(sp)
 2006530:	df000017 	ldw	fp,0(sp)
 2006534:	dec00504 	addi	sp,sp,20
 2006538:	f800283a 	ret

0200653c <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
 200653c:	defff704 	addi	sp,sp,-36
 2006540:	dfc00815 	stw	ra,32(sp)
 2006544:	df000715 	stw	fp,28(sp)
 2006548:	df000704 	addi	fp,sp,28
 200654c:	e13ffe15 	stw	r4,-8(fp)
 2006550:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 2006554:	e03ff915 	stw	zero,-28(fp)
 2006558:	00001106 	br	20065a0 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
 200655c:	e0bff917 	ldw	r2,-28(fp)
 2006560:	e0fffe17 	ldw	r3,-8(fp)
 2006564:	1885883a 	add	r2,r3,r2
 2006568:	10800003 	ldbu	r2,0(r2)
 200656c:	10803fcc 	andi	r2,r2,255
 2006570:	e0fffa04 	addi	r3,fp,-24
 2006574:	1809883a 	mov	r4,r3
 2006578:	014080f4 	movhi	r5,515
 200657c:	2979ac04 	addi	r5,r5,-6480
 2006580:	100d883a 	mov	r6,r2
 2006584:	20094100 	call	2009410 <sprintf>
        DEBUG((szText));
 2006588:	e0bffa04 	addi	r2,fp,-24
 200658c:	1009883a 	mov	r4,r2
 2006590:	20064d00 	call	20064d0 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 2006594:	e0bff917 	ldw	r2,-28(fp)
 2006598:	10800044 	addi	r2,r2,1
 200659c:	e0bff915 	stw	r2,-28(fp)
 20065a0:	e0fff917 	ldw	r3,-28(fp)
 20065a4:	e0bfff17 	ldw	r2,-4(fp)
 20065a8:	18bfec16 	blt	r3,r2,200655c <myprintf_hexarray+0x20>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
 20065ac:	e0bfff17 	ldw	r2,-4(fp)
}
 20065b0:	e037883a 	mov	sp,fp
 20065b4:	dfc00117 	ldw	ra,4(sp)
 20065b8:	df000017 	ldw	fp,0(sp)
 20065bc:	dec00204 	addi	sp,sp,8
 20065c0:	f800283a 	ret

020065c4 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
 20065c4:	defff704 	addi	sp,sp,-36
 20065c8:	dfc00815 	stw	ra,32(sp)
 20065cc:	df000715 	stw	fp,28(sp)
 20065d0:	df000704 	addi	fp,sp,28
 20065d4:	e13ffe15 	stw	r4,-8(fp)
 20065d8:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 20065dc:	e03ff915 	stw	zero,-28(fp)
 20065e0:	00001206 	br	200662c <myprintf_dwordarray+0x68>
        sprintf(szText, "[%08X]", *(pArray+i));
 20065e4:	e0bff917 	ldw	r2,-28(fp)
 20065e8:	1085883a 	add	r2,r2,r2
 20065ec:	1085883a 	add	r2,r2,r2
 20065f0:	e0fffe17 	ldw	r3,-8(fp)
 20065f4:	1885883a 	add	r2,r3,r2
 20065f8:	10800017 	ldw	r2,0(r2)
 20065fc:	e0fffa04 	addi	r3,fp,-24
 2006600:	1809883a 	mov	r4,r3
 2006604:	014080f4 	movhi	r5,515
 2006608:	2979ae04 	addi	r5,r5,-6472
 200660c:	100d883a 	mov	r6,r2
 2006610:	20094100 	call	2009410 <sprintf>
        DEBUG((szText));
 2006614:	e0bffa04 	addi	r2,fp,-24
 2006618:	1009883a 	mov	r4,r2
 200661c:	20064d00 	call	20064d0 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 2006620:	e0bff917 	ldw	r2,-28(fp)
 2006624:	10800044 	addi	r2,r2,1
 2006628:	e0bff915 	stw	r2,-28(fp)
 200662c:	e0fff917 	ldw	r3,-28(fp)
 2006630:	e0bfff17 	ldw	r2,-4(fp)
 2006634:	18bfeb16 	blt	r3,r2,20065e4 <myprintf_dwordarray+0x20>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
 2006638:	e0bfff17 	ldw	r2,-4(fp)
}
 200663c:	e037883a 	mov	sp,fp
 2006640:	dfc00117 	ldw	ra,4(sp)
 2006644:	df000017 	ldw	fp,0(sp)
 2006648:	dec00204 	addi	sp,sp,8
 200664c:	f800283a 	ret

02006650 <QUEUE_New>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
 2006650:	defffb04 	addi	sp,sp,-20
 2006654:	dfc00415 	stw	ra,16(sp)
 2006658:	df000315 	stw	fp,12(sp)
 200665c:	df000304 	addi	fp,sp,12
 2006660:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
 2006664:	e0bfff17 	ldw	r2,-4(fp)
 2006668:	10800144 	addi	r2,r2,5
 200666c:	1085883a 	add	r2,r2,r2
 2006670:	1085883a 	add	r2,r2,r2
 2006674:	e0bffd15 	stw	r2,-12(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
 2006678:	e0bffd17 	ldw	r2,-12(fp)
 200667c:	1009883a 	mov	r4,r2
 2006680:	20088d40 	call	20088d4 <malloc>
 2006684:	e0bffe15 	stw	r2,-8(fp)
    memset((void *)pQueue, 0, nSize);
 2006688:	e0bffd17 	ldw	r2,-12(fp)
 200668c:	e13ffe17 	ldw	r4,-8(fp)
 2006690:	000b883a 	mov	r5,zero
 2006694:	100d883a 	mov	r6,r2
 2006698:	20091780 	call	2009178 <memset>
    pQueue->num = nQueueNum;
 200669c:	e0ffff17 	ldw	r3,-4(fp)
 20066a0:	e0bffe17 	ldw	r2,-8(fp)
 20066a4:	10c00015 	stw	r3,0(r2)
    return pQueue;
 20066a8:	e0bffe17 	ldw	r2,-8(fp)
}
 20066ac:	e037883a 	mov	sp,fp
 20066b0:	dfc00117 	ldw	ra,4(sp)
 20066b4:	df000017 	ldw	fp,0(sp)
 20066b8:	dec00204 	addi	sp,sp,8
 20066bc:	f800283a 	ret

020066c0 <QUEUE_Delete>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
 20066c0:	defffd04 	addi	sp,sp,-12
 20066c4:	dfc00215 	stw	ra,8(sp)
 20066c8:	df000115 	stw	fp,4(sp)
 20066cc:	df000104 	addi	fp,sp,4
 20066d0:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
 20066d4:	e13fff17 	ldw	r4,-4(fp)
 20066d8:	20088e80 	call	20088e8 <free>
}
 20066dc:	e037883a 	mov	sp,fp
 20066e0:	dfc00117 	ldw	ra,4(sp)
 20066e4:	df000017 	ldw	fp,0(sp)
 20066e8:	dec00204 	addi	sp,sp,8
 20066ec:	f800283a 	ret

020066f0 <QUEUE_IsEmpty>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
 20066f0:	defffe04 	addi	sp,sp,-8
 20066f4:	df000115 	stw	fp,4(sp)
 20066f8:	df000104 	addi	fp,sp,4
 20066fc:	e13fff15 	stw	r4,-4(fp)
    if (pQueue->front == pQueue->rear)
 2006700:	e0bfff17 	ldw	r2,-4(fp)
 2006704:	10c00117 	ldw	r3,4(r2)
 2006708:	e0bfff17 	ldw	r2,-4(fp)
 200670c:	10800217 	ldw	r2,8(r2)
 2006710:	1880021e 	bne	r3,r2,200671c <QUEUE_IsEmpty+0x2c>
        return TRUE;
 2006714:	00800044 	movi	r2,1
 2006718:	00000106 	br	2006720 <QUEUE_IsEmpty+0x30>
    return FALSE;
 200671c:	0005883a 	mov	r2,zero
}
 2006720:	e037883a 	mov	sp,fp
 2006724:	df000017 	ldw	fp,0(sp)
 2006728:	dec00104 	addi	sp,sp,4
 200672c:	f800283a 	ret

02006730 <QUEUE_IsFull>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
 2006730:	defffd04 	addi	sp,sp,-12
 2006734:	dfc00215 	stw	ra,8(sp)
 2006738:	df000115 	stw	fp,4(sp)
 200673c:	df000104 	addi	fp,sp,4
 2006740:	e13fff15 	stw	r4,-4(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
 2006744:	e0bfff17 	ldw	r2,-4(fp)
 2006748:	10800117 	ldw	r2,4(r2)
 200674c:	10c00044 	addi	r3,r2,1
 2006750:	e0bfff17 	ldw	r2,-4(fp)
 2006754:	10800017 	ldw	r2,0(r2)
 2006758:	1809883a 	mov	r4,r3
 200675c:	100b883a 	mov	r5,r2
 2006760:	20083300 	call	2008330 <__umodsi3>
 2006764:	1007883a 	mov	r3,r2
 2006768:	e0bfff17 	ldw	r2,-4(fp)
 200676c:	10800217 	ldw	r2,8(r2)
 2006770:	1880021e 	bne	r3,r2,200677c <QUEUE_IsFull+0x4c>
        return TRUE;
 2006774:	00800044 	movi	r2,1
 2006778:	00000106 	br	2006780 <QUEUE_IsFull+0x50>
    return FALSE;
 200677c:	0005883a 	mov	r2,zero
}
 2006780:	e037883a 	mov	sp,fp
 2006784:	dfc00117 	ldw	ra,4(sp)
 2006788:	df000017 	ldw	fp,0(sp)
 200678c:	dec00204 	addi	sp,sp,8
 2006790:	f800283a 	ret

02006794 <QUEUE_Push>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
 2006794:	defffc04 	addi	sp,sp,-16
 2006798:	dfc00315 	stw	ra,12(sp)
 200679c:	df000215 	stw	fp,8(sp)
 20067a0:	df000204 	addi	fp,sp,8
 20067a4:	e13ffe15 	stw	r4,-8(fp)
 20067a8:	e17fff15 	stw	r5,-4(fp)
    if (QUEUE_IsFull(pQueue))
 20067ac:	e13ffe17 	ldw	r4,-8(fp)
 20067b0:	20067300 	call	2006730 <QUEUE_IsFull>
 20067b4:	10000226 	beq	r2,zero,20067c0 <QUEUE_Push+0x2c>
        return FALSE;
 20067b8:	0005883a 	mov	r2,zero
 20067bc:	00001506 	br	2006814 <QUEUE_Push+0x80>
    pQueue->data[pQueue->front] = data32;
 20067c0:	e0bffe17 	ldw	r2,-8(fp)
 20067c4:	10800117 	ldw	r2,4(r2)
 20067c8:	e0fffe17 	ldw	r3,-8(fp)
 20067cc:	108000c4 	addi	r2,r2,3
 20067d0:	1085883a 	add	r2,r2,r2
 20067d4:	1085883a 	add	r2,r2,r2
 20067d8:	1885883a 	add	r2,r3,r2
 20067dc:	e0ffff17 	ldw	r3,-4(fp)
 20067e0:	10c00015 	stw	r3,0(r2)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
 20067e4:	e0bffe17 	ldw	r2,-8(fp)
 20067e8:	10800117 	ldw	r2,4(r2)
 20067ec:	10c00044 	addi	r3,r2,1
 20067f0:	e0bffe17 	ldw	r2,-8(fp)
 20067f4:	10800017 	ldw	r2,0(r2)
 20067f8:	1809883a 	mov	r4,r3
 20067fc:	100b883a 	mov	r5,r2
 2006800:	20083300 	call	2008330 <__umodsi3>
 2006804:	1007883a 	mov	r3,r2
 2006808:	e0bffe17 	ldw	r2,-8(fp)
 200680c:	10c00115 	stw	r3,4(r2)
    return TRUE;
 2006810:	00800044 	movi	r2,1
}
 2006814:	e037883a 	mov	sp,fp
 2006818:	dfc00117 	ldw	ra,4(sp)
 200681c:	df000017 	ldw	fp,0(sp)
 2006820:	dec00204 	addi	sp,sp,8
 2006824:	f800283a 	ret

02006828 <QUEUE_Pop>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
 2006828:	defffc04 	addi	sp,sp,-16
 200682c:	dfc00315 	stw	ra,12(sp)
 2006830:	df000215 	stw	fp,8(sp)
 2006834:	df000204 	addi	fp,sp,8
 2006838:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
 200683c:	e13fff17 	ldw	r4,-4(fp)
 2006840:	20066f00 	call	20066f0 <QUEUE_IsEmpty>
 2006844:	10000226 	beq	r2,zero,2006850 <QUEUE_Pop+0x28>
        return 0;
 2006848:	0005883a 	mov	r2,zero
 200684c:	00001506 	br	20068a4 <QUEUE_Pop+0x7c>
    data32 = pQueue->data[pQueue->rear];
 2006850:	e0bfff17 	ldw	r2,-4(fp)
 2006854:	10800217 	ldw	r2,8(r2)
 2006858:	e0ffff17 	ldw	r3,-4(fp)
 200685c:	108000c4 	addi	r2,r2,3
 2006860:	1085883a 	add	r2,r2,r2
 2006864:	1085883a 	add	r2,r2,r2
 2006868:	1885883a 	add	r2,r3,r2
 200686c:	10800017 	ldw	r2,0(r2)
 2006870:	e0bffe15 	stw	r2,-8(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
 2006874:	e0bfff17 	ldw	r2,-4(fp)
 2006878:	10800217 	ldw	r2,8(r2)
 200687c:	10c00044 	addi	r3,r2,1
 2006880:	e0bfff17 	ldw	r2,-4(fp)
 2006884:	10800017 	ldw	r2,0(r2)
 2006888:	1809883a 	mov	r4,r3
 200688c:	100b883a 	mov	r5,r2
 2006890:	20083300 	call	2008330 <__umodsi3>
 2006894:	1007883a 	mov	r3,r2
 2006898:	e0bfff17 	ldw	r2,-4(fp)
 200689c:	10c00215 	stw	r3,8(r2)
    return data32;
 20068a0:	e0bffe17 	ldw	r2,-8(fp)
}
 20068a4:	e037883a 	mov	sp,fp
 20068a8:	dfc00117 	ldw	ra,4(sp)
 20068ac:	df000017 	ldw	fp,0(sp)
 20068b0:	dec00204 	addi	sp,sp,8
 20068b4:	f800283a 	ret

020068b8 <QUEUE_Empty>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
 20068b8:	defffe04 	addi	sp,sp,-8
 20068bc:	df000115 	stw	fp,4(sp)
 20068c0:	df000104 	addi	fp,sp,4
 20068c4:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
 20068c8:	e0bfff17 	ldw	r2,-4(fp)
 20068cc:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
 20068d0:	e0bfff17 	ldw	r2,-4(fp)
 20068d4:	10000215 	stw	zero,8(r2)
}
 20068d8:	e037883a 	mov	sp,fp
 20068dc:	df000017 	ldw	fp,0(sp)
 20068e0:	dec00104 	addi	sp,sp,4
 20068e4:	f800283a 	ret

020068e8 <Touch_Init>:
bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p);
void touch_empty_fifo(TERASIC_TOUCH_PANEL *p);
void touch_clear_input(TERASIC_TOUCH_PANEL *p);

// init touch panel
TOUCH_HANDLE Touch_Init(const alt_u32 spi_base, const alt_u32 penirq_base, const alt_u32 penirq_irq){
 20068e8:	defff804 	addi	sp,sp,-32
 20068ec:	dfc00715 	stw	ra,28(sp)
 20068f0:	df000615 	stw	fp,24(sp)
 20068f4:	df000604 	addi	fp,sp,24
 20068f8:	e13ffd15 	stw	r4,-12(fp)
 20068fc:	e17ffe15 	stw	r5,-8(fp)
 2006900:	e1bfff15 	stw	r6,-4(fp)
    bool bSuccess = TRUE;
 2006904:	00800044 	movi	r2,1
 2006908:	e0bffb15 	stw	r2,-20(fp)
    
    TERASIC_TOUCH_PANEL *p;
    
    p = malloc(sizeof(TERASIC_TOUCH_PANEL));
 200690c:	01001804 	movi	r4,96
 2006910:	20088d40 	call	20088d4 <malloc>
 2006914:	e0bffc15 	stw	r2,-16(fp)
    if (!p)
 2006918:	e0bffc17 	ldw	r2,-16(fp)
 200691c:	1000021e 	bne	r2,zero,2006928 <Touch_Init+0x40>
        return p;
 2006920:	e0bffc17 	ldw	r2,-16(fp)
 2006924:	00004706 	br	2006a44 <Touch_Init+0x15c>

    
    //
    memset(p, 0, sizeof(TERASIC_TOUCH_PANEL));
 2006928:	e13ffc17 	ldw	r4,-16(fp)
 200692c:	000b883a 	mov	r5,zero
 2006930:	01801804 	movi	r6,96
 2006934:	20091780 	call	2009178 <memset>
    p->spi_base = spi_base;
 2006938:	e0bffc17 	ldw	r2,-16(fp)
 200693c:	e0fffd17 	ldw	r3,-12(fp)
 2006940:	10c00015 	stw	r3,0(r2)
    p->penirq_base = penirq_base;
 2006944:	e0bffc17 	ldw	r2,-16(fp)
 2006948:	e0fffe17 	ldw	r3,-8(fp)
 200694c:	10c00115 	stw	r3,4(r2)
    p->irq_mask = 0x01;  // 1-pin
 2006950:	e0bffc17 	ldw	r2,-16(fp)
 2006954:	00c00044 	movi	r3,1
 2006958:	10c00315 	stw	r3,12(r2)
    p->penirq_irq = penirq_irq;
 200695c:	e0bffc17 	ldw	r2,-16(fp)
 2006960:	e0ffff17 	ldw	r3,-4(fp)
 2006964:	10c00215 	stw	r3,8(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2006968:	008080f4 	movhi	r2,515
 200696c:	10884604 	addi	r2,r2,8472
 2006970:	10800017 	ldw	r2,0(r2)
    p->alarm_dur = alt_ticks_per_second()/SAMPLE_RATE;
 2006974:	1009883a 	mov	r4,r2
 2006978:	01400f04 	movi	r5,60
 200697c:	20083280 	call	2008328 <__udivsi3>
 2006980:	1007883a 	mov	r3,r2
 2006984:	e0bffc17 	ldw	r2,-16(fp)
 2006988:	10c01615 	stw	r3,88(r2)
    
    // enalbe penirq_n interrupt (P1=1, P1=0)
    touch_enable_penirq(p);    
 200698c:	e13ffc17 	ldw	r4,-16(fp)
 2006990:	2006d300 	call	2006d30 <touch_enable_penirq>
    

    // enable interrupt, 1-pin
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, p->irq_mask); 
 2006994:	e0bffc17 	ldw	r2,-16(fp)
 2006998:	10800117 	ldw	r2,4(r2)
 200699c:	10800204 	addi	r2,r2,8
 20069a0:	e0fffc17 	ldw	r3,-16(fp)
 20069a4:	18c00317 	ldw	r3,12(r3)
 20069a8:	10c00035 	stwio	r3,0(r2)
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);
 20069ac:	e0bffc17 	ldw	r2,-16(fp)
 20069b0:	10800117 	ldw	r2,4(r2)
 20069b4:	10800304 	addi	r2,r2,12
 20069b8:	0007883a 	mov	r3,zero
 20069bc:	10c00035 	stwio	r3,0(r2)
    // register ISR
    // register callback function

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,
		                   p->penirq_irq,
 20069c0:	e0bffc17 	ldw	r2,-16(fp)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);
    // register ISR
    // register callback function

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,
 20069c4:	10800217 	ldw	r2,8(r2)
 20069c8:	d8000015 	stw	zero,0(sp)
 20069cc:	0009883a 	mov	r4,zero
 20069d0:	100b883a 	mov	r5,r2
 20069d4:	01808034 	movhi	r6,512
 20069d8:	319b1204 	addi	r6,r6,27720
 20069dc:	e1fffc17 	ldw	r7,-16(fp)
 20069e0:	20110040 	call	2011004 <alt_ic_isr_register>
 20069e4:	10000126 	beq	r2,zero,20069ec <Touch_Init+0x104>
		                   ) != 0)){
 #else
  if ((alt_irq_register(p->penirq_irq, (void *)p, touch_isr) != 0)){
 #endif
        DEBUG_OUT(("[TOUCH]register IRQ fail\n"));
        bSuccess = FALSE;
 20069e8:	e03ffb15 	stw	zero,-20(fp)
    }else{        
        DEBUG_OUT(("[TOUCH]register IRQ success\n"));
    }

    if (bSuccess){    
 20069ec:	e0bffb17 	ldw	r2,-20(fp)
 20069f0:	10000c26 	beq	r2,zero,2006a24 <Touch_Init+0x13c>
        if (alt_alarm_start(&p->alarm, p->alarm_dur, touch_alarm_callback, p) == 0){
 20069f4:	e0bffc17 	ldw	r2,-16(fp)
 20069f8:	10c01004 	addi	r3,r2,64
 20069fc:	e0bffc17 	ldw	r2,-16(fp)
 2006a00:	10801617 	ldw	r2,88(r2)
 2006a04:	1809883a 	mov	r4,r3
 2006a08:	100b883a 	mov	r5,r2
 2006a0c:	01808034 	movhi	r6,512
 2006a10:	319c7404 	addi	r6,r6,29136
 2006a14:	e1fffc17 	ldw	r7,-16(fp)
 2006a18:	2010c840 	call	2010c84 <alt_alarm_start>
 2006a1c:	10000126 	beq	r2,zero,2006a24 <Touch_Init+0x13c>
            DEBUG_OUT(("[TOUCH]alarm start success\n"));
        }else{
            DEBUG_OUT(("[TOUCH]alarm start fail\n"));
            bSuccess = FALSE;
 2006a20:	e03ffb15 	stw	zero,-20(fp)
        }
    }
    
    if (!bSuccess && p){
 2006a24:	e0bffb17 	ldw	r2,-20(fp)
 2006a28:	1000051e 	bne	r2,zero,2006a40 <Touch_Init+0x158>
 2006a2c:	e0bffc17 	ldw	r2,-16(fp)
 2006a30:	10000326 	beq	r2,zero,2006a40 <Touch_Init+0x158>
        free(p);
 2006a34:	e13ffc17 	ldw	r4,-16(fp)
 2006a38:	20088e80 	call	20088e8 <free>
        p = NULL;
 2006a3c:	e03ffc15 	stw	zero,-16(fp)
    }        
                
    return p;        
 2006a40:	e0bffc17 	ldw	r2,-16(fp)
    

}
 2006a44:	e037883a 	mov	sp,fp
 2006a48:	dfc00117 	ldw	ra,4(sp)
 2006a4c:	df000017 	ldw	fp,0(sp)
 2006a50:	dec00204 	addi	sp,sp,8
 2006a54:	f800283a 	ret

02006a58 <Touch_UnInit>:

// uninit touch panel
void Touch_UnInit(TOUCH_HANDLE pHandle){
 2006a58:	defffc04 	addi	sp,sp,-16
 2006a5c:	dfc00315 	stw	ra,12(sp)
 2006a60:	df000215 	stw	fp,8(sp)
 2006a64:	df000204 	addi	fp,sp,8
 2006a68:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 2006a6c:	e0bfff17 	ldw	r2,-4(fp)
 2006a70:	e0bffe15 	stw	r2,-8(fp)
    if (!p)
 2006a74:	e0bffe17 	ldw	r2,-8(fp)
 2006a78:	10000c26 	beq	r2,zero,2006aac <Touch_UnInit+0x54>
        return;
        
    // stop alarm
    alt_alarm_stop(&(p->alarm));
 2006a7c:	e0bffe17 	ldw	r2,-8(fp)
 2006a80:	10801004 	addi	r2,r2,64
 2006a84:	1009883a 	mov	r4,r2
 2006a88:	20117e40 	call	20117e4 <alt_alarm_stop>
    // disable irq
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, 0x00);
 2006a8c:	e0bffe17 	ldw	r2,-8(fp)
 2006a90:	10800117 	ldw	r2,4(r2)
 2006a94:	10800204 	addi	r2,r2,8
 2006a98:	0007883a 	mov	r3,zero
 2006a9c:	10c00035 	stwio	r3,0(r2)
    
    // zero varialbe
    free(p);
 2006aa0:	e13ffe17 	ldw	r4,-8(fp)
 2006aa4:	20088e80 	call	20088e8 <free>
 2006aa8:	00000106 	br	2006ab0 <Touch_UnInit+0x58>

// uninit touch panel
void Touch_UnInit(TOUCH_HANDLE pHandle){
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
    if (!p)
        return;
 2006aac:	0001883a 	nop
    // disable irq
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, 0x00);
    
    // zero varialbe
    free(p);
}
 2006ab0:	e037883a 	mov	sp,fp
 2006ab4:	dfc00117 	ldw	ra,4(sp)
 2006ab8:	df000017 	ldw	fp,0(sp)
 2006abc:	dec00204 	addi	sp,sp,8
 2006ac0:	f800283a 	ret

02006ac4 <Touch_EmptyFifo>:


void Touch_EmptyFifo(TOUCH_HANDLE pHandle){
 2006ac4:	defffc04 	addi	sp,sp,-16
 2006ac8:	dfc00315 	stw	ra,12(sp)
 2006acc:	df000215 	stw	fp,8(sp)
 2006ad0:	df000204 	addi	fp,sp,8
 2006ad4:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 2006ad8:	e0bfff17 	ldw	r2,-4(fp)
 2006adc:	e0bffe15 	stw	r2,-8(fp)
    touch_empty_fifo(p);
 2006ae0:	e13ffe17 	ldw	r4,-8(fp)
 2006ae4:	2006cc00 	call	2006cc0 <touch_empty_fifo>
}
 2006ae8:	e037883a 	mov	sp,fp
 2006aec:	dfc00117 	ldw	ra,4(sp)
 2006af0:	df000017 	ldw	fp,0(sp)
 2006af4:	dec00204 	addi	sp,sp,8
 2006af8:	f800283a 	ret

02006afc <Touch_GetXY>:

// get x/y from internal FIFO
bool Touch_GetXY(TOUCH_HANDLE pHandle, int *x, int *y){
 2006afc:	defff904 	addi	sp,sp,-28
 2006b00:	dfc00615 	stw	ra,24(sp)
 2006b04:	df000515 	stw	fp,20(sp)
 2006b08:	dc000415 	stw	r16,16(sp)
 2006b0c:	df000404 	addi	fp,sp,16
 2006b10:	e13ffd15 	stw	r4,-12(fp)
 2006b14:	e17ffe15 	stw	r5,-8(fp)
 2006b18:	e1bfff15 	stw	r6,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 2006b1c:	e0bffd17 	ldw	r2,-12(fp)
 2006b20:	e0bffc15 	stw	r2,-16(fp)
    if (!p)
 2006b24:	e0bffc17 	ldw	r2,-16(fp)
 2006b28:	1000021e 	bne	r2,zero,2006b34 <Touch_GetXY+0x38>
        return FALSE;    
 2006b2c:	0005883a 	mov	r2,zero
 2006b30:	00003f06 	br	2006c30 <Touch_GetXY+0x134>
    
    if (p->fifo_front == p->fifo_rear){
 2006b34:	e0bffc17 	ldw	r2,-16(fp)
 2006b38:	10c0040b 	ldhu	r3,16(r2)
 2006b3c:	e0bffc17 	ldw	r2,-16(fp)
 2006b40:	1080048b 	ldhu	r2,18(r2)
 2006b44:	18ffffcc 	andi	r3,r3,65535
 2006b48:	10bfffcc 	andi	r2,r2,65535
 2006b4c:	1880021e 	bne	r3,r2,2006b58 <Touch_GetXY+0x5c>
        // empty
        return FALSE;
 2006b50:	0005883a 	mov	r2,zero
 2006b54:	00003606 	br	2006c30 <Touch_GetXY+0x134>
    }
    *x = p->fifo_x[p->fifo_rear];
 2006b58:	e0bffc17 	ldw	r2,-16(fp)
 2006b5c:	1080048b 	ldhu	r2,18(r2)
 2006b60:	10bfffcc 	andi	r2,r2,65535
 2006b64:	e0fffc17 	ldw	r3,-16(fp)
 2006b68:	10800284 	addi	r2,r2,10
 2006b6c:	1085883a 	add	r2,r2,r2
 2006b70:	1885883a 	add	r2,r3,r2
 2006b74:	1080000b 	ldhu	r2,0(r2)
 2006b78:	10ffffcc 	andi	r3,r2,65535
 2006b7c:	e0bffe17 	ldw	r2,-8(fp)
 2006b80:	10c00015 	stw	r3,0(r2)
    *y = p->fifo_y[p->fifo_rear];
 2006b84:	e0bffc17 	ldw	r2,-16(fp)
 2006b88:	1080048b 	ldhu	r2,18(r2)
 2006b8c:	10bfffcc 	andi	r2,r2,65535
 2006b90:	e0fffc17 	ldw	r3,-16(fp)
 2006b94:	10800504 	addi	r2,r2,20
 2006b98:	1085883a 	add	r2,r2,r2
 2006b9c:	1885883a 	add	r2,r3,r2
 2006ba0:	1080000b 	ldhu	r2,0(r2)
 2006ba4:	10ffffcc 	andi	r3,r2,65535
 2006ba8:	e0bfff17 	ldw	r2,-4(fp)
 2006bac:	10c00015 	stw	r3,0(r2)
    //
    p->fifo_rear++;
 2006bb0:	e0bffc17 	ldw	r2,-16(fp)
 2006bb4:	1080048b 	ldhu	r2,18(r2)
 2006bb8:	10800044 	addi	r2,r2,1
 2006bbc:	1007883a 	mov	r3,r2
 2006bc0:	e0bffc17 	ldw	r2,-16(fp)
 2006bc4:	10c0048d 	sth	r3,18(r2)
    p->fifo_rear %= FIFO_SIZE;
 2006bc8:	e0bffc17 	ldw	r2,-16(fp)
 2006bcc:	1080048b 	ldhu	r2,18(r2)
 2006bd0:	10bfffcc 	andi	r2,r2,65535
 2006bd4:	1009883a 	mov	r4,r2
 2006bd8:	01400284 	movi	r5,10
 2006bdc:	20083300 	call	2008330 <__umodsi3>
 2006be0:	1007883a 	mov	r3,r2
 2006be4:	e0bffc17 	ldw	r2,-16(fp)
 2006be8:	10c0048d 	sth	r3,18(r2)
    //
    // translate
    touch_xy_transform(x, y);
 2006bec:	e13ffe17 	ldw	r4,-8(fp)
 2006bf0:	e17fff17 	ldw	r5,-4(fp)
 2006bf4:	20072480 	call	2007248 <touch_xy_transform>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2006bf8:	008080f4 	movhi	r2,515
 2006bfc:	10884704 	addi	r2,r2,8476
 2006c00:	10800017 	ldw	r2,0(r2)

    DEBUG_OUT("[TOUCH] x=%d, y=%d\n", *x,*y);
//    touch_clear_input(p);
//    touch_empty_fifo(p);
    p->next_active_time = alt_nticks() + ACTIVE_DELAY_TIME;
 2006c04:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2006c08:	008080f4 	movhi	r2,515
 2006c0c:	10884604 	addi	r2,r2,8472
 2006c10:	10800017 	ldw	r2,0(r2)
 2006c14:	1009883a 	mov	r4,r2
 2006c18:	01400f04 	movi	r5,60
 2006c1c:	20083280 	call	2008328 <__udivsi3>
 2006c20:	8087883a 	add	r3,r16,r2
 2006c24:	e0bffc17 	ldw	r2,-16(fp)
 2006c28:	10c01715 	stw	r3,92(r2)
    
    return TRUE;
 2006c2c:	00800044 	movi	r2,1
}
 2006c30:	e037883a 	mov	sp,fp
 2006c34:	dfc00217 	ldw	ra,8(sp)
 2006c38:	df000117 	ldw	fp,4(sp)
 2006c3c:	dc000017 	ldw	r16,0(sp)
 2006c40:	dec00304 	addi	sp,sp,12
 2006c44:	f800283a 	ret

02006c48 <touch_isr>:



// penirq_n ISR
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void touch_isr(void* context){
 2006c48:	defffb04 	addi	sp,sp,-20
 2006c4c:	dfc00415 	stw	ra,16(sp)
 2006c50:	df000315 	stw	fp,12(sp)
 2006c54:	df000304 	addi	fp,sp,12
 2006c58:	e13fff15 	stw	r4,-4(fp)
#else
void touch_isr(void* context, alt_u32 id){
#endif
    alt_u8 mask;
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
 2006c5c:	e0bfff17 	ldw	r2,-4(fp)
 2006c60:	e0bffd15 	stw	r2,-12(fp)

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_disable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
 2006c64:	0009883a 	mov	r4,zero
 2006c68:	01400184 	movi	r5,6
 2006c6c:	20110f00 	call	20110f0 <alt_ic_irq_disable>
#else
    alt_irq_disable(id);
#endif

    // get the edge capture mask
    mask = IORD_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base);
 2006c70:	e0bffd17 	ldw	r2,-12(fp)
 2006c74:	10800117 	ldw	r2,4(r2)
 2006c78:	10800304 	addi	r2,r2,12
 2006c7c:	10800037 	ldwio	r2,0(r2)
 2006c80:	e0bffe05 	stb	r2,-8(fp)
    //if ((mask & Touch.irq_mask) == 0)  // 1-pin
    //    return;
    DEBUG_OUT("Touched!!\n");
    usleep(1000);
 2006c84:	0100fa04 	movi	r4,1000
 2006c88:	20119800 	call	2011980 <usleep>
    }
    IOWR(PIO_RED_LED_BASE, 0, Touch.pen_pressed);
#endif                    
    
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);    
 2006c8c:	e0bffd17 	ldw	r2,-12(fp)
 2006c90:	10800117 	ldw	r2,4(r2)
 2006c94:	10800304 	addi	r2,r2,12
 2006c98:	0007883a 	mov	r3,zero
 2006c9c:	10c00035 	stwio	r3,0(r2)
    
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_enable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
 2006ca0:	0009883a 	mov	r4,zero
 2006ca4:	01400184 	movi	r5,6
 2006ca8:	20110540 	call	2011054 <alt_ic_irq_enable>
#else
    alt_irq_enable(id);
#endif

}
 2006cac:	e037883a 	mov	sp,fp
 2006cb0:	dfc00117 	ldw	ra,4(sp)
 2006cb4:	df000017 	ldw	fp,0(sp)
 2006cb8:	dec00204 	addi	sp,sp,8
 2006cbc:	f800283a 	ret

02006cc0 <touch_empty_fifo>:

void touch_empty_fifo(TERASIC_TOUCH_PANEL *p){
 2006cc0:	defffe04 	addi	sp,sp,-8
 2006cc4:	df000115 	stw	fp,4(sp)
 2006cc8:	df000104 	addi	fp,sp,4
 2006ccc:	e13fff15 	stw	r4,-4(fp)
    p->fifo_rear = p->fifo_front;
 2006cd0:	e0bfff17 	ldw	r2,-4(fp)
 2006cd4:	10c0040b 	ldhu	r3,16(r2)
 2006cd8:	e0bfff17 	ldw	r2,-4(fp)
 2006cdc:	10c0048d 	sth	r3,18(r2)
}
 2006ce0:	e037883a 	mov	sp,fp
 2006ce4:	df000017 	ldw	fp,0(sp)
 2006ce8:	dec00104 	addi	sp,sp,4
 2006cec:	f800283a 	ret

02006cf0 <touch_is_pen_pressed>:

bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p){
 2006cf0:	defffd04 	addi	sp,sp,-12
 2006cf4:	df000215 	stw	fp,8(sp)
 2006cf8:	df000204 	addi	fp,sp,8
 2006cfc:	e13fff15 	stw	r4,-4(fp)
    bool bPressed;
    bPressed = (IORD(p->penirq_base, 0) & 0x01)?FALSE:TRUE;
 2006d00:	e0bfff17 	ldw	r2,-4(fp)
 2006d04:	10800117 	ldw	r2,4(r2)
 2006d08:	10800037 	ldwio	r2,0(r2)
 2006d0c:	1080004c 	andi	r2,r2,1
 2006d10:	1005003a 	cmpeq	r2,r2,zero
 2006d14:	10803fcc 	andi	r2,r2,255
 2006d18:	e0bffe15 	stw	r2,-8(fp)
    return bPressed;
 2006d1c:	e0bffe17 	ldw	r2,-8(fp)
}
 2006d20:	e037883a 	mov	sp,fp
 2006d24:	df000017 	ldw	fp,0(sp)
 2006d28:	dec00104 	addi	sp,sp,4
 2006d2c:	f800283a 	ret

02006d30 <touch_enable_penirq>:


void touch_enable_penirq(TERASIC_TOUCH_PANEL *p){
 2006d30:	defff904 	addi	sp,sp,-28
 2006d34:	dfc00615 	stw	ra,24(sp)
 2006d38:	df000515 	stw	fp,20(sp)
 2006d3c:	df000504 	addi	fp,sp,20
 2006d40:	e13fff15 	stw	r4,-4(fp)
    const alt_u8 CommandGetX = 0x82;
 2006d44:	00bfe084 	movi	r2,-126
 2006d48:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
 2006d4c:	00bff484 	movi	r2,-46
 2006d50:	e0bffe45 	stb	r2,-7(fp)
    alt_u8 data8;
    
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 2006d54:	e0bfff17 	ldw	r2,-4(fp)
 2006d58:	10800017 	ldw	r2,0(r2)
 2006d5c:	d8000015 	stw	zero,0(sp)
 2006d60:	d8000115 	stw	zero,4(sp)
 2006d64:	00c00044 	movi	r3,1
 2006d68:	d8c00215 	stw	r3,8(sp)
 2006d6c:	1009883a 	mov	r4,r2
 2006d70:	000b883a 	mov	r5,zero
 2006d74:	01800044 	movi	r6,1
 2006d78:	e1fffe04 	addi	r7,fp,-8
 2006d7c:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
 2006d80:	e0bfff17 	ldw	r2,-4(fp)
 2006d84:	10800017 	ldw	r2,0(r2)
 2006d88:	00c00044 	movi	r3,1
 2006d8c:	d8c00015 	stw	r3,0(sp)
 2006d90:	e0fffe84 	addi	r3,fp,-6
 2006d94:	d8c00115 	stw	r3,4(sp)
 2006d98:	00c00044 	movi	r3,1
 2006d9c:	d8c00215 	stw	r3,8(sp)
 2006da0:	1009883a 	mov	r4,r2
 2006da4:	000b883a 	mov	r5,zero
 2006da8:	000d883a 	mov	r6,zero
 2006dac:	000f883a 	mov	r7,zero
 2006db0:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 2006db4:	e0bfff17 	ldw	r2,-4(fp)
 2006db8:	10800017 	ldw	r2,0(r2)
 2006dbc:	00c00044 	movi	r3,1
 2006dc0:	d8c00015 	stw	r3,0(sp)
 2006dc4:	e0fffe84 	addi	r3,fp,-6
 2006dc8:	d8c00115 	stw	r3,4(sp)
 2006dcc:	00c00084 	movi	r3,2
 2006dd0:	d8c00215 	stw	r3,8(sp)
 2006dd4:	1009883a 	mov	r4,r2
 2006dd8:	000b883a 	mov	r5,zero
 2006ddc:	000d883a 	mov	r6,zero
 2006de0:	000f883a 	mov	r7,zero
 2006de4:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
   
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 2006de8:	e0bfff17 	ldw	r2,-4(fp)
 2006dec:	10c00017 	ldw	r3,0(r2)
 2006df0:	e0bffe44 	addi	r2,fp,-7
 2006df4:	d8000015 	stw	zero,0(sp)
 2006df8:	d8000115 	stw	zero,4(sp)
 2006dfc:	01000044 	movi	r4,1
 2006e00:	d9000215 	stw	r4,8(sp)
 2006e04:	1809883a 	mov	r4,r3
 2006e08:	000b883a 	mov	r5,zero
 2006e0c:	01800044 	movi	r6,1
 2006e10:	100f883a 	mov	r7,r2
 2006e14:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
 2006e18:	e0bfff17 	ldw	r2,-4(fp)
 2006e1c:	10800017 	ldw	r2,0(r2)
 2006e20:	00c00044 	movi	r3,1
 2006e24:	d8c00015 	stw	r3,0(sp)
 2006e28:	e0fffe84 	addi	r3,fp,-6
 2006e2c:	d8c00115 	stw	r3,4(sp)
 2006e30:	00c00044 	movi	r3,1
 2006e34:	d8c00215 	stw	r3,8(sp)
 2006e38:	1009883a 	mov	r4,r2
 2006e3c:	000b883a 	mov	r5,zero
 2006e40:	000d883a 	mov	r6,zero
 2006e44:	000f883a 	mov	r7,zero
 2006e48:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 2006e4c:	e0bfff17 	ldw	r2,-4(fp)
 2006e50:	10800017 	ldw	r2,0(r2)
 2006e54:	00c00044 	movi	r3,1
 2006e58:	d8c00015 	stw	r3,0(sp)
 2006e5c:	e0fffe84 	addi	r3,fp,-6
 2006e60:	d8c00115 	stw	r3,4(sp)
 2006e64:	00c00084 	movi	r3,2
 2006e68:	d8c00215 	stw	r3,8(sp)
 2006e6c:	1009883a 	mov	r4,r2
 2006e70:	000b883a 	mov	r5,zero
 2006e74:	000d883a 	mov	r6,zero
 2006e78:	000f883a 	mov	r7,zero
 2006e7c:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
}
 2006e80:	e037883a 	mov	sp,fp
 2006e84:	dfc00117 	ldw	ra,4(sp)
 2006e88:	df000017 	ldw	fp,0(sp)
 2006e8c:	dec00204 	addi	sp,sp,8
 2006e90:	f800283a 	ret

02006e94 <touch_clear_input>:

void touch_clear_input(TERASIC_TOUCH_PANEL *p){
 2006e94:	defffd04 	addi	sp,sp,-12
 2006e98:	dfc00215 	stw	ra,8(sp)
 2006e9c:	df000115 	stw	fp,4(sp)
 2006ea0:	df000104 	addi	fp,sp,4
 2006ea4:	e13fff15 	stw	r4,-4(fp)
    touch_enable_penirq(p);
 2006ea8:	e13fff17 	ldw	r4,-4(fp)
 2006eac:	2006d300 	call	2006d30 <touch_enable_penirq>
}
 2006eb0:	e037883a 	mov	sp,fp
 2006eb4:	dfc00117 	ldw	ra,4(sp)
 2006eb8:	df000017 	ldw	fp,0(sp)
 2006ebc:	dec00204 	addi	sp,sp,8
 2006ec0:	f800283a 	ret

02006ec4 <touch_get_xy>:

// get x/y by SPI command
void touch_get_xy(TERASIC_TOUCH_PANEL *p){
 2006ec4:	defff604 	addi	sp,sp,-40
 2006ec8:	dfc00915 	stw	ra,36(sp)
 2006ecc:	df000815 	stw	fp,32(sp)
 2006ed0:	df000804 	addi	fp,sp,32
 2006ed4:	e13fff15 	stw	r4,-4(fp)
    alt_u16 x, y;
    int result;
    const alt_u8 CommandGetX = 0x92;
 2006ed8:	00bfe484 	movi	r2,-110
 2006edc:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
 2006ee0:	00bff484 	movi	r2,-46
 2006ee4:	e0bffe45 	stb	r2,-7(fp)
    
       
    //DEBUG_OUT(("[TOUCH] get x/y\n"));

    // x
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 2006ee8:	e0bfff17 	ldw	r2,-4(fp)
 2006eec:	10c00017 	ldw	r3,0(r2)
 2006ef0:	e0bffe04 	addi	r2,fp,-8
 2006ef4:	d8000015 	stw	zero,0(sp)
 2006ef8:	d8000115 	stw	zero,4(sp)
 2006efc:	01000044 	movi	r4,1
 2006f00:	d9000215 	stw	r4,8(sp)
 2006f04:	1809883a 	mov	r4,r3
 2006f08:	000b883a 	mov	r5,zero
 2006f0c:	01800044 	movi	r6,1
 2006f10:	100f883a 	mov	r7,r2
 2006f14:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
 2006f18:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
 2006f1c:	e0bfff17 	ldw	r2,-4(fp)
 2006f20:	10800017 	ldw	r2,0(r2)
 2006f24:	00c00044 	movi	r3,1
 2006f28:	d8c00015 	stw	r3,0(sp)
 2006f2c:	e0fffe84 	addi	r3,fp,-6
 2006f30:	d8c00115 	stw	r3,4(sp)
 2006f34:	00c00044 	movi	r3,1
 2006f38:	d8c00215 	stw	r3,8(sp)
 2006f3c:	1009883a 	mov	r4,r2
 2006f40:	000b883a 	mov	r5,zero
 2006f44:	000d883a 	mov	r6,zero
 2006f48:	000f883a 	mov	r7,zero
 2006f4c:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
 2006f50:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
 2006f54:	e0bffb17 	ldw	r2,-20(fp)
 2006f58:	10800058 	cmpnei	r2,r2,1
 2006f5c:	1000971e 	bne	r2,zero,20071bc <touch_get_xy+0x2f8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 2006f60:	e0bfff17 	ldw	r2,-4(fp)
 2006f64:	10800017 	ldw	r2,0(r2)
 2006f68:	00c00044 	movi	r3,1
 2006f6c:	d8c00015 	stw	r3,0(sp)
 2006f70:	e0fffec4 	addi	r3,fp,-5
 2006f74:	d8c00115 	stw	r3,4(sp)
 2006f78:	00c00084 	movi	r3,2
 2006f7c:	d8c00215 	stw	r3,8(sp)
 2006f80:	1009883a 	mov	r4,r2
 2006f84:	000b883a 	mov	r5,zero
 2006f88:	000d883a 	mov	r6,zero
 2006f8c:	000f883a 	mov	r7,zero
 2006f90:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
 2006f94:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
 2006f98:	e0bffb17 	ldw	r2,-20(fp)
 2006f9c:	10800058 	cmpnei	r2,r2,1
 2006fa0:	1000861e 	bne	r2,zero,20071bc <touch_get_xy+0x2f8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }  
    ResponseX = (high_byte << 8) | low_byte;        
 2006fa4:	e0bffe83 	ldbu	r2,-6(fp)
 2006fa8:	10803fcc 	andi	r2,r2,255
 2006fac:	1004923a 	slli	r2,r2,8
 2006fb0:	1007883a 	mov	r3,r2
 2006fb4:	e0bffec3 	ldbu	r2,-5(fp)
 2006fb8:	10803fcc 	andi	r2,r2,255
 2006fbc:	1884b03a 	or	r2,r3,r2
 2006fc0:	e0bffc0d 	sth	r2,-16(fp)
    
    // y
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 2006fc4:	e0bfff17 	ldw	r2,-4(fp)
 2006fc8:	10c00017 	ldw	r3,0(r2)
 2006fcc:	e0bffe44 	addi	r2,fp,-7
 2006fd0:	d8000015 	stw	zero,0(sp)
 2006fd4:	d8000115 	stw	zero,4(sp)
 2006fd8:	01000044 	movi	r4,1
 2006fdc:	d9000215 	stw	r4,8(sp)
 2006fe0:	1809883a 	mov	r4,r3
 2006fe4:	000b883a 	mov	r5,zero
 2006fe8:	01800044 	movi	r6,1
 2006fec:	100f883a 	mov	r7,r2
 2006ff0:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
 2006ff4:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
 2006ff8:	e0bfff17 	ldw	r2,-4(fp)
 2006ffc:	10800017 	ldw	r2,0(r2)
 2007000:	00c00044 	movi	r3,1
 2007004:	d8c00015 	stw	r3,0(sp)
 2007008:	e0fffe84 	addi	r3,fp,-6
 200700c:	d8c00115 	stw	r3,4(sp)
 2007010:	00c00044 	movi	r3,1
 2007014:	d8c00215 	stw	r3,8(sp)
 2007018:	1009883a 	mov	r4,r2
 200701c:	000b883a 	mov	r5,zero
 2007020:	000d883a 	mov	r6,zero
 2007024:	000f883a 	mov	r7,zero
 2007028:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
 200702c:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
 2007030:	e0bffb17 	ldw	r2,-20(fp)
 2007034:	10800058 	cmpnei	r2,r2,1
 2007038:	1000601e 	bne	r2,zero,20071bc <touch_get_xy+0x2f8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 200703c:	e0bfff17 	ldw	r2,-4(fp)
 2007040:	10800017 	ldw	r2,0(r2)
 2007044:	00c00044 	movi	r3,1
 2007048:	d8c00015 	stw	r3,0(sp)
 200704c:	e0fffec4 	addi	r3,fp,-5
 2007050:	d8c00115 	stw	r3,4(sp)
 2007054:	00c00084 	movi	r3,2
 2007058:	d8c00215 	stw	r3,8(sp)
 200705c:	1009883a 	mov	r4,r2
 2007060:	000b883a 	mov	r5,zero
 2007064:	000d883a 	mov	r6,zero
 2007068:	000f883a 	mov	r7,zero
 200706c:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
 2007070:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
 2007074:	e0bffb17 	ldw	r2,-20(fp)
 2007078:	10800058 	cmpnei	r2,r2,1
 200707c:	10004f1e 	bne	r2,zero,20071bc <touch_get_xy+0x2f8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }  
    ResponseY = (high_byte << 8) | low_byte;        
 2007080:	e0bffe83 	ldbu	r2,-6(fp)
 2007084:	10803fcc 	andi	r2,r2,255
 2007088:	1004923a 	slli	r2,r2,8
 200708c:	1007883a 	mov	r3,r2
 2007090:	e0bffec3 	ldbu	r2,-5(fp)
 2007094:	10803fcc 	andi	r2,r2,255
 2007098:	1884b03a 	or	r2,r3,r2
 200709c:	e0bffc8d 	sth	r2,-14(fp)

    if (!touch_is_pen_pressed(p))
 20070a0:	e13fff17 	ldw	r4,-4(fp)
 20070a4:	2006cf00 	call	2006cf0 <touch_is_pen_pressed>
 20070a8:	10004426 	beq	r2,zero,20071bc <touch_get_xy+0x2f8>
        return; // do not use this data    
        
    x = (ResponseX >> 3 ) & 0xFFF;  // 12 bits    
 20070ac:	e0bffc0b 	ldhu	r2,-16(fp)
 20070b0:	1004d0fa 	srli	r2,r2,3
 20070b4:	1083ffcc 	andi	r2,r2,4095
 20070b8:	e0bffd0d 	sth	r2,-12(fp)
    y = (ResponseY >> 3 ) & 0xFFF;  // 12 bits
 20070bc:	e0bffc8b 	ldhu	r2,-14(fp)
 20070c0:	1004d0fa 	srli	r2,r2,3
 20070c4:	1083ffcc 	andi	r2,r2,4095
 20070c8:	e0bffd8d 	sth	r2,-10(fp)
    
    
    // check whether the fifo is full!
    if (((p->fifo_front+1)%FIFO_SIZE) == p->fifo_rear){
 20070cc:	e0bfff17 	ldw	r2,-4(fp)
 20070d0:	1080040b 	ldhu	r2,16(r2)
 20070d4:	10bfffcc 	andi	r2,r2,65535
 20070d8:	10800044 	addi	r2,r2,1
 20070dc:	1009883a 	mov	r4,r2
 20070e0:	01400284 	movi	r5,10
 20070e4:	20082cc0 	call	20082cc <__modsi3>
 20070e8:	1007883a 	mov	r3,r2
 20070ec:	e0bfff17 	ldw	r2,-4(fp)
 20070f0:	1080048b 	ldhu	r2,18(r2)
 20070f4:	10bfffcc 	andi	r2,r2,65535
 20070f8:	18800f1e 	bne	r3,r2,2007138 <touch_get_xy+0x274>
        // full, pop an old one
        p->fifo_rear++;
 20070fc:	e0bfff17 	ldw	r2,-4(fp)
 2007100:	1080048b 	ldhu	r2,18(r2)
 2007104:	10800044 	addi	r2,r2,1
 2007108:	1007883a 	mov	r3,r2
 200710c:	e0bfff17 	ldw	r2,-4(fp)
 2007110:	10c0048d 	sth	r3,18(r2)
        p->fifo_rear %= FIFO_SIZE;        
 2007114:	e0bfff17 	ldw	r2,-4(fp)
 2007118:	1080048b 	ldhu	r2,18(r2)
 200711c:	10bfffcc 	andi	r2,r2,65535
 2007120:	1009883a 	mov	r4,r2
 2007124:	01400284 	movi	r5,10
 2007128:	20083300 	call	2008330 <__umodsi3>
 200712c:	1007883a 	mov	r3,r2
 2007130:	e0bfff17 	ldw	r2,-4(fp)
 2007134:	10c0048d 	sth	r3,18(r2)
        
    }
    DEBUG_OUT("[ ADC] x=%d, y=%d\n", x,y);

    // push now
    p->fifo_x[p->fifo_front] = x;
 2007138:	e0bfff17 	ldw	r2,-4(fp)
 200713c:	1080040b 	ldhu	r2,16(r2)
 2007140:	10bfffcc 	andi	r2,r2,65535
 2007144:	e0ffff17 	ldw	r3,-4(fp)
 2007148:	10800284 	addi	r2,r2,10
 200714c:	1085883a 	add	r2,r2,r2
 2007150:	1885883a 	add	r2,r3,r2
 2007154:	e0fffd0b 	ldhu	r3,-12(fp)
 2007158:	10c0000d 	sth	r3,0(r2)
    p->fifo_y[p->fifo_front] = y;    
 200715c:	e0bfff17 	ldw	r2,-4(fp)
 2007160:	1080040b 	ldhu	r2,16(r2)
 2007164:	10bfffcc 	andi	r2,r2,65535
 2007168:	e0ffff17 	ldw	r3,-4(fp)
 200716c:	10800504 	addi	r2,r2,20
 2007170:	1085883a 	add	r2,r2,r2
 2007174:	1885883a 	add	r2,r3,r2
 2007178:	e0fffd8b 	ldhu	r3,-10(fp)
 200717c:	10c0000d 	sth	r3,0(r2)
    p->fifo_front++;
 2007180:	e0bfff17 	ldw	r2,-4(fp)
 2007184:	1080040b 	ldhu	r2,16(r2)
 2007188:	10800044 	addi	r2,r2,1
 200718c:	1007883a 	mov	r3,r2
 2007190:	e0bfff17 	ldw	r2,-4(fp)
 2007194:	10c0040d 	sth	r3,16(r2)
    p->fifo_front %= FIFO_SIZE;   
 2007198:	e0bfff17 	ldw	r2,-4(fp)
 200719c:	1080040b 	ldhu	r2,16(r2)
 20071a0:	10bfffcc 	andi	r2,r2,65535
 20071a4:	1009883a 	mov	r4,r2
 20071a8:	01400284 	movi	r5,10
 20071ac:	20083300 	call	2008330 <__umodsi3>
 20071b0:	1007883a 	mov	r3,r2
 20071b4:	e0bfff17 	ldw	r2,-4(fp)
 20071b8:	10c0040d 	sth	r3,16(r2)
    
}
 20071bc:	e037883a 	mov	sp,fp
 20071c0:	dfc00117 	ldw	ra,4(sp)
 20071c4:	df000017 	ldw	fp,0(sp)
 20071c8:	dec00204 	addi	sp,sp,8
 20071cc:	f800283a 	ret

020071d0 <touch_alarm_callback>:

// polling x/y when penirq_n is low
alt_u32 touch_alarm_callback(void *context){
 20071d0:	defffc04 	addi	sp,sp,-16
 20071d4:	dfc00315 	stw	ra,12(sp)
 20071d8:	df000215 	stw	fp,8(sp)
 20071dc:	df000204 	addi	fp,sp,8
 20071e0:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
 20071e4:	e0bfff17 	ldw	r2,-4(fp)
 20071e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (touch_is_pen_pressed(p)){//Touch.pen_pressed){
 20071ec:	e13ffe17 	ldw	r4,-8(fp)
 20071f0:	2006cf00 	call	2006cf0 <touch_is_pen_pressed>
 20071f4:	10000926 	beq	r2,zero,200721c <touch_alarm_callback+0x4c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 20071f8:	008080f4 	movhi	r2,515
 20071fc:	10884704 	addi	r2,r2,8476
 2007200:	10800017 	ldw	r2,0(r2)
        if (alt_nticks() > p->next_active_time)
 2007204:	e0fffe17 	ldw	r3,-8(fp)
 2007208:	18c01717 	ldw	r3,92(r3)
 200720c:	1880072e 	bgeu	r3,r2,200722c <touch_alarm_callback+0x5c>
            touch_get_xy(p);
 2007210:	e13ffe17 	ldw	r4,-8(fp)
 2007214:	2006ec40 	call	2006ec4 <touch_get_xy>
 2007218:	00000406 	br	200722c <touch_alarm_callback+0x5c>
      //  p->last_active_time = alt_nticks(); 
    }else{
       // touch_empty_fifo(p);
        //if ((alt_nticks() - Touch.last_active_time) > alt_ticks_per_second()/10){
         touch_enable_penirq(p);
 200721c:	e13ffe17 	ldw	r4,-8(fp)
 2007220:	2006d300 	call	2006d30 <touch_enable_penirq>
         touch_clear_input(p);
 2007224:	e13ffe17 	ldw	r4,-8(fp)
 2007228:	2006e940 	call	2006e94 <touch_clear_input>
          //  p->last_active_time = alt_nticks(); 
        //}            
    }        
    return p->alarm_dur;
 200722c:	e0bffe17 	ldw	r2,-8(fp)
 2007230:	10801617 	ldw	r2,88(r2)
}
 2007234:	e037883a 	mov	sp,fp
 2007238:	dfc00117 	ldw	ra,4(sp)
 200723c:	df000017 	ldw	fp,0(sp)
 2007240:	dec00204 	addi	sp,sp,8
 2007244:	f800283a 	ret

02007248 <touch_xy_transform>:

void touch_xy_transform(int *x, int *y){
 2007248:	defff904 	addi	sp,sp,-28
 200724c:	dfc00615 	stw	ra,24(sp)
 2007250:	df000515 	stw	fp,20(sp)
 2007254:	df000504 	addi	fp,sp,20
 2007258:	e13ffe15 	stw	r4,-8(fp)
 200725c:	e17fff15 	stw	r5,-4(fp)
    int xx, yy;
    const int y_ignore = 200;
 2007260:	00803204 	movi	r2,200
 2007264:	e0bffc15 	stw	r2,-16(fp)
    xx = *y;
 2007268:	e0bfff17 	ldw	r2,-4(fp)
 200726c:	10800017 	ldw	r2,0(r2)
 2007270:	e0bffd15 	stw	r2,-12(fp)
    yy = *x;
 2007274:	e0bffe17 	ldw	r2,-8(fp)
 2007278:	10800017 	ldw	r2,0(r2)
 200727c:	e0bffb15 	stw	r2,-20(fp)

    // scale & swap
   // xx = 4096 -1 - xx;
    xx = xx * X_RES / 4096;
 2007280:	e0bffd17 	ldw	r2,-12(fp)
 2007284:	10803c24 	muli	r2,r2,240
 2007288:	1000010e 	bge	r2,zero,2007290 <touch_xy_transform+0x48>
 200728c:	1083ffc4 	addi	r2,r2,4095
 2007290:	1005d33a 	srai	r2,r2,12
 2007294:	e0bffd15 	stw	r2,-12(fp)

   // yy = 4096 -1 - yy;

    // special calibrate for LT24
    if (yy > (4096-y_ignore))
 2007298:	00c40004 	movi	r3,4096
 200729c:	e0bffc17 	ldw	r2,-16(fp)
 20072a0:	1887c83a 	sub	r3,r3,r2
 20072a4:	e0bffb17 	ldw	r2,-20(fp)
 20072a8:	1880040e 	bge	r3,r2,20072bc <touch_xy_transform+0x74>
    	yy = 4096-y_ignore;
 20072ac:	00c40004 	movi	r3,4096
 20072b0:	e0bffc17 	ldw	r2,-16(fp)
 20072b4:	1885c83a 	sub	r2,r3,r2
 20072b8:	e0bffb15 	stw	r2,-20(fp)
    yy = yy * 4095/ (4096-y_ignore);
 20072bc:	e0bffb17 	ldw	r2,-20(fp)
 20072c0:	10c3ffe4 	muli	r3,r2,4095
 20072c4:	01040004 	movi	r4,4096
 20072c8:	e0bffc17 	ldw	r2,-16(fp)
 20072cc:	2085c83a 	sub	r2,r4,r2
 20072d0:	1809883a 	mov	r4,r3
 20072d4:	100b883a 	mov	r5,r2
 20072d8:	200827c0 	call	200827c <__divsi3>
 20072dc:	e0bffb15 	stw	r2,-20(fp)
    
    yy = yy * Y_RES / 4096;
 20072e0:	e0bffb17 	ldw	r2,-20(fp)
 20072e4:	10805024 	muli	r2,r2,320
 20072e8:	1000010e 	bge	r2,zero,20072f0 <touch_xy_transform+0xa8>
 20072ec:	1083ffc4 	addi	r2,r2,4095
 20072f0:	1005d33a 	srai	r2,r2,12
 20072f4:	e0bffb15 	stw	r2,-20(fp)

    // swap
    *x = xx;
 20072f8:	e0bffe17 	ldw	r2,-8(fp)
 20072fc:	e0fffd17 	ldw	r3,-12(fp)
 2007300:	10c00015 	stw	r3,0(r2)
    *y = yy;    
 2007304:	e0bfff17 	ldw	r2,-4(fp)
 2007308:	e0fffb17 	ldw	r3,-20(fp)
 200730c:	10c00015 	stw	r3,0(r2)
    
}
 2007310:	e037883a 	mov	sp,fp
 2007314:	dfc00117 	ldw	ra,4(sp)
 2007318:	df000017 	ldw	fp,0(sp)
 200731c:	dec00204 	addi	sp,sp,8
 2007320:	f800283a 	ret

02007324 <sqrt>:
 2007324:	defff104 	addi	sp,sp,-60
 2007328:	dcc00d15 	stw	r19,52(sp)
 200732c:	dc800c15 	stw	r18,48(sp)
 2007330:	dc400b15 	stw	r17,44(sp)
 2007334:	dc000a15 	stw	r16,40(sp)
 2007338:	2023883a 	mov	r17,r4
 200733c:	dfc00e15 	stw	ra,56(sp)
 2007340:	048080f4 	movhi	r18,515
 2007344:	94882804 	addi	r18,r18,8352
 2007348:	2821883a 	mov	r16,r5
 200734c:	200746c0 	call	200746c <__ieee754_sqrt>
 2007350:	91000017 	ldw	r4,0(r18)
 2007354:	1027883a 	mov	r19,r2
 2007358:	00bfffc4 	movi	r2,-1
 200735c:	20800d26 	beq	r4,r2,2007394 <sqrt+0x70>
 2007360:	8809883a 	mov	r4,r17
 2007364:	800b883a 	mov	r5,r16
 2007368:	d8c00915 	stw	r3,36(sp)
 200736c:	20077300 	call	2007730 <__isnand>
 2007370:	d8c00917 	ldw	r3,36(sp)
 2007374:	1000071e 	bne	r2,zero,2007394 <sqrt+0x70>
 2007378:	8809883a 	mov	r4,r17
 200737c:	800b883a 	mov	r5,r16
 2007380:	000d883a 	mov	r6,zero
 2007384:	000f883a 	mov	r7,zero
 2007388:	20080040 	call	2008004 <__ltdf2>
 200738c:	d8c00917 	ldw	r3,36(sp)
 2007390:	10000816 	blt	r2,zero,20073b4 <sqrt+0x90>
 2007394:	9805883a 	mov	r2,r19
 2007398:	dfc00e17 	ldw	ra,56(sp)
 200739c:	dcc00d17 	ldw	r19,52(sp)
 20073a0:	dc800c17 	ldw	r18,48(sp)
 20073a4:	dc400b17 	ldw	r17,44(sp)
 20073a8:	dc000a17 	ldw	r16,40(sp)
 20073ac:	dec00f04 	addi	sp,sp,60
 20073b0:	f800283a 	ret
 20073b4:	94800017 	ldw	r18,0(r18)
 20073b8:	00800044 	movi	r2,1
 20073bc:	d8800015 	stw	r2,0(sp)
 20073c0:	008080f4 	movhi	r2,515
 20073c4:	10b9b004 	addi	r2,r2,-6464
 20073c8:	d8800115 	stw	r2,4(sp)
 20073cc:	d8000815 	stw	zero,32(sp)
 20073d0:	dc400415 	stw	r17,16(sp)
 20073d4:	dc000515 	stw	r16,20(sp)
 20073d8:	dc400215 	stw	r17,8(sp)
 20073dc:	dc000315 	stw	r16,12(sp)
 20073e0:	9000111e 	bne	r18,zero,2007428 <sqrt+0x104>
 20073e4:	d8000615 	stw	zero,24(sp)
 20073e8:	d8000715 	stw	zero,28(sp)
 20073ec:	d809883a 	mov	r4,sp
 20073f0:	200775c0 	call	200775c <matherr>
 20073f4:	10001526 	beq	r2,zero,200744c <sqrt+0x128>
 20073f8:	d8800817 	ldw	r2,32(sp)
 20073fc:	1000171e 	bne	r2,zero,200745c <sqrt+0x138>
 2007400:	dcc00617 	ldw	r19,24(sp)
 2007404:	d8c00717 	ldw	r3,28(sp)
 2007408:	9805883a 	mov	r2,r19
 200740c:	dfc00e17 	ldw	ra,56(sp)
 2007410:	dcc00d17 	ldw	r19,52(sp)
 2007414:	dc800c17 	ldw	r18,48(sp)
 2007418:	dc400b17 	ldw	r17,44(sp)
 200741c:	dc000a17 	ldw	r16,40(sp)
 2007420:	dec00f04 	addi	sp,sp,60
 2007424:	f800283a 	ret
 2007428:	0009883a 	mov	r4,zero
 200742c:	000b883a 	mov	r5,zero
 2007430:	000d883a 	mov	r6,zero
 2007434:	000f883a 	mov	r7,zero
 2007438:	2007e500 	call	2007e50 <__divdf3>
 200743c:	d8800615 	stw	r2,24(sp)
 2007440:	d8c00715 	stw	r3,28(sp)
 2007444:	00800084 	movi	r2,2
 2007448:	90bfe81e 	bne	r18,r2,20073ec <sqrt+0xc8>
 200744c:	20088c40 	call	20088c4 <__errno>
 2007450:	00c00844 	movi	r3,33
 2007454:	10c00015 	stw	r3,0(r2)
 2007458:	003fe706 	br	20073f8 <sqrt+0xd4>
 200745c:	20088c40 	call	20088c4 <__errno>
 2007460:	d8c00817 	ldw	r3,32(sp)
 2007464:	10c00015 	stw	r3,0(r2)
 2007468:	003fe506 	br	2007400 <sqrt+0xdc>

0200746c <__ieee754_sqrt>:
 200746c:	defffd04 	addi	sp,sp,-12
 2007470:	dc400115 	stw	r17,4(sp)
 2007474:	dc000015 	stw	r16,0(sp)
 2007478:	dfc00215 	stw	ra,8(sp)
 200747c:	28dffc2c 	andhi	r3,r5,32752
 2007480:	009ffc34 	movhi	r2,32752
 2007484:	2821883a 	mov	r16,r5
 2007488:	2023883a 	mov	r17,r4
 200748c:	2811883a 	mov	r8,r5
 2007490:	2013883a 	mov	r9,r4
 2007494:	18808326 	beq	r3,r2,20076a4 <__ieee754_sqrt+0x238>
 2007498:	0140610e 	bge	zero,r5,2007620 <__ieee754_sqrt+0x1b4>
 200749c:	2805d53a 	srai	r2,r5,20
 20074a0:	10006a26 	beq	r2,zero,200764c <__ieee754_sqrt+0x1e0>
 20074a4:	00c00434 	movhi	r3,16
 20074a8:	18ffffc4 	addi	r3,r3,-1
 20074ac:	10bf0044 	addi	r2,r2,-1023
 20074b0:	40d0703a 	and	r8,r8,r3
 20074b4:	10c0004c 	andi	r3,r2,1
 20074b8:	42000434 	orhi	r8,r8,16
 20074bc:	1800511e 	bne	r3,zero,2007604 <__ieee754_sqrt+0x198>
 20074c0:	4808d7fa 	srli	r4,r9,31
 20074c4:	4211883a 	add	r8,r8,r8
 20074c8:	101bd07a 	srai	r13,r2,1
 20074cc:	4107883a 	add	r3,r8,r4
 20074d0:	4a4b883a 	add	r5,r9,r9
 20074d4:	01000584 	movi	r4,22
 20074d8:	0015883a 	mov	r10,zero
 20074dc:	000d883a 	mov	r6,zero
 20074e0:	00800834 	movhi	r2,32
 20074e4:	308f883a 	add	r7,r6,r2
 20074e8:	2810d7fa 	srli	r8,r5,31
 20074ec:	213fffc4 	addi	r4,r4,-1
 20074f0:	19c00316 	blt	r3,r7,2007500 <__ieee754_sqrt+0x94>
 20074f4:	19c7c83a 	sub	r3,r3,r7
 20074f8:	388d883a 	add	r6,r7,r2
 20074fc:	5095883a 	add	r10,r10,r2
 2007500:	18c7883a 	add	r3,r3,r3
 2007504:	1a07883a 	add	r3,r3,r8
 2007508:	294b883a 	add	r5,r5,r5
 200750c:	1004d07a 	srli	r2,r2,1
 2007510:	203ff41e 	bne	r4,zero,20074e4 <__ieee754_sqrt+0x78>
 2007514:	01e00034 	movhi	r7,32768
 2007518:	02400804 	movi	r9,32
 200751c:	0005883a 	mov	r2,zero
 2007520:	0017883a 	mov	r11,zero
 2007524:	3819883a 	mov	r12,r7
 2007528:	00000806 	br	200754c <__ieee754_sqrt+0xe0>
 200752c:	19803226 	beq	r3,r6,20075f8 <__ieee754_sqrt+0x18c>
 2007530:	2810d7fa 	srli	r8,r5,31
 2007534:	18c7883a 	add	r3,r3,r3
 2007538:	4a7fffc4 	addi	r9,r9,-1
 200753c:	1a07883a 	add	r3,r3,r8
 2007540:	294b883a 	add	r5,r5,r5
 2007544:	380ed07a 	srli	r7,r7,1
 2007548:	48001326 	beq	r9,zero,2007598 <__ieee754_sqrt+0x12c>
 200754c:	59d1883a 	add	r8,r11,r7
 2007550:	30fff60e 	bge	r6,r3,200752c <__ieee754_sqrt+0xc0>
 2007554:	4120002c 	andhi	r4,r8,32768
 2007558:	41d7883a 	add	r11,r8,r7
 200755c:	23002326 	beq	r4,r12,20075ec <__ieee754_sqrt+0x180>
 2007560:	3009883a 	mov	r4,r6
 2007564:	1987c83a 	sub	r3,r3,r6
 2007568:	2a00012e 	bgeu	r5,r8,2007570 <__ieee754_sqrt+0x104>
 200756c:	18ffffc4 	addi	r3,r3,-1
 2007570:	2a0bc83a 	sub	r5,r5,r8
 2007574:	2810d7fa 	srli	r8,r5,31
 2007578:	18c7883a 	add	r3,r3,r3
 200757c:	4a7fffc4 	addi	r9,r9,-1
 2007580:	11c5883a 	add	r2,r2,r7
 2007584:	200d883a 	mov	r6,r4
 2007588:	1a07883a 	add	r3,r3,r8
 200758c:	294b883a 	add	r5,r5,r5
 2007590:	380ed07a 	srli	r7,r7,1
 2007594:	483fed1e 	bne	r9,zero,200754c <__ieee754_sqrt+0xe0>
 2007598:	28c6b03a 	or	r3,r5,r3
 200759c:	18000426 	beq	r3,zero,20075b0 <__ieee754_sqrt+0x144>
 20075a0:	00ffffc4 	movi	r3,-1
 20075a4:	10c05026 	beq	r2,r3,20076e8 <__ieee754_sqrt+0x27c>
 20075a8:	10c0004c 	andi	r3,r2,1
 20075ac:	1885883a 	add	r2,r3,r2
 20075b0:	1022d07a 	srli	r17,r2,1
 20075b4:	5007d07a 	srai	r3,r10,1
 20075b8:	008ff834 	movhi	r2,16352
 20075bc:	5280004c 	andi	r10,r10,1
 20075c0:	1887883a 	add	r3,r3,r2
 20075c4:	5000141e 	bne	r10,zero,2007618 <__ieee754_sqrt+0x1ac>
 20075c8:	681a953a 	slli	r13,r13,20
 20075cc:	68e1883a 	add	r16,r13,r3
 20075d0:	8805883a 	mov	r2,r17
 20075d4:	8007883a 	mov	r3,r16
 20075d8:	dfc00217 	ldw	ra,8(sp)
 20075dc:	dc400117 	ldw	r17,4(sp)
 20075e0:	dc000017 	ldw	r16,0(sp)
 20075e4:	dec00304 	addi	sp,sp,12
 20075e8:	f800283a 	ret
 20075ec:	583fdc16 	blt	r11,zero,2007560 <__ieee754_sqrt+0xf4>
 20075f0:	31000044 	addi	r4,r6,1
 20075f4:	003fdb06 	br	2007564 <__ieee754_sqrt+0xf8>
 20075f8:	2a3fd62e 	bgeu	r5,r8,2007554 <__ieee754_sqrt+0xe8>
 20075fc:	180d883a 	mov	r6,r3
 2007600:	003fcb06 	br	2007530 <__ieee754_sqrt+0xc4>
 2007604:	4806d7fa 	srli	r3,r9,31
 2007608:	4211883a 	add	r8,r8,r8
 200760c:	4a53883a 	add	r9,r9,r9
 2007610:	40d1883a 	add	r8,r8,r3
 2007614:	003faa06 	br	20074c0 <__ieee754_sqrt+0x54>
 2007618:	8c600034 	orhi	r17,r17,32768
 200761c:	003fea06 	br	20075c8 <__ieee754_sqrt+0x15c>
 2007620:	00a00034 	movhi	r2,32768
 2007624:	10bfffc4 	addi	r2,r2,-1
 2007628:	2884703a 	and	r2,r5,r2
 200762c:	1104b03a 	or	r2,r2,r4
 2007630:	103fe726 	beq	r2,zero,20075d0 <__ieee754_sqrt+0x164>
 2007634:	2800331e 	bne	r5,zero,2007704 <__ieee754_sqrt+0x298>
 2007638:	0005883a 	mov	r2,zero
 200763c:	4810d2fa 	srli	r8,r9,11
 2007640:	10bffac4 	addi	r2,r2,-21
 2007644:	4812957a 	slli	r9,r9,21
 2007648:	403ffc26 	beq	r8,zero,200763c <__ieee754_sqrt+0x1d0>
 200764c:	40c0042c 	andhi	r3,r8,16
 2007650:	1800281e 	bne	r3,zero,20076f4 <__ieee754_sqrt+0x288>
 2007654:	4211883a 	add	r8,r8,r8
 2007658:	4100042c 	andhi	r4,r8,16
 200765c:	18c00044 	addi	r3,r3,1
 2007660:	203ffc26 	beq	r4,zero,2007654 <__ieee754_sqrt+0x1e8>
 2007664:	01400044 	movi	r5,1
 2007668:	01000804 	movi	r4,32
 200766c:	28cbc83a 	sub	r5,r5,r3
 2007670:	20c9c83a 	sub	r4,r4,r3
 2007674:	4908d83a 	srl	r4,r9,r4
 2007678:	1145883a 	add	r2,r2,r5
 200767c:	48d2983a 	sll	r9,r9,r3
 2007680:	4110b03a 	or	r8,r8,r4
 2007684:	00c00434 	movhi	r3,16
 2007688:	18ffffc4 	addi	r3,r3,-1
 200768c:	10bf0044 	addi	r2,r2,-1023
 2007690:	40d0703a 	and	r8,r8,r3
 2007694:	10c0004c 	andi	r3,r2,1
 2007698:	42000434 	orhi	r8,r8,16
 200769c:	183f8826 	beq	r3,zero,20074c0 <__ieee754_sqrt+0x54>
 20076a0:	003fd806 	br	2007604 <__ieee754_sqrt+0x198>
 20076a4:	200d883a 	mov	r6,r4
 20076a8:	280f883a 	mov	r7,r5
 20076ac:	2007b6c0 	call	2007b6c <__muldf3>
 20076b0:	8809883a 	mov	r4,r17
 20076b4:	800b883a 	mov	r5,r16
 20076b8:	100d883a 	mov	r6,r2
 20076bc:	180f883a 	mov	r7,r3
 20076c0:	2007ab80 	call	2007ab8 <__adddf3>
 20076c4:	1023883a 	mov	r17,r2
 20076c8:	1821883a 	mov	r16,r3
 20076cc:	8805883a 	mov	r2,r17
 20076d0:	8007883a 	mov	r3,r16
 20076d4:	dfc00217 	ldw	ra,8(sp)
 20076d8:	dc400117 	ldw	r17,4(sp)
 20076dc:	dc000017 	ldw	r16,0(sp)
 20076e0:	dec00304 	addi	sp,sp,12
 20076e4:	f800283a 	ret
 20076e8:	52800044 	addi	r10,r10,1
 20076ec:	0023883a 	mov	r17,zero
 20076f0:	003fb006 	br	20075b4 <__ieee754_sqrt+0x148>
 20076f4:	01000804 	movi	r4,32
 20076f8:	01400044 	movi	r5,1
 20076fc:	0007883a 	mov	r3,zero
 2007700:	003fdc06 	br	2007674 <__ieee754_sqrt+0x208>
 2007704:	200d883a 	mov	r6,r4
 2007708:	280f883a 	mov	r7,r5
 200770c:	2007b0c0 	call	2007b0c <__subdf3>
 2007710:	1009883a 	mov	r4,r2
 2007714:	180b883a 	mov	r5,r3
 2007718:	100d883a 	mov	r6,r2
 200771c:	180f883a 	mov	r7,r3
 2007720:	2007e500 	call	2007e50 <__divdf3>
 2007724:	1023883a 	mov	r17,r2
 2007728:	1821883a 	mov	r16,r3
 200772c:	003fa806 	br	20075d0 <__ieee754_sqrt+0x164>

02007730 <__isnand>:
 2007730:	0105c83a 	sub	r2,zero,r4
 2007734:	1108b03a 	or	r4,r2,r4
 2007738:	2004d7fa 	srli	r2,r4,31
 200773c:	00e00034 	movhi	r3,32768
 2007740:	18ffffc4 	addi	r3,r3,-1
 2007744:	28ca703a 	and	r5,r5,r3
 2007748:	1144b03a 	or	r2,r2,r5
 200774c:	00dffc34 	movhi	r3,32752
 2007750:	1885c83a 	sub	r2,r3,r2
 2007754:	1004d7fa 	srli	r2,r2,31
 2007758:	f800283a 	ret

0200775c <matherr>:
 200775c:	0005883a 	mov	r2,zero
 2007760:	f800283a 	ret

02007764 <_fpadd_parts>:
 2007764:	2005883a 	mov	r2,r4
 2007768:	21000017 	ldw	r4,0(r4)
 200776c:	01c00044 	movi	r7,1
 2007770:	3900622e 	bgeu	r7,r4,20078fc <_fpadd_parts+0x198>
 2007774:	28c00017 	ldw	r3,0(r5)
 2007778:	38c05f2e 	bgeu	r7,r3,20078f8 <_fpadd_parts+0x194>
 200777c:	01c00104 	movi	r7,4
 2007780:	21c0c626 	beq	r4,r7,2007a9c <_fpadd_parts+0x338>
 2007784:	19c05c26 	beq	r3,r7,20078f8 <_fpadd_parts+0x194>
 2007788:	01c00084 	movi	r7,2
 200778c:	19c06b26 	beq	r3,r7,200793c <_fpadd_parts+0x1d8>
 2007790:	21c05926 	beq	r4,r7,20078f8 <_fpadd_parts+0x194>
 2007794:	11c00217 	ldw	r7,8(r2)
 2007798:	2ac00217 	ldw	r11,8(r5)
 200779c:	13000317 	ldw	r12,12(r2)
 20077a0:	13400417 	ldw	r13,16(r2)
 20077a4:	3ac9c83a 	sub	r4,r7,r11
 20077a8:	2a000317 	ldw	r8,12(r5)
 20077ac:	2a400417 	ldw	r9,16(r5)
 20077b0:	2015883a 	mov	r10,r4
 20077b4:	20007516 	blt	r4,zero,200798c <_fpadd_parts+0x228>
 20077b8:	00c00fc4 	movi	r3,63
 20077bc:	1a805016 	blt	r3,r10,2007900 <_fpadd_parts+0x19c>
 20077c0:	0100870e 	bge	zero,r4,20079e0 <_fpadd_parts+0x27c>
 20077c4:	50fff804 	addi	r3,r10,-32
 20077c8:	18009916 	blt	r3,zero,2007a30 <_fpadd_parts+0x2cc>
 20077cc:	48d6d83a 	srl	r11,r9,r3
 20077d0:	001d883a 	mov	r14,zero
 20077d4:	18009e16 	blt	r3,zero,2007a50 <_fpadd_parts+0x2ec>
 20077d8:	01000044 	movi	r4,1
 20077dc:	20c6983a 	sll	r3,r4,r3
 20077e0:	0015883a 	mov	r10,zero
 20077e4:	513fffc4 	addi	r4,r10,-1
 20077e8:	2295403a 	cmpgeu	r10,r4,r10
 20077ec:	1a87c83a 	sub	r3,r3,r10
 20077f0:	1a52703a 	and	r9,r3,r9
 20077f4:	2210703a 	and	r8,r4,r8
 20077f8:	4250b03a 	or	r8,r8,r9
 20077fc:	4010c03a 	cmpne	r8,r8,zero
 2007800:	42d0b03a 	or	r8,r8,r11
 2007804:	7013883a 	mov	r9,r14
 2007808:	11000117 	ldw	r4,4(r2)
 200780c:	28800117 	ldw	r2,4(r5)
 2007810:	20804126 	beq	r4,r2,2007918 <_fpadd_parts+0x1b4>
 2007814:	20006326 	beq	r4,zero,20079a4 <_fpadd_parts+0x240>
 2007818:	4305c83a 	sub	r2,r8,r12
 200781c:	4091803a 	cmpltu	r8,r8,r2
 2007820:	4b47c83a 	sub	r3,r9,r13
 2007824:	1a07c83a 	sub	r3,r3,r8
 2007828:	18006316 	blt	r3,zero,20079b8 <_fpadd_parts+0x254>
 200782c:	30000115 	stw	zero,4(r6)
 2007830:	31c00215 	stw	r7,8(r6)
 2007834:	30800315 	stw	r2,12(r6)
 2007838:	30c00415 	stw	r3,16(r6)
 200783c:	11ffffc4 	addi	r7,r2,-1
 2007840:	388b403a 	cmpgeu	r5,r7,r2
 2007844:	194bc83a 	sub	r5,r3,r5
 2007848:	01040034 	movhi	r4,4096
 200784c:	213fffc4 	addi	r4,r4,-1
 2007850:	21401736 	bltu	r4,r5,20078b0 <_fpadd_parts+0x14c>
 2007854:	29008226 	beq	r5,r4,2007a60 <_fpadd_parts+0x2fc>
 2007858:	31400217 	ldw	r5,8(r6)
 200785c:	02840034 	movhi	r10,4096
 2007860:	52bfffc4 	addi	r10,r10,-1
 2007864:	033fff84 	movi	r12,-2
 2007868:	297fffc4 	addi	r5,r5,-1
 200786c:	00000106 	br	2007874 <_fpadd_parts+0x110>
 2007870:	3a804a26 	beq	r7,r10,200799c <_fpadd_parts+0x238>
 2007874:	1089883a 	add	r4,r2,r2
 2007878:	2091803a 	cmpltu	r8,r4,r2
 200787c:	18c7883a 	add	r3,r3,r3
 2007880:	227fffc4 	addi	r9,r4,-1
 2007884:	40d1883a 	add	r8,r8,r3
 2007888:	490f403a 	cmpgeu	r7,r9,r4
 200788c:	41cfc83a 	sub	r7,r8,r7
 2007890:	2817883a 	mov	r11,r5
 2007894:	2005883a 	mov	r2,r4
 2007898:	4007883a 	mov	r3,r8
 200789c:	297fffc4 	addi	r5,r5,-1
 20078a0:	51fff32e 	bgeu	r10,r7,2007870 <_fpadd_parts+0x10c>
 20078a4:	31000315 	stw	r4,12(r6)
 20078a8:	32000415 	stw	r8,16(r6)
 20078ac:	32c00215 	stw	r11,8(r6)
 20078b0:	010000c4 	movi	r4,3
 20078b4:	31000015 	stw	r4,0(r6)
 20078b8:	01080034 	movhi	r4,8192
 20078bc:	213fffc4 	addi	r4,r4,-1
 20078c0:	20c00b2e 	bgeu	r4,r3,20078f0 <_fpadd_parts+0x18c>
 20078c4:	180e97fa 	slli	r7,r3,31
 20078c8:	1008d07a 	srli	r4,r2,1
 20078cc:	31400217 	ldw	r5,8(r6)
 20078d0:	1806d07a 	srli	r3,r3,1
 20078d4:	1080004c 	andi	r2,r2,1
 20078d8:	3908b03a 	or	r4,r7,r4
 20078dc:	1108b03a 	or	r4,r2,r4
 20078e0:	29400044 	addi	r5,r5,1
 20078e4:	31000315 	stw	r4,12(r6)
 20078e8:	30c00415 	stw	r3,16(r6)
 20078ec:	31400215 	stw	r5,8(r6)
 20078f0:	3005883a 	mov	r2,r6
 20078f4:	f800283a 	ret
 20078f8:	2805883a 	mov	r2,r5
 20078fc:	f800283a 	ret
 2007900:	59c01e0e 	bge	r11,r7,200797c <_fpadd_parts+0x218>
 2007904:	11000117 	ldw	r4,4(r2)
 2007908:	28800117 	ldw	r2,4(r5)
 200790c:	0011883a 	mov	r8,zero
 2007910:	0013883a 	mov	r9,zero
 2007914:	20bfbf1e 	bne	r4,r2,2007814 <_fpadd_parts+0xb0>
 2007918:	4305883a 	add	r2,r8,r12
 200791c:	1207803a 	cmpltu	r3,r2,r8
 2007920:	4b53883a 	add	r9,r9,r13
 2007924:	1a47883a 	add	r3,r3,r9
 2007928:	31000115 	stw	r4,4(r6)
 200792c:	31c00215 	stw	r7,8(r6)
 2007930:	30800315 	stw	r2,12(r6)
 2007934:	30c00415 	stw	r3,16(r6)
 2007938:	003fdd06 	br	20078b0 <_fpadd_parts+0x14c>
 200793c:	20ffef1e 	bne	r4,r3,20078fc <_fpadd_parts+0x198>
 2007940:	31000015 	stw	r4,0(r6)
 2007944:	10c00117 	ldw	r3,4(r2)
 2007948:	30c00115 	stw	r3,4(r6)
 200794c:	10c00217 	ldw	r3,8(r2)
 2007950:	11000117 	ldw	r4,4(r2)
 2007954:	29400117 	ldw	r5,4(r5)
 2007958:	30c00215 	stw	r3,8(r6)
 200795c:	10c00317 	ldw	r3,12(r2)
 2007960:	2908703a 	and	r4,r5,r4
 2007964:	30c00315 	stw	r3,12(r6)
 2007968:	10c00417 	ldw	r3,16(r2)
 200796c:	31000115 	stw	r4,4(r6)
 2007970:	3005883a 	mov	r2,r6
 2007974:	30c00415 	stw	r3,16(r6)
 2007978:	f800283a 	ret
 200797c:	580f883a 	mov	r7,r11
 2007980:	0019883a 	mov	r12,zero
 2007984:	001b883a 	mov	r13,zero
 2007988:	003f9f06 	br	2007808 <_fpadd_parts+0xa4>
 200798c:	0115c83a 	sub	r10,zero,r4
 2007990:	00c00fc4 	movi	r3,63
 2007994:	1abfda16 	blt	r3,r10,2007900 <_fpadd_parts+0x19c>
 2007998:	003f8906 	br	20077c0 <_fpadd_parts+0x5c>
 200799c:	627fb52e 	bgeu	r12,r9,2007874 <_fpadd_parts+0x110>
 20079a0:	003fc006 	br	20078a4 <_fpadd_parts+0x140>
 20079a4:	6205c83a 	sub	r2,r12,r8
 20079a8:	6099803a 	cmpltu	r12,r12,r2
 20079ac:	6a47c83a 	sub	r3,r13,r9
 20079b0:	1b07c83a 	sub	r3,r3,r12
 20079b4:	183f9d0e 	bge	r3,zero,200782c <_fpadd_parts+0xc8>
 20079b8:	0085c83a 	sub	r2,zero,r2
 20079bc:	1008c03a 	cmpne	r4,r2,zero
 20079c0:	00c7c83a 	sub	r3,zero,r3
 20079c4:	1907c83a 	sub	r3,r3,r4
 20079c8:	01000044 	movi	r4,1
 20079cc:	31000115 	stw	r4,4(r6)
 20079d0:	31c00215 	stw	r7,8(r6)
 20079d4:	30800315 	stw	r2,12(r6)
 20079d8:	30c00415 	stw	r3,16(r6)
 20079dc:	003f9706 	br	200783c <_fpadd_parts+0xd8>
 20079e0:	203f8926 	beq	r4,zero,2007808 <_fpadd_parts+0xa4>
 20079e4:	50fff804 	addi	r3,r10,-32
 20079e8:	3a8f883a 	add	r7,r7,r10
 20079ec:	18002316 	blt	r3,zero,2007a7c <_fpadd_parts+0x318>
 20079f0:	68d6d83a 	srl	r11,r13,r3
 20079f4:	001d883a 	mov	r14,zero
 20079f8:	18001c16 	blt	r3,zero,2007a6c <_fpadd_parts+0x308>
 20079fc:	01000044 	movi	r4,1
 2007a00:	20c6983a 	sll	r3,r4,r3
 2007a04:	0015883a 	mov	r10,zero
 2007a08:	513fffc4 	addi	r4,r10,-1
 2007a0c:	2295403a 	cmpgeu	r10,r4,r10
 2007a10:	1a87c83a 	sub	r3,r3,r10
 2007a14:	1b5a703a 	and	r13,r3,r13
 2007a18:	2318703a 	and	r12,r4,r12
 2007a1c:	6358b03a 	or	r12,r12,r13
 2007a20:	6018c03a 	cmpne	r12,r12,zero
 2007a24:	62d8b03a 	or	r12,r12,r11
 2007a28:	701b883a 	mov	r13,r14
 2007a2c:	003f7606 	br	2007808 <_fpadd_parts+0xa4>
 2007a30:	4808907a 	slli	r4,r9,1
 2007a34:	02c007c4 	movi	r11,31
 2007a38:	5a97c83a 	sub	r11,r11,r10
 2007a3c:	22c8983a 	sll	r4,r4,r11
 2007a40:	4296d83a 	srl	r11,r8,r10
 2007a44:	4a9cd83a 	srl	r14,r9,r10
 2007a48:	22d6b03a 	or	r11,r4,r11
 2007a4c:	003f6106 	br	20077d4 <_fpadd_parts+0x70>
 2007a50:	00c00044 	movi	r3,1
 2007a54:	1a94983a 	sll	r10,r3,r10
 2007a58:	0007883a 	mov	r3,zero
 2007a5c:	003f6106 	br	20077e4 <_fpadd_parts+0x80>
 2007a60:	013fff84 	movi	r4,-2
 2007a64:	21ff7c2e 	bgeu	r4,r7,2007858 <_fpadd_parts+0xf4>
 2007a68:	003f9106 	br	20078b0 <_fpadd_parts+0x14c>
 2007a6c:	00c00044 	movi	r3,1
 2007a70:	1a94983a 	sll	r10,r3,r10
 2007a74:	0007883a 	mov	r3,zero
 2007a78:	003fe306 	br	2007a08 <_fpadd_parts+0x2a4>
 2007a7c:	6816907a 	slli	r11,r13,1
 2007a80:	010007c4 	movi	r4,31
 2007a84:	2289c83a 	sub	r4,r4,r10
 2007a88:	5908983a 	sll	r4,r11,r4
 2007a8c:	6296d83a 	srl	r11,r12,r10
 2007a90:	6a9cd83a 	srl	r14,r13,r10
 2007a94:	22d6b03a 	or	r11,r4,r11
 2007a98:	003fd706 	br	20079f8 <_fpadd_parts+0x294>
 2007a9c:	193f971e 	bne	r3,r4,20078fc <_fpadd_parts+0x198>
 2007aa0:	11000117 	ldw	r4,4(r2)
 2007aa4:	28c00117 	ldw	r3,4(r5)
 2007aa8:	20ff9426 	beq	r4,r3,20078fc <_fpadd_parts+0x198>
 2007aac:	008080f4 	movhi	r2,515
 2007ab0:	10b9b204 	addi	r2,r2,-6456
 2007ab4:	f800283a 	ret

02007ab8 <__adddf3>:
 2007ab8:	deffec04 	addi	sp,sp,-80
 2007abc:	d9001115 	stw	r4,68(sp)
 2007ac0:	d9401215 	stw	r5,72(sp)
 2007ac4:	d9001104 	addi	r4,sp,68
 2007ac8:	d9400a04 	addi	r5,sp,40
 2007acc:	dfc01315 	stw	ra,76(sp)
 2007ad0:	d9c01015 	stw	r7,64(sp)
 2007ad4:	d9800f15 	stw	r6,60(sp)
 2007ad8:	20086680 	call	2008668 <__unpack_d>
 2007adc:	d9000f04 	addi	r4,sp,60
 2007ae0:	d9400504 	addi	r5,sp,20
 2007ae4:	20086680 	call	2008668 <__unpack_d>
 2007ae8:	d9000a04 	addi	r4,sp,40
 2007aec:	d9400504 	addi	r5,sp,20
 2007af0:	d80d883a 	mov	r6,sp
 2007af4:	20077640 	call	2007764 <_fpadd_parts>
 2007af8:	1009883a 	mov	r4,r2
 2007afc:	20084440 	call	2008444 <__pack_d>
 2007b00:	dfc01317 	ldw	ra,76(sp)
 2007b04:	dec01404 	addi	sp,sp,80
 2007b08:	f800283a 	ret

02007b0c <__subdf3>:
 2007b0c:	deffec04 	addi	sp,sp,-80
 2007b10:	d9001115 	stw	r4,68(sp)
 2007b14:	d9401215 	stw	r5,72(sp)
 2007b18:	d9001104 	addi	r4,sp,68
 2007b1c:	d9400a04 	addi	r5,sp,40
 2007b20:	dfc01315 	stw	ra,76(sp)
 2007b24:	d9c01015 	stw	r7,64(sp)
 2007b28:	d9800f15 	stw	r6,60(sp)
 2007b2c:	20086680 	call	2008668 <__unpack_d>
 2007b30:	d9000f04 	addi	r4,sp,60
 2007b34:	d9400504 	addi	r5,sp,20
 2007b38:	20086680 	call	2008668 <__unpack_d>
 2007b3c:	d8800617 	ldw	r2,24(sp)
 2007b40:	d9000a04 	addi	r4,sp,40
 2007b44:	d9400504 	addi	r5,sp,20
 2007b48:	d80d883a 	mov	r6,sp
 2007b4c:	1080005c 	xori	r2,r2,1
 2007b50:	d8800615 	stw	r2,24(sp)
 2007b54:	20077640 	call	2007764 <_fpadd_parts>
 2007b58:	1009883a 	mov	r4,r2
 2007b5c:	20084440 	call	2008444 <__pack_d>
 2007b60:	dfc01317 	ldw	ra,76(sp)
 2007b64:	dec01404 	addi	sp,sp,80
 2007b68:	f800283a 	ret

02007b6c <__muldf3>:
 2007b6c:	deffe404 	addi	sp,sp,-112
 2007b70:	d9001115 	stw	r4,68(sp)
 2007b74:	d9401215 	stw	r5,72(sp)
 2007b78:	d9001104 	addi	r4,sp,68
 2007b7c:	d9400a04 	addi	r5,sp,40
 2007b80:	dfc01b15 	stw	ra,108(sp)
 2007b84:	d9800f15 	stw	r6,60(sp)
 2007b88:	d9c01015 	stw	r7,64(sp)
 2007b8c:	ddc01a15 	stw	r23,104(sp)
 2007b90:	dd801915 	stw	r22,100(sp)
 2007b94:	dd401815 	stw	r21,96(sp)
 2007b98:	dd001715 	stw	r20,92(sp)
 2007b9c:	dcc01615 	stw	r19,88(sp)
 2007ba0:	dc801515 	stw	r18,84(sp)
 2007ba4:	dc401415 	stw	r17,80(sp)
 2007ba8:	dc001315 	stw	r16,76(sp)
 2007bac:	20086680 	call	2008668 <__unpack_d>
 2007bb0:	d9000f04 	addi	r4,sp,60
 2007bb4:	d9400504 	addi	r5,sp,20
 2007bb8:	20086680 	call	2008668 <__unpack_d>
 2007bbc:	d8c00a17 	ldw	r3,40(sp)
 2007bc0:	00800044 	movi	r2,1
 2007bc4:	10c01136 	bltu	r2,r3,2007c0c <__muldf3+0xa0>
 2007bc8:	d8c00b17 	ldw	r3,44(sp)
 2007bcc:	d8800617 	ldw	r2,24(sp)
 2007bd0:	d9000a04 	addi	r4,sp,40
 2007bd4:	1884c03a 	cmpne	r2,r3,r2
 2007bd8:	d8800b15 	stw	r2,44(sp)
 2007bdc:	20084440 	call	2008444 <__pack_d>
 2007be0:	dfc01b17 	ldw	ra,108(sp)
 2007be4:	ddc01a17 	ldw	r23,104(sp)
 2007be8:	dd801917 	ldw	r22,100(sp)
 2007bec:	dd401817 	ldw	r21,96(sp)
 2007bf0:	dd001717 	ldw	r20,92(sp)
 2007bf4:	dcc01617 	ldw	r19,88(sp)
 2007bf8:	dc801517 	ldw	r18,84(sp)
 2007bfc:	dc401417 	ldw	r17,80(sp)
 2007c00:	dc001317 	ldw	r16,76(sp)
 2007c04:	dec01c04 	addi	sp,sp,112
 2007c08:	f800283a 	ret
 2007c0c:	d9000517 	ldw	r4,20(sp)
 2007c10:	11000636 	bltu	r2,r4,2007c2c <__muldf3+0xc0>
 2007c14:	d8800617 	ldw	r2,24(sp)
 2007c18:	d8c00b17 	ldw	r3,44(sp)
 2007c1c:	d9000504 	addi	r4,sp,20
 2007c20:	1884c03a 	cmpne	r2,r3,r2
 2007c24:	d8800615 	stw	r2,24(sp)
 2007c28:	003fec06 	br	2007bdc <__muldf3+0x70>
 2007c2c:	00800104 	movi	r2,4
 2007c30:	1880051e 	bne	r3,r2,2007c48 <__muldf3+0xdc>
 2007c34:	00800084 	movi	r2,2
 2007c38:	20bfe31e 	bne	r4,r2,2007bc8 <__muldf3+0x5c>
 2007c3c:	010080f4 	movhi	r4,515
 2007c40:	2139b204 	addi	r4,r4,-6456
 2007c44:	003fe506 	br	2007bdc <__muldf3+0x70>
 2007c48:	2080031e 	bne	r4,r2,2007c58 <__muldf3+0xec>
 2007c4c:	00800084 	movi	r2,2
 2007c50:	18bffa26 	beq	r3,r2,2007c3c <__muldf3+0xd0>
 2007c54:	003fef06 	br	2007c14 <__muldf3+0xa8>
 2007c58:	00800084 	movi	r2,2
 2007c5c:	18bfda26 	beq	r3,r2,2007bc8 <__muldf3+0x5c>
 2007c60:	20bfec26 	beq	r4,r2,2007c14 <__muldf3+0xa8>
 2007c64:	dc000d17 	ldw	r16,52(sp)
 2007c68:	dd000817 	ldw	r20,32(sp)
 2007c6c:	dc800917 	ldw	r18,36(sp)
 2007c70:	8009883a 	mov	r4,r16
 2007c74:	000b883a 	mov	r5,zero
 2007c78:	a00d883a 	mov	r6,r20
 2007c7c:	000f883a 	mov	r7,zero
 2007c80:	20083380 	call	2008338 <__muldi3>
 2007c84:	dc400e17 	ldw	r17,56(sp)
 2007c88:	9009883a 	mov	r4,r18
 2007c8c:	800d883a 	mov	r6,r16
 2007c90:	000b883a 	mov	r5,zero
 2007c94:	000f883a 	mov	r7,zero
 2007c98:	102f883a 	mov	r23,r2
 2007c9c:	1827883a 	mov	r19,r3
 2007ca0:	20083380 	call	2008338 <__muldi3>
 2007ca4:	900d883a 	mov	r6,r18
 2007ca8:	8809883a 	mov	r4,r17
 2007cac:	000b883a 	mov	r5,zero
 2007cb0:	000f883a 	mov	r7,zero
 2007cb4:	102b883a 	mov	r21,r2
 2007cb8:	1821883a 	mov	r16,r3
 2007cbc:	20083380 	call	2008338 <__muldi3>
 2007cc0:	8809883a 	mov	r4,r17
 2007cc4:	000b883a 	mov	r5,zero
 2007cc8:	a00d883a 	mov	r6,r20
 2007ccc:	000f883a 	mov	r7,zero
 2007cd0:	102d883a 	mov	r22,r2
 2007cd4:	1825883a 	mov	r18,r3
 2007cd8:	20083380 	call	2008338 <__muldi3>
 2007cdc:	154b883a 	add	r5,r2,r21
 2007ce0:	2889803a 	cmpltu	r4,r5,r2
 2007ce4:	1c07883a 	add	r3,r3,r16
 2007ce8:	20c9883a 	add	r4,r4,r3
 2007cec:	24004b36 	bltu	r4,r16,2007e1c <__muldf3+0x2b0>
 2007cf0:	8100011e 	bne	r16,r4,2007cf8 <__muldf3+0x18c>
 2007cf4:	2d404936 	bltu	r5,r21,2007e1c <__muldf3+0x2b0>
 2007cf8:	0011883a 	mov	r8,zero
 2007cfc:	0007883a 	mov	r3,zero
 2007d00:	2ccb883a 	add	r5,r5,r19
 2007d04:	b80d883a 	mov	r6,r23
 2007d08:	2cc0012e 	bgeu	r5,r19,2007d10 <__muldf3+0x1a4>
 2007d0c:	02000044 	movi	r8,1
 2007d10:	258f883a 	add	r7,r4,r22
 2007d14:	3909803a 	cmpltu	r4,r7,r4
 2007d18:	da400c17 	ldw	r9,48(sp)
 2007d1c:	2489883a 	add	r4,r4,r18
 2007d20:	d8800717 	ldw	r2,28(sp)
 2007d24:	20c9883a 	add	r4,r4,r3
 2007d28:	da800b17 	ldw	r10,44(sp)
 2007d2c:	d8c00617 	ldw	r3,24(sp)
 2007d30:	3a11883a 	add	r8,r7,r8
 2007d34:	4885883a 	add	r2,r9,r2
 2007d38:	50c6c03a 	cmpne	r3,r10,r3
 2007d3c:	41cf803a 	cmpltu	r7,r8,r7
 2007d40:	12400104 	addi	r9,r2,4
 2007d44:	d8c00115 	stw	r3,4(sp)
 2007d48:	3909883a 	add	r4,r7,r4
 2007d4c:	da400215 	stw	r9,8(sp)
 2007d50:	03480034 	movhi	r13,8192
 2007d54:	6b7fffc4 	addi	r13,r13,-1
 2007d58:	4007883a 	mov	r3,r8
 2007d5c:	6900102e 	bgeu	r13,r4,2007da0 <__muldf3+0x234>
 2007d60:	10800144 	addi	r2,r2,5
 2007d64:	180ed07a 	srli	r7,r3,1
 2007d68:	18c0004c 	andi	r3,r3,1
 2007d6c:	201097fa 	slli	r8,r4,31
 2007d70:	281697fa 	slli	r11,r5,31
 2007d74:	2008d07a 	srli	r4,r4,1
 2007d78:	3014d07a 	srli	r10,r6,1
 2007d7c:	2812d07a 	srli	r9,r5,1
 2007d80:	1019883a 	mov	r12,r2
 2007d84:	18000226 	beq	r3,zero,2007d90 <__muldf3+0x224>
 2007d88:	5a8cb03a 	or	r6,r11,r10
 2007d8c:	49600034 	orhi	r5,r9,32768
 2007d90:	41c6b03a 	or	r3,r8,r7
 2007d94:	10800044 	addi	r2,r2,1
 2007d98:	693ff236 	bltu	r13,r4,2007d64 <__muldf3+0x1f8>
 2007d9c:	db000215 	stw	r12,8(sp)
 2007da0:	03440034 	movhi	r13,4096
 2007da4:	6b7fffc4 	addi	r13,r13,-1
 2007da8:	69001336 	bltu	r13,r4,2007df8 <__muldf3+0x28c>
 2007dac:	d8800217 	ldw	r2,8(sp)
 2007db0:	10bfffc4 	addi	r2,r2,-1
 2007db4:	18d3883a 	add	r9,r3,r3
 2007db8:	48c7803a 	cmpltu	r3,r9,r3
 2007dbc:	2109883a 	add	r4,r4,r4
 2007dc0:	190f883a 	add	r7,r3,r4
 2007dc4:	3191883a 	add	r8,r6,r6
 2007dc8:	4197803a 	cmpltu	r11,r8,r6
 2007dcc:	2955883a 	add	r10,r5,r5
 2007dd0:	1019883a 	mov	r12,r2
 2007dd4:	4807883a 	mov	r3,r9
 2007dd8:	3809883a 	mov	r4,r7
 2007ddc:	2800010e 	bge	r5,zero,2007de4 <__muldf3+0x278>
 2007de0:	48c00054 	ori	r3,r9,1
 2007de4:	400d883a 	mov	r6,r8
 2007de8:	5a8b883a 	add	r5,r11,r10
 2007dec:	10bfffc4 	addi	r2,r2,-1
 2007df0:	69fff02e 	bgeu	r13,r7,2007db4 <__muldf3+0x248>
 2007df4:	db000215 	stw	r12,8(sp)
 2007df8:	18803fcc 	andi	r2,r3,255
 2007dfc:	01c02004 	movi	r7,128
 2007e00:	11c00926 	beq	r2,r7,2007e28 <__muldf3+0x2bc>
 2007e04:	008000c4 	movi	r2,3
 2007e08:	d9000415 	stw	r4,16(sp)
 2007e0c:	d8c00315 	stw	r3,12(sp)
 2007e10:	d8800015 	stw	r2,0(sp)
 2007e14:	d809883a 	mov	r4,sp
 2007e18:	003f7006 	br	2007bdc <__muldf3+0x70>
 2007e1c:	0011883a 	mov	r8,zero
 2007e20:	00c00044 	movi	r3,1
 2007e24:	003fb606 	br	2007d00 <__muldf3+0x194>
 2007e28:	19c0400c 	andi	r7,r3,256
 2007e2c:	383ff51e 	bne	r7,zero,2007e04 <__muldf3+0x298>
 2007e30:	314ab03a 	or	r5,r6,r5
 2007e34:	283ff326 	beq	r5,zero,2007e04 <__muldf3+0x298>
 2007e38:	1885883a 	add	r2,r3,r2
 2007e3c:	10cb803a 	cmpltu	r5,r2,r3
 2007e40:	00ffc004 	movi	r3,-256
 2007e44:	10c6703a 	and	r3,r2,r3
 2007e48:	2909883a 	add	r4,r5,r4
 2007e4c:	003fed06 	br	2007e04 <__muldf3+0x298>

02007e50 <__divdf3>:
 2007e50:	defff104 	addi	sp,sp,-60
 2007e54:	d9000c15 	stw	r4,48(sp)
 2007e58:	d9400d15 	stw	r5,52(sp)
 2007e5c:	d9000c04 	addi	r4,sp,48
 2007e60:	d9400504 	addi	r5,sp,20
 2007e64:	dfc00e15 	stw	ra,56(sp)
 2007e68:	d9800a15 	stw	r6,40(sp)
 2007e6c:	d9c00b15 	stw	r7,44(sp)
 2007e70:	20086680 	call	2008668 <__unpack_d>
 2007e74:	d9000a04 	addi	r4,sp,40
 2007e78:	d80b883a 	mov	r5,sp
 2007e7c:	20086680 	call	2008668 <__unpack_d>
 2007e80:	d8c00517 	ldw	r3,20(sp)
 2007e84:	00800044 	movi	r2,1
 2007e88:	10c00536 	bltu	r2,r3,2007ea0 <__divdf3+0x50>
 2007e8c:	d9000504 	addi	r4,sp,20
 2007e90:	20084440 	call	2008444 <__pack_d>
 2007e94:	dfc00e17 	ldw	ra,56(sp)
 2007e98:	dec00f04 	addi	sp,sp,60
 2007e9c:	f800283a 	ret
 2007ea0:	d9000017 	ldw	r4,0(sp)
 2007ea4:	11000536 	bltu	r2,r4,2007ebc <__divdf3+0x6c>
 2007ea8:	d809883a 	mov	r4,sp
 2007eac:	20084440 	call	2008444 <__pack_d>
 2007eb0:	dfc00e17 	ldw	ra,56(sp)
 2007eb4:	dec00f04 	addi	sp,sp,60
 2007eb8:	f800283a 	ret
 2007ebc:	d9800617 	ldw	r6,24(sp)
 2007ec0:	d9400117 	ldw	r5,4(sp)
 2007ec4:	00800104 	movi	r2,4
 2007ec8:	314af03a 	xor	r5,r6,r5
 2007ecc:	d9400615 	stw	r5,24(sp)
 2007ed0:	18800226 	beq	r3,r2,2007edc <__divdf3+0x8c>
 2007ed4:	01400084 	movi	r5,2
 2007ed8:	1940041e 	bne	r3,r5,2007eec <__divdf3+0x9c>
 2007edc:	193feb1e 	bne	r3,r4,2007e8c <__divdf3+0x3c>
 2007ee0:	010080f4 	movhi	r4,515
 2007ee4:	2139b204 	addi	r4,r4,-6456
 2007ee8:	003fe906 	br	2007e90 <__divdf3+0x40>
 2007eec:	20803326 	beq	r4,r2,2007fbc <__divdf3+0x16c>
 2007ef0:	21403726 	beq	r4,r5,2007fd0 <__divdf3+0x180>
 2007ef4:	d8800217 	ldw	r2,8(sp)
 2007ef8:	d9000717 	ldw	r4,28(sp)
 2007efc:	d8c00917 	ldw	r3,36(sp)
 2007f00:	da000417 	ldw	r8,16(sp)
 2007f04:	2089c83a 	sub	r4,r4,r2
 2007f08:	d9000715 	stw	r4,28(sp)
 2007f0c:	d8800817 	ldw	r2,32(sp)
 2007f10:	dbc00317 	ldw	r15,12(sp)
 2007f14:	1a000236 	bltu	r3,r8,2007f20 <__divdf3+0xd0>
 2007f18:	40c0081e 	bne	r8,r3,2007f3c <__divdf3+0xec>
 2007f1c:	13c0072e 	bgeu	r2,r15,2007f3c <__divdf3+0xec>
 2007f20:	108b883a 	add	r5,r2,r2
 2007f24:	288d803a 	cmpltu	r6,r5,r2
 2007f28:	18c7883a 	add	r3,r3,r3
 2007f2c:	213fffc4 	addi	r4,r4,-1
 2007f30:	2805883a 	mov	r2,r5
 2007f34:	30c7883a 	add	r3,r6,r3
 2007f38:	d9000715 	stw	r4,28(sp)
 2007f3c:	01400f44 	movi	r5,61
 2007f40:	000f883a 	mov	r7,zero
 2007f44:	01040034 	movhi	r4,4096
 2007f48:	0019883a 	mov	r12,zero
 2007f4c:	001b883a 	mov	r13,zero
 2007f50:	201697fa 	slli	r11,r4,31
 2007f54:	3814d07a 	srli	r10,r7,1
 2007f58:	297fffc4 	addi	r5,r5,-1
 2007f5c:	1a000936 	bltu	r3,r8,2007f84 <__divdf3+0x134>
 2007f60:	13cdc83a 	sub	r6,r2,r15
 2007f64:	1193803a 	cmpltu	r9,r2,r6
 2007f68:	1a1dc83a 	sub	r14,r3,r8
 2007f6c:	40c0011e 	bne	r8,r3,2007f74 <__divdf3+0x124>
 2007f70:	13c00436 	bltu	r2,r15,2007f84 <__divdf3+0x134>
 2007f74:	3005883a 	mov	r2,r6
 2007f78:	7247c83a 	sub	r3,r14,r9
 2007f7c:	61d8b03a 	or	r12,r12,r7
 2007f80:	691ab03a 	or	r13,r13,r4
 2007f84:	108d883a 	add	r6,r2,r2
 2007f88:	3093803a 	cmpltu	r9,r6,r2
 2007f8c:	18c7883a 	add	r3,r3,r3
 2007f90:	5a8eb03a 	or	r7,r11,r10
 2007f94:	2008d07a 	srli	r4,r4,1
 2007f98:	3005883a 	mov	r2,r6
 2007f9c:	48c7883a 	add	r3,r9,r3
 2007fa0:	283feb1e 	bne	r5,zero,2007f50 <__divdf3+0x100>
 2007fa4:	61003fcc 	andi	r4,r12,255
 2007fa8:	01402004 	movi	r5,128
 2007fac:	21400b26 	beq	r4,r5,2007fdc <__divdf3+0x18c>
 2007fb0:	db000815 	stw	r12,32(sp)
 2007fb4:	db400915 	stw	r13,36(sp)
 2007fb8:	003fb406 	br	2007e8c <__divdf3+0x3c>
 2007fbc:	d8000815 	stw	zero,32(sp)
 2007fc0:	d8000915 	stw	zero,36(sp)
 2007fc4:	d8000715 	stw	zero,28(sp)
 2007fc8:	d9000504 	addi	r4,sp,20
 2007fcc:	003fb006 	br	2007e90 <__divdf3+0x40>
 2007fd0:	d8800515 	stw	r2,20(sp)
 2007fd4:	d9000504 	addi	r4,sp,20
 2007fd8:	003fad06 	br	2007e90 <__divdf3+0x40>
 2007fdc:	6140400c 	andi	r5,r12,256
 2007fe0:	283ff31e 	bne	r5,zero,2007fb0 <__divdf3+0x160>
 2007fe4:	30c4b03a 	or	r2,r6,r3
 2007fe8:	103ff126 	beq	r2,zero,2007fb0 <__divdf3+0x160>
 2007fec:	6109883a 	add	r4,r12,r4
 2007ff0:	2305803a 	cmpltu	r2,r4,r12
 2007ff4:	033fc004 	movi	r12,-256
 2007ff8:	2318703a 	and	r12,r4,r12
 2007ffc:	135b883a 	add	r13,r2,r13
 2008000:	003feb06 	br	2007fb0 <__divdf3+0x160>

02008004 <__ltdf2>:
 2008004:	defff104 	addi	sp,sp,-60
 2008008:	d9000c15 	stw	r4,48(sp)
 200800c:	d9400d15 	stw	r5,52(sp)
 2008010:	d9000c04 	addi	r4,sp,48
 2008014:	d9400504 	addi	r5,sp,20
 2008018:	dfc00e15 	stw	ra,56(sp)
 200801c:	d9800a15 	stw	r6,40(sp)
 2008020:	d9c00b15 	stw	r7,44(sp)
 2008024:	20086680 	call	2008668 <__unpack_d>
 2008028:	d9000a04 	addi	r4,sp,40
 200802c:	d80b883a 	mov	r5,sp
 2008030:	20086680 	call	2008668 <__unpack_d>
 2008034:	d8c00517 	ldw	r3,20(sp)
 2008038:	00800044 	movi	r2,1
 200803c:	10c0052e 	bgeu	r2,r3,2008054 <__ltdf2+0x50>
 2008040:	d8c00017 	ldw	r3,0(sp)
 2008044:	10c0032e 	bgeu	r2,r3,2008054 <__ltdf2+0x50>
 2008048:	d9000504 	addi	r4,sp,20
 200804c:	d80b883a 	mov	r5,sp
 2008050:	200876c0 	call	200876c <__fpcmp_parts_d>
 2008054:	dfc00e17 	ldw	ra,56(sp)
 2008058:	dec00f04 	addi	sp,sp,60
 200805c:	f800283a 	ret

02008060 <__floatsidf>:
 2008060:	2004d7fa 	srli	r2,r4,31
 2008064:	defff904 	addi	sp,sp,-28
 2008068:	00c000c4 	movi	r3,3
 200806c:	dfc00615 	stw	ra,24(sp)
 2008070:	dc000515 	stw	r16,20(sp)
 2008074:	d8c00015 	stw	r3,0(sp)
 2008078:	d8800115 	stw	r2,4(sp)
 200807c:	2000081e 	bne	r4,zero,20080a0 <__floatsidf+0x40>
 2008080:	00800084 	movi	r2,2
 2008084:	d8800015 	stw	r2,0(sp)
 2008088:	d809883a 	mov	r4,sp
 200808c:	20084440 	call	2008444 <__pack_d>
 2008090:	dfc00617 	ldw	ra,24(sp)
 2008094:	dc000517 	ldw	r16,20(sp)
 2008098:	dec00704 	addi	sp,sp,28
 200809c:	f800283a 	ret
 20080a0:	00c00f04 	movi	r3,60
 20080a4:	d8c00215 	stw	r3,8(sp)
 20080a8:	10000f1e 	bne	r2,zero,20080e8 <__floatsidf+0x88>
 20080ac:	2021883a 	mov	r16,r4
 20080b0:	8009883a 	mov	r4,r16
 20080b4:	20083980 	call	2008398 <__clzsi2>
 20080b8:	11000744 	addi	r4,r2,29
 20080bc:	0100110e 	bge	zero,r4,2008104 <__floatsidf+0xa4>
 20080c0:	10ffff44 	addi	r3,r2,-3
 20080c4:	18001216 	blt	r3,zero,2008110 <__floatsidf+0xb0>
 20080c8:	80c6983a 	sll	r3,r16,r3
 20080cc:	0009883a 	mov	r4,zero
 20080d0:	014007c4 	movi	r5,31
 20080d4:	2885c83a 	sub	r2,r5,r2
 20080d8:	d9000315 	stw	r4,12(sp)
 20080dc:	d8c00415 	stw	r3,16(sp)
 20080e0:	d8800215 	stw	r2,8(sp)
 20080e4:	003fe806 	br	2008088 <__floatsidf+0x28>
 20080e8:	00a00034 	movhi	r2,32768
 20080ec:	20800e26 	beq	r4,r2,2008128 <__floatsidf+0xc8>
 20080f0:	0121c83a 	sub	r16,zero,r4
 20080f4:	8009883a 	mov	r4,r16
 20080f8:	20083980 	call	2008398 <__clzsi2>
 20080fc:	11000744 	addi	r4,r2,29
 2008100:	013fef16 	blt	zero,r4,20080c0 <__floatsidf+0x60>
 2008104:	dc000315 	stw	r16,12(sp)
 2008108:	d8000415 	stw	zero,16(sp)
 200810c:	003fde06 	br	2008088 <__floatsidf+0x28>
 2008110:	800ad07a 	srli	r5,r16,1
 2008114:	00c007c4 	movi	r3,31
 2008118:	1907c83a 	sub	r3,r3,r4
 200811c:	28c6d83a 	srl	r3,r5,r3
 2008120:	8108983a 	sll	r4,r16,r4
 2008124:	003fea06 	br	20080d0 <__floatsidf+0x70>
 2008128:	0005883a 	mov	r2,zero
 200812c:	00f07834 	movhi	r3,49632
 2008130:	003fd706 	br	2008090 <__floatsidf+0x30>

02008134 <__fixdfsi>:
 2008134:	defff804 	addi	sp,sp,-32
 2008138:	d9000515 	stw	r4,20(sp)
 200813c:	d9400615 	stw	r5,24(sp)
 2008140:	d9000504 	addi	r4,sp,20
 2008144:	d80b883a 	mov	r5,sp
 2008148:	dfc00715 	stw	ra,28(sp)
 200814c:	20086680 	call	2008668 <__unpack_d>
 2008150:	d8800017 	ldw	r2,0(sp)
 2008154:	00c00084 	movi	r3,2
 2008158:	10c01c26 	beq	r2,r3,20081cc <__fixdfsi+0x98>
 200815c:	00c00044 	movi	r3,1
 2008160:	18801a2e 	bgeu	r3,r2,20081cc <__fixdfsi+0x98>
 2008164:	00c00104 	movi	r3,4
 2008168:	10c01126 	beq	r2,r3,20081b0 <__fixdfsi+0x7c>
 200816c:	d8800217 	ldw	r2,8(sp)
 2008170:	10001616 	blt	r2,zero,20081cc <__fixdfsi+0x98>
 2008174:	00c00784 	movi	r3,30
 2008178:	18800d16 	blt	r3,r2,20081b0 <__fixdfsi+0x7c>
 200817c:	00c00f04 	movi	r3,60
 2008180:	1885c83a 	sub	r2,r3,r2
 2008184:	10fff804 	addi	r3,r2,-32
 2008188:	d9400317 	ldw	r5,12(sp)
 200818c:	d9000417 	ldw	r4,16(sp)
 2008190:	18001616 	blt	r3,zero,20081ec <__fixdfsi+0xb8>
 2008194:	20c4d83a 	srl	r2,r4,r3
 2008198:	d8c00117 	ldw	r3,4(sp)
 200819c:	18000126 	beq	r3,zero,20081a4 <__fixdfsi+0x70>
 20081a0:	0085c83a 	sub	r2,zero,r2
 20081a4:	dfc00717 	ldw	ra,28(sp)
 20081a8:	dec00804 	addi	sp,sp,32
 20081ac:	f800283a 	ret
 20081b0:	d8800117 	ldw	r2,4(sp)
 20081b4:	1000091e 	bne	r2,zero,20081dc <__fixdfsi+0xa8>
 20081b8:	00a00034 	movhi	r2,32768
 20081bc:	10bfffc4 	addi	r2,r2,-1
 20081c0:	dfc00717 	ldw	ra,28(sp)
 20081c4:	dec00804 	addi	sp,sp,32
 20081c8:	f800283a 	ret
 20081cc:	0005883a 	mov	r2,zero
 20081d0:	dfc00717 	ldw	ra,28(sp)
 20081d4:	dec00804 	addi	sp,sp,32
 20081d8:	f800283a 	ret
 20081dc:	00a00034 	movhi	r2,32768
 20081e0:	dfc00717 	ldw	ra,28(sp)
 20081e4:	dec00804 	addi	sp,sp,32
 20081e8:	f800283a 	ret
 20081ec:	2008907a 	slli	r4,r4,1
 20081f0:	018007c4 	movi	r6,31
 20081f4:	308dc83a 	sub	r6,r6,r2
 20081f8:	2188983a 	sll	r4,r4,r6
 20081fc:	2884d83a 	srl	r2,r5,r2
 2008200:	2084b03a 	or	r2,r4,r2
 2008204:	003fe406 	br	2008198 <__fixdfsi+0x64>

02008208 <udivmodsi4>:
 2008208:	2005883a 	mov	r2,r4
 200820c:	2900182e 	bgeu	r5,r4,2008270 <udivmodsi4+0x68>
 2008210:	28001716 	blt	r5,zero,2008270 <udivmodsi4+0x68>
 2008214:	01000804 	movi	r4,32
 2008218:	00c00044 	movi	r3,1
 200821c:	00000206 	br	2008228 <udivmodsi4+0x20>
 2008220:	20001126 	beq	r4,zero,2008268 <udivmodsi4+0x60>
 2008224:	28000516 	blt	r5,zero,200823c <udivmodsi4+0x34>
 2008228:	294b883a 	add	r5,r5,r5
 200822c:	213fffc4 	addi	r4,r4,-1
 2008230:	18c7883a 	add	r3,r3,r3
 2008234:	28bffa36 	bltu	r5,r2,2008220 <udivmodsi4+0x18>
 2008238:	18000b26 	beq	r3,zero,2008268 <udivmodsi4+0x60>
 200823c:	0009883a 	mov	r4,zero
 2008240:	11400236 	bltu	r2,r5,200824c <udivmodsi4+0x44>
 2008244:	1145c83a 	sub	r2,r2,r5
 2008248:	20c8b03a 	or	r4,r4,r3
 200824c:	1806d07a 	srli	r3,r3,1
 2008250:	280ad07a 	srli	r5,r5,1
 2008254:	183ffa1e 	bne	r3,zero,2008240 <udivmodsi4+0x38>
 2008258:	3000021e 	bne	r6,zero,2008264 <udivmodsi4+0x5c>
 200825c:	2005883a 	mov	r2,r4
 2008260:	f800283a 	ret
 2008264:	f800283a 	ret
 2008268:	0009883a 	mov	r4,zero
 200826c:	003ffa06 	br	2008258 <udivmodsi4+0x50>
 2008270:	00c00044 	movi	r3,1
 2008274:	0009883a 	mov	r4,zero
 2008278:	003ff106 	br	2008240 <udivmodsi4+0x38>

0200827c <__divsi3>:
 200827c:	defffe04 	addi	sp,sp,-8
 2008280:	dfc00115 	stw	ra,4(sp)
 2008284:	dc000015 	stw	r16,0(sp)
 2008288:	20000a16 	blt	r4,zero,20082b4 <__divsi3+0x38>
 200828c:	0021883a 	mov	r16,zero
 2008290:	28000b16 	blt	r5,zero,20082c0 <__divsi3+0x44>
 2008294:	000d883a 	mov	r6,zero
 2008298:	20082080 	call	2008208 <udivmodsi4>
 200829c:	80000126 	beq	r16,zero,20082a4 <__divsi3+0x28>
 20082a0:	0085c83a 	sub	r2,zero,r2
 20082a4:	dfc00117 	ldw	ra,4(sp)
 20082a8:	dc000017 	ldw	r16,0(sp)
 20082ac:	dec00204 	addi	sp,sp,8
 20082b0:	f800283a 	ret
 20082b4:	0109c83a 	sub	r4,zero,r4
 20082b8:	04000044 	movi	r16,1
 20082bc:	283ff50e 	bge	r5,zero,2008294 <__divsi3+0x18>
 20082c0:	014bc83a 	sub	r5,zero,r5
 20082c4:	8400005c 	xori	r16,r16,1
 20082c8:	003ff206 	br	2008294 <__divsi3+0x18>

020082cc <__modsi3>:
 20082cc:	deffff04 	addi	sp,sp,-4
 20082d0:	dfc00015 	stw	ra,0(sp)
 20082d4:	20000516 	blt	r4,zero,20082ec <__modsi3+0x20>
 20082d8:	28000c16 	blt	r5,zero,200830c <__modsi3+0x40>
 20082dc:	01800044 	movi	r6,1
 20082e0:	dfc00017 	ldw	ra,0(sp)
 20082e4:	dec00104 	addi	sp,sp,4
 20082e8:	20082081 	jmpi	2008208 <udivmodsi4>
 20082ec:	0109c83a 	sub	r4,zero,r4
 20082f0:	28000b16 	blt	r5,zero,2008320 <__modsi3+0x54>
 20082f4:	01800044 	movi	r6,1
 20082f8:	20082080 	call	2008208 <udivmodsi4>
 20082fc:	0085c83a 	sub	r2,zero,r2
 2008300:	dfc00017 	ldw	ra,0(sp)
 2008304:	dec00104 	addi	sp,sp,4
 2008308:	f800283a 	ret
 200830c:	014bc83a 	sub	r5,zero,r5
 2008310:	01800044 	movi	r6,1
 2008314:	dfc00017 	ldw	ra,0(sp)
 2008318:	dec00104 	addi	sp,sp,4
 200831c:	20082081 	jmpi	2008208 <udivmodsi4>
 2008320:	014bc83a 	sub	r5,zero,r5
 2008324:	003ff306 	br	20082f4 <__modsi3+0x28>

02008328 <__udivsi3>:
 2008328:	000d883a 	mov	r6,zero
 200832c:	20082081 	jmpi	2008208 <udivmodsi4>

02008330 <__umodsi3>:
 2008330:	01800044 	movi	r6,1
 2008334:	20082081 	jmpi	2008208 <udivmodsi4>

02008338 <__muldi3>:
 2008338:	20bfffcc 	andi	r2,r4,65535
 200833c:	2010d43a 	srli	r8,r4,16
 2008340:	30ffffcc 	andi	r3,r6,65535
 2008344:	3014d43a 	srli	r10,r6,16
 2008348:	1893383a 	mul	r9,r3,r2
 200834c:	1a07383a 	mul	r3,r3,r8
 2008350:	5085383a 	mul	r2,r10,r2
 2008354:	4816d43a 	srli	r11,r9,16
 2008358:	5211383a 	mul	r8,r10,r8
 200835c:	1885883a 	add	r2,r3,r2
 2008360:	12c5883a 	add	r2,r2,r11
 2008364:	10c0022e 	bgeu	r2,r3,2008370 <__muldi3+0x38>
 2008368:	00c00074 	movhi	r3,1
 200836c:	40d1883a 	add	r8,r8,r3
 2008370:	1014d43a 	srli	r10,r2,16
 2008374:	21c9383a 	mul	r4,r4,r7
 2008378:	314d383a 	mul	r6,r6,r5
 200837c:	1004943a 	slli	r2,r2,16
 2008380:	4291883a 	add	r8,r8,r10
 2008384:	4a7fffcc 	andi	r9,r9,65535
 2008388:	2187883a 	add	r3,r4,r6
 200838c:	1245883a 	add	r2,r2,r9
 2008390:	1a07883a 	add	r3,r3,r8
 2008394:	f800283a 	ret

02008398 <__clzsi2>:
 2008398:	00bfffd4 	movui	r2,65535
 200839c:	11000b36 	bltu	r2,r4,20083cc <__clzsi2+0x34>
 20083a0:	00803fc4 	movi	r2,255
 20083a4:	11001e2e 	bgeu	r2,r4,2008420 <__clzsi2+0x88>
 20083a8:	00c00204 	movi	r3,8
 20083ac:	20c8d83a 	srl	r4,r4,r3
 20083b0:	00c080f4 	movhi	r3,515
 20083b4:	18f9b704 	addi	r3,r3,-6436
 20083b8:	00800604 	movi	r2,24
 20083bc:	1909883a 	add	r4,r3,r4
 20083c0:	20c00003 	ldbu	r3,0(r4)
 20083c4:	10c5c83a 	sub	r2,r2,r3
 20083c8:	f800283a 	ret
 20083cc:	00804034 	movhi	r2,256
 20083d0:	10bfffc4 	addi	r2,r2,-1
 20083d4:	11000936 	bltu	r2,r4,20083fc <__clzsi2+0x64>
 20083d8:	00800404 	movi	r2,16
 20083dc:	1007883a 	mov	r3,r2
 20083e0:	20c8d83a 	srl	r4,r4,r3
 20083e4:	00c080f4 	movhi	r3,515
 20083e8:	18f9b704 	addi	r3,r3,-6436
 20083ec:	1909883a 	add	r4,r3,r4
 20083f0:	20c00003 	ldbu	r3,0(r4)
 20083f4:	10c5c83a 	sub	r2,r2,r3
 20083f8:	f800283a 	ret
 20083fc:	00c00604 	movi	r3,24
 2008400:	20c8d83a 	srl	r4,r4,r3
 2008404:	00c080f4 	movhi	r3,515
 2008408:	18f9b704 	addi	r3,r3,-6436
 200840c:	00800204 	movi	r2,8
 2008410:	1909883a 	add	r4,r3,r4
 2008414:	20c00003 	ldbu	r3,0(r4)
 2008418:	10c5c83a 	sub	r2,r2,r3
 200841c:	f800283a 	ret
 2008420:	0007883a 	mov	r3,zero
 2008424:	20c8d83a 	srl	r4,r4,r3
 2008428:	00c080f4 	movhi	r3,515
 200842c:	18f9b704 	addi	r3,r3,-6436
 2008430:	00800804 	movi	r2,32
 2008434:	1909883a 	add	r4,r3,r4
 2008438:	20c00003 	ldbu	r3,0(r4)
 200843c:	10c5c83a 	sub	r2,r2,r3
 2008440:	f800283a 	ret

02008444 <__pack_d>:
 2008444:	20800017 	ldw	r2,0(r4)
 2008448:	defff804 	addi	sp,sp,-32
 200844c:	dcc00315 	stw	r19,12(sp)
 2008450:	dc800215 	stw	r18,8(sp)
 2008454:	dfc00715 	stw	ra,28(sp)
 2008458:	dd800615 	stw	r22,24(sp)
 200845c:	dd400515 	stw	r21,20(sp)
 2008460:	dd000415 	stw	r20,16(sp)
 2008464:	dc400115 	stw	r17,4(sp)
 2008468:	dc000015 	stw	r16,0(sp)
 200846c:	04800044 	movi	r18,1
 2008470:	24400317 	ldw	r17,12(r4)
 2008474:	24000417 	ldw	r16,16(r4)
 2008478:	24c00117 	ldw	r19,4(r4)
 200847c:	9080422e 	bgeu	r18,r2,2008588 <__pack_d+0x144>
 2008480:	00c00104 	movi	r3,4
 2008484:	10c03c26 	beq	r2,r3,2008578 <__pack_d+0x134>
 2008488:	00c00084 	movi	r3,2
 200848c:	10c01926 	beq	r2,r3,20084f4 <__pack_d+0xb0>
 2008490:	8c04b03a 	or	r2,r17,r16
 2008494:	10001726 	beq	r2,zero,20084f4 <__pack_d+0xb0>
 2008498:	21000217 	ldw	r4,8(r4)
 200849c:	00bf0084 	movi	r2,-1022
 20084a0:	20804016 	blt	r4,r2,20085a4 <__pack_d+0x160>
 20084a4:	0080ffc4 	movi	r2,1023
 20084a8:	11003316 	blt	r2,r4,2008578 <__pack_d+0x134>
 20084ac:	88803fcc 	andi	r2,r17,255
 20084b0:	00c02004 	movi	r3,128
 20084b4:	10c02926 	beq	r2,r3,200855c <__pack_d+0x118>
 20084b8:	88801fc4 	addi	r2,r17,127
 20084bc:	1463803a 	cmpltu	r17,r2,r17
 20084c0:	8c21883a 	add	r16,r17,r16
 20084c4:	1023883a 	mov	r17,r2
 20084c8:	00880034 	movhi	r2,8192
 20084cc:	10bfffc4 	addi	r2,r2,-1
 20084d0:	14001c36 	bltu	r2,r16,2008544 <__pack_d+0x100>
 20084d4:	2100ffc4 	addi	r4,r4,1023
 20084d8:	8006963a 	slli	r3,r16,24
 20084dc:	8804d23a 	srli	r2,r17,8
 20084e0:	8020913a 	slli	r16,r16,4
 20084e4:	2101ffcc 	andi	r4,r4,2047
 20084e8:	1884b03a 	or	r2,r3,r2
 20084ec:	8020d33a 	srli	r16,r16,12
 20084f0:	00000306 	br	2008500 <__pack_d+0xbc>
 20084f4:	0009883a 	mov	r4,zero
 20084f8:	0005883a 	mov	r2,zero
 20084fc:	0021883a 	mov	r16,zero
 2008500:	2008953a 	slli	r4,r4,20
 2008504:	982697fa 	slli	r19,r19,31
 2008508:	00c00434 	movhi	r3,16
 200850c:	18ffffc4 	addi	r3,r3,-1
 2008510:	80e0703a 	and	r16,r16,r3
 2008514:	8106b03a 	or	r3,r16,r4
 2008518:	1cc6b03a 	or	r3,r3,r19
 200851c:	dfc00717 	ldw	ra,28(sp)
 2008520:	dd800617 	ldw	r22,24(sp)
 2008524:	dd400517 	ldw	r21,20(sp)
 2008528:	dd000417 	ldw	r20,16(sp)
 200852c:	dcc00317 	ldw	r19,12(sp)
 2008530:	dc800217 	ldw	r18,8(sp)
 2008534:	dc400117 	ldw	r17,4(sp)
 2008538:	dc000017 	ldw	r16,0(sp)
 200853c:	dec00804 	addi	sp,sp,32
 2008540:	f800283a 	ret
 2008544:	800697fa 	slli	r3,r16,31
 2008548:	8804d07a 	srli	r2,r17,1
 200854c:	21010004 	addi	r4,r4,1024
 2008550:	8020d07a 	srli	r16,r16,1
 2008554:	18a2b03a 	or	r17,r3,r2
 2008558:	003fdf06 	br	20084d8 <__pack_d+0x94>
 200855c:	88c0400c 	andi	r3,r17,256
 2008560:	183fd926 	beq	r3,zero,20084c8 <__pack_d+0x84>
 2008564:	8885883a 	add	r2,r17,r2
 2008568:	1463803a 	cmpltu	r17,r2,r17
 200856c:	8c21883a 	add	r16,r17,r16
 2008570:	1023883a 	mov	r17,r2
 2008574:	003fd406 	br	20084c8 <__pack_d+0x84>
 2008578:	0101ffc4 	movi	r4,2047
 200857c:	0005883a 	mov	r2,zero
 2008580:	0021883a 	mov	r16,zero
 2008584:	003fde06 	br	2008500 <__pack_d+0xbc>
 2008588:	84000234 	orhi	r16,r16,8
 200858c:	00c00434 	movhi	r3,16
 2008590:	18ffffc4 	addi	r3,r3,-1
 2008594:	8805883a 	mov	r2,r17
 2008598:	80e0703a 	and	r16,r16,r3
 200859c:	0101ffc4 	movi	r4,2047
 20085a0:	003fd706 	br	2008500 <__pack_d+0xbc>
 20085a4:	1129c83a 	sub	r20,r2,r4
 20085a8:	00800e04 	movi	r2,56
 20085ac:	15002716 	blt	r2,r20,200864c <__pack_d+0x208>
 20085b0:	800b883a 	mov	r5,r16
 20085b4:	a00d883a 	mov	r6,r20
 20085b8:	8809883a 	mov	r4,r17
 20085bc:	200883c0 	call	200883c <__lshrdi3>
 20085c0:	9009883a 	mov	r4,r18
 20085c4:	000b883a 	mov	r5,zero
 20085c8:	a00d883a 	mov	r6,r20
 20085cc:	102d883a 	mov	r22,r2
 20085d0:	182b883a 	mov	r21,r3
 20085d4:	20088800 	call	2008880 <__ashldi3>
 20085d8:	1009003a 	cmpeq	r4,r2,zero
 20085dc:	1907c83a 	sub	r3,r3,r4
 20085e0:	10bfffc4 	addi	r2,r2,-1
 20085e4:	1c20703a 	and	r16,r3,r16
 20085e8:	1444703a 	and	r2,r2,r17
 20085ec:	1404b03a 	or	r2,r2,r16
 20085f0:	1004c03a 	cmpne	r2,r2,zero
 20085f4:	1584b03a 	or	r2,r2,r22
 20085f8:	11003fcc 	andi	r4,r2,255
 20085fc:	01402004 	movi	r5,128
 2008600:	a807883a 	mov	r3,r21
 2008604:	2140131e 	bne	r4,r5,2008654 <__pack_d+0x210>
 2008608:	1140400c 	andi	r5,r2,256
 200860c:	28000426 	beq	r5,zero,2008620 <__pack_d+0x1dc>
 2008610:	1109883a 	add	r4,r2,r4
 2008614:	2085803a 	cmpltu	r2,r4,r2
 2008618:	1547883a 	add	r3,r2,r21
 200861c:	2005883a 	mov	r2,r4
 2008620:	1808963a 	slli	r4,r3,24
 2008624:	1004d23a 	srli	r2,r2,8
 2008628:	1820913a 	slli	r16,r3,4
 200862c:	01440034 	movhi	r5,4096
 2008630:	297fffc4 	addi	r5,r5,-1
 2008634:	2084b03a 	or	r2,r4,r2
 2008638:	8020d33a 	srli	r16,r16,12
 200863c:	01000044 	movi	r4,1
 2008640:	28ffaf36 	bltu	r5,r3,2008500 <__pack_d+0xbc>
 2008644:	0009883a 	mov	r4,zero
 2008648:	003fad06 	br	2008500 <__pack_d+0xbc>
 200864c:	0005883a 	mov	r2,zero
 2008650:	0007883a 	mov	r3,zero
 2008654:	11001fc4 	addi	r4,r2,127
 2008658:	2085803a 	cmpltu	r2,r4,r2
 200865c:	10c7883a 	add	r3,r2,r3
 2008660:	2005883a 	mov	r2,r4
 2008664:	003fee06 	br	2008620 <__pack_d+0x1dc>

02008668 <__unpack_d>:
 2008668:	21800117 	ldw	r6,4(r4)
 200866c:	20c00017 	ldw	r3,0(r4)
 2008670:	3004d7fa 	srli	r2,r6,31
 2008674:	3008d53a 	srli	r4,r6,20
 2008678:	28800115 	stw	r2,4(r5)
 200867c:	2101ffcc 	andi	r4,r4,2047
 2008680:	00800434 	movhi	r2,16
 2008684:	10bfffc4 	addi	r2,r2,-1
 2008688:	3084703a 	and	r2,r6,r2
 200868c:	20001a1e 	bne	r4,zero,20086f8 <__unpack_d+0x90>
 2008690:	1888b03a 	or	r4,r3,r2
 2008694:	20002626 	beq	r4,zero,2008730 <__unpack_d+0xc8>
 2008698:	1808d63a 	srli	r4,r3,24
 200869c:	1004923a 	slli	r2,r2,8
 20086a0:	01bf0084 	movi	r6,-1022
 20086a4:	29800215 	stw	r6,8(r5)
 20086a8:	2084b03a 	or	r2,r4,r2
 20086ac:	010000c4 	movi	r4,3
 20086b0:	29000015 	stw	r4,0(r5)
 20086b4:	02040034 	movhi	r8,4096
 20086b8:	423fffc4 	addi	r8,r8,-1
 20086bc:	1806923a 	slli	r3,r3,8
 20086c0:	40801836 	bltu	r8,r2,2008724 <__unpack_d+0xbc>
 20086c4:	013f0044 	movi	r4,-1023
 20086c8:	18cd883a 	add	r6,r3,r3
 20086cc:	30c7803a 	cmpltu	r3,r6,r3
 20086d0:	1085883a 	add	r2,r2,r2
 20086d4:	1885883a 	add	r2,r3,r2
 20086d8:	200f883a 	mov	r7,r4
 20086dc:	3007883a 	mov	r3,r6
 20086e0:	213fffc4 	addi	r4,r4,-1
 20086e4:	40bff82e 	bgeu	r8,r2,20086c8 <__unpack_d+0x60>
 20086e8:	29c00215 	stw	r7,8(r5)
 20086ec:	28c00315 	stw	r3,12(r5)
 20086f0:	28800415 	stw	r2,16(r5)
 20086f4:	f800283a 	ret
 20086f8:	01c1ffc4 	movi	r7,2047
 20086fc:	21c00f26 	beq	r4,r7,200873c <__unpack_d+0xd4>
 2008700:	180cd63a 	srli	r6,r3,24
 2008704:	1004923a 	slli	r2,r2,8
 2008708:	213f0044 	addi	r4,r4,-1023
 200870c:	1806923a 	slli	r3,r3,8
 2008710:	3084b03a 	or	r2,r6,r2
 2008714:	29000215 	stw	r4,8(r5)
 2008718:	010000c4 	movi	r4,3
 200871c:	10840034 	orhi	r2,r2,4096
 2008720:	29000015 	stw	r4,0(r5)
 2008724:	28c00315 	stw	r3,12(r5)
 2008728:	28800415 	stw	r2,16(r5)
 200872c:	f800283a 	ret
 2008730:	00800084 	movi	r2,2
 2008734:	28800015 	stw	r2,0(r5)
 2008738:	f800283a 	ret
 200873c:	1888b03a 	or	r4,r3,r2
 2008740:	20000526 	beq	r4,zero,2008758 <__unpack_d+0xf0>
 2008744:	3180022c 	andhi	r6,r6,8
 2008748:	30000626 	beq	r6,zero,2008764 <__unpack_d+0xfc>
 200874c:	01000044 	movi	r4,1
 2008750:	29000015 	stw	r4,0(r5)
 2008754:	003ff306 	br	2008724 <__unpack_d+0xbc>
 2008758:	00800104 	movi	r2,4
 200875c:	28800015 	stw	r2,0(r5)
 2008760:	f800283a 	ret
 2008764:	28000015 	stw	zero,0(r5)
 2008768:	003fee06 	br	2008724 <__unpack_d+0xbc>

0200876c <__fpcmp_parts_d>:
 200876c:	20c00017 	ldw	r3,0(r4)
 2008770:	00800044 	movi	r2,1
 2008774:	10c0142e 	bgeu	r2,r3,20087c8 <__fpcmp_parts_d+0x5c>
 2008778:	29800017 	ldw	r6,0(r5)
 200877c:	1180122e 	bgeu	r2,r6,20087c8 <__fpcmp_parts_d+0x5c>
 2008780:	01c00104 	movi	r7,4
 2008784:	19c02826 	beq	r3,r7,2008828 <__fpcmp_parts_d+0xbc>
 2008788:	31c00926 	beq	r6,r7,20087b0 <__fpcmp_parts_d+0x44>
 200878c:	01c00084 	movi	r7,2
 2008790:	19c00626 	beq	r3,r7,20087ac <__fpcmp_parts_d+0x40>
 2008794:	31c00a26 	beq	r6,r7,20087c0 <__fpcmp_parts_d+0x54>
 2008798:	20c00117 	ldw	r3,4(r4)
 200879c:	29800117 	ldw	r6,4(r5)
 20087a0:	19800b26 	beq	r3,r6,20087d0 <__fpcmp_parts_d+0x64>
 20087a4:	1800041e 	bne	r3,zero,20087b8 <__fpcmp_parts_d+0x4c>
 20087a8:	f800283a 	ret
 20087ac:	30c01a26 	beq	r6,r3,2008818 <__fpcmp_parts_d+0xac>
 20087b0:	28800117 	ldw	r2,4(r5)
 20087b4:	1000041e 	bne	r2,zero,20087c8 <__fpcmp_parts_d+0x5c>
 20087b8:	00bfffc4 	movi	r2,-1
 20087bc:	f800283a 	ret
 20087c0:	20800117 	ldw	r2,4(r4)
 20087c4:	103ffc1e 	bne	r2,zero,20087b8 <__fpcmp_parts_d+0x4c>
 20087c8:	00800044 	movi	r2,1
 20087cc:	f800283a 	ret
 20087d0:	21c00217 	ldw	r7,8(r4)
 20087d4:	29800217 	ldw	r6,8(r5)
 20087d8:	31c0020e 	bge	r6,r7,20087e4 <__fpcmp_parts_d+0x78>
 20087dc:	183ff61e 	bne	r3,zero,20087b8 <__fpcmp_parts_d+0x4c>
 20087e0:	f800283a 	ret
 20087e4:	39800a16 	blt	r7,r6,2008810 <__fpcmp_parts_d+0xa4>
 20087e8:	20800417 	ldw	r2,16(r4)
 20087ec:	29800417 	ldw	r6,16(r5)
 20087f0:	21c00317 	ldw	r7,12(r4)
 20087f4:	29000317 	ldw	r4,12(r5)
 20087f8:	30800936 	bltu	r6,r2,2008820 <__fpcmp_parts_d+0xb4>
 20087fc:	1180011e 	bne	r2,r6,2008804 <__fpcmp_parts_d+0x98>
 2008800:	21c00736 	bltu	r4,r7,2008820 <__fpcmp_parts_d+0xb4>
 2008804:	11800236 	bltu	r2,r6,2008810 <__fpcmp_parts_d+0xa4>
 2008808:	3080031e 	bne	r6,r2,2008818 <__fpcmp_parts_d+0xac>
 200880c:	3900022e 	bgeu	r7,r4,2008818 <__fpcmp_parts_d+0xac>
 2008810:	183fe926 	beq	r3,zero,20087b8 <__fpcmp_parts_d+0x4c>
 2008814:	003fec06 	br	20087c8 <__fpcmp_parts_d+0x5c>
 2008818:	0005883a 	mov	r2,zero
 200881c:	f800283a 	ret
 2008820:	183fe926 	beq	r3,zero,20087c8 <__fpcmp_parts_d+0x5c>
 2008824:	003fe406 	br	20087b8 <__fpcmp_parts_d+0x4c>
 2008828:	30ffe51e 	bne	r6,r3,20087c0 <__fpcmp_parts_d+0x54>
 200882c:	28c00117 	ldw	r3,4(r5)
 2008830:	20800117 	ldw	r2,4(r4)
 2008834:	1885c83a 	sub	r2,r3,r2
 2008838:	f800283a 	ret

0200883c <__lshrdi3>:
 200883c:	2005883a 	mov	r2,r4
 2008840:	2807883a 	mov	r3,r5
 2008844:	30000826 	beq	r6,zero,2008868 <__lshrdi3+0x2c>
 2008848:	01000804 	movi	r4,32
 200884c:	2189c83a 	sub	r4,r4,r6
 2008850:	0100060e 	bge	zero,r4,200886c <__lshrdi3+0x30>
 2008854:	1184d83a 	srl	r2,r2,r6
 2008858:	2908983a 	sll	r4,r5,r4
 200885c:	298cd83a 	srl	r6,r5,r6
 2008860:	2084b03a 	or	r2,r4,r2
 2008864:	3007883a 	mov	r3,r6
 2008868:	f800283a 	ret
 200886c:	0105c83a 	sub	r2,zero,r4
 2008870:	000d883a 	mov	r6,zero
 2008874:	2884d83a 	srl	r2,r5,r2
 2008878:	3007883a 	mov	r3,r6
 200887c:	003ffa06 	br	2008868 <__lshrdi3+0x2c>

02008880 <__ashldi3>:
 2008880:	2005883a 	mov	r2,r4
 2008884:	2807883a 	mov	r3,r5
 2008888:	30000826 	beq	r6,zero,20088ac <__ashldi3+0x2c>
 200888c:	01000804 	movi	r4,32
 2008890:	2189c83a 	sub	r4,r4,r6
 2008894:	0100060e 	bge	zero,r4,20088b0 <__ashldi3+0x30>
 2008898:	1108d83a 	srl	r4,r2,r4
 200889c:	2986983a 	sll	r3,r5,r6
 20088a0:	118c983a 	sll	r6,r2,r6
 20088a4:	20c6b03a 	or	r3,r4,r3
 20088a8:	3005883a 	mov	r2,r6
 20088ac:	f800283a 	ret
 20088b0:	0107c83a 	sub	r3,zero,r4
 20088b4:	000d883a 	mov	r6,zero
 20088b8:	10c6983a 	sll	r3,r2,r3
 20088bc:	3005883a 	mov	r2,r6
 20088c0:	003ffa06 	br	20088ac <__ashldi3+0x2c>

020088c4 <__errno>:
 20088c4:	008080f4 	movhi	r2,515
 20088c8:	10882a04 	addi	r2,r2,8360
 20088cc:	10800017 	ldw	r2,0(r2)
 20088d0:	f800283a 	ret

020088d4 <malloc>:
 20088d4:	008080f4 	movhi	r2,515
 20088d8:	10882a04 	addi	r2,r2,8360
 20088dc:	200b883a 	mov	r5,r4
 20088e0:	11000017 	ldw	r4,0(r2)
 20088e4:	20088fc1 	jmpi	20088fc <_malloc_r>

020088e8 <free>:
 20088e8:	008080f4 	movhi	r2,515
 20088ec:	10882a04 	addi	r2,r2,8360
 20088f0:	200b883a 	mov	r5,r4
 20088f4:	11000017 	ldw	r4,0(r2)
 20088f8:	200d49c1 	jmpi	200d49c <_free_r>

020088fc <_malloc_r>:
 20088fc:	defff604 	addi	sp,sp,-40
 2008900:	dc800215 	stw	r18,8(sp)
 2008904:	dfc00915 	stw	ra,36(sp)
 2008908:	df000815 	stw	fp,32(sp)
 200890c:	ddc00715 	stw	r23,28(sp)
 2008910:	dd800615 	stw	r22,24(sp)
 2008914:	dd400515 	stw	r21,20(sp)
 2008918:	dd000415 	stw	r20,16(sp)
 200891c:	dcc00315 	stw	r19,12(sp)
 2008920:	dc400115 	stw	r17,4(sp)
 2008924:	dc000015 	stw	r16,0(sp)
 2008928:	288002c4 	addi	r2,r5,11
 200892c:	00c00584 	movi	r3,22
 2008930:	2025883a 	mov	r18,r4
 2008934:	18802b2e 	bgeu	r3,r2,20089e4 <_malloc_r+0xe8>
 2008938:	047ffe04 	movi	r17,-8
 200893c:	1462703a 	and	r17,r2,r17
 2008940:	88002a16 	blt	r17,zero,20089ec <_malloc_r+0xf0>
 2008944:	89402936 	bltu	r17,r5,20089ec <_malloc_r+0xf0>
 2008948:	9009883a 	mov	r4,r18
 200894c:	20115540 	call	2011554 <__malloc_lock>
 2008950:	00807dc4 	movi	r2,503
 2008954:	14402936 	bltu	r2,r17,20089fc <_malloc_r+0x100>
 2008958:	8808d0fa 	srli	r4,r17,3
 200895c:	04c080f4 	movhi	r19,515
 2008960:	9cc26d04 	addi	r19,r19,2484
 2008964:	2105883a 	add	r2,r4,r4
 2008968:	1085883a 	add	r2,r2,r2
 200896c:	1085883a 	add	r2,r2,r2
 2008970:	9885883a 	add	r2,r19,r2
 2008974:	14000317 	ldw	r16,12(r2)
 2008978:	80815526 	beq	r16,r2,2008ed0 <_malloc_r+0x5d4>
 200897c:	81000117 	ldw	r4,4(r16)
 2008980:	00bfff04 	movi	r2,-4
 2008984:	80c00317 	ldw	r3,12(r16)
 2008988:	2084703a 	and	r2,r4,r2
 200898c:	8085883a 	add	r2,r16,r2
 2008990:	11800117 	ldw	r6,4(r2)
 2008994:	81400217 	ldw	r5,8(r16)
 2008998:	9009883a 	mov	r4,r18
 200899c:	31800054 	ori	r6,r6,1
 20089a0:	11800115 	stw	r6,4(r2)
 20089a4:	28c00315 	stw	r3,12(r5)
 20089a8:	19400215 	stw	r5,8(r3)
 20089ac:	20115740 	call	2011574 <__malloc_unlock>
 20089b0:	80800204 	addi	r2,r16,8
 20089b4:	dfc00917 	ldw	ra,36(sp)
 20089b8:	df000817 	ldw	fp,32(sp)
 20089bc:	ddc00717 	ldw	r23,28(sp)
 20089c0:	dd800617 	ldw	r22,24(sp)
 20089c4:	dd400517 	ldw	r21,20(sp)
 20089c8:	dd000417 	ldw	r20,16(sp)
 20089cc:	dcc00317 	ldw	r19,12(sp)
 20089d0:	dc800217 	ldw	r18,8(sp)
 20089d4:	dc400117 	ldw	r17,4(sp)
 20089d8:	dc000017 	ldw	r16,0(sp)
 20089dc:	dec00a04 	addi	sp,sp,40
 20089e0:	f800283a 	ret
 20089e4:	04400404 	movi	r17,16
 20089e8:	897fd72e 	bgeu	r17,r5,2008948 <_malloc_r+0x4c>
 20089ec:	00800304 	movi	r2,12
 20089f0:	90800015 	stw	r2,0(r18)
 20089f4:	0005883a 	mov	r2,zero
 20089f8:	003fee06 	br	20089b4 <_malloc_r+0xb8>
 20089fc:	8808d27a 	srli	r4,r17,9
 2008a00:	20007126 	beq	r4,zero,2008bc8 <_malloc_r+0x2cc>
 2008a04:	00800104 	movi	r2,4
 2008a08:	1100eb36 	bltu	r2,r4,2008db8 <_malloc_r+0x4bc>
 2008a0c:	8808d1ba 	srli	r4,r17,6
 2008a10:	21000e04 	addi	r4,r4,56
 2008a14:	210b883a 	add	r5,r4,r4
 2008a18:	294b883a 	add	r5,r5,r5
 2008a1c:	294b883a 	add	r5,r5,r5
 2008a20:	04c080f4 	movhi	r19,515
 2008a24:	9cc26d04 	addi	r19,r19,2484
 2008a28:	994b883a 	add	r5,r19,r5
 2008a2c:	2c000317 	ldw	r16,12(r5)
 2008a30:	2c000e26 	beq	r5,r16,2008a6c <_malloc_r+0x170>
 2008a34:	80c00117 	ldw	r3,4(r16)
 2008a38:	01ffff04 	movi	r7,-4
 2008a3c:	018003c4 	movi	r6,15
 2008a40:	19c6703a 	and	r3,r3,r7
 2008a44:	1c45c83a 	sub	r2,r3,r17
 2008a48:	30800716 	blt	r6,r2,2008a68 <_malloc_r+0x16c>
 2008a4c:	1000610e 	bge	r2,zero,2008bd4 <_malloc_r+0x2d8>
 2008a50:	84000317 	ldw	r16,12(r16)
 2008a54:	2c000526 	beq	r5,r16,2008a6c <_malloc_r+0x170>
 2008a58:	80c00117 	ldw	r3,4(r16)
 2008a5c:	19c6703a 	and	r3,r3,r7
 2008a60:	1c45c83a 	sub	r2,r3,r17
 2008a64:	30bff90e 	bge	r6,r2,2008a4c <_malloc_r+0x150>
 2008a68:	213fffc4 	addi	r4,r4,-1
 2008a6c:	21000044 	addi	r4,r4,1
 2008a70:	9c000417 	ldw	r16,16(r19)
 2008a74:	00c080f4 	movhi	r3,515
 2008a78:	18c26d04 	addi	r3,r3,2484
 2008a7c:	1a400204 	addi	r9,r3,8
 2008a80:	8240ff26 	beq	r16,r9,2008e80 <_malloc_r+0x584>
 2008a84:	81400117 	ldw	r5,4(r16)
 2008a88:	00bfff04 	movi	r2,-4
 2008a8c:	018003c4 	movi	r6,15
 2008a90:	2884703a 	and	r2,r5,r2
 2008a94:	144bc83a 	sub	r5,r2,r17
 2008a98:	3140ea16 	blt	r6,r5,2008e44 <_malloc_r+0x548>
 2008a9c:	1a400515 	stw	r9,20(r3)
 2008aa0:	1a400415 	stw	r9,16(r3)
 2008aa4:	2800570e 	bge	r5,zero,2008c04 <_malloc_r+0x308>
 2008aa8:	01407fc4 	movi	r5,511
 2008aac:	2880ca36 	bltu	r5,r2,2008dd8 <_malloc_r+0x4dc>
 2008ab0:	1004d0fa 	srli	r2,r2,3
 2008ab4:	02000044 	movi	r8,1
 2008ab8:	19c00117 	ldw	r7,4(r3)
 2008abc:	108b883a 	add	r5,r2,r2
 2008ac0:	294b883a 	add	r5,r5,r5
 2008ac4:	1005d0ba 	srai	r2,r2,2
 2008ac8:	294b883a 	add	r5,r5,r5
 2008acc:	28cb883a 	add	r5,r5,r3
 2008ad0:	29800217 	ldw	r6,8(r5)
 2008ad4:	4084983a 	sll	r2,r8,r2
 2008ad8:	81400315 	stw	r5,12(r16)
 2008adc:	81800215 	stw	r6,8(r16)
 2008ae0:	11c4b03a 	or	r2,r2,r7
 2008ae4:	18800115 	stw	r2,4(r3)
 2008ae8:	2c000215 	stw	r16,8(r5)
 2008aec:	34000315 	stw	r16,12(r6)
 2008af0:	200bd0ba 	srai	r5,r4,2
 2008af4:	00c00044 	movi	r3,1
 2008af8:	194a983a 	sll	r5,r3,r5
 2008afc:	11404936 	bltu	r2,r5,2008c24 <_malloc_r+0x328>
 2008b00:	1146703a 	and	r3,r2,r5
 2008b04:	18000a1e 	bne	r3,zero,2008b30 <_malloc_r+0x234>
 2008b08:	00ffff04 	movi	r3,-4
 2008b0c:	294b883a 	add	r5,r5,r5
 2008b10:	20c8703a 	and	r4,r4,r3
 2008b14:	1146703a 	and	r3,r2,r5
 2008b18:	21000104 	addi	r4,r4,4
 2008b1c:	1800041e 	bne	r3,zero,2008b30 <_malloc_r+0x234>
 2008b20:	294b883a 	add	r5,r5,r5
 2008b24:	1146703a 	and	r3,r2,r5
 2008b28:	21000104 	addi	r4,r4,4
 2008b2c:	183ffc26 	beq	r3,zero,2008b20 <_malloc_r+0x224>
 2008b30:	023fff04 	movi	r8,-4
 2008b34:	01c003c4 	movi	r7,15
 2008b38:	2105883a 	add	r2,r4,r4
 2008b3c:	1085883a 	add	r2,r2,r2
 2008b40:	1085883a 	add	r2,r2,r2
 2008b44:	9899883a 	add	r12,r19,r2
 2008b48:	62800304 	addi	r10,r12,12
 2008b4c:	2017883a 	mov	r11,r4
 2008b50:	54000017 	ldw	r16,0(r10)
 2008b54:	51bffd04 	addi	r6,r10,-12
 2008b58:	8180041e 	bne	r16,r6,2008b6c <_malloc_r+0x270>
 2008b5c:	0000ca06 	br	2008e88 <_malloc_r+0x58c>
 2008b60:	10001c0e 	bge	r2,zero,2008bd4 <_malloc_r+0x2d8>
 2008b64:	84000317 	ldw	r16,12(r16)
 2008b68:	8180c726 	beq	r16,r6,2008e88 <_malloc_r+0x58c>
 2008b6c:	80c00117 	ldw	r3,4(r16)
 2008b70:	1a06703a 	and	r3,r3,r8
 2008b74:	1c45c83a 	sub	r2,r3,r17
 2008b78:	38bff90e 	bge	r7,r2,2008b60 <_malloc_r+0x264>
 2008b7c:	81000317 	ldw	r4,12(r16)
 2008b80:	81400217 	ldw	r5,8(r16)
 2008b84:	8447883a 	add	r3,r16,r17
 2008b88:	8c400054 	ori	r17,r17,1
 2008b8c:	29000315 	stw	r4,12(r5)
 2008b90:	21400215 	stw	r5,8(r4)
 2008b94:	84400115 	stw	r17,4(r16)
 2008b98:	1889883a 	add	r4,r3,r2
 2008b9c:	11400054 	ori	r5,r2,1
 2008ba0:	98c00515 	stw	r3,20(r19)
 2008ba4:	98c00415 	stw	r3,16(r19)
 2008ba8:	20800015 	stw	r2,0(r4)
 2008bac:	1a400315 	stw	r9,12(r3)
 2008bb0:	1a400215 	stw	r9,8(r3)
 2008bb4:	19400115 	stw	r5,4(r3)
 2008bb8:	9009883a 	mov	r4,r18
 2008bbc:	20115740 	call	2011574 <__malloc_unlock>
 2008bc0:	80800204 	addi	r2,r16,8
 2008bc4:	003f7b06 	br	20089b4 <_malloc_r+0xb8>
 2008bc8:	8808d0fa 	srli	r4,r17,3
 2008bcc:	210b883a 	add	r5,r4,r4
 2008bd0:	003f9106 	br	2008a18 <_malloc_r+0x11c>
 2008bd4:	80c7883a 	add	r3,r16,r3
 2008bd8:	19400117 	ldw	r5,4(r3)
 2008bdc:	80800317 	ldw	r2,12(r16)
 2008be0:	81000217 	ldw	r4,8(r16)
 2008be4:	29400054 	ori	r5,r5,1
 2008be8:	19400115 	stw	r5,4(r3)
 2008bec:	20800315 	stw	r2,12(r4)
 2008bf0:	11000215 	stw	r4,8(r2)
 2008bf4:	9009883a 	mov	r4,r18
 2008bf8:	20115740 	call	2011574 <__malloc_unlock>
 2008bfc:	80800204 	addi	r2,r16,8
 2008c00:	003f6c06 	br	20089b4 <_malloc_r+0xb8>
 2008c04:	8085883a 	add	r2,r16,r2
 2008c08:	10c00117 	ldw	r3,4(r2)
 2008c0c:	9009883a 	mov	r4,r18
 2008c10:	18c00054 	ori	r3,r3,1
 2008c14:	10c00115 	stw	r3,4(r2)
 2008c18:	20115740 	call	2011574 <__malloc_unlock>
 2008c1c:	80800204 	addi	r2,r16,8
 2008c20:	003f6406 	br	20089b4 <_malloc_r+0xb8>
 2008c24:	9c000217 	ldw	r16,8(r19)
 2008c28:	00bfff04 	movi	r2,-4
 2008c2c:	85400117 	ldw	r21,4(r16)
 2008c30:	a8aa703a 	and	r21,r21,r2
 2008c34:	ac400336 	bltu	r21,r17,2008c44 <_malloc_r+0x348>
 2008c38:	ac45c83a 	sub	r2,r21,r17
 2008c3c:	00c003c4 	movi	r3,15
 2008c40:	18805316 	blt	r3,r2,2008d90 <_malloc_r+0x494>
 2008c44:	d5e01717 	ldw	r23,-32676(gp)
 2008c48:	d0e00517 	ldw	r3,-32748(gp)
 2008c4c:	00bfffc4 	movi	r2,-1
 2008c50:	8579883a 	add	fp,r16,r21
 2008c54:	8def883a 	add	r23,r17,r23
 2008c58:	1880d226 	beq	r3,r2,2008fa4 <_malloc_r+0x6a8>
 2008c5c:	bdc403c4 	addi	r23,r23,4111
 2008c60:	00bc0004 	movi	r2,-4096
 2008c64:	b8ae703a 	and	r23,r23,r2
 2008c68:	9009883a 	mov	r4,r18
 2008c6c:	b80b883a 	mov	r5,r23
 2008c70:	20093540 	call	2009354 <_sbrk_r>
 2008c74:	1029883a 	mov	r20,r2
 2008c78:	00bfffc4 	movi	r2,-1
 2008c7c:	a080d126 	beq	r20,r2,2008fc4 <_malloc_r+0x6c8>
 2008c80:	a7009f36 	bltu	r20,fp,2008f00 <_malloc_r+0x604>
 2008c84:	058080f4 	movhi	r22,515
 2008c88:	b5884804 	addi	r22,r22,8480
 2008c8c:	b0800017 	ldw	r2,0(r22)
 2008c90:	b885883a 	add	r2,r23,r2
 2008c94:	b0800015 	stw	r2,0(r22)
 2008c98:	e500cf26 	beq	fp,r20,2008fd8 <_malloc_r+0x6dc>
 2008c9c:	d1200517 	ldw	r4,-32748(gp)
 2008ca0:	00ffffc4 	movi	r3,-1
 2008ca4:	20c0e026 	beq	r4,r3,2009028 <_malloc_r+0x72c>
 2008ca8:	a739c83a 	sub	fp,r20,fp
 2008cac:	1705883a 	add	r2,r2,fp
 2008cb0:	b0800015 	stw	r2,0(r22)
 2008cb4:	a08001cc 	andi	r2,r20,7
 2008cb8:	1000a526 	beq	r2,zero,2008f50 <_malloc_r+0x654>
 2008cbc:	a0a9c83a 	sub	r20,r20,r2
 2008cc0:	00c40204 	movi	r3,4104
 2008cc4:	a5000204 	addi	r20,r20,8
 2008cc8:	1885c83a 	sub	r2,r3,r2
 2008ccc:	a5c7883a 	add	r3,r20,r23
 2008cd0:	18c3ffcc 	andi	r3,r3,4095
 2008cd4:	10efc83a 	sub	r23,r2,r3
 2008cd8:	9009883a 	mov	r4,r18
 2008cdc:	b80b883a 	mov	r5,r23
 2008ce0:	20093540 	call	2009354 <_sbrk_r>
 2008ce4:	00ffffc4 	movi	r3,-1
 2008ce8:	10c0cc26 	beq	r2,r3,200901c <_malloc_r+0x720>
 2008cec:	1505c83a 	sub	r2,r2,r20
 2008cf0:	b887883a 	add	r3,r23,r2
 2008cf4:	18c00054 	ori	r3,r3,1
 2008cf8:	b0800017 	ldw	r2,0(r22)
 2008cfc:	9d000215 	stw	r20,8(r19)
 2008d00:	a0c00115 	stw	r3,4(r20)
 2008d04:	b885883a 	add	r2,r23,r2
 2008d08:	b0800015 	stw	r2,0(r22)
 2008d0c:	84c00e26 	beq	r16,r19,2008d48 <_malloc_r+0x44c>
 2008d10:	00c003c4 	movi	r3,15
 2008d14:	1d40902e 	bgeu	r3,r21,2008f58 <_malloc_r+0x65c>
 2008d18:	ad7ffd04 	addi	r21,r21,-12
 2008d1c:	013ffe04 	movi	r4,-8
 2008d20:	a908703a 	and	r4,r21,r4
 2008d24:	810b883a 	add	r5,r16,r4
 2008d28:	01800144 	movi	r6,5
 2008d2c:	29800115 	stw	r6,4(r5)
 2008d30:	29800215 	stw	r6,8(r5)
 2008d34:	81400117 	ldw	r5,4(r16)
 2008d38:	2940004c 	andi	r5,r5,1
 2008d3c:	214ab03a 	or	r5,r4,r5
 2008d40:	81400115 	stw	r5,4(r16)
 2008d44:	1900ae36 	bltu	r3,r4,2009000 <_malloc_r+0x704>
 2008d48:	d0e01617 	ldw	r3,-32680(gp)
 2008d4c:	1880012e 	bgeu	r3,r2,2008d54 <_malloc_r+0x458>
 2008d50:	d0a01615 	stw	r2,-32680(gp)
 2008d54:	d0e01517 	ldw	r3,-32684(gp)
 2008d58:	9c000217 	ldw	r16,8(r19)
 2008d5c:	1880012e 	bgeu	r3,r2,2008d64 <_malloc_r+0x468>
 2008d60:	d0a01515 	stw	r2,-32684(gp)
 2008d64:	80c00117 	ldw	r3,4(r16)
 2008d68:	00bfff04 	movi	r2,-4
 2008d6c:	1886703a 	and	r3,r3,r2
 2008d70:	1c45c83a 	sub	r2,r3,r17
 2008d74:	1c400236 	bltu	r3,r17,2008d80 <_malloc_r+0x484>
 2008d78:	00c003c4 	movi	r3,15
 2008d7c:	18800416 	blt	r3,r2,2008d90 <_malloc_r+0x494>
 2008d80:	9009883a 	mov	r4,r18
 2008d84:	20115740 	call	2011574 <__malloc_unlock>
 2008d88:	0005883a 	mov	r2,zero
 2008d8c:	003f0906 	br	20089b4 <_malloc_r+0xb8>
 2008d90:	88c00054 	ori	r3,r17,1
 2008d94:	10800054 	ori	r2,r2,1
 2008d98:	80c00115 	stw	r3,4(r16)
 2008d9c:	8463883a 	add	r17,r16,r17
 2008da0:	88800115 	stw	r2,4(r17)
 2008da4:	9009883a 	mov	r4,r18
 2008da8:	9c400215 	stw	r17,8(r19)
 2008dac:	20115740 	call	2011574 <__malloc_unlock>
 2008db0:	80800204 	addi	r2,r16,8
 2008db4:	003eff06 	br	20089b4 <_malloc_r+0xb8>
 2008db8:	00800504 	movi	r2,20
 2008dbc:	1100492e 	bgeu	r2,r4,2008ee4 <_malloc_r+0x5e8>
 2008dc0:	00801504 	movi	r2,84
 2008dc4:	11005c36 	bltu	r2,r4,2008f38 <_malloc_r+0x63c>
 2008dc8:	8808d33a 	srli	r4,r17,12
 2008dcc:	21001b84 	addi	r4,r4,110
 2008dd0:	210b883a 	add	r5,r4,r4
 2008dd4:	003f1006 	br	2008a18 <_malloc_r+0x11c>
 2008dd8:	1006d27a 	srli	r3,r2,9
 2008ddc:	01400104 	movi	r5,4
 2008de0:	28c0432e 	bgeu	r5,r3,2008ef0 <_malloc_r+0x5f4>
 2008de4:	01400504 	movi	r5,20
 2008de8:	28c07036 	bltu	r5,r3,2008fac <_malloc_r+0x6b0>
 2008dec:	194016c4 	addi	r5,r3,91
 2008df0:	294d883a 	add	r6,r5,r5
 2008df4:	318d883a 	add	r6,r6,r6
 2008df8:	318d883a 	add	r6,r6,r6
 2008dfc:	998d883a 	add	r6,r19,r6
 2008e00:	30c00217 	ldw	r3,8(r6)
 2008e04:	01c080f4 	movhi	r7,515
 2008e08:	39c26d04 	addi	r7,r7,2484
 2008e0c:	19805726 	beq	r3,r6,2008f6c <_malloc_r+0x670>
 2008e10:	01ffff04 	movi	r7,-4
 2008e14:	19400117 	ldw	r5,4(r3)
 2008e18:	29ca703a 	and	r5,r5,r7
 2008e1c:	1140022e 	bgeu	r2,r5,2008e28 <_malloc_r+0x52c>
 2008e20:	18c00217 	ldw	r3,8(r3)
 2008e24:	30fffb1e 	bne	r6,r3,2008e14 <_malloc_r+0x518>
 2008e28:	19400317 	ldw	r5,12(r3)
 2008e2c:	98800117 	ldw	r2,4(r19)
 2008e30:	81400315 	stw	r5,12(r16)
 2008e34:	80c00215 	stw	r3,8(r16)
 2008e38:	2c000215 	stw	r16,8(r5)
 2008e3c:	1c000315 	stw	r16,12(r3)
 2008e40:	003f2b06 	br	2008af0 <_malloc_r+0x1f4>
 2008e44:	8445883a 	add	r2,r16,r17
 2008e48:	8c400054 	ori	r17,r17,1
 2008e4c:	18800515 	stw	r2,20(r3)
 2008e50:	18800415 	stw	r2,16(r3)
 2008e54:	29000054 	ori	r4,r5,1
 2008e58:	1147883a 	add	r3,r2,r5
 2008e5c:	84400115 	stw	r17,4(r16)
 2008e60:	11000115 	stw	r4,4(r2)
 2008e64:	12400315 	stw	r9,12(r2)
 2008e68:	12400215 	stw	r9,8(r2)
 2008e6c:	19400015 	stw	r5,0(r3)
 2008e70:	9009883a 	mov	r4,r18
 2008e74:	20115740 	call	2011574 <__malloc_unlock>
 2008e78:	80800204 	addi	r2,r16,8
 2008e7c:	003ecd06 	br	20089b4 <_malloc_r+0xb8>
 2008e80:	18800117 	ldw	r2,4(r3)
 2008e84:	003f1a06 	br	2008af0 <_malloc_r+0x1f4>
 2008e88:	5ac00044 	addi	r11,r11,1
 2008e8c:	588000cc 	andi	r2,r11,3
 2008e90:	52800204 	addi	r10,r10,8
 2008e94:	103f2e1e 	bne	r2,zero,2008b50 <_malloc_r+0x254>
 2008e98:	20c000cc 	andi	r3,r4,3
 2008e9c:	60bffe04 	addi	r2,r12,-8
 2008ea0:	18006f26 	beq	r3,zero,2009060 <_malloc_r+0x764>
 2008ea4:	63000017 	ldw	r12,0(r12)
 2008ea8:	213fffc4 	addi	r4,r4,-1
 2008eac:	60bffa26 	beq	r12,r2,2008e98 <_malloc_r+0x59c>
 2008eb0:	98800117 	ldw	r2,4(r19)
 2008eb4:	294b883a 	add	r5,r5,r5
 2008eb8:	117f5a36 	bltu	r2,r5,2008c24 <_malloc_r+0x328>
 2008ebc:	283f5926 	beq	r5,zero,2008c24 <_malloc_r+0x328>
 2008ec0:	1146703a 	and	r3,r2,r5
 2008ec4:	18001626 	beq	r3,zero,2008f20 <_malloc_r+0x624>
 2008ec8:	5809883a 	mov	r4,r11
 2008ecc:	003f1a06 	br	2008b38 <_malloc_r+0x23c>
 2008ed0:	80800204 	addi	r2,r16,8
 2008ed4:	84000517 	ldw	r16,20(r16)
 2008ed8:	143ea81e 	bne	r2,r16,200897c <_malloc_r+0x80>
 2008edc:	21000084 	addi	r4,r4,2
 2008ee0:	003ee306 	br	2008a70 <_malloc_r+0x174>
 2008ee4:	210016c4 	addi	r4,r4,91
 2008ee8:	210b883a 	add	r5,r4,r4
 2008eec:	003eca06 	br	2008a18 <_malloc_r+0x11c>
 2008ef0:	100ad1ba 	srli	r5,r2,6
 2008ef4:	29400e04 	addi	r5,r5,56
 2008ef8:	294d883a 	add	r6,r5,r5
 2008efc:	003fbd06 	br	2008df4 <_malloc_r+0x4f8>
 2008f00:	84ff6026 	beq	r16,r19,2008c84 <_malloc_r+0x388>
 2008f04:	008080f4 	movhi	r2,515
 2008f08:	10826d04 	addi	r2,r2,2484
 2008f0c:	14000217 	ldw	r16,8(r2)
 2008f10:	00bfff04 	movi	r2,-4
 2008f14:	80c00117 	ldw	r3,4(r16)
 2008f18:	1886703a 	and	r3,r3,r2
 2008f1c:	003f9406 	br	2008d70 <_malloc_r+0x474>
 2008f20:	294b883a 	add	r5,r5,r5
 2008f24:	1146703a 	and	r3,r2,r5
 2008f28:	5ac00104 	addi	r11,r11,4
 2008f2c:	183ffc26 	beq	r3,zero,2008f20 <_malloc_r+0x624>
 2008f30:	5809883a 	mov	r4,r11
 2008f34:	003f0006 	br	2008b38 <_malloc_r+0x23c>
 2008f38:	00805504 	movi	r2,340
 2008f3c:	11001336 	bltu	r2,r4,2008f8c <_malloc_r+0x690>
 2008f40:	8808d3fa 	srli	r4,r17,15
 2008f44:	21001dc4 	addi	r4,r4,119
 2008f48:	210b883a 	add	r5,r4,r4
 2008f4c:	003eb206 	br	2008a18 <_malloc_r+0x11c>
 2008f50:	00840004 	movi	r2,4096
 2008f54:	003f5d06 	br	2008ccc <_malloc_r+0x3d0>
 2008f58:	00800044 	movi	r2,1
 2008f5c:	a0800115 	stw	r2,4(r20)
 2008f60:	a021883a 	mov	r16,r20
 2008f64:	0007883a 	mov	r3,zero
 2008f68:	003f8106 	br	2008d70 <_malloc_r+0x474>
 2008f6c:	280bd0ba 	srai	r5,r5,2
 2008f70:	01800044 	movi	r6,1
 2008f74:	38800117 	ldw	r2,4(r7)
 2008f78:	314c983a 	sll	r6,r6,r5
 2008f7c:	180b883a 	mov	r5,r3
 2008f80:	3084b03a 	or	r2,r6,r2
 2008f84:	38800115 	stw	r2,4(r7)
 2008f88:	003fa906 	br	2008e30 <_malloc_r+0x534>
 2008f8c:	00815504 	movi	r2,1364
 2008f90:	11001836 	bltu	r2,r4,2008ff4 <_malloc_r+0x6f8>
 2008f94:	8808d4ba 	srli	r4,r17,18
 2008f98:	21001f04 	addi	r4,r4,124
 2008f9c:	210b883a 	add	r5,r4,r4
 2008fa0:	003e9d06 	br	2008a18 <_malloc_r+0x11c>
 2008fa4:	bdc00404 	addi	r23,r23,16
 2008fa8:	003f2f06 	br	2008c68 <_malloc_r+0x36c>
 2008fac:	01401504 	movi	r5,84
 2008fb0:	28c01f36 	bltu	r5,r3,2009030 <_malloc_r+0x734>
 2008fb4:	100ad33a 	srli	r5,r2,12
 2008fb8:	29401b84 	addi	r5,r5,110
 2008fbc:	294d883a 	add	r6,r5,r5
 2008fc0:	003f8c06 	br	2008df4 <_malloc_r+0x4f8>
 2008fc4:	9c000217 	ldw	r16,8(r19)
 2008fc8:	00bfff04 	movi	r2,-4
 2008fcc:	80c00117 	ldw	r3,4(r16)
 2008fd0:	1886703a 	and	r3,r3,r2
 2008fd4:	003f6606 	br	2008d70 <_malloc_r+0x474>
 2008fd8:	e0c3ffcc 	andi	r3,fp,4095
 2008fdc:	183f2f1e 	bne	r3,zero,2008c9c <_malloc_r+0x3a0>
 2008fe0:	98c00217 	ldw	r3,8(r19)
 2008fe4:	bd49883a 	add	r4,r23,r21
 2008fe8:	21000054 	ori	r4,r4,1
 2008fec:	19000115 	stw	r4,4(r3)
 2008ff0:	003f5506 	br	2008d48 <_malloc_r+0x44c>
 2008ff4:	01403f04 	movi	r5,252
 2008ff8:	01001f84 	movi	r4,126
 2008ffc:	003e8606 	br	2008a18 <_malloc_r+0x11c>
 2009000:	9009883a 	mov	r4,r18
 2009004:	81400204 	addi	r5,r16,8
 2009008:	200d49c0 	call	200d49c <_free_r>
 200900c:	008080f4 	movhi	r2,515
 2009010:	10884804 	addi	r2,r2,8480
 2009014:	10800017 	ldw	r2,0(r2)
 2009018:	003f4b06 	br	2008d48 <_malloc_r+0x44c>
 200901c:	00c00044 	movi	r3,1
 2009020:	002f883a 	mov	r23,zero
 2009024:	003f3406 	br	2008cf8 <_malloc_r+0x3fc>
 2009028:	d5200515 	stw	r20,-32748(gp)
 200902c:	003f2106 	br	2008cb4 <_malloc_r+0x3b8>
 2009030:	01405504 	movi	r5,340
 2009034:	28c00436 	bltu	r5,r3,2009048 <_malloc_r+0x74c>
 2009038:	100ad3fa 	srli	r5,r2,15
 200903c:	29401dc4 	addi	r5,r5,119
 2009040:	294d883a 	add	r6,r5,r5
 2009044:	003f6b06 	br	2008df4 <_malloc_r+0x4f8>
 2009048:	01415504 	movi	r5,1364
 200904c:	28c00936 	bltu	r5,r3,2009074 <_malloc_r+0x778>
 2009050:	100ad4ba 	srli	r5,r2,18
 2009054:	29401f04 	addi	r5,r5,124
 2009058:	294d883a 	add	r6,r5,r5
 200905c:	003f6506 	br	2008df4 <_malloc_r+0x4f8>
 2009060:	98800117 	ldw	r2,4(r19)
 2009064:	0146303a 	nor	r3,zero,r5
 2009068:	1884703a 	and	r2,r3,r2
 200906c:	98800115 	stw	r2,4(r19)
 2009070:	003f9006 	br	2008eb4 <_malloc_r+0x5b8>
 2009074:	01803f04 	movi	r6,252
 2009078:	01401f84 	movi	r5,126
 200907c:	003f5d06 	br	2008df4 <_malloc_r+0x4f8>

02009080 <memcpy>:
 2009080:	00c003c4 	movi	r3,15
 2009084:	2005883a 	mov	r2,r4
 2009088:	3009883a 	mov	r4,r6
 200908c:	1980032e 	bgeu	r3,r6,200909c <memcpy+0x1c>
 2009090:	2886b03a 	or	r3,r5,r2
 2009094:	18c000cc 	andi	r3,r3,3
 2009098:	18000926 	beq	r3,zero,20090c0 <memcpy+0x40>
 200909c:	1007883a 	mov	r3,r2
 20090a0:	290f883a 	add	r7,r5,r4
 20090a4:	20000526 	beq	r4,zero,20090bc <memcpy+0x3c>
 20090a8:	29800003 	ldbu	r6,0(r5)
 20090ac:	18c00044 	addi	r3,r3,1
 20090b0:	29400044 	addi	r5,r5,1
 20090b4:	19bfffc5 	stb	r6,-1(r3)
 20090b8:	29fffb1e 	bne	r5,r7,20090a8 <memcpy+0x28>
 20090bc:	f800283a 	ret
 20090c0:	327ffc04 	addi	r9,r6,-16
 20090c4:	4812d13a 	srli	r9,r9,4
 20090c8:	11000404 	addi	r4,r2,16
 20090cc:	1007883a 	mov	r3,r2
 20090d0:	4810913a 	slli	r8,r9,4
 20090d4:	280f883a 	mov	r7,r5
 20090d8:	2209883a 	add	r4,r4,r8
 20090dc:	3a000017 	ldw	r8,0(r7)
 20090e0:	18c00404 	addi	r3,r3,16
 20090e4:	39c00404 	addi	r7,r7,16
 20090e8:	1a3ffc15 	stw	r8,-16(r3)
 20090ec:	3a3ffd17 	ldw	r8,-12(r7)
 20090f0:	1a3ffd15 	stw	r8,-12(r3)
 20090f4:	3a3ffe17 	ldw	r8,-8(r7)
 20090f8:	1a3ffe15 	stw	r8,-8(r3)
 20090fc:	3a3fff17 	ldw	r8,-4(r7)
 2009100:	1a3fff15 	stw	r8,-4(r3)
 2009104:	193ff51e 	bne	r3,r4,20090dc <memcpy+0x5c>
 2009108:	49c00044 	addi	r7,r9,1
 200910c:	380e913a 	slli	r7,r7,4
 2009110:	310003cc 	andi	r4,r6,15
 2009114:	018000c4 	movi	r6,3
 2009118:	11c7883a 	add	r3,r2,r7
 200911c:	29cb883a 	add	r5,r5,r7
 2009120:	313fdf2e 	bgeu	r6,r4,20090a0 <memcpy+0x20>
 2009124:	213fff04 	addi	r4,r4,-4
 2009128:	2014d0ba 	srli	r10,r4,2
 200912c:	1a400104 	addi	r9,r3,4
 2009130:	180d883a 	mov	r6,r3
 2009134:	528f883a 	add	r7,r10,r10
 2009138:	39cf883a 	add	r7,r7,r7
 200913c:	49d3883a 	add	r9,r9,r7
 2009140:	280f883a 	mov	r7,r5
 2009144:	3a000017 	ldw	r8,0(r7)
 2009148:	31800104 	addi	r6,r6,4
 200914c:	39c00104 	addi	r7,r7,4
 2009150:	323fff15 	stw	r8,-4(r6)
 2009154:	327ffb1e 	bne	r6,r9,2009144 <memcpy+0xc4>
 2009158:	51800044 	addi	r6,r10,1
 200915c:	52bfff24 	muli	r10,r10,-4
 2009160:	318d883a 	add	r6,r6,r6
 2009164:	318d883a 	add	r6,r6,r6
 2009168:	5109883a 	add	r4,r10,r4
 200916c:	298b883a 	add	r5,r5,r6
 2009170:	1987883a 	add	r3,r3,r6
 2009174:	003fca06 	br	20090a0 <memcpy+0x20>

02009178 <memset>:
 2009178:	00c000c4 	movi	r3,3
 200917c:	2005883a 	mov	r2,r4
 2009180:	29403fcc 	andi	r5,r5,255
 2009184:	19802d2e 	bgeu	r3,r6,200923c <memset+0xc4>
 2009188:	20c6703a 	and	r3,r4,r3
 200918c:	18002e1e 	bne	r3,zero,2009248 <memset+0xd0>
 2009190:	2806923a 	slli	r3,r5,8
 2009194:	010003c4 	movi	r4,15
 2009198:	3011883a 	mov	r8,r6
 200919c:	1946b03a 	or	r3,r3,r5
 20091a0:	180e943a 	slli	r7,r3,16
 20091a4:	38ceb03a 	or	r7,r7,r3
 20091a8:	1007883a 	mov	r3,r2
 20091ac:	21800f2e 	bgeu	r4,r6,20091ec <memset+0x74>
 20091b0:	19c00015 	stw	r7,0(r3)
 20091b4:	19c00115 	stw	r7,4(r3)
 20091b8:	19c00215 	stw	r7,8(r3)
 20091bc:	19c00315 	stw	r7,12(r3)
 20091c0:	423ffc04 	addi	r8,r8,-16
 20091c4:	18c00404 	addi	r3,r3,16
 20091c8:	223ff936 	bltu	r4,r8,20091b0 <memset+0x38>
 20091cc:	30fffc04 	addi	r3,r6,-16
 20091d0:	1806d13a 	srli	r3,r3,4
 20091d4:	318003cc 	andi	r6,r6,15
 20091d8:	010000c4 	movi	r4,3
 20091dc:	18c00044 	addi	r3,r3,1
 20091e0:	1806913a 	slli	r3,r3,4
 20091e4:	10c7883a 	add	r3,r2,r3
 20091e8:	21800e2e 	bgeu	r4,r6,2009224 <memset+0xac>
 20091ec:	1813883a 	mov	r9,r3
 20091f0:	3011883a 	mov	r8,r6
 20091f4:	010000c4 	movi	r4,3
 20091f8:	49c00015 	stw	r7,0(r9)
 20091fc:	423fff04 	addi	r8,r8,-4
 2009200:	4a400104 	addi	r9,r9,4
 2009204:	223ffc36 	bltu	r4,r8,20091f8 <memset+0x80>
 2009208:	313fff04 	addi	r4,r6,-4
 200920c:	2008d0ba 	srli	r4,r4,2
 2009210:	318000cc 	andi	r6,r6,3
 2009214:	21000044 	addi	r4,r4,1
 2009218:	2109883a 	add	r4,r4,r4
 200921c:	2109883a 	add	r4,r4,r4
 2009220:	1907883a 	add	r3,r3,r4
 2009224:	30000a26 	beq	r6,zero,2009250 <memset+0xd8>
 2009228:	198d883a 	add	r6,r3,r6
 200922c:	19400005 	stb	r5,0(r3)
 2009230:	18c00044 	addi	r3,r3,1
 2009234:	19bffd1e 	bne	r3,r6,200922c <memset+0xb4>
 2009238:	f800283a 	ret
 200923c:	2007883a 	mov	r3,r4
 2009240:	303ff91e 	bne	r6,zero,2009228 <memset+0xb0>
 2009244:	00000206 	br	2009250 <memset+0xd8>
 2009248:	2007883a 	mov	r3,r4
 200924c:	003ff606 	br	2009228 <memset+0xb0>
 2009250:	f800283a 	ret

02009254 <_printf_r>:
 2009254:	defffd04 	addi	sp,sp,-12
 2009258:	dfc00015 	stw	ra,0(sp)
 200925c:	d9800115 	stw	r6,4(sp)
 2009260:	d9c00215 	stw	r7,8(sp)
 2009264:	280d883a 	mov	r6,r5
 2009268:	21400217 	ldw	r5,8(r4)
 200926c:	d9c00104 	addi	r7,sp,4
 2009270:	20095d00 	call	20095d0 <___vfprintf_internal_r>
 2009274:	dfc00017 	ldw	ra,0(sp)
 2009278:	dec00304 	addi	sp,sp,12
 200927c:	f800283a 	ret

02009280 <printf>:
 2009280:	defffc04 	addi	sp,sp,-16
 2009284:	dfc00015 	stw	ra,0(sp)
 2009288:	d9400115 	stw	r5,4(sp)
 200928c:	d9800215 	stw	r6,8(sp)
 2009290:	d9c00315 	stw	r7,12(sp)
 2009294:	008080f4 	movhi	r2,515
 2009298:	10882a04 	addi	r2,r2,8360
 200929c:	10800017 	ldw	r2,0(r2)
 20092a0:	200b883a 	mov	r5,r4
 20092a4:	d9800104 	addi	r6,sp,4
 20092a8:	11000217 	ldw	r4,8(r2)
 20092ac:	200b3c80 	call	200b3c8 <__vfprintf_internal>
 20092b0:	dfc00017 	ldw	ra,0(sp)
 20092b4:	dec00404 	addi	sp,sp,16
 20092b8:	f800283a 	ret

020092bc <_puts_r>:
 20092bc:	defff604 	addi	sp,sp,-40
 20092c0:	dc400815 	stw	r17,32(sp)
 20092c4:	2023883a 	mov	r17,r4
 20092c8:	2809883a 	mov	r4,r5
 20092cc:	dc000715 	stw	r16,28(sp)
 20092d0:	dfc00915 	stw	ra,36(sp)
 20092d4:	2821883a 	mov	r16,r5
 20092d8:	20095100 	call	2009510 <strlen>
 20092dc:	10c00044 	addi	r3,r2,1
 20092e0:	d8800115 	stw	r2,4(sp)
 20092e4:	89400217 	ldw	r5,8(r17)
 20092e8:	008080f4 	movhi	r2,515
 20092ec:	10b9f804 	addi	r2,r2,-6176
 20092f0:	d8800215 	stw	r2,8(sp)
 20092f4:	00800044 	movi	r2,1
 20092f8:	d8800315 	stw	r2,12(sp)
 20092fc:	8809883a 	mov	r4,r17
 2009300:	00800084 	movi	r2,2
 2009304:	d9800404 	addi	r6,sp,16
 2009308:	dc000015 	stw	r16,0(sp)
 200930c:	d8c00615 	stw	r3,24(sp)
 2009310:	dec00415 	stw	sp,16(sp)
 2009314:	d8800515 	stw	r2,20(sp)
 2009318:	200d76c0 	call	200d76c <__sfvwrite_r>
 200931c:	1000061e 	bne	r2,zero,2009338 <_puts_r+0x7c>
 2009320:	00800284 	movi	r2,10
 2009324:	dfc00917 	ldw	ra,36(sp)
 2009328:	dc400817 	ldw	r17,32(sp)
 200932c:	dc000717 	ldw	r16,28(sp)
 2009330:	dec00a04 	addi	sp,sp,40
 2009334:	f800283a 	ret
 2009338:	00bfffc4 	movi	r2,-1
 200933c:	003ff906 	br	2009324 <_puts_r+0x68>

02009340 <puts>:
 2009340:	008080f4 	movhi	r2,515
 2009344:	10882a04 	addi	r2,r2,8360
 2009348:	200b883a 	mov	r5,r4
 200934c:	11000017 	ldw	r4,0(r2)
 2009350:	20092bc1 	jmpi	20092bc <_puts_r>

02009354 <_sbrk_r>:
 2009354:	defffd04 	addi	sp,sp,-12
 2009358:	dc400115 	stw	r17,4(sp)
 200935c:	dc000015 	stw	r16,0(sp)
 2009360:	2023883a 	mov	r17,r4
 2009364:	040080f4 	movhi	r16,515
 2009368:	84083e04 	addi	r16,r16,8440
 200936c:	2809883a 	mov	r4,r5
 2009370:	dfc00215 	stw	ra,8(sp)
 2009374:	80000015 	stw	zero,0(r16)
 2009378:	20117340 	call	2011734 <sbrk>
 200937c:	00ffffc4 	movi	r3,-1
 2009380:	10c00526 	beq	r2,r3,2009398 <_sbrk_r+0x44>
 2009384:	dfc00217 	ldw	ra,8(sp)
 2009388:	dc400117 	ldw	r17,4(sp)
 200938c:	dc000017 	ldw	r16,0(sp)
 2009390:	dec00304 	addi	sp,sp,12
 2009394:	f800283a 	ret
 2009398:	80c00017 	ldw	r3,0(r16)
 200939c:	183ff926 	beq	r3,zero,2009384 <_sbrk_r+0x30>
 20093a0:	88c00015 	stw	r3,0(r17)
 20093a4:	dfc00217 	ldw	ra,8(sp)
 20093a8:	dc400117 	ldw	r17,4(sp)
 20093ac:	dc000017 	ldw	r16,0(sp)
 20093b0:	dec00304 	addi	sp,sp,12
 20093b4:	f800283a 	ret

020093b8 <_sprintf_r>:
 20093b8:	deffe704 	addi	sp,sp,-100
 20093bc:	2807883a 	mov	r3,r5
 20093c0:	dfc01715 	stw	ra,92(sp)
 20093c4:	d9c01815 	stw	r7,96(sp)
 20093c8:	00a00034 	movhi	r2,32768
 20093cc:	10bfffc4 	addi	r2,r2,-1
 20093d0:	02008204 	movi	r8,520
 20093d4:	d8800215 	stw	r2,8(sp)
 20093d8:	d8800515 	stw	r2,20(sp)
 20093dc:	d80b883a 	mov	r5,sp
 20093e0:	d9c01804 	addi	r7,sp,96
 20093e4:	00bfffc4 	movi	r2,-1
 20093e8:	d8c00015 	stw	r3,0(sp)
 20093ec:	d8c00415 	stw	r3,16(sp)
 20093f0:	da00030d 	sth	r8,12(sp)
 20093f4:	d880038d 	sth	r2,14(sp)
 20093f8:	20095d00 	call	20095d0 <___vfprintf_internal_r>
 20093fc:	d8c00017 	ldw	r3,0(sp)
 2009400:	18000005 	stb	zero,0(r3)
 2009404:	dfc01717 	ldw	ra,92(sp)
 2009408:	dec01904 	addi	sp,sp,100
 200940c:	f800283a 	ret

02009410 <sprintf>:
 2009410:	deffe604 	addi	sp,sp,-104
 2009414:	2007883a 	mov	r3,r4
 2009418:	dfc01715 	stw	ra,92(sp)
 200941c:	d9801815 	stw	r6,96(sp)
 2009420:	d9c01915 	stw	r7,100(sp)
 2009424:	008080f4 	movhi	r2,515
 2009428:	10882a04 	addi	r2,r2,8360
 200942c:	11000017 	ldw	r4,0(r2)
 2009430:	00a00034 	movhi	r2,32768
 2009434:	10bfffc4 	addi	r2,r2,-1
 2009438:	280d883a 	mov	r6,r5
 200943c:	02008204 	movi	r8,520
 2009440:	d8800215 	stw	r2,8(sp)
 2009444:	d8800515 	stw	r2,20(sp)
 2009448:	d80b883a 	mov	r5,sp
 200944c:	d9c01804 	addi	r7,sp,96
 2009450:	00bfffc4 	movi	r2,-1
 2009454:	d8c00015 	stw	r3,0(sp)
 2009458:	d8c00415 	stw	r3,16(sp)
 200945c:	da00030d 	sth	r8,12(sp)
 2009460:	d880038d 	sth	r2,14(sp)
 2009464:	20095d00 	call	20095d0 <___vfprintf_internal_r>
 2009468:	d8c00017 	ldw	r3,0(sp)
 200946c:	18000005 	stb	zero,0(r3)
 2009470:	dfc01717 	ldw	ra,92(sp)
 2009474:	dec01a04 	addi	sp,sp,104
 2009478:	f800283a 	ret

0200947c <strcpy>:
 200947c:	2906b03a 	or	r3,r5,r4
 2009480:	18c000cc 	andi	r3,r3,3
 2009484:	2005883a 	mov	r2,r4
 2009488:	18001a1e 	bne	r3,zero,20094f4 <strcpy+0x78>
 200948c:	29800017 	ldw	r6,0(r5)
 2009490:	02bfbff4 	movhi	r10,65279
 2009494:	52bfbfc4 	addi	r10,r10,-257
 2009498:	02602074 	movhi	r9,32897
 200949c:	4a602004 	addi	r9,r9,-32640
 20094a0:	0188303a 	nor	r4,zero,r6
 20094a4:	3287883a 	add	r3,r6,r10
 20094a8:	20c6703a 	and	r3,r4,r3
 20094ac:	1a46703a 	and	r3,r3,r9
 20094b0:	1800101e 	bne	r3,zero,20094f4 <strcpy+0x78>
 20094b4:	1007883a 	mov	r3,r2
 20094b8:	19800015 	stw	r6,0(r3)
 20094bc:	29400104 	addi	r5,r5,4
 20094c0:	29800017 	ldw	r6,0(r5)
 20094c4:	18c00104 	addi	r3,r3,4
 20094c8:	0190303a 	nor	r8,zero,r6
 20094cc:	328f883a 	add	r7,r6,r10
 20094d0:	41ce703a 	and	r7,r8,r7
 20094d4:	3a4e703a 	and	r7,r7,r9
 20094d8:	383ff726 	beq	r7,zero,20094b8 <strcpy+0x3c>
 20094dc:	29800007 	ldb	r6,0(r5)
 20094e0:	18c00044 	addi	r3,r3,1
 20094e4:	29400044 	addi	r5,r5,1
 20094e8:	19bfffc5 	stb	r6,-1(r3)
 20094ec:	3000021e 	bne	r6,zero,20094f8 <strcpy+0x7c>
 20094f0:	f800283a 	ret
 20094f4:	1007883a 	mov	r3,r2
 20094f8:	29800007 	ldb	r6,0(r5)
 20094fc:	18c00044 	addi	r3,r3,1
 2009500:	29400044 	addi	r5,r5,1
 2009504:	19bfffc5 	stb	r6,-1(r3)
 2009508:	303ffb1e 	bne	r6,zero,20094f8 <strcpy+0x7c>
 200950c:	f800283a 	ret

02009510 <strlen>:
 2009510:	208000cc 	andi	r2,r4,3
 2009514:	10001f1e 	bne	r2,zero,2009594 <strlen+0x84>
 2009518:	20800017 	ldw	r2,0(r4)
 200951c:	01ffbff4 	movhi	r7,65279
 2009520:	39ffbfc4 	addi	r7,r7,-257
 2009524:	01a02074 	movhi	r6,32897
 2009528:	31a02004 	addi	r6,r6,-32640
 200952c:	11c7883a 	add	r3,r2,r7
 2009530:	0084303a 	nor	r2,zero,r2
 2009534:	1886703a 	and	r3,r3,r2
 2009538:	1986703a 	and	r3,r3,r6
 200953c:	2005883a 	mov	r2,r4
 2009540:	1800101e 	bne	r3,zero,2009584 <strlen+0x74>
 2009544:	10800104 	addi	r2,r2,4
 2009548:	10c00017 	ldw	r3,0(r2)
 200954c:	19cb883a 	add	r5,r3,r7
 2009550:	00c6303a 	nor	r3,zero,r3
 2009554:	28c6703a 	and	r3,r5,r3
 2009558:	1986703a 	and	r3,r3,r6
 200955c:	1800091e 	bne	r3,zero,2009584 <strlen+0x74>
 2009560:	10800104 	addi	r2,r2,4
 2009564:	10c00017 	ldw	r3,0(r2)
 2009568:	19cb883a 	add	r5,r3,r7
 200956c:	00c6303a 	nor	r3,zero,r3
 2009570:	28c6703a 	and	r3,r5,r3
 2009574:	1986703a 	and	r3,r3,r6
 2009578:	183ff226 	beq	r3,zero,2009544 <strlen+0x34>
 200957c:	00000106 	br	2009584 <strlen+0x74>
 2009580:	10800044 	addi	r2,r2,1
 2009584:	10c00007 	ldb	r3,0(r2)
 2009588:	183ffd1e 	bne	r3,zero,2009580 <strlen+0x70>
 200958c:	1105c83a 	sub	r2,r2,r4
 2009590:	f800283a 	ret
 2009594:	2005883a 	mov	r2,r4
 2009598:	003ffa06 	br	2009584 <strlen+0x74>

0200959c <__sprint_r>:
 200959c:	30800217 	ldw	r2,8(r6)
 20095a0:	defffe04 	addi	sp,sp,-8
 20095a4:	dc000015 	stw	r16,0(sp)
 20095a8:	dfc00115 	stw	ra,4(sp)
 20095ac:	3021883a 	mov	r16,r6
 20095b0:	10000226 	beq	r2,zero,20095bc <__sprint_r+0x20>
 20095b4:	200d76c0 	call	200d76c <__sfvwrite_r>
 20095b8:	80000215 	stw	zero,8(r16)
 20095bc:	80000115 	stw	zero,4(r16)
 20095c0:	dfc00117 	ldw	ra,4(sp)
 20095c4:	dc000017 	ldw	r16,0(sp)
 20095c8:	dec00204 	addi	sp,sp,8
 20095cc:	f800283a 	ret

020095d0 <___vfprintf_internal_r>:
 20095d0:	defeb904 	addi	sp,sp,-1308
 20095d4:	dc013d15 	stw	r16,1268(sp)
 20095d8:	d9013015 	stw	r4,1216(sp)
 20095dc:	dfc14615 	stw	ra,1304(sp)
 20095e0:	df014515 	stw	fp,1300(sp)
 20095e4:	ddc14415 	stw	r23,1296(sp)
 20095e8:	dd814315 	stw	r22,1292(sp)
 20095ec:	dd414215 	stw	r21,1288(sp)
 20095f0:	dd014115 	stw	r20,1284(sp)
 20095f4:	dcc14015 	stw	r19,1280(sp)
 20095f8:	dc813f15 	stw	r18,1276(sp)
 20095fc:	dc413e15 	stw	r17,1272(sp)
 2009600:	d9412915 	stw	r5,1188(sp)
 2009604:	3021883a 	mov	r16,r6
 2009608:	d9c12d15 	stw	r7,1204(sp)
 200960c:	200de580 	call	200de58 <_localeconv_r>
 2009610:	10800017 	ldw	r2,0(r2)
 2009614:	d9013017 	ldw	r4,1216(sp)
 2009618:	d8013315 	stw	zero,1228(sp)
 200961c:	d8813715 	stw	r2,1244(sp)
 2009620:	d8013415 	stw	zero,1232(sp)
 2009624:	20000226 	beq	r4,zero,2009630 <___vfprintf_internal_r+0x60>
 2009628:	20800e17 	ldw	r2,56(r4)
 200962c:	10019826 	beq	r2,zero,2009c90 <___vfprintf_internal_r+0x6c0>
 2009630:	da012917 	ldw	r8,1188(sp)
 2009634:	4080030b 	ldhu	r2,12(r8)
 2009638:	10c0020c 	andi	r3,r2,8
 200963c:	18ffffcc 	andi	r3,r3,65535
 2009640:	18e0001c 	xori	r3,r3,32768
 2009644:	18e00004 	addi	r3,r3,-32768
 2009648:	18013a26 	beq	r3,zero,2009b34 <___vfprintf_internal_r+0x564>
 200964c:	40c00417 	ldw	r3,16(r8)
 2009650:	18013826 	beq	r3,zero,2009b34 <___vfprintf_internal_r+0x564>
 2009654:	1100068c 	andi	r4,r2,26
 2009658:	00c00284 	movi	r3,10
 200965c:	20c13e26 	beq	r4,r3,2009b58 <___vfprintf_internal_r+0x588>
 2009660:	da010dc4 	addi	r8,sp,1079
 2009664:	d8800404 	addi	r2,sp,16
 2009668:	da012615 	stw	r8,1176(sp)
 200966c:	d8811b15 	stw	r2,1132(sp)
 2009670:	1013883a 	mov	r9,r2
 2009674:	d8812617 	ldw	r2,1176(sp)
 2009678:	da010e04 	addi	r8,sp,1080
 200967c:	dc413017 	ldw	r17,1216(sp)
 2009680:	da012715 	stw	r8,1180(sp)
 2009684:	4091c83a 	sub	r8,r8,r2
 2009688:	d8011d15 	stw	zero,1140(sp)
 200968c:	d8011c15 	stw	zero,1136(sp)
 2009690:	802b883a 	mov	r21,r16
 2009694:	d8013215 	stw	zero,1224(sp)
 2009698:	d8013615 	stw	zero,1240(sp)
 200969c:	d8013515 	stw	zero,1236(sp)
 20096a0:	d8012c15 	stw	zero,1200(sp)
 20096a4:	da013915 	stw	r8,1252(sp)
 20096a8:	a8800007 	ldb	r2,0(r21)
 20096ac:	1002ec26 	beq	r2,zero,200a260 <___vfprintf_internal_r+0xc90>
 20096b0:	00c00944 	movi	r3,37
 20096b4:	a825883a 	mov	r18,r21
 20096b8:	10c0021e 	bne	r2,r3,20096c4 <___vfprintf_internal_r+0xf4>
 20096bc:	00001406 	br	2009710 <___vfprintf_internal_r+0x140>
 20096c0:	10c00326 	beq	r2,r3,20096d0 <___vfprintf_internal_r+0x100>
 20096c4:	94800044 	addi	r18,r18,1
 20096c8:	90800007 	ldb	r2,0(r18)
 20096cc:	103ffc1e 	bne	r2,zero,20096c0 <___vfprintf_internal_r+0xf0>
 20096d0:	9561c83a 	sub	r16,r18,r21
 20096d4:	80000e26 	beq	r16,zero,2009710 <___vfprintf_internal_r+0x140>
 20096d8:	da011d17 	ldw	r8,1140(sp)
 20096dc:	d8c11c17 	ldw	r3,1136(sp)
 20096e0:	4d400015 	stw	r21,0(r9)
 20096e4:	4c000115 	stw	r16,4(r9)
 20096e8:	4411883a 	add	r8,r8,r16
 20096ec:	18c00044 	addi	r3,r3,1
 20096f0:	da011d15 	stw	r8,1140(sp)
 20096f4:	d8c11c15 	stw	r3,1136(sp)
 20096f8:	008001c4 	movi	r2,7
 20096fc:	10c15d16 	blt	r2,r3,2009c74 <___vfprintf_internal_r+0x6a4>
 2009700:	4a400204 	addi	r9,r9,8
 2009704:	d8812c17 	ldw	r2,1200(sp)
 2009708:	1405883a 	add	r2,r2,r16
 200970c:	d8812c15 	stw	r2,1200(sp)
 2009710:	90800007 	ldb	r2,0(r18)
 2009714:	10013b26 	beq	r2,zero,2009c04 <___vfprintf_internal_r+0x634>
 2009718:	95400044 	addi	r21,r18,1
 200971c:	94800047 	ldb	r18,1(r18)
 2009720:	d8012585 	stb	zero,1174(sp)
 2009724:	073fffc4 	movi	fp,-1
 2009728:	d8012e15 	stw	zero,1208(sp)
 200972c:	0021883a 	mov	r16,zero
 2009730:	00c01604 	movi	r3,88
 2009734:	01400244 	movi	r5,9
 2009738:	02800a84 	movi	r10,42
 200973c:	01c01b04 	movi	r7,108
 2009740:	01800ac4 	movi	r6,43
 2009744:	02c00804 	movi	r11,32
 2009748:	ad400044 	addi	r21,r21,1
 200974c:	90bff804 	addi	r2,r18,-32
 2009750:	1880092e 	bgeu	r3,r2,2009778 <___vfprintf_internal_r+0x1a8>
 2009754:	90012b26 	beq	r18,zero,2009c04 <___vfprintf_internal_r+0x634>
 2009758:	00c00044 	movi	r3,1
 200975c:	d8c12815 	stw	r3,1184(sp)
 2009760:	dc810405 	stb	r18,1040(sp)
 2009764:	d8012585 	stb	zero,1174(sp)
 2009768:	d8c12b15 	stw	r3,1196(sp)
 200976c:	dcc10404 	addi	r19,sp,1040
 2009770:	d8013115 	stw	zero,1220(sp)
 2009774:	00008806 	br	2009998 <___vfprintf_internal_r+0x3c8>
 2009778:	1085883a 	add	r2,r2,r2
 200977c:	1085883a 	add	r2,r2,r2
 2009780:	01008074 	movhi	r4,513
 2009784:	2125e504 	addi	r4,r4,-26732
 2009788:	1105883a 	add	r2,r2,r4
 200978c:	10800017 	ldw	r2,0(r2)
 2009790:	1000683a 	jmp	r2
 2009794:	02009d48 	cmpgei	r8,zero,629
 2009798:	02009754 	movui	r8,605
 200979c:	02009754 	movui	r8,605
 20097a0:	02009d5c 	xori	r8,zero,629
 20097a4:	02009754 	movui	r8,605
 20097a8:	02009754 	movui	r8,605
 20097ac:	02009754 	movui	r8,605
 20097b0:	02009754 	movui	r8,605
 20097b4:	02009754 	movui	r8,605
 20097b8:	02009754 	movui	r8,605
 20097bc:	02009e44 	movi	r8,633
 20097c0:	02009d00 	call	2009d0 <__alt_mem_sdram-0x1dff630>
 20097c4:	02009754 	movui	r8,605
 20097c8:	02009b28 	cmpgeui	r8,zero,620
 20097cc:	02009d0c 	andi	r8,zero,628
 20097d0:	02009754 	movui	r8,605
 20097d4:	02009d68 	cmpgeui	r8,zero,629
 20097d8:	02009e68 	cmpgeui	r8,zero,633
 20097dc:	02009e68 	cmpgeui	r8,zero,633
 20097e0:	02009e68 	cmpgeui	r8,zero,633
 20097e4:	02009e68 	cmpgeui	r8,zero,633
 20097e8:	02009e68 	cmpgeui	r8,zero,633
 20097ec:	02009e68 	cmpgeui	r8,zero,633
 20097f0:	02009e68 	cmpgeui	r8,zero,633
 20097f4:	02009e68 	cmpgeui	r8,zero,633
 20097f8:	02009e68 	cmpgeui	r8,zero,633
 20097fc:	02009754 	movui	r8,605
 2009800:	02009754 	movui	r8,605
 2009804:	02009754 	movui	r8,605
 2009808:	02009754 	movui	r8,605
 200980c:	02009754 	movui	r8,605
 2009810:	02009754 	movui	r8,605
 2009814:	02009754 	movui	r8,605
 2009818:	02009754 	movui	r8,605
 200981c:	02009754 	movui	r8,605
 2009820:	02009754 	movui	r8,605
 2009824:	02009ac4 	movi	r8,619
 2009828:	02009e90 	cmplti	r8,zero,634
 200982c:	02009754 	movui	r8,605
 2009830:	02009e90 	cmplti	r8,zero,634
 2009834:	02009754 	movui	r8,605
 2009838:	02009754 	movui	r8,605
 200983c:	02009754 	movui	r8,605
 2009840:	02009754 	movui	r8,605
 2009844:	0200a000 	call	200a00 <__alt_mem_sdram-0x1dff600>
 2009848:	02009754 	movui	r8,605
 200984c:	02009754 	movui	r8,605
 2009850:	02009a8c 	andi	r8,zero,618
 2009854:	02009754 	movui	r8,605
 2009858:	02009754 	movui	r8,605
 200985c:	02009754 	movui	r8,605
 2009860:	02009754 	movui	r8,605
 2009864:	02009754 	movui	r8,605
 2009868:	020098f8 	rdprs	r8,zero,611
 200986c:	02009754 	movui	r8,605
 2009870:	02009754 	movui	r8,605
 2009874:	02009d74 	movhi	r8,629
 2009878:	02009754 	movui	r8,605
 200987c:	02009754 	movui	r8,605
 2009880:	02009754 	movui	r8,605
 2009884:	02009754 	movui	r8,605
 2009888:	02009754 	movui	r8,605
 200988c:	02009754 	movui	r8,605
 2009890:	02009754 	movui	r8,605
 2009894:	02009754 	movui	r8,605
 2009898:	02009754 	movui	r8,605
 200989c:	02009754 	movui	r8,605
 20098a0:	02009de8 	cmpgeui	r8,zero,631
 20098a4:	02009ac8 	cmpgei	r8,zero,619
 20098a8:	02009e90 	cmplti	r8,zero,634
 20098ac:	02009e90 	cmplti	r8,zero,634
 20098b0:	02009e90 	cmplti	r8,zero,634
 20098b4:	02009dc8 	cmpgei	r8,zero,631
 20098b8:	02009ac8 	cmpgei	r8,zero,619
 20098bc:	02009754 	movui	r8,605
 20098c0:	02009754 	movui	r8,605
 20098c4:	02009dd4 	movui	r8,631
 20098c8:	02009754 	movui	r8,605
 20098cc:	02009e18 	cmpnei	r8,zero,632
 20098d0:	02009a90 	cmplti	r8,zero,618
 20098d4:	02009f18 	cmpnei	r8,zero,636
 20098d8:	02009f64 	muli	r8,zero,637
 20098dc:	02009754 	movui	r8,605
 20098e0:	02009f70 	cmpltui	r8,zero,637
 20098e4:	02009754 	movui	r8,605
 20098e8:	020098fc 	xorhi	r8,zero,611
 20098ec:	02009754 	movui	r8,605
 20098f0:	02009754 	movui	r8,605
 20098f4:	02009fcc 	andi	r8,zero,639
 20098f8:	84000414 	ori	r16,r16,16
 20098fc:	8080080c 	andi	r2,r16,32
 2009900:	1000f51e 	bne	r2,zero,2009cd8 <___vfprintf_internal_r+0x708>
 2009904:	8080040c 	andi	r2,r16,16
 2009908:	10042c26 	beq	r2,zero,200a9bc <___vfprintf_internal_r+0x13ec>
 200990c:	da012d17 	ldw	r8,1204(sp)
 2009910:	002d883a 	mov	r22,zero
 2009914:	00c00044 	movi	r3,1
 2009918:	45c00017 	ldw	r23,0(r8)
 200991c:	42000104 	addi	r8,r8,4
 2009920:	da012d15 	stw	r8,1204(sp)
 2009924:	b805883a 	mov	r2,r23
 2009928:	d8012585 	stb	zero,1174(sp)
 200992c:	e0000216 	blt	fp,zero,2009938 <___vfprintf_internal_r+0x368>
 2009930:	013fdfc4 	movi	r4,-129
 2009934:	8120703a 	and	r16,r16,r4
 2009938:	1002671e 	bne	r2,zero,200a2d8 <___vfprintf_internal_r+0xd08>
 200993c:	e002661e 	bne	fp,zero,200a2d8 <___vfprintf_internal_r+0xd08>
 2009940:	18c03fcc 	andi	r3,r3,255
 2009944:	1803561e 	bne	r3,zero,200a6a0 <___vfprintf_internal_r+0x10d0>
 2009948:	8080004c 	andi	r2,r16,1
 200994c:	10035426 	beq	r2,zero,200a6a0 <___vfprintf_internal_r+0x10d0>
 2009950:	da013917 	ldw	r8,1252(sp)
 2009954:	00800c04 	movi	r2,48
 2009958:	d8810dc5 	stb	r2,1079(sp)
 200995c:	da012b15 	stw	r8,1196(sp)
 2009960:	dcc10dc4 	addi	r19,sp,1079
 2009964:	d8812b17 	ldw	r2,1196(sp)
 2009968:	d8812815 	stw	r2,1184(sp)
 200996c:	1700010e 	bge	r2,fp,2009974 <___vfprintf_internal_r+0x3a4>
 2009970:	df012815 	stw	fp,1184(sp)
 2009974:	d8812583 	ldbu	r2,1174(sp)
 2009978:	df013115 	stw	fp,1220(sp)
 200997c:	10803fcc 	andi	r2,r2,255
 2009980:	1080201c 	xori	r2,r2,128
 2009984:	10bfe004 	addi	r2,r2,-128
 2009988:	10000326 	beq	r2,zero,2009998 <___vfprintf_internal_r+0x3c8>
 200998c:	da012817 	ldw	r8,1184(sp)
 2009990:	42000044 	addi	r8,r8,1
 2009994:	da012815 	stw	r8,1184(sp)
 2009998:	80c0008c 	andi	r3,r16,2
 200999c:	d8c12a15 	stw	r3,1192(sp)
 20099a0:	18000326 	beq	r3,zero,20099b0 <___vfprintf_internal_r+0x3e0>
 20099a4:	da012817 	ldw	r8,1184(sp)
 20099a8:	42000084 	addi	r8,r8,2
 20099ac:	da012815 	stw	r8,1184(sp)
 20099b0:	80c0210c 	andi	r3,r16,132
 20099b4:	d8c12f15 	stw	r3,1212(sp)
 20099b8:	1801941e 	bne	r3,zero,200a00c <___vfprintf_internal_r+0xa3c>
 20099bc:	da012e17 	ldw	r8,1208(sp)
 20099c0:	d8c12817 	ldw	r3,1184(sp)
 20099c4:	40edc83a 	sub	r22,r8,r3
 20099c8:	0581900e 	bge	zero,r22,200a00c <___vfprintf_internal_r+0xa3c>
 20099cc:	02800404 	movi	r10,16
 20099d0:	da011d17 	ldw	r8,1140(sp)
 20099d4:	d8c11c17 	ldw	r3,1136(sp)
 20099d8:	05c080f4 	movhi	r23,515
 20099dc:	bdfa0984 	addi	r23,r23,-6106
 20099e0:	5580200e 	bge	r10,r22,2009a64 <___vfprintf_internal_r+0x494>
 20099e4:	dc813815 	stw	r18,1248(sp)
 20099e8:	5039883a 	mov	fp,r10
 20099ec:	b825883a 	mov	r18,r23
 20099f0:	050001c4 	movi	r20,7
 20099f4:	b02f883a 	mov	r23,r22
 20099f8:	802d883a 	mov	r22,r16
 20099fc:	dc012917 	ldw	r16,1188(sp)
 2009a00:	00000306 	br	2009a10 <___vfprintf_internal_r+0x440>
 2009a04:	bdfffc04 	addi	r23,r23,-16
 2009a08:	4a400204 	addi	r9,r9,8
 2009a0c:	e5c0110e 	bge	fp,r23,2009a54 <___vfprintf_internal_r+0x484>
 2009a10:	4c800015 	stw	r18,0(r9)
 2009a14:	4f000115 	stw	fp,4(r9)
 2009a18:	42000404 	addi	r8,r8,16
 2009a1c:	18c00044 	addi	r3,r3,1
 2009a20:	da011d15 	stw	r8,1140(sp)
 2009a24:	d8c11c15 	stw	r3,1136(sp)
 2009a28:	a0fff60e 	bge	r20,r3,2009a04 <___vfprintf_internal_r+0x434>
 2009a2c:	8809883a 	mov	r4,r17
 2009a30:	800b883a 	mov	r5,r16
 2009a34:	d9811b04 	addi	r6,sp,1132
 2009a38:	200959c0 	call	200959c <__sprint_r>
 2009a3c:	1000771e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 2009a40:	bdfffc04 	addi	r23,r23,-16
 2009a44:	da011d17 	ldw	r8,1140(sp)
 2009a48:	d8c11c17 	ldw	r3,1136(sp)
 2009a4c:	da400404 	addi	r9,sp,16
 2009a50:	e5ffef16 	blt	fp,r23,2009a10 <___vfprintf_internal_r+0x440>
 2009a54:	b021883a 	mov	r16,r22
 2009a58:	b82d883a 	mov	r22,r23
 2009a5c:	902f883a 	mov	r23,r18
 2009a60:	dc813817 	ldw	r18,1248(sp)
 2009a64:	4dc00015 	stw	r23,0(r9)
 2009a68:	4d800115 	stw	r22,4(r9)
 2009a6c:	4591883a 	add	r8,r8,r22
 2009a70:	18c00044 	addi	r3,r3,1
 2009a74:	da011d15 	stw	r8,1140(sp)
 2009a78:	d8c11c15 	stw	r3,1136(sp)
 2009a7c:	008001c4 	movi	r2,7
 2009a80:	10c36d16 	blt	r2,r3,200a838 <___vfprintf_internal_r+0x1268>
 2009a84:	4a400204 	addi	r9,r9,8
 2009a88:	00016206 	br	200a014 <___vfprintf_internal_r+0xa44>
 2009a8c:	84000414 	ori	r16,r16,16
 2009a90:	8080080c 	andi	r2,r16,32
 2009a94:	1000801e 	bne	r2,zero,2009c98 <___vfprintf_internal_r+0x6c8>
 2009a98:	8080040c 	andi	r2,r16,16
 2009a9c:	1003da26 	beq	r2,zero,200aa08 <___vfprintf_internal_r+0x1438>
 2009aa0:	d8c12d17 	ldw	r3,1204(sp)
 2009aa4:	002d883a 	mov	r22,zero
 2009aa8:	1dc00017 	ldw	r23,0(r3)
 2009aac:	18c00104 	addi	r3,r3,4
 2009ab0:	d8c12d15 	stw	r3,1204(sp)
 2009ab4:	b805883a 	mov	r2,r23
 2009ab8:	0007883a 	mov	r3,zero
 2009abc:	d8012585 	stb	zero,1174(sp)
 2009ac0:	003f9a06 	br	200992c <___vfprintf_internal_r+0x35c>
 2009ac4:	84000414 	ori	r16,r16,16
 2009ac8:	8080080c 	andi	r2,r16,32
 2009acc:	10007b1e 	bne	r2,zero,2009cbc <___vfprintf_internal_r+0x6ec>
 2009ad0:	8080040c 	andi	r2,r16,16
 2009ad4:	1003ed26 	beq	r2,zero,200aa8c <___vfprintf_internal_r+0x14bc>
 2009ad8:	d9012d17 	ldw	r4,1204(sp)
 2009adc:	25c00017 	ldw	r23,0(r4)
 2009ae0:	21000104 	addi	r4,r4,4
 2009ae4:	d9012d15 	stw	r4,1204(sp)
 2009ae8:	b82dd7fa 	srai	r22,r23,31
 2009aec:	b005883a 	mov	r2,r22
 2009af0:	1003230e 	bge	r2,zero,200a780 <___vfprintf_internal_r+0x11b0>
 2009af4:	05efc83a 	sub	r23,zero,r23
 2009af8:	b804c03a 	cmpne	r2,r23,zero
 2009afc:	05adc83a 	sub	r22,zero,r22
 2009b00:	b0adc83a 	sub	r22,r22,r2
 2009b04:	00800b44 	movi	r2,45
 2009b08:	d8812585 	stb	r2,1174(sp)
 2009b0c:	00c00044 	movi	r3,1
 2009b10:	bd84b03a 	or	r2,r23,r22
 2009b14:	003f8506 	br	200992c <___vfprintf_internal_r+0x35c>
 2009b18:	da012e17 	ldw	r8,1208(sp)
 2009b1c:	d8812d15 	stw	r2,1204(sp)
 2009b20:	0211c83a 	sub	r8,zero,r8
 2009b24:	da012e15 	stw	r8,1208(sp)
 2009b28:	84000114 	ori	r16,r16,4
 2009b2c:	ac800007 	ldb	r18,0(r21)
 2009b30:	003f0506 	br	2009748 <___vfprintf_internal_r+0x178>
 2009b34:	d9013017 	ldw	r4,1216(sp)
 2009b38:	d9412917 	ldw	r5,1188(sp)
 2009b3c:	200b4d80 	call	200b4d8 <__swsetup_r>
 2009b40:	10003d1e 	bne	r2,zero,2009c38 <___vfprintf_internal_r+0x668>
 2009b44:	d8c12917 	ldw	r3,1188(sp)
 2009b48:	1880030b 	ldhu	r2,12(r3)
 2009b4c:	00c00284 	movi	r3,10
 2009b50:	1100068c 	andi	r4,r2,26
 2009b54:	20fec21e 	bne	r4,r3,2009660 <___vfprintf_internal_r+0x90>
 2009b58:	d9012917 	ldw	r4,1188(sp)
 2009b5c:	20c0038b 	ldhu	r3,14(r4)
 2009b60:	193fffcc 	andi	r4,r3,65535
 2009b64:	2120001c 	xori	r4,r4,32768
 2009b68:	21200004 	addi	r4,r4,-32768
 2009b6c:	203ebc16 	blt	r4,zero,2009660 <___vfprintf_internal_r+0x90>
 2009b70:	da012917 	ldw	r8,1188(sp)
 2009b74:	d9013017 	ldw	r4,1216(sp)
 2009b78:	d9c12d17 	ldw	r7,1204(sp)
 2009b7c:	42800717 	ldw	r10,28(r8)
 2009b80:	42400917 	ldw	r9,36(r8)
 2009b84:	10bfff4c 	andi	r2,r2,65533
 2009b88:	02010004 	movi	r8,1024
 2009b8c:	d881070d 	sth	r2,1052(sp)
 2009b90:	d9410404 	addi	r5,sp,1040
 2009b94:	d8800404 	addi	r2,sp,16
 2009b98:	800d883a 	mov	r6,r16
 2009b9c:	d8c1078d 	sth	r3,1054(sp)
 2009ba0:	da810b15 	stw	r10,1068(sp)
 2009ba4:	da410d15 	stw	r9,1076(sp)
 2009ba8:	d8810415 	stw	r2,1040(sp)
 2009bac:	d8810815 	stw	r2,1056(sp)
 2009bb0:	da010615 	stw	r8,1048(sp)
 2009bb4:	da010915 	stw	r8,1060(sp)
 2009bb8:	d8010a15 	stw	zero,1064(sp)
 2009bbc:	20095d00 	call	20095d0 <___vfprintf_internal_r>
 2009bc0:	d8812c15 	stw	r2,1200(sp)
 2009bc4:	10000416 	blt	r2,zero,2009bd8 <___vfprintf_internal_r+0x608>
 2009bc8:	d9013017 	ldw	r4,1216(sp)
 2009bcc:	d9410404 	addi	r5,sp,1040
 2009bd0:	200ce700 	call	200ce70 <_fflush_r>
 2009bd4:	1005d81e 	bne	r2,zero,200b338 <___vfprintf_internal_r+0x1d68>
 2009bd8:	d881070b 	ldhu	r2,1052(sp)
 2009bdc:	1080100c 	andi	r2,r2,64
 2009be0:	10bfffcc 	andi	r2,r2,65535
 2009be4:	10a0001c 	xori	r2,r2,32768
 2009be8:	10a00004 	addi	r2,r2,-32768
 2009bec:	10001426 	beq	r2,zero,2009c40 <___vfprintf_internal_r+0x670>
 2009bf0:	d8c12917 	ldw	r3,1188(sp)
 2009bf4:	1880030b 	ldhu	r2,12(r3)
 2009bf8:	10801014 	ori	r2,r2,64
 2009bfc:	1880030d 	sth	r2,12(r3)
 2009c00:	00000f06 	br	2009c40 <___vfprintf_internal_r+0x670>
 2009c04:	d8811d17 	ldw	r2,1140(sp)
 2009c08:	10000426 	beq	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 2009c0c:	d9013017 	ldw	r4,1216(sp)
 2009c10:	d9412917 	ldw	r5,1188(sp)
 2009c14:	d9811b04 	addi	r6,sp,1132
 2009c18:	200959c0 	call	200959c <__sprint_r>
 2009c1c:	d8c12917 	ldw	r3,1188(sp)
 2009c20:	1880030b 	ldhu	r2,12(r3)
 2009c24:	1080100c 	andi	r2,r2,64
 2009c28:	10bfffcc 	andi	r2,r2,65535
 2009c2c:	10a0001c 	xori	r2,r2,32768
 2009c30:	10a00004 	addi	r2,r2,-32768
 2009c34:	10000226 	beq	r2,zero,2009c40 <___vfprintf_internal_r+0x670>
 2009c38:	00bfffc4 	movi	r2,-1
 2009c3c:	d8812c15 	stw	r2,1200(sp)
 2009c40:	d8812c17 	ldw	r2,1200(sp)
 2009c44:	dfc14617 	ldw	ra,1304(sp)
 2009c48:	df014517 	ldw	fp,1300(sp)
 2009c4c:	ddc14417 	ldw	r23,1296(sp)
 2009c50:	dd814317 	ldw	r22,1292(sp)
 2009c54:	dd414217 	ldw	r21,1288(sp)
 2009c58:	dd014117 	ldw	r20,1284(sp)
 2009c5c:	dcc14017 	ldw	r19,1280(sp)
 2009c60:	dc813f17 	ldw	r18,1276(sp)
 2009c64:	dc413e17 	ldw	r17,1272(sp)
 2009c68:	dc013d17 	ldw	r16,1268(sp)
 2009c6c:	dec14704 	addi	sp,sp,1308
 2009c70:	f800283a 	ret
 2009c74:	d9412917 	ldw	r5,1188(sp)
 2009c78:	8809883a 	mov	r4,r17
 2009c7c:	d9811b04 	addi	r6,sp,1132
 2009c80:	200959c0 	call	200959c <__sprint_r>
 2009c84:	103fe51e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 2009c88:	da400404 	addi	r9,sp,16
 2009c8c:	003e9d06 	br	2009704 <___vfprintf_internal_r+0x134>
 2009c90:	200d1180 	call	200d118 <__sinit>
 2009c94:	003e6606 	br	2009630 <___vfprintf_internal_r+0x60>
 2009c98:	d8812d17 	ldw	r2,1204(sp)
 2009c9c:	0007883a 	mov	r3,zero
 2009ca0:	15c00017 	ldw	r23,0(r2)
 2009ca4:	15800117 	ldw	r22,4(r2)
 2009ca8:	10800204 	addi	r2,r2,8
 2009cac:	d8812d15 	stw	r2,1204(sp)
 2009cb0:	d8012585 	stb	zero,1174(sp)
 2009cb4:	bd84b03a 	or	r2,r23,r22
 2009cb8:	003f1c06 	br	200992c <___vfprintf_internal_r+0x35c>
 2009cbc:	d8c12d17 	ldw	r3,1204(sp)
 2009cc0:	18800117 	ldw	r2,4(r3)
 2009cc4:	1dc00017 	ldw	r23,0(r3)
 2009cc8:	18c00204 	addi	r3,r3,8
 2009ccc:	d8c12d15 	stw	r3,1204(sp)
 2009cd0:	102d883a 	mov	r22,r2
 2009cd4:	003f8606 	br	2009af0 <___vfprintf_internal_r+0x520>
 2009cd8:	d8c12d17 	ldw	r3,1204(sp)
 2009cdc:	d9012d17 	ldw	r4,1204(sp)
 2009ce0:	1dc00017 	ldw	r23,0(r3)
 2009ce4:	1d800117 	ldw	r22,4(r3)
 2009ce8:	21000204 	addi	r4,r4,8
 2009cec:	00c00044 	movi	r3,1
 2009cf0:	d9012d15 	stw	r4,1204(sp)
 2009cf4:	bd84b03a 	or	r2,r23,r22
 2009cf8:	d8012585 	stb	zero,1174(sp)
 2009cfc:	003f0b06 	br	200992c <___vfprintf_internal_r+0x35c>
 2009d00:	d9812585 	stb	r6,1174(sp)
 2009d04:	ac800007 	ldb	r18,0(r21)
 2009d08:	003e8f06 	br	2009748 <___vfprintf_internal_r+0x178>
 2009d0c:	ac800007 	ldb	r18,0(r21)
 2009d10:	a9000044 	addi	r4,r21,1
 2009d14:	92857d26 	beq	r18,r10,200b30c <___vfprintf_internal_r+0x1d3c>
 2009d18:	90bff404 	addi	r2,r18,-48
 2009d1c:	0039883a 	mov	fp,zero
 2009d20:	28800736 	bltu	r5,r2,2009d40 <___vfprintf_internal_r+0x770>
 2009d24:	24800007 	ldb	r18,0(r4)
 2009d28:	e70002a4 	muli	fp,fp,10
 2009d2c:	21000044 	addi	r4,r4,1
 2009d30:	1739883a 	add	fp,r2,fp
 2009d34:	90bff404 	addi	r2,r18,-48
 2009d38:	28bffa2e 	bgeu	r5,r2,2009d24 <___vfprintf_internal_r+0x754>
 2009d3c:	e0044216 	blt	fp,zero,200ae48 <___vfprintf_internal_r+0x1878>
 2009d40:	202b883a 	mov	r21,r4
 2009d44:	003e8106 	br	200974c <___vfprintf_internal_r+0x17c>
 2009d48:	d8812587 	ldb	r2,1174(sp)
 2009d4c:	1003581e 	bne	r2,zero,200aab0 <___vfprintf_internal_r+0x14e0>
 2009d50:	dac12585 	stb	r11,1174(sp)
 2009d54:	ac800007 	ldb	r18,0(r21)
 2009d58:	003e7b06 	br	2009748 <___vfprintf_internal_r+0x178>
 2009d5c:	84000054 	ori	r16,r16,1
 2009d60:	ac800007 	ldb	r18,0(r21)
 2009d64:	003e7806 	br	2009748 <___vfprintf_internal_r+0x178>
 2009d68:	84002014 	ori	r16,r16,128
 2009d6c:	ac800007 	ldb	r18,0(r21)
 2009d70:	003e7506 	br	2009748 <___vfprintf_internal_r+0x178>
 2009d74:	020080f4 	movhi	r8,515
 2009d78:	4239fd04 	addi	r8,r8,-6156
 2009d7c:	da013615 	stw	r8,1240(sp)
 2009d80:	8080080c 	andi	r2,r16,32
 2009d84:	10009626 	beq	r2,zero,2009fe0 <___vfprintf_internal_r+0xa10>
 2009d88:	d8812d17 	ldw	r2,1204(sp)
 2009d8c:	15c00017 	ldw	r23,0(r2)
 2009d90:	15800117 	ldw	r22,4(r2)
 2009d94:	10800204 	addi	r2,r2,8
 2009d98:	d8812d15 	stw	r2,1204(sp)
 2009d9c:	8080004c 	andi	r2,r16,1
 2009da0:	1002ae26 	beq	r2,zero,200a85c <___vfprintf_internal_r+0x128c>
 2009da4:	bd84b03a 	or	r2,r23,r22
 2009da8:	10032a26 	beq	r2,zero,200aa54 <___vfprintf_internal_r+0x1484>
 2009dac:	00c00c04 	movi	r3,48
 2009db0:	d8c12505 	stb	r3,1172(sp)
 2009db4:	dc812545 	stb	r18,1173(sp)
 2009db8:	84000094 	ori	r16,r16,2
 2009dbc:	00c00084 	movi	r3,2
 2009dc0:	d8012585 	stb	zero,1174(sp)
 2009dc4:	003ed906 	br	200992c <___vfprintf_internal_r+0x35c>
 2009dc8:	84001014 	ori	r16,r16,64
 2009dcc:	ac800007 	ldb	r18,0(r21)
 2009dd0:	003e5d06 	br	2009748 <___vfprintf_internal_r+0x178>
 2009dd4:	ac800007 	ldb	r18,0(r21)
 2009dd8:	a805883a 	mov	r2,r21
 2009ddc:	91c43226 	beq	r18,r7,200aea8 <___vfprintf_internal_r+0x18d8>
 2009de0:	84000414 	ori	r16,r16,16
 2009de4:	003e5806 	br	2009748 <___vfprintf_internal_r+0x178>
 2009de8:	d8c12d17 	ldw	r3,1204(sp)
 2009dec:	02000044 	movi	r8,1
 2009df0:	da012815 	stw	r8,1184(sp)
 2009df4:	18800017 	ldw	r2,0(r3)
 2009df8:	18c00104 	addi	r3,r3,4
 2009dfc:	d8012585 	stb	zero,1174(sp)
 2009e00:	d8810405 	stb	r2,1040(sp)
 2009e04:	d8c12d15 	stw	r3,1204(sp)
 2009e08:	da012b15 	stw	r8,1196(sp)
 2009e0c:	dcc10404 	addi	r19,sp,1040
 2009e10:	d8013115 	stw	zero,1220(sp)
 2009e14:	003ee006 	br	2009998 <___vfprintf_internal_r+0x3c8>
 2009e18:	8080080c 	andi	r2,r16,32
 2009e1c:	10031026 	beq	r2,zero,200aa60 <___vfprintf_internal_r+0x1490>
 2009e20:	d9012d17 	ldw	r4,1204(sp)
 2009e24:	da012c17 	ldw	r8,1200(sp)
 2009e28:	20800017 	ldw	r2,0(r4)
 2009e2c:	4007d7fa 	srai	r3,r8,31
 2009e30:	21000104 	addi	r4,r4,4
 2009e34:	d9012d15 	stw	r4,1204(sp)
 2009e38:	12000015 	stw	r8,0(r2)
 2009e3c:	10c00115 	stw	r3,4(r2)
 2009e40:	003e1906 	br	20096a8 <___vfprintf_internal_r+0xd8>
 2009e44:	da012d17 	ldw	r8,1204(sp)
 2009e48:	d9012d17 	ldw	r4,1204(sp)
 2009e4c:	42000017 	ldw	r8,0(r8)
 2009e50:	20800104 	addi	r2,r4,4
 2009e54:	da012e15 	stw	r8,1208(sp)
 2009e58:	403f2f16 	blt	r8,zero,2009b18 <___vfprintf_internal_r+0x548>
 2009e5c:	d8812d15 	stw	r2,1204(sp)
 2009e60:	ac800007 	ldb	r18,0(r21)
 2009e64:	003e3806 	br	2009748 <___vfprintf_internal_r+0x178>
 2009e68:	0009883a 	mov	r4,zero
 2009e6c:	90bff404 	addi	r2,r18,-48
 2009e70:	ac800007 	ldb	r18,0(r21)
 2009e74:	210002a4 	muli	r4,r4,10
 2009e78:	ad400044 	addi	r21,r21,1
 2009e7c:	2089883a 	add	r4,r4,r2
 2009e80:	90bff404 	addi	r2,r18,-48
 2009e84:	28bffa2e 	bgeu	r5,r2,2009e70 <___vfprintf_internal_r+0x8a0>
 2009e88:	d9012e15 	stw	r4,1208(sp)
 2009e8c:	003e2f06 	br	200974c <___vfprintf_internal_r+0x17c>
 2009e90:	8080020c 	andi	r2,r16,8
 2009e94:	1002d426 	beq	r2,zero,200a9e8 <___vfprintf_internal_r+0x1418>
 2009e98:	d8c12d17 	ldw	r3,1204(sp)
 2009e9c:	1d800017 	ldw	r22,0(r3)
 2009ea0:	1d000117 	ldw	r20,4(r3)
 2009ea4:	18c00204 	addi	r3,r3,8
 2009ea8:	d8c12d15 	stw	r3,1204(sp)
 2009eac:	dd813315 	stw	r22,1228(sp)
 2009eb0:	dd013415 	stw	r20,1232(sp)
 2009eb4:	b009883a 	mov	r4,r22
 2009eb8:	a00b883a 	mov	r5,r20
 2009ebc:	da413c15 	stw	r9,1264(sp)
 2009ec0:	200f7f80 	call	200f7f8 <__isinfd>
 2009ec4:	da413c17 	ldw	r9,1264(sp)
 2009ec8:	b009883a 	mov	r4,r22
 2009ecc:	a00b883a 	mov	r5,r20
 2009ed0:	10035726 	beq	r2,zero,200ac30 <___vfprintf_internal_r+0x1660>
 2009ed4:	000d883a 	mov	r6,zero
 2009ed8:	000f883a 	mov	r7,zero
 2009edc:	20080040 	call	2008004 <__ltdf2>
 2009ee0:	da413c17 	ldw	r9,1264(sp)
 2009ee4:	10041b16 	blt	r2,zero,200af54 <___vfprintf_internal_r+0x1984>
 2009ee8:	d8812583 	ldbu	r2,1174(sp)
 2009eec:	00c011c4 	movi	r3,71
 2009ef0:	1c830b16 	blt	r3,r18,200ab20 <___vfprintf_internal_r+0x1550>
 2009ef4:	04c080f4 	movhi	r19,515
 2009ef8:	9cf9f904 	addi	r19,r19,-6172
 2009efc:	020000c4 	movi	r8,3
 2009f00:	00ffdfc4 	movi	r3,-129
 2009f04:	da012815 	stw	r8,1184(sp)
 2009f08:	80e0703a 	and	r16,r16,r3
 2009f0c:	da012b15 	stw	r8,1196(sp)
 2009f10:	d8013115 	stw	zero,1220(sp)
 2009f14:	003e9906 	br	200997c <___vfprintf_internal_r+0x3ac>
 2009f18:	d8812d17 	ldw	r2,1204(sp)
 2009f1c:	d8c12d17 	ldw	r3,1204(sp)
 2009f20:	020080f4 	movhi	r8,515
 2009f24:	423a0204 	addi	r8,r8,-6136
 2009f28:	15c00017 	ldw	r23,0(r2)
 2009f2c:	00800c04 	movi	r2,48
 2009f30:	18c00104 	addi	r3,r3,4
 2009f34:	d8812505 	stb	r2,1172(sp)
 2009f38:	00801e04 	movi	r2,120
 2009f3c:	d8812545 	stb	r2,1173(sp)
 2009f40:	d8c12d15 	stw	r3,1204(sp)
 2009f44:	002d883a 	mov	r22,zero
 2009f48:	84000094 	ori	r16,r16,2
 2009f4c:	da013615 	stw	r8,1240(sp)
 2009f50:	00c00084 	movi	r3,2
 2009f54:	04801e04 	movi	r18,120
 2009f58:	b805883a 	mov	r2,r23
 2009f5c:	d8012585 	stb	zero,1174(sp)
 2009f60:	003e7206 	br	200992c <___vfprintf_internal_r+0x35c>
 2009f64:	84000814 	ori	r16,r16,32
 2009f68:	ac800007 	ldb	r18,0(r21)
 2009f6c:	003df606 	br	2009748 <___vfprintf_internal_r+0x178>
 2009f70:	d8812d17 	ldw	r2,1204(sp)
 2009f74:	d8012585 	stb	zero,1174(sp)
 2009f78:	14c00017 	ldw	r19,0(r2)
 2009f7c:	15c00104 	addi	r23,r2,4
 2009f80:	98040126 	beq	r19,zero,200af88 <___vfprintf_internal_r+0x19b8>
 2009f84:	9809883a 	mov	r4,r19
 2009f88:	e003dd16 	blt	fp,zero,200af00 <___vfprintf_internal_r+0x1930>
 2009f8c:	000b883a 	mov	r5,zero
 2009f90:	e00d883a 	mov	r6,fp
 2009f94:	da413c15 	stw	r9,1264(sp)
 2009f98:	200e0340 	call	200e034 <memchr>
 2009f9c:	da413c17 	ldw	r9,1264(sp)
 2009fa0:	10042e26 	beq	r2,zero,200b05c <___vfprintf_internal_r+0x1a8c>
 2009fa4:	14c5c83a 	sub	r2,r2,r19
 2009fa8:	d8812b15 	stw	r2,1196(sp)
 2009fac:	e083790e 	bge	fp,r2,200ad94 <___vfprintf_internal_r+0x17c4>
 2009fb0:	df012815 	stw	fp,1184(sp)
 2009fb4:	e0049516 	blt	fp,zero,200b20c <___vfprintf_internal_r+0x1c3c>
 2009fb8:	d8812583 	ldbu	r2,1174(sp)
 2009fbc:	df012b15 	stw	fp,1196(sp)
 2009fc0:	ddc12d15 	stw	r23,1204(sp)
 2009fc4:	d8013115 	stw	zero,1220(sp)
 2009fc8:	003e6c06 	br	200997c <___vfprintf_internal_r+0x3ac>
 2009fcc:	020080f4 	movhi	r8,515
 2009fd0:	423a0204 	addi	r8,r8,-6136
 2009fd4:	da013615 	stw	r8,1240(sp)
 2009fd8:	8080080c 	andi	r2,r16,32
 2009fdc:	103f6a1e 	bne	r2,zero,2009d88 <___vfprintf_internal_r+0x7b8>
 2009fe0:	8080040c 	andi	r2,r16,16
 2009fe4:	10029326 	beq	r2,zero,200aa34 <___vfprintf_internal_r+0x1464>
 2009fe8:	d8c12d17 	ldw	r3,1204(sp)
 2009fec:	002d883a 	mov	r22,zero
 2009ff0:	1dc00017 	ldw	r23,0(r3)
 2009ff4:	18c00104 	addi	r3,r3,4
 2009ff8:	d8c12d15 	stw	r3,1204(sp)
 2009ffc:	003f6706 	br	2009d9c <___vfprintf_internal_r+0x7cc>
 200a000:	84000214 	ori	r16,r16,8
 200a004:	ac800007 	ldb	r18,0(r21)
 200a008:	003dcf06 	br	2009748 <___vfprintf_internal_r+0x178>
 200a00c:	da011d17 	ldw	r8,1140(sp)
 200a010:	d8c11c17 	ldw	r3,1136(sp)
 200a014:	d8812587 	ldb	r2,1174(sp)
 200a018:	10000b26 	beq	r2,zero,200a048 <___vfprintf_internal_r+0xa78>
 200a01c:	d8812584 	addi	r2,sp,1174
 200a020:	48800015 	stw	r2,0(r9)
 200a024:	00800044 	movi	r2,1
 200a028:	48800115 	stw	r2,4(r9)
 200a02c:	4091883a 	add	r8,r8,r2
 200a030:	1887883a 	add	r3,r3,r2
 200a034:	da011d15 	stw	r8,1140(sp)
 200a038:	d8c11c15 	stw	r3,1136(sp)
 200a03c:	008001c4 	movi	r2,7
 200a040:	10c18516 	blt	r2,r3,200a658 <___vfprintf_internal_r+0x1088>
 200a044:	4a400204 	addi	r9,r9,8
 200a048:	d9012a17 	ldw	r4,1192(sp)
 200a04c:	20000b26 	beq	r4,zero,200a07c <___vfprintf_internal_r+0xaac>
 200a050:	d8812504 	addi	r2,sp,1172
 200a054:	48800015 	stw	r2,0(r9)
 200a058:	00800084 	movi	r2,2
 200a05c:	48800115 	stw	r2,4(r9)
 200a060:	4091883a 	add	r8,r8,r2
 200a064:	18c00044 	addi	r3,r3,1
 200a068:	da011d15 	stw	r8,1140(sp)
 200a06c:	d8c11c15 	stw	r3,1136(sp)
 200a070:	008001c4 	movi	r2,7
 200a074:	10c18116 	blt	r2,r3,200a67c <___vfprintf_internal_r+0x10ac>
 200a078:	4a400204 	addi	r9,r9,8
 200a07c:	d9012f17 	ldw	r4,1212(sp)
 200a080:	00802004 	movi	r2,128
 200a084:	2080fc26 	beq	r4,r2,200a478 <___vfprintf_internal_r+0xea8>
 200a088:	d8813117 	ldw	r2,1220(sp)
 200a08c:	d9012b17 	ldw	r4,1196(sp)
 200a090:	112fc83a 	sub	r23,r2,r4
 200a094:	05c02a0e 	bge	zero,r23,200a140 <___vfprintf_internal_r+0xb70>
 200a098:	07000404 	movi	fp,16
 200a09c:	050080f4 	movhi	r20,515
 200a0a0:	a53a0d84 	addi	r20,r20,-6090
 200a0a4:	e5c01d0e 	bge	fp,r23,200a11c <___vfprintf_internal_r+0xb4c>
 200a0a8:	dc812a15 	stw	r18,1192(sp)
 200a0ac:	058001c4 	movi	r22,7
 200a0b0:	a025883a 	mov	r18,r20
 200a0b4:	8029883a 	mov	r20,r16
 200a0b8:	dc012917 	ldw	r16,1188(sp)
 200a0bc:	00000306 	br	200a0cc <___vfprintf_internal_r+0xafc>
 200a0c0:	bdfffc04 	addi	r23,r23,-16
 200a0c4:	4a400204 	addi	r9,r9,8
 200a0c8:	e5c0110e 	bge	fp,r23,200a110 <___vfprintf_internal_r+0xb40>
 200a0cc:	4c800015 	stw	r18,0(r9)
 200a0d0:	4f000115 	stw	fp,4(r9)
 200a0d4:	42000404 	addi	r8,r8,16
 200a0d8:	18c00044 	addi	r3,r3,1
 200a0dc:	da011d15 	stw	r8,1140(sp)
 200a0e0:	d8c11c15 	stw	r3,1136(sp)
 200a0e4:	b0fff60e 	bge	r22,r3,200a0c0 <___vfprintf_internal_r+0xaf0>
 200a0e8:	8809883a 	mov	r4,r17
 200a0ec:	800b883a 	mov	r5,r16
 200a0f0:	d9811b04 	addi	r6,sp,1132
 200a0f4:	200959c0 	call	200959c <__sprint_r>
 200a0f8:	103ec81e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a0fc:	bdfffc04 	addi	r23,r23,-16
 200a100:	da011d17 	ldw	r8,1140(sp)
 200a104:	d8c11c17 	ldw	r3,1136(sp)
 200a108:	da400404 	addi	r9,sp,16
 200a10c:	e5ffef16 	blt	fp,r23,200a0cc <___vfprintf_internal_r+0xafc>
 200a110:	a021883a 	mov	r16,r20
 200a114:	9029883a 	mov	r20,r18
 200a118:	dc812a17 	ldw	r18,1192(sp)
 200a11c:	4d000015 	stw	r20,0(r9)
 200a120:	4dc00115 	stw	r23,4(r9)
 200a124:	45d1883a 	add	r8,r8,r23
 200a128:	18c00044 	addi	r3,r3,1
 200a12c:	da011d15 	stw	r8,1140(sp)
 200a130:	d8c11c15 	stw	r3,1136(sp)
 200a134:	008001c4 	movi	r2,7
 200a138:	10c13e16 	blt	r2,r3,200a634 <___vfprintf_internal_r+0x1064>
 200a13c:	4a400204 	addi	r9,r9,8
 200a140:	8080400c 	andi	r2,r16,256
 200a144:	1000831e 	bne	r2,zero,200a354 <___vfprintf_internal_r+0xd84>
 200a148:	d8812b17 	ldw	r2,1196(sp)
 200a14c:	4cc00015 	stw	r19,0(r9)
 200a150:	48800115 	stw	r2,4(r9)
 200a154:	4091883a 	add	r8,r8,r2
 200a158:	18c00044 	addi	r3,r3,1
 200a15c:	da011d15 	stw	r8,1140(sp)
 200a160:	d8c11c15 	stw	r3,1136(sp)
 200a164:	008001c4 	movi	r2,7
 200a168:	10c05316 	blt	r2,r3,200a2b8 <___vfprintf_internal_r+0xce8>
 200a16c:	4a400204 	addi	r9,r9,8
 200a170:	8400010c 	andi	r16,r16,4
 200a174:	80002e26 	beq	r16,zero,200a230 <___vfprintf_internal_r+0xc60>
 200a178:	d8812e17 	ldw	r2,1208(sp)
 200a17c:	d8c12817 	ldw	r3,1184(sp)
 200a180:	10e1c83a 	sub	r16,r2,r3
 200a184:	04002a0e 	bge	zero,r16,200a230 <___vfprintf_internal_r+0xc60>
 200a188:	04800404 	movi	r18,16
 200a18c:	d8c11c17 	ldw	r3,1136(sp)
 200a190:	05c080f4 	movhi	r23,515
 200a194:	bdfa0984 	addi	r23,r23,-6106
 200a198:	9400170e 	bge	r18,r16,200a1f8 <___vfprintf_internal_r+0xc28>
 200a19c:	04c001c4 	movi	r19,7
 200a1a0:	dd012917 	ldw	r20,1188(sp)
 200a1a4:	00000306 	br	200a1b4 <___vfprintf_internal_r+0xbe4>
 200a1a8:	843ffc04 	addi	r16,r16,-16
 200a1ac:	4a400204 	addi	r9,r9,8
 200a1b0:	9400110e 	bge	r18,r16,200a1f8 <___vfprintf_internal_r+0xc28>
 200a1b4:	4dc00015 	stw	r23,0(r9)
 200a1b8:	4c800115 	stw	r18,4(r9)
 200a1bc:	42000404 	addi	r8,r8,16
 200a1c0:	18c00044 	addi	r3,r3,1
 200a1c4:	da011d15 	stw	r8,1140(sp)
 200a1c8:	d8c11c15 	stw	r3,1136(sp)
 200a1cc:	98fff60e 	bge	r19,r3,200a1a8 <___vfprintf_internal_r+0xbd8>
 200a1d0:	8809883a 	mov	r4,r17
 200a1d4:	a00b883a 	mov	r5,r20
 200a1d8:	d9811b04 	addi	r6,sp,1132
 200a1dc:	200959c0 	call	200959c <__sprint_r>
 200a1e0:	103e8e1e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a1e4:	843ffc04 	addi	r16,r16,-16
 200a1e8:	da011d17 	ldw	r8,1140(sp)
 200a1ec:	d8c11c17 	ldw	r3,1136(sp)
 200a1f0:	da400404 	addi	r9,sp,16
 200a1f4:	943fef16 	blt	r18,r16,200a1b4 <___vfprintf_internal_r+0xbe4>
 200a1f8:	4dc00015 	stw	r23,0(r9)
 200a1fc:	4c000115 	stw	r16,4(r9)
 200a200:	8211883a 	add	r8,r16,r8
 200a204:	18c00044 	addi	r3,r3,1
 200a208:	da011d15 	stw	r8,1140(sp)
 200a20c:	d8c11c15 	stw	r3,1136(sp)
 200a210:	008001c4 	movi	r2,7
 200a214:	10c0060e 	bge	r2,r3,200a230 <___vfprintf_internal_r+0xc60>
 200a218:	d9412917 	ldw	r5,1188(sp)
 200a21c:	8809883a 	mov	r4,r17
 200a220:	d9811b04 	addi	r6,sp,1132
 200a224:	200959c0 	call	200959c <__sprint_r>
 200a228:	103e7c1e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a22c:	da011d17 	ldw	r8,1140(sp)
 200a230:	dd012817 	ldw	r20,1184(sp)
 200a234:	d9012e17 	ldw	r4,1208(sp)
 200a238:	a100010e 	bge	r20,r4,200a240 <___vfprintf_internal_r+0xc70>
 200a23c:	2029883a 	mov	r20,r4
 200a240:	d8812c17 	ldw	r2,1200(sp)
 200a244:	1505883a 	add	r2,r2,r20
 200a248:	d8812c15 	stw	r2,1200(sp)
 200a24c:	4000b91e 	bne	r8,zero,200a534 <___vfprintf_internal_r+0xf64>
 200a250:	d8011c15 	stw	zero,1136(sp)
 200a254:	a8800007 	ldb	r2,0(r21)
 200a258:	da400404 	addi	r9,sp,16
 200a25c:	103d141e 	bne	r2,zero,20096b0 <___vfprintf_internal_r+0xe0>
 200a260:	a825883a 	mov	r18,r21
 200a264:	003d2a06 	br	2009710 <___vfprintf_internal_r+0x140>
 200a268:	d9412917 	ldw	r5,1188(sp)
 200a26c:	8809883a 	mov	r4,r17
 200a270:	d9811b04 	addi	r6,sp,1132
 200a274:	200959c0 	call	200959c <__sprint_r>
 200a278:	103e681e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a27c:	da011d17 	ldw	r8,1140(sp)
 200a280:	da400404 	addi	r9,sp,16
 200a284:	8080004c 	andi	r2,r16,1
 200a288:	103fb926 	beq	r2,zero,200a170 <___vfprintf_internal_r+0xba0>
 200a28c:	d8c11c17 	ldw	r3,1136(sp)
 200a290:	d9013717 	ldw	r4,1244(sp)
 200a294:	00800044 	movi	r2,1
 200a298:	48800115 	stw	r2,4(r9)
 200a29c:	49000015 	stw	r4,0(r9)
 200a2a0:	4091883a 	add	r8,r8,r2
 200a2a4:	1887883a 	add	r3,r3,r2
 200a2a8:	da011d15 	stw	r8,1140(sp)
 200a2ac:	d8c11c15 	stw	r3,1136(sp)
 200a2b0:	008001c4 	movi	r2,7
 200a2b4:	10ffad0e 	bge	r2,r3,200a16c <___vfprintf_internal_r+0xb9c>
 200a2b8:	d9412917 	ldw	r5,1188(sp)
 200a2bc:	8809883a 	mov	r4,r17
 200a2c0:	d9811b04 	addi	r6,sp,1132
 200a2c4:	200959c0 	call	200959c <__sprint_r>
 200a2c8:	103e541e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a2cc:	da400404 	addi	r9,sp,16
 200a2d0:	da011d17 	ldw	r8,1140(sp)
 200a2d4:	003fa606 	br	200a170 <___vfprintf_internal_r+0xba0>
 200a2d8:	18803fcc 	andi	r2,r3,255
 200a2dc:	00c00044 	movi	r3,1
 200a2e0:	10c10126 	beq	r2,r3,200a6e8 <___vfprintf_internal_r+0x1118>
 200a2e4:	00c00084 	movi	r3,2
 200a2e8:	10c0f026 	beq	r2,r3,200a6ac <___vfprintf_internal_r+0x10dc>
 200a2ec:	d8c10dc4 	addi	r3,sp,1079
 200a2f0:	b808d0fa 	srli	r4,r23,3
 200a2f4:	b00a977a 	slli	r5,r22,29
 200a2f8:	b02cd0fa 	srli	r22,r22,3
 200a2fc:	bdc001cc 	andi	r23,r23,7
 200a300:	b8800c04 	addi	r2,r23,48
 200a304:	292eb03a 	or	r23,r5,r4
 200a308:	18800005 	stb	r2,0(r3)
 200a30c:	bd88b03a 	or	r4,r23,r22
 200a310:	1827883a 	mov	r19,r3
 200a314:	18ffffc4 	addi	r3,r3,-1
 200a318:	203ff51e 	bne	r4,zero,200a2f0 <___vfprintf_internal_r+0xd20>
 200a31c:	8100004c 	andi	r4,r16,1
 200a320:	980b883a 	mov	r5,r19
 200a324:	20000726 	beq	r4,zero,200a344 <___vfprintf_internal_r+0xd74>
 200a328:	10803fcc 	andi	r2,r2,255
 200a32c:	1080201c 	xori	r2,r2,128
 200a330:	10bfe004 	addi	r2,r2,-128
 200a334:	01000c04 	movi	r4,48
 200a338:	11000226 	beq	r2,r4,200a344 <___vfprintf_internal_r+0xd74>
 200a33c:	1827883a 	mov	r19,r3
 200a340:	293fffc5 	stb	r4,-1(r5)
 200a344:	d8812717 	ldw	r2,1180(sp)
 200a348:	14c5c83a 	sub	r2,r2,r19
 200a34c:	d8812b15 	stw	r2,1196(sp)
 200a350:	003d8406 	br	2009964 <___vfprintf_internal_r+0x394>
 200a354:	00801944 	movi	r2,101
 200a358:	14807c0e 	bge	r2,r18,200a54c <___vfprintf_internal_r+0xf7c>
 200a35c:	d9013317 	ldw	r4,1228(sp)
 200a360:	d9413417 	ldw	r5,1232(sp)
 200a364:	000d883a 	mov	r6,zero
 200a368:	000f883a 	mov	r7,zero
 200a36c:	d8c13b15 	stw	r3,1260(sp)
 200a370:	da013a15 	stw	r8,1256(sp)
 200a374:	da413c15 	stw	r9,1264(sp)
 200a378:	20109e80 	call	20109e8 <__eqdf2>
 200a37c:	d8c13b17 	ldw	r3,1260(sp)
 200a380:	da013a17 	ldw	r8,1256(sp)
 200a384:	da413c17 	ldw	r9,1264(sp)
 200a388:	1001001e 	bne	r2,zero,200a78c <___vfprintf_internal_r+0x11bc>
 200a38c:	008080f4 	movhi	r2,515
 200a390:	10ba0904 	addi	r2,r2,-6108
 200a394:	48800015 	stw	r2,0(r9)
 200a398:	00800044 	movi	r2,1
 200a39c:	48800115 	stw	r2,4(r9)
 200a3a0:	4091883a 	add	r8,r8,r2
 200a3a4:	1887883a 	add	r3,r3,r2
 200a3a8:	da011d15 	stw	r8,1140(sp)
 200a3ac:	d8c11c15 	stw	r3,1136(sp)
 200a3b0:	008001c4 	movi	r2,7
 200a3b4:	10c1dd16 	blt	r2,r3,200ab2c <___vfprintf_internal_r+0x155c>
 200a3b8:	4a400204 	addi	r9,r9,8
 200a3bc:	d8812417 	ldw	r2,1168(sp)
 200a3c0:	d8c13217 	ldw	r3,1224(sp)
 200a3c4:	10c00216 	blt	r2,r3,200a3d0 <___vfprintf_internal_r+0xe00>
 200a3c8:	8080004c 	andi	r2,r16,1
 200a3cc:	103f6826 	beq	r2,zero,200a170 <___vfprintf_internal_r+0xba0>
 200a3d0:	d8c11c17 	ldw	r3,1136(sp)
 200a3d4:	d9013717 	ldw	r4,1244(sp)
 200a3d8:	00800044 	movi	r2,1
 200a3dc:	48800115 	stw	r2,4(r9)
 200a3e0:	49000015 	stw	r4,0(r9)
 200a3e4:	4091883a 	add	r8,r8,r2
 200a3e8:	1887883a 	add	r3,r3,r2
 200a3ec:	da011d15 	stw	r8,1140(sp)
 200a3f0:	d8c11c15 	stw	r3,1136(sp)
 200a3f4:	008001c4 	movi	r2,7
 200a3f8:	10c2af16 	blt	r2,r3,200aeb8 <___vfprintf_internal_r+0x18e8>
 200a3fc:	4a400204 	addi	r9,r9,8
 200a400:	d8813217 	ldw	r2,1224(sp)
 200a404:	14bfffc4 	addi	r18,r2,-1
 200a408:	04bf590e 	bge	zero,r18,200a170 <___vfprintf_internal_r+0xba0>
 200a40c:	04c00404 	movi	r19,16
 200a410:	d8c11c17 	ldw	r3,1136(sp)
 200a414:	050080f4 	movhi	r20,515
 200a418:	a53a0d84 	addi	r20,r20,-6090
 200a41c:	9c81630e 	bge	r19,r18,200a9ac <___vfprintf_internal_r+0x13dc>
 200a420:	058001c4 	movi	r22,7
 200a424:	ddc12917 	ldw	r23,1188(sp)
 200a428:	00000306 	br	200a438 <___vfprintf_internal_r+0xe68>
 200a42c:	4a400204 	addi	r9,r9,8
 200a430:	94bffc04 	addi	r18,r18,-16
 200a434:	9c815d0e 	bge	r19,r18,200a9ac <___vfprintf_internal_r+0x13dc>
 200a438:	4d000015 	stw	r20,0(r9)
 200a43c:	4cc00115 	stw	r19,4(r9)
 200a440:	42000404 	addi	r8,r8,16
 200a444:	18c00044 	addi	r3,r3,1
 200a448:	da011d15 	stw	r8,1140(sp)
 200a44c:	d8c11c15 	stw	r3,1136(sp)
 200a450:	b0fff60e 	bge	r22,r3,200a42c <___vfprintf_internal_r+0xe5c>
 200a454:	8809883a 	mov	r4,r17
 200a458:	b80b883a 	mov	r5,r23
 200a45c:	d9811b04 	addi	r6,sp,1132
 200a460:	200959c0 	call	200959c <__sprint_r>
 200a464:	103ded1e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a468:	da011d17 	ldw	r8,1140(sp)
 200a46c:	d8c11c17 	ldw	r3,1136(sp)
 200a470:	da400404 	addi	r9,sp,16
 200a474:	003fee06 	br	200a430 <___vfprintf_internal_r+0xe60>
 200a478:	d8812e17 	ldw	r2,1208(sp)
 200a47c:	d9012817 	ldw	r4,1184(sp)
 200a480:	112fc83a 	sub	r23,r2,r4
 200a484:	05ff000e 	bge	zero,r23,200a088 <___vfprintf_internal_r+0xab8>
 200a488:	07000404 	movi	fp,16
 200a48c:	050080f4 	movhi	r20,515
 200a490:	a53a0d84 	addi	r20,r20,-6090
 200a494:	e5c01d0e 	bge	fp,r23,200a50c <___vfprintf_internal_r+0xf3c>
 200a498:	dc812a15 	stw	r18,1192(sp)
 200a49c:	058001c4 	movi	r22,7
 200a4a0:	a025883a 	mov	r18,r20
 200a4a4:	8029883a 	mov	r20,r16
 200a4a8:	dc012917 	ldw	r16,1188(sp)
 200a4ac:	00000306 	br	200a4bc <___vfprintf_internal_r+0xeec>
 200a4b0:	bdfffc04 	addi	r23,r23,-16
 200a4b4:	4a400204 	addi	r9,r9,8
 200a4b8:	e5c0110e 	bge	fp,r23,200a500 <___vfprintf_internal_r+0xf30>
 200a4bc:	4c800015 	stw	r18,0(r9)
 200a4c0:	4f000115 	stw	fp,4(r9)
 200a4c4:	42000404 	addi	r8,r8,16
 200a4c8:	18c00044 	addi	r3,r3,1
 200a4cc:	da011d15 	stw	r8,1140(sp)
 200a4d0:	d8c11c15 	stw	r3,1136(sp)
 200a4d4:	b0fff60e 	bge	r22,r3,200a4b0 <___vfprintf_internal_r+0xee0>
 200a4d8:	8809883a 	mov	r4,r17
 200a4dc:	800b883a 	mov	r5,r16
 200a4e0:	d9811b04 	addi	r6,sp,1132
 200a4e4:	200959c0 	call	200959c <__sprint_r>
 200a4e8:	103dcc1e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a4ec:	bdfffc04 	addi	r23,r23,-16
 200a4f0:	da011d17 	ldw	r8,1140(sp)
 200a4f4:	d8c11c17 	ldw	r3,1136(sp)
 200a4f8:	da400404 	addi	r9,sp,16
 200a4fc:	e5ffef16 	blt	fp,r23,200a4bc <___vfprintf_internal_r+0xeec>
 200a500:	a021883a 	mov	r16,r20
 200a504:	9029883a 	mov	r20,r18
 200a508:	dc812a17 	ldw	r18,1192(sp)
 200a50c:	4d000015 	stw	r20,0(r9)
 200a510:	4dc00115 	stw	r23,4(r9)
 200a514:	45d1883a 	add	r8,r8,r23
 200a518:	18c00044 	addi	r3,r3,1
 200a51c:	da011d15 	stw	r8,1140(sp)
 200a520:	d8c11c15 	stw	r3,1136(sp)
 200a524:	008001c4 	movi	r2,7
 200a528:	10c11716 	blt	r2,r3,200a988 <___vfprintf_internal_r+0x13b8>
 200a52c:	4a400204 	addi	r9,r9,8
 200a530:	003ed506 	br	200a088 <___vfprintf_internal_r+0xab8>
 200a534:	d9412917 	ldw	r5,1188(sp)
 200a538:	8809883a 	mov	r4,r17
 200a53c:	d9811b04 	addi	r6,sp,1132
 200a540:	200959c0 	call	200959c <__sprint_r>
 200a544:	103f4226 	beq	r2,zero,200a250 <___vfprintf_internal_r+0xc80>
 200a548:	003db406 	br	2009c1c <___vfprintf_internal_r+0x64c>
 200a54c:	d9013217 	ldw	r4,1224(sp)
 200a550:	00800044 	movi	r2,1
 200a554:	4cc00015 	stw	r19,0(r9)
 200a558:	1100e10e 	bge	r2,r4,200a8e0 <___vfprintf_internal_r+0x1310>
 200a55c:	00800044 	movi	r2,1
 200a560:	48800115 	stw	r2,4(r9)
 200a564:	4091883a 	add	r8,r8,r2
 200a568:	1887883a 	add	r3,r3,r2
 200a56c:	da011d15 	stw	r8,1140(sp)
 200a570:	d8c11c15 	stw	r3,1136(sp)
 200a574:	008001c4 	movi	r2,7
 200a578:	10c0ed16 	blt	r2,r3,200a930 <___vfprintf_internal_r+0x1360>
 200a57c:	4a400204 	addi	r9,r9,8
 200a580:	d8813717 	ldw	r2,1244(sp)
 200a584:	48800015 	stw	r2,0(r9)
 200a588:	00800044 	movi	r2,1
 200a58c:	48800115 	stw	r2,4(r9)
 200a590:	4091883a 	add	r8,r8,r2
 200a594:	1887883a 	add	r3,r3,r2
 200a598:	da011d15 	stw	r8,1140(sp)
 200a59c:	d8c11c15 	stw	r3,1136(sp)
 200a5a0:	008001c4 	movi	r2,7
 200a5a4:	10c0eb16 	blt	r2,r3,200a954 <___vfprintf_internal_r+0x1384>
 200a5a8:	4c800204 	addi	r18,r9,8
 200a5ac:	d9013317 	ldw	r4,1228(sp)
 200a5b0:	d9413417 	ldw	r5,1232(sp)
 200a5b4:	000d883a 	mov	r6,zero
 200a5b8:	000f883a 	mov	r7,zero
 200a5bc:	d8c13b15 	stw	r3,1260(sp)
 200a5c0:	da013a15 	stw	r8,1256(sp)
 200a5c4:	2010a440 	call	2010a44 <__nedf2>
 200a5c8:	d8c13b17 	ldw	r3,1260(sp)
 200a5cc:	da013a17 	ldw	r8,1256(sp)
 200a5d0:	1000a626 	beq	r2,zero,200a86c <___vfprintf_internal_r+0x129c>
 200a5d4:	d9013217 	ldw	r4,1224(sp)
 200a5d8:	9cc00044 	addi	r19,r19,1
 200a5dc:	94c00015 	stw	r19,0(r18)
 200a5e0:	20bfffc4 	addi	r2,r4,-1
 200a5e4:	90800115 	stw	r2,4(r18)
 200a5e8:	4091883a 	add	r8,r8,r2
 200a5ec:	18c00044 	addi	r3,r3,1
 200a5f0:	da011d15 	stw	r8,1140(sp)
 200a5f4:	d8c11c15 	stw	r3,1136(sp)
 200a5f8:	008001c4 	movi	r2,7
 200a5fc:	10c0c316 	blt	r2,r3,200a90c <___vfprintf_internal_r+0x133c>
 200a600:	94800204 	addi	r18,r18,8
 200a604:	d9013517 	ldw	r4,1236(sp)
 200a608:	d8811fc4 	addi	r2,sp,1151
 200a60c:	90800015 	stw	r2,0(r18)
 200a610:	91000115 	stw	r4,4(r18)
 200a614:	4111883a 	add	r8,r8,r4
 200a618:	18c00044 	addi	r3,r3,1
 200a61c:	da011d15 	stw	r8,1140(sp)
 200a620:	d8c11c15 	stw	r3,1136(sp)
 200a624:	008001c4 	movi	r2,7
 200a628:	10ff2316 	blt	r2,r3,200a2b8 <___vfprintf_internal_r+0xce8>
 200a62c:	92400204 	addi	r9,r18,8
 200a630:	003ecf06 	br	200a170 <___vfprintf_internal_r+0xba0>
 200a634:	d9412917 	ldw	r5,1188(sp)
 200a638:	8809883a 	mov	r4,r17
 200a63c:	d9811b04 	addi	r6,sp,1132
 200a640:	200959c0 	call	200959c <__sprint_r>
 200a644:	103d751e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a648:	da011d17 	ldw	r8,1140(sp)
 200a64c:	d8c11c17 	ldw	r3,1136(sp)
 200a650:	da400404 	addi	r9,sp,16
 200a654:	003eba06 	br	200a140 <___vfprintf_internal_r+0xb70>
 200a658:	d9412917 	ldw	r5,1188(sp)
 200a65c:	8809883a 	mov	r4,r17
 200a660:	d9811b04 	addi	r6,sp,1132
 200a664:	200959c0 	call	200959c <__sprint_r>
 200a668:	103d6c1e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a66c:	da011d17 	ldw	r8,1140(sp)
 200a670:	d8c11c17 	ldw	r3,1136(sp)
 200a674:	da400404 	addi	r9,sp,16
 200a678:	003e7306 	br	200a048 <___vfprintf_internal_r+0xa78>
 200a67c:	d9412917 	ldw	r5,1188(sp)
 200a680:	8809883a 	mov	r4,r17
 200a684:	d9811b04 	addi	r6,sp,1132
 200a688:	200959c0 	call	200959c <__sprint_r>
 200a68c:	103d631e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a690:	da011d17 	ldw	r8,1140(sp)
 200a694:	d8c11c17 	ldw	r3,1136(sp)
 200a698:	da400404 	addi	r9,sp,16
 200a69c:	003e7706 	br	200a07c <___vfprintf_internal_r+0xaac>
 200a6a0:	d8012b15 	stw	zero,1196(sp)
 200a6a4:	dcc10e04 	addi	r19,sp,1080
 200a6a8:	003cae06 	br	2009964 <___vfprintf_internal_r+0x394>
 200a6ac:	d9413617 	ldw	r5,1240(sp)
 200a6b0:	d8810dc4 	addi	r2,sp,1079
 200a6b4:	b8c003cc 	andi	r3,r23,15
 200a6b8:	b008973a 	slli	r4,r22,28
 200a6bc:	28c7883a 	add	r3,r5,r3
 200a6c0:	b82ed13a 	srli	r23,r23,4
 200a6c4:	18c00003 	ldbu	r3,0(r3)
 200a6c8:	b02cd13a 	srli	r22,r22,4
 200a6cc:	25eeb03a 	or	r23,r4,r23
 200a6d0:	10c00005 	stb	r3,0(r2)
 200a6d4:	bd86b03a 	or	r3,r23,r22
 200a6d8:	1027883a 	mov	r19,r2
 200a6dc:	10bfffc4 	addi	r2,r2,-1
 200a6e0:	183ff41e 	bne	r3,zero,200a6b4 <___vfprintf_internal_r+0x10e4>
 200a6e4:	003f1706 	br	200a344 <___vfprintf_internal_r+0xd74>
 200a6e8:	b0025826 	beq	r22,zero,200b04c <___vfprintf_internal_r+0x1a7c>
 200a6ec:	b807883a 	mov	r3,r23
 200a6f0:	d8810dc4 	addi	r2,sp,1079
 200a6f4:	882f883a 	mov	r23,r17
 200a6f8:	04c00244 	movi	r19,9
 200a6fc:	8023883a 	mov	r17,r16
 200a700:	da412815 	stw	r9,1184(sp)
 200a704:	1821883a 	mov	r16,r3
 200a708:	8009883a 	mov	r4,r16
 200a70c:	b00b883a 	mov	r5,r22
 200a710:	01800284 	movi	r6,10
 200a714:	000f883a 	mov	r7,zero
 200a718:	1029883a 	mov	r20,r2
 200a71c:	201045c0 	call	201045c <__umoddi3>
 200a720:	10800c04 	addi	r2,r2,48
 200a724:	8009883a 	mov	r4,r16
 200a728:	b00b883a 	mov	r5,r22
 200a72c:	a0800005 	stb	r2,0(r20)
 200a730:	01800284 	movi	r6,10
 200a734:	000f883a 	mov	r7,zero
 200a738:	200fe940 	call	200fe94 <__udivdi3>
 200a73c:	1021883a 	mov	r16,r2
 200a740:	182d883a 	mov	r22,r3
 200a744:	a0bfffc4 	addi	r2,r20,-1
 200a748:	183fef1e 	bne	r3,zero,200a708 <___vfprintf_internal_r+0x1138>
 200a74c:	9c3fee36 	bltu	r19,r16,200a708 <___vfprintf_internal_r+0x1138>
 200a750:	da412817 	ldw	r9,1184(sp)
 200a754:	8005883a 	mov	r2,r16
 200a758:	8821883a 	mov	r16,r17
 200a75c:	b823883a 	mov	r17,r23
 200a760:	102f883a 	mov	r23,r2
 200a764:	d8812717 	ldw	r2,1180(sp)
 200a768:	a4ffffc4 	addi	r19,r20,-1
 200a76c:	bdc00c04 	addi	r23,r23,48
 200a770:	14c5c83a 	sub	r2,r2,r19
 200a774:	a5ffffc5 	stb	r23,-1(r20)
 200a778:	d8812b15 	stw	r2,1196(sp)
 200a77c:	003c7906 	br	2009964 <___vfprintf_internal_r+0x394>
 200a780:	00c00044 	movi	r3,1
 200a784:	bd84b03a 	or	r2,r23,r22
 200a788:	003c6806 	br	200992c <___vfprintf_internal_r+0x35c>
 200a78c:	dc812417 	ldw	r18,1168(sp)
 200a790:	0480ee0e 	bge	zero,r18,200ab4c <___vfprintf_internal_r+0x157c>
 200a794:	d9013217 	ldw	r4,1224(sp)
 200a798:	4cc00015 	stw	r19,0(r9)
 200a79c:	9100c616 	blt	r18,r4,200aab8 <___vfprintf_internal_r+0x14e8>
 200a7a0:	49000115 	stw	r4,4(r9)
 200a7a4:	4111883a 	add	r8,r8,r4
 200a7a8:	18c00044 	addi	r3,r3,1
 200a7ac:	da011d15 	stw	r8,1140(sp)
 200a7b0:	d8c11c15 	stw	r3,1136(sp)
 200a7b4:	008001c4 	movi	r2,7
 200a7b8:	10c20916 	blt	r2,r3,200afe0 <___vfprintf_internal_r+0x1a10>
 200a7bc:	4a400204 	addi	r9,r9,8
 200a7c0:	d8813217 	ldw	r2,1224(sp)
 200a7c4:	90a5c83a 	sub	r18,r18,r2
 200a7c8:	04beae0e 	bge	zero,r18,200a284 <___vfprintf_internal_r+0xcb4>
 200a7cc:	04c00404 	movi	r19,16
 200a7d0:	d8c11c17 	ldw	r3,1136(sp)
 200a7d4:	050080f4 	movhi	r20,515
 200a7d8:	a53a0d84 	addi	r20,r20,-6090
 200a7dc:	9c81be0e 	bge	r19,r18,200aed8 <___vfprintf_internal_r+0x1908>
 200a7e0:	058001c4 	movi	r22,7
 200a7e4:	ddc12917 	ldw	r23,1188(sp)
 200a7e8:	00000306 	br	200a7f8 <___vfprintf_internal_r+0x1228>
 200a7ec:	4a400204 	addi	r9,r9,8
 200a7f0:	94bffc04 	addi	r18,r18,-16
 200a7f4:	9c81b80e 	bge	r19,r18,200aed8 <___vfprintf_internal_r+0x1908>
 200a7f8:	4d000015 	stw	r20,0(r9)
 200a7fc:	4cc00115 	stw	r19,4(r9)
 200a800:	42000404 	addi	r8,r8,16
 200a804:	18c00044 	addi	r3,r3,1
 200a808:	da011d15 	stw	r8,1140(sp)
 200a80c:	d8c11c15 	stw	r3,1136(sp)
 200a810:	b0fff60e 	bge	r22,r3,200a7ec <___vfprintf_internal_r+0x121c>
 200a814:	8809883a 	mov	r4,r17
 200a818:	b80b883a 	mov	r5,r23
 200a81c:	d9811b04 	addi	r6,sp,1132
 200a820:	200959c0 	call	200959c <__sprint_r>
 200a824:	103cfd1e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a828:	da011d17 	ldw	r8,1140(sp)
 200a82c:	d8c11c17 	ldw	r3,1136(sp)
 200a830:	da400404 	addi	r9,sp,16
 200a834:	003fee06 	br	200a7f0 <___vfprintf_internal_r+0x1220>
 200a838:	d9412917 	ldw	r5,1188(sp)
 200a83c:	8809883a 	mov	r4,r17
 200a840:	d9811b04 	addi	r6,sp,1132
 200a844:	200959c0 	call	200959c <__sprint_r>
 200a848:	103cf41e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a84c:	da011d17 	ldw	r8,1140(sp)
 200a850:	d8c11c17 	ldw	r3,1136(sp)
 200a854:	da400404 	addi	r9,sp,16
 200a858:	003dee06 	br	200a014 <___vfprintf_internal_r+0xa44>
 200a85c:	00c00084 	movi	r3,2
 200a860:	bd84b03a 	or	r2,r23,r22
 200a864:	d8012585 	stb	zero,1174(sp)
 200a868:	003c3006 	br	200992c <___vfprintf_internal_r+0x35c>
 200a86c:	d8813217 	ldw	r2,1224(sp)
 200a870:	14ffffc4 	addi	r19,r2,-1
 200a874:	04ff630e 	bge	zero,r19,200a604 <___vfprintf_internal_r+0x1034>
 200a878:	05800404 	movi	r22,16
 200a87c:	050080f4 	movhi	r20,515
 200a880:	a53a0d84 	addi	r20,r20,-6090
 200a884:	b4c03c0e 	bge	r22,r19,200a978 <___vfprintf_internal_r+0x13a8>
 200a888:	05c001c4 	movi	r23,7
 200a88c:	df012917 	ldw	fp,1188(sp)
 200a890:	00000306 	br	200a8a0 <___vfprintf_internal_r+0x12d0>
 200a894:	94800204 	addi	r18,r18,8
 200a898:	9cfffc04 	addi	r19,r19,-16
 200a89c:	b4c0360e 	bge	r22,r19,200a978 <___vfprintf_internal_r+0x13a8>
 200a8a0:	95000015 	stw	r20,0(r18)
 200a8a4:	95800115 	stw	r22,4(r18)
 200a8a8:	42000404 	addi	r8,r8,16
 200a8ac:	18c00044 	addi	r3,r3,1
 200a8b0:	da011d15 	stw	r8,1140(sp)
 200a8b4:	d8c11c15 	stw	r3,1136(sp)
 200a8b8:	b8fff60e 	bge	r23,r3,200a894 <___vfprintf_internal_r+0x12c4>
 200a8bc:	8809883a 	mov	r4,r17
 200a8c0:	e00b883a 	mov	r5,fp
 200a8c4:	d9811b04 	addi	r6,sp,1132
 200a8c8:	200959c0 	call	200959c <__sprint_r>
 200a8cc:	103cd31e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a8d0:	da011d17 	ldw	r8,1140(sp)
 200a8d4:	d8c11c17 	ldw	r3,1136(sp)
 200a8d8:	dc800404 	addi	r18,sp,16
 200a8dc:	003fee06 	br	200a898 <___vfprintf_internal_r+0x12c8>
 200a8e0:	8088703a 	and	r4,r16,r2
 200a8e4:	203f1d1e 	bne	r4,zero,200a55c <___vfprintf_internal_r+0xf8c>
 200a8e8:	48800115 	stw	r2,4(r9)
 200a8ec:	42000044 	addi	r8,r8,1
 200a8f0:	18c00044 	addi	r3,r3,1
 200a8f4:	da011d15 	stw	r8,1140(sp)
 200a8f8:	d8c11c15 	stw	r3,1136(sp)
 200a8fc:	008001c4 	movi	r2,7
 200a900:	10c00216 	blt	r2,r3,200a90c <___vfprintf_internal_r+0x133c>
 200a904:	4c800204 	addi	r18,r9,8
 200a908:	003f3e06 	br	200a604 <___vfprintf_internal_r+0x1034>
 200a90c:	d9412917 	ldw	r5,1188(sp)
 200a910:	8809883a 	mov	r4,r17
 200a914:	d9811b04 	addi	r6,sp,1132
 200a918:	200959c0 	call	200959c <__sprint_r>
 200a91c:	103cbf1e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a920:	dc800404 	addi	r18,sp,16
 200a924:	da011d17 	ldw	r8,1140(sp)
 200a928:	d8c11c17 	ldw	r3,1136(sp)
 200a92c:	003f3506 	br	200a604 <___vfprintf_internal_r+0x1034>
 200a930:	d9412917 	ldw	r5,1188(sp)
 200a934:	8809883a 	mov	r4,r17
 200a938:	d9811b04 	addi	r6,sp,1132
 200a93c:	200959c0 	call	200959c <__sprint_r>
 200a940:	103cb61e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a944:	da011d17 	ldw	r8,1140(sp)
 200a948:	d8c11c17 	ldw	r3,1136(sp)
 200a94c:	da400404 	addi	r9,sp,16
 200a950:	003f0b06 	br	200a580 <___vfprintf_internal_r+0xfb0>
 200a954:	d9412917 	ldw	r5,1188(sp)
 200a958:	8809883a 	mov	r4,r17
 200a95c:	d9811b04 	addi	r6,sp,1132
 200a960:	200959c0 	call	200959c <__sprint_r>
 200a964:	103cad1e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a968:	da011d17 	ldw	r8,1140(sp)
 200a96c:	d8c11c17 	ldw	r3,1136(sp)
 200a970:	dc800404 	addi	r18,sp,16
 200a974:	003f0d06 	br	200a5ac <___vfprintf_internal_r+0xfdc>
 200a978:	95000015 	stw	r20,0(r18)
 200a97c:	94c00115 	stw	r19,4(r18)
 200a980:	44d1883a 	add	r8,r8,r19
 200a984:	003f1906 	br	200a5ec <___vfprintf_internal_r+0x101c>
 200a988:	d9412917 	ldw	r5,1188(sp)
 200a98c:	8809883a 	mov	r4,r17
 200a990:	d9811b04 	addi	r6,sp,1132
 200a994:	200959c0 	call	200959c <__sprint_r>
 200a998:	103ca01e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200a99c:	da011d17 	ldw	r8,1140(sp)
 200a9a0:	d8c11c17 	ldw	r3,1136(sp)
 200a9a4:	da400404 	addi	r9,sp,16
 200a9a8:	003db706 	br	200a088 <___vfprintf_internal_r+0xab8>
 200a9ac:	4d000015 	stw	r20,0(r9)
 200a9b0:	4c800115 	stw	r18,4(r9)
 200a9b4:	4491883a 	add	r8,r8,r18
 200a9b8:	003de706 	br	200a158 <___vfprintf_internal_r+0xb88>
 200a9bc:	8080100c 	andi	r2,r16,64
 200a9c0:	10010226 	beq	r2,zero,200adcc <___vfprintf_internal_r+0x17fc>
 200a9c4:	d8812d17 	ldw	r2,1204(sp)
 200a9c8:	002d883a 	mov	r22,zero
 200a9cc:	00c00044 	movi	r3,1
 200a9d0:	15c0000b 	ldhu	r23,0(r2)
 200a9d4:	10800104 	addi	r2,r2,4
 200a9d8:	d8812d15 	stw	r2,1204(sp)
 200a9dc:	d8012585 	stb	zero,1174(sp)
 200a9e0:	b805883a 	mov	r2,r23
 200a9e4:	003bd106 	br	200992c <___vfprintf_internal_r+0x35c>
 200a9e8:	d9012d17 	ldw	r4,1204(sp)
 200a9ec:	25800017 	ldw	r22,0(r4)
 200a9f0:	25000117 	ldw	r20,4(r4)
 200a9f4:	21000204 	addi	r4,r4,8
 200a9f8:	d9012d15 	stw	r4,1204(sp)
 200a9fc:	dd813315 	stw	r22,1228(sp)
 200aa00:	dd013415 	stw	r20,1232(sp)
 200aa04:	003d2b06 	br	2009eb4 <___vfprintf_internal_r+0x8e4>
 200aa08:	8080100c 	andi	r2,r16,64
 200aa0c:	1000fe26 	beq	r2,zero,200ae08 <___vfprintf_internal_r+0x1838>
 200aa10:	d9012d17 	ldw	r4,1204(sp)
 200aa14:	002d883a 	mov	r22,zero
 200aa18:	0007883a 	mov	r3,zero
 200aa1c:	25c0000b 	ldhu	r23,0(r4)
 200aa20:	21000104 	addi	r4,r4,4
 200aa24:	d9012d15 	stw	r4,1204(sp)
 200aa28:	b805883a 	mov	r2,r23
 200aa2c:	d8012585 	stb	zero,1174(sp)
 200aa30:	003bbe06 	br	200992c <___vfprintf_internal_r+0x35c>
 200aa34:	8080100c 	andi	r2,r16,64
 200aa38:	1000ed26 	beq	r2,zero,200adf0 <___vfprintf_internal_r+0x1820>
 200aa3c:	d9012d17 	ldw	r4,1204(sp)
 200aa40:	002d883a 	mov	r22,zero
 200aa44:	25c0000b 	ldhu	r23,0(r4)
 200aa48:	21000104 	addi	r4,r4,4
 200aa4c:	d9012d15 	stw	r4,1204(sp)
 200aa50:	003cd206 	br	2009d9c <___vfprintf_internal_r+0x7cc>
 200aa54:	00c00084 	movi	r3,2
 200aa58:	d8012585 	stb	zero,1174(sp)
 200aa5c:	003bb306 	br	200992c <___vfprintf_internal_r+0x35c>
 200aa60:	8080040c 	andi	r2,r16,16
 200aa64:	1000f11e 	bne	r2,zero,200ae2c <___vfprintf_internal_r+0x185c>
 200aa68:	8400100c 	andi	r16,r16,64
 200aa6c:	80015526 	beq	r16,zero,200afc4 <___vfprintf_internal_r+0x19f4>
 200aa70:	da012d17 	ldw	r8,1204(sp)
 200aa74:	d8c12c17 	ldw	r3,1200(sp)
 200aa78:	40800017 	ldw	r2,0(r8)
 200aa7c:	42000104 	addi	r8,r8,4
 200aa80:	da012d15 	stw	r8,1204(sp)
 200aa84:	10c0000d 	sth	r3,0(r2)
 200aa88:	003b0706 	br	20096a8 <___vfprintf_internal_r+0xd8>
 200aa8c:	8080100c 	andi	r2,r16,64
 200aa90:	1000c726 	beq	r2,zero,200adb0 <___vfprintf_internal_r+0x17e0>
 200aa94:	da012d17 	ldw	r8,1204(sp)
 200aa98:	45c0000f 	ldh	r23,0(r8)
 200aa9c:	42000104 	addi	r8,r8,4
 200aaa0:	da012d15 	stw	r8,1204(sp)
 200aaa4:	b82dd7fa 	srai	r22,r23,31
 200aaa8:	b005883a 	mov	r2,r22
 200aaac:	003c1006 	br	2009af0 <___vfprintf_internal_r+0x520>
 200aab0:	ac800007 	ldb	r18,0(r21)
 200aab4:	003b2406 	br	2009748 <___vfprintf_internal_r+0x178>
 200aab8:	4c800115 	stw	r18,4(r9)
 200aabc:	9211883a 	add	r8,r18,r8
 200aac0:	18c00044 	addi	r3,r3,1
 200aac4:	da011d15 	stw	r8,1140(sp)
 200aac8:	d8c11c15 	stw	r3,1136(sp)
 200aacc:	008001c4 	movi	r2,7
 200aad0:	10c15416 	blt	r2,r3,200b024 <___vfprintf_internal_r+0x1a54>
 200aad4:	4a400204 	addi	r9,r9,8
 200aad8:	d8813717 	ldw	r2,1244(sp)
 200aadc:	9ca7883a 	add	r19,r19,r18
 200aae0:	48800015 	stw	r2,0(r9)
 200aae4:	00800044 	movi	r2,1
 200aae8:	48800115 	stw	r2,4(r9)
 200aaec:	4091883a 	add	r8,r8,r2
 200aaf0:	1887883a 	add	r3,r3,r2
 200aaf4:	da011d15 	stw	r8,1140(sp)
 200aaf8:	d8c11c15 	stw	r3,1136(sp)
 200aafc:	008001c4 	movi	r2,7
 200ab00:	10c14016 	blt	r2,r3,200b004 <___vfprintf_internal_r+0x1a34>
 200ab04:	4a400204 	addi	r9,r9,8
 200ab08:	d9013217 	ldw	r4,1224(sp)
 200ab0c:	da011d17 	ldw	r8,1140(sp)
 200ab10:	d8c11c17 	ldw	r3,1136(sp)
 200ab14:	24a5c83a 	sub	r18,r4,r18
 200ab18:	4cc00015 	stw	r19,0(r9)
 200ab1c:	003fa406 	br	200a9b0 <___vfprintf_internal_r+0x13e0>
 200ab20:	04c080f4 	movhi	r19,515
 200ab24:	9cf9fa04 	addi	r19,r19,-6168
 200ab28:	003cf406 	br	2009efc <___vfprintf_internal_r+0x92c>
 200ab2c:	d9412917 	ldw	r5,1188(sp)
 200ab30:	8809883a 	mov	r4,r17
 200ab34:	d9811b04 	addi	r6,sp,1132
 200ab38:	200959c0 	call	200959c <__sprint_r>
 200ab3c:	103c371e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200ab40:	da011d17 	ldw	r8,1140(sp)
 200ab44:	da400404 	addi	r9,sp,16
 200ab48:	003e1c06 	br	200a3bc <___vfprintf_internal_r+0xdec>
 200ab4c:	008080f4 	movhi	r2,515
 200ab50:	10ba0904 	addi	r2,r2,-6108
 200ab54:	48800015 	stw	r2,0(r9)
 200ab58:	00800044 	movi	r2,1
 200ab5c:	48800115 	stw	r2,4(r9)
 200ab60:	4091883a 	add	r8,r8,r2
 200ab64:	1887883a 	add	r3,r3,r2
 200ab68:	da011d15 	stw	r8,1140(sp)
 200ab6c:	d8c11c15 	stw	r3,1136(sp)
 200ab70:	008001c4 	movi	r2,7
 200ab74:	10c0c316 	blt	r2,r3,200ae84 <___vfprintf_internal_r+0x18b4>
 200ab78:	4a400204 	addi	r9,r9,8
 200ab7c:	9000041e 	bne	r18,zero,200ab90 <___vfprintf_internal_r+0x15c0>
 200ab80:	d8c13217 	ldw	r3,1224(sp)
 200ab84:	1800021e 	bne	r3,zero,200ab90 <___vfprintf_internal_r+0x15c0>
 200ab88:	8080004c 	andi	r2,r16,1
 200ab8c:	103d7826 	beq	r2,zero,200a170 <___vfprintf_internal_r+0xba0>
 200ab90:	d8c11c17 	ldw	r3,1136(sp)
 200ab94:	d9013717 	ldw	r4,1244(sp)
 200ab98:	00800044 	movi	r2,1
 200ab9c:	48800115 	stw	r2,4(r9)
 200aba0:	49000015 	stw	r4,0(r9)
 200aba4:	4091883a 	add	r8,r8,r2
 200aba8:	1887883a 	add	r3,r3,r2
 200abac:	da011d15 	stw	r8,1140(sp)
 200abb0:	d8c11c15 	stw	r3,1136(sp)
 200abb4:	008001c4 	movi	r2,7
 200abb8:	10c12e16 	blt	r2,r3,200b074 <___vfprintf_internal_r+0x1aa4>
 200abbc:	4a400204 	addi	r9,r9,8
 200abc0:	04a5c83a 	sub	r18,zero,r18
 200abc4:	0480de0e 	bge	zero,r18,200af40 <___vfprintf_internal_r+0x1970>
 200abc8:	05800404 	movi	r22,16
 200abcc:	050080f4 	movhi	r20,515
 200abd0:	a53a0d84 	addi	r20,r20,-6090
 200abd4:	b480e20e 	bge	r22,r18,200af60 <___vfprintf_internal_r+0x1990>
 200abd8:	05c001c4 	movi	r23,7
 200abdc:	df012917 	ldw	fp,1188(sp)
 200abe0:	00000306 	br	200abf0 <___vfprintf_internal_r+0x1620>
 200abe4:	4a400204 	addi	r9,r9,8
 200abe8:	94bffc04 	addi	r18,r18,-16
 200abec:	b480dc0e 	bge	r22,r18,200af60 <___vfprintf_internal_r+0x1990>
 200abf0:	4d000015 	stw	r20,0(r9)
 200abf4:	4d800115 	stw	r22,4(r9)
 200abf8:	42000404 	addi	r8,r8,16
 200abfc:	18c00044 	addi	r3,r3,1
 200ac00:	da011d15 	stw	r8,1140(sp)
 200ac04:	d8c11c15 	stw	r3,1136(sp)
 200ac08:	b8fff60e 	bge	r23,r3,200abe4 <___vfprintf_internal_r+0x1614>
 200ac0c:	8809883a 	mov	r4,r17
 200ac10:	e00b883a 	mov	r5,fp
 200ac14:	d9811b04 	addi	r6,sp,1132
 200ac18:	200959c0 	call	200959c <__sprint_r>
 200ac1c:	103bff1e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200ac20:	da011d17 	ldw	r8,1140(sp)
 200ac24:	d8c11c17 	ldw	r3,1136(sp)
 200ac28:	da400404 	addi	r9,sp,16
 200ac2c:	003fee06 	br	200abe8 <___vfprintf_internal_r+0x1618>
 200ac30:	da413c15 	stw	r9,1264(sp)
 200ac34:	20077300 	call	2007730 <__isnand>
 200ac38:	da413c17 	ldw	r9,1264(sp)
 200ac3c:	1000851e 	bne	r2,zero,200ae54 <___vfprintf_internal_r+0x1884>
 200ac40:	00bfffc4 	movi	r2,-1
 200ac44:	e0817626 	beq	fp,r2,200b220 <___vfprintf_internal_r+0x1c50>
 200ac48:	008019c4 	movi	r2,103
 200ac4c:	90817126 	beq	r18,r2,200b214 <___vfprintf_internal_r+0x1c44>
 200ac50:	008011c4 	movi	r2,71
 200ac54:	90816f26 	beq	r18,r2,200b214 <___vfprintf_internal_r+0x1c44>
 200ac58:	82004014 	ori	r8,r16,256
 200ac5c:	da012a15 	stw	r8,1192(sp)
 200ac60:	a0017116 	blt	r20,zero,200b228 <___vfprintf_internal_r+0x1c58>
 200ac64:	d8012f05 	stb	zero,1212(sp)
 200ac68:	00801984 	movi	r2,102
 200ac6c:	90811226 	beq	r18,r2,200b0b8 <___vfprintf_internal_r+0x1ae8>
 200ac70:	00801184 	movi	r2,70
 200ac74:	90811026 	beq	r18,r2,200b0b8 <___vfprintf_internal_r+0x1ae8>
 200ac78:	00801944 	movi	r2,101
 200ac7c:	90819b26 	beq	r18,r2,200b2ec <___vfprintf_internal_r+0x1d1c>
 200ac80:	00801144 	movi	r2,69
 200ac84:	90819926 	beq	r18,r2,200b2ec <___vfprintf_internal_r+0x1d1c>
 200ac88:	e02f883a 	mov	r23,fp
 200ac8c:	d8812404 	addi	r2,sp,1168
 200ac90:	d8800115 	stw	r2,4(sp)
 200ac94:	d8812304 	addi	r2,sp,1164
 200ac98:	d8800215 	stw	r2,8(sp)
 200ac9c:	d8812204 	addi	r2,sp,1160
 200aca0:	ddc00015 	stw	r23,0(sp)
 200aca4:	d8800315 	stw	r2,12(sp)
 200aca8:	8809883a 	mov	r4,r17
 200acac:	b00b883a 	mov	r5,r22
 200acb0:	a00d883a 	mov	r6,r20
 200acb4:	01c00084 	movi	r7,2
 200acb8:	da413c15 	stw	r9,1264(sp)
 200acbc:	200b8540 	call	200b854 <_dtoa_r>
 200acc0:	1027883a 	mov	r19,r2
 200acc4:	008019c4 	movi	r2,103
 200acc8:	da413c17 	ldw	r9,1264(sp)
 200accc:	90818c1e 	bne	r18,r2,200b300 <___vfprintf_internal_r+0x1d30>
 200acd0:	8080004c 	andi	r2,r16,1
 200acd4:	10017926 	beq	r2,zero,200b2bc <___vfprintf_internal_r+0x1cec>
 200acd8:	00801184 	movi	r2,70
 200acdc:	9dc7883a 	add	r3,r19,r23
 200ace0:	90810626 	beq	r18,r2,200b0fc <___vfprintf_internal_r+0x1b2c>
 200ace4:	b009883a 	mov	r4,r22
 200ace8:	a00b883a 	mov	r5,r20
 200acec:	000d883a 	mov	r6,zero
 200acf0:	000f883a 	mov	r7,zero
 200acf4:	d8c13b15 	stw	r3,1260(sp)
 200acf8:	da413c15 	stw	r9,1264(sp)
 200acfc:	20109e80 	call	20109e8 <__eqdf2>
 200ad00:	d8c13b17 	ldw	r3,1260(sp)
 200ad04:	da413c17 	ldw	r9,1264(sp)
 200ad08:	10000726 	beq	r2,zero,200ad28 <___vfprintf_internal_r+0x1758>
 200ad0c:	d8812217 	ldw	r2,1160(sp)
 200ad10:	10c1962e 	bgeu	r2,r3,200b36c <___vfprintf_internal_r+0x1d9c>
 200ad14:	01000c04 	movi	r4,48
 200ad18:	11000005 	stb	r4,0(r2)
 200ad1c:	10800044 	addi	r2,r2,1
 200ad20:	d8812215 	stw	r2,1160(sp)
 200ad24:	10fffc1e 	bne	r2,r3,200ad18 <___vfprintf_internal_r+0x1748>
 200ad28:	1cc7c83a 	sub	r3,r3,r19
 200ad2c:	d8c13215 	stw	r3,1224(sp)
 200ad30:	008019c4 	movi	r2,103
 200ad34:	90810626 	beq	r18,r2,200b150 <___vfprintf_internal_r+0x1b80>
 200ad38:	008011c4 	movi	r2,71
 200ad3c:	90810426 	beq	r18,r2,200b150 <___vfprintf_internal_r+0x1b80>
 200ad40:	00801984 	movi	r2,102
 200ad44:	90819a1e 	bne	r18,r2,200b3b0 <___vfprintf_internal_r+0x1de0>
 200ad48:	d8812417 	ldw	r2,1168(sp)
 200ad4c:	d8812b15 	stw	r2,1196(sp)
 200ad50:	0081880e 	bge	zero,r2,200b374 <___vfprintf_internal_r+0x1da4>
 200ad54:	e000021e 	bne	fp,zero,200ad60 <___vfprintf_internal_r+0x1790>
 200ad58:	8400004c 	andi	r16,r16,1
 200ad5c:	80000426 	beq	r16,zero,200ad70 <___vfprintf_internal_r+0x17a0>
 200ad60:	d8812b17 	ldw	r2,1196(sp)
 200ad64:	e2000044 	addi	r8,fp,1
 200ad68:	1205883a 	add	r2,r2,r8
 200ad6c:	d8812b15 	stw	r2,1196(sp)
 200ad70:	d8812815 	stw	r2,1184(sp)
 200ad74:	10011716 	blt	r2,zero,200b1d4 <___vfprintf_internal_r+0x1c04>
 200ad78:	ddc12f07 	ldb	r23,1212(sp)
 200ad7c:	b800ca26 	beq	r23,zero,200b0a8 <___vfprintf_internal_r+0x1ad8>
 200ad80:	00800b44 	movi	r2,45
 200ad84:	d8812585 	stb	r2,1174(sp)
 200ad88:	dc012a17 	ldw	r16,1192(sp)
 200ad8c:	d8013115 	stw	zero,1220(sp)
 200ad90:	003afe06 	br	200998c <___vfprintf_internal_r+0x3bc>
 200ad94:	d8812b17 	ldw	r2,1196(sp)
 200ad98:	d8812815 	stw	r2,1184(sp)
 200ad9c:	10005e16 	blt	r2,zero,200af18 <___vfprintf_internal_r+0x1948>
 200ada0:	d8812583 	ldbu	r2,1174(sp)
 200ada4:	ddc12d15 	stw	r23,1204(sp)
 200ada8:	d8013115 	stw	zero,1220(sp)
 200adac:	003af306 	br	200997c <___vfprintf_internal_r+0x3ac>
 200adb0:	d8812d17 	ldw	r2,1204(sp)
 200adb4:	15c00017 	ldw	r23,0(r2)
 200adb8:	10800104 	addi	r2,r2,4
 200adbc:	d8812d15 	stw	r2,1204(sp)
 200adc0:	b82dd7fa 	srai	r22,r23,31
 200adc4:	b005883a 	mov	r2,r22
 200adc8:	003b4906 	br	2009af0 <___vfprintf_internal_r+0x520>
 200adcc:	d8c12d17 	ldw	r3,1204(sp)
 200add0:	002d883a 	mov	r22,zero
 200add4:	1dc00017 	ldw	r23,0(r3)
 200add8:	18c00104 	addi	r3,r3,4
 200addc:	d8c12d15 	stw	r3,1204(sp)
 200ade0:	b805883a 	mov	r2,r23
 200ade4:	00c00044 	movi	r3,1
 200ade8:	d8012585 	stb	zero,1174(sp)
 200adec:	003acf06 	br	200992c <___vfprintf_internal_r+0x35c>
 200adf0:	da012d17 	ldw	r8,1204(sp)
 200adf4:	002d883a 	mov	r22,zero
 200adf8:	45c00017 	ldw	r23,0(r8)
 200adfc:	42000104 	addi	r8,r8,4
 200ae00:	da012d15 	stw	r8,1204(sp)
 200ae04:	003be506 	br	2009d9c <___vfprintf_internal_r+0x7cc>
 200ae08:	da012d17 	ldw	r8,1204(sp)
 200ae0c:	002d883a 	mov	r22,zero
 200ae10:	0007883a 	mov	r3,zero
 200ae14:	45c00017 	ldw	r23,0(r8)
 200ae18:	42000104 	addi	r8,r8,4
 200ae1c:	da012d15 	stw	r8,1204(sp)
 200ae20:	b805883a 	mov	r2,r23
 200ae24:	d8012585 	stb	zero,1174(sp)
 200ae28:	003ac006 	br	200992c <___vfprintf_internal_r+0x35c>
 200ae2c:	d8c12d17 	ldw	r3,1204(sp)
 200ae30:	d9012c17 	ldw	r4,1200(sp)
 200ae34:	18800017 	ldw	r2,0(r3)
 200ae38:	18c00104 	addi	r3,r3,4
 200ae3c:	d8c12d15 	stw	r3,1204(sp)
 200ae40:	11000015 	stw	r4,0(r2)
 200ae44:	003a1806 	br	20096a8 <___vfprintf_internal_r+0xd8>
 200ae48:	073fffc4 	movi	fp,-1
 200ae4c:	202b883a 	mov	r21,r4
 200ae50:	003a3e06 	br	200974c <___vfprintf_internal_r+0x17c>
 200ae54:	008011c4 	movi	r2,71
 200ae58:	14809016 	blt	r2,r18,200b09c <___vfprintf_internal_r+0x1acc>
 200ae5c:	04c080f4 	movhi	r19,515
 200ae60:	9cf9fb04 	addi	r19,r19,-6164
 200ae64:	00c000c4 	movi	r3,3
 200ae68:	00bfdfc4 	movi	r2,-129
 200ae6c:	80a0703a 	and	r16,r16,r2
 200ae70:	d8c12815 	stw	r3,1184(sp)
 200ae74:	d8812583 	ldbu	r2,1174(sp)
 200ae78:	d8c12b15 	stw	r3,1196(sp)
 200ae7c:	d8013115 	stw	zero,1220(sp)
 200ae80:	003abe06 	br	200997c <___vfprintf_internal_r+0x3ac>
 200ae84:	d9412917 	ldw	r5,1188(sp)
 200ae88:	8809883a 	mov	r4,r17
 200ae8c:	d9811b04 	addi	r6,sp,1132
 200ae90:	200959c0 	call	200959c <__sprint_r>
 200ae94:	103b611e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200ae98:	dc812417 	ldw	r18,1168(sp)
 200ae9c:	da011d17 	ldw	r8,1140(sp)
 200aea0:	da400404 	addi	r9,sp,16
 200aea4:	003f3506 	br	200ab7c <___vfprintf_internal_r+0x15ac>
 200aea8:	ad400044 	addi	r21,r21,1
 200aeac:	84000814 	ori	r16,r16,32
 200aeb0:	14800047 	ldb	r18,1(r2)
 200aeb4:	003a2406 	br	2009748 <___vfprintf_internal_r+0x178>
 200aeb8:	d9412917 	ldw	r5,1188(sp)
 200aebc:	8809883a 	mov	r4,r17
 200aec0:	d9811b04 	addi	r6,sp,1132
 200aec4:	200959c0 	call	200959c <__sprint_r>
 200aec8:	103b541e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200aecc:	da011d17 	ldw	r8,1140(sp)
 200aed0:	da400404 	addi	r9,sp,16
 200aed4:	003d4a06 	br	200a400 <___vfprintf_internal_r+0xe30>
 200aed8:	4d000015 	stw	r20,0(r9)
 200aedc:	4c800115 	stw	r18,4(r9)
 200aee0:	4491883a 	add	r8,r8,r18
 200aee4:	18c00044 	addi	r3,r3,1
 200aee8:	da011d15 	stw	r8,1140(sp)
 200aeec:	d8c11c15 	stw	r3,1136(sp)
 200aef0:	008001c4 	movi	r2,7
 200aef4:	10fcdc16 	blt	r2,r3,200a268 <___vfprintf_internal_r+0xc98>
 200aef8:	4a400204 	addi	r9,r9,8
 200aefc:	003ce106 	br	200a284 <___vfprintf_internal_r+0xcb4>
 200af00:	da413c15 	stw	r9,1264(sp)
 200af04:	20095100 	call	2009510 <strlen>
 200af08:	d8812b15 	stw	r2,1196(sp)
 200af0c:	d8812815 	stw	r2,1184(sp)
 200af10:	da413c17 	ldw	r9,1264(sp)
 200af14:	103fa20e 	bge	r2,zero,200ada0 <___vfprintf_internal_r+0x17d0>
 200af18:	d8012815 	stw	zero,1184(sp)
 200af1c:	003fa006 	br	200ada0 <___vfprintf_internal_r+0x17d0>
 200af20:	d9412917 	ldw	r5,1188(sp)
 200af24:	8809883a 	mov	r4,r17
 200af28:	d9811b04 	addi	r6,sp,1132
 200af2c:	200959c0 	call	200959c <__sprint_r>
 200af30:	103b3a1e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200af34:	da011d17 	ldw	r8,1140(sp)
 200af38:	d8c11c17 	ldw	r3,1136(sp)
 200af3c:	da400404 	addi	r9,sp,16
 200af40:	d8813217 	ldw	r2,1224(sp)
 200af44:	4cc00015 	stw	r19,0(r9)
 200af48:	48800115 	stw	r2,4(r9)
 200af4c:	4091883a 	add	r8,r8,r2
 200af50:	003c8106 	br	200a158 <___vfprintf_internal_r+0xb88>
 200af54:	00800b44 	movi	r2,45
 200af58:	d8812585 	stb	r2,1174(sp)
 200af5c:	003be306 	br	2009eec <___vfprintf_internal_r+0x91c>
 200af60:	4d000015 	stw	r20,0(r9)
 200af64:	4c800115 	stw	r18,4(r9)
 200af68:	4491883a 	add	r8,r8,r18
 200af6c:	18c00044 	addi	r3,r3,1
 200af70:	da011d15 	stw	r8,1140(sp)
 200af74:	d8c11c15 	stw	r3,1136(sp)
 200af78:	008001c4 	movi	r2,7
 200af7c:	10ffe816 	blt	r2,r3,200af20 <___vfprintf_internal_r+0x1950>
 200af80:	4a400204 	addi	r9,r9,8
 200af84:	003fee06 	br	200af40 <___vfprintf_internal_r+0x1970>
 200af88:	df012b15 	stw	fp,1196(sp)
 200af8c:	00800184 	movi	r2,6
 200af90:	1700072e 	bgeu	r2,fp,200afb0 <___vfprintf_internal_r+0x19e0>
 200af94:	d8812b15 	stw	r2,1196(sp)
 200af98:	d8812815 	stw	r2,1184(sp)
 200af9c:	ddc12d15 	stw	r23,1204(sp)
 200afa0:	04c080f4 	movhi	r19,515
 200afa4:	9cfa0704 	addi	r19,r19,-6116
 200afa8:	d8013115 	stw	zero,1220(sp)
 200afac:	003a7a06 	br	2009998 <___vfprintf_internal_r+0x3c8>
 200afb0:	d8812b17 	ldw	r2,1196(sp)
 200afb4:	d8812815 	stw	r2,1184(sp)
 200afb8:	103ff80e 	bge	r2,zero,200af9c <___vfprintf_internal_r+0x19cc>
 200afbc:	d8012815 	stw	zero,1184(sp)
 200afc0:	003ff606 	br	200af9c <___vfprintf_internal_r+0x19cc>
 200afc4:	d9012d17 	ldw	r4,1204(sp)
 200afc8:	da012c17 	ldw	r8,1200(sp)
 200afcc:	20800017 	ldw	r2,0(r4)
 200afd0:	21000104 	addi	r4,r4,4
 200afd4:	d9012d15 	stw	r4,1204(sp)
 200afd8:	12000015 	stw	r8,0(r2)
 200afdc:	0039b206 	br	20096a8 <___vfprintf_internal_r+0xd8>
 200afe0:	d9412917 	ldw	r5,1188(sp)
 200afe4:	8809883a 	mov	r4,r17
 200afe8:	d9811b04 	addi	r6,sp,1132
 200afec:	200959c0 	call	200959c <__sprint_r>
 200aff0:	103b0a1e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200aff4:	dc812417 	ldw	r18,1168(sp)
 200aff8:	da011d17 	ldw	r8,1140(sp)
 200affc:	da400404 	addi	r9,sp,16
 200b000:	003def06 	br	200a7c0 <___vfprintf_internal_r+0x11f0>
 200b004:	d9412917 	ldw	r5,1188(sp)
 200b008:	8809883a 	mov	r4,r17
 200b00c:	d9811b04 	addi	r6,sp,1132
 200b010:	200959c0 	call	200959c <__sprint_r>
 200b014:	103b011e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200b018:	dc812417 	ldw	r18,1168(sp)
 200b01c:	da400404 	addi	r9,sp,16
 200b020:	003eb906 	br	200ab08 <___vfprintf_internal_r+0x1538>
 200b024:	d9412917 	ldw	r5,1188(sp)
 200b028:	8809883a 	mov	r4,r17
 200b02c:	d9811b04 	addi	r6,sp,1132
 200b030:	200959c0 	call	200959c <__sprint_r>
 200b034:	103af91e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200b038:	dc812417 	ldw	r18,1168(sp)
 200b03c:	da011d17 	ldw	r8,1140(sp)
 200b040:	d8c11c17 	ldw	r3,1136(sp)
 200b044:	da400404 	addi	r9,sp,16
 200b048:	003ea306 	br	200aad8 <___vfprintf_internal_r+0x1508>
 200b04c:	00800244 	movi	r2,9
 200b050:	15fda636 	bltu	r2,r23,200a6ec <___vfprintf_internal_r+0x111c>
 200b054:	dd010e04 	addi	r20,sp,1080
 200b058:	003dc206 	br	200a764 <___vfprintf_internal_r+0x1194>
 200b05c:	df012815 	stw	fp,1184(sp)
 200b060:	d8812583 	ldbu	r2,1174(sp)
 200b064:	df012b15 	stw	fp,1196(sp)
 200b068:	ddc12d15 	stw	r23,1204(sp)
 200b06c:	d8013115 	stw	zero,1220(sp)
 200b070:	003a4206 	br	200997c <___vfprintf_internal_r+0x3ac>
 200b074:	d9412917 	ldw	r5,1188(sp)
 200b078:	8809883a 	mov	r4,r17
 200b07c:	d9811b04 	addi	r6,sp,1132
 200b080:	200959c0 	call	200959c <__sprint_r>
 200b084:	103ae51e 	bne	r2,zero,2009c1c <___vfprintf_internal_r+0x64c>
 200b088:	dc812417 	ldw	r18,1168(sp)
 200b08c:	da011d17 	ldw	r8,1140(sp)
 200b090:	d8c11c17 	ldw	r3,1136(sp)
 200b094:	da400404 	addi	r9,sp,16
 200b098:	003ec906 	br	200abc0 <___vfprintf_internal_r+0x15f0>
 200b09c:	04c080f4 	movhi	r19,515
 200b0a0:	9cf9fc04 	addi	r19,r19,-6160
 200b0a4:	003f6f06 	br	200ae64 <___vfprintf_internal_r+0x1894>
 200b0a8:	d8812583 	ldbu	r2,1174(sp)
 200b0ac:	dc012a17 	ldw	r16,1192(sp)
 200b0b0:	d8013115 	stw	zero,1220(sp)
 200b0b4:	003a3106 	br	200997c <___vfprintf_internal_r+0x3ac>
 200b0b8:	d8812404 	addi	r2,sp,1168
 200b0bc:	d8800115 	stw	r2,4(sp)
 200b0c0:	d8812304 	addi	r2,sp,1164
 200b0c4:	d8800215 	stw	r2,8(sp)
 200b0c8:	d8812204 	addi	r2,sp,1160
 200b0cc:	df000015 	stw	fp,0(sp)
 200b0d0:	d8800315 	stw	r2,12(sp)
 200b0d4:	8809883a 	mov	r4,r17
 200b0d8:	b00b883a 	mov	r5,r22
 200b0dc:	a00d883a 	mov	r6,r20
 200b0e0:	01c000c4 	movi	r7,3
 200b0e4:	da413c15 	stw	r9,1264(sp)
 200b0e8:	200b8540 	call	200b854 <_dtoa_r>
 200b0ec:	da413c17 	ldw	r9,1264(sp)
 200b0f0:	1027883a 	mov	r19,r2
 200b0f4:	1707883a 	add	r3,r2,fp
 200b0f8:	e02f883a 	mov	r23,fp
 200b0fc:	99000007 	ldb	r4,0(r19)
 200b100:	00800c04 	movi	r2,48
 200b104:	20800326 	beq	r4,r2,200b114 <___vfprintf_internal_r+0x1b44>
 200b108:	da812417 	ldw	r10,1168(sp)
 200b10c:	1a87883a 	add	r3,r3,r10
 200b110:	003ef406 	br	200ace4 <___vfprintf_internal_r+0x1714>
 200b114:	b009883a 	mov	r4,r22
 200b118:	a00b883a 	mov	r5,r20
 200b11c:	000d883a 	mov	r6,zero
 200b120:	000f883a 	mov	r7,zero
 200b124:	d8c13b15 	stw	r3,1260(sp)
 200b128:	da413c15 	stw	r9,1264(sp)
 200b12c:	2010a440 	call	2010a44 <__nedf2>
 200b130:	d8c13b17 	ldw	r3,1260(sp)
 200b134:	da413c17 	ldw	r9,1264(sp)
 200b138:	103ff326 	beq	r2,zero,200b108 <___vfprintf_internal_r+0x1b38>
 200b13c:	00800044 	movi	r2,1
 200b140:	15d5c83a 	sub	r10,r2,r23
 200b144:	da812415 	stw	r10,1168(sp)
 200b148:	1a87883a 	add	r3,r3,r10
 200b14c:	003ee506 	br	200ace4 <___vfprintf_internal_r+0x1714>
 200b150:	d8812417 	ldw	r2,1168(sp)
 200b154:	d8812b15 	stw	r2,1196(sp)
 200b158:	1029883a 	mov	r20,r2
 200b15c:	00bfff44 	movi	r2,-3
 200b160:	a0800116 	blt	r20,r2,200b168 <___vfprintf_internal_r+0x1b98>
 200b164:	e5001d0e 	bge	fp,r20,200b1dc <___vfprintf_internal_r+0x1c0c>
 200b168:	94bfff84 	addi	r18,r18,-2
 200b16c:	a53fffc4 	addi	r20,r20,-1
 200b170:	dd012415 	stw	r20,1168(sp)
 200b174:	dc811fc5 	stb	r18,1151(sp)
 200b178:	a0007816 	blt	r20,zero,200b35c <___vfprintf_internal_r+0x1d8c>
 200b17c:	00800ac4 	movi	r2,43
 200b180:	d8812005 	stb	r2,1152(sp)
 200b184:	00800244 	movi	r2,9
 200b188:	15002b16 	blt	r2,r20,200b238 <___vfprintf_internal_r+0x1c68>
 200b18c:	00800c04 	movi	r2,48
 200b190:	a5000c04 	addi	r20,r20,48
 200b194:	d8812045 	stb	r2,1153(sp)
 200b198:	dd012085 	stb	r20,1154(sp)
 200b19c:	d8c120c4 	addi	r3,sp,1155
 200b1a0:	d8811fc4 	addi	r2,sp,1151
 200b1a4:	da013217 	ldw	r8,1224(sp)
 200b1a8:	1885c83a 	sub	r2,r3,r2
 200b1ac:	d8813515 	stw	r2,1236(sp)
 200b1b0:	4085883a 	add	r2,r8,r2
 200b1b4:	d8812b15 	stw	r2,1196(sp)
 200b1b8:	00800044 	movi	r2,1
 200b1bc:	1200610e 	bge	r2,r8,200b344 <___vfprintf_internal_r+0x1d74>
 200b1c0:	d8812b17 	ldw	r2,1196(sp)
 200b1c4:	10800044 	addi	r2,r2,1
 200b1c8:	d8812b15 	stw	r2,1196(sp)
 200b1cc:	d8812815 	stw	r2,1184(sp)
 200b1d0:	103ee90e 	bge	r2,zero,200ad78 <___vfprintf_internal_r+0x17a8>
 200b1d4:	d8012815 	stw	zero,1184(sp)
 200b1d8:	003ee706 	br	200ad78 <___vfprintf_internal_r+0x17a8>
 200b1dc:	d8812b17 	ldw	r2,1196(sp)
 200b1e0:	da013217 	ldw	r8,1224(sp)
 200b1e4:	12003716 	blt	r2,r8,200b2c4 <___vfprintf_internal_r+0x1cf4>
 200b1e8:	8400004c 	andi	r16,r16,1
 200b1ec:	80000326 	beq	r16,zero,200b1fc <___vfprintf_internal_r+0x1c2c>
 200b1f0:	d8812b17 	ldw	r2,1196(sp)
 200b1f4:	10800044 	addi	r2,r2,1
 200b1f8:	d8812b15 	stw	r2,1196(sp)
 200b1fc:	d8812815 	stw	r2,1184(sp)
 200b200:	10003716 	blt	r2,zero,200b2e0 <___vfprintf_internal_r+0x1d10>
 200b204:	048019c4 	movi	r18,103
 200b208:	003edb06 	br	200ad78 <___vfprintf_internal_r+0x17a8>
 200b20c:	d8012815 	stw	zero,1184(sp)
 200b210:	003b6906 	br	2009fb8 <___vfprintf_internal_r+0x9e8>
 200b214:	e03e901e 	bne	fp,zero,200ac58 <___vfprintf_internal_r+0x1688>
 200b218:	07000044 	movi	fp,1
 200b21c:	003e8e06 	br	200ac58 <___vfprintf_internal_r+0x1688>
 200b220:	07000184 	movi	fp,6
 200b224:	003e8c06 	br	200ac58 <___vfprintf_internal_r+0x1688>
 200b228:	00c00b44 	movi	r3,45
 200b22c:	a520003c 	xorhi	r20,r20,32768
 200b230:	d8c12f05 	stb	r3,1212(sp)
 200b234:	003e8c06 	br	200ac68 <___vfprintf_internal_r+0x1698>
 200b238:	d8c11f84 	addi	r3,sp,1150
 200b23c:	102f883a 	mov	r23,r2
 200b240:	4839883a 	mov	fp,r9
 200b244:	a009883a 	mov	r4,r20
 200b248:	01400284 	movi	r5,10
 200b24c:	182d883a 	mov	r22,r3
 200b250:	20082cc0 	call	20082cc <__modsi3>
 200b254:	10800c04 	addi	r2,r2,48
 200b258:	a009883a 	mov	r4,r20
 200b25c:	b0800005 	stb	r2,0(r22)
 200b260:	01400284 	movi	r5,10
 200b264:	200827c0 	call	200827c <__divsi3>
 200b268:	1029883a 	mov	r20,r2
 200b26c:	b0ffffc4 	addi	r3,r22,-1
 200b270:	b8bff416 	blt	r23,r2,200b244 <___vfprintf_internal_r+0x1c74>
 200b274:	11400c04 	addi	r5,r2,48
 200b278:	b17fffc5 	stb	r5,-1(r22)
 200b27c:	d8811fc4 	addi	r2,sp,1151
 200b280:	e013883a 	mov	r9,fp
 200b284:	1880482e 	bgeu	r3,r2,200b3a8 <___vfprintf_internal_r+0x1dd8>
 200b288:	b007883a 	mov	r3,r22
 200b28c:	d9012044 	addi	r4,sp,1153
 200b290:	00000206 	br	200b29c <___vfprintf_internal_r+0x1ccc>
 200b294:	19400003 	ldbu	r5,0(r3)
 200b298:	18c00044 	addi	r3,r3,1
 200b29c:	21400005 	stb	r5,0(r4)
 200b2a0:	21000044 	addi	r4,r4,1
 200b2a4:	10fffb1e 	bne	r2,r3,200b294 <___vfprintf_internal_r+0x1cc4>
 200b2a8:	d8c12004 	addi	r3,sp,1152
 200b2ac:	1d87c83a 	sub	r3,r3,r22
 200b2b0:	d9012044 	addi	r4,sp,1153
 200b2b4:	20c7883a 	add	r3,r4,r3
 200b2b8:	003fba06 	br	200b1a4 <___vfprintf_internal_r+0x1bd4>
 200b2bc:	d8c12217 	ldw	r3,1160(sp)
 200b2c0:	003e9906 	br	200ad28 <___vfprintf_internal_r+0x1758>
 200b2c4:	05000b0e 	bge	zero,r20,200b2f4 <___vfprintf_internal_r+0x1d24>
 200b2c8:	05000044 	movi	r20,1
 200b2cc:	da013217 	ldw	r8,1224(sp)
 200b2d0:	a229883a 	add	r20,r20,r8
 200b2d4:	dd012b15 	stw	r20,1196(sp)
 200b2d8:	dd012815 	stw	r20,1184(sp)
 200b2dc:	a03fc90e 	bge	r20,zero,200b204 <___vfprintf_internal_r+0x1c34>
 200b2e0:	d8012815 	stw	zero,1184(sp)
 200b2e4:	048019c4 	movi	r18,103
 200b2e8:	003ea306 	br	200ad78 <___vfprintf_internal_r+0x17a8>
 200b2ec:	e5c00044 	addi	r23,fp,1
 200b2f0:	003e6606 	br	200ac8c <___vfprintf_internal_r+0x16bc>
 200b2f4:	00800084 	movi	r2,2
 200b2f8:	1529c83a 	sub	r20,r2,r20
 200b2fc:	003ff306 	br	200b2cc <___vfprintf_internal_r+0x1cfc>
 200b300:	008011c4 	movi	r2,71
 200b304:	90be7226 	beq	r18,r2,200acd0 <___vfprintf_internal_r+0x1700>
 200b308:	003e7306 	br	200acd8 <___vfprintf_internal_r+0x1708>
 200b30c:	d8812d17 	ldw	r2,1204(sp)
 200b310:	ac800043 	ldbu	r18,1(r21)
 200b314:	202b883a 	mov	r21,r4
 200b318:	17000017 	ldw	fp,0(r2)
 200b31c:	10800104 	addi	r2,r2,4
 200b320:	d8812d15 	stw	r2,1204(sp)
 200b324:	e0001b16 	blt	fp,zero,200b394 <___vfprintf_internal_r+0x1dc4>
 200b328:	94803fcc 	andi	r18,r18,255
 200b32c:	9480201c 	xori	r18,r18,128
 200b330:	94bfe004 	addi	r18,r18,-128
 200b334:	00390406 	br	2009748 <___vfprintf_internal_r+0x178>
 200b338:	00bfffc4 	movi	r2,-1
 200b33c:	d8812c15 	stw	r2,1200(sp)
 200b340:	003a2506 	br	2009bd8 <___vfprintf_internal_r+0x608>
 200b344:	80a0703a 	and	r16,r16,r2
 200b348:	803f9d1e 	bne	r16,zero,200b1c0 <___vfprintf_internal_r+0x1bf0>
 200b34c:	d8812b17 	ldw	r2,1196(sp)
 200b350:	d8812815 	stw	r2,1184(sp)
 200b354:	103e880e 	bge	r2,zero,200ad78 <___vfprintf_internal_r+0x17a8>
 200b358:	003f9e06 	br	200b1d4 <___vfprintf_internal_r+0x1c04>
 200b35c:	00800b44 	movi	r2,45
 200b360:	0529c83a 	sub	r20,zero,r20
 200b364:	d8812005 	stb	r2,1152(sp)
 200b368:	003f8606 	br	200b184 <___vfprintf_internal_r+0x1bb4>
 200b36c:	1007883a 	mov	r3,r2
 200b370:	003e6d06 	br	200ad28 <___vfprintf_internal_r+0x1758>
 200b374:	e000021e 	bne	fp,zero,200b380 <___vfprintf_internal_r+0x1db0>
 200b378:	8400004c 	andi	r16,r16,1
 200b37c:	80000e26 	beq	r16,zero,200b3b8 <___vfprintf_internal_r+0x1de8>
 200b380:	e7000084 	addi	fp,fp,2
 200b384:	df012b15 	stw	fp,1196(sp)
 200b388:	df012815 	stw	fp,1184(sp)
 200b38c:	e03e7a0e 	bge	fp,zero,200ad78 <___vfprintf_internal_r+0x17a8>
 200b390:	003f9006 	br	200b1d4 <___vfprintf_internal_r+0x1c04>
 200b394:	94803fcc 	andi	r18,r18,255
 200b398:	9480201c 	xori	r18,r18,128
 200b39c:	073fffc4 	movi	fp,-1
 200b3a0:	94bfe004 	addi	r18,r18,-128
 200b3a4:	0038e806 	br	2009748 <___vfprintf_internal_r+0x178>
 200b3a8:	d8c12044 	addi	r3,sp,1153
 200b3ac:	003f7d06 	br	200b1a4 <___vfprintf_internal_r+0x1bd4>
 200b3b0:	dd012417 	ldw	r20,1168(sp)
 200b3b4:	003f6d06 	br	200b16c <___vfprintf_internal_r+0x1b9c>
 200b3b8:	00c00044 	movi	r3,1
 200b3bc:	d8c12815 	stw	r3,1184(sp)
 200b3c0:	d8c12b15 	stw	r3,1196(sp)
 200b3c4:	003e6c06 	br	200ad78 <___vfprintf_internal_r+0x17a8>

0200b3c8 <__vfprintf_internal>:
 200b3c8:	008080f4 	movhi	r2,515
 200b3cc:	10882a04 	addi	r2,r2,8360
 200b3d0:	2007883a 	mov	r3,r4
 200b3d4:	11000017 	ldw	r4,0(r2)
 200b3d8:	2805883a 	mov	r2,r5
 200b3dc:	300f883a 	mov	r7,r6
 200b3e0:	180b883a 	mov	r5,r3
 200b3e4:	100d883a 	mov	r6,r2
 200b3e8:	20095d01 	jmpi	20095d0 <___vfprintf_internal_r>

0200b3ec <_vsnprintf_r>:
 200b3ec:	deffe604 	addi	sp,sp,-104
 200b3f0:	dc401815 	stw	r17,96(sp)
 200b3f4:	dc001715 	stw	r16,92(sp)
 200b3f8:	dfc01915 	stw	ra,100(sp)
 200b3fc:	3021883a 	mov	r16,r6
 200b400:	2023883a 	mov	r17,r4
 200b404:	30002016 	blt	r6,zero,200b488 <_vsnprintf_r+0x9c>
 200b408:	00808204 	movi	r2,520
 200b40c:	d880030d 	sth	r2,12(sp)
 200b410:	d9400015 	stw	r5,0(sp)
 200b414:	d9400415 	stw	r5,16(sp)
 200b418:	3000161e 	bne	r6,zero,200b474 <_vsnprintf_r+0x88>
 200b41c:	0005883a 	mov	r2,zero
 200b420:	00c080f4 	movhi	r3,515
 200b424:	18c82a04 	addi	r3,r3,8360
 200b428:	19000017 	ldw	r4,0(r3)
 200b42c:	380d883a 	mov	r6,r7
 200b430:	d9c01a17 	ldw	r7,104(sp)
 200b434:	d8800215 	stw	r2,8(sp)
 200b438:	d8800515 	stw	r2,20(sp)
 200b43c:	d80b883a 	mov	r5,sp
 200b440:	00bfffc4 	movi	r2,-1
 200b444:	d880038d 	sth	r2,14(sp)
 200b448:	20095d00 	call	20095d0 <___vfprintf_internal_r>
 200b44c:	00ffffc4 	movi	r3,-1
 200b450:	10c00a16 	blt	r2,r3,200b47c <_vsnprintf_r+0x90>
 200b454:	80000226 	beq	r16,zero,200b460 <_vsnprintf_r+0x74>
 200b458:	d8c00017 	ldw	r3,0(sp)
 200b45c:	18000005 	stb	zero,0(r3)
 200b460:	dfc01917 	ldw	ra,100(sp)
 200b464:	dc401817 	ldw	r17,96(sp)
 200b468:	dc001717 	ldw	r16,92(sp)
 200b46c:	dec01a04 	addi	sp,sp,104
 200b470:	f800283a 	ret
 200b474:	30bfffc4 	addi	r2,r6,-1
 200b478:	003fe906 	br	200b420 <_vsnprintf_r+0x34>
 200b47c:	00c022c4 	movi	r3,139
 200b480:	88c00015 	stw	r3,0(r17)
 200b484:	003ff306 	br	200b454 <_vsnprintf_r+0x68>
 200b488:	008022c4 	movi	r2,139
 200b48c:	20800015 	stw	r2,0(r4)
 200b490:	00bfffc4 	movi	r2,-1
 200b494:	003ff206 	br	200b460 <_vsnprintf_r+0x74>

0200b498 <vsnprintf>:
 200b498:	008080f4 	movhi	r2,515
 200b49c:	10882a04 	addi	r2,r2,8360
 200b4a0:	2011883a 	mov	r8,r4
 200b4a4:	11000017 	ldw	r4,0(r2)
 200b4a8:	defffe04 	addi	sp,sp,-8
 200b4ac:	2807883a 	mov	r3,r5
 200b4b0:	3005883a 	mov	r2,r6
 200b4b4:	d9c00015 	stw	r7,0(sp)
 200b4b8:	400b883a 	mov	r5,r8
 200b4bc:	180d883a 	mov	r6,r3
 200b4c0:	100f883a 	mov	r7,r2
 200b4c4:	dfc00115 	stw	ra,4(sp)
 200b4c8:	200b3ec0 	call	200b3ec <_vsnprintf_r>
 200b4cc:	dfc00117 	ldw	ra,4(sp)
 200b4d0:	dec00204 	addi	sp,sp,8
 200b4d4:	f800283a 	ret

0200b4d8 <__swsetup_r>:
 200b4d8:	008080f4 	movhi	r2,515
 200b4dc:	10882a04 	addi	r2,r2,8360
 200b4e0:	10800017 	ldw	r2,0(r2)
 200b4e4:	defffd04 	addi	sp,sp,-12
 200b4e8:	dc400115 	stw	r17,4(sp)
 200b4ec:	dc000015 	stw	r16,0(sp)
 200b4f0:	dfc00215 	stw	ra,8(sp)
 200b4f4:	2023883a 	mov	r17,r4
 200b4f8:	2821883a 	mov	r16,r5
 200b4fc:	10000226 	beq	r2,zero,200b508 <__swsetup_r+0x30>
 200b500:	10c00e17 	ldw	r3,56(r2)
 200b504:	18003d26 	beq	r3,zero,200b5fc <__swsetup_r+0x124>
 200b508:	8080030b 	ldhu	r2,12(r16)
 200b50c:	10c0020c 	andi	r3,r2,8
 200b510:	18ffffcc 	andi	r3,r3,65535
 200b514:	18e0001c 	xori	r3,r3,32768
 200b518:	18e00004 	addi	r3,r3,-32768
 200b51c:	18001226 	beq	r3,zero,200b568 <__swsetup_r+0x90>
 200b520:	80c00417 	ldw	r3,16(r16)
 200b524:	18001f26 	beq	r3,zero,200b5a4 <__swsetup_r+0xcc>
 200b528:	1100004c 	andi	r4,r2,1
 200b52c:	2000261e 	bne	r4,zero,200b5c8 <__swsetup_r+0xf0>
 200b530:	1080008c 	andi	r2,r2,2
 200b534:	10bfffcc 	andi	r2,r2,65535
 200b538:	10a0001c 	xori	r2,r2,32768
 200b53c:	10a00004 	addi	r2,r2,-32768
 200b540:	1000311e 	bne	r2,zero,200b608 <__swsetup_r+0x130>
 200b544:	80800517 	ldw	r2,20(r16)
 200b548:	80800215 	stw	r2,8(r16)
 200b54c:	18002326 	beq	r3,zero,200b5dc <__swsetup_r+0x104>
 200b550:	0005883a 	mov	r2,zero
 200b554:	dfc00217 	ldw	ra,8(sp)
 200b558:	dc400117 	ldw	r17,4(sp)
 200b55c:	dc000017 	ldw	r16,0(sp)
 200b560:	dec00304 	addi	sp,sp,12
 200b564:	f800283a 	ret
 200b568:	10c0040c 	andi	r3,r2,16
 200b56c:	18ffffcc 	andi	r3,r3,65535
 200b570:	18e0001c 	xori	r3,r3,32768
 200b574:	18e00004 	addi	r3,r3,-32768
 200b578:	18001e26 	beq	r3,zero,200b5f4 <__swsetup_r+0x11c>
 200b57c:	10c0010c 	andi	r3,r2,4
 200b580:	18ffffcc 	andi	r3,r3,65535
 200b584:	18e0001c 	xori	r3,r3,32768
 200b588:	18e00004 	addi	r3,r3,-32768
 200b58c:	1800211e 	bne	r3,zero,200b614 <__swsetup_r+0x13c>
 200b590:	80c00417 	ldw	r3,16(r16)
 200b594:	11400214 	ori	r5,r2,8
 200b598:	8140030d 	sth	r5,12(r16)
 200b59c:	2805883a 	mov	r2,r5
 200b5a0:	183fe11e 	bne	r3,zero,200b528 <__swsetup_r+0x50>
 200b5a4:	1140a00c 	andi	r5,r2,640
 200b5a8:	01008004 	movi	r4,512
 200b5ac:	293fde26 	beq	r5,r4,200b528 <__swsetup_r+0x50>
 200b5b0:	8809883a 	mov	r4,r17
 200b5b4:	800b883a 	mov	r5,r16
 200b5b8:	200de8c0 	call	200de8c <__smakebuf_r>
 200b5bc:	8080030b 	ldhu	r2,12(r16)
 200b5c0:	80c00417 	ldw	r3,16(r16)
 200b5c4:	003fd806 	br	200b528 <__swsetup_r+0x50>
 200b5c8:	80800517 	ldw	r2,20(r16)
 200b5cc:	80000215 	stw	zero,8(r16)
 200b5d0:	0085c83a 	sub	r2,zero,r2
 200b5d4:	80800615 	stw	r2,24(r16)
 200b5d8:	183fdd1e 	bne	r3,zero,200b550 <__swsetup_r+0x78>
 200b5dc:	8080030b 	ldhu	r2,12(r16)
 200b5e0:	1080200c 	andi	r2,r2,128
 200b5e4:	10bfffcc 	andi	r2,r2,65535
 200b5e8:	10a0001c 	xori	r2,r2,32768
 200b5ec:	10a00004 	addi	r2,r2,-32768
 200b5f0:	103fd826 	beq	r2,zero,200b554 <__swsetup_r+0x7c>
 200b5f4:	00bfffc4 	movi	r2,-1
 200b5f8:	003fd606 	br	200b554 <__swsetup_r+0x7c>
 200b5fc:	1009883a 	mov	r4,r2
 200b600:	200d1180 	call	200d118 <__sinit>
 200b604:	003fc006 	br	200b508 <__swsetup_r+0x30>
 200b608:	0005883a 	mov	r2,zero
 200b60c:	80800215 	stw	r2,8(r16)
 200b610:	003fce06 	br	200b54c <__swsetup_r+0x74>
 200b614:	81400c17 	ldw	r5,48(r16)
 200b618:	28000626 	beq	r5,zero,200b634 <__swsetup_r+0x15c>
 200b61c:	80c01004 	addi	r3,r16,64
 200b620:	28c00326 	beq	r5,r3,200b630 <__swsetup_r+0x158>
 200b624:	8809883a 	mov	r4,r17
 200b628:	200d49c0 	call	200d49c <_free_r>
 200b62c:	8080030b 	ldhu	r2,12(r16)
 200b630:	80000c15 	stw	zero,48(r16)
 200b634:	80c00417 	ldw	r3,16(r16)
 200b638:	013ff6c4 	movi	r4,-37
 200b63c:	2084703a 	and	r2,r4,r2
 200b640:	80000115 	stw	zero,4(r16)
 200b644:	80c00015 	stw	r3,0(r16)
 200b648:	003fd206 	br	200b594 <__swsetup_r+0xbc>

0200b64c <quorem>:
 200b64c:	defff704 	addi	sp,sp,-36
 200b650:	dc400115 	stw	r17,4(sp)
 200b654:	20800417 	ldw	r2,16(r4)
 200b658:	2c400417 	ldw	r17,16(r5)
 200b65c:	dd800615 	stw	r22,24(sp)
 200b660:	dd400515 	stw	r21,20(sp)
 200b664:	dfc00815 	stw	ra,32(sp)
 200b668:	ddc00715 	stw	r23,28(sp)
 200b66c:	dd000415 	stw	r20,16(sp)
 200b670:	dcc00315 	stw	r19,12(sp)
 200b674:	dc800215 	stw	r18,8(sp)
 200b678:	dc000015 	stw	r16,0(sp)
 200b67c:	202b883a 	mov	r21,r4
 200b680:	282d883a 	mov	r22,r5
 200b684:	14407116 	blt	r2,r17,200b84c <quorem+0x200>
 200b688:	88800104 	addi	r2,r17,4
 200b68c:	1085883a 	add	r2,r2,r2
 200b690:	1085883a 	add	r2,r2,r2
 200b694:	28a7883a 	add	r19,r5,r2
 200b698:	2085883a 	add	r2,r4,r2
 200b69c:	15c00017 	ldw	r23,0(r2)
 200b6a0:	99400017 	ldw	r5,0(r19)
 200b6a4:	8c7fffc4 	addi	r17,r17,-1
 200b6a8:	b809883a 	mov	r4,r23
 200b6ac:	29400044 	addi	r5,r5,1
 200b6b0:	20083280 	call	2008328 <__udivsi3>
 200b6b4:	1025883a 	mov	r18,r2
 200b6b8:	b4000504 	addi	r16,r22,20
 200b6bc:	ad000504 	addi	r20,r21,20
 200b6c0:	10002d26 	beq	r2,zero,200b778 <quorem+0x12c>
 200b6c4:	800d883a 	mov	r6,r16
 200b6c8:	a007883a 	mov	r3,r20
 200b6cc:	000f883a 	mov	r7,zero
 200b6d0:	0005883a 	mov	r2,zero
 200b6d4:	32c00017 	ldw	r11,0(r6)
 200b6d8:	1a400017 	ldw	r9,0(r3)
 200b6dc:	31800104 	addi	r6,r6,4
 200b6e0:	5abfffcc 	andi	r10,r11,65535
 200b6e4:	5495383a 	mul	r10,r10,r18
 200b6e8:	5816d43a 	srli	r11,r11,16
 200b6ec:	4a3fffcc 	andi	r8,r9,65535
 200b6f0:	3a95883a 	add	r10,r7,r10
 200b6f4:	500ed43a 	srli	r7,r10,16
 200b6f8:	5c97383a 	mul	r11,r11,r18
 200b6fc:	4085883a 	add	r2,r8,r2
 200b700:	52bfffcc 	andi	r10,r10,65535
 200b704:	1291c83a 	sub	r8,r2,r10
 200b708:	4804d43a 	srli	r2,r9,16
 200b70c:	3acf883a 	add	r7,r7,r11
 200b710:	4015d43a 	srai	r10,r8,16
 200b714:	393fffcc 	andi	r4,r7,65535
 200b718:	1105c83a 	sub	r2,r2,r4
 200b71c:	1285883a 	add	r2,r2,r10
 200b720:	1880008d 	sth	r2,2(r3)
 200b724:	1a00000d 	sth	r8,0(r3)
 200b728:	380ed43a 	srli	r7,r7,16
 200b72c:	1005d43a 	srai	r2,r2,16
 200b730:	18c00104 	addi	r3,r3,4
 200b734:	99bfe72e 	bgeu	r19,r6,200b6d4 <quorem+0x88>
 200b738:	b8000f1e 	bne	r23,zero,200b778 <quorem+0x12c>
 200b73c:	88800144 	addi	r2,r17,5
 200b740:	1085883a 	add	r2,r2,r2
 200b744:	1085883a 	add	r2,r2,r2
 200b748:	a887883a 	add	r3,r21,r2
 200b74c:	18bfff04 	addi	r2,r3,-4
 200b750:	a080082e 	bgeu	r20,r2,200b774 <quorem+0x128>
 200b754:	18ffff17 	ldw	r3,-4(r3)
 200b758:	18000326 	beq	r3,zero,200b768 <quorem+0x11c>
 200b75c:	00000506 	br	200b774 <quorem+0x128>
 200b760:	10c00017 	ldw	r3,0(r2)
 200b764:	1800031e 	bne	r3,zero,200b774 <quorem+0x128>
 200b768:	10bfff04 	addi	r2,r2,-4
 200b76c:	8c7fffc4 	addi	r17,r17,-1
 200b770:	a0bffb36 	bltu	r20,r2,200b760 <quorem+0x114>
 200b774:	ac400415 	stw	r17,16(r21)
 200b778:	a809883a 	mov	r4,r21
 200b77c:	b00b883a 	mov	r5,r22
 200b780:	200eaf80 	call	200eaf8 <__mcmp>
 200b784:	10002516 	blt	r2,zero,200b81c <quorem+0x1d0>
 200b788:	94800044 	addi	r18,r18,1
 200b78c:	a007883a 	mov	r3,r20
 200b790:	000b883a 	mov	r5,zero
 200b794:	1a000017 	ldw	r8,0(r3)
 200b798:	81c00017 	ldw	r7,0(r16)
 200b79c:	84000104 	addi	r16,r16,4
 200b7a0:	41bfffcc 	andi	r6,r8,65535
 200b7a4:	38bfffcc 	andi	r2,r7,65535
 200b7a8:	314b883a 	add	r5,r6,r5
 200b7ac:	288dc83a 	sub	r6,r5,r2
 200b7b0:	380ed43a 	srli	r7,r7,16
 200b7b4:	400ad43a 	srli	r5,r8,16
 200b7b8:	3005d43a 	srai	r2,r6,16
 200b7bc:	1980000d 	sth	r6,0(r3)
 200b7c0:	29cbc83a 	sub	r5,r5,r7
 200b7c4:	288b883a 	add	r5,r5,r2
 200b7c8:	1940008d 	sth	r5,2(r3)
 200b7cc:	280bd43a 	srai	r5,r5,16
 200b7d0:	18c00104 	addi	r3,r3,4
 200b7d4:	9c3fef2e 	bgeu	r19,r16,200b794 <quorem+0x148>
 200b7d8:	88800144 	addi	r2,r17,5
 200b7dc:	1085883a 	add	r2,r2,r2
 200b7e0:	1085883a 	add	r2,r2,r2
 200b7e4:	a885883a 	add	r2,r21,r2
 200b7e8:	10c00017 	ldw	r3,0(r2)
 200b7ec:	18000b1e 	bne	r3,zero,200b81c <quorem+0x1d0>
 200b7f0:	10ffff04 	addi	r3,r2,-4
 200b7f4:	a0c0082e 	bgeu	r20,r3,200b818 <quorem+0x1cc>
 200b7f8:	10bfff17 	ldw	r2,-4(r2)
 200b7fc:	10000326 	beq	r2,zero,200b80c <quorem+0x1c0>
 200b800:	00000506 	br	200b818 <quorem+0x1cc>
 200b804:	18800017 	ldw	r2,0(r3)
 200b808:	1000031e 	bne	r2,zero,200b818 <quorem+0x1cc>
 200b80c:	18ffff04 	addi	r3,r3,-4
 200b810:	8c7fffc4 	addi	r17,r17,-1
 200b814:	a0fffb36 	bltu	r20,r3,200b804 <quorem+0x1b8>
 200b818:	ac400415 	stw	r17,16(r21)
 200b81c:	9005883a 	mov	r2,r18
 200b820:	dfc00817 	ldw	ra,32(sp)
 200b824:	ddc00717 	ldw	r23,28(sp)
 200b828:	dd800617 	ldw	r22,24(sp)
 200b82c:	dd400517 	ldw	r21,20(sp)
 200b830:	dd000417 	ldw	r20,16(sp)
 200b834:	dcc00317 	ldw	r19,12(sp)
 200b838:	dc800217 	ldw	r18,8(sp)
 200b83c:	dc400117 	ldw	r17,4(sp)
 200b840:	dc000017 	ldw	r16,0(sp)
 200b844:	dec00904 	addi	sp,sp,36
 200b848:	f800283a 	ret
 200b84c:	0005883a 	mov	r2,zero
 200b850:	003ff306 	br	200b820 <quorem+0x1d4>

0200b854 <_dtoa_r>:
 200b854:	20801017 	ldw	r2,64(r4)
 200b858:	deffdf04 	addi	sp,sp,-132
 200b85c:	dcc01a15 	stw	r19,104(sp)
 200b860:	dc801915 	stw	r18,100(sp)
 200b864:	dc401815 	stw	r17,96(sp)
 200b868:	dc001715 	stw	r16,92(sp)
 200b86c:	dfc02015 	stw	ra,128(sp)
 200b870:	df001f15 	stw	fp,124(sp)
 200b874:	ddc01e15 	stw	r23,120(sp)
 200b878:	dd801d15 	stw	r22,116(sp)
 200b87c:	dd401c15 	stw	r21,112(sp)
 200b880:	dd001b15 	stw	r20,108(sp)
 200b884:	d9400315 	stw	r5,12(sp)
 200b888:	d9c00415 	stw	r7,16(sp)
 200b88c:	2021883a 	mov	r16,r4
 200b890:	3025883a 	mov	r18,r6
 200b894:	dcc02317 	ldw	r19,140(sp)
 200b898:	3023883a 	mov	r17,r6
 200b89c:	10000826 	beq	r2,zero,200b8c0 <_dtoa_r+0x6c>
 200b8a0:	20c01117 	ldw	r3,68(r4)
 200b8a4:	01800044 	movi	r6,1
 200b8a8:	100b883a 	mov	r5,r2
 200b8ac:	30cc983a 	sll	r6,r6,r3
 200b8b0:	10c00115 	stw	r3,4(r2)
 200b8b4:	11800215 	stw	r6,8(r2)
 200b8b8:	200e2fc0 	call	200e2fc <_Bfree>
 200b8bc:	80001015 	stw	zero,64(r16)
 200b8c0:	90002f16 	blt	r18,zero,200b980 <_dtoa_r+0x12c>
 200b8c4:	98000015 	stw	zero,0(r19)
 200b8c8:	90dffc2c 	andhi	r3,r18,32752
 200b8cc:	009ffc34 	movhi	r2,32752
 200b8d0:	18801c26 	beq	r3,r2,200b944 <_dtoa_r+0xf0>
 200b8d4:	d9000317 	ldw	r4,12(sp)
 200b8d8:	880b883a 	mov	r5,r17
 200b8dc:	000d883a 	mov	r6,zero
 200b8e0:	000f883a 	mov	r7,zero
 200b8e4:	20109e80 	call	20109e8 <__eqdf2>
 200b8e8:	10002c1e 	bne	r2,zero,200b99c <_dtoa_r+0x148>
 200b8ec:	d9002217 	ldw	r4,136(sp)
 200b8f0:	d9c02417 	ldw	r7,144(sp)
 200b8f4:	00800044 	movi	r2,1
 200b8f8:	20800015 	stw	r2,0(r4)
 200b8fc:	38019426 	beq	r7,zero,200bf50 <_dtoa_r+0x6fc>
 200b900:	008080f4 	movhi	r2,515
 200b904:	10ba0944 	addi	r2,r2,-6107
 200b908:	38800015 	stw	r2,0(r7)
 200b90c:	15ffffc4 	addi	r23,r2,-1
 200b910:	b805883a 	mov	r2,r23
 200b914:	dfc02017 	ldw	ra,128(sp)
 200b918:	df001f17 	ldw	fp,124(sp)
 200b91c:	ddc01e17 	ldw	r23,120(sp)
 200b920:	dd801d17 	ldw	r22,116(sp)
 200b924:	dd401c17 	ldw	r21,112(sp)
 200b928:	dd001b17 	ldw	r20,108(sp)
 200b92c:	dcc01a17 	ldw	r19,104(sp)
 200b930:	dc801917 	ldw	r18,100(sp)
 200b934:	dc401817 	ldw	r17,96(sp)
 200b938:	dc001717 	ldw	r16,92(sp)
 200b93c:	dec02104 	addi	sp,sp,132
 200b940:	f800283a 	ret
 200b944:	d8c02217 	ldw	r3,136(sp)
 200b948:	d9000317 	ldw	r4,12(sp)
 200b94c:	0089c3c4 	movi	r2,9999
 200b950:	18800015 	stw	r2,0(r3)
 200b954:	20016c26 	beq	r4,zero,200bf08 <_dtoa_r+0x6b4>
 200b958:	05c080f4 	movhi	r23,515
 200b95c:	bdfa1504 	addi	r23,r23,-6060
 200b960:	d9c02417 	ldw	r7,144(sp)
 200b964:	383fea26 	beq	r7,zero,200b910 <_dtoa_r+0xbc>
 200b968:	b88000c7 	ldb	r2,3(r23)
 200b96c:	10016d1e 	bne	r2,zero,200bf24 <_dtoa_r+0x6d0>
 200b970:	b88000c4 	addi	r2,r23,3
 200b974:	d8c02417 	ldw	r3,144(sp)
 200b978:	18800015 	stw	r2,0(r3)
 200b97c:	003fe406 	br	200b910 <_dtoa_r+0xbc>
 200b980:	04600034 	movhi	r17,32768
 200b984:	8c7fffc4 	addi	r17,r17,-1
 200b988:	9462703a 	and	r17,r18,r17
 200b98c:	00800044 	movi	r2,1
 200b990:	98800015 	stw	r2,0(r19)
 200b994:	8825883a 	mov	r18,r17
 200b998:	003fcb06 	br	200b8c8 <_dtoa_r+0x74>
 200b99c:	d9400317 	ldw	r5,12(sp)
 200b9a0:	9028d53a 	srli	r20,r18,20
 200b9a4:	d8800204 	addi	r2,sp,8
 200b9a8:	d8800015 	stw	r2,0(sp)
 200b9ac:	8009883a 	mov	r4,r16
 200b9b0:	880d883a 	mov	r6,r17
 200b9b4:	d9c00104 	addi	r7,sp,4
 200b9b8:	200eea00 	call	200eea0 <__d2b>
 200b9bc:	a501ffcc 	andi	r20,r20,2047
 200b9c0:	1039883a 	mov	fp,r2
 200b9c4:	a001591e 	bne	r20,zero,200bf2c <_dtoa_r+0x6d8>
 200b9c8:	dd400217 	ldw	r21,8(sp)
 200b9cc:	dd000117 	ldw	r20,4(sp)
 200b9d0:	00befbc4 	movi	r2,-1041
 200b9d4:	ad29883a 	add	r20,r21,r20
 200b9d8:	a082d216 	blt	r20,r2,200c524 <_dtoa_r+0xcd0>
 200b9dc:	d8c00317 	ldw	r3,12(sp)
 200b9e0:	013f0384 	movi	r4,-1010
 200b9e4:	2509c83a 	sub	r4,r4,r20
 200b9e8:	a0810484 	addi	r2,r20,1042
 200b9ec:	9124983a 	sll	r18,r18,r4
 200b9f0:	1884d83a 	srl	r2,r3,r2
 200b9f4:	9088b03a 	or	r4,r18,r2
 200b9f8:	2010b680 	call	2010b68 <__floatunsidf>
 200b9fc:	1009883a 	mov	r4,r2
 200ba00:	017f8434 	movhi	r5,65040
 200ba04:	00800044 	movi	r2,1
 200ba08:	194b883a 	add	r5,r3,r5
 200ba0c:	a53fffc4 	addi	r20,r20,-1
 200ba10:	d8800f15 	stw	r2,60(sp)
 200ba14:	000d883a 	mov	r6,zero
 200ba18:	01cffe34 	movhi	r7,16376
 200ba1c:	2007b0c0 	call	2007b0c <__subdf3>
 200ba20:	1009883a 	mov	r4,r2
 200ba24:	180b883a 	mov	r5,r3
 200ba28:	0198dbf4 	movhi	r6,25455
 200ba2c:	3190d844 	addi	r6,r6,17249
 200ba30:	01cff4f4 	movhi	r7,16339
 200ba34:	39e1e9c4 	addi	r7,r7,-30809
 200ba38:	2007b6c0 	call	2007b6c <__muldf3>
 200ba3c:	180b883a 	mov	r5,r3
 200ba40:	01a2d874 	movhi	r6,35681
 200ba44:	31b22cc4 	addi	r6,r6,-14157
 200ba48:	01cff1f4 	movhi	r7,16327
 200ba4c:	39e28a04 	addi	r7,r7,-30168
 200ba50:	1009883a 	mov	r4,r2
 200ba54:	2007ab80 	call	2007ab8 <__adddf3>
 200ba58:	a009883a 	mov	r4,r20
 200ba5c:	1027883a 	mov	r19,r2
 200ba60:	1825883a 	mov	r18,r3
 200ba64:	20080600 	call	2008060 <__floatsidf>
 200ba68:	1009883a 	mov	r4,r2
 200ba6c:	180b883a 	mov	r5,r3
 200ba70:	019427f4 	movhi	r6,20639
 200ba74:	319e7ec4 	addi	r6,r6,31227
 200ba78:	01cff4f4 	movhi	r7,16339
 200ba7c:	39d104c4 	addi	r7,r7,17427
 200ba80:	2007b6c0 	call	2007b6c <__muldf3>
 200ba84:	9809883a 	mov	r4,r19
 200ba88:	900b883a 	mov	r5,r18
 200ba8c:	100d883a 	mov	r6,r2
 200ba90:	180f883a 	mov	r7,r3
 200ba94:	2007ab80 	call	2007ab8 <__adddf3>
 200ba98:	1009883a 	mov	r4,r2
 200ba9c:	180b883a 	mov	r5,r3
 200baa0:	1027883a 	mov	r19,r2
 200baa4:	1825883a 	mov	r18,r3
 200baa8:	20081340 	call	2008134 <__fixdfsi>
 200baac:	9809883a 	mov	r4,r19
 200bab0:	900b883a 	mov	r5,r18
 200bab4:	000d883a 	mov	r6,zero
 200bab8:	000f883a 	mov	r7,zero
 200babc:	d8800615 	stw	r2,24(sp)
 200bac0:	20080040 	call	2008004 <__ltdf2>
 200bac4:	10027e16 	blt	r2,zero,200c4c0 <_dtoa_r+0xc6c>
 200bac8:	d8c00617 	ldw	r3,24(sp)
 200bacc:	00800584 	movi	r2,22
 200bad0:	10c26c36 	bltu	r2,r3,200c484 <_dtoa_r+0xc30>
 200bad4:	180490fa 	slli	r2,r3,3
 200bad8:	00c080f4 	movhi	r3,515
 200badc:	18fa3a04 	addi	r3,r3,-5912
 200bae0:	d9800317 	ldw	r6,12(sp)
 200bae4:	1885883a 	add	r2,r3,r2
 200bae8:	11000017 	ldw	r4,0(r2)
 200baec:	11400117 	ldw	r5,4(r2)
 200baf0:	880f883a 	mov	r7,r17
 200baf4:	2010aa00 	call	2010aa0 <__gtdf2>
 200baf8:	00828f0e 	bge	zero,r2,200c538 <_dtoa_r+0xce4>
 200bafc:	d8800617 	ldw	r2,24(sp)
 200bb00:	d8000d15 	stw	zero,52(sp)
 200bb04:	10bfffc4 	addi	r2,r2,-1
 200bb08:	d8800615 	stw	r2,24(sp)
 200bb0c:	ad29c83a 	sub	r20,r21,r20
 200bb10:	a53fffc4 	addi	r20,r20,-1
 200bb14:	a0026616 	blt	r20,zero,200c4b0 <_dtoa_r+0xc5c>
 200bb18:	dd000715 	stw	r20,28(sp)
 200bb1c:	d8000815 	stw	zero,32(sp)
 200bb20:	d8800617 	ldw	r2,24(sp)
 200bb24:	10025a16 	blt	r2,zero,200c490 <_dtoa_r+0xc3c>
 200bb28:	d8c00717 	ldw	r3,28(sp)
 200bb2c:	d8800b15 	stw	r2,44(sp)
 200bb30:	d8000a15 	stw	zero,40(sp)
 200bb34:	1887883a 	add	r3,r3,r2
 200bb38:	d8c00715 	stw	r3,28(sp)
 200bb3c:	d9c00417 	ldw	r7,16(sp)
 200bb40:	00800244 	movi	r2,9
 200bb44:	11c10536 	bltu	r2,r7,200bf5c <_dtoa_r+0x708>
 200bb48:	00800144 	movi	r2,5
 200bb4c:	11c4c60e 	bge	r2,r7,200ce68 <_dtoa_r+0x1614>
 200bb50:	39ffff04 	addi	r7,r7,-4
 200bb54:	d9c00415 	stw	r7,16(sp)
 200bb58:	0027883a 	mov	r19,zero
 200bb5c:	d9c00417 	ldw	r7,16(sp)
 200bb60:	008000c4 	movi	r2,3
 200bb64:	3883a226 	beq	r7,r2,200c9f0 <_dtoa_r+0x119c>
 200bb68:	11c2bc16 	blt	r2,r7,200c65c <_dtoa_r+0xe08>
 200bb6c:	00800084 	movi	r2,2
 200bb70:	3880fb1e 	bne	r7,r2,200bf60 <_dtoa_r+0x70c>
 200bb74:	d8000c15 	stw	zero,48(sp)
 200bb78:	d9002117 	ldw	r4,132(sp)
 200bb7c:	0103ae0e 	bge	zero,r4,200ca38 <_dtoa_r+0x11e4>
 200bb80:	2025883a 	mov	r18,r4
 200bb84:	d9000e15 	stw	r4,56(sp)
 200bb88:	d9000915 	stw	r4,36(sp)
 200bb8c:	80001115 	stw	zero,68(r16)
 200bb90:	008005c4 	movi	r2,23
 200bb94:	1484b22e 	bgeu	r2,r18,200ce60 <_dtoa_r+0x160c>
 200bb98:	00c00044 	movi	r3,1
 200bb9c:	00800104 	movi	r2,4
 200bba0:	1085883a 	add	r2,r2,r2
 200bba4:	11000504 	addi	r4,r2,20
 200bba8:	180b883a 	mov	r5,r3
 200bbac:	18c00044 	addi	r3,r3,1
 200bbb0:	913ffb2e 	bgeu	r18,r4,200bba0 <_dtoa_r+0x34c>
 200bbb4:	81401115 	stw	r5,68(r16)
 200bbb8:	8009883a 	mov	r4,r16
 200bbbc:	200e2540 	call	200e254 <_Balloc>
 200bbc0:	102f883a 	mov	r23,r2
 200bbc4:	80801015 	stw	r2,64(r16)
 200bbc8:	00800384 	movi	r2,14
 200bbcc:	1480f036 	bltu	r2,r18,200bf90 <_dtoa_r+0x73c>
 200bbd0:	9800ef26 	beq	r19,zero,200bf90 <_dtoa_r+0x73c>
 200bbd4:	d8800617 	ldw	r2,24(sp)
 200bbd8:	00839c0e 	bge	zero,r2,200ca4c <_dtoa_r+0x11f8>
 200bbdc:	d8c00617 	ldw	r3,24(sp)
 200bbe0:	108003cc 	andi	r2,r2,15
 200bbe4:	100490fa 	slli	r2,r2,3
 200bbe8:	182bd13a 	srai	r21,r3,4
 200bbec:	00c080f4 	movhi	r3,515
 200bbf0:	18fa3a04 	addi	r3,r3,-5912
 200bbf4:	1885883a 	add	r2,r3,r2
 200bbf8:	a8c0040c 	andi	r3,r21,16
 200bbfc:	12800017 	ldw	r10,0(r2)
 200bc00:	15800117 	ldw	r22,4(r2)
 200bc04:	18038726 	beq	r3,zero,200ca24 <_dtoa_r+0x11d0>
 200bc08:	008080f4 	movhi	r2,515
 200bc0c:	10ba3004 	addi	r2,r2,-5952
 200bc10:	11800817 	ldw	r6,32(r2)
 200bc14:	11c00917 	ldw	r7,36(r2)
 200bc18:	d9000317 	ldw	r4,12(sp)
 200bc1c:	880b883a 	mov	r5,r17
 200bc20:	da801515 	stw	r10,84(sp)
 200bc24:	2007e500 	call	2007e50 <__divdf3>
 200bc28:	da801517 	ldw	r10,84(sp)
 200bc2c:	d8801015 	stw	r2,64(sp)
 200bc30:	1829883a 	mov	r20,r3
 200bc34:	ad4003cc 	andi	r21,r21,15
 200bc38:	048000c4 	movi	r18,3
 200bc3c:	a8001126 	beq	r21,zero,200bc84 <_dtoa_r+0x430>
 200bc40:	04c080f4 	movhi	r19,515
 200bc44:	9cfa3004 	addi	r19,r19,-5952
 200bc48:	5005883a 	mov	r2,r10
 200bc4c:	b007883a 	mov	r3,r22
 200bc50:	a980004c 	andi	r6,r21,1
 200bc54:	1009883a 	mov	r4,r2
 200bc58:	a82bd07a 	srai	r21,r21,1
 200bc5c:	180b883a 	mov	r5,r3
 200bc60:	30000426 	beq	r6,zero,200bc74 <_dtoa_r+0x420>
 200bc64:	99800017 	ldw	r6,0(r19)
 200bc68:	99c00117 	ldw	r7,4(r19)
 200bc6c:	94800044 	addi	r18,r18,1
 200bc70:	2007b6c0 	call	2007b6c <__muldf3>
 200bc74:	9cc00204 	addi	r19,r19,8
 200bc78:	a83ff51e 	bne	r21,zero,200bc50 <_dtoa_r+0x3fc>
 200bc7c:	1015883a 	mov	r10,r2
 200bc80:	182d883a 	mov	r22,r3
 200bc84:	d9001017 	ldw	r4,64(sp)
 200bc88:	a00b883a 	mov	r5,r20
 200bc8c:	500d883a 	mov	r6,r10
 200bc90:	b00f883a 	mov	r7,r22
 200bc94:	2007e500 	call	2007e50 <__divdf3>
 200bc98:	1027883a 	mov	r19,r2
 200bc9c:	1829883a 	mov	r20,r3
 200bca0:	d8c00d17 	ldw	r3,52(sp)
 200bca4:	18000626 	beq	r3,zero,200bcc0 <_dtoa_r+0x46c>
 200bca8:	9809883a 	mov	r4,r19
 200bcac:	a00b883a 	mov	r5,r20
 200bcb0:	000d883a 	mov	r6,zero
 200bcb4:	01cffc34 	movhi	r7,16368
 200bcb8:	20080040 	call	2008004 <__ltdf2>
 200bcbc:	10040e16 	blt	r2,zero,200ccf8 <_dtoa_r+0x14a4>
 200bcc0:	9009883a 	mov	r4,r18
 200bcc4:	20080600 	call	2008060 <__floatsidf>
 200bcc8:	1009883a 	mov	r4,r2
 200bccc:	180b883a 	mov	r5,r3
 200bcd0:	980d883a 	mov	r6,r19
 200bcd4:	a00f883a 	mov	r7,r20
 200bcd8:	2007b6c0 	call	2007b6c <__muldf3>
 200bcdc:	1009883a 	mov	r4,r2
 200bce0:	180b883a 	mov	r5,r3
 200bce4:	000d883a 	mov	r6,zero
 200bce8:	01d00734 	movhi	r7,16412
 200bcec:	2007ab80 	call	2007ab8 <__adddf3>
 200bcf0:	057f3034 	movhi	r21,64704
 200bcf4:	1d6b883a 	add	r21,r3,r21
 200bcf8:	d8c00917 	ldw	r3,36(sp)
 200bcfc:	1025883a 	mov	r18,r2
 200bd00:	18031f26 	beq	r3,zero,200c980 <_dtoa_r+0x112c>
 200bd04:	d8800617 	ldw	r2,24(sp)
 200bd08:	dac00917 	ldw	r11,36(sp)
 200bd0c:	d8801315 	stw	r2,76(sp)
 200bd10:	d8c00c17 	ldw	r3,48(sp)
 200bd14:	18039026 	beq	r3,zero,200cb58 <_dtoa_r+0x1304>
 200bd18:	58bfffc4 	addi	r2,r11,-1
 200bd1c:	100490fa 	slli	r2,r2,3
 200bd20:	00c080f4 	movhi	r3,515
 200bd24:	18fa3a04 	addi	r3,r3,-5912
 200bd28:	0009883a 	mov	r4,zero
 200bd2c:	1885883a 	add	r2,r3,r2
 200bd30:	11800017 	ldw	r6,0(r2)
 200bd34:	11c00117 	ldw	r7,4(r2)
 200bd38:	014ff834 	movhi	r5,16352
 200bd3c:	dac01615 	stw	r11,88(sp)
 200bd40:	2007e500 	call	2007e50 <__divdf3>
 200bd44:	900d883a 	mov	r6,r18
 200bd48:	a80f883a 	mov	r7,r21
 200bd4c:	1009883a 	mov	r4,r2
 200bd50:	180b883a 	mov	r5,r3
 200bd54:	2007b0c0 	call	2007b0c <__subdf3>
 200bd58:	a00b883a 	mov	r5,r20
 200bd5c:	9809883a 	mov	r4,r19
 200bd60:	182b883a 	mov	r21,r3
 200bd64:	d8801015 	stw	r2,64(sp)
 200bd68:	20081340 	call	2008134 <__fixdfsi>
 200bd6c:	1009883a 	mov	r4,r2
 200bd70:	d8801515 	stw	r2,84(sp)
 200bd74:	20080600 	call	2008060 <__floatsidf>
 200bd78:	9809883a 	mov	r4,r19
 200bd7c:	a00b883a 	mov	r5,r20
 200bd80:	100d883a 	mov	r6,r2
 200bd84:	180f883a 	mov	r7,r3
 200bd88:	2007b0c0 	call	2007b0c <__subdf3>
 200bd8c:	da401517 	ldw	r9,84(sp)
 200bd90:	d9001017 	ldw	r4,64(sp)
 200bd94:	a80b883a 	mov	r5,r21
 200bd98:	4d000c04 	addi	r20,r9,48
 200bd9c:	bd000005 	stb	r20,0(r23)
 200bda0:	100d883a 	mov	r6,r2
 200bda4:	180f883a 	mov	r7,r3
 200bda8:	bd800044 	addi	r22,r23,1
 200bdac:	1025883a 	mov	r18,r2
 200bdb0:	1827883a 	mov	r19,r3
 200bdb4:	2010aa00 	call	2010aa0 <__gtdf2>
 200bdb8:	00842216 	blt	zero,r2,200ce44 <_dtoa_r+0x15f0>
 200bdbc:	0009883a 	mov	r4,zero
 200bdc0:	014ffc34 	movhi	r5,16368
 200bdc4:	900d883a 	mov	r6,r18
 200bdc8:	980f883a 	mov	r7,r19
 200bdcc:	2007b0c0 	call	2007b0c <__subdf3>
 200bdd0:	d9001017 	ldw	r4,64(sp)
 200bdd4:	a80b883a 	mov	r5,r21
 200bdd8:	100d883a 	mov	r6,r2
 200bddc:	180f883a 	mov	r7,r3
 200bde0:	2010aa00 	call	2010aa0 <__gtdf2>
 200bde4:	dac01617 	ldw	r11,88(sp)
 200bde8:	00841316 	blt	zero,r2,200ce38 <_dtoa_r+0x15e4>
 200bdec:	00800044 	movi	r2,1
 200bdf0:	12c0670e 	bge	r2,r11,200bf90 <_dtoa_r+0x73c>
 200bdf4:	bad7883a 	add	r11,r23,r11
 200bdf8:	df001115 	stw	fp,68(sp)
 200bdfc:	dc401215 	stw	r17,72(sp)
 200be00:	5839883a 	mov	fp,r11
 200be04:	dc401017 	ldw	r17,64(sp)
 200be08:	00000806 	br	200be2c <_dtoa_r+0x5d8>
 200be0c:	2007b0c0 	call	2007b0c <__subdf3>
 200be10:	1009883a 	mov	r4,r2
 200be14:	180b883a 	mov	r5,r3
 200be18:	880d883a 	mov	r6,r17
 200be1c:	a80f883a 	mov	r7,r21
 200be20:	20080040 	call	2008004 <__ltdf2>
 200be24:	1003ee16 	blt	r2,zero,200cde0 <_dtoa_r+0x158c>
 200be28:	b703f126 	beq	r22,fp,200cdf0 <_dtoa_r+0x159c>
 200be2c:	8809883a 	mov	r4,r17
 200be30:	a80b883a 	mov	r5,r21
 200be34:	000d883a 	mov	r6,zero
 200be38:	01d00934 	movhi	r7,16420
 200be3c:	2007b6c0 	call	2007b6c <__muldf3>
 200be40:	000d883a 	mov	r6,zero
 200be44:	01d00934 	movhi	r7,16420
 200be48:	9009883a 	mov	r4,r18
 200be4c:	980b883a 	mov	r5,r19
 200be50:	1023883a 	mov	r17,r2
 200be54:	182b883a 	mov	r21,r3
 200be58:	2007b6c0 	call	2007b6c <__muldf3>
 200be5c:	180b883a 	mov	r5,r3
 200be60:	1009883a 	mov	r4,r2
 200be64:	1825883a 	mov	r18,r3
 200be68:	1027883a 	mov	r19,r2
 200be6c:	20081340 	call	2008134 <__fixdfsi>
 200be70:	1009883a 	mov	r4,r2
 200be74:	1029883a 	mov	r20,r2
 200be78:	20080600 	call	2008060 <__floatsidf>
 200be7c:	9809883a 	mov	r4,r19
 200be80:	900b883a 	mov	r5,r18
 200be84:	100d883a 	mov	r6,r2
 200be88:	180f883a 	mov	r7,r3
 200be8c:	2007b0c0 	call	2007b0c <__subdf3>
 200be90:	a5000c04 	addi	r20,r20,48
 200be94:	b5000005 	stb	r20,0(r22)
 200be98:	1009883a 	mov	r4,r2
 200be9c:	180b883a 	mov	r5,r3
 200bea0:	880d883a 	mov	r6,r17
 200bea4:	a80f883a 	mov	r7,r21
 200bea8:	1025883a 	mov	r18,r2
 200beac:	1827883a 	mov	r19,r3
 200beb0:	20080040 	call	2008004 <__ltdf2>
 200beb4:	b5800044 	addi	r22,r22,1
 200beb8:	0009883a 	mov	r4,zero
 200bebc:	014ffc34 	movhi	r5,16368
 200bec0:	900d883a 	mov	r6,r18
 200bec4:	980f883a 	mov	r7,r19
 200bec8:	103fd00e 	bge	r2,zero,200be0c <_dtoa_r+0x5b8>
 200becc:	d9001317 	ldw	r4,76(sp)
 200bed0:	df001117 	ldw	fp,68(sp)
 200bed4:	d9000615 	stw	r4,24(sp)
 200bed8:	8009883a 	mov	r4,r16
 200bedc:	e00b883a 	mov	r5,fp
 200bee0:	200e2fc0 	call	200e2fc <_Bfree>
 200bee4:	d9c00617 	ldw	r7,24(sp)
 200bee8:	d8c02217 	ldw	r3,136(sp)
 200beec:	d9002417 	ldw	r4,144(sp)
 200bef0:	b0000005 	stb	zero,0(r22)
 200bef4:	38800044 	addi	r2,r7,1
 200bef8:	18800015 	stw	r2,0(r3)
 200befc:	203e8426 	beq	r4,zero,200b910 <_dtoa_r+0xbc>
 200bf00:	25800015 	stw	r22,0(r4)
 200bf04:	003e8206 	br	200b910 <_dtoa_r+0xbc>
 200bf08:	00800434 	movhi	r2,16
 200bf0c:	10bfffc4 	addi	r2,r2,-1
 200bf10:	90a4703a 	and	r18,r18,r2
 200bf14:	903e901e 	bne	r18,zero,200b958 <_dtoa_r+0x104>
 200bf18:	05c080f4 	movhi	r23,515
 200bf1c:	bdfa1204 	addi	r23,r23,-6072
 200bf20:	003e8f06 	br	200b960 <_dtoa_r+0x10c>
 200bf24:	b8800204 	addi	r2,r23,8
 200bf28:	003e9206 	br	200b974 <_dtoa_r+0x120>
 200bf2c:	01400434 	movhi	r5,16
 200bf30:	297fffc4 	addi	r5,r5,-1
 200bf34:	894a703a 	and	r5,r17,r5
 200bf38:	d9000317 	ldw	r4,12(sp)
 200bf3c:	294ffc34 	orhi	r5,r5,16368
 200bf40:	a53f0044 	addi	r20,r20,-1023
 200bf44:	dd400217 	ldw	r21,8(sp)
 200bf48:	d8000f15 	stw	zero,60(sp)
 200bf4c:	003eb106 	br	200ba14 <_dtoa_r+0x1c0>
 200bf50:	05c080f4 	movhi	r23,515
 200bf54:	bdfa0904 	addi	r23,r23,-6108
 200bf58:	003e6d06 	br	200b910 <_dtoa_r+0xbc>
 200bf5c:	d8000415 	stw	zero,16(sp)
 200bf60:	80001115 	stw	zero,68(r16)
 200bf64:	8009883a 	mov	r4,r16
 200bf68:	000b883a 	mov	r5,zero
 200bf6c:	200e2540 	call	200e254 <_Balloc>
 200bf70:	01ffffc4 	movi	r7,-1
 200bf74:	102f883a 	mov	r23,r2
 200bf78:	80801015 	stw	r2,64(r16)
 200bf7c:	00800044 	movi	r2,1
 200bf80:	d9c00915 	stw	r7,36(sp)
 200bf84:	d8002115 	stw	zero,132(sp)
 200bf88:	d9c00e15 	stw	r7,56(sp)
 200bf8c:	d8800c15 	stw	r2,48(sp)
 200bf90:	d8800117 	ldw	r2,4(sp)
 200bf94:	10008b16 	blt	r2,zero,200c1c4 <_dtoa_r+0x970>
 200bf98:	d9000617 	ldw	r4,24(sp)
 200bf9c:	00c00384 	movi	r3,14
 200bfa0:	19008816 	blt	r3,r4,200c1c4 <_dtoa_r+0x970>
 200bfa4:	200490fa 	slli	r2,r4,3
 200bfa8:	d9c02117 	ldw	r7,132(sp)
 200bfac:	00c080f4 	movhi	r3,515
 200bfb0:	18fa3a04 	addi	r3,r3,-5912
 200bfb4:	1885883a 	add	r2,r3,r2
 200bfb8:	14800017 	ldw	r18,0(r2)
 200bfbc:	14c00117 	ldw	r19,4(r2)
 200bfc0:	3801c916 	blt	r7,zero,200c6e8 <_dtoa_r+0xe94>
 200bfc4:	d9000317 	ldw	r4,12(sp)
 200bfc8:	900d883a 	mov	r6,r18
 200bfcc:	980f883a 	mov	r7,r19
 200bfd0:	880b883a 	mov	r5,r17
 200bfd4:	2007e500 	call	2007e50 <__divdf3>
 200bfd8:	180b883a 	mov	r5,r3
 200bfdc:	1009883a 	mov	r4,r2
 200bfe0:	20081340 	call	2008134 <__fixdfsi>
 200bfe4:	1009883a 	mov	r4,r2
 200bfe8:	102b883a 	mov	r21,r2
 200bfec:	20080600 	call	2008060 <__floatsidf>
 200bff0:	1009883a 	mov	r4,r2
 200bff4:	180b883a 	mov	r5,r3
 200bff8:	900d883a 	mov	r6,r18
 200bffc:	980f883a 	mov	r7,r19
 200c000:	2007b6c0 	call	2007b6c <__muldf3>
 200c004:	d9000317 	ldw	r4,12(sp)
 200c008:	880b883a 	mov	r5,r17
 200c00c:	100d883a 	mov	r6,r2
 200c010:	180f883a 	mov	r7,r3
 200c014:	2007b0c0 	call	2007b0c <__subdf3>
 200c018:	d9c00917 	ldw	r7,36(sp)
 200c01c:	1009883a 	mov	r4,r2
 200c020:	a8800c04 	addi	r2,r21,48
 200c024:	b8800005 	stb	r2,0(r23)
 200c028:	01800044 	movi	r6,1
 200c02c:	180b883a 	mov	r5,r3
 200c030:	2005883a 	mov	r2,r4
 200c034:	bd800044 	addi	r22,r23,1
 200c038:	39803726 	beq	r7,r6,200c118 <_dtoa_r+0x8c4>
 200c03c:	000d883a 	mov	r6,zero
 200c040:	01d00934 	movhi	r7,16420
 200c044:	2007b6c0 	call	2007b6c <__muldf3>
 200c048:	1009883a 	mov	r4,r2
 200c04c:	180b883a 	mov	r5,r3
 200c050:	000d883a 	mov	r6,zero
 200c054:	000f883a 	mov	r7,zero
 200c058:	1029883a 	mov	r20,r2
 200c05c:	1823883a 	mov	r17,r3
 200c060:	20109e80 	call	20109e8 <__eqdf2>
 200c064:	103f9c26 	beq	r2,zero,200bed8 <_dtoa_r+0x684>
 200c068:	dd400917 	ldw	r21,36(sp)
 200c06c:	dc000415 	stw	r16,16(sp)
 200c070:	00000906 	br	200c098 <_dtoa_r+0x844>
 200c074:	2007b6c0 	call	2007b6c <__muldf3>
 200c078:	1009883a 	mov	r4,r2
 200c07c:	180b883a 	mov	r5,r3
 200c080:	000d883a 	mov	r6,zero
 200c084:	000f883a 	mov	r7,zero
 200c088:	1029883a 	mov	r20,r2
 200c08c:	1823883a 	mov	r17,r3
 200c090:	20109e80 	call	20109e8 <__eqdf2>
 200c094:	10022926 	beq	r2,zero,200c93c <_dtoa_r+0x10e8>
 200c098:	900d883a 	mov	r6,r18
 200c09c:	980f883a 	mov	r7,r19
 200c0a0:	a009883a 	mov	r4,r20
 200c0a4:	880b883a 	mov	r5,r17
 200c0a8:	2007e500 	call	2007e50 <__divdf3>
 200c0ac:	180b883a 	mov	r5,r3
 200c0b0:	1009883a 	mov	r4,r2
 200c0b4:	20081340 	call	2008134 <__fixdfsi>
 200c0b8:	1009883a 	mov	r4,r2
 200c0bc:	1021883a 	mov	r16,r2
 200c0c0:	20080600 	call	2008060 <__floatsidf>
 200c0c4:	1009883a 	mov	r4,r2
 200c0c8:	180b883a 	mov	r5,r3
 200c0cc:	900d883a 	mov	r6,r18
 200c0d0:	980f883a 	mov	r7,r19
 200c0d4:	2007b6c0 	call	2007b6c <__muldf3>
 200c0d8:	a009883a 	mov	r4,r20
 200c0dc:	880b883a 	mov	r5,r17
 200c0e0:	100d883a 	mov	r6,r2
 200c0e4:	180f883a 	mov	r7,r3
 200c0e8:	2007b0c0 	call	2007b0c <__subdf3>
 200c0ec:	82400c04 	addi	r9,r16,48
 200c0f0:	b2400005 	stb	r9,0(r22)
 200c0f4:	b5800044 	addi	r22,r22,1
 200c0f8:	b5d3c83a 	sub	r9,r22,r23
 200c0fc:	000d883a 	mov	r6,zero
 200c100:	01d00934 	movhi	r7,16420
 200c104:	1009883a 	mov	r4,r2
 200c108:	180b883a 	mov	r5,r3
 200c10c:	aa7fd91e 	bne	r21,r9,200c074 <_dtoa_r+0x820>
 200c110:	802b883a 	mov	r21,r16
 200c114:	dc000417 	ldw	r16,16(sp)
 200c118:	1009883a 	mov	r4,r2
 200c11c:	180b883a 	mov	r5,r3
 200c120:	100d883a 	mov	r6,r2
 200c124:	180f883a 	mov	r7,r3
 200c128:	2007ab80 	call	2007ab8 <__adddf3>
 200c12c:	9009883a 	mov	r4,r18
 200c130:	980b883a 	mov	r5,r19
 200c134:	100d883a 	mov	r6,r2
 200c138:	180f883a 	mov	r7,r3
 200c13c:	1023883a 	mov	r17,r2
 200c140:	1829883a 	mov	r20,r3
 200c144:	20080040 	call	2008004 <__ltdf2>
 200c148:	10000816 	blt	r2,zero,200c16c <_dtoa_r+0x918>
 200c14c:	9009883a 	mov	r4,r18
 200c150:	980b883a 	mov	r5,r19
 200c154:	880d883a 	mov	r6,r17
 200c158:	a00f883a 	mov	r7,r20
 200c15c:	20109e80 	call	20109e8 <__eqdf2>
 200c160:	103f5d1e 	bne	r2,zero,200bed8 <_dtoa_r+0x684>
 200c164:	ad40004c 	andi	r21,r21,1
 200c168:	a83f5b26 	beq	r21,zero,200bed8 <_dtoa_r+0x684>
 200c16c:	b53fffc3 	ldbu	r20,-1(r22)
 200c170:	b0ffff84 	addi	r3,r22,-2
 200c174:	01400e44 	movi	r5,57
 200c178:	00000306 	br	200c188 <_dtoa_r+0x934>
 200c17c:	1d000003 	ldbu	r20,0(r3)
 200c180:	102d883a 	mov	r22,r2
 200c184:	18ffffc4 	addi	r3,r3,-1
 200c188:	a1003fcc 	andi	r4,r20,255
 200c18c:	2100201c 	xori	r4,r4,128
 200c190:	213fe004 	addi	r4,r4,-128
 200c194:	b0bfffc4 	addi	r2,r22,-1
 200c198:	2142ca1e 	bne	r4,r5,200ccc4 <_dtoa_r+0x1470>
 200c19c:	b8bff71e 	bne	r23,r2,200c17c <_dtoa_r+0x928>
 200c1a0:	d8800617 	ldw	r2,24(sp)
 200c1a4:	05000c44 	movi	r20,49
 200c1a8:	10800044 	addi	r2,r2,1
 200c1ac:	d8800615 	stw	r2,24(sp)
 200c1b0:	00800c04 	movi	r2,48
 200c1b4:	b8800005 	stb	r2,0(r23)
 200c1b8:	b805883a 	mov	r2,r23
 200c1bc:	15000005 	stb	r20,0(r2)
 200c1c0:	003f4506 	br	200bed8 <_dtoa_r+0x684>
 200c1c4:	d9c00c17 	ldw	r7,48(sp)
 200c1c8:	3800c926 	beq	r7,zero,200c4f0 <_dtoa_r+0xc9c>
 200c1cc:	d9c00417 	ldw	r7,16(sp)
 200c1d0:	00c00044 	movi	r3,1
 200c1d4:	19c16c0e 	bge	r3,r7,200c788 <_dtoa_r+0xf34>
 200c1d8:	d9000917 	ldw	r4,36(sp)
 200c1dc:	d9c00a17 	ldw	r7,40(sp)
 200c1e0:	24ffffc4 	addi	r19,r4,-1
 200c1e4:	3cc20716 	blt	r7,r19,200ca04 <_dtoa_r+0x11b0>
 200c1e8:	3ce7c83a 	sub	r19,r7,r19
 200c1ec:	d9c00917 	ldw	r7,36(sp)
 200c1f0:	3802ae16 	blt	r7,zero,200ccac <_dtoa_r+0x1458>
 200c1f4:	dc800817 	ldw	r18,32(sp)
 200c1f8:	d8800917 	ldw	r2,36(sp)
 200c1fc:	d8c00817 	ldw	r3,32(sp)
 200c200:	d9c00717 	ldw	r7,28(sp)
 200c204:	8009883a 	mov	r4,r16
 200c208:	1887883a 	add	r3,r3,r2
 200c20c:	388f883a 	add	r7,r7,r2
 200c210:	01400044 	movi	r5,1
 200c214:	d8c00815 	stw	r3,32(sp)
 200c218:	d9c00715 	stw	r7,28(sp)
 200c21c:	200e6540 	call	200e654 <__i2b>
 200c220:	102b883a 	mov	r21,r2
 200c224:	90000a26 	beq	r18,zero,200c250 <_dtoa_r+0x9fc>
 200c228:	d8800717 	ldw	r2,28(sp)
 200c22c:	0080080e 	bge	zero,r2,200c250 <_dtoa_r+0x9fc>
 200c230:	90812b16 	blt	r18,r2,200c6e0 <_dtoa_r+0xe8c>
 200c234:	d8c00817 	ldw	r3,32(sp)
 200c238:	d9000717 	ldw	r4,28(sp)
 200c23c:	90a5c83a 	sub	r18,r18,r2
 200c240:	1887c83a 	sub	r3,r3,r2
 200c244:	2089c83a 	sub	r4,r4,r2
 200c248:	d8c00815 	stw	r3,32(sp)
 200c24c:	d9000715 	stw	r4,28(sp)
 200c250:	d9c00a17 	ldw	r7,40(sp)
 200c254:	01c0140e 	bge	zero,r7,200c2a8 <_dtoa_r+0xa54>
 200c258:	d8800c17 	ldw	r2,48(sp)
 200c25c:	1001de26 	beq	r2,zero,200c9d8 <_dtoa_r+0x1184>
 200c260:	04c00e0e 	bge	zero,r19,200c29c <_dtoa_r+0xa48>
 200c264:	a80b883a 	mov	r5,r21
 200c268:	8009883a 	mov	r4,r16
 200c26c:	980d883a 	mov	r6,r19
 200c270:	200e8700 	call	200e870 <__pow5mult>
 200c274:	e00d883a 	mov	r6,fp
 200c278:	8009883a 	mov	r4,r16
 200c27c:	100b883a 	mov	r5,r2
 200c280:	102b883a 	mov	r21,r2
 200c284:	200e6900 	call	200e690 <__multiply>
 200c288:	1029883a 	mov	r20,r2
 200c28c:	e00b883a 	mov	r5,fp
 200c290:	8009883a 	mov	r4,r16
 200c294:	200e2fc0 	call	200e2fc <_Bfree>
 200c298:	a039883a 	mov	fp,r20
 200c29c:	d8c00a17 	ldw	r3,40(sp)
 200c2a0:	1ccdc83a 	sub	r6,r3,r19
 200c2a4:	3001291e 	bne	r6,zero,200c74c <_dtoa_r+0xef8>
 200c2a8:	8009883a 	mov	r4,r16
 200c2ac:	01400044 	movi	r5,1
 200c2b0:	200e6540 	call	200e654 <__i2b>
 200c2b4:	d9000b17 	ldw	r4,44(sp)
 200c2b8:	1029883a 	mov	r20,r2
 200c2bc:	0100050e 	bge	zero,r4,200c2d4 <_dtoa_r+0xa80>
 200c2c0:	d9800b17 	ldw	r6,44(sp)
 200c2c4:	8009883a 	mov	r4,r16
 200c2c8:	100b883a 	mov	r5,r2
 200c2cc:	200e8700 	call	200e870 <__pow5mult>
 200c2d0:	1029883a 	mov	r20,r2
 200c2d4:	d9c00417 	ldw	r7,16(sp)
 200c2d8:	00800044 	movi	r2,1
 200c2dc:	11c0f00e 	bge	r2,r7,200c6a0 <_dtoa_r+0xe4c>
 200c2e0:	0023883a 	mov	r17,zero
 200c2e4:	d8800b17 	ldw	r2,44(sp)
 200c2e8:	1001741e 	bne	r2,zero,200c8bc <_dtoa_r+0x1068>
 200c2ec:	00800044 	movi	r2,1
 200c2f0:	d8c00717 	ldw	r3,28(sp)
 200c2f4:	10c5883a 	add	r2,r2,r3
 200c2f8:	108007cc 	andi	r2,r2,31
 200c2fc:	10008026 	beq	r2,zero,200c500 <_dtoa_r+0xcac>
 200c300:	01000804 	movi	r4,32
 200c304:	2089c83a 	sub	r4,r4,r2
 200c308:	00c00104 	movi	r3,4
 200c30c:	1902d00e 	bge	r3,r4,200ce50 <_dtoa_r+0x15fc>
 200c310:	d9000817 	ldw	r4,32(sp)
 200c314:	d9c00717 	ldw	r7,28(sp)
 200c318:	00c00704 	movi	r3,28
 200c31c:	1885c83a 	sub	r2,r3,r2
 200c320:	2089883a 	add	r4,r4,r2
 200c324:	388f883a 	add	r7,r7,r2
 200c328:	d9000815 	stw	r4,32(sp)
 200c32c:	90a5883a 	add	r18,r18,r2
 200c330:	d9c00715 	stw	r7,28(sp)
 200c334:	d9c00817 	ldw	r7,32(sp)
 200c338:	01c0050e 	bge	zero,r7,200c350 <_dtoa_r+0xafc>
 200c33c:	e00b883a 	mov	r5,fp
 200c340:	8009883a 	mov	r4,r16
 200c344:	380d883a 	mov	r6,r7
 200c348:	200e99c0 	call	200e99c <__lshift>
 200c34c:	1039883a 	mov	fp,r2
 200c350:	d8800717 	ldw	r2,28(sp)
 200c354:	0080050e 	bge	zero,r2,200c36c <_dtoa_r+0xb18>
 200c358:	a00b883a 	mov	r5,r20
 200c35c:	8009883a 	mov	r4,r16
 200c360:	100d883a 	mov	r6,r2
 200c364:	200e99c0 	call	200e99c <__lshift>
 200c368:	1029883a 	mov	r20,r2
 200c36c:	d8c00d17 	ldw	r3,52(sp)
 200c370:	1801401e 	bne	r3,zero,200c874 <_dtoa_r+0x1020>
 200c374:	d8800917 	ldw	r2,36(sp)
 200c378:	00815a0e 	bge	zero,r2,200c8e4 <_dtoa_r+0x1090>
 200c37c:	d8c00c17 	ldw	r3,48(sp)
 200c380:	18006f1e 	bne	r3,zero,200c540 <_dtoa_r+0xcec>
 200c384:	b823883a 	mov	r17,r23
 200c388:	dc800917 	ldw	r18,36(sp)
 200c38c:	00000206 	br	200c398 <_dtoa_r+0xb44>
 200c390:	200e3240 	call	200e324 <__multadd>
 200c394:	1039883a 	mov	fp,r2
 200c398:	e009883a 	mov	r4,fp
 200c39c:	a00b883a 	mov	r5,r20
 200c3a0:	200b64c0 	call	200b64c <quorem>
 200c3a4:	10800c04 	addi	r2,r2,48
 200c3a8:	88800005 	stb	r2,0(r17)
 200c3ac:	8c400044 	addi	r17,r17,1
 200c3b0:	8dc7c83a 	sub	r3,r17,r23
 200c3b4:	8009883a 	mov	r4,r16
 200c3b8:	e00b883a 	mov	r5,fp
 200c3bc:	01800284 	movi	r6,10
 200c3c0:	000f883a 	mov	r7,zero
 200c3c4:	1cbff216 	blt	r3,r18,200c390 <_dtoa_r+0xb3c>
 200c3c8:	dd800917 	ldw	r22,36(sp)
 200c3cc:	1007883a 	mov	r3,r2
 200c3d0:	05823a0e 	bge	zero,r22,200ccbc <_dtoa_r+0x1468>
 200c3d4:	bdad883a 	add	r22,r23,r22
 200c3d8:	0023883a 	mov	r17,zero
 200c3dc:	e00b883a 	mov	r5,fp
 200c3e0:	01800044 	movi	r6,1
 200c3e4:	8009883a 	mov	r4,r16
 200c3e8:	d8c01515 	stw	r3,84(sp)
 200c3ec:	200e99c0 	call	200e99c <__lshift>
 200c3f0:	1009883a 	mov	r4,r2
 200c3f4:	a00b883a 	mov	r5,r20
 200c3f8:	1039883a 	mov	fp,r2
 200c3fc:	200eaf80 	call	200eaf8 <__mcmp>
 200c400:	d8c01517 	ldw	r3,84(sp)
 200c404:	0080d60e 	bge	zero,r2,200c760 <_dtoa_r+0xf0c>
 200c408:	b13fffc3 	ldbu	r4,-1(r22)
 200c40c:	b0ffff84 	addi	r3,r22,-2
 200c410:	01800e44 	movi	r6,57
 200c414:	00000306 	br	200c424 <_dtoa_r+0xbd0>
 200c418:	19000003 	ldbu	r4,0(r3)
 200c41c:	102d883a 	mov	r22,r2
 200c420:	18ffffc4 	addi	r3,r3,-1
 200c424:	21403fcc 	andi	r5,r4,255
 200c428:	2940201c 	xori	r5,r5,128
 200c42c:	297fe004 	addi	r5,r5,-128
 200c430:	b0bfffc4 	addi	r2,r22,-1
 200c434:	2981a71e 	bne	r5,r6,200cad4 <_dtoa_r+0x1280>
 200c438:	b8bff71e 	bne	r23,r2,200c418 <_dtoa_r+0xbc4>
 200c43c:	d8800617 	ldw	r2,24(sp)
 200c440:	10800044 	addi	r2,r2,1
 200c444:	d8800615 	stw	r2,24(sp)
 200c448:	00800c44 	movi	r2,49
 200c44c:	b8800005 	stb	r2,0(r23)
 200c450:	8009883a 	mov	r4,r16
 200c454:	a00b883a 	mov	r5,r20
 200c458:	200e2fc0 	call	200e2fc <_Bfree>
 200c45c:	a83e9e26 	beq	r21,zero,200bed8 <_dtoa_r+0x684>
 200c460:	88000426 	beq	r17,zero,200c474 <_dtoa_r+0xc20>
 200c464:	8d400326 	beq	r17,r21,200c474 <_dtoa_r+0xc20>
 200c468:	8009883a 	mov	r4,r16
 200c46c:	880b883a 	mov	r5,r17
 200c470:	200e2fc0 	call	200e2fc <_Bfree>
 200c474:	8009883a 	mov	r4,r16
 200c478:	a80b883a 	mov	r5,r21
 200c47c:	200e2fc0 	call	200e2fc <_Bfree>
 200c480:	003e9506 	br	200bed8 <_dtoa_r+0x684>
 200c484:	00c00044 	movi	r3,1
 200c488:	d8c00d15 	stw	r3,52(sp)
 200c48c:	003d9f06 	br	200bb0c <_dtoa_r+0x2b8>
 200c490:	d9000817 	ldw	r4,32(sp)
 200c494:	d8800617 	ldw	r2,24(sp)
 200c498:	d8000b15 	stw	zero,44(sp)
 200c49c:	2089c83a 	sub	r4,r4,r2
 200c4a0:	0087c83a 	sub	r3,zero,r2
 200c4a4:	d9000815 	stw	r4,32(sp)
 200c4a8:	d8c00a15 	stw	r3,40(sp)
 200c4ac:	003da306 	br	200bb3c <_dtoa_r+0x2e8>
 200c4b0:	0529c83a 	sub	r20,zero,r20
 200c4b4:	dd000815 	stw	r20,32(sp)
 200c4b8:	d8000715 	stw	zero,28(sp)
 200c4bc:	003d9806 	br	200bb20 <_dtoa_r+0x2cc>
 200c4c0:	d9000617 	ldw	r4,24(sp)
 200c4c4:	20080600 	call	2008060 <__floatsidf>
 200c4c8:	1009883a 	mov	r4,r2
 200c4cc:	180b883a 	mov	r5,r3
 200c4d0:	980d883a 	mov	r6,r19
 200c4d4:	900f883a 	mov	r7,r18
 200c4d8:	2010a440 	call	2010a44 <__nedf2>
 200c4dc:	103d7a26 	beq	r2,zero,200bac8 <_dtoa_r+0x274>
 200c4e0:	d8800617 	ldw	r2,24(sp)
 200c4e4:	10bfffc4 	addi	r2,r2,-1
 200c4e8:	d8800615 	stw	r2,24(sp)
 200c4ec:	003d7606 	br	200bac8 <_dtoa_r+0x274>
 200c4f0:	dcc00a17 	ldw	r19,40(sp)
 200c4f4:	dc800817 	ldw	r18,32(sp)
 200c4f8:	002b883a 	mov	r21,zero
 200c4fc:	003f4906 	br	200c224 <_dtoa_r+0x9d0>
 200c500:	00800704 	movi	r2,28
 200c504:	d8c00817 	ldw	r3,32(sp)
 200c508:	d9000717 	ldw	r4,28(sp)
 200c50c:	90a5883a 	add	r18,r18,r2
 200c510:	1887883a 	add	r3,r3,r2
 200c514:	2089883a 	add	r4,r4,r2
 200c518:	d8c00815 	stw	r3,32(sp)
 200c51c:	d9000715 	stw	r4,28(sp)
 200c520:	003f8406 	br	200c334 <_dtoa_r+0xae0>
 200c524:	d9c00317 	ldw	r7,12(sp)
 200c528:	013efb84 	movi	r4,-1042
 200c52c:	2509c83a 	sub	r4,r4,r20
 200c530:	3908983a 	sll	r4,r7,r4
 200c534:	003d3006 	br	200b9f8 <_dtoa_r+0x1a4>
 200c538:	d8000d15 	stw	zero,52(sp)
 200c53c:	003d7306 	br	200bb0c <_dtoa_r+0x2b8>
 200c540:	0480050e 	bge	zero,r18,200c558 <_dtoa_r+0xd04>
 200c544:	a80b883a 	mov	r5,r21
 200c548:	8009883a 	mov	r4,r16
 200c54c:	900d883a 	mov	r6,r18
 200c550:	200e99c0 	call	200e99c <__lshift>
 200c554:	102b883a 	mov	r21,r2
 200c558:	8801611e 	bne	r17,zero,200cae0 <_dtoa_r+0x128c>
 200c55c:	a827883a 	mov	r19,r21
 200c560:	d8c00317 	ldw	r3,12(sp)
 200c564:	d9000917 	ldw	r4,36(sp)
 200c568:	b8bfffc4 	addi	r2,r23,-1
 200c56c:	18c0004c 	andi	r3,r3,1
 200c570:	1105883a 	add	r2,r2,r4
 200c574:	b825883a 	mov	r18,r23
 200c578:	d8800515 	stw	r2,20(sp)
 200c57c:	a823883a 	mov	r17,r21
 200c580:	d8c00315 	stw	r3,12(sp)
 200c584:	ddc00715 	stw	r23,28(sp)
 200c588:	e009883a 	mov	r4,fp
 200c58c:	a00b883a 	mov	r5,r20
 200c590:	200b64c0 	call	200b64c <quorem>
 200c594:	e009883a 	mov	r4,fp
 200c598:	880b883a 	mov	r5,r17
 200c59c:	102d883a 	mov	r22,r2
 200c5a0:	200eaf80 	call	200eaf8 <__mcmp>
 200c5a4:	980d883a 	mov	r6,r19
 200c5a8:	8009883a 	mov	r4,r16
 200c5ac:	a00b883a 	mov	r5,r20
 200c5b0:	102b883a 	mov	r21,r2
 200c5b4:	200eb500 	call	200eb50 <__mdiff>
 200c5b8:	100d883a 	mov	r6,r2
 200c5bc:	10800317 	ldw	r2,12(r2)
 200c5c0:	b5c00c04 	addi	r23,r22,48
 200c5c4:	10008c26 	beq	r2,zero,200c7f8 <_dtoa_r+0xfa4>
 200c5c8:	8009883a 	mov	r4,r16
 200c5cc:	300b883a 	mov	r5,r6
 200c5d0:	200e2fc0 	call	200e2fc <_Bfree>
 200c5d4:	00800044 	movi	r2,1
 200c5d8:	a8007116 	blt	r21,zero,200c7a0 <_dtoa_r+0xf4c>
 200c5dc:	a800041e 	bne	r21,zero,200c5f0 <_dtoa_r+0xd9c>
 200c5e0:	d9c00417 	ldw	r7,16(sp)
 200c5e4:	3800021e 	bne	r7,zero,200c5f0 <_dtoa_r+0xd9c>
 200c5e8:	d8c00317 	ldw	r3,12(sp)
 200c5ec:	18006c26 	beq	r3,zero,200c7a0 <_dtoa_r+0xf4c>
 200c5f0:	00814c16 	blt	zero,r2,200cb24 <_dtoa_r+0x12d0>
 200c5f4:	d8c00517 	ldw	r3,20(sp)
 200c5f8:	95400044 	addi	r21,r18,1
 200c5fc:	95c00005 	stb	r23,0(r18)
 200c600:	a82d883a 	mov	r22,r21
 200c604:	90c14d26 	beq	r18,r3,200cb3c <_dtoa_r+0x12e8>
 200c608:	e00b883a 	mov	r5,fp
 200c60c:	8009883a 	mov	r4,r16
 200c610:	01800284 	movi	r6,10
 200c614:	000f883a 	mov	r7,zero
 200c618:	200e3240 	call	200e324 <__multadd>
 200c61c:	1039883a 	mov	fp,r2
 200c620:	8cc08b26 	beq	r17,r19,200c850 <_dtoa_r+0xffc>
 200c624:	880b883a 	mov	r5,r17
 200c628:	01800284 	movi	r6,10
 200c62c:	000f883a 	mov	r7,zero
 200c630:	8009883a 	mov	r4,r16
 200c634:	200e3240 	call	200e324 <__multadd>
 200c638:	980b883a 	mov	r5,r19
 200c63c:	8009883a 	mov	r4,r16
 200c640:	01800284 	movi	r6,10
 200c644:	000f883a 	mov	r7,zero
 200c648:	1023883a 	mov	r17,r2
 200c64c:	200e3240 	call	200e324 <__multadd>
 200c650:	1027883a 	mov	r19,r2
 200c654:	a825883a 	mov	r18,r21
 200c658:	003fcb06 	br	200c588 <_dtoa_r+0xd34>
 200c65c:	d9c00417 	ldw	r7,16(sp)
 200c660:	00800104 	movi	r2,4
 200c664:	3880e426 	beq	r7,r2,200c9f8 <_dtoa_r+0x11a4>
 200c668:	00800144 	movi	r2,5
 200c66c:	38be3c1e 	bne	r7,r2,200bf60 <_dtoa_r+0x70c>
 200c670:	00c00044 	movi	r3,1
 200c674:	d8c00c15 	stw	r3,48(sp)
 200c678:	d9c02117 	ldw	r7,132(sp)
 200c67c:	d8800617 	ldw	r2,24(sp)
 200c680:	388f883a 	add	r7,r7,r2
 200c684:	3c800044 	addi	r18,r7,1
 200c688:	d9c00e15 	stw	r7,56(sp)
 200c68c:	dc800915 	stw	r18,36(sp)
 200c690:	04bd3e16 	blt	zero,r18,200bb8c <_dtoa_r+0x338>
 200c694:	80001115 	stw	zero,68(r16)
 200c698:	000b883a 	mov	r5,zero
 200c69c:	003d4606 	br	200bbb8 <_dtoa_r+0x364>
 200c6a0:	d8c00317 	ldw	r3,12(sp)
 200c6a4:	183f0e1e 	bne	r3,zero,200c2e0 <_dtoa_r+0xa8c>
 200c6a8:	00c00434 	movhi	r3,16
 200c6ac:	18ffffc4 	addi	r3,r3,-1
 200c6b0:	88c6703a 	and	r3,r17,r3
 200c6b4:	183f0a1e 	bne	r3,zero,200c2e0 <_dtoa_r+0xa8c>
 200c6b8:	8c5ffc2c 	andhi	r17,r17,32752
 200c6bc:	883f0826 	beq	r17,zero,200c2e0 <_dtoa_r+0xa8c>
 200c6c0:	d9000817 	ldw	r4,32(sp)
 200c6c4:	d9c00717 	ldw	r7,28(sp)
 200c6c8:	1023883a 	mov	r17,r2
 200c6cc:	2089883a 	add	r4,r4,r2
 200c6d0:	388f883a 	add	r7,r7,r2
 200c6d4:	d9000815 	stw	r4,32(sp)
 200c6d8:	d9c00715 	stw	r7,28(sp)
 200c6dc:	003f0106 	br	200c2e4 <_dtoa_r+0xa90>
 200c6e0:	9005883a 	mov	r2,r18
 200c6e4:	003ed306 	br	200c234 <_dtoa_r+0x9e0>
 200c6e8:	d8800917 	ldw	r2,36(sp)
 200c6ec:	00be3516 	blt	zero,r2,200bfc4 <_dtoa_r+0x770>
 200c6f0:	1000b61e 	bne	r2,zero,200c9cc <_dtoa_r+0x1178>
 200c6f4:	9009883a 	mov	r4,r18
 200c6f8:	980b883a 	mov	r5,r19
 200c6fc:	000d883a 	mov	r6,zero
 200c700:	01d00534 	movhi	r7,16404
 200c704:	2007b6c0 	call	2007b6c <__muldf3>
 200c708:	d9800317 	ldw	r6,12(sp)
 200c70c:	1009883a 	mov	r4,r2
 200c710:	180b883a 	mov	r5,r3
 200c714:	880f883a 	mov	r7,r17
 200c718:	2010b040 	call	2010b04 <__gedf2>
 200c71c:	0029883a 	mov	r20,zero
 200c720:	002b883a 	mov	r21,zero
 200c724:	10007e16 	blt	r2,zero,200c920 <_dtoa_r+0x10cc>
 200c728:	d8802117 	ldw	r2,132(sp)
 200c72c:	b82d883a 	mov	r22,r23
 200c730:	0084303a 	nor	r2,zero,r2
 200c734:	d8800615 	stw	r2,24(sp)
 200c738:	8009883a 	mov	r4,r16
 200c73c:	a00b883a 	mov	r5,r20
 200c740:	200e2fc0 	call	200e2fc <_Bfree>
 200c744:	a83f4b1e 	bne	r21,zero,200c474 <_dtoa_r+0xc20>
 200c748:	003de306 	br	200bed8 <_dtoa_r+0x684>
 200c74c:	e00b883a 	mov	r5,fp
 200c750:	8009883a 	mov	r4,r16
 200c754:	200e8700 	call	200e870 <__pow5mult>
 200c758:	1039883a 	mov	fp,r2
 200c75c:	003ed206 	br	200c2a8 <_dtoa_r+0xa54>
 200c760:	1000021e 	bne	r2,zero,200c76c <_dtoa_r+0xf18>
 200c764:	18c0004c 	andi	r3,r3,1
 200c768:	183f271e 	bne	r3,zero,200c408 <_dtoa_r+0xbb4>
 200c76c:	01000c04 	movi	r4,48
 200c770:	00000106 	br	200c778 <_dtoa_r+0xf24>
 200c774:	102d883a 	mov	r22,r2
 200c778:	b0bfffc4 	addi	r2,r22,-1
 200c77c:	10c00007 	ldb	r3,0(r2)
 200c780:	193ffc26 	beq	r3,r4,200c774 <_dtoa_r+0xf20>
 200c784:	003f3206 	br	200c450 <_dtoa_r+0xbfc>
 200c788:	d8c00f17 	ldw	r3,60(sp)
 200c78c:	18015026 	beq	r3,zero,200ccd0 <_dtoa_r+0x147c>
 200c790:	10810cc4 	addi	r2,r2,1075
 200c794:	dcc00a17 	ldw	r19,40(sp)
 200c798:	dc800817 	ldw	r18,32(sp)
 200c79c:	003e9706 	br	200c1fc <_dtoa_r+0x9a8>
 200c7a0:	b807883a 	mov	r3,r23
 200c7a4:	182b883a 	mov	r21,r3
 200c7a8:	ddc00717 	ldw	r23,28(sp)
 200c7ac:	00800e0e 	bge	zero,r2,200c7e8 <_dtoa_r+0xf94>
 200c7b0:	e00b883a 	mov	r5,fp
 200c7b4:	01800044 	movi	r6,1
 200c7b8:	8009883a 	mov	r4,r16
 200c7bc:	d8c01515 	stw	r3,84(sp)
 200c7c0:	200e99c0 	call	200e99c <__lshift>
 200c7c4:	1009883a 	mov	r4,r2
 200c7c8:	a00b883a 	mov	r5,r20
 200c7cc:	1039883a 	mov	fp,r2
 200c7d0:	200eaf80 	call	200eaf8 <__mcmp>
 200c7d4:	d8c01517 	ldw	r3,84(sp)
 200c7d8:	0081880e 	bge	zero,r2,200cdfc <_dtoa_r+0x15a8>
 200c7dc:	00800e44 	movi	r2,57
 200c7e0:	b0c00c44 	addi	r3,r22,49
 200c7e4:	a8816326 	beq	r21,r2,200cd74 <_dtoa_r+0x1520>
 200c7e8:	90c00005 	stb	r3,0(r18)
 200c7ec:	95800044 	addi	r22,r18,1
 200c7f0:	982b883a 	mov	r21,r19
 200c7f4:	003f1606 	br	200c450 <_dtoa_r+0xbfc>
 200c7f8:	300b883a 	mov	r5,r6
 200c7fc:	e009883a 	mov	r4,fp
 200c800:	d9801515 	stw	r6,84(sp)
 200c804:	200eaf80 	call	200eaf8 <__mcmp>
 200c808:	d9801517 	ldw	r6,84(sp)
 200c80c:	8009883a 	mov	r4,r16
 200c810:	d8801515 	stw	r2,84(sp)
 200c814:	300b883a 	mov	r5,r6
 200c818:	200e2fc0 	call	200e2fc <_Bfree>
 200c81c:	d8801517 	ldw	r2,84(sp)
 200c820:	103f6d1e 	bne	r2,zero,200c5d8 <_dtoa_r+0xd84>
 200c824:	d9c00417 	ldw	r7,16(sp)
 200c828:	383f6b1e 	bne	r7,zero,200c5d8 <_dtoa_r+0xd84>
 200c82c:	d8c00317 	ldw	r3,12(sp)
 200c830:	183f691e 	bne	r3,zero,200c5d8 <_dtoa_r+0xd84>
 200c834:	b807883a 	mov	r3,r23
 200c838:	00800e44 	movi	r2,57
 200c83c:	ddc00717 	ldw	r23,28(sp)
 200c840:	18814c26 	beq	r3,r2,200cd74 <_dtoa_r+0x1520>
 200c844:	057fe80e 	bge	zero,r21,200c7e8 <_dtoa_r+0xf94>
 200c848:	b0c00c44 	addi	r3,r22,49
 200c84c:	003fe606 	br	200c7e8 <_dtoa_r+0xf94>
 200c850:	880b883a 	mov	r5,r17
 200c854:	8009883a 	mov	r4,r16
 200c858:	01800284 	movi	r6,10
 200c85c:	000f883a 	mov	r7,zero
 200c860:	200e3240 	call	200e324 <__multadd>
 200c864:	1023883a 	mov	r17,r2
 200c868:	1027883a 	mov	r19,r2
 200c86c:	a825883a 	mov	r18,r21
 200c870:	003f4506 	br	200c588 <_dtoa_r+0xd34>
 200c874:	e009883a 	mov	r4,fp
 200c878:	a00b883a 	mov	r5,r20
 200c87c:	200eaf80 	call	200eaf8 <__mcmp>
 200c880:	103ebc0e 	bge	r2,zero,200c374 <_dtoa_r+0xb20>
 200c884:	e00b883a 	mov	r5,fp
 200c888:	8009883a 	mov	r4,r16
 200c88c:	01800284 	movi	r6,10
 200c890:	000f883a 	mov	r7,zero
 200c894:	200e3240 	call	200e324 <__multadd>
 200c898:	1039883a 	mov	fp,r2
 200c89c:	d8800617 	ldw	r2,24(sp)
 200c8a0:	d8c00c17 	ldw	r3,48(sp)
 200c8a4:	10bfffc4 	addi	r2,r2,-1
 200c8a8:	d8800615 	stw	r2,24(sp)
 200c8ac:	1801571e 	bne	r3,zero,200ce0c <_dtoa_r+0x15b8>
 200c8b0:	d9c00e17 	ldw	r7,56(sp)
 200c8b4:	d9c00915 	stw	r7,36(sp)
 200c8b8:	003eae06 	br	200c374 <_dtoa_r+0xb20>
 200c8bc:	a0800417 	ldw	r2,16(r20)
 200c8c0:	10800104 	addi	r2,r2,4
 200c8c4:	1085883a 	add	r2,r2,r2
 200c8c8:	1085883a 	add	r2,r2,r2
 200c8cc:	a085883a 	add	r2,r20,r2
 200c8d0:	11000017 	ldw	r4,0(r2)
 200c8d4:	200e53c0 	call	200e53c <__hi0bits>
 200c8d8:	00c00804 	movi	r3,32
 200c8dc:	1885c83a 	sub	r2,r3,r2
 200c8e0:	003e8306 	br	200c2f0 <_dtoa_r+0xa9c>
 200c8e4:	d9c00417 	ldw	r7,16(sp)
 200c8e8:	00800084 	movi	r2,2
 200c8ec:	11fea30e 	bge	r2,r7,200c37c <_dtoa_r+0xb28>
 200c8f0:	d8800917 	ldw	r2,36(sp)
 200c8f4:	103f8c1e 	bne	r2,zero,200c728 <_dtoa_r+0xed4>
 200c8f8:	a00b883a 	mov	r5,r20
 200c8fc:	8009883a 	mov	r4,r16
 200c900:	01800144 	movi	r6,5
 200c904:	000f883a 	mov	r7,zero
 200c908:	200e3240 	call	200e324 <__multadd>
 200c90c:	e009883a 	mov	r4,fp
 200c910:	100b883a 	mov	r5,r2
 200c914:	1029883a 	mov	r20,r2
 200c918:	200eaf80 	call	200eaf8 <__mcmp>
 200c91c:	00bf820e 	bge	zero,r2,200c728 <_dtoa_r+0xed4>
 200c920:	00800c44 	movi	r2,49
 200c924:	b8800005 	stb	r2,0(r23)
 200c928:	d8800617 	ldw	r2,24(sp)
 200c92c:	bd800044 	addi	r22,r23,1
 200c930:	10800044 	addi	r2,r2,1
 200c934:	d8800615 	stw	r2,24(sp)
 200c938:	003f7f06 	br	200c738 <_dtoa_r+0xee4>
 200c93c:	dc000417 	ldw	r16,16(sp)
 200c940:	003d6506 	br	200bed8 <_dtoa_r+0x684>
 200c944:	9009883a 	mov	r4,r18
 200c948:	20080600 	call	2008060 <__floatsidf>
 200c94c:	1009883a 	mov	r4,r2
 200c950:	180b883a 	mov	r5,r3
 200c954:	980d883a 	mov	r6,r19
 200c958:	a00f883a 	mov	r7,r20
 200c95c:	2007b6c0 	call	2007b6c <__muldf3>
 200c960:	1009883a 	mov	r4,r2
 200c964:	180b883a 	mov	r5,r3
 200c968:	000d883a 	mov	r6,zero
 200c96c:	01d00734 	movhi	r7,16412
 200c970:	2007ab80 	call	2007ab8 <__adddf3>
 200c974:	057f3034 	movhi	r21,64704
 200c978:	1025883a 	mov	r18,r2
 200c97c:	1d6b883a 	add	r21,r3,r21
 200c980:	9809883a 	mov	r4,r19
 200c984:	a00b883a 	mov	r5,r20
 200c988:	000d883a 	mov	r6,zero
 200c98c:	01d00534 	movhi	r7,16404
 200c990:	2007b0c0 	call	2007b0c <__subdf3>
 200c994:	1009883a 	mov	r4,r2
 200c998:	180b883a 	mov	r5,r3
 200c99c:	900d883a 	mov	r6,r18
 200c9a0:	a80f883a 	mov	r7,r21
 200c9a4:	1027883a 	mov	r19,r2
 200c9a8:	1829883a 	mov	r20,r3
 200c9ac:	2010aa00 	call	2010aa0 <__gtdf2>
 200c9b0:	00806616 	blt	zero,r2,200cb4c <_dtoa_r+0x12f8>
 200c9b4:	a9e0003c 	xorhi	r7,r21,32768
 200c9b8:	9809883a 	mov	r4,r19
 200c9bc:	a00b883a 	mov	r5,r20
 200c9c0:	900d883a 	mov	r6,r18
 200c9c4:	20080040 	call	2008004 <__ltdf2>
 200c9c8:	103d710e 	bge	r2,zero,200bf90 <_dtoa_r+0x73c>
 200c9cc:	0029883a 	mov	r20,zero
 200c9d0:	002b883a 	mov	r21,zero
 200c9d4:	003f5406 	br	200c728 <_dtoa_r+0xed4>
 200c9d8:	d9800a17 	ldw	r6,40(sp)
 200c9dc:	e00b883a 	mov	r5,fp
 200c9e0:	8009883a 	mov	r4,r16
 200c9e4:	200e8700 	call	200e870 <__pow5mult>
 200c9e8:	1039883a 	mov	fp,r2
 200c9ec:	003e2e06 	br	200c2a8 <_dtoa_r+0xa54>
 200c9f0:	d8000c15 	stw	zero,48(sp)
 200c9f4:	003f2006 	br	200c678 <_dtoa_r+0xe24>
 200c9f8:	00800044 	movi	r2,1
 200c9fc:	d8800c15 	stw	r2,48(sp)
 200ca00:	003c5d06 	br	200bb78 <_dtoa_r+0x324>
 200ca04:	d8c00a17 	ldw	r3,40(sp)
 200ca08:	d9000b17 	ldw	r4,44(sp)
 200ca0c:	dcc00a15 	stw	r19,40(sp)
 200ca10:	98c5c83a 	sub	r2,r19,r3
 200ca14:	2089883a 	add	r4,r4,r2
 200ca18:	d9000b15 	stw	r4,44(sp)
 200ca1c:	0027883a 	mov	r19,zero
 200ca20:	003df206 	br	200c1ec <_dtoa_r+0x998>
 200ca24:	d9000317 	ldw	r4,12(sp)
 200ca28:	8829883a 	mov	r20,r17
 200ca2c:	04800084 	movi	r18,2
 200ca30:	d9001015 	stw	r4,64(sp)
 200ca34:	003c8106 	br	200bc3c <_dtoa_r+0x3e8>
 200ca38:	04800044 	movi	r18,1
 200ca3c:	dc800e15 	stw	r18,56(sp)
 200ca40:	dc800915 	stw	r18,36(sp)
 200ca44:	dc802115 	stw	r18,132(sp)
 200ca48:	003f1206 	br	200c694 <_dtoa_r+0xe40>
 200ca4c:	d8800617 	ldw	r2,24(sp)
 200ca50:	00abc83a 	sub	r21,zero,r2
 200ca54:	a800a426 	beq	r21,zero,200cce8 <_dtoa_r+0x1494>
 200ca58:	a88003cc 	andi	r2,r21,15
 200ca5c:	100490fa 	slli	r2,r2,3
 200ca60:	00c080f4 	movhi	r3,515
 200ca64:	18fa3a04 	addi	r3,r3,-5912
 200ca68:	d9000317 	ldw	r4,12(sp)
 200ca6c:	1885883a 	add	r2,r3,r2
 200ca70:	11800017 	ldw	r6,0(r2)
 200ca74:	11c00117 	ldw	r7,4(r2)
 200ca78:	a82bd13a 	srai	r21,r21,4
 200ca7c:	880b883a 	mov	r5,r17
 200ca80:	2007b6c0 	call	2007b6c <__muldf3>
 200ca84:	1027883a 	mov	r19,r2
 200ca88:	1829883a 	mov	r20,r3
 200ca8c:	a800e826 	beq	r21,zero,200ce30 <_dtoa_r+0x15dc>
 200ca90:	058080f4 	movhi	r22,515
 200ca94:	b5ba3004 	addi	r22,r22,-5952
 200ca98:	04800084 	movi	r18,2
 200ca9c:	a980004c 	andi	r6,r21,1
 200caa0:	1009883a 	mov	r4,r2
 200caa4:	a82bd07a 	srai	r21,r21,1
 200caa8:	180b883a 	mov	r5,r3
 200caac:	30000426 	beq	r6,zero,200cac0 <_dtoa_r+0x126c>
 200cab0:	b1800017 	ldw	r6,0(r22)
 200cab4:	b1c00117 	ldw	r7,4(r22)
 200cab8:	94800044 	addi	r18,r18,1
 200cabc:	2007b6c0 	call	2007b6c <__muldf3>
 200cac0:	b5800204 	addi	r22,r22,8
 200cac4:	a83ff51e 	bne	r21,zero,200ca9c <_dtoa_r+0x1248>
 200cac8:	1027883a 	mov	r19,r2
 200cacc:	1829883a 	mov	r20,r3
 200cad0:	003c7306 	br	200bca0 <_dtoa_r+0x44c>
 200cad4:	21000044 	addi	r4,r4,1
 200cad8:	11000005 	stb	r4,0(r2)
 200cadc:	003e5c06 	br	200c450 <_dtoa_r+0xbfc>
 200cae0:	a9400117 	ldw	r5,4(r21)
 200cae4:	8009883a 	mov	r4,r16
 200cae8:	200e2540 	call	200e254 <_Balloc>
 200caec:	a9800417 	ldw	r6,16(r21)
 200caf0:	11000304 	addi	r4,r2,12
 200caf4:	a9400304 	addi	r5,r21,12
 200caf8:	31800084 	addi	r6,r6,2
 200cafc:	318d883a 	add	r6,r6,r6
 200cb00:	318d883a 	add	r6,r6,r6
 200cb04:	1023883a 	mov	r17,r2
 200cb08:	20090800 	call	2009080 <memcpy>
 200cb0c:	8009883a 	mov	r4,r16
 200cb10:	880b883a 	mov	r5,r17
 200cb14:	01800044 	movi	r6,1
 200cb18:	200e99c0 	call	200e99c <__lshift>
 200cb1c:	1027883a 	mov	r19,r2
 200cb20:	003e8f06 	br	200c560 <_dtoa_r+0xd0c>
 200cb24:	b807883a 	mov	r3,r23
 200cb28:	00800e44 	movi	r2,57
 200cb2c:	ddc00717 	ldw	r23,28(sp)
 200cb30:	18809026 	beq	r3,r2,200cd74 <_dtoa_r+0x1520>
 200cb34:	18c00044 	addi	r3,r3,1
 200cb38:	003f2b06 	br	200c7e8 <_dtoa_r+0xf94>
 200cb3c:	b807883a 	mov	r3,r23
 200cb40:	982b883a 	mov	r21,r19
 200cb44:	ddc00717 	ldw	r23,28(sp)
 200cb48:	003e2406 	br	200c3dc <_dtoa_r+0xb88>
 200cb4c:	0029883a 	mov	r20,zero
 200cb50:	002b883a 	mov	r21,zero
 200cb54:	003f7206 	br	200c920 <_dtoa_r+0x10cc>
 200cb58:	593fffc4 	addi	r4,r11,-1
 200cb5c:	200490fa 	slli	r2,r4,3
 200cb60:	00c080f4 	movhi	r3,515
 200cb64:	18fa3a04 	addi	r3,r3,-5912
 200cb68:	d9001015 	stw	r4,64(sp)
 200cb6c:	1885883a 	add	r2,r3,r2
 200cb70:	11000017 	ldw	r4,0(r2)
 200cb74:	11400117 	ldw	r5,4(r2)
 200cb78:	900d883a 	mov	r6,r18
 200cb7c:	a80f883a 	mov	r7,r21
 200cb80:	dac01615 	stw	r11,88(sp)
 200cb84:	2007b6c0 	call	2007b6c <__muldf3>
 200cb88:	a00b883a 	mov	r5,r20
 200cb8c:	9809883a 	mov	r4,r19
 200cb90:	d8c01215 	stw	r3,72(sp)
 200cb94:	d8801115 	stw	r2,68(sp)
 200cb98:	20081340 	call	2008134 <__fixdfsi>
 200cb9c:	1009883a 	mov	r4,r2
 200cba0:	1025883a 	mov	r18,r2
 200cba4:	20080600 	call	2008060 <__floatsidf>
 200cba8:	9809883a 	mov	r4,r19
 200cbac:	a00b883a 	mov	r5,r20
 200cbb0:	100d883a 	mov	r6,r2
 200cbb4:	180f883a 	mov	r7,r3
 200cbb8:	94800c04 	addi	r18,r18,48
 200cbbc:	2007b0c0 	call	2007b0c <__subdf3>
 200cbc0:	bc800005 	stb	r18,0(r23)
 200cbc4:	dac01617 	ldw	r11,88(sp)
 200cbc8:	102b883a 	mov	r21,r2
 200cbcc:	00800044 	movi	r2,1
 200cbd0:	bd800044 	addi	r22,r23,1
 200cbd4:	1815883a 	mov	r10,r3
 200cbd8:	58802226 	beq	r11,r2,200cc64 <_dtoa_r+0x1410>
 200cbdc:	bad7883a 	add	r11,r23,r11
 200cbe0:	dc001415 	stw	r16,80(sp)
 200cbe4:	a805883a 	mov	r2,r21
 200cbe8:	b027883a 	mov	r19,r22
 200cbec:	5821883a 	mov	r16,r11
 200cbf0:	882b883a 	mov	r21,r17
 200cbf4:	000d883a 	mov	r6,zero
 200cbf8:	01d00934 	movhi	r7,16420
 200cbfc:	1009883a 	mov	r4,r2
 200cc00:	180b883a 	mov	r5,r3
 200cc04:	2007b6c0 	call	2007b6c <__muldf3>
 200cc08:	180b883a 	mov	r5,r3
 200cc0c:	1009883a 	mov	r4,r2
 200cc10:	1829883a 	mov	r20,r3
 200cc14:	1023883a 	mov	r17,r2
 200cc18:	20081340 	call	2008134 <__fixdfsi>
 200cc1c:	1009883a 	mov	r4,r2
 200cc20:	1025883a 	mov	r18,r2
 200cc24:	20080600 	call	2008060 <__floatsidf>
 200cc28:	8809883a 	mov	r4,r17
 200cc2c:	a00b883a 	mov	r5,r20
 200cc30:	100d883a 	mov	r6,r2
 200cc34:	180f883a 	mov	r7,r3
 200cc38:	94800c04 	addi	r18,r18,48
 200cc3c:	2007b0c0 	call	2007b0c <__subdf3>
 200cc40:	9cc00044 	addi	r19,r19,1
 200cc44:	9cbfffc5 	stb	r18,-1(r19)
 200cc48:	9c3fea1e 	bne	r19,r16,200cbf4 <_dtoa_r+0x13a0>
 200cc4c:	1815883a 	mov	r10,r3
 200cc50:	d8c01017 	ldw	r3,64(sp)
 200cc54:	dc001417 	ldw	r16,80(sp)
 200cc58:	a823883a 	mov	r17,r21
 200cc5c:	b0ed883a 	add	r22,r22,r3
 200cc60:	102b883a 	mov	r21,r2
 200cc64:	d9001117 	ldw	r4,68(sp)
 200cc68:	d9401217 	ldw	r5,72(sp)
 200cc6c:	000d883a 	mov	r6,zero
 200cc70:	01cff834 	movhi	r7,16352
 200cc74:	da801515 	stw	r10,84(sp)
 200cc78:	2007ab80 	call	2007ab8 <__adddf3>
 200cc7c:	da801517 	ldw	r10,84(sp)
 200cc80:	1009883a 	mov	r4,r2
 200cc84:	180b883a 	mov	r5,r3
 200cc88:	500f883a 	mov	r7,r10
 200cc8c:	a80d883a 	mov	r6,r21
 200cc90:	20080040 	call	2008004 <__ltdf2>
 200cc94:	da801517 	ldw	r10,84(sp)
 200cc98:	10003b0e 	bge	r2,zero,200cd88 <_dtoa_r+0x1534>
 200cc9c:	d9c01317 	ldw	r7,76(sp)
 200cca0:	b53fffc3 	ldbu	r20,-1(r22)
 200cca4:	d9c00615 	stw	r7,24(sp)
 200cca8:	003d3106 	br	200c170 <_dtoa_r+0x91c>
 200ccac:	d8800817 	ldw	r2,32(sp)
 200ccb0:	11e5c83a 	sub	r18,r2,r7
 200ccb4:	0005883a 	mov	r2,zero
 200ccb8:	003d5006 	br	200c1fc <_dtoa_r+0x9a8>
 200ccbc:	05800044 	movi	r22,1
 200ccc0:	003dc406 	br	200c3d4 <_dtoa_r+0xb80>
 200ccc4:	a5000044 	addi	r20,r20,1
 200ccc8:	15000005 	stb	r20,0(r2)
 200cccc:	003c8206 	br	200bed8 <_dtoa_r+0x684>
 200ccd0:	d8800217 	ldw	r2,8(sp)
 200ccd4:	00c00d84 	movi	r3,54
 200ccd8:	dcc00a17 	ldw	r19,40(sp)
 200ccdc:	1885c83a 	sub	r2,r3,r2
 200cce0:	dc800817 	ldw	r18,32(sp)
 200cce4:	003d4506 	br	200c1fc <_dtoa_r+0x9a8>
 200cce8:	dcc00317 	ldw	r19,12(sp)
 200ccec:	8829883a 	mov	r20,r17
 200ccf0:	04800084 	movi	r18,2
 200ccf4:	003bea06 	br	200bca0 <_dtoa_r+0x44c>
 200ccf8:	d9000917 	ldw	r4,36(sp)
 200ccfc:	203f1126 	beq	r4,zero,200c944 <_dtoa_r+0x10f0>
 200cd00:	d9c00e17 	ldw	r7,56(sp)
 200cd04:	01fca20e 	bge	zero,r7,200bf90 <_dtoa_r+0x73c>
 200cd08:	a00b883a 	mov	r5,r20
 200cd0c:	9809883a 	mov	r4,r19
 200cd10:	000d883a 	mov	r6,zero
 200cd14:	01d00934 	movhi	r7,16420
 200cd18:	2007b6c0 	call	2007b6c <__muldf3>
 200cd1c:	91000044 	addi	r4,r18,1
 200cd20:	1027883a 	mov	r19,r2
 200cd24:	1829883a 	mov	r20,r3
 200cd28:	20080600 	call	2008060 <__floatsidf>
 200cd2c:	9809883a 	mov	r4,r19
 200cd30:	a00b883a 	mov	r5,r20
 200cd34:	100d883a 	mov	r6,r2
 200cd38:	180f883a 	mov	r7,r3
 200cd3c:	2007b6c0 	call	2007b6c <__muldf3>
 200cd40:	1009883a 	mov	r4,r2
 200cd44:	180b883a 	mov	r5,r3
 200cd48:	000d883a 	mov	r6,zero
 200cd4c:	01d00734 	movhi	r7,16412
 200cd50:	2007ab80 	call	2007ab8 <__adddf3>
 200cd54:	1025883a 	mov	r18,r2
 200cd58:	d8800617 	ldw	r2,24(sp)
 200cd5c:	057f3034 	movhi	r21,64704
 200cd60:	1d6b883a 	add	r21,r3,r21
 200cd64:	10bfffc4 	addi	r2,r2,-1
 200cd68:	d8801315 	stw	r2,76(sp)
 200cd6c:	dac00e17 	ldw	r11,56(sp)
 200cd70:	003be706 	br	200bd10 <_dtoa_r+0x4bc>
 200cd74:	01000e44 	movi	r4,57
 200cd78:	91000005 	stb	r4,0(r18)
 200cd7c:	95800044 	addi	r22,r18,1
 200cd80:	982b883a 	mov	r21,r19
 200cd84:	003da106 	br	200c40c <_dtoa_r+0xbb8>
 200cd88:	d9801117 	ldw	r6,68(sp)
 200cd8c:	d9c01217 	ldw	r7,72(sp)
 200cd90:	0009883a 	mov	r4,zero
 200cd94:	014ff834 	movhi	r5,16352
 200cd98:	da801515 	stw	r10,84(sp)
 200cd9c:	2007b0c0 	call	2007b0c <__subdf3>
 200cda0:	da801517 	ldw	r10,84(sp)
 200cda4:	1009883a 	mov	r4,r2
 200cda8:	180b883a 	mov	r5,r3
 200cdac:	a80d883a 	mov	r6,r21
 200cdb0:	500f883a 	mov	r7,r10
 200cdb4:	2010aa00 	call	2010aa0 <__gtdf2>
 200cdb8:	00bc750e 	bge	zero,r2,200bf90 <_dtoa_r+0x73c>
 200cdbc:	01000c04 	movi	r4,48
 200cdc0:	00000106 	br	200cdc8 <_dtoa_r+0x1574>
 200cdc4:	102d883a 	mov	r22,r2
 200cdc8:	b0bfffc4 	addi	r2,r22,-1
 200cdcc:	10c00007 	ldb	r3,0(r2)
 200cdd0:	193ffc26 	beq	r3,r4,200cdc4 <_dtoa_r+0x1570>
 200cdd4:	d8801317 	ldw	r2,76(sp)
 200cdd8:	d8800615 	stw	r2,24(sp)
 200cddc:	003c3e06 	br	200bed8 <_dtoa_r+0x684>
 200cde0:	d9001317 	ldw	r4,76(sp)
 200cde4:	df001117 	ldw	fp,68(sp)
 200cde8:	d9000615 	stw	r4,24(sp)
 200cdec:	003ce006 	br	200c170 <_dtoa_r+0x91c>
 200cdf0:	df001117 	ldw	fp,68(sp)
 200cdf4:	dc401217 	ldw	r17,72(sp)
 200cdf8:	003c6506 	br	200bf90 <_dtoa_r+0x73c>
 200cdfc:	103e7a1e 	bne	r2,zero,200c7e8 <_dtoa_r+0xf94>
 200ce00:	1880004c 	andi	r2,r3,1
 200ce04:	103e7826 	beq	r2,zero,200c7e8 <_dtoa_r+0xf94>
 200ce08:	003e7406 	br	200c7dc <_dtoa_r+0xf88>
 200ce0c:	8009883a 	mov	r4,r16
 200ce10:	a80b883a 	mov	r5,r21
 200ce14:	01800284 	movi	r6,10
 200ce18:	000f883a 	mov	r7,zero
 200ce1c:	200e3240 	call	200e324 <__multadd>
 200ce20:	d9000e17 	ldw	r4,56(sp)
 200ce24:	102b883a 	mov	r21,r2
 200ce28:	d9000915 	stw	r4,36(sp)
 200ce2c:	003d5106 	br	200c374 <_dtoa_r+0xb20>
 200ce30:	04800084 	movi	r18,2
 200ce34:	003b9a06 	br	200bca0 <_dtoa_r+0x44c>
 200ce38:	d8c01317 	ldw	r3,76(sp)
 200ce3c:	d8c00615 	stw	r3,24(sp)
 200ce40:	003ccb06 	br	200c170 <_dtoa_r+0x91c>
 200ce44:	d8c01317 	ldw	r3,76(sp)
 200ce48:	d8c00615 	stw	r3,24(sp)
 200ce4c:	003c2206 	br	200bed8 <_dtoa_r+0x684>
 200ce50:	20fd3826 	beq	r4,r3,200c334 <_dtoa_r+0xae0>
 200ce54:	00c00f04 	movi	r3,60
 200ce58:	1885c83a 	sub	r2,r3,r2
 200ce5c:	003da906 	br	200c504 <_dtoa_r+0xcb0>
 200ce60:	000b883a 	mov	r5,zero
 200ce64:	003b5406 	br	200bbb8 <_dtoa_r+0x364>
 200ce68:	04c00044 	movi	r19,1
 200ce6c:	003b3b06 	br	200bb5c <_dtoa_r+0x308>

0200ce70 <_fflush_r>:
 200ce70:	defffb04 	addi	sp,sp,-20
 200ce74:	dcc00315 	stw	r19,12(sp)
 200ce78:	dc400115 	stw	r17,4(sp)
 200ce7c:	dfc00415 	stw	ra,16(sp)
 200ce80:	dc800215 	stw	r18,8(sp)
 200ce84:	dc000015 	stw	r16,0(sp)
 200ce88:	2027883a 	mov	r19,r4
 200ce8c:	2823883a 	mov	r17,r5
 200ce90:	20000226 	beq	r4,zero,200ce9c <_fflush_r+0x2c>
 200ce94:	20800e17 	ldw	r2,56(r4)
 200ce98:	10005726 	beq	r2,zero,200cff8 <_fflush_r+0x188>
 200ce9c:	8880030b 	ldhu	r2,12(r17)
 200cea0:	10c0020c 	andi	r3,r2,8
 200cea4:	18ffffcc 	andi	r3,r3,65535
 200cea8:	18e0001c 	xori	r3,r3,32768
 200ceac:	18e00004 	addi	r3,r3,-32768
 200ceb0:	1800311e 	bne	r3,zero,200cf78 <_fflush_r+0x108>
 200ceb4:	89000117 	ldw	r4,4(r17)
 200ceb8:	10c20014 	ori	r3,r2,2048
 200cebc:	88c0030d 	sth	r3,12(r17)
 200cec0:	180b883a 	mov	r5,r3
 200cec4:	0100520e 	bge	zero,r4,200d010 <_fflush_r+0x1a0>
 200cec8:	88c00a17 	ldw	r3,40(r17)
 200cecc:	18002226 	beq	r3,zero,200cf58 <_fflush_r+0xe8>
 200ced0:	1084000c 	andi	r2,r2,4096
 200ced4:	10bfffcc 	andi	r2,r2,65535
 200ced8:	10a0001c 	xori	r2,r2,32768
 200cedc:	10a00004 	addi	r2,r2,-32768
 200cee0:	10004e26 	beq	r2,zero,200d01c <_fflush_r+0x1ac>
 200cee4:	8c001417 	ldw	r16,80(r17)
 200cee8:	2940010c 	andi	r5,r5,4
 200ceec:	297fffcc 	andi	r5,r5,65535
 200cef0:	2960001c 	xori	r5,r5,32768
 200cef4:	29600004 	addi	r5,r5,-32768
 200cef8:	28000626 	beq	r5,zero,200cf14 <_fflush_r+0xa4>
 200cefc:	89000117 	ldw	r4,4(r17)
 200cf00:	88800c17 	ldw	r2,48(r17)
 200cf04:	8121c83a 	sub	r16,r16,r4
 200cf08:	10000226 	beq	r2,zero,200cf14 <_fflush_r+0xa4>
 200cf0c:	88800f17 	ldw	r2,60(r17)
 200cf10:	80a1c83a 	sub	r16,r16,r2
 200cf14:	89400717 	ldw	r5,28(r17)
 200cf18:	9809883a 	mov	r4,r19
 200cf1c:	800d883a 	mov	r6,r16
 200cf20:	000f883a 	mov	r7,zero
 200cf24:	183ee83a 	callr	r3
 200cf28:	8080281e 	bne	r16,r2,200cfcc <_fflush_r+0x15c>
 200cf2c:	8880030b 	ldhu	r2,12(r17)
 200cf30:	88c00417 	ldw	r3,16(r17)
 200cf34:	88000115 	stw	zero,4(r17)
 200cf38:	113dffcc 	andi	r4,r2,63487
 200cf3c:	1084000c 	andi	r2,r2,4096
 200cf40:	10bfffcc 	andi	r2,r2,65535
 200cf44:	10a0001c 	xori	r2,r2,32768
 200cf48:	8900030d 	sth	r4,12(r17)
 200cf4c:	88c00015 	stw	r3,0(r17)
 200cf50:	10a00004 	addi	r2,r2,-32768
 200cf54:	10002c1e 	bne	r2,zero,200d008 <_fflush_r+0x198>
 200cf58:	0005883a 	mov	r2,zero
 200cf5c:	dfc00417 	ldw	ra,16(sp)
 200cf60:	dcc00317 	ldw	r19,12(sp)
 200cf64:	dc800217 	ldw	r18,8(sp)
 200cf68:	dc400117 	ldw	r17,4(sp)
 200cf6c:	dc000017 	ldw	r16,0(sp)
 200cf70:	dec00504 	addi	sp,sp,20
 200cf74:	f800283a 	ret
 200cf78:	8c800417 	ldw	r18,16(r17)
 200cf7c:	903ff626 	beq	r18,zero,200cf58 <_fflush_r+0xe8>
 200cf80:	8c000017 	ldw	r16,0(r17)
 200cf84:	108000cc 	andi	r2,r2,3
 200cf88:	8c800015 	stw	r18,0(r17)
 200cf8c:	84a1c83a 	sub	r16,r16,r18
 200cf90:	10001b1e 	bne	r2,zero,200d000 <_fflush_r+0x190>
 200cf94:	88800517 	ldw	r2,20(r17)
 200cf98:	88800215 	stw	r2,8(r17)
 200cf9c:	04000316 	blt	zero,r16,200cfac <_fflush_r+0x13c>
 200cfa0:	003fed06 	br	200cf58 <_fflush_r+0xe8>
 200cfa4:	90a5883a 	add	r18,r18,r2
 200cfa8:	043feb0e 	bge	zero,r16,200cf58 <_fflush_r+0xe8>
 200cfac:	88800917 	ldw	r2,36(r17)
 200cfb0:	89400717 	ldw	r5,28(r17)
 200cfb4:	800f883a 	mov	r7,r16
 200cfb8:	900d883a 	mov	r6,r18
 200cfbc:	9809883a 	mov	r4,r19
 200cfc0:	103ee83a 	callr	r2
 200cfc4:	80a1c83a 	sub	r16,r16,r2
 200cfc8:	00bff616 	blt	zero,r2,200cfa4 <_fflush_r+0x134>
 200cfcc:	88c0030b 	ldhu	r3,12(r17)
 200cfd0:	00bfffc4 	movi	r2,-1
 200cfd4:	18c01014 	ori	r3,r3,64
 200cfd8:	88c0030d 	sth	r3,12(r17)
 200cfdc:	dfc00417 	ldw	ra,16(sp)
 200cfe0:	dcc00317 	ldw	r19,12(sp)
 200cfe4:	dc800217 	ldw	r18,8(sp)
 200cfe8:	dc400117 	ldw	r17,4(sp)
 200cfec:	dc000017 	ldw	r16,0(sp)
 200cff0:	dec00504 	addi	sp,sp,20
 200cff4:	f800283a 	ret
 200cff8:	200d1180 	call	200d118 <__sinit>
 200cffc:	003fa706 	br	200ce9c <_fflush_r+0x2c>
 200d000:	0005883a 	mov	r2,zero
 200d004:	003fe406 	br	200cf98 <_fflush_r+0x128>
 200d008:	8c001415 	stw	r16,80(r17)
 200d00c:	003fd206 	br	200cf58 <_fflush_r+0xe8>
 200d010:	88c00f17 	ldw	r3,60(r17)
 200d014:	00ffac16 	blt	zero,r3,200cec8 <_fflush_r+0x58>
 200d018:	003fcf06 	br	200cf58 <_fflush_r+0xe8>
 200d01c:	89400717 	ldw	r5,28(r17)
 200d020:	9809883a 	mov	r4,r19
 200d024:	000d883a 	mov	r6,zero
 200d028:	01c00044 	movi	r7,1
 200d02c:	183ee83a 	callr	r3
 200d030:	1021883a 	mov	r16,r2
 200d034:	00bfffc4 	movi	r2,-1
 200d038:	80800326 	beq	r16,r2,200d048 <_fflush_r+0x1d8>
 200d03c:	8940030b 	ldhu	r5,12(r17)
 200d040:	88c00a17 	ldw	r3,40(r17)
 200d044:	003fa806 	br	200cee8 <_fflush_r+0x78>
 200d048:	98c00017 	ldw	r3,0(r19)
 200d04c:	00800744 	movi	r2,29
 200d050:	18bfde1e 	bne	r3,r2,200cfcc <_fflush_r+0x15c>
 200d054:	003fc006 	br	200cf58 <_fflush_r+0xe8>

0200d058 <fflush>:
 200d058:	200b883a 	mov	r5,r4
 200d05c:	20000426 	beq	r4,zero,200d070 <fflush+0x18>
 200d060:	008080f4 	movhi	r2,515
 200d064:	10882a04 	addi	r2,r2,8360
 200d068:	11000017 	ldw	r4,0(r2)
 200d06c:	200ce701 	jmpi	200ce70 <_fflush_r>
 200d070:	008080f4 	movhi	r2,515
 200d074:	10882904 	addi	r2,r2,8356
 200d078:	11000017 	ldw	r4,0(r2)
 200d07c:	01408074 	movhi	r5,513
 200d080:	29739c04 	addi	r5,r5,-12688
 200d084:	200dcf81 	jmpi	200dcf8 <_fwalk_reent>

0200d088 <__fp_lock>:
 200d088:	0005883a 	mov	r2,zero
 200d08c:	f800283a 	ret

0200d090 <__fp_unlock>:
 200d090:	0005883a 	mov	r2,zero
 200d094:	f800283a 	ret

0200d098 <_cleanup_r>:
 200d098:	01408074 	movhi	r5,513
 200d09c:	297f3704 	addi	r5,r5,-804
 200d0a0:	200dc501 	jmpi	200dc50 <_fwalk>

0200d0a4 <__sfmoreglue>:
 200d0a4:	defffc04 	addi	sp,sp,-16
 200d0a8:	dc400115 	stw	r17,4(sp)
 200d0ac:	2c401724 	muli	r17,r5,92
 200d0b0:	dc800215 	stw	r18,8(sp)
 200d0b4:	2825883a 	mov	r18,r5
 200d0b8:	89400304 	addi	r5,r17,12
 200d0bc:	dc000015 	stw	r16,0(sp)
 200d0c0:	dfc00315 	stw	ra,12(sp)
 200d0c4:	20088fc0 	call	20088fc <_malloc_r>
 200d0c8:	1021883a 	mov	r16,r2
 200d0cc:	10000726 	beq	r2,zero,200d0ec <__sfmoreglue+0x48>
 200d0d0:	11000304 	addi	r4,r2,12
 200d0d4:	10000015 	stw	zero,0(r2)
 200d0d8:	14800115 	stw	r18,4(r2)
 200d0dc:	11000215 	stw	r4,8(r2)
 200d0e0:	000b883a 	mov	r5,zero
 200d0e4:	880d883a 	mov	r6,r17
 200d0e8:	20091780 	call	2009178 <memset>
 200d0ec:	8005883a 	mov	r2,r16
 200d0f0:	dfc00317 	ldw	ra,12(sp)
 200d0f4:	dc800217 	ldw	r18,8(sp)
 200d0f8:	dc400117 	ldw	r17,4(sp)
 200d0fc:	dc000017 	ldw	r16,0(sp)
 200d100:	dec00404 	addi	sp,sp,16
 200d104:	f800283a 	ret

0200d108 <_cleanup>:
 200d108:	008080f4 	movhi	r2,515
 200d10c:	10882904 	addi	r2,r2,8356
 200d110:	11000017 	ldw	r4,0(r2)
 200d114:	200d0981 	jmpi	200d098 <_cleanup_r>

0200d118 <__sinit>:
 200d118:	20800e17 	ldw	r2,56(r4)
 200d11c:	1000401e 	bne	r2,zero,200d220 <__sinit+0x108>
 200d120:	21400117 	ldw	r5,4(r4)
 200d124:	01808074 	movhi	r6,513
 200d128:	31b42604 	addi	r6,r6,-12136
 200d12c:	20c00217 	ldw	r3,8(r4)
 200d130:	21800f15 	stw	r6,60(r4)
 200d134:	2080bb04 	addi	r2,r4,748
 200d138:	02400044 	movi	r9,1
 200d13c:	018000c4 	movi	r6,3
 200d140:	2180b915 	stw	r6,740(r4)
 200d144:	2080ba15 	stw	r2,744(r4)
 200d148:	22400e15 	stw	r9,56(r4)
 200d14c:	20800317 	ldw	r2,12(r4)
 200d150:	2000b815 	stw	zero,736(r4)
 200d154:	02008074 	movhi	r8,513
 200d158:	423e0c04 	addi	r8,r8,-2000
 200d15c:	01c08074 	movhi	r7,513
 200d160:	39fe2104 	addi	r7,r7,-1916
 200d164:	01808074 	movhi	r6,513
 200d168:	31be4304 	addi	r6,r6,-1780
 200d16c:	01008074 	movhi	r4,513
 200d170:	213e5a04 	addi	r4,r4,-1688
 200d174:	02800104 	movi	r10,4
 200d178:	28000015 	stw	zero,0(r5)
 200d17c:	28000115 	stw	zero,4(r5)
 200d180:	28000215 	stw	zero,8(r5)
 200d184:	2a80030d 	sth	r10,12(r5)
 200d188:	2800038d 	sth	zero,14(r5)
 200d18c:	28000415 	stw	zero,16(r5)
 200d190:	28000515 	stw	zero,20(r5)
 200d194:	28000615 	stw	zero,24(r5)
 200d198:	29400715 	stw	r5,28(r5)
 200d19c:	2a000815 	stw	r8,32(r5)
 200d1a0:	29c00915 	stw	r7,36(r5)
 200d1a4:	29800a15 	stw	r6,40(r5)
 200d1a8:	29000b15 	stw	r4,44(r5)
 200d1ac:	01400284 	movi	r5,10
 200d1b0:	18000015 	stw	zero,0(r3)
 200d1b4:	18000115 	stw	zero,4(r3)
 200d1b8:	18000215 	stw	zero,8(r3)
 200d1bc:	1940030d 	sth	r5,12(r3)
 200d1c0:	1a40038d 	sth	r9,14(r3)
 200d1c4:	18000415 	stw	zero,16(r3)
 200d1c8:	18000515 	stw	zero,20(r3)
 200d1cc:	18000615 	stw	zero,24(r3)
 200d1d0:	18c00715 	stw	r3,28(r3)
 200d1d4:	1a000815 	stw	r8,32(r3)
 200d1d8:	19c00915 	stw	r7,36(r3)
 200d1dc:	19800a15 	stw	r6,40(r3)
 200d1e0:	19000b15 	stw	r4,44(r3)
 200d1e4:	00c00484 	movi	r3,18
 200d1e8:	10c0030d 	sth	r3,12(r2)
 200d1ec:	00c00084 	movi	r3,2
 200d1f0:	10000015 	stw	zero,0(r2)
 200d1f4:	10000115 	stw	zero,4(r2)
 200d1f8:	10000215 	stw	zero,8(r2)
 200d1fc:	10c0038d 	sth	r3,14(r2)
 200d200:	10000415 	stw	zero,16(r2)
 200d204:	10000515 	stw	zero,20(r2)
 200d208:	10000615 	stw	zero,24(r2)
 200d20c:	10800715 	stw	r2,28(r2)
 200d210:	12000815 	stw	r8,32(r2)
 200d214:	11c00915 	stw	r7,36(r2)
 200d218:	11800a15 	stw	r6,40(r2)
 200d21c:	11000b15 	stw	r4,44(r2)
 200d220:	f800283a 	ret

0200d224 <__sfp>:
 200d224:	defffc04 	addi	sp,sp,-16
 200d228:	008080f4 	movhi	r2,515
 200d22c:	10882904 	addi	r2,r2,8356
 200d230:	dc400115 	stw	r17,4(sp)
 200d234:	14400017 	ldw	r17,0(r2)
 200d238:	dc800215 	stw	r18,8(sp)
 200d23c:	dfc00315 	stw	ra,12(sp)
 200d240:	88800e17 	ldw	r2,56(r17)
 200d244:	dc000015 	stw	r16,0(sp)
 200d248:	2025883a 	mov	r18,r4
 200d24c:	10002826 	beq	r2,zero,200d2f0 <__sfp+0xcc>
 200d250:	8c40b804 	addi	r17,r17,736
 200d254:	043fffc4 	movi	r16,-1
 200d258:	89400117 	ldw	r5,4(r17)
 200d25c:	88800217 	ldw	r2,8(r17)
 200d260:	297fffc4 	addi	r5,r5,-1
 200d264:	28000a16 	blt	r5,zero,200d290 <__sfp+0x6c>
 200d268:	10c0030f 	ldh	r3,12(r2)
 200d26c:	18000c26 	beq	r3,zero,200d2a0 <__sfp+0x7c>
 200d270:	10c01a04 	addi	r3,r2,104
 200d274:	00000206 	br	200d280 <__sfp+0x5c>
 200d278:	19bfe90f 	ldh	r6,-92(r3)
 200d27c:	30000826 	beq	r6,zero,200d2a0 <__sfp+0x7c>
 200d280:	297fffc4 	addi	r5,r5,-1
 200d284:	18bffd04 	addi	r2,r3,-12
 200d288:	18c01704 	addi	r3,r3,92
 200d28c:	2c3ffa1e 	bne	r5,r16,200d278 <__sfp+0x54>
 200d290:	88800017 	ldw	r2,0(r17)
 200d294:	10001926 	beq	r2,zero,200d2fc <__sfp+0xd8>
 200d298:	1023883a 	mov	r17,r2
 200d29c:	003fee06 	br	200d258 <__sfp+0x34>
 200d2a0:	00ffffc4 	movi	r3,-1
 200d2a4:	10c0038d 	sth	r3,14(r2)
 200d2a8:	00c00044 	movi	r3,1
 200d2ac:	10c0030d 	sth	r3,12(r2)
 200d2b0:	10000015 	stw	zero,0(r2)
 200d2b4:	10000215 	stw	zero,8(r2)
 200d2b8:	10000115 	stw	zero,4(r2)
 200d2bc:	10000415 	stw	zero,16(r2)
 200d2c0:	10000515 	stw	zero,20(r2)
 200d2c4:	10000615 	stw	zero,24(r2)
 200d2c8:	10000c15 	stw	zero,48(r2)
 200d2cc:	10000d15 	stw	zero,52(r2)
 200d2d0:	10001115 	stw	zero,68(r2)
 200d2d4:	10001215 	stw	zero,72(r2)
 200d2d8:	dfc00317 	ldw	ra,12(sp)
 200d2dc:	dc800217 	ldw	r18,8(sp)
 200d2e0:	dc400117 	ldw	r17,4(sp)
 200d2e4:	dc000017 	ldw	r16,0(sp)
 200d2e8:	dec00404 	addi	sp,sp,16
 200d2ec:	f800283a 	ret
 200d2f0:	8809883a 	mov	r4,r17
 200d2f4:	200d1180 	call	200d118 <__sinit>
 200d2f8:	003fd506 	br	200d250 <__sfp+0x2c>
 200d2fc:	9009883a 	mov	r4,r18
 200d300:	01400104 	movi	r5,4
 200d304:	200d0a40 	call	200d0a4 <__sfmoreglue>
 200d308:	88800015 	stw	r2,0(r17)
 200d30c:	103fe21e 	bne	r2,zero,200d298 <__sfp+0x74>
 200d310:	00800304 	movi	r2,12
 200d314:	90800015 	stw	r2,0(r18)
 200d318:	0005883a 	mov	r2,zero
 200d31c:	003fee06 	br	200d2d8 <__sfp+0xb4>

0200d320 <__sfp_lock_acquire>:
 200d320:	f800283a 	ret

0200d324 <__sfp_lock_release>:
 200d324:	f800283a 	ret

0200d328 <__sinit_lock_acquire>:
 200d328:	f800283a 	ret

0200d32c <__sinit_lock_release>:
 200d32c:	f800283a 	ret

0200d330 <__fp_lock_all>:
 200d330:	008080f4 	movhi	r2,515
 200d334:	10882a04 	addi	r2,r2,8360
 200d338:	11000017 	ldw	r4,0(r2)
 200d33c:	01408074 	movhi	r5,513
 200d340:	29742204 	addi	r5,r5,-12152
 200d344:	200dc501 	jmpi	200dc50 <_fwalk>

0200d348 <__fp_unlock_all>:
 200d348:	008080f4 	movhi	r2,515
 200d34c:	10882a04 	addi	r2,r2,8360
 200d350:	11000017 	ldw	r4,0(r2)
 200d354:	01408074 	movhi	r5,513
 200d358:	29742404 	addi	r5,r5,-12144
 200d35c:	200dc501 	jmpi	200dc50 <_fwalk>

0200d360 <_malloc_trim_r>:
 200d360:	defffb04 	addi	sp,sp,-20
 200d364:	dcc00315 	stw	r19,12(sp)
 200d368:	dc800215 	stw	r18,8(sp)
 200d36c:	dc400115 	stw	r17,4(sp)
 200d370:	dc000015 	stw	r16,0(sp)
 200d374:	2827883a 	mov	r19,r5
 200d378:	dfc00415 	stw	ra,16(sp)
 200d37c:	044080f4 	movhi	r17,515
 200d380:	8c426d04 	addi	r17,r17,2484
 200d384:	2021883a 	mov	r16,r4
 200d388:	20115540 	call	2011554 <__malloc_lock>
 200d38c:	88800217 	ldw	r2,8(r17)
 200d390:	14800117 	ldw	r18,4(r2)
 200d394:	00bfff04 	movi	r2,-4
 200d398:	90a4703a 	and	r18,r18,r2
 200d39c:	9083fbc4 	addi	r2,r18,4079
 200d3a0:	14e7c83a 	sub	r19,r2,r19
 200d3a4:	9826d33a 	srli	r19,r19,12
 200d3a8:	0083ffc4 	movi	r2,4095
 200d3ac:	9cffffc4 	addi	r19,r19,-1
 200d3b0:	9826933a 	slli	r19,r19,12
 200d3b4:	14c0060e 	bge	r2,r19,200d3d0 <_malloc_trim_r+0x70>
 200d3b8:	8009883a 	mov	r4,r16
 200d3bc:	000b883a 	mov	r5,zero
 200d3c0:	20093540 	call	2009354 <_sbrk_r>
 200d3c4:	88c00217 	ldw	r3,8(r17)
 200d3c8:	1c87883a 	add	r3,r3,r18
 200d3cc:	10c00a26 	beq	r2,r3,200d3f8 <_malloc_trim_r+0x98>
 200d3d0:	8009883a 	mov	r4,r16
 200d3d4:	20115740 	call	2011574 <__malloc_unlock>
 200d3d8:	0005883a 	mov	r2,zero
 200d3dc:	dfc00417 	ldw	ra,16(sp)
 200d3e0:	dcc00317 	ldw	r19,12(sp)
 200d3e4:	dc800217 	ldw	r18,8(sp)
 200d3e8:	dc400117 	ldw	r17,4(sp)
 200d3ec:	dc000017 	ldw	r16,0(sp)
 200d3f0:	dec00504 	addi	sp,sp,20
 200d3f4:	f800283a 	ret
 200d3f8:	8009883a 	mov	r4,r16
 200d3fc:	04cbc83a 	sub	r5,zero,r19
 200d400:	20093540 	call	2009354 <_sbrk_r>
 200d404:	00ffffc4 	movi	r3,-1
 200d408:	10c01326 	beq	r2,r3,200d458 <_malloc_trim_r+0xf8>
 200d40c:	008080f4 	movhi	r2,515
 200d410:	10884804 	addi	r2,r2,8480
 200d414:	11000017 	ldw	r4,0(r2)
 200d418:	88c00217 	ldw	r3,8(r17)
 200d41c:	94e5c83a 	sub	r18,r18,r19
 200d420:	94800054 	ori	r18,r18,1
 200d424:	24e7c83a 	sub	r19,r4,r19
 200d428:	1c800115 	stw	r18,4(r3)
 200d42c:	8009883a 	mov	r4,r16
 200d430:	14c00015 	stw	r19,0(r2)
 200d434:	20115740 	call	2011574 <__malloc_unlock>
 200d438:	00800044 	movi	r2,1
 200d43c:	dfc00417 	ldw	ra,16(sp)
 200d440:	dcc00317 	ldw	r19,12(sp)
 200d444:	dc800217 	ldw	r18,8(sp)
 200d448:	dc400117 	ldw	r17,4(sp)
 200d44c:	dc000017 	ldw	r16,0(sp)
 200d450:	dec00504 	addi	sp,sp,20
 200d454:	f800283a 	ret
 200d458:	8009883a 	mov	r4,r16
 200d45c:	000b883a 	mov	r5,zero
 200d460:	20093540 	call	2009354 <_sbrk_r>
 200d464:	88c00217 	ldw	r3,8(r17)
 200d468:	014003c4 	movi	r5,15
 200d46c:	10c9c83a 	sub	r4,r2,r3
 200d470:	293fd70e 	bge	r5,r4,200d3d0 <_malloc_trim_r+0x70>
 200d474:	014080f4 	movhi	r5,515
 200d478:	29482b04 	addi	r5,r5,8364
 200d47c:	29400017 	ldw	r5,0(r5)
 200d480:	21000054 	ori	r4,r4,1
 200d484:	19000115 	stw	r4,4(r3)
 200d488:	1145c83a 	sub	r2,r2,r5
 200d48c:	014080f4 	movhi	r5,515
 200d490:	29484804 	addi	r5,r5,8480
 200d494:	28800015 	stw	r2,0(r5)
 200d498:	003fcd06 	br	200d3d0 <_malloc_trim_r+0x70>

0200d49c <_free_r>:
 200d49c:	defffd04 	addi	sp,sp,-12
 200d4a0:	dc400115 	stw	r17,4(sp)
 200d4a4:	dc000015 	stw	r16,0(sp)
 200d4a8:	dfc00215 	stw	ra,8(sp)
 200d4ac:	2821883a 	mov	r16,r5
 200d4b0:	2023883a 	mov	r17,r4
 200d4b4:	28004b26 	beq	r5,zero,200d5e4 <_free_r+0x148>
 200d4b8:	20115540 	call	2011554 <__malloc_lock>
 200d4bc:	823fff17 	ldw	r8,-4(r16)
 200d4c0:	00bfff84 	movi	r2,-2
 200d4c4:	81bffe04 	addi	r6,r16,-8
 200d4c8:	4084703a 	and	r2,r8,r2
 200d4cc:	3087883a 	add	r3,r6,r2
 200d4d0:	014080f4 	movhi	r5,515
 200d4d4:	29426d04 	addi	r5,r5,2484
 200d4d8:	1a400117 	ldw	r9,4(r3)
 200d4dc:	29000217 	ldw	r4,8(r5)
 200d4e0:	01ffff04 	movi	r7,-4
 200d4e4:	49ce703a 	and	r7,r9,r7
 200d4e8:	20c06526 	beq	r4,r3,200d680 <_free_r+0x1e4>
 200d4ec:	19c00115 	stw	r7,4(r3)
 200d4f0:	4200004c 	andi	r8,r8,1
 200d4f4:	40003026 	beq	r8,zero,200d5b8 <_free_r+0x11c>
 200d4f8:	0009883a 	mov	r4,zero
 200d4fc:	19d1883a 	add	r8,r3,r7
 200d500:	42000117 	ldw	r8,4(r8)
 200d504:	4200004c 	andi	r8,r8,1
 200d508:	4000061e 	bne	r8,zero,200d524 <_free_r+0x88>
 200d50c:	11c5883a 	add	r2,r2,r7
 200d510:	19c00217 	ldw	r7,8(r3)
 200d514:	20004e26 	beq	r4,zero,200d650 <_free_r+0x1b4>
 200d518:	18c00317 	ldw	r3,12(r3)
 200d51c:	38c00315 	stw	r3,12(r7)
 200d520:	19c00215 	stw	r7,8(r3)
 200d524:	11c00054 	ori	r7,r2,1
 200d528:	3087883a 	add	r3,r6,r2
 200d52c:	31c00115 	stw	r7,4(r6)
 200d530:	18800015 	stw	r2,0(r3)
 200d534:	20001a1e 	bne	r4,zero,200d5a0 <_free_r+0x104>
 200d538:	00c07fc4 	movi	r3,511
 200d53c:	18802e2e 	bgeu	r3,r2,200d5f8 <_free_r+0x15c>
 200d540:	1006d27a 	srli	r3,r2,9
 200d544:	01000104 	movi	r4,4
 200d548:	20c06636 	bltu	r4,r3,200d6e4 <_free_r+0x248>
 200d54c:	1008d1ba 	srli	r4,r2,6
 200d550:	21000e04 	addi	r4,r4,56
 200d554:	210f883a 	add	r7,r4,r4
 200d558:	39cf883a 	add	r7,r7,r7
 200d55c:	39cf883a 	add	r7,r7,r7
 200d560:	29cf883a 	add	r7,r5,r7
 200d564:	38c00217 	ldw	r3,8(r7)
 200d568:	014080f4 	movhi	r5,515
 200d56c:	29426d04 	addi	r5,r5,2484
 200d570:	19c06126 	beq	r3,r7,200d6f8 <_free_r+0x25c>
 200d574:	013fff04 	movi	r4,-4
 200d578:	19400117 	ldw	r5,4(r3)
 200d57c:	290a703a 	and	r5,r5,r4
 200d580:	1140022e 	bgeu	r2,r5,200d58c <_free_r+0xf0>
 200d584:	18c00217 	ldw	r3,8(r3)
 200d588:	38fffb1e 	bne	r7,r3,200d578 <_free_r+0xdc>
 200d58c:	18800317 	ldw	r2,12(r3)
 200d590:	30800315 	stw	r2,12(r6)
 200d594:	30c00215 	stw	r3,8(r6)
 200d598:	11800215 	stw	r6,8(r2)
 200d59c:	19800315 	stw	r6,12(r3)
 200d5a0:	8809883a 	mov	r4,r17
 200d5a4:	dfc00217 	ldw	ra,8(sp)
 200d5a8:	dc400117 	ldw	r17,4(sp)
 200d5ac:	dc000017 	ldw	r16,0(sp)
 200d5b0:	dec00304 	addi	sp,sp,12
 200d5b4:	20115741 	jmpi	2011574 <__malloc_unlock>
 200d5b8:	813ffe17 	ldw	r4,-8(r16)
 200d5bc:	2a400204 	addi	r9,r5,8
 200d5c0:	310dc83a 	sub	r6,r6,r4
 200d5c4:	32000217 	ldw	r8,8(r6)
 200d5c8:	1105883a 	add	r2,r2,r4
 200d5cc:	42404326 	beq	r8,r9,200d6dc <_free_r+0x240>
 200d5d0:	32400317 	ldw	r9,12(r6)
 200d5d4:	0009883a 	mov	r4,zero
 200d5d8:	42400315 	stw	r9,12(r8)
 200d5dc:	4a000215 	stw	r8,8(r9)
 200d5e0:	003fc606 	br	200d4fc <_free_r+0x60>
 200d5e4:	dfc00217 	ldw	ra,8(sp)
 200d5e8:	dc400117 	ldw	r17,4(sp)
 200d5ec:	dc000017 	ldw	r16,0(sp)
 200d5f0:	dec00304 	addi	sp,sp,12
 200d5f4:	f800283a 	ret
 200d5f8:	1004d0fa 	srli	r2,r2,3
 200d5fc:	02000044 	movi	r8,1
 200d600:	29c00117 	ldw	r7,4(r5)
 200d604:	1087883a 	add	r3,r2,r2
 200d608:	18c7883a 	add	r3,r3,r3
 200d60c:	1005d0ba 	srai	r2,r2,2
 200d610:	18c7883a 	add	r3,r3,r3
 200d614:	28c7883a 	add	r3,r5,r3
 200d618:	19000217 	ldw	r4,8(r3)
 200d61c:	4084983a 	sll	r2,r8,r2
 200d620:	30c00315 	stw	r3,12(r6)
 200d624:	31000215 	stw	r4,8(r6)
 200d628:	11c4b03a 	or	r2,r2,r7
 200d62c:	21800315 	stw	r6,12(r4)
 200d630:	8809883a 	mov	r4,r17
 200d634:	28800115 	stw	r2,4(r5)
 200d638:	19800215 	stw	r6,8(r3)
 200d63c:	dfc00217 	ldw	ra,8(sp)
 200d640:	dc400117 	ldw	r17,4(sp)
 200d644:	dc000017 	ldw	r16,0(sp)
 200d648:	dec00304 	addi	sp,sp,12
 200d64c:	20115741 	jmpi	2011574 <__malloc_unlock>
 200d650:	020080f4 	movhi	r8,515
 200d654:	42026f04 	addi	r8,r8,2492
 200d658:	3a3faf1e 	bne	r7,r8,200d518 <_free_r+0x7c>
 200d65c:	29800515 	stw	r6,20(r5)
 200d660:	29800415 	stw	r6,16(r5)
 200d664:	11000054 	ori	r4,r2,1
 200d668:	3087883a 	add	r3,r6,r2
 200d66c:	31c00315 	stw	r7,12(r6)
 200d670:	31c00215 	stw	r7,8(r6)
 200d674:	31000115 	stw	r4,4(r6)
 200d678:	18800015 	stw	r2,0(r3)
 200d67c:	003fc806 	br	200d5a0 <_free_r+0x104>
 200d680:	4200004c 	andi	r8,r8,1
 200d684:	3885883a 	add	r2,r7,r2
 200d688:	4000071e 	bne	r8,zero,200d6a8 <_free_r+0x20c>
 200d68c:	81fffe17 	ldw	r7,-8(r16)
 200d690:	31cdc83a 	sub	r6,r6,r7
 200d694:	30c00317 	ldw	r3,12(r6)
 200d698:	31000217 	ldw	r4,8(r6)
 200d69c:	11c5883a 	add	r2,r2,r7
 200d6a0:	20c00315 	stw	r3,12(r4)
 200d6a4:	19000215 	stw	r4,8(r3)
 200d6a8:	00c080f4 	movhi	r3,515
 200d6ac:	18c82c04 	addi	r3,r3,8368
 200d6b0:	18c00017 	ldw	r3,0(r3)
 200d6b4:	11000054 	ori	r4,r2,1
 200d6b8:	31000115 	stw	r4,4(r6)
 200d6bc:	29800215 	stw	r6,8(r5)
 200d6c0:	10ffb736 	bltu	r2,r3,200d5a0 <_free_r+0x104>
 200d6c4:	008080f4 	movhi	r2,515
 200d6c8:	10883d04 	addi	r2,r2,8436
 200d6cc:	11400017 	ldw	r5,0(r2)
 200d6d0:	8809883a 	mov	r4,r17
 200d6d4:	200d3600 	call	200d360 <_malloc_trim_r>
 200d6d8:	003fb106 	br	200d5a0 <_free_r+0x104>
 200d6dc:	01000044 	movi	r4,1
 200d6e0:	003f8606 	br	200d4fc <_free_r+0x60>
 200d6e4:	01000504 	movi	r4,20
 200d6e8:	20c00b36 	bltu	r4,r3,200d718 <_free_r+0x27c>
 200d6ec:	190016c4 	addi	r4,r3,91
 200d6f0:	210f883a 	add	r7,r4,r4
 200d6f4:	003f9806 	br	200d558 <_free_r+0xbc>
 200d6f8:	2009d0ba 	srai	r4,r4,2
 200d6fc:	00800044 	movi	r2,1
 200d700:	29c00117 	ldw	r7,4(r5)
 200d704:	1108983a 	sll	r4,r2,r4
 200d708:	1805883a 	mov	r2,r3
 200d70c:	21c8b03a 	or	r4,r4,r7
 200d710:	29000115 	stw	r4,4(r5)
 200d714:	003f9e06 	br	200d590 <_free_r+0xf4>
 200d718:	01001504 	movi	r4,84
 200d71c:	20c00436 	bltu	r4,r3,200d730 <_free_r+0x294>
 200d720:	1008d33a 	srli	r4,r2,12
 200d724:	21001b84 	addi	r4,r4,110
 200d728:	210f883a 	add	r7,r4,r4
 200d72c:	003f8a06 	br	200d558 <_free_r+0xbc>
 200d730:	01005504 	movi	r4,340
 200d734:	20c00436 	bltu	r4,r3,200d748 <_free_r+0x2ac>
 200d738:	1008d3fa 	srli	r4,r2,15
 200d73c:	21001dc4 	addi	r4,r4,119
 200d740:	210f883a 	add	r7,r4,r4
 200d744:	003f8406 	br	200d558 <_free_r+0xbc>
 200d748:	01015504 	movi	r4,1364
 200d74c:	20c00436 	bltu	r4,r3,200d760 <_free_r+0x2c4>
 200d750:	1008d4ba 	srli	r4,r2,18
 200d754:	21001f04 	addi	r4,r4,124
 200d758:	210f883a 	add	r7,r4,r4
 200d75c:	003f7e06 	br	200d558 <_free_r+0xbc>
 200d760:	01c03f04 	movi	r7,252
 200d764:	01001f84 	movi	r4,126
 200d768:	003f7b06 	br	200d558 <_free_r+0xbc>

0200d76c <__sfvwrite_r>:
 200d76c:	30800217 	ldw	r2,8(r6)
 200d770:	defff504 	addi	sp,sp,-44
 200d774:	dd400615 	stw	r21,24(sp)
 200d778:	dd000515 	stw	r20,20(sp)
 200d77c:	dc000115 	stw	r16,4(sp)
 200d780:	dfc00a15 	stw	ra,40(sp)
 200d784:	df000915 	stw	fp,36(sp)
 200d788:	ddc00815 	stw	r23,32(sp)
 200d78c:	dd800715 	stw	r22,28(sp)
 200d790:	dcc00415 	stw	r19,16(sp)
 200d794:	dc800315 	stw	r18,12(sp)
 200d798:	dc400215 	stw	r17,8(sp)
 200d79c:	3029883a 	mov	r20,r6
 200d7a0:	202b883a 	mov	r21,r4
 200d7a4:	2821883a 	mov	r16,r5
 200d7a8:	10002126 	beq	r2,zero,200d830 <__sfvwrite_r+0xc4>
 200d7ac:	2880030b 	ldhu	r2,12(r5)
 200d7b0:	10c0020c 	andi	r3,r2,8
 200d7b4:	18ffffcc 	andi	r3,r3,65535
 200d7b8:	18e0001c 	xori	r3,r3,32768
 200d7bc:	18e00004 	addi	r3,r3,-32768
 200d7c0:	18002826 	beq	r3,zero,200d864 <__sfvwrite_r+0xf8>
 200d7c4:	28c00417 	ldw	r3,16(r5)
 200d7c8:	18002626 	beq	r3,zero,200d864 <__sfvwrite_r+0xf8>
 200d7cc:	10c0008c 	andi	r3,r2,2
 200d7d0:	18ffffcc 	andi	r3,r3,65535
 200d7d4:	18e0001c 	xori	r3,r3,32768
 200d7d8:	18e00004 	addi	r3,r3,-32768
 200d7dc:	a4400017 	ldw	r17,0(r20)
 200d7e0:	18002b26 	beq	r3,zero,200d890 <__sfvwrite_r+0x124>
 200d7e4:	0027883a 	mov	r19,zero
 200d7e8:	0025883a 	mov	r18,zero
 200d7ec:	05810004 	movi	r22,1024
 200d7f0:	980d883a 	mov	r6,r19
 200d7f4:	a809883a 	mov	r4,r21
 200d7f8:	90004f26 	beq	r18,zero,200d938 <__sfvwrite_r+0x1cc>
 200d7fc:	900f883a 	mov	r7,r18
 200d800:	81400717 	ldw	r5,28(r16)
 200d804:	b480012e 	bgeu	r22,r18,200d80c <__sfvwrite_r+0xa0>
 200d808:	01c10004 	movi	r7,1024
 200d80c:	80800917 	ldw	r2,36(r16)
 200d810:	103ee83a 	callr	r2
 200d814:	0080540e 	bge	zero,r2,200d968 <__sfvwrite_r+0x1fc>
 200d818:	a0c00217 	ldw	r3,8(r20)
 200d81c:	98a7883a 	add	r19,r19,r2
 200d820:	90a5c83a 	sub	r18,r18,r2
 200d824:	1885c83a 	sub	r2,r3,r2
 200d828:	a0800215 	stw	r2,8(r20)
 200d82c:	103ff01e 	bne	r2,zero,200d7f0 <__sfvwrite_r+0x84>
 200d830:	0005883a 	mov	r2,zero
 200d834:	dfc00a17 	ldw	ra,40(sp)
 200d838:	df000917 	ldw	fp,36(sp)
 200d83c:	ddc00817 	ldw	r23,32(sp)
 200d840:	dd800717 	ldw	r22,28(sp)
 200d844:	dd400617 	ldw	r21,24(sp)
 200d848:	dd000517 	ldw	r20,20(sp)
 200d84c:	dcc00417 	ldw	r19,16(sp)
 200d850:	dc800317 	ldw	r18,12(sp)
 200d854:	dc400217 	ldw	r17,8(sp)
 200d858:	dc000117 	ldw	r16,4(sp)
 200d85c:	dec00b04 	addi	sp,sp,44
 200d860:	f800283a 	ret
 200d864:	a809883a 	mov	r4,r21
 200d868:	800b883a 	mov	r5,r16
 200d86c:	200b4d80 	call	200b4d8 <__swsetup_r>
 200d870:	1000f01e 	bne	r2,zero,200dc34 <__sfvwrite_r+0x4c8>
 200d874:	8080030b 	ldhu	r2,12(r16)
 200d878:	a4400017 	ldw	r17,0(r20)
 200d87c:	10c0008c 	andi	r3,r2,2
 200d880:	18ffffcc 	andi	r3,r3,65535
 200d884:	18e0001c 	xori	r3,r3,32768
 200d888:	18e00004 	addi	r3,r3,-32768
 200d88c:	183fd51e 	bne	r3,zero,200d7e4 <__sfvwrite_r+0x78>
 200d890:	10c0004c 	andi	r3,r2,1
 200d894:	002d883a 	mov	r22,zero
 200d898:	1800381e 	bne	r3,zero,200d97c <__sfvwrite_r+0x210>
 200d89c:	0025883a 	mov	r18,zero
 200d8a0:	90002126 	beq	r18,zero,200d928 <__sfvwrite_r+0x1bc>
 200d8a4:	10c0800c 	andi	r3,r2,512
 200d8a8:	18ffffcc 	andi	r3,r3,65535
 200d8ac:	18e0001c 	xori	r3,r3,32768
 200d8b0:	18e00004 	addi	r3,r3,-32768
 200d8b4:	84c00217 	ldw	r19,8(r16)
 200d8b8:	18006b26 	beq	r3,zero,200da68 <__sfvwrite_r+0x2fc>
 200d8bc:	980f883a 	mov	r7,r19
 200d8c0:	94c08636 	bltu	r18,r19,200dadc <__sfvwrite_r+0x370>
 200d8c4:	10c1200c 	andi	r3,r2,1152
 200d8c8:	18009f1e 	bne	r3,zero,200db48 <__sfvwrite_r+0x3dc>
 200d8cc:	81000017 	ldw	r4,0(r16)
 200d8d0:	982f883a 	mov	r23,r19
 200d8d4:	9039883a 	mov	fp,r18
 200d8d8:	9027883a 	mov	r19,r18
 200d8dc:	380d883a 	mov	r6,r7
 200d8e0:	b00b883a 	mov	r5,r22
 200d8e4:	d9c00015 	stw	r7,0(sp)
 200d8e8:	200e12c0 	call	200e12c <memmove>
 200d8ec:	d9c00017 	ldw	r7,0(sp)
 200d8f0:	81000217 	ldw	r4,8(r16)
 200d8f4:	80800017 	ldw	r2,0(r16)
 200d8f8:	25efc83a 	sub	r23,r4,r23
 200d8fc:	11cf883a 	add	r7,r2,r7
 200d900:	85c00215 	stw	r23,8(r16)
 200d904:	81c00015 	stw	r7,0(r16)
 200d908:	a0800217 	ldw	r2,8(r20)
 200d90c:	b72d883a 	add	r22,r22,fp
 200d910:	9725c83a 	sub	r18,r18,fp
 200d914:	14e7c83a 	sub	r19,r2,r19
 200d918:	a4c00215 	stw	r19,8(r20)
 200d91c:	983fc426 	beq	r19,zero,200d830 <__sfvwrite_r+0xc4>
 200d920:	8080030b 	ldhu	r2,12(r16)
 200d924:	903fdf1e 	bne	r18,zero,200d8a4 <__sfvwrite_r+0x138>
 200d928:	8d800017 	ldw	r22,0(r17)
 200d92c:	8c800117 	ldw	r18,4(r17)
 200d930:	8c400204 	addi	r17,r17,8
 200d934:	003fda06 	br	200d8a0 <__sfvwrite_r+0x134>
 200d938:	8cc00017 	ldw	r19,0(r17)
 200d93c:	8c800117 	ldw	r18,4(r17)
 200d940:	8c400204 	addi	r17,r17,8
 200d944:	003faa06 	br	200d7f0 <__sfvwrite_r+0x84>
 200d948:	200f1fc0 	call	200f1fc <_realloc_r>
 200d94c:	102f883a 	mov	r23,r2
 200d950:	10009f1e 	bne	r2,zero,200dbd0 <__sfvwrite_r+0x464>
 200d954:	81400417 	ldw	r5,16(r16)
 200d958:	a809883a 	mov	r4,r21
 200d95c:	200d49c0 	call	200d49c <_free_r>
 200d960:	00800304 	movi	r2,12
 200d964:	a8800015 	stw	r2,0(r21)
 200d968:	80c0030b 	ldhu	r3,12(r16)
 200d96c:	00bfffc4 	movi	r2,-1
 200d970:	18c01014 	ori	r3,r3,64
 200d974:	80c0030d 	sth	r3,12(r16)
 200d978:	003fae06 	br	200d834 <__sfvwrite_r+0xc8>
 200d97c:	0007883a 	mov	r3,zero
 200d980:	0039883a 	mov	fp,zero
 200d984:	0025883a 	mov	r18,zero
 200d988:	90001e26 	beq	r18,zero,200da04 <__sfvwrite_r+0x298>
 200d98c:	18006526 	beq	r3,zero,200db24 <__sfvwrite_r+0x3b8>
 200d990:	b02f883a 	mov	r23,r22
 200d994:	9580012e 	bgeu	r18,r22,200d99c <__sfvwrite_r+0x230>
 200d998:	902f883a 	mov	r23,r18
 200d99c:	81000017 	ldw	r4,0(r16)
 200d9a0:	80800417 	ldw	r2,16(r16)
 200d9a4:	84c00217 	ldw	r19,8(r16)
 200d9a8:	81c00517 	ldw	r7,20(r16)
 200d9ac:	1100022e 	bgeu	r2,r4,200d9b8 <__sfvwrite_r+0x24c>
 200d9b0:	99e7883a 	add	r19,r19,r7
 200d9b4:	9dc01816 	blt	r19,r23,200da18 <__sfvwrite_r+0x2ac>
 200d9b8:	b9c03b16 	blt	r23,r7,200daa8 <__sfvwrite_r+0x33c>
 200d9bc:	80800917 	ldw	r2,36(r16)
 200d9c0:	81400717 	ldw	r5,28(r16)
 200d9c4:	a809883a 	mov	r4,r21
 200d9c8:	d8c00015 	stw	r3,0(sp)
 200d9cc:	e00d883a 	mov	r6,fp
 200d9d0:	103ee83a 	callr	r2
 200d9d4:	1027883a 	mov	r19,r2
 200d9d8:	d8c00017 	ldw	r3,0(sp)
 200d9dc:	00bfe20e 	bge	zero,r2,200d968 <__sfvwrite_r+0x1fc>
 200d9e0:	b4edc83a 	sub	r22,r22,r19
 200d9e4:	b0001a26 	beq	r22,zero,200da50 <__sfvwrite_r+0x2e4>
 200d9e8:	a0800217 	ldw	r2,8(r20)
 200d9ec:	e4f9883a 	add	fp,fp,r19
 200d9f0:	94e5c83a 	sub	r18,r18,r19
 200d9f4:	14e7c83a 	sub	r19,r2,r19
 200d9f8:	a4c00215 	stw	r19,8(r20)
 200d9fc:	983f8c26 	beq	r19,zero,200d830 <__sfvwrite_r+0xc4>
 200da00:	903fe21e 	bne	r18,zero,200d98c <__sfvwrite_r+0x220>
 200da04:	8f000017 	ldw	fp,0(r17)
 200da08:	8c800117 	ldw	r18,4(r17)
 200da0c:	0007883a 	mov	r3,zero
 200da10:	8c400204 	addi	r17,r17,8
 200da14:	003fdc06 	br	200d988 <__sfvwrite_r+0x21c>
 200da18:	e00b883a 	mov	r5,fp
 200da1c:	980d883a 	mov	r6,r19
 200da20:	d8c00015 	stw	r3,0(sp)
 200da24:	200e12c0 	call	200e12c <memmove>
 200da28:	80800017 	ldw	r2,0(r16)
 200da2c:	a809883a 	mov	r4,r21
 200da30:	800b883a 	mov	r5,r16
 200da34:	14c5883a 	add	r2,r2,r19
 200da38:	80800015 	stw	r2,0(r16)
 200da3c:	200ce700 	call	200ce70 <_fflush_r>
 200da40:	d8c00017 	ldw	r3,0(sp)
 200da44:	103fc81e 	bne	r2,zero,200d968 <__sfvwrite_r+0x1fc>
 200da48:	b4edc83a 	sub	r22,r22,r19
 200da4c:	b03fe61e 	bne	r22,zero,200d9e8 <__sfvwrite_r+0x27c>
 200da50:	a809883a 	mov	r4,r21
 200da54:	800b883a 	mov	r5,r16
 200da58:	200ce700 	call	200ce70 <_fflush_r>
 200da5c:	103fc21e 	bne	r2,zero,200d968 <__sfvwrite_r+0x1fc>
 200da60:	0007883a 	mov	r3,zero
 200da64:	003fe006 	br	200d9e8 <__sfvwrite_r+0x27c>
 200da68:	81000017 	ldw	r4,0(r16)
 200da6c:	80800417 	ldw	r2,16(r16)
 200da70:	1100022e 	bgeu	r2,r4,200da7c <__sfvwrite_r+0x310>
 200da74:	9839883a 	mov	fp,r19
 200da78:	9c806036 	bltu	r19,r18,200dbfc <__sfvwrite_r+0x490>
 200da7c:	81c00517 	ldw	r7,20(r16)
 200da80:	91c01c36 	bltu	r18,r7,200daf4 <__sfvwrite_r+0x388>
 200da84:	80800917 	ldw	r2,36(r16)
 200da88:	81400717 	ldw	r5,28(r16)
 200da8c:	a809883a 	mov	r4,r21
 200da90:	b00d883a 	mov	r6,r22
 200da94:	103ee83a 	callr	r2
 200da98:	1027883a 	mov	r19,r2
 200da9c:	00bfb20e 	bge	zero,r2,200d968 <__sfvwrite_r+0x1fc>
 200daa0:	1039883a 	mov	fp,r2
 200daa4:	003f9806 	br	200d908 <__sfvwrite_r+0x19c>
 200daa8:	b80d883a 	mov	r6,r23
 200daac:	e00b883a 	mov	r5,fp
 200dab0:	d8c00015 	stw	r3,0(sp)
 200dab4:	200e12c0 	call	200e12c <memmove>
 200dab8:	80800217 	ldw	r2,8(r16)
 200dabc:	81000017 	ldw	r4,0(r16)
 200dac0:	b827883a 	mov	r19,r23
 200dac4:	15c5c83a 	sub	r2,r2,r23
 200dac8:	25ef883a 	add	r23,r4,r23
 200dacc:	80800215 	stw	r2,8(r16)
 200dad0:	85c00015 	stw	r23,0(r16)
 200dad4:	d8c00017 	ldw	r3,0(sp)
 200dad8:	003fc106 	br	200d9e0 <__sfvwrite_r+0x274>
 200dadc:	81000017 	ldw	r4,0(r16)
 200dae0:	902f883a 	mov	r23,r18
 200dae4:	9039883a 	mov	fp,r18
 200dae8:	9027883a 	mov	r19,r18
 200daec:	900f883a 	mov	r7,r18
 200daf0:	003f7a06 	br	200d8dc <__sfvwrite_r+0x170>
 200daf4:	b00b883a 	mov	r5,r22
 200daf8:	900d883a 	mov	r6,r18
 200dafc:	200e12c0 	call	200e12c <memmove>
 200db00:	80c00217 	ldw	r3,8(r16)
 200db04:	80800017 	ldw	r2,0(r16)
 200db08:	9027883a 	mov	r19,r18
 200db0c:	1c87c83a 	sub	r3,r3,r18
 200db10:	1485883a 	add	r2,r2,r18
 200db14:	80c00215 	stw	r3,8(r16)
 200db18:	80800015 	stw	r2,0(r16)
 200db1c:	9039883a 	mov	fp,r18
 200db20:	003f7906 	br	200d908 <__sfvwrite_r+0x19c>
 200db24:	e009883a 	mov	r4,fp
 200db28:	01400284 	movi	r5,10
 200db2c:	900d883a 	mov	r6,r18
 200db30:	200e0340 	call	200e034 <memchr>
 200db34:	10003c26 	beq	r2,zero,200dc28 <__sfvwrite_r+0x4bc>
 200db38:	15800044 	addi	r22,r2,1
 200db3c:	b72dc83a 	sub	r22,r22,fp
 200db40:	00c00044 	movi	r3,1
 200db44:	003f9206 	br	200d990 <__sfvwrite_r+0x224>
 200db48:	81000517 	ldw	r4,20(r16)
 200db4c:	81400417 	ldw	r5,16(r16)
 200db50:	80c00017 	ldw	r3,0(r16)
 200db54:	210d883a 	add	r6,r4,r4
 200db58:	3109883a 	add	r4,r6,r4
 200db5c:	2026d7fa 	srli	r19,r4,31
 200db60:	1979c83a 	sub	fp,r3,r5
 200db64:	e1800044 	addi	r6,fp,1
 200db68:	9909883a 	add	r4,r19,r4
 200db6c:	2027d07a 	srai	r19,r4,1
 200db70:	3489883a 	add	r4,r6,r18
 200db74:	980d883a 	mov	r6,r19
 200db78:	9900022e 	bgeu	r19,r4,200db84 <__sfvwrite_r+0x418>
 200db7c:	2027883a 	mov	r19,r4
 200db80:	200d883a 	mov	r6,r4
 200db84:	1081000c 	andi	r2,r2,1024
 200db88:	10bfffcc 	andi	r2,r2,65535
 200db8c:	10a0001c 	xori	r2,r2,32768
 200db90:	10a00004 	addi	r2,r2,-32768
 200db94:	a809883a 	mov	r4,r21
 200db98:	103f6b26 	beq	r2,zero,200d948 <__sfvwrite_r+0x1dc>
 200db9c:	300b883a 	mov	r5,r6
 200dba0:	20088fc0 	call	20088fc <_malloc_r>
 200dba4:	102f883a 	mov	r23,r2
 200dba8:	103f6d26 	beq	r2,zero,200d960 <__sfvwrite_r+0x1f4>
 200dbac:	81400417 	ldw	r5,16(r16)
 200dbb0:	1009883a 	mov	r4,r2
 200dbb4:	e00d883a 	mov	r6,fp
 200dbb8:	20090800 	call	2009080 <memcpy>
 200dbbc:	8080030b 	ldhu	r2,12(r16)
 200dbc0:	00fedfc4 	movi	r3,-1153
 200dbc4:	10c4703a 	and	r2,r2,r3
 200dbc8:	10802014 	ori	r2,r2,128
 200dbcc:	8080030d 	sth	r2,12(r16)
 200dbd0:	bf09883a 	add	r4,r23,fp
 200dbd4:	9f07c83a 	sub	r3,r19,fp
 200dbd8:	85c00415 	stw	r23,16(r16)
 200dbdc:	84c00515 	stw	r19,20(r16)
 200dbe0:	81000015 	stw	r4,0(r16)
 200dbe4:	902f883a 	mov	r23,r18
 200dbe8:	80c00215 	stw	r3,8(r16)
 200dbec:	9039883a 	mov	fp,r18
 200dbf0:	9027883a 	mov	r19,r18
 200dbf4:	900f883a 	mov	r7,r18
 200dbf8:	003f3806 	br	200d8dc <__sfvwrite_r+0x170>
 200dbfc:	b00b883a 	mov	r5,r22
 200dc00:	980d883a 	mov	r6,r19
 200dc04:	200e12c0 	call	200e12c <memmove>
 200dc08:	80800017 	ldw	r2,0(r16)
 200dc0c:	a809883a 	mov	r4,r21
 200dc10:	800b883a 	mov	r5,r16
 200dc14:	14c5883a 	add	r2,r2,r19
 200dc18:	80800015 	stw	r2,0(r16)
 200dc1c:	200ce700 	call	200ce70 <_fflush_r>
 200dc20:	103f3926 	beq	r2,zero,200d908 <__sfvwrite_r+0x19c>
 200dc24:	003f5006 	br	200d968 <__sfvwrite_r+0x1fc>
 200dc28:	95800044 	addi	r22,r18,1
 200dc2c:	00c00044 	movi	r3,1
 200dc30:	003f5706 	br	200d990 <__sfvwrite_r+0x224>
 200dc34:	80c0030b 	ldhu	r3,12(r16)
 200dc38:	00bfffc4 	movi	r2,-1
 200dc3c:	18c01014 	ori	r3,r3,64
 200dc40:	80c0030d 	sth	r3,12(r16)
 200dc44:	00c00244 	movi	r3,9
 200dc48:	a8c00015 	stw	r3,0(r21)
 200dc4c:	003ef906 	br	200d834 <__sfvwrite_r+0xc8>

0200dc50 <_fwalk>:
 200dc50:	defff904 	addi	sp,sp,-28
 200dc54:	dcc00315 	stw	r19,12(sp)
 200dc58:	24c0b804 	addi	r19,r4,736
 200dc5c:	dd400515 	stw	r21,20(sp)
 200dc60:	dd000415 	stw	r20,16(sp)
 200dc64:	dfc00615 	stw	ra,24(sp)
 200dc68:	dc800215 	stw	r18,8(sp)
 200dc6c:	dc400115 	stw	r17,4(sp)
 200dc70:	dc000015 	stw	r16,0(sp)
 200dc74:	282b883a 	mov	r21,r5
 200dc78:	0029883a 	mov	r20,zero
 200dc7c:	200d3200 	call	200d320 <__sfp_lock_acquire>
 200dc80:	98001226 	beq	r19,zero,200dccc <_fwalk+0x7c>
 200dc84:	04bfffc4 	movi	r18,-1
 200dc88:	9c400117 	ldw	r17,4(r19)
 200dc8c:	9c000217 	ldw	r16,8(r19)
 200dc90:	8c7fffc4 	addi	r17,r17,-1
 200dc94:	88000b16 	blt	r17,zero,200dcc4 <_fwalk+0x74>
 200dc98:	84000304 	addi	r16,r16,12
 200dc9c:	80c0000f 	ldh	r3,0(r16)
 200dca0:	8c7fffc4 	addi	r17,r17,-1
 200dca4:	813ffd04 	addi	r4,r16,-12
 200dca8:	18000426 	beq	r3,zero,200dcbc <_fwalk+0x6c>
 200dcac:	80c0008f 	ldh	r3,2(r16)
 200dcb0:	1c800226 	beq	r3,r18,200dcbc <_fwalk+0x6c>
 200dcb4:	a83ee83a 	callr	r21
 200dcb8:	a0a8b03a 	or	r20,r20,r2
 200dcbc:	84001704 	addi	r16,r16,92
 200dcc0:	8cbff61e 	bne	r17,r18,200dc9c <_fwalk+0x4c>
 200dcc4:	9cc00017 	ldw	r19,0(r19)
 200dcc8:	983fef1e 	bne	r19,zero,200dc88 <_fwalk+0x38>
 200dccc:	200d3240 	call	200d324 <__sfp_lock_release>
 200dcd0:	a005883a 	mov	r2,r20
 200dcd4:	dfc00617 	ldw	ra,24(sp)
 200dcd8:	dd400517 	ldw	r21,20(sp)
 200dcdc:	dd000417 	ldw	r20,16(sp)
 200dce0:	dcc00317 	ldw	r19,12(sp)
 200dce4:	dc800217 	ldw	r18,8(sp)
 200dce8:	dc400117 	ldw	r17,4(sp)
 200dcec:	dc000017 	ldw	r16,0(sp)
 200dcf0:	dec00704 	addi	sp,sp,28
 200dcf4:	f800283a 	ret

0200dcf8 <_fwalk_reent>:
 200dcf8:	defff804 	addi	sp,sp,-32
 200dcfc:	dcc00315 	stw	r19,12(sp)
 200dd00:	24c0b804 	addi	r19,r4,736
 200dd04:	dd800615 	stw	r22,24(sp)
 200dd08:	dd400515 	stw	r21,20(sp)
 200dd0c:	dd000415 	stw	r20,16(sp)
 200dd10:	dfc00715 	stw	ra,28(sp)
 200dd14:	dc800215 	stw	r18,8(sp)
 200dd18:	dc400115 	stw	r17,4(sp)
 200dd1c:	dc000015 	stw	r16,0(sp)
 200dd20:	2029883a 	mov	r20,r4
 200dd24:	282b883a 	mov	r21,r5
 200dd28:	002d883a 	mov	r22,zero
 200dd2c:	200d3200 	call	200d320 <__sfp_lock_acquire>
 200dd30:	98001326 	beq	r19,zero,200dd80 <_fwalk_reent+0x88>
 200dd34:	04bfffc4 	movi	r18,-1
 200dd38:	9c400117 	ldw	r17,4(r19)
 200dd3c:	9c000217 	ldw	r16,8(r19)
 200dd40:	8c7fffc4 	addi	r17,r17,-1
 200dd44:	88000c16 	blt	r17,zero,200dd78 <_fwalk_reent+0x80>
 200dd48:	84000304 	addi	r16,r16,12
 200dd4c:	80c0000f 	ldh	r3,0(r16)
 200dd50:	8c7fffc4 	addi	r17,r17,-1
 200dd54:	817ffd04 	addi	r5,r16,-12
 200dd58:	18000526 	beq	r3,zero,200dd70 <_fwalk_reent+0x78>
 200dd5c:	80c0008f 	ldh	r3,2(r16)
 200dd60:	a009883a 	mov	r4,r20
 200dd64:	1c800226 	beq	r3,r18,200dd70 <_fwalk_reent+0x78>
 200dd68:	a83ee83a 	callr	r21
 200dd6c:	b0acb03a 	or	r22,r22,r2
 200dd70:	84001704 	addi	r16,r16,92
 200dd74:	8cbff51e 	bne	r17,r18,200dd4c <_fwalk_reent+0x54>
 200dd78:	9cc00017 	ldw	r19,0(r19)
 200dd7c:	983fee1e 	bne	r19,zero,200dd38 <_fwalk_reent+0x40>
 200dd80:	200d3240 	call	200d324 <__sfp_lock_release>
 200dd84:	b005883a 	mov	r2,r22
 200dd88:	dfc00717 	ldw	ra,28(sp)
 200dd8c:	dd800617 	ldw	r22,24(sp)
 200dd90:	dd400517 	ldw	r21,20(sp)
 200dd94:	dd000417 	ldw	r20,16(sp)
 200dd98:	dcc00317 	ldw	r19,12(sp)
 200dd9c:	dc800217 	ldw	r18,8(sp)
 200dda0:	dc400117 	ldw	r17,4(sp)
 200dda4:	dc000017 	ldw	r16,0(sp)
 200dda8:	dec00804 	addi	sp,sp,32
 200ddac:	f800283a 	ret

0200ddb0 <_setlocale_r>:
 200ddb0:	defffc04 	addi	sp,sp,-16
 200ddb4:	dc800215 	stw	r18,8(sp)
 200ddb8:	dc400115 	stw	r17,4(sp)
 200ddbc:	dc000015 	stw	r16,0(sp)
 200ddc0:	dfc00315 	stw	ra,12(sp)
 200ddc4:	3021883a 	mov	r16,r6
 200ddc8:	2023883a 	mov	r17,r4
 200ddcc:	2825883a 	mov	r18,r5
 200ddd0:	30001626 	beq	r6,zero,200de2c <_setlocale_r+0x7c>
 200ddd4:	3009883a 	mov	r4,r6
 200ddd8:	014080f4 	movhi	r5,515
 200dddc:	2979f704 	addi	r5,r5,-6180
 200dde0:	200f9700 	call	200f970 <strcmp>
 200dde4:	10000a1e 	bne	r2,zero,200de10 <_setlocale_r+0x60>
 200dde8:	8c800c15 	stw	r18,48(r17)
 200ddec:	8c000d15 	stw	r16,52(r17)
 200ddf0:	008080f4 	movhi	r2,515
 200ddf4:	10b9f704 	addi	r2,r2,-6180
 200ddf8:	dfc00317 	ldw	ra,12(sp)
 200ddfc:	dc800217 	ldw	r18,8(sp)
 200de00:	dc400117 	ldw	r17,4(sp)
 200de04:	dc000017 	ldw	r16,0(sp)
 200de08:	dec00404 	addi	sp,sp,16
 200de0c:	f800283a 	ret
 200de10:	8009883a 	mov	r4,r16
 200de14:	014080f4 	movhi	r5,515
 200de18:	297a0104 	addi	r5,r5,-6140
 200de1c:	200f9700 	call	200f970 <strcmp>
 200de20:	103ff126 	beq	r2,zero,200dde8 <_setlocale_r+0x38>
 200de24:	0005883a 	mov	r2,zero
 200de28:	003ff306 	br	200ddf8 <_setlocale_r+0x48>
 200de2c:	008080f4 	movhi	r2,515
 200de30:	10b9f704 	addi	r2,r2,-6180
 200de34:	dfc00317 	ldw	ra,12(sp)
 200de38:	dc800217 	ldw	r18,8(sp)
 200de3c:	dc400117 	ldw	r17,4(sp)
 200de40:	dc000017 	ldw	r16,0(sp)
 200de44:	dec00404 	addi	sp,sp,16
 200de48:	f800283a 	ret

0200de4c <__locale_charset>:
 200de4c:	008080f4 	movhi	r2,515
 200de50:	10ba1604 	addi	r2,r2,-6056
 200de54:	f800283a 	ret

0200de58 <_localeconv_r>:
 200de58:	008080f4 	movhi	r2,515
 200de5c:	10ba1a04 	addi	r2,r2,-6040
 200de60:	f800283a 	ret

0200de64 <setlocale>:
 200de64:	00c080f4 	movhi	r3,515
 200de68:	18c82a04 	addi	r3,r3,8360
 200de6c:	2005883a 	mov	r2,r4
 200de70:	19000017 	ldw	r4,0(r3)
 200de74:	280d883a 	mov	r6,r5
 200de78:	100b883a 	mov	r5,r2
 200de7c:	200ddb01 	jmpi	200ddb0 <_setlocale_r>

0200de80 <localeconv>:
 200de80:	008080f4 	movhi	r2,515
 200de84:	10ba1a04 	addi	r2,r2,-6040
 200de88:	f800283a 	ret

0200de8c <__smakebuf_r>:
 200de8c:	2880030b 	ldhu	r2,12(r5)
 200de90:	deffed04 	addi	sp,sp,-76
 200de94:	dc401015 	stw	r17,64(sp)
 200de98:	10c0008c 	andi	r3,r2,2
 200de9c:	18ffffcc 	andi	r3,r3,65535
 200dea0:	18e0001c 	xori	r3,r3,32768
 200dea4:	dc000f15 	stw	r16,60(sp)
 200dea8:	dfc01215 	stw	ra,72(sp)
 200deac:	dc801115 	stw	r18,68(sp)
 200deb0:	18e00004 	addi	r3,r3,-32768
 200deb4:	2821883a 	mov	r16,r5
 200deb8:	2023883a 	mov	r17,r4
 200debc:	1800381e 	bne	r3,zero,200dfa0 <__smakebuf_r+0x114>
 200dec0:	2940038f 	ldh	r5,14(r5)
 200dec4:	28002d16 	blt	r5,zero,200df7c <__smakebuf_r+0xf0>
 200dec8:	d80d883a 	mov	r6,sp
 200decc:	200fcf00 	call	200fcf0 <_fstat_r>
 200ded0:	10002916 	blt	r2,zero,200df78 <__smakebuf_r+0xec>
 200ded4:	d8800117 	ldw	r2,4(sp)
 200ded8:	00e00014 	movui	r3,32768
 200dedc:	10bc000c 	andi	r2,r2,61440
 200dee0:	10c03c26 	beq	r2,r3,200dfd4 <__smakebuf_r+0x148>
 200dee4:	80c0030b 	ldhu	r3,12(r16)
 200dee8:	18c20014 	ori	r3,r3,2048
 200deec:	80c0030d 	sth	r3,12(r16)
 200def0:	00c80004 	movi	r3,8192
 200def4:	10c00c1e 	bne	r2,r3,200df28 <__smakebuf_r+0x9c>
 200def8:	8140038f 	ldh	r5,14(r16)
 200defc:	8809883a 	mov	r4,r17
 200df00:	200fd580 	call	200fd58 <_isatty_r>
 200df04:	10000826 	beq	r2,zero,200df28 <__smakebuf_r+0x9c>
 200df08:	80c0030b 	ldhu	r3,12(r16)
 200df0c:	808010c4 	addi	r2,r16,67
 200df10:	80800015 	stw	r2,0(r16)
 200df14:	18c00054 	ori	r3,r3,1
 200df18:	80800415 	stw	r2,16(r16)
 200df1c:	00800044 	movi	r2,1
 200df20:	80c0030d 	sth	r3,12(r16)
 200df24:	80800515 	stw	r2,20(r16)
 200df28:	04810004 	movi	r18,1024
 200df2c:	8809883a 	mov	r4,r17
 200df30:	900b883a 	mov	r5,r18
 200df34:	20088fc0 	call	20088fc <_malloc_r>
 200df38:	10003026 	beq	r2,zero,200dffc <__smakebuf_r+0x170>
 200df3c:	80c0030b 	ldhu	r3,12(r16)
 200df40:	01008074 	movhi	r4,513
 200df44:	21342604 	addi	r4,r4,-12136
 200df48:	89000f15 	stw	r4,60(r17)
 200df4c:	18c02014 	ori	r3,r3,128
 200df50:	80c0030d 	sth	r3,12(r16)
 200df54:	80800015 	stw	r2,0(r16)
 200df58:	80800415 	stw	r2,16(r16)
 200df5c:	84800515 	stw	r18,20(r16)
 200df60:	dfc01217 	ldw	ra,72(sp)
 200df64:	dc801117 	ldw	r18,68(sp)
 200df68:	dc401017 	ldw	r17,64(sp)
 200df6c:	dc000f17 	ldw	r16,60(sp)
 200df70:	dec01304 	addi	sp,sp,76
 200df74:	f800283a 	ret
 200df78:	8080030b 	ldhu	r2,12(r16)
 200df7c:	10c0200c 	andi	r3,r2,128
 200df80:	18ffffcc 	andi	r3,r3,65535
 200df84:	18e0001c 	xori	r3,r3,32768
 200df88:	18e00004 	addi	r3,r3,-32768
 200df8c:	18000f1e 	bne	r3,zero,200dfcc <__smakebuf_r+0x140>
 200df90:	04810004 	movi	r18,1024
 200df94:	10820014 	ori	r2,r2,2048
 200df98:	8080030d 	sth	r2,12(r16)
 200df9c:	003fe306 	br	200df2c <__smakebuf_r+0xa0>
 200dfa0:	288010c4 	addi	r2,r5,67
 200dfa4:	28800015 	stw	r2,0(r5)
 200dfa8:	28800415 	stw	r2,16(r5)
 200dfac:	00800044 	movi	r2,1
 200dfb0:	28800515 	stw	r2,20(r5)
 200dfb4:	dfc01217 	ldw	ra,72(sp)
 200dfb8:	dc801117 	ldw	r18,68(sp)
 200dfbc:	dc401017 	ldw	r17,64(sp)
 200dfc0:	dc000f17 	ldw	r16,60(sp)
 200dfc4:	dec01304 	addi	sp,sp,76
 200dfc8:	f800283a 	ret
 200dfcc:	04801004 	movi	r18,64
 200dfd0:	003ff006 	br	200df94 <__smakebuf_r+0x108>
 200dfd4:	81000a17 	ldw	r4,40(r16)
 200dfd8:	00c08074 	movhi	r3,513
 200dfdc:	18fe4304 	addi	r3,r3,-1780
 200dfe0:	20ffc01e 	bne	r4,r3,200dee4 <__smakebuf_r+0x58>
 200dfe4:	8080030b 	ldhu	r2,12(r16)
 200dfe8:	00c10004 	movi	r3,1024
 200dfec:	80c01315 	stw	r3,76(r16)
 200dff0:	10c4b03a 	or	r2,r2,r3
 200dff4:	8080030d 	sth	r2,12(r16)
 200dff8:	003fcb06 	br	200df28 <__smakebuf_r+0x9c>
 200dffc:	8080030b 	ldhu	r2,12(r16)
 200e000:	10c0800c 	andi	r3,r2,512
 200e004:	18ffffcc 	andi	r3,r3,65535
 200e008:	18e0001c 	xori	r3,r3,32768
 200e00c:	18e00004 	addi	r3,r3,-32768
 200e010:	183fd31e 	bne	r3,zero,200df60 <__smakebuf_r+0xd4>
 200e014:	10800094 	ori	r2,r2,2
 200e018:	80c010c4 	addi	r3,r16,67
 200e01c:	8080030d 	sth	r2,12(r16)
 200e020:	00800044 	movi	r2,1
 200e024:	80c00015 	stw	r3,0(r16)
 200e028:	80c00415 	stw	r3,16(r16)
 200e02c:	80800515 	stw	r2,20(r16)
 200e030:	003fcb06 	br	200df60 <__smakebuf_r+0xd4>

0200e034 <memchr>:
 200e034:	008000c4 	movi	r2,3
 200e038:	29403fcc 	andi	r5,r5,255
 200e03c:	1180282e 	bgeu	r2,r6,200e0e0 <memchr+0xac>
 200e040:	2086703a 	and	r3,r4,r2
 200e044:	1800351e 	bne	r3,zero,200e11c <memchr+0xe8>
 200e048:	2816923a 	slli	r11,r5,8
 200e04c:	2093883a 	add	r9,r4,r2
 200e050:	22000084 	addi	r8,r4,2
 200e054:	5957883a 	add	r11,r11,r5
 200e058:	5816923a 	slli	r11,r11,8
 200e05c:	20c00044 	addi	r3,r4,1
 200e060:	037fbff4 	movhi	r13,65279
 200e064:	6b7fbfc4 	addi	r13,r13,-257
 200e068:	5957883a 	add	r11,r11,r5
 200e06c:	5816923a 	slli	r11,r11,8
 200e070:	03202074 	movhi	r12,32897
 200e074:	63202004 	addi	r12,r12,-32640
 200e078:	101d883a 	mov	r14,r2
 200e07c:	5957883a 	add	r11,r11,r5
 200e080:	21c00017 	ldw	r7,0(r4)
 200e084:	31bfff04 	addi	r6,r6,-4
 200e088:	1805883a 	mov	r2,r3
 200e08c:	3acef03a 	xor	r7,r7,r11
 200e090:	3b55883a 	add	r10,r7,r13
 200e094:	01ce303a 	nor	r7,zero,r7
 200e098:	51ce703a 	and	r7,r10,r7
 200e09c:	3b0e703a 	and	r7,r7,r12
 200e0a0:	38000a26 	beq	r7,zero,200e0cc <memchr+0x98>
 200e0a4:	21c00003 	ldbu	r7,0(r4)
 200e0a8:	39401e26 	beq	r7,r5,200e124 <memchr+0xf0>
 200e0ac:	19c00003 	ldbu	r7,0(r3)
 200e0b0:	39401926 	beq	r7,r5,200e118 <memchr+0xe4>
 200e0b4:	41c00003 	ldbu	r7,0(r8)
 200e0b8:	4005883a 	mov	r2,r8
 200e0bc:	39401626 	beq	r7,r5,200e118 <memchr+0xe4>
 200e0c0:	49c00003 	ldbu	r7,0(r9)
 200e0c4:	4805883a 	mov	r2,r9
 200e0c8:	39401326 	beq	r7,r5,200e118 <memchr+0xe4>
 200e0cc:	21000104 	addi	r4,r4,4
 200e0d0:	4a400104 	addi	r9,r9,4
 200e0d4:	42000104 	addi	r8,r8,4
 200e0d8:	18c00104 	addi	r3,r3,4
 200e0dc:	71bfe836 	bltu	r14,r6,200e080 <memchr+0x4c>
 200e0e0:	2005883a 	mov	r2,r4
 200e0e4:	30000a26 	beq	r6,zero,200e110 <memchr+0xdc>
 200e0e8:	10c00003 	ldbu	r3,0(r2)
 200e0ec:	19400a26 	beq	r3,r5,200e118 <memchr+0xe4>
 200e0f0:	10c00044 	addi	r3,r2,1
 200e0f4:	118d883a 	add	r6,r2,r6
 200e0f8:	00000306 	br	200e108 <memchr+0xd4>
 200e0fc:	11000003 	ldbu	r4,0(r2)
 200e100:	18c00044 	addi	r3,r3,1
 200e104:	21400426 	beq	r4,r5,200e118 <memchr+0xe4>
 200e108:	1805883a 	mov	r2,r3
 200e10c:	19bffb1e 	bne	r3,r6,200e0fc <memchr+0xc8>
 200e110:	0005883a 	mov	r2,zero
 200e114:	f800283a 	ret
 200e118:	f800283a 	ret
 200e11c:	2005883a 	mov	r2,r4
 200e120:	003ff106 	br	200e0e8 <memchr+0xb4>
 200e124:	2005883a 	mov	r2,r4
 200e128:	f800283a 	ret

0200e12c <memmove>:
 200e12c:	2005883a 	mov	r2,r4
 200e130:	300f883a 	mov	r7,r6
 200e134:	29000b2e 	bgeu	r5,r4,200e164 <memmove+0x38>
 200e138:	2987883a 	add	r3,r5,r6
 200e13c:	20c0092e 	bgeu	r4,r3,200e164 <memmove+0x38>
 200e140:	218b883a 	add	r5,r4,r6
 200e144:	198fc83a 	sub	r7,r3,r6
 200e148:	30003f26 	beq	r6,zero,200e248 <memmove+0x11c>
 200e14c:	18ffffc4 	addi	r3,r3,-1
 200e150:	19000003 	ldbu	r4,0(r3)
 200e154:	297fffc4 	addi	r5,r5,-1
 200e158:	29000005 	stb	r4,0(r5)
 200e15c:	19fffb1e 	bne	r3,r7,200e14c <memmove+0x20>
 200e160:	f800283a 	ret
 200e164:	00c003c4 	movi	r3,15
 200e168:	1980382e 	bgeu	r3,r6,200e24c <memmove+0x120>
 200e16c:	2886b03a 	or	r3,r5,r2
 200e170:	18c000cc 	andi	r3,r3,3
 200e174:	1800351e 	bne	r3,zero,200e24c <memmove+0x120>
 200e178:	327ffc04 	addi	r9,r6,-16
 200e17c:	4812d13a 	srli	r9,r9,4
 200e180:	12000404 	addi	r8,r2,16
 200e184:	1007883a 	mov	r3,r2
 200e188:	4808913a 	slli	r4,r9,4
 200e18c:	280f883a 	mov	r7,r5
 200e190:	4111883a 	add	r8,r8,r4
 200e194:	39000017 	ldw	r4,0(r7)
 200e198:	18c00404 	addi	r3,r3,16
 200e19c:	39c00404 	addi	r7,r7,16
 200e1a0:	193ffc15 	stw	r4,-16(r3)
 200e1a4:	393ffd17 	ldw	r4,-12(r7)
 200e1a8:	193ffd15 	stw	r4,-12(r3)
 200e1ac:	393ffe17 	ldw	r4,-8(r7)
 200e1b0:	193ffe15 	stw	r4,-8(r3)
 200e1b4:	393fff17 	ldw	r4,-4(r7)
 200e1b8:	193fff15 	stw	r4,-4(r3)
 200e1bc:	1a3ff51e 	bne	r3,r8,200e194 <memmove+0x68>
 200e1c0:	49000044 	addi	r4,r9,1
 200e1c4:	2008913a 	slli	r4,r4,4
 200e1c8:	31c003cc 	andi	r7,r6,15
 200e1cc:	1107883a 	add	r3,r2,r4
 200e1d0:	290b883a 	add	r5,r5,r4
 200e1d4:	010000c4 	movi	r4,3
 200e1d8:	21c0142e 	bgeu	r4,r7,200e22c <memmove+0x100>
 200e1dc:	39ffff04 	addi	r7,r7,-4
 200e1e0:	3814d0ba 	srli	r10,r7,2
 200e1e4:	1a400104 	addi	r9,r3,4
 200e1e8:	180d883a 	mov	r6,r3
 200e1ec:	5289883a 	add	r4,r10,r10
 200e1f0:	2109883a 	add	r4,r4,r4
 200e1f4:	4913883a 	add	r9,r9,r4
 200e1f8:	2809883a 	mov	r4,r5
 200e1fc:	22000017 	ldw	r8,0(r4)
 200e200:	31800104 	addi	r6,r6,4
 200e204:	21000104 	addi	r4,r4,4
 200e208:	323fff15 	stw	r8,-4(r6)
 200e20c:	327ffb1e 	bne	r6,r9,200e1fc <memmove+0xd0>
 200e210:	51000044 	addi	r4,r10,1
 200e214:	52bfff24 	muli	r10,r10,-4
 200e218:	2109883a 	add	r4,r4,r4
 200e21c:	2109883a 	add	r4,r4,r4
 200e220:	51cf883a 	add	r7,r10,r7
 200e224:	290b883a 	add	r5,r5,r4
 200e228:	1907883a 	add	r3,r3,r4
 200e22c:	38000626 	beq	r7,zero,200e248 <memmove+0x11c>
 200e230:	19cf883a 	add	r7,r3,r7
 200e234:	29800003 	ldbu	r6,0(r5)
 200e238:	18c00044 	addi	r3,r3,1
 200e23c:	29400044 	addi	r5,r5,1
 200e240:	19bfffc5 	stb	r6,-1(r3)
 200e244:	19fffb1e 	bne	r3,r7,200e234 <memmove+0x108>
 200e248:	f800283a 	ret
 200e24c:	1007883a 	mov	r3,r2
 200e250:	003ff606 	br	200e22c <memmove+0x100>

0200e254 <_Balloc>:
 200e254:	20801317 	ldw	r2,76(r4)
 200e258:	defffc04 	addi	sp,sp,-16
 200e25c:	dc400115 	stw	r17,4(sp)
 200e260:	dc000015 	stw	r16,0(sp)
 200e264:	dfc00315 	stw	ra,12(sp)
 200e268:	dc800215 	stw	r18,8(sp)
 200e26c:	2023883a 	mov	r17,r4
 200e270:	2821883a 	mov	r16,r5
 200e274:	10000f26 	beq	r2,zero,200e2b4 <_Balloc+0x60>
 200e278:	8407883a 	add	r3,r16,r16
 200e27c:	18c7883a 	add	r3,r3,r3
 200e280:	10c7883a 	add	r3,r2,r3
 200e284:	18800017 	ldw	r2,0(r3)
 200e288:	10001126 	beq	r2,zero,200e2d0 <_Balloc+0x7c>
 200e28c:	11000017 	ldw	r4,0(r2)
 200e290:	19000015 	stw	r4,0(r3)
 200e294:	10000415 	stw	zero,16(r2)
 200e298:	10000315 	stw	zero,12(r2)
 200e29c:	dfc00317 	ldw	ra,12(sp)
 200e2a0:	dc800217 	ldw	r18,8(sp)
 200e2a4:	dc400117 	ldw	r17,4(sp)
 200e2a8:	dc000017 	ldw	r16,0(sp)
 200e2ac:	dec00404 	addi	sp,sp,16
 200e2b0:	f800283a 	ret
 200e2b4:	01400104 	movi	r5,4
 200e2b8:	01800404 	movi	r6,16
 200e2bc:	200fa800 	call	200fa80 <_calloc_r>
 200e2c0:	88801315 	stw	r2,76(r17)
 200e2c4:	103fec1e 	bne	r2,zero,200e278 <_Balloc+0x24>
 200e2c8:	0005883a 	mov	r2,zero
 200e2cc:	003ff306 	br	200e29c <_Balloc+0x48>
 200e2d0:	01400044 	movi	r5,1
 200e2d4:	2c24983a 	sll	r18,r5,r16
 200e2d8:	8809883a 	mov	r4,r17
 200e2dc:	91800144 	addi	r6,r18,5
 200e2e0:	318d883a 	add	r6,r6,r6
 200e2e4:	318d883a 	add	r6,r6,r6
 200e2e8:	200fa800 	call	200fa80 <_calloc_r>
 200e2ec:	103ff626 	beq	r2,zero,200e2c8 <_Balloc+0x74>
 200e2f0:	14000115 	stw	r16,4(r2)
 200e2f4:	14800215 	stw	r18,8(r2)
 200e2f8:	003fe606 	br	200e294 <_Balloc+0x40>

0200e2fc <_Bfree>:
 200e2fc:	28000826 	beq	r5,zero,200e320 <_Bfree+0x24>
 200e300:	28c00117 	ldw	r3,4(r5)
 200e304:	20801317 	ldw	r2,76(r4)
 200e308:	18c7883a 	add	r3,r3,r3
 200e30c:	18c7883a 	add	r3,r3,r3
 200e310:	10c5883a 	add	r2,r2,r3
 200e314:	10c00017 	ldw	r3,0(r2)
 200e318:	28c00015 	stw	r3,0(r5)
 200e31c:	11400015 	stw	r5,0(r2)
 200e320:	f800283a 	ret

0200e324 <__multadd>:
 200e324:	defffa04 	addi	sp,sp,-24
 200e328:	dc000115 	stw	r16,4(sp)
 200e32c:	2c000417 	ldw	r16,16(r5)
 200e330:	dc800315 	stw	r18,12(sp)
 200e334:	dc400215 	stw	r17,8(sp)
 200e338:	dfc00515 	stw	ra,20(sp)
 200e33c:	dcc00415 	stw	r19,16(sp)
 200e340:	2823883a 	mov	r17,r5
 200e344:	2025883a 	mov	r18,r4
 200e348:	28c00504 	addi	r3,r5,20
 200e34c:	0011883a 	mov	r8,zero
 200e350:	1a800017 	ldw	r10,0(r3)
 200e354:	18c00104 	addi	r3,r3,4
 200e358:	42000044 	addi	r8,r8,1
 200e35c:	527fffcc 	andi	r9,r10,65535
 200e360:	4993383a 	mul	r9,r9,r6
 200e364:	5014d43a 	srli	r10,r10,16
 200e368:	49d3883a 	add	r9,r9,r7
 200e36c:	480ed43a 	srli	r7,r9,16
 200e370:	5195383a 	mul	r10,r10,r6
 200e374:	4a7fffcc 	andi	r9,r9,65535
 200e378:	3a8f883a 	add	r7,r7,r10
 200e37c:	3814943a 	slli	r10,r7,16
 200e380:	380ed43a 	srli	r7,r7,16
 200e384:	5253883a 	add	r9,r10,r9
 200e388:	1a7fff15 	stw	r9,-4(r3)
 200e38c:	443ff016 	blt	r8,r16,200e350 <__multadd+0x2c>
 200e390:	38000926 	beq	r7,zero,200e3b8 <__multadd+0x94>
 200e394:	88800217 	ldw	r2,8(r17)
 200e398:	80800f0e 	bge	r16,r2,200e3d8 <__multadd+0xb4>
 200e39c:	80800144 	addi	r2,r16,5
 200e3a0:	1085883a 	add	r2,r2,r2
 200e3a4:	1085883a 	add	r2,r2,r2
 200e3a8:	8885883a 	add	r2,r17,r2
 200e3ac:	84000044 	addi	r16,r16,1
 200e3b0:	11c00015 	stw	r7,0(r2)
 200e3b4:	8c000415 	stw	r16,16(r17)
 200e3b8:	8805883a 	mov	r2,r17
 200e3bc:	dfc00517 	ldw	ra,20(sp)
 200e3c0:	dcc00417 	ldw	r19,16(sp)
 200e3c4:	dc800317 	ldw	r18,12(sp)
 200e3c8:	dc400217 	ldw	r17,8(sp)
 200e3cc:	dc000117 	ldw	r16,4(sp)
 200e3d0:	dec00604 	addi	sp,sp,24
 200e3d4:	f800283a 	ret
 200e3d8:	89400117 	ldw	r5,4(r17)
 200e3dc:	9009883a 	mov	r4,r18
 200e3e0:	d9c00015 	stw	r7,0(sp)
 200e3e4:	29400044 	addi	r5,r5,1
 200e3e8:	200e2540 	call	200e254 <_Balloc>
 200e3ec:	89800417 	ldw	r6,16(r17)
 200e3f0:	89400304 	addi	r5,r17,12
 200e3f4:	11000304 	addi	r4,r2,12
 200e3f8:	31800084 	addi	r6,r6,2
 200e3fc:	318d883a 	add	r6,r6,r6
 200e400:	318d883a 	add	r6,r6,r6
 200e404:	1027883a 	mov	r19,r2
 200e408:	20090800 	call	2009080 <memcpy>
 200e40c:	88c00117 	ldw	r3,4(r17)
 200e410:	90801317 	ldw	r2,76(r18)
 200e414:	d9c00017 	ldw	r7,0(sp)
 200e418:	18c7883a 	add	r3,r3,r3
 200e41c:	18c7883a 	add	r3,r3,r3
 200e420:	10c5883a 	add	r2,r2,r3
 200e424:	10c00017 	ldw	r3,0(r2)
 200e428:	88c00015 	stw	r3,0(r17)
 200e42c:	14400015 	stw	r17,0(r2)
 200e430:	9823883a 	mov	r17,r19
 200e434:	003fd906 	br	200e39c <__multadd+0x78>

0200e438 <__s2b>:
 200e438:	defff904 	addi	sp,sp,-28
 200e43c:	dd000415 	stw	r20,16(sp)
 200e440:	dc400115 	stw	r17,4(sp)
 200e444:	2829883a 	mov	r20,r5
 200e448:	2023883a 	mov	r17,r4
 200e44c:	01400244 	movi	r5,9
 200e450:	39000204 	addi	r4,r7,8
 200e454:	dcc00315 	stw	r19,12(sp)
 200e458:	dc800215 	stw	r18,8(sp)
 200e45c:	dfc00615 	stw	ra,24(sp)
 200e460:	dd400515 	stw	r21,20(sp)
 200e464:	dc000015 	stw	r16,0(sp)
 200e468:	3825883a 	mov	r18,r7
 200e46c:	3027883a 	mov	r19,r6
 200e470:	200827c0 	call	200827c <__divsi3>
 200e474:	00c00044 	movi	r3,1
 200e478:	000b883a 	mov	r5,zero
 200e47c:	1880030e 	bge	r3,r2,200e48c <__s2b+0x54>
 200e480:	18c7883a 	add	r3,r3,r3
 200e484:	29400044 	addi	r5,r5,1
 200e488:	18bffd16 	blt	r3,r2,200e480 <__s2b+0x48>
 200e48c:	8809883a 	mov	r4,r17
 200e490:	200e2540 	call	200e254 <_Balloc>
 200e494:	d8c00717 	ldw	r3,28(sp)
 200e498:	10c00515 	stw	r3,20(r2)
 200e49c:	00c00044 	movi	r3,1
 200e4a0:	10c00415 	stw	r3,16(r2)
 200e4a4:	00c00244 	movi	r3,9
 200e4a8:	1cc0210e 	bge	r3,r19,200e530 <__s2b+0xf8>
 200e4ac:	a0eb883a 	add	r21,r20,r3
 200e4b0:	a821883a 	mov	r16,r21
 200e4b4:	a4e9883a 	add	r20,r20,r19
 200e4b8:	81c00007 	ldb	r7,0(r16)
 200e4bc:	8809883a 	mov	r4,r17
 200e4c0:	84000044 	addi	r16,r16,1
 200e4c4:	100b883a 	mov	r5,r2
 200e4c8:	01800284 	movi	r6,10
 200e4cc:	39fff404 	addi	r7,r7,-48
 200e4d0:	200e3240 	call	200e324 <__multadd>
 200e4d4:	853ff81e 	bne	r16,r20,200e4b8 <__s2b+0x80>
 200e4d8:	ace1883a 	add	r16,r21,r19
 200e4dc:	843ffe04 	addi	r16,r16,-8
 200e4e0:	9c800a0e 	bge	r19,r18,200e50c <__s2b+0xd4>
 200e4e4:	94e5c83a 	sub	r18,r18,r19
 200e4e8:	84a5883a 	add	r18,r16,r18
 200e4ec:	81c00007 	ldb	r7,0(r16)
 200e4f0:	8809883a 	mov	r4,r17
 200e4f4:	84000044 	addi	r16,r16,1
 200e4f8:	100b883a 	mov	r5,r2
 200e4fc:	01800284 	movi	r6,10
 200e500:	39fff404 	addi	r7,r7,-48
 200e504:	200e3240 	call	200e324 <__multadd>
 200e508:	84bff81e 	bne	r16,r18,200e4ec <__s2b+0xb4>
 200e50c:	dfc00617 	ldw	ra,24(sp)
 200e510:	dd400517 	ldw	r21,20(sp)
 200e514:	dd000417 	ldw	r20,16(sp)
 200e518:	dcc00317 	ldw	r19,12(sp)
 200e51c:	dc800217 	ldw	r18,8(sp)
 200e520:	dc400117 	ldw	r17,4(sp)
 200e524:	dc000017 	ldw	r16,0(sp)
 200e528:	dec00704 	addi	sp,sp,28
 200e52c:	f800283a 	ret
 200e530:	a4000284 	addi	r16,r20,10
 200e534:	1827883a 	mov	r19,r3
 200e538:	003fe906 	br	200e4e0 <__s2b+0xa8>

0200e53c <__hi0bits>:
 200e53c:	20bfffec 	andhi	r2,r4,65535
 200e540:	1000141e 	bne	r2,zero,200e594 <__hi0bits+0x58>
 200e544:	2008943a 	slli	r4,r4,16
 200e548:	00800404 	movi	r2,16
 200e54c:	20ffc02c 	andhi	r3,r4,65280
 200e550:	1800021e 	bne	r3,zero,200e55c <__hi0bits+0x20>
 200e554:	2008923a 	slli	r4,r4,8
 200e558:	10800204 	addi	r2,r2,8
 200e55c:	20fc002c 	andhi	r3,r4,61440
 200e560:	1800021e 	bne	r3,zero,200e56c <__hi0bits+0x30>
 200e564:	2008913a 	slli	r4,r4,4
 200e568:	10800104 	addi	r2,r2,4
 200e56c:	20f0002c 	andhi	r3,r4,49152
 200e570:	1800031e 	bne	r3,zero,200e580 <__hi0bits+0x44>
 200e574:	2109883a 	add	r4,r4,r4
 200e578:	10800084 	addi	r2,r2,2
 200e57c:	2109883a 	add	r4,r4,r4
 200e580:	20000316 	blt	r4,zero,200e590 <__hi0bits+0x54>
 200e584:	2110002c 	andhi	r4,r4,16384
 200e588:	2000041e 	bne	r4,zero,200e59c <__hi0bits+0x60>
 200e58c:	00800804 	movi	r2,32
 200e590:	f800283a 	ret
 200e594:	0005883a 	mov	r2,zero
 200e598:	003fec06 	br	200e54c <__hi0bits+0x10>
 200e59c:	10800044 	addi	r2,r2,1
 200e5a0:	f800283a 	ret

0200e5a4 <__lo0bits>:
 200e5a4:	20c00017 	ldw	r3,0(r4)
 200e5a8:	188001cc 	andi	r2,r3,7
 200e5ac:	10000826 	beq	r2,zero,200e5d0 <__lo0bits+0x2c>
 200e5b0:	1880004c 	andi	r2,r3,1
 200e5b4:	1000211e 	bne	r2,zero,200e63c <__lo0bits+0x98>
 200e5b8:	1880008c 	andi	r2,r3,2
 200e5bc:	1000211e 	bne	r2,zero,200e644 <__lo0bits+0xa0>
 200e5c0:	1806d0ba 	srli	r3,r3,2
 200e5c4:	00800084 	movi	r2,2
 200e5c8:	20c00015 	stw	r3,0(r4)
 200e5cc:	f800283a 	ret
 200e5d0:	18bfffcc 	andi	r2,r3,65535
 200e5d4:	10001326 	beq	r2,zero,200e624 <__lo0bits+0x80>
 200e5d8:	0005883a 	mov	r2,zero
 200e5dc:	19403fcc 	andi	r5,r3,255
 200e5e0:	2800021e 	bne	r5,zero,200e5ec <__lo0bits+0x48>
 200e5e4:	1806d23a 	srli	r3,r3,8
 200e5e8:	10800204 	addi	r2,r2,8
 200e5ec:	194003cc 	andi	r5,r3,15
 200e5f0:	2800021e 	bne	r5,zero,200e5fc <__lo0bits+0x58>
 200e5f4:	1806d13a 	srli	r3,r3,4
 200e5f8:	10800104 	addi	r2,r2,4
 200e5fc:	194000cc 	andi	r5,r3,3
 200e600:	2800021e 	bne	r5,zero,200e60c <__lo0bits+0x68>
 200e604:	1806d0ba 	srli	r3,r3,2
 200e608:	10800084 	addi	r2,r2,2
 200e60c:	1940004c 	andi	r5,r3,1
 200e610:	2800081e 	bne	r5,zero,200e634 <__lo0bits+0x90>
 200e614:	1806d07a 	srli	r3,r3,1
 200e618:	1800051e 	bne	r3,zero,200e630 <__lo0bits+0x8c>
 200e61c:	00800804 	movi	r2,32
 200e620:	f800283a 	ret
 200e624:	1806d43a 	srli	r3,r3,16
 200e628:	00800404 	movi	r2,16
 200e62c:	003feb06 	br	200e5dc <__lo0bits+0x38>
 200e630:	10800044 	addi	r2,r2,1
 200e634:	20c00015 	stw	r3,0(r4)
 200e638:	f800283a 	ret
 200e63c:	0005883a 	mov	r2,zero
 200e640:	f800283a 	ret
 200e644:	1806d07a 	srli	r3,r3,1
 200e648:	00800044 	movi	r2,1
 200e64c:	20c00015 	stw	r3,0(r4)
 200e650:	f800283a 	ret

0200e654 <__i2b>:
 200e654:	defffd04 	addi	sp,sp,-12
 200e658:	dc000015 	stw	r16,0(sp)
 200e65c:	04000044 	movi	r16,1
 200e660:	dc400115 	stw	r17,4(sp)
 200e664:	2823883a 	mov	r17,r5
 200e668:	800b883a 	mov	r5,r16
 200e66c:	dfc00215 	stw	ra,8(sp)
 200e670:	200e2540 	call	200e254 <_Balloc>
 200e674:	14400515 	stw	r17,20(r2)
 200e678:	14000415 	stw	r16,16(r2)
 200e67c:	dfc00217 	ldw	ra,8(sp)
 200e680:	dc400117 	ldw	r17,4(sp)
 200e684:	dc000017 	ldw	r16,0(sp)
 200e688:	dec00304 	addi	sp,sp,12
 200e68c:	f800283a 	ret

0200e690 <__multiply>:
 200e690:	defffa04 	addi	sp,sp,-24
 200e694:	dcc00315 	stw	r19,12(sp)
 200e698:	dc400115 	stw	r17,4(sp)
 200e69c:	34c00417 	ldw	r19,16(r6)
 200e6a0:	2c400417 	ldw	r17,16(r5)
 200e6a4:	dd000415 	stw	r20,16(sp)
 200e6a8:	dc800215 	stw	r18,8(sp)
 200e6ac:	dfc00515 	stw	ra,20(sp)
 200e6b0:	dc000015 	stw	r16,0(sp)
 200e6b4:	2825883a 	mov	r18,r5
 200e6b8:	3029883a 	mov	r20,r6
 200e6bc:	8cc0050e 	bge	r17,r19,200e6d4 <__multiply+0x44>
 200e6c0:	8807883a 	mov	r3,r17
 200e6c4:	3025883a 	mov	r18,r6
 200e6c8:	9823883a 	mov	r17,r19
 200e6cc:	2829883a 	mov	r20,r5
 200e6d0:	1827883a 	mov	r19,r3
 200e6d4:	90800217 	ldw	r2,8(r18)
 200e6d8:	8ce1883a 	add	r16,r17,r19
 200e6dc:	91400117 	ldw	r5,4(r18)
 200e6e0:	1400010e 	bge	r2,r16,200e6e8 <__multiply+0x58>
 200e6e4:	29400044 	addi	r5,r5,1
 200e6e8:	200e2540 	call	200e254 <_Balloc>
 200e6ec:	83c00144 	addi	r15,r16,5
 200e6f0:	7bdf883a 	add	r15,r15,r15
 200e6f4:	7bdf883a 	add	r15,r15,r15
 200e6f8:	13800504 	addi	r14,r2,20
 200e6fc:	13df883a 	add	r15,r2,r15
 200e700:	7007883a 	mov	r3,r14
 200e704:	73c0032e 	bgeu	r14,r15,200e714 <__multiply+0x84>
 200e708:	18000015 	stw	zero,0(r3)
 200e70c:	18c00104 	addi	r3,r3,4
 200e710:	1bfffd36 	bltu	r3,r15,200e708 <__multiply+0x78>
 200e714:	99800144 	addi	r6,r19,5
 200e718:	8b000144 	addi	r12,r17,5
 200e71c:	318d883a 	add	r6,r6,r6
 200e720:	6319883a 	add	r12,r12,r12
 200e724:	318d883a 	add	r6,r6,r6
 200e728:	6319883a 	add	r12,r12,r12
 200e72c:	a3400504 	addi	r13,r20,20
 200e730:	a18d883a 	add	r6,r20,r6
 200e734:	94400504 	addi	r17,r18,20
 200e738:	9319883a 	add	r12,r18,r12
 200e73c:	6980392e 	bgeu	r13,r6,200e824 <__multiply+0x194>
 200e740:	6a800017 	ldw	r10,0(r13)
 200e744:	52ffffcc 	andi	r11,r10,65535
 200e748:	58001826 	beq	r11,zero,200e7ac <__multiply+0x11c>
 200e74c:	7007883a 	mov	r3,r14
 200e750:	8809883a 	mov	r4,r17
 200e754:	000b883a 	mov	r5,zero
 200e758:	22400017 	ldw	r9,0(r4)
 200e75c:	1a000017 	ldw	r8,0(r3)
 200e760:	21000104 	addi	r4,r4,4
 200e764:	49ffffcc 	andi	r7,r9,65535
 200e768:	3acf383a 	mul	r7,r7,r11
 200e76c:	4812d43a 	srli	r9,r9,16
 200e770:	42bfffcc 	andi	r10,r8,65535
 200e774:	3a8f883a 	add	r7,r7,r10
 200e778:	394f883a 	add	r7,r7,r5
 200e77c:	4010d43a 	srli	r8,r8,16
 200e780:	4acb383a 	mul	r5,r9,r11
 200e784:	3814d43a 	srli	r10,r7,16
 200e788:	19c0000d 	sth	r7,0(r3)
 200e78c:	2a0b883a 	add	r5,r5,r8
 200e790:	2a8b883a 	add	r5,r5,r10
 200e794:	1940008d 	sth	r5,2(r3)
 200e798:	280ad43a 	srli	r5,r5,16
 200e79c:	18c00104 	addi	r3,r3,4
 200e7a0:	233fed36 	bltu	r4,r12,200e758 <__multiply+0xc8>
 200e7a4:	19400015 	stw	r5,0(r3)
 200e7a8:	6a800017 	ldw	r10,0(r13)
 200e7ac:	5014d43a 	srli	r10,r10,16
 200e7b0:	50001926 	beq	r10,zero,200e818 <__multiply+0x188>
 200e7b4:	71400017 	ldw	r5,0(r14)
 200e7b8:	7007883a 	mov	r3,r14
 200e7bc:	8809883a 	mov	r4,r17
 200e7c0:	280f883a 	mov	r7,r5
 200e7c4:	0017883a 	mov	r11,zero
 200e7c8:	22400017 	ldw	r9,0(r4)
 200e7cc:	380ed43a 	srli	r7,r7,16
 200e7d0:	1940000d 	sth	r5,0(r3)
 200e7d4:	4a3fffcc 	andi	r8,r9,65535
 200e7d8:	4291383a 	mul	r8,r8,r10
 200e7dc:	4812d43a 	srli	r9,r9,16
 200e7e0:	18c00104 	addi	r3,r3,4
 200e7e4:	41d1883a 	add	r8,r8,r7
 200e7e8:	19c00017 	ldw	r7,0(r3)
 200e7ec:	42d1883a 	add	r8,r8,r11
 200e7f0:	4a93383a 	mul	r9,r9,r10
 200e7f4:	1a3fff8d 	sth	r8,-2(r3)
 200e7f8:	4010d43a 	srli	r8,r8,16
 200e7fc:	397fffcc 	andi	r5,r7,65535
 200e800:	2a4b883a 	add	r5,r5,r9
 200e804:	2a0b883a 	add	r5,r5,r8
 200e808:	21000104 	addi	r4,r4,4
 200e80c:	2816d43a 	srli	r11,r5,16
 200e810:	233fed36 	bltu	r4,r12,200e7c8 <__multiply+0x138>
 200e814:	19400015 	stw	r5,0(r3)
 200e818:	6b400104 	addi	r13,r13,4
 200e81c:	73800104 	addi	r14,r14,4
 200e820:	69bfc736 	bltu	r13,r6,200e740 <__multiply+0xb0>
 200e824:	0400090e 	bge	zero,r16,200e84c <__multiply+0x1bc>
 200e828:	78ffff17 	ldw	r3,-4(r15)
 200e82c:	7bffff04 	addi	r15,r15,-4
 200e830:	18000326 	beq	r3,zero,200e840 <__multiply+0x1b0>
 200e834:	00000506 	br	200e84c <__multiply+0x1bc>
 200e838:	78c00017 	ldw	r3,0(r15)
 200e83c:	1800031e 	bne	r3,zero,200e84c <__multiply+0x1bc>
 200e840:	843fffc4 	addi	r16,r16,-1
 200e844:	7bffff04 	addi	r15,r15,-4
 200e848:	803ffb1e 	bne	r16,zero,200e838 <__multiply+0x1a8>
 200e84c:	14000415 	stw	r16,16(r2)
 200e850:	dfc00517 	ldw	ra,20(sp)
 200e854:	dd000417 	ldw	r20,16(sp)
 200e858:	dcc00317 	ldw	r19,12(sp)
 200e85c:	dc800217 	ldw	r18,8(sp)
 200e860:	dc400117 	ldw	r17,4(sp)
 200e864:	dc000017 	ldw	r16,0(sp)
 200e868:	dec00604 	addi	sp,sp,24
 200e86c:	f800283a 	ret

0200e870 <__pow5mult>:
 200e870:	defffb04 	addi	sp,sp,-20
 200e874:	dcc00315 	stw	r19,12(sp)
 200e878:	dc800215 	stw	r18,8(sp)
 200e87c:	dc000015 	stw	r16,0(sp)
 200e880:	dfc00415 	stw	ra,16(sp)
 200e884:	dc400115 	stw	r17,4(sp)
 200e888:	308000cc 	andi	r2,r6,3
 200e88c:	3021883a 	mov	r16,r6
 200e890:	2027883a 	mov	r19,r4
 200e894:	2825883a 	mov	r18,r5
 200e898:	10002e1e 	bne	r2,zero,200e954 <__pow5mult+0xe4>
 200e89c:	8021d0ba 	srai	r16,r16,2
 200e8a0:	80001a26 	beq	r16,zero,200e90c <__pow5mult+0x9c>
 200e8a4:	9c401217 	ldw	r17,72(r19)
 200e8a8:	8800061e 	bne	r17,zero,200e8c4 <__pow5mult+0x54>
 200e8ac:	00003406 	br	200e980 <__pow5mult+0x110>
 200e8b0:	8021d07a 	srai	r16,r16,1
 200e8b4:	80001526 	beq	r16,zero,200e90c <__pow5mult+0x9c>
 200e8b8:	88c00017 	ldw	r3,0(r17)
 200e8bc:	18001b26 	beq	r3,zero,200e92c <__pow5mult+0xbc>
 200e8c0:	1823883a 	mov	r17,r3
 200e8c4:	80c0004c 	andi	r3,r16,1
 200e8c8:	183ff926 	beq	r3,zero,200e8b0 <__pow5mult+0x40>
 200e8cc:	900b883a 	mov	r5,r18
 200e8d0:	880d883a 	mov	r6,r17
 200e8d4:	9809883a 	mov	r4,r19
 200e8d8:	200e6900 	call	200e690 <__multiply>
 200e8dc:	90001b26 	beq	r18,zero,200e94c <__pow5mult+0xdc>
 200e8e0:	91000117 	ldw	r4,4(r18)
 200e8e4:	98c01317 	ldw	r3,76(r19)
 200e8e8:	8021d07a 	srai	r16,r16,1
 200e8ec:	2109883a 	add	r4,r4,r4
 200e8f0:	2109883a 	add	r4,r4,r4
 200e8f4:	1907883a 	add	r3,r3,r4
 200e8f8:	19000017 	ldw	r4,0(r3)
 200e8fc:	91000015 	stw	r4,0(r18)
 200e900:	1c800015 	stw	r18,0(r3)
 200e904:	1025883a 	mov	r18,r2
 200e908:	803feb1e 	bne	r16,zero,200e8b8 <__pow5mult+0x48>
 200e90c:	9005883a 	mov	r2,r18
 200e910:	dfc00417 	ldw	ra,16(sp)
 200e914:	dcc00317 	ldw	r19,12(sp)
 200e918:	dc800217 	ldw	r18,8(sp)
 200e91c:	dc400117 	ldw	r17,4(sp)
 200e920:	dc000017 	ldw	r16,0(sp)
 200e924:	dec00504 	addi	sp,sp,20
 200e928:	f800283a 	ret
 200e92c:	880b883a 	mov	r5,r17
 200e930:	880d883a 	mov	r6,r17
 200e934:	9809883a 	mov	r4,r19
 200e938:	200e6900 	call	200e690 <__multiply>
 200e93c:	88800015 	stw	r2,0(r17)
 200e940:	10000015 	stw	zero,0(r2)
 200e944:	1023883a 	mov	r17,r2
 200e948:	003fde06 	br	200e8c4 <__pow5mult+0x54>
 200e94c:	1025883a 	mov	r18,r2
 200e950:	003fd706 	br	200e8b0 <__pow5mult+0x40>
 200e954:	10bfffc4 	addi	r2,r2,-1
 200e958:	1085883a 	add	r2,r2,r2
 200e95c:	00c080f4 	movhi	r3,515
 200e960:	18fa6c04 	addi	r3,r3,-5712
 200e964:	1085883a 	add	r2,r2,r2
 200e968:	1885883a 	add	r2,r3,r2
 200e96c:	11800017 	ldw	r6,0(r2)
 200e970:	000f883a 	mov	r7,zero
 200e974:	200e3240 	call	200e324 <__multadd>
 200e978:	1025883a 	mov	r18,r2
 200e97c:	003fc706 	br	200e89c <__pow5mult+0x2c>
 200e980:	9809883a 	mov	r4,r19
 200e984:	01409c44 	movi	r5,625
 200e988:	200e6540 	call	200e654 <__i2b>
 200e98c:	98801215 	stw	r2,72(r19)
 200e990:	1023883a 	mov	r17,r2
 200e994:	10000015 	stw	zero,0(r2)
 200e998:	003fca06 	br	200e8c4 <__pow5mult+0x54>

0200e99c <__lshift>:
 200e99c:	defff904 	addi	sp,sp,-28
 200e9a0:	dd400515 	stw	r21,20(sp)
 200e9a4:	dc400115 	stw	r17,4(sp)
 200e9a8:	2d400417 	ldw	r21,16(r5)
 200e9ac:	3023d17a 	srai	r17,r6,5
 200e9b0:	28800217 	ldw	r2,8(r5)
 200e9b4:	dd000415 	stw	r20,16(sp)
 200e9b8:	8d6b883a 	add	r21,r17,r21
 200e9bc:	dcc00315 	stw	r19,12(sp)
 200e9c0:	dc800215 	stw	r18,8(sp)
 200e9c4:	dc000015 	stw	r16,0(sp)
 200e9c8:	dfc00615 	stw	ra,24(sp)
 200e9cc:	ac000044 	addi	r16,r21,1
 200e9d0:	2825883a 	mov	r18,r5
 200e9d4:	3029883a 	mov	r20,r6
 200e9d8:	2027883a 	mov	r19,r4
 200e9dc:	29400117 	ldw	r5,4(r5)
 200e9e0:	1400030e 	bge	r2,r16,200e9f0 <__lshift+0x54>
 200e9e4:	1085883a 	add	r2,r2,r2
 200e9e8:	29400044 	addi	r5,r5,1
 200e9ec:	143ffd16 	blt	r2,r16,200e9e4 <__lshift+0x48>
 200e9f0:	9809883a 	mov	r4,r19
 200e9f4:	200e2540 	call	200e254 <_Balloc>
 200e9f8:	10c00504 	addi	r3,r2,20
 200e9fc:	0440090e 	bge	zero,r17,200ea24 <__lshift+0x88>
 200ea00:	000f883a 	mov	r7,zero
 200ea04:	18000015 	stw	zero,0(r3)
 200ea08:	39c00044 	addi	r7,r7,1
 200ea0c:	18c00104 	addi	r3,r3,4
 200ea10:	3c7ffc1e 	bne	r7,r17,200ea04 <__lshift+0x68>
 200ea14:	38c00144 	addi	r3,r7,5
 200ea18:	18c7883a 	add	r3,r3,r3
 200ea1c:	18c7883a 	add	r3,r3,r3
 200ea20:	10c7883a 	add	r3,r2,r3
 200ea24:	92000417 	ldw	r8,16(r18)
 200ea28:	a18007cc 	andi	r6,r20,31
 200ea2c:	91c00504 	addi	r7,r18,20
 200ea30:	42000144 	addi	r8,r8,5
 200ea34:	4211883a 	add	r8,r8,r8
 200ea38:	4211883a 	add	r8,r8,r8
 200ea3c:	9211883a 	add	r8,r18,r8
 200ea40:	30002226 	beq	r6,zero,200eacc <__lshift+0x130>
 200ea44:	02800804 	movi	r10,32
 200ea48:	5195c83a 	sub	r10,r10,r6
 200ea4c:	000b883a 	mov	r5,zero
 200ea50:	3a400017 	ldw	r9,0(r7)
 200ea54:	18c00104 	addi	r3,r3,4
 200ea58:	39c00104 	addi	r7,r7,4
 200ea5c:	4992983a 	sll	r9,r9,r6
 200ea60:	2a4ab03a 	or	r5,r5,r9
 200ea64:	197fff15 	stw	r5,-4(r3)
 200ea68:	397fff17 	ldw	r5,-4(r7)
 200ea6c:	2a8ad83a 	srl	r5,r5,r10
 200ea70:	3a3ff736 	bltu	r7,r8,200ea50 <__lshift+0xb4>
 200ea74:	19400015 	stw	r5,0(r3)
 200ea78:	28000126 	beq	r5,zero,200ea80 <__lshift+0xe4>
 200ea7c:	ac000084 	addi	r16,r21,2
 200ea80:	91000117 	ldw	r4,4(r18)
 200ea84:	98c01317 	ldw	r3,76(r19)
 200ea88:	843fffc4 	addi	r16,r16,-1
 200ea8c:	2109883a 	add	r4,r4,r4
 200ea90:	2109883a 	add	r4,r4,r4
 200ea94:	1907883a 	add	r3,r3,r4
 200ea98:	19000017 	ldw	r4,0(r3)
 200ea9c:	14000415 	stw	r16,16(r2)
 200eaa0:	91000015 	stw	r4,0(r18)
 200eaa4:	1c800015 	stw	r18,0(r3)
 200eaa8:	dfc00617 	ldw	ra,24(sp)
 200eaac:	dd400517 	ldw	r21,20(sp)
 200eab0:	dd000417 	ldw	r20,16(sp)
 200eab4:	dcc00317 	ldw	r19,12(sp)
 200eab8:	dc800217 	ldw	r18,8(sp)
 200eabc:	dc400117 	ldw	r17,4(sp)
 200eac0:	dc000017 	ldw	r16,0(sp)
 200eac4:	dec00704 	addi	sp,sp,28
 200eac8:	f800283a 	ret
 200eacc:	39400017 	ldw	r5,0(r7)
 200ead0:	18c00104 	addi	r3,r3,4
 200ead4:	39c00104 	addi	r7,r7,4
 200ead8:	197fff15 	stw	r5,-4(r3)
 200eadc:	3a3fe82e 	bgeu	r7,r8,200ea80 <__lshift+0xe4>
 200eae0:	39400017 	ldw	r5,0(r7)
 200eae4:	18c00104 	addi	r3,r3,4
 200eae8:	39c00104 	addi	r7,r7,4
 200eaec:	197fff15 	stw	r5,-4(r3)
 200eaf0:	3a3ff636 	bltu	r7,r8,200eacc <__lshift+0x130>
 200eaf4:	003fe206 	br	200ea80 <__lshift+0xe4>

0200eaf8 <__mcmp>:
 200eaf8:	20800417 	ldw	r2,16(r4)
 200eafc:	28c00417 	ldw	r3,16(r5)
 200eb00:	10c5c83a 	sub	r2,r2,r3
 200eb04:	10000f1e 	bne	r2,zero,200eb44 <__mcmp+0x4c>
 200eb08:	18c00144 	addi	r3,r3,5
 200eb0c:	18c7883a 	add	r3,r3,r3
 200eb10:	18c7883a 	add	r3,r3,r3
 200eb14:	21c00504 	addi	r7,r4,20
 200eb18:	28cb883a 	add	r5,r5,r3
 200eb1c:	20c9883a 	add	r4,r4,r3
 200eb20:	213fff04 	addi	r4,r4,-4
 200eb24:	297fff04 	addi	r5,r5,-4
 200eb28:	21800017 	ldw	r6,0(r4)
 200eb2c:	28c00017 	ldw	r3,0(r5)
 200eb30:	30c0021e 	bne	r6,r3,200eb3c <__mcmp+0x44>
 200eb34:	393ffa36 	bltu	r7,r4,200eb20 <__mcmp+0x28>
 200eb38:	f800283a 	ret
 200eb3c:	30c00236 	bltu	r6,r3,200eb48 <__mcmp+0x50>
 200eb40:	00800044 	movi	r2,1
 200eb44:	f800283a 	ret
 200eb48:	00bfffc4 	movi	r2,-1
 200eb4c:	f800283a 	ret

0200eb50 <__mdiff>:
 200eb50:	defffb04 	addi	sp,sp,-20
 200eb54:	dc000015 	stw	r16,0(sp)
 200eb58:	2821883a 	mov	r16,r5
 200eb5c:	dc800215 	stw	r18,8(sp)
 200eb60:	300b883a 	mov	r5,r6
 200eb64:	2025883a 	mov	r18,r4
 200eb68:	8009883a 	mov	r4,r16
 200eb6c:	dc400115 	stw	r17,4(sp)
 200eb70:	dfc00415 	stw	ra,16(sp)
 200eb74:	dcc00315 	stw	r19,12(sp)
 200eb78:	3023883a 	mov	r17,r6
 200eb7c:	200eaf80 	call	200eaf8 <__mcmp>
 200eb80:	10005026 	beq	r2,zero,200ecc4 <__mdiff+0x174>
 200eb84:	10004a16 	blt	r2,zero,200ecb0 <__mdiff+0x160>
 200eb88:	0027883a 	mov	r19,zero
 200eb8c:	81400117 	ldw	r5,4(r16)
 200eb90:	9009883a 	mov	r4,r18
 200eb94:	200e2540 	call	200e254 <_Balloc>
 200eb98:	82400417 	ldw	r9,16(r16)
 200eb9c:	89800417 	ldw	r6,16(r17)
 200eba0:	14c00315 	stw	r19,12(r2)
 200eba4:	4b800144 	addi	r14,r9,5
 200eba8:	31800144 	addi	r6,r6,5
 200ebac:	739d883a 	add	r14,r14,r14
 200ebb0:	318d883a 	add	r6,r6,r6
 200ebb4:	739d883a 	add	r14,r14,r14
 200ebb8:	318d883a 	add	r6,r6,r6
 200ebbc:	81c00504 	addi	r7,r16,20
 200ebc0:	839d883a 	add	r14,r16,r14
 200ebc4:	8a000504 	addi	r8,r17,20
 200ebc8:	898d883a 	add	r6,r17,r6
 200ebcc:	10c00504 	addi	r3,r2,20
 200ebd0:	0009883a 	mov	r4,zero
 200ebd4:	3b000017 	ldw	r12,0(r7)
 200ebd8:	42c00017 	ldw	r11,0(r8)
 200ebdc:	42000104 	addi	r8,r8,4
 200ebe0:	62bfffcc 	andi	r10,r12,65535
 200ebe4:	5b7fffcc 	andi	r13,r11,65535
 200ebe8:	5109883a 	add	r4,r10,r4
 200ebec:	2355c83a 	sub	r10,r4,r13
 200ebf0:	5816d43a 	srli	r11,r11,16
 200ebf4:	6008d43a 	srli	r4,r12,16
 200ebf8:	501bd43a 	srai	r13,r10,16
 200ebfc:	1a80000d 	sth	r10,0(r3)
 200ec00:	22c9c83a 	sub	r4,r4,r11
 200ec04:	2349883a 	add	r4,r4,r13
 200ec08:	1900008d 	sth	r4,2(r3)
 200ec0c:	39c00104 	addi	r7,r7,4
 200ec10:	2009d43a 	srai	r4,r4,16
 200ec14:	18c00104 	addi	r3,r3,4
 200ec18:	41bfee36 	bltu	r8,r6,200ebd4 <__mdiff+0x84>
 200ec1c:	180b883a 	mov	r5,r3
 200ec20:	3815883a 	mov	r10,r7
 200ec24:	3b80132e 	bgeu	r7,r14,200ec74 <__mdiff+0x124>
 200ec28:	3a000017 	ldw	r8,0(r7)
 200ec2c:	18c00104 	addi	r3,r3,4
 200ec30:	39c00104 	addi	r7,r7,4
 200ec34:	41bfffcc 	andi	r6,r8,65535
 200ec38:	310d883a 	add	r6,r6,r4
 200ec3c:	3009d43a 	srai	r4,r6,16
 200ec40:	4010d43a 	srli	r8,r8,16
 200ec44:	19bfff0d 	sth	r6,-4(r3)
 200ec48:	2209883a 	add	r4,r4,r8
 200ec4c:	193fff8d 	sth	r4,-2(r3)
 200ec50:	2009d43a 	srai	r4,r4,16
 200ec54:	3bbff436 	bltu	r7,r14,200ec28 <__mdiff+0xd8>
 200ec58:	0286303a 	nor	r3,zero,r10
 200ec5c:	1b87883a 	add	r3,r3,r14
 200ec60:	1806d0ba 	srli	r3,r3,2
 200ec64:	18c00044 	addi	r3,r3,1
 200ec68:	18c7883a 	add	r3,r3,r3
 200ec6c:	18c7883a 	add	r3,r3,r3
 200ec70:	28c7883a 	add	r3,r5,r3
 200ec74:	193fff17 	ldw	r4,-4(r3)
 200ec78:	18ffff04 	addi	r3,r3,-4
 200ec7c:	2000041e 	bne	r4,zero,200ec90 <__mdiff+0x140>
 200ec80:	18ffff04 	addi	r3,r3,-4
 200ec84:	19000017 	ldw	r4,0(r3)
 200ec88:	4a7fffc4 	addi	r9,r9,-1
 200ec8c:	203ffc26 	beq	r4,zero,200ec80 <__mdiff+0x130>
 200ec90:	12400415 	stw	r9,16(r2)
 200ec94:	dfc00417 	ldw	ra,16(sp)
 200ec98:	dcc00317 	ldw	r19,12(sp)
 200ec9c:	dc800217 	ldw	r18,8(sp)
 200eca0:	dc400117 	ldw	r17,4(sp)
 200eca4:	dc000017 	ldw	r16,0(sp)
 200eca8:	dec00504 	addi	sp,sp,20
 200ecac:	f800283a 	ret
 200ecb0:	8005883a 	mov	r2,r16
 200ecb4:	04c00044 	movi	r19,1
 200ecb8:	8821883a 	mov	r16,r17
 200ecbc:	1023883a 	mov	r17,r2
 200ecc0:	003fb206 	br	200eb8c <__mdiff+0x3c>
 200ecc4:	9009883a 	mov	r4,r18
 200ecc8:	000b883a 	mov	r5,zero
 200eccc:	200e2540 	call	200e254 <_Balloc>
 200ecd0:	00c00044 	movi	r3,1
 200ecd4:	10c00415 	stw	r3,16(r2)
 200ecd8:	10000515 	stw	zero,20(r2)
 200ecdc:	dfc00417 	ldw	ra,16(sp)
 200ece0:	dcc00317 	ldw	r19,12(sp)
 200ece4:	dc800217 	ldw	r18,8(sp)
 200ece8:	dc400117 	ldw	r17,4(sp)
 200ecec:	dc000017 	ldw	r16,0(sp)
 200ecf0:	dec00504 	addi	sp,sp,20
 200ecf4:	f800283a 	ret

0200ecf8 <__ulp>:
 200ecf8:	295ffc2c 	andhi	r5,r5,32752
 200ecfc:	00bf3034 	movhi	r2,64704
 200ed00:	2887883a 	add	r3,r5,r2
 200ed04:	00c0020e 	bge	zero,r3,200ed10 <__ulp+0x18>
 200ed08:	0005883a 	mov	r2,zero
 200ed0c:	f800283a 	ret
 200ed10:	00c7c83a 	sub	r3,zero,r3
 200ed14:	1805d53a 	srai	r2,r3,20
 200ed18:	00c004c4 	movi	r3,19
 200ed1c:	18800a0e 	bge	r3,r2,200ed48 <__ulp+0x50>
 200ed20:	01000c84 	movi	r4,50
 200ed24:	0007883a 	mov	r3,zero
 200ed28:	20800516 	blt	r4,r2,200ed40 <__ulp+0x48>
 200ed2c:	01000cc4 	movi	r4,51
 200ed30:	2085c83a 	sub	r2,r4,r2
 200ed34:	01000044 	movi	r4,1
 200ed38:	2084983a 	sll	r2,r4,r2
 200ed3c:	f800283a 	ret
 200ed40:	00800044 	movi	r2,1
 200ed44:	f800283a 	ret
 200ed48:	00c00234 	movhi	r3,8
 200ed4c:	1887d83a 	sra	r3,r3,r2
 200ed50:	0005883a 	mov	r2,zero
 200ed54:	f800283a 	ret

0200ed58 <__b2d>:
 200ed58:	defffa04 	addi	sp,sp,-24
 200ed5c:	dc000015 	stw	r16,0(sp)
 200ed60:	24000417 	ldw	r16,16(r4)
 200ed64:	dc400115 	stw	r17,4(sp)
 200ed68:	dcc00315 	stw	r19,12(sp)
 200ed6c:	84000144 	addi	r16,r16,5
 200ed70:	8421883a 	add	r16,r16,r16
 200ed74:	8421883a 	add	r16,r16,r16
 200ed78:	2421883a 	add	r16,r4,r16
 200ed7c:	847fff17 	ldw	r17,-4(r16)
 200ed80:	24c00504 	addi	r19,r4,20
 200ed84:	dd000415 	stw	r20,16(sp)
 200ed88:	8809883a 	mov	r4,r17
 200ed8c:	dc800215 	stw	r18,8(sp)
 200ed90:	2829883a 	mov	r20,r5
 200ed94:	dfc00515 	stw	ra,20(sp)
 200ed98:	200e53c0 	call	200e53c <__hi0bits>
 200ed9c:	00c00804 	movi	r3,32
 200eda0:	1887c83a 	sub	r3,r3,r2
 200eda4:	a0c00015 	stw	r3,0(r20)
 200eda8:	00c00284 	movi	r3,10
 200edac:	84bfff04 	addi	r18,r16,-4
 200edb0:	18801216 	blt	r3,r2,200edfc <__b2d+0xa4>
 200edb4:	010002c4 	movi	r4,11
 200edb8:	2089c83a 	sub	r4,r4,r2
 200edbc:	8906d83a 	srl	r3,r17,r4
 200edc0:	18cffc34 	orhi	r3,r3,16368
 200edc4:	9c80322e 	bgeu	r19,r18,200ee90 <__b2d+0x138>
 200edc8:	817ffe17 	ldw	r5,-8(r16)
 200edcc:	2908d83a 	srl	r4,r5,r4
 200edd0:	10800544 	addi	r2,r2,21
 200edd4:	88a2983a 	sll	r17,r17,r2
 200edd8:	2444b03a 	or	r2,r4,r17
 200eddc:	dfc00517 	ldw	ra,20(sp)
 200ede0:	dd000417 	ldw	r20,16(sp)
 200ede4:	dcc00317 	ldw	r19,12(sp)
 200ede8:	dc800217 	ldw	r18,8(sp)
 200edec:	dc400117 	ldw	r17,4(sp)
 200edf0:	dc000017 	ldw	r16,0(sp)
 200edf4:	dec00604 	addi	sp,sp,24
 200edf8:	f800283a 	ret
 200edfc:	9c801636 	bltu	r19,r18,200ee58 <__b2d+0x100>
 200ee00:	113ffd44 	addi	r4,r2,-11
 200ee04:	000b883a 	mov	r5,zero
 200ee08:	20001726 	beq	r4,zero,200ee68 <__b2d+0x110>
 200ee0c:	00c00ac4 	movi	r3,43
 200ee10:	1885c83a 	sub	r2,r3,r2
 200ee14:	8906983a 	sll	r3,r17,r4
 200ee18:	288cd83a 	srl	r6,r5,r2
 200ee1c:	18cffc34 	orhi	r3,r3,16368
 200ee20:	1986b03a 	or	r3,r3,r6
 200ee24:	9c801c2e 	bgeu	r19,r18,200ee98 <__b2d+0x140>
 200ee28:	91bfff17 	ldw	r6,-4(r18)
 200ee2c:	3084d83a 	srl	r2,r6,r2
 200ee30:	2908983a 	sll	r4,r5,r4
 200ee34:	1104b03a 	or	r2,r2,r4
 200ee38:	dfc00517 	ldw	ra,20(sp)
 200ee3c:	dd000417 	ldw	r20,16(sp)
 200ee40:	dcc00317 	ldw	r19,12(sp)
 200ee44:	dc800217 	ldw	r18,8(sp)
 200ee48:	dc400117 	ldw	r17,4(sp)
 200ee4c:	dc000017 	ldw	r16,0(sp)
 200ee50:	dec00604 	addi	sp,sp,24
 200ee54:	f800283a 	ret
 200ee58:	113ffd44 	addi	r4,r2,-11
 200ee5c:	84bffe04 	addi	r18,r16,-8
 200ee60:	817ffe17 	ldw	r5,-8(r16)
 200ee64:	203fe91e 	bne	r4,zero,200ee0c <__b2d+0xb4>
 200ee68:	88cffc34 	orhi	r3,r17,16368
 200ee6c:	2805883a 	mov	r2,r5
 200ee70:	dfc00517 	ldw	ra,20(sp)
 200ee74:	dd000417 	ldw	r20,16(sp)
 200ee78:	dcc00317 	ldw	r19,12(sp)
 200ee7c:	dc800217 	ldw	r18,8(sp)
 200ee80:	dc400117 	ldw	r17,4(sp)
 200ee84:	dc000017 	ldw	r16,0(sp)
 200ee88:	dec00604 	addi	sp,sp,24
 200ee8c:	f800283a 	ret
 200ee90:	0009883a 	mov	r4,zero
 200ee94:	003fce06 	br	200edd0 <__b2d+0x78>
 200ee98:	0005883a 	mov	r2,zero
 200ee9c:	003fe406 	br	200ee30 <__b2d+0xd8>

0200eea0 <__d2b>:
 200eea0:	defff804 	addi	sp,sp,-32
 200eea4:	dc400315 	stw	r17,12(sp)
 200eea8:	3023883a 	mov	r17,r6
 200eeac:	dc800415 	stw	r18,16(sp)
 200eeb0:	8824907a 	slli	r18,r17,1
 200eeb4:	dcc00515 	stw	r19,20(sp)
 200eeb8:	2827883a 	mov	r19,r5
 200eebc:	9024d57a 	srli	r18,r18,21
 200eec0:	01400044 	movi	r5,1
 200eec4:	dd000615 	stw	r20,24(sp)
 200eec8:	dc000215 	stw	r16,8(sp)
 200eecc:	dfc00715 	stw	ra,28(sp)
 200eed0:	3829883a 	mov	r20,r7
 200eed4:	200e2540 	call	200e254 <_Balloc>
 200eed8:	1021883a 	mov	r16,r2
 200eedc:	00800434 	movhi	r2,16
 200eee0:	10bfffc4 	addi	r2,r2,-1
 200eee4:	88a2703a 	and	r17,r17,r2
 200eee8:	90000126 	beq	r18,zero,200eef0 <__d2b+0x50>
 200eeec:	8c400434 	orhi	r17,r17,16
 200eef0:	dc400015 	stw	r17,0(sp)
 200eef4:	98002226 	beq	r19,zero,200ef80 <__d2b+0xe0>
 200eef8:	d9000104 	addi	r4,sp,4
 200eefc:	dcc00115 	stw	r19,4(sp)
 200ef00:	200e5a40 	call	200e5a4 <__lo0bits>
 200ef04:	d8c00017 	ldw	r3,0(sp)
 200ef08:	10002d1e 	bne	r2,zero,200efc0 <__d2b+0x120>
 200ef0c:	d9000117 	ldw	r4,4(sp)
 200ef10:	81000515 	stw	r4,20(r16)
 200ef14:	1823003a 	cmpeq	r17,r3,zero
 200ef18:	01000084 	movi	r4,2
 200ef1c:	2463c83a 	sub	r17,r4,r17
 200ef20:	80c00615 	stw	r3,24(r16)
 200ef24:	84400415 	stw	r17,16(r16)
 200ef28:	90001d1e 	bne	r18,zero,200efa0 <__d2b+0x100>
 200ef2c:	88c00104 	addi	r3,r17,4
 200ef30:	18c7883a 	add	r3,r3,r3
 200ef34:	18c7883a 	add	r3,r3,r3
 200ef38:	80c7883a 	add	r3,r16,r3
 200ef3c:	19000017 	ldw	r4,0(r3)
 200ef40:	10bef384 	addi	r2,r2,-1074
 200ef44:	a0800015 	stw	r2,0(r20)
 200ef48:	200e53c0 	call	200e53c <__hi0bits>
 200ef4c:	8822917a 	slli	r17,r17,5
 200ef50:	d8c00817 	ldw	r3,32(sp)
 200ef54:	8885c83a 	sub	r2,r17,r2
 200ef58:	18800015 	stw	r2,0(r3)
 200ef5c:	8005883a 	mov	r2,r16
 200ef60:	dfc00717 	ldw	ra,28(sp)
 200ef64:	dd000617 	ldw	r20,24(sp)
 200ef68:	dcc00517 	ldw	r19,20(sp)
 200ef6c:	dc800417 	ldw	r18,16(sp)
 200ef70:	dc400317 	ldw	r17,12(sp)
 200ef74:	dc000217 	ldw	r16,8(sp)
 200ef78:	dec00804 	addi	sp,sp,32
 200ef7c:	f800283a 	ret
 200ef80:	d809883a 	mov	r4,sp
 200ef84:	200e5a40 	call	200e5a4 <__lo0bits>
 200ef88:	d8c00017 	ldw	r3,0(sp)
 200ef8c:	04400044 	movi	r17,1
 200ef90:	84400415 	stw	r17,16(r16)
 200ef94:	80c00515 	stw	r3,20(r16)
 200ef98:	10800804 	addi	r2,r2,32
 200ef9c:	903fe326 	beq	r18,zero,200ef2c <__d2b+0x8c>
 200efa0:	00c00d44 	movi	r3,53
 200efa4:	94bef344 	addi	r18,r18,-1075
 200efa8:	90a5883a 	add	r18,r18,r2
 200efac:	1885c83a 	sub	r2,r3,r2
 200efb0:	d8c00817 	ldw	r3,32(sp)
 200efb4:	a4800015 	stw	r18,0(r20)
 200efb8:	18800015 	stw	r2,0(r3)
 200efbc:	003fe706 	br	200ef5c <__d2b+0xbc>
 200efc0:	01000804 	movi	r4,32
 200efc4:	2089c83a 	sub	r4,r4,r2
 200efc8:	1908983a 	sll	r4,r3,r4
 200efcc:	d9400117 	ldw	r5,4(sp)
 200efd0:	1886d83a 	srl	r3,r3,r2
 200efd4:	2148b03a 	or	r4,r4,r5
 200efd8:	81000515 	stw	r4,20(r16)
 200efdc:	d8c00015 	stw	r3,0(sp)
 200efe0:	003fcc06 	br	200ef14 <__d2b+0x74>

0200efe4 <__ratio>:
 200efe4:	defff904 	addi	sp,sp,-28
 200efe8:	dc400315 	stw	r17,12(sp)
 200efec:	2823883a 	mov	r17,r5
 200eff0:	d9400104 	addi	r5,sp,4
 200eff4:	dfc00615 	stw	ra,24(sp)
 200eff8:	dcc00515 	stw	r19,20(sp)
 200effc:	dc800415 	stw	r18,16(sp)
 200f000:	2027883a 	mov	r19,r4
 200f004:	dc000215 	stw	r16,8(sp)
 200f008:	200ed580 	call	200ed58 <__b2d>
 200f00c:	8809883a 	mov	r4,r17
 200f010:	d80b883a 	mov	r5,sp
 200f014:	1025883a 	mov	r18,r2
 200f018:	1821883a 	mov	r16,r3
 200f01c:	200ed580 	call	200ed58 <__b2d>
 200f020:	99400417 	ldw	r5,16(r19)
 200f024:	89000417 	ldw	r4,16(r17)
 200f028:	d9800117 	ldw	r6,4(sp)
 200f02c:	2909c83a 	sub	r4,r5,r4
 200f030:	d9400017 	ldw	r5,0(sp)
 200f034:	2008917a 	slli	r4,r4,5
 200f038:	314bc83a 	sub	r5,r6,r5
 200f03c:	290b883a 	add	r5,r5,r4
 200f040:	01400e0e 	bge	zero,r5,200f07c <__ratio+0x98>
 200f044:	280a953a 	slli	r5,r5,20
 200f048:	2c21883a 	add	r16,r5,r16
 200f04c:	9009883a 	mov	r4,r18
 200f050:	800b883a 	mov	r5,r16
 200f054:	100d883a 	mov	r6,r2
 200f058:	180f883a 	mov	r7,r3
 200f05c:	2007e500 	call	2007e50 <__divdf3>
 200f060:	dfc00617 	ldw	ra,24(sp)
 200f064:	dcc00517 	ldw	r19,20(sp)
 200f068:	dc800417 	ldw	r18,16(sp)
 200f06c:	dc400317 	ldw	r17,12(sp)
 200f070:	dc000217 	ldw	r16,8(sp)
 200f074:	dec00704 	addi	sp,sp,28
 200f078:	f800283a 	ret
 200f07c:	280a953a 	slli	r5,r5,20
 200f080:	1947c83a 	sub	r3,r3,r5
 200f084:	003ff106 	br	200f04c <__ratio+0x68>

0200f088 <_mprec_log10>:
 200f088:	defffe04 	addi	sp,sp,-8
 200f08c:	dc000015 	stw	r16,0(sp)
 200f090:	dfc00115 	stw	ra,4(sp)
 200f094:	008005c4 	movi	r2,23
 200f098:	2021883a 	mov	r16,r4
 200f09c:	11000d0e 	bge	r2,r4,200f0d4 <_mprec_log10+0x4c>
 200f0a0:	0005883a 	mov	r2,zero
 200f0a4:	00cffc34 	movhi	r3,16368
 200f0a8:	843fffc4 	addi	r16,r16,-1
 200f0ac:	1009883a 	mov	r4,r2
 200f0b0:	180b883a 	mov	r5,r3
 200f0b4:	000d883a 	mov	r6,zero
 200f0b8:	01d00934 	movhi	r7,16420
 200f0bc:	2007b6c0 	call	2007b6c <__muldf3>
 200f0c0:	803ff91e 	bne	r16,zero,200f0a8 <_mprec_log10+0x20>
 200f0c4:	dfc00117 	ldw	ra,4(sp)
 200f0c8:	dc000017 	ldw	r16,0(sp)
 200f0cc:	dec00204 	addi	sp,sp,8
 200f0d0:	f800283a 	ret
 200f0d4:	202090fa 	slli	r16,r4,3
 200f0d8:	008080f4 	movhi	r2,515
 200f0dc:	10ba3a04 	addi	r2,r2,-5912
 200f0e0:	1421883a 	add	r16,r2,r16
 200f0e4:	80800017 	ldw	r2,0(r16)
 200f0e8:	80c00117 	ldw	r3,4(r16)
 200f0ec:	dfc00117 	ldw	ra,4(sp)
 200f0f0:	dc000017 	ldw	r16,0(sp)
 200f0f4:	dec00204 	addi	sp,sp,8
 200f0f8:	f800283a 	ret

0200f0fc <__copybits>:
 200f0fc:	297fffc4 	addi	r5,r5,-1
 200f100:	31c00417 	ldw	r7,16(r6)
 200f104:	2811d17a 	srai	r8,r5,5
 200f108:	30800504 	addi	r2,r6,20
 200f10c:	39c00144 	addi	r7,r7,5
 200f110:	42000044 	addi	r8,r8,1
 200f114:	39cf883a 	add	r7,r7,r7
 200f118:	4211883a 	add	r8,r8,r8
 200f11c:	39cf883a 	add	r7,r7,r7
 200f120:	4211883a 	add	r8,r8,r8
 200f124:	31cf883a 	add	r7,r6,r7
 200f128:	2211883a 	add	r8,r4,r8
 200f12c:	11c00d2e 	bgeu	r2,r7,200f164 <__copybits+0x68>
 200f130:	2007883a 	mov	r3,r4
 200f134:	11400017 	ldw	r5,0(r2)
 200f138:	18c00104 	addi	r3,r3,4
 200f13c:	10800104 	addi	r2,r2,4
 200f140:	197fff15 	stw	r5,-4(r3)
 200f144:	11fffb36 	bltu	r2,r7,200f134 <__copybits+0x38>
 200f148:	3985c83a 	sub	r2,r7,r6
 200f14c:	10bffac4 	addi	r2,r2,-21
 200f150:	1004d0ba 	srli	r2,r2,2
 200f154:	10800044 	addi	r2,r2,1
 200f158:	1085883a 	add	r2,r2,r2
 200f15c:	1085883a 	add	r2,r2,r2
 200f160:	2089883a 	add	r4,r4,r2
 200f164:	2200032e 	bgeu	r4,r8,200f174 <__copybits+0x78>
 200f168:	20000015 	stw	zero,0(r4)
 200f16c:	21000104 	addi	r4,r4,4
 200f170:	223ffd36 	bltu	r4,r8,200f168 <__copybits+0x6c>
 200f174:	f800283a 	ret

0200f178 <__any_on>:
 200f178:	21800417 	ldw	r6,16(r4)
 200f17c:	2805d17a 	srai	r2,r5,5
 200f180:	20c00504 	addi	r3,r4,20
 200f184:	30800f0e 	bge	r6,r2,200f1c4 <__any_on+0x4c>
 200f188:	3005883a 	mov	r2,r6
 200f18c:	10800144 	addi	r2,r2,5
 200f190:	1085883a 	add	r2,r2,r2
 200f194:	1085883a 	add	r2,r2,r2
 200f198:	2089883a 	add	r4,r4,r2
 200f19c:	1900152e 	bgeu	r3,r4,200f1f4 <__any_on+0x7c>
 200f1a0:	20bfff17 	ldw	r2,-4(r4)
 200f1a4:	213fff04 	addi	r4,r4,-4
 200f1a8:	1000041e 	bne	r2,zero,200f1bc <__any_on+0x44>
 200f1ac:	1900112e 	bgeu	r3,r4,200f1f4 <__any_on+0x7c>
 200f1b0:	213fff04 	addi	r4,r4,-4
 200f1b4:	20800017 	ldw	r2,0(r4)
 200f1b8:	103ffc26 	beq	r2,zero,200f1ac <__any_on+0x34>
 200f1bc:	00800044 	movi	r2,1
 200f1c0:	f800283a 	ret
 200f1c4:	11bff10e 	bge	r2,r6,200f18c <__any_on+0x14>
 200f1c8:	294007cc 	andi	r5,r5,31
 200f1cc:	283fef26 	beq	r5,zero,200f18c <__any_on+0x14>
 200f1d0:	11800144 	addi	r6,r2,5
 200f1d4:	318d883a 	add	r6,r6,r6
 200f1d8:	318d883a 	add	r6,r6,r6
 200f1dc:	218d883a 	add	r6,r4,r6
 200f1e0:	31800017 	ldw	r6,0(r6)
 200f1e4:	314ed83a 	srl	r7,r6,r5
 200f1e8:	394a983a 	sll	r5,r7,r5
 200f1ec:	29bff31e 	bne	r5,r6,200f1bc <__any_on+0x44>
 200f1f0:	003fe606 	br	200f18c <__any_on+0x14>
 200f1f4:	0005883a 	mov	r2,zero
 200f1f8:	f800283a 	ret

0200f1fc <_realloc_r>:
 200f1fc:	defff504 	addi	sp,sp,-44
 200f200:	dd400615 	stw	r21,24(sp)
 200f204:	dc800315 	stw	r18,12(sp)
 200f208:	dc000115 	stw	r16,4(sp)
 200f20c:	dfc00a15 	stw	ra,40(sp)
 200f210:	df000915 	stw	fp,36(sp)
 200f214:	ddc00815 	stw	r23,32(sp)
 200f218:	dd800715 	stw	r22,28(sp)
 200f21c:	dd000515 	stw	r20,20(sp)
 200f220:	dcc00415 	stw	r19,16(sp)
 200f224:	dc400215 	stw	r17,8(sp)
 200f228:	2821883a 	mov	r16,r5
 200f22c:	202b883a 	mov	r21,r4
 200f230:	3025883a 	mov	r18,r6
 200f234:	28009626 	beq	r5,zero,200f490 <_realloc_r+0x294>
 200f238:	20115540 	call	2011554 <__malloc_lock>
 200f23c:	80bfff17 	ldw	r2,-4(r16)
 200f240:	04ffff04 	movi	r19,-4
 200f244:	90c002c4 	addi	r3,r18,11
 200f248:	01000584 	movi	r4,22
 200f24c:	85bffe04 	addi	r22,r16,-8
 200f250:	14e6703a 	and	r19,r2,r19
 200f254:	20c0372e 	bgeu	r4,r3,200f334 <_realloc_r+0x138>
 200f258:	047ffe04 	movi	r17,-8
 200f25c:	1c62703a 	and	r17,r3,r17
 200f260:	8807883a 	mov	r3,r17
 200f264:	88005a16 	blt	r17,zero,200f3d0 <_realloc_r+0x1d4>
 200f268:	8c805936 	bltu	r17,r18,200f3d0 <_realloc_r+0x1d4>
 200f26c:	98c0340e 	bge	r19,r3,200f340 <_realloc_r+0x144>
 200f270:	070080f4 	movhi	fp,515
 200f274:	e7026d04 	addi	fp,fp,2484
 200f278:	e1400217 	ldw	r5,8(fp)
 200f27c:	b4c9883a 	add	r4,r22,r19
 200f280:	29009026 	beq	r5,r4,200f4c4 <_realloc_r+0x2c8>
 200f284:	21800117 	ldw	r6,4(r4)
 200f288:	01ffff84 	movi	r7,-2
 200f28c:	31ce703a 	and	r7,r6,r7
 200f290:	21cf883a 	add	r7,r4,r7
 200f294:	39c00117 	ldw	r7,4(r7)
 200f298:	39c0004c 	andi	r7,r7,1
 200f29c:	38004326 	beq	r7,zero,200f3ac <_realloc_r+0x1b0>
 200f2a0:	000d883a 	mov	r6,zero
 200f2a4:	0009883a 	mov	r4,zero
 200f2a8:	1080004c 	andi	r2,r2,1
 200f2ac:	10005a1e 	bne	r2,zero,200f418 <_realloc_r+0x21c>
 200f2b0:	85fffe17 	ldw	r23,-8(r16)
 200f2b4:	00bfff04 	movi	r2,-4
 200f2b8:	b5efc83a 	sub	r23,r22,r23
 200f2bc:	b9c00117 	ldw	r7,4(r23)
 200f2c0:	388e703a 	and	r7,r7,r2
 200f2c4:	3ccf883a 	add	r7,r7,r19
 200f2c8:	20005226 	beq	r4,zero,200f414 <_realloc_r+0x218>
 200f2cc:	31e9883a 	add	r20,r6,r7
 200f2d0:	2140c726 	beq	r4,r5,200f5f0 <_realloc_r+0x3f4>
 200f2d4:	a0c04f16 	blt	r20,r3,200f414 <_realloc_r+0x218>
 200f2d8:	20800317 	ldw	r2,12(r4)
 200f2dc:	20c00217 	ldw	r3,8(r4)
 200f2e0:	99bfff04 	addi	r6,r19,-4
 200f2e4:	01000904 	movi	r4,36
 200f2e8:	18800315 	stw	r2,12(r3)
 200f2ec:	10c00215 	stw	r3,8(r2)
 200f2f0:	b8c00217 	ldw	r3,8(r23)
 200f2f4:	b8800317 	ldw	r2,12(r23)
 200f2f8:	bc800204 	addi	r18,r23,8
 200f2fc:	18800315 	stw	r2,12(r3)
 200f300:	10c00215 	stw	r3,8(r2)
 200f304:	2180ed36 	bltu	r4,r6,200f6bc <_realloc_r+0x4c0>
 200f308:	008004c4 	movi	r2,19
 200f30c:	11809b2e 	bgeu	r2,r6,200f57c <_realloc_r+0x380>
 200f310:	80800017 	ldw	r2,0(r16)
 200f314:	b8800215 	stw	r2,8(r23)
 200f318:	80800117 	ldw	r2,4(r16)
 200f31c:	b8800315 	stw	r2,12(r23)
 200f320:	008006c4 	movi	r2,27
 200f324:	1180f936 	bltu	r2,r6,200f70c <_realloc_r+0x510>
 200f328:	b8800404 	addi	r2,r23,16
 200f32c:	80c00204 	addi	r3,r16,8
 200f330:	00009406 	br	200f584 <_realloc_r+0x388>
 200f334:	00c00404 	movi	r3,16
 200f338:	1823883a 	mov	r17,r3
 200f33c:	003fca06 	br	200f268 <_realloc_r+0x6c>
 200f340:	9829883a 	mov	r20,r19
 200f344:	a447c83a 	sub	r3,r20,r17
 200f348:	010003c4 	movi	r4,15
 200f34c:	1080004c 	andi	r2,r2,1
 200f350:	20c02336 	bltu	r4,r3,200f3e0 <_realloc_r+0x1e4>
 200f354:	1504b03a 	or	r2,r2,r20
 200f358:	b0800115 	stw	r2,4(r22)
 200f35c:	b52d883a 	add	r22,r22,r20
 200f360:	b0800117 	ldw	r2,4(r22)
 200f364:	10800054 	ori	r2,r2,1
 200f368:	b0800115 	stw	r2,4(r22)
 200f36c:	a809883a 	mov	r4,r21
 200f370:	20115740 	call	2011574 <__malloc_unlock>
 200f374:	8025883a 	mov	r18,r16
 200f378:	9005883a 	mov	r2,r18
 200f37c:	dfc00a17 	ldw	ra,40(sp)
 200f380:	df000917 	ldw	fp,36(sp)
 200f384:	ddc00817 	ldw	r23,32(sp)
 200f388:	dd800717 	ldw	r22,28(sp)
 200f38c:	dd400617 	ldw	r21,24(sp)
 200f390:	dd000517 	ldw	r20,20(sp)
 200f394:	dcc00417 	ldw	r19,16(sp)
 200f398:	dc800317 	ldw	r18,12(sp)
 200f39c:	dc400217 	ldw	r17,8(sp)
 200f3a0:	dc000117 	ldw	r16,4(sp)
 200f3a4:	dec00b04 	addi	sp,sp,44
 200f3a8:	f800283a 	ret
 200f3ac:	01ffff04 	movi	r7,-4
 200f3b0:	31cc703a 	and	r6,r6,r7
 200f3b4:	34e9883a 	add	r20,r6,r19
 200f3b8:	a0ffbb16 	blt	r20,r3,200f2a8 <_realloc_r+0xac>
 200f3bc:	20c00317 	ldw	r3,12(r4)
 200f3c0:	21000217 	ldw	r4,8(r4)
 200f3c4:	20c00315 	stw	r3,12(r4)
 200f3c8:	19000215 	stw	r4,8(r3)
 200f3cc:	003fdd06 	br	200f344 <_realloc_r+0x148>
 200f3d0:	00800304 	movi	r2,12
 200f3d4:	a8800015 	stw	r2,0(r21)
 200f3d8:	0025883a 	mov	r18,zero
 200f3dc:	003fe606 	br	200f378 <_realloc_r+0x17c>
 200f3e0:	1444b03a 	or	r2,r2,r17
 200f3e4:	b0800115 	stw	r2,4(r22)
 200f3e8:	b44b883a 	add	r5,r22,r17
 200f3ec:	18800054 	ori	r2,r3,1
 200f3f0:	28800115 	stw	r2,4(r5)
 200f3f4:	28c7883a 	add	r3,r5,r3
 200f3f8:	18800117 	ldw	r2,4(r3)
 200f3fc:	a809883a 	mov	r4,r21
 200f400:	29400204 	addi	r5,r5,8
 200f404:	10800054 	ori	r2,r2,1
 200f408:	18800115 	stw	r2,4(r3)
 200f40c:	200d49c0 	call	200d49c <_free_r>
 200f410:	003fd606 	br	200f36c <_realloc_r+0x170>
 200f414:	38c0330e 	bge	r7,r3,200f4e4 <_realloc_r+0x2e8>
 200f418:	900b883a 	mov	r5,r18
 200f41c:	a809883a 	mov	r4,r21
 200f420:	20088fc0 	call	20088fc <_malloc_r>
 200f424:	1025883a 	mov	r18,r2
 200f428:	10001626 	beq	r2,zero,200f484 <_realloc_r+0x288>
 200f42c:	80bfff17 	ldw	r2,-4(r16)
 200f430:	00ffff84 	movi	r3,-2
 200f434:	913ffe04 	addi	r4,r18,-8
 200f438:	10c6703a 	and	r3,r2,r3
 200f43c:	b0c7883a 	add	r3,r22,r3
 200f440:	20c09926 	beq	r4,r3,200f6a8 <_realloc_r+0x4ac>
 200f444:	99bfff04 	addi	r6,r19,-4
 200f448:	00800904 	movi	r2,36
 200f44c:	11806436 	bltu	r2,r6,200f5e0 <_realloc_r+0x3e4>
 200f450:	00c004c4 	movi	r3,19
 200f454:	19804036 	bltu	r3,r6,200f558 <_realloc_r+0x35c>
 200f458:	9005883a 	mov	r2,r18
 200f45c:	8007883a 	mov	r3,r16
 200f460:	19000017 	ldw	r4,0(r3)
 200f464:	11000015 	stw	r4,0(r2)
 200f468:	19000117 	ldw	r4,4(r3)
 200f46c:	11000115 	stw	r4,4(r2)
 200f470:	18c00217 	ldw	r3,8(r3)
 200f474:	10c00215 	stw	r3,8(r2)
 200f478:	a809883a 	mov	r4,r21
 200f47c:	800b883a 	mov	r5,r16
 200f480:	200d49c0 	call	200d49c <_free_r>
 200f484:	a809883a 	mov	r4,r21
 200f488:	20115740 	call	2011574 <__malloc_unlock>
 200f48c:	003fba06 	br	200f378 <_realloc_r+0x17c>
 200f490:	300b883a 	mov	r5,r6
 200f494:	dfc00a17 	ldw	ra,40(sp)
 200f498:	df000917 	ldw	fp,36(sp)
 200f49c:	ddc00817 	ldw	r23,32(sp)
 200f4a0:	dd800717 	ldw	r22,28(sp)
 200f4a4:	dd400617 	ldw	r21,24(sp)
 200f4a8:	dd000517 	ldw	r20,20(sp)
 200f4ac:	dcc00417 	ldw	r19,16(sp)
 200f4b0:	dc800317 	ldw	r18,12(sp)
 200f4b4:	dc400217 	ldw	r17,8(sp)
 200f4b8:	dc000117 	ldw	r16,4(sp)
 200f4bc:	dec00b04 	addi	sp,sp,44
 200f4c0:	20088fc1 	jmpi	20088fc <_malloc_r>
 200f4c4:	29800117 	ldw	r6,4(r5)
 200f4c8:	013fff04 	movi	r4,-4
 200f4cc:	89c00404 	addi	r7,r17,16
 200f4d0:	310c703a 	and	r6,r6,r4
 200f4d4:	34c9883a 	add	r4,r6,r19
 200f4d8:	21c0340e 	bge	r4,r7,200f5ac <_realloc_r+0x3b0>
 200f4dc:	2809883a 	mov	r4,r5
 200f4e0:	003f7106 	br	200f2a8 <_realloc_r+0xac>
 200f4e4:	b8800317 	ldw	r2,12(r23)
 200f4e8:	b8c00217 	ldw	r3,8(r23)
 200f4ec:	99bfff04 	addi	r6,r19,-4
 200f4f0:	01000904 	movi	r4,36
 200f4f4:	18800315 	stw	r2,12(r3)
 200f4f8:	10c00215 	stw	r3,8(r2)
 200f4fc:	bc800204 	addi	r18,r23,8
 200f500:	21807836 	bltu	r4,r6,200f6e4 <_realloc_r+0x4e8>
 200f504:	008004c4 	movi	r2,19
 200f508:	1180732e 	bgeu	r2,r6,200f6d8 <_realloc_r+0x4dc>
 200f50c:	80800017 	ldw	r2,0(r16)
 200f510:	b8800215 	stw	r2,8(r23)
 200f514:	80800117 	ldw	r2,4(r16)
 200f518:	b8800315 	stw	r2,12(r23)
 200f51c:	008006c4 	movi	r2,27
 200f520:	11808936 	bltu	r2,r6,200f748 <_realloc_r+0x54c>
 200f524:	b8800404 	addi	r2,r23,16
 200f528:	80c00204 	addi	r3,r16,8
 200f52c:	19000017 	ldw	r4,0(r3)
 200f530:	9021883a 	mov	r16,r18
 200f534:	3829883a 	mov	r20,r7
 200f538:	11000015 	stw	r4,0(r2)
 200f53c:	19000117 	ldw	r4,4(r3)
 200f540:	b82d883a 	mov	r22,r23
 200f544:	11000115 	stw	r4,4(r2)
 200f548:	18c00217 	ldw	r3,8(r3)
 200f54c:	10c00215 	stw	r3,8(r2)
 200f550:	b8800117 	ldw	r2,4(r23)
 200f554:	003f7b06 	br	200f344 <_realloc_r+0x148>
 200f558:	80c00017 	ldw	r3,0(r16)
 200f55c:	90c00015 	stw	r3,0(r18)
 200f560:	80c00117 	ldw	r3,4(r16)
 200f564:	90c00115 	stw	r3,4(r18)
 200f568:	00c006c4 	movi	r3,27
 200f56c:	19804636 	bltu	r3,r6,200f688 <_realloc_r+0x48c>
 200f570:	90800204 	addi	r2,r18,8
 200f574:	80c00204 	addi	r3,r16,8
 200f578:	003fb906 	br	200f460 <_realloc_r+0x264>
 200f57c:	9005883a 	mov	r2,r18
 200f580:	8007883a 	mov	r3,r16
 200f584:	19000017 	ldw	r4,0(r3)
 200f588:	9021883a 	mov	r16,r18
 200f58c:	b82d883a 	mov	r22,r23
 200f590:	11000015 	stw	r4,0(r2)
 200f594:	19000117 	ldw	r4,4(r3)
 200f598:	11000115 	stw	r4,4(r2)
 200f59c:	18c00217 	ldw	r3,8(r3)
 200f5a0:	10c00215 	stw	r3,8(r2)
 200f5a4:	b8800117 	ldw	r2,4(r23)
 200f5a8:	003f6606 	br	200f344 <_realloc_r+0x148>
 200f5ac:	2445c83a 	sub	r2,r4,r17
 200f5b0:	b46d883a 	add	r22,r22,r17
 200f5b4:	10800054 	ori	r2,r2,1
 200f5b8:	b0800115 	stw	r2,4(r22)
 200f5bc:	80bfff17 	ldw	r2,-4(r16)
 200f5c0:	a809883a 	mov	r4,r21
 200f5c4:	e5800215 	stw	r22,8(fp)
 200f5c8:	1080004c 	andi	r2,r2,1
 200f5cc:	88a2b03a 	or	r17,r17,r2
 200f5d0:	847fff15 	stw	r17,-4(r16)
 200f5d4:	20115740 	call	2011574 <__malloc_unlock>
 200f5d8:	8025883a 	mov	r18,r16
 200f5dc:	003f6606 	br	200f378 <_realloc_r+0x17c>
 200f5e0:	9009883a 	mov	r4,r18
 200f5e4:	800b883a 	mov	r5,r16
 200f5e8:	200e12c0 	call	200e12c <memmove>
 200f5ec:	003fa206 	br	200f478 <_realloc_r+0x27c>
 200f5f0:	88800404 	addi	r2,r17,16
 200f5f4:	a0bf8716 	blt	r20,r2,200f414 <_realloc_r+0x218>
 200f5f8:	b8800317 	ldw	r2,12(r23)
 200f5fc:	b8c00217 	ldw	r3,8(r23)
 200f600:	99bfff04 	addi	r6,r19,-4
 200f604:	01000904 	movi	r4,36
 200f608:	18800315 	stw	r2,12(r3)
 200f60c:	10c00215 	stw	r3,8(r2)
 200f610:	bc800204 	addi	r18,r23,8
 200f614:	21806536 	bltu	r4,r6,200f7ac <_realloc_r+0x5b0>
 200f618:	008004c4 	movi	r2,19
 200f61c:	1180592e 	bgeu	r2,r6,200f784 <_realloc_r+0x588>
 200f620:	80800017 	ldw	r2,0(r16)
 200f624:	b8800215 	stw	r2,8(r23)
 200f628:	80800117 	ldw	r2,4(r16)
 200f62c:	b8800315 	stw	r2,12(r23)
 200f630:	008006c4 	movi	r2,27
 200f634:	11806136 	bltu	r2,r6,200f7bc <_realloc_r+0x5c0>
 200f638:	b8800404 	addi	r2,r23,16
 200f63c:	80c00204 	addi	r3,r16,8
 200f640:	19000017 	ldw	r4,0(r3)
 200f644:	11000015 	stw	r4,0(r2)
 200f648:	19000117 	ldw	r4,4(r3)
 200f64c:	11000115 	stw	r4,4(r2)
 200f650:	18c00217 	ldw	r3,8(r3)
 200f654:	10c00215 	stw	r3,8(r2)
 200f658:	a447c83a 	sub	r3,r20,r17
 200f65c:	bc45883a 	add	r2,r23,r17
 200f660:	18c00054 	ori	r3,r3,1
 200f664:	10c00115 	stw	r3,4(r2)
 200f668:	b8c00117 	ldw	r3,4(r23)
 200f66c:	e0800215 	stw	r2,8(fp)
 200f670:	a809883a 	mov	r4,r21
 200f674:	1880004c 	andi	r2,r3,1
 200f678:	88a2b03a 	or	r17,r17,r2
 200f67c:	bc400115 	stw	r17,4(r23)
 200f680:	20115740 	call	2011574 <__malloc_unlock>
 200f684:	003f3c06 	br	200f378 <_realloc_r+0x17c>
 200f688:	80c00217 	ldw	r3,8(r16)
 200f68c:	90c00215 	stw	r3,8(r18)
 200f690:	80c00317 	ldw	r3,12(r16)
 200f694:	90c00315 	stw	r3,12(r18)
 200f698:	30802426 	beq	r6,r2,200f72c <_realloc_r+0x530>
 200f69c:	90800404 	addi	r2,r18,16
 200f6a0:	80c00404 	addi	r3,r16,16
 200f6a4:	003f6e06 	br	200f460 <_realloc_r+0x264>
 200f6a8:	953fff17 	ldw	r20,-4(r18)
 200f6ac:	00ffff04 	movi	r3,-4
 200f6b0:	a0e8703a 	and	r20,r20,r3
 200f6b4:	a4e9883a 	add	r20,r20,r19
 200f6b8:	003f2206 	br	200f344 <_realloc_r+0x148>
 200f6bc:	800b883a 	mov	r5,r16
 200f6c0:	9009883a 	mov	r4,r18
 200f6c4:	200e12c0 	call	200e12c <memmove>
 200f6c8:	9021883a 	mov	r16,r18
 200f6cc:	b8800117 	ldw	r2,4(r23)
 200f6d0:	b82d883a 	mov	r22,r23
 200f6d4:	003f1b06 	br	200f344 <_realloc_r+0x148>
 200f6d8:	9005883a 	mov	r2,r18
 200f6dc:	8007883a 	mov	r3,r16
 200f6e0:	003f9206 	br	200f52c <_realloc_r+0x330>
 200f6e4:	800b883a 	mov	r5,r16
 200f6e8:	9009883a 	mov	r4,r18
 200f6ec:	d9c00015 	stw	r7,0(sp)
 200f6f0:	200e12c0 	call	200e12c <memmove>
 200f6f4:	d9c00017 	ldw	r7,0(sp)
 200f6f8:	9021883a 	mov	r16,r18
 200f6fc:	b8800117 	ldw	r2,4(r23)
 200f700:	3829883a 	mov	r20,r7
 200f704:	b82d883a 	mov	r22,r23
 200f708:	003f0e06 	br	200f344 <_realloc_r+0x148>
 200f70c:	80800217 	ldw	r2,8(r16)
 200f710:	b8800415 	stw	r2,16(r23)
 200f714:	80800317 	ldw	r2,12(r16)
 200f718:	b8800515 	stw	r2,20(r23)
 200f71c:	31001226 	beq	r6,r4,200f768 <_realloc_r+0x56c>
 200f720:	b8800604 	addi	r2,r23,24
 200f724:	80c00404 	addi	r3,r16,16
 200f728:	003f9606 	br	200f584 <_realloc_r+0x388>
 200f72c:	81000417 	ldw	r4,16(r16)
 200f730:	90800604 	addi	r2,r18,24
 200f734:	80c00604 	addi	r3,r16,24
 200f738:	91000415 	stw	r4,16(r18)
 200f73c:	81000517 	ldw	r4,20(r16)
 200f740:	91000515 	stw	r4,20(r18)
 200f744:	003f4606 	br	200f460 <_realloc_r+0x264>
 200f748:	80800217 	ldw	r2,8(r16)
 200f74c:	b8800415 	stw	r2,16(r23)
 200f750:	80800317 	ldw	r2,12(r16)
 200f754:	b8800515 	stw	r2,20(r23)
 200f758:	31000d26 	beq	r6,r4,200f790 <_realloc_r+0x594>
 200f75c:	b8800604 	addi	r2,r23,24
 200f760:	80c00404 	addi	r3,r16,16
 200f764:	003f7106 	br	200f52c <_realloc_r+0x330>
 200f768:	81000417 	ldw	r4,16(r16)
 200f76c:	b8800804 	addi	r2,r23,32
 200f770:	80c00604 	addi	r3,r16,24
 200f774:	b9000615 	stw	r4,24(r23)
 200f778:	81000517 	ldw	r4,20(r16)
 200f77c:	b9000715 	stw	r4,28(r23)
 200f780:	003f8006 	br	200f584 <_realloc_r+0x388>
 200f784:	9005883a 	mov	r2,r18
 200f788:	8007883a 	mov	r3,r16
 200f78c:	003fac06 	br	200f640 <_realloc_r+0x444>
 200f790:	81000417 	ldw	r4,16(r16)
 200f794:	b8800804 	addi	r2,r23,32
 200f798:	80c00604 	addi	r3,r16,24
 200f79c:	b9000615 	stw	r4,24(r23)
 200f7a0:	81000517 	ldw	r4,20(r16)
 200f7a4:	b9000715 	stw	r4,28(r23)
 200f7a8:	003f6006 	br	200f52c <_realloc_r+0x330>
 200f7ac:	9009883a 	mov	r4,r18
 200f7b0:	800b883a 	mov	r5,r16
 200f7b4:	200e12c0 	call	200e12c <memmove>
 200f7b8:	003fa706 	br	200f658 <_realloc_r+0x45c>
 200f7bc:	80800217 	ldw	r2,8(r16)
 200f7c0:	b8800415 	stw	r2,16(r23)
 200f7c4:	80800317 	ldw	r2,12(r16)
 200f7c8:	b8800515 	stw	r2,20(r23)
 200f7cc:	31000326 	beq	r6,r4,200f7dc <_realloc_r+0x5e0>
 200f7d0:	b8800604 	addi	r2,r23,24
 200f7d4:	80c00404 	addi	r3,r16,16
 200f7d8:	003f9906 	br	200f640 <_realloc_r+0x444>
 200f7dc:	81000417 	ldw	r4,16(r16)
 200f7e0:	b8800804 	addi	r2,r23,32
 200f7e4:	80c00604 	addi	r3,r16,24
 200f7e8:	b9000615 	stw	r4,24(r23)
 200f7ec:	81000517 	ldw	r4,20(r16)
 200f7f0:	b9000715 	stw	r4,28(r23)
 200f7f4:	003f9206 	br	200f640 <_realloc_r+0x444>

0200f7f8 <__isinfd>:
 200f7f8:	0105c83a 	sub	r2,zero,r4
 200f7fc:	1108b03a 	or	r4,r2,r4
 200f800:	2004d7fa 	srli	r2,r4,31
 200f804:	00e00034 	movhi	r3,32768
 200f808:	18ffffc4 	addi	r3,r3,-1
 200f80c:	28ca703a 	and	r5,r5,r3
 200f810:	1144b03a 	or	r2,r2,r5
 200f814:	00dffc34 	movhi	r3,32752
 200f818:	1885c83a 	sub	r2,r3,r2
 200f81c:	0087c83a 	sub	r3,zero,r2
 200f820:	1884b03a 	or	r2,r3,r2
 200f824:	1005d7fa 	srai	r2,r2,31
 200f828:	10800044 	addi	r2,r2,1
 200f82c:	f800283a 	ret

0200f830 <__sread>:
 200f830:	defffe04 	addi	sp,sp,-8
 200f834:	dc000015 	stw	r16,0(sp)
 200f838:	2821883a 	mov	r16,r5
 200f83c:	2940038f 	ldh	r5,14(r5)
 200f840:	dfc00115 	stw	ra,4(sp)
 200f844:	200fe280 	call	200fe28 <_read_r>
 200f848:	10000716 	blt	r2,zero,200f868 <__sread+0x38>
 200f84c:	80c01417 	ldw	r3,80(r16)
 200f850:	1887883a 	add	r3,r3,r2
 200f854:	80c01415 	stw	r3,80(r16)
 200f858:	dfc00117 	ldw	ra,4(sp)
 200f85c:	dc000017 	ldw	r16,0(sp)
 200f860:	dec00204 	addi	sp,sp,8
 200f864:	f800283a 	ret
 200f868:	80c0030b 	ldhu	r3,12(r16)
 200f86c:	18fbffcc 	andi	r3,r3,61439
 200f870:	80c0030d 	sth	r3,12(r16)
 200f874:	dfc00117 	ldw	ra,4(sp)
 200f878:	dc000017 	ldw	r16,0(sp)
 200f87c:	dec00204 	addi	sp,sp,8
 200f880:	f800283a 	ret

0200f884 <__swrite>:
 200f884:	2880030b 	ldhu	r2,12(r5)
 200f888:	defffb04 	addi	sp,sp,-20
 200f88c:	dcc00315 	stw	r19,12(sp)
 200f890:	10c0400c 	andi	r3,r2,256
 200f894:	18ffffcc 	andi	r3,r3,65535
 200f898:	18e0001c 	xori	r3,r3,32768
 200f89c:	dc800215 	stw	r18,8(sp)
 200f8a0:	dc400115 	stw	r17,4(sp)
 200f8a4:	dc000015 	stw	r16,0(sp)
 200f8a8:	dfc00415 	stw	ra,16(sp)
 200f8ac:	18e00004 	addi	r3,r3,-32768
 200f8b0:	2821883a 	mov	r16,r5
 200f8b4:	2027883a 	mov	r19,r4
 200f8b8:	3025883a 	mov	r18,r6
 200f8bc:	3823883a 	mov	r17,r7
 200f8c0:	18000526 	beq	r3,zero,200f8d8 <__swrite+0x54>
 200f8c4:	2940038f 	ldh	r5,14(r5)
 200f8c8:	000d883a 	mov	r6,zero
 200f8cc:	01c00084 	movi	r7,2
 200f8d0:	200fdbc0 	call	200fdbc <_lseek_r>
 200f8d4:	8080030b 	ldhu	r2,12(r16)
 200f8d8:	8140038f 	ldh	r5,14(r16)
 200f8dc:	10bbffcc 	andi	r2,r2,61439
 200f8e0:	9809883a 	mov	r4,r19
 200f8e4:	900d883a 	mov	r6,r18
 200f8e8:	880f883a 	mov	r7,r17
 200f8ec:	8080030d 	sth	r2,12(r16)
 200f8f0:	dfc00417 	ldw	ra,16(sp)
 200f8f4:	dcc00317 	ldw	r19,12(sp)
 200f8f8:	dc800217 	ldw	r18,8(sp)
 200f8fc:	dc400117 	ldw	r17,4(sp)
 200f900:	dc000017 	ldw	r16,0(sp)
 200f904:	dec00504 	addi	sp,sp,20
 200f908:	200fa141 	jmpi	200fa14 <_write_r>

0200f90c <__sseek>:
 200f90c:	defffe04 	addi	sp,sp,-8
 200f910:	dc000015 	stw	r16,0(sp)
 200f914:	2821883a 	mov	r16,r5
 200f918:	2940038f 	ldh	r5,14(r5)
 200f91c:	dfc00115 	stw	ra,4(sp)
 200f920:	200fdbc0 	call	200fdbc <_lseek_r>
 200f924:	00ffffc4 	movi	r3,-1
 200f928:	10c00826 	beq	r2,r3,200f94c <__sseek+0x40>
 200f92c:	80c0030b 	ldhu	r3,12(r16)
 200f930:	80801415 	stw	r2,80(r16)
 200f934:	18c40014 	ori	r3,r3,4096
 200f938:	80c0030d 	sth	r3,12(r16)
 200f93c:	dfc00117 	ldw	ra,4(sp)
 200f940:	dc000017 	ldw	r16,0(sp)
 200f944:	dec00204 	addi	sp,sp,8
 200f948:	f800283a 	ret
 200f94c:	80c0030b 	ldhu	r3,12(r16)
 200f950:	18fbffcc 	andi	r3,r3,61439
 200f954:	80c0030d 	sth	r3,12(r16)
 200f958:	dfc00117 	ldw	ra,4(sp)
 200f95c:	dc000017 	ldw	r16,0(sp)
 200f960:	dec00204 	addi	sp,sp,8
 200f964:	f800283a 	ret

0200f968 <__sclose>:
 200f968:	2940038f 	ldh	r5,14(r5)
 200f96c:	200fb3c1 	jmpi	200fb3c <_close_r>

0200f970 <strcmp>:
 200f970:	2904b03a 	or	r2,r5,r4
 200f974:	108000cc 	andi	r2,r2,3
 200f978:	1000171e 	bne	r2,zero,200f9d8 <strcmp+0x68>
 200f97c:	20800017 	ldw	r2,0(r4)
 200f980:	28c00017 	ldw	r3,0(r5)
 200f984:	10c0141e 	bne	r2,r3,200f9d8 <strcmp+0x68>
 200f988:	027fbff4 	movhi	r9,65279
 200f98c:	4a7fbfc4 	addi	r9,r9,-257
 200f990:	1247883a 	add	r3,r2,r9
 200f994:	0084303a 	nor	r2,zero,r2
 200f998:	1884703a 	and	r2,r3,r2
 200f99c:	02202074 	movhi	r8,32897
 200f9a0:	42202004 	addi	r8,r8,-32640
 200f9a4:	1204703a 	and	r2,r2,r8
 200f9a8:	10000226 	beq	r2,zero,200f9b4 <strcmp+0x44>
 200f9ac:	00001706 	br	200fa0c <strcmp+0x9c>
 200f9b0:	3000161e 	bne	r6,zero,200fa0c <strcmp+0x9c>
 200f9b4:	21000104 	addi	r4,r4,4
 200f9b8:	20800017 	ldw	r2,0(r4)
 200f9bc:	29400104 	addi	r5,r5,4
 200f9c0:	28c00017 	ldw	r3,0(r5)
 200f9c4:	124f883a 	add	r7,r2,r9
 200f9c8:	008c303a 	nor	r6,zero,r2
 200f9cc:	398c703a 	and	r6,r7,r6
 200f9d0:	320c703a 	and	r6,r6,r8
 200f9d4:	10fff626 	beq	r2,r3,200f9b0 <strcmp+0x40>
 200f9d8:	20800007 	ldb	r2,0(r4)
 200f9dc:	1000051e 	bne	r2,zero,200f9f4 <strcmp+0x84>
 200f9e0:	00000606 	br	200f9fc <strcmp+0x8c>
 200f9e4:	21000044 	addi	r4,r4,1
 200f9e8:	20800007 	ldb	r2,0(r4)
 200f9ec:	29400044 	addi	r5,r5,1
 200f9f0:	10000226 	beq	r2,zero,200f9fc <strcmp+0x8c>
 200f9f4:	28c00007 	ldb	r3,0(r5)
 200f9f8:	10fffa26 	beq	r2,r3,200f9e4 <strcmp+0x74>
 200f9fc:	20c00003 	ldbu	r3,0(r4)
 200fa00:	28800003 	ldbu	r2,0(r5)
 200fa04:	1885c83a 	sub	r2,r3,r2
 200fa08:	f800283a 	ret
 200fa0c:	0005883a 	mov	r2,zero
 200fa10:	f800283a 	ret

0200fa14 <_write_r>:
 200fa14:	defffd04 	addi	sp,sp,-12
 200fa18:	dc400115 	stw	r17,4(sp)
 200fa1c:	dc000015 	stw	r16,0(sp)
 200fa20:	2023883a 	mov	r17,r4
 200fa24:	040080f4 	movhi	r16,515
 200fa28:	84083e04 	addi	r16,r16,8440
 200fa2c:	2809883a 	mov	r4,r5
 200fa30:	300b883a 	mov	r5,r6
 200fa34:	380d883a 	mov	r6,r7
 200fa38:	dfc00215 	stw	ra,8(sp)
 200fa3c:	80000015 	stw	zero,0(r16)
 200fa40:	2011a000 	call	2011a00 <write>
 200fa44:	00ffffc4 	movi	r3,-1
 200fa48:	10c00526 	beq	r2,r3,200fa60 <_write_r+0x4c>
 200fa4c:	dfc00217 	ldw	ra,8(sp)
 200fa50:	dc400117 	ldw	r17,4(sp)
 200fa54:	dc000017 	ldw	r16,0(sp)
 200fa58:	dec00304 	addi	sp,sp,12
 200fa5c:	f800283a 	ret
 200fa60:	80c00017 	ldw	r3,0(r16)
 200fa64:	183ff926 	beq	r3,zero,200fa4c <_write_r+0x38>
 200fa68:	88c00015 	stw	r3,0(r17)
 200fa6c:	dfc00217 	ldw	ra,8(sp)
 200fa70:	dc400117 	ldw	r17,4(sp)
 200fa74:	dc000017 	ldw	r16,0(sp)
 200fa78:	dec00304 	addi	sp,sp,12
 200fa7c:	f800283a 	ret

0200fa80 <_calloc_r>:
 200fa80:	314b383a 	mul	r5,r6,r5
 200fa84:	defffe04 	addi	sp,sp,-8
 200fa88:	dc000015 	stw	r16,0(sp)
 200fa8c:	dfc00115 	stw	ra,4(sp)
 200fa90:	20088fc0 	call	20088fc <_malloc_r>
 200fa94:	1021883a 	mov	r16,r2
 200fa98:	10000c26 	beq	r2,zero,200facc <_calloc_r+0x4c>
 200fa9c:	11bfff17 	ldw	r6,-4(r2)
 200faa0:	00ffff04 	movi	r3,-4
 200faa4:	00800904 	movi	r2,36
 200faa8:	30cc703a 	and	r6,r6,r3
 200faac:	30cd883a 	add	r6,r6,r3
 200fab0:	11801436 	bltu	r2,r6,200fb04 <_calloc_r+0x84>
 200fab4:	00c004c4 	movi	r3,19
 200fab8:	19800936 	bltu	r3,r6,200fae0 <_calloc_r+0x60>
 200fabc:	8005883a 	mov	r2,r16
 200fac0:	10000015 	stw	zero,0(r2)
 200fac4:	10000115 	stw	zero,4(r2)
 200fac8:	10000215 	stw	zero,8(r2)
 200facc:	8005883a 	mov	r2,r16
 200fad0:	dfc00117 	ldw	ra,4(sp)
 200fad4:	dc000017 	ldw	r16,0(sp)
 200fad8:	dec00204 	addi	sp,sp,8
 200fadc:	f800283a 	ret
 200fae0:	80000015 	stw	zero,0(r16)
 200fae4:	80000115 	stw	zero,4(r16)
 200fae8:	00c006c4 	movi	r3,27
 200faec:	19800d2e 	bgeu	r3,r6,200fb24 <_calloc_r+0xa4>
 200faf0:	80000215 	stw	zero,8(r16)
 200faf4:	80000315 	stw	zero,12(r16)
 200faf8:	30800c26 	beq	r6,r2,200fb2c <_calloc_r+0xac>
 200fafc:	80800404 	addi	r2,r16,16
 200fb00:	003fef06 	br	200fac0 <_calloc_r+0x40>
 200fb04:	8009883a 	mov	r4,r16
 200fb08:	000b883a 	mov	r5,zero
 200fb0c:	20091780 	call	2009178 <memset>
 200fb10:	8005883a 	mov	r2,r16
 200fb14:	dfc00117 	ldw	ra,4(sp)
 200fb18:	dc000017 	ldw	r16,0(sp)
 200fb1c:	dec00204 	addi	sp,sp,8
 200fb20:	f800283a 	ret
 200fb24:	80800204 	addi	r2,r16,8
 200fb28:	003fe506 	br	200fac0 <_calloc_r+0x40>
 200fb2c:	80000415 	stw	zero,16(r16)
 200fb30:	80000515 	stw	zero,20(r16)
 200fb34:	80800604 	addi	r2,r16,24
 200fb38:	003fe106 	br	200fac0 <_calloc_r+0x40>

0200fb3c <_close_r>:
 200fb3c:	defffd04 	addi	sp,sp,-12
 200fb40:	dc400115 	stw	r17,4(sp)
 200fb44:	dc000015 	stw	r16,0(sp)
 200fb48:	2023883a 	mov	r17,r4
 200fb4c:	040080f4 	movhi	r16,515
 200fb50:	84083e04 	addi	r16,r16,8440
 200fb54:	2809883a 	mov	r4,r5
 200fb58:	dfc00215 	stw	ra,8(sp)
 200fb5c:	80000015 	stw	zero,0(r16)
 200fb60:	2010e140 	call	2010e14 <close>
 200fb64:	00ffffc4 	movi	r3,-1
 200fb68:	10c00526 	beq	r2,r3,200fb80 <_close_r+0x44>
 200fb6c:	dfc00217 	ldw	ra,8(sp)
 200fb70:	dc400117 	ldw	r17,4(sp)
 200fb74:	dc000017 	ldw	r16,0(sp)
 200fb78:	dec00304 	addi	sp,sp,12
 200fb7c:	f800283a 	ret
 200fb80:	80c00017 	ldw	r3,0(r16)
 200fb84:	183ff926 	beq	r3,zero,200fb6c <_close_r+0x30>
 200fb88:	88c00015 	stw	r3,0(r17)
 200fb8c:	dfc00217 	ldw	ra,8(sp)
 200fb90:	dc400117 	ldw	r17,4(sp)
 200fb94:	dc000017 	ldw	r16,0(sp)
 200fb98:	dec00304 	addi	sp,sp,12
 200fb9c:	f800283a 	ret

0200fba0 <_fclose_r>:
 200fba0:	defffc04 	addi	sp,sp,-16
 200fba4:	dc400115 	stw	r17,4(sp)
 200fba8:	dc000015 	stw	r16,0(sp)
 200fbac:	dfc00315 	stw	ra,12(sp)
 200fbb0:	dc800215 	stw	r18,8(sp)
 200fbb4:	2821883a 	mov	r16,r5
 200fbb8:	2023883a 	mov	r17,r4
 200fbbc:	28003426 	beq	r5,zero,200fc90 <_fclose_r+0xf0>
 200fbc0:	200d3200 	call	200d320 <__sfp_lock_acquire>
 200fbc4:	88000226 	beq	r17,zero,200fbd0 <_fclose_r+0x30>
 200fbc8:	88800e17 	ldw	r2,56(r17)
 200fbcc:	10003826 	beq	r2,zero,200fcb0 <_fclose_r+0x110>
 200fbd0:	8080030f 	ldh	r2,12(r16)
 200fbd4:	10002526 	beq	r2,zero,200fc6c <_fclose_r+0xcc>
 200fbd8:	8809883a 	mov	r4,r17
 200fbdc:	800b883a 	mov	r5,r16
 200fbe0:	200ce700 	call	200ce70 <_fflush_r>
 200fbe4:	1025883a 	mov	r18,r2
 200fbe8:	80800b17 	ldw	r2,44(r16)
 200fbec:	10000426 	beq	r2,zero,200fc00 <_fclose_r+0x60>
 200fbf0:	81400717 	ldw	r5,28(r16)
 200fbf4:	8809883a 	mov	r4,r17
 200fbf8:	103ee83a 	callr	r2
 200fbfc:	10003516 	blt	r2,zero,200fcd4 <_fclose_r+0x134>
 200fc00:	8080030b 	ldhu	r2,12(r16)
 200fc04:	1080200c 	andi	r2,r2,128
 200fc08:	10bfffcc 	andi	r2,r2,65535
 200fc0c:	10a0001c 	xori	r2,r2,32768
 200fc10:	10a00004 	addi	r2,r2,-32768
 200fc14:	10002b1e 	bne	r2,zero,200fcc4 <_fclose_r+0x124>
 200fc18:	81400c17 	ldw	r5,48(r16)
 200fc1c:	28000526 	beq	r5,zero,200fc34 <_fclose_r+0x94>
 200fc20:	80801004 	addi	r2,r16,64
 200fc24:	28800226 	beq	r5,r2,200fc30 <_fclose_r+0x90>
 200fc28:	8809883a 	mov	r4,r17
 200fc2c:	200d49c0 	call	200d49c <_free_r>
 200fc30:	80000c15 	stw	zero,48(r16)
 200fc34:	81401117 	ldw	r5,68(r16)
 200fc38:	28000326 	beq	r5,zero,200fc48 <_fclose_r+0xa8>
 200fc3c:	8809883a 	mov	r4,r17
 200fc40:	200d49c0 	call	200d49c <_free_r>
 200fc44:	80001115 	stw	zero,68(r16)
 200fc48:	8000030d 	sth	zero,12(r16)
 200fc4c:	200d3240 	call	200d324 <__sfp_lock_release>
 200fc50:	9005883a 	mov	r2,r18
 200fc54:	dfc00317 	ldw	ra,12(sp)
 200fc58:	dc800217 	ldw	r18,8(sp)
 200fc5c:	dc400117 	ldw	r17,4(sp)
 200fc60:	dc000017 	ldw	r16,0(sp)
 200fc64:	dec00404 	addi	sp,sp,16
 200fc68:	f800283a 	ret
 200fc6c:	200d3240 	call	200d324 <__sfp_lock_release>
 200fc70:	0025883a 	mov	r18,zero
 200fc74:	9005883a 	mov	r2,r18
 200fc78:	dfc00317 	ldw	ra,12(sp)
 200fc7c:	dc800217 	ldw	r18,8(sp)
 200fc80:	dc400117 	ldw	r17,4(sp)
 200fc84:	dc000017 	ldw	r16,0(sp)
 200fc88:	dec00404 	addi	sp,sp,16
 200fc8c:	f800283a 	ret
 200fc90:	0025883a 	mov	r18,zero
 200fc94:	9005883a 	mov	r2,r18
 200fc98:	dfc00317 	ldw	ra,12(sp)
 200fc9c:	dc800217 	ldw	r18,8(sp)
 200fca0:	dc400117 	ldw	r17,4(sp)
 200fca4:	dc000017 	ldw	r16,0(sp)
 200fca8:	dec00404 	addi	sp,sp,16
 200fcac:	f800283a 	ret
 200fcb0:	8809883a 	mov	r4,r17
 200fcb4:	200d1180 	call	200d118 <__sinit>
 200fcb8:	8080030f 	ldh	r2,12(r16)
 200fcbc:	103fc61e 	bne	r2,zero,200fbd8 <_fclose_r+0x38>
 200fcc0:	003fea06 	br	200fc6c <_fclose_r+0xcc>
 200fcc4:	81400417 	ldw	r5,16(r16)
 200fcc8:	8809883a 	mov	r4,r17
 200fccc:	200d49c0 	call	200d49c <_free_r>
 200fcd0:	003fd106 	br	200fc18 <_fclose_r+0x78>
 200fcd4:	04bfffc4 	movi	r18,-1
 200fcd8:	003fc906 	br	200fc00 <_fclose_r+0x60>

0200fcdc <fclose>:
 200fcdc:	008080f4 	movhi	r2,515
 200fce0:	10882a04 	addi	r2,r2,8360
 200fce4:	200b883a 	mov	r5,r4
 200fce8:	11000017 	ldw	r4,0(r2)
 200fcec:	200fba01 	jmpi	200fba0 <_fclose_r>

0200fcf0 <_fstat_r>:
 200fcf0:	defffd04 	addi	sp,sp,-12
 200fcf4:	dc400115 	stw	r17,4(sp)
 200fcf8:	dc000015 	stw	r16,0(sp)
 200fcfc:	2023883a 	mov	r17,r4
 200fd00:	040080f4 	movhi	r16,515
 200fd04:	84083e04 	addi	r16,r16,8440
 200fd08:	2809883a 	mov	r4,r5
 200fd0c:	300b883a 	mov	r5,r6
 200fd10:	dfc00215 	stw	ra,8(sp)
 200fd14:	80000015 	stw	zero,0(r16)
 200fd18:	2010f580 	call	2010f58 <fstat>
 200fd1c:	00ffffc4 	movi	r3,-1
 200fd20:	10c00526 	beq	r2,r3,200fd38 <_fstat_r+0x48>
 200fd24:	dfc00217 	ldw	ra,8(sp)
 200fd28:	dc400117 	ldw	r17,4(sp)
 200fd2c:	dc000017 	ldw	r16,0(sp)
 200fd30:	dec00304 	addi	sp,sp,12
 200fd34:	f800283a 	ret
 200fd38:	80c00017 	ldw	r3,0(r16)
 200fd3c:	183ff926 	beq	r3,zero,200fd24 <_fstat_r+0x34>
 200fd40:	88c00015 	stw	r3,0(r17)
 200fd44:	dfc00217 	ldw	ra,8(sp)
 200fd48:	dc400117 	ldw	r17,4(sp)
 200fd4c:	dc000017 	ldw	r16,0(sp)
 200fd50:	dec00304 	addi	sp,sp,12
 200fd54:	f800283a 	ret

0200fd58 <_isatty_r>:
 200fd58:	defffd04 	addi	sp,sp,-12
 200fd5c:	dc400115 	stw	r17,4(sp)
 200fd60:	dc000015 	stw	r16,0(sp)
 200fd64:	2023883a 	mov	r17,r4
 200fd68:	040080f4 	movhi	r16,515
 200fd6c:	84083e04 	addi	r16,r16,8440
 200fd70:	2809883a 	mov	r4,r5
 200fd74:	dfc00215 	stw	ra,8(sp)
 200fd78:	80000015 	stw	zero,0(r16)
 200fd7c:	201131c0 	call	201131c <isatty>
 200fd80:	00ffffc4 	movi	r3,-1
 200fd84:	10c00526 	beq	r2,r3,200fd9c <_isatty_r+0x44>
 200fd88:	dfc00217 	ldw	ra,8(sp)
 200fd8c:	dc400117 	ldw	r17,4(sp)
 200fd90:	dc000017 	ldw	r16,0(sp)
 200fd94:	dec00304 	addi	sp,sp,12
 200fd98:	f800283a 	ret
 200fd9c:	80c00017 	ldw	r3,0(r16)
 200fda0:	183ff926 	beq	r3,zero,200fd88 <_isatty_r+0x30>
 200fda4:	88c00015 	stw	r3,0(r17)
 200fda8:	dfc00217 	ldw	ra,8(sp)
 200fdac:	dc400117 	ldw	r17,4(sp)
 200fdb0:	dc000017 	ldw	r16,0(sp)
 200fdb4:	dec00304 	addi	sp,sp,12
 200fdb8:	f800283a 	ret

0200fdbc <_lseek_r>:
 200fdbc:	defffd04 	addi	sp,sp,-12
 200fdc0:	dc400115 	stw	r17,4(sp)
 200fdc4:	dc000015 	stw	r16,0(sp)
 200fdc8:	2023883a 	mov	r17,r4
 200fdcc:	040080f4 	movhi	r16,515
 200fdd0:	84083e04 	addi	r16,r16,8440
 200fdd4:	2809883a 	mov	r4,r5
 200fdd8:	300b883a 	mov	r5,r6
 200fddc:	380d883a 	mov	r6,r7
 200fde0:	dfc00215 	stw	ra,8(sp)
 200fde4:	80000015 	stw	zero,0(r16)
 200fde8:	201140c0 	call	201140c <lseek>
 200fdec:	00ffffc4 	movi	r3,-1
 200fdf0:	10c00526 	beq	r2,r3,200fe08 <_lseek_r+0x4c>
 200fdf4:	dfc00217 	ldw	ra,8(sp)
 200fdf8:	dc400117 	ldw	r17,4(sp)
 200fdfc:	dc000017 	ldw	r16,0(sp)
 200fe00:	dec00304 	addi	sp,sp,12
 200fe04:	f800283a 	ret
 200fe08:	80c00017 	ldw	r3,0(r16)
 200fe0c:	183ff926 	beq	r3,zero,200fdf4 <_lseek_r+0x38>
 200fe10:	88c00015 	stw	r3,0(r17)
 200fe14:	dfc00217 	ldw	ra,8(sp)
 200fe18:	dc400117 	ldw	r17,4(sp)
 200fe1c:	dc000017 	ldw	r16,0(sp)
 200fe20:	dec00304 	addi	sp,sp,12
 200fe24:	f800283a 	ret

0200fe28 <_read_r>:
 200fe28:	defffd04 	addi	sp,sp,-12
 200fe2c:	dc400115 	stw	r17,4(sp)
 200fe30:	dc000015 	stw	r16,0(sp)
 200fe34:	2023883a 	mov	r17,r4
 200fe38:	040080f4 	movhi	r16,515
 200fe3c:	84083e04 	addi	r16,r16,8440
 200fe40:	2809883a 	mov	r4,r5
 200fe44:	300b883a 	mov	r5,r6
 200fe48:	380d883a 	mov	r6,r7
 200fe4c:	dfc00215 	stw	ra,8(sp)
 200fe50:	80000015 	stw	zero,0(r16)
 200fe54:	20115e40 	call	20115e4 <read>
 200fe58:	00ffffc4 	movi	r3,-1
 200fe5c:	10c00526 	beq	r2,r3,200fe74 <_read_r+0x4c>
 200fe60:	dfc00217 	ldw	ra,8(sp)
 200fe64:	dc400117 	ldw	r17,4(sp)
 200fe68:	dc000017 	ldw	r16,0(sp)
 200fe6c:	dec00304 	addi	sp,sp,12
 200fe70:	f800283a 	ret
 200fe74:	80c00017 	ldw	r3,0(r16)
 200fe78:	183ff926 	beq	r3,zero,200fe60 <_read_r+0x38>
 200fe7c:	88c00015 	stw	r3,0(r17)
 200fe80:	dfc00217 	ldw	ra,8(sp)
 200fe84:	dc400117 	ldw	r17,4(sp)
 200fe88:	dc000017 	ldw	r16,0(sp)
 200fe8c:	dec00304 	addi	sp,sp,12
 200fe90:	f800283a 	ret

0200fe94 <__udivdi3>:
 200fe94:	defff504 	addi	sp,sp,-44
 200fe98:	dd000515 	stw	r20,20(sp)
 200fe9c:	dcc00415 	stw	r19,16(sp)
 200fea0:	dc800315 	stw	r18,12(sp)
 200fea4:	dc400215 	stw	r17,8(sp)
 200fea8:	dc000115 	stw	r16,4(sp)
 200feac:	dfc00a15 	stw	ra,40(sp)
 200feb0:	df000915 	stw	fp,36(sp)
 200feb4:	ddc00815 	stw	r23,32(sp)
 200feb8:	dd800715 	stw	r22,28(sp)
 200febc:	dd400615 	stw	r21,24(sp)
 200fec0:	2025883a 	mov	r18,r4
 200fec4:	2823883a 	mov	r17,r5
 200fec8:	3021883a 	mov	r16,r6
 200fecc:	2027883a 	mov	r19,r4
 200fed0:	2829883a 	mov	r20,r5
 200fed4:	3800401e 	bne	r7,zero,200ffd8 <__udivdi3+0x144>
 200fed8:	2980602e 	bgeu	r5,r6,201005c <__udivdi3+0x1c8>
 200fedc:	00bfffd4 	movui	r2,65535
 200fee0:	1180aa36 	bltu	r2,r6,201018c <__udivdi3+0x2f8>
 200fee4:	00803fc4 	movi	r2,255
 200fee8:	11814436 	bltu	r2,r6,20103fc <__udivdi3+0x568>
 200feec:	0005883a 	mov	r2,zero
 200fef0:	0007883a 	mov	r3,zero
 200fef4:	3084d83a 	srl	r2,r6,r2
 200fef8:	010080f4 	movhi	r4,515
 200fefc:	2139b704 	addi	r4,r4,-6436
 200ff00:	2085883a 	add	r2,r4,r2
 200ff04:	10800003 	ldbu	r2,0(r2)
 200ff08:	10c7883a 	add	r3,r2,r3
 200ff0c:	00800804 	movi	r2,32
 200ff10:	10c5c83a 	sub	r2,r2,r3
 200ff14:	10000526 	beq	r2,zero,200ff2c <__udivdi3+0x98>
 200ff18:	88a2983a 	sll	r17,r17,r2
 200ff1c:	90c6d83a 	srl	r3,r18,r3
 200ff20:	30a0983a 	sll	r16,r6,r2
 200ff24:	90a6983a 	sll	r19,r18,r2
 200ff28:	88e8b03a 	or	r20,r17,r3
 200ff2c:	8022d43a 	srli	r17,r16,16
 200ff30:	a009883a 	mov	r4,r20
 200ff34:	857fffcc 	andi	r21,r16,65535
 200ff38:	880b883a 	mov	r5,r17
 200ff3c:	20083300 	call	2008330 <__umodsi3>
 200ff40:	a009883a 	mov	r4,r20
 200ff44:	880b883a 	mov	r5,r17
 200ff48:	102d883a 	mov	r22,r2
 200ff4c:	20083280 	call	2008328 <__udivsi3>
 200ff50:	b02c943a 	slli	r22,r22,16
 200ff54:	9806d43a 	srli	r3,r19,16
 200ff58:	1549383a 	mul	r4,r2,r21
 200ff5c:	1025883a 	mov	r18,r2
 200ff60:	b0c6b03a 	or	r3,r22,r3
 200ff64:	1900052e 	bgeu	r3,r4,200ff7c <__udivdi3+0xe8>
 200ff68:	1c07883a 	add	r3,r3,r16
 200ff6c:	10bfffc4 	addi	r2,r2,-1
 200ff70:	1c000136 	bltu	r3,r16,200ff78 <__udivdi3+0xe4>
 200ff74:	19013636 	bltu	r3,r4,2010450 <__udivdi3+0x5bc>
 200ff78:	1025883a 	mov	r18,r2
 200ff7c:	1929c83a 	sub	r20,r3,r4
 200ff80:	a009883a 	mov	r4,r20
 200ff84:	880b883a 	mov	r5,r17
 200ff88:	20083300 	call	2008330 <__umodsi3>
 200ff8c:	102d883a 	mov	r22,r2
 200ff90:	a009883a 	mov	r4,r20
 200ff94:	880b883a 	mov	r5,r17
 200ff98:	20083280 	call	2008328 <__udivsi3>
 200ff9c:	b02c943a 	slli	r22,r22,16
 200ffa0:	156b383a 	mul	r21,r2,r21
 200ffa4:	9cffffcc 	andi	r19,r19,65535
 200ffa8:	b4e6b03a 	or	r19,r22,r19
 200ffac:	1009883a 	mov	r4,r2
 200ffb0:	9d40052e 	bgeu	r19,r21,200ffc8 <__udivdi3+0x134>
 200ffb4:	9c27883a 	add	r19,r19,r16
 200ffb8:	10bfffc4 	addi	r2,r2,-1
 200ffbc:	9c00f736 	bltu	r19,r16,201039c <__udivdi3+0x508>
 200ffc0:	9d40f62e 	bgeu	r19,r21,201039c <__udivdi3+0x508>
 200ffc4:	213fff84 	addi	r4,r4,-2
 200ffc8:	9004943a 	slli	r2,r18,16
 200ffcc:	0007883a 	mov	r3,zero
 200ffd0:	2084b03a 	or	r2,r4,r2
 200ffd4:	00001506 	br	201002c <__udivdi3+0x198>
 200ffd8:	29c06536 	bltu	r5,r7,2010170 <__udivdi3+0x2dc>
 200ffdc:	00bfffd4 	movui	r2,65535
 200ffe0:	11c0652e 	bgeu	r2,r7,2010178 <__udivdi3+0x2e4>
 200ffe4:	00804034 	movhi	r2,256
 200ffe8:	10bfffc4 	addi	r2,r2,-1
 200ffec:	11c0f736 	bltu	r2,r7,20103cc <__udivdi3+0x538>
 200fff0:	00c00404 	movi	r3,16
 200fff4:	180b883a 	mov	r5,r3
 200fff8:	38c6d83a 	srl	r3,r7,r3
 200fffc:	010080f4 	movhi	r4,515
 2010000:	2139b704 	addi	r4,r4,-6436
 2010004:	04000804 	movi	r16,32
 2010008:	20c7883a 	add	r3,r4,r3
 201000c:	18800003 	ldbu	r2,0(r3)
 2010010:	1145883a 	add	r2,r2,r5
 2010014:	80a1c83a 	sub	r16,r16,r2
 2010018:	8000691e 	bne	r16,zero,20101c0 <__udivdi3+0x32c>
 201001c:	0007883a 	mov	r3,zero
 2010020:	3c406536 	bltu	r7,r17,20101b8 <__udivdi3+0x324>
 2010024:	9180642e 	bgeu	r18,r6,20101b8 <__udivdi3+0x324>
 2010028:	0005883a 	mov	r2,zero
 201002c:	dfc00a17 	ldw	ra,40(sp)
 2010030:	df000917 	ldw	fp,36(sp)
 2010034:	ddc00817 	ldw	r23,32(sp)
 2010038:	dd800717 	ldw	r22,28(sp)
 201003c:	dd400617 	ldw	r21,24(sp)
 2010040:	dd000517 	ldw	r20,20(sp)
 2010044:	dcc00417 	ldw	r19,16(sp)
 2010048:	dc800317 	ldw	r18,12(sp)
 201004c:	dc400217 	ldw	r17,8(sp)
 2010050:	dc000117 	ldw	r16,4(sp)
 2010054:	dec00b04 	addi	sp,sp,44
 2010058:	f800283a 	ret
 201005c:	3000041e 	bne	r6,zero,2010070 <__udivdi3+0x1dc>
 2010060:	01000044 	movi	r4,1
 2010064:	000b883a 	mov	r5,zero
 2010068:	20083280 	call	2008328 <__udivsi3>
 201006c:	1021883a 	mov	r16,r2
 2010070:	00bfffd4 	movui	r2,65535
 2010074:	14004b2e 	bgeu	r2,r16,20101a4 <__udivdi3+0x310>
 2010078:	00804034 	movhi	r2,256
 201007c:	10bfffc4 	addi	r2,r2,-1
 2010080:	1400d836 	bltu	r2,r16,20103e4 <__udivdi3+0x550>
 2010084:	00800404 	movi	r2,16
 2010088:	1007883a 	mov	r3,r2
 201008c:	8084d83a 	srl	r2,r16,r2
 2010090:	010080f4 	movhi	r4,515
 2010094:	2139b704 	addi	r4,r4,-6436
 2010098:	2085883a 	add	r2,r4,r2
 201009c:	10800003 	ldbu	r2,0(r2)
 20100a0:	10c7883a 	add	r3,r2,r3
 20100a4:	00800804 	movi	r2,32
 20100a8:	10c5c83a 	sub	r2,r2,r3
 20100ac:	1000891e 	bne	r2,zero,20102d4 <__udivdi3+0x440>
 20100b0:	8028d43a 	srli	r20,r16,16
 20100b4:	8c23c83a 	sub	r17,r17,r16
 20100b8:	84bfffcc 	andi	r18,r16,65535
 20100bc:	00c00044 	movi	r3,1
 20100c0:	8809883a 	mov	r4,r17
 20100c4:	a00b883a 	mov	r5,r20
 20100c8:	d8c00015 	stw	r3,0(sp)
 20100cc:	20083300 	call	2008330 <__umodsi3>
 20100d0:	8809883a 	mov	r4,r17
 20100d4:	a00b883a 	mov	r5,r20
 20100d8:	102b883a 	mov	r21,r2
 20100dc:	20083280 	call	2008328 <__udivsi3>
 20100e0:	a82a943a 	slli	r21,r21,16
 20100e4:	9808d43a 	srli	r4,r19,16
 20100e8:	148b383a 	mul	r5,r2,r18
 20100ec:	1023883a 	mov	r17,r2
 20100f0:	a908b03a 	or	r4,r21,r4
 20100f4:	d8c00017 	ldw	r3,0(sp)
 20100f8:	2140052e 	bgeu	r4,r5,2010110 <__udivdi3+0x27c>
 20100fc:	2409883a 	add	r4,r4,r16
 2010100:	10bfffc4 	addi	r2,r2,-1
 2010104:	24000136 	bltu	r4,r16,201010c <__udivdi3+0x278>
 2010108:	2140ce36 	bltu	r4,r5,2010444 <__udivdi3+0x5b0>
 201010c:	1023883a 	mov	r17,r2
 2010110:	216bc83a 	sub	r21,r4,r5
 2010114:	a809883a 	mov	r4,r21
 2010118:	a00b883a 	mov	r5,r20
 201011c:	d8c00015 	stw	r3,0(sp)
 2010120:	20083300 	call	2008330 <__umodsi3>
 2010124:	102d883a 	mov	r22,r2
 2010128:	a809883a 	mov	r4,r21
 201012c:	a00b883a 	mov	r5,r20
 2010130:	20083280 	call	2008328 <__udivsi3>
 2010134:	b02c943a 	slli	r22,r22,16
 2010138:	14a5383a 	mul	r18,r2,r18
 201013c:	9cffffcc 	andi	r19,r19,65535
 2010140:	b4e6b03a 	or	r19,r22,r19
 2010144:	1009883a 	mov	r4,r2
 2010148:	d8c00017 	ldw	r3,0(sp)
 201014c:	9c80052e 	bgeu	r19,r18,2010164 <__udivdi3+0x2d0>
 2010150:	9c27883a 	add	r19,r19,r16
 2010154:	10bfffc4 	addi	r2,r2,-1
 2010158:	9c009236 	bltu	r19,r16,20103a4 <__udivdi3+0x510>
 201015c:	9c80912e 	bgeu	r19,r18,20103a4 <__udivdi3+0x510>
 2010160:	213fff84 	addi	r4,r4,-2
 2010164:	8804943a 	slli	r2,r17,16
 2010168:	2084b03a 	or	r2,r4,r2
 201016c:	003faf06 	br	201002c <__udivdi3+0x198>
 2010170:	0007883a 	mov	r3,zero
 2010174:	003fac06 	br	2010028 <__udivdi3+0x194>
 2010178:	00803fc4 	movi	r2,255
 201017c:	11c09636 	bltu	r2,r7,20103d8 <__udivdi3+0x544>
 2010180:	0007883a 	mov	r3,zero
 2010184:	000b883a 	mov	r5,zero
 2010188:	003f9b06 	br	200fff8 <__udivdi3+0x164>
 201018c:	00804034 	movhi	r2,256
 2010190:	10bfffc4 	addi	r2,r2,-1
 2010194:	11809636 	bltu	r2,r6,20103f0 <__udivdi3+0x55c>
 2010198:	00800404 	movi	r2,16
 201019c:	1007883a 	mov	r3,r2
 20101a0:	003f5406 	br	200fef4 <__udivdi3+0x60>
 20101a4:	00803fc4 	movi	r2,255
 20101a8:	14009736 	bltu	r2,r16,2010408 <__udivdi3+0x574>
 20101ac:	0005883a 	mov	r2,zero
 20101b0:	0007883a 	mov	r3,zero
 20101b4:	003fb506 	br	201008c <__udivdi3+0x1f8>
 20101b8:	00800044 	movi	r2,1
 20101bc:	003f9b06 	br	201002c <__udivdi3+0x198>
 20101c0:	3086d83a 	srl	r3,r6,r2
 20101c4:	3c0e983a 	sll	r7,r7,r16
 20101c8:	88aad83a 	srl	r21,r17,r2
 20101cc:	9084d83a 	srl	r2,r18,r2
 20101d0:	38e6b03a 	or	r19,r7,r3
 20101d4:	9828d43a 	srli	r20,r19,16
 20101d8:	8c22983a 	sll	r17,r17,r16
 20101dc:	a809883a 	mov	r4,r21
 20101e0:	a00b883a 	mov	r5,r20
 20101e4:	342c983a 	sll	r22,r6,r16
 20101e8:	88a2b03a 	or	r17,r17,r2
 20101ec:	20083300 	call	2008330 <__umodsi3>
 20101f0:	a809883a 	mov	r4,r21
 20101f4:	a00b883a 	mov	r5,r20
 20101f8:	1039883a 	mov	fp,r2
 20101fc:	20083280 	call	2008328 <__udivsi3>
 2010200:	102b883a 	mov	r21,r2
 2010204:	9dffffcc 	andi	r23,r19,65535
 2010208:	e008943a 	slli	r4,fp,16
 201020c:	8804d43a 	srli	r2,r17,16
 2010210:	adcd383a 	mul	r6,r21,r23
 2010214:	2088b03a 	or	r4,r4,r2
 2010218:	2180042e 	bgeu	r4,r6,201022c <__udivdi3+0x398>
 201021c:	24c9883a 	add	r4,r4,r19
 2010220:	a8bfffc4 	addi	r2,r21,-1
 2010224:	24c07f2e 	bgeu	r4,r19,2010424 <__udivdi3+0x590>
 2010228:	102b883a 	mov	r21,r2
 201022c:	21b9c83a 	sub	fp,r4,r6
 2010230:	e009883a 	mov	r4,fp
 2010234:	a00b883a 	mov	r5,r20
 2010238:	20083300 	call	2008330 <__umodsi3>
 201023c:	e009883a 	mov	r4,fp
 2010240:	a00b883a 	mov	r5,r20
 2010244:	d8800015 	stw	r2,0(sp)
 2010248:	20083280 	call	2008328 <__udivsi3>
 201024c:	d8c00017 	ldw	r3,0(sp)
 2010250:	15cb383a 	mul	r5,r2,r23
 2010254:	8c7fffcc 	andi	r17,r17,65535
 2010258:	1806943a 	slli	r3,r3,16
 201025c:	1009883a 	mov	r4,r2
 2010260:	1c46b03a 	or	r3,r3,r17
 2010264:	1940042e 	bgeu	r3,r5,2010278 <__udivdi3+0x3e4>
 2010268:	1cc7883a 	add	r3,r3,r19
 201026c:	10bfffc4 	addi	r2,r2,-1
 2010270:	1cc0682e 	bgeu	r3,r19,2010414 <__udivdi3+0x580>
 2010274:	1009883a 	mov	r4,r2
 2010278:	a804943a 	slli	r2,r21,16
 201027c:	b1ffffcc 	andi	r7,r22,65535
 2010280:	b02cd43a 	srli	r22,r22,16
 2010284:	2084b03a 	or	r2,r4,r2
 2010288:	113fffcc 	andi	r4,r2,65535
 201028c:	100cd43a 	srli	r6,r2,16
 2010290:	21d1383a 	mul	r8,r4,r7
 2010294:	2589383a 	mul	r4,r4,r22
 2010298:	31cf383a 	mul	r7,r6,r7
 201029c:	4012d43a 	srli	r9,r8,16
 20102a0:	1947c83a 	sub	r3,r3,r5
 20102a4:	3909883a 	add	r4,r7,r4
 20102a8:	2249883a 	add	r4,r4,r9
 20102ac:	35ad383a 	mul	r22,r6,r22
 20102b0:	21c0022e 	bgeu	r4,r7,20102bc <__udivdi3+0x428>
 20102b4:	01400074 	movhi	r5,1
 20102b8:	b16d883a 	add	r22,r22,r5
 20102bc:	200ad43a 	srli	r5,r4,16
 20102c0:	b16d883a 	add	r22,r22,r5
 20102c4:	1d803e36 	bltu	r3,r22,20103c0 <__udivdi3+0x52c>
 20102c8:	1d803826 	beq	r3,r22,20103ac <__udivdi3+0x518>
 20102cc:	0007883a 	mov	r3,zero
 20102d0:	003f5606 	br	201002c <__udivdi3+0x198>
 20102d4:	80a0983a 	sll	r16,r16,r2
 20102d8:	88ead83a 	srl	r21,r17,r3
 20102dc:	90c6d83a 	srl	r3,r18,r3
 20102e0:	8028d43a 	srli	r20,r16,16
 20102e4:	88a2983a 	sll	r17,r17,r2
 20102e8:	a809883a 	mov	r4,r21
 20102ec:	a00b883a 	mov	r5,r20
 20102f0:	88ecb03a 	or	r22,r17,r3
 20102f4:	90a6983a 	sll	r19,r18,r2
 20102f8:	20083300 	call	2008330 <__umodsi3>
 20102fc:	a809883a 	mov	r4,r21
 2010300:	a00b883a 	mov	r5,r20
 2010304:	1023883a 	mov	r17,r2
 2010308:	20083280 	call	2008328 <__udivsi3>
 201030c:	102b883a 	mov	r21,r2
 2010310:	84bfffcc 	andi	r18,r16,65535
 2010314:	8808943a 	slli	r4,r17,16
 2010318:	b004d43a 	srli	r2,r22,16
 201031c:	ac87383a 	mul	r3,r21,r18
 2010320:	2088b03a 	or	r4,r4,r2
 2010324:	20c0062e 	bgeu	r4,r3,2010340 <__udivdi3+0x4ac>
 2010328:	2409883a 	add	r4,r4,r16
 201032c:	a8bfffc4 	addi	r2,r21,-1
 2010330:	24004236 	bltu	r4,r16,201043c <__udivdi3+0x5a8>
 2010334:	20c0412e 	bgeu	r4,r3,201043c <__udivdi3+0x5a8>
 2010338:	ad7fff84 	addi	r21,r21,-2
 201033c:	2409883a 	add	r4,r4,r16
 2010340:	20efc83a 	sub	r23,r4,r3
 2010344:	b809883a 	mov	r4,r23
 2010348:	a00b883a 	mov	r5,r20
 201034c:	20083300 	call	2008330 <__umodsi3>
 2010350:	1023883a 	mov	r17,r2
 2010354:	a00b883a 	mov	r5,r20
 2010358:	b809883a 	mov	r4,r23
 201035c:	20083280 	call	2008328 <__udivsi3>
 2010360:	8822943a 	slli	r17,r17,16
 2010364:	148b383a 	mul	r5,r2,r18
 2010368:	b5bfffcc 	andi	r22,r22,65535
 201036c:	8da2b03a 	or	r17,r17,r22
 2010370:	8940062e 	bgeu	r17,r5,201038c <__udivdi3+0x4f8>
 2010374:	8c23883a 	add	r17,r17,r16
 2010378:	10ffffc4 	addi	r3,r2,-1
 201037c:	8c002d36 	bltu	r17,r16,2010434 <__udivdi3+0x5a0>
 2010380:	89402c2e 	bgeu	r17,r5,2010434 <__udivdi3+0x5a0>
 2010384:	10bfff84 	addi	r2,r2,-2
 2010388:	8c23883a 	add	r17,r17,r16
 201038c:	a806943a 	slli	r3,r21,16
 2010390:	8963c83a 	sub	r17,r17,r5
 2010394:	10c6b03a 	or	r3,r2,r3
 2010398:	003f4906 	br	20100c0 <__udivdi3+0x22c>
 201039c:	1009883a 	mov	r4,r2
 20103a0:	003f0906 	br	200ffc8 <__udivdi3+0x134>
 20103a4:	1009883a 	mov	r4,r2
 20103a8:	003f6e06 	br	2010164 <__udivdi3+0x2d0>
 20103ac:	2008943a 	slli	r4,r4,16
 20103b0:	9420983a 	sll	r16,r18,r16
 20103b4:	423fffcc 	andi	r8,r8,65535
 20103b8:	2209883a 	add	r4,r4,r8
 20103bc:	813fc32e 	bgeu	r16,r4,20102cc <__udivdi3+0x438>
 20103c0:	10bfffc4 	addi	r2,r2,-1
 20103c4:	0007883a 	mov	r3,zero
 20103c8:	003f1806 	br	201002c <__udivdi3+0x198>
 20103cc:	00c00604 	movi	r3,24
 20103d0:	180b883a 	mov	r5,r3
 20103d4:	003f0806 	br	200fff8 <__udivdi3+0x164>
 20103d8:	00c00204 	movi	r3,8
 20103dc:	180b883a 	mov	r5,r3
 20103e0:	003f0506 	br	200fff8 <__udivdi3+0x164>
 20103e4:	00800604 	movi	r2,24
 20103e8:	1007883a 	mov	r3,r2
 20103ec:	003f2706 	br	201008c <__udivdi3+0x1f8>
 20103f0:	00800604 	movi	r2,24
 20103f4:	1007883a 	mov	r3,r2
 20103f8:	003ebe06 	br	200fef4 <__udivdi3+0x60>
 20103fc:	00800204 	movi	r2,8
 2010400:	1007883a 	mov	r3,r2
 2010404:	003ebb06 	br	200fef4 <__udivdi3+0x60>
 2010408:	00800204 	movi	r2,8
 201040c:	1007883a 	mov	r3,r2
 2010410:	003f1e06 	br	201008c <__udivdi3+0x1f8>
 2010414:	197f972e 	bgeu	r3,r5,2010274 <__udivdi3+0x3e0>
 2010418:	213fff84 	addi	r4,r4,-2
 201041c:	1cc7883a 	add	r3,r3,r19
 2010420:	003f9506 	br	2010278 <__udivdi3+0x3e4>
 2010424:	21bf802e 	bgeu	r4,r6,2010228 <__udivdi3+0x394>
 2010428:	ad7fff84 	addi	r21,r21,-2
 201042c:	24c9883a 	add	r4,r4,r19
 2010430:	003f7e06 	br	201022c <__udivdi3+0x398>
 2010434:	1805883a 	mov	r2,r3
 2010438:	003fd406 	br	201038c <__udivdi3+0x4f8>
 201043c:	102b883a 	mov	r21,r2
 2010440:	003fbf06 	br	2010340 <__udivdi3+0x4ac>
 2010444:	8c7fff84 	addi	r17,r17,-2
 2010448:	2409883a 	add	r4,r4,r16
 201044c:	003f3006 	br	2010110 <__udivdi3+0x27c>
 2010450:	94bfff84 	addi	r18,r18,-2
 2010454:	1c07883a 	add	r3,r3,r16
 2010458:	003ec806 	br	200ff7c <__udivdi3+0xe8>

0201045c <__umoddi3>:
 201045c:	defff504 	addi	sp,sp,-44
 2010460:	dd000515 	stw	r20,20(sp)
 2010464:	dcc00415 	stw	r19,16(sp)
 2010468:	dc800315 	stw	r18,12(sp)
 201046c:	dc400215 	stw	r17,8(sp)
 2010470:	dc000115 	stw	r16,4(sp)
 2010474:	dfc00a15 	stw	ra,40(sp)
 2010478:	df000915 	stw	fp,36(sp)
 201047c:	ddc00815 	stw	r23,32(sp)
 2010480:	dd800715 	stw	r22,28(sp)
 2010484:	dd400615 	stw	r21,24(sp)
 2010488:	2025883a 	mov	r18,r4
 201048c:	2823883a 	mov	r17,r5
 2010490:	3021883a 	mov	r16,r6
 2010494:	2027883a 	mov	r19,r4
 2010498:	2829883a 	mov	r20,r5
 201049c:	3800351e 	bne	r7,zero,2010574 <__umoddi3+0x118>
 20104a0:	29804d2e 	bgeu	r5,r6,20105d8 <__umoddi3+0x17c>
 20104a4:	00bfffd4 	movui	r2,65535
 20104a8:	11809a36 	bltu	r2,r6,2010714 <__umoddi3+0x2b8>
 20104ac:	00803fc4 	movi	r2,255
 20104b0:	11813936 	bltu	r2,r6,2010998 <__umoddi3+0x53c>
 20104b4:	0005883a 	mov	r2,zero
 20104b8:	0009883a 	mov	r4,zero
 20104bc:	3084d83a 	srl	r2,r6,r2
 20104c0:	00c080f4 	movhi	r3,515
 20104c4:	18f9b704 	addi	r3,r3,-6436
 20104c8:	05400804 	movi	r21,32
 20104cc:	1885883a 	add	r2,r3,r2
 20104d0:	10800003 	ldbu	r2,0(r2)
 20104d4:	1109883a 	add	r4,r2,r4
 20104d8:	a92bc83a 	sub	r21,r21,r4
 20104dc:	a800ec26 	beq	r21,zero,2010890 <__umoddi3+0x434>
 20104e0:	8d62983a 	sll	r17,r17,r21
 20104e4:	9108d83a 	srl	r4,r18,r4
 20104e8:	3560983a 	sll	r16,r6,r21
 20104ec:	9566983a 	sll	r19,r18,r21
 20104f0:	8928b03a 	or	r20,r17,r4
 20104f4:	8022d43a 	srli	r17,r16,16
 20104f8:	a009883a 	mov	r4,r20
 20104fc:	84bfffcc 	andi	r18,r16,65535
 2010500:	880b883a 	mov	r5,r17
 2010504:	20083300 	call	2008330 <__umodsi3>
 2010508:	a009883a 	mov	r4,r20
 201050c:	880b883a 	mov	r5,r17
 2010510:	102d883a 	mov	r22,r2
 2010514:	20083280 	call	2008328 <__udivsi3>
 2010518:	b02c943a 	slli	r22,r22,16
 201051c:	9806d43a 	srli	r3,r19,16
 2010520:	1485383a 	mul	r2,r2,r18
 2010524:	b0c6b03a 	or	r3,r22,r3
 2010528:	1880042e 	bgeu	r3,r2,201053c <__umoddi3+0xe0>
 201052c:	1c07883a 	add	r3,r3,r16
 2010530:	1c000236 	bltu	r3,r16,201053c <__umoddi3+0xe0>
 2010534:	1880012e 	bgeu	r3,r2,201053c <__umoddi3+0xe0>
 2010538:	1c07883a 	add	r3,r3,r16
 201053c:	18a9c83a 	sub	r20,r3,r2
 2010540:	a009883a 	mov	r4,r20
 2010544:	880b883a 	mov	r5,r17
 2010548:	20083300 	call	2008330 <__umodsi3>
 201054c:	102d883a 	mov	r22,r2
 2010550:	a009883a 	mov	r4,r20
 2010554:	880b883a 	mov	r5,r17
 2010558:	20083280 	call	2008328 <__udivsi3>
 201055c:	b02c943a 	slli	r22,r22,16
 2010560:	1485383a 	mul	r2,r2,r18
 2010564:	9cffffcc 	andi	r19,r19,65535
 2010568:	b4e6b03a 	or	r19,r22,r19
 201056c:	9880522e 	bgeu	r19,r2,20106b8 <__umoddi3+0x25c>
 2010570:	00004d06 	br	20106a8 <__umoddi3+0x24c>
 2010574:	29c05436 	bltu	r5,r7,20106c8 <__umoddi3+0x26c>
 2010578:	00bfffd4 	movui	r2,65535
 201057c:	11c0602e 	bgeu	r2,r7,2010700 <__umoddi3+0x2a4>
 2010580:	00804034 	movhi	r2,256
 2010584:	10bfffc4 	addi	r2,r2,-1
 2010588:	11c0f736 	bltu	r2,r7,2010968 <__umoddi3+0x50c>
 201058c:	00c00404 	movi	r3,16
 2010590:	1827883a 	mov	r19,r3
 2010594:	38c6d83a 	srl	r3,r7,r3
 2010598:	010080f4 	movhi	r4,515
 201059c:	2139b704 	addi	r4,r4,-6436
 20105a0:	04000804 	movi	r16,32
 20105a4:	20c7883a 	add	r3,r4,r3
 20105a8:	18800003 	ldbu	r2,0(r3)
 20105ac:	14e7883a 	add	r19,r2,r19
 20105b0:	84e1c83a 	sub	r16,r16,r19
 20105b4:	8000621e 	bne	r16,zero,2010740 <__umoddi3+0x2e4>
 20105b8:	3c400136 	bltu	r7,r17,20105c0 <__umoddi3+0x164>
 20105bc:	91810336 	bltu	r18,r6,20109cc <__umoddi3+0x570>
 20105c0:	9185c83a 	sub	r2,r18,r6
 20105c4:	89e3c83a 	sub	r17,r17,r7
 20105c8:	90a5803a 	cmpltu	r18,r18,r2
 20105cc:	8ca9c83a 	sub	r20,r17,r18
 20105d0:	a007883a 	mov	r3,r20
 20105d4:	00003e06 	br	20106d0 <__umoddi3+0x274>
 20105d8:	3000041e 	bne	r6,zero,20105ec <__umoddi3+0x190>
 20105dc:	01000044 	movi	r4,1
 20105e0:	000b883a 	mov	r5,zero
 20105e4:	20083280 	call	2008328 <__udivsi3>
 20105e8:	1021883a 	mov	r16,r2
 20105ec:	00bfffd4 	movui	r2,65535
 20105f0:	14004e2e 	bgeu	r2,r16,201072c <__umoddi3+0x2d0>
 20105f4:	00804034 	movhi	r2,256
 20105f8:	10bfffc4 	addi	r2,r2,-1
 20105fc:	1400e336 	bltu	r2,r16,201098c <__umoddi3+0x530>
 2010600:	00800404 	movi	r2,16
 2010604:	1007883a 	mov	r3,r2
 2010608:	8084d83a 	srl	r2,r16,r2
 201060c:	010080f4 	movhi	r4,515
 2010610:	2139b704 	addi	r4,r4,-6436
 2010614:	05400804 	movi	r21,32
 2010618:	2085883a 	add	r2,r4,r2
 201061c:	10800003 	ldbu	r2,0(r2)
 2010620:	10c7883a 	add	r3,r2,r3
 2010624:	a8ebc83a 	sub	r21,r21,r3
 2010628:	a8009b1e 	bne	r21,zero,2010898 <__umoddi3+0x43c>
 201062c:	8028d43a 	srli	r20,r16,16
 2010630:	8c23c83a 	sub	r17,r17,r16
 2010634:	85bfffcc 	andi	r22,r16,65535
 2010638:	8809883a 	mov	r4,r17
 201063c:	a00b883a 	mov	r5,r20
 2010640:	20083300 	call	2008330 <__umodsi3>
 2010644:	8809883a 	mov	r4,r17
 2010648:	a00b883a 	mov	r5,r20
 201064c:	1025883a 	mov	r18,r2
 2010650:	20083280 	call	2008328 <__udivsi3>
 2010654:	9024943a 	slli	r18,r18,16
 2010658:	9806d43a 	srli	r3,r19,16
 201065c:	1585383a 	mul	r2,r2,r22
 2010660:	90c6b03a 	or	r3,r18,r3
 2010664:	1880032e 	bgeu	r3,r2,2010674 <__umoddi3+0x218>
 2010668:	1c07883a 	add	r3,r3,r16
 201066c:	1c000136 	bltu	r3,r16,2010674 <__umoddi3+0x218>
 2010670:	1880d436 	bltu	r3,r2,20109c4 <__umoddi3+0x568>
 2010674:	18a3c83a 	sub	r17,r3,r2
 2010678:	8809883a 	mov	r4,r17
 201067c:	a00b883a 	mov	r5,r20
 2010680:	20083300 	call	2008330 <__umodsi3>
 2010684:	1025883a 	mov	r18,r2
 2010688:	8809883a 	mov	r4,r17
 201068c:	a00b883a 	mov	r5,r20
 2010690:	20083280 	call	2008328 <__udivsi3>
 2010694:	9024943a 	slli	r18,r18,16
 2010698:	1585383a 	mul	r2,r2,r22
 201069c:	9cffffcc 	andi	r19,r19,65535
 20106a0:	94e6b03a 	or	r19,r18,r19
 20106a4:	9880042e 	bgeu	r19,r2,20106b8 <__umoddi3+0x25c>
 20106a8:	9c27883a 	add	r19,r19,r16
 20106ac:	9c000236 	bltu	r19,r16,20106b8 <__umoddi3+0x25c>
 20106b0:	9880012e 	bgeu	r19,r2,20106b8 <__umoddi3+0x25c>
 20106b4:	9c27883a 	add	r19,r19,r16
 20106b8:	98a7c83a 	sub	r19,r19,r2
 20106bc:	9d44d83a 	srl	r2,r19,r21
 20106c0:	0007883a 	mov	r3,zero
 20106c4:	00000206 	br	20106d0 <__umoddi3+0x274>
 20106c8:	2005883a 	mov	r2,r4
 20106cc:	2807883a 	mov	r3,r5
 20106d0:	dfc00a17 	ldw	ra,40(sp)
 20106d4:	df000917 	ldw	fp,36(sp)
 20106d8:	ddc00817 	ldw	r23,32(sp)
 20106dc:	dd800717 	ldw	r22,28(sp)
 20106e0:	dd400617 	ldw	r21,24(sp)
 20106e4:	dd000517 	ldw	r20,20(sp)
 20106e8:	dcc00417 	ldw	r19,16(sp)
 20106ec:	dc800317 	ldw	r18,12(sp)
 20106f0:	dc400217 	ldw	r17,8(sp)
 20106f4:	dc000117 	ldw	r16,4(sp)
 20106f8:	dec00b04 	addi	sp,sp,44
 20106fc:	f800283a 	ret
 2010700:	00803fc4 	movi	r2,255
 2010704:	11c09536 	bltu	r2,r7,201095c <__umoddi3+0x500>
 2010708:	0007883a 	mov	r3,zero
 201070c:	0027883a 	mov	r19,zero
 2010710:	003fa006 	br	2010594 <__umoddi3+0x138>
 2010714:	00804034 	movhi	r2,256
 2010718:	10bfffc4 	addi	r2,r2,-1
 201071c:	11809536 	bltu	r2,r6,2010974 <__umoddi3+0x518>
 2010720:	00800404 	movi	r2,16
 2010724:	1009883a 	mov	r4,r2
 2010728:	003f6406 	br	20104bc <__umoddi3+0x60>
 201072c:	00803fc4 	movi	r2,255
 2010730:	14009336 	bltu	r2,r16,2010980 <__umoddi3+0x524>
 2010734:	0005883a 	mov	r2,zero
 2010738:	0007883a 	mov	r3,zero
 201073c:	003fb206 	br	2010608 <__umoddi3+0x1ac>
 2010740:	34c4d83a 	srl	r2,r6,r19
 2010744:	3c0e983a 	sll	r7,r7,r16
 2010748:	8ceed83a 	srl	r23,r17,r19
 201074c:	8c22983a 	sll	r17,r17,r16
 2010750:	38a8b03a 	or	r20,r7,r2
 2010754:	a02ad43a 	srli	r21,r20,16
 2010758:	94c4d83a 	srl	r2,r18,r19
 201075c:	b809883a 	mov	r4,r23
 2010760:	a80b883a 	mov	r5,r21
 2010764:	88a2b03a 	or	r17,r17,r2
 2010768:	342c983a 	sll	r22,r6,r16
 201076c:	20083300 	call	2008330 <__umodsi3>
 2010770:	b809883a 	mov	r4,r23
 2010774:	a80b883a 	mov	r5,r21
 2010778:	d8800015 	stw	r2,0(sp)
 201077c:	20083280 	call	2008328 <__udivsi3>
 2010780:	d8c00017 	ldw	r3,0(sp)
 2010784:	102f883a 	mov	r23,r2
 2010788:	a73fffcc 	andi	fp,r20,65535
 201078c:	180a943a 	slli	r5,r3,16
 2010790:	8804d43a 	srli	r2,r17,16
 2010794:	bf09383a 	mul	r4,r23,fp
 2010798:	9424983a 	sll	r18,r18,r16
 201079c:	288ab03a 	or	r5,r5,r2
 20107a0:	2900042e 	bgeu	r5,r4,20107b4 <__umoddi3+0x358>
 20107a4:	2d0b883a 	add	r5,r5,r20
 20107a8:	b8bfffc4 	addi	r2,r23,-1
 20107ac:	2d00812e 	bgeu	r5,r20,20109b4 <__umoddi3+0x558>
 20107b0:	102f883a 	mov	r23,r2
 20107b4:	2907c83a 	sub	r3,r5,r4
 20107b8:	1809883a 	mov	r4,r3
 20107bc:	a80b883a 	mov	r5,r21
 20107c0:	d8c00015 	stw	r3,0(sp)
 20107c4:	20083300 	call	2008330 <__umodsi3>
 20107c8:	d8c00017 	ldw	r3,0(sp)
 20107cc:	a80b883a 	mov	r5,r21
 20107d0:	d8800015 	stw	r2,0(sp)
 20107d4:	1809883a 	mov	r4,r3
 20107d8:	20083280 	call	2008328 <__udivsi3>
 20107dc:	d9800017 	ldw	r6,0(sp)
 20107e0:	8c7fffcc 	andi	r17,r17,65535
 20107e4:	3008943a 	slli	r4,r6,16
 20107e8:	170d383a 	mul	r6,r2,fp
 20107ec:	2448b03a 	or	r4,r4,r17
 20107f0:	2180042e 	bgeu	r4,r6,2010804 <__umoddi3+0x3a8>
 20107f4:	2509883a 	add	r4,r4,r20
 20107f8:	10ffffc4 	addi	r3,r2,-1
 20107fc:	2500692e 	bgeu	r4,r20,20109a4 <__umoddi3+0x548>
 2010800:	1805883a 	mov	r2,r3
 2010804:	b82e943a 	slli	r23,r23,16
 2010808:	b010d43a 	srli	r8,r22,16
 201080c:	b1ffffcc 	andi	r7,r22,65535
 2010810:	15eeb03a 	or	r23,r2,r23
 2010814:	b8bfffcc 	andi	r2,r23,65535
 2010818:	b82ed43a 	srli	r23,r23,16
 201081c:	11c7383a 	mul	r3,r2,r7
 2010820:	1205383a 	mul	r2,r2,r8
 2010824:	b9cf383a 	mul	r7,r23,r7
 2010828:	400b883a 	mov	r5,r8
 201082c:	1810d43a 	srli	r8,r3,16
 2010830:	3885883a 	add	r2,r7,r2
 2010834:	2189c83a 	sub	r4,r4,r6
 2010838:	1205883a 	add	r2,r2,r8
 201083c:	b94b383a 	mul	r5,r23,r5
 2010840:	11c0022e 	bgeu	r2,r7,201084c <__umoddi3+0x3f0>
 2010844:	01800074 	movhi	r6,1
 2010848:	298b883a 	add	r5,r5,r6
 201084c:	100cd43a 	srli	r6,r2,16
 2010850:	1004943a 	slli	r2,r2,16
 2010854:	18ffffcc 	andi	r3,r3,65535
 2010858:	298b883a 	add	r5,r5,r6
 201085c:	10c5883a 	add	r2,r2,r3
 2010860:	21403836 	bltu	r4,r5,2010944 <__umoddi3+0x4e8>
 2010864:	21405c26 	beq	r4,r5,20109d8 <__umoddi3+0x57c>
 2010868:	2147c83a 	sub	r3,r4,r5
 201086c:	102d883a 	mov	r22,r2
 2010870:	95adc83a 	sub	r22,r18,r22
 2010874:	95a5803a 	cmpltu	r18,r18,r22
 2010878:	1c87c83a 	sub	r3,r3,r18
 201087c:	1cc4983a 	sll	r2,r3,r19
 2010880:	b42cd83a 	srl	r22,r22,r16
 2010884:	1c06d83a 	srl	r3,r3,r16
 2010888:	1584b03a 	or	r2,r2,r22
 201088c:	003f9006 	br	20106d0 <__umoddi3+0x274>
 2010890:	002b883a 	mov	r21,zero
 2010894:	003f1706 	br	20104f4 <__umoddi3+0x98>
 2010898:	8560983a 	sll	r16,r16,r21
 201089c:	88e6d83a 	srl	r19,r17,r3
 20108a0:	90c6d83a 	srl	r3,r18,r3
 20108a4:	8028d43a 	srli	r20,r16,16
 20108a8:	8d62983a 	sll	r17,r17,r21
 20108ac:	9809883a 	mov	r4,r19
 20108b0:	a00b883a 	mov	r5,r20
 20108b4:	88eeb03a 	or	r23,r17,r3
 20108b8:	20083300 	call	2008330 <__umodsi3>
 20108bc:	9809883a 	mov	r4,r19
 20108c0:	a00b883a 	mov	r5,r20
 20108c4:	1023883a 	mov	r17,r2
 20108c8:	20083280 	call	2008328 <__udivsi3>
 20108cc:	85bfffcc 	andi	r22,r16,65535
 20108d0:	880a943a 	slli	r5,r17,16
 20108d4:	b806d43a 	srli	r3,r23,16
 20108d8:	1585383a 	mul	r2,r2,r22
 20108dc:	9566983a 	sll	r19,r18,r21
 20108e0:	28cab03a 	or	r5,r5,r3
 20108e4:	2880042e 	bgeu	r5,r2,20108f8 <__umoddi3+0x49c>
 20108e8:	2c0b883a 	add	r5,r5,r16
 20108ec:	2c000236 	bltu	r5,r16,20108f8 <__umoddi3+0x49c>
 20108f0:	2880012e 	bgeu	r5,r2,20108f8 <__umoddi3+0x49c>
 20108f4:	2c0b883a 	add	r5,r5,r16
 20108f8:	28a5c83a 	sub	r18,r5,r2
 20108fc:	9009883a 	mov	r4,r18
 2010900:	a00b883a 	mov	r5,r20
 2010904:	20083300 	call	2008330 <__umodsi3>
 2010908:	1023883a 	mov	r17,r2
 201090c:	9009883a 	mov	r4,r18
 2010910:	a00b883a 	mov	r5,r20
 2010914:	20083280 	call	2008328 <__udivsi3>
 2010918:	8822943a 	slli	r17,r17,16
 201091c:	1585383a 	mul	r2,r2,r22
 2010920:	bdffffcc 	andi	r23,r23,65535
 2010924:	8de2b03a 	or	r17,r17,r23
 2010928:	8880042e 	bgeu	r17,r2,201093c <__umoddi3+0x4e0>
 201092c:	8c23883a 	add	r17,r17,r16
 2010930:	8c000236 	bltu	r17,r16,201093c <__umoddi3+0x4e0>
 2010934:	8880012e 	bgeu	r17,r2,201093c <__umoddi3+0x4e0>
 2010938:	8c23883a 	add	r17,r17,r16
 201093c:	88a3c83a 	sub	r17,r17,r2
 2010940:	003f3d06 	br	2010638 <__umoddi3+0x1dc>
 2010944:	15adc83a 	sub	r22,r2,r22
 2010948:	2d07c83a 	sub	r3,r5,r20
 201094c:	1585803a 	cmpltu	r2,r2,r22
 2010950:	1887c83a 	sub	r3,r3,r2
 2010954:	20c7c83a 	sub	r3,r4,r3
 2010958:	003fc506 	br	2010870 <__umoddi3+0x414>
 201095c:	00c00204 	movi	r3,8
 2010960:	1827883a 	mov	r19,r3
 2010964:	003f0b06 	br	2010594 <__umoddi3+0x138>
 2010968:	00c00604 	movi	r3,24
 201096c:	1827883a 	mov	r19,r3
 2010970:	003f0806 	br	2010594 <__umoddi3+0x138>
 2010974:	00800604 	movi	r2,24
 2010978:	1009883a 	mov	r4,r2
 201097c:	003ecf06 	br	20104bc <__umoddi3+0x60>
 2010980:	00800204 	movi	r2,8
 2010984:	1007883a 	mov	r3,r2
 2010988:	003f1f06 	br	2010608 <__umoddi3+0x1ac>
 201098c:	00800604 	movi	r2,24
 2010990:	1007883a 	mov	r3,r2
 2010994:	003f1c06 	br	2010608 <__umoddi3+0x1ac>
 2010998:	00800204 	movi	r2,8
 201099c:	1009883a 	mov	r4,r2
 20109a0:	003ec606 	br	20104bc <__umoddi3+0x60>
 20109a4:	21bf962e 	bgeu	r4,r6,2010800 <__umoddi3+0x3a4>
 20109a8:	10bfff84 	addi	r2,r2,-2
 20109ac:	2509883a 	add	r4,r4,r20
 20109b0:	003f9406 	br	2010804 <__umoddi3+0x3a8>
 20109b4:	293f7e2e 	bgeu	r5,r4,20107b0 <__umoddi3+0x354>
 20109b8:	bdffff84 	addi	r23,r23,-2
 20109bc:	2d0b883a 	add	r5,r5,r20
 20109c0:	003f7c06 	br	20107b4 <__umoddi3+0x358>
 20109c4:	1c07883a 	add	r3,r3,r16
 20109c8:	003f2a06 	br	2010674 <__umoddi3+0x218>
 20109cc:	9005883a 	mov	r2,r18
 20109d0:	a007883a 	mov	r3,r20
 20109d4:	003f3e06 	br	20106d0 <__umoddi3+0x274>
 20109d8:	90bfda36 	bltu	r18,r2,2010944 <__umoddi3+0x4e8>
 20109dc:	102d883a 	mov	r22,r2
 20109e0:	0007883a 	mov	r3,zero
 20109e4:	003fa206 	br	2010870 <__umoddi3+0x414>

020109e8 <__eqdf2>:
 20109e8:	defff104 	addi	sp,sp,-60
 20109ec:	d9000c15 	stw	r4,48(sp)
 20109f0:	d9400d15 	stw	r5,52(sp)
 20109f4:	d9000c04 	addi	r4,sp,48
 20109f8:	d9400504 	addi	r5,sp,20
 20109fc:	dfc00e15 	stw	ra,56(sp)
 2010a00:	d9800a15 	stw	r6,40(sp)
 2010a04:	d9c00b15 	stw	r7,44(sp)
 2010a08:	20086680 	call	2008668 <__unpack_d>
 2010a0c:	d9000a04 	addi	r4,sp,40
 2010a10:	d80b883a 	mov	r5,sp
 2010a14:	20086680 	call	2008668 <__unpack_d>
 2010a18:	d8c00517 	ldw	r3,20(sp)
 2010a1c:	00800044 	movi	r2,1
 2010a20:	10c0052e 	bgeu	r2,r3,2010a38 <__eqdf2+0x50>
 2010a24:	d8c00017 	ldw	r3,0(sp)
 2010a28:	10c0032e 	bgeu	r2,r3,2010a38 <__eqdf2+0x50>
 2010a2c:	d9000504 	addi	r4,sp,20
 2010a30:	d80b883a 	mov	r5,sp
 2010a34:	200876c0 	call	200876c <__fpcmp_parts_d>
 2010a38:	dfc00e17 	ldw	ra,56(sp)
 2010a3c:	dec00f04 	addi	sp,sp,60
 2010a40:	f800283a 	ret

02010a44 <__nedf2>:
 2010a44:	defff104 	addi	sp,sp,-60
 2010a48:	d9000c15 	stw	r4,48(sp)
 2010a4c:	d9400d15 	stw	r5,52(sp)
 2010a50:	d9000c04 	addi	r4,sp,48
 2010a54:	d9400504 	addi	r5,sp,20
 2010a58:	dfc00e15 	stw	ra,56(sp)
 2010a5c:	d9800a15 	stw	r6,40(sp)
 2010a60:	d9c00b15 	stw	r7,44(sp)
 2010a64:	20086680 	call	2008668 <__unpack_d>
 2010a68:	d9000a04 	addi	r4,sp,40
 2010a6c:	d80b883a 	mov	r5,sp
 2010a70:	20086680 	call	2008668 <__unpack_d>
 2010a74:	d8c00517 	ldw	r3,20(sp)
 2010a78:	00800044 	movi	r2,1
 2010a7c:	10c0052e 	bgeu	r2,r3,2010a94 <__nedf2+0x50>
 2010a80:	d8c00017 	ldw	r3,0(sp)
 2010a84:	10c0032e 	bgeu	r2,r3,2010a94 <__nedf2+0x50>
 2010a88:	d9000504 	addi	r4,sp,20
 2010a8c:	d80b883a 	mov	r5,sp
 2010a90:	200876c0 	call	200876c <__fpcmp_parts_d>
 2010a94:	dfc00e17 	ldw	ra,56(sp)
 2010a98:	dec00f04 	addi	sp,sp,60
 2010a9c:	f800283a 	ret

02010aa0 <__gtdf2>:
 2010aa0:	defff104 	addi	sp,sp,-60
 2010aa4:	d9000c15 	stw	r4,48(sp)
 2010aa8:	d9400d15 	stw	r5,52(sp)
 2010aac:	d9000c04 	addi	r4,sp,48
 2010ab0:	d9400504 	addi	r5,sp,20
 2010ab4:	dfc00e15 	stw	ra,56(sp)
 2010ab8:	d9800a15 	stw	r6,40(sp)
 2010abc:	d9c00b15 	stw	r7,44(sp)
 2010ac0:	20086680 	call	2008668 <__unpack_d>
 2010ac4:	d9000a04 	addi	r4,sp,40
 2010ac8:	d80b883a 	mov	r5,sp
 2010acc:	20086680 	call	2008668 <__unpack_d>
 2010ad0:	d8c00517 	ldw	r3,20(sp)
 2010ad4:	00800044 	movi	r2,1
 2010ad8:	10c0082e 	bgeu	r2,r3,2010afc <__gtdf2+0x5c>
 2010adc:	d8c00017 	ldw	r3,0(sp)
 2010ae0:	10c0062e 	bgeu	r2,r3,2010afc <__gtdf2+0x5c>
 2010ae4:	d9000504 	addi	r4,sp,20
 2010ae8:	d80b883a 	mov	r5,sp
 2010aec:	200876c0 	call	200876c <__fpcmp_parts_d>
 2010af0:	dfc00e17 	ldw	ra,56(sp)
 2010af4:	dec00f04 	addi	sp,sp,60
 2010af8:	f800283a 	ret
 2010afc:	00bfffc4 	movi	r2,-1
 2010b00:	003ffb06 	br	2010af0 <__gtdf2+0x50>

02010b04 <__gedf2>:
 2010b04:	defff104 	addi	sp,sp,-60
 2010b08:	d9000c15 	stw	r4,48(sp)
 2010b0c:	d9400d15 	stw	r5,52(sp)
 2010b10:	d9000c04 	addi	r4,sp,48
 2010b14:	d9400504 	addi	r5,sp,20
 2010b18:	dfc00e15 	stw	ra,56(sp)
 2010b1c:	d9800a15 	stw	r6,40(sp)
 2010b20:	d9c00b15 	stw	r7,44(sp)
 2010b24:	20086680 	call	2008668 <__unpack_d>
 2010b28:	d9000a04 	addi	r4,sp,40
 2010b2c:	d80b883a 	mov	r5,sp
 2010b30:	20086680 	call	2008668 <__unpack_d>
 2010b34:	d8c00517 	ldw	r3,20(sp)
 2010b38:	00800044 	movi	r2,1
 2010b3c:	10c0082e 	bgeu	r2,r3,2010b60 <__gedf2+0x5c>
 2010b40:	d8c00017 	ldw	r3,0(sp)
 2010b44:	10c0062e 	bgeu	r2,r3,2010b60 <__gedf2+0x5c>
 2010b48:	d9000504 	addi	r4,sp,20
 2010b4c:	d80b883a 	mov	r5,sp
 2010b50:	200876c0 	call	200876c <__fpcmp_parts_d>
 2010b54:	dfc00e17 	ldw	ra,56(sp)
 2010b58:	dec00f04 	addi	sp,sp,60
 2010b5c:	f800283a 	ret
 2010b60:	00bfffc4 	movi	r2,-1
 2010b64:	003ffb06 	br	2010b54 <__gedf2+0x50>

02010b68 <__floatunsidf>:
 2010b68:	defff904 	addi	sp,sp,-28
 2010b6c:	dc000515 	stw	r16,20(sp)
 2010b70:	dfc00615 	stw	ra,24(sp)
 2010b74:	d8000115 	stw	zero,4(sp)
 2010b78:	2021883a 	mov	r16,r4
 2010b7c:	20001726 	beq	r4,zero,2010bdc <__floatunsidf+0x74>
 2010b80:	008000c4 	movi	r2,3
 2010b84:	d8800015 	stw	r2,0(sp)
 2010b88:	00800f04 	movi	r2,60
 2010b8c:	d8800215 	stw	r2,8(sp)
 2010b90:	20083980 	call	2008398 <__clzsi2>
 2010b94:	10c00744 	addi	r3,r2,29
 2010b98:	18001816 	blt	r3,zero,2010bfc <__floatunsidf+0x94>
 2010b9c:	18002d26 	beq	r3,zero,2010c54 <__floatunsidf+0xec>
 2010ba0:	113fff44 	addi	r4,r2,-3
 2010ba4:	20002e16 	blt	r4,zero,2010c60 <__floatunsidf+0xf8>
 2010ba8:	8108983a 	sll	r4,r16,r4
 2010bac:	0021883a 	mov	r16,zero
 2010bb0:	014007c4 	movi	r5,31
 2010bb4:	2885c83a 	sub	r2,r5,r2
 2010bb8:	dc000315 	stw	r16,12(sp)
 2010bbc:	d9000415 	stw	r4,16(sp)
 2010bc0:	d8800215 	stw	r2,8(sp)
 2010bc4:	d809883a 	mov	r4,sp
 2010bc8:	20084440 	call	2008444 <__pack_d>
 2010bcc:	dfc00617 	ldw	ra,24(sp)
 2010bd0:	dc000517 	ldw	r16,20(sp)
 2010bd4:	dec00704 	addi	sp,sp,28
 2010bd8:	f800283a 	ret
 2010bdc:	00800084 	movi	r2,2
 2010be0:	d809883a 	mov	r4,sp
 2010be4:	d8800015 	stw	r2,0(sp)
 2010be8:	20084440 	call	2008444 <__pack_d>
 2010bec:	dfc00617 	ldw	ra,24(sp)
 2010bf0:	dc000517 	ldw	r16,20(sp)
 2010bf4:	dec00704 	addi	sp,sp,28
 2010bf8:	f800283a 	ret
 2010bfc:	00c7c83a 	sub	r3,zero,r3
 2010c00:	193ff804 	addi	r4,r3,-32
 2010c04:	20001c16 	blt	r4,zero,2010c78 <__floatunsidf+0x110>
 2010c08:	000b883a 	mov	r5,zero
 2010c0c:	2009d7fa 	srai	r4,r4,31
 2010c10:	80c6d83a 	srl	r3,r16,r3
 2010c14:	297fffc4 	addi	r5,r5,-1
 2010c18:	2c20703a 	and	r16,r5,r16
 2010c1c:	8020c03a 	cmpne	r16,r16,zero
 2010c20:	1906703a 	and	r3,r3,r4
 2010c24:	010007c4 	movi	r4,31
 2010c28:	80c6b03a 	or	r3,r16,r3
 2010c2c:	2085c83a 	sub	r2,r4,r2
 2010c30:	d809883a 	mov	r4,sp
 2010c34:	d8c00315 	stw	r3,12(sp)
 2010c38:	d8000415 	stw	zero,16(sp)
 2010c3c:	d8800215 	stw	r2,8(sp)
 2010c40:	20084440 	call	2008444 <__pack_d>
 2010c44:	dfc00617 	ldw	ra,24(sp)
 2010c48:	dc000517 	ldw	r16,20(sp)
 2010c4c:	dec00704 	addi	sp,sp,28
 2010c50:	f800283a 	ret
 2010c54:	dc000315 	stw	r16,12(sp)
 2010c58:	d8000415 	stw	zero,16(sp)
 2010c5c:	003fd906 	br	2010bc4 <__floatunsidf+0x5c>
 2010c60:	800ad07a 	srli	r5,r16,1
 2010c64:	010007c4 	movi	r4,31
 2010c68:	20c9c83a 	sub	r4,r4,r3
 2010c6c:	2908d83a 	srl	r4,r5,r4
 2010c70:	80e0983a 	sll	r16,r16,r3
 2010c74:	003fce06 	br	2010bb0 <__floatunsidf+0x48>
 2010c78:	01400044 	movi	r5,1
 2010c7c:	28ca983a 	sll	r5,r5,r3
 2010c80:	003fe206 	br	2010c0c <__floatunsidf+0xa4>

02010c84 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2010c84:	defff504 	addi	sp,sp,-44
 2010c88:	df000a15 	stw	fp,40(sp)
 2010c8c:	df000a04 	addi	fp,sp,40
 2010c90:	e13ffc15 	stw	r4,-16(fp)
 2010c94:	e17ffd15 	stw	r5,-12(fp)
 2010c98:	e1bffe15 	stw	r6,-8(fp)
 2010c9c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2010ca0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2010ca4:	008080f4 	movhi	r2,515
 2010ca8:	10884604 	addi	r2,r2,8472
 2010cac:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 2010cb0:	10003f26 	beq	r2,zero,2010db0 <alt_alarm_start+0x12c>
  {
    if (alarm)
 2010cb4:	e0bffc17 	ldw	r2,-16(fp)
 2010cb8:	10003b26 	beq	r2,zero,2010da8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 2010cbc:	e0bffc17 	ldw	r2,-16(fp)
 2010cc0:	e0fffe17 	ldw	r3,-8(fp)
 2010cc4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 2010cc8:	e0bffc17 	ldw	r2,-16(fp)
 2010ccc:	e0ffff17 	ldw	r3,-4(fp)
 2010cd0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010cd4:	0005303a 	rdctl	r2,status
 2010cd8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010cdc:	e0fff817 	ldw	r3,-32(fp)
 2010ce0:	00bfff84 	movi	r2,-2
 2010ce4:	1884703a 	and	r2,r3,r2
 2010ce8:	1001703a 	wrctl	status,r2
  
  return context;
 2010cec:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2010cf0:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2010cf4:	008080f4 	movhi	r2,515
 2010cf8:	10884704 	addi	r2,r2,8476
 2010cfc:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2010d00:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2010d04:	e0fffd17 	ldw	r3,-12(fp)
 2010d08:	e0bff617 	ldw	r2,-40(fp)
 2010d0c:	1885883a 	add	r2,r3,r2
 2010d10:	10c00044 	addi	r3,r2,1
 2010d14:	e0bffc17 	ldw	r2,-16(fp)
 2010d18:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2010d1c:	e0bffc17 	ldw	r2,-16(fp)
 2010d20:	10c00217 	ldw	r3,8(r2)
 2010d24:	e0bff617 	ldw	r2,-40(fp)
 2010d28:	1880042e 	bgeu	r3,r2,2010d3c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 2010d2c:	e0bffc17 	ldw	r2,-16(fp)
 2010d30:	00c00044 	movi	r3,1
 2010d34:	10c00405 	stb	r3,16(r2)
 2010d38:	00000206 	br	2010d44 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 2010d3c:	e0bffc17 	ldw	r2,-16(fp)
 2010d40:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2010d44:	e0bffc17 	ldw	r2,-16(fp)
 2010d48:	00c080f4 	movhi	r3,515
 2010d4c:	18c83604 	addi	r3,r3,8408
 2010d50:	e0fff915 	stw	r3,-28(fp)
 2010d54:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2010d58:	e0bffa17 	ldw	r2,-24(fp)
 2010d5c:	e0fff917 	ldw	r3,-28(fp)
 2010d60:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2010d64:	e0bff917 	ldw	r2,-28(fp)
 2010d68:	10c00017 	ldw	r3,0(r2)
 2010d6c:	e0bffa17 	ldw	r2,-24(fp)
 2010d70:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2010d74:	e0bff917 	ldw	r2,-28(fp)
 2010d78:	10800017 	ldw	r2,0(r2)
 2010d7c:	e0fffa17 	ldw	r3,-24(fp)
 2010d80:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2010d84:	e0bff917 	ldw	r2,-28(fp)
 2010d88:	e0fffa17 	ldw	r3,-24(fp)
 2010d8c:	10c00015 	stw	r3,0(r2)
 2010d90:	e0bff717 	ldw	r2,-36(fp)
 2010d94:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010d98:	e0bffb17 	ldw	r2,-20(fp)
 2010d9c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2010da0:	0005883a 	mov	r2,zero
 2010da4:	00000306 	br	2010db4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 2010da8:	00bffa84 	movi	r2,-22
 2010dac:	00000106 	br	2010db4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 2010db0:	00bfde84 	movi	r2,-134
  }
}
 2010db4:	e037883a 	mov	sp,fp
 2010db8:	df000017 	ldw	fp,0(sp)
 2010dbc:	dec00104 	addi	sp,sp,4
 2010dc0:	f800283a 	ret

02010dc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010dc4:	defffe04 	addi	sp,sp,-8
 2010dc8:	dfc00115 	stw	ra,4(sp)
 2010dcc:	df000015 	stw	fp,0(sp)
 2010dd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010dd4:	008080f4 	movhi	r2,515
 2010dd8:	10883304 	addi	r2,r2,8396
 2010ddc:	10800017 	ldw	r2,0(r2)
 2010de0:	10000526 	beq	r2,zero,2010df8 <alt_get_errno+0x34>
 2010de4:	008080f4 	movhi	r2,515
 2010de8:	10883304 	addi	r2,r2,8396
 2010dec:	10800017 	ldw	r2,0(r2)
 2010df0:	103ee83a 	callr	r2
 2010df4:	00000206 	br	2010e00 <alt_get_errno+0x3c>
 2010df8:	008080f4 	movhi	r2,515
 2010dfc:	10883e04 	addi	r2,r2,8440
}
 2010e00:	e037883a 	mov	sp,fp
 2010e04:	dfc00117 	ldw	ra,4(sp)
 2010e08:	df000017 	ldw	fp,0(sp)
 2010e0c:	dec00204 	addi	sp,sp,8
 2010e10:	f800283a 	ret

02010e14 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2010e14:	defffb04 	addi	sp,sp,-20
 2010e18:	dfc00415 	stw	ra,16(sp)
 2010e1c:	df000315 	stw	fp,12(sp)
 2010e20:	df000304 	addi	fp,sp,12
 2010e24:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2010e28:	e0bfff17 	ldw	r2,-4(fp)
 2010e2c:	10000616 	blt	r2,zero,2010e48 <close+0x34>
 2010e30:	e0bfff17 	ldw	r2,-4(fp)
 2010e34:	10c00324 	muli	r3,r2,12
 2010e38:	008080f4 	movhi	r2,515
 2010e3c:	10837c04 	addi	r2,r2,3568
 2010e40:	1885883a 	add	r2,r3,r2
 2010e44:	00000106 	br	2010e4c <close+0x38>
 2010e48:	0005883a 	mov	r2,zero
 2010e4c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2010e50:	e0bffd17 	ldw	r2,-12(fp)
 2010e54:	10001826 	beq	r2,zero,2010eb8 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2010e58:	e0bffd17 	ldw	r2,-12(fp)
 2010e5c:	10800017 	ldw	r2,0(r2)
 2010e60:	10800417 	ldw	r2,16(r2)
 2010e64:	10000626 	beq	r2,zero,2010e80 <close+0x6c>
 2010e68:	e0bffd17 	ldw	r2,-12(fp)
 2010e6c:	10800017 	ldw	r2,0(r2)
 2010e70:	10800417 	ldw	r2,16(r2)
 2010e74:	e13ffd17 	ldw	r4,-12(fp)
 2010e78:	103ee83a 	callr	r2
 2010e7c:	00000106 	br	2010e84 <close+0x70>
 2010e80:	0005883a 	mov	r2,zero
 2010e84:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2010e88:	e13fff17 	ldw	r4,-4(fp)
 2010e8c:	20116d40 	call	20116d4 <alt_release_fd>
    if (rval < 0)
 2010e90:	e0bffe17 	ldw	r2,-8(fp)
 2010e94:	1000060e 	bge	r2,zero,2010eb0 <close+0x9c>
    {
      ALT_ERRNO = -rval;
 2010e98:	2010dc40 	call	2010dc4 <alt_get_errno>
 2010e9c:	e0fffe17 	ldw	r3,-8(fp)
 2010ea0:	00c7c83a 	sub	r3,zero,r3
 2010ea4:	10c00015 	stw	r3,0(r2)
      return -1;
 2010ea8:	00bfffc4 	movi	r2,-1
 2010eac:	00000606 	br	2010ec8 <close+0xb4>
    }
    return 0;
 2010eb0:	0005883a 	mov	r2,zero
 2010eb4:	00000406 	br	2010ec8 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2010eb8:	2010dc40 	call	2010dc4 <alt_get_errno>
 2010ebc:	00c01444 	movi	r3,81
 2010ec0:	10c00015 	stw	r3,0(r2)
    return -1;
 2010ec4:	00bfffc4 	movi	r2,-1
  }
}
 2010ec8:	e037883a 	mov	sp,fp
 2010ecc:	dfc00117 	ldw	ra,4(sp)
 2010ed0:	df000017 	ldw	fp,0(sp)
 2010ed4:	dec00204 	addi	sp,sp,8
 2010ed8:	f800283a 	ret

02010edc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2010edc:	defffc04 	addi	sp,sp,-16
 2010ee0:	df000315 	stw	fp,12(sp)
 2010ee4:	df000304 	addi	fp,sp,12
 2010ee8:	e13ffd15 	stw	r4,-12(fp)
 2010eec:	e17ffe15 	stw	r5,-8(fp)
 2010ef0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2010ef4:	e0bfff17 	ldw	r2,-4(fp)
}
 2010ef8:	e037883a 	mov	sp,fp
 2010efc:	df000017 	ldw	fp,0(sp)
 2010f00:	dec00104 	addi	sp,sp,4
 2010f04:	f800283a 	ret

02010f08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2010f08:	defffe04 	addi	sp,sp,-8
 2010f0c:	dfc00115 	stw	ra,4(sp)
 2010f10:	df000015 	stw	fp,0(sp)
 2010f14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2010f18:	008080f4 	movhi	r2,515
 2010f1c:	10883304 	addi	r2,r2,8396
 2010f20:	10800017 	ldw	r2,0(r2)
 2010f24:	10000526 	beq	r2,zero,2010f3c <alt_get_errno+0x34>
 2010f28:	008080f4 	movhi	r2,515
 2010f2c:	10883304 	addi	r2,r2,8396
 2010f30:	10800017 	ldw	r2,0(r2)
 2010f34:	103ee83a 	callr	r2
 2010f38:	00000206 	br	2010f44 <alt_get_errno+0x3c>
 2010f3c:	008080f4 	movhi	r2,515
 2010f40:	10883e04 	addi	r2,r2,8440
}
 2010f44:	e037883a 	mov	sp,fp
 2010f48:	dfc00117 	ldw	ra,4(sp)
 2010f4c:	df000017 	ldw	fp,0(sp)
 2010f50:	dec00204 	addi	sp,sp,8
 2010f54:	f800283a 	ret

02010f58 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2010f58:	defffb04 	addi	sp,sp,-20
 2010f5c:	dfc00415 	stw	ra,16(sp)
 2010f60:	df000315 	stw	fp,12(sp)
 2010f64:	df000304 	addi	fp,sp,12
 2010f68:	e13ffe15 	stw	r4,-8(fp)
 2010f6c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2010f70:	e0bffe17 	ldw	r2,-8(fp)
 2010f74:	10000616 	blt	r2,zero,2010f90 <fstat+0x38>
 2010f78:	e0bffe17 	ldw	r2,-8(fp)
 2010f7c:	10c00324 	muli	r3,r2,12
 2010f80:	008080f4 	movhi	r2,515
 2010f84:	10837c04 	addi	r2,r2,3568
 2010f88:	1885883a 	add	r2,r3,r2
 2010f8c:	00000106 	br	2010f94 <fstat+0x3c>
 2010f90:	0005883a 	mov	r2,zero
 2010f94:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 2010f98:	e0bffd17 	ldw	r2,-12(fp)
 2010f9c:	10001026 	beq	r2,zero,2010fe0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2010fa0:	e0bffd17 	ldw	r2,-12(fp)
 2010fa4:	10800017 	ldw	r2,0(r2)
 2010fa8:	10800817 	ldw	r2,32(r2)
 2010fac:	10000726 	beq	r2,zero,2010fcc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 2010fb0:	e0bffd17 	ldw	r2,-12(fp)
 2010fb4:	10800017 	ldw	r2,0(r2)
 2010fb8:	10800817 	ldw	r2,32(r2)
 2010fbc:	e13ffd17 	ldw	r4,-12(fp)
 2010fc0:	e17fff17 	ldw	r5,-4(fp)
 2010fc4:	103ee83a 	callr	r2
 2010fc8:	00000906 	br	2010ff0 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2010fcc:	e0bfff17 	ldw	r2,-4(fp)
 2010fd0:	00c80004 	movi	r3,8192
 2010fd4:	10c00115 	stw	r3,4(r2)
      return 0;
 2010fd8:	0005883a 	mov	r2,zero
 2010fdc:	00000406 	br	2010ff0 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2010fe0:	2010f080 	call	2010f08 <alt_get_errno>
 2010fe4:	00c01444 	movi	r3,81
 2010fe8:	10c00015 	stw	r3,0(r2)
    return -1;
 2010fec:	00bfffc4 	movi	r2,-1
  }
}
 2010ff0:	e037883a 	mov	sp,fp
 2010ff4:	dfc00117 	ldw	ra,4(sp)
 2010ff8:	df000017 	ldw	fp,0(sp)
 2010ffc:	dec00204 	addi	sp,sp,8
 2011000:	f800283a 	ret

02011004 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2011004:	defff904 	addi	sp,sp,-28
 2011008:	dfc00615 	stw	ra,24(sp)
 201100c:	df000515 	stw	fp,20(sp)
 2011010:	df000504 	addi	fp,sp,20
 2011014:	e13ffc15 	stw	r4,-16(fp)
 2011018:	e17ffd15 	stw	r5,-12(fp)
 201101c:	e1bffe15 	stw	r6,-8(fp)
 2011020:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2011024:	e0800217 	ldw	r2,8(fp)
 2011028:	d8800015 	stw	r2,0(sp)
 201102c:	e13ffc17 	ldw	r4,-16(fp)
 2011030:	e17ffd17 	ldw	r5,-12(fp)
 2011034:	e1bffe17 	ldw	r6,-8(fp)
 2011038:	e1ffff17 	ldw	r7,-4(fp)
 201103c:	20111dc0 	call	20111dc <alt_iic_isr_register>
}  
 2011040:	e037883a 	mov	sp,fp
 2011044:	dfc00117 	ldw	ra,4(sp)
 2011048:	df000017 	ldw	fp,0(sp)
 201104c:	dec00204 	addi	sp,sp,8
 2011050:	f800283a 	ret

02011054 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2011054:	defff904 	addi	sp,sp,-28
 2011058:	df000615 	stw	fp,24(sp)
 201105c:	df000604 	addi	fp,sp,24
 2011060:	e13ffe15 	stw	r4,-8(fp)
 2011064:	e17fff15 	stw	r5,-4(fp)
 2011068:	e0bfff17 	ldw	r2,-4(fp)
 201106c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011070:	0005303a 	rdctl	r2,status
 2011074:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011078:	e0fffb17 	ldw	r3,-20(fp)
 201107c:	00bfff84 	movi	r2,-2
 2011080:	1884703a 	and	r2,r3,r2
 2011084:	1001703a 	wrctl	status,r2
  
  return context;
 2011088:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201108c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 2011090:	e0bffa17 	ldw	r2,-24(fp)
 2011094:	00c00044 	movi	r3,1
 2011098:	1884983a 	sll	r2,r3,r2
 201109c:	1007883a 	mov	r3,r2
 20110a0:	008080f4 	movhi	r2,515
 20110a4:	10884204 	addi	r2,r2,8456
 20110a8:	10800017 	ldw	r2,0(r2)
 20110ac:	1886b03a 	or	r3,r3,r2
 20110b0:	008080f4 	movhi	r2,515
 20110b4:	10884204 	addi	r2,r2,8456
 20110b8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 20110bc:	008080f4 	movhi	r2,515
 20110c0:	10884204 	addi	r2,r2,8456
 20110c4:	10800017 	ldw	r2,0(r2)
 20110c8:	100170fa 	wrctl	ienable,r2
 20110cc:	e0bffc17 	ldw	r2,-16(fp)
 20110d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20110d4:	e0bffd17 	ldw	r2,-12(fp)
 20110d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 20110dc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 20110e0:	e037883a 	mov	sp,fp
 20110e4:	df000017 	ldw	fp,0(sp)
 20110e8:	dec00104 	addi	sp,sp,4
 20110ec:	f800283a 	ret

020110f0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 20110f0:	defff904 	addi	sp,sp,-28
 20110f4:	df000615 	stw	fp,24(sp)
 20110f8:	df000604 	addi	fp,sp,24
 20110fc:	e13ffe15 	stw	r4,-8(fp)
 2011100:	e17fff15 	stw	r5,-4(fp)
 2011104:	e0bfff17 	ldw	r2,-4(fp)
 2011108:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201110c:	0005303a 	rdctl	r2,status
 2011110:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011114:	e0fffb17 	ldw	r3,-20(fp)
 2011118:	00bfff84 	movi	r2,-2
 201111c:	1884703a 	and	r2,r3,r2
 2011120:	1001703a 	wrctl	status,r2
  
  return context;
 2011124:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2011128:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 201112c:	e0bffa17 	ldw	r2,-24(fp)
 2011130:	00c00044 	movi	r3,1
 2011134:	1884983a 	sll	r2,r3,r2
 2011138:	0084303a 	nor	r2,zero,r2
 201113c:	1007883a 	mov	r3,r2
 2011140:	008080f4 	movhi	r2,515
 2011144:	10884204 	addi	r2,r2,8456
 2011148:	10800017 	ldw	r2,0(r2)
 201114c:	1886703a 	and	r3,r3,r2
 2011150:	008080f4 	movhi	r2,515
 2011154:	10884204 	addi	r2,r2,8456
 2011158:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201115c:	008080f4 	movhi	r2,515
 2011160:	10884204 	addi	r2,r2,8456
 2011164:	10800017 	ldw	r2,0(r2)
 2011168:	100170fa 	wrctl	ienable,r2
 201116c:	e0bffc17 	ldw	r2,-16(fp)
 2011170:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011174:	e0bffd17 	ldw	r2,-12(fp)
 2011178:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201117c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 2011180:	e037883a 	mov	sp,fp
 2011184:	df000017 	ldw	fp,0(sp)
 2011188:	dec00104 	addi	sp,sp,4
 201118c:	f800283a 	ret

02011190 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2011190:	defffc04 	addi	sp,sp,-16
 2011194:	df000315 	stw	fp,12(sp)
 2011198:	df000304 	addi	fp,sp,12
 201119c:	e13ffe15 	stw	r4,-8(fp)
 20111a0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 20111a4:	000530fa 	rdctl	r2,ienable
 20111a8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 20111ac:	e0bfff17 	ldw	r2,-4(fp)
 20111b0:	00c00044 	movi	r3,1
 20111b4:	1884983a 	sll	r2,r3,r2
 20111b8:	1007883a 	mov	r3,r2
 20111bc:	e0bffd17 	ldw	r2,-12(fp)
 20111c0:	1884703a 	and	r2,r3,r2
 20111c4:	1004c03a 	cmpne	r2,r2,zero
 20111c8:	10803fcc 	andi	r2,r2,255
}
 20111cc:	e037883a 	mov	sp,fp
 20111d0:	df000017 	ldw	fp,0(sp)
 20111d4:	dec00104 	addi	sp,sp,4
 20111d8:	f800283a 	ret

020111dc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 20111dc:	defff504 	addi	sp,sp,-44
 20111e0:	dfc00a15 	stw	ra,40(sp)
 20111e4:	df000915 	stw	fp,36(sp)
 20111e8:	df000904 	addi	fp,sp,36
 20111ec:	e13ffc15 	stw	r4,-16(fp)
 20111f0:	e17ffd15 	stw	r5,-12(fp)
 20111f4:	e1bffe15 	stw	r6,-8(fp)
 20111f8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 20111fc:	00bffa84 	movi	r2,-22
 2011200:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2011204:	e0bffd17 	ldw	r2,-12(fp)
 2011208:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 201120c:	e0bff817 	ldw	r2,-32(fp)
 2011210:	10800808 	cmpgei	r2,r2,32
 2011214:	1000271e 	bne	r2,zero,20112b4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011218:	0005303a 	rdctl	r2,status
 201121c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011220:	e0fffa17 	ldw	r3,-24(fp)
 2011224:	00bfff84 	movi	r2,-2
 2011228:	1884703a 	and	r2,r3,r2
 201122c:	1001703a 	wrctl	status,r2
  
  return context;
 2011230:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2011234:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 2011238:	00c080f4 	movhi	r3,515
 201123c:	18c85204 	addi	r3,r3,8520
 2011240:	e0bff817 	ldw	r2,-32(fp)
 2011244:	100490fa 	slli	r2,r2,3
 2011248:	1885883a 	add	r2,r3,r2
 201124c:	e0fffe17 	ldw	r3,-8(fp)
 2011250:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2011254:	00c080f4 	movhi	r3,515
 2011258:	18c85204 	addi	r3,r3,8520
 201125c:	e0bff817 	ldw	r2,-32(fp)
 2011260:	100490fa 	slli	r2,r2,3
 2011264:	1885883a 	add	r2,r3,r2
 2011268:	10800104 	addi	r2,r2,4
 201126c:	e0ffff17 	ldw	r3,-4(fp)
 2011270:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 2011274:	e0bffe17 	ldw	r2,-8(fp)
 2011278:	10000526 	beq	r2,zero,2011290 <alt_iic_isr_register+0xb4>
 201127c:	e0bff817 	ldw	r2,-32(fp)
 2011280:	e13ffc17 	ldw	r4,-16(fp)
 2011284:	100b883a 	mov	r5,r2
 2011288:	20110540 	call	2011054 <alt_ic_irq_enable>
 201128c:	00000406 	br	20112a0 <alt_iic_isr_register+0xc4>
 2011290:	e0bff817 	ldw	r2,-32(fp)
 2011294:	e13ffc17 	ldw	r4,-16(fp)
 2011298:	100b883a 	mov	r5,r2
 201129c:	20110f00 	call	20110f0 <alt_ic_irq_disable>
 20112a0:	e0bff715 	stw	r2,-36(fp)
 20112a4:	e0bff917 	ldw	r2,-28(fp)
 20112a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20112ac:	e0bffb17 	ldw	r2,-20(fp)
 20112b0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 20112b4:	e0bff717 	ldw	r2,-36(fp)
}
 20112b8:	e037883a 	mov	sp,fp
 20112bc:	dfc00117 	ldw	ra,4(sp)
 20112c0:	df000017 	ldw	fp,0(sp)
 20112c4:	dec00204 	addi	sp,sp,8
 20112c8:	f800283a 	ret

020112cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20112cc:	defffe04 	addi	sp,sp,-8
 20112d0:	dfc00115 	stw	ra,4(sp)
 20112d4:	df000015 	stw	fp,0(sp)
 20112d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20112dc:	008080f4 	movhi	r2,515
 20112e0:	10883304 	addi	r2,r2,8396
 20112e4:	10800017 	ldw	r2,0(r2)
 20112e8:	10000526 	beq	r2,zero,2011300 <alt_get_errno+0x34>
 20112ec:	008080f4 	movhi	r2,515
 20112f0:	10883304 	addi	r2,r2,8396
 20112f4:	10800017 	ldw	r2,0(r2)
 20112f8:	103ee83a 	callr	r2
 20112fc:	00000206 	br	2011308 <alt_get_errno+0x3c>
 2011300:	008080f4 	movhi	r2,515
 2011304:	10883e04 	addi	r2,r2,8440
}
 2011308:	e037883a 	mov	sp,fp
 201130c:	dfc00117 	ldw	ra,4(sp)
 2011310:	df000017 	ldw	fp,0(sp)
 2011314:	dec00204 	addi	sp,sp,8
 2011318:	f800283a 	ret

0201131c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 201131c:	deffed04 	addi	sp,sp,-76
 2011320:	dfc01215 	stw	ra,72(sp)
 2011324:	df001115 	stw	fp,68(sp)
 2011328:	df001104 	addi	fp,sp,68
 201132c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2011330:	e0bfff17 	ldw	r2,-4(fp)
 2011334:	10000616 	blt	r2,zero,2011350 <isatty+0x34>
 2011338:	e0bfff17 	ldw	r2,-4(fp)
 201133c:	10c00324 	muli	r3,r2,12
 2011340:	008080f4 	movhi	r2,515
 2011344:	10837c04 	addi	r2,r2,3568
 2011348:	1885883a 	add	r2,r3,r2
 201134c:	00000106 	br	2011354 <isatty+0x38>
 2011350:	0005883a 	mov	r2,zero
 2011354:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2011358:	e0bfef17 	ldw	r2,-68(fp)
 201135c:	10000e26 	beq	r2,zero,2011398 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2011360:	e0bfef17 	ldw	r2,-68(fp)
 2011364:	10800017 	ldw	r2,0(r2)
 2011368:	10800817 	ldw	r2,32(r2)
 201136c:	1000021e 	bne	r2,zero,2011378 <isatty+0x5c>
    {
      return 1;
 2011370:	00800044 	movi	r2,1
 2011374:	00000c06 	br	20113a8 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 2011378:	e0bff004 	addi	r2,fp,-64
 201137c:	e13fff17 	ldw	r4,-4(fp)
 2011380:	100b883a 	mov	r5,r2
 2011384:	2010f580 	call	2010f58 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2011388:	e0bff117 	ldw	r2,-60(fp)
 201138c:	10880020 	cmpeqi	r2,r2,8192
 2011390:	10803fcc 	andi	r2,r2,255
 2011394:	00000406 	br	20113a8 <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2011398:	20112cc0 	call	20112cc <alt_get_errno>
 201139c:	00c01444 	movi	r3,81
 20113a0:	10c00015 	stw	r3,0(r2)
    return 0;
 20113a4:	0005883a 	mov	r2,zero
  }
}
 20113a8:	e037883a 	mov	sp,fp
 20113ac:	dfc00117 	ldw	ra,4(sp)
 20113b0:	df000017 	ldw	fp,0(sp)
 20113b4:	dec00204 	addi	sp,sp,8
 20113b8:	f800283a 	ret

020113bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20113bc:	defffe04 	addi	sp,sp,-8
 20113c0:	dfc00115 	stw	ra,4(sp)
 20113c4:	df000015 	stw	fp,0(sp)
 20113c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20113cc:	008080f4 	movhi	r2,515
 20113d0:	10883304 	addi	r2,r2,8396
 20113d4:	10800017 	ldw	r2,0(r2)
 20113d8:	10000526 	beq	r2,zero,20113f0 <alt_get_errno+0x34>
 20113dc:	008080f4 	movhi	r2,515
 20113e0:	10883304 	addi	r2,r2,8396
 20113e4:	10800017 	ldw	r2,0(r2)
 20113e8:	103ee83a 	callr	r2
 20113ec:	00000206 	br	20113f8 <alt_get_errno+0x3c>
 20113f0:	008080f4 	movhi	r2,515
 20113f4:	10883e04 	addi	r2,r2,8440
}
 20113f8:	e037883a 	mov	sp,fp
 20113fc:	dfc00117 	ldw	ra,4(sp)
 2011400:	df000017 	ldw	fp,0(sp)
 2011404:	dec00204 	addi	sp,sp,8
 2011408:	f800283a 	ret

0201140c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 201140c:	defff904 	addi	sp,sp,-28
 2011410:	dfc00615 	stw	ra,24(sp)
 2011414:	df000515 	stw	fp,20(sp)
 2011418:	df000504 	addi	fp,sp,20
 201141c:	e13ffd15 	stw	r4,-12(fp)
 2011420:	e17ffe15 	stw	r5,-8(fp)
 2011424:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2011428:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201142c:	e0bffd17 	ldw	r2,-12(fp)
 2011430:	10000616 	blt	r2,zero,201144c <lseek+0x40>
 2011434:	e0bffd17 	ldw	r2,-12(fp)
 2011438:	10c00324 	muli	r3,r2,12
 201143c:	008080f4 	movhi	r2,515
 2011440:	10837c04 	addi	r2,r2,3568
 2011444:	1885883a 	add	r2,r3,r2
 2011448:	00000106 	br	2011450 <lseek+0x44>
 201144c:	0005883a 	mov	r2,zero
 2011450:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 2011454:	e0bffc17 	ldw	r2,-16(fp)
 2011458:	10001026 	beq	r2,zero,201149c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 201145c:	e0bffc17 	ldw	r2,-16(fp)
 2011460:	10800017 	ldw	r2,0(r2)
 2011464:	10800717 	ldw	r2,28(r2)
 2011468:	10000926 	beq	r2,zero,2011490 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 201146c:	e0bffc17 	ldw	r2,-16(fp)
 2011470:	10800017 	ldw	r2,0(r2)
 2011474:	10800717 	ldw	r2,28(r2)
 2011478:	e13ffc17 	ldw	r4,-16(fp)
 201147c:	e17ffe17 	ldw	r5,-8(fp)
 2011480:	e1bfff17 	ldw	r6,-4(fp)
 2011484:	103ee83a 	callr	r2
 2011488:	e0bffb15 	stw	r2,-20(fp)
 201148c:	00000506 	br	20114a4 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2011490:	00bfde84 	movi	r2,-134
 2011494:	e0bffb15 	stw	r2,-20(fp)
 2011498:	00000206 	br	20114a4 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 201149c:	00bfebc4 	movi	r2,-81
 20114a0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 20114a4:	e0bffb17 	ldw	r2,-20(fp)
 20114a8:	1000060e 	bge	r2,zero,20114c4 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
 20114ac:	20113bc0 	call	20113bc <alt_get_errno>
 20114b0:	e0fffb17 	ldw	r3,-20(fp)
 20114b4:	00c7c83a 	sub	r3,zero,r3
 20114b8:	10c00015 	stw	r3,0(r2)
    rc = -1;
 20114bc:	00bfffc4 	movi	r2,-1
 20114c0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 20114c4:	e0bffb17 	ldw	r2,-20(fp)
}
 20114c8:	e037883a 	mov	sp,fp
 20114cc:	dfc00117 	ldw	ra,4(sp)
 20114d0:	df000017 	ldw	fp,0(sp)
 20114d4:	dec00204 	addi	sp,sp,8
 20114d8:	f800283a 	ret

020114dc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20114dc:	defffd04 	addi	sp,sp,-12
 20114e0:	dfc00215 	stw	ra,8(sp)
 20114e4:	df000115 	stw	fp,4(sp)
 20114e8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20114ec:	0009883a 	mov	r4,zero
 20114f0:	2011b240 	call	2011b24 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 20114f4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 20114f8:	2011b580 	call	2011b58 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 20114fc:	010080f4 	movhi	r4,515
 2011500:	213a7204 	addi	r4,r4,-5688
 2011504:	014080f4 	movhi	r5,515
 2011508:	297a7204 	addi	r5,r5,-5688
 201150c:	018080f4 	movhi	r6,515
 2011510:	31ba7204 	addi	r6,r6,-5688
 2011514:	2013d540 	call	2013d54 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2011518:	2013b240 	call	2013b24 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 201151c:	01008074 	movhi	r4,513
 2011520:	210ee004 	addi	r4,r4,15232
 2011524:	20142b40 	call	20142b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2011528:	d1201d17 	ldw	r4,-32652(gp)
 201152c:	d0e01e17 	ldw	r3,-32648(gp)
 2011530:	d0a01f17 	ldw	r2,-32644(gp)
 2011534:	180b883a 	mov	r5,r3
 2011538:	100d883a 	mov	r6,r2
 201153c:	20052640 	call	2005264 <main>
 2011540:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2011544:	01000044 	movi	r4,1
 2011548:	2010e140 	call	2010e14 <close>
  exit (result);
 201154c:	e13fff17 	ldw	r4,-4(fp)
 2011550:	20142c80 	call	20142c8 <exit>

02011554 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 2011554:	defffe04 	addi	sp,sp,-8
 2011558:	df000115 	stw	fp,4(sp)
 201155c:	df000104 	addi	fp,sp,4
 2011560:	e13fff15 	stw	r4,-4(fp)
}
 2011564:	e037883a 	mov	sp,fp
 2011568:	df000017 	ldw	fp,0(sp)
 201156c:	dec00104 	addi	sp,sp,4
 2011570:	f800283a 	ret

02011574 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2011574:	defffe04 	addi	sp,sp,-8
 2011578:	df000115 	stw	fp,4(sp)
 201157c:	df000104 	addi	fp,sp,4
 2011580:	e13fff15 	stw	r4,-4(fp)
}
 2011584:	e037883a 	mov	sp,fp
 2011588:	df000017 	ldw	fp,0(sp)
 201158c:	dec00104 	addi	sp,sp,4
 2011590:	f800283a 	ret

02011594 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2011594:	defffe04 	addi	sp,sp,-8
 2011598:	dfc00115 	stw	ra,4(sp)
 201159c:	df000015 	stw	fp,0(sp)
 20115a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20115a4:	008080f4 	movhi	r2,515
 20115a8:	10883304 	addi	r2,r2,8396
 20115ac:	10800017 	ldw	r2,0(r2)
 20115b0:	10000526 	beq	r2,zero,20115c8 <alt_get_errno+0x34>
 20115b4:	008080f4 	movhi	r2,515
 20115b8:	10883304 	addi	r2,r2,8396
 20115bc:	10800017 	ldw	r2,0(r2)
 20115c0:	103ee83a 	callr	r2
 20115c4:	00000206 	br	20115d0 <alt_get_errno+0x3c>
 20115c8:	008080f4 	movhi	r2,515
 20115cc:	10883e04 	addi	r2,r2,8440
}
 20115d0:	e037883a 	mov	sp,fp
 20115d4:	dfc00117 	ldw	ra,4(sp)
 20115d8:	df000017 	ldw	fp,0(sp)
 20115dc:	dec00204 	addi	sp,sp,8
 20115e0:	f800283a 	ret

020115e4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 20115e4:	defff904 	addi	sp,sp,-28
 20115e8:	dfc00615 	stw	ra,24(sp)
 20115ec:	df000515 	stw	fp,20(sp)
 20115f0:	df000504 	addi	fp,sp,20
 20115f4:	e13ffd15 	stw	r4,-12(fp)
 20115f8:	e17ffe15 	stw	r5,-8(fp)
 20115fc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2011600:	e0bffd17 	ldw	r2,-12(fp)
 2011604:	10000616 	blt	r2,zero,2011620 <read+0x3c>
 2011608:	e0bffd17 	ldw	r2,-12(fp)
 201160c:	10c00324 	muli	r3,r2,12
 2011610:	008080f4 	movhi	r2,515
 2011614:	10837c04 	addi	r2,r2,3568
 2011618:	1885883a 	add	r2,r3,r2
 201161c:	00000106 	br	2011624 <read+0x40>
 2011620:	0005883a 	mov	r2,zero
 2011624:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2011628:	e0bffb17 	ldw	r2,-20(fp)
 201162c:	10002026 	beq	r2,zero,20116b0 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2011630:	e0bffb17 	ldw	r2,-20(fp)
 2011634:	10800217 	ldw	r2,8(r2)
 2011638:	108000cc 	andi	r2,r2,3
 201163c:	10800060 	cmpeqi	r2,r2,1
 2011640:	1000171e 	bne	r2,zero,20116a0 <read+0xbc>
        (fd->dev->read))
 2011644:	e0bffb17 	ldw	r2,-20(fp)
 2011648:	10800017 	ldw	r2,0(r2)
 201164c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2011650:	10001326 	beq	r2,zero,20116a0 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2011654:	e0bffb17 	ldw	r2,-20(fp)
 2011658:	10800017 	ldw	r2,0(r2)
 201165c:	10c00517 	ldw	r3,20(r2)
 2011660:	e0bfff17 	ldw	r2,-4(fp)
 2011664:	e13ffb17 	ldw	r4,-20(fp)
 2011668:	e17ffe17 	ldw	r5,-8(fp)
 201166c:	100d883a 	mov	r6,r2
 2011670:	183ee83a 	callr	r3
 2011674:	e0bffc15 	stw	r2,-16(fp)
 2011678:	e0bffc17 	ldw	r2,-16(fp)
 201167c:	1000060e 	bge	r2,zero,2011698 <read+0xb4>
        {
          ALT_ERRNO = -rval;
 2011680:	20115940 	call	2011594 <alt_get_errno>
 2011684:	e0fffc17 	ldw	r3,-16(fp)
 2011688:	00c7c83a 	sub	r3,zero,r3
 201168c:	10c00015 	stw	r3,0(r2)
          return -1;
 2011690:	00bfffc4 	movi	r2,-1
 2011694:	00000a06 	br	20116c0 <read+0xdc>
        }
        return rval;
 2011698:	e0bffc17 	ldw	r2,-16(fp)
 201169c:	00000806 	br	20116c0 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
 20116a0:	20115940 	call	2011594 <alt_get_errno>
 20116a4:	00c00344 	movi	r3,13
 20116a8:	10c00015 	stw	r3,0(r2)
 20116ac:	00000306 	br	20116bc <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 20116b0:	20115940 	call	2011594 <alt_get_errno>
 20116b4:	00c01444 	movi	r3,81
 20116b8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 20116bc:	00bfffc4 	movi	r2,-1
}
 20116c0:	e037883a 	mov	sp,fp
 20116c4:	dfc00117 	ldw	ra,4(sp)
 20116c8:	df000017 	ldw	fp,0(sp)
 20116cc:	dec00204 	addi	sp,sp,8
 20116d0:	f800283a 	ret

020116d4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 20116d4:	defffe04 	addi	sp,sp,-8
 20116d8:	df000115 	stw	fp,4(sp)
 20116dc:	df000104 	addi	fp,sp,4
 20116e0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 20116e4:	e0bfff17 	ldw	r2,-4(fp)
 20116e8:	108000d0 	cmplti	r2,r2,3
 20116ec:	10000d1e 	bne	r2,zero,2011724 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 20116f0:	00c080f4 	movhi	r3,515
 20116f4:	18c37c04 	addi	r3,r3,3568
 20116f8:	e0bfff17 	ldw	r2,-4(fp)
 20116fc:	10800324 	muli	r2,r2,12
 2011700:	1885883a 	add	r2,r3,r2
 2011704:	10800204 	addi	r2,r2,8
 2011708:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 201170c:	00c080f4 	movhi	r3,515
 2011710:	18c37c04 	addi	r3,r3,3568
 2011714:	e0bfff17 	ldw	r2,-4(fp)
 2011718:	10800324 	muli	r2,r2,12
 201171c:	1885883a 	add	r2,r3,r2
 2011720:	10000015 	stw	zero,0(r2)
  }
}
 2011724:	e037883a 	mov	sp,fp
 2011728:	df000017 	ldw	fp,0(sp)
 201172c:	dec00104 	addi	sp,sp,4
 2011730:	f800283a 	ret

02011734 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2011734:	defff904 	addi	sp,sp,-28
 2011738:	df000615 	stw	fp,24(sp)
 201173c:	df000604 	addi	fp,sp,24
 2011740:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011744:	0005303a 	rdctl	r2,status
 2011748:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201174c:	e0fffc17 	ldw	r3,-16(fp)
 2011750:	00bfff84 	movi	r2,-2
 2011754:	1884703a 	and	r2,r3,r2
 2011758:	1001703a 	wrctl	status,r2
  
  return context;
 201175c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2011760:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2011764:	d0a00f17 	ldw	r2,-32708(gp)
 2011768:	10c000c4 	addi	r3,r2,3
 201176c:	00bfff04 	movi	r2,-4
 2011770:	1884703a 	and	r2,r3,r2
 2011774:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2011778:	d0e00f17 	ldw	r3,-32708(gp)
 201177c:	e0bfff17 	ldw	r2,-4(fp)
 2011780:	1885883a 	add	r2,r3,r2
 2011784:	00c10034 	movhi	r3,1024
 2011788:	18c00004 	addi	r3,r3,0
 201178c:	1880062e 	bgeu	r3,r2,20117a8 <sbrk+0x74>
 2011790:	e0bffa17 	ldw	r2,-24(fp)
 2011794:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011798:	e0bffd17 	ldw	r2,-12(fp)
 201179c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 20117a0:	00bfffc4 	movi	r2,-1
 20117a4:	00000b06 	br	20117d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 20117a8:	d0a00f17 	ldw	r2,-32708(gp)
 20117ac:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 20117b0:	d0e00f17 	ldw	r3,-32708(gp)
 20117b4:	e0bfff17 	ldw	r2,-4(fp)
 20117b8:	1885883a 	add	r2,r3,r2
 20117bc:	d0a00f15 	stw	r2,-32708(gp)
 20117c0:	e0bffa17 	ldw	r2,-24(fp)
 20117c4:	e0bffe15 	stw	r2,-8(fp)
 20117c8:	e0bffe17 	ldw	r2,-8(fp)
 20117cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 20117d0:	e0bffb17 	ldw	r2,-20(fp)
} 
 20117d4:	e037883a 	mov	sp,fp
 20117d8:	df000017 	ldw	fp,0(sp)
 20117dc:	dec00104 	addi	sp,sp,4
 20117e0:	f800283a 	ret

020117e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 20117e4:	defffa04 	addi	sp,sp,-24
 20117e8:	df000515 	stw	fp,20(sp)
 20117ec:	df000504 	addi	fp,sp,20
 20117f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20117f4:	0005303a 	rdctl	r2,status
 20117f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20117fc:	e0fffc17 	ldw	r3,-16(fp)
 2011800:	00bfff84 	movi	r2,-2
 2011804:	1884703a 	and	r2,r3,r2
 2011808:	1001703a 	wrctl	status,r2
  
  return context;
 201180c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2011810:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 2011814:	e0bfff17 	ldw	r2,-4(fp)
 2011818:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 201181c:	e0bffd17 	ldw	r2,-12(fp)
 2011820:	10800017 	ldw	r2,0(r2)
 2011824:	e0fffd17 	ldw	r3,-12(fp)
 2011828:	18c00117 	ldw	r3,4(r3)
 201182c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2011830:	e0bffd17 	ldw	r2,-12(fp)
 2011834:	10800117 	ldw	r2,4(r2)
 2011838:	e0fffd17 	ldw	r3,-12(fp)
 201183c:	18c00017 	ldw	r3,0(r3)
 2011840:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2011844:	e0bffd17 	ldw	r2,-12(fp)
 2011848:	e0fffd17 	ldw	r3,-12(fp)
 201184c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2011850:	e0bffd17 	ldw	r2,-12(fp)
 2011854:	e0fffd17 	ldw	r3,-12(fp)
 2011858:	10c00015 	stw	r3,0(r2)
 201185c:	e0bffb17 	ldw	r2,-20(fp)
 2011860:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011864:	e0bffe17 	ldw	r2,-8(fp)
 2011868:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 201186c:	e037883a 	mov	sp,fp
 2011870:	df000017 	ldw	fp,0(sp)
 2011874:	dec00104 	addi	sp,sp,4
 2011878:	f800283a 	ret

0201187c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 201187c:	defffb04 	addi	sp,sp,-20
 2011880:	dfc00415 	stw	ra,16(sp)
 2011884:	df000315 	stw	fp,12(sp)
 2011888:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 201188c:	d0a01017 	ldw	r2,-32704(gp)
 2011890:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2011894:	d0a02117 	ldw	r2,-32636(gp)
 2011898:	10800044 	addi	r2,r2,1
 201189c:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20118a0:	00002e06 	br	201195c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 20118a4:	e0bffd17 	ldw	r2,-12(fp)
 20118a8:	10800017 	ldw	r2,0(r2)
 20118ac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 20118b0:	e0bffd17 	ldw	r2,-12(fp)
 20118b4:	10800403 	ldbu	r2,16(r2)
 20118b8:	10803fcc 	andi	r2,r2,255
 20118bc:	10000426 	beq	r2,zero,20118d0 <alt_tick+0x54>
 20118c0:	d0a02117 	ldw	r2,-32636(gp)
 20118c4:	1000021e 	bne	r2,zero,20118d0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 20118c8:	e0bffd17 	ldw	r2,-12(fp)
 20118cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 20118d0:	e0bffd17 	ldw	r2,-12(fp)
 20118d4:	10800217 	ldw	r2,8(r2)
 20118d8:	d0e02117 	ldw	r3,-32636(gp)
 20118dc:	18801d36 	bltu	r3,r2,2011954 <alt_tick+0xd8>
 20118e0:	e0bffd17 	ldw	r2,-12(fp)
 20118e4:	10800403 	ldbu	r2,16(r2)
 20118e8:	10803fcc 	andi	r2,r2,255
 20118ec:	1000191e 	bne	r2,zero,2011954 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 20118f0:	e0bffd17 	ldw	r2,-12(fp)
 20118f4:	10c00317 	ldw	r3,12(r2)
 20118f8:	e0bffd17 	ldw	r2,-12(fp)
 20118fc:	10800517 	ldw	r2,20(r2)
 2011900:	1009883a 	mov	r4,r2
 2011904:	183ee83a 	callr	r3
 2011908:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 201190c:	e0bfff17 	ldw	r2,-4(fp)
 2011910:	1000031e 	bne	r2,zero,2011920 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 2011914:	e13ffd17 	ldw	r4,-12(fp)
 2011918:	20117e40 	call	20117e4 <alt_alarm_stop>
 201191c:	00000d06 	br	2011954 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2011920:	e0bffd17 	ldw	r2,-12(fp)
 2011924:	10c00217 	ldw	r3,8(r2)
 2011928:	e0bfff17 	ldw	r2,-4(fp)
 201192c:	1887883a 	add	r3,r3,r2
 2011930:	e0bffd17 	ldw	r2,-12(fp)
 2011934:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2011938:	e0bffd17 	ldw	r2,-12(fp)
 201193c:	10c00217 	ldw	r3,8(r2)
 2011940:	d0a02117 	ldw	r2,-32636(gp)
 2011944:	1880032e 	bgeu	r3,r2,2011954 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2011948:	e0bffd17 	ldw	r2,-12(fp)
 201194c:	00c00044 	movi	r3,1
 2011950:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 2011954:	e0bffe17 	ldw	r2,-8(fp)
 2011958:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 201195c:	e0fffd17 	ldw	r3,-12(fp)
 2011960:	d0a01004 	addi	r2,gp,-32704
 2011964:	18bfcf1e 	bne	r3,r2,20118a4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 2011968:	0001883a 	nop
}
 201196c:	e037883a 	mov	sp,fp
 2011970:	dfc00117 	ldw	ra,4(sp)
 2011974:	df000017 	ldw	fp,0(sp)
 2011978:	dec00204 	addi	sp,sp,8
 201197c:	f800283a 	ret

02011980 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 2011980:	defffd04 	addi	sp,sp,-12
 2011984:	dfc00215 	stw	ra,8(sp)
 2011988:	df000115 	stw	fp,4(sp)
 201198c:	df000104 	addi	fp,sp,4
 2011990:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 2011994:	e13fff17 	ldw	r4,-4(fp)
 2011998:	20138e00 	call	20138e0 <alt_busy_sleep>
}
 201199c:	e037883a 	mov	sp,fp
 20119a0:	dfc00117 	ldw	ra,4(sp)
 20119a4:	df000017 	ldw	fp,0(sp)
 20119a8:	dec00204 	addi	sp,sp,8
 20119ac:	f800283a 	ret

020119b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20119b0:	defffe04 	addi	sp,sp,-8
 20119b4:	dfc00115 	stw	ra,4(sp)
 20119b8:	df000015 	stw	fp,0(sp)
 20119bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20119c0:	008080f4 	movhi	r2,515
 20119c4:	10883304 	addi	r2,r2,8396
 20119c8:	10800017 	ldw	r2,0(r2)
 20119cc:	10000526 	beq	r2,zero,20119e4 <alt_get_errno+0x34>
 20119d0:	008080f4 	movhi	r2,515
 20119d4:	10883304 	addi	r2,r2,8396
 20119d8:	10800017 	ldw	r2,0(r2)
 20119dc:	103ee83a 	callr	r2
 20119e0:	00000206 	br	20119ec <alt_get_errno+0x3c>
 20119e4:	008080f4 	movhi	r2,515
 20119e8:	10883e04 	addi	r2,r2,8440
}
 20119ec:	e037883a 	mov	sp,fp
 20119f0:	dfc00117 	ldw	ra,4(sp)
 20119f4:	df000017 	ldw	fp,0(sp)
 20119f8:	dec00204 	addi	sp,sp,8
 20119fc:	f800283a 	ret

02011a00 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2011a00:	defff904 	addi	sp,sp,-28
 2011a04:	dfc00615 	stw	ra,24(sp)
 2011a08:	df000515 	stw	fp,20(sp)
 2011a0c:	df000504 	addi	fp,sp,20
 2011a10:	e13ffd15 	stw	r4,-12(fp)
 2011a14:	e17ffe15 	stw	r5,-8(fp)
 2011a18:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2011a1c:	e0bffd17 	ldw	r2,-12(fp)
 2011a20:	10000616 	blt	r2,zero,2011a3c <write+0x3c>
 2011a24:	e0bffd17 	ldw	r2,-12(fp)
 2011a28:	10c00324 	muli	r3,r2,12
 2011a2c:	008080f4 	movhi	r2,515
 2011a30:	10837c04 	addi	r2,r2,3568
 2011a34:	1885883a 	add	r2,r3,r2
 2011a38:	00000106 	br	2011a40 <write+0x40>
 2011a3c:	0005883a 	mov	r2,zero
 2011a40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2011a44:	e0bffb17 	ldw	r2,-20(fp)
 2011a48:	10001f26 	beq	r2,zero,2011ac8 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2011a4c:	e0bffb17 	ldw	r2,-20(fp)
 2011a50:	10800217 	ldw	r2,8(r2)
 2011a54:	108000cc 	andi	r2,r2,3
 2011a58:	10001726 	beq	r2,zero,2011ab8 <write+0xb8>
 2011a5c:	e0bffb17 	ldw	r2,-20(fp)
 2011a60:	10800017 	ldw	r2,0(r2)
 2011a64:	10800617 	ldw	r2,24(r2)
 2011a68:	10001326 	beq	r2,zero,2011ab8 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2011a6c:	e0bffb17 	ldw	r2,-20(fp)
 2011a70:	10800017 	ldw	r2,0(r2)
 2011a74:	10c00617 	ldw	r3,24(r2)
 2011a78:	e0bfff17 	ldw	r2,-4(fp)
 2011a7c:	e13ffb17 	ldw	r4,-20(fp)
 2011a80:	e17ffe17 	ldw	r5,-8(fp)
 2011a84:	100d883a 	mov	r6,r2
 2011a88:	183ee83a 	callr	r3
 2011a8c:	e0bffc15 	stw	r2,-16(fp)
 2011a90:	e0bffc17 	ldw	r2,-16(fp)
 2011a94:	1000060e 	bge	r2,zero,2011ab0 <write+0xb0>
      {
        ALT_ERRNO = -rval;
 2011a98:	20119b00 	call	20119b0 <alt_get_errno>
 2011a9c:	e0fffc17 	ldw	r3,-16(fp)
 2011aa0:	00c7c83a 	sub	r3,zero,r3
 2011aa4:	10c00015 	stw	r3,0(r2)
        return -1;
 2011aa8:	00bfffc4 	movi	r2,-1
 2011aac:	00000a06 	br	2011ad8 <write+0xd8>
      }
      return rval;
 2011ab0:	e0bffc17 	ldw	r2,-16(fp)
 2011ab4:	00000806 	br	2011ad8 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2011ab8:	20119b00 	call	20119b0 <alt_get_errno>
 2011abc:	00c00344 	movi	r3,13
 2011ac0:	10c00015 	stw	r3,0(r2)
 2011ac4:	00000306 	br	2011ad4 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 2011ac8:	20119b00 	call	20119b0 <alt_get_errno>
 2011acc:	00c01444 	movi	r3,81
 2011ad0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 2011ad4:	00bfffc4 	movi	r2,-1
}
 2011ad8:	e037883a 	mov	sp,fp
 2011adc:	dfc00117 	ldw	ra,4(sp)
 2011ae0:	df000017 	ldw	fp,0(sp)
 2011ae4:	dec00204 	addi	sp,sp,8
 2011ae8:	f800283a 	ret

02011aec <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2011aec:	defffd04 	addi	sp,sp,-12
 2011af0:	dfc00215 	stw	ra,8(sp)
 2011af4:	df000115 	stw	fp,4(sp)
 2011af8:	df000104 	addi	fp,sp,4
 2011afc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2011b00:	e13fff17 	ldw	r4,-4(fp)
 2011b04:	014080f4 	movhi	r5,515
 2011b08:	29483004 	addi	r5,r5,8384
 2011b0c:	2013a840 	call	2013a84 <alt_dev_llist_insert>
}
 2011b10:	e037883a 	mov	sp,fp
 2011b14:	dfc00117 	ldw	ra,4(sp)
 2011b18:	df000017 	ldw	fp,0(sp)
 2011b1c:	dec00204 	addi	sp,sp,8
 2011b20:	f800283a 	ret

02011b24 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2011b24:	defffd04 	addi	sp,sp,-12
 2011b28:	dfc00215 	stw	ra,8(sp)
 2011b2c:	df000115 	stw	fp,4(sp)
 2011b30:	df000104 	addi	fp,sp,4
 2011b34:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 2011b38:	201403c0 	call	201403c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2011b3c:	00800044 	movi	r2,1
 2011b40:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2011b44:	e037883a 	mov	sp,fp
 2011b48:	dfc00117 	ldw	ra,4(sp)
 2011b4c:	df000017 	ldw	fp,0(sp)
 2011b50:	dec00204 	addi	sp,sp,8
 2011b54:	f800283a 	ret

02011b58 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2011b58:	defffe04 	addi	sp,sp,-8
 2011b5c:	dfc00115 	stw	ra,4(sp)
 2011b60:	df000015 	stw	fp,0(sp)
 2011b64:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 2011b68:	01010034 	movhi	r4,1024
 2011b6c:	000b883a 	mov	r5,zero
 2011b70:	01800144 	movi	r6,5
 2011b74:	01c0fa04 	movi	r7,1000
 2011b78:	20132340 	call	2013234 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS_FLASH_CONTROLLER_0, epcs_flash_controller_0);
 2011b7c:	010080f4 	movhi	r4,515
 2011b80:	2103dc04 	addi	r4,r4,3952
 2011b84:	2011bfc0 	call	2011bfc <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2011b88:	010080f4 	movhi	r4,515
 2011b8c:	21041804 	addi	r4,r4,4192
 2011b90:	000b883a 	mov	r5,zero
 2011b94:	01800044 	movi	r6,1
 2011b98:	20126b80 	call	20126b8 <altera_avalon_jtag_uart_init>
 2011b9c:	010080f4 	movhi	r4,515
 2011ba0:	21040e04 	addi	r4,r4,4152
 2011ba4:	2011aec0 	call	2011aec <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( TOUCH_PANEL_SPI, touch_panel_spi);
 2011ba8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
 2011bac:	0001883a 	nop
}
 2011bb0:	e037883a 	mov	sp,fp
 2011bb4:	dfc00117 	ldw	ra,4(sp)
 2011bb8:	df000017 	ldw	fp,0(sp)
 2011bbc:	dec00204 	addi	sp,sp,8
 2011bc0:	f800283a 	ret

02011bc4 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 2011bc4:	defffd04 	addi	sp,sp,-12
 2011bc8:	dfc00215 	stw	ra,8(sp)
 2011bcc:	df000115 	stw	fp,4(sp)
 2011bd0:	df000104 	addi	fp,sp,4
 2011bd4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 2011bd8:	e13fff17 	ldw	r4,-4(fp)
 2011bdc:	014080f4 	movhi	r5,515
 2011be0:	29483804 	addi	r5,r5,8416
 2011be4:	2013a840 	call	2013a84 <alt_dev_llist_insert>
}
 2011be8:	e037883a 	mov	sp,fp
 2011bec:	dfc00117 	ldw	ra,4(sp)
 2011bf0:	df000017 	ldw	fp,0(sp)
 2011bf4:	dec00204 	addi	sp,sp,8
 2011bf8:	f800283a 	ret

02011bfc <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 2011bfc:	defffc04 	addi	sp,sp,-16
 2011c00:	dfc00315 	stw	ra,12(sp)
 2011c04:	df000215 	stw	fp,8(sp)
 2011c08:	df000204 	addi	fp,sp,8
 2011c0c:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2011c10:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 2011c14:	e13fff17 	ldw	r4,-4(fp)
 2011c18:	2011c500 	call	2011c50 <alt_epcs_flash_query>
 2011c1c:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 2011c20:	e0bffe17 	ldw	r2,-8(fp)
 2011c24:	1000041e 	bne	r2,zero,2011c38 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 2011c28:	e0bfff17 	ldw	r2,-4(fp)
 2011c2c:	1009883a 	mov	r4,r2
 2011c30:	2011bc40 	call	2011bc4 <alt_flash_device_register>
 2011c34:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 2011c38:	e0bffe17 	ldw	r2,-8(fp)
}
 2011c3c:	e037883a 	mov	sp,fp
 2011c40:	dfc00117 	ldw	ra,4(sp)
 2011c44:	df000017 	ldw	fp,0(sp)
 2011c48:	dec00204 	addi	sp,sp,8
 2011c4c:	f800283a 	ret

02011c50 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 2011c50:	defffc04 	addi	sp,sp,-16
 2011c54:	dfc00315 	stw	ra,12(sp)
 2011c58:	df000215 	stw	fp,8(sp)
 2011c5c:	df000204 	addi	fp,sp,8
 2011c60:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2011c64:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 2011c68:	e0bfff17 	ldw	r2,-4(fp)
 2011c6c:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
    epcs_read_electronic_signature(flash->register_base);
 2011c70:	e0bfff17 	ldw	r2,-4(fp)
 2011c74:	10802d17 	ldw	r2,180(r2)
 2011c78:	1009883a 	mov	r4,r2
 2011c7c:	20137480 	call	2013748 <epcs_read_electronic_signature>
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
  
  /* Send the RES command sequence */
  flash->silicon_id =
 2011c80:	10c03fcc 	andi	r3,r2,255
 2011c84:	e0bfff17 	ldw	r2,-4(fp)
 2011c88:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 2011c8c:	e0bfff17 	ldw	r2,-4(fp)
 2011c90:	10802f17 	ldw	r2,188(r2)
 2011c94:	10800598 	cmpnei	r2,r2,22
 2011c98:	10000a1e 	bne	r2,zero,2011cc4 <alt_epcs_flash_query+0x74>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 2011c9c:	e0bfff17 	ldw	r2,-4(fp)
 2011ca0:	00c02034 	movhi	r3,128
 2011ca4:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 128;
 2011ca8:	e0bfff17 	ldw	r2,-4(fp)
 2011cac:	00c02004 	movi	r3,128
 2011cb0:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2011cb4:	e0bfff17 	ldw	r2,-4(fp)
 2011cb8:	00c00074 	movhi	r3,1
 2011cbc:	10c01015 	stw	r3,64(r2)
 2011cc0:	00007306 	br	2011e90 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 2011cc4:	e0bfff17 	ldw	r2,-4(fp)
 2011cc8:	10802f17 	ldw	r2,188(r2)
 2011ccc:	10800518 	cmpnei	r2,r2,20
 2011cd0:	10000a1e 	bne	r2,zero,2011cfc <alt_epcs_flash_query+0xac>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2011cd4:	e0bfff17 	ldw	r2,-4(fp)
 2011cd8:	00c00834 	movhi	r3,32
 2011cdc:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 32;
 2011ce0:	e0bfff17 	ldw	r2,-4(fp)
 2011ce4:	00c00804 	movi	r3,32
 2011ce8:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2011cec:	e0bfff17 	ldw	r2,-4(fp)
 2011cf0:	00c00074 	movhi	r3,1
 2011cf4:	10c01015 	stw	r3,64(r2)
 2011cf8:	00006506 	br	2011e90 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 2011cfc:	e0bfff17 	ldw	r2,-4(fp)
 2011d00:	10802f17 	ldw	r2,188(r2)
 2011d04:	108004d8 	cmpnei	r2,r2,19
 2011d08:	10000a1e 	bne	r2,zero,2011d34 <alt_epcs_flash_query+0xe4>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 2011d0c:	e0bfff17 	ldw	r2,-4(fp)
 2011d10:	00c00434 	movhi	r3,16
 2011d14:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 16;
 2011d18:	e0bfff17 	ldw	r2,-4(fp)
 2011d1c:	00c00404 	movi	r3,16
 2011d20:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2011d24:	e0bfff17 	ldw	r2,-4(fp)
 2011d28:	00c00074 	movhi	r3,1
 2011d2c:	10c01015 	stw	r3,64(r2)
 2011d30:	00005706 	br	2011e90 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 2011d34:	e0bfff17 	ldw	r2,-4(fp)
 2011d38:	10802f17 	ldw	r2,188(r2)
 2011d3c:	10800498 	cmpnei	r2,r2,18
 2011d40:	10000a1e 	bne	r2,zero,2011d6c <alt_epcs_flash_query+0x11c>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 2011d44:	e0bfff17 	ldw	r2,-4(fp)
 2011d48:	00c00234 	movhi	r3,8
 2011d4c:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 8;
 2011d50:	e0bfff17 	ldw	r2,-4(fp)
 2011d54:	00c00204 	movi	r3,8
 2011d58:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 65536;
 2011d5c:	e0bfff17 	ldw	r2,-4(fp)
 2011d60:	00c00074 	movhi	r3,1
 2011d64:	10c01015 	stw	r3,64(r2)
 2011d68:	00004906 	br	2011e90 <alt_epcs_flash_query+0x240>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 2011d6c:	e0bfff17 	ldw	r2,-4(fp)
 2011d70:	10802f17 	ldw	r2,188(r2)
 2011d74:	10800418 	cmpnei	r2,r2,16
 2011d78:	10000a1e 	bne	r2,zero,2011da4 <alt_epcs_flash_query+0x154>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 2011d7c:	e0bfff17 	ldw	r2,-4(fp)
 2011d80:	00c000b4 	movhi	r3,2
 2011d84:	10c00e15 	stw	r3,56(r2)
    flash->dev.region_info[0].number_of_blocks = 4;
 2011d88:	e0bfff17 	ldw	r2,-4(fp)
 2011d8c:	00c00104 	movi	r3,4
 2011d90:	10c00f15 	stw	r3,60(r2)
    flash->dev.region_info[0].block_size = 32768;
 2011d94:	e0bfff17 	ldw	r2,-4(fp)
 2011d98:	00e00014 	movui	r3,32768
 2011d9c:	10c01015 	stw	r3,64(r2)
 2011da0:	00003b06 	br	2011e90 <alt_epcs_flash_query+0x240>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 2011da4:	e0bfff17 	ldw	r2,-4(fp)
 2011da8:	10802d17 	ldw	r2,180(r2)
 2011dac:	1009883a 	mov	r4,r2
 2011db0:	20137b00 	call	20137b0 <epcs_read_device_id>
 2011db4:	e0ffff17 	ldw	r3,-4(fp)
 2011db8:	18802f15 	stw	r2,188(r3)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 2011dbc:	e0bfff17 	ldw	r2,-4(fp)
 2011dc0:	10c02f17 	ldw	r3,188(r2)
 2011dc4:	00804034 	movhi	r2,256
 2011dc8:	10bfffc4 	addi	r2,r2,-1
 2011dcc:	1886703a 	and	r3,r3,r2
 2011dd0:	00800874 	movhi	r2,33
 2011dd4:	10ae8604 	addi	r2,r2,-17896
 2011dd8:	18800a1e 	bne	r3,r2,2011e04 <alt_epcs_flash_query+0x1b4>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2011ddc:	e0bfff17 	ldw	r2,-4(fp)
 2011de0:	00c04034 	movhi	r3,256
 2011de4:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 2011de8:	e0bfff17 	ldw	r2,-4(fp)
 2011dec:	00c04004 	movi	r3,256
 2011df0:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2011df4:	e0bfff17 	ldw	r2,-4(fp)
 2011df8:	00c00074 	movhi	r3,1
 2011dfc:	10c01015 	stw	r3,64(r2)
 2011e00:	00002306 	br	2011e90 <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 2011e04:	e0bfff17 	ldw	r2,-4(fp)
 2011e08:	10802f17 	ldw	r2,188(r2)
 2011e0c:	10803fcc 	andi	r2,r2,255
 2011e10:	10800618 	cmpnei	r2,r2,24
 2011e14:	10000a1e 	bne	r2,zero,2011e40 <alt_epcs_flash_query+0x1f0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2011e18:	e0bfff17 	ldw	r2,-4(fp)
 2011e1c:	00c04034 	movhi	r3,256
 2011e20:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 64;
 2011e24:	e0bfff17 	ldw	r2,-4(fp)
 2011e28:	00c01004 	movi	r3,64
 2011e2c:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 262144;
 2011e30:	e0bfff17 	ldw	r2,-4(fp)
 2011e34:	00c00134 	movhi	r3,4
 2011e38:	10c01015 	stw	r3,64(r2)
 2011e3c:	00001406 	br	2011e90 <alt_epcs_flash_query+0x240>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 2011e40:	e0bfff17 	ldw	r2,-4(fp)
 2011e44:	10802f17 	ldw	r2,188(r2)
 2011e48:	10803fcc 	andi	r2,r2,255
 2011e4c:	10800658 	cmpnei	r2,r2,25
 2011e50:	10000d1e 	bne	r2,zero,2011e88 <alt_epcs_flash_query+0x238>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 2011e54:	e0bfff17 	ldw	r2,-4(fp)
 2011e58:	00c08034 	movhi	r3,512
 2011e5c:	10c00e15 	stw	r3,56(r2)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 2011e60:	e0bfff17 	ldw	r2,-4(fp)
 2011e64:	00c08004 	movi	r3,512
 2011e68:	10c00f15 	stw	r3,60(r2)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2011e6c:	e0bfff17 	ldw	r2,-4(fp)
 2011e70:	00c00074 	movhi	r3,1
 2011e74:	10c01015 	stw	r3,64(r2)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 2011e78:	e0bfff17 	ldw	r2,-4(fp)
 2011e7c:	00c00044 	movi	r3,1
 2011e80:	10c03115 	stw	r3,196(r2)
 2011e84:	00000206 	br	2011e90 <alt_epcs_flash_query+0x240>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 2011e88:	00bffb44 	movi	r2,-19
 2011e8c:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 2011e90:	e0bfff17 	ldw	r2,-4(fp)
 2011e94:	10800e17 	ldw	r2,56(r2)
 2011e98:	1007883a 	mov	r3,r2
 2011e9c:	e0bfff17 	ldw	r2,-4(fp)
 2011ea0:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 2011ea4:	e0bfff17 	ldw	r2,-4(fp)
 2011ea8:	00c00044 	movi	r3,1
 2011eac:	10c00c15 	stw	r3,48(r2)
  flash->dev.region_info[0].offset = 0;
 2011eb0:	e0bfff17 	ldw	r2,-4(fp)
 2011eb4:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 2011eb8:	e0bfff17 	ldw	r2,-4(fp)
 2011ebc:	00c04004 	movi	r3,256
 2011ec0:	10c03015 	stw	r3,192(r2)

  /* Consider clearing all BP bits here. */
  return ret_code;
 2011ec4:	e0bffe17 	ldw	r2,-8(fp)
}
 2011ec8:	e037883a 	mov	sp,fp
 2011ecc:	dfc00117 	ldw	ra,4(sp)
 2011ed0:	df000017 	ldw	fp,0(sp)
 2011ed4:	dec00204 	addi	sp,sp,8
 2011ed8:	f800283a 	ret

02011edc <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 2011edc:	deffee04 	addi	sp,sp,-72
 2011ee0:	dfc01115 	stw	ra,68(sp)
 2011ee4:	df001015 	stw	fp,64(sp)
 2011ee8:	df001004 	addi	fp,sp,64
 2011eec:	e13ffc15 	stw	r4,-16(fp)
 2011ef0:	e17ffd15 	stw	r5,-12(fp)
 2011ef4:	e1bffe15 	stw	r6,-8(fp)
 2011ef8:	e1ffff15 	stw	r7,-4(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 2011efc:	00800804 	movi	r2,32
 2011f00:	e0bff115 	stw	r2,-60(fp)
  int current_offset = 0;
 2011f04:	e03ff015 	stw	zero,-64(fp)

  while (n > 0)
 2011f08:	00002606 	br	2011fa4 <alt_epcs_flash_memcmp+0xc8>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 2011f0c:	e0bff117 	ldw	r2,-60(fp)
 2011f10:	e0ffff17 	ldw	r3,-4(fp)
 2011f14:	1880012e 	bgeu	r3,r2,2011f1c <alt_epcs_flash_memcmp+0x40>
 2011f18:	1805883a 	mov	r2,r3
 2011f1c:	e0bff215 	stw	r2,-56(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2011f20:	e0fffe17 	ldw	r3,-8(fp)
 2011f24:	e0bff017 	ldw	r2,-64(fp)
 2011f28:	1887883a 	add	r3,r3,r2
 2011f2c:	e0bff404 	addi	r2,fp,-48
 2011f30:	e13ffc17 	ldw	r4,-16(fp)
 2011f34:	180b883a 	mov	r5,r3
 2011f38:	100d883a 	mov	r6,r2
 2011f3c:	e1fff217 	ldw	r7,-56(fp)
 2011f40:	20124bc0 	call	20124bc <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 2011f44:	1000020e 	bge	r2,zero,2011f50 <alt_epcs_flash_memcmp+0x74>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 2011f48:	00bfffc4 	movi	r2,-1
 2011f4c:	00001806 	br	2011fb0 <alt_epcs_flash_memcmp+0xd4>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2011f50:	e0bff017 	ldw	r2,-64(fp)
 2011f54:	e0fffd17 	ldw	r3,-12(fp)
 2011f58:	1889883a 	add	r4,r3,r2
 2011f5c:	e0bff217 	ldw	r2,-56(fp)
 2011f60:	e0fff404 	addi	r3,fp,-48
 2011f64:	180b883a 	mov	r5,r3
 2011f68:	100d883a 	mov	r6,r2
 2011f6c:	20143000 	call	2014300 <memcmp>
 2011f70:	e0bff315 	stw	r2,-52(fp)
    if (this_chunk_cmp)
 2011f74:	e0bff317 	ldw	r2,-52(fp)
 2011f78:	10000226 	beq	r2,zero,2011f84 <alt_epcs_flash_memcmp+0xa8>
    {
      return this_chunk_cmp;
 2011f7c:	e0bff317 	ldw	r2,-52(fp)
 2011f80:	00000b06 	br	2011fb0 <alt_epcs_flash_memcmp+0xd4>
    }

    n -= this_chunk_size;
 2011f84:	e0bff217 	ldw	r2,-56(fp)
 2011f88:	e0ffff17 	ldw	r3,-4(fp)
 2011f8c:	1885c83a 	sub	r2,r3,r2
 2011f90:	e0bfff15 	stw	r2,-4(fp)
    current_offset += this_chunk_size;
 2011f94:	e0fff017 	ldw	r3,-64(fp)
 2011f98:	e0bff217 	ldw	r2,-56(fp)
 2011f9c:	1885883a 	add	r2,r3,r2
 2011fa0:	e0bff015 	stw	r2,-64(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 2011fa4:	e0bfff17 	ldw	r2,-4(fp)
 2011fa8:	103fd81e 	bne	r2,zero,2011f0c <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 2011fac:	0005883a 	mov	r2,zero
}
 2011fb0:	e037883a 	mov	sp,fp
 2011fb4:	dfc00117 	ldw	ra,4(sp)
 2011fb8:	df000017 	ldw	fp,0(sp)
 2011fbc:	dec00204 	addi	sp,sp,8
 2011fc0:	f800283a 	ret

02011fc4 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 2011fc4:	defff404 	addi	sp,sp,-48
 2011fc8:	dfc00b15 	stw	ra,44(sp)
 2011fcc:	df000a15 	stw	fp,40(sp)
 2011fd0:	df000a04 	addi	fp,sp,40
 2011fd4:	e13ffc15 	stw	r4,-16(fp)
 2011fd8:	e17ffd15 	stw	r5,-12(fp)
 2011fdc:	e1bffe15 	stw	r6,-8(fp)
 2011fe0:	e1ffff15 	stw	r7,-4(fp)
  int         ret_code = 0;
 2011fe4:	e03ff715 	stw	zero,-36(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2011fe8:	e03ff815 	stw	zero,-32(fp)
 2011fec:	00008306 	br	20121fc <alt_epcs_flash_write+0x238>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2011ff0:	e0fffc17 	ldw	r3,-16(fp)
 2011ff4:	e0bff817 	ldw	r2,-32(fp)
 2011ff8:	1004913a 	slli	r2,r2,4
 2011ffc:	1885883a 	add	r2,r3,r2
 2012000:	10800d04 	addi	r2,r2,52
 2012004:	10800017 	ldw	r2,0(r2)
 2012008:	e0fffd17 	ldw	r3,-12(fp)
 201200c:	18807816 	blt	r3,r2,20121f0 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
 2012010:	e0fffc17 	ldw	r3,-16(fp)
 2012014:	e0bff817 	ldw	r2,-32(fp)
 2012018:	1004913a 	slli	r2,r2,4
 201201c:	1885883a 	add	r2,r3,r2
 2012020:	10800d04 	addi	r2,r2,52
 2012024:	10c00017 	ldw	r3,0(r2)
      flash_info->region_info[i].region_size)))
 2012028:	e13ffc17 	ldw	r4,-16(fp)
 201202c:	e0bff817 	ldw	r2,-32(fp)
 2012030:	1004913a 	slli	r2,r2,4
 2012034:	2085883a 	add	r2,r4,r2
 2012038:	10800e04 	addi	r2,r2,56
 201203c:	10800017 	ldw	r2,0(r2)
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
      (offset < (flash_info->region_info[i].offset +
 2012040:	1885883a 	add	r2,r3,r2
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2012044:	e0fffd17 	ldw	r3,-12(fp)
 2012048:	1880690e 	bge	r3,r2,20121f0 <alt_epcs_flash_write+0x22c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 201204c:	e0fffc17 	ldw	r3,-16(fp)
 2012050:	e0bff817 	ldw	r2,-32(fp)
 2012054:	1004913a 	slli	r2,r2,4
 2012058:	1885883a 	add	r2,r3,r2
 201205c:	10800d04 	addi	r2,r2,52
 2012060:	10800017 	ldw	r2,0(r2)
 2012064:	e0bffa15 	stw	r2,-24(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2012068:	e03ff915 	stw	zero,-28(fp)
 201206c:	00005806 	br	20121d0 <alt_epcs_flash_write+0x20c>
      {
        if ((offset >= current_offset ) &&
 2012070:	e0fffd17 	ldw	r3,-12(fp)
 2012074:	e0bffa17 	ldw	r2,-24(fp)
 2012078:	18804916 	blt	r3,r2,20121a0 <alt_epcs_flash_write+0x1dc>
            (offset < (current_offset +
            flash_info->region_info[i].block_size)))
 201207c:	e0fffc17 	ldw	r3,-16(fp)
 2012080:	e0bff817 	ldw	r2,-32(fp)
 2012084:	10800104 	addi	r2,r2,4
 2012088:	1004913a 	slli	r2,r2,4
 201208c:	1885883a 	add	r2,r3,r2
 2012090:	10c00017 	ldw	r3,0(r2)
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
            (offset < (current_offset +
 2012094:	e0bffa17 	ldw	r2,-24(fp)
 2012098:	1885883a 	add	r2,r3,r2
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
      {
        if ((offset >= current_offset ) &&
 201209c:	e0fffd17 	ldw	r3,-12(fp)
 20120a0:	18803f0e 	bge	r3,r2,20121a0 <alt_epcs_flash_write+0x1dc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 20120a4:	e0fffc17 	ldw	r3,-16(fp)
 20120a8:	e0bff817 	ldw	r2,-32(fp)
 20120ac:	10800104 	addi	r2,r2,4
 20120b0:	1004913a 	slli	r2,r2,4
 20120b4:	1885883a 	add	r2,r3,r2
 20120b8:	10c00017 	ldw	r3,0(r2)
 20120bc:	e0bffa17 	ldw	r2,-24(fp)
 20120c0:	1887883a 	add	r3,r3,r2
 20120c4:	e0bffd17 	ldw	r2,-12(fp)
 20120c8:	1885c83a 	sub	r2,r3,r2
 20120cc:	e0bffb15 	stw	r2,-20(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 20120d0:	e0fffb17 	ldw	r3,-20(fp)
 20120d4:	e0bfff17 	ldw	r2,-4(fp)
 20120d8:	1880010e 	bge	r3,r2,20120e0 <alt_epcs_flash_write+0x11c>
 20120dc:	1805883a 	mov	r2,r3
 20120e0:	e0bffb15 	stw	r2,-20(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 20120e4:	e0bffb17 	ldw	r2,-20(fp)
 20120e8:	e13ffc17 	ldw	r4,-16(fp)
 20120ec:	e17ffe17 	ldw	r5,-8(fp)
 20120f0:	e1bffd17 	ldw	r6,-12(fp)
 20120f4:	100f883a 	mov	r7,r2
 20120f8:	2011edc0 	call	2011edc <alt_epcs_flash_memcmp>
 20120fc:	10001226 	beq	r2,zero,2012148 <alt_epcs_flash_write+0x184>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2012100:	e0bffc17 	ldw	r2,-16(fp)
 2012104:	10800817 	ldw	r2,32(r2)
 2012108:	e13ffc17 	ldw	r4,-16(fp)
 201210c:	e17ffa17 	ldw	r5,-24(fp)
 2012110:	103ee83a 	callr	r2
 2012114:	e0bff715 	stw	r2,-36(fp)

            if (!ret_code)
 2012118:	e0bff717 	ldw	r2,-36(fp)
 201211c:	10000a1e 	bne	r2,zero,2012148 <alt_epcs_flash_write+0x184>
            {
              ret_code = (*flash_info->write_block)(
 2012120:	e0bffc17 	ldw	r2,-16(fp)
 2012124:	10800917 	ldw	r2,36(r2)
 2012128:	e0fffb17 	ldw	r3,-20(fp)
 201212c:	d8c00015 	stw	r3,0(sp)
 2012130:	e13ffc17 	ldw	r4,-16(fp)
 2012134:	e17ffa17 	ldw	r5,-24(fp)
 2012138:	e1bffd17 	ldw	r6,-12(fp)
 201213c:	e1fffe17 	ldw	r7,-8(fp)
 2012140:	103ee83a 	callr	r2
 2012144:	e0bff715 	stw	r2,-36(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 2012148:	e0ffff17 	ldw	r3,-4(fp)
 201214c:	e0bffb17 	ldw	r2,-20(fp)
 2012150:	18802e26 	beq	r3,r2,201220c <alt_epcs_flash_write+0x248>
 2012154:	e0bff717 	ldw	r2,-36(fp)
 2012158:	10002c1e 	bne	r2,zero,201220c <alt_epcs_flash_write+0x248>
          {
            goto finished;
          }

          length -= data_to_write;
 201215c:	e0ffff17 	ldw	r3,-4(fp)
 2012160:	e0bffb17 	ldw	r2,-20(fp)
 2012164:	1885c83a 	sub	r2,r3,r2
 2012168:	e0bfff15 	stw	r2,-4(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 201216c:	e0fffc17 	ldw	r3,-16(fp)
 2012170:	e0bff817 	ldw	r2,-32(fp)
 2012174:	10800104 	addi	r2,r2,4
 2012178:	1004913a 	slli	r2,r2,4
 201217c:	1885883a 	add	r2,r3,r2
 2012180:	10c00017 	ldw	r3,0(r2)
 2012184:	e0bffa17 	ldw	r2,-24(fp)
 2012188:	1885883a 	add	r2,r3,r2
 201218c:	e0bffd15 	stw	r2,-12(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2012190:	e0bffb17 	ldw	r2,-20(fp)
 2012194:	e0fffe17 	ldw	r3,-8(fp)
 2012198:	1885883a 	add	r2,r3,r2
 201219c:	e0bffe15 	stw	r2,-8(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 20121a0:	e0fffc17 	ldw	r3,-16(fp)
 20121a4:	e0bff817 	ldw	r2,-32(fp)
 20121a8:	10800104 	addi	r2,r2,4
 20121ac:	1004913a 	slli	r2,r2,4
 20121b0:	1885883a 	add	r2,r3,r2
 20121b4:	10800017 	ldw	r2,0(r2)
 20121b8:	e0fffa17 	ldw	r3,-24(fp)
 20121bc:	1885883a 	add	r2,r3,r2
 20121c0:	e0bffa15 	stw	r2,-24(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 20121c4:	e0bff917 	ldw	r2,-28(fp)
 20121c8:	10800044 	addi	r2,r2,1
 20121cc:	e0bff915 	stw	r2,-28(fp)
 20121d0:	e0fffc17 	ldw	r3,-16(fp)
 20121d4:	e0bff817 	ldw	r2,-32(fp)
 20121d8:	1004913a 	slli	r2,r2,4
 20121dc:	1885883a 	add	r2,r3,r2
 20121e0:	10800f04 	addi	r2,r2,60
 20121e4:	10800017 	ldw	r2,0(r2)
 20121e8:	e0fff917 	ldw	r3,-28(fp)
 20121ec:	18bfa016 	blt	r3,r2,2012070 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 20121f0:	e0bff817 	ldw	r2,-32(fp)
 20121f4:	10800044 	addi	r2,r2,1
 20121f8:	e0bff815 	stw	r2,-32(fp)
 20121fc:	e0bffc17 	ldw	r2,-16(fp)
 2012200:	10800c17 	ldw	r2,48(r2)
 2012204:	e0fff817 	ldw	r3,-32(fp)
 2012208:	18bf7916 	blt	r3,r2,2011ff0 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 201220c:	e0bff717 	ldw	r2,-36(fp)
}
 2012210:	e037883a 	mov	sp,fp
 2012214:	dfc00117 	ldw	ra,4(sp)
 2012218:	df000017 	ldw	fp,0(sp)
 201221c:	dec00204 	addi	sp,sp,8
 2012220:	f800283a 	ret

02012224 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 2012224:	defffa04 	addi	sp,sp,-24
 2012228:	df000515 	stw	fp,20(sp)
 201222c:	df000504 	addi	fp,sp,20
 2012230:	e13ffd15 	stw	r4,-12(fp)
 2012234:	e17ffe15 	stw	r5,-8(fp)
 2012238:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 201223c:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 2012240:	e0bffd17 	ldw	r2,-12(fp)
 2012244:	e0bffc15 	stw	r2,-16(fp)

  *number_of_regions = flash->number_of_regions;
 2012248:	e0bffc17 	ldw	r2,-16(fp)
 201224c:	10c00c17 	ldw	r3,48(r2)
 2012250:	e0bfff17 	ldw	r2,-4(fp)
 2012254:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 2012258:	e0bffc17 	ldw	r2,-16(fp)
 201225c:	10800c17 	ldw	r2,48(r2)
 2012260:	1000031e 	bne	r2,zero,2012270 <alt_epcs_flash_get_info+0x4c>
  {
    ret_code = -EIO;
 2012264:	00bffec4 	movi	r2,-5
 2012268:	e0bffb15 	stw	r2,-20(fp)
 201226c:	00000b06 	br	201229c <alt_epcs_flash_get_info+0x78>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 2012270:	e0bffc17 	ldw	r2,-16(fp)
 2012274:	10800c17 	ldw	r2,48(r2)
 2012278:	10800250 	cmplti	r2,r2,9
 201227c:	1000031e 	bne	r2,zero,201228c <alt_epcs_flash_get_info+0x68>
  {
    ret_code = -ENOMEM;
 2012280:	00bffd04 	movi	r2,-12
 2012284:	e0bffb15 	stw	r2,-20(fp)
 2012288:	00000406 	br	201229c <alt_epcs_flash_get_info+0x78>
  }
  else
  {
    *info = &flash->region_info[0];
 201228c:	e0bffc17 	ldw	r2,-16(fp)
 2012290:	10c00d04 	addi	r3,r2,52
 2012294:	e0bffe17 	ldw	r2,-8(fp)
 2012298:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 201229c:	e0bffb17 	ldw	r2,-20(fp)
}
 20122a0:	e037883a 	mov	sp,fp
 20122a4:	df000017 	ldw	fp,0(sp)
 20122a8:	dec00104 	addi	sp,sp,4
 20122ac:	f800283a 	ret

020122b0 <alt_epcs_test_address>:


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 20122b0:	defff904 	addi	sp,sp,-28
 20122b4:	df000615 	stw	fp,24(sp)
 20122b8:	df000604 	addi	fp,sp,24
 20122bc:	e13ffe15 	stw	r4,-8(fp)
 20122c0:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 20122c4:	e03ffa15 	stw	zero,-24(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20122c8:	e0bffe17 	ldw	r2,-8(fp)
 20122cc:	e0bffb15 	stw	r2,-20(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 20122d0:	e0bffb17 	ldw	r2,-20(fp)
 20122d4:	10800c17 	ldw	r2,48(r2)
 20122d8:	10bfffc4 	addi	r2,r2,-1
 20122dc:	e0bffc15 	stw	r2,-16(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 20122e0:	e0fffb17 	ldw	r3,-20(fp)
 20122e4:	e0bffc17 	ldw	r2,-16(fp)
 20122e8:	1004913a 	slli	r2,r2,4
 20122ec:	1885883a 	add	r2,r3,r2
 20122f0:	10800d04 	addi	r2,r2,52
 20122f4:	10800017 	ldw	r2,0(r2)
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
 20122f8:	10ffffc4 	addi	r3,r2,-1
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 20122fc:	e13ffb17 	ldw	r4,-20(fp)
 2012300:	e0bffc17 	ldw	r2,-16(fp)
 2012304:	1004913a 	slli	r2,r2,4
 2012308:	2085883a 	add	r2,r4,r2
 201230c:	10800e04 	addi	r2,r2,56
 2012310:	10800017 	ldw	r2,0(r2)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
 2012314:	1885883a 	add	r2,r3,r2
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
  alt_u32 last_device_address =
 2012318:	e0bffd15 	stw	r2,-12(fp)
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;

  if (offset > last_device_address)
 201231c:	e0bfff17 	ldw	r2,-4(fp)
 2012320:	e0fffd17 	ldw	r3,-12(fp)
 2012324:	1880022e 	bgeu	r3,r2,2012330 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 2012328:	00bffec4 	movi	r2,-5
 201232c:	e0bffa15 	stw	r2,-24(fp)
  }
  return ret_code;
 2012330:	e0bffa17 	ldw	r2,-24(fp)
}
 2012334:	e037883a 	mov	sp,fp
 2012338:	df000017 	ldw	fp,0(sp)
 201233c:	dec00104 	addi	sp,sp,4
 2012340:	f800283a 	ret

02012344 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 2012344:	defffa04 	addi	sp,sp,-24
 2012348:	dfc00515 	stw	ra,20(sp)
 201234c:	df000415 	stw	fp,16(sp)
 2012350:	df000404 	addi	fp,sp,16
 2012354:	e13ffe15 	stw	r4,-8(fp)
 2012358:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 201235c:	e03ffc15 	stw	zero,-16(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2012360:	e0bffe17 	ldw	r2,-8(fp)
 2012364:	e0bffd15 	stw	r2,-12(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 2012368:	e13ffe17 	ldw	r4,-8(fp)
 201236c:	e17fff17 	ldw	r5,-4(fp)
 2012370:	20122b00 	call	20122b0 <alt_epcs_test_address>
 2012374:	e0bffc15 	stw	r2,-16(fp)

  if (ret_code >= 0)
 2012378:	e0bffc17 	ldw	r2,-16(fp)
 201237c:	10000816 	blt	r2,zero,20123a0 <alt_epcs_flash_erase_block+0x5c>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 2012380:	e0bffd17 	ldw	r2,-12(fp)
 2012384:	11002d17 	ldw	r4,180(r2)
 2012388:	e0ffff17 	ldw	r3,-4(fp)
 201238c:	e0bffd17 	ldw	r2,-12(fp)
 2012390:	10803117 	ldw	r2,196(r2)
 2012394:	180b883a 	mov	r5,r3
 2012398:	100d883a 	mov	r6,r2
 201239c:	20133880 	call	2013388 <epcs_sector_erase>
  }
  return ret_code;
 20123a0:	e0bffc17 	ldw	r2,-16(fp)
}
 20123a4:	e037883a 	mov	sp,fp
 20123a8:	dfc00117 	ldw	ra,4(sp)
 20123ac:	df000017 	ldw	fp,0(sp)
 20123b0:	dec00204 	addi	sp,sp,8
 20123b4:	f800283a 	ret

020123b8 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 20123b8:	defff404 	addi	sp,sp,-48
 20123bc:	dfc00b15 	stw	ra,44(sp)
 20123c0:	df000a15 	stw	fp,40(sp)
 20123c4:	df000a04 	addi	fp,sp,40
 20123c8:	e13ffc15 	stw	r4,-16(fp)
 20123cc:	e17ffd15 	stw	r5,-12(fp)
 20123d0:	e1bffe15 	stw	r6,-8(fp)
 20123d4:	e1ffff15 	stw	r7,-4(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20123d8:	e0bffc17 	ldw	r2,-16(fp)
 20123dc:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 20123e0:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 20123e4:	e13ffc17 	ldw	r4,-16(fp)
 20123e8:	e17ffe17 	ldw	r5,-8(fp)
 20123ec:	20122b00 	call	20122b0 <alt_epcs_test_address>
 20123f0:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 20123f4:	e0bff917 	ldw	r2,-28(fp)
 20123f8:	10002a16 	blt	r2,zero,20124a4 <alt_epcs_flash_write_block+0xec>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 20123fc:	00002706 	br	201249c <alt_epcs_flash_write_block+0xe4>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 2012400:	e0bff817 	ldw	r2,-32(fp)
 2012404:	10c03017 	ldw	r3,192(r2)
 2012408:	e0bffe17 	ldw	r2,-8(fp)
 201240c:	1887883a 	add	r3,r3,r2
 2012410:	e0bff817 	ldw	r2,-32(fp)
 2012414:	10803017 	ldw	r2,192(r2)
 2012418:	0085c83a 	sub	r2,zero,r2
 201241c:	1884703a 	and	r2,r3,r2
 2012420:	e0bffa15 	stw	r2,-24(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 2012424:	e0fffa17 	ldw	r3,-24(fp)
 2012428:	e0bffe17 	ldw	r2,-8(fp)
 201242c:	1885c83a 	sub	r2,r3,r2
 2012430:	e0c00217 	ldw	r3,8(fp)
 2012434:	1880010e 	bge	r3,r2,201243c <alt_epcs_flash_write_block+0x84>
 2012438:	1805883a 	mov	r2,r3
 201243c:	e0bffb15 	stw	r2,-20(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 2012440:	e0bff817 	ldw	r2,-32(fp)
 2012444:	10c02d17 	ldw	r3,180(r2)
 2012448:	e0bff717 	ldw	r2,-36(fp)
 201244c:	e13fff17 	ldw	r4,-4(fp)
 2012450:	2085883a 	add	r2,r4,r2
          f->four_bytes_mode);
 2012454:	e13ff817 	ldw	r4,-32(fp)
    while (length)
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
      length_of_current_write = MIN(length, next_page_start - data_offset);

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 2012458:	21003117 	ldw	r4,196(r4)
 201245c:	d9000015 	stw	r4,0(sp)
 2012460:	1809883a 	mov	r4,r3
 2012464:	e17ffe17 	ldw	r5,-8(fp)
 2012468:	100d883a 	mov	r6,r2
 201246c:	e1fffb17 	ldw	r7,-20(fp)
 2012470:	201362c0 	call	201362c <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 2012474:	e0c00217 	ldw	r3,8(fp)
 2012478:	e0bffb17 	ldw	r2,-20(fp)
 201247c:	1885c83a 	sub	r2,r3,r2
 2012480:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 2012484:	e0fff717 	ldw	r3,-36(fp)
 2012488:	e0bffb17 	ldw	r2,-20(fp)
 201248c:	1885883a 	add	r2,r3,r2
 2012490:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 2012494:	e0bffa17 	ldw	r2,-24(fp)
 2012498:	e0bffe15 	stw	r2,-8(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 201249c:	e0800217 	ldw	r2,8(fp)
 20124a0:	103fd71e 	bne	r2,zero,2012400 <alt_epcs_flash_write_block+0x48>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 20124a4:	e0bff917 	ldw	r2,-28(fp)
}
 20124a8:	e037883a 	mov	sp,fp
 20124ac:	dfc00117 	ldw	ra,4(sp)
 20124b0:	df000017 	ldw	fp,0(sp)
 20124b4:	dec00204 	addi	sp,sp,8
 20124b8:	f800283a 	ret

020124bc <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 20124bc:	defff704 	addi	sp,sp,-36
 20124c0:	dfc00815 	stw	ra,32(sp)
 20124c4:	df000715 	stw	fp,28(sp)
 20124c8:	df000704 	addi	fp,sp,28
 20124cc:	e13ffc15 	stw	r4,-16(fp)
 20124d0:	e17ffd15 	stw	r5,-12(fp)
 20124d4:	e1bffe15 	stw	r6,-8(fp)
 20124d8:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 20124dc:	e03ffa15 	stw	zero,-24(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 20124e0:	e0bffc17 	ldw	r2,-16(fp)
 20124e4:	e0bffb15 	stw	r2,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 20124e8:	e13ffc17 	ldw	r4,-16(fp)
 20124ec:	e17ffd17 	ldw	r5,-12(fp)
 20124f0:	20122b00 	call	20122b0 <alt_epcs_test_address>
 20124f4:	e0bffa15 	stw	r2,-24(fp)

  if (ret_code >= 0)
 20124f8:	e0bffa17 	ldw	r2,-24(fp)
 20124fc:	10000f16 	blt	r2,zero,201253c <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 2012500:	e0bffb17 	ldw	r2,-20(fp)
 2012504:	10802d17 	ldw	r2,180(r2)
                                f->four_bytes_mode);
 2012508:	e0fffb17 	ldw	r3,-20(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);

  if (ret_code >= 0)
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 201250c:	18c03117 	ldw	r3,196(r3)
 2012510:	d8c00015 	stw	r3,0(sp)
 2012514:	1009883a 	mov	r4,r2
 2012518:	e17ffd17 	ldw	r5,-12(fp)
 201251c:	e1bffe17 	ldw	r6,-8(fp)
 2012520:	e1ffff17 	ldw	r7,-4(fp)
 2012524:	20134800 	call	2013480 <epcs_read_buffer>
 2012528:	e0bffa15 	stw	r2,-24(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 201252c:	e0fffa17 	ldw	r3,-24(fp)
 2012530:	e0bfff17 	ldw	r2,-4(fp)
 2012534:	1880011e 	bne	r3,r2,201253c <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 2012538:	e03ffa15 	stw	zero,-24(fp)
    }
  }
  return ret_code;
 201253c:	e0bffa17 	ldw	r2,-24(fp)
}
 2012540:	e037883a 	mov	sp,fp
 2012544:	dfc00117 	ldw	ra,4(sp)
 2012548:	df000017 	ldw	fp,0(sp)
 201254c:	dec00204 	addi	sp,sp,8
 2012550:	f800283a 	ret

02012554 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2012554:	defffa04 	addi	sp,sp,-24
 2012558:	dfc00515 	stw	ra,20(sp)
 201255c:	df000415 	stw	fp,16(sp)
 2012560:	df000404 	addi	fp,sp,16
 2012564:	e13ffd15 	stw	r4,-12(fp)
 2012568:	e17ffe15 	stw	r5,-8(fp)
 201256c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2012570:	e0bffd17 	ldw	r2,-12(fp)
 2012574:	10800017 	ldw	r2,0(r2)
 2012578:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 201257c:	e0bffc17 	ldw	r2,-16(fp)
 2012580:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 2012584:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2012588:	10800217 	ldw	r2,8(r2)
 201258c:	1809883a 	mov	r4,r3
 2012590:	e17ffe17 	ldw	r5,-8(fp)
 2012594:	e1bfff17 	ldw	r6,-4(fp)
 2012598:	100f883a 	mov	r7,r2
 201259c:	2012b7c0 	call	2012b7c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 20125a0:	e037883a 	mov	sp,fp
 20125a4:	dfc00117 	ldw	ra,4(sp)
 20125a8:	df000017 	ldw	fp,0(sp)
 20125ac:	dec00204 	addi	sp,sp,8
 20125b0:	f800283a 	ret

020125b4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 20125b4:	defffa04 	addi	sp,sp,-24
 20125b8:	dfc00515 	stw	ra,20(sp)
 20125bc:	df000415 	stw	fp,16(sp)
 20125c0:	df000404 	addi	fp,sp,16
 20125c4:	e13ffd15 	stw	r4,-12(fp)
 20125c8:	e17ffe15 	stw	r5,-8(fp)
 20125cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20125d0:	e0bffd17 	ldw	r2,-12(fp)
 20125d4:	10800017 	ldw	r2,0(r2)
 20125d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 20125dc:	e0bffc17 	ldw	r2,-16(fp)
 20125e0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 20125e4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 20125e8:	10800217 	ldw	r2,8(r2)
 20125ec:	1809883a 	mov	r4,r3
 20125f0:	e17ffe17 	ldw	r5,-8(fp)
 20125f4:	e1bfff17 	ldw	r6,-4(fp)
 20125f8:	100f883a 	mov	r7,r2
 20125fc:	2012d940 	call	2012d94 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2012600:	e037883a 	mov	sp,fp
 2012604:	dfc00117 	ldw	ra,4(sp)
 2012608:	df000017 	ldw	fp,0(sp)
 201260c:	dec00204 	addi	sp,sp,8
 2012610:	f800283a 	ret

02012614 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2012614:	defffc04 	addi	sp,sp,-16
 2012618:	dfc00315 	stw	ra,12(sp)
 201261c:	df000215 	stw	fp,8(sp)
 2012620:	df000204 	addi	fp,sp,8
 2012624:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2012628:	e0bfff17 	ldw	r2,-4(fp)
 201262c:	10800017 	ldw	r2,0(r2)
 2012630:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2012634:	e0bffe17 	ldw	r2,-8(fp)
 2012638:	10c00a04 	addi	r3,r2,40
 201263c:	e0bfff17 	ldw	r2,-4(fp)
 2012640:	10800217 	ldw	r2,8(r2)
 2012644:	1809883a 	mov	r4,r3
 2012648:	100b883a 	mov	r5,r2
 201264c:	2012a200 	call	2012a20 <altera_avalon_jtag_uart_close>
}
 2012650:	e037883a 	mov	sp,fp
 2012654:	dfc00117 	ldw	ra,4(sp)
 2012658:	df000017 	ldw	fp,0(sp)
 201265c:	dec00204 	addi	sp,sp,8
 2012660:	f800283a 	ret

02012664 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2012664:	defffa04 	addi	sp,sp,-24
 2012668:	dfc00515 	stw	ra,20(sp)
 201266c:	df000415 	stw	fp,16(sp)
 2012670:	df000404 	addi	fp,sp,16
 2012674:	e13ffd15 	stw	r4,-12(fp)
 2012678:	e17ffe15 	stw	r5,-8(fp)
 201267c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2012680:	e0bffd17 	ldw	r2,-12(fp)
 2012684:	10800017 	ldw	r2,0(r2)
 2012688:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 201268c:	e0bffc17 	ldw	r2,-16(fp)
 2012690:	10800a04 	addi	r2,r2,40
 2012694:	1009883a 	mov	r4,r2
 2012698:	e17ffe17 	ldw	r5,-8(fp)
 201269c:	e1bfff17 	ldw	r6,-4(fp)
 20126a0:	2012a880 	call	2012a88 <altera_avalon_jtag_uart_ioctl>
}
 20126a4:	e037883a 	mov	sp,fp
 20126a8:	dfc00117 	ldw	ra,4(sp)
 20126ac:	df000017 	ldw	fp,0(sp)
 20126b0:	dec00204 	addi	sp,sp,8
 20126b4:	f800283a 	ret

020126b8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 20126b8:	defffa04 	addi	sp,sp,-24
 20126bc:	dfc00515 	stw	ra,20(sp)
 20126c0:	df000415 	stw	fp,16(sp)
 20126c4:	df000404 	addi	fp,sp,16
 20126c8:	e13ffd15 	stw	r4,-12(fp)
 20126cc:	e17ffe15 	stw	r5,-8(fp)
 20126d0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20126d4:	e0bffd17 	ldw	r2,-12(fp)
 20126d8:	00c00044 	movi	r3,1
 20126dc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 20126e0:	e0bffd17 	ldw	r2,-12(fp)
 20126e4:	10800017 	ldw	r2,0(r2)
 20126e8:	10800104 	addi	r2,r2,4
 20126ec:	e0fffd17 	ldw	r3,-12(fp)
 20126f0:	18c00817 	ldw	r3,32(r3)
 20126f4:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 20126f8:	e0fffe17 	ldw	r3,-8(fp)
 20126fc:	e0bfff17 	ldw	r2,-4(fp)
 2012700:	d8000015 	stw	zero,0(sp)
 2012704:	1809883a 	mov	r4,r3
 2012708:	100b883a 	mov	r5,r2
 201270c:	01808074 	movhi	r6,513
 2012710:	3189de04 	addi	r6,r6,10104
 2012714:	e1fffd17 	ldw	r7,-12(fp)
 2012718:	20110040 	call	2011004 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 201271c:	e0bffd17 	ldw	r2,-12(fp)
 2012720:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2012724:	e0bffd17 	ldw	r2,-12(fp)
 2012728:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 201272c:	008080f4 	movhi	r2,515
 2012730:	10884604 	addi	r2,r2,8472
 2012734:	10800017 	ldw	r2,0(r2)
 2012738:	1809883a 	mov	r4,r3
 201273c:	100b883a 	mov	r5,r2
 2012740:	01808074 	movhi	r6,513
 2012744:	318a5f04 	addi	r6,r6,10620
 2012748:	e1fffd17 	ldw	r7,-12(fp)
 201274c:	2010c840 	call	2010c84 <alt_alarm_start>
 2012750:	1000040e 	bge	r2,zero,2012764 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2012754:	e0bffd17 	ldw	r2,-12(fp)
 2012758:	00e00034 	movhi	r3,32768
 201275c:	18ffffc4 	addi	r3,r3,-1
 2012760:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2012764:	e037883a 	mov	sp,fp
 2012768:	dfc00117 	ldw	ra,4(sp)
 201276c:	df000017 	ldw	fp,0(sp)
 2012770:	dec00204 	addi	sp,sp,8
 2012774:	f800283a 	ret

02012778 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2012778:	defff804 	addi	sp,sp,-32
 201277c:	df000715 	stw	fp,28(sp)
 2012780:	df000704 	addi	fp,sp,28
 2012784:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2012788:	e0bfff17 	ldw	r2,-4(fp)
 201278c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 2012790:	e0bffb17 	ldw	r2,-20(fp)
 2012794:	10800017 	ldw	r2,0(r2)
 2012798:	e0bffc15 	stw	r2,-16(fp)
 201279c:	00000106 	br	20127a4 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 20127a0:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20127a4:	e0bffc17 	ldw	r2,-16(fp)
 20127a8:	10800104 	addi	r2,r2,4
 20127ac:	10800037 	ldwio	r2,0(r2)
 20127b0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 20127b4:	e0bffd17 	ldw	r2,-12(fp)
 20127b8:	1080c00c 	andi	r2,r2,768
 20127bc:	10006a26 	beq	r2,zero,2012968 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 20127c0:	e0bffd17 	ldw	r2,-12(fp)
 20127c4:	1080400c 	andi	r2,r2,256
 20127c8:	10003326 	beq	r2,zero,2012898 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 20127cc:	00800074 	movhi	r2,1
 20127d0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20127d4:	e0bffb17 	ldw	r2,-20(fp)
 20127d8:	10800a17 	ldw	r2,40(r2)
 20127dc:	10800044 	addi	r2,r2,1
 20127e0:	1081ffcc 	andi	r2,r2,2047
 20127e4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 20127e8:	e0bffb17 	ldw	r2,-20(fp)
 20127ec:	10c00b17 	ldw	r3,44(r2)
 20127f0:	e0bffe17 	ldw	r2,-8(fp)
 20127f4:	18801426 	beq	r3,r2,2012848 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 20127f8:	e0bffc17 	ldw	r2,-16(fp)
 20127fc:	10800037 	ldwio	r2,0(r2)
 2012800:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2012804:	e0bff917 	ldw	r2,-28(fp)
 2012808:	10a0000c 	andi	r2,r2,32768
 201280c:	10001026 	beq	r2,zero,2012850 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2012810:	e0bffb17 	ldw	r2,-20(fp)
 2012814:	10800a17 	ldw	r2,40(r2)
 2012818:	e0fff917 	ldw	r3,-28(fp)
 201281c:	e13ffb17 	ldw	r4,-20(fp)
 2012820:	2085883a 	add	r2,r4,r2
 2012824:	10800e04 	addi	r2,r2,56
 2012828:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 201282c:	e0bffb17 	ldw	r2,-20(fp)
 2012830:	10800a17 	ldw	r2,40(r2)
 2012834:	10800044 	addi	r2,r2,1
 2012838:	10c1ffcc 	andi	r3,r2,2047
 201283c:	e0bffb17 	ldw	r2,-20(fp)
 2012840:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 2012844:	003fe306 	br	20127d4 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 2012848:	0001883a 	nop
 201284c:	00000106 	br	2012854 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 2012850:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2012854:	e0bff917 	ldw	r2,-28(fp)
 2012858:	10bfffec 	andhi	r2,r2,65535
 201285c:	10000e26 	beq	r2,zero,2012898 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2012860:	e0bffb17 	ldw	r2,-20(fp)
 2012864:	10c00817 	ldw	r3,32(r2)
 2012868:	00bfff84 	movi	r2,-2
 201286c:	1886703a 	and	r3,r3,r2
 2012870:	e0bffb17 	ldw	r2,-20(fp)
 2012874:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2012878:	e0bffc17 	ldw	r2,-16(fp)
 201287c:	10800104 	addi	r2,r2,4
 2012880:	e0fffb17 	ldw	r3,-20(fp)
 2012884:	18c00817 	ldw	r3,32(r3)
 2012888:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 201288c:	e0bffc17 	ldw	r2,-16(fp)
 2012890:	10800104 	addi	r2,r2,4
 2012894:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2012898:	e0bffd17 	ldw	r2,-12(fp)
 201289c:	1080800c 	andi	r2,r2,512
 20128a0:	103fbf26 	beq	r2,zero,20127a0 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 20128a4:	e0bffd17 	ldw	r2,-12(fp)
 20128a8:	1004d43a 	srli	r2,r2,16
 20128ac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 20128b0:	00001406 	br	2012904 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 20128b4:	e0bffc17 	ldw	r2,-16(fp)
 20128b8:	e0fffb17 	ldw	r3,-20(fp)
 20128bc:	18c00d17 	ldw	r3,52(r3)
 20128c0:	e13ffb17 	ldw	r4,-20(fp)
 20128c4:	20c7883a 	add	r3,r4,r3
 20128c8:	18c20e04 	addi	r3,r3,2104
 20128cc:	18c00003 	ldbu	r3,0(r3)
 20128d0:	18c03fcc 	andi	r3,r3,255
 20128d4:	18c0201c 	xori	r3,r3,128
 20128d8:	18ffe004 	addi	r3,r3,-128
 20128dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20128e0:	e0bffb17 	ldw	r2,-20(fp)
 20128e4:	10800d17 	ldw	r2,52(r2)
 20128e8:	10800044 	addi	r2,r2,1
 20128ec:	10c1ffcc 	andi	r3,r2,2047
 20128f0:	e0bffb17 	ldw	r2,-20(fp)
 20128f4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 20128f8:	e0bffa17 	ldw	r2,-24(fp)
 20128fc:	10bfffc4 	addi	r2,r2,-1
 2012900:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2012904:	e0bffa17 	ldw	r2,-24(fp)
 2012908:	10000526 	beq	r2,zero,2012920 <altera_avalon_jtag_uart_irq+0x1a8>
 201290c:	e0bffb17 	ldw	r2,-20(fp)
 2012910:	10c00d17 	ldw	r3,52(r2)
 2012914:	e0bffb17 	ldw	r2,-20(fp)
 2012918:	10800c17 	ldw	r2,48(r2)
 201291c:	18bfe51e 	bne	r3,r2,20128b4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2012920:	e0bffa17 	ldw	r2,-24(fp)
 2012924:	103f9e26 	beq	r2,zero,20127a0 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2012928:	e0bffb17 	ldw	r2,-20(fp)
 201292c:	10c00817 	ldw	r3,32(r2)
 2012930:	00bfff44 	movi	r2,-3
 2012934:	1886703a 	and	r3,r3,r2
 2012938:	e0bffb17 	ldw	r2,-20(fp)
 201293c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2012940:	e0bffb17 	ldw	r2,-20(fp)
 2012944:	10800017 	ldw	r2,0(r2)
 2012948:	10800104 	addi	r2,r2,4
 201294c:	e0fffb17 	ldw	r3,-20(fp)
 2012950:	18c00817 	ldw	r3,32(r3)
 2012954:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2012958:	e0bffc17 	ldw	r2,-16(fp)
 201295c:	10800104 	addi	r2,r2,4
 2012960:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2012964:	003f8e06 	br	20127a0 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 2012968:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 201296c:	e037883a 	mov	sp,fp
 2012970:	df000017 	ldw	fp,0(sp)
 2012974:	dec00104 	addi	sp,sp,4
 2012978:	f800283a 	ret

0201297c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 201297c:	defffc04 	addi	sp,sp,-16
 2012980:	df000315 	stw	fp,12(sp)
 2012984:	df000304 	addi	fp,sp,12
 2012988:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 201298c:	e0bfff17 	ldw	r2,-4(fp)
 2012990:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2012994:	e0bffd17 	ldw	r2,-12(fp)
 2012998:	10800017 	ldw	r2,0(r2)
 201299c:	10800104 	addi	r2,r2,4
 20129a0:	10800037 	ldwio	r2,0(r2)
 20129a4:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 20129a8:	e0bffe17 	ldw	r2,-8(fp)
 20129ac:	1081000c 	andi	r2,r2,1024
 20129b0:	10000a26 	beq	r2,zero,20129dc <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 20129b4:	e0bffd17 	ldw	r2,-12(fp)
 20129b8:	10800017 	ldw	r2,0(r2)
 20129bc:	10800104 	addi	r2,r2,4
 20129c0:	e0fffd17 	ldw	r3,-12(fp)
 20129c4:	18c00817 	ldw	r3,32(r3)
 20129c8:	18c10014 	ori	r3,r3,1024
 20129cc:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 20129d0:	e0bffd17 	ldw	r2,-12(fp)
 20129d4:	10000915 	stw	zero,36(r2)
 20129d8:	00000a06 	br	2012a04 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 20129dc:	e0bffd17 	ldw	r2,-12(fp)
 20129e0:	10800917 	ldw	r2,36(r2)
 20129e4:	00e00034 	movhi	r3,32768
 20129e8:	18ffff04 	addi	r3,r3,-4
 20129ec:	18800536 	bltu	r3,r2,2012a04 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 20129f0:	e0bffd17 	ldw	r2,-12(fp)
 20129f4:	10800917 	ldw	r2,36(r2)
 20129f8:	10c00044 	addi	r3,r2,1
 20129fc:	e0bffd17 	ldw	r2,-12(fp)
 2012a00:	10c00915 	stw	r3,36(r2)
 2012a04:	008080f4 	movhi	r2,515
 2012a08:	10884604 	addi	r2,r2,8472
 2012a0c:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2012a10:	e037883a 	mov	sp,fp
 2012a14:	df000017 	ldw	fp,0(sp)
 2012a18:	dec00104 	addi	sp,sp,4
 2012a1c:	f800283a 	ret

02012a20 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2012a20:	defffd04 	addi	sp,sp,-12
 2012a24:	df000215 	stw	fp,8(sp)
 2012a28:	df000204 	addi	fp,sp,8
 2012a2c:	e13ffe15 	stw	r4,-8(fp)
 2012a30:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2012a34:	00000506 	br	2012a4c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2012a38:	e0bfff17 	ldw	r2,-4(fp)
 2012a3c:	1090000c 	andi	r2,r2,16384
 2012a40:	10000226 	beq	r2,zero,2012a4c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2012a44:	00bffd44 	movi	r2,-11
 2012a48:	00000b06 	br	2012a78 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2012a4c:	e0bffe17 	ldw	r2,-8(fp)
 2012a50:	10c00d17 	ldw	r3,52(r2)
 2012a54:	e0bffe17 	ldw	r2,-8(fp)
 2012a58:	10800c17 	ldw	r2,48(r2)
 2012a5c:	18800526 	beq	r3,r2,2012a74 <altera_avalon_jtag_uart_close+0x54>
 2012a60:	e0bffe17 	ldw	r2,-8(fp)
 2012a64:	10c00917 	ldw	r3,36(r2)
 2012a68:	e0bffe17 	ldw	r2,-8(fp)
 2012a6c:	10800117 	ldw	r2,4(r2)
 2012a70:	18bff136 	bltu	r3,r2,2012a38 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2012a74:	0005883a 	mov	r2,zero
}
 2012a78:	e037883a 	mov	sp,fp
 2012a7c:	df000017 	ldw	fp,0(sp)
 2012a80:	dec00104 	addi	sp,sp,4
 2012a84:	f800283a 	ret

02012a88 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2012a88:	defffa04 	addi	sp,sp,-24
 2012a8c:	df000515 	stw	fp,20(sp)
 2012a90:	df000504 	addi	fp,sp,20
 2012a94:	e13ffd15 	stw	r4,-12(fp)
 2012a98:	e17ffe15 	stw	r5,-8(fp)
 2012a9c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 2012aa0:	00bff9c4 	movi	r2,-25
 2012aa4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2012aa8:	e0bffe17 	ldw	r2,-8(fp)
 2012aac:	10da8060 	cmpeqi	r3,r2,27137
 2012ab0:	1800031e 	bne	r3,zero,2012ac0 <altera_avalon_jtag_uart_ioctl+0x38>
 2012ab4:	109a80a0 	cmpeqi	r2,r2,27138
 2012ab8:	1000181e 	bne	r2,zero,2012b1c <altera_avalon_jtag_uart_ioctl+0x94>
 2012abc:	00002606 	br	2012b58 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2012ac0:	e0bffd17 	ldw	r2,-12(fp)
 2012ac4:	10c00117 	ldw	r3,4(r2)
 2012ac8:	00a00034 	movhi	r2,32768
 2012acc:	10bfffc4 	addi	r2,r2,-1
 2012ad0:	18802226 	beq	r3,r2,2012b5c <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 2012ad4:	e0bfff17 	ldw	r2,-4(fp)
 2012ad8:	10800017 	ldw	r2,0(r2)
 2012adc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2012ae0:	e0bffc17 	ldw	r2,-16(fp)
 2012ae4:	10800090 	cmplti	r2,r2,2
 2012ae8:	1000061e 	bne	r2,zero,2012b04 <altera_avalon_jtag_uart_ioctl+0x7c>
 2012aec:	e0fffc17 	ldw	r3,-16(fp)
 2012af0:	00a00034 	movhi	r2,32768
 2012af4:	10bfffc4 	addi	r2,r2,-1
 2012af8:	18800226 	beq	r3,r2,2012b04 <altera_avalon_jtag_uart_ioctl+0x7c>
 2012afc:	e0bffc17 	ldw	r2,-16(fp)
 2012b00:	00000206 	br	2012b0c <altera_avalon_jtag_uart_ioctl+0x84>
 2012b04:	00a00034 	movhi	r2,32768
 2012b08:	10bfff84 	addi	r2,r2,-2
 2012b0c:	e0fffd17 	ldw	r3,-12(fp)
 2012b10:	18800115 	stw	r2,4(r3)
      rc = 0;
 2012b14:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2012b18:	00001006 	br	2012b5c <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2012b1c:	e0bffd17 	ldw	r2,-12(fp)
 2012b20:	10c00117 	ldw	r3,4(r2)
 2012b24:	00a00034 	movhi	r2,32768
 2012b28:	10bfffc4 	addi	r2,r2,-1
 2012b2c:	18800d26 	beq	r3,r2,2012b64 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2012b30:	e0bffd17 	ldw	r2,-12(fp)
 2012b34:	10c00917 	ldw	r3,36(r2)
 2012b38:	e0bffd17 	ldw	r2,-12(fp)
 2012b3c:	10800117 	ldw	r2,4(r2)
 2012b40:	1885803a 	cmpltu	r2,r3,r2
 2012b44:	10c03fcc 	andi	r3,r2,255
 2012b48:	e0bfff17 	ldw	r2,-4(fp)
 2012b4c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2012b50:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2012b54:	00000306 	br	2012b64 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 2012b58:	00000306 	br	2012b68 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 2012b5c:	0001883a 	nop
 2012b60:	00000106 	br	2012b68 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 2012b64:	0001883a 	nop

  default:
    break;
  }

  return rc;
 2012b68:	e0bffb17 	ldw	r2,-20(fp)
}
 2012b6c:	e037883a 	mov	sp,fp
 2012b70:	df000017 	ldw	fp,0(sp)
 2012b74:	dec00104 	addi	sp,sp,4
 2012b78:	f800283a 	ret

02012b7c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2012b7c:	defff304 	addi	sp,sp,-52
 2012b80:	dfc00c15 	stw	ra,48(sp)
 2012b84:	df000b15 	stw	fp,44(sp)
 2012b88:	df000b04 	addi	fp,sp,44
 2012b8c:	e13ffc15 	stw	r4,-16(fp)
 2012b90:	e17ffd15 	stw	r5,-12(fp)
 2012b94:	e1bffe15 	stw	r6,-8(fp)
 2012b98:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 2012b9c:	e0bffd17 	ldw	r2,-12(fp)
 2012ba0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2012ba4:	00004706 	br	2012cc4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2012ba8:	e0bffc17 	ldw	r2,-16(fp)
 2012bac:	10800a17 	ldw	r2,40(r2)
 2012bb0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2012bb4:	e0bffc17 	ldw	r2,-16(fp)
 2012bb8:	10800b17 	ldw	r2,44(r2)
 2012bbc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 2012bc0:	e0fff717 	ldw	r3,-36(fp)
 2012bc4:	e0bff817 	ldw	r2,-32(fp)
 2012bc8:	18800536 	bltu	r3,r2,2012be0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2012bcc:	e0fff717 	ldw	r3,-36(fp)
 2012bd0:	e0bff817 	ldw	r2,-32(fp)
 2012bd4:	1885c83a 	sub	r2,r3,r2
 2012bd8:	e0bff615 	stw	r2,-40(fp)
 2012bdc:	00000406 	br	2012bf0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2012be0:	00c20004 	movi	r3,2048
 2012be4:	e0bff817 	ldw	r2,-32(fp)
 2012be8:	1885c83a 	sub	r2,r3,r2
 2012bec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2012bf0:	e0bff617 	ldw	r2,-40(fp)
 2012bf4:	10001e26 	beq	r2,zero,2012c70 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 2012bf8:	e0fffe17 	ldw	r3,-8(fp)
 2012bfc:	e0bff617 	ldw	r2,-40(fp)
 2012c00:	1880022e 	bgeu	r3,r2,2012c0c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 2012c04:	e0bffe17 	ldw	r2,-8(fp)
 2012c08:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2012c0c:	e0bff817 	ldw	r2,-32(fp)
 2012c10:	10800e04 	addi	r2,r2,56
 2012c14:	e0fffc17 	ldw	r3,-16(fp)
 2012c18:	1885883a 	add	r2,r3,r2
 2012c1c:	e13ff517 	ldw	r4,-44(fp)
 2012c20:	100b883a 	mov	r5,r2
 2012c24:	e1bff617 	ldw	r6,-40(fp)
 2012c28:	20090800 	call	2009080 <memcpy>
      ptr   += n;
 2012c2c:	e0fff517 	ldw	r3,-44(fp)
 2012c30:	e0bff617 	ldw	r2,-40(fp)
 2012c34:	1885883a 	add	r2,r3,r2
 2012c38:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2012c3c:	e0fffe17 	ldw	r3,-8(fp)
 2012c40:	e0bff617 	ldw	r2,-40(fp)
 2012c44:	1885c83a 	sub	r2,r3,r2
 2012c48:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2012c4c:	e0fff817 	ldw	r3,-32(fp)
 2012c50:	e0bff617 	ldw	r2,-40(fp)
 2012c54:	1885883a 	add	r2,r3,r2
 2012c58:	10c1ffcc 	andi	r3,r2,2047
 2012c5c:	e0bffc17 	ldw	r2,-16(fp)
 2012c60:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2012c64:	e0bffe17 	ldw	r2,-8(fp)
 2012c68:	00bfcf16 	blt	zero,r2,2012ba8 <altera_avalon_jtag_uart_read+0x2c>
 2012c6c:	00000106 	br	2012c74 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 2012c70:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 2012c74:	e0fff517 	ldw	r3,-44(fp)
 2012c78:	e0bffd17 	ldw	r2,-12(fp)
 2012c7c:	1880141e 	bne	r3,r2,2012cd0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2012c80:	e0bfff17 	ldw	r2,-4(fp)
 2012c84:	1090000c 	andi	r2,r2,16384
 2012c88:	1000131e 	bne	r2,zero,2012cd8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2012c8c:	0001883a 	nop
 2012c90:	e0bffc17 	ldw	r2,-16(fp)
 2012c94:	10c00a17 	ldw	r3,40(r2)
 2012c98:	e0bff717 	ldw	r2,-36(fp)
 2012c9c:	1880051e 	bne	r3,r2,2012cb4 <altera_avalon_jtag_uart_read+0x138>
 2012ca0:	e0bffc17 	ldw	r2,-16(fp)
 2012ca4:	10c00917 	ldw	r3,36(r2)
 2012ca8:	e0bffc17 	ldw	r2,-16(fp)
 2012cac:	10800117 	ldw	r2,4(r2)
 2012cb0:	18bff736 	bltu	r3,r2,2012c90 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2012cb4:	e0bffc17 	ldw	r2,-16(fp)
 2012cb8:	10c00a17 	ldw	r3,40(r2)
 2012cbc:	e0bff717 	ldw	r2,-36(fp)
 2012cc0:	18800726 	beq	r3,r2,2012ce0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2012cc4:	e0bffe17 	ldw	r2,-8(fp)
 2012cc8:	00bfb716 	blt	zero,r2,2012ba8 <altera_avalon_jtag_uart_read+0x2c>
 2012ccc:	00000506 	br	2012ce4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 2012cd0:	0001883a 	nop
 2012cd4:	00000306 	br	2012ce4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2012cd8:	0001883a 	nop
 2012cdc:	00000106 	br	2012ce4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2012ce0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2012ce4:	e0fff517 	ldw	r3,-44(fp)
 2012ce8:	e0bffd17 	ldw	r2,-12(fp)
 2012cec:	18801726 	beq	r3,r2,2012d4c <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012cf0:	0005303a 	rdctl	r2,status
 2012cf4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012cf8:	e0fffa17 	ldw	r3,-24(fp)
 2012cfc:	00bfff84 	movi	r2,-2
 2012d00:	1884703a 	and	r2,r3,r2
 2012d04:	1001703a 	wrctl	status,r2
  
  return context;
 2012d08:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2012d0c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2012d10:	e0bffc17 	ldw	r2,-16(fp)
 2012d14:	10800817 	ldw	r2,32(r2)
 2012d18:	10c00054 	ori	r3,r2,1
 2012d1c:	e0bffc17 	ldw	r2,-16(fp)
 2012d20:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2012d24:	e0bffc17 	ldw	r2,-16(fp)
 2012d28:	10800017 	ldw	r2,0(r2)
 2012d2c:	10800104 	addi	r2,r2,4
 2012d30:	e0fffc17 	ldw	r3,-16(fp)
 2012d34:	18c00817 	ldw	r3,32(r3)
 2012d38:	10c00035 	stwio	r3,0(r2)
 2012d3c:	e0bff917 	ldw	r2,-28(fp)
 2012d40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012d44:	e0bffb17 	ldw	r2,-20(fp)
 2012d48:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2012d4c:	e0fff517 	ldw	r3,-44(fp)
 2012d50:	e0bffd17 	ldw	r2,-12(fp)
 2012d54:	18800426 	beq	r3,r2,2012d68 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 2012d58:	e0fff517 	ldw	r3,-44(fp)
 2012d5c:	e0bffd17 	ldw	r2,-12(fp)
 2012d60:	1885c83a 	sub	r2,r3,r2
 2012d64:	00000606 	br	2012d80 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 2012d68:	e0bfff17 	ldw	r2,-4(fp)
 2012d6c:	1090000c 	andi	r2,r2,16384
 2012d70:	10000226 	beq	r2,zero,2012d7c <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 2012d74:	00bffd44 	movi	r2,-11
 2012d78:	00000106 	br	2012d80 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 2012d7c:	00bffec4 	movi	r2,-5
}
 2012d80:	e037883a 	mov	sp,fp
 2012d84:	dfc00117 	ldw	ra,4(sp)
 2012d88:	df000017 	ldw	fp,0(sp)
 2012d8c:	dec00204 	addi	sp,sp,8
 2012d90:	f800283a 	ret

02012d94 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2012d94:	defff304 	addi	sp,sp,-52
 2012d98:	dfc00c15 	stw	ra,48(sp)
 2012d9c:	df000b15 	stw	fp,44(sp)
 2012da0:	df000b04 	addi	fp,sp,44
 2012da4:	e13ffc15 	stw	r4,-16(fp)
 2012da8:	e17ffd15 	stw	r5,-12(fp)
 2012dac:	e1bffe15 	stw	r6,-8(fp)
 2012db0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2012db4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2012db8:	e0bffd17 	ldw	r2,-12(fp)
 2012dbc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2012dc0:	00003706 	br	2012ea0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2012dc4:	e0bffc17 	ldw	r2,-16(fp)
 2012dc8:	10800c17 	ldw	r2,48(r2)
 2012dcc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 2012dd0:	e0bffc17 	ldw	r2,-16(fp)
 2012dd4:	10800d17 	ldw	r2,52(r2)
 2012dd8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2012ddc:	e0fff817 	ldw	r3,-32(fp)
 2012de0:	e0bff517 	ldw	r2,-44(fp)
 2012de4:	1880062e 	bgeu	r3,r2,2012e00 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2012de8:	e0fff517 	ldw	r3,-44(fp)
 2012dec:	e0bff817 	ldw	r2,-32(fp)
 2012df0:	1885c83a 	sub	r2,r3,r2
 2012df4:	10bfffc4 	addi	r2,r2,-1
 2012df8:	e0bff615 	stw	r2,-40(fp)
 2012dfc:	00000b06 	br	2012e2c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 2012e00:	e0bff517 	ldw	r2,-44(fp)
 2012e04:	10000526 	beq	r2,zero,2012e1c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2012e08:	00c20004 	movi	r3,2048
 2012e0c:	e0bff817 	ldw	r2,-32(fp)
 2012e10:	1885c83a 	sub	r2,r3,r2
 2012e14:	e0bff615 	stw	r2,-40(fp)
 2012e18:	00000406 	br	2012e2c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2012e1c:	00c1ffc4 	movi	r3,2047
 2012e20:	e0bff817 	ldw	r2,-32(fp)
 2012e24:	1885c83a 	sub	r2,r3,r2
 2012e28:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2012e2c:	e0bff617 	ldw	r2,-40(fp)
 2012e30:	10001e26 	beq	r2,zero,2012eac <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 2012e34:	e0fffe17 	ldw	r3,-8(fp)
 2012e38:	e0bff617 	ldw	r2,-40(fp)
 2012e3c:	1880022e 	bgeu	r3,r2,2012e48 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 2012e40:	e0bffe17 	ldw	r2,-8(fp)
 2012e44:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2012e48:	e0bff817 	ldw	r2,-32(fp)
 2012e4c:	10820e04 	addi	r2,r2,2104
 2012e50:	e0fffc17 	ldw	r3,-16(fp)
 2012e54:	1885883a 	add	r2,r3,r2
 2012e58:	1009883a 	mov	r4,r2
 2012e5c:	e17ffd17 	ldw	r5,-12(fp)
 2012e60:	e1bff617 	ldw	r6,-40(fp)
 2012e64:	20090800 	call	2009080 <memcpy>
      ptr   += n;
 2012e68:	e0fffd17 	ldw	r3,-12(fp)
 2012e6c:	e0bff617 	ldw	r2,-40(fp)
 2012e70:	1885883a 	add	r2,r3,r2
 2012e74:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 2012e78:	e0fffe17 	ldw	r3,-8(fp)
 2012e7c:	e0bff617 	ldw	r2,-40(fp)
 2012e80:	1885c83a 	sub	r2,r3,r2
 2012e84:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2012e88:	e0fff817 	ldw	r3,-32(fp)
 2012e8c:	e0bff617 	ldw	r2,-40(fp)
 2012e90:	1885883a 	add	r2,r3,r2
 2012e94:	10c1ffcc 	andi	r3,r2,2047
 2012e98:	e0bffc17 	ldw	r2,-16(fp)
 2012e9c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2012ea0:	e0bffe17 	ldw	r2,-8(fp)
 2012ea4:	00bfc716 	blt	zero,r2,2012dc4 <altera_avalon_jtag_uart_write+0x30>
 2012ea8:	00000106 	br	2012eb0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2012eac:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012eb0:	0005303a 	rdctl	r2,status
 2012eb4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012eb8:	e0fffa17 	ldw	r3,-24(fp)
 2012ebc:	00bfff84 	movi	r2,-2
 2012ec0:	1884703a 	and	r2,r3,r2
 2012ec4:	1001703a 	wrctl	status,r2
  
  return context;
 2012ec8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2012ecc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2012ed0:	e0bffc17 	ldw	r2,-16(fp)
 2012ed4:	10800817 	ldw	r2,32(r2)
 2012ed8:	10c00094 	ori	r3,r2,2
 2012edc:	e0bffc17 	ldw	r2,-16(fp)
 2012ee0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2012ee4:	e0bffc17 	ldw	r2,-16(fp)
 2012ee8:	10800017 	ldw	r2,0(r2)
 2012eec:	10800104 	addi	r2,r2,4
 2012ef0:	e0fffc17 	ldw	r3,-16(fp)
 2012ef4:	18c00817 	ldw	r3,32(r3)
 2012ef8:	10c00035 	stwio	r3,0(r2)
 2012efc:	e0bff917 	ldw	r2,-28(fp)
 2012f00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012f04:	e0bffb17 	ldw	r2,-20(fp)
 2012f08:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2012f0c:	e0bffe17 	ldw	r2,-8(fp)
 2012f10:	0080110e 	bge	zero,r2,2012f58 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 2012f14:	e0bfff17 	ldw	r2,-4(fp)
 2012f18:	1090000c 	andi	r2,r2,16384
 2012f1c:	1000111e 	bne	r2,zero,2012f64 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 2012f20:	0001883a 	nop
 2012f24:	e0bffc17 	ldw	r2,-16(fp)
 2012f28:	10c00d17 	ldw	r3,52(r2)
 2012f2c:	e0bff517 	ldw	r2,-44(fp)
 2012f30:	1880051e 	bne	r3,r2,2012f48 <altera_avalon_jtag_uart_write+0x1b4>
 2012f34:	e0bffc17 	ldw	r2,-16(fp)
 2012f38:	10c00917 	ldw	r3,36(r2)
 2012f3c:	e0bffc17 	ldw	r2,-16(fp)
 2012f40:	10800117 	ldw	r2,4(r2)
 2012f44:	18bff736 	bltu	r3,r2,2012f24 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 2012f48:	e0bffc17 	ldw	r2,-16(fp)
 2012f4c:	10c00d17 	ldw	r3,52(r2)
 2012f50:	e0bff517 	ldw	r2,-44(fp)
 2012f54:	18800526 	beq	r3,r2,2012f6c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 2012f58:	e0bffe17 	ldw	r2,-8(fp)
 2012f5c:	00bfd016 	blt	zero,r2,2012ea0 <altera_avalon_jtag_uart_write+0x10c>
 2012f60:	00000306 	br	2012f70 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 2012f64:	0001883a 	nop
 2012f68:	00000106 	br	2012f70 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 2012f6c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2012f70:	e0fffd17 	ldw	r3,-12(fp)
 2012f74:	e0bff717 	ldw	r2,-36(fp)
 2012f78:	18800426 	beq	r3,r2,2012f8c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 2012f7c:	e0fffd17 	ldw	r3,-12(fp)
 2012f80:	e0bff717 	ldw	r2,-36(fp)
 2012f84:	1885c83a 	sub	r2,r3,r2
 2012f88:	00000606 	br	2012fa4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 2012f8c:	e0bfff17 	ldw	r2,-4(fp)
 2012f90:	1090000c 	andi	r2,r2,16384
 2012f94:	10000226 	beq	r2,zero,2012fa0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 2012f98:	00bffd44 	movi	r2,-11
 2012f9c:	00000106 	br	2012fa4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2012fa0:	00bffec4 	movi	r2,-5
}
 2012fa4:	e037883a 	mov	sp,fp
 2012fa8:	dfc00117 	ldw	ra,4(sp)
 2012fac:	df000017 	ldw	fp,0(sp)
 2012fb0:	dec00204 	addi	sp,sp,8
 2012fb4:	f800283a 	ret

02012fb8 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 2012fb8:	defff404 	addi	sp,sp,-48
 2012fbc:	df000b15 	stw	fp,44(sp)
 2012fc0:	df000b04 	addi	fp,sp,44
 2012fc4:	e13ffc15 	stw	r4,-16(fp)
 2012fc8:	e17ffd15 	stw	r5,-12(fp)
 2012fcc:	e1bffe15 	stw	r6,-8(fp)
 2012fd0:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 2012fd4:	e0ffff17 	ldw	r3,-4(fp)
 2012fd8:	e0bffe17 	ldw	r2,-8(fp)
 2012fdc:	1885883a 	add	r2,r3,r2
 2012fe0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 2012fe4:	e0c00217 	ldw	r3,8(fp)
 2012fe8:	e0800117 	ldw	r2,4(fp)
 2012fec:	1885883a 	add	r2,r3,r2
 2012ff0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 2012ff4:	e0800117 	ldw	r2,4(fp)
 2012ff8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 2012ffc:	e0bffe17 	ldw	r2,-8(fp)
 2013000:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 2013004:	00800044 	movi	r2,1
 2013008:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 201300c:	e0bffc17 	ldw	r2,-16(fp)
 2013010:	10800504 	addi	r2,r2,20
 2013014:	e0fffd17 	ldw	r3,-12(fp)
 2013018:	01000044 	movi	r4,1
 201301c:	20c6983a 	sll	r3,r4,r3
 2013020:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 2013024:	e0800317 	ldw	r2,12(fp)
 2013028:	1080008c 	andi	r2,r2,2
 201302c:	1000041e 	bne	r2,zero,2013040 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 2013030:	e0bffc17 	ldw	r2,-16(fp)
 2013034:	10800304 	addi	r2,r2,12
 2013038:	00c10004 	movi	r3,1024
 201303c:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2013040:	e0bffc17 	ldw	r2,-16(fp)
 2013044:	10800037 	ldwio	r2,0(r2)
 2013048:	00000106 	br	2013050 <alt_avalon_spi_command+0x98>

      if (read_ignore == 0 && read_data == read_end)
        break;
    }
    
  }
 201304c:	0001883a 	nop
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2013050:	e0bffc17 	ldw	r2,-16(fp)
 2013054:	10800204 	addi	r2,r2,8
 2013058:	10800037 	ldwio	r2,0(r2)
 201305c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 2013060:	e0bffa17 	ldw	r2,-24(fp)
 2013064:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2013068:	10000226 	beq	r2,zero,2013074 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 201306c:	e0bff717 	ldw	r2,-36(fp)
 2013070:	1000031e 	bne	r2,zero,2013080 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 2013074:	e0bffa17 	ldw	r2,-24(fp)
 2013078:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 201307c:	103ff426 	beq	r2,zero,2013050 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 2013080:	e0bffa17 	ldw	r2,-24(fp)
 2013084:	1080100c 	andi	r2,r2,64
 2013088:	10001e26 	beq	r2,zero,2013104 <alt_avalon_spi_command+0x14c>
 201308c:	e0bff717 	ldw	r2,-36(fp)
 2013090:	00801c0e 	bge	zero,r2,2013104 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 2013094:	e0bff717 	ldw	r2,-36(fp)
 2013098:	10bfffc4 	addi	r2,r2,-1
 201309c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 20130a0:	e0ffff17 	ldw	r3,-4(fp)
 20130a4:	e0bff817 	ldw	r2,-32(fp)
 20130a8:	18800a2e 	bgeu	r3,r2,20130d4 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 20130ac:	e0bffc17 	ldw	r2,-16(fp)
 20130b0:	10800104 	addi	r2,r2,4
 20130b4:	e0ffff17 	ldw	r3,-4(fp)
 20130b8:	18c00003 	ldbu	r3,0(r3)
 20130bc:	18c03fcc 	andi	r3,r3,255
 20130c0:	e13fff17 	ldw	r4,-4(fp)
 20130c4:	21000044 	addi	r4,r4,1
 20130c8:	e13fff15 	stw	r4,-4(fp)
 20130cc:	10c00035 	stwio	r3,0(r2)
 20130d0:	00000c06 	br	2013104 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 20130d4:	e0bff517 	ldw	r2,-44(fp)
 20130d8:	10000826 	beq	r2,zero,20130fc <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 20130dc:	e0bff517 	ldw	r2,-44(fp)
 20130e0:	10bfffc4 	addi	r2,r2,-1
 20130e4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 20130e8:	e0bffc17 	ldw	r2,-16(fp)
 20130ec:	10800104 	addi	r2,r2,4
 20130f0:	0007883a 	mov	r3,zero
 20130f4:	10c00035 	stwio	r3,0(r2)
 20130f8:	00000206 	br	2013104 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 20130fc:	00bf0004 	movi	r2,-1024
 2013100:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 2013104:	e0bffa17 	ldw	r2,-24(fp)
 2013108:	1080200c 	andi	r2,r2,128
 201310c:	103fcf26 	beq	r2,zero,201304c <alt_avalon_spi_command+0x94>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 2013110:	e0bffc17 	ldw	r2,-16(fp)
 2013114:	10800037 	ldwio	r2,0(r2)
 2013118:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 201311c:	e0bff617 	ldw	r2,-40(fp)
 2013120:	10000426 	beq	r2,zero,2013134 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 2013124:	e0bff617 	ldw	r2,-40(fp)
 2013128:	10bfffc4 	addi	r2,r2,-1
 201312c:	e0bff615 	stw	r2,-40(fp)
 2013130:	00000706 	br	2013150 <alt_avalon_spi_command+0x198>
      else
        *read_data++ = (alt_u8)rxdata;
 2013134:	e0bffb17 	ldw	r2,-20(fp)
 2013138:	1007883a 	mov	r3,r2
 201313c:	e0800217 	ldw	r2,8(fp)
 2013140:	10c00005 	stb	r3,0(r2)
 2013144:	e0800217 	ldw	r2,8(fp)
 2013148:	10800044 	addi	r2,r2,1
 201314c:	e0800215 	stw	r2,8(fp)
      credits++;
 2013150:	e0bff717 	ldw	r2,-36(fp)
 2013154:	10800044 	addi	r2,r2,1
 2013158:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 201315c:	e0bff617 	ldw	r2,-40(fp)
 2013160:	103fba1e 	bne	r2,zero,201304c <alt_avalon_spi_command+0x94>
 2013164:	e0c00217 	ldw	r3,8(fp)
 2013168:	e0bff917 	ldw	r2,-28(fp)
 201316c:	18bfb71e 	bne	r3,r2,201304c <alt_avalon_spi_command+0x94>
        break;
 2013170:	0001883a 	nop
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 2013174:	e0bffc17 	ldw	r2,-16(fp)
 2013178:	10800204 	addi	r2,r2,8
 201317c:	10800037 	ldwio	r2,0(r2)
 2013180:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 2013184:	e0bffa17 	ldw	r2,-24(fp)
 2013188:	1080080c 	andi	r2,r2,32
 201318c:	103ff926 	beq	r2,zero,2013174 <alt_avalon_spi_command+0x1bc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 2013190:	e0800317 	ldw	r2,12(fp)
 2013194:	1080004c 	andi	r2,r2,1
 2013198:	1000041e 	bne	r2,zero,20131ac <alt_avalon_spi_command+0x1f4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 201319c:	e0bffc17 	ldw	r2,-16(fp)
 20131a0:	10800304 	addi	r2,r2,12
 20131a4:	0007883a 	mov	r3,zero
 20131a8:	10c00035 	stwio	r3,0(r2)

  return read_length;
 20131ac:	e0800117 	ldw	r2,4(fp)
}
 20131b0:	e037883a 	mov	sp,fp
 20131b4:	df000017 	ldw	fp,0(sp)
 20131b8:	dec00104 	addi	sp,sp,4
 20131bc:	f800283a 	ret

020131c0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 20131c0:	defffa04 	addi	sp,sp,-24
 20131c4:	dfc00515 	stw	ra,20(sp)
 20131c8:	df000415 	stw	fp,16(sp)
 20131cc:	df000404 	addi	fp,sp,16
 20131d0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 20131d4:	0007883a 	mov	r3,zero
 20131d8:	e0bfff17 	ldw	r2,-4(fp)
 20131dc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 20131e0:	e0bfff17 	ldw	r2,-4(fp)
 20131e4:	10800104 	addi	r2,r2,4
 20131e8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20131ec:	0005303a 	rdctl	r2,status
 20131f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20131f4:	e0fffd17 	ldw	r3,-12(fp)
 20131f8:	00bfff84 	movi	r2,-2
 20131fc:	1884703a 	and	r2,r3,r2
 2013200:	1001703a 	wrctl	status,r2
  
  return context;
 2013204:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 2013208:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 201320c:	201187c0 	call	201187c <alt_tick>
 2013210:	e0bffc17 	ldw	r2,-16(fp)
 2013214:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013218:	e0bffe17 	ldw	r2,-8(fp)
 201321c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 2013220:	e037883a 	mov	sp,fp
 2013224:	dfc00117 	ldw	ra,4(sp)
 2013228:	df000017 	ldw	fp,0(sp)
 201322c:	dec00204 	addi	sp,sp,8
 2013230:	f800283a 	ret

02013234 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 2013234:	defff804 	addi	sp,sp,-32
 2013238:	dfc00715 	stw	ra,28(sp)
 201323c:	df000615 	stw	fp,24(sp)
 2013240:	df000604 	addi	fp,sp,24
 2013244:	e13ffc15 	stw	r4,-16(fp)
 2013248:	e17ffd15 	stw	r5,-12(fp)
 201324c:	e1bffe15 	stw	r6,-8(fp)
 2013250:	e1ffff15 	stw	r7,-4(fp)
 2013254:	e0bfff17 	ldw	r2,-4(fp)
 2013258:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 201325c:	008080f4 	movhi	r2,515
 2013260:	10884604 	addi	r2,r2,8472
 2013264:	10800017 	ldw	r2,0(r2)
 2013268:	1000041e 	bne	r2,zero,201327c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 201326c:	008080f4 	movhi	r2,515
 2013270:	10884604 	addi	r2,r2,8472
 2013274:	e0fffb17 	ldw	r3,-20(fp)
 2013278:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 201327c:	e0bffc17 	ldw	r2,-16(fp)
 2013280:	10800104 	addi	r2,r2,4
 2013284:	00c001c4 	movi	r3,7
 2013288:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 201328c:	d8000015 	stw	zero,0(sp)
 2013290:	e13ffd17 	ldw	r4,-12(fp)
 2013294:	e17ffe17 	ldw	r5,-8(fp)
 2013298:	01808074 	movhi	r6,513
 201329c:	318c7004 	addi	r6,r6,12736
 20132a0:	e1fffc17 	ldw	r7,-16(fp)
 20132a4:	20110040 	call	2011004 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 20132a8:	e037883a 	mov	sp,fp
 20132ac:	dfc00117 	ldw	ra,4(sp)
 20132b0:	df000017 	ldw	fp,0(sp)
 20132b4:	dec00204 	addi	sp,sp,8
 20132b8:	f800283a 	ret

020132bc <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 20132bc:	defff904 	addi	sp,sp,-28
 20132c0:	dfc00615 	stw	ra,24(sp)
 20132c4:	df000515 	stw	fp,20(sp)
 20132c8:	df000504 	addi	fp,sp,20
 20132cc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 20132d0:	00800144 	movi	r2,5
 20132d4:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 20132d8:	00800044 	movi	r2,1
 20132dc:	d8800015 	stw	r2,0(sp)
 20132e0:	e0bffe44 	addi	r2,fp,-7
 20132e4:	d8800115 	stw	r2,4(sp)
 20132e8:	d8000215 	stw	zero,8(sp)
 20132ec:	e13fff17 	ldw	r4,-4(fp)
 20132f0:	000b883a 	mov	r5,zero
 20132f4:	01800044 	movi	r6,1
 20132f8:	e1fffe04 	addi	r7,fp,-8
 20132fc:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 2013300:	e0bffe43 	ldbu	r2,-7(fp)
}
 2013304:	e037883a 	mov	sp,fp
 2013308:	dfc00117 	ldw	ra,4(sp)
 201330c:	df000017 	ldw	fp,0(sp)
 2013310:	dec00204 	addi	sp,sp,8
 2013314:	f800283a 	ret

02013318 <epcs_test_wip>:

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2013318:	defffd04 	addi	sp,sp,-12
 201331c:	dfc00215 	stw	ra,8(sp)
 2013320:	df000115 	stw	fp,4(sp)
 2013324:	df000104 	addi	fp,sp,4
 2013328:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 201332c:	e13fff17 	ldw	r4,-4(fp)
 2013330:	20132bc0 	call	20132bc <epcs_read_status_register>
 2013334:	10803fcc 	andi	r2,r2,255
 2013338:	1080004c 	andi	r2,r2,1
}
 201333c:	e037883a 	mov	sp,fp
 2013340:	dfc00117 	ldw	ra,4(sp)
 2013344:	df000017 	ldw	fp,0(sp)
 2013348:	dec00204 	addi	sp,sp,8
 201334c:	f800283a 	ret

02013350 <epcs_await_wip_released>:

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 2013350:	defffd04 	addi	sp,sp,-12
 2013354:	dfc00215 	stw	ra,8(sp)
 2013358:	df000115 	stw	fp,4(sp)
 201335c:	df000104 	addi	fp,sp,4
 2013360:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 2013364:	0001883a 	nop
 2013368:	e13fff17 	ldw	r4,-4(fp)
 201336c:	20133180 	call	2013318 <epcs_test_wip>
 2013370:	103ffd1e 	bne	r2,zero,2013368 <epcs_await_wip_released+0x18>
  {
  }
}
 2013374:	e037883a 	mov	sp,fp
 2013378:	dfc00117 	ldw	ra,4(sp)
 201337c:	df000017 	ldw	fp,0(sp)
 2013380:	dec00204 	addi	sp,sp,8
 2013384:	f800283a 	ret

02013388 <epcs_sector_erase>:

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 2013388:	defff604 	addi	sp,sp,-40
 201338c:	dfc00915 	stw	ra,36(sp)
 2013390:	df000815 	stw	fp,32(sp)
 2013394:	df000804 	addi	fp,sp,32
 2013398:	e13ffd15 	stw	r4,-12(fp)
 201339c:	e17ffe15 	stw	r5,-8(fp)
 20133a0:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 20133a4:	e0bfff17 	ldw	r2,-4(fp)
 20133a8:	10001226 	beq	r2,zero,20133f4 <epcs_sector_erase+0x6c>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 20133ac:	00bff604 	movi	r2,-40
 20133b0:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 20133b4:	e0bffe17 	ldw	r2,-8(fp)
 20133b8:	1004d63a 	srli	r2,r2,24
 20133bc:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 20133c0:	e0bffe17 	ldw	r2,-8(fp)
 20133c4:	1004d43a 	srli	r2,r2,16
 20133c8:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 20133cc:	e0bffe17 	ldw	r2,-8(fp)
 20133d0:	1004d23a 	srli	r2,r2,8
 20133d4:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 20133d8:	e0bffe17 	ldw	r2,-8(fp)
 20133dc:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 20133e0:	00800144 	movi	r2,5
 20133e4:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 20133e8:	e13ffd17 	ldw	r4,-12(fp)
 20133ec:	20138300 	call	2013830 <epcs_enter_4_bytes_mode>
 20133f0:	00000c06 	br	2013424 <epcs_sector_erase+0x9c>
  }
  else
  {
      se[0] = epcs_se;
 20133f4:	00bff604 	movi	r2,-40
 20133f8:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 20133fc:	e0bffe17 	ldw	r2,-8(fp)
 2013400:	1004d43a 	srli	r2,r2,16
 2013404:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 2013408:	e0bffe17 	ldw	r2,-8(fp)
 201340c:	1004d23a 	srli	r2,r2,8
 2013410:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2013414:	e0bffe17 	ldw	r2,-8(fp)
 2013418:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 201341c:	00800104 	movi	r2,4
 2013420:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 2013424:	e13ffd17 	ldw	r4,-12(fp)
 2013428:	20135740 	call	2013574 <epcs_write_enable>

  alt_avalon_spi_command(
 201342c:	e0fffb03 	ldbu	r3,-20(fp)
    base,
    0,
    len,
    se,
 2013430:	e0bffb44 	addi	r2,fp,-19
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);

  alt_avalon_spi_command(
 2013434:	d8000015 	stw	zero,0(sp)
 2013438:	d8000115 	stw	zero,4(sp)
 201343c:	d8000215 	stw	zero,8(sp)
 2013440:	e13ffd17 	ldw	r4,-12(fp)
 2013444:	000b883a 	mov	r5,zero
 2013448:	180d883a 	mov	r6,r3
 201344c:	100f883a 	mov	r7,r2
 2013450:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2013454:	e13ffd17 	ldw	r4,-12(fp)
 2013458:	20133500 	call	2013350 <epcs_await_wip_released>

  if(four_bytes_mode)
 201345c:	e0bfff17 	ldw	r2,-4(fp)
 2013460:	10000226 	beq	r2,zero,201346c <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 2013464:	e13ffd17 	ldw	r4,-12(fp)
 2013468:	20138880 	call	2013888 <epcs_exit_4_bytes_mode>
  }
}
 201346c:	e037883a 	mov	sp,fp
 2013470:	dfc00117 	ldw	ra,4(sp)
 2013474:	df000017 	ldw	fp,0(sp)
 2013478:	dec00204 	addi	sp,sp,8
 201347c:	f800283a 	ret

02013480 <epcs_read_buffer>:

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 2013480:	defff404 	addi	sp,sp,-48
 2013484:	dfc00b15 	stw	ra,44(sp)
 2013488:	df000a15 	stw	fp,40(sp)
 201348c:	df000a04 	addi	fp,sp,40
 2013490:	e13ffc15 	stw	r4,-16(fp)
 2013494:	e17ffd15 	stw	r5,-12(fp)
 2013498:	e1bffe15 	stw	r6,-8(fp)
 201349c:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 20134a0:	008000c4 	movi	r2,3
 20134a4:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 20134a8:	e0800217 	ldw	r2,8(fp)
 20134ac:	10001026 	beq	r2,zero,20134f0 <epcs_read_buffer+0x70>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 20134b0:	e0bffd17 	ldw	r2,-12(fp)
 20134b4:	1004d63a 	srli	r2,r2,24
 20134b8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 20134bc:	e0bffd17 	ldw	r2,-12(fp)
 20134c0:	1005d43a 	srai	r2,r2,16
 20134c4:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 20134c8:	e0bffd17 	ldw	r2,-12(fp)
 20134cc:	1005d23a 	srai	r2,r2,8
 20134d0:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 20134d4:	e0bffd17 	ldw	r2,-12(fp)
 20134d8:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 20134dc:	00800144 	movi	r2,5
 20134e0:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 20134e4:	e13ffc17 	ldw	r4,-16(fp)
 20134e8:	20138300 	call	2013830 <epcs_enter_4_bytes_mode>
 20134ec:	00000a06 	br	2013518 <epcs_read_buffer+0x98>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 20134f0:	e0bffd17 	ldw	r2,-12(fp)
 20134f4:	1005d43a 	srai	r2,r2,16
 20134f8:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 20134fc:	e0bffd17 	ldw	r2,-12(fp)
 2013500:	1005d23a 	srai	r2,r2,8
 2013504:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2013508:	e0bffd17 	ldw	r2,-12(fp)
 201350c:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 2013510:	00800104 	movi	r2,4
 2013514:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 2013518:	e13ffc17 	ldw	r4,-16(fp)
 201351c:	20133500 	call	2013350 <epcs_await_wip_released>

  alt_avalon_spi_command(
 2013520:	e0ffff17 	ldw	r3,-4(fp)
    base,
    0,
    cmd_len,
    read_command,
 2013524:	e0bffa04 	addi	r2,fp,-24
        cmd_len = 4;
  }

  epcs_await_wip_released(base);

  alt_avalon_spi_command(
 2013528:	d8c00015 	stw	r3,0(sp)
 201352c:	e0fffe17 	ldw	r3,-8(fp)
 2013530:	d8c00115 	stw	r3,4(sp)
 2013534:	d8000215 	stw	zero,8(sp)
 2013538:	e13ffc17 	ldw	r4,-16(fp)
 201353c:	000b883a 	mov	r5,zero
 2013540:	e1bff917 	ldw	r6,-28(fp)
 2013544:	100f883a 	mov	r7,r2
 2013548:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 201354c:	e0800217 	ldw	r2,8(fp)
 2013550:	10000226 	beq	r2,zero,201355c <epcs_read_buffer+0xdc>
  {
    epcs_exit_4_bytes_mode(base);
 2013554:	e13ffc17 	ldw	r4,-16(fp)
 2013558:	20138880 	call	2013888 <epcs_exit_4_bytes_mode>
  }

  return length;
 201355c:	e0bfff17 	ldw	r2,-4(fp)
}
 2013560:	e037883a 	mov	sp,fp
 2013564:	dfc00117 	ldw	ra,4(sp)
 2013568:	df000017 	ldw	fp,0(sp)
 201356c:	dec00204 	addi	sp,sp,8
 2013570:	f800283a 	ret

02013574 <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 2013574:	defff904 	addi	sp,sp,-28
 2013578:	dfc00615 	stw	ra,24(sp)
 201357c:	df000515 	stw	fp,20(sp)
 2013580:	df000504 	addi	fp,sp,20
 2013584:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 2013588:	00800184 	movi	r2,6
 201358c:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 2013590:	d8000015 	stw	zero,0(sp)
 2013594:	d8000115 	stw	zero,4(sp)
 2013598:	d8000215 	stw	zero,8(sp)
 201359c:	e13fff17 	ldw	r4,-4(fp)
 20135a0:	000b883a 	mov	r5,zero
 20135a4:	01800044 	movi	r6,1
 20135a8:	e1fffe04 	addi	r7,fp,-8
 20135ac:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 20135b0:	e037883a 	mov	sp,fp
 20135b4:	dfc00117 	ldw	ra,4(sp)
 20135b8:	df000017 	ldw	fp,0(sp)
 20135bc:	dec00204 	addi	sp,sp,8
 20135c0:	f800283a 	ret

020135c4 <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 20135c4:	defff804 	addi	sp,sp,-32
 20135c8:	dfc00715 	stw	ra,28(sp)
 20135cc:	df000615 	stw	fp,24(sp)
 20135d0:	df000604 	addi	fp,sp,24
 20135d4:	e13ffe15 	stw	r4,-8(fp)
 20135d8:	2805883a 	mov	r2,r5
 20135dc:	e0bfff05 	stb	r2,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 20135e0:	00800044 	movi	r2,1
 20135e4:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 20135e8:	e0bfff03 	ldbu	r2,-4(fp)
 20135ec:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 20135f0:	d8000015 	stw	zero,0(sp)
 20135f4:	d8000115 	stw	zero,4(sp)
 20135f8:	d8000215 	stw	zero,8(sp)
 20135fc:	e13ffe17 	ldw	r4,-8(fp)
 2013600:	000b883a 	mov	r5,zero
 2013604:	01800084 	movi	r6,2
 2013608:	e1fffd04 	addi	r7,fp,-12
 201360c:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2013610:	e13ffe17 	ldw	r4,-8(fp)
 2013614:	20133500 	call	2013350 <epcs_await_wip_released>
}
 2013618:	e037883a 	mov	sp,fp
 201361c:	dfc00117 	ldw	ra,4(sp)
 2013620:	df000017 	ldw	fp,0(sp)
 2013624:	dec00204 	addi	sp,sp,8
 2013628:	f800283a 	ret

0201362c <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 201362c:	defff404 	addi	sp,sp,-48
 2013630:	dfc00b15 	stw	ra,44(sp)
 2013634:	df000a15 	stw	fp,40(sp)
 2013638:	df000a04 	addi	fp,sp,40
 201363c:	e13ffc15 	stw	r4,-16(fp)
 2013640:	e17ffd15 	stw	r5,-12(fp)
 2013644:	e1bffe15 	stw	r6,-8(fp)
 2013648:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 201364c:	00800084 	movi	r2,2
 2013650:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2013654:	e0800217 	ldw	r2,8(fp)
 2013658:	10001026 	beq	r2,zero,201369c <epcs_write_buffer+0x70>
  {
      pp[1] = (offset >> 24) & 0xFF;
 201365c:	e0bffd17 	ldw	r2,-12(fp)
 2013660:	1004d63a 	srli	r2,r2,24
 2013664:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 2013668:	e0bffd17 	ldw	r2,-12(fp)
 201366c:	1005d43a 	srai	r2,r2,16
 2013670:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 2013674:	e0bffd17 	ldw	r2,-12(fp)
 2013678:	1005d23a 	srai	r2,r2,8
 201367c:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 2013680:	e0bffd17 	ldw	r2,-12(fp)
 2013684:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 2013688:	00800144 	movi	r2,5
 201368c:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 2013690:	e13ffc17 	ldw	r4,-16(fp)
 2013694:	20138300 	call	2013830 <epcs_enter_4_bytes_mode>
 2013698:	00000a06 	br	20136c4 <epcs_write_buffer+0x98>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 201369c:	e0bffd17 	ldw	r2,-12(fp)
 20136a0:	1005d43a 	srai	r2,r2,16
 20136a4:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 20136a8:	e0bffd17 	ldw	r2,-12(fp)
 20136ac:	1005d23a 	srai	r2,r2,8
 20136b0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 20136b4:	e0bffd17 	ldw	r2,-12(fp)
 20136b8:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 20136bc:	00800104 	movi	r2,4
 20136c0:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 20136c4:	e13ffc17 	ldw	r4,-16(fp)
 20136c8:	20135740 	call	2013574 <epcs_write_enable>
  /* Send the PP command */
  alt_avalon_spi_command(
    base,
    0,
    cmd_len,
    pp,
 20136cc:	e0bffa04 	addi	r2,fp,-24

  /* First, WREN */
  epcs_write_enable(base);

  /* Send the PP command */
  alt_avalon_spi_command(
 20136d0:	d8000015 	stw	zero,0(sp)
 20136d4:	d8000115 	stw	zero,4(sp)
 20136d8:	00c00044 	movi	r3,1
 20136dc:	d8c00215 	stw	r3,8(sp)
 20136e0:	e13ffc17 	ldw	r4,-16(fp)
 20136e4:	000b883a 	mov	r5,zero
 20136e8:	e1bff917 	ldw	r6,-28(fp)
 20136ec:	100f883a 	mov	r7,r2
 20136f0:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 20136f4:	e0bfff17 	ldw	r2,-4(fp)
 20136f8:	d8000015 	stw	zero,0(sp)
 20136fc:	d8000115 	stw	zero,4(sp)
 2013700:	d8000215 	stw	zero,8(sp)
 2013704:	e13ffc17 	ldw	r4,-16(fp)
 2013708:	000b883a 	mov	r5,zero
 201370c:	100d883a 	mov	r6,r2
 2013710:	e1fffe17 	ldw	r7,-8(fp)
 2013714:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 2013718:	e13ffc17 	ldw	r4,-16(fp)
 201371c:	20133500 	call	2013350 <epcs_await_wip_released>

  if(four_bytes_mode)
 2013720:	e0800217 	ldw	r2,8(fp)
 2013724:	10000226 	beq	r2,zero,2013730 <epcs_write_buffer+0x104>
  {
    epcs_exit_4_bytes_mode(base);
 2013728:	e13ffc17 	ldw	r4,-16(fp)
 201372c:	20138880 	call	2013888 <epcs_exit_4_bytes_mode>
  }

  return length;
 2013730:	e0bfff17 	ldw	r2,-4(fp)
}
 2013734:	e037883a 	mov	sp,fp
 2013738:	dfc00117 	ldw	ra,4(sp)
 201373c:	df000017 	ldw	fp,0(sp)
 2013740:	dec00204 	addi	sp,sp,8
 2013744:	f800283a 	ret

02013748 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 2013748:	defff804 	addi	sp,sp,-32
 201374c:	dfc00715 	stw	ra,28(sp)
 2013750:	df000615 	stw	fp,24(sp)
 2013754:	df000604 	addi	fp,sp,24
 2013758:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 201375c:	00bfeac4 	movi	r2,-85
 2013760:	e0bffd05 	stb	r2,-12(fp)
 2013764:	e03ffd45 	stb	zero,-11(fp)
 2013768:	e03ffd85 	stb	zero,-10(fp)
 201376c:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 2013770:	00800044 	movi	r2,1
 2013774:	d8800015 	stw	r2,0(sp)
 2013778:	e0bffe04 	addi	r2,fp,-8
 201377c:	d8800115 	stw	r2,4(sp)
 2013780:	d8000215 	stw	zero,8(sp)
 2013784:	e13fff17 	ldw	r4,-4(fp)
 2013788:	000b883a 	mov	r5,zero
 201378c:	01800104 	movi	r6,4
 2013790:	e1fffd04 	addi	r7,fp,-12
 2013794:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 2013798:	e0bffe03 	ldbu	r2,-8(fp)
}
 201379c:	e037883a 	mov	sp,fp
 20137a0:	dfc00117 	ldw	ra,4(sp)
 20137a4:	df000017 	ldw	fp,0(sp)
 20137a8:	dec00204 	addi	sp,sp,8
 20137ac:	f800283a 	ret

020137b0 <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 20137b0:	defff904 	addi	sp,sp,-28
 20137b4:	dfc00615 	stw	ra,24(sp)
 20137b8:	df000515 	stw	fp,20(sp)
 20137bc:	df000504 	addi	fp,sp,20
 20137c0:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 20137c4:	00bfe7c4 	movi	r2,-97
 20137c8:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 20137cc:	008000c4 	movi	r2,3
 20137d0:	d8800015 	stw	r2,0(sp)
    base,
    0,
    sizeof(rd_id_cmd) / sizeof(*rd_id_cmd),
    rd_id_cmd,
    3,
    id,
 20137d4:	e0bffe44 	addi	r2,fp,-7
alt_u32 epcs_read_device_id(alt_u32 base)
{
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
  alt_u8 id[3];

  alt_avalon_spi_command(
 20137d8:	d8800115 	stw	r2,4(sp)
 20137dc:	d8000215 	stw	zero,8(sp)
 20137e0:	e13fff17 	ldw	r4,-4(fp)
 20137e4:	000b883a 	mov	r5,zero
 20137e8:	01800044 	movi	r6,1
 20137ec:	e1fffe04 	addi	r7,fp,-8
 20137f0:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 20137f4:	e0bffe43 	ldbu	r2,-7(fp)
 20137f8:	10803fcc 	andi	r2,r2,255
 20137fc:	1006943a 	slli	r3,r2,16
 2013800:	e0bffe83 	ldbu	r2,-6(fp)
 2013804:	10803fcc 	andi	r2,r2,255
 2013808:	1004923a 	slli	r2,r2,8
 201380c:	1886b03a 	or	r3,r3,r2
 2013810:	e0bffec3 	ldbu	r2,-5(fp)
 2013814:	10803fcc 	andi	r2,r2,255
 2013818:	1884b03a 	or	r2,r3,r2
}
 201381c:	e037883a 	mov	sp,fp
 2013820:	dfc00117 	ldw	ra,4(sp)
 2013824:	df000017 	ldw	fp,0(sp)
 2013828:	dec00204 	addi	sp,sp,8
 201382c:	f800283a 	ret

02013830 <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 2013830:	defff904 	addi	sp,sp,-28
 2013834:	dfc00615 	stw	ra,24(sp)
 2013838:	df000515 	stw	fp,20(sp)
 201383c:	df000504 	addi	fp,sp,20
 2013840:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 2013844:	00bfedc4 	movi	r2,-73
 2013848:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 201384c:	e13fff17 	ldw	r4,-4(fp)
 2013850:	20135740 	call	2013574 <epcs_write_enable>

  alt_avalon_spi_command(
 2013854:	d8000015 	stw	zero,0(sp)
 2013858:	d8000115 	stw	zero,4(sp)
 201385c:	d8000215 	stw	zero,8(sp)
 2013860:	e13fff17 	ldw	r4,-4(fp)
 2013864:	000b883a 	mov	r5,zero
 2013868:	01800044 	movi	r6,1
 201386c:	e1fffe04 	addi	r7,fp,-8
 2013870:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 2013874:	e037883a 	mov	sp,fp
 2013878:	dfc00117 	ldw	ra,4(sp)
 201387c:	df000017 	ldw	fp,0(sp)
 2013880:	dec00204 	addi	sp,sp,8
 2013884:	f800283a 	ret

02013888 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 2013888:	defff904 	addi	sp,sp,-28
 201388c:	dfc00615 	stw	ra,24(sp)
 2013890:	df000515 	stw	fp,20(sp)
 2013894:	df000504 	addi	fp,sp,20
 2013898:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 201389c:	00bffa44 	movi	r2,-23
 20138a0:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 20138a4:	e13fff17 	ldw	r4,-4(fp)
 20138a8:	20135740 	call	2013574 <epcs_write_enable>

  alt_avalon_spi_command(
 20138ac:	d8000015 	stw	zero,0(sp)
 20138b0:	d8000115 	stw	zero,4(sp)
 20138b4:	d8000215 	stw	zero,8(sp)
 20138b8:	e13fff17 	ldw	r4,-4(fp)
 20138bc:	000b883a 	mov	r5,zero
 20138c0:	01800044 	movi	r6,1
 20138c4:	e1fffe04 	addi	r7,fp,-8
 20138c8:	2012fb80 	call	2012fb8 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 20138cc:	e037883a 	mov	sp,fp
 20138d0:	dfc00117 	ldw	ra,4(sp)
 20138d4:	df000017 	ldw	fp,0(sp)
 20138d8:	dec00204 	addi	sp,sp,8
 20138dc:	f800283a 	ret

020138e0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 20138e0:	defffa04 	addi	sp,sp,-24
 20138e4:	dfc00515 	stw	ra,20(sp)
 20138e8:	df000415 	stw	fp,16(sp)
 20138ec:	df000404 	addi	fp,sp,16
 20138f0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 20138f4:	008000c4 	movi	r2,3
 20138f8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 20138fc:	e0fffd17 	ldw	r3,-12(fp)
 2013900:	008003f4 	movhi	r2,15
 2013904:	10909004 	addi	r2,r2,16960
 2013908:	1885383a 	mul	r2,r3,r2
 201390c:	01017db4 	movhi	r4,1526
 2013910:	21384004 	addi	r4,r4,-7936
 2013914:	100b883a 	mov	r5,r2
 2013918:	20083280 	call	2008328 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 201391c:	01200034 	movhi	r4,32768
 2013920:	213fffc4 	addi	r4,r4,-1
 2013924:	100b883a 	mov	r5,r2
 2013928:	20083280 	call	2008328 <__udivsi3>
 201392c:	e13fff17 	ldw	r4,-4(fp)
 2013930:	100b883a 	mov	r5,r2
 2013934:	20083280 	call	2008328 <__udivsi3>
 2013938:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 201393c:	e0bffe17 	ldw	r2,-8(fp)
 2013940:	10002926 	beq	r2,zero,20139e8 <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
 2013944:	e03ffc15 	stw	zero,-16(fp)
 2013948:	00001606 	br	20139a4 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 201394c:	00a00034 	movhi	r2,32768
 2013950:	10bfffc4 	addi	r2,r2,-1
 2013954:	10bfffc4 	addi	r2,r2,-1
 2013958:	103ffe1e 	bne	r2,zero,2013954 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 201395c:	e0fffd17 	ldw	r3,-12(fp)
 2013960:	008003f4 	movhi	r2,15
 2013964:	10909004 	addi	r2,r2,16960
 2013968:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 201396c:	01017db4 	movhi	r4,1526
 2013970:	21384004 	addi	r4,r4,-7936
 2013974:	100b883a 	mov	r5,r2
 2013978:	20083280 	call	2008328 <__udivsi3>
 201397c:	01200034 	movhi	r4,32768
 2013980:	213fffc4 	addi	r4,r4,-1
 2013984:	100b883a 	mov	r5,r2
 2013988:	20083280 	call	2008328 <__udivsi3>
 201398c:	e0ffff17 	ldw	r3,-4(fp)
 2013990:	1885c83a 	sub	r2,r3,r2
 2013994:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2013998:	e0bffc17 	ldw	r2,-16(fp)
 201399c:	10800044 	addi	r2,r2,1
 20139a0:	e0bffc15 	stw	r2,-16(fp)
 20139a4:	e0fffc17 	ldw	r3,-16(fp)
 20139a8:	e0bffe17 	ldw	r2,-8(fp)
 20139ac:	18bfe716 	blt	r3,r2,201394c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 20139b0:	e0fffd17 	ldw	r3,-12(fp)
 20139b4:	008003f4 	movhi	r2,15
 20139b8:	10909004 	addi	r2,r2,16960
 20139bc:	1885383a 	mul	r2,r3,r2
 20139c0:	01017db4 	movhi	r4,1526
 20139c4:	21384004 	addi	r4,r4,-7936
 20139c8:	100b883a 	mov	r5,r2
 20139cc:	20083280 	call	2008328 <__udivsi3>
 20139d0:	1007883a 	mov	r3,r2
 20139d4:	e0bfff17 	ldw	r2,-4(fp)
 20139d8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 20139dc:	10bfffc4 	addi	r2,r2,-1
 20139e0:	103ffe1e 	bne	r2,zero,20139dc <alt_busy_sleep+0xfc>
 20139e4:	00000d06 	br	2013a1c <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 20139e8:	e0fffd17 	ldw	r3,-12(fp)
 20139ec:	008003f4 	movhi	r2,15
 20139f0:	10909004 	addi	r2,r2,16960
 20139f4:	1885383a 	mul	r2,r3,r2
 20139f8:	01017db4 	movhi	r4,1526
 20139fc:	21384004 	addi	r4,r4,-7936
 2013a00:	100b883a 	mov	r5,r2
 2013a04:	20083280 	call	2008328 <__udivsi3>
 2013a08:	1007883a 	mov	r3,r2
 2013a0c:	e0bfff17 	ldw	r2,-4(fp)
 2013a10:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2013a14:	10bfffc4 	addi	r2,r2,-1
 2013a18:	00bffe16 	blt	zero,r2,2013a14 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 2013a1c:	0005883a 	mov	r2,zero
}
 2013a20:	e037883a 	mov	sp,fp
 2013a24:	dfc00117 	ldw	ra,4(sp)
 2013a28:	df000017 	ldw	fp,0(sp)
 2013a2c:	dec00204 	addi	sp,sp,8
 2013a30:	f800283a 	ret

02013a34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2013a34:	defffe04 	addi	sp,sp,-8
 2013a38:	dfc00115 	stw	ra,4(sp)
 2013a3c:	df000015 	stw	fp,0(sp)
 2013a40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2013a44:	008080f4 	movhi	r2,515
 2013a48:	10883304 	addi	r2,r2,8396
 2013a4c:	10800017 	ldw	r2,0(r2)
 2013a50:	10000526 	beq	r2,zero,2013a68 <alt_get_errno+0x34>
 2013a54:	008080f4 	movhi	r2,515
 2013a58:	10883304 	addi	r2,r2,8396
 2013a5c:	10800017 	ldw	r2,0(r2)
 2013a60:	103ee83a 	callr	r2
 2013a64:	00000206 	br	2013a70 <alt_get_errno+0x3c>
 2013a68:	008080f4 	movhi	r2,515
 2013a6c:	10883e04 	addi	r2,r2,8440
}
 2013a70:	e037883a 	mov	sp,fp
 2013a74:	dfc00117 	ldw	ra,4(sp)
 2013a78:	df000017 	ldw	fp,0(sp)
 2013a7c:	dec00204 	addi	sp,sp,8
 2013a80:	f800283a 	ret

02013a84 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2013a84:	defffa04 	addi	sp,sp,-24
 2013a88:	dfc00515 	stw	ra,20(sp)
 2013a8c:	df000415 	stw	fp,16(sp)
 2013a90:	df000404 	addi	fp,sp,16
 2013a94:	e13ffe15 	stw	r4,-8(fp)
 2013a98:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2013a9c:	e0bffe17 	ldw	r2,-8(fp)
 2013aa0:	10000326 	beq	r2,zero,2013ab0 <alt_dev_llist_insert+0x2c>
 2013aa4:	e0bffe17 	ldw	r2,-8(fp)
 2013aa8:	10800217 	ldw	r2,8(r2)
 2013aac:	1000051e 	bne	r2,zero,2013ac4 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 2013ab0:	2013a340 	call	2013a34 <alt_get_errno>
 2013ab4:	00c00584 	movi	r3,22
 2013ab8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 2013abc:	00bffa84 	movi	r2,-22
 2013ac0:	00001306 	br	2013b10 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2013ac4:	e0bffe17 	ldw	r2,-8(fp)
 2013ac8:	e0ffff17 	ldw	r3,-4(fp)
 2013acc:	e0fffc15 	stw	r3,-16(fp)
 2013ad0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2013ad4:	e0bffd17 	ldw	r2,-12(fp)
 2013ad8:	e0fffc17 	ldw	r3,-16(fp)
 2013adc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2013ae0:	e0bffc17 	ldw	r2,-16(fp)
 2013ae4:	10c00017 	ldw	r3,0(r2)
 2013ae8:	e0bffd17 	ldw	r2,-12(fp)
 2013aec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2013af0:	e0bffc17 	ldw	r2,-16(fp)
 2013af4:	10800017 	ldw	r2,0(r2)
 2013af8:	e0fffd17 	ldw	r3,-12(fp)
 2013afc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2013b00:	e0bffc17 	ldw	r2,-16(fp)
 2013b04:	e0fffd17 	ldw	r3,-12(fp)
 2013b08:	10c00015 	stw	r3,0(r2)

  return 0;  
 2013b0c:	0005883a 	mov	r2,zero
}
 2013b10:	e037883a 	mov	sp,fp
 2013b14:	dfc00117 	ldw	ra,4(sp)
 2013b18:	df000017 	ldw	fp,0(sp)
 2013b1c:	dec00204 	addi	sp,sp,8
 2013b20:	f800283a 	ret

02013b24 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2013b24:	defffd04 	addi	sp,sp,-12
 2013b28:	dfc00215 	stw	ra,8(sp)
 2013b2c:	df000115 	stw	fp,4(sp)
 2013b30:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2013b34:	00808074 	movhi	r2,513
 2013b38:	1091a104 	addi	r2,r2,18052
 2013b3c:	e0bfff15 	stw	r2,-4(fp)
 2013b40:	00000606 	br	2013b5c <_do_ctors+0x38>
        (*ctor) (); 
 2013b44:	e0bfff17 	ldw	r2,-4(fp)
 2013b48:	10800017 	ldw	r2,0(r2)
 2013b4c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2013b50:	e0bfff17 	ldw	r2,-4(fp)
 2013b54:	10bfff04 	addi	r2,r2,-4
 2013b58:	e0bfff15 	stw	r2,-4(fp)
 2013b5c:	e0ffff17 	ldw	r3,-4(fp)
 2013b60:	00808074 	movhi	r2,513
 2013b64:	1091a204 	addi	r2,r2,18056
 2013b68:	18bff62e 	bgeu	r3,r2,2013b44 <_do_ctors+0x20>
        (*ctor) (); 
}
 2013b6c:	e037883a 	mov	sp,fp
 2013b70:	dfc00117 	ldw	ra,4(sp)
 2013b74:	df000017 	ldw	fp,0(sp)
 2013b78:	dec00204 	addi	sp,sp,8
 2013b7c:	f800283a 	ret

02013b80 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2013b80:	defffd04 	addi	sp,sp,-12
 2013b84:	dfc00215 	stw	ra,8(sp)
 2013b88:	df000115 	stw	fp,4(sp)
 2013b8c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2013b90:	00808074 	movhi	r2,513
 2013b94:	1091a104 	addi	r2,r2,18052
 2013b98:	e0bfff15 	stw	r2,-4(fp)
 2013b9c:	00000606 	br	2013bb8 <_do_dtors+0x38>
        (*dtor) (); 
 2013ba0:	e0bfff17 	ldw	r2,-4(fp)
 2013ba4:	10800017 	ldw	r2,0(r2)
 2013ba8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2013bac:	e0bfff17 	ldw	r2,-4(fp)
 2013bb0:	10bfff04 	addi	r2,r2,-4
 2013bb4:	e0bfff15 	stw	r2,-4(fp)
 2013bb8:	e0ffff17 	ldw	r3,-4(fp)
 2013bbc:	00808074 	movhi	r2,513
 2013bc0:	1091a204 	addi	r2,r2,18056
 2013bc4:	18bff62e 	bgeu	r3,r2,2013ba0 <_do_dtors+0x20>
        (*dtor) (); 
}
 2013bc8:	e037883a 	mov	sp,fp
 2013bcc:	dfc00117 	ldw	ra,4(sp)
 2013bd0:	df000017 	ldw	fp,0(sp)
 2013bd4:	dec00204 	addi	sp,sp,8
 2013bd8:	f800283a 	ret

02013bdc <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 2013bdc:	defffc04 	addi	sp,sp,-16
 2013be0:	dfc00315 	stw	ra,12(sp)
 2013be4:	df000215 	stw	fp,8(sp)
 2013be8:	df000204 	addi	fp,sp,8
 2013bec:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 2013bf0:	e13fff17 	ldw	r4,-4(fp)
 2013bf4:	d1601204 	addi	r5,gp,-32696
 2013bf8:	201405c0 	call	201405c <alt_find_dev>
 2013bfc:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 2013c00:	e0bffe17 	ldw	r2,-8(fp)
 2013c04:	10000926 	beq	r2,zero,2013c2c <alt_flash_open_dev+0x50>
 2013c08:	e0bffe17 	ldw	r2,-8(fp)
 2013c0c:	10800317 	ldw	r2,12(r2)
 2013c10:	10000626 	beq	r2,zero,2013c2c <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 2013c14:	e0bffe17 	ldw	r2,-8(fp)
 2013c18:	10800317 	ldw	r2,12(r2)
 2013c1c:	e13ffe17 	ldw	r4,-8(fp)
 2013c20:	e17fff17 	ldw	r5,-4(fp)
 2013c24:	103ee83a 	callr	r2
 2013c28:	00000106 	br	2013c30 <alt_flash_open_dev+0x54>
  }

  return dev;
 2013c2c:	e0bffe17 	ldw	r2,-8(fp)
}
 2013c30:	e037883a 	mov	sp,fp
 2013c34:	dfc00117 	ldw	ra,4(sp)
 2013c38:	df000017 	ldw	fp,0(sp)
 2013c3c:	dec00204 	addi	sp,sp,8
 2013c40:	f800283a 	ret

02013c44 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 2013c44:	defffd04 	addi	sp,sp,-12
 2013c48:	dfc00215 	stw	ra,8(sp)
 2013c4c:	df000115 	stw	fp,4(sp)
 2013c50:	df000104 	addi	fp,sp,4
 2013c54:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 2013c58:	e0bfff17 	ldw	r2,-4(fp)
 2013c5c:	10000726 	beq	r2,zero,2013c7c <alt_flash_close_dev+0x38>
 2013c60:	e0bfff17 	ldw	r2,-4(fp)
 2013c64:	10800417 	ldw	r2,16(r2)
 2013c68:	10000426 	beq	r2,zero,2013c7c <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
 2013c6c:	e0bfff17 	ldw	r2,-4(fp)
 2013c70:	10800417 	ldw	r2,16(r2)
 2013c74:	e13fff17 	ldw	r4,-4(fp)
 2013c78:	103ee83a 	callr	r2
  }
  return;
 2013c7c:	0001883a 	nop
}
 2013c80:	e037883a 	mov	sp,fp
 2013c84:	dfc00117 	ldw	ra,4(sp)
 2013c88:	df000017 	ldw	fp,0(sp)
 2013c8c:	dec00204 	addi	sp,sp,8
 2013c90:	f800283a 	ret

02013c94 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2013c94:	defff904 	addi	sp,sp,-28
 2013c98:	dfc00615 	stw	ra,24(sp)
 2013c9c:	df000515 	stw	fp,20(sp)
 2013ca0:	df000504 	addi	fp,sp,20
 2013ca4:	e13ffc15 	stw	r4,-16(fp)
 2013ca8:	e17ffd15 	stw	r5,-12(fp)
 2013cac:	e1bffe15 	stw	r6,-8(fp)
 2013cb0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2013cb4:	e13ffd17 	ldw	r4,-12(fp)
 2013cb8:	e17ffe17 	ldw	r5,-8(fp)
 2013cbc:	e1bfff17 	ldw	r6,-4(fp)
 2013cc0:	2013ee80 	call	2013ee8 <open>
 2013cc4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 2013cc8:	e0bffb17 	ldw	r2,-20(fp)
 2013ccc:	10001c16 	blt	r2,zero,2013d40 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 2013cd0:	00c080f4 	movhi	r3,515
 2013cd4:	18c37c04 	addi	r3,r3,3568
 2013cd8:	e0bffb17 	ldw	r2,-20(fp)
 2013cdc:	10800324 	muli	r2,r2,12
 2013ce0:	1885883a 	add	r2,r3,r2
 2013ce4:	10c00017 	ldw	r3,0(r2)
 2013ce8:	e0bffc17 	ldw	r2,-16(fp)
 2013cec:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 2013cf0:	00c080f4 	movhi	r3,515
 2013cf4:	18c37c04 	addi	r3,r3,3568
 2013cf8:	e0bffb17 	ldw	r2,-20(fp)
 2013cfc:	10800324 	muli	r2,r2,12
 2013d00:	1885883a 	add	r2,r3,r2
 2013d04:	10800104 	addi	r2,r2,4
 2013d08:	10c00017 	ldw	r3,0(r2)
 2013d0c:	e0bffc17 	ldw	r2,-16(fp)
 2013d10:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2013d14:	00c080f4 	movhi	r3,515
 2013d18:	18c37c04 	addi	r3,r3,3568
 2013d1c:	e0bffb17 	ldw	r2,-20(fp)
 2013d20:	10800324 	muli	r2,r2,12
 2013d24:	1885883a 	add	r2,r3,r2
 2013d28:	10800204 	addi	r2,r2,8
 2013d2c:	10c00017 	ldw	r3,0(r2)
 2013d30:	e0bffc17 	ldw	r2,-16(fp)
 2013d34:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2013d38:	e13ffb17 	ldw	r4,-20(fp)
 2013d3c:	20116d40 	call	20116d4 <alt_release_fd>
  }
} 
 2013d40:	e037883a 	mov	sp,fp
 2013d44:	dfc00117 	ldw	ra,4(sp)
 2013d48:	df000017 	ldw	fp,0(sp)
 2013d4c:	dec00204 	addi	sp,sp,8
 2013d50:	f800283a 	ret

02013d54 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2013d54:	defffb04 	addi	sp,sp,-20
 2013d58:	dfc00415 	stw	ra,16(sp)
 2013d5c:	df000315 	stw	fp,12(sp)
 2013d60:	df000304 	addi	fp,sp,12
 2013d64:	e13ffd15 	stw	r4,-12(fp)
 2013d68:	e17ffe15 	stw	r5,-8(fp)
 2013d6c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2013d70:	010080f4 	movhi	r4,515
 2013d74:	21037f04 	addi	r4,r4,3580
 2013d78:	e17ffd17 	ldw	r5,-12(fp)
 2013d7c:	01800044 	movi	r6,1
 2013d80:	01c07fc4 	movi	r7,511
 2013d84:	2013c940 	call	2013c94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2013d88:	010080f4 	movhi	r4,515
 2013d8c:	21037c04 	addi	r4,r4,3568
 2013d90:	e17ffe17 	ldw	r5,-8(fp)
 2013d94:	000d883a 	mov	r6,zero
 2013d98:	01c07fc4 	movi	r7,511
 2013d9c:	2013c940 	call	2013c94 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2013da0:	010080f4 	movhi	r4,515
 2013da4:	21038204 	addi	r4,r4,3592
 2013da8:	e17fff17 	ldw	r5,-4(fp)
 2013dac:	01800044 	movi	r6,1
 2013db0:	01c07fc4 	movi	r7,511
 2013db4:	2013c940 	call	2013c94 <alt_open_fd>
}  
 2013db8:	e037883a 	mov	sp,fp
 2013dbc:	dfc00117 	ldw	ra,4(sp)
 2013dc0:	df000017 	ldw	fp,0(sp)
 2013dc4:	dec00204 	addi	sp,sp,8
 2013dc8:	f800283a 	ret

02013dcc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2013dcc:	defffe04 	addi	sp,sp,-8
 2013dd0:	dfc00115 	stw	ra,4(sp)
 2013dd4:	df000015 	stw	fp,0(sp)
 2013dd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2013ddc:	008080f4 	movhi	r2,515
 2013de0:	10883304 	addi	r2,r2,8396
 2013de4:	10800017 	ldw	r2,0(r2)
 2013de8:	10000526 	beq	r2,zero,2013e00 <alt_get_errno+0x34>
 2013dec:	008080f4 	movhi	r2,515
 2013df0:	10883304 	addi	r2,r2,8396
 2013df4:	10800017 	ldw	r2,0(r2)
 2013df8:	103ee83a 	callr	r2
 2013dfc:	00000206 	br	2013e08 <alt_get_errno+0x3c>
 2013e00:	008080f4 	movhi	r2,515
 2013e04:	10883e04 	addi	r2,r2,8440
}
 2013e08:	e037883a 	mov	sp,fp
 2013e0c:	dfc00117 	ldw	ra,4(sp)
 2013e10:	df000017 	ldw	fp,0(sp)
 2013e14:	dec00204 	addi	sp,sp,8
 2013e18:	f800283a 	ret

02013e1c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 2013e1c:	defffd04 	addi	sp,sp,-12
 2013e20:	df000215 	stw	fp,8(sp)
 2013e24:	df000204 	addi	fp,sp,8
 2013e28:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 2013e2c:	e0bfff17 	ldw	r2,-4(fp)
 2013e30:	10800217 	ldw	r2,8(r2)
 2013e34:	10d00034 	orhi	r3,r2,16384
 2013e38:	e0bfff17 	ldw	r2,-4(fp)
 2013e3c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2013e40:	e03ffe15 	stw	zero,-8(fp)
 2013e44:	00001d06 	br	2013ebc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2013e48:	00c080f4 	movhi	r3,515
 2013e4c:	18c37c04 	addi	r3,r3,3568
 2013e50:	e0bffe17 	ldw	r2,-8(fp)
 2013e54:	10800324 	muli	r2,r2,12
 2013e58:	1885883a 	add	r2,r3,r2
 2013e5c:	10c00017 	ldw	r3,0(r2)
 2013e60:	e0bfff17 	ldw	r2,-4(fp)
 2013e64:	10800017 	ldw	r2,0(r2)
 2013e68:	1880111e 	bne	r3,r2,2013eb0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2013e6c:	00c080f4 	movhi	r3,515
 2013e70:	18c37c04 	addi	r3,r3,3568
 2013e74:	e0bffe17 	ldw	r2,-8(fp)
 2013e78:	10800324 	muli	r2,r2,12
 2013e7c:	1885883a 	add	r2,r3,r2
 2013e80:	10800204 	addi	r2,r2,8
 2013e84:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2013e88:	1000090e 	bge	r2,zero,2013eb0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 2013e8c:	e0bffe17 	ldw	r2,-8(fp)
 2013e90:	10c00324 	muli	r3,r2,12
 2013e94:	008080f4 	movhi	r2,515
 2013e98:	10837c04 	addi	r2,r2,3568
 2013e9c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2013ea0:	e0bfff17 	ldw	r2,-4(fp)
 2013ea4:	18800226 	beq	r3,r2,2013eb0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2013ea8:	00bffcc4 	movi	r2,-13
 2013eac:	00000a06 	br	2013ed8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2013eb0:	e0bffe17 	ldw	r2,-8(fp)
 2013eb4:	10800044 	addi	r2,r2,1
 2013eb8:	e0bffe15 	stw	r2,-8(fp)
 2013ebc:	008080f4 	movhi	r2,515
 2013ec0:	10883204 	addi	r2,r2,8392
 2013ec4:	10800017 	ldw	r2,0(r2)
 2013ec8:	1007883a 	mov	r3,r2
 2013ecc:	e0bffe17 	ldw	r2,-8(fp)
 2013ed0:	18bfdd2e 	bgeu	r3,r2,2013e48 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 2013ed4:	0005883a 	mov	r2,zero
}
 2013ed8:	e037883a 	mov	sp,fp
 2013edc:	df000017 	ldw	fp,0(sp)
 2013ee0:	dec00104 	addi	sp,sp,4
 2013ee4:	f800283a 	ret

02013ee8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 2013ee8:	defff604 	addi	sp,sp,-40
 2013eec:	dfc00915 	stw	ra,36(sp)
 2013ef0:	df000815 	stw	fp,32(sp)
 2013ef4:	df000804 	addi	fp,sp,32
 2013ef8:	e13ffd15 	stw	r4,-12(fp)
 2013efc:	e17ffe15 	stw	r5,-8(fp)
 2013f00:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 2013f04:	00bfffc4 	movi	r2,-1
 2013f08:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 2013f0c:	00bffb44 	movi	r2,-19
 2013f10:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 2013f14:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2013f18:	e13ffd17 	ldw	r4,-12(fp)
 2013f1c:	014080f4 	movhi	r5,515
 2013f20:	29483004 	addi	r5,r5,8384
 2013f24:	201405c0 	call	201405c <alt_find_dev>
 2013f28:	e0bff815 	stw	r2,-32(fp)
 2013f2c:	e0bff817 	ldw	r2,-32(fp)
 2013f30:	1000051e 	bne	r2,zero,2013f48 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2013f34:	e13ffd17 	ldw	r4,-12(fp)
 2013f38:	20140ec0 	call	20140ec <alt_find_file>
 2013f3c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2013f40:	00800044 	movi	r2,1
 2013f44:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2013f48:	e0bff817 	ldw	r2,-32(fp)
 2013f4c:	10002926 	beq	r2,zero,2013ff4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2013f50:	e13ff817 	ldw	r4,-32(fp)
 2013f54:	20142000 	call	2014200 <alt_get_fd>
 2013f58:	e0bff915 	stw	r2,-28(fp)
 2013f5c:	e0bff917 	ldw	r2,-28(fp)
 2013f60:	1000030e 	bge	r2,zero,2013f70 <open+0x88>
    {
      status = index;
 2013f64:	e0bff917 	ldw	r2,-28(fp)
 2013f68:	e0bffa15 	stw	r2,-24(fp)
 2013f6c:	00002306 	br	2013ffc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 2013f70:	e0bff917 	ldw	r2,-28(fp)
 2013f74:	10c00324 	muli	r3,r2,12
 2013f78:	008080f4 	movhi	r2,515
 2013f7c:	10837c04 	addi	r2,r2,3568
 2013f80:	1885883a 	add	r2,r3,r2
 2013f84:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2013f88:	e0fffe17 	ldw	r3,-8(fp)
 2013f8c:	00900034 	movhi	r2,16384
 2013f90:	10bfffc4 	addi	r2,r2,-1
 2013f94:	1886703a 	and	r3,r3,r2
 2013f98:	e0bffc17 	ldw	r2,-16(fp)
 2013f9c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2013fa0:	e0bffb17 	ldw	r2,-20(fp)
 2013fa4:	1000051e 	bne	r2,zero,2013fbc <open+0xd4>
 2013fa8:	e13ffc17 	ldw	r4,-16(fp)
 2013fac:	2013e1c0 	call	2013e1c <alt_file_locked>
 2013fb0:	e0bffa15 	stw	r2,-24(fp)
 2013fb4:	e0bffa17 	ldw	r2,-24(fp)
 2013fb8:	10001016 	blt	r2,zero,2013ffc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 2013fbc:	e0bff817 	ldw	r2,-32(fp)
 2013fc0:	10800317 	ldw	r2,12(r2)
 2013fc4:	10000826 	beq	r2,zero,2013fe8 <open+0x100>
 2013fc8:	e0bff817 	ldw	r2,-32(fp)
 2013fcc:	10800317 	ldw	r2,12(r2)
 2013fd0:	e13ffc17 	ldw	r4,-16(fp)
 2013fd4:	e17ffd17 	ldw	r5,-12(fp)
 2013fd8:	e1bffe17 	ldw	r6,-8(fp)
 2013fdc:	e1ffff17 	ldw	r7,-4(fp)
 2013fe0:	103ee83a 	callr	r2
 2013fe4:	00000106 	br	2013fec <open+0x104>
 2013fe8:	0005883a 	mov	r2,zero
 2013fec:	e0bffa15 	stw	r2,-24(fp)
 2013ff0:	00000206 	br	2013ffc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 2013ff4:	00bffb44 	movi	r2,-19
 2013ff8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2013ffc:	e0bffa17 	ldw	r2,-24(fp)
 2014000:	1000080e 	bge	r2,zero,2014024 <open+0x13c>
  {
    alt_release_fd (index);  
 2014004:	e13ff917 	ldw	r4,-28(fp)
 2014008:	20116d40 	call	20116d4 <alt_release_fd>
    ALT_ERRNO = -status;
 201400c:	2013dcc0 	call	2013dcc <alt_get_errno>
 2014010:	e0fffa17 	ldw	r3,-24(fp)
 2014014:	00c7c83a 	sub	r3,zero,r3
 2014018:	10c00015 	stw	r3,0(r2)
    return -1;
 201401c:	00bfffc4 	movi	r2,-1
 2014020:	00000106 	br	2014028 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 2014024:	e0bff917 	ldw	r2,-28(fp)
}
 2014028:	e037883a 	mov	sp,fp
 201402c:	dfc00117 	ldw	ra,4(sp)
 2014030:	df000017 	ldw	fp,0(sp)
 2014034:	dec00204 	addi	sp,sp,8
 2014038:	f800283a 	ret

0201403c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 201403c:	deffff04 	addi	sp,sp,-4
 2014040:	df000015 	stw	fp,0(sp)
 2014044:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 2014048:	000170fa 	wrctl	ienable,zero
}
 201404c:	e037883a 	mov	sp,fp
 2014050:	df000017 	ldw	fp,0(sp)
 2014054:	dec00104 	addi	sp,sp,4
 2014058:	f800283a 	ret

0201405c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 201405c:	defffa04 	addi	sp,sp,-24
 2014060:	dfc00515 	stw	ra,20(sp)
 2014064:	df000415 	stw	fp,16(sp)
 2014068:	df000404 	addi	fp,sp,16
 201406c:	e13ffe15 	stw	r4,-8(fp)
 2014070:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2014074:	e0bfff17 	ldw	r2,-4(fp)
 2014078:	10800017 	ldw	r2,0(r2)
 201407c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2014080:	e13ffe17 	ldw	r4,-8(fp)
 2014084:	20095100 	call	2009510 <strlen>
 2014088:	10800044 	addi	r2,r2,1
 201408c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2014090:	00000d06 	br	20140c8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2014094:	e0bffc17 	ldw	r2,-16(fp)
 2014098:	10c00217 	ldw	r3,8(r2)
 201409c:	e0bffd17 	ldw	r2,-12(fp)
 20140a0:	1809883a 	mov	r4,r3
 20140a4:	e17ffe17 	ldw	r5,-8(fp)
 20140a8:	100d883a 	mov	r6,r2
 20140ac:	20143000 	call	2014300 <memcmp>
 20140b0:	1000021e 	bne	r2,zero,20140bc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 20140b4:	e0bffc17 	ldw	r2,-16(fp)
 20140b8:	00000706 	br	20140d8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 20140bc:	e0bffc17 	ldw	r2,-16(fp)
 20140c0:	10800017 	ldw	r2,0(r2)
 20140c4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 20140c8:	e0fffc17 	ldw	r3,-16(fp)
 20140cc:	e0bfff17 	ldw	r2,-4(fp)
 20140d0:	18bff01e 	bne	r3,r2,2014094 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 20140d4:	0005883a 	mov	r2,zero
}
 20140d8:	e037883a 	mov	sp,fp
 20140dc:	dfc00117 	ldw	ra,4(sp)
 20140e0:	df000017 	ldw	fp,0(sp)
 20140e4:	dec00204 	addi	sp,sp,8
 20140e8:	f800283a 	ret

020140ec <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 20140ec:	defffb04 	addi	sp,sp,-20
 20140f0:	dfc00415 	stw	ra,16(sp)
 20140f4:	df000315 	stw	fp,12(sp)
 20140f8:	df000304 	addi	fp,sp,12
 20140fc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 2014100:	008080f4 	movhi	r2,515
 2014104:	10882e04 	addi	r2,r2,8376
 2014108:	10800017 	ldw	r2,0(r2)
 201410c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2014110:	00003106 	br	20141d8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 2014114:	e0bffd17 	ldw	r2,-12(fp)
 2014118:	10800217 	ldw	r2,8(r2)
 201411c:	1009883a 	mov	r4,r2
 2014120:	20095100 	call	2009510 <strlen>
 2014124:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 2014128:	e0bffd17 	ldw	r2,-12(fp)
 201412c:	10c00217 	ldw	r3,8(r2)
 2014130:	e0bffe17 	ldw	r2,-8(fp)
 2014134:	10bfffc4 	addi	r2,r2,-1
 2014138:	1885883a 	add	r2,r3,r2
 201413c:	10800003 	ldbu	r2,0(r2)
 2014140:	10803fcc 	andi	r2,r2,255
 2014144:	1080201c 	xori	r2,r2,128
 2014148:	10bfe004 	addi	r2,r2,-128
 201414c:	10800bd8 	cmpnei	r2,r2,47
 2014150:	1000031e 	bne	r2,zero,2014160 <alt_find_file+0x74>
    {
      len -= 1;
 2014154:	e0bffe17 	ldw	r2,-8(fp)
 2014158:	10bfffc4 	addi	r2,r2,-1
 201415c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2014160:	e0bffe17 	ldw	r2,-8(fp)
 2014164:	e0ffff17 	ldw	r3,-4(fp)
 2014168:	1885883a 	add	r2,r3,r2
 201416c:	10800003 	ldbu	r2,0(r2)
 2014170:	10803fcc 	andi	r2,r2,255
 2014174:	1080201c 	xori	r2,r2,128
 2014178:	10bfe004 	addi	r2,r2,-128
 201417c:	10800be0 	cmpeqi	r2,r2,47
 2014180:	1000081e 	bne	r2,zero,20141a4 <alt_find_file+0xb8>
 2014184:	e0bffe17 	ldw	r2,-8(fp)
 2014188:	e0ffff17 	ldw	r3,-4(fp)
 201418c:	1885883a 	add	r2,r3,r2
 2014190:	10800003 	ldbu	r2,0(r2)
 2014194:	10803fcc 	andi	r2,r2,255
 2014198:	1080201c 	xori	r2,r2,128
 201419c:	10bfe004 	addi	r2,r2,-128
 20141a0:	10000a1e 	bne	r2,zero,20141cc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 20141a4:	e0bffd17 	ldw	r2,-12(fp)
 20141a8:	10c00217 	ldw	r3,8(r2)
 20141ac:	e0bffe17 	ldw	r2,-8(fp)
 20141b0:	1809883a 	mov	r4,r3
 20141b4:	e17fff17 	ldw	r5,-4(fp)
 20141b8:	100d883a 	mov	r6,r2
 20141bc:	20143000 	call	2014300 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20141c0:	1000021e 	bne	r2,zero,20141cc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 20141c4:	e0bffd17 	ldw	r2,-12(fp)
 20141c8:	00000806 	br	20141ec <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 20141cc:	e0bffd17 	ldw	r2,-12(fp)
 20141d0:	10800017 	ldw	r2,0(r2)
 20141d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20141d8:	e0fffd17 	ldw	r3,-12(fp)
 20141dc:	008080f4 	movhi	r2,515
 20141e0:	10882e04 	addi	r2,r2,8376
 20141e4:	18bfcb1e 	bne	r3,r2,2014114 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 20141e8:	0005883a 	mov	r2,zero
}
 20141ec:	e037883a 	mov	sp,fp
 20141f0:	dfc00117 	ldw	ra,4(sp)
 20141f4:	df000017 	ldw	fp,0(sp)
 20141f8:	dec00204 	addi	sp,sp,8
 20141fc:	f800283a 	ret

02014200 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2014200:	defffc04 	addi	sp,sp,-16
 2014204:	df000315 	stw	fp,12(sp)
 2014208:	df000304 	addi	fp,sp,12
 201420c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2014210:	00bffa04 	movi	r2,-24
 2014214:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2014218:	e03ffd15 	stw	zero,-12(fp)
 201421c:	00001d06 	br	2014294 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 2014220:	00c080f4 	movhi	r3,515
 2014224:	18c37c04 	addi	r3,r3,3568
 2014228:	e0bffd17 	ldw	r2,-12(fp)
 201422c:	10800324 	muli	r2,r2,12
 2014230:	1885883a 	add	r2,r3,r2
 2014234:	10800017 	ldw	r2,0(r2)
 2014238:	1000131e 	bne	r2,zero,2014288 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 201423c:	00c080f4 	movhi	r3,515
 2014240:	18c37c04 	addi	r3,r3,3568
 2014244:	e0bffd17 	ldw	r2,-12(fp)
 2014248:	10800324 	muli	r2,r2,12
 201424c:	1885883a 	add	r2,r3,r2
 2014250:	e0ffff17 	ldw	r3,-4(fp)
 2014254:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 2014258:	008080f4 	movhi	r2,515
 201425c:	10883204 	addi	r2,r2,8392
 2014260:	10c00017 	ldw	r3,0(r2)
 2014264:	e0bffd17 	ldw	r2,-12(fp)
 2014268:	1880040e 	bge	r3,r2,201427c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 201426c:	008080f4 	movhi	r2,515
 2014270:	10883204 	addi	r2,r2,8392
 2014274:	e0fffd17 	ldw	r3,-12(fp)
 2014278:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 201427c:	e0bffd17 	ldw	r2,-12(fp)
 2014280:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 2014284:	00000606 	br	20142a0 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2014288:	e0bffd17 	ldw	r2,-12(fp)
 201428c:	10800044 	addi	r2,r2,1
 2014290:	e0bffd15 	stw	r2,-12(fp)
 2014294:	e0bffd17 	ldw	r2,-12(fp)
 2014298:	10800810 	cmplti	r2,r2,32
 201429c:	103fe01e 	bne	r2,zero,2014220 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 20142a0:	e0bffe17 	ldw	r2,-8(fp)
}
 20142a4:	e037883a 	mov	sp,fp
 20142a8:	df000017 	ldw	fp,0(sp)
 20142ac:	dec00104 	addi	sp,sp,4
 20142b0:	f800283a 	ret

020142b4 <atexit>:
 20142b4:	200b883a 	mov	r5,r4
 20142b8:	000d883a 	mov	r6,zero
 20142bc:	0009883a 	mov	r4,zero
 20142c0:	000f883a 	mov	r7,zero
 20142c4:	201437c1 	jmpi	201437c <__register_exitproc>

020142c8 <exit>:
 20142c8:	defffe04 	addi	sp,sp,-8
 20142cc:	000b883a 	mov	r5,zero
 20142d0:	dc000015 	stw	r16,0(sp)
 20142d4:	dfc00115 	stw	ra,4(sp)
 20142d8:	2021883a 	mov	r16,r4
 20142dc:	20144ac0 	call	20144ac <__call_exitprocs>
 20142e0:	008080f4 	movhi	r2,515
 20142e4:	10882904 	addi	r2,r2,8356
 20142e8:	11000017 	ldw	r4,0(r2)
 20142ec:	20800f17 	ldw	r2,60(r4)
 20142f0:	10000126 	beq	r2,zero,20142f8 <exit+0x30>
 20142f4:	103ee83a 	callr	r2
 20142f8:	8009883a 	mov	r4,r16
 20142fc:	201464c0 	call	201464c <_exit>

02014300 <memcmp>:
 2014300:	01c000c4 	movi	r7,3
 2014304:	3980192e 	bgeu	r7,r6,201436c <memcmp+0x6c>
 2014308:	2904b03a 	or	r2,r5,r4
 201430c:	11c4703a 	and	r2,r2,r7
 2014310:	10000f26 	beq	r2,zero,2014350 <memcmp+0x50>
 2014314:	20c00003 	ldbu	r3,0(r4)
 2014318:	28800003 	ldbu	r2,0(r5)
 201431c:	1880151e 	bne	r3,r2,2014374 <memcmp+0x74>
 2014320:	31bfff84 	addi	r6,r6,-2
 2014324:	01ffffc4 	movi	r7,-1
 2014328:	00000406 	br	201433c <memcmp+0x3c>
 201432c:	20c00003 	ldbu	r3,0(r4)
 2014330:	28800003 	ldbu	r2,0(r5)
 2014334:	31bfffc4 	addi	r6,r6,-1
 2014338:	18800e1e 	bne	r3,r2,2014374 <memcmp+0x74>
 201433c:	21000044 	addi	r4,r4,1
 2014340:	29400044 	addi	r5,r5,1
 2014344:	31fff91e 	bne	r6,r7,201432c <memcmp+0x2c>
 2014348:	0005883a 	mov	r2,zero
 201434c:	f800283a 	ret
 2014350:	20c00017 	ldw	r3,0(r4)
 2014354:	28800017 	ldw	r2,0(r5)
 2014358:	1880041e 	bne	r3,r2,201436c <memcmp+0x6c>
 201435c:	31bfff04 	addi	r6,r6,-4
 2014360:	21000104 	addi	r4,r4,4
 2014364:	29400104 	addi	r5,r5,4
 2014368:	39bff936 	bltu	r7,r6,2014350 <memcmp+0x50>
 201436c:	303fe91e 	bne	r6,zero,2014314 <memcmp+0x14>
 2014370:	003ff506 	br	2014348 <memcmp+0x48>
 2014374:	1885c83a 	sub	r2,r3,r2
 2014378:	f800283a 	ret

0201437c <__register_exitproc>:
 201437c:	defffa04 	addi	sp,sp,-24
 2014380:	008080f4 	movhi	r2,515
 2014384:	10882904 	addi	r2,r2,8356
 2014388:	dc000315 	stw	r16,12(sp)
 201438c:	14000017 	ldw	r16,0(r2)
 2014390:	dc400415 	stw	r17,16(sp)
 2014394:	dfc00515 	stw	ra,20(sp)
 2014398:	80805217 	ldw	r2,328(r16)
 201439c:	2023883a 	mov	r17,r4
 20143a0:	10003e26 	beq	r2,zero,201449c <__register_exitproc+0x120>
 20143a4:	10c00117 	ldw	r3,4(r2)
 20143a8:	020007c4 	movi	r8,31
 20143ac:	40c0180e 	bge	r8,r3,2014410 <__register_exitproc+0x94>
 20143b0:	00808074 	movhi	r2,513
 20143b4:	10a23504 	addi	r2,r2,-30508
 20143b8:	1000061e 	bne	r2,zero,20143d4 <__register_exitproc+0x58>
 20143bc:	00bfffc4 	movi	r2,-1
 20143c0:	dfc00517 	ldw	ra,20(sp)
 20143c4:	dc400417 	ldw	r17,16(sp)
 20143c8:	dc000317 	ldw	r16,12(sp)
 20143cc:	dec00604 	addi	sp,sp,24
 20143d0:	f800283a 	ret
 20143d4:	01006404 	movi	r4,400
 20143d8:	d9400015 	stw	r5,0(sp)
 20143dc:	d9800115 	stw	r6,4(sp)
 20143e0:	d9c00215 	stw	r7,8(sp)
 20143e4:	20088d40 	call	20088d4 <malloc>
 20143e8:	d9400017 	ldw	r5,0(sp)
 20143ec:	d9800117 	ldw	r6,4(sp)
 20143f0:	d9c00217 	ldw	r7,8(sp)
 20143f4:	103ff126 	beq	r2,zero,20143bc <__register_exitproc+0x40>
 20143f8:	80c05217 	ldw	r3,328(r16)
 20143fc:	10000115 	stw	zero,4(r2)
 2014400:	10c00015 	stw	r3,0(r2)
 2014404:	80805215 	stw	r2,328(r16)
 2014408:	10006215 	stw	zero,392(r2)
 201440c:	10006315 	stw	zero,396(r2)
 2014410:	10c00117 	ldw	r3,4(r2)
 2014414:	88000d1e 	bne	r17,zero,201444c <__register_exitproc+0xd0>
 2014418:	19000084 	addi	r4,r3,2
 201441c:	2109883a 	add	r4,r4,r4
 2014420:	18c00044 	addi	r3,r3,1
 2014424:	2109883a 	add	r4,r4,r4
 2014428:	1109883a 	add	r4,r2,r4
 201442c:	10c00115 	stw	r3,4(r2)
 2014430:	0005883a 	mov	r2,zero
 2014434:	21400015 	stw	r5,0(r4)
 2014438:	dfc00517 	ldw	ra,20(sp)
 201443c:	dc400417 	ldw	r17,16(sp)
 2014440:	dc000317 	ldw	r16,12(sp)
 2014444:	dec00604 	addi	sp,sp,24
 2014448:	f800283a 	ret
 201444c:	02400044 	movi	r9,1
 2014450:	12806217 	ldw	r10,392(r2)
 2014454:	48d2983a 	sll	r9,r9,r3
 2014458:	19000804 	addi	r4,r3,32
 201445c:	18d1883a 	add	r8,r3,r3
 2014460:	2109883a 	add	r4,r4,r4
 2014464:	4211883a 	add	r8,r8,r8
 2014468:	2109883a 	add	r4,r4,r4
 201446c:	1109883a 	add	r4,r2,r4
 2014470:	1211883a 	add	r8,r2,r8
 2014474:	5254b03a 	or	r10,r10,r9
 2014478:	21c02215 	stw	r7,136(r4)
 201447c:	41802215 	stw	r6,136(r8)
 2014480:	12806215 	stw	r10,392(r2)
 2014484:	01000084 	movi	r4,2
 2014488:	893fe31e 	bne	r17,r4,2014418 <__register_exitproc+0x9c>
 201448c:	11006317 	ldw	r4,396(r2)
 2014490:	2252b03a 	or	r9,r4,r9
 2014494:	12406315 	stw	r9,396(r2)
 2014498:	003fdf06 	br	2014418 <__register_exitproc+0x9c>
 201449c:	008080f4 	movhi	r2,515
 20144a0:	10889204 	addi	r2,r2,8776
 20144a4:	80805215 	stw	r2,328(r16)
 20144a8:	003fbe06 	br	20143a4 <__register_exitproc+0x28>

020144ac <__call_exitprocs>:
 20144ac:	008080f4 	movhi	r2,515
 20144b0:	10882904 	addi	r2,r2,8356
 20144b4:	10800017 	ldw	r2,0(r2)
 20144b8:	defff304 	addi	sp,sp,-52
 20144bc:	df000b15 	stw	fp,44(sp)
 20144c0:	d8800015 	stw	r2,0(sp)
 20144c4:	10805204 	addi	r2,r2,328
 20144c8:	dd400815 	stw	r21,32(sp)
 20144cc:	dfc00c15 	stw	ra,48(sp)
 20144d0:	ddc00a15 	stw	r23,40(sp)
 20144d4:	dd800915 	stw	r22,36(sp)
 20144d8:	dd000715 	stw	r20,28(sp)
 20144dc:	dcc00615 	stw	r19,24(sp)
 20144e0:	dc800515 	stw	r18,20(sp)
 20144e4:	dc400415 	stw	r17,16(sp)
 20144e8:	dc000315 	stw	r16,12(sp)
 20144ec:	d9000115 	stw	r4,4(sp)
 20144f0:	2839883a 	mov	fp,r5
 20144f4:	d8800215 	stw	r2,8(sp)
 20144f8:	057fffc4 	movi	r21,-1
 20144fc:	d8800017 	ldw	r2,0(sp)
 2014500:	ddc00217 	ldw	r23,8(sp)
 2014504:	14805217 	ldw	r18,328(r2)
 2014508:	90001726 	beq	r18,zero,2014568 <__call_exitprocs+0xbc>
 201450c:	94400117 	ldw	r17,4(r18)
 2014510:	8c3fffc4 	addi	r16,r17,-1
 2014514:	80001116 	blt	r16,zero,201455c <__call_exitprocs+0xb0>
 2014518:	8c400044 	addi	r17,r17,1
 201451c:	8427883a 	add	r19,r16,r16
 2014520:	8c63883a 	add	r17,r17,r17
 2014524:	95802204 	addi	r22,r18,136
 2014528:	9ce7883a 	add	r19,r19,r19
 201452c:	8c63883a 	add	r17,r17,r17
 2014530:	b4e7883a 	add	r19,r22,r19
 2014534:	9463883a 	add	r17,r18,r17
 2014538:	e0001726 	beq	fp,zero,2014598 <__call_exitprocs+0xec>
 201453c:	8c87c83a 	sub	r3,r17,r18
 2014540:	b0c7883a 	add	r3,r22,r3
 2014544:	18c01e17 	ldw	r3,120(r3)
 2014548:	1f001326 	beq	r3,fp,2014598 <__call_exitprocs+0xec>
 201454c:	843fffc4 	addi	r16,r16,-1
 2014550:	9cffff04 	addi	r19,r19,-4
 2014554:	8c7fff04 	addi	r17,r17,-4
 2014558:	857ff71e 	bne	r16,r21,2014538 <__call_exitprocs+0x8c>
 201455c:	00808074 	movhi	r2,513
 2014560:	10a23a04 	addi	r2,r2,-30488
 2014564:	10002a1e 	bne	r2,zero,2014610 <__call_exitprocs+0x164>
 2014568:	dfc00c17 	ldw	ra,48(sp)
 201456c:	df000b17 	ldw	fp,44(sp)
 2014570:	ddc00a17 	ldw	r23,40(sp)
 2014574:	dd800917 	ldw	r22,36(sp)
 2014578:	dd400817 	ldw	r21,32(sp)
 201457c:	dd000717 	ldw	r20,28(sp)
 2014580:	dcc00617 	ldw	r19,24(sp)
 2014584:	dc800517 	ldw	r18,20(sp)
 2014588:	dc400417 	ldw	r17,16(sp)
 201458c:	dc000317 	ldw	r16,12(sp)
 2014590:	dec00d04 	addi	sp,sp,52
 2014594:	f800283a 	ret
 2014598:	91000117 	ldw	r4,4(r18)
 201459c:	88c00017 	ldw	r3,0(r17)
 20145a0:	213fffc4 	addi	r4,r4,-1
 20145a4:	24001526 	beq	r4,r16,20145fc <__call_exitprocs+0x150>
 20145a8:	88000015 	stw	zero,0(r17)
 20145ac:	183fe726 	beq	r3,zero,201454c <__call_exitprocs+0xa0>
 20145b0:	00800044 	movi	r2,1
 20145b4:	1408983a 	sll	r4,r2,r16
 20145b8:	91406217 	ldw	r5,392(r18)
 20145bc:	95000117 	ldw	r20,4(r18)
 20145c0:	214a703a 	and	r5,r4,r5
 20145c4:	28000b26 	beq	r5,zero,20145f4 <__call_exitprocs+0x148>
 20145c8:	91406317 	ldw	r5,396(r18)
 20145cc:	2148703a 	and	r4,r4,r5
 20145d0:	20000c1e 	bne	r4,zero,2014604 <__call_exitprocs+0x158>
 20145d4:	99400017 	ldw	r5,0(r19)
 20145d8:	d9000117 	ldw	r4,4(sp)
 20145dc:	183ee83a 	callr	r3
 20145e0:	90c00117 	ldw	r3,4(r18)
 20145e4:	1d3fc51e 	bne	r3,r20,20144fc <__call_exitprocs+0x50>
 20145e8:	b8c00017 	ldw	r3,0(r23)
 20145ec:	1cbfd726 	beq	r3,r18,201454c <__call_exitprocs+0xa0>
 20145f0:	003fc206 	br	20144fc <__call_exitprocs+0x50>
 20145f4:	183ee83a 	callr	r3
 20145f8:	003ff906 	br	20145e0 <__call_exitprocs+0x134>
 20145fc:	94000115 	stw	r16,4(r18)
 2014600:	003fea06 	br	20145ac <__call_exitprocs+0x100>
 2014604:	99000017 	ldw	r4,0(r19)
 2014608:	183ee83a 	callr	r3
 201460c:	003ff406 	br	20145e0 <__call_exitprocs+0x134>
 2014610:	90c00117 	ldw	r3,4(r18)
 2014614:	1800071e 	bne	r3,zero,2014634 <__call_exitprocs+0x188>
 2014618:	90c00017 	ldw	r3,0(r18)
 201461c:	18000926 	beq	r3,zero,2014644 <__call_exitprocs+0x198>
 2014620:	9009883a 	mov	r4,r18
 2014624:	b8c00015 	stw	r3,0(r23)
 2014628:	20088e80 	call	20088e8 <free>
 201462c:	bc800017 	ldw	r18,0(r23)
 2014630:	003fb506 	br	2014508 <__call_exitprocs+0x5c>
 2014634:	90c00017 	ldw	r3,0(r18)
 2014638:	902f883a 	mov	r23,r18
 201463c:	1825883a 	mov	r18,r3
 2014640:	003fb106 	br	2014508 <__call_exitprocs+0x5c>
 2014644:	0007883a 	mov	r3,zero
 2014648:	003ffb06 	br	2014638 <__call_exitprocs+0x18c>

0201464c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 201464c:	defffc04 	addi	sp,sp,-16
 2014650:	df000315 	stw	fp,12(sp)
 2014654:	df000304 	addi	fp,sp,12
 2014658:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 201465c:	0001883a 	nop
 2014660:	e0bfff17 	ldw	r2,-4(fp)
 2014664:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 2014668:	e0bffd17 	ldw	r2,-12(fp)
 201466c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2014670:	e0bffe17 	ldw	r2,-8(fp)
 2014674:	10000226 	beq	r2,zero,2014680 <_exit+0x34>
    ALT_SIM_FAIL();
 2014678:	002af070 	cmpltui	zero,zero,43969
 201467c:	00000106 	br	2014684 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 2014680:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2014684:	003fff06 	br	2014684 <_exit+0x38>
