
lab.elf:     file format elf32-littlenios2
lab.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100230

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x00010904 memsz 0x00010904 flags r-x
    LOAD off    0x00011924 vaddr 0x10110924 paddr 0x10112480 align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x00013fdc vaddr 0x10113fdc paddr 0x10113fdc align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010384  10100230  10100230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000370  101105b4  101105b4  000115b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  10110924  10112480  00011924  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  10113fdc  10113fdc  00013fdc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  1011413c  1011413c  00013480  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00013480  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ed8  00000000  00000000  000134a8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024108  00000000  00000000  00014380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000091b2  00000000  00000000  00038488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b7f3  00000000  00000000  0004163a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022bc  00000000  00000000  0004ce30  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003a24  00000000  00000000  0004f0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001786c  00000000  00000000  00052b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0006a37c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d0  00000000  00000000  0006a390  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006eeda  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006eedd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006eee9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006eeea  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006eeeb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006eef6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006ef01  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0006ef0c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  0006ef16  2**0
                  CONTENTS, READONLY
 26 .jdi          0000512a  00000000  00000000  0006ef4a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0027dc41  00000000  00000000  00074074  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100230 l    d  .text	00000000 .text
101105b4 l    d  .rodata	00000000 .rodata
10110924 l    d  .rwdata	00000000 .rwdata
10113fdc l    d  .bss	00000000 .bss
1011413c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab_bsp//obj/HAL/src/crt0.o
10100268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1011065e l     O .rodata	00000010 zeroes.4404
101032c4 l     F .text	000000bc __sbprintf
1011066e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
101034d4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1010502c l     F .text	00000008 __fp_unlock
10105040 l     F .text	0000019c __sinit.part.1
101051dc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10110924 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10110d68 l     O .rwdata	00000020 lc_ctype_charset
10110d48 l     O .rwdata	00000020 lc_message_charset
10110d88 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
101106a0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10108568 l     F .text	000000fc __sprint_r.part.0
101107c4 l     O .rodata	00000010 zeroes.4349
10109ba4 l     F .text	000000bc __sbprintf
101107d4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1010da10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1010db24 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1010db50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1010dc44 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1010dd2c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1010de18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1010dff4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10112428 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
1010e268 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1010e3a4 l     F .text	00000034 alt_dev_reg
10111370 l     O .rwdata	00001060 jtag_uart_0
101123d0 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1010e688 l     F .text	0000020c altera_avalon_jtag_uart_irq
1010e894 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
1011242c l     O .rwdata	00000009 hcinfo.2538
10112438 l     O .rwdata	0000000a hcinfo.2551
10112444 l     O .rwdata	00000009 hcinfo.2560
10112450 l     O .rwdata	0000000a hcinfo.2573
1011245c l     O .rwdata	0000000a hcinfo.2586
10112468 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
1010f49c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1010f97c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1010fadc l     F .text	0000003c alt_get_errno
1010fb18 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10114010 g     O .bss	00000004 alt_instruction_exception_handler
10107bac g     F .text	00000074 _mprec_log10
10107c98 g     F .text	0000008c __any_on
1010a158 g     F .text	00000054 _isatty_r
101106ac g     O .rodata	00000028 __mprec_tinytens
1010df30 g     F .text	0000007c alt_main
10100e60 g     F .text	000000c0 _puts_r
1011403c g     O .bss	00000100 alt_irq
1010a1ac g     F .text	00000060 _lseek_r
10112480 g       *ABS*	00000000 __flash_rwdata_start
1010c3e8 g     F .text	00000088 .hidden __eqdf2
1011413c g       *ABS*	00000000 __alt_heap_start
10100e24 g     F .text	0000003c printf
1010a3c4 g     F .text	0000009c _wcrtomb_r
10108428 g     F .text	0000005c __sseek
1010538c g     F .text	00000010 __sinit
1010a26c g     F .text	00000140 __swbuf_r
10105e60 g     F .text	0000007c _setlocale_r
101051e4 g     F .text	00000078 __sfmoreglue
1010dfd0 g     F .text	00000024 __malloc_unlock
1010eecc g     F .text	0000011c alt_hostfs_open
101069e8 g     F .text	0000015c memmove
10105374 g     F .text	00000018 _cleanup
10106c6c g     F .text	000000a8 _Balloc
1010c470 g     F .text	000000dc .hidden __gtdf2
1010ff04 g     F .text	00000024 altera_nios2_gen2_irq_init
10100000 g     F .entry	0000000c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
1010a0fc g     F .text	0000005c _fstat_r
10113ff4 g     O .bss	00000004 errno
101083a4 g     F .text	00000008 __seofread
10113ffc g     O .bss	00000004 alt_argv
1011a3f8 g       *ABS*	00000000 _gp
101111f0 g     O .rwdata	00000180 alt_fd_list
1010f104 g     F .text	00000068 alt_hostfs_seek
1010ff28 g     F .text	00000090 alt_find_dev
10100cac g     F .text	00000148 memcpy
10105034 g     F .text	0000000c _cleanup_r
1010d828 g     F .text	000000dc .hidden __floatsidf
1010f63c g     F .text	00000080 alt_fs_reg
1010fa60 g     F .text	0000007c alt_io_redirect
1010c54c g     F .text	000000f4 .hidden __ltdf2
101105b4 g       *ABS*	00000000 __DTOR_END__
10100f20 g     F .text	00000014 puts
10110184 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10108288 g     F .text	00000074 __fpclassifyd
10107b08 g     F .text	000000a4 __ratio
10109b88 g     F .text	0000001c __vfiprintf_internal
1010ea8c g     F .text	0000021c altera_avalon_jtag_uart_read
10100df4 g     F .text	00000030 _printf_r
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10100bc8 g     F .text	00000064 .hidden __udivsi3
1010dc80 g     F .text	000000ac isatty
101106fc g     O .rodata	000000c8 __mprec_tens
10105edc g     F .text	0000000c __locale_charset
10113ff0 g     O .bss	00000004 __malloc_top_pad
10112400 g     O .rwdata	00000004 __mb_cur_max
10105f0c g     F .text	0000000c _localeconv_r
101070a0 g     F .text	0000003c __i2b
10105810 g     F .text	000004c8 __sfvwrite_r
101082fc g     F .text	00000054 _sbrk_r
1010f02c g     F .text	0000006c alt_hostfs_read
1010a20c g     F .text	00000060 _read_r
10112420 g     O .rwdata	00000004 alt_max_fd
10109df0 g     F .text	000000f0 _fclose_r
10104ffc g     F .text	00000030 fflush
10113fec g     O .bss	00000004 __malloc_max_sbrked_mem
1010b16c g     F .text	000008ac .hidden __adddf3
101078b0 g     F .text	0000010c __b2d
1010aba8 g     F .text	000005c4 .hidden __umoddi3
1010de54 g     F .text	000000dc lseek
101123f8 g     O .rwdata	00000004 _global_impure_ptr
10107d24 g     F .text	00000564 _realloc_r
1011413c g       *ABS*	00000000 __bss_end
1010f88c g     F .text	000000f0 alt_iic_isr_register
1010fdfc g     F .text	00000108 alt_tick
1010a5ac g     F .text	000005fc .hidden __udivdi3
1010a058 g     F .text	00000024 _fputwc_r
101106d4 g     O .rodata	00000028 __mprec_bigtens
10106e84 g     F .text	00000104 __s2b
1010d904 g     F .text	000000a8 .hidden __floatunsidf
101075f0 g     F .text	00000060 __mcmp
101053ac g     F .text	00000018 __fp_lock_all
1010f840 g     F .text	0000004c alt_ic_irq_enabled
1010fd60 g     F .text	0000009c alt_alarm_stop
10114004 g     O .bss	00000004 alt_irq_active
1010efe8 g     F .text	00000044 alt_hostfs_close
101000fc g     F .exceptions	000000d4 alt_irq_handler
101111c8 g     O .rwdata	00000028 alt_dev_null
1010f47c g     F .text	00000020 alt_dcache_flush_all
10106f88 g     F .text	00000068 __hi0bits
1010d7a8 g     F .text	00000080 .hidden __fixdfsi
10112480 g       *ABS*	00000000 __ram_rwdata_end
10112418 g     O .rwdata	00000008 alt_dev_list
1010e2a4 g     F .text	00000100 write
10110924 g       *ABS*	00000000 __ram_rodata_end
1010db8c g     F .text	000000b8 fstat
1010c54c g     F .text	000000f4 .hidden __ledf2
101002f8 g     F .text	00000064 lcd_flag_set
10107368 g     F .text	00000140 __pow5mult
1010867c g     F .text	0000150c ___vfiprintf_internal_r
10113fe4 g     O .bss	00000004 __nlocale_changed
10100c2c g     F .text	00000058 .hidden __umodsi3
1011413c g       *ABS*	00000000 end
1010e5c8 g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
101105b4 g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
1010d9ac g     F .text	00000064 .hidden __clzsi2
1010eca8 g     F .text	00000224 altera_avalon_jtag_uart_write
1010539c g     F .text	00000004 __sfp_lock_acquire
10106904 g     F .text	000000e4 memchr
10100fcc g     F .text	000022dc ___vfprintf_internal_r
10105500 g     F .text	00000310 _free_r
10105ee8 g     F .text	00000010 __locale_mb_cur_max
10110400 g     F .text	00000180 __call_exitprocs
10113fe0 g     O .bss	00000004 __mlocale_changed
10112404 g     O .rwdata	00000004 __malloc_sbrk_base
10100230 g     F .text	0000003c _start
10114008 g     O .bss	00000004 _alt_tick_rate
101074a8 g     F .text	00000148 __lshift
1011400c g     O .bss	00000004 _alt_nticks
1010e030 g     F .text	00000104 read
1010e410 g     F .text	00000054 alt_sys_init
101102e8 g     F .text	00000118 __register_exitproc
101070dc g     F .text	0000028c __multiply
1010e934 g     F .text	00000068 altera_avalon_jtag_uart_close
10100c84 g     F .text	00000028 .hidden __mulsi3
10110924 g       *ABS*	00000000 __ram_rwdata_start
101105b4 g       *ABS*	00000000 __ram_rodata_start
10114014 g     O .bss	00000028 __malloc_current_mallinfo
101079bc g     F .text	0000014c __d2b
1010e464 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
101100c0 g     F .text	000000c4 alt_get_fd
10109cc0 g     F .text	00000054 _close_r
1011026c g     F .text	0000007c memcmp
1010e524 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
1011413c g       *ABS*	00000000 __alt_stack_base
1010e574 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10103380 g     F .text	00000154 __swsetup_r
1010ba18 g     F .text	000009d0 .hidden __divdf3
1010525c g     F .text	00000118 __sfp
10107c20 g     F .text	00000078 __copybits
10110dc0 g     O .rwdata	00000408 __malloc_av_
101053a8 g     F .text	00000004 __sinit_lock_release
1010c640 g     F .text	0000086c .hidden __muldf3
10108350 g     F .text	00000054 __sread
1010ffb8 g     F .text	00000108 alt_find_file
1010f4d8 g     F .text	000000a4 alt_dev_llist_insert
1010dfac g     F .text	00000024 __malloc_lock
1010e1b8 g     F .text	000000b0 sbrk
10104fa0 g     F .text	0000005c _fflush_r
10109d14 g     F .text	000000dc _calloc_r
101003ec g     F .text	000000c0 send_command
10113fdc g       *ABS*	00000000 __bss_start
10106b44 g     F .text	00000128 memset
10100a7c g     F .text	00000054 main
10114000 g     O .bss	00000004 alt_envp
10113fe8 g     O .bss	00000004 __malloc_max_total_mem
1010e4c4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1010a3ac g     F .text	00000018 __swbuf
10108484 g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
10109ee0 g     F .text	00000014 fclose
101036fc g     F .text	00001688 _dtoa_r
101060f8 g     F .text	0000080c _malloc_r
1010a520 g     F .text	00000030 __ascii_wctomb
10112424 g     O .rwdata	00000004 alt_errno
10105cd8 g     F .text	000000c4 _fwalk
10100ad0 g     F .text	00000084 .hidden __divsi3
101053dc g     F .text	00000124 _malloc_trim_r
101105b4 g       *ABS*	00000000 __CTOR_END__
1010848c g     F .text	000000dc strcmp
101105b4 g       *ABS*	00000000 __flash_rodata_start
101105b4 g       *ABS*	00000000 __DTOR_LIST__
1010026c g     F .text	00000048 delay
1010c3e8 g     F .text	00000088 .hidden __nedf2
1010e3d8 g     F .text	00000038 alt_irq_init
1010e134 g     F .text	00000084 alt_release_fd
101107e4 g     O .rodata	00000100 .hidden __clz_tab
10113fdc g     O .bss	00000004 _PathLocale
101004ac g     F .text	00000044 start_lcd
10110220 g     F .text	00000014 atexit
10109c60 g     F .text	00000060 _write_r
10105f18 g     F .text	00000018 setlocale
10100990 g     F .text	000000ec init_image
101123fc g     O .rwdata	00000004 _impure_ptr
10113ff8 g     O .bss	00000004 alt_argc
10104d84 g     F .text	0000021c __sflush_r
1010f5dc g     F .text	00000060 _do_dtors
10105f04 g     F .text	00000008 __locale_cjk_lang
10100020 g       .exceptions	00000000 alt_irq_entry
1010035c g     F .text	00000090 lcd_reset
1010784c g     F .text	00000064 __ulp
101053c4 g     F .text	00000018 __fp_unlock_all
10112410 g     O .rwdata	00000008 alt_fs_list
1010f098 g     F .text	0000006c alt_hostfs_write
10100020 g       *ABS*	00000000 __ram_exceptions_start
10105f30 g     F .text	0000000c localeconv
101002b4 g     F .text	00000044 small_delay
1010f6dc g     F .text	00000050 alt_ic_isr_register
10112480 g       *ABS*	00000000 _edata
1011413c g       *ABS*	00000000 _end
101008ec g     F .text	000000a4 configure_image
10109ef4 g     F .text	00000164 __fputwc
10100230 g       *ABS*	00000000 __ram_exceptions_end
1010e99c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
1010f7b4 g     F .text	0000008c alt_ic_irq_disable
101083ac g     F .text	0000007c __swrite
10112408 g     O .rwdata	00000004 __malloc_trim_threshold
10105ef8 g     F .text	0000000c __locale_msgcharset
10110234 g     F .text	00000038 exit
10105d9c g     F .text	000000c4 _fwalk_reent
10107650 g     F .text	000001fc __mdiff
10100b54 g     F .text	00000074 .hidden __modsi3
101004f0 g     F .text	000003fc init_lcd
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
101053a0 g     F .text	00000004 __sfp_lock_release
10110580 g     F .text	00000034 _exit
1010f350 g     F .text	0000012c alt_alarm_start
10105f3c g     F .text	000001bc __smakebuf_r
10100f34 g     F .text	00000098 strlen
1010fc04 g     F .text	0000015c open
1010c470 g     F .text	000000dc .hidden __gedf2
1011240c g     O .rwdata	00000004 __wctomb
10108664 g     F .text	00000018 __sprint_r
1010f6bc g     F .text	00000020 alt_icache_flush_all
10112474 g     O .rwdata	00000004 alt_priority_mask
1010f72c g     F .text	00000088 alt_ic_irq_enable
101032a8 g     F .text	0000001c __vfprintf_internal
1010a550 g     F .text	0000005c _wctomb_r
1010ceac g     F .text	000008fc .hidden __subdf3
10106ff0 g     F .text	000000b0 __lo0bits
10112478 g     O .rwdata	00000008 alt_alarm_list
1010f57c g     F .text	00000060 _do_ctors
1010a460 g     F .text	000000c0 wcrtomb
1010da4c g     F .text	000000d8 close
1010dd94 g     F .text	00000084 alt_load
1010a07c g     F .text	00000080 fputwc
101053a4 g     F .text	00000004 __sinit_lock_acquire
10106d3c g     F .text	00000148 __multadd
10106d14 g     F .text	00000028 _Bfree
1010f16c g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10100000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100000:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100004:	08408c14 	ori	at,at,560
    jmp r1
10100008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	10900f04 	addi	r2,r2,16444
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	10900f04 	addi	r2,r2,16444
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
101001e4:	00bfffc4 	movi	r2,-1
101001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
101001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
101001f0:	d0a70617 	ldw	r2,-25576(gp)
101001f4:	10000726 	beq	r2,zero,10100214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
101001f8:	d0a70617 	ldw	r2,-25576(gp)
101001fc:	e0fffd17 	ldw	r3,-12(fp)
10100200:	e1bffe17 	ldw	r6,-8(fp)
10100204:	e17fff17 	ldw	r5,-4(fp)
10100208:	1809883a 	mov	r4,r3
1010020c:	103ee83a 	callr	r2
10100210:	00000206 	br	1010021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10100218:	0005883a 	mov	r2,zero
}
1010021c:	e037883a 	mov	sp,fp
10100220:	dfc00117 	ldw	ra,4(sp)
10100224:	df000017 	ldw	fp,0(sp)
10100228:	dec00204 	addi	sp,sp,8
1010022c:	f800283a 	ret

Disassembly of section .text:

10100230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100230:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10100238:	06840474 	movhi	gp,4113
    ori gp, gp, %lo(_gp)
1010023c:	d6a8fe14 	ori	gp,gp,41976
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100240:	00840474 	movhi	r2,4113
    ori r2, r2, %lo(__bss_start)
10100244:	108ff714 	ori	r2,r2,16348

    movhi r3, %hi(__bss_end)
10100248:	00c40474 	movhi	r3,4113
    ori r3, r3, %lo(__bss_end)
1010024c:	18d04f14 	ori	r3,r3,16700

    beq r2, r3, 1f
10100250:	10c00326 	beq	r2,r3,10100260 <_start+0x30>

0:
    stw zero, (r2)
10100254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10100258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1010025c:	10fffd36 	bltu	r2,r3,10100254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100260:	010dd940 	call	1010dd94 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100264:	010df300 	call	1010df30 <alt_main>

10100268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10100268:	003fff06 	br	10100268 <__alt_data_end+0xfffe0268>

1010026c <delay>:
#define LCD_REG_NB_PARAM				0x06
#define LCD_REG_PARAM(index)+ index



void delay(){
1010026c:	defffe04 	addi	sp,sp,-8
10100270:	df000115 	stw	fp,4(sp)
10100274:	df000104 	addi	fp,sp,4
	uint32_t c;
	for (c = 1; c <= 3000000; c++){}
10100278:	00800044 	movi	r2,1
1010027c:	e0bfff15 	stw	r2,-4(fp)
10100280:	00000306 	br	10100290 <delay+0x24>
10100284:	e0bfff17 	ldw	r2,-4(fp)
10100288:	10800044 	addi	r2,r2,1
1010028c:	e0bfff15 	stw	r2,-4(fp)
10100290:	e0ffff17 	ldw	r3,-4(fp)
10100294:	00800bb4 	movhi	r2,46
10100298:	10b1b004 	addi	r2,r2,-14656
1010029c:	10fff92e 	bgeu	r2,r3,10100284 <__alt_data_end+0xfffe0284>
}
101002a0:	0001883a 	nop
101002a4:	e037883a 	mov	sp,fp
101002a8:	df000017 	ldw	fp,0(sp)
101002ac:	dec00104 	addi	sp,sp,4
101002b0:	f800283a 	ret

101002b4 <small_delay>:

void small_delay(){
101002b4:	defffe04 	addi	sp,sp,-8
101002b8:	df000115 	stw	fp,4(sp)
101002bc:	df000104 	addi	fp,sp,4
	uint32_t c;
	for (c = 1; c <= 1000; c++){}
101002c0:	00800044 	movi	r2,1
101002c4:	e0bfff15 	stw	r2,-4(fp)
101002c8:	00000306 	br	101002d8 <small_delay+0x24>
101002cc:	e0bfff17 	ldw	r2,-4(fp)
101002d0:	10800044 	addi	r2,r2,1
101002d4:	e0bfff15 	stw	r2,-4(fp)
101002d8:	e0bfff17 	ldw	r2,-4(fp)
101002dc:	1080fa70 	cmpltui	r2,r2,1001
101002e0:	103ffa1e 	bne	r2,zero,101002cc <__alt_data_end+0xfffe02cc>
}
101002e4:	0001883a 	nop
101002e8:	e037883a 	mov	sp,fp
101002ec:	df000017 	ldw	fp,0(sp)
101002f0:	dec00104 	addi	sp,sp,4
101002f4:	f800283a 	ret

101002f8 <lcd_flag_set>:


void lcd_flag_set (uint16_t flag){
101002f8:	defffc04 	addi	sp,sp,-16
101002fc:	dfc00315 	stw	ra,12(sp)
10100300:	df000215 	stw	fp,8(sp)
10100304:	df000204 	addi	fp,sp,8
10100308:	2005883a 	mov	r2,r4
1010030c:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t reg_flag_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
10100310:	008400b4 	movhi	r2,4098
10100314:	10800104 	addi	r2,r2,4
10100318:	1080002b 	ldhuio	r2,0(r2)
1010031c:	10bfffcc 	andi	r2,r2,65535
10100320:	e0bffe0d 	sth	r2,-8(fp)
	delay();
10100324:	010026c0 	call	1010026c <delay>
	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS, (reg_flag_val | flag));
10100328:	e0fffe0b 	ldhu	r3,-8(fp)
1010032c:	e0bfff0b 	ldhu	r2,-4(fp)
10100330:	1884b03a 	or	r2,r3,r2
10100334:	10ffffcc 	andi	r3,r2,65535
10100338:	008400b4 	movhi	r2,4098
1010033c:	10800104 	addi	r2,r2,4
10100340:	10c0002d 	sthio	r3,0(r2)
}
10100344:	0001883a 	nop
10100348:	e037883a 	mov	sp,fp
1010034c:	dfc00117 	ldw	ra,4(sp)
10100350:	df000017 	ldw	fp,0(sp)
10100354:	dec00204 	addi	sp,sp,8
10100358:	f800283a 	ret

1010035c <lcd_reset>:

void lcd_reset(){
1010035c:	defffd04 	addi	sp,sp,-12
10100360:	dfc00215 	stw	ra,8(sp)
10100364:	df000115 	stw	fp,4(sp)
10100368:	df000104 	addi	fp,sp,4
	lcd_flag_set(0x04);
1010036c:	01000104 	movi	r4,4
10100370:	01002f80 	call	101002f8 <lcd_flag_set>

	delay();
10100374:	010026c0 	call	1010026c <delay>

	uint16_t reg_flag_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
10100378:	008400b4 	movhi	r2,4098
1010037c:	10800104 	addi	r2,r2,4
10100380:	1080002b 	ldhuio	r2,0(r2)
10100384:	10bfffcc 	andi	r2,r2,65535
10100388:	e0bfff0d 	sth	r2,-4(fp)

	printf("%lu  \n", (unsigned long)reg_flag_val);
1010038c:	e0bfff0b 	ldhu	r2,-4(fp)
10100390:	100b883a 	mov	r5,r2
10100394:	01040474 	movhi	r4,4113
10100398:	21016d04 	addi	r4,r4,1460
1010039c:	0100e240 	call	10100e24 <printf>

	delay();
101003a0:	010026c0 	call	1010026c <delay>

	while( reg_flag_val & 0x04){
101003a4:	00000506 	br	101003bc <lcd_reset+0x60>
		reg_flag_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
101003a8:	008400b4 	movhi	r2,4098
101003ac:	10800104 	addi	r2,r2,4
101003b0:	1080002b 	ldhuio	r2,0(r2)
101003b4:	10bfffcc 	andi	r2,r2,65535
101003b8:	e0bfff0d 	sth	r2,-4(fp)

	printf("%lu  \n", (unsigned long)reg_flag_val);

	delay();

	while( reg_flag_val & 0x04){
101003bc:	e0bfff0b 	ldhu	r2,-4(fp)
101003c0:	1080010c 	andi	r2,r2,4
101003c4:	103ff81e 	bne	r2,zero,101003a8 <__alt_data_end+0xfffe03a8>
		reg_flag_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
	}
	printf("reset finished \n");
101003c8:	01040474 	movhi	r4,4113
101003cc:	21016f04 	addi	r4,r4,1468
101003d0:	0100f200 	call	10100f20 <puts>

}
101003d4:	0001883a 	nop
101003d8:	e037883a 	mov	sp,fp
101003dc:	dfc00117 	ldw	ra,4(sp)
101003e0:	df000017 	ldw	fp,0(sp)
101003e4:	dec00204 	addi	sp,sp,8
101003e8:	f800283a 	ret

101003ec <send_command>:

void send_command(uint16_t cmd, uint16_t n, uint16_t* params)
{
101003ec:	defffa04 	addi	sp,sp,-24
101003f0:	dfc00515 	stw	ra,20(sp)
101003f4:	df000415 	stw	fp,16(sp)
101003f8:	df000404 	addi	fp,sp,16
101003fc:	2007883a 	mov	r3,r4
10100400:	2805883a 	mov	r2,r5
10100404:	e1bfff15 	stw	r6,-4(fp)
10100408:	e0fffd0d 	sth	r3,-12(fp)
1010040c:	e0bffe0d 	sth	r2,-8(fp)
	uint16_t index = 0;
10100410:	e03ffc0d 	sth	zero,-16(fp)

	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_CMD_REG, cmd);
10100414:	e0fffd0b 	ldhu	r3,-12(fp)
10100418:	008400b4 	movhi	r2,4098
1010041c:	10800144 	addi	r2,r2,5
10100420:	10c0002d 	sthio	r3,0(r2)
	small_delay();
10100424:	01002b40 	call	101002b4 <small_delay>
	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_NB_PARAM, n);
10100428:	e0fffe0b 	ldhu	r3,-8(fp)
1010042c:	008400b4 	movhi	r2,4098
10100430:	10800184 	addi	r2,r2,6
10100434:	10c0002d 	sthio	r3,0(r2)


	while(index < n){
10100438:	00000f06 	br	10100478 <send_command+0x8c>
		IOWR_16DIRECT(LCD_0_BASE, LCD_REG_PARAM(index), params[index]);
1010043c:	e0fffc0b 	ldhu	r3,-16(fp)
10100440:	008400b4 	movhi	r2,4098
10100444:	1887883a 	add	r3,r3,r2
10100448:	e0bffc0b 	ldhu	r2,-16(fp)
1010044c:	1085883a 	add	r2,r2,r2
10100450:	1009883a 	mov	r4,r2
10100454:	e0bfff17 	ldw	r2,-4(fp)
10100458:	1105883a 	add	r2,r2,r4
1010045c:	1080000b 	ldhu	r2,0(r2)
10100460:	10bfffcc 	andi	r2,r2,65535
10100464:	1880002d 	sthio	r2,0(r3)
		small_delay();
10100468:	01002b40 	call	101002b4 <small_delay>
		++index;
1010046c:	e0bffc0b 	ldhu	r2,-16(fp)
10100470:	10800044 	addi	r2,r2,1
10100474:	e0bffc0d 	sth	r2,-16(fp)
	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_CMD_REG, cmd);
	small_delay();
	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_NB_PARAM, n);


	while(index < n){
10100478:	e0fffc0b 	ldhu	r3,-16(fp)
1010047c:	e0bffe0b 	ldhu	r2,-8(fp)
10100480:	18bfee36 	bltu	r3,r2,1010043c <__alt_data_end+0xfffe043c>
		IOWR_16DIRECT(LCD_0_BASE, LCD_REG_PARAM(index), params[index]);
		small_delay();
		++index;
	}

	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS, 0x2);
10100484:	00c00084 	movi	r3,2
10100488:	008400b4 	movhi	r2,4098
1010048c:	10800104 	addi	r2,r2,4
10100490:	10c0002d 	sthio	r3,0(r2)
	//uint16_t reg_flags = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
	/*while(reg_flags & 0x2){
		reg_flags = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
	}*/
	//printf("command sent \n", (unsigned long)reg_flags,"\n");
}
10100494:	0001883a 	nop
10100498:	e037883a 	mov	sp,fp
1010049c:	dfc00117 	ldw	ra,4(sp)
101004a0:	df000017 	ldw	fp,0(sp)
101004a4:	dec00204 	addi	sp,sp,8
101004a8:	f800283a 	ret

101004ac <start_lcd>:

void start_lcd(){
101004ac:	defffd04 	addi	sp,sp,-12
101004b0:	dfc00215 	stw	ra,8(sp)
101004b4:	df000115 	stw	fp,4(sp)
101004b8:	df000104 	addi	fp,sp,4
	lcd_flag_set(0x01);
101004bc:	01000044 	movi	r4,1
101004c0:	01002f80 	call	101002f8 <lcd_flag_set>
	uint16_t reg_flags_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
101004c4:	008400b4 	movhi	r2,4098
101004c8:	10800104 	addi	r2,r2,4
101004cc:	1080002b 	ldhuio	r2,0(r2)
101004d0:	10bfffcc 	andi	r2,r2,65535
101004d4:	e0bfff0d 	sth	r2,-4(fp)

	/*while(reg_flags_val & 0x1){
		reg_flags_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
	}*/
}
101004d8:	0001883a 	nop
101004dc:	e037883a 	mov	sp,fp
101004e0:	dfc00117 	ldw	ra,4(sp)
101004e4:	df000017 	ldw	fp,0(sp)
101004e8:	dec00204 	addi	sp,sp,8
101004ec:	f800283a 	ret

101004f0 <init_lcd>:
void init_lcd(){
101004f0:	deffd704 	addi	sp,sp,-164
101004f4:	dfc02815 	stw	ra,160(sp)
101004f8:	df002715 	stw	fp,156(sp)
101004fc:	df002704 	addi	fp,sp,156
	send_command(0x11, 0, (uint16_t []){ 0x09, 0x0a});
10100500:	00800244 	movi	r2,9
10100504:	e0bfff0d 	sth	r2,-4(fp)
10100508:	00800284 	movi	r2,10
1010050c:	e0bfff8d 	sth	r2,-2(fp)
10100510:	e0bfff04 	addi	r2,fp,-4
10100514:	100d883a 	mov	r6,r2
10100518:	000b883a 	mov	r5,zero
1010051c:	01000444 	movi	r4,17
10100520:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100524:	01002b40 	call	101002b4 <small_delay>
	send_command(0xcf, 3, (uint16_t []){ 0x0, 0x81, 0xc0});
10100528:	e03ffd8d 	sth	zero,-10(fp)
1010052c:	00802044 	movi	r2,129
10100530:	e0bffe0d 	sth	r2,-8(fp)
10100534:	00803004 	movi	r2,192
10100538:	e0bffe8d 	sth	r2,-6(fp)
1010053c:	e0bffd84 	addi	r2,fp,-10
10100540:	100d883a 	mov	r6,r2
10100544:	014000c4 	movi	r5,3
10100548:	010033c4 	movi	r4,207
1010054c:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100550:	01002b40 	call	101002b4 <small_delay>
	send_command(0xed, 4, (uint16_t []){ 0x64, 0x03, 0x12, 0x81});
10100554:	00801904 	movi	r2,100
10100558:	e0bffb8d 	sth	r2,-18(fp)
1010055c:	008000c4 	movi	r2,3
10100560:	e0bffc0d 	sth	r2,-16(fp)
10100564:	00800484 	movi	r2,18
10100568:	e0bffc8d 	sth	r2,-14(fp)
1010056c:	00802044 	movi	r2,129
10100570:	e0bffd0d 	sth	r2,-12(fp)
10100574:	e0bffb84 	addi	r2,fp,-18
10100578:	100d883a 	mov	r6,r2
1010057c:	01400104 	movi	r5,4
10100580:	01003b44 	movi	r4,237
10100584:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100588:	01002b40 	call	101002b4 <small_delay>
	send_command(0xe8, 3, (uint16_t []){ 0x85, 0x01, 0x0798});
1010058c:	00802144 	movi	r2,133
10100590:	e0bffa0d 	sth	r2,-24(fp)
10100594:	00800044 	movi	r2,1
10100598:	e0bffa8d 	sth	r2,-22(fp)
1010059c:	0081e604 	movi	r2,1944
101005a0:	e0bffb0d 	sth	r2,-20(fp)
101005a4:	e0bffa04 	addi	r2,fp,-24
101005a8:	100d883a 	mov	r6,r2
101005ac:	014000c4 	movi	r5,3
101005b0:	01003a04 	movi	r4,232
101005b4:	01003ec0 	call	101003ec <send_command>
	small_delay();
101005b8:	01002b40 	call	101002b4 <small_delay>
	send_command(0xcb, 5, (uint16_t []){ 0x39, 0x2c, 0x00, 0x34, 0x02});
101005bc:	00800e44 	movi	r2,57
101005c0:	e0bff78d 	sth	r2,-34(fp)
101005c4:	00800b04 	movi	r2,44
101005c8:	e0bff80d 	sth	r2,-32(fp)
101005cc:	e03ff88d 	sth	zero,-30(fp)
101005d0:	00800d04 	movi	r2,52
101005d4:	e0bff90d 	sth	r2,-28(fp)
101005d8:	00800084 	movi	r2,2
101005dc:	e0bff98d 	sth	r2,-26(fp)
101005e0:	e0bff784 	addi	r2,fp,-34
101005e4:	100d883a 	mov	r6,r2
101005e8:	01400144 	movi	r5,5
101005ec:	010032c4 	movi	r4,203
101005f0:	01003ec0 	call	101003ec <send_command>
	small_delay();
101005f4:	01002b40 	call	101002b4 <small_delay>
	send_command(0xf7, 1, (uint16_t []){ 0x20});
101005f8:	00800804 	movi	r2,32
101005fc:	e0bff70d 	sth	r2,-36(fp)
10100600:	e0bff704 	addi	r2,fp,-36
10100604:	100d883a 	mov	r6,r2
10100608:	01400044 	movi	r5,1
1010060c:	01003dc4 	movi	r4,247
10100610:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100614:	01002b40 	call	101002b4 <small_delay>
	send_command(0xea, 2, (uint16_t []){ 0x00, 0x00});
10100618:	e03ff60d 	sth	zero,-40(fp)
1010061c:	e03ff68d 	sth	zero,-38(fp)
10100620:	e0bff604 	addi	r2,fp,-40
10100624:	100d883a 	mov	r6,r2
10100628:	01400084 	movi	r5,2
1010062c:	01003a84 	movi	r4,234
10100630:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100634:	01002b40 	call	101002b4 <small_delay>
	send_command(0xb1, 2, (uint16_t []){ 0x00, 0x1b});
10100638:	e03ff50d 	sth	zero,-44(fp)
1010063c:	008006c4 	movi	r2,27
10100640:	e0bff58d 	sth	r2,-42(fp)
10100644:	e0bff504 	addi	r2,fp,-44
10100648:	100d883a 	mov	r6,r2
1010064c:	01400084 	movi	r5,2
10100650:	01002c44 	movi	r4,177
10100654:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100658:	01002b40 	call	101002b4 <small_delay>
	send_command(0xb6, 2, (uint16_t []){ 0x0a, 0xa2});
1010065c:	00800284 	movi	r2,10
10100660:	e0bff40d 	sth	r2,-48(fp)
10100664:	00802884 	movi	r2,162
10100668:	e0bff48d 	sth	r2,-46(fp)
1010066c:	e0bff404 	addi	r2,fp,-48
10100670:	100d883a 	mov	r6,r2
10100674:	01400084 	movi	r5,2
10100678:	01002d84 	movi	r4,182
1010067c:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100680:	01002b40 	call	101002b4 <small_delay>
	send_command(0xc0, 1, (uint16_t []){ 0x05});
10100684:	00800144 	movi	r2,5
10100688:	e0bff38d 	sth	r2,-50(fp)
1010068c:	e0bff384 	addi	r2,fp,-50
10100690:	100d883a 	mov	r6,r2
10100694:	01400044 	movi	r5,1
10100698:	01003004 	movi	r4,192
1010069c:	01003ec0 	call	101003ec <send_command>
	small_delay();
101006a0:	01002b40 	call	101002b4 <small_delay>
	send_command(0xc1, 1, (uint16_t []){ 0x11});
101006a4:	00800444 	movi	r2,17
101006a8:	e0bff30d 	sth	r2,-52(fp)
101006ac:	e0bff304 	addi	r2,fp,-52
101006b0:	100d883a 	mov	r6,r2
101006b4:	01400044 	movi	r5,1
101006b8:	01003044 	movi	r4,193
101006bc:	01003ec0 	call	101003ec <send_command>
	small_delay();
101006c0:	01002b40 	call	101002b4 <small_delay>
	send_command(0xc5, 2, (uint16_t []){ 0x45, 0x45});
101006c4:	00801144 	movi	r2,69
101006c8:	e0bff20d 	sth	r2,-56(fp)
101006cc:	00801144 	movi	r2,69
101006d0:	e0bff28d 	sth	r2,-54(fp)
101006d4:	e0bff204 	addi	r2,fp,-56
101006d8:	100d883a 	mov	r6,r2
101006dc:	01400084 	movi	r5,2
101006e0:	01003144 	movi	r4,197
101006e4:	01003ec0 	call	101003ec <send_command>
	small_delay();
101006e8:	01002b40 	call	101002b4 <small_delay>
	send_command(0xc7, 1, (uint16_t []){ 0xa2});
101006ec:	00802884 	movi	r2,162
101006f0:	e0bff18d 	sth	r2,-58(fp)
101006f4:	e0bff184 	addi	r2,fp,-58
101006f8:	100d883a 	mov	r6,r2
101006fc:	01400044 	movi	r5,1
10100700:	010031c4 	movi	r4,199
10100704:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100708:	01002b40 	call	101002b4 <small_delay>
	send_command(0x36, 1, (uint16_t []){ 0x08}); //BGR (originally rgb with 0x48)
1010070c:	00800204 	movi	r2,8
10100710:	e0bff10d 	sth	r2,-60(fp)
10100714:	e0bff104 	addi	r2,fp,-60
10100718:	100d883a 	mov	r6,r2
1010071c:	01400044 	movi	r5,1
10100720:	01000d84 	movi	r4,54
10100724:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100728:	01002b40 	call	101002b4 <small_delay>
	send_command(0xf2, 1, (uint16_t []){ 0x00});
1010072c:	e03ff08d 	sth	zero,-62(fp)
10100730:	e0bff084 	addi	r2,fp,-62
10100734:	100d883a 	mov	r6,r2
10100738:	01400044 	movi	r5,1
1010073c:	01003c84 	movi	r4,242
10100740:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100744:	01002b40 	call	101002b4 <small_delay>
	send_command(0x26, 1, (uint16_t []){ 0x01});
10100748:	00800044 	movi	r2,1
1010074c:	e0bff00d 	sth	r2,-64(fp)
10100750:	e0bff004 	addi	r2,fp,-64
10100754:	100d883a 	mov	r6,r2
10100758:	01400044 	movi	r5,1
1010075c:	01000984 	movi	r4,38
10100760:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100764:	01002b40 	call	101002b4 <small_delay>
	send_command(0xe0, 15, (uint16_t []){ 0xf, 0x26, 0x24, 0xb, 0xe, 0x8, 0x4b, 0xa8, 0x3b, 0x0a, 0x14, 0x06, 0x10, 0x09, 0x00});
10100768:	00840474 	movhi	r2,4113
1010076c:	10817304 	addi	r2,r2,1484
10100770:	e0ffe884 	addi	r3,fp,-94
10100774:	1009883a 	mov	r4,r2
10100778:	00800784 	movi	r2,30
1010077c:	100d883a 	mov	r6,r2
10100780:	200b883a 	mov	r5,r4
10100784:	1809883a 	mov	r4,r3
10100788:	0100cac0 	call	10100cac <memcpy>
1010078c:	e0bfe884 	addi	r2,fp,-94
10100790:	100d883a 	mov	r6,r2
10100794:	014003c4 	movi	r5,15
10100798:	01003804 	movi	r4,224
1010079c:	01003ec0 	call	101003ec <send_command>
	small_delay();
101007a0:	01002b40 	call	101002b4 <small_delay>
	send_command(0xe1, 15, (uint16_t []){ 0x0, 0x1c, 0x20, 0x4, 0x10, 0x8, 0x34, 0x47, 0x44, 0x05, 0xb, 0x9, 0x2f, 0x36, 0x0f});
101007a4:	00840474 	movhi	r2,4113
101007a8:	10817a84 	addi	r2,r2,1514
101007ac:	e0ffe104 	addi	r3,fp,-124
101007b0:	1009883a 	mov	r4,r2
101007b4:	00800784 	movi	r2,30
101007b8:	100d883a 	mov	r6,r2
101007bc:	200b883a 	mov	r5,r4
101007c0:	1809883a 	mov	r4,r3
101007c4:	0100cac0 	call	10100cac <memcpy>
101007c8:	e0bfe104 	addi	r2,fp,-124
101007cc:	100d883a 	mov	r6,r2
101007d0:	014003c4 	movi	r5,15
101007d4:	01003844 	movi	r4,225
101007d8:	01003ec0 	call	101003ec <send_command>
	small_delay();
101007dc:	01002b40 	call	101002b4 <small_delay>
	send_command(0x2a, 4, (uint16_t []){ 0x0, 0x0, 0x0, 0xef});
101007e0:	e03fdf0d 	sth	zero,-132(fp)
101007e4:	e03fdf8d 	sth	zero,-130(fp)
101007e8:	e03fe00d 	sth	zero,-128(fp)
101007ec:	00803bc4 	movi	r2,239
101007f0:	e0bfe08d 	sth	r2,-126(fp)
101007f4:	e0bfdf04 	addi	r2,fp,-132
101007f8:	100d883a 	mov	r6,r2
101007fc:	01400104 	movi	r5,4
10100800:	01000a84 	movi	r4,42
10100804:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100808:	01002b40 	call	101002b4 <small_delay>
	send_command(0x2b, 4, (uint16_t []){ 0x0, 0x0, 0x01, 0x3f});
1010080c:	e03fdd0d 	sth	zero,-140(fp)
10100810:	e03fdd8d 	sth	zero,-138(fp)
10100814:	00800044 	movi	r2,1
10100818:	e0bfde0d 	sth	r2,-136(fp)
1010081c:	00800fc4 	movi	r2,63
10100820:	e0bfde8d 	sth	r2,-134(fp)
10100824:	e0bfdd04 	addi	r2,fp,-140
10100828:	100d883a 	mov	r6,r2
1010082c:	01400104 	movi	r5,4
10100830:	01000ac4 	movi	r4,43
10100834:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100838:	01002b40 	call	101002b4 <small_delay>
	send_command(0x3a, 1, (uint16_t []){ 0x55}); //RGB
1010083c:	00801544 	movi	r2,85
10100840:	e0bfdc8d 	sth	r2,-142(fp)
10100844:	e0bfdc84 	addi	r2,fp,-142
10100848:	100d883a 	mov	r6,r2
1010084c:	01400044 	movi	r5,1
10100850:	01000e84 	movi	r4,58
10100854:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100858:	01002b40 	call	101002b4 <small_delay>
	send_command(0xf6, 3, (uint16_t []){ 0x01, 0x30, 0x0});
1010085c:	00800044 	movi	r2,1
10100860:	e0bfdb0d 	sth	r2,-148(fp)
10100864:	00800c04 	movi	r2,48
10100868:	e0bfdb8d 	sth	r2,-146(fp)
1010086c:	e03fdc0d 	sth	zero,-144(fp)
10100870:	e0bfdb04 	addi	r2,fp,-148
10100874:	100d883a 	mov	r6,r2
10100878:	014000c4 	movi	r5,3
1010087c:	01003d84 	movi	r4,246
10100880:	01003ec0 	call	101003ec <send_command>
	small_delay();
10100884:	01002b40 	call	101002b4 <small_delay>
	send_command(0x29, 0, (uint16_t []){ 0x09, 0x0a});
10100888:	00800244 	movi	r2,9
1010088c:	e0bfda0d 	sth	r2,-152(fp)
10100890:	00800284 	movi	r2,10
10100894:	e0bfda8d 	sth	r2,-150(fp)
10100898:	e0bfda04 	addi	r2,fp,-152
1010089c:	100d883a 	mov	r6,r2
101008a0:	000b883a 	mov	r5,zero
101008a4:	01000a44 	movi	r4,41
101008a8:	01003ec0 	call	101003ec <send_command>
	small_delay();
101008ac:	01002b40 	call	101002b4 <small_delay>
	send_command(0x2c, 0, (uint16_t []){ 0x09, 0x0a});
101008b0:	00800244 	movi	r2,9
101008b4:	e0bfd90d 	sth	r2,-156(fp)
101008b8:	00800284 	movi	r2,10
101008bc:	e0bfd98d 	sth	r2,-154(fp)
101008c0:	e1bfd904 	addi	r6,fp,-156
101008c4:	000b883a 	mov	r5,zero
101008c8:	01000b04 	movi	r4,44
101008cc:	01003ec0 	call	101003ec <send_command>
	small_delay();
101008d0:	01002b40 	call	101002b4 <small_delay>
}
101008d4:	0001883a 	nop
101008d8:	e037883a 	mov	sp,fp
101008dc:	dfc00117 	ldw	ra,4(sp)
101008e0:	df000017 	ldw	fp,0(sp)
101008e4:	dec00204 	addi	sp,sp,8
101008e8:	f800283a 	ret

101008ec <configure_image>:

void configure_image(uint32_t image_address, uint32_t image_size){
101008ec:	defffa04 	addi	sp,sp,-24
101008f0:	dfc00515 	stw	ra,20(sp)
101008f4:	df000415 	stw	fp,16(sp)
101008f8:	df000404 	addi	fp,sp,16
101008fc:	e13ffe15 	stw	r4,-8(fp)
10100900:	e17fff15 	stw	r5,-4(fp)
	uint16_t image_address_low = image_address & 0xFFFF;
10100904:	e0bffe17 	ldw	r2,-8(fp)
10100908:	e0bffc0d 	sth	r2,-16(fp)
	uint16_t image_address_high = (image_address >> 16) & 0xFFFF;
1010090c:	e0bffe17 	ldw	r2,-8(fp)
10100910:	1004d43a 	srli	r2,r2,16
10100914:	e0bffc8d 	sth	r2,-14(fp)
	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_IMG_ADDRESS_LOW,image_address_low);
10100918:	e0fffc0b 	ldhu	r3,-16(fp)
1010091c:	008400b4 	movhi	r2,4098
10100920:	10800044 	addi	r2,r2,1
10100924:	10c0002d 	sthio	r3,0(r2)
	delay();
10100928:	010026c0 	call	1010026c <delay>
	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_IMG_ADDRESS_HIGH,image_address_high);
1010092c:	e0fffc8b 	ldhu	r3,-14(fp)
10100930:	008400b4 	movhi	r2,4098
10100934:	10c0002d 	sthio	r3,0(r2)
	delay();
10100938:	010026c0 	call	1010026c <delay>
	uint16_t image_size_low = image_size & 0xFFFF;
1010093c:	e0bfff17 	ldw	r2,-4(fp)
10100940:	e0bffd0d 	sth	r2,-12(fp)
	uint16_t image_size_high = (image_size >> 16) & 0xFFFF;	
10100944:	e0bfff17 	ldw	r2,-4(fp)
10100948:	1004d43a 	srli	r2,r2,16
1010094c:	e0bffd8d 	sth	r2,-10(fp)
	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_IMG_LENGTH_LOW, image_size_low);
10100950:	e0fffd0b 	ldhu	r3,-12(fp)
10100954:	008400b4 	movhi	r2,4098
10100958:	108000c4 	addi	r2,r2,3
1010095c:	10c0002d 	sthio	r3,0(r2)
	delay();
10100960:	010026c0 	call	1010026c <delay>
	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_IMG_LENGTH_HIGH, image_size_high);
10100964:	e0fffd8b 	ldhu	r3,-10(fp)
10100968:	008400b4 	movhi	r2,4098
1010096c:	10800084 	addi	r2,r2,2
10100970:	10c0002d 	sthio	r3,0(r2)
	delay();
10100974:	010026c0 	call	1010026c <delay>
}
10100978:	0001883a 	nop
1010097c:	e037883a 	mov	sp,fp
10100980:	dfc00117 	ldw	ra,4(sp)
10100984:	df000017 	ldw	fp,0(sp)
10100988:	dec00204 	addi	sp,sp,8
1010098c:	f800283a 	ret

10100990 <init_image>:


void init_image(uint32_t image_address, uint32_t rows, uint32_t cols){
10100990:	defff804 	addi	sp,sp,-32
10100994:	dfc00715 	stw	ra,28(sp)
10100998:	df000615 	stw	fp,24(sp)
1010099c:	df000604 	addi	fp,sp,24
101009a0:	e13ffd15 	stw	r4,-12(fp)
101009a4:	e17ffe15 	stw	r5,-8(fp)
101009a8:	e1bfff15 	stw	r6,-4(fp)
	uint32_t i = 0;
101009ac:	e03ffa15 	stw	zero,-24(fp)
	uint16_t color = 0xA8F0;
101009b0:	00aa3c04 	movi	r2,-22288
101009b4:	e0bffb0d 	sth	r2,-20(fp)

	while(i < (rows * sizeof(uint16_t))){
101009b8:	00002506 	br	10100a50 <init_image+0xc0>
		uint32_t j = 0;
101009bc:	e03ffc15 	stw	zero,-16(fp)

		if(i % 30 == 0){
101009c0:	e0bffa17 	ldw	r2,-24(fp)
101009c4:	01400784 	movi	r5,30
101009c8:	1009883a 	mov	r4,r2
101009cc:	0100c2c0 	call	10100c2c <__umodsi3>
101009d0:	1000171e 	bne	r2,zero,10100a30 <init_image+0xa0>
			color = color == 0xA8F0 ? 0x00AA : 0xA8F0;
101009d4:	e0fffb0b 	ldhu	r3,-20(fp)
101009d8:	00aa3c14 	movui	r2,43248
101009dc:	1880021e 	bne	r3,r2,101009e8 <init_image+0x58>
101009e0:	00802a84 	movi	r2,170
101009e4:	00000106 	br	101009ec <init_image+0x5c>
101009e8:	00aa3c04 	movi	r2,-22288
101009ec:	e0bffb0d 	sth	r2,-20(fp)
		}

		while(j < cols * sizeof(uint16_t)){
101009f0:	00000f06 	br	10100a30 <init_image+0xa0>
			IOWR_16DIRECT(image_address, i * cols + j, color);
101009f4:	e17fff17 	ldw	r5,-4(fp)
101009f8:	e13ffa17 	ldw	r4,-24(fp)
101009fc:	0100c840 	call	10100c84 <__mulsi3>
10100a00:	1007883a 	mov	r3,r2
10100a04:	e0bffc17 	ldw	r2,-16(fp)
10100a08:	1887883a 	add	r3,r3,r2
10100a0c:	e0bffd17 	ldw	r2,-12(fp)
10100a10:	1885883a 	add	r2,r3,r2
10100a14:	1007883a 	mov	r3,r2
10100a18:	e0bffb0b 	ldhu	r2,-20(fp)
10100a1c:	1880002d 	sthio	r2,0(r3)
			small_delay();
10100a20:	01002b40 	call	101002b4 <small_delay>
			j += 2;
10100a24:	e0bffc17 	ldw	r2,-16(fp)
10100a28:	10800084 	addi	r2,r2,2
10100a2c:	e0bffc15 	stw	r2,-16(fp)

		if(i % 30 == 0){
			color = color == 0xA8F0 ? 0x00AA : 0xA8F0;
		}

		while(j < cols * sizeof(uint16_t)){
10100a30:	e0bfff17 	ldw	r2,-4(fp)
10100a34:	1085883a 	add	r2,r2,r2
10100a38:	1007883a 	mov	r3,r2
10100a3c:	e0bffc17 	ldw	r2,-16(fp)
10100a40:	10ffec36 	bltu	r2,r3,101009f4 <__alt_data_end+0xfffe09f4>
			IOWR_16DIRECT(image_address, i * cols + j, color);
			small_delay();
			j += 2;
		}
		i += 2;
10100a44:	e0bffa17 	ldw	r2,-24(fp)
10100a48:	10800084 	addi	r2,r2,2
10100a4c:	e0bffa15 	stw	r2,-24(fp)

void init_image(uint32_t image_address, uint32_t rows, uint32_t cols){
	uint32_t i = 0;
	uint16_t color = 0xA8F0;

	while(i < (rows * sizeof(uint16_t))){
10100a50:	e0bffe17 	ldw	r2,-8(fp)
10100a54:	1085883a 	add	r2,r2,r2
10100a58:	1007883a 	mov	r3,r2
10100a5c:	e0bffa17 	ldw	r2,-24(fp)
10100a60:	10ffd636 	bltu	r2,r3,101009bc <__alt_data_end+0xfffe09bc>
			small_delay();
			j += 2;
		}
		i += 2;
	}
}
10100a64:	0001883a 	nop
10100a68:	e037883a 	mov	sp,fp
10100a6c:	dfc00117 	ldw	ra,4(sp)
10100a70:	df000017 	ldw	fp,0(sp)
10100a74:	dec00204 	addi	sp,sp,8
10100a78:	f800283a 	ret

10100a7c <main>:



int main(){
10100a7c:	defffd04 	addi	sp,sp,-12
10100a80:	dfc00215 	stw	ra,8(sp)
10100a84:	df000115 	stw	fp,4(sp)
10100a88:	df000104 	addi	fp,sp,4

	lcd_reset();
10100a8c:	010035c0 	call	1010035c <lcd_reset>

	uint16_t reg_flag_val1 = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
10100a90:	008400b4 	movhi	r2,4098
10100a94:	10800104 	addi	r2,r2,4
10100a98:	1080002b 	ldhuio	r2,0(r2)
10100a9c:	10bfffcc 	andi	r2,r2,65535
10100aa0:	e0bfff0d 	sth	r2,-4(fp)
	printf("Flag 1 %lu  \n",(unsigned long)reg_flag_val1);
10100aa4:	e0bfff0b 	ldhu	r2,-4(fp)
10100aa8:	100b883a 	mov	r5,r2
10100aac:	01040474 	movhi	r4,4113
10100ab0:	21018204 	addi	r4,r4,1544
10100ab4:	0100e240 	call	10100e24 <printf>
	reg_flag_val1 = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
	reg_flag_val2 = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
	printf("Flag1 after %lu  \n",(unsigned long)reg_flag_val1);
	printf("Flag2 after %lu  \n",(unsigned long)reg_flag_val2);
	printf("Display Stopped\n");*/
	return 0;
10100ab8:	0005883a 	mov	r2,zero
}
10100abc:	e037883a 	mov	sp,fp
10100ac0:	dfc00117 	ldw	ra,4(sp)
10100ac4:	df000017 	ldw	fp,0(sp)
10100ac8:	dec00204 	addi	sp,sp,8
10100acc:	f800283a 	ret

10100ad0 <__divsi3>:
10100ad0:	20001b16 	blt	r4,zero,10100b40 <__divsi3+0x70>
10100ad4:	000f883a 	mov	r7,zero
10100ad8:	28001616 	blt	r5,zero,10100b34 <__divsi3+0x64>
10100adc:	200d883a 	mov	r6,r4
10100ae0:	29001a2e 	bgeu	r5,r4,10100b4c <__divsi3+0x7c>
10100ae4:	00800804 	movi	r2,32
10100ae8:	00c00044 	movi	r3,1
10100aec:	00000106 	br	10100af4 <__divsi3+0x24>
10100af0:	10000d26 	beq	r2,zero,10100b28 <__divsi3+0x58>
10100af4:	294b883a 	add	r5,r5,r5
10100af8:	10bfffc4 	addi	r2,r2,-1
10100afc:	18c7883a 	add	r3,r3,r3
10100b00:	293ffb36 	bltu	r5,r4,10100af0 <__alt_data_end+0xfffe0af0>
10100b04:	0005883a 	mov	r2,zero
10100b08:	18000726 	beq	r3,zero,10100b28 <__divsi3+0x58>
10100b0c:	0005883a 	mov	r2,zero
10100b10:	31400236 	bltu	r6,r5,10100b1c <__divsi3+0x4c>
10100b14:	314dc83a 	sub	r6,r6,r5
10100b18:	10c4b03a 	or	r2,r2,r3
10100b1c:	1806d07a 	srli	r3,r3,1
10100b20:	280ad07a 	srli	r5,r5,1
10100b24:	183ffa1e 	bne	r3,zero,10100b10 <__alt_data_end+0xfffe0b10>
10100b28:	38000126 	beq	r7,zero,10100b30 <__divsi3+0x60>
10100b2c:	0085c83a 	sub	r2,zero,r2
10100b30:	f800283a 	ret
10100b34:	014bc83a 	sub	r5,zero,r5
10100b38:	39c0005c 	xori	r7,r7,1
10100b3c:	003fe706 	br	10100adc <__alt_data_end+0xfffe0adc>
10100b40:	0109c83a 	sub	r4,zero,r4
10100b44:	01c00044 	movi	r7,1
10100b48:	003fe306 	br	10100ad8 <__alt_data_end+0xfffe0ad8>
10100b4c:	00c00044 	movi	r3,1
10100b50:	003fee06 	br	10100b0c <__alt_data_end+0xfffe0b0c>

10100b54 <__modsi3>:
10100b54:	20001716 	blt	r4,zero,10100bb4 <__modsi3+0x60>
10100b58:	000f883a 	mov	r7,zero
10100b5c:	2005883a 	mov	r2,r4
10100b60:	28001216 	blt	r5,zero,10100bac <__modsi3+0x58>
10100b64:	2900162e 	bgeu	r5,r4,10100bc0 <__modsi3+0x6c>
10100b68:	01800804 	movi	r6,32
10100b6c:	00c00044 	movi	r3,1
10100b70:	00000106 	br	10100b78 <__modsi3+0x24>
10100b74:	30000a26 	beq	r6,zero,10100ba0 <__modsi3+0x4c>
10100b78:	294b883a 	add	r5,r5,r5
10100b7c:	31bfffc4 	addi	r6,r6,-1
10100b80:	18c7883a 	add	r3,r3,r3
10100b84:	293ffb36 	bltu	r5,r4,10100b74 <__alt_data_end+0xfffe0b74>
10100b88:	18000526 	beq	r3,zero,10100ba0 <__modsi3+0x4c>
10100b8c:	1806d07a 	srli	r3,r3,1
10100b90:	11400136 	bltu	r2,r5,10100b98 <__modsi3+0x44>
10100b94:	1145c83a 	sub	r2,r2,r5
10100b98:	280ad07a 	srli	r5,r5,1
10100b9c:	183ffb1e 	bne	r3,zero,10100b8c <__alt_data_end+0xfffe0b8c>
10100ba0:	38000126 	beq	r7,zero,10100ba8 <__modsi3+0x54>
10100ba4:	0085c83a 	sub	r2,zero,r2
10100ba8:	f800283a 	ret
10100bac:	014bc83a 	sub	r5,zero,r5
10100bb0:	003fec06 	br	10100b64 <__alt_data_end+0xfffe0b64>
10100bb4:	0109c83a 	sub	r4,zero,r4
10100bb8:	01c00044 	movi	r7,1
10100bbc:	003fe706 	br	10100b5c <__alt_data_end+0xfffe0b5c>
10100bc0:	00c00044 	movi	r3,1
10100bc4:	003ff106 	br	10100b8c <__alt_data_end+0xfffe0b8c>

10100bc8 <__udivsi3>:
10100bc8:	200d883a 	mov	r6,r4
10100bcc:	2900152e 	bgeu	r5,r4,10100c24 <__udivsi3+0x5c>
10100bd0:	28001416 	blt	r5,zero,10100c24 <__udivsi3+0x5c>
10100bd4:	00800804 	movi	r2,32
10100bd8:	00c00044 	movi	r3,1
10100bdc:	00000206 	br	10100be8 <__udivsi3+0x20>
10100be0:	10000e26 	beq	r2,zero,10100c1c <__udivsi3+0x54>
10100be4:	28000516 	blt	r5,zero,10100bfc <__udivsi3+0x34>
10100be8:	294b883a 	add	r5,r5,r5
10100bec:	10bfffc4 	addi	r2,r2,-1
10100bf0:	18c7883a 	add	r3,r3,r3
10100bf4:	293ffa36 	bltu	r5,r4,10100be0 <__alt_data_end+0xfffe0be0>
10100bf8:	18000826 	beq	r3,zero,10100c1c <__udivsi3+0x54>
10100bfc:	0005883a 	mov	r2,zero
10100c00:	31400236 	bltu	r6,r5,10100c0c <__udivsi3+0x44>
10100c04:	314dc83a 	sub	r6,r6,r5
10100c08:	10c4b03a 	or	r2,r2,r3
10100c0c:	1806d07a 	srli	r3,r3,1
10100c10:	280ad07a 	srli	r5,r5,1
10100c14:	183ffa1e 	bne	r3,zero,10100c00 <__alt_data_end+0xfffe0c00>
10100c18:	f800283a 	ret
10100c1c:	0005883a 	mov	r2,zero
10100c20:	f800283a 	ret
10100c24:	00c00044 	movi	r3,1
10100c28:	003ff406 	br	10100bfc <__alt_data_end+0xfffe0bfc>

10100c2c <__umodsi3>:
10100c2c:	2005883a 	mov	r2,r4
10100c30:	2900122e 	bgeu	r5,r4,10100c7c <__umodsi3+0x50>
10100c34:	28001116 	blt	r5,zero,10100c7c <__umodsi3+0x50>
10100c38:	01800804 	movi	r6,32
10100c3c:	00c00044 	movi	r3,1
10100c40:	00000206 	br	10100c4c <__umodsi3+0x20>
10100c44:	30000c26 	beq	r6,zero,10100c78 <__umodsi3+0x4c>
10100c48:	28000516 	blt	r5,zero,10100c60 <__umodsi3+0x34>
10100c4c:	294b883a 	add	r5,r5,r5
10100c50:	31bfffc4 	addi	r6,r6,-1
10100c54:	18c7883a 	add	r3,r3,r3
10100c58:	293ffa36 	bltu	r5,r4,10100c44 <__alt_data_end+0xfffe0c44>
10100c5c:	18000626 	beq	r3,zero,10100c78 <__umodsi3+0x4c>
10100c60:	1806d07a 	srli	r3,r3,1
10100c64:	11400136 	bltu	r2,r5,10100c6c <__umodsi3+0x40>
10100c68:	1145c83a 	sub	r2,r2,r5
10100c6c:	280ad07a 	srli	r5,r5,1
10100c70:	183ffb1e 	bne	r3,zero,10100c60 <__alt_data_end+0xfffe0c60>
10100c74:	f800283a 	ret
10100c78:	f800283a 	ret
10100c7c:	00c00044 	movi	r3,1
10100c80:	003ff706 	br	10100c60 <__alt_data_end+0xfffe0c60>

10100c84 <__mulsi3>:
10100c84:	0005883a 	mov	r2,zero
10100c88:	20000726 	beq	r4,zero,10100ca8 <__mulsi3+0x24>
10100c8c:	20c0004c 	andi	r3,r4,1
10100c90:	2008d07a 	srli	r4,r4,1
10100c94:	18000126 	beq	r3,zero,10100c9c <__mulsi3+0x18>
10100c98:	1145883a 	add	r2,r2,r5
10100c9c:	294b883a 	add	r5,r5,r5
10100ca0:	203ffa1e 	bne	r4,zero,10100c8c <__alt_data_end+0xfffe0c8c>
10100ca4:	f800283a 	ret
10100ca8:	f800283a 	ret

10100cac <memcpy>:
10100cac:	defffd04 	addi	sp,sp,-12
10100cb0:	dfc00215 	stw	ra,8(sp)
10100cb4:	dc400115 	stw	r17,4(sp)
10100cb8:	dc000015 	stw	r16,0(sp)
10100cbc:	00c003c4 	movi	r3,15
10100cc0:	2005883a 	mov	r2,r4
10100cc4:	1980452e 	bgeu	r3,r6,10100ddc <memcpy+0x130>
10100cc8:	2906b03a 	or	r3,r5,r4
10100ccc:	18c000cc 	andi	r3,r3,3
10100cd0:	1800441e 	bne	r3,zero,10100de4 <memcpy+0x138>
10100cd4:	347ffc04 	addi	r17,r6,-16
10100cd8:	8822d13a 	srli	r17,r17,4
10100cdc:	28c00104 	addi	r3,r5,4
10100ce0:	23400104 	addi	r13,r4,4
10100ce4:	8820913a 	slli	r16,r17,4
10100ce8:	2b000204 	addi	r12,r5,8
10100cec:	22c00204 	addi	r11,r4,8
10100cf0:	84000504 	addi	r16,r16,20
10100cf4:	2a800304 	addi	r10,r5,12
10100cf8:	22400304 	addi	r9,r4,12
10100cfc:	2c21883a 	add	r16,r5,r16
10100d00:	2811883a 	mov	r8,r5
10100d04:	200f883a 	mov	r7,r4
10100d08:	41000017 	ldw	r4,0(r8)
10100d0c:	1fc00017 	ldw	ra,0(r3)
10100d10:	63c00017 	ldw	r15,0(r12)
10100d14:	39000015 	stw	r4,0(r7)
10100d18:	53800017 	ldw	r14,0(r10)
10100d1c:	6fc00015 	stw	ra,0(r13)
10100d20:	5bc00015 	stw	r15,0(r11)
10100d24:	4b800015 	stw	r14,0(r9)
10100d28:	18c00404 	addi	r3,r3,16
10100d2c:	39c00404 	addi	r7,r7,16
10100d30:	42000404 	addi	r8,r8,16
10100d34:	6b400404 	addi	r13,r13,16
10100d38:	63000404 	addi	r12,r12,16
10100d3c:	5ac00404 	addi	r11,r11,16
10100d40:	52800404 	addi	r10,r10,16
10100d44:	4a400404 	addi	r9,r9,16
10100d48:	1c3fef1e 	bne	r3,r16,10100d08 <__alt_data_end+0xfffe0d08>
10100d4c:	89c00044 	addi	r7,r17,1
10100d50:	380e913a 	slli	r7,r7,4
10100d54:	310003cc 	andi	r4,r6,15
10100d58:	02c000c4 	movi	r11,3
10100d5c:	11c7883a 	add	r3,r2,r7
10100d60:	29cb883a 	add	r5,r5,r7
10100d64:	5900212e 	bgeu	r11,r4,10100dec <memcpy+0x140>
10100d68:	1813883a 	mov	r9,r3
10100d6c:	2811883a 	mov	r8,r5
10100d70:	200f883a 	mov	r7,r4
10100d74:	42800017 	ldw	r10,0(r8)
10100d78:	4a400104 	addi	r9,r9,4
10100d7c:	39ffff04 	addi	r7,r7,-4
10100d80:	4abfff15 	stw	r10,-4(r9)
10100d84:	42000104 	addi	r8,r8,4
10100d88:	59fffa36 	bltu	r11,r7,10100d74 <__alt_data_end+0xfffe0d74>
10100d8c:	213fff04 	addi	r4,r4,-4
10100d90:	2008d0ba 	srli	r4,r4,2
10100d94:	318000cc 	andi	r6,r6,3
10100d98:	21000044 	addi	r4,r4,1
10100d9c:	2109883a 	add	r4,r4,r4
10100da0:	2109883a 	add	r4,r4,r4
10100da4:	1907883a 	add	r3,r3,r4
10100da8:	290b883a 	add	r5,r5,r4
10100dac:	30000626 	beq	r6,zero,10100dc8 <memcpy+0x11c>
10100db0:	198d883a 	add	r6,r3,r6
10100db4:	29c00003 	ldbu	r7,0(r5)
10100db8:	18c00044 	addi	r3,r3,1
10100dbc:	29400044 	addi	r5,r5,1
10100dc0:	19ffffc5 	stb	r7,-1(r3)
10100dc4:	19bffb1e 	bne	r3,r6,10100db4 <__alt_data_end+0xfffe0db4>
10100dc8:	dfc00217 	ldw	ra,8(sp)
10100dcc:	dc400117 	ldw	r17,4(sp)
10100dd0:	dc000017 	ldw	r16,0(sp)
10100dd4:	dec00304 	addi	sp,sp,12
10100dd8:	f800283a 	ret
10100ddc:	2007883a 	mov	r3,r4
10100de0:	003ff206 	br	10100dac <__alt_data_end+0xfffe0dac>
10100de4:	2007883a 	mov	r3,r4
10100de8:	003ff106 	br	10100db0 <__alt_data_end+0xfffe0db0>
10100dec:	200d883a 	mov	r6,r4
10100df0:	003fee06 	br	10100dac <__alt_data_end+0xfffe0dac>

10100df4 <_printf_r>:
10100df4:	defffd04 	addi	sp,sp,-12
10100df8:	2805883a 	mov	r2,r5
10100dfc:	dfc00015 	stw	ra,0(sp)
10100e00:	d9800115 	stw	r6,4(sp)
10100e04:	d9c00215 	stw	r7,8(sp)
10100e08:	21400217 	ldw	r5,8(r4)
10100e0c:	d9c00104 	addi	r7,sp,4
10100e10:	100d883a 	mov	r6,r2
10100e14:	0100fcc0 	call	10100fcc <___vfprintf_internal_r>
10100e18:	dfc00017 	ldw	ra,0(sp)
10100e1c:	dec00304 	addi	sp,sp,12
10100e20:	f800283a 	ret

10100e24 <printf>:
10100e24:	defffc04 	addi	sp,sp,-16
10100e28:	dfc00015 	stw	ra,0(sp)
10100e2c:	d9400115 	stw	r5,4(sp)
10100e30:	d9800215 	stw	r6,8(sp)
10100e34:	d9c00315 	stw	r7,12(sp)
10100e38:	00840474 	movhi	r2,4113
10100e3c:	1088ff04 	addi	r2,r2,9212
10100e40:	10800017 	ldw	r2,0(r2)
10100e44:	200b883a 	mov	r5,r4
10100e48:	d9800104 	addi	r6,sp,4
10100e4c:	11000217 	ldw	r4,8(r2)
10100e50:	01032a80 	call	101032a8 <__vfprintf_internal>
10100e54:	dfc00017 	ldw	ra,0(sp)
10100e58:	dec00404 	addi	sp,sp,16
10100e5c:	f800283a 	ret

10100e60 <_puts_r>:
10100e60:	defff604 	addi	sp,sp,-40
10100e64:	dc000715 	stw	r16,28(sp)
10100e68:	2021883a 	mov	r16,r4
10100e6c:	2809883a 	mov	r4,r5
10100e70:	dc400815 	stw	r17,32(sp)
10100e74:	dfc00915 	stw	ra,36(sp)
10100e78:	2823883a 	mov	r17,r5
10100e7c:	0100f340 	call	10100f34 <strlen>
10100e80:	10c00044 	addi	r3,r2,1
10100e84:	d8800115 	stw	r2,4(sp)
10100e88:	00840474 	movhi	r2,4113
10100e8c:	10818604 	addi	r2,r2,1560
10100e90:	d8800215 	stw	r2,8(sp)
10100e94:	00800044 	movi	r2,1
10100e98:	d8800315 	stw	r2,12(sp)
10100e9c:	00800084 	movi	r2,2
10100ea0:	dc400015 	stw	r17,0(sp)
10100ea4:	d8c00615 	stw	r3,24(sp)
10100ea8:	dec00415 	stw	sp,16(sp)
10100eac:	d8800515 	stw	r2,20(sp)
10100eb0:	80000226 	beq	r16,zero,10100ebc <_puts_r+0x5c>
10100eb4:	80800e17 	ldw	r2,56(r16)
10100eb8:	10001426 	beq	r2,zero,10100f0c <_puts_r+0xac>
10100ebc:	81400217 	ldw	r5,8(r16)
10100ec0:	2880030b 	ldhu	r2,12(r5)
10100ec4:	10c8000c 	andi	r3,r2,8192
10100ec8:	1800061e 	bne	r3,zero,10100ee4 <_puts_r+0x84>
10100ecc:	29001917 	ldw	r4,100(r5)
10100ed0:	00f7ffc4 	movi	r3,-8193
10100ed4:	10880014 	ori	r2,r2,8192
10100ed8:	20c6703a 	and	r3,r4,r3
10100edc:	2880030d 	sth	r2,12(r5)
10100ee0:	28c01915 	stw	r3,100(r5)
10100ee4:	d9800404 	addi	r6,sp,16
10100ee8:	8009883a 	mov	r4,r16
10100eec:	01058100 	call	10105810 <__sfvwrite_r>
10100ef0:	1000091e 	bne	r2,zero,10100f18 <_puts_r+0xb8>
10100ef4:	00800284 	movi	r2,10
10100ef8:	dfc00917 	ldw	ra,36(sp)
10100efc:	dc400817 	ldw	r17,32(sp)
10100f00:	dc000717 	ldw	r16,28(sp)
10100f04:	dec00a04 	addi	sp,sp,40
10100f08:	f800283a 	ret
10100f0c:	8009883a 	mov	r4,r16
10100f10:	010538c0 	call	1010538c <__sinit>
10100f14:	003fe906 	br	10100ebc <__alt_data_end+0xfffe0ebc>
10100f18:	00bfffc4 	movi	r2,-1
10100f1c:	003ff606 	br	10100ef8 <__alt_data_end+0xfffe0ef8>

10100f20 <puts>:
10100f20:	00840474 	movhi	r2,4113
10100f24:	1088ff04 	addi	r2,r2,9212
10100f28:	200b883a 	mov	r5,r4
10100f2c:	11000017 	ldw	r4,0(r2)
10100f30:	0100e601 	jmpi	10100e60 <_puts_r>

10100f34 <strlen>:
10100f34:	208000cc 	andi	r2,r4,3
10100f38:	10002026 	beq	r2,zero,10100fbc <strlen+0x88>
10100f3c:	20800007 	ldb	r2,0(r4)
10100f40:	10002026 	beq	r2,zero,10100fc4 <strlen+0x90>
10100f44:	2005883a 	mov	r2,r4
10100f48:	00000206 	br	10100f54 <strlen+0x20>
10100f4c:	10c00007 	ldb	r3,0(r2)
10100f50:	18001826 	beq	r3,zero,10100fb4 <strlen+0x80>
10100f54:	10800044 	addi	r2,r2,1
10100f58:	10c000cc 	andi	r3,r2,3
10100f5c:	183ffb1e 	bne	r3,zero,10100f4c <__alt_data_end+0xfffe0f4c>
10100f60:	10c00017 	ldw	r3,0(r2)
10100f64:	01ffbff4 	movhi	r7,65279
10100f68:	39ffbfc4 	addi	r7,r7,-257
10100f6c:	00ca303a 	nor	r5,zero,r3
10100f70:	01a02074 	movhi	r6,32897
10100f74:	19c7883a 	add	r3,r3,r7
10100f78:	31a02004 	addi	r6,r6,-32640
10100f7c:	1946703a 	and	r3,r3,r5
10100f80:	1986703a 	and	r3,r3,r6
10100f84:	1800091e 	bne	r3,zero,10100fac <strlen+0x78>
10100f88:	10800104 	addi	r2,r2,4
10100f8c:	10c00017 	ldw	r3,0(r2)
10100f90:	19cb883a 	add	r5,r3,r7
10100f94:	00c6303a 	nor	r3,zero,r3
10100f98:	28c6703a 	and	r3,r5,r3
10100f9c:	1986703a 	and	r3,r3,r6
10100fa0:	183ff926 	beq	r3,zero,10100f88 <__alt_data_end+0xfffe0f88>
10100fa4:	00000106 	br	10100fac <strlen+0x78>
10100fa8:	10800044 	addi	r2,r2,1
10100fac:	10c00007 	ldb	r3,0(r2)
10100fb0:	183ffd1e 	bne	r3,zero,10100fa8 <__alt_data_end+0xfffe0fa8>
10100fb4:	1105c83a 	sub	r2,r2,r4
10100fb8:	f800283a 	ret
10100fbc:	2005883a 	mov	r2,r4
10100fc0:	003fe706 	br	10100f60 <__alt_data_end+0xfffe0f60>
10100fc4:	0005883a 	mov	r2,zero
10100fc8:	f800283a 	ret

10100fcc <___vfprintf_internal_r>:
10100fcc:	deffb804 	addi	sp,sp,-288
10100fd0:	dfc04715 	stw	ra,284(sp)
10100fd4:	ddc04515 	stw	r23,276(sp)
10100fd8:	dd404315 	stw	r21,268(sp)
10100fdc:	d9002d15 	stw	r4,180(sp)
10100fe0:	282f883a 	mov	r23,r5
10100fe4:	302b883a 	mov	r21,r6
10100fe8:	d9c02e15 	stw	r7,184(sp)
10100fec:	df004615 	stw	fp,280(sp)
10100ff0:	dd804415 	stw	r22,272(sp)
10100ff4:	dd004215 	stw	r20,264(sp)
10100ff8:	dcc04115 	stw	r19,260(sp)
10100ffc:	dc804015 	stw	r18,256(sp)
10101000:	dc403f15 	stw	r17,252(sp)
10101004:	dc003e15 	stw	r16,248(sp)
10101008:	0105f0c0 	call	10105f0c <_localeconv_r>
1010100c:	10800017 	ldw	r2,0(r2)
10101010:	1009883a 	mov	r4,r2
10101014:	d8803415 	stw	r2,208(sp)
10101018:	0100f340 	call	10100f34 <strlen>
1010101c:	d8803715 	stw	r2,220(sp)
10101020:	d8802d17 	ldw	r2,180(sp)
10101024:	10000226 	beq	r2,zero,10101030 <___vfprintf_internal_r+0x64>
10101028:	10800e17 	ldw	r2,56(r2)
1010102c:	1000fb26 	beq	r2,zero,1010141c <___vfprintf_internal_r+0x450>
10101030:	b880030b 	ldhu	r2,12(r23)
10101034:	10c8000c 	andi	r3,r2,8192
10101038:	1800061e 	bne	r3,zero,10101054 <___vfprintf_internal_r+0x88>
1010103c:	b9001917 	ldw	r4,100(r23)
10101040:	00f7ffc4 	movi	r3,-8193
10101044:	10880014 	ori	r2,r2,8192
10101048:	20c6703a 	and	r3,r4,r3
1010104c:	b880030d 	sth	r2,12(r23)
10101050:	b8c01915 	stw	r3,100(r23)
10101054:	10c0020c 	andi	r3,r2,8
10101058:	1800c326 	beq	r3,zero,10101368 <___vfprintf_internal_r+0x39c>
1010105c:	b8c00417 	ldw	r3,16(r23)
10101060:	1800c126 	beq	r3,zero,10101368 <___vfprintf_internal_r+0x39c>
10101064:	1080068c 	andi	r2,r2,26
10101068:	00c00284 	movi	r3,10
1010106c:	10c0c626 	beq	r2,r3,10101388 <___vfprintf_internal_r+0x3bc>
10101070:	d8c00404 	addi	r3,sp,16
10101074:	05040474 	movhi	r20,4113
10101078:	d9001e04 	addi	r4,sp,120
1010107c:	a5019784 	addi	r20,r20,1630
10101080:	d8c01e15 	stw	r3,120(sp)
10101084:	d8002015 	stw	zero,128(sp)
10101088:	d8001f15 	stw	zero,124(sp)
1010108c:	d8003315 	stw	zero,204(sp)
10101090:	d8003615 	stw	zero,216(sp)
10101094:	d8003815 	stw	zero,224(sp)
10101098:	1811883a 	mov	r8,r3
1010109c:	d8003915 	stw	zero,228(sp)
101010a0:	d8003a15 	stw	zero,232(sp)
101010a4:	d8002f15 	stw	zero,188(sp)
101010a8:	d9002815 	stw	r4,160(sp)
101010ac:	a8800007 	ldb	r2,0(r21)
101010b0:	10028b26 	beq	r2,zero,10101ae0 <___vfprintf_internal_r+0xb14>
101010b4:	00c00944 	movi	r3,37
101010b8:	a823883a 	mov	r17,r21
101010bc:	10c0021e 	bne	r2,r3,101010c8 <___vfprintf_internal_r+0xfc>
101010c0:	00001406 	br	10101114 <___vfprintf_internal_r+0x148>
101010c4:	10c00326 	beq	r2,r3,101010d4 <___vfprintf_internal_r+0x108>
101010c8:	8c400044 	addi	r17,r17,1
101010cc:	88800007 	ldb	r2,0(r17)
101010d0:	103ffc1e 	bne	r2,zero,101010c4 <__alt_data_end+0xfffe10c4>
101010d4:	8d61c83a 	sub	r16,r17,r21
101010d8:	80000e26 	beq	r16,zero,10101114 <___vfprintf_internal_r+0x148>
101010dc:	d8c02017 	ldw	r3,128(sp)
101010e0:	d8801f17 	ldw	r2,124(sp)
101010e4:	45400015 	stw	r21,0(r8)
101010e8:	1c07883a 	add	r3,r3,r16
101010ec:	10800044 	addi	r2,r2,1
101010f0:	d8c02015 	stw	r3,128(sp)
101010f4:	44000115 	stw	r16,4(r8)
101010f8:	d8801f15 	stw	r2,124(sp)
101010fc:	00c001c4 	movi	r3,7
10101100:	1880a916 	blt	r3,r2,101013a8 <___vfprintf_internal_r+0x3dc>
10101104:	42000204 	addi	r8,r8,8
10101108:	d9402f17 	ldw	r5,188(sp)
1010110c:	2c0b883a 	add	r5,r5,r16
10101110:	d9402f15 	stw	r5,188(sp)
10101114:	88800007 	ldb	r2,0(r17)
10101118:	1000aa26 	beq	r2,zero,101013c4 <___vfprintf_internal_r+0x3f8>
1010111c:	8d400044 	addi	r21,r17,1
10101120:	8c400047 	ldb	r17,1(r17)
10101124:	0021883a 	mov	r16,zero
10101128:	00bfffc4 	movi	r2,-1
1010112c:	0025883a 	mov	r18,zero
10101130:	dc002905 	stb	r16,164(sp)
10101134:	d8002785 	stb	zero,158(sp)
10101138:	d8002b05 	stb	zero,172(sp)
1010113c:	d8802a15 	stw	r2,168(sp)
10101140:	d8003115 	stw	zero,196(sp)
10101144:	04c01604 	movi	r19,88
10101148:	05800244 	movi	r22,9
1010114c:	9021883a 	mov	r16,r18
10101150:	4039883a 	mov	fp,r8
10101154:	ad400044 	addi	r21,r21,1
10101158:	88bff804 	addi	r2,r17,-32
1010115c:	98833236 	bltu	r19,r2,10101e28 <___vfprintf_internal_r+0xe5c>
10101160:	100490ba 	slli	r2,r2,2
10101164:	00c40434 	movhi	r3,4112
10101168:	18c45e04 	addi	r3,r3,4472
1010116c:	10c5883a 	add	r2,r2,r3
10101170:	10800017 	ldw	r2,0(r2)
10101174:	1000683a 	jmp	r2
10101178:	10101d20 	cmpeqi	zero,r2,16500
1010117c:	10101e28 	cmpgeui	zero,r2,16504
10101180:	10101e28 	cmpgeui	zero,r2,16504
10101184:	10101d40 	call	110101d4 <__alt_data_end+0xef01d4>
10101188:	10101e28 	cmpgeui	zero,r2,16504
1010118c:	10101e28 	cmpgeui	zero,r2,16504
10101190:	10101e28 	cmpgeui	zero,r2,16504
10101194:	10101e28 	cmpgeui	zero,r2,16504
10101198:	10101e28 	cmpgeui	zero,r2,16504
1010119c:	10101e28 	cmpgeui	zero,r2,16504
101011a0:	10101428 	cmpgeui	zero,r2,16464
101011a4:	10101c30 	cmpltui	zero,r2,16496
101011a8:	10101e28 	cmpgeui	zero,r2,16504
101011ac:	101012ec 	andhi	zero,r2,16459
101011b0:	1010144c 	andi	zero,r2,16465
101011b4:	10101e28 	cmpgeui	zero,r2,16504
101011b8:	1010149c 	xori	zero,r2,16466
101011bc:	101014a8 	cmpgeui	zero,r2,16466
101011c0:	101014a8 	cmpgeui	zero,r2,16466
101011c4:	101014a8 	cmpgeui	zero,r2,16466
101011c8:	101014a8 	cmpgeui	zero,r2,16466
101011cc:	101014a8 	cmpgeui	zero,r2,16466
101011d0:	101014a8 	cmpgeui	zero,r2,16466
101011d4:	101014a8 	cmpgeui	zero,r2,16466
101011d8:	101014a8 	cmpgeui	zero,r2,16466
101011dc:	101014a8 	cmpgeui	zero,r2,16466
101011e0:	10101e28 	cmpgeui	zero,r2,16504
101011e4:	10101e28 	cmpgeui	zero,r2,16504
101011e8:	10101e28 	cmpgeui	zero,r2,16504
101011ec:	10101e28 	cmpgeui	zero,r2,16504
101011f0:	10101e28 	cmpgeui	zero,r2,16504
101011f4:	10101e28 	cmpgeui	zero,r2,16504
101011f8:	10101e28 	cmpgeui	zero,r2,16504
101011fc:	10101e28 	cmpgeui	zero,r2,16504
10101200:	10101e28 	cmpgeui	zero,r2,16504
10101204:	10101e28 	cmpgeui	zero,r2,16504
10101208:	101014e4 	muli	zero,r2,16467
1010120c:	101015ac 	andhi	zero,r2,16470
10101210:	10101e28 	cmpgeui	zero,r2,16504
10101214:	101015ac 	andhi	zero,r2,16470
10101218:	10101e28 	cmpgeui	zero,r2,16504
1010121c:	10101e28 	cmpgeui	zero,r2,16504
10101220:	10101e28 	cmpgeui	zero,r2,16504
10101224:	10101e28 	cmpgeui	zero,r2,16504
10101228:	10101658 	cmpnei	zero,r2,16473
1010122c:	10101e28 	cmpgeui	zero,r2,16504
10101230:	10101e28 	cmpgeui	zero,r2,16504
10101234:	10101664 	muli	zero,r2,16473
10101238:	10101e28 	cmpgeui	zero,r2,16504
1010123c:	10101e28 	cmpgeui	zero,r2,16504
10101240:	10101e28 	cmpgeui	zero,r2,16504
10101244:	10101e28 	cmpgeui	zero,r2,16504
10101248:	10101e28 	cmpgeui	zero,r2,16504
1010124c:	10101ae8 	cmpgeui	zero,r2,16491
10101250:	10101e28 	cmpgeui	zero,r2,16504
10101254:	10101e28 	cmpgeui	zero,r2,16504
10101258:	10101b54 	ori	zero,r2,16493
1010125c:	10101e28 	cmpgeui	zero,r2,16504
10101260:	10101e28 	cmpgeui	zero,r2,16504
10101264:	10101e28 	cmpgeui	zero,r2,16504
10101268:	10101e28 	cmpgeui	zero,r2,16504
1010126c:	10101e28 	cmpgeui	zero,r2,16504
10101270:	10101e28 	cmpgeui	zero,r2,16504
10101274:	10101e28 	cmpgeui	zero,r2,16504
10101278:	10101e28 	cmpgeui	zero,r2,16504
1010127c:	10101e28 	cmpgeui	zero,r2,16504
10101280:	10101e28 	cmpgeui	zero,r2,16504
10101284:	10101dcc 	andi	zero,r2,16503
10101288:	10101d4c 	andi	zero,r2,16501
1010128c:	101015ac 	andhi	zero,r2,16470
10101290:	101015ac 	andhi	zero,r2,16470
10101294:	101015ac 	andhi	zero,r2,16470
10101298:	10101d6c 	andhi	zero,r2,16501
1010129c:	10101d4c 	andi	zero,r2,16501
101012a0:	10101e28 	cmpgeui	zero,r2,16504
101012a4:	10101e28 	cmpgeui	zero,r2,16504
101012a8:	10101d78 	rdprs	zero,r2,16501
101012ac:	10101e28 	cmpgeui	zero,r2,16504
101012b0:	10101d8c 	andi	zero,r2,16502
101012b4:	10101c10 	cmplti	zero,r2,16496
101012b8:	101012f8 	rdprs	zero,r2,16459
101012bc:	10101c48 	cmpgei	zero,r2,16497
101012c0:	10101e28 	cmpgeui	zero,r2,16504
101012c4:	10101c54 	ori	zero,r2,16497
101012c8:	10101e28 	cmpgeui	zero,r2,16504
101012cc:	10101cb8 	rdprs	zero,r2,16498
101012d0:	10101e28 	cmpgeui	zero,r2,16504
101012d4:	10101e28 	cmpgeui	zero,r2,16504
101012d8:	10101cd8 	cmpnei	zero,r2,16499
101012dc:	d8c03117 	ldw	r3,196(sp)
101012e0:	d8802e15 	stw	r2,184(sp)
101012e4:	00c7c83a 	sub	r3,zero,r3
101012e8:	d8c03115 	stw	r3,196(sp)
101012ec:	84000114 	ori	r16,r16,4
101012f0:	ac400007 	ldb	r17,0(r21)
101012f4:	003f9706 	br	10101154 <__alt_data_end+0xfffe1154>
101012f8:	00800c04 	movi	r2,48
101012fc:	d8802705 	stb	r2,156(sp)
10101300:	00801e04 	movi	r2,120
10101304:	d8802745 	stb	r2,157(sp)
10101308:	d9002a17 	ldw	r4,168(sp)
1010130c:	d8802e17 	ldw	r2,184(sp)
10101310:	d8002785 	stb	zero,158(sp)
10101314:	e011883a 	mov	r8,fp
10101318:	10c00104 	addi	r3,r2,4
1010131c:	14c00017 	ldw	r19,0(r2)
10101320:	002d883a 	mov	r22,zero
10101324:	80800094 	ori	r2,r16,2
10101328:	2002ca16 	blt	r4,zero,10101e54 <___vfprintf_internal_r+0xe88>
1010132c:	00bfdfc4 	movi	r2,-129
10101330:	80a4703a 	and	r18,r16,r2
10101334:	d8c02e15 	stw	r3,184(sp)
10101338:	94800094 	ori	r18,r18,2
1010133c:	9802b41e 	bne	r19,zero,10101e10 <___vfprintf_internal_r+0xe44>
10101340:	01440474 	movhi	r5,4113
10101344:	29419004 	addi	r5,r5,1600
10101348:	d9403915 	stw	r5,228(sp)
1010134c:	04401e04 	movi	r17,120
10101350:	d8802a17 	ldw	r2,168(sp)
10101354:	0039883a 	mov	fp,zero
10101358:	1001fa26 	beq	r2,zero,10101b44 <___vfprintf_internal_r+0xb78>
1010135c:	0027883a 	mov	r19,zero
10101360:	002d883a 	mov	r22,zero
10101364:	00021906 	br	10101bcc <___vfprintf_internal_r+0xc00>
10101368:	d9002d17 	ldw	r4,180(sp)
1010136c:	b80b883a 	mov	r5,r23
10101370:	01033800 	call	10103380 <__swsetup_r>
10101374:	1005dc1e 	bne	r2,zero,10102ae8 <___vfprintf_internal_r+0x1b1c>
10101378:	b880030b 	ldhu	r2,12(r23)
1010137c:	00c00284 	movi	r3,10
10101380:	1080068c 	andi	r2,r2,26
10101384:	10ff3a1e 	bne	r2,r3,10101070 <__alt_data_end+0xfffe1070>
10101388:	b880038f 	ldh	r2,14(r23)
1010138c:	103f3816 	blt	r2,zero,10101070 <__alt_data_end+0xfffe1070>
10101390:	d9c02e17 	ldw	r7,184(sp)
10101394:	d9002d17 	ldw	r4,180(sp)
10101398:	a80d883a 	mov	r6,r21
1010139c:	b80b883a 	mov	r5,r23
101013a0:	01032c40 	call	101032c4 <__sbprintf>
101013a4:	00001106 	br	101013ec <___vfprintf_internal_r+0x420>
101013a8:	d9002d17 	ldw	r4,180(sp)
101013ac:	d9801e04 	addi	r6,sp,120
101013b0:	b80b883a 	mov	r5,r23
101013b4:	01086640 	call	10108664 <__sprint_r>
101013b8:	1000081e 	bne	r2,zero,101013dc <___vfprintf_internal_r+0x410>
101013bc:	da000404 	addi	r8,sp,16
101013c0:	003f5106 	br	10101108 <__alt_data_end+0xfffe1108>
101013c4:	d8802017 	ldw	r2,128(sp)
101013c8:	10000426 	beq	r2,zero,101013dc <___vfprintf_internal_r+0x410>
101013cc:	d9002d17 	ldw	r4,180(sp)
101013d0:	d9801e04 	addi	r6,sp,120
101013d4:	b80b883a 	mov	r5,r23
101013d8:	01086640 	call	10108664 <__sprint_r>
101013dc:	b880030b 	ldhu	r2,12(r23)
101013e0:	1080100c 	andi	r2,r2,64
101013e4:	1005c01e 	bne	r2,zero,10102ae8 <___vfprintf_internal_r+0x1b1c>
101013e8:	d8802f17 	ldw	r2,188(sp)
101013ec:	dfc04717 	ldw	ra,284(sp)
101013f0:	df004617 	ldw	fp,280(sp)
101013f4:	ddc04517 	ldw	r23,276(sp)
101013f8:	dd804417 	ldw	r22,272(sp)
101013fc:	dd404317 	ldw	r21,268(sp)
10101400:	dd004217 	ldw	r20,264(sp)
10101404:	dcc04117 	ldw	r19,260(sp)
10101408:	dc804017 	ldw	r18,256(sp)
1010140c:	dc403f17 	ldw	r17,252(sp)
10101410:	dc003e17 	ldw	r16,248(sp)
10101414:	dec04804 	addi	sp,sp,288
10101418:	f800283a 	ret
1010141c:	d9002d17 	ldw	r4,180(sp)
10101420:	010538c0 	call	1010538c <__sinit>
10101424:	003f0206 	br	10101030 <__alt_data_end+0xfffe1030>
10101428:	d9002e17 	ldw	r4,184(sp)
1010142c:	d9402e17 	ldw	r5,184(sp)
10101430:	21000017 	ldw	r4,0(r4)
10101434:	28800104 	addi	r2,r5,4
10101438:	d9003115 	stw	r4,196(sp)
1010143c:	203fa716 	blt	r4,zero,101012dc <__alt_data_end+0xfffe12dc>
10101440:	d8802e15 	stw	r2,184(sp)
10101444:	ac400007 	ldb	r17,0(r21)
10101448:	003f4206 	br	10101154 <__alt_data_end+0xfffe1154>
1010144c:	ac400007 	ldb	r17,0(r21)
10101450:	01000a84 	movi	r4,42
10101454:	a8c00044 	addi	r3,r21,1
10101458:	89075826 	beq	r17,r4,101031bc <___vfprintf_internal_r+0x21f0>
1010145c:	8cbff404 	addi	r18,r17,-48
10101460:	b486ae36 	bltu	r22,r18,10102f1c <___vfprintf_internal_r+0x1f50>
10101464:	0009883a 	mov	r4,zero
10101468:	1823883a 	mov	r17,r3
1010146c:	01400284 	movi	r5,10
10101470:	0100c840 	call	10100c84 <__mulsi3>
10101474:	88c00007 	ldb	r3,0(r17)
10101478:	1489883a 	add	r4,r2,r18
1010147c:	8d400044 	addi	r21,r17,1
10101480:	1cbff404 	addi	r18,r3,-48
10101484:	a823883a 	mov	r17,r21
10101488:	b4bff82e 	bgeu	r22,r18,1010146c <__alt_data_end+0xfffe146c>
1010148c:	1823883a 	mov	r17,r3
10101490:	2005f616 	blt	r4,zero,10102c6c <___vfprintf_internal_r+0x1ca0>
10101494:	d9002a15 	stw	r4,168(sp)
10101498:	003f2f06 	br	10101158 <__alt_data_end+0xfffe1158>
1010149c:	84002014 	ori	r16,r16,128
101014a0:	ac400007 	ldb	r17,0(r21)
101014a4:	003f2b06 	br	10101154 <__alt_data_end+0xfffe1154>
101014a8:	8cbff404 	addi	r18,r17,-48
101014ac:	d8003115 	stw	zero,196(sp)
101014b0:	0009883a 	mov	r4,zero
101014b4:	a823883a 	mov	r17,r21
101014b8:	01400284 	movi	r5,10
101014bc:	0100c840 	call	10100c84 <__mulsi3>
101014c0:	88c00007 	ldb	r3,0(r17)
101014c4:	9089883a 	add	r4,r18,r2
101014c8:	ad400044 	addi	r21,r21,1
101014cc:	1cbff404 	addi	r18,r3,-48
101014d0:	a823883a 	mov	r17,r21
101014d4:	b4bff82e 	bgeu	r22,r18,101014b8 <__alt_data_end+0xfffe14b8>
101014d8:	1823883a 	mov	r17,r3
101014dc:	d9003115 	stw	r4,196(sp)
101014e0:	003f1d06 	br	10101158 <__alt_data_end+0xfffe1158>
101014e4:	8025883a 	mov	r18,r16
101014e8:	dc002903 	ldbu	r16,164(sp)
101014ec:	e011883a 	mov	r8,fp
101014f0:	84003fcc 	andi	r16,r16,255
101014f4:	8007531e 	bne	r16,zero,10103244 <___vfprintf_internal_r+0x2278>
101014f8:	94800414 	ori	r18,r18,16
101014fc:	9080080c 	andi	r2,r18,32
10101500:	1003a326 	beq	r2,zero,10102390 <___vfprintf_internal_r+0x13c4>
10101504:	d9002e17 	ldw	r4,184(sp)
10101508:	20800117 	ldw	r2,4(r4)
1010150c:	24c00017 	ldw	r19,0(r4)
10101510:	21000204 	addi	r4,r4,8
10101514:	d9002e15 	stw	r4,184(sp)
10101518:	102d883a 	mov	r22,r2
1010151c:	10047316 	blt	r2,zero,101026ec <___vfprintf_internal_r+0x1720>
10101520:	d9002a17 	ldw	r4,168(sp)
10101524:	df002783 	ldbu	fp,158(sp)
10101528:	2003e416 	blt	r4,zero,101024bc <___vfprintf_internal_r+0x14f0>
1010152c:	00ffdfc4 	movi	r3,-129
10101530:	9d84b03a 	or	r2,r19,r22
10101534:	90e4703a 	and	r18,r18,r3
10101538:	10018026 	beq	r2,zero,10101b3c <___vfprintf_internal_r+0xb70>
1010153c:	b003ab26 	beq	r22,zero,101023ec <___vfprintf_internal_r+0x1420>
10101540:	dc402915 	stw	r17,164(sp)
10101544:	dc001e04 	addi	r16,sp,120
10101548:	b023883a 	mov	r17,r22
1010154c:	402d883a 	mov	r22,r8
10101550:	9809883a 	mov	r4,r19
10101554:	880b883a 	mov	r5,r17
10101558:	01800284 	movi	r6,10
1010155c:	000f883a 	mov	r7,zero
10101560:	010aba80 	call	1010aba8 <__umoddi3>
10101564:	10800c04 	addi	r2,r2,48
10101568:	843fffc4 	addi	r16,r16,-1
1010156c:	9809883a 	mov	r4,r19
10101570:	880b883a 	mov	r5,r17
10101574:	80800005 	stb	r2,0(r16)
10101578:	01800284 	movi	r6,10
1010157c:	000f883a 	mov	r7,zero
10101580:	010a5ac0 	call	1010a5ac <__udivdi3>
10101584:	1027883a 	mov	r19,r2
10101588:	10c4b03a 	or	r2,r2,r3
1010158c:	1823883a 	mov	r17,r3
10101590:	103fef1e 	bne	r2,zero,10101550 <__alt_data_end+0xfffe1550>
10101594:	d8c02817 	ldw	r3,160(sp)
10101598:	dc402917 	ldw	r17,164(sp)
1010159c:	b011883a 	mov	r8,r22
101015a0:	1c07c83a 	sub	r3,r3,r16
101015a4:	d8c02b15 	stw	r3,172(sp)
101015a8:	00005f06 	br	10101728 <___vfprintf_internal_r+0x75c>
101015ac:	8025883a 	mov	r18,r16
101015b0:	dc002903 	ldbu	r16,164(sp)
101015b4:	e011883a 	mov	r8,fp
101015b8:	84003fcc 	andi	r16,r16,255
101015bc:	80071e1e 	bne	r16,zero,10103238 <___vfprintf_internal_r+0x226c>
101015c0:	9080020c 	andi	r2,r18,8
101015c4:	1004af26 	beq	r2,zero,10102884 <___vfprintf_internal_r+0x18b8>
101015c8:	d9002e17 	ldw	r4,184(sp)
101015cc:	d9402e17 	ldw	r5,184(sp)
101015d0:	d8802e17 	ldw	r2,184(sp)
101015d4:	21000017 	ldw	r4,0(r4)
101015d8:	29400117 	ldw	r5,4(r5)
101015dc:	10800204 	addi	r2,r2,8
101015e0:	d9003615 	stw	r4,216(sp)
101015e4:	d9403815 	stw	r5,224(sp)
101015e8:	d8802e15 	stw	r2,184(sp)
101015ec:	d9003617 	ldw	r4,216(sp)
101015f0:	d9403817 	ldw	r5,224(sp)
101015f4:	da003d15 	stw	r8,244(sp)
101015f8:	04000044 	movi	r16,1
101015fc:	01082880 	call	10108288 <__fpclassifyd>
10101600:	da003d17 	ldw	r8,244(sp)
10101604:	1404441e 	bne	r2,r16,10102718 <___vfprintf_internal_r+0x174c>
10101608:	d9003617 	ldw	r4,216(sp)
1010160c:	d9403817 	ldw	r5,224(sp)
10101610:	000d883a 	mov	r6,zero
10101614:	000f883a 	mov	r7,zero
10101618:	010c54c0 	call	1010c54c <__ledf2>
1010161c:	da003d17 	ldw	r8,244(sp)
10101620:	1005e316 	blt	r2,zero,10102db0 <___vfprintf_internal_r+0x1de4>
10101624:	df002783 	ldbu	fp,158(sp)
10101628:	008011c4 	movi	r2,71
1010162c:	1445580e 	bge	r2,r17,10102b90 <___vfprintf_internal_r+0x1bc4>
10101630:	04040474 	movhi	r16,4113
10101634:	84018804 	addi	r16,r16,1568
10101638:	00c000c4 	movi	r3,3
1010163c:	00bfdfc4 	movi	r2,-129
10101640:	d8c02915 	stw	r3,164(sp)
10101644:	90a4703a 	and	r18,r18,r2
10101648:	d8c02b15 	stw	r3,172(sp)
1010164c:	d8002a15 	stw	zero,168(sp)
10101650:	d8003215 	stw	zero,200(sp)
10101654:	00003a06 	br	10101740 <___vfprintf_internal_r+0x774>
10101658:	84000214 	ori	r16,r16,8
1010165c:	ac400007 	ldb	r17,0(r21)
10101660:	003ebc06 	br	10101154 <__alt_data_end+0xfffe1154>
10101664:	8025883a 	mov	r18,r16
10101668:	dc002903 	ldbu	r16,164(sp)
1010166c:	e011883a 	mov	r8,fp
10101670:	84003fcc 	andi	r16,r16,255
10101674:	8007001e 	bne	r16,zero,10103278 <___vfprintf_internal_r+0x22ac>
10101678:	94800414 	ori	r18,r18,16
1010167c:	9080080c 	andi	r2,r18,32
10101680:	1002fa26 	beq	r2,zero,1010226c <___vfprintf_internal_r+0x12a0>
10101684:	d9002e17 	ldw	r4,184(sp)
10101688:	d9402a17 	ldw	r5,168(sp)
1010168c:	d8002785 	stb	zero,158(sp)
10101690:	20800204 	addi	r2,r4,8
10101694:	24c00017 	ldw	r19,0(r4)
10101698:	25800117 	ldw	r22,4(r4)
1010169c:	2804b116 	blt	r5,zero,10102964 <___vfprintf_internal_r+0x1998>
101016a0:	013fdfc4 	movi	r4,-129
101016a4:	9d86b03a 	or	r3,r19,r22
101016a8:	d8802e15 	stw	r2,184(sp)
101016ac:	9124703a 	and	r18,r18,r4
101016b0:	1802fb1e 	bne	r3,zero,101022a0 <___vfprintf_internal_r+0x12d4>
101016b4:	d8c02a17 	ldw	r3,168(sp)
101016b8:	0039883a 	mov	fp,zero
101016bc:	1805e526 	beq	r3,zero,10102e54 <___vfprintf_internal_r+0x1e88>
101016c0:	0027883a 	mov	r19,zero
101016c4:	002d883a 	mov	r22,zero
101016c8:	dc001e04 	addi	r16,sp,120
101016cc:	9806d0fa 	srli	r3,r19,3
101016d0:	b008977a 	slli	r4,r22,29
101016d4:	b02cd0fa 	srli	r22,r22,3
101016d8:	9cc001cc 	andi	r19,r19,7
101016dc:	98800c04 	addi	r2,r19,48
101016e0:	843fffc4 	addi	r16,r16,-1
101016e4:	20e6b03a 	or	r19,r4,r3
101016e8:	80800005 	stb	r2,0(r16)
101016ec:	9d86b03a 	or	r3,r19,r22
101016f0:	183ff61e 	bne	r3,zero,101016cc <__alt_data_end+0xfffe16cc>
101016f4:	90c0004c 	andi	r3,r18,1
101016f8:	18014126 	beq	r3,zero,10101c00 <___vfprintf_internal_r+0xc34>
101016fc:	10803fcc 	andi	r2,r2,255
10101700:	1080201c 	xori	r2,r2,128
10101704:	10bfe004 	addi	r2,r2,-128
10101708:	00c00c04 	movi	r3,48
1010170c:	10c13c26 	beq	r2,r3,10101c00 <___vfprintf_internal_r+0xc34>
10101710:	80ffffc5 	stb	r3,-1(r16)
10101714:	d8c02817 	ldw	r3,160(sp)
10101718:	80bfffc4 	addi	r2,r16,-1
1010171c:	1021883a 	mov	r16,r2
10101720:	1887c83a 	sub	r3,r3,r2
10101724:	d8c02b15 	stw	r3,172(sp)
10101728:	d8802b17 	ldw	r2,172(sp)
1010172c:	d9002a17 	ldw	r4,168(sp)
10101730:	1100010e 	bge	r2,r4,10101738 <___vfprintf_internal_r+0x76c>
10101734:	2005883a 	mov	r2,r4
10101738:	d8802915 	stw	r2,164(sp)
1010173c:	d8003215 	stw	zero,200(sp)
10101740:	e7003fcc 	andi	fp,fp,255
10101744:	e700201c 	xori	fp,fp,128
10101748:	e73fe004 	addi	fp,fp,-128
1010174c:	e0000326 	beq	fp,zero,1010175c <___vfprintf_internal_r+0x790>
10101750:	d8c02917 	ldw	r3,164(sp)
10101754:	18c00044 	addi	r3,r3,1
10101758:	d8c02915 	stw	r3,164(sp)
1010175c:	90c0008c 	andi	r3,r18,2
10101760:	d8c02c15 	stw	r3,176(sp)
10101764:	18000326 	beq	r3,zero,10101774 <___vfprintf_internal_r+0x7a8>
10101768:	d8c02917 	ldw	r3,164(sp)
1010176c:	18c00084 	addi	r3,r3,2
10101770:	d8c02915 	stw	r3,164(sp)
10101774:	90c0210c 	andi	r3,r18,132
10101778:	d8c03015 	stw	r3,192(sp)
1010177c:	1801c51e 	bne	r3,zero,10101e94 <___vfprintf_internal_r+0xec8>
10101780:	d9003117 	ldw	r4,196(sp)
10101784:	d8c02917 	ldw	r3,164(sp)
10101788:	20e7c83a 	sub	r19,r4,r3
1010178c:	04c1c10e 	bge	zero,r19,10101e94 <___vfprintf_internal_r+0xec8>
10101790:	02400404 	movi	r9,16
10101794:	d8c02017 	ldw	r3,128(sp)
10101798:	d8801f17 	ldw	r2,124(sp)
1010179c:	4cc52f0e 	bge	r9,r19,10102c5c <___vfprintf_internal_r+0x1c90>
101017a0:	01440474 	movhi	r5,4113
101017a4:	29419b84 	addi	r5,r5,1646
101017a8:	dc403b15 	stw	r17,236(sp)
101017ac:	d9403515 	stw	r5,212(sp)
101017b0:	9823883a 	mov	r17,r19
101017b4:	482d883a 	mov	r22,r9
101017b8:	9027883a 	mov	r19,r18
101017bc:	070001c4 	movi	fp,7
101017c0:	8025883a 	mov	r18,r16
101017c4:	dc002d17 	ldw	r16,180(sp)
101017c8:	00000306 	br	101017d8 <___vfprintf_internal_r+0x80c>
101017cc:	8c7ffc04 	addi	r17,r17,-16
101017d0:	42000204 	addi	r8,r8,8
101017d4:	b440130e 	bge	r22,r17,10101824 <___vfprintf_internal_r+0x858>
101017d8:	01040474 	movhi	r4,4113
101017dc:	18c00404 	addi	r3,r3,16
101017e0:	10800044 	addi	r2,r2,1
101017e4:	21019b84 	addi	r4,r4,1646
101017e8:	41000015 	stw	r4,0(r8)
101017ec:	45800115 	stw	r22,4(r8)
101017f0:	d8c02015 	stw	r3,128(sp)
101017f4:	d8801f15 	stw	r2,124(sp)
101017f8:	e0bff40e 	bge	fp,r2,101017cc <__alt_data_end+0xfffe17cc>
101017fc:	d9801e04 	addi	r6,sp,120
10101800:	b80b883a 	mov	r5,r23
10101804:	8009883a 	mov	r4,r16
10101808:	01086640 	call	10108664 <__sprint_r>
1010180c:	103ef31e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10101810:	8c7ffc04 	addi	r17,r17,-16
10101814:	d8c02017 	ldw	r3,128(sp)
10101818:	d8801f17 	ldw	r2,124(sp)
1010181c:	da000404 	addi	r8,sp,16
10101820:	b47fed16 	blt	r22,r17,101017d8 <__alt_data_end+0xfffe17d8>
10101824:	9021883a 	mov	r16,r18
10101828:	9825883a 	mov	r18,r19
1010182c:	8827883a 	mov	r19,r17
10101830:	dc403b17 	ldw	r17,236(sp)
10101834:	d9403517 	ldw	r5,212(sp)
10101838:	98c7883a 	add	r3,r19,r3
1010183c:	10800044 	addi	r2,r2,1
10101840:	41400015 	stw	r5,0(r8)
10101844:	44c00115 	stw	r19,4(r8)
10101848:	d8c02015 	stw	r3,128(sp)
1010184c:	d8801f15 	stw	r2,124(sp)
10101850:	010001c4 	movi	r4,7
10101854:	2082c516 	blt	r4,r2,1010236c <___vfprintf_internal_r+0x13a0>
10101858:	df002787 	ldb	fp,158(sp)
1010185c:	42000204 	addi	r8,r8,8
10101860:	e0000c26 	beq	fp,zero,10101894 <___vfprintf_internal_r+0x8c8>
10101864:	d8801f17 	ldw	r2,124(sp)
10101868:	d9002784 	addi	r4,sp,158
1010186c:	18c00044 	addi	r3,r3,1
10101870:	10800044 	addi	r2,r2,1
10101874:	41000015 	stw	r4,0(r8)
10101878:	01000044 	movi	r4,1
1010187c:	41000115 	stw	r4,4(r8)
10101880:	d8c02015 	stw	r3,128(sp)
10101884:	d8801f15 	stw	r2,124(sp)
10101888:	010001c4 	movi	r4,7
1010188c:	20825e16 	blt	r4,r2,10102208 <___vfprintf_internal_r+0x123c>
10101890:	42000204 	addi	r8,r8,8
10101894:	d8802c17 	ldw	r2,176(sp)
10101898:	10000c26 	beq	r2,zero,101018cc <___vfprintf_internal_r+0x900>
1010189c:	d8801f17 	ldw	r2,124(sp)
101018a0:	d9002704 	addi	r4,sp,156
101018a4:	18c00084 	addi	r3,r3,2
101018a8:	10800044 	addi	r2,r2,1
101018ac:	41000015 	stw	r4,0(r8)
101018b0:	01000084 	movi	r4,2
101018b4:	41000115 	stw	r4,4(r8)
101018b8:	d8c02015 	stw	r3,128(sp)
101018bc:	d8801f15 	stw	r2,124(sp)
101018c0:	010001c4 	movi	r4,7
101018c4:	20825816 	blt	r4,r2,10102228 <___vfprintf_internal_r+0x125c>
101018c8:	42000204 	addi	r8,r8,8
101018cc:	d9003017 	ldw	r4,192(sp)
101018d0:	00802004 	movi	r2,128
101018d4:	2081bb26 	beq	r4,r2,10101fc4 <___vfprintf_internal_r+0xff8>
101018d8:	d9402a17 	ldw	r5,168(sp)
101018dc:	d8802b17 	ldw	r2,172(sp)
101018e0:	28adc83a 	sub	r22,r5,r2
101018e4:	0580310e 	bge	zero,r22,101019ac <___vfprintf_internal_r+0x9e0>
101018e8:	07000404 	movi	fp,16
101018ec:	d8801f17 	ldw	r2,124(sp)
101018f0:	e584360e 	bge	fp,r22,101029cc <___vfprintf_internal_r+0x1a00>
101018f4:	01440474 	movhi	r5,4113
101018f8:	29419784 	addi	r5,r5,1630
101018fc:	dc402a15 	stw	r17,168(sp)
10101900:	d9402c15 	stw	r5,176(sp)
10101904:	b023883a 	mov	r17,r22
10101908:	04c001c4 	movi	r19,7
1010190c:	a82d883a 	mov	r22,r21
10101910:	902b883a 	mov	r21,r18
10101914:	8025883a 	mov	r18,r16
10101918:	dc002d17 	ldw	r16,180(sp)
1010191c:	00000306 	br	1010192c <___vfprintf_internal_r+0x960>
10101920:	8c7ffc04 	addi	r17,r17,-16
10101924:	42000204 	addi	r8,r8,8
10101928:	e440110e 	bge	fp,r17,10101970 <___vfprintf_internal_r+0x9a4>
1010192c:	18c00404 	addi	r3,r3,16
10101930:	10800044 	addi	r2,r2,1
10101934:	45000015 	stw	r20,0(r8)
10101938:	47000115 	stw	fp,4(r8)
1010193c:	d8c02015 	stw	r3,128(sp)
10101940:	d8801f15 	stw	r2,124(sp)
10101944:	98bff60e 	bge	r19,r2,10101920 <__alt_data_end+0xfffe1920>
10101948:	d9801e04 	addi	r6,sp,120
1010194c:	b80b883a 	mov	r5,r23
10101950:	8009883a 	mov	r4,r16
10101954:	01086640 	call	10108664 <__sprint_r>
10101958:	103ea01e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
1010195c:	8c7ffc04 	addi	r17,r17,-16
10101960:	d8c02017 	ldw	r3,128(sp)
10101964:	d8801f17 	ldw	r2,124(sp)
10101968:	da000404 	addi	r8,sp,16
1010196c:	e47fef16 	blt	fp,r17,1010192c <__alt_data_end+0xfffe192c>
10101970:	9021883a 	mov	r16,r18
10101974:	a825883a 	mov	r18,r21
10101978:	b02b883a 	mov	r21,r22
1010197c:	882d883a 	mov	r22,r17
10101980:	dc402a17 	ldw	r17,168(sp)
10101984:	d9002c17 	ldw	r4,176(sp)
10101988:	1d87883a 	add	r3,r3,r22
1010198c:	10800044 	addi	r2,r2,1
10101990:	41000015 	stw	r4,0(r8)
10101994:	45800115 	stw	r22,4(r8)
10101998:	d8c02015 	stw	r3,128(sp)
1010199c:	d8801f15 	stw	r2,124(sp)
101019a0:	010001c4 	movi	r4,7
101019a4:	20821016 	blt	r4,r2,101021e8 <___vfprintf_internal_r+0x121c>
101019a8:	42000204 	addi	r8,r8,8
101019ac:	9080400c 	andi	r2,r18,256
101019b0:	10013a1e 	bne	r2,zero,10101e9c <___vfprintf_internal_r+0xed0>
101019b4:	d9402b17 	ldw	r5,172(sp)
101019b8:	d8801f17 	ldw	r2,124(sp)
101019bc:	44000015 	stw	r16,0(r8)
101019c0:	1947883a 	add	r3,r3,r5
101019c4:	10800044 	addi	r2,r2,1
101019c8:	41400115 	stw	r5,4(r8)
101019cc:	d8c02015 	stw	r3,128(sp)
101019d0:	d8801f15 	stw	r2,124(sp)
101019d4:	010001c4 	movi	r4,7
101019d8:	2081f516 	blt	r4,r2,101021b0 <___vfprintf_internal_r+0x11e4>
101019dc:	42000204 	addi	r8,r8,8
101019e0:	9480010c 	andi	r18,r18,4
101019e4:	90003226 	beq	r18,zero,10101ab0 <___vfprintf_internal_r+0xae4>
101019e8:	d9403117 	ldw	r5,196(sp)
101019ec:	d8802917 	ldw	r2,164(sp)
101019f0:	28a1c83a 	sub	r16,r5,r2
101019f4:	04002e0e 	bge	zero,r16,10101ab0 <___vfprintf_internal_r+0xae4>
101019f8:	04400404 	movi	r17,16
101019fc:	d8801f17 	ldw	r2,124(sp)
10101a00:	8c04c40e 	bge	r17,r16,10102d14 <___vfprintf_internal_r+0x1d48>
10101a04:	01440474 	movhi	r5,4113
10101a08:	29419b84 	addi	r5,r5,1646
10101a0c:	d9403515 	stw	r5,212(sp)
10101a10:	048001c4 	movi	r18,7
10101a14:	dcc02d17 	ldw	r19,180(sp)
10101a18:	00000306 	br	10101a28 <___vfprintf_internal_r+0xa5c>
10101a1c:	843ffc04 	addi	r16,r16,-16
10101a20:	42000204 	addi	r8,r8,8
10101a24:	8c00130e 	bge	r17,r16,10101a74 <___vfprintf_internal_r+0xaa8>
10101a28:	01040474 	movhi	r4,4113
10101a2c:	18c00404 	addi	r3,r3,16
10101a30:	10800044 	addi	r2,r2,1
10101a34:	21019b84 	addi	r4,r4,1646
10101a38:	41000015 	stw	r4,0(r8)
10101a3c:	44400115 	stw	r17,4(r8)
10101a40:	d8c02015 	stw	r3,128(sp)
10101a44:	d8801f15 	stw	r2,124(sp)
10101a48:	90bff40e 	bge	r18,r2,10101a1c <__alt_data_end+0xfffe1a1c>
10101a4c:	d9801e04 	addi	r6,sp,120
10101a50:	b80b883a 	mov	r5,r23
10101a54:	9809883a 	mov	r4,r19
10101a58:	01086640 	call	10108664 <__sprint_r>
10101a5c:	103e5f1e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10101a60:	843ffc04 	addi	r16,r16,-16
10101a64:	d8c02017 	ldw	r3,128(sp)
10101a68:	d8801f17 	ldw	r2,124(sp)
10101a6c:	da000404 	addi	r8,sp,16
10101a70:	8c3fed16 	blt	r17,r16,10101a28 <__alt_data_end+0xfffe1a28>
10101a74:	d9403517 	ldw	r5,212(sp)
10101a78:	1c07883a 	add	r3,r3,r16
10101a7c:	10800044 	addi	r2,r2,1
10101a80:	41400015 	stw	r5,0(r8)
10101a84:	44000115 	stw	r16,4(r8)
10101a88:	d8c02015 	stw	r3,128(sp)
10101a8c:	d8801f15 	stw	r2,124(sp)
10101a90:	010001c4 	movi	r4,7
10101a94:	2080060e 	bge	r4,r2,10101ab0 <___vfprintf_internal_r+0xae4>
10101a98:	d9002d17 	ldw	r4,180(sp)
10101a9c:	d9801e04 	addi	r6,sp,120
10101aa0:	b80b883a 	mov	r5,r23
10101aa4:	01086640 	call	10108664 <__sprint_r>
10101aa8:	103e4c1e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10101aac:	d8c02017 	ldw	r3,128(sp)
10101ab0:	d8803117 	ldw	r2,196(sp)
10101ab4:	d9002917 	ldw	r4,164(sp)
10101ab8:	1100010e 	bge	r2,r4,10101ac0 <___vfprintf_internal_r+0xaf4>
10101abc:	2005883a 	mov	r2,r4
10101ac0:	d9402f17 	ldw	r5,188(sp)
10101ac4:	288b883a 	add	r5,r5,r2
10101ac8:	d9402f15 	stw	r5,188(sp)
10101acc:	1801c01e 	bne	r3,zero,101021d0 <___vfprintf_internal_r+0x1204>
10101ad0:	a8800007 	ldb	r2,0(r21)
10101ad4:	d8001f15 	stw	zero,124(sp)
10101ad8:	da000404 	addi	r8,sp,16
10101adc:	103d751e 	bne	r2,zero,101010b4 <__alt_data_end+0xfffe10b4>
10101ae0:	a823883a 	mov	r17,r21
10101ae4:	003d8b06 	br	10101114 <__alt_data_end+0xfffe1114>
10101ae8:	8025883a 	mov	r18,r16
10101aec:	dc002903 	ldbu	r16,164(sp)
10101af0:	e011883a 	mov	r8,fp
10101af4:	84003fcc 	andi	r16,r16,255
10101af8:	8005e51e 	bne	r16,zero,10103290 <___vfprintf_internal_r+0x22c4>
10101afc:	94800414 	ori	r18,r18,16
10101b00:	9080080c 	andi	r2,r18,32
10101b04:	10022b26 	beq	r2,zero,101023b4 <___vfprintf_internal_r+0x13e8>
10101b08:	d9002e17 	ldw	r4,184(sp)
10101b0c:	d9402a17 	ldw	r5,168(sp)
10101b10:	d8002785 	stb	zero,158(sp)
10101b14:	20c00204 	addi	r3,r4,8
10101b18:	24c00017 	ldw	r19,0(r4)
10101b1c:	25800117 	ldw	r22,4(r4)
10101b20:	28042e16 	blt	r5,zero,10102bdc <___vfprintf_internal_r+0x1c10>
10101b24:	013fdfc4 	movi	r4,-129
10101b28:	9d84b03a 	or	r2,r19,r22
10101b2c:	d8c02e15 	stw	r3,184(sp)
10101b30:	9124703a 	and	r18,r18,r4
10101b34:	0039883a 	mov	fp,zero
10101b38:	103e801e 	bne	r2,zero,1010153c <__alt_data_end+0xfffe153c>
10101b3c:	d9002a17 	ldw	r4,168(sp)
10101b40:	2002e01e 	bne	r4,zero,101026c4 <___vfprintf_internal_r+0x16f8>
10101b44:	d8002a15 	stw	zero,168(sp)
10101b48:	d8002b15 	stw	zero,172(sp)
10101b4c:	dc001e04 	addi	r16,sp,120
10101b50:	003ef506 	br	10101728 <__alt_data_end+0xfffe1728>
10101b54:	8025883a 	mov	r18,r16
10101b58:	dc002903 	ldbu	r16,164(sp)
10101b5c:	e011883a 	mov	r8,fp
10101b60:	84003fcc 	andi	r16,r16,255
10101b64:	8005ba1e 	bne	r16,zero,10103250 <___vfprintf_internal_r+0x2284>
10101b68:	01040474 	movhi	r4,4113
10101b6c:	21018b04 	addi	r4,r4,1580
10101b70:	d9003915 	stw	r4,228(sp)
10101b74:	9080080c 	andi	r2,r18,32
10101b78:	10006126 	beq	r2,zero,10101d00 <___vfprintf_internal_r+0xd34>
10101b7c:	d9402e17 	ldw	r5,184(sp)
10101b80:	2cc00017 	ldw	r19,0(r5)
10101b84:	2d800117 	ldw	r22,4(r5)
10101b88:	29400204 	addi	r5,r5,8
10101b8c:	d9402e15 	stw	r5,184(sp)
10101b90:	9080004c 	andi	r2,r18,1
10101b94:	1001ac26 	beq	r2,zero,10102248 <___vfprintf_internal_r+0x127c>
10101b98:	9d84b03a 	or	r2,r19,r22
10101b9c:	10038526 	beq	r2,zero,101029b4 <___vfprintf_internal_r+0x19e8>
10101ba0:	d8c02a17 	ldw	r3,168(sp)
10101ba4:	00800c04 	movi	r2,48
10101ba8:	d8802705 	stb	r2,156(sp)
10101bac:	dc402745 	stb	r17,157(sp)
10101bb0:	d8002785 	stb	zero,158(sp)
10101bb4:	90800094 	ori	r2,r18,2
10101bb8:	18047916 	blt	r3,zero,10102da0 <___vfprintf_internal_r+0x1dd4>
10101bbc:	00bfdfc4 	movi	r2,-129
10101bc0:	90a4703a 	and	r18,r18,r2
10101bc4:	94800094 	ori	r18,r18,2
10101bc8:	0039883a 	mov	fp,zero
10101bcc:	d9003917 	ldw	r4,228(sp)
10101bd0:	dc001e04 	addi	r16,sp,120
10101bd4:	988003cc 	andi	r2,r19,15
10101bd8:	b006973a 	slli	r3,r22,28
10101bdc:	2085883a 	add	r2,r4,r2
10101be0:	9826d13a 	srli	r19,r19,4
10101be4:	10800003 	ldbu	r2,0(r2)
10101be8:	b02cd13a 	srli	r22,r22,4
10101bec:	843fffc4 	addi	r16,r16,-1
10101bf0:	1ce6b03a 	or	r19,r3,r19
10101bf4:	80800005 	stb	r2,0(r16)
10101bf8:	9d84b03a 	or	r2,r19,r22
10101bfc:	103ff51e 	bne	r2,zero,10101bd4 <__alt_data_end+0xfffe1bd4>
10101c00:	d8c02817 	ldw	r3,160(sp)
10101c04:	1c07c83a 	sub	r3,r3,r16
10101c08:	d8c02b15 	stw	r3,172(sp)
10101c0c:	003ec606 	br	10101728 <__alt_data_end+0xfffe1728>
10101c10:	8025883a 	mov	r18,r16
10101c14:	dc002903 	ldbu	r16,164(sp)
10101c18:	e011883a 	mov	r8,fp
10101c1c:	84003fcc 	andi	r16,r16,255
10101c20:	803e9626 	beq	r16,zero,1010167c <__alt_data_end+0xfffe167c>
10101c24:	d8c02b03 	ldbu	r3,172(sp)
10101c28:	d8c02785 	stb	r3,158(sp)
10101c2c:	003e9306 	br	1010167c <__alt_data_end+0xfffe167c>
10101c30:	00c00044 	movi	r3,1
10101c34:	d8c02905 	stb	r3,164(sp)
10101c38:	00c00ac4 	movi	r3,43
10101c3c:	d8c02b05 	stb	r3,172(sp)
10101c40:	ac400007 	ldb	r17,0(r21)
10101c44:	003d4306 	br	10101154 <__alt_data_end+0xfffe1154>
10101c48:	84000814 	ori	r16,r16,32
10101c4c:	ac400007 	ldb	r17,0(r21)
10101c50:	003d4006 	br	10101154 <__alt_data_end+0xfffe1154>
10101c54:	d8802e17 	ldw	r2,184(sp)
10101c58:	8025883a 	mov	r18,r16
10101c5c:	d8002785 	stb	zero,158(sp)
10101c60:	14000017 	ldw	r16,0(r2)
10101c64:	e011883a 	mov	r8,fp
10101c68:	14c00104 	addi	r19,r2,4
10101c6c:	80042d26 	beq	r16,zero,10102d24 <___vfprintf_internal_r+0x1d58>
10101c70:	d8c02a17 	ldw	r3,168(sp)
10101c74:	1803e416 	blt	r3,zero,10102c08 <___vfprintf_internal_r+0x1c3c>
10101c78:	180d883a 	mov	r6,r3
10101c7c:	000b883a 	mov	r5,zero
10101c80:	8009883a 	mov	r4,r16
10101c84:	df003d15 	stw	fp,244(sp)
10101c88:	01069040 	call	10106904 <memchr>
10101c8c:	da003d17 	ldw	r8,244(sp)
10101c90:	10046826 	beq	r2,zero,10102e34 <___vfprintf_internal_r+0x1e68>
10101c94:	1405c83a 	sub	r2,r2,r16
10101c98:	d8802b15 	stw	r2,172(sp)
10101c9c:	1003e016 	blt	r2,zero,10102c20 <___vfprintf_internal_r+0x1c54>
10101ca0:	df002783 	ldbu	fp,158(sp)
10101ca4:	d8802915 	stw	r2,164(sp)
10101ca8:	dcc02e15 	stw	r19,184(sp)
10101cac:	d8002a15 	stw	zero,168(sp)
10101cb0:	d8003215 	stw	zero,200(sp)
10101cb4:	003ea206 	br	10101740 <__alt_data_end+0xfffe1740>
10101cb8:	8025883a 	mov	r18,r16
10101cbc:	dc002903 	ldbu	r16,164(sp)
10101cc0:	e011883a 	mov	r8,fp
10101cc4:	84003fcc 	andi	r16,r16,255
10101cc8:	803f8d26 	beq	r16,zero,10101b00 <__alt_data_end+0xfffe1b00>
10101ccc:	d8c02b03 	ldbu	r3,172(sp)
10101cd0:	d8c02785 	stb	r3,158(sp)
10101cd4:	003f8a06 	br	10101b00 <__alt_data_end+0xfffe1b00>
10101cd8:	8025883a 	mov	r18,r16
10101cdc:	dc002903 	ldbu	r16,164(sp)
10101ce0:	e011883a 	mov	r8,fp
10101ce4:	84003fcc 	andi	r16,r16,255
10101ce8:	8005661e 	bne	r16,zero,10103284 <___vfprintf_internal_r+0x22b8>
10101cec:	01040474 	movhi	r4,4113
10101cf0:	21019004 	addi	r4,r4,1600
10101cf4:	d9003915 	stw	r4,228(sp)
10101cf8:	9080080c 	andi	r2,r18,32
10101cfc:	103f9f1e 	bne	r2,zero,10101b7c <__alt_data_end+0xfffe1b7c>
10101d00:	9080040c 	andi	r2,r18,16
10101d04:	1002eb26 	beq	r2,zero,101028b4 <___vfprintf_internal_r+0x18e8>
10101d08:	d8802e17 	ldw	r2,184(sp)
10101d0c:	002d883a 	mov	r22,zero
10101d10:	14c00017 	ldw	r19,0(r2)
10101d14:	10800104 	addi	r2,r2,4
10101d18:	d8802e15 	stw	r2,184(sp)
10101d1c:	003f9c06 	br	10101b90 <__alt_data_end+0xfffe1b90>
10101d20:	d8802b07 	ldb	r2,172(sp)
10101d24:	1002e11e 	bne	r2,zero,101028ac <___vfprintf_internal_r+0x18e0>
10101d28:	00c00044 	movi	r3,1
10101d2c:	d8c02905 	stb	r3,164(sp)
10101d30:	00c00804 	movi	r3,32
10101d34:	d8c02b05 	stb	r3,172(sp)
10101d38:	ac400007 	ldb	r17,0(r21)
10101d3c:	003d0506 	br	10101154 <__alt_data_end+0xfffe1154>
10101d40:	84000054 	ori	r16,r16,1
10101d44:	ac400007 	ldb	r17,0(r21)
10101d48:	003d0206 	br	10101154 <__alt_data_end+0xfffe1154>
10101d4c:	8025883a 	mov	r18,r16
10101d50:	dc002903 	ldbu	r16,164(sp)
10101d54:	e011883a 	mov	r8,fp
10101d58:	84003fcc 	andi	r16,r16,255
10101d5c:	803de726 	beq	r16,zero,101014fc <__alt_data_end+0xfffe14fc>
10101d60:	d8c02b03 	ldbu	r3,172(sp)
10101d64:	d8c02785 	stb	r3,158(sp)
10101d68:	003de406 	br	101014fc <__alt_data_end+0xfffe14fc>
10101d6c:	84001014 	ori	r16,r16,64
10101d70:	ac400007 	ldb	r17,0(r21)
10101d74:	003cf706 	br	10101154 <__alt_data_end+0xfffe1154>
10101d78:	ac400007 	ldb	r17,0(r21)
10101d7c:	00801b04 	movi	r2,108
10101d80:	88838f26 	beq	r17,r2,10102bc0 <___vfprintf_internal_r+0x1bf4>
10101d84:	84000414 	ori	r16,r16,16
10101d88:	003cf206 	br	10101154 <__alt_data_end+0xfffe1154>
10101d8c:	8025883a 	mov	r18,r16
10101d90:	dc002903 	ldbu	r16,164(sp)
10101d94:	e011883a 	mov	r8,fp
10101d98:	84003fcc 	andi	r16,r16,255
10101d9c:	80053f1e 	bne	r16,zero,1010329c <___vfprintf_internal_r+0x22d0>
10101da0:	9080080c 	andi	r2,r18,32
10101da4:	1002d226 	beq	r2,zero,101028f0 <___vfprintf_internal_r+0x1924>
10101da8:	d9002e17 	ldw	r4,184(sp)
10101dac:	d9402f17 	ldw	r5,188(sp)
10101db0:	20800017 	ldw	r2,0(r4)
10101db4:	2807d7fa 	srai	r3,r5,31
10101db8:	21000104 	addi	r4,r4,4
10101dbc:	d9002e15 	stw	r4,184(sp)
10101dc0:	11400015 	stw	r5,0(r2)
10101dc4:	10c00115 	stw	r3,4(r2)
10101dc8:	003cb806 	br	101010ac <__alt_data_end+0xfffe10ac>
10101dcc:	d8c02e17 	ldw	r3,184(sp)
10101dd0:	d9002e17 	ldw	r4,184(sp)
10101dd4:	8025883a 	mov	r18,r16
10101dd8:	18800017 	ldw	r2,0(r3)
10101ddc:	21000104 	addi	r4,r4,4
10101de0:	00c00044 	movi	r3,1
10101de4:	e011883a 	mov	r8,fp
10101de8:	d8c02915 	stw	r3,164(sp)
10101dec:	d8002785 	stb	zero,158(sp)
10101df0:	d8801405 	stb	r2,80(sp)
10101df4:	d9002e15 	stw	r4,184(sp)
10101df8:	d8c02b15 	stw	r3,172(sp)
10101dfc:	d8002a15 	stw	zero,168(sp)
10101e00:	d8003215 	stw	zero,200(sp)
10101e04:	dc001404 	addi	r16,sp,80
10101e08:	0039883a 	mov	fp,zero
10101e0c:	003e5306 	br	1010175c <__alt_data_end+0xfffe175c>
10101e10:	01040474 	movhi	r4,4113
10101e14:	21019004 	addi	r4,r4,1600
10101e18:	0039883a 	mov	fp,zero
10101e1c:	d9003915 	stw	r4,228(sp)
10101e20:	04401e04 	movi	r17,120
10101e24:	003f6906 	br	10101bcc <__alt_data_end+0xfffe1bcc>
10101e28:	8025883a 	mov	r18,r16
10101e2c:	dc002903 	ldbu	r16,164(sp)
10101e30:	e011883a 	mov	r8,fp
10101e34:	84003fcc 	andi	r16,r16,255
10101e38:	8005081e 	bne	r16,zero,1010325c <___vfprintf_internal_r+0x2290>
10101e3c:	883d6126 	beq	r17,zero,101013c4 <__alt_data_end+0xfffe13c4>
10101e40:	00c00044 	movi	r3,1
10101e44:	d8c02915 	stw	r3,164(sp)
10101e48:	dc401405 	stb	r17,80(sp)
10101e4c:	d8002785 	stb	zero,158(sp)
10101e50:	003fe906 	br	10101df8 <__alt_data_end+0xfffe1df8>
10101e54:	01440474 	movhi	r5,4113
10101e58:	29419004 	addi	r5,r5,1600
10101e5c:	d9403915 	stw	r5,228(sp)
10101e60:	d8c02e15 	stw	r3,184(sp)
10101e64:	1025883a 	mov	r18,r2
10101e68:	04401e04 	movi	r17,120
10101e6c:	9d84b03a 	or	r2,r19,r22
10101e70:	1000fc1e 	bne	r2,zero,10102264 <___vfprintf_internal_r+0x1298>
10101e74:	0039883a 	mov	fp,zero
10101e78:	00800084 	movi	r2,2
10101e7c:	10803fcc 	andi	r2,r2,255
10101e80:	00c00044 	movi	r3,1
10101e84:	10c20f26 	beq	r2,r3,101026c4 <___vfprintf_internal_r+0x16f8>
10101e88:	00c00084 	movi	r3,2
10101e8c:	10fd3326 	beq	r2,r3,1010135c <__alt_data_end+0xfffe135c>
10101e90:	003e0b06 	br	101016c0 <__alt_data_end+0xfffe16c0>
10101e94:	d8c02017 	ldw	r3,128(sp)
10101e98:	003e7106 	br	10101860 <__alt_data_end+0xfffe1860>
10101e9c:	00801944 	movi	r2,101
10101ea0:	14407e0e 	bge	r2,r17,1010209c <___vfprintf_internal_r+0x10d0>
10101ea4:	d9003617 	ldw	r4,216(sp)
10101ea8:	d9403817 	ldw	r5,224(sp)
10101eac:	000d883a 	mov	r6,zero
10101eb0:	000f883a 	mov	r7,zero
10101eb4:	d8c03c15 	stw	r3,240(sp)
10101eb8:	da003d15 	stw	r8,244(sp)
10101ebc:	010c3e80 	call	1010c3e8 <__eqdf2>
10101ec0:	d8c03c17 	ldw	r3,240(sp)
10101ec4:	da003d17 	ldw	r8,244(sp)
10101ec8:	1000f71e 	bne	r2,zero,101022a8 <___vfprintf_internal_r+0x12dc>
10101ecc:	d8801f17 	ldw	r2,124(sp)
10101ed0:	01040474 	movhi	r4,4113
10101ed4:	21019704 	addi	r4,r4,1628
10101ed8:	18c00044 	addi	r3,r3,1
10101edc:	10800044 	addi	r2,r2,1
10101ee0:	41000015 	stw	r4,0(r8)
10101ee4:	01000044 	movi	r4,1
10101ee8:	41000115 	stw	r4,4(r8)
10101eec:	d8c02015 	stw	r3,128(sp)
10101ef0:	d8801f15 	stw	r2,124(sp)
10101ef4:	010001c4 	movi	r4,7
10101ef8:	2082b816 	blt	r4,r2,101029dc <___vfprintf_internal_r+0x1a10>
10101efc:	42000204 	addi	r8,r8,8
10101f00:	d8802617 	ldw	r2,152(sp)
10101f04:	d9403317 	ldw	r5,204(sp)
10101f08:	11400216 	blt	r2,r5,10101f14 <___vfprintf_internal_r+0xf48>
10101f0c:	9080004c 	andi	r2,r18,1
10101f10:	103eb326 	beq	r2,zero,101019e0 <__alt_data_end+0xfffe19e0>
10101f14:	d8803717 	ldw	r2,220(sp)
10101f18:	d9003417 	ldw	r4,208(sp)
10101f1c:	d9403717 	ldw	r5,220(sp)
10101f20:	1887883a 	add	r3,r3,r2
10101f24:	d8801f17 	ldw	r2,124(sp)
10101f28:	41000015 	stw	r4,0(r8)
10101f2c:	41400115 	stw	r5,4(r8)
10101f30:	10800044 	addi	r2,r2,1
10101f34:	d8c02015 	stw	r3,128(sp)
10101f38:	d8801f15 	stw	r2,124(sp)
10101f3c:	010001c4 	movi	r4,7
10101f40:	20832916 	blt	r4,r2,10102be8 <___vfprintf_internal_r+0x1c1c>
10101f44:	42000204 	addi	r8,r8,8
10101f48:	d8803317 	ldw	r2,204(sp)
10101f4c:	143fffc4 	addi	r16,r2,-1
10101f50:	043ea30e 	bge	zero,r16,101019e0 <__alt_data_end+0xfffe19e0>
10101f54:	04400404 	movi	r17,16
10101f58:	d8801f17 	ldw	r2,124(sp)
10101f5c:	8c00880e 	bge	r17,r16,10102180 <___vfprintf_internal_r+0x11b4>
10101f60:	01440474 	movhi	r5,4113
10101f64:	29419784 	addi	r5,r5,1630
10101f68:	d9402c15 	stw	r5,176(sp)
10101f6c:	058001c4 	movi	r22,7
10101f70:	dcc02d17 	ldw	r19,180(sp)
10101f74:	00000306 	br	10101f84 <___vfprintf_internal_r+0xfb8>
10101f78:	42000204 	addi	r8,r8,8
10101f7c:	843ffc04 	addi	r16,r16,-16
10101f80:	8c00820e 	bge	r17,r16,1010218c <___vfprintf_internal_r+0x11c0>
10101f84:	18c00404 	addi	r3,r3,16
10101f88:	10800044 	addi	r2,r2,1
10101f8c:	45000015 	stw	r20,0(r8)
10101f90:	44400115 	stw	r17,4(r8)
10101f94:	d8c02015 	stw	r3,128(sp)
10101f98:	d8801f15 	stw	r2,124(sp)
10101f9c:	b0bff60e 	bge	r22,r2,10101f78 <__alt_data_end+0xfffe1f78>
10101fa0:	d9801e04 	addi	r6,sp,120
10101fa4:	b80b883a 	mov	r5,r23
10101fa8:	9809883a 	mov	r4,r19
10101fac:	01086640 	call	10108664 <__sprint_r>
10101fb0:	103d0a1e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10101fb4:	d8c02017 	ldw	r3,128(sp)
10101fb8:	d8801f17 	ldw	r2,124(sp)
10101fbc:	da000404 	addi	r8,sp,16
10101fc0:	003fee06 	br	10101f7c <__alt_data_end+0xfffe1f7c>
10101fc4:	d9403117 	ldw	r5,196(sp)
10101fc8:	d8802917 	ldw	r2,164(sp)
10101fcc:	28adc83a 	sub	r22,r5,r2
10101fd0:	05be410e 	bge	zero,r22,101018d8 <__alt_data_end+0xfffe18d8>
10101fd4:	07000404 	movi	fp,16
10101fd8:	d8801f17 	ldw	r2,124(sp)
10101fdc:	e5838f0e 	bge	fp,r22,10102e1c <___vfprintf_internal_r+0x1e50>
10101fe0:	01440474 	movhi	r5,4113
10101fe4:	29419784 	addi	r5,r5,1630
10101fe8:	dc403015 	stw	r17,192(sp)
10101fec:	d9402c15 	stw	r5,176(sp)
10101ff0:	b023883a 	mov	r17,r22
10101ff4:	04c001c4 	movi	r19,7
10101ff8:	a82d883a 	mov	r22,r21
10101ffc:	902b883a 	mov	r21,r18
10102000:	8025883a 	mov	r18,r16
10102004:	dc002d17 	ldw	r16,180(sp)
10102008:	00000306 	br	10102018 <___vfprintf_internal_r+0x104c>
1010200c:	8c7ffc04 	addi	r17,r17,-16
10102010:	42000204 	addi	r8,r8,8
10102014:	e440110e 	bge	fp,r17,1010205c <___vfprintf_internal_r+0x1090>
10102018:	18c00404 	addi	r3,r3,16
1010201c:	10800044 	addi	r2,r2,1
10102020:	45000015 	stw	r20,0(r8)
10102024:	47000115 	stw	fp,4(r8)
10102028:	d8c02015 	stw	r3,128(sp)
1010202c:	d8801f15 	stw	r2,124(sp)
10102030:	98bff60e 	bge	r19,r2,1010200c <__alt_data_end+0xfffe200c>
10102034:	d9801e04 	addi	r6,sp,120
10102038:	b80b883a 	mov	r5,r23
1010203c:	8009883a 	mov	r4,r16
10102040:	01086640 	call	10108664 <__sprint_r>
10102044:	103ce51e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10102048:	8c7ffc04 	addi	r17,r17,-16
1010204c:	d8c02017 	ldw	r3,128(sp)
10102050:	d8801f17 	ldw	r2,124(sp)
10102054:	da000404 	addi	r8,sp,16
10102058:	e47fef16 	blt	fp,r17,10102018 <__alt_data_end+0xfffe2018>
1010205c:	9021883a 	mov	r16,r18
10102060:	a825883a 	mov	r18,r21
10102064:	b02b883a 	mov	r21,r22
10102068:	882d883a 	mov	r22,r17
1010206c:	dc403017 	ldw	r17,192(sp)
10102070:	d9002c17 	ldw	r4,176(sp)
10102074:	1d87883a 	add	r3,r3,r22
10102078:	10800044 	addi	r2,r2,1
1010207c:	41000015 	stw	r4,0(r8)
10102080:	45800115 	stw	r22,4(r8)
10102084:	d8c02015 	stw	r3,128(sp)
10102088:	d8801f15 	stw	r2,124(sp)
1010208c:	010001c4 	movi	r4,7
10102090:	20818e16 	blt	r4,r2,101026cc <___vfprintf_internal_r+0x1700>
10102094:	42000204 	addi	r8,r8,8
10102098:	003e0f06 	br	101018d8 <__alt_data_end+0xfffe18d8>
1010209c:	d9403317 	ldw	r5,204(sp)
101020a0:	00800044 	movi	r2,1
101020a4:	18c00044 	addi	r3,r3,1
101020a8:	1141530e 	bge	r2,r5,101025f8 <___vfprintf_internal_r+0x162c>
101020ac:	dc401f17 	ldw	r17,124(sp)
101020b0:	00800044 	movi	r2,1
101020b4:	40800115 	stw	r2,4(r8)
101020b8:	8c400044 	addi	r17,r17,1
101020bc:	44000015 	stw	r16,0(r8)
101020c0:	d8c02015 	stw	r3,128(sp)
101020c4:	dc401f15 	stw	r17,124(sp)
101020c8:	008001c4 	movi	r2,7
101020cc:	14416b16 	blt	r2,r17,1010267c <___vfprintf_internal_r+0x16b0>
101020d0:	42000204 	addi	r8,r8,8
101020d4:	d8803717 	ldw	r2,220(sp)
101020d8:	d9003417 	ldw	r4,208(sp)
101020dc:	8c400044 	addi	r17,r17,1
101020e0:	10c7883a 	add	r3,r2,r3
101020e4:	40800115 	stw	r2,4(r8)
101020e8:	41000015 	stw	r4,0(r8)
101020ec:	d8c02015 	stw	r3,128(sp)
101020f0:	dc401f15 	stw	r17,124(sp)
101020f4:	008001c4 	movi	r2,7
101020f8:	14416916 	blt	r2,r17,101026a0 <___vfprintf_internal_r+0x16d4>
101020fc:	45800204 	addi	r22,r8,8
10102100:	d9003617 	ldw	r4,216(sp)
10102104:	d9403817 	ldw	r5,224(sp)
10102108:	000d883a 	mov	r6,zero
1010210c:	000f883a 	mov	r7,zero
10102110:	d8c03c15 	stw	r3,240(sp)
10102114:	010c3e80 	call	1010c3e8 <__eqdf2>
10102118:	d8c03c17 	ldw	r3,240(sp)
1010211c:	1000bc26 	beq	r2,zero,10102410 <___vfprintf_internal_r+0x1444>
10102120:	d9403317 	ldw	r5,204(sp)
10102124:	84000044 	addi	r16,r16,1
10102128:	8c400044 	addi	r17,r17,1
1010212c:	28bfffc4 	addi	r2,r5,-1
10102130:	1887883a 	add	r3,r3,r2
10102134:	b0800115 	stw	r2,4(r22)
10102138:	b4000015 	stw	r16,0(r22)
1010213c:	d8c02015 	stw	r3,128(sp)
10102140:	dc401f15 	stw	r17,124(sp)
10102144:	008001c4 	movi	r2,7
10102148:	14414316 	blt	r2,r17,10102658 <___vfprintf_internal_r+0x168c>
1010214c:	b5800204 	addi	r22,r22,8
10102150:	d9003a17 	ldw	r4,232(sp)
10102154:	df0022c4 	addi	fp,sp,139
10102158:	8c400044 	addi	r17,r17,1
1010215c:	20c7883a 	add	r3,r4,r3
10102160:	b7000015 	stw	fp,0(r22)
10102164:	b1000115 	stw	r4,4(r22)
10102168:	d8c02015 	stw	r3,128(sp)
1010216c:	dc401f15 	stw	r17,124(sp)
10102170:	008001c4 	movi	r2,7
10102174:	14400e16 	blt	r2,r17,101021b0 <___vfprintf_internal_r+0x11e4>
10102178:	b2000204 	addi	r8,r22,8
1010217c:	003e1806 	br	101019e0 <__alt_data_end+0xfffe19e0>
10102180:	01040474 	movhi	r4,4113
10102184:	21019784 	addi	r4,r4,1630
10102188:	d9002c15 	stw	r4,176(sp)
1010218c:	d9002c17 	ldw	r4,176(sp)
10102190:	1c07883a 	add	r3,r3,r16
10102194:	44000115 	stw	r16,4(r8)
10102198:	41000015 	stw	r4,0(r8)
1010219c:	10800044 	addi	r2,r2,1
101021a0:	d8c02015 	stw	r3,128(sp)
101021a4:	d8801f15 	stw	r2,124(sp)
101021a8:	010001c4 	movi	r4,7
101021ac:	20be0b0e 	bge	r4,r2,101019dc <__alt_data_end+0xfffe19dc>
101021b0:	d9002d17 	ldw	r4,180(sp)
101021b4:	d9801e04 	addi	r6,sp,120
101021b8:	b80b883a 	mov	r5,r23
101021bc:	01086640 	call	10108664 <__sprint_r>
101021c0:	103c861e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
101021c4:	d8c02017 	ldw	r3,128(sp)
101021c8:	da000404 	addi	r8,sp,16
101021cc:	003e0406 	br	101019e0 <__alt_data_end+0xfffe19e0>
101021d0:	d9002d17 	ldw	r4,180(sp)
101021d4:	d9801e04 	addi	r6,sp,120
101021d8:	b80b883a 	mov	r5,r23
101021dc:	01086640 	call	10108664 <__sprint_r>
101021e0:	103e3b26 	beq	r2,zero,10101ad0 <__alt_data_end+0xfffe1ad0>
101021e4:	003c7d06 	br	101013dc <__alt_data_end+0xfffe13dc>
101021e8:	d9002d17 	ldw	r4,180(sp)
101021ec:	d9801e04 	addi	r6,sp,120
101021f0:	b80b883a 	mov	r5,r23
101021f4:	01086640 	call	10108664 <__sprint_r>
101021f8:	103c781e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
101021fc:	d8c02017 	ldw	r3,128(sp)
10102200:	da000404 	addi	r8,sp,16
10102204:	003de906 	br	101019ac <__alt_data_end+0xfffe19ac>
10102208:	d9002d17 	ldw	r4,180(sp)
1010220c:	d9801e04 	addi	r6,sp,120
10102210:	b80b883a 	mov	r5,r23
10102214:	01086640 	call	10108664 <__sprint_r>
10102218:	103c701e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
1010221c:	d8c02017 	ldw	r3,128(sp)
10102220:	da000404 	addi	r8,sp,16
10102224:	003d9b06 	br	10101894 <__alt_data_end+0xfffe1894>
10102228:	d9002d17 	ldw	r4,180(sp)
1010222c:	d9801e04 	addi	r6,sp,120
10102230:	b80b883a 	mov	r5,r23
10102234:	01086640 	call	10108664 <__sprint_r>
10102238:	103c681e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
1010223c:	d8c02017 	ldw	r3,128(sp)
10102240:	da000404 	addi	r8,sp,16
10102244:	003da106 	br	101018cc <__alt_data_end+0xfffe18cc>
10102248:	d9402a17 	ldw	r5,168(sp)
1010224c:	d8002785 	stb	zero,158(sp)
10102250:	283f0616 	blt	r5,zero,10101e6c <__alt_data_end+0xfffe1e6c>
10102254:	00ffdfc4 	movi	r3,-129
10102258:	9d84b03a 	or	r2,r19,r22
1010225c:	90e4703a 	and	r18,r18,r3
10102260:	103c3b26 	beq	r2,zero,10101350 <__alt_data_end+0xfffe1350>
10102264:	0039883a 	mov	fp,zero
10102268:	003e5806 	br	10101bcc <__alt_data_end+0xfffe1bcc>
1010226c:	9080040c 	andi	r2,r18,16
10102270:	1001b326 	beq	r2,zero,10102940 <___vfprintf_internal_r+0x1974>
10102274:	d8c02e17 	ldw	r3,184(sp)
10102278:	d9002a17 	ldw	r4,168(sp)
1010227c:	d8002785 	stb	zero,158(sp)
10102280:	18800104 	addi	r2,r3,4
10102284:	1cc00017 	ldw	r19,0(r3)
10102288:	002d883a 	mov	r22,zero
1010228c:	2001b516 	blt	r4,zero,10102964 <___vfprintf_internal_r+0x1998>
10102290:	00ffdfc4 	movi	r3,-129
10102294:	d8802e15 	stw	r2,184(sp)
10102298:	90e4703a 	and	r18,r18,r3
1010229c:	983d0526 	beq	r19,zero,101016b4 <__alt_data_end+0xfffe16b4>
101022a0:	0039883a 	mov	fp,zero
101022a4:	003d0806 	br	101016c8 <__alt_data_end+0xfffe16c8>
101022a8:	dc402617 	ldw	r17,152(sp)
101022ac:	0441d30e 	bge	zero,r17,101029fc <___vfprintf_internal_r+0x1a30>
101022b0:	dc403217 	ldw	r17,200(sp)
101022b4:	d8803317 	ldw	r2,204(sp)
101022b8:	1440010e 	bge	r2,r17,101022c0 <___vfprintf_internal_r+0x12f4>
101022bc:	1023883a 	mov	r17,r2
101022c0:	04400a0e 	bge	zero,r17,101022ec <___vfprintf_internal_r+0x1320>
101022c4:	d8801f17 	ldw	r2,124(sp)
101022c8:	1c47883a 	add	r3,r3,r17
101022cc:	44000015 	stw	r16,0(r8)
101022d0:	10800044 	addi	r2,r2,1
101022d4:	44400115 	stw	r17,4(r8)
101022d8:	d8c02015 	stw	r3,128(sp)
101022dc:	d8801f15 	stw	r2,124(sp)
101022e0:	010001c4 	movi	r4,7
101022e4:	20826516 	blt	r4,r2,10102c7c <___vfprintf_internal_r+0x1cb0>
101022e8:	42000204 	addi	r8,r8,8
101022ec:	88026116 	blt	r17,zero,10102c74 <___vfprintf_internal_r+0x1ca8>
101022f0:	d9003217 	ldw	r4,200(sp)
101022f4:	2463c83a 	sub	r17,r4,r17
101022f8:	04407b0e 	bge	zero,r17,101024e8 <___vfprintf_internal_r+0x151c>
101022fc:	05800404 	movi	r22,16
10102300:	d8801f17 	ldw	r2,124(sp)
10102304:	b4419d0e 	bge	r22,r17,1010297c <___vfprintf_internal_r+0x19b0>
10102308:	01040474 	movhi	r4,4113
1010230c:	21019784 	addi	r4,r4,1630
10102310:	d9002c15 	stw	r4,176(sp)
10102314:	070001c4 	movi	fp,7
10102318:	dcc02d17 	ldw	r19,180(sp)
1010231c:	00000306 	br	1010232c <___vfprintf_internal_r+0x1360>
10102320:	42000204 	addi	r8,r8,8
10102324:	8c7ffc04 	addi	r17,r17,-16
10102328:	b441970e 	bge	r22,r17,10102988 <___vfprintf_internal_r+0x19bc>
1010232c:	18c00404 	addi	r3,r3,16
10102330:	10800044 	addi	r2,r2,1
10102334:	45000015 	stw	r20,0(r8)
10102338:	45800115 	stw	r22,4(r8)
1010233c:	d8c02015 	stw	r3,128(sp)
10102340:	d8801f15 	stw	r2,124(sp)
10102344:	e0bff60e 	bge	fp,r2,10102320 <__alt_data_end+0xfffe2320>
10102348:	d9801e04 	addi	r6,sp,120
1010234c:	b80b883a 	mov	r5,r23
10102350:	9809883a 	mov	r4,r19
10102354:	01086640 	call	10108664 <__sprint_r>
10102358:	103c201e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
1010235c:	d8c02017 	ldw	r3,128(sp)
10102360:	d8801f17 	ldw	r2,124(sp)
10102364:	da000404 	addi	r8,sp,16
10102368:	003fee06 	br	10102324 <__alt_data_end+0xfffe2324>
1010236c:	d9002d17 	ldw	r4,180(sp)
10102370:	d9801e04 	addi	r6,sp,120
10102374:	b80b883a 	mov	r5,r23
10102378:	01086640 	call	10108664 <__sprint_r>
1010237c:	103c171e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10102380:	d8c02017 	ldw	r3,128(sp)
10102384:	df002787 	ldb	fp,158(sp)
10102388:	da000404 	addi	r8,sp,16
1010238c:	003d3406 	br	10101860 <__alt_data_end+0xfffe1860>
10102390:	9080040c 	andi	r2,r18,16
10102394:	10016126 	beq	r2,zero,1010291c <___vfprintf_internal_r+0x1950>
10102398:	d9402e17 	ldw	r5,184(sp)
1010239c:	2cc00017 	ldw	r19,0(r5)
101023a0:	29400104 	addi	r5,r5,4
101023a4:	d9402e15 	stw	r5,184(sp)
101023a8:	982dd7fa 	srai	r22,r19,31
101023ac:	b005883a 	mov	r2,r22
101023b0:	003c5a06 	br	1010151c <__alt_data_end+0xfffe151c>
101023b4:	9080040c 	andi	r2,r18,16
101023b8:	10003526 	beq	r2,zero,10102490 <___vfprintf_internal_r+0x14c4>
101023bc:	d8c02e17 	ldw	r3,184(sp)
101023c0:	d9002a17 	ldw	r4,168(sp)
101023c4:	d8002785 	stb	zero,158(sp)
101023c8:	18800104 	addi	r2,r3,4
101023cc:	1cc00017 	ldw	r19,0(r3)
101023d0:	002d883a 	mov	r22,zero
101023d4:	20003716 	blt	r4,zero,101024b4 <___vfprintf_internal_r+0x14e8>
101023d8:	00ffdfc4 	movi	r3,-129
101023dc:	d8802e15 	stw	r2,184(sp)
101023e0:	90e4703a 	and	r18,r18,r3
101023e4:	0039883a 	mov	fp,zero
101023e8:	983dd426 	beq	r19,zero,10101b3c <__alt_data_end+0xfffe1b3c>
101023ec:	00800244 	movi	r2,9
101023f0:	14fc5336 	bltu	r2,r19,10101540 <__alt_data_end+0xfffe1540>
101023f4:	d8c02817 	ldw	r3,160(sp)
101023f8:	dc001dc4 	addi	r16,sp,119
101023fc:	9cc00c04 	addi	r19,r19,48
10102400:	1c07c83a 	sub	r3,r3,r16
10102404:	dcc01dc5 	stb	r19,119(sp)
10102408:	d8c02b15 	stw	r3,172(sp)
1010240c:	003cc606 	br	10101728 <__alt_data_end+0xfffe1728>
10102410:	d8803317 	ldw	r2,204(sp)
10102414:	143fffc4 	addi	r16,r2,-1
10102418:	043f4d0e 	bge	zero,r16,10102150 <__alt_data_end+0xfffe2150>
1010241c:	07000404 	movi	fp,16
10102420:	e400810e 	bge	fp,r16,10102628 <___vfprintf_internal_r+0x165c>
10102424:	01440474 	movhi	r5,4113
10102428:	29419784 	addi	r5,r5,1630
1010242c:	d9402c15 	stw	r5,176(sp)
10102430:	01c001c4 	movi	r7,7
10102434:	dcc02d17 	ldw	r19,180(sp)
10102438:	00000306 	br	10102448 <___vfprintf_internal_r+0x147c>
1010243c:	b5800204 	addi	r22,r22,8
10102440:	843ffc04 	addi	r16,r16,-16
10102444:	e4007b0e 	bge	fp,r16,10102634 <___vfprintf_internal_r+0x1668>
10102448:	18c00404 	addi	r3,r3,16
1010244c:	8c400044 	addi	r17,r17,1
10102450:	b5000015 	stw	r20,0(r22)
10102454:	b7000115 	stw	fp,4(r22)
10102458:	d8c02015 	stw	r3,128(sp)
1010245c:	dc401f15 	stw	r17,124(sp)
10102460:	3c7ff60e 	bge	r7,r17,1010243c <__alt_data_end+0xfffe243c>
10102464:	d9801e04 	addi	r6,sp,120
10102468:	b80b883a 	mov	r5,r23
1010246c:	9809883a 	mov	r4,r19
10102470:	d9c03c15 	stw	r7,240(sp)
10102474:	01086640 	call	10108664 <__sprint_r>
10102478:	d9c03c17 	ldw	r7,240(sp)
1010247c:	103bd71e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10102480:	d8c02017 	ldw	r3,128(sp)
10102484:	dc401f17 	ldw	r17,124(sp)
10102488:	dd800404 	addi	r22,sp,16
1010248c:	003fec06 	br	10102440 <__alt_data_end+0xfffe2440>
10102490:	9080100c 	andi	r2,r18,64
10102494:	d8002785 	stb	zero,158(sp)
10102498:	10010e26 	beq	r2,zero,101028d4 <___vfprintf_internal_r+0x1908>
1010249c:	d9402e17 	ldw	r5,184(sp)
101024a0:	d8c02a17 	ldw	r3,168(sp)
101024a4:	002d883a 	mov	r22,zero
101024a8:	28800104 	addi	r2,r5,4
101024ac:	2cc0000b 	ldhu	r19,0(r5)
101024b0:	183fc90e 	bge	r3,zero,101023d8 <__alt_data_end+0xfffe23d8>
101024b4:	d8802e15 	stw	r2,184(sp)
101024b8:	0039883a 	mov	fp,zero
101024bc:	9d84b03a 	or	r2,r19,r22
101024c0:	103c1e1e 	bne	r2,zero,1010153c <__alt_data_end+0xfffe153c>
101024c4:	00800044 	movi	r2,1
101024c8:	003e6c06 	br	10101e7c <__alt_data_end+0xfffe1e7c>
101024cc:	d9002d17 	ldw	r4,180(sp)
101024d0:	d9801e04 	addi	r6,sp,120
101024d4:	b80b883a 	mov	r5,r23
101024d8:	01086640 	call	10108664 <__sprint_r>
101024dc:	103bbf1e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
101024e0:	d8c02017 	ldw	r3,128(sp)
101024e4:	da000404 	addi	r8,sp,16
101024e8:	d9003217 	ldw	r4,200(sp)
101024ec:	d8802617 	ldw	r2,152(sp)
101024f0:	d9403317 	ldw	r5,204(sp)
101024f4:	8123883a 	add	r17,r16,r4
101024f8:	11400216 	blt	r2,r5,10102504 <___vfprintf_internal_r+0x1538>
101024fc:	9100004c 	andi	r4,r18,1
10102500:	20000d26 	beq	r4,zero,10102538 <___vfprintf_internal_r+0x156c>
10102504:	d9003717 	ldw	r4,220(sp)
10102508:	d9403417 	ldw	r5,208(sp)
1010250c:	1907883a 	add	r3,r3,r4
10102510:	d9001f17 	ldw	r4,124(sp)
10102514:	41400015 	stw	r5,0(r8)
10102518:	d9403717 	ldw	r5,220(sp)
1010251c:	21000044 	addi	r4,r4,1
10102520:	d8c02015 	stw	r3,128(sp)
10102524:	41400115 	stw	r5,4(r8)
10102528:	d9001f15 	stw	r4,124(sp)
1010252c:	014001c4 	movi	r5,7
10102530:	2901e816 	blt	r5,r4,10102cd4 <___vfprintf_internal_r+0x1d08>
10102534:	42000204 	addi	r8,r8,8
10102538:	d9003317 	ldw	r4,204(sp)
1010253c:	8121883a 	add	r16,r16,r4
10102540:	2085c83a 	sub	r2,r4,r2
10102544:	8461c83a 	sub	r16,r16,r17
10102548:	1400010e 	bge	r2,r16,10102550 <___vfprintf_internal_r+0x1584>
1010254c:	1021883a 	mov	r16,r2
10102550:	04000a0e 	bge	zero,r16,1010257c <___vfprintf_internal_r+0x15b0>
10102554:	d9001f17 	ldw	r4,124(sp)
10102558:	1c07883a 	add	r3,r3,r16
1010255c:	44400015 	stw	r17,0(r8)
10102560:	21000044 	addi	r4,r4,1
10102564:	44000115 	stw	r16,4(r8)
10102568:	d8c02015 	stw	r3,128(sp)
1010256c:	d9001f15 	stw	r4,124(sp)
10102570:	014001c4 	movi	r5,7
10102574:	2901fb16 	blt	r5,r4,10102d64 <___vfprintf_internal_r+0x1d98>
10102578:	42000204 	addi	r8,r8,8
1010257c:	8001f716 	blt	r16,zero,10102d5c <___vfprintf_internal_r+0x1d90>
10102580:	1421c83a 	sub	r16,r2,r16
10102584:	043d160e 	bge	zero,r16,101019e0 <__alt_data_end+0xfffe19e0>
10102588:	04400404 	movi	r17,16
1010258c:	d8801f17 	ldw	r2,124(sp)
10102590:	8c3efb0e 	bge	r17,r16,10102180 <__alt_data_end+0xfffe2180>
10102594:	01440474 	movhi	r5,4113
10102598:	29419784 	addi	r5,r5,1630
1010259c:	d9402c15 	stw	r5,176(sp)
101025a0:	058001c4 	movi	r22,7
101025a4:	dcc02d17 	ldw	r19,180(sp)
101025a8:	00000306 	br	101025b8 <___vfprintf_internal_r+0x15ec>
101025ac:	42000204 	addi	r8,r8,8
101025b0:	843ffc04 	addi	r16,r16,-16
101025b4:	8c3ef50e 	bge	r17,r16,1010218c <__alt_data_end+0xfffe218c>
101025b8:	18c00404 	addi	r3,r3,16
101025bc:	10800044 	addi	r2,r2,1
101025c0:	45000015 	stw	r20,0(r8)
101025c4:	44400115 	stw	r17,4(r8)
101025c8:	d8c02015 	stw	r3,128(sp)
101025cc:	d8801f15 	stw	r2,124(sp)
101025d0:	b0bff60e 	bge	r22,r2,101025ac <__alt_data_end+0xfffe25ac>
101025d4:	d9801e04 	addi	r6,sp,120
101025d8:	b80b883a 	mov	r5,r23
101025dc:	9809883a 	mov	r4,r19
101025e0:	01086640 	call	10108664 <__sprint_r>
101025e4:	103b7d1e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
101025e8:	d8c02017 	ldw	r3,128(sp)
101025ec:	d8801f17 	ldw	r2,124(sp)
101025f0:	da000404 	addi	r8,sp,16
101025f4:	003fee06 	br	101025b0 <__alt_data_end+0xfffe25b0>
101025f8:	9088703a 	and	r4,r18,r2
101025fc:	203eab1e 	bne	r4,zero,101020ac <__alt_data_end+0xfffe20ac>
10102600:	dc401f17 	ldw	r17,124(sp)
10102604:	40800115 	stw	r2,4(r8)
10102608:	44000015 	stw	r16,0(r8)
1010260c:	8c400044 	addi	r17,r17,1
10102610:	d8c02015 	stw	r3,128(sp)
10102614:	dc401f15 	stw	r17,124(sp)
10102618:	008001c4 	movi	r2,7
1010261c:	14400e16 	blt	r2,r17,10102658 <___vfprintf_internal_r+0x168c>
10102620:	45800204 	addi	r22,r8,8
10102624:	003eca06 	br	10102150 <__alt_data_end+0xfffe2150>
10102628:	01040474 	movhi	r4,4113
1010262c:	21019784 	addi	r4,r4,1630
10102630:	d9002c15 	stw	r4,176(sp)
10102634:	d8802c17 	ldw	r2,176(sp)
10102638:	1c07883a 	add	r3,r3,r16
1010263c:	8c400044 	addi	r17,r17,1
10102640:	b0800015 	stw	r2,0(r22)
10102644:	b4000115 	stw	r16,4(r22)
10102648:	d8c02015 	stw	r3,128(sp)
1010264c:	dc401f15 	stw	r17,124(sp)
10102650:	008001c4 	movi	r2,7
10102654:	147ebd0e 	bge	r2,r17,1010214c <__alt_data_end+0xfffe214c>
10102658:	d9002d17 	ldw	r4,180(sp)
1010265c:	d9801e04 	addi	r6,sp,120
10102660:	b80b883a 	mov	r5,r23
10102664:	01086640 	call	10108664 <__sprint_r>
10102668:	103b5c1e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
1010266c:	d8c02017 	ldw	r3,128(sp)
10102670:	dc401f17 	ldw	r17,124(sp)
10102674:	dd800404 	addi	r22,sp,16
10102678:	003eb506 	br	10102150 <__alt_data_end+0xfffe2150>
1010267c:	d9002d17 	ldw	r4,180(sp)
10102680:	d9801e04 	addi	r6,sp,120
10102684:	b80b883a 	mov	r5,r23
10102688:	01086640 	call	10108664 <__sprint_r>
1010268c:	103b531e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10102690:	d8c02017 	ldw	r3,128(sp)
10102694:	dc401f17 	ldw	r17,124(sp)
10102698:	da000404 	addi	r8,sp,16
1010269c:	003e8d06 	br	101020d4 <__alt_data_end+0xfffe20d4>
101026a0:	d9002d17 	ldw	r4,180(sp)
101026a4:	d9801e04 	addi	r6,sp,120
101026a8:	b80b883a 	mov	r5,r23
101026ac:	01086640 	call	10108664 <__sprint_r>
101026b0:	103b4a1e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
101026b4:	d8c02017 	ldw	r3,128(sp)
101026b8:	dc401f17 	ldw	r17,124(sp)
101026bc:	dd800404 	addi	r22,sp,16
101026c0:	003e8f06 	br	10102100 <__alt_data_end+0xfffe2100>
101026c4:	0027883a 	mov	r19,zero
101026c8:	003f4a06 	br	101023f4 <__alt_data_end+0xfffe23f4>
101026cc:	d9002d17 	ldw	r4,180(sp)
101026d0:	d9801e04 	addi	r6,sp,120
101026d4:	b80b883a 	mov	r5,r23
101026d8:	01086640 	call	10108664 <__sprint_r>
101026dc:	103b3f1e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
101026e0:	d8c02017 	ldw	r3,128(sp)
101026e4:	da000404 	addi	r8,sp,16
101026e8:	003c7b06 	br	101018d8 <__alt_data_end+0xfffe18d8>
101026ec:	d9402a17 	ldw	r5,168(sp)
101026f0:	04e7c83a 	sub	r19,zero,r19
101026f4:	07000b44 	movi	fp,45
101026f8:	9804c03a 	cmpne	r2,r19,zero
101026fc:	05adc83a 	sub	r22,zero,r22
10102700:	df002785 	stb	fp,158(sp)
10102704:	b0adc83a 	sub	r22,r22,r2
10102708:	28017b16 	blt	r5,zero,10102cf8 <___vfprintf_internal_r+0x1d2c>
1010270c:	00bfdfc4 	movi	r2,-129
10102710:	90a4703a 	and	r18,r18,r2
10102714:	003b8906 	br	1010153c <__alt_data_end+0xfffe153c>
10102718:	d9003617 	ldw	r4,216(sp)
1010271c:	d9403817 	ldw	r5,224(sp)
10102720:	da003d15 	stw	r8,244(sp)
10102724:	01082880 	call	10108288 <__fpclassifyd>
10102728:	da003d17 	ldw	r8,244(sp)
1010272c:	1000f026 	beq	r2,zero,10102af0 <___vfprintf_internal_r+0x1b24>
10102730:	d9002a17 	ldw	r4,168(sp)
10102734:	05bff7c4 	movi	r22,-33
10102738:	00bfffc4 	movi	r2,-1
1010273c:	8dac703a 	and	r22,r17,r22
10102740:	20820026 	beq	r4,r2,10102f44 <___vfprintf_internal_r+0x1f78>
10102744:	008011c4 	movi	r2,71
10102748:	b081f726 	beq	r22,r2,10102f28 <___vfprintf_internal_r+0x1f5c>
1010274c:	d9003817 	ldw	r4,224(sp)
10102750:	90c04014 	ori	r3,r18,256
10102754:	d8c02c15 	stw	r3,176(sp)
10102758:	20021516 	blt	r4,zero,10102fb0 <___vfprintf_internal_r+0x1fe4>
1010275c:	dcc03817 	ldw	r19,224(sp)
10102760:	d8002905 	stb	zero,164(sp)
10102764:	00801984 	movi	r2,102
10102768:	8881f926 	beq	r17,r2,10102f50 <___vfprintf_internal_r+0x1f84>
1010276c:	00801184 	movi	r2,70
10102770:	88821c26 	beq	r17,r2,10102fe4 <___vfprintf_internal_r+0x2018>
10102774:	00801144 	movi	r2,69
10102778:	b081ef26 	beq	r22,r2,10102f38 <___vfprintf_internal_r+0x1f6c>
1010277c:	d8c02a17 	ldw	r3,168(sp)
10102780:	d8802104 	addi	r2,sp,132
10102784:	d8800315 	stw	r2,12(sp)
10102788:	d9403617 	ldw	r5,216(sp)
1010278c:	d8802504 	addi	r2,sp,148
10102790:	d9002d17 	ldw	r4,180(sp)
10102794:	d8800215 	stw	r2,8(sp)
10102798:	d8802604 	addi	r2,sp,152
1010279c:	d8c00015 	stw	r3,0(sp)
101027a0:	d8800115 	stw	r2,4(sp)
101027a4:	01c00084 	movi	r7,2
101027a8:	980d883a 	mov	r6,r19
101027ac:	d8c03c15 	stw	r3,240(sp)
101027b0:	da003d15 	stw	r8,244(sp)
101027b4:	01036fc0 	call	101036fc <_dtoa_r>
101027b8:	1021883a 	mov	r16,r2
101027bc:	008019c4 	movi	r2,103
101027c0:	d8c03c17 	ldw	r3,240(sp)
101027c4:	da003d17 	ldw	r8,244(sp)
101027c8:	88817126 	beq	r17,r2,10102d90 <___vfprintf_internal_r+0x1dc4>
101027cc:	008011c4 	movi	r2,71
101027d0:	88829126 	beq	r17,r2,10103218 <___vfprintf_internal_r+0x224c>
101027d4:	80f9883a 	add	fp,r16,r3
101027d8:	d9003617 	ldw	r4,216(sp)
101027dc:	000d883a 	mov	r6,zero
101027e0:	000f883a 	mov	r7,zero
101027e4:	980b883a 	mov	r5,r19
101027e8:	da003d15 	stw	r8,244(sp)
101027ec:	010c3e80 	call	1010c3e8 <__eqdf2>
101027f0:	da003d17 	ldw	r8,244(sp)
101027f4:	10018d26 	beq	r2,zero,10102e2c <___vfprintf_internal_r+0x1e60>
101027f8:	d8802117 	ldw	r2,132(sp)
101027fc:	1700062e 	bgeu	r2,fp,10102818 <___vfprintf_internal_r+0x184c>
10102800:	01000c04 	movi	r4,48
10102804:	10c00044 	addi	r3,r2,1
10102808:	d8c02115 	stw	r3,132(sp)
1010280c:	11000005 	stb	r4,0(r2)
10102810:	d8802117 	ldw	r2,132(sp)
10102814:	173ffb36 	bltu	r2,fp,10102804 <__alt_data_end+0xfffe2804>
10102818:	1405c83a 	sub	r2,r2,r16
1010281c:	d8803315 	stw	r2,204(sp)
10102820:	008011c4 	movi	r2,71
10102824:	b0817626 	beq	r22,r2,10102e00 <___vfprintf_internal_r+0x1e34>
10102828:	00801944 	movi	r2,101
1010282c:	1442800e 	bge	r2,r17,10103230 <___vfprintf_internal_r+0x2264>
10102830:	d8c02617 	ldw	r3,152(sp)
10102834:	00801984 	movi	r2,102
10102838:	d8c03215 	stw	r3,200(sp)
1010283c:	8881fe26 	beq	r17,r2,10103038 <___vfprintf_internal_r+0x206c>
10102840:	d8c03217 	ldw	r3,200(sp)
10102844:	d9003317 	ldw	r4,204(sp)
10102848:	1901dd16 	blt	r3,r4,10102fc0 <___vfprintf_internal_r+0x1ff4>
1010284c:	9480004c 	andi	r18,r18,1
10102850:	90022b1e 	bne	r18,zero,10103100 <___vfprintf_internal_r+0x2134>
10102854:	1805883a 	mov	r2,r3
10102858:	18028316 	blt	r3,zero,10103268 <___vfprintf_internal_r+0x229c>
1010285c:	d8c03217 	ldw	r3,200(sp)
10102860:	044019c4 	movi	r17,103
10102864:	d8c02b15 	stw	r3,172(sp)
10102868:	df002907 	ldb	fp,164(sp)
1010286c:	e001531e 	bne	fp,zero,10102dbc <___vfprintf_internal_r+0x1df0>
10102870:	df002783 	ldbu	fp,158(sp)
10102874:	d8802915 	stw	r2,164(sp)
10102878:	dc802c17 	ldw	r18,176(sp)
1010287c:	d8002a15 	stw	zero,168(sp)
10102880:	003baf06 	br	10101740 <__alt_data_end+0xfffe1740>
10102884:	d8c02e17 	ldw	r3,184(sp)
10102888:	d9002e17 	ldw	r4,184(sp)
1010288c:	d9402e17 	ldw	r5,184(sp)
10102890:	18c00017 	ldw	r3,0(r3)
10102894:	21000117 	ldw	r4,4(r4)
10102898:	29400204 	addi	r5,r5,8
1010289c:	d8c03615 	stw	r3,216(sp)
101028a0:	d9003815 	stw	r4,224(sp)
101028a4:	d9402e15 	stw	r5,184(sp)
101028a8:	003b5006 	br	101015ec <__alt_data_end+0xfffe15ec>
101028ac:	ac400007 	ldb	r17,0(r21)
101028b0:	003a2806 	br	10101154 <__alt_data_end+0xfffe1154>
101028b4:	9080100c 	andi	r2,r18,64
101028b8:	1000a826 	beq	r2,zero,10102b5c <___vfprintf_internal_r+0x1b90>
101028bc:	d8c02e17 	ldw	r3,184(sp)
101028c0:	002d883a 	mov	r22,zero
101028c4:	1cc0000b 	ldhu	r19,0(r3)
101028c8:	18c00104 	addi	r3,r3,4
101028cc:	d8c02e15 	stw	r3,184(sp)
101028d0:	003caf06 	br	10101b90 <__alt_data_end+0xfffe1b90>
101028d4:	d9002e17 	ldw	r4,184(sp)
101028d8:	d9402a17 	ldw	r5,168(sp)
101028dc:	002d883a 	mov	r22,zero
101028e0:	20800104 	addi	r2,r4,4
101028e4:	24c00017 	ldw	r19,0(r4)
101028e8:	283ebb0e 	bge	r5,zero,101023d8 <__alt_data_end+0xfffe23d8>
101028ec:	003ef106 	br	101024b4 <__alt_data_end+0xfffe24b4>
101028f0:	9080040c 	andi	r2,r18,16
101028f4:	1000921e 	bne	r2,zero,10102b40 <___vfprintf_internal_r+0x1b74>
101028f8:	9480100c 	andi	r18,r18,64
101028fc:	90013926 	beq	r18,zero,10102de4 <___vfprintf_internal_r+0x1e18>
10102900:	d9402e17 	ldw	r5,184(sp)
10102904:	d8c02f17 	ldw	r3,188(sp)
10102908:	28800017 	ldw	r2,0(r5)
1010290c:	29400104 	addi	r5,r5,4
10102910:	d9402e15 	stw	r5,184(sp)
10102914:	10c0000d 	sth	r3,0(r2)
10102918:	0039e406 	br	101010ac <__alt_data_end+0xfffe10ac>
1010291c:	9080100c 	andi	r2,r18,64
10102920:	10008026 	beq	r2,zero,10102b24 <___vfprintf_internal_r+0x1b58>
10102924:	d8802e17 	ldw	r2,184(sp)
10102928:	14c0000f 	ldh	r19,0(r2)
1010292c:	10800104 	addi	r2,r2,4
10102930:	d8802e15 	stw	r2,184(sp)
10102934:	982dd7fa 	srai	r22,r19,31
10102938:	b005883a 	mov	r2,r22
1010293c:	003af706 	br	1010151c <__alt_data_end+0xfffe151c>
10102940:	9080100c 	andi	r2,r18,64
10102944:	d8002785 	stb	zero,158(sp)
10102948:	10008a1e 	bne	r2,zero,10102b74 <___vfprintf_internal_r+0x1ba8>
1010294c:	d9002e17 	ldw	r4,184(sp)
10102950:	d9402a17 	ldw	r5,168(sp)
10102954:	002d883a 	mov	r22,zero
10102958:	20800104 	addi	r2,r4,4
1010295c:	24c00017 	ldw	r19,0(r4)
10102960:	283e4b0e 	bge	r5,zero,10102290 <__alt_data_end+0xfffe2290>
10102964:	9d86b03a 	or	r3,r19,r22
10102968:	d8802e15 	stw	r2,184(sp)
1010296c:	183e4c1e 	bne	r3,zero,101022a0 <__alt_data_end+0xfffe22a0>
10102970:	0039883a 	mov	fp,zero
10102974:	0005883a 	mov	r2,zero
10102978:	003d4006 	br	10101e7c <__alt_data_end+0xfffe1e7c>
1010297c:	01440474 	movhi	r5,4113
10102980:	29419784 	addi	r5,r5,1630
10102984:	d9402c15 	stw	r5,176(sp)
10102988:	d9402c17 	ldw	r5,176(sp)
1010298c:	1c47883a 	add	r3,r3,r17
10102990:	10800044 	addi	r2,r2,1
10102994:	41400015 	stw	r5,0(r8)
10102998:	44400115 	stw	r17,4(r8)
1010299c:	d8c02015 	stw	r3,128(sp)
101029a0:	d8801f15 	stw	r2,124(sp)
101029a4:	010001c4 	movi	r4,7
101029a8:	20bec816 	blt	r4,r2,101024cc <__alt_data_end+0xfffe24cc>
101029ac:	42000204 	addi	r8,r8,8
101029b0:	003ecd06 	br	101024e8 <__alt_data_end+0xfffe24e8>
101029b4:	d9002a17 	ldw	r4,168(sp)
101029b8:	d8002785 	stb	zero,158(sp)
101029bc:	203d2d16 	blt	r4,zero,10101e74 <__alt_data_end+0xfffe1e74>
101029c0:	00bfdfc4 	movi	r2,-129
101029c4:	90a4703a 	and	r18,r18,r2
101029c8:	003a6106 	br	10101350 <__alt_data_end+0xfffe1350>
101029cc:	01040474 	movhi	r4,4113
101029d0:	21019784 	addi	r4,r4,1630
101029d4:	d9002c15 	stw	r4,176(sp)
101029d8:	003bea06 	br	10101984 <__alt_data_end+0xfffe1984>
101029dc:	d9002d17 	ldw	r4,180(sp)
101029e0:	d9801e04 	addi	r6,sp,120
101029e4:	b80b883a 	mov	r5,r23
101029e8:	01086640 	call	10108664 <__sprint_r>
101029ec:	103a7b1e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
101029f0:	d8c02017 	ldw	r3,128(sp)
101029f4:	da000404 	addi	r8,sp,16
101029f8:	003d4106 	br	10101f00 <__alt_data_end+0xfffe1f00>
101029fc:	d8801f17 	ldw	r2,124(sp)
10102a00:	01440474 	movhi	r5,4113
10102a04:	01000044 	movi	r4,1
10102a08:	18c00044 	addi	r3,r3,1
10102a0c:	10800044 	addi	r2,r2,1
10102a10:	29419704 	addi	r5,r5,1628
10102a14:	41000115 	stw	r4,4(r8)
10102a18:	41400015 	stw	r5,0(r8)
10102a1c:	d8c02015 	stw	r3,128(sp)
10102a20:	d8801f15 	stw	r2,124(sp)
10102a24:	010001c4 	movi	r4,7
10102a28:	20805c16 	blt	r4,r2,10102b9c <___vfprintf_internal_r+0x1bd0>
10102a2c:	42000204 	addi	r8,r8,8
10102a30:	8800041e 	bne	r17,zero,10102a44 <___vfprintf_internal_r+0x1a78>
10102a34:	d8803317 	ldw	r2,204(sp)
10102a38:	1000021e 	bne	r2,zero,10102a44 <___vfprintf_internal_r+0x1a78>
10102a3c:	9080004c 	andi	r2,r18,1
10102a40:	103be726 	beq	r2,zero,101019e0 <__alt_data_end+0xfffe19e0>
10102a44:	d9003717 	ldw	r4,220(sp)
10102a48:	d8801f17 	ldw	r2,124(sp)
10102a4c:	d9403417 	ldw	r5,208(sp)
10102a50:	20c7883a 	add	r3,r4,r3
10102a54:	10800044 	addi	r2,r2,1
10102a58:	41000115 	stw	r4,4(r8)
10102a5c:	41400015 	stw	r5,0(r8)
10102a60:	d8c02015 	stw	r3,128(sp)
10102a64:	d8801f15 	stw	r2,124(sp)
10102a68:	010001c4 	movi	r4,7
10102a6c:	20812116 	blt	r4,r2,10102ef4 <___vfprintf_internal_r+0x1f28>
10102a70:	42000204 	addi	r8,r8,8
10102a74:	0463c83a 	sub	r17,zero,r17
10102a78:	0440730e 	bge	zero,r17,10102c48 <___vfprintf_internal_r+0x1c7c>
10102a7c:	05800404 	movi	r22,16
10102a80:	b440860e 	bge	r22,r17,10102c9c <___vfprintf_internal_r+0x1cd0>
10102a84:	01440474 	movhi	r5,4113
10102a88:	29419784 	addi	r5,r5,1630
10102a8c:	d9402c15 	stw	r5,176(sp)
10102a90:	070001c4 	movi	fp,7
10102a94:	dcc02d17 	ldw	r19,180(sp)
10102a98:	00000306 	br	10102aa8 <___vfprintf_internal_r+0x1adc>
10102a9c:	42000204 	addi	r8,r8,8
10102aa0:	8c7ffc04 	addi	r17,r17,-16
10102aa4:	b440800e 	bge	r22,r17,10102ca8 <___vfprintf_internal_r+0x1cdc>
10102aa8:	18c00404 	addi	r3,r3,16
10102aac:	10800044 	addi	r2,r2,1
10102ab0:	45000015 	stw	r20,0(r8)
10102ab4:	45800115 	stw	r22,4(r8)
10102ab8:	d8c02015 	stw	r3,128(sp)
10102abc:	d8801f15 	stw	r2,124(sp)
10102ac0:	e0bff60e 	bge	fp,r2,10102a9c <__alt_data_end+0xfffe2a9c>
10102ac4:	d9801e04 	addi	r6,sp,120
10102ac8:	b80b883a 	mov	r5,r23
10102acc:	9809883a 	mov	r4,r19
10102ad0:	01086640 	call	10108664 <__sprint_r>
10102ad4:	103a411e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10102ad8:	d8c02017 	ldw	r3,128(sp)
10102adc:	d8801f17 	ldw	r2,124(sp)
10102ae0:	da000404 	addi	r8,sp,16
10102ae4:	003fee06 	br	10102aa0 <__alt_data_end+0xfffe2aa0>
10102ae8:	00bfffc4 	movi	r2,-1
10102aec:	003a3f06 	br	101013ec <__alt_data_end+0xfffe13ec>
10102af0:	008011c4 	movi	r2,71
10102af4:	1440b816 	blt	r2,r17,10102dd8 <___vfprintf_internal_r+0x1e0c>
10102af8:	04040474 	movhi	r16,4113
10102afc:	84018904 	addi	r16,r16,1572
10102b00:	00c000c4 	movi	r3,3
10102b04:	00bfdfc4 	movi	r2,-129
10102b08:	d8c02915 	stw	r3,164(sp)
10102b0c:	90a4703a 	and	r18,r18,r2
10102b10:	df002783 	ldbu	fp,158(sp)
10102b14:	d8c02b15 	stw	r3,172(sp)
10102b18:	d8002a15 	stw	zero,168(sp)
10102b1c:	d8003215 	stw	zero,200(sp)
10102b20:	003b0706 	br	10101740 <__alt_data_end+0xfffe1740>
10102b24:	d8c02e17 	ldw	r3,184(sp)
10102b28:	1cc00017 	ldw	r19,0(r3)
10102b2c:	18c00104 	addi	r3,r3,4
10102b30:	d8c02e15 	stw	r3,184(sp)
10102b34:	982dd7fa 	srai	r22,r19,31
10102b38:	b005883a 	mov	r2,r22
10102b3c:	003a7706 	br	1010151c <__alt_data_end+0xfffe151c>
10102b40:	d8c02e17 	ldw	r3,184(sp)
10102b44:	d9002f17 	ldw	r4,188(sp)
10102b48:	18800017 	ldw	r2,0(r3)
10102b4c:	18c00104 	addi	r3,r3,4
10102b50:	d8c02e15 	stw	r3,184(sp)
10102b54:	11000015 	stw	r4,0(r2)
10102b58:	00395406 	br	101010ac <__alt_data_end+0xfffe10ac>
10102b5c:	d9002e17 	ldw	r4,184(sp)
10102b60:	002d883a 	mov	r22,zero
10102b64:	24c00017 	ldw	r19,0(r4)
10102b68:	21000104 	addi	r4,r4,4
10102b6c:	d9002e15 	stw	r4,184(sp)
10102b70:	003c0706 	br	10101b90 <__alt_data_end+0xfffe1b90>
10102b74:	d9402e17 	ldw	r5,184(sp)
10102b78:	d8c02a17 	ldw	r3,168(sp)
10102b7c:	002d883a 	mov	r22,zero
10102b80:	28800104 	addi	r2,r5,4
10102b84:	2cc0000b 	ldhu	r19,0(r5)
10102b88:	183dc10e 	bge	r3,zero,10102290 <__alt_data_end+0xfffe2290>
10102b8c:	003f7506 	br	10102964 <__alt_data_end+0xfffe2964>
10102b90:	04040474 	movhi	r16,4113
10102b94:	84018704 	addi	r16,r16,1564
10102b98:	003aa706 	br	10101638 <__alt_data_end+0xfffe1638>
10102b9c:	d9002d17 	ldw	r4,180(sp)
10102ba0:	d9801e04 	addi	r6,sp,120
10102ba4:	b80b883a 	mov	r5,r23
10102ba8:	01086640 	call	10108664 <__sprint_r>
10102bac:	103a0b1e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10102bb0:	dc402617 	ldw	r17,152(sp)
10102bb4:	d8c02017 	ldw	r3,128(sp)
10102bb8:	da000404 	addi	r8,sp,16
10102bbc:	003f9c06 	br	10102a30 <__alt_data_end+0xfffe2a30>
10102bc0:	ac400043 	ldbu	r17,1(r21)
10102bc4:	84000814 	ori	r16,r16,32
10102bc8:	ad400044 	addi	r21,r21,1
10102bcc:	8c403fcc 	andi	r17,r17,255
10102bd0:	8c40201c 	xori	r17,r17,128
10102bd4:	8c7fe004 	addi	r17,r17,-128
10102bd8:	00395e06 	br	10101154 <__alt_data_end+0xfffe1154>
10102bdc:	d8c02e15 	stw	r3,184(sp)
10102be0:	0039883a 	mov	fp,zero
10102be4:	003e3506 	br	101024bc <__alt_data_end+0xfffe24bc>
10102be8:	d9002d17 	ldw	r4,180(sp)
10102bec:	d9801e04 	addi	r6,sp,120
10102bf0:	b80b883a 	mov	r5,r23
10102bf4:	01086640 	call	10108664 <__sprint_r>
10102bf8:	1039f81e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10102bfc:	d8c02017 	ldw	r3,128(sp)
10102c00:	da000404 	addi	r8,sp,16
10102c04:	003cd006 	br	10101f48 <__alt_data_end+0xfffe1f48>
10102c08:	8009883a 	mov	r4,r16
10102c0c:	df003d15 	stw	fp,244(sp)
10102c10:	0100f340 	call	10100f34 <strlen>
10102c14:	d8802b15 	stw	r2,172(sp)
10102c18:	da003d17 	ldw	r8,244(sp)
10102c1c:	103c200e 	bge	r2,zero,10101ca0 <__alt_data_end+0xfffe1ca0>
10102c20:	0005883a 	mov	r2,zero
10102c24:	003c1e06 	br	10101ca0 <__alt_data_end+0xfffe1ca0>
10102c28:	d9002d17 	ldw	r4,180(sp)
10102c2c:	d9801e04 	addi	r6,sp,120
10102c30:	b80b883a 	mov	r5,r23
10102c34:	01086640 	call	10108664 <__sprint_r>
10102c38:	1039e81e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10102c3c:	d8c02017 	ldw	r3,128(sp)
10102c40:	d8801f17 	ldw	r2,124(sp)
10102c44:	da000404 	addi	r8,sp,16
10102c48:	d9403317 	ldw	r5,204(sp)
10102c4c:	10800044 	addi	r2,r2,1
10102c50:	44000015 	stw	r16,0(r8)
10102c54:	28c7883a 	add	r3,r5,r3
10102c58:	003b5b06 	br	101019c8 <__alt_data_end+0xfffe19c8>
10102c5c:	01040474 	movhi	r4,4113
10102c60:	21019b84 	addi	r4,r4,1646
10102c64:	d9003515 	stw	r4,212(sp)
10102c68:	003af206 	br	10101834 <__alt_data_end+0xfffe1834>
10102c6c:	013fffc4 	movi	r4,-1
10102c70:	003a0806 	br	10101494 <__alt_data_end+0xfffe1494>
10102c74:	0023883a 	mov	r17,zero
10102c78:	003d9d06 	br	101022f0 <__alt_data_end+0xfffe22f0>
10102c7c:	d9002d17 	ldw	r4,180(sp)
10102c80:	d9801e04 	addi	r6,sp,120
10102c84:	b80b883a 	mov	r5,r23
10102c88:	01086640 	call	10108664 <__sprint_r>
10102c8c:	1039d31e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10102c90:	d8c02017 	ldw	r3,128(sp)
10102c94:	da000404 	addi	r8,sp,16
10102c98:	003d9406 	br	101022ec <__alt_data_end+0xfffe22ec>
10102c9c:	01040474 	movhi	r4,4113
10102ca0:	21019784 	addi	r4,r4,1630
10102ca4:	d9002c15 	stw	r4,176(sp)
10102ca8:	d9002c17 	ldw	r4,176(sp)
10102cac:	1c47883a 	add	r3,r3,r17
10102cb0:	10800044 	addi	r2,r2,1
10102cb4:	41000015 	stw	r4,0(r8)
10102cb8:	44400115 	stw	r17,4(r8)
10102cbc:	d8c02015 	stw	r3,128(sp)
10102cc0:	d8801f15 	stw	r2,124(sp)
10102cc4:	010001c4 	movi	r4,7
10102cc8:	20bfd716 	blt	r4,r2,10102c28 <__alt_data_end+0xfffe2c28>
10102ccc:	42000204 	addi	r8,r8,8
10102cd0:	003fdd06 	br	10102c48 <__alt_data_end+0xfffe2c48>
10102cd4:	d9002d17 	ldw	r4,180(sp)
10102cd8:	d9801e04 	addi	r6,sp,120
10102cdc:	b80b883a 	mov	r5,r23
10102ce0:	01086640 	call	10108664 <__sprint_r>
10102ce4:	1039bd1e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10102ce8:	d8802617 	ldw	r2,152(sp)
10102cec:	d8c02017 	ldw	r3,128(sp)
10102cf0:	da000404 	addi	r8,sp,16
10102cf4:	003e1006 	br	10102538 <__alt_data_end+0xfffe2538>
10102cf8:	00800044 	movi	r2,1
10102cfc:	10803fcc 	andi	r2,r2,255
10102d00:	00c00044 	movi	r3,1
10102d04:	10fa0d26 	beq	r2,r3,1010153c <__alt_data_end+0xfffe153c>
10102d08:	00c00084 	movi	r3,2
10102d0c:	10fbaf26 	beq	r2,r3,10101bcc <__alt_data_end+0xfffe1bcc>
10102d10:	003a6d06 	br	101016c8 <__alt_data_end+0xfffe16c8>
10102d14:	01040474 	movhi	r4,4113
10102d18:	21019b84 	addi	r4,r4,1646
10102d1c:	d9003515 	stw	r4,212(sp)
10102d20:	003b5406 	br	10101a74 <__alt_data_end+0xfffe1a74>
10102d24:	d8802a17 	ldw	r2,168(sp)
10102d28:	00c00184 	movi	r3,6
10102d2c:	1880012e 	bgeu	r3,r2,10102d34 <___vfprintf_internal_r+0x1d68>
10102d30:	1805883a 	mov	r2,r3
10102d34:	d8802b15 	stw	r2,172(sp)
10102d38:	1000ef16 	blt	r2,zero,101030f8 <___vfprintf_internal_r+0x212c>
10102d3c:	04040474 	movhi	r16,4113
10102d40:	d8802915 	stw	r2,164(sp)
10102d44:	dcc02e15 	stw	r19,184(sp)
10102d48:	d8002a15 	stw	zero,168(sp)
10102d4c:	d8003215 	stw	zero,200(sp)
10102d50:	84019504 	addi	r16,r16,1620
10102d54:	0039883a 	mov	fp,zero
10102d58:	003a8006 	br	1010175c <__alt_data_end+0xfffe175c>
10102d5c:	0021883a 	mov	r16,zero
10102d60:	003e0706 	br	10102580 <__alt_data_end+0xfffe2580>
10102d64:	d9002d17 	ldw	r4,180(sp)
10102d68:	d9801e04 	addi	r6,sp,120
10102d6c:	b80b883a 	mov	r5,r23
10102d70:	01086640 	call	10108664 <__sprint_r>
10102d74:	1039991e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10102d78:	d8802617 	ldw	r2,152(sp)
10102d7c:	d9403317 	ldw	r5,204(sp)
10102d80:	d8c02017 	ldw	r3,128(sp)
10102d84:	da000404 	addi	r8,sp,16
10102d88:	2885c83a 	sub	r2,r5,r2
10102d8c:	003dfb06 	br	1010257c <__alt_data_end+0xfffe257c>
10102d90:	9080004c 	andi	r2,r18,1
10102d94:	103e8f1e 	bne	r2,zero,101027d4 <__alt_data_end+0xfffe27d4>
10102d98:	d8802117 	ldw	r2,132(sp)
10102d9c:	003e9e06 	br	10102818 <__alt_data_end+0xfffe2818>
10102da0:	1025883a 	mov	r18,r2
10102da4:	0039883a 	mov	fp,zero
10102da8:	00800084 	movi	r2,2
10102dac:	003fd306 	br	10102cfc <__alt_data_end+0xfffe2cfc>
10102db0:	07000b44 	movi	fp,45
10102db4:	df002785 	stb	fp,158(sp)
10102db8:	003a1b06 	br	10101628 <__alt_data_end+0xfffe1628>
10102dbc:	00c00b44 	movi	r3,45
10102dc0:	d8c02785 	stb	r3,158(sp)
10102dc4:	d8802915 	stw	r2,164(sp)
10102dc8:	dc802c17 	ldw	r18,176(sp)
10102dcc:	d8002a15 	stw	zero,168(sp)
10102dd0:	07000b44 	movi	fp,45
10102dd4:	003a5e06 	br	10101750 <__alt_data_end+0xfffe1750>
10102dd8:	04040474 	movhi	r16,4113
10102ddc:	84018a04 	addi	r16,r16,1576
10102de0:	003f4706 	br	10102b00 <__alt_data_end+0xfffe2b00>
10102de4:	d9002e17 	ldw	r4,184(sp)
10102de8:	d9402f17 	ldw	r5,188(sp)
10102dec:	20800017 	ldw	r2,0(r4)
10102df0:	21000104 	addi	r4,r4,4
10102df4:	d9002e15 	stw	r4,184(sp)
10102df8:	11400015 	stw	r5,0(r2)
10102dfc:	0038ab06 	br	101010ac <__alt_data_end+0xfffe10ac>
10102e00:	dd802617 	ldw	r22,152(sp)
10102e04:	00bfff44 	movi	r2,-3
10102e08:	b0801c16 	blt	r22,r2,10102e7c <___vfprintf_internal_r+0x1eb0>
10102e0c:	d9402a17 	ldw	r5,168(sp)
10102e10:	2d801a16 	blt	r5,r22,10102e7c <___vfprintf_internal_r+0x1eb0>
10102e14:	dd803215 	stw	r22,200(sp)
10102e18:	003e8906 	br	10102840 <__alt_data_end+0xfffe2840>
10102e1c:	01040474 	movhi	r4,4113
10102e20:	21019784 	addi	r4,r4,1630
10102e24:	d9002c15 	stw	r4,176(sp)
10102e28:	003c9106 	br	10102070 <__alt_data_end+0xfffe2070>
10102e2c:	e005883a 	mov	r2,fp
10102e30:	003e7906 	br	10102818 <__alt_data_end+0xfffe2818>
10102e34:	d9002a17 	ldw	r4,168(sp)
10102e38:	df002783 	ldbu	fp,158(sp)
10102e3c:	dcc02e15 	stw	r19,184(sp)
10102e40:	d9002915 	stw	r4,164(sp)
10102e44:	d9002b15 	stw	r4,172(sp)
10102e48:	d8002a15 	stw	zero,168(sp)
10102e4c:	d8003215 	stw	zero,200(sp)
10102e50:	003a3b06 	br	10101740 <__alt_data_end+0xfffe1740>
10102e54:	9080004c 	andi	r2,r18,1
10102e58:	0039883a 	mov	fp,zero
10102e5c:	10000426 	beq	r2,zero,10102e70 <___vfprintf_internal_r+0x1ea4>
10102e60:	00800c04 	movi	r2,48
10102e64:	dc001dc4 	addi	r16,sp,119
10102e68:	d8801dc5 	stb	r2,119(sp)
10102e6c:	003b6406 	br	10101c00 <__alt_data_end+0xfffe1c00>
10102e70:	d8002b15 	stw	zero,172(sp)
10102e74:	dc001e04 	addi	r16,sp,120
10102e78:	003a2b06 	br	10101728 <__alt_data_end+0xfffe1728>
10102e7c:	8c7fff84 	addi	r17,r17,-2
10102e80:	b5bfffc4 	addi	r22,r22,-1
10102e84:	dd802615 	stw	r22,152(sp)
10102e88:	dc4022c5 	stb	r17,139(sp)
10102e8c:	b000bf16 	blt	r22,zero,1010318c <___vfprintf_internal_r+0x21c0>
10102e90:	00800ac4 	movi	r2,43
10102e94:	d8802305 	stb	r2,140(sp)
10102e98:	00800244 	movi	r2,9
10102e9c:	15807016 	blt	r2,r22,10103060 <___vfprintf_internal_r+0x2094>
10102ea0:	00800c04 	movi	r2,48
10102ea4:	b5800c04 	addi	r22,r22,48
10102ea8:	d8802345 	stb	r2,141(sp)
10102eac:	dd802385 	stb	r22,142(sp)
10102eb0:	d88023c4 	addi	r2,sp,143
10102eb4:	df0022c4 	addi	fp,sp,139
10102eb8:	d8c03317 	ldw	r3,204(sp)
10102ebc:	1739c83a 	sub	fp,r2,fp
10102ec0:	d9003317 	ldw	r4,204(sp)
10102ec4:	e0c7883a 	add	r3,fp,r3
10102ec8:	df003a15 	stw	fp,232(sp)
10102ecc:	d8c02b15 	stw	r3,172(sp)
10102ed0:	00800044 	movi	r2,1
10102ed4:	1100b30e 	bge	r2,r4,101031a4 <___vfprintf_internal_r+0x21d8>
10102ed8:	d8c02b17 	ldw	r3,172(sp)
10102edc:	18c00044 	addi	r3,r3,1
10102ee0:	d8c02b15 	stw	r3,172(sp)
10102ee4:	1805883a 	mov	r2,r3
10102ee8:	1800ac16 	blt	r3,zero,1010319c <___vfprintf_internal_r+0x21d0>
10102eec:	d8003215 	stw	zero,200(sp)
10102ef0:	003e5d06 	br	10102868 <__alt_data_end+0xfffe2868>
10102ef4:	d9002d17 	ldw	r4,180(sp)
10102ef8:	d9801e04 	addi	r6,sp,120
10102efc:	b80b883a 	mov	r5,r23
10102f00:	01086640 	call	10108664 <__sprint_r>
10102f04:	1039351e 	bne	r2,zero,101013dc <__alt_data_end+0xfffe13dc>
10102f08:	dc402617 	ldw	r17,152(sp)
10102f0c:	d8c02017 	ldw	r3,128(sp)
10102f10:	d8801f17 	ldw	r2,124(sp)
10102f14:	da000404 	addi	r8,sp,16
10102f18:	003ed606 	br	10102a74 <__alt_data_end+0xfffe2a74>
10102f1c:	182b883a 	mov	r21,r3
10102f20:	d8002a15 	stw	zero,168(sp)
10102f24:	00388c06 	br	10101158 <__alt_data_end+0xfffe1158>
10102f28:	d8802a17 	ldw	r2,168(sp)
10102f2c:	103e071e 	bne	r2,zero,1010274c <__alt_data_end+0xfffe274c>
10102f30:	dc002a15 	stw	r16,168(sp)
10102f34:	003e0506 	br	1010274c <__alt_data_end+0xfffe274c>
10102f38:	d9002a17 	ldw	r4,168(sp)
10102f3c:	20c00044 	addi	r3,r4,1
10102f40:	003e0f06 	br	10102780 <__alt_data_end+0xfffe2780>
10102f44:	01400184 	movi	r5,6
10102f48:	d9402a15 	stw	r5,168(sp)
10102f4c:	003dff06 	br	1010274c <__alt_data_end+0xfffe274c>
10102f50:	d8802104 	addi	r2,sp,132
10102f54:	d8800315 	stw	r2,12(sp)
10102f58:	d8802504 	addi	r2,sp,148
10102f5c:	d8800215 	stw	r2,8(sp)
10102f60:	d8802604 	addi	r2,sp,152
10102f64:	d8800115 	stw	r2,4(sp)
10102f68:	d8802a17 	ldw	r2,168(sp)
10102f6c:	d9403617 	ldw	r5,216(sp)
10102f70:	d9002d17 	ldw	r4,180(sp)
10102f74:	d8800015 	stw	r2,0(sp)
10102f78:	01c000c4 	movi	r7,3
10102f7c:	980d883a 	mov	r6,r19
10102f80:	da003d15 	stw	r8,244(sp)
10102f84:	01036fc0 	call	101036fc <_dtoa_r>
10102f88:	d8c02a17 	ldw	r3,168(sp)
10102f8c:	da003d17 	ldw	r8,244(sp)
10102f90:	1021883a 	mov	r16,r2
10102f94:	10f9883a 	add	fp,r2,r3
10102f98:	81000007 	ldb	r4,0(r16)
10102f9c:	00800c04 	movi	r2,48
10102fa0:	20805e26 	beq	r4,r2,1010311c <___vfprintf_internal_r+0x2150>
10102fa4:	d8c02617 	ldw	r3,152(sp)
10102fa8:	e0f9883a 	add	fp,fp,r3
10102fac:	003e0a06 	br	101027d8 <__alt_data_end+0xfffe27d8>
10102fb0:	00c00b44 	movi	r3,45
10102fb4:	24e0003c 	xorhi	r19,r4,32768
10102fb8:	d8c02905 	stb	r3,164(sp)
10102fbc:	003de906 	br	10102764 <__alt_data_end+0xfffe2764>
10102fc0:	d8c03217 	ldw	r3,200(sp)
10102fc4:	00c07a0e 	bge	zero,r3,101031b0 <___vfprintf_internal_r+0x21e4>
10102fc8:	00800044 	movi	r2,1
10102fcc:	d9003317 	ldw	r4,204(sp)
10102fd0:	1105883a 	add	r2,r2,r4
10102fd4:	d8802b15 	stw	r2,172(sp)
10102fd8:	10004e16 	blt	r2,zero,10103114 <___vfprintf_internal_r+0x2148>
10102fdc:	044019c4 	movi	r17,103
10102fe0:	003e2106 	br	10102868 <__alt_data_end+0xfffe2868>
10102fe4:	d9002a17 	ldw	r4,168(sp)
10102fe8:	d8802104 	addi	r2,sp,132
10102fec:	d8800315 	stw	r2,12(sp)
10102ff0:	d9000015 	stw	r4,0(sp)
10102ff4:	d8802504 	addi	r2,sp,148
10102ff8:	d9403617 	ldw	r5,216(sp)
10102ffc:	d9002d17 	ldw	r4,180(sp)
10103000:	d8800215 	stw	r2,8(sp)
10103004:	d8802604 	addi	r2,sp,152
10103008:	d8800115 	stw	r2,4(sp)
1010300c:	01c000c4 	movi	r7,3
10103010:	980d883a 	mov	r6,r19
10103014:	da003d15 	stw	r8,244(sp)
10103018:	01036fc0 	call	101036fc <_dtoa_r>
1010301c:	d8c02a17 	ldw	r3,168(sp)
10103020:	da003d17 	ldw	r8,244(sp)
10103024:	1021883a 	mov	r16,r2
10103028:	00801184 	movi	r2,70
1010302c:	80f9883a 	add	fp,r16,r3
10103030:	88bfd926 	beq	r17,r2,10102f98 <__alt_data_end+0xfffe2f98>
10103034:	003de806 	br	101027d8 <__alt_data_end+0xfffe27d8>
10103038:	d9002a17 	ldw	r4,168(sp)
1010303c:	00c04d0e 	bge	zero,r3,10103174 <___vfprintf_internal_r+0x21a8>
10103040:	2000441e 	bne	r4,zero,10103154 <___vfprintf_internal_r+0x2188>
10103044:	9480004c 	andi	r18,r18,1
10103048:	9000421e 	bne	r18,zero,10103154 <___vfprintf_internal_r+0x2188>
1010304c:	1805883a 	mov	r2,r3
10103050:	18006f16 	blt	r3,zero,10103210 <___vfprintf_internal_r+0x2244>
10103054:	d8c03217 	ldw	r3,200(sp)
10103058:	d8c02b15 	stw	r3,172(sp)
1010305c:	003e0206 	br	10102868 <__alt_data_end+0xfffe2868>
10103060:	df0022c4 	addi	fp,sp,139
10103064:	dc002a15 	stw	r16,168(sp)
10103068:	4027883a 	mov	r19,r8
1010306c:	e021883a 	mov	r16,fp
10103070:	b009883a 	mov	r4,r22
10103074:	01400284 	movi	r5,10
10103078:	0100b540 	call	10100b54 <__modsi3>
1010307c:	10800c04 	addi	r2,r2,48
10103080:	843fffc4 	addi	r16,r16,-1
10103084:	b009883a 	mov	r4,r22
10103088:	01400284 	movi	r5,10
1010308c:	80800005 	stb	r2,0(r16)
10103090:	0100ad00 	call	10100ad0 <__divsi3>
10103094:	102d883a 	mov	r22,r2
10103098:	00800244 	movi	r2,9
1010309c:	15bff416 	blt	r2,r22,10103070 <__alt_data_end+0xfffe3070>
101030a0:	9811883a 	mov	r8,r19
101030a4:	b0800c04 	addi	r2,r22,48
101030a8:	8027883a 	mov	r19,r16
101030ac:	997fffc4 	addi	r5,r19,-1
101030b0:	98bfffc5 	stb	r2,-1(r19)
101030b4:	dc002a17 	ldw	r16,168(sp)
101030b8:	2f006d2e 	bgeu	r5,fp,10103270 <___vfprintf_internal_r+0x22a4>
101030bc:	d9c02384 	addi	r7,sp,142
101030c0:	3ccfc83a 	sub	r7,r7,r19
101030c4:	d9002344 	addi	r4,sp,141
101030c8:	e1cf883a 	add	r7,fp,r7
101030cc:	00000106 	br	101030d4 <___vfprintf_internal_r+0x2108>
101030d0:	28800003 	ldbu	r2,0(r5)
101030d4:	20800005 	stb	r2,0(r4)
101030d8:	21000044 	addi	r4,r4,1
101030dc:	29400044 	addi	r5,r5,1
101030e0:	393ffb1e 	bne	r7,r4,101030d0 <__alt_data_end+0xfffe30d0>
101030e4:	d8802304 	addi	r2,sp,140
101030e8:	14c5c83a 	sub	r2,r2,r19
101030ec:	d8c02344 	addi	r3,sp,141
101030f0:	1885883a 	add	r2,r3,r2
101030f4:	003f7006 	br	10102eb8 <__alt_data_end+0xfffe2eb8>
101030f8:	0005883a 	mov	r2,zero
101030fc:	003f0f06 	br	10102d3c <__alt_data_end+0xfffe2d3c>
10103100:	d8c03217 	ldw	r3,200(sp)
10103104:	18c00044 	addi	r3,r3,1
10103108:	d8c02b15 	stw	r3,172(sp)
1010310c:	1805883a 	mov	r2,r3
10103110:	183fb20e 	bge	r3,zero,10102fdc <__alt_data_end+0xfffe2fdc>
10103114:	0005883a 	mov	r2,zero
10103118:	003fb006 	br	10102fdc <__alt_data_end+0xfffe2fdc>
1010311c:	d9003617 	ldw	r4,216(sp)
10103120:	000d883a 	mov	r6,zero
10103124:	000f883a 	mov	r7,zero
10103128:	980b883a 	mov	r5,r19
1010312c:	d8c03c15 	stw	r3,240(sp)
10103130:	da003d15 	stw	r8,244(sp)
10103134:	010c3e80 	call	1010c3e8 <__eqdf2>
10103138:	d8c03c17 	ldw	r3,240(sp)
1010313c:	da003d17 	ldw	r8,244(sp)
10103140:	103f9826 	beq	r2,zero,10102fa4 <__alt_data_end+0xfffe2fa4>
10103144:	00800044 	movi	r2,1
10103148:	10c7c83a 	sub	r3,r2,r3
1010314c:	d8c02615 	stw	r3,152(sp)
10103150:	003f9506 	br	10102fa8 <__alt_data_end+0xfffe2fa8>
10103154:	d9002a17 	ldw	r4,168(sp)
10103158:	d8c03217 	ldw	r3,200(sp)
1010315c:	20800044 	addi	r2,r4,1
10103160:	1885883a 	add	r2,r3,r2
10103164:	d8802b15 	stw	r2,172(sp)
10103168:	103dbf0e 	bge	r2,zero,10102868 <__alt_data_end+0xfffe2868>
1010316c:	0005883a 	mov	r2,zero
10103170:	003dbd06 	br	10102868 <__alt_data_end+0xfffe2868>
10103174:	2000201e 	bne	r4,zero,101031f8 <___vfprintf_internal_r+0x222c>
10103178:	9480004c 	andi	r18,r18,1
1010317c:	90001e1e 	bne	r18,zero,101031f8 <___vfprintf_internal_r+0x222c>
10103180:	00800044 	movi	r2,1
10103184:	d8802b15 	stw	r2,172(sp)
10103188:	003db706 	br	10102868 <__alt_data_end+0xfffe2868>
1010318c:	00800b44 	movi	r2,45
10103190:	05adc83a 	sub	r22,zero,r22
10103194:	d8802305 	stb	r2,140(sp)
10103198:	003f3f06 	br	10102e98 <__alt_data_end+0xfffe2e98>
1010319c:	0005883a 	mov	r2,zero
101031a0:	003f5206 	br	10102eec <__alt_data_end+0xfffe2eec>
101031a4:	90a4703a 	and	r18,r18,r2
101031a8:	903f4e26 	beq	r18,zero,10102ee4 <__alt_data_end+0xfffe2ee4>
101031ac:	003f4a06 	br	10102ed8 <__alt_data_end+0xfffe2ed8>
101031b0:	00800084 	movi	r2,2
101031b4:	10c5c83a 	sub	r2,r2,r3
101031b8:	003f8406 	br	10102fcc <__alt_data_end+0xfffe2fcc>
101031bc:	d9402e17 	ldw	r5,184(sp)
101031c0:	d9002e17 	ldw	r4,184(sp)
101031c4:	ac400043 	ldbu	r17,1(r21)
101031c8:	29400017 	ldw	r5,0(r5)
101031cc:	20800104 	addi	r2,r4,4
101031d0:	d8802e15 	stw	r2,184(sp)
101031d4:	d9402a15 	stw	r5,168(sp)
101031d8:	182b883a 	mov	r21,r3
101031dc:	283e7b0e 	bge	r5,zero,10102bcc <__alt_data_end+0xfffe2bcc>
101031e0:	8c403fcc 	andi	r17,r17,255
101031e4:	017fffc4 	movi	r5,-1
101031e8:	8c40201c 	xori	r17,r17,128
101031ec:	d9402a15 	stw	r5,168(sp)
101031f0:	8c7fe004 	addi	r17,r17,-128
101031f4:	0037d706 	br	10101154 <__alt_data_end+0xfffe1154>
101031f8:	d8c02a17 	ldw	r3,168(sp)
101031fc:	18c00084 	addi	r3,r3,2
10103200:	d8c02b15 	stw	r3,172(sp)
10103204:	1805883a 	mov	r2,r3
10103208:	183d970e 	bge	r3,zero,10102868 <__alt_data_end+0xfffe2868>
1010320c:	003fd706 	br	1010316c <__alt_data_end+0xfffe316c>
10103210:	0005883a 	mov	r2,zero
10103214:	003f8f06 	br	10103054 <__alt_data_end+0xfffe3054>
10103218:	9080004c 	andi	r2,r18,1
1010321c:	103f821e 	bne	r2,zero,10103028 <__alt_data_end+0xfffe3028>
10103220:	d8802117 	ldw	r2,132(sp)
10103224:	1405c83a 	sub	r2,r2,r16
10103228:	d8803315 	stw	r2,204(sp)
1010322c:	b47ef426 	beq	r22,r17,10102e00 <__alt_data_end+0xfffe2e00>
10103230:	dd802617 	ldw	r22,152(sp)
10103234:	003f1206 	br	10102e80 <__alt_data_end+0xfffe2e80>
10103238:	d8c02b03 	ldbu	r3,172(sp)
1010323c:	d8c02785 	stb	r3,158(sp)
10103240:	0038df06 	br	101015c0 <__alt_data_end+0xfffe15c0>
10103244:	d8c02b03 	ldbu	r3,172(sp)
10103248:	d8c02785 	stb	r3,158(sp)
1010324c:	0038aa06 	br	101014f8 <__alt_data_end+0xfffe14f8>
10103250:	d8c02b03 	ldbu	r3,172(sp)
10103254:	d8c02785 	stb	r3,158(sp)
10103258:	003a4306 	br	10101b68 <__alt_data_end+0xfffe1b68>
1010325c:	d8c02b03 	ldbu	r3,172(sp)
10103260:	d8c02785 	stb	r3,158(sp)
10103264:	003af506 	br	10101e3c <__alt_data_end+0xfffe1e3c>
10103268:	0005883a 	mov	r2,zero
1010326c:	003d7b06 	br	1010285c <__alt_data_end+0xfffe285c>
10103270:	d8802344 	addi	r2,sp,141
10103274:	003f1006 	br	10102eb8 <__alt_data_end+0xfffe2eb8>
10103278:	d8c02b03 	ldbu	r3,172(sp)
1010327c:	d8c02785 	stb	r3,158(sp)
10103280:	0038fd06 	br	10101678 <__alt_data_end+0xfffe1678>
10103284:	d8c02b03 	ldbu	r3,172(sp)
10103288:	d8c02785 	stb	r3,158(sp)
1010328c:	003a9706 	br	10101cec <__alt_data_end+0xfffe1cec>
10103290:	d8c02b03 	ldbu	r3,172(sp)
10103294:	d8c02785 	stb	r3,158(sp)
10103298:	003a1806 	br	10101afc <__alt_data_end+0xfffe1afc>
1010329c:	d8c02b03 	ldbu	r3,172(sp)
101032a0:	d8c02785 	stb	r3,158(sp)
101032a4:	003abe06 	br	10101da0 <__alt_data_end+0xfffe1da0>

101032a8 <__vfprintf_internal>:
101032a8:	00840474 	movhi	r2,4113
101032ac:	1088ff04 	addi	r2,r2,9212
101032b0:	300f883a 	mov	r7,r6
101032b4:	280d883a 	mov	r6,r5
101032b8:	200b883a 	mov	r5,r4
101032bc:	11000017 	ldw	r4,0(r2)
101032c0:	0100fcc1 	jmpi	10100fcc <___vfprintf_internal_r>

101032c4 <__sbprintf>:
101032c4:	2880030b 	ldhu	r2,12(r5)
101032c8:	2ac01917 	ldw	r11,100(r5)
101032cc:	2a80038b 	ldhu	r10,14(r5)
101032d0:	2a400717 	ldw	r9,28(r5)
101032d4:	2a000917 	ldw	r8,36(r5)
101032d8:	defee204 	addi	sp,sp,-1144
101032dc:	00c10004 	movi	r3,1024
101032e0:	dc011a15 	stw	r16,1128(sp)
101032e4:	10bfff4c 	andi	r2,r2,65533
101032e8:	2821883a 	mov	r16,r5
101032ec:	d8cb883a 	add	r5,sp,r3
101032f0:	dc811c15 	stw	r18,1136(sp)
101032f4:	dc411b15 	stw	r17,1132(sp)
101032f8:	dfc11d15 	stw	ra,1140(sp)
101032fc:	2025883a 	mov	r18,r4
10103300:	d881030d 	sth	r2,1036(sp)
10103304:	dac11915 	stw	r11,1124(sp)
10103308:	da81038d 	sth	r10,1038(sp)
1010330c:	da410715 	stw	r9,1052(sp)
10103310:	da010915 	stw	r8,1060(sp)
10103314:	dec10015 	stw	sp,1024(sp)
10103318:	dec10415 	stw	sp,1040(sp)
1010331c:	d8c10215 	stw	r3,1032(sp)
10103320:	d8c10515 	stw	r3,1044(sp)
10103324:	d8010615 	stw	zero,1048(sp)
10103328:	0100fcc0 	call	10100fcc <___vfprintf_internal_r>
1010332c:	1023883a 	mov	r17,r2
10103330:	10000416 	blt	r2,zero,10103344 <__sbprintf+0x80>
10103334:	d9410004 	addi	r5,sp,1024
10103338:	9009883a 	mov	r4,r18
1010333c:	0104fa00 	call	10104fa0 <_fflush_r>
10103340:	10000d1e 	bne	r2,zero,10103378 <__sbprintf+0xb4>
10103344:	d881030b 	ldhu	r2,1036(sp)
10103348:	1080100c 	andi	r2,r2,64
1010334c:	10000326 	beq	r2,zero,1010335c <__sbprintf+0x98>
10103350:	8080030b 	ldhu	r2,12(r16)
10103354:	10801014 	ori	r2,r2,64
10103358:	8080030d 	sth	r2,12(r16)
1010335c:	8805883a 	mov	r2,r17
10103360:	dfc11d17 	ldw	ra,1140(sp)
10103364:	dc811c17 	ldw	r18,1136(sp)
10103368:	dc411b17 	ldw	r17,1132(sp)
1010336c:	dc011a17 	ldw	r16,1128(sp)
10103370:	dec11e04 	addi	sp,sp,1144
10103374:	f800283a 	ret
10103378:	047fffc4 	movi	r17,-1
1010337c:	003ff106 	br	10103344 <__alt_data_end+0xfffe3344>

10103380 <__swsetup_r>:
10103380:	00840474 	movhi	r2,4113
10103384:	defffd04 	addi	sp,sp,-12
10103388:	1088ff04 	addi	r2,r2,9212
1010338c:	dc400115 	stw	r17,4(sp)
10103390:	2023883a 	mov	r17,r4
10103394:	11000017 	ldw	r4,0(r2)
10103398:	dc000015 	stw	r16,0(sp)
1010339c:	dfc00215 	stw	ra,8(sp)
101033a0:	2821883a 	mov	r16,r5
101033a4:	20000226 	beq	r4,zero,101033b0 <__swsetup_r+0x30>
101033a8:	20800e17 	ldw	r2,56(r4)
101033ac:	10003126 	beq	r2,zero,10103474 <__swsetup_r+0xf4>
101033b0:	8080030b 	ldhu	r2,12(r16)
101033b4:	10c0020c 	andi	r3,r2,8
101033b8:	1009883a 	mov	r4,r2
101033bc:	18000f26 	beq	r3,zero,101033fc <__swsetup_r+0x7c>
101033c0:	80c00417 	ldw	r3,16(r16)
101033c4:	18001526 	beq	r3,zero,1010341c <__swsetup_r+0x9c>
101033c8:	1100004c 	andi	r4,r2,1
101033cc:	20001c1e 	bne	r4,zero,10103440 <__swsetup_r+0xc0>
101033d0:	1080008c 	andi	r2,r2,2
101033d4:	1000291e 	bne	r2,zero,1010347c <__swsetup_r+0xfc>
101033d8:	80800517 	ldw	r2,20(r16)
101033dc:	80800215 	stw	r2,8(r16)
101033e0:	18001c26 	beq	r3,zero,10103454 <__swsetup_r+0xd4>
101033e4:	0005883a 	mov	r2,zero
101033e8:	dfc00217 	ldw	ra,8(sp)
101033ec:	dc400117 	ldw	r17,4(sp)
101033f0:	dc000017 	ldw	r16,0(sp)
101033f4:	dec00304 	addi	sp,sp,12
101033f8:	f800283a 	ret
101033fc:	2080040c 	andi	r2,r4,16
10103400:	10002e26 	beq	r2,zero,101034bc <__swsetup_r+0x13c>
10103404:	2080010c 	andi	r2,r4,4
10103408:	10001e1e 	bne	r2,zero,10103484 <__swsetup_r+0x104>
1010340c:	80c00417 	ldw	r3,16(r16)
10103410:	20800214 	ori	r2,r4,8
10103414:	8080030d 	sth	r2,12(r16)
10103418:	183feb1e 	bne	r3,zero,101033c8 <__alt_data_end+0xfffe33c8>
1010341c:	1100a00c 	andi	r4,r2,640
10103420:	01408004 	movi	r5,512
10103424:	217fe826 	beq	r4,r5,101033c8 <__alt_data_end+0xfffe33c8>
10103428:	800b883a 	mov	r5,r16
1010342c:	8809883a 	mov	r4,r17
10103430:	0105f3c0 	call	10105f3c <__smakebuf_r>
10103434:	8080030b 	ldhu	r2,12(r16)
10103438:	80c00417 	ldw	r3,16(r16)
1010343c:	003fe206 	br	101033c8 <__alt_data_end+0xfffe33c8>
10103440:	80800517 	ldw	r2,20(r16)
10103444:	80000215 	stw	zero,8(r16)
10103448:	0085c83a 	sub	r2,zero,r2
1010344c:	80800615 	stw	r2,24(r16)
10103450:	183fe41e 	bne	r3,zero,101033e4 <__alt_data_end+0xfffe33e4>
10103454:	80c0030b 	ldhu	r3,12(r16)
10103458:	0005883a 	mov	r2,zero
1010345c:	1900200c 	andi	r4,r3,128
10103460:	203fe126 	beq	r4,zero,101033e8 <__alt_data_end+0xfffe33e8>
10103464:	18c01014 	ori	r3,r3,64
10103468:	80c0030d 	sth	r3,12(r16)
1010346c:	00bfffc4 	movi	r2,-1
10103470:	003fdd06 	br	101033e8 <__alt_data_end+0xfffe33e8>
10103474:	010538c0 	call	1010538c <__sinit>
10103478:	003fcd06 	br	101033b0 <__alt_data_end+0xfffe33b0>
1010347c:	0005883a 	mov	r2,zero
10103480:	003fd606 	br	101033dc <__alt_data_end+0xfffe33dc>
10103484:	81400c17 	ldw	r5,48(r16)
10103488:	28000626 	beq	r5,zero,101034a4 <__swsetup_r+0x124>
1010348c:	80801004 	addi	r2,r16,64
10103490:	28800326 	beq	r5,r2,101034a0 <__swsetup_r+0x120>
10103494:	8809883a 	mov	r4,r17
10103498:	01055000 	call	10105500 <_free_r>
1010349c:	8100030b 	ldhu	r4,12(r16)
101034a0:	80000c15 	stw	zero,48(r16)
101034a4:	80c00417 	ldw	r3,16(r16)
101034a8:	00bff6c4 	movi	r2,-37
101034ac:	1108703a 	and	r4,r2,r4
101034b0:	80000115 	stw	zero,4(r16)
101034b4:	80c00015 	stw	r3,0(r16)
101034b8:	003fd506 	br	10103410 <__alt_data_end+0xfffe3410>
101034bc:	00800244 	movi	r2,9
101034c0:	88800015 	stw	r2,0(r17)
101034c4:	20801014 	ori	r2,r4,64
101034c8:	8080030d 	sth	r2,12(r16)
101034cc:	00bfffc4 	movi	r2,-1
101034d0:	003fc506 	br	101033e8 <__alt_data_end+0xfffe33e8>

101034d4 <quorem>:
101034d4:	defff204 	addi	sp,sp,-56
101034d8:	ddc00b15 	stw	r23,44(sp)
101034dc:	20800417 	ldw	r2,16(r4)
101034e0:	2dc00417 	ldw	r23,16(r5)
101034e4:	dfc00d15 	stw	ra,52(sp)
101034e8:	df000c15 	stw	fp,48(sp)
101034ec:	dd800a15 	stw	r22,40(sp)
101034f0:	dd400915 	stw	r21,36(sp)
101034f4:	dd000815 	stw	r20,32(sp)
101034f8:	dcc00715 	stw	r19,28(sp)
101034fc:	dc800615 	stw	r18,24(sp)
10103500:	dc400515 	stw	r17,20(sp)
10103504:	dc000415 	stw	r16,16(sp)
10103508:	15c07a16 	blt	r2,r23,101036f4 <quorem+0x220>
1010350c:	bdffffc4 	addi	r23,r23,-1
10103510:	bde9883a 	add	r20,r23,r23
10103514:	28c00504 	addi	r3,r5,20
10103518:	a529883a 	add	r20,r20,r20
1010351c:	1d39883a 	add	fp,r3,r20
10103520:	24c00504 	addi	r19,r4,20
10103524:	d9400215 	stw	r5,8(sp)
10103528:	9d29883a 	add	r20,r19,r20
1010352c:	e1400017 	ldw	r5,0(fp)
10103530:	d9000015 	stw	r4,0(sp)
10103534:	a1000017 	ldw	r4,0(r20)
10103538:	29400044 	addi	r5,r5,1
1010353c:	d8c00115 	stw	r3,4(sp)
10103540:	dd000315 	stw	r20,12(sp)
10103544:	0100bc80 	call	10100bc8 <__udivsi3>
10103548:	1025883a 	mov	r18,r2
1010354c:	10003026 	beq	r2,zero,10103610 <quorem+0x13c>
10103550:	dc400117 	ldw	r17,4(sp)
10103554:	9829883a 	mov	r20,r19
10103558:	002d883a 	mov	r22,zero
1010355c:	0021883a 	mov	r16,zero
10103560:	8d400017 	ldw	r21,0(r17)
10103564:	900b883a 	mov	r5,r18
10103568:	8c400104 	addi	r17,r17,4
1010356c:	a93fffcc 	andi	r4,r21,65535
10103570:	0100c840 	call	10100c84 <__mulsi3>
10103574:	a808d43a 	srli	r4,r21,16
10103578:	900b883a 	mov	r5,r18
1010357c:	15ad883a 	add	r22,r2,r22
10103580:	0100c840 	call	10100c84 <__mulsi3>
10103584:	a1000017 	ldw	r4,0(r20)
10103588:	b00cd43a 	srli	r6,r22,16
1010358c:	b0ffffcc 	andi	r3,r22,65535
10103590:	217fffcc 	andi	r5,r4,65535
10103594:	2c21883a 	add	r16,r5,r16
10103598:	80c7c83a 	sub	r3,r16,r3
1010359c:	2008d43a 	srli	r4,r4,16
101035a0:	1185883a 	add	r2,r2,r6
101035a4:	1821d43a 	srai	r16,r3,16
101035a8:	117fffcc 	andi	r5,r2,65535
101035ac:	2149c83a 	sub	r4,r4,r5
101035b0:	2421883a 	add	r16,r4,r16
101035b4:	8008943a 	slli	r4,r16,16
101035b8:	18ffffcc 	andi	r3,r3,65535
101035bc:	102cd43a 	srli	r22,r2,16
101035c0:	20c8b03a 	or	r4,r4,r3
101035c4:	a1000015 	stw	r4,0(r20)
101035c8:	8021d43a 	srai	r16,r16,16
101035cc:	a5000104 	addi	r20,r20,4
101035d0:	e47fe32e 	bgeu	fp,r17,10103560 <__alt_data_end+0xfffe3560>
101035d4:	d8c00317 	ldw	r3,12(sp)
101035d8:	18800017 	ldw	r2,0(r3)
101035dc:	10000c1e 	bne	r2,zero,10103610 <quorem+0x13c>
101035e0:	18bfff04 	addi	r2,r3,-4
101035e4:	9880082e 	bgeu	r19,r2,10103608 <quorem+0x134>
101035e8:	18ffff17 	ldw	r3,-4(r3)
101035ec:	18000326 	beq	r3,zero,101035fc <quorem+0x128>
101035f0:	00000506 	br	10103608 <quorem+0x134>
101035f4:	10c00017 	ldw	r3,0(r2)
101035f8:	1800031e 	bne	r3,zero,10103608 <quorem+0x134>
101035fc:	10bfff04 	addi	r2,r2,-4
10103600:	bdffffc4 	addi	r23,r23,-1
10103604:	98bffb36 	bltu	r19,r2,101035f4 <__alt_data_end+0xfffe35f4>
10103608:	d8c00017 	ldw	r3,0(sp)
1010360c:	1dc00415 	stw	r23,16(r3)
10103610:	d9400217 	ldw	r5,8(sp)
10103614:	d9000017 	ldw	r4,0(sp)
10103618:	01075f00 	call	101075f0 <__mcmp>
1010361c:	10002816 	blt	r2,zero,101036c0 <quorem+0x1ec>
10103620:	dc400117 	ldw	r17,4(sp)
10103624:	94800044 	addi	r18,r18,1
10103628:	980d883a 	mov	r6,r19
1010362c:	0007883a 	mov	r3,zero
10103630:	31000017 	ldw	r4,0(r6)
10103634:	89400017 	ldw	r5,0(r17)
10103638:	31800104 	addi	r6,r6,4
1010363c:	20bfffcc 	andi	r2,r4,65535
10103640:	10c7883a 	add	r3,r2,r3
10103644:	28bfffcc 	andi	r2,r5,65535
10103648:	1885c83a 	sub	r2,r3,r2
1010364c:	280ad43a 	srli	r5,r5,16
10103650:	2008d43a 	srli	r4,r4,16
10103654:	1007d43a 	srai	r3,r2,16
10103658:	10bfffcc 	andi	r2,r2,65535
1010365c:	2149c83a 	sub	r4,r4,r5
10103660:	20c9883a 	add	r4,r4,r3
10103664:	200a943a 	slli	r5,r4,16
10103668:	8c400104 	addi	r17,r17,4
1010366c:	2007d43a 	srai	r3,r4,16
10103670:	2884b03a 	or	r2,r5,r2
10103674:	30bfff15 	stw	r2,-4(r6)
10103678:	e47fed2e 	bgeu	fp,r17,10103630 <__alt_data_end+0xfffe3630>
1010367c:	bdc5883a 	add	r2,r23,r23
10103680:	1085883a 	add	r2,r2,r2
10103684:	9887883a 	add	r3,r19,r2
10103688:	18800017 	ldw	r2,0(r3)
1010368c:	10000c1e 	bne	r2,zero,101036c0 <quorem+0x1ec>
10103690:	18bfff04 	addi	r2,r3,-4
10103694:	9880082e 	bgeu	r19,r2,101036b8 <quorem+0x1e4>
10103698:	18ffff17 	ldw	r3,-4(r3)
1010369c:	18000326 	beq	r3,zero,101036ac <quorem+0x1d8>
101036a0:	00000506 	br	101036b8 <quorem+0x1e4>
101036a4:	10c00017 	ldw	r3,0(r2)
101036a8:	1800031e 	bne	r3,zero,101036b8 <quorem+0x1e4>
101036ac:	10bfff04 	addi	r2,r2,-4
101036b0:	bdffffc4 	addi	r23,r23,-1
101036b4:	98bffb36 	bltu	r19,r2,101036a4 <__alt_data_end+0xfffe36a4>
101036b8:	d8c00017 	ldw	r3,0(sp)
101036bc:	1dc00415 	stw	r23,16(r3)
101036c0:	9005883a 	mov	r2,r18
101036c4:	dfc00d17 	ldw	ra,52(sp)
101036c8:	df000c17 	ldw	fp,48(sp)
101036cc:	ddc00b17 	ldw	r23,44(sp)
101036d0:	dd800a17 	ldw	r22,40(sp)
101036d4:	dd400917 	ldw	r21,36(sp)
101036d8:	dd000817 	ldw	r20,32(sp)
101036dc:	dcc00717 	ldw	r19,28(sp)
101036e0:	dc800617 	ldw	r18,24(sp)
101036e4:	dc400517 	ldw	r17,20(sp)
101036e8:	dc000417 	ldw	r16,16(sp)
101036ec:	dec00e04 	addi	sp,sp,56
101036f0:	f800283a 	ret
101036f4:	0005883a 	mov	r2,zero
101036f8:	003ff206 	br	101036c4 <__alt_data_end+0xfffe36c4>

101036fc <_dtoa_r>:
101036fc:	20801017 	ldw	r2,64(r4)
10103700:	deffde04 	addi	sp,sp,-136
10103704:	df002015 	stw	fp,128(sp)
10103708:	dcc01b15 	stw	r19,108(sp)
1010370c:	dc801a15 	stw	r18,104(sp)
10103710:	dc401915 	stw	r17,100(sp)
10103714:	dc001815 	stw	r16,96(sp)
10103718:	dfc02115 	stw	ra,132(sp)
1010371c:	ddc01f15 	stw	r23,124(sp)
10103720:	dd801e15 	stw	r22,120(sp)
10103724:	dd401d15 	stw	r21,116(sp)
10103728:	dd001c15 	stw	r20,112(sp)
1010372c:	d9c00315 	stw	r7,12(sp)
10103730:	2039883a 	mov	fp,r4
10103734:	3023883a 	mov	r17,r6
10103738:	2825883a 	mov	r18,r5
1010373c:	dc002417 	ldw	r16,144(sp)
10103740:	3027883a 	mov	r19,r6
10103744:	10000826 	beq	r2,zero,10103768 <_dtoa_r+0x6c>
10103748:	21801117 	ldw	r6,68(r4)
1010374c:	00c00044 	movi	r3,1
10103750:	100b883a 	mov	r5,r2
10103754:	1986983a 	sll	r3,r3,r6
10103758:	11800115 	stw	r6,4(r2)
1010375c:	10c00215 	stw	r3,8(r2)
10103760:	0106d140 	call	10106d14 <_Bfree>
10103764:	e0001015 	stw	zero,64(fp)
10103768:	88002e16 	blt	r17,zero,10103824 <_dtoa_r+0x128>
1010376c:	80000015 	stw	zero,0(r16)
10103770:	889ffc2c 	andhi	r2,r17,32752
10103774:	00dffc34 	movhi	r3,32752
10103778:	10c01c26 	beq	r2,r3,101037ec <_dtoa_r+0xf0>
1010377c:	000d883a 	mov	r6,zero
10103780:	000f883a 	mov	r7,zero
10103784:	9009883a 	mov	r4,r18
10103788:	980b883a 	mov	r5,r19
1010378c:	010c3e80 	call	1010c3e8 <__eqdf2>
10103790:	10002b1e 	bne	r2,zero,10103840 <_dtoa_r+0x144>
10103794:	d9c02317 	ldw	r7,140(sp)
10103798:	00800044 	movi	r2,1
1010379c:	38800015 	stw	r2,0(r7)
101037a0:	d8802517 	ldw	r2,148(sp)
101037a4:	10019e26 	beq	r2,zero,10103e20 <_dtoa_r+0x724>
101037a8:	d8c02517 	ldw	r3,148(sp)
101037ac:	00840474 	movhi	r2,4113
101037b0:	10819744 	addi	r2,r2,1629
101037b4:	18800015 	stw	r2,0(r3)
101037b8:	10bfffc4 	addi	r2,r2,-1
101037bc:	dfc02117 	ldw	ra,132(sp)
101037c0:	df002017 	ldw	fp,128(sp)
101037c4:	ddc01f17 	ldw	r23,124(sp)
101037c8:	dd801e17 	ldw	r22,120(sp)
101037cc:	dd401d17 	ldw	r21,116(sp)
101037d0:	dd001c17 	ldw	r20,112(sp)
101037d4:	dcc01b17 	ldw	r19,108(sp)
101037d8:	dc801a17 	ldw	r18,104(sp)
101037dc:	dc401917 	ldw	r17,100(sp)
101037e0:	dc001817 	ldw	r16,96(sp)
101037e4:	dec02204 	addi	sp,sp,136
101037e8:	f800283a 	ret
101037ec:	d8c02317 	ldw	r3,140(sp)
101037f0:	0089c3c4 	movi	r2,9999
101037f4:	18800015 	stw	r2,0(r3)
101037f8:	90017726 	beq	r18,zero,10103dd8 <_dtoa_r+0x6dc>
101037fc:	00840474 	movhi	r2,4113
10103800:	1081a304 	addi	r2,r2,1676
10103804:	d9002517 	ldw	r4,148(sp)
10103808:	203fec26 	beq	r4,zero,101037bc <__alt_data_end+0xfffe37bc>
1010380c:	10c000c7 	ldb	r3,3(r2)
10103810:	1801781e 	bne	r3,zero,10103df4 <_dtoa_r+0x6f8>
10103814:	10c000c4 	addi	r3,r2,3
10103818:	d9802517 	ldw	r6,148(sp)
1010381c:	30c00015 	stw	r3,0(r6)
10103820:	003fe606 	br	101037bc <__alt_data_end+0xfffe37bc>
10103824:	04e00034 	movhi	r19,32768
10103828:	9cffffc4 	addi	r19,r19,-1
1010382c:	00800044 	movi	r2,1
10103830:	8ce6703a 	and	r19,r17,r19
10103834:	80800015 	stw	r2,0(r16)
10103838:	9823883a 	mov	r17,r19
1010383c:	003fcc06 	br	10103770 <__alt_data_end+0xfffe3770>
10103840:	d8800204 	addi	r2,sp,8
10103844:	d8800015 	stw	r2,0(sp)
10103848:	d9c00104 	addi	r7,sp,4
1010384c:	900b883a 	mov	r5,r18
10103850:	980d883a 	mov	r6,r19
10103854:	e009883a 	mov	r4,fp
10103858:	8820d53a 	srli	r16,r17,20
1010385c:	01079bc0 	call	101079bc <__d2b>
10103860:	d8800915 	stw	r2,36(sp)
10103864:	8001651e 	bne	r16,zero,10103dfc <_dtoa_r+0x700>
10103868:	dd800217 	ldw	r22,8(sp)
1010386c:	dc000117 	ldw	r16,4(sp)
10103870:	00800804 	movi	r2,32
10103874:	b421883a 	add	r16,r22,r16
10103878:	80c10c84 	addi	r3,r16,1074
1010387c:	10c2d10e 	bge	r2,r3,101043c4 <_dtoa_r+0xcc8>
10103880:	00801004 	movi	r2,64
10103884:	81010484 	addi	r4,r16,1042
10103888:	10c7c83a 	sub	r3,r2,r3
1010388c:	9108d83a 	srl	r4,r18,r4
10103890:	88e2983a 	sll	r17,r17,r3
10103894:	2448b03a 	or	r4,r4,r17
10103898:	010d9040 	call	1010d904 <__floatunsidf>
1010389c:	017f8434 	movhi	r5,65040
101038a0:	01800044 	movi	r6,1
101038a4:	1009883a 	mov	r4,r2
101038a8:	194b883a 	add	r5,r3,r5
101038ac:	843fffc4 	addi	r16,r16,-1
101038b0:	d9801115 	stw	r6,68(sp)
101038b4:	000d883a 	mov	r6,zero
101038b8:	01cffe34 	movhi	r7,16376
101038bc:	010ceac0 	call	1010ceac <__subdf3>
101038c0:	0198dbf4 	movhi	r6,25455
101038c4:	01cff4f4 	movhi	r7,16339
101038c8:	3190d844 	addi	r6,r6,17249
101038cc:	39e1e9c4 	addi	r7,r7,-30809
101038d0:	1009883a 	mov	r4,r2
101038d4:	180b883a 	mov	r5,r3
101038d8:	010c6400 	call	1010c640 <__muldf3>
101038dc:	01a2d874 	movhi	r6,35681
101038e0:	01cff1f4 	movhi	r7,16327
101038e4:	31b22cc4 	addi	r6,r6,-14157
101038e8:	39e28a04 	addi	r7,r7,-30168
101038ec:	180b883a 	mov	r5,r3
101038f0:	1009883a 	mov	r4,r2
101038f4:	010b16c0 	call	1010b16c <__adddf3>
101038f8:	8009883a 	mov	r4,r16
101038fc:	1029883a 	mov	r20,r2
10103900:	1823883a 	mov	r17,r3
10103904:	010d8280 	call	1010d828 <__floatsidf>
10103908:	019427f4 	movhi	r6,20639
1010390c:	01cff4f4 	movhi	r7,16339
10103910:	319e7ec4 	addi	r6,r6,31227
10103914:	39d104c4 	addi	r7,r7,17427
10103918:	1009883a 	mov	r4,r2
1010391c:	180b883a 	mov	r5,r3
10103920:	010c6400 	call	1010c640 <__muldf3>
10103924:	100d883a 	mov	r6,r2
10103928:	180f883a 	mov	r7,r3
1010392c:	a009883a 	mov	r4,r20
10103930:	880b883a 	mov	r5,r17
10103934:	010b16c0 	call	1010b16c <__adddf3>
10103938:	1009883a 	mov	r4,r2
1010393c:	180b883a 	mov	r5,r3
10103940:	1029883a 	mov	r20,r2
10103944:	1823883a 	mov	r17,r3
10103948:	010d7a80 	call	1010d7a8 <__fixdfsi>
1010394c:	000d883a 	mov	r6,zero
10103950:	000f883a 	mov	r7,zero
10103954:	a009883a 	mov	r4,r20
10103958:	880b883a 	mov	r5,r17
1010395c:	d8800515 	stw	r2,20(sp)
10103960:	010c54c0 	call	1010c54c <__ledf2>
10103964:	10028716 	blt	r2,zero,10104384 <_dtoa_r+0xc88>
10103968:	d8c00517 	ldw	r3,20(sp)
1010396c:	00800584 	movi	r2,22
10103970:	10c27536 	bltu	r2,r3,10104348 <_dtoa_r+0xc4c>
10103974:	180490fa 	slli	r2,r3,3
10103978:	00c40474 	movhi	r3,4113
1010397c:	18c1bf04 	addi	r3,r3,1788
10103980:	1885883a 	add	r2,r3,r2
10103984:	11000017 	ldw	r4,0(r2)
10103988:	11400117 	ldw	r5,4(r2)
1010398c:	900d883a 	mov	r6,r18
10103990:	980f883a 	mov	r7,r19
10103994:	010c4700 	call	1010c470 <__gedf2>
10103998:	00828d0e 	bge	zero,r2,101043d0 <_dtoa_r+0xcd4>
1010399c:	d9000517 	ldw	r4,20(sp)
101039a0:	d8000e15 	stw	zero,56(sp)
101039a4:	213fffc4 	addi	r4,r4,-1
101039a8:	d9000515 	stw	r4,20(sp)
101039ac:	b42dc83a 	sub	r22,r22,r16
101039b0:	b5bfffc4 	addi	r22,r22,-1
101039b4:	b0026f16 	blt	r22,zero,10104374 <_dtoa_r+0xc78>
101039b8:	d8000815 	stw	zero,32(sp)
101039bc:	d9c00517 	ldw	r7,20(sp)
101039c0:	38026416 	blt	r7,zero,10104354 <_dtoa_r+0xc58>
101039c4:	b1ed883a 	add	r22,r22,r7
101039c8:	d9c00d15 	stw	r7,52(sp)
101039cc:	d8000a15 	stw	zero,40(sp)
101039d0:	d9800317 	ldw	r6,12(sp)
101039d4:	00800244 	movi	r2,9
101039d8:	11811436 	bltu	r2,r6,10103e2c <_dtoa_r+0x730>
101039dc:	00800144 	movi	r2,5
101039e0:	1184e10e 	bge	r2,r6,10104d68 <_dtoa_r+0x166c>
101039e4:	31bfff04 	addi	r6,r6,-4
101039e8:	d9800315 	stw	r6,12(sp)
101039ec:	0023883a 	mov	r17,zero
101039f0:	d9800317 	ldw	r6,12(sp)
101039f4:	008000c4 	movi	r2,3
101039f8:	30836726 	beq	r6,r2,10104798 <_dtoa_r+0x109c>
101039fc:	1183410e 	bge	r2,r6,10104704 <_dtoa_r+0x1008>
10103a00:	d9c00317 	ldw	r7,12(sp)
10103a04:	00800104 	movi	r2,4
10103a08:	38827c26 	beq	r7,r2,101043fc <_dtoa_r+0xd00>
10103a0c:	00800144 	movi	r2,5
10103a10:	3884c41e 	bne	r7,r2,10104d24 <_dtoa_r+0x1628>
10103a14:	00800044 	movi	r2,1
10103a18:	d8800b15 	stw	r2,44(sp)
10103a1c:	d8c00517 	ldw	r3,20(sp)
10103a20:	d9002217 	ldw	r4,136(sp)
10103a24:	1907883a 	add	r3,r3,r4
10103a28:	19800044 	addi	r6,r3,1
10103a2c:	d8c00c15 	stw	r3,48(sp)
10103a30:	d9800615 	stw	r6,24(sp)
10103a34:	0183a40e 	bge	zero,r6,101048c8 <_dtoa_r+0x11cc>
10103a38:	d9800617 	ldw	r6,24(sp)
10103a3c:	3021883a 	mov	r16,r6
10103a40:	e0001115 	stw	zero,68(fp)
10103a44:	008005c4 	movi	r2,23
10103a48:	1184c92e 	bgeu	r2,r6,10104d70 <_dtoa_r+0x1674>
10103a4c:	00c00044 	movi	r3,1
10103a50:	00800104 	movi	r2,4
10103a54:	1085883a 	add	r2,r2,r2
10103a58:	11000504 	addi	r4,r2,20
10103a5c:	180b883a 	mov	r5,r3
10103a60:	18c00044 	addi	r3,r3,1
10103a64:	313ffb2e 	bgeu	r6,r4,10103a54 <__alt_data_end+0xfffe3a54>
10103a68:	e1401115 	stw	r5,68(fp)
10103a6c:	e009883a 	mov	r4,fp
10103a70:	0106c6c0 	call	10106c6c <_Balloc>
10103a74:	d8800715 	stw	r2,28(sp)
10103a78:	e0801015 	stw	r2,64(fp)
10103a7c:	00800384 	movi	r2,14
10103a80:	1400f736 	bltu	r2,r16,10103e60 <_dtoa_r+0x764>
10103a84:	8800f626 	beq	r17,zero,10103e60 <_dtoa_r+0x764>
10103a88:	d9c00517 	ldw	r7,20(sp)
10103a8c:	01c39a0e 	bge	zero,r7,101048f8 <_dtoa_r+0x11fc>
10103a90:	388003cc 	andi	r2,r7,15
10103a94:	100490fa 	slli	r2,r2,3
10103a98:	382bd13a 	srai	r21,r7,4
10103a9c:	00c40474 	movhi	r3,4113
10103aa0:	18c1bf04 	addi	r3,r3,1788
10103aa4:	1885883a 	add	r2,r3,r2
10103aa8:	a8c0040c 	andi	r3,r21,16
10103aac:	12400017 	ldw	r9,0(r2)
10103ab0:	12000117 	ldw	r8,4(r2)
10103ab4:	18037926 	beq	r3,zero,1010489c <_dtoa_r+0x11a0>
10103ab8:	00840474 	movhi	r2,4113
10103abc:	1081b504 	addi	r2,r2,1748
10103ac0:	11800817 	ldw	r6,32(r2)
10103ac4:	11c00917 	ldw	r7,36(r2)
10103ac8:	9009883a 	mov	r4,r18
10103acc:	980b883a 	mov	r5,r19
10103ad0:	da001715 	stw	r8,92(sp)
10103ad4:	da401615 	stw	r9,88(sp)
10103ad8:	010ba180 	call	1010ba18 <__divdf3>
10103adc:	da001717 	ldw	r8,92(sp)
10103ae0:	da401617 	ldw	r9,88(sp)
10103ae4:	ad4003cc 	andi	r21,r21,15
10103ae8:	040000c4 	movi	r16,3
10103aec:	1023883a 	mov	r17,r2
10103af0:	1829883a 	mov	r20,r3
10103af4:	a8001126 	beq	r21,zero,10103b3c <_dtoa_r+0x440>
10103af8:	05c40474 	movhi	r23,4113
10103afc:	bdc1b504 	addi	r23,r23,1748
10103b00:	4805883a 	mov	r2,r9
10103b04:	4007883a 	mov	r3,r8
10103b08:	a980004c 	andi	r6,r21,1
10103b0c:	1009883a 	mov	r4,r2
10103b10:	a82bd07a 	srai	r21,r21,1
10103b14:	180b883a 	mov	r5,r3
10103b18:	30000426 	beq	r6,zero,10103b2c <_dtoa_r+0x430>
10103b1c:	b9800017 	ldw	r6,0(r23)
10103b20:	b9c00117 	ldw	r7,4(r23)
10103b24:	84000044 	addi	r16,r16,1
10103b28:	010c6400 	call	1010c640 <__muldf3>
10103b2c:	bdc00204 	addi	r23,r23,8
10103b30:	a83ff51e 	bne	r21,zero,10103b08 <__alt_data_end+0xfffe3b08>
10103b34:	1013883a 	mov	r9,r2
10103b38:	1811883a 	mov	r8,r3
10103b3c:	480d883a 	mov	r6,r9
10103b40:	400f883a 	mov	r7,r8
10103b44:	8809883a 	mov	r4,r17
10103b48:	a00b883a 	mov	r5,r20
10103b4c:	010ba180 	call	1010ba18 <__divdf3>
10103b50:	d8800f15 	stw	r2,60(sp)
10103b54:	d8c01015 	stw	r3,64(sp)
10103b58:	d8c00e17 	ldw	r3,56(sp)
10103b5c:	18000626 	beq	r3,zero,10103b78 <_dtoa_r+0x47c>
10103b60:	d9000f17 	ldw	r4,60(sp)
10103b64:	d9401017 	ldw	r5,64(sp)
10103b68:	000d883a 	mov	r6,zero
10103b6c:	01cffc34 	movhi	r7,16368
10103b70:	010c54c0 	call	1010c54c <__ledf2>
10103b74:	10040b16 	blt	r2,zero,10104ba4 <_dtoa_r+0x14a8>
10103b78:	8009883a 	mov	r4,r16
10103b7c:	010d8280 	call	1010d828 <__floatsidf>
10103b80:	d9800f17 	ldw	r6,60(sp)
10103b84:	d9c01017 	ldw	r7,64(sp)
10103b88:	1009883a 	mov	r4,r2
10103b8c:	180b883a 	mov	r5,r3
10103b90:	010c6400 	call	1010c640 <__muldf3>
10103b94:	000d883a 	mov	r6,zero
10103b98:	01d00734 	movhi	r7,16412
10103b9c:	1009883a 	mov	r4,r2
10103ba0:	180b883a 	mov	r5,r3
10103ba4:	010b16c0 	call	1010b16c <__adddf3>
10103ba8:	1021883a 	mov	r16,r2
10103bac:	d8800617 	ldw	r2,24(sp)
10103bb0:	047f3034 	movhi	r17,64704
10103bb4:	1c63883a 	add	r17,r3,r17
10103bb8:	10031826 	beq	r2,zero,1010481c <_dtoa_r+0x1120>
10103bbc:	d8c00517 	ldw	r3,20(sp)
10103bc0:	db000617 	ldw	r12,24(sp)
10103bc4:	d8c01315 	stw	r3,76(sp)
10103bc8:	d9000b17 	ldw	r4,44(sp)
10103bcc:	20038f26 	beq	r4,zero,10104a0c <_dtoa_r+0x1310>
10103bd0:	60bfffc4 	addi	r2,r12,-1
10103bd4:	100490fa 	slli	r2,r2,3
10103bd8:	00c40474 	movhi	r3,4113
10103bdc:	18c1bf04 	addi	r3,r3,1788
10103be0:	1885883a 	add	r2,r3,r2
10103be4:	11800017 	ldw	r6,0(r2)
10103be8:	11c00117 	ldw	r7,4(r2)
10103bec:	d8800717 	ldw	r2,28(sp)
10103bf0:	0009883a 	mov	r4,zero
10103bf4:	014ff834 	movhi	r5,16352
10103bf8:	db001615 	stw	r12,88(sp)
10103bfc:	15c00044 	addi	r23,r2,1
10103c00:	010ba180 	call	1010ba18 <__divdf3>
10103c04:	800d883a 	mov	r6,r16
10103c08:	880f883a 	mov	r7,r17
10103c0c:	1009883a 	mov	r4,r2
10103c10:	180b883a 	mov	r5,r3
10103c14:	010ceac0 	call	1010ceac <__subdf3>
10103c18:	d9401017 	ldw	r5,64(sp)
10103c1c:	d9000f17 	ldw	r4,60(sp)
10103c20:	102b883a 	mov	r21,r2
10103c24:	d8c01215 	stw	r3,72(sp)
10103c28:	010d7a80 	call	1010d7a8 <__fixdfsi>
10103c2c:	1009883a 	mov	r4,r2
10103c30:	1029883a 	mov	r20,r2
10103c34:	010d8280 	call	1010d828 <__floatsidf>
10103c38:	d9000f17 	ldw	r4,60(sp)
10103c3c:	d9401017 	ldw	r5,64(sp)
10103c40:	100d883a 	mov	r6,r2
10103c44:	180f883a 	mov	r7,r3
10103c48:	010ceac0 	call	1010ceac <__subdf3>
10103c4c:	1823883a 	mov	r17,r3
10103c50:	d8c00717 	ldw	r3,28(sp)
10103c54:	d9401217 	ldw	r5,72(sp)
10103c58:	a2000c04 	addi	r8,r20,48
10103c5c:	1021883a 	mov	r16,r2
10103c60:	1a000005 	stb	r8,0(r3)
10103c64:	800d883a 	mov	r6,r16
10103c68:	880f883a 	mov	r7,r17
10103c6c:	a809883a 	mov	r4,r21
10103c70:	4029883a 	mov	r20,r8
10103c74:	010c4700 	call	1010c470 <__gedf2>
10103c78:	00841d16 	blt	zero,r2,10104cf0 <_dtoa_r+0x15f4>
10103c7c:	800d883a 	mov	r6,r16
10103c80:	880f883a 	mov	r7,r17
10103c84:	0009883a 	mov	r4,zero
10103c88:	014ffc34 	movhi	r5,16368
10103c8c:	010ceac0 	call	1010ceac <__subdf3>
10103c90:	d9401217 	ldw	r5,72(sp)
10103c94:	100d883a 	mov	r6,r2
10103c98:	180f883a 	mov	r7,r3
10103c9c:	a809883a 	mov	r4,r21
10103ca0:	010c4700 	call	1010c470 <__gedf2>
10103ca4:	db001617 	ldw	r12,88(sp)
10103ca8:	00840e16 	blt	zero,r2,10104ce4 <_dtoa_r+0x15e8>
10103cac:	00800044 	movi	r2,1
10103cb0:	13006b0e 	bge	r2,r12,10103e60 <_dtoa_r+0x764>
10103cb4:	d9000717 	ldw	r4,28(sp)
10103cb8:	dd800f15 	stw	r22,60(sp)
10103cbc:	dcc01015 	stw	r19,64(sp)
10103cc0:	2319883a 	add	r12,r4,r12
10103cc4:	dcc01217 	ldw	r19,72(sp)
10103cc8:	602d883a 	mov	r22,r12
10103ccc:	dc801215 	stw	r18,72(sp)
10103cd0:	b825883a 	mov	r18,r23
10103cd4:	00000906 	br	10103cfc <_dtoa_r+0x600>
10103cd8:	010ceac0 	call	1010ceac <__subdf3>
10103cdc:	a80d883a 	mov	r6,r21
10103ce0:	980f883a 	mov	r7,r19
10103ce4:	1009883a 	mov	r4,r2
10103ce8:	180b883a 	mov	r5,r3
10103cec:	010c54c0 	call	1010c54c <__ledf2>
10103cf0:	1003e816 	blt	r2,zero,10104c94 <_dtoa_r+0x1598>
10103cf4:	b825883a 	mov	r18,r23
10103cf8:	bd83e926 	beq	r23,r22,10104ca0 <_dtoa_r+0x15a4>
10103cfc:	a809883a 	mov	r4,r21
10103d00:	980b883a 	mov	r5,r19
10103d04:	000d883a 	mov	r6,zero
10103d08:	01d00934 	movhi	r7,16420
10103d0c:	010c6400 	call	1010c640 <__muldf3>
10103d10:	000d883a 	mov	r6,zero
10103d14:	01d00934 	movhi	r7,16420
10103d18:	8009883a 	mov	r4,r16
10103d1c:	880b883a 	mov	r5,r17
10103d20:	102b883a 	mov	r21,r2
10103d24:	1827883a 	mov	r19,r3
10103d28:	010c6400 	call	1010c640 <__muldf3>
10103d2c:	180b883a 	mov	r5,r3
10103d30:	1009883a 	mov	r4,r2
10103d34:	1821883a 	mov	r16,r3
10103d38:	1023883a 	mov	r17,r2
10103d3c:	010d7a80 	call	1010d7a8 <__fixdfsi>
10103d40:	1009883a 	mov	r4,r2
10103d44:	1029883a 	mov	r20,r2
10103d48:	010d8280 	call	1010d828 <__floatsidf>
10103d4c:	8809883a 	mov	r4,r17
10103d50:	800b883a 	mov	r5,r16
10103d54:	100d883a 	mov	r6,r2
10103d58:	180f883a 	mov	r7,r3
10103d5c:	010ceac0 	call	1010ceac <__subdf3>
10103d60:	a5000c04 	addi	r20,r20,48
10103d64:	a80d883a 	mov	r6,r21
10103d68:	980f883a 	mov	r7,r19
10103d6c:	1009883a 	mov	r4,r2
10103d70:	180b883a 	mov	r5,r3
10103d74:	95000005 	stb	r20,0(r18)
10103d78:	1021883a 	mov	r16,r2
10103d7c:	1823883a 	mov	r17,r3
10103d80:	010c54c0 	call	1010c54c <__ledf2>
10103d84:	bdc00044 	addi	r23,r23,1
10103d88:	800d883a 	mov	r6,r16
10103d8c:	880f883a 	mov	r7,r17
10103d90:	0009883a 	mov	r4,zero
10103d94:	014ffc34 	movhi	r5,16368
10103d98:	103fcf0e 	bge	r2,zero,10103cd8 <__alt_data_end+0xfffe3cd8>
10103d9c:	d8c01317 	ldw	r3,76(sp)
10103da0:	d8c00515 	stw	r3,20(sp)
10103da4:	d9400917 	ldw	r5,36(sp)
10103da8:	e009883a 	mov	r4,fp
10103dac:	0106d140 	call	10106d14 <_Bfree>
10103db0:	d9000517 	ldw	r4,20(sp)
10103db4:	d9802317 	ldw	r6,140(sp)
10103db8:	d9c02517 	ldw	r7,148(sp)
10103dbc:	b8000005 	stb	zero,0(r23)
10103dc0:	20800044 	addi	r2,r4,1
10103dc4:	30800015 	stw	r2,0(r6)
10103dc8:	3802aa26 	beq	r7,zero,10104874 <_dtoa_r+0x1178>
10103dcc:	3dc00015 	stw	r23,0(r7)
10103dd0:	d8800717 	ldw	r2,28(sp)
10103dd4:	003e7906 	br	101037bc <__alt_data_end+0xfffe37bc>
10103dd8:	00800434 	movhi	r2,16
10103ddc:	10bfffc4 	addi	r2,r2,-1
10103de0:	88a2703a 	and	r17,r17,r2
10103de4:	883e851e 	bne	r17,zero,101037fc <__alt_data_end+0xfffe37fc>
10103de8:	00840474 	movhi	r2,4113
10103dec:	1081a004 	addi	r2,r2,1664
10103df0:	003e8406 	br	10103804 <__alt_data_end+0xfffe3804>
10103df4:	10c00204 	addi	r3,r2,8
10103df8:	003e8706 	br	10103818 <__alt_data_end+0xfffe3818>
10103dfc:	01400434 	movhi	r5,16
10103e00:	297fffc4 	addi	r5,r5,-1
10103e04:	994a703a 	and	r5,r19,r5
10103e08:	9009883a 	mov	r4,r18
10103e0c:	843f0044 	addi	r16,r16,-1023
10103e10:	294ffc34 	orhi	r5,r5,16368
10103e14:	dd800217 	ldw	r22,8(sp)
10103e18:	d8001115 	stw	zero,68(sp)
10103e1c:	003ea506 	br	101038b4 <__alt_data_end+0xfffe38b4>
10103e20:	00840474 	movhi	r2,4113
10103e24:	10819704 	addi	r2,r2,1628
10103e28:	003e6406 	br	101037bc <__alt_data_end+0xfffe37bc>
10103e2c:	e0001115 	stw	zero,68(fp)
10103e30:	000b883a 	mov	r5,zero
10103e34:	e009883a 	mov	r4,fp
10103e38:	0106c6c0 	call	10106c6c <_Balloc>
10103e3c:	01bfffc4 	movi	r6,-1
10103e40:	01c00044 	movi	r7,1
10103e44:	d8800715 	stw	r2,28(sp)
10103e48:	d9800c15 	stw	r6,48(sp)
10103e4c:	e0801015 	stw	r2,64(fp)
10103e50:	d8000315 	stw	zero,12(sp)
10103e54:	d9c00b15 	stw	r7,44(sp)
10103e58:	d9800615 	stw	r6,24(sp)
10103e5c:	d8002215 	stw	zero,136(sp)
10103e60:	d8800117 	ldw	r2,4(sp)
10103e64:	10008916 	blt	r2,zero,1010408c <_dtoa_r+0x990>
10103e68:	d9000517 	ldw	r4,20(sp)
10103e6c:	00c00384 	movi	r3,14
10103e70:	19008616 	blt	r3,r4,1010408c <_dtoa_r+0x990>
10103e74:	200490fa 	slli	r2,r4,3
10103e78:	00c40474 	movhi	r3,4113
10103e7c:	d9802217 	ldw	r6,136(sp)
10103e80:	18c1bf04 	addi	r3,r3,1788
10103e84:	1885883a 	add	r2,r3,r2
10103e88:	14000017 	ldw	r16,0(r2)
10103e8c:	14400117 	ldw	r17,4(r2)
10103e90:	30016316 	blt	r6,zero,10104420 <_dtoa_r+0xd24>
10103e94:	800d883a 	mov	r6,r16
10103e98:	880f883a 	mov	r7,r17
10103e9c:	9009883a 	mov	r4,r18
10103ea0:	980b883a 	mov	r5,r19
10103ea4:	010ba180 	call	1010ba18 <__divdf3>
10103ea8:	180b883a 	mov	r5,r3
10103eac:	1009883a 	mov	r4,r2
10103eb0:	010d7a80 	call	1010d7a8 <__fixdfsi>
10103eb4:	1009883a 	mov	r4,r2
10103eb8:	102b883a 	mov	r21,r2
10103ebc:	010d8280 	call	1010d828 <__floatsidf>
10103ec0:	800d883a 	mov	r6,r16
10103ec4:	880f883a 	mov	r7,r17
10103ec8:	1009883a 	mov	r4,r2
10103ecc:	180b883a 	mov	r5,r3
10103ed0:	010c6400 	call	1010c640 <__muldf3>
10103ed4:	100d883a 	mov	r6,r2
10103ed8:	180f883a 	mov	r7,r3
10103edc:	9009883a 	mov	r4,r18
10103ee0:	980b883a 	mov	r5,r19
10103ee4:	010ceac0 	call	1010ceac <__subdf3>
10103ee8:	d9c00717 	ldw	r7,28(sp)
10103eec:	1009883a 	mov	r4,r2
10103ef0:	a8800c04 	addi	r2,r21,48
10103ef4:	38800005 	stb	r2,0(r7)
10103ef8:	3dc00044 	addi	r23,r7,1
10103efc:	d9c00617 	ldw	r7,24(sp)
10103f00:	01800044 	movi	r6,1
10103f04:	180b883a 	mov	r5,r3
10103f08:	2005883a 	mov	r2,r4
10103f0c:	39803826 	beq	r7,r6,10103ff0 <_dtoa_r+0x8f4>
10103f10:	000d883a 	mov	r6,zero
10103f14:	01d00934 	movhi	r7,16420
10103f18:	010c6400 	call	1010c640 <__muldf3>
10103f1c:	000d883a 	mov	r6,zero
10103f20:	000f883a 	mov	r7,zero
10103f24:	1009883a 	mov	r4,r2
10103f28:	180b883a 	mov	r5,r3
10103f2c:	1025883a 	mov	r18,r2
10103f30:	1827883a 	mov	r19,r3
10103f34:	010c3e80 	call	1010c3e8 <__eqdf2>
10103f38:	103f9a26 	beq	r2,zero,10103da4 <__alt_data_end+0xfffe3da4>
10103f3c:	d9c00617 	ldw	r7,24(sp)
10103f40:	d8c00717 	ldw	r3,28(sp)
10103f44:	b829883a 	mov	r20,r23
10103f48:	38bfffc4 	addi	r2,r7,-1
10103f4c:	18ad883a 	add	r22,r3,r2
10103f50:	00000a06 	br	10103f7c <_dtoa_r+0x880>
10103f54:	010c6400 	call	1010c640 <__muldf3>
10103f58:	000d883a 	mov	r6,zero
10103f5c:	000f883a 	mov	r7,zero
10103f60:	1009883a 	mov	r4,r2
10103f64:	180b883a 	mov	r5,r3
10103f68:	1025883a 	mov	r18,r2
10103f6c:	1827883a 	mov	r19,r3
10103f70:	b829883a 	mov	r20,r23
10103f74:	010c3e80 	call	1010c3e8 <__eqdf2>
10103f78:	103f8a26 	beq	r2,zero,10103da4 <__alt_data_end+0xfffe3da4>
10103f7c:	800d883a 	mov	r6,r16
10103f80:	880f883a 	mov	r7,r17
10103f84:	9009883a 	mov	r4,r18
10103f88:	980b883a 	mov	r5,r19
10103f8c:	010ba180 	call	1010ba18 <__divdf3>
10103f90:	180b883a 	mov	r5,r3
10103f94:	1009883a 	mov	r4,r2
10103f98:	010d7a80 	call	1010d7a8 <__fixdfsi>
10103f9c:	1009883a 	mov	r4,r2
10103fa0:	102b883a 	mov	r21,r2
10103fa4:	010d8280 	call	1010d828 <__floatsidf>
10103fa8:	800d883a 	mov	r6,r16
10103fac:	880f883a 	mov	r7,r17
10103fb0:	1009883a 	mov	r4,r2
10103fb4:	180b883a 	mov	r5,r3
10103fb8:	010c6400 	call	1010c640 <__muldf3>
10103fbc:	100d883a 	mov	r6,r2
10103fc0:	180f883a 	mov	r7,r3
10103fc4:	9009883a 	mov	r4,r18
10103fc8:	980b883a 	mov	r5,r19
10103fcc:	010ceac0 	call	1010ceac <__subdf3>
10103fd0:	aa000c04 	addi	r8,r21,48
10103fd4:	a2000005 	stb	r8,0(r20)
10103fd8:	000d883a 	mov	r6,zero
10103fdc:	01d00934 	movhi	r7,16420
10103fe0:	1009883a 	mov	r4,r2
10103fe4:	180b883a 	mov	r5,r3
10103fe8:	a5c00044 	addi	r23,r20,1
10103fec:	b53fd91e 	bne	r22,r20,10103f54 <__alt_data_end+0xfffe3f54>
10103ff0:	100d883a 	mov	r6,r2
10103ff4:	180f883a 	mov	r7,r3
10103ff8:	1009883a 	mov	r4,r2
10103ffc:	180b883a 	mov	r5,r3
10104000:	010b16c0 	call	1010b16c <__adddf3>
10104004:	100d883a 	mov	r6,r2
10104008:	180f883a 	mov	r7,r3
1010400c:	8009883a 	mov	r4,r16
10104010:	880b883a 	mov	r5,r17
10104014:	1027883a 	mov	r19,r2
10104018:	1825883a 	mov	r18,r3
1010401c:	010c54c0 	call	1010c54c <__ledf2>
10104020:	10000816 	blt	r2,zero,10104044 <_dtoa_r+0x948>
10104024:	980d883a 	mov	r6,r19
10104028:	900f883a 	mov	r7,r18
1010402c:	8009883a 	mov	r4,r16
10104030:	880b883a 	mov	r5,r17
10104034:	010c3e80 	call	1010c3e8 <__eqdf2>
10104038:	103f5a1e 	bne	r2,zero,10103da4 <__alt_data_end+0xfffe3da4>
1010403c:	ad40004c 	andi	r21,r21,1
10104040:	a83f5826 	beq	r21,zero,10103da4 <__alt_data_end+0xfffe3da4>
10104044:	bd3fffc3 	ldbu	r20,-1(r23)
10104048:	b8bfffc4 	addi	r2,r23,-1
1010404c:	1007883a 	mov	r3,r2
10104050:	01400e44 	movi	r5,57
10104054:	d9800717 	ldw	r6,28(sp)
10104058:	00000506 	br	10104070 <_dtoa_r+0x974>
1010405c:	18ffffc4 	addi	r3,r3,-1
10104060:	11824726 	beq	r2,r6,10104980 <_dtoa_r+0x1284>
10104064:	1d000003 	ldbu	r20,0(r3)
10104068:	102f883a 	mov	r23,r2
1010406c:	10bfffc4 	addi	r2,r2,-1
10104070:	a1003fcc 	andi	r4,r20,255
10104074:	2100201c 	xori	r4,r4,128
10104078:	213fe004 	addi	r4,r4,-128
1010407c:	217ff726 	beq	r4,r5,1010405c <__alt_data_end+0xfffe405c>
10104080:	a2000044 	addi	r8,r20,1
10104084:	12000005 	stb	r8,0(r2)
10104088:	003f4606 	br	10103da4 <__alt_data_end+0xfffe3da4>
1010408c:	d9000b17 	ldw	r4,44(sp)
10104090:	2000c826 	beq	r4,zero,101043b4 <_dtoa_r+0xcb8>
10104094:	d9800317 	ldw	r6,12(sp)
10104098:	00c00044 	movi	r3,1
1010409c:	1980f90e 	bge	r3,r6,10104484 <_dtoa_r+0xd88>
101040a0:	d8800617 	ldw	r2,24(sp)
101040a4:	d8c00a17 	ldw	r3,40(sp)
101040a8:	157fffc4 	addi	r21,r2,-1
101040ac:	1d41f316 	blt	r3,r21,1010487c <_dtoa_r+0x1180>
101040b0:	1d6bc83a 	sub	r21,r3,r21
101040b4:	d9c00617 	ldw	r7,24(sp)
101040b8:	3802aa16 	blt	r7,zero,10104b64 <_dtoa_r+0x1468>
101040bc:	dd000817 	ldw	r20,32(sp)
101040c0:	d8800617 	ldw	r2,24(sp)
101040c4:	d8c00817 	ldw	r3,32(sp)
101040c8:	01400044 	movi	r5,1
101040cc:	e009883a 	mov	r4,fp
101040d0:	1887883a 	add	r3,r3,r2
101040d4:	d8c00815 	stw	r3,32(sp)
101040d8:	b0ad883a 	add	r22,r22,r2
101040dc:	01070a00 	call	101070a0 <__i2b>
101040e0:	1023883a 	mov	r17,r2
101040e4:	a0000826 	beq	r20,zero,10104108 <_dtoa_r+0xa0c>
101040e8:	0580070e 	bge	zero,r22,10104108 <_dtoa_r+0xa0c>
101040ec:	a005883a 	mov	r2,r20
101040f0:	b500b916 	blt	r22,r20,101043d8 <_dtoa_r+0xcdc>
101040f4:	d9000817 	ldw	r4,32(sp)
101040f8:	a0a9c83a 	sub	r20,r20,r2
101040fc:	b0adc83a 	sub	r22,r22,r2
10104100:	2089c83a 	sub	r4,r4,r2
10104104:	d9000815 	stw	r4,32(sp)
10104108:	d9800a17 	ldw	r6,40(sp)
1010410c:	0181810e 	bge	zero,r6,10104714 <_dtoa_r+0x1018>
10104110:	d9c00b17 	ldw	r7,44(sp)
10104114:	3800b326 	beq	r7,zero,101043e4 <_dtoa_r+0xce8>
10104118:	a800b226 	beq	r21,zero,101043e4 <_dtoa_r+0xce8>
1010411c:	880b883a 	mov	r5,r17
10104120:	a80d883a 	mov	r6,r21
10104124:	e009883a 	mov	r4,fp
10104128:	01073680 	call	10107368 <__pow5mult>
1010412c:	d9800917 	ldw	r6,36(sp)
10104130:	100b883a 	mov	r5,r2
10104134:	e009883a 	mov	r4,fp
10104138:	1023883a 	mov	r17,r2
1010413c:	01070dc0 	call	101070dc <__multiply>
10104140:	1021883a 	mov	r16,r2
10104144:	d8800a17 	ldw	r2,40(sp)
10104148:	d9400917 	ldw	r5,36(sp)
1010414c:	e009883a 	mov	r4,fp
10104150:	1545c83a 	sub	r2,r2,r21
10104154:	d8800a15 	stw	r2,40(sp)
10104158:	0106d140 	call	10106d14 <_Bfree>
1010415c:	d8c00a17 	ldw	r3,40(sp)
10104160:	18009f1e 	bne	r3,zero,101043e0 <_dtoa_r+0xce4>
10104164:	05c00044 	movi	r23,1
10104168:	e009883a 	mov	r4,fp
1010416c:	b80b883a 	mov	r5,r23
10104170:	01070a00 	call	101070a0 <__i2b>
10104174:	d9000d17 	ldw	r4,52(sp)
10104178:	102b883a 	mov	r21,r2
1010417c:	2000ce26 	beq	r4,zero,101044b8 <_dtoa_r+0xdbc>
10104180:	200d883a 	mov	r6,r4
10104184:	100b883a 	mov	r5,r2
10104188:	e009883a 	mov	r4,fp
1010418c:	01073680 	call	10107368 <__pow5mult>
10104190:	d9800317 	ldw	r6,12(sp)
10104194:	102b883a 	mov	r21,r2
10104198:	b981810e 	bge	r23,r6,101047a0 <_dtoa_r+0x10a4>
1010419c:	0027883a 	mov	r19,zero
101041a0:	a8800417 	ldw	r2,16(r21)
101041a4:	05c00804 	movi	r23,32
101041a8:	10800104 	addi	r2,r2,4
101041ac:	1085883a 	add	r2,r2,r2
101041b0:	1085883a 	add	r2,r2,r2
101041b4:	a885883a 	add	r2,r21,r2
101041b8:	11000017 	ldw	r4,0(r2)
101041bc:	0106f880 	call	10106f88 <__hi0bits>
101041c0:	b885c83a 	sub	r2,r23,r2
101041c4:	1585883a 	add	r2,r2,r22
101041c8:	108007cc 	andi	r2,r2,31
101041cc:	1000b326 	beq	r2,zero,1010449c <_dtoa_r+0xda0>
101041d0:	00c00804 	movi	r3,32
101041d4:	1887c83a 	sub	r3,r3,r2
101041d8:	01000104 	movi	r4,4
101041dc:	20c2cd0e 	bge	r4,r3,10104d14 <_dtoa_r+0x1618>
101041e0:	00c00704 	movi	r3,28
101041e4:	1885c83a 	sub	r2,r3,r2
101041e8:	d8c00817 	ldw	r3,32(sp)
101041ec:	a0a9883a 	add	r20,r20,r2
101041f0:	b0ad883a 	add	r22,r22,r2
101041f4:	1887883a 	add	r3,r3,r2
101041f8:	d8c00815 	stw	r3,32(sp)
101041fc:	d9800817 	ldw	r6,32(sp)
10104200:	0180040e 	bge	zero,r6,10104214 <_dtoa_r+0xb18>
10104204:	800b883a 	mov	r5,r16
10104208:	e009883a 	mov	r4,fp
1010420c:	01074a80 	call	101074a8 <__lshift>
10104210:	1021883a 	mov	r16,r2
10104214:	0580050e 	bge	zero,r22,1010422c <_dtoa_r+0xb30>
10104218:	a80b883a 	mov	r5,r21
1010421c:	b00d883a 	mov	r6,r22
10104220:	e009883a 	mov	r4,fp
10104224:	01074a80 	call	101074a8 <__lshift>
10104228:	102b883a 	mov	r21,r2
1010422c:	d9c00e17 	ldw	r7,56(sp)
10104230:	3801211e 	bne	r7,zero,101046b8 <_dtoa_r+0xfbc>
10104234:	d9800617 	ldw	r6,24(sp)
10104238:	0181380e 	bge	zero,r6,1010471c <_dtoa_r+0x1020>
1010423c:	d8c00b17 	ldw	r3,44(sp)
10104240:	1800ab1e 	bne	r3,zero,101044f0 <_dtoa_r+0xdf4>
10104244:	dc800717 	ldw	r18,28(sp)
10104248:	dcc00617 	ldw	r19,24(sp)
1010424c:	9029883a 	mov	r20,r18
10104250:	00000206 	br	1010425c <_dtoa_r+0xb60>
10104254:	0106d3c0 	call	10106d3c <__multadd>
10104258:	1021883a 	mov	r16,r2
1010425c:	a80b883a 	mov	r5,r21
10104260:	8009883a 	mov	r4,r16
10104264:	01034d40 	call	101034d4 <quorem>
10104268:	10800c04 	addi	r2,r2,48
1010426c:	90800005 	stb	r2,0(r18)
10104270:	94800044 	addi	r18,r18,1
10104274:	9507c83a 	sub	r3,r18,r20
10104278:	000f883a 	mov	r7,zero
1010427c:	01800284 	movi	r6,10
10104280:	800b883a 	mov	r5,r16
10104284:	e009883a 	mov	r4,fp
10104288:	1cfff216 	blt	r3,r19,10104254 <__alt_data_end+0xfffe4254>
1010428c:	1011883a 	mov	r8,r2
10104290:	d8800617 	ldw	r2,24(sp)
10104294:	0082370e 	bge	zero,r2,10104b74 <_dtoa_r+0x1478>
10104298:	d9000717 	ldw	r4,28(sp)
1010429c:	0025883a 	mov	r18,zero
101042a0:	20af883a 	add	r23,r4,r2
101042a4:	01800044 	movi	r6,1
101042a8:	800b883a 	mov	r5,r16
101042ac:	e009883a 	mov	r4,fp
101042b0:	da001715 	stw	r8,92(sp)
101042b4:	01074a80 	call	101074a8 <__lshift>
101042b8:	a80b883a 	mov	r5,r21
101042bc:	1009883a 	mov	r4,r2
101042c0:	d8800915 	stw	r2,36(sp)
101042c4:	01075f00 	call	101075f0 <__mcmp>
101042c8:	da001717 	ldw	r8,92(sp)
101042cc:	0081800e 	bge	zero,r2,101048d0 <_dtoa_r+0x11d4>
101042d0:	b93fffc3 	ldbu	r4,-1(r23)
101042d4:	b8bfffc4 	addi	r2,r23,-1
101042d8:	1007883a 	mov	r3,r2
101042dc:	01800e44 	movi	r6,57
101042e0:	d9c00717 	ldw	r7,28(sp)
101042e4:	00000506 	br	101042fc <_dtoa_r+0xc00>
101042e8:	18ffffc4 	addi	r3,r3,-1
101042ec:	11c12326 	beq	r2,r7,1010477c <_dtoa_r+0x1080>
101042f0:	19000003 	ldbu	r4,0(r3)
101042f4:	102f883a 	mov	r23,r2
101042f8:	10bfffc4 	addi	r2,r2,-1
101042fc:	21403fcc 	andi	r5,r4,255
10104300:	2940201c 	xori	r5,r5,128
10104304:	297fe004 	addi	r5,r5,-128
10104308:	29bff726 	beq	r5,r6,101042e8 <__alt_data_end+0xfffe42e8>
1010430c:	21000044 	addi	r4,r4,1
10104310:	11000005 	stb	r4,0(r2)
10104314:	a80b883a 	mov	r5,r21
10104318:	e009883a 	mov	r4,fp
1010431c:	0106d140 	call	10106d14 <_Bfree>
10104320:	883ea026 	beq	r17,zero,10103da4 <__alt_data_end+0xfffe3da4>
10104324:	90000426 	beq	r18,zero,10104338 <_dtoa_r+0xc3c>
10104328:	94400326 	beq	r18,r17,10104338 <_dtoa_r+0xc3c>
1010432c:	900b883a 	mov	r5,r18
10104330:	e009883a 	mov	r4,fp
10104334:	0106d140 	call	10106d14 <_Bfree>
10104338:	880b883a 	mov	r5,r17
1010433c:	e009883a 	mov	r4,fp
10104340:	0106d140 	call	10106d14 <_Bfree>
10104344:	003e9706 	br	10103da4 <__alt_data_end+0xfffe3da4>
10104348:	01800044 	movi	r6,1
1010434c:	d9800e15 	stw	r6,56(sp)
10104350:	003d9606 	br	101039ac <__alt_data_end+0xfffe39ac>
10104354:	d8800817 	ldw	r2,32(sp)
10104358:	d8c00517 	ldw	r3,20(sp)
1010435c:	d8000d15 	stw	zero,52(sp)
10104360:	10c5c83a 	sub	r2,r2,r3
10104364:	00c9c83a 	sub	r4,zero,r3
10104368:	d8800815 	stw	r2,32(sp)
1010436c:	d9000a15 	stw	r4,40(sp)
10104370:	003d9706 	br	101039d0 <__alt_data_end+0xfffe39d0>
10104374:	05adc83a 	sub	r22,zero,r22
10104378:	dd800815 	stw	r22,32(sp)
1010437c:	002d883a 	mov	r22,zero
10104380:	003d8e06 	br	101039bc <__alt_data_end+0xfffe39bc>
10104384:	d9000517 	ldw	r4,20(sp)
10104388:	010d8280 	call	1010d828 <__floatsidf>
1010438c:	100d883a 	mov	r6,r2
10104390:	180f883a 	mov	r7,r3
10104394:	a009883a 	mov	r4,r20
10104398:	880b883a 	mov	r5,r17
1010439c:	010c3e80 	call	1010c3e8 <__eqdf2>
101043a0:	103d7126 	beq	r2,zero,10103968 <__alt_data_end+0xfffe3968>
101043a4:	d9c00517 	ldw	r7,20(sp)
101043a8:	39ffffc4 	addi	r7,r7,-1
101043ac:	d9c00515 	stw	r7,20(sp)
101043b0:	003d6d06 	br	10103968 <__alt_data_end+0xfffe3968>
101043b4:	dd400a17 	ldw	r21,40(sp)
101043b8:	dd000817 	ldw	r20,32(sp)
101043bc:	0023883a 	mov	r17,zero
101043c0:	003f4806 	br	101040e4 <__alt_data_end+0xfffe40e4>
101043c4:	10e3c83a 	sub	r17,r2,r3
101043c8:	9448983a 	sll	r4,r18,r17
101043cc:	003d3206 	br	10103898 <__alt_data_end+0xfffe3898>
101043d0:	d8000e15 	stw	zero,56(sp)
101043d4:	003d7506 	br	101039ac <__alt_data_end+0xfffe39ac>
101043d8:	b005883a 	mov	r2,r22
101043dc:	003f4506 	br	101040f4 <__alt_data_end+0xfffe40f4>
101043e0:	dc000915 	stw	r16,36(sp)
101043e4:	d9800a17 	ldw	r6,40(sp)
101043e8:	d9400917 	ldw	r5,36(sp)
101043ec:	e009883a 	mov	r4,fp
101043f0:	01073680 	call	10107368 <__pow5mult>
101043f4:	1021883a 	mov	r16,r2
101043f8:	003f5a06 	br	10104164 <__alt_data_end+0xfffe4164>
101043fc:	01c00044 	movi	r7,1
10104400:	d9c00b15 	stw	r7,44(sp)
10104404:	d8802217 	ldw	r2,136(sp)
10104408:	0081280e 	bge	zero,r2,101048ac <_dtoa_r+0x11b0>
1010440c:	100d883a 	mov	r6,r2
10104410:	1021883a 	mov	r16,r2
10104414:	d8800c15 	stw	r2,48(sp)
10104418:	d8800615 	stw	r2,24(sp)
1010441c:	003d8806 	br	10103a40 <__alt_data_end+0xfffe3a40>
10104420:	d8800617 	ldw	r2,24(sp)
10104424:	00be9b16 	blt	zero,r2,10103e94 <__alt_data_end+0xfffe3e94>
10104428:	10010f1e 	bne	r2,zero,10104868 <_dtoa_r+0x116c>
1010442c:	880b883a 	mov	r5,r17
10104430:	000d883a 	mov	r6,zero
10104434:	01d00534 	movhi	r7,16404
10104438:	8009883a 	mov	r4,r16
1010443c:	010c6400 	call	1010c640 <__muldf3>
10104440:	900d883a 	mov	r6,r18
10104444:	980f883a 	mov	r7,r19
10104448:	1009883a 	mov	r4,r2
1010444c:	180b883a 	mov	r5,r3
10104450:	010c4700 	call	1010c470 <__gedf2>
10104454:	002b883a 	mov	r21,zero
10104458:	0023883a 	mov	r17,zero
1010445c:	1000bf16 	blt	r2,zero,1010475c <_dtoa_r+0x1060>
10104460:	d9802217 	ldw	r6,136(sp)
10104464:	ddc00717 	ldw	r23,28(sp)
10104468:	018c303a 	nor	r6,zero,r6
1010446c:	d9800515 	stw	r6,20(sp)
10104470:	a80b883a 	mov	r5,r21
10104474:	e009883a 	mov	r4,fp
10104478:	0106d140 	call	10106d14 <_Bfree>
1010447c:	883e4926 	beq	r17,zero,10103da4 <__alt_data_end+0xfffe3da4>
10104480:	003fad06 	br	10104338 <__alt_data_end+0xfffe4338>
10104484:	d9c01117 	ldw	r7,68(sp)
10104488:	3801bc26 	beq	r7,zero,10104b7c <_dtoa_r+0x1480>
1010448c:	10810cc4 	addi	r2,r2,1075
10104490:	dd400a17 	ldw	r21,40(sp)
10104494:	dd000817 	ldw	r20,32(sp)
10104498:	003f0a06 	br	101040c4 <__alt_data_end+0xfffe40c4>
1010449c:	00800704 	movi	r2,28
101044a0:	d9000817 	ldw	r4,32(sp)
101044a4:	a0a9883a 	add	r20,r20,r2
101044a8:	b0ad883a 	add	r22,r22,r2
101044ac:	2089883a 	add	r4,r4,r2
101044b0:	d9000815 	stw	r4,32(sp)
101044b4:	003f5106 	br	101041fc <__alt_data_end+0xfffe41fc>
101044b8:	d8c00317 	ldw	r3,12(sp)
101044bc:	b8c1fc0e 	bge	r23,r3,10104cb0 <_dtoa_r+0x15b4>
101044c0:	0027883a 	mov	r19,zero
101044c4:	b805883a 	mov	r2,r23
101044c8:	003f3e06 	br	101041c4 <__alt_data_end+0xfffe41c4>
101044cc:	880b883a 	mov	r5,r17
101044d0:	e009883a 	mov	r4,fp
101044d4:	000f883a 	mov	r7,zero
101044d8:	01800284 	movi	r6,10
101044dc:	0106d3c0 	call	10106d3c <__multadd>
101044e0:	d9000c17 	ldw	r4,48(sp)
101044e4:	1023883a 	mov	r17,r2
101044e8:	0102040e 	bge	zero,r4,10104cfc <_dtoa_r+0x1600>
101044ec:	d9000615 	stw	r4,24(sp)
101044f0:	0500050e 	bge	zero,r20,10104508 <_dtoa_r+0xe0c>
101044f4:	880b883a 	mov	r5,r17
101044f8:	a00d883a 	mov	r6,r20
101044fc:	e009883a 	mov	r4,fp
10104500:	01074a80 	call	101074a8 <__lshift>
10104504:	1023883a 	mov	r17,r2
10104508:	9801241e 	bne	r19,zero,1010499c <_dtoa_r+0x12a0>
1010450c:	8829883a 	mov	r20,r17
10104510:	d9000617 	ldw	r4,24(sp)
10104514:	dcc00717 	ldw	r19,28(sp)
10104518:	9480004c 	andi	r18,r18,1
1010451c:	20bfffc4 	addi	r2,r4,-1
10104520:	9885883a 	add	r2,r19,r2
10104524:	d8800415 	stw	r2,16(sp)
10104528:	dc800615 	stw	r18,24(sp)
1010452c:	a80b883a 	mov	r5,r21
10104530:	8009883a 	mov	r4,r16
10104534:	01034d40 	call	101034d4 <quorem>
10104538:	880b883a 	mov	r5,r17
1010453c:	8009883a 	mov	r4,r16
10104540:	102f883a 	mov	r23,r2
10104544:	01075f00 	call	101075f0 <__mcmp>
10104548:	a80b883a 	mov	r5,r21
1010454c:	a00d883a 	mov	r6,r20
10104550:	e009883a 	mov	r4,fp
10104554:	102d883a 	mov	r22,r2
10104558:	01076500 	call	10107650 <__mdiff>
1010455c:	1007883a 	mov	r3,r2
10104560:	10800317 	ldw	r2,12(r2)
10104564:	bc800c04 	addi	r18,r23,48
10104568:	180b883a 	mov	r5,r3
1010456c:	10004e1e 	bne	r2,zero,101046a8 <_dtoa_r+0xfac>
10104570:	8009883a 	mov	r4,r16
10104574:	d8c01615 	stw	r3,88(sp)
10104578:	01075f00 	call	101075f0 <__mcmp>
1010457c:	d8c01617 	ldw	r3,88(sp)
10104580:	e009883a 	mov	r4,fp
10104584:	d8801615 	stw	r2,88(sp)
10104588:	180b883a 	mov	r5,r3
1010458c:	0106d140 	call	10106d14 <_Bfree>
10104590:	d8801617 	ldw	r2,88(sp)
10104594:	1000041e 	bne	r2,zero,101045a8 <_dtoa_r+0xeac>
10104598:	d9800317 	ldw	r6,12(sp)
1010459c:	3000021e 	bne	r6,zero,101045a8 <_dtoa_r+0xeac>
101045a0:	d8c00617 	ldw	r3,24(sp)
101045a4:	18003726 	beq	r3,zero,10104684 <_dtoa_r+0xf88>
101045a8:	b0002016 	blt	r22,zero,1010462c <_dtoa_r+0xf30>
101045ac:	b000041e 	bne	r22,zero,101045c0 <_dtoa_r+0xec4>
101045b0:	d9000317 	ldw	r4,12(sp)
101045b4:	2000021e 	bne	r4,zero,101045c0 <_dtoa_r+0xec4>
101045b8:	d8c00617 	ldw	r3,24(sp)
101045bc:	18001b26 	beq	r3,zero,1010462c <_dtoa_r+0xf30>
101045c0:	00810716 	blt	zero,r2,101049e0 <_dtoa_r+0x12e4>
101045c4:	d8c00417 	ldw	r3,16(sp)
101045c8:	9d800044 	addi	r22,r19,1
101045cc:	9c800005 	stb	r18,0(r19)
101045d0:	b02f883a 	mov	r23,r22
101045d4:	98c10626 	beq	r19,r3,101049f0 <_dtoa_r+0x12f4>
101045d8:	800b883a 	mov	r5,r16
101045dc:	000f883a 	mov	r7,zero
101045e0:	01800284 	movi	r6,10
101045e4:	e009883a 	mov	r4,fp
101045e8:	0106d3c0 	call	10106d3c <__multadd>
101045ec:	1021883a 	mov	r16,r2
101045f0:	000f883a 	mov	r7,zero
101045f4:	01800284 	movi	r6,10
101045f8:	880b883a 	mov	r5,r17
101045fc:	e009883a 	mov	r4,fp
10104600:	8d002526 	beq	r17,r20,10104698 <_dtoa_r+0xf9c>
10104604:	0106d3c0 	call	10106d3c <__multadd>
10104608:	a00b883a 	mov	r5,r20
1010460c:	000f883a 	mov	r7,zero
10104610:	01800284 	movi	r6,10
10104614:	e009883a 	mov	r4,fp
10104618:	1023883a 	mov	r17,r2
1010461c:	0106d3c0 	call	10106d3c <__multadd>
10104620:	1029883a 	mov	r20,r2
10104624:	b027883a 	mov	r19,r22
10104628:	003fc006 	br	1010452c <__alt_data_end+0xfffe452c>
1010462c:	9011883a 	mov	r8,r18
10104630:	00800e0e 	bge	zero,r2,1010466c <_dtoa_r+0xf70>
10104634:	800b883a 	mov	r5,r16
10104638:	01800044 	movi	r6,1
1010463c:	e009883a 	mov	r4,fp
10104640:	da001715 	stw	r8,92(sp)
10104644:	01074a80 	call	101074a8 <__lshift>
10104648:	a80b883a 	mov	r5,r21
1010464c:	1009883a 	mov	r4,r2
10104650:	1021883a 	mov	r16,r2
10104654:	01075f00 	call	101075f0 <__mcmp>
10104658:	da001717 	ldw	r8,92(sp)
1010465c:	0081960e 	bge	zero,r2,10104cb8 <_dtoa_r+0x15bc>
10104660:	00800e44 	movi	r2,57
10104664:	40817026 	beq	r8,r2,10104c28 <_dtoa_r+0x152c>
10104668:	ba000c44 	addi	r8,r23,49
1010466c:	8825883a 	mov	r18,r17
10104670:	9dc00044 	addi	r23,r19,1
10104674:	9a000005 	stb	r8,0(r19)
10104678:	a023883a 	mov	r17,r20
1010467c:	dc000915 	stw	r16,36(sp)
10104680:	003f2406 	br	10104314 <__alt_data_end+0xfffe4314>
10104684:	00800e44 	movi	r2,57
10104688:	9011883a 	mov	r8,r18
1010468c:	90816626 	beq	r18,r2,10104c28 <_dtoa_r+0x152c>
10104690:	05bff516 	blt	zero,r22,10104668 <__alt_data_end+0xfffe4668>
10104694:	003ff506 	br	1010466c <__alt_data_end+0xfffe466c>
10104698:	0106d3c0 	call	10106d3c <__multadd>
1010469c:	1023883a 	mov	r17,r2
101046a0:	1029883a 	mov	r20,r2
101046a4:	003fdf06 	br	10104624 <__alt_data_end+0xfffe4624>
101046a8:	e009883a 	mov	r4,fp
101046ac:	0106d140 	call	10106d14 <_Bfree>
101046b0:	00800044 	movi	r2,1
101046b4:	003fbc06 	br	101045a8 <__alt_data_end+0xfffe45a8>
101046b8:	a80b883a 	mov	r5,r21
101046bc:	8009883a 	mov	r4,r16
101046c0:	01075f00 	call	101075f0 <__mcmp>
101046c4:	103edb0e 	bge	r2,zero,10104234 <__alt_data_end+0xfffe4234>
101046c8:	800b883a 	mov	r5,r16
101046cc:	000f883a 	mov	r7,zero
101046d0:	01800284 	movi	r6,10
101046d4:	e009883a 	mov	r4,fp
101046d8:	0106d3c0 	call	10106d3c <__multadd>
101046dc:	1021883a 	mov	r16,r2
101046e0:	d8800517 	ldw	r2,20(sp)
101046e4:	d8c00b17 	ldw	r3,44(sp)
101046e8:	10bfffc4 	addi	r2,r2,-1
101046ec:	d8800515 	stw	r2,20(sp)
101046f0:	183f761e 	bne	r3,zero,101044cc <__alt_data_end+0xfffe44cc>
101046f4:	d9000c17 	ldw	r4,48(sp)
101046f8:	0101730e 	bge	zero,r4,10104cc8 <_dtoa_r+0x15cc>
101046fc:	d9000615 	stw	r4,24(sp)
10104700:	003ed006 	br	10104244 <__alt_data_end+0xfffe4244>
10104704:	00800084 	movi	r2,2
10104708:	3081861e 	bne	r6,r2,10104d24 <_dtoa_r+0x1628>
1010470c:	d8000b15 	stw	zero,44(sp)
10104710:	003f3c06 	br	10104404 <__alt_data_end+0xfffe4404>
10104714:	dc000917 	ldw	r16,36(sp)
10104718:	003e9206 	br	10104164 <__alt_data_end+0xfffe4164>
1010471c:	d9c00317 	ldw	r7,12(sp)
10104720:	00800084 	movi	r2,2
10104724:	11fec50e 	bge	r2,r7,1010423c <__alt_data_end+0xfffe423c>
10104728:	d9000617 	ldw	r4,24(sp)
1010472c:	20013c1e 	bne	r4,zero,10104c20 <_dtoa_r+0x1524>
10104730:	a80b883a 	mov	r5,r21
10104734:	000f883a 	mov	r7,zero
10104738:	01800144 	movi	r6,5
1010473c:	e009883a 	mov	r4,fp
10104740:	0106d3c0 	call	10106d3c <__multadd>
10104744:	100b883a 	mov	r5,r2
10104748:	8009883a 	mov	r4,r16
1010474c:	102b883a 	mov	r21,r2
10104750:	01075f00 	call	101075f0 <__mcmp>
10104754:	dc000915 	stw	r16,36(sp)
10104758:	00bf410e 	bge	zero,r2,10104460 <__alt_data_end+0xfffe4460>
1010475c:	d9c00717 	ldw	r7,28(sp)
10104760:	00800c44 	movi	r2,49
10104764:	38800005 	stb	r2,0(r7)
10104768:	d8800517 	ldw	r2,20(sp)
1010476c:	3dc00044 	addi	r23,r7,1
10104770:	10800044 	addi	r2,r2,1
10104774:	d8800515 	stw	r2,20(sp)
10104778:	003f3d06 	br	10104470 <__alt_data_end+0xfffe4470>
1010477c:	d9800517 	ldw	r6,20(sp)
10104780:	d9c00717 	ldw	r7,28(sp)
10104784:	00800c44 	movi	r2,49
10104788:	31800044 	addi	r6,r6,1
1010478c:	d9800515 	stw	r6,20(sp)
10104790:	38800005 	stb	r2,0(r7)
10104794:	003edf06 	br	10104314 <__alt_data_end+0xfffe4314>
10104798:	d8000b15 	stw	zero,44(sp)
1010479c:	003c9f06 	br	10103a1c <__alt_data_end+0xfffe3a1c>
101047a0:	903e7e1e 	bne	r18,zero,1010419c <__alt_data_end+0xfffe419c>
101047a4:	00800434 	movhi	r2,16
101047a8:	10bfffc4 	addi	r2,r2,-1
101047ac:	9884703a 	and	r2,r19,r2
101047b0:	1000ea1e 	bne	r2,zero,10104b5c <_dtoa_r+0x1460>
101047b4:	9cdffc2c 	andhi	r19,r19,32752
101047b8:	9800e826 	beq	r19,zero,10104b5c <_dtoa_r+0x1460>
101047bc:	d9c00817 	ldw	r7,32(sp)
101047c0:	b5800044 	addi	r22,r22,1
101047c4:	04c00044 	movi	r19,1
101047c8:	39c00044 	addi	r7,r7,1
101047cc:	d9c00815 	stw	r7,32(sp)
101047d0:	d8800d17 	ldw	r2,52(sp)
101047d4:	103e721e 	bne	r2,zero,101041a0 <__alt_data_end+0xfffe41a0>
101047d8:	00800044 	movi	r2,1
101047dc:	003e7906 	br	101041c4 <__alt_data_end+0xfffe41c4>
101047e0:	8009883a 	mov	r4,r16
101047e4:	010d8280 	call	1010d828 <__floatsidf>
101047e8:	d9800f17 	ldw	r6,60(sp)
101047ec:	d9c01017 	ldw	r7,64(sp)
101047f0:	1009883a 	mov	r4,r2
101047f4:	180b883a 	mov	r5,r3
101047f8:	010c6400 	call	1010c640 <__muldf3>
101047fc:	000d883a 	mov	r6,zero
10104800:	01d00734 	movhi	r7,16412
10104804:	1009883a 	mov	r4,r2
10104808:	180b883a 	mov	r5,r3
1010480c:	010b16c0 	call	1010b16c <__adddf3>
10104810:	047f3034 	movhi	r17,64704
10104814:	1021883a 	mov	r16,r2
10104818:	1c63883a 	add	r17,r3,r17
1010481c:	d9000f17 	ldw	r4,60(sp)
10104820:	d9401017 	ldw	r5,64(sp)
10104824:	000d883a 	mov	r6,zero
10104828:	01d00534 	movhi	r7,16404
1010482c:	010ceac0 	call	1010ceac <__subdf3>
10104830:	800d883a 	mov	r6,r16
10104834:	880f883a 	mov	r7,r17
10104838:	1009883a 	mov	r4,r2
1010483c:	180b883a 	mov	r5,r3
10104840:	102b883a 	mov	r21,r2
10104844:	1829883a 	mov	r20,r3
10104848:	010c4700 	call	1010c470 <__gedf2>
1010484c:	00806c16 	blt	zero,r2,10104a00 <_dtoa_r+0x1304>
10104850:	89e0003c 	xorhi	r7,r17,32768
10104854:	800d883a 	mov	r6,r16
10104858:	a809883a 	mov	r4,r21
1010485c:	a00b883a 	mov	r5,r20
10104860:	010c54c0 	call	1010c54c <__ledf2>
10104864:	103d7e0e 	bge	r2,zero,10103e60 <__alt_data_end+0xfffe3e60>
10104868:	002b883a 	mov	r21,zero
1010486c:	0023883a 	mov	r17,zero
10104870:	003efb06 	br	10104460 <__alt_data_end+0xfffe4460>
10104874:	d8800717 	ldw	r2,28(sp)
10104878:	003bd006 	br	101037bc <__alt_data_end+0xfffe37bc>
1010487c:	d9000a17 	ldw	r4,40(sp)
10104880:	d9800d17 	ldw	r6,52(sp)
10104884:	dd400a15 	stw	r21,40(sp)
10104888:	a905c83a 	sub	r2,r21,r4
1010488c:	308d883a 	add	r6,r6,r2
10104890:	d9800d15 	stw	r6,52(sp)
10104894:	002b883a 	mov	r21,zero
10104898:	003e0606 	br	101040b4 <__alt_data_end+0xfffe40b4>
1010489c:	9023883a 	mov	r17,r18
101048a0:	9829883a 	mov	r20,r19
101048a4:	04000084 	movi	r16,2
101048a8:	003c9206 	br	10103af4 <__alt_data_end+0xfffe3af4>
101048ac:	04000044 	movi	r16,1
101048b0:	dc000c15 	stw	r16,48(sp)
101048b4:	dc000615 	stw	r16,24(sp)
101048b8:	dc002215 	stw	r16,136(sp)
101048bc:	e0001115 	stw	zero,68(fp)
101048c0:	000b883a 	mov	r5,zero
101048c4:	003c6906 	br	10103a6c <__alt_data_end+0xfffe3a6c>
101048c8:	3021883a 	mov	r16,r6
101048cc:	003ffb06 	br	101048bc <__alt_data_end+0xfffe48bc>
101048d0:	1000021e 	bne	r2,zero,101048dc <_dtoa_r+0x11e0>
101048d4:	4200004c 	andi	r8,r8,1
101048d8:	403e7d1e 	bne	r8,zero,101042d0 <__alt_data_end+0xfffe42d0>
101048dc:	01000c04 	movi	r4,48
101048e0:	00000106 	br	101048e8 <_dtoa_r+0x11ec>
101048e4:	102f883a 	mov	r23,r2
101048e8:	b8bfffc4 	addi	r2,r23,-1
101048ec:	10c00007 	ldb	r3,0(r2)
101048f0:	193ffc26 	beq	r3,r4,101048e4 <__alt_data_end+0xfffe48e4>
101048f4:	003e8706 	br	10104314 <__alt_data_end+0xfffe4314>
101048f8:	d8800517 	ldw	r2,20(sp)
101048fc:	00a3c83a 	sub	r17,zero,r2
10104900:	8800a426 	beq	r17,zero,10104b94 <_dtoa_r+0x1498>
10104904:	888003cc 	andi	r2,r17,15
10104908:	100490fa 	slli	r2,r2,3
1010490c:	00c40474 	movhi	r3,4113
10104910:	18c1bf04 	addi	r3,r3,1788
10104914:	1885883a 	add	r2,r3,r2
10104918:	11800017 	ldw	r6,0(r2)
1010491c:	11c00117 	ldw	r7,4(r2)
10104920:	9009883a 	mov	r4,r18
10104924:	980b883a 	mov	r5,r19
10104928:	8823d13a 	srai	r17,r17,4
1010492c:	010c6400 	call	1010c640 <__muldf3>
10104930:	d8800f15 	stw	r2,60(sp)
10104934:	d8c01015 	stw	r3,64(sp)
10104938:	8800e826 	beq	r17,zero,10104cdc <_dtoa_r+0x15e0>
1010493c:	05040474 	movhi	r20,4113
10104940:	a501b504 	addi	r20,r20,1748
10104944:	04000084 	movi	r16,2
10104948:	8980004c 	andi	r6,r17,1
1010494c:	1009883a 	mov	r4,r2
10104950:	8823d07a 	srai	r17,r17,1
10104954:	180b883a 	mov	r5,r3
10104958:	30000426 	beq	r6,zero,1010496c <_dtoa_r+0x1270>
1010495c:	a1800017 	ldw	r6,0(r20)
10104960:	a1c00117 	ldw	r7,4(r20)
10104964:	84000044 	addi	r16,r16,1
10104968:	010c6400 	call	1010c640 <__muldf3>
1010496c:	a5000204 	addi	r20,r20,8
10104970:	883ff51e 	bne	r17,zero,10104948 <__alt_data_end+0xfffe4948>
10104974:	d8800f15 	stw	r2,60(sp)
10104978:	d8c01015 	stw	r3,64(sp)
1010497c:	003c7606 	br	10103b58 <__alt_data_end+0xfffe3b58>
10104980:	00c00c04 	movi	r3,48
10104984:	10c00005 	stb	r3,0(r2)
10104988:	d8c00517 	ldw	r3,20(sp)
1010498c:	bd3fffc3 	ldbu	r20,-1(r23)
10104990:	18c00044 	addi	r3,r3,1
10104994:	d8c00515 	stw	r3,20(sp)
10104998:	003db906 	br	10104080 <__alt_data_end+0xfffe4080>
1010499c:	89400117 	ldw	r5,4(r17)
101049a0:	e009883a 	mov	r4,fp
101049a4:	0106c6c0 	call	10106c6c <_Balloc>
101049a8:	89800417 	ldw	r6,16(r17)
101049ac:	89400304 	addi	r5,r17,12
101049b0:	11000304 	addi	r4,r2,12
101049b4:	31800084 	addi	r6,r6,2
101049b8:	318d883a 	add	r6,r6,r6
101049bc:	318d883a 	add	r6,r6,r6
101049c0:	1027883a 	mov	r19,r2
101049c4:	0100cac0 	call	10100cac <memcpy>
101049c8:	01800044 	movi	r6,1
101049cc:	980b883a 	mov	r5,r19
101049d0:	e009883a 	mov	r4,fp
101049d4:	01074a80 	call	101074a8 <__lshift>
101049d8:	1029883a 	mov	r20,r2
101049dc:	003ecc06 	br	10104510 <__alt_data_end+0xfffe4510>
101049e0:	00800e44 	movi	r2,57
101049e4:	90809026 	beq	r18,r2,10104c28 <_dtoa_r+0x152c>
101049e8:	92000044 	addi	r8,r18,1
101049ec:	003f1f06 	br	1010466c <__alt_data_end+0xfffe466c>
101049f0:	9011883a 	mov	r8,r18
101049f4:	8825883a 	mov	r18,r17
101049f8:	a023883a 	mov	r17,r20
101049fc:	003e2906 	br	101042a4 <__alt_data_end+0xfffe42a4>
10104a00:	002b883a 	mov	r21,zero
10104a04:	0023883a 	mov	r17,zero
10104a08:	003f5406 	br	1010475c <__alt_data_end+0xfffe475c>
10104a0c:	61bfffc4 	addi	r6,r12,-1
10104a10:	300490fa 	slli	r2,r6,3
10104a14:	00c40474 	movhi	r3,4113
10104a18:	18c1bf04 	addi	r3,r3,1788
10104a1c:	1885883a 	add	r2,r3,r2
10104a20:	11000017 	ldw	r4,0(r2)
10104a24:	11400117 	ldw	r5,4(r2)
10104a28:	d8800717 	ldw	r2,28(sp)
10104a2c:	880f883a 	mov	r7,r17
10104a30:	d9801215 	stw	r6,72(sp)
10104a34:	800d883a 	mov	r6,r16
10104a38:	db001615 	stw	r12,88(sp)
10104a3c:	15c00044 	addi	r23,r2,1
10104a40:	010c6400 	call	1010c640 <__muldf3>
10104a44:	d9401017 	ldw	r5,64(sp)
10104a48:	d9000f17 	ldw	r4,60(sp)
10104a4c:	d8c01515 	stw	r3,84(sp)
10104a50:	d8801415 	stw	r2,80(sp)
10104a54:	010d7a80 	call	1010d7a8 <__fixdfsi>
10104a58:	1009883a 	mov	r4,r2
10104a5c:	1021883a 	mov	r16,r2
10104a60:	010d8280 	call	1010d828 <__floatsidf>
10104a64:	d9000f17 	ldw	r4,60(sp)
10104a68:	d9401017 	ldw	r5,64(sp)
10104a6c:	100d883a 	mov	r6,r2
10104a70:	180f883a 	mov	r7,r3
10104a74:	010ceac0 	call	1010ceac <__subdf3>
10104a78:	1829883a 	mov	r20,r3
10104a7c:	d8c00717 	ldw	r3,28(sp)
10104a80:	84000c04 	addi	r16,r16,48
10104a84:	1023883a 	mov	r17,r2
10104a88:	1c000005 	stb	r16,0(r3)
10104a8c:	db001617 	ldw	r12,88(sp)
10104a90:	00800044 	movi	r2,1
10104a94:	60802226 	beq	r12,r2,10104b20 <_dtoa_r+0x1424>
10104a98:	d9c00717 	ldw	r7,28(sp)
10104a9c:	8805883a 	mov	r2,r17
10104aa0:	b82b883a 	mov	r21,r23
10104aa4:	3b19883a 	add	r12,r7,r12
10104aa8:	6023883a 	mov	r17,r12
10104aac:	a007883a 	mov	r3,r20
10104ab0:	dc800f15 	stw	r18,60(sp)
10104ab4:	000d883a 	mov	r6,zero
10104ab8:	01d00934 	movhi	r7,16420
10104abc:	1009883a 	mov	r4,r2
10104ac0:	180b883a 	mov	r5,r3
10104ac4:	010c6400 	call	1010c640 <__muldf3>
10104ac8:	180b883a 	mov	r5,r3
10104acc:	1009883a 	mov	r4,r2
10104ad0:	1829883a 	mov	r20,r3
10104ad4:	1025883a 	mov	r18,r2
10104ad8:	010d7a80 	call	1010d7a8 <__fixdfsi>
10104adc:	1009883a 	mov	r4,r2
10104ae0:	1021883a 	mov	r16,r2
10104ae4:	010d8280 	call	1010d828 <__floatsidf>
10104ae8:	100d883a 	mov	r6,r2
10104aec:	180f883a 	mov	r7,r3
10104af0:	9009883a 	mov	r4,r18
10104af4:	a00b883a 	mov	r5,r20
10104af8:	84000c04 	addi	r16,r16,48
10104afc:	010ceac0 	call	1010ceac <__subdf3>
10104b00:	ad400044 	addi	r21,r21,1
10104b04:	ac3fffc5 	stb	r16,-1(r21)
10104b08:	ac7fea1e 	bne	r21,r17,10104ab4 <__alt_data_end+0xfffe4ab4>
10104b0c:	1023883a 	mov	r17,r2
10104b10:	d8801217 	ldw	r2,72(sp)
10104b14:	dc800f17 	ldw	r18,60(sp)
10104b18:	1829883a 	mov	r20,r3
10104b1c:	b8af883a 	add	r23,r23,r2
10104b20:	d9001417 	ldw	r4,80(sp)
10104b24:	d9401517 	ldw	r5,84(sp)
10104b28:	000d883a 	mov	r6,zero
10104b2c:	01cff834 	movhi	r7,16352
10104b30:	010b16c0 	call	1010b16c <__adddf3>
10104b34:	880d883a 	mov	r6,r17
10104b38:	a00f883a 	mov	r7,r20
10104b3c:	1009883a 	mov	r4,r2
10104b40:	180b883a 	mov	r5,r3
10104b44:	010c54c0 	call	1010c54c <__ledf2>
10104b48:	10003e0e 	bge	r2,zero,10104c44 <_dtoa_r+0x1548>
10104b4c:	d9001317 	ldw	r4,76(sp)
10104b50:	bd3fffc3 	ldbu	r20,-1(r23)
10104b54:	d9000515 	stw	r4,20(sp)
10104b58:	003d3b06 	br	10104048 <__alt_data_end+0xfffe4048>
10104b5c:	0027883a 	mov	r19,zero
10104b60:	003f1b06 	br	101047d0 <__alt_data_end+0xfffe47d0>
10104b64:	d8800817 	ldw	r2,32(sp)
10104b68:	11e9c83a 	sub	r20,r2,r7
10104b6c:	0005883a 	mov	r2,zero
10104b70:	003d5406 	br	101040c4 <__alt_data_end+0xfffe40c4>
10104b74:	00800044 	movi	r2,1
10104b78:	003dc706 	br	10104298 <__alt_data_end+0xfffe4298>
10104b7c:	d8c00217 	ldw	r3,8(sp)
10104b80:	00800d84 	movi	r2,54
10104b84:	dd400a17 	ldw	r21,40(sp)
10104b88:	10c5c83a 	sub	r2,r2,r3
10104b8c:	dd000817 	ldw	r20,32(sp)
10104b90:	003d4c06 	br	101040c4 <__alt_data_end+0xfffe40c4>
10104b94:	dc800f15 	stw	r18,60(sp)
10104b98:	dcc01015 	stw	r19,64(sp)
10104b9c:	04000084 	movi	r16,2
10104ba0:	003bed06 	br	10103b58 <__alt_data_end+0xfffe3b58>
10104ba4:	d9000617 	ldw	r4,24(sp)
10104ba8:	203f0d26 	beq	r4,zero,101047e0 <__alt_data_end+0xfffe47e0>
10104bac:	d9800c17 	ldw	r6,48(sp)
10104bb0:	01bcab0e 	bge	zero,r6,10103e60 <__alt_data_end+0xfffe3e60>
10104bb4:	d9401017 	ldw	r5,64(sp)
10104bb8:	d9000f17 	ldw	r4,60(sp)
10104bbc:	000d883a 	mov	r6,zero
10104bc0:	01d00934 	movhi	r7,16420
10104bc4:	010c6400 	call	1010c640 <__muldf3>
10104bc8:	81000044 	addi	r4,r16,1
10104bcc:	d8800f15 	stw	r2,60(sp)
10104bd0:	d8c01015 	stw	r3,64(sp)
10104bd4:	010d8280 	call	1010d828 <__floatsidf>
10104bd8:	d9800f17 	ldw	r6,60(sp)
10104bdc:	d9c01017 	ldw	r7,64(sp)
10104be0:	1009883a 	mov	r4,r2
10104be4:	180b883a 	mov	r5,r3
10104be8:	010c6400 	call	1010c640 <__muldf3>
10104bec:	01d00734 	movhi	r7,16412
10104bf0:	000d883a 	mov	r6,zero
10104bf4:	1009883a 	mov	r4,r2
10104bf8:	180b883a 	mov	r5,r3
10104bfc:	010b16c0 	call	1010b16c <__adddf3>
10104c00:	d9c00517 	ldw	r7,20(sp)
10104c04:	047f3034 	movhi	r17,64704
10104c08:	1021883a 	mov	r16,r2
10104c0c:	39ffffc4 	addi	r7,r7,-1
10104c10:	d9c01315 	stw	r7,76(sp)
10104c14:	1c63883a 	add	r17,r3,r17
10104c18:	db000c17 	ldw	r12,48(sp)
10104c1c:	003bea06 	br	10103bc8 <__alt_data_end+0xfffe3bc8>
10104c20:	dc000915 	stw	r16,36(sp)
10104c24:	003e0e06 	br	10104460 <__alt_data_end+0xfffe4460>
10104c28:	01000e44 	movi	r4,57
10104c2c:	8825883a 	mov	r18,r17
10104c30:	9dc00044 	addi	r23,r19,1
10104c34:	99000005 	stb	r4,0(r19)
10104c38:	a023883a 	mov	r17,r20
10104c3c:	dc000915 	stw	r16,36(sp)
10104c40:	003da406 	br	101042d4 <__alt_data_end+0xfffe42d4>
10104c44:	d9801417 	ldw	r6,80(sp)
10104c48:	d9c01517 	ldw	r7,84(sp)
10104c4c:	0009883a 	mov	r4,zero
10104c50:	014ff834 	movhi	r5,16352
10104c54:	010ceac0 	call	1010ceac <__subdf3>
10104c58:	880d883a 	mov	r6,r17
10104c5c:	a00f883a 	mov	r7,r20
10104c60:	1009883a 	mov	r4,r2
10104c64:	180b883a 	mov	r5,r3
10104c68:	010c4700 	call	1010c470 <__gedf2>
10104c6c:	00bc7c0e 	bge	zero,r2,10103e60 <__alt_data_end+0xfffe3e60>
10104c70:	01000c04 	movi	r4,48
10104c74:	00000106 	br	10104c7c <_dtoa_r+0x1580>
10104c78:	102f883a 	mov	r23,r2
10104c7c:	b8bfffc4 	addi	r2,r23,-1
10104c80:	10c00007 	ldb	r3,0(r2)
10104c84:	193ffc26 	beq	r3,r4,10104c78 <__alt_data_end+0xfffe4c78>
10104c88:	d9801317 	ldw	r6,76(sp)
10104c8c:	d9800515 	stw	r6,20(sp)
10104c90:	003c4406 	br	10103da4 <__alt_data_end+0xfffe3da4>
10104c94:	d9801317 	ldw	r6,76(sp)
10104c98:	d9800515 	stw	r6,20(sp)
10104c9c:	003cea06 	br	10104048 <__alt_data_end+0xfffe4048>
10104ca0:	dd800f17 	ldw	r22,60(sp)
10104ca4:	dcc01017 	ldw	r19,64(sp)
10104ca8:	dc801217 	ldw	r18,72(sp)
10104cac:	003c6c06 	br	10103e60 <__alt_data_end+0xfffe3e60>
10104cb0:	903e031e 	bne	r18,zero,101044c0 <__alt_data_end+0xfffe44c0>
10104cb4:	003ebb06 	br	101047a4 <__alt_data_end+0xfffe47a4>
10104cb8:	103e6c1e 	bne	r2,zero,1010466c <__alt_data_end+0xfffe466c>
10104cbc:	4080004c 	andi	r2,r8,1
10104cc0:	103e6a26 	beq	r2,zero,1010466c <__alt_data_end+0xfffe466c>
10104cc4:	003e6606 	br	10104660 <__alt_data_end+0xfffe4660>
10104cc8:	d8c00317 	ldw	r3,12(sp)
10104ccc:	00800084 	movi	r2,2
10104cd0:	10c02916 	blt	r2,r3,10104d78 <_dtoa_r+0x167c>
10104cd4:	d9000c17 	ldw	r4,48(sp)
10104cd8:	003e8806 	br	101046fc <__alt_data_end+0xfffe46fc>
10104cdc:	04000084 	movi	r16,2
10104ce0:	003b9d06 	br	10103b58 <__alt_data_end+0xfffe3b58>
10104ce4:	d9001317 	ldw	r4,76(sp)
10104ce8:	d9000515 	stw	r4,20(sp)
10104cec:	003cd606 	br	10104048 <__alt_data_end+0xfffe4048>
10104cf0:	d8801317 	ldw	r2,76(sp)
10104cf4:	d8800515 	stw	r2,20(sp)
10104cf8:	003c2a06 	br	10103da4 <__alt_data_end+0xfffe3da4>
10104cfc:	d9800317 	ldw	r6,12(sp)
10104d00:	00800084 	movi	r2,2
10104d04:	11801516 	blt	r2,r6,10104d5c <_dtoa_r+0x1660>
10104d08:	d9c00c17 	ldw	r7,48(sp)
10104d0c:	d9c00615 	stw	r7,24(sp)
10104d10:	003df706 	br	101044f0 <__alt_data_end+0xfffe44f0>
10104d14:	193d3926 	beq	r3,r4,101041fc <__alt_data_end+0xfffe41fc>
10104d18:	00c00f04 	movi	r3,60
10104d1c:	1885c83a 	sub	r2,r3,r2
10104d20:	003ddf06 	br	101044a0 <__alt_data_end+0xfffe44a0>
10104d24:	e009883a 	mov	r4,fp
10104d28:	e0001115 	stw	zero,68(fp)
10104d2c:	000b883a 	mov	r5,zero
10104d30:	0106c6c0 	call	10106c6c <_Balloc>
10104d34:	d8800715 	stw	r2,28(sp)
10104d38:	d8c00717 	ldw	r3,28(sp)
10104d3c:	00bfffc4 	movi	r2,-1
10104d40:	01000044 	movi	r4,1
10104d44:	d8800c15 	stw	r2,48(sp)
10104d48:	e0c01015 	stw	r3,64(fp)
10104d4c:	d9000b15 	stw	r4,44(sp)
10104d50:	d8800615 	stw	r2,24(sp)
10104d54:	d8002215 	stw	zero,136(sp)
10104d58:	003c4106 	br	10103e60 <__alt_data_end+0xfffe3e60>
10104d5c:	d8c00c17 	ldw	r3,48(sp)
10104d60:	d8c00615 	stw	r3,24(sp)
10104d64:	003e7006 	br	10104728 <__alt_data_end+0xfffe4728>
10104d68:	04400044 	movi	r17,1
10104d6c:	003b2006 	br	101039f0 <__alt_data_end+0xfffe39f0>
10104d70:	000b883a 	mov	r5,zero
10104d74:	003b3d06 	br	10103a6c <__alt_data_end+0xfffe3a6c>
10104d78:	d8800c17 	ldw	r2,48(sp)
10104d7c:	d8800615 	stw	r2,24(sp)
10104d80:	003e6906 	br	10104728 <__alt_data_end+0xfffe4728>

10104d84 <__sflush_r>:
10104d84:	2880030b 	ldhu	r2,12(r5)
10104d88:	defffb04 	addi	sp,sp,-20
10104d8c:	dcc00315 	stw	r19,12(sp)
10104d90:	dc400115 	stw	r17,4(sp)
10104d94:	dfc00415 	stw	ra,16(sp)
10104d98:	dc800215 	stw	r18,8(sp)
10104d9c:	dc000015 	stw	r16,0(sp)
10104da0:	10c0020c 	andi	r3,r2,8
10104da4:	2823883a 	mov	r17,r5
10104da8:	2027883a 	mov	r19,r4
10104dac:	1800311e 	bne	r3,zero,10104e74 <__sflush_r+0xf0>
10104db0:	28c00117 	ldw	r3,4(r5)
10104db4:	10820014 	ori	r2,r2,2048
10104db8:	2880030d 	sth	r2,12(r5)
10104dbc:	00c04b0e 	bge	zero,r3,10104eec <__sflush_r+0x168>
10104dc0:	8a000a17 	ldw	r8,40(r17)
10104dc4:	40002326 	beq	r8,zero,10104e54 <__sflush_r+0xd0>
10104dc8:	9c000017 	ldw	r16,0(r19)
10104dcc:	10c4000c 	andi	r3,r2,4096
10104dd0:	98000015 	stw	zero,0(r19)
10104dd4:	18004826 	beq	r3,zero,10104ef8 <__sflush_r+0x174>
10104dd8:	89801417 	ldw	r6,80(r17)
10104ddc:	10c0010c 	andi	r3,r2,4
10104de0:	18000626 	beq	r3,zero,10104dfc <__sflush_r+0x78>
10104de4:	88c00117 	ldw	r3,4(r17)
10104de8:	88800c17 	ldw	r2,48(r17)
10104dec:	30cdc83a 	sub	r6,r6,r3
10104df0:	10000226 	beq	r2,zero,10104dfc <__sflush_r+0x78>
10104df4:	88800f17 	ldw	r2,60(r17)
10104df8:	308dc83a 	sub	r6,r6,r2
10104dfc:	89400717 	ldw	r5,28(r17)
10104e00:	000f883a 	mov	r7,zero
10104e04:	9809883a 	mov	r4,r19
10104e08:	403ee83a 	callr	r8
10104e0c:	00ffffc4 	movi	r3,-1
10104e10:	10c04426 	beq	r2,r3,10104f24 <__sflush_r+0x1a0>
10104e14:	88c0030b 	ldhu	r3,12(r17)
10104e18:	89000417 	ldw	r4,16(r17)
10104e1c:	88000115 	stw	zero,4(r17)
10104e20:	197dffcc 	andi	r5,r3,63487
10104e24:	8940030d 	sth	r5,12(r17)
10104e28:	89000015 	stw	r4,0(r17)
10104e2c:	18c4000c 	andi	r3,r3,4096
10104e30:	18002c1e 	bne	r3,zero,10104ee4 <__sflush_r+0x160>
10104e34:	89400c17 	ldw	r5,48(r17)
10104e38:	9c000015 	stw	r16,0(r19)
10104e3c:	28000526 	beq	r5,zero,10104e54 <__sflush_r+0xd0>
10104e40:	88801004 	addi	r2,r17,64
10104e44:	28800226 	beq	r5,r2,10104e50 <__sflush_r+0xcc>
10104e48:	9809883a 	mov	r4,r19
10104e4c:	01055000 	call	10105500 <_free_r>
10104e50:	88000c15 	stw	zero,48(r17)
10104e54:	0005883a 	mov	r2,zero
10104e58:	dfc00417 	ldw	ra,16(sp)
10104e5c:	dcc00317 	ldw	r19,12(sp)
10104e60:	dc800217 	ldw	r18,8(sp)
10104e64:	dc400117 	ldw	r17,4(sp)
10104e68:	dc000017 	ldw	r16,0(sp)
10104e6c:	dec00504 	addi	sp,sp,20
10104e70:	f800283a 	ret
10104e74:	2c800417 	ldw	r18,16(r5)
10104e78:	903ff626 	beq	r18,zero,10104e54 <__alt_data_end+0xfffe4e54>
10104e7c:	2c000017 	ldw	r16,0(r5)
10104e80:	108000cc 	andi	r2,r2,3
10104e84:	2c800015 	stw	r18,0(r5)
10104e88:	84a1c83a 	sub	r16,r16,r18
10104e8c:	1000131e 	bne	r2,zero,10104edc <__sflush_r+0x158>
10104e90:	28800517 	ldw	r2,20(r5)
10104e94:	88800215 	stw	r2,8(r17)
10104e98:	04000316 	blt	zero,r16,10104ea8 <__sflush_r+0x124>
10104e9c:	003fed06 	br	10104e54 <__alt_data_end+0xfffe4e54>
10104ea0:	90a5883a 	add	r18,r18,r2
10104ea4:	043feb0e 	bge	zero,r16,10104e54 <__alt_data_end+0xfffe4e54>
10104ea8:	88800917 	ldw	r2,36(r17)
10104eac:	89400717 	ldw	r5,28(r17)
10104eb0:	800f883a 	mov	r7,r16
10104eb4:	900d883a 	mov	r6,r18
10104eb8:	9809883a 	mov	r4,r19
10104ebc:	103ee83a 	callr	r2
10104ec0:	80a1c83a 	sub	r16,r16,r2
10104ec4:	00bff616 	blt	zero,r2,10104ea0 <__alt_data_end+0xfffe4ea0>
10104ec8:	88c0030b 	ldhu	r3,12(r17)
10104ecc:	00bfffc4 	movi	r2,-1
10104ed0:	18c01014 	ori	r3,r3,64
10104ed4:	88c0030d 	sth	r3,12(r17)
10104ed8:	003fdf06 	br	10104e58 <__alt_data_end+0xfffe4e58>
10104edc:	0005883a 	mov	r2,zero
10104ee0:	003fec06 	br	10104e94 <__alt_data_end+0xfffe4e94>
10104ee4:	88801415 	stw	r2,80(r17)
10104ee8:	003fd206 	br	10104e34 <__alt_data_end+0xfffe4e34>
10104eec:	28c00f17 	ldw	r3,60(r5)
10104ef0:	00ffb316 	blt	zero,r3,10104dc0 <__alt_data_end+0xfffe4dc0>
10104ef4:	003fd706 	br	10104e54 <__alt_data_end+0xfffe4e54>
10104ef8:	89400717 	ldw	r5,28(r17)
10104efc:	000d883a 	mov	r6,zero
10104f00:	01c00044 	movi	r7,1
10104f04:	9809883a 	mov	r4,r19
10104f08:	403ee83a 	callr	r8
10104f0c:	100d883a 	mov	r6,r2
10104f10:	00bfffc4 	movi	r2,-1
10104f14:	30801426 	beq	r6,r2,10104f68 <__sflush_r+0x1e4>
10104f18:	8880030b 	ldhu	r2,12(r17)
10104f1c:	8a000a17 	ldw	r8,40(r17)
10104f20:	003fae06 	br	10104ddc <__alt_data_end+0xfffe4ddc>
10104f24:	98c00017 	ldw	r3,0(r19)
10104f28:	183fba26 	beq	r3,zero,10104e14 <__alt_data_end+0xfffe4e14>
10104f2c:	01000744 	movi	r4,29
10104f30:	19000626 	beq	r3,r4,10104f4c <__sflush_r+0x1c8>
10104f34:	01000584 	movi	r4,22
10104f38:	19000426 	beq	r3,r4,10104f4c <__sflush_r+0x1c8>
10104f3c:	88c0030b 	ldhu	r3,12(r17)
10104f40:	18c01014 	ori	r3,r3,64
10104f44:	88c0030d 	sth	r3,12(r17)
10104f48:	003fc306 	br	10104e58 <__alt_data_end+0xfffe4e58>
10104f4c:	8880030b 	ldhu	r2,12(r17)
10104f50:	88c00417 	ldw	r3,16(r17)
10104f54:	88000115 	stw	zero,4(r17)
10104f58:	10bdffcc 	andi	r2,r2,63487
10104f5c:	8880030d 	sth	r2,12(r17)
10104f60:	88c00015 	stw	r3,0(r17)
10104f64:	003fb306 	br	10104e34 <__alt_data_end+0xfffe4e34>
10104f68:	98800017 	ldw	r2,0(r19)
10104f6c:	103fea26 	beq	r2,zero,10104f18 <__alt_data_end+0xfffe4f18>
10104f70:	00c00744 	movi	r3,29
10104f74:	10c00226 	beq	r2,r3,10104f80 <__sflush_r+0x1fc>
10104f78:	00c00584 	movi	r3,22
10104f7c:	10c0031e 	bne	r2,r3,10104f8c <__sflush_r+0x208>
10104f80:	9c000015 	stw	r16,0(r19)
10104f84:	0005883a 	mov	r2,zero
10104f88:	003fb306 	br	10104e58 <__alt_data_end+0xfffe4e58>
10104f8c:	88c0030b 	ldhu	r3,12(r17)
10104f90:	3005883a 	mov	r2,r6
10104f94:	18c01014 	ori	r3,r3,64
10104f98:	88c0030d 	sth	r3,12(r17)
10104f9c:	003fae06 	br	10104e58 <__alt_data_end+0xfffe4e58>

10104fa0 <_fflush_r>:
10104fa0:	defffd04 	addi	sp,sp,-12
10104fa4:	dc000115 	stw	r16,4(sp)
10104fa8:	dfc00215 	stw	ra,8(sp)
10104fac:	2021883a 	mov	r16,r4
10104fb0:	20000226 	beq	r4,zero,10104fbc <_fflush_r+0x1c>
10104fb4:	20800e17 	ldw	r2,56(r4)
10104fb8:	10000c26 	beq	r2,zero,10104fec <_fflush_r+0x4c>
10104fbc:	2880030f 	ldh	r2,12(r5)
10104fc0:	1000051e 	bne	r2,zero,10104fd8 <_fflush_r+0x38>
10104fc4:	0005883a 	mov	r2,zero
10104fc8:	dfc00217 	ldw	ra,8(sp)
10104fcc:	dc000117 	ldw	r16,4(sp)
10104fd0:	dec00304 	addi	sp,sp,12
10104fd4:	f800283a 	ret
10104fd8:	8009883a 	mov	r4,r16
10104fdc:	dfc00217 	ldw	ra,8(sp)
10104fe0:	dc000117 	ldw	r16,4(sp)
10104fe4:	dec00304 	addi	sp,sp,12
10104fe8:	0104d841 	jmpi	10104d84 <__sflush_r>
10104fec:	d9400015 	stw	r5,0(sp)
10104ff0:	010538c0 	call	1010538c <__sinit>
10104ff4:	d9400017 	ldw	r5,0(sp)
10104ff8:	003ff006 	br	10104fbc <__alt_data_end+0xfffe4fbc>

10104ffc <fflush>:
10104ffc:	20000526 	beq	r4,zero,10105014 <fflush+0x18>
10105000:	00840474 	movhi	r2,4113
10105004:	1088ff04 	addi	r2,r2,9212
10105008:	200b883a 	mov	r5,r4
1010500c:	11000017 	ldw	r4,0(r2)
10105010:	0104fa01 	jmpi	10104fa0 <_fflush_r>
10105014:	00840474 	movhi	r2,4113
10105018:	1088fe04 	addi	r2,r2,9208
1010501c:	11000017 	ldw	r4,0(r2)
10105020:	01440434 	movhi	r5,4112
10105024:	2953e804 	addi	r5,r5,20384
10105028:	0105d9c1 	jmpi	10105d9c <_fwalk_reent>

1010502c <__fp_unlock>:
1010502c:	0005883a 	mov	r2,zero
10105030:	f800283a 	ret

10105034 <_cleanup_r>:
10105034:	01440474 	movhi	r5,4113
10105038:	29677c04 	addi	r5,r5,-25104
1010503c:	0105d9c1 	jmpi	10105d9c <_fwalk_reent>

10105040 <__sinit.part.1>:
10105040:	defff704 	addi	sp,sp,-36
10105044:	00c40434 	movhi	r3,4112
10105048:	dfc00815 	stw	ra,32(sp)
1010504c:	ddc00715 	stw	r23,28(sp)
10105050:	dd800615 	stw	r22,24(sp)
10105054:	dd400515 	stw	r21,20(sp)
10105058:	dd000415 	stw	r20,16(sp)
1010505c:	dcc00315 	stw	r19,12(sp)
10105060:	dc800215 	stw	r18,8(sp)
10105064:	dc400115 	stw	r17,4(sp)
10105068:	dc000015 	stw	r16,0(sp)
1010506c:	18d40d04 	addi	r3,r3,20532
10105070:	24000117 	ldw	r16,4(r4)
10105074:	20c00f15 	stw	r3,60(r4)
10105078:	2080bb04 	addi	r2,r4,748
1010507c:	00c000c4 	movi	r3,3
10105080:	20c0b915 	stw	r3,740(r4)
10105084:	2080ba15 	stw	r2,744(r4)
10105088:	2000b815 	stw	zero,736(r4)
1010508c:	05c00204 	movi	r23,8
10105090:	00800104 	movi	r2,4
10105094:	2025883a 	mov	r18,r4
10105098:	b80d883a 	mov	r6,r23
1010509c:	81001704 	addi	r4,r16,92
101050a0:	000b883a 	mov	r5,zero
101050a4:	80000015 	stw	zero,0(r16)
101050a8:	80000115 	stw	zero,4(r16)
101050ac:	80000215 	stw	zero,8(r16)
101050b0:	8080030d 	sth	r2,12(r16)
101050b4:	80001915 	stw	zero,100(r16)
101050b8:	8000038d 	sth	zero,14(r16)
101050bc:	80000415 	stw	zero,16(r16)
101050c0:	80000515 	stw	zero,20(r16)
101050c4:	80000615 	stw	zero,24(r16)
101050c8:	0106b440 	call	10106b44 <memset>
101050cc:	05840474 	movhi	r22,4113
101050d0:	94400217 	ldw	r17,8(r18)
101050d4:	05440474 	movhi	r21,4113
101050d8:	05040474 	movhi	r20,4113
101050dc:	04c40474 	movhi	r19,4113
101050e0:	b5a0d404 	addi	r22,r22,-31920
101050e4:	ad60eb04 	addi	r21,r21,-31828
101050e8:	a5210a04 	addi	r20,r20,-31704
101050ec:	9ce12104 	addi	r19,r19,-31612
101050f0:	85800815 	stw	r22,32(r16)
101050f4:	85400915 	stw	r21,36(r16)
101050f8:	85000a15 	stw	r20,40(r16)
101050fc:	84c00b15 	stw	r19,44(r16)
10105100:	84000715 	stw	r16,28(r16)
10105104:	00800284 	movi	r2,10
10105108:	8880030d 	sth	r2,12(r17)
1010510c:	00800044 	movi	r2,1
10105110:	b80d883a 	mov	r6,r23
10105114:	89001704 	addi	r4,r17,92
10105118:	000b883a 	mov	r5,zero
1010511c:	88000015 	stw	zero,0(r17)
10105120:	88000115 	stw	zero,4(r17)
10105124:	88000215 	stw	zero,8(r17)
10105128:	88001915 	stw	zero,100(r17)
1010512c:	8880038d 	sth	r2,14(r17)
10105130:	88000415 	stw	zero,16(r17)
10105134:	88000515 	stw	zero,20(r17)
10105138:	88000615 	stw	zero,24(r17)
1010513c:	0106b440 	call	10106b44 <memset>
10105140:	94000317 	ldw	r16,12(r18)
10105144:	00800484 	movi	r2,18
10105148:	8c400715 	stw	r17,28(r17)
1010514c:	8d800815 	stw	r22,32(r17)
10105150:	8d400915 	stw	r21,36(r17)
10105154:	8d000a15 	stw	r20,40(r17)
10105158:	8cc00b15 	stw	r19,44(r17)
1010515c:	8080030d 	sth	r2,12(r16)
10105160:	00800084 	movi	r2,2
10105164:	80000015 	stw	zero,0(r16)
10105168:	80000115 	stw	zero,4(r16)
1010516c:	80000215 	stw	zero,8(r16)
10105170:	80001915 	stw	zero,100(r16)
10105174:	8080038d 	sth	r2,14(r16)
10105178:	80000415 	stw	zero,16(r16)
1010517c:	80000515 	stw	zero,20(r16)
10105180:	80000615 	stw	zero,24(r16)
10105184:	b80d883a 	mov	r6,r23
10105188:	000b883a 	mov	r5,zero
1010518c:	81001704 	addi	r4,r16,92
10105190:	0106b440 	call	10106b44 <memset>
10105194:	00800044 	movi	r2,1
10105198:	84000715 	stw	r16,28(r16)
1010519c:	85800815 	stw	r22,32(r16)
101051a0:	85400915 	stw	r21,36(r16)
101051a4:	85000a15 	stw	r20,40(r16)
101051a8:	84c00b15 	stw	r19,44(r16)
101051ac:	90800e15 	stw	r2,56(r18)
101051b0:	dfc00817 	ldw	ra,32(sp)
101051b4:	ddc00717 	ldw	r23,28(sp)
101051b8:	dd800617 	ldw	r22,24(sp)
101051bc:	dd400517 	ldw	r21,20(sp)
101051c0:	dd000417 	ldw	r20,16(sp)
101051c4:	dcc00317 	ldw	r19,12(sp)
101051c8:	dc800217 	ldw	r18,8(sp)
101051cc:	dc400117 	ldw	r17,4(sp)
101051d0:	dc000017 	ldw	r16,0(sp)
101051d4:	dec00904 	addi	sp,sp,36
101051d8:	f800283a 	ret

101051dc <__fp_lock>:
101051dc:	0005883a 	mov	r2,zero
101051e0:	f800283a 	ret

101051e4 <__sfmoreglue>:
101051e4:	defffc04 	addi	sp,sp,-16
101051e8:	dc800215 	stw	r18,8(sp)
101051ec:	2825883a 	mov	r18,r5
101051f0:	dc000015 	stw	r16,0(sp)
101051f4:	01401a04 	movi	r5,104
101051f8:	2021883a 	mov	r16,r4
101051fc:	913fffc4 	addi	r4,r18,-1
10105200:	dfc00315 	stw	ra,12(sp)
10105204:	dc400115 	stw	r17,4(sp)
10105208:	0100c840 	call	10100c84 <__mulsi3>
1010520c:	8009883a 	mov	r4,r16
10105210:	11401d04 	addi	r5,r2,116
10105214:	1023883a 	mov	r17,r2
10105218:	01060f80 	call	101060f8 <_malloc_r>
1010521c:	1021883a 	mov	r16,r2
10105220:	10000726 	beq	r2,zero,10105240 <__sfmoreglue+0x5c>
10105224:	11000304 	addi	r4,r2,12
10105228:	10000015 	stw	zero,0(r2)
1010522c:	14800115 	stw	r18,4(r2)
10105230:	11000215 	stw	r4,8(r2)
10105234:	89801a04 	addi	r6,r17,104
10105238:	000b883a 	mov	r5,zero
1010523c:	0106b440 	call	10106b44 <memset>
10105240:	8005883a 	mov	r2,r16
10105244:	dfc00317 	ldw	ra,12(sp)
10105248:	dc800217 	ldw	r18,8(sp)
1010524c:	dc400117 	ldw	r17,4(sp)
10105250:	dc000017 	ldw	r16,0(sp)
10105254:	dec00404 	addi	sp,sp,16
10105258:	f800283a 	ret

1010525c <__sfp>:
1010525c:	defffb04 	addi	sp,sp,-20
10105260:	dc000015 	stw	r16,0(sp)
10105264:	04040474 	movhi	r16,4113
10105268:	8408fe04 	addi	r16,r16,9208
1010526c:	dcc00315 	stw	r19,12(sp)
10105270:	2027883a 	mov	r19,r4
10105274:	81000017 	ldw	r4,0(r16)
10105278:	dfc00415 	stw	ra,16(sp)
1010527c:	dc800215 	stw	r18,8(sp)
10105280:	20800e17 	ldw	r2,56(r4)
10105284:	dc400115 	stw	r17,4(sp)
10105288:	1000021e 	bne	r2,zero,10105294 <__sfp+0x38>
1010528c:	01050400 	call	10105040 <__sinit.part.1>
10105290:	81000017 	ldw	r4,0(r16)
10105294:	2480b804 	addi	r18,r4,736
10105298:	047fffc4 	movi	r17,-1
1010529c:	91000117 	ldw	r4,4(r18)
101052a0:	94000217 	ldw	r16,8(r18)
101052a4:	213fffc4 	addi	r4,r4,-1
101052a8:	20000a16 	blt	r4,zero,101052d4 <__sfp+0x78>
101052ac:	8080030f 	ldh	r2,12(r16)
101052b0:	10000c26 	beq	r2,zero,101052e4 <__sfp+0x88>
101052b4:	80c01d04 	addi	r3,r16,116
101052b8:	00000206 	br	101052c4 <__sfp+0x68>
101052bc:	18bfe60f 	ldh	r2,-104(r3)
101052c0:	10000826 	beq	r2,zero,101052e4 <__sfp+0x88>
101052c4:	213fffc4 	addi	r4,r4,-1
101052c8:	1c3ffd04 	addi	r16,r3,-12
101052cc:	18c01a04 	addi	r3,r3,104
101052d0:	247ffa1e 	bne	r4,r17,101052bc <__alt_data_end+0xfffe52bc>
101052d4:	90800017 	ldw	r2,0(r18)
101052d8:	10001d26 	beq	r2,zero,10105350 <__sfp+0xf4>
101052dc:	1025883a 	mov	r18,r2
101052e0:	003fee06 	br	1010529c <__alt_data_end+0xfffe529c>
101052e4:	00bfffc4 	movi	r2,-1
101052e8:	8080038d 	sth	r2,14(r16)
101052ec:	00800044 	movi	r2,1
101052f0:	8080030d 	sth	r2,12(r16)
101052f4:	80001915 	stw	zero,100(r16)
101052f8:	80000015 	stw	zero,0(r16)
101052fc:	80000215 	stw	zero,8(r16)
10105300:	80000115 	stw	zero,4(r16)
10105304:	80000415 	stw	zero,16(r16)
10105308:	80000515 	stw	zero,20(r16)
1010530c:	80000615 	stw	zero,24(r16)
10105310:	01800204 	movi	r6,8
10105314:	000b883a 	mov	r5,zero
10105318:	81001704 	addi	r4,r16,92
1010531c:	0106b440 	call	10106b44 <memset>
10105320:	8005883a 	mov	r2,r16
10105324:	80000c15 	stw	zero,48(r16)
10105328:	80000d15 	stw	zero,52(r16)
1010532c:	80001115 	stw	zero,68(r16)
10105330:	80001215 	stw	zero,72(r16)
10105334:	dfc00417 	ldw	ra,16(sp)
10105338:	dcc00317 	ldw	r19,12(sp)
1010533c:	dc800217 	ldw	r18,8(sp)
10105340:	dc400117 	ldw	r17,4(sp)
10105344:	dc000017 	ldw	r16,0(sp)
10105348:	dec00504 	addi	sp,sp,20
1010534c:	f800283a 	ret
10105350:	01400104 	movi	r5,4
10105354:	9809883a 	mov	r4,r19
10105358:	01051e40 	call	101051e4 <__sfmoreglue>
1010535c:	90800015 	stw	r2,0(r18)
10105360:	103fde1e 	bne	r2,zero,101052dc <__alt_data_end+0xfffe52dc>
10105364:	00800304 	movi	r2,12
10105368:	98800015 	stw	r2,0(r19)
1010536c:	0005883a 	mov	r2,zero
10105370:	003ff006 	br	10105334 <__alt_data_end+0xfffe5334>

10105374 <_cleanup>:
10105374:	00840474 	movhi	r2,4113
10105378:	1088fe04 	addi	r2,r2,9208
1010537c:	11000017 	ldw	r4,0(r2)
10105380:	01440474 	movhi	r5,4113
10105384:	29677c04 	addi	r5,r5,-25104
10105388:	0105d9c1 	jmpi	10105d9c <_fwalk_reent>

1010538c <__sinit>:
1010538c:	20800e17 	ldw	r2,56(r4)
10105390:	10000126 	beq	r2,zero,10105398 <__sinit+0xc>
10105394:	f800283a 	ret
10105398:	01050401 	jmpi	10105040 <__sinit.part.1>

1010539c <__sfp_lock_acquire>:
1010539c:	f800283a 	ret

101053a0 <__sfp_lock_release>:
101053a0:	f800283a 	ret

101053a4 <__sinit_lock_acquire>:
101053a4:	f800283a 	ret

101053a8 <__sinit_lock_release>:
101053a8:	f800283a 	ret

101053ac <__fp_lock_all>:
101053ac:	00840474 	movhi	r2,4113
101053b0:	1088ff04 	addi	r2,r2,9212
101053b4:	11000017 	ldw	r4,0(r2)
101053b8:	01440434 	movhi	r5,4112
101053bc:	29547704 	addi	r5,r5,20956
101053c0:	0105cd81 	jmpi	10105cd8 <_fwalk>

101053c4 <__fp_unlock_all>:
101053c4:	00840474 	movhi	r2,4113
101053c8:	1088ff04 	addi	r2,r2,9212
101053cc:	11000017 	ldw	r4,0(r2)
101053d0:	01440434 	movhi	r5,4112
101053d4:	29540b04 	addi	r5,r5,20524
101053d8:	0105cd81 	jmpi	10105cd8 <_fwalk>

101053dc <_malloc_trim_r>:
101053dc:	defffb04 	addi	sp,sp,-20
101053e0:	dcc00315 	stw	r19,12(sp)
101053e4:	04c40474 	movhi	r19,4113
101053e8:	dc800215 	stw	r18,8(sp)
101053ec:	dc400115 	stw	r17,4(sp)
101053f0:	dc000015 	stw	r16,0(sp)
101053f4:	dfc00415 	stw	ra,16(sp)
101053f8:	2821883a 	mov	r16,r5
101053fc:	9cc37004 	addi	r19,r19,3520
10105400:	2025883a 	mov	r18,r4
10105404:	010dfac0 	call	1010dfac <__malloc_lock>
10105408:	98800217 	ldw	r2,8(r19)
1010540c:	14400117 	ldw	r17,4(r2)
10105410:	00bfff04 	movi	r2,-4
10105414:	88a2703a 	and	r17,r17,r2
10105418:	8c21c83a 	sub	r16,r17,r16
1010541c:	8403fbc4 	addi	r16,r16,4079
10105420:	8020d33a 	srli	r16,r16,12
10105424:	0083ffc4 	movi	r2,4095
10105428:	843fffc4 	addi	r16,r16,-1
1010542c:	8020933a 	slli	r16,r16,12
10105430:	1400060e 	bge	r2,r16,1010544c <_malloc_trim_r+0x70>
10105434:	000b883a 	mov	r5,zero
10105438:	9009883a 	mov	r4,r18
1010543c:	01082fc0 	call	101082fc <_sbrk_r>
10105440:	98c00217 	ldw	r3,8(r19)
10105444:	1c47883a 	add	r3,r3,r17
10105448:	10c00a26 	beq	r2,r3,10105474 <_malloc_trim_r+0x98>
1010544c:	9009883a 	mov	r4,r18
10105450:	010dfd00 	call	1010dfd0 <__malloc_unlock>
10105454:	0005883a 	mov	r2,zero
10105458:	dfc00417 	ldw	ra,16(sp)
1010545c:	dcc00317 	ldw	r19,12(sp)
10105460:	dc800217 	ldw	r18,8(sp)
10105464:	dc400117 	ldw	r17,4(sp)
10105468:	dc000017 	ldw	r16,0(sp)
1010546c:	dec00504 	addi	sp,sp,20
10105470:	f800283a 	ret
10105474:	040bc83a 	sub	r5,zero,r16
10105478:	9009883a 	mov	r4,r18
1010547c:	01082fc0 	call	101082fc <_sbrk_r>
10105480:	00ffffc4 	movi	r3,-1
10105484:	10c00d26 	beq	r2,r3,101054bc <_malloc_trim_r+0xe0>
10105488:	00c40474 	movhi	r3,4113
1010548c:	18d00504 	addi	r3,r3,16404
10105490:	18800017 	ldw	r2,0(r3)
10105494:	99000217 	ldw	r4,8(r19)
10105498:	8c23c83a 	sub	r17,r17,r16
1010549c:	8c400054 	ori	r17,r17,1
101054a0:	1421c83a 	sub	r16,r2,r16
101054a4:	24400115 	stw	r17,4(r4)
101054a8:	9009883a 	mov	r4,r18
101054ac:	1c000015 	stw	r16,0(r3)
101054b0:	010dfd00 	call	1010dfd0 <__malloc_unlock>
101054b4:	00800044 	movi	r2,1
101054b8:	003fe706 	br	10105458 <__alt_data_end+0xfffe5458>
101054bc:	000b883a 	mov	r5,zero
101054c0:	9009883a 	mov	r4,r18
101054c4:	01082fc0 	call	101082fc <_sbrk_r>
101054c8:	99000217 	ldw	r4,8(r19)
101054cc:	014003c4 	movi	r5,15
101054d0:	1107c83a 	sub	r3,r2,r4
101054d4:	28ffdd0e 	bge	r5,r3,1010544c <__alt_data_end+0xfffe544c>
101054d8:	01440474 	movhi	r5,4113
101054dc:	29490104 	addi	r5,r5,9220
101054e0:	29400017 	ldw	r5,0(r5)
101054e4:	18c00054 	ori	r3,r3,1
101054e8:	20c00115 	stw	r3,4(r4)
101054ec:	00c40474 	movhi	r3,4113
101054f0:	1145c83a 	sub	r2,r2,r5
101054f4:	18d00504 	addi	r3,r3,16404
101054f8:	18800015 	stw	r2,0(r3)
101054fc:	003fd306 	br	1010544c <__alt_data_end+0xfffe544c>

10105500 <_free_r>:
10105500:	28004126 	beq	r5,zero,10105608 <_free_r+0x108>
10105504:	defffd04 	addi	sp,sp,-12
10105508:	dc400115 	stw	r17,4(sp)
1010550c:	dc000015 	stw	r16,0(sp)
10105510:	2023883a 	mov	r17,r4
10105514:	2821883a 	mov	r16,r5
10105518:	dfc00215 	stw	ra,8(sp)
1010551c:	010dfac0 	call	1010dfac <__malloc_lock>
10105520:	81ffff17 	ldw	r7,-4(r16)
10105524:	00bfff84 	movi	r2,-2
10105528:	01040474 	movhi	r4,4113
1010552c:	81bffe04 	addi	r6,r16,-8
10105530:	3884703a 	and	r2,r7,r2
10105534:	21037004 	addi	r4,r4,3520
10105538:	308b883a 	add	r5,r6,r2
1010553c:	2a400117 	ldw	r9,4(r5)
10105540:	22000217 	ldw	r8,8(r4)
10105544:	00ffff04 	movi	r3,-4
10105548:	48c6703a 	and	r3,r9,r3
1010554c:	2a005726 	beq	r5,r8,101056ac <_free_r+0x1ac>
10105550:	28c00115 	stw	r3,4(r5)
10105554:	39c0004c 	andi	r7,r7,1
10105558:	3800091e 	bne	r7,zero,10105580 <_free_r+0x80>
1010555c:	823ffe17 	ldw	r8,-8(r16)
10105560:	22400204 	addi	r9,r4,8
10105564:	320dc83a 	sub	r6,r6,r8
10105568:	31c00217 	ldw	r7,8(r6)
1010556c:	1205883a 	add	r2,r2,r8
10105570:	3a406526 	beq	r7,r9,10105708 <_free_r+0x208>
10105574:	32000317 	ldw	r8,12(r6)
10105578:	3a000315 	stw	r8,12(r7)
1010557c:	41c00215 	stw	r7,8(r8)
10105580:	28cf883a 	add	r7,r5,r3
10105584:	39c00117 	ldw	r7,4(r7)
10105588:	39c0004c 	andi	r7,r7,1
1010558c:	38003a26 	beq	r7,zero,10105678 <_free_r+0x178>
10105590:	10c00054 	ori	r3,r2,1
10105594:	30c00115 	stw	r3,4(r6)
10105598:	3087883a 	add	r3,r6,r2
1010559c:	18800015 	stw	r2,0(r3)
101055a0:	00c07fc4 	movi	r3,511
101055a4:	18801936 	bltu	r3,r2,1010560c <_free_r+0x10c>
101055a8:	1004d0fa 	srli	r2,r2,3
101055ac:	01c00044 	movi	r7,1
101055b0:	21400117 	ldw	r5,4(r4)
101055b4:	10c00044 	addi	r3,r2,1
101055b8:	18c7883a 	add	r3,r3,r3
101055bc:	1005d0ba 	srai	r2,r2,2
101055c0:	18c7883a 	add	r3,r3,r3
101055c4:	18c7883a 	add	r3,r3,r3
101055c8:	1907883a 	add	r3,r3,r4
101055cc:	3884983a 	sll	r2,r7,r2
101055d0:	19c00017 	ldw	r7,0(r3)
101055d4:	1a3ffe04 	addi	r8,r3,-8
101055d8:	1144b03a 	or	r2,r2,r5
101055dc:	32000315 	stw	r8,12(r6)
101055e0:	31c00215 	stw	r7,8(r6)
101055e4:	20800115 	stw	r2,4(r4)
101055e8:	19800015 	stw	r6,0(r3)
101055ec:	39800315 	stw	r6,12(r7)
101055f0:	8809883a 	mov	r4,r17
101055f4:	dfc00217 	ldw	ra,8(sp)
101055f8:	dc400117 	ldw	r17,4(sp)
101055fc:	dc000017 	ldw	r16,0(sp)
10105600:	dec00304 	addi	sp,sp,12
10105604:	010dfd01 	jmpi	1010dfd0 <__malloc_unlock>
10105608:	f800283a 	ret
1010560c:	100ad27a 	srli	r5,r2,9
10105610:	00c00104 	movi	r3,4
10105614:	19404a36 	bltu	r3,r5,10105740 <_free_r+0x240>
10105618:	100ad1ba 	srli	r5,r2,6
1010561c:	28c00e44 	addi	r3,r5,57
10105620:	18c7883a 	add	r3,r3,r3
10105624:	29400e04 	addi	r5,r5,56
10105628:	18c7883a 	add	r3,r3,r3
1010562c:	18c7883a 	add	r3,r3,r3
10105630:	1909883a 	add	r4,r3,r4
10105634:	20c00017 	ldw	r3,0(r4)
10105638:	01c40474 	movhi	r7,4113
1010563c:	213ffe04 	addi	r4,r4,-8
10105640:	39c37004 	addi	r7,r7,3520
10105644:	20c04426 	beq	r4,r3,10105758 <_free_r+0x258>
10105648:	01ffff04 	movi	r7,-4
1010564c:	19400117 	ldw	r5,4(r3)
10105650:	29ca703a 	and	r5,r5,r7
10105654:	1140022e 	bgeu	r2,r5,10105660 <_free_r+0x160>
10105658:	18c00217 	ldw	r3,8(r3)
1010565c:	20fffb1e 	bne	r4,r3,1010564c <__alt_data_end+0xfffe564c>
10105660:	19000317 	ldw	r4,12(r3)
10105664:	31000315 	stw	r4,12(r6)
10105668:	30c00215 	stw	r3,8(r6)
1010566c:	21800215 	stw	r6,8(r4)
10105670:	19800315 	stw	r6,12(r3)
10105674:	003fde06 	br	101055f0 <__alt_data_end+0xfffe55f0>
10105678:	29c00217 	ldw	r7,8(r5)
1010567c:	10c5883a 	add	r2,r2,r3
10105680:	00c40474 	movhi	r3,4113
10105684:	18c37204 	addi	r3,r3,3528
10105688:	38c03b26 	beq	r7,r3,10105778 <_free_r+0x278>
1010568c:	2a000317 	ldw	r8,12(r5)
10105690:	11400054 	ori	r5,r2,1
10105694:	3087883a 	add	r3,r6,r2
10105698:	3a000315 	stw	r8,12(r7)
1010569c:	41c00215 	stw	r7,8(r8)
101056a0:	31400115 	stw	r5,4(r6)
101056a4:	18800015 	stw	r2,0(r3)
101056a8:	003fbd06 	br	101055a0 <__alt_data_end+0xfffe55a0>
101056ac:	39c0004c 	andi	r7,r7,1
101056b0:	10c5883a 	add	r2,r2,r3
101056b4:	3800071e 	bne	r7,zero,101056d4 <_free_r+0x1d4>
101056b8:	81fffe17 	ldw	r7,-8(r16)
101056bc:	31cdc83a 	sub	r6,r6,r7
101056c0:	30c00317 	ldw	r3,12(r6)
101056c4:	31400217 	ldw	r5,8(r6)
101056c8:	11c5883a 	add	r2,r2,r7
101056cc:	28c00315 	stw	r3,12(r5)
101056d0:	19400215 	stw	r5,8(r3)
101056d4:	10c00054 	ori	r3,r2,1
101056d8:	30c00115 	stw	r3,4(r6)
101056dc:	00c40474 	movhi	r3,4113
101056e0:	18c90204 	addi	r3,r3,9224
101056e4:	18c00017 	ldw	r3,0(r3)
101056e8:	21800215 	stw	r6,8(r4)
101056ec:	10ffc036 	bltu	r2,r3,101055f0 <__alt_data_end+0xfffe55f0>
101056f0:	00840474 	movhi	r2,4113
101056f4:	108ffc04 	addi	r2,r2,16368
101056f8:	11400017 	ldw	r5,0(r2)
101056fc:	8809883a 	mov	r4,r17
10105700:	01053dc0 	call	101053dc <_malloc_trim_r>
10105704:	003fba06 	br	101055f0 <__alt_data_end+0xfffe55f0>
10105708:	28c9883a 	add	r4,r5,r3
1010570c:	21000117 	ldw	r4,4(r4)
10105710:	2100004c 	andi	r4,r4,1
10105714:	2000391e 	bne	r4,zero,101057fc <_free_r+0x2fc>
10105718:	29c00217 	ldw	r7,8(r5)
1010571c:	29000317 	ldw	r4,12(r5)
10105720:	1885883a 	add	r2,r3,r2
10105724:	10c00054 	ori	r3,r2,1
10105728:	39000315 	stw	r4,12(r7)
1010572c:	21c00215 	stw	r7,8(r4)
10105730:	30c00115 	stw	r3,4(r6)
10105734:	308d883a 	add	r6,r6,r2
10105738:	30800015 	stw	r2,0(r6)
1010573c:	003fac06 	br	101055f0 <__alt_data_end+0xfffe55f0>
10105740:	00c00504 	movi	r3,20
10105744:	19401536 	bltu	r3,r5,1010579c <_free_r+0x29c>
10105748:	28c01704 	addi	r3,r5,92
1010574c:	18c7883a 	add	r3,r3,r3
10105750:	294016c4 	addi	r5,r5,91
10105754:	003fb406 	br	10105628 <__alt_data_end+0xfffe5628>
10105758:	280bd0ba 	srai	r5,r5,2
1010575c:	00c00044 	movi	r3,1
10105760:	38800117 	ldw	r2,4(r7)
10105764:	194a983a 	sll	r5,r3,r5
10105768:	2007883a 	mov	r3,r4
1010576c:	2884b03a 	or	r2,r5,r2
10105770:	38800115 	stw	r2,4(r7)
10105774:	003fbb06 	br	10105664 <__alt_data_end+0xfffe5664>
10105778:	21800515 	stw	r6,20(r4)
1010577c:	21800415 	stw	r6,16(r4)
10105780:	10c00054 	ori	r3,r2,1
10105784:	31c00315 	stw	r7,12(r6)
10105788:	31c00215 	stw	r7,8(r6)
1010578c:	30c00115 	stw	r3,4(r6)
10105790:	308d883a 	add	r6,r6,r2
10105794:	30800015 	stw	r2,0(r6)
10105798:	003f9506 	br	101055f0 <__alt_data_end+0xfffe55f0>
1010579c:	00c01504 	movi	r3,84
101057a0:	19400536 	bltu	r3,r5,101057b8 <_free_r+0x2b8>
101057a4:	100ad33a 	srli	r5,r2,12
101057a8:	28c01bc4 	addi	r3,r5,111
101057ac:	18c7883a 	add	r3,r3,r3
101057b0:	29401b84 	addi	r5,r5,110
101057b4:	003f9c06 	br	10105628 <__alt_data_end+0xfffe5628>
101057b8:	00c05504 	movi	r3,340
101057bc:	19400536 	bltu	r3,r5,101057d4 <_free_r+0x2d4>
101057c0:	100ad3fa 	srli	r5,r2,15
101057c4:	28c01e04 	addi	r3,r5,120
101057c8:	18c7883a 	add	r3,r3,r3
101057cc:	29401dc4 	addi	r5,r5,119
101057d0:	003f9506 	br	10105628 <__alt_data_end+0xfffe5628>
101057d4:	00c15504 	movi	r3,1364
101057d8:	19400536 	bltu	r3,r5,101057f0 <_free_r+0x2f0>
101057dc:	100ad4ba 	srli	r5,r2,18
101057e0:	28c01f44 	addi	r3,r5,125
101057e4:	18c7883a 	add	r3,r3,r3
101057e8:	29401f04 	addi	r5,r5,124
101057ec:	003f8e06 	br	10105628 <__alt_data_end+0xfffe5628>
101057f0:	00c03f84 	movi	r3,254
101057f4:	01401f84 	movi	r5,126
101057f8:	003f8b06 	br	10105628 <__alt_data_end+0xfffe5628>
101057fc:	10c00054 	ori	r3,r2,1
10105800:	30c00115 	stw	r3,4(r6)
10105804:	308d883a 	add	r6,r6,r2
10105808:	30800015 	stw	r2,0(r6)
1010580c:	003f7806 	br	101055f0 <__alt_data_end+0xfffe55f0>

10105810 <__sfvwrite_r>:
10105810:	30800217 	ldw	r2,8(r6)
10105814:	10006726 	beq	r2,zero,101059b4 <__sfvwrite_r+0x1a4>
10105818:	28c0030b 	ldhu	r3,12(r5)
1010581c:	defff404 	addi	sp,sp,-48
10105820:	dd400715 	stw	r21,28(sp)
10105824:	dd000615 	stw	r20,24(sp)
10105828:	dc000215 	stw	r16,8(sp)
1010582c:	dfc00b15 	stw	ra,44(sp)
10105830:	df000a15 	stw	fp,40(sp)
10105834:	ddc00915 	stw	r23,36(sp)
10105838:	dd800815 	stw	r22,32(sp)
1010583c:	dcc00515 	stw	r19,20(sp)
10105840:	dc800415 	stw	r18,16(sp)
10105844:	dc400315 	stw	r17,12(sp)
10105848:	1880020c 	andi	r2,r3,8
1010584c:	2821883a 	mov	r16,r5
10105850:	202b883a 	mov	r21,r4
10105854:	3029883a 	mov	r20,r6
10105858:	10002726 	beq	r2,zero,101058f8 <__sfvwrite_r+0xe8>
1010585c:	28800417 	ldw	r2,16(r5)
10105860:	10002526 	beq	r2,zero,101058f8 <__sfvwrite_r+0xe8>
10105864:	1880008c 	andi	r2,r3,2
10105868:	a4400017 	ldw	r17,0(r20)
1010586c:	10002a26 	beq	r2,zero,10105918 <__sfvwrite_r+0x108>
10105870:	05a00034 	movhi	r22,32768
10105874:	0027883a 	mov	r19,zero
10105878:	0025883a 	mov	r18,zero
1010587c:	b5bf0004 	addi	r22,r22,-1024
10105880:	980d883a 	mov	r6,r19
10105884:	a809883a 	mov	r4,r21
10105888:	90004626 	beq	r18,zero,101059a4 <__sfvwrite_r+0x194>
1010588c:	900f883a 	mov	r7,r18
10105890:	b480022e 	bgeu	r22,r18,1010589c <__sfvwrite_r+0x8c>
10105894:	01e00034 	movhi	r7,32768
10105898:	39ff0004 	addi	r7,r7,-1024
1010589c:	80800917 	ldw	r2,36(r16)
101058a0:	81400717 	ldw	r5,28(r16)
101058a4:	103ee83a 	callr	r2
101058a8:	00805a0e 	bge	zero,r2,10105a14 <__sfvwrite_r+0x204>
101058ac:	a0c00217 	ldw	r3,8(r20)
101058b0:	98a7883a 	add	r19,r19,r2
101058b4:	90a5c83a 	sub	r18,r18,r2
101058b8:	1885c83a 	sub	r2,r3,r2
101058bc:	a0800215 	stw	r2,8(r20)
101058c0:	103fef1e 	bne	r2,zero,10105880 <__alt_data_end+0xfffe5880>
101058c4:	0005883a 	mov	r2,zero
101058c8:	dfc00b17 	ldw	ra,44(sp)
101058cc:	df000a17 	ldw	fp,40(sp)
101058d0:	ddc00917 	ldw	r23,36(sp)
101058d4:	dd800817 	ldw	r22,32(sp)
101058d8:	dd400717 	ldw	r21,28(sp)
101058dc:	dd000617 	ldw	r20,24(sp)
101058e0:	dcc00517 	ldw	r19,20(sp)
101058e4:	dc800417 	ldw	r18,16(sp)
101058e8:	dc400317 	ldw	r17,12(sp)
101058ec:	dc000217 	ldw	r16,8(sp)
101058f0:	dec00c04 	addi	sp,sp,48
101058f4:	f800283a 	ret
101058f8:	800b883a 	mov	r5,r16
101058fc:	a809883a 	mov	r4,r21
10105900:	01033800 	call	10103380 <__swsetup_r>
10105904:	1000ee1e 	bne	r2,zero,10105cc0 <__sfvwrite_r+0x4b0>
10105908:	80c0030b 	ldhu	r3,12(r16)
1010590c:	a4400017 	ldw	r17,0(r20)
10105910:	1880008c 	andi	r2,r3,2
10105914:	103fd61e 	bne	r2,zero,10105870 <__alt_data_end+0xfffe5870>
10105918:	1880004c 	andi	r2,r3,1
1010591c:	1000421e 	bne	r2,zero,10105a28 <__sfvwrite_r+0x218>
10105920:	0039883a 	mov	fp,zero
10105924:	0025883a 	mov	r18,zero
10105928:	90001a26 	beq	r18,zero,10105994 <__sfvwrite_r+0x184>
1010592c:	1880800c 	andi	r2,r3,512
10105930:	84c00217 	ldw	r19,8(r16)
10105934:	10002126 	beq	r2,zero,101059bc <__sfvwrite_r+0x1ac>
10105938:	982f883a 	mov	r23,r19
1010593c:	94c09636 	bltu	r18,r19,10105b98 <__sfvwrite_r+0x388>
10105940:	1881200c 	andi	r2,r3,1152
10105944:	1000a11e 	bne	r2,zero,10105bcc <__sfvwrite_r+0x3bc>
10105948:	81000017 	ldw	r4,0(r16)
1010594c:	b80d883a 	mov	r6,r23
10105950:	e00b883a 	mov	r5,fp
10105954:	01069e80 	call	101069e8 <memmove>
10105958:	80c00217 	ldw	r3,8(r16)
1010595c:	81000017 	ldw	r4,0(r16)
10105960:	9005883a 	mov	r2,r18
10105964:	1ce7c83a 	sub	r19,r3,r19
10105968:	25cf883a 	add	r7,r4,r23
1010596c:	84c00215 	stw	r19,8(r16)
10105970:	81c00015 	stw	r7,0(r16)
10105974:	a0c00217 	ldw	r3,8(r20)
10105978:	e0b9883a 	add	fp,fp,r2
1010597c:	90a5c83a 	sub	r18,r18,r2
10105980:	18a7c83a 	sub	r19,r3,r2
10105984:	a4c00215 	stw	r19,8(r20)
10105988:	983fce26 	beq	r19,zero,101058c4 <__alt_data_end+0xfffe58c4>
1010598c:	80c0030b 	ldhu	r3,12(r16)
10105990:	903fe61e 	bne	r18,zero,1010592c <__alt_data_end+0xfffe592c>
10105994:	8f000017 	ldw	fp,0(r17)
10105998:	8c800117 	ldw	r18,4(r17)
1010599c:	8c400204 	addi	r17,r17,8
101059a0:	003fe106 	br	10105928 <__alt_data_end+0xfffe5928>
101059a4:	8cc00017 	ldw	r19,0(r17)
101059a8:	8c800117 	ldw	r18,4(r17)
101059ac:	8c400204 	addi	r17,r17,8
101059b0:	003fb306 	br	10105880 <__alt_data_end+0xfffe5880>
101059b4:	0005883a 	mov	r2,zero
101059b8:	f800283a 	ret
101059bc:	81000017 	ldw	r4,0(r16)
101059c0:	80800417 	ldw	r2,16(r16)
101059c4:	11005a36 	bltu	r2,r4,10105b30 <__sfvwrite_r+0x320>
101059c8:	85c00517 	ldw	r23,20(r16)
101059cc:	95c05836 	bltu	r18,r23,10105b30 <__sfvwrite_r+0x320>
101059d0:	00a00034 	movhi	r2,32768
101059d4:	10bfffc4 	addi	r2,r2,-1
101059d8:	9009883a 	mov	r4,r18
101059dc:	1480012e 	bgeu	r2,r18,101059e4 <__sfvwrite_r+0x1d4>
101059e0:	1009883a 	mov	r4,r2
101059e4:	b80b883a 	mov	r5,r23
101059e8:	0100ad00 	call	10100ad0 <__divsi3>
101059ec:	b80b883a 	mov	r5,r23
101059f0:	1009883a 	mov	r4,r2
101059f4:	0100c840 	call	10100c84 <__mulsi3>
101059f8:	81400717 	ldw	r5,28(r16)
101059fc:	80c00917 	ldw	r3,36(r16)
10105a00:	100f883a 	mov	r7,r2
10105a04:	e00d883a 	mov	r6,fp
10105a08:	a809883a 	mov	r4,r21
10105a0c:	183ee83a 	callr	r3
10105a10:	00bfd816 	blt	zero,r2,10105974 <__alt_data_end+0xfffe5974>
10105a14:	8080030b 	ldhu	r2,12(r16)
10105a18:	10801014 	ori	r2,r2,64
10105a1c:	8080030d 	sth	r2,12(r16)
10105a20:	00bfffc4 	movi	r2,-1
10105a24:	003fa806 	br	101058c8 <__alt_data_end+0xfffe58c8>
10105a28:	0027883a 	mov	r19,zero
10105a2c:	0011883a 	mov	r8,zero
10105a30:	0039883a 	mov	fp,zero
10105a34:	0025883a 	mov	r18,zero
10105a38:	90001f26 	beq	r18,zero,10105ab8 <__sfvwrite_r+0x2a8>
10105a3c:	40005a26 	beq	r8,zero,10105ba8 <__sfvwrite_r+0x398>
10105a40:	982d883a 	mov	r22,r19
10105a44:	94c0012e 	bgeu	r18,r19,10105a4c <__sfvwrite_r+0x23c>
10105a48:	902d883a 	mov	r22,r18
10105a4c:	81000017 	ldw	r4,0(r16)
10105a50:	80800417 	ldw	r2,16(r16)
10105a54:	b02f883a 	mov	r23,r22
10105a58:	81c00517 	ldw	r7,20(r16)
10105a5c:	1100032e 	bgeu	r2,r4,10105a6c <__sfvwrite_r+0x25c>
10105a60:	80c00217 	ldw	r3,8(r16)
10105a64:	38c7883a 	add	r3,r7,r3
10105a68:	1d801816 	blt	r3,r22,10105acc <__sfvwrite_r+0x2bc>
10105a6c:	b1c03e16 	blt	r22,r7,10105b68 <__sfvwrite_r+0x358>
10105a70:	80800917 	ldw	r2,36(r16)
10105a74:	81400717 	ldw	r5,28(r16)
10105a78:	e00d883a 	mov	r6,fp
10105a7c:	da000115 	stw	r8,4(sp)
10105a80:	a809883a 	mov	r4,r21
10105a84:	103ee83a 	callr	r2
10105a88:	102f883a 	mov	r23,r2
10105a8c:	da000117 	ldw	r8,4(sp)
10105a90:	00bfe00e 	bge	zero,r2,10105a14 <__alt_data_end+0xfffe5a14>
10105a94:	9de7c83a 	sub	r19,r19,r23
10105a98:	98001f26 	beq	r19,zero,10105b18 <__sfvwrite_r+0x308>
10105a9c:	a0800217 	ldw	r2,8(r20)
10105aa0:	e5f9883a 	add	fp,fp,r23
10105aa4:	95e5c83a 	sub	r18,r18,r23
10105aa8:	15efc83a 	sub	r23,r2,r23
10105aac:	a5c00215 	stw	r23,8(r20)
10105ab0:	b83f8426 	beq	r23,zero,101058c4 <__alt_data_end+0xfffe58c4>
10105ab4:	903fe11e 	bne	r18,zero,10105a3c <__alt_data_end+0xfffe5a3c>
10105ab8:	8f000017 	ldw	fp,0(r17)
10105abc:	8c800117 	ldw	r18,4(r17)
10105ac0:	0011883a 	mov	r8,zero
10105ac4:	8c400204 	addi	r17,r17,8
10105ac8:	003fdb06 	br	10105a38 <__alt_data_end+0xfffe5a38>
10105acc:	180d883a 	mov	r6,r3
10105ad0:	e00b883a 	mov	r5,fp
10105ad4:	da000115 	stw	r8,4(sp)
10105ad8:	d8c00015 	stw	r3,0(sp)
10105adc:	01069e80 	call	101069e8 <memmove>
10105ae0:	d8c00017 	ldw	r3,0(sp)
10105ae4:	80800017 	ldw	r2,0(r16)
10105ae8:	800b883a 	mov	r5,r16
10105aec:	a809883a 	mov	r4,r21
10105af0:	10c5883a 	add	r2,r2,r3
10105af4:	80800015 	stw	r2,0(r16)
10105af8:	d8c00015 	stw	r3,0(sp)
10105afc:	0104fa00 	call	10104fa0 <_fflush_r>
10105b00:	d8c00017 	ldw	r3,0(sp)
10105b04:	da000117 	ldw	r8,4(sp)
10105b08:	103fc21e 	bne	r2,zero,10105a14 <__alt_data_end+0xfffe5a14>
10105b0c:	182f883a 	mov	r23,r3
10105b10:	9de7c83a 	sub	r19,r19,r23
10105b14:	983fe11e 	bne	r19,zero,10105a9c <__alt_data_end+0xfffe5a9c>
10105b18:	800b883a 	mov	r5,r16
10105b1c:	a809883a 	mov	r4,r21
10105b20:	0104fa00 	call	10104fa0 <_fflush_r>
10105b24:	103fbb1e 	bne	r2,zero,10105a14 <__alt_data_end+0xfffe5a14>
10105b28:	0011883a 	mov	r8,zero
10105b2c:	003fdb06 	br	10105a9c <__alt_data_end+0xfffe5a9c>
10105b30:	94c0012e 	bgeu	r18,r19,10105b38 <__sfvwrite_r+0x328>
10105b34:	9027883a 	mov	r19,r18
10105b38:	980d883a 	mov	r6,r19
10105b3c:	e00b883a 	mov	r5,fp
10105b40:	01069e80 	call	101069e8 <memmove>
10105b44:	80800217 	ldw	r2,8(r16)
10105b48:	80c00017 	ldw	r3,0(r16)
10105b4c:	14c5c83a 	sub	r2,r2,r19
10105b50:	1cc7883a 	add	r3,r3,r19
10105b54:	80800215 	stw	r2,8(r16)
10105b58:	80c00015 	stw	r3,0(r16)
10105b5c:	10004326 	beq	r2,zero,10105c6c <__sfvwrite_r+0x45c>
10105b60:	9805883a 	mov	r2,r19
10105b64:	003f8306 	br	10105974 <__alt_data_end+0xfffe5974>
10105b68:	b00d883a 	mov	r6,r22
10105b6c:	e00b883a 	mov	r5,fp
10105b70:	da000115 	stw	r8,4(sp)
10105b74:	01069e80 	call	101069e8 <memmove>
10105b78:	80800217 	ldw	r2,8(r16)
10105b7c:	80c00017 	ldw	r3,0(r16)
10105b80:	da000117 	ldw	r8,4(sp)
10105b84:	1585c83a 	sub	r2,r2,r22
10105b88:	1dad883a 	add	r22,r3,r22
10105b8c:	80800215 	stw	r2,8(r16)
10105b90:	85800015 	stw	r22,0(r16)
10105b94:	003fbf06 	br	10105a94 <__alt_data_end+0xfffe5a94>
10105b98:	81000017 	ldw	r4,0(r16)
10105b9c:	9027883a 	mov	r19,r18
10105ba0:	902f883a 	mov	r23,r18
10105ba4:	003f6906 	br	1010594c <__alt_data_end+0xfffe594c>
10105ba8:	900d883a 	mov	r6,r18
10105bac:	01400284 	movi	r5,10
10105bb0:	e009883a 	mov	r4,fp
10105bb4:	01069040 	call	10106904 <memchr>
10105bb8:	10003e26 	beq	r2,zero,10105cb4 <__sfvwrite_r+0x4a4>
10105bbc:	10800044 	addi	r2,r2,1
10105bc0:	1727c83a 	sub	r19,r2,fp
10105bc4:	02000044 	movi	r8,1
10105bc8:	003f9d06 	br	10105a40 <__alt_data_end+0xfffe5a40>
10105bcc:	80800517 	ldw	r2,20(r16)
10105bd0:	81400417 	ldw	r5,16(r16)
10105bd4:	81c00017 	ldw	r7,0(r16)
10105bd8:	10a7883a 	add	r19,r2,r2
10105bdc:	9885883a 	add	r2,r19,r2
10105be0:	1026d7fa 	srli	r19,r2,31
10105be4:	396dc83a 	sub	r22,r7,r5
10105be8:	b1000044 	addi	r4,r22,1
10105bec:	9885883a 	add	r2,r19,r2
10105bf0:	1027d07a 	srai	r19,r2,1
10105bf4:	2485883a 	add	r2,r4,r18
10105bf8:	980d883a 	mov	r6,r19
10105bfc:	9880022e 	bgeu	r19,r2,10105c08 <__sfvwrite_r+0x3f8>
10105c00:	1027883a 	mov	r19,r2
10105c04:	100d883a 	mov	r6,r2
10105c08:	18c1000c 	andi	r3,r3,1024
10105c0c:	18001c26 	beq	r3,zero,10105c80 <__sfvwrite_r+0x470>
10105c10:	300b883a 	mov	r5,r6
10105c14:	a809883a 	mov	r4,r21
10105c18:	01060f80 	call	101060f8 <_malloc_r>
10105c1c:	102f883a 	mov	r23,r2
10105c20:	10002926 	beq	r2,zero,10105cc8 <__sfvwrite_r+0x4b8>
10105c24:	81400417 	ldw	r5,16(r16)
10105c28:	b00d883a 	mov	r6,r22
10105c2c:	1009883a 	mov	r4,r2
10105c30:	0100cac0 	call	10100cac <memcpy>
10105c34:	8080030b 	ldhu	r2,12(r16)
10105c38:	00fedfc4 	movi	r3,-1153
10105c3c:	10c4703a 	and	r2,r2,r3
10105c40:	10802014 	ori	r2,r2,128
10105c44:	8080030d 	sth	r2,12(r16)
10105c48:	bd89883a 	add	r4,r23,r22
10105c4c:	9d8fc83a 	sub	r7,r19,r22
10105c50:	85c00415 	stw	r23,16(r16)
10105c54:	84c00515 	stw	r19,20(r16)
10105c58:	81000015 	stw	r4,0(r16)
10105c5c:	9027883a 	mov	r19,r18
10105c60:	81c00215 	stw	r7,8(r16)
10105c64:	902f883a 	mov	r23,r18
10105c68:	003f3806 	br	1010594c <__alt_data_end+0xfffe594c>
10105c6c:	800b883a 	mov	r5,r16
10105c70:	a809883a 	mov	r4,r21
10105c74:	0104fa00 	call	10104fa0 <_fflush_r>
10105c78:	103fb926 	beq	r2,zero,10105b60 <__alt_data_end+0xfffe5b60>
10105c7c:	003f6506 	br	10105a14 <__alt_data_end+0xfffe5a14>
10105c80:	a809883a 	mov	r4,r21
10105c84:	0107d240 	call	10107d24 <_realloc_r>
10105c88:	102f883a 	mov	r23,r2
10105c8c:	103fee1e 	bne	r2,zero,10105c48 <__alt_data_end+0xfffe5c48>
10105c90:	81400417 	ldw	r5,16(r16)
10105c94:	a809883a 	mov	r4,r21
10105c98:	01055000 	call	10105500 <_free_r>
10105c9c:	8080030b 	ldhu	r2,12(r16)
10105ca0:	00ffdfc4 	movi	r3,-129
10105ca4:	1884703a 	and	r2,r3,r2
10105ca8:	00c00304 	movi	r3,12
10105cac:	a8c00015 	stw	r3,0(r21)
10105cb0:	003f5906 	br	10105a18 <__alt_data_end+0xfffe5a18>
10105cb4:	94c00044 	addi	r19,r18,1
10105cb8:	02000044 	movi	r8,1
10105cbc:	003f6006 	br	10105a40 <__alt_data_end+0xfffe5a40>
10105cc0:	00bfffc4 	movi	r2,-1
10105cc4:	003f0006 	br	101058c8 <__alt_data_end+0xfffe58c8>
10105cc8:	00800304 	movi	r2,12
10105ccc:	a8800015 	stw	r2,0(r21)
10105cd0:	8080030b 	ldhu	r2,12(r16)
10105cd4:	003f5006 	br	10105a18 <__alt_data_end+0xfffe5a18>

10105cd8 <_fwalk>:
10105cd8:	defff704 	addi	sp,sp,-36
10105cdc:	dd000415 	stw	r20,16(sp)
10105ce0:	dfc00815 	stw	ra,32(sp)
10105ce4:	ddc00715 	stw	r23,28(sp)
10105ce8:	dd800615 	stw	r22,24(sp)
10105cec:	dd400515 	stw	r21,20(sp)
10105cf0:	dcc00315 	stw	r19,12(sp)
10105cf4:	dc800215 	stw	r18,8(sp)
10105cf8:	dc400115 	stw	r17,4(sp)
10105cfc:	dc000015 	stw	r16,0(sp)
10105d00:	2500b804 	addi	r20,r4,736
10105d04:	a0002326 	beq	r20,zero,10105d94 <_fwalk+0xbc>
10105d08:	282b883a 	mov	r21,r5
10105d0c:	002f883a 	mov	r23,zero
10105d10:	05800044 	movi	r22,1
10105d14:	04ffffc4 	movi	r19,-1
10105d18:	a4400117 	ldw	r17,4(r20)
10105d1c:	a4800217 	ldw	r18,8(r20)
10105d20:	8c7fffc4 	addi	r17,r17,-1
10105d24:	88000d16 	blt	r17,zero,10105d5c <_fwalk+0x84>
10105d28:	94000304 	addi	r16,r18,12
10105d2c:	94800384 	addi	r18,r18,14
10105d30:	8080000b 	ldhu	r2,0(r16)
10105d34:	8c7fffc4 	addi	r17,r17,-1
10105d38:	813ffd04 	addi	r4,r16,-12
10105d3c:	b080042e 	bgeu	r22,r2,10105d50 <_fwalk+0x78>
10105d40:	9080000f 	ldh	r2,0(r18)
10105d44:	14c00226 	beq	r2,r19,10105d50 <_fwalk+0x78>
10105d48:	a83ee83a 	callr	r21
10105d4c:	b8aeb03a 	or	r23,r23,r2
10105d50:	84001a04 	addi	r16,r16,104
10105d54:	94801a04 	addi	r18,r18,104
10105d58:	8cfff51e 	bne	r17,r19,10105d30 <__alt_data_end+0xfffe5d30>
10105d5c:	a5000017 	ldw	r20,0(r20)
10105d60:	a03fed1e 	bne	r20,zero,10105d18 <__alt_data_end+0xfffe5d18>
10105d64:	b805883a 	mov	r2,r23
10105d68:	dfc00817 	ldw	ra,32(sp)
10105d6c:	ddc00717 	ldw	r23,28(sp)
10105d70:	dd800617 	ldw	r22,24(sp)
10105d74:	dd400517 	ldw	r21,20(sp)
10105d78:	dd000417 	ldw	r20,16(sp)
10105d7c:	dcc00317 	ldw	r19,12(sp)
10105d80:	dc800217 	ldw	r18,8(sp)
10105d84:	dc400117 	ldw	r17,4(sp)
10105d88:	dc000017 	ldw	r16,0(sp)
10105d8c:	dec00904 	addi	sp,sp,36
10105d90:	f800283a 	ret
10105d94:	002f883a 	mov	r23,zero
10105d98:	003ff206 	br	10105d64 <__alt_data_end+0xfffe5d64>

10105d9c <_fwalk_reent>:
10105d9c:	defff704 	addi	sp,sp,-36
10105da0:	dd000415 	stw	r20,16(sp)
10105da4:	dfc00815 	stw	ra,32(sp)
10105da8:	ddc00715 	stw	r23,28(sp)
10105dac:	dd800615 	stw	r22,24(sp)
10105db0:	dd400515 	stw	r21,20(sp)
10105db4:	dcc00315 	stw	r19,12(sp)
10105db8:	dc800215 	stw	r18,8(sp)
10105dbc:	dc400115 	stw	r17,4(sp)
10105dc0:	dc000015 	stw	r16,0(sp)
10105dc4:	2500b804 	addi	r20,r4,736
10105dc8:	a0002326 	beq	r20,zero,10105e58 <_fwalk_reent+0xbc>
10105dcc:	282b883a 	mov	r21,r5
10105dd0:	2027883a 	mov	r19,r4
10105dd4:	002f883a 	mov	r23,zero
10105dd8:	05800044 	movi	r22,1
10105ddc:	04bfffc4 	movi	r18,-1
10105de0:	a4400117 	ldw	r17,4(r20)
10105de4:	a4000217 	ldw	r16,8(r20)
10105de8:	8c7fffc4 	addi	r17,r17,-1
10105dec:	88000c16 	blt	r17,zero,10105e20 <_fwalk_reent+0x84>
10105df0:	84000304 	addi	r16,r16,12
10105df4:	8080000b 	ldhu	r2,0(r16)
10105df8:	8c7fffc4 	addi	r17,r17,-1
10105dfc:	817ffd04 	addi	r5,r16,-12
10105e00:	b080052e 	bgeu	r22,r2,10105e18 <_fwalk_reent+0x7c>
10105e04:	8080008f 	ldh	r2,2(r16)
10105e08:	9809883a 	mov	r4,r19
10105e0c:	14800226 	beq	r2,r18,10105e18 <_fwalk_reent+0x7c>
10105e10:	a83ee83a 	callr	r21
10105e14:	b8aeb03a 	or	r23,r23,r2
10105e18:	84001a04 	addi	r16,r16,104
10105e1c:	8cbff51e 	bne	r17,r18,10105df4 <__alt_data_end+0xfffe5df4>
10105e20:	a5000017 	ldw	r20,0(r20)
10105e24:	a03fee1e 	bne	r20,zero,10105de0 <__alt_data_end+0xfffe5de0>
10105e28:	b805883a 	mov	r2,r23
10105e2c:	dfc00817 	ldw	ra,32(sp)
10105e30:	ddc00717 	ldw	r23,28(sp)
10105e34:	dd800617 	ldw	r22,24(sp)
10105e38:	dd400517 	ldw	r21,20(sp)
10105e3c:	dd000417 	ldw	r20,16(sp)
10105e40:	dcc00317 	ldw	r19,12(sp)
10105e44:	dc800217 	ldw	r18,8(sp)
10105e48:	dc400117 	ldw	r17,4(sp)
10105e4c:	dc000017 	ldw	r16,0(sp)
10105e50:	dec00904 	addi	sp,sp,36
10105e54:	f800283a 	ret
10105e58:	002f883a 	mov	r23,zero
10105e5c:	003ff206 	br	10105e28 <__alt_data_end+0xfffe5e28>

10105e60 <_setlocale_r>:
10105e60:	30001b26 	beq	r6,zero,10105ed0 <_setlocale_r+0x70>
10105e64:	01440474 	movhi	r5,4113
10105e68:	defffe04 	addi	sp,sp,-8
10105e6c:	2941a504 	addi	r5,r5,1684
10105e70:	3009883a 	mov	r4,r6
10105e74:	dc000015 	stw	r16,0(sp)
10105e78:	dfc00115 	stw	ra,4(sp)
10105e7c:	3021883a 	mov	r16,r6
10105e80:	010848c0 	call	1010848c <strcmp>
10105e84:	1000061e 	bne	r2,zero,10105ea0 <_setlocale_r+0x40>
10105e88:	00840474 	movhi	r2,4113
10105e8c:	1081a404 	addi	r2,r2,1680
10105e90:	dfc00117 	ldw	ra,4(sp)
10105e94:	dc000017 	ldw	r16,0(sp)
10105e98:	dec00204 	addi	sp,sp,8
10105e9c:	f800283a 	ret
10105ea0:	01440474 	movhi	r5,4113
10105ea4:	2941a404 	addi	r5,r5,1680
10105ea8:	8009883a 	mov	r4,r16
10105eac:	010848c0 	call	1010848c <strcmp>
10105eb0:	103ff526 	beq	r2,zero,10105e88 <__alt_data_end+0xfffe5e88>
10105eb4:	01440474 	movhi	r5,4113
10105eb8:	29418f04 	addi	r5,r5,1596
10105ebc:	8009883a 	mov	r4,r16
10105ec0:	010848c0 	call	1010848c <strcmp>
10105ec4:	103ff026 	beq	r2,zero,10105e88 <__alt_data_end+0xfffe5e88>
10105ec8:	0005883a 	mov	r2,zero
10105ecc:	003ff006 	br	10105e90 <__alt_data_end+0xfffe5e90>
10105ed0:	00840474 	movhi	r2,4113
10105ed4:	1081a404 	addi	r2,r2,1680
10105ed8:	f800283a 	ret

10105edc <__locale_charset>:
10105edc:	00840474 	movhi	r2,4113
10105ee0:	10835a04 	addi	r2,r2,3432
10105ee4:	f800283a 	ret

10105ee8 <__locale_mb_cur_max>:
10105ee8:	00840474 	movhi	r2,4113
10105eec:	10890004 	addi	r2,r2,9216
10105ef0:	10800017 	ldw	r2,0(r2)
10105ef4:	f800283a 	ret

10105ef8 <__locale_msgcharset>:
10105ef8:	00840474 	movhi	r2,4113
10105efc:	10835204 	addi	r2,r2,3400
10105f00:	f800283a 	ret

10105f04 <__locale_cjk_lang>:
10105f04:	0005883a 	mov	r2,zero
10105f08:	f800283a 	ret

10105f0c <_localeconv_r>:
10105f0c:	00840474 	movhi	r2,4113
10105f10:	10836204 	addi	r2,r2,3464
10105f14:	f800283a 	ret

10105f18 <setlocale>:
10105f18:	00840474 	movhi	r2,4113
10105f1c:	1088ff04 	addi	r2,r2,9212
10105f20:	280d883a 	mov	r6,r5
10105f24:	200b883a 	mov	r5,r4
10105f28:	11000017 	ldw	r4,0(r2)
10105f2c:	0105e601 	jmpi	10105e60 <_setlocale_r>

10105f30 <localeconv>:
10105f30:	00840474 	movhi	r2,4113
10105f34:	10836204 	addi	r2,r2,3464
10105f38:	f800283a 	ret

10105f3c <__smakebuf_r>:
10105f3c:	2880030b 	ldhu	r2,12(r5)
10105f40:	10c0008c 	andi	r3,r2,2
10105f44:	1800411e 	bne	r3,zero,1010604c <__smakebuf_r+0x110>
10105f48:	deffec04 	addi	sp,sp,-80
10105f4c:	dc000f15 	stw	r16,60(sp)
10105f50:	2821883a 	mov	r16,r5
10105f54:	2940038f 	ldh	r5,14(r5)
10105f58:	dc401015 	stw	r17,64(sp)
10105f5c:	dfc01315 	stw	ra,76(sp)
10105f60:	dcc01215 	stw	r19,72(sp)
10105f64:	dc801115 	stw	r18,68(sp)
10105f68:	2023883a 	mov	r17,r4
10105f6c:	28001c16 	blt	r5,zero,10105fe0 <__smakebuf_r+0xa4>
10105f70:	d80d883a 	mov	r6,sp
10105f74:	010a0fc0 	call	1010a0fc <_fstat_r>
10105f78:	10001816 	blt	r2,zero,10105fdc <__smakebuf_r+0xa0>
10105f7c:	d8800117 	ldw	r2,4(sp)
10105f80:	00e00014 	movui	r3,32768
10105f84:	10bc000c 	andi	r2,r2,61440
10105f88:	14c80020 	cmpeqi	r19,r2,8192
10105f8c:	10c03726 	beq	r2,r3,1010606c <__smakebuf_r+0x130>
10105f90:	80c0030b 	ldhu	r3,12(r16)
10105f94:	18c20014 	ori	r3,r3,2048
10105f98:	80c0030d 	sth	r3,12(r16)
10105f9c:	00c80004 	movi	r3,8192
10105fa0:	10c0521e 	bne	r2,r3,101060ec <__smakebuf_r+0x1b0>
10105fa4:	8140038f 	ldh	r5,14(r16)
10105fa8:	8809883a 	mov	r4,r17
10105fac:	010a1580 	call	1010a158 <_isatty_r>
10105fb0:	10004c26 	beq	r2,zero,101060e4 <__smakebuf_r+0x1a8>
10105fb4:	8080030b 	ldhu	r2,12(r16)
10105fb8:	80c010c4 	addi	r3,r16,67
10105fbc:	80c00015 	stw	r3,0(r16)
10105fc0:	10800054 	ori	r2,r2,1
10105fc4:	8080030d 	sth	r2,12(r16)
10105fc8:	00800044 	movi	r2,1
10105fcc:	80c00415 	stw	r3,16(r16)
10105fd0:	80800515 	stw	r2,20(r16)
10105fd4:	04810004 	movi	r18,1024
10105fd8:	00000706 	br	10105ff8 <__smakebuf_r+0xbc>
10105fdc:	8080030b 	ldhu	r2,12(r16)
10105fe0:	10c0200c 	andi	r3,r2,128
10105fe4:	18001f1e 	bne	r3,zero,10106064 <__smakebuf_r+0x128>
10105fe8:	04810004 	movi	r18,1024
10105fec:	10820014 	ori	r2,r2,2048
10105ff0:	8080030d 	sth	r2,12(r16)
10105ff4:	0027883a 	mov	r19,zero
10105ff8:	900b883a 	mov	r5,r18
10105ffc:	8809883a 	mov	r4,r17
10106000:	01060f80 	call	101060f8 <_malloc_r>
10106004:	10002c26 	beq	r2,zero,101060b8 <__smakebuf_r+0x17c>
10106008:	80c0030b 	ldhu	r3,12(r16)
1010600c:	01040434 	movhi	r4,4112
10106010:	21140d04 	addi	r4,r4,20532
10106014:	89000f15 	stw	r4,60(r17)
10106018:	18c02014 	ori	r3,r3,128
1010601c:	80c0030d 	sth	r3,12(r16)
10106020:	80800015 	stw	r2,0(r16)
10106024:	80800415 	stw	r2,16(r16)
10106028:	84800515 	stw	r18,20(r16)
1010602c:	98001a1e 	bne	r19,zero,10106098 <__smakebuf_r+0x15c>
10106030:	dfc01317 	ldw	ra,76(sp)
10106034:	dcc01217 	ldw	r19,72(sp)
10106038:	dc801117 	ldw	r18,68(sp)
1010603c:	dc401017 	ldw	r17,64(sp)
10106040:	dc000f17 	ldw	r16,60(sp)
10106044:	dec01404 	addi	sp,sp,80
10106048:	f800283a 	ret
1010604c:	288010c4 	addi	r2,r5,67
10106050:	28800015 	stw	r2,0(r5)
10106054:	28800415 	stw	r2,16(r5)
10106058:	00800044 	movi	r2,1
1010605c:	28800515 	stw	r2,20(r5)
10106060:	f800283a 	ret
10106064:	04801004 	movi	r18,64
10106068:	003fe006 	br	10105fec <__alt_data_end+0xfffe5fec>
1010606c:	81000a17 	ldw	r4,40(r16)
10106070:	00c40474 	movhi	r3,4113
10106074:	18e10a04 	addi	r3,r3,-31704
10106078:	20ffc51e 	bne	r4,r3,10105f90 <__alt_data_end+0xfffe5f90>
1010607c:	8080030b 	ldhu	r2,12(r16)
10106080:	04810004 	movi	r18,1024
10106084:	84801315 	stw	r18,76(r16)
10106088:	1484b03a 	or	r2,r2,r18
1010608c:	8080030d 	sth	r2,12(r16)
10106090:	0027883a 	mov	r19,zero
10106094:	003fd806 	br	10105ff8 <__alt_data_end+0xfffe5ff8>
10106098:	8140038f 	ldh	r5,14(r16)
1010609c:	8809883a 	mov	r4,r17
101060a0:	010a1580 	call	1010a158 <_isatty_r>
101060a4:	103fe226 	beq	r2,zero,10106030 <__alt_data_end+0xfffe6030>
101060a8:	8080030b 	ldhu	r2,12(r16)
101060ac:	10800054 	ori	r2,r2,1
101060b0:	8080030d 	sth	r2,12(r16)
101060b4:	003fde06 	br	10106030 <__alt_data_end+0xfffe6030>
101060b8:	8080030b 	ldhu	r2,12(r16)
101060bc:	10c0800c 	andi	r3,r2,512
101060c0:	183fdb1e 	bne	r3,zero,10106030 <__alt_data_end+0xfffe6030>
101060c4:	10800094 	ori	r2,r2,2
101060c8:	80c010c4 	addi	r3,r16,67
101060cc:	8080030d 	sth	r2,12(r16)
101060d0:	00800044 	movi	r2,1
101060d4:	80c00015 	stw	r3,0(r16)
101060d8:	80c00415 	stw	r3,16(r16)
101060dc:	80800515 	stw	r2,20(r16)
101060e0:	003fd306 	br	10106030 <__alt_data_end+0xfffe6030>
101060e4:	04810004 	movi	r18,1024
101060e8:	003fc306 	br	10105ff8 <__alt_data_end+0xfffe5ff8>
101060ec:	0027883a 	mov	r19,zero
101060f0:	04810004 	movi	r18,1024
101060f4:	003fc006 	br	10105ff8 <__alt_data_end+0xfffe5ff8>

101060f8 <_malloc_r>:
101060f8:	defff504 	addi	sp,sp,-44
101060fc:	dc800315 	stw	r18,12(sp)
10106100:	dfc00a15 	stw	ra,40(sp)
10106104:	df000915 	stw	fp,36(sp)
10106108:	ddc00815 	stw	r23,32(sp)
1010610c:	dd800715 	stw	r22,28(sp)
10106110:	dd400615 	stw	r21,24(sp)
10106114:	dd000515 	stw	r20,20(sp)
10106118:	dcc00415 	stw	r19,16(sp)
1010611c:	dc400215 	stw	r17,8(sp)
10106120:	dc000115 	stw	r16,4(sp)
10106124:	288002c4 	addi	r2,r5,11
10106128:	00c00584 	movi	r3,22
1010612c:	2025883a 	mov	r18,r4
10106130:	18807f2e 	bgeu	r3,r2,10106330 <_malloc_r+0x238>
10106134:	047ffe04 	movi	r17,-8
10106138:	1462703a 	and	r17,r2,r17
1010613c:	8800a316 	blt	r17,zero,101063cc <_malloc_r+0x2d4>
10106140:	8940a236 	bltu	r17,r5,101063cc <_malloc_r+0x2d4>
10106144:	010dfac0 	call	1010dfac <__malloc_lock>
10106148:	00807dc4 	movi	r2,503
1010614c:	1441e92e 	bgeu	r2,r17,101068f4 <_malloc_r+0x7fc>
10106150:	8804d27a 	srli	r2,r17,9
10106154:	1000a126 	beq	r2,zero,101063dc <_malloc_r+0x2e4>
10106158:	00c00104 	movi	r3,4
1010615c:	18811e36 	bltu	r3,r2,101065d8 <_malloc_r+0x4e0>
10106160:	8804d1ba 	srli	r2,r17,6
10106164:	12000e44 	addi	r8,r2,57
10106168:	11c00e04 	addi	r7,r2,56
1010616c:	4209883a 	add	r4,r8,r8
10106170:	04c40474 	movhi	r19,4113
10106174:	2109883a 	add	r4,r4,r4
10106178:	9cc37004 	addi	r19,r19,3520
1010617c:	2109883a 	add	r4,r4,r4
10106180:	9909883a 	add	r4,r19,r4
10106184:	24000117 	ldw	r16,4(r4)
10106188:	213ffe04 	addi	r4,r4,-8
1010618c:	24009726 	beq	r4,r16,101063ec <_malloc_r+0x2f4>
10106190:	80800117 	ldw	r2,4(r16)
10106194:	01bfff04 	movi	r6,-4
10106198:	014003c4 	movi	r5,15
1010619c:	1184703a 	and	r2,r2,r6
101061a0:	1447c83a 	sub	r3,r2,r17
101061a4:	28c00716 	blt	r5,r3,101061c4 <_malloc_r+0xcc>
101061a8:	1800920e 	bge	r3,zero,101063f4 <_malloc_r+0x2fc>
101061ac:	84000317 	ldw	r16,12(r16)
101061b0:	24008e26 	beq	r4,r16,101063ec <_malloc_r+0x2f4>
101061b4:	80800117 	ldw	r2,4(r16)
101061b8:	1184703a 	and	r2,r2,r6
101061bc:	1447c83a 	sub	r3,r2,r17
101061c0:	28fff90e 	bge	r5,r3,101061a8 <__alt_data_end+0xfffe61a8>
101061c4:	3809883a 	mov	r4,r7
101061c8:	01840474 	movhi	r6,4113
101061cc:	9c000417 	ldw	r16,16(r19)
101061d0:	31837004 	addi	r6,r6,3520
101061d4:	32000204 	addi	r8,r6,8
101061d8:	82013426 	beq	r16,r8,101066ac <_malloc_r+0x5b4>
101061dc:	80c00117 	ldw	r3,4(r16)
101061e0:	00bfff04 	movi	r2,-4
101061e4:	188e703a 	and	r7,r3,r2
101061e8:	3c45c83a 	sub	r2,r7,r17
101061ec:	00c003c4 	movi	r3,15
101061f0:	18811f16 	blt	r3,r2,10106670 <_malloc_r+0x578>
101061f4:	32000515 	stw	r8,20(r6)
101061f8:	32000415 	stw	r8,16(r6)
101061fc:	10007f0e 	bge	r2,zero,101063fc <_malloc_r+0x304>
10106200:	00807fc4 	movi	r2,511
10106204:	11c0fd36 	bltu	r2,r7,101065fc <_malloc_r+0x504>
10106208:	3806d0fa 	srli	r3,r7,3
1010620c:	01c00044 	movi	r7,1
10106210:	30800117 	ldw	r2,4(r6)
10106214:	19400044 	addi	r5,r3,1
10106218:	294b883a 	add	r5,r5,r5
1010621c:	1807d0ba 	srai	r3,r3,2
10106220:	294b883a 	add	r5,r5,r5
10106224:	294b883a 	add	r5,r5,r5
10106228:	298b883a 	add	r5,r5,r6
1010622c:	38c6983a 	sll	r3,r7,r3
10106230:	29c00017 	ldw	r7,0(r5)
10106234:	2a7ffe04 	addi	r9,r5,-8
10106238:	1886b03a 	or	r3,r3,r2
1010623c:	82400315 	stw	r9,12(r16)
10106240:	81c00215 	stw	r7,8(r16)
10106244:	30c00115 	stw	r3,4(r6)
10106248:	2c000015 	stw	r16,0(r5)
1010624c:	3c000315 	stw	r16,12(r7)
10106250:	2005d0ba 	srai	r2,r4,2
10106254:	01400044 	movi	r5,1
10106258:	288a983a 	sll	r5,r5,r2
1010625c:	19406f36 	bltu	r3,r5,1010641c <_malloc_r+0x324>
10106260:	28c4703a 	and	r2,r5,r3
10106264:	10000a1e 	bne	r2,zero,10106290 <_malloc_r+0x198>
10106268:	00bfff04 	movi	r2,-4
1010626c:	294b883a 	add	r5,r5,r5
10106270:	2088703a 	and	r4,r4,r2
10106274:	28c4703a 	and	r2,r5,r3
10106278:	21000104 	addi	r4,r4,4
1010627c:	1000041e 	bne	r2,zero,10106290 <_malloc_r+0x198>
10106280:	294b883a 	add	r5,r5,r5
10106284:	28c4703a 	and	r2,r5,r3
10106288:	21000104 	addi	r4,r4,4
1010628c:	103ffc26 	beq	r2,zero,10106280 <__alt_data_end+0xfffe6280>
10106290:	02bfff04 	movi	r10,-4
10106294:	024003c4 	movi	r9,15
10106298:	21800044 	addi	r6,r4,1
1010629c:	318d883a 	add	r6,r6,r6
101062a0:	318d883a 	add	r6,r6,r6
101062a4:	318d883a 	add	r6,r6,r6
101062a8:	998d883a 	add	r6,r19,r6
101062ac:	333ffe04 	addi	r12,r6,-8
101062b0:	2017883a 	mov	r11,r4
101062b4:	31800104 	addi	r6,r6,4
101062b8:	34000017 	ldw	r16,0(r6)
101062bc:	31fffd04 	addi	r7,r6,-12
101062c0:	81c0041e 	bne	r16,r7,101062d4 <_malloc_r+0x1dc>
101062c4:	0000fb06 	br	101066b4 <_malloc_r+0x5bc>
101062c8:	1801030e 	bge	r3,zero,101066d8 <_malloc_r+0x5e0>
101062cc:	84000317 	ldw	r16,12(r16)
101062d0:	81c0f826 	beq	r16,r7,101066b4 <_malloc_r+0x5bc>
101062d4:	80800117 	ldw	r2,4(r16)
101062d8:	1284703a 	and	r2,r2,r10
101062dc:	1447c83a 	sub	r3,r2,r17
101062e0:	48fff90e 	bge	r9,r3,101062c8 <__alt_data_end+0xfffe62c8>
101062e4:	80800317 	ldw	r2,12(r16)
101062e8:	81000217 	ldw	r4,8(r16)
101062ec:	89400054 	ori	r5,r17,1
101062f0:	81400115 	stw	r5,4(r16)
101062f4:	20800315 	stw	r2,12(r4)
101062f8:	11000215 	stw	r4,8(r2)
101062fc:	8463883a 	add	r17,r16,r17
10106300:	9c400515 	stw	r17,20(r19)
10106304:	9c400415 	stw	r17,16(r19)
10106308:	18800054 	ori	r2,r3,1
1010630c:	88800115 	stw	r2,4(r17)
10106310:	8a000315 	stw	r8,12(r17)
10106314:	8a000215 	stw	r8,8(r17)
10106318:	88e3883a 	add	r17,r17,r3
1010631c:	88c00015 	stw	r3,0(r17)
10106320:	9009883a 	mov	r4,r18
10106324:	010dfd00 	call	1010dfd0 <__malloc_unlock>
10106328:	80800204 	addi	r2,r16,8
1010632c:	00001b06 	br	1010639c <_malloc_r+0x2a4>
10106330:	04400404 	movi	r17,16
10106334:	89402536 	bltu	r17,r5,101063cc <_malloc_r+0x2d4>
10106338:	010dfac0 	call	1010dfac <__malloc_lock>
1010633c:	00800184 	movi	r2,6
10106340:	01000084 	movi	r4,2
10106344:	04c40474 	movhi	r19,4113
10106348:	1085883a 	add	r2,r2,r2
1010634c:	9cc37004 	addi	r19,r19,3520
10106350:	1085883a 	add	r2,r2,r2
10106354:	9885883a 	add	r2,r19,r2
10106358:	14000117 	ldw	r16,4(r2)
1010635c:	10fffe04 	addi	r3,r2,-8
10106360:	80c0d926 	beq	r16,r3,101066c8 <_malloc_r+0x5d0>
10106364:	80c00117 	ldw	r3,4(r16)
10106368:	81000317 	ldw	r4,12(r16)
1010636c:	00bfff04 	movi	r2,-4
10106370:	1884703a 	and	r2,r3,r2
10106374:	81400217 	ldw	r5,8(r16)
10106378:	8085883a 	add	r2,r16,r2
1010637c:	10c00117 	ldw	r3,4(r2)
10106380:	29000315 	stw	r4,12(r5)
10106384:	21400215 	stw	r5,8(r4)
10106388:	18c00054 	ori	r3,r3,1
1010638c:	10c00115 	stw	r3,4(r2)
10106390:	9009883a 	mov	r4,r18
10106394:	010dfd00 	call	1010dfd0 <__malloc_unlock>
10106398:	80800204 	addi	r2,r16,8
1010639c:	dfc00a17 	ldw	ra,40(sp)
101063a0:	df000917 	ldw	fp,36(sp)
101063a4:	ddc00817 	ldw	r23,32(sp)
101063a8:	dd800717 	ldw	r22,28(sp)
101063ac:	dd400617 	ldw	r21,24(sp)
101063b0:	dd000517 	ldw	r20,20(sp)
101063b4:	dcc00417 	ldw	r19,16(sp)
101063b8:	dc800317 	ldw	r18,12(sp)
101063bc:	dc400217 	ldw	r17,8(sp)
101063c0:	dc000117 	ldw	r16,4(sp)
101063c4:	dec00b04 	addi	sp,sp,44
101063c8:	f800283a 	ret
101063cc:	00800304 	movi	r2,12
101063d0:	90800015 	stw	r2,0(r18)
101063d4:	0005883a 	mov	r2,zero
101063d8:	003ff006 	br	1010639c <__alt_data_end+0xfffe639c>
101063dc:	01002004 	movi	r4,128
101063e0:	02001004 	movi	r8,64
101063e4:	01c00fc4 	movi	r7,63
101063e8:	003f6106 	br	10106170 <__alt_data_end+0xfffe6170>
101063ec:	4009883a 	mov	r4,r8
101063f0:	003f7506 	br	101061c8 <__alt_data_end+0xfffe61c8>
101063f4:	81000317 	ldw	r4,12(r16)
101063f8:	003fde06 	br	10106374 <__alt_data_end+0xfffe6374>
101063fc:	81c5883a 	add	r2,r16,r7
10106400:	11400117 	ldw	r5,4(r2)
10106404:	9009883a 	mov	r4,r18
10106408:	29400054 	ori	r5,r5,1
1010640c:	11400115 	stw	r5,4(r2)
10106410:	010dfd00 	call	1010dfd0 <__malloc_unlock>
10106414:	80800204 	addi	r2,r16,8
10106418:	003fe006 	br	1010639c <__alt_data_end+0xfffe639c>
1010641c:	9c000217 	ldw	r16,8(r19)
10106420:	00bfff04 	movi	r2,-4
10106424:	85800117 	ldw	r22,4(r16)
10106428:	b0ac703a 	and	r22,r22,r2
1010642c:	b4400336 	bltu	r22,r17,1010643c <_malloc_r+0x344>
10106430:	b445c83a 	sub	r2,r22,r17
10106434:	00c003c4 	movi	r3,15
10106438:	18805d16 	blt	r3,r2,101065b0 <_malloc_r+0x4b8>
1010643c:	05c40474 	movhi	r23,4113
10106440:	00840474 	movhi	r2,4113
10106444:	108ffc04 	addi	r2,r2,16368
10106448:	bdc90104 	addi	r23,r23,9220
1010644c:	15400017 	ldw	r21,0(r2)
10106450:	b8c00017 	ldw	r3,0(r23)
10106454:	00bfffc4 	movi	r2,-1
10106458:	858d883a 	add	r6,r16,r22
1010645c:	8d6b883a 	add	r21,r17,r21
10106460:	1880ea26 	beq	r3,r2,1010680c <_malloc_r+0x714>
10106464:	ad4403c4 	addi	r21,r21,4111
10106468:	00bc0004 	movi	r2,-4096
1010646c:	a8aa703a 	and	r21,r21,r2
10106470:	a80b883a 	mov	r5,r21
10106474:	9009883a 	mov	r4,r18
10106478:	d9800015 	stw	r6,0(sp)
1010647c:	01082fc0 	call	101082fc <_sbrk_r>
10106480:	1029883a 	mov	r20,r2
10106484:	00bfffc4 	movi	r2,-1
10106488:	d9800017 	ldw	r6,0(sp)
1010648c:	a080e826 	beq	r20,r2,10106830 <_malloc_r+0x738>
10106490:	a180a636 	bltu	r20,r6,1010672c <_malloc_r+0x634>
10106494:	07040474 	movhi	fp,4113
10106498:	e7100504 	addi	fp,fp,16404
1010649c:	e0800017 	ldw	r2,0(fp)
101064a0:	a887883a 	add	r3,r21,r2
101064a4:	e0c00015 	stw	r3,0(fp)
101064a8:	3500e626 	beq	r6,r20,10106844 <_malloc_r+0x74c>
101064ac:	b9000017 	ldw	r4,0(r23)
101064b0:	00bfffc4 	movi	r2,-1
101064b4:	2080ee26 	beq	r4,r2,10106870 <_malloc_r+0x778>
101064b8:	a185c83a 	sub	r2,r20,r6
101064bc:	10c5883a 	add	r2,r2,r3
101064c0:	e0800015 	stw	r2,0(fp)
101064c4:	a0c001cc 	andi	r3,r20,7
101064c8:	1800bc26 	beq	r3,zero,101067bc <_malloc_r+0x6c4>
101064cc:	a0e9c83a 	sub	r20,r20,r3
101064d0:	00840204 	movi	r2,4104
101064d4:	a5000204 	addi	r20,r20,8
101064d8:	10c7c83a 	sub	r3,r2,r3
101064dc:	a545883a 	add	r2,r20,r21
101064e0:	1083ffcc 	andi	r2,r2,4095
101064e4:	18abc83a 	sub	r21,r3,r2
101064e8:	a80b883a 	mov	r5,r21
101064ec:	9009883a 	mov	r4,r18
101064f0:	01082fc0 	call	101082fc <_sbrk_r>
101064f4:	00ffffc4 	movi	r3,-1
101064f8:	10c0e126 	beq	r2,r3,10106880 <_malloc_r+0x788>
101064fc:	1505c83a 	sub	r2,r2,r20
10106500:	1545883a 	add	r2,r2,r21
10106504:	10800054 	ori	r2,r2,1
10106508:	e0c00017 	ldw	r3,0(fp)
1010650c:	9d000215 	stw	r20,8(r19)
10106510:	a0800115 	stw	r2,4(r20)
10106514:	a8c7883a 	add	r3,r21,r3
10106518:	e0c00015 	stw	r3,0(fp)
1010651c:	84c00e26 	beq	r16,r19,10106558 <_malloc_r+0x460>
10106520:	018003c4 	movi	r6,15
10106524:	3580a72e 	bgeu	r6,r22,101067c4 <_malloc_r+0x6cc>
10106528:	81400117 	ldw	r5,4(r16)
1010652c:	013ffe04 	movi	r4,-8
10106530:	b0bffd04 	addi	r2,r22,-12
10106534:	1104703a 	and	r2,r2,r4
10106538:	2900004c 	andi	r4,r5,1
1010653c:	2088b03a 	or	r4,r4,r2
10106540:	81000115 	stw	r4,4(r16)
10106544:	01400144 	movi	r5,5
10106548:	8089883a 	add	r4,r16,r2
1010654c:	21400115 	stw	r5,4(r4)
10106550:	21400215 	stw	r5,8(r4)
10106554:	3080cd36 	bltu	r6,r2,1010688c <_malloc_r+0x794>
10106558:	00840474 	movhi	r2,4113
1010655c:	108ffb04 	addi	r2,r2,16364
10106560:	11000017 	ldw	r4,0(r2)
10106564:	20c0012e 	bgeu	r4,r3,1010656c <_malloc_r+0x474>
10106568:	10c00015 	stw	r3,0(r2)
1010656c:	00840474 	movhi	r2,4113
10106570:	108ffa04 	addi	r2,r2,16360
10106574:	11000017 	ldw	r4,0(r2)
10106578:	9c000217 	ldw	r16,8(r19)
1010657c:	20c0012e 	bgeu	r4,r3,10106584 <_malloc_r+0x48c>
10106580:	10c00015 	stw	r3,0(r2)
10106584:	80c00117 	ldw	r3,4(r16)
10106588:	00bfff04 	movi	r2,-4
1010658c:	1886703a 	and	r3,r3,r2
10106590:	1c45c83a 	sub	r2,r3,r17
10106594:	1c400236 	bltu	r3,r17,101065a0 <_malloc_r+0x4a8>
10106598:	00c003c4 	movi	r3,15
1010659c:	18800416 	blt	r3,r2,101065b0 <_malloc_r+0x4b8>
101065a0:	9009883a 	mov	r4,r18
101065a4:	010dfd00 	call	1010dfd0 <__malloc_unlock>
101065a8:	0005883a 	mov	r2,zero
101065ac:	003f7b06 	br	1010639c <__alt_data_end+0xfffe639c>
101065b0:	88c00054 	ori	r3,r17,1
101065b4:	80c00115 	stw	r3,4(r16)
101065b8:	8463883a 	add	r17,r16,r17
101065bc:	10800054 	ori	r2,r2,1
101065c0:	9c400215 	stw	r17,8(r19)
101065c4:	88800115 	stw	r2,4(r17)
101065c8:	9009883a 	mov	r4,r18
101065cc:	010dfd00 	call	1010dfd0 <__malloc_unlock>
101065d0:	80800204 	addi	r2,r16,8
101065d4:	003f7106 	br	1010639c <__alt_data_end+0xfffe639c>
101065d8:	00c00504 	movi	r3,20
101065dc:	18804a2e 	bgeu	r3,r2,10106708 <_malloc_r+0x610>
101065e0:	00c01504 	movi	r3,84
101065e4:	18806e36 	bltu	r3,r2,101067a0 <_malloc_r+0x6a8>
101065e8:	8804d33a 	srli	r2,r17,12
101065ec:	12001bc4 	addi	r8,r2,111
101065f0:	11c01b84 	addi	r7,r2,110
101065f4:	4209883a 	add	r4,r8,r8
101065f8:	003edd06 	br	10106170 <__alt_data_end+0xfffe6170>
101065fc:	3804d27a 	srli	r2,r7,9
10106600:	00c00104 	movi	r3,4
10106604:	1880442e 	bgeu	r3,r2,10106718 <_malloc_r+0x620>
10106608:	00c00504 	movi	r3,20
1010660c:	18808136 	bltu	r3,r2,10106814 <_malloc_r+0x71c>
10106610:	11401704 	addi	r5,r2,92
10106614:	10c016c4 	addi	r3,r2,91
10106618:	294b883a 	add	r5,r5,r5
1010661c:	294b883a 	add	r5,r5,r5
10106620:	294b883a 	add	r5,r5,r5
10106624:	994b883a 	add	r5,r19,r5
10106628:	28800017 	ldw	r2,0(r5)
1010662c:	01840474 	movhi	r6,4113
10106630:	297ffe04 	addi	r5,r5,-8
10106634:	31837004 	addi	r6,r6,3520
10106638:	28806526 	beq	r5,r2,101067d0 <_malloc_r+0x6d8>
1010663c:	01bfff04 	movi	r6,-4
10106640:	10c00117 	ldw	r3,4(r2)
10106644:	1986703a 	and	r3,r3,r6
10106648:	38c0022e 	bgeu	r7,r3,10106654 <_malloc_r+0x55c>
1010664c:	10800217 	ldw	r2,8(r2)
10106650:	28bffb1e 	bne	r5,r2,10106640 <__alt_data_end+0xfffe6640>
10106654:	11400317 	ldw	r5,12(r2)
10106658:	98c00117 	ldw	r3,4(r19)
1010665c:	81400315 	stw	r5,12(r16)
10106660:	80800215 	stw	r2,8(r16)
10106664:	2c000215 	stw	r16,8(r5)
10106668:	14000315 	stw	r16,12(r2)
1010666c:	003ef806 	br	10106250 <__alt_data_end+0xfffe6250>
10106670:	88c00054 	ori	r3,r17,1
10106674:	80c00115 	stw	r3,4(r16)
10106678:	8463883a 	add	r17,r16,r17
1010667c:	34400515 	stw	r17,20(r6)
10106680:	34400415 	stw	r17,16(r6)
10106684:	10c00054 	ori	r3,r2,1
10106688:	8a000315 	stw	r8,12(r17)
1010668c:	8a000215 	stw	r8,8(r17)
10106690:	88c00115 	stw	r3,4(r17)
10106694:	88a3883a 	add	r17,r17,r2
10106698:	88800015 	stw	r2,0(r17)
1010669c:	9009883a 	mov	r4,r18
101066a0:	010dfd00 	call	1010dfd0 <__malloc_unlock>
101066a4:	80800204 	addi	r2,r16,8
101066a8:	003f3c06 	br	1010639c <__alt_data_end+0xfffe639c>
101066ac:	30c00117 	ldw	r3,4(r6)
101066b0:	003ee706 	br	10106250 <__alt_data_end+0xfffe6250>
101066b4:	5ac00044 	addi	r11,r11,1
101066b8:	588000cc 	andi	r2,r11,3
101066bc:	31800204 	addi	r6,r6,8
101066c0:	103efd1e 	bne	r2,zero,101062b8 <__alt_data_end+0xfffe62b8>
101066c4:	00002406 	br	10106758 <_malloc_r+0x660>
101066c8:	14000317 	ldw	r16,12(r2)
101066cc:	143f251e 	bne	r2,r16,10106364 <__alt_data_end+0xfffe6364>
101066d0:	21000084 	addi	r4,r4,2
101066d4:	003ebc06 	br	101061c8 <__alt_data_end+0xfffe61c8>
101066d8:	8085883a 	add	r2,r16,r2
101066dc:	10c00117 	ldw	r3,4(r2)
101066e0:	81000317 	ldw	r4,12(r16)
101066e4:	81400217 	ldw	r5,8(r16)
101066e8:	18c00054 	ori	r3,r3,1
101066ec:	10c00115 	stw	r3,4(r2)
101066f0:	29000315 	stw	r4,12(r5)
101066f4:	21400215 	stw	r5,8(r4)
101066f8:	9009883a 	mov	r4,r18
101066fc:	010dfd00 	call	1010dfd0 <__malloc_unlock>
10106700:	80800204 	addi	r2,r16,8
10106704:	003f2506 	br	1010639c <__alt_data_end+0xfffe639c>
10106708:	12001704 	addi	r8,r2,92
1010670c:	11c016c4 	addi	r7,r2,91
10106710:	4209883a 	add	r4,r8,r8
10106714:	003e9606 	br	10106170 <__alt_data_end+0xfffe6170>
10106718:	3804d1ba 	srli	r2,r7,6
1010671c:	11400e44 	addi	r5,r2,57
10106720:	10c00e04 	addi	r3,r2,56
10106724:	294b883a 	add	r5,r5,r5
10106728:	003fbc06 	br	1010661c <__alt_data_end+0xfffe661c>
1010672c:	84ff5926 	beq	r16,r19,10106494 <__alt_data_end+0xfffe6494>
10106730:	00840474 	movhi	r2,4113
10106734:	10837004 	addi	r2,r2,3520
10106738:	14000217 	ldw	r16,8(r2)
1010673c:	00bfff04 	movi	r2,-4
10106740:	80c00117 	ldw	r3,4(r16)
10106744:	1886703a 	and	r3,r3,r2
10106748:	003f9106 	br	10106590 <__alt_data_end+0xfffe6590>
1010674c:	60800217 	ldw	r2,8(r12)
10106750:	213fffc4 	addi	r4,r4,-1
10106754:	1300651e 	bne	r2,r12,101068ec <_malloc_r+0x7f4>
10106758:	208000cc 	andi	r2,r4,3
1010675c:	633ffe04 	addi	r12,r12,-8
10106760:	103ffa1e 	bne	r2,zero,1010674c <__alt_data_end+0xfffe674c>
10106764:	98800117 	ldw	r2,4(r19)
10106768:	0146303a 	nor	r3,zero,r5
1010676c:	1884703a 	and	r2,r3,r2
10106770:	98800115 	stw	r2,4(r19)
10106774:	294b883a 	add	r5,r5,r5
10106778:	117f2836 	bltu	r2,r5,1010641c <__alt_data_end+0xfffe641c>
1010677c:	283f2726 	beq	r5,zero,1010641c <__alt_data_end+0xfffe641c>
10106780:	2886703a 	and	r3,r5,r2
10106784:	5809883a 	mov	r4,r11
10106788:	183ec31e 	bne	r3,zero,10106298 <__alt_data_end+0xfffe6298>
1010678c:	294b883a 	add	r5,r5,r5
10106790:	2886703a 	and	r3,r5,r2
10106794:	21000104 	addi	r4,r4,4
10106798:	183ffc26 	beq	r3,zero,1010678c <__alt_data_end+0xfffe678c>
1010679c:	003ebe06 	br	10106298 <__alt_data_end+0xfffe6298>
101067a0:	00c05504 	movi	r3,340
101067a4:	18801236 	bltu	r3,r2,101067f0 <_malloc_r+0x6f8>
101067a8:	8804d3fa 	srli	r2,r17,15
101067ac:	12001e04 	addi	r8,r2,120
101067b0:	11c01dc4 	addi	r7,r2,119
101067b4:	4209883a 	add	r4,r8,r8
101067b8:	003e6d06 	br	10106170 <__alt_data_end+0xfffe6170>
101067bc:	00c40004 	movi	r3,4096
101067c0:	003f4606 	br	101064dc <__alt_data_end+0xfffe64dc>
101067c4:	00800044 	movi	r2,1
101067c8:	a0800115 	stw	r2,4(r20)
101067cc:	003f7406 	br	101065a0 <__alt_data_end+0xfffe65a0>
101067d0:	1805d0ba 	srai	r2,r3,2
101067d4:	01c00044 	movi	r7,1
101067d8:	30c00117 	ldw	r3,4(r6)
101067dc:	388e983a 	sll	r7,r7,r2
101067e0:	2805883a 	mov	r2,r5
101067e4:	38c6b03a 	or	r3,r7,r3
101067e8:	30c00115 	stw	r3,4(r6)
101067ec:	003f9b06 	br	1010665c <__alt_data_end+0xfffe665c>
101067f0:	00c15504 	movi	r3,1364
101067f4:	18801a36 	bltu	r3,r2,10106860 <_malloc_r+0x768>
101067f8:	8804d4ba 	srli	r2,r17,18
101067fc:	12001f44 	addi	r8,r2,125
10106800:	11c01f04 	addi	r7,r2,124
10106804:	4209883a 	add	r4,r8,r8
10106808:	003e5906 	br	10106170 <__alt_data_end+0xfffe6170>
1010680c:	ad400404 	addi	r21,r21,16
10106810:	003f1706 	br	10106470 <__alt_data_end+0xfffe6470>
10106814:	00c01504 	movi	r3,84
10106818:	18802336 	bltu	r3,r2,101068a8 <_malloc_r+0x7b0>
1010681c:	3804d33a 	srli	r2,r7,12
10106820:	11401bc4 	addi	r5,r2,111
10106824:	10c01b84 	addi	r3,r2,110
10106828:	294b883a 	add	r5,r5,r5
1010682c:	003f7b06 	br	1010661c <__alt_data_end+0xfffe661c>
10106830:	9c000217 	ldw	r16,8(r19)
10106834:	00bfff04 	movi	r2,-4
10106838:	80c00117 	ldw	r3,4(r16)
1010683c:	1886703a 	and	r3,r3,r2
10106840:	003f5306 	br	10106590 <__alt_data_end+0xfffe6590>
10106844:	3083ffcc 	andi	r2,r6,4095
10106848:	103f181e 	bne	r2,zero,101064ac <__alt_data_end+0xfffe64ac>
1010684c:	99000217 	ldw	r4,8(r19)
10106850:	b545883a 	add	r2,r22,r21
10106854:	10800054 	ori	r2,r2,1
10106858:	20800115 	stw	r2,4(r4)
1010685c:	003f3e06 	br	10106558 <__alt_data_end+0xfffe6558>
10106860:	01003f84 	movi	r4,254
10106864:	02001fc4 	movi	r8,127
10106868:	01c01f84 	movi	r7,126
1010686c:	003e4006 	br	10106170 <__alt_data_end+0xfffe6170>
10106870:	00840474 	movhi	r2,4113
10106874:	10890104 	addi	r2,r2,9220
10106878:	15000015 	stw	r20,0(r2)
1010687c:	003f1106 	br	101064c4 <__alt_data_end+0xfffe64c4>
10106880:	00800044 	movi	r2,1
10106884:	002b883a 	mov	r21,zero
10106888:	003f1f06 	br	10106508 <__alt_data_end+0xfffe6508>
1010688c:	81400204 	addi	r5,r16,8
10106890:	9009883a 	mov	r4,r18
10106894:	01055000 	call	10105500 <_free_r>
10106898:	00840474 	movhi	r2,4113
1010689c:	10900504 	addi	r2,r2,16404
101068a0:	10c00017 	ldw	r3,0(r2)
101068a4:	003f2c06 	br	10106558 <__alt_data_end+0xfffe6558>
101068a8:	00c05504 	movi	r3,340
101068ac:	18800536 	bltu	r3,r2,101068c4 <_malloc_r+0x7cc>
101068b0:	3804d3fa 	srli	r2,r7,15
101068b4:	11401e04 	addi	r5,r2,120
101068b8:	10c01dc4 	addi	r3,r2,119
101068bc:	294b883a 	add	r5,r5,r5
101068c0:	003f5606 	br	1010661c <__alt_data_end+0xfffe661c>
101068c4:	00c15504 	movi	r3,1364
101068c8:	18800536 	bltu	r3,r2,101068e0 <_malloc_r+0x7e8>
101068cc:	3804d4ba 	srli	r2,r7,18
101068d0:	11401f44 	addi	r5,r2,125
101068d4:	10c01f04 	addi	r3,r2,124
101068d8:	294b883a 	add	r5,r5,r5
101068dc:	003f4f06 	br	1010661c <__alt_data_end+0xfffe661c>
101068e0:	01403f84 	movi	r5,254
101068e4:	00c01f84 	movi	r3,126
101068e8:	003f4c06 	br	1010661c <__alt_data_end+0xfffe661c>
101068ec:	98800117 	ldw	r2,4(r19)
101068f0:	003fa006 	br	10106774 <__alt_data_end+0xfffe6774>
101068f4:	8808d0fa 	srli	r4,r17,3
101068f8:	20800044 	addi	r2,r4,1
101068fc:	1085883a 	add	r2,r2,r2
10106900:	003e9006 	br	10106344 <__alt_data_end+0xfffe6344>

10106904 <memchr>:
10106904:	208000cc 	andi	r2,r4,3
10106908:	280f883a 	mov	r7,r5
1010690c:	10003426 	beq	r2,zero,101069e0 <memchr+0xdc>
10106910:	30bfffc4 	addi	r2,r6,-1
10106914:	30001a26 	beq	r6,zero,10106980 <memchr+0x7c>
10106918:	20c00003 	ldbu	r3,0(r4)
1010691c:	29803fcc 	andi	r6,r5,255
10106920:	30c0051e 	bne	r6,r3,10106938 <memchr+0x34>
10106924:	00001806 	br	10106988 <memchr+0x84>
10106928:	10001526 	beq	r2,zero,10106980 <memchr+0x7c>
1010692c:	20c00003 	ldbu	r3,0(r4)
10106930:	10bfffc4 	addi	r2,r2,-1
10106934:	30c01426 	beq	r6,r3,10106988 <memchr+0x84>
10106938:	21000044 	addi	r4,r4,1
1010693c:	20c000cc 	andi	r3,r4,3
10106940:	183ff91e 	bne	r3,zero,10106928 <__alt_data_end+0xfffe6928>
10106944:	020000c4 	movi	r8,3
10106948:	40801136 	bltu	r8,r2,10106990 <memchr+0x8c>
1010694c:	10000c26 	beq	r2,zero,10106980 <memchr+0x7c>
10106950:	20c00003 	ldbu	r3,0(r4)
10106954:	29403fcc 	andi	r5,r5,255
10106958:	28c00b26 	beq	r5,r3,10106988 <memchr+0x84>
1010695c:	20c00044 	addi	r3,r4,1
10106960:	39803fcc 	andi	r6,r7,255
10106964:	2089883a 	add	r4,r4,r2
10106968:	00000306 	br	10106978 <memchr+0x74>
1010696c:	18c00044 	addi	r3,r3,1
10106970:	197fffc3 	ldbu	r5,-1(r3)
10106974:	31400526 	beq	r6,r5,1010698c <memchr+0x88>
10106978:	1805883a 	mov	r2,r3
1010697c:	20fffb1e 	bne	r4,r3,1010696c <__alt_data_end+0xfffe696c>
10106980:	0005883a 	mov	r2,zero
10106984:	f800283a 	ret
10106988:	2005883a 	mov	r2,r4
1010698c:	f800283a 	ret
10106990:	28c03fcc 	andi	r3,r5,255
10106994:	1812923a 	slli	r9,r3,8
10106998:	02ffbff4 	movhi	r11,65279
1010699c:	02a02074 	movhi	r10,32897
101069a0:	48d2b03a 	or	r9,r9,r3
101069a4:	4806943a 	slli	r3,r9,16
101069a8:	5affbfc4 	addi	r11,r11,-257
101069ac:	52a02004 	addi	r10,r10,-32640
101069b0:	48d2b03a 	or	r9,r9,r3
101069b4:	20c00017 	ldw	r3,0(r4)
101069b8:	48c6f03a 	xor	r3,r9,r3
101069bc:	1acd883a 	add	r6,r3,r11
101069c0:	00c6303a 	nor	r3,zero,r3
101069c4:	30c6703a 	and	r3,r6,r3
101069c8:	1a86703a 	and	r3,r3,r10
101069cc:	183fe01e 	bne	r3,zero,10106950 <__alt_data_end+0xfffe6950>
101069d0:	10bfff04 	addi	r2,r2,-4
101069d4:	21000104 	addi	r4,r4,4
101069d8:	40bff636 	bltu	r8,r2,101069b4 <__alt_data_end+0xfffe69b4>
101069dc:	003fdb06 	br	1010694c <__alt_data_end+0xfffe694c>
101069e0:	3005883a 	mov	r2,r6
101069e4:	003fd706 	br	10106944 <__alt_data_end+0xfffe6944>

101069e8 <memmove>:
101069e8:	2005883a 	mov	r2,r4
101069ec:	29000b2e 	bgeu	r5,r4,10106a1c <memmove+0x34>
101069f0:	298f883a 	add	r7,r5,r6
101069f4:	21c0092e 	bgeu	r4,r7,10106a1c <memmove+0x34>
101069f8:	2187883a 	add	r3,r4,r6
101069fc:	198bc83a 	sub	r5,r3,r6
10106a00:	30004826 	beq	r6,zero,10106b24 <memmove+0x13c>
10106a04:	39ffffc4 	addi	r7,r7,-1
10106a08:	39000003 	ldbu	r4,0(r7)
10106a0c:	18ffffc4 	addi	r3,r3,-1
10106a10:	19000005 	stb	r4,0(r3)
10106a14:	28fffb1e 	bne	r5,r3,10106a04 <__alt_data_end+0xfffe6a04>
10106a18:	f800283a 	ret
10106a1c:	00c003c4 	movi	r3,15
10106a20:	1980412e 	bgeu	r3,r6,10106b28 <memmove+0x140>
10106a24:	2886b03a 	or	r3,r5,r2
10106a28:	18c000cc 	andi	r3,r3,3
10106a2c:	1800401e 	bne	r3,zero,10106b30 <memmove+0x148>
10106a30:	33fffc04 	addi	r15,r6,-16
10106a34:	781ed13a 	srli	r15,r15,4
10106a38:	28c00104 	addi	r3,r5,4
10106a3c:	13400104 	addi	r13,r2,4
10106a40:	781c913a 	slli	r14,r15,4
10106a44:	2b000204 	addi	r12,r5,8
10106a48:	12c00204 	addi	r11,r2,8
10106a4c:	73800504 	addi	r14,r14,20
10106a50:	2a800304 	addi	r10,r5,12
10106a54:	12400304 	addi	r9,r2,12
10106a58:	2b9d883a 	add	r14,r5,r14
10106a5c:	2811883a 	mov	r8,r5
10106a60:	100f883a 	mov	r7,r2
10106a64:	41000017 	ldw	r4,0(r8)
10106a68:	39c00404 	addi	r7,r7,16
10106a6c:	18c00404 	addi	r3,r3,16
10106a70:	393ffc15 	stw	r4,-16(r7)
10106a74:	193ffc17 	ldw	r4,-16(r3)
10106a78:	6b400404 	addi	r13,r13,16
10106a7c:	5ac00404 	addi	r11,r11,16
10106a80:	693ffc15 	stw	r4,-16(r13)
10106a84:	61000017 	ldw	r4,0(r12)
10106a88:	4a400404 	addi	r9,r9,16
10106a8c:	42000404 	addi	r8,r8,16
10106a90:	593ffc15 	stw	r4,-16(r11)
10106a94:	51000017 	ldw	r4,0(r10)
10106a98:	63000404 	addi	r12,r12,16
10106a9c:	52800404 	addi	r10,r10,16
10106aa0:	493ffc15 	stw	r4,-16(r9)
10106aa4:	1bbfef1e 	bne	r3,r14,10106a64 <__alt_data_end+0xfffe6a64>
10106aa8:	79000044 	addi	r4,r15,1
10106aac:	2008913a 	slli	r4,r4,4
10106ab0:	328003cc 	andi	r10,r6,15
10106ab4:	02c000c4 	movi	r11,3
10106ab8:	1107883a 	add	r3,r2,r4
10106abc:	290b883a 	add	r5,r5,r4
10106ac0:	5a801e2e 	bgeu	r11,r10,10106b3c <memmove+0x154>
10106ac4:	1813883a 	mov	r9,r3
10106ac8:	2811883a 	mov	r8,r5
10106acc:	500f883a 	mov	r7,r10
10106ad0:	41000017 	ldw	r4,0(r8)
10106ad4:	4a400104 	addi	r9,r9,4
10106ad8:	39ffff04 	addi	r7,r7,-4
10106adc:	493fff15 	stw	r4,-4(r9)
10106ae0:	42000104 	addi	r8,r8,4
10106ae4:	59fffa36 	bltu	r11,r7,10106ad0 <__alt_data_end+0xfffe6ad0>
10106ae8:	513fff04 	addi	r4,r10,-4
10106aec:	2008d0ba 	srli	r4,r4,2
10106af0:	318000cc 	andi	r6,r6,3
10106af4:	21000044 	addi	r4,r4,1
10106af8:	2109883a 	add	r4,r4,r4
10106afc:	2109883a 	add	r4,r4,r4
10106b00:	1907883a 	add	r3,r3,r4
10106b04:	290b883a 	add	r5,r5,r4
10106b08:	30000b26 	beq	r6,zero,10106b38 <memmove+0x150>
10106b0c:	198d883a 	add	r6,r3,r6
10106b10:	29c00003 	ldbu	r7,0(r5)
10106b14:	18c00044 	addi	r3,r3,1
10106b18:	29400044 	addi	r5,r5,1
10106b1c:	19ffffc5 	stb	r7,-1(r3)
10106b20:	19bffb1e 	bne	r3,r6,10106b10 <__alt_data_end+0xfffe6b10>
10106b24:	f800283a 	ret
10106b28:	1007883a 	mov	r3,r2
10106b2c:	003ff606 	br	10106b08 <__alt_data_end+0xfffe6b08>
10106b30:	1007883a 	mov	r3,r2
10106b34:	003ff506 	br	10106b0c <__alt_data_end+0xfffe6b0c>
10106b38:	f800283a 	ret
10106b3c:	500d883a 	mov	r6,r10
10106b40:	003ff106 	br	10106b08 <__alt_data_end+0xfffe6b08>

10106b44 <memset>:
10106b44:	20c000cc 	andi	r3,r4,3
10106b48:	2005883a 	mov	r2,r4
10106b4c:	18004426 	beq	r3,zero,10106c60 <memset+0x11c>
10106b50:	31ffffc4 	addi	r7,r6,-1
10106b54:	30004026 	beq	r6,zero,10106c58 <memset+0x114>
10106b58:	2813883a 	mov	r9,r5
10106b5c:	200d883a 	mov	r6,r4
10106b60:	2007883a 	mov	r3,r4
10106b64:	00000406 	br	10106b78 <memset+0x34>
10106b68:	3a3fffc4 	addi	r8,r7,-1
10106b6c:	31800044 	addi	r6,r6,1
10106b70:	38003926 	beq	r7,zero,10106c58 <memset+0x114>
10106b74:	400f883a 	mov	r7,r8
10106b78:	18c00044 	addi	r3,r3,1
10106b7c:	32400005 	stb	r9,0(r6)
10106b80:	1a0000cc 	andi	r8,r3,3
10106b84:	403ff81e 	bne	r8,zero,10106b68 <__alt_data_end+0xfffe6b68>
10106b88:	010000c4 	movi	r4,3
10106b8c:	21c02d2e 	bgeu	r4,r7,10106c44 <memset+0x100>
10106b90:	29003fcc 	andi	r4,r5,255
10106b94:	200c923a 	slli	r6,r4,8
10106b98:	3108b03a 	or	r4,r6,r4
10106b9c:	200c943a 	slli	r6,r4,16
10106ba0:	218cb03a 	or	r6,r4,r6
10106ba4:	010003c4 	movi	r4,15
10106ba8:	21c0182e 	bgeu	r4,r7,10106c0c <memset+0xc8>
10106bac:	3b3ffc04 	addi	r12,r7,-16
10106bb0:	6018d13a 	srli	r12,r12,4
10106bb4:	1a000104 	addi	r8,r3,4
10106bb8:	1ac00204 	addi	r11,r3,8
10106bbc:	6008913a 	slli	r4,r12,4
10106bc0:	1a800304 	addi	r10,r3,12
10106bc4:	1813883a 	mov	r9,r3
10106bc8:	21000504 	addi	r4,r4,20
10106bcc:	1909883a 	add	r4,r3,r4
10106bd0:	49800015 	stw	r6,0(r9)
10106bd4:	41800015 	stw	r6,0(r8)
10106bd8:	59800015 	stw	r6,0(r11)
10106bdc:	51800015 	stw	r6,0(r10)
10106be0:	42000404 	addi	r8,r8,16
10106be4:	4a400404 	addi	r9,r9,16
10106be8:	5ac00404 	addi	r11,r11,16
10106bec:	52800404 	addi	r10,r10,16
10106bf0:	413ff71e 	bne	r8,r4,10106bd0 <__alt_data_end+0xfffe6bd0>
10106bf4:	63000044 	addi	r12,r12,1
10106bf8:	6018913a 	slli	r12,r12,4
10106bfc:	39c003cc 	andi	r7,r7,15
10106c00:	010000c4 	movi	r4,3
10106c04:	1b07883a 	add	r3,r3,r12
10106c08:	21c00e2e 	bgeu	r4,r7,10106c44 <memset+0x100>
10106c0c:	1813883a 	mov	r9,r3
10106c10:	3811883a 	mov	r8,r7
10106c14:	010000c4 	movi	r4,3
10106c18:	49800015 	stw	r6,0(r9)
10106c1c:	423fff04 	addi	r8,r8,-4
10106c20:	4a400104 	addi	r9,r9,4
10106c24:	223ffc36 	bltu	r4,r8,10106c18 <__alt_data_end+0xfffe6c18>
10106c28:	393fff04 	addi	r4,r7,-4
10106c2c:	2008d0ba 	srli	r4,r4,2
10106c30:	39c000cc 	andi	r7,r7,3
10106c34:	21000044 	addi	r4,r4,1
10106c38:	2109883a 	add	r4,r4,r4
10106c3c:	2109883a 	add	r4,r4,r4
10106c40:	1907883a 	add	r3,r3,r4
10106c44:	38000526 	beq	r7,zero,10106c5c <memset+0x118>
10106c48:	19cf883a 	add	r7,r3,r7
10106c4c:	19400005 	stb	r5,0(r3)
10106c50:	18c00044 	addi	r3,r3,1
10106c54:	38fffd1e 	bne	r7,r3,10106c4c <__alt_data_end+0xfffe6c4c>
10106c58:	f800283a 	ret
10106c5c:	f800283a 	ret
10106c60:	2007883a 	mov	r3,r4
10106c64:	300f883a 	mov	r7,r6
10106c68:	003fc706 	br	10106b88 <__alt_data_end+0xfffe6b88>

10106c6c <_Balloc>:
10106c6c:	20801317 	ldw	r2,76(r4)
10106c70:	defffc04 	addi	sp,sp,-16
10106c74:	dc400115 	stw	r17,4(sp)
10106c78:	dc000015 	stw	r16,0(sp)
10106c7c:	dfc00315 	stw	ra,12(sp)
10106c80:	dc800215 	stw	r18,8(sp)
10106c84:	2023883a 	mov	r17,r4
10106c88:	2821883a 	mov	r16,r5
10106c8c:	10000f26 	beq	r2,zero,10106ccc <_Balloc+0x60>
10106c90:	8407883a 	add	r3,r16,r16
10106c94:	18c7883a 	add	r3,r3,r3
10106c98:	10c7883a 	add	r3,r2,r3
10106c9c:	18800017 	ldw	r2,0(r3)
10106ca0:	10001126 	beq	r2,zero,10106ce8 <_Balloc+0x7c>
10106ca4:	11000017 	ldw	r4,0(r2)
10106ca8:	19000015 	stw	r4,0(r3)
10106cac:	10000415 	stw	zero,16(r2)
10106cb0:	10000315 	stw	zero,12(r2)
10106cb4:	dfc00317 	ldw	ra,12(sp)
10106cb8:	dc800217 	ldw	r18,8(sp)
10106cbc:	dc400117 	ldw	r17,4(sp)
10106cc0:	dc000017 	ldw	r16,0(sp)
10106cc4:	dec00404 	addi	sp,sp,16
10106cc8:	f800283a 	ret
10106ccc:	01800844 	movi	r6,33
10106cd0:	01400104 	movi	r5,4
10106cd4:	0109d140 	call	10109d14 <_calloc_r>
10106cd8:	88801315 	stw	r2,76(r17)
10106cdc:	103fec1e 	bne	r2,zero,10106c90 <__alt_data_end+0xfffe6c90>
10106ce0:	0005883a 	mov	r2,zero
10106ce4:	003ff306 	br	10106cb4 <__alt_data_end+0xfffe6cb4>
10106ce8:	01400044 	movi	r5,1
10106cec:	2c24983a 	sll	r18,r5,r16
10106cf0:	8809883a 	mov	r4,r17
10106cf4:	91800144 	addi	r6,r18,5
10106cf8:	318d883a 	add	r6,r6,r6
10106cfc:	318d883a 	add	r6,r6,r6
10106d00:	0109d140 	call	10109d14 <_calloc_r>
10106d04:	103ff626 	beq	r2,zero,10106ce0 <__alt_data_end+0xfffe6ce0>
10106d08:	14000115 	stw	r16,4(r2)
10106d0c:	14800215 	stw	r18,8(r2)
10106d10:	003fe606 	br	10106cac <__alt_data_end+0xfffe6cac>

10106d14 <_Bfree>:
10106d14:	28000826 	beq	r5,zero,10106d38 <_Bfree+0x24>
10106d18:	28c00117 	ldw	r3,4(r5)
10106d1c:	20801317 	ldw	r2,76(r4)
10106d20:	18c7883a 	add	r3,r3,r3
10106d24:	18c7883a 	add	r3,r3,r3
10106d28:	10c5883a 	add	r2,r2,r3
10106d2c:	10c00017 	ldw	r3,0(r2)
10106d30:	28c00015 	stw	r3,0(r5)
10106d34:	11400015 	stw	r5,0(r2)
10106d38:	f800283a 	ret

10106d3c <__multadd>:
10106d3c:	defff704 	addi	sp,sp,-36
10106d40:	dc800215 	stw	r18,8(sp)
10106d44:	2c800417 	ldw	r18,16(r5)
10106d48:	dd800615 	stw	r22,24(sp)
10106d4c:	dd400515 	stw	r21,20(sp)
10106d50:	dd000415 	stw	r20,16(sp)
10106d54:	dcc00315 	stw	r19,12(sp)
10106d58:	dc400115 	stw	r17,4(sp)
10106d5c:	dc000015 	stw	r16,0(sp)
10106d60:	dfc00815 	stw	ra,32(sp)
10106d64:	ddc00715 	stw	r23,28(sp)
10106d68:	2827883a 	mov	r19,r5
10106d6c:	2029883a 	mov	r20,r4
10106d70:	3023883a 	mov	r17,r6
10106d74:	3821883a 	mov	r16,r7
10106d78:	2d400504 	addi	r21,r5,20
10106d7c:	002d883a 	mov	r22,zero
10106d80:	adc00017 	ldw	r23,0(r21)
10106d84:	880b883a 	mov	r5,r17
10106d88:	ad400104 	addi	r21,r21,4
10106d8c:	b93fffcc 	andi	r4,r23,65535
10106d90:	0100c840 	call	10100c84 <__mulsi3>
10106d94:	b808d43a 	srli	r4,r23,16
10106d98:	880b883a 	mov	r5,r17
10106d9c:	1421883a 	add	r16,r2,r16
10106da0:	0100c840 	call	10100c84 <__mulsi3>
10106da4:	800ed43a 	srli	r7,r16,16
10106da8:	80ffffcc 	andi	r3,r16,65535
10106dac:	b5800044 	addi	r22,r22,1
10106db0:	11c5883a 	add	r2,r2,r7
10106db4:	100e943a 	slli	r7,r2,16
10106db8:	1020d43a 	srli	r16,r2,16
10106dbc:	38c7883a 	add	r3,r7,r3
10106dc0:	a8ffff15 	stw	r3,-4(r21)
10106dc4:	b4bfee16 	blt	r22,r18,10106d80 <__alt_data_end+0xfffe6d80>
10106dc8:	80000926 	beq	r16,zero,10106df0 <__multadd+0xb4>
10106dcc:	98800217 	ldw	r2,8(r19)
10106dd0:	9080130e 	bge	r18,r2,10106e20 <__multadd+0xe4>
10106dd4:	90800144 	addi	r2,r18,5
10106dd8:	1085883a 	add	r2,r2,r2
10106ddc:	1085883a 	add	r2,r2,r2
10106de0:	9885883a 	add	r2,r19,r2
10106de4:	14000015 	stw	r16,0(r2)
10106de8:	94800044 	addi	r18,r18,1
10106dec:	9c800415 	stw	r18,16(r19)
10106df0:	9805883a 	mov	r2,r19
10106df4:	dfc00817 	ldw	ra,32(sp)
10106df8:	ddc00717 	ldw	r23,28(sp)
10106dfc:	dd800617 	ldw	r22,24(sp)
10106e00:	dd400517 	ldw	r21,20(sp)
10106e04:	dd000417 	ldw	r20,16(sp)
10106e08:	dcc00317 	ldw	r19,12(sp)
10106e0c:	dc800217 	ldw	r18,8(sp)
10106e10:	dc400117 	ldw	r17,4(sp)
10106e14:	dc000017 	ldw	r16,0(sp)
10106e18:	dec00904 	addi	sp,sp,36
10106e1c:	f800283a 	ret
10106e20:	99400117 	ldw	r5,4(r19)
10106e24:	a009883a 	mov	r4,r20
10106e28:	29400044 	addi	r5,r5,1
10106e2c:	0106c6c0 	call	10106c6c <_Balloc>
10106e30:	99800417 	ldw	r6,16(r19)
10106e34:	99400304 	addi	r5,r19,12
10106e38:	11000304 	addi	r4,r2,12
10106e3c:	31800084 	addi	r6,r6,2
10106e40:	318d883a 	add	r6,r6,r6
10106e44:	318d883a 	add	r6,r6,r6
10106e48:	1023883a 	mov	r17,r2
10106e4c:	0100cac0 	call	10100cac <memcpy>
10106e50:	98000a26 	beq	r19,zero,10106e7c <__multadd+0x140>
10106e54:	98c00117 	ldw	r3,4(r19)
10106e58:	a0801317 	ldw	r2,76(r20)
10106e5c:	18c7883a 	add	r3,r3,r3
10106e60:	18c7883a 	add	r3,r3,r3
10106e64:	10c5883a 	add	r2,r2,r3
10106e68:	10c00017 	ldw	r3,0(r2)
10106e6c:	98c00015 	stw	r3,0(r19)
10106e70:	14c00015 	stw	r19,0(r2)
10106e74:	8827883a 	mov	r19,r17
10106e78:	003fd606 	br	10106dd4 <__alt_data_end+0xfffe6dd4>
10106e7c:	8827883a 	mov	r19,r17
10106e80:	003fd406 	br	10106dd4 <__alt_data_end+0xfffe6dd4>

10106e84 <__s2b>:
10106e84:	defff904 	addi	sp,sp,-28
10106e88:	dc400115 	stw	r17,4(sp)
10106e8c:	dc000015 	stw	r16,0(sp)
10106e90:	2023883a 	mov	r17,r4
10106e94:	2821883a 	mov	r16,r5
10106e98:	39000204 	addi	r4,r7,8
10106e9c:	01400244 	movi	r5,9
10106ea0:	dcc00315 	stw	r19,12(sp)
10106ea4:	dc800215 	stw	r18,8(sp)
10106ea8:	dfc00615 	stw	ra,24(sp)
10106eac:	dd400515 	stw	r21,20(sp)
10106eb0:	dd000415 	stw	r20,16(sp)
10106eb4:	3825883a 	mov	r18,r7
10106eb8:	3027883a 	mov	r19,r6
10106ebc:	0100ad00 	call	10100ad0 <__divsi3>
10106ec0:	00c00044 	movi	r3,1
10106ec4:	000b883a 	mov	r5,zero
10106ec8:	1880030e 	bge	r3,r2,10106ed8 <__s2b+0x54>
10106ecc:	18c7883a 	add	r3,r3,r3
10106ed0:	29400044 	addi	r5,r5,1
10106ed4:	18bffd16 	blt	r3,r2,10106ecc <__alt_data_end+0xfffe6ecc>
10106ed8:	8809883a 	mov	r4,r17
10106edc:	0106c6c0 	call	10106c6c <_Balloc>
10106ee0:	d8c00717 	ldw	r3,28(sp)
10106ee4:	10c00515 	stw	r3,20(r2)
10106ee8:	00c00044 	movi	r3,1
10106eec:	10c00415 	stw	r3,16(r2)
10106ef0:	00c00244 	movi	r3,9
10106ef4:	1cc0210e 	bge	r3,r19,10106f7c <__s2b+0xf8>
10106ef8:	80eb883a 	add	r21,r16,r3
10106efc:	a829883a 	mov	r20,r21
10106f00:	84e1883a 	add	r16,r16,r19
10106f04:	a1c00007 	ldb	r7,0(r20)
10106f08:	01800284 	movi	r6,10
10106f0c:	a5000044 	addi	r20,r20,1
10106f10:	100b883a 	mov	r5,r2
10106f14:	39fff404 	addi	r7,r7,-48
10106f18:	8809883a 	mov	r4,r17
10106f1c:	0106d3c0 	call	10106d3c <__multadd>
10106f20:	a43ff81e 	bne	r20,r16,10106f04 <__alt_data_end+0xfffe6f04>
10106f24:	ace1883a 	add	r16,r21,r19
10106f28:	843ffe04 	addi	r16,r16,-8
10106f2c:	9c800a0e 	bge	r19,r18,10106f58 <__s2b+0xd4>
10106f30:	94e5c83a 	sub	r18,r18,r19
10106f34:	84a5883a 	add	r18,r16,r18
10106f38:	81c00007 	ldb	r7,0(r16)
10106f3c:	01800284 	movi	r6,10
10106f40:	84000044 	addi	r16,r16,1
10106f44:	100b883a 	mov	r5,r2
10106f48:	39fff404 	addi	r7,r7,-48
10106f4c:	8809883a 	mov	r4,r17
10106f50:	0106d3c0 	call	10106d3c <__multadd>
10106f54:	84bff81e 	bne	r16,r18,10106f38 <__alt_data_end+0xfffe6f38>
10106f58:	dfc00617 	ldw	ra,24(sp)
10106f5c:	dd400517 	ldw	r21,20(sp)
10106f60:	dd000417 	ldw	r20,16(sp)
10106f64:	dcc00317 	ldw	r19,12(sp)
10106f68:	dc800217 	ldw	r18,8(sp)
10106f6c:	dc400117 	ldw	r17,4(sp)
10106f70:	dc000017 	ldw	r16,0(sp)
10106f74:	dec00704 	addi	sp,sp,28
10106f78:	f800283a 	ret
10106f7c:	84000284 	addi	r16,r16,10
10106f80:	1827883a 	mov	r19,r3
10106f84:	003fe906 	br	10106f2c <__alt_data_end+0xfffe6f2c>

10106f88 <__hi0bits>:
10106f88:	20bfffec 	andhi	r2,r4,65535
10106f8c:	1000141e 	bne	r2,zero,10106fe0 <__hi0bits+0x58>
10106f90:	2008943a 	slli	r4,r4,16
10106f94:	00800404 	movi	r2,16
10106f98:	20ffc02c 	andhi	r3,r4,65280
10106f9c:	1800021e 	bne	r3,zero,10106fa8 <__hi0bits+0x20>
10106fa0:	2008923a 	slli	r4,r4,8
10106fa4:	10800204 	addi	r2,r2,8
10106fa8:	20fc002c 	andhi	r3,r4,61440
10106fac:	1800021e 	bne	r3,zero,10106fb8 <__hi0bits+0x30>
10106fb0:	2008913a 	slli	r4,r4,4
10106fb4:	10800104 	addi	r2,r2,4
10106fb8:	20f0002c 	andhi	r3,r4,49152
10106fbc:	1800031e 	bne	r3,zero,10106fcc <__hi0bits+0x44>
10106fc0:	2109883a 	add	r4,r4,r4
10106fc4:	10800084 	addi	r2,r2,2
10106fc8:	2109883a 	add	r4,r4,r4
10106fcc:	20000316 	blt	r4,zero,10106fdc <__hi0bits+0x54>
10106fd0:	2110002c 	andhi	r4,r4,16384
10106fd4:	2000041e 	bne	r4,zero,10106fe8 <__hi0bits+0x60>
10106fd8:	00800804 	movi	r2,32
10106fdc:	f800283a 	ret
10106fe0:	0005883a 	mov	r2,zero
10106fe4:	003fec06 	br	10106f98 <__alt_data_end+0xfffe6f98>
10106fe8:	10800044 	addi	r2,r2,1
10106fec:	f800283a 	ret

10106ff0 <__lo0bits>:
10106ff0:	20c00017 	ldw	r3,0(r4)
10106ff4:	188001cc 	andi	r2,r3,7
10106ff8:	10000826 	beq	r2,zero,1010701c <__lo0bits+0x2c>
10106ffc:	1880004c 	andi	r2,r3,1
10107000:	1000211e 	bne	r2,zero,10107088 <__lo0bits+0x98>
10107004:	1880008c 	andi	r2,r3,2
10107008:	1000211e 	bne	r2,zero,10107090 <__lo0bits+0xa0>
1010700c:	1806d0ba 	srli	r3,r3,2
10107010:	00800084 	movi	r2,2
10107014:	20c00015 	stw	r3,0(r4)
10107018:	f800283a 	ret
1010701c:	18bfffcc 	andi	r2,r3,65535
10107020:	10001326 	beq	r2,zero,10107070 <__lo0bits+0x80>
10107024:	0005883a 	mov	r2,zero
10107028:	19403fcc 	andi	r5,r3,255
1010702c:	2800021e 	bne	r5,zero,10107038 <__lo0bits+0x48>
10107030:	1806d23a 	srli	r3,r3,8
10107034:	10800204 	addi	r2,r2,8
10107038:	194003cc 	andi	r5,r3,15
1010703c:	2800021e 	bne	r5,zero,10107048 <__lo0bits+0x58>
10107040:	1806d13a 	srli	r3,r3,4
10107044:	10800104 	addi	r2,r2,4
10107048:	194000cc 	andi	r5,r3,3
1010704c:	2800021e 	bne	r5,zero,10107058 <__lo0bits+0x68>
10107050:	1806d0ba 	srli	r3,r3,2
10107054:	10800084 	addi	r2,r2,2
10107058:	1940004c 	andi	r5,r3,1
1010705c:	2800081e 	bne	r5,zero,10107080 <__lo0bits+0x90>
10107060:	1806d07a 	srli	r3,r3,1
10107064:	1800051e 	bne	r3,zero,1010707c <__lo0bits+0x8c>
10107068:	00800804 	movi	r2,32
1010706c:	f800283a 	ret
10107070:	1806d43a 	srli	r3,r3,16
10107074:	00800404 	movi	r2,16
10107078:	003feb06 	br	10107028 <__alt_data_end+0xfffe7028>
1010707c:	10800044 	addi	r2,r2,1
10107080:	20c00015 	stw	r3,0(r4)
10107084:	f800283a 	ret
10107088:	0005883a 	mov	r2,zero
1010708c:	f800283a 	ret
10107090:	1806d07a 	srli	r3,r3,1
10107094:	00800044 	movi	r2,1
10107098:	20c00015 	stw	r3,0(r4)
1010709c:	f800283a 	ret

101070a0 <__i2b>:
101070a0:	defffd04 	addi	sp,sp,-12
101070a4:	dc000015 	stw	r16,0(sp)
101070a8:	04000044 	movi	r16,1
101070ac:	dc400115 	stw	r17,4(sp)
101070b0:	2823883a 	mov	r17,r5
101070b4:	800b883a 	mov	r5,r16
101070b8:	dfc00215 	stw	ra,8(sp)
101070bc:	0106c6c0 	call	10106c6c <_Balloc>
101070c0:	14400515 	stw	r17,20(r2)
101070c4:	14000415 	stw	r16,16(r2)
101070c8:	dfc00217 	ldw	ra,8(sp)
101070cc:	dc400117 	ldw	r17,4(sp)
101070d0:	dc000017 	ldw	r16,0(sp)
101070d4:	dec00304 	addi	sp,sp,12
101070d8:	f800283a 	ret

101070dc <__multiply>:
101070dc:	deffef04 	addi	sp,sp,-68
101070e0:	dc400815 	stw	r17,32(sp)
101070e4:	dc000715 	stw	r16,28(sp)
101070e8:	34400417 	ldw	r17,16(r6)
101070ec:	2c000417 	ldw	r16,16(r5)
101070f0:	dd800d15 	stw	r22,52(sp)
101070f4:	dc800915 	stw	r18,36(sp)
101070f8:	dfc01015 	stw	ra,64(sp)
101070fc:	df000f15 	stw	fp,60(sp)
10107100:	ddc00e15 	stw	r23,56(sp)
10107104:	dd400c15 	stw	r21,48(sp)
10107108:	dd000b15 	stw	r20,44(sp)
1010710c:	dcc00a15 	stw	r19,40(sp)
10107110:	2825883a 	mov	r18,r5
10107114:	302d883a 	mov	r22,r6
10107118:	8440050e 	bge	r16,r17,10107130 <__multiply+0x54>
1010711c:	8007883a 	mov	r3,r16
10107120:	3025883a 	mov	r18,r6
10107124:	8821883a 	mov	r16,r17
10107128:	282d883a 	mov	r22,r5
1010712c:	1823883a 	mov	r17,r3
10107130:	90800217 	ldw	r2,8(r18)
10107134:	8447883a 	add	r3,r16,r17
10107138:	d8c00215 	stw	r3,8(sp)
1010713c:	91400117 	ldw	r5,4(r18)
10107140:	10c0010e 	bge	r2,r3,10107148 <__multiply+0x6c>
10107144:	29400044 	addi	r5,r5,1
10107148:	0106c6c0 	call	10106c6c <_Balloc>
1010714c:	d8c00217 	ldw	r3,8(sp)
10107150:	d8800615 	stw	r2,24(sp)
10107154:	18eb883a 	add	r21,r3,r3
10107158:	ad6b883a 	add	r21,r21,r21
1010715c:	10c00504 	addi	r3,r2,20
10107160:	1d6b883a 	add	r21,r3,r21
10107164:	d8c00115 	stw	r3,4(sp)
10107168:	dd400315 	stw	r21,12(sp)
1010716c:	1805883a 	mov	r2,r3
10107170:	1d40042e 	bgeu	r3,r21,10107184 <__multiply+0xa8>
10107174:	d8c00317 	ldw	r3,12(sp)
10107178:	10000015 	stw	zero,0(r2)
1010717c:	10800104 	addi	r2,r2,4
10107180:	10fffc36 	bltu	r2,r3,10107174 <__alt_data_end+0xfffe7174>
10107184:	8c63883a 	add	r17,r17,r17
10107188:	b5800504 	addi	r22,r22,20
1010718c:	8c63883a 	add	r17,r17,r17
10107190:	94800504 	addi	r18,r18,20
10107194:	8421883a 	add	r16,r16,r16
10107198:	b463883a 	add	r17,r22,r17
1010719c:	8421883a 	add	r16,r16,r16
101071a0:	dd800015 	stw	r22,0(sp)
101071a4:	dc800415 	stw	r18,16(sp)
101071a8:	dc400515 	stw	r17,20(sp)
101071ac:	9429883a 	add	r20,r18,r16
101071b0:	b4404f2e 	bgeu	r22,r17,101072f0 <__multiply+0x214>
101071b4:	d8c00017 	ldw	r3,0(sp)
101071b8:	1c800017 	ldw	r18,0(r3)
101071bc:	947fffcc 	andi	r17,r18,65535
101071c0:	88001e26 	beq	r17,zero,1010723c <__multiply+0x160>
101071c4:	dd800117 	ldw	r22,4(sp)
101071c8:	dd400417 	ldw	r21,16(sp)
101071cc:	0027883a 	mov	r19,zero
101071d0:	ac800017 	ldw	r18,0(r21)
101071d4:	b4000017 	ldw	r16,0(r22)
101071d8:	880b883a 	mov	r5,r17
101071dc:	913fffcc 	andi	r4,r18,65535
101071e0:	0100c840 	call	10100c84 <__mulsi3>
101071e4:	9008d43a 	srli	r4,r18,16
101071e8:	84bfffcc 	andi	r18,r16,65535
101071ec:	1485883a 	add	r2,r2,r18
101071f0:	14e5883a 	add	r18,r2,r19
101071f4:	8020d43a 	srli	r16,r16,16
101071f8:	9026d43a 	srli	r19,r18,16
101071fc:	880b883a 	mov	r5,r17
10107200:	0100c840 	call	10100c84 <__mulsi3>
10107204:	1405883a 	add	r2,r2,r16
10107208:	14e1883a 	add	r16,r2,r19
1010720c:	90ffffcc 	andi	r3,r18,65535
10107210:	8024943a 	slli	r18,r16,16
10107214:	ad400104 	addi	r21,r21,4
10107218:	b005883a 	mov	r2,r22
1010721c:	90c6b03a 	or	r3,r18,r3
10107220:	b0c00015 	stw	r3,0(r22)
10107224:	8026d43a 	srli	r19,r16,16
10107228:	b5800104 	addi	r22,r22,4
1010722c:	ad3fe836 	bltu	r21,r20,101071d0 <__alt_data_end+0xfffe71d0>
10107230:	d8c00017 	ldw	r3,0(sp)
10107234:	14c00115 	stw	r19,4(r2)
10107238:	1c800017 	ldw	r18,0(r3)
1010723c:	9024d43a 	srli	r18,r18,16
10107240:	90002226 	beq	r18,zero,101072cc <__multiply+0x1f0>
10107244:	d8c00117 	ldw	r3,4(sp)
10107248:	dd800417 	ldw	r22,16(sp)
1010724c:	002f883a 	mov	r23,zero
10107250:	1f000017 	ldw	fp,0(r3)
10107254:	1823883a 	mov	r17,r3
10107258:	182b883a 	mov	r21,r3
1010725c:	e021883a 	mov	r16,fp
10107260:	00000106 	br	10107268 <__multiply+0x18c>
10107264:	982b883a 	mov	r21,r19
10107268:	b100000b 	ldhu	r4,0(r22)
1010726c:	8020d43a 	srli	r16,r16,16
10107270:	900b883a 	mov	r5,r18
10107274:	0100c840 	call	10100c84 <__mulsi3>
10107278:	1405883a 	add	r2,r2,r16
1010727c:	15ef883a 	add	r23,r2,r23
10107280:	b804943a 	slli	r2,r23,16
10107284:	e0ffffcc 	andi	r3,fp,65535
10107288:	8c400104 	addi	r17,r17,4
1010728c:	10c6b03a 	or	r3,r2,r3
10107290:	88ffff15 	stw	r3,-4(r17)
10107294:	b5800104 	addi	r22,r22,4
10107298:	b13fff17 	ldw	r4,-4(r22)
1010729c:	acc00104 	addi	r19,r21,4
101072a0:	900b883a 	mov	r5,r18
101072a4:	2008d43a 	srli	r4,r4,16
101072a8:	9c000017 	ldw	r16,0(r19)
101072ac:	0100c840 	call	10100c84 <__mulsi3>
101072b0:	b806d43a 	srli	r3,r23,16
101072b4:	813fffcc 	andi	r4,r16,65535
101072b8:	1105883a 	add	r2,r2,r4
101072bc:	10f9883a 	add	fp,r2,r3
101072c0:	e02ed43a 	srli	r23,fp,16
101072c4:	b53fe736 	bltu	r22,r20,10107264 <__alt_data_end+0xfffe7264>
101072c8:	af000115 	stw	fp,4(r21)
101072cc:	d8c00017 	ldw	r3,0(sp)
101072d0:	d9000517 	ldw	r4,20(sp)
101072d4:	18c00104 	addi	r3,r3,4
101072d8:	d8c00015 	stw	r3,0(sp)
101072dc:	d8c00117 	ldw	r3,4(sp)
101072e0:	18c00104 	addi	r3,r3,4
101072e4:	d8c00115 	stw	r3,4(sp)
101072e8:	d8c00017 	ldw	r3,0(sp)
101072ec:	193fb136 	bltu	r3,r4,101071b4 <__alt_data_end+0xfffe71b4>
101072f0:	d8c00217 	ldw	r3,8(sp)
101072f4:	00c00c0e 	bge	zero,r3,10107328 <__multiply+0x24c>
101072f8:	d8c00317 	ldw	r3,12(sp)
101072fc:	18bfff17 	ldw	r2,-4(r3)
10107300:	1d7fff04 	addi	r21,r3,-4
10107304:	10000326 	beq	r2,zero,10107314 <__multiply+0x238>
10107308:	00000706 	br	10107328 <__multiply+0x24c>
1010730c:	a8800017 	ldw	r2,0(r21)
10107310:	1000051e 	bne	r2,zero,10107328 <__multiply+0x24c>
10107314:	d8c00217 	ldw	r3,8(sp)
10107318:	ad7fff04 	addi	r21,r21,-4
1010731c:	18ffffc4 	addi	r3,r3,-1
10107320:	d8c00215 	stw	r3,8(sp)
10107324:	183ff91e 	bne	r3,zero,1010730c <__alt_data_end+0xfffe730c>
10107328:	d8c00617 	ldw	r3,24(sp)
1010732c:	d9000217 	ldw	r4,8(sp)
10107330:	1805883a 	mov	r2,r3
10107334:	19000415 	stw	r4,16(r3)
10107338:	dfc01017 	ldw	ra,64(sp)
1010733c:	df000f17 	ldw	fp,60(sp)
10107340:	ddc00e17 	ldw	r23,56(sp)
10107344:	dd800d17 	ldw	r22,52(sp)
10107348:	dd400c17 	ldw	r21,48(sp)
1010734c:	dd000b17 	ldw	r20,44(sp)
10107350:	dcc00a17 	ldw	r19,40(sp)
10107354:	dc800917 	ldw	r18,36(sp)
10107358:	dc400817 	ldw	r17,32(sp)
1010735c:	dc000717 	ldw	r16,28(sp)
10107360:	dec01104 	addi	sp,sp,68
10107364:	f800283a 	ret

10107368 <__pow5mult>:
10107368:	defffa04 	addi	sp,sp,-24
1010736c:	dcc00315 	stw	r19,12(sp)
10107370:	dc000015 	stw	r16,0(sp)
10107374:	dfc00515 	stw	ra,20(sp)
10107378:	dd000415 	stw	r20,16(sp)
1010737c:	dc800215 	stw	r18,8(sp)
10107380:	dc400115 	stw	r17,4(sp)
10107384:	308000cc 	andi	r2,r6,3
10107388:	3021883a 	mov	r16,r6
1010738c:	2027883a 	mov	r19,r4
10107390:	10002f1e 	bne	r2,zero,10107450 <__pow5mult+0xe8>
10107394:	2825883a 	mov	r18,r5
10107398:	8021d0ba 	srai	r16,r16,2
1010739c:	80001a26 	beq	r16,zero,10107408 <__pow5mult+0xa0>
101073a0:	9c401217 	ldw	r17,72(r19)
101073a4:	8800061e 	bne	r17,zero,101073c0 <__pow5mult+0x58>
101073a8:	00003406 	br	1010747c <__pow5mult+0x114>
101073ac:	8021d07a 	srai	r16,r16,1
101073b0:	80001526 	beq	r16,zero,10107408 <__pow5mult+0xa0>
101073b4:	88800017 	ldw	r2,0(r17)
101073b8:	10001c26 	beq	r2,zero,1010742c <__pow5mult+0xc4>
101073bc:	1023883a 	mov	r17,r2
101073c0:	8080004c 	andi	r2,r16,1
101073c4:	103ff926 	beq	r2,zero,101073ac <__alt_data_end+0xfffe73ac>
101073c8:	880d883a 	mov	r6,r17
101073cc:	900b883a 	mov	r5,r18
101073d0:	9809883a 	mov	r4,r19
101073d4:	01070dc0 	call	101070dc <__multiply>
101073d8:	90001b26 	beq	r18,zero,10107448 <__pow5mult+0xe0>
101073dc:	91000117 	ldw	r4,4(r18)
101073e0:	98c01317 	ldw	r3,76(r19)
101073e4:	8021d07a 	srai	r16,r16,1
101073e8:	2109883a 	add	r4,r4,r4
101073ec:	2109883a 	add	r4,r4,r4
101073f0:	1907883a 	add	r3,r3,r4
101073f4:	19000017 	ldw	r4,0(r3)
101073f8:	91000015 	stw	r4,0(r18)
101073fc:	1c800015 	stw	r18,0(r3)
10107400:	1025883a 	mov	r18,r2
10107404:	803feb1e 	bne	r16,zero,101073b4 <__alt_data_end+0xfffe73b4>
10107408:	9005883a 	mov	r2,r18
1010740c:	dfc00517 	ldw	ra,20(sp)
10107410:	dd000417 	ldw	r20,16(sp)
10107414:	dcc00317 	ldw	r19,12(sp)
10107418:	dc800217 	ldw	r18,8(sp)
1010741c:	dc400117 	ldw	r17,4(sp)
10107420:	dc000017 	ldw	r16,0(sp)
10107424:	dec00604 	addi	sp,sp,24
10107428:	f800283a 	ret
1010742c:	880d883a 	mov	r6,r17
10107430:	880b883a 	mov	r5,r17
10107434:	9809883a 	mov	r4,r19
10107438:	01070dc0 	call	101070dc <__multiply>
1010743c:	88800015 	stw	r2,0(r17)
10107440:	10000015 	stw	zero,0(r2)
10107444:	003fdd06 	br	101073bc <__alt_data_end+0xfffe73bc>
10107448:	1025883a 	mov	r18,r2
1010744c:	003fd706 	br	101073ac <__alt_data_end+0xfffe73ac>
10107450:	10bfffc4 	addi	r2,r2,-1
10107454:	1085883a 	add	r2,r2,r2
10107458:	00c40474 	movhi	r3,4113
1010745c:	18c1a804 	addi	r3,r3,1696
10107460:	1085883a 	add	r2,r2,r2
10107464:	1885883a 	add	r2,r3,r2
10107468:	11800017 	ldw	r6,0(r2)
1010746c:	000f883a 	mov	r7,zero
10107470:	0106d3c0 	call	10106d3c <__multadd>
10107474:	1025883a 	mov	r18,r2
10107478:	003fc706 	br	10107398 <__alt_data_end+0xfffe7398>
1010747c:	05000044 	movi	r20,1
10107480:	a00b883a 	mov	r5,r20
10107484:	9809883a 	mov	r4,r19
10107488:	0106c6c0 	call	10106c6c <_Balloc>
1010748c:	1023883a 	mov	r17,r2
10107490:	00809c44 	movi	r2,625
10107494:	88800515 	stw	r2,20(r17)
10107498:	8d000415 	stw	r20,16(r17)
1010749c:	9c401215 	stw	r17,72(r19)
101074a0:	88000015 	stw	zero,0(r17)
101074a4:	003fc606 	br	101073c0 <__alt_data_end+0xfffe73c0>

101074a8 <__lshift>:
101074a8:	defff904 	addi	sp,sp,-28
101074ac:	dd400515 	stw	r21,20(sp)
101074b0:	dcc00315 	stw	r19,12(sp)
101074b4:	302bd17a 	srai	r21,r6,5
101074b8:	2cc00417 	ldw	r19,16(r5)
101074bc:	28800217 	ldw	r2,8(r5)
101074c0:	dd000415 	stw	r20,16(sp)
101074c4:	ace7883a 	add	r19,r21,r19
101074c8:	dc800215 	stw	r18,8(sp)
101074cc:	dc400115 	stw	r17,4(sp)
101074d0:	dc000015 	stw	r16,0(sp)
101074d4:	dfc00615 	stw	ra,24(sp)
101074d8:	9c000044 	addi	r16,r19,1
101074dc:	2823883a 	mov	r17,r5
101074e0:	3029883a 	mov	r20,r6
101074e4:	2025883a 	mov	r18,r4
101074e8:	29400117 	ldw	r5,4(r5)
101074ec:	1400030e 	bge	r2,r16,101074fc <__lshift+0x54>
101074f0:	1085883a 	add	r2,r2,r2
101074f4:	29400044 	addi	r5,r5,1
101074f8:	143ffd16 	blt	r2,r16,101074f0 <__alt_data_end+0xfffe74f0>
101074fc:	9009883a 	mov	r4,r18
10107500:	0106c6c0 	call	10106c6c <_Balloc>
10107504:	10c00504 	addi	r3,r2,20
10107508:	0540070e 	bge	zero,r21,10107528 <__lshift+0x80>
1010750c:	ad6b883a 	add	r21,r21,r21
10107510:	ad6b883a 	add	r21,r21,r21
10107514:	1809883a 	mov	r4,r3
10107518:	1d47883a 	add	r3,r3,r21
1010751c:	20000015 	stw	zero,0(r4)
10107520:	21000104 	addi	r4,r4,4
10107524:	193ffd1e 	bne	r3,r4,1010751c <__alt_data_end+0xfffe751c>
10107528:	8a000417 	ldw	r8,16(r17)
1010752c:	89000504 	addi	r4,r17,20
10107530:	a18007cc 	andi	r6,r20,31
10107534:	4211883a 	add	r8,r8,r8
10107538:	4211883a 	add	r8,r8,r8
1010753c:	2211883a 	add	r8,r4,r8
10107540:	30002326 	beq	r6,zero,101075d0 <__lshift+0x128>
10107544:	02400804 	movi	r9,32
10107548:	4993c83a 	sub	r9,r9,r6
1010754c:	000b883a 	mov	r5,zero
10107550:	21c00017 	ldw	r7,0(r4)
10107554:	1815883a 	mov	r10,r3
10107558:	18c00104 	addi	r3,r3,4
1010755c:	398e983a 	sll	r7,r7,r6
10107560:	21000104 	addi	r4,r4,4
10107564:	394ab03a 	or	r5,r7,r5
10107568:	197fff15 	stw	r5,-4(r3)
1010756c:	217fff17 	ldw	r5,-4(r4)
10107570:	2a4ad83a 	srl	r5,r5,r9
10107574:	223ff636 	bltu	r4,r8,10107550 <__alt_data_end+0xfffe7550>
10107578:	51400115 	stw	r5,4(r10)
1010757c:	28001a1e 	bne	r5,zero,101075e8 <__lshift+0x140>
10107580:	843fffc4 	addi	r16,r16,-1
10107584:	14000415 	stw	r16,16(r2)
10107588:	88000826 	beq	r17,zero,101075ac <__lshift+0x104>
1010758c:	89000117 	ldw	r4,4(r17)
10107590:	90c01317 	ldw	r3,76(r18)
10107594:	2109883a 	add	r4,r4,r4
10107598:	2109883a 	add	r4,r4,r4
1010759c:	1907883a 	add	r3,r3,r4
101075a0:	19000017 	ldw	r4,0(r3)
101075a4:	89000015 	stw	r4,0(r17)
101075a8:	1c400015 	stw	r17,0(r3)
101075ac:	dfc00617 	ldw	ra,24(sp)
101075b0:	dd400517 	ldw	r21,20(sp)
101075b4:	dd000417 	ldw	r20,16(sp)
101075b8:	dcc00317 	ldw	r19,12(sp)
101075bc:	dc800217 	ldw	r18,8(sp)
101075c0:	dc400117 	ldw	r17,4(sp)
101075c4:	dc000017 	ldw	r16,0(sp)
101075c8:	dec00704 	addi	sp,sp,28
101075cc:	f800283a 	ret
101075d0:	21400017 	ldw	r5,0(r4)
101075d4:	18c00104 	addi	r3,r3,4
101075d8:	21000104 	addi	r4,r4,4
101075dc:	197fff15 	stw	r5,-4(r3)
101075e0:	223ffb36 	bltu	r4,r8,101075d0 <__alt_data_end+0xfffe75d0>
101075e4:	003fe606 	br	10107580 <__alt_data_end+0xfffe7580>
101075e8:	9c000084 	addi	r16,r19,2
101075ec:	003fe406 	br	10107580 <__alt_data_end+0xfffe7580>

101075f0 <__mcmp>:
101075f0:	20800417 	ldw	r2,16(r4)
101075f4:	28c00417 	ldw	r3,16(r5)
101075f8:	10c5c83a 	sub	r2,r2,r3
101075fc:	1000111e 	bne	r2,zero,10107644 <__mcmp+0x54>
10107600:	18c7883a 	add	r3,r3,r3
10107604:	18c7883a 	add	r3,r3,r3
10107608:	21000504 	addi	r4,r4,20
1010760c:	29400504 	addi	r5,r5,20
10107610:	20c5883a 	add	r2,r4,r3
10107614:	28cb883a 	add	r5,r5,r3
10107618:	00000106 	br	10107620 <__mcmp+0x30>
1010761c:	20800a2e 	bgeu	r4,r2,10107648 <__mcmp+0x58>
10107620:	10bfff04 	addi	r2,r2,-4
10107624:	297fff04 	addi	r5,r5,-4
10107628:	11800017 	ldw	r6,0(r2)
1010762c:	28c00017 	ldw	r3,0(r5)
10107630:	30fffa26 	beq	r6,r3,1010761c <__alt_data_end+0xfffe761c>
10107634:	30c00236 	bltu	r6,r3,10107640 <__mcmp+0x50>
10107638:	00800044 	movi	r2,1
1010763c:	f800283a 	ret
10107640:	00bfffc4 	movi	r2,-1
10107644:	f800283a 	ret
10107648:	0005883a 	mov	r2,zero
1010764c:	f800283a 	ret

10107650 <__mdiff>:
10107650:	28c00417 	ldw	r3,16(r5)
10107654:	30800417 	ldw	r2,16(r6)
10107658:	defffa04 	addi	sp,sp,-24
1010765c:	dcc00315 	stw	r19,12(sp)
10107660:	dc800215 	stw	r18,8(sp)
10107664:	dfc00515 	stw	ra,20(sp)
10107668:	dd000415 	stw	r20,16(sp)
1010766c:	dc400115 	stw	r17,4(sp)
10107670:	dc000015 	stw	r16,0(sp)
10107674:	1887c83a 	sub	r3,r3,r2
10107678:	2825883a 	mov	r18,r5
1010767c:	3027883a 	mov	r19,r6
10107680:	1800141e 	bne	r3,zero,101076d4 <__mdiff+0x84>
10107684:	1085883a 	add	r2,r2,r2
10107688:	1085883a 	add	r2,r2,r2
1010768c:	2a000504 	addi	r8,r5,20
10107690:	34000504 	addi	r16,r6,20
10107694:	4087883a 	add	r3,r8,r2
10107698:	8085883a 	add	r2,r16,r2
1010769c:	00000106 	br	101076a4 <__mdiff+0x54>
101076a0:	40c0592e 	bgeu	r8,r3,10107808 <__mdiff+0x1b8>
101076a4:	18ffff04 	addi	r3,r3,-4
101076a8:	10bfff04 	addi	r2,r2,-4
101076ac:	19c00017 	ldw	r7,0(r3)
101076b0:	11400017 	ldw	r5,0(r2)
101076b4:	397ffa26 	beq	r7,r5,101076a0 <__alt_data_end+0xfffe76a0>
101076b8:	3940592e 	bgeu	r7,r5,10107820 <__mdiff+0x1d0>
101076bc:	9005883a 	mov	r2,r18
101076c0:	4023883a 	mov	r17,r8
101076c4:	9825883a 	mov	r18,r19
101076c8:	05000044 	movi	r20,1
101076cc:	1027883a 	mov	r19,r2
101076d0:	00000406 	br	101076e4 <__mdiff+0x94>
101076d4:	18005616 	blt	r3,zero,10107830 <__mdiff+0x1e0>
101076d8:	34400504 	addi	r17,r6,20
101076dc:	2c000504 	addi	r16,r5,20
101076e0:	0029883a 	mov	r20,zero
101076e4:	91400117 	ldw	r5,4(r18)
101076e8:	0106c6c0 	call	10106c6c <_Balloc>
101076ec:	92400417 	ldw	r9,16(r18)
101076f0:	9b000417 	ldw	r12,16(r19)
101076f4:	12c00504 	addi	r11,r2,20
101076f8:	4a51883a 	add	r8,r9,r9
101076fc:	6319883a 	add	r12,r12,r12
10107700:	4211883a 	add	r8,r8,r8
10107704:	6319883a 	add	r12,r12,r12
10107708:	15000315 	stw	r20,12(r2)
1010770c:	8211883a 	add	r8,r16,r8
10107710:	8b19883a 	add	r12,r17,r12
10107714:	0007883a 	mov	r3,zero
10107718:	81400017 	ldw	r5,0(r16)
1010771c:	89c00017 	ldw	r7,0(r17)
10107720:	59800104 	addi	r6,r11,4
10107724:	293fffcc 	andi	r4,r5,65535
10107728:	20c7883a 	add	r3,r4,r3
1010772c:	393fffcc 	andi	r4,r7,65535
10107730:	1909c83a 	sub	r4,r3,r4
10107734:	280ad43a 	srli	r5,r5,16
10107738:	380ed43a 	srli	r7,r7,16
1010773c:	2007d43a 	srai	r3,r4,16
10107740:	213fffcc 	andi	r4,r4,65535
10107744:	29cbc83a 	sub	r5,r5,r7
10107748:	28c7883a 	add	r3,r5,r3
1010774c:	180a943a 	slli	r5,r3,16
10107750:	8c400104 	addi	r17,r17,4
10107754:	84000104 	addi	r16,r16,4
10107758:	2908b03a 	or	r4,r5,r4
1010775c:	59000015 	stw	r4,0(r11)
10107760:	1807d43a 	srai	r3,r3,16
10107764:	3015883a 	mov	r10,r6
10107768:	3017883a 	mov	r11,r6
1010776c:	8b3fea36 	bltu	r17,r12,10107718 <__alt_data_end+0xfffe7718>
10107770:	8200162e 	bgeu	r16,r8,101077cc <__mdiff+0x17c>
10107774:	8017883a 	mov	r11,r16
10107778:	59400017 	ldw	r5,0(r11)
1010777c:	31800104 	addi	r6,r6,4
10107780:	5ac00104 	addi	r11,r11,4
10107784:	293fffcc 	andi	r4,r5,65535
10107788:	20c7883a 	add	r3,r4,r3
1010778c:	280ed43a 	srli	r7,r5,16
10107790:	180bd43a 	srai	r5,r3,16
10107794:	193fffcc 	andi	r4,r3,65535
10107798:	3947883a 	add	r3,r7,r5
1010779c:	180a943a 	slli	r5,r3,16
101077a0:	1807d43a 	srai	r3,r3,16
101077a4:	2908b03a 	or	r4,r5,r4
101077a8:	313fff15 	stw	r4,-4(r6)
101077ac:	5a3ff236 	bltu	r11,r8,10107778 <__alt_data_end+0xfffe7778>
101077b0:	0406303a 	nor	r3,zero,r16
101077b4:	1a07883a 	add	r3,r3,r8
101077b8:	1806d0ba 	srli	r3,r3,2
101077bc:	18c00044 	addi	r3,r3,1
101077c0:	18c7883a 	add	r3,r3,r3
101077c4:	18c7883a 	add	r3,r3,r3
101077c8:	50d5883a 	add	r10,r10,r3
101077cc:	50ffff04 	addi	r3,r10,-4
101077d0:	2000041e 	bne	r4,zero,101077e4 <__mdiff+0x194>
101077d4:	18ffff04 	addi	r3,r3,-4
101077d8:	19000017 	ldw	r4,0(r3)
101077dc:	4a7fffc4 	addi	r9,r9,-1
101077e0:	203ffc26 	beq	r4,zero,101077d4 <__alt_data_end+0xfffe77d4>
101077e4:	12400415 	stw	r9,16(r2)
101077e8:	dfc00517 	ldw	ra,20(sp)
101077ec:	dd000417 	ldw	r20,16(sp)
101077f0:	dcc00317 	ldw	r19,12(sp)
101077f4:	dc800217 	ldw	r18,8(sp)
101077f8:	dc400117 	ldw	r17,4(sp)
101077fc:	dc000017 	ldw	r16,0(sp)
10107800:	dec00604 	addi	sp,sp,24
10107804:	f800283a 	ret
10107808:	000b883a 	mov	r5,zero
1010780c:	0106c6c0 	call	10106c6c <_Balloc>
10107810:	00c00044 	movi	r3,1
10107814:	10c00415 	stw	r3,16(r2)
10107818:	10000515 	stw	zero,20(r2)
1010781c:	003ff206 	br	101077e8 <__alt_data_end+0xfffe77e8>
10107820:	8023883a 	mov	r17,r16
10107824:	0029883a 	mov	r20,zero
10107828:	4021883a 	mov	r16,r8
1010782c:	003fad06 	br	101076e4 <__alt_data_end+0xfffe76e4>
10107830:	9005883a 	mov	r2,r18
10107834:	94400504 	addi	r17,r18,20
10107838:	9c000504 	addi	r16,r19,20
1010783c:	9825883a 	mov	r18,r19
10107840:	05000044 	movi	r20,1
10107844:	1027883a 	mov	r19,r2
10107848:	003fa606 	br	101076e4 <__alt_data_end+0xfffe76e4>

1010784c <__ulp>:
1010784c:	295ffc2c 	andhi	r5,r5,32752
10107850:	00bf3034 	movhi	r2,64704
10107854:	2887883a 	add	r3,r5,r2
10107858:	00c0020e 	bge	zero,r3,10107864 <__ulp+0x18>
1010785c:	0005883a 	mov	r2,zero
10107860:	f800283a 	ret
10107864:	00c7c83a 	sub	r3,zero,r3
10107868:	1807d53a 	srai	r3,r3,20
1010786c:	008004c4 	movi	r2,19
10107870:	10c00b0e 	bge	r2,r3,101078a0 <__ulp+0x54>
10107874:	18bffb04 	addi	r2,r3,-20
10107878:	01000784 	movi	r4,30
1010787c:	0007883a 	mov	r3,zero
10107880:	20800516 	blt	r4,r2,10107898 <__ulp+0x4c>
10107884:	010007c4 	movi	r4,31
10107888:	2089c83a 	sub	r4,r4,r2
1010788c:	00800044 	movi	r2,1
10107890:	1104983a 	sll	r2,r2,r4
10107894:	f800283a 	ret
10107898:	00800044 	movi	r2,1
1010789c:	f800283a 	ret
101078a0:	01400234 	movhi	r5,8
101078a4:	28c7d83a 	sra	r3,r5,r3
101078a8:	0005883a 	mov	r2,zero
101078ac:	f800283a 	ret

101078b0 <__b2d>:
101078b0:	defffa04 	addi	sp,sp,-24
101078b4:	dc000015 	stw	r16,0(sp)
101078b8:	24000417 	ldw	r16,16(r4)
101078bc:	dc400115 	stw	r17,4(sp)
101078c0:	24400504 	addi	r17,r4,20
101078c4:	8421883a 	add	r16,r16,r16
101078c8:	8421883a 	add	r16,r16,r16
101078cc:	8c21883a 	add	r16,r17,r16
101078d0:	dc800215 	stw	r18,8(sp)
101078d4:	84bfff17 	ldw	r18,-4(r16)
101078d8:	dd000415 	stw	r20,16(sp)
101078dc:	dcc00315 	stw	r19,12(sp)
101078e0:	9009883a 	mov	r4,r18
101078e4:	2829883a 	mov	r20,r5
101078e8:	dfc00515 	stw	ra,20(sp)
101078ec:	0106f880 	call	10106f88 <__hi0bits>
101078f0:	00c00804 	movi	r3,32
101078f4:	1889c83a 	sub	r4,r3,r2
101078f8:	a1000015 	stw	r4,0(r20)
101078fc:	01000284 	movi	r4,10
10107900:	84ffff04 	addi	r19,r16,-4
10107904:	20801216 	blt	r4,r2,10107950 <__b2d+0xa0>
10107908:	018002c4 	movi	r6,11
1010790c:	308dc83a 	sub	r6,r6,r2
10107910:	9186d83a 	srl	r3,r18,r6
10107914:	18cffc34 	orhi	r3,r3,16368
10107918:	8cc0212e 	bgeu	r17,r19,101079a0 <__b2d+0xf0>
1010791c:	813ffe17 	ldw	r4,-8(r16)
10107920:	218cd83a 	srl	r6,r4,r6
10107924:	10800544 	addi	r2,r2,21
10107928:	9084983a 	sll	r2,r18,r2
1010792c:	1184b03a 	or	r2,r2,r6
10107930:	dfc00517 	ldw	ra,20(sp)
10107934:	dd000417 	ldw	r20,16(sp)
10107938:	dcc00317 	ldw	r19,12(sp)
1010793c:	dc800217 	ldw	r18,8(sp)
10107940:	dc400117 	ldw	r17,4(sp)
10107944:	dc000017 	ldw	r16,0(sp)
10107948:	dec00604 	addi	sp,sp,24
1010794c:	f800283a 	ret
10107950:	8cc00f2e 	bgeu	r17,r19,10107990 <__b2d+0xe0>
10107954:	117ffd44 	addi	r5,r2,-11
10107958:	80bffe17 	ldw	r2,-8(r16)
1010795c:	28000e26 	beq	r5,zero,10107998 <__b2d+0xe8>
10107960:	1949c83a 	sub	r4,r3,r5
10107964:	9164983a 	sll	r18,r18,r5
10107968:	1106d83a 	srl	r3,r2,r4
1010796c:	81bffe04 	addi	r6,r16,-8
10107970:	948ffc34 	orhi	r18,r18,16368
10107974:	90c6b03a 	or	r3,r18,r3
10107978:	89800e2e 	bgeu	r17,r6,101079b4 <__b2d+0x104>
1010797c:	81bffd17 	ldw	r6,-12(r16)
10107980:	1144983a 	sll	r2,r2,r5
10107984:	310ad83a 	srl	r5,r6,r4
10107988:	2884b03a 	or	r2,r5,r2
1010798c:	003fe806 	br	10107930 <__alt_data_end+0xfffe7930>
10107990:	10bffd44 	addi	r2,r2,-11
10107994:	1000041e 	bne	r2,zero,101079a8 <__b2d+0xf8>
10107998:	90cffc34 	orhi	r3,r18,16368
1010799c:	003fe406 	br	10107930 <__alt_data_end+0xfffe7930>
101079a0:	000d883a 	mov	r6,zero
101079a4:	003fdf06 	br	10107924 <__alt_data_end+0xfffe7924>
101079a8:	90a4983a 	sll	r18,r18,r2
101079ac:	0005883a 	mov	r2,zero
101079b0:	003ff906 	br	10107998 <__alt_data_end+0xfffe7998>
101079b4:	1144983a 	sll	r2,r2,r5
101079b8:	003fdd06 	br	10107930 <__alt_data_end+0xfffe7930>

101079bc <__d2b>:
101079bc:	defff804 	addi	sp,sp,-32
101079c0:	dc000215 	stw	r16,8(sp)
101079c4:	3021883a 	mov	r16,r6
101079c8:	dc400315 	stw	r17,12(sp)
101079cc:	8022907a 	slli	r17,r16,1
101079d0:	dd000615 	stw	r20,24(sp)
101079d4:	2829883a 	mov	r20,r5
101079d8:	01400044 	movi	r5,1
101079dc:	dcc00515 	stw	r19,20(sp)
101079e0:	dc800415 	stw	r18,16(sp)
101079e4:	dfc00715 	stw	ra,28(sp)
101079e8:	3825883a 	mov	r18,r7
101079ec:	8822d57a 	srli	r17,r17,21
101079f0:	0106c6c0 	call	10106c6c <_Balloc>
101079f4:	1027883a 	mov	r19,r2
101079f8:	00800434 	movhi	r2,16
101079fc:	10bfffc4 	addi	r2,r2,-1
10107a00:	808c703a 	and	r6,r16,r2
10107a04:	88000126 	beq	r17,zero,10107a0c <__d2b+0x50>
10107a08:	31800434 	orhi	r6,r6,16
10107a0c:	d9800015 	stw	r6,0(sp)
10107a10:	a0002426 	beq	r20,zero,10107aa4 <__d2b+0xe8>
10107a14:	d9000104 	addi	r4,sp,4
10107a18:	dd000115 	stw	r20,4(sp)
10107a1c:	0106ff00 	call	10106ff0 <__lo0bits>
10107a20:	d8c00017 	ldw	r3,0(sp)
10107a24:	10002f1e 	bne	r2,zero,10107ae4 <__d2b+0x128>
10107a28:	d9000117 	ldw	r4,4(sp)
10107a2c:	99000515 	stw	r4,20(r19)
10107a30:	1821003a 	cmpeq	r16,r3,zero
10107a34:	01000084 	movi	r4,2
10107a38:	2421c83a 	sub	r16,r4,r16
10107a3c:	98c00615 	stw	r3,24(r19)
10107a40:	9c000415 	stw	r16,16(r19)
10107a44:	88001f1e 	bne	r17,zero,10107ac4 <__d2b+0x108>
10107a48:	10bef384 	addi	r2,r2,-1074
10107a4c:	90800015 	stw	r2,0(r18)
10107a50:	00900034 	movhi	r2,16384
10107a54:	10bfffc4 	addi	r2,r2,-1
10107a58:	8085883a 	add	r2,r16,r2
10107a5c:	1085883a 	add	r2,r2,r2
10107a60:	1085883a 	add	r2,r2,r2
10107a64:	9885883a 	add	r2,r19,r2
10107a68:	11000517 	ldw	r4,20(r2)
10107a6c:	8020917a 	slli	r16,r16,5
10107a70:	0106f880 	call	10106f88 <__hi0bits>
10107a74:	d8c00817 	ldw	r3,32(sp)
10107a78:	8085c83a 	sub	r2,r16,r2
10107a7c:	18800015 	stw	r2,0(r3)
10107a80:	9805883a 	mov	r2,r19
10107a84:	dfc00717 	ldw	ra,28(sp)
10107a88:	dd000617 	ldw	r20,24(sp)
10107a8c:	dcc00517 	ldw	r19,20(sp)
10107a90:	dc800417 	ldw	r18,16(sp)
10107a94:	dc400317 	ldw	r17,12(sp)
10107a98:	dc000217 	ldw	r16,8(sp)
10107a9c:	dec00804 	addi	sp,sp,32
10107aa0:	f800283a 	ret
10107aa4:	d809883a 	mov	r4,sp
10107aa8:	0106ff00 	call	10106ff0 <__lo0bits>
10107aac:	d8c00017 	ldw	r3,0(sp)
10107ab0:	04000044 	movi	r16,1
10107ab4:	9c000415 	stw	r16,16(r19)
10107ab8:	98c00515 	stw	r3,20(r19)
10107abc:	10800804 	addi	r2,r2,32
10107ac0:	883fe126 	beq	r17,zero,10107a48 <__alt_data_end+0xfffe7a48>
10107ac4:	00c00d44 	movi	r3,53
10107ac8:	8c7ef344 	addi	r17,r17,-1075
10107acc:	88a3883a 	add	r17,r17,r2
10107ad0:	1885c83a 	sub	r2,r3,r2
10107ad4:	d8c00817 	ldw	r3,32(sp)
10107ad8:	94400015 	stw	r17,0(r18)
10107adc:	18800015 	stw	r2,0(r3)
10107ae0:	003fe706 	br	10107a80 <__alt_data_end+0xfffe7a80>
10107ae4:	01000804 	movi	r4,32
10107ae8:	2089c83a 	sub	r4,r4,r2
10107aec:	1908983a 	sll	r4,r3,r4
10107af0:	d9400117 	ldw	r5,4(sp)
10107af4:	1886d83a 	srl	r3,r3,r2
10107af8:	2148b03a 	or	r4,r4,r5
10107afc:	99000515 	stw	r4,20(r19)
10107b00:	d8c00015 	stw	r3,0(sp)
10107b04:	003fca06 	br	10107a30 <__alt_data_end+0xfffe7a30>

10107b08 <__ratio>:
10107b08:	defff904 	addi	sp,sp,-28
10107b0c:	dc400315 	stw	r17,12(sp)
10107b10:	2823883a 	mov	r17,r5
10107b14:	d9400104 	addi	r5,sp,4
10107b18:	dfc00615 	stw	ra,24(sp)
10107b1c:	dcc00515 	stw	r19,20(sp)
10107b20:	dc800415 	stw	r18,16(sp)
10107b24:	2027883a 	mov	r19,r4
10107b28:	dc000215 	stw	r16,8(sp)
10107b2c:	01078b00 	call	101078b0 <__b2d>
10107b30:	d80b883a 	mov	r5,sp
10107b34:	8809883a 	mov	r4,r17
10107b38:	1025883a 	mov	r18,r2
10107b3c:	1821883a 	mov	r16,r3
10107b40:	01078b00 	call	101078b0 <__b2d>
10107b44:	8a000417 	ldw	r8,16(r17)
10107b48:	99000417 	ldw	r4,16(r19)
10107b4c:	d9400117 	ldw	r5,4(sp)
10107b50:	2209c83a 	sub	r4,r4,r8
10107b54:	2010917a 	slli	r8,r4,5
10107b58:	d9000017 	ldw	r4,0(sp)
10107b5c:	2909c83a 	sub	r4,r5,r4
10107b60:	4109883a 	add	r4,r8,r4
10107b64:	01000e0e 	bge	zero,r4,10107ba0 <__ratio+0x98>
10107b68:	2008953a 	slli	r4,r4,20
10107b6c:	2421883a 	add	r16,r4,r16
10107b70:	100d883a 	mov	r6,r2
10107b74:	180f883a 	mov	r7,r3
10107b78:	9009883a 	mov	r4,r18
10107b7c:	800b883a 	mov	r5,r16
10107b80:	010ba180 	call	1010ba18 <__divdf3>
10107b84:	dfc00617 	ldw	ra,24(sp)
10107b88:	dcc00517 	ldw	r19,20(sp)
10107b8c:	dc800417 	ldw	r18,16(sp)
10107b90:	dc400317 	ldw	r17,12(sp)
10107b94:	dc000217 	ldw	r16,8(sp)
10107b98:	dec00704 	addi	sp,sp,28
10107b9c:	f800283a 	ret
10107ba0:	2008953a 	slli	r4,r4,20
10107ba4:	1907c83a 	sub	r3,r3,r4
10107ba8:	003ff106 	br	10107b70 <__alt_data_end+0xfffe7b70>

10107bac <_mprec_log10>:
10107bac:	defffe04 	addi	sp,sp,-8
10107bb0:	dc000015 	stw	r16,0(sp)
10107bb4:	dfc00115 	stw	ra,4(sp)
10107bb8:	008005c4 	movi	r2,23
10107bbc:	2021883a 	mov	r16,r4
10107bc0:	11000d0e 	bge	r2,r4,10107bf8 <_mprec_log10+0x4c>
10107bc4:	0005883a 	mov	r2,zero
10107bc8:	00cffc34 	movhi	r3,16368
10107bcc:	843fffc4 	addi	r16,r16,-1
10107bd0:	000d883a 	mov	r6,zero
10107bd4:	01d00934 	movhi	r7,16420
10107bd8:	1009883a 	mov	r4,r2
10107bdc:	180b883a 	mov	r5,r3
10107be0:	010c6400 	call	1010c640 <__muldf3>
10107be4:	803ff91e 	bne	r16,zero,10107bcc <__alt_data_end+0xfffe7bcc>
10107be8:	dfc00117 	ldw	ra,4(sp)
10107bec:	dc000017 	ldw	r16,0(sp)
10107bf0:	dec00204 	addi	sp,sp,8
10107bf4:	f800283a 	ret
10107bf8:	202090fa 	slli	r16,r4,3
10107bfc:	00840474 	movhi	r2,4113
10107c00:	1081bf04 	addi	r2,r2,1788
10107c04:	1421883a 	add	r16,r2,r16
10107c08:	80800017 	ldw	r2,0(r16)
10107c0c:	80c00117 	ldw	r3,4(r16)
10107c10:	dfc00117 	ldw	ra,4(sp)
10107c14:	dc000017 	ldw	r16,0(sp)
10107c18:	dec00204 	addi	sp,sp,8
10107c1c:	f800283a 	ret

10107c20 <__copybits>:
10107c20:	297fffc4 	addi	r5,r5,-1
10107c24:	280fd17a 	srai	r7,r5,5
10107c28:	30c00417 	ldw	r3,16(r6)
10107c2c:	30800504 	addi	r2,r6,20
10107c30:	39c00044 	addi	r7,r7,1
10107c34:	18c7883a 	add	r3,r3,r3
10107c38:	39cf883a 	add	r7,r7,r7
10107c3c:	18c7883a 	add	r3,r3,r3
10107c40:	39cf883a 	add	r7,r7,r7
10107c44:	10c7883a 	add	r3,r2,r3
10107c48:	21cf883a 	add	r7,r4,r7
10107c4c:	10c00d2e 	bgeu	r2,r3,10107c84 <__copybits+0x64>
10107c50:	200b883a 	mov	r5,r4
10107c54:	12000017 	ldw	r8,0(r2)
10107c58:	29400104 	addi	r5,r5,4
10107c5c:	10800104 	addi	r2,r2,4
10107c60:	2a3fff15 	stw	r8,-4(r5)
10107c64:	10fffb36 	bltu	r2,r3,10107c54 <__alt_data_end+0xfffe7c54>
10107c68:	1985c83a 	sub	r2,r3,r6
10107c6c:	10bffac4 	addi	r2,r2,-21
10107c70:	1004d0ba 	srli	r2,r2,2
10107c74:	10800044 	addi	r2,r2,1
10107c78:	1085883a 	add	r2,r2,r2
10107c7c:	1085883a 	add	r2,r2,r2
10107c80:	2089883a 	add	r4,r4,r2
10107c84:	21c0032e 	bgeu	r4,r7,10107c94 <__copybits+0x74>
10107c88:	20000015 	stw	zero,0(r4)
10107c8c:	21000104 	addi	r4,r4,4
10107c90:	21fffd36 	bltu	r4,r7,10107c88 <__alt_data_end+0xfffe7c88>
10107c94:	f800283a 	ret

10107c98 <__any_on>:
10107c98:	20c00417 	ldw	r3,16(r4)
10107c9c:	2805d17a 	srai	r2,r5,5
10107ca0:	21000504 	addi	r4,r4,20
10107ca4:	18800d0e 	bge	r3,r2,10107cdc <__any_on+0x44>
10107ca8:	18c7883a 	add	r3,r3,r3
10107cac:	18c7883a 	add	r3,r3,r3
10107cb0:	20c7883a 	add	r3,r4,r3
10107cb4:	20c0192e 	bgeu	r4,r3,10107d1c <__any_on+0x84>
10107cb8:	18bfff17 	ldw	r2,-4(r3)
10107cbc:	18ffff04 	addi	r3,r3,-4
10107cc0:	1000041e 	bne	r2,zero,10107cd4 <__any_on+0x3c>
10107cc4:	20c0142e 	bgeu	r4,r3,10107d18 <__any_on+0x80>
10107cc8:	18ffff04 	addi	r3,r3,-4
10107ccc:	19400017 	ldw	r5,0(r3)
10107cd0:	283ffc26 	beq	r5,zero,10107cc4 <__alt_data_end+0xfffe7cc4>
10107cd4:	00800044 	movi	r2,1
10107cd8:	f800283a 	ret
10107cdc:	10c00a0e 	bge	r2,r3,10107d08 <__any_on+0x70>
10107ce0:	1085883a 	add	r2,r2,r2
10107ce4:	1085883a 	add	r2,r2,r2
10107ce8:	294007cc 	andi	r5,r5,31
10107cec:	2087883a 	add	r3,r4,r2
10107cf0:	283ff026 	beq	r5,zero,10107cb4 <__alt_data_end+0xfffe7cb4>
10107cf4:	19800017 	ldw	r6,0(r3)
10107cf8:	3144d83a 	srl	r2,r6,r5
10107cfc:	114a983a 	sll	r5,r2,r5
10107d00:	317ff41e 	bne	r6,r5,10107cd4 <__alt_data_end+0xfffe7cd4>
10107d04:	003feb06 	br	10107cb4 <__alt_data_end+0xfffe7cb4>
10107d08:	1085883a 	add	r2,r2,r2
10107d0c:	1085883a 	add	r2,r2,r2
10107d10:	2087883a 	add	r3,r4,r2
10107d14:	003fe706 	br	10107cb4 <__alt_data_end+0xfffe7cb4>
10107d18:	f800283a 	ret
10107d1c:	0005883a 	mov	r2,zero
10107d20:	f800283a 	ret

10107d24 <_realloc_r>:
10107d24:	defff604 	addi	sp,sp,-40
10107d28:	dc800215 	stw	r18,8(sp)
10107d2c:	dfc00915 	stw	ra,36(sp)
10107d30:	df000815 	stw	fp,32(sp)
10107d34:	ddc00715 	stw	r23,28(sp)
10107d38:	dd800615 	stw	r22,24(sp)
10107d3c:	dd400515 	stw	r21,20(sp)
10107d40:	dd000415 	stw	r20,16(sp)
10107d44:	dcc00315 	stw	r19,12(sp)
10107d48:	dc400115 	stw	r17,4(sp)
10107d4c:	dc000015 	stw	r16,0(sp)
10107d50:	3025883a 	mov	r18,r6
10107d54:	2800b726 	beq	r5,zero,10108034 <_realloc_r+0x310>
10107d58:	282b883a 	mov	r21,r5
10107d5c:	2029883a 	mov	r20,r4
10107d60:	010dfac0 	call	1010dfac <__malloc_lock>
10107d64:	a8bfff17 	ldw	r2,-4(r21)
10107d68:	043fff04 	movi	r16,-4
10107d6c:	90c002c4 	addi	r3,r18,11
10107d70:	01000584 	movi	r4,22
10107d74:	acfffe04 	addi	r19,r21,-8
10107d78:	1420703a 	and	r16,r2,r16
10107d7c:	20c0332e 	bgeu	r4,r3,10107e4c <_realloc_r+0x128>
10107d80:	047ffe04 	movi	r17,-8
10107d84:	1c62703a 	and	r17,r3,r17
10107d88:	8807883a 	mov	r3,r17
10107d8c:	88005816 	blt	r17,zero,10107ef0 <_realloc_r+0x1cc>
10107d90:	8c805736 	bltu	r17,r18,10107ef0 <_realloc_r+0x1cc>
10107d94:	80c0300e 	bge	r16,r3,10107e58 <_realloc_r+0x134>
10107d98:	07040474 	movhi	fp,4113
10107d9c:	e7037004 	addi	fp,fp,3520
10107da0:	e1c00217 	ldw	r7,8(fp)
10107da4:	9c09883a 	add	r4,r19,r16
10107da8:	22000117 	ldw	r8,4(r4)
10107dac:	21c06326 	beq	r4,r7,10107f3c <_realloc_r+0x218>
10107db0:	017fff84 	movi	r5,-2
10107db4:	414a703a 	and	r5,r8,r5
10107db8:	214b883a 	add	r5,r4,r5
10107dbc:	29800117 	ldw	r6,4(r5)
10107dc0:	3180004c 	andi	r6,r6,1
10107dc4:	30003f26 	beq	r6,zero,10107ec4 <_realloc_r+0x1a0>
10107dc8:	1080004c 	andi	r2,r2,1
10107dcc:	10008326 	beq	r2,zero,10107fdc <_realloc_r+0x2b8>
10107dd0:	900b883a 	mov	r5,r18
10107dd4:	a009883a 	mov	r4,r20
10107dd8:	01060f80 	call	101060f8 <_malloc_r>
10107ddc:	1025883a 	mov	r18,r2
10107de0:	10011e26 	beq	r2,zero,1010825c <_realloc_r+0x538>
10107de4:	a93fff17 	ldw	r4,-4(r21)
10107de8:	10fffe04 	addi	r3,r2,-8
10107dec:	00bfff84 	movi	r2,-2
10107df0:	2084703a 	and	r2,r4,r2
10107df4:	9885883a 	add	r2,r19,r2
10107df8:	1880ee26 	beq	r3,r2,101081b4 <_realloc_r+0x490>
10107dfc:	81bfff04 	addi	r6,r16,-4
10107e00:	00800904 	movi	r2,36
10107e04:	1180b836 	bltu	r2,r6,101080e8 <_realloc_r+0x3c4>
10107e08:	00c004c4 	movi	r3,19
10107e0c:	19809636 	bltu	r3,r6,10108068 <_realloc_r+0x344>
10107e10:	9005883a 	mov	r2,r18
10107e14:	a807883a 	mov	r3,r21
10107e18:	19000017 	ldw	r4,0(r3)
10107e1c:	11000015 	stw	r4,0(r2)
10107e20:	19000117 	ldw	r4,4(r3)
10107e24:	11000115 	stw	r4,4(r2)
10107e28:	18c00217 	ldw	r3,8(r3)
10107e2c:	10c00215 	stw	r3,8(r2)
10107e30:	a80b883a 	mov	r5,r21
10107e34:	a009883a 	mov	r4,r20
10107e38:	01055000 	call	10105500 <_free_r>
10107e3c:	a009883a 	mov	r4,r20
10107e40:	010dfd00 	call	1010dfd0 <__malloc_unlock>
10107e44:	9005883a 	mov	r2,r18
10107e48:	00001206 	br	10107e94 <_realloc_r+0x170>
10107e4c:	00c00404 	movi	r3,16
10107e50:	1823883a 	mov	r17,r3
10107e54:	003fce06 	br	10107d90 <__alt_data_end+0xfffe7d90>
10107e58:	a825883a 	mov	r18,r21
10107e5c:	8445c83a 	sub	r2,r16,r17
10107e60:	00c003c4 	movi	r3,15
10107e64:	18802636 	bltu	r3,r2,10107f00 <_realloc_r+0x1dc>
10107e68:	99800117 	ldw	r6,4(r19)
10107e6c:	9c07883a 	add	r3,r19,r16
10107e70:	3180004c 	andi	r6,r6,1
10107e74:	3420b03a 	or	r16,r6,r16
10107e78:	9c000115 	stw	r16,4(r19)
10107e7c:	18800117 	ldw	r2,4(r3)
10107e80:	10800054 	ori	r2,r2,1
10107e84:	18800115 	stw	r2,4(r3)
10107e88:	a009883a 	mov	r4,r20
10107e8c:	010dfd00 	call	1010dfd0 <__malloc_unlock>
10107e90:	9005883a 	mov	r2,r18
10107e94:	dfc00917 	ldw	ra,36(sp)
10107e98:	df000817 	ldw	fp,32(sp)
10107e9c:	ddc00717 	ldw	r23,28(sp)
10107ea0:	dd800617 	ldw	r22,24(sp)
10107ea4:	dd400517 	ldw	r21,20(sp)
10107ea8:	dd000417 	ldw	r20,16(sp)
10107eac:	dcc00317 	ldw	r19,12(sp)
10107eb0:	dc800217 	ldw	r18,8(sp)
10107eb4:	dc400117 	ldw	r17,4(sp)
10107eb8:	dc000017 	ldw	r16,0(sp)
10107ebc:	dec00a04 	addi	sp,sp,40
10107ec0:	f800283a 	ret
10107ec4:	017fff04 	movi	r5,-4
10107ec8:	414a703a 	and	r5,r8,r5
10107ecc:	814d883a 	add	r6,r16,r5
10107ed0:	30c01f16 	blt	r6,r3,10107f50 <_realloc_r+0x22c>
10107ed4:	20800317 	ldw	r2,12(r4)
10107ed8:	20c00217 	ldw	r3,8(r4)
10107edc:	a825883a 	mov	r18,r21
10107ee0:	3021883a 	mov	r16,r6
10107ee4:	18800315 	stw	r2,12(r3)
10107ee8:	10c00215 	stw	r3,8(r2)
10107eec:	003fdb06 	br	10107e5c <__alt_data_end+0xfffe7e5c>
10107ef0:	00800304 	movi	r2,12
10107ef4:	a0800015 	stw	r2,0(r20)
10107ef8:	0005883a 	mov	r2,zero
10107efc:	003fe506 	br	10107e94 <__alt_data_end+0xfffe7e94>
10107f00:	98c00117 	ldw	r3,4(r19)
10107f04:	9c4b883a 	add	r5,r19,r17
10107f08:	11000054 	ori	r4,r2,1
10107f0c:	18c0004c 	andi	r3,r3,1
10107f10:	1c62b03a 	or	r17,r3,r17
10107f14:	9c400115 	stw	r17,4(r19)
10107f18:	29000115 	stw	r4,4(r5)
10107f1c:	2885883a 	add	r2,r5,r2
10107f20:	10c00117 	ldw	r3,4(r2)
10107f24:	29400204 	addi	r5,r5,8
10107f28:	a009883a 	mov	r4,r20
10107f2c:	18c00054 	ori	r3,r3,1
10107f30:	10c00115 	stw	r3,4(r2)
10107f34:	01055000 	call	10105500 <_free_r>
10107f38:	003fd306 	br	10107e88 <__alt_data_end+0xfffe7e88>
10107f3c:	017fff04 	movi	r5,-4
10107f40:	414a703a 	and	r5,r8,r5
10107f44:	89800404 	addi	r6,r17,16
10107f48:	8151883a 	add	r8,r16,r5
10107f4c:	4180590e 	bge	r8,r6,101080b4 <_realloc_r+0x390>
10107f50:	1080004c 	andi	r2,r2,1
10107f54:	103f9e1e 	bne	r2,zero,10107dd0 <__alt_data_end+0xfffe7dd0>
10107f58:	adbffe17 	ldw	r22,-8(r21)
10107f5c:	00bfff04 	movi	r2,-4
10107f60:	9dadc83a 	sub	r22,r19,r22
10107f64:	b1800117 	ldw	r6,4(r22)
10107f68:	3084703a 	and	r2,r6,r2
10107f6c:	20002026 	beq	r4,zero,10107ff0 <_realloc_r+0x2cc>
10107f70:	80af883a 	add	r23,r16,r2
10107f74:	b96f883a 	add	r23,r23,r5
10107f78:	21c05f26 	beq	r4,r7,101080f8 <_realloc_r+0x3d4>
10107f7c:	b8c01c16 	blt	r23,r3,10107ff0 <_realloc_r+0x2cc>
10107f80:	20800317 	ldw	r2,12(r4)
10107f84:	20c00217 	ldw	r3,8(r4)
10107f88:	81bfff04 	addi	r6,r16,-4
10107f8c:	01000904 	movi	r4,36
10107f90:	18800315 	stw	r2,12(r3)
10107f94:	10c00215 	stw	r3,8(r2)
10107f98:	b0c00217 	ldw	r3,8(r22)
10107f9c:	b0800317 	ldw	r2,12(r22)
10107fa0:	b4800204 	addi	r18,r22,8
10107fa4:	18800315 	stw	r2,12(r3)
10107fa8:	10c00215 	stw	r3,8(r2)
10107fac:	21801b36 	bltu	r4,r6,1010801c <_realloc_r+0x2f8>
10107fb0:	008004c4 	movi	r2,19
10107fb4:	1180352e 	bgeu	r2,r6,1010808c <_realloc_r+0x368>
10107fb8:	a8800017 	ldw	r2,0(r21)
10107fbc:	b0800215 	stw	r2,8(r22)
10107fc0:	a8800117 	ldw	r2,4(r21)
10107fc4:	b0800315 	stw	r2,12(r22)
10107fc8:	008006c4 	movi	r2,27
10107fcc:	11807f36 	bltu	r2,r6,101081cc <_realloc_r+0x4a8>
10107fd0:	b0800404 	addi	r2,r22,16
10107fd4:	ad400204 	addi	r21,r21,8
10107fd8:	00002d06 	br	10108090 <_realloc_r+0x36c>
10107fdc:	adbffe17 	ldw	r22,-8(r21)
10107fe0:	00bfff04 	movi	r2,-4
10107fe4:	9dadc83a 	sub	r22,r19,r22
10107fe8:	b1000117 	ldw	r4,4(r22)
10107fec:	2084703a 	and	r2,r4,r2
10107ff0:	b03f7726 	beq	r22,zero,10107dd0 <__alt_data_end+0xfffe7dd0>
10107ff4:	80af883a 	add	r23,r16,r2
10107ff8:	b8ff7516 	blt	r23,r3,10107dd0 <__alt_data_end+0xfffe7dd0>
10107ffc:	b0800317 	ldw	r2,12(r22)
10108000:	b0c00217 	ldw	r3,8(r22)
10108004:	81bfff04 	addi	r6,r16,-4
10108008:	01000904 	movi	r4,36
1010800c:	18800315 	stw	r2,12(r3)
10108010:	10c00215 	stw	r3,8(r2)
10108014:	b4800204 	addi	r18,r22,8
10108018:	21bfe52e 	bgeu	r4,r6,10107fb0 <__alt_data_end+0xfffe7fb0>
1010801c:	a80b883a 	mov	r5,r21
10108020:	9009883a 	mov	r4,r18
10108024:	01069e80 	call	101069e8 <memmove>
10108028:	b821883a 	mov	r16,r23
1010802c:	b027883a 	mov	r19,r22
10108030:	003f8a06 	br	10107e5c <__alt_data_end+0xfffe7e5c>
10108034:	300b883a 	mov	r5,r6
10108038:	dfc00917 	ldw	ra,36(sp)
1010803c:	df000817 	ldw	fp,32(sp)
10108040:	ddc00717 	ldw	r23,28(sp)
10108044:	dd800617 	ldw	r22,24(sp)
10108048:	dd400517 	ldw	r21,20(sp)
1010804c:	dd000417 	ldw	r20,16(sp)
10108050:	dcc00317 	ldw	r19,12(sp)
10108054:	dc800217 	ldw	r18,8(sp)
10108058:	dc400117 	ldw	r17,4(sp)
1010805c:	dc000017 	ldw	r16,0(sp)
10108060:	dec00a04 	addi	sp,sp,40
10108064:	01060f81 	jmpi	101060f8 <_malloc_r>
10108068:	a8c00017 	ldw	r3,0(r21)
1010806c:	90c00015 	stw	r3,0(r18)
10108070:	a8c00117 	ldw	r3,4(r21)
10108074:	90c00115 	stw	r3,4(r18)
10108078:	00c006c4 	movi	r3,27
1010807c:	19804536 	bltu	r3,r6,10108194 <_realloc_r+0x470>
10108080:	90800204 	addi	r2,r18,8
10108084:	a8c00204 	addi	r3,r21,8
10108088:	003f6306 	br	10107e18 <__alt_data_end+0xfffe7e18>
1010808c:	9005883a 	mov	r2,r18
10108090:	a8c00017 	ldw	r3,0(r21)
10108094:	b821883a 	mov	r16,r23
10108098:	b027883a 	mov	r19,r22
1010809c:	10c00015 	stw	r3,0(r2)
101080a0:	a8c00117 	ldw	r3,4(r21)
101080a4:	10c00115 	stw	r3,4(r2)
101080a8:	a8c00217 	ldw	r3,8(r21)
101080ac:	10c00215 	stw	r3,8(r2)
101080b0:	003f6a06 	br	10107e5c <__alt_data_end+0xfffe7e5c>
101080b4:	9c67883a 	add	r19,r19,r17
101080b8:	4445c83a 	sub	r2,r8,r17
101080bc:	e4c00215 	stw	r19,8(fp)
101080c0:	10800054 	ori	r2,r2,1
101080c4:	98800115 	stw	r2,4(r19)
101080c8:	a8bfff17 	ldw	r2,-4(r21)
101080cc:	a009883a 	mov	r4,r20
101080d0:	1080004c 	andi	r2,r2,1
101080d4:	1462b03a 	or	r17,r2,r17
101080d8:	ac7fff15 	stw	r17,-4(r21)
101080dc:	010dfd00 	call	1010dfd0 <__malloc_unlock>
101080e0:	a805883a 	mov	r2,r21
101080e4:	003f6b06 	br	10107e94 <__alt_data_end+0xfffe7e94>
101080e8:	a80b883a 	mov	r5,r21
101080ec:	9009883a 	mov	r4,r18
101080f0:	01069e80 	call	101069e8 <memmove>
101080f4:	003f4e06 	br	10107e30 <__alt_data_end+0xfffe7e30>
101080f8:	89000404 	addi	r4,r17,16
101080fc:	b93fbc16 	blt	r23,r4,10107ff0 <__alt_data_end+0xfffe7ff0>
10108100:	b0800317 	ldw	r2,12(r22)
10108104:	b0c00217 	ldw	r3,8(r22)
10108108:	81bfff04 	addi	r6,r16,-4
1010810c:	01000904 	movi	r4,36
10108110:	18800315 	stw	r2,12(r3)
10108114:	10c00215 	stw	r3,8(r2)
10108118:	b4800204 	addi	r18,r22,8
1010811c:	21804336 	bltu	r4,r6,1010822c <_realloc_r+0x508>
10108120:	008004c4 	movi	r2,19
10108124:	11803f2e 	bgeu	r2,r6,10108224 <_realloc_r+0x500>
10108128:	a8800017 	ldw	r2,0(r21)
1010812c:	b0800215 	stw	r2,8(r22)
10108130:	a8800117 	ldw	r2,4(r21)
10108134:	b0800315 	stw	r2,12(r22)
10108138:	008006c4 	movi	r2,27
1010813c:	11803f36 	bltu	r2,r6,1010823c <_realloc_r+0x518>
10108140:	b0800404 	addi	r2,r22,16
10108144:	ad400204 	addi	r21,r21,8
10108148:	a8c00017 	ldw	r3,0(r21)
1010814c:	10c00015 	stw	r3,0(r2)
10108150:	a8c00117 	ldw	r3,4(r21)
10108154:	10c00115 	stw	r3,4(r2)
10108158:	a8c00217 	ldw	r3,8(r21)
1010815c:	10c00215 	stw	r3,8(r2)
10108160:	b447883a 	add	r3,r22,r17
10108164:	bc45c83a 	sub	r2,r23,r17
10108168:	e0c00215 	stw	r3,8(fp)
1010816c:	10800054 	ori	r2,r2,1
10108170:	18800115 	stw	r2,4(r3)
10108174:	b0800117 	ldw	r2,4(r22)
10108178:	a009883a 	mov	r4,r20
1010817c:	1080004c 	andi	r2,r2,1
10108180:	1462b03a 	or	r17,r2,r17
10108184:	b4400115 	stw	r17,4(r22)
10108188:	010dfd00 	call	1010dfd0 <__malloc_unlock>
1010818c:	9005883a 	mov	r2,r18
10108190:	003f4006 	br	10107e94 <__alt_data_end+0xfffe7e94>
10108194:	a8c00217 	ldw	r3,8(r21)
10108198:	90c00215 	stw	r3,8(r18)
1010819c:	a8c00317 	ldw	r3,12(r21)
101081a0:	90c00315 	stw	r3,12(r18)
101081a4:	30801126 	beq	r6,r2,101081ec <_realloc_r+0x4c8>
101081a8:	90800404 	addi	r2,r18,16
101081ac:	a8c00404 	addi	r3,r21,16
101081b0:	003f1906 	br	10107e18 <__alt_data_end+0xfffe7e18>
101081b4:	90ffff17 	ldw	r3,-4(r18)
101081b8:	00bfff04 	movi	r2,-4
101081bc:	a825883a 	mov	r18,r21
101081c0:	1884703a 	and	r2,r3,r2
101081c4:	80a1883a 	add	r16,r16,r2
101081c8:	003f2406 	br	10107e5c <__alt_data_end+0xfffe7e5c>
101081cc:	a8800217 	ldw	r2,8(r21)
101081d0:	b0800415 	stw	r2,16(r22)
101081d4:	a8800317 	ldw	r2,12(r21)
101081d8:	b0800515 	stw	r2,20(r22)
101081dc:	31000a26 	beq	r6,r4,10108208 <_realloc_r+0x4e4>
101081e0:	b0800604 	addi	r2,r22,24
101081e4:	ad400404 	addi	r21,r21,16
101081e8:	003fa906 	br	10108090 <__alt_data_end+0xfffe8090>
101081ec:	a9000417 	ldw	r4,16(r21)
101081f0:	90800604 	addi	r2,r18,24
101081f4:	a8c00604 	addi	r3,r21,24
101081f8:	91000415 	stw	r4,16(r18)
101081fc:	a9000517 	ldw	r4,20(r21)
10108200:	91000515 	stw	r4,20(r18)
10108204:	003f0406 	br	10107e18 <__alt_data_end+0xfffe7e18>
10108208:	a8c00417 	ldw	r3,16(r21)
1010820c:	ad400604 	addi	r21,r21,24
10108210:	b0800804 	addi	r2,r22,32
10108214:	b0c00615 	stw	r3,24(r22)
10108218:	a8ffff17 	ldw	r3,-4(r21)
1010821c:	b0c00715 	stw	r3,28(r22)
10108220:	003f9b06 	br	10108090 <__alt_data_end+0xfffe8090>
10108224:	9005883a 	mov	r2,r18
10108228:	003fc706 	br	10108148 <__alt_data_end+0xfffe8148>
1010822c:	a80b883a 	mov	r5,r21
10108230:	9009883a 	mov	r4,r18
10108234:	01069e80 	call	101069e8 <memmove>
10108238:	003fc906 	br	10108160 <__alt_data_end+0xfffe8160>
1010823c:	a8800217 	ldw	r2,8(r21)
10108240:	b0800415 	stw	r2,16(r22)
10108244:	a8800317 	ldw	r2,12(r21)
10108248:	b0800515 	stw	r2,20(r22)
1010824c:	31000726 	beq	r6,r4,1010826c <_realloc_r+0x548>
10108250:	b0800604 	addi	r2,r22,24
10108254:	ad400404 	addi	r21,r21,16
10108258:	003fbb06 	br	10108148 <__alt_data_end+0xfffe8148>
1010825c:	a009883a 	mov	r4,r20
10108260:	010dfd00 	call	1010dfd0 <__malloc_unlock>
10108264:	0005883a 	mov	r2,zero
10108268:	003f0a06 	br	10107e94 <__alt_data_end+0xfffe7e94>
1010826c:	a8c00417 	ldw	r3,16(r21)
10108270:	ad400604 	addi	r21,r21,24
10108274:	b0800804 	addi	r2,r22,32
10108278:	b0c00615 	stw	r3,24(r22)
1010827c:	a8ffff17 	ldw	r3,-4(r21)
10108280:	b0c00715 	stw	r3,28(r22)
10108284:	003fb006 	br	10108148 <__alt_data_end+0xfffe8148>

10108288 <__fpclassifyd>:
10108288:	00a00034 	movhi	r2,32768
1010828c:	10bfffc4 	addi	r2,r2,-1
10108290:	2884703a 	and	r2,r5,r2
10108294:	10000726 	beq	r2,zero,101082b4 <__fpclassifyd+0x2c>
10108298:	00fffc34 	movhi	r3,65520
1010829c:	019ff834 	movhi	r6,32736
101082a0:	28c7883a 	add	r3,r5,r3
101082a4:	31bfffc4 	addi	r6,r6,-1
101082a8:	30c00536 	bltu	r6,r3,101082c0 <__fpclassifyd+0x38>
101082ac:	00800104 	movi	r2,4
101082b0:	f800283a 	ret
101082b4:	2000021e 	bne	r4,zero,101082c0 <__fpclassifyd+0x38>
101082b8:	00800084 	movi	r2,2
101082bc:	f800283a 	ret
101082c0:	00dffc34 	movhi	r3,32752
101082c4:	019ff834 	movhi	r6,32736
101082c8:	28cb883a 	add	r5,r5,r3
101082cc:	31bfffc4 	addi	r6,r6,-1
101082d0:	317ff62e 	bgeu	r6,r5,101082ac <__alt_data_end+0xfffe82ac>
101082d4:	01400434 	movhi	r5,16
101082d8:	297fffc4 	addi	r5,r5,-1
101082dc:	28800236 	bltu	r5,r2,101082e8 <__fpclassifyd+0x60>
101082e0:	008000c4 	movi	r2,3
101082e4:	f800283a 	ret
101082e8:	10c00226 	beq	r2,r3,101082f4 <__fpclassifyd+0x6c>
101082ec:	0005883a 	mov	r2,zero
101082f0:	f800283a 	ret
101082f4:	2005003a 	cmpeq	r2,r4,zero
101082f8:	f800283a 	ret

101082fc <_sbrk_r>:
101082fc:	defffd04 	addi	sp,sp,-12
10108300:	dc000015 	stw	r16,0(sp)
10108304:	04040474 	movhi	r16,4113
10108308:	dc400115 	stw	r17,4(sp)
1010830c:	840ffd04 	addi	r16,r16,16372
10108310:	2023883a 	mov	r17,r4
10108314:	2809883a 	mov	r4,r5
10108318:	dfc00215 	stw	ra,8(sp)
1010831c:	80000015 	stw	zero,0(r16)
10108320:	010e1b80 	call	1010e1b8 <sbrk>
10108324:	00ffffc4 	movi	r3,-1
10108328:	10c00526 	beq	r2,r3,10108340 <_sbrk_r+0x44>
1010832c:	dfc00217 	ldw	ra,8(sp)
10108330:	dc400117 	ldw	r17,4(sp)
10108334:	dc000017 	ldw	r16,0(sp)
10108338:	dec00304 	addi	sp,sp,12
1010833c:	f800283a 	ret
10108340:	80c00017 	ldw	r3,0(r16)
10108344:	183ff926 	beq	r3,zero,1010832c <__alt_data_end+0xfffe832c>
10108348:	88c00015 	stw	r3,0(r17)
1010834c:	003ff706 	br	1010832c <__alt_data_end+0xfffe832c>

10108350 <__sread>:
10108350:	defffe04 	addi	sp,sp,-8
10108354:	dc000015 	stw	r16,0(sp)
10108358:	2821883a 	mov	r16,r5
1010835c:	2940038f 	ldh	r5,14(r5)
10108360:	dfc00115 	stw	ra,4(sp)
10108364:	010a20c0 	call	1010a20c <_read_r>
10108368:	10000716 	blt	r2,zero,10108388 <__sread+0x38>
1010836c:	80c01417 	ldw	r3,80(r16)
10108370:	1887883a 	add	r3,r3,r2
10108374:	80c01415 	stw	r3,80(r16)
10108378:	dfc00117 	ldw	ra,4(sp)
1010837c:	dc000017 	ldw	r16,0(sp)
10108380:	dec00204 	addi	sp,sp,8
10108384:	f800283a 	ret
10108388:	80c0030b 	ldhu	r3,12(r16)
1010838c:	18fbffcc 	andi	r3,r3,61439
10108390:	80c0030d 	sth	r3,12(r16)
10108394:	dfc00117 	ldw	ra,4(sp)
10108398:	dc000017 	ldw	r16,0(sp)
1010839c:	dec00204 	addi	sp,sp,8
101083a0:	f800283a 	ret

101083a4 <__seofread>:
101083a4:	0005883a 	mov	r2,zero
101083a8:	f800283a 	ret

101083ac <__swrite>:
101083ac:	2880030b 	ldhu	r2,12(r5)
101083b0:	defffb04 	addi	sp,sp,-20
101083b4:	dcc00315 	stw	r19,12(sp)
101083b8:	dc800215 	stw	r18,8(sp)
101083bc:	dc400115 	stw	r17,4(sp)
101083c0:	dc000015 	stw	r16,0(sp)
101083c4:	dfc00415 	stw	ra,16(sp)
101083c8:	10c0400c 	andi	r3,r2,256
101083cc:	2821883a 	mov	r16,r5
101083d0:	2023883a 	mov	r17,r4
101083d4:	3025883a 	mov	r18,r6
101083d8:	3827883a 	mov	r19,r7
101083dc:	18000526 	beq	r3,zero,101083f4 <__swrite+0x48>
101083e0:	2940038f 	ldh	r5,14(r5)
101083e4:	01c00084 	movi	r7,2
101083e8:	000d883a 	mov	r6,zero
101083ec:	010a1ac0 	call	1010a1ac <_lseek_r>
101083f0:	8080030b 	ldhu	r2,12(r16)
101083f4:	8140038f 	ldh	r5,14(r16)
101083f8:	10bbffcc 	andi	r2,r2,61439
101083fc:	980f883a 	mov	r7,r19
10108400:	900d883a 	mov	r6,r18
10108404:	8809883a 	mov	r4,r17
10108408:	8080030d 	sth	r2,12(r16)
1010840c:	dfc00417 	ldw	ra,16(sp)
10108410:	dcc00317 	ldw	r19,12(sp)
10108414:	dc800217 	ldw	r18,8(sp)
10108418:	dc400117 	ldw	r17,4(sp)
1010841c:	dc000017 	ldw	r16,0(sp)
10108420:	dec00504 	addi	sp,sp,20
10108424:	0109c601 	jmpi	10109c60 <_write_r>

10108428 <__sseek>:
10108428:	defffe04 	addi	sp,sp,-8
1010842c:	dc000015 	stw	r16,0(sp)
10108430:	2821883a 	mov	r16,r5
10108434:	2940038f 	ldh	r5,14(r5)
10108438:	dfc00115 	stw	ra,4(sp)
1010843c:	010a1ac0 	call	1010a1ac <_lseek_r>
10108440:	00ffffc4 	movi	r3,-1
10108444:	10c00826 	beq	r2,r3,10108468 <__sseek+0x40>
10108448:	80c0030b 	ldhu	r3,12(r16)
1010844c:	80801415 	stw	r2,80(r16)
10108450:	18c40014 	ori	r3,r3,4096
10108454:	80c0030d 	sth	r3,12(r16)
10108458:	dfc00117 	ldw	ra,4(sp)
1010845c:	dc000017 	ldw	r16,0(sp)
10108460:	dec00204 	addi	sp,sp,8
10108464:	f800283a 	ret
10108468:	80c0030b 	ldhu	r3,12(r16)
1010846c:	18fbffcc 	andi	r3,r3,61439
10108470:	80c0030d 	sth	r3,12(r16)
10108474:	dfc00117 	ldw	ra,4(sp)
10108478:	dc000017 	ldw	r16,0(sp)
1010847c:	dec00204 	addi	sp,sp,8
10108480:	f800283a 	ret

10108484 <__sclose>:
10108484:	2940038f 	ldh	r5,14(r5)
10108488:	0109cc01 	jmpi	10109cc0 <_close_r>

1010848c <strcmp>:
1010848c:	2144b03a 	or	r2,r4,r5
10108490:	108000cc 	andi	r2,r2,3
10108494:	1000171e 	bne	r2,zero,101084f4 <strcmp+0x68>
10108498:	20800017 	ldw	r2,0(r4)
1010849c:	28c00017 	ldw	r3,0(r5)
101084a0:	10c0141e 	bne	r2,r3,101084f4 <strcmp+0x68>
101084a4:	027fbff4 	movhi	r9,65279
101084a8:	4a7fbfc4 	addi	r9,r9,-257
101084ac:	0086303a 	nor	r3,zero,r2
101084b0:	02202074 	movhi	r8,32897
101084b4:	1245883a 	add	r2,r2,r9
101084b8:	42202004 	addi	r8,r8,-32640
101084bc:	10c4703a 	and	r2,r2,r3
101084c0:	1204703a 	and	r2,r2,r8
101084c4:	10000226 	beq	r2,zero,101084d0 <strcmp+0x44>
101084c8:	00002306 	br	10108558 <strcmp+0xcc>
101084cc:	1000221e 	bne	r2,zero,10108558 <strcmp+0xcc>
101084d0:	21000104 	addi	r4,r4,4
101084d4:	20c00017 	ldw	r3,0(r4)
101084d8:	29400104 	addi	r5,r5,4
101084dc:	29800017 	ldw	r6,0(r5)
101084e0:	1a4f883a 	add	r7,r3,r9
101084e4:	00c4303a 	nor	r2,zero,r3
101084e8:	3884703a 	and	r2,r7,r2
101084ec:	1204703a 	and	r2,r2,r8
101084f0:	19bff626 	beq	r3,r6,101084cc <__alt_data_end+0xfffe84cc>
101084f4:	20800003 	ldbu	r2,0(r4)
101084f8:	10c03fcc 	andi	r3,r2,255
101084fc:	18c0201c 	xori	r3,r3,128
10108500:	18ffe004 	addi	r3,r3,-128
10108504:	18000c26 	beq	r3,zero,10108538 <strcmp+0xac>
10108508:	29800007 	ldb	r6,0(r5)
1010850c:	19800326 	beq	r3,r6,1010851c <strcmp+0x90>
10108510:	00001306 	br	10108560 <strcmp+0xd4>
10108514:	29800007 	ldb	r6,0(r5)
10108518:	11800b1e 	bne	r2,r6,10108548 <strcmp+0xbc>
1010851c:	21000044 	addi	r4,r4,1
10108520:	20c00003 	ldbu	r3,0(r4)
10108524:	29400044 	addi	r5,r5,1
10108528:	18803fcc 	andi	r2,r3,255
1010852c:	1080201c 	xori	r2,r2,128
10108530:	10bfe004 	addi	r2,r2,-128
10108534:	103ff71e 	bne	r2,zero,10108514 <__alt_data_end+0xfffe8514>
10108538:	0007883a 	mov	r3,zero
1010853c:	28800003 	ldbu	r2,0(r5)
10108540:	1885c83a 	sub	r2,r3,r2
10108544:	f800283a 	ret
10108548:	28800003 	ldbu	r2,0(r5)
1010854c:	18c03fcc 	andi	r3,r3,255
10108550:	1885c83a 	sub	r2,r3,r2
10108554:	f800283a 	ret
10108558:	0005883a 	mov	r2,zero
1010855c:	f800283a 	ret
10108560:	10c03fcc 	andi	r3,r2,255
10108564:	003ff506 	br	1010853c <__alt_data_end+0xfffe853c>

10108568 <__sprint_r.part.0>:
10108568:	28801917 	ldw	r2,100(r5)
1010856c:	defff604 	addi	sp,sp,-40
10108570:	dd400515 	stw	r21,20(sp)
10108574:	dfc00915 	stw	ra,36(sp)
10108578:	df000815 	stw	fp,32(sp)
1010857c:	ddc00715 	stw	r23,28(sp)
10108580:	dd800615 	stw	r22,24(sp)
10108584:	dd000415 	stw	r20,16(sp)
10108588:	dcc00315 	stw	r19,12(sp)
1010858c:	dc800215 	stw	r18,8(sp)
10108590:	dc400115 	stw	r17,4(sp)
10108594:	dc000015 	stw	r16,0(sp)
10108598:	1088000c 	andi	r2,r2,8192
1010859c:	302b883a 	mov	r21,r6
101085a0:	10002e26 	beq	r2,zero,1010865c <__sprint_r.part.0+0xf4>
101085a4:	30800217 	ldw	r2,8(r6)
101085a8:	35800017 	ldw	r22,0(r6)
101085ac:	10002926 	beq	r2,zero,10108654 <__sprint_r.part.0+0xec>
101085b0:	2827883a 	mov	r19,r5
101085b4:	2029883a 	mov	r20,r4
101085b8:	b5c00104 	addi	r23,r22,4
101085bc:	04bfffc4 	movi	r18,-1
101085c0:	bc400017 	ldw	r17,0(r23)
101085c4:	b4000017 	ldw	r16,0(r22)
101085c8:	0039883a 	mov	fp,zero
101085cc:	8822d0ba 	srli	r17,r17,2
101085d0:	8800031e 	bne	r17,zero,101085e0 <__sprint_r.part.0+0x78>
101085d4:	00001806 	br	10108638 <__sprint_r.part.0+0xd0>
101085d8:	84000104 	addi	r16,r16,4
101085dc:	8f001526 	beq	r17,fp,10108634 <__sprint_r.part.0+0xcc>
101085e0:	81400017 	ldw	r5,0(r16)
101085e4:	980d883a 	mov	r6,r19
101085e8:	a009883a 	mov	r4,r20
101085ec:	010a0580 	call	1010a058 <_fputwc_r>
101085f0:	e7000044 	addi	fp,fp,1
101085f4:	14bff81e 	bne	r2,r18,101085d8 <__alt_data_end+0xfffe85d8>
101085f8:	9005883a 	mov	r2,r18
101085fc:	a8000215 	stw	zero,8(r21)
10108600:	a8000115 	stw	zero,4(r21)
10108604:	dfc00917 	ldw	ra,36(sp)
10108608:	df000817 	ldw	fp,32(sp)
1010860c:	ddc00717 	ldw	r23,28(sp)
10108610:	dd800617 	ldw	r22,24(sp)
10108614:	dd400517 	ldw	r21,20(sp)
10108618:	dd000417 	ldw	r20,16(sp)
1010861c:	dcc00317 	ldw	r19,12(sp)
10108620:	dc800217 	ldw	r18,8(sp)
10108624:	dc400117 	ldw	r17,4(sp)
10108628:	dc000017 	ldw	r16,0(sp)
1010862c:	dec00a04 	addi	sp,sp,40
10108630:	f800283a 	ret
10108634:	a8800217 	ldw	r2,8(r21)
10108638:	8c63883a 	add	r17,r17,r17
1010863c:	8c63883a 	add	r17,r17,r17
10108640:	1445c83a 	sub	r2,r2,r17
10108644:	a8800215 	stw	r2,8(r21)
10108648:	b5800204 	addi	r22,r22,8
1010864c:	bdc00204 	addi	r23,r23,8
10108650:	103fdb1e 	bne	r2,zero,101085c0 <__alt_data_end+0xfffe85c0>
10108654:	0005883a 	mov	r2,zero
10108658:	003fe806 	br	101085fc <__alt_data_end+0xfffe85fc>
1010865c:	01058100 	call	10105810 <__sfvwrite_r>
10108660:	003fe606 	br	101085fc <__alt_data_end+0xfffe85fc>

10108664 <__sprint_r>:
10108664:	30c00217 	ldw	r3,8(r6)
10108668:	18000126 	beq	r3,zero,10108670 <__sprint_r+0xc>
1010866c:	01085681 	jmpi	10108568 <__sprint_r.part.0>
10108670:	30000115 	stw	zero,4(r6)
10108674:	0005883a 	mov	r2,zero
10108678:	f800283a 	ret

1010867c <___vfiprintf_internal_r>:
1010867c:	deffca04 	addi	sp,sp,-216
10108680:	dd403115 	stw	r21,196(sp)
10108684:	dfc03515 	stw	ra,212(sp)
10108688:	df003415 	stw	fp,208(sp)
1010868c:	ddc03315 	stw	r23,204(sp)
10108690:	dd803215 	stw	r22,200(sp)
10108694:	dd003015 	stw	r20,192(sp)
10108698:	dcc02f15 	stw	r19,188(sp)
1010869c:	dc802e15 	stw	r18,184(sp)
101086a0:	dc402d15 	stw	r17,180(sp)
101086a4:	dc002c15 	stw	r16,176(sp)
101086a8:	d9002115 	stw	r4,132(sp)
101086ac:	d9402015 	stw	r5,128(sp)
101086b0:	d9c02215 	stw	r7,136(sp)
101086b4:	302b883a 	mov	r21,r6
101086b8:	20000226 	beq	r4,zero,101086c4 <___vfiprintf_internal_r+0x48>
101086bc:	20800e17 	ldw	r2,56(r4)
101086c0:	1000cf26 	beq	r2,zero,10108a00 <___vfiprintf_internal_r+0x384>
101086c4:	d8c02017 	ldw	r3,128(sp)
101086c8:	1880030b 	ldhu	r2,12(r3)
101086cc:	10c8000c 	andi	r3,r2,8192
101086d0:	1800071e 	bne	r3,zero,101086f0 <___vfiprintf_internal_r+0x74>
101086d4:	d9402017 	ldw	r5,128(sp)
101086d8:	00f7ffc4 	movi	r3,-8193
101086dc:	10880014 	ori	r2,r2,8192
101086e0:	29001917 	ldw	r4,100(r5)
101086e4:	2880030d 	sth	r2,12(r5)
101086e8:	20c6703a 	and	r3,r4,r3
101086ec:	28c01915 	stw	r3,100(r5)
101086f0:	10c0020c 	andi	r3,r2,8
101086f4:	1800a526 	beq	r3,zero,1010898c <___vfiprintf_internal_r+0x310>
101086f8:	d9002017 	ldw	r4,128(sp)
101086fc:	20c00417 	ldw	r3,16(r4)
10108700:	1800a226 	beq	r3,zero,1010898c <___vfiprintf_internal_r+0x310>
10108704:	1080068c 	andi	r2,r2,26
10108708:	00c00284 	movi	r3,10
1010870c:	10c0a826 	beq	r2,r3,101089b0 <___vfiprintf_internal_r+0x334>
10108710:	d9001a04 	addi	r4,sp,104
10108714:	d94019c4 	addi	r5,sp,103
10108718:	04840474 	movhi	r18,4113
1010871c:	2145c83a 	sub	r2,r4,r5
10108720:	9481f104 	addi	r18,r18,1988
10108724:	d9001e15 	stw	r4,120(sp)
10108728:	d9401f15 	stw	r5,124(sp)
1010872c:	dec01a15 	stw	sp,104(sp)
10108730:	d8001c15 	stw	zero,112(sp)
10108734:	d8001b15 	stw	zero,108(sp)
10108738:	d811883a 	mov	r8,sp
1010873c:	d8002615 	stw	zero,152(sp)
10108740:	d8002415 	stw	zero,144(sp)
10108744:	d8802815 	stw	r2,160(sp)
10108748:	a82d883a 	mov	r22,r21
1010874c:	b0800007 	ldb	r2,0(r22)
10108750:	10040d26 	beq	r2,zero,10109788 <___vfiprintf_internal_r+0x110c>
10108754:	00c00944 	movi	r3,37
10108758:	b029883a 	mov	r20,r22
1010875c:	10c0021e 	bne	r2,r3,10108768 <___vfiprintf_internal_r+0xec>
10108760:	00001606 	br	101087bc <___vfiprintf_internal_r+0x140>
10108764:	10c00326 	beq	r2,r3,10108774 <___vfiprintf_internal_r+0xf8>
10108768:	a5000044 	addi	r20,r20,1
1010876c:	a0800007 	ldb	r2,0(r20)
10108770:	103ffc1e 	bne	r2,zero,10108764 <__alt_data_end+0xfffe8764>
10108774:	a5a1c83a 	sub	r16,r20,r22
10108778:	80001026 	beq	r16,zero,101087bc <___vfiprintf_internal_r+0x140>
1010877c:	d8c01c17 	ldw	r3,112(sp)
10108780:	d8801b17 	ldw	r2,108(sp)
10108784:	45800015 	stw	r22,0(r8)
10108788:	80c7883a 	add	r3,r16,r3
1010878c:	10800044 	addi	r2,r2,1
10108790:	44000115 	stw	r16,4(r8)
10108794:	d8c01c15 	stw	r3,112(sp)
10108798:	d8801b15 	stw	r2,108(sp)
1010879c:	010001c4 	movi	r4,7
101087a0:	2080750e 	bge	r4,r2,10108978 <___vfiprintf_internal_r+0x2fc>
101087a4:	1803951e 	bne	r3,zero,101095fc <___vfiprintf_internal_r+0xf80>
101087a8:	d8c02417 	ldw	r3,144(sp)
101087ac:	d8001b15 	stw	zero,108(sp)
101087b0:	d811883a 	mov	r8,sp
101087b4:	1c07883a 	add	r3,r3,r16
101087b8:	d8c02415 	stw	r3,144(sp)
101087bc:	a0800007 	ldb	r2,0(r20)
101087c0:	1002e026 	beq	r2,zero,10109344 <___vfiprintf_internal_r+0xcc8>
101087c4:	a5800044 	addi	r22,r20,1
101087c8:	a0c00047 	ldb	r3,1(r20)
101087cc:	d8001d85 	stb	zero,118(sp)
101087d0:	0027883a 	mov	r19,zero
101087d4:	d8002305 	stb	zero,140(sp)
101087d8:	043fffc4 	movi	r16,-1
101087dc:	d8002515 	stw	zero,148(sp)
101087e0:	0023883a 	mov	r17,zero
101087e4:	05001604 	movi	r20,88
101087e8:	05400244 	movi	r21,9
101087ec:	402f883a 	mov	r23,r8
101087f0:	b5800044 	addi	r22,r22,1
101087f4:	18bff804 	addi	r2,r3,-32
101087f8:	a0827736 	bltu	r20,r2,101091d8 <___vfiprintf_internal_r+0xb5c>
101087fc:	100490ba 	slli	r2,r2,2
10108800:	01040474 	movhi	r4,4113
10108804:	21220504 	addi	r4,r4,-30700
10108808:	1105883a 	add	r2,r2,r4
1010880c:	10800017 	ldw	r2,0(r2)
10108810:	1000683a 	jmp	r2
10108814:	10108ed8 	cmpnei	zero,r2,16955
10108818:	101091d8 	cmpnei	zero,r2,16967
1010881c:	101091d8 	cmpnei	zero,r2,16967
10108820:	10108ef4 	orhi	zero,r2,16955
10108824:	101091d8 	cmpnei	zero,r2,16967
10108828:	101091d8 	cmpnei	zero,r2,16967
1010882c:	101091d8 	cmpnei	zero,r2,16967
10108830:	101091d8 	cmpnei	zero,r2,16967
10108834:	101091d8 	cmpnei	zero,r2,16967
10108838:	101091d8 	cmpnei	zero,r2,16967
1010883c:	101090fc 	xorhi	zero,r2,16963
10108840:	10109120 	cmpeqi	zero,r2,16964
10108844:	101091d8 	cmpnei	zero,r2,16967
10108848:	10108a18 	cmpnei	zero,r2,16936
1010884c:	10109134 	orhi	zero,r2,16964
10108850:	101091d8 	cmpnei	zero,r2,16967
10108854:	10108f00 	call	110108f0 <__alt_data_end+0xef08f0>
10108858:	10108f0c 	andi	zero,r2,16956
1010885c:	10108f0c 	andi	zero,r2,16956
10108860:	10108f0c 	andi	zero,r2,16956
10108864:	10108f0c 	andi	zero,r2,16956
10108868:	10108f0c 	andi	zero,r2,16956
1010886c:	10108f0c 	andi	zero,r2,16956
10108870:	10108f0c 	andi	zero,r2,16956
10108874:	10108f0c 	andi	zero,r2,16956
10108878:	10108f0c 	andi	zero,r2,16956
1010887c:	101091d8 	cmpnei	zero,r2,16967
10108880:	101091d8 	cmpnei	zero,r2,16967
10108884:	101091d8 	cmpnei	zero,r2,16967
10108888:	101091d8 	cmpnei	zero,r2,16967
1010888c:	101091d8 	cmpnei	zero,r2,16967
10108890:	101091d8 	cmpnei	zero,r2,16967
10108894:	101091d8 	cmpnei	zero,r2,16967
10108898:	101091d8 	cmpnei	zero,r2,16967
1010889c:	101091d8 	cmpnei	zero,r2,16967
101088a0:	101091d8 	cmpnei	zero,r2,16967
101088a4:	10108f4c 	andi	zero,r2,16957
101088a8:	101091d8 	cmpnei	zero,r2,16967
101088ac:	101091d8 	cmpnei	zero,r2,16967
101088b0:	101091d8 	cmpnei	zero,r2,16967
101088b4:	101091d8 	cmpnei	zero,r2,16967
101088b8:	101091d8 	cmpnei	zero,r2,16967
101088bc:	101091d8 	cmpnei	zero,r2,16967
101088c0:	101091d8 	cmpnei	zero,r2,16967
101088c4:	101091d8 	cmpnei	zero,r2,16967
101088c8:	101091d8 	cmpnei	zero,r2,16967
101088cc:	101091d8 	cmpnei	zero,r2,16967
101088d0:	10108f88 	cmpgei	zero,r2,16958
101088d4:	101091d8 	cmpnei	zero,r2,16967
101088d8:	101091d8 	cmpnei	zero,r2,16967
101088dc:	101091d8 	cmpnei	zero,r2,16967
101088e0:	101091d8 	cmpnei	zero,r2,16967
101088e4:	101091d8 	cmpnei	zero,r2,16967
101088e8:	10108fe4 	muli	zero,r2,16959
101088ec:	101091d8 	cmpnei	zero,r2,16967
101088f0:	101091d8 	cmpnei	zero,r2,16967
101088f4:	10109058 	cmpnei	zero,r2,16961
101088f8:	101091d8 	cmpnei	zero,r2,16967
101088fc:	101091d8 	cmpnei	zero,r2,16967
10108900:	101091d8 	cmpnei	zero,r2,16967
10108904:	101091d8 	cmpnei	zero,r2,16967
10108908:	101091d8 	cmpnei	zero,r2,16967
1010890c:	101091d8 	cmpnei	zero,r2,16967
10108910:	101091d8 	cmpnei	zero,r2,16967
10108914:	101091d8 	cmpnei	zero,r2,16967
10108918:	101091d8 	cmpnei	zero,r2,16967
1010891c:	101091d8 	cmpnei	zero,r2,16967
10108920:	10108e00 	call	110108e0 <__alt_data_end+0xef08e0>
10108924:	10108e30 	cmpltui	zero,r2,16952
10108928:	101091d8 	cmpnei	zero,r2,16967
1010892c:	101091d8 	cmpnei	zero,r2,16967
10108930:	101091d8 	cmpnei	zero,r2,16967
10108934:	10109180 	call	11010918 <__alt_data_end+0xef0918>
10108938:	10108e30 	cmpltui	zero,r2,16952
1010893c:	101091d8 	cmpnei	zero,r2,16967
10108940:	101091d8 	cmpnei	zero,r2,16967
10108944:	10108cd8 	cmpnei	zero,r2,16947
10108948:	101091d8 	cmpnei	zero,r2,16967
1010894c:	10108cec 	andhi	zero,r2,16947
10108950:	10108d24 	muli	zero,r2,16948
10108954:	10108a24 	muli	zero,r2,16936
10108958:	10108ccc 	andi	zero,r2,16947
1010895c:	101091d8 	cmpnei	zero,r2,16967
10108960:	10109098 	cmpnei	zero,r2,16962
10108964:	101091d8 	cmpnei	zero,r2,16967
10108968:	101090e4 	muli	zero,r2,16963
1010896c:	101091d8 	cmpnei	zero,r2,16967
10108970:	101091d8 	cmpnei	zero,r2,16967
10108974:	10108da8 	cmpgeui	zero,r2,16950
10108978:	42000204 	addi	r8,r8,8
1010897c:	d8c02417 	ldw	r3,144(sp)
10108980:	1c07883a 	add	r3,r3,r16
10108984:	d8c02415 	stw	r3,144(sp)
10108988:	003f8c06 	br	101087bc <__alt_data_end+0xfffe87bc>
1010898c:	d9402017 	ldw	r5,128(sp)
10108990:	d9002117 	ldw	r4,132(sp)
10108994:	01033800 	call	10103380 <__swsetup_r>
10108998:	1003c11e 	bne	r2,zero,101098a0 <___vfiprintf_internal_r+0x1224>
1010899c:	d9402017 	ldw	r5,128(sp)
101089a0:	00c00284 	movi	r3,10
101089a4:	2880030b 	ldhu	r2,12(r5)
101089a8:	1080068c 	andi	r2,r2,26
101089ac:	10ff581e 	bne	r2,r3,10108710 <__alt_data_end+0xfffe8710>
101089b0:	d8c02017 	ldw	r3,128(sp)
101089b4:	1880038f 	ldh	r2,14(r3)
101089b8:	103f5516 	blt	r2,zero,10108710 <__alt_data_end+0xfffe8710>
101089bc:	d9c02217 	ldw	r7,136(sp)
101089c0:	d9002117 	ldw	r4,132(sp)
101089c4:	a80d883a 	mov	r6,r21
101089c8:	180b883a 	mov	r5,r3
101089cc:	0109ba40 	call	10109ba4 <__sbprintf>
101089d0:	dfc03517 	ldw	ra,212(sp)
101089d4:	df003417 	ldw	fp,208(sp)
101089d8:	ddc03317 	ldw	r23,204(sp)
101089dc:	dd803217 	ldw	r22,200(sp)
101089e0:	dd403117 	ldw	r21,196(sp)
101089e4:	dd003017 	ldw	r20,192(sp)
101089e8:	dcc02f17 	ldw	r19,188(sp)
101089ec:	dc802e17 	ldw	r18,184(sp)
101089f0:	dc402d17 	ldw	r17,180(sp)
101089f4:	dc002c17 	ldw	r16,176(sp)
101089f8:	dec03604 	addi	sp,sp,216
101089fc:	f800283a 	ret
10108a00:	010538c0 	call	1010538c <__sinit>
10108a04:	003f2f06 	br	101086c4 <__alt_data_end+0xfffe86c4>
10108a08:	d8c02517 	ldw	r3,148(sp)
10108a0c:	d8802215 	stw	r2,136(sp)
10108a10:	00c7c83a 	sub	r3,zero,r3
10108a14:	d8c02515 	stw	r3,148(sp)
10108a18:	8c400114 	ori	r17,r17,4
10108a1c:	b0c00007 	ldb	r3,0(r22)
10108a20:	003f7306 	br	101087f0 <__alt_data_end+0xfffe87f0>
10108a24:	00800c04 	movi	r2,48
10108a28:	d9402217 	ldw	r5,136(sp)
10108a2c:	d8801d05 	stb	r2,116(sp)
10108a30:	00801e04 	movi	r2,120
10108a34:	d8801d45 	stb	r2,117(sp)
10108a38:	d8001d85 	stb	zero,118(sp)
10108a3c:	b811883a 	mov	r8,r23
10108a40:	28c00104 	addi	r3,r5,4
10108a44:	2cc00017 	ldw	r19,0(r5)
10108a48:	0029883a 	mov	r20,zero
10108a4c:	88800094 	ori	r2,r17,2
10108a50:	80032516 	blt	r16,zero,101096e8 <___vfiprintf_internal_r+0x106c>
10108a54:	00bfdfc4 	movi	r2,-129
10108a58:	88a2703a 	and	r17,r17,r2
10108a5c:	d8c02215 	stw	r3,136(sp)
10108a60:	8c400094 	ori	r17,r17,2
10108a64:	98032a1e 	bne	r19,zero,10109710 <___vfiprintf_internal_r+0x1094>
10108a68:	00840474 	movhi	r2,4113
10108a6c:	10819004 	addi	r2,r2,1600
10108a70:	d8802615 	stw	r2,152(sp)
10108a74:	002b883a 	mov	r21,zero
10108a78:	8001741e 	bne	r16,zero,1010904c <___vfiprintf_internal_r+0x9d0>
10108a7c:	0021883a 	mov	r16,zero
10108a80:	0029883a 	mov	r20,zero
10108a84:	ddc01a04 	addi	r23,sp,104
10108a88:	8027883a 	mov	r19,r16
10108a8c:	8500010e 	bge	r16,r20,10108a94 <___vfiprintf_internal_r+0x418>
10108a90:	a027883a 	mov	r19,r20
10108a94:	ad403fcc 	andi	r21,r21,255
10108a98:	ad40201c 	xori	r21,r21,128
10108a9c:	ad7fe004 	addi	r21,r21,-128
10108aa0:	a8000126 	beq	r21,zero,10108aa8 <___vfiprintf_internal_r+0x42c>
10108aa4:	9cc00044 	addi	r19,r19,1
10108aa8:	89c0008c 	andi	r7,r17,2
10108aac:	38000126 	beq	r7,zero,10108ab4 <___vfiprintf_internal_r+0x438>
10108ab0:	9cc00084 	addi	r19,r19,2
10108ab4:	88c0210c 	andi	r3,r17,132
10108ab8:	1801dd1e 	bne	r3,zero,10109230 <___vfiprintf_internal_r+0xbb4>
10108abc:	d9402517 	ldw	r5,148(sp)
10108ac0:	2cebc83a 	sub	r21,r5,r19
10108ac4:	0541da0e 	bge	zero,r21,10109230 <___vfiprintf_internal_r+0xbb4>
10108ac8:	07000404 	movi	fp,16
10108acc:	d8801c17 	ldw	r2,112(sp)
10108ad0:	e543be0e 	bge	fp,r21,101099cc <___vfiprintf_internal_r+0x1350>
10108ad4:	01440474 	movhi	r5,4113
10108ad8:	2941f504 	addi	r5,r5,2004
10108adc:	dc002715 	stw	r16,156(sp)
10108ae0:	d9801b17 	ldw	r6,108(sp)
10108ae4:	a821883a 	mov	r16,r21
10108ae8:	d9402315 	stw	r5,140(sp)
10108aec:	028001c4 	movi	r10,7
10108af0:	d9c02915 	stw	r7,164(sp)
10108af4:	182b883a 	mov	r21,r3
10108af8:	00000506 	br	10108b10 <___vfiprintf_internal_r+0x494>
10108afc:	31000084 	addi	r4,r6,2
10108b00:	42000204 	addi	r8,r8,8
10108b04:	180d883a 	mov	r6,r3
10108b08:	843ffc04 	addi	r16,r16,-16
10108b0c:	e4000f0e 	bge	fp,r16,10108b4c <___vfiprintf_internal_r+0x4d0>
10108b10:	01040474 	movhi	r4,4113
10108b14:	10800404 	addi	r2,r2,16
10108b18:	30c00044 	addi	r3,r6,1
10108b1c:	2101f504 	addi	r4,r4,2004
10108b20:	41000015 	stw	r4,0(r8)
10108b24:	47000115 	stw	fp,4(r8)
10108b28:	d8801c15 	stw	r2,112(sp)
10108b2c:	d8c01b15 	stw	r3,108(sp)
10108b30:	50fff20e 	bge	r10,r3,10108afc <__alt_data_end+0xfffe8afc>
10108b34:	1001b21e 	bne	r2,zero,10109200 <___vfiprintf_internal_r+0xb84>
10108b38:	843ffc04 	addi	r16,r16,-16
10108b3c:	000d883a 	mov	r6,zero
10108b40:	01000044 	movi	r4,1
10108b44:	d811883a 	mov	r8,sp
10108b48:	e43ff116 	blt	fp,r16,10108b10 <__alt_data_end+0xfffe8b10>
10108b4c:	a807883a 	mov	r3,r21
10108b50:	d9c02917 	ldw	r7,164(sp)
10108b54:	802b883a 	mov	r21,r16
10108b58:	dc002717 	ldw	r16,156(sp)
10108b5c:	d9402317 	ldw	r5,140(sp)
10108b60:	a885883a 	add	r2,r21,r2
10108b64:	45400115 	stw	r21,4(r8)
10108b68:	41400015 	stw	r5,0(r8)
10108b6c:	d8801c15 	stw	r2,112(sp)
10108b70:	d9001b15 	stw	r4,108(sp)
10108b74:	014001c4 	movi	r5,7
10108b78:	29026216 	blt	r5,r4,10109504 <___vfiprintf_internal_r+0xe88>
10108b7c:	d9801d87 	ldb	r6,118(sp)
10108b80:	42000204 	addi	r8,r8,8
10108b84:	21400044 	addi	r5,r4,1
10108b88:	3001ae1e 	bne	r6,zero,10109244 <___vfiprintf_internal_r+0xbc8>
10108b8c:	3801bb26 	beq	r7,zero,1010927c <___vfiprintf_internal_r+0xc00>
10108b90:	d9001d04 	addi	r4,sp,116
10108b94:	10800084 	addi	r2,r2,2
10108b98:	41000015 	stw	r4,0(r8)
10108b9c:	01000084 	movi	r4,2
10108ba0:	41000115 	stw	r4,4(r8)
10108ba4:	d8801c15 	stw	r2,112(sp)
10108ba8:	d9401b15 	stw	r5,108(sp)
10108bac:	010001c4 	movi	r4,7
10108bb0:	2142680e 	bge	r4,r5,10109554 <___vfiprintf_internal_r+0xed8>
10108bb4:	1002b11e 	bne	r2,zero,1010967c <___vfiprintf_internal_r+0x1000>
10108bb8:	01802004 	movi	r6,128
10108bbc:	01400044 	movi	r5,1
10108bc0:	0009883a 	mov	r4,zero
10108bc4:	d811883a 	mov	r8,sp
10108bc8:	1981ae1e 	bne	r3,r6,10109284 <___vfiprintf_internal_r+0xc08>
10108bcc:	d8c02517 	ldw	r3,148(sp)
10108bd0:	1cf9c83a 	sub	fp,r3,r19
10108bd4:	0701ab0e 	bge	zero,fp,10109284 <___vfiprintf_internal_r+0xc08>
10108bd8:	05400404 	movi	r21,16
10108bdc:	af03a90e 	bge	r21,fp,10109a84 <___vfiprintf_internal_r+0x1408>
10108be0:	01440474 	movhi	r5,4113
10108be4:	2941f104 	addi	r5,r5,1988
10108be8:	d9402315 	stw	r5,140(sp)
10108bec:	01c001c4 	movi	r7,7
10108bf0:	00000506 	br	10108c08 <___vfiprintf_internal_r+0x58c>
10108bf4:	21800084 	addi	r6,r4,2
10108bf8:	42000204 	addi	r8,r8,8
10108bfc:	1809883a 	mov	r4,r3
10108c00:	e73ffc04 	addi	fp,fp,-16
10108c04:	af000d0e 	bge	r21,fp,10108c3c <___vfiprintf_internal_r+0x5c0>
10108c08:	10800404 	addi	r2,r2,16
10108c0c:	20c00044 	addi	r3,r4,1
10108c10:	44800015 	stw	r18,0(r8)
10108c14:	45400115 	stw	r21,4(r8)
10108c18:	d8801c15 	stw	r2,112(sp)
10108c1c:	d8c01b15 	stw	r3,108(sp)
10108c20:	38fff40e 	bge	r7,r3,10108bf4 <__alt_data_end+0xfffe8bf4>
10108c24:	10022b1e 	bne	r2,zero,101094d4 <___vfiprintf_internal_r+0xe58>
10108c28:	e73ffc04 	addi	fp,fp,-16
10108c2c:	01800044 	movi	r6,1
10108c30:	0009883a 	mov	r4,zero
10108c34:	d811883a 	mov	r8,sp
10108c38:	af3ff316 	blt	r21,fp,10108c08 <__alt_data_end+0xfffe8c08>
10108c3c:	d8c02317 	ldw	r3,140(sp)
10108c40:	1705883a 	add	r2,r2,fp
10108c44:	47000115 	stw	fp,4(r8)
10108c48:	40c00015 	stw	r3,0(r8)
10108c4c:	d8801c15 	stw	r2,112(sp)
10108c50:	d9801b15 	stw	r6,108(sp)
10108c54:	00c001c4 	movi	r3,7
10108c58:	19829416 	blt	r3,r6,101096ac <___vfiprintf_internal_r+0x1030>
10108c5c:	8521c83a 	sub	r16,r16,r20
10108c60:	42000204 	addi	r8,r8,8
10108c64:	31400044 	addi	r5,r6,1
10108c68:	3009883a 	mov	r4,r6
10108c6c:	04018716 	blt	zero,r16,1010928c <___vfiprintf_internal_r+0xc10>
10108c70:	a085883a 	add	r2,r20,r2
10108c74:	45c00015 	stw	r23,0(r8)
10108c78:	45000115 	stw	r20,4(r8)
10108c7c:	d8801c15 	stw	r2,112(sp)
10108c80:	d9401b15 	stw	r5,108(sp)
10108c84:	00c001c4 	movi	r3,7
10108c88:	1941c20e 	bge	r3,r5,10109394 <___vfiprintf_internal_r+0xd18>
10108c8c:	1002531e 	bne	r2,zero,101095dc <___vfiprintf_internal_r+0xf60>
10108c90:	d8001b15 	stw	zero,108(sp)
10108c94:	8c40010c 	andi	r17,r17,4
10108c98:	88023226 	beq	r17,zero,10109564 <___vfiprintf_internal_r+0xee8>
10108c9c:	d9002517 	ldw	r4,148(sp)
10108ca0:	24e3c83a 	sub	r17,r4,r19
10108ca4:	04432916 	blt	zero,r17,1010994c <___vfiprintf_internal_r+0x12d0>
10108ca8:	d8802517 	ldw	r2,148(sp)
10108cac:	14c0010e 	bge	r2,r19,10108cb4 <___vfiprintf_internal_r+0x638>
10108cb0:	9805883a 	mov	r2,r19
10108cb4:	d8c02417 	ldw	r3,144(sp)
10108cb8:	1887883a 	add	r3,r3,r2
10108cbc:	d8c02415 	stw	r3,144(sp)
10108cc0:	d8001b15 	stw	zero,108(sp)
10108cc4:	d811883a 	mov	r8,sp
10108cc8:	003ea006 	br	1010874c <__alt_data_end+0xfffe874c>
10108ccc:	8c400814 	ori	r17,r17,32
10108cd0:	b0c00007 	ldb	r3,0(r22)
10108cd4:	003ec606 	br	101087f0 <__alt_data_end+0xfffe87f0>
10108cd8:	b0c00007 	ldb	r3,0(r22)
10108cdc:	00801b04 	movi	r2,108
10108ce0:	18832026 	beq	r3,r2,10109964 <___vfiprintf_internal_r+0x12e8>
10108ce4:	8c400414 	ori	r17,r17,16
10108ce8:	003ec106 	br	101087f0 <__alt_data_end+0xfffe87f0>
10108cec:	9cc03fcc 	andi	r19,r19,255
10108cf0:	b811883a 	mov	r8,r23
10108cf4:	9803981e 	bne	r19,zero,10109b58 <___vfiprintf_internal_r+0x14dc>
10108cf8:	8880080c 	andi	r2,r17,32
10108cfc:	1002be26 	beq	r2,zero,101097f8 <___vfiprintf_internal_r+0x117c>
10108d00:	d9002217 	ldw	r4,136(sp)
10108d04:	d9402417 	ldw	r5,144(sp)
10108d08:	20800017 	ldw	r2,0(r4)
10108d0c:	2807d7fa 	srai	r3,r5,31
10108d10:	21000104 	addi	r4,r4,4
10108d14:	d9002215 	stw	r4,136(sp)
10108d18:	11400015 	stw	r5,0(r2)
10108d1c:	10c00115 	stw	r3,4(r2)
10108d20:	003e8a06 	br	1010874c <__alt_data_end+0xfffe874c>
10108d24:	9cc03fcc 	andi	r19,r19,255
10108d28:	b811883a 	mov	r8,r23
10108d2c:	9803871e 	bne	r19,zero,10109b4c <___vfiprintf_internal_r+0x14d0>
10108d30:	8880080c 	andi	r2,r17,32
10108d34:	10009a26 	beq	r2,zero,10108fa0 <___vfiprintf_internal_r+0x924>
10108d38:	d9002217 	ldw	r4,136(sp)
10108d3c:	d8001d85 	stb	zero,118(sp)
10108d40:	20800204 	addi	r2,r4,8
10108d44:	24c00017 	ldw	r19,0(r4)
10108d48:	25000117 	ldw	r20,4(r4)
10108d4c:	8002a416 	blt	r16,zero,101097e0 <___vfiprintf_internal_r+0x1164>
10108d50:	013fdfc4 	movi	r4,-129
10108d54:	9d06b03a 	or	r3,r19,r20
10108d58:	d8802215 	stw	r2,136(sp)
10108d5c:	8922703a 	and	r17,r17,r4
10108d60:	18009b26 	beq	r3,zero,10108fd0 <___vfiprintf_internal_r+0x954>
10108d64:	002b883a 	mov	r21,zero
10108d68:	ddc01a04 	addi	r23,sp,104
10108d6c:	9806d0fa 	srli	r3,r19,3
10108d70:	a008977a 	slli	r4,r20,29
10108d74:	a028d0fa 	srli	r20,r20,3
10108d78:	9cc001cc 	andi	r19,r19,7
10108d7c:	98800c04 	addi	r2,r19,48
10108d80:	bdffffc4 	addi	r23,r23,-1
10108d84:	20e6b03a 	or	r19,r4,r3
10108d88:	b8800005 	stb	r2,0(r23)
10108d8c:	9d06b03a 	or	r3,r19,r20
10108d90:	183ff61e 	bne	r3,zero,10108d6c <__alt_data_end+0xfffe8d6c>
10108d94:	88c0004c 	andi	r3,r17,1
10108d98:	18021f1e 	bne	r3,zero,10109618 <___vfiprintf_internal_r+0xf9c>
10108d9c:	d9401e17 	ldw	r5,120(sp)
10108da0:	2de9c83a 	sub	r20,r5,r23
10108da4:	003f3806 	br	10108a88 <__alt_data_end+0xfffe8a88>
10108da8:	9cc03fcc 	andi	r19,r19,255
10108dac:	b811883a 	mov	r8,r23
10108db0:	98034f1e 	bne	r19,zero,10109af0 <___vfiprintf_internal_r+0x1474>
10108db4:	00840474 	movhi	r2,4113
10108db8:	10819004 	addi	r2,r2,1600
10108dbc:	d8802615 	stw	r2,152(sp)
10108dc0:	8880080c 	andi	r2,r17,32
10108dc4:	1000ac26 	beq	r2,zero,10109078 <___vfiprintf_internal_r+0x9fc>
10108dc8:	d9002217 	ldw	r4,136(sp)
10108dcc:	24c00017 	ldw	r19,0(r4)
10108dd0:	25000117 	ldw	r20,4(r4)
10108dd4:	21000204 	addi	r4,r4,8
10108dd8:	d9002215 	stw	r4,136(sp)
10108ddc:	8880004c 	andi	r2,r17,1
10108de0:	1001e726 	beq	r2,zero,10109580 <___vfiprintf_internal_r+0xf04>
10108de4:	9d04b03a 	or	r2,r19,r20
10108de8:	10025c1e 	bne	r2,zero,1010975c <___vfiprintf_internal_r+0x10e0>
10108dec:	d8001d85 	stb	zero,118(sp)
10108df0:	80024416 	blt	r16,zero,10109704 <___vfiprintf_internal_r+0x1088>
10108df4:	00bfdfc4 	movi	r2,-129
10108df8:	88a2703a 	and	r17,r17,r2
10108dfc:	003f1d06 	br	10108a74 <__alt_data_end+0xfffe8a74>
10108e00:	d8c02217 	ldw	r3,136(sp)
10108e04:	04c00044 	movi	r19,1
10108e08:	b811883a 	mov	r8,r23
10108e0c:	18800017 	ldw	r2,0(r3)
10108e10:	18c00104 	addi	r3,r3,4
10108e14:	d8001d85 	stb	zero,118(sp)
10108e18:	d8801005 	stb	r2,64(sp)
10108e1c:	d8c02215 	stw	r3,136(sp)
10108e20:	9829883a 	mov	r20,r19
10108e24:	ddc01004 	addi	r23,sp,64
10108e28:	0021883a 	mov	r16,zero
10108e2c:	003f1e06 	br	10108aa8 <__alt_data_end+0xfffe8aa8>
10108e30:	9cc03fcc 	andi	r19,r19,255
10108e34:	b811883a 	mov	r8,r23
10108e38:	9803331e 	bne	r19,zero,10109b08 <___vfiprintf_internal_r+0x148c>
10108e3c:	8880080c 	andi	r2,r17,32
10108e40:	10004826 	beq	r2,zero,10108f64 <___vfiprintf_internal_r+0x8e8>
10108e44:	d9002217 	ldw	r4,136(sp)
10108e48:	20800117 	ldw	r2,4(r4)
10108e4c:	24c00017 	ldw	r19,0(r4)
10108e50:	21000204 	addi	r4,r4,8
10108e54:	d9002215 	stw	r4,136(sp)
10108e58:	1029883a 	mov	r20,r2
10108e5c:	10024c16 	blt	r2,zero,10109790 <___vfiprintf_internal_r+0x1114>
10108e60:	dd401d83 	ldbu	r21,118(sp)
10108e64:	80007116 	blt	r16,zero,1010902c <___vfiprintf_internal_r+0x9b0>
10108e68:	00ffdfc4 	movi	r3,-129
10108e6c:	9d04b03a 	or	r2,r19,r20
10108e70:	88e2703a 	and	r17,r17,r3
10108e74:	1000d126 	beq	r2,zero,101091bc <___vfiprintf_internal_r+0xb40>
10108e78:	a0023526 	beq	r20,zero,10109750 <___vfiprintf_internal_r+0x10d4>
10108e7c:	ddc01a04 	addi	r23,sp,104
10108e80:	4039883a 	mov	fp,r8
10108e84:	9809883a 	mov	r4,r19
10108e88:	a00b883a 	mov	r5,r20
10108e8c:	01800284 	movi	r6,10
10108e90:	000f883a 	mov	r7,zero
10108e94:	010aba80 	call	1010aba8 <__umoddi3>
10108e98:	10800c04 	addi	r2,r2,48
10108e9c:	bdffffc4 	addi	r23,r23,-1
10108ea0:	9809883a 	mov	r4,r19
10108ea4:	a00b883a 	mov	r5,r20
10108ea8:	b8800005 	stb	r2,0(r23)
10108eac:	01800284 	movi	r6,10
10108eb0:	000f883a 	mov	r7,zero
10108eb4:	010a5ac0 	call	1010a5ac <__udivdi3>
10108eb8:	1027883a 	mov	r19,r2
10108ebc:	10c4b03a 	or	r2,r2,r3
10108ec0:	1829883a 	mov	r20,r3
10108ec4:	103fef1e 	bne	r2,zero,10108e84 <__alt_data_end+0xfffe8e84>
10108ec8:	d9001e17 	ldw	r4,120(sp)
10108ecc:	e011883a 	mov	r8,fp
10108ed0:	25e9c83a 	sub	r20,r4,r23
10108ed4:	003eec06 	br	10108a88 <__alt_data_end+0xfffe8a88>
10108ed8:	d8802307 	ldb	r2,140(sp)
10108edc:	1002361e 	bne	r2,zero,101097b8 <___vfiprintf_internal_r+0x113c>
10108ee0:	00c00804 	movi	r3,32
10108ee4:	d8c02305 	stb	r3,140(sp)
10108ee8:	04c00044 	movi	r19,1
10108eec:	b0c00007 	ldb	r3,0(r22)
10108ef0:	003e3f06 	br	101087f0 <__alt_data_end+0xfffe87f0>
10108ef4:	8c400054 	ori	r17,r17,1
10108ef8:	b0c00007 	ldb	r3,0(r22)
10108efc:	003e3c06 	br	101087f0 <__alt_data_end+0xfffe87f0>
10108f00:	8c402014 	ori	r17,r17,128
10108f04:	b0c00007 	ldb	r3,0(r22)
10108f08:	003e3906 	br	101087f0 <__alt_data_end+0xfffe87f0>
10108f0c:	dc002715 	stw	r16,156(sp)
10108f10:	d8002515 	stw	zero,148(sp)
10108f14:	1f3ff404 	addi	fp,r3,-48
10108f18:	0009883a 	mov	r4,zero
10108f1c:	b021883a 	mov	r16,r22
10108f20:	01400284 	movi	r5,10
10108f24:	0100c840 	call	10100c84 <__mulsi3>
10108f28:	80c00007 	ldb	r3,0(r16)
10108f2c:	e089883a 	add	r4,fp,r2
10108f30:	b5800044 	addi	r22,r22,1
10108f34:	1f3ff404 	addi	fp,r3,-48
10108f38:	b021883a 	mov	r16,r22
10108f3c:	af3ff82e 	bgeu	r21,fp,10108f20 <__alt_data_end+0xfffe8f20>
10108f40:	d9002515 	stw	r4,148(sp)
10108f44:	dc002717 	ldw	r16,156(sp)
10108f48:	003e2a06 	br	101087f4 <__alt_data_end+0xfffe87f4>
10108f4c:	9cc03fcc 	andi	r19,r19,255
10108f50:	b811883a 	mov	r8,r23
10108f54:	9802e91e 	bne	r19,zero,10109afc <___vfiprintf_internal_r+0x1480>
10108f58:	8c400414 	ori	r17,r17,16
10108f5c:	8880080c 	andi	r2,r17,32
10108f60:	103fb81e 	bne	r2,zero,10108e44 <__alt_data_end+0xfffe8e44>
10108f64:	8880040c 	andi	r2,r17,16
10108f68:	10022e26 	beq	r2,zero,10109824 <___vfiprintf_internal_r+0x11a8>
10108f6c:	d9402217 	ldw	r5,136(sp)
10108f70:	2cc00017 	ldw	r19,0(r5)
10108f74:	29400104 	addi	r5,r5,4
10108f78:	d9402215 	stw	r5,136(sp)
10108f7c:	9829d7fa 	srai	r20,r19,31
10108f80:	a005883a 	mov	r2,r20
10108f84:	003fb506 	br	10108e5c <__alt_data_end+0xfffe8e5c>
10108f88:	9cc03fcc 	andi	r19,r19,255
10108f8c:	b811883a 	mov	r8,r23
10108f90:	9802fa1e 	bne	r19,zero,10109b7c <___vfiprintf_internal_r+0x1500>
10108f94:	8c400414 	ori	r17,r17,16
10108f98:	8880080c 	andi	r2,r17,32
10108f9c:	103f661e 	bne	r2,zero,10108d38 <__alt_data_end+0xfffe8d38>
10108fa0:	8880040c 	andi	r2,r17,16
10108fa4:	10020626 	beq	r2,zero,101097c0 <___vfiprintf_internal_r+0x1144>
10108fa8:	d9402217 	ldw	r5,136(sp)
10108fac:	d8001d85 	stb	zero,118(sp)
10108fb0:	0029883a 	mov	r20,zero
10108fb4:	28800104 	addi	r2,r5,4
10108fb8:	2cc00017 	ldw	r19,0(r5)
10108fbc:	80020816 	blt	r16,zero,101097e0 <___vfiprintf_internal_r+0x1164>
10108fc0:	00ffdfc4 	movi	r3,-129
10108fc4:	d8802215 	stw	r2,136(sp)
10108fc8:	88e2703a 	and	r17,r17,r3
10108fcc:	983f651e 	bne	r19,zero,10108d64 <__alt_data_end+0xfffe8d64>
10108fd0:	002b883a 	mov	r21,zero
10108fd4:	8002cf26 	beq	r16,zero,10109b14 <___vfiprintf_internal_r+0x1498>
10108fd8:	0027883a 	mov	r19,zero
10108fdc:	0029883a 	mov	r20,zero
10108fe0:	003f6106 	br	10108d68 <__alt_data_end+0xfffe8d68>
10108fe4:	9cc03fcc 	andi	r19,r19,255
10108fe8:	b811883a 	mov	r8,r23
10108fec:	9802e01e 	bne	r19,zero,10109b70 <___vfiprintf_internal_r+0x14f4>
10108ff0:	8c400414 	ori	r17,r17,16
10108ff4:	8880080c 	andi	r2,r17,32
10108ff8:	1000641e 	bne	r2,zero,1010918c <___vfiprintf_internal_r+0xb10>
10108ffc:	8880040c 	andi	r2,r17,16
10109000:	1001c81e 	bne	r2,zero,10109724 <___vfiprintf_internal_r+0x10a8>
10109004:	8880100c 	andi	r2,r17,64
10109008:	d8001d85 	stb	zero,118(sp)
1010900c:	1002281e 	bne	r2,zero,101098b0 <___vfiprintf_internal_r+0x1234>
10109010:	d9002217 	ldw	r4,136(sp)
10109014:	0029883a 	mov	r20,zero
10109018:	20800104 	addi	r2,r4,4
1010901c:	24c00017 	ldw	r19,0(r4)
10109020:	8001c60e 	bge	r16,zero,1010973c <___vfiprintf_internal_r+0x10c0>
10109024:	d8802215 	stw	r2,136(sp)
10109028:	002b883a 	mov	r21,zero
1010902c:	9d04b03a 	or	r2,r19,r20
10109030:	103f911e 	bne	r2,zero,10108e78 <__alt_data_end+0xfffe8e78>
10109034:	00800044 	movi	r2,1
10109038:	10803fcc 	andi	r2,r2,255
1010903c:	00c00044 	movi	r3,1
10109040:	10c05f26 	beq	r2,r3,101091c0 <___vfiprintf_internal_r+0xb44>
10109044:	00c00084 	movi	r3,2
10109048:	10ffe31e 	bne	r2,r3,10108fd8 <__alt_data_end+0xfffe8fd8>
1010904c:	0027883a 	mov	r19,zero
10109050:	0029883a 	mov	r20,zero
10109054:	00015106 	br	1010959c <___vfiprintf_internal_r+0xf20>
10109058:	9cc03fcc 	andi	r19,r19,255
1010905c:	b811883a 	mov	r8,r23
10109060:	9802c01e 	bne	r19,zero,10109b64 <___vfiprintf_internal_r+0x14e8>
10109064:	01440474 	movhi	r5,4113
10109068:	29418b04 	addi	r5,r5,1580
1010906c:	d9402615 	stw	r5,152(sp)
10109070:	8880080c 	andi	r2,r17,32
10109074:	103f541e 	bne	r2,zero,10108dc8 <__alt_data_end+0xfffe8dc8>
10109078:	8880040c 	andi	r2,r17,16
1010907c:	1001f226 	beq	r2,zero,10109848 <___vfiprintf_internal_r+0x11cc>
10109080:	d9402217 	ldw	r5,136(sp)
10109084:	0029883a 	mov	r20,zero
10109088:	2cc00017 	ldw	r19,0(r5)
1010908c:	29400104 	addi	r5,r5,4
10109090:	d9402215 	stw	r5,136(sp)
10109094:	003f5106 	br	10108ddc <__alt_data_end+0xfffe8ddc>
10109098:	d8c02217 	ldw	r3,136(sp)
1010909c:	b811883a 	mov	r8,r23
101090a0:	d8001d85 	stb	zero,118(sp)
101090a4:	1dc00017 	ldw	r23,0(r3)
101090a8:	1f000104 	addi	fp,r3,4
101090ac:	b8025926 	beq	r23,zero,10109a14 <___vfiprintf_internal_r+0x1398>
101090b0:	80023316 	blt	r16,zero,10109980 <___vfiprintf_internal_r+0x1304>
101090b4:	800d883a 	mov	r6,r16
101090b8:	000b883a 	mov	r5,zero
101090bc:	b809883a 	mov	r4,r23
101090c0:	da002a15 	stw	r8,168(sp)
101090c4:	01069040 	call	10106904 <memchr>
101090c8:	da002a17 	ldw	r8,168(sp)
101090cc:	10026826 	beq	r2,zero,10109a70 <___vfiprintf_internal_r+0x13f4>
101090d0:	15e9c83a 	sub	r20,r2,r23
101090d4:	dd401d83 	ldbu	r21,118(sp)
101090d8:	df002215 	stw	fp,136(sp)
101090dc:	0021883a 	mov	r16,zero
101090e0:	003e6906 	br	10108a88 <__alt_data_end+0xfffe8a88>
101090e4:	9cc03fcc 	andi	r19,r19,255
101090e8:	b811883a 	mov	r8,r23
101090ec:	983fc126 	beq	r19,zero,10108ff4 <__alt_data_end+0xfffe8ff4>
101090f0:	d8c02303 	ldbu	r3,140(sp)
101090f4:	d8c01d85 	stb	r3,118(sp)
101090f8:	003fbe06 	br	10108ff4 <__alt_data_end+0xfffe8ff4>
101090fc:	d9002217 	ldw	r4,136(sp)
10109100:	d9402217 	ldw	r5,136(sp)
10109104:	21000017 	ldw	r4,0(r4)
10109108:	28800104 	addi	r2,r5,4
1010910c:	d9002515 	stw	r4,148(sp)
10109110:	203e3d16 	blt	r4,zero,10108a08 <__alt_data_end+0xfffe8a08>
10109114:	d8802215 	stw	r2,136(sp)
10109118:	b0c00007 	ldb	r3,0(r22)
1010911c:	003db406 	br	101087f0 <__alt_data_end+0xfffe87f0>
10109120:	00c00ac4 	movi	r3,43
10109124:	d8c02305 	stb	r3,140(sp)
10109128:	04c00044 	movi	r19,1
1010912c:	b0c00007 	ldb	r3,0(r22)
10109130:	003daf06 	br	101087f0 <__alt_data_end+0xfffe87f0>
10109134:	b0c00007 	ldb	r3,0(r22)
10109138:	01000a84 	movi	r4,42
1010913c:	b4000044 	addi	r16,r22,1
10109140:	19025e26 	beq	r3,r4,10109abc <___vfiprintf_internal_r+0x1440>
10109144:	1f3ff404 	addi	fp,r3,-48
10109148:	0009883a 	mov	r4,zero
1010914c:	af025236 	bltu	r21,fp,10109a98 <___vfiprintf_internal_r+0x141c>
10109150:	01400284 	movi	r5,10
10109154:	0100c840 	call	10100c84 <__mulsi3>
10109158:	80c00007 	ldb	r3,0(r16)
1010915c:	1709883a 	add	r4,r2,fp
10109160:	85800044 	addi	r22,r16,1
10109164:	1f3ff404 	addi	fp,r3,-48
10109168:	b021883a 	mov	r16,r22
1010916c:	af3ff82e 	bgeu	r21,fp,10109150 <__alt_data_end+0xfffe9150>
10109170:	2021883a 	mov	r16,r4
10109174:	203d9f0e 	bge	r4,zero,101087f4 <__alt_data_end+0xfffe87f4>
10109178:	043fffc4 	movi	r16,-1
1010917c:	003d9d06 	br	101087f4 <__alt_data_end+0xfffe87f4>
10109180:	8c401014 	ori	r17,r17,64
10109184:	b0c00007 	ldb	r3,0(r22)
10109188:	003d9906 	br	101087f0 <__alt_data_end+0xfffe87f0>
1010918c:	d9002217 	ldw	r4,136(sp)
10109190:	d8001d85 	stb	zero,118(sp)
10109194:	20c00204 	addi	r3,r4,8
10109198:	24c00017 	ldw	r19,0(r4)
1010919c:	25000117 	ldw	r20,4(r4)
101091a0:	8001e716 	blt	r16,zero,10109940 <___vfiprintf_internal_r+0x12c4>
101091a4:	013fdfc4 	movi	r4,-129
101091a8:	9d04b03a 	or	r2,r19,r20
101091ac:	d8c02215 	stw	r3,136(sp)
101091b0:	8922703a 	and	r17,r17,r4
101091b4:	002b883a 	mov	r21,zero
101091b8:	103f2f1e 	bne	r2,zero,10108e78 <__alt_data_end+0xfffe8e78>
101091bc:	803e2f26 	beq	r16,zero,10108a7c <__alt_data_end+0xfffe8a7c>
101091c0:	0027883a 	mov	r19,zero
101091c4:	9cc00c04 	addi	r19,r19,48
101091c8:	dcc019c5 	stb	r19,103(sp)
101091cc:	dd002817 	ldw	r20,160(sp)
101091d0:	ddc019c4 	addi	r23,sp,103
101091d4:	003e2c06 	br	10108a88 <__alt_data_end+0xfffe8a88>
101091d8:	9cc03fcc 	andi	r19,r19,255
101091dc:	b811883a 	mov	r8,r23
101091e0:	9802571e 	bne	r19,zero,10109b40 <___vfiprintf_internal_r+0x14c4>
101091e4:	18005726 	beq	r3,zero,10109344 <___vfiprintf_internal_r+0xcc8>
101091e8:	04c00044 	movi	r19,1
101091ec:	d8c01005 	stb	r3,64(sp)
101091f0:	d8001d85 	stb	zero,118(sp)
101091f4:	9829883a 	mov	r20,r19
101091f8:	ddc01004 	addi	r23,sp,64
101091fc:	003f0a06 	br	10108e28 <__alt_data_end+0xfffe8e28>
10109200:	d9402017 	ldw	r5,128(sp)
10109204:	d9002117 	ldw	r4,132(sp)
10109208:	d9801a04 	addi	r6,sp,104
1010920c:	da802a15 	stw	r10,168(sp)
10109210:	01085680 	call	10108568 <__sprint_r.part.0>
10109214:	da802a17 	ldw	r10,168(sp)
10109218:	1000501e 	bne	r2,zero,1010935c <___vfiprintf_internal_r+0xce0>
1010921c:	d9801b17 	ldw	r6,108(sp)
10109220:	d8801c17 	ldw	r2,112(sp)
10109224:	d811883a 	mov	r8,sp
10109228:	31000044 	addi	r4,r6,1
1010922c:	003e3606 	br	10108b08 <__alt_data_end+0xfffe8b08>
10109230:	d9001b17 	ldw	r4,108(sp)
10109234:	d8801c17 	ldw	r2,112(sp)
10109238:	21400044 	addi	r5,r4,1
1010923c:	d9801d87 	ldb	r6,118(sp)
10109240:	303e5226 	beq	r6,zero,10108b8c <__alt_data_end+0xfffe8b8c>
10109244:	01800044 	movi	r6,1
10109248:	d9001d84 	addi	r4,sp,118
1010924c:	1185883a 	add	r2,r2,r6
10109250:	41000015 	stw	r4,0(r8)
10109254:	41800115 	stw	r6,4(r8)
10109258:	d8801c15 	stw	r2,112(sp)
1010925c:	d9401b15 	stw	r5,108(sp)
10109260:	010001c4 	movi	r4,7
10109264:	2140b00e 	bge	r4,r5,10109528 <___vfiprintf_internal_r+0xeac>
10109268:	1000f61e 	bne	r2,zero,10109644 <___vfiprintf_internal_r+0xfc8>
1010926c:	3800b31e 	bne	r7,zero,1010953c <___vfiprintf_internal_r+0xec0>
10109270:	0009883a 	mov	r4,zero
10109274:	300b883a 	mov	r5,r6
10109278:	d811883a 	mov	r8,sp
1010927c:	01802004 	movi	r6,128
10109280:	19be5226 	beq	r3,r6,10108bcc <__alt_data_end+0xfffe8bcc>
10109284:	8521c83a 	sub	r16,r16,r20
10109288:	043e790e 	bge	zero,r16,10108c70 <__alt_data_end+0xfffe8c70>
1010928c:	05400404 	movi	r21,16
10109290:	ac01b00e 	bge	r21,r16,10109954 <___vfiprintf_internal_r+0x12d8>
10109294:	01440474 	movhi	r5,4113
10109298:	2941f104 	addi	r5,r5,1988
1010929c:	d9402315 	stw	r5,140(sp)
101092a0:	070001c4 	movi	fp,7
101092a4:	00000506 	br	101092bc <___vfiprintf_internal_r+0xc40>
101092a8:	21400084 	addi	r5,r4,2
101092ac:	42000204 	addi	r8,r8,8
101092b0:	1809883a 	mov	r4,r3
101092b4:	843ffc04 	addi	r16,r16,-16
101092b8:	ac000d0e 	bge	r21,r16,101092f0 <___vfiprintf_internal_r+0xc74>
101092bc:	10800404 	addi	r2,r2,16
101092c0:	20c00044 	addi	r3,r4,1
101092c4:	44800015 	stw	r18,0(r8)
101092c8:	45400115 	stw	r21,4(r8)
101092cc:	d8801c15 	stw	r2,112(sp)
101092d0:	d8c01b15 	stw	r3,108(sp)
101092d4:	e0fff40e 	bge	fp,r3,101092a8 <__alt_data_end+0xfffe92a8>
101092d8:	1000101e 	bne	r2,zero,1010931c <___vfiprintf_internal_r+0xca0>
101092dc:	843ffc04 	addi	r16,r16,-16
101092e0:	01400044 	movi	r5,1
101092e4:	0009883a 	mov	r4,zero
101092e8:	d811883a 	mov	r8,sp
101092ec:	ac3ff316 	blt	r21,r16,101092bc <__alt_data_end+0xfffe92bc>
101092f0:	d8c02317 	ldw	r3,140(sp)
101092f4:	1405883a 	add	r2,r2,r16
101092f8:	44000115 	stw	r16,4(r8)
101092fc:	40c00015 	stw	r3,0(r8)
10109300:	d8801c15 	stw	r2,112(sp)
10109304:	d9401b15 	stw	r5,108(sp)
10109308:	00c001c4 	movi	r3,7
1010930c:	19401916 	blt	r3,r5,10109374 <___vfiprintf_internal_r+0xcf8>
10109310:	42000204 	addi	r8,r8,8
10109314:	29400044 	addi	r5,r5,1
10109318:	003e5506 	br	10108c70 <__alt_data_end+0xfffe8c70>
1010931c:	d9402017 	ldw	r5,128(sp)
10109320:	d9002117 	ldw	r4,132(sp)
10109324:	d9801a04 	addi	r6,sp,104
10109328:	01085680 	call	10108568 <__sprint_r.part.0>
1010932c:	10000b1e 	bne	r2,zero,1010935c <___vfiprintf_internal_r+0xce0>
10109330:	d9001b17 	ldw	r4,108(sp)
10109334:	d8801c17 	ldw	r2,112(sp)
10109338:	d811883a 	mov	r8,sp
1010933c:	21400044 	addi	r5,r4,1
10109340:	003fdc06 	br	101092b4 <__alt_data_end+0xfffe92b4>
10109344:	d8801c17 	ldw	r2,112(sp)
10109348:	10000426 	beq	r2,zero,1010935c <___vfiprintf_internal_r+0xce0>
1010934c:	d9402017 	ldw	r5,128(sp)
10109350:	d9002117 	ldw	r4,132(sp)
10109354:	d9801a04 	addi	r6,sp,104
10109358:	01085680 	call	10108568 <__sprint_r.part.0>
1010935c:	d9402017 	ldw	r5,128(sp)
10109360:	2880030b 	ldhu	r2,12(r5)
10109364:	1080100c 	andi	r2,r2,64
10109368:	10014d1e 	bne	r2,zero,101098a0 <___vfiprintf_internal_r+0x1224>
1010936c:	d8802417 	ldw	r2,144(sp)
10109370:	003d9706 	br	101089d0 <__alt_data_end+0xfffe89d0>
10109374:	1000d21e 	bne	r2,zero,101096c0 <___vfiprintf_internal_r+0x1044>
10109378:	00c00044 	movi	r3,1
1010937c:	a005883a 	mov	r2,r20
10109380:	ddc00015 	stw	r23,0(sp)
10109384:	dd000115 	stw	r20,4(sp)
10109388:	dd001c15 	stw	r20,112(sp)
1010938c:	d8c01b15 	stw	r3,108(sp)
10109390:	d811883a 	mov	r8,sp
10109394:	42000204 	addi	r8,r8,8
10109398:	8c40010c 	andi	r17,r17,4
1010939c:	88004026 	beq	r17,zero,101094a0 <___vfiprintf_internal_r+0xe24>
101093a0:	d9002517 	ldw	r4,148(sp)
101093a4:	24e3c83a 	sub	r17,r4,r19
101093a8:	04403d0e 	bge	zero,r17,101094a0 <___vfiprintf_internal_r+0xe24>
101093ac:	04000404 	movi	r16,16
101093b0:	8441a90e 	bge	r16,r17,10109a58 <___vfiprintf_internal_r+0x13dc>
101093b4:	00c40474 	movhi	r3,4113
101093b8:	18c1f504 	addi	r3,r3,2004
101093bc:	d9001b17 	ldw	r4,108(sp)
101093c0:	d8c02315 	stw	r3,140(sp)
101093c4:	050001c4 	movi	r20,7
101093c8:	dd402117 	ldw	r21,132(sp)
101093cc:	ddc02017 	ldw	r23,128(sp)
101093d0:	00000506 	br	101093e8 <___vfiprintf_internal_r+0xd6c>
101093d4:	21400084 	addi	r5,r4,2
101093d8:	42000204 	addi	r8,r8,8
101093dc:	1809883a 	mov	r4,r3
101093e0:	8c7ffc04 	addi	r17,r17,-16
101093e4:	84400f0e 	bge	r16,r17,10109424 <___vfiprintf_internal_r+0xda8>
101093e8:	01440474 	movhi	r5,4113
101093ec:	10800404 	addi	r2,r2,16
101093f0:	20c00044 	addi	r3,r4,1
101093f4:	2941f504 	addi	r5,r5,2004
101093f8:	41400015 	stw	r5,0(r8)
101093fc:	44000115 	stw	r16,4(r8)
10109400:	d8801c15 	stw	r2,112(sp)
10109404:	d8c01b15 	stw	r3,108(sp)
10109408:	a0fff20e 	bge	r20,r3,101093d4 <__alt_data_end+0xfffe93d4>
1010940c:	1000141e 	bne	r2,zero,10109460 <___vfiprintf_internal_r+0xde4>
10109410:	8c7ffc04 	addi	r17,r17,-16
10109414:	01400044 	movi	r5,1
10109418:	0009883a 	mov	r4,zero
1010941c:	d811883a 	mov	r8,sp
10109420:	847ff116 	blt	r16,r17,101093e8 <__alt_data_end+0xfffe93e8>
10109424:	d8c02317 	ldw	r3,140(sp)
10109428:	1445883a 	add	r2,r2,r17
1010942c:	44400115 	stw	r17,4(r8)
10109430:	40c00015 	stw	r3,0(r8)
10109434:	d8801c15 	stw	r2,112(sp)
10109438:	d9401b15 	stw	r5,108(sp)
1010943c:	00c001c4 	movi	r3,7
10109440:	1940170e 	bge	r3,r5,101094a0 <___vfiprintf_internal_r+0xe24>
10109444:	1000101e 	bne	r2,zero,10109488 <___vfiprintf_internal_r+0xe0c>
10109448:	d8802517 	ldw	r2,148(sp)
1010944c:	14c11616 	blt	r2,r19,101098a8 <___vfiprintf_internal_r+0x122c>
10109450:	d9002417 	ldw	r4,144(sp)
10109454:	2089883a 	add	r4,r4,r2
10109458:	d9002415 	stw	r4,144(sp)
1010945c:	003e1806 	br	10108cc0 <__alt_data_end+0xfffe8cc0>
10109460:	d9801a04 	addi	r6,sp,104
10109464:	b80b883a 	mov	r5,r23
10109468:	a809883a 	mov	r4,r21
1010946c:	01085680 	call	10108568 <__sprint_r.part.0>
10109470:	103fba1e 	bne	r2,zero,1010935c <__alt_data_end+0xfffe935c>
10109474:	d9001b17 	ldw	r4,108(sp)
10109478:	d8801c17 	ldw	r2,112(sp)
1010947c:	d811883a 	mov	r8,sp
10109480:	21400044 	addi	r5,r4,1
10109484:	003fd606 	br	101093e0 <__alt_data_end+0xfffe93e0>
10109488:	d9402017 	ldw	r5,128(sp)
1010948c:	d9002117 	ldw	r4,132(sp)
10109490:	d9801a04 	addi	r6,sp,104
10109494:	01085680 	call	10108568 <__sprint_r.part.0>
10109498:	103fb01e 	bne	r2,zero,1010935c <__alt_data_end+0xfffe935c>
1010949c:	d8801c17 	ldw	r2,112(sp)
101094a0:	d8c02517 	ldw	r3,148(sp)
101094a4:	1cc0010e 	bge	r3,r19,101094ac <___vfiprintf_internal_r+0xe30>
101094a8:	9807883a 	mov	r3,r19
101094ac:	d9002417 	ldw	r4,144(sp)
101094b0:	20c9883a 	add	r4,r4,r3
101094b4:	d9002415 	stw	r4,144(sp)
101094b8:	103e0126 	beq	r2,zero,10108cc0 <__alt_data_end+0xfffe8cc0>
101094bc:	d9402017 	ldw	r5,128(sp)
101094c0:	d9002117 	ldw	r4,132(sp)
101094c4:	d9801a04 	addi	r6,sp,104
101094c8:	01085680 	call	10108568 <__sprint_r.part.0>
101094cc:	103dfc26 	beq	r2,zero,10108cc0 <__alt_data_end+0xfffe8cc0>
101094d0:	003fa206 	br	1010935c <__alt_data_end+0xfffe935c>
101094d4:	d9402017 	ldw	r5,128(sp)
101094d8:	d9002117 	ldw	r4,132(sp)
101094dc:	d9801a04 	addi	r6,sp,104
101094e0:	d9c02b15 	stw	r7,172(sp)
101094e4:	01085680 	call	10108568 <__sprint_r.part.0>
101094e8:	d9c02b17 	ldw	r7,172(sp)
101094ec:	103f9b1e 	bne	r2,zero,1010935c <__alt_data_end+0xfffe935c>
101094f0:	d9001b17 	ldw	r4,108(sp)
101094f4:	d8801c17 	ldw	r2,112(sp)
101094f8:	d811883a 	mov	r8,sp
101094fc:	21800044 	addi	r6,r4,1
10109500:	003dbf06 	br	10108c00 <__alt_data_end+0xfffe8c00>
10109504:	1000d81e 	bne	r2,zero,10109868 <___vfiprintf_internal_r+0x11ec>
10109508:	d9001d87 	ldb	r4,118(sp)
1010950c:	20000a26 	beq	r4,zero,10109538 <___vfiprintf_internal_r+0xebc>
10109510:	00800044 	movi	r2,1
10109514:	d9001d84 	addi	r4,sp,118
10109518:	100b883a 	mov	r5,r2
1010951c:	d9000015 	stw	r4,0(sp)
10109520:	d8800115 	stw	r2,4(sp)
10109524:	d811883a 	mov	r8,sp
10109528:	2809883a 	mov	r4,r5
1010952c:	42000204 	addi	r8,r8,8
10109530:	29400044 	addi	r5,r5,1
10109534:	003d9506 	br	10108b8c <__alt_data_end+0xfffe8b8c>
10109538:	3800fd26 	beq	r7,zero,10109930 <___vfiprintf_internal_r+0x12b4>
1010953c:	00800084 	movi	r2,2
10109540:	d9001d04 	addi	r4,sp,116
10109544:	d9000015 	stw	r4,0(sp)
10109548:	d8800115 	stw	r2,4(sp)
1010954c:	01400044 	movi	r5,1
10109550:	d811883a 	mov	r8,sp
10109554:	2809883a 	mov	r4,r5
10109558:	42000204 	addi	r8,r8,8
1010955c:	29400044 	addi	r5,r5,1
10109560:	003f4606 	br	1010927c <__alt_data_end+0xfffe927c>
10109564:	d8802517 	ldw	r2,148(sp)
10109568:	14c0010e 	bge	r2,r19,10109570 <___vfiprintf_internal_r+0xef4>
1010956c:	9805883a 	mov	r2,r19
10109570:	d9402417 	ldw	r5,144(sp)
10109574:	288b883a 	add	r5,r5,r2
10109578:	d9402415 	stw	r5,144(sp)
1010957c:	003dd006 	br	10108cc0 <__alt_data_end+0xfffe8cc0>
10109580:	d8001d85 	stb	zero,118(sp)
10109584:	80005d16 	blt	r16,zero,101096fc <___vfiprintf_internal_r+0x1080>
10109588:	00ffdfc4 	movi	r3,-129
1010958c:	9d04b03a 	or	r2,r19,r20
10109590:	88e2703a 	and	r17,r17,r3
10109594:	103d3726 	beq	r2,zero,10108a74 <__alt_data_end+0xfffe8a74>
10109598:	002b883a 	mov	r21,zero
1010959c:	d9002617 	ldw	r4,152(sp)
101095a0:	ddc01a04 	addi	r23,sp,104
101095a4:	988003cc 	andi	r2,r19,15
101095a8:	a006973a 	slli	r3,r20,28
101095ac:	2085883a 	add	r2,r4,r2
101095b0:	9826d13a 	srli	r19,r19,4
101095b4:	10800003 	ldbu	r2,0(r2)
101095b8:	a028d13a 	srli	r20,r20,4
101095bc:	bdffffc4 	addi	r23,r23,-1
101095c0:	1ce6b03a 	or	r19,r3,r19
101095c4:	b8800005 	stb	r2,0(r23)
101095c8:	9d04b03a 	or	r2,r19,r20
101095cc:	103ff51e 	bne	r2,zero,101095a4 <__alt_data_end+0xfffe95a4>
101095d0:	d8801e17 	ldw	r2,120(sp)
101095d4:	15e9c83a 	sub	r20,r2,r23
101095d8:	003d2b06 	br	10108a88 <__alt_data_end+0xfffe8a88>
101095dc:	d9402017 	ldw	r5,128(sp)
101095e0:	d9002117 	ldw	r4,132(sp)
101095e4:	d9801a04 	addi	r6,sp,104
101095e8:	01085680 	call	10108568 <__sprint_r.part.0>
101095ec:	103f5b1e 	bne	r2,zero,1010935c <__alt_data_end+0xfffe935c>
101095f0:	d8801c17 	ldw	r2,112(sp)
101095f4:	d811883a 	mov	r8,sp
101095f8:	003f6706 	br	10109398 <__alt_data_end+0xfffe9398>
101095fc:	d9402017 	ldw	r5,128(sp)
10109600:	d9002117 	ldw	r4,132(sp)
10109604:	d9801a04 	addi	r6,sp,104
10109608:	01085680 	call	10108568 <__sprint_r.part.0>
1010960c:	103f531e 	bne	r2,zero,1010935c <__alt_data_end+0xfffe935c>
10109610:	d811883a 	mov	r8,sp
10109614:	003cd906 	br	1010897c <__alt_data_end+0xfffe897c>
10109618:	10803fcc 	andi	r2,r2,255
1010961c:	1080201c 	xori	r2,r2,128
10109620:	10bfe004 	addi	r2,r2,-128
10109624:	00c00c04 	movi	r3,48
10109628:	10ffe926 	beq	r2,r3,101095d0 <__alt_data_end+0xfffe95d0>
1010962c:	b8ffffc5 	stb	r3,-1(r23)
10109630:	d8c01e17 	ldw	r3,120(sp)
10109634:	b8bfffc4 	addi	r2,r23,-1
10109638:	102f883a 	mov	r23,r2
1010963c:	18a9c83a 	sub	r20,r3,r2
10109640:	003d1106 	br	10108a88 <__alt_data_end+0xfffe8a88>
10109644:	d9402017 	ldw	r5,128(sp)
10109648:	d9002117 	ldw	r4,132(sp)
1010964c:	d9801a04 	addi	r6,sp,104
10109650:	d8c02a15 	stw	r3,168(sp)
10109654:	d9c02b15 	stw	r7,172(sp)
10109658:	01085680 	call	10108568 <__sprint_r.part.0>
1010965c:	d8c02a17 	ldw	r3,168(sp)
10109660:	d9c02b17 	ldw	r7,172(sp)
10109664:	103f3d1e 	bne	r2,zero,1010935c <__alt_data_end+0xfffe935c>
10109668:	d9001b17 	ldw	r4,108(sp)
1010966c:	d8801c17 	ldw	r2,112(sp)
10109670:	d811883a 	mov	r8,sp
10109674:	21400044 	addi	r5,r4,1
10109678:	003d4406 	br	10108b8c <__alt_data_end+0xfffe8b8c>
1010967c:	d9402017 	ldw	r5,128(sp)
10109680:	d9002117 	ldw	r4,132(sp)
10109684:	d9801a04 	addi	r6,sp,104
10109688:	d8c02a15 	stw	r3,168(sp)
1010968c:	01085680 	call	10108568 <__sprint_r.part.0>
10109690:	d8c02a17 	ldw	r3,168(sp)
10109694:	103f311e 	bne	r2,zero,1010935c <__alt_data_end+0xfffe935c>
10109698:	d9001b17 	ldw	r4,108(sp)
1010969c:	d8801c17 	ldw	r2,112(sp)
101096a0:	d811883a 	mov	r8,sp
101096a4:	21400044 	addi	r5,r4,1
101096a8:	003ef406 	br	1010927c <__alt_data_end+0xfffe927c>
101096ac:	1000bd1e 	bne	r2,zero,101099a4 <___vfiprintf_internal_r+0x1328>
101096b0:	01400044 	movi	r5,1
101096b4:	0009883a 	mov	r4,zero
101096b8:	d811883a 	mov	r8,sp
101096bc:	003ef106 	br	10109284 <__alt_data_end+0xfffe9284>
101096c0:	d9402017 	ldw	r5,128(sp)
101096c4:	d9002117 	ldw	r4,132(sp)
101096c8:	d9801a04 	addi	r6,sp,104
101096cc:	01085680 	call	10108568 <__sprint_r.part.0>
101096d0:	103f221e 	bne	r2,zero,1010935c <__alt_data_end+0xfffe935c>
101096d4:	d9401b17 	ldw	r5,108(sp)
101096d8:	d8801c17 	ldw	r2,112(sp)
101096dc:	d811883a 	mov	r8,sp
101096e0:	29400044 	addi	r5,r5,1
101096e4:	003d6206 	br	10108c70 <__alt_data_end+0xfffe8c70>
101096e8:	01440474 	movhi	r5,4113
101096ec:	29419004 	addi	r5,r5,1600
101096f0:	d9402615 	stw	r5,152(sp)
101096f4:	d8c02215 	stw	r3,136(sp)
101096f8:	1023883a 	mov	r17,r2
101096fc:	9d04b03a 	or	r2,r19,r20
10109700:	103fa51e 	bne	r2,zero,10109598 <__alt_data_end+0xfffe9598>
10109704:	002b883a 	mov	r21,zero
10109708:	00800084 	movi	r2,2
1010970c:	003e4a06 	br	10109038 <__alt_data_end+0xfffe9038>
10109710:	01440474 	movhi	r5,4113
10109714:	29419004 	addi	r5,r5,1600
10109718:	002b883a 	mov	r21,zero
1010971c:	d9402615 	stw	r5,152(sp)
10109720:	003f9e06 	br	1010959c <__alt_data_end+0xfffe959c>
10109724:	d9402217 	ldw	r5,136(sp)
10109728:	d8001d85 	stb	zero,118(sp)
1010972c:	0029883a 	mov	r20,zero
10109730:	28800104 	addi	r2,r5,4
10109734:	2cc00017 	ldw	r19,0(r5)
10109738:	803e3a16 	blt	r16,zero,10109024 <__alt_data_end+0xfffe9024>
1010973c:	00ffdfc4 	movi	r3,-129
10109740:	d8802215 	stw	r2,136(sp)
10109744:	88e2703a 	and	r17,r17,r3
10109748:	002b883a 	mov	r21,zero
1010974c:	983e9b26 	beq	r19,zero,101091bc <__alt_data_end+0xfffe91bc>
10109750:	00800244 	movi	r2,9
10109754:	14fdc936 	bltu	r2,r19,10108e7c <__alt_data_end+0xfffe8e7c>
10109758:	003e9a06 	br	101091c4 <__alt_data_end+0xfffe91c4>
1010975c:	00800c04 	movi	r2,48
10109760:	d8c01d45 	stb	r3,117(sp)
10109764:	d8801d05 	stb	r2,116(sp)
10109768:	d8001d85 	stb	zero,118(sp)
1010976c:	88c00094 	ori	r3,r17,2
10109770:	80009c16 	blt	r16,zero,101099e4 <___vfiprintf_internal_r+0x1368>
10109774:	00bfdfc4 	movi	r2,-129
10109778:	88a2703a 	and	r17,r17,r2
1010977c:	8c400094 	ori	r17,r17,2
10109780:	002b883a 	mov	r21,zero
10109784:	003f8506 	br	1010959c <__alt_data_end+0xfffe959c>
10109788:	b029883a 	mov	r20,r22
1010978c:	003c0b06 	br	101087bc <__alt_data_end+0xfffe87bc>
10109790:	04e7c83a 	sub	r19,zero,r19
10109794:	05400b44 	movi	r21,45
10109798:	9804c03a 	cmpne	r2,r19,zero
1010979c:	0529c83a 	sub	r20,zero,r20
101097a0:	dd401d85 	stb	r21,118(sp)
101097a4:	a0a9c83a 	sub	r20,r20,r2
101097a8:	80009716 	blt	r16,zero,10109a08 <___vfiprintf_internal_r+0x138c>
101097ac:	00bfdfc4 	movi	r2,-129
101097b0:	88a2703a 	and	r17,r17,r2
101097b4:	003db006 	br	10108e78 <__alt_data_end+0xfffe8e78>
101097b8:	b0c00007 	ldb	r3,0(r22)
101097bc:	003c0c06 	br	101087f0 <__alt_data_end+0xfffe87f0>
101097c0:	8880100c 	andi	r2,r17,64
101097c4:	d8001d85 	stb	zero,118(sp)
101097c8:	1000461e 	bne	r2,zero,101098e4 <___vfiprintf_internal_r+0x1268>
101097cc:	d9002217 	ldw	r4,136(sp)
101097d0:	0029883a 	mov	r20,zero
101097d4:	20800104 	addi	r2,r4,4
101097d8:	24c00017 	ldw	r19,0(r4)
101097dc:	803df80e 	bge	r16,zero,10108fc0 <__alt_data_end+0xfffe8fc0>
101097e0:	9d06b03a 	or	r3,r19,r20
101097e4:	d8802215 	stw	r2,136(sp)
101097e8:	183d5e1e 	bne	r3,zero,10108d64 <__alt_data_end+0xfffe8d64>
101097ec:	002b883a 	mov	r21,zero
101097f0:	0005883a 	mov	r2,zero
101097f4:	003e1006 	br	10109038 <__alt_data_end+0xfffe9038>
101097f8:	8880040c 	andi	r2,r17,16
101097fc:	1000321e 	bne	r2,zero,101098c8 <___vfiprintf_internal_r+0x124c>
10109800:	8c40100c 	andi	r17,r17,64
10109804:	88008d26 	beq	r17,zero,10109a3c <___vfiprintf_internal_r+0x13c0>
10109808:	d9402217 	ldw	r5,136(sp)
1010980c:	d8c02417 	ldw	r3,144(sp)
10109810:	28800017 	ldw	r2,0(r5)
10109814:	29400104 	addi	r5,r5,4
10109818:	d9402215 	stw	r5,136(sp)
1010981c:	10c0000d 	sth	r3,0(r2)
10109820:	003bca06 	br	1010874c <__alt_data_end+0xfffe874c>
10109824:	8880100c 	andi	r2,r17,64
10109828:	10003a26 	beq	r2,zero,10109914 <___vfiprintf_internal_r+0x1298>
1010982c:	d8802217 	ldw	r2,136(sp)
10109830:	14c0000f 	ldh	r19,0(r2)
10109834:	10800104 	addi	r2,r2,4
10109838:	d8802215 	stw	r2,136(sp)
1010983c:	9829d7fa 	srai	r20,r19,31
10109840:	a005883a 	mov	r2,r20
10109844:	003d8506 	br	10108e5c <__alt_data_end+0xfffe8e5c>
10109848:	8880100c 	andi	r2,r17,64
1010984c:	10002b26 	beq	r2,zero,101098fc <___vfiprintf_internal_r+0x1280>
10109850:	d8802217 	ldw	r2,136(sp)
10109854:	0029883a 	mov	r20,zero
10109858:	14c0000b 	ldhu	r19,0(r2)
1010985c:	10800104 	addi	r2,r2,4
10109860:	d8802215 	stw	r2,136(sp)
10109864:	003d5d06 	br	10108ddc <__alt_data_end+0xfffe8ddc>
10109868:	d9402017 	ldw	r5,128(sp)
1010986c:	d9002117 	ldw	r4,132(sp)
10109870:	d9801a04 	addi	r6,sp,104
10109874:	d8c02a15 	stw	r3,168(sp)
10109878:	d9c02b15 	stw	r7,172(sp)
1010987c:	01085680 	call	10108568 <__sprint_r.part.0>
10109880:	d8c02a17 	ldw	r3,168(sp)
10109884:	d9c02b17 	ldw	r7,172(sp)
10109888:	103eb41e 	bne	r2,zero,1010935c <__alt_data_end+0xfffe935c>
1010988c:	d9001b17 	ldw	r4,108(sp)
10109890:	d8801c17 	ldw	r2,112(sp)
10109894:	d811883a 	mov	r8,sp
10109898:	21400044 	addi	r5,r4,1
1010989c:	003e6706 	br	1010923c <__alt_data_end+0xfffe923c>
101098a0:	00bfffc4 	movi	r2,-1
101098a4:	003c4a06 	br	101089d0 <__alt_data_end+0xfffe89d0>
101098a8:	9805883a 	mov	r2,r19
101098ac:	003ee806 	br	10109450 <__alt_data_end+0xfffe9450>
101098b0:	d8c02217 	ldw	r3,136(sp)
101098b4:	0029883a 	mov	r20,zero
101098b8:	18800104 	addi	r2,r3,4
101098bc:	1cc0000b 	ldhu	r19,0(r3)
101098c0:	803f9e0e 	bge	r16,zero,1010973c <__alt_data_end+0xfffe973c>
101098c4:	003dd706 	br	10109024 <__alt_data_end+0xfffe9024>
101098c8:	d8c02217 	ldw	r3,136(sp)
101098cc:	d9002417 	ldw	r4,144(sp)
101098d0:	18800017 	ldw	r2,0(r3)
101098d4:	18c00104 	addi	r3,r3,4
101098d8:	d8c02215 	stw	r3,136(sp)
101098dc:	11000015 	stw	r4,0(r2)
101098e0:	003b9a06 	br	1010874c <__alt_data_end+0xfffe874c>
101098e4:	d8c02217 	ldw	r3,136(sp)
101098e8:	0029883a 	mov	r20,zero
101098ec:	18800104 	addi	r2,r3,4
101098f0:	1cc0000b 	ldhu	r19,0(r3)
101098f4:	803db20e 	bge	r16,zero,10108fc0 <__alt_data_end+0xfffe8fc0>
101098f8:	003fb906 	br	101097e0 <__alt_data_end+0xfffe97e0>
101098fc:	d9002217 	ldw	r4,136(sp)
10109900:	0029883a 	mov	r20,zero
10109904:	24c00017 	ldw	r19,0(r4)
10109908:	21000104 	addi	r4,r4,4
1010990c:	d9002215 	stw	r4,136(sp)
10109910:	003d3206 	br	10108ddc <__alt_data_end+0xfffe8ddc>
10109914:	d8c02217 	ldw	r3,136(sp)
10109918:	1cc00017 	ldw	r19,0(r3)
1010991c:	18c00104 	addi	r3,r3,4
10109920:	d8c02215 	stw	r3,136(sp)
10109924:	9829d7fa 	srai	r20,r19,31
10109928:	a005883a 	mov	r2,r20
1010992c:	003d4b06 	br	10108e5c <__alt_data_end+0xfffe8e5c>
10109930:	0009883a 	mov	r4,zero
10109934:	01400044 	movi	r5,1
10109938:	d811883a 	mov	r8,sp
1010993c:	003e4f06 	br	1010927c <__alt_data_end+0xfffe927c>
10109940:	d8c02215 	stw	r3,136(sp)
10109944:	002b883a 	mov	r21,zero
10109948:	003db806 	br	1010902c <__alt_data_end+0xfffe902c>
1010994c:	d811883a 	mov	r8,sp
10109950:	003e9606 	br	101093ac <__alt_data_end+0xfffe93ac>
10109954:	01040474 	movhi	r4,4113
10109958:	2101f104 	addi	r4,r4,1988
1010995c:	d9002315 	stw	r4,140(sp)
10109960:	003e6306 	br	101092f0 <__alt_data_end+0xfffe92f0>
10109964:	b0c00043 	ldbu	r3,1(r22)
10109968:	8c400814 	ori	r17,r17,32
1010996c:	b5800044 	addi	r22,r22,1
10109970:	18c03fcc 	andi	r3,r3,255
10109974:	18c0201c 	xori	r3,r3,128
10109978:	18ffe004 	addi	r3,r3,-128
1010997c:	003b9c06 	br	101087f0 <__alt_data_end+0xfffe87f0>
10109980:	b809883a 	mov	r4,r23
10109984:	da002a15 	stw	r8,168(sp)
10109988:	0100f340 	call	10100f34 <strlen>
1010998c:	1029883a 	mov	r20,r2
10109990:	dd401d83 	ldbu	r21,118(sp)
10109994:	df002215 	stw	fp,136(sp)
10109998:	0021883a 	mov	r16,zero
1010999c:	da002a17 	ldw	r8,168(sp)
101099a0:	003c3906 	br	10108a88 <__alt_data_end+0xfffe8a88>
101099a4:	d9402017 	ldw	r5,128(sp)
101099a8:	d9002117 	ldw	r4,132(sp)
101099ac:	d9801a04 	addi	r6,sp,104
101099b0:	01085680 	call	10108568 <__sprint_r.part.0>
101099b4:	103e691e 	bne	r2,zero,1010935c <__alt_data_end+0xfffe935c>
101099b8:	d9001b17 	ldw	r4,108(sp)
101099bc:	d8801c17 	ldw	r2,112(sp)
101099c0:	d811883a 	mov	r8,sp
101099c4:	21400044 	addi	r5,r4,1
101099c8:	003e2e06 	br	10109284 <__alt_data_end+0xfffe9284>
101099cc:	01040474 	movhi	r4,4113
101099d0:	2101f504 	addi	r4,r4,2004
101099d4:	d9002315 	stw	r4,140(sp)
101099d8:	d9001b17 	ldw	r4,108(sp)
101099dc:	21000044 	addi	r4,r4,1
101099e0:	003c5e06 	br	10108b5c <__alt_data_end+0xfffe8b5c>
101099e4:	002b883a 	mov	r21,zero
101099e8:	00800084 	movi	r2,2
101099ec:	10803fcc 	andi	r2,r2,255
101099f0:	01000044 	movi	r4,1
101099f4:	11002b26 	beq	r2,r4,10109aa4 <___vfiprintf_internal_r+0x1428>
101099f8:	01000084 	movi	r4,2
101099fc:	11002b1e 	bne	r2,r4,10109aac <___vfiprintf_internal_r+0x1430>
10109a00:	1823883a 	mov	r17,r3
10109a04:	003ee506 	br	1010959c <__alt_data_end+0xfffe959c>
10109a08:	8807883a 	mov	r3,r17
10109a0c:	00800044 	movi	r2,1
10109a10:	003ff606 	br	101099ec <__alt_data_end+0xfffe99ec>
10109a14:	00800184 	movi	r2,6
10109a18:	1400012e 	bgeu	r2,r16,10109a20 <___vfiprintf_internal_r+0x13a4>
10109a1c:	1021883a 	mov	r16,r2
10109a20:	8029883a 	mov	r20,r16
10109a24:	8027883a 	mov	r19,r16
10109a28:	80002216 	blt	r16,zero,10109ab4 <___vfiprintf_internal_r+0x1438>
10109a2c:	05c40474 	movhi	r23,4113
10109a30:	df002215 	stw	fp,136(sp)
10109a34:	bdc19504 	addi	r23,r23,1620
10109a38:	003cfb06 	br	10108e28 <__alt_data_end+0xfffe8e28>
10109a3c:	d9002217 	ldw	r4,136(sp)
10109a40:	d9402417 	ldw	r5,144(sp)
10109a44:	20800017 	ldw	r2,0(r4)
10109a48:	21000104 	addi	r4,r4,4
10109a4c:	d9002215 	stw	r4,136(sp)
10109a50:	11400015 	stw	r5,0(r2)
10109a54:	003b3d06 	br	1010874c <__alt_data_end+0xfffe874c>
10109a58:	01440474 	movhi	r5,4113
10109a5c:	2941f504 	addi	r5,r5,2004
10109a60:	d9402315 	stw	r5,140(sp)
10109a64:	d9401b17 	ldw	r5,108(sp)
10109a68:	29400044 	addi	r5,r5,1
10109a6c:	003e6d06 	br	10109424 <__alt_data_end+0xfffe9424>
10109a70:	8029883a 	mov	r20,r16
10109a74:	dd401d83 	ldbu	r21,118(sp)
10109a78:	df002215 	stw	fp,136(sp)
10109a7c:	0021883a 	mov	r16,zero
10109a80:	003c0106 	br	10108a88 <__alt_data_end+0xfffe8a88>
10109a84:	00c40474 	movhi	r3,4113
10109a88:	18c1f104 	addi	r3,r3,1988
10109a8c:	d8c02315 	stw	r3,140(sp)
10109a90:	280d883a 	mov	r6,r5
10109a94:	003c6906 	br	10108c3c <__alt_data_end+0xfffe8c3c>
10109a98:	802d883a 	mov	r22,r16
10109a9c:	0021883a 	mov	r16,zero
10109aa0:	003b5406 	br	101087f4 <__alt_data_end+0xfffe87f4>
10109aa4:	1823883a 	mov	r17,r3
10109aa8:	003cf306 	br	10108e78 <__alt_data_end+0xfffe8e78>
10109aac:	1823883a 	mov	r17,r3
10109ab0:	003cad06 	br	10108d68 <__alt_data_end+0xfffe8d68>
10109ab4:	0027883a 	mov	r19,zero
10109ab8:	003fdc06 	br	10109a2c <__alt_data_end+0xfffe9a2c>
10109abc:	d9402217 	ldw	r5,136(sp)
10109ac0:	8005883a 	mov	r2,r16
10109ac4:	b0c00043 	ldbu	r3,1(r22)
10109ac8:	2c000017 	ldw	r16,0(r5)
10109acc:	29000104 	addi	r4,r5,4
10109ad0:	d9002215 	stw	r4,136(sp)
10109ad4:	102d883a 	mov	r22,r2
10109ad8:	803fa50e 	bge	r16,zero,10109970 <__alt_data_end+0xfffe9970>
10109adc:	18c03fcc 	andi	r3,r3,255
10109ae0:	18c0201c 	xori	r3,r3,128
10109ae4:	043fffc4 	movi	r16,-1
10109ae8:	18ffe004 	addi	r3,r3,-128
10109aec:	003b4006 	br	101087f0 <__alt_data_end+0xfffe87f0>
10109af0:	d9402303 	ldbu	r5,140(sp)
10109af4:	d9401d85 	stb	r5,118(sp)
10109af8:	003cae06 	br	10108db4 <__alt_data_end+0xfffe8db4>
10109afc:	d8c02303 	ldbu	r3,140(sp)
10109b00:	d8c01d85 	stb	r3,118(sp)
10109b04:	003d1406 	br	10108f58 <__alt_data_end+0xfffe8f58>
10109b08:	d8c02303 	ldbu	r3,140(sp)
10109b0c:	d8c01d85 	stb	r3,118(sp)
10109b10:	003cca06 	br	10108e3c <__alt_data_end+0xfffe8e3c>
10109b14:	8880004c 	andi	r2,r17,1
10109b18:	002b883a 	mov	r21,zero
10109b1c:	10000526 	beq	r2,zero,10109b34 <___vfiprintf_internal_r+0x14b8>
10109b20:	00800c04 	movi	r2,48
10109b24:	d88019c5 	stb	r2,103(sp)
10109b28:	dd002817 	ldw	r20,160(sp)
10109b2c:	ddc019c4 	addi	r23,sp,103
10109b30:	003bd506 	br	10108a88 <__alt_data_end+0xfffe8a88>
10109b34:	0029883a 	mov	r20,zero
10109b38:	ddc01a04 	addi	r23,sp,104
10109b3c:	003bd206 	br	10108a88 <__alt_data_end+0xfffe8a88>
10109b40:	d9002303 	ldbu	r4,140(sp)
10109b44:	d9001d85 	stb	r4,118(sp)
10109b48:	003da606 	br	101091e4 <__alt_data_end+0xfffe91e4>
10109b4c:	d8c02303 	ldbu	r3,140(sp)
10109b50:	d8c01d85 	stb	r3,118(sp)
10109b54:	003c7606 	br	10108d30 <__alt_data_end+0xfffe8d30>
10109b58:	d8c02303 	ldbu	r3,140(sp)
10109b5c:	d8c01d85 	stb	r3,118(sp)
10109b60:	003c6506 	br	10108cf8 <__alt_data_end+0xfffe8cf8>
10109b64:	d9002303 	ldbu	r4,140(sp)
10109b68:	d9001d85 	stb	r4,118(sp)
10109b6c:	003d3d06 	br	10109064 <__alt_data_end+0xfffe9064>
10109b70:	d8c02303 	ldbu	r3,140(sp)
10109b74:	d8c01d85 	stb	r3,118(sp)
10109b78:	003d1d06 	br	10108ff0 <__alt_data_end+0xfffe8ff0>
10109b7c:	d8c02303 	ldbu	r3,140(sp)
10109b80:	d8c01d85 	stb	r3,118(sp)
10109b84:	003d0306 	br	10108f94 <__alt_data_end+0xfffe8f94>

10109b88 <__vfiprintf_internal>:
10109b88:	00840474 	movhi	r2,4113
10109b8c:	1088ff04 	addi	r2,r2,9212
10109b90:	300f883a 	mov	r7,r6
10109b94:	280d883a 	mov	r6,r5
10109b98:	200b883a 	mov	r5,r4
10109b9c:	11000017 	ldw	r4,0(r2)
10109ba0:	010867c1 	jmpi	1010867c <___vfiprintf_internal_r>

10109ba4 <__sbprintf>:
10109ba4:	2880030b 	ldhu	r2,12(r5)
10109ba8:	2ac01917 	ldw	r11,100(r5)
10109bac:	2a80038b 	ldhu	r10,14(r5)
10109bb0:	2a400717 	ldw	r9,28(r5)
10109bb4:	2a000917 	ldw	r8,36(r5)
10109bb8:	defee204 	addi	sp,sp,-1144
10109bbc:	00c10004 	movi	r3,1024
10109bc0:	dc011a15 	stw	r16,1128(sp)
10109bc4:	10bfff4c 	andi	r2,r2,65533
10109bc8:	2821883a 	mov	r16,r5
10109bcc:	d8cb883a 	add	r5,sp,r3
10109bd0:	dc811c15 	stw	r18,1136(sp)
10109bd4:	dc411b15 	stw	r17,1132(sp)
10109bd8:	dfc11d15 	stw	ra,1140(sp)
10109bdc:	2025883a 	mov	r18,r4
10109be0:	d881030d 	sth	r2,1036(sp)
10109be4:	dac11915 	stw	r11,1124(sp)
10109be8:	da81038d 	sth	r10,1038(sp)
10109bec:	da410715 	stw	r9,1052(sp)
10109bf0:	da010915 	stw	r8,1060(sp)
10109bf4:	dec10015 	stw	sp,1024(sp)
10109bf8:	dec10415 	stw	sp,1040(sp)
10109bfc:	d8c10215 	stw	r3,1032(sp)
10109c00:	d8c10515 	stw	r3,1044(sp)
10109c04:	d8010615 	stw	zero,1048(sp)
10109c08:	010867c0 	call	1010867c <___vfiprintf_internal_r>
10109c0c:	1023883a 	mov	r17,r2
10109c10:	10000416 	blt	r2,zero,10109c24 <__sbprintf+0x80>
10109c14:	d9410004 	addi	r5,sp,1024
10109c18:	9009883a 	mov	r4,r18
10109c1c:	0104fa00 	call	10104fa0 <_fflush_r>
10109c20:	10000d1e 	bne	r2,zero,10109c58 <__sbprintf+0xb4>
10109c24:	d881030b 	ldhu	r2,1036(sp)
10109c28:	1080100c 	andi	r2,r2,64
10109c2c:	10000326 	beq	r2,zero,10109c3c <__sbprintf+0x98>
10109c30:	8080030b 	ldhu	r2,12(r16)
10109c34:	10801014 	ori	r2,r2,64
10109c38:	8080030d 	sth	r2,12(r16)
10109c3c:	8805883a 	mov	r2,r17
10109c40:	dfc11d17 	ldw	ra,1140(sp)
10109c44:	dc811c17 	ldw	r18,1136(sp)
10109c48:	dc411b17 	ldw	r17,1132(sp)
10109c4c:	dc011a17 	ldw	r16,1128(sp)
10109c50:	dec11e04 	addi	sp,sp,1144
10109c54:	f800283a 	ret
10109c58:	047fffc4 	movi	r17,-1
10109c5c:	003ff106 	br	10109c24 <__alt_data_end+0xfffe9c24>

10109c60 <_write_r>:
10109c60:	defffd04 	addi	sp,sp,-12
10109c64:	2805883a 	mov	r2,r5
10109c68:	dc000015 	stw	r16,0(sp)
10109c6c:	04040474 	movhi	r16,4113
10109c70:	dc400115 	stw	r17,4(sp)
10109c74:	300b883a 	mov	r5,r6
10109c78:	840ffd04 	addi	r16,r16,16372
10109c7c:	2023883a 	mov	r17,r4
10109c80:	380d883a 	mov	r6,r7
10109c84:	1009883a 	mov	r4,r2
10109c88:	dfc00215 	stw	ra,8(sp)
10109c8c:	80000015 	stw	zero,0(r16)
10109c90:	010e2a40 	call	1010e2a4 <write>
10109c94:	00ffffc4 	movi	r3,-1
10109c98:	10c00526 	beq	r2,r3,10109cb0 <_write_r+0x50>
10109c9c:	dfc00217 	ldw	ra,8(sp)
10109ca0:	dc400117 	ldw	r17,4(sp)
10109ca4:	dc000017 	ldw	r16,0(sp)
10109ca8:	dec00304 	addi	sp,sp,12
10109cac:	f800283a 	ret
10109cb0:	80c00017 	ldw	r3,0(r16)
10109cb4:	183ff926 	beq	r3,zero,10109c9c <__alt_data_end+0xfffe9c9c>
10109cb8:	88c00015 	stw	r3,0(r17)
10109cbc:	003ff706 	br	10109c9c <__alt_data_end+0xfffe9c9c>

10109cc0 <_close_r>:
10109cc0:	defffd04 	addi	sp,sp,-12
10109cc4:	dc000015 	stw	r16,0(sp)
10109cc8:	04040474 	movhi	r16,4113
10109ccc:	dc400115 	stw	r17,4(sp)
10109cd0:	840ffd04 	addi	r16,r16,16372
10109cd4:	2023883a 	mov	r17,r4
10109cd8:	2809883a 	mov	r4,r5
10109cdc:	dfc00215 	stw	ra,8(sp)
10109ce0:	80000015 	stw	zero,0(r16)
10109ce4:	010da4c0 	call	1010da4c <close>
10109ce8:	00ffffc4 	movi	r3,-1
10109cec:	10c00526 	beq	r2,r3,10109d04 <_close_r+0x44>
10109cf0:	dfc00217 	ldw	ra,8(sp)
10109cf4:	dc400117 	ldw	r17,4(sp)
10109cf8:	dc000017 	ldw	r16,0(sp)
10109cfc:	dec00304 	addi	sp,sp,12
10109d00:	f800283a 	ret
10109d04:	80c00017 	ldw	r3,0(r16)
10109d08:	183ff926 	beq	r3,zero,10109cf0 <__alt_data_end+0xfffe9cf0>
10109d0c:	88c00015 	stw	r3,0(r17)
10109d10:	003ff706 	br	10109cf0 <__alt_data_end+0xfffe9cf0>

10109d14 <_calloc_r>:
10109d14:	defffe04 	addi	sp,sp,-8
10109d18:	2805883a 	mov	r2,r5
10109d1c:	dc000015 	stw	r16,0(sp)
10109d20:	300b883a 	mov	r5,r6
10109d24:	2021883a 	mov	r16,r4
10109d28:	1009883a 	mov	r4,r2
10109d2c:	dfc00115 	stw	ra,4(sp)
10109d30:	0100c840 	call	10100c84 <__mulsi3>
10109d34:	100b883a 	mov	r5,r2
10109d38:	8009883a 	mov	r4,r16
10109d3c:	01060f80 	call	101060f8 <_malloc_r>
10109d40:	10002926 	beq	r2,zero,10109de8 <_calloc_r+0xd4>
10109d44:	11bfff17 	ldw	r6,-4(r2)
10109d48:	1021883a 	mov	r16,r2
10109d4c:	00bfff04 	movi	r2,-4
10109d50:	308c703a 	and	r6,r6,r2
10109d54:	00c00904 	movi	r3,36
10109d58:	308d883a 	add	r6,r6,r2
10109d5c:	19801636 	bltu	r3,r6,10109db8 <_calloc_r+0xa4>
10109d60:	008004c4 	movi	r2,19
10109d64:	11800b2e 	bgeu	r2,r6,10109d94 <_calloc_r+0x80>
10109d68:	80000015 	stw	zero,0(r16)
10109d6c:	80000115 	stw	zero,4(r16)
10109d70:	008006c4 	movi	r2,27
10109d74:	11801a2e 	bgeu	r2,r6,10109de0 <_calloc_r+0xcc>
10109d78:	80000215 	stw	zero,8(r16)
10109d7c:	80000315 	stw	zero,12(r16)
10109d80:	30c0151e 	bne	r6,r3,10109dd8 <_calloc_r+0xc4>
10109d84:	80000415 	stw	zero,16(r16)
10109d88:	80800604 	addi	r2,r16,24
10109d8c:	80000515 	stw	zero,20(r16)
10109d90:	00000106 	br	10109d98 <_calloc_r+0x84>
10109d94:	8005883a 	mov	r2,r16
10109d98:	10000015 	stw	zero,0(r2)
10109d9c:	10000115 	stw	zero,4(r2)
10109da0:	10000215 	stw	zero,8(r2)
10109da4:	8005883a 	mov	r2,r16
10109da8:	dfc00117 	ldw	ra,4(sp)
10109dac:	dc000017 	ldw	r16,0(sp)
10109db0:	dec00204 	addi	sp,sp,8
10109db4:	f800283a 	ret
10109db8:	000b883a 	mov	r5,zero
10109dbc:	8009883a 	mov	r4,r16
10109dc0:	0106b440 	call	10106b44 <memset>
10109dc4:	8005883a 	mov	r2,r16
10109dc8:	dfc00117 	ldw	ra,4(sp)
10109dcc:	dc000017 	ldw	r16,0(sp)
10109dd0:	dec00204 	addi	sp,sp,8
10109dd4:	f800283a 	ret
10109dd8:	80800404 	addi	r2,r16,16
10109ddc:	003fee06 	br	10109d98 <__alt_data_end+0xfffe9d98>
10109de0:	80800204 	addi	r2,r16,8
10109de4:	003fec06 	br	10109d98 <__alt_data_end+0xfffe9d98>
10109de8:	0005883a 	mov	r2,zero
10109dec:	003fee06 	br	10109da8 <__alt_data_end+0xfffe9da8>

10109df0 <_fclose_r>:
10109df0:	28003926 	beq	r5,zero,10109ed8 <_fclose_r+0xe8>
10109df4:	defffc04 	addi	sp,sp,-16
10109df8:	dc400115 	stw	r17,4(sp)
10109dfc:	dc000015 	stw	r16,0(sp)
10109e00:	dfc00315 	stw	ra,12(sp)
10109e04:	dc800215 	stw	r18,8(sp)
10109e08:	2023883a 	mov	r17,r4
10109e0c:	2821883a 	mov	r16,r5
10109e10:	20000226 	beq	r4,zero,10109e1c <_fclose_r+0x2c>
10109e14:	20800e17 	ldw	r2,56(r4)
10109e18:	10002726 	beq	r2,zero,10109eb8 <_fclose_r+0xc8>
10109e1c:	8080030f 	ldh	r2,12(r16)
10109e20:	1000071e 	bne	r2,zero,10109e40 <_fclose_r+0x50>
10109e24:	0005883a 	mov	r2,zero
10109e28:	dfc00317 	ldw	ra,12(sp)
10109e2c:	dc800217 	ldw	r18,8(sp)
10109e30:	dc400117 	ldw	r17,4(sp)
10109e34:	dc000017 	ldw	r16,0(sp)
10109e38:	dec00404 	addi	sp,sp,16
10109e3c:	f800283a 	ret
10109e40:	800b883a 	mov	r5,r16
10109e44:	8809883a 	mov	r4,r17
10109e48:	0104d840 	call	10104d84 <__sflush_r>
10109e4c:	1025883a 	mov	r18,r2
10109e50:	80800b17 	ldw	r2,44(r16)
10109e54:	10000426 	beq	r2,zero,10109e68 <_fclose_r+0x78>
10109e58:	81400717 	ldw	r5,28(r16)
10109e5c:	8809883a 	mov	r4,r17
10109e60:	103ee83a 	callr	r2
10109e64:	10001616 	blt	r2,zero,10109ec0 <_fclose_r+0xd0>
10109e68:	8080030b 	ldhu	r2,12(r16)
10109e6c:	1080200c 	andi	r2,r2,128
10109e70:	1000151e 	bne	r2,zero,10109ec8 <_fclose_r+0xd8>
10109e74:	81400c17 	ldw	r5,48(r16)
10109e78:	28000526 	beq	r5,zero,10109e90 <_fclose_r+0xa0>
10109e7c:	80801004 	addi	r2,r16,64
10109e80:	28800226 	beq	r5,r2,10109e8c <_fclose_r+0x9c>
10109e84:	8809883a 	mov	r4,r17
10109e88:	01055000 	call	10105500 <_free_r>
10109e8c:	80000c15 	stw	zero,48(r16)
10109e90:	81401117 	ldw	r5,68(r16)
10109e94:	28000326 	beq	r5,zero,10109ea4 <_fclose_r+0xb4>
10109e98:	8809883a 	mov	r4,r17
10109e9c:	01055000 	call	10105500 <_free_r>
10109ea0:	80001115 	stw	zero,68(r16)
10109ea4:	010539c0 	call	1010539c <__sfp_lock_acquire>
10109ea8:	8000030d 	sth	zero,12(r16)
10109eac:	01053a00 	call	101053a0 <__sfp_lock_release>
10109eb0:	9005883a 	mov	r2,r18
10109eb4:	003fdc06 	br	10109e28 <__alt_data_end+0xfffe9e28>
10109eb8:	010538c0 	call	1010538c <__sinit>
10109ebc:	003fd706 	br	10109e1c <__alt_data_end+0xfffe9e1c>
10109ec0:	04bfffc4 	movi	r18,-1
10109ec4:	003fe806 	br	10109e68 <__alt_data_end+0xfffe9e68>
10109ec8:	81400417 	ldw	r5,16(r16)
10109ecc:	8809883a 	mov	r4,r17
10109ed0:	01055000 	call	10105500 <_free_r>
10109ed4:	003fe706 	br	10109e74 <__alt_data_end+0xfffe9e74>
10109ed8:	0005883a 	mov	r2,zero
10109edc:	f800283a 	ret

10109ee0 <fclose>:
10109ee0:	00840474 	movhi	r2,4113
10109ee4:	1088ff04 	addi	r2,r2,9212
10109ee8:	200b883a 	mov	r5,r4
10109eec:	11000017 	ldw	r4,0(r2)
10109ef0:	0109df01 	jmpi	10109df0 <_fclose_r>

10109ef4 <__fputwc>:
10109ef4:	defff804 	addi	sp,sp,-32
10109ef8:	dcc00415 	stw	r19,16(sp)
10109efc:	dc800315 	stw	r18,12(sp)
10109f00:	dc000115 	stw	r16,4(sp)
10109f04:	dfc00715 	stw	ra,28(sp)
10109f08:	dd400615 	stw	r21,24(sp)
10109f0c:	dd000515 	stw	r20,20(sp)
10109f10:	dc400215 	stw	r17,8(sp)
10109f14:	2027883a 	mov	r19,r4
10109f18:	2825883a 	mov	r18,r5
10109f1c:	3021883a 	mov	r16,r6
10109f20:	0105ee80 	call	10105ee8 <__locale_mb_cur_max>
10109f24:	00c00044 	movi	r3,1
10109f28:	10c03e26 	beq	r2,r3,1010a024 <__fputwc+0x130>
10109f2c:	81c01704 	addi	r7,r16,92
10109f30:	900d883a 	mov	r6,r18
10109f34:	d80b883a 	mov	r5,sp
10109f38:	9809883a 	mov	r4,r19
10109f3c:	010a3c40 	call	1010a3c4 <_wcrtomb_r>
10109f40:	1029883a 	mov	r20,r2
10109f44:	00bfffc4 	movi	r2,-1
10109f48:	a0802026 	beq	r20,r2,10109fcc <__fputwc+0xd8>
10109f4c:	d9400003 	ldbu	r5,0(sp)
10109f50:	a0001c26 	beq	r20,zero,10109fc4 <__fputwc+0xd0>
10109f54:	0023883a 	mov	r17,zero
10109f58:	05400284 	movi	r21,10
10109f5c:	00000906 	br	10109f84 <__fputwc+0x90>
10109f60:	80800017 	ldw	r2,0(r16)
10109f64:	11400005 	stb	r5,0(r2)
10109f68:	80c00017 	ldw	r3,0(r16)
10109f6c:	18c00044 	addi	r3,r3,1
10109f70:	80c00015 	stw	r3,0(r16)
10109f74:	8c400044 	addi	r17,r17,1
10109f78:	dc45883a 	add	r2,sp,r17
10109f7c:	8d00112e 	bgeu	r17,r20,10109fc4 <__fputwc+0xd0>
10109f80:	11400003 	ldbu	r5,0(r2)
10109f84:	80c00217 	ldw	r3,8(r16)
10109f88:	18ffffc4 	addi	r3,r3,-1
10109f8c:	80c00215 	stw	r3,8(r16)
10109f90:	183ff30e 	bge	r3,zero,10109f60 <__alt_data_end+0xfffe9f60>
10109f94:	80800617 	ldw	r2,24(r16)
10109f98:	18801916 	blt	r3,r2,1010a000 <__fputwc+0x10c>
10109f9c:	80800017 	ldw	r2,0(r16)
10109fa0:	11400005 	stb	r5,0(r2)
10109fa4:	80800017 	ldw	r2,0(r16)
10109fa8:	10c00003 	ldbu	r3,0(r2)
10109fac:	10800044 	addi	r2,r2,1
10109fb0:	1d402326 	beq	r3,r21,1010a040 <__fputwc+0x14c>
10109fb4:	80800015 	stw	r2,0(r16)
10109fb8:	8c400044 	addi	r17,r17,1
10109fbc:	dc45883a 	add	r2,sp,r17
10109fc0:	8d3fef36 	bltu	r17,r20,10109f80 <__alt_data_end+0xfffe9f80>
10109fc4:	9005883a 	mov	r2,r18
10109fc8:	00000406 	br	10109fdc <__fputwc+0xe8>
10109fcc:	80c0030b 	ldhu	r3,12(r16)
10109fd0:	a005883a 	mov	r2,r20
10109fd4:	18c01014 	ori	r3,r3,64
10109fd8:	80c0030d 	sth	r3,12(r16)
10109fdc:	dfc00717 	ldw	ra,28(sp)
10109fe0:	dd400617 	ldw	r21,24(sp)
10109fe4:	dd000517 	ldw	r20,20(sp)
10109fe8:	dcc00417 	ldw	r19,16(sp)
10109fec:	dc800317 	ldw	r18,12(sp)
10109ff0:	dc400217 	ldw	r17,8(sp)
10109ff4:	dc000117 	ldw	r16,4(sp)
10109ff8:	dec00804 	addi	sp,sp,32
10109ffc:	f800283a 	ret
1010a000:	800d883a 	mov	r6,r16
1010a004:	29403fcc 	andi	r5,r5,255
1010a008:	9809883a 	mov	r4,r19
1010a00c:	010a26c0 	call	1010a26c <__swbuf_r>
1010a010:	10bfffe0 	cmpeqi	r2,r2,-1
1010a014:	10803fcc 	andi	r2,r2,255
1010a018:	103fd626 	beq	r2,zero,10109f74 <__alt_data_end+0xfffe9f74>
1010a01c:	00bfffc4 	movi	r2,-1
1010a020:	003fee06 	br	10109fdc <__alt_data_end+0xfffe9fdc>
1010a024:	90ffffc4 	addi	r3,r18,-1
1010a028:	01003f84 	movi	r4,254
1010a02c:	20ffbf36 	bltu	r4,r3,10109f2c <__alt_data_end+0xfffe9f2c>
1010a030:	900b883a 	mov	r5,r18
1010a034:	dc800005 	stb	r18,0(sp)
1010a038:	1029883a 	mov	r20,r2
1010a03c:	003fc506 	br	10109f54 <__alt_data_end+0xfffe9f54>
1010a040:	800d883a 	mov	r6,r16
1010a044:	a80b883a 	mov	r5,r21
1010a048:	9809883a 	mov	r4,r19
1010a04c:	010a26c0 	call	1010a26c <__swbuf_r>
1010a050:	10bfffe0 	cmpeqi	r2,r2,-1
1010a054:	003fef06 	br	1010a014 <__alt_data_end+0xfffea014>

1010a058 <_fputwc_r>:
1010a058:	3080030b 	ldhu	r2,12(r6)
1010a05c:	10c8000c 	andi	r3,r2,8192
1010a060:	1800051e 	bne	r3,zero,1010a078 <_fputwc_r+0x20>
1010a064:	30c01917 	ldw	r3,100(r6)
1010a068:	10880014 	ori	r2,r2,8192
1010a06c:	3080030d 	sth	r2,12(r6)
1010a070:	18880014 	ori	r2,r3,8192
1010a074:	30801915 	stw	r2,100(r6)
1010a078:	0109ef41 	jmpi	10109ef4 <__fputwc>

1010a07c <fputwc>:
1010a07c:	00840474 	movhi	r2,4113
1010a080:	defffc04 	addi	sp,sp,-16
1010a084:	1088ff04 	addi	r2,r2,9212
1010a088:	dc000115 	stw	r16,4(sp)
1010a08c:	14000017 	ldw	r16,0(r2)
1010a090:	dc400215 	stw	r17,8(sp)
1010a094:	dfc00315 	stw	ra,12(sp)
1010a098:	2023883a 	mov	r17,r4
1010a09c:	80000226 	beq	r16,zero,1010a0a8 <fputwc+0x2c>
1010a0a0:	80800e17 	ldw	r2,56(r16)
1010a0a4:	10001026 	beq	r2,zero,1010a0e8 <fputwc+0x6c>
1010a0a8:	2880030b 	ldhu	r2,12(r5)
1010a0ac:	10c8000c 	andi	r3,r2,8192
1010a0b0:	1800051e 	bne	r3,zero,1010a0c8 <fputwc+0x4c>
1010a0b4:	28c01917 	ldw	r3,100(r5)
1010a0b8:	10880014 	ori	r2,r2,8192
1010a0bc:	2880030d 	sth	r2,12(r5)
1010a0c0:	18880014 	ori	r2,r3,8192
1010a0c4:	28801915 	stw	r2,100(r5)
1010a0c8:	280d883a 	mov	r6,r5
1010a0cc:	8009883a 	mov	r4,r16
1010a0d0:	880b883a 	mov	r5,r17
1010a0d4:	dfc00317 	ldw	ra,12(sp)
1010a0d8:	dc400217 	ldw	r17,8(sp)
1010a0dc:	dc000117 	ldw	r16,4(sp)
1010a0e0:	dec00404 	addi	sp,sp,16
1010a0e4:	0109ef41 	jmpi	10109ef4 <__fputwc>
1010a0e8:	8009883a 	mov	r4,r16
1010a0ec:	d9400015 	stw	r5,0(sp)
1010a0f0:	010538c0 	call	1010538c <__sinit>
1010a0f4:	d9400017 	ldw	r5,0(sp)
1010a0f8:	003feb06 	br	1010a0a8 <__alt_data_end+0xfffea0a8>

1010a0fc <_fstat_r>:
1010a0fc:	defffd04 	addi	sp,sp,-12
1010a100:	2805883a 	mov	r2,r5
1010a104:	dc000015 	stw	r16,0(sp)
1010a108:	04040474 	movhi	r16,4113
1010a10c:	dc400115 	stw	r17,4(sp)
1010a110:	840ffd04 	addi	r16,r16,16372
1010a114:	2023883a 	mov	r17,r4
1010a118:	300b883a 	mov	r5,r6
1010a11c:	1009883a 	mov	r4,r2
1010a120:	dfc00215 	stw	ra,8(sp)
1010a124:	80000015 	stw	zero,0(r16)
1010a128:	010db8c0 	call	1010db8c <fstat>
1010a12c:	00ffffc4 	movi	r3,-1
1010a130:	10c00526 	beq	r2,r3,1010a148 <_fstat_r+0x4c>
1010a134:	dfc00217 	ldw	ra,8(sp)
1010a138:	dc400117 	ldw	r17,4(sp)
1010a13c:	dc000017 	ldw	r16,0(sp)
1010a140:	dec00304 	addi	sp,sp,12
1010a144:	f800283a 	ret
1010a148:	80c00017 	ldw	r3,0(r16)
1010a14c:	183ff926 	beq	r3,zero,1010a134 <__alt_data_end+0xfffea134>
1010a150:	88c00015 	stw	r3,0(r17)
1010a154:	003ff706 	br	1010a134 <__alt_data_end+0xfffea134>

1010a158 <_isatty_r>:
1010a158:	defffd04 	addi	sp,sp,-12
1010a15c:	dc000015 	stw	r16,0(sp)
1010a160:	04040474 	movhi	r16,4113
1010a164:	dc400115 	stw	r17,4(sp)
1010a168:	840ffd04 	addi	r16,r16,16372
1010a16c:	2023883a 	mov	r17,r4
1010a170:	2809883a 	mov	r4,r5
1010a174:	dfc00215 	stw	ra,8(sp)
1010a178:	80000015 	stw	zero,0(r16)
1010a17c:	010dc800 	call	1010dc80 <isatty>
1010a180:	00ffffc4 	movi	r3,-1
1010a184:	10c00526 	beq	r2,r3,1010a19c <_isatty_r+0x44>
1010a188:	dfc00217 	ldw	ra,8(sp)
1010a18c:	dc400117 	ldw	r17,4(sp)
1010a190:	dc000017 	ldw	r16,0(sp)
1010a194:	dec00304 	addi	sp,sp,12
1010a198:	f800283a 	ret
1010a19c:	80c00017 	ldw	r3,0(r16)
1010a1a0:	183ff926 	beq	r3,zero,1010a188 <__alt_data_end+0xfffea188>
1010a1a4:	88c00015 	stw	r3,0(r17)
1010a1a8:	003ff706 	br	1010a188 <__alt_data_end+0xfffea188>

1010a1ac <_lseek_r>:
1010a1ac:	defffd04 	addi	sp,sp,-12
1010a1b0:	2805883a 	mov	r2,r5
1010a1b4:	dc000015 	stw	r16,0(sp)
1010a1b8:	04040474 	movhi	r16,4113
1010a1bc:	dc400115 	stw	r17,4(sp)
1010a1c0:	300b883a 	mov	r5,r6
1010a1c4:	840ffd04 	addi	r16,r16,16372
1010a1c8:	2023883a 	mov	r17,r4
1010a1cc:	380d883a 	mov	r6,r7
1010a1d0:	1009883a 	mov	r4,r2
1010a1d4:	dfc00215 	stw	ra,8(sp)
1010a1d8:	80000015 	stw	zero,0(r16)
1010a1dc:	010de540 	call	1010de54 <lseek>
1010a1e0:	00ffffc4 	movi	r3,-1
1010a1e4:	10c00526 	beq	r2,r3,1010a1fc <_lseek_r+0x50>
1010a1e8:	dfc00217 	ldw	ra,8(sp)
1010a1ec:	dc400117 	ldw	r17,4(sp)
1010a1f0:	dc000017 	ldw	r16,0(sp)
1010a1f4:	dec00304 	addi	sp,sp,12
1010a1f8:	f800283a 	ret
1010a1fc:	80c00017 	ldw	r3,0(r16)
1010a200:	183ff926 	beq	r3,zero,1010a1e8 <__alt_data_end+0xfffea1e8>
1010a204:	88c00015 	stw	r3,0(r17)
1010a208:	003ff706 	br	1010a1e8 <__alt_data_end+0xfffea1e8>

1010a20c <_read_r>:
1010a20c:	defffd04 	addi	sp,sp,-12
1010a210:	2805883a 	mov	r2,r5
1010a214:	dc000015 	stw	r16,0(sp)
1010a218:	04040474 	movhi	r16,4113
1010a21c:	dc400115 	stw	r17,4(sp)
1010a220:	300b883a 	mov	r5,r6
1010a224:	840ffd04 	addi	r16,r16,16372
1010a228:	2023883a 	mov	r17,r4
1010a22c:	380d883a 	mov	r6,r7
1010a230:	1009883a 	mov	r4,r2
1010a234:	dfc00215 	stw	ra,8(sp)
1010a238:	80000015 	stw	zero,0(r16)
1010a23c:	010e0300 	call	1010e030 <read>
1010a240:	00ffffc4 	movi	r3,-1
1010a244:	10c00526 	beq	r2,r3,1010a25c <_read_r+0x50>
1010a248:	dfc00217 	ldw	ra,8(sp)
1010a24c:	dc400117 	ldw	r17,4(sp)
1010a250:	dc000017 	ldw	r16,0(sp)
1010a254:	dec00304 	addi	sp,sp,12
1010a258:	f800283a 	ret
1010a25c:	80c00017 	ldw	r3,0(r16)
1010a260:	183ff926 	beq	r3,zero,1010a248 <__alt_data_end+0xfffea248>
1010a264:	88c00015 	stw	r3,0(r17)
1010a268:	003ff706 	br	1010a248 <__alt_data_end+0xfffea248>

1010a26c <__swbuf_r>:
1010a26c:	defffb04 	addi	sp,sp,-20
1010a270:	dcc00315 	stw	r19,12(sp)
1010a274:	dc800215 	stw	r18,8(sp)
1010a278:	dc000015 	stw	r16,0(sp)
1010a27c:	dfc00415 	stw	ra,16(sp)
1010a280:	dc400115 	stw	r17,4(sp)
1010a284:	2025883a 	mov	r18,r4
1010a288:	2827883a 	mov	r19,r5
1010a28c:	3021883a 	mov	r16,r6
1010a290:	20000226 	beq	r4,zero,1010a29c <__swbuf_r+0x30>
1010a294:	20800e17 	ldw	r2,56(r4)
1010a298:	10004226 	beq	r2,zero,1010a3a4 <__swbuf_r+0x138>
1010a29c:	80800617 	ldw	r2,24(r16)
1010a2a0:	8100030b 	ldhu	r4,12(r16)
1010a2a4:	80800215 	stw	r2,8(r16)
1010a2a8:	2080020c 	andi	r2,r4,8
1010a2ac:	10003626 	beq	r2,zero,1010a388 <__swbuf_r+0x11c>
1010a2b0:	80c00417 	ldw	r3,16(r16)
1010a2b4:	18003426 	beq	r3,zero,1010a388 <__swbuf_r+0x11c>
1010a2b8:	2088000c 	andi	r2,r4,8192
1010a2bc:	9c403fcc 	andi	r17,r19,255
1010a2c0:	10001a26 	beq	r2,zero,1010a32c <__swbuf_r+0xc0>
1010a2c4:	80800017 	ldw	r2,0(r16)
1010a2c8:	81000517 	ldw	r4,20(r16)
1010a2cc:	10c7c83a 	sub	r3,r2,r3
1010a2d0:	1900200e 	bge	r3,r4,1010a354 <__swbuf_r+0xe8>
1010a2d4:	18c00044 	addi	r3,r3,1
1010a2d8:	81000217 	ldw	r4,8(r16)
1010a2dc:	11400044 	addi	r5,r2,1
1010a2e0:	81400015 	stw	r5,0(r16)
1010a2e4:	213fffc4 	addi	r4,r4,-1
1010a2e8:	81000215 	stw	r4,8(r16)
1010a2ec:	14c00005 	stb	r19,0(r2)
1010a2f0:	80800517 	ldw	r2,20(r16)
1010a2f4:	10c01e26 	beq	r2,r3,1010a370 <__swbuf_r+0x104>
1010a2f8:	8080030b 	ldhu	r2,12(r16)
1010a2fc:	1080004c 	andi	r2,r2,1
1010a300:	10000226 	beq	r2,zero,1010a30c <__swbuf_r+0xa0>
1010a304:	00800284 	movi	r2,10
1010a308:	88801926 	beq	r17,r2,1010a370 <__swbuf_r+0x104>
1010a30c:	8805883a 	mov	r2,r17
1010a310:	dfc00417 	ldw	ra,16(sp)
1010a314:	dcc00317 	ldw	r19,12(sp)
1010a318:	dc800217 	ldw	r18,8(sp)
1010a31c:	dc400117 	ldw	r17,4(sp)
1010a320:	dc000017 	ldw	r16,0(sp)
1010a324:	dec00504 	addi	sp,sp,20
1010a328:	f800283a 	ret
1010a32c:	81401917 	ldw	r5,100(r16)
1010a330:	00b7ffc4 	movi	r2,-8193
1010a334:	21080014 	ori	r4,r4,8192
1010a338:	2884703a 	and	r2,r5,r2
1010a33c:	80801915 	stw	r2,100(r16)
1010a340:	80800017 	ldw	r2,0(r16)
1010a344:	8100030d 	sth	r4,12(r16)
1010a348:	81000517 	ldw	r4,20(r16)
1010a34c:	10c7c83a 	sub	r3,r2,r3
1010a350:	193fe016 	blt	r3,r4,1010a2d4 <__alt_data_end+0xfffea2d4>
1010a354:	800b883a 	mov	r5,r16
1010a358:	9009883a 	mov	r4,r18
1010a35c:	0104fa00 	call	10104fa0 <_fflush_r>
1010a360:	1000071e 	bne	r2,zero,1010a380 <__swbuf_r+0x114>
1010a364:	80800017 	ldw	r2,0(r16)
1010a368:	00c00044 	movi	r3,1
1010a36c:	003fda06 	br	1010a2d8 <__alt_data_end+0xfffea2d8>
1010a370:	800b883a 	mov	r5,r16
1010a374:	9009883a 	mov	r4,r18
1010a378:	0104fa00 	call	10104fa0 <_fflush_r>
1010a37c:	103fe326 	beq	r2,zero,1010a30c <__alt_data_end+0xfffea30c>
1010a380:	00bfffc4 	movi	r2,-1
1010a384:	003fe206 	br	1010a310 <__alt_data_end+0xfffea310>
1010a388:	800b883a 	mov	r5,r16
1010a38c:	9009883a 	mov	r4,r18
1010a390:	01033800 	call	10103380 <__swsetup_r>
1010a394:	103ffa1e 	bne	r2,zero,1010a380 <__alt_data_end+0xfffea380>
1010a398:	8100030b 	ldhu	r4,12(r16)
1010a39c:	80c00417 	ldw	r3,16(r16)
1010a3a0:	003fc506 	br	1010a2b8 <__alt_data_end+0xfffea2b8>
1010a3a4:	010538c0 	call	1010538c <__sinit>
1010a3a8:	003fbc06 	br	1010a29c <__alt_data_end+0xfffea29c>

1010a3ac <__swbuf>:
1010a3ac:	00840474 	movhi	r2,4113
1010a3b0:	1088ff04 	addi	r2,r2,9212
1010a3b4:	280d883a 	mov	r6,r5
1010a3b8:	200b883a 	mov	r5,r4
1010a3bc:	11000017 	ldw	r4,0(r2)
1010a3c0:	010a26c1 	jmpi	1010a26c <__swbuf_r>

1010a3c4 <_wcrtomb_r>:
1010a3c4:	defff604 	addi	sp,sp,-40
1010a3c8:	00840474 	movhi	r2,4113
1010a3cc:	dc800815 	stw	r18,32(sp)
1010a3d0:	dc400715 	stw	r17,28(sp)
1010a3d4:	dc000615 	stw	r16,24(sp)
1010a3d8:	10890304 	addi	r2,r2,9228
1010a3dc:	dfc00915 	stw	ra,36(sp)
1010a3e0:	2021883a 	mov	r16,r4
1010a3e4:	3823883a 	mov	r17,r7
1010a3e8:	14800017 	ldw	r18,0(r2)
1010a3ec:	28001426 	beq	r5,zero,1010a440 <_wcrtomb_r+0x7c>
1010a3f0:	d9400415 	stw	r5,16(sp)
1010a3f4:	d9800515 	stw	r6,20(sp)
1010a3f8:	0105edc0 	call	10105edc <__locale_charset>
1010a3fc:	d9800517 	ldw	r6,20(sp)
1010a400:	d9400417 	ldw	r5,16(sp)
1010a404:	100f883a 	mov	r7,r2
1010a408:	dc400015 	stw	r17,0(sp)
1010a40c:	8009883a 	mov	r4,r16
1010a410:	903ee83a 	callr	r18
1010a414:	00ffffc4 	movi	r3,-1
1010a418:	10c0031e 	bne	r2,r3,1010a428 <_wcrtomb_r+0x64>
1010a41c:	88000015 	stw	zero,0(r17)
1010a420:	00c02284 	movi	r3,138
1010a424:	80c00015 	stw	r3,0(r16)
1010a428:	dfc00917 	ldw	ra,36(sp)
1010a42c:	dc800817 	ldw	r18,32(sp)
1010a430:	dc400717 	ldw	r17,28(sp)
1010a434:	dc000617 	ldw	r16,24(sp)
1010a438:	dec00a04 	addi	sp,sp,40
1010a43c:	f800283a 	ret
1010a440:	0105edc0 	call	10105edc <__locale_charset>
1010a444:	100f883a 	mov	r7,r2
1010a448:	dc400015 	stw	r17,0(sp)
1010a44c:	000d883a 	mov	r6,zero
1010a450:	d9400104 	addi	r5,sp,4
1010a454:	8009883a 	mov	r4,r16
1010a458:	903ee83a 	callr	r18
1010a45c:	003fed06 	br	1010a414 <__alt_data_end+0xfffea414>

1010a460 <wcrtomb>:
1010a460:	defff604 	addi	sp,sp,-40
1010a464:	00840474 	movhi	r2,4113
1010a468:	dc800615 	stw	r18,24(sp)
1010a46c:	dc400515 	stw	r17,20(sp)
1010a470:	1088ff04 	addi	r2,r2,9212
1010a474:	dfc00915 	stw	ra,36(sp)
1010a478:	dd000815 	stw	r20,32(sp)
1010a47c:	dcc00715 	stw	r19,28(sp)
1010a480:	dc000415 	stw	r16,16(sp)
1010a484:	3025883a 	mov	r18,r6
1010a488:	14400017 	ldw	r17,0(r2)
1010a48c:	20001926 	beq	r4,zero,1010a4f4 <wcrtomb+0x94>
1010a490:	00840474 	movhi	r2,4113
1010a494:	10890304 	addi	r2,r2,9228
1010a498:	15000017 	ldw	r20,0(r2)
1010a49c:	2021883a 	mov	r16,r4
1010a4a0:	2827883a 	mov	r19,r5
1010a4a4:	0105edc0 	call	10105edc <__locale_charset>
1010a4a8:	100f883a 	mov	r7,r2
1010a4ac:	dc800015 	stw	r18,0(sp)
1010a4b0:	980d883a 	mov	r6,r19
1010a4b4:	800b883a 	mov	r5,r16
1010a4b8:	8809883a 	mov	r4,r17
1010a4bc:	a03ee83a 	callr	r20
1010a4c0:	00ffffc4 	movi	r3,-1
1010a4c4:	10c0031e 	bne	r2,r3,1010a4d4 <wcrtomb+0x74>
1010a4c8:	90000015 	stw	zero,0(r18)
1010a4cc:	00c02284 	movi	r3,138
1010a4d0:	88c00015 	stw	r3,0(r17)
1010a4d4:	dfc00917 	ldw	ra,36(sp)
1010a4d8:	dd000817 	ldw	r20,32(sp)
1010a4dc:	dcc00717 	ldw	r19,28(sp)
1010a4e0:	dc800617 	ldw	r18,24(sp)
1010a4e4:	dc400517 	ldw	r17,20(sp)
1010a4e8:	dc000417 	ldw	r16,16(sp)
1010a4ec:	dec00a04 	addi	sp,sp,40
1010a4f0:	f800283a 	ret
1010a4f4:	00840474 	movhi	r2,4113
1010a4f8:	10890304 	addi	r2,r2,9228
1010a4fc:	14000017 	ldw	r16,0(r2)
1010a500:	0105edc0 	call	10105edc <__locale_charset>
1010a504:	100f883a 	mov	r7,r2
1010a508:	dc800015 	stw	r18,0(sp)
1010a50c:	000d883a 	mov	r6,zero
1010a510:	d9400104 	addi	r5,sp,4
1010a514:	8809883a 	mov	r4,r17
1010a518:	803ee83a 	callr	r16
1010a51c:	003fe806 	br	1010a4c0 <__alt_data_end+0xfffea4c0>

1010a520 <__ascii_wctomb>:
1010a520:	28000526 	beq	r5,zero,1010a538 <__ascii_wctomb+0x18>
1010a524:	00803fc4 	movi	r2,255
1010a528:	11800536 	bltu	r2,r6,1010a540 <__ascii_wctomb+0x20>
1010a52c:	29800005 	stb	r6,0(r5)
1010a530:	00800044 	movi	r2,1
1010a534:	f800283a 	ret
1010a538:	0005883a 	mov	r2,zero
1010a53c:	f800283a 	ret
1010a540:	00802284 	movi	r2,138
1010a544:	20800015 	stw	r2,0(r4)
1010a548:	00bfffc4 	movi	r2,-1
1010a54c:	f800283a 	ret

1010a550 <_wctomb_r>:
1010a550:	00840474 	movhi	r2,4113
1010a554:	defff904 	addi	sp,sp,-28
1010a558:	10890304 	addi	r2,r2,9228
1010a55c:	dfc00615 	stw	ra,24(sp)
1010a560:	dc400515 	stw	r17,20(sp)
1010a564:	dc000415 	stw	r16,16(sp)
1010a568:	3823883a 	mov	r17,r7
1010a56c:	14000017 	ldw	r16,0(r2)
1010a570:	d9000115 	stw	r4,4(sp)
1010a574:	d9400215 	stw	r5,8(sp)
1010a578:	d9800315 	stw	r6,12(sp)
1010a57c:	0105edc0 	call	10105edc <__locale_charset>
1010a580:	d9800317 	ldw	r6,12(sp)
1010a584:	d9400217 	ldw	r5,8(sp)
1010a588:	d9000117 	ldw	r4,4(sp)
1010a58c:	100f883a 	mov	r7,r2
1010a590:	dc400015 	stw	r17,0(sp)
1010a594:	803ee83a 	callr	r16
1010a598:	dfc00617 	ldw	ra,24(sp)
1010a59c:	dc400517 	ldw	r17,20(sp)
1010a5a0:	dc000417 	ldw	r16,16(sp)
1010a5a4:	dec00704 	addi	sp,sp,28
1010a5a8:	f800283a 	ret

1010a5ac <__udivdi3>:
1010a5ac:	defff404 	addi	sp,sp,-48
1010a5b0:	dcc00515 	stw	r19,20(sp)
1010a5b4:	dc000215 	stw	r16,8(sp)
1010a5b8:	dfc00b15 	stw	ra,44(sp)
1010a5bc:	df000a15 	stw	fp,40(sp)
1010a5c0:	ddc00915 	stw	r23,36(sp)
1010a5c4:	dd800815 	stw	r22,32(sp)
1010a5c8:	dd400715 	stw	r21,28(sp)
1010a5cc:	dd000615 	stw	r20,24(sp)
1010a5d0:	dc800415 	stw	r18,16(sp)
1010a5d4:	dc400315 	stw	r17,12(sp)
1010a5d8:	2027883a 	mov	r19,r4
1010a5dc:	2821883a 	mov	r16,r5
1010a5e0:	3800461e 	bne	r7,zero,1010a6fc <__udivdi3+0x150>
1010a5e4:	3023883a 	mov	r17,r6
1010a5e8:	2025883a 	mov	r18,r4
1010a5ec:	2980572e 	bgeu	r5,r6,1010a74c <__udivdi3+0x1a0>
1010a5f0:	00bfffd4 	movui	r2,65535
1010a5f4:	282d883a 	mov	r22,r5
1010a5f8:	1180b236 	bltu	r2,r6,1010a8c4 <__udivdi3+0x318>
1010a5fc:	00803fc4 	movi	r2,255
1010a600:	1185803a 	cmpltu	r2,r2,r6
1010a604:	100490fa 	slli	r2,r2,3
1010a608:	3086d83a 	srl	r3,r6,r2
1010a60c:	01040474 	movhi	r4,4113
1010a610:	2101f904 	addi	r4,r4,2020
1010a614:	20c7883a 	add	r3,r4,r3
1010a618:	18c00003 	ldbu	r3,0(r3)
1010a61c:	1885883a 	add	r2,r3,r2
1010a620:	00c00804 	movi	r3,32
1010a624:	1887c83a 	sub	r3,r3,r2
1010a628:	18000526 	beq	r3,zero,1010a640 <__udivdi3+0x94>
1010a62c:	80e0983a 	sll	r16,r16,r3
1010a630:	9884d83a 	srl	r2,r19,r2
1010a634:	30e2983a 	sll	r17,r6,r3
1010a638:	98e4983a 	sll	r18,r19,r3
1010a63c:	142cb03a 	or	r22,r2,r16
1010a640:	882ad43a 	srli	r21,r17,16
1010a644:	b009883a 	mov	r4,r22
1010a648:	8d3fffcc 	andi	r20,r17,65535
1010a64c:	a80b883a 	mov	r5,r21
1010a650:	0100c2c0 	call	10100c2c <__umodsi3>
1010a654:	b009883a 	mov	r4,r22
1010a658:	a80b883a 	mov	r5,r21
1010a65c:	1027883a 	mov	r19,r2
1010a660:	0100bc80 	call	10100bc8 <__udivsi3>
1010a664:	100b883a 	mov	r5,r2
1010a668:	a009883a 	mov	r4,r20
1010a66c:	102d883a 	mov	r22,r2
1010a670:	0100c840 	call	10100c84 <__mulsi3>
1010a674:	9826943a 	slli	r19,r19,16
1010a678:	9006d43a 	srli	r3,r18,16
1010a67c:	1cc6b03a 	or	r3,r3,r19
1010a680:	1880052e 	bgeu	r3,r2,1010a698 <__udivdi3+0xec>
1010a684:	1c47883a 	add	r3,r3,r17
1010a688:	b13fffc4 	addi	r4,r22,-1
1010a68c:	1c400136 	bltu	r3,r17,1010a694 <__udivdi3+0xe8>
1010a690:	18814236 	bltu	r3,r2,1010ab9c <__udivdi3+0x5f0>
1010a694:	202d883a 	mov	r22,r4
1010a698:	18a1c83a 	sub	r16,r3,r2
1010a69c:	8009883a 	mov	r4,r16
1010a6a0:	a80b883a 	mov	r5,r21
1010a6a4:	0100c2c0 	call	10100c2c <__umodsi3>
1010a6a8:	1027883a 	mov	r19,r2
1010a6ac:	8009883a 	mov	r4,r16
1010a6b0:	a80b883a 	mov	r5,r21
1010a6b4:	9826943a 	slli	r19,r19,16
1010a6b8:	0100bc80 	call	10100bc8 <__udivsi3>
1010a6bc:	100b883a 	mov	r5,r2
1010a6c0:	a009883a 	mov	r4,r20
1010a6c4:	94bfffcc 	andi	r18,r18,65535
1010a6c8:	1021883a 	mov	r16,r2
1010a6cc:	94e4b03a 	or	r18,r18,r19
1010a6d0:	0100c840 	call	10100c84 <__mulsi3>
1010a6d4:	9080052e 	bgeu	r18,r2,1010a6ec <__udivdi3+0x140>
1010a6d8:	8ca5883a 	add	r18,r17,r18
1010a6dc:	80ffffc4 	addi	r3,r16,-1
1010a6e0:	94410c36 	bltu	r18,r17,1010ab14 <__udivdi3+0x568>
1010a6e4:	90810b2e 	bgeu	r18,r2,1010ab14 <__udivdi3+0x568>
1010a6e8:	843fff84 	addi	r16,r16,-2
1010a6ec:	b004943a 	slli	r2,r22,16
1010a6f0:	0007883a 	mov	r3,zero
1010a6f4:	1404b03a 	or	r2,r2,r16
1010a6f8:	00005e06 	br	1010a874 <__udivdi3+0x2c8>
1010a6fc:	29c05b36 	bltu	r5,r7,1010a86c <__udivdi3+0x2c0>
1010a700:	00bfffd4 	movui	r2,65535
1010a704:	11c0672e 	bgeu	r2,r7,1010a8a4 <__udivdi3+0x2f8>
1010a708:	00804034 	movhi	r2,256
1010a70c:	10bfffc4 	addi	r2,r2,-1
1010a710:	11c10a36 	bltu	r2,r7,1010ab3c <__udivdi3+0x590>
1010a714:	00800404 	movi	r2,16
1010a718:	3886d83a 	srl	r3,r7,r2
1010a71c:	01040474 	movhi	r4,4113
1010a720:	2101f904 	addi	r4,r4,2020
1010a724:	20c7883a 	add	r3,r4,r3
1010a728:	18c00003 	ldbu	r3,0(r3)
1010a72c:	05c00804 	movi	r23,32
1010a730:	1885883a 	add	r2,r3,r2
1010a734:	b8afc83a 	sub	r23,r23,r2
1010a738:	b800671e 	bne	r23,zero,1010a8d8 <__udivdi3+0x32c>
1010a73c:	3c010536 	bltu	r7,r16,1010ab54 <__udivdi3+0x5a8>
1010a740:	9985403a 	cmpgeu	r2,r19,r6
1010a744:	0007883a 	mov	r3,zero
1010a748:	00004a06 	br	1010a874 <__udivdi3+0x2c8>
1010a74c:	3000041e 	bne	r6,zero,1010a760 <__udivdi3+0x1b4>
1010a750:	000b883a 	mov	r5,zero
1010a754:	01000044 	movi	r4,1
1010a758:	0100bc80 	call	10100bc8 <__udivsi3>
1010a75c:	1023883a 	mov	r17,r2
1010a760:	00bfffd4 	movui	r2,65535
1010a764:	1440532e 	bgeu	r2,r17,1010a8b4 <__udivdi3+0x308>
1010a768:	00804034 	movhi	r2,256
1010a76c:	10bfffc4 	addi	r2,r2,-1
1010a770:	1440f436 	bltu	r2,r17,1010ab44 <__udivdi3+0x598>
1010a774:	00800404 	movi	r2,16
1010a778:	8886d83a 	srl	r3,r17,r2
1010a77c:	01040474 	movhi	r4,4113
1010a780:	2101f904 	addi	r4,r4,2020
1010a784:	20c7883a 	add	r3,r4,r3
1010a788:	18c00003 	ldbu	r3,0(r3)
1010a78c:	1885883a 	add	r2,r3,r2
1010a790:	00c00804 	movi	r3,32
1010a794:	1887c83a 	sub	r3,r3,r2
1010a798:	1800a51e 	bne	r3,zero,1010aa30 <__udivdi3+0x484>
1010a79c:	882ad43a 	srli	r21,r17,16
1010a7a0:	8461c83a 	sub	r16,r16,r17
1010a7a4:	8d3fffcc 	andi	r20,r17,65535
1010a7a8:	00c00044 	movi	r3,1
1010a7ac:	a80b883a 	mov	r5,r21
1010a7b0:	8009883a 	mov	r4,r16
1010a7b4:	d8c00115 	stw	r3,4(sp)
1010a7b8:	0100c2c0 	call	10100c2c <__umodsi3>
1010a7bc:	a80b883a 	mov	r5,r21
1010a7c0:	8009883a 	mov	r4,r16
1010a7c4:	1027883a 	mov	r19,r2
1010a7c8:	0100bc80 	call	10100bc8 <__udivsi3>
1010a7cc:	a00b883a 	mov	r5,r20
1010a7d0:	1009883a 	mov	r4,r2
1010a7d4:	102d883a 	mov	r22,r2
1010a7d8:	0100c840 	call	10100c84 <__mulsi3>
1010a7dc:	9826943a 	slli	r19,r19,16
1010a7e0:	900ed43a 	srli	r7,r18,16
1010a7e4:	d8c00117 	ldw	r3,4(sp)
1010a7e8:	3cceb03a 	or	r7,r7,r19
1010a7ec:	3880052e 	bgeu	r7,r2,1010a804 <__udivdi3+0x258>
1010a7f0:	3c4f883a 	add	r7,r7,r17
1010a7f4:	b13fffc4 	addi	r4,r22,-1
1010a7f8:	3c400136 	bltu	r7,r17,1010a800 <__udivdi3+0x254>
1010a7fc:	3880e436 	bltu	r7,r2,1010ab90 <__udivdi3+0x5e4>
1010a800:	202d883a 	mov	r22,r4
1010a804:	38a1c83a 	sub	r16,r7,r2
1010a808:	8009883a 	mov	r4,r16
1010a80c:	a80b883a 	mov	r5,r21
1010a810:	d8c00115 	stw	r3,4(sp)
1010a814:	0100c2c0 	call	10100c2c <__umodsi3>
1010a818:	1027883a 	mov	r19,r2
1010a81c:	8009883a 	mov	r4,r16
1010a820:	a80b883a 	mov	r5,r21
1010a824:	9826943a 	slli	r19,r19,16
1010a828:	0100bc80 	call	10100bc8 <__udivsi3>
1010a82c:	a00b883a 	mov	r5,r20
1010a830:	1009883a 	mov	r4,r2
1010a834:	94bfffcc 	andi	r18,r18,65535
1010a838:	1021883a 	mov	r16,r2
1010a83c:	94e4b03a 	or	r18,r18,r19
1010a840:	0100c840 	call	10100c84 <__mulsi3>
1010a844:	d8c00117 	ldw	r3,4(sp)
1010a848:	9080052e 	bgeu	r18,r2,1010a860 <__udivdi3+0x2b4>
1010a84c:	8ca5883a 	add	r18,r17,r18
1010a850:	813fffc4 	addi	r4,r16,-1
1010a854:	9440ad36 	bltu	r18,r17,1010ab0c <__udivdi3+0x560>
1010a858:	9080ac2e 	bgeu	r18,r2,1010ab0c <__udivdi3+0x560>
1010a85c:	843fff84 	addi	r16,r16,-2
1010a860:	b004943a 	slli	r2,r22,16
1010a864:	1404b03a 	or	r2,r2,r16
1010a868:	00000206 	br	1010a874 <__udivdi3+0x2c8>
1010a86c:	0007883a 	mov	r3,zero
1010a870:	0005883a 	mov	r2,zero
1010a874:	dfc00b17 	ldw	ra,44(sp)
1010a878:	df000a17 	ldw	fp,40(sp)
1010a87c:	ddc00917 	ldw	r23,36(sp)
1010a880:	dd800817 	ldw	r22,32(sp)
1010a884:	dd400717 	ldw	r21,28(sp)
1010a888:	dd000617 	ldw	r20,24(sp)
1010a88c:	dcc00517 	ldw	r19,20(sp)
1010a890:	dc800417 	ldw	r18,16(sp)
1010a894:	dc400317 	ldw	r17,12(sp)
1010a898:	dc000217 	ldw	r16,8(sp)
1010a89c:	dec00c04 	addi	sp,sp,48
1010a8a0:	f800283a 	ret
1010a8a4:	00803fc4 	movi	r2,255
1010a8a8:	11c5803a 	cmpltu	r2,r2,r7
1010a8ac:	100490fa 	slli	r2,r2,3
1010a8b0:	003f9906 	br	1010a718 <__alt_data_end+0xfffea718>
1010a8b4:	00803fc4 	movi	r2,255
1010a8b8:	1445803a 	cmpltu	r2,r2,r17
1010a8bc:	100490fa 	slli	r2,r2,3
1010a8c0:	003fad06 	br	1010a778 <__alt_data_end+0xfffea778>
1010a8c4:	00804034 	movhi	r2,256
1010a8c8:	10bfffc4 	addi	r2,r2,-1
1010a8cc:	11809f36 	bltu	r2,r6,1010ab4c <__udivdi3+0x5a0>
1010a8d0:	00800404 	movi	r2,16
1010a8d4:	003f4c06 	br	1010a608 <__alt_data_end+0xfffea608>
1010a8d8:	3dce983a 	sll	r7,r7,r23
1010a8dc:	30b8d83a 	srl	fp,r6,r2
1010a8e0:	80a2d83a 	srl	r17,r16,r2
1010a8e4:	35cc983a 	sll	r6,r6,r23
1010a8e8:	3f38b03a 	or	fp,r7,fp
1010a8ec:	e024d43a 	srli	r18,fp,16
1010a8f0:	9884d83a 	srl	r2,r19,r2
1010a8f4:	85e0983a 	sll	r16,r16,r23
1010a8f8:	8809883a 	mov	r4,r17
1010a8fc:	900b883a 	mov	r5,r18
1010a900:	d9800015 	stw	r6,0(sp)
1010a904:	1420b03a 	or	r16,r2,r16
1010a908:	0100c2c0 	call	10100c2c <__umodsi3>
1010a90c:	900b883a 	mov	r5,r18
1010a910:	8809883a 	mov	r4,r17
1010a914:	1029883a 	mov	r20,r2
1010a918:	e5bfffcc 	andi	r22,fp,65535
1010a91c:	0100bc80 	call	10100bc8 <__udivsi3>
1010a920:	100b883a 	mov	r5,r2
1010a924:	b009883a 	mov	r4,r22
1010a928:	102b883a 	mov	r21,r2
1010a92c:	0100c840 	call	10100c84 <__mulsi3>
1010a930:	a028943a 	slli	r20,r20,16
1010a934:	8006d43a 	srli	r3,r16,16
1010a938:	1d06b03a 	or	r3,r3,r20
1010a93c:	1880042e 	bgeu	r3,r2,1010a950 <__udivdi3+0x3a4>
1010a940:	1f07883a 	add	r3,r3,fp
1010a944:	a93fffc4 	addi	r4,r21,-1
1010a948:	1f00892e 	bgeu	r3,fp,1010ab70 <__udivdi3+0x5c4>
1010a94c:	202b883a 	mov	r21,r4
1010a950:	18a3c83a 	sub	r17,r3,r2
1010a954:	8809883a 	mov	r4,r17
1010a958:	900b883a 	mov	r5,r18
1010a95c:	0100c2c0 	call	10100c2c <__umodsi3>
1010a960:	1029883a 	mov	r20,r2
1010a964:	8809883a 	mov	r4,r17
1010a968:	900b883a 	mov	r5,r18
1010a96c:	a028943a 	slli	r20,r20,16
1010a970:	0100bc80 	call	10100bc8 <__udivsi3>
1010a974:	100b883a 	mov	r5,r2
1010a978:	b009883a 	mov	r4,r22
1010a97c:	843fffcc 	andi	r16,r16,65535
1010a980:	1023883a 	mov	r17,r2
1010a984:	8520b03a 	or	r16,r16,r20
1010a988:	0100c840 	call	10100c84 <__mulsi3>
1010a98c:	8080042e 	bgeu	r16,r2,1010a9a0 <__udivdi3+0x3f4>
1010a990:	8721883a 	add	r16,r16,fp
1010a994:	88ffffc4 	addi	r3,r17,-1
1010a998:	8700712e 	bgeu	r16,fp,1010ab60 <__udivdi3+0x5b4>
1010a99c:	1823883a 	mov	r17,r3
1010a9a0:	a80e943a 	slli	r7,r21,16
1010a9a4:	d8c00017 	ldw	r3,0(sp)
1010a9a8:	80a1c83a 	sub	r16,r16,r2
1010a9ac:	3c64b03a 	or	r18,r7,r17
1010a9b0:	1d3fffcc 	andi	r20,r3,65535
1010a9b4:	9022d43a 	srli	r17,r18,16
1010a9b8:	95bfffcc 	andi	r22,r18,65535
1010a9bc:	a00b883a 	mov	r5,r20
1010a9c0:	b009883a 	mov	r4,r22
1010a9c4:	182ad43a 	srli	r21,r3,16
1010a9c8:	0100c840 	call	10100c84 <__mulsi3>
1010a9cc:	a00b883a 	mov	r5,r20
1010a9d0:	8809883a 	mov	r4,r17
1010a9d4:	1039883a 	mov	fp,r2
1010a9d8:	0100c840 	call	10100c84 <__mulsi3>
1010a9dc:	8809883a 	mov	r4,r17
1010a9e0:	a80b883a 	mov	r5,r21
1010a9e4:	1029883a 	mov	r20,r2
1010a9e8:	0100c840 	call	10100c84 <__mulsi3>
1010a9ec:	a80b883a 	mov	r5,r21
1010a9f0:	b009883a 	mov	r4,r22
1010a9f4:	1023883a 	mov	r17,r2
1010a9f8:	0100c840 	call	10100c84 <__mulsi3>
1010a9fc:	e006d43a 	srli	r3,fp,16
1010aa00:	1505883a 	add	r2,r2,r20
1010aa04:	1887883a 	add	r3,r3,r2
1010aa08:	1d00022e 	bgeu	r3,r20,1010aa14 <__udivdi3+0x468>
1010aa0c:	00800074 	movhi	r2,1
1010aa10:	88a3883a 	add	r17,r17,r2
1010aa14:	1804d43a 	srli	r2,r3,16
1010aa18:	1463883a 	add	r17,r2,r17
1010aa1c:	84404436 	bltu	r16,r17,1010ab30 <__udivdi3+0x584>
1010aa20:	84403e26 	beq	r16,r17,1010ab1c <__udivdi3+0x570>
1010aa24:	9005883a 	mov	r2,r18
1010aa28:	0007883a 	mov	r3,zero
1010aa2c:	003f9106 	br	1010a874 <__alt_data_end+0xfffea874>
1010aa30:	88e2983a 	sll	r17,r17,r3
1010aa34:	80aed83a 	srl	r23,r16,r2
1010aa38:	80e0983a 	sll	r16,r16,r3
1010aa3c:	882ad43a 	srli	r21,r17,16
1010aa40:	9884d83a 	srl	r2,r19,r2
1010aa44:	b809883a 	mov	r4,r23
1010aa48:	a80b883a 	mov	r5,r21
1010aa4c:	98e4983a 	sll	r18,r19,r3
1010aa50:	142cb03a 	or	r22,r2,r16
1010aa54:	0100c2c0 	call	10100c2c <__umodsi3>
1010aa58:	b809883a 	mov	r4,r23
1010aa5c:	a80b883a 	mov	r5,r21
1010aa60:	1027883a 	mov	r19,r2
1010aa64:	8d3fffcc 	andi	r20,r17,65535
1010aa68:	0100bc80 	call	10100bc8 <__udivsi3>
1010aa6c:	a009883a 	mov	r4,r20
1010aa70:	100b883a 	mov	r5,r2
1010aa74:	102f883a 	mov	r23,r2
1010aa78:	0100c840 	call	10100c84 <__mulsi3>
1010aa7c:	9826943a 	slli	r19,r19,16
1010aa80:	b008d43a 	srli	r4,r22,16
1010aa84:	24c8b03a 	or	r4,r4,r19
1010aa88:	2080062e 	bgeu	r4,r2,1010aaa4 <__udivdi3+0x4f8>
1010aa8c:	2449883a 	add	r4,r4,r17
1010aa90:	b8ffffc4 	addi	r3,r23,-1
1010aa94:	24403c36 	bltu	r4,r17,1010ab88 <__udivdi3+0x5dc>
1010aa98:	20803b2e 	bgeu	r4,r2,1010ab88 <__udivdi3+0x5dc>
1010aa9c:	bdffff84 	addi	r23,r23,-2
1010aaa0:	2449883a 	add	r4,r4,r17
1010aaa4:	20a1c83a 	sub	r16,r4,r2
1010aaa8:	a80b883a 	mov	r5,r21
1010aaac:	8009883a 	mov	r4,r16
1010aab0:	0100c2c0 	call	10100c2c <__umodsi3>
1010aab4:	a80b883a 	mov	r5,r21
1010aab8:	8009883a 	mov	r4,r16
1010aabc:	1027883a 	mov	r19,r2
1010aac0:	0100bc80 	call	10100bc8 <__udivsi3>
1010aac4:	a009883a 	mov	r4,r20
1010aac8:	100b883a 	mov	r5,r2
1010aacc:	9826943a 	slli	r19,r19,16
1010aad0:	1039883a 	mov	fp,r2
1010aad4:	0100c840 	call	10100c84 <__mulsi3>
1010aad8:	b13fffcc 	andi	r4,r22,65535
1010aadc:	24c8b03a 	or	r4,r4,r19
1010aae0:	2080062e 	bgeu	r4,r2,1010aafc <__udivdi3+0x550>
1010aae4:	2449883a 	add	r4,r4,r17
1010aae8:	e0ffffc4 	addi	r3,fp,-1
1010aaec:	24402436 	bltu	r4,r17,1010ab80 <__udivdi3+0x5d4>
1010aaf0:	2080232e 	bgeu	r4,r2,1010ab80 <__udivdi3+0x5d4>
1010aaf4:	e73fff84 	addi	fp,fp,-2
1010aaf8:	2449883a 	add	r4,r4,r17
1010aafc:	b82e943a 	slli	r23,r23,16
1010ab00:	20a1c83a 	sub	r16,r4,r2
1010ab04:	bf06b03a 	or	r3,r23,fp
1010ab08:	003f2806 	br	1010a7ac <__alt_data_end+0xfffea7ac>
1010ab0c:	2021883a 	mov	r16,r4
1010ab10:	003f5306 	br	1010a860 <__alt_data_end+0xfffea860>
1010ab14:	1821883a 	mov	r16,r3
1010ab18:	003ef406 	br	1010a6ec <__alt_data_end+0xfffea6ec>
1010ab1c:	1806943a 	slli	r3,r3,16
1010ab20:	9de6983a 	sll	r19,r19,r23
1010ab24:	e73fffcc 	andi	fp,fp,65535
1010ab28:	1f07883a 	add	r3,r3,fp
1010ab2c:	98ffbd2e 	bgeu	r19,r3,1010aa24 <__alt_data_end+0xfffeaa24>
1010ab30:	90bfffc4 	addi	r2,r18,-1
1010ab34:	0007883a 	mov	r3,zero
1010ab38:	003f4e06 	br	1010a874 <__alt_data_end+0xfffea874>
1010ab3c:	00800604 	movi	r2,24
1010ab40:	003ef506 	br	1010a718 <__alt_data_end+0xfffea718>
1010ab44:	00800604 	movi	r2,24
1010ab48:	003f0b06 	br	1010a778 <__alt_data_end+0xfffea778>
1010ab4c:	00800604 	movi	r2,24
1010ab50:	003ead06 	br	1010a608 <__alt_data_end+0xfffea608>
1010ab54:	0007883a 	mov	r3,zero
1010ab58:	00800044 	movi	r2,1
1010ab5c:	003f4506 	br	1010a874 <__alt_data_end+0xfffea874>
1010ab60:	80bf8e2e 	bgeu	r16,r2,1010a99c <__alt_data_end+0xfffea99c>
1010ab64:	8c7fff84 	addi	r17,r17,-2
1010ab68:	8721883a 	add	r16,r16,fp
1010ab6c:	003f8c06 	br	1010a9a0 <__alt_data_end+0xfffea9a0>
1010ab70:	18bf762e 	bgeu	r3,r2,1010a94c <__alt_data_end+0xfffea94c>
1010ab74:	ad7fff84 	addi	r21,r21,-2
1010ab78:	1f07883a 	add	r3,r3,fp
1010ab7c:	003f7406 	br	1010a950 <__alt_data_end+0xfffea950>
1010ab80:	1839883a 	mov	fp,r3
1010ab84:	003fdd06 	br	1010aafc <__alt_data_end+0xfffeaafc>
1010ab88:	182f883a 	mov	r23,r3
1010ab8c:	003fc506 	br	1010aaa4 <__alt_data_end+0xfffeaaa4>
1010ab90:	b5bfff84 	addi	r22,r22,-2
1010ab94:	3c4f883a 	add	r7,r7,r17
1010ab98:	003f1a06 	br	1010a804 <__alt_data_end+0xfffea804>
1010ab9c:	b5bfff84 	addi	r22,r22,-2
1010aba0:	1c47883a 	add	r3,r3,r17
1010aba4:	003ebc06 	br	1010a698 <__alt_data_end+0xfffea698>

1010aba8 <__umoddi3>:
1010aba8:	defff304 	addi	sp,sp,-52
1010abac:	df000b15 	stw	fp,44(sp)
1010abb0:	dc400415 	stw	r17,16(sp)
1010abb4:	dc000315 	stw	r16,12(sp)
1010abb8:	dfc00c15 	stw	ra,48(sp)
1010abbc:	ddc00a15 	stw	r23,40(sp)
1010abc0:	dd800915 	stw	r22,36(sp)
1010abc4:	dd400815 	stw	r21,32(sp)
1010abc8:	dd000715 	stw	r20,28(sp)
1010abcc:	dcc00615 	stw	r19,24(sp)
1010abd0:	dc800515 	stw	r18,20(sp)
1010abd4:	2021883a 	mov	r16,r4
1010abd8:	2823883a 	mov	r17,r5
1010abdc:	2839883a 	mov	fp,r5
1010abe0:	3800401e 	bne	r7,zero,1010ace4 <__umoddi3+0x13c>
1010abe4:	3027883a 	mov	r19,r6
1010abe8:	2029883a 	mov	r20,r4
1010abec:	2980552e 	bgeu	r5,r6,1010ad44 <__umoddi3+0x19c>
1010abf0:	00bfffd4 	movui	r2,65535
1010abf4:	1180a236 	bltu	r2,r6,1010ae80 <__umoddi3+0x2d8>
1010abf8:	01003fc4 	movi	r4,255
1010abfc:	2189803a 	cmpltu	r4,r4,r6
1010ac00:	200890fa 	slli	r4,r4,3
1010ac04:	3104d83a 	srl	r2,r6,r4
1010ac08:	00c40474 	movhi	r3,4113
1010ac0c:	18c1f904 	addi	r3,r3,2020
1010ac10:	1885883a 	add	r2,r3,r2
1010ac14:	10c00003 	ldbu	r3,0(r2)
1010ac18:	00800804 	movi	r2,32
1010ac1c:	1909883a 	add	r4,r3,r4
1010ac20:	1125c83a 	sub	r18,r2,r4
1010ac24:	90000526 	beq	r18,zero,1010ac3c <__umoddi3+0x94>
1010ac28:	8ca2983a 	sll	r17,r17,r18
1010ac2c:	8108d83a 	srl	r4,r16,r4
1010ac30:	34a6983a 	sll	r19,r6,r18
1010ac34:	84a8983a 	sll	r20,r16,r18
1010ac38:	2478b03a 	or	fp,r4,r17
1010ac3c:	982cd43a 	srli	r22,r19,16
1010ac40:	e009883a 	mov	r4,fp
1010ac44:	9dffffcc 	andi	r23,r19,65535
1010ac48:	b00b883a 	mov	r5,r22
1010ac4c:	0100c2c0 	call	10100c2c <__umodsi3>
1010ac50:	b00b883a 	mov	r5,r22
1010ac54:	e009883a 	mov	r4,fp
1010ac58:	102b883a 	mov	r21,r2
1010ac5c:	0100bc80 	call	10100bc8 <__udivsi3>
1010ac60:	100b883a 	mov	r5,r2
1010ac64:	b809883a 	mov	r4,r23
1010ac68:	0100c840 	call	10100c84 <__mulsi3>
1010ac6c:	a82a943a 	slli	r21,r21,16
1010ac70:	a006d43a 	srli	r3,r20,16
1010ac74:	1d46b03a 	or	r3,r3,r21
1010ac78:	1880032e 	bgeu	r3,r2,1010ac88 <__umoddi3+0xe0>
1010ac7c:	1cc7883a 	add	r3,r3,r19
1010ac80:	1cc00136 	bltu	r3,r19,1010ac88 <__umoddi3+0xe0>
1010ac84:	18813136 	bltu	r3,r2,1010b14c <__umoddi3+0x5a4>
1010ac88:	18a1c83a 	sub	r16,r3,r2
1010ac8c:	b00b883a 	mov	r5,r22
1010ac90:	8009883a 	mov	r4,r16
1010ac94:	0100c2c0 	call	10100c2c <__umodsi3>
1010ac98:	b00b883a 	mov	r5,r22
1010ac9c:	8009883a 	mov	r4,r16
1010aca0:	1023883a 	mov	r17,r2
1010aca4:	0100bc80 	call	10100bc8 <__udivsi3>
1010aca8:	100b883a 	mov	r5,r2
1010acac:	b809883a 	mov	r4,r23
1010acb0:	8822943a 	slli	r17,r17,16
1010acb4:	0100c840 	call	10100c84 <__mulsi3>
1010acb8:	a0ffffcc 	andi	r3,r20,65535
1010acbc:	1c46b03a 	or	r3,r3,r17
1010acc0:	1880042e 	bgeu	r3,r2,1010acd4 <__umoddi3+0x12c>
1010acc4:	1cc7883a 	add	r3,r3,r19
1010acc8:	1cc00236 	bltu	r3,r19,1010acd4 <__umoddi3+0x12c>
1010accc:	1880012e 	bgeu	r3,r2,1010acd4 <__umoddi3+0x12c>
1010acd0:	1cc7883a 	add	r3,r3,r19
1010acd4:	1885c83a 	sub	r2,r3,r2
1010acd8:	1484d83a 	srl	r2,r2,r18
1010acdc:	0007883a 	mov	r3,zero
1010ace0:	00005306 	br	1010ae30 <__umoddi3+0x288>
1010ace4:	29c05036 	bltu	r5,r7,1010ae28 <__umoddi3+0x280>
1010ace8:	00bfffd4 	movui	r2,65535
1010acec:	11c05c2e 	bgeu	r2,r7,1010ae60 <__umoddi3+0x2b8>
1010acf0:	00804034 	movhi	r2,256
1010acf4:	10bfffc4 	addi	r2,r2,-1
1010acf8:	11c10636 	bltu	r2,r7,1010b114 <__umoddi3+0x56c>
1010acfc:	01000404 	movi	r4,16
1010ad00:	3904d83a 	srl	r2,r7,r4
1010ad04:	00c40474 	movhi	r3,4113
1010ad08:	18c1f904 	addi	r3,r3,2020
1010ad0c:	1885883a 	add	r2,r3,r2
1010ad10:	14c00003 	ldbu	r19,0(r2)
1010ad14:	00c00804 	movi	r3,32
1010ad18:	9927883a 	add	r19,r19,r4
1010ad1c:	1ce9c83a 	sub	r20,r3,r19
1010ad20:	a0005c1e 	bne	r20,zero,1010ae94 <__umoddi3+0x2ec>
1010ad24:	3c400136 	bltu	r7,r17,1010ad2c <__umoddi3+0x184>
1010ad28:	81810a36 	bltu	r16,r6,1010b154 <__umoddi3+0x5ac>
1010ad2c:	8185c83a 	sub	r2,r16,r6
1010ad30:	89e3c83a 	sub	r17,r17,r7
1010ad34:	8089803a 	cmpltu	r4,r16,r2
1010ad38:	8939c83a 	sub	fp,r17,r4
1010ad3c:	e007883a 	mov	r3,fp
1010ad40:	00003b06 	br	1010ae30 <__umoddi3+0x288>
1010ad44:	3000041e 	bne	r6,zero,1010ad58 <__umoddi3+0x1b0>
1010ad48:	000b883a 	mov	r5,zero
1010ad4c:	01000044 	movi	r4,1
1010ad50:	0100bc80 	call	10100bc8 <__udivsi3>
1010ad54:	1027883a 	mov	r19,r2
1010ad58:	00bfffd4 	movui	r2,65535
1010ad5c:	14c0442e 	bgeu	r2,r19,1010ae70 <__umoddi3+0x2c8>
1010ad60:	00804034 	movhi	r2,256
1010ad64:	10bfffc4 	addi	r2,r2,-1
1010ad68:	14c0ec36 	bltu	r2,r19,1010b11c <__umoddi3+0x574>
1010ad6c:	00800404 	movi	r2,16
1010ad70:	9886d83a 	srl	r3,r19,r2
1010ad74:	01040474 	movhi	r4,4113
1010ad78:	2101f904 	addi	r4,r4,2020
1010ad7c:	20c7883a 	add	r3,r4,r3
1010ad80:	18c00003 	ldbu	r3,0(r3)
1010ad84:	1887883a 	add	r3,r3,r2
1010ad88:	00800804 	movi	r2,32
1010ad8c:	10e5c83a 	sub	r18,r2,r3
1010ad90:	9000ab1e 	bne	r18,zero,1010b040 <__umoddi3+0x498>
1010ad94:	982cd43a 	srli	r22,r19,16
1010ad98:	8ce3c83a 	sub	r17,r17,r19
1010ad9c:	9dffffcc 	andi	r23,r19,65535
1010ada0:	b00b883a 	mov	r5,r22
1010ada4:	8809883a 	mov	r4,r17
1010ada8:	0100c2c0 	call	10100c2c <__umodsi3>
1010adac:	b00b883a 	mov	r5,r22
1010adb0:	8809883a 	mov	r4,r17
1010adb4:	102b883a 	mov	r21,r2
1010adb8:	0100bc80 	call	10100bc8 <__udivsi3>
1010adbc:	b80b883a 	mov	r5,r23
1010adc0:	1009883a 	mov	r4,r2
1010adc4:	0100c840 	call	10100c84 <__mulsi3>
1010adc8:	a82a943a 	slli	r21,r21,16
1010adcc:	a006d43a 	srli	r3,r20,16
1010add0:	1d46b03a 	or	r3,r3,r21
1010add4:	1880042e 	bgeu	r3,r2,1010ade8 <__umoddi3+0x240>
1010add8:	1cc7883a 	add	r3,r3,r19
1010addc:	1cc00236 	bltu	r3,r19,1010ade8 <__umoddi3+0x240>
1010ade0:	1880012e 	bgeu	r3,r2,1010ade8 <__umoddi3+0x240>
1010ade4:	1cc7883a 	add	r3,r3,r19
1010ade8:	18a1c83a 	sub	r16,r3,r2
1010adec:	b00b883a 	mov	r5,r22
1010adf0:	8009883a 	mov	r4,r16
1010adf4:	0100c2c0 	call	10100c2c <__umodsi3>
1010adf8:	1023883a 	mov	r17,r2
1010adfc:	b00b883a 	mov	r5,r22
1010ae00:	8009883a 	mov	r4,r16
1010ae04:	0100bc80 	call	10100bc8 <__udivsi3>
1010ae08:	8822943a 	slli	r17,r17,16
1010ae0c:	b80b883a 	mov	r5,r23
1010ae10:	1009883a 	mov	r4,r2
1010ae14:	0100c840 	call	10100c84 <__mulsi3>
1010ae18:	a53fffcc 	andi	r20,r20,65535
1010ae1c:	a446b03a 	or	r3,r20,r17
1010ae20:	18bfac2e 	bgeu	r3,r2,1010acd4 <__alt_data_end+0xfffeacd4>
1010ae24:	003fa706 	br	1010acc4 <__alt_data_end+0xfffeacc4>
1010ae28:	2005883a 	mov	r2,r4
1010ae2c:	2807883a 	mov	r3,r5
1010ae30:	dfc00c17 	ldw	ra,48(sp)
1010ae34:	df000b17 	ldw	fp,44(sp)
1010ae38:	ddc00a17 	ldw	r23,40(sp)
1010ae3c:	dd800917 	ldw	r22,36(sp)
1010ae40:	dd400817 	ldw	r21,32(sp)
1010ae44:	dd000717 	ldw	r20,28(sp)
1010ae48:	dcc00617 	ldw	r19,24(sp)
1010ae4c:	dc800517 	ldw	r18,20(sp)
1010ae50:	dc400417 	ldw	r17,16(sp)
1010ae54:	dc000317 	ldw	r16,12(sp)
1010ae58:	dec00d04 	addi	sp,sp,52
1010ae5c:	f800283a 	ret
1010ae60:	04c03fc4 	movi	r19,255
1010ae64:	99c9803a 	cmpltu	r4,r19,r7
1010ae68:	200890fa 	slli	r4,r4,3
1010ae6c:	003fa406 	br	1010ad00 <__alt_data_end+0xfffead00>
1010ae70:	00803fc4 	movi	r2,255
1010ae74:	14c5803a 	cmpltu	r2,r2,r19
1010ae78:	100490fa 	slli	r2,r2,3
1010ae7c:	003fbc06 	br	1010ad70 <__alt_data_end+0xfffead70>
1010ae80:	00804034 	movhi	r2,256
1010ae84:	10bfffc4 	addi	r2,r2,-1
1010ae88:	1180a636 	bltu	r2,r6,1010b124 <__umoddi3+0x57c>
1010ae8c:	01000404 	movi	r4,16
1010ae90:	003f5c06 	br	1010ac04 <__alt_data_end+0xfffeac04>
1010ae94:	3d0e983a 	sll	r7,r7,r20
1010ae98:	34ead83a 	srl	r21,r6,r19
1010ae9c:	8cc6d83a 	srl	r3,r17,r19
1010aea0:	8d10983a 	sll	r8,r17,r20
1010aea4:	3d6ab03a 	or	r21,r7,r21
1010aea8:	a82cd43a 	srli	r22,r21,16
1010aeac:	84e2d83a 	srl	r17,r16,r19
1010aeb0:	1809883a 	mov	r4,r3
1010aeb4:	b00b883a 	mov	r5,r22
1010aeb8:	8a22b03a 	or	r17,r17,r8
1010aebc:	3524983a 	sll	r18,r6,r20
1010aec0:	dc400015 	stw	r17,0(sp)
1010aec4:	d8c00115 	stw	r3,4(sp)
1010aec8:	0100c2c0 	call	10100c2c <__umodsi3>
1010aecc:	d8c00117 	ldw	r3,4(sp)
1010aed0:	b00b883a 	mov	r5,r22
1010aed4:	1039883a 	mov	fp,r2
1010aed8:	1809883a 	mov	r4,r3
1010aedc:	0100bc80 	call	10100bc8 <__udivsi3>
1010aee0:	adffffcc 	andi	r23,r21,65535
1010aee4:	100b883a 	mov	r5,r2
1010aee8:	b809883a 	mov	r4,r23
1010aeec:	1023883a 	mov	r17,r2
1010aef0:	0100c840 	call	10100c84 <__mulsi3>
1010aef4:	d9400017 	ldw	r5,0(sp)
1010aef8:	e008943a 	slli	r4,fp,16
1010aefc:	8520983a 	sll	r16,r16,r20
1010af00:	2806d43a 	srli	r3,r5,16
1010af04:	1906b03a 	or	r3,r3,r4
1010af08:	1880042e 	bgeu	r3,r2,1010af1c <__umoddi3+0x374>
1010af0c:	1d47883a 	add	r3,r3,r21
1010af10:	893fffc4 	addi	r4,r17,-1
1010af14:	1d40892e 	bgeu	r3,r21,1010b13c <__umoddi3+0x594>
1010af18:	2023883a 	mov	r17,r4
1010af1c:	18b9c83a 	sub	fp,r3,r2
1010af20:	b00b883a 	mov	r5,r22
1010af24:	e009883a 	mov	r4,fp
1010af28:	0100c2c0 	call	10100c2c <__umodsi3>
1010af2c:	b00b883a 	mov	r5,r22
1010af30:	e009883a 	mov	r4,fp
1010af34:	d8800215 	stw	r2,8(sp)
1010af38:	0100bc80 	call	10100bc8 <__udivsi3>
1010af3c:	100b883a 	mov	r5,r2
1010af40:	b809883a 	mov	r4,r23
1010af44:	102d883a 	mov	r22,r2
1010af48:	0100c840 	call	10100c84 <__mulsi3>
1010af4c:	d9800217 	ldw	r6,8(sp)
1010af50:	d8c00017 	ldw	r3,0(sp)
1010af54:	300c943a 	slli	r6,r6,16
1010af58:	1a3fffcc 	andi	r8,r3,65535
1010af5c:	4190b03a 	or	r8,r8,r6
1010af60:	4080042e 	bgeu	r8,r2,1010af74 <__umoddi3+0x3cc>
1010af64:	4551883a 	add	r8,r8,r21
1010af68:	b0ffffc4 	addi	r3,r22,-1
1010af6c:	45406f2e 	bgeu	r8,r21,1010b12c <__umoddi3+0x584>
1010af70:	182d883a 	mov	r22,r3
1010af74:	880e943a 	slli	r7,r17,16
1010af78:	9006d43a 	srli	r3,r18,16
1010af7c:	91bfffcc 	andi	r6,r18,65535
1010af80:	3dacb03a 	or	r22,r7,r22
1010af84:	b02ed43a 	srli	r23,r22,16
1010af88:	b5bfffcc 	andi	r22,r22,65535
1010af8c:	300b883a 	mov	r5,r6
1010af90:	b009883a 	mov	r4,r22
1010af94:	40a3c83a 	sub	r17,r8,r2
1010af98:	d8c00115 	stw	r3,4(sp)
1010af9c:	d9800215 	stw	r6,8(sp)
1010afa0:	0100c840 	call	10100c84 <__mulsi3>
1010afa4:	d9800217 	ldw	r6,8(sp)
1010afa8:	b809883a 	mov	r4,r23
1010afac:	1039883a 	mov	fp,r2
1010afb0:	300b883a 	mov	r5,r6
1010afb4:	0100c840 	call	10100c84 <__mulsi3>
1010afb8:	d8c00117 	ldw	r3,4(sp)
1010afbc:	b809883a 	mov	r4,r23
1010afc0:	d8800215 	stw	r2,8(sp)
1010afc4:	180b883a 	mov	r5,r3
1010afc8:	0100c840 	call	10100c84 <__mulsi3>
1010afcc:	d8c00117 	ldw	r3,4(sp)
1010afd0:	b009883a 	mov	r4,r22
1010afd4:	102f883a 	mov	r23,r2
1010afd8:	180b883a 	mov	r5,r3
1010afdc:	0100c840 	call	10100c84 <__mulsi3>
1010afe0:	d9800217 	ldw	r6,8(sp)
1010afe4:	e006d43a 	srli	r3,fp,16
1010afe8:	1185883a 	add	r2,r2,r6
1010afec:	1885883a 	add	r2,r3,r2
1010aff0:	1180022e 	bgeu	r2,r6,1010affc <__umoddi3+0x454>
1010aff4:	00c00074 	movhi	r3,1
1010aff8:	b8ef883a 	add	r23,r23,r3
1010affc:	1006d43a 	srli	r3,r2,16
1010b000:	1004943a 	slli	r2,r2,16
1010b004:	e73fffcc 	andi	fp,fp,65535
1010b008:	1dc7883a 	add	r3,r3,r23
1010b00c:	1739883a 	add	fp,r2,fp
1010b010:	88c03a36 	bltu	r17,r3,1010b0fc <__umoddi3+0x554>
1010b014:	88c05126 	beq	r17,r3,1010b15c <__umoddi3+0x5b4>
1010b018:	88c9c83a 	sub	r4,r17,r3
1010b01c:	e00f883a 	mov	r7,fp
1010b020:	81cfc83a 	sub	r7,r16,r7
1010b024:	81c7803a 	cmpltu	r3,r16,r7
1010b028:	20c7c83a 	sub	r3,r4,r3
1010b02c:	1cc4983a 	sll	r2,r3,r19
1010b030:	3d0ed83a 	srl	r7,r7,r20
1010b034:	1d06d83a 	srl	r3,r3,r20
1010b038:	11c4b03a 	or	r2,r2,r7
1010b03c:	003f7c06 	br	1010ae30 <__alt_data_end+0xfffeae30>
1010b040:	9ca6983a 	sll	r19,r19,r18
1010b044:	88f8d83a 	srl	fp,r17,r3
1010b048:	80c4d83a 	srl	r2,r16,r3
1010b04c:	982cd43a 	srli	r22,r19,16
1010b050:	8ca2983a 	sll	r17,r17,r18
1010b054:	e009883a 	mov	r4,fp
1010b058:	b00b883a 	mov	r5,r22
1010b05c:	146ab03a 	or	r21,r2,r17
1010b060:	0100c2c0 	call	10100c2c <__umodsi3>
1010b064:	b00b883a 	mov	r5,r22
1010b068:	e009883a 	mov	r4,fp
1010b06c:	1029883a 	mov	r20,r2
1010b070:	9dffffcc 	andi	r23,r19,65535
1010b074:	0100bc80 	call	10100bc8 <__udivsi3>
1010b078:	b809883a 	mov	r4,r23
1010b07c:	100b883a 	mov	r5,r2
1010b080:	0100c840 	call	10100c84 <__mulsi3>
1010b084:	a008943a 	slli	r4,r20,16
1010b088:	a806d43a 	srli	r3,r21,16
1010b08c:	84a8983a 	sll	r20,r16,r18
1010b090:	1906b03a 	or	r3,r3,r4
1010b094:	1880042e 	bgeu	r3,r2,1010b0a8 <__umoddi3+0x500>
1010b098:	1cc7883a 	add	r3,r3,r19
1010b09c:	1cc00236 	bltu	r3,r19,1010b0a8 <__umoddi3+0x500>
1010b0a0:	1880012e 	bgeu	r3,r2,1010b0a8 <__umoddi3+0x500>
1010b0a4:	1cc7883a 	add	r3,r3,r19
1010b0a8:	18a3c83a 	sub	r17,r3,r2
1010b0ac:	b00b883a 	mov	r5,r22
1010b0b0:	8809883a 	mov	r4,r17
1010b0b4:	0100c2c0 	call	10100c2c <__umodsi3>
1010b0b8:	b00b883a 	mov	r5,r22
1010b0bc:	8809883a 	mov	r4,r17
1010b0c0:	1021883a 	mov	r16,r2
1010b0c4:	0100bc80 	call	10100bc8 <__udivsi3>
1010b0c8:	100b883a 	mov	r5,r2
1010b0cc:	b809883a 	mov	r4,r23
1010b0d0:	8020943a 	slli	r16,r16,16
1010b0d4:	0100c840 	call	10100c84 <__mulsi3>
1010b0d8:	a8ffffcc 	andi	r3,r21,65535
1010b0dc:	1c06b03a 	or	r3,r3,r16
1010b0e0:	1880042e 	bgeu	r3,r2,1010b0f4 <__umoddi3+0x54c>
1010b0e4:	1cc7883a 	add	r3,r3,r19
1010b0e8:	1cc00236 	bltu	r3,r19,1010b0f4 <__umoddi3+0x54c>
1010b0ec:	1880012e 	bgeu	r3,r2,1010b0f4 <__umoddi3+0x54c>
1010b0f0:	1cc7883a 	add	r3,r3,r19
1010b0f4:	18a3c83a 	sub	r17,r3,r2
1010b0f8:	003f2906 	br	1010ada0 <__alt_data_end+0xfffeada0>
1010b0fc:	e48fc83a 	sub	r7,fp,r18
1010b100:	1d49c83a 	sub	r4,r3,r21
1010b104:	e1f9803a 	cmpltu	fp,fp,r7
1010b108:	2739c83a 	sub	fp,r4,fp
1010b10c:	8f09c83a 	sub	r4,r17,fp
1010b110:	003fc306 	br	1010b020 <__alt_data_end+0xfffeb020>
1010b114:	01000604 	movi	r4,24
1010b118:	003ef906 	br	1010ad00 <__alt_data_end+0xfffead00>
1010b11c:	00800604 	movi	r2,24
1010b120:	003f1306 	br	1010ad70 <__alt_data_end+0xfffead70>
1010b124:	01000604 	movi	r4,24
1010b128:	003eb606 	br	1010ac04 <__alt_data_end+0xfffeac04>
1010b12c:	40bf902e 	bgeu	r8,r2,1010af70 <__alt_data_end+0xfffeaf70>
1010b130:	b5bfff84 	addi	r22,r22,-2
1010b134:	4551883a 	add	r8,r8,r21
1010b138:	003f8e06 	br	1010af74 <__alt_data_end+0xfffeaf74>
1010b13c:	18bf762e 	bgeu	r3,r2,1010af18 <__alt_data_end+0xfffeaf18>
1010b140:	8c7fff84 	addi	r17,r17,-2
1010b144:	1d47883a 	add	r3,r3,r21
1010b148:	003f7406 	br	1010af1c <__alt_data_end+0xfffeaf1c>
1010b14c:	1cc7883a 	add	r3,r3,r19
1010b150:	003ecd06 	br	1010ac88 <__alt_data_end+0xfffeac88>
1010b154:	8005883a 	mov	r2,r16
1010b158:	003ef806 	br	1010ad3c <__alt_data_end+0xfffead3c>
1010b15c:	873fe736 	bltu	r16,fp,1010b0fc <__alt_data_end+0xfffeb0fc>
1010b160:	e00f883a 	mov	r7,fp
1010b164:	0009883a 	mov	r4,zero
1010b168:	003fad06 	br	1010b020 <__alt_data_end+0xfffeb020>

1010b16c <__adddf3>:
1010b16c:	02c00434 	movhi	r11,16
1010b170:	5affffc4 	addi	r11,r11,-1
1010b174:	2806d7fa 	srli	r3,r5,31
1010b178:	2ad4703a 	and	r10,r5,r11
1010b17c:	3ad2703a 	and	r9,r7,r11
1010b180:	3804d53a 	srli	r2,r7,20
1010b184:	3018d77a 	srli	r12,r6,29
1010b188:	280ad53a 	srli	r5,r5,20
1010b18c:	501490fa 	slli	r10,r10,3
1010b190:	2010d77a 	srli	r8,r4,29
1010b194:	481290fa 	slli	r9,r9,3
1010b198:	380ed7fa 	srli	r7,r7,31
1010b19c:	defffb04 	addi	sp,sp,-20
1010b1a0:	dc800215 	stw	r18,8(sp)
1010b1a4:	dc400115 	stw	r17,4(sp)
1010b1a8:	dc000015 	stw	r16,0(sp)
1010b1ac:	dfc00415 	stw	ra,16(sp)
1010b1b0:	dcc00315 	stw	r19,12(sp)
1010b1b4:	1c803fcc 	andi	r18,r3,255
1010b1b8:	2c01ffcc 	andi	r16,r5,2047
1010b1bc:	5210b03a 	or	r8,r10,r8
1010b1c0:	202290fa 	slli	r17,r4,3
1010b1c4:	1081ffcc 	andi	r2,r2,2047
1010b1c8:	4b12b03a 	or	r9,r9,r12
1010b1cc:	300c90fa 	slli	r6,r6,3
1010b1d0:	91c07526 	beq	r18,r7,1010b3a8 <__adddf3+0x23c>
1010b1d4:	8087c83a 	sub	r3,r16,r2
1010b1d8:	00c0ab0e 	bge	zero,r3,1010b488 <__adddf3+0x31c>
1010b1dc:	10002a1e 	bne	r2,zero,1010b288 <__adddf3+0x11c>
1010b1e0:	4984b03a 	or	r2,r9,r6
1010b1e4:	1000961e 	bne	r2,zero,1010b440 <__adddf3+0x2d4>
1010b1e8:	888001cc 	andi	r2,r17,7
1010b1ec:	10000726 	beq	r2,zero,1010b20c <__adddf3+0xa0>
1010b1f0:	888003cc 	andi	r2,r17,15
1010b1f4:	00c00104 	movi	r3,4
1010b1f8:	10c00426 	beq	r2,r3,1010b20c <__adddf3+0xa0>
1010b1fc:	88c7883a 	add	r3,r17,r3
1010b200:	1c63803a 	cmpltu	r17,r3,r17
1010b204:	4451883a 	add	r8,r8,r17
1010b208:	1823883a 	mov	r17,r3
1010b20c:	4080202c 	andhi	r2,r8,128
1010b210:	10005926 	beq	r2,zero,1010b378 <__adddf3+0x20c>
1010b214:	84000044 	addi	r16,r16,1
1010b218:	0081ffc4 	movi	r2,2047
1010b21c:	8080ba26 	beq	r16,r2,1010b508 <__adddf3+0x39c>
1010b220:	00bfe034 	movhi	r2,65408
1010b224:	10bfffc4 	addi	r2,r2,-1
1010b228:	4090703a 	and	r8,r8,r2
1010b22c:	4004977a 	slli	r2,r8,29
1010b230:	4010927a 	slli	r8,r8,9
1010b234:	8822d0fa 	srli	r17,r17,3
1010b238:	8401ffcc 	andi	r16,r16,2047
1010b23c:	4010d33a 	srli	r8,r8,12
1010b240:	9007883a 	mov	r3,r18
1010b244:	1444b03a 	or	r2,r2,r17
1010b248:	8401ffcc 	andi	r16,r16,2047
1010b24c:	8020953a 	slli	r16,r16,20
1010b250:	18c03fcc 	andi	r3,r3,255
1010b254:	01000434 	movhi	r4,16
1010b258:	213fffc4 	addi	r4,r4,-1
1010b25c:	180697fa 	slli	r3,r3,31
1010b260:	4110703a 	and	r8,r8,r4
1010b264:	4410b03a 	or	r8,r8,r16
1010b268:	40c6b03a 	or	r3,r8,r3
1010b26c:	dfc00417 	ldw	ra,16(sp)
1010b270:	dcc00317 	ldw	r19,12(sp)
1010b274:	dc800217 	ldw	r18,8(sp)
1010b278:	dc400117 	ldw	r17,4(sp)
1010b27c:	dc000017 	ldw	r16,0(sp)
1010b280:	dec00504 	addi	sp,sp,20
1010b284:	f800283a 	ret
1010b288:	0081ffc4 	movi	r2,2047
1010b28c:	80bfd626 	beq	r16,r2,1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b290:	4a402034 	orhi	r9,r9,128
1010b294:	00800e04 	movi	r2,56
1010b298:	10c09f16 	blt	r2,r3,1010b518 <__adddf3+0x3ac>
1010b29c:	008007c4 	movi	r2,31
1010b2a0:	10c0c216 	blt	r2,r3,1010b5ac <__adddf3+0x440>
1010b2a4:	00800804 	movi	r2,32
1010b2a8:	10c5c83a 	sub	r2,r2,r3
1010b2ac:	488a983a 	sll	r5,r9,r2
1010b2b0:	30c8d83a 	srl	r4,r6,r3
1010b2b4:	3084983a 	sll	r2,r6,r2
1010b2b8:	48c6d83a 	srl	r3,r9,r3
1010b2bc:	290cb03a 	or	r6,r5,r4
1010b2c0:	1004c03a 	cmpne	r2,r2,zero
1010b2c4:	308cb03a 	or	r6,r6,r2
1010b2c8:	898dc83a 	sub	r6,r17,r6
1010b2cc:	89a3803a 	cmpltu	r17,r17,r6
1010b2d0:	40d1c83a 	sub	r8,r8,r3
1010b2d4:	4451c83a 	sub	r8,r8,r17
1010b2d8:	3023883a 	mov	r17,r6
1010b2dc:	4080202c 	andhi	r2,r8,128
1010b2e0:	10002326 	beq	r2,zero,1010b370 <__adddf3+0x204>
1010b2e4:	04c02034 	movhi	r19,128
1010b2e8:	9cffffc4 	addi	r19,r19,-1
1010b2ec:	44e6703a 	and	r19,r8,r19
1010b2f0:	98007626 	beq	r19,zero,1010b4cc <__adddf3+0x360>
1010b2f4:	9809883a 	mov	r4,r19
1010b2f8:	010d9ac0 	call	1010d9ac <__clzsi2>
1010b2fc:	10fffe04 	addi	r3,r2,-8
1010b300:	010007c4 	movi	r4,31
1010b304:	20c07716 	blt	r4,r3,1010b4e4 <__adddf3+0x378>
1010b308:	00800804 	movi	r2,32
1010b30c:	10c5c83a 	sub	r2,r2,r3
1010b310:	8884d83a 	srl	r2,r17,r2
1010b314:	98d0983a 	sll	r8,r19,r3
1010b318:	88e2983a 	sll	r17,r17,r3
1010b31c:	1204b03a 	or	r2,r2,r8
1010b320:	1c007416 	blt	r3,r16,1010b4f4 <__adddf3+0x388>
1010b324:	1c21c83a 	sub	r16,r3,r16
1010b328:	82000044 	addi	r8,r16,1
1010b32c:	00c007c4 	movi	r3,31
1010b330:	1a009116 	blt	r3,r8,1010b578 <__adddf3+0x40c>
1010b334:	00c00804 	movi	r3,32
1010b338:	1a07c83a 	sub	r3,r3,r8
1010b33c:	8a08d83a 	srl	r4,r17,r8
1010b340:	88e2983a 	sll	r17,r17,r3
1010b344:	10c6983a 	sll	r3,r2,r3
1010b348:	1210d83a 	srl	r8,r2,r8
1010b34c:	8804c03a 	cmpne	r2,r17,zero
1010b350:	1906b03a 	or	r3,r3,r4
1010b354:	18a2b03a 	or	r17,r3,r2
1010b358:	0021883a 	mov	r16,zero
1010b35c:	003fa206 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b360:	1890b03a 	or	r8,r3,r2
1010b364:	40017d26 	beq	r8,zero,1010b95c <__adddf3+0x7f0>
1010b368:	1011883a 	mov	r8,r2
1010b36c:	1823883a 	mov	r17,r3
1010b370:	888001cc 	andi	r2,r17,7
1010b374:	103f9e1e 	bne	r2,zero,1010b1f0 <__alt_data_end+0xfffeb1f0>
1010b378:	4004977a 	slli	r2,r8,29
1010b37c:	8822d0fa 	srli	r17,r17,3
1010b380:	4010d0fa 	srli	r8,r8,3
1010b384:	9007883a 	mov	r3,r18
1010b388:	1444b03a 	or	r2,r2,r17
1010b38c:	0101ffc4 	movi	r4,2047
1010b390:	81002426 	beq	r16,r4,1010b424 <__adddf3+0x2b8>
1010b394:	8120703a 	and	r16,r16,r4
1010b398:	01000434 	movhi	r4,16
1010b39c:	213fffc4 	addi	r4,r4,-1
1010b3a0:	4110703a 	and	r8,r8,r4
1010b3a4:	003fa806 	br	1010b248 <__alt_data_end+0xfffeb248>
1010b3a8:	8089c83a 	sub	r4,r16,r2
1010b3ac:	01005e0e 	bge	zero,r4,1010b528 <__adddf3+0x3bc>
1010b3b0:	10002b26 	beq	r2,zero,1010b460 <__adddf3+0x2f4>
1010b3b4:	0081ffc4 	movi	r2,2047
1010b3b8:	80bf8b26 	beq	r16,r2,1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b3bc:	4a402034 	orhi	r9,r9,128
1010b3c0:	00800e04 	movi	r2,56
1010b3c4:	1100a40e 	bge	r2,r4,1010b658 <__adddf3+0x4ec>
1010b3c8:	498cb03a 	or	r6,r9,r6
1010b3cc:	300ac03a 	cmpne	r5,r6,zero
1010b3d0:	0013883a 	mov	r9,zero
1010b3d4:	2c4b883a 	add	r5,r5,r17
1010b3d8:	2c63803a 	cmpltu	r17,r5,r17
1010b3dc:	4a11883a 	add	r8,r9,r8
1010b3e0:	8a11883a 	add	r8,r17,r8
1010b3e4:	2823883a 	mov	r17,r5
1010b3e8:	4080202c 	andhi	r2,r8,128
1010b3ec:	103fe026 	beq	r2,zero,1010b370 <__alt_data_end+0xfffeb370>
1010b3f0:	84000044 	addi	r16,r16,1
1010b3f4:	0081ffc4 	movi	r2,2047
1010b3f8:	8080d226 	beq	r16,r2,1010b744 <__adddf3+0x5d8>
1010b3fc:	00bfe034 	movhi	r2,65408
1010b400:	10bfffc4 	addi	r2,r2,-1
1010b404:	4090703a 	and	r8,r8,r2
1010b408:	880ad07a 	srli	r5,r17,1
1010b40c:	400897fa 	slli	r4,r8,31
1010b410:	88c0004c 	andi	r3,r17,1
1010b414:	28e2b03a 	or	r17,r5,r3
1010b418:	4010d07a 	srli	r8,r8,1
1010b41c:	2462b03a 	or	r17,r4,r17
1010b420:	003f7106 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b424:	4088b03a 	or	r4,r8,r2
1010b428:	20014526 	beq	r4,zero,1010b940 <__adddf3+0x7d4>
1010b42c:	01000434 	movhi	r4,16
1010b430:	42000234 	orhi	r8,r8,8
1010b434:	213fffc4 	addi	r4,r4,-1
1010b438:	4110703a 	and	r8,r8,r4
1010b43c:	003f8206 	br	1010b248 <__alt_data_end+0xfffeb248>
1010b440:	18ffffc4 	addi	r3,r3,-1
1010b444:	1800491e 	bne	r3,zero,1010b56c <__adddf3+0x400>
1010b448:	898bc83a 	sub	r5,r17,r6
1010b44c:	8963803a 	cmpltu	r17,r17,r5
1010b450:	4251c83a 	sub	r8,r8,r9
1010b454:	4451c83a 	sub	r8,r8,r17
1010b458:	2823883a 	mov	r17,r5
1010b45c:	003f9f06 	br	1010b2dc <__alt_data_end+0xfffeb2dc>
1010b460:	4984b03a 	or	r2,r9,r6
1010b464:	103f6026 	beq	r2,zero,1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b468:	213fffc4 	addi	r4,r4,-1
1010b46c:	2000931e 	bne	r4,zero,1010b6bc <__adddf3+0x550>
1010b470:	898d883a 	add	r6,r17,r6
1010b474:	3463803a 	cmpltu	r17,r6,r17
1010b478:	4251883a 	add	r8,r8,r9
1010b47c:	8a11883a 	add	r8,r17,r8
1010b480:	3023883a 	mov	r17,r6
1010b484:	003fd806 	br	1010b3e8 <__alt_data_end+0xfffeb3e8>
1010b488:	1800541e 	bne	r3,zero,1010b5dc <__adddf3+0x470>
1010b48c:	80800044 	addi	r2,r16,1
1010b490:	1081ffcc 	andi	r2,r2,2047
1010b494:	00c00044 	movi	r3,1
1010b498:	1880a00e 	bge	r3,r2,1010b71c <__adddf3+0x5b0>
1010b49c:	8989c83a 	sub	r4,r17,r6
1010b4a0:	8905803a 	cmpltu	r2,r17,r4
1010b4a4:	4267c83a 	sub	r19,r8,r9
1010b4a8:	98a7c83a 	sub	r19,r19,r2
1010b4ac:	9880202c 	andhi	r2,r19,128
1010b4b0:	10006326 	beq	r2,zero,1010b640 <__adddf3+0x4d4>
1010b4b4:	3463c83a 	sub	r17,r6,r17
1010b4b8:	4a07c83a 	sub	r3,r9,r8
1010b4bc:	344d803a 	cmpltu	r6,r6,r17
1010b4c0:	19a7c83a 	sub	r19,r3,r6
1010b4c4:	3825883a 	mov	r18,r7
1010b4c8:	983f8a1e 	bne	r19,zero,1010b2f4 <__alt_data_end+0xfffeb2f4>
1010b4cc:	8809883a 	mov	r4,r17
1010b4d0:	010d9ac0 	call	1010d9ac <__clzsi2>
1010b4d4:	10800804 	addi	r2,r2,32
1010b4d8:	10fffe04 	addi	r3,r2,-8
1010b4dc:	010007c4 	movi	r4,31
1010b4e0:	20ff890e 	bge	r4,r3,1010b308 <__alt_data_end+0xfffeb308>
1010b4e4:	10bff604 	addi	r2,r2,-40
1010b4e8:	8884983a 	sll	r2,r17,r2
1010b4ec:	0023883a 	mov	r17,zero
1010b4f0:	1c3f8c0e 	bge	r3,r16,1010b324 <__alt_data_end+0xfffeb324>
1010b4f4:	023fe034 	movhi	r8,65408
1010b4f8:	423fffc4 	addi	r8,r8,-1
1010b4fc:	80e1c83a 	sub	r16,r16,r3
1010b500:	1210703a 	and	r8,r2,r8
1010b504:	003f3806 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b508:	9007883a 	mov	r3,r18
1010b50c:	0011883a 	mov	r8,zero
1010b510:	0005883a 	mov	r2,zero
1010b514:	003f4c06 	br	1010b248 <__alt_data_end+0xfffeb248>
1010b518:	498cb03a 	or	r6,r9,r6
1010b51c:	300cc03a 	cmpne	r6,r6,zero
1010b520:	0007883a 	mov	r3,zero
1010b524:	003f6806 	br	1010b2c8 <__alt_data_end+0xfffeb2c8>
1010b528:	20009c1e 	bne	r4,zero,1010b79c <__adddf3+0x630>
1010b52c:	80800044 	addi	r2,r16,1
1010b530:	1141ffcc 	andi	r5,r2,2047
1010b534:	01000044 	movi	r4,1
1010b538:	2140670e 	bge	r4,r5,1010b6d8 <__adddf3+0x56c>
1010b53c:	0101ffc4 	movi	r4,2047
1010b540:	11007f26 	beq	r2,r4,1010b740 <__adddf3+0x5d4>
1010b544:	898d883a 	add	r6,r17,r6
1010b548:	4247883a 	add	r3,r8,r9
1010b54c:	3451803a 	cmpltu	r8,r6,r17
1010b550:	40d1883a 	add	r8,r8,r3
1010b554:	402297fa 	slli	r17,r8,31
1010b558:	300cd07a 	srli	r6,r6,1
1010b55c:	4010d07a 	srli	r8,r8,1
1010b560:	1021883a 	mov	r16,r2
1010b564:	89a2b03a 	or	r17,r17,r6
1010b568:	003f1f06 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b56c:	0081ffc4 	movi	r2,2047
1010b570:	80bf481e 	bne	r16,r2,1010b294 <__alt_data_end+0xfffeb294>
1010b574:	003f1c06 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b578:	843ff844 	addi	r16,r16,-31
1010b57c:	01000804 	movi	r4,32
1010b580:	1406d83a 	srl	r3,r2,r16
1010b584:	41005026 	beq	r8,r4,1010b6c8 <__adddf3+0x55c>
1010b588:	01001004 	movi	r4,64
1010b58c:	2211c83a 	sub	r8,r4,r8
1010b590:	1204983a 	sll	r2,r2,r8
1010b594:	88a2b03a 	or	r17,r17,r2
1010b598:	8822c03a 	cmpne	r17,r17,zero
1010b59c:	1c62b03a 	or	r17,r3,r17
1010b5a0:	0011883a 	mov	r8,zero
1010b5a4:	0021883a 	mov	r16,zero
1010b5a8:	003f7106 	br	1010b370 <__alt_data_end+0xfffeb370>
1010b5ac:	193ff804 	addi	r4,r3,-32
1010b5b0:	00800804 	movi	r2,32
1010b5b4:	4908d83a 	srl	r4,r9,r4
1010b5b8:	18804526 	beq	r3,r2,1010b6d0 <__adddf3+0x564>
1010b5bc:	00801004 	movi	r2,64
1010b5c0:	10c5c83a 	sub	r2,r2,r3
1010b5c4:	4886983a 	sll	r3,r9,r2
1010b5c8:	198cb03a 	or	r6,r3,r6
1010b5cc:	300cc03a 	cmpne	r6,r6,zero
1010b5d0:	218cb03a 	or	r6,r4,r6
1010b5d4:	0007883a 	mov	r3,zero
1010b5d8:	003f3b06 	br	1010b2c8 <__alt_data_end+0xfffeb2c8>
1010b5dc:	80002a26 	beq	r16,zero,1010b688 <__adddf3+0x51c>
1010b5e0:	0101ffc4 	movi	r4,2047
1010b5e4:	11006826 	beq	r2,r4,1010b788 <__adddf3+0x61c>
1010b5e8:	00c7c83a 	sub	r3,zero,r3
1010b5ec:	42002034 	orhi	r8,r8,128
1010b5f0:	01000e04 	movi	r4,56
1010b5f4:	20c07c16 	blt	r4,r3,1010b7e8 <__adddf3+0x67c>
1010b5f8:	010007c4 	movi	r4,31
1010b5fc:	20c0da16 	blt	r4,r3,1010b968 <__adddf3+0x7fc>
1010b600:	01000804 	movi	r4,32
1010b604:	20c9c83a 	sub	r4,r4,r3
1010b608:	4114983a 	sll	r10,r8,r4
1010b60c:	88cad83a 	srl	r5,r17,r3
1010b610:	8908983a 	sll	r4,r17,r4
1010b614:	40c6d83a 	srl	r3,r8,r3
1010b618:	5162b03a 	or	r17,r10,r5
1010b61c:	2008c03a 	cmpne	r4,r4,zero
1010b620:	8922b03a 	or	r17,r17,r4
1010b624:	3463c83a 	sub	r17,r6,r17
1010b628:	48c7c83a 	sub	r3,r9,r3
1010b62c:	344d803a 	cmpltu	r6,r6,r17
1010b630:	1991c83a 	sub	r8,r3,r6
1010b634:	1021883a 	mov	r16,r2
1010b638:	3825883a 	mov	r18,r7
1010b63c:	003f2706 	br	1010b2dc <__alt_data_end+0xfffeb2dc>
1010b640:	24d0b03a 	or	r8,r4,r19
1010b644:	40001b1e 	bne	r8,zero,1010b6b4 <__adddf3+0x548>
1010b648:	0005883a 	mov	r2,zero
1010b64c:	0007883a 	mov	r3,zero
1010b650:	0021883a 	mov	r16,zero
1010b654:	003f4d06 	br	1010b38c <__alt_data_end+0xfffeb38c>
1010b658:	008007c4 	movi	r2,31
1010b65c:	11003c16 	blt	r2,r4,1010b750 <__adddf3+0x5e4>
1010b660:	00800804 	movi	r2,32
1010b664:	1105c83a 	sub	r2,r2,r4
1010b668:	488e983a 	sll	r7,r9,r2
1010b66c:	310ad83a 	srl	r5,r6,r4
1010b670:	3084983a 	sll	r2,r6,r2
1010b674:	4912d83a 	srl	r9,r9,r4
1010b678:	394ab03a 	or	r5,r7,r5
1010b67c:	1004c03a 	cmpne	r2,r2,zero
1010b680:	288ab03a 	or	r5,r5,r2
1010b684:	003f5306 	br	1010b3d4 <__alt_data_end+0xfffeb3d4>
1010b688:	4448b03a 	or	r4,r8,r17
1010b68c:	20003e26 	beq	r4,zero,1010b788 <__adddf3+0x61c>
1010b690:	00c6303a 	nor	r3,zero,r3
1010b694:	18003a1e 	bne	r3,zero,1010b780 <__adddf3+0x614>
1010b698:	3463c83a 	sub	r17,r6,r17
1010b69c:	4a07c83a 	sub	r3,r9,r8
1010b6a0:	344d803a 	cmpltu	r6,r6,r17
1010b6a4:	1991c83a 	sub	r8,r3,r6
1010b6a8:	1021883a 	mov	r16,r2
1010b6ac:	3825883a 	mov	r18,r7
1010b6b0:	003f0a06 	br	1010b2dc <__alt_data_end+0xfffeb2dc>
1010b6b4:	2023883a 	mov	r17,r4
1010b6b8:	003f0d06 	br	1010b2f0 <__alt_data_end+0xfffeb2f0>
1010b6bc:	0081ffc4 	movi	r2,2047
1010b6c0:	80bf3f1e 	bne	r16,r2,1010b3c0 <__alt_data_end+0xfffeb3c0>
1010b6c4:	003ec806 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b6c8:	0005883a 	mov	r2,zero
1010b6cc:	003fb106 	br	1010b594 <__alt_data_end+0xfffeb594>
1010b6d0:	0007883a 	mov	r3,zero
1010b6d4:	003fbc06 	br	1010b5c8 <__alt_data_end+0xfffeb5c8>
1010b6d8:	4444b03a 	or	r2,r8,r17
1010b6dc:	8000871e 	bne	r16,zero,1010b8fc <__adddf3+0x790>
1010b6e0:	1000ba26 	beq	r2,zero,1010b9cc <__adddf3+0x860>
1010b6e4:	4984b03a 	or	r2,r9,r6
1010b6e8:	103ebf26 	beq	r2,zero,1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b6ec:	8985883a 	add	r2,r17,r6
1010b6f0:	4247883a 	add	r3,r8,r9
1010b6f4:	1451803a 	cmpltu	r8,r2,r17
1010b6f8:	40d1883a 	add	r8,r8,r3
1010b6fc:	40c0202c 	andhi	r3,r8,128
1010b700:	1023883a 	mov	r17,r2
1010b704:	183f1a26 	beq	r3,zero,1010b370 <__alt_data_end+0xfffeb370>
1010b708:	00bfe034 	movhi	r2,65408
1010b70c:	10bfffc4 	addi	r2,r2,-1
1010b710:	2021883a 	mov	r16,r4
1010b714:	4090703a 	and	r8,r8,r2
1010b718:	003eb306 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b71c:	4444b03a 	or	r2,r8,r17
1010b720:	8000291e 	bne	r16,zero,1010b7c8 <__adddf3+0x65c>
1010b724:	10004b1e 	bne	r2,zero,1010b854 <__adddf3+0x6e8>
1010b728:	4990b03a 	or	r8,r9,r6
1010b72c:	40008b26 	beq	r8,zero,1010b95c <__adddf3+0x7f0>
1010b730:	4811883a 	mov	r8,r9
1010b734:	3023883a 	mov	r17,r6
1010b738:	3825883a 	mov	r18,r7
1010b73c:	003eaa06 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b740:	1021883a 	mov	r16,r2
1010b744:	0011883a 	mov	r8,zero
1010b748:	0005883a 	mov	r2,zero
1010b74c:	003f0f06 	br	1010b38c <__alt_data_end+0xfffeb38c>
1010b750:	217ff804 	addi	r5,r4,-32
1010b754:	00800804 	movi	r2,32
1010b758:	494ad83a 	srl	r5,r9,r5
1010b75c:	20807d26 	beq	r4,r2,1010b954 <__adddf3+0x7e8>
1010b760:	00801004 	movi	r2,64
1010b764:	1109c83a 	sub	r4,r2,r4
1010b768:	4912983a 	sll	r9,r9,r4
1010b76c:	498cb03a 	or	r6,r9,r6
1010b770:	300cc03a 	cmpne	r6,r6,zero
1010b774:	298ab03a 	or	r5,r5,r6
1010b778:	0013883a 	mov	r9,zero
1010b77c:	003f1506 	br	1010b3d4 <__alt_data_end+0xfffeb3d4>
1010b780:	0101ffc4 	movi	r4,2047
1010b784:	113f9a1e 	bne	r2,r4,1010b5f0 <__alt_data_end+0xfffeb5f0>
1010b788:	4811883a 	mov	r8,r9
1010b78c:	3023883a 	mov	r17,r6
1010b790:	1021883a 	mov	r16,r2
1010b794:	3825883a 	mov	r18,r7
1010b798:	003e9306 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b79c:	8000161e 	bne	r16,zero,1010b7f8 <__adddf3+0x68c>
1010b7a0:	444ab03a 	or	r5,r8,r17
1010b7a4:	28005126 	beq	r5,zero,1010b8ec <__adddf3+0x780>
1010b7a8:	0108303a 	nor	r4,zero,r4
1010b7ac:	20004d1e 	bne	r4,zero,1010b8e4 <__adddf3+0x778>
1010b7b0:	89a3883a 	add	r17,r17,r6
1010b7b4:	4253883a 	add	r9,r8,r9
1010b7b8:	898d803a 	cmpltu	r6,r17,r6
1010b7bc:	3251883a 	add	r8,r6,r9
1010b7c0:	1021883a 	mov	r16,r2
1010b7c4:	003f0806 	br	1010b3e8 <__alt_data_end+0xfffeb3e8>
1010b7c8:	1000301e 	bne	r2,zero,1010b88c <__adddf3+0x720>
1010b7cc:	4984b03a 	or	r2,r9,r6
1010b7d0:	10007126 	beq	r2,zero,1010b998 <__adddf3+0x82c>
1010b7d4:	4811883a 	mov	r8,r9
1010b7d8:	3023883a 	mov	r17,r6
1010b7dc:	3825883a 	mov	r18,r7
1010b7e0:	0401ffc4 	movi	r16,2047
1010b7e4:	003e8006 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b7e8:	4462b03a 	or	r17,r8,r17
1010b7ec:	8822c03a 	cmpne	r17,r17,zero
1010b7f0:	0007883a 	mov	r3,zero
1010b7f4:	003f8b06 	br	1010b624 <__alt_data_end+0xfffeb624>
1010b7f8:	0141ffc4 	movi	r5,2047
1010b7fc:	11403b26 	beq	r2,r5,1010b8ec <__adddf3+0x780>
1010b800:	0109c83a 	sub	r4,zero,r4
1010b804:	42002034 	orhi	r8,r8,128
1010b808:	01400e04 	movi	r5,56
1010b80c:	29006716 	blt	r5,r4,1010b9ac <__adddf3+0x840>
1010b810:	014007c4 	movi	r5,31
1010b814:	29007016 	blt	r5,r4,1010b9d8 <__adddf3+0x86c>
1010b818:	01400804 	movi	r5,32
1010b81c:	290bc83a 	sub	r5,r5,r4
1010b820:	4154983a 	sll	r10,r8,r5
1010b824:	890ed83a 	srl	r7,r17,r4
1010b828:	894a983a 	sll	r5,r17,r5
1010b82c:	4108d83a 	srl	r4,r8,r4
1010b830:	51e2b03a 	or	r17,r10,r7
1010b834:	280ac03a 	cmpne	r5,r5,zero
1010b838:	8962b03a 	or	r17,r17,r5
1010b83c:	89a3883a 	add	r17,r17,r6
1010b840:	2253883a 	add	r9,r4,r9
1010b844:	898d803a 	cmpltu	r6,r17,r6
1010b848:	3251883a 	add	r8,r6,r9
1010b84c:	1021883a 	mov	r16,r2
1010b850:	003ee506 	br	1010b3e8 <__alt_data_end+0xfffeb3e8>
1010b854:	4984b03a 	or	r2,r9,r6
1010b858:	103e6326 	beq	r2,zero,1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b85c:	8987c83a 	sub	r3,r17,r6
1010b860:	88c9803a 	cmpltu	r4,r17,r3
1010b864:	4245c83a 	sub	r2,r8,r9
1010b868:	1105c83a 	sub	r2,r2,r4
1010b86c:	1100202c 	andhi	r4,r2,128
1010b870:	203ebb26 	beq	r4,zero,1010b360 <__alt_data_end+0xfffeb360>
1010b874:	3463c83a 	sub	r17,r6,r17
1010b878:	4a07c83a 	sub	r3,r9,r8
1010b87c:	344d803a 	cmpltu	r6,r6,r17
1010b880:	1991c83a 	sub	r8,r3,r6
1010b884:	3825883a 	mov	r18,r7
1010b888:	003e5706 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b88c:	4984b03a 	or	r2,r9,r6
1010b890:	10002e26 	beq	r2,zero,1010b94c <__adddf3+0x7e0>
1010b894:	4004d0fa 	srli	r2,r8,3
1010b898:	8822d0fa 	srli	r17,r17,3
1010b89c:	4010977a 	slli	r8,r8,29
1010b8a0:	10c0022c 	andhi	r3,r2,8
1010b8a4:	4462b03a 	or	r17,r8,r17
1010b8a8:	18000826 	beq	r3,zero,1010b8cc <__adddf3+0x760>
1010b8ac:	4808d0fa 	srli	r4,r9,3
1010b8b0:	20c0022c 	andhi	r3,r4,8
1010b8b4:	1800051e 	bne	r3,zero,1010b8cc <__adddf3+0x760>
1010b8b8:	300cd0fa 	srli	r6,r6,3
1010b8bc:	4806977a 	slli	r3,r9,29
1010b8c0:	2005883a 	mov	r2,r4
1010b8c4:	3825883a 	mov	r18,r7
1010b8c8:	19a2b03a 	or	r17,r3,r6
1010b8cc:	8810d77a 	srli	r8,r17,29
1010b8d0:	100490fa 	slli	r2,r2,3
1010b8d4:	882290fa 	slli	r17,r17,3
1010b8d8:	0401ffc4 	movi	r16,2047
1010b8dc:	4090b03a 	or	r8,r8,r2
1010b8e0:	003e4106 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b8e4:	0141ffc4 	movi	r5,2047
1010b8e8:	117fc71e 	bne	r2,r5,1010b808 <__alt_data_end+0xfffeb808>
1010b8ec:	4811883a 	mov	r8,r9
1010b8f0:	3023883a 	mov	r17,r6
1010b8f4:	1021883a 	mov	r16,r2
1010b8f8:	003e3b06 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b8fc:	10002f26 	beq	r2,zero,1010b9bc <__adddf3+0x850>
1010b900:	4984b03a 	or	r2,r9,r6
1010b904:	10001126 	beq	r2,zero,1010b94c <__adddf3+0x7e0>
1010b908:	4004d0fa 	srli	r2,r8,3
1010b90c:	8822d0fa 	srli	r17,r17,3
1010b910:	4010977a 	slli	r8,r8,29
1010b914:	10c0022c 	andhi	r3,r2,8
1010b918:	4462b03a 	or	r17,r8,r17
1010b91c:	183feb26 	beq	r3,zero,1010b8cc <__alt_data_end+0xfffeb8cc>
1010b920:	4808d0fa 	srli	r4,r9,3
1010b924:	20c0022c 	andhi	r3,r4,8
1010b928:	183fe81e 	bne	r3,zero,1010b8cc <__alt_data_end+0xfffeb8cc>
1010b92c:	300cd0fa 	srli	r6,r6,3
1010b930:	4806977a 	slli	r3,r9,29
1010b934:	2005883a 	mov	r2,r4
1010b938:	19a2b03a 	or	r17,r3,r6
1010b93c:	003fe306 	br	1010b8cc <__alt_data_end+0xfffeb8cc>
1010b940:	0011883a 	mov	r8,zero
1010b944:	0005883a 	mov	r2,zero
1010b948:	003e3f06 	br	1010b248 <__alt_data_end+0xfffeb248>
1010b94c:	0401ffc4 	movi	r16,2047
1010b950:	003e2506 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b954:	0013883a 	mov	r9,zero
1010b958:	003f8406 	br	1010b76c <__alt_data_end+0xfffeb76c>
1010b95c:	0005883a 	mov	r2,zero
1010b960:	0007883a 	mov	r3,zero
1010b964:	003e8906 	br	1010b38c <__alt_data_end+0xfffeb38c>
1010b968:	197ff804 	addi	r5,r3,-32
1010b96c:	01000804 	movi	r4,32
1010b970:	414ad83a 	srl	r5,r8,r5
1010b974:	19002426 	beq	r3,r4,1010ba08 <__adddf3+0x89c>
1010b978:	01001004 	movi	r4,64
1010b97c:	20c7c83a 	sub	r3,r4,r3
1010b980:	40c6983a 	sll	r3,r8,r3
1010b984:	1c46b03a 	or	r3,r3,r17
1010b988:	1806c03a 	cmpne	r3,r3,zero
1010b98c:	28e2b03a 	or	r17,r5,r3
1010b990:	0007883a 	mov	r3,zero
1010b994:	003f2306 	br	1010b624 <__alt_data_end+0xfffeb624>
1010b998:	0007883a 	mov	r3,zero
1010b99c:	5811883a 	mov	r8,r11
1010b9a0:	00bfffc4 	movi	r2,-1
1010b9a4:	0401ffc4 	movi	r16,2047
1010b9a8:	003e7806 	br	1010b38c <__alt_data_end+0xfffeb38c>
1010b9ac:	4462b03a 	or	r17,r8,r17
1010b9b0:	8822c03a 	cmpne	r17,r17,zero
1010b9b4:	0009883a 	mov	r4,zero
1010b9b8:	003fa006 	br	1010b83c <__alt_data_end+0xfffeb83c>
1010b9bc:	4811883a 	mov	r8,r9
1010b9c0:	3023883a 	mov	r17,r6
1010b9c4:	0401ffc4 	movi	r16,2047
1010b9c8:	003e0706 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b9cc:	4811883a 	mov	r8,r9
1010b9d0:	3023883a 	mov	r17,r6
1010b9d4:	003e0406 	br	1010b1e8 <__alt_data_end+0xfffeb1e8>
1010b9d8:	21fff804 	addi	r7,r4,-32
1010b9dc:	01400804 	movi	r5,32
1010b9e0:	41ced83a 	srl	r7,r8,r7
1010b9e4:	21400a26 	beq	r4,r5,1010ba10 <__adddf3+0x8a4>
1010b9e8:	01401004 	movi	r5,64
1010b9ec:	2909c83a 	sub	r4,r5,r4
1010b9f0:	4108983a 	sll	r4,r8,r4
1010b9f4:	2448b03a 	or	r4,r4,r17
1010b9f8:	2008c03a 	cmpne	r4,r4,zero
1010b9fc:	3922b03a 	or	r17,r7,r4
1010ba00:	0009883a 	mov	r4,zero
1010ba04:	003f8d06 	br	1010b83c <__alt_data_end+0xfffeb83c>
1010ba08:	0007883a 	mov	r3,zero
1010ba0c:	003fdd06 	br	1010b984 <__alt_data_end+0xfffeb984>
1010ba10:	0009883a 	mov	r4,zero
1010ba14:	003ff706 	br	1010b9f4 <__alt_data_end+0xfffeb9f4>

1010ba18 <__divdf3>:
1010ba18:	defff004 	addi	sp,sp,-64
1010ba1c:	dc800815 	stw	r18,32(sp)
1010ba20:	2824d53a 	srli	r18,r5,20
1010ba24:	dd800c15 	stw	r22,48(sp)
1010ba28:	282cd7fa 	srli	r22,r5,31
1010ba2c:	dc000615 	stw	r16,24(sp)
1010ba30:	04000434 	movhi	r16,16
1010ba34:	843fffc4 	addi	r16,r16,-1
1010ba38:	dfc00f15 	stw	ra,60(sp)
1010ba3c:	df000e15 	stw	fp,56(sp)
1010ba40:	ddc00d15 	stw	r23,52(sp)
1010ba44:	dd400b15 	stw	r21,44(sp)
1010ba48:	dd000a15 	stw	r20,40(sp)
1010ba4c:	dcc00915 	stw	r19,36(sp)
1010ba50:	dc400715 	stw	r17,28(sp)
1010ba54:	9481ffcc 	andi	r18,r18,2047
1010ba58:	2c20703a 	and	r16,r5,r16
1010ba5c:	b2003fcc 	andi	r8,r22,255
1010ba60:	90006126 	beq	r18,zero,1010bbe8 <__divdf3+0x1d0>
1010ba64:	0081ffc4 	movi	r2,2047
1010ba68:	202b883a 	mov	r21,r4
1010ba6c:	90803726 	beq	r18,r2,1010bb4c <__divdf3+0x134>
1010ba70:	80800434 	orhi	r2,r16,16
1010ba74:	100490fa 	slli	r2,r2,3
1010ba78:	2020d77a 	srli	r16,r4,29
1010ba7c:	202a90fa 	slli	r21,r4,3
1010ba80:	94bf0044 	addi	r18,r18,-1023
1010ba84:	80a0b03a 	or	r16,r16,r2
1010ba88:	0013883a 	mov	r9,zero
1010ba8c:	000b883a 	mov	r5,zero
1010ba90:	3806d53a 	srli	r3,r7,20
1010ba94:	382ed7fa 	srli	r23,r7,31
1010ba98:	04400434 	movhi	r17,16
1010ba9c:	8c7fffc4 	addi	r17,r17,-1
1010baa0:	18c1ffcc 	andi	r3,r3,2047
1010baa4:	3029883a 	mov	r20,r6
1010baa8:	3c62703a 	and	r17,r7,r17
1010baac:	bf003fcc 	andi	fp,r23,255
1010bab0:	18006e26 	beq	r3,zero,1010bc6c <__divdf3+0x254>
1010bab4:	0081ffc4 	movi	r2,2047
1010bab8:	18806626 	beq	r3,r2,1010bc54 <__divdf3+0x23c>
1010babc:	88800434 	orhi	r2,r17,16
1010bac0:	100490fa 	slli	r2,r2,3
1010bac4:	3022d77a 	srli	r17,r6,29
1010bac8:	302890fa 	slli	r20,r6,3
1010bacc:	18ff0044 	addi	r3,r3,-1023
1010bad0:	88a2b03a 	or	r17,r17,r2
1010bad4:	000f883a 	mov	r7,zero
1010bad8:	b5e6f03a 	xor	r19,r22,r23
1010badc:	3a4cb03a 	or	r6,r7,r9
1010bae0:	008003c4 	movi	r2,15
1010bae4:	9809883a 	mov	r4,r19
1010bae8:	90c7c83a 	sub	r3,r18,r3
1010baec:	9cc03fcc 	andi	r19,r19,255
1010baf0:	11809636 	bltu	r2,r6,1010bd4c <__divdf3+0x334>
1010baf4:	300c90ba 	slli	r6,r6,2
1010baf8:	00840474 	movhi	r2,4113
1010bafc:	10aec304 	addi	r2,r2,-17652
1010bb00:	308d883a 	add	r6,r6,r2
1010bb04:	30800017 	ldw	r2,0(r6)
1010bb08:	1000683a 	jmp	r2
1010bb0c:	1010bd4c 	andi	zero,r2,17141
1010bb10:	1010bb84 	addi	zero,r2,17134
1010bb14:	1010bd3c 	xorhi	zero,r2,17140
1010bb18:	1010bb78 	rdprs	zero,r2,17133
1010bb1c:	1010bd3c 	xorhi	zero,r2,17140
1010bb20:	1010bd10 	cmplti	zero,r2,17140
1010bb24:	1010bd3c 	xorhi	zero,r2,17140
1010bb28:	1010bb78 	rdprs	zero,r2,17133
1010bb2c:	1010bb84 	addi	zero,r2,17134
1010bb30:	1010bb84 	addi	zero,r2,17134
1010bb34:	1010bd10 	cmplti	zero,r2,17140
1010bb38:	1010bb78 	rdprs	zero,r2,17133
1010bb3c:	1010bb68 	cmpgeui	zero,r2,17133
1010bb40:	1010bb68 	cmpgeui	zero,r2,17133
1010bb44:	1010bb68 	cmpgeui	zero,r2,17133
1010bb48:	1010c0d4 	ori	zero,r2,17155
1010bb4c:	2404b03a 	or	r2,r4,r16
1010bb50:	10006c1e 	bne	r2,zero,1010bd04 <__divdf3+0x2ec>
1010bb54:	02400204 	movi	r9,8
1010bb58:	0021883a 	mov	r16,zero
1010bb5c:	002b883a 	mov	r21,zero
1010bb60:	01400084 	movi	r5,2
1010bb64:	003fca06 	br	1010ba90 <__alt_data_end+0xfffeba90>
1010bb68:	8023883a 	mov	r17,r16
1010bb6c:	a829883a 	mov	r20,r21
1010bb70:	4039883a 	mov	fp,r8
1010bb74:	280f883a 	mov	r7,r5
1010bb78:	00800084 	movi	r2,2
1010bb7c:	3881601e 	bne	r7,r2,1010c100 <__divdf3+0x6e8>
1010bb80:	e027883a 	mov	r19,fp
1010bb84:	9900004c 	andi	r4,r19,1
1010bb88:	0081ffc4 	movi	r2,2047
1010bb8c:	0021883a 	mov	r16,zero
1010bb90:	002b883a 	mov	r21,zero
1010bb94:	1004953a 	slli	r2,r2,20
1010bb98:	20c03fcc 	andi	r3,r4,255
1010bb9c:	01400434 	movhi	r5,16
1010bba0:	297fffc4 	addi	r5,r5,-1
1010bba4:	180697fa 	slli	r3,r3,31
1010bba8:	8160703a 	and	r16,r16,r5
1010bbac:	80a0b03a 	or	r16,r16,r2
1010bbb0:	80c6b03a 	or	r3,r16,r3
1010bbb4:	a805883a 	mov	r2,r21
1010bbb8:	dfc00f17 	ldw	ra,60(sp)
1010bbbc:	df000e17 	ldw	fp,56(sp)
1010bbc0:	ddc00d17 	ldw	r23,52(sp)
1010bbc4:	dd800c17 	ldw	r22,48(sp)
1010bbc8:	dd400b17 	ldw	r21,44(sp)
1010bbcc:	dd000a17 	ldw	r20,40(sp)
1010bbd0:	dcc00917 	ldw	r19,36(sp)
1010bbd4:	dc800817 	ldw	r18,32(sp)
1010bbd8:	dc400717 	ldw	r17,28(sp)
1010bbdc:	dc000617 	ldw	r16,24(sp)
1010bbe0:	dec01004 	addi	sp,sp,64
1010bbe4:	f800283a 	ret
1010bbe8:	2404b03a 	or	r2,r4,r16
1010bbec:	2023883a 	mov	r17,r4
1010bbf0:	10003f26 	beq	r2,zero,1010bcf0 <__divdf3+0x2d8>
1010bbf4:	80015e26 	beq	r16,zero,1010c170 <__divdf3+0x758>
1010bbf8:	8009883a 	mov	r4,r16
1010bbfc:	d9800215 	stw	r6,8(sp)
1010bc00:	d9c00515 	stw	r7,20(sp)
1010bc04:	da000415 	stw	r8,16(sp)
1010bc08:	010d9ac0 	call	1010d9ac <__clzsi2>
1010bc0c:	d9800217 	ldw	r6,8(sp)
1010bc10:	d9c00517 	ldw	r7,20(sp)
1010bc14:	da000417 	ldw	r8,16(sp)
1010bc18:	113ffd44 	addi	r4,r2,-11
1010bc1c:	00c00704 	movi	r3,28
1010bc20:	19014f16 	blt	r3,r4,1010c160 <__divdf3+0x748>
1010bc24:	00c00744 	movi	r3,29
1010bc28:	157ffe04 	addi	r21,r2,-8
1010bc2c:	1907c83a 	sub	r3,r3,r4
1010bc30:	8560983a 	sll	r16,r16,r21
1010bc34:	88c6d83a 	srl	r3,r17,r3
1010bc38:	8d6a983a 	sll	r21,r17,r21
1010bc3c:	1c20b03a 	or	r16,r3,r16
1010bc40:	1080fcc4 	addi	r2,r2,1011
1010bc44:	00a5c83a 	sub	r18,zero,r2
1010bc48:	0013883a 	mov	r9,zero
1010bc4c:	000b883a 	mov	r5,zero
1010bc50:	003f8f06 	br	1010ba90 <__alt_data_end+0xfffeba90>
1010bc54:	3444b03a 	or	r2,r6,r17
1010bc58:	1000231e 	bne	r2,zero,1010bce8 <__divdf3+0x2d0>
1010bc5c:	0023883a 	mov	r17,zero
1010bc60:	0029883a 	mov	r20,zero
1010bc64:	01c00084 	movi	r7,2
1010bc68:	003f9b06 	br	1010bad8 <__alt_data_end+0xfffebad8>
1010bc6c:	3444b03a 	or	r2,r6,r17
1010bc70:	10001926 	beq	r2,zero,1010bcd8 <__divdf3+0x2c0>
1010bc74:	88014b26 	beq	r17,zero,1010c1a4 <__divdf3+0x78c>
1010bc78:	8809883a 	mov	r4,r17
1010bc7c:	d9400115 	stw	r5,4(sp)
1010bc80:	d9800215 	stw	r6,8(sp)
1010bc84:	da000415 	stw	r8,16(sp)
1010bc88:	da400315 	stw	r9,12(sp)
1010bc8c:	010d9ac0 	call	1010d9ac <__clzsi2>
1010bc90:	d9400117 	ldw	r5,4(sp)
1010bc94:	d9800217 	ldw	r6,8(sp)
1010bc98:	da000417 	ldw	r8,16(sp)
1010bc9c:	da400317 	ldw	r9,12(sp)
1010bca0:	113ffd44 	addi	r4,r2,-11
1010bca4:	00c00704 	movi	r3,28
1010bca8:	19013a16 	blt	r3,r4,1010c194 <__divdf3+0x77c>
1010bcac:	00c00744 	movi	r3,29
1010bcb0:	153ffe04 	addi	r20,r2,-8
1010bcb4:	1907c83a 	sub	r3,r3,r4
1010bcb8:	8d22983a 	sll	r17,r17,r20
1010bcbc:	30c6d83a 	srl	r3,r6,r3
1010bcc0:	3528983a 	sll	r20,r6,r20
1010bcc4:	1c62b03a 	or	r17,r3,r17
1010bcc8:	1080fcc4 	addi	r2,r2,1011
1010bccc:	0087c83a 	sub	r3,zero,r2
1010bcd0:	000f883a 	mov	r7,zero
1010bcd4:	003f8006 	br	1010bad8 <__alt_data_end+0xfffebad8>
1010bcd8:	0023883a 	mov	r17,zero
1010bcdc:	0029883a 	mov	r20,zero
1010bce0:	01c00044 	movi	r7,1
1010bce4:	003f7c06 	br	1010bad8 <__alt_data_end+0xfffebad8>
1010bce8:	01c000c4 	movi	r7,3
1010bcec:	003f7a06 	br	1010bad8 <__alt_data_end+0xfffebad8>
1010bcf0:	02400104 	movi	r9,4
1010bcf4:	0021883a 	mov	r16,zero
1010bcf8:	002b883a 	mov	r21,zero
1010bcfc:	01400044 	movi	r5,1
1010bd00:	003f6306 	br	1010ba90 <__alt_data_end+0xfffeba90>
1010bd04:	02400304 	movi	r9,12
1010bd08:	014000c4 	movi	r5,3
1010bd0c:	003f6006 	br	1010ba90 <__alt_data_end+0xfffeba90>
1010bd10:	04000434 	movhi	r16,16
1010bd14:	0009883a 	mov	r4,zero
1010bd18:	843fffc4 	addi	r16,r16,-1
1010bd1c:	057fffc4 	movi	r21,-1
1010bd20:	0081ffc4 	movi	r2,2047
1010bd24:	003f9b06 	br	1010bb94 <__alt_data_end+0xfffebb94>
1010bd28:	00c00044 	movi	r3,1
1010bd2c:	1887c83a 	sub	r3,r3,r2
1010bd30:	01000e04 	movi	r4,56
1010bd34:	20c1530e 	bge	r4,r3,1010c284 <__divdf3+0x86c>
1010bd38:	9900004c 	andi	r4,r19,1
1010bd3c:	0005883a 	mov	r2,zero
1010bd40:	0021883a 	mov	r16,zero
1010bd44:	002b883a 	mov	r21,zero
1010bd48:	003f9206 	br	1010bb94 <__alt_data_end+0xfffebb94>
1010bd4c:	8c012e36 	bltu	r17,r16,1010c208 <__divdf3+0x7f0>
1010bd50:	84412c26 	beq	r16,r17,1010c204 <__divdf3+0x7ec>
1010bd54:	a82f883a 	mov	r23,r21
1010bd58:	18ffffc4 	addi	r3,r3,-1
1010bd5c:	002b883a 	mov	r21,zero
1010bd60:	a004d63a 	srli	r2,r20,24
1010bd64:	8822923a 	slli	r17,r17,8
1010bd68:	a028923a 	slli	r20,r20,8
1010bd6c:	8009883a 	mov	r4,r16
1010bd70:	88acb03a 	or	r22,r17,r2
1010bd74:	dd000015 	stw	r20,0(sp)
1010bd78:	b028d43a 	srli	r20,r22,16
1010bd7c:	d8c00215 	stw	r3,8(sp)
1010bd80:	b4bfffcc 	andi	r18,r22,65535
1010bd84:	a00b883a 	mov	r5,r20
1010bd88:	0100bc80 	call	10100bc8 <__udivsi3>
1010bd8c:	100b883a 	mov	r5,r2
1010bd90:	9009883a 	mov	r4,r18
1010bd94:	1023883a 	mov	r17,r2
1010bd98:	0100c840 	call	10100c84 <__mulsi3>
1010bd9c:	8009883a 	mov	r4,r16
1010bda0:	a00b883a 	mov	r5,r20
1010bda4:	1039883a 	mov	fp,r2
1010bda8:	0100c2c0 	call	10100c2c <__umodsi3>
1010bdac:	1004943a 	slli	r2,r2,16
1010bdb0:	b808d43a 	srli	r4,r23,16
1010bdb4:	d8c00217 	ldw	r3,8(sp)
1010bdb8:	2084b03a 	or	r2,r4,r2
1010bdbc:	1700062e 	bgeu	r2,fp,1010bdd8 <__divdf3+0x3c0>
1010bdc0:	1585883a 	add	r2,r2,r22
1010bdc4:	893fffc4 	addi	r4,r17,-1
1010bdc8:	15811d36 	bltu	r2,r22,1010c240 <__divdf3+0x828>
1010bdcc:	17011c2e 	bgeu	r2,fp,1010c240 <__divdf3+0x828>
1010bdd0:	8c7fff84 	addi	r17,r17,-2
1010bdd4:	1585883a 	add	r2,r2,r22
1010bdd8:	1739c83a 	sub	fp,r2,fp
1010bddc:	a00b883a 	mov	r5,r20
1010bde0:	e009883a 	mov	r4,fp
1010bde4:	d8c00215 	stw	r3,8(sp)
1010bde8:	0100bc80 	call	10100bc8 <__udivsi3>
1010bdec:	100b883a 	mov	r5,r2
1010bdf0:	9009883a 	mov	r4,r18
1010bdf4:	1021883a 	mov	r16,r2
1010bdf8:	0100c840 	call	10100c84 <__mulsi3>
1010bdfc:	a00b883a 	mov	r5,r20
1010be00:	e009883a 	mov	r4,fp
1010be04:	d8800415 	stw	r2,16(sp)
1010be08:	0100c2c0 	call	10100c2c <__umodsi3>
1010be0c:	1004943a 	slli	r2,r2,16
1010be10:	da000417 	ldw	r8,16(sp)
1010be14:	bdffffcc 	andi	r23,r23,65535
1010be18:	b884b03a 	or	r2,r23,r2
1010be1c:	d8c00217 	ldw	r3,8(sp)
1010be20:	1200062e 	bgeu	r2,r8,1010be3c <__divdf3+0x424>
1010be24:	1585883a 	add	r2,r2,r22
1010be28:	813fffc4 	addi	r4,r16,-1
1010be2c:	15810236 	bltu	r2,r22,1010c238 <__divdf3+0x820>
1010be30:	1201012e 	bgeu	r2,r8,1010c238 <__divdf3+0x820>
1010be34:	843fff84 	addi	r16,r16,-2
1010be38:	1585883a 	add	r2,r2,r22
1010be3c:	8822943a 	slli	r17,r17,16
1010be40:	d9800017 	ldw	r6,0(sp)
1010be44:	1211c83a 	sub	r8,r2,r8
1010be48:	8c22b03a 	or	r17,r17,r16
1010be4c:	373fffcc 	andi	fp,r6,65535
1010be50:	8abfffcc 	andi	r10,r17,65535
1010be54:	8820d43a 	srli	r16,r17,16
1010be58:	5009883a 	mov	r4,r10
1010be5c:	e00b883a 	mov	r5,fp
1010be60:	302ed43a 	srli	r23,r6,16
1010be64:	d8c00215 	stw	r3,8(sp)
1010be68:	da000415 	stw	r8,16(sp)
1010be6c:	da800115 	stw	r10,4(sp)
1010be70:	0100c840 	call	10100c84 <__mulsi3>
1010be74:	800b883a 	mov	r5,r16
1010be78:	e009883a 	mov	r4,fp
1010be7c:	d8800515 	stw	r2,20(sp)
1010be80:	0100c840 	call	10100c84 <__mulsi3>
1010be84:	8009883a 	mov	r4,r16
1010be88:	b80b883a 	mov	r5,r23
1010be8c:	d8800315 	stw	r2,12(sp)
1010be90:	0100c840 	call	10100c84 <__mulsi3>
1010be94:	da800117 	ldw	r10,4(sp)
1010be98:	b80b883a 	mov	r5,r23
1010be9c:	1021883a 	mov	r16,r2
1010bea0:	5009883a 	mov	r4,r10
1010bea4:	0100c840 	call	10100c84 <__mulsi3>
1010bea8:	d9c00517 	ldw	r7,20(sp)
1010beac:	da400317 	ldw	r9,12(sp)
1010beb0:	d8c00217 	ldw	r3,8(sp)
1010beb4:	3808d43a 	srli	r4,r7,16
1010beb8:	1245883a 	add	r2,r2,r9
1010bebc:	da000417 	ldw	r8,16(sp)
1010bec0:	2085883a 	add	r2,r4,r2
1010bec4:	1240022e 	bgeu	r2,r9,1010bed0 <__divdf3+0x4b8>
1010bec8:	01000074 	movhi	r4,1
1010becc:	8121883a 	add	r16,r16,r4
1010bed0:	1008d43a 	srli	r4,r2,16
1010bed4:	1004943a 	slli	r2,r2,16
1010bed8:	39ffffcc 	andi	r7,r7,65535
1010bedc:	2409883a 	add	r4,r4,r16
1010bee0:	11c5883a 	add	r2,r2,r7
1010bee4:	4100bb36 	bltu	r8,r4,1010c1d4 <__divdf3+0x7bc>
1010bee8:	4100d726 	beq	r8,r4,1010c248 <__divdf3+0x830>
1010beec:	4109c83a 	sub	r4,r8,r4
1010bef0:	a8a1c83a 	sub	r16,r21,r2
1010bef4:	ac2b803a 	cmpltu	r21,r21,r16
1010bef8:	256bc83a 	sub	r21,r4,r21
1010befc:	b540d926 	beq	r22,r21,1010c264 <__divdf3+0x84c>
1010bf00:	a00b883a 	mov	r5,r20
1010bf04:	a809883a 	mov	r4,r21
1010bf08:	d8c00215 	stw	r3,8(sp)
1010bf0c:	0100bc80 	call	10100bc8 <__udivsi3>
1010bf10:	100b883a 	mov	r5,r2
1010bf14:	9009883a 	mov	r4,r18
1010bf18:	d8800515 	stw	r2,20(sp)
1010bf1c:	0100c840 	call	10100c84 <__mulsi3>
1010bf20:	a809883a 	mov	r4,r21
1010bf24:	a00b883a 	mov	r5,r20
1010bf28:	d8800415 	stw	r2,16(sp)
1010bf2c:	0100c2c0 	call	10100c2c <__umodsi3>
1010bf30:	1004943a 	slli	r2,r2,16
1010bf34:	8008d43a 	srli	r4,r16,16
1010bf38:	da000417 	ldw	r8,16(sp)
1010bf3c:	d8c00217 	ldw	r3,8(sp)
1010bf40:	2084b03a 	or	r2,r4,r2
1010bf44:	d9c00517 	ldw	r7,20(sp)
1010bf48:	1200062e 	bgeu	r2,r8,1010bf64 <__divdf3+0x54c>
1010bf4c:	1585883a 	add	r2,r2,r22
1010bf50:	393fffc4 	addi	r4,r7,-1
1010bf54:	1580c536 	bltu	r2,r22,1010c26c <__divdf3+0x854>
1010bf58:	1200c42e 	bgeu	r2,r8,1010c26c <__divdf3+0x854>
1010bf5c:	39ffff84 	addi	r7,r7,-2
1010bf60:	1585883a 	add	r2,r2,r22
1010bf64:	122bc83a 	sub	r21,r2,r8
1010bf68:	a00b883a 	mov	r5,r20
1010bf6c:	a809883a 	mov	r4,r21
1010bf70:	d8c00215 	stw	r3,8(sp)
1010bf74:	d9c00515 	stw	r7,20(sp)
1010bf78:	0100bc80 	call	10100bc8 <__udivsi3>
1010bf7c:	9009883a 	mov	r4,r18
1010bf80:	100b883a 	mov	r5,r2
1010bf84:	d8800415 	stw	r2,16(sp)
1010bf88:	0100c840 	call	10100c84 <__mulsi3>
1010bf8c:	a809883a 	mov	r4,r21
1010bf90:	a00b883a 	mov	r5,r20
1010bf94:	1025883a 	mov	r18,r2
1010bf98:	0100c2c0 	call	10100c2c <__umodsi3>
1010bf9c:	1004943a 	slli	r2,r2,16
1010bfa0:	813fffcc 	andi	r4,r16,65535
1010bfa4:	d8c00217 	ldw	r3,8(sp)
1010bfa8:	20a0b03a 	or	r16,r4,r2
1010bfac:	d9c00517 	ldw	r7,20(sp)
1010bfb0:	da000417 	ldw	r8,16(sp)
1010bfb4:	8480062e 	bgeu	r16,r18,1010bfd0 <__divdf3+0x5b8>
1010bfb8:	85a1883a 	add	r16,r16,r22
1010bfbc:	40bfffc4 	addi	r2,r8,-1
1010bfc0:	8580ac36 	bltu	r16,r22,1010c274 <__divdf3+0x85c>
1010bfc4:	8480ab2e 	bgeu	r16,r18,1010c274 <__divdf3+0x85c>
1010bfc8:	423fff84 	addi	r8,r8,-2
1010bfcc:	85a1883a 	add	r16,r16,r22
1010bfd0:	3804943a 	slli	r2,r7,16
1010bfd4:	84a1c83a 	sub	r16,r16,r18
1010bfd8:	e009883a 	mov	r4,fp
1010bfdc:	1228b03a 	or	r20,r2,r8
1010bfe0:	a1ffffcc 	andi	r7,r20,65535
1010bfe4:	a024d43a 	srli	r18,r20,16
1010bfe8:	380b883a 	mov	r5,r7
1010bfec:	d8c00215 	stw	r3,8(sp)
1010bff0:	d9c00515 	stw	r7,20(sp)
1010bff4:	0100c840 	call	10100c84 <__mulsi3>
1010bff8:	900b883a 	mov	r5,r18
1010bffc:	e009883a 	mov	r4,fp
1010c000:	102b883a 	mov	r21,r2
1010c004:	0100c840 	call	10100c84 <__mulsi3>
1010c008:	900b883a 	mov	r5,r18
1010c00c:	b809883a 	mov	r4,r23
1010c010:	1039883a 	mov	fp,r2
1010c014:	0100c840 	call	10100c84 <__mulsi3>
1010c018:	d9c00517 	ldw	r7,20(sp)
1010c01c:	b80b883a 	mov	r5,r23
1010c020:	1025883a 	mov	r18,r2
1010c024:	3809883a 	mov	r4,r7
1010c028:	0100c840 	call	10100c84 <__mulsi3>
1010c02c:	a808d43a 	srli	r4,r21,16
1010c030:	1705883a 	add	r2,r2,fp
1010c034:	d8c00217 	ldw	r3,8(sp)
1010c038:	2085883a 	add	r2,r4,r2
1010c03c:	1700022e 	bgeu	r2,fp,1010c048 <__divdf3+0x630>
1010c040:	01000074 	movhi	r4,1
1010c044:	9125883a 	add	r18,r18,r4
1010c048:	1008d43a 	srli	r4,r2,16
1010c04c:	1004943a 	slli	r2,r2,16
1010c050:	ad7fffcc 	andi	r21,r21,65535
1010c054:	2489883a 	add	r4,r4,r18
1010c058:	1545883a 	add	r2,r2,r21
1010c05c:	81003836 	bltu	r16,r4,1010c140 <__divdf3+0x728>
1010c060:	81003626 	beq	r16,r4,1010c13c <__divdf3+0x724>
1010c064:	a5000054 	ori	r20,r20,1
1010c068:	1880ffc4 	addi	r2,r3,1023
1010c06c:	00bf2e0e 	bge	zero,r2,1010bd28 <__alt_data_end+0xfffebd28>
1010c070:	a10001cc 	andi	r4,r20,7
1010c074:	20000726 	beq	r4,zero,1010c094 <__divdf3+0x67c>
1010c078:	a10003cc 	andi	r4,r20,15
1010c07c:	01400104 	movi	r5,4
1010c080:	21400426 	beq	r4,r5,1010c094 <__divdf3+0x67c>
1010c084:	a149883a 	add	r4,r20,r5
1010c088:	2529803a 	cmpltu	r20,r4,r20
1010c08c:	8d23883a 	add	r17,r17,r20
1010c090:	2029883a 	mov	r20,r4
1010c094:	8900402c 	andhi	r4,r17,256
1010c098:	20000426 	beq	r4,zero,1010c0ac <__divdf3+0x694>
1010c09c:	18810004 	addi	r2,r3,1024
1010c0a0:	00ffc034 	movhi	r3,65280
1010c0a4:	18ffffc4 	addi	r3,r3,-1
1010c0a8:	88e2703a 	and	r17,r17,r3
1010c0ac:	00c1ff84 	movi	r3,2046
1010c0b0:	18beb416 	blt	r3,r2,1010bb84 <__alt_data_end+0xfffebb84>
1010c0b4:	a028d0fa 	srli	r20,r20,3
1010c0b8:	882a977a 	slli	r21,r17,29
1010c0bc:	8820927a 	slli	r16,r17,9
1010c0c0:	1081ffcc 	andi	r2,r2,2047
1010c0c4:	ad2ab03a 	or	r21,r21,r20
1010c0c8:	8020d33a 	srli	r16,r16,12
1010c0cc:	9900004c 	andi	r4,r19,1
1010c0d0:	003eb006 	br	1010bb94 <__alt_data_end+0xfffebb94>
1010c0d4:	8080022c 	andhi	r2,r16,8
1010c0d8:	10001226 	beq	r2,zero,1010c124 <__divdf3+0x70c>
1010c0dc:	8880022c 	andhi	r2,r17,8
1010c0e0:	1000101e 	bne	r2,zero,1010c124 <__divdf3+0x70c>
1010c0e4:	00800434 	movhi	r2,16
1010c0e8:	8c000234 	orhi	r16,r17,8
1010c0ec:	10bfffc4 	addi	r2,r2,-1
1010c0f0:	b809883a 	mov	r4,r23
1010c0f4:	80a0703a 	and	r16,r16,r2
1010c0f8:	a02b883a 	mov	r21,r20
1010c0fc:	003f0806 	br	1010bd20 <__alt_data_end+0xfffebd20>
1010c100:	008000c4 	movi	r2,3
1010c104:	3880b126 	beq	r7,r2,1010c3cc <__divdf3+0x9b4>
1010c108:	00800044 	movi	r2,1
1010c10c:	38805b1e 	bne	r7,r2,1010c27c <__divdf3+0x864>
1010c110:	e009883a 	mov	r4,fp
1010c114:	0005883a 	mov	r2,zero
1010c118:	0021883a 	mov	r16,zero
1010c11c:	002b883a 	mov	r21,zero
1010c120:	003e9c06 	br	1010bb94 <__alt_data_end+0xfffebb94>
1010c124:	00800434 	movhi	r2,16
1010c128:	84000234 	orhi	r16,r16,8
1010c12c:	10bfffc4 	addi	r2,r2,-1
1010c130:	b009883a 	mov	r4,r22
1010c134:	80a0703a 	and	r16,r16,r2
1010c138:	003ef906 	br	1010bd20 <__alt_data_end+0xfffebd20>
1010c13c:	103fca26 	beq	r2,zero,1010c068 <__alt_data_end+0xfffec068>
1010c140:	b421883a 	add	r16,r22,r16
1010c144:	a17fffc4 	addi	r5,r20,-1
1010c148:	8580422e 	bgeu	r16,r22,1010c254 <__divdf3+0x83c>
1010c14c:	2829883a 	mov	r20,r5
1010c150:	813fc41e 	bne	r16,r4,1010c064 <__alt_data_end+0xfffec064>
1010c154:	d9800017 	ldw	r6,0(sp)
1010c158:	30bfc21e 	bne	r6,r2,1010c064 <__alt_data_end+0xfffec064>
1010c15c:	003fc206 	br	1010c068 <__alt_data_end+0xfffec068>
1010c160:	143ff604 	addi	r16,r2,-40
1010c164:	8c20983a 	sll	r16,r17,r16
1010c168:	002b883a 	mov	r21,zero
1010c16c:	003eb406 	br	1010bc40 <__alt_data_end+0xfffebc40>
1010c170:	d9800215 	stw	r6,8(sp)
1010c174:	d9c00515 	stw	r7,20(sp)
1010c178:	da000415 	stw	r8,16(sp)
1010c17c:	010d9ac0 	call	1010d9ac <__clzsi2>
1010c180:	10800804 	addi	r2,r2,32
1010c184:	da000417 	ldw	r8,16(sp)
1010c188:	d9c00517 	ldw	r7,20(sp)
1010c18c:	d9800217 	ldw	r6,8(sp)
1010c190:	003ea106 	br	1010bc18 <__alt_data_end+0xfffebc18>
1010c194:	147ff604 	addi	r17,r2,-40
1010c198:	3462983a 	sll	r17,r6,r17
1010c19c:	0029883a 	mov	r20,zero
1010c1a0:	003ec906 	br	1010bcc8 <__alt_data_end+0xfffebcc8>
1010c1a4:	3009883a 	mov	r4,r6
1010c1a8:	d9400115 	stw	r5,4(sp)
1010c1ac:	d9800215 	stw	r6,8(sp)
1010c1b0:	da000415 	stw	r8,16(sp)
1010c1b4:	da400315 	stw	r9,12(sp)
1010c1b8:	010d9ac0 	call	1010d9ac <__clzsi2>
1010c1bc:	10800804 	addi	r2,r2,32
1010c1c0:	da400317 	ldw	r9,12(sp)
1010c1c4:	da000417 	ldw	r8,16(sp)
1010c1c8:	d9800217 	ldw	r6,8(sp)
1010c1cc:	d9400117 	ldw	r5,4(sp)
1010c1d0:	003eb306 	br	1010bca0 <__alt_data_end+0xfffebca0>
1010c1d4:	d9800017 	ldw	r6,0(sp)
1010c1d8:	a9ab883a 	add	r21,r21,r6
1010c1dc:	a98b803a 	cmpltu	r5,r21,r6
1010c1e0:	2d8b883a 	add	r5,r5,r22
1010c1e4:	2a11883a 	add	r8,r5,r8
1010c1e8:	897fffc4 	addi	r5,r17,-1
1010c1ec:	b2000c2e 	bgeu	r22,r8,1010c220 <__divdf3+0x808>
1010c1f0:	41003f36 	bltu	r8,r4,1010c2f0 <__divdf3+0x8d8>
1010c1f4:	22006c26 	beq	r4,r8,1010c3a8 <__divdf3+0x990>
1010c1f8:	4109c83a 	sub	r4,r8,r4
1010c1fc:	2823883a 	mov	r17,r5
1010c200:	003f3b06 	br	1010bef0 <__alt_data_end+0xfffebef0>
1010c204:	ad3ed336 	bltu	r21,r20,1010bd54 <__alt_data_end+0xfffebd54>
1010c208:	a804d07a 	srli	r2,r21,1
1010c20c:	802e97fa 	slli	r23,r16,31
1010c210:	a82a97fa 	slli	r21,r21,31
1010c214:	8020d07a 	srli	r16,r16,1
1010c218:	b8aeb03a 	or	r23,r23,r2
1010c21c:	003ed006 	br	1010bd60 <__alt_data_end+0xfffebd60>
1010c220:	b23ff51e 	bne	r22,r8,1010c1f8 <__alt_data_end+0xfffec1f8>
1010c224:	d9800017 	ldw	r6,0(sp)
1010c228:	a9bff12e 	bgeu	r21,r6,1010c1f0 <__alt_data_end+0xfffec1f0>
1010c22c:	b109c83a 	sub	r4,r22,r4
1010c230:	2823883a 	mov	r17,r5
1010c234:	003f2e06 	br	1010bef0 <__alt_data_end+0xfffebef0>
1010c238:	2021883a 	mov	r16,r4
1010c23c:	003eff06 	br	1010be3c <__alt_data_end+0xfffebe3c>
1010c240:	2023883a 	mov	r17,r4
1010c244:	003ee406 	br	1010bdd8 <__alt_data_end+0xfffebdd8>
1010c248:	a8bfe236 	bltu	r21,r2,1010c1d4 <__alt_data_end+0xfffec1d4>
1010c24c:	0009883a 	mov	r4,zero
1010c250:	003f2706 	br	1010bef0 <__alt_data_end+0xfffebef0>
1010c254:	81002d36 	bltu	r16,r4,1010c30c <__divdf3+0x8f4>
1010c258:	24005626 	beq	r4,r16,1010c3b4 <__divdf3+0x99c>
1010c25c:	2829883a 	mov	r20,r5
1010c260:	003f8006 	br	1010c064 <__alt_data_end+0xfffec064>
1010c264:	053fffc4 	movi	r20,-1
1010c268:	003f7f06 	br	1010c068 <__alt_data_end+0xfffec068>
1010c26c:	200f883a 	mov	r7,r4
1010c270:	003f3c06 	br	1010bf64 <__alt_data_end+0xfffebf64>
1010c274:	1011883a 	mov	r8,r2
1010c278:	003f5506 	br	1010bfd0 <__alt_data_end+0xfffebfd0>
1010c27c:	e027883a 	mov	r19,fp
1010c280:	003f7906 	br	1010c068 <__alt_data_end+0xfffec068>
1010c284:	010007c4 	movi	r4,31
1010c288:	20c02816 	blt	r4,r3,1010c32c <__divdf3+0x914>
1010c28c:	00800804 	movi	r2,32
1010c290:	10c5c83a 	sub	r2,r2,r3
1010c294:	888a983a 	sll	r5,r17,r2
1010c298:	a0c8d83a 	srl	r4,r20,r3
1010c29c:	a084983a 	sll	r2,r20,r2
1010c2a0:	88e2d83a 	srl	r17,r17,r3
1010c2a4:	2906b03a 	or	r3,r5,r4
1010c2a8:	1004c03a 	cmpne	r2,r2,zero
1010c2ac:	1886b03a 	or	r3,r3,r2
1010c2b0:	188001cc 	andi	r2,r3,7
1010c2b4:	10000726 	beq	r2,zero,1010c2d4 <__divdf3+0x8bc>
1010c2b8:	188003cc 	andi	r2,r3,15
1010c2bc:	01000104 	movi	r4,4
1010c2c0:	11000426 	beq	r2,r4,1010c2d4 <__divdf3+0x8bc>
1010c2c4:	1805883a 	mov	r2,r3
1010c2c8:	10c00104 	addi	r3,r2,4
1010c2cc:	1885803a 	cmpltu	r2,r3,r2
1010c2d0:	88a3883a 	add	r17,r17,r2
1010c2d4:	8880202c 	andhi	r2,r17,128
1010c2d8:	10002926 	beq	r2,zero,1010c380 <__divdf3+0x968>
1010c2dc:	9900004c 	andi	r4,r19,1
1010c2e0:	00800044 	movi	r2,1
1010c2e4:	0021883a 	mov	r16,zero
1010c2e8:	002b883a 	mov	r21,zero
1010c2ec:	003e2906 	br	1010bb94 <__alt_data_end+0xfffebb94>
1010c2f0:	d9800017 	ldw	r6,0(sp)
1010c2f4:	8c7fff84 	addi	r17,r17,-2
1010c2f8:	a9ab883a 	add	r21,r21,r6
1010c2fc:	a98b803a 	cmpltu	r5,r21,r6
1010c300:	2d8b883a 	add	r5,r5,r22
1010c304:	2a11883a 	add	r8,r5,r8
1010c308:	003ef806 	br	1010beec <__alt_data_end+0xfffebeec>
1010c30c:	d9800017 	ldw	r6,0(sp)
1010c310:	318f883a 	add	r7,r6,r6
1010c314:	398b803a 	cmpltu	r5,r7,r6
1010c318:	2d8d883a 	add	r6,r5,r22
1010c31c:	81a1883a 	add	r16,r16,r6
1010c320:	a17fff84 	addi	r5,r20,-2
1010c324:	d9c00015 	stw	r7,0(sp)
1010c328:	003f8806 	br	1010c14c <__alt_data_end+0xfffec14c>
1010c32c:	013ff844 	movi	r4,-31
1010c330:	2085c83a 	sub	r2,r4,r2
1010c334:	8888d83a 	srl	r4,r17,r2
1010c338:	00800804 	movi	r2,32
1010c33c:	18802126 	beq	r3,r2,1010c3c4 <__divdf3+0x9ac>
1010c340:	04001004 	movi	r16,64
1010c344:	80c7c83a 	sub	r3,r16,r3
1010c348:	88e0983a 	sll	r16,r17,r3
1010c34c:	8504b03a 	or	r2,r16,r20
1010c350:	1004c03a 	cmpne	r2,r2,zero
1010c354:	2084b03a 	or	r2,r4,r2
1010c358:	144001cc 	andi	r17,r2,7
1010c35c:	88000d1e 	bne	r17,zero,1010c394 <__divdf3+0x97c>
1010c360:	0021883a 	mov	r16,zero
1010c364:	102ad0fa 	srli	r21,r2,3
1010c368:	9900004c 	andi	r4,r19,1
1010c36c:	0005883a 	mov	r2,zero
1010c370:	ac6ab03a 	or	r21,r21,r17
1010c374:	003e0706 	br	1010bb94 <__alt_data_end+0xfffebb94>
1010c378:	1007883a 	mov	r3,r2
1010c37c:	0023883a 	mov	r17,zero
1010c380:	8820927a 	slli	r16,r17,9
1010c384:	1805883a 	mov	r2,r3
1010c388:	8822977a 	slli	r17,r17,29
1010c38c:	8020d33a 	srli	r16,r16,12
1010c390:	003ff406 	br	1010c364 <__alt_data_end+0xfffec364>
1010c394:	10c003cc 	andi	r3,r2,15
1010c398:	01000104 	movi	r4,4
1010c39c:	193ff626 	beq	r3,r4,1010c378 <__alt_data_end+0xfffec378>
1010c3a0:	0023883a 	mov	r17,zero
1010c3a4:	003fc806 	br	1010c2c8 <__alt_data_end+0xfffec2c8>
1010c3a8:	a8bfd136 	bltu	r21,r2,1010c2f0 <__alt_data_end+0xfffec2f0>
1010c3ac:	2823883a 	mov	r17,r5
1010c3b0:	003fa606 	br	1010c24c <__alt_data_end+0xfffec24c>
1010c3b4:	d9800017 	ldw	r6,0(sp)
1010c3b8:	30bfd436 	bltu	r6,r2,1010c30c <__alt_data_end+0xfffec30c>
1010c3bc:	2829883a 	mov	r20,r5
1010c3c0:	003f6406 	br	1010c154 <__alt_data_end+0xfffec154>
1010c3c4:	0021883a 	mov	r16,zero
1010c3c8:	003fe006 	br	1010c34c <__alt_data_end+0xfffec34c>
1010c3cc:	00800434 	movhi	r2,16
1010c3d0:	8c000234 	orhi	r16,r17,8
1010c3d4:	10bfffc4 	addi	r2,r2,-1
1010c3d8:	e009883a 	mov	r4,fp
1010c3dc:	80a0703a 	and	r16,r16,r2
1010c3e0:	a02b883a 	mov	r21,r20
1010c3e4:	003e4e06 	br	1010bd20 <__alt_data_end+0xfffebd20>

1010c3e8 <__eqdf2>:
1010c3e8:	2804d53a 	srli	r2,r5,20
1010c3ec:	3806d53a 	srli	r3,r7,20
1010c3f0:	02000434 	movhi	r8,16
1010c3f4:	423fffc4 	addi	r8,r8,-1
1010c3f8:	1081ffcc 	andi	r2,r2,2047
1010c3fc:	0281ffc4 	movi	r10,2047
1010c400:	2a12703a 	and	r9,r5,r8
1010c404:	18c1ffcc 	andi	r3,r3,2047
1010c408:	3a10703a 	and	r8,r7,r8
1010c40c:	280ad7fa 	srli	r5,r5,31
1010c410:	380ed7fa 	srli	r7,r7,31
1010c414:	12801026 	beq	r2,r10,1010c458 <__eqdf2+0x70>
1010c418:	0281ffc4 	movi	r10,2047
1010c41c:	1a800a26 	beq	r3,r10,1010c448 <__eqdf2+0x60>
1010c420:	10c00226 	beq	r2,r3,1010c42c <__eqdf2+0x44>
1010c424:	00800044 	movi	r2,1
1010c428:	f800283a 	ret
1010c42c:	4a3ffd1e 	bne	r9,r8,1010c424 <__alt_data_end+0xfffec424>
1010c430:	21bffc1e 	bne	r4,r6,1010c424 <__alt_data_end+0xfffec424>
1010c434:	29c00c26 	beq	r5,r7,1010c468 <__eqdf2+0x80>
1010c438:	103ffa1e 	bne	r2,zero,1010c424 <__alt_data_end+0xfffec424>
1010c43c:	2244b03a 	or	r2,r4,r9
1010c440:	1004c03a 	cmpne	r2,r2,zero
1010c444:	f800283a 	ret
1010c448:	3214b03a 	or	r10,r6,r8
1010c44c:	503ff426 	beq	r10,zero,1010c420 <__alt_data_end+0xfffec420>
1010c450:	00800044 	movi	r2,1
1010c454:	f800283a 	ret
1010c458:	2254b03a 	or	r10,r4,r9
1010c45c:	503fee26 	beq	r10,zero,1010c418 <__alt_data_end+0xfffec418>
1010c460:	00800044 	movi	r2,1
1010c464:	f800283a 	ret
1010c468:	0005883a 	mov	r2,zero
1010c46c:	f800283a 	ret

1010c470 <__gedf2>:
1010c470:	2804d53a 	srli	r2,r5,20
1010c474:	3806d53a 	srli	r3,r7,20
1010c478:	02000434 	movhi	r8,16
1010c47c:	423fffc4 	addi	r8,r8,-1
1010c480:	1081ffcc 	andi	r2,r2,2047
1010c484:	0241ffc4 	movi	r9,2047
1010c488:	2a14703a 	and	r10,r5,r8
1010c48c:	18c1ffcc 	andi	r3,r3,2047
1010c490:	3a10703a 	and	r8,r7,r8
1010c494:	280ad7fa 	srli	r5,r5,31
1010c498:	380ed7fa 	srli	r7,r7,31
1010c49c:	12401d26 	beq	r2,r9,1010c514 <__gedf2+0xa4>
1010c4a0:	0241ffc4 	movi	r9,2047
1010c4a4:	1a401226 	beq	r3,r9,1010c4f0 <__gedf2+0x80>
1010c4a8:	1000081e 	bne	r2,zero,1010c4cc <__gedf2+0x5c>
1010c4ac:	2296b03a 	or	r11,r4,r10
1010c4b0:	5813003a 	cmpeq	r9,r11,zero
1010c4b4:	1800091e 	bne	r3,zero,1010c4dc <__gedf2+0x6c>
1010c4b8:	3218b03a 	or	r12,r6,r8
1010c4bc:	6000071e 	bne	r12,zero,1010c4dc <__gedf2+0x6c>
1010c4c0:	0005883a 	mov	r2,zero
1010c4c4:	5800101e 	bne	r11,zero,1010c508 <__gedf2+0x98>
1010c4c8:	f800283a 	ret
1010c4cc:	18000c1e 	bne	r3,zero,1010c500 <__gedf2+0x90>
1010c4d0:	3212b03a 	or	r9,r6,r8
1010c4d4:	48000c26 	beq	r9,zero,1010c508 <__gedf2+0x98>
1010c4d8:	0013883a 	mov	r9,zero
1010c4dc:	39c03fcc 	andi	r7,r7,255
1010c4e0:	48000826 	beq	r9,zero,1010c504 <__gedf2+0x94>
1010c4e4:	38000926 	beq	r7,zero,1010c50c <__gedf2+0x9c>
1010c4e8:	00800044 	movi	r2,1
1010c4ec:	f800283a 	ret
1010c4f0:	3212b03a 	or	r9,r6,r8
1010c4f4:	483fec26 	beq	r9,zero,1010c4a8 <__alt_data_end+0xfffec4a8>
1010c4f8:	00bfff84 	movi	r2,-2
1010c4fc:	f800283a 	ret
1010c500:	39c03fcc 	andi	r7,r7,255
1010c504:	29c00626 	beq	r5,r7,1010c520 <__gedf2+0xb0>
1010c508:	283ff726 	beq	r5,zero,1010c4e8 <__alt_data_end+0xfffec4e8>
1010c50c:	00bfffc4 	movi	r2,-1
1010c510:	f800283a 	ret
1010c514:	2292b03a 	or	r9,r4,r10
1010c518:	483fe126 	beq	r9,zero,1010c4a0 <__alt_data_end+0xfffec4a0>
1010c51c:	003ff606 	br	1010c4f8 <__alt_data_end+0xfffec4f8>
1010c520:	18bff916 	blt	r3,r2,1010c508 <__alt_data_end+0xfffec508>
1010c524:	10c00316 	blt	r2,r3,1010c534 <__gedf2+0xc4>
1010c528:	42bff736 	bltu	r8,r10,1010c508 <__alt_data_end+0xfffec508>
1010c52c:	52000326 	beq	r10,r8,1010c53c <__gedf2+0xcc>
1010c530:	5200042e 	bgeu	r10,r8,1010c544 <__gedf2+0xd4>
1010c534:	283fec1e 	bne	r5,zero,1010c4e8 <__alt_data_end+0xfffec4e8>
1010c538:	003ff406 	br	1010c50c <__alt_data_end+0xfffec50c>
1010c53c:	313ff236 	bltu	r6,r4,1010c508 <__alt_data_end+0xfffec508>
1010c540:	21bffc36 	bltu	r4,r6,1010c534 <__alt_data_end+0xfffec534>
1010c544:	0005883a 	mov	r2,zero
1010c548:	f800283a 	ret

1010c54c <__ledf2>:
1010c54c:	2804d53a 	srli	r2,r5,20
1010c550:	3810d53a 	srli	r8,r7,20
1010c554:	00c00434 	movhi	r3,16
1010c558:	18ffffc4 	addi	r3,r3,-1
1010c55c:	1081ffcc 	andi	r2,r2,2047
1010c560:	0241ffc4 	movi	r9,2047
1010c564:	28d4703a 	and	r10,r5,r3
1010c568:	4201ffcc 	andi	r8,r8,2047
1010c56c:	38c6703a 	and	r3,r7,r3
1010c570:	280ad7fa 	srli	r5,r5,31
1010c574:	380ed7fa 	srli	r7,r7,31
1010c578:	12401f26 	beq	r2,r9,1010c5f8 <__ledf2+0xac>
1010c57c:	0241ffc4 	movi	r9,2047
1010c580:	42401426 	beq	r8,r9,1010c5d4 <__ledf2+0x88>
1010c584:	1000091e 	bne	r2,zero,1010c5ac <__ledf2+0x60>
1010c588:	2296b03a 	or	r11,r4,r10
1010c58c:	5813003a 	cmpeq	r9,r11,zero
1010c590:	29403fcc 	andi	r5,r5,255
1010c594:	40000a1e 	bne	r8,zero,1010c5c0 <__ledf2+0x74>
1010c598:	30d8b03a 	or	r12,r6,r3
1010c59c:	6000081e 	bne	r12,zero,1010c5c0 <__ledf2+0x74>
1010c5a0:	0005883a 	mov	r2,zero
1010c5a4:	5800111e 	bne	r11,zero,1010c5ec <__ledf2+0xa0>
1010c5a8:	f800283a 	ret
1010c5ac:	29403fcc 	andi	r5,r5,255
1010c5b0:	40000c1e 	bne	r8,zero,1010c5e4 <__ledf2+0x98>
1010c5b4:	30d2b03a 	or	r9,r6,r3
1010c5b8:	48000c26 	beq	r9,zero,1010c5ec <__ledf2+0xa0>
1010c5bc:	0013883a 	mov	r9,zero
1010c5c0:	39c03fcc 	andi	r7,r7,255
1010c5c4:	48000826 	beq	r9,zero,1010c5e8 <__ledf2+0x9c>
1010c5c8:	38001126 	beq	r7,zero,1010c610 <__ledf2+0xc4>
1010c5cc:	00800044 	movi	r2,1
1010c5d0:	f800283a 	ret
1010c5d4:	30d2b03a 	or	r9,r6,r3
1010c5d8:	483fea26 	beq	r9,zero,1010c584 <__alt_data_end+0xfffec584>
1010c5dc:	00800084 	movi	r2,2
1010c5e0:	f800283a 	ret
1010c5e4:	39c03fcc 	andi	r7,r7,255
1010c5e8:	39400726 	beq	r7,r5,1010c608 <__ledf2+0xbc>
1010c5ec:	2800081e 	bne	r5,zero,1010c610 <__ledf2+0xc4>
1010c5f0:	00800044 	movi	r2,1
1010c5f4:	f800283a 	ret
1010c5f8:	2292b03a 	or	r9,r4,r10
1010c5fc:	483fdf26 	beq	r9,zero,1010c57c <__alt_data_end+0xfffec57c>
1010c600:	00800084 	movi	r2,2
1010c604:	f800283a 	ret
1010c608:	4080030e 	bge	r8,r2,1010c618 <__ledf2+0xcc>
1010c60c:	383fef26 	beq	r7,zero,1010c5cc <__alt_data_end+0xfffec5cc>
1010c610:	00bfffc4 	movi	r2,-1
1010c614:	f800283a 	ret
1010c618:	123feb16 	blt	r2,r8,1010c5c8 <__alt_data_end+0xfffec5c8>
1010c61c:	1abff336 	bltu	r3,r10,1010c5ec <__alt_data_end+0xfffec5ec>
1010c620:	50c00326 	beq	r10,r3,1010c630 <__ledf2+0xe4>
1010c624:	50c0042e 	bgeu	r10,r3,1010c638 <__ledf2+0xec>
1010c628:	283fe81e 	bne	r5,zero,1010c5cc <__alt_data_end+0xfffec5cc>
1010c62c:	003ff806 	br	1010c610 <__alt_data_end+0xfffec610>
1010c630:	313fee36 	bltu	r6,r4,1010c5ec <__alt_data_end+0xfffec5ec>
1010c634:	21bffc36 	bltu	r4,r6,1010c628 <__alt_data_end+0xfffec628>
1010c638:	0005883a 	mov	r2,zero
1010c63c:	f800283a 	ret

1010c640 <__muldf3>:
1010c640:	deffee04 	addi	sp,sp,-72
1010c644:	dd000c15 	stw	r20,48(sp)
1010c648:	2828d53a 	srli	r20,r5,20
1010c64c:	ddc00f15 	stw	r23,60(sp)
1010c650:	282ed7fa 	srli	r23,r5,31
1010c654:	dc000815 	stw	r16,32(sp)
1010c658:	04000434 	movhi	r16,16
1010c65c:	dcc00b15 	stw	r19,44(sp)
1010c660:	843fffc4 	addi	r16,r16,-1
1010c664:	dfc01115 	stw	ra,68(sp)
1010c668:	df001015 	stw	fp,64(sp)
1010c66c:	dd800e15 	stw	r22,56(sp)
1010c670:	dd400d15 	stw	r21,52(sp)
1010c674:	dc800a15 	stw	r18,40(sp)
1010c678:	dc400915 	stw	r17,36(sp)
1010c67c:	a501ffcc 	andi	r20,r20,2047
1010c680:	2c20703a 	and	r16,r5,r16
1010c684:	b827883a 	mov	r19,r23
1010c688:	ba403fcc 	andi	r9,r23,255
1010c68c:	a0006026 	beq	r20,zero,1010c810 <__muldf3+0x1d0>
1010c690:	0081ffc4 	movi	r2,2047
1010c694:	202d883a 	mov	r22,r4
1010c698:	a0803626 	beq	r20,r2,1010c774 <__muldf3+0x134>
1010c69c:	84000434 	orhi	r16,r16,16
1010c6a0:	200ad77a 	srli	r5,r4,29
1010c6a4:	800490fa 	slli	r2,r16,3
1010c6a8:	202c90fa 	slli	r22,r4,3
1010c6ac:	a53f0044 	addi	r20,r20,-1023
1010c6b0:	28a0b03a 	or	r16,r5,r2
1010c6b4:	002b883a 	mov	r21,zero
1010c6b8:	000b883a 	mov	r5,zero
1010c6bc:	3804d53a 	srli	r2,r7,20
1010c6c0:	3838d7fa 	srli	fp,r7,31
1010c6c4:	04400434 	movhi	r17,16
1010c6c8:	8c7fffc4 	addi	r17,r17,-1
1010c6cc:	1081ffcc 	andi	r2,r2,2047
1010c6d0:	3025883a 	mov	r18,r6
1010c6d4:	3c62703a 	and	r17,r7,r17
1010c6d8:	e2803fcc 	andi	r10,fp,255
1010c6dc:	10006d26 	beq	r2,zero,1010c894 <__muldf3+0x254>
1010c6e0:	00c1ffc4 	movi	r3,2047
1010c6e4:	10c06526 	beq	r2,r3,1010c87c <__muldf3+0x23c>
1010c6e8:	8c400434 	orhi	r17,r17,16
1010c6ec:	300ed77a 	srli	r7,r6,29
1010c6f0:	880690fa 	slli	r3,r17,3
1010c6f4:	302490fa 	slli	r18,r6,3
1010c6f8:	10bf0044 	addi	r2,r2,-1023
1010c6fc:	38e2b03a 	or	r17,r7,r3
1010c700:	000f883a 	mov	r7,zero
1010c704:	a087883a 	add	r3,r20,r2
1010c708:	010003c4 	movi	r4,15
1010c70c:	3d44b03a 	or	r2,r7,r21
1010c710:	e5ccf03a 	xor	r6,fp,r23
1010c714:	1a000044 	addi	r8,r3,1
1010c718:	20809b36 	bltu	r4,r2,1010c988 <__muldf3+0x348>
1010c71c:	100490ba 	slli	r2,r2,2
1010c720:	01040474 	movhi	r4,4113
1010c724:	2131cd04 	addi	r4,r4,-14540
1010c728:	1105883a 	add	r2,r2,r4
1010c72c:	10800017 	ldw	r2,0(r2)
1010c730:	1000683a 	jmp	r2
1010c734:	1010c988 	cmpgei	zero,r2,17190
1010c738:	1010c794 	ori	zero,r2,17182
1010c73c:	1010c794 	ori	zero,r2,17182
1010c740:	1010c790 	cmplti	zero,r2,17182
1010c744:	1010c964 	muli	zero,r2,17189
1010c748:	1010c964 	muli	zero,r2,17189
1010c74c:	1010c94c 	andi	zero,r2,17189
1010c750:	1010c790 	cmplti	zero,r2,17182
1010c754:	1010c964 	muli	zero,r2,17189
1010c758:	1010c94c 	andi	zero,r2,17189
1010c75c:	1010c964 	muli	zero,r2,17189
1010c760:	1010c790 	cmplti	zero,r2,17182
1010c764:	1010c974 	orhi	zero,r2,17189
1010c768:	1010c974 	orhi	zero,r2,17189
1010c76c:	1010c974 	orhi	zero,r2,17189
1010c770:	1010ccd4 	ori	zero,r2,17203
1010c774:	2404b03a 	or	r2,r4,r16
1010c778:	1000711e 	bne	r2,zero,1010c940 <__muldf3+0x300>
1010c77c:	05400204 	movi	r21,8
1010c780:	0021883a 	mov	r16,zero
1010c784:	002d883a 	mov	r22,zero
1010c788:	01400084 	movi	r5,2
1010c78c:	003fcb06 	br	1010c6bc <__alt_data_end+0xfffec6bc>
1010c790:	500d883a 	mov	r6,r10
1010c794:	00800084 	movi	r2,2
1010c798:	38805926 	beq	r7,r2,1010c900 <__muldf3+0x2c0>
1010c79c:	008000c4 	movi	r2,3
1010c7a0:	3881bb26 	beq	r7,r2,1010ce90 <__muldf3+0x850>
1010c7a4:	00800044 	movi	r2,1
1010c7a8:	3881961e 	bne	r7,r2,1010ce04 <__muldf3+0x7c4>
1010c7ac:	3027883a 	mov	r19,r6
1010c7b0:	0005883a 	mov	r2,zero
1010c7b4:	0021883a 	mov	r16,zero
1010c7b8:	002d883a 	mov	r22,zero
1010c7bc:	1004953a 	slli	r2,r2,20
1010c7c0:	98c03fcc 	andi	r3,r19,255
1010c7c4:	04400434 	movhi	r17,16
1010c7c8:	8c7fffc4 	addi	r17,r17,-1
1010c7cc:	180697fa 	slli	r3,r3,31
1010c7d0:	8460703a 	and	r16,r16,r17
1010c7d4:	80a0b03a 	or	r16,r16,r2
1010c7d8:	80c6b03a 	or	r3,r16,r3
1010c7dc:	b005883a 	mov	r2,r22
1010c7e0:	dfc01117 	ldw	ra,68(sp)
1010c7e4:	df001017 	ldw	fp,64(sp)
1010c7e8:	ddc00f17 	ldw	r23,60(sp)
1010c7ec:	dd800e17 	ldw	r22,56(sp)
1010c7f0:	dd400d17 	ldw	r21,52(sp)
1010c7f4:	dd000c17 	ldw	r20,48(sp)
1010c7f8:	dcc00b17 	ldw	r19,44(sp)
1010c7fc:	dc800a17 	ldw	r18,40(sp)
1010c800:	dc400917 	ldw	r17,36(sp)
1010c804:	dc000817 	ldw	r16,32(sp)
1010c808:	dec01204 	addi	sp,sp,72
1010c80c:	f800283a 	ret
1010c810:	2404b03a 	or	r2,r4,r16
1010c814:	202b883a 	mov	r21,r4
1010c818:	10004426 	beq	r2,zero,1010c92c <__muldf3+0x2ec>
1010c81c:	80015126 	beq	r16,zero,1010cd64 <__muldf3+0x724>
1010c820:	8009883a 	mov	r4,r16
1010c824:	d9800715 	stw	r6,28(sp)
1010c828:	d9c00215 	stw	r7,8(sp)
1010c82c:	da400415 	stw	r9,16(sp)
1010c830:	010d9ac0 	call	1010d9ac <__clzsi2>
1010c834:	d9800717 	ldw	r6,28(sp)
1010c838:	d9c00217 	ldw	r7,8(sp)
1010c83c:	da400417 	ldw	r9,16(sp)
1010c840:	113ffd44 	addi	r4,r2,-11
1010c844:	00c00704 	movi	r3,28
1010c848:	19014216 	blt	r3,r4,1010cd54 <__muldf3+0x714>
1010c84c:	00c00744 	movi	r3,29
1010c850:	15bffe04 	addi	r22,r2,-8
1010c854:	1907c83a 	sub	r3,r3,r4
1010c858:	85a0983a 	sll	r16,r16,r22
1010c85c:	a8c6d83a 	srl	r3,r21,r3
1010c860:	adac983a 	sll	r22,r21,r22
1010c864:	1c20b03a 	or	r16,r3,r16
1010c868:	1080fcc4 	addi	r2,r2,1011
1010c86c:	00a9c83a 	sub	r20,zero,r2
1010c870:	002b883a 	mov	r21,zero
1010c874:	000b883a 	mov	r5,zero
1010c878:	003f9006 	br	1010c6bc <__alt_data_end+0xfffec6bc>
1010c87c:	3446b03a 	or	r3,r6,r17
1010c880:	1800281e 	bne	r3,zero,1010c924 <__muldf3+0x2e4>
1010c884:	0023883a 	mov	r17,zero
1010c888:	0025883a 	mov	r18,zero
1010c88c:	01c00084 	movi	r7,2
1010c890:	003f9c06 	br	1010c704 <__alt_data_end+0xfffec704>
1010c894:	3446b03a 	or	r3,r6,r17
1010c898:	18001e26 	beq	r3,zero,1010c914 <__muldf3+0x2d4>
1010c89c:	88012126 	beq	r17,zero,1010cd24 <__muldf3+0x6e4>
1010c8a0:	8809883a 	mov	r4,r17
1010c8a4:	d9400215 	stw	r5,8(sp)
1010c8a8:	d9800715 	stw	r6,28(sp)
1010c8ac:	da400415 	stw	r9,16(sp)
1010c8b0:	da800315 	stw	r10,12(sp)
1010c8b4:	010d9ac0 	call	1010d9ac <__clzsi2>
1010c8b8:	d9400217 	ldw	r5,8(sp)
1010c8bc:	d9800717 	ldw	r6,28(sp)
1010c8c0:	da400417 	ldw	r9,16(sp)
1010c8c4:	da800317 	ldw	r10,12(sp)
1010c8c8:	113ffd44 	addi	r4,r2,-11
1010c8cc:	00c00704 	movi	r3,28
1010c8d0:	19011016 	blt	r3,r4,1010cd14 <__muldf3+0x6d4>
1010c8d4:	00c00744 	movi	r3,29
1010c8d8:	14bffe04 	addi	r18,r2,-8
1010c8dc:	1907c83a 	sub	r3,r3,r4
1010c8e0:	8ca2983a 	sll	r17,r17,r18
1010c8e4:	30c6d83a 	srl	r3,r6,r3
1010c8e8:	34a4983a 	sll	r18,r6,r18
1010c8ec:	1c62b03a 	or	r17,r3,r17
1010c8f0:	1080fcc4 	addi	r2,r2,1011
1010c8f4:	0085c83a 	sub	r2,zero,r2
1010c8f8:	000f883a 	mov	r7,zero
1010c8fc:	003f8106 	br	1010c704 <__alt_data_end+0xfffec704>
1010c900:	3027883a 	mov	r19,r6
1010c904:	0081ffc4 	movi	r2,2047
1010c908:	0021883a 	mov	r16,zero
1010c90c:	002d883a 	mov	r22,zero
1010c910:	003faa06 	br	1010c7bc <__alt_data_end+0xfffec7bc>
1010c914:	0023883a 	mov	r17,zero
1010c918:	0025883a 	mov	r18,zero
1010c91c:	01c00044 	movi	r7,1
1010c920:	003f7806 	br	1010c704 <__alt_data_end+0xfffec704>
1010c924:	01c000c4 	movi	r7,3
1010c928:	003f7606 	br	1010c704 <__alt_data_end+0xfffec704>
1010c92c:	05400104 	movi	r21,4
1010c930:	0021883a 	mov	r16,zero
1010c934:	002d883a 	mov	r22,zero
1010c938:	01400044 	movi	r5,1
1010c93c:	003f5f06 	br	1010c6bc <__alt_data_end+0xfffec6bc>
1010c940:	05400304 	movi	r21,12
1010c944:	014000c4 	movi	r5,3
1010c948:	003f5c06 	br	1010c6bc <__alt_data_end+0xfffec6bc>
1010c94c:	04000434 	movhi	r16,16
1010c950:	0027883a 	mov	r19,zero
1010c954:	843fffc4 	addi	r16,r16,-1
1010c958:	05bfffc4 	movi	r22,-1
1010c95c:	0081ffc4 	movi	r2,2047
1010c960:	003f9606 	br	1010c7bc <__alt_data_end+0xfffec7bc>
1010c964:	8023883a 	mov	r17,r16
1010c968:	b025883a 	mov	r18,r22
1010c96c:	280f883a 	mov	r7,r5
1010c970:	003f8806 	br	1010c794 <__alt_data_end+0xfffec794>
1010c974:	8023883a 	mov	r17,r16
1010c978:	b025883a 	mov	r18,r22
1010c97c:	480d883a 	mov	r6,r9
1010c980:	280f883a 	mov	r7,r5
1010c984:	003f8306 	br	1010c794 <__alt_data_end+0xfffec794>
1010c988:	b026d43a 	srli	r19,r22,16
1010c98c:	902ed43a 	srli	r23,r18,16
1010c990:	b5bfffcc 	andi	r22,r22,65535
1010c994:	94bfffcc 	andi	r18,r18,65535
1010c998:	b00b883a 	mov	r5,r22
1010c99c:	9009883a 	mov	r4,r18
1010c9a0:	d8c00515 	stw	r3,20(sp)
1010c9a4:	d9800715 	stw	r6,28(sp)
1010c9a8:	da000615 	stw	r8,24(sp)
1010c9ac:	0100c840 	call	10100c84 <__mulsi3>
1010c9b0:	980b883a 	mov	r5,r19
1010c9b4:	9009883a 	mov	r4,r18
1010c9b8:	1029883a 	mov	r20,r2
1010c9bc:	0100c840 	call	10100c84 <__mulsi3>
1010c9c0:	b80b883a 	mov	r5,r23
1010c9c4:	9809883a 	mov	r4,r19
1010c9c8:	102b883a 	mov	r21,r2
1010c9cc:	0100c840 	call	10100c84 <__mulsi3>
1010c9d0:	b809883a 	mov	r4,r23
1010c9d4:	b00b883a 	mov	r5,r22
1010c9d8:	1039883a 	mov	fp,r2
1010c9dc:	0100c840 	call	10100c84 <__mulsi3>
1010c9e0:	a008d43a 	srli	r4,r20,16
1010c9e4:	1545883a 	add	r2,r2,r21
1010c9e8:	d8c00517 	ldw	r3,20(sp)
1010c9ec:	2085883a 	add	r2,r4,r2
1010c9f0:	d9800717 	ldw	r6,28(sp)
1010c9f4:	da000617 	ldw	r8,24(sp)
1010c9f8:	1540022e 	bgeu	r2,r21,1010ca04 <__muldf3+0x3c4>
1010c9fc:	01000074 	movhi	r4,1
1010ca00:	e139883a 	add	fp,fp,r4
1010ca04:	100e943a 	slli	r7,r2,16
1010ca08:	1004d43a 	srli	r2,r2,16
1010ca0c:	882ad43a 	srli	r21,r17,16
1010ca10:	a53fffcc 	andi	r20,r20,65535
1010ca14:	8c7fffcc 	andi	r17,r17,65535
1010ca18:	3d29883a 	add	r20,r7,r20
1010ca1c:	b00b883a 	mov	r5,r22
1010ca20:	8809883a 	mov	r4,r17
1010ca24:	d8c00515 	stw	r3,20(sp)
1010ca28:	d9800715 	stw	r6,28(sp)
1010ca2c:	da000615 	stw	r8,24(sp)
1010ca30:	dd000115 	stw	r20,4(sp)
1010ca34:	d8800015 	stw	r2,0(sp)
1010ca38:	0100c840 	call	10100c84 <__mulsi3>
1010ca3c:	980b883a 	mov	r5,r19
1010ca40:	8809883a 	mov	r4,r17
1010ca44:	d8800215 	stw	r2,8(sp)
1010ca48:	0100c840 	call	10100c84 <__mulsi3>
1010ca4c:	9809883a 	mov	r4,r19
1010ca50:	a80b883a 	mov	r5,r21
1010ca54:	1029883a 	mov	r20,r2
1010ca58:	0100c840 	call	10100c84 <__mulsi3>
1010ca5c:	b00b883a 	mov	r5,r22
1010ca60:	a809883a 	mov	r4,r21
1010ca64:	d8800415 	stw	r2,16(sp)
1010ca68:	0100c840 	call	10100c84 <__mulsi3>
1010ca6c:	d9c00217 	ldw	r7,8(sp)
1010ca70:	1505883a 	add	r2,r2,r20
1010ca74:	d8c00517 	ldw	r3,20(sp)
1010ca78:	3826d43a 	srli	r19,r7,16
1010ca7c:	d9800717 	ldw	r6,28(sp)
1010ca80:	da000617 	ldw	r8,24(sp)
1010ca84:	9885883a 	add	r2,r19,r2
1010ca88:	da400417 	ldw	r9,16(sp)
1010ca8c:	1500022e 	bgeu	r2,r20,1010ca98 <__muldf3+0x458>
1010ca90:	01000074 	movhi	r4,1
1010ca94:	4913883a 	add	r9,r9,r4
1010ca98:	1028d43a 	srli	r20,r2,16
1010ca9c:	1004943a 	slli	r2,r2,16
1010caa0:	802cd43a 	srli	r22,r16,16
1010caa4:	843fffcc 	andi	r16,r16,65535
1010caa8:	3cffffcc 	andi	r19,r7,65535
1010caac:	9009883a 	mov	r4,r18
1010cab0:	800b883a 	mov	r5,r16
1010cab4:	a269883a 	add	r20,r20,r9
1010cab8:	d8c00515 	stw	r3,20(sp)
1010cabc:	d9800715 	stw	r6,28(sp)
1010cac0:	da000615 	stw	r8,24(sp)
1010cac4:	14e7883a 	add	r19,r2,r19
1010cac8:	0100c840 	call	10100c84 <__mulsi3>
1010cacc:	9009883a 	mov	r4,r18
1010cad0:	b00b883a 	mov	r5,r22
1010cad4:	d8800315 	stw	r2,12(sp)
1010cad8:	0100c840 	call	10100c84 <__mulsi3>
1010cadc:	b809883a 	mov	r4,r23
1010cae0:	b00b883a 	mov	r5,r22
1010cae4:	d8800215 	stw	r2,8(sp)
1010cae8:	0100c840 	call	10100c84 <__mulsi3>
1010caec:	b80b883a 	mov	r5,r23
1010caf0:	8009883a 	mov	r4,r16
1010caf4:	d8800415 	stw	r2,16(sp)
1010caf8:	0100c840 	call	10100c84 <__mulsi3>
1010cafc:	da800317 	ldw	r10,12(sp)
1010cb00:	d9c00217 	ldw	r7,8(sp)
1010cb04:	d9000017 	ldw	r4,0(sp)
1010cb08:	502ed43a 	srli	r23,r10,16
1010cb0c:	11c5883a 	add	r2,r2,r7
1010cb10:	24e5883a 	add	r18,r4,r19
1010cb14:	b885883a 	add	r2,r23,r2
1010cb18:	d8c00517 	ldw	r3,20(sp)
1010cb1c:	d9800717 	ldw	r6,28(sp)
1010cb20:	da000617 	ldw	r8,24(sp)
1010cb24:	da400417 	ldw	r9,16(sp)
1010cb28:	11c0022e 	bgeu	r2,r7,1010cb34 <__muldf3+0x4f4>
1010cb2c:	01000074 	movhi	r4,1
1010cb30:	4913883a 	add	r9,r9,r4
1010cb34:	100ed43a 	srli	r7,r2,16
1010cb38:	1004943a 	slli	r2,r2,16
1010cb3c:	55ffffcc 	andi	r23,r10,65535
1010cb40:	3a53883a 	add	r9,r7,r9
1010cb44:	8809883a 	mov	r4,r17
1010cb48:	800b883a 	mov	r5,r16
1010cb4c:	d8c00515 	stw	r3,20(sp)
1010cb50:	d9800715 	stw	r6,28(sp)
1010cb54:	da000615 	stw	r8,24(sp)
1010cb58:	da400415 	stw	r9,16(sp)
1010cb5c:	15ef883a 	add	r23,r2,r23
1010cb60:	0100c840 	call	10100c84 <__mulsi3>
1010cb64:	8809883a 	mov	r4,r17
1010cb68:	b00b883a 	mov	r5,r22
1010cb6c:	d8800215 	stw	r2,8(sp)
1010cb70:	0100c840 	call	10100c84 <__mulsi3>
1010cb74:	b00b883a 	mov	r5,r22
1010cb78:	a809883a 	mov	r4,r21
1010cb7c:	d8800315 	stw	r2,12(sp)
1010cb80:	0100c840 	call	10100c84 <__mulsi3>
1010cb84:	8009883a 	mov	r4,r16
1010cb88:	a80b883a 	mov	r5,r21
1010cb8c:	1023883a 	mov	r17,r2
1010cb90:	0100c840 	call	10100c84 <__mulsi3>
1010cb94:	d9c00217 	ldw	r7,8(sp)
1010cb98:	da800317 	ldw	r10,12(sp)
1010cb9c:	d8c00517 	ldw	r3,20(sp)
1010cba0:	3808d43a 	srli	r4,r7,16
1010cba4:	1285883a 	add	r2,r2,r10
1010cba8:	d9800717 	ldw	r6,28(sp)
1010cbac:	2085883a 	add	r2,r4,r2
1010cbb0:	da000617 	ldw	r8,24(sp)
1010cbb4:	da400417 	ldw	r9,16(sp)
1010cbb8:	1280022e 	bgeu	r2,r10,1010cbc4 <__muldf3+0x584>
1010cbbc:	01000074 	movhi	r4,1
1010cbc0:	8923883a 	add	r17,r17,r4
1010cbc4:	1008943a 	slli	r4,r2,16
1010cbc8:	39ffffcc 	andi	r7,r7,65535
1010cbcc:	e4b9883a 	add	fp,fp,r18
1010cbd0:	21cf883a 	add	r7,r4,r7
1010cbd4:	e4e7803a 	cmpltu	r19,fp,r19
1010cbd8:	3d0f883a 	add	r7,r7,r20
1010cbdc:	bf39883a 	add	fp,r23,fp
1010cbe0:	99c9883a 	add	r4,r19,r7
1010cbe4:	e5ef803a 	cmpltu	r23,fp,r23
1010cbe8:	490b883a 	add	r5,r9,r4
1010cbec:	1004d43a 	srli	r2,r2,16
1010cbf0:	b965883a 	add	r18,r23,r5
1010cbf4:	24c9803a 	cmpltu	r4,r4,r19
1010cbf8:	3d29803a 	cmpltu	r20,r7,r20
1010cbfc:	a128b03a 	or	r20,r20,r4
1010cc00:	95ef803a 	cmpltu	r23,r18,r23
1010cc04:	2a53803a 	cmpltu	r9,r5,r9
1010cc08:	a0a9883a 	add	r20,r20,r2
1010cc0c:	4deeb03a 	or	r23,r9,r23
1010cc10:	a5ef883a 	add	r23,r20,r23
1010cc14:	bc63883a 	add	r17,r23,r17
1010cc18:	e004927a 	slli	r2,fp,9
1010cc1c:	d9000117 	ldw	r4,4(sp)
1010cc20:	882e927a 	slli	r23,r17,9
1010cc24:	9022d5fa 	srli	r17,r18,23
1010cc28:	e038d5fa 	srli	fp,fp,23
1010cc2c:	1104b03a 	or	r2,r2,r4
1010cc30:	9024927a 	slli	r18,r18,9
1010cc34:	1004c03a 	cmpne	r2,r2,zero
1010cc38:	bc62b03a 	or	r17,r23,r17
1010cc3c:	1738b03a 	or	fp,r2,fp
1010cc40:	8880402c 	andhi	r2,r17,256
1010cc44:	e4a4b03a 	or	r18,fp,r18
1010cc48:	10000726 	beq	r2,zero,1010cc68 <__muldf3+0x628>
1010cc4c:	9006d07a 	srli	r3,r18,1
1010cc50:	880497fa 	slli	r2,r17,31
1010cc54:	9480004c 	andi	r18,r18,1
1010cc58:	8822d07a 	srli	r17,r17,1
1010cc5c:	1ca4b03a 	or	r18,r3,r18
1010cc60:	14a4b03a 	or	r18,r2,r18
1010cc64:	4007883a 	mov	r3,r8
1010cc68:	1880ffc4 	addi	r2,r3,1023
1010cc6c:	0080460e 	bge	zero,r2,1010cd88 <__muldf3+0x748>
1010cc70:	910001cc 	andi	r4,r18,7
1010cc74:	20000726 	beq	r4,zero,1010cc94 <__muldf3+0x654>
1010cc78:	910003cc 	andi	r4,r18,15
1010cc7c:	01400104 	movi	r5,4
1010cc80:	21400426 	beq	r4,r5,1010cc94 <__muldf3+0x654>
1010cc84:	9149883a 	add	r4,r18,r5
1010cc88:	24a5803a 	cmpltu	r18,r4,r18
1010cc8c:	8ca3883a 	add	r17,r17,r18
1010cc90:	2025883a 	mov	r18,r4
1010cc94:	8900402c 	andhi	r4,r17,256
1010cc98:	20000426 	beq	r4,zero,1010ccac <__muldf3+0x66c>
1010cc9c:	18810004 	addi	r2,r3,1024
1010cca0:	00ffc034 	movhi	r3,65280
1010cca4:	18ffffc4 	addi	r3,r3,-1
1010cca8:	88e2703a 	and	r17,r17,r3
1010ccac:	00c1ff84 	movi	r3,2046
1010ccb0:	18bf1316 	blt	r3,r2,1010c900 <__alt_data_end+0xfffec900>
1010ccb4:	882c977a 	slli	r22,r17,29
1010ccb8:	9024d0fa 	srli	r18,r18,3
1010ccbc:	8822927a 	slli	r17,r17,9
1010ccc0:	1081ffcc 	andi	r2,r2,2047
1010ccc4:	b4acb03a 	or	r22,r22,r18
1010ccc8:	8820d33a 	srli	r16,r17,12
1010cccc:	3027883a 	mov	r19,r6
1010ccd0:	003eba06 	br	1010c7bc <__alt_data_end+0xfffec7bc>
1010ccd4:	8080022c 	andhi	r2,r16,8
1010ccd8:	10000926 	beq	r2,zero,1010cd00 <__muldf3+0x6c0>
1010ccdc:	8880022c 	andhi	r2,r17,8
1010cce0:	1000071e 	bne	r2,zero,1010cd00 <__muldf3+0x6c0>
1010cce4:	00800434 	movhi	r2,16
1010cce8:	8c000234 	orhi	r16,r17,8
1010ccec:	10bfffc4 	addi	r2,r2,-1
1010ccf0:	e027883a 	mov	r19,fp
1010ccf4:	80a0703a 	and	r16,r16,r2
1010ccf8:	902d883a 	mov	r22,r18
1010ccfc:	003f1706 	br	1010c95c <__alt_data_end+0xfffec95c>
1010cd00:	00800434 	movhi	r2,16
1010cd04:	84000234 	orhi	r16,r16,8
1010cd08:	10bfffc4 	addi	r2,r2,-1
1010cd0c:	80a0703a 	and	r16,r16,r2
1010cd10:	003f1206 	br	1010c95c <__alt_data_end+0xfffec95c>
1010cd14:	147ff604 	addi	r17,r2,-40
1010cd18:	3462983a 	sll	r17,r6,r17
1010cd1c:	0025883a 	mov	r18,zero
1010cd20:	003ef306 	br	1010c8f0 <__alt_data_end+0xfffec8f0>
1010cd24:	3009883a 	mov	r4,r6
1010cd28:	d9400215 	stw	r5,8(sp)
1010cd2c:	d9800715 	stw	r6,28(sp)
1010cd30:	da400415 	stw	r9,16(sp)
1010cd34:	da800315 	stw	r10,12(sp)
1010cd38:	010d9ac0 	call	1010d9ac <__clzsi2>
1010cd3c:	10800804 	addi	r2,r2,32
1010cd40:	da800317 	ldw	r10,12(sp)
1010cd44:	da400417 	ldw	r9,16(sp)
1010cd48:	d9800717 	ldw	r6,28(sp)
1010cd4c:	d9400217 	ldw	r5,8(sp)
1010cd50:	003edd06 	br	1010c8c8 <__alt_data_end+0xfffec8c8>
1010cd54:	143ff604 	addi	r16,r2,-40
1010cd58:	ac20983a 	sll	r16,r21,r16
1010cd5c:	002d883a 	mov	r22,zero
1010cd60:	003ec106 	br	1010c868 <__alt_data_end+0xfffec868>
1010cd64:	d9800715 	stw	r6,28(sp)
1010cd68:	d9c00215 	stw	r7,8(sp)
1010cd6c:	da400415 	stw	r9,16(sp)
1010cd70:	010d9ac0 	call	1010d9ac <__clzsi2>
1010cd74:	10800804 	addi	r2,r2,32
1010cd78:	da400417 	ldw	r9,16(sp)
1010cd7c:	d9c00217 	ldw	r7,8(sp)
1010cd80:	d9800717 	ldw	r6,28(sp)
1010cd84:	003eae06 	br	1010c840 <__alt_data_end+0xfffec840>
1010cd88:	00c00044 	movi	r3,1
1010cd8c:	1887c83a 	sub	r3,r3,r2
1010cd90:	01000e04 	movi	r4,56
1010cd94:	20fe8516 	blt	r4,r3,1010c7ac <__alt_data_end+0xfffec7ac>
1010cd98:	010007c4 	movi	r4,31
1010cd9c:	20c01b16 	blt	r4,r3,1010ce0c <__muldf3+0x7cc>
1010cda0:	00800804 	movi	r2,32
1010cda4:	10c5c83a 	sub	r2,r2,r3
1010cda8:	888a983a 	sll	r5,r17,r2
1010cdac:	90c8d83a 	srl	r4,r18,r3
1010cdb0:	9084983a 	sll	r2,r18,r2
1010cdb4:	88e2d83a 	srl	r17,r17,r3
1010cdb8:	2906b03a 	or	r3,r5,r4
1010cdbc:	1004c03a 	cmpne	r2,r2,zero
1010cdc0:	1886b03a 	or	r3,r3,r2
1010cdc4:	188001cc 	andi	r2,r3,7
1010cdc8:	10000726 	beq	r2,zero,1010cde8 <__muldf3+0x7a8>
1010cdcc:	188003cc 	andi	r2,r3,15
1010cdd0:	01000104 	movi	r4,4
1010cdd4:	11000426 	beq	r2,r4,1010cde8 <__muldf3+0x7a8>
1010cdd8:	1805883a 	mov	r2,r3
1010cddc:	10c00104 	addi	r3,r2,4
1010cde0:	1885803a 	cmpltu	r2,r3,r2
1010cde4:	88a3883a 	add	r17,r17,r2
1010cde8:	8880202c 	andhi	r2,r17,128
1010cdec:	10001c26 	beq	r2,zero,1010ce60 <__muldf3+0x820>
1010cdf0:	3027883a 	mov	r19,r6
1010cdf4:	00800044 	movi	r2,1
1010cdf8:	0021883a 	mov	r16,zero
1010cdfc:	002d883a 	mov	r22,zero
1010ce00:	003e6e06 	br	1010c7bc <__alt_data_end+0xfffec7bc>
1010ce04:	4007883a 	mov	r3,r8
1010ce08:	003f9706 	br	1010cc68 <__alt_data_end+0xfffecc68>
1010ce0c:	017ff844 	movi	r5,-31
1010ce10:	2885c83a 	sub	r2,r5,r2
1010ce14:	888ad83a 	srl	r5,r17,r2
1010ce18:	00800804 	movi	r2,32
1010ce1c:	18801a26 	beq	r3,r2,1010ce88 <__muldf3+0x848>
1010ce20:	01001004 	movi	r4,64
1010ce24:	20c7c83a 	sub	r3,r4,r3
1010ce28:	88e2983a 	sll	r17,r17,r3
1010ce2c:	8ca4b03a 	or	r18,r17,r18
1010ce30:	9004c03a 	cmpne	r2,r18,zero
1010ce34:	2884b03a 	or	r2,r5,r2
1010ce38:	144001cc 	andi	r17,r2,7
1010ce3c:	88000d1e 	bne	r17,zero,1010ce74 <__muldf3+0x834>
1010ce40:	0021883a 	mov	r16,zero
1010ce44:	102cd0fa 	srli	r22,r2,3
1010ce48:	3027883a 	mov	r19,r6
1010ce4c:	0005883a 	mov	r2,zero
1010ce50:	b46cb03a 	or	r22,r22,r17
1010ce54:	003e5906 	br	1010c7bc <__alt_data_end+0xfffec7bc>
1010ce58:	1007883a 	mov	r3,r2
1010ce5c:	0023883a 	mov	r17,zero
1010ce60:	8820927a 	slli	r16,r17,9
1010ce64:	1805883a 	mov	r2,r3
1010ce68:	8822977a 	slli	r17,r17,29
1010ce6c:	8020d33a 	srli	r16,r16,12
1010ce70:	003ff406 	br	1010ce44 <__alt_data_end+0xfffece44>
1010ce74:	10c003cc 	andi	r3,r2,15
1010ce78:	01000104 	movi	r4,4
1010ce7c:	193ff626 	beq	r3,r4,1010ce58 <__alt_data_end+0xfffece58>
1010ce80:	0023883a 	mov	r17,zero
1010ce84:	003fd506 	br	1010cddc <__alt_data_end+0xfffecddc>
1010ce88:	0023883a 	mov	r17,zero
1010ce8c:	003fe706 	br	1010ce2c <__alt_data_end+0xfffece2c>
1010ce90:	00800434 	movhi	r2,16
1010ce94:	8c000234 	orhi	r16,r17,8
1010ce98:	10bfffc4 	addi	r2,r2,-1
1010ce9c:	3027883a 	mov	r19,r6
1010cea0:	80a0703a 	and	r16,r16,r2
1010cea4:	902d883a 	mov	r22,r18
1010cea8:	003eac06 	br	1010c95c <__alt_data_end+0xfffec95c>

1010ceac <__subdf3>:
1010ceac:	02000434 	movhi	r8,16
1010ceb0:	423fffc4 	addi	r8,r8,-1
1010ceb4:	defffb04 	addi	sp,sp,-20
1010ceb8:	2a14703a 	and	r10,r5,r8
1010cebc:	3812d53a 	srli	r9,r7,20
1010cec0:	3a10703a 	and	r8,r7,r8
1010cec4:	2006d77a 	srli	r3,r4,29
1010cec8:	3004d77a 	srli	r2,r6,29
1010cecc:	dc000015 	stw	r16,0(sp)
1010ced0:	501490fa 	slli	r10,r10,3
1010ced4:	2820d53a 	srli	r16,r5,20
1010ced8:	401090fa 	slli	r8,r8,3
1010cedc:	dc800215 	stw	r18,8(sp)
1010cee0:	dc400115 	stw	r17,4(sp)
1010cee4:	dfc00415 	stw	ra,16(sp)
1010cee8:	202290fa 	slli	r17,r4,3
1010ceec:	dcc00315 	stw	r19,12(sp)
1010cef0:	4a41ffcc 	andi	r9,r9,2047
1010cef4:	0101ffc4 	movi	r4,2047
1010cef8:	2824d7fa 	srli	r18,r5,31
1010cefc:	8401ffcc 	andi	r16,r16,2047
1010cf00:	50c6b03a 	or	r3,r10,r3
1010cf04:	380ed7fa 	srli	r7,r7,31
1010cf08:	408ab03a 	or	r5,r8,r2
1010cf0c:	300c90fa 	slli	r6,r6,3
1010cf10:	49009626 	beq	r9,r4,1010d16c <__subdf3+0x2c0>
1010cf14:	39c0005c 	xori	r7,r7,1
1010cf18:	8245c83a 	sub	r2,r16,r9
1010cf1c:	3c807426 	beq	r7,r18,1010d0f0 <__subdf3+0x244>
1010cf20:	0080af0e 	bge	zero,r2,1010d1e0 <__subdf3+0x334>
1010cf24:	48002a1e 	bne	r9,zero,1010cfd0 <__subdf3+0x124>
1010cf28:	2988b03a 	or	r4,r5,r6
1010cf2c:	20009a1e 	bne	r4,zero,1010d198 <__subdf3+0x2ec>
1010cf30:	888001cc 	andi	r2,r17,7
1010cf34:	10000726 	beq	r2,zero,1010cf54 <__subdf3+0xa8>
1010cf38:	888003cc 	andi	r2,r17,15
1010cf3c:	01000104 	movi	r4,4
1010cf40:	11000426 	beq	r2,r4,1010cf54 <__subdf3+0xa8>
1010cf44:	890b883a 	add	r5,r17,r4
1010cf48:	2c63803a 	cmpltu	r17,r5,r17
1010cf4c:	1c47883a 	add	r3,r3,r17
1010cf50:	2823883a 	mov	r17,r5
1010cf54:	1880202c 	andhi	r2,r3,128
1010cf58:	10005926 	beq	r2,zero,1010d0c0 <__subdf3+0x214>
1010cf5c:	84000044 	addi	r16,r16,1
1010cf60:	0081ffc4 	movi	r2,2047
1010cf64:	8080be26 	beq	r16,r2,1010d260 <__subdf3+0x3b4>
1010cf68:	017fe034 	movhi	r5,65408
1010cf6c:	297fffc4 	addi	r5,r5,-1
1010cf70:	1946703a 	and	r3,r3,r5
1010cf74:	1804977a 	slli	r2,r3,29
1010cf78:	1806927a 	slli	r3,r3,9
1010cf7c:	8822d0fa 	srli	r17,r17,3
1010cf80:	8401ffcc 	andi	r16,r16,2047
1010cf84:	180ad33a 	srli	r5,r3,12
1010cf88:	9100004c 	andi	r4,r18,1
1010cf8c:	1444b03a 	or	r2,r2,r17
1010cf90:	80c1ffcc 	andi	r3,r16,2047
1010cf94:	1820953a 	slli	r16,r3,20
1010cf98:	20c03fcc 	andi	r3,r4,255
1010cf9c:	180897fa 	slli	r4,r3,31
1010cfa0:	00c00434 	movhi	r3,16
1010cfa4:	18ffffc4 	addi	r3,r3,-1
1010cfa8:	28c6703a 	and	r3,r5,r3
1010cfac:	1c06b03a 	or	r3,r3,r16
1010cfb0:	1906b03a 	or	r3,r3,r4
1010cfb4:	dfc00417 	ldw	ra,16(sp)
1010cfb8:	dcc00317 	ldw	r19,12(sp)
1010cfbc:	dc800217 	ldw	r18,8(sp)
1010cfc0:	dc400117 	ldw	r17,4(sp)
1010cfc4:	dc000017 	ldw	r16,0(sp)
1010cfc8:	dec00504 	addi	sp,sp,20
1010cfcc:	f800283a 	ret
1010cfd0:	0101ffc4 	movi	r4,2047
1010cfd4:	813fd626 	beq	r16,r4,1010cf30 <__alt_data_end+0xfffecf30>
1010cfd8:	29402034 	orhi	r5,r5,128
1010cfdc:	01000e04 	movi	r4,56
1010cfe0:	2080a316 	blt	r4,r2,1010d270 <__subdf3+0x3c4>
1010cfe4:	010007c4 	movi	r4,31
1010cfe8:	2080c616 	blt	r4,r2,1010d304 <__subdf3+0x458>
1010cfec:	01000804 	movi	r4,32
1010cff0:	2089c83a 	sub	r4,r4,r2
1010cff4:	2910983a 	sll	r8,r5,r4
1010cff8:	308ed83a 	srl	r7,r6,r2
1010cffc:	3108983a 	sll	r4,r6,r4
1010d000:	2884d83a 	srl	r2,r5,r2
1010d004:	41ccb03a 	or	r6,r8,r7
1010d008:	2008c03a 	cmpne	r4,r4,zero
1010d00c:	310cb03a 	or	r6,r6,r4
1010d010:	898dc83a 	sub	r6,r17,r6
1010d014:	89a3803a 	cmpltu	r17,r17,r6
1010d018:	1887c83a 	sub	r3,r3,r2
1010d01c:	1c47c83a 	sub	r3,r3,r17
1010d020:	3023883a 	mov	r17,r6
1010d024:	1880202c 	andhi	r2,r3,128
1010d028:	10002326 	beq	r2,zero,1010d0b8 <__subdf3+0x20c>
1010d02c:	04c02034 	movhi	r19,128
1010d030:	9cffffc4 	addi	r19,r19,-1
1010d034:	1ce6703a 	and	r19,r3,r19
1010d038:	98007a26 	beq	r19,zero,1010d224 <__subdf3+0x378>
1010d03c:	9809883a 	mov	r4,r19
1010d040:	010d9ac0 	call	1010d9ac <__clzsi2>
1010d044:	113ffe04 	addi	r4,r2,-8
1010d048:	00c007c4 	movi	r3,31
1010d04c:	19007b16 	blt	r3,r4,1010d23c <__subdf3+0x390>
1010d050:	00800804 	movi	r2,32
1010d054:	1105c83a 	sub	r2,r2,r4
1010d058:	8884d83a 	srl	r2,r17,r2
1010d05c:	9906983a 	sll	r3,r19,r4
1010d060:	8922983a 	sll	r17,r17,r4
1010d064:	10c4b03a 	or	r2,r2,r3
1010d068:	24007816 	blt	r4,r16,1010d24c <__subdf3+0x3a0>
1010d06c:	2421c83a 	sub	r16,r4,r16
1010d070:	80c00044 	addi	r3,r16,1
1010d074:	010007c4 	movi	r4,31
1010d078:	20c09516 	blt	r4,r3,1010d2d0 <__subdf3+0x424>
1010d07c:	01400804 	movi	r5,32
1010d080:	28cbc83a 	sub	r5,r5,r3
1010d084:	88c8d83a 	srl	r4,r17,r3
1010d088:	8962983a 	sll	r17,r17,r5
1010d08c:	114a983a 	sll	r5,r2,r5
1010d090:	10c6d83a 	srl	r3,r2,r3
1010d094:	8804c03a 	cmpne	r2,r17,zero
1010d098:	290ab03a 	or	r5,r5,r4
1010d09c:	28a2b03a 	or	r17,r5,r2
1010d0a0:	0021883a 	mov	r16,zero
1010d0a4:	003fa206 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d0a8:	2090b03a 	or	r8,r4,r2
1010d0ac:	40018e26 	beq	r8,zero,1010d6e8 <__subdf3+0x83c>
1010d0b0:	1007883a 	mov	r3,r2
1010d0b4:	2023883a 	mov	r17,r4
1010d0b8:	888001cc 	andi	r2,r17,7
1010d0bc:	103f9e1e 	bne	r2,zero,1010cf38 <__alt_data_end+0xfffecf38>
1010d0c0:	1804977a 	slli	r2,r3,29
1010d0c4:	8822d0fa 	srli	r17,r17,3
1010d0c8:	1810d0fa 	srli	r8,r3,3
1010d0cc:	9100004c 	andi	r4,r18,1
1010d0d0:	1444b03a 	or	r2,r2,r17
1010d0d4:	00c1ffc4 	movi	r3,2047
1010d0d8:	80c02826 	beq	r16,r3,1010d17c <__subdf3+0x2d0>
1010d0dc:	01400434 	movhi	r5,16
1010d0e0:	297fffc4 	addi	r5,r5,-1
1010d0e4:	80e0703a 	and	r16,r16,r3
1010d0e8:	414a703a 	and	r5,r8,r5
1010d0ec:	003fa806 	br	1010cf90 <__alt_data_end+0xfffecf90>
1010d0f0:	0080630e 	bge	zero,r2,1010d280 <__subdf3+0x3d4>
1010d0f4:	48003026 	beq	r9,zero,1010d1b8 <__subdf3+0x30c>
1010d0f8:	0101ffc4 	movi	r4,2047
1010d0fc:	813f8c26 	beq	r16,r4,1010cf30 <__alt_data_end+0xfffecf30>
1010d100:	29402034 	orhi	r5,r5,128
1010d104:	01000e04 	movi	r4,56
1010d108:	2080a90e 	bge	r4,r2,1010d3b0 <__subdf3+0x504>
1010d10c:	298cb03a 	or	r6,r5,r6
1010d110:	3012c03a 	cmpne	r9,r6,zero
1010d114:	0005883a 	mov	r2,zero
1010d118:	4c53883a 	add	r9,r9,r17
1010d11c:	4c63803a 	cmpltu	r17,r9,r17
1010d120:	10c7883a 	add	r3,r2,r3
1010d124:	88c7883a 	add	r3,r17,r3
1010d128:	4823883a 	mov	r17,r9
1010d12c:	1880202c 	andhi	r2,r3,128
1010d130:	1000d026 	beq	r2,zero,1010d474 <__subdf3+0x5c8>
1010d134:	84000044 	addi	r16,r16,1
1010d138:	0081ffc4 	movi	r2,2047
1010d13c:	8080fe26 	beq	r16,r2,1010d538 <__subdf3+0x68c>
1010d140:	00bfe034 	movhi	r2,65408
1010d144:	10bfffc4 	addi	r2,r2,-1
1010d148:	1886703a 	and	r3,r3,r2
1010d14c:	880ad07a 	srli	r5,r17,1
1010d150:	180497fa 	slli	r2,r3,31
1010d154:	8900004c 	andi	r4,r17,1
1010d158:	2922b03a 	or	r17,r5,r4
1010d15c:	1806d07a 	srli	r3,r3,1
1010d160:	1462b03a 	or	r17,r2,r17
1010d164:	3825883a 	mov	r18,r7
1010d168:	003f7106 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d16c:	2984b03a 	or	r2,r5,r6
1010d170:	103f6826 	beq	r2,zero,1010cf14 <__alt_data_end+0xfffecf14>
1010d174:	39c03fcc 	andi	r7,r7,255
1010d178:	003f6706 	br	1010cf18 <__alt_data_end+0xfffecf18>
1010d17c:	4086b03a 	or	r3,r8,r2
1010d180:	18015226 	beq	r3,zero,1010d6cc <__subdf3+0x820>
1010d184:	00c00434 	movhi	r3,16
1010d188:	41400234 	orhi	r5,r8,8
1010d18c:	18ffffc4 	addi	r3,r3,-1
1010d190:	28ca703a 	and	r5,r5,r3
1010d194:	003f7e06 	br	1010cf90 <__alt_data_end+0xfffecf90>
1010d198:	10bfffc4 	addi	r2,r2,-1
1010d19c:	1000491e 	bne	r2,zero,1010d2c4 <__subdf3+0x418>
1010d1a0:	898fc83a 	sub	r7,r17,r6
1010d1a4:	89e3803a 	cmpltu	r17,r17,r7
1010d1a8:	1947c83a 	sub	r3,r3,r5
1010d1ac:	1c47c83a 	sub	r3,r3,r17
1010d1b0:	3823883a 	mov	r17,r7
1010d1b4:	003f9b06 	br	1010d024 <__alt_data_end+0xfffed024>
1010d1b8:	2988b03a 	or	r4,r5,r6
1010d1bc:	203f5c26 	beq	r4,zero,1010cf30 <__alt_data_end+0xfffecf30>
1010d1c0:	10bfffc4 	addi	r2,r2,-1
1010d1c4:	1000931e 	bne	r2,zero,1010d414 <__subdf3+0x568>
1010d1c8:	898d883a 	add	r6,r17,r6
1010d1cc:	3463803a 	cmpltu	r17,r6,r17
1010d1d0:	1947883a 	add	r3,r3,r5
1010d1d4:	88c7883a 	add	r3,r17,r3
1010d1d8:	3023883a 	mov	r17,r6
1010d1dc:	003fd306 	br	1010d12c <__alt_data_end+0xfffed12c>
1010d1e0:	1000541e 	bne	r2,zero,1010d334 <__subdf3+0x488>
1010d1e4:	80800044 	addi	r2,r16,1
1010d1e8:	1081ffcc 	andi	r2,r2,2047
1010d1ec:	01000044 	movi	r4,1
1010d1f0:	2080a20e 	bge	r4,r2,1010d47c <__subdf3+0x5d0>
1010d1f4:	8989c83a 	sub	r4,r17,r6
1010d1f8:	8905803a 	cmpltu	r2,r17,r4
1010d1fc:	1967c83a 	sub	r19,r3,r5
1010d200:	98a7c83a 	sub	r19,r19,r2
1010d204:	9880202c 	andhi	r2,r19,128
1010d208:	10006326 	beq	r2,zero,1010d398 <__subdf3+0x4ec>
1010d20c:	3463c83a 	sub	r17,r6,r17
1010d210:	28c7c83a 	sub	r3,r5,r3
1010d214:	344d803a 	cmpltu	r6,r6,r17
1010d218:	19a7c83a 	sub	r19,r3,r6
1010d21c:	3825883a 	mov	r18,r7
1010d220:	983f861e 	bne	r19,zero,1010d03c <__alt_data_end+0xfffed03c>
1010d224:	8809883a 	mov	r4,r17
1010d228:	010d9ac0 	call	1010d9ac <__clzsi2>
1010d22c:	10800804 	addi	r2,r2,32
1010d230:	113ffe04 	addi	r4,r2,-8
1010d234:	00c007c4 	movi	r3,31
1010d238:	193f850e 	bge	r3,r4,1010d050 <__alt_data_end+0xfffed050>
1010d23c:	10bff604 	addi	r2,r2,-40
1010d240:	8884983a 	sll	r2,r17,r2
1010d244:	0023883a 	mov	r17,zero
1010d248:	243f880e 	bge	r4,r16,1010d06c <__alt_data_end+0xfffed06c>
1010d24c:	00ffe034 	movhi	r3,65408
1010d250:	18ffffc4 	addi	r3,r3,-1
1010d254:	8121c83a 	sub	r16,r16,r4
1010d258:	10c6703a 	and	r3,r2,r3
1010d25c:	003f3406 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d260:	9100004c 	andi	r4,r18,1
1010d264:	000b883a 	mov	r5,zero
1010d268:	0005883a 	mov	r2,zero
1010d26c:	003f4806 	br	1010cf90 <__alt_data_end+0xfffecf90>
1010d270:	298cb03a 	or	r6,r5,r6
1010d274:	300cc03a 	cmpne	r6,r6,zero
1010d278:	0005883a 	mov	r2,zero
1010d27c:	003f6406 	br	1010d010 <__alt_data_end+0xfffed010>
1010d280:	10009a1e 	bne	r2,zero,1010d4ec <__subdf3+0x640>
1010d284:	82400044 	addi	r9,r16,1
1010d288:	4881ffcc 	andi	r2,r9,2047
1010d28c:	02800044 	movi	r10,1
1010d290:	5080670e 	bge	r10,r2,1010d430 <__subdf3+0x584>
1010d294:	0081ffc4 	movi	r2,2047
1010d298:	4880af26 	beq	r9,r2,1010d558 <__subdf3+0x6ac>
1010d29c:	898d883a 	add	r6,r17,r6
1010d2a0:	1945883a 	add	r2,r3,r5
1010d2a4:	3447803a 	cmpltu	r3,r6,r17
1010d2a8:	1887883a 	add	r3,r3,r2
1010d2ac:	182297fa 	slli	r17,r3,31
1010d2b0:	300cd07a 	srli	r6,r6,1
1010d2b4:	1806d07a 	srli	r3,r3,1
1010d2b8:	4821883a 	mov	r16,r9
1010d2bc:	89a2b03a 	or	r17,r17,r6
1010d2c0:	003f1b06 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d2c4:	0101ffc4 	movi	r4,2047
1010d2c8:	813f441e 	bne	r16,r4,1010cfdc <__alt_data_end+0xfffecfdc>
1010d2cc:	003f1806 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d2d0:	843ff844 	addi	r16,r16,-31
1010d2d4:	01400804 	movi	r5,32
1010d2d8:	1408d83a 	srl	r4,r2,r16
1010d2dc:	19405026 	beq	r3,r5,1010d420 <__subdf3+0x574>
1010d2e0:	01401004 	movi	r5,64
1010d2e4:	28c7c83a 	sub	r3,r5,r3
1010d2e8:	10c4983a 	sll	r2,r2,r3
1010d2ec:	88a2b03a 	or	r17,r17,r2
1010d2f0:	8822c03a 	cmpne	r17,r17,zero
1010d2f4:	2462b03a 	or	r17,r4,r17
1010d2f8:	0007883a 	mov	r3,zero
1010d2fc:	0021883a 	mov	r16,zero
1010d300:	003f6d06 	br	1010d0b8 <__alt_data_end+0xfffed0b8>
1010d304:	11fff804 	addi	r7,r2,-32
1010d308:	01000804 	movi	r4,32
1010d30c:	29ced83a 	srl	r7,r5,r7
1010d310:	11004526 	beq	r2,r4,1010d428 <__subdf3+0x57c>
1010d314:	01001004 	movi	r4,64
1010d318:	2089c83a 	sub	r4,r4,r2
1010d31c:	2904983a 	sll	r2,r5,r4
1010d320:	118cb03a 	or	r6,r2,r6
1010d324:	300cc03a 	cmpne	r6,r6,zero
1010d328:	398cb03a 	or	r6,r7,r6
1010d32c:	0005883a 	mov	r2,zero
1010d330:	003f3706 	br	1010d010 <__alt_data_end+0xfffed010>
1010d334:	80002a26 	beq	r16,zero,1010d3e0 <__subdf3+0x534>
1010d338:	0101ffc4 	movi	r4,2047
1010d33c:	49006626 	beq	r9,r4,1010d4d8 <__subdf3+0x62c>
1010d340:	0085c83a 	sub	r2,zero,r2
1010d344:	18c02034 	orhi	r3,r3,128
1010d348:	01000e04 	movi	r4,56
1010d34c:	20807e16 	blt	r4,r2,1010d548 <__subdf3+0x69c>
1010d350:	010007c4 	movi	r4,31
1010d354:	2080e716 	blt	r4,r2,1010d6f4 <__subdf3+0x848>
1010d358:	01000804 	movi	r4,32
1010d35c:	2089c83a 	sub	r4,r4,r2
1010d360:	1914983a 	sll	r10,r3,r4
1010d364:	8890d83a 	srl	r8,r17,r2
1010d368:	8908983a 	sll	r4,r17,r4
1010d36c:	1884d83a 	srl	r2,r3,r2
1010d370:	5222b03a 	or	r17,r10,r8
1010d374:	2006c03a 	cmpne	r3,r4,zero
1010d378:	88e2b03a 	or	r17,r17,r3
1010d37c:	3463c83a 	sub	r17,r6,r17
1010d380:	2885c83a 	sub	r2,r5,r2
1010d384:	344d803a 	cmpltu	r6,r6,r17
1010d388:	1187c83a 	sub	r3,r2,r6
1010d38c:	4821883a 	mov	r16,r9
1010d390:	3825883a 	mov	r18,r7
1010d394:	003f2306 	br	1010d024 <__alt_data_end+0xfffed024>
1010d398:	24d0b03a 	or	r8,r4,r19
1010d39c:	40001b1e 	bne	r8,zero,1010d40c <__subdf3+0x560>
1010d3a0:	0005883a 	mov	r2,zero
1010d3a4:	0009883a 	mov	r4,zero
1010d3a8:	0021883a 	mov	r16,zero
1010d3ac:	003f4906 	br	1010d0d4 <__alt_data_end+0xfffed0d4>
1010d3b0:	010007c4 	movi	r4,31
1010d3b4:	20803a16 	blt	r4,r2,1010d4a0 <__subdf3+0x5f4>
1010d3b8:	01000804 	movi	r4,32
1010d3bc:	2089c83a 	sub	r4,r4,r2
1010d3c0:	2912983a 	sll	r9,r5,r4
1010d3c4:	3090d83a 	srl	r8,r6,r2
1010d3c8:	3108983a 	sll	r4,r6,r4
1010d3cc:	2884d83a 	srl	r2,r5,r2
1010d3d0:	4a12b03a 	or	r9,r9,r8
1010d3d4:	2008c03a 	cmpne	r4,r4,zero
1010d3d8:	4912b03a 	or	r9,r9,r4
1010d3dc:	003f4e06 	br	1010d118 <__alt_data_end+0xfffed118>
1010d3e0:	1c48b03a 	or	r4,r3,r17
1010d3e4:	20003c26 	beq	r4,zero,1010d4d8 <__subdf3+0x62c>
1010d3e8:	0084303a 	nor	r2,zero,r2
1010d3ec:	1000381e 	bne	r2,zero,1010d4d0 <__subdf3+0x624>
1010d3f0:	3463c83a 	sub	r17,r6,r17
1010d3f4:	28c5c83a 	sub	r2,r5,r3
1010d3f8:	344d803a 	cmpltu	r6,r6,r17
1010d3fc:	1187c83a 	sub	r3,r2,r6
1010d400:	4821883a 	mov	r16,r9
1010d404:	3825883a 	mov	r18,r7
1010d408:	003f0606 	br	1010d024 <__alt_data_end+0xfffed024>
1010d40c:	2023883a 	mov	r17,r4
1010d410:	003f0906 	br	1010d038 <__alt_data_end+0xfffed038>
1010d414:	0101ffc4 	movi	r4,2047
1010d418:	813f3a1e 	bne	r16,r4,1010d104 <__alt_data_end+0xfffed104>
1010d41c:	003ec406 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d420:	0005883a 	mov	r2,zero
1010d424:	003fb106 	br	1010d2ec <__alt_data_end+0xfffed2ec>
1010d428:	0005883a 	mov	r2,zero
1010d42c:	003fbc06 	br	1010d320 <__alt_data_end+0xfffed320>
1010d430:	1c44b03a 	or	r2,r3,r17
1010d434:	80008e1e 	bne	r16,zero,1010d670 <__subdf3+0x7c4>
1010d438:	1000c826 	beq	r2,zero,1010d75c <__subdf3+0x8b0>
1010d43c:	2984b03a 	or	r2,r5,r6
1010d440:	103ebb26 	beq	r2,zero,1010cf30 <__alt_data_end+0xfffecf30>
1010d444:	8989883a 	add	r4,r17,r6
1010d448:	1945883a 	add	r2,r3,r5
1010d44c:	2447803a 	cmpltu	r3,r4,r17
1010d450:	1887883a 	add	r3,r3,r2
1010d454:	1880202c 	andhi	r2,r3,128
1010d458:	2023883a 	mov	r17,r4
1010d45c:	103f1626 	beq	r2,zero,1010d0b8 <__alt_data_end+0xfffed0b8>
1010d460:	00bfe034 	movhi	r2,65408
1010d464:	10bfffc4 	addi	r2,r2,-1
1010d468:	5021883a 	mov	r16,r10
1010d46c:	1886703a 	and	r3,r3,r2
1010d470:	003eaf06 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d474:	3825883a 	mov	r18,r7
1010d478:	003f0f06 	br	1010d0b8 <__alt_data_end+0xfffed0b8>
1010d47c:	1c44b03a 	or	r2,r3,r17
1010d480:	8000251e 	bne	r16,zero,1010d518 <__subdf3+0x66c>
1010d484:	1000661e 	bne	r2,zero,1010d620 <__subdf3+0x774>
1010d488:	2990b03a 	or	r8,r5,r6
1010d48c:	40009626 	beq	r8,zero,1010d6e8 <__subdf3+0x83c>
1010d490:	2807883a 	mov	r3,r5
1010d494:	3023883a 	mov	r17,r6
1010d498:	3825883a 	mov	r18,r7
1010d49c:	003ea406 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d4a0:	127ff804 	addi	r9,r2,-32
1010d4a4:	01000804 	movi	r4,32
1010d4a8:	2a52d83a 	srl	r9,r5,r9
1010d4ac:	11008c26 	beq	r2,r4,1010d6e0 <__subdf3+0x834>
1010d4b0:	01001004 	movi	r4,64
1010d4b4:	2085c83a 	sub	r2,r4,r2
1010d4b8:	2884983a 	sll	r2,r5,r2
1010d4bc:	118cb03a 	or	r6,r2,r6
1010d4c0:	300cc03a 	cmpne	r6,r6,zero
1010d4c4:	4992b03a 	or	r9,r9,r6
1010d4c8:	0005883a 	mov	r2,zero
1010d4cc:	003f1206 	br	1010d118 <__alt_data_end+0xfffed118>
1010d4d0:	0101ffc4 	movi	r4,2047
1010d4d4:	493f9c1e 	bne	r9,r4,1010d348 <__alt_data_end+0xfffed348>
1010d4d8:	2807883a 	mov	r3,r5
1010d4dc:	3023883a 	mov	r17,r6
1010d4e0:	4821883a 	mov	r16,r9
1010d4e4:	3825883a 	mov	r18,r7
1010d4e8:	003e9106 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d4ec:	80001f1e 	bne	r16,zero,1010d56c <__subdf3+0x6c0>
1010d4f0:	1c48b03a 	or	r4,r3,r17
1010d4f4:	20005a26 	beq	r4,zero,1010d660 <__subdf3+0x7b4>
1010d4f8:	0084303a 	nor	r2,zero,r2
1010d4fc:	1000561e 	bne	r2,zero,1010d658 <__subdf3+0x7ac>
1010d500:	89a3883a 	add	r17,r17,r6
1010d504:	1945883a 	add	r2,r3,r5
1010d508:	898d803a 	cmpltu	r6,r17,r6
1010d50c:	3087883a 	add	r3,r6,r2
1010d510:	4821883a 	mov	r16,r9
1010d514:	003f0506 	br	1010d12c <__alt_data_end+0xfffed12c>
1010d518:	10002b1e 	bne	r2,zero,1010d5c8 <__subdf3+0x71c>
1010d51c:	2984b03a 	or	r2,r5,r6
1010d520:	10008026 	beq	r2,zero,1010d724 <__subdf3+0x878>
1010d524:	2807883a 	mov	r3,r5
1010d528:	3023883a 	mov	r17,r6
1010d52c:	3825883a 	mov	r18,r7
1010d530:	0401ffc4 	movi	r16,2047
1010d534:	003e7e06 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d538:	3809883a 	mov	r4,r7
1010d53c:	0011883a 	mov	r8,zero
1010d540:	0005883a 	mov	r2,zero
1010d544:	003ee306 	br	1010d0d4 <__alt_data_end+0xfffed0d4>
1010d548:	1c62b03a 	or	r17,r3,r17
1010d54c:	8822c03a 	cmpne	r17,r17,zero
1010d550:	0005883a 	mov	r2,zero
1010d554:	003f8906 	br	1010d37c <__alt_data_end+0xfffed37c>
1010d558:	3809883a 	mov	r4,r7
1010d55c:	4821883a 	mov	r16,r9
1010d560:	0011883a 	mov	r8,zero
1010d564:	0005883a 	mov	r2,zero
1010d568:	003eda06 	br	1010d0d4 <__alt_data_end+0xfffed0d4>
1010d56c:	0101ffc4 	movi	r4,2047
1010d570:	49003b26 	beq	r9,r4,1010d660 <__subdf3+0x7b4>
1010d574:	0085c83a 	sub	r2,zero,r2
1010d578:	18c02034 	orhi	r3,r3,128
1010d57c:	01000e04 	movi	r4,56
1010d580:	20806e16 	blt	r4,r2,1010d73c <__subdf3+0x890>
1010d584:	010007c4 	movi	r4,31
1010d588:	20807716 	blt	r4,r2,1010d768 <__subdf3+0x8bc>
1010d58c:	01000804 	movi	r4,32
1010d590:	2089c83a 	sub	r4,r4,r2
1010d594:	1914983a 	sll	r10,r3,r4
1010d598:	8890d83a 	srl	r8,r17,r2
1010d59c:	8908983a 	sll	r4,r17,r4
1010d5a0:	1884d83a 	srl	r2,r3,r2
1010d5a4:	5222b03a 	or	r17,r10,r8
1010d5a8:	2006c03a 	cmpne	r3,r4,zero
1010d5ac:	88e2b03a 	or	r17,r17,r3
1010d5b0:	89a3883a 	add	r17,r17,r6
1010d5b4:	1145883a 	add	r2,r2,r5
1010d5b8:	898d803a 	cmpltu	r6,r17,r6
1010d5bc:	3087883a 	add	r3,r6,r2
1010d5c0:	4821883a 	mov	r16,r9
1010d5c4:	003ed906 	br	1010d12c <__alt_data_end+0xfffed12c>
1010d5c8:	2984b03a 	or	r2,r5,r6
1010d5cc:	10004226 	beq	r2,zero,1010d6d8 <__subdf3+0x82c>
1010d5d0:	1808d0fa 	srli	r4,r3,3
1010d5d4:	8822d0fa 	srli	r17,r17,3
1010d5d8:	1806977a 	slli	r3,r3,29
1010d5dc:	2080022c 	andhi	r2,r4,8
1010d5e0:	1c62b03a 	or	r17,r3,r17
1010d5e4:	10000826 	beq	r2,zero,1010d608 <__subdf3+0x75c>
1010d5e8:	2812d0fa 	srli	r9,r5,3
1010d5ec:	4880022c 	andhi	r2,r9,8
1010d5f0:	1000051e 	bne	r2,zero,1010d608 <__subdf3+0x75c>
1010d5f4:	300cd0fa 	srli	r6,r6,3
1010d5f8:	2804977a 	slli	r2,r5,29
1010d5fc:	4809883a 	mov	r4,r9
1010d600:	3825883a 	mov	r18,r7
1010d604:	11a2b03a 	or	r17,r2,r6
1010d608:	8806d77a 	srli	r3,r17,29
1010d60c:	200890fa 	slli	r4,r4,3
1010d610:	882290fa 	slli	r17,r17,3
1010d614:	0401ffc4 	movi	r16,2047
1010d618:	1906b03a 	or	r3,r3,r4
1010d61c:	003e4406 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d620:	2984b03a 	or	r2,r5,r6
1010d624:	103e4226 	beq	r2,zero,1010cf30 <__alt_data_end+0xfffecf30>
1010d628:	8989c83a 	sub	r4,r17,r6
1010d62c:	8911803a 	cmpltu	r8,r17,r4
1010d630:	1945c83a 	sub	r2,r3,r5
1010d634:	1205c83a 	sub	r2,r2,r8
1010d638:	1200202c 	andhi	r8,r2,128
1010d63c:	403e9a26 	beq	r8,zero,1010d0a8 <__alt_data_end+0xfffed0a8>
1010d640:	3463c83a 	sub	r17,r6,r17
1010d644:	28c5c83a 	sub	r2,r5,r3
1010d648:	344d803a 	cmpltu	r6,r6,r17
1010d64c:	1187c83a 	sub	r3,r2,r6
1010d650:	3825883a 	mov	r18,r7
1010d654:	003e3606 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d658:	0101ffc4 	movi	r4,2047
1010d65c:	493fc71e 	bne	r9,r4,1010d57c <__alt_data_end+0xfffed57c>
1010d660:	2807883a 	mov	r3,r5
1010d664:	3023883a 	mov	r17,r6
1010d668:	4821883a 	mov	r16,r9
1010d66c:	003e3006 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d670:	10003626 	beq	r2,zero,1010d74c <__subdf3+0x8a0>
1010d674:	2984b03a 	or	r2,r5,r6
1010d678:	10001726 	beq	r2,zero,1010d6d8 <__subdf3+0x82c>
1010d67c:	1808d0fa 	srli	r4,r3,3
1010d680:	8822d0fa 	srli	r17,r17,3
1010d684:	1806977a 	slli	r3,r3,29
1010d688:	2080022c 	andhi	r2,r4,8
1010d68c:	1c62b03a 	or	r17,r3,r17
1010d690:	10000726 	beq	r2,zero,1010d6b0 <__subdf3+0x804>
1010d694:	2812d0fa 	srli	r9,r5,3
1010d698:	4880022c 	andhi	r2,r9,8
1010d69c:	1000041e 	bne	r2,zero,1010d6b0 <__subdf3+0x804>
1010d6a0:	300cd0fa 	srli	r6,r6,3
1010d6a4:	2804977a 	slli	r2,r5,29
1010d6a8:	4809883a 	mov	r4,r9
1010d6ac:	11a2b03a 	or	r17,r2,r6
1010d6b0:	8806d77a 	srli	r3,r17,29
1010d6b4:	200890fa 	slli	r4,r4,3
1010d6b8:	882290fa 	slli	r17,r17,3
1010d6bc:	3825883a 	mov	r18,r7
1010d6c0:	1906b03a 	or	r3,r3,r4
1010d6c4:	0401ffc4 	movi	r16,2047
1010d6c8:	003e1906 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d6cc:	000b883a 	mov	r5,zero
1010d6d0:	0005883a 	mov	r2,zero
1010d6d4:	003e2e06 	br	1010cf90 <__alt_data_end+0xfffecf90>
1010d6d8:	0401ffc4 	movi	r16,2047
1010d6dc:	003e1406 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d6e0:	0005883a 	mov	r2,zero
1010d6e4:	003f7506 	br	1010d4bc <__alt_data_end+0xfffed4bc>
1010d6e8:	0005883a 	mov	r2,zero
1010d6ec:	0009883a 	mov	r4,zero
1010d6f0:	003e7806 	br	1010d0d4 <__alt_data_end+0xfffed0d4>
1010d6f4:	123ff804 	addi	r8,r2,-32
1010d6f8:	01000804 	movi	r4,32
1010d6fc:	1a10d83a 	srl	r8,r3,r8
1010d700:	11002526 	beq	r2,r4,1010d798 <__subdf3+0x8ec>
1010d704:	01001004 	movi	r4,64
1010d708:	2085c83a 	sub	r2,r4,r2
1010d70c:	1884983a 	sll	r2,r3,r2
1010d710:	1444b03a 	or	r2,r2,r17
1010d714:	1004c03a 	cmpne	r2,r2,zero
1010d718:	40a2b03a 	or	r17,r8,r2
1010d71c:	0005883a 	mov	r2,zero
1010d720:	003f1606 	br	1010d37c <__alt_data_end+0xfffed37c>
1010d724:	02000434 	movhi	r8,16
1010d728:	0009883a 	mov	r4,zero
1010d72c:	423fffc4 	addi	r8,r8,-1
1010d730:	00bfffc4 	movi	r2,-1
1010d734:	0401ffc4 	movi	r16,2047
1010d738:	003e6606 	br	1010d0d4 <__alt_data_end+0xfffed0d4>
1010d73c:	1c62b03a 	or	r17,r3,r17
1010d740:	8822c03a 	cmpne	r17,r17,zero
1010d744:	0005883a 	mov	r2,zero
1010d748:	003f9906 	br	1010d5b0 <__alt_data_end+0xfffed5b0>
1010d74c:	2807883a 	mov	r3,r5
1010d750:	3023883a 	mov	r17,r6
1010d754:	0401ffc4 	movi	r16,2047
1010d758:	003df506 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d75c:	2807883a 	mov	r3,r5
1010d760:	3023883a 	mov	r17,r6
1010d764:	003df206 	br	1010cf30 <__alt_data_end+0xfffecf30>
1010d768:	123ff804 	addi	r8,r2,-32
1010d76c:	01000804 	movi	r4,32
1010d770:	1a10d83a 	srl	r8,r3,r8
1010d774:	11000a26 	beq	r2,r4,1010d7a0 <__subdf3+0x8f4>
1010d778:	01001004 	movi	r4,64
1010d77c:	2085c83a 	sub	r2,r4,r2
1010d780:	1884983a 	sll	r2,r3,r2
1010d784:	1444b03a 	or	r2,r2,r17
1010d788:	1004c03a 	cmpne	r2,r2,zero
1010d78c:	40a2b03a 	or	r17,r8,r2
1010d790:	0005883a 	mov	r2,zero
1010d794:	003f8606 	br	1010d5b0 <__alt_data_end+0xfffed5b0>
1010d798:	0005883a 	mov	r2,zero
1010d79c:	003fdc06 	br	1010d710 <__alt_data_end+0xfffed710>
1010d7a0:	0005883a 	mov	r2,zero
1010d7a4:	003ff706 	br	1010d784 <__alt_data_end+0xfffed784>

1010d7a8 <__fixdfsi>:
1010d7a8:	280cd53a 	srli	r6,r5,20
1010d7ac:	00c00434 	movhi	r3,16
1010d7b0:	18ffffc4 	addi	r3,r3,-1
1010d7b4:	3181ffcc 	andi	r6,r6,2047
1010d7b8:	01c0ff84 	movi	r7,1022
1010d7bc:	28c6703a 	and	r3,r5,r3
1010d7c0:	280ad7fa 	srli	r5,r5,31
1010d7c4:	3980120e 	bge	r7,r6,1010d810 <__fixdfsi+0x68>
1010d7c8:	00810744 	movi	r2,1053
1010d7cc:	11800c16 	blt	r2,r6,1010d800 <__fixdfsi+0x58>
1010d7d0:	00810cc4 	movi	r2,1075
1010d7d4:	1185c83a 	sub	r2,r2,r6
1010d7d8:	01c007c4 	movi	r7,31
1010d7dc:	18c00434 	orhi	r3,r3,16
1010d7e0:	38800d16 	blt	r7,r2,1010d818 <__fixdfsi+0x70>
1010d7e4:	31befb44 	addi	r6,r6,-1043
1010d7e8:	2084d83a 	srl	r2,r4,r2
1010d7ec:	1986983a 	sll	r3,r3,r6
1010d7f0:	1884b03a 	or	r2,r3,r2
1010d7f4:	28000726 	beq	r5,zero,1010d814 <__fixdfsi+0x6c>
1010d7f8:	0085c83a 	sub	r2,zero,r2
1010d7fc:	f800283a 	ret
1010d800:	00a00034 	movhi	r2,32768
1010d804:	10bfffc4 	addi	r2,r2,-1
1010d808:	2885883a 	add	r2,r5,r2
1010d80c:	f800283a 	ret
1010d810:	0005883a 	mov	r2,zero
1010d814:	f800283a 	ret
1010d818:	008104c4 	movi	r2,1043
1010d81c:	1185c83a 	sub	r2,r2,r6
1010d820:	1884d83a 	srl	r2,r3,r2
1010d824:	003ff306 	br	1010d7f4 <__alt_data_end+0xfffed7f4>

1010d828 <__floatsidf>:
1010d828:	defffd04 	addi	sp,sp,-12
1010d82c:	dfc00215 	stw	ra,8(sp)
1010d830:	dc400115 	stw	r17,4(sp)
1010d834:	dc000015 	stw	r16,0(sp)
1010d838:	20002b26 	beq	r4,zero,1010d8e8 <__floatsidf+0xc0>
1010d83c:	2023883a 	mov	r17,r4
1010d840:	2020d7fa 	srli	r16,r4,31
1010d844:	20002d16 	blt	r4,zero,1010d8fc <__floatsidf+0xd4>
1010d848:	8809883a 	mov	r4,r17
1010d84c:	010d9ac0 	call	1010d9ac <__clzsi2>
1010d850:	01410784 	movi	r5,1054
1010d854:	288bc83a 	sub	r5,r5,r2
1010d858:	01010cc4 	movi	r4,1075
1010d85c:	2149c83a 	sub	r4,r4,r5
1010d860:	00c007c4 	movi	r3,31
1010d864:	1900160e 	bge	r3,r4,1010d8c0 <__floatsidf+0x98>
1010d868:	00c104c4 	movi	r3,1043
1010d86c:	1947c83a 	sub	r3,r3,r5
1010d870:	88c6983a 	sll	r3,r17,r3
1010d874:	00800434 	movhi	r2,16
1010d878:	10bfffc4 	addi	r2,r2,-1
1010d87c:	1886703a 	and	r3,r3,r2
1010d880:	2941ffcc 	andi	r5,r5,2047
1010d884:	800d883a 	mov	r6,r16
1010d888:	0005883a 	mov	r2,zero
1010d88c:	280a953a 	slli	r5,r5,20
1010d890:	31803fcc 	andi	r6,r6,255
1010d894:	01000434 	movhi	r4,16
1010d898:	300c97fa 	slli	r6,r6,31
1010d89c:	213fffc4 	addi	r4,r4,-1
1010d8a0:	1906703a 	and	r3,r3,r4
1010d8a4:	1946b03a 	or	r3,r3,r5
1010d8a8:	1986b03a 	or	r3,r3,r6
1010d8ac:	dfc00217 	ldw	ra,8(sp)
1010d8b0:	dc400117 	ldw	r17,4(sp)
1010d8b4:	dc000017 	ldw	r16,0(sp)
1010d8b8:	dec00304 	addi	sp,sp,12
1010d8bc:	f800283a 	ret
1010d8c0:	00c002c4 	movi	r3,11
1010d8c4:	1887c83a 	sub	r3,r3,r2
1010d8c8:	88c6d83a 	srl	r3,r17,r3
1010d8cc:	8904983a 	sll	r2,r17,r4
1010d8d0:	01000434 	movhi	r4,16
1010d8d4:	213fffc4 	addi	r4,r4,-1
1010d8d8:	2941ffcc 	andi	r5,r5,2047
1010d8dc:	1906703a 	and	r3,r3,r4
1010d8e0:	800d883a 	mov	r6,r16
1010d8e4:	003fe906 	br	1010d88c <__alt_data_end+0xfffed88c>
1010d8e8:	000d883a 	mov	r6,zero
1010d8ec:	000b883a 	mov	r5,zero
1010d8f0:	0007883a 	mov	r3,zero
1010d8f4:	0005883a 	mov	r2,zero
1010d8f8:	003fe406 	br	1010d88c <__alt_data_end+0xfffed88c>
1010d8fc:	0123c83a 	sub	r17,zero,r4
1010d900:	003fd106 	br	1010d848 <__alt_data_end+0xfffed848>

1010d904 <__floatunsidf>:
1010d904:	defffe04 	addi	sp,sp,-8
1010d908:	dc000015 	stw	r16,0(sp)
1010d90c:	dfc00115 	stw	ra,4(sp)
1010d910:	2021883a 	mov	r16,r4
1010d914:	20002226 	beq	r4,zero,1010d9a0 <__floatunsidf+0x9c>
1010d918:	010d9ac0 	call	1010d9ac <__clzsi2>
1010d91c:	01010784 	movi	r4,1054
1010d920:	2089c83a 	sub	r4,r4,r2
1010d924:	01810cc4 	movi	r6,1075
1010d928:	310dc83a 	sub	r6,r6,r4
1010d92c:	00c007c4 	movi	r3,31
1010d930:	1980120e 	bge	r3,r6,1010d97c <__floatunsidf+0x78>
1010d934:	00c104c4 	movi	r3,1043
1010d938:	1907c83a 	sub	r3,r3,r4
1010d93c:	80ca983a 	sll	r5,r16,r3
1010d940:	00800434 	movhi	r2,16
1010d944:	10bfffc4 	addi	r2,r2,-1
1010d948:	2101ffcc 	andi	r4,r4,2047
1010d94c:	0021883a 	mov	r16,zero
1010d950:	288a703a 	and	r5,r5,r2
1010d954:	2008953a 	slli	r4,r4,20
1010d958:	00c00434 	movhi	r3,16
1010d95c:	18ffffc4 	addi	r3,r3,-1
1010d960:	28c6703a 	and	r3,r5,r3
1010d964:	8005883a 	mov	r2,r16
1010d968:	1906b03a 	or	r3,r3,r4
1010d96c:	dfc00117 	ldw	ra,4(sp)
1010d970:	dc000017 	ldw	r16,0(sp)
1010d974:	dec00204 	addi	sp,sp,8
1010d978:	f800283a 	ret
1010d97c:	00c002c4 	movi	r3,11
1010d980:	188bc83a 	sub	r5,r3,r2
1010d984:	814ad83a 	srl	r5,r16,r5
1010d988:	00c00434 	movhi	r3,16
1010d98c:	18ffffc4 	addi	r3,r3,-1
1010d990:	81a0983a 	sll	r16,r16,r6
1010d994:	2101ffcc 	andi	r4,r4,2047
1010d998:	28ca703a 	and	r5,r5,r3
1010d99c:	003fed06 	br	1010d954 <__alt_data_end+0xfffed954>
1010d9a0:	0009883a 	mov	r4,zero
1010d9a4:	000b883a 	mov	r5,zero
1010d9a8:	003fea06 	br	1010d954 <__alt_data_end+0xfffed954>

1010d9ac <__clzsi2>:
1010d9ac:	00bfffd4 	movui	r2,65535
1010d9b0:	11000536 	bltu	r2,r4,1010d9c8 <__clzsi2+0x1c>
1010d9b4:	00803fc4 	movi	r2,255
1010d9b8:	11000f36 	bltu	r2,r4,1010d9f8 <__clzsi2+0x4c>
1010d9bc:	00800804 	movi	r2,32
1010d9c0:	0007883a 	mov	r3,zero
1010d9c4:	00000506 	br	1010d9dc <__clzsi2+0x30>
1010d9c8:	00804034 	movhi	r2,256
1010d9cc:	10bfffc4 	addi	r2,r2,-1
1010d9d0:	11000c2e 	bgeu	r2,r4,1010da04 <__clzsi2+0x58>
1010d9d4:	00800204 	movi	r2,8
1010d9d8:	00c00604 	movi	r3,24
1010d9dc:	20c8d83a 	srl	r4,r4,r3
1010d9e0:	00c40474 	movhi	r3,4113
1010d9e4:	18c1f904 	addi	r3,r3,2020
1010d9e8:	1909883a 	add	r4,r3,r4
1010d9ec:	20c00003 	ldbu	r3,0(r4)
1010d9f0:	10c5c83a 	sub	r2,r2,r3
1010d9f4:	f800283a 	ret
1010d9f8:	00800604 	movi	r2,24
1010d9fc:	00c00204 	movi	r3,8
1010da00:	003ff606 	br	1010d9dc <__alt_data_end+0xfffed9dc>
1010da04:	00800404 	movi	r2,16
1010da08:	1007883a 	mov	r3,r2
1010da0c:	003ff306 	br	1010d9dc <__alt_data_end+0xfffed9dc>

1010da10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010da10:	defffe04 	addi	sp,sp,-8
1010da14:	dfc00115 	stw	ra,4(sp)
1010da18:	df000015 	stw	fp,0(sp)
1010da1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010da20:	d0a00b17 	ldw	r2,-32724(gp)
1010da24:	10000326 	beq	r2,zero,1010da34 <alt_get_errno+0x24>
1010da28:	d0a00b17 	ldw	r2,-32724(gp)
1010da2c:	103ee83a 	callr	r2
1010da30:	00000106 	br	1010da38 <alt_get_errno+0x28>
1010da34:	d0a6ff04 	addi	r2,gp,-25604
}
1010da38:	e037883a 	mov	sp,fp
1010da3c:	dfc00117 	ldw	ra,4(sp)
1010da40:	df000017 	ldw	fp,0(sp)
1010da44:	dec00204 	addi	sp,sp,8
1010da48:	f800283a 	ret

1010da4c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1010da4c:	defffb04 	addi	sp,sp,-20
1010da50:	dfc00415 	stw	ra,16(sp)
1010da54:	df000315 	stw	fp,12(sp)
1010da58:	df000304 	addi	fp,sp,12
1010da5c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1010da60:	e0bfff17 	ldw	r2,-4(fp)
1010da64:	10000816 	blt	r2,zero,1010da88 <close+0x3c>
1010da68:	01400304 	movi	r5,12
1010da6c:	e13fff17 	ldw	r4,-4(fp)
1010da70:	0100c840 	call	10100c84 <__mulsi3>
1010da74:	1007883a 	mov	r3,r2
1010da78:	00840474 	movhi	r2,4113
1010da7c:	10847c04 	addi	r2,r2,4592
1010da80:	1885883a 	add	r2,r3,r2
1010da84:	00000106 	br	1010da8c <close+0x40>
1010da88:	0005883a 	mov	r2,zero
1010da8c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1010da90:	e0bffd17 	ldw	r2,-12(fp)
1010da94:	10001926 	beq	r2,zero,1010dafc <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1010da98:	e0bffd17 	ldw	r2,-12(fp)
1010da9c:	10800017 	ldw	r2,0(r2)
1010daa0:	10800417 	ldw	r2,16(r2)
1010daa4:	10000626 	beq	r2,zero,1010dac0 <close+0x74>
1010daa8:	e0bffd17 	ldw	r2,-12(fp)
1010daac:	10800017 	ldw	r2,0(r2)
1010dab0:	10800417 	ldw	r2,16(r2)
1010dab4:	e13ffd17 	ldw	r4,-12(fp)
1010dab8:	103ee83a 	callr	r2
1010dabc:	00000106 	br	1010dac4 <close+0x78>
1010dac0:	0005883a 	mov	r2,zero
1010dac4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1010dac8:	e13fff17 	ldw	r4,-4(fp)
1010dacc:	010e1340 	call	1010e134 <alt_release_fd>
    if (rval < 0)
1010dad0:	e0bffe17 	ldw	r2,-8(fp)
1010dad4:	1000070e 	bge	r2,zero,1010daf4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1010dad8:	010da100 	call	1010da10 <alt_get_errno>
1010dadc:	1007883a 	mov	r3,r2
1010dae0:	e0bffe17 	ldw	r2,-8(fp)
1010dae4:	0085c83a 	sub	r2,zero,r2
1010dae8:	18800015 	stw	r2,0(r3)
      return -1;
1010daec:	00bfffc4 	movi	r2,-1
1010daf0:	00000706 	br	1010db10 <close+0xc4>
    }
    return 0;
1010daf4:	0005883a 	mov	r2,zero
1010daf8:	00000506 	br	1010db10 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010dafc:	010da100 	call	1010da10 <alt_get_errno>
1010db00:	1007883a 	mov	r3,r2
1010db04:	00801444 	movi	r2,81
1010db08:	18800015 	stw	r2,0(r3)
    return -1;
1010db0c:	00bfffc4 	movi	r2,-1
  }
}
1010db10:	e037883a 	mov	sp,fp
1010db14:	dfc00117 	ldw	ra,4(sp)
1010db18:	df000017 	ldw	fp,0(sp)
1010db1c:	dec00204 	addi	sp,sp,8
1010db20:	f800283a 	ret

1010db24 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1010db24:	defffc04 	addi	sp,sp,-16
1010db28:	df000315 	stw	fp,12(sp)
1010db2c:	df000304 	addi	fp,sp,12
1010db30:	e13ffd15 	stw	r4,-12(fp)
1010db34:	e17ffe15 	stw	r5,-8(fp)
1010db38:	e1bfff15 	stw	r6,-4(fp)
  return len;
1010db3c:	e0bfff17 	ldw	r2,-4(fp)
}
1010db40:	e037883a 	mov	sp,fp
1010db44:	df000017 	ldw	fp,0(sp)
1010db48:	dec00104 	addi	sp,sp,4
1010db4c:	f800283a 	ret

1010db50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010db50:	defffe04 	addi	sp,sp,-8
1010db54:	dfc00115 	stw	ra,4(sp)
1010db58:	df000015 	stw	fp,0(sp)
1010db5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010db60:	d0a00b17 	ldw	r2,-32724(gp)
1010db64:	10000326 	beq	r2,zero,1010db74 <alt_get_errno+0x24>
1010db68:	d0a00b17 	ldw	r2,-32724(gp)
1010db6c:	103ee83a 	callr	r2
1010db70:	00000106 	br	1010db78 <alt_get_errno+0x28>
1010db74:	d0a6ff04 	addi	r2,gp,-25604
}
1010db78:	e037883a 	mov	sp,fp
1010db7c:	dfc00117 	ldw	ra,4(sp)
1010db80:	df000017 	ldw	fp,0(sp)
1010db84:	dec00204 	addi	sp,sp,8
1010db88:	f800283a 	ret

1010db8c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1010db8c:	defffb04 	addi	sp,sp,-20
1010db90:	dfc00415 	stw	ra,16(sp)
1010db94:	df000315 	stw	fp,12(sp)
1010db98:	df000304 	addi	fp,sp,12
1010db9c:	e13ffe15 	stw	r4,-8(fp)
1010dba0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010dba4:	e0bffe17 	ldw	r2,-8(fp)
1010dba8:	10000816 	blt	r2,zero,1010dbcc <fstat+0x40>
1010dbac:	01400304 	movi	r5,12
1010dbb0:	e13ffe17 	ldw	r4,-8(fp)
1010dbb4:	0100c840 	call	10100c84 <__mulsi3>
1010dbb8:	1007883a 	mov	r3,r2
1010dbbc:	00840474 	movhi	r2,4113
1010dbc0:	10847c04 	addi	r2,r2,4592
1010dbc4:	1885883a 	add	r2,r3,r2
1010dbc8:	00000106 	br	1010dbd0 <fstat+0x44>
1010dbcc:	0005883a 	mov	r2,zero
1010dbd0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1010dbd4:	e0bffd17 	ldw	r2,-12(fp)
1010dbd8:	10001026 	beq	r2,zero,1010dc1c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1010dbdc:	e0bffd17 	ldw	r2,-12(fp)
1010dbe0:	10800017 	ldw	r2,0(r2)
1010dbe4:	10800817 	ldw	r2,32(r2)
1010dbe8:	10000726 	beq	r2,zero,1010dc08 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1010dbec:	e0bffd17 	ldw	r2,-12(fp)
1010dbf0:	10800017 	ldw	r2,0(r2)
1010dbf4:	10800817 	ldw	r2,32(r2)
1010dbf8:	e17fff17 	ldw	r5,-4(fp)
1010dbfc:	e13ffd17 	ldw	r4,-12(fp)
1010dc00:	103ee83a 	callr	r2
1010dc04:	00000a06 	br	1010dc30 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1010dc08:	e0bfff17 	ldw	r2,-4(fp)
1010dc0c:	00c80004 	movi	r3,8192
1010dc10:	10c00115 	stw	r3,4(r2)
      return 0;
1010dc14:	0005883a 	mov	r2,zero
1010dc18:	00000506 	br	1010dc30 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010dc1c:	010db500 	call	1010db50 <alt_get_errno>
1010dc20:	1007883a 	mov	r3,r2
1010dc24:	00801444 	movi	r2,81
1010dc28:	18800015 	stw	r2,0(r3)
    return -1;
1010dc2c:	00bfffc4 	movi	r2,-1
  }
}
1010dc30:	e037883a 	mov	sp,fp
1010dc34:	dfc00117 	ldw	ra,4(sp)
1010dc38:	df000017 	ldw	fp,0(sp)
1010dc3c:	dec00204 	addi	sp,sp,8
1010dc40:	f800283a 	ret

1010dc44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010dc44:	defffe04 	addi	sp,sp,-8
1010dc48:	dfc00115 	stw	ra,4(sp)
1010dc4c:	df000015 	stw	fp,0(sp)
1010dc50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010dc54:	d0a00b17 	ldw	r2,-32724(gp)
1010dc58:	10000326 	beq	r2,zero,1010dc68 <alt_get_errno+0x24>
1010dc5c:	d0a00b17 	ldw	r2,-32724(gp)
1010dc60:	103ee83a 	callr	r2
1010dc64:	00000106 	br	1010dc6c <alt_get_errno+0x28>
1010dc68:	d0a6ff04 	addi	r2,gp,-25604
}
1010dc6c:	e037883a 	mov	sp,fp
1010dc70:	dfc00117 	ldw	ra,4(sp)
1010dc74:	df000017 	ldw	fp,0(sp)
1010dc78:	dec00204 	addi	sp,sp,8
1010dc7c:	f800283a 	ret

1010dc80 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1010dc80:	deffed04 	addi	sp,sp,-76
1010dc84:	dfc01215 	stw	ra,72(sp)
1010dc88:	df001115 	stw	fp,68(sp)
1010dc8c:	df001104 	addi	fp,sp,68
1010dc90:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010dc94:	e0bfff17 	ldw	r2,-4(fp)
1010dc98:	10000816 	blt	r2,zero,1010dcbc <isatty+0x3c>
1010dc9c:	01400304 	movi	r5,12
1010dca0:	e13fff17 	ldw	r4,-4(fp)
1010dca4:	0100c840 	call	10100c84 <__mulsi3>
1010dca8:	1007883a 	mov	r3,r2
1010dcac:	00840474 	movhi	r2,4113
1010dcb0:	10847c04 	addi	r2,r2,4592
1010dcb4:	1885883a 	add	r2,r3,r2
1010dcb8:	00000106 	br	1010dcc0 <isatty+0x40>
1010dcbc:	0005883a 	mov	r2,zero
1010dcc0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1010dcc4:	e0bfef17 	ldw	r2,-68(fp)
1010dcc8:	10000e26 	beq	r2,zero,1010dd04 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1010dccc:	e0bfef17 	ldw	r2,-68(fp)
1010dcd0:	10800017 	ldw	r2,0(r2)
1010dcd4:	10800817 	ldw	r2,32(r2)
1010dcd8:	1000021e 	bne	r2,zero,1010dce4 <isatty+0x64>
    {
      return 1;
1010dcdc:	00800044 	movi	r2,1
1010dce0:	00000d06 	br	1010dd18 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1010dce4:	e0bff004 	addi	r2,fp,-64
1010dce8:	100b883a 	mov	r5,r2
1010dcec:	e13fff17 	ldw	r4,-4(fp)
1010dcf0:	010db8c0 	call	1010db8c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1010dcf4:	e0bff117 	ldw	r2,-60(fp)
1010dcf8:	10880020 	cmpeqi	r2,r2,8192
1010dcfc:	10803fcc 	andi	r2,r2,255
1010dd00:	00000506 	br	1010dd18 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010dd04:	010dc440 	call	1010dc44 <alt_get_errno>
1010dd08:	1007883a 	mov	r3,r2
1010dd0c:	00801444 	movi	r2,81
1010dd10:	18800015 	stw	r2,0(r3)
    return 0;
1010dd14:	0005883a 	mov	r2,zero
  }
}
1010dd18:	e037883a 	mov	sp,fp
1010dd1c:	dfc00117 	ldw	ra,4(sp)
1010dd20:	df000017 	ldw	fp,0(sp)
1010dd24:	dec00204 	addi	sp,sp,8
1010dd28:	f800283a 	ret

1010dd2c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1010dd2c:	defffc04 	addi	sp,sp,-16
1010dd30:	df000315 	stw	fp,12(sp)
1010dd34:	df000304 	addi	fp,sp,12
1010dd38:	e13ffd15 	stw	r4,-12(fp)
1010dd3c:	e17ffe15 	stw	r5,-8(fp)
1010dd40:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1010dd44:	e0fffe17 	ldw	r3,-8(fp)
1010dd48:	e0bffd17 	ldw	r2,-12(fp)
1010dd4c:	18800c26 	beq	r3,r2,1010dd80 <alt_load_section+0x54>
  {
    while( to != end )
1010dd50:	00000806 	br	1010dd74 <alt_load_section+0x48>
    {
      *to++ = *from++;
1010dd54:	e0bffe17 	ldw	r2,-8(fp)
1010dd58:	10c00104 	addi	r3,r2,4
1010dd5c:	e0fffe15 	stw	r3,-8(fp)
1010dd60:	e0fffd17 	ldw	r3,-12(fp)
1010dd64:	19000104 	addi	r4,r3,4
1010dd68:	e13ffd15 	stw	r4,-12(fp)
1010dd6c:	18c00017 	ldw	r3,0(r3)
1010dd70:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1010dd74:	e0fffe17 	ldw	r3,-8(fp)
1010dd78:	e0bfff17 	ldw	r2,-4(fp)
1010dd7c:	18bff51e 	bne	r3,r2,1010dd54 <__alt_data_end+0xfffedd54>
    {
      *to++ = *from++;
    }
  }
}
1010dd80:	0001883a 	nop
1010dd84:	e037883a 	mov	sp,fp
1010dd88:	df000017 	ldw	fp,0(sp)
1010dd8c:	dec00104 	addi	sp,sp,4
1010dd90:	f800283a 	ret

1010dd94 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1010dd94:	defffe04 	addi	sp,sp,-8
1010dd98:	dfc00115 	stw	ra,4(sp)
1010dd9c:	df000015 	stw	fp,0(sp)
1010dda0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1010dda4:	01840474 	movhi	r6,4113
1010dda8:	31892004 	addi	r6,r6,9344
1010ddac:	01440474 	movhi	r5,4113
1010ddb0:	29424904 	addi	r5,r5,2340
1010ddb4:	01040474 	movhi	r4,4113
1010ddb8:	21092004 	addi	r4,r4,9344
1010ddbc:	010dd2c0 	call	1010dd2c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1010ddc0:	01840434 	movhi	r6,4112
1010ddc4:	31808c04 	addi	r6,r6,560
1010ddc8:	01440434 	movhi	r5,4112
1010ddcc:	29400804 	addi	r5,r5,32
1010ddd0:	01040434 	movhi	r4,4112
1010ddd4:	21000804 	addi	r4,r4,32
1010ddd8:	010dd2c0 	call	1010dd2c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1010dddc:	01840474 	movhi	r6,4113
1010dde0:	31824904 	addi	r6,r6,2340
1010dde4:	01440474 	movhi	r5,4113
1010dde8:	29416d04 	addi	r5,r5,1460
1010ddec:	01040474 	movhi	r4,4113
1010ddf0:	21016d04 	addi	r4,r4,1460
1010ddf4:	010dd2c0 	call	1010dd2c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1010ddf8:	010f47c0 	call	1010f47c <alt_dcache_flush_all>
  alt_icache_flush_all();
1010ddfc:	010f6bc0 	call	1010f6bc <alt_icache_flush_all>
}
1010de00:	0001883a 	nop
1010de04:	e037883a 	mov	sp,fp
1010de08:	dfc00117 	ldw	ra,4(sp)
1010de0c:	df000017 	ldw	fp,0(sp)
1010de10:	dec00204 	addi	sp,sp,8
1010de14:	f800283a 	ret

1010de18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010de18:	defffe04 	addi	sp,sp,-8
1010de1c:	dfc00115 	stw	ra,4(sp)
1010de20:	df000015 	stw	fp,0(sp)
1010de24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010de28:	d0a00b17 	ldw	r2,-32724(gp)
1010de2c:	10000326 	beq	r2,zero,1010de3c <alt_get_errno+0x24>
1010de30:	d0a00b17 	ldw	r2,-32724(gp)
1010de34:	103ee83a 	callr	r2
1010de38:	00000106 	br	1010de40 <alt_get_errno+0x28>
1010de3c:	d0a6ff04 	addi	r2,gp,-25604
}
1010de40:	e037883a 	mov	sp,fp
1010de44:	dfc00117 	ldw	ra,4(sp)
1010de48:	df000017 	ldw	fp,0(sp)
1010de4c:	dec00204 	addi	sp,sp,8
1010de50:	f800283a 	ret

1010de54 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1010de54:	defff904 	addi	sp,sp,-28
1010de58:	dfc00615 	stw	ra,24(sp)
1010de5c:	df000515 	stw	fp,20(sp)
1010de60:	df000504 	addi	fp,sp,20
1010de64:	e13ffd15 	stw	r4,-12(fp)
1010de68:	e17ffe15 	stw	r5,-8(fp)
1010de6c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1010de70:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010de74:	e0bffd17 	ldw	r2,-12(fp)
1010de78:	10000816 	blt	r2,zero,1010de9c <lseek+0x48>
1010de7c:	01400304 	movi	r5,12
1010de80:	e13ffd17 	ldw	r4,-12(fp)
1010de84:	0100c840 	call	10100c84 <__mulsi3>
1010de88:	1007883a 	mov	r3,r2
1010de8c:	00840474 	movhi	r2,4113
1010de90:	10847c04 	addi	r2,r2,4592
1010de94:	1885883a 	add	r2,r3,r2
1010de98:	00000106 	br	1010dea0 <lseek+0x4c>
1010de9c:	0005883a 	mov	r2,zero
1010dea0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1010dea4:	e0bffc17 	ldw	r2,-16(fp)
1010dea8:	10001026 	beq	r2,zero,1010deec <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1010deac:	e0bffc17 	ldw	r2,-16(fp)
1010deb0:	10800017 	ldw	r2,0(r2)
1010deb4:	10800717 	ldw	r2,28(r2)
1010deb8:	10000926 	beq	r2,zero,1010dee0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1010debc:	e0bffc17 	ldw	r2,-16(fp)
1010dec0:	10800017 	ldw	r2,0(r2)
1010dec4:	10800717 	ldw	r2,28(r2)
1010dec8:	e1bfff17 	ldw	r6,-4(fp)
1010decc:	e17ffe17 	ldw	r5,-8(fp)
1010ded0:	e13ffc17 	ldw	r4,-16(fp)
1010ded4:	103ee83a 	callr	r2
1010ded8:	e0bffb15 	stw	r2,-20(fp)
1010dedc:	00000506 	br	1010def4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1010dee0:	00bfde84 	movi	r2,-134
1010dee4:	e0bffb15 	stw	r2,-20(fp)
1010dee8:	00000206 	br	1010def4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1010deec:	00bfebc4 	movi	r2,-81
1010def0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1010def4:	e0bffb17 	ldw	r2,-20(fp)
1010def8:	1000070e 	bge	r2,zero,1010df18 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1010defc:	010de180 	call	1010de18 <alt_get_errno>
1010df00:	1007883a 	mov	r3,r2
1010df04:	e0bffb17 	ldw	r2,-20(fp)
1010df08:	0085c83a 	sub	r2,zero,r2
1010df0c:	18800015 	stw	r2,0(r3)
    rc = -1;
1010df10:	00bfffc4 	movi	r2,-1
1010df14:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1010df18:	e0bffb17 	ldw	r2,-20(fp)
}
1010df1c:	e037883a 	mov	sp,fp
1010df20:	dfc00117 	ldw	ra,4(sp)
1010df24:	df000017 	ldw	fp,0(sp)
1010df28:	dec00204 	addi	sp,sp,8
1010df2c:	f800283a 	ret

1010df30 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1010df30:	defffd04 	addi	sp,sp,-12
1010df34:	dfc00215 	stw	ra,8(sp)
1010df38:	df000115 	stw	fp,4(sp)
1010df3c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1010df40:	0009883a 	mov	r4,zero
1010df44:	010e3d80 	call	1010e3d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1010df48:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1010df4c:	010e4100 	call	1010e410 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1010df50:	01840474 	movhi	r6,4113
1010df54:	31823c04 	addi	r6,r6,2288
1010df58:	01440474 	movhi	r5,4113
1010df5c:	29423c04 	addi	r5,r5,2288
1010df60:	01040474 	movhi	r4,4113
1010df64:	21023c04 	addi	r4,r4,2288
1010df68:	010fa600 	call	1010fa60 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1010df6c:	010f57c0 	call	1010f57c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1010df70:	01040474 	movhi	r4,4113
1010df74:	213d7704 	addi	r4,r4,-2596
1010df78:	01102200 	call	10110220 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1010df7c:	d0a70017 	ldw	r2,-25600(gp)
1010df80:	d0e70117 	ldw	r3,-25596(gp)
1010df84:	d1270217 	ldw	r4,-25592(gp)
1010df88:	200d883a 	mov	r6,r4
1010df8c:	180b883a 	mov	r5,r3
1010df90:	1009883a 	mov	r4,r2
1010df94:	0100a7c0 	call	10100a7c <main>
1010df98:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1010df9c:	01000044 	movi	r4,1
1010dfa0:	010da4c0 	call	1010da4c <close>
  exit (result);
1010dfa4:	e13fff17 	ldw	r4,-4(fp)
1010dfa8:	01102340 	call	10110234 <exit>

1010dfac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1010dfac:	defffe04 	addi	sp,sp,-8
1010dfb0:	df000115 	stw	fp,4(sp)
1010dfb4:	df000104 	addi	fp,sp,4
1010dfb8:	e13fff15 	stw	r4,-4(fp)
}
1010dfbc:	0001883a 	nop
1010dfc0:	e037883a 	mov	sp,fp
1010dfc4:	df000017 	ldw	fp,0(sp)
1010dfc8:	dec00104 	addi	sp,sp,4
1010dfcc:	f800283a 	ret

1010dfd0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1010dfd0:	defffe04 	addi	sp,sp,-8
1010dfd4:	df000115 	stw	fp,4(sp)
1010dfd8:	df000104 	addi	fp,sp,4
1010dfdc:	e13fff15 	stw	r4,-4(fp)
}
1010dfe0:	0001883a 	nop
1010dfe4:	e037883a 	mov	sp,fp
1010dfe8:	df000017 	ldw	fp,0(sp)
1010dfec:	dec00104 	addi	sp,sp,4
1010dff0:	f800283a 	ret

1010dff4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010dff4:	defffe04 	addi	sp,sp,-8
1010dff8:	dfc00115 	stw	ra,4(sp)
1010dffc:	df000015 	stw	fp,0(sp)
1010e000:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e004:	d0a00b17 	ldw	r2,-32724(gp)
1010e008:	10000326 	beq	r2,zero,1010e018 <alt_get_errno+0x24>
1010e00c:	d0a00b17 	ldw	r2,-32724(gp)
1010e010:	103ee83a 	callr	r2
1010e014:	00000106 	br	1010e01c <alt_get_errno+0x28>
1010e018:	d0a6ff04 	addi	r2,gp,-25604
}
1010e01c:	e037883a 	mov	sp,fp
1010e020:	dfc00117 	ldw	ra,4(sp)
1010e024:	df000017 	ldw	fp,0(sp)
1010e028:	dec00204 	addi	sp,sp,8
1010e02c:	f800283a 	ret

1010e030 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1010e030:	defff904 	addi	sp,sp,-28
1010e034:	dfc00615 	stw	ra,24(sp)
1010e038:	df000515 	stw	fp,20(sp)
1010e03c:	df000504 	addi	fp,sp,20
1010e040:	e13ffd15 	stw	r4,-12(fp)
1010e044:	e17ffe15 	stw	r5,-8(fp)
1010e048:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e04c:	e0bffd17 	ldw	r2,-12(fp)
1010e050:	10000816 	blt	r2,zero,1010e074 <read+0x44>
1010e054:	01400304 	movi	r5,12
1010e058:	e13ffd17 	ldw	r4,-12(fp)
1010e05c:	0100c840 	call	10100c84 <__mulsi3>
1010e060:	1007883a 	mov	r3,r2
1010e064:	00840474 	movhi	r2,4113
1010e068:	10847c04 	addi	r2,r2,4592
1010e06c:	1885883a 	add	r2,r3,r2
1010e070:	00000106 	br	1010e078 <read+0x48>
1010e074:	0005883a 	mov	r2,zero
1010e078:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010e07c:	e0bffb17 	ldw	r2,-20(fp)
1010e080:	10002226 	beq	r2,zero,1010e10c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010e084:	e0bffb17 	ldw	r2,-20(fp)
1010e088:	10800217 	ldw	r2,8(r2)
1010e08c:	108000cc 	andi	r2,r2,3
1010e090:	10800060 	cmpeqi	r2,r2,1
1010e094:	1000181e 	bne	r2,zero,1010e0f8 <read+0xc8>
        (fd->dev->read))
1010e098:	e0bffb17 	ldw	r2,-20(fp)
1010e09c:	10800017 	ldw	r2,0(r2)
1010e0a0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1010e0a4:	10001426 	beq	r2,zero,1010e0f8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1010e0a8:	e0bffb17 	ldw	r2,-20(fp)
1010e0ac:	10800017 	ldw	r2,0(r2)
1010e0b0:	10800517 	ldw	r2,20(r2)
1010e0b4:	e0ffff17 	ldw	r3,-4(fp)
1010e0b8:	180d883a 	mov	r6,r3
1010e0bc:	e17ffe17 	ldw	r5,-8(fp)
1010e0c0:	e13ffb17 	ldw	r4,-20(fp)
1010e0c4:	103ee83a 	callr	r2
1010e0c8:	e0bffc15 	stw	r2,-16(fp)
1010e0cc:	e0bffc17 	ldw	r2,-16(fp)
1010e0d0:	1000070e 	bge	r2,zero,1010e0f0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
1010e0d4:	010dff40 	call	1010dff4 <alt_get_errno>
1010e0d8:	1007883a 	mov	r3,r2
1010e0dc:	e0bffc17 	ldw	r2,-16(fp)
1010e0e0:	0085c83a 	sub	r2,zero,r2
1010e0e4:	18800015 	stw	r2,0(r3)
          return -1;
1010e0e8:	00bfffc4 	movi	r2,-1
1010e0ec:	00000c06 	br	1010e120 <read+0xf0>
        }
        return rval;
1010e0f0:	e0bffc17 	ldw	r2,-16(fp)
1010e0f4:	00000a06 	br	1010e120 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1010e0f8:	010dff40 	call	1010dff4 <alt_get_errno>
1010e0fc:	1007883a 	mov	r3,r2
1010e100:	00800344 	movi	r2,13
1010e104:	18800015 	stw	r2,0(r3)
1010e108:	00000406 	br	1010e11c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1010e10c:	010dff40 	call	1010dff4 <alt_get_errno>
1010e110:	1007883a 	mov	r3,r2
1010e114:	00801444 	movi	r2,81
1010e118:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010e11c:	00bfffc4 	movi	r2,-1
}
1010e120:	e037883a 	mov	sp,fp
1010e124:	dfc00117 	ldw	ra,4(sp)
1010e128:	df000017 	ldw	fp,0(sp)
1010e12c:	dec00204 	addi	sp,sp,8
1010e130:	f800283a 	ret

1010e134 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1010e134:	defffc04 	addi	sp,sp,-16
1010e138:	dfc00315 	stw	ra,12(sp)
1010e13c:	df000215 	stw	fp,8(sp)
1010e140:	dc000115 	stw	r16,4(sp)
1010e144:	df000204 	addi	fp,sp,8
1010e148:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1010e14c:	e0bffe17 	ldw	r2,-8(fp)
1010e150:	108000d0 	cmplti	r2,r2,3
1010e154:	1000111e 	bne	r2,zero,1010e19c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1010e158:	04040474 	movhi	r16,4113
1010e15c:	84047c04 	addi	r16,r16,4592
1010e160:	e0bffe17 	ldw	r2,-8(fp)
1010e164:	01400304 	movi	r5,12
1010e168:	1009883a 	mov	r4,r2
1010e16c:	0100c840 	call	10100c84 <__mulsi3>
1010e170:	8085883a 	add	r2,r16,r2
1010e174:	10800204 	addi	r2,r2,8
1010e178:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1010e17c:	04040474 	movhi	r16,4113
1010e180:	84047c04 	addi	r16,r16,4592
1010e184:	e0bffe17 	ldw	r2,-8(fp)
1010e188:	01400304 	movi	r5,12
1010e18c:	1009883a 	mov	r4,r2
1010e190:	0100c840 	call	10100c84 <__mulsi3>
1010e194:	8085883a 	add	r2,r16,r2
1010e198:	10000015 	stw	zero,0(r2)
  }
}
1010e19c:	0001883a 	nop
1010e1a0:	e6ffff04 	addi	sp,fp,-4
1010e1a4:	dfc00217 	ldw	ra,8(sp)
1010e1a8:	df000117 	ldw	fp,4(sp)
1010e1ac:	dc000017 	ldw	r16,0(sp)
1010e1b0:	dec00304 	addi	sp,sp,12
1010e1b4:	f800283a 	ret

1010e1b8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1010e1b8:	defff904 	addi	sp,sp,-28
1010e1bc:	df000615 	stw	fp,24(sp)
1010e1c0:	df000604 	addi	fp,sp,24
1010e1c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010e1c8:	0005303a 	rdctl	r2,status
1010e1cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010e1d0:	e0fffe17 	ldw	r3,-8(fp)
1010e1d4:	00bfff84 	movi	r2,-2
1010e1d8:	1884703a 	and	r2,r3,r2
1010e1dc:	1001703a 	wrctl	status,r2
  
  return context;
1010e1e0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1010e1e4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1010e1e8:	d0a00c17 	ldw	r2,-32720(gp)
1010e1ec:	10c000c4 	addi	r3,r2,3
1010e1f0:	00bfff04 	movi	r2,-4
1010e1f4:	1884703a 	and	r2,r3,r2
1010e1f8:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1010e1fc:	d0e00c17 	ldw	r3,-32720(gp)
1010e200:	e0bfff17 	ldw	r2,-4(fp)
1010e204:	1887883a 	add	r3,r3,r2
1010e208:	008404b4 	movhi	r2,4114
1010e20c:	10800004 	addi	r2,r2,0
1010e210:	10c0062e 	bgeu	r2,r3,1010e22c <sbrk+0x74>
1010e214:	e0bffb17 	ldw	r2,-20(fp)
1010e218:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010e21c:	e0bffa17 	ldw	r2,-24(fp)
1010e220:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1010e224:	00bfffc4 	movi	r2,-1
1010e228:	00000b06 	br	1010e258 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1010e22c:	d0a00c17 	ldw	r2,-32720(gp)
1010e230:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1010e234:	d0e00c17 	ldw	r3,-32720(gp)
1010e238:	e0bfff17 	ldw	r2,-4(fp)
1010e23c:	1885883a 	add	r2,r3,r2
1010e240:	d0a00c15 	stw	r2,-32720(gp)
1010e244:	e0bffb17 	ldw	r2,-20(fp)
1010e248:	e0bffc15 	stw	r2,-16(fp)
1010e24c:	e0bffc17 	ldw	r2,-16(fp)
1010e250:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1010e254:	e0bffd17 	ldw	r2,-12(fp)
} 
1010e258:	e037883a 	mov	sp,fp
1010e25c:	df000017 	ldw	fp,0(sp)
1010e260:	dec00104 	addi	sp,sp,4
1010e264:	f800283a 	ret

1010e268 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010e268:	defffe04 	addi	sp,sp,-8
1010e26c:	dfc00115 	stw	ra,4(sp)
1010e270:	df000015 	stw	fp,0(sp)
1010e274:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010e278:	d0a00b17 	ldw	r2,-32724(gp)
1010e27c:	10000326 	beq	r2,zero,1010e28c <alt_get_errno+0x24>
1010e280:	d0a00b17 	ldw	r2,-32724(gp)
1010e284:	103ee83a 	callr	r2
1010e288:	00000106 	br	1010e290 <alt_get_errno+0x28>
1010e28c:	d0a6ff04 	addi	r2,gp,-25604
}
1010e290:	e037883a 	mov	sp,fp
1010e294:	dfc00117 	ldw	ra,4(sp)
1010e298:	df000017 	ldw	fp,0(sp)
1010e29c:	dec00204 	addi	sp,sp,8
1010e2a0:	f800283a 	ret

1010e2a4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1010e2a4:	defff904 	addi	sp,sp,-28
1010e2a8:	dfc00615 	stw	ra,24(sp)
1010e2ac:	df000515 	stw	fp,20(sp)
1010e2b0:	df000504 	addi	fp,sp,20
1010e2b4:	e13ffd15 	stw	r4,-12(fp)
1010e2b8:	e17ffe15 	stw	r5,-8(fp)
1010e2bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1010e2c0:	e0bffd17 	ldw	r2,-12(fp)
1010e2c4:	10000816 	blt	r2,zero,1010e2e8 <write+0x44>
1010e2c8:	01400304 	movi	r5,12
1010e2cc:	e13ffd17 	ldw	r4,-12(fp)
1010e2d0:	0100c840 	call	10100c84 <__mulsi3>
1010e2d4:	1007883a 	mov	r3,r2
1010e2d8:	00840474 	movhi	r2,4113
1010e2dc:	10847c04 	addi	r2,r2,4592
1010e2e0:	1885883a 	add	r2,r3,r2
1010e2e4:	00000106 	br	1010e2ec <write+0x48>
1010e2e8:	0005883a 	mov	r2,zero
1010e2ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1010e2f0:	e0bffb17 	ldw	r2,-20(fp)
1010e2f4:	10002126 	beq	r2,zero,1010e37c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1010e2f8:	e0bffb17 	ldw	r2,-20(fp)
1010e2fc:	10800217 	ldw	r2,8(r2)
1010e300:	108000cc 	andi	r2,r2,3
1010e304:	10001826 	beq	r2,zero,1010e368 <write+0xc4>
1010e308:	e0bffb17 	ldw	r2,-20(fp)
1010e30c:	10800017 	ldw	r2,0(r2)
1010e310:	10800617 	ldw	r2,24(r2)
1010e314:	10001426 	beq	r2,zero,1010e368 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1010e318:	e0bffb17 	ldw	r2,-20(fp)
1010e31c:	10800017 	ldw	r2,0(r2)
1010e320:	10800617 	ldw	r2,24(r2)
1010e324:	e0ffff17 	ldw	r3,-4(fp)
1010e328:	180d883a 	mov	r6,r3
1010e32c:	e17ffe17 	ldw	r5,-8(fp)
1010e330:	e13ffb17 	ldw	r4,-20(fp)
1010e334:	103ee83a 	callr	r2
1010e338:	e0bffc15 	stw	r2,-16(fp)
1010e33c:	e0bffc17 	ldw	r2,-16(fp)
1010e340:	1000070e 	bge	r2,zero,1010e360 <write+0xbc>
      {
        ALT_ERRNO = -rval;
1010e344:	010e2680 	call	1010e268 <alt_get_errno>
1010e348:	1007883a 	mov	r3,r2
1010e34c:	e0bffc17 	ldw	r2,-16(fp)
1010e350:	0085c83a 	sub	r2,zero,r2
1010e354:	18800015 	stw	r2,0(r3)
        return -1;
1010e358:	00bfffc4 	movi	r2,-1
1010e35c:	00000c06 	br	1010e390 <write+0xec>
      }
      return rval;
1010e360:	e0bffc17 	ldw	r2,-16(fp)
1010e364:	00000a06 	br	1010e390 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1010e368:	010e2680 	call	1010e268 <alt_get_errno>
1010e36c:	1007883a 	mov	r3,r2
1010e370:	00800344 	movi	r2,13
1010e374:	18800015 	stw	r2,0(r3)
1010e378:	00000406 	br	1010e38c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1010e37c:	010e2680 	call	1010e268 <alt_get_errno>
1010e380:	1007883a 	mov	r3,r2
1010e384:	00801444 	movi	r2,81
1010e388:	18800015 	stw	r2,0(r3)
  }
  return -1;
1010e38c:	00bfffc4 	movi	r2,-1
}
1010e390:	e037883a 	mov	sp,fp
1010e394:	dfc00117 	ldw	ra,4(sp)
1010e398:	df000017 	ldw	fp,0(sp)
1010e39c:	dec00204 	addi	sp,sp,8
1010e3a0:	f800283a 	ret

1010e3a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1010e3a4:	defffd04 	addi	sp,sp,-12
1010e3a8:	dfc00215 	stw	ra,8(sp)
1010e3ac:	df000115 	stw	fp,4(sp)
1010e3b0:	df000104 	addi	fp,sp,4
1010e3b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1010e3b8:	d1600804 	addi	r5,gp,-32736
1010e3bc:	e13fff17 	ldw	r4,-4(fp)
1010e3c0:	010f4d80 	call	1010f4d8 <alt_dev_llist_insert>
}
1010e3c4:	e037883a 	mov	sp,fp
1010e3c8:	dfc00117 	ldw	ra,4(sp)
1010e3cc:	df000017 	ldw	fp,0(sp)
1010e3d0:	dec00204 	addi	sp,sp,8
1010e3d4:	f800283a 	ret

1010e3d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1010e3d8:	defffd04 	addi	sp,sp,-12
1010e3dc:	dfc00215 	stw	ra,8(sp)
1010e3e0:	df000115 	stw	fp,4(sp)
1010e3e4:	df000104 	addi	fp,sp,4
1010e3e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1010e3ec:	010ff040 	call	1010ff04 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1010e3f0:	00800044 	movi	r2,1
1010e3f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1010e3f8:	0001883a 	nop
1010e3fc:	e037883a 	mov	sp,fp
1010e400:	dfc00117 	ldw	ra,4(sp)
1010e404:	df000017 	ldw	fp,0(sp)
1010e408:	dec00204 	addi	sp,sp,8
1010e40c:	f800283a 	ret

1010e410 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1010e410:	defffe04 	addi	sp,sp,-8
1010e414:	dfc00115 	stw	ra,4(sp)
1010e418:	df000015 	stw	fp,0(sp)
1010e41c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1010e420:	000d883a 	mov	r6,zero
1010e424:	000b883a 	mov	r5,zero
1010e428:	01040474 	movhi	r4,4113
1010e42c:	2104e604 	addi	r4,r4,5016
1010e430:	010e5c80 	call	1010e5c8 <altera_avalon_jtag_uart_init>
1010e434:	01040474 	movhi	r4,4113
1010e438:	2104dc04 	addi	r4,r4,4976
1010e43c:	010e3a40 	call	1010e3a4 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
1010e440:	01040474 	movhi	r4,4113
1010e444:	2108f404 	addi	r4,r4,9168
1010e448:	010f63c0 	call	1010f63c <alt_fs_reg>
}
1010e44c:	0001883a 	nop
1010e450:	e037883a 	mov	sp,fp
1010e454:	dfc00117 	ldw	ra,4(sp)
1010e458:	df000017 	ldw	fp,0(sp)
1010e45c:	dec00204 	addi	sp,sp,8
1010e460:	f800283a 	ret

1010e464 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1010e464:	defffa04 	addi	sp,sp,-24
1010e468:	dfc00515 	stw	ra,20(sp)
1010e46c:	df000415 	stw	fp,16(sp)
1010e470:	df000404 	addi	fp,sp,16
1010e474:	e13ffd15 	stw	r4,-12(fp)
1010e478:	e17ffe15 	stw	r5,-8(fp)
1010e47c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010e480:	e0bffd17 	ldw	r2,-12(fp)
1010e484:	10800017 	ldw	r2,0(r2)
1010e488:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1010e48c:	e0bffc17 	ldw	r2,-16(fp)
1010e490:	10c00a04 	addi	r3,r2,40
1010e494:	e0bffd17 	ldw	r2,-12(fp)
1010e498:	10800217 	ldw	r2,8(r2)
1010e49c:	100f883a 	mov	r7,r2
1010e4a0:	e1bfff17 	ldw	r6,-4(fp)
1010e4a4:	e17ffe17 	ldw	r5,-8(fp)
1010e4a8:	1809883a 	mov	r4,r3
1010e4ac:	010ea8c0 	call	1010ea8c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1010e4b0:	e037883a 	mov	sp,fp
1010e4b4:	dfc00117 	ldw	ra,4(sp)
1010e4b8:	df000017 	ldw	fp,0(sp)
1010e4bc:	dec00204 	addi	sp,sp,8
1010e4c0:	f800283a 	ret

1010e4c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1010e4c4:	defffa04 	addi	sp,sp,-24
1010e4c8:	dfc00515 	stw	ra,20(sp)
1010e4cc:	df000415 	stw	fp,16(sp)
1010e4d0:	df000404 	addi	fp,sp,16
1010e4d4:	e13ffd15 	stw	r4,-12(fp)
1010e4d8:	e17ffe15 	stw	r5,-8(fp)
1010e4dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010e4e0:	e0bffd17 	ldw	r2,-12(fp)
1010e4e4:	10800017 	ldw	r2,0(r2)
1010e4e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1010e4ec:	e0bffc17 	ldw	r2,-16(fp)
1010e4f0:	10c00a04 	addi	r3,r2,40
1010e4f4:	e0bffd17 	ldw	r2,-12(fp)
1010e4f8:	10800217 	ldw	r2,8(r2)
1010e4fc:	100f883a 	mov	r7,r2
1010e500:	e1bfff17 	ldw	r6,-4(fp)
1010e504:	e17ffe17 	ldw	r5,-8(fp)
1010e508:	1809883a 	mov	r4,r3
1010e50c:	010eca80 	call	1010eca8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1010e510:	e037883a 	mov	sp,fp
1010e514:	dfc00117 	ldw	ra,4(sp)
1010e518:	df000017 	ldw	fp,0(sp)
1010e51c:	dec00204 	addi	sp,sp,8
1010e520:	f800283a 	ret

1010e524 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1010e524:	defffc04 	addi	sp,sp,-16
1010e528:	dfc00315 	stw	ra,12(sp)
1010e52c:	df000215 	stw	fp,8(sp)
1010e530:	df000204 	addi	fp,sp,8
1010e534:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1010e538:	e0bfff17 	ldw	r2,-4(fp)
1010e53c:	10800017 	ldw	r2,0(r2)
1010e540:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1010e544:	e0bffe17 	ldw	r2,-8(fp)
1010e548:	10c00a04 	addi	r3,r2,40
1010e54c:	e0bfff17 	ldw	r2,-4(fp)
1010e550:	10800217 	ldw	r2,8(r2)
1010e554:	100b883a 	mov	r5,r2
1010e558:	1809883a 	mov	r4,r3
1010e55c:	010e9340 	call	1010e934 <altera_avalon_jtag_uart_close>
}
1010e560:	e037883a 	mov	sp,fp
1010e564:	dfc00117 	ldw	ra,4(sp)
1010e568:	df000017 	ldw	fp,0(sp)
1010e56c:	dec00204 	addi	sp,sp,8
1010e570:	f800283a 	ret

1010e574 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1010e574:	defffa04 	addi	sp,sp,-24
1010e578:	dfc00515 	stw	ra,20(sp)
1010e57c:	df000415 	stw	fp,16(sp)
1010e580:	df000404 	addi	fp,sp,16
1010e584:	e13ffd15 	stw	r4,-12(fp)
1010e588:	e17ffe15 	stw	r5,-8(fp)
1010e58c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1010e590:	e0bffd17 	ldw	r2,-12(fp)
1010e594:	10800017 	ldw	r2,0(r2)
1010e598:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1010e59c:	e0bffc17 	ldw	r2,-16(fp)
1010e5a0:	10800a04 	addi	r2,r2,40
1010e5a4:	e1bfff17 	ldw	r6,-4(fp)
1010e5a8:	e17ffe17 	ldw	r5,-8(fp)
1010e5ac:	1009883a 	mov	r4,r2
1010e5b0:	010e99c0 	call	1010e99c <altera_avalon_jtag_uart_ioctl>
}
1010e5b4:	e037883a 	mov	sp,fp
1010e5b8:	dfc00117 	ldw	ra,4(sp)
1010e5bc:	df000017 	ldw	fp,0(sp)
1010e5c0:	dec00204 	addi	sp,sp,8
1010e5c4:	f800283a 	ret

1010e5c8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1010e5c8:	defffa04 	addi	sp,sp,-24
1010e5cc:	dfc00515 	stw	ra,20(sp)
1010e5d0:	df000415 	stw	fp,16(sp)
1010e5d4:	df000404 	addi	fp,sp,16
1010e5d8:	e13ffd15 	stw	r4,-12(fp)
1010e5dc:	e17ffe15 	stw	r5,-8(fp)
1010e5e0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010e5e4:	e0bffd17 	ldw	r2,-12(fp)
1010e5e8:	00c00044 	movi	r3,1
1010e5ec:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1010e5f0:	e0bffd17 	ldw	r2,-12(fp)
1010e5f4:	10800017 	ldw	r2,0(r2)
1010e5f8:	10800104 	addi	r2,r2,4
1010e5fc:	1007883a 	mov	r3,r2
1010e600:	e0bffd17 	ldw	r2,-12(fp)
1010e604:	10800817 	ldw	r2,32(r2)
1010e608:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1010e60c:	e0bffe17 	ldw	r2,-8(fp)
1010e610:	e0ffff17 	ldw	r3,-4(fp)
1010e614:	d8000015 	stw	zero,0(sp)
1010e618:	e1fffd17 	ldw	r7,-12(fp)
1010e61c:	01840474 	movhi	r6,4113
1010e620:	31b9a204 	addi	r6,r6,-6520
1010e624:	180b883a 	mov	r5,r3
1010e628:	1009883a 	mov	r4,r2
1010e62c:	010f6dc0 	call	1010f6dc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1010e630:	e0bffd17 	ldw	r2,-12(fp)
1010e634:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1010e638:	e0bffd17 	ldw	r2,-12(fp)
1010e63c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1010e640:	d0e70417 	ldw	r3,-25584(gp)
1010e644:	e1fffd17 	ldw	r7,-12(fp)
1010e648:	01840474 	movhi	r6,4113
1010e64c:	31ba2504 	addi	r6,r6,-5996
1010e650:	180b883a 	mov	r5,r3
1010e654:	1009883a 	mov	r4,r2
1010e658:	010f3500 	call	1010f350 <alt_alarm_start>
1010e65c:	1000040e 	bge	r2,zero,1010e670 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1010e660:	e0fffd17 	ldw	r3,-12(fp)
1010e664:	00a00034 	movhi	r2,32768
1010e668:	10bfffc4 	addi	r2,r2,-1
1010e66c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1010e670:	0001883a 	nop
1010e674:	e037883a 	mov	sp,fp
1010e678:	dfc00117 	ldw	ra,4(sp)
1010e67c:	df000017 	ldw	fp,0(sp)
1010e680:	dec00204 	addi	sp,sp,8
1010e684:	f800283a 	ret

1010e688 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1010e688:	defff804 	addi	sp,sp,-32
1010e68c:	df000715 	stw	fp,28(sp)
1010e690:	df000704 	addi	fp,sp,28
1010e694:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1010e698:	e0bfff17 	ldw	r2,-4(fp)
1010e69c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1010e6a0:	e0bffb17 	ldw	r2,-20(fp)
1010e6a4:	10800017 	ldw	r2,0(r2)
1010e6a8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010e6ac:	e0bffc17 	ldw	r2,-16(fp)
1010e6b0:	10800104 	addi	r2,r2,4
1010e6b4:	10800037 	ldwio	r2,0(r2)
1010e6b8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1010e6bc:	e0bffd17 	ldw	r2,-12(fp)
1010e6c0:	1080c00c 	andi	r2,r2,768
1010e6c4:	10006d26 	beq	r2,zero,1010e87c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1010e6c8:	e0bffd17 	ldw	r2,-12(fp)
1010e6cc:	1080400c 	andi	r2,r2,256
1010e6d0:	10003526 	beq	r2,zero,1010e7a8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1010e6d4:	00800074 	movhi	r2,1
1010e6d8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010e6dc:	e0bffb17 	ldw	r2,-20(fp)
1010e6e0:	10800a17 	ldw	r2,40(r2)
1010e6e4:	10800044 	addi	r2,r2,1
1010e6e8:	1081ffcc 	andi	r2,r2,2047
1010e6ec:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1010e6f0:	e0bffb17 	ldw	r2,-20(fp)
1010e6f4:	10c00b17 	ldw	r3,44(r2)
1010e6f8:	e0bffe17 	ldw	r2,-8(fp)
1010e6fc:	18801526 	beq	r3,r2,1010e754 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1010e700:	e0bffc17 	ldw	r2,-16(fp)
1010e704:	10800037 	ldwio	r2,0(r2)
1010e708:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1010e70c:	e0bff917 	ldw	r2,-28(fp)
1010e710:	10a0000c 	andi	r2,r2,32768
1010e714:	10001126 	beq	r2,zero,1010e75c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1010e718:	e0bffb17 	ldw	r2,-20(fp)
1010e71c:	10800a17 	ldw	r2,40(r2)
1010e720:	e0fff917 	ldw	r3,-28(fp)
1010e724:	1809883a 	mov	r4,r3
1010e728:	e0fffb17 	ldw	r3,-20(fp)
1010e72c:	1885883a 	add	r2,r3,r2
1010e730:	10800e04 	addi	r2,r2,56
1010e734:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010e738:	e0bffb17 	ldw	r2,-20(fp)
1010e73c:	10800a17 	ldw	r2,40(r2)
1010e740:	10800044 	addi	r2,r2,1
1010e744:	10c1ffcc 	andi	r3,r2,2047
1010e748:	e0bffb17 	ldw	r2,-20(fp)
1010e74c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1010e750:	003fe206 	br	1010e6dc <__alt_data_end+0xfffee6dc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1010e754:	0001883a 	nop
1010e758:	00000106 	br	1010e760 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1010e75c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1010e760:	e0bff917 	ldw	r2,-28(fp)
1010e764:	10bfffec 	andhi	r2,r2,65535
1010e768:	10000f26 	beq	r2,zero,1010e7a8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010e76c:	e0bffb17 	ldw	r2,-20(fp)
1010e770:	10c00817 	ldw	r3,32(r2)
1010e774:	00bfff84 	movi	r2,-2
1010e778:	1886703a 	and	r3,r3,r2
1010e77c:	e0bffb17 	ldw	r2,-20(fp)
1010e780:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1010e784:	e0bffc17 	ldw	r2,-16(fp)
1010e788:	10800104 	addi	r2,r2,4
1010e78c:	1007883a 	mov	r3,r2
1010e790:	e0bffb17 	ldw	r2,-20(fp)
1010e794:	10800817 	ldw	r2,32(r2)
1010e798:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010e79c:	e0bffc17 	ldw	r2,-16(fp)
1010e7a0:	10800104 	addi	r2,r2,4
1010e7a4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1010e7a8:	e0bffd17 	ldw	r2,-12(fp)
1010e7ac:	1080800c 	andi	r2,r2,512
1010e7b0:	103fbe26 	beq	r2,zero,1010e6ac <__alt_data_end+0xfffee6ac>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1010e7b4:	e0bffd17 	ldw	r2,-12(fp)
1010e7b8:	1004d43a 	srli	r2,r2,16
1010e7bc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1010e7c0:	00001406 	br	1010e814 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1010e7c4:	e0bffc17 	ldw	r2,-16(fp)
1010e7c8:	e0fffb17 	ldw	r3,-20(fp)
1010e7cc:	18c00d17 	ldw	r3,52(r3)
1010e7d0:	e13ffb17 	ldw	r4,-20(fp)
1010e7d4:	20c7883a 	add	r3,r4,r3
1010e7d8:	18c20e04 	addi	r3,r3,2104
1010e7dc:	18c00003 	ldbu	r3,0(r3)
1010e7e0:	18c03fcc 	andi	r3,r3,255
1010e7e4:	18c0201c 	xori	r3,r3,128
1010e7e8:	18ffe004 	addi	r3,r3,-128
1010e7ec:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010e7f0:	e0bffb17 	ldw	r2,-20(fp)
1010e7f4:	10800d17 	ldw	r2,52(r2)
1010e7f8:	10800044 	addi	r2,r2,1
1010e7fc:	10c1ffcc 	andi	r3,r2,2047
1010e800:	e0bffb17 	ldw	r2,-20(fp)
1010e804:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1010e808:	e0bffa17 	ldw	r2,-24(fp)
1010e80c:	10bfffc4 	addi	r2,r2,-1
1010e810:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1010e814:	e0bffa17 	ldw	r2,-24(fp)
1010e818:	10000526 	beq	r2,zero,1010e830 <altera_avalon_jtag_uart_irq+0x1a8>
1010e81c:	e0bffb17 	ldw	r2,-20(fp)
1010e820:	10c00d17 	ldw	r3,52(r2)
1010e824:	e0bffb17 	ldw	r2,-20(fp)
1010e828:	10800c17 	ldw	r2,48(r2)
1010e82c:	18bfe51e 	bne	r3,r2,1010e7c4 <__alt_data_end+0xfffee7c4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1010e830:	e0bffa17 	ldw	r2,-24(fp)
1010e834:	103f9d26 	beq	r2,zero,1010e6ac <__alt_data_end+0xfffee6ac>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010e838:	e0bffb17 	ldw	r2,-20(fp)
1010e83c:	10c00817 	ldw	r3,32(r2)
1010e840:	00bfff44 	movi	r2,-3
1010e844:	1886703a 	and	r3,r3,r2
1010e848:	e0bffb17 	ldw	r2,-20(fp)
1010e84c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010e850:	e0bffb17 	ldw	r2,-20(fp)
1010e854:	10800017 	ldw	r2,0(r2)
1010e858:	10800104 	addi	r2,r2,4
1010e85c:	1007883a 	mov	r3,r2
1010e860:	e0bffb17 	ldw	r2,-20(fp)
1010e864:	10800817 	ldw	r2,32(r2)
1010e868:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010e86c:	e0bffc17 	ldw	r2,-16(fp)
1010e870:	10800104 	addi	r2,r2,4
1010e874:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1010e878:	003f8c06 	br	1010e6ac <__alt_data_end+0xfffee6ac>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1010e87c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
1010e880:	0001883a 	nop
1010e884:	e037883a 	mov	sp,fp
1010e888:	df000017 	ldw	fp,0(sp)
1010e88c:	dec00104 	addi	sp,sp,4
1010e890:	f800283a 	ret

1010e894 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1010e894:	defff804 	addi	sp,sp,-32
1010e898:	df000715 	stw	fp,28(sp)
1010e89c:	df000704 	addi	fp,sp,28
1010e8a0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1010e8a4:	e0bffb17 	ldw	r2,-20(fp)
1010e8a8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1010e8ac:	e0bff917 	ldw	r2,-28(fp)
1010e8b0:	10800017 	ldw	r2,0(r2)
1010e8b4:	10800104 	addi	r2,r2,4
1010e8b8:	10800037 	ldwio	r2,0(r2)
1010e8bc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1010e8c0:	e0bffa17 	ldw	r2,-24(fp)
1010e8c4:	1081000c 	andi	r2,r2,1024
1010e8c8:	10000b26 	beq	r2,zero,1010e8f8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1010e8cc:	e0bff917 	ldw	r2,-28(fp)
1010e8d0:	10800017 	ldw	r2,0(r2)
1010e8d4:	10800104 	addi	r2,r2,4
1010e8d8:	1007883a 	mov	r3,r2
1010e8dc:	e0bff917 	ldw	r2,-28(fp)
1010e8e0:	10800817 	ldw	r2,32(r2)
1010e8e4:	10810014 	ori	r2,r2,1024
1010e8e8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1010e8ec:	e0bff917 	ldw	r2,-28(fp)
1010e8f0:	10000915 	stw	zero,36(r2)
1010e8f4:	00000a06 	br	1010e920 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1010e8f8:	e0bff917 	ldw	r2,-28(fp)
1010e8fc:	10c00917 	ldw	r3,36(r2)
1010e900:	00a00034 	movhi	r2,32768
1010e904:	10bfff04 	addi	r2,r2,-4
1010e908:	10c00536 	bltu	r2,r3,1010e920 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1010e90c:	e0bff917 	ldw	r2,-28(fp)
1010e910:	10800917 	ldw	r2,36(r2)
1010e914:	10c00044 	addi	r3,r2,1
1010e918:	e0bff917 	ldw	r2,-28(fp)
1010e91c:	10c00915 	stw	r3,36(r2)
1010e920:	d0a70417 	ldw	r2,-25584(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1010e924:	e037883a 	mov	sp,fp
1010e928:	df000017 	ldw	fp,0(sp)
1010e92c:	dec00104 	addi	sp,sp,4
1010e930:	f800283a 	ret

1010e934 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1010e934:	defffd04 	addi	sp,sp,-12
1010e938:	df000215 	stw	fp,8(sp)
1010e93c:	df000204 	addi	fp,sp,8
1010e940:	e13ffe15 	stw	r4,-8(fp)
1010e944:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010e948:	00000506 	br	1010e960 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1010e94c:	e0bfff17 	ldw	r2,-4(fp)
1010e950:	1090000c 	andi	r2,r2,16384
1010e954:	10000226 	beq	r2,zero,1010e960 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1010e958:	00bffd44 	movi	r2,-11
1010e95c:	00000b06 	br	1010e98c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1010e960:	e0bffe17 	ldw	r2,-8(fp)
1010e964:	10c00d17 	ldw	r3,52(r2)
1010e968:	e0bffe17 	ldw	r2,-8(fp)
1010e96c:	10800c17 	ldw	r2,48(r2)
1010e970:	18800526 	beq	r3,r2,1010e988 <altera_avalon_jtag_uart_close+0x54>
1010e974:	e0bffe17 	ldw	r2,-8(fp)
1010e978:	10c00917 	ldw	r3,36(r2)
1010e97c:	e0bffe17 	ldw	r2,-8(fp)
1010e980:	10800117 	ldw	r2,4(r2)
1010e984:	18bff136 	bltu	r3,r2,1010e94c <__alt_data_end+0xfffee94c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1010e988:	0005883a 	mov	r2,zero
}
1010e98c:	e037883a 	mov	sp,fp
1010e990:	df000017 	ldw	fp,0(sp)
1010e994:	dec00104 	addi	sp,sp,4
1010e998:	f800283a 	ret

1010e99c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1010e99c:	defffa04 	addi	sp,sp,-24
1010e9a0:	df000515 	stw	fp,20(sp)
1010e9a4:	df000504 	addi	fp,sp,20
1010e9a8:	e13ffd15 	stw	r4,-12(fp)
1010e9ac:	e17ffe15 	stw	r5,-8(fp)
1010e9b0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1010e9b4:	00bff9c4 	movi	r2,-25
1010e9b8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1010e9bc:	e0bffe17 	ldw	r2,-8(fp)
1010e9c0:	10da8060 	cmpeqi	r3,r2,27137
1010e9c4:	1800031e 	bne	r3,zero,1010e9d4 <altera_avalon_jtag_uart_ioctl+0x38>
1010e9c8:	109a80a0 	cmpeqi	r2,r2,27138
1010e9cc:	1000181e 	bne	r2,zero,1010ea30 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
1010e9d0:	00002906 	br	1010ea78 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1010e9d4:	e0bffd17 	ldw	r2,-12(fp)
1010e9d8:	10c00117 	ldw	r3,4(r2)
1010e9dc:	00a00034 	movhi	r2,32768
1010e9e0:	10bfffc4 	addi	r2,r2,-1
1010e9e4:	18802126 	beq	r3,r2,1010ea6c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1010e9e8:	e0bfff17 	ldw	r2,-4(fp)
1010e9ec:	10800017 	ldw	r2,0(r2)
1010e9f0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1010e9f4:	e0bffc17 	ldw	r2,-16(fp)
1010e9f8:	10800090 	cmplti	r2,r2,2
1010e9fc:	1000061e 	bne	r2,zero,1010ea18 <altera_avalon_jtag_uart_ioctl+0x7c>
1010ea00:	e0fffc17 	ldw	r3,-16(fp)
1010ea04:	00a00034 	movhi	r2,32768
1010ea08:	10bfffc4 	addi	r2,r2,-1
1010ea0c:	18800226 	beq	r3,r2,1010ea18 <altera_avalon_jtag_uart_ioctl+0x7c>
1010ea10:	e0bffc17 	ldw	r2,-16(fp)
1010ea14:	00000206 	br	1010ea20 <altera_avalon_jtag_uart_ioctl+0x84>
1010ea18:	00a00034 	movhi	r2,32768
1010ea1c:	10bfff84 	addi	r2,r2,-2
1010ea20:	e0fffd17 	ldw	r3,-12(fp)
1010ea24:	18800115 	stw	r2,4(r3)
      rc = 0;
1010ea28:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010ea2c:	00000f06 	br	1010ea6c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1010ea30:	e0bffd17 	ldw	r2,-12(fp)
1010ea34:	10c00117 	ldw	r3,4(r2)
1010ea38:	00a00034 	movhi	r2,32768
1010ea3c:	10bfffc4 	addi	r2,r2,-1
1010ea40:	18800c26 	beq	r3,r2,1010ea74 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1010ea44:	e0bffd17 	ldw	r2,-12(fp)
1010ea48:	10c00917 	ldw	r3,36(r2)
1010ea4c:	e0bffd17 	ldw	r2,-12(fp)
1010ea50:	10800117 	ldw	r2,4(r2)
1010ea54:	1885803a 	cmpltu	r2,r3,r2
1010ea58:	10c03fcc 	andi	r3,r2,255
1010ea5c:	e0bfff17 	ldw	r2,-4(fp)
1010ea60:	10c00015 	stw	r3,0(r2)
      rc = 0;
1010ea64:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010ea68:	00000206 	br	1010ea74 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1010ea6c:	0001883a 	nop
1010ea70:	00000106 	br	1010ea78 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1010ea74:	0001883a 	nop

  default:
    break;
  }

  return rc;
1010ea78:	e0bffb17 	ldw	r2,-20(fp)
}
1010ea7c:	e037883a 	mov	sp,fp
1010ea80:	df000017 	ldw	fp,0(sp)
1010ea84:	dec00104 	addi	sp,sp,4
1010ea88:	f800283a 	ret

1010ea8c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1010ea8c:	defff304 	addi	sp,sp,-52
1010ea90:	dfc00c15 	stw	ra,48(sp)
1010ea94:	df000b15 	stw	fp,44(sp)
1010ea98:	df000b04 	addi	fp,sp,44
1010ea9c:	e13ffc15 	stw	r4,-16(fp)
1010eaa0:	e17ffd15 	stw	r5,-12(fp)
1010eaa4:	e1bffe15 	stw	r6,-8(fp)
1010eaa8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1010eaac:	e0bffd17 	ldw	r2,-12(fp)
1010eab0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010eab4:	00004706 	br	1010ebd4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1010eab8:	e0bffc17 	ldw	r2,-16(fp)
1010eabc:	10800a17 	ldw	r2,40(r2)
1010eac0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1010eac4:	e0bffc17 	ldw	r2,-16(fp)
1010eac8:	10800b17 	ldw	r2,44(r2)
1010eacc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1010ead0:	e0fff717 	ldw	r3,-36(fp)
1010ead4:	e0bff817 	ldw	r2,-32(fp)
1010ead8:	18800536 	bltu	r3,r2,1010eaf0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1010eadc:	e0fff717 	ldw	r3,-36(fp)
1010eae0:	e0bff817 	ldw	r2,-32(fp)
1010eae4:	1885c83a 	sub	r2,r3,r2
1010eae8:	e0bff615 	stw	r2,-40(fp)
1010eaec:	00000406 	br	1010eb00 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1010eaf0:	00c20004 	movi	r3,2048
1010eaf4:	e0bff817 	ldw	r2,-32(fp)
1010eaf8:	1885c83a 	sub	r2,r3,r2
1010eafc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010eb00:	e0bff617 	ldw	r2,-40(fp)
1010eb04:	10001e26 	beq	r2,zero,1010eb80 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
1010eb08:	e0fffe17 	ldw	r3,-8(fp)
1010eb0c:	e0bff617 	ldw	r2,-40(fp)
1010eb10:	1880022e 	bgeu	r3,r2,1010eb1c <altera_avalon_jtag_uart_read+0x90>
        n = space;
1010eb14:	e0bffe17 	ldw	r2,-8(fp)
1010eb18:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1010eb1c:	e0bffc17 	ldw	r2,-16(fp)
1010eb20:	10c00e04 	addi	r3,r2,56
1010eb24:	e0bff817 	ldw	r2,-32(fp)
1010eb28:	1885883a 	add	r2,r3,r2
1010eb2c:	e1bff617 	ldw	r6,-40(fp)
1010eb30:	100b883a 	mov	r5,r2
1010eb34:	e13ff517 	ldw	r4,-44(fp)
1010eb38:	0100cac0 	call	10100cac <memcpy>
      ptr   += n;
1010eb3c:	e0fff517 	ldw	r3,-44(fp)
1010eb40:	e0bff617 	ldw	r2,-40(fp)
1010eb44:	1885883a 	add	r2,r3,r2
1010eb48:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1010eb4c:	e0fffe17 	ldw	r3,-8(fp)
1010eb50:	e0bff617 	ldw	r2,-40(fp)
1010eb54:	1885c83a 	sub	r2,r3,r2
1010eb58:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010eb5c:	e0fff817 	ldw	r3,-32(fp)
1010eb60:	e0bff617 	ldw	r2,-40(fp)
1010eb64:	1885883a 	add	r2,r3,r2
1010eb68:	10c1ffcc 	andi	r3,r2,2047
1010eb6c:	e0bffc17 	ldw	r2,-16(fp)
1010eb70:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1010eb74:	e0bffe17 	ldw	r2,-8(fp)
1010eb78:	00bfcf16 	blt	zero,r2,1010eab8 <__alt_data_end+0xfffeeab8>
1010eb7c:	00000106 	br	1010eb84 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
1010eb80:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1010eb84:	e0fff517 	ldw	r3,-44(fp)
1010eb88:	e0bffd17 	ldw	r2,-12(fp)
1010eb8c:	1880141e 	bne	r3,r2,1010ebe0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1010eb90:	e0bfff17 	ldw	r2,-4(fp)
1010eb94:	1090000c 	andi	r2,r2,16384
1010eb98:	1000131e 	bne	r2,zero,1010ebe8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1010eb9c:	0001883a 	nop
1010eba0:	e0bffc17 	ldw	r2,-16(fp)
1010eba4:	10c00a17 	ldw	r3,40(r2)
1010eba8:	e0bff717 	ldw	r2,-36(fp)
1010ebac:	1880051e 	bne	r3,r2,1010ebc4 <altera_avalon_jtag_uart_read+0x138>
1010ebb0:	e0bffc17 	ldw	r2,-16(fp)
1010ebb4:	10c00917 	ldw	r3,36(r2)
1010ebb8:	e0bffc17 	ldw	r2,-16(fp)
1010ebbc:	10800117 	ldw	r2,4(r2)
1010ebc0:	18bff736 	bltu	r3,r2,1010eba0 <__alt_data_end+0xfffeeba0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1010ebc4:	e0bffc17 	ldw	r2,-16(fp)
1010ebc8:	10c00a17 	ldw	r3,40(r2)
1010ebcc:	e0bff717 	ldw	r2,-36(fp)
1010ebd0:	18800726 	beq	r3,r2,1010ebf0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1010ebd4:	e0bffe17 	ldw	r2,-8(fp)
1010ebd8:	00bfb716 	blt	zero,r2,1010eab8 <__alt_data_end+0xfffeeab8>
1010ebdc:	00000506 	br	1010ebf4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
1010ebe0:	0001883a 	nop
1010ebe4:	00000306 	br	1010ebf4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
1010ebe8:	0001883a 	nop
1010ebec:	00000106 	br	1010ebf4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
1010ebf0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1010ebf4:	e0fff517 	ldw	r3,-44(fp)
1010ebf8:	e0bffd17 	ldw	r2,-12(fp)
1010ebfc:	18801826 	beq	r3,r2,1010ec60 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010ec00:	0005303a 	rdctl	r2,status
1010ec04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010ec08:	e0fffb17 	ldw	r3,-20(fp)
1010ec0c:	00bfff84 	movi	r2,-2
1010ec10:	1884703a 	and	r2,r3,r2
1010ec14:	1001703a 	wrctl	status,r2
  
  return context;
1010ec18:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1010ec1c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010ec20:	e0bffc17 	ldw	r2,-16(fp)
1010ec24:	10800817 	ldw	r2,32(r2)
1010ec28:	10c00054 	ori	r3,r2,1
1010ec2c:	e0bffc17 	ldw	r2,-16(fp)
1010ec30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010ec34:	e0bffc17 	ldw	r2,-16(fp)
1010ec38:	10800017 	ldw	r2,0(r2)
1010ec3c:	10800104 	addi	r2,r2,4
1010ec40:	1007883a 	mov	r3,r2
1010ec44:	e0bffc17 	ldw	r2,-16(fp)
1010ec48:	10800817 	ldw	r2,32(r2)
1010ec4c:	18800035 	stwio	r2,0(r3)
1010ec50:	e0bffa17 	ldw	r2,-24(fp)
1010ec54:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010ec58:	e0bff917 	ldw	r2,-28(fp)
1010ec5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1010ec60:	e0fff517 	ldw	r3,-44(fp)
1010ec64:	e0bffd17 	ldw	r2,-12(fp)
1010ec68:	18800426 	beq	r3,r2,1010ec7c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
1010ec6c:	e0fff517 	ldw	r3,-44(fp)
1010ec70:	e0bffd17 	ldw	r2,-12(fp)
1010ec74:	1885c83a 	sub	r2,r3,r2
1010ec78:	00000606 	br	1010ec94 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
1010ec7c:	e0bfff17 	ldw	r2,-4(fp)
1010ec80:	1090000c 	andi	r2,r2,16384
1010ec84:	10000226 	beq	r2,zero,1010ec90 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
1010ec88:	00bffd44 	movi	r2,-11
1010ec8c:	00000106 	br	1010ec94 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
1010ec90:	00bffec4 	movi	r2,-5
}
1010ec94:	e037883a 	mov	sp,fp
1010ec98:	dfc00117 	ldw	ra,4(sp)
1010ec9c:	df000017 	ldw	fp,0(sp)
1010eca0:	dec00204 	addi	sp,sp,8
1010eca4:	f800283a 	ret

1010eca8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1010eca8:	defff304 	addi	sp,sp,-52
1010ecac:	dfc00c15 	stw	ra,48(sp)
1010ecb0:	df000b15 	stw	fp,44(sp)
1010ecb4:	df000b04 	addi	fp,sp,44
1010ecb8:	e13ffc15 	stw	r4,-16(fp)
1010ecbc:	e17ffd15 	stw	r5,-12(fp)
1010ecc0:	e1bffe15 	stw	r6,-8(fp)
1010ecc4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1010ecc8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1010eccc:	e0bffd17 	ldw	r2,-12(fp)
1010ecd0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010ecd4:	00003706 	br	1010edb4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1010ecd8:	e0bffc17 	ldw	r2,-16(fp)
1010ecdc:	10800c17 	ldw	r2,48(r2)
1010ece0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
1010ece4:	e0bffc17 	ldw	r2,-16(fp)
1010ece8:	10800d17 	ldw	r2,52(r2)
1010ecec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1010ecf0:	e0fff917 	ldw	r3,-28(fp)
1010ecf4:	e0bff517 	ldw	r2,-44(fp)
1010ecf8:	1880062e 	bgeu	r3,r2,1010ed14 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1010ecfc:	e0fff517 	ldw	r3,-44(fp)
1010ed00:	e0bff917 	ldw	r2,-28(fp)
1010ed04:	1885c83a 	sub	r2,r3,r2
1010ed08:	10bfffc4 	addi	r2,r2,-1
1010ed0c:	e0bff615 	stw	r2,-40(fp)
1010ed10:	00000b06 	br	1010ed40 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1010ed14:	e0bff517 	ldw	r2,-44(fp)
1010ed18:	10000526 	beq	r2,zero,1010ed30 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1010ed1c:	00c20004 	movi	r3,2048
1010ed20:	e0bff917 	ldw	r2,-28(fp)
1010ed24:	1885c83a 	sub	r2,r3,r2
1010ed28:	e0bff615 	stw	r2,-40(fp)
1010ed2c:	00000406 	br	1010ed40 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1010ed30:	00c1ffc4 	movi	r3,2047
1010ed34:	e0bff917 	ldw	r2,-28(fp)
1010ed38:	1885c83a 	sub	r2,r3,r2
1010ed3c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1010ed40:	e0bff617 	ldw	r2,-40(fp)
1010ed44:	10001e26 	beq	r2,zero,1010edc0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
1010ed48:	e0fffe17 	ldw	r3,-8(fp)
1010ed4c:	e0bff617 	ldw	r2,-40(fp)
1010ed50:	1880022e 	bgeu	r3,r2,1010ed5c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1010ed54:	e0bffe17 	ldw	r2,-8(fp)
1010ed58:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1010ed5c:	e0bffc17 	ldw	r2,-16(fp)
1010ed60:	10c20e04 	addi	r3,r2,2104
1010ed64:	e0bff917 	ldw	r2,-28(fp)
1010ed68:	1885883a 	add	r2,r3,r2
1010ed6c:	e1bff617 	ldw	r6,-40(fp)
1010ed70:	e17ffd17 	ldw	r5,-12(fp)
1010ed74:	1009883a 	mov	r4,r2
1010ed78:	0100cac0 	call	10100cac <memcpy>
      ptr   += n;
1010ed7c:	e0fffd17 	ldw	r3,-12(fp)
1010ed80:	e0bff617 	ldw	r2,-40(fp)
1010ed84:	1885883a 	add	r2,r3,r2
1010ed88:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1010ed8c:	e0fffe17 	ldw	r3,-8(fp)
1010ed90:	e0bff617 	ldw	r2,-40(fp)
1010ed94:	1885c83a 	sub	r2,r3,r2
1010ed98:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010ed9c:	e0fff917 	ldw	r3,-28(fp)
1010eda0:	e0bff617 	ldw	r2,-40(fp)
1010eda4:	1885883a 	add	r2,r3,r2
1010eda8:	10c1ffcc 	andi	r3,r2,2047
1010edac:	e0bffc17 	ldw	r2,-16(fp)
1010edb0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1010edb4:	e0bffe17 	ldw	r2,-8(fp)
1010edb8:	00bfc716 	blt	zero,r2,1010ecd8 <__alt_data_end+0xfffeecd8>
1010edbc:	00000106 	br	1010edc4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
1010edc0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010edc4:	0005303a 	rdctl	r2,status
1010edc8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010edcc:	e0fffb17 	ldw	r3,-20(fp)
1010edd0:	00bfff84 	movi	r2,-2
1010edd4:	1884703a 	and	r2,r3,r2
1010edd8:	1001703a 	wrctl	status,r2
  
  return context;
1010eddc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1010ede0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1010ede4:	e0bffc17 	ldw	r2,-16(fp)
1010ede8:	10800817 	ldw	r2,32(r2)
1010edec:	10c00094 	ori	r3,r2,2
1010edf0:	e0bffc17 	ldw	r2,-16(fp)
1010edf4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1010edf8:	e0bffc17 	ldw	r2,-16(fp)
1010edfc:	10800017 	ldw	r2,0(r2)
1010ee00:	10800104 	addi	r2,r2,4
1010ee04:	1007883a 	mov	r3,r2
1010ee08:	e0bffc17 	ldw	r2,-16(fp)
1010ee0c:	10800817 	ldw	r2,32(r2)
1010ee10:	18800035 	stwio	r2,0(r3)
1010ee14:	e0bffa17 	ldw	r2,-24(fp)
1010ee18:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010ee1c:	e0bff817 	ldw	r2,-32(fp)
1010ee20:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
1010ee24:	e0bffe17 	ldw	r2,-8(fp)
1010ee28:	0080100e 	bge	zero,r2,1010ee6c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
1010ee2c:	e0bfff17 	ldw	r2,-4(fp)
1010ee30:	1090000c 	andi	r2,r2,16384
1010ee34:	1000101e 	bne	r2,zero,1010ee78 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1010ee38:	0001883a 	nop
1010ee3c:	e0bffc17 	ldw	r2,-16(fp)
1010ee40:	10c00d17 	ldw	r3,52(r2)
1010ee44:	e0bff517 	ldw	r2,-44(fp)
1010ee48:	1880051e 	bne	r3,r2,1010ee60 <altera_avalon_jtag_uart_write+0x1b8>
1010ee4c:	e0bffc17 	ldw	r2,-16(fp)
1010ee50:	10c00917 	ldw	r3,36(r2)
1010ee54:	e0bffc17 	ldw	r2,-16(fp)
1010ee58:	10800117 	ldw	r2,4(r2)
1010ee5c:	18bff736 	bltu	r3,r2,1010ee3c <__alt_data_end+0xfffeee3c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
1010ee60:	e0bffc17 	ldw	r2,-16(fp)
1010ee64:	10800917 	ldw	r2,36(r2)
1010ee68:	1000051e 	bne	r2,zero,1010ee80 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
1010ee6c:	e0bffe17 	ldw	r2,-8(fp)
1010ee70:	00bfd016 	blt	zero,r2,1010edb4 <__alt_data_end+0xfffeedb4>
1010ee74:	00000306 	br	1010ee84 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
1010ee78:	0001883a 	nop
1010ee7c:	00000106 	br	1010ee84 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
1010ee80:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1010ee84:	e0fffd17 	ldw	r3,-12(fp)
1010ee88:	e0bff717 	ldw	r2,-36(fp)
1010ee8c:	18800426 	beq	r3,r2,1010eea0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
1010ee90:	e0fffd17 	ldw	r3,-12(fp)
1010ee94:	e0bff717 	ldw	r2,-36(fp)
1010ee98:	1885c83a 	sub	r2,r3,r2
1010ee9c:	00000606 	br	1010eeb8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
1010eea0:	e0bfff17 	ldw	r2,-4(fp)
1010eea4:	1090000c 	andi	r2,r2,16384
1010eea8:	10000226 	beq	r2,zero,1010eeb4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
1010eeac:	00bffd44 	movi	r2,-11
1010eeb0:	00000106 	br	1010eeb8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1010eeb4:	00bffec4 	movi	r2,-5
}
1010eeb8:	e037883a 	mov	sp,fp
1010eebc:	dfc00117 	ldw	ra,4(sp)
1010eec0:	df000017 	ldw	fp,0(sp)
1010eec4:	dec00204 	addi	sp,sp,8
1010eec8:	f800283a 	ret

1010eecc <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
1010eecc:	defff404 	addi	sp,sp,-48
1010eed0:	df000b15 	stw	fp,44(sp)
1010eed4:	df000b04 	addi	fp,sp,44
1010eed8:	e13ffc15 	stw	r4,-16(fp)
1010eedc:	e17ffd15 	stw	r5,-12(fp)
1010eee0:	e1bffe15 	stw	r6,-8(fp)
1010eee4:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
1010eee8:	e0bffc17 	ldw	r2,-16(fp)
1010eeec:	10800017 	ldw	r2,0(r2)
1010eef0:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1010eef4:	e0bff517 	ldw	r2,-44(fp)
1010eef8:	10800217 	ldw	r2,8(r2)
1010eefc:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
1010ef00:	e0bff617 	ldw	r2,-40(fp)
1010ef04:	10bfffc4 	addi	r2,r2,-1
1010ef08:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
1010ef0c:	e0bffb17 	ldw	r2,-20(fp)
1010ef10:	10800044 	addi	r2,r2,1
1010ef14:	e0bffb15 	stw	r2,-20(fp)
1010ef18:	e0bffb17 	ldw	r2,-20(fp)
1010ef1c:	10800003 	ldbu	r2,0(r2)
1010ef20:	10803fcc 	andi	r2,r2,255
1010ef24:	1080201c 	xori	r2,r2,128
1010ef28:	10bfe004 	addi	r2,r2,-128
1010ef2c:	103ff71e 	bne	r2,zero,1010ef0c <__alt_data_end+0xfffeef0c>
    ;

  return ptr - string;
1010ef30:	e0fffb17 	ldw	r3,-20(fp)
1010ef34:	e0bff617 	ldw	r2,-40(fp)
1010ef38:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1010ef3c:	10800044 	addi	r2,r2,1
1010ef40:	1007883a 	mov	r3,r2
1010ef44:	e0bffd17 	ldw	r2,-12(fp)
1010ef48:	10c5883a 	add	r2,r2,r3
1010ef4c:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
1010ef50:	d0a00d04 	addi	r2,gp,-32716
1010ef54:	1007883a 	mov	r3,r2
  r4 = (int)name;
1010ef58:	e0bffd17 	ldw	r2,-12(fp)
1010ef5c:	1009883a 	mov	r4,r2
  r5 = flags;
1010ef60:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
1010ef64:	e1bfff17 	ldw	r6,-4(fp)
1010ef68:	e0bffd17 	ldw	r2,-12(fp)
1010ef6c:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
1010ef70:	e0bff917 	ldw	r2,-28(fp)
1010ef74:	10bfffc4 	addi	r2,r2,-1
1010ef78:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
1010ef7c:	e0bffa17 	ldw	r2,-24(fp)
1010ef80:	10800044 	addi	r2,r2,1
1010ef84:	e0bffa15 	stw	r2,-24(fp)
1010ef88:	e0bffa17 	ldw	r2,-24(fp)
1010ef8c:	10800003 	ldbu	r2,0(r2)
1010ef90:	10803fcc 	andi	r2,r2,255
1010ef94:	1080201c 	xori	r2,r2,128
1010ef98:	10bfe004 	addi	r2,r2,-128
1010ef9c:	103ff71e 	bne	r2,zero,1010ef7c <__alt_data_end+0xfffeef7c>
    ;

  return ptr - string;
1010efa0:	e1fffa17 	ldw	r7,-24(fp)
1010efa4:	e0bff917 	ldw	r2,-28(fp)
1010efa8:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
1010efac:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
1010efb0:	003da07a 	break	1

  handle = (void *)r2;
1010efb4:	e0bff715 	stw	r2,-36(fp)
  error = r3;
1010efb8:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
1010efbc:	e0bff817 	ldw	r2,-32(fp)
1010efc0:	1000031e 	bne	r2,zero,1010efd0 <alt_hostfs_open+0x104>
    fd->priv = handle;
1010efc4:	e0bffc17 	ldw	r2,-16(fp)
1010efc8:	e0fff717 	ldw	r3,-36(fp)
1010efcc:	10c00115 	stw	r3,4(r2)

  return -error;
1010efd0:	e0bff817 	ldw	r2,-32(fp)
1010efd4:	0085c83a 	sub	r2,zero,r2
}
1010efd8:	e037883a 	mov	sp,fp
1010efdc:	df000017 	ldw	fp,0(sp)
1010efe0:	dec00104 	addi	sp,sp,4
1010efe4:	f800283a 	ret

1010efe8 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
1010efe8:	defffd04 	addi	sp,sp,-12
1010efec:	df000215 	stw	fp,8(sp)
1010eff0:	df000204 	addi	fp,sp,8
1010eff4:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
1010eff8:	d0a01004 	addi	r2,gp,-32704
1010effc:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010f000:	e0bfff17 	ldw	r2,-4(fp)
1010f004:	10800117 	ldw	r2,4(r2)
1010f008:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
1010f00c:	003da07a 	break	1

  error = r3;
1010f010:	e0fffe15 	stw	r3,-8(fp)

  return -error;
1010f014:	e0bffe17 	ldw	r2,-8(fp)
1010f018:	0085c83a 	sub	r2,zero,r2
}
1010f01c:	e037883a 	mov	sp,fp
1010f020:	df000017 	ldw	fp,0(sp)
1010f024:	dec00104 	addi	sp,sp,4
1010f028:	f800283a 	ret

1010f02c <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
1010f02c:	defffa04 	addi	sp,sp,-24
1010f030:	df000515 	stw	fp,20(sp)
1010f034:	df000504 	addi	fp,sp,20
1010f038:	e13ffd15 	stw	r4,-12(fp)
1010f03c:	e17ffe15 	stw	r5,-8(fp)
1010f040:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
1010f044:	d0a01304 	addi	r2,gp,-32692
1010f048:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010f04c:	e0bffd17 	ldw	r2,-12(fp)
1010f050:	10800117 	ldw	r2,4(r2)
1010f054:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1010f058:	e0bffe17 	ldw	r2,-8(fp)
1010f05c:	100b883a 	mov	r5,r2
  r6 = len;
1010f060:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010f064:	003da07a 	break	1

  rc = r2;
1010f068:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010f06c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010f070:	e0bffc17 	ldw	r2,-16(fp)
1010f074:	10000326 	beq	r2,zero,1010f084 <alt_hostfs_read+0x58>
1010f078:	e0bffc17 	ldw	r2,-16(fp)
1010f07c:	0085c83a 	sub	r2,zero,r2
1010f080:	00000106 	br	1010f088 <alt_hostfs_read+0x5c>
1010f084:	e0bffb17 	ldw	r2,-20(fp)
}
1010f088:	e037883a 	mov	sp,fp
1010f08c:	df000017 	ldw	fp,0(sp)
1010f090:	dec00104 	addi	sp,sp,4
1010f094:	f800283a 	ret

1010f098 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
1010f098:	defffa04 	addi	sp,sp,-24
1010f09c:	df000515 	stw	fp,20(sp)
1010f0a0:	df000504 	addi	fp,sp,20
1010f0a4:	e13ffd15 	stw	r4,-12(fp)
1010f0a8:	e17ffe15 	stw	r5,-8(fp)
1010f0ac:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
1010f0b0:	d0a01604 	addi	r2,gp,-32680
1010f0b4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010f0b8:	e0bffd17 	ldw	r2,-12(fp)
1010f0bc:	10800117 	ldw	r2,4(r2)
1010f0c0:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1010f0c4:	e0bffe17 	ldw	r2,-8(fp)
1010f0c8:	100b883a 	mov	r5,r2
  r6 = len;
1010f0cc:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010f0d0:	003da07a 	break	1

  rc = r2;
1010f0d4:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010f0d8:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010f0dc:	e0bffc17 	ldw	r2,-16(fp)
1010f0e0:	10000326 	beq	r2,zero,1010f0f0 <alt_hostfs_write+0x58>
1010f0e4:	e0bffc17 	ldw	r2,-16(fp)
1010f0e8:	0085c83a 	sub	r2,zero,r2
1010f0ec:	00000106 	br	1010f0f4 <alt_hostfs_write+0x5c>
1010f0f0:	e0bffb17 	ldw	r2,-20(fp)
}
1010f0f4:	e037883a 	mov	sp,fp
1010f0f8:	df000017 	ldw	fp,0(sp)
1010f0fc:	dec00104 	addi	sp,sp,4
1010f100:	f800283a 	ret

1010f104 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
1010f104:	defffa04 	addi	sp,sp,-24
1010f108:	df000515 	stw	fp,20(sp)
1010f10c:	df000504 	addi	fp,sp,20
1010f110:	e13ffd15 	stw	r4,-12(fp)
1010f114:	e17ffe15 	stw	r5,-8(fp)
1010f118:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
1010f11c:	d0a01904 	addi	r2,gp,-32668
1010f120:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010f124:	e0bffd17 	ldw	r2,-12(fp)
1010f128:	10800117 	ldw	r2,4(r2)
1010f12c:	1009883a 	mov	r4,r2
  r5 = ptr;
1010f130:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
1010f134:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1010f138:	003da07a 	break	1

  rc = r2;
1010f13c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1010f140:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
1010f144:	e0bffc17 	ldw	r2,-16(fp)
1010f148:	10000326 	beq	r2,zero,1010f158 <alt_hostfs_seek+0x54>
1010f14c:	e0bffc17 	ldw	r2,-16(fp)
1010f150:	0085c83a 	sub	r2,zero,r2
1010f154:	00000106 	br	1010f15c <alt_hostfs_seek+0x58>
1010f158:	e0bffb17 	ldw	r2,-20(fp)
}
1010f15c:	e037883a 	mov	sp,fp
1010f160:	df000017 	ldw	fp,0(sp)
1010f164:	dec00104 	addi	sp,sp,4
1010f168:	f800283a 	ret

1010f16c <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
1010f16c:	deffe904 	addi	sp,sp,-92
1010f170:	df001615 	stw	fp,88(sp)
1010f174:	df001604 	addi	fp,sp,88
1010f178:	e13ffe15 	stw	r4,-8(fp)
1010f17c:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
1010f180:	d0a01c04 	addi	r2,gp,-32656
1010f184:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1010f188:	e0bffe17 	ldw	r2,-8(fp)
1010f18c:	10800117 	ldw	r2,4(r2)
1010f190:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
1010f194:	e0bfee04 	addi	r2,fp,-72
1010f198:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
1010f19c:	003da07a 	break	1

  rc = r2;
1010f1a0:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
1010f1a4:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
1010f1a8:	e0bfec17 	ldw	r2,-80(fp)
1010f1ac:	1000621e 	bne	r2,zero,1010f338 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
1010f1b0:	e0bfee04 	addi	r2,fp,-72
1010f1b4:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
1010f1b8:	e0bfea17 	ldw	r2,-88(fp)
1010f1bc:	10801004 	addi	r2,r2,64
1010f1c0:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1010f1c4:	00001606 	br	1010f220 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010f1c8:	e0bfea17 	ldw	r2,-88(fp)
1010f1cc:	10800017 	ldw	r2,0(r2)
1010f1d0:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
1010f1d4:	e0bfea17 	ldw	r2,-88(fp)
1010f1d8:	10800017 	ldw	r2,0(r2)
1010f1dc:	10803fec 	andhi	r2,r2,255
1010f1e0:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010f1e4:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1010f1e8:	e0bfea17 	ldw	r2,-88(fp)
1010f1ec:	10800017 	ldw	r2,0(r2)
1010f1f0:	10bfc00c 	andi	r2,r2,65280
1010f1f4:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
1010f1f8:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
1010f1fc:	e0bfea17 	ldw	r2,-88(fp)
1010f200:	10800017 	ldw	r2,0(r2)
1010f204:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1010f208:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010f20c:	e0bfea17 	ldw	r2,-88(fp)
1010f210:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
1010f214:	e0bfea17 	ldw	r2,-88(fp)
1010f218:	10800104 	addi	r2,r2,4
1010f21c:	e0bfea15 	stw	r2,-88(fp)
1010f220:	e0ffea17 	ldw	r3,-88(fp)
1010f224:	e0bfed17 	ldw	r2,-76(fp)
1010f228:	18bfe736 	bltu	r3,r2,1010f1c8 <__alt_data_end+0xfffef1c8>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
1010f22c:	e0bfff17 	ldw	r2,-4(fp)
1010f230:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
1010f234:	e0bfea17 	ldw	r2,-88(fp)
1010f238:	10800f04 	addi	r2,r2,60
1010f23c:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1010f240:	00000506 	br	1010f258 <alt_hostfs_fstat+0xec>
      *ptr = 0;
1010f244:	e0bfea17 	ldw	r2,-88(fp)
1010f248:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
1010f24c:	e0bfea17 	ldw	r2,-88(fp)
1010f250:	10800104 	addi	r2,r2,4
1010f254:	e0bfea15 	stw	r2,-88(fp)
1010f258:	e0ffea17 	ldw	r3,-88(fp)
1010f25c:	e0bfed17 	ldw	r2,-76(fp)
1010f260:	18bff836 	bltu	r3,r2,1010f244 <__alt_data_end+0xfffef244>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
1010f264:	e0bfee17 	ldw	r2,-72(fp)
1010f268:	1007883a 	mov	r3,r2
1010f26c:	e0bfff17 	ldw	r2,-4(fp)
1010f270:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
1010f274:	e0bfef17 	ldw	r2,-68(fp)
1010f278:	1007883a 	mov	r3,r2
1010f27c:	e0bfff17 	ldw	r2,-4(fp)
1010f280:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
1010f284:	e0fff017 	ldw	r3,-64(fp)
1010f288:	e0bfff17 	ldw	r2,-4(fp)
1010f28c:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
1010f290:	e0bff117 	ldw	r2,-60(fp)
1010f294:	1007883a 	mov	r3,r2
1010f298:	e0bfff17 	ldw	r2,-4(fp)
1010f29c:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
1010f2a0:	e0bff217 	ldw	r2,-56(fp)
1010f2a4:	1007883a 	mov	r3,r2
1010f2a8:	e0bfff17 	ldw	r2,-4(fp)
1010f2ac:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
1010f2b0:	e0bff317 	ldw	r2,-52(fp)
1010f2b4:	1007883a 	mov	r3,r2
1010f2b8:	e0bfff17 	ldw	r2,-4(fp)
1010f2bc:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
1010f2c0:	e0bff417 	ldw	r2,-48(fp)
1010f2c4:	1007883a 	mov	r3,r2
1010f2c8:	e0bfff17 	ldw	r2,-4(fp)
1010f2cc:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
1010f2d0:	e0bff617 	ldw	r2,-40(fp)
1010f2d4:	1007883a 	mov	r3,r2
1010f2d8:	e0bfff17 	ldw	r2,-4(fp)
1010f2dc:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
1010f2e0:	e0bffb17 	ldw	r2,-20(fp)
1010f2e4:	1007883a 	mov	r3,r2
1010f2e8:	e0bfff17 	ldw	r2,-4(fp)
1010f2ec:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
1010f2f0:	e0bffc17 	ldw	r2,-16(fp)
1010f2f4:	1007883a 	mov	r3,r2
1010f2f8:	e0bfff17 	ldw	r2,-4(fp)
1010f2fc:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
1010f300:	e0bffd17 	ldw	r2,-12(fp)
1010f304:	1007883a 	mov	r3,r2
1010f308:	e0bfff17 	ldw	r2,-4(fp)
1010f30c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
1010f310:	e0bff817 	ldw	r2,-32(fp)
1010f314:	1007883a 	mov	r3,r2
1010f318:	e0bfff17 	ldw	r2,-4(fp)
1010f31c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
1010f320:	e0bffa17 	ldw	r2,-24(fp)
1010f324:	1007883a 	mov	r3,r2
1010f328:	e0bfff17 	ldw	r2,-4(fp)
1010f32c:	10c00c15 	stw	r3,48(r2)

    return rc;
1010f330:	e0bfeb17 	ldw	r2,-84(fp)
1010f334:	00000206 	br	1010f340 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
1010f338:	e0bfec17 	ldw	r2,-80(fp)
1010f33c:	0085c83a 	sub	r2,zero,r2
}
1010f340:	e037883a 	mov	sp,fp
1010f344:	df000017 	ldw	fp,0(sp)
1010f348:	dec00104 	addi	sp,sp,4
1010f34c:	f800283a 	ret

1010f350 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
1010f350:	defff504 	addi	sp,sp,-44
1010f354:	df000a15 	stw	fp,40(sp)
1010f358:	df000a04 	addi	fp,sp,40
1010f35c:	e13ffc15 	stw	r4,-16(fp)
1010f360:	e17ffd15 	stw	r5,-12(fp)
1010f364:	e1bffe15 	stw	r6,-8(fp)
1010f368:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1010f36c:	e03ff615 	stw	zero,-40(fp)
1010f370:	d0a70417 	ldw	r2,-25584(gp)
  
  if (alt_ticks_per_second ())
1010f374:	10003c26 	beq	r2,zero,1010f468 <alt_alarm_start+0x118>
  {
    if (alarm)
1010f378:	e0bffc17 	ldw	r2,-16(fp)
1010f37c:	10003826 	beq	r2,zero,1010f460 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
1010f380:	e0bffc17 	ldw	r2,-16(fp)
1010f384:	e0fffe17 	ldw	r3,-8(fp)
1010f388:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1010f38c:	e0bffc17 	ldw	r2,-16(fp)
1010f390:	e0ffff17 	ldw	r3,-4(fp)
1010f394:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f398:	0005303a 	rdctl	r2,status
1010f39c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f3a0:	e0fff917 	ldw	r3,-28(fp)
1010f3a4:	00bfff84 	movi	r2,-2
1010f3a8:	1884703a 	and	r2,r3,r2
1010f3ac:	1001703a 	wrctl	status,r2
  
  return context;
1010f3b0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
1010f3b4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
1010f3b8:	d0a70517 	ldw	r2,-25580(gp)
      
      current_nticks = alt_nticks();
1010f3bc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
1010f3c0:	e0fffd17 	ldw	r3,-12(fp)
1010f3c4:	e0bff617 	ldw	r2,-40(fp)
1010f3c8:	1885883a 	add	r2,r3,r2
1010f3cc:	10c00044 	addi	r3,r2,1
1010f3d0:	e0bffc17 	ldw	r2,-16(fp)
1010f3d4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1010f3d8:	e0bffc17 	ldw	r2,-16(fp)
1010f3dc:	10c00217 	ldw	r3,8(r2)
1010f3e0:	e0bff617 	ldw	r2,-40(fp)
1010f3e4:	1880042e 	bgeu	r3,r2,1010f3f8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
1010f3e8:	e0bffc17 	ldw	r2,-16(fp)
1010f3ec:	00c00044 	movi	r3,1
1010f3f0:	10c00405 	stb	r3,16(r2)
1010f3f4:	00000206 	br	1010f400 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
1010f3f8:	e0bffc17 	ldw	r2,-16(fp)
1010f3fc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
1010f400:	e0bffc17 	ldw	r2,-16(fp)
1010f404:	d0e02004 	addi	r3,gp,-32640
1010f408:	e0fffa15 	stw	r3,-24(fp)
1010f40c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010f410:	e0bffb17 	ldw	r2,-20(fp)
1010f414:	e0fffa17 	ldw	r3,-24(fp)
1010f418:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010f41c:	e0bffa17 	ldw	r2,-24(fp)
1010f420:	10c00017 	ldw	r3,0(r2)
1010f424:	e0bffb17 	ldw	r2,-20(fp)
1010f428:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1010f42c:	e0bffa17 	ldw	r2,-24(fp)
1010f430:	10800017 	ldw	r2,0(r2)
1010f434:	e0fffb17 	ldw	r3,-20(fp)
1010f438:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1010f43c:	e0bffa17 	ldw	r2,-24(fp)
1010f440:	e0fffb17 	ldw	r3,-20(fp)
1010f444:	10c00015 	stw	r3,0(r2)
1010f448:	e0bff817 	ldw	r2,-32(fp)
1010f44c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f450:	e0bff717 	ldw	r2,-36(fp)
1010f454:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
1010f458:	0005883a 	mov	r2,zero
1010f45c:	00000306 	br	1010f46c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
1010f460:	00bffa84 	movi	r2,-22
1010f464:	00000106 	br	1010f46c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
1010f468:	00bfde84 	movi	r2,-134
  }
}
1010f46c:	e037883a 	mov	sp,fp
1010f470:	df000017 	ldw	fp,0(sp)
1010f474:	dec00104 	addi	sp,sp,4
1010f478:	f800283a 	ret

1010f47c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
1010f47c:	deffff04 	addi	sp,sp,-4
1010f480:	df000015 	stw	fp,0(sp)
1010f484:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
1010f488:	0001883a 	nop
1010f48c:	e037883a 	mov	sp,fp
1010f490:	df000017 	ldw	fp,0(sp)
1010f494:	dec00104 	addi	sp,sp,4
1010f498:	f800283a 	ret

1010f49c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010f49c:	defffe04 	addi	sp,sp,-8
1010f4a0:	dfc00115 	stw	ra,4(sp)
1010f4a4:	df000015 	stw	fp,0(sp)
1010f4a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010f4ac:	d0a00b17 	ldw	r2,-32724(gp)
1010f4b0:	10000326 	beq	r2,zero,1010f4c0 <alt_get_errno+0x24>
1010f4b4:	d0a00b17 	ldw	r2,-32724(gp)
1010f4b8:	103ee83a 	callr	r2
1010f4bc:	00000106 	br	1010f4c4 <alt_get_errno+0x28>
1010f4c0:	d0a6ff04 	addi	r2,gp,-25604
}
1010f4c4:	e037883a 	mov	sp,fp
1010f4c8:	dfc00117 	ldw	ra,4(sp)
1010f4cc:	df000017 	ldw	fp,0(sp)
1010f4d0:	dec00204 	addi	sp,sp,8
1010f4d4:	f800283a 	ret

1010f4d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
1010f4d8:	defffa04 	addi	sp,sp,-24
1010f4dc:	dfc00515 	stw	ra,20(sp)
1010f4e0:	df000415 	stw	fp,16(sp)
1010f4e4:	df000404 	addi	fp,sp,16
1010f4e8:	e13ffe15 	stw	r4,-8(fp)
1010f4ec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1010f4f0:	e0bffe17 	ldw	r2,-8(fp)
1010f4f4:	10000326 	beq	r2,zero,1010f504 <alt_dev_llist_insert+0x2c>
1010f4f8:	e0bffe17 	ldw	r2,-8(fp)
1010f4fc:	10800217 	ldw	r2,8(r2)
1010f500:	1000061e 	bne	r2,zero,1010f51c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
1010f504:	010f49c0 	call	1010f49c <alt_get_errno>
1010f508:	1007883a 	mov	r3,r2
1010f50c:	00800584 	movi	r2,22
1010f510:	18800015 	stw	r2,0(r3)
    return -EINVAL;
1010f514:	00bffa84 	movi	r2,-22
1010f518:	00001306 	br	1010f568 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1010f51c:	e0bffe17 	ldw	r2,-8(fp)
1010f520:	e0ffff17 	ldw	r3,-4(fp)
1010f524:	e0fffc15 	stw	r3,-16(fp)
1010f528:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010f52c:	e0bffd17 	ldw	r2,-12(fp)
1010f530:	e0fffc17 	ldw	r3,-16(fp)
1010f534:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010f538:	e0bffc17 	ldw	r2,-16(fp)
1010f53c:	10c00017 	ldw	r3,0(r2)
1010f540:	e0bffd17 	ldw	r2,-12(fp)
1010f544:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1010f548:	e0bffc17 	ldw	r2,-16(fp)
1010f54c:	10800017 	ldw	r2,0(r2)
1010f550:	e0fffd17 	ldw	r3,-12(fp)
1010f554:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1010f558:	e0bffc17 	ldw	r2,-16(fp)
1010f55c:	e0fffd17 	ldw	r3,-12(fp)
1010f560:	10c00015 	stw	r3,0(r2)

  return 0;  
1010f564:	0005883a 	mov	r2,zero
}
1010f568:	e037883a 	mov	sp,fp
1010f56c:	dfc00117 	ldw	ra,4(sp)
1010f570:	df000017 	ldw	fp,0(sp)
1010f574:	dec00204 	addi	sp,sp,8
1010f578:	f800283a 	ret

1010f57c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1010f57c:	defffd04 	addi	sp,sp,-12
1010f580:	dfc00215 	stw	ra,8(sp)
1010f584:	df000115 	stw	fp,4(sp)
1010f588:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1010f58c:	00840474 	movhi	r2,4113
1010f590:	10816c04 	addi	r2,r2,1456
1010f594:	e0bfff15 	stw	r2,-4(fp)
1010f598:	00000606 	br	1010f5b4 <_do_ctors+0x38>
        (*ctor) (); 
1010f59c:	e0bfff17 	ldw	r2,-4(fp)
1010f5a0:	10800017 	ldw	r2,0(r2)
1010f5a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1010f5a8:	e0bfff17 	ldw	r2,-4(fp)
1010f5ac:	10bfff04 	addi	r2,r2,-4
1010f5b0:	e0bfff15 	stw	r2,-4(fp)
1010f5b4:	e0ffff17 	ldw	r3,-4(fp)
1010f5b8:	00840474 	movhi	r2,4113
1010f5bc:	10816d04 	addi	r2,r2,1460
1010f5c0:	18bff62e 	bgeu	r3,r2,1010f59c <__alt_data_end+0xfffef59c>
        (*ctor) (); 
}
1010f5c4:	0001883a 	nop
1010f5c8:	e037883a 	mov	sp,fp
1010f5cc:	dfc00117 	ldw	ra,4(sp)
1010f5d0:	df000017 	ldw	fp,0(sp)
1010f5d4:	dec00204 	addi	sp,sp,8
1010f5d8:	f800283a 	ret

1010f5dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1010f5dc:	defffd04 	addi	sp,sp,-12
1010f5e0:	dfc00215 	stw	ra,8(sp)
1010f5e4:	df000115 	stw	fp,4(sp)
1010f5e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1010f5ec:	00840474 	movhi	r2,4113
1010f5f0:	10816c04 	addi	r2,r2,1456
1010f5f4:	e0bfff15 	stw	r2,-4(fp)
1010f5f8:	00000606 	br	1010f614 <_do_dtors+0x38>
        (*dtor) (); 
1010f5fc:	e0bfff17 	ldw	r2,-4(fp)
1010f600:	10800017 	ldw	r2,0(r2)
1010f604:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1010f608:	e0bfff17 	ldw	r2,-4(fp)
1010f60c:	10bfff04 	addi	r2,r2,-4
1010f610:	e0bfff15 	stw	r2,-4(fp)
1010f614:	e0ffff17 	ldw	r3,-4(fp)
1010f618:	00840474 	movhi	r2,4113
1010f61c:	10816d04 	addi	r2,r2,1460
1010f620:	18bff62e 	bgeu	r3,r2,1010f5fc <__alt_data_end+0xfffef5fc>
        (*dtor) (); 
}
1010f624:	0001883a 	nop
1010f628:	e037883a 	mov	sp,fp
1010f62c:	dfc00117 	ldw	ra,4(sp)
1010f630:	df000017 	ldw	fp,0(sp)
1010f634:	dec00204 	addi	sp,sp,8
1010f638:	f800283a 	ret

1010f63c <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
1010f63c:	defffc04 	addi	sp,sp,-16
1010f640:	df000315 	stw	fp,12(sp)
1010f644:	df000304 	addi	fp,sp,12
1010f648:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
1010f64c:	e0bfff17 	ldw	r2,-4(fp)
1010f650:	10800217 	ldw	r2,8(r2)
1010f654:	1000021e 	bne	r2,zero,1010f660 <alt_fs_reg+0x24>
  {
    return -ENODEV;
1010f658:	00bffb44 	movi	r2,-19
1010f65c:	00001306 	br	1010f6ac <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
1010f660:	e0bfff17 	ldw	r2,-4(fp)
1010f664:	d0e00604 	addi	r3,gp,-32744
1010f668:	e0fffd15 	stw	r3,-12(fp)
1010f66c:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010f670:	e0bffe17 	ldw	r2,-8(fp)
1010f674:	e0fffd17 	ldw	r3,-12(fp)
1010f678:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010f67c:	e0bffd17 	ldw	r2,-12(fp)
1010f680:	10c00017 	ldw	r3,0(r2)
1010f684:	e0bffe17 	ldw	r2,-8(fp)
1010f688:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1010f68c:	e0bffd17 	ldw	r2,-12(fp)
1010f690:	10800017 	ldw	r2,0(r2)
1010f694:	e0fffe17 	ldw	r3,-8(fp)
1010f698:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1010f69c:	e0bffd17 	ldw	r2,-12(fp)
1010f6a0:	e0fffe17 	ldw	r3,-8(fp)
1010f6a4:	10c00015 	stw	r3,0(r2)

  return 0;
1010f6a8:	0005883a 	mov	r2,zero
} 
1010f6ac:	e037883a 	mov	sp,fp
1010f6b0:	df000017 	ldw	fp,0(sp)
1010f6b4:	dec00104 	addi	sp,sp,4
1010f6b8:	f800283a 	ret

1010f6bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1010f6bc:	deffff04 	addi	sp,sp,-4
1010f6c0:	df000015 	stw	fp,0(sp)
1010f6c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1010f6c8:	0001883a 	nop
1010f6cc:	e037883a 	mov	sp,fp
1010f6d0:	df000017 	ldw	fp,0(sp)
1010f6d4:	dec00104 	addi	sp,sp,4
1010f6d8:	f800283a 	ret

1010f6dc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1010f6dc:	defff904 	addi	sp,sp,-28
1010f6e0:	dfc00615 	stw	ra,24(sp)
1010f6e4:	df000515 	stw	fp,20(sp)
1010f6e8:	df000504 	addi	fp,sp,20
1010f6ec:	e13ffc15 	stw	r4,-16(fp)
1010f6f0:	e17ffd15 	stw	r5,-12(fp)
1010f6f4:	e1bffe15 	stw	r6,-8(fp)
1010f6f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1010f6fc:	e0800217 	ldw	r2,8(fp)
1010f700:	d8800015 	stw	r2,0(sp)
1010f704:	e1ffff17 	ldw	r7,-4(fp)
1010f708:	e1bffe17 	ldw	r6,-8(fp)
1010f70c:	e17ffd17 	ldw	r5,-12(fp)
1010f710:	e13ffc17 	ldw	r4,-16(fp)
1010f714:	010f88c0 	call	1010f88c <alt_iic_isr_register>
}  
1010f718:	e037883a 	mov	sp,fp
1010f71c:	dfc00117 	ldw	ra,4(sp)
1010f720:	df000017 	ldw	fp,0(sp)
1010f724:	dec00204 	addi	sp,sp,8
1010f728:	f800283a 	ret

1010f72c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1010f72c:	defff904 	addi	sp,sp,-28
1010f730:	df000615 	stw	fp,24(sp)
1010f734:	df000604 	addi	fp,sp,24
1010f738:	e13ffe15 	stw	r4,-8(fp)
1010f73c:	e17fff15 	stw	r5,-4(fp)
1010f740:	e0bfff17 	ldw	r2,-4(fp)
1010f744:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f748:	0005303a 	rdctl	r2,status
1010f74c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f750:	e0fffb17 	ldw	r3,-20(fp)
1010f754:	00bfff84 	movi	r2,-2
1010f758:	1884703a 	and	r2,r3,r2
1010f75c:	1001703a 	wrctl	status,r2
  
  return context;
1010f760:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1010f764:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1010f768:	00c00044 	movi	r3,1
1010f76c:	e0bffa17 	ldw	r2,-24(fp)
1010f770:	1884983a 	sll	r2,r3,r2
1010f774:	1007883a 	mov	r3,r2
1010f778:	d0a70317 	ldw	r2,-25588(gp)
1010f77c:	1884b03a 	or	r2,r3,r2
1010f780:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1010f784:	d0a70317 	ldw	r2,-25588(gp)
1010f788:	100170fa 	wrctl	ienable,r2
1010f78c:	e0bffc17 	ldw	r2,-16(fp)
1010f790:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f794:	e0bffd17 	ldw	r2,-12(fp)
1010f798:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1010f79c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1010f7a0:	0001883a 	nop
}
1010f7a4:	e037883a 	mov	sp,fp
1010f7a8:	df000017 	ldw	fp,0(sp)
1010f7ac:	dec00104 	addi	sp,sp,4
1010f7b0:	f800283a 	ret

1010f7b4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1010f7b4:	defff904 	addi	sp,sp,-28
1010f7b8:	df000615 	stw	fp,24(sp)
1010f7bc:	df000604 	addi	fp,sp,24
1010f7c0:	e13ffe15 	stw	r4,-8(fp)
1010f7c4:	e17fff15 	stw	r5,-4(fp)
1010f7c8:	e0bfff17 	ldw	r2,-4(fp)
1010f7cc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f7d0:	0005303a 	rdctl	r2,status
1010f7d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f7d8:	e0fffb17 	ldw	r3,-20(fp)
1010f7dc:	00bfff84 	movi	r2,-2
1010f7e0:	1884703a 	and	r2,r3,r2
1010f7e4:	1001703a 	wrctl	status,r2
  
  return context;
1010f7e8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1010f7ec:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1010f7f0:	00c00044 	movi	r3,1
1010f7f4:	e0bffa17 	ldw	r2,-24(fp)
1010f7f8:	1884983a 	sll	r2,r3,r2
1010f7fc:	0084303a 	nor	r2,zero,r2
1010f800:	1007883a 	mov	r3,r2
1010f804:	d0a70317 	ldw	r2,-25588(gp)
1010f808:	1884703a 	and	r2,r3,r2
1010f80c:	d0a70315 	stw	r2,-25588(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1010f810:	d0a70317 	ldw	r2,-25588(gp)
1010f814:	100170fa 	wrctl	ienable,r2
1010f818:	e0bffc17 	ldw	r2,-16(fp)
1010f81c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f820:	e0bffd17 	ldw	r2,-12(fp)
1010f824:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1010f828:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1010f82c:	0001883a 	nop
}
1010f830:	e037883a 	mov	sp,fp
1010f834:	df000017 	ldw	fp,0(sp)
1010f838:	dec00104 	addi	sp,sp,4
1010f83c:	f800283a 	ret

1010f840 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
1010f840:	defffc04 	addi	sp,sp,-16
1010f844:	df000315 	stw	fp,12(sp)
1010f848:	df000304 	addi	fp,sp,12
1010f84c:	e13ffe15 	stw	r4,-8(fp)
1010f850:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
1010f854:	000530fa 	rdctl	r2,ienable
1010f858:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1010f85c:	00c00044 	movi	r3,1
1010f860:	e0bfff17 	ldw	r2,-4(fp)
1010f864:	1884983a 	sll	r2,r3,r2
1010f868:	1007883a 	mov	r3,r2
1010f86c:	e0bffd17 	ldw	r2,-12(fp)
1010f870:	1884703a 	and	r2,r3,r2
1010f874:	1004c03a 	cmpne	r2,r2,zero
1010f878:	10803fcc 	andi	r2,r2,255
}
1010f87c:	e037883a 	mov	sp,fp
1010f880:	df000017 	ldw	fp,0(sp)
1010f884:	dec00104 	addi	sp,sp,4
1010f888:	f800283a 	ret

1010f88c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1010f88c:	defff504 	addi	sp,sp,-44
1010f890:	dfc00a15 	stw	ra,40(sp)
1010f894:	df000915 	stw	fp,36(sp)
1010f898:	df000904 	addi	fp,sp,36
1010f89c:	e13ffc15 	stw	r4,-16(fp)
1010f8a0:	e17ffd15 	stw	r5,-12(fp)
1010f8a4:	e1bffe15 	stw	r6,-8(fp)
1010f8a8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1010f8ac:	00bffa84 	movi	r2,-22
1010f8b0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
1010f8b4:	e0bffd17 	ldw	r2,-12(fp)
1010f8b8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1010f8bc:	e0bff817 	ldw	r2,-32(fp)
1010f8c0:	10800808 	cmpgei	r2,r2,32
1010f8c4:	1000271e 	bne	r2,zero,1010f964 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010f8c8:	0005303a 	rdctl	r2,status
1010f8cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010f8d0:	e0fffb17 	ldw	r3,-20(fp)
1010f8d4:	00bfff84 	movi	r2,-2
1010f8d8:	1884703a 	and	r2,r3,r2
1010f8dc:	1001703a 	wrctl	status,r2
  
  return context;
1010f8e0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
1010f8e4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
1010f8e8:	00840474 	movhi	r2,4113
1010f8ec:	10900f04 	addi	r2,r2,16444
1010f8f0:	e0fff817 	ldw	r3,-32(fp)
1010f8f4:	180690fa 	slli	r3,r3,3
1010f8f8:	10c5883a 	add	r2,r2,r3
1010f8fc:	e0fffe17 	ldw	r3,-8(fp)
1010f900:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
1010f904:	00840474 	movhi	r2,4113
1010f908:	10900f04 	addi	r2,r2,16444
1010f90c:	e0fff817 	ldw	r3,-32(fp)
1010f910:	180690fa 	slli	r3,r3,3
1010f914:	10c5883a 	add	r2,r2,r3
1010f918:	10800104 	addi	r2,r2,4
1010f91c:	e0ffff17 	ldw	r3,-4(fp)
1010f920:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
1010f924:	e0bffe17 	ldw	r2,-8(fp)
1010f928:	10000526 	beq	r2,zero,1010f940 <alt_iic_isr_register+0xb4>
1010f92c:	e0bff817 	ldw	r2,-32(fp)
1010f930:	100b883a 	mov	r5,r2
1010f934:	e13ffc17 	ldw	r4,-16(fp)
1010f938:	010f72c0 	call	1010f72c <alt_ic_irq_enable>
1010f93c:	00000406 	br	1010f950 <alt_iic_isr_register+0xc4>
1010f940:	e0bff817 	ldw	r2,-32(fp)
1010f944:	100b883a 	mov	r5,r2
1010f948:	e13ffc17 	ldw	r4,-16(fp)
1010f94c:	010f7b40 	call	1010f7b4 <alt_ic_irq_disable>
1010f950:	e0bff715 	stw	r2,-36(fp)
1010f954:	e0bffa17 	ldw	r2,-24(fp)
1010f958:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010f95c:	e0bff917 	ldw	r2,-28(fp)
1010f960:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
1010f964:	e0bff717 	ldw	r2,-36(fp)
}
1010f968:	e037883a 	mov	sp,fp
1010f96c:	dfc00117 	ldw	ra,4(sp)
1010f970:	df000017 	ldw	fp,0(sp)
1010f974:	dec00204 	addi	sp,sp,8
1010f978:	f800283a 	ret

1010f97c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1010f97c:	defff804 	addi	sp,sp,-32
1010f980:	dfc00715 	stw	ra,28(sp)
1010f984:	df000615 	stw	fp,24(sp)
1010f988:	dc000515 	stw	r16,20(sp)
1010f98c:	df000604 	addi	fp,sp,24
1010f990:	e13ffb15 	stw	r4,-20(fp)
1010f994:	e17ffc15 	stw	r5,-16(fp)
1010f998:	e1bffd15 	stw	r6,-12(fp)
1010f99c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1010f9a0:	e1bffe17 	ldw	r6,-8(fp)
1010f9a4:	e17ffd17 	ldw	r5,-12(fp)
1010f9a8:	e13ffc17 	ldw	r4,-16(fp)
1010f9ac:	010fc040 	call	1010fc04 <open>
1010f9b0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
1010f9b4:	e0bffa17 	ldw	r2,-24(fp)
1010f9b8:	10002216 	blt	r2,zero,1010fa44 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1010f9bc:	04040474 	movhi	r16,4113
1010f9c0:	84047c04 	addi	r16,r16,4592
1010f9c4:	e0bffa17 	ldw	r2,-24(fp)
1010f9c8:	01400304 	movi	r5,12
1010f9cc:	1009883a 	mov	r4,r2
1010f9d0:	0100c840 	call	10100c84 <__mulsi3>
1010f9d4:	8085883a 	add	r2,r16,r2
1010f9d8:	10c00017 	ldw	r3,0(r2)
1010f9dc:	e0bffb17 	ldw	r2,-20(fp)
1010f9e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
1010f9e4:	04040474 	movhi	r16,4113
1010f9e8:	84047c04 	addi	r16,r16,4592
1010f9ec:	e0bffa17 	ldw	r2,-24(fp)
1010f9f0:	01400304 	movi	r5,12
1010f9f4:	1009883a 	mov	r4,r2
1010f9f8:	0100c840 	call	10100c84 <__mulsi3>
1010f9fc:	8085883a 	add	r2,r16,r2
1010fa00:	10800104 	addi	r2,r2,4
1010fa04:	10c00017 	ldw	r3,0(r2)
1010fa08:	e0bffb17 	ldw	r2,-20(fp)
1010fa0c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1010fa10:	04040474 	movhi	r16,4113
1010fa14:	84047c04 	addi	r16,r16,4592
1010fa18:	e0bffa17 	ldw	r2,-24(fp)
1010fa1c:	01400304 	movi	r5,12
1010fa20:	1009883a 	mov	r4,r2
1010fa24:	0100c840 	call	10100c84 <__mulsi3>
1010fa28:	8085883a 	add	r2,r16,r2
1010fa2c:	10800204 	addi	r2,r2,8
1010fa30:	10c00017 	ldw	r3,0(r2)
1010fa34:	e0bffb17 	ldw	r2,-20(fp)
1010fa38:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1010fa3c:	e13ffa17 	ldw	r4,-24(fp)
1010fa40:	010e1340 	call	1010e134 <alt_release_fd>
  }
} 
1010fa44:	0001883a 	nop
1010fa48:	e6ffff04 	addi	sp,fp,-4
1010fa4c:	dfc00217 	ldw	ra,8(sp)
1010fa50:	df000117 	ldw	fp,4(sp)
1010fa54:	dc000017 	ldw	r16,0(sp)
1010fa58:	dec00304 	addi	sp,sp,12
1010fa5c:	f800283a 	ret

1010fa60 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
1010fa60:	defffb04 	addi	sp,sp,-20
1010fa64:	dfc00415 	stw	ra,16(sp)
1010fa68:	df000315 	stw	fp,12(sp)
1010fa6c:	df000304 	addi	fp,sp,12
1010fa70:	e13ffd15 	stw	r4,-12(fp)
1010fa74:	e17ffe15 	stw	r5,-8(fp)
1010fa78:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
1010fa7c:	01c07fc4 	movi	r7,511
1010fa80:	01800044 	movi	r6,1
1010fa84:	e17ffd17 	ldw	r5,-12(fp)
1010fa88:	01040474 	movhi	r4,4113
1010fa8c:	21047f04 	addi	r4,r4,4604
1010fa90:	010f97c0 	call	1010f97c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
1010fa94:	01c07fc4 	movi	r7,511
1010fa98:	000d883a 	mov	r6,zero
1010fa9c:	e17ffe17 	ldw	r5,-8(fp)
1010faa0:	01040474 	movhi	r4,4113
1010faa4:	21047c04 	addi	r4,r4,4592
1010faa8:	010f97c0 	call	1010f97c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
1010faac:	01c07fc4 	movi	r7,511
1010fab0:	01800044 	movi	r6,1
1010fab4:	e17fff17 	ldw	r5,-4(fp)
1010fab8:	01040474 	movhi	r4,4113
1010fabc:	21048204 	addi	r4,r4,4616
1010fac0:	010f97c0 	call	1010f97c <alt_open_fd>
}  
1010fac4:	0001883a 	nop
1010fac8:	e037883a 	mov	sp,fp
1010facc:	dfc00117 	ldw	ra,4(sp)
1010fad0:	df000017 	ldw	fp,0(sp)
1010fad4:	dec00204 	addi	sp,sp,8
1010fad8:	f800283a 	ret

1010fadc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010fadc:	defffe04 	addi	sp,sp,-8
1010fae0:	dfc00115 	stw	ra,4(sp)
1010fae4:	df000015 	stw	fp,0(sp)
1010fae8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010faec:	d0a00b17 	ldw	r2,-32724(gp)
1010faf0:	10000326 	beq	r2,zero,1010fb00 <alt_get_errno+0x24>
1010faf4:	d0a00b17 	ldw	r2,-32724(gp)
1010faf8:	103ee83a 	callr	r2
1010fafc:	00000106 	br	1010fb04 <alt_get_errno+0x28>
1010fb00:	d0a6ff04 	addi	r2,gp,-25604
}
1010fb04:	e037883a 	mov	sp,fp
1010fb08:	dfc00117 	ldw	ra,4(sp)
1010fb0c:	df000017 	ldw	fp,0(sp)
1010fb10:	dec00204 	addi	sp,sp,8
1010fb14:	f800283a 	ret

1010fb18 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
1010fb18:	defffb04 	addi	sp,sp,-20
1010fb1c:	dfc00415 	stw	ra,16(sp)
1010fb20:	df000315 	stw	fp,12(sp)
1010fb24:	dc000215 	stw	r16,8(sp)
1010fb28:	df000304 	addi	fp,sp,12
1010fb2c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
1010fb30:	e0bffe17 	ldw	r2,-8(fp)
1010fb34:	10800217 	ldw	r2,8(r2)
1010fb38:	10d00034 	orhi	r3,r2,16384
1010fb3c:	e0bffe17 	ldw	r2,-8(fp)
1010fb40:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010fb44:	e03ffd15 	stw	zero,-12(fp)
1010fb48:	00002306 	br	1010fbd8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010fb4c:	04040474 	movhi	r16,4113
1010fb50:	84047c04 	addi	r16,r16,4592
1010fb54:	e0bffd17 	ldw	r2,-12(fp)
1010fb58:	01400304 	movi	r5,12
1010fb5c:	1009883a 	mov	r4,r2
1010fb60:	0100c840 	call	10100c84 <__mulsi3>
1010fb64:	8085883a 	add	r2,r16,r2
1010fb68:	10c00017 	ldw	r3,0(r2)
1010fb6c:	e0bffe17 	ldw	r2,-8(fp)
1010fb70:	10800017 	ldw	r2,0(r2)
1010fb74:	1880151e 	bne	r3,r2,1010fbcc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010fb78:	04040474 	movhi	r16,4113
1010fb7c:	84047c04 	addi	r16,r16,4592
1010fb80:	e0bffd17 	ldw	r2,-12(fp)
1010fb84:	01400304 	movi	r5,12
1010fb88:	1009883a 	mov	r4,r2
1010fb8c:	0100c840 	call	10100c84 <__mulsi3>
1010fb90:	8085883a 	add	r2,r16,r2
1010fb94:	10800204 	addi	r2,r2,8
1010fb98:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010fb9c:	10000b0e 	bge	r2,zero,1010fbcc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1010fba0:	01400304 	movi	r5,12
1010fba4:	e13ffd17 	ldw	r4,-12(fp)
1010fba8:	0100c840 	call	10100c84 <__mulsi3>
1010fbac:	1007883a 	mov	r3,r2
1010fbb0:	00840474 	movhi	r2,4113
1010fbb4:	10847c04 	addi	r2,r2,4592
1010fbb8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
1010fbbc:	e0bffe17 	ldw	r2,-8(fp)
1010fbc0:	18800226 	beq	r3,r2,1010fbcc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
1010fbc4:	00bffcc4 	movi	r2,-13
1010fbc8:	00000806 	br	1010fbec <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
1010fbcc:	e0bffd17 	ldw	r2,-12(fp)
1010fbd0:	10800044 	addi	r2,r2,1
1010fbd4:	e0bffd15 	stw	r2,-12(fp)
1010fbd8:	d0a00a17 	ldw	r2,-32728(gp)
1010fbdc:	1007883a 	mov	r3,r2
1010fbe0:	e0bffd17 	ldw	r2,-12(fp)
1010fbe4:	18bfd92e 	bgeu	r3,r2,1010fb4c <__alt_data_end+0xfffefb4c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1010fbe8:	0005883a 	mov	r2,zero
}
1010fbec:	e6ffff04 	addi	sp,fp,-4
1010fbf0:	dfc00217 	ldw	ra,8(sp)
1010fbf4:	df000117 	ldw	fp,4(sp)
1010fbf8:	dc000017 	ldw	r16,0(sp)
1010fbfc:	dec00304 	addi	sp,sp,12
1010fc00:	f800283a 	ret

1010fc04 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
1010fc04:	defff604 	addi	sp,sp,-40
1010fc08:	dfc00915 	stw	ra,36(sp)
1010fc0c:	df000815 	stw	fp,32(sp)
1010fc10:	df000804 	addi	fp,sp,32
1010fc14:	e13ffd15 	stw	r4,-12(fp)
1010fc18:	e17ffe15 	stw	r5,-8(fp)
1010fc1c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1010fc20:	00bfffc4 	movi	r2,-1
1010fc24:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
1010fc28:	00bffb44 	movi	r2,-19
1010fc2c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1010fc30:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
1010fc34:	d1600804 	addi	r5,gp,-32736
1010fc38:	e13ffd17 	ldw	r4,-12(fp)
1010fc3c:	010ff280 	call	1010ff28 <alt_find_dev>
1010fc40:	e0bff815 	stw	r2,-32(fp)
1010fc44:	e0bff817 	ldw	r2,-32(fp)
1010fc48:	1000051e 	bne	r2,zero,1010fc60 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
1010fc4c:	e13ffd17 	ldw	r4,-12(fp)
1010fc50:	010ffb80 	call	1010ffb8 <alt_find_file>
1010fc54:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
1010fc58:	00800044 	movi	r2,1
1010fc5c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
1010fc60:	e0bff817 	ldw	r2,-32(fp)
1010fc64:	10002b26 	beq	r2,zero,1010fd14 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
1010fc68:	e13ff817 	ldw	r4,-32(fp)
1010fc6c:	01100c00 	call	101100c0 <alt_get_fd>
1010fc70:	e0bff915 	stw	r2,-28(fp)
1010fc74:	e0bff917 	ldw	r2,-28(fp)
1010fc78:	1000030e 	bge	r2,zero,1010fc88 <open+0x84>
    {
      status = index;
1010fc7c:	e0bff917 	ldw	r2,-28(fp)
1010fc80:	e0bffa15 	stw	r2,-24(fp)
1010fc84:	00002506 	br	1010fd1c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
1010fc88:	01400304 	movi	r5,12
1010fc8c:	e13ff917 	ldw	r4,-28(fp)
1010fc90:	0100c840 	call	10100c84 <__mulsi3>
1010fc94:	1007883a 	mov	r3,r2
1010fc98:	00840474 	movhi	r2,4113
1010fc9c:	10847c04 	addi	r2,r2,4592
1010fca0:	1885883a 	add	r2,r3,r2
1010fca4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
1010fca8:	e0fffe17 	ldw	r3,-8(fp)
1010fcac:	00900034 	movhi	r2,16384
1010fcb0:	10bfffc4 	addi	r2,r2,-1
1010fcb4:	1886703a 	and	r3,r3,r2
1010fcb8:	e0bffc17 	ldw	r2,-16(fp)
1010fcbc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1010fcc0:	e0bffb17 	ldw	r2,-20(fp)
1010fcc4:	1000051e 	bne	r2,zero,1010fcdc <open+0xd8>
1010fcc8:	e13ffc17 	ldw	r4,-16(fp)
1010fccc:	010fb180 	call	1010fb18 <alt_file_locked>
1010fcd0:	e0bffa15 	stw	r2,-24(fp)
1010fcd4:	e0bffa17 	ldw	r2,-24(fp)
1010fcd8:	10001016 	blt	r2,zero,1010fd1c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
1010fcdc:	e0bff817 	ldw	r2,-32(fp)
1010fce0:	10800317 	ldw	r2,12(r2)
1010fce4:	10000826 	beq	r2,zero,1010fd08 <open+0x104>
1010fce8:	e0bff817 	ldw	r2,-32(fp)
1010fcec:	10800317 	ldw	r2,12(r2)
1010fcf0:	e1ffff17 	ldw	r7,-4(fp)
1010fcf4:	e1bffe17 	ldw	r6,-8(fp)
1010fcf8:	e17ffd17 	ldw	r5,-12(fp)
1010fcfc:	e13ffc17 	ldw	r4,-16(fp)
1010fd00:	103ee83a 	callr	r2
1010fd04:	00000106 	br	1010fd0c <open+0x108>
1010fd08:	0005883a 	mov	r2,zero
1010fd0c:	e0bffa15 	stw	r2,-24(fp)
1010fd10:	00000206 	br	1010fd1c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
1010fd14:	00bffb44 	movi	r2,-19
1010fd18:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
1010fd1c:	e0bffa17 	ldw	r2,-24(fp)
1010fd20:	1000090e 	bge	r2,zero,1010fd48 <open+0x144>
  {
    alt_release_fd (index);  
1010fd24:	e13ff917 	ldw	r4,-28(fp)
1010fd28:	010e1340 	call	1010e134 <alt_release_fd>
    ALT_ERRNO = -status;
1010fd2c:	010fadc0 	call	1010fadc <alt_get_errno>
1010fd30:	1007883a 	mov	r3,r2
1010fd34:	e0bffa17 	ldw	r2,-24(fp)
1010fd38:	0085c83a 	sub	r2,zero,r2
1010fd3c:	18800015 	stw	r2,0(r3)
    return -1;
1010fd40:	00bfffc4 	movi	r2,-1
1010fd44:	00000106 	br	1010fd4c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
1010fd48:	e0bff917 	ldw	r2,-28(fp)
}
1010fd4c:	e037883a 	mov	sp,fp
1010fd50:	dfc00117 	ldw	ra,4(sp)
1010fd54:	df000017 	ldw	fp,0(sp)
1010fd58:	dec00204 	addi	sp,sp,8
1010fd5c:	f800283a 	ret

1010fd60 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1010fd60:	defffa04 	addi	sp,sp,-24
1010fd64:	df000515 	stw	fp,20(sp)
1010fd68:	df000504 	addi	fp,sp,20
1010fd6c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1010fd70:	0005303a 	rdctl	r2,status
1010fd74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1010fd78:	e0fffc17 	ldw	r3,-16(fp)
1010fd7c:	00bfff84 	movi	r2,-2
1010fd80:	1884703a 	and	r2,r3,r2
1010fd84:	1001703a 	wrctl	status,r2
  
  return context;
1010fd88:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1010fd8c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1010fd90:	e0bfff17 	ldw	r2,-4(fp)
1010fd94:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
1010fd98:	e0bffd17 	ldw	r2,-12(fp)
1010fd9c:	10800017 	ldw	r2,0(r2)
1010fda0:	e0fffd17 	ldw	r3,-12(fp)
1010fda4:	18c00117 	ldw	r3,4(r3)
1010fda8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1010fdac:	e0bffd17 	ldw	r2,-12(fp)
1010fdb0:	10800117 	ldw	r2,4(r2)
1010fdb4:	e0fffd17 	ldw	r3,-12(fp)
1010fdb8:	18c00017 	ldw	r3,0(r3)
1010fdbc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1010fdc0:	e0bffd17 	ldw	r2,-12(fp)
1010fdc4:	e0fffd17 	ldw	r3,-12(fp)
1010fdc8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
1010fdcc:	e0bffd17 	ldw	r2,-12(fp)
1010fdd0:	e0fffd17 	ldw	r3,-12(fp)
1010fdd4:	10c00015 	stw	r3,0(r2)
1010fdd8:	e0bffb17 	ldw	r2,-20(fp)
1010fddc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010fde0:	e0bffe17 	ldw	r2,-8(fp)
1010fde4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
1010fde8:	0001883a 	nop
1010fdec:	e037883a 	mov	sp,fp
1010fdf0:	df000017 	ldw	fp,0(sp)
1010fdf4:	dec00104 	addi	sp,sp,4
1010fdf8:	f800283a 	ret

1010fdfc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1010fdfc:	defffb04 	addi	sp,sp,-20
1010fe00:	dfc00415 	stw	ra,16(sp)
1010fe04:	df000315 	stw	fp,12(sp)
1010fe08:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1010fe0c:	d0a02017 	ldw	r2,-32640(gp)
1010fe10:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
1010fe14:	d0a70517 	ldw	r2,-25580(gp)
1010fe18:	10800044 	addi	r2,r2,1
1010fe1c:	d0a70515 	stw	r2,-25580(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1010fe20:	00002e06 	br	1010fedc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
1010fe24:	e0bffd17 	ldw	r2,-12(fp)
1010fe28:	10800017 	ldw	r2,0(r2)
1010fe2c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
1010fe30:	e0bffd17 	ldw	r2,-12(fp)
1010fe34:	10800403 	ldbu	r2,16(r2)
1010fe38:	10803fcc 	andi	r2,r2,255
1010fe3c:	10000426 	beq	r2,zero,1010fe50 <alt_tick+0x54>
1010fe40:	d0a70517 	ldw	r2,-25580(gp)
1010fe44:	1000021e 	bne	r2,zero,1010fe50 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1010fe48:	e0bffd17 	ldw	r2,-12(fp)
1010fe4c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
1010fe50:	e0bffd17 	ldw	r2,-12(fp)
1010fe54:	10800217 	ldw	r2,8(r2)
1010fe58:	d0e70517 	ldw	r3,-25580(gp)
1010fe5c:	18801d36 	bltu	r3,r2,1010fed4 <alt_tick+0xd8>
1010fe60:	e0bffd17 	ldw	r2,-12(fp)
1010fe64:	10800403 	ldbu	r2,16(r2)
1010fe68:	10803fcc 	andi	r2,r2,255
1010fe6c:	1000191e 	bne	r2,zero,1010fed4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1010fe70:	e0bffd17 	ldw	r2,-12(fp)
1010fe74:	10800317 	ldw	r2,12(r2)
1010fe78:	e0fffd17 	ldw	r3,-12(fp)
1010fe7c:	18c00517 	ldw	r3,20(r3)
1010fe80:	1809883a 	mov	r4,r3
1010fe84:	103ee83a 	callr	r2
1010fe88:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1010fe8c:	e0bfff17 	ldw	r2,-4(fp)
1010fe90:	1000031e 	bne	r2,zero,1010fea0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
1010fe94:	e13ffd17 	ldw	r4,-12(fp)
1010fe98:	010fd600 	call	1010fd60 <alt_alarm_stop>
1010fe9c:	00000d06 	br	1010fed4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1010fea0:	e0bffd17 	ldw	r2,-12(fp)
1010fea4:	10c00217 	ldw	r3,8(r2)
1010fea8:	e0bfff17 	ldw	r2,-4(fp)
1010feac:	1887883a 	add	r3,r3,r2
1010feb0:	e0bffd17 	ldw	r2,-12(fp)
1010feb4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1010feb8:	e0bffd17 	ldw	r2,-12(fp)
1010febc:	10c00217 	ldw	r3,8(r2)
1010fec0:	d0a70517 	ldw	r2,-25580(gp)
1010fec4:	1880032e 	bgeu	r3,r2,1010fed4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1010fec8:	e0bffd17 	ldw	r2,-12(fp)
1010fecc:	00c00044 	movi	r3,1
1010fed0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
1010fed4:	e0bffe17 	ldw	r2,-8(fp)
1010fed8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
1010fedc:	e0fffd17 	ldw	r3,-12(fp)
1010fee0:	d0a02004 	addi	r2,gp,-32640
1010fee4:	18bfcf1e 	bne	r3,r2,1010fe24 <__alt_data_end+0xfffefe24>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1010fee8:	0001883a 	nop
}
1010feec:	0001883a 	nop
1010fef0:	e037883a 	mov	sp,fp
1010fef4:	dfc00117 	ldw	ra,4(sp)
1010fef8:	df000017 	ldw	fp,0(sp)
1010fefc:	dec00204 	addi	sp,sp,8
1010ff00:	f800283a 	ret

1010ff04 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
1010ff04:	deffff04 	addi	sp,sp,-4
1010ff08:	df000015 	stw	fp,0(sp)
1010ff0c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
1010ff10:	000170fa 	wrctl	ienable,zero
}
1010ff14:	0001883a 	nop
1010ff18:	e037883a 	mov	sp,fp
1010ff1c:	df000017 	ldw	fp,0(sp)
1010ff20:	dec00104 	addi	sp,sp,4
1010ff24:	f800283a 	ret

1010ff28 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
1010ff28:	defffa04 	addi	sp,sp,-24
1010ff2c:	dfc00515 	stw	ra,20(sp)
1010ff30:	df000415 	stw	fp,16(sp)
1010ff34:	df000404 	addi	fp,sp,16
1010ff38:	e13ffe15 	stw	r4,-8(fp)
1010ff3c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
1010ff40:	e0bfff17 	ldw	r2,-4(fp)
1010ff44:	10800017 	ldw	r2,0(r2)
1010ff48:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1010ff4c:	e13ffe17 	ldw	r4,-8(fp)
1010ff50:	0100f340 	call	10100f34 <strlen>
1010ff54:	10800044 	addi	r2,r2,1
1010ff58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1010ff5c:	00000d06 	br	1010ff94 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
1010ff60:	e0bffc17 	ldw	r2,-16(fp)
1010ff64:	10800217 	ldw	r2,8(r2)
1010ff68:	e0fffd17 	ldw	r3,-12(fp)
1010ff6c:	180d883a 	mov	r6,r3
1010ff70:	e17ffe17 	ldw	r5,-8(fp)
1010ff74:	1009883a 	mov	r4,r2
1010ff78:	011026c0 	call	1011026c <memcmp>
1010ff7c:	1000021e 	bne	r2,zero,1010ff88 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
1010ff80:	e0bffc17 	ldw	r2,-16(fp)
1010ff84:	00000706 	br	1010ffa4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
1010ff88:	e0bffc17 	ldw	r2,-16(fp)
1010ff8c:	10800017 	ldw	r2,0(r2)
1010ff90:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1010ff94:	e0fffc17 	ldw	r3,-16(fp)
1010ff98:	e0bfff17 	ldw	r2,-4(fp)
1010ff9c:	18bff01e 	bne	r3,r2,1010ff60 <__alt_data_end+0xfffeff60>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
1010ffa0:	0005883a 	mov	r2,zero
}
1010ffa4:	e037883a 	mov	sp,fp
1010ffa8:	dfc00117 	ldw	ra,4(sp)
1010ffac:	df000017 	ldw	fp,0(sp)
1010ffb0:	dec00204 	addi	sp,sp,8
1010ffb4:	f800283a 	ret

1010ffb8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
1010ffb8:	defffb04 	addi	sp,sp,-20
1010ffbc:	dfc00415 	stw	ra,16(sp)
1010ffc0:	df000315 	stw	fp,12(sp)
1010ffc4:	df000304 	addi	fp,sp,12
1010ffc8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1010ffcc:	d0a00617 	ldw	r2,-32744(gp)
1010ffd0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1010ffd4:	00003106 	br	1011009c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
1010ffd8:	e0bffd17 	ldw	r2,-12(fp)
1010ffdc:	10800217 	ldw	r2,8(r2)
1010ffe0:	1009883a 	mov	r4,r2
1010ffe4:	0100f340 	call	10100f34 <strlen>
1010ffe8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
1010ffec:	e0bffd17 	ldw	r2,-12(fp)
1010fff0:	10c00217 	ldw	r3,8(r2)
1010fff4:	e0bffe17 	ldw	r2,-8(fp)
1010fff8:	10bfffc4 	addi	r2,r2,-1
1010fffc:	1885883a 	add	r2,r3,r2
10110000:	10800003 	ldbu	r2,0(r2)
10110004:	10803fcc 	andi	r2,r2,255
10110008:	1080201c 	xori	r2,r2,128
1011000c:	10bfe004 	addi	r2,r2,-128
10110010:	10800bd8 	cmpnei	r2,r2,47
10110014:	1000031e 	bne	r2,zero,10110024 <alt_find_file+0x6c>
    {
      len -= 1;
10110018:	e0bffe17 	ldw	r2,-8(fp)
1011001c:	10bfffc4 	addi	r2,r2,-1
10110020:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10110024:	e0bffe17 	ldw	r2,-8(fp)
10110028:	e0ffff17 	ldw	r3,-4(fp)
1011002c:	1885883a 	add	r2,r3,r2
10110030:	10800003 	ldbu	r2,0(r2)
10110034:	10803fcc 	andi	r2,r2,255
10110038:	1080201c 	xori	r2,r2,128
1011003c:	10bfe004 	addi	r2,r2,-128
10110040:	10800be0 	cmpeqi	r2,r2,47
10110044:	1000081e 	bne	r2,zero,10110068 <alt_find_file+0xb0>
10110048:	e0bffe17 	ldw	r2,-8(fp)
1011004c:	e0ffff17 	ldw	r3,-4(fp)
10110050:	1885883a 	add	r2,r3,r2
10110054:	10800003 	ldbu	r2,0(r2)
10110058:	10803fcc 	andi	r2,r2,255
1011005c:	1080201c 	xori	r2,r2,128
10110060:	10bfe004 	addi	r2,r2,-128
10110064:	10000a1e 	bne	r2,zero,10110090 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10110068:	e0bffd17 	ldw	r2,-12(fp)
1011006c:	10800217 	ldw	r2,8(r2)
10110070:	e0fffe17 	ldw	r3,-8(fp)
10110074:	180d883a 	mov	r6,r3
10110078:	e17fff17 	ldw	r5,-4(fp)
1011007c:	1009883a 	mov	r4,r2
10110080:	011026c0 	call	1011026c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10110084:	1000021e 	bne	r2,zero,10110090 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10110088:	e0bffd17 	ldw	r2,-12(fp)
1011008c:	00000706 	br	101100ac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10110090:	e0bffd17 	ldw	r2,-12(fp)
10110094:	10800017 	ldw	r2,0(r2)
10110098:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1011009c:	e0fffd17 	ldw	r3,-12(fp)
101100a0:	d0a00604 	addi	r2,gp,-32744
101100a4:	18bfcc1e 	bne	r3,r2,1010ffd8 <__alt_data_end+0xfffeffd8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
101100a8:	0005883a 	mov	r2,zero
}
101100ac:	e037883a 	mov	sp,fp
101100b0:	dfc00117 	ldw	ra,4(sp)
101100b4:	df000017 	ldw	fp,0(sp)
101100b8:	dec00204 	addi	sp,sp,8
101100bc:	f800283a 	ret

101100c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
101100c0:	defffa04 	addi	sp,sp,-24
101100c4:	dfc00515 	stw	ra,20(sp)
101100c8:	df000415 	stw	fp,16(sp)
101100cc:	dc000315 	stw	r16,12(sp)
101100d0:	df000404 	addi	fp,sp,16
101100d4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
101100d8:	00bffa04 	movi	r2,-24
101100dc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
101100e0:	e03ffc15 	stw	zero,-16(fp)
101100e4:	00001d06 	br	1011015c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
101100e8:	04040474 	movhi	r16,4113
101100ec:	84047c04 	addi	r16,r16,4592
101100f0:	e0bffc17 	ldw	r2,-16(fp)
101100f4:	01400304 	movi	r5,12
101100f8:	1009883a 	mov	r4,r2
101100fc:	0100c840 	call	10100c84 <__mulsi3>
10110100:	8085883a 	add	r2,r16,r2
10110104:	10800017 	ldw	r2,0(r2)
10110108:	1000111e 	bne	r2,zero,10110150 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
1011010c:	04040474 	movhi	r16,4113
10110110:	84047c04 	addi	r16,r16,4592
10110114:	e0bffc17 	ldw	r2,-16(fp)
10110118:	01400304 	movi	r5,12
1011011c:	1009883a 	mov	r4,r2
10110120:	0100c840 	call	10100c84 <__mulsi3>
10110124:	8085883a 	add	r2,r16,r2
10110128:	e0fffe17 	ldw	r3,-8(fp)
1011012c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10110130:	d0e00a17 	ldw	r3,-32728(gp)
10110134:	e0bffc17 	ldw	r2,-16(fp)
10110138:	1880020e 	bge	r3,r2,10110144 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
1011013c:	e0bffc17 	ldw	r2,-16(fp)
10110140:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
10110144:	e0bffc17 	ldw	r2,-16(fp)
10110148:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
1011014c:	00000606 	br	10110168 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10110150:	e0bffc17 	ldw	r2,-16(fp)
10110154:	10800044 	addi	r2,r2,1
10110158:	e0bffc15 	stw	r2,-16(fp)
1011015c:	e0bffc17 	ldw	r2,-16(fp)
10110160:	10800810 	cmplti	r2,r2,32
10110164:	103fe01e 	bne	r2,zero,101100e8 <__alt_data_end+0xffff00e8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10110168:	e0bffd17 	ldw	r2,-12(fp)
}
1011016c:	e6ffff04 	addi	sp,fp,-4
10110170:	dfc00217 	ldw	ra,8(sp)
10110174:	df000117 	ldw	fp,4(sp)
10110178:	dc000017 	ldw	r16,0(sp)
1011017c:	dec00304 	addi	sp,sp,12
10110180:	f800283a 	ret

10110184 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10110184:	defffe04 	addi	sp,sp,-8
10110188:	df000115 	stw	fp,4(sp)
1011018c:	df000104 	addi	fp,sp,4
10110190:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10110194:	e0bfff17 	ldw	r2,-4(fp)
10110198:	10bffe84 	addi	r2,r2,-6
1011019c:	10c00428 	cmpgeui	r3,r2,16
101101a0:	18001a1e 	bne	r3,zero,1011020c <alt_exception_cause_generated_bad_addr+0x88>
101101a4:	100690ba 	slli	r3,r2,2
101101a8:	00840474 	movhi	r2,4113
101101ac:	10806f04 	addi	r2,r2,444
101101b0:	1885883a 	add	r2,r3,r2
101101b4:	10800017 	ldw	r2,0(r2)
101101b8:	1000683a 	jmp	r2
101101bc:	101101fc 	xorhi	zero,r2,17415
101101c0:	101101fc 	xorhi	zero,r2,17415
101101c4:	1011020c 	andi	zero,r2,17416
101101c8:	1011020c 	andi	zero,r2,17416
101101cc:	1011020c 	andi	zero,r2,17416
101101d0:	101101fc 	xorhi	zero,r2,17415
101101d4:	10110204 	addi	zero,r2,17416
101101d8:	1011020c 	andi	zero,r2,17416
101101dc:	101101fc 	xorhi	zero,r2,17415
101101e0:	101101fc 	xorhi	zero,r2,17415
101101e4:	1011020c 	andi	zero,r2,17416
101101e8:	101101fc 	xorhi	zero,r2,17415
101101ec:	10110204 	addi	zero,r2,17416
101101f0:	1011020c 	andi	zero,r2,17416
101101f4:	1011020c 	andi	zero,r2,17416
101101f8:	101101fc 	xorhi	zero,r2,17415
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
101101fc:	00800044 	movi	r2,1
10110200:	00000306 	br	10110210 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10110204:	0005883a 	mov	r2,zero
10110208:	00000106 	br	10110210 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
1011020c:	0005883a 	mov	r2,zero
  }
}
10110210:	e037883a 	mov	sp,fp
10110214:	df000017 	ldw	fp,0(sp)
10110218:	dec00104 	addi	sp,sp,4
1011021c:	f800283a 	ret

10110220 <atexit>:
10110220:	200b883a 	mov	r5,r4
10110224:	000f883a 	mov	r7,zero
10110228:	000d883a 	mov	r6,zero
1011022c:	0009883a 	mov	r4,zero
10110230:	01102e81 	jmpi	101102e8 <__register_exitproc>

10110234 <exit>:
10110234:	defffe04 	addi	sp,sp,-8
10110238:	000b883a 	mov	r5,zero
1011023c:	dc000015 	stw	r16,0(sp)
10110240:	dfc00115 	stw	ra,4(sp)
10110244:	2021883a 	mov	r16,r4
10110248:	01104000 	call	10110400 <__call_exitprocs>
1011024c:	00840474 	movhi	r2,4113
10110250:	1088fe04 	addi	r2,r2,9208
10110254:	11000017 	ldw	r4,0(r2)
10110258:	20800f17 	ldw	r2,60(r4)
1011025c:	10000126 	beq	r2,zero,10110264 <exit+0x30>
10110260:	103ee83a 	callr	r2
10110264:	8009883a 	mov	r4,r16
10110268:	01105800 	call	10110580 <_exit>

1011026c <memcmp>:
1011026c:	01c000c4 	movi	r7,3
10110270:	3980192e 	bgeu	r7,r6,101102d8 <memcmp+0x6c>
10110274:	2144b03a 	or	r2,r4,r5
10110278:	11c4703a 	and	r2,r2,r7
1011027c:	10000f26 	beq	r2,zero,101102bc <memcmp+0x50>
10110280:	20800003 	ldbu	r2,0(r4)
10110284:	28c00003 	ldbu	r3,0(r5)
10110288:	10c0151e 	bne	r2,r3,101102e0 <memcmp+0x74>
1011028c:	31bfff84 	addi	r6,r6,-2
10110290:	01ffffc4 	movi	r7,-1
10110294:	00000406 	br	101102a8 <memcmp+0x3c>
10110298:	20800003 	ldbu	r2,0(r4)
1011029c:	28c00003 	ldbu	r3,0(r5)
101102a0:	31bfffc4 	addi	r6,r6,-1
101102a4:	10c00e1e 	bne	r2,r3,101102e0 <memcmp+0x74>
101102a8:	21000044 	addi	r4,r4,1
101102ac:	29400044 	addi	r5,r5,1
101102b0:	31fff91e 	bne	r6,r7,10110298 <__alt_data_end+0xffff0298>
101102b4:	0005883a 	mov	r2,zero
101102b8:	f800283a 	ret
101102bc:	20c00017 	ldw	r3,0(r4)
101102c0:	28800017 	ldw	r2,0(r5)
101102c4:	18bfee1e 	bne	r3,r2,10110280 <__alt_data_end+0xffff0280>
101102c8:	31bfff04 	addi	r6,r6,-4
101102cc:	21000104 	addi	r4,r4,4
101102d0:	29400104 	addi	r5,r5,4
101102d4:	39bff936 	bltu	r7,r6,101102bc <__alt_data_end+0xffff02bc>
101102d8:	303fe91e 	bne	r6,zero,10110280 <__alt_data_end+0xffff0280>
101102dc:	003ff506 	br	101102b4 <__alt_data_end+0xffff02b4>
101102e0:	10c5c83a 	sub	r2,r2,r3
101102e4:	f800283a 	ret

101102e8 <__register_exitproc>:
101102e8:	defffa04 	addi	sp,sp,-24
101102ec:	dc000315 	stw	r16,12(sp)
101102f0:	04040474 	movhi	r16,4113
101102f4:	8408fe04 	addi	r16,r16,9208
101102f8:	80c00017 	ldw	r3,0(r16)
101102fc:	dc400415 	stw	r17,16(sp)
10110300:	dfc00515 	stw	ra,20(sp)
10110304:	18805217 	ldw	r2,328(r3)
10110308:	2023883a 	mov	r17,r4
1011030c:	10003726 	beq	r2,zero,101103ec <__register_exitproc+0x104>
10110310:	10c00117 	ldw	r3,4(r2)
10110314:	010007c4 	movi	r4,31
10110318:	20c00e16 	blt	r4,r3,10110354 <__register_exitproc+0x6c>
1011031c:	1a000044 	addi	r8,r3,1
10110320:	8800221e 	bne	r17,zero,101103ac <__register_exitproc+0xc4>
10110324:	18c00084 	addi	r3,r3,2
10110328:	18c7883a 	add	r3,r3,r3
1011032c:	18c7883a 	add	r3,r3,r3
10110330:	12000115 	stw	r8,4(r2)
10110334:	10c7883a 	add	r3,r2,r3
10110338:	19400015 	stw	r5,0(r3)
1011033c:	0005883a 	mov	r2,zero
10110340:	dfc00517 	ldw	ra,20(sp)
10110344:	dc400417 	ldw	r17,16(sp)
10110348:	dc000317 	ldw	r16,12(sp)
1011034c:	dec00604 	addi	sp,sp,24
10110350:	f800283a 	ret
10110354:	00800034 	movhi	r2,0
10110358:	10800004 	addi	r2,r2,0
1011035c:	10002626 	beq	r2,zero,101103f8 <__register_exitproc+0x110>
10110360:	01006404 	movi	r4,400
10110364:	d9400015 	stw	r5,0(sp)
10110368:	d9800115 	stw	r6,4(sp)
1011036c:	d9c00215 	stw	r7,8(sp)
10110370:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
10110374:	d9400017 	ldw	r5,0(sp)
10110378:	d9800117 	ldw	r6,4(sp)
1011037c:	d9c00217 	ldw	r7,8(sp)
10110380:	10001d26 	beq	r2,zero,101103f8 <__register_exitproc+0x110>
10110384:	81000017 	ldw	r4,0(r16)
10110388:	10000115 	stw	zero,4(r2)
1011038c:	02000044 	movi	r8,1
10110390:	22405217 	ldw	r9,328(r4)
10110394:	0007883a 	mov	r3,zero
10110398:	12400015 	stw	r9,0(r2)
1011039c:	20805215 	stw	r2,328(r4)
101103a0:	10006215 	stw	zero,392(r2)
101103a4:	10006315 	stw	zero,396(r2)
101103a8:	883fde26 	beq	r17,zero,10110324 <__alt_data_end+0xffff0324>
101103ac:	18c9883a 	add	r4,r3,r3
101103b0:	2109883a 	add	r4,r4,r4
101103b4:	1109883a 	add	r4,r2,r4
101103b8:	21802215 	stw	r6,136(r4)
101103bc:	01800044 	movi	r6,1
101103c0:	12406217 	ldw	r9,392(r2)
101103c4:	30cc983a 	sll	r6,r6,r3
101103c8:	4992b03a 	or	r9,r9,r6
101103cc:	12406215 	stw	r9,392(r2)
101103d0:	21c04215 	stw	r7,264(r4)
101103d4:	01000084 	movi	r4,2
101103d8:	893fd21e 	bne	r17,r4,10110324 <__alt_data_end+0xffff0324>
101103dc:	11006317 	ldw	r4,396(r2)
101103e0:	218cb03a 	or	r6,r4,r6
101103e4:	11806315 	stw	r6,396(r2)
101103e8:	003fce06 	br	10110324 <__alt_data_end+0xffff0324>
101103ec:	18805304 	addi	r2,r3,332
101103f0:	18805215 	stw	r2,328(r3)
101103f4:	003fc606 	br	10110310 <__alt_data_end+0xffff0310>
101103f8:	00bfffc4 	movi	r2,-1
101103fc:	003fd006 	br	10110340 <__alt_data_end+0xffff0340>

10110400 <__call_exitprocs>:
10110400:	defff504 	addi	sp,sp,-44
10110404:	df000915 	stw	fp,36(sp)
10110408:	dd400615 	stw	r21,24(sp)
1011040c:	dc800315 	stw	r18,12(sp)
10110410:	dfc00a15 	stw	ra,40(sp)
10110414:	ddc00815 	stw	r23,32(sp)
10110418:	dd800715 	stw	r22,28(sp)
1011041c:	dd000515 	stw	r20,20(sp)
10110420:	dcc00415 	stw	r19,16(sp)
10110424:	dc400215 	stw	r17,8(sp)
10110428:	dc000115 	stw	r16,4(sp)
1011042c:	d9000015 	stw	r4,0(sp)
10110430:	2839883a 	mov	fp,r5
10110434:	04800044 	movi	r18,1
10110438:	057fffc4 	movi	r21,-1
1011043c:	00840474 	movhi	r2,4113
10110440:	1088fe04 	addi	r2,r2,9208
10110444:	12000017 	ldw	r8,0(r2)
10110448:	45005217 	ldw	r20,328(r8)
1011044c:	44c05204 	addi	r19,r8,328
10110450:	a0001c26 	beq	r20,zero,101104c4 <__call_exitprocs+0xc4>
10110454:	a0800117 	ldw	r2,4(r20)
10110458:	15ffffc4 	addi	r23,r2,-1
1011045c:	b8000d16 	blt	r23,zero,10110494 <__call_exitprocs+0x94>
10110460:	14000044 	addi	r16,r2,1
10110464:	8421883a 	add	r16,r16,r16
10110468:	8421883a 	add	r16,r16,r16
1011046c:	84402004 	addi	r17,r16,128
10110470:	a463883a 	add	r17,r20,r17
10110474:	a421883a 	add	r16,r20,r16
10110478:	e0001e26 	beq	fp,zero,101104f4 <__call_exitprocs+0xf4>
1011047c:	80804017 	ldw	r2,256(r16)
10110480:	e0801c26 	beq	fp,r2,101104f4 <__call_exitprocs+0xf4>
10110484:	bdffffc4 	addi	r23,r23,-1
10110488:	843fff04 	addi	r16,r16,-4
1011048c:	8c7fff04 	addi	r17,r17,-4
10110490:	bd7ff91e 	bne	r23,r21,10110478 <__alt_data_end+0xffff0478>
10110494:	00800034 	movhi	r2,0
10110498:	10800004 	addi	r2,r2,0
1011049c:	10000926 	beq	r2,zero,101104c4 <__call_exitprocs+0xc4>
101104a0:	a0800117 	ldw	r2,4(r20)
101104a4:	1000301e 	bne	r2,zero,10110568 <__call_exitprocs+0x168>
101104a8:	a0800017 	ldw	r2,0(r20)
101104ac:	10003226 	beq	r2,zero,10110578 <__call_exitprocs+0x178>
101104b0:	a009883a 	mov	r4,r20
101104b4:	98800015 	stw	r2,0(r19)
101104b8:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
101104bc:	9d000017 	ldw	r20,0(r19)
101104c0:	a03fe41e 	bne	r20,zero,10110454 <__alt_data_end+0xffff0454>
101104c4:	dfc00a17 	ldw	ra,40(sp)
101104c8:	df000917 	ldw	fp,36(sp)
101104cc:	ddc00817 	ldw	r23,32(sp)
101104d0:	dd800717 	ldw	r22,28(sp)
101104d4:	dd400617 	ldw	r21,24(sp)
101104d8:	dd000517 	ldw	r20,20(sp)
101104dc:	dcc00417 	ldw	r19,16(sp)
101104e0:	dc800317 	ldw	r18,12(sp)
101104e4:	dc400217 	ldw	r17,8(sp)
101104e8:	dc000117 	ldw	r16,4(sp)
101104ec:	dec00b04 	addi	sp,sp,44
101104f0:	f800283a 	ret
101104f4:	a0800117 	ldw	r2,4(r20)
101104f8:	80c00017 	ldw	r3,0(r16)
101104fc:	10bfffc4 	addi	r2,r2,-1
10110500:	15c01426 	beq	r2,r23,10110554 <__call_exitprocs+0x154>
10110504:	80000015 	stw	zero,0(r16)
10110508:	183fde26 	beq	r3,zero,10110484 <__alt_data_end+0xffff0484>
1011050c:	95c8983a 	sll	r4,r18,r23
10110510:	a0806217 	ldw	r2,392(r20)
10110514:	a5800117 	ldw	r22,4(r20)
10110518:	2084703a 	and	r2,r4,r2
1011051c:	10000b26 	beq	r2,zero,1011054c <__call_exitprocs+0x14c>
10110520:	a0806317 	ldw	r2,396(r20)
10110524:	2088703a 	and	r4,r4,r2
10110528:	20000c1e 	bne	r4,zero,1011055c <__call_exitprocs+0x15c>
1011052c:	89400017 	ldw	r5,0(r17)
10110530:	d9000017 	ldw	r4,0(sp)
10110534:	183ee83a 	callr	r3
10110538:	a0800117 	ldw	r2,4(r20)
1011053c:	15bfbf1e 	bne	r2,r22,1011043c <__alt_data_end+0xffff043c>
10110540:	98800017 	ldw	r2,0(r19)
10110544:	153fcf26 	beq	r2,r20,10110484 <__alt_data_end+0xffff0484>
10110548:	003fbc06 	br	1011043c <__alt_data_end+0xffff043c>
1011054c:	183ee83a 	callr	r3
10110550:	003ff906 	br	10110538 <__alt_data_end+0xffff0538>
10110554:	a5c00115 	stw	r23,4(r20)
10110558:	003feb06 	br	10110508 <__alt_data_end+0xffff0508>
1011055c:	89000017 	ldw	r4,0(r17)
10110560:	183ee83a 	callr	r3
10110564:	003ff406 	br	10110538 <__alt_data_end+0xffff0538>
10110568:	a0800017 	ldw	r2,0(r20)
1011056c:	a027883a 	mov	r19,r20
10110570:	1029883a 	mov	r20,r2
10110574:	003fb606 	br	10110450 <__alt_data_end+0xffff0450>
10110578:	0005883a 	mov	r2,zero
1011057c:	003ffb06 	br	1011056c <__alt_data_end+0xffff056c>

10110580 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10110580:	defffd04 	addi	sp,sp,-12
10110584:	df000215 	stw	fp,8(sp)
10110588:	df000204 	addi	fp,sp,8
1011058c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10110590:	0001883a 	nop
10110594:	e0bfff17 	ldw	r2,-4(fp)
10110598:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
1011059c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
101105a0:	10000226 	beq	r2,zero,101105ac <_exit+0x2c>
    ALT_SIM_FAIL();
101105a4:	002af070 	cmpltui	zero,zero,43969
101105a8:	00000106 	br	101105b0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
101105ac:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
101105b0:	003fff06 	br	101105b0 <__alt_data_end+0xffff05b0>
