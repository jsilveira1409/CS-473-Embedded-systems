
lab.elf:     file format elf32-littlenios2
lab.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10100230

Program Header:
    LOAD off    0x00001000 vaddr 0x10100000 paddr 0x10100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10100020 paddr 0x10100020 align 2**12
         filesz 0x0000651c memsz 0x0000651c flags r-x
    LOAD off    0x0000753c vaddr 0x1010653c paddr 0x10108018 align 2**12
         filesz 0x00001adc memsz 0x00001adc flags rw-
    LOAD off    0x00009af4 vaddr 0x10109af4 paddr 0x10109af4 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10100000  10100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10100020  10100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000061b4  10100230  10100230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000158  101063e4  101063e4  000073e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001adc  1010653c  10108018  0000753c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  10109af4  10109af4  00009af4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  10109c48  10109c48  00009018  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000a50  00000000  00000000  00009040  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00017150  00000000  00000000  00009a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000625d  00000000  00000000  00020be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006cc6  00000000  00000000  00026e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000176c  00000000  00000000  0002db04  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000028e4  00000000  00000000  0002f270  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004ada  00000000  00000000  00031b54  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00036630  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00036640  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000393ba  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000393bd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000393c9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000393ca  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000393cb  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000393d6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000393e1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  000393ec  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  000393f6  2**0
                  CONTENTS, READONLY
 26 .jdi          0000512a  00000000  00000000  0003942a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0027f56e  00000000  00000000  0003e554  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10100000 l    d  .entry	00000000 .entry
10100020 l    d  .exceptions	00000000 .exceptions
10100230 l    d  .text	00000000 .text
101063e4 l    d  .rodata	00000000 .rodata
1010653c l    d  .rwdata	00000000 .rwdata
10109af4 l    d  .bss	00000000 .bss
10109c48 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab_bsp//obj/HAL/src/crt0.o
10100268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
10100ec4 l     F .text	00000008 __fp_unlock
10100ed8 l     F .text	0000019c __sinit.part.1
10101074 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
1010653c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 alt_close.c
10103840 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10103954 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
10103980 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
10103a74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10103b5c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10103c48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10103e24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10107fc0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
10104098 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
101041d4 l     F .text	00000034 alt_dev_reg
10106f10 l     O .rwdata	00001060 jtag_uart_0
10107f70 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
101044b8 l     F .text	0000020c altera_avalon_jtag_uart_irq
101046c4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
10107fc4 l     O .rwdata	00000009 hcinfo.2538
10107fd0 l     O .rwdata	0000000a hcinfo.2551
10107fdc l     O .rwdata	00000009 hcinfo.2560
10107fe8 l     O .rwdata	0000000a hcinfo.2573
10107ff4 l     O .rwdata	0000000a hcinfo.2586
10108000 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
101052cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
101057ac l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
1010590c l     F .text	0000003c alt_get_errno
10105948 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10109b1c g     O .bss	00000004 alt_instruction_exception_handler
101037ec g     F .text	00000054 _isatty_r
10103d60 g     F .text	0000007c alt_main
10100d58 g     F .text	000000c0 _puts_r
10109b48 g     O .bss	00000100 alt_irq
10103514 g     F .text	00000060 _lseek_r
10108018 g       *ABS*	00000000 __flash_rwdata_start
10109c48 g       *ABS*	00000000 __alt_heap_start
10102ac8 g     F .text	0000005c __sseek
10101224 g     F .text	00000010 __sinit
1010107c g     F .text	00000078 __sfmoreglue
10103e00 g     F .text	00000024 __malloc_unlock
10104cfc g     F .text	0000011c alt_hostfs_open
101021b4 g     F .text	0000015c memmove
1010120c g     F .text	00000018 _cleanup
10105d34 g     F .text	00000024 altera_nios2_gen2_irq_init
10100000 g     F .entry	0000000c __reset
10100020 g       *ABS*	00000000 __flash_exceptions_start
10103790 g     F .text	0000005c _fstat_r
10109b00 g     O .bss	00000004 errno
10102a44 g     F .text	00000008 __seofread
10109b08 g     O .bss	00000004 alt_argv
1010ff98 g       *ABS*	00000000 _gp
10106d90 g     O .rwdata	00000180 alt_fd_list
10104f34 g     F .text	00000068 alt_hostfs_seek
10105d58 g     F .text	00000090 alt_find_dev
10100c10 g     F .text	00000148 memcpy
10100ecc g     F .text	0000000c _cleanup_r
1010546c g     F .text	00000080 alt_fs_reg
10105890 g     F .text	0000007c alt_io_redirect
101063e4 g       *ABS*	00000000 __DTOR_END__
10100e18 g     F .text	00000014 puts
10105fb4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
101048bc g     F .text	0000021c altera_avalon_jtag_uart_read
10100000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10100b2c g     F .text	00000064 .hidden __udivsi3
10103ab0 g     F .text	000000ac isatty
10109afc g     O .bss	00000004 __malloc_top_pad
10101274 g     F .text	000004c8 __sfvwrite_r
1010299c g     F .text	00000054 _sbrk_r
10104e5c g     F .text	0000006c alt_hostfs_read
10103730 g     F .text	00000060 _read_r
10107fb8 g     O .rwdata	00000004 alt_max_fd
10102d34 g     F .text	000000f0 _fclose_r
101030b0 g     F .text	00000030 fflush
10109af8 g     O .bss	00000004 __malloc_max_sbrked_mem
10103c84 g     F .text	000000dc lseek
10107f98 g     O .rwdata	00000004 _global_impure_ptr
10102438 g     F .text	00000564 _realloc_r
10109c48 g       *ABS*	00000000 __bss_end
101056bc g     F .text	000000f0 alt_iic_isr_register
10105c2c g     F .text	00000108 alt_tick
10101244 g     F .text	00000018 __fp_lock_all
10105670 g     F .text	0000004c alt_ic_irq_enabled
10105b90 g     F .text	0000009c alt_alarm_stop
10109b10 g     O .bss	00000004 alt_irq_active
10104e18 g     F .text	00000044 alt_hostfs_close
101000fc g     F .exceptions	000000d4 alt_irq_handler
10106d68 g     O .rwdata	00000028 alt_dev_null
101052ac g     F .text	00000020 alt_dcache_flush_all
10108018 g       *ABS*	00000000 __ram_rwdata_end
10107fb0 g     O .rwdata	00000008 alt_dev_list
101040d4 g     F .text	00000100 write
1010653c g       *ABS*	00000000 __ram_rodata_end
101039bc g     F .text	000000b8 fstat
1010026c g     F .text	00000058 lcd_flag_set
10100b90 g     F .text	00000058 .hidden __umodsi3
10109c48 g       *ABS*	00000000 end
101043f8 g     F .text	000000c0 altera_avalon_jtag_uart_init
101001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
101063e4 g       *ABS*	00000000 __CTOR_LIST__
10120000 g       *ABS*	00000000 __alt_stack_pointer
10104ad8 g     F .text	00000224 altera_avalon_jtag_uart_write
10101234 g     F .text	00000004 __sfp_lock_acquire
101020d0 g     F .text	000000e4 memchr
10103204 g     F .text	00000310 _free_r
10106230 g     F .text	00000180 __call_exitprocs
10107fa0 g     O .rwdata	00000004 __malloc_sbrk_base
10100230 g     F .text	0000003c _start
10109b14 g     O .bss	00000004 _alt_tick_rate
10109b18 g     O .bss	00000004 _alt_nticks
10103e60 g     F .text	00000104 read
10104240 g     F .text	00000054 alt_sys_init
10106118 g     F .text	00000118 __register_exitproc
10104764 g     F .text	00000068 altera_avalon_jtag_uart_close
10100be8 g     F .text	00000028 .hidden __mulsi3
1010653c g       *ABS*	00000000 __ram_rwdata_start
101063e4 g       *ABS*	00000000 __ram_rodata_start
10109b20 g     O .bss	00000028 __malloc_current_mallinfo
10104294 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10105ef0 g     F .text	000000c4 alt_get_fd
10102ce0 g     F .text	00000054 _close_r
1010609c g     F .text	0000007c memcmp
10104354 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10109c48 g       *ABS*	00000000 __alt_stack_base
101043a4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10102b8c g     F .text	00000154 __swsetup_r
101010f4 g     F .text	00000118 __sfp
10106960 g     O .rwdata	00000408 __malloc_av_
10101240 g     F .text	00000004 __sinit_lock_release
101029f0 g     F .text	00000054 __sread
10105de8 g     F .text	00000108 alt_find_file
10105308 g     F .text	000000a4 alt_dev_llist_insert
10103ddc g     F .text	00000024 __malloc_lock
10103fe8 g     F .text	000000b0 sbrk
10103054 g     F .text	0000005c _fflush_r
1010032c g     F .text	000000f4 send_command
10109af4 g       *ABS*	00000000 __bss_start
10102310 g     F .text	00000128 memset
10100990 g     F .text	000000a4 main
10109b0c g     O .bss	00000004 alt_envp
10109af4 g     O .bss	00000004 __malloc_max_total_mem
101042f4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10102b24 g     F .text	00000008 __sclose
10120000 g       *ABS*	00000000 __alt_heap_limit
10102e24 g     F .text	00000014 fclose
101018c4 g     F .text	0000080c _malloc_r
10107fbc g     O .rwdata	00000004 alt_errno
1010173c g     F .text	000000c4 _fwalk
10100a34 g     F .text	00000084 .hidden __divsi3
101030e0 g     F .text	00000124 _malloc_trim_r
101063e4 g       *ABS*	00000000 __CTOR_END__
101063e4 g       *ABS*	00000000 __flash_rodata_start
101063e4 g       *ABS*	00000000 __DTOR_LIST__
10104208 g     F .text	00000038 alt_irq_init
10103f64 g     F .text	00000084 alt_release_fd
10100420 g     F .text	00000068 start_lcd
10106050 g     F .text	00000014 atexit
10102b2c g     F .text	00000060 _write_r
1010086c g     F .text	00000124 init_image
10107f9c g     O .rwdata	00000004 _impure_ptr
10109b04 g     O .bss	00000004 alt_argc
10102e38 g     F .text	0000021c __sflush_r
1010540c g     F .text	00000060 _do_dtors
10100020 g       .exceptions	00000000 alt_irq_entry
101002c4 g     F .text	00000068 lcd_reset
1010125c g     F .text	00000018 __fp_unlock_all
10107fa8 g     O .rwdata	00000008 alt_fs_list
10104ec8 g     F .text	0000006c alt_hostfs_write
10100020 g       *ABS*	00000000 __ram_exceptions_start
1010550c g     F .text	00000050 alt_ic_isr_register
10108018 g       *ABS*	00000000 _edata
10109c48 g       *ABS*	00000000 _end
10100824 g     F .text	00000048 configure_image
10100230 g       *ABS*	00000000 __ram_exceptions_end
101047cc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
101055e4 g     F .text	0000008c alt_ic_irq_disable
10102a4c g     F .text	0000007c __swrite
10107fa4 g     O .rwdata	00000004 __malloc_trim_threshold
10106064 g     F .text	00000038 exit
10101800 g     F .text	000000c4 _fwalk_reent
10100ab8 g     F .text	00000074 .hidden __modsi3
10100488 g     F .text	0000039c init_lcd
10120000 g       *ABS*	00000000 __alt_data_end
10100020 g     F .exceptions	00000000 alt_exception
10101238 g     F .text	00000004 __sfp_lock_release
101063b0 g     F .text	00000034 _exit
10105180 g     F .text	0000012c alt_alarm_start
10103574 g     F .text	000001bc __smakebuf_r
10100e2c g     F .text	00000098 strlen
10105a34 g     F .text	0000015c open
101054ec g     F .text	00000020 alt_icache_flush_all
1010800c g     O .rwdata	00000004 alt_priority_mask
1010555c g     F .text	00000088 alt_ic_irq_enable
10108010 g     O .rwdata	00000008 alt_alarm_list
101053ac g     F .text	00000060 _do_ctors
1010387c g     F .text	000000d8 close
10103bc4 g     F .text	00000084 alt_load
1010123c g     F .text	00000004 __sinit_lock_acquire
10104f9c g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10100000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10100000:	00440434 	movhi	at,4112
    ori r1, r1, %lo(_start)
10100004:	08408c14 	ori	at,at,560
    jmp r1
10100008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1010002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1010003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1010004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1010005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1010006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1010007c:	10000326 	beq	r2,zero,1010008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10100080:	20000226 	beq	r4,zero,1010008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10100084:	01000fc0 	call	101000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10100088:	00000706 	br	101000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1010008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10100098:	01001d00 	call	101001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1010009c:	1000021e 	bne	r2,zero,101000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
101000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
101000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
101000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
101000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
101000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
101000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
101000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
101000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
101000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
101000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
101000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
101000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
101000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
101000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
101000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
101000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
101000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
101000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
101000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
101000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
101000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
101000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
101000f8:	ef80083a 	eret

101000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
101000fc:	defff904 	addi	sp,sp,-28
10100100:	dfc00615 	stw	ra,24(sp)
10100104:	df000515 	stw	fp,20(sp)
10100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1010010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10100110:	0005313a 	rdctl	r2,ipending
10100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1010011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10100124:	00800044 	movi	r2,1
10100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1010012c:	e0fffb17 	ldw	r3,-20(fp)
10100130:	e0bffc17 	ldw	r2,-16(fp)
10100134:	1884703a 	and	r2,r3,r2
10100138:	10001426 	beq	r2,zero,1010018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1010013c:	00840474 	movhi	r2,4113
10100140:	10a6d204 	addi	r2,r2,-25784
10100144:	e0fffd17 	ldw	r3,-12(fp)
10100148:	180690fa 	slli	r3,r3,3
1010014c:	10c5883a 	add	r2,r2,r3
10100150:	10c00017 	ldw	r3,0(r2)
10100154:	00840474 	movhi	r2,4113
10100158:	10a6d204 	addi	r2,r2,-25784
1010015c:	e13ffd17 	ldw	r4,-12(fp)
10100160:	200890fa 	slli	r4,r4,3
10100164:	1105883a 	add	r2,r2,r4
10100168:	10800104 	addi	r2,r2,4
1010016c:	10800017 	ldw	r2,0(r2)
10100170:	1009883a 	mov	r4,r2
10100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1010017c:	0005313a 	rdctl	r2,ipending
10100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10100184:	e0bfff17 	ldw	r2,-4(fp)
10100188:	00000706 	br	101001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1010018c:	e0bffc17 	ldw	r2,-16(fp)
10100190:	1085883a 	add	r2,r2,r2
10100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10100198:	e0bffd17 	ldw	r2,-12(fp)
1010019c:	10800044 	addi	r2,r2,1
101001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
101001a4:	003fe106 	br	1010012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
101001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
101001ac:	e0bffb17 	ldw	r2,-20(fp)
101001b0:	103fdb1e 	bne	r2,zero,10100120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
101001b4:	0001883a 	nop
}
101001b8:	0001883a 	nop
101001bc:	e037883a 	mov	sp,fp
101001c0:	dfc00117 	ldw	ra,4(sp)
101001c4:	df000017 	ldw	fp,0(sp)
101001c8:	dec00204 	addi	sp,sp,8
101001cc:	f800283a 	ret

101001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
101001d0:	defffb04 	addi	sp,sp,-20
101001d4:	dfc00415 	stw	ra,16(sp)
101001d8:	df000315 	stw	fp,12(sp)
101001dc:	df000304 	addi	fp,sp,12
101001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
101001e4:	00bfffc4 	movi	r2,-1
101001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
101001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
101001f0:	d0a6e117 	ldw	r2,-25724(gp)
101001f4:	10000726 	beq	r2,zero,10100214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
101001f8:	d0a6e117 	ldw	r2,-25724(gp)
101001fc:	e0fffd17 	ldw	r3,-12(fp)
10100200:	e1bffe17 	ldw	r6,-8(fp)
10100204:	e17fff17 	ldw	r5,-4(fp)
10100208:	1809883a 	mov	r4,r3
1010020c:	103ee83a 	callr	r2
10100210:	00000206 	br	1010021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10100214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10100218:	0005883a 	mov	r2,zero
}
1010021c:	e037883a 	mov	sp,fp
10100220:	dfc00117 	ldw	ra,4(sp)
10100224:	df000017 	ldw	fp,0(sp)
10100228:	dec00204 	addi	sp,sp,8
1010022c:	f800283a 	ret

Disassembly of section .text:

10100230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10100230:	06c404b4 	movhi	sp,4114
    ori sp, sp, %lo(__alt_stack_pointer)
10100234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10100238:	06840434 	movhi	gp,4112
    ori gp, gp, %lo(_gp)
1010023c:	d6bfe614 	ori	gp,gp,65432
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10100240:	00840434 	movhi	r2,4112
    ori r2, r2, %lo(__bss_start)
10100244:	10a6bd14 	ori	r2,r2,39668

    movhi r3, %hi(__bss_end)
10100248:	00c40434 	movhi	r3,4112
    ori r3, r3, %lo(__bss_end)
1010024c:	18e71214 	ori	r3,r3,40008

    beq r2, r3, 1f
10100250:	10c00326 	beq	r2,r3,10100260 <_start+0x30>

0:
    stw zero, (r2)
10100254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10100258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1010025c:	10fffd36 	bltu	r2,r3,10100254 <__alt_data_end+0xfffe0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10100260:	0103bc40 	call	10103bc4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10100264:	0103d600 	call	10103d60 <alt_main>

10100268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10100268:	003fff06 	br	10100268 <__alt_data_end+0xfffe0268>

1010026c <lcd_flag_set>:
#define LCD_REG_NB_PARAM				0x0C
#define LCD_REG_PARAM(index)+ index*2



void lcd_flag_set (uint16_t flag){
1010026c:	defffd04 	addi	sp,sp,-12
10100270:	df000215 	stw	fp,8(sp)
10100274:	df000204 	addi	fp,sp,8
10100278:	2005883a 	mov	r2,r4
1010027c:	e0bfff0d 	sth	r2,-4(fp)
	uint16_t reg_flag_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
10100280:	00840034 	movhi	r2,4096
10100284:	10840204 	addi	r2,r2,4104
10100288:	1080002b 	ldhuio	r2,0(r2)
1010028c:	10bfffcc 	andi	r2,r2,65535
10100290:	e0bffe0d 	sth	r2,-8(fp)
	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS, reg_flag_val | flag);
10100294:	e0fffe0b 	ldhu	r3,-8(fp)
10100298:	e0bfff0b 	ldhu	r2,-4(fp)
1010029c:	1884b03a 	or	r2,r3,r2
101002a0:	10ffffcc 	andi	r3,r2,65535
101002a4:	00840034 	movhi	r2,4096
101002a8:	10840204 	addi	r2,r2,4104
101002ac:	10c0002d 	sthio	r3,0(r2)
}
101002b0:	0001883a 	nop
101002b4:	e037883a 	mov	sp,fp
101002b8:	df000017 	ldw	fp,0(sp)
101002bc:	dec00104 	addi	sp,sp,4
101002c0:	f800283a 	ret

101002c4 <lcd_reset>:

void lcd_reset(){
101002c4:	defffd04 	addi	sp,sp,-12
101002c8:	dfc00215 	stw	ra,8(sp)
101002cc:	df000115 	stw	fp,4(sp)
101002d0:	df000104 	addi	fp,sp,4
	lcd_flag_set(0x04);
101002d4:	01000104 	movi	r4,4
101002d8:	010026c0 	call	1010026c <lcd_flag_set>
	uint16_t reg_flag_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
101002dc:	00840034 	movhi	r2,4096
101002e0:	10840204 	addi	r2,r2,4104
101002e4:	1080002b 	ldhuio	r2,0(r2)
101002e8:	10bfffcc 	andi	r2,r2,65535
101002ec:	e0bfff0d 	sth	r2,-4(fp)
	while( reg_flag_val & 0x04){
101002f0:	00000506 	br	10100308 <lcd_reset+0x44>
		reg_flag_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
101002f4:	00840034 	movhi	r2,4096
101002f8:	10840204 	addi	r2,r2,4104
101002fc:	1080002b 	ldhuio	r2,0(r2)
10100300:	10bfffcc 	andi	r2,r2,65535
10100304:	e0bfff0d 	sth	r2,-4(fp)
}

void lcd_reset(){
	lcd_flag_set(0x04);
	uint16_t reg_flag_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
	while( reg_flag_val & 0x04){
10100308:	e0bfff0b 	ldhu	r2,-4(fp)
1010030c:	1080010c 	andi	r2,r2,4
10100310:	103ff81e 	bne	r2,zero,101002f4 <__alt_data_end+0xfffe02f4>
		reg_flag_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
	}
}
10100314:	0001883a 	nop
10100318:	e037883a 	mov	sp,fp
1010031c:	dfc00117 	ldw	ra,4(sp)
10100320:	df000017 	ldw	fp,0(sp)
10100324:	dec00204 	addi	sp,sp,8
10100328:	f800283a 	ret

1010032c <send_command>:

void send_command(uint16_t cmd, uint16_t n, uint16_t* params)
{
1010032c:	defffb04 	addi	sp,sp,-20
10100330:	df000415 	stw	fp,16(sp)
10100334:	df000404 	addi	fp,sp,16
10100338:	2007883a 	mov	r3,r4
1010033c:	2805883a 	mov	r2,r5
10100340:	e1bfff15 	stw	r6,-4(fp)
10100344:	e0fffd0d 	sth	r3,-12(fp)
10100348:	e0bffe0d 	sth	r2,-8(fp)
	uint16_t index = 0;
1010034c:	e03ffc0d 	sth	zero,-16(fp)

	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_CMD_REG, cmd);
10100350:	e0fffd0b 	ldhu	r3,-12(fp)
10100354:	00840034 	movhi	r2,4096
10100358:	10840284 	addi	r2,r2,4106
1010035c:	10c0002d 	sthio	r3,0(r2)
	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_NB_PARAM, n);
10100360:	e0fffe0b 	ldhu	r3,-8(fp)
10100364:	00840034 	movhi	r2,4096
10100368:	10840304 	addi	r2,r2,4108
1010036c:	10c0002d 	sthio	r3,0(r2)


	while(index < n){
10100370:	00001106 	br	101003b8 <send_command+0x8c>
		IOWR_16DIRECT(LCD_0_BASE, LCD_REG_PARAM(index), params[index]);
10100374:	e0bffc0b 	ldhu	r2,-16(fp)
10100378:	1085883a 	add	r2,r2,r2
1010037c:	1007883a 	mov	r3,r2
10100380:	00840034 	movhi	r2,4096
10100384:	10840004 	addi	r2,r2,4096
10100388:	1887883a 	add	r3,r3,r2
1010038c:	e0bffc0b 	ldhu	r2,-16(fp)
10100390:	1085883a 	add	r2,r2,r2
10100394:	1009883a 	mov	r4,r2
10100398:	e0bfff17 	ldw	r2,-4(fp)
1010039c:	1105883a 	add	r2,r2,r4
101003a0:	1080000b 	ldhu	r2,0(r2)
101003a4:	10bfffcc 	andi	r2,r2,65535
101003a8:	1880002d 	sthio	r2,0(r3)
		++index;
101003ac:	e0bffc0b 	ldhu	r2,-16(fp)
101003b0:	10800044 	addi	r2,r2,1
101003b4:	e0bffc0d 	sth	r2,-16(fp)

	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_CMD_REG, cmd);
	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_NB_PARAM, n);


	while(index < n){
101003b8:	e0fffc0b 	ldhu	r3,-16(fp)
101003bc:	e0bffe0b 	ldhu	r2,-8(fp)
101003c0:	18bfec36 	bltu	r3,r2,10100374 <__alt_data_end+0xfffe0374>
		IOWR_16DIRECT(LCD_0_BASE, LCD_REG_PARAM(index), params[index]);
		++index;
	}

	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS, 0x2);
101003c4:	00c00084 	movi	r3,2
101003c8:	00840034 	movhi	r2,4096
101003cc:	10840204 	addi	r2,r2,4104
101003d0:	10c0002d 	sthio	r3,0(r2)
	uint16_t reg_flags = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
101003d4:	00840034 	movhi	r2,4096
101003d8:	10840204 	addi	r2,r2,4104
101003dc:	1080002b 	ldhuio	r2,0(r2)
101003e0:	10bfffcc 	andi	r2,r2,65535
101003e4:	e0bffc8d 	sth	r2,-14(fp)
	while(reg_flags & 0x2){
101003e8:	00000506 	br	10100400 <send_command+0xd4>
		reg_flags = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
101003ec:	00840034 	movhi	r2,4096
101003f0:	10840204 	addi	r2,r2,4104
101003f4:	1080002b 	ldhuio	r2,0(r2)
101003f8:	10bfffcc 	andi	r2,r2,65535
101003fc:	e0bffc8d 	sth	r2,-14(fp)
		++index;
	}

	IOWR_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS, 0x2);
	uint16_t reg_flags = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
	while(reg_flags & 0x2){
10100400:	e0bffc8b 	ldhu	r2,-14(fp)
10100404:	1080008c 	andi	r2,r2,2
10100408:	103ff81e 	bne	r2,zero,101003ec <__alt_data_end+0xfffe03ec>
		reg_flags = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
	}
}
1010040c:	0001883a 	nop
10100410:	e037883a 	mov	sp,fp
10100414:	df000017 	ldw	fp,0(sp)
10100418:	dec00104 	addi	sp,sp,4
1010041c:	f800283a 	ret

10100420 <start_lcd>:

void start_lcd(){
10100420:	defffd04 	addi	sp,sp,-12
10100424:	dfc00215 	stw	ra,8(sp)
10100428:	df000115 	stw	fp,4(sp)
1010042c:	df000104 	addi	fp,sp,4
	lcd_flag_set(0x01);
10100430:	01000044 	movi	r4,1
10100434:	010026c0 	call	1010026c <lcd_flag_set>
	uint16_t reg_flags_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
10100438:	00840034 	movhi	r2,4096
1010043c:	10840204 	addi	r2,r2,4104
10100440:	1080002b 	ldhuio	r2,0(r2)
10100444:	10bfffcc 	andi	r2,r2,65535
10100448:	e0bfff0d 	sth	r2,-4(fp)

	while(reg_flags_val & 0x1){
1010044c:	00000506 	br	10100464 <start_lcd+0x44>
		reg_flags_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
10100450:	00840034 	movhi	r2,4096
10100454:	10840204 	addi	r2,r2,4104
10100458:	1080002b 	ldhuio	r2,0(r2)
1010045c:	10bfffcc 	andi	r2,r2,65535
10100460:	e0bfff0d 	sth	r2,-4(fp)

void start_lcd(){
	lcd_flag_set(0x01);
	uint16_t reg_flags_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);

	while(reg_flags_val & 0x1){
10100464:	e0bfff0b 	ldhu	r2,-4(fp)
10100468:	1080004c 	andi	r2,r2,1
1010046c:	103ff81e 	bne	r2,zero,10100450 <__alt_data_end+0xfffe0450>
		reg_flags_val = IORD_16DIRECT(LCD_0_BASE, LCD_REG_FLAGS);
	}
}
10100470:	0001883a 	nop
10100474:	e037883a 	mov	sp,fp
10100478:	dfc00117 	ldw	ra,4(sp)
1010047c:	df000017 	ldw	fp,0(sp)
10100480:	dec00204 	addi	sp,sp,8
10100484:	f800283a 	ret

10100488 <init_lcd>:

void init_lcd(){
10100488:	deffd704 	addi	sp,sp,-164
1010048c:	dfc02815 	stw	ra,160(sp)
10100490:	df002715 	stw	fp,156(sp)
10100494:	df002704 	addi	fp,sp,156
	send_command(0x11, 0, (uint16_t []){ 0x09, 0x0a});
10100498:	00800244 	movi	r2,9
1010049c:	e0bfff0d 	sth	r2,-4(fp)
101004a0:	00800284 	movi	r2,10
101004a4:	e0bfff8d 	sth	r2,-2(fp)
101004a8:	e0bfff04 	addi	r2,fp,-4
101004ac:	100d883a 	mov	r6,r2
101004b0:	000b883a 	mov	r5,zero
101004b4:	01000444 	movi	r4,17
101004b8:	010032c0 	call	1010032c <send_command>
	send_command(0xcf, 3, (uint16_t []){ 0x0, 0x81, 0xc0});
101004bc:	e03ffd8d 	sth	zero,-10(fp)
101004c0:	00802044 	movi	r2,129
101004c4:	e0bffe0d 	sth	r2,-8(fp)
101004c8:	00803004 	movi	r2,192
101004cc:	e0bffe8d 	sth	r2,-6(fp)
101004d0:	e0bffd84 	addi	r2,fp,-10
101004d4:	100d883a 	mov	r6,r2
101004d8:	014000c4 	movi	r5,3
101004dc:	010033c4 	movi	r4,207
101004e0:	010032c0 	call	1010032c <send_command>
	send_command(0xed, 4, (uint16_t []){ 0x64, 0x03, 0x12, 0x81});
101004e4:	00801904 	movi	r2,100
101004e8:	e0bffb8d 	sth	r2,-18(fp)
101004ec:	008000c4 	movi	r2,3
101004f0:	e0bffc0d 	sth	r2,-16(fp)
101004f4:	00800484 	movi	r2,18
101004f8:	e0bffc8d 	sth	r2,-14(fp)
101004fc:	00802044 	movi	r2,129
10100500:	e0bffd0d 	sth	r2,-12(fp)
10100504:	e0bffb84 	addi	r2,fp,-18
10100508:	100d883a 	mov	r6,r2
1010050c:	01400104 	movi	r5,4
10100510:	01003b44 	movi	r4,237
10100514:	010032c0 	call	1010032c <send_command>
	send_command(0xe8, 3, (uint16_t []){ 0x85, 0x01, 0x0798});
10100518:	00802144 	movi	r2,133
1010051c:	e0bffa0d 	sth	r2,-24(fp)
10100520:	00800044 	movi	r2,1
10100524:	e0bffa8d 	sth	r2,-22(fp)
10100528:	0081e604 	movi	r2,1944
1010052c:	e0bffb0d 	sth	r2,-20(fp)
10100530:	e0bffa04 	addi	r2,fp,-24
10100534:	100d883a 	mov	r6,r2
10100538:	014000c4 	movi	r5,3
1010053c:	01003a04 	movi	r4,232
10100540:	010032c0 	call	1010032c <send_command>
	send_command(0xcb, 5, (uint16_t []){ 0x39, 0x2c, 0x00, 0x34, 0x02});
10100544:	00800e44 	movi	r2,57
10100548:	e0bff78d 	sth	r2,-34(fp)
1010054c:	00800b04 	movi	r2,44
10100550:	e0bff80d 	sth	r2,-32(fp)
10100554:	e03ff88d 	sth	zero,-30(fp)
10100558:	00800d04 	movi	r2,52
1010055c:	e0bff90d 	sth	r2,-28(fp)
10100560:	00800084 	movi	r2,2
10100564:	e0bff98d 	sth	r2,-26(fp)
10100568:	e0bff784 	addi	r2,fp,-34
1010056c:	100d883a 	mov	r6,r2
10100570:	01400144 	movi	r5,5
10100574:	010032c4 	movi	r4,203
10100578:	010032c0 	call	1010032c <send_command>
	send_command(0xf7, 1, (uint16_t []){ 0x20});
1010057c:	00800804 	movi	r2,32
10100580:	e0bff70d 	sth	r2,-36(fp)
10100584:	e0bff704 	addi	r2,fp,-36
10100588:	100d883a 	mov	r6,r2
1010058c:	01400044 	movi	r5,1
10100590:	01003dc4 	movi	r4,247
10100594:	010032c0 	call	1010032c <send_command>
	send_command(0xea, 2, (uint16_t []){ 0x00, 0x00});
10100598:	e03ff60d 	sth	zero,-40(fp)
1010059c:	e03ff68d 	sth	zero,-38(fp)
101005a0:	e0bff604 	addi	r2,fp,-40
101005a4:	100d883a 	mov	r6,r2
101005a8:	01400084 	movi	r5,2
101005ac:	01003a84 	movi	r4,234
101005b0:	010032c0 	call	1010032c <send_command>
	send_command(0xb1, 2, (uint16_t []){ 0x00, 0x1b});
101005b4:	e03ff50d 	sth	zero,-44(fp)
101005b8:	008006c4 	movi	r2,27
101005bc:	e0bff58d 	sth	r2,-42(fp)
101005c0:	e0bff504 	addi	r2,fp,-44
101005c4:	100d883a 	mov	r6,r2
101005c8:	01400084 	movi	r5,2
101005cc:	01002c44 	movi	r4,177
101005d0:	010032c0 	call	1010032c <send_command>
	send_command(0xb6, 2, (uint16_t []){ 0x0a, 0xa2});
101005d4:	00800284 	movi	r2,10
101005d8:	e0bff40d 	sth	r2,-48(fp)
101005dc:	00802884 	movi	r2,162
101005e0:	e0bff48d 	sth	r2,-46(fp)
101005e4:	e0bff404 	addi	r2,fp,-48
101005e8:	100d883a 	mov	r6,r2
101005ec:	01400084 	movi	r5,2
101005f0:	01002d84 	movi	r4,182
101005f4:	010032c0 	call	1010032c <send_command>
	send_command(0xc0, 1, (uint16_t []){ 0x05});
101005f8:	00800144 	movi	r2,5
101005fc:	e0bff38d 	sth	r2,-50(fp)
10100600:	e0bff384 	addi	r2,fp,-50
10100604:	100d883a 	mov	r6,r2
10100608:	01400044 	movi	r5,1
1010060c:	01003004 	movi	r4,192
10100610:	010032c0 	call	1010032c <send_command>
	send_command(0xc1, 1, (uint16_t []){ 0x11});
10100614:	00800444 	movi	r2,17
10100618:	e0bff30d 	sth	r2,-52(fp)
1010061c:	e0bff304 	addi	r2,fp,-52
10100620:	100d883a 	mov	r6,r2
10100624:	01400044 	movi	r5,1
10100628:	01003044 	movi	r4,193
1010062c:	010032c0 	call	1010032c <send_command>
	send_command(0xc5, 2, (uint16_t []){ 0x45, 0x45});
10100630:	00801144 	movi	r2,69
10100634:	e0bff20d 	sth	r2,-56(fp)
10100638:	00801144 	movi	r2,69
1010063c:	e0bff28d 	sth	r2,-54(fp)
10100640:	e0bff204 	addi	r2,fp,-56
10100644:	100d883a 	mov	r6,r2
10100648:	01400084 	movi	r5,2
1010064c:	01003144 	movi	r4,197
10100650:	010032c0 	call	1010032c <send_command>
	send_command(0xc7, 1, (uint16_t []){ 0xa2});
10100654:	00802884 	movi	r2,162
10100658:	e0bff18d 	sth	r2,-58(fp)
1010065c:	e0bff184 	addi	r2,fp,-58
10100660:	100d883a 	mov	r6,r2
10100664:	01400044 	movi	r5,1
10100668:	010031c4 	movi	r4,199
1010066c:	010032c0 	call	1010032c <send_command>
	send_command(0x36, 1, (uint16_t []){ 0x08}); //BGR (originally rgb with 0x48)
10100670:	00800204 	movi	r2,8
10100674:	e0bff10d 	sth	r2,-60(fp)
10100678:	e0bff104 	addi	r2,fp,-60
1010067c:	100d883a 	mov	r6,r2
10100680:	01400044 	movi	r5,1
10100684:	01000d84 	movi	r4,54
10100688:	010032c0 	call	1010032c <send_command>
	send_command(0xf2, 1, (uint16_t []){ 0x00});
1010068c:	e03ff08d 	sth	zero,-62(fp)
10100690:	e0bff084 	addi	r2,fp,-62
10100694:	100d883a 	mov	r6,r2
10100698:	01400044 	movi	r5,1
1010069c:	01003c84 	movi	r4,242
101006a0:	010032c0 	call	1010032c <send_command>
	send_command(0x26, 1, (uint16_t []){ 0x01});
101006a4:	00800044 	movi	r2,1
101006a8:	e0bff00d 	sth	r2,-64(fp)
101006ac:	e0bff004 	addi	r2,fp,-64
101006b0:	100d883a 	mov	r6,r2
101006b4:	01400044 	movi	r5,1
101006b8:	01000984 	movi	r4,38
101006bc:	010032c0 	call	1010032c <send_command>
	send_command(0xe0, 15, (uint16_t []){ 0xf, 0x26, 0x24, 0xb, 0xe, 0x8, 0x4b, 0xa8, 0x3b, 0x0a, 0x14, 0x06, 0x10, 0x09, 0x00});
101006c0:	00840434 	movhi	r2,4112
101006c4:	1098f904 	addi	r2,r2,25572
101006c8:	e0ffe884 	addi	r3,fp,-94
101006cc:	1009883a 	mov	r4,r2
101006d0:	00800784 	movi	r2,30
101006d4:	100d883a 	mov	r6,r2
101006d8:	200b883a 	mov	r5,r4
101006dc:	1809883a 	mov	r4,r3
101006e0:	0100c100 	call	10100c10 <memcpy>
101006e4:	e0bfe884 	addi	r2,fp,-94
101006e8:	100d883a 	mov	r6,r2
101006ec:	014003c4 	movi	r5,15
101006f0:	01003804 	movi	r4,224
101006f4:	010032c0 	call	1010032c <send_command>
	send_command(0xe1, 15, (uint16_t []){ 0x0, 0x1c, 0x20, 0x4, 0x10, 0x8, 0x34, 0x47, 0x44, 0x05, 0xb, 0x9, 0x2f, 0x36, 0x0f});
101006f8:	00840434 	movhi	r2,4112
101006fc:	10990084 	addi	r2,r2,25602
10100700:	e0ffe104 	addi	r3,fp,-124
10100704:	1009883a 	mov	r4,r2
10100708:	00800784 	movi	r2,30
1010070c:	100d883a 	mov	r6,r2
10100710:	200b883a 	mov	r5,r4
10100714:	1809883a 	mov	r4,r3
10100718:	0100c100 	call	10100c10 <memcpy>
1010071c:	e0bfe104 	addi	r2,fp,-124
10100720:	100d883a 	mov	r6,r2
10100724:	014003c4 	movi	r5,15
10100728:	01003844 	movi	r4,225
1010072c:	010032c0 	call	1010032c <send_command>
	send_command(0x2a, 4, (uint16_t []){ 0x0, 0x0, 0x0, 0xef});
10100730:	e03fdf0d 	sth	zero,-132(fp)
10100734:	e03fdf8d 	sth	zero,-130(fp)
10100738:	e03fe00d 	sth	zero,-128(fp)
1010073c:	00803bc4 	movi	r2,239
10100740:	e0bfe08d 	sth	r2,-126(fp)
10100744:	e0bfdf04 	addi	r2,fp,-132
10100748:	100d883a 	mov	r6,r2
1010074c:	01400104 	movi	r5,4
10100750:	01000a84 	movi	r4,42
10100754:	010032c0 	call	1010032c <send_command>
	send_command(0x2b, 4, (uint16_t []){ 0x0, 0x0, 0x01, 0x3f});
10100758:	e03fdd0d 	sth	zero,-140(fp)
1010075c:	e03fdd8d 	sth	zero,-138(fp)
10100760:	00800044 	movi	r2,1
10100764:	e0bfde0d 	sth	r2,-136(fp)
10100768:	00800fc4 	movi	r2,63
1010076c:	e0bfde8d 	sth	r2,-134(fp)
10100770:	e0bfdd04 	addi	r2,fp,-140
10100774:	100d883a 	mov	r6,r2
10100778:	01400104 	movi	r5,4
1010077c:	01000ac4 	movi	r4,43
10100780:	010032c0 	call	1010032c <send_command>
	send_command(0x3a, 1, (uint16_t []){ 0x55}); //RGB
10100784:	00801544 	movi	r2,85
10100788:	e0bfdc8d 	sth	r2,-142(fp)
1010078c:	e0bfdc84 	addi	r2,fp,-142
10100790:	100d883a 	mov	r6,r2
10100794:	01400044 	movi	r5,1
10100798:	01000e84 	movi	r4,58
1010079c:	010032c0 	call	1010032c <send_command>
	send_command(0xf6, 3, (uint16_t []){ 0x01, 0x30, 0x0});
101007a0:	00800044 	movi	r2,1
101007a4:	e0bfdb0d 	sth	r2,-148(fp)
101007a8:	00800c04 	movi	r2,48
101007ac:	e0bfdb8d 	sth	r2,-146(fp)
101007b0:	e03fdc0d 	sth	zero,-144(fp)
101007b4:	e0bfdb04 	addi	r2,fp,-148
101007b8:	100d883a 	mov	r6,r2
101007bc:	014000c4 	movi	r5,3
101007c0:	01003d84 	movi	r4,246
101007c4:	010032c0 	call	1010032c <send_command>
	send_command(0x29, 0, (uint16_t []){ 0x09, 0x0a});
101007c8:	00800244 	movi	r2,9
101007cc:	e0bfda0d 	sth	r2,-152(fp)
101007d0:	00800284 	movi	r2,10
101007d4:	e0bfda8d 	sth	r2,-150(fp)
101007d8:	e0bfda04 	addi	r2,fp,-152
101007dc:	100d883a 	mov	r6,r2
101007e0:	000b883a 	mov	r5,zero
101007e4:	01000a44 	movi	r4,41
101007e8:	010032c0 	call	1010032c <send_command>
	send_command(0x2c, 0, (uint16_t []){ 0x09, 0x0a});
101007ec:	00800244 	movi	r2,9
101007f0:	e0bfd90d 	sth	r2,-156(fp)
101007f4:	00800284 	movi	r2,10
101007f8:	e0bfd98d 	sth	r2,-154(fp)
101007fc:	e1bfd904 	addi	r6,fp,-156
10100800:	000b883a 	mov	r5,zero
10100804:	01000b04 	movi	r4,44
10100808:	010032c0 	call	1010032c <send_command>
}
1010080c:	0001883a 	nop
10100810:	e037883a 	mov	sp,fp
10100814:	dfc00117 	ldw	ra,4(sp)
10100818:	df000017 	ldw	fp,0(sp)
1010081c:	dec00204 	addi	sp,sp,8
10100820:	f800283a 	ret

10100824 <configure_image>:

void configure_image(uint32_t image_address, uint32_t image_size){
10100824:	defffd04 	addi	sp,sp,-12
10100828:	df000215 	stw	fp,8(sp)
1010082c:	df000204 	addi	fp,sp,8
10100830:	e13ffe15 	stw	r4,-8(fp)
10100834:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(LCD_0_BASE, LCD_REG_IMG_ADDRESS, image_address);
10100838:	e0fffe17 	ldw	r3,-8(fp)
1010083c:	00840034 	movhi	r2,4096
10100840:	10840004 	addi	r2,r2,4096
10100844:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(LCD_0_BASE, LCD_REG_IMG_LENGTH, image_size);
10100848:	e0ffff17 	ldw	r3,-4(fp)
1010084c:	00840034 	movhi	r2,4096
10100850:	10840104 	addi	r2,r2,4100
10100854:	10c00035 	stwio	r3,0(r2)
}
10100858:	0001883a 	nop
1010085c:	e037883a 	mov	sp,fp
10100860:	df000017 	ldw	fp,0(sp)
10100864:	dec00104 	addi	sp,sp,4
10100868:	f800283a 	ret

1010086c <init_image>:


void init_image(uint32_t image_address, uint32_t rows, uint32_t cols){
1010086c:	defff804 	addi	sp,sp,-32
10100870:	dfc00715 	stw	ra,28(sp)
10100874:	df000615 	stw	fp,24(sp)
10100878:	df000604 	addi	fp,sp,24
1010087c:	e13ffd15 	stw	r4,-12(fp)
10100880:	e17ffe15 	stw	r5,-8(fp)
10100884:	e1bfff15 	stw	r6,-4(fp)
	uint32_t i = 0;
10100888:	e03ffa15 	stw	zero,-24(fp)
	uint16_t color = 0xF800;
1010088c:	00be0004 	movi	r2,-2048
10100890:	e0bffb0d 	sth	r2,-20(fp)

	while(i < rows * sizeof(uint16_t))
10100894:	00003306 	br	10100964 <init_image+0xf8>
	{
		uint32_t j = 0;
10100898:	e03ffc15 	stw	zero,-16(fp)
		if(i % 100 == 0)
1010089c:	e0bffa17 	ldw	r2,-24(fp)
101008a0:	01401904 	movi	r5,100
101008a4:	1009883a 	mov	r4,r2
101008a8:	0100b900 	call	10100b90 <__umodsi3>
101008ac:	1000251e 	bne	r2,zero,10100944 <init_image+0xd8>
			color = color == 0xF800 ? 0x001F : 0xF800;
101008b0:	e0fffb0b 	ldhu	r3,-20(fp)
101008b4:	00be0014 	movui	r2,63488
101008b8:	1880021e 	bne	r3,r2,101008c4 <init_image+0x58>
101008bc:	008007c4 	movi	r2,31
101008c0:	00000106 	br	101008c8 <init_image+0x5c>
101008c4:	00be0004 	movi	r2,-2048
101008c8:	e0bffb0d 	sth	r2,-20(fp)

		while(j < cols * sizeof(uint16_t))
101008cc:	00001d06 	br	10100944 <init_image+0xd8>
		{
			IOWR_16DIRECT(image_address, i * cols + j, color);
101008d0:	e17fff17 	ldw	r5,-4(fp)
101008d4:	e13ffa17 	ldw	r4,-24(fp)
101008d8:	0100be80 	call	10100be8 <__mulsi3>
101008dc:	1007883a 	mov	r3,r2
101008e0:	e0bffc17 	ldw	r2,-16(fp)
101008e4:	1887883a 	add	r3,r3,r2
101008e8:	e0bffd17 	ldw	r2,-12(fp)
101008ec:	1885883a 	add	r2,r3,r2
101008f0:	1007883a 	mov	r3,r2
101008f4:	e0bffb0b 	ldhu	r2,-20(fp)
101008f8:	1880002d 	sthio	r2,0(r3)
			if(IORD_16DIRECT(image_address, i * cols + j) != color)
101008fc:	e17fff17 	ldw	r5,-4(fp)
10100900:	e13ffa17 	ldw	r4,-24(fp)
10100904:	0100be80 	call	10100be8 <__mulsi3>
10100908:	1007883a 	mov	r3,r2
1010090c:	e0bffc17 	ldw	r2,-16(fp)
10100910:	1887883a 	add	r3,r3,r2
10100914:	e0bffd17 	ldw	r2,-12(fp)
10100918:	1885883a 	add	r2,r3,r2
1010091c:	1080002b 	ldhuio	r2,0(r2)
10100920:	10ffffcc 	andi	r3,r2,65535
10100924:	e0bffb0b 	ldhu	r2,-20(fp)
10100928:	18800326 	beq	r3,r2,10100938 <init_image+0xcc>
			{
				printf("Error writing to extender\n");
1010092c:	01040434 	movhi	r4,4112
10100930:	21190804 	addi	r4,r4,25632
10100934:	0100e180 	call	10100e18 <puts>
			}
			j += 2;
10100938:	e0bffc17 	ldw	r2,-16(fp)
1010093c:	10800084 	addi	r2,r2,2
10100940:	e0bffc15 	stw	r2,-16(fp)
	{
		uint32_t j = 0;
		if(i % 100 == 0)
			color = color == 0xF800 ? 0x001F : 0xF800;

		while(j < cols * sizeof(uint16_t))
10100944:	e0bfff17 	ldw	r2,-4(fp)
10100948:	1085883a 	add	r2,r2,r2
1010094c:	1007883a 	mov	r3,r2
10100950:	e0bffc17 	ldw	r2,-16(fp)
10100954:	10ffde36 	bltu	r2,r3,101008d0 <__alt_data_end+0xfffe08d0>
				printf("Error writing to extender\n");
			}
			j += 2;
		}

		i += 2;
10100958:	e0bffa17 	ldw	r2,-24(fp)
1010095c:	10800084 	addi	r2,r2,2
10100960:	e0bffa15 	stw	r2,-24(fp)

void init_image(uint32_t image_address, uint32_t rows, uint32_t cols){
	uint32_t i = 0;
	uint16_t color = 0xF800;

	while(i < rows * sizeof(uint16_t))
10100964:	e0bffe17 	ldw	r2,-8(fp)
10100968:	1085883a 	add	r2,r2,r2
1010096c:	1007883a 	mov	r3,r2
10100970:	e0bffa17 	ldw	r2,-24(fp)
10100974:	10ffc836 	bltu	r2,r3,10100898 <__alt_data_end+0xfffe0898>
			j += 2;
		}

		i += 2;
	}
}
10100978:	0001883a 	nop
1010097c:	e037883a 	mov	sp,fp
10100980:	dfc00117 	ldw	ra,4(sp)
10100984:	df000017 	ldw	fp,0(sp)
10100988:	dec00204 	addi	sp,sp,8
1010098c:	f800283a 	ret

10100990 <main>:

int main(){
10100990:	defffc04 	addi	sp,sp,-16
10100994:	dfc00315 	stw	ra,12(sp)
10100998:	df000215 	stw	fp,8(sp)
1010099c:	df000204 	addi	fp,sp,8
	lcd_reset();
101009a0:	01002c40 	call	101002c4 <lcd_reset>
	//delay(1000);

	printf("Initializing LCD\n");
101009a4:	01040434 	movhi	r4,4112
101009a8:	21190f04 	addi	r4,r4,25660
101009ac:	0100e180 	call	10100e18 <puts>
	init_lcd();
101009b0:	01004880 	call	10100488 <init_lcd>
	printf("LCD Initialized\n");
101009b4:	01040434 	movhi	r4,4112
101009b8:	21191404 	addi	r4,r4,25680
101009bc:	0100e180 	call	10100e18 <puts>

	uint32_t image_size = 320 * 240 * sizeof(uint16_t);
101009c0:	008000b4 	movhi	r2,2
101009c4:	10960004 	addi	r2,r2,22528
101009c8:	e0bffe15 	stw	r2,-8(fp)
	uint32_t image_address = HPS_0_BRIDGES_BASE;
101009cc:	e03fff15 	stw	zero,-4(fp)

	printf("Setting image address and size\n");
101009d0:	01040434 	movhi	r4,4112
101009d4:	21191804 	addi	r4,r4,25696
101009d8:	0100e180 	call	10100e18 <puts>
	init_image(image_address, 320, 240);
101009dc:	01803c04 	movi	r6,240
101009e0:	01405004 	movi	r5,320
101009e4:	e13fff17 	ldw	r4,-4(fp)
101009e8:	010086c0 	call	1010086c <init_image>
	printf("Image address and size set\n");
101009ec:	01040434 	movhi	r4,4112
101009f0:	21192004 	addi	r4,r4,25728
101009f4:	0100e180 	call	10100e18 <puts>

	printf("Configuring default image\n");
101009f8:	01040434 	movhi	r4,4112
101009fc:	21192704 	addi	r4,r4,25756
10100a00:	0100e180 	call	10100e18 <puts>
//	configure_image(image_address, image_size);
	printf("Default image configured... starting LCD\n");
10100a04:	01040434 	movhi	r4,4112
10100a08:	21192e04 	addi	r4,r4,25784
10100a0c:	0100e180 	call	10100e18 <puts>
//	start_lcd();
	printf("Display Stopped\n");
10100a10:	01040434 	movhi	r4,4112
10100a14:	21193904 	addi	r4,r4,25828
10100a18:	0100e180 	call	10100e18 <puts>

	return 0;
10100a1c:	0005883a 	mov	r2,zero
}
10100a20:	e037883a 	mov	sp,fp
10100a24:	dfc00117 	ldw	ra,4(sp)
10100a28:	df000017 	ldw	fp,0(sp)
10100a2c:	dec00204 	addi	sp,sp,8
10100a30:	f800283a 	ret

10100a34 <__divsi3>:
10100a34:	20001b16 	blt	r4,zero,10100aa4 <__divsi3+0x70>
10100a38:	000f883a 	mov	r7,zero
10100a3c:	28001616 	blt	r5,zero,10100a98 <__divsi3+0x64>
10100a40:	200d883a 	mov	r6,r4
10100a44:	29001a2e 	bgeu	r5,r4,10100ab0 <__divsi3+0x7c>
10100a48:	00800804 	movi	r2,32
10100a4c:	00c00044 	movi	r3,1
10100a50:	00000106 	br	10100a58 <__divsi3+0x24>
10100a54:	10000d26 	beq	r2,zero,10100a8c <__divsi3+0x58>
10100a58:	294b883a 	add	r5,r5,r5
10100a5c:	10bfffc4 	addi	r2,r2,-1
10100a60:	18c7883a 	add	r3,r3,r3
10100a64:	293ffb36 	bltu	r5,r4,10100a54 <__alt_data_end+0xfffe0a54>
10100a68:	0005883a 	mov	r2,zero
10100a6c:	18000726 	beq	r3,zero,10100a8c <__divsi3+0x58>
10100a70:	0005883a 	mov	r2,zero
10100a74:	31400236 	bltu	r6,r5,10100a80 <__divsi3+0x4c>
10100a78:	314dc83a 	sub	r6,r6,r5
10100a7c:	10c4b03a 	or	r2,r2,r3
10100a80:	1806d07a 	srli	r3,r3,1
10100a84:	280ad07a 	srli	r5,r5,1
10100a88:	183ffa1e 	bne	r3,zero,10100a74 <__alt_data_end+0xfffe0a74>
10100a8c:	38000126 	beq	r7,zero,10100a94 <__divsi3+0x60>
10100a90:	0085c83a 	sub	r2,zero,r2
10100a94:	f800283a 	ret
10100a98:	014bc83a 	sub	r5,zero,r5
10100a9c:	39c0005c 	xori	r7,r7,1
10100aa0:	003fe706 	br	10100a40 <__alt_data_end+0xfffe0a40>
10100aa4:	0109c83a 	sub	r4,zero,r4
10100aa8:	01c00044 	movi	r7,1
10100aac:	003fe306 	br	10100a3c <__alt_data_end+0xfffe0a3c>
10100ab0:	00c00044 	movi	r3,1
10100ab4:	003fee06 	br	10100a70 <__alt_data_end+0xfffe0a70>

10100ab8 <__modsi3>:
10100ab8:	20001716 	blt	r4,zero,10100b18 <__modsi3+0x60>
10100abc:	000f883a 	mov	r7,zero
10100ac0:	2005883a 	mov	r2,r4
10100ac4:	28001216 	blt	r5,zero,10100b10 <__modsi3+0x58>
10100ac8:	2900162e 	bgeu	r5,r4,10100b24 <__modsi3+0x6c>
10100acc:	01800804 	movi	r6,32
10100ad0:	00c00044 	movi	r3,1
10100ad4:	00000106 	br	10100adc <__modsi3+0x24>
10100ad8:	30000a26 	beq	r6,zero,10100b04 <__modsi3+0x4c>
10100adc:	294b883a 	add	r5,r5,r5
10100ae0:	31bfffc4 	addi	r6,r6,-1
10100ae4:	18c7883a 	add	r3,r3,r3
10100ae8:	293ffb36 	bltu	r5,r4,10100ad8 <__alt_data_end+0xfffe0ad8>
10100aec:	18000526 	beq	r3,zero,10100b04 <__modsi3+0x4c>
10100af0:	1806d07a 	srli	r3,r3,1
10100af4:	11400136 	bltu	r2,r5,10100afc <__modsi3+0x44>
10100af8:	1145c83a 	sub	r2,r2,r5
10100afc:	280ad07a 	srli	r5,r5,1
10100b00:	183ffb1e 	bne	r3,zero,10100af0 <__alt_data_end+0xfffe0af0>
10100b04:	38000126 	beq	r7,zero,10100b0c <__modsi3+0x54>
10100b08:	0085c83a 	sub	r2,zero,r2
10100b0c:	f800283a 	ret
10100b10:	014bc83a 	sub	r5,zero,r5
10100b14:	003fec06 	br	10100ac8 <__alt_data_end+0xfffe0ac8>
10100b18:	0109c83a 	sub	r4,zero,r4
10100b1c:	01c00044 	movi	r7,1
10100b20:	003fe706 	br	10100ac0 <__alt_data_end+0xfffe0ac0>
10100b24:	00c00044 	movi	r3,1
10100b28:	003ff106 	br	10100af0 <__alt_data_end+0xfffe0af0>

10100b2c <__udivsi3>:
10100b2c:	200d883a 	mov	r6,r4
10100b30:	2900152e 	bgeu	r5,r4,10100b88 <__udivsi3+0x5c>
10100b34:	28001416 	blt	r5,zero,10100b88 <__udivsi3+0x5c>
10100b38:	00800804 	movi	r2,32
10100b3c:	00c00044 	movi	r3,1
10100b40:	00000206 	br	10100b4c <__udivsi3+0x20>
10100b44:	10000e26 	beq	r2,zero,10100b80 <__udivsi3+0x54>
10100b48:	28000516 	blt	r5,zero,10100b60 <__udivsi3+0x34>
10100b4c:	294b883a 	add	r5,r5,r5
10100b50:	10bfffc4 	addi	r2,r2,-1
10100b54:	18c7883a 	add	r3,r3,r3
10100b58:	293ffa36 	bltu	r5,r4,10100b44 <__alt_data_end+0xfffe0b44>
10100b5c:	18000826 	beq	r3,zero,10100b80 <__udivsi3+0x54>
10100b60:	0005883a 	mov	r2,zero
10100b64:	31400236 	bltu	r6,r5,10100b70 <__udivsi3+0x44>
10100b68:	314dc83a 	sub	r6,r6,r5
10100b6c:	10c4b03a 	or	r2,r2,r3
10100b70:	1806d07a 	srli	r3,r3,1
10100b74:	280ad07a 	srli	r5,r5,1
10100b78:	183ffa1e 	bne	r3,zero,10100b64 <__alt_data_end+0xfffe0b64>
10100b7c:	f800283a 	ret
10100b80:	0005883a 	mov	r2,zero
10100b84:	f800283a 	ret
10100b88:	00c00044 	movi	r3,1
10100b8c:	003ff406 	br	10100b60 <__alt_data_end+0xfffe0b60>

10100b90 <__umodsi3>:
10100b90:	2005883a 	mov	r2,r4
10100b94:	2900122e 	bgeu	r5,r4,10100be0 <__umodsi3+0x50>
10100b98:	28001116 	blt	r5,zero,10100be0 <__umodsi3+0x50>
10100b9c:	01800804 	movi	r6,32
10100ba0:	00c00044 	movi	r3,1
10100ba4:	00000206 	br	10100bb0 <__umodsi3+0x20>
10100ba8:	30000c26 	beq	r6,zero,10100bdc <__umodsi3+0x4c>
10100bac:	28000516 	blt	r5,zero,10100bc4 <__umodsi3+0x34>
10100bb0:	294b883a 	add	r5,r5,r5
10100bb4:	31bfffc4 	addi	r6,r6,-1
10100bb8:	18c7883a 	add	r3,r3,r3
10100bbc:	293ffa36 	bltu	r5,r4,10100ba8 <__alt_data_end+0xfffe0ba8>
10100bc0:	18000626 	beq	r3,zero,10100bdc <__umodsi3+0x4c>
10100bc4:	1806d07a 	srli	r3,r3,1
10100bc8:	11400136 	bltu	r2,r5,10100bd0 <__umodsi3+0x40>
10100bcc:	1145c83a 	sub	r2,r2,r5
10100bd0:	280ad07a 	srli	r5,r5,1
10100bd4:	183ffb1e 	bne	r3,zero,10100bc4 <__alt_data_end+0xfffe0bc4>
10100bd8:	f800283a 	ret
10100bdc:	f800283a 	ret
10100be0:	00c00044 	movi	r3,1
10100be4:	003ff706 	br	10100bc4 <__alt_data_end+0xfffe0bc4>

10100be8 <__mulsi3>:
10100be8:	0005883a 	mov	r2,zero
10100bec:	20000726 	beq	r4,zero,10100c0c <__mulsi3+0x24>
10100bf0:	20c0004c 	andi	r3,r4,1
10100bf4:	2008d07a 	srli	r4,r4,1
10100bf8:	18000126 	beq	r3,zero,10100c00 <__mulsi3+0x18>
10100bfc:	1145883a 	add	r2,r2,r5
10100c00:	294b883a 	add	r5,r5,r5
10100c04:	203ffa1e 	bne	r4,zero,10100bf0 <__alt_data_end+0xfffe0bf0>
10100c08:	f800283a 	ret
10100c0c:	f800283a 	ret

10100c10 <memcpy>:
10100c10:	defffd04 	addi	sp,sp,-12
10100c14:	dfc00215 	stw	ra,8(sp)
10100c18:	dc400115 	stw	r17,4(sp)
10100c1c:	dc000015 	stw	r16,0(sp)
10100c20:	00c003c4 	movi	r3,15
10100c24:	2005883a 	mov	r2,r4
10100c28:	1980452e 	bgeu	r3,r6,10100d40 <memcpy+0x130>
10100c2c:	2906b03a 	or	r3,r5,r4
10100c30:	18c000cc 	andi	r3,r3,3
10100c34:	1800441e 	bne	r3,zero,10100d48 <memcpy+0x138>
10100c38:	347ffc04 	addi	r17,r6,-16
10100c3c:	8822d13a 	srli	r17,r17,4
10100c40:	28c00104 	addi	r3,r5,4
10100c44:	23400104 	addi	r13,r4,4
10100c48:	8820913a 	slli	r16,r17,4
10100c4c:	2b000204 	addi	r12,r5,8
10100c50:	22c00204 	addi	r11,r4,8
10100c54:	84000504 	addi	r16,r16,20
10100c58:	2a800304 	addi	r10,r5,12
10100c5c:	22400304 	addi	r9,r4,12
10100c60:	2c21883a 	add	r16,r5,r16
10100c64:	2811883a 	mov	r8,r5
10100c68:	200f883a 	mov	r7,r4
10100c6c:	41000017 	ldw	r4,0(r8)
10100c70:	1fc00017 	ldw	ra,0(r3)
10100c74:	63c00017 	ldw	r15,0(r12)
10100c78:	39000015 	stw	r4,0(r7)
10100c7c:	53800017 	ldw	r14,0(r10)
10100c80:	6fc00015 	stw	ra,0(r13)
10100c84:	5bc00015 	stw	r15,0(r11)
10100c88:	4b800015 	stw	r14,0(r9)
10100c8c:	18c00404 	addi	r3,r3,16
10100c90:	39c00404 	addi	r7,r7,16
10100c94:	42000404 	addi	r8,r8,16
10100c98:	6b400404 	addi	r13,r13,16
10100c9c:	63000404 	addi	r12,r12,16
10100ca0:	5ac00404 	addi	r11,r11,16
10100ca4:	52800404 	addi	r10,r10,16
10100ca8:	4a400404 	addi	r9,r9,16
10100cac:	1c3fef1e 	bne	r3,r16,10100c6c <__alt_data_end+0xfffe0c6c>
10100cb0:	89c00044 	addi	r7,r17,1
10100cb4:	380e913a 	slli	r7,r7,4
10100cb8:	310003cc 	andi	r4,r6,15
10100cbc:	02c000c4 	movi	r11,3
10100cc0:	11c7883a 	add	r3,r2,r7
10100cc4:	29cb883a 	add	r5,r5,r7
10100cc8:	5900212e 	bgeu	r11,r4,10100d50 <memcpy+0x140>
10100ccc:	1813883a 	mov	r9,r3
10100cd0:	2811883a 	mov	r8,r5
10100cd4:	200f883a 	mov	r7,r4
10100cd8:	42800017 	ldw	r10,0(r8)
10100cdc:	4a400104 	addi	r9,r9,4
10100ce0:	39ffff04 	addi	r7,r7,-4
10100ce4:	4abfff15 	stw	r10,-4(r9)
10100ce8:	42000104 	addi	r8,r8,4
10100cec:	59fffa36 	bltu	r11,r7,10100cd8 <__alt_data_end+0xfffe0cd8>
10100cf0:	213fff04 	addi	r4,r4,-4
10100cf4:	2008d0ba 	srli	r4,r4,2
10100cf8:	318000cc 	andi	r6,r6,3
10100cfc:	21000044 	addi	r4,r4,1
10100d00:	2109883a 	add	r4,r4,r4
10100d04:	2109883a 	add	r4,r4,r4
10100d08:	1907883a 	add	r3,r3,r4
10100d0c:	290b883a 	add	r5,r5,r4
10100d10:	30000626 	beq	r6,zero,10100d2c <memcpy+0x11c>
10100d14:	198d883a 	add	r6,r3,r6
10100d18:	29c00003 	ldbu	r7,0(r5)
10100d1c:	18c00044 	addi	r3,r3,1
10100d20:	29400044 	addi	r5,r5,1
10100d24:	19ffffc5 	stb	r7,-1(r3)
10100d28:	19bffb1e 	bne	r3,r6,10100d18 <__alt_data_end+0xfffe0d18>
10100d2c:	dfc00217 	ldw	ra,8(sp)
10100d30:	dc400117 	ldw	r17,4(sp)
10100d34:	dc000017 	ldw	r16,0(sp)
10100d38:	dec00304 	addi	sp,sp,12
10100d3c:	f800283a 	ret
10100d40:	2007883a 	mov	r3,r4
10100d44:	003ff206 	br	10100d10 <__alt_data_end+0xfffe0d10>
10100d48:	2007883a 	mov	r3,r4
10100d4c:	003ff106 	br	10100d14 <__alt_data_end+0xfffe0d14>
10100d50:	200d883a 	mov	r6,r4
10100d54:	003fee06 	br	10100d10 <__alt_data_end+0xfffe0d10>

10100d58 <_puts_r>:
10100d58:	defff604 	addi	sp,sp,-40
10100d5c:	dc000715 	stw	r16,28(sp)
10100d60:	2021883a 	mov	r16,r4
10100d64:	2809883a 	mov	r4,r5
10100d68:	dc400815 	stw	r17,32(sp)
10100d6c:	dfc00915 	stw	ra,36(sp)
10100d70:	2823883a 	mov	r17,r5
10100d74:	0100e2c0 	call	10100e2c <strlen>
10100d78:	10c00044 	addi	r3,r2,1
10100d7c:	d8800115 	stw	r2,4(sp)
10100d80:	00840434 	movhi	r2,4112
10100d84:	10993d04 	addi	r2,r2,25844
10100d88:	d8800215 	stw	r2,8(sp)
10100d8c:	00800044 	movi	r2,1
10100d90:	d8800315 	stw	r2,12(sp)
10100d94:	00800084 	movi	r2,2
10100d98:	dc400015 	stw	r17,0(sp)
10100d9c:	d8c00615 	stw	r3,24(sp)
10100da0:	dec00415 	stw	sp,16(sp)
10100da4:	d8800515 	stw	r2,20(sp)
10100da8:	80000226 	beq	r16,zero,10100db4 <_puts_r+0x5c>
10100dac:	80800e17 	ldw	r2,56(r16)
10100db0:	10001426 	beq	r2,zero,10100e04 <_puts_r+0xac>
10100db4:	81400217 	ldw	r5,8(r16)
10100db8:	2880030b 	ldhu	r2,12(r5)
10100dbc:	10c8000c 	andi	r3,r2,8192
10100dc0:	1800061e 	bne	r3,zero,10100ddc <_puts_r+0x84>
10100dc4:	29001917 	ldw	r4,100(r5)
10100dc8:	00f7ffc4 	movi	r3,-8193
10100dcc:	10880014 	ori	r2,r2,8192
10100dd0:	20c6703a 	and	r3,r4,r3
10100dd4:	2880030d 	sth	r2,12(r5)
10100dd8:	28c01915 	stw	r3,100(r5)
10100ddc:	d9800404 	addi	r6,sp,16
10100de0:	8009883a 	mov	r4,r16
10100de4:	01012740 	call	10101274 <__sfvwrite_r>
10100de8:	1000091e 	bne	r2,zero,10100e10 <_puts_r+0xb8>
10100dec:	00800284 	movi	r2,10
10100df0:	dfc00917 	ldw	ra,36(sp)
10100df4:	dc400817 	ldw	r17,32(sp)
10100df8:	dc000717 	ldw	r16,28(sp)
10100dfc:	dec00a04 	addi	sp,sp,40
10100e00:	f800283a 	ret
10100e04:	8009883a 	mov	r4,r16
10100e08:	01012240 	call	10101224 <__sinit>
10100e0c:	003fe906 	br	10100db4 <__alt_data_end+0xfffe0db4>
10100e10:	00bfffc4 	movi	r2,-1
10100e14:	003ff606 	br	10100df0 <__alt_data_end+0xfffe0df0>

10100e18 <puts>:
10100e18:	00840434 	movhi	r2,4112
10100e1c:	109fe704 	addi	r2,r2,32668
10100e20:	200b883a 	mov	r5,r4
10100e24:	11000017 	ldw	r4,0(r2)
10100e28:	0100d581 	jmpi	10100d58 <_puts_r>

10100e2c <strlen>:
10100e2c:	208000cc 	andi	r2,r4,3
10100e30:	10002026 	beq	r2,zero,10100eb4 <strlen+0x88>
10100e34:	20800007 	ldb	r2,0(r4)
10100e38:	10002026 	beq	r2,zero,10100ebc <strlen+0x90>
10100e3c:	2005883a 	mov	r2,r4
10100e40:	00000206 	br	10100e4c <strlen+0x20>
10100e44:	10c00007 	ldb	r3,0(r2)
10100e48:	18001826 	beq	r3,zero,10100eac <strlen+0x80>
10100e4c:	10800044 	addi	r2,r2,1
10100e50:	10c000cc 	andi	r3,r2,3
10100e54:	183ffb1e 	bne	r3,zero,10100e44 <__alt_data_end+0xfffe0e44>
10100e58:	10c00017 	ldw	r3,0(r2)
10100e5c:	01ffbff4 	movhi	r7,65279
10100e60:	39ffbfc4 	addi	r7,r7,-257
10100e64:	00ca303a 	nor	r5,zero,r3
10100e68:	01a02074 	movhi	r6,32897
10100e6c:	19c7883a 	add	r3,r3,r7
10100e70:	31a02004 	addi	r6,r6,-32640
10100e74:	1946703a 	and	r3,r3,r5
10100e78:	1986703a 	and	r3,r3,r6
10100e7c:	1800091e 	bne	r3,zero,10100ea4 <strlen+0x78>
10100e80:	10800104 	addi	r2,r2,4
10100e84:	10c00017 	ldw	r3,0(r2)
10100e88:	19cb883a 	add	r5,r3,r7
10100e8c:	00c6303a 	nor	r3,zero,r3
10100e90:	28c6703a 	and	r3,r5,r3
10100e94:	1986703a 	and	r3,r3,r6
10100e98:	183ff926 	beq	r3,zero,10100e80 <__alt_data_end+0xfffe0e80>
10100e9c:	00000106 	br	10100ea4 <strlen+0x78>
10100ea0:	10800044 	addi	r2,r2,1
10100ea4:	10c00007 	ldb	r3,0(r2)
10100ea8:	183ffd1e 	bne	r3,zero,10100ea0 <__alt_data_end+0xfffe0ea0>
10100eac:	1105c83a 	sub	r2,r2,r4
10100eb0:	f800283a 	ret
10100eb4:	2005883a 	mov	r2,r4
10100eb8:	003fe706 	br	10100e58 <__alt_data_end+0xfffe0e58>
10100ebc:	0005883a 	mov	r2,zero
10100ec0:	f800283a 	ret

10100ec4 <__fp_unlock>:
10100ec4:	0005883a 	mov	r2,zero
10100ec8:	f800283a 	ret

10100ecc <_cleanup_r>:
10100ecc:	01440434 	movhi	r5,4112
10100ed0:	294b4d04 	addi	r5,r5,11572
10100ed4:	01018001 	jmpi	10101800 <_fwalk_reent>

10100ed8 <__sinit.part.1>:
10100ed8:	defff704 	addi	sp,sp,-36
10100edc:	00c40434 	movhi	r3,4112
10100ee0:	dfc00815 	stw	ra,32(sp)
10100ee4:	ddc00715 	stw	r23,28(sp)
10100ee8:	dd800615 	stw	r22,24(sp)
10100eec:	dd400515 	stw	r21,20(sp)
10100ef0:	dd000415 	stw	r20,16(sp)
10100ef4:	dcc00315 	stw	r19,12(sp)
10100ef8:	dc800215 	stw	r18,8(sp)
10100efc:	dc400115 	stw	r17,4(sp)
10100f00:	dc000015 	stw	r16,0(sp)
10100f04:	18c3b304 	addi	r3,r3,3788
10100f08:	24000117 	ldw	r16,4(r4)
10100f0c:	20c00f15 	stw	r3,60(r4)
10100f10:	2080bb04 	addi	r2,r4,748
10100f14:	00c000c4 	movi	r3,3
10100f18:	20c0b915 	stw	r3,740(r4)
10100f1c:	2080ba15 	stw	r2,744(r4)
10100f20:	2000b815 	stw	zero,736(r4)
10100f24:	05c00204 	movi	r23,8
10100f28:	00800104 	movi	r2,4
10100f2c:	2025883a 	mov	r18,r4
10100f30:	b80d883a 	mov	r6,r23
10100f34:	81001704 	addi	r4,r16,92
10100f38:	000b883a 	mov	r5,zero
10100f3c:	80000015 	stw	zero,0(r16)
10100f40:	80000115 	stw	zero,4(r16)
10100f44:	80000215 	stw	zero,8(r16)
10100f48:	8080030d 	sth	r2,12(r16)
10100f4c:	80001915 	stw	zero,100(r16)
10100f50:	8000038d 	sth	zero,14(r16)
10100f54:	80000415 	stw	zero,16(r16)
10100f58:	80000515 	stw	zero,20(r16)
10100f5c:	80000615 	stw	zero,24(r16)
10100f60:	01023100 	call	10102310 <memset>
10100f64:	05840434 	movhi	r22,4112
10100f68:	94400217 	ldw	r17,8(r18)
10100f6c:	05440434 	movhi	r21,4112
10100f70:	05040434 	movhi	r20,4112
10100f74:	04c40434 	movhi	r19,4112
10100f78:	b58a7c04 	addi	r22,r22,10736
10100f7c:	ad4a9304 	addi	r21,r21,10828
10100f80:	a50ab204 	addi	r20,r20,10952
10100f84:	9ccac904 	addi	r19,r19,11044
10100f88:	85800815 	stw	r22,32(r16)
10100f8c:	85400915 	stw	r21,36(r16)
10100f90:	85000a15 	stw	r20,40(r16)
10100f94:	84c00b15 	stw	r19,44(r16)
10100f98:	84000715 	stw	r16,28(r16)
10100f9c:	00800284 	movi	r2,10
10100fa0:	8880030d 	sth	r2,12(r17)
10100fa4:	00800044 	movi	r2,1
10100fa8:	b80d883a 	mov	r6,r23
10100fac:	89001704 	addi	r4,r17,92
10100fb0:	000b883a 	mov	r5,zero
10100fb4:	88000015 	stw	zero,0(r17)
10100fb8:	88000115 	stw	zero,4(r17)
10100fbc:	88000215 	stw	zero,8(r17)
10100fc0:	88001915 	stw	zero,100(r17)
10100fc4:	8880038d 	sth	r2,14(r17)
10100fc8:	88000415 	stw	zero,16(r17)
10100fcc:	88000515 	stw	zero,20(r17)
10100fd0:	88000615 	stw	zero,24(r17)
10100fd4:	01023100 	call	10102310 <memset>
10100fd8:	94000317 	ldw	r16,12(r18)
10100fdc:	00800484 	movi	r2,18
10100fe0:	8c400715 	stw	r17,28(r17)
10100fe4:	8d800815 	stw	r22,32(r17)
10100fe8:	8d400915 	stw	r21,36(r17)
10100fec:	8d000a15 	stw	r20,40(r17)
10100ff0:	8cc00b15 	stw	r19,44(r17)
10100ff4:	8080030d 	sth	r2,12(r16)
10100ff8:	00800084 	movi	r2,2
10100ffc:	80000015 	stw	zero,0(r16)
10101000:	80000115 	stw	zero,4(r16)
10101004:	80000215 	stw	zero,8(r16)
10101008:	80001915 	stw	zero,100(r16)
1010100c:	8080038d 	sth	r2,14(r16)
10101010:	80000415 	stw	zero,16(r16)
10101014:	80000515 	stw	zero,20(r16)
10101018:	80000615 	stw	zero,24(r16)
1010101c:	b80d883a 	mov	r6,r23
10101020:	000b883a 	mov	r5,zero
10101024:	81001704 	addi	r4,r16,92
10101028:	01023100 	call	10102310 <memset>
1010102c:	00800044 	movi	r2,1
10101030:	84000715 	stw	r16,28(r16)
10101034:	85800815 	stw	r22,32(r16)
10101038:	85400915 	stw	r21,36(r16)
1010103c:	85000a15 	stw	r20,40(r16)
10101040:	84c00b15 	stw	r19,44(r16)
10101044:	90800e15 	stw	r2,56(r18)
10101048:	dfc00817 	ldw	ra,32(sp)
1010104c:	ddc00717 	ldw	r23,28(sp)
10101050:	dd800617 	ldw	r22,24(sp)
10101054:	dd400517 	ldw	r21,20(sp)
10101058:	dd000417 	ldw	r20,16(sp)
1010105c:	dcc00317 	ldw	r19,12(sp)
10101060:	dc800217 	ldw	r18,8(sp)
10101064:	dc400117 	ldw	r17,4(sp)
10101068:	dc000017 	ldw	r16,0(sp)
1010106c:	dec00904 	addi	sp,sp,36
10101070:	f800283a 	ret

10101074 <__fp_lock>:
10101074:	0005883a 	mov	r2,zero
10101078:	f800283a 	ret

1010107c <__sfmoreglue>:
1010107c:	defffc04 	addi	sp,sp,-16
10101080:	dc800215 	stw	r18,8(sp)
10101084:	2825883a 	mov	r18,r5
10101088:	dc000015 	stw	r16,0(sp)
1010108c:	01401a04 	movi	r5,104
10101090:	2021883a 	mov	r16,r4
10101094:	913fffc4 	addi	r4,r18,-1
10101098:	dfc00315 	stw	ra,12(sp)
1010109c:	dc400115 	stw	r17,4(sp)
101010a0:	0100be80 	call	10100be8 <__mulsi3>
101010a4:	8009883a 	mov	r4,r16
101010a8:	11401d04 	addi	r5,r2,116
101010ac:	1023883a 	mov	r17,r2
101010b0:	01018c40 	call	101018c4 <_malloc_r>
101010b4:	1021883a 	mov	r16,r2
101010b8:	10000726 	beq	r2,zero,101010d8 <__sfmoreglue+0x5c>
101010bc:	11000304 	addi	r4,r2,12
101010c0:	10000015 	stw	zero,0(r2)
101010c4:	14800115 	stw	r18,4(r2)
101010c8:	11000215 	stw	r4,8(r2)
101010cc:	89801a04 	addi	r6,r17,104
101010d0:	000b883a 	mov	r5,zero
101010d4:	01023100 	call	10102310 <memset>
101010d8:	8005883a 	mov	r2,r16
101010dc:	dfc00317 	ldw	ra,12(sp)
101010e0:	dc800217 	ldw	r18,8(sp)
101010e4:	dc400117 	ldw	r17,4(sp)
101010e8:	dc000017 	ldw	r16,0(sp)
101010ec:	dec00404 	addi	sp,sp,16
101010f0:	f800283a 	ret

101010f4 <__sfp>:
101010f4:	defffb04 	addi	sp,sp,-20
101010f8:	dc000015 	stw	r16,0(sp)
101010fc:	04040434 	movhi	r16,4112
10101100:	841fe604 	addi	r16,r16,32664
10101104:	dcc00315 	stw	r19,12(sp)
10101108:	2027883a 	mov	r19,r4
1010110c:	81000017 	ldw	r4,0(r16)
10101110:	dfc00415 	stw	ra,16(sp)
10101114:	dc800215 	stw	r18,8(sp)
10101118:	20800e17 	ldw	r2,56(r4)
1010111c:	dc400115 	stw	r17,4(sp)
10101120:	1000021e 	bne	r2,zero,1010112c <__sfp+0x38>
10101124:	0100ed80 	call	10100ed8 <__sinit.part.1>
10101128:	81000017 	ldw	r4,0(r16)
1010112c:	2480b804 	addi	r18,r4,736
10101130:	047fffc4 	movi	r17,-1
10101134:	91000117 	ldw	r4,4(r18)
10101138:	94000217 	ldw	r16,8(r18)
1010113c:	213fffc4 	addi	r4,r4,-1
10101140:	20000a16 	blt	r4,zero,1010116c <__sfp+0x78>
10101144:	8080030f 	ldh	r2,12(r16)
10101148:	10000c26 	beq	r2,zero,1010117c <__sfp+0x88>
1010114c:	80c01d04 	addi	r3,r16,116
10101150:	00000206 	br	1010115c <__sfp+0x68>
10101154:	18bfe60f 	ldh	r2,-104(r3)
10101158:	10000826 	beq	r2,zero,1010117c <__sfp+0x88>
1010115c:	213fffc4 	addi	r4,r4,-1
10101160:	1c3ffd04 	addi	r16,r3,-12
10101164:	18c01a04 	addi	r3,r3,104
10101168:	247ffa1e 	bne	r4,r17,10101154 <__alt_data_end+0xfffe1154>
1010116c:	90800017 	ldw	r2,0(r18)
10101170:	10001d26 	beq	r2,zero,101011e8 <__sfp+0xf4>
10101174:	1025883a 	mov	r18,r2
10101178:	003fee06 	br	10101134 <__alt_data_end+0xfffe1134>
1010117c:	00bfffc4 	movi	r2,-1
10101180:	8080038d 	sth	r2,14(r16)
10101184:	00800044 	movi	r2,1
10101188:	8080030d 	sth	r2,12(r16)
1010118c:	80001915 	stw	zero,100(r16)
10101190:	80000015 	stw	zero,0(r16)
10101194:	80000215 	stw	zero,8(r16)
10101198:	80000115 	stw	zero,4(r16)
1010119c:	80000415 	stw	zero,16(r16)
101011a0:	80000515 	stw	zero,20(r16)
101011a4:	80000615 	stw	zero,24(r16)
101011a8:	01800204 	movi	r6,8
101011ac:	000b883a 	mov	r5,zero
101011b0:	81001704 	addi	r4,r16,92
101011b4:	01023100 	call	10102310 <memset>
101011b8:	8005883a 	mov	r2,r16
101011bc:	80000c15 	stw	zero,48(r16)
101011c0:	80000d15 	stw	zero,52(r16)
101011c4:	80001115 	stw	zero,68(r16)
101011c8:	80001215 	stw	zero,72(r16)
101011cc:	dfc00417 	ldw	ra,16(sp)
101011d0:	dcc00317 	ldw	r19,12(sp)
101011d4:	dc800217 	ldw	r18,8(sp)
101011d8:	dc400117 	ldw	r17,4(sp)
101011dc:	dc000017 	ldw	r16,0(sp)
101011e0:	dec00504 	addi	sp,sp,20
101011e4:	f800283a 	ret
101011e8:	01400104 	movi	r5,4
101011ec:	9809883a 	mov	r4,r19
101011f0:	010107c0 	call	1010107c <__sfmoreglue>
101011f4:	90800015 	stw	r2,0(r18)
101011f8:	103fde1e 	bne	r2,zero,10101174 <__alt_data_end+0xfffe1174>
101011fc:	00800304 	movi	r2,12
10101200:	98800015 	stw	r2,0(r19)
10101204:	0005883a 	mov	r2,zero
10101208:	003ff006 	br	101011cc <__alt_data_end+0xfffe11cc>

1010120c <_cleanup>:
1010120c:	00840434 	movhi	r2,4112
10101210:	109fe604 	addi	r2,r2,32664
10101214:	11000017 	ldw	r4,0(r2)
10101218:	01440434 	movhi	r5,4112
1010121c:	294b4d04 	addi	r5,r5,11572
10101220:	01018001 	jmpi	10101800 <_fwalk_reent>

10101224 <__sinit>:
10101224:	20800e17 	ldw	r2,56(r4)
10101228:	10000126 	beq	r2,zero,10101230 <__sinit+0xc>
1010122c:	f800283a 	ret
10101230:	0100ed81 	jmpi	10100ed8 <__sinit.part.1>

10101234 <__sfp_lock_acquire>:
10101234:	f800283a 	ret

10101238 <__sfp_lock_release>:
10101238:	f800283a 	ret

1010123c <__sinit_lock_acquire>:
1010123c:	f800283a 	ret

10101240 <__sinit_lock_release>:
10101240:	f800283a 	ret

10101244 <__fp_lock_all>:
10101244:	00840434 	movhi	r2,4112
10101248:	109fe704 	addi	r2,r2,32668
1010124c:	11000017 	ldw	r4,0(r2)
10101250:	01440434 	movhi	r5,4112
10101254:	29441d04 	addi	r5,r5,4212
10101258:	010173c1 	jmpi	1010173c <_fwalk>

1010125c <__fp_unlock_all>:
1010125c:	00840434 	movhi	r2,4112
10101260:	109fe704 	addi	r2,r2,32668
10101264:	11000017 	ldw	r4,0(r2)
10101268:	01440434 	movhi	r5,4112
1010126c:	2943b104 	addi	r5,r5,3780
10101270:	010173c1 	jmpi	1010173c <_fwalk>

10101274 <__sfvwrite_r>:
10101274:	30800217 	ldw	r2,8(r6)
10101278:	10006726 	beq	r2,zero,10101418 <__sfvwrite_r+0x1a4>
1010127c:	28c0030b 	ldhu	r3,12(r5)
10101280:	defff404 	addi	sp,sp,-48
10101284:	dd400715 	stw	r21,28(sp)
10101288:	dd000615 	stw	r20,24(sp)
1010128c:	dc000215 	stw	r16,8(sp)
10101290:	dfc00b15 	stw	ra,44(sp)
10101294:	df000a15 	stw	fp,40(sp)
10101298:	ddc00915 	stw	r23,36(sp)
1010129c:	dd800815 	stw	r22,32(sp)
101012a0:	dcc00515 	stw	r19,20(sp)
101012a4:	dc800415 	stw	r18,16(sp)
101012a8:	dc400315 	stw	r17,12(sp)
101012ac:	1880020c 	andi	r2,r3,8
101012b0:	2821883a 	mov	r16,r5
101012b4:	202b883a 	mov	r21,r4
101012b8:	3029883a 	mov	r20,r6
101012bc:	10002726 	beq	r2,zero,1010135c <__sfvwrite_r+0xe8>
101012c0:	28800417 	ldw	r2,16(r5)
101012c4:	10002526 	beq	r2,zero,1010135c <__sfvwrite_r+0xe8>
101012c8:	1880008c 	andi	r2,r3,2
101012cc:	a4400017 	ldw	r17,0(r20)
101012d0:	10002a26 	beq	r2,zero,1010137c <__sfvwrite_r+0x108>
101012d4:	05a00034 	movhi	r22,32768
101012d8:	0027883a 	mov	r19,zero
101012dc:	0025883a 	mov	r18,zero
101012e0:	b5bf0004 	addi	r22,r22,-1024
101012e4:	980d883a 	mov	r6,r19
101012e8:	a809883a 	mov	r4,r21
101012ec:	90004626 	beq	r18,zero,10101408 <__sfvwrite_r+0x194>
101012f0:	900f883a 	mov	r7,r18
101012f4:	b480022e 	bgeu	r22,r18,10101300 <__sfvwrite_r+0x8c>
101012f8:	01e00034 	movhi	r7,32768
101012fc:	39ff0004 	addi	r7,r7,-1024
10101300:	80800917 	ldw	r2,36(r16)
10101304:	81400717 	ldw	r5,28(r16)
10101308:	103ee83a 	callr	r2
1010130c:	00805a0e 	bge	zero,r2,10101478 <__sfvwrite_r+0x204>
10101310:	a0c00217 	ldw	r3,8(r20)
10101314:	98a7883a 	add	r19,r19,r2
10101318:	90a5c83a 	sub	r18,r18,r2
1010131c:	1885c83a 	sub	r2,r3,r2
10101320:	a0800215 	stw	r2,8(r20)
10101324:	103fef1e 	bne	r2,zero,101012e4 <__alt_data_end+0xfffe12e4>
10101328:	0005883a 	mov	r2,zero
1010132c:	dfc00b17 	ldw	ra,44(sp)
10101330:	df000a17 	ldw	fp,40(sp)
10101334:	ddc00917 	ldw	r23,36(sp)
10101338:	dd800817 	ldw	r22,32(sp)
1010133c:	dd400717 	ldw	r21,28(sp)
10101340:	dd000617 	ldw	r20,24(sp)
10101344:	dcc00517 	ldw	r19,20(sp)
10101348:	dc800417 	ldw	r18,16(sp)
1010134c:	dc400317 	ldw	r17,12(sp)
10101350:	dc000217 	ldw	r16,8(sp)
10101354:	dec00c04 	addi	sp,sp,48
10101358:	f800283a 	ret
1010135c:	800b883a 	mov	r5,r16
10101360:	a809883a 	mov	r4,r21
10101364:	0102b8c0 	call	10102b8c <__swsetup_r>
10101368:	1000ee1e 	bne	r2,zero,10101724 <__sfvwrite_r+0x4b0>
1010136c:	80c0030b 	ldhu	r3,12(r16)
10101370:	a4400017 	ldw	r17,0(r20)
10101374:	1880008c 	andi	r2,r3,2
10101378:	103fd61e 	bne	r2,zero,101012d4 <__alt_data_end+0xfffe12d4>
1010137c:	1880004c 	andi	r2,r3,1
10101380:	1000421e 	bne	r2,zero,1010148c <__sfvwrite_r+0x218>
10101384:	0039883a 	mov	fp,zero
10101388:	0025883a 	mov	r18,zero
1010138c:	90001a26 	beq	r18,zero,101013f8 <__sfvwrite_r+0x184>
10101390:	1880800c 	andi	r2,r3,512
10101394:	84c00217 	ldw	r19,8(r16)
10101398:	10002126 	beq	r2,zero,10101420 <__sfvwrite_r+0x1ac>
1010139c:	982f883a 	mov	r23,r19
101013a0:	94c09636 	bltu	r18,r19,101015fc <__sfvwrite_r+0x388>
101013a4:	1881200c 	andi	r2,r3,1152
101013a8:	1000a11e 	bne	r2,zero,10101630 <__sfvwrite_r+0x3bc>
101013ac:	81000017 	ldw	r4,0(r16)
101013b0:	b80d883a 	mov	r6,r23
101013b4:	e00b883a 	mov	r5,fp
101013b8:	01021b40 	call	101021b4 <memmove>
101013bc:	80c00217 	ldw	r3,8(r16)
101013c0:	81000017 	ldw	r4,0(r16)
101013c4:	9005883a 	mov	r2,r18
101013c8:	1ce7c83a 	sub	r19,r3,r19
101013cc:	25cf883a 	add	r7,r4,r23
101013d0:	84c00215 	stw	r19,8(r16)
101013d4:	81c00015 	stw	r7,0(r16)
101013d8:	a0c00217 	ldw	r3,8(r20)
101013dc:	e0b9883a 	add	fp,fp,r2
101013e0:	90a5c83a 	sub	r18,r18,r2
101013e4:	18a7c83a 	sub	r19,r3,r2
101013e8:	a4c00215 	stw	r19,8(r20)
101013ec:	983fce26 	beq	r19,zero,10101328 <__alt_data_end+0xfffe1328>
101013f0:	80c0030b 	ldhu	r3,12(r16)
101013f4:	903fe61e 	bne	r18,zero,10101390 <__alt_data_end+0xfffe1390>
101013f8:	8f000017 	ldw	fp,0(r17)
101013fc:	8c800117 	ldw	r18,4(r17)
10101400:	8c400204 	addi	r17,r17,8
10101404:	003fe106 	br	1010138c <__alt_data_end+0xfffe138c>
10101408:	8cc00017 	ldw	r19,0(r17)
1010140c:	8c800117 	ldw	r18,4(r17)
10101410:	8c400204 	addi	r17,r17,8
10101414:	003fb306 	br	101012e4 <__alt_data_end+0xfffe12e4>
10101418:	0005883a 	mov	r2,zero
1010141c:	f800283a 	ret
10101420:	81000017 	ldw	r4,0(r16)
10101424:	80800417 	ldw	r2,16(r16)
10101428:	11005a36 	bltu	r2,r4,10101594 <__sfvwrite_r+0x320>
1010142c:	85c00517 	ldw	r23,20(r16)
10101430:	95c05836 	bltu	r18,r23,10101594 <__sfvwrite_r+0x320>
10101434:	00a00034 	movhi	r2,32768
10101438:	10bfffc4 	addi	r2,r2,-1
1010143c:	9009883a 	mov	r4,r18
10101440:	1480012e 	bgeu	r2,r18,10101448 <__sfvwrite_r+0x1d4>
10101444:	1009883a 	mov	r4,r2
10101448:	b80b883a 	mov	r5,r23
1010144c:	0100a340 	call	10100a34 <__divsi3>
10101450:	b80b883a 	mov	r5,r23
10101454:	1009883a 	mov	r4,r2
10101458:	0100be80 	call	10100be8 <__mulsi3>
1010145c:	81400717 	ldw	r5,28(r16)
10101460:	80c00917 	ldw	r3,36(r16)
10101464:	100f883a 	mov	r7,r2
10101468:	e00d883a 	mov	r6,fp
1010146c:	a809883a 	mov	r4,r21
10101470:	183ee83a 	callr	r3
10101474:	00bfd816 	blt	zero,r2,101013d8 <__alt_data_end+0xfffe13d8>
10101478:	8080030b 	ldhu	r2,12(r16)
1010147c:	10801014 	ori	r2,r2,64
10101480:	8080030d 	sth	r2,12(r16)
10101484:	00bfffc4 	movi	r2,-1
10101488:	003fa806 	br	1010132c <__alt_data_end+0xfffe132c>
1010148c:	0027883a 	mov	r19,zero
10101490:	0011883a 	mov	r8,zero
10101494:	0039883a 	mov	fp,zero
10101498:	0025883a 	mov	r18,zero
1010149c:	90001f26 	beq	r18,zero,1010151c <__sfvwrite_r+0x2a8>
101014a0:	40005a26 	beq	r8,zero,1010160c <__sfvwrite_r+0x398>
101014a4:	982d883a 	mov	r22,r19
101014a8:	94c0012e 	bgeu	r18,r19,101014b0 <__sfvwrite_r+0x23c>
101014ac:	902d883a 	mov	r22,r18
101014b0:	81000017 	ldw	r4,0(r16)
101014b4:	80800417 	ldw	r2,16(r16)
101014b8:	b02f883a 	mov	r23,r22
101014bc:	81c00517 	ldw	r7,20(r16)
101014c0:	1100032e 	bgeu	r2,r4,101014d0 <__sfvwrite_r+0x25c>
101014c4:	80c00217 	ldw	r3,8(r16)
101014c8:	38c7883a 	add	r3,r7,r3
101014cc:	1d801816 	blt	r3,r22,10101530 <__sfvwrite_r+0x2bc>
101014d0:	b1c03e16 	blt	r22,r7,101015cc <__sfvwrite_r+0x358>
101014d4:	80800917 	ldw	r2,36(r16)
101014d8:	81400717 	ldw	r5,28(r16)
101014dc:	e00d883a 	mov	r6,fp
101014e0:	da000115 	stw	r8,4(sp)
101014e4:	a809883a 	mov	r4,r21
101014e8:	103ee83a 	callr	r2
101014ec:	102f883a 	mov	r23,r2
101014f0:	da000117 	ldw	r8,4(sp)
101014f4:	00bfe00e 	bge	zero,r2,10101478 <__alt_data_end+0xfffe1478>
101014f8:	9de7c83a 	sub	r19,r19,r23
101014fc:	98001f26 	beq	r19,zero,1010157c <__sfvwrite_r+0x308>
10101500:	a0800217 	ldw	r2,8(r20)
10101504:	e5f9883a 	add	fp,fp,r23
10101508:	95e5c83a 	sub	r18,r18,r23
1010150c:	15efc83a 	sub	r23,r2,r23
10101510:	a5c00215 	stw	r23,8(r20)
10101514:	b83f8426 	beq	r23,zero,10101328 <__alt_data_end+0xfffe1328>
10101518:	903fe11e 	bne	r18,zero,101014a0 <__alt_data_end+0xfffe14a0>
1010151c:	8f000017 	ldw	fp,0(r17)
10101520:	8c800117 	ldw	r18,4(r17)
10101524:	0011883a 	mov	r8,zero
10101528:	8c400204 	addi	r17,r17,8
1010152c:	003fdb06 	br	1010149c <__alt_data_end+0xfffe149c>
10101530:	180d883a 	mov	r6,r3
10101534:	e00b883a 	mov	r5,fp
10101538:	da000115 	stw	r8,4(sp)
1010153c:	d8c00015 	stw	r3,0(sp)
10101540:	01021b40 	call	101021b4 <memmove>
10101544:	d8c00017 	ldw	r3,0(sp)
10101548:	80800017 	ldw	r2,0(r16)
1010154c:	800b883a 	mov	r5,r16
10101550:	a809883a 	mov	r4,r21
10101554:	10c5883a 	add	r2,r2,r3
10101558:	80800015 	stw	r2,0(r16)
1010155c:	d8c00015 	stw	r3,0(sp)
10101560:	01030540 	call	10103054 <_fflush_r>
10101564:	d8c00017 	ldw	r3,0(sp)
10101568:	da000117 	ldw	r8,4(sp)
1010156c:	103fc21e 	bne	r2,zero,10101478 <__alt_data_end+0xfffe1478>
10101570:	182f883a 	mov	r23,r3
10101574:	9de7c83a 	sub	r19,r19,r23
10101578:	983fe11e 	bne	r19,zero,10101500 <__alt_data_end+0xfffe1500>
1010157c:	800b883a 	mov	r5,r16
10101580:	a809883a 	mov	r4,r21
10101584:	01030540 	call	10103054 <_fflush_r>
10101588:	103fbb1e 	bne	r2,zero,10101478 <__alt_data_end+0xfffe1478>
1010158c:	0011883a 	mov	r8,zero
10101590:	003fdb06 	br	10101500 <__alt_data_end+0xfffe1500>
10101594:	94c0012e 	bgeu	r18,r19,1010159c <__sfvwrite_r+0x328>
10101598:	9027883a 	mov	r19,r18
1010159c:	980d883a 	mov	r6,r19
101015a0:	e00b883a 	mov	r5,fp
101015a4:	01021b40 	call	101021b4 <memmove>
101015a8:	80800217 	ldw	r2,8(r16)
101015ac:	80c00017 	ldw	r3,0(r16)
101015b0:	14c5c83a 	sub	r2,r2,r19
101015b4:	1cc7883a 	add	r3,r3,r19
101015b8:	80800215 	stw	r2,8(r16)
101015bc:	80c00015 	stw	r3,0(r16)
101015c0:	10004326 	beq	r2,zero,101016d0 <__sfvwrite_r+0x45c>
101015c4:	9805883a 	mov	r2,r19
101015c8:	003f8306 	br	101013d8 <__alt_data_end+0xfffe13d8>
101015cc:	b00d883a 	mov	r6,r22
101015d0:	e00b883a 	mov	r5,fp
101015d4:	da000115 	stw	r8,4(sp)
101015d8:	01021b40 	call	101021b4 <memmove>
101015dc:	80800217 	ldw	r2,8(r16)
101015e0:	80c00017 	ldw	r3,0(r16)
101015e4:	da000117 	ldw	r8,4(sp)
101015e8:	1585c83a 	sub	r2,r2,r22
101015ec:	1dad883a 	add	r22,r3,r22
101015f0:	80800215 	stw	r2,8(r16)
101015f4:	85800015 	stw	r22,0(r16)
101015f8:	003fbf06 	br	101014f8 <__alt_data_end+0xfffe14f8>
101015fc:	81000017 	ldw	r4,0(r16)
10101600:	9027883a 	mov	r19,r18
10101604:	902f883a 	mov	r23,r18
10101608:	003f6906 	br	101013b0 <__alt_data_end+0xfffe13b0>
1010160c:	900d883a 	mov	r6,r18
10101610:	01400284 	movi	r5,10
10101614:	e009883a 	mov	r4,fp
10101618:	01020d00 	call	101020d0 <memchr>
1010161c:	10003e26 	beq	r2,zero,10101718 <__sfvwrite_r+0x4a4>
10101620:	10800044 	addi	r2,r2,1
10101624:	1727c83a 	sub	r19,r2,fp
10101628:	02000044 	movi	r8,1
1010162c:	003f9d06 	br	101014a4 <__alt_data_end+0xfffe14a4>
10101630:	80800517 	ldw	r2,20(r16)
10101634:	81400417 	ldw	r5,16(r16)
10101638:	81c00017 	ldw	r7,0(r16)
1010163c:	10a7883a 	add	r19,r2,r2
10101640:	9885883a 	add	r2,r19,r2
10101644:	1026d7fa 	srli	r19,r2,31
10101648:	396dc83a 	sub	r22,r7,r5
1010164c:	b1000044 	addi	r4,r22,1
10101650:	9885883a 	add	r2,r19,r2
10101654:	1027d07a 	srai	r19,r2,1
10101658:	2485883a 	add	r2,r4,r18
1010165c:	980d883a 	mov	r6,r19
10101660:	9880022e 	bgeu	r19,r2,1010166c <__sfvwrite_r+0x3f8>
10101664:	1027883a 	mov	r19,r2
10101668:	100d883a 	mov	r6,r2
1010166c:	18c1000c 	andi	r3,r3,1024
10101670:	18001c26 	beq	r3,zero,101016e4 <__sfvwrite_r+0x470>
10101674:	300b883a 	mov	r5,r6
10101678:	a809883a 	mov	r4,r21
1010167c:	01018c40 	call	101018c4 <_malloc_r>
10101680:	102f883a 	mov	r23,r2
10101684:	10002926 	beq	r2,zero,1010172c <__sfvwrite_r+0x4b8>
10101688:	81400417 	ldw	r5,16(r16)
1010168c:	b00d883a 	mov	r6,r22
10101690:	1009883a 	mov	r4,r2
10101694:	0100c100 	call	10100c10 <memcpy>
10101698:	8080030b 	ldhu	r2,12(r16)
1010169c:	00fedfc4 	movi	r3,-1153
101016a0:	10c4703a 	and	r2,r2,r3
101016a4:	10802014 	ori	r2,r2,128
101016a8:	8080030d 	sth	r2,12(r16)
101016ac:	bd89883a 	add	r4,r23,r22
101016b0:	9d8fc83a 	sub	r7,r19,r22
101016b4:	85c00415 	stw	r23,16(r16)
101016b8:	84c00515 	stw	r19,20(r16)
101016bc:	81000015 	stw	r4,0(r16)
101016c0:	9027883a 	mov	r19,r18
101016c4:	81c00215 	stw	r7,8(r16)
101016c8:	902f883a 	mov	r23,r18
101016cc:	003f3806 	br	101013b0 <__alt_data_end+0xfffe13b0>
101016d0:	800b883a 	mov	r5,r16
101016d4:	a809883a 	mov	r4,r21
101016d8:	01030540 	call	10103054 <_fflush_r>
101016dc:	103fb926 	beq	r2,zero,101015c4 <__alt_data_end+0xfffe15c4>
101016e0:	003f6506 	br	10101478 <__alt_data_end+0xfffe1478>
101016e4:	a809883a 	mov	r4,r21
101016e8:	01024380 	call	10102438 <_realloc_r>
101016ec:	102f883a 	mov	r23,r2
101016f0:	103fee1e 	bne	r2,zero,101016ac <__alt_data_end+0xfffe16ac>
101016f4:	81400417 	ldw	r5,16(r16)
101016f8:	a809883a 	mov	r4,r21
101016fc:	01032040 	call	10103204 <_free_r>
10101700:	8080030b 	ldhu	r2,12(r16)
10101704:	00ffdfc4 	movi	r3,-129
10101708:	1884703a 	and	r2,r3,r2
1010170c:	00c00304 	movi	r3,12
10101710:	a8c00015 	stw	r3,0(r21)
10101714:	003f5906 	br	1010147c <__alt_data_end+0xfffe147c>
10101718:	94c00044 	addi	r19,r18,1
1010171c:	02000044 	movi	r8,1
10101720:	003f6006 	br	101014a4 <__alt_data_end+0xfffe14a4>
10101724:	00bfffc4 	movi	r2,-1
10101728:	003f0006 	br	1010132c <__alt_data_end+0xfffe132c>
1010172c:	00800304 	movi	r2,12
10101730:	a8800015 	stw	r2,0(r21)
10101734:	8080030b 	ldhu	r2,12(r16)
10101738:	003f5006 	br	1010147c <__alt_data_end+0xfffe147c>

1010173c <_fwalk>:
1010173c:	defff704 	addi	sp,sp,-36
10101740:	dd000415 	stw	r20,16(sp)
10101744:	dfc00815 	stw	ra,32(sp)
10101748:	ddc00715 	stw	r23,28(sp)
1010174c:	dd800615 	stw	r22,24(sp)
10101750:	dd400515 	stw	r21,20(sp)
10101754:	dcc00315 	stw	r19,12(sp)
10101758:	dc800215 	stw	r18,8(sp)
1010175c:	dc400115 	stw	r17,4(sp)
10101760:	dc000015 	stw	r16,0(sp)
10101764:	2500b804 	addi	r20,r4,736
10101768:	a0002326 	beq	r20,zero,101017f8 <_fwalk+0xbc>
1010176c:	282b883a 	mov	r21,r5
10101770:	002f883a 	mov	r23,zero
10101774:	05800044 	movi	r22,1
10101778:	04ffffc4 	movi	r19,-1
1010177c:	a4400117 	ldw	r17,4(r20)
10101780:	a4800217 	ldw	r18,8(r20)
10101784:	8c7fffc4 	addi	r17,r17,-1
10101788:	88000d16 	blt	r17,zero,101017c0 <_fwalk+0x84>
1010178c:	94000304 	addi	r16,r18,12
10101790:	94800384 	addi	r18,r18,14
10101794:	8080000b 	ldhu	r2,0(r16)
10101798:	8c7fffc4 	addi	r17,r17,-1
1010179c:	813ffd04 	addi	r4,r16,-12
101017a0:	b080042e 	bgeu	r22,r2,101017b4 <_fwalk+0x78>
101017a4:	9080000f 	ldh	r2,0(r18)
101017a8:	14c00226 	beq	r2,r19,101017b4 <_fwalk+0x78>
101017ac:	a83ee83a 	callr	r21
101017b0:	b8aeb03a 	or	r23,r23,r2
101017b4:	84001a04 	addi	r16,r16,104
101017b8:	94801a04 	addi	r18,r18,104
101017bc:	8cfff51e 	bne	r17,r19,10101794 <__alt_data_end+0xfffe1794>
101017c0:	a5000017 	ldw	r20,0(r20)
101017c4:	a03fed1e 	bne	r20,zero,1010177c <__alt_data_end+0xfffe177c>
101017c8:	b805883a 	mov	r2,r23
101017cc:	dfc00817 	ldw	ra,32(sp)
101017d0:	ddc00717 	ldw	r23,28(sp)
101017d4:	dd800617 	ldw	r22,24(sp)
101017d8:	dd400517 	ldw	r21,20(sp)
101017dc:	dd000417 	ldw	r20,16(sp)
101017e0:	dcc00317 	ldw	r19,12(sp)
101017e4:	dc800217 	ldw	r18,8(sp)
101017e8:	dc400117 	ldw	r17,4(sp)
101017ec:	dc000017 	ldw	r16,0(sp)
101017f0:	dec00904 	addi	sp,sp,36
101017f4:	f800283a 	ret
101017f8:	002f883a 	mov	r23,zero
101017fc:	003ff206 	br	101017c8 <__alt_data_end+0xfffe17c8>

10101800 <_fwalk_reent>:
10101800:	defff704 	addi	sp,sp,-36
10101804:	dd000415 	stw	r20,16(sp)
10101808:	dfc00815 	stw	ra,32(sp)
1010180c:	ddc00715 	stw	r23,28(sp)
10101810:	dd800615 	stw	r22,24(sp)
10101814:	dd400515 	stw	r21,20(sp)
10101818:	dcc00315 	stw	r19,12(sp)
1010181c:	dc800215 	stw	r18,8(sp)
10101820:	dc400115 	stw	r17,4(sp)
10101824:	dc000015 	stw	r16,0(sp)
10101828:	2500b804 	addi	r20,r4,736
1010182c:	a0002326 	beq	r20,zero,101018bc <_fwalk_reent+0xbc>
10101830:	282b883a 	mov	r21,r5
10101834:	2027883a 	mov	r19,r4
10101838:	002f883a 	mov	r23,zero
1010183c:	05800044 	movi	r22,1
10101840:	04bfffc4 	movi	r18,-1
10101844:	a4400117 	ldw	r17,4(r20)
10101848:	a4000217 	ldw	r16,8(r20)
1010184c:	8c7fffc4 	addi	r17,r17,-1
10101850:	88000c16 	blt	r17,zero,10101884 <_fwalk_reent+0x84>
10101854:	84000304 	addi	r16,r16,12
10101858:	8080000b 	ldhu	r2,0(r16)
1010185c:	8c7fffc4 	addi	r17,r17,-1
10101860:	817ffd04 	addi	r5,r16,-12
10101864:	b080052e 	bgeu	r22,r2,1010187c <_fwalk_reent+0x7c>
10101868:	8080008f 	ldh	r2,2(r16)
1010186c:	9809883a 	mov	r4,r19
10101870:	14800226 	beq	r2,r18,1010187c <_fwalk_reent+0x7c>
10101874:	a83ee83a 	callr	r21
10101878:	b8aeb03a 	or	r23,r23,r2
1010187c:	84001a04 	addi	r16,r16,104
10101880:	8cbff51e 	bne	r17,r18,10101858 <__alt_data_end+0xfffe1858>
10101884:	a5000017 	ldw	r20,0(r20)
10101888:	a03fee1e 	bne	r20,zero,10101844 <__alt_data_end+0xfffe1844>
1010188c:	b805883a 	mov	r2,r23
10101890:	dfc00817 	ldw	ra,32(sp)
10101894:	ddc00717 	ldw	r23,28(sp)
10101898:	dd800617 	ldw	r22,24(sp)
1010189c:	dd400517 	ldw	r21,20(sp)
101018a0:	dd000417 	ldw	r20,16(sp)
101018a4:	dcc00317 	ldw	r19,12(sp)
101018a8:	dc800217 	ldw	r18,8(sp)
101018ac:	dc400117 	ldw	r17,4(sp)
101018b0:	dc000017 	ldw	r16,0(sp)
101018b4:	dec00904 	addi	sp,sp,36
101018b8:	f800283a 	ret
101018bc:	002f883a 	mov	r23,zero
101018c0:	003ff206 	br	1010188c <__alt_data_end+0xfffe188c>

101018c4 <_malloc_r>:
101018c4:	defff504 	addi	sp,sp,-44
101018c8:	dc800315 	stw	r18,12(sp)
101018cc:	dfc00a15 	stw	ra,40(sp)
101018d0:	df000915 	stw	fp,36(sp)
101018d4:	ddc00815 	stw	r23,32(sp)
101018d8:	dd800715 	stw	r22,28(sp)
101018dc:	dd400615 	stw	r21,24(sp)
101018e0:	dd000515 	stw	r20,20(sp)
101018e4:	dcc00415 	stw	r19,16(sp)
101018e8:	dc400215 	stw	r17,8(sp)
101018ec:	dc000115 	stw	r16,4(sp)
101018f0:	288002c4 	addi	r2,r5,11
101018f4:	00c00584 	movi	r3,22
101018f8:	2025883a 	mov	r18,r4
101018fc:	18807f2e 	bgeu	r3,r2,10101afc <_malloc_r+0x238>
10101900:	047ffe04 	movi	r17,-8
10101904:	1462703a 	and	r17,r2,r17
10101908:	8800a316 	blt	r17,zero,10101b98 <_malloc_r+0x2d4>
1010190c:	8940a236 	bltu	r17,r5,10101b98 <_malloc_r+0x2d4>
10101910:	0103ddc0 	call	10103ddc <__malloc_lock>
10101914:	00807dc4 	movi	r2,503
10101918:	1441e92e 	bgeu	r2,r17,101020c0 <_malloc_r+0x7fc>
1010191c:	8804d27a 	srli	r2,r17,9
10101920:	1000a126 	beq	r2,zero,10101ba8 <_malloc_r+0x2e4>
10101924:	00c00104 	movi	r3,4
10101928:	18811e36 	bltu	r3,r2,10101da4 <_malloc_r+0x4e0>
1010192c:	8804d1ba 	srli	r2,r17,6
10101930:	12000e44 	addi	r8,r2,57
10101934:	11c00e04 	addi	r7,r2,56
10101938:	4209883a 	add	r4,r8,r8
1010193c:	04c40434 	movhi	r19,4112
10101940:	2109883a 	add	r4,r4,r4
10101944:	9cda5804 	addi	r19,r19,26976
10101948:	2109883a 	add	r4,r4,r4
1010194c:	9909883a 	add	r4,r19,r4
10101950:	24000117 	ldw	r16,4(r4)
10101954:	213ffe04 	addi	r4,r4,-8
10101958:	24009726 	beq	r4,r16,10101bb8 <_malloc_r+0x2f4>
1010195c:	80800117 	ldw	r2,4(r16)
10101960:	01bfff04 	movi	r6,-4
10101964:	014003c4 	movi	r5,15
10101968:	1184703a 	and	r2,r2,r6
1010196c:	1447c83a 	sub	r3,r2,r17
10101970:	28c00716 	blt	r5,r3,10101990 <_malloc_r+0xcc>
10101974:	1800920e 	bge	r3,zero,10101bc0 <_malloc_r+0x2fc>
10101978:	84000317 	ldw	r16,12(r16)
1010197c:	24008e26 	beq	r4,r16,10101bb8 <_malloc_r+0x2f4>
10101980:	80800117 	ldw	r2,4(r16)
10101984:	1184703a 	and	r2,r2,r6
10101988:	1447c83a 	sub	r3,r2,r17
1010198c:	28fff90e 	bge	r5,r3,10101974 <__alt_data_end+0xfffe1974>
10101990:	3809883a 	mov	r4,r7
10101994:	01840434 	movhi	r6,4112
10101998:	9c000417 	ldw	r16,16(r19)
1010199c:	319a5804 	addi	r6,r6,26976
101019a0:	32000204 	addi	r8,r6,8
101019a4:	82013426 	beq	r16,r8,10101e78 <_malloc_r+0x5b4>
101019a8:	80c00117 	ldw	r3,4(r16)
101019ac:	00bfff04 	movi	r2,-4
101019b0:	188e703a 	and	r7,r3,r2
101019b4:	3c45c83a 	sub	r2,r7,r17
101019b8:	00c003c4 	movi	r3,15
101019bc:	18811f16 	blt	r3,r2,10101e3c <_malloc_r+0x578>
101019c0:	32000515 	stw	r8,20(r6)
101019c4:	32000415 	stw	r8,16(r6)
101019c8:	10007f0e 	bge	r2,zero,10101bc8 <_malloc_r+0x304>
101019cc:	00807fc4 	movi	r2,511
101019d0:	11c0fd36 	bltu	r2,r7,10101dc8 <_malloc_r+0x504>
101019d4:	3806d0fa 	srli	r3,r7,3
101019d8:	01c00044 	movi	r7,1
101019dc:	30800117 	ldw	r2,4(r6)
101019e0:	19400044 	addi	r5,r3,1
101019e4:	294b883a 	add	r5,r5,r5
101019e8:	1807d0ba 	srai	r3,r3,2
101019ec:	294b883a 	add	r5,r5,r5
101019f0:	294b883a 	add	r5,r5,r5
101019f4:	298b883a 	add	r5,r5,r6
101019f8:	38c6983a 	sll	r3,r7,r3
101019fc:	29c00017 	ldw	r7,0(r5)
10101a00:	2a7ffe04 	addi	r9,r5,-8
10101a04:	1886b03a 	or	r3,r3,r2
10101a08:	82400315 	stw	r9,12(r16)
10101a0c:	81c00215 	stw	r7,8(r16)
10101a10:	30c00115 	stw	r3,4(r6)
10101a14:	2c000015 	stw	r16,0(r5)
10101a18:	3c000315 	stw	r16,12(r7)
10101a1c:	2005d0ba 	srai	r2,r4,2
10101a20:	01400044 	movi	r5,1
10101a24:	288a983a 	sll	r5,r5,r2
10101a28:	19406f36 	bltu	r3,r5,10101be8 <_malloc_r+0x324>
10101a2c:	28c4703a 	and	r2,r5,r3
10101a30:	10000a1e 	bne	r2,zero,10101a5c <_malloc_r+0x198>
10101a34:	00bfff04 	movi	r2,-4
10101a38:	294b883a 	add	r5,r5,r5
10101a3c:	2088703a 	and	r4,r4,r2
10101a40:	28c4703a 	and	r2,r5,r3
10101a44:	21000104 	addi	r4,r4,4
10101a48:	1000041e 	bne	r2,zero,10101a5c <_malloc_r+0x198>
10101a4c:	294b883a 	add	r5,r5,r5
10101a50:	28c4703a 	and	r2,r5,r3
10101a54:	21000104 	addi	r4,r4,4
10101a58:	103ffc26 	beq	r2,zero,10101a4c <__alt_data_end+0xfffe1a4c>
10101a5c:	02bfff04 	movi	r10,-4
10101a60:	024003c4 	movi	r9,15
10101a64:	21800044 	addi	r6,r4,1
10101a68:	318d883a 	add	r6,r6,r6
10101a6c:	318d883a 	add	r6,r6,r6
10101a70:	318d883a 	add	r6,r6,r6
10101a74:	998d883a 	add	r6,r19,r6
10101a78:	333ffe04 	addi	r12,r6,-8
10101a7c:	2017883a 	mov	r11,r4
10101a80:	31800104 	addi	r6,r6,4
10101a84:	34000017 	ldw	r16,0(r6)
10101a88:	31fffd04 	addi	r7,r6,-12
10101a8c:	81c0041e 	bne	r16,r7,10101aa0 <_malloc_r+0x1dc>
10101a90:	0000fb06 	br	10101e80 <_malloc_r+0x5bc>
10101a94:	1801030e 	bge	r3,zero,10101ea4 <_malloc_r+0x5e0>
10101a98:	84000317 	ldw	r16,12(r16)
10101a9c:	81c0f826 	beq	r16,r7,10101e80 <_malloc_r+0x5bc>
10101aa0:	80800117 	ldw	r2,4(r16)
10101aa4:	1284703a 	and	r2,r2,r10
10101aa8:	1447c83a 	sub	r3,r2,r17
10101aac:	48fff90e 	bge	r9,r3,10101a94 <__alt_data_end+0xfffe1a94>
10101ab0:	80800317 	ldw	r2,12(r16)
10101ab4:	81000217 	ldw	r4,8(r16)
10101ab8:	89400054 	ori	r5,r17,1
10101abc:	81400115 	stw	r5,4(r16)
10101ac0:	20800315 	stw	r2,12(r4)
10101ac4:	11000215 	stw	r4,8(r2)
10101ac8:	8463883a 	add	r17,r16,r17
10101acc:	9c400515 	stw	r17,20(r19)
10101ad0:	9c400415 	stw	r17,16(r19)
10101ad4:	18800054 	ori	r2,r3,1
10101ad8:	88800115 	stw	r2,4(r17)
10101adc:	8a000315 	stw	r8,12(r17)
10101ae0:	8a000215 	stw	r8,8(r17)
10101ae4:	88e3883a 	add	r17,r17,r3
10101ae8:	88c00015 	stw	r3,0(r17)
10101aec:	9009883a 	mov	r4,r18
10101af0:	0103e000 	call	10103e00 <__malloc_unlock>
10101af4:	80800204 	addi	r2,r16,8
10101af8:	00001b06 	br	10101b68 <_malloc_r+0x2a4>
10101afc:	04400404 	movi	r17,16
10101b00:	89402536 	bltu	r17,r5,10101b98 <_malloc_r+0x2d4>
10101b04:	0103ddc0 	call	10103ddc <__malloc_lock>
10101b08:	00800184 	movi	r2,6
10101b0c:	01000084 	movi	r4,2
10101b10:	04c40434 	movhi	r19,4112
10101b14:	1085883a 	add	r2,r2,r2
10101b18:	9cda5804 	addi	r19,r19,26976
10101b1c:	1085883a 	add	r2,r2,r2
10101b20:	9885883a 	add	r2,r19,r2
10101b24:	14000117 	ldw	r16,4(r2)
10101b28:	10fffe04 	addi	r3,r2,-8
10101b2c:	80c0d926 	beq	r16,r3,10101e94 <_malloc_r+0x5d0>
10101b30:	80c00117 	ldw	r3,4(r16)
10101b34:	81000317 	ldw	r4,12(r16)
10101b38:	00bfff04 	movi	r2,-4
10101b3c:	1884703a 	and	r2,r3,r2
10101b40:	81400217 	ldw	r5,8(r16)
10101b44:	8085883a 	add	r2,r16,r2
10101b48:	10c00117 	ldw	r3,4(r2)
10101b4c:	29000315 	stw	r4,12(r5)
10101b50:	21400215 	stw	r5,8(r4)
10101b54:	18c00054 	ori	r3,r3,1
10101b58:	10c00115 	stw	r3,4(r2)
10101b5c:	9009883a 	mov	r4,r18
10101b60:	0103e000 	call	10103e00 <__malloc_unlock>
10101b64:	80800204 	addi	r2,r16,8
10101b68:	dfc00a17 	ldw	ra,40(sp)
10101b6c:	df000917 	ldw	fp,36(sp)
10101b70:	ddc00817 	ldw	r23,32(sp)
10101b74:	dd800717 	ldw	r22,28(sp)
10101b78:	dd400617 	ldw	r21,24(sp)
10101b7c:	dd000517 	ldw	r20,20(sp)
10101b80:	dcc00417 	ldw	r19,16(sp)
10101b84:	dc800317 	ldw	r18,12(sp)
10101b88:	dc400217 	ldw	r17,8(sp)
10101b8c:	dc000117 	ldw	r16,4(sp)
10101b90:	dec00b04 	addi	sp,sp,44
10101b94:	f800283a 	ret
10101b98:	00800304 	movi	r2,12
10101b9c:	90800015 	stw	r2,0(r18)
10101ba0:	0005883a 	mov	r2,zero
10101ba4:	003ff006 	br	10101b68 <__alt_data_end+0xfffe1b68>
10101ba8:	01002004 	movi	r4,128
10101bac:	02001004 	movi	r8,64
10101bb0:	01c00fc4 	movi	r7,63
10101bb4:	003f6106 	br	1010193c <__alt_data_end+0xfffe193c>
10101bb8:	4009883a 	mov	r4,r8
10101bbc:	003f7506 	br	10101994 <__alt_data_end+0xfffe1994>
10101bc0:	81000317 	ldw	r4,12(r16)
10101bc4:	003fde06 	br	10101b40 <__alt_data_end+0xfffe1b40>
10101bc8:	81c5883a 	add	r2,r16,r7
10101bcc:	11400117 	ldw	r5,4(r2)
10101bd0:	9009883a 	mov	r4,r18
10101bd4:	29400054 	ori	r5,r5,1
10101bd8:	11400115 	stw	r5,4(r2)
10101bdc:	0103e000 	call	10103e00 <__malloc_unlock>
10101be0:	80800204 	addi	r2,r16,8
10101be4:	003fe006 	br	10101b68 <__alt_data_end+0xfffe1b68>
10101be8:	9c000217 	ldw	r16,8(r19)
10101bec:	00bfff04 	movi	r2,-4
10101bf0:	85800117 	ldw	r22,4(r16)
10101bf4:	b0ac703a 	and	r22,r22,r2
10101bf8:	b4400336 	bltu	r22,r17,10101c08 <_malloc_r+0x344>
10101bfc:	b445c83a 	sub	r2,r22,r17
10101c00:	00c003c4 	movi	r3,15
10101c04:	18805d16 	blt	r3,r2,10101d7c <_malloc_r+0x4b8>
10101c08:	05c40434 	movhi	r23,4112
10101c0c:	00840474 	movhi	r2,4113
10101c10:	10a6bf04 	addi	r2,r2,-25860
10101c14:	bddfe804 	addi	r23,r23,32672
10101c18:	15400017 	ldw	r21,0(r2)
10101c1c:	b8c00017 	ldw	r3,0(r23)
10101c20:	00bfffc4 	movi	r2,-1
10101c24:	858d883a 	add	r6,r16,r22
10101c28:	8d6b883a 	add	r21,r17,r21
10101c2c:	1880ea26 	beq	r3,r2,10101fd8 <_malloc_r+0x714>
10101c30:	ad4403c4 	addi	r21,r21,4111
10101c34:	00bc0004 	movi	r2,-4096
10101c38:	a8aa703a 	and	r21,r21,r2
10101c3c:	a80b883a 	mov	r5,r21
10101c40:	9009883a 	mov	r4,r18
10101c44:	d9800015 	stw	r6,0(sp)
10101c48:	010299c0 	call	1010299c <_sbrk_r>
10101c4c:	1029883a 	mov	r20,r2
10101c50:	00bfffc4 	movi	r2,-1
10101c54:	d9800017 	ldw	r6,0(sp)
10101c58:	a080e826 	beq	r20,r2,10101ffc <_malloc_r+0x738>
10101c5c:	a180a636 	bltu	r20,r6,10101ef8 <_malloc_r+0x634>
10101c60:	07040474 	movhi	fp,4113
10101c64:	e726c804 	addi	fp,fp,-25824
10101c68:	e0800017 	ldw	r2,0(fp)
10101c6c:	a887883a 	add	r3,r21,r2
10101c70:	e0c00015 	stw	r3,0(fp)
10101c74:	3500e626 	beq	r6,r20,10102010 <_malloc_r+0x74c>
10101c78:	b9000017 	ldw	r4,0(r23)
10101c7c:	00bfffc4 	movi	r2,-1
10101c80:	2080ee26 	beq	r4,r2,1010203c <_malloc_r+0x778>
10101c84:	a185c83a 	sub	r2,r20,r6
10101c88:	10c5883a 	add	r2,r2,r3
10101c8c:	e0800015 	stw	r2,0(fp)
10101c90:	a0c001cc 	andi	r3,r20,7
10101c94:	1800bc26 	beq	r3,zero,10101f88 <_malloc_r+0x6c4>
10101c98:	a0e9c83a 	sub	r20,r20,r3
10101c9c:	00840204 	movi	r2,4104
10101ca0:	a5000204 	addi	r20,r20,8
10101ca4:	10c7c83a 	sub	r3,r2,r3
10101ca8:	a545883a 	add	r2,r20,r21
10101cac:	1083ffcc 	andi	r2,r2,4095
10101cb0:	18abc83a 	sub	r21,r3,r2
10101cb4:	a80b883a 	mov	r5,r21
10101cb8:	9009883a 	mov	r4,r18
10101cbc:	010299c0 	call	1010299c <_sbrk_r>
10101cc0:	00ffffc4 	movi	r3,-1
10101cc4:	10c0e126 	beq	r2,r3,1010204c <_malloc_r+0x788>
10101cc8:	1505c83a 	sub	r2,r2,r20
10101ccc:	1545883a 	add	r2,r2,r21
10101cd0:	10800054 	ori	r2,r2,1
10101cd4:	e0c00017 	ldw	r3,0(fp)
10101cd8:	9d000215 	stw	r20,8(r19)
10101cdc:	a0800115 	stw	r2,4(r20)
10101ce0:	a8c7883a 	add	r3,r21,r3
10101ce4:	e0c00015 	stw	r3,0(fp)
10101ce8:	84c00e26 	beq	r16,r19,10101d24 <_malloc_r+0x460>
10101cec:	018003c4 	movi	r6,15
10101cf0:	3580a72e 	bgeu	r6,r22,10101f90 <_malloc_r+0x6cc>
10101cf4:	81400117 	ldw	r5,4(r16)
10101cf8:	013ffe04 	movi	r4,-8
10101cfc:	b0bffd04 	addi	r2,r22,-12
10101d00:	1104703a 	and	r2,r2,r4
10101d04:	2900004c 	andi	r4,r5,1
10101d08:	2088b03a 	or	r4,r4,r2
10101d0c:	81000115 	stw	r4,4(r16)
10101d10:	01400144 	movi	r5,5
10101d14:	8089883a 	add	r4,r16,r2
10101d18:	21400115 	stw	r5,4(r4)
10101d1c:	21400215 	stw	r5,8(r4)
10101d20:	3080cd36 	bltu	r6,r2,10102058 <_malloc_r+0x794>
10101d24:	00840474 	movhi	r2,4113
10101d28:	10a6be04 	addi	r2,r2,-25864
10101d2c:	11000017 	ldw	r4,0(r2)
10101d30:	20c0012e 	bgeu	r4,r3,10101d38 <_malloc_r+0x474>
10101d34:	10c00015 	stw	r3,0(r2)
10101d38:	00840474 	movhi	r2,4113
10101d3c:	10a6bd04 	addi	r2,r2,-25868
10101d40:	11000017 	ldw	r4,0(r2)
10101d44:	9c000217 	ldw	r16,8(r19)
10101d48:	20c0012e 	bgeu	r4,r3,10101d50 <_malloc_r+0x48c>
10101d4c:	10c00015 	stw	r3,0(r2)
10101d50:	80c00117 	ldw	r3,4(r16)
10101d54:	00bfff04 	movi	r2,-4
10101d58:	1886703a 	and	r3,r3,r2
10101d5c:	1c45c83a 	sub	r2,r3,r17
10101d60:	1c400236 	bltu	r3,r17,10101d6c <_malloc_r+0x4a8>
10101d64:	00c003c4 	movi	r3,15
10101d68:	18800416 	blt	r3,r2,10101d7c <_malloc_r+0x4b8>
10101d6c:	9009883a 	mov	r4,r18
10101d70:	0103e000 	call	10103e00 <__malloc_unlock>
10101d74:	0005883a 	mov	r2,zero
10101d78:	003f7b06 	br	10101b68 <__alt_data_end+0xfffe1b68>
10101d7c:	88c00054 	ori	r3,r17,1
10101d80:	80c00115 	stw	r3,4(r16)
10101d84:	8463883a 	add	r17,r16,r17
10101d88:	10800054 	ori	r2,r2,1
10101d8c:	9c400215 	stw	r17,8(r19)
10101d90:	88800115 	stw	r2,4(r17)
10101d94:	9009883a 	mov	r4,r18
10101d98:	0103e000 	call	10103e00 <__malloc_unlock>
10101d9c:	80800204 	addi	r2,r16,8
10101da0:	003f7106 	br	10101b68 <__alt_data_end+0xfffe1b68>
10101da4:	00c00504 	movi	r3,20
10101da8:	18804a2e 	bgeu	r3,r2,10101ed4 <_malloc_r+0x610>
10101dac:	00c01504 	movi	r3,84
10101db0:	18806e36 	bltu	r3,r2,10101f6c <_malloc_r+0x6a8>
10101db4:	8804d33a 	srli	r2,r17,12
10101db8:	12001bc4 	addi	r8,r2,111
10101dbc:	11c01b84 	addi	r7,r2,110
10101dc0:	4209883a 	add	r4,r8,r8
10101dc4:	003edd06 	br	1010193c <__alt_data_end+0xfffe193c>
10101dc8:	3804d27a 	srli	r2,r7,9
10101dcc:	00c00104 	movi	r3,4
10101dd0:	1880442e 	bgeu	r3,r2,10101ee4 <_malloc_r+0x620>
10101dd4:	00c00504 	movi	r3,20
10101dd8:	18808136 	bltu	r3,r2,10101fe0 <_malloc_r+0x71c>
10101ddc:	11401704 	addi	r5,r2,92
10101de0:	10c016c4 	addi	r3,r2,91
10101de4:	294b883a 	add	r5,r5,r5
10101de8:	294b883a 	add	r5,r5,r5
10101dec:	294b883a 	add	r5,r5,r5
10101df0:	994b883a 	add	r5,r19,r5
10101df4:	28800017 	ldw	r2,0(r5)
10101df8:	01840434 	movhi	r6,4112
10101dfc:	297ffe04 	addi	r5,r5,-8
10101e00:	319a5804 	addi	r6,r6,26976
10101e04:	28806526 	beq	r5,r2,10101f9c <_malloc_r+0x6d8>
10101e08:	01bfff04 	movi	r6,-4
10101e0c:	10c00117 	ldw	r3,4(r2)
10101e10:	1986703a 	and	r3,r3,r6
10101e14:	38c0022e 	bgeu	r7,r3,10101e20 <_malloc_r+0x55c>
10101e18:	10800217 	ldw	r2,8(r2)
10101e1c:	28bffb1e 	bne	r5,r2,10101e0c <__alt_data_end+0xfffe1e0c>
10101e20:	11400317 	ldw	r5,12(r2)
10101e24:	98c00117 	ldw	r3,4(r19)
10101e28:	81400315 	stw	r5,12(r16)
10101e2c:	80800215 	stw	r2,8(r16)
10101e30:	2c000215 	stw	r16,8(r5)
10101e34:	14000315 	stw	r16,12(r2)
10101e38:	003ef806 	br	10101a1c <__alt_data_end+0xfffe1a1c>
10101e3c:	88c00054 	ori	r3,r17,1
10101e40:	80c00115 	stw	r3,4(r16)
10101e44:	8463883a 	add	r17,r16,r17
10101e48:	34400515 	stw	r17,20(r6)
10101e4c:	34400415 	stw	r17,16(r6)
10101e50:	10c00054 	ori	r3,r2,1
10101e54:	8a000315 	stw	r8,12(r17)
10101e58:	8a000215 	stw	r8,8(r17)
10101e5c:	88c00115 	stw	r3,4(r17)
10101e60:	88a3883a 	add	r17,r17,r2
10101e64:	88800015 	stw	r2,0(r17)
10101e68:	9009883a 	mov	r4,r18
10101e6c:	0103e000 	call	10103e00 <__malloc_unlock>
10101e70:	80800204 	addi	r2,r16,8
10101e74:	003f3c06 	br	10101b68 <__alt_data_end+0xfffe1b68>
10101e78:	30c00117 	ldw	r3,4(r6)
10101e7c:	003ee706 	br	10101a1c <__alt_data_end+0xfffe1a1c>
10101e80:	5ac00044 	addi	r11,r11,1
10101e84:	588000cc 	andi	r2,r11,3
10101e88:	31800204 	addi	r6,r6,8
10101e8c:	103efd1e 	bne	r2,zero,10101a84 <__alt_data_end+0xfffe1a84>
10101e90:	00002406 	br	10101f24 <_malloc_r+0x660>
10101e94:	14000317 	ldw	r16,12(r2)
10101e98:	143f251e 	bne	r2,r16,10101b30 <__alt_data_end+0xfffe1b30>
10101e9c:	21000084 	addi	r4,r4,2
10101ea0:	003ebc06 	br	10101994 <__alt_data_end+0xfffe1994>
10101ea4:	8085883a 	add	r2,r16,r2
10101ea8:	10c00117 	ldw	r3,4(r2)
10101eac:	81000317 	ldw	r4,12(r16)
10101eb0:	81400217 	ldw	r5,8(r16)
10101eb4:	18c00054 	ori	r3,r3,1
10101eb8:	10c00115 	stw	r3,4(r2)
10101ebc:	29000315 	stw	r4,12(r5)
10101ec0:	21400215 	stw	r5,8(r4)
10101ec4:	9009883a 	mov	r4,r18
10101ec8:	0103e000 	call	10103e00 <__malloc_unlock>
10101ecc:	80800204 	addi	r2,r16,8
10101ed0:	003f2506 	br	10101b68 <__alt_data_end+0xfffe1b68>
10101ed4:	12001704 	addi	r8,r2,92
10101ed8:	11c016c4 	addi	r7,r2,91
10101edc:	4209883a 	add	r4,r8,r8
10101ee0:	003e9606 	br	1010193c <__alt_data_end+0xfffe193c>
10101ee4:	3804d1ba 	srli	r2,r7,6
10101ee8:	11400e44 	addi	r5,r2,57
10101eec:	10c00e04 	addi	r3,r2,56
10101ef0:	294b883a 	add	r5,r5,r5
10101ef4:	003fbc06 	br	10101de8 <__alt_data_end+0xfffe1de8>
10101ef8:	84ff5926 	beq	r16,r19,10101c60 <__alt_data_end+0xfffe1c60>
10101efc:	00840434 	movhi	r2,4112
10101f00:	109a5804 	addi	r2,r2,26976
10101f04:	14000217 	ldw	r16,8(r2)
10101f08:	00bfff04 	movi	r2,-4
10101f0c:	80c00117 	ldw	r3,4(r16)
10101f10:	1886703a 	and	r3,r3,r2
10101f14:	003f9106 	br	10101d5c <__alt_data_end+0xfffe1d5c>
10101f18:	60800217 	ldw	r2,8(r12)
10101f1c:	213fffc4 	addi	r4,r4,-1
10101f20:	1300651e 	bne	r2,r12,101020b8 <_malloc_r+0x7f4>
10101f24:	208000cc 	andi	r2,r4,3
10101f28:	633ffe04 	addi	r12,r12,-8
10101f2c:	103ffa1e 	bne	r2,zero,10101f18 <__alt_data_end+0xfffe1f18>
10101f30:	98800117 	ldw	r2,4(r19)
10101f34:	0146303a 	nor	r3,zero,r5
10101f38:	1884703a 	and	r2,r3,r2
10101f3c:	98800115 	stw	r2,4(r19)
10101f40:	294b883a 	add	r5,r5,r5
10101f44:	117f2836 	bltu	r2,r5,10101be8 <__alt_data_end+0xfffe1be8>
10101f48:	283f2726 	beq	r5,zero,10101be8 <__alt_data_end+0xfffe1be8>
10101f4c:	2886703a 	and	r3,r5,r2
10101f50:	5809883a 	mov	r4,r11
10101f54:	183ec31e 	bne	r3,zero,10101a64 <__alt_data_end+0xfffe1a64>
10101f58:	294b883a 	add	r5,r5,r5
10101f5c:	2886703a 	and	r3,r5,r2
10101f60:	21000104 	addi	r4,r4,4
10101f64:	183ffc26 	beq	r3,zero,10101f58 <__alt_data_end+0xfffe1f58>
10101f68:	003ebe06 	br	10101a64 <__alt_data_end+0xfffe1a64>
10101f6c:	00c05504 	movi	r3,340
10101f70:	18801236 	bltu	r3,r2,10101fbc <_malloc_r+0x6f8>
10101f74:	8804d3fa 	srli	r2,r17,15
10101f78:	12001e04 	addi	r8,r2,120
10101f7c:	11c01dc4 	addi	r7,r2,119
10101f80:	4209883a 	add	r4,r8,r8
10101f84:	003e6d06 	br	1010193c <__alt_data_end+0xfffe193c>
10101f88:	00c40004 	movi	r3,4096
10101f8c:	003f4606 	br	10101ca8 <__alt_data_end+0xfffe1ca8>
10101f90:	00800044 	movi	r2,1
10101f94:	a0800115 	stw	r2,4(r20)
10101f98:	003f7406 	br	10101d6c <__alt_data_end+0xfffe1d6c>
10101f9c:	1805d0ba 	srai	r2,r3,2
10101fa0:	01c00044 	movi	r7,1
10101fa4:	30c00117 	ldw	r3,4(r6)
10101fa8:	388e983a 	sll	r7,r7,r2
10101fac:	2805883a 	mov	r2,r5
10101fb0:	38c6b03a 	or	r3,r7,r3
10101fb4:	30c00115 	stw	r3,4(r6)
10101fb8:	003f9b06 	br	10101e28 <__alt_data_end+0xfffe1e28>
10101fbc:	00c15504 	movi	r3,1364
10101fc0:	18801a36 	bltu	r3,r2,1010202c <_malloc_r+0x768>
10101fc4:	8804d4ba 	srli	r2,r17,18
10101fc8:	12001f44 	addi	r8,r2,125
10101fcc:	11c01f04 	addi	r7,r2,124
10101fd0:	4209883a 	add	r4,r8,r8
10101fd4:	003e5906 	br	1010193c <__alt_data_end+0xfffe193c>
10101fd8:	ad400404 	addi	r21,r21,16
10101fdc:	003f1706 	br	10101c3c <__alt_data_end+0xfffe1c3c>
10101fe0:	00c01504 	movi	r3,84
10101fe4:	18802336 	bltu	r3,r2,10102074 <_malloc_r+0x7b0>
10101fe8:	3804d33a 	srli	r2,r7,12
10101fec:	11401bc4 	addi	r5,r2,111
10101ff0:	10c01b84 	addi	r3,r2,110
10101ff4:	294b883a 	add	r5,r5,r5
10101ff8:	003f7b06 	br	10101de8 <__alt_data_end+0xfffe1de8>
10101ffc:	9c000217 	ldw	r16,8(r19)
10102000:	00bfff04 	movi	r2,-4
10102004:	80c00117 	ldw	r3,4(r16)
10102008:	1886703a 	and	r3,r3,r2
1010200c:	003f5306 	br	10101d5c <__alt_data_end+0xfffe1d5c>
10102010:	3083ffcc 	andi	r2,r6,4095
10102014:	103f181e 	bne	r2,zero,10101c78 <__alt_data_end+0xfffe1c78>
10102018:	99000217 	ldw	r4,8(r19)
1010201c:	b545883a 	add	r2,r22,r21
10102020:	10800054 	ori	r2,r2,1
10102024:	20800115 	stw	r2,4(r4)
10102028:	003f3e06 	br	10101d24 <__alt_data_end+0xfffe1d24>
1010202c:	01003f84 	movi	r4,254
10102030:	02001fc4 	movi	r8,127
10102034:	01c01f84 	movi	r7,126
10102038:	003e4006 	br	1010193c <__alt_data_end+0xfffe193c>
1010203c:	00840434 	movhi	r2,4112
10102040:	109fe804 	addi	r2,r2,32672
10102044:	15000015 	stw	r20,0(r2)
10102048:	003f1106 	br	10101c90 <__alt_data_end+0xfffe1c90>
1010204c:	00800044 	movi	r2,1
10102050:	002b883a 	mov	r21,zero
10102054:	003f1f06 	br	10101cd4 <__alt_data_end+0xfffe1cd4>
10102058:	81400204 	addi	r5,r16,8
1010205c:	9009883a 	mov	r4,r18
10102060:	01032040 	call	10103204 <_free_r>
10102064:	00840474 	movhi	r2,4113
10102068:	10a6c804 	addi	r2,r2,-25824
1010206c:	10c00017 	ldw	r3,0(r2)
10102070:	003f2c06 	br	10101d24 <__alt_data_end+0xfffe1d24>
10102074:	00c05504 	movi	r3,340
10102078:	18800536 	bltu	r3,r2,10102090 <_malloc_r+0x7cc>
1010207c:	3804d3fa 	srli	r2,r7,15
10102080:	11401e04 	addi	r5,r2,120
10102084:	10c01dc4 	addi	r3,r2,119
10102088:	294b883a 	add	r5,r5,r5
1010208c:	003f5606 	br	10101de8 <__alt_data_end+0xfffe1de8>
10102090:	00c15504 	movi	r3,1364
10102094:	18800536 	bltu	r3,r2,101020ac <_malloc_r+0x7e8>
10102098:	3804d4ba 	srli	r2,r7,18
1010209c:	11401f44 	addi	r5,r2,125
101020a0:	10c01f04 	addi	r3,r2,124
101020a4:	294b883a 	add	r5,r5,r5
101020a8:	003f4f06 	br	10101de8 <__alt_data_end+0xfffe1de8>
101020ac:	01403f84 	movi	r5,254
101020b0:	00c01f84 	movi	r3,126
101020b4:	003f4c06 	br	10101de8 <__alt_data_end+0xfffe1de8>
101020b8:	98800117 	ldw	r2,4(r19)
101020bc:	003fa006 	br	10101f40 <__alt_data_end+0xfffe1f40>
101020c0:	8808d0fa 	srli	r4,r17,3
101020c4:	20800044 	addi	r2,r4,1
101020c8:	1085883a 	add	r2,r2,r2
101020cc:	003e9006 	br	10101b10 <__alt_data_end+0xfffe1b10>

101020d0 <memchr>:
101020d0:	208000cc 	andi	r2,r4,3
101020d4:	280f883a 	mov	r7,r5
101020d8:	10003426 	beq	r2,zero,101021ac <memchr+0xdc>
101020dc:	30bfffc4 	addi	r2,r6,-1
101020e0:	30001a26 	beq	r6,zero,1010214c <memchr+0x7c>
101020e4:	20c00003 	ldbu	r3,0(r4)
101020e8:	29803fcc 	andi	r6,r5,255
101020ec:	30c0051e 	bne	r6,r3,10102104 <memchr+0x34>
101020f0:	00001806 	br	10102154 <memchr+0x84>
101020f4:	10001526 	beq	r2,zero,1010214c <memchr+0x7c>
101020f8:	20c00003 	ldbu	r3,0(r4)
101020fc:	10bfffc4 	addi	r2,r2,-1
10102100:	30c01426 	beq	r6,r3,10102154 <memchr+0x84>
10102104:	21000044 	addi	r4,r4,1
10102108:	20c000cc 	andi	r3,r4,3
1010210c:	183ff91e 	bne	r3,zero,101020f4 <__alt_data_end+0xfffe20f4>
10102110:	020000c4 	movi	r8,3
10102114:	40801136 	bltu	r8,r2,1010215c <memchr+0x8c>
10102118:	10000c26 	beq	r2,zero,1010214c <memchr+0x7c>
1010211c:	20c00003 	ldbu	r3,0(r4)
10102120:	29403fcc 	andi	r5,r5,255
10102124:	28c00b26 	beq	r5,r3,10102154 <memchr+0x84>
10102128:	20c00044 	addi	r3,r4,1
1010212c:	39803fcc 	andi	r6,r7,255
10102130:	2089883a 	add	r4,r4,r2
10102134:	00000306 	br	10102144 <memchr+0x74>
10102138:	18c00044 	addi	r3,r3,1
1010213c:	197fffc3 	ldbu	r5,-1(r3)
10102140:	31400526 	beq	r6,r5,10102158 <memchr+0x88>
10102144:	1805883a 	mov	r2,r3
10102148:	20fffb1e 	bne	r4,r3,10102138 <__alt_data_end+0xfffe2138>
1010214c:	0005883a 	mov	r2,zero
10102150:	f800283a 	ret
10102154:	2005883a 	mov	r2,r4
10102158:	f800283a 	ret
1010215c:	28c03fcc 	andi	r3,r5,255
10102160:	1812923a 	slli	r9,r3,8
10102164:	02ffbff4 	movhi	r11,65279
10102168:	02a02074 	movhi	r10,32897
1010216c:	48d2b03a 	or	r9,r9,r3
10102170:	4806943a 	slli	r3,r9,16
10102174:	5affbfc4 	addi	r11,r11,-257
10102178:	52a02004 	addi	r10,r10,-32640
1010217c:	48d2b03a 	or	r9,r9,r3
10102180:	20c00017 	ldw	r3,0(r4)
10102184:	48c6f03a 	xor	r3,r9,r3
10102188:	1acd883a 	add	r6,r3,r11
1010218c:	00c6303a 	nor	r3,zero,r3
10102190:	30c6703a 	and	r3,r6,r3
10102194:	1a86703a 	and	r3,r3,r10
10102198:	183fe01e 	bne	r3,zero,1010211c <__alt_data_end+0xfffe211c>
1010219c:	10bfff04 	addi	r2,r2,-4
101021a0:	21000104 	addi	r4,r4,4
101021a4:	40bff636 	bltu	r8,r2,10102180 <__alt_data_end+0xfffe2180>
101021a8:	003fdb06 	br	10102118 <__alt_data_end+0xfffe2118>
101021ac:	3005883a 	mov	r2,r6
101021b0:	003fd706 	br	10102110 <__alt_data_end+0xfffe2110>

101021b4 <memmove>:
101021b4:	2005883a 	mov	r2,r4
101021b8:	29000b2e 	bgeu	r5,r4,101021e8 <memmove+0x34>
101021bc:	298f883a 	add	r7,r5,r6
101021c0:	21c0092e 	bgeu	r4,r7,101021e8 <memmove+0x34>
101021c4:	2187883a 	add	r3,r4,r6
101021c8:	198bc83a 	sub	r5,r3,r6
101021cc:	30004826 	beq	r6,zero,101022f0 <memmove+0x13c>
101021d0:	39ffffc4 	addi	r7,r7,-1
101021d4:	39000003 	ldbu	r4,0(r7)
101021d8:	18ffffc4 	addi	r3,r3,-1
101021dc:	19000005 	stb	r4,0(r3)
101021e0:	28fffb1e 	bne	r5,r3,101021d0 <__alt_data_end+0xfffe21d0>
101021e4:	f800283a 	ret
101021e8:	00c003c4 	movi	r3,15
101021ec:	1980412e 	bgeu	r3,r6,101022f4 <memmove+0x140>
101021f0:	2886b03a 	or	r3,r5,r2
101021f4:	18c000cc 	andi	r3,r3,3
101021f8:	1800401e 	bne	r3,zero,101022fc <memmove+0x148>
101021fc:	33fffc04 	addi	r15,r6,-16
10102200:	781ed13a 	srli	r15,r15,4
10102204:	28c00104 	addi	r3,r5,4
10102208:	13400104 	addi	r13,r2,4
1010220c:	781c913a 	slli	r14,r15,4
10102210:	2b000204 	addi	r12,r5,8
10102214:	12c00204 	addi	r11,r2,8
10102218:	73800504 	addi	r14,r14,20
1010221c:	2a800304 	addi	r10,r5,12
10102220:	12400304 	addi	r9,r2,12
10102224:	2b9d883a 	add	r14,r5,r14
10102228:	2811883a 	mov	r8,r5
1010222c:	100f883a 	mov	r7,r2
10102230:	41000017 	ldw	r4,0(r8)
10102234:	39c00404 	addi	r7,r7,16
10102238:	18c00404 	addi	r3,r3,16
1010223c:	393ffc15 	stw	r4,-16(r7)
10102240:	193ffc17 	ldw	r4,-16(r3)
10102244:	6b400404 	addi	r13,r13,16
10102248:	5ac00404 	addi	r11,r11,16
1010224c:	693ffc15 	stw	r4,-16(r13)
10102250:	61000017 	ldw	r4,0(r12)
10102254:	4a400404 	addi	r9,r9,16
10102258:	42000404 	addi	r8,r8,16
1010225c:	593ffc15 	stw	r4,-16(r11)
10102260:	51000017 	ldw	r4,0(r10)
10102264:	63000404 	addi	r12,r12,16
10102268:	52800404 	addi	r10,r10,16
1010226c:	493ffc15 	stw	r4,-16(r9)
10102270:	1bbfef1e 	bne	r3,r14,10102230 <__alt_data_end+0xfffe2230>
10102274:	79000044 	addi	r4,r15,1
10102278:	2008913a 	slli	r4,r4,4
1010227c:	328003cc 	andi	r10,r6,15
10102280:	02c000c4 	movi	r11,3
10102284:	1107883a 	add	r3,r2,r4
10102288:	290b883a 	add	r5,r5,r4
1010228c:	5a801e2e 	bgeu	r11,r10,10102308 <memmove+0x154>
10102290:	1813883a 	mov	r9,r3
10102294:	2811883a 	mov	r8,r5
10102298:	500f883a 	mov	r7,r10
1010229c:	41000017 	ldw	r4,0(r8)
101022a0:	4a400104 	addi	r9,r9,4
101022a4:	39ffff04 	addi	r7,r7,-4
101022a8:	493fff15 	stw	r4,-4(r9)
101022ac:	42000104 	addi	r8,r8,4
101022b0:	59fffa36 	bltu	r11,r7,1010229c <__alt_data_end+0xfffe229c>
101022b4:	513fff04 	addi	r4,r10,-4
101022b8:	2008d0ba 	srli	r4,r4,2
101022bc:	318000cc 	andi	r6,r6,3
101022c0:	21000044 	addi	r4,r4,1
101022c4:	2109883a 	add	r4,r4,r4
101022c8:	2109883a 	add	r4,r4,r4
101022cc:	1907883a 	add	r3,r3,r4
101022d0:	290b883a 	add	r5,r5,r4
101022d4:	30000b26 	beq	r6,zero,10102304 <memmove+0x150>
101022d8:	198d883a 	add	r6,r3,r6
101022dc:	29c00003 	ldbu	r7,0(r5)
101022e0:	18c00044 	addi	r3,r3,1
101022e4:	29400044 	addi	r5,r5,1
101022e8:	19ffffc5 	stb	r7,-1(r3)
101022ec:	19bffb1e 	bne	r3,r6,101022dc <__alt_data_end+0xfffe22dc>
101022f0:	f800283a 	ret
101022f4:	1007883a 	mov	r3,r2
101022f8:	003ff606 	br	101022d4 <__alt_data_end+0xfffe22d4>
101022fc:	1007883a 	mov	r3,r2
10102300:	003ff506 	br	101022d8 <__alt_data_end+0xfffe22d8>
10102304:	f800283a 	ret
10102308:	500d883a 	mov	r6,r10
1010230c:	003ff106 	br	101022d4 <__alt_data_end+0xfffe22d4>

10102310 <memset>:
10102310:	20c000cc 	andi	r3,r4,3
10102314:	2005883a 	mov	r2,r4
10102318:	18004426 	beq	r3,zero,1010242c <memset+0x11c>
1010231c:	31ffffc4 	addi	r7,r6,-1
10102320:	30004026 	beq	r6,zero,10102424 <memset+0x114>
10102324:	2813883a 	mov	r9,r5
10102328:	200d883a 	mov	r6,r4
1010232c:	2007883a 	mov	r3,r4
10102330:	00000406 	br	10102344 <memset+0x34>
10102334:	3a3fffc4 	addi	r8,r7,-1
10102338:	31800044 	addi	r6,r6,1
1010233c:	38003926 	beq	r7,zero,10102424 <memset+0x114>
10102340:	400f883a 	mov	r7,r8
10102344:	18c00044 	addi	r3,r3,1
10102348:	32400005 	stb	r9,0(r6)
1010234c:	1a0000cc 	andi	r8,r3,3
10102350:	403ff81e 	bne	r8,zero,10102334 <__alt_data_end+0xfffe2334>
10102354:	010000c4 	movi	r4,3
10102358:	21c02d2e 	bgeu	r4,r7,10102410 <memset+0x100>
1010235c:	29003fcc 	andi	r4,r5,255
10102360:	200c923a 	slli	r6,r4,8
10102364:	3108b03a 	or	r4,r6,r4
10102368:	200c943a 	slli	r6,r4,16
1010236c:	218cb03a 	or	r6,r4,r6
10102370:	010003c4 	movi	r4,15
10102374:	21c0182e 	bgeu	r4,r7,101023d8 <memset+0xc8>
10102378:	3b3ffc04 	addi	r12,r7,-16
1010237c:	6018d13a 	srli	r12,r12,4
10102380:	1a000104 	addi	r8,r3,4
10102384:	1ac00204 	addi	r11,r3,8
10102388:	6008913a 	slli	r4,r12,4
1010238c:	1a800304 	addi	r10,r3,12
10102390:	1813883a 	mov	r9,r3
10102394:	21000504 	addi	r4,r4,20
10102398:	1909883a 	add	r4,r3,r4
1010239c:	49800015 	stw	r6,0(r9)
101023a0:	41800015 	stw	r6,0(r8)
101023a4:	59800015 	stw	r6,0(r11)
101023a8:	51800015 	stw	r6,0(r10)
101023ac:	42000404 	addi	r8,r8,16
101023b0:	4a400404 	addi	r9,r9,16
101023b4:	5ac00404 	addi	r11,r11,16
101023b8:	52800404 	addi	r10,r10,16
101023bc:	413ff71e 	bne	r8,r4,1010239c <__alt_data_end+0xfffe239c>
101023c0:	63000044 	addi	r12,r12,1
101023c4:	6018913a 	slli	r12,r12,4
101023c8:	39c003cc 	andi	r7,r7,15
101023cc:	010000c4 	movi	r4,3
101023d0:	1b07883a 	add	r3,r3,r12
101023d4:	21c00e2e 	bgeu	r4,r7,10102410 <memset+0x100>
101023d8:	1813883a 	mov	r9,r3
101023dc:	3811883a 	mov	r8,r7
101023e0:	010000c4 	movi	r4,3
101023e4:	49800015 	stw	r6,0(r9)
101023e8:	423fff04 	addi	r8,r8,-4
101023ec:	4a400104 	addi	r9,r9,4
101023f0:	223ffc36 	bltu	r4,r8,101023e4 <__alt_data_end+0xfffe23e4>
101023f4:	393fff04 	addi	r4,r7,-4
101023f8:	2008d0ba 	srli	r4,r4,2
101023fc:	39c000cc 	andi	r7,r7,3
10102400:	21000044 	addi	r4,r4,1
10102404:	2109883a 	add	r4,r4,r4
10102408:	2109883a 	add	r4,r4,r4
1010240c:	1907883a 	add	r3,r3,r4
10102410:	38000526 	beq	r7,zero,10102428 <memset+0x118>
10102414:	19cf883a 	add	r7,r3,r7
10102418:	19400005 	stb	r5,0(r3)
1010241c:	18c00044 	addi	r3,r3,1
10102420:	38fffd1e 	bne	r7,r3,10102418 <__alt_data_end+0xfffe2418>
10102424:	f800283a 	ret
10102428:	f800283a 	ret
1010242c:	2007883a 	mov	r3,r4
10102430:	300f883a 	mov	r7,r6
10102434:	003fc706 	br	10102354 <__alt_data_end+0xfffe2354>

10102438 <_realloc_r>:
10102438:	defff604 	addi	sp,sp,-40
1010243c:	dc800215 	stw	r18,8(sp)
10102440:	dfc00915 	stw	ra,36(sp)
10102444:	df000815 	stw	fp,32(sp)
10102448:	ddc00715 	stw	r23,28(sp)
1010244c:	dd800615 	stw	r22,24(sp)
10102450:	dd400515 	stw	r21,20(sp)
10102454:	dd000415 	stw	r20,16(sp)
10102458:	dcc00315 	stw	r19,12(sp)
1010245c:	dc400115 	stw	r17,4(sp)
10102460:	dc000015 	stw	r16,0(sp)
10102464:	3025883a 	mov	r18,r6
10102468:	2800b726 	beq	r5,zero,10102748 <_realloc_r+0x310>
1010246c:	282b883a 	mov	r21,r5
10102470:	2029883a 	mov	r20,r4
10102474:	0103ddc0 	call	10103ddc <__malloc_lock>
10102478:	a8bfff17 	ldw	r2,-4(r21)
1010247c:	043fff04 	movi	r16,-4
10102480:	90c002c4 	addi	r3,r18,11
10102484:	01000584 	movi	r4,22
10102488:	acfffe04 	addi	r19,r21,-8
1010248c:	1420703a 	and	r16,r2,r16
10102490:	20c0332e 	bgeu	r4,r3,10102560 <_realloc_r+0x128>
10102494:	047ffe04 	movi	r17,-8
10102498:	1c62703a 	and	r17,r3,r17
1010249c:	8807883a 	mov	r3,r17
101024a0:	88005816 	blt	r17,zero,10102604 <_realloc_r+0x1cc>
101024a4:	8c805736 	bltu	r17,r18,10102604 <_realloc_r+0x1cc>
101024a8:	80c0300e 	bge	r16,r3,1010256c <_realloc_r+0x134>
101024ac:	07040434 	movhi	fp,4112
101024b0:	e71a5804 	addi	fp,fp,26976
101024b4:	e1c00217 	ldw	r7,8(fp)
101024b8:	9c09883a 	add	r4,r19,r16
101024bc:	22000117 	ldw	r8,4(r4)
101024c0:	21c06326 	beq	r4,r7,10102650 <_realloc_r+0x218>
101024c4:	017fff84 	movi	r5,-2
101024c8:	414a703a 	and	r5,r8,r5
101024cc:	214b883a 	add	r5,r4,r5
101024d0:	29800117 	ldw	r6,4(r5)
101024d4:	3180004c 	andi	r6,r6,1
101024d8:	30003f26 	beq	r6,zero,101025d8 <_realloc_r+0x1a0>
101024dc:	1080004c 	andi	r2,r2,1
101024e0:	10008326 	beq	r2,zero,101026f0 <_realloc_r+0x2b8>
101024e4:	900b883a 	mov	r5,r18
101024e8:	a009883a 	mov	r4,r20
101024ec:	01018c40 	call	101018c4 <_malloc_r>
101024f0:	1025883a 	mov	r18,r2
101024f4:	10011e26 	beq	r2,zero,10102970 <_realloc_r+0x538>
101024f8:	a93fff17 	ldw	r4,-4(r21)
101024fc:	10fffe04 	addi	r3,r2,-8
10102500:	00bfff84 	movi	r2,-2
10102504:	2084703a 	and	r2,r4,r2
10102508:	9885883a 	add	r2,r19,r2
1010250c:	1880ee26 	beq	r3,r2,101028c8 <_realloc_r+0x490>
10102510:	81bfff04 	addi	r6,r16,-4
10102514:	00800904 	movi	r2,36
10102518:	1180b836 	bltu	r2,r6,101027fc <_realloc_r+0x3c4>
1010251c:	00c004c4 	movi	r3,19
10102520:	19809636 	bltu	r3,r6,1010277c <_realloc_r+0x344>
10102524:	9005883a 	mov	r2,r18
10102528:	a807883a 	mov	r3,r21
1010252c:	19000017 	ldw	r4,0(r3)
10102530:	11000015 	stw	r4,0(r2)
10102534:	19000117 	ldw	r4,4(r3)
10102538:	11000115 	stw	r4,4(r2)
1010253c:	18c00217 	ldw	r3,8(r3)
10102540:	10c00215 	stw	r3,8(r2)
10102544:	a80b883a 	mov	r5,r21
10102548:	a009883a 	mov	r4,r20
1010254c:	01032040 	call	10103204 <_free_r>
10102550:	a009883a 	mov	r4,r20
10102554:	0103e000 	call	10103e00 <__malloc_unlock>
10102558:	9005883a 	mov	r2,r18
1010255c:	00001206 	br	101025a8 <_realloc_r+0x170>
10102560:	00c00404 	movi	r3,16
10102564:	1823883a 	mov	r17,r3
10102568:	003fce06 	br	101024a4 <__alt_data_end+0xfffe24a4>
1010256c:	a825883a 	mov	r18,r21
10102570:	8445c83a 	sub	r2,r16,r17
10102574:	00c003c4 	movi	r3,15
10102578:	18802636 	bltu	r3,r2,10102614 <_realloc_r+0x1dc>
1010257c:	99800117 	ldw	r6,4(r19)
10102580:	9c07883a 	add	r3,r19,r16
10102584:	3180004c 	andi	r6,r6,1
10102588:	3420b03a 	or	r16,r6,r16
1010258c:	9c000115 	stw	r16,4(r19)
10102590:	18800117 	ldw	r2,4(r3)
10102594:	10800054 	ori	r2,r2,1
10102598:	18800115 	stw	r2,4(r3)
1010259c:	a009883a 	mov	r4,r20
101025a0:	0103e000 	call	10103e00 <__malloc_unlock>
101025a4:	9005883a 	mov	r2,r18
101025a8:	dfc00917 	ldw	ra,36(sp)
101025ac:	df000817 	ldw	fp,32(sp)
101025b0:	ddc00717 	ldw	r23,28(sp)
101025b4:	dd800617 	ldw	r22,24(sp)
101025b8:	dd400517 	ldw	r21,20(sp)
101025bc:	dd000417 	ldw	r20,16(sp)
101025c0:	dcc00317 	ldw	r19,12(sp)
101025c4:	dc800217 	ldw	r18,8(sp)
101025c8:	dc400117 	ldw	r17,4(sp)
101025cc:	dc000017 	ldw	r16,0(sp)
101025d0:	dec00a04 	addi	sp,sp,40
101025d4:	f800283a 	ret
101025d8:	017fff04 	movi	r5,-4
101025dc:	414a703a 	and	r5,r8,r5
101025e0:	814d883a 	add	r6,r16,r5
101025e4:	30c01f16 	blt	r6,r3,10102664 <_realloc_r+0x22c>
101025e8:	20800317 	ldw	r2,12(r4)
101025ec:	20c00217 	ldw	r3,8(r4)
101025f0:	a825883a 	mov	r18,r21
101025f4:	3021883a 	mov	r16,r6
101025f8:	18800315 	stw	r2,12(r3)
101025fc:	10c00215 	stw	r3,8(r2)
10102600:	003fdb06 	br	10102570 <__alt_data_end+0xfffe2570>
10102604:	00800304 	movi	r2,12
10102608:	a0800015 	stw	r2,0(r20)
1010260c:	0005883a 	mov	r2,zero
10102610:	003fe506 	br	101025a8 <__alt_data_end+0xfffe25a8>
10102614:	98c00117 	ldw	r3,4(r19)
10102618:	9c4b883a 	add	r5,r19,r17
1010261c:	11000054 	ori	r4,r2,1
10102620:	18c0004c 	andi	r3,r3,1
10102624:	1c62b03a 	or	r17,r3,r17
10102628:	9c400115 	stw	r17,4(r19)
1010262c:	29000115 	stw	r4,4(r5)
10102630:	2885883a 	add	r2,r5,r2
10102634:	10c00117 	ldw	r3,4(r2)
10102638:	29400204 	addi	r5,r5,8
1010263c:	a009883a 	mov	r4,r20
10102640:	18c00054 	ori	r3,r3,1
10102644:	10c00115 	stw	r3,4(r2)
10102648:	01032040 	call	10103204 <_free_r>
1010264c:	003fd306 	br	1010259c <__alt_data_end+0xfffe259c>
10102650:	017fff04 	movi	r5,-4
10102654:	414a703a 	and	r5,r8,r5
10102658:	89800404 	addi	r6,r17,16
1010265c:	8151883a 	add	r8,r16,r5
10102660:	4180590e 	bge	r8,r6,101027c8 <_realloc_r+0x390>
10102664:	1080004c 	andi	r2,r2,1
10102668:	103f9e1e 	bne	r2,zero,101024e4 <__alt_data_end+0xfffe24e4>
1010266c:	adbffe17 	ldw	r22,-8(r21)
10102670:	00bfff04 	movi	r2,-4
10102674:	9dadc83a 	sub	r22,r19,r22
10102678:	b1800117 	ldw	r6,4(r22)
1010267c:	3084703a 	and	r2,r6,r2
10102680:	20002026 	beq	r4,zero,10102704 <_realloc_r+0x2cc>
10102684:	80af883a 	add	r23,r16,r2
10102688:	b96f883a 	add	r23,r23,r5
1010268c:	21c05f26 	beq	r4,r7,1010280c <_realloc_r+0x3d4>
10102690:	b8c01c16 	blt	r23,r3,10102704 <_realloc_r+0x2cc>
10102694:	20800317 	ldw	r2,12(r4)
10102698:	20c00217 	ldw	r3,8(r4)
1010269c:	81bfff04 	addi	r6,r16,-4
101026a0:	01000904 	movi	r4,36
101026a4:	18800315 	stw	r2,12(r3)
101026a8:	10c00215 	stw	r3,8(r2)
101026ac:	b0c00217 	ldw	r3,8(r22)
101026b0:	b0800317 	ldw	r2,12(r22)
101026b4:	b4800204 	addi	r18,r22,8
101026b8:	18800315 	stw	r2,12(r3)
101026bc:	10c00215 	stw	r3,8(r2)
101026c0:	21801b36 	bltu	r4,r6,10102730 <_realloc_r+0x2f8>
101026c4:	008004c4 	movi	r2,19
101026c8:	1180352e 	bgeu	r2,r6,101027a0 <_realloc_r+0x368>
101026cc:	a8800017 	ldw	r2,0(r21)
101026d0:	b0800215 	stw	r2,8(r22)
101026d4:	a8800117 	ldw	r2,4(r21)
101026d8:	b0800315 	stw	r2,12(r22)
101026dc:	008006c4 	movi	r2,27
101026e0:	11807f36 	bltu	r2,r6,101028e0 <_realloc_r+0x4a8>
101026e4:	b0800404 	addi	r2,r22,16
101026e8:	ad400204 	addi	r21,r21,8
101026ec:	00002d06 	br	101027a4 <_realloc_r+0x36c>
101026f0:	adbffe17 	ldw	r22,-8(r21)
101026f4:	00bfff04 	movi	r2,-4
101026f8:	9dadc83a 	sub	r22,r19,r22
101026fc:	b1000117 	ldw	r4,4(r22)
10102700:	2084703a 	and	r2,r4,r2
10102704:	b03f7726 	beq	r22,zero,101024e4 <__alt_data_end+0xfffe24e4>
10102708:	80af883a 	add	r23,r16,r2
1010270c:	b8ff7516 	blt	r23,r3,101024e4 <__alt_data_end+0xfffe24e4>
10102710:	b0800317 	ldw	r2,12(r22)
10102714:	b0c00217 	ldw	r3,8(r22)
10102718:	81bfff04 	addi	r6,r16,-4
1010271c:	01000904 	movi	r4,36
10102720:	18800315 	stw	r2,12(r3)
10102724:	10c00215 	stw	r3,8(r2)
10102728:	b4800204 	addi	r18,r22,8
1010272c:	21bfe52e 	bgeu	r4,r6,101026c4 <__alt_data_end+0xfffe26c4>
10102730:	a80b883a 	mov	r5,r21
10102734:	9009883a 	mov	r4,r18
10102738:	01021b40 	call	101021b4 <memmove>
1010273c:	b821883a 	mov	r16,r23
10102740:	b027883a 	mov	r19,r22
10102744:	003f8a06 	br	10102570 <__alt_data_end+0xfffe2570>
10102748:	300b883a 	mov	r5,r6
1010274c:	dfc00917 	ldw	ra,36(sp)
10102750:	df000817 	ldw	fp,32(sp)
10102754:	ddc00717 	ldw	r23,28(sp)
10102758:	dd800617 	ldw	r22,24(sp)
1010275c:	dd400517 	ldw	r21,20(sp)
10102760:	dd000417 	ldw	r20,16(sp)
10102764:	dcc00317 	ldw	r19,12(sp)
10102768:	dc800217 	ldw	r18,8(sp)
1010276c:	dc400117 	ldw	r17,4(sp)
10102770:	dc000017 	ldw	r16,0(sp)
10102774:	dec00a04 	addi	sp,sp,40
10102778:	01018c41 	jmpi	101018c4 <_malloc_r>
1010277c:	a8c00017 	ldw	r3,0(r21)
10102780:	90c00015 	stw	r3,0(r18)
10102784:	a8c00117 	ldw	r3,4(r21)
10102788:	90c00115 	stw	r3,4(r18)
1010278c:	00c006c4 	movi	r3,27
10102790:	19804536 	bltu	r3,r6,101028a8 <_realloc_r+0x470>
10102794:	90800204 	addi	r2,r18,8
10102798:	a8c00204 	addi	r3,r21,8
1010279c:	003f6306 	br	1010252c <__alt_data_end+0xfffe252c>
101027a0:	9005883a 	mov	r2,r18
101027a4:	a8c00017 	ldw	r3,0(r21)
101027a8:	b821883a 	mov	r16,r23
101027ac:	b027883a 	mov	r19,r22
101027b0:	10c00015 	stw	r3,0(r2)
101027b4:	a8c00117 	ldw	r3,4(r21)
101027b8:	10c00115 	stw	r3,4(r2)
101027bc:	a8c00217 	ldw	r3,8(r21)
101027c0:	10c00215 	stw	r3,8(r2)
101027c4:	003f6a06 	br	10102570 <__alt_data_end+0xfffe2570>
101027c8:	9c67883a 	add	r19,r19,r17
101027cc:	4445c83a 	sub	r2,r8,r17
101027d0:	e4c00215 	stw	r19,8(fp)
101027d4:	10800054 	ori	r2,r2,1
101027d8:	98800115 	stw	r2,4(r19)
101027dc:	a8bfff17 	ldw	r2,-4(r21)
101027e0:	a009883a 	mov	r4,r20
101027e4:	1080004c 	andi	r2,r2,1
101027e8:	1462b03a 	or	r17,r2,r17
101027ec:	ac7fff15 	stw	r17,-4(r21)
101027f0:	0103e000 	call	10103e00 <__malloc_unlock>
101027f4:	a805883a 	mov	r2,r21
101027f8:	003f6b06 	br	101025a8 <__alt_data_end+0xfffe25a8>
101027fc:	a80b883a 	mov	r5,r21
10102800:	9009883a 	mov	r4,r18
10102804:	01021b40 	call	101021b4 <memmove>
10102808:	003f4e06 	br	10102544 <__alt_data_end+0xfffe2544>
1010280c:	89000404 	addi	r4,r17,16
10102810:	b93fbc16 	blt	r23,r4,10102704 <__alt_data_end+0xfffe2704>
10102814:	b0800317 	ldw	r2,12(r22)
10102818:	b0c00217 	ldw	r3,8(r22)
1010281c:	81bfff04 	addi	r6,r16,-4
10102820:	01000904 	movi	r4,36
10102824:	18800315 	stw	r2,12(r3)
10102828:	10c00215 	stw	r3,8(r2)
1010282c:	b4800204 	addi	r18,r22,8
10102830:	21804336 	bltu	r4,r6,10102940 <_realloc_r+0x508>
10102834:	008004c4 	movi	r2,19
10102838:	11803f2e 	bgeu	r2,r6,10102938 <_realloc_r+0x500>
1010283c:	a8800017 	ldw	r2,0(r21)
10102840:	b0800215 	stw	r2,8(r22)
10102844:	a8800117 	ldw	r2,4(r21)
10102848:	b0800315 	stw	r2,12(r22)
1010284c:	008006c4 	movi	r2,27
10102850:	11803f36 	bltu	r2,r6,10102950 <_realloc_r+0x518>
10102854:	b0800404 	addi	r2,r22,16
10102858:	ad400204 	addi	r21,r21,8
1010285c:	a8c00017 	ldw	r3,0(r21)
10102860:	10c00015 	stw	r3,0(r2)
10102864:	a8c00117 	ldw	r3,4(r21)
10102868:	10c00115 	stw	r3,4(r2)
1010286c:	a8c00217 	ldw	r3,8(r21)
10102870:	10c00215 	stw	r3,8(r2)
10102874:	b447883a 	add	r3,r22,r17
10102878:	bc45c83a 	sub	r2,r23,r17
1010287c:	e0c00215 	stw	r3,8(fp)
10102880:	10800054 	ori	r2,r2,1
10102884:	18800115 	stw	r2,4(r3)
10102888:	b0800117 	ldw	r2,4(r22)
1010288c:	a009883a 	mov	r4,r20
10102890:	1080004c 	andi	r2,r2,1
10102894:	1462b03a 	or	r17,r2,r17
10102898:	b4400115 	stw	r17,4(r22)
1010289c:	0103e000 	call	10103e00 <__malloc_unlock>
101028a0:	9005883a 	mov	r2,r18
101028a4:	003f4006 	br	101025a8 <__alt_data_end+0xfffe25a8>
101028a8:	a8c00217 	ldw	r3,8(r21)
101028ac:	90c00215 	stw	r3,8(r18)
101028b0:	a8c00317 	ldw	r3,12(r21)
101028b4:	90c00315 	stw	r3,12(r18)
101028b8:	30801126 	beq	r6,r2,10102900 <_realloc_r+0x4c8>
101028bc:	90800404 	addi	r2,r18,16
101028c0:	a8c00404 	addi	r3,r21,16
101028c4:	003f1906 	br	1010252c <__alt_data_end+0xfffe252c>
101028c8:	90ffff17 	ldw	r3,-4(r18)
101028cc:	00bfff04 	movi	r2,-4
101028d0:	a825883a 	mov	r18,r21
101028d4:	1884703a 	and	r2,r3,r2
101028d8:	80a1883a 	add	r16,r16,r2
101028dc:	003f2406 	br	10102570 <__alt_data_end+0xfffe2570>
101028e0:	a8800217 	ldw	r2,8(r21)
101028e4:	b0800415 	stw	r2,16(r22)
101028e8:	a8800317 	ldw	r2,12(r21)
101028ec:	b0800515 	stw	r2,20(r22)
101028f0:	31000a26 	beq	r6,r4,1010291c <_realloc_r+0x4e4>
101028f4:	b0800604 	addi	r2,r22,24
101028f8:	ad400404 	addi	r21,r21,16
101028fc:	003fa906 	br	101027a4 <__alt_data_end+0xfffe27a4>
10102900:	a9000417 	ldw	r4,16(r21)
10102904:	90800604 	addi	r2,r18,24
10102908:	a8c00604 	addi	r3,r21,24
1010290c:	91000415 	stw	r4,16(r18)
10102910:	a9000517 	ldw	r4,20(r21)
10102914:	91000515 	stw	r4,20(r18)
10102918:	003f0406 	br	1010252c <__alt_data_end+0xfffe252c>
1010291c:	a8c00417 	ldw	r3,16(r21)
10102920:	ad400604 	addi	r21,r21,24
10102924:	b0800804 	addi	r2,r22,32
10102928:	b0c00615 	stw	r3,24(r22)
1010292c:	a8ffff17 	ldw	r3,-4(r21)
10102930:	b0c00715 	stw	r3,28(r22)
10102934:	003f9b06 	br	101027a4 <__alt_data_end+0xfffe27a4>
10102938:	9005883a 	mov	r2,r18
1010293c:	003fc706 	br	1010285c <__alt_data_end+0xfffe285c>
10102940:	a80b883a 	mov	r5,r21
10102944:	9009883a 	mov	r4,r18
10102948:	01021b40 	call	101021b4 <memmove>
1010294c:	003fc906 	br	10102874 <__alt_data_end+0xfffe2874>
10102950:	a8800217 	ldw	r2,8(r21)
10102954:	b0800415 	stw	r2,16(r22)
10102958:	a8800317 	ldw	r2,12(r21)
1010295c:	b0800515 	stw	r2,20(r22)
10102960:	31000726 	beq	r6,r4,10102980 <_realloc_r+0x548>
10102964:	b0800604 	addi	r2,r22,24
10102968:	ad400404 	addi	r21,r21,16
1010296c:	003fbb06 	br	1010285c <__alt_data_end+0xfffe285c>
10102970:	a009883a 	mov	r4,r20
10102974:	0103e000 	call	10103e00 <__malloc_unlock>
10102978:	0005883a 	mov	r2,zero
1010297c:	003f0a06 	br	101025a8 <__alt_data_end+0xfffe25a8>
10102980:	a8c00417 	ldw	r3,16(r21)
10102984:	ad400604 	addi	r21,r21,24
10102988:	b0800804 	addi	r2,r22,32
1010298c:	b0c00615 	stw	r3,24(r22)
10102990:	a8ffff17 	ldw	r3,-4(r21)
10102994:	b0c00715 	stw	r3,28(r22)
10102998:	003fb006 	br	1010285c <__alt_data_end+0xfffe285c>

1010299c <_sbrk_r>:
1010299c:	defffd04 	addi	sp,sp,-12
101029a0:	dc000015 	stw	r16,0(sp)
101029a4:	04040474 	movhi	r16,4113
101029a8:	dc400115 	stw	r17,4(sp)
101029ac:	8426c004 	addi	r16,r16,-25856
101029b0:	2023883a 	mov	r17,r4
101029b4:	2809883a 	mov	r4,r5
101029b8:	dfc00215 	stw	ra,8(sp)
101029bc:	80000015 	stw	zero,0(r16)
101029c0:	0103fe80 	call	10103fe8 <sbrk>
101029c4:	00ffffc4 	movi	r3,-1
101029c8:	10c00526 	beq	r2,r3,101029e0 <_sbrk_r+0x44>
101029cc:	dfc00217 	ldw	ra,8(sp)
101029d0:	dc400117 	ldw	r17,4(sp)
101029d4:	dc000017 	ldw	r16,0(sp)
101029d8:	dec00304 	addi	sp,sp,12
101029dc:	f800283a 	ret
101029e0:	80c00017 	ldw	r3,0(r16)
101029e4:	183ff926 	beq	r3,zero,101029cc <__alt_data_end+0xfffe29cc>
101029e8:	88c00015 	stw	r3,0(r17)
101029ec:	003ff706 	br	101029cc <__alt_data_end+0xfffe29cc>

101029f0 <__sread>:
101029f0:	defffe04 	addi	sp,sp,-8
101029f4:	dc000015 	stw	r16,0(sp)
101029f8:	2821883a 	mov	r16,r5
101029fc:	2940038f 	ldh	r5,14(r5)
10102a00:	dfc00115 	stw	ra,4(sp)
10102a04:	01037300 	call	10103730 <_read_r>
10102a08:	10000716 	blt	r2,zero,10102a28 <__sread+0x38>
10102a0c:	80c01417 	ldw	r3,80(r16)
10102a10:	1887883a 	add	r3,r3,r2
10102a14:	80c01415 	stw	r3,80(r16)
10102a18:	dfc00117 	ldw	ra,4(sp)
10102a1c:	dc000017 	ldw	r16,0(sp)
10102a20:	dec00204 	addi	sp,sp,8
10102a24:	f800283a 	ret
10102a28:	80c0030b 	ldhu	r3,12(r16)
10102a2c:	18fbffcc 	andi	r3,r3,61439
10102a30:	80c0030d 	sth	r3,12(r16)
10102a34:	dfc00117 	ldw	ra,4(sp)
10102a38:	dc000017 	ldw	r16,0(sp)
10102a3c:	dec00204 	addi	sp,sp,8
10102a40:	f800283a 	ret

10102a44 <__seofread>:
10102a44:	0005883a 	mov	r2,zero
10102a48:	f800283a 	ret

10102a4c <__swrite>:
10102a4c:	2880030b 	ldhu	r2,12(r5)
10102a50:	defffb04 	addi	sp,sp,-20
10102a54:	dcc00315 	stw	r19,12(sp)
10102a58:	dc800215 	stw	r18,8(sp)
10102a5c:	dc400115 	stw	r17,4(sp)
10102a60:	dc000015 	stw	r16,0(sp)
10102a64:	dfc00415 	stw	ra,16(sp)
10102a68:	10c0400c 	andi	r3,r2,256
10102a6c:	2821883a 	mov	r16,r5
10102a70:	2023883a 	mov	r17,r4
10102a74:	3025883a 	mov	r18,r6
10102a78:	3827883a 	mov	r19,r7
10102a7c:	18000526 	beq	r3,zero,10102a94 <__swrite+0x48>
10102a80:	2940038f 	ldh	r5,14(r5)
10102a84:	01c00084 	movi	r7,2
10102a88:	000d883a 	mov	r6,zero
10102a8c:	01035140 	call	10103514 <_lseek_r>
10102a90:	8080030b 	ldhu	r2,12(r16)
10102a94:	8140038f 	ldh	r5,14(r16)
10102a98:	10bbffcc 	andi	r2,r2,61439
10102a9c:	980f883a 	mov	r7,r19
10102aa0:	900d883a 	mov	r6,r18
10102aa4:	8809883a 	mov	r4,r17
10102aa8:	8080030d 	sth	r2,12(r16)
10102aac:	dfc00417 	ldw	ra,16(sp)
10102ab0:	dcc00317 	ldw	r19,12(sp)
10102ab4:	dc800217 	ldw	r18,8(sp)
10102ab8:	dc400117 	ldw	r17,4(sp)
10102abc:	dc000017 	ldw	r16,0(sp)
10102ac0:	dec00504 	addi	sp,sp,20
10102ac4:	0102b2c1 	jmpi	10102b2c <_write_r>

10102ac8 <__sseek>:
10102ac8:	defffe04 	addi	sp,sp,-8
10102acc:	dc000015 	stw	r16,0(sp)
10102ad0:	2821883a 	mov	r16,r5
10102ad4:	2940038f 	ldh	r5,14(r5)
10102ad8:	dfc00115 	stw	ra,4(sp)
10102adc:	01035140 	call	10103514 <_lseek_r>
10102ae0:	00ffffc4 	movi	r3,-1
10102ae4:	10c00826 	beq	r2,r3,10102b08 <__sseek+0x40>
10102ae8:	80c0030b 	ldhu	r3,12(r16)
10102aec:	80801415 	stw	r2,80(r16)
10102af0:	18c40014 	ori	r3,r3,4096
10102af4:	80c0030d 	sth	r3,12(r16)
10102af8:	dfc00117 	ldw	ra,4(sp)
10102afc:	dc000017 	ldw	r16,0(sp)
10102b00:	dec00204 	addi	sp,sp,8
10102b04:	f800283a 	ret
10102b08:	80c0030b 	ldhu	r3,12(r16)
10102b0c:	18fbffcc 	andi	r3,r3,61439
10102b10:	80c0030d 	sth	r3,12(r16)
10102b14:	dfc00117 	ldw	ra,4(sp)
10102b18:	dc000017 	ldw	r16,0(sp)
10102b1c:	dec00204 	addi	sp,sp,8
10102b20:	f800283a 	ret

10102b24 <__sclose>:
10102b24:	2940038f 	ldh	r5,14(r5)
10102b28:	0102ce01 	jmpi	10102ce0 <_close_r>

10102b2c <_write_r>:
10102b2c:	defffd04 	addi	sp,sp,-12
10102b30:	2805883a 	mov	r2,r5
10102b34:	dc000015 	stw	r16,0(sp)
10102b38:	04040474 	movhi	r16,4113
10102b3c:	dc400115 	stw	r17,4(sp)
10102b40:	300b883a 	mov	r5,r6
10102b44:	8426c004 	addi	r16,r16,-25856
10102b48:	2023883a 	mov	r17,r4
10102b4c:	380d883a 	mov	r6,r7
10102b50:	1009883a 	mov	r4,r2
10102b54:	dfc00215 	stw	ra,8(sp)
10102b58:	80000015 	stw	zero,0(r16)
10102b5c:	01040d40 	call	101040d4 <write>
10102b60:	00ffffc4 	movi	r3,-1
10102b64:	10c00526 	beq	r2,r3,10102b7c <_write_r+0x50>
10102b68:	dfc00217 	ldw	ra,8(sp)
10102b6c:	dc400117 	ldw	r17,4(sp)
10102b70:	dc000017 	ldw	r16,0(sp)
10102b74:	dec00304 	addi	sp,sp,12
10102b78:	f800283a 	ret
10102b7c:	80c00017 	ldw	r3,0(r16)
10102b80:	183ff926 	beq	r3,zero,10102b68 <__alt_data_end+0xfffe2b68>
10102b84:	88c00015 	stw	r3,0(r17)
10102b88:	003ff706 	br	10102b68 <__alt_data_end+0xfffe2b68>

10102b8c <__swsetup_r>:
10102b8c:	00840434 	movhi	r2,4112
10102b90:	defffd04 	addi	sp,sp,-12
10102b94:	109fe704 	addi	r2,r2,32668
10102b98:	dc400115 	stw	r17,4(sp)
10102b9c:	2023883a 	mov	r17,r4
10102ba0:	11000017 	ldw	r4,0(r2)
10102ba4:	dc000015 	stw	r16,0(sp)
10102ba8:	dfc00215 	stw	ra,8(sp)
10102bac:	2821883a 	mov	r16,r5
10102bb0:	20000226 	beq	r4,zero,10102bbc <__swsetup_r+0x30>
10102bb4:	20800e17 	ldw	r2,56(r4)
10102bb8:	10003126 	beq	r2,zero,10102c80 <__swsetup_r+0xf4>
10102bbc:	8080030b 	ldhu	r2,12(r16)
10102bc0:	10c0020c 	andi	r3,r2,8
10102bc4:	1009883a 	mov	r4,r2
10102bc8:	18000f26 	beq	r3,zero,10102c08 <__swsetup_r+0x7c>
10102bcc:	80c00417 	ldw	r3,16(r16)
10102bd0:	18001526 	beq	r3,zero,10102c28 <__swsetup_r+0x9c>
10102bd4:	1100004c 	andi	r4,r2,1
10102bd8:	20001c1e 	bne	r4,zero,10102c4c <__swsetup_r+0xc0>
10102bdc:	1080008c 	andi	r2,r2,2
10102be0:	1000291e 	bne	r2,zero,10102c88 <__swsetup_r+0xfc>
10102be4:	80800517 	ldw	r2,20(r16)
10102be8:	80800215 	stw	r2,8(r16)
10102bec:	18001c26 	beq	r3,zero,10102c60 <__swsetup_r+0xd4>
10102bf0:	0005883a 	mov	r2,zero
10102bf4:	dfc00217 	ldw	ra,8(sp)
10102bf8:	dc400117 	ldw	r17,4(sp)
10102bfc:	dc000017 	ldw	r16,0(sp)
10102c00:	dec00304 	addi	sp,sp,12
10102c04:	f800283a 	ret
10102c08:	2080040c 	andi	r2,r4,16
10102c0c:	10002e26 	beq	r2,zero,10102cc8 <__swsetup_r+0x13c>
10102c10:	2080010c 	andi	r2,r4,4
10102c14:	10001e1e 	bne	r2,zero,10102c90 <__swsetup_r+0x104>
10102c18:	80c00417 	ldw	r3,16(r16)
10102c1c:	20800214 	ori	r2,r4,8
10102c20:	8080030d 	sth	r2,12(r16)
10102c24:	183feb1e 	bne	r3,zero,10102bd4 <__alt_data_end+0xfffe2bd4>
10102c28:	1100a00c 	andi	r4,r2,640
10102c2c:	01408004 	movi	r5,512
10102c30:	217fe826 	beq	r4,r5,10102bd4 <__alt_data_end+0xfffe2bd4>
10102c34:	800b883a 	mov	r5,r16
10102c38:	8809883a 	mov	r4,r17
10102c3c:	01035740 	call	10103574 <__smakebuf_r>
10102c40:	8080030b 	ldhu	r2,12(r16)
10102c44:	80c00417 	ldw	r3,16(r16)
10102c48:	003fe206 	br	10102bd4 <__alt_data_end+0xfffe2bd4>
10102c4c:	80800517 	ldw	r2,20(r16)
10102c50:	80000215 	stw	zero,8(r16)
10102c54:	0085c83a 	sub	r2,zero,r2
10102c58:	80800615 	stw	r2,24(r16)
10102c5c:	183fe41e 	bne	r3,zero,10102bf0 <__alt_data_end+0xfffe2bf0>
10102c60:	80c0030b 	ldhu	r3,12(r16)
10102c64:	0005883a 	mov	r2,zero
10102c68:	1900200c 	andi	r4,r3,128
10102c6c:	203fe126 	beq	r4,zero,10102bf4 <__alt_data_end+0xfffe2bf4>
10102c70:	18c01014 	ori	r3,r3,64
10102c74:	80c0030d 	sth	r3,12(r16)
10102c78:	00bfffc4 	movi	r2,-1
10102c7c:	003fdd06 	br	10102bf4 <__alt_data_end+0xfffe2bf4>
10102c80:	01012240 	call	10101224 <__sinit>
10102c84:	003fcd06 	br	10102bbc <__alt_data_end+0xfffe2bbc>
10102c88:	0005883a 	mov	r2,zero
10102c8c:	003fd606 	br	10102be8 <__alt_data_end+0xfffe2be8>
10102c90:	81400c17 	ldw	r5,48(r16)
10102c94:	28000626 	beq	r5,zero,10102cb0 <__swsetup_r+0x124>
10102c98:	80801004 	addi	r2,r16,64
10102c9c:	28800326 	beq	r5,r2,10102cac <__swsetup_r+0x120>
10102ca0:	8809883a 	mov	r4,r17
10102ca4:	01032040 	call	10103204 <_free_r>
10102ca8:	8100030b 	ldhu	r4,12(r16)
10102cac:	80000c15 	stw	zero,48(r16)
10102cb0:	80c00417 	ldw	r3,16(r16)
10102cb4:	00bff6c4 	movi	r2,-37
10102cb8:	1108703a 	and	r4,r2,r4
10102cbc:	80000115 	stw	zero,4(r16)
10102cc0:	80c00015 	stw	r3,0(r16)
10102cc4:	003fd506 	br	10102c1c <__alt_data_end+0xfffe2c1c>
10102cc8:	00800244 	movi	r2,9
10102ccc:	88800015 	stw	r2,0(r17)
10102cd0:	20801014 	ori	r2,r4,64
10102cd4:	8080030d 	sth	r2,12(r16)
10102cd8:	00bfffc4 	movi	r2,-1
10102cdc:	003fc506 	br	10102bf4 <__alt_data_end+0xfffe2bf4>

10102ce0 <_close_r>:
10102ce0:	defffd04 	addi	sp,sp,-12
10102ce4:	dc000015 	stw	r16,0(sp)
10102ce8:	04040474 	movhi	r16,4113
10102cec:	dc400115 	stw	r17,4(sp)
10102cf0:	8426c004 	addi	r16,r16,-25856
10102cf4:	2023883a 	mov	r17,r4
10102cf8:	2809883a 	mov	r4,r5
10102cfc:	dfc00215 	stw	ra,8(sp)
10102d00:	80000015 	stw	zero,0(r16)
10102d04:	010387c0 	call	1010387c <close>
10102d08:	00ffffc4 	movi	r3,-1
10102d0c:	10c00526 	beq	r2,r3,10102d24 <_close_r+0x44>
10102d10:	dfc00217 	ldw	ra,8(sp)
10102d14:	dc400117 	ldw	r17,4(sp)
10102d18:	dc000017 	ldw	r16,0(sp)
10102d1c:	dec00304 	addi	sp,sp,12
10102d20:	f800283a 	ret
10102d24:	80c00017 	ldw	r3,0(r16)
10102d28:	183ff926 	beq	r3,zero,10102d10 <__alt_data_end+0xfffe2d10>
10102d2c:	88c00015 	stw	r3,0(r17)
10102d30:	003ff706 	br	10102d10 <__alt_data_end+0xfffe2d10>

10102d34 <_fclose_r>:
10102d34:	28003926 	beq	r5,zero,10102e1c <_fclose_r+0xe8>
10102d38:	defffc04 	addi	sp,sp,-16
10102d3c:	dc400115 	stw	r17,4(sp)
10102d40:	dc000015 	stw	r16,0(sp)
10102d44:	dfc00315 	stw	ra,12(sp)
10102d48:	dc800215 	stw	r18,8(sp)
10102d4c:	2023883a 	mov	r17,r4
10102d50:	2821883a 	mov	r16,r5
10102d54:	20000226 	beq	r4,zero,10102d60 <_fclose_r+0x2c>
10102d58:	20800e17 	ldw	r2,56(r4)
10102d5c:	10002726 	beq	r2,zero,10102dfc <_fclose_r+0xc8>
10102d60:	8080030f 	ldh	r2,12(r16)
10102d64:	1000071e 	bne	r2,zero,10102d84 <_fclose_r+0x50>
10102d68:	0005883a 	mov	r2,zero
10102d6c:	dfc00317 	ldw	ra,12(sp)
10102d70:	dc800217 	ldw	r18,8(sp)
10102d74:	dc400117 	ldw	r17,4(sp)
10102d78:	dc000017 	ldw	r16,0(sp)
10102d7c:	dec00404 	addi	sp,sp,16
10102d80:	f800283a 	ret
10102d84:	800b883a 	mov	r5,r16
10102d88:	8809883a 	mov	r4,r17
10102d8c:	0102e380 	call	10102e38 <__sflush_r>
10102d90:	1025883a 	mov	r18,r2
10102d94:	80800b17 	ldw	r2,44(r16)
10102d98:	10000426 	beq	r2,zero,10102dac <_fclose_r+0x78>
10102d9c:	81400717 	ldw	r5,28(r16)
10102da0:	8809883a 	mov	r4,r17
10102da4:	103ee83a 	callr	r2
10102da8:	10001616 	blt	r2,zero,10102e04 <_fclose_r+0xd0>
10102dac:	8080030b 	ldhu	r2,12(r16)
10102db0:	1080200c 	andi	r2,r2,128
10102db4:	1000151e 	bne	r2,zero,10102e0c <_fclose_r+0xd8>
10102db8:	81400c17 	ldw	r5,48(r16)
10102dbc:	28000526 	beq	r5,zero,10102dd4 <_fclose_r+0xa0>
10102dc0:	80801004 	addi	r2,r16,64
10102dc4:	28800226 	beq	r5,r2,10102dd0 <_fclose_r+0x9c>
10102dc8:	8809883a 	mov	r4,r17
10102dcc:	01032040 	call	10103204 <_free_r>
10102dd0:	80000c15 	stw	zero,48(r16)
10102dd4:	81401117 	ldw	r5,68(r16)
10102dd8:	28000326 	beq	r5,zero,10102de8 <_fclose_r+0xb4>
10102ddc:	8809883a 	mov	r4,r17
10102de0:	01032040 	call	10103204 <_free_r>
10102de4:	80001115 	stw	zero,68(r16)
10102de8:	01012340 	call	10101234 <__sfp_lock_acquire>
10102dec:	8000030d 	sth	zero,12(r16)
10102df0:	01012380 	call	10101238 <__sfp_lock_release>
10102df4:	9005883a 	mov	r2,r18
10102df8:	003fdc06 	br	10102d6c <__alt_data_end+0xfffe2d6c>
10102dfc:	01012240 	call	10101224 <__sinit>
10102e00:	003fd706 	br	10102d60 <__alt_data_end+0xfffe2d60>
10102e04:	04bfffc4 	movi	r18,-1
10102e08:	003fe806 	br	10102dac <__alt_data_end+0xfffe2dac>
10102e0c:	81400417 	ldw	r5,16(r16)
10102e10:	8809883a 	mov	r4,r17
10102e14:	01032040 	call	10103204 <_free_r>
10102e18:	003fe706 	br	10102db8 <__alt_data_end+0xfffe2db8>
10102e1c:	0005883a 	mov	r2,zero
10102e20:	f800283a 	ret

10102e24 <fclose>:
10102e24:	00840434 	movhi	r2,4112
10102e28:	109fe704 	addi	r2,r2,32668
10102e2c:	200b883a 	mov	r5,r4
10102e30:	11000017 	ldw	r4,0(r2)
10102e34:	0102d341 	jmpi	10102d34 <_fclose_r>

10102e38 <__sflush_r>:
10102e38:	2880030b 	ldhu	r2,12(r5)
10102e3c:	defffb04 	addi	sp,sp,-20
10102e40:	dcc00315 	stw	r19,12(sp)
10102e44:	dc400115 	stw	r17,4(sp)
10102e48:	dfc00415 	stw	ra,16(sp)
10102e4c:	dc800215 	stw	r18,8(sp)
10102e50:	dc000015 	stw	r16,0(sp)
10102e54:	10c0020c 	andi	r3,r2,8
10102e58:	2823883a 	mov	r17,r5
10102e5c:	2027883a 	mov	r19,r4
10102e60:	1800311e 	bne	r3,zero,10102f28 <__sflush_r+0xf0>
10102e64:	28c00117 	ldw	r3,4(r5)
10102e68:	10820014 	ori	r2,r2,2048
10102e6c:	2880030d 	sth	r2,12(r5)
10102e70:	00c04b0e 	bge	zero,r3,10102fa0 <__sflush_r+0x168>
10102e74:	8a000a17 	ldw	r8,40(r17)
10102e78:	40002326 	beq	r8,zero,10102f08 <__sflush_r+0xd0>
10102e7c:	9c000017 	ldw	r16,0(r19)
10102e80:	10c4000c 	andi	r3,r2,4096
10102e84:	98000015 	stw	zero,0(r19)
10102e88:	18004826 	beq	r3,zero,10102fac <__sflush_r+0x174>
10102e8c:	89801417 	ldw	r6,80(r17)
10102e90:	10c0010c 	andi	r3,r2,4
10102e94:	18000626 	beq	r3,zero,10102eb0 <__sflush_r+0x78>
10102e98:	88c00117 	ldw	r3,4(r17)
10102e9c:	88800c17 	ldw	r2,48(r17)
10102ea0:	30cdc83a 	sub	r6,r6,r3
10102ea4:	10000226 	beq	r2,zero,10102eb0 <__sflush_r+0x78>
10102ea8:	88800f17 	ldw	r2,60(r17)
10102eac:	308dc83a 	sub	r6,r6,r2
10102eb0:	89400717 	ldw	r5,28(r17)
10102eb4:	000f883a 	mov	r7,zero
10102eb8:	9809883a 	mov	r4,r19
10102ebc:	403ee83a 	callr	r8
10102ec0:	00ffffc4 	movi	r3,-1
10102ec4:	10c04426 	beq	r2,r3,10102fd8 <__sflush_r+0x1a0>
10102ec8:	88c0030b 	ldhu	r3,12(r17)
10102ecc:	89000417 	ldw	r4,16(r17)
10102ed0:	88000115 	stw	zero,4(r17)
10102ed4:	197dffcc 	andi	r5,r3,63487
10102ed8:	8940030d 	sth	r5,12(r17)
10102edc:	89000015 	stw	r4,0(r17)
10102ee0:	18c4000c 	andi	r3,r3,4096
10102ee4:	18002c1e 	bne	r3,zero,10102f98 <__sflush_r+0x160>
10102ee8:	89400c17 	ldw	r5,48(r17)
10102eec:	9c000015 	stw	r16,0(r19)
10102ef0:	28000526 	beq	r5,zero,10102f08 <__sflush_r+0xd0>
10102ef4:	88801004 	addi	r2,r17,64
10102ef8:	28800226 	beq	r5,r2,10102f04 <__sflush_r+0xcc>
10102efc:	9809883a 	mov	r4,r19
10102f00:	01032040 	call	10103204 <_free_r>
10102f04:	88000c15 	stw	zero,48(r17)
10102f08:	0005883a 	mov	r2,zero
10102f0c:	dfc00417 	ldw	ra,16(sp)
10102f10:	dcc00317 	ldw	r19,12(sp)
10102f14:	dc800217 	ldw	r18,8(sp)
10102f18:	dc400117 	ldw	r17,4(sp)
10102f1c:	dc000017 	ldw	r16,0(sp)
10102f20:	dec00504 	addi	sp,sp,20
10102f24:	f800283a 	ret
10102f28:	2c800417 	ldw	r18,16(r5)
10102f2c:	903ff626 	beq	r18,zero,10102f08 <__alt_data_end+0xfffe2f08>
10102f30:	2c000017 	ldw	r16,0(r5)
10102f34:	108000cc 	andi	r2,r2,3
10102f38:	2c800015 	stw	r18,0(r5)
10102f3c:	84a1c83a 	sub	r16,r16,r18
10102f40:	1000131e 	bne	r2,zero,10102f90 <__sflush_r+0x158>
10102f44:	28800517 	ldw	r2,20(r5)
10102f48:	88800215 	stw	r2,8(r17)
10102f4c:	04000316 	blt	zero,r16,10102f5c <__sflush_r+0x124>
10102f50:	003fed06 	br	10102f08 <__alt_data_end+0xfffe2f08>
10102f54:	90a5883a 	add	r18,r18,r2
10102f58:	043feb0e 	bge	zero,r16,10102f08 <__alt_data_end+0xfffe2f08>
10102f5c:	88800917 	ldw	r2,36(r17)
10102f60:	89400717 	ldw	r5,28(r17)
10102f64:	800f883a 	mov	r7,r16
10102f68:	900d883a 	mov	r6,r18
10102f6c:	9809883a 	mov	r4,r19
10102f70:	103ee83a 	callr	r2
10102f74:	80a1c83a 	sub	r16,r16,r2
10102f78:	00bff616 	blt	zero,r2,10102f54 <__alt_data_end+0xfffe2f54>
10102f7c:	88c0030b 	ldhu	r3,12(r17)
10102f80:	00bfffc4 	movi	r2,-1
10102f84:	18c01014 	ori	r3,r3,64
10102f88:	88c0030d 	sth	r3,12(r17)
10102f8c:	003fdf06 	br	10102f0c <__alt_data_end+0xfffe2f0c>
10102f90:	0005883a 	mov	r2,zero
10102f94:	003fec06 	br	10102f48 <__alt_data_end+0xfffe2f48>
10102f98:	88801415 	stw	r2,80(r17)
10102f9c:	003fd206 	br	10102ee8 <__alt_data_end+0xfffe2ee8>
10102fa0:	28c00f17 	ldw	r3,60(r5)
10102fa4:	00ffb316 	blt	zero,r3,10102e74 <__alt_data_end+0xfffe2e74>
10102fa8:	003fd706 	br	10102f08 <__alt_data_end+0xfffe2f08>
10102fac:	89400717 	ldw	r5,28(r17)
10102fb0:	000d883a 	mov	r6,zero
10102fb4:	01c00044 	movi	r7,1
10102fb8:	9809883a 	mov	r4,r19
10102fbc:	403ee83a 	callr	r8
10102fc0:	100d883a 	mov	r6,r2
10102fc4:	00bfffc4 	movi	r2,-1
10102fc8:	30801426 	beq	r6,r2,1010301c <__sflush_r+0x1e4>
10102fcc:	8880030b 	ldhu	r2,12(r17)
10102fd0:	8a000a17 	ldw	r8,40(r17)
10102fd4:	003fae06 	br	10102e90 <__alt_data_end+0xfffe2e90>
10102fd8:	98c00017 	ldw	r3,0(r19)
10102fdc:	183fba26 	beq	r3,zero,10102ec8 <__alt_data_end+0xfffe2ec8>
10102fe0:	01000744 	movi	r4,29
10102fe4:	19000626 	beq	r3,r4,10103000 <__sflush_r+0x1c8>
10102fe8:	01000584 	movi	r4,22
10102fec:	19000426 	beq	r3,r4,10103000 <__sflush_r+0x1c8>
10102ff0:	88c0030b 	ldhu	r3,12(r17)
10102ff4:	18c01014 	ori	r3,r3,64
10102ff8:	88c0030d 	sth	r3,12(r17)
10102ffc:	003fc306 	br	10102f0c <__alt_data_end+0xfffe2f0c>
10103000:	8880030b 	ldhu	r2,12(r17)
10103004:	88c00417 	ldw	r3,16(r17)
10103008:	88000115 	stw	zero,4(r17)
1010300c:	10bdffcc 	andi	r2,r2,63487
10103010:	8880030d 	sth	r2,12(r17)
10103014:	88c00015 	stw	r3,0(r17)
10103018:	003fb306 	br	10102ee8 <__alt_data_end+0xfffe2ee8>
1010301c:	98800017 	ldw	r2,0(r19)
10103020:	103fea26 	beq	r2,zero,10102fcc <__alt_data_end+0xfffe2fcc>
10103024:	00c00744 	movi	r3,29
10103028:	10c00226 	beq	r2,r3,10103034 <__sflush_r+0x1fc>
1010302c:	00c00584 	movi	r3,22
10103030:	10c0031e 	bne	r2,r3,10103040 <__sflush_r+0x208>
10103034:	9c000015 	stw	r16,0(r19)
10103038:	0005883a 	mov	r2,zero
1010303c:	003fb306 	br	10102f0c <__alt_data_end+0xfffe2f0c>
10103040:	88c0030b 	ldhu	r3,12(r17)
10103044:	3005883a 	mov	r2,r6
10103048:	18c01014 	ori	r3,r3,64
1010304c:	88c0030d 	sth	r3,12(r17)
10103050:	003fae06 	br	10102f0c <__alt_data_end+0xfffe2f0c>

10103054 <_fflush_r>:
10103054:	defffd04 	addi	sp,sp,-12
10103058:	dc000115 	stw	r16,4(sp)
1010305c:	dfc00215 	stw	ra,8(sp)
10103060:	2021883a 	mov	r16,r4
10103064:	20000226 	beq	r4,zero,10103070 <_fflush_r+0x1c>
10103068:	20800e17 	ldw	r2,56(r4)
1010306c:	10000c26 	beq	r2,zero,101030a0 <_fflush_r+0x4c>
10103070:	2880030f 	ldh	r2,12(r5)
10103074:	1000051e 	bne	r2,zero,1010308c <_fflush_r+0x38>
10103078:	0005883a 	mov	r2,zero
1010307c:	dfc00217 	ldw	ra,8(sp)
10103080:	dc000117 	ldw	r16,4(sp)
10103084:	dec00304 	addi	sp,sp,12
10103088:	f800283a 	ret
1010308c:	8009883a 	mov	r4,r16
10103090:	dfc00217 	ldw	ra,8(sp)
10103094:	dc000117 	ldw	r16,4(sp)
10103098:	dec00304 	addi	sp,sp,12
1010309c:	0102e381 	jmpi	10102e38 <__sflush_r>
101030a0:	d9400015 	stw	r5,0(sp)
101030a4:	01012240 	call	10101224 <__sinit>
101030a8:	d9400017 	ldw	r5,0(sp)
101030ac:	003ff006 	br	10103070 <__alt_data_end+0xfffe3070>

101030b0 <fflush>:
101030b0:	20000526 	beq	r4,zero,101030c8 <fflush+0x18>
101030b4:	00840434 	movhi	r2,4112
101030b8:	109fe704 	addi	r2,r2,32668
101030bc:	200b883a 	mov	r5,r4
101030c0:	11000017 	ldw	r4,0(r2)
101030c4:	01030541 	jmpi	10103054 <_fflush_r>
101030c8:	00840434 	movhi	r2,4112
101030cc:	109fe604 	addi	r2,r2,32664
101030d0:	11000017 	ldw	r4,0(r2)
101030d4:	01440434 	movhi	r5,4112
101030d8:	294c1504 	addi	r5,r5,12372
101030dc:	01018001 	jmpi	10101800 <_fwalk_reent>

101030e0 <_malloc_trim_r>:
101030e0:	defffb04 	addi	sp,sp,-20
101030e4:	dcc00315 	stw	r19,12(sp)
101030e8:	04c40434 	movhi	r19,4112
101030ec:	dc800215 	stw	r18,8(sp)
101030f0:	dc400115 	stw	r17,4(sp)
101030f4:	dc000015 	stw	r16,0(sp)
101030f8:	dfc00415 	stw	ra,16(sp)
101030fc:	2821883a 	mov	r16,r5
10103100:	9cda5804 	addi	r19,r19,26976
10103104:	2025883a 	mov	r18,r4
10103108:	0103ddc0 	call	10103ddc <__malloc_lock>
1010310c:	98800217 	ldw	r2,8(r19)
10103110:	14400117 	ldw	r17,4(r2)
10103114:	00bfff04 	movi	r2,-4
10103118:	88a2703a 	and	r17,r17,r2
1010311c:	8c21c83a 	sub	r16,r17,r16
10103120:	8403fbc4 	addi	r16,r16,4079
10103124:	8020d33a 	srli	r16,r16,12
10103128:	0083ffc4 	movi	r2,4095
1010312c:	843fffc4 	addi	r16,r16,-1
10103130:	8020933a 	slli	r16,r16,12
10103134:	1400060e 	bge	r2,r16,10103150 <_malloc_trim_r+0x70>
10103138:	000b883a 	mov	r5,zero
1010313c:	9009883a 	mov	r4,r18
10103140:	010299c0 	call	1010299c <_sbrk_r>
10103144:	98c00217 	ldw	r3,8(r19)
10103148:	1c47883a 	add	r3,r3,r17
1010314c:	10c00a26 	beq	r2,r3,10103178 <_malloc_trim_r+0x98>
10103150:	9009883a 	mov	r4,r18
10103154:	0103e000 	call	10103e00 <__malloc_unlock>
10103158:	0005883a 	mov	r2,zero
1010315c:	dfc00417 	ldw	ra,16(sp)
10103160:	dcc00317 	ldw	r19,12(sp)
10103164:	dc800217 	ldw	r18,8(sp)
10103168:	dc400117 	ldw	r17,4(sp)
1010316c:	dc000017 	ldw	r16,0(sp)
10103170:	dec00504 	addi	sp,sp,20
10103174:	f800283a 	ret
10103178:	040bc83a 	sub	r5,zero,r16
1010317c:	9009883a 	mov	r4,r18
10103180:	010299c0 	call	1010299c <_sbrk_r>
10103184:	00ffffc4 	movi	r3,-1
10103188:	10c00d26 	beq	r2,r3,101031c0 <_malloc_trim_r+0xe0>
1010318c:	00c40474 	movhi	r3,4113
10103190:	18e6c804 	addi	r3,r3,-25824
10103194:	18800017 	ldw	r2,0(r3)
10103198:	99000217 	ldw	r4,8(r19)
1010319c:	8c23c83a 	sub	r17,r17,r16
101031a0:	8c400054 	ori	r17,r17,1
101031a4:	1421c83a 	sub	r16,r2,r16
101031a8:	24400115 	stw	r17,4(r4)
101031ac:	9009883a 	mov	r4,r18
101031b0:	1c000015 	stw	r16,0(r3)
101031b4:	0103e000 	call	10103e00 <__malloc_unlock>
101031b8:	00800044 	movi	r2,1
101031bc:	003fe706 	br	1010315c <__alt_data_end+0xfffe315c>
101031c0:	000b883a 	mov	r5,zero
101031c4:	9009883a 	mov	r4,r18
101031c8:	010299c0 	call	1010299c <_sbrk_r>
101031cc:	99000217 	ldw	r4,8(r19)
101031d0:	014003c4 	movi	r5,15
101031d4:	1107c83a 	sub	r3,r2,r4
101031d8:	28ffdd0e 	bge	r5,r3,10103150 <__alt_data_end+0xfffe3150>
101031dc:	01440434 	movhi	r5,4112
101031e0:	295fe804 	addi	r5,r5,32672
101031e4:	29400017 	ldw	r5,0(r5)
101031e8:	18c00054 	ori	r3,r3,1
101031ec:	20c00115 	stw	r3,4(r4)
101031f0:	00c40474 	movhi	r3,4113
101031f4:	1145c83a 	sub	r2,r2,r5
101031f8:	18e6c804 	addi	r3,r3,-25824
101031fc:	18800015 	stw	r2,0(r3)
10103200:	003fd306 	br	10103150 <__alt_data_end+0xfffe3150>

10103204 <_free_r>:
10103204:	28004126 	beq	r5,zero,1010330c <_free_r+0x108>
10103208:	defffd04 	addi	sp,sp,-12
1010320c:	dc400115 	stw	r17,4(sp)
10103210:	dc000015 	stw	r16,0(sp)
10103214:	2023883a 	mov	r17,r4
10103218:	2821883a 	mov	r16,r5
1010321c:	dfc00215 	stw	ra,8(sp)
10103220:	0103ddc0 	call	10103ddc <__malloc_lock>
10103224:	81ffff17 	ldw	r7,-4(r16)
10103228:	00bfff84 	movi	r2,-2
1010322c:	01040434 	movhi	r4,4112
10103230:	81bffe04 	addi	r6,r16,-8
10103234:	3884703a 	and	r2,r7,r2
10103238:	211a5804 	addi	r4,r4,26976
1010323c:	308b883a 	add	r5,r6,r2
10103240:	2a400117 	ldw	r9,4(r5)
10103244:	22000217 	ldw	r8,8(r4)
10103248:	00ffff04 	movi	r3,-4
1010324c:	48c6703a 	and	r3,r9,r3
10103250:	2a005726 	beq	r5,r8,101033b0 <_free_r+0x1ac>
10103254:	28c00115 	stw	r3,4(r5)
10103258:	39c0004c 	andi	r7,r7,1
1010325c:	3800091e 	bne	r7,zero,10103284 <_free_r+0x80>
10103260:	823ffe17 	ldw	r8,-8(r16)
10103264:	22400204 	addi	r9,r4,8
10103268:	320dc83a 	sub	r6,r6,r8
1010326c:	31c00217 	ldw	r7,8(r6)
10103270:	1205883a 	add	r2,r2,r8
10103274:	3a406526 	beq	r7,r9,1010340c <_free_r+0x208>
10103278:	32000317 	ldw	r8,12(r6)
1010327c:	3a000315 	stw	r8,12(r7)
10103280:	41c00215 	stw	r7,8(r8)
10103284:	28cf883a 	add	r7,r5,r3
10103288:	39c00117 	ldw	r7,4(r7)
1010328c:	39c0004c 	andi	r7,r7,1
10103290:	38003a26 	beq	r7,zero,1010337c <_free_r+0x178>
10103294:	10c00054 	ori	r3,r2,1
10103298:	30c00115 	stw	r3,4(r6)
1010329c:	3087883a 	add	r3,r6,r2
101032a0:	18800015 	stw	r2,0(r3)
101032a4:	00c07fc4 	movi	r3,511
101032a8:	18801936 	bltu	r3,r2,10103310 <_free_r+0x10c>
101032ac:	1004d0fa 	srli	r2,r2,3
101032b0:	01c00044 	movi	r7,1
101032b4:	21400117 	ldw	r5,4(r4)
101032b8:	10c00044 	addi	r3,r2,1
101032bc:	18c7883a 	add	r3,r3,r3
101032c0:	1005d0ba 	srai	r2,r2,2
101032c4:	18c7883a 	add	r3,r3,r3
101032c8:	18c7883a 	add	r3,r3,r3
101032cc:	1907883a 	add	r3,r3,r4
101032d0:	3884983a 	sll	r2,r7,r2
101032d4:	19c00017 	ldw	r7,0(r3)
101032d8:	1a3ffe04 	addi	r8,r3,-8
101032dc:	1144b03a 	or	r2,r2,r5
101032e0:	32000315 	stw	r8,12(r6)
101032e4:	31c00215 	stw	r7,8(r6)
101032e8:	20800115 	stw	r2,4(r4)
101032ec:	19800015 	stw	r6,0(r3)
101032f0:	39800315 	stw	r6,12(r7)
101032f4:	8809883a 	mov	r4,r17
101032f8:	dfc00217 	ldw	ra,8(sp)
101032fc:	dc400117 	ldw	r17,4(sp)
10103300:	dc000017 	ldw	r16,0(sp)
10103304:	dec00304 	addi	sp,sp,12
10103308:	0103e001 	jmpi	10103e00 <__malloc_unlock>
1010330c:	f800283a 	ret
10103310:	100ad27a 	srli	r5,r2,9
10103314:	00c00104 	movi	r3,4
10103318:	19404a36 	bltu	r3,r5,10103444 <_free_r+0x240>
1010331c:	100ad1ba 	srli	r5,r2,6
10103320:	28c00e44 	addi	r3,r5,57
10103324:	18c7883a 	add	r3,r3,r3
10103328:	29400e04 	addi	r5,r5,56
1010332c:	18c7883a 	add	r3,r3,r3
10103330:	18c7883a 	add	r3,r3,r3
10103334:	1909883a 	add	r4,r3,r4
10103338:	20c00017 	ldw	r3,0(r4)
1010333c:	01c40434 	movhi	r7,4112
10103340:	213ffe04 	addi	r4,r4,-8
10103344:	39da5804 	addi	r7,r7,26976
10103348:	20c04426 	beq	r4,r3,1010345c <_free_r+0x258>
1010334c:	01ffff04 	movi	r7,-4
10103350:	19400117 	ldw	r5,4(r3)
10103354:	29ca703a 	and	r5,r5,r7
10103358:	1140022e 	bgeu	r2,r5,10103364 <_free_r+0x160>
1010335c:	18c00217 	ldw	r3,8(r3)
10103360:	20fffb1e 	bne	r4,r3,10103350 <__alt_data_end+0xfffe3350>
10103364:	19000317 	ldw	r4,12(r3)
10103368:	31000315 	stw	r4,12(r6)
1010336c:	30c00215 	stw	r3,8(r6)
10103370:	21800215 	stw	r6,8(r4)
10103374:	19800315 	stw	r6,12(r3)
10103378:	003fde06 	br	101032f4 <__alt_data_end+0xfffe32f4>
1010337c:	29c00217 	ldw	r7,8(r5)
10103380:	10c5883a 	add	r2,r2,r3
10103384:	00c40434 	movhi	r3,4112
10103388:	18da5a04 	addi	r3,r3,26984
1010338c:	38c03b26 	beq	r7,r3,1010347c <_free_r+0x278>
10103390:	2a000317 	ldw	r8,12(r5)
10103394:	11400054 	ori	r5,r2,1
10103398:	3087883a 	add	r3,r6,r2
1010339c:	3a000315 	stw	r8,12(r7)
101033a0:	41c00215 	stw	r7,8(r8)
101033a4:	31400115 	stw	r5,4(r6)
101033a8:	18800015 	stw	r2,0(r3)
101033ac:	003fbd06 	br	101032a4 <__alt_data_end+0xfffe32a4>
101033b0:	39c0004c 	andi	r7,r7,1
101033b4:	10c5883a 	add	r2,r2,r3
101033b8:	3800071e 	bne	r7,zero,101033d8 <_free_r+0x1d4>
101033bc:	81fffe17 	ldw	r7,-8(r16)
101033c0:	31cdc83a 	sub	r6,r6,r7
101033c4:	30c00317 	ldw	r3,12(r6)
101033c8:	31400217 	ldw	r5,8(r6)
101033cc:	11c5883a 	add	r2,r2,r7
101033d0:	28c00315 	stw	r3,12(r5)
101033d4:	19400215 	stw	r5,8(r3)
101033d8:	10c00054 	ori	r3,r2,1
101033dc:	30c00115 	stw	r3,4(r6)
101033e0:	00c40434 	movhi	r3,4112
101033e4:	18dfe904 	addi	r3,r3,32676
101033e8:	18c00017 	ldw	r3,0(r3)
101033ec:	21800215 	stw	r6,8(r4)
101033f0:	10ffc036 	bltu	r2,r3,101032f4 <__alt_data_end+0xfffe32f4>
101033f4:	00840474 	movhi	r2,4113
101033f8:	10a6bf04 	addi	r2,r2,-25860
101033fc:	11400017 	ldw	r5,0(r2)
10103400:	8809883a 	mov	r4,r17
10103404:	01030e00 	call	101030e0 <_malloc_trim_r>
10103408:	003fba06 	br	101032f4 <__alt_data_end+0xfffe32f4>
1010340c:	28c9883a 	add	r4,r5,r3
10103410:	21000117 	ldw	r4,4(r4)
10103414:	2100004c 	andi	r4,r4,1
10103418:	2000391e 	bne	r4,zero,10103500 <_free_r+0x2fc>
1010341c:	29c00217 	ldw	r7,8(r5)
10103420:	29000317 	ldw	r4,12(r5)
10103424:	1885883a 	add	r2,r3,r2
10103428:	10c00054 	ori	r3,r2,1
1010342c:	39000315 	stw	r4,12(r7)
10103430:	21c00215 	stw	r7,8(r4)
10103434:	30c00115 	stw	r3,4(r6)
10103438:	308d883a 	add	r6,r6,r2
1010343c:	30800015 	stw	r2,0(r6)
10103440:	003fac06 	br	101032f4 <__alt_data_end+0xfffe32f4>
10103444:	00c00504 	movi	r3,20
10103448:	19401536 	bltu	r3,r5,101034a0 <_free_r+0x29c>
1010344c:	28c01704 	addi	r3,r5,92
10103450:	18c7883a 	add	r3,r3,r3
10103454:	294016c4 	addi	r5,r5,91
10103458:	003fb406 	br	1010332c <__alt_data_end+0xfffe332c>
1010345c:	280bd0ba 	srai	r5,r5,2
10103460:	00c00044 	movi	r3,1
10103464:	38800117 	ldw	r2,4(r7)
10103468:	194a983a 	sll	r5,r3,r5
1010346c:	2007883a 	mov	r3,r4
10103470:	2884b03a 	or	r2,r5,r2
10103474:	38800115 	stw	r2,4(r7)
10103478:	003fbb06 	br	10103368 <__alt_data_end+0xfffe3368>
1010347c:	21800515 	stw	r6,20(r4)
10103480:	21800415 	stw	r6,16(r4)
10103484:	10c00054 	ori	r3,r2,1
10103488:	31c00315 	stw	r7,12(r6)
1010348c:	31c00215 	stw	r7,8(r6)
10103490:	30c00115 	stw	r3,4(r6)
10103494:	308d883a 	add	r6,r6,r2
10103498:	30800015 	stw	r2,0(r6)
1010349c:	003f9506 	br	101032f4 <__alt_data_end+0xfffe32f4>
101034a0:	00c01504 	movi	r3,84
101034a4:	19400536 	bltu	r3,r5,101034bc <_free_r+0x2b8>
101034a8:	100ad33a 	srli	r5,r2,12
101034ac:	28c01bc4 	addi	r3,r5,111
101034b0:	18c7883a 	add	r3,r3,r3
101034b4:	29401b84 	addi	r5,r5,110
101034b8:	003f9c06 	br	1010332c <__alt_data_end+0xfffe332c>
101034bc:	00c05504 	movi	r3,340
101034c0:	19400536 	bltu	r3,r5,101034d8 <_free_r+0x2d4>
101034c4:	100ad3fa 	srli	r5,r2,15
101034c8:	28c01e04 	addi	r3,r5,120
101034cc:	18c7883a 	add	r3,r3,r3
101034d0:	29401dc4 	addi	r5,r5,119
101034d4:	003f9506 	br	1010332c <__alt_data_end+0xfffe332c>
101034d8:	00c15504 	movi	r3,1364
101034dc:	19400536 	bltu	r3,r5,101034f4 <_free_r+0x2f0>
101034e0:	100ad4ba 	srli	r5,r2,18
101034e4:	28c01f44 	addi	r3,r5,125
101034e8:	18c7883a 	add	r3,r3,r3
101034ec:	29401f04 	addi	r5,r5,124
101034f0:	003f8e06 	br	1010332c <__alt_data_end+0xfffe332c>
101034f4:	00c03f84 	movi	r3,254
101034f8:	01401f84 	movi	r5,126
101034fc:	003f8b06 	br	1010332c <__alt_data_end+0xfffe332c>
10103500:	10c00054 	ori	r3,r2,1
10103504:	30c00115 	stw	r3,4(r6)
10103508:	308d883a 	add	r6,r6,r2
1010350c:	30800015 	stw	r2,0(r6)
10103510:	003f7806 	br	101032f4 <__alt_data_end+0xfffe32f4>

10103514 <_lseek_r>:
10103514:	defffd04 	addi	sp,sp,-12
10103518:	2805883a 	mov	r2,r5
1010351c:	dc000015 	stw	r16,0(sp)
10103520:	04040474 	movhi	r16,4113
10103524:	dc400115 	stw	r17,4(sp)
10103528:	300b883a 	mov	r5,r6
1010352c:	8426c004 	addi	r16,r16,-25856
10103530:	2023883a 	mov	r17,r4
10103534:	380d883a 	mov	r6,r7
10103538:	1009883a 	mov	r4,r2
1010353c:	dfc00215 	stw	ra,8(sp)
10103540:	80000015 	stw	zero,0(r16)
10103544:	0103c840 	call	10103c84 <lseek>
10103548:	00ffffc4 	movi	r3,-1
1010354c:	10c00526 	beq	r2,r3,10103564 <_lseek_r+0x50>
10103550:	dfc00217 	ldw	ra,8(sp)
10103554:	dc400117 	ldw	r17,4(sp)
10103558:	dc000017 	ldw	r16,0(sp)
1010355c:	dec00304 	addi	sp,sp,12
10103560:	f800283a 	ret
10103564:	80c00017 	ldw	r3,0(r16)
10103568:	183ff926 	beq	r3,zero,10103550 <__alt_data_end+0xfffe3550>
1010356c:	88c00015 	stw	r3,0(r17)
10103570:	003ff706 	br	10103550 <__alt_data_end+0xfffe3550>

10103574 <__smakebuf_r>:
10103574:	2880030b 	ldhu	r2,12(r5)
10103578:	10c0008c 	andi	r3,r2,2
1010357c:	1800411e 	bne	r3,zero,10103684 <__smakebuf_r+0x110>
10103580:	deffec04 	addi	sp,sp,-80
10103584:	dc000f15 	stw	r16,60(sp)
10103588:	2821883a 	mov	r16,r5
1010358c:	2940038f 	ldh	r5,14(r5)
10103590:	dc401015 	stw	r17,64(sp)
10103594:	dfc01315 	stw	ra,76(sp)
10103598:	dcc01215 	stw	r19,72(sp)
1010359c:	dc801115 	stw	r18,68(sp)
101035a0:	2023883a 	mov	r17,r4
101035a4:	28001c16 	blt	r5,zero,10103618 <__smakebuf_r+0xa4>
101035a8:	d80d883a 	mov	r6,sp
101035ac:	01037900 	call	10103790 <_fstat_r>
101035b0:	10001816 	blt	r2,zero,10103614 <__smakebuf_r+0xa0>
101035b4:	d8800117 	ldw	r2,4(sp)
101035b8:	00e00014 	movui	r3,32768
101035bc:	10bc000c 	andi	r2,r2,61440
101035c0:	14c80020 	cmpeqi	r19,r2,8192
101035c4:	10c03726 	beq	r2,r3,101036a4 <__smakebuf_r+0x130>
101035c8:	80c0030b 	ldhu	r3,12(r16)
101035cc:	18c20014 	ori	r3,r3,2048
101035d0:	80c0030d 	sth	r3,12(r16)
101035d4:	00c80004 	movi	r3,8192
101035d8:	10c0521e 	bne	r2,r3,10103724 <__smakebuf_r+0x1b0>
101035dc:	8140038f 	ldh	r5,14(r16)
101035e0:	8809883a 	mov	r4,r17
101035e4:	01037ec0 	call	101037ec <_isatty_r>
101035e8:	10004c26 	beq	r2,zero,1010371c <__smakebuf_r+0x1a8>
101035ec:	8080030b 	ldhu	r2,12(r16)
101035f0:	80c010c4 	addi	r3,r16,67
101035f4:	80c00015 	stw	r3,0(r16)
101035f8:	10800054 	ori	r2,r2,1
101035fc:	8080030d 	sth	r2,12(r16)
10103600:	00800044 	movi	r2,1
10103604:	80c00415 	stw	r3,16(r16)
10103608:	80800515 	stw	r2,20(r16)
1010360c:	04810004 	movi	r18,1024
10103610:	00000706 	br	10103630 <__smakebuf_r+0xbc>
10103614:	8080030b 	ldhu	r2,12(r16)
10103618:	10c0200c 	andi	r3,r2,128
1010361c:	18001f1e 	bne	r3,zero,1010369c <__smakebuf_r+0x128>
10103620:	04810004 	movi	r18,1024
10103624:	10820014 	ori	r2,r2,2048
10103628:	8080030d 	sth	r2,12(r16)
1010362c:	0027883a 	mov	r19,zero
10103630:	900b883a 	mov	r5,r18
10103634:	8809883a 	mov	r4,r17
10103638:	01018c40 	call	101018c4 <_malloc_r>
1010363c:	10002c26 	beq	r2,zero,101036f0 <__smakebuf_r+0x17c>
10103640:	80c0030b 	ldhu	r3,12(r16)
10103644:	01040434 	movhi	r4,4112
10103648:	2103b304 	addi	r4,r4,3788
1010364c:	89000f15 	stw	r4,60(r17)
10103650:	18c02014 	ori	r3,r3,128
10103654:	80c0030d 	sth	r3,12(r16)
10103658:	80800015 	stw	r2,0(r16)
1010365c:	80800415 	stw	r2,16(r16)
10103660:	84800515 	stw	r18,20(r16)
10103664:	98001a1e 	bne	r19,zero,101036d0 <__smakebuf_r+0x15c>
10103668:	dfc01317 	ldw	ra,76(sp)
1010366c:	dcc01217 	ldw	r19,72(sp)
10103670:	dc801117 	ldw	r18,68(sp)
10103674:	dc401017 	ldw	r17,64(sp)
10103678:	dc000f17 	ldw	r16,60(sp)
1010367c:	dec01404 	addi	sp,sp,80
10103680:	f800283a 	ret
10103684:	288010c4 	addi	r2,r5,67
10103688:	28800015 	stw	r2,0(r5)
1010368c:	28800415 	stw	r2,16(r5)
10103690:	00800044 	movi	r2,1
10103694:	28800515 	stw	r2,20(r5)
10103698:	f800283a 	ret
1010369c:	04801004 	movi	r18,64
101036a0:	003fe006 	br	10103624 <__alt_data_end+0xfffe3624>
101036a4:	81000a17 	ldw	r4,40(r16)
101036a8:	00c40434 	movhi	r3,4112
101036ac:	18cab204 	addi	r3,r3,10952
101036b0:	20ffc51e 	bne	r4,r3,101035c8 <__alt_data_end+0xfffe35c8>
101036b4:	8080030b 	ldhu	r2,12(r16)
101036b8:	04810004 	movi	r18,1024
101036bc:	84801315 	stw	r18,76(r16)
101036c0:	1484b03a 	or	r2,r2,r18
101036c4:	8080030d 	sth	r2,12(r16)
101036c8:	0027883a 	mov	r19,zero
101036cc:	003fd806 	br	10103630 <__alt_data_end+0xfffe3630>
101036d0:	8140038f 	ldh	r5,14(r16)
101036d4:	8809883a 	mov	r4,r17
101036d8:	01037ec0 	call	101037ec <_isatty_r>
101036dc:	103fe226 	beq	r2,zero,10103668 <__alt_data_end+0xfffe3668>
101036e0:	8080030b 	ldhu	r2,12(r16)
101036e4:	10800054 	ori	r2,r2,1
101036e8:	8080030d 	sth	r2,12(r16)
101036ec:	003fde06 	br	10103668 <__alt_data_end+0xfffe3668>
101036f0:	8080030b 	ldhu	r2,12(r16)
101036f4:	10c0800c 	andi	r3,r2,512
101036f8:	183fdb1e 	bne	r3,zero,10103668 <__alt_data_end+0xfffe3668>
101036fc:	10800094 	ori	r2,r2,2
10103700:	80c010c4 	addi	r3,r16,67
10103704:	8080030d 	sth	r2,12(r16)
10103708:	00800044 	movi	r2,1
1010370c:	80c00015 	stw	r3,0(r16)
10103710:	80c00415 	stw	r3,16(r16)
10103714:	80800515 	stw	r2,20(r16)
10103718:	003fd306 	br	10103668 <__alt_data_end+0xfffe3668>
1010371c:	04810004 	movi	r18,1024
10103720:	003fc306 	br	10103630 <__alt_data_end+0xfffe3630>
10103724:	0027883a 	mov	r19,zero
10103728:	04810004 	movi	r18,1024
1010372c:	003fc006 	br	10103630 <__alt_data_end+0xfffe3630>

10103730 <_read_r>:
10103730:	defffd04 	addi	sp,sp,-12
10103734:	2805883a 	mov	r2,r5
10103738:	dc000015 	stw	r16,0(sp)
1010373c:	04040474 	movhi	r16,4113
10103740:	dc400115 	stw	r17,4(sp)
10103744:	300b883a 	mov	r5,r6
10103748:	8426c004 	addi	r16,r16,-25856
1010374c:	2023883a 	mov	r17,r4
10103750:	380d883a 	mov	r6,r7
10103754:	1009883a 	mov	r4,r2
10103758:	dfc00215 	stw	ra,8(sp)
1010375c:	80000015 	stw	zero,0(r16)
10103760:	0103e600 	call	10103e60 <read>
10103764:	00ffffc4 	movi	r3,-1
10103768:	10c00526 	beq	r2,r3,10103780 <_read_r+0x50>
1010376c:	dfc00217 	ldw	ra,8(sp)
10103770:	dc400117 	ldw	r17,4(sp)
10103774:	dc000017 	ldw	r16,0(sp)
10103778:	dec00304 	addi	sp,sp,12
1010377c:	f800283a 	ret
10103780:	80c00017 	ldw	r3,0(r16)
10103784:	183ff926 	beq	r3,zero,1010376c <__alt_data_end+0xfffe376c>
10103788:	88c00015 	stw	r3,0(r17)
1010378c:	003ff706 	br	1010376c <__alt_data_end+0xfffe376c>

10103790 <_fstat_r>:
10103790:	defffd04 	addi	sp,sp,-12
10103794:	2805883a 	mov	r2,r5
10103798:	dc000015 	stw	r16,0(sp)
1010379c:	04040474 	movhi	r16,4113
101037a0:	dc400115 	stw	r17,4(sp)
101037a4:	8426c004 	addi	r16,r16,-25856
101037a8:	2023883a 	mov	r17,r4
101037ac:	300b883a 	mov	r5,r6
101037b0:	1009883a 	mov	r4,r2
101037b4:	dfc00215 	stw	ra,8(sp)
101037b8:	80000015 	stw	zero,0(r16)
101037bc:	01039bc0 	call	101039bc <fstat>
101037c0:	00ffffc4 	movi	r3,-1
101037c4:	10c00526 	beq	r2,r3,101037dc <_fstat_r+0x4c>
101037c8:	dfc00217 	ldw	ra,8(sp)
101037cc:	dc400117 	ldw	r17,4(sp)
101037d0:	dc000017 	ldw	r16,0(sp)
101037d4:	dec00304 	addi	sp,sp,12
101037d8:	f800283a 	ret
101037dc:	80c00017 	ldw	r3,0(r16)
101037e0:	183ff926 	beq	r3,zero,101037c8 <__alt_data_end+0xfffe37c8>
101037e4:	88c00015 	stw	r3,0(r17)
101037e8:	003ff706 	br	101037c8 <__alt_data_end+0xfffe37c8>

101037ec <_isatty_r>:
101037ec:	defffd04 	addi	sp,sp,-12
101037f0:	dc000015 	stw	r16,0(sp)
101037f4:	04040474 	movhi	r16,4113
101037f8:	dc400115 	stw	r17,4(sp)
101037fc:	8426c004 	addi	r16,r16,-25856
10103800:	2023883a 	mov	r17,r4
10103804:	2809883a 	mov	r4,r5
10103808:	dfc00215 	stw	ra,8(sp)
1010380c:	80000015 	stw	zero,0(r16)
10103810:	0103ab00 	call	10103ab0 <isatty>
10103814:	00ffffc4 	movi	r3,-1
10103818:	10c00526 	beq	r2,r3,10103830 <_isatty_r+0x44>
1010381c:	dfc00217 	ldw	ra,8(sp)
10103820:	dc400117 	ldw	r17,4(sp)
10103824:	dc000017 	ldw	r16,0(sp)
10103828:	dec00304 	addi	sp,sp,12
1010382c:	f800283a 	ret
10103830:	80c00017 	ldw	r3,0(r16)
10103834:	183ff926 	beq	r3,zero,1010381c <__alt_data_end+0xfffe381c>
10103838:	88c00015 	stw	r3,0(r17)
1010383c:	003ff706 	br	1010381c <__alt_data_end+0xfffe381c>

10103840 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10103840:	defffe04 	addi	sp,sp,-8
10103844:	dfc00115 	stw	ra,4(sp)
10103848:	df000015 	stw	fp,0(sp)
1010384c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10103850:	d0a00917 	ldw	r2,-32732(gp)
10103854:	10000326 	beq	r2,zero,10103864 <alt_get_errno+0x24>
10103858:	d0a00917 	ldw	r2,-32732(gp)
1010385c:	103ee83a 	callr	r2
10103860:	00000106 	br	10103868 <alt_get_errno+0x28>
10103864:	d0a6da04 	addi	r2,gp,-25752
}
10103868:	e037883a 	mov	sp,fp
1010386c:	dfc00117 	ldw	ra,4(sp)
10103870:	df000017 	ldw	fp,0(sp)
10103874:	dec00204 	addi	sp,sp,8
10103878:	f800283a 	ret

1010387c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1010387c:	defffb04 	addi	sp,sp,-20
10103880:	dfc00415 	stw	ra,16(sp)
10103884:	df000315 	stw	fp,12(sp)
10103888:	df000304 	addi	fp,sp,12
1010388c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10103890:	e0bfff17 	ldw	r2,-4(fp)
10103894:	10000816 	blt	r2,zero,101038b8 <close+0x3c>
10103898:	01400304 	movi	r5,12
1010389c:	e13fff17 	ldw	r4,-4(fp)
101038a0:	0100be80 	call	10100be8 <__mulsi3>
101038a4:	1007883a 	mov	r3,r2
101038a8:	00840434 	movhi	r2,4112
101038ac:	109b6404 	addi	r2,r2,28048
101038b0:	1885883a 	add	r2,r3,r2
101038b4:	00000106 	br	101038bc <close+0x40>
101038b8:	0005883a 	mov	r2,zero
101038bc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
101038c0:	e0bffd17 	ldw	r2,-12(fp)
101038c4:	10001926 	beq	r2,zero,1010392c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
101038c8:	e0bffd17 	ldw	r2,-12(fp)
101038cc:	10800017 	ldw	r2,0(r2)
101038d0:	10800417 	ldw	r2,16(r2)
101038d4:	10000626 	beq	r2,zero,101038f0 <close+0x74>
101038d8:	e0bffd17 	ldw	r2,-12(fp)
101038dc:	10800017 	ldw	r2,0(r2)
101038e0:	10800417 	ldw	r2,16(r2)
101038e4:	e13ffd17 	ldw	r4,-12(fp)
101038e8:	103ee83a 	callr	r2
101038ec:	00000106 	br	101038f4 <close+0x78>
101038f0:	0005883a 	mov	r2,zero
101038f4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
101038f8:	e13fff17 	ldw	r4,-4(fp)
101038fc:	0103f640 	call	10103f64 <alt_release_fd>
    if (rval < 0)
10103900:	e0bffe17 	ldw	r2,-8(fp)
10103904:	1000070e 	bge	r2,zero,10103924 <close+0xa8>
    {
      ALT_ERRNO = -rval;
10103908:	01038400 	call	10103840 <alt_get_errno>
1010390c:	1007883a 	mov	r3,r2
10103910:	e0bffe17 	ldw	r2,-8(fp)
10103914:	0085c83a 	sub	r2,zero,r2
10103918:	18800015 	stw	r2,0(r3)
      return -1;
1010391c:	00bfffc4 	movi	r2,-1
10103920:	00000706 	br	10103940 <close+0xc4>
    }
    return 0;
10103924:	0005883a 	mov	r2,zero
10103928:	00000506 	br	10103940 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1010392c:	01038400 	call	10103840 <alt_get_errno>
10103930:	1007883a 	mov	r3,r2
10103934:	00801444 	movi	r2,81
10103938:	18800015 	stw	r2,0(r3)
    return -1;
1010393c:	00bfffc4 	movi	r2,-1
  }
}
10103940:	e037883a 	mov	sp,fp
10103944:	dfc00117 	ldw	ra,4(sp)
10103948:	df000017 	ldw	fp,0(sp)
1010394c:	dec00204 	addi	sp,sp,8
10103950:	f800283a 	ret

10103954 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10103954:	defffc04 	addi	sp,sp,-16
10103958:	df000315 	stw	fp,12(sp)
1010395c:	df000304 	addi	fp,sp,12
10103960:	e13ffd15 	stw	r4,-12(fp)
10103964:	e17ffe15 	stw	r5,-8(fp)
10103968:	e1bfff15 	stw	r6,-4(fp)
  return len;
1010396c:	e0bfff17 	ldw	r2,-4(fp)
}
10103970:	e037883a 	mov	sp,fp
10103974:	df000017 	ldw	fp,0(sp)
10103978:	dec00104 	addi	sp,sp,4
1010397c:	f800283a 	ret

10103980 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10103980:	defffe04 	addi	sp,sp,-8
10103984:	dfc00115 	stw	ra,4(sp)
10103988:	df000015 	stw	fp,0(sp)
1010398c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10103990:	d0a00917 	ldw	r2,-32732(gp)
10103994:	10000326 	beq	r2,zero,101039a4 <alt_get_errno+0x24>
10103998:	d0a00917 	ldw	r2,-32732(gp)
1010399c:	103ee83a 	callr	r2
101039a0:	00000106 	br	101039a8 <alt_get_errno+0x28>
101039a4:	d0a6da04 	addi	r2,gp,-25752
}
101039a8:	e037883a 	mov	sp,fp
101039ac:	dfc00117 	ldw	ra,4(sp)
101039b0:	df000017 	ldw	fp,0(sp)
101039b4:	dec00204 	addi	sp,sp,8
101039b8:	f800283a 	ret

101039bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
101039bc:	defffb04 	addi	sp,sp,-20
101039c0:	dfc00415 	stw	ra,16(sp)
101039c4:	df000315 	stw	fp,12(sp)
101039c8:	df000304 	addi	fp,sp,12
101039cc:	e13ffe15 	stw	r4,-8(fp)
101039d0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
101039d4:	e0bffe17 	ldw	r2,-8(fp)
101039d8:	10000816 	blt	r2,zero,101039fc <fstat+0x40>
101039dc:	01400304 	movi	r5,12
101039e0:	e13ffe17 	ldw	r4,-8(fp)
101039e4:	0100be80 	call	10100be8 <__mulsi3>
101039e8:	1007883a 	mov	r3,r2
101039ec:	00840434 	movhi	r2,4112
101039f0:	109b6404 	addi	r2,r2,28048
101039f4:	1885883a 	add	r2,r3,r2
101039f8:	00000106 	br	10103a00 <fstat+0x44>
101039fc:	0005883a 	mov	r2,zero
10103a00:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10103a04:	e0bffd17 	ldw	r2,-12(fp)
10103a08:	10001026 	beq	r2,zero,10103a4c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10103a0c:	e0bffd17 	ldw	r2,-12(fp)
10103a10:	10800017 	ldw	r2,0(r2)
10103a14:	10800817 	ldw	r2,32(r2)
10103a18:	10000726 	beq	r2,zero,10103a38 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10103a1c:	e0bffd17 	ldw	r2,-12(fp)
10103a20:	10800017 	ldw	r2,0(r2)
10103a24:	10800817 	ldw	r2,32(r2)
10103a28:	e17fff17 	ldw	r5,-4(fp)
10103a2c:	e13ffd17 	ldw	r4,-12(fp)
10103a30:	103ee83a 	callr	r2
10103a34:	00000a06 	br	10103a60 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10103a38:	e0bfff17 	ldw	r2,-4(fp)
10103a3c:	00c80004 	movi	r3,8192
10103a40:	10c00115 	stw	r3,4(r2)
      return 0;
10103a44:	0005883a 	mov	r2,zero
10103a48:	00000506 	br	10103a60 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10103a4c:	01039800 	call	10103980 <alt_get_errno>
10103a50:	1007883a 	mov	r3,r2
10103a54:	00801444 	movi	r2,81
10103a58:	18800015 	stw	r2,0(r3)
    return -1;
10103a5c:	00bfffc4 	movi	r2,-1
  }
}
10103a60:	e037883a 	mov	sp,fp
10103a64:	dfc00117 	ldw	ra,4(sp)
10103a68:	df000017 	ldw	fp,0(sp)
10103a6c:	dec00204 	addi	sp,sp,8
10103a70:	f800283a 	ret

10103a74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10103a74:	defffe04 	addi	sp,sp,-8
10103a78:	dfc00115 	stw	ra,4(sp)
10103a7c:	df000015 	stw	fp,0(sp)
10103a80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10103a84:	d0a00917 	ldw	r2,-32732(gp)
10103a88:	10000326 	beq	r2,zero,10103a98 <alt_get_errno+0x24>
10103a8c:	d0a00917 	ldw	r2,-32732(gp)
10103a90:	103ee83a 	callr	r2
10103a94:	00000106 	br	10103a9c <alt_get_errno+0x28>
10103a98:	d0a6da04 	addi	r2,gp,-25752
}
10103a9c:	e037883a 	mov	sp,fp
10103aa0:	dfc00117 	ldw	ra,4(sp)
10103aa4:	df000017 	ldw	fp,0(sp)
10103aa8:	dec00204 	addi	sp,sp,8
10103aac:	f800283a 	ret

10103ab0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10103ab0:	deffed04 	addi	sp,sp,-76
10103ab4:	dfc01215 	stw	ra,72(sp)
10103ab8:	df001115 	stw	fp,68(sp)
10103abc:	df001104 	addi	fp,sp,68
10103ac0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10103ac4:	e0bfff17 	ldw	r2,-4(fp)
10103ac8:	10000816 	blt	r2,zero,10103aec <isatty+0x3c>
10103acc:	01400304 	movi	r5,12
10103ad0:	e13fff17 	ldw	r4,-4(fp)
10103ad4:	0100be80 	call	10100be8 <__mulsi3>
10103ad8:	1007883a 	mov	r3,r2
10103adc:	00840434 	movhi	r2,4112
10103ae0:	109b6404 	addi	r2,r2,28048
10103ae4:	1885883a 	add	r2,r3,r2
10103ae8:	00000106 	br	10103af0 <isatty+0x40>
10103aec:	0005883a 	mov	r2,zero
10103af0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10103af4:	e0bfef17 	ldw	r2,-68(fp)
10103af8:	10000e26 	beq	r2,zero,10103b34 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10103afc:	e0bfef17 	ldw	r2,-68(fp)
10103b00:	10800017 	ldw	r2,0(r2)
10103b04:	10800817 	ldw	r2,32(r2)
10103b08:	1000021e 	bne	r2,zero,10103b14 <isatty+0x64>
    {
      return 1;
10103b0c:	00800044 	movi	r2,1
10103b10:	00000d06 	br	10103b48 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10103b14:	e0bff004 	addi	r2,fp,-64
10103b18:	100b883a 	mov	r5,r2
10103b1c:	e13fff17 	ldw	r4,-4(fp)
10103b20:	01039bc0 	call	101039bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10103b24:	e0bff117 	ldw	r2,-60(fp)
10103b28:	10880020 	cmpeqi	r2,r2,8192
10103b2c:	10803fcc 	andi	r2,r2,255
10103b30:	00000506 	br	10103b48 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10103b34:	0103a740 	call	10103a74 <alt_get_errno>
10103b38:	1007883a 	mov	r3,r2
10103b3c:	00801444 	movi	r2,81
10103b40:	18800015 	stw	r2,0(r3)
    return 0;
10103b44:	0005883a 	mov	r2,zero
  }
}
10103b48:	e037883a 	mov	sp,fp
10103b4c:	dfc00117 	ldw	ra,4(sp)
10103b50:	df000017 	ldw	fp,0(sp)
10103b54:	dec00204 	addi	sp,sp,8
10103b58:	f800283a 	ret

10103b5c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10103b5c:	defffc04 	addi	sp,sp,-16
10103b60:	df000315 	stw	fp,12(sp)
10103b64:	df000304 	addi	fp,sp,12
10103b68:	e13ffd15 	stw	r4,-12(fp)
10103b6c:	e17ffe15 	stw	r5,-8(fp)
10103b70:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10103b74:	e0fffe17 	ldw	r3,-8(fp)
10103b78:	e0bffd17 	ldw	r2,-12(fp)
10103b7c:	18800c26 	beq	r3,r2,10103bb0 <alt_load_section+0x54>
  {
    while( to != end )
10103b80:	00000806 	br	10103ba4 <alt_load_section+0x48>
    {
      *to++ = *from++;
10103b84:	e0bffe17 	ldw	r2,-8(fp)
10103b88:	10c00104 	addi	r3,r2,4
10103b8c:	e0fffe15 	stw	r3,-8(fp)
10103b90:	e0fffd17 	ldw	r3,-12(fp)
10103b94:	19000104 	addi	r4,r3,4
10103b98:	e13ffd15 	stw	r4,-12(fp)
10103b9c:	18c00017 	ldw	r3,0(r3)
10103ba0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10103ba4:	e0fffe17 	ldw	r3,-8(fp)
10103ba8:	e0bfff17 	ldw	r2,-4(fp)
10103bac:	18bff51e 	bne	r3,r2,10103b84 <__alt_data_end+0xfffe3b84>
    {
      *to++ = *from++;
    }
  }
}
10103bb0:	0001883a 	nop
10103bb4:	e037883a 	mov	sp,fp
10103bb8:	df000017 	ldw	fp,0(sp)
10103bbc:	dec00104 	addi	sp,sp,4
10103bc0:	f800283a 	ret

10103bc4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10103bc4:	defffe04 	addi	sp,sp,-8
10103bc8:	dfc00115 	stw	ra,4(sp)
10103bcc:	df000015 	stw	fp,0(sp)
10103bd0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10103bd4:	01840474 	movhi	r6,4113
10103bd8:	31a00604 	addi	r6,r6,-32744
10103bdc:	01440434 	movhi	r5,4112
10103be0:	29594f04 	addi	r5,r5,25916
10103be4:	01040474 	movhi	r4,4113
10103be8:	21200604 	addi	r4,r4,-32744
10103bec:	0103b5c0 	call	10103b5c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10103bf0:	01840434 	movhi	r6,4112
10103bf4:	31808c04 	addi	r6,r6,560
10103bf8:	01440434 	movhi	r5,4112
10103bfc:	29400804 	addi	r5,r5,32
10103c00:	01040434 	movhi	r4,4112
10103c04:	21000804 	addi	r4,r4,32
10103c08:	0103b5c0 	call	10103b5c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10103c0c:	01840434 	movhi	r6,4112
10103c10:	31994f04 	addi	r6,r6,25916
10103c14:	01440434 	movhi	r5,4112
10103c18:	2958f904 	addi	r5,r5,25572
10103c1c:	01040434 	movhi	r4,4112
10103c20:	2118f904 	addi	r4,r4,25572
10103c24:	0103b5c0 	call	10103b5c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10103c28:	01052ac0 	call	101052ac <alt_dcache_flush_all>
  alt_icache_flush_all();
10103c2c:	01054ec0 	call	101054ec <alt_icache_flush_all>
}
10103c30:	0001883a 	nop
10103c34:	e037883a 	mov	sp,fp
10103c38:	dfc00117 	ldw	ra,4(sp)
10103c3c:	df000017 	ldw	fp,0(sp)
10103c40:	dec00204 	addi	sp,sp,8
10103c44:	f800283a 	ret

10103c48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10103c48:	defffe04 	addi	sp,sp,-8
10103c4c:	dfc00115 	stw	ra,4(sp)
10103c50:	df000015 	stw	fp,0(sp)
10103c54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10103c58:	d0a00917 	ldw	r2,-32732(gp)
10103c5c:	10000326 	beq	r2,zero,10103c6c <alt_get_errno+0x24>
10103c60:	d0a00917 	ldw	r2,-32732(gp)
10103c64:	103ee83a 	callr	r2
10103c68:	00000106 	br	10103c70 <alt_get_errno+0x28>
10103c6c:	d0a6da04 	addi	r2,gp,-25752
}
10103c70:	e037883a 	mov	sp,fp
10103c74:	dfc00117 	ldw	ra,4(sp)
10103c78:	df000017 	ldw	fp,0(sp)
10103c7c:	dec00204 	addi	sp,sp,8
10103c80:	f800283a 	ret

10103c84 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10103c84:	defff904 	addi	sp,sp,-28
10103c88:	dfc00615 	stw	ra,24(sp)
10103c8c:	df000515 	stw	fp,20(sp)
10103c90:	df000504 	addi	fp,sp,20
10103c94:	e13ffd15 	stw	r4,-12(fp)
10103c98:	e17ffe15 	stw	r5,-8(fp)
10103c9c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10103ca0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10103ca4:	e0bffd17 	ldw	r2,-12(fp)
10103ca8:	10000816 	blt	r2,zero,10103ccc <lseek+0x48>
10103cac:	01400304 	movi	r5,12
10103cb0:	e13ffd17 	ldw	r4,-12(fp)
10103cb4:	0100be80 	call	10100be8 <__mulsi3>
10103cb8:	1007883a 	mov	r3,r2
10103cbc:	00840434 	movhi	r2,4112
10103cc0:	109b6404 	addi	r2,r2,28048
10103cc4:	1885883a 	add	r2,r3,r2
10103cc8:	00000106 	br	10103cd0 <lseek+0x4c>
10103ccc:	0005883a 	mov	r2,zero
10103cd0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10103cd4:	e0bffc17 	ldw	r2,-16(fp)
10103cd8:	10001026 	beq	r2,zero,10103d1c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10103cdc:	e0bffc17 	ldw	r2,-16(fp)
10103ce0:	10800017 	ldw	r2,0(r2)
10103ce4:	10800717 	ldw	r2,28(r2)
10103ce8:	10000926 	beq	r2,zero,10103d10 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10103cec:	e0bffc17 	ldw	r2,-16(fp)
10103cf0:	10800017 	ldw	r2,0(r2)
10103cf4:	10800717 	ldw	r2,28(r2)
10103cf8:	e1bfff17 	ldw	r6,-4(fp)
10103cfc:	e17ffe17 	ldw	r5,-8(fp)
10103d00:	e13ffc17 	ldw	r4,-16(fp)
10103d04:	103ee83a 	callr	r2
10103d08:	e0bffb15 	stw	r2,-20(fp)
10103d0c:	00000506 	br	10103d24 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10103d10:	00bfde84 	movi	r2,-134
10103d14:	e0bffb15 	stw	r2,-20(fp)
10103d18:	00000206 	br	10103d24 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10103d1c:	00bfebc4 	movi	r2,-81
10103d20:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10103d24:	e0bffb17 	ldw	r2,-20(fp)
10103d28:	1000070e 	bge	r2,zero,10103d48 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10103d2c:	0103c480 	call	10103c48 <alt_get_errno>
10103d30:	1007883a 	mov	r3,r2
10103d34:	e0bffb17 	ldw	r2,-20(fp)
10103d38:	0085c83a 	sub	r2,zero,r2
10103d3c:	18800015 	stw	r2,0(r3)
    rc = -1;
10103d40:	00bfffc4 	movi	r2,-1
10103d44:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10103d48:	e0bffb17 	ldw	r2,-20(fp)
}
10103d4c:	e037883a 	mov	sp,fp
10103d50:	dfc00117 	ldw	ra,4(sp)
10103d54:	df000017 	ldw	fp,0(sp)
10103d58:	dec00204 	addi	sp,sp,8
10103d5c:	f800283a 	ret

10103d60 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10103d60:	defffd04 	addi	sp,sp,-12
10103d64:	dfc00215 	stw	ra,8(sp)
10103d68:	df000115 	stw	fp,4(sp)
10103d6c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10103d70:	0009883a 	mov	r4,zero
10103d74:	01042080 	call	10104208 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10103d78:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10103d7c:	01042400 	call	10104240 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10103d80:	01840434 	movhi	r6,4112
10103d84:	31994204 	addi	r6,r6,25864
10103d88:	01440434 	movhi	r5,4112
10103d8c:	29594204 	addi	r5,r5,25864
10103d90:	01040434 	movhi	r4,4112
10103d94:	21194204 	addi	r4,r4,25864
10103d98:	01058900 	call	10105890 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10103d9c:	01053ac0 	call	101053ac <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10103da0:	01040434 	movhi	r4,4112
10103da4:	21150304 	addi	r4,r4,21516
10103da8:	01060500 	call	10106050 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10103dac:	d0a6db17 	ldw	r2,-25748(gp)
10103db0:	d0e6dc17 	ldw	r3,-25744(gp)
10103db4:	d126dd17 	ldw	r4,-25740(gp)
10103db8:	200d883a 	mov	r6,r4
10103dbc:	180b883a 	mov	r5,r3
10103dc0:	1009883a 	mov	r4,r2
10103dc4:	01009900 	call	10100990 <main>
10103dc8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10103dcc:	01000044 	movi	r4,1
10103dd0:	010387c0 	call	1010387c <close>
  exit (result);
10103dd4:	e13fff17 	ldw	r4,-4(fp)
10103dd8:	01060640 	call	10106064 <exit>

10103ddc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10103ddc:	defffe04 	addi	sp,sp,-8
10103de0:	df000115 	stw	fp,4(sp)
10103de4:	df000104 	addi	fp,sp,4
10103de8:	e13fff15 	stw	r4,-4(fp)
}
10103dec:	0001883a 	nop
10103df0:	e037883a 	mov	sp,fp
10103df4:	df000017 	ldw	fp,0(sp)
10103df8:	dec00104 	addi	sp,sp,4
10103dfc:	f800283a 	ret

10103e00 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10103e00:	defffe04 	addi	sp,sp,-8
10103e04:	df000115 	stw	fp,4(sp)
10103e08:	df000104 	addi	fp,sp,4
10103e0c:	e13fff15 	stw	r4,-4(fp)
}
10103e10:	0001883a 	nop
10103e14:	e037883a 	mov	sp,fp
10103e18:	df000017 	ldw	fp,0(sp)
10103e1c:	dec00104 	addi	sp,sp,4
10103e20:	f800283a 	ret

10103e24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10103e24:	defffe04 	addi	sp,sp,-8
10103e28:	dfc00115 	stw	ra,4(sp)
10103e2c:	df000015 	stw	fp,0(sp)
10103e30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10103e34:	d0a00917 	ldw	r2,-32732(gp)
10103e38:	10000326 	beq	r2,zero,10103e48 <alt_get_errno+0x24>
10103e3c:	d0a00917 	ldw	r2,-32732(gp)
10103e40:	103ee83a 	callr	r2
10103e44:	00000106 	br	10103e4c <alt_get_errno+0x28>
10103e48:	d0a6da04 	addi	r2,gp,-25752
}
10103e4c:	e037883a 	mov	sp,fp
10103e50:	dfc00117 	ldw	ra,4(sp)
10103e54:	df000017 	ldw	fp,0(sp)
10103e58:	dec00204 	addi	sp,sp,8
10103e5c:	f800283a 	ret

10103e60 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10103e60:	defff904 	addi	sp,sp,-28
10103e64:	dfc00615 	stw	ra,24(sp)
10103e68:	df000515 	stw	fp,20(sp)
10103e6c:	df000504 	addi	fp,sp,20
10103e70:	e13ffd15 	stw	r4,-12(fp)
10103e74:	e17ffe15 	stw	r5,-8(fp)
10103e78:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10103e7c:	e0bffd17 	ldw	r2,-12(fp)
10103e80:	10000816 	blt	r2,zero,10103ea4 <read+0x44>
10103e84:	01400304 	movi	r5,12
10103e88:	e13ffd17 	ldw	r4,-12(fp)
10103e8c:	0100be80 	call	10100be8 <__mulsi3>
10103e90:	1007883a 	mov	r3,r2
10103e94:	00840434 	movhi	r2,4112
10103e98:	109b6404 	addi	r2,r2,28048
10103e9c:	1885883a 	add	r2,r3,r2
10103ea0:	00000106 	br	10103ea8 <read+0x48>
10103ea4:	0005883a 	mov	r2,zero
10103ea8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10103eac:	e0bffb17 	ldw	r2,-20(fp)
10103eb0:	10002226 	beq	r2,zero,10103f3c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10103eb4:	e0bffb17 	ldw	r2,-20(fp)
10103eb8:	10800217 	ldw	r2,8(r2)
10103ebc:	108000cc 	andi	r2,r2,3
10103ec0:	10800060 	cmpeqi	r2,r2,1
10103ec4:	1000181e 	bne	r2,zero,10103f28 <read+0xc8>
        (fd->dev->read))
10103ec8:	e0bffb17 	ldw	r2,-20(fp)
10103ecc:	10800017 	ldw	r2,0(r2)
10103ed0:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10103ed4:	10001426 	beq	r2,zero,10103f28 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10103ed8:	e0bffb17 	ldw	r2,-20(fp)
10103edc:	10800017 	ldw	r2,0(r2)
10103ee0:	10800517 	ldw	r2,20(r2)
10103ee4:	e0ffff17 	ldw	r3,-4(fp)
10103ee8:	180d883a 	mov	r6,r3
10103eec:	e17ffe17 	ldw	r5,-8(fp)
10103ef0:	e13ffb17 	ldw	r4,-20(fp)
10103ef4:	103ee83a 	callr	r2
10103ef8:	e0bffc15 	stw	r2,-16(fp)
10103efc:	e0bffc17 	ldw	r2,-16(fp)
10103f00:	1000070e 	bge	r2,zero,10103f20 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10103f04:	0103e240 	call	10103e24 <alt_get_errno>
10103f08:	1007883a 	mov	r3,r2
10103f0c:	e0bffc17 	ldw	r2,-16(fp)
10103f10:	0085c83a 	sub	r2,zero,r2
10103f14:	18800015 	stw	r2,0(r3)
          return -1;
10103f18:	00bfffc4 	movi	r2,-1
10103f1c:	00000c06 	br	10103f50 <read+0xf0>
        }
        return rval;
10103f20:	e0bffc17 	ldw	r2,-16(fp)
10103f24:	00000a06 	br	10103f50 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10103f28:	0103e240 	call	10103e24 <alt_get_errno>
10103f2c:	1007883a 	mov	r3,r2
10103f30:	00800344 	movi	r2,13
10103f34:	18800015 	stw	r2,0(r3)
10103f38:	00000406 	br	10103f4c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10103f3c:	0103e240 	call	10103e24 <alt_get_errno>
10103f40:	1007883a 	mov	r3,r2
10103f44:	00801444 	movi	r2,81
10103f48:	18800015 	stw	r2,0(r3)
  }
  return -1;
10103f4c:	00bfffc4 	movi	r2,-1
}
10103f50:	e037883a 	mov	sp,fp
10103f54:	dfc00117 	ldw	ra,4(sp)
10103f58:	df000017 	ldw	fp,0(sp)
10103f5c:	dec00204 	addi	sp,sp,8
10103f60:	f800283a 	ret

10103f64 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10103f64:	defffc04 	addi	sp,sp,-16
10103f68:	dfc00315 	stw	ra,12(sp)
10103f6c:	df000215 	stw	fp,8(sp)
10103f70:	dc000115 	stw	r16,4(sp)
10103f74:	df000204 	addi	fp,sp,8
10103f78:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10103f7c:	e0bffe17 	ldw	r2,-8(fp)
10103f80:	108000d0 	cmplti	r2,r2,3
10103f84:	1000111e 	bne	r2,zero,10103fcc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10103f88:	04040434 	movhi	r16,4112
10103f8c:	841b6404 	addi	r16,r16,28048
10103f90:	e0bffe17 	ldw	r2,-8(fp)
10103f94:	01400304 	movi	r5,12
10103f98:	1009883a 	mov	r4,r2
10103f9c:	0100be80 	call	10100be8 <__mulsi3>
10103fa0:	8085883a 	add	r2,r16,r2
10103fa4:	10800204 	addi	r2,r2,8
10103fa8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10103fac:	04040434 	movhi	r16,4112
10103fb0:	841b6404 	addi	r16,r16,28048
10103fb4:	e0bffe17 	ldw	r2,-8(fp)
10103fb8:	01400304 	movi	r5,12
10103fbc:	1009883a 	mov	r4,r2
10103fc0:	0100be80 	call	10100be8 <__mulsi3>
10103fc4:	8085883a 	add	r2,r16,r2
10103fc8:	10000015 	stw	zero,0(r2)
  }
}
10103fcc:	0001883a 	nop
10103fd0:	e6ffff04 	addi	sp,fp,-4
10103fd4:	dfc00217 	ldw	ra,8(sp)
10103fd8:	df000117 	ldw	fp,4(sp)
10103fdc:	dc000017 	ldw	r16,0(sp)
10103fe0:	dec00304 	addi	sp,sp,12
10103fe4:	f800283a 	ret

10103fe8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10103fe8:	defff904 	addi	sp,sp,-28
10103fec:	df000615 	stw	fp,24(sp)
10103ff0:	df000604 	addi	fp,sp,24
10103ff4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10103ff8:	0005303a 	rdctl	r2,status
10103ffc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104000:	e0fffe17 	ldw	r3,-8(fp)
10104004:	00bfff84 	movi	r2,-2
10104008:	1884703a 	and	r2,r3,r2
1010400c:	1001703a 	wrctl	status,r2
  
  return context;
10104010:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10104014:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10104018:	d0a00a17 	ldw	r2,-32728(gp)
1010401c:	10c000c4 	addi	r3,r2,3
10104020:	00bfff04 	movi	r2,-4
10104024:	1884703a 	and	r2,r3,r2
10104028:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1010402c:	d0e00a17 	ldw	r3,-32728(gp)
10104030:	e0bfff17 	ldw	r2,-4(fp)
10104034:	1887883a 	add	r3,r3,r2
10104038:	008404b4 	movhi	r2,4114
1010403c:	10800004 	addi	r2,r2,0
10104040:	10c0062e 	bgeu	r2,r3,1010405c <sbrk+0x74>
10104044:	e0bffb17 	ldw	r2,-20(fp)
10104048:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010404c:	e0bffa17 	ldw	r2,-24(fp)
10104050:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10104054:	00bfffc4 	movi	r2,-1
10104058:	00000b06 	br	10104088 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1010405c:	d0a00a17 	ldw	r2,-32728(gp)
10104060:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10104064:	d0e00a17 	ldw	r3,-32728(gp)
10104068:	e0bfff17 	ldw	r2,-4(fp)
1010406c:	1885883a 	add	r2,r3,r2
10104070:	d0a00a15 	stw	r2,-32728(gp)
10104074:	e0bffb17 	ldw	r2,-20(fp)
10104078:	e0bffc15 	stw	r2,-16(fp)
1010407c:	e0bffc17 	ldw	r2,-16(fp)
10104080:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10104084:	e0bffd17 	ldw	r2,-12(fp)
} 
10104088:	e037883a 	mov	sp,fp
1010408c:	df000017 	ldw	fp,0(sp)
10104090:	dec00104 	addi	sp,sp,4
10104094:	f800283a 	ret

10104098 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10104098:	defffe04 	addi	sp,sp,-8
1010409c:	dfc00115 	stw	ra,4(sp)
101040a0:	df000015 	stw	fp,0(sp)
101040a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101040a8:	d0a00917 	ldw	r2,-32732(gp)
101040ac:	10000326 	beq	r2,zero,101040bc <alt_get_errno+0x24>
101040b0:	d0a00917 	ldw	r2,-32732(gp)
101040b4:	103ee83a 	callr	r2
101040b8:	00000106 	br	101040c0 <alt_get_errno+0x28>
101040bc:	d0a6da04 	addi	r2,gp,-25752
}
101040c0:	e037883a 	mov	sp,fp
101040c4:	dfc00117 	ldw	ra,4(sp)
101040c8:	df000017 	ldw	fp,0(sp)
101040cc:	dec00204 	addi	sp,sp,8
101040d0:	f800283a 	ret

101040d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
101040d4:	defff904 	addi	sp,sp,-28
101040d8:	dfc00615 	stw	ra,24(sp)
101040dc:	df000515 	stw	fp,20(sp)
101040e0:	df000504 	addi	fp,sp,20
101040e4:	e13ffd15 	stw	r4,-12(fp)
101040e8:	e17ffe15 	stw	r5,-8(fp)
101040ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
101040f0:	e0bffd17 	ldw	r2,-12(fp)
101040f4:	10000816 	blt	r2,zero,10104118 <write+0x44>
101040f8:	01400304 	movi	r5,12
101040fc:	e13ffd17 	ldw	r4,-12(fp)
10104100:	0100be80 	call	10100be8 <__mulsi3>
10104104:	1007883a 	mov	r3,r2
10104108:	00840434 	movhi	r2,4112
1010410c:	109b6404 	addi	r2,r2,28048
10104110:	1885883a 	add	r2,r3,r2
10104114:	00000106 	br	1010411c <write+0x48>
10104118:	0005883a 	mov	r2,zero
1010411c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10104120:	e0bffb17 	ldw	r2,-20(fp)
10104124:	10002126 	beq	r2,zero,101041ac <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10104128:	e0bffb17 	ldw	r2,-20(fp)
1010412c:	10800217 	ldw	r2,8(r2)
10104130:	108000cc 	andi	r2,r2,3
10104134:	10001826 	beq	r2,zero,10104198 <write+0xc4>
10104138:	e0bffb17 	ldw	r2,-20(fp)
1010413c:	10800017 	ldw	r2,0(r2)
10104140:	10800617 	ldw	r2,24(r2)
10104144:	10001426 	beq	r2,zero,10104198 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10104148:	e0bffb17 	ldw	r2,-20(fp)
1010414c:	10800017 	ldw	r2,0(r2)
10104150:	10800617 	ldw	r2,24(r2)
10104154:	e0ffff17 	ldw	r3,-4(fp)
10104158:	180d883a 	mov	r6,r3
1010415c:	e17ffe17 	ldw	r5,-8(fp)
10104160:	e13ffb17 	ldw	r4,-20(fp)
10104164:	103ee83a 	callr	r2
10104168:	e0bffc15 	stw	r2,-16(fp)
1010416c:	e0bffc17 	ldw	r2,-16(fp)
10104170:	1000070e 	bge	r2,zero,10104190 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10104174:	01040980 	call	10104098 <alt_get_errno>
10104178:	1007883a 	mov	r3,r2
1010417c:	e0bffc17 	ldw	r2,-16(fp)
10104180:	0085c83a 	sub	r2,zero,r2
10104184:	18800015 	stw	r2,0(r3)
        return -1;
10104188:	00bfffc4 	movi	r2,-1
1010418c:	00000c06 	br	101041c0 <write+0xec>
      }
      return rval;
10104190:	e0bffc17 	ldw	r2,-16(fp)
10104194:	00000a06 	br	101041c0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10104198:	01040980 	call	10104098 <alt_get_errno>
1010419c:	1007883a 	mov	r3,r2
101041a0:	00800344 	movi	r2,13
101041a4:	18800015 	stw	r2,0(r3)
101041a8:	00000406 	br	101041bc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
101041ac:	01040980 	call	10104098 <alt_get_errno>
101041b0:	1007883a 	mov	r3,r2
101041b4:	00801444 	movi	r2,81
101041b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
101041bc:	00bfffc4 	movi	r2,-1
}
101041c0:	e037883a 	mov	sp,fp
101041c4:	dfc00117 	ldw	ra,4(sp)
101041c8:	df000017 	ldw	fp,0(sp)
101041cc:	dec00204 	addi	sp,sp,8
101041d0:	f800283a 	ret

101041d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
101041d4:	defffd04 	addi	sp,sp,-12
101041d8:	dfc00215 	stw	ra,8(sp)
101041dc:	df000115 	stw	fp,4(sp)
101041e0:	df000104 	addi	fp,sp,4
101041e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
101041e8:	d1600604 	addi	r5,gp,-32744
101041ec:	e13fff17 	ldw	r4,-4(fp)
101041f0:	01053080 	call	10105308 <alt_dev_llist_insert>
}
101041f4:	e037883a 	mov	sp,fp
101041f8:	dfc00117 	ldw	ra,4(sp)
101041fc:	df000017 	ldw	fp,0(sp)
10104200:	dec00204 	addi	sp,sp,8
10104204:	f800283a 	ret

10104208 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10104208:	defffd04 	addi	sp,sp,-12
1010420c:	dfc00215 	stw	ra,8(sp)
10104210:	df000115 	stw	fp,4(sp)
10104214:	df000104 	addi	fp,sp,4
10104218:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1010421c:	0105d340 	call	10105d34 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10104220:	00800044 	movi	r2,1
10104224:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10104228:	0001883a 	nop
1010422c:	e037883a 	mov	sp,fp
10104230:	dfc00117 	ldw	ra,4(sp)
10104234:	df000017 	ldw	fp,0(sp)
10104238:	dec00204 	addi	sp,sp,8
1010423c:	f800283a 	ret

10104240 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10104240:	defffe04 	addi	sp,sp,-8
10104244:	dfc00115 	stw	ra,4(sp)
10104248:	df000015 	stw	fp,0(sp)
1010424c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10104250:	000d883a 	mov	r6,zero
10104254:	000b883a 	mov	r5,zero
10104258:	01040434 	movhi	r4,4112
1010425c:	211bce04 	addi	r4,r4,28472
10104260:	01043f80 	call	101043f8 <altera_avalon_jtag_uart_init>
10104264:	01040434 	movhi	r4,4112
10104268:	211bc404 	addi	r4,r4,28432
1010426c:	01041d40 	call	101041d4 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
10104270:	01040434 	movhi	r4,4112
10104274:	211fdc04 	addi	r4,r4,32624
10104278:	010546c0 	call	1010546c <alt_fs_reg>
}
1010427c:	0001883a 	nop
10104280:	e037883a 	mov	sp,fp
10104284:	dfc00117 	ldw	ra,4(sp)
10104288:	df000017 	ldw	fp,0(sp)
1010428c:	dec00204 	addi	sp,sp,8
10104290:	f800283a 	ret

10104294 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10104294:	defffa04 	addi	sp,sp,-24
10104298:	dfc00515 	stw	ra,20(sp)
1010429c:	df000415 	stw	fp,16(sp)
101042a0:	df000404 	addi	fp,sp,16
101042a4:	e13ffd15 	stw	r4,-12(fp)
101042a8:	e17ffe15 	stw	r5,-8(fp)
101042ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
101042b0:	e0bffd17 	ldw	r2,-12(fp)
101042b4:	10800017 	ldw	r2,0(r2)
101042b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
101042bc:	e0bffc17 	ldw	r2,-16(fp)
101042c0:	10c00a04 	addi	r3,r2,40
101042c4:	e0bffd17 	ldw	r2,-12(fp)
101042c8:	10800217 	ldw	r2,8(r2)
101042cc:	100f883a 	mov	r7,r2
101042d0:	e1bfff17 	ldw	r6,-4(fp)
101042d4:	e17ffe17 	ldw	r5,-8(fp)
101042d8:	1809883a 	mov	r4,r3
101042dc:	01048bc0 	call	101048bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
101042e0:	e037883a 	mov	sp,fp
101042e4:	dfc00117 	ldw	ra,4(sp)
101042e8:	df000017 	ldw	fp,0(sp)
101042ec:	dec00204 	addi	sp,sp,8
101042f0:	f800283a 	ret

101042f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
101042f4:	defffa04 	addi	sp,sp,-24
101042f8:	dfc00515 	stw	ra,20(sp)
101042fc:	df000415 	stw	fp,16(sp)
10104300:	df000404 	addi	fp,sp,16
10104304:	e13ffd15 	stw	r4,-12(fp)
10104308:	e17ffe15 	stw	r5,-8(fp)
1010430c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10104310:	e0bffd17 	ldw	r2,-12(fp)
10104314:	10800017 	ldw	r2,0(r2)
10104318:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1010431c:	e0bffc17 	ldw	r2,-16(fp)
10104320:	10c00a04 	addi	r3,r2,40
10104324:	e0bffd17 	ldw	r2,-12(fp)
10104328:	10800217 	ldw	r2,8(r2)
1010432c:	100f883a 	mov	r7,r2
10104330:	e1bfff17 	ldw	r6,-4(fp)
10104334:	e17ffe17 	ldw	r5,-8(fp)
10104338:	1809883a 	mov	r4,r3
1010433c:	0104ad80 	call	10104ad8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10104340:	e037883a 	mov	sp,fp
10104344:	dfc00117 	ldw	ra,4(sp)
10104348:	df000017 	ldw	fp,0(sp)
1010434c:	dec00204 	addi	sp,sp,8
10104350:	f800283a 	ret

10104354 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10104354:	defffc04 	addi	sp,sp,-16
10104358:	dfc00315 	stw	ra,12(sp)
1010435c:	df000215 	stw	fp,8(sp)
10104360:	df000204 	addi	fp,sp,8
10104364:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10104368:	e0bfff17 	ldw	r2,-4(fp)
1010436c:	10800017 	ldw	r2,0(r2)
10104370:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10104374:	e0bffe17 	ldw	r2,-8(fp)
10104378:	10c00a04 	addi	r3,r2,40
1010437c:	e0bfff17 	ldw	r2,-4(fp)
10104380:	10800217 	ldw	r2,8(r2)
10104384:	100b883a 	mov	r5,r2
10104388:	1809883a 	mov	r4,r3
1010438c:	01047640 	call	10104764 <altera_avalon_jtag_uart_close>
}
10104390:	e037883a 	mov	sp,fp
10104394:	dfc00117 	ldw	ra,4(sp)
10104398:	df000017 	ldw	fp,0(sp)
1010439c:	dec00204 	addi	sp,sp,8
101043a0:	f800283a 	ret

101043a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
101043a4:	defffa04 	addi	sp,sp,-24
101043a8:	dfc00515 	stw	ra,20(sp)
101043ac:	df000415 	stw	fp,16(sp)
101043b0:	df000404 	addi	fp,sp,16
101043b4:	e13ffd15 	stw	r4,-12(fp)
101043b8:	e17ffe15 	stw	r5,-8(fp)
101043bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
101043c0:	e0bffd17 	ldw	r2,-12(fp)
101043c4:	10800017 	ldw	r2,0(r2)
101043c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
101043cc:	e0bffc17 	ldw	r2,-16(fp)
101043d0:	10800a04 	addi	r2,r2,40
101043d4:	e1bfff17 	ldw	r6,-4(fp)
101043d8:	e17ffe17 	ldw	r5,-8(fp)
101043dc:	1009883a 	mov	r4,r2
101043e0:	01047cc0 	call	101047cc <altera_avalon_jtag_uart_ioctl>
}
101043e4:	e037883a 	mov	sp,fp
101043e8:	dfc00117 	ldw	ra,4(sp)
101043ec:	df000017 	ldw	fp,0(sp)
101043f0:	dec00204 	addi	sp,sp,8
101043f4:	f800283a 	ret

101043f8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
101043f8:	defffa04 	addi	sp,sp,-24
101043fc:	dfc00515 	stw	ra,20(sp)
10104400:	df000415 	stw	fp,16(sp)
10104404:	df000404 	addi	fp,sp,16
10104408:	e13ffd15 	stw	r4,-12(fp)
1010440c:	e17ffe15 	stw	r5,-8(fp)
10104410:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10104414:	e0bffd17 	ldw	r2,-12(fp)
10104418:	00c00044 	movi	r3,1
1010441c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10104420:	e0bffd17 	ldw	r2,-12(fp)
10104424:	10800017 	ldw	r2,0(r2)
10104428:	10800104 	addi	r2,r2,4
1010442c:	1007883a 	mov	r3,r2
10104430:	e0bffd17 	ldw	r2,-12(fp)
10104434:	10800817 	ldw	r2,32(r2)
10104438:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1010443c:	e0bffe17 	ldw	r2,-8(fp)
10104440:	e0ffff17 	ldw	r3,-4(fp)
10104444:	d8000015 	stw	zero,0(sp)
10104448:	e1fffd17 	ldw	r7,-12(fp)
1010444c:	01840434 	movhi	r6,4112
10104450:	31912e04 	addi	r6,r6,17592
10104454:	180b883a 	mov	r5,r3
10104458:	1009883a 	mov	r4,r2
1010445c:	010550c0 	call	1010550c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10104460:	e0bffd17 	ldw	r2,-12(fp)
10104464:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10104468:	e0bffd17 	ldw	r2,-12(fp)
1010446c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10104470:	d0e6df17 	ldw	r3,-25732(gp)
10104474:	e1fffd17 	ldw	r7,-12(fp)
10104478:	01840434 	movhi	r6,4112
1010447c:	3191b104 	addi	r6,r6,18116
10104480:	180b883a 	mov	r5,r3
10104484:	1009883a 	mov	r4,r2
10104488:	01051800 	call	10105180 <alt_alarm_start>
1010448c:	1000040e 	bge	r2,zero,101044a0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10104490:	e0fffd17 	ldw	r3,-12(fp)
10104494:	00a00034 	movhi	r2,32768
10104498:	10bfffc4 	addi	r2,r2,-1
1010449c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
101044a0:	0001883a 	nop
101044a4:	e037883a 	mov	sp,fp
101044a8:	dfc00117 	ldw	ra,4(sp)
101044ac:	df000017 	ldw	fp,0(sp)
101044b0:	dec00204 	addi	sp,sp,8
101044b4:	f800283a 	ret

101044b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
101044b8:	defff804 	addi	sp,sp,-32
101044bc:	df000715 	stw	fp,28(sp)
101044c0:	df000704 	addi	fp,sp,28
101044c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
101044c8:	e0bfff17 	ldw	r2,-4(fp)
101044cc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
101044d0:	e0bffb17 	ldw	r2,-20(fp)
101044d4:	10800017 	ldw	r2,0(r2)
101044d8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
101044dc:	e0bffc17 	ldw	r2,-16(fp)
101044e0:	10800104 	addi	r2,r2,4
101044e4:	10800037 	ldwio	r2,0(r2)
101044e8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
101044ec:	e0bffd17 	ldw	r2,-12(fp)
101044f0:	1080c00c 	andi	r2,r2,768
101044f4:	10006d26 	beq	r2,zero,101046ac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
101044f8:	e0bffd17 	ldw	r2,-12(fp)
101044fc:	1080400c 	andi	r2,r2,256
10104500:	10003526 	beq	r2,zero,101045d8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10104504:	00800074 	movhi	r2,1
10104508:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010450c:	e0bffb17 	ldw	r2,-20(fp)
10104510:	10800a17 	ldw	r2,40(r2)
10104514:	10800044 	addi	r2,r2,1
10104518:	1081ffcc 	andi	r2,r2,2047
1010451c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10104520:	e0bffb17 	ldw	r2,-20(fp)
10104524:	10c00b17 	ldw	r3,44(r2)
10104528:	e0bffe17 	ldw	r2,-8(fp)
1010452c:	18801526 	beq	r3,r2,10104584 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10104530:	e0bffc17 	ldw	r2,-16(fp)
10104534:	10800037 	ldwio	r2,0(r2)
10104538:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1010453c:	e0bff917 	ldw	r2,-28(fp)
10104540:	10a0000c 	andi	r2,r2,32768
10104544:	10001126 	beq	r2,zero,1010458c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10104548:	e0bffb17 	ldw	r2,-20(fp)
1010454c:	10800a17 	ldw	r2,40(r2)
10104550:	e0fff917 	ldw	r3,-28(fp)
10104554:	1809883a 	mov	r4,r3
10104558:	e0fffb17 	ldw	r3,-20(fp)
1010455c:	1885883a 	add	r2,r3,r2
10104560:	10800e04 	addi	r2,r2,56
10104564:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10104568:	e0bffb17 	ldw	r2,-20(fp)
1010456c:	10800a17 	ldw	r2,40(r2)
10104570:	10800044 	addi	r2,r2,1
10104574:	10c1ffcc 	andi	r3,r2,2047
10104578:	e0bffb17 	ldw	r2,-20(fp)
1010457c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10104580:	003fe206 	br	1010450c <__alt_data_end+0xfffe450c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
10104584:	0001883a 	nop
10104588:	00000106 	br	10104590 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
1010458c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10104590:	e0bff917 	ldw	r2,-28(fp)
10104594:	10bfffec 	andhi	r2,r2,65535
10104598:	10000f26 	beq	r2,zero,101045d8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1010459c:	e0bffb17 	ldw	r2,-20(fp)
101045a0:	10c00817 	ldw	r3,32(r2)
101045a4:	00bfff84 	movi	r2,-2
101045a8:	1886703a 	and	r3,r3,r2
101045ac:	e0bffb17 	ldw	r2,-20(fp)
101045b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
101045b4:	e0bffc17 	ldw	r2,-16(fp)
101045b8:	10800104 	addi	r2,r2,4
101045bc:	1007883a 	mov	r3,r2
101045c0:	e0bffb17 	ldw	r2,-20(fp)
101045c4:	10800817 	ldw	r2,32(r2)
101045c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
101045cc:	e0bffc17 	ldw	r2,-16(fp)
101045d0:	10800104 	addi	r2,r2,4
101045d4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
101045d8:	e0bffd17 	ldw	r2,-12(fp)
101045dc:	1080800c 	andi	r2,r2,512
101045e0:	103fbe26 	beq	r2,zero,101044dc <__alt_data_end+0xfffe44dc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
101045e4:	e0bffd17 	ldw	r2,-12(fp)
101045e8:	1004d43a 	srli	r2,r2,16
101045ec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
101045f0:	00001406 	br	10104644 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
101045f4:	e0bffc17 	ldw	r2,-16(fp)
101045f8:	e0fffb17 	ldw	r3,-20(fp)
101045fc:	18c00d17 	ldw	r3,52(r3)
10104600:	e13ffb17 	ldw	r4,-20(fp)
10104604:	20c7883a 	add	r3,r4,r3
10104608:	18c20e04 	addi	r3,r3,2104
1010460c:	18c00003 	ldbu	r3,0(r3)
10104610:	18c03fcc 	andi	r3,r3,255
10104614:	18c0201c 	xori	r3,r3,128
10104618:	18ffe004 	addi	r3,r3,-128
1010461c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10104620:	e0bffb17 	ldw	r2,-20(fp)
10104624:	10800d17 	ldw	r2,52(r2)
10104628:	10800044 	addi	r2,r2,1
1010462c:	10c1ffcc 	andi	r3,r2,2047
10104630:	e0bffb17 	ldw	r2,-20(fp)
10104634:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10104638:	e0bffa17 	ldw	r2,-24(fp)
1010463c:	10bfffc4 	addi	r2,r2,-1
10104640:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10104644:	e0bffa17 	ldw	r2,-24(fp)
10104648:	10000526 	beq	r2,zero,10104660 <altera_avalon_jtag_uart_irq+0x1a8>
1010464c:	e0bffb17 	ldw	r2,-20(fp)
10104650:	10c00d17 	ldw	r3,52(r2)
10104654:	e0bffb17 	ldw	r2,-20(fp)
10104658:	10800c17 	ldw	r2,48(r2)
1010465c:	18bfe51e 	bne	r3,r2,101045f4 <__alt_data_end+0xfffe45f4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10104660:	e0bffa17 	ldw	r2,-24(fp)
10104664:	103f9d26 	beq	r2,zero,101044dc <__alt_data_end+0xfffe44dc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10104668:	e0bffb17 	ldw	r2,-20(fp)
1010466c:	10c00817 	ldw	r3,32(r2)
10104670:	00bfff44 	movi	r2,-3
10104674:	1886703a 	and	r3,r3,r2
10104678:	e0bffb17 	ldw	r2,-20(fp)
1010467c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10104680:	e0bffb17 	ldw	r2,-20(fp)
10104684:	10800017 	ldw	r2,0(r2)
10104688:	10800104 	addi	r2,r2,4
1010468c:	1007883a 	mov	r3,r2
10104690:	e0bffb17 	ldw	r2,-20(fp)
10104694:	10800817 	ldw	r2,32(r2)
10104698:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1010469c:	e0bffc17 	ldw	r2,-16(fp)
101046a0:	10800104 	addi	r2,r2,4
101046a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
101046a8:	003f8c06 	br	101044dc <__alt_data_end+0xfffe44dc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
101046ac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
101046b0:	0001883a 	nop
101046b4:	e037883a 	mov	sp,fp
101046b8:	df000017 	ldw	fp,0(sp)
101046bc:	dec00104 	addi	sp,sp,4
101046c0:	f800283a 	ret

101046c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
101046c4:	defff804 	addi	sp,sp,-32
101046c8:	df000715 	stw	fp,28(sp)
101046cc:	df000704 	addi	fp,sp,28
101046d0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
101046d4:	e0bffb17 	ldw	r2,-20(fp)
101046d8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
101046dc:	e0bff917 	ldw	r2,-28(fp)
101046e0:	10800017 	ldw	r2,0(r2)
101046e4:	10800104 	addi	r2,r2,4
101046e8:	10800037 	ldwio	r2,0(r2)
101046ec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
101046f0:	e0bffa17 	ldw	r2,-24(fp)
101046f4:	1081000c 	andi	r2,r2,1024
101046f8:	10000b26 	beq	r2,zero,10104728 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
101046fc:	e0bff917 	ldw	r2,-28(fp)
10104700:	10800017 	ldw	r2,0(r2)
10104704:	10800104 	addi	r2,r2,4
10104708:	1007883a 	mov	r3,r2
1010470c:	e0bff917 	ldw	r2,-28(fp)
10104710:	10800817 	ldw	r2,32(r2)
10104714:	10810014 	ori	r2,r2,1024
10104718:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1010471c:	e0bff917 	ldw	r2,-28(fp)
10104720:	10000915 	stw	zero,36(r2)
10104724:	00000a06 	br	10104750 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10104728:	e0bff917 	ldw	r2,-28(fp)
1010472c:	10c00917 	ldw	r3,36(r2)
10104730:	00a00034 	movhi	r2,32768
10104734:	10bfff04 	addi	r2,r2,-4
10104738:	10c00536 	bltu	r2,r3,10104750 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1010473c:	e0bff917 	ldw	r2,-28(fp)
10104740:	10800917 	ldw	r2,36(r2)
10104744:	10c00044 	addi	r3,r2,1
10104748:	e0bff917 	ldw	r2,-28(fp)
1010474c:	10c00915 	stw	r3,36(r2)
10104750:	d0a6df17 	ldw	r2,-25732(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10104754:	e037883a 	mov	sp,fp
10104758:	df000017 	ldw	fp,0(sp)
1010475c:	dec00104 	addi	sp,sp,4
10104760:	f800283a 	ret

10104764 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10104764:	defffd04 	addi	sp,sp,-12
10104768:	df000215 	stw	fp,8(sp)
1010476c:	df000204 	addi	fp,sp,8
10104770:	e13ffe15 	stw	r4,-8(fp)
10104774:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10104778:	00000506 	br	10104790 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1010477c:	e0bfff17 	ldw	r2,-4(fp)
10104780:	1090000c 	andi	r2,r2,16384
10104784:	10000226 	beq	r2,zero,10104790 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10104788:	00bffd44 	movi	r2,-11
1010478c:	00000b06 	br	101047bc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10104790:	e0bffe17 	ldw	r2,-8(fp)
10104794:	10c00d17 	ldw	r3,52(r2)
10104798:	e0bffe17 	ldw	r2,-8(fp)
1010479c:	10800c17 	ldw	r2,48(r2)
101047a0:	18800526 	beq	r3,r2,101047b8 <altera_avalon_jtag_uart_close+0x54>
101047a4:	e0bffe17 	ldw	r2,-8(fp)
101047a8:	10c00917 	ldw	r3,36(r2)
101047ac:	e0bffe17 	ldw	r2,-8(fp)
101047b0:	10800117 	ldw	r2,4(r2)
101047b4:	18bff136 	bltu	r3,r2,1010477c <__alt_data_end+0xfffe477c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
101047b8:	0005883a 	mov	r2,zero
}
101047bc:	e037883a 	mov	sp,fp
101047c0:	df000017 	ldw	fp,0(sp)
101047c4:	dec00104 	addi	sp,sp,4
101047c8:	f800283a 	ret

101047cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
101047cc:	defffa04 	addi	sp,sp,-24
101047d0:	df000515 	stw	fp,20(sp)
101047d4:	df000504 	addi	fp,sp,20
101047d8:	e13ffd15 	stw	r4,-12(fp)
101047dc:	e17ffe15 	stw	r5,-8(fp)
101047e0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
101047e4:	00bff9c4 	movi	r2,-25
101047e8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
101047ec:	e0bffe17 	ldw	r2,-8(fp)
101047f0:	10da8060 	cmpeqi	r3,r2,27137
101047f4:	1800031e 	bne	r3,zero,10104804 <altera_avalon_jtag_uart_ioctl+0x38>
101047f8:	109a80a0 	cmpeqi	r2,r2,27138
101047fc:	1000181e 	bne	r2,zero,10104860 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10104800:	00002906 	br	101048a8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10104804:	e0bffd17 	ldw	r2,-12(fp)
10104808:	10c00117 	ldw	r3,4(r2)
1010480c:	00a00034 	movhi	r2,32768
10104810:	10bfffc4 	addi	r2,r2,-1
10104814:	18802126 	beq	r3,r2,1010489c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10104818:	e0bfff17 	ldw	r2,-4(fp)
1010481c:	10800017 	ldw	r2,0(r2)
10104820:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10104824:	e0bffc17 	ldw	r2,-16(fp)
10104828:	10800090 	cmplti	r2,r2,2
1010482c:	1000061e 	bne	r2,zero,10104848 <altera_avalon_jtag_uart_ioctl+0x7c>
10104830:	e0fffc17 	ldw	r3,-16(fp)
10104834:	00a00034 	movhi	r2,32768
10104838:	10bfffc4 	addi	r2,r2,-1
1010483c:	18800226 	beq	r3,r2,10104848 <altera_avalon_jtag_uart_ioctl+0x7c>
10104840:	e0bffc17 	ldw	r2,-16(fp)
10104844:	00000206 	br	10104850 <altera_avalon_jtag_uart_ioctl+0x84>
10104848:	00a00034 	movhi	r2,32768
1010484c:	10bfff84 	addi	r2,r2,-2
10104850:	e0fffd17 	ldw	r3,-12(fp)
10104854:	18800115 	stw	r2,4(r3)
      rc = 0;
10104858:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1010485c:	00000f06 	br	1010489c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10104860:	e0bffd17 	ldw	r2,-12(fp)
10104864:	10c00117 	ldw	r3,4(r2)
10104868:	00a00034 	movhi	r2,32768
1010486c:	10bfffc4 	addi	r2,r2,-1
10104870:	18800c26 	beq	r3,r2,101048a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10104874:	e0bffd17 	ldw	r2,-12(fp)
10104878:	10c00917 	ldw	r3,36(r2)
1010487c:	e0bffd17 	ldw	r2,-12(fp)
10104880:	10800117 	ldw	r2,4(r2)
10104884:	1885803a 	cmpltu	r2,r3,r2
10104888:	10c03fcc 	andi	r3,r2,255
1010488c:	e0bfff17 	ldw	r2,-4(fp)
10104890:	10c00015 	stw	r3,0(r2)
      rc = 0;
10104894:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10104898:	00000206 	br	101048a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
1010489c:	0001883a 	nop
101048a0:	00000106 	br	101048a8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
101048a4:	0001883a 	nop

  default:
    break;
  }

  return rc;
101048a8:	e0bffb17 	ldw	r2,-20(fp)
}
101048ac:	e037883a 	mov	sp,fp
101048b0:	df000017 	ldw	fp,0(sp)
101048b4:	dec00104 	addi	sp,sp,4
101048b8:	f800283a 	ret

101048bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
101048bc:	defff304 	addi	sp,sp,-52
101048c0:	dfc00c15 	stw	ra,48(sp)
101048c4:	df000b15 	stw	fp,44(sp)
101048c8:	df000b04 	addi	fp,sp,44
101048cc:	e13ffc15 	stw	r4,-16(fp)
101048d0:	e17ffd15 	stw	r5,-12(fp)
101048d4:	e1bffe15 	stw	r6,-8(fp)
101048d8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
101048dc:	e0bffd17 	ldw	r2,-12(fp)
101048e0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
101048e4:	00004706 	br	10104a04 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
101048e8:	e0bffc17 	ldw	r2,-16(fp)
101048ec:	10800a17 	ldw	r2,40(r2)
101048f0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
101048f4:	e0bffc17 	ldw	r2,-16(fp)
101048f8:	10800b17 	ldw	r2,44(r2)
101048fc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10104900:	e0fff717 	ldw	r3,-36(fp)
10104904:	e0bff817 	ldw	r2,-32(fp)
10104908:	18800536 	bltu	r3,r2,10104920 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1010490c:	e0fff717 	ldw	r3,-36(fp)
10104910:	e0bff817 	ldw	r2,-32(fp)
10104914:	1885c83a 	sub	r2,r3,r2
10104918:	e0bff615 	stw	r2,-40(fp)
1010491c:	00000406 	br	10104930 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10104920:	00c20004 	movi	r3,2048
10104924:	e0bff817 	ldw	r2,-32(fp)
10104928:	1885c83a 	sub	r2,r3,r2
1010492c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10104930:	e0bff617 	ldw	r2,-40(fp)
10104934:	10001e26 	beq	r2,zero,101049b0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10104938:	e0fffe17 	ldw	r3,-8(fp)
1010493c:	e0bff617 	ldw	r2,-40(fp)
10104940:	1880022e 	bgeu	r3,r2,1010494c <altera_avalon_jtag_uart_read+0x90>
        n = space;
10104944:	e0bffe17 	ldw	r2,-8(fp)
10104948:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1010494c:	e0bffc17 	ldw	r2,-16(fp)
10104950:	10c00e04 	addi	r3,r2,56
10104954:	e0bff817 	ldw	r2,-32(fp)
10104958:	1885883a 	add	r2,r3,r2
1010495c:	e1bff617 	ldw	r6,-40(fp)
10104960:	100b883a 	mov	r5,r2
10104964:	e13ff517 	ldw	r4,-44(fp)
10104968:	0100c100 	call	10100c10 <memcpy>
      ptr   += n;
1010496c:	e0fff517 	ldw	r3,-44(fp)
10104970:	e0bff617 	ldw	r2,-40(fp)
10104974:	1885883a 	add	r2,r3,r2
10104978:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1010497c:	e0fffe17 	ldw	r3,-8(fp)
10104980:	e0bff617 	ldw	r2,-40(fp)
10104984:	1885c83a 	sub	r2,r3,r2
10104988:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1010498c:	e0fff817 	ldw	r3,-32(fp)
10104990:	e0bff617 	ldw	r2,-40(fp)
10104994:	1885883a 	add	r2,r3,r2
10104998:	10c1ffcc 	andi	r3,r2,2047
1010499c:	e0bffc17 	ldw	r2,-16(fp)
101049a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
101049a4:	e0bffe17 	ldw	r2,-8(fp)
101049a8:	00bfcf16 	blt	zero,r2,101048e8 <__alt_data_end+0xfffe48e8>
101049ac:	00000106 	br	101049b4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
101049b0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
101049b4:	e0fff517 	ldw	r3,-44(fp)
101049b8:	e0bffd17 	ldw	r2,-12(fp)
101049bc:	1880141e 	bne	r3,r2,10104a10 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
101049c0:	e0bfff17 	ldw	r2,-4(fp)
101049c4:	1090000c 	andi	r2,r2,16384
101049c8:	1000131e 	bne	r2,zero,10104a18 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
101049cc:	0001883a 	nop
101049d0:	e0bffc17 	ldw	r2,-16(fp)
101049d4:	10c00a17 	ldw	r3,40(r2)
101049d8:	e0bff717 	ldw	r2,-36(fp)
101049dc:	1880051e 	bne	r3,r2,101049f4 <altera_avalon_jtag_uart_read+0x138>
101049e0:	e0bffc17 	ldw	r2,-16(fp)
101049e4:	10c00917 	ldw	r3,36(r2)
101049e8:	e0bffc17 	ldw	r2,-16(fp)
101049ec:	10800117 	ldw	r2,4(r2)
101049f0:	18bff736 	bltu	r3,r2,101049d0 <__alt_data_end+0xfffe49d0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
101049f4:	e0bffc17 	ldw	r2,-16(fp)
101049f8:	10c00a17 	ldw	r3,40(r2)
101049fc:	e0bff717 	ldw	r2,-36(fp)
10104a00:	18800726 	beq	r3,r2,10104a20 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10104a04:	e0bffe17 	ldw	r2,-8(fp)
10104a08:	00bfb716 	blt	zero,r2,101048e8 <__alt_data_end+0xfffe48e8>
10104a0c:	00000506 	br	10104a24 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10104a10:	0001883a 	nop
10104a14:	00000306 	br	10104a24 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10104a18:	0001883a 	nop
10104a1c:	00000106 	br	10104a24 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10104a20:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10104a24:	e0fff517 	ldw	r3,-44(fp)
10104a28:	e0bffd17 	ldw	r2,-12(fp)
10104a2c:	18801826 	beq	r3,r2,10104a90 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10104a30:	0005303a 	rdctl	r2,status
10104a34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104a38:	e0fffb17 	ldw	r3,-20(fp)
10104a3c:	00bfff84 	movi	r2,-2
10104a40:	1884703a 	and	r2,r3,r2
10104a44:	1001703a 	wrctl	status,r2
  
  return context;
10104a48:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10104a4c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10104a50:	e0bffc17 	ldw	r2,-16(fp)
10104a54:	10800817 	ldw	r2,32(r2)
10104a58:	10c00054 	ori	r3,r2,1
10104a5c:	e0bffc17 	ldw	r2,-16(fp)
10104a60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10104a64:	e0bffc17 	ldw	r2,-16(fp)
10104a68:	10800017 	ldw	r2,0(r2)
10104a6c:	10800104 	addi	r2,r2,4
10104a70:	1007883a 	mov	r3,r2
10104a74:	e0bffc17 	ldw	r2,-16(fp)
10104a78:	10800817 	ldw	r2,32(r2)
10104a7c:	18800035 	stwio	r2,0(r3)
10104a80:	e0bffa17 	ldw	r2,-24(fp)
10104a84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104a88:	e0bff917 	ldw	r2,-28(fp)
10104a8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10104a90:	e0fff517 	ldw	r3,-44(fp)
10104a94:	e0bffd17 	ldw	r2,-12(fp)
10104a98:	18800426 	beq	r3,r2,10104aac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10104a9c:	e0fff517 	ldw	r3,-44(fp)
10104aa0:	e0bffd17 	ldw	r2,-12(fp)
10104aa4:	1885c83a 	sub	r2,r3,r2
10104aa8:	00000606 	br	10104ac4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10104aac:	e0bfff17 	ldw	r2,-4(fp)
10104ab0:	1090000c 	andi	r2,r2,16384
10104ab4:	10000226 	beq	r2,zero,10104ac0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10104ab8:	00bffd44 	movi	r2,-11
10104abc:	00000106 	br	10104ac4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10104ac0:	00bffec4 	movi	r2,-5
}
10104ac4:	e037883a 	mov	sp,fp
10104ac8:	dfc00117 	ldw	ra,4(sp)
10104acc:	df000017 	ldw	fp,0(sp)
10104ad0:	dec00204 	addi	sp,sp,8
10104ad4:	f800283a 	ret

10104ad8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10104ad8:	defff304 	addi	sp,sp,-52
10104adc:	dfc00c15 	stw	ra,48(sp)
10104ae0:	df000b15 	stw	fp,44(sp)
10104ae4:	df000b04 	addi	fp,sp,44
10104ae8:	e13ffc15 	stw	r4,-16(fp)
10104aec:	e17ffd15 	stw	r5,-12(fp)
10104af0:	e1bffe15 	stw	r6,-8(fp)
10104af4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10104af8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10104afc:	e0bffd17 	ldw	r2,-12(fp)
10104b00:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10104b04:	00003706 	br	10104be4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10104b08:	e0bffc17 	ldw	r2,-16(fp)
10104b0c:	10800c17 	ldw	r2,48(r2)
10104b10:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10104b14:	e0bffc17 	ldw	r2,-16(fp)
10104b18:	10800d17 	ldw	r2,52(r2)
10104b1c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10104b20:	e0fff917 	ldw	r3,-28(fp)
10104b24:	e0bff517 	ldw	r2,-44(fp)
10104b28:	1880062e 	bgeu	r3,r2,10104b44 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10104b2c:	e0fff517 	ldw	r3,-44(fp)
10104b30:	e0bff917 	ldw	r2,-28(fp)
10104b34:	1885c83a 	sub	r2,r3,r2
10104b38:	10bfffc4 	addi	r2,r2,-1
10104b3c:	e0bff615 	stw	r2,-40(fp)
10104b40:	00000b06 	br	10104b70 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10104b44:	e0bff517 	ldw	r2,-44(fp)
10104b48:	10000526 	beq	r2,zero,10104b60 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10104b4c:	00c20004 	movi	r3,2048
10104b50:	e0bff917 	ldw	r2,-28(fp)
10104b54:	1885c83a 	sub	r2,r3,r2
10104b58:	e0bff615 	stw	r2,-40(fp)
10104b5c:	00000406 	br	10104b70 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10104b60:	00c1ffc4 	movi	r3,2047
10104b64:	e0bff917 	ldw	r2,-28(fp)
10104b68:	1885c83a 	sub	r2,r3,r2
10104b6c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10104b70:	e0bff617 	ldw	r2,-40(fp)
10104b74:	10001e26 	beq	r2,zero,10104bf0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10104b78:	e0fffe17 	ldw	r3,-8(fp)
10104b7c:	e0bff617 	ldw	r2,-40(fp)
10104b80:	1880022e 	bgeu	r3,r2,10104b8c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10104b84:	e0bffe17 	ldw	r2,-8(fp)
10104b88:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10104b8c:	e0bffc17 	ldw	r2,-16(fp)
10104b90:	10c20e04 	addi	r3,r2,2104
10104b94:	e0bff917 	ldw	r2,-28(fp)
10104b98:	1885883a 	add	r2,r3,r2
10104b9c:	e1bff617 	ldw	r6,-40(fp)
10104ba0:	e17ffd17 	ldw	r5,-12(fp)
10104ba4:	1009883a 	mov	r4,r2
10104ba8:	0100c100 	call	10100c10 <memcpy>
      ptr   += n;
10104bac:	e0fffd17 	ldw	r3,-12(fp)
10104bb0:	e0bff617 	ldw	r2,-40(fp)
10104bb4:	1885883a 	add	r2,r3,r2
10104bb8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10104bbc:	e0fffe17 	ldw	r3,-8(fp)
10104bc0:	e0bff617 	ldw	r2,-40(fp)
10104bc4:	1885c83a 	sub	r2,r3,r2
10104bc8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10104bcc:	e0fff917 	ldw	r3,-28(fp)
10104bd0:	e0bff617 	ldw	r2,-40(fp)
10104bd4:	1885883a 	add	r2,r3,r2
10104bd8:	10c1ffcc 	andi	r3,r2,2047
10104bdc:	e0bffc17 	ldw	r2,-16(fp)
10104be0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10104be4:	e0bffe17 	ldw	r2,-8(fp)
10104be8:	00bfc716 	blt	zero,r2,10104b08 <__alt_data_end+0xfffe4b08>
10104bec:	00000106 	br	10104bf4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10104bf0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10104bf4:	0005303a 	rdctl	r2,status
10104bf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10104bfc:	e0fffb17 	ldw	r3,-20(fp)
10104c00:	00bfff84 	movi	r2,-2
10104c04:	1884703a 	and	r2,r3,r2
10104c08:	1001703a 	wrctl	status,r2
  
  return context;
10104c0c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10104c10:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10104c14:	e0bffc17 	ldw	r2,-16(fp)
10104c18:	10800817 	ldw	r2,32(r2)
10104c1c:	10c00094 	ori	r3,r2,2
10104c20:	e0bffc17 	ldw	r2,-16(fp)
10104c24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10104c28:	e0bffc17 	ldw	r2,-16(fp)
10104c2c:	10800017 	ldw	r2,0(r2)
10104c30:	10800104 	addi	r2,r2,4
10104c34:	1007883a 	mov	r3,r2
10104c38:	e0bffc17 	ldw	r2,-16(fp)
10104c3c:	10800817 	ldw	r2,32(r2)
10104c40:	18800035 	stwio	r2,0(r3)
10104c44:	e0bffa17 	ldw	r2,-24(fp)
10104c48:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10104c4c:	e0bff817 	ldw	r2,-32(fp)
10104c50:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10104c54:	e0bffe17 	ldw	r2,-8(fp)
10104c58:	0080100e 	bge	zero,r2,10104c9c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10104c5c:	e0bfff17 	ldw	r2,-4(fp)
10104c60:	1090000c 	andi	r2,r2,16384
10104c64:	1000101e 	bne	r2,zero,10104ca8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10104c68:	0001883a 	nop
10104c6c:	e0bffc17 	ldw	r2,-16(fp)
10104c70:	10c00d17 	ldw	r3,52(r2)
10104c74:	e0bff517 	ldw	r2,-44(fp)
10104c78:	1880051e 	bne	r3,r2,10104c90 <altera_avalon_jtag_uart_write+0x1b8>
10104c7c:	e0bffc17 	ldw	r2,-16(fp)
10104c80:	10c00917 	ldw	r3,36(r2)
10104c84:	e0bffc17 	ldw	r2,-16(fp)
10104c88:	10800117 	ldw	r2,4(r2)
10104c8c:	18bff736 	bltu	r3,r2,10104c6c <__alt_data_end+0xfffe4c6c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10104c90:	e0bffc17 	ldw	r2,-16(fp)
10104c94:	10800917 	ldw	r2,36(r2)
10104c98:	1000051e 	bne	r2,zero,10104cb0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10104c9c:	e0bffe17 	ldw	r2,-8(fp)
10104ca0:	00bfd016 	blt	zero,r2,10104be4 <__alt_data_end+0xfffe4be4>
10104ca4:	00000306 	br	10104cb4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10104ca8:	0001883a 	nop
10104cac:	00000106 	br	10104cb4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10104cb0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10104cb4:	e0fffd17 	ldw	r3,-12(fp)
10104cb8:	e0bff717 	ldw	r2,-36(fp)
10104cbc:	18800426 	beq	r3,r2,10104cd0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10104cc0:	e0fffd17 	ldw	r3,-12(fp)
10104cc4:	e0bff717 	ldw	r2,-36(fp)
10104cc8:	1885c83a 	sub	r2,r3,r2
10104ccc:	00000606 	br	10104ce8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10104cd0:	e0bfff17 	ldw	r2,-4(fp)
10104cd4:	1090000c 	andi	r2,r2,16384
10104cd8:	10000226 	beq	r2,zero,10104ce4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10104cdc:	00bffd44 	movi	r2,-11
10104ce0:	00000106 	br	10104ce8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10104ce4:	00bffec4 	movi	r2,-5
}
10104ce8:	e037883a 	mov	sp,fp
10104cec:	dfc00117 	ldw	ra,4(sp)
10104cf0:	df000017 	ldw	fp,0(sp)
10104cf4:	dec00204 	addi	sp,sp,8
10104cf8:	f800283a 	ret

10104cfc <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
10104cfc:	defff404 	addi	sp,sp,-48
10104d00:	df000b15 	stw	fp,44(sp)
10104d04:	df000b04 	addi	fp,sp,44
10104d08:	e13ffc15 	stw	r4,-16(fp)
10104d0c:	e17ffd15 	stw	r5,-12(fp)
10104d10:	e1bffe15 	stw	r6,-8(fp)
10104d14:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
10104d18:	e0bffc17 	ldw	r2,-16(fp)
10104d1c:	10800017 	ldw	r2,0(r2)
10104d20:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10104d24:	e0bff517 	ldw	r2,-44(fp)
10104d28:	10800217 	ldw	r2,8(r2)
10104d2c:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10104d30:	e0bff617 	ldw	r2,-40(fp)
10104d34:	10bfffc4 	addi	r2,r2,-1
10104d38:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
10104d3c:	e0bffb17 	ldw	r2,-20(fp)
10104d40:	10800044 	addi	r2,r2,1
10104d44:	e0bffb15 	stw	r2,-20(fp)
10104d48:	e0bffb17 	ldw	r2,-20(fp)
10104d4c:	10800003 	ldbu	r2,0(r2)
10104d50:	10803fcc 	andi	r2,r2,255
10104d54:	1080201c 	xori	r2,r2,128
10104d58:	10bfe004 	addi	r2,r2,-128
10104d5c:	103ff71e 	bne	r2,zero,10104d3c <__alt_data_end+0xfffe4d3c>
    ;

  return ptr - string;
10104d60:	e0fffb17 	ldw	r3,-20(fp)
10104d64:	e0bff617 	ldw	r2,-40(fp)
10104d68:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10104d6c:	10800044 	addi	r2,r2,1
10104d70:	1007883a 	mov	r3,r2
10104d74:	e0bffd17 	ldw	r2,-12(fp)
10104d78:	10c5883a 	add	r2,r2,r3
10104d7c:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
10104d80:	d0a00b04 	addi	r2,gp,-32724
10104d84:	1007883a 	mov	r3,r2
  r4 = (int)name;
10104d88:	e0bffd17 	ldw	r2,-12(fp)
10104d8c:	1009883a 	mov	r4,r2
  r5 = flags;
10104d90:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
10104d94:	e1bfff17 	ldw	r6,-4(fp)
10104d98:	e0bffd17 	ldw	r2,-12(fp)
10104d9c:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10104da0:	e0bff917 	ldw	r2,-28(fp)
10104da4:	10bfffc4 	addi	r2,r2,-1
10104da8:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
10104dac:	e0bffa17 	ldw	r2,-24(fp)
10104db0:	10800044 	addi	r2,r2,1
10104db4:	e0bffa15 	stw	r2,-24(fp)
10104db8:	e0bffa17 	ldw	r2,-24(fp)
10104dbc:	10800003 	ldbu	r2,0(r2)
10104dc0:	10803fcc 	andi	r2,r2,255
10104dc4:	1080201c 	xori	r2,r2,128
10104dc8:	10bfe004 	addi	r2,r2,-128
10104dcc:	103ff71e 	bne	r2,zero,10104dac <__alt_data_end+0xfffe4dac>
    ;

  return ptr - string;
10104dd0:	e1fffa17 	ldw	r7,-24(fp)
10104dd4:	e0bff917 	ldw	r2,-28(fp)
10104dd8:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
10104ddc:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
10104de0:	003da07a 	break	1

  handle = (void *)r2;
10104de4:	e0bff715 	stw	r2,-36(fp)
  error = r3;
10104de8:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
10104dec:	e0bff817 	ldw	r2,-32(fp)
10104df0:	1000031e 	bne	r2,zero,10104e00 <alt_hostfs_open+0x104>
    fd->priv = handle;
10104df4:	e0bffc17 	ldw	r2,-16(fp)
10104df8:	e0fff717 	ldw	r3,-36(fp)
10104dfc:	10c00115 	stw	r3,4(r2)

  return -error;
10104e00:	e0bff817 	ldw	r2,-32(fp)
10104e04:	0085c83a 	sub	r2,zero,r2
}
10104e08:	e037883a 	mov	sp,fp
10104e0c:	df000017 	ldw	fp,0(sp)
10104e10:	dec00104 	addi	sp,sp,4
10104e14:	f800283a 	ret

10104e18 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
10104e18:	defffd04 	addi	sp,sp,-12
10104e1c:	df000215 	stw	fp,8(sp)
10104e20:	df000204 	addi	fp,sp,8
10104e24:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
10104e28:	d0a00e04 	addi	r2,gp,-32712
10104e2c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10104e30:	e0bfff17 	ldw	r2,-4(fp)
10104e34:	10800117 	ldw	r2,4(r2)
10104e38:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
10104e3c:	003da07a 	break	1

  error = r3;
10104e40:	e0fffe15 	stw	r3,-8(fp)

  return -error;
10104e44:	e0bffe17 	ldw	r2,-8(fp)
10104e48:	0085c83a 	sub	r2,zero,r2
}
10104e4c:	e037883a 	mov	sp,fp
10104e50:	df000017 	ldw	fp,0(sp)
10104e54:	dec00104 	addi	sp,sp,4
10104e58:	f800283a 	ret

10104e5c <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
10104e5c:	defffa04 	addi	sp,sp,-24
10104e60:	df000515 	stw	fp,20(sp)
10104e64:	df000504 	addi	fp,sp,20
10104e68:	e13ffd15 	stw	r4,-12(fp)
10104e6c:	e17ffe15 	stw	r5,-8(fp)
10104e70:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
10104e74:	d0a01104 	addi	r2,gp,-32700
10104e78:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10104e7c:	e0bffd17 	ldw	r2,-12(fp)
10104e80:	10800117 	ldw	r2,4(r2)
10104e84:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10104e88:	e0bffe17 	ldw	r2,-8(fp)
10104e8c:	100b883a 	mov	r5,r2
  r6 = len;
10104e90:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10104e94:	003da07a 	break	1

  rc = r2;
10104e98:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10104e9c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10104ea0:	e0bffc17 	ldw	r2,-16(fp)
10104ea4:	10000326 	beq	r2,zero,10104eb4 <alt_hostfs_read+0x58>
10104ea8:	e0bffc17 	ldw	r2,-16(fp)
10104eac:	0085c83a 	sub	r2,zero,r2
10104eb0:	00000106 	br	10104eb8 <alt_hostfs_read+0x5c>
10104eb4:	e0bffb17 	ldw	r2,-20(fp)
}
10104eb8:	e037883a 	mov	sp,fp
10104ebc:	df000017 	ldw	fp,0(sp)
10104ec0:	dec00104 	addi	sp,sp,4
10104ec4:	f800283a 	ret

10104ec8 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
10104ec8:	defffa04 	addi	sp,sp,-24
10104ecc:	df000515 	stw	fp,20(sp)
10104ed0:	df000504 	addi	fp,sp,20
10104ed4:	e13ffd15 	stw	r4,-12(fp)
10104ed8:	e17ffe15 	stw	r5,-8(fp)
10104edc:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10104ee0:	d0a01404 	addi	r2,gp,-32688
10104ee4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10104ee8:	e0bffd17 	ldw	r2,-12(fp)
10104eec:	10800117 	ldw	r2,4(r2)
10104ef0:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10104ef4:	e0bffe17 	ldw	r2,-8(fp)
10104ef8:	100b883a 	mov	r5,r2
  r6 = len;
10104efc:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10104f00:	003da07a 	break	1

  rc = r2;
10104f04:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10104f08:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10104f0c:	e0bffc17 	ldw	r2,-16(fp)
10104f10:	10000326 	beq	r2,zero,10104f20 <alt_hostfs_write+0x58>
10104f14:	e0bffc17 	ldw	r2,-16(fp)
10104f18:	0085c83a 	sub	r2,zero,r2
10104f1c:	00000106 	br	10104f24 <alt_hostfs_write+0x5c>
10104f20:	e0bffb17 	ldw	r2,-20(fp)
}
10104f24:	e037883a 	mov	sp,fp
10104f28:	df000017 	ldw	fp,0(sp)
10104f2c:	dec00104 	addi	sp,sp,4
10104f30:	f800283a 	ret

10104f34 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
10104f34:	defffa04 	addi	sp,sp,-24
10104f38:	df000515 	stw	fp,20(sp)
10104f3c:	df000504 	addi	fp,sp,20
10104f40:	e13ffd15 	stw	r4,-12(fp)
10104f44:	e17ffe15 	stw	r5,-8(fp)
10104f48:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10104f4c:	d0a01704 	addi	r2,gp,-32676
10104f50:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10104f54:	e0bffd17 	ldw	r2,-12(fp)
10104f58:	10800117 	ldw	r2,4(r2)
10104f5c:	1009883a 	mov	r4,r2
  r5 = ptr;
10104f60:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
10104f64:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10104f68:	003da07a 	break	1

  rc = r2;
10104f6c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10104f70:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10104f74:	e0bffc17 	ldw	r2,-16(fp)
10104f78:	10000326 	beq	r2,zero,10104f88 <alt_hostfs_seek+0x54>
10104f7c:	e0bffc17 	ldw	r2,-16(fp)
10104f80:	0085c83a 	sub	r2,zero,r2
10104f84:	00000106 	br	10104f8c <alt_hostfs_seek+0x58>
10104f88:	e0bffb17 	ldw	r2,-20(fp)
}
10104f8c:	e037883a 	mov	sp,fp
10104f90:	df000017 	ldw	fp,0(sp)
10104f94:	dec00104 	addi	sp,sp,4
10104f98:	f800283a 	ret

10104f9c <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
10104f9c:	deffe904 	addi	sp,sp,-92
10104fa0:	df001615 	stw	fp,88(sp)
10104fa4:	df001604 	addi	fp,sp,88
10104fa8:	e13ffe15 	stw	r4,-8(fp)
10104fac:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
10104fb0:	d0a01a04 	addi	r2,gp,-32664
10104fb4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10104fb8:	e0bffe17 	ldw	r2,-8(fp)
10104fbc:	10800117 	ldw	r2,4(r2)
10104fc0:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
10104fc4:	e0bfee04 	addi	r2,fp,-72
10104fc8:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
10104fcc:	003da07a 	break	1

  rc = r2;
10104fd0:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
10104fd4:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
10104fd8:	e0bfec17 	ldw	r2,-80(fp)
10104fdc:	1000621e 	bne	r2,zero,10105168 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
10104fe0:	e0bfee04 	addi	r2,fp,-72
10104fe4:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
10104fe8:	e0bfea17 	ldw	r2,-88(fp)
10104fec:	10801004 	addi	r2,r2,64
10104ff0:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10104ff4:	00001606 	br	10105050 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10104ff8:	e0bfea17 	ldw	r2,-88(fp)
10104ffc:	10800017 	ldw	r2,0(r2)
10105000:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
10105004:	e0bfea17 	ldw	r2,-88(fp)
10105008:	10800017 	ldw	r2,0(r2)
1010500c:	10803fec 	andhi	r2,r2,255
10105010:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10105014:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10105018:	e0bfea17 	ldw	r2,-88(fp)
1010501c:	10800017 	ldw	r2,0(r2)
10105020:	10bfc00c 	andi	r2,r2,65280
10105024:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
10105028:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
1010502c:	e0bfea17 	ldw	r2,-88(fp)
10105030:	10800017 	ldw	r2,0(r2)
10105034:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10105038:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1010503c:	e0bfea17 	ldw	r2,-88(fp)
10105040:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
10105044:	e0bfea17 	ldw	r2,-88(fp)
10105048:	10800104 	addi	r2,r2,4
1010504c:	e0bfea15 	stw	r2,-88(fp)
10105050:	e0ffea17 	ldw	r3,-88(fp)
10105054:	e0bfed17 	ldw	r2,-76(fp)
10105058:	18bfe736 	bltu	r3,r2,10104ff8 <__alt_data_end+0xfffe4ff8>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
1010505c:	e0bfff17 	ldw	r2,-4(fp)
10105060:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
10105064:	e0bfea17 	ldw	r2,-88(fp)
10105068:	10800f04 	addi	r2,r2,60
1010506c:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10105070:	00000506 	br	10105088 <alt_hostfs_fstat+0xec>
      *ptr = 0;
10105074:	e0bfea17 	ldw	r2,-88(fp)
10105078:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
1010507c:	e0bfea17 	ldw	r2,-88(fp)
10105080:	10800104 	addi	r2,r2,4
10105084:	e0bfea15 	stw	r2,-88(fp)
10105088:	e0ffea17 	ldw	r3,-88(fp)
1010508c:	e0bfed17 	ldw	r2,-76(fp)
10105090:	18bff836 	bltu	r3,r2,10105074 <__alt_data_end+0xfffe5074>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
10105094:	e0bfee17 	ldw	r2,-72(fp)
10105098:	1007883a 	mov	r3,r2
1010509c:	e0bfff17 	ldw	r2,-4(fp)
101050a0:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
101050a4:	e0bfef17 	ldw	r2,-68(fp)
101050a8:	1007883a 	mov	r3,r2
101050ac:	e0bfff17 	ldw	r2,-4(fp)
101050b0:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
101050b4:	e0fff017 	ldw	r3,-64(fp)
101050b8:	e0bfff17 	ldw	r2,-4(fp)
101050bc:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
101050c0:	e0bff117 	ldw	r2,-60(fp)
101050c4:	1007883a 	mov	r3,r2
101050c8:	e0bfff17 	ldw	r2,-4(fp)
101050cc:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
101050d0:	e0bff217 	ldw	r2,-56(fp)
101050d4:	1007883a 	mov	r3,r2
101050d8:	e0bfff17 	ldw	r2,-4(fp)
101050dc:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
101050e0:	e0bff317 	ldw	r2,-52(fp)
101050e4:	1007883a 	mov	r3,r2
101050e8:	e0bfff17 	ldw	r2,-4(fp)
101050ec:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
101050f0:	e0bff417 	ldw	r2,-48(fp)
101050f4:	1007883a 	mov	r3,r2
101050f8:	e0bfff17 	ldw	r2,-4(fp)
101050fc:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
10105100:	e0bff617 	ldw	r2,-40(fp)
10105104:	1007883a 	mov	r3,r2
10105108:	e0bfff17 	ldw	r2,-4(fp)
1010510c:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
10105110:	e0bffb17 	ldw	r2,-20(fp)
10105114:	1007883a 	mov	r3,r2
10105118:	e0bfff17 	ldw	r2,-4(fp)
1010511c:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
10105120:	e0bffc17 	ldw	r2,-16(fp)
10105124:	1007883a 	mov	r3,r2
10105128:	e0bfff17 	ldw	r2,-4(fp)
1010512c:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
10105130:	e0bffd17 	ldw	r2,-12(fp)
10105134:	1007883a 	mov	r3,r2
10105138:	e0bfff17 	ldw	r2,-4(fp)
1010513c:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
10105140:	e0bff817 	ldw	r2,-32(fp)
10105144:	1007883a 	mov	r3,r2
10105148:	e0bfff17 	ldw	r2,-4(fp)
1010514c:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
10105150:	e0bffa17 	ldw	r2,-24(fp)
10105154:	1007883a 	mov	r3,r2
10105158:	e0bfff17 	ldw	r2,-4(fp)
1010515c:	10c00c15 	stw	r3,48(r2)

    return rc;
10105160:	e0bfeb17 	ldw	r2,-84(fp)
10105164:	00000206 	br	10105170 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
10105168:	e0bfec17 	ldw	r2,-80(fp)
1010516c:	0085c83a 	sub	r2,zero,r2
}
10105170:	e037883a 	mov	sp,fp
10105174:	df000017 	ldw	fp,0(sp)
10105178:	dec00104 	addi	sp,sp,4
1010517c:	f800283a 	ret

10105180 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10105180:	defff504 	addi	sp,sp,-44
10105184:	df000a15 	stw	fp,40(sp)
10105188:	df000a04 	addi	fp,sp,40
1010518c:	e13ffc15 	stw	r4,-16(fp)
10105190:	e17ffd15 	stw	r5,-12(fp)
10105194:	e1bffe15 	stw	r6,-8(fp)
10105198:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
1010519c:	e03ff615 	stw	zero,-40(fp)
101051a0:	d0a6df17 	ldw	r2,-25732(gp)
  
  if (alt_ticks_per_second ())
101051a4:	10003c26 	beq	r2,zero,10105298 <alt_alarm_start+0x118>
  {
    if (alarm)
101051a8:	e0bffc17 	ldw	r2,-16(fp)
101051ac:	10003826 	beq	r2,zero,10105290 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
101051b0:	e0bffc17 	ldw	r2,-16(fp)
101051b4:	e0fffe17 	ldw	r3,-8(fp)
101051b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
101051bc:	e0bffc17 	ldw	r2,-16(fp)
101051c0:	e0ffff17 	ldw	r3,-4(fp)
101051c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101051c8:	0005303a 	rdctl	r2,status
101051cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
101051d0:	e0fff917 	ldw	r3,-28(fp)
101051d4:	00bfff84 	movi	r2,-2
101051d8:	1884703a 	and	r2,r3,r2
101051dc:	1001703a 	wrctl	status,r2
  
  return context;
101051e0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
101051e4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
101051e8:	d0a6e017 	ldw	r2,-25728(gp)
      
      current_nticks = alt_nticks();
101051ec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
101051f0:	e0fffd17 	ldw	r3,-12(fp)
101051f4:	e0bff617 	ldw	r2,-40(fp)
101051f8:	1885883a 	add	r2,r3,r2
101051fc:	10c00044 	addi	r3,r2,1
10105200:	e0bffc17 	ldw	r2,-16(fp)
10105204:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10105208:	e0bffc17 	ldw	r2,-16(fp)
1010520c:	10c00217 	ldw	r3,8(r2)
10105210:	e0bff617 	ldw	r2,-40(fp)
10105214:	1880042e 	bgeu	r3,r2,10105228 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10105218:	e0bffc17 	ldw	r2,-16(fp)
1010521c:	00c00044 	movi	r3,1
10105220:	10c00405 	stb	r3,16(r2)
10105224:	00000206 	br	10105230 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10105228:	e0bffc17 	ldw	r2,-16(fp)
1010522c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10105230:	e0bffc17 	ldw	r2,-16(fp)
10105234:	d0e01e04 	addi	r3,gp,-32648
10105238:	e0fffa15 	stw	r3,-24(fp)
1010523c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10105240:	e0bffb17 	ldw	r2,-20(fp)
10105244:	e0fffa17 	ldw	r3,-24(fp)
10105248:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1010524c:	e0bffa17 	ldw	r2,-24(fp)
10105250:	10c00017 	ldw	r3,0(r2)
10105254:	e0bffb17 	ldw	r2,-20(fp)
10105258:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1010525c:	e0bffa17 	ldw	r2,-24(fp)
10105260:	10800017 	ldw	r2,0(r2)
10105264:	e0fffb17 	ldw	r3,-20(fp)
10105268:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1010526c:	e0bffa17 	ldw	r2,-24(fp)
10105270:	e0fffb17 	ldw	r3,-20(fp)
10105274:	10c00015 	stw	r3,0(r2)
10105278:	e0bff817 	ldw	r2,-32(fp)
1010527c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10105280:	e0bff717 	ldw	r2,-36(fp)
10105284:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10105288:	0005883a 	mov	r2,zero
1010528c:	00000306 	br	1010529c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10105290:	00bffa84 	movi	r2,-22
10105294:	00000106 	br	1010529c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10105298:	00bfde84 	movi	r2,-134
  }
}
1010529c:	e037883a 	mov	sp,fp
101052a0:	df000017 	ldw	fp,0(sp)
101052a4:	dec00104 	addi	sp,sp,4
101052a8:	f800283a 	ret

101052ac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
101052ac:	deffff04 	addi	sp,sp,-4
101052b0:	df000015 	stw	fp,0(sp)
101052b4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
101052b8:	0001883a 	nop
101052bc:	e037883a 	mov	sp,fp
101052c0:	df000017 	ldw	fp,0(sp)
101052c4:	dec00104 	addi	sp,sp,4
101052c8:	f800283a 	ret

101052cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
101052cc:	defffe04 	addi	sp,sp,-8
101052d0:	dfc00115 	stw	ra,4(sp)
101052d4:	df000015 	stw	fp,0(sp)
101052d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
101052dc:	d0a00917 	ldw	r2,-32732(gp)
101052e0:	10000326 	beq	r2,zero,101052f0 <alt_get_errno+0x24>
101052e4:	d0a00917 	ldw	r2,-32732(gp)
101052e8:	103ee83a 	callr	r2
101052ec:	00000106 	br	101052f4 <alt_get_errno+0x28>
101052f0:	d0a6da04 	addi	r2,gp,-25752
}
101052f4:	e037883a 	mov	sp,fp
101052f8:	dfc00117 	ldw	ra,4(sp)
101052fc:	df000017 	ldw	fp,0(sp)
10105300:	dec00204 	addi	sp,sp,8
10105304:	f800283a 	ret

10105308 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10105308:	defffa04 	addi	sp,sp,-24
1010530c:	dfc00515 	stw	ra,20(sp)
10105310:	df000415 	stw	fp,16(sp)
10105314:	df000404 	addi	fp,sp,16
10105318:	e13ffe15 	stw	r4,-8(fp)
1010531c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10105320:	e0bffe17 	ldw	r2,-8(fp)
10105324:	10000326 	beq	r2,zero,10105334 <alt_dev_llist_insert+0x2c>
10105328:	e0bffe17 	ldw	r2,-8(fp)
1010532c:	10800217 	ldw	r2,8(r2)
10105330:	1000061e 	bne	r2,zero,1010534c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10105334:	01052cc0 	call	101052cc <alt_get_errno>
10105338:	1007883a 	mov	r3,r2
1010533c:	00800584 	movi	r2,22
10105340:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10105344:	00bffa84 	movi	r2,-22
10105348:	00001306 	br	10105398 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
1010534c:	e0bffe17 	ldw	r2,-8(fp)
10105350:	e0ffff17 	ldw	r3,-4(fp)
10105354:	e0fffc15 	stw	r3,-16(fp)
10105358:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
1010535c:	e0bffd17 	ldw	r2,-12(fp)
10105360:	e0fffc17 	ldw	r3,-16(fp)
10105364:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10105368:	e0bffc17 	ldw	r2,-16(fp)
1010536c:	10c00017 	ldw	r3,0(r2)
10105370:	e0bffd17 	ldw	r2,-12(fp)
10105374:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10105378:	e0bffc17 	ldw	r2,-16(fp)
1010537c:	10800017 	ldw	r2,0(r2)
10105380:	e0fffd17 	ldw	r3,-12(fp)
10105384:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10105388:	e0bffc17 	ldw	r2,-16(fp)
1010538c:	e0fffd17 	ldw	r3,-12(fp)
10105390:	10c00015 	stw	r3,0(r2)

  return 0;  
10105394:	0005883a 	mov	r2,zero
}
10105398:	e037883a 	mov	sp,fp
1010539c:	dfc00117 	ldw	ra,4(sp)
101053a0:	df000017 	ldw	fp,0(sp)
101053a4:	dec00204 	addi	sp,sp,8
101053a8:	f800283a 	ret

101053ac <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
101053ac:	defffd04 	addi	sp,sp,-12
101053b0:	dfc00215 	stw	ra,8(sp)
101053b4:	df000115 	stw	fp,4(sp)
101053b8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
101053bc:	00840434 	movhi	r2,4112
101053c0:	1098f804 	addi	r2,r2,25568
101053c4:	e0bfff15 	stw	r2,-4(fp)
101053c8:	00000606 	br	101053e4 <_do_ctors+0x38>
        (*ctor) (); 
101053cc:	e0bfff17 	ldw	r2,-4(fp)
101053d0:	10800017 	ldw	r2,0(r2)
101053d4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
101053d8:	e0bfff17 	ldw	r2,-4(fp)
101053dc:	10bfff04 	addi	r2,r2,-4
101053e0:	e0bfff15 	stw	r2,-4(fp)
101053e4:	e0ffff17 	ldw	r3,-4(fp)
101053e8:	00840434 	movhi	r2,4112
101053ec:	1098f904 	addi	r2,r2,25572
101053f0:	18bff62e 	bgeu	r3,r2,101053cc <__alt_data_end+0xfffe53cc>
        (*ctor) (); 
}
101053f4:	0001883a 	nop
101053f8:	e037883a 	mov	sp,fp
101053fc:	dfc00117 	ldw	ra,4(sp)
10105400:	df000017 	ldw	fp,0(sp)
10105404:	dec00204 	addi	sp,sp,8
10105408:	f800283a 	ret

1010540c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
1010540c:	defffd04 	addi	sp,sp,-12
10105410:	dfc00215 	stw	ra,8(sp)
10105414:	df000115 	stw	fp,4(sp)
10105418:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1010541c:	00840434 	movhi	r2,4112
10105420:	1098f804 	addi	r2,r2,25568
10105424:	e0bfff15 	stw	r2,-4(fp)
10105428:	00000606 	br	10105444 <_do_dtors+0x38>
        (*dtor) (); 
1010542c:	e0bfff17 	ldw	r2,-4(fp)
10105430:	10800017 	ldw	r2,0(r2)
10105434:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10105438:	e0bfff17 	ldw	r2,-4(fp)
1010543c:	10bfff04 	addi	r2,r2,-4
10105440:	e0bfff15 	stw	r2,-4(fp)
10105444:	e0ffff17 	ldw	r3,-4(fp)
10105448:	00840434 	movhi	r2,4112
1010544c:	1098f904 	addi	r2,r2,25572
10105450:	18bff62e 	bgeu	r3,r2,1010542c <__alt_data_end+0xfffe542c>
        (*dtor) (); 
}
10105454:	0001883a 	nop
10105458:	e037883a 	mov	sp,fp
1010545c:	dfc00117 	ldw	ra,4(sp)
10105460:	df000017 	ldw	fp,0(sp)
10105464:	dec00204 	addi	sp,sp,8
10105468:	f800283a 	ret

1010546c <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
1010546c:	defffc04 	addi	sp,sp,-16
10105470:	df000315 	stw	fp,12(sp)
10105474:	df000304 	addi	fp,sp,12
10105478:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
1010547c:	e0bfff17 	ldw	r2,-4(fp)
10105480:	10800217 	ldw	r2,8(r2)
10105484:	1000021e 	bne	r2,zero,10105490 <alt_fs_reg+0x24>
  {
    return -ENODEV;
10105488:	00bffb44 	movi	r2,-19
1010548c:	00001306 	br	101054dc <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
10105490:	e0bfff17 	ldw	r2,-4(fp)
10105494:	d0e00404 	addi	r3,gp,-32752
10105498:	e0fffd15 	stw	r3,-12(fp)
1010549c:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
101054a0:	e0bffe17 	ldw	r2,-8(fp)
101054a4:	e0fffd17 	ldw	r3,-12(fp)
101054a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
101054ac:	e0bffd17 	ldw	r2,-12(fp)
101054b0:	10c00017 	ldw	r3,0(r2)
101054b4:	e0bffe17 	ldw	r2,-8(fp)
101054b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
101054bc:	e0bffd17 	ldw	r2,-12(fp)
101054c0:	10800017 	ldw	r2,0(r2)
101054c4:	e0fffe17 	ldw	r3,-8(fp)
101054c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
101054cc:	e0bffd17 	ldw	r2,-12(fp)
101054d0:	e0fffe17 	ldw	r3,-8(fp)
101054d4:	10c00015 	stw	r3,0(r2)

  return 0;
101054d8:	0005883a 	mov	r2,zero
} 
101054dc:	e037883a 	mov	sp,fp
101054e0:	df000017 	ldw	fp,0(sp)
101054e4:	dec00104 	addi	sp,sp,4
101054e8:	f800283a 	ret

101054ec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
101054ec:	deffff04 	addi	sp,sp,-4
101054f0:	df000015 	stw	fp,0(sp)
101054f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
101054f8:	0001883a 	nop
101054fc:	e037883a 	mov	sp,fp
10105500:	df000017 	ldw	fp,0(sp)
10105504:	dec00104 	addi	sp,sp,4
10105508:	f800283a 	ret

1010550c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1010550c:	defff904 	addi	sp,sp,-28
10105510:	dfc00615 	stw	ra,24(sp)
10105514:	df000515 	stw	fp,20(sp)
10105518:	df000504 	addi	fp,sp,20
1010551c:	e13ffc15 	stw	r4,-16(fp)
10105520:	e17ffd15 	stw	r5,-12(fp)
10105524:	e1bffe15 	stw	r6,-8(fp)
10105528:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1010552c:	e0800217 	ldw	r2,8(fp)
10105530:	d8800015 	stw	r2,0(sp)
10105534:	e1ffff17 	ldw	r7,-4(fp)
10105538:	e1bffe17 	ldw	r6,-8(fp)
1010553c:	e17ffd17 	ldw	r5,-12(fp)
10105540:	e13ffc17 	ldw	r4,-16(fp)
10105544:	01056bc0 	call	101056bc <alt_iic_isr_register>
}  
10105548:	e037883a 	mov	sp,fp
1010554c:	dfc00117 	ldw	ra,4(sp)
10105550:	df000017 	ldw	fp,0(sp)
10105554:	dec00204 	addi	sp,sp,8
10105558:	f800283a 	ret

1010555c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1010555c:	defff904 	addi	sp,sp,-28
10105560:	df000615 	stw	fp,24(sp)
10105564:	df000604 	addi	fp,sp,24
10105568:	e13ffe15 	stw	r4,-8(fp)
1010556c:	e17fff15 	stw	r5,-4(fp)
10105570:	e0bfff17 	ldw	r2,-4(fp)
10105574:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10105578:	0005303a 	rdctl	r2,status
1010557c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10105580:	e0fffb17 	ldw	r3,-20(fp)
10105584:	00bfff84 	movi	r2,-2
10105588:	1884703a 	and	r2,r3,r2
1010558c:	1001703a 	wrctl	status,r2
  
  return context;
10105590:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10105594:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10105598:	00c00044 	movi	r3,1
1010559c:	e0bffa17 	ldw	r2,-24(fp)
101055a0:	1884983a 	sll	r2,r3,r2
101055a4:	1007883a 	mov	r3,r2
101055a8:	d0a6de17 	ldw	r2,-25736(gp)
101055ac:	1884b03a 	or	r2,r3,r2
101055b0:	d0a6de15 	stw	r2,-25736(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
101055b4:	d0a6de17 	ldw	r2,-25736(gp)
101055b8:	100170fa 	wrctl	ienable,r2
101055bc:	e0bffc17 	ldw	r2,-16(fp)
101055c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
101055c4:	e0bffd17 	ldw	r2,-12(fp)
101055c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
101055cc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
101055d0:	0001883a 	nop
}
101055d4:	e037883a 	mov	sp,fp
101055d8:	df000017 	ldw	fp,0(sp)
101055dc:	dec00104 	addi	sp,sp,4
101055e0:	f800283a 	ret

101055e4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
101055e4:	defff904 	addi	sp,sp,-28
101055e8:	df000615 	stw	fp,24(sp)
101055ec:	df000604 	addi	fp,sp,24
101055f0:	e13ffe15 	stw	r4,-8(fp)
101055f4:	e17fff15 	stw	r5,-4(fp)
101055f8:	e0bfff17 	ldw	r2,-4(fp)
101055fc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10105600:	0005303a 	rdctl	r2,status
10105604:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10105608:	e0fffb17 	ldw	r3,-20(fp)
1010560c:	00bfff84 	movi	r2,-2
10105610:	1884703a 	and	r2,r3,r2
10105614:	1001703a 	wrctl	status,r2
  
  return context;
10105618:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
1010561c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10105620:	00c00044 	movi	r3,1
10105624:	e0bffa17 	ldw	r2,-24(fp)
10105628:	1884983a 	sll	r2,r3,r2
1010562c:	0084303a 	nor	r2,zero,r2
10105630:	1007883a 	mov	r3,r2
10105634:	d0a6de17 	ldw	r2,-25736(gp)
10105638:	1884703a 	and	r2,r3,r2
1010563c:	d0a6de15 	stw	r2,-25736(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10105640:	d0a6de17 	ldw	r2,-25736(gp)
10105644:	100170fa 	wrctl	ienable,r2
10105648:	e0bffc17 	ldw	r2,-16(fp)
1010564c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10105650:	e0bffd17 	ldw	r2,-12(fp)
10105654:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10105658:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
1010565c:	0001883a 	nop
}
10105660:	e037883a 	mov	sp,fp
10105664:	df000017 	ldw	fp,0(sp)
10105668:	dec00104 	addi	sp,sp,4
1010566c:	f800283a 	ret

10105670 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10105670:	defffc04 	addi	sp,sp,-16
10105674:	df000315 	stw	fp,12(sp)
10105678:	df000304 	addi	fp,sp,12
1010567c:	e13ffe15 	stw	r4,-8(fp)
10105680:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10105684:	000530fa 	rdctl	r2,ienable
10105688:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1010568c:	00c00044 	movi	r3,1
10105690:	e0bfff17 	ldw	r2,-4(fp)
10105694:	1884983a 	sll	r2,r3,r2
10105698:	1007883a 	mov	r3,r2
1010569c:	e0bffd17 	ldw	r2,-12(fp)
101056a0:	1884703a 	and	r2,r3,r2
101056a4:	1004c03a 	cmpne	r2,r2,zero
101056a8:	10803fcc 	andi	r2,r2,255
}
101056ac:	e037883a 	mov	sp,fp
101056b0:	df000017 	ldw	fp,0(sp)
101056b4:	dec00104 	addi	sp,sp,4
101056b8:	f800283a 	ret

101056bc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
101056bc:	defff504 	addi	sp,sp,-44
101056c0:	dfc00a15 	stw	ra,40(sp)
101056c4:	df000915 	stw	fp,36(sp)
101056c8:	df000904 	addi	fp,sp,36
101056cc:	e13ffc15 	stw	r4,-16(fp)
101056d0:	e17ffd15 	stw	r5,-12(fp)
101056d4:	e1bffe15 	stw	r6,-8(fp)
101056d8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
101056dc:	00bffa84 	movi	r2,-22
101056e0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
101056e4:	e0bffd17 	ldw	r2,-12(fp)
101056e8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
101056ec:	e0bff817 	ldw	r2,-32(fp)
101056f0:	10800808 	cmpgei	r2,r2,32
101056f4:	1000271e 	bne	r2,zero,10105794 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
101056f8:	0005303a 	rdctl	r2,status
101056fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10105700:	e0fffb17 	ldw	r3,-20(fp)
10105704:	00bfff84 	movi	r2,-2
10105708:	1884703a 	and	r2,r3,r2
1010570c:	1001703a 	wrctl	status,r2
  
  return context;
10105710:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10105714:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10105718:	00840474 	movhi	r2,4113
1010571c:	10a6d204 	addi	r2,r2,-25784
10105720:	e0fff817 	ldw	r3,-32(fp)
10105724:	180690fa 	slli	r3,r3,3
10105728:	10c5883a 	add	r2,r2,r3
1010572c:	e0fffe17 	ldw	r3,-8(fp)
10105730:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10105734:	00840474 	movhi	r2,4113
10105738:	10a6d204 	addi	r2,r2,-25784
1010573c:	e0fff817 	ldw	r3,-32(fp)
10105740:	180690fa 	slli	r3,r3,3
10105744:	10c5883a 	add	r2,r2,r3
10105748:	10800104 	addi	r2,r2,4
1010574c:	e0ffff17 	ldw	r3,-4(fp)
10105750:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10105754:	e0bffe17 	ldw	r2,-8(fp)
10105758:	10000526 	beq	r2,zero,10105770 <alt_iic_isr_register+0xb4>
1010575c:	e0bff817 	ldw	r2,-32(fp)
10105760:	100b883a 	mov	r5,r2
10105764:	e13ffc17 	ldw	r4,-16(fp)
10105768:	010555c0 	call	1010555c <alt_ic_irq_enable>
1010576c:	00000406 	br	10105780 <alt_iic_isr_register+0xc4>
10105770:	e0bff817 	ldw	r2,-32(fp)
10105774:	100b883a 	mov	r5,r2
10105778:	e13ffc17 	ldw	r4,-16(fp)
1010577c:	01055e40 	call	101055e4 <alt_ic_irq_disable>
10105780:	e0bff715 	stw	r2,-36(fp)
10105784:	e0bffa17 	ldw	r2,-24(fp)
10105788:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1010578c:	e0bff917 	ldw	r2,-28(fp)
10105790:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10105794:	e0bff717 	ldw	r2,-36(fp)
}
10105798:	e037883a 	mov	sp,fp
1010579c:	dfc00117 	ldw	ra,4(sp)
101057a0:	df000017 	ldw	fp,0(sp)
101057a4:	dec00204 	addi	sp,sp,8
101057a8:	f800283a 	ret

101057ac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
101057ac:	defff804 	addi	sp,sp,-32
101057b0:	dfc00715 	stw	ra,28(sp)
101057b4:	df000615 	stw	fp,24(sp)
101057b8:	dc000515 	stw	r16,20(sp)
101057bc:	df000604 	addi	fp,sp,24
101057c0:	e13ffb15 	stw	r4,-20(fp)
101057c4:	e17ffc15 	stw	r5,-16(fp)
101057c8:	e1bffd15 	stw	r6,-12(fp)
101057cc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
101057d0:	e1bffe17 	ldw	r6,-8(fp)
101057d4:	e17ffd17 	ldw	r5,-12(fp)
101057d8:	e13ffc17 	ldw	r4,-16(fp)
101057dc:	0105a340 	call	10105a34 <open>
101057e0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
101057e4:	e0bffa17 	ldw	r2,-24(fp)
101057e8:	10002216 	blt	r2,zero,10105874 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
101057ec:	04040434 	movhi	r16,4112
101057f0:	841b6404 	addi	r16,r16,28048
101057f4:	e0bffa17 	ldw	r2,-24(fp)
101057f8:	01400304 	movi	r5,12
101057fc:	1009883a 	mov	r4,r2
10105800:	0100be80 	call	10100be8 <__mulsi3>
10105804:	8085883a 	add	r2,r16,r2
10105808:	10c00017 	ldw	r3,0(r2)
1010580c:	e0bffb17 	ldw	r2,-20(fp)
10105810:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10105814:	04040434 	movhi	r16,4112
10105818:	841b6404 	addi	r16,r16,28048
1010581c:	e0bffa17 	ldw	r2,-24(fp)
10105820:	01400304 	movi	r5,12
10105824:	1009883a 	mov	r4,r2
10105828:	0100be80 	call	10100be8 <__mulsi3>
1010582c:	8085883a 	add	r2,r16,r2
10105830:	10800104 	addi	r2,r2,4
10105834:	10c00017 	ldw	r3,0(r2)
10105838:	e0bffb17 	ldw	r2,-20(fp)
1010583c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10105840:	04040434 	movhi	r16,4112
10105844:	841b6404 	addi	r16,r16,28048
10105848:	e0bffa17 	ldw	r2,-24(fp)
1010584c:	01400304 	movi	r5,12
10105850:	1009883a 	mov	r4,r2
10105854:	0100be80 	call	10100be8 <__mulsi3>
10105858:	8085883a 	add	r2,r16,r2
1010585c:	10800204 	addi	r2,r2,8
10105860:	10c00017 	ldw	r3,0(r2)
10105864:	e0bffb17 	ldw	r2,-20(fp)
10105868:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
1010586c:	e13ffa17 	ldw	r4,-24(fp)
10105870:	0103f640 	call	10103f64 <alt_release_fd>
  }
} 
10105874:	0001883a 	nop
10105878:	e6ffff04 	addi	sp,fp,-4
1010587c:	dfc00217 	ldw	ra,8(sp)
10105880:	df000117 	ldw	fp,4(sp)
10105884:	dc000017 	ldw	r16,0(sp)
10105888:	dec00304 	addi	sp,sp,12
1010588c:	f800283a 	ret

10105890 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10105890:	defffb04 	addi	sp,sp,-20
10105894:	dfc00415 	stw	ra,16(sp)
10105898:	df000315 	stw	fp,12(sp)
1010589c:	df000304 	addi	fp,sp,12
101058a0:	e13ffd15 	stw	r4,-12(fp)
101058a4:	e17ffe15 	stw	r5,-8(fp)
101058a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
101058ac:	01c07fc4 	movi	r7,511
101058b0:	01800044 	movi	r6,1
101058b4:	e17ffd17 	ldw	r5,-12(fp)
101058b8:	01040434 	movhi	r4,4112
101058bc:	211b6704 	addi	r4,r4,28060
101058c0:	01057ac0 	call	101057ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
101058c4:	01c07fc4 	movi	r7,511
101058c8:	000d883a 	mov	r6,zero
101058cc:	e17ffe17 	ldw	r5,-8(fp)
101058d0:	01040434 	movhi	r4,4112
101058d4:	211b6404 	addi	r4,r4,28048
101058d8:	01057ac0 	call	101057ac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
101058dc:	01c07fc4 	movi	r7,511
101058e0:	01800044 	movi	r6,1
101058e4:	e17fff17 	ldw	r5,-4(fp)
101058e8:	01040434 	movhi	r4,4112
101058ec:	211b6a04 	addi	r4,r4,28072
101058f0:	01057ac0 	call	101057ac <alt_open_fd>
}  
101058f4:	0001883a 	nop
101058f8:	e037883a 	mov	sp,fp
101058fc:	dfc00117 	ldw	ra,4(sp)
10105900:	df000017 	ldw	fp,0(sp)
10105904:	dec00204 	addi	sp,sp,8
10105908:	f800283a 	ret

1010590c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1010590c:	defffe04 	addi	sp,sp,-8
10105910:	dfc00115 	stw	ra,4(sp)
10105914:	df000015 	stw	fp,0(sp)
10105918:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1010591c:	d0a00917 	ldw	r2,-32732(gp)
10105920:	10000326 	beq	r2,zero,10105930 <alt_get_errno+0x24>
10105924:	d0a00917 	ldw	r2,-32732(gp)
10105928:	103ee83a 	callr	r2
1010592c:	00000106 	br	10105934 <alt_get_errno+0x28>
10105930:	d0a6da04 	addi	r2,gp,-25752
}
10105934:	e037883a 	mov	sp,fp
10105938:	dfc00117 	ldw	ra,4(sp)
1010593c:	df000017 	ldw	fp,0(sp)
10105940:	dec00204 	addi	sp,sp,8
10105944:	f800283a 	ret

10105948 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10105948:	defffb04 	addi	sp,sp,-20
1010594c:	dfc00415 	stw	ra,16(sp)
10105950:	df000315 	stw	fp,12(sp)
10105954:	dc000215 	stw	r16,8(sp)
10105958:	df000304 	addi	fp,sp,12
1010595c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10105960:	e0bffe17 	ldw	r2,-8(fp)
10105964:	10800217 	ldw	r2,8(r2)
10105968:	10d00034 	orhi	r3,r2,16384
1010596c:	e0bffe17 	ldw	r2,-8(fp)
10105970:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10105974:	e03ffd15 	stw	zero,-12(fp)
10105978:	00002306 	br	10105a08 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
1010597c:	04040434 	movhi	r16,4112
10105980:	841b6404 	addi	r16,r16,28048
10105984:	e0bffd17 	ldw	r2,-12(fp)
10105988:	01400304 	movi	r5,12
1010598c:	1009883a 	mov	r4,r2
10105990:	0100be80 	call	10100be8 <__mulsi3>
10105994:	8085883a 	add	r2,r16,r2
10105998:	10c00017 	ldw	r3,0(r2)
1010599c:	e0bffe17 	ldw	r2,-8(fp)
101059a0:	10800017 	ldw	r2,0(r2)
101059a4:	1880151e 	bne	r3,r2,101059fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
101059a8:	04040434 	movhi	r16,4112
101059ac:	841b6404 	addi	r16,r16,28048
101059b0:	e0bffd17 	ldw	r2,-12(fp)
101059b4:	01400304 	movi	r5,12
101059b8:	1009883a 	mov	r4,r2
101059bc:	0100be80 	call	10100be8 <__mulsi3>
101059c0:	8085883a 	add	r2,r16,r2
101059c4:	10800204 	addi	r2,r2,8
101059c8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
101059cc:	10000b0e 	bge	r2,zero,101059fc <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
101059d0:	01400304 	movi	r5,12
101059d4:	e13ffd17 	ldw	r4,-12(fp)
101059d8:	0100be80 	call	10100be8 <__mulsi3>
101059dc:	1007883a 	mov	r3,r2
101059e0:	00840434 	movhi	r2,4112
101059e4:	109b6404 	addi	r2,r2,28048
101059e8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
101059ec:	e0bffe17 	ldw	r2,-8(fp)
101059f0:	18800226 	beq	r3,r2,101059fc <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
101059f4:	00bffcc4 	movi	r2,-13
101059f8:	00000806 	br	10105a1c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
101059fc:	e0bffd17 	ldw	r2,-12(fp)
10105a00:	10800044 	addi	r2,r2,1
10105a04:	e0bffd15 	stw	r2,-12(fp)
10105a08:	d0a00817 	ldw	r2,-32736(gp)
10105a0c:	1007883a 	mov	r3,r2
10105a10:	e0bffd17 	ldw	r2,-12(fp)
10105a14:	18bfd92e 	bgeu	r3,r2,1010597c <__alt_data_end+0xfffe597c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10105a18:	0005883a 	mov	r2,zero
}
10105a1c:	e6ffff04 	addi	sp,fp,-4
10105a20:	dfc00217 	ldw	ra,8(sp)
10105a24:	df000117 	ldw	fp,4(sp)
10105a28:	dc000017 	ldw	r16,0(sp)
10105a2c:	dec00304 	addi	sp,sp,12
10105a30:	f800283a 	ret

10105a34 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10105a34:	defff604 	addi	sp,sp,-40
10105a38:	dfc00915 	stw	ra,36(sp)
10105a3c:	df000815 	stw	fp,32(sp)
10105a40:	df000804 	addi	fp,sp,32
10105a44:	e13ffd15 	stw	r4,-12(fp)
10105a48:	e17ffe15 	stw	r5,-8(fp)
10105a4c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10105a50:	00bfffc4 	movi	r2,-1
10105a54:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10105a58:	00bffb44 	movi	r2,-19
10105a5c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10105a60:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10105a64:	d1600604 	addi	r5,gp,-32744
10105a68:	e13ffd17 	ldw	r4,-12(fp)
10105a6c:	0105d580 	call	10105d58 <alt_find_dev>
10105a70:	e0bff815 	stw	r2,-32(fp)
10105a74:	e0bff817 	ldw	r2,-32(fp)
10105a78:	1000051e 	bne	r2,zero,10105a90 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10105a7c:	e13ffd17 	ldw	r4,-12(fp)
10105a80:	0105de80 	call	10105de8 <alt_find_file>
10105a84:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10105a88:	00800044 	movi	r2,1
10105a8c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10105a90:	e0bff817 	ldw	r2,-32(fp)
10105a94:	10002b26 	beq	r2,zero,10105b44 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10105a98:	e13ff817 	ldw	r4,-32(fp)
10105a9c:	0105ef00 	call	10105ef0 <alt_get_fd>
10105aa0:	e0bff915 	stw	r2,-28(fp)
10105aa4:	e0bff917 	ldw	r2,-28(fp)
10105aa8:	1000030e 	bge	r2,zero,10105ab8 <open+0x84>
    {
      status = index;
10105aac:	e0bff917 	ldw	r2,-28(fp)
10105ab0:	e0bffa15 	stw	r2,-24(fp)
10105ab4:	00002506 	br	10105b4c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10105ab8:	01400304 	movi	r5,12
10105abc:	e13ff917 	ldw	r4,-28(fp)
10105ac0:	0100be80 	call	10100be8 <__mulsi3>
10105ac4:	1007883a 	mov	r3,r2
10105ac8:	00840434 	movhi	r2,4112
10105acc:	109b6404 	addi	r2,r2,28048
10105ad0:	1885883a 	add	r2,r3,r2
10105ad4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10105ad8:	e0fffe17 	ldw	r3,-8(fp)
10105adc:	00900034 	movhi	r2,16384
10105ae0:	10bfffc4 	addi	r2,r2,-1
10105ae4:	1886703a 	and	r3,r3,r2
10105ae8:	e0bffc17 	ldw	r2,-16(fp)
10105aec:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10105af0:	e0bffb17 	ldw	r2,-20(fp)
10105af4:	1000051e 	bne	r2,zero,10105b0c <open+0xd8>
10105af8:	e13ffc17 	ldw	r4,-16(fp)
10105afc:	01059480 	call	10105948 <alt_file_locked>
10105b00:	e0bffa15 	stw	r2,-24(fp)
10105b04:	e0bffa17 	ldw	r2,-24(fp)
10105b08:	10001016 	blt	r2,zero,10105b4c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10105b0c:	e0bff817 	ldw	r2,-32(fp)
10105b10:	10800317 	ldw	r2,12(r2)
10105b14:	10000826 	beq	r2,zero,10105b38 <open+0x104>
10105b18:	e0bff817 	ldw	r2,-32(fp)
10105b1c:	10800317 	ldw	r2,12(r2)
10105b20:	e1ffff17 	ldw	r7,-4(fp)
10105b24:	e1bffe17 	ldw	r6,-8(fp)
10105b28:	e17ffd17 	ldw	r5,-12(fp)
10105b2c:	e13ffc17 	ldw	r4,-16(fp)
10105b30:	103ee83a 	callr	r2
10105b34:	00000106 	br	10105b3c <open+0x108>
10105b38:	0005883a 	mov	r2,zero
10105b3c:	e0bffa15 	stw	r2,-24(fp)
10105b40:	00000206 	br	10105b4c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
10105b44:	00bffb44 	movi	r2,-19
10105b48:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10105b4c:	e0bffa17 	ldw	r2,-24(fp)
10105b50:	1000090e 	bge	r2,zero,10105b78 <open+0x144>
  {
    alt_release_fd (index);  
10105b54:	e13ff917 	ldw	r4,-28(fp)
10105b58:	0103f640 	call	10103f64 <alt_release_fd>
    ALT_ERRNO = -status;
10105b5c:	010590c0 	call	1010590c <alt_get_errno>
10105b60:	1007883a 	mov	r3,r2
10105b64:	e0bffa17 	ldw	r2,-24(fp)
10105b68:	0085c83a 	sub	r2,zero,r2
10105b6c:	18800015 	stw	r2,0(r3)
    return -1;
10105b70:	00bfffc4 	movi	r2,-1
10105b74:	00000106 	br	10105b7c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
10105b78:	e0bff917 	ldw	r2,-28(fp)
}
10105b7c:	e037883a 	mov	sp,fp
10105b80:	dfc00117 	ldw	ra,4(sp)
10105b84:	df000017 	ldw	fp,0(sp)
10105b88:	dec00204 	addi	sp,sp,8
10105b8c:	f800283a 	ret

10105b90 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10105b90:	defffa04 	addi	sp,sp,-24
10105b94:	df000515 	stw	fp,20(sp)
10105b98:	df000504 	addi	fp,sp,20
10105b9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10105ba0:	0005303a 	rdctl	r2,status
10105ba4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10105ba8:	e0fffc17 	ldw	r3,-16(fp)
10105bac:	00bfff84 	movi	r2,-2
10105bb0:	1884703a 	and	r2,r3,r2
10105bb4:	1001703a 	wrctl	status,r2
  
  return context;
10105bb8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10105bbc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10105bc0:	e0bfff17 	ldw	r2,-4(fp)
10105bc4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10105bc8:	e0bffd17 	ldw	r2,-12(fp)
10105bcc:	10800017 	ldw	r2,0(r2)
10105bd0:	e0fffd17 	ldw	r3,-12(fp)
10105bd4:	18c00117 	ldw	r3,4(r3)
10105bd8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10105bdc:	e0bffd17 	ldw	r2,-12(fp)
10105be0:	10800117 	ldw	r2,4(r2)
10105be4:	e0fffd17 	ldw	r3,-12(fp)
10105be8:	18c00017 	ldw	r3,0(r3)
10105bec:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10105bf0:	e0bffd17 	ldw	r2,-12(fp)
10105bf4:	e0fffd17 	ldw	r3,-12(fp)
10105bf8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10105bfc:	e0bffd17 	ldw	r2,-12(fp)
10105c00:	e0fffd17 	ldw	r3,-12(fp)
10105c04:	10c00015 	stw	r3,0(r2)
10105c08:	e0bffb17 	ldw	r2,-20(fp)
10105c0c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10105c10:	e0bffe17 	ldw	r2,-8(fp)
10105c14:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10105c18:	0001883a 	nop
10105c1c:	e037883a 	mov	sp,fp
10105c20:	df000017 	ldw	fp,0(sp)
10105c24:	dec00104 	addi	sp,sp,4
10105c28:	f800283a 	ret

10105c2c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10105c2c:	defffb04 	addi	sp,sp,-20
10105c30:	dfc00415 	stw	ra,16(sp)
10105c34:	df000315 	stw	fp,12(sp)
10105c38:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10105c3c:	d0a01e17 	ldw	r2,-32648(gp)
10105c40:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10105c44:	d0a6e017 	ldw	r2,-25728(gp)
10105c48:	10800044 	addi	r2,r2,1
10105c4c:	d0a6e015 	stw	r2,-25728(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10105c50:	00002e06 	br	10105d0c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10105c54:	e0bffd17 	ldw	r2,-12(fp)
10105c58:	10800017 	ldw	r2,0(r2)
10105c5c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10105c60:	e0bffd17 	ldw	r2,-12(fp)
10105c64:	10800403 	ldbu	r2,16(r2)
10105c68:	10803fcc 	andi	r2,r2,255
10105c6c:	10000426 	beq	r2,zero,10105c80 <alt_tick+0x54>
10105c70:	d0a6e017 	ldw	r2,-25728(gp)
10105c74:	1000021e 	bne	r2,zero,10105c80 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10105c78:	e0bffd17 	ldw	r2,-12(fp)
10105c7c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10105c80:	e0bffd17 	ldw	r2,-12(fp)
10105c84:	10800217 	ldw	r2,8(r2)
10105c88:	d0e6e017 	ldw	r3,-25728(gp)
10105c8c:	18801d36 	bltu	r3,r2,10105d04 <alt_tick+0xd8>
10105c90:	e0bffd17 	ldw	r2,-12(fp)
10105c94:	10800403 	ldbu	r2,16(r2)
10105c98:	10803fcc 	andi	r2,r2,255
10105c9c:	1000191e 	bne	r2,zero,10105d04 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10105ca0:	e0bffd17 	ldw	r2,-12(fp)
10105ca4:	10800317 	ldw	r2,12(r2)
10105ca8:	e0fffd17 	ldw	r3,-12(fp)
10105cac:	18c00517 	ldw	r3,20(r3)
10105cb0:	1809883a 	mov	r4,r3
10105cb4:	103ee83a 	callr	r2
10105cb8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10105cbc:	e0bfff17 	ldw	r2,-4(fp)
10105cc0:	1000031e 	bne	r2,zero,10105cd0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10105cc4:	e13ffd17 	ldw	r4,-12(fp)
10105cc8:	0105b900 	call	10105b90 <alt_alarm_stop>
10105ccc:	00000d06 	br	10105d04 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10105cd0:	e0bffd17 	ldw	r2,-12(fp)
10105cd4:	10c00217 	ldw	r3,8(r2)
10105cd8:	e0bfff17 	ldw	r2,-4(fp)
10105cdc:	1887883a 	add	r3,r3,r2
10105ce0:	e0bffd17 	ldw	r2,-12(fp)
10105ce4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10105ce8:	e0bffd17 	ldw	r2,-12(fp)
10105cec:	10c00217 	ldw	r3,8(r2)
10105cf0:	d0a6e017 	ldw	r2,-25728(gp)
10105cf4:	1880032e 	bgeu	r3,r2,10105d04 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10105cf8:	e0bffd17 	ldw	r2,-12(fp)
10105cfc:	00c00044 	movi	r3,1
10105d00:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10105d04:	e0bffe17 	ldw	r2,-8(fp)
10105d08:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10105d0c:	e0fffd17 	ldw	r3,-12(fp)
10105d10:	d0a01e04 	addi	r2,gp,-32648
10105d14:	18bfcf1e 	bne	r3,r2,10105c54 <__alt_data_end+0xfffe5c54>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10105d18:	0001883a 	nop
}
10105d1c:	0001883a 	nop
10105d20:	e037883a 	mov	sp,fp
10105d24:	dfc00117 	ldw	ra,4(sp)
10105d28:	df000017 	ldw	fp,0(sp)
10105d2c:	dec00204 	addi	sp,sp,8
10105d30:	f800283a 	ret

10105d34 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10105d34:	deffff04 	addi	sp,sp,-4
10105d38:	df000015 	stw	fp,0(sp)
10105d3c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10105d40:	000170fa 	wrctl	ienable,zero
}
10105d44:	0001883a 	nop
10105d48:	e037883a 	mov	sp,fp
10105d4c:	df000017 	ldw	fp,0(sp)
10105d50:	dec00104 	addi	sp,sp,4
10105d54:	f800283a 	ret

10105d58 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10105d58:	defffa04 	addi	sp,sp,-24
10105d5c:	dfc00515 	stw	ra,20(sp)
10105d60:	df000415 	stw	fp,16(sp)
10105d64:	df000404 	addi	fp,sp,16
10105d68:	e13ffe15 	stw	r4,-8(fp)
10105d6c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10105d70:	e0bfff17 	ldw	r2,-4(fp)
10105d74:	10800017 	ldw	r2,0(r2)
10105d78:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10105d7c:	e13ffe17 	ldw	r4,-8(fp)
10105d80:	0100e2c0 	call	10100e2c <strlen>
10105d84:	10800044 	addi	r2,r2,1
10105d88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10105d8c:	00000d06 	br	10105dc4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10105d90:	e0bffc17 	ldw	r2,-16(fp)
10105d94:	10800217 	ldw	r2,8(r2)
10105d98:	e0fffd17 	ldw	r3,-12(fp)
10105d9c:	180d883a 	mov	r6,r3
10105da0:	e17ffe17 	ldw	r5,-8(fp)
10105da4:	1009883a 	mov	r4,r2
10105da8:	010609c0 	call	1010609c <memcmp>
10105dac:	1000021e 	bne	r2,zero,10105db8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10105db0:	e0bffc17 	ldw	r2,-16(fp)
10105db4:	00000706 	br	10105dd4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10105db8:	e0bffc17 	ldw	r2,-16(fp)
10105dbc:	10800017 	ldw	r2,0(r2)
10105dc0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10105dc4:	e0fffc17 	ldw	r3,-16(fp)
10105dc8:	e0bfff17 	ldw	r2,-4(fp)
10105dcc:	18bff01e 	bne	r3,r2,10105d90 <__alt_data_end+0xfffe5d90>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10105dd0:	0005883a 	mov	r2,zero
}
10105dd4:	e037883a 	mov	sp,fp
10105dd8:	dfc00117 	ldw	ra,4(sp)
10105ddc:	df000017 	ldw	fp,0(sp)
10105de0:	dec00204 	addi	sp,sp,8
10105de4:	f800283a 	ret

10105de8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10105de8:	defffb04 	addi	sp,sp,-20
10105dec:	dfc00415 	stw	ra,16(sp)
10105df0:	df000315 	stw	fp,12(sp)
10105df4:	df000304 	addi	fp,sp,12
10105df8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10105dfc:	d0a00417 	ldw	r2,-32752(gp)
10105e00:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10105e04:	00003106 	br	10105ecc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
10105e08:	e0bffd17 	ldw	r2,-12(fp)
10105e0c:	10800217 	ldw	r2,8(r2)
10105e10:	1009883a 	mov	r4,r2
10105e14:	0100e2c0 	call	10100e2c <strlen>
10105e18:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10105e1c:	e0bffd17 	ldw	r2,-12(fp)
10105e20:	10c00217 	ldw	r3,8(r2)
10105e24:	e0bffe17 	ldw	r2,-8(fp)
10105e28:	10bfffc4 	addi	r2,r2,-1
10105e2c:	1885883a 	add	r2,r3,r2
10105e30:	10800003 	ldbu	r2,0(r2)
10105e34:	10803fcc 	andi	r2,r2,255
10105e38:	1080201c 	xori	r2,r2,128
10105e3c:	10bfe004 	addi	r2,r2,-128
10105e40:	10800bd8 	cmpnei	r2,r2,47
10105e44:	1000031e 	bne	r2,zero,10105e54 <alt_find_file+0x6c>
    {
      len -= 1;
10105e48:	e0bffe17 	ldw	r2,-8(fp)
10105e4c:	10bfffc4 	addi	r2,r2,-1
10105e50:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10105e54:	e0bffe17 	ldw	r2,-8(fp)
10105e58:	e0ffff17 	ldw	r3,-4(fp)
10105e5c:	1885883a 	add	r2,r3,r2
10105e60:	10800003 	ldbu	r2,0(r2)
10105e64:	10803fcc 	andi	r2,r2,255
10105e68:	1080201c 	xori	r2,r2,128
10105e6c:	10bfe004 	addi	r2,r2,-128
10105e70:	10800be0 	cmpeqi	r2,r2,47
10105e74:	1000081e 	bne	r2,zero,10105e98 <alt_find_file+0xb0>
10105e78:	e0bffe17 	ldw	r2,-8(fp)
10105e7c:	e0ffff17 	ldw	r3,-4(fp)
10105e80:	1885883a 	add	r2,r3,r2
10105e84:	10800003 	ldbu	r2,0(r2)
10105e88:	10803fcc 	andi	r2,r2,255
10105e8c:	1080201c 	xori	r2,r2,128
10105e90:	10bfe004 	addi	r2,r2,-128
10105e94:	10000a1e 	bne	r2,zero,10105ec0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10105e98:	e0bffd17 	ldw	r2,-12(fp)
10105e9c:	10800217 	ldw	r2,8(r2)
10105ea0:	e0fffe17 	ldw	r3,-8(fp)
10105ea4:	180d883a 	mov	r6,r3
10105ea8:	e17fff17 	ldw	r5,-4(fp)
10105eac:	1009883a 	mov	r4,r2
10105eb0:	010609c0 	call	1010609c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10105eb4:	1000021e 	bne	r2,zero,10105ec0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10105eb8:	e0bffd17 	ldw	r2,-12(fp)
10105ebc:	00000706 	br	10105edc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10105ec0:	e0bffd17 	ldw	r2,-12(fp)
10105ec4:	10800017 	ldw	r2,0(r2)
10105ec8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10105ecc:	e0fffd17 	ldw	r3,-12(fp)
10105ed0:	d0a00404 	addi	r2,gp,-32752
10105ed4:	18bfcc1e 	bne	r3,r2,10105e08 <__alt_data_end+0xfffe5e08>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10105ed8:	0005883a 	mov	r2,zero
}
10105edc:	e037883a 	mov	sp,fp
10105ee0:	dfc00117 	ldw	ra,4(sp)
10105ee4:	df000017 	ldw	fp,0(sp)
10105ee8:	dec00204 	addi	sp,sp,8
10105eec:	f800283a 	ret

10105ef0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10105ef0:	defffa04 	addi	sp,sp,-24
10105ef4:	dfc00515 	stw	ra,20(sp)
10105ef8:	df000415 	stw	fp,16(sp)
10105efc:	dc000315 	stw	r16,12(sp)
10105f00:	df000404 	addi	fp,sp,16
10105f04:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10105f08:	00bffa04 	movi	r2,-24
10105f0c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10105f10:	e03ffc15 	stw	zero,-16(fp)
10105f14:	00001d06 	br	10105f8c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10105f18:	04040434 	movhi	r16,4112
10105f1c:	841b6404 	addi	r16,r16,28048
10105f20:	e0bffc17 	ldw	r2,-16(fp)
10105f24:	01400304 	movi	r5,12
10105f28:	1009883a 	mov	r4,r2
10105f2c:	0100be80 	call	10100be8 <__mulsi3>
10105f30:	8085883a 	add	r2,r16,r2
10105f34:	10800017 	ldw	r2,0(r2)
10105f38:	1000111e 	bne	r2,zero,10105f80 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10105f3c:	04040434 	movhi	r16,4112
10105f40:	841b6404 	addi	r16,r16,28048
10105f44:	e0bffc17 	ldw	r2,-16(fp)
10105f48:	01400304 	movi	r5,12
10105f4c:	1009883a 	mov	r4,r2
10105f50:	0100be80 	call	10100be8 <__mulsi3>
10105f54:	8085883a 	add	r2,r16,r2
10105f58:	e0fffe17 	ldw	r3,-8(fp)
10105f5c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10105f60:	d0e00817 	ldw	r3,-32736(gp)
10105f64:	e0bffc17 	ldw	r2,-16(fp)
10105f68:	1880020e 	bge	r3,r2,10105f74 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10105f6c:	e0bffc17 	ldw	r2,-16(fp)
10105f70:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
10105f74:	e0bffc17 	ldw	r2,-16(fp)
10105f78:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10105f7c:	00000606 	br	10105f98 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10105f80:	e0bffc17 	ldw	r2,-16(fp)
10105f84:	10800044 	addi	r2,r2,1
10105f88:	e0bffc15 	stw	r2,-16(fp)
10105f8c:	e0bffc17 	ldw	r2,-16(fp)
10105f90:	10800810 	cmplti	r2,r2,32
10105f94:	103fe01e 	bne	r2,zero,10105f18 <__alt_data_end+0xfffe5f18>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10105f98:	e0bffd17 	ldw	r2,-12(fp)
}
10105f9c:	e6ffff04 	addi	sp,fp,-4
10105fa0:	dfc00217 	ldw	ra,8(sp)
10105fa4:	df000117 	ldw	fp,4(sp)
10105fa8:	dc000017 	ldw	r16,0(sp)
10105fac:	dec00304 	addi	sp,sp,12
10105fb0:	f800283a 	ret

10105fb4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10105fb4:	defffe04 	addi	sp,sp,-8
10105fb8:	df000115 	stw	fp,4(sp)
10105fbc:	df000104 	addi	fp,sp,4
10105fc0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10105fc4:	e0bfff17 	ldw	r2,-4(fp)
10105fc8:	10bffe84 	addi	r2,r2,-6
10105fcc:	10c00428 	cmpgeui	r3,r2,16
10105fd0:	18001a1e 	bne	r3,zero,1010603c <alt_exception_cause_generated_bad_addr+0x88>
10105fd4:	100690ba 	slli	r3,r2,2
10105fd8:	00840434 	movhi	r2,4112
10105fdc:	1097fb04 	addi	r2,r2,24556
10105fe0:	1885883a 	add	r2,r3,r2
10105fe4:	10800017 	ldw	r2,0(r2)
10105fe8:	1000683a 	jmp	r2
10105fec:	1010602c 	andhi	zero,r2,16768
10105ff0:	1010602c 	andhi	zero,r2,16768
10105ff4:	1010603c 	xorhi	zero,r2,16768
10105ff8:	1010603c 	xorhi	zero,r2,16768
10105ffc:	1010603c 	xorhi	zero,r2,16768
10106000:	1010602c 	andhi	zero,r2,16768
10106004:	10106034 	orhi	zero,r2,16768
10106008:	1010603c 	xorhi	zero,r2,16768
1010600c:	1010602c 	andhi	zero,r2,16768
10106010:	1010602c 	andhi	zero,r2,16768
10106014:	1010603c 	xorhi	zero,r2,16768
10106018:	1010602c 	andhi	zero,r2,16768
1010601c:	10106034 	orhi	zero,r2,16768
10106020:	1010603c 	xorhi	zero,r2,16768
10106024:	1010603c 	xorhi	zero,r2,16768
10106028:	1010602c 	andhi	zero,r2,16768
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
1010602c:	00800044 	movi	r2,1
10106030:	00000306 	br	10106040 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10106034:	0005883a 	mov	r2,zero
10106038:	00000106 	br	10106040 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
1010603c:	0005883a 	mov	r2,zero
  }
}
10106040:	e037883a 	mov	sp,fp
10106044:	df000017 	ldw	fp,0(sp)
10106048:	dec00104 	addi	sp,sp,4
1010604c:	f800283a 	ret

10106050 <atexit>:
10106050:	200b883a 	mov	r5,r4
10106054:	000f883a 	mov	r7,zero
10106058:	000d883a 	mov	r6,zero
1010605c:	0009883a 	mov	r4,zero
10106060:	01061181 	jmpi	10106118 <__register_exitproc>

10106064 <exit>:
10106064:	defffe04 	addi	sp,sp,-8
10106068:	000b883a 	mov	r5,zero
1010606c:	dc000015 	stw	r16,0(sp)
10106070:	dfc00115 	stw	ra,4(sp)
10106074:	2021883a 	mov	r16,r4
10106078:	01062300 	call	10106230 <__call_exitprocs>
1010607c:	00840434 	movhi	r2,4112
10106080:	109fe604 	addi	r2,r2,32664
10106084:	11000017 	ldw	r4,0(r2)
10106088:	20800f17 	ldw	r2,60(r4)
1010608c:	10000126 	beq	r2,zero,10106094 <exit+0x30>
10106090:	103ee83a 	callr	r2
10106094:	8009883a 	mov	r4,r16
10106098:	01063b00 	call	101063b0 <_exit>

1010609c <memcmp>:
1010609c:	01c000c4 	movi	r7,3
101060a0:	3980192e 	bgeu	r7,r6,10106108 <memcmp+0x6c>
101060a4:	2144b03a 	or	r2,r4,r5
101060a8:	11c4703a 	and	r2,r2,r7
101060ac:	10000f26 	beq	r2,zero,101060ec <memcmp+0x50>
101060b0:	20800003 	ldbu	r2,0(r4)
101060b4:	28c00003 	ldbu	r3,0(r5)
101060b8:	10c0151e 	bne	r2,r3,10106110 <memcmp+0x74>
101060bc:	31bfff84 	addi	r6,r6,-2
101060c0:	01ffffc4 	movi	r7,-1
101060c4:	00000406 	br	101060d8 <memcmp+0x3c>
101060c8:	20800003 	ldbu	r2,0(r4)
101060cc:	28c00003 	ldbu	r3,0(r5)
101060d0:	31bfffc4 	addi	r6,r6,-1
101060d4:	10c00e1e 	bne	r2,r3,10106110 <memcmp+0x74>
101060d8:	21000044 	addi	r4,r4,1
101060dc:	29400044 	addi	r5,r5,1
101060e0:	31fff91e 	bne	r6,r7,101060c8 <__alt_data_end+0xfffe60c8>
101060e4:	0005883a 	mov	r2,zero
101060e8:	f800283a 	ret
101060ec:	20c00017 	ldw	r3,0(r4)
101060f0:	28800017 	ldw	r2,0(r5)
101060f4:	18bfee1e 	bne	r3,r2,101060b0 <__alt_data_end+0xfffe60b0>
101060f8:	31bfff04 	addi	r6,r6,-4
101060fc:	21000104 	addi	r4,r4,4
10106100:	29400104 	addi	r5,r5,4
10106104:	39bff936 	bltu	r7,r6,101060ec <__alt_data_end+0xfffe60ec>
10106108:	303fe91e 	bne	r6,zero,101060b0 <__alt_data_end+0xfffe60b0>
1010610c:	003ff506 	br	101060e4 <__alt_data_end+0xfffe60e4>
10106110:	10c5c83a 	sub	r2,r2,r3
10106114:	f800283a 	ret

10106118 <__register_exitproc>:
10106118:	defffa04 	addi	sp,sp,-24
1010611c:	dc000315 	stw	r16,12(sp)
10106120:	04040434 	movhi	r16,4112
10106124:	841fe604 	addi	r16,r16,32664
10106128:	80c00017 	ldw	r3,0(r16)
1010612c:	dc400415 	stw	r17,16(sp)
10106130:	dfc00515 	stw	ra,20(sp)
10106134:	18805217 	ldw	r2,328(r3)
10106138:	2023883a 	mov	r17,r4
1010613c:	10003726 	beq	r2,zero,1010621c <__register_exitproc+0x104>
10106140:	10c00117 	ldw	r3,4(r2)
10106144:	010007c4 	movi	r4,31
10106148:	20c00e16 	blt	r4,r3,10106184 <__register_exitproc+0x6c>
1010614c:	1a000044 	addi	r8,r3,1
10106150:	8800221e 	bne	r17,zero,101061dc <__register_exitproc+0xc4>
10106154:	18c00084 	addi	r3,r3,2
10106158:	18c7883a 	add	r3,r3,r3
1010615c:	18c7883a 	add	r3,r3,r3
10106160:	12000115 	stw	r8,4(r2)
10106164:	10c7883a 	add	r3,r2,r3
10106168:	19400015 	stw	r5,0(r3)
1010616c:	0005883a 	mov	r2,zero
10106170:	dfc00517 	ldw	ra,20(sp)
10106174:	dc400417 	ldw	r17,16(sp)
10106178:	dc000317 	ldw	r16,12(sp)
1010617c:	dec00604 	addi	sp,sp,24
10106180:	f800283a 	ret
10106184:	00800034 	movhi	r2,0
10106188:	10800004 	addi	r2,r2,0
1010618c:	10002626 	beq	r2,zero,10106228 <__register_exitproc+0x110>
10106190:	01006404 	movi	r4,400
10106194:	d9400015 	stw	r5,0(sp)
10106198:	d9800115 	stw	r6,4(sp)
1010619c:	d9c00215 	stw	r7,8(sp)
101061a0:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
101061a4:	d9400017 	ldw	r5,0(sp)
101061a8:	d9800117 	ldw	r6,4(sp)
101061ac:	d9c00217 	ldw	r7,8(sp)
101061b0:	10001d26 	beq	r2,zero,10106228 <__register_exitproc+0x110>
101061b4:	81000017 	ldw	r4,0(r16)
101061b8:	10000115 	stw	zero,4(r2)
101061bc:	02000044 	movi	r8,1
101061c0:	22405217 	ldw	r9,328(r4)
101061c4:	0007883a 	mov	r3,zero
101061c8:	12400015 	stw	r9,0(r2)
101061cc:	20805215 	stw	r2,328(r4)
101061d0:	10006215 	stw	zero,392(r2)
101061d4:	10006315 	stw	zero,396(r2)
101061d8:	883fde26 	beq	r17,zero,10106154 <__alt_data_end+0xfffe6154>
101061dc:	18c9883a 	add	r4,r3,r3
101061e0:	2109883a 	add	r4,r4,r4
101061e4:	1109883a 	add	r4,r2,r4
101061e8:	21802215 	stw	r6,136(r4)
101061ec:	01800044 	movi	r6,1
101061f0:	12406217 	ldw	r9,392(r2)
101061f4:	30cc983a 	sll	r6,r6,r3
101061f8:	4992b03a 	or	r9,r9,r6
101061fc:	12406215 	stw	r9,392(r2)
10106200:	21c04215 	stw	r7,264(r4)
10106204:	01000084 	movi	r4,2
10106208:	893fd21e 	bne	r17,r4,10106154 <__alt_data_end+0xfffe6154>
1010620c:	11006317 	ldw	r4,396(r2)
10106210:	218cb03a 	or	r6,r4,r6
10106214:	11806315 	stw	r6,396(r2)
10106218:	003fce06 	br	10106154 <__alt_data_end+0xfffe6154>
1010621c:	18805304 	addi	r2,r3,332
10106220:	18805215 	stw	r2,328(r3)
10106224:	003fc606 	br	10106140 <__alt_data_end+0xfffe6140>
10106228:	00bfffc4 	movi	r2,-1
1010622c:	003fd006 	br	10106170 <__alt_data_end+0xfffe6170>

10106230 <__call_exitprocs>:
10106230:	defff504 	addi	sp,sp,-44
10106234:	df000915 	stw	fp,36(sp)
10106238:	dd400615 	stw	r21,24(sp)
1010623c:	dc800315 	stw	r18,12(sp)
10106240:	dfc00a15 	stw	ra,40(sp)
10106244:	ddc00815 	stw	r23,32(sp)
10106248:	dd800715 	stw	r22,28(sp)
1010624c:	dd000515 	stw	r20,20(sp)
10106250:	dcc00415 	stw	r19,16(sp)
10106254:	dc400215 	stw	r17,8(sp)
10106258:	dc000115 	stw	r16,4(sp)
1010625c:	d9000015 	stw	r4,0(sp)
10106260:	2839883a 	mov	fp,r5
10106264:	04800044 	movi	r18,1
10106268:	057fffc4 	movi	r21,-1
1010626c:	00840434 	movhi	r2,4112
10106270:	109fe604 	addi	r2,r2,32664
10106274:	12000017 	ldw	r8,0(r2)
10106278:	45005217 	ldw	r20,328(r8)
1010627c:	44c05204 	addi	r19,r8,328
10106280:	a0001c26 	beq	r20,zero,101062f4 <__call_exitprocs+0xc4>
10106284:	a0800117 	ldw	r2,4(r20)
10106288:	15ffffc4 	addi	r23,r2,-1
1010628c:	b8000d16 	blt	r23,zero,101062c4 <__call_exitprocs+0x94>
10106290:	14000044 	addi	r16,r2,1
10106294:	8421883a 	add	r16,r16,r16
10106298:	8421883a 	add	r16,r16,r16
1010629c:	84402004 	addi	r17,r16,128
101062a0:	a463883a 	add	r17,r20,r17
101062a4:	a421883a 	add	r16,r20,r16
101062a8:	e0001e26 	beq	fp,zero,10106324 <__call_exitprocs+0xf4>
101062ac:	80804017 	ldw	r2,256(r16)
101062b0:	e0801c26 	beq	fp,r2,10106324 <__call_exitprocs+0xf4>
101062b4:	bdffffc4 	addi	r23,r23,-1
101062b8:	843fff04 	addi	r16,r16,-4
101062bc:	8c7fff04 	addi	r17,r17,-4
101062c0:	bd7ff91e 	bne	r23,r21,101062a8 <__alt_data_end+0xfffe62a8>
101062c4:	00800034 	movhi	r2,0
101062c8:	10800004 	addi	r2,r2,0
101062cc:	10000926 	beq	r2,zero,101062f4 <__call_exitprocs+0xc4>
101062d0:	a0800117 	ldw	r2,4(r20)
101062d4:	1000301e 	bne	r2,zero,10106398 <__call_exitprocs+0x168>
101062d8:	a0800017 	ldw	r2,0(r20)
101062dc:	10003226 	beq	r2,zero,101063a8 <__call_exitprocs+0x178>
101062e0:	a009883a 	mov	r4,r20
101062e4:	98800015 	stw	r2,0(r19)
101062e8:	00000000 	call	10000000 <__alt_mem_onchip_memory2_0-0x100000>
101062ec:	9d000017 	ldw	r20,0(r19)
101062f0:	a03fe41e 	bne	r20,zero,10106284 <__alt_data_end+0xfffe6284>
101062f4:	dfc00a17 	ldw	ra,40(sp)
101062f8:	df000917 	ldw	fp,36(sp)
101062fc:	ddc00817 	ldw	r23,32(sp)
10106300:	dd800717 	ldw	r22,28(sp)
10106304:	dd400617 	ldw	r21,24(sp)
10106308:	dd000517 	ldw	r20,20(sp)
1010630c:	dcc00417 	ldw	r19,16(sp)
10106310:	dc800317 	ldw	r18,12(sp)
10106314:	dc400217 	ldw	r17,8(sp)
10106318:	dc000117 	ldw	r16,4(sp)
1010631c:	dec00b04 	addi	sp,sp,44
10106320:	f800283a 	ret
10106324:	a0800117 	ldw	r2,4(r20)
10106328:	80c00017 	ldw	r3,0(r16)
1010632c:	10bfffc4 	addi	r2,r2,-1
10106330:	15c01426 	beq	r2,r23,10106384 <__call_exitprocs+0x154>
10106334:	80000015 	stw	zero,0(r16)
10106338:	183fde26 	beq	r3,zero,101062b4 <__alt_data_end+0xfffe62b4>
1010633c:	95c8983a 	sll	r4,r18,r23
10106340:	a0806217 	ldw	r2,392(r20)
10106344:	a5800117 	ldw	r22,4(r20)
10106348:	2084703a 	and	r2,r4,r2
1010634c:	10000b26 	beq	r2,zero,1010637c <__call_exitprocs+0x14c>
10106350:	a0806317 	ldw	r2,396(r20)
10106354:	2088703a 	and	r4,r4,r2
10106358:	20000c1e 	bne	r4,zero,1010638c <__call_exitprocs+0x15c>
1010635c:	89400017 	ldw	r5,0(r17)
10106360:	d9000017 	ldw	r4,0(sp)
10106364:	183ee83a 	callr	r3
10106368:	a0800117 	ldw	r2,4(r20)
1010636c:	15bfbf1e 	bne	r2,r22,1010626c <__alt_data_end+0xfffe626c>
10106370:	98800017 	ldw	r2,0(r19)
10106374:	153fcf26 	beq	r2,r20,101062b4 <__alt_data_end+0xfffe62b4>
10106378:	003fbc06 	br	1010626c <__alt_data_end+0xfffe626c>
1010637c:	183ee83a 	callr	r3
10106380:	003ff906 	br	10106368 <__alt_data_end+0xfffe6368>
10106384:	a5c00115 	stw	r23,4(r20)
10106388:	003feb06 	br	10106338 <__alt_data_end+0xfffe6338>
1010638c:	89000017 	ldw	r4,0(r17)
10106390:	183ee83a 	callr	r3
10106394:	003ff406 	br	10106368 <__alt_data_end+0xfffe6368>
10106398:	a0800017 	ldw	r2,0(r20)
1010639c:	a027883a 	mov	r19,r20
101063a0:	1029883a 	mov	r20,r2
101063a4:	003fb606 	br	10106280 <__alt_data_end+0xfffe6280>
101063a8:	0005883a 	mov	r2,zero
101063ac:	003ffb06 	br	1010639c <__alt_data_end+0xfffe639c>

101063b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
101063b0:	defffd04 	addi	sp,sp,-12
101063b4:	df000215 	stw	fp,8(sp)
101063b8:	df000204 	addi	fp,sp,8
101063bc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
101063c0:	0001883a 	nop
101063c4:	e0bfff17 	ldw	r2,-4(fp)
101063c8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
101063cc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
101063d0:	10000226 	beq	r2,zero,101063dc <_exit+0x2c>
    ALT_SIM_FAIL();
101063d4:	002af070 	cmpltui	zero,zero,43969
101063d8:	00000106 	br	101063e0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
101063dc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
101063e0:	003fff06 	br	101063e0 <__alt_data_end+0xfffe63e0>
