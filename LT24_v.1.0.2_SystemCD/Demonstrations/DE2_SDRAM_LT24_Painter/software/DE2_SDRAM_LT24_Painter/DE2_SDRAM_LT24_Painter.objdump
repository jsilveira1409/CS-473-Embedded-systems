
DE2_SDRAM_LT24_Painter.elf:     file format elf32-littlenios2
DE2_SDRAM_LT24_Painter.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0002e070 memsz 0x0002e070 flags r-x
    LOAD off    0x0002f090 vaddr 0x0402e090 paddr 0x040316a4 align 2**12
         filesz 0x00003614 memsz 0x00003614 flags rw-
    LOAD off    0x00032cb8 vaddr 0x04034cb8 paddr 0x04034cb8 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013b60  040001b4  040001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0001a37c  04013d14  04013d14  00014d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00003614  0402e090  040316a4  0002f090  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  04034cb8  04034cb8  00032cb8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  000326a4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000f18  00000000  00000000  000326d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001e03  00000000  00000000  000335e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002d554  00000000  00000000  000353eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009171  00000000  00000000  0006293f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001a038  00000000  00000000  0006bab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026bc  00000000  00000000  00085ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000028e0  00000000  00000000  000881a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d82e  00000000  00000000  0008aa84  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000982b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009b8  00000000  00000000  00098318  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0009e5a8  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0009e5ab  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0009e5b5  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0009e5b6  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0009e5b7  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0009e5bb  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0009e5bf  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0009e5c3  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0009e5cc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0009e5d5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  0009e5de  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000001e  00000000  00000000  0009e5e7  2**0
                  CONTENTS, READONLY
 29 .jdi          00004d6f  00000000  00000000  0009e605  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000617f6  00000000  00000000  000a3374  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
040001b4 l    d  .text	00000000 .text
04013d14 l    d  .rodata	00000000 .rodata
0402e090 l    d  .rwdata	00000000 .rwdata
04034cb8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
040001fc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tahomabold_20.c
04013d14 l     O .rodata	000000b6 tahomabold_20_33
04013dca l     O .rodata	00000104 tahomabold_20_34
04013ece l     O .rodata	000001a0 tahomabold_20_35
0401406e l     O .rodata	00000152 tahomabold_20_36
040141c0 l     O .rodata	00000270 tahomabold_20_37
04014430 l     O .rodata	000001ba tahomabold_20_38
040145ea l     O .rodata	0000009c tahomabold_20_39
04014686 l     O .rodata	000000ea tahomabold_20_40
04014770 l     O .rodata	000000ea tahomabold_20_41
0401485a l     O .rodata	00000152 tahomabold_20_42
040149ac l     O .rodata	000001a0 tahomabold_20_43
04014b4c l     O .rodata	0000009c tahomabold_20_44
04014be8 l     O .rodata	000000ea tahomabold_20_45
04014cd2 l     O .rodata	0000009c tahomabold_20_46
04014d6e l     O .rodata	00000138 tahomabold_20_47
04014ea6 l     O .rodata	00000152 tahomabold_20_48
04014ff8 l     O .rodata	00000152 tahomabold_20_49
0401514a l     O .rodata	00000152 tahomabold_20_50
0401529c l     O .rodata	00000152 tahomabold_20_51
040153ee l     O .rodata	00000152 tahomabold_20_52
04015540 l     O .rodata	00000152 tahomabold_20_53
04015692 l     O .rodata	00000152 tahomabold_20_54
040157e4 l     O .rodata	00000152 tahomabold_20_55
04015936 l     O .rodata	00000152 tahomabold_20_56
04015a88 l     O .rodata	00000152 tahomabold_20_57
04015bda l     O .rodata	000000b6 tahomabold_20_58
04015c90 l     O .rodata	000000b6 tahomabold_20_59
04015d46 l     O .rodata	000001a0 tahomabold_20_60
04015ee6 l     O .rodata	000001a0 tahomabold_20_61
04016086 l     O .rodata	000001a0 tahomabold_20_62
04016226 l     O .rodata	0000011e tahomabold_20_63
04016344 l     O .rodata	000001d4 tahomabold_20_64
04016518 l     O .rodata	0000016c tahomabold_20_65
04016684 l     O .rodata	0000016c tahomabold_20_66
040167f0 l     O .rodata	00000152 tahomabold_20_67
04016942 l     O .rodata	00000186 tahomabold_20_68
04016ac8 l     O .rodata	00000138 tahomabold_20_69
04016c00 l     O .rodata	00000138 tahomabold_20_70
04016d38 l     O .rodata	00000186 tahomabold_20_71
04016ebe l     O .rodata	00000186 tahomabold_20_72
04017044 l     O .rodata	00000104 tahomabold_20_73
04017148 l     O .rodata	00000104 tahomabold_20_74
0401724c l     O .rodata	0000016c tahomabold_20_75
040173b8 l     O .rodata	0000011e tahomabold_20_76
040174d6 l     O .rodata	000001d4 tahomabold_20_77
040176aa l     O .rodata	00000186 tahomabold_20_78
04017830 l     O .rodata	00000186 tahomabold_20_79
040179b6 l     O .rodata	00000152 tahomabold_20_80
04017b08 l     O .rodata	00000186 tahomabold_20_81
04017c8e l     O .rodata	00000186 tahomabold_20_82
04017e14 l     O .rodata	00000152 tahomabold_20_83
04017f66 l     O .rodata	00000138 tahomabold_20_84
0401809e l     O .rodata	00000186 tahomabold_20_85
04018224 l     O .rodata	0000016c tahomabold_20_86
04018390 l     O .rodata	00000222 tahomabold_20_87
040185b2 l     O .rodata	0000016c tahomabold_20_88
0401871e l     O .rodata	0000016c tahomabold_20_89
0401888a l     O .rodata	00000138 tahomabold_20_90
040189c2 l     O .rodata	000000ea tahomabold_20_91
04018aac l     O .rodata	00000138 tahomabold_20_92
04018be4 l     O .rodata	000000ea tahomabold_20_93
04018cce l     O .rodata	000001a0 tahomabold_20_94
04018e6e l     O .rodata	00000152 tahomabold_20_95
04018fc0 l     O .rodata	0000011e tahomabold_20_96
040190de l     O .rodata	00000138 tahomabold_20_97
04019216 l     O .rodata	00000152 tahomabold_20_98
04019368 l     O .rodata	0000011e tahomabold_20_99
04019486 l     O .rodata	00000152 tahomabold_20_100
040195d8 l     O .rodata	00000138 tahomabold_20_101
04019710 l     O .rodata	000000d0 tahomabold_20_102
040197e0 l     O .rodata	00000152 tahomabold_20_103
04019932 l     O .rodata	00000152 tahomabold_20_104
04019a84 l     O .rodata	0000009c tahomabold_20_105
04019b20 l     O .rodata	000000ea tahomabold_20_106
04019c0a l     O .rodata	00000138 tahomabold_20_107
04019d42 l     O .rodata	0000009c tahomabold_20_108
04019dde l     O .rodata	000001ee tahomabold_20_109
04019fcc l     O .rodata	00000152 tahomabold_20_110
0401a11e l     O .rodata	00000138 tahomabold_20_111
0401a256 l     O .rodata	00000152 tahomabold_20_112
0401a3a8 l     O .rodata	00000152 tahomabold_20_113
0401a4fa l     O .rodata	000000ea tahomabold_20_114
0401a5e4 l     O .rodata	00000104 tahomabold_20_115
0401a6e8 l     O .rodata	000000d0 tahomabold_20_116
0401a7b8 l     O .rodata	00000152 tahomabold_20_117
0401a90a l     O .rodata	00000138 tahomabold_20_118
0401aa42 l     O .rodata	000001d4 tahomabold_20_119
0401ac16 l     O .rodata	00000138 tahomabold_20_120
0401ad4e l     O .rodata	00000138 tahomabold_20_121
0401ae86 l     O .rodata	0000011e tahomabold_20_122
0401afa4 l     O .rodata	00000138 tahomabold_20_123
0401b0dc l     O .rodata	00000152 tahomabold_20_124
0401b22e l     O .rodata	00000138 tahomabold_20_125
0401b366 l     O .rodata	000001a0 tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.c
0401b506 l     O .rodata	000001b8 tahomabold_32_33
0401b6be l     O .rodata	00000280 tahomabold_32_34
0401b93e l     O .rodata	00000410 tahomabold_32_35
0401bd4e l     O .rodata	00000320 tahomabold_32_36
0401c06e l     O .rodata	000005f0 tahomabold_32_37
0401c65e l     O .rodata	00000410 tahomabold_32_38
0401ca6e l     O .rodata	00000168 tahomabold_32_39
0401cbd6 l     O .rodata	00000258 tahomabold_32_40
0401ce2e l     O .rodata	00000258 tahomabold_32_41
0401d086 l     O .rodata	00000320 tahomabold_32_42
0401d3a6 l     O .rodata	00000410 tahomabold_32_43
0401d7b6 l     O .rodata	00000190 tahomabold_32_44
0401d946 l     O .rodata	00000230 tahomabold_32_45
0401db76 l     O .rodata	00000190 tahomabold_32_46
0401dd06 l     O .rodata	000002d0 tahomabold_32_47
0401dfd6 l     O .rodata	00000320 tahomabold_32_48
0401e2f6 l     O .rodata	00000320 tahomabold_32_49
0401e616 l     O .rodata	00000320 tahomabold_32_50
0401e936 l     O .rodata	00000320 tahomabold_32_51
0401ec56 l     O .rodata	00000320 tahomabold_32_52
0401ef76 l     O .rodata	00000320 tahomabold_32_53
0401f296 l     O .rodata	00000320 tahomabold_32_54
0401f5b6 l     O .rodata	00000320 tahomabold_32_55
0401f8d6 l     O .rodata	00000320 tahomabold_32_56
0401fbf6 l     O .rodata	00000320 tahomabold_32_57
0401ff16 l     O .rodata	000001e0 tahomabold_32_58
040200f6 l     O .rodata	000001e0 tahomabold_32_59
040202d6 l     O .rodata	00000410 tahomabold_32_60
040206e6 l     O .rodata	00000410 tahomabold_32_61
04020af6 l     O .rodata	00000410 tahomabold_32_62
04020f06 l     O .rodata	000002d0 tahomabold_32_63
040211d6 l     O .rodata	00000488 tahomabold_32_64
0402165e l     O .rodata	00000370 tahomabold_32_65
040219ce l     O .rodata	00000370 tahomabold_32_66
04021d3e l     O .rodata	00000348 tahomabold_32_67
04022086 l     O .rodata	000003c0 tahomabold_32_68
04022446 l     O .rodata	00000320 tahomabold_32_69
04022766 l     O .rodata	000002f8 tahomabold_32_70
04022a5e l     O .rodata	000003c0 tahomabold_32_71
04022e1e l     O .rodata	000003c0 tahomabold_32_72
040231de l     O .rodata	00000258 tahomabold_32_73
04023436 l     O .rodata	00000280 tahomabold_32_74
040236b6 l     O .rodata	00000398 tahomabold_32_75
04023a4e l     O .rodata	000002d0 tahomabold_32_76
04023d1e l     O .rodata	00000488 tahomabold_32_77
040241a6 l     O .rodata	000003e8 tahomabold_32_78
0402458e l     O .rodata	000003e8 tahomabold_32_79
04024976 l     O .rodata	00000348 tahomabold_32_80
04024cbe l     O .rodata	000003e8 tahomabold_32_81
040250a6 l     O .rodata	000003c0 tahomabold_32_82
04025466 l     O .rodata	00000320 tahomabold_32_83
04025786 l     O .rodata	00000320 tahomabold_32_84
04025aa6 l     O .rodata	000003c0 tahomabold_32_85
04025e66 l     O .rodata	00000370 tahomabold_32_86
040261d6 l     O .rodata	00000528 tahomabold_32_87
040266fe l     O .rodata	00000370 tahomabold_32_88
04026a6e l     O .rodata	00000370 tahomabold_32_89
04026dde l     O .rodata	00000320 tahomabold_32_90
040270fe l     O .rodata	00000258 tahomabold_32_91
04027356 l     O .rodata	000002d0 tahomabold_32_92
04027626 l     O .rodata	00000258 tahomabold_32_93
0402787e l     O .rodata	00000410 tahomabold_32_94
04027c8e l     O .rodata	00000320 tahomabold_32_95
04027fae l     O .rodata	000002a8 tahomabold_32_96
04028256 l     O .rodata	000002f8 tahomabold_32_97
0402854e l     O .rodata	00000320 tahomabold_32_98
0402886e l     O .rodata	000002a8 tahomabold_32_99
04028b16 l     O .rodata	00000320 tahomabold_32_100
04028e36 l     O .rodata	000002f8 tahomabold_32_101
0402912e l     O .rodata	00000230 tahomabold_32_102
0402935e l     O .rodata	00000320 tahomabold_32_103
0402967e l     O .rodata	00000320 tahomabold_32_104
0402999e l     O .rodata	00000190 tahomabold_32_105
04029b2e l     O .rodata	00000208 tahomabold_32_106
04029d36 l     O .rodata	000002f8 tahomabold_32_107
0402a02e l     O .rodata	00000190 tahomabold_32_108
0402a1be l     O .rodata	000004d8 tahomabold_32_109
0402a696 l     O .rodata	00000320 tahomabold_32_110
0402a9b6 l     O .rodata	00000320 tahomabold_32_111
0402acd6 l     O .rodata	00000320 tahomabold_32_112
0402aff6 l     O .rodata	00000320 tahomabold_32_113
0402b316 l     O .rodata	00000230 tahomabold_32_114
0402b546 l     O .rodata	00000280 tahomabold_32_115
0402b7c6 l     O .rodata	00000208 tahomabold_32_116
0402b9ce l     O .rodata	00000320 tahomabold_32_117
0402bcee l     O .rodata	000002f8 tahomabold_32_118
0402bfe6 l     O .rodata	00000460 tahomabold_32_119
0402c446 l     O .rodata	000002f8 tahomabold_32_120
0402c73e l     O .rodata	000002d0 tahomabold_32_121
0402ca0e l     O .rodata	000002a8 tahomabold_32_122
0402ccb6 l     O .rodata	00000320 tahomabold_32_123
0402cfd6 l     O .rodata	00000320 tahomabold_32_124
0402d2f6 l     O .rodata	00000320 tahomabold_32_125
0402d616 l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 geometry.c
00000000 l    df *ABS*	00000000 ILI9341.c
00000000 l    df *ABS*	00000000 simple_graphics.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 gui.c
0403165c l     O .rwdata	00000004 y.3914
04034cb8 l     O .bss	00000004 x.3913
00000000 l    df *ABS*	00000000 gui_vpg.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 touch_spi.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 dp-bit.c
04007530 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
040082a8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0402fc3c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04009640 l     F .text	00000058 __sprint_r
0402dede l     O .rodata	00000010 blanks.3452
0402dece l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0400b798 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0400d194 l     F .text	00000058 std
0400d2a0 l     F .text	00000008 __fp_lock
0400d2a8 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
04031678 l     O .rwdata	00000004 charset
0402df10 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0402e058 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
04011120 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04011180 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04011280 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0401166c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0401174c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
040118a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
04011ad4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04031698 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04011f44 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
040305f8 l     O .rwdata	00001060 jtag_uart
04012034 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04012274 l     F .text	00000228 altera_avalon_jtag_uart_irq
0401249c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
04012d50 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04013094 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
040131ec l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
04013328 l     F .text	000000dc alt_file_locked
0401358c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04013afc l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
04013cb0 l     F .text	00000040 alt_sim_halt
04001a54 g     F .text	0000006c vid_draw_horiz_line
0400e6d8 g     F .text	00000094 _mprec_log10
04005304 g     F .text	00000128 I2C_Read
0400e7c4 g     F .text	00000088 __any_on
0400fe30 g     F .text	00000070 _isatty_r
0402e030 g     O .rodata	00000028 __mprec_tinytens
04000744 g     F .text	00000054 LCD_DrawPoint
04011908 g     F .text	0000006c alt_main
04009540 g     F .text	0000008c strcpy
04009348 g     F .text	000000a0 _puts_r
04034d18 g     O .bss	00000100 alt_irq
0400fea0 g     F .text	00000078 _lseek_r
04001bac g     F .text	00000068 vid_color_convert16_24
04007100 g     F .text	00000130 sqrt
04006144 g     F .text	00000094 I2CL_Read16
040316a4 g       *ABS*	00000000 __flash_rwdata_start
04010b1c g     F .text	00000088 __eqdf2
04006b20 g     F .text	00000148 touch_enable_penirq
04034fa8 g       *ABS*	00000000 __alt_heap_start
040064e8 g     F .text	00000064 QUEUE_IsFull
04000c48 g     F .text	00000128 LCD_Pattern_Horizon
040092d0 g     F .text	00000044 printf
04003fbc g     F .text	000001c0 GUI_DeskInit
0400f8fc g     F .text	00000068 __sseek
0400d1fc g     F .text	000000a4 __sinit
0400ded4 g     F .text	00000084 _setlocale_r
0400d2fc g     F .text	00000068 __sfmoreglue
04011994 g     F .text	00000020 __malloc_unlock
040016d0 g     F .text	0000013c vid_draw_box
040005b0 g     F .text	00000044 PtCopy
04003458 g     F .text	00000278 vid_print_string_alpha
0400e1ec g     F .text	000000e0 memmove
0400d2ec g     F .text	00000010 _cleanup
0400e84c g     F .text	000000bc _Balloc
0402f810 g     O .rwdata	00000415 cour10_font_array
04010c2c g     F .text	00000088 __gtdf2
040014a0 g     F .text	0000011c vid_move_block
04008a20 g     F .text	00000010 __errno
04005fa4 g     F .text	000001a0 I2CL_MultipleWrite
04003dfc g     F .text	000000f4 vid_string_pixel_length_alpha
04005828 g     F .text	0000016c i2c_write
04000000 g     F .entry	0000001c __reset
0400506c g     F .text	00000040 my_wait
04000020 g       *ABS*	00000000 __flash_exceptions_start
040006d0 g     F .text	00000074 LCD_Clear
0400fdbc g     F .text	00000074 _fstat_r
04034cc8 g     O .bss	00000004 errno
0400542c g     F .text	0000017c I2C_Read16
04034ce0 g     O .bss	00000004 alt_argv
04039658 g       *ABS*	00000000 _gp
04011df4 g     F .text	00000030 usleep
0400484c g     F .text	000000a8 VPG_ColorPanel
040036d0 g     F .text	00000154 seperate_color_channels
04030478 g     O .rwdata	00000180 alt_fd_list
0401360c g     F .text	00000094 alt_find_dev
04009198 g     F .text	000000a0 memcpy
0400d2e0 g     F .text	0000000c _cleanup_r
040080d8 g     F .text	000000f8 __floatsidf
04002408 g     F .text	00000688 vid_round_corner_points
04006838 g     F .text	00000060 Touch_UnInit
040132b0 g     F .text	00000078 alt_io_redirect
04008050 g     F .text	00000088 __ltdf2
04013d14 g       *ABS*	00000000 __DTOR_END__
0400417c g     F .text	00000090 GUI_CheckButton
040093e8 g     F .text	00000014 puts
04000e4c g     F .text	00000058 vid_clean_screen
0400e628 g     F .text	000000b0 __ratio
040064a0 g     F .text	00000048 QUEUE_IsEmpty
04000f9c g     F .text	0000014c vid_scroll_string_init
040126b4 g     F .text	00000224 altera_avalon_jtag_uart_read
04008a44 g     F .text	00000014 malloc
04009314 g     F .text	00000034 _printf_r
040066a8 g     F .text	00000190 Touch_Init
040083e4 g     F .text	00000008 __udivsi3
040115ac g     F .text	000000c0 isatty
0402df40 g     O .rodata	000000c8 __mprec_tens
0400deb0 g     F .text	00000008 __locale_charset
0400b61c g     F .text	00000040 vsnprintf
0400420c g     F .text	000001fc GUI_DeskDraw
04013878 g     F .text	00000090 alt_icache_flush
040055a8 g     F .text	00000180 I2C_MultipleRead
04034cbc g     O .bss	00000004 __malloc_top_pad
04006678 g     F .text	00000030 QUEUE_Empty
04031674 g     O .rwdata	00000004 __mb_cur_max
0400deb8 g     F .text	0000000c _localeconv_r
0400ef44 g     F .text	0000003c __i2b
0400d894 g     F .text	0000049c __sfvwrite_r
040065e4 g     F .text	00000094 QUEUE_Pop
040093fc g     F .text	00000070 _sbrk_r
04006a98 g     F .text	00000030 touch_empty_fifo
040004c8 g     F .text	00000034 RectHeight
0400ff18 g     F .text	00000078 _read_r
04030444 g     O .rwdata	0000000c __lc_ctype
0403168c g     O .rwdata	00000004 alt_max_fd
04008820 g     F .text	00000138 __unpack_d
0400482c g     F .text	00000020 VPG_XLine
0400fc98 g     F .text	00000110 _fclose_r
0400d160 g     F .text	00000034 fflush
04034cc0 g     O .bss	00000004 __malloc_max_sbrked_mem
04005c3c g     F .text	00000188 I2CL_Read
0402ec50 g     O .rwdata	00000bc0 tahomabold_32
040079c0 g     F .text	00000074 __adddf3
040044c4 g     F .text	00000074 GUI_ClearPaintArea
04000284 g     F .text	00000040 PtSet
0400e508 g     F .text	00000120 __b2d
0401056c g     F .text	000005b0 __umoddi3
040117b8 g     F .text	000000f0 lseek
04031660 g     O .rwdata	00000004 __fdlib_version
04031668 g     O .rwdata	00000004 _global_impure_ptr
04001ed0 g     F .text	0000016c vid_draw_circle
0400f2c0 g     F .text	000005f4 _realloc_r
04034fa8 g       *ABS*	00000000 __bss_end
040114b4 g     F .text	000000f8 alt_iic_isr_register
04011ce8 g     F .text	0000010c alt_tick
040051a8 g     F .text	0000015c I2C_Write16
040003a8 g     F .text	00000088 RectOffset
0400ff90 g     F .text	000005dc __udivdi3
0402e008 g     O .rodata	00000028 __mprec_bigtens
0400f1a0 g     F .text	00000120 __s2b
04001c54 g     F .text	0000027c vid_draw_sloped_line
04010d3c g     F .text	00000194 __floatunsidf
0400e428 g     F .text	00000060 __mcmp
040049d8 g     F .text	000000d0 VPG_VGrid
0400d2c8 g     F .text	00000018 __fp_lock_all
0401146c g     F .text	00000048 alt_ic_irq_enabled
040050ac g     F .text	000000fc I2C_Write
0400203c g     F .text	000003cc vid_draw_round_corner_box
04011c50 g     F .text	00000098 alt_alarm_stop
04034cd8 g     O .bss	00000004 alt_irq_active
04000d70 g     F .text	000000dc LCD_Pattern_Vertical
040000ec g     F .exceptions	000000c8 alt_irq_handler
04030450 g     O .rwdata	00000028 alt_dev_null
040061d8 g     F .text	00000094 I2CL_Write16
04005728 g     F .text	00000088 i2c_start
04012f9c g     F .text	00000044 alt_dcache_flush_all
0400e2f4 g     F .text	00000070 __hi0bits
04006f7c g     F .text	00000080 touch_alarm_callback
040081d0 g     F .text	000000d8 __fixdfsi
04006ac8 g     F .text	00000058 touch_is_pen_pressed
040316a4 g       *ABS*	00000000 __ram_rwdata_end
04002f08 g     F .text	00000348 vid_draw_triangle
04031684 g     O .rwdata	00000008 alt_dev_list
04011e24 g     F .text	00000120 write
0402fc28 g     O .rwdata	00000014 szPallete
0400332c g     F .text	0000012c CropImage16
0402e090 g       *ABS*	00000000 __ram_rodata_end
040111ac g     F .text	000000d4 fstat
040010e8 g     F .text	000003b8 vid_scroll_string
0400629c g     F .text	00000060 myprintf
04006c98 g     F .text	000002e4 touch_get_xy
0400f080 g     F .text	00000120 __pow5mult
04034ccc g     O .bss	00000004 __nlocale_changed
040083ec g     F .text	00000008 __umodsi3
04006a24 g     F .text	00000074 touch_isr
04000494 g     F .text	00000034 RectWidth
04003250 g     F .text	000000dc CopyImage16
04034fa8 g       *ABS*	00000000 end
04004ee0 g     F .text	000000a8 GUI_VPG
04004718 g     F .text	0000005c GUI_ShowInfo
040121b4 g     F .text	000000c0 altera_avalon_jtag_uart_init
0400180c g     F .text	000000e8 vid_print_char
04013d10 g       *ABS*	00000000 __CTOR_LIST__
04800000 g       *ABS*	00000000 __alt_stack_pointer
04012dc0 g     F .text	00000090 alt_avalon_timer_sc_init
0400848c g     F .text	00000080 __clzsi2
040128d8 g     F .text	00000240 altera_avalon_jtag_uart_write
04004d64 g     F .text	0000017c GUI_ShowPAT
04002ae4 g     F .text	00000054 min3
04000ea4 g     F .text	000000bc vid_draw_line
0400d1ec g     F .text	00000004 __sfp_lock_acquire
0400e108 g     F .text	000000e4 memchr
04009698 g     F .text	00001eac ___vfprintf_internal_r
040094e0 g     F .text	00000060 _sprintf_r
0400d580 g     F .text	00000314 _free_r
04000640 g     F .text	00000090 LCD_SetCursor
04013b00 g     F .text	000001b0 __call_exitprocs
04034cd0 g     O .bss	00000004 __mlocale_changed
040048f4 g     F .text	000000e4 VPG_Grid
04031670 g     O .rwdata	00000004 __malloc_sbrk_base
040001b4 g     F .text	0000004c _start
04034ce8 g     O .bss	00000004 _alt_tick_rate
04006c68 g     F .text	00000030 touch_clear_input
0400ec10 g     F .text	0000014c __lshift
04012b18 g     F .text	00000238 alt_avalon_spi_command
0400654c g     F .text	00000098 QUEUE_Push
04034cec g     O .bss	00000004 _alt_nticks
04002b9c g     F .text	0000010c vid_put_pixel_in_span_map
040119b4 g     F .text	00000120 read
04004b78 g     F .text	000001ec VPG_ColorBar
04011fd8 g     F .text	0000005c alt_sys_init
040139c8 g     F .text	00000134 __register_exitproc
0400ed5c g     F .text	000001e8 __multiply
040019c4 g     F .text	00000090 vid_paint_block
0401254c g     F .text	00000074 altera_avalon_jtag_uart_close
0402e090 g       *ABS*	00000000 __ram_rwdata_start
04013d14 g       *ABS*	00000000 __ram_rodata_start
04034cf0 g     O .bss	00000028 __malloc_current_mallinfo
0400e908 g     F .text	0000017c __d2b
04004aa8 g     F .text	000000d0 VPG_HGrid
04001b0c g     F .text	000000a0 vid_color_convert24_16
0401206c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
040137c0 g     F .text	000000b8 alt_get_fd
04012e50 g     F .text	0000014c alt_busy_sleep
04008958 g     F .text	000000c8 __fpcmp_parts_d
0400fc28 g     F .text	00000070 _close_r
04004538 g     F .text	000001e0 GUI
040039bc g     F .text	00000294 alpha_blending
04013954 g     F .text	00000074 memcmp
0401211c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
04034fa8 g       *ABS*	00000000 __alt_stack_base
04012164 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0400b65c g     F .text	0000013c __swsetup_r
04007df8 g     F .text	00000258 __divdf3
0400d364 g     F .text	000000f0 __sfp
0400e76c g     F .text	00000058 __copybits
0403003c g     O .rwdata	00000408 __malloc_av_
0400d1f8 g     F .text	00000004 __sinit_lock_release
0400b568 g     F .text	000000b4 _vsnprintf_r
040057b0 g     F .text	00000078 i2c_stop
04007a34 g     F .text	000003c4 __muldf3
0400f9e0 g     F .text	00000060 __sread
040136a0 g     F .text	00000120 alt_find_file
04012fe0 g     F .text	000000b4 alt_dev_llist_insert
04011974 g     F .text	00000020 __malloc_lock
04001c14 g     F .text	00000040 vid_copy_line_to_frame_buffer
04011b94 g     F .text	000000bc sbrk
0400cf64 g     F .text	000001fc _fflush_r
0400fb74 g     F .text	000000b4 _calloc_r
04006400 g     F .text	00000070 QUEUE_New
04034cb8 g       *ABS*	00000000 __bss_start
04000798 g     F .text	000004b0 LCD_Init
04009238 g     F .text	00000098 memset
04004f88 g     F .text	000000e4 main
04034ce4 g     O .bss	00000004 alt_envp
04034cc4 g     O .bss	00000004 __malloc_max_total_mem
040062fc g     F .text	00000080 myprintf_hexarray
040120c4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
04004774 g     F .text	00000058 GUI_ShowTouchPoint
04005994 g     F .text	0000014c i2c_read
0402e090 g     O .rwdata	00000bc0 tahomabold_20
0400f8f4 g     F .text	00000008 __sclose
04007528 g     F .text	00000008 matherr
04800000 g       *ABS*	00000000 __alt_heap_limit
04003c50 g     F .text	000001ac vid_print_char_alpha
0400fda8 g     F .text	00000014 fclose
04031658 g     O .rwdata	00000004 cour10_font
04034e18 g     O .bss	00000190 _atexit0
0400b9b0 g     F .text	000015b4 _dtoa_r
04008a58 g     F .text	00000740 _malloc_r
04031690 g     O .rwdata	00000004 alt_errno
0400ddf8 g     F .text	000000b8 _fwalk
040004fc g     F .text	000000b4 PtDistance
040002c4 g     F .text	0000005c RectSet
04008324 g     F .text	00000060 __divsi3
040005f4 g     F .text	0000004c Delay_Ms
04000430 g     F .text	00000064 RectCopy
0402dd54 g     O .rodata	00000014 __thenan_df
0400d454 g     F .text	0000012c _malloc_trim_r
04013d14 g       *ABS*	00000000 __CTOR_END__
0400fa40 g     F .text	000000bc strcmp
0400397c g     F .text	00000040 read_from_frame
04013d14 g       *ABS*	00000000 __flash_rodata_start
04013d14 g       *ABS*	00000000 __DTOR_LIST__
04001988 g     F .text	0000003c vid_get_pixel
04010ba4 g     F .text	00000088 __nedf2
04011fa4 g     F .text	00000034 alt_irq_init
04011b34 g     F .text	00000060 alt_release_fd
0400946c g     F .text	00000074 sprintf
0402dd68 g     O .rodata	00000100 __clz_tab
0400626c g     F .text	00000030 debug_output
04034cd4 g     O .bss	00000004 _PathLocale
04013908 g     F .text	00000014 atexit
0400fafc g     F .text	00000078 _write_r
04000200 g     F .text	00000084 IsPtInRect
0400df58 g     F .text	0000001c setlocale
04031664 g     O .rwdata	00000004 _impure_ptr
04034cdc g     O .bss	00000004 alt_argc
04013158 g     F .text	00000064 _do_dtors
0400637c g     F .text	00000084 myprintf_dwordarray
04005dc4 g     F .text	000001e0 I2CL_MultipleRead
04000020 g       .exceptions	00000000 alt_irq_entry
0400e488 g     F .text	00000080 __ulp
0400f8b4 g     F .text	00000040 __isinfd
0400d2b0 g     F .text	00000018 __fp_unlock_all
040068d0 g     F .text	00000154 Touch_GetXY
0403167c g     O .rwdata	00000008 alt_fs_list
040015bc g     F .text	00000114 vid_print_string
04000020 g       *ABS*	00000000 __ram_exceptions_start
0400dec4 g     F .text	00000010 localeconv
04007230 g     F .text	000002c8 __ieee754_sqrt
040112e0 g     F .text	00000050 alt_ic_isr_register
040316a4 g       *ABS*	00000000 _edata
04034fa8 g       *ABS*	00000000 _end
040047cc g     F .text	00000060 ShowInfo
04002a90 g     F .text	00000054 max3
040001b4 g       *ABS*	00000000 __ram_exceptions_end
040125c0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
040113cc g     F .text	000000a0 alt_ic_irq_disable
04001ac0 g     F .text	0000004c vid_merge_colors
0400f964 g     F .text	0000007c __swrite
0403166c g     O .rwdata	00000004 __malloc_trim_threshold
040135ec g     F .text	00000020 altera_nios2_qsys_irq_init
0401391c g     F .text	00000038 exit
0400dd30 g     F .text	000000c8 _fwalk_reent
0400ea84 g     F .text	0000018c __mdiff
04004408 g     F .text	000000bc IsContinuedPoint
04008384 g     F .text	00000060 __modsi3
04800000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0400d1f0 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
04006470 g     F .text	00000030 QUEUE_Delete
04006ffc g     F .text	00000104 touch_xy_transform
040018f4 g     F .text	00000094 vid_set_pixel
04013cf0 g     F .text	00000020 _exit
040074f8 g     F .text	00000030 __isnand
04010ed0 g     F .text	00000154 alt_alarm_start
04000f60 g     F .text	0000003c vid_scroll_string_quit
040083f4 g     F .text	00000098 __muldi3
0400df74 g     F .text	00000194 __smakebuf_r
040095cc g     F .text	00000074 strlen
04013404 g     F .text	00000188 open
04010cb4 g     F .text	00000088 __gedf2
04000320 g     F .text	00000088 RectInflate
040131bc g     F .text	00000030 alt_icache_flush_all
04031694 g     O .rwdata	00000004 alt_priority_mask
04011330 g     F .text	0000009c alt_ic_irq_enable
0400b544 g     F .text	00000024 __vfprintf_internal
04007940 g     F .text	00000080 __subdf3
04002ca8 g     F .text	00000260 vid_bres_scan_edges
0400e364 g     F .text	000000c4 __lo0bits
0403169c g     O .rwdata	00000008 alt_alarm_list
04002b38 g     F .text	00000064 max_diff3
040130f4 g     F .text	00000064 _do_ctors
04005ae0 g     F .text	0000015c I2CL_Write
04003ef0 g     F .text	000000cc GUI_ShowWelcome
04003824 g     F .text	00000158 merge_color_channels
04011024 g     F .text	000000fc close
040116cc g     F .text	00000080 alt_load
04006898 g     F .text	00000038 Touch_EmptyFifo
0400850c g     F .text	00000314 __pack_d
04008a30 g     F .text	00000014 free
0400d1f4 g     F .text	00000004 __sinit_lock_acquire
0400ef80 g     F .text	00000100 __multadd
0400e2cc g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08406d14 	ori	at,at,436
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <__reset-0x4000000>

Disassembly of section .exceptions:

04000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 4000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000ec0 	call	40000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000306 	br	4000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 40000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 40000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000e8:	ef80083a 	eret

040000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000ec:	defff904 	addi	sp,sp,-28
 40000f0:	dfc00615 	stw	ra,24(sp)
 40000f4:	df000515 	stw	fp,20(sp)
 40000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 40000fc:	0005313a 	rdctl	r2,ipending
 4000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 4000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 400010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000110:	00800044 	movi	r2,1
 4000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4000118:	e0ffff17 	ldw	r3,-4(fp)
 400011c:	e0bffe17 	ldw	r2,-8(fp)
 4000120:	1884703a 	and	r2,r3,r2
 4000124:	1005003a 	cmpeq	r2,r2,zero
 4000128:	1000161e 	bne	r2,zero,4000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400012c:	e0bffd17 	ldw	r2,-12(fp)
 4000130:	00c100f4 	movhi	r3,1027
 4000134:	18d34604 	addi	r3,r3,19736
 4000138:	100490fa 	slli	r2,r2,3
 400013c:	10c5883a 	add	r2,r2,r3
 4000140:	11400017 	ldw	r5,0(r2)
 4000144:	e0bffd17 	ldw	r2,-12(fp)
 4000148:	00c100f4 	movhi	r3,1027
 400014c:	18d34604 	addi	r3,r3,19736
 4000150:	100490fa 	slli	r2,r2,3
 4000154:	10c5883a 	add	r2,r2,r3
 4000158:	10800104 	addi	r2,r2,4
 400015c:	11000017 	ldw	r4,0(r2)
 4000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000164:	0005313a 	rdctl	r2,ipending
 4000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 400016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 4000174:	e0bfff17 	ldw	r2,-4(fp)
 4000178:	1004c03a 	cmpne	r2,r2,zero
 400017c:	103fe31e 	bne	r2,zero,400010c <alt_irq_handler+0x20>
 4000180:	00000706 	br	40001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4000184:	e0bffe17 	ldw	r2,-8(fp)
 4000188:	1085883a 	add	r2,r2,r2
 400018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 4000190:	e0bffd17 	ldw	r2,-12(fp)
 4000194:	10800044 	addi	r2,r2,1
 4000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 400019c:	003fde06 	br	4000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 40001a0:	e037883a 	mov	sp,fp
 40001a4:	dfc00117 	ldw	ra,4(sp)
 40001a8:	df000017 	ldw	fp,0(sp)
 40001ac:	dec00204 	addi	sp,sp,8
 40001b0:	f800283a 	ret

Disassembly of section .text:

040001b4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 40001b4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 40001b8:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 40001bc:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 40001c0:	00bffd16 	blt	zero,r2,40001b8 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40001c4:	06c12034 	movhi	sp,1152
    ori sp, sp, %lo(__alt_stack_pointer)
 40001c8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 40001cc:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 40001d0:	d6a59614 	ori	gp,gp,38488
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40001d4:	008100f4 	movhi	r2,1027
    ori r2, r2, %lo(__bss_start)
 40001d8:	10932e14 	ori	r2,r2,19640

    movhi r3, %hi(__bss_end)
 40001dc:	00c100f4 	movhi	r3,1027
    ori r3, r3, %lo(__bss_end)
 40001e0:	18d3ea14 	ori	r3,r3,20392

    beq r2, r3, 1f
 40001e4:	10c00326 	beq	r2,r3,40001f4 <_start+0x40>

0:
    stw zero, (r2)
 40001e8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40001ec:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40001f0:	10fffd36 	bltu	r2,r3,40001e8 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40001f4:	40116cc0 	call	40116cc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40001f8:	40119080 	call	4011908 <alt_main>

040001fc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40001fc:	003fff06 	br	40001fc <alt_after_alt_main>

04000200 <IsPtInRect>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
 4000200:	defffc04 	addi	sp,sp,-16
 4000204:	df000315 	stw	fp,12(sp)
 4000208:	df000304 	addi	fp,sp,12
 400020c:	e13ffe15 	stw	r4,-8(fp)
 4000210:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
 4000214:	e03ffd15 	stw	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
 4000218:	e0bffe17 	ldw	r2,-8(fp)
 400021c:	10c00017 	ldw	r3,0(r2)
 4000220:	e0bfff17 	ldw	r2,-4(fp)
 4000224:	10800017 	ldw	r2,0(r2)
 4000228:	18801116 	blt	r3,r2,4000270 <IsPtInRect+0x70>
 400022c:	e0bffe17 	ldw	r2,-8(fp)
 4000230:	10c00017 	ldw	r3,0(r2)
 4000234:	e0bfff17 	ldw	r2,-4(fp)
 4000238:	10800117 	ldw	r2,4(r2)
 400023c:	10c00c16 	blt	r2,r3,4000270 <IsPtInRect+0x70>
 4000240:	e0bffe17 	ldw	r2,-8(fp)
 4000244:	10c00117 	ldw	r3,4(r2)
 4000248:	e0bfff17 	ldw	r2,-4(fp)
 400024c:	10800217 	ldw	r2,8(r2)
 4000250:	18800716 	blt	r3,r2,4000270 <IsPtInRect+0x70>
 4000254:	e0bffe17 	ldw	r2,-8(fp)
 4000258:	10c00117 	ldw	r3,4(r2)
 400025c:	e0bfff17 	ldw	r2,-4(fp)
 4000260:	10800317 	ldw	r2,12(r2)
 4000264:	10c00216 	blt	r2,r3,4000270 <IsPtInRect+0x70>
        bYes = TRUE;
 4000268:	00800044 	movi	r2,1
 400026c:	e0bffd15 	stw	r2,-12(fp)
    
    return bYes;
 4000270:	e0bffd17 	ldw	r2,-12(fp)
}
 4000274:	e037883a 	mov	sp,fp
 4000278:	df000017 	ldw	fp,0(sp)
 400027c:	dec00104 	addi	sp,sp,4
 4000280:	f800283a 	ret

04000284 <PtSet>:

void PtSet(POINT *pt, int x, int y){
 4000284:	defffc04 	addi	sp,sp,-16
 4000288:	df000315 	stw	fp,12(sp)
 400028c:	df000304 	addi	fp,sp,12
 4000290:	e13ffd15 	stw	r4,-12(fp)
 4000294:	e17ffe15 	stw	r5,-8(fp)
 4000298:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
 400029c:	e0fffd17 	ldw	r3,-12(fp)
 40002a0:	e0bffe17 	ldw	r2,-8(fp)
 40002a4:	18800015 	stw	r2,0(r3)
    pt->y = y;
 40002a8:	e0fffd17 	ldw	r3,-12(fp)
 40002ac:	e0bfff17 	ldw	r2,-4(fp)
 40002b0:	18800115 	stw	r2,4(r3)
}
 40002b4:	e037883a 	mov	sp,fp
 40002b8:	df000017 	ldw	fp,0(sp)
 40002bc:	dec00104 	addi	sp,sp,4
 40002c0:	f800283a 	ret

040002c4 <RectSet>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
 40002c4:	defffb04 	addi	sp,sp,-20
 40002c8:	df000415 	stw	fp,16(sp)
 40002cc:	df000404 	addi	fp,sp,16
 40002d0:	e13ffc15 	stw	r4,-16(fp)
 40002d4:	e17ffd15 	stw	r5,-12(fp)
 40002d8:	e1bffe15 	stw	r6,-8(fp)
 40002dc:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
 40002e0:	e0fffc17 	ldw	r3,-16(fp)
 40002e4:	e0bffd17 	ldw	r2,-12(fp)
 40002e8:	18800015 	stw	r2,0(r3)
    rc->right = right;
 40002ec:	e0fffc17 	ldw	r3,-16(fp)
 40002f0:	e0bffe17 	ldw	r2,-8(fp)
 40002f4:	18800115 	stw	r2,4(r3)
    rc->top = top;
 40002f8:	e0fffc17 	ldw	r3,-16(fp)
 40002fc:	e0bfff17 	ldw	r2,-4(fp)
 4000300:	18800215 	stw	r2,8(r3)
    rc->bottom = bottom;
 4000304:	e0fffc17 	ldw	r3,-16(fp)
 4000308:	e0800117 	ldw	r2,4(fp)
 400030c:	18800315 	stw	r2,12(r3)
}
 4000310:	e037883a 	mov	sp,fp
 4000314:	df000017 	ldw	fp,0(sp)
 4000318:	dec00104 	addi	sp,sp,4
 400031c:	f800283a 	ret

04000320 <RectInflate>:

void RectInflate(RECT *rc, int x, int y){
 4000320:	defffc04 	addi	sp,sp,-16
 4000324:	df000315 	stw	fp,12(sp)
 4000328:	df000304 	addi	fp,sp,12
 400032c:	e13ffd15 	stw	r4,-12(fp)
 4000330:	e17ffe15 	stw	r5,-8(fp)
 4000334:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
 4000338:	e0bffd17 	ldw	r2,-12(fp)
 400033c:	10c00017 	ldw	r3,0(r2)
 4000340:	e0bffe17 	ldw	r2,-8(fp)
 4000344:	1887c83a 	sub	r3,r3,r2
 4000348:	e0bffd17 	ldw	r2,-12(fp)
 400034c:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 4000350:	e0bffd17 	ldw	r2,-12(fp)
 4000354:	10c00117 	ldw	r3,4(r2)
 4000358:	e0bffe17 	ldw	r2,-8(fp)
 400035c:	1887883a 	add	r3,r3,r2
 4000360:	e0bffd17 	ldw	r2,-12(fp)
 4000364:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
 4000368:	e0bffd17 	ldw	r2,-12(fp)
 400036c:	10c00217 	ldw	r3,8(r2)
 4000370:	e0bfff17 	ldw	r2,-4(fp)
 4000374:	1887c83a 	sub	r3,r3,r2
 4000378:	e0bffd17 	ldw	r2,-12(fp)
 400037c:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 4000380:	e0bffd17 	ldw	r2,-12(fp)
 4000384:	10c00317 	ldw	r3,12(r2)
 4000388:	e0bfff17 	ldw	r2,-4(fp)
 400038c:	1887883a 	add	r3,r3,r2
 4000390:	e0bffd17 	ldw	r2,-12(fp)
 4000394:	10c00315 	stw	r3,12(r2)
}
 4000398:	e037883a 	mov	sp,fp
 400039c:	df000017 	ldw	fp,0(sp)
 40003a0:	dec00104 	addi	sp,sp,4
 40003a4:	f800283a 	ret

040003a8 <RectOffset>:

void RectOffset(RECT *rc, int x, int y){
 40003a8:	defffc04 	addi	sp,sp,-16
 40003ac:	df000315 	stw	fp,12(sp)
 40003b0:	df000304 	addi	fp,sp,12
 40003b4:	e13ffd15 	stw	r4,-12(fp)
 40003b8:	e17ffe15 	stw	r5,-8(fp)
 40003bc:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
 40003c0:	e0bffd17 	ldw	r2,-12(fp)
 40003c4:	10c00017 	ldw	r3,0(r2)
 40003c8:	e0bffe17 	ldw	r2,-8(fp)
 40003cc:	1887883a 	add	r3,r3,r2
 40003d0:	e0bffd17 	ldw	r2,-12(fp)
 40003d4:	10c00015 	stw	r3,0(r2)
    rc->right += x;
 40003d8:	e0bffd17 	ldw	r2,-12(fp)
 40003dc:	10c00117 	ldw	r3,4(r2)
 40003e0:	e0bffe17 	ldw	r2,-8(fp)
 40003e4:	1887883a 	add	r3,r3,r2
 40003e8:	e0bffd17 	ldw	r2,-12(fp)
 40003ec:	10c00115 	stw	r3,4(r2)
    rc->top += y;
 40003f0:	e0bffd17 	ldw	r2,-12(fp)
 40003f4:	10c00217 	ldw	r3,8(r2)
 40003f8:	e0bfff17 	ldw	r2,-4(fp)
 40003fc:	1887883a 	add	r3,r3,r2
 4000400:	e0bffd17 	ldw	r2,-12(fp)
 4000404:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
 4000408:	e0bffd17 	ldw	r2,-12(fp)
 400040c:	10c00317 	ldw	r3,12(r2)
 4000410:	e0bfff17 	ldw	r2,-4(fp)
 4000414:	1887883a 	add	r3,r3,r2
 4000418:	e0bffd17 	ldw	r2,-12(fp)
 400041c:	10c00315 	stw	r3,12(r2)
}
 4000420:	e037883a 	mov	sp,fp
 4000424:	df000017 	ldw	fp,0(sp)
 4000428:	dec00104 	addi	sp,sp,4
 400042c:	f800283a 	ret

04000430 <RectCopy>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
 4000430:	defffd04 	addi	sp,sp,-12
 4000434:	df000215 	stw	fp,8(sp)
 4000438:	df000204 	addi	fp,sp,8
 400043c:	e13ffe15 	stw	r4,-8(fp)
 4000440:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
 4000444:	e0bfff17 	ldw	r2,-4(fp)
 4000448:	10c00017 	ldw	r3,0(r2)
 400044c:	e0bffe17 	ldw	r2,-8(fp)
 4000450:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
 4000454:	e0bfff17 	ldw	r2,-4(fp)
 4000458:	10c00117 	ldw	r3,4(r2)
 400045c:	e0bffe17 	ldw	r2,-8(fp)
 4000460:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
 4000464:	e0bfff17 	ldw	r2,-4(fp)
 4000468:	10c00217 	ldw	r3,8(r2)
 400046c:	e0bffe17 	ldw	r2,-8(fp)
 4000470:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
 4000474:	e0bfff17 	ldw	r2,-4(fp)
 4000478:	10c00317 	ldw	r3,12(r2)
 400047c:	e0bffe17 	ldw	r2,-8(fp)
 4000480:	10c00315 	stw	r3,12(r2)
}
 4000484:	e037883a 	mov	sp,fp
 4000488:	df000017 	ldw	fp,0(sp)
 400048c:	dec00104 	addi	sp,sp,4
 4000490:	f800283a 	ret

04000494 <RectWidth>:

int RectWidth(RECT *rc){
 4000494:	defffe04 	addi	sp,sp,-8
 4000498:	df000115 	stw	fp,4(sp)
 400049c:	df000104 	addi	fp,sp,4
 40004a0:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
 40004a4:	e0bfff17 	ldw	r2,-4(fp)
 40004a8:	10c00117 	ldw	r3,4(r2)
 40004ac:	e0bfff17 	ldw	r2,-4(fp)
 40004b0:	10800017 	ldw	r2,0(r2)
 40004b4:	1885c83a 	sub	r2,r3,r2
}
 40004b8:	e037883a 	mov	sp,fp
 40004bc:	df000017 	ldw	fp,0(sp)
 40004c0:	dec00104 	addi	sp,sp,4
 40004c4:	f800283a 	ret

040004c8 <RectHeight>:

int RectHeight(RECT *rc){
 40004c8:	defffe04 	addi	sp,sp,-8
 40004cc:	df000115 	stw	fp,4(sp)
 40004d0:	df000104 	addi	fp,sp,4
 40004d4:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
 40004d8:	e0bfff17 	ldw	r2,-4(fp)
 40004dc:	10c00317 	ldw	r3,12(r2)
 40004e0:	e0bfff17 	ldw	r2,-4(fp)
 40004e4:	10800217 	ldw	r2,8(r2)
 40004e8:	1885c83a 	sub	r2,r3,r2
}
 40004ec:	e037883a 	mov	sp,fp
 40004f0:	df000017 	ldw	fp,0(sp)
 40004f4:	dec00104 	addi	sp,sp,4
 40004f8:	f800283a 	ret

040004fc <PtDistance>:

int PtDistance(POINT *pt1, POINT *pt2){
 40004fc:	defff904 	addi	sp,sp,-28
 4000500:	dfc00615 	stw	ra,24(sp)
 4000504:	df000515 	stw	fp,20(sp)
 4000508:	df000504 	addi	fp,sp,20
 400050c:	e13ffe15 	stw	r4,-8(fp)
 4000510:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
 4000514:	e0bffe17 	ldw	r2,-8(fp)
 4000518:	10c00017 	ldw	r3,0(r2)
 400051c:	e0bfff17 	ldw	r2,-4(fp)
 4000520:	10800017 	ldw	r2,0(r2)
 4000524:	1885c83a 	sub	r2,r3,r2
 4000528:	e0bffc15 	stw	r2,-16(fp)
    b = pt1->y - pt2->y;
 400052c:	e0bffe17 	ldw	r2,-8(fp)
 4000530:	10c00117 	ldw	r3,4(r2)
 4000534:	e0bfff17 	ldw	r2,-4(fp)
 4000538:	10800117 	ldw	r2,4(r2)
 400053c:	1885c83a 	sub	r2,r3,r2
 4000540:	e0bffb15 	stw	r2,-20(fp)
    nDistance = a*a + b*b;
 4000544:	e0fffc17 	ldw	r3,-16(fp)
 4000548:	e0bffc17 	ldw	r2,-16(fp)
 400054c:	1889383a 	mul	r4,r3,r2
 4000550:	e0fffb17 	ldw	r3,-20(fp)
 4000554:	e0bffb17 	ldw	r2,-20(fp)
 4000558:	1885383a 	mul	r2,r3,r2
 400055c:	2085883a 	add	r2,r4,r2
 4000560:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
 4000564:	e13ffd17 	ldw	r4,-12(fp)
 4000568:	40080d80 	call	40080d8 <__floatsidf>
 400056c:	100b883a 	mov	r5,r2
 4000570:	180d883a 	mov	r6,r3
 4000574:	2809883a 	mov	r4,r5
 4000578:	300b883a 	mov	r5,r6
 400057c:	40071000 	call	4007100 <sqrt>
 4000580:	100b883a 	mov	r5,r2
 4000584:	180d883a 	mov	r6,r3
 4000588:	2809883a 	mov	r4,r5
 400058c:	300b883a 	mov	r5,r6
 4000590:	40081d00 	call	40081d0 <__fixdfsi>
 4000594:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
 4000598:	e0bffd17 	ldw	r2,-12(fp)
}
 400059c:	e037883a 	mov	sp,fp
 40005a0:	dfc00117 	ldw	ra,4(sp)
 40005a4:	df000017 	ldw	fp,0(sp)
 40005a8:	dec00204 	addi	sp,sp,8
 40005ac:	f800283a 	ret

040005b0 <PtCopy>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
 40005b0:	defffd04 	addi	sp,sp,-12
 40005b4:	df000215 	stw	fp,8(sp)
 40005b8:	df000204 	addi	fp,sp,8
 40005bc:	e13ffe15 	stw	r4,-8(fp)
 40005c0:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
 40005c4:	e0bfff17 	ldw	r2,-4(fp)
 40005c8:	10c00017 	ldw	r3,0(r2)
 40005cc:	e0bffe17 	ldw	r2,-8(fp)
 40005d0:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
 40005d4:	e0bfff17 	ldw	r2,-4(fp)
 40005d8:	10c00117 	ldw	r3,4(r2)
 40005dc:	e0bffe17 	ldw	r2,-8(fp)
 40005e0:	10c00115 	stw	r3,4(r2)
}
 40005e4:	e037883a 	mov	sp,fp
 40005e8:	df000017 	ldw	fp,0(sp)
 40005ec:	dec00104 	addi	sp,sp,4
 40005f0:	f800283a 	ret

040005f4 <Delay_Ms>:
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
 40005f4:	defffd04 	addi	sp,sp,-12
 40005f8:	dfc00215 	stw	ra,8(sp)
 40005fc:	df000115 	stw	fp,4(sp)
 4000600:	df000104 	addi	fp,sp,4
 4000604:	e13fff0d 	sth	r4,-4(fp)
    while(count_ms--)
 4000608:	00000206 	br	4000614 <Delay_Ms+0x20>
    {
        usleep(1000);
 400060c:	0100fa04 	movi	r4,1000
 4000610:	4011df40 	call	4011df4 <usleep>
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
 4000614:	e0bfff0b 	ldhu	r2,-4(fp)
 4000618:	10bfffc4 	addi	r2,r2,-1
 400061c:	e0bfff0d 	sth	r2,-4(fp)
 4000620:	e0ffff0b 	ldhu	r3,-4(fp)
 4000624:	00bfffd4 	movui	r2,65535
 4000628:	18bff81e 	bne	r3,r2,400060c <Delay_Ms+0x18>
    {
        usleep(1000);
    }
}
 400062c:	e037883a 	mov	sp,fp
 4000630:	dfc00117 	ldw	ra,4(sp)
 4000634:	df000017 	ldw	fp,0(sp)
 4000638:	dec00204 	addi	sp,sp,8
 400063c:	f800283a 	ret

04000640 <LCD_SetCursor>:


void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos)
{
 4000640:	defffd04 	addi	sp,sp,-12
 4000644:	df000215 	stw	fp,8(sp)
 4000648:	df000204 	addi	fp,sp,8
 400064c:	e13ffe0d 	sth	r4,-8(fp)
 4000650:	e17fff0d 	sth	r5,-4(fp)
	 LCD_WR_REG(0x002A);
 4000654:	0007883a 	mov	r3,zero
 4000658:	00800a84 	movi	r2,42
 400065c:	18800035 	stwio	r2,0(r3)
		 LCD_WR_DATA(Xpos>>8);
 4000660:	e0bffe0b 	ldhu	r2,-8(fp)
 4000664:	1004d23a 	srli	r2,r2,8
 4000668:	10ffffcc 	andi	r3,r2,65535
 400066c:	00800104 	movi	r2,4
 4000670:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos&0XFF);
 4000674:	e0bffe0b 	ldhu	r2,-8(fp)
 4000678:	10c03fcc 	andi	r3,r2,255
 400067c:	00800104 	movi	r2,4
 4000680:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002B);
 4000684:	0007883a 	mov	r3,zero
 4000688:	00800ac4 	movi	r2,43
 400068c:	18800035 	stwio	r2,0(r3)
		 LCD_WR_DATA(Ypos>>8);
 4000690:	e0bfff0b 	ldhu	r2,-4(fp)
 4000694:	1004d23a 	srli	r2,r2,8
 4000698:	10ffffcc 	andi	r3,r2,65535
 400069c:	00800104 	movi	r2,4
 40006a0:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos&0XFF);
 40006a4:	e0bfff0b 	ldhu	r2,-4(fp)
 40006a8:	10c03fcc 	andi	r3,r2,255
 40006ac:	00800104 	movi	r2,4
 40006b0:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002C);
 40006b4:	0007883a 	mov	r3,zero
 40006b8:	00800b04 	movi	r2,44
 40006bc:	18800035 	stwio	r2,0(r3)
}
 40006c0:	e037883a 	mov	sp,fp
 40006c4:	df000017 	ldw	fp,0(sp)
 40006c8:	dec00104 	addi	sp,sp,4
 40006cc:	f800283a 	ret

040006d0 <LCD_Clear>:

void LCD_Clear(alt_u16 Color)
{
 40006d0:	defffc04 	addi	sp,sp,-16
 40006d4:	dfc00315 	stw	ra,12(sp)
 40006d8:	df000215 	stw	fp,8(sp)
 40006dc:	df000204 	addi	fp,sp,8
 40006e0:	e13fff0d 	sth	r4,-4(fp)
        alt_u32 index=0;
 40006e4:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
 40006e8:	0009883a 	mov	r4,zero
 40006ec:	000b883a 	mov	r5,zero
 40006f0:	40006400 	call	4000640 <LCD_SetCursor>
        LCD_WR_REG(0x002C);
 40006f4:	0007883a 	mov	r3,zero
 40006f8:	00800b04 	movi	r2,44
 40006fc:	18800035 	stwio	r2,0(r3)
        for(index=0;index<76800;index++)
 4000700:	e03ffe15 	stw	zero,-8(fp)
 4000704:	00000606 	br	4000720 <LCD_Clear+0x50>
        {
        	LCD_WR_DATA(Color);
 4000708:	e0ffff0b 	ldhu	r3,-4(fp)
 400070c:	00800104 	movi	r2,4
 4000710:	10c00035 	stwio	r3,0(r2)
void LCD_Clear(alt_u16 Color)
{
        alt_u32 index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
 4000714:	e0bffe17 	ldw	r2,-8(fp)
 4000718:	10800044 	addi	r2,r2,1
 400071c:	e0bffe15 	stw	r2,-8(fp)
 4000720:	e0fffe17 	ldw	r3,-8(fp)
 4000724:	00800074 	movhi	r2,1
 4000728:	108affc4 	addi	r2,r2,11263
 400072c:	10fff62e 	bgeu	r2,r3,4000708 <LCD_Clear+0x38>
        {
        	LCD_WR_DATA(Color);
        }
}
 4000730:	e037883a 	mov	sp,fp
 4000734:	dfc00117 	ldw	ra,4(sp)
 4000738:	df000017 	ldw	fp,0(sp)
 400073c:	dec00204 	addi	sp,sp,8
 4000740:	f800283a 	ret

04000744 <LCD_DrawPoint>:

void LCD_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color )
{
 4000744:	defffb04 	addi	sp,sp,-20
 4000748:	dfc00415 	stw	ra,16(sp)
 400074c:	df000315 	stw	fp,12(sp)
 4000750:	df000304 	addi	fp,sp,12
 4000754:	e13ffd0d 	sth	r4,-12(fp)
 4000758:	e17ffe0d 	sth	r5,-8(fp)
 400075c:	e1bfff0d 	sth	r6,-4(fp)
        LCD_SetCursor(x,y);
 4000760:	e13ffd0b 	ldhu	r4,-12(fp)
 4000764:	e17ffe0b 	ldhu	r5,-8(fp)
 4000768:	40006400 	call	4000640 <LCD_SetCursor>
        LCD_WR_REG(0x002C);
 400076c:	0007883a 	mov	r3,zero
 4000770:	00800b04 	movi	r2,44
 4000774:	18800035 	stwio	r2,0(r3)
        LCD_WR_DATA(color);
 4000778:	e0ffff0b 	ldhu	r3,-4(fp)
 400077c:	00800104 	movi	r2,4
 4000780:	10c00035 	stwio	r3,0(r2)
}
 4000784:	e037883a 	mov	sp,fp
 4000788:	dfc00117 	ldw	ra,4(sp)
 400078c:	df000017 	ldw	fp,0(sp)
 4000790:	dec00204 	addi	sp,sp,8
 4000794:	f800283a 	ret

04000798 <LCD_Init>:
void LCD_Init()
{
 4000798:	defffc04 	addi	sp,sp,-16
 400079c:	dfc00315 	stw	ra,12(sp)
 40007a0:	df000215 	stw	fp,8(sp)
 40007a4:	df000204 	addi	fp,sp,8
	alt_u16 data1,data2;
	alt_u16 data3,data4;
	Set_LCD_RST;
 40007a8:	00c20034 	movhi	r3,2048
 40007ac:	18c41c04 	addi	r3,r3,4208
 40007b0:	00800044 	movi	r2,1
 40007b4:	18800035 	stwio	r2,0(r3)
	Delay_Ms(1);
 40007b8:	01000044 	movi	r4,1
 40007bc:	40005f40 	call	40005f4 <Delay_Ms>
	Clr_LCD_RST;
 40007c0:	00820034 	movhi	r2,2048
 40007c4:	10841c04 	addi	r2,r2,4208
 40007c8:	10000035 	stwio	zero,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
 40007cc:	01000284 	movi	r4,10
 40007d0:	40005f40 	call	40005f4 <Delay_Ms>
	Set_LCD_RST;
 40007d4:	00c20034 	movhi	r3,2048
 40007d8:	18c41c04 	addi	r3,r3,4208
 40007dc:	00800044 	movi	r2,1
 40007e0:	18800035 	stwio	r2,0(r3)
	Delay_Ms(120);       // Delay 120 ms
 40007e4:	01001e04 	movi	r4,120
 40007e8:	40005f40 	call	40005f4 <Delay_Ms>
//	Clr_LCD_CS;



	LCD_WR_REG(0x0011); //Exit Sleep
 40007ec:	0007883a 	mov	r3,zero
 40007f0:	00800444 	movi	r2,17
 40007f4:	18800035 	stwio	r2,0(r3)
	LCD_WR_REG(0x00CF);
 40007f8:	0007883a 	mov	r3,zero
 40007fc:	008033c4 	movi	r2,207
 4000800:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0000);
 4000804:	00800104 	movi	r2,4
 4000808:	10000035 	stwio	zero,0(r2)
		LCD_WR_DATA(0x0081);
 400080c:	00c00104 	movi	r3,4
 4000810:	00802044 	movi	r2,129
 4000814:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0X00c0);
 4000818:	00c00104 	movi	r3,4
 400081c:	00803004 	movi	r2,192
 4000820:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x00ED);
 4000824:	0007883a 	mov	r3,zero
 4000828:	00803b44 	movi	r2,237
 400082c:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0064);
 4000830:	00c00104 	movi	r3,4
 4000834:	00801904 	movi	r2,100
 4000838:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0003);
 400083c:	00c00104 	movi	r3,4
 4000840:	008000c4 	movi	r2,3
 4000844:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0X0012);
 4000848:	00c00104 	movi	r3,4
 400084c:	00800484 	movi	r2,18
 4000850:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0X0081);
 4000854:	00c00104 	movi	r3,4
 4000858:	00802044 	movi	r2,129
 400085c:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x00E8);
 4000860:	0007883a 	mov	r3,zero
 4000864:	00803a04 	movi	r2,232
 4000868:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0085);
 400086c:	00c00104 	movi	r3,4
 4000870:	00802144 	movi	r2,133
 4000874:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0001);
 4000878:	00c00104 	movi	r3,4
 400087c:	00800044 	movi	r2,1
 4000880:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x00798);
 4000884:	00c00104 	movi	r3,4
 4000888:	0081e604 	movi	r2,1944
 400088c:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x00CB);
 4000890:	0007883a 	mov	r3,zero
 4000894:	008032c4 	movi	r2,203
 4000898:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0039);
 400089c:	00c00104 	movi	r3,4
 40008a0:	00800e44 	movi	r2,57
 40008a4:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x002C);
 40008a8:	00c00104 	movi	r3,4
 40008ac:	00800b04 	movi	r2,44
 40008b0:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0000);
 40008b4:	00800104 	movi	r2,4
 40008b8:	10000035 	stwio	zero,0(r2)
		LCD_WR_DATA(0x0034);
 40008bc:	00c00104 	movi	r3,4
 40008c0:	00800d04 	movi	r2,52
 40008c4:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0002);
 40008c8:	00c00104 	movi	r3,4
 40008cc:	00800084 	movi	r2,2
 40008d0:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x00F7);
 40008d4:	0007883a 	mov	r3,zero
 40008d8:	00803dc4 	movi	r2,247
 40008dc:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0020);
 40008e0:	00c00104 	movi	r3,4
 40008e4:	00800804 	movi	r2,32
 40008e8:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x00EA);
 40008ec:	0007883a 	mov	r3,zero
 40008f0:	00803a84 	movi	r2,234
 40008f4:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0000);
 40008f8:	00800104 	movi	r2,4
 40008fc:	10000035 	stwio	zero,0(r2)
		LCD_WR_DATA(0x0000);
 4000900:	00800104 	movi	r2,4
 4000904:	10000035 	stwio	zero,0(r2)

	LCD_WR_REG(0x00B1);
 4000908:	0007883a 	mov	r3,zero
 400090c:	00802c44 	movi	r2,177
 4000910:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0000);
 4000914:	00800104 	movi	r2,4
 4000918:	10000035 	stwio	zero,0(r2)
		LCD_WR_DATA(0x001b);
 400091c:	00c00104 	movi	r3,4
 4000920:	008006c4 	movi	r2,27
 4000924:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x00B6);
 4000928:	0007883a 	mov	r3,zero
 400092c:	00802d84 	movi	r2,182
 4000930:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x000A);
 4000934:	00c00104 	movi	r3,4
 4000938:	00800284 	movi	r2,10
 400093c:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x00A2);
 4000940:	00c00104 	movi	r3,4
 4000944:	00802884 	movi	r2,162
 4000948:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x00C0);    //Power control
 400094c:	0007883a 	mov	r3,zero
 4000950:	00803004 	movi	r2,192
 4000954:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0005);   //VRH[5:0]
 4000958:	00c00104 	movi	r3,4
 400095c:	00800144 	movi	r2,5
 4000960:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x00C1);    //Power control
 4000964:	0007883a 	mov	r3,zero
 4000968:	00803044 	movi	r2,193
 400096c:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
 4000970:	00c00104 	movi	r3,4
 4000974:	00800444 	movi	r2,17
 4000978:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x00C5);    //VCM control
 400097c:	0007883a 	mov	r3,zero
 4000980:	00803144 	movi	r2,197
 4000984:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0045);       //3F
 4000988:	00c00104 	movi	r3,4
 400098c:	00801144 	movi	r2,69
 4000990:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0045);       //3C
 4000994:	00c00104 	movi	r3,4
 4000998:	00801144 	movi	r2,69
 400099c:	18800035 	stwio	r2,0(r3)

	 LCD_WR_REG(0x00C7);    //VCM control2
 40009a0:	0007883a 	mov	r3,zero
 40009a4:	008031c4 	movi	r2,199
 40009a8:	18800035 	stwio	r2,0(r3)
		 LCD_WR_DATA(0X00a2);
 40009ac:	00c00104 	movi	r3,4
 40009b0:	00802884 	movi	r2,162
 40009b4:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x0036);    // Memory Access Control
 40009b8:	0007883a 	mov	r3,zero
 40009bc:	00800d84 	movi	r2,54
 40009c0:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0008);//48
 40009c4:	00c00104 	movi	r3,4
 40009c8:	00800204 	movi	r2,8
 40009cc:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
 40009d0:	0007883a 	mov	r3,zero
 40009d4:	00803c84 	movi	r2,242
 40009d8:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0000);
 40009dc:	00800104 	movi	r2,4
 40009e0:	10000035 	stwio	zero,0(r2)

	LCD_WR_REG(0x0026);    //Gamma curve selected
 40009e4:	0007883a 	mov	r3,zero
 40009e8:	00800984 	movi	r2,38
 40009ec:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0001);
 40009f0:	00c00104 	movi	r3,4
 40009f4:	00800044 	movi	r2,1
 40009f8:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x00E0);    //Set Gamma
 40009fc:	0007883a 	mov	r3,zero
 4000a00:	00803804 	movi	r2,224
 4000a04:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x000F);
 4000a08:	00c00104 	movi	r3,4
 4000a0c:	008003c4 	movi	r2,15
 4000a10:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0026);
 4000a14:	00c00104 	movi	r3,4
 4000a18:	00800984 	movi	r2,38
 4000a1c:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0024);
 4000a20:	00c00104 	movi	r3,4
 4000a24:	00800904 	movi	r2,36
 4000a28:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x000b);
 4000a2c:	00c00104 	movi	r3,4
 4000a30:	008002c4 	movi	r2,11
 4000a34:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x000E);
 4000a38:	00c00104 	movi	r3,4
 4000a3c:	00800384 	movi	r2,14
 4000a40:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0008);
 4000a44:	00c00104 	movi	r3,4
 4000a48:	00800204 	movi	r2,8
 4000a4c:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x004b);
 4000a50:	00c00104 	movi	r3,4
 4000a54:	008012c4 	movi	r2,75
 4000a58:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0X00a8);
 4000a5c:	00c00104 	movi	r3,4
 4000a60:	00802a04 	movi	r2,168
 4000a64:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x003b);
 4000a68:	00c00104 	movi	r3,4
 4000a6c:	00800ec4 	movi	r2,59
 4000a70:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x000a);
 4000a74:	00c00104 	movi	r3,4
 4000a78:	00800284 	movi	r2,10
 4000a7c:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0014);
 4000a80:	00c00104 	movi	r3,4
 4000a84:	00800504 	movi	r2,20
 4000a88:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0006);
 4000a8c:	00c00104 	movi	r3,4
 4000a90:	00800184 	movi	r2,6
 4000a94:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0010);
 4000a98:	00c00104 	movi	r3,4
 4000a9c:	00800404 	movi	r2,16
 4000aa0:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0009);
 4000aa4:	00c00104 	movi	r3,4
 4000aa8:	00800244 	movi	r2,9
 4000aac:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0000);
 4000ab0:	00800104 	movi	r2,4
 4000ab4:	10000035 	stwio	zero,0(r2)

	LCD_WR_REG(0X00E1);    //Set Gamma
 4000ab8:	0007883a 	mov	r3,zero
 4000abc:	00803844 	movi	r2,225
 4000ac0:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0000);
 4000ac4:	00800104 	movi	r2,4
 4000ac8:	10000035 	stwio	zero,0(r2)
		LCD_WR_DATA(0x001c);
 4000acc:	00c00104 	movi	r3,4
 4000ad0:	00800704 	movi	r2,28
 4000ad4:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0020);
 4000ad8:	00c00104 	movi	r3,4
 4000adc:	00800804 	movi	r2,32
 4000ae0:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0004);
 4000ae4:	00c00104 	movi	r3,4
 4000ae8:	00800104 	movi	r2,4
 4000aec:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0010);
 4000af0:	00c00104 	movi	r3,4
 4000af4:	00800404 	movi	r2,16
 4000af8:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0008);
 4000afc:	00c00104 	movi	r3,4
 4000b00:	00800204 	movi	r2,8
 4000b04:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0034);
 4000b08:	00c00104 	movi	r3,4
 4000b0c:	00800d04 	movi	r2,52
 4000b10:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0047);
 4000b14:	00c00104 	movi	r3,4
 4000b18:	008011c4 	movi	r2,71
 4000b1c:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0044);
 4000b20:	00c00104 	movi	r3,4
 4000b24:	00801104 	movi	r2,68
 4000b28:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0005);
 4000b2c:	00c00104 	movi	r3,4
 4000b30:	00800144 	movi	r2,5
 4000b34:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x000b);
 4000b38:	00c00104 	movi	r3,4
 4000b3c:	008002c4 	movi	r2,11
 4000b40:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0009);
 4000b44:	00c00104 	movi	r3,4
 4000b48:	00800244 	movi	r2,9
 4000b4c:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x002f);
 4000b50:	00c00104 	movi	r3,4
 4000b54:	00800bc4 	movi	r2,47
 4000b58:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0036);
 4000b5c:	00c00104 	movi	r3,4
 4000b60:	00800d84 	movi	r2,54
 4000b64:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x000f);
 4000b68:	00c00104 	movi	r3,4
 4000b6c:	008003c4 	movi	r2,15
 4000b70:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x002A);
 4000b74:	0007883a 	mov	r3,zero
 4000b78:	00800a84 	movi	r2,42
 4000b7c:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0000);
 4000b80:	00800104 	movi	r2,4
 4000b84:	10000035 	stwio	zero,0(r2)
		LCD_WR_DATA(0x0000);
 4000b88:	00800104 	movi	r2,4
 4000b8c:	10000035 	stwio	zero,0(r2)
		LCD_WR_DATA(0x0000);
 4000b90:	00800104 	movi	r2,4
 4000b94:	10000035 	stwio	zero,0(r2)
		LCD_WR_DATA(0x00ef);
 4000b98:	00c00104 	movi	r3,4
 4000b9c:	00803bc4 	movi	r2,239
 4000ba0:	18800035 	stwio	r2,0(r3)

	 LCD_WR_REG(0x002B);
 4000ba4:	0007883a 	mov	r3,zero
 4000ba8:	00800ac4 	movi	r2,43
 4000bac:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0000);
 4000bb0:	00800104 	movi	r2,4
 4000bb4:	10000035 	stwio	zero,0(r2)
		LCD_WR_DATA(0x0000);
 4000bb8:	00800104 	movi	r2,4
 4000bbc:	10000035 	stwio	zero,0(r2)
		LCD_WR_DATA(0x0001);
 4000bc0:	00c00104 	movi	r3,4
 4000bc4:	00800044 	movi	r2,1
 4000bc8:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x003f);
 4000bcc:	00c00104 	movi	r3,4
 4000bd0:	00800fc4 	movi	r2,63
 4000bd4:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x003A);
 4000bd8:	0007883a 	mov	r3,zero
 4000bdc:	00800e84 	movi	r2,58
 4000be0:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0055);
 4000be4:	00c00104 	movi	r3,4
 4000be8:	00801544 	movi	r2,85
 4000bec:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x00f6);
 4000bf0:	0007883a 	mov	r3,zero
 4000bf4:	00803d84 	movi	r2,246
 4000bf8:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0001);
 4000bfc:	00c00104 	movi	r3,4
 4000c00:	00800044 	movi	r2,1
 4000c04:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0030);
 4000c08:	00c00104 	movi	r3,4
 4000c0c:	00800c04 	movi	r2,48
 4000c10:	18800035 	stwio	r2,0(r3)
		LCD_WR_DATA(0x0000);
 4000c14:	00800104 	movi	r2,4
 4000c18:	10000035 	stwio	zero,0(r2)

	LCD_WR_REG(0x0029); //display on
 4000c1c:	0007883a 	mov	r3,zero
 4000c20:	00800a44 	movi	r2,41
 4000c24:	18800035 	stwio	r2,0(r3)

	LCD_WR_REG(0x002c);    // 0x2C
 4000c28:	0007883a 	mov	r3,zero
 4000c2c:	00800b04 	movi	r2,44
 4000c30:	18800035 	stwio	r2,0(r3)

}
 4000c34:	e037883a 	mov	sp,fp
 4000c38:	dfc00117 	ldw	ra,4(sp)
 4000c3c:	df000017 	ldw	fp,0(sp)
 4000c40:	dec00204 	addi	sp,sp,8
 4000c44:	f800283a 	ret

04000c48 <LCD_Pattern_Horizon>:


void LCD_Pattern_Horizon(void)
{
 4000c48:	defffc04 	addi	sp,sp,-16
 4000c4c:	dfc00315 	stw	ra,12(sp)
 4000c50:	df000215 	stw	fp,8(sp)
 4000c54:	df000204 	addi	fp,sp,8
        alt_u32 index=0;
 4000c58:	e03fff15 	stw	zero,-4(fp)
        alt_u16  data=0;
 4000c5c:	e03ffe0d 	sth	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
 4000c60:	0009883a 	mov	r4,zero
 4000c64:	000b883a 	mov	r5,zero
 4000c68:	40006400 	call	4000640 <LCD_SetCursor>
        data=0x0000;
 4000c6c:	e03ffe0d 	sth	zero,-8(fp)
        for(index=0;index<240*80;index++)
 4000c70:	e03fff15 	stw	zero,-4(fp)
 4000c74:	00000606 	br	4000c90 <LCD_Pattern_Horizon+0x48>
        {
        	LCD_WR_DATA(data);
 4000c78:	e0fffe0b 	ldhu	r3,-8(fp)
 4000c7c:	00800104 	movi	r2,4
 4000c80:	10c00035 	stwio	r3,0(r2)
{
        alt_u32 index=0;
        alt_u16  data=0;
        LCD_SetCursor(0x00,0x0000);
        data=0x0000;
        for(index=0;index<240*80;index++)
 4000c84:	e0bfff17 	ldw	r2,-4(fp)
 4000c88:	10800044 	addi	r2,r2,1
 4000c8c:	e0bfff15 	stw	r2,-4(fp)
 4000c90:	e0bfff17 	ldw	r2,-4(fp)
 4000c94:	1092c030 	cmpltui	r2,r2,19200
 4000c98:	103ff71e 	bne	r2,zero,4000c78 <LCD_Pattern_Horizon+0x30>
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
 4000c9c:	0009883a 	mov	r4,zero
 4000ca0:	01401404 	movi	r5,80
 4000ca4:	40006400 	call	4000640 <LCD_SetCursor>
        data=RED;
 4000ca8:	00be0004 	movi	r2,-2048
 4000cac:	e0bffe0d 	sth	r2,-8(fp)
		for(index=0;index<240*80;index++)
 4000cb0:	e03fff15 	stw	zero,-4(fp)
 4000cb4:	00000606 	br	4000cd0 <LCD_Pattern_Horizon+0x88>
		{
			LCD_WR_DATA(data);
 4000cb8:	e0fffe0b 	ldhu	r3,-8(fp)
 4000cbc:	00800104 	movi	r2,4
 4000cc0:	10c00035 	stwio	r3,0(r2)
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
        data=RED;
		for(index=0;index<240*80;index++)
 4000cc4:	e0bfff17 	ldw	r2,-4(fp)
 4000cc8:	10800044 	addi	r2,r2,1
 4000ccc:	e0bfff15 	stw	r2,-4(fp)
 4000cd0:	e0bfff17 	ldw	r2,-4(fp)
 4000cd4:	1092c030 	cmpltui	r2,r2,19200
 4000cd8:	103ff71e 	bne	r2,zero,4000cb8 <LCD_Pattern_Horizon+0x70>
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
 4000cdc:	0009883a 	mov	r4,zero
 4000ce0:	01402804 	movi	r5,160
 4000ce4:	40006400 	call	4000640 <LCD_SetCursor>
		data=GREEN;
 4000ce8:	0081f804 	movi	r2,2016
 4000cec:	e0bffe0d 	sth	r2,-8(fp)
		for(index=0;index<240*80;index++)
 4000cf0:	e03fff15 	stw	zero,-4(fp)
 4000cf4:	00000606 	br	4000d10 <LCD_Pattern_Horizon+0xc8>
		{
			LCD_WR_DATA(data);
 4000cf8:	e0fffe0b 	ldhu	r3,-8(fp)
 4000cfc:	00800104 	movi	r2,4
 4000d00:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
		data=GREEN;
		for(index=0;index<240*80;index++)
 4000d04:	e0bfff17 	ldw	r2,-4(fp)
 4000d08:	10800044 	addi	r2,r2,1
 4000d0c:	e0bfff15 	stw	r2,-4(fp)
 4000d10:	e0bfff17 	ldw	r2,-4(fp)
 4000d14:	1092c030 	cmpltui	r2,r2,19200
 4000d18:	103ff71e 	bne	r2,zero,4000cf8 <LCD_Pattern_Horizon+0xb0>
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
 4000d1c:	0009883a 	mov	r4,zero
 4000d20:	01403c04 	movi	r5,240
 4000d24:	40006400 	call	4000640 <LCD_SetCursor>
		data=BLUE;
 4000d28:	008007c4 	movi	r2,31
 4000d2c:	e0bffe0d 	sth	r2,-8(fp)
		for(index=0;index<240*80;index++)
 4000d30:	e03fff15 	stw	zero,-4(fp)
 4000d34:	00000606 	br	4000d50 <LCD_Pattern_Horizon+0x108>
		{
			LCD_WR_DATA(data);
 4000d38:	e0fffe0b 	ldhu	r3,-8(fp)
 4000d3c:	00800104 	movi	r2,4
 4000d40:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
		data=BLUE;
		for(index=0;index<240*80;index++)
 4000d44:	e0bfff17 	ldw	r2,-4(fp)
 4000d48:	10800044 	addi	r2,r2,1
 4000d4c:	e0bfff15 	stw	r2,-4(fp)
 4000d50:	e0bfff17 	ldw	r2,-4(fp)
 4000d54:	1092c030 	cmpltui	r2,r2,19200
 4000d58:	103ff71e 	bne	r2,zero,4000d38 <LCD_Pattern_Horizon+0xf0>
		{
			LCD_WR_DATA(data);
		}
}
 4000d5c:	e037883a 	mov	sp,fp
 4000d60:	dfc00117 	ldw	ra,4(sp)
 4000d64:	df000017 	ldw	fp,0(sp)
 4000d68:	dec00204 	addi	sp,sp,8
 4000d6c:	f800283a 	ret

04000d70 <LCD_Pattern_Vertical>:

void LCD_Pattern_Vertical(void)
{
 4000d70:	defff804 	addi	sp,sp,-32
 4000d74:	dfc00715 	stw	ra,28(sp)
 4000d78:	df000615 	stw	fp,24(sp)
 4000d7c:	df000604 	addi	fp,sp,24
        int i,j,m;
        alt_u16  data=0;
 4000d80:	e03ffa0d 	sth	zero,-24(fp)
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
 4000d84:	00bfffc4 	movi	r2,-1
 4000d88:	e0bffe0d 	sth	r2,-8(fp)
 4000d8c:	008007c4 	movi	r2,31
 4000d90:	e0bffe8d 	sth	r2,-6(fp)
 4000d94:	0081f804 	movi	r2,2016
 4000d98:	e0bfff0d 	sth	r2,-4(fp)
 4000d9c:	00be0004 	movi	r2,-2048
 4000da0:	e0bfff8d 	sth	r2,-2(fp)
        LCD_SetCursor(0x00,0x0000);
 4000da4:	0009883a 	mov	r4,zero
 4000da8:	000b883a 	mov	r5,zero
 4000dac:	40006400 	call	4000640 <LCD_SetCursor>
        for(m=0;m<320;m++)
 4000db0:	e03ffb15 	stw	zero,-20(fp)
 4000db4:	00001d06 	br	4000e2c <LCD_Pattern_Vertical+0xbc>
        {
			for(i=0;i<4;i++)
 4000db8:	e03ffd15 	stw	zero,-12(fp)
 4000dbc:	00001506 	br	4000e14 <LCD_Pattern_Vertical+0xa4>
			{
				data=color[i];
 4000dc0:	e0bffd17 	ldw	r2,-12(fp)
 4000dc4:	1085883a 	add	r2,r2,r2
 4000dc8:	e0fffa04 	addi	r3,fp,-24
 4000dcc:	10c5883a 	add	r2,r2,r3
 4000dd0:	10800404 	addi	r2,r2,16
 4000dd4:	1080000b 	ldhu	r2,0(r2)
 4000dd8:	e0bffa0d 	sth	r2,-24(fp)
				for(j=0;j<60;j++)
 4000ddc:	e03ffc15 	stw	zero,-16(fp)
 4000de0:	00000606 	br	4000dfc <LCD_Pattern_Vertical+0x8c>
				{
					LCD_WR_DATA(data);
 4000de4:	e0fffa0b 	ldhu	r3,-24(fp)
 4000de8:	00800104 	movi	r2,4
 4000dec:	10c00035 	stwio	r3,0(r2)
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
			{
				data=color[i];
				for(j=0;j<60;j++)
 4000df0:	e0bffc17 	ldw	r2,-16(fp)
 4000df4:	10800044 	addi	r2,r2,1
 4000df8:	e0bffc15 	stw	r2,-16(fp)
 4000dfc:	e0bffc17 	ldw	r2,-16(fp)
 4000e00:	10800f10 	cmplti	r2,r2,60
 4000e04:	103ff71e 	bne	r2,zero,4000de4 <LCD_Pattern_Vertical+0x74>
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
 4000e08:	e0bffd17 	ldw	r2,-12(fp)
 4000e0c:	10800044 	addi	r2,r2,1
 4000e10:	e0bffd15 	stw	r2,-12(fp)
 4000e14:	e0bffd17 	ldw	r2,-12(fp)
 4000e18:	10800110 	cmplti	r2,r2,4
 4000e1c:	103fe81e 	bne	r2,zero,4000dc0 <LCD_Pattern_Vertical+0x50>
{
        int i,j,m;
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
 4000e20:	e0bffb17 	ldw	r2,-20(fp)
 4000e24:	10800044 	addi	r2,r2,1
 4000e28:	e0bffb15 	stw	r2,-20(fp)
 4000e2c:	e0bffb17 	ldw	r2,-20(fp)
 4000e30:	10805010 	cmplti	r2,r2,320
 4000e34:	103fe01e 	bne	r2,zero,4000db8 <LCD_Pattern_Vertical+0x48>
				{
					LCD_WR_DATA(data);
				}
			}
        }
}
 4000e38:	e037883a 	mov	sp,fp
 4000e3c:	dfc00117 	ldw	ra,4(sp)
 4000e40:	df000017 	ldw	fp,0(sp)
 4000e44:	dec00204 	addi	sp,sp,8
 4000e48:	f800283a 	ret

04000e4c <vid_clean_screen>:
#include "ILI9341.h"
#endif


// richard add
void vid_clean_screen(alt_video_display* display, int color){
 4000e4c:	defffa04 	addi	sp,sp,-24
 4000e50:	dfc00515 	stw	ra,20(sp)
 4000e54:	df000415 	stw	fp,16(sp)
 4000e58:	df000404 	addi	fp,sp,16
 4000e5c:	e13ffe15 	stw	r4,-8(fp)
 4000e60:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
 4000e64:	e0bffe17 	ldw	r2,-8(fp)
 4000e68:	11800117 	ldw	r6,4(r2)
 4000e6c:	e0bffe17 	ldw	r2,-8(fp)
 4000e70:	11c00217 	ldw	r7,8(r2)
 4000e74:	e0bfff17 	ldw	r2,-4(fp)
 4000e78:	d8800015 	stw	r2,0(sp)
 4000e7c:	e0bffe17 	ldw	r2,-8(fp)
 4000e80:	d8800115 	stw	r2,4(sp)
 4000e84:	0009883a 	mov	r4,zero
 4000e88:	000b883a 	mov	r5,zero
 4000e8c:	40019c40 	call	40019c4 <vid_paint_block>
}
 4000e90:	e037883a 	mov	sp,fp
 4000e94:	dfc00117 	ldw	ra,4(sp)
 4000e98:	df000017 	ldw	fp,0(sp)
 4000e9c:	dec00204 	addi	sp,sp,8
 4000ea0:	f800283a 	ret

04000ea4 <vid_draw_line>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
 4000ea4:	defff704 	addi	sp,sp,-36
 4000ea8:	dfc00815 	stw	ra,32(sp)
 4000eac:	df000715 	stw	fp,28(sp)
 4000eb0:	df000704 	addi	fp,sp,28
 4000eb4:	e13ffc15 	stw	r4,-16(fp)
 4000eb8:	e17ffd15 	stw	r5,-12(fp)
 4000ebc:	e1bffe15 	stw	r6,-8(fp)
 4000ec0:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
 4000ec4:	e0fffd17 	ldw	r3,-12(fp)
 4000ec8:	e0bfff17 	ldw	r2,-4(fp)
 4000ecc:	18800f1e 	bne	r3,r2,4000f0c <vid_draw_line+0x68>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
 4000ed0:	e0bffc17 	ldw	r2,-16(fp)
 4000ed4:	113fffcc 	andi	r4,r2,65535
 4000ed8:	2120001c 	xori	r4,r4,32768
 4000edc:	21200004 	addi	r4,r4,-32768
 4000ee0:	e0bffe17 	ldw	r2,-8(fp)
 4000ee4:	117fffcc 	andi	r5,r2,65535
 4000ee8:	2960001c 	xori	r5,r5,32768
 4000eec:	29600004 	addi	r5,r5,-32768
 4000ef0:	e0bffd17 	ldw	r2,-12(fp)
 4000ef4:	11bfffcc 	andi	r6,r2,65535
 4000ef8:	e0800417 	ldw	r2,16(fp)
 4000efc:	d8800015 	stw	r2,0(sp)
 4000f00:	e1c00317 	ldw	r7,12(fp)
 4000f04:	4001a540 	call	4001a54 <vid_draw_horiz_line>
 4000f08:	00001006 	br	4000f4c <vid_draw_line+0xa8>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 4000f0c:	e0bffc17 	ldw	r2,-16(fp)
 4000f10:	113fffcc 	andi	r4,r2,65535
 4000f14:	e0bffd17 	ldw	r2,-12(fp)
 4000f18:	117fffcc 	andi	r5,r2,65535
 4000f1c:	e0bffe17 	ldw	r2,-8(fp)
 4000f20:	11bfffcc 	andi	r6,r2,65535
 4000f24:	e0bfff17 	ldw	r2,-4(fp)
 4000f28:	11ffffcc 	andi	r7,r2,65535
 4000f2c:	e0800217 	ldw	r2,8(fp)
 4000f30:	10bfffcc 	andi	r2,r2,65535
 4000f34:	d8800015 	stw	r2,0(sp)
 4000f38:	e0800317 	ldw	r2,12(fp)
 4000f3c:	d8800115 	stw	r2,4(sp)
 4000f40:	e0800417 	ldw	r2,16(fp)
 4000f44:	d8800215 	stw	r2,8(sp)
 4000f48:	4001c540 	call	4001c54 <vid_draw_sloped_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
 4000f4c:	e037883a 	mov	sp,fp
 4000f50:	dfc00117 	ldw	ra,4(sp)
 4000f54:	df000017 	ldw	fp,0(sp)
 4000f58:	dec00204 	addi	sp,sp,8
 4000f5c:	f800283a 	ret

04000f60 <vid_scroll_string_quit>:



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
 4000f60:	defffd04 	addi	sp,sp,-12
 4000f64:	dfc00215 	stw	ra,8(sp)
 4000f68:	df000115 	stw	fp,4(sp)
 4000f6c:	df000104 	addi	fp,sp,4
 4000f70:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
 4000f74:	e0bfff17 	ldw	r2,-4(fp)
 4000f78:	11000517 	ldw	r4,20(r2)
 4000f7c:	4008a300 	call	4008a30 <free>
  free(scroll);
 4000f80:	e13fff17 	ldw	r4,-4(fp)
 4000f84:	4008a300 	call	4008a30 <free>
}
 4000f88:	e037883a 	mov	sp,fp
 4000f8c:	dfc00117 	ldw	ra,4(sp)
 4000f90:	df000017 	ldw	fp,0(sp)
 4000f94:	dec00204 	addi	sp,sp,8
 4000f98:	f800283a 	ret

04000f9c <vid_scroll_string_init>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
 4000f9c:	defff904 	addi	sp,sp,-28
 4000fa0:	dfc00615 	stw	ra,24(sp)
 4000fa4:	df000515 	stw	fp,20(sp)
 4000fa8:	df000504 	addi	fp,sp,20
 4000fac:	e13ffc15 	stw	r4,-16(fp)
 4000fb0:	e17ffd15 	stw	r5,-12(fp)
 4000fb4:	e1bffe15 	stw	r6,-8(fp)
 4000fb8:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = malloc(sizeof (vid_text_scroll_struct));
 4000fbc:	01000f04 	movi	r4,60
 4000fc0:	4008a440 	call	4008a44 <malloc>
 4000fc4:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
 4000fc8:	e0fffb17 	ldw	r3,-20(fp)
 4000fcc:	e0bffc17 	ldw	r2,-16(fp)
 4000fd0:	18800015 	stw	r2,0(r3)
  scroll->vbegin = vbegin;
 4000fd4:	e0fffb17 	ldw	r3,-20(fp)
 4000fd8:	e0bffd17 	ldw	r2,-12(fp)
 4000fdc:	18800115 	stw	r2,4(r3)
  scroll->hend = hend;
 4000fe0:	e0fffb17 	ldw	r3,-20(fp)
 4000fe4:	e0bffe17 	ldw	r2,-8(fp)
 4000fe8:	18800215 	stw	r2,8(r3)
  scroll->f_color = f_color;
 4000fec:	e0fffb17 	ldw	r3,-20(fp)
 4000ff0:	e0bfff17 	ldw	r2,-4(fp)
 4000ff4:	18800315 	stw	r2,12(r3)
  scroll->b_color = b_color;
 4000ff8:	e0fffb17 	ldw	r3,-20(fp)
 4000ffc:	e0800217 	ldw	r2,8(fp)
 4001000:	18800415 	stw	r2,16(r3)
  scroll->string = malloc(strlen(string)+2);
 4001004:	e1000517 	ldw	r4,20(fp)
 4001008:	40095cc0 	call	40095cc <strlen>
 400100c:	11000084 	addi	r4,r2,2
 4001010:	4008a440 	call	4008a44 <malloc>
 4001014:	1007883a 	mov	r3,r2
 4001018:	e0bffb17 	ldw	r2,-20(fp)
 400101c:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
 4001020:	e0bffb17 	ldw	r2,-20(fp)
 4001024:	11000517 	ldw	r4,20(r2)
 4001028:	e1400517 	ldw	r5,20(fp)
 400102c:	40095400 	call	4009540 <strcpy>
  scroll->font = font;
 4001030:	e0fffb17 	ldw	r3,-20(fp)
 4001034:	e0800317 	ldw	r2,12(fp)
 4001038:	18800615 	stw	r2,24(r3)
  scroll->ms_delay = ms_delay;
 400103c:	e0fffb17 	ldw	r3,-20(fp)
 4001040:	e0800417 	ldw	r2,16(fp)
 4001044:	18800715 	stw	r2,28(r3)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4001048:	008100f4 	movhi	r2,1027
 400104c:	10933b04 	addi	r2,r2,19692
 4001050:	10800017 	ldw	r2,0(r2)
  scroll->ticks_at_last_move = alt_nticks();
 4001054:	1007883a 	mov	r3,r2
 4001058:	e0bffb17 	ldw	r2,-20(fp)
 400105c:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
 4001060:	e0bffb17 	ldw	r2,-20(fp)
 4001064:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
 4001068:	e0bffb17 	ldw	r2,-20(fp)
 400106c:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
 4001070:	e0bffb17 	ldw	r2,-20(fp)
 4001074:	10c00217 	ldw	r3,8(r2)
 4001078:	e0bffb17 	ldw	r2,-20(fp)
 400107c:	10800017 	ldw	r2,0(r2)
 4001080:	1887c83a 	sub	r3,r3,r2
 4001084:	e0bffb17 	ldw	r2,-20(fp)
 4001088:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
 400108c:	e1000517 	ldw	r4,20(fp)
 4001090:	40095cc0 	call	40095cc <strlen>
 4001094:	1007883a 	mov	r3,r2
 4001098:	e0bffb17 	ldw	r2,-20(fp)
 400109c:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
 40010a0:	e0bffb17 	ldw	r2,-20(fp)
 40010a4:	10800c17 	ldw	r2,48(r2)
 40010a8:	100690fa 	slli	r3,r2,3
 40010ac:	e0bffb17 	ldw	r2,-20(fp)
 40010b0:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
 40010b4:	e0bffb17 	ldw	r2,-20(fp)
 40010b8:	10c00b17 	ldw	r3,44(r2)
 40010bc:	e0bffb17 	ldw	r2,-20(fp)
 40010c0:	10800e17 	ldw	r2,56(r2)
 40010c4:	1887883a 	add	r3,r3,r2
 40010c8:	e0bffb17 	ldw	r2,-20(fp)
 40010cc:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
 40010d0:	e0bffb17 	ldw	r2,-20(fp)
  
}
 40010d4:	e037883a 	mov	sp,fp
 40010d8:	dfc00117 	ldw	ra,4(sp)
 40010dc:	df000017 	ldw	fp,0(sp)
 40010e0:	dec00204 	addi	sp,sp,8
 40010e4:	f800283a 	ret

040010e8 <vid_scroll_string>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
 40010e8:	deffeb04 	addi	sp,sp,-84
 40010ec:	dfc01415 	stw	ra,80(sp)
 40010f0:	df001315 	stw	fp,76(sp)
 40010f4:	dc401215 	stw	r17,72(sp)
 40010f8:	dc001115 	stw	r16,68(sp)
 40010fc:	df001104 	addi	fp,sp,68
 4001100:	e13ffc15 	stw	r4,-16(fp)
 4001104:	e17ffd15 	stw	r5,-12(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
 4001108:	00800044 	movi	r2,1
 400110c:	e0bff205 	stb	r2,-56(fp)
 4001110:	008100f4 	movhi	r2,1027
 4001114:	10933b04 	addi	r2,r2,19692
 4001118:	10800017 	ldw	r2,0(r2)
 400111c:	1021883a 	mov	r16,r2

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
 4001120:	e0bffc17 	ldw	r2,-16(fp)
 4001124:	10800817 	ldw	r2,32(r2)
 4001128:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400112c:	008100f4 	movhi	r2,1027
 4001130:	10933a04 	addi	r2,r2,19688
 4001134:	10800017 	ldw	r2,0(r2)
 4001138:	1007883a 	mov	r3,r2
 400113c:	e0bffc17 	ldw	r2,-16(fp)
 4001140:	10800717 	ldw	r2,28(r2)
 4001144:	1889383a 	mul	r4,r3,r2
 4001148:	0140fa04 	movi	r5,1000
 400114c:	40083e40 	call	40083e4 <__udivsi3>
 4001150:	8885883a 	add	r2,r17,r2
 4001154:	8080ca36 	bltu	r16,r2,4001480 <vid_scroll_string+0x398>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4001158:	008100f4 	movhi	r2,1027
 400115c:	10933b04 	addi	r2,r2,19692
 4001160:	10800017 	ldw	r2,0(r2)
    scroll->ticks_at_last_move = alt_nticks();
 4001164:	1007883a 	mov	r3,r2
 4001168:	e0bffc17 	ldw	r2,-16(fp)
 400116c:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
 4001170:	e0bffc17 	ldw	r2,-16(fp)
 4001174:	10800a03 	ldbu	r2,40(r2)
 4001178:	10803fcc 	andi	r2,r2,255
 400117c:	1080201c 	xori	r2,r2,128
 4001180:	10bfe004 	addi	r2,r2,-128
 4001184:	1004c03a 	cmpne	r2,r2,zero
 4001188:	1000061e 	bne	r2,zero,40011a4 <vid_scroll_string+0xbc>
      scroll->text_scroll_index = 0;
 400118c:	e0bffc17 	ldw	r2,-16(fp)
 4001190:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
 4001194:	e0fffc17 	ldw	r3,-16(fp)
 4001198:	00800044 	movi	r2,1
 400119c:	18800a05 	stb	r2,40(r3)
 40011a0:	00000e06 	br	40011dc <vid_scroll_string+0xf4>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
 40011a4:	e0bffc17 	ldw	r2,-16(fp)
 40011a8:	10c00917 	ldw	r3,36(r2)
 40011ac:	e0bffc17 	ldw	r2,-16(fp)
 40011b0:	10800d17 	ldw	r2,52(r2)
 40011b4:	18800316 	blt	r3,r2,40011c4 <vid_scroll_string+0xdc>
      scroll->text_scroll_started = 0;
 40011b8:	e0bffc17 	ldw	r2,-16(fp)
 40011bc:	10000a05 	stb	zero,40(r2)
 40011c0:	00000606 	br	40011dc <vid_scroll_string+0xf4>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
 40011c4:	e0bffc17 	ldw	r2,-16(fp)
 40011c8:	10c00917 	ldw	r3,36(r2)
 40011cc:	e0bff207 	ldb	r2,-56(fp)
 40011d0:	1887883a 	add	r3,r3,r2
 40011d4:	e0bffc17 	ldw	r2,-16(fp)
 40011d8:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
 40011dc:	e0bffc17 	ldw	r2,-16(fp)
 40011e0:	10c00917 	ldw	r3,36(r2)
 40011e4:	e0bffc17 	ldw	r2,-16(fp)
 40011e8:	10800b17 	ldw	r2,44(r2)
 40011ec:	18800a0e 	bge	r3,r2,4001218 <vid_scroll_string+0x130>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
 40011f0:	e0bffc17 	ldw	r2,-16(fp)
 40011f4:	10c00017 	ldw	r3,0(r2)
 40011f8:	e0bffc17 	ldw	r2,-16(fp)
 40011fc:	10800b17 	ldw	r2,44(r2)
 4001200:	1887883a 	add	r3,r3,r2
 4001204:	e0bffc17 	ldw	r2,-16(fp)
 4001208:	10800917 	ldw	r2,36(r2)
 400120c:	1885c83a 	sub	r2,r3,r2
 4001210:	e0bffb15 	stw	r2,-20(fp)
 4001214:	00000306 	br	4001224 <vid_scroll_string+0x13c>
    } else {
      x_start = scroll->hbegin;
 4001218:	e0bffc17 	ldw	r2,-16(fp)
 400121c:	10800017 	ldw	r2,0(r2)
 4001220:	e0bffb15 	stw	r2,-20(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
 4001224:	e0bffc17 	ldw	r2,-16(fp)
 4001228:	10c00e17 	ldw	r3,56(r2)
 400122c:	e0bffc17 	ldw	r2,-16(fp)
 4001230:	10800917 	ldw	r2,36(r2)
 4001234:	10c0040e 	bge	r2,r3,4001248 <vid_scroll_string+0x160>
      x_end = scroll->hend;
 4001238:	e0bffc17 	ldw	r2,-16(fp)
 400123c:	10800217 	ldw	r2,8(r2)
 4001240:	e0bffa15 	stw	r2,-24(fp)
 4001244:	00000906 	br	400126c <vid_scroll_string+0x184>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
 4001248:	e0bffc17 	ldw	r2,-16(fp)
 400124c:	10c00217 	ldw	r3,8(r2)
 4001250:	e0bffc17 	ldw	r2,-16(fp)
 4001254:	10800917 	ldw	r2,36(r2)
 4001258:	1887c83a 	sub	r3,r3,r2
 400125c:	e0bffc17 	ldw	r2,-16(fp)
 4001260:	10800e17 	ldw	r2,56(r2)
 4001264:	1885883a 	add	r2,r3,r2
 4001268:	e0bffa15 	stw	r2,-24(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 400126c:	e0bffb17 	ldw	r2,-20(fp)
 4001270:	e0bff915 	stw	r2,-28(fp)
 4001274:	00007006 	br	4001438 <vid_scroll_string+0x350>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
 4001278:	e0bffc17 	ldw	r2,-16(fp)
 400127c:	10c00917 	ldw	r3,36(r2)
 4001280:	e0bffc17 	ldw	r2,-16(fp)
 4001284:	10800b17 	ldw	r2,44(r2)
 4001288:	1880050e 	bge	r3,r2,40012a0 <vid_scroll_string+0x1b8>
        string_x_index = (x_index - x_start);
 400128c:	e0bff917 	ldw	r2,-28(fp)
 4001290:	e0fffb17 	ldw	r3,-20(fp)
 4001294:	10c5c83a 	sub	r2,r2,r3
 4001298:	e0bff815 	stw	r2,-32(fp)
 400129c:	00000a06 	br	40012c8 <vid_scroll_string+0x1e0>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
 40012a0:	e0bffc17 	ldw	r2,-16(fp)
 40012a4:	10c00917 	ldw	r3,36(r2)
 40012a8:	e0bffc17 	ldw	r2,-16(fp)
 40012ac:	10800b17 	ldw	r2,44(r2)
 40012b0:	1887c83a 	sub	r3,r3,r2
 40012b4:	e0bff917 	ldw	r2,-28(fp)
 40012b8:	1887883a 	add	r3,r3,r2
 40012bc:	e0bffb17 	ldw	r2,-20(fp)
 40012c0:	1885c83a 	sub	r2,r3,r2
 40012c4:	e0bff815 	stw	r2,-32(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
 40012c8:	e0bff817 	ldw	r2,-32(fp)
 40012cc:	e0bffe15 	stw	r2,-8(fp)
 40012d0:	e0fffe17 	ldw	r3,-8(fp)
 40012d4:	1804403a 	cmpge	r2,r3,zero
 40012d8:	1000031e 	bne	r2,zero,40012e8 <vid_scroll_string+0x200>
 40012dc:	e0bffe17 	ldw	r2,-8(fp)
 40012e0:	108001c4 	addi	r2,r2,7
 40012e4:	e0bffe15 	stw	r2,-8(fp)
 40012e8:	e0fffe17 	ldw	r3,-8(fp)
 40012ec:	1805d0fa 	srai	r2,r3,3
 40012f0:	e0bff715 	stw	r2,-36(fp)
      character = scroll->string[string_char_index];
 40012f4:	e0bffc17 	ldw	r2,-16(fp)
 40012f8:	10c00517 	ldw	r3,20(r2)
 40012fc:	e0bff717 	ldw	r2,-36(fp)
 4001300:	1885883a 	add	r2,r3,r2
 4001304:	10800003 	ldbu	r2,0(r2)
 4001308:	e0bff445 	stb	r2,-47(fp)
      char_column = (string_x_index % 8);
 400130c:	e0fff817 	ldw	r3,-32(fp)
 4001310:	00a00034 	movhi	r2,32768
 4001314:	108001c4 	addi	r2,r2,7
 4001318:	1886703a 	and	r3,r3,r2
 400131c:	e0ffff15 	stw	r3,-4(fp)
 4001320:	e0ffff17 	ldw	r3,-4(fp)
 4001324:	1804403a 	cmpge	r2,r3,zero
 4001328:	10000a1e 	bne	r2,zero,4001354 <vid_scroll_string+0x26c>
 400132c:	e0bfff17 	ldw	r2,-4(fp)
 4001330:	10bfffc4 	addi	r2,r2,-1
 4001334:	e0bfff15 	stw	r2,-4(fp)
 4001338:	00bffe04 	movi	r2,-8
 400133c:	e0ffff17 	ldw	r3,-4(fp)
 4001340:	1886b03a 	or	r3,r3,r2
 4001344:	e0ffff15 	stw	r3,-4(fp)
 4001348:	e0bfff17 	ldw	r2,-4(fp)
 400134c:	10800044 	addi	r2,r2,1
 4001350:	e0bfff15 	stw	r2,-4(fp)
 4001354:	e0ffff17 	ldw	r3,-4(fp)
 4001358:	e0fff515 	stw	r3,-44(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
 400135c:	00c02004 	movi	r3,128
 4001360:	e0bff517 	ldw	r2,-44(fp)
 4001364:	1884d83a 	srl	r2,r3,r2
 4001368:	e0bff405 	stb	r2,-48(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
 400136c:	e0bffc17 	ldw	r2,-16(fp)
 4001370:	10c00617 	ldw	r3,24(r2)
 4001374:	e0bff447 	ldb	r2,-47(fp)
 4001378:	108002e4 	muli	r2,r2,11
 400137c:	1885883a 	add	r2,r3,r2
 4001380:	10bfa804 	addi	r2,r2,-352
 4001384:	e0bff315 	stw	r2,-52(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 4001388:	e03ff615 	stw	zero,-40(fp)
 400138c:	00002406 	br	4001420 <vid_scroll_string+0x338>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
 4001390:	e0bff617 	ldw	r2,-40(fp)
 4001394:	1007883a 	mov	r3,r2
 4001398:	e0bff317 	ldw	r2,-52(fp)
 400139c:	1885883a 	add	r2,r3,r2
 40013a0:	10c00003 	ldbu	r3,0(r2)
 40013a4:	e0bff403 	ldbu	r2,-48(fp)
 40013a8:	1884703a 	and	r2,r3,r2
 40013ac:	10803fcc 	andi	r2,r2,255
 40013b0:	1080201c 	xori	r2,r2,128
 40013b4:	10bfe004 	addi	r2,r2,-128
 40013b8:	1005003a 	cmpeq	r2,r2,zero
 40013bc:	10000b1e 	bne	r2,zero,40013ec <vid_scroll_string+0x304>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
 40013c0:	e0bffc17 	ldw	r2,-16(fp)
 40013c4:	10c00117 	ldw	r3,4(r2)
 40013c8:	e0bff617 	ldw	r2,-40(fp)
 40013cc:	188b883a 	add	r5,r3,r2
 40013d0:	e0bffc17 	ldw	r2,-16(fp)
 40013d4:	10800317 	ldw	r2,12(r2)
 40013d8:	100d883a 	mov	r6,r2
 40013dc:	e13ff917 	ldw	r4,-28(fp)
 40013e0:	e1fffd17 	ldw	r7,-12(fp)
 40013e4:	40018f40 	call	40018f4 <vid_set_pixel>
 40013e8:	00000a06 	br	4001414 <vid_scroll_string+0x32c>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
 40013ec:	e0bffc17 	ldw	r2,-16(fp)
 40013f0:	10c00117 	ldw	r3,4(r2)
 40013f4:	e0bff617 	ldw	r2,-40(fp)
 40013f8:	188b883a 	add	r5,r3,r2
 40013fc:	e0bffc17 	ldw	r2,-16(fp)
 4001400:	10800417 	ldw	r2,16(r2)
 4001404:	100d883a 	mov	r6,r2
 4001408:	e13ff917 	ldw	r4,-28(fp)
 400140c:	e1fffd17 	ldw	r7,-12(fp)
 4001410:	40018f40 	call	40018f4 <vid_set_pixel>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 4001414:	e0bff617 	ldw	r2,-40(fp)
 4001418:	10800044 	addi	r2,r2,1
 400141c:	e0bff615 	stw	r2,-40(fp)
 4001420:	e0bff617 	ldw	r2,-40(fp)
 4001424:	108002d0 	cmplti	r2,r2,11
 4001428:	103fd91e 	bne	r2,zero,4001390 <vid_scroll_string+0x2a8>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 400142c:	e0bff917 	ldw	r2,-28(fp)
 4001430:	10800044 	addi	r2,r2,1
 4001434:	e0bff915 	stw	r2,-28(fp)
 4001438:	e0fff917 	ldw	r3,-28(fp)
 400143c:	e0bffa17 	ldw	r2,-24(fp)
 4001440:	18bf8d16 	blt	r3,r2,4001278 <vid_scroll_string+0x190>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
 4001444:	e0bffc17 	ldw	r2,-16(fp)
 4001448:	11400117 	ldw	r5,4(r2)
 400144c:	e0bffc17 	ldw	r2,-16(fp)
 4001450:	10800117 	ldw	r2,4(r2)
 4001454:	11c00284 	addi	r7,r2,10
 4001458:	e0bffc17 	ldw	r2,-16(fp)
 400145c:	10c00417 	ldw	r3,16(r2)
 4001460:	00800044 	movi	r2,1
 4001464:	d8800015 	stw	r2,0(sp)
 4001468:	d8c00115 	stw	r3,4(sp)
 400146c:	e0bffd17 	ldw	r2,-12(fp)
 4001470:	d8800215 	stw	r2,8(sp)
 4001474:	e13ffa17 	ldw	r4,-24(fp)
 4001478:	e1bffa17 	ldw	r6,-24(fp)
 400147c:	4000ea40 	call	4000ea4 <vid_draw_line>
    // Log what time we moved the scroll.
  }
  return(0);
 4001480:	0005883a 	mov	r2,zero
}
 4001484:	e037883a 	mov	sp,fp
 4001488:	dfc00317 	ldw	ra,12(sp)
 400148c:	df000217 	ldw	fp,8(sp)
 4001490:	dc400117 	ldw	r17,4(sp)
 4001494:	dc000017 	ldw	r16,0(sp)
 4001498:	dec00404 	addi	sp,sp,16
 400149c:	f800283a 	ret

040014a0 <vid_move_block>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
 40014a0:	defff504 	addi	sp,sp,-44
 40014a4:	dfc00a15 	stw	ra,40(sp)
 40014a8:	df000915 	stw	fp,36(sp)
 40014ac:	df000904 	addi	fp,sp,36
 40014b0:	e13ffc15 	stw	r4,-16(fp)
 40014b4:	e17ffd15 	stw	r5,-12(fp)
 40014b8:	e1bffe15 	stw	r6,-8(fp)
 40014bc:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
 40014c0:	e0800217 	ldw	r2,8(fp)
 40014c4:	10800048 	cmpgei	r2,r2,1
 40014c8:	1000361e 	bne	r2,zero,40015a4 <vid_move_block+0x104>
 40014cc:	e0800317 	ldw	r2,12(fp)
 40014d0:	10800048 	cmpgei	r2,r2,1
 40014d4:	1000331e 	bne	r2,zero,40015a4 <vid_move_block+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 40014d8:	e0bffd17 	ldw	r2,-12(fp)
 40014dc:	e0bffa15 	stw	r2,-24(fp)
 40014e0:	00002d06 	br	4001598 <vid_move_block+0xf8>
      write_y = read_y + y_distance;
 40014e4:	e0fffa17 	ldw	r3,-24(fp)
 40014e8:	e0800317 	ldw	r2,12(fp)
 40014ec:	1885883a 	add	r2,r3,r2
 40014f0:	e0bff815 	stw	r2,-32(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
 40014f4:	e0bffc17 	ldw	r2,-16(fp)
 40014f8:	e0bffb15 	stw	r2,-20(fp)
 40014fc:	00002006 	br	4001580 <vid_move_block+0xe0>
        write_x = read_x + x_distance;
 4001500:	e0fffb17 	ldw	r3,-20(fp)
 4001504:	e0800217 	ldw	r2,8(fp)
 4001508:	1885883a 	add	r2,r3,r2
 400150c:	e0bff915 	stw	r2,-28(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
 4001510:	e13ffb17 	ldw	r4,-20(fp)
 4001514:	e17ffa17 	ldw	r5,-24(fp)
 4001518:	e1800517 	ldw	r6,20(fp)
 400151c:	40019880 	call	4001988 <vid_get_pixel>
 4001520:	e0bff70d 	sth	r2,-36(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
 4001524:	e1bff70f 	ldh	r6,-36(fp)
 4001528:	e13ff917 	ldw	r4,-28(fp)
 400152c:	e17ff817 	ldw	r5,-32(fp)
 4001530:	e1c00517 	ldw	r7,20(fp)
 4001534:	40018f40 	call	40018f4 <vid_set_pixel>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
 4001538:	e0fffe17 	ldw	r3,-8(fp)
 400153c:	e0800217 	ldw	r2,8(fp)
 4001540:	1887883a 	add	r3,r3,r2
 4001544:	e0bffb17 	ldw	r2,-20(fp)
 4001548:	10c0050e 	bge	r2,r3,4001560 <vid_move_block+0xc0>
 400154c:	e0ffff17 	ldw	r3,-4(fp)
 4001550:	e0800317 	ldw	r2,12(fp)
 4001554:	1887883a 	add	r3,r3,r2
 4001558:	e0bffa17 	ldw	r2,-24(fp)
 400155c:	10c00516 	blt	r2,r3,4001574 <vid_move_block+0xd4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
 4001560:	e1800417 	ldw	r6,16(fp)
 4001564:	e13ffb17 	ldw	r4,-20(fp)
 4001568:	e17ffa17 	ldw	r5,-24(fp)
 400156c:	e1c00517 	ldw	r7,20(fp)
 4001570:	40018f40 	call	40018f4 <vid_set_pixel>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
 4001574:	e0bffb17 	ldw	r2,-20(fp)
 4001578:	10800044 	addi	r2,r2,1
 400157c:	e0bffb15 	stw	r2,-20(fp)
 4001580:	e0fffb17 	ldw	r3,-20(fp)
 4001584:	e0bffe17 	ldw	r2,-8(fp)
 4001588:	18bfdd16 	blt	r3,r2,4001500 <vid_move_block+0x60>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 400158c:	e0bffa17 	ldw	r2,-24(fp)
 4001590:	10800044 	addi	r2,r2,1
 4001594:	e0bffa15 	stw	r2,-24(fp)
 4001598:	e0fffa17 	ldw	r3,-24(fp)
 400159c:	e0bfff17 	ldw	r2,-4(fp)
 40015a0:	18bfd016 	blt	r3,r2,40014e4 <vid_move_block+0x44>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
 40015a4:	0005883a 	mov	r2,zero
}
 40015a8:	e037883a 	mov	sp,fp
 40015ac:	dfc00117 	ldw	ra,4(sp)
 40015b0:	df000017 	ldw	fp,0(sp)
 40015b4:	dec00204 	addi	sp,sp,8
 40015b8:	f800283a 	ret

040015bc <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
 40015bc:	defff604 	addi	sp,sp,-40
 40015c0:	dfc00915 	stw	ra,36(sp)
 40015c4:	df000815 	stw	fp,32(sp)
 40015c8:	df000804 	addi	fp,sp,32
 40015cc:	e13ffc15 	stw	r4,-16(fp)
 40015d0:	e17ffd15 	stw	r5,-12(fp)
 40015d4:	e1bffe15 	stw	r6,-8(fp)
 40015d8:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 40015dc:	e03ffb15 	stw	zero,-20(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 40015e0:	e0bffc17 	ldw	r2,-16(fp)
 40015e4:	e0bffa15 	stw	r2,-24(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 40015e8:	00002906 	br	4001690 <vid_print_string+0xd4>
    //Handle newline char here.
    if (string[i] == '\n') {
 40015ec:	e0bffb17 	ldw	r2,-20(fp)
 40015f0:	1007883a 	mov	r3,r2
 40015f4:	e0800317 	ldw	r2,12(fp)
 40015f8:	1885883a 	add	r2,r3,r2
 40015fc:	10800003 	ldbu	r2,0(r2)
 4001600:	10803fcc 	andi	r2,r2,255
 4001604:	1080201c 	xori	r2,r2,128
 4001608:	10bfe004 	addi	r2,r2,-128
 400160c:	10800298 	cmpnei	r2,r2,10
 4001610:	1000091e 	bne	r2,zero,4001638 <vid_print_string+0x7c>
      horiz_offset = original_horiz_offset;
 4001614:	e0bffa17 	ldw	r2,-24(fp)
 4001618:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
 400161c:	e0bffd17 	ldw	r2,-12(fp)
 4001620:	10800304 	addi	r2,r2,12
 4001624:	e0bffd15 	stw	r2,-12(fp)
      i++;
 4001628:	e0bffb17 	ldw	r2,-20(fp)
 400162c:	10800044 	addi	r2,r2,1
 4001630:	e0bffb15 	stw	r2,-20(fp)
      continue;
 4001634:	00001606 	br	4001690 <vid_print_string+0xd4>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
 4001638:	e0bffb17 	ldw	r2,-20(fp)
 400163c:	1007883a 	mov	r3,r2
 4001640:	e0800317 	ldw	r2,12(fp)
 4001644:	1885883a 	add	r2,r3,r2
 4001648:	10800003 	ldbu	r2,0(r2)
 400164c:	11c03fcc 	andi	r7,r2,255
 4001650:	39c0201c 	xori	r7,r7,128
 4001654:	39ffe004 	addi	r7,r7,-128
 4001658:	e0bfff17 	ldw	r2,-4(fp)
 400165c:	d8800015 	stw	r2,0(sp)
 4001660:	e0800217 	ldw	r2,8(fp)
 4001664:	d8800115 	stw	r2,4(sp)
 4001668:	e13ffc17 	ldw	r4,-16(fp)
 400166c:	e17ffd17 	ldw	r5,-12(fp)
 4001670:	e1bffe17 	ldw	r6,-8(fp)
 4001674:	400180c0 	call	400180c <vid_print_char>
    i++;
 4001678:	e0bffb17 	ldw	r2,-20(fp)
 400167c:	10800044 	addi	r2,r2,1
 4001680:	e0bffb15 	stw	r2,-20(fp)
    horiz_offset += 8;
 4001684:	e0bffc17 	ldw	r2,-16(fp)
 4001688:	10800204 	addi	r2,r2,8
 400168c:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4001690:	e0bffb17 	ldw	r2,-20(fp)
 4001694:	1007883a 	mov	r3,r2
 4001698:	e0800317 	ldw	r2,12(fp)
 400169c:	1885883a 	add	r2,r3,r2
 40016a0:	10800003 	ldbu	r2,0(r2)
 40016a4:	10803fcc 	andi	r2,r2,255
 40016a8:	1080201c 	xori	r2,r2,128
 40016ac:	10bfe004 	addi	r2,r2,-128
 40016b0:	1004c03a 	cmpne	r2,r2,zero
 40016b4:	103fcd1e 	bne	r2,zero,40015ec <vid_print_string+0x30>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
 40016b8:	0005883a 	mov	r2,zero
}
 40016bc:	e037883a 	mov	sp,fp
 40016c0:	dfc00117 	ldw	ra,4(sp)
 40016c4:	df000017 	ldw	fp,0(sp)
 40016c8:	dec00204 	addi	sp,sp,8
 40016cc:	f800283a 	ret

040016d0 <vid_draw_box>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
 40016d0:	defff704 	addi	sp,sp,-36
 40016d4:	dfc00815 	stw	ra,32(sp)
 40016d8:	df000715 	stw	fp,28(sp)
 40016dc:	df000704 	addi	fp,sp,28
 40016e0:	e13ffc15 	stw	r4,-16(fp)
 40016e4:	e17ffd15 	stw	r5,-12(fp)
 40016e8:	e1bffe15 	stw	r6,-8(fp)
 40016ec:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
 40016f0:	e0800317 	ldw	r2,12(fp)
 40016f4:	1005003a 	cmpeq	r2,r2,zero
 40016f8:	10000a1e 	bne	r2,zero,4001724 <vid_draw_box+0x54>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
 40016fc:	e0800217 	ldw	r2,8(fp)
 4001700:	d8800015 	stw	r2,0(sp)
 4001704:	e0800417 	ldw	r2,16(fp)
 4001708:	d8800115 	stw	r2,4(sp)
 400170c:	e13ffc17 	ldw	r4,-16(fp)
 4001710:	e17ffd17 	ldw	r5,-12(fp)
 4001714:	e1bffe17 	ldw	r6,-8(fp)
 4001718:	e1ffff17 	ldw	r7,-4(fp)
 400171c:	40019c40 	call	40019c4 <vid_paint_block>
 4001720:	00003406 	br	40017f4 <vid_draw_box+0x124>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
 4001724:	e0bfff17 	ldw	r2,-4(fp)
 4001728:	11ffffc4 	addi	r7,r2,-1
 400172c:	00800044 	movi	r2,1
 4001730:	d8800015 	stw	r2,0(sp)
 4001734:	e0800217 	ldw	r2,8(fp)
 4001738:	d8800115 	stw	r2,4(sp)
 400173c:	e0800417 	ldw	r2,16(fp)
 4001740:	d8800215 	stw	r2,8(sp)
 4001744:	e13ffc17 	ldw	r4,-16(fp)
 4001748:	e17ffd17 	ldw	r5,-12(fp)
 400174c:	e1bffc17 	ldw	r6,-16(fp)
 4001750:	4000ea40 	call	4000ea4 <vid_draw_line>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
 4001754:	e0bffe17 	ldw	r2,-8(fp)
 4001758:	113fffc4 	addi	r4,r2,-1
 400175c:	e0bffe17 	ldw	r2,-8(fp)
 4001760:	11bfffc4 	addi	r6,r2,-1
 4001764:	e0bfff17 	ldw	r2,-4(fp)
 4001768:	11ffffc4 	addi	r7,r2,-1
 400176c:	00800044 	movi	r2,1
 4001770:	d8800015 	stw	r2,0(sp)
 4001774:	e0800217 	ldw	r2,8(fp)
 4001778:	d8800115 	stw	r2,4(sp)
 400177c:	e0800417 	ldw	r2,16(fp)
 4001780:	d8800215 	stw	r2,8(sp)
 4001784:	e17ffd17 	ldw	r5,-12(fp)
 4001788:	4000ea40 	call	4000ea4 <vid_draw_line>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
 400178c:	e0bffe17 	ldw	r2,-8(fp)
 4001790:	11bfffc4 	addi	r6,r2,-1
 4001794:	00800044 	movi	r2,1
 4001798:	d8800015 	stw	r2,0(sp)
 400179c:	e0800217 	ldw	r2,8(fp)
 40017a0:	d8800115 	stw	r2,4(sp)
 40017a4:	e0800417 	ldw	r2,16(fp)
 40017a8:	d8800215 	stw	r2,8(sp)
 40017ac:	e13ffc17 	ldw	r4,-16(fp)
 40017b0:	e17ffd17 	ldw	r5,-12(fp)
 40017b4:	e1fffd17 	ldw	r7,-12(fp)
 40017b8:	4000ea40 	call	4000ea4 <vid_draw_line>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
 40017bc:	e0bfff17 	ldw	r2,-4(fp)
 40017c0:	117fffc4 	addi	r5,r2,-1
 40017c4:	e0bffe17 	ldw	r2,-8(fp)
 40017c8:	11bfffc4 	addi	r6,r2,-1
 40017cc:	e0bfff17 	ldw	r2,-4(fp)
 40017d0:	11ffffc4 	addi	r7,r2,-1
 40017d4:	00800044 	movi	r2,1
 40017d8:	d8800015 	stw	r2,0(sp)
 40017dc:	e0800217 	ldw	r2,8(fp)
 40017e0:	d8800115 	stw	r2,4(sp)
 40017e4:	e0800417 	ldw	r2,16(fp)
 40017e8:	d8800215 	stw	r2,8(sp)
 40017ec:	e13ffc17 	ldw	r4,-16(fp)
 40017f0:	4000ea40 	call	4000ea4 <vid_draw_line>
  }

  return (0);
 40017f4:	0005883a 	mov	r2,zero
}
 40017f8:	e037883a 	mov	sp,fp
 40017fc:	dfc00117 	ldw	ra,4(sp)
 4001800:	df000017 	ldw	fp,0(sp)
 4001804:	dec00204 	addi	sp,sp,8
 4001808:	f800283a 	ret

0400180c <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
 400180c:	defff704 	addi	sp,sp,-36
 4001810:	dfc00815 	stw	ra,32(sp)
 4001814:	df000715 	stw	fp,28(sp)
 4001818:	df000704 	addi	fp,sp,28
 400181c:	e13ffc15 	stw	r4,-16(fp)
 4001820:	e17ffd15 	stw	r5,-12(fp)
 4001824:	e1bffe15 	stw	r6,-8(fp)
 4001828:	e1ffff05 	stb	r7,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
 400182c:	e0bfff03 	ldbu	r2,-4(fp)
 4001830:	10bff804 	addi	r2,r2,-32
 4001834:	e0bff945 	stb	r2,-27(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 4001838:	e03ffb15 	stw	zero,-20(fp)
 400183c:	00002406 	br	40018d0 <vid_print_char+0xc4>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
 4001840:	e0bff947 	ldb	r2,-27(fp)
 4001844:	108002e4 	muli	r2,r2,11
 4001848:	1007883a 	mov	r3,r2
 400184c:	e0800217 	ldw	r2,8(fp)
 4001850:	1887883a 	add	r3,r3,r2
 4001854:	e0bffb17 	ldw	r2,-20(fp)
 4001858:	1885883a 	add	r2,r3,r2
 400185c:	10800003 	ldbu	r2,0(r2)
 4001860:	e0bff905 	stb	r2,-28(fp)
    for (j = 0; j < 8; j++) {
 4001864:	e03ffa15 	stw	zero,-24(fp)
 4001868:	00001306 	br	40018b8 <vid_print_char+0xac>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
 400186c:	e13ff907 	ldb	r4,-28(fp)
 4001870:	00c02004 	movi	r3,128
 4001874:	e0bffa17 	ldw	r2,-24(fp)
 4001878:	1885d83a 	sra	r2,r3,r2
 400187c:	2084703a 	and	r2,r4,r2
 4001880:	1005003a 	cmpeq	r2,r2,zero
 4001884:	1000091e 	bne	r2,zero,40018ac <vid_print_char+0xa0>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
 4001888:	e0fffc17 	ldw	r3,-16(fp)
 400188c:	e0bffa17 	ldw	r2,-24(fp)
 4001890:	1889883a 	add	r4,r3,r2
 4001894:	e0fffd17 	ldw	r3,-12(fp)
 4001898:	e0bffb17 	ldw	r2,-20(fp)
 400189c:	188b883a 	add	r5,r3,r2
 40018a0:	e1bffe17 	ldw	r6,-8(fp)
 40018a4:	e1c00317 	ldw	r7,12(fp)
 40018a8:	40018f40 	call	40018f4 <vid_set_pixel>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
 40018ac:	e0bffa17 	ldw	r2,-24(fp)
 40018b0:	10800044 	addi	r2,r2,1
 40018b4:	e0bffa15 	stw	r2,-24(fp)
 40018b8:	e0bffa17 	ldw	r2,-24(fp)
 40018bc:	10800210 	cmplti	r2,r2,8
 40018c0:	103fea1e 	bne	r2,zero,400186c <vid_print_char+0x60>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 40018c4:	e0bffb17 	ldw	r2,-20(fp)
 40018c8:	10800044 	addi	r2,r2,1
 40018cc:	e0bffb15 	stw	r2,-20(fp)
 40018d0:	e0bffb17 	ldw	r2,-20(fp)
 40018d4:	108002d0 	cmplti	r2,r2,11
 40018d8:	103fd91e 	bne	r2,zero,4001840 <vid_print_char+0x34>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
 40018dc:	0005883a 	mov	r2,zero
}
 40018e0:	e037883a 	mov	sp,fp
 40018e4:	dfc00117 	ldw	ra,4(sp)
 40018e8:	df000017 	ldw	fp,0(sp)
 40018ec:	dec00204 	addi	sp,sp,8
 40018f0:	f800283a 	ret

040018f4 <vid_set_pixel>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
 40018f4:	defff904 	addi	sp,sp,-28
 40018f8:	dfc00615 	stw	ra,24(sp)
 40018fc:	df000515 	stw	fp,20(sp)
 4001900:	df000504 	addi	fp,sp,20
 4001904:	e13ffc15 	stw	r4,-16(fp)
 4001908:	e17ffd15 	stw	r5,-12(fp)
 400190c:	e1bffe15 	stw	r6,-8(fp)
 4001910:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	alt_u16 color16;


	// encode to RGB  5 6 5
	color16 = (color & 0xFF) >> 3; // blue
 4001914:	e0bffe17 	ldw	r2,-8(fp)
 4001918:	10803fcc 	andi	r2,r2,255
 400191c:	1004d0fa 	srli	r2,r2,3
 4001920:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xFC00) >> 5; // green
 4001924:	e0bffe17 	ldw	r2,-8(fp)
 4001928:	10bf000c 	andi	r2,r2,64512
 400192c:	1004d17a 	srli	r2,r2,5
 4001930:	1007883a 	mov	r3,r2
 4001934:	e0bffb0b 	ldhu	r2,-20(fp)
 4001938:	10c4b03a 	or	r2,r2,r3
 400193c:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xF80000) >> 8; // blue
 4001940:	e0bffe17 	ldw	r2,-8(fp)
 4001944:	10803e2c 	andhi	r2,r2,248
 4001948:	1004d23a 	srli	r2,r2,8
 400194c:	1007883a 	mov	r3,r2
 4001950:	e0bffb0b 	ldhu	r2,-20(fp)
 4001954:	10c4b03a 	or	r2,r2,r3
 4001958:	e0bffb0d 	sth	r2,-20(fp)
	LCD_DrawPoint(horiz, vert, color16);
 400195c:	e0bffc17 	ldw	r2,-16(fp)
 4001960:	113fffcc 	andi	r4,r2,65535
 4001964:	e0bffd17 	ldw	r2,-12(fp)
 4001968:	117fffcc 	andi	r5,r2,65535
 400196c:	e1bffb0b 	ldhu	r6,-20(fp)
 4001970:	40007440 	call	4000744 <LCD_DrawPoint>
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}
#endif

}
 4001974:	e037883a 	mov	sp,fp
 4001978:	dfc00117 	ldw	ra,4(sp)
 400197c:	df000017 	ldw	fp,0(sp)
 4001980:	dec00204 	addi	sp,sp,8
 4001984:	f800283a 	ret

04001988 <vid_get_pixel>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
 4001988:	defffb04 	addi	sp,sp,-20
 400198c:	dfc00415 	stw	ra,16(sp)
 4001990:	df000315 	stw	fp,12(sp)
 4001994:	df000304 	addi	fp,sp,12
 4001998:	e13ffd15 	stw	r4,-12(fp)
 400199c:	e17ffe15 	stw	r5,-8(fp)
 40019a0:	e1bfff15 	stw	r6,-4(fp)
#ifdef LT24
	printf("vid_get_pixel is not implemented\r\n");
 40019a4:	010100f4 	movhi	r4,1027
 40019a8:	21368a04 	addi	r4,r4,-9688
 40019ac:	40093e80 	call	40093e8 <puts>
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  return(IORD_16DIRECT(addr, 0));
#endif
}
 40019b0:	e037883a 	mov	sp,fp
 40019b4:	dfc00117 	ldw	ra,4(sp)
 40019b8:	df000017 	ldw	fp,0(sp)
 40019bc:	dec00204 	addi	sp,sp,8
 40019c0:	f800283a 	ret

040019c4 <vid_paint_block>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
 40019c4:	defff804 	addi	sp,sp,-32
 40019c8:	dfc00715 	stw	ra,28(sp)
 40019cc:	df000615 	stw	fp,24(sp)
 40019d0:	df000604 	addi	fp,sp,24
 40019d4:	e13ffc15 	stw	r4,-16(fp)
 40019d8:	e17ffd15 	stw	r5,-12(fp)
 40019dc:	e1bffe15 	stw	r6,-8(fp)
 40019e0:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
 40019e4:	e0bffd17 	ldw	r2,-12(fp)
 40019e8:	e0bffa15 	stw	r2,-24(fp)
 40019ec:	00001106 	br	4001a34 <vid_paint_block+0x70>
		for(x=Hstart;x<Hend;x++){
 40019f0:	e0bffc17 	ldw	r2,-16(fp)
 40019f4:	e0bffb15 	stw	r2,-20(fp)
 40019f8:	00000806 	br	4001a1c <vid_paint_block+0x58>
			vid_set_pixel(x, y, color, display);
 40019fc:	e1800217 	ldw	r6,8(fp)
 4001a00:	e13ffb17 	ldw	r4,-20(fp)
 4001a04:	e17ffa17 	ldw	r5,-24(fp)
 4001a08:	e1c00317 	ldw	r7,12(fp)
 4001a0c:	40018f40 	call	40018f4 <vid_set_pixel>
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
		for(x=Hstart;x<Hend;x++){
 4001a10:	e0bffb17 	ldw	r2,-20(fp)
 4001a14:	10800044 	addi	r2,r2,1
 4001a18:	e0bffb15 	stw	r2,-20(fp)
 4001a1c:	e0fffb17 	ldw	r3,-20(fp)
 4001a20:	e0bffe17 	ldw	r2,-8(fp)
 4001a24:	18bff516 	blt	r3,r2,40019fc <vid_paint_block+0x38>
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
 4001a28:	e0bffa17 	ldw	r2,-24(fp)
 4001a2c:	10800044 	addi	r2,r2,1
 4001a30:	e0bffa15 	stw	r2,-24(fp)
 4001a34:	e0fffa17 	ldw	r3,-24(fp)
 4001a38:	e0bfff17 	ldw	r2,-4(fp)
 4001a3c:	18bfec16 	blt	r3,r2,40019f0 <vid_paint_block+0x2c>
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
#endif
}
 4001a40:	e037883a 	mov	sp,fp
 4001a44:	dfc00117 	ldw	ra,4(sp)
 4001a48:	df000017 	ldw	fp,0(sp)
 4001a4c:	dec00204 	addi	sp,sp,8
 4001a50:	f800283a 	ret

04001a54 <vid_draw_horiz_line>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
 4001a54:	defff904 	addi	sp,sp,-28
 4001a58:	dfc00615 	stw	ra,24(sp)
 4001a5c:	df000515 	stw	fp,20(sp)
 4001a60:	df000504 	addi	fp,sp,20
 4001a64:	e1bffe15 	stw	r6,-8(fp)
 4001a68:	e1ffff15 	stw	r7,-4(fp)
 4001a6c:	e13ffc0d 	sth	r4,-16(fp)
 4001a70:	e17ffd0d 	sth	r5,-12(fp)
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
 4001a74:	e0bffc0f 	ldh	r2,-16(fp)
 4001a78:	e0bffb15 	stw	r2,-20(fp)
 4001a7c:	00000806 	br	4001aa0 <vid_draw_horiz_line+0x4c>
		vid_set_pixel(x, V, color, display);
 4001a80:	e1bfff17 	ldw	r6,-4(fp)
 4001a84:	e13ffb17 	ldw	r4,-20(fp)
 4001a88:	e17ffe17 	ldw	r5,-8(fp)
 4001a8c:	e1c00217 	ldw	r7,8(fp)
 4001a90:	40018f40 	call	40018f4 <vid_set_pixel>
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
 4001a94:	e0bffb17 	ldw	r2,-20(fp)
 4001a98:	10800044 	addi	r2,r2,1
 4001a9c:	e0bffb15 	stw	r2,-20(fp)
 4001aa0:	e0fffd0f 	ldh	r3,-12(fp)
 4001aa4:	e0bffb17 	ldw	r2,-20(fp)
 4001aa8:	10fff516 	blt	r2,r3,4001a80 <vid_draw_horiz_line+0x2c>
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
  }
  free(fast_buffer);
#endif

}
 4001aac:	e037883a 	mov	sp,fp
 4001ab0:	dfc00117 	ldw	ra,4(sp)
 4001ab4:	df000017 	ldw	fp,0(sp)
 4001ab8:	dec00204 	addi	sp,sp,8
 4001abc:	f800283a 	ret

04001ac0 <vid_merge_colors>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
 4001ac0:	defffc04 	addi	sp,sp,-16
 4001ac4:	df000315 	stw	fp,12(sp)
 4001ac8:	df000304 	addi	fp,sp,12
 4001acc:	e13ffd15 	stw	r4,-12(fp)
 4001ad0:	e17ffe15 	stw	r5,-8(fp)
 4001ad4:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
 4001ad8:	e0bffe17 	ldw	r2,-8(fp)
 4001adc:	1085883a 	add	r2,r2,r2
 4001ae0:	10800054 	ori	r2,r2,1
 4001ae4:	1006917a 	slli	r3,r2,5
 4001ae8:	e0bfff17 	ldw	r2,-4(fp)
 4001aec:	1886b03a 	or	r3,r3,r2
 4001af0:	e0bffd17 	ldw	r2,-12(fp)
 4001af4:	100492fa 	slli	r2,r2,11
 4001af8:	1884b03a 	or	r2,r3,r2
}
 4001afc:	e037883a 	mov	sp,fp
 4001b00:	df000017 	ldw	fp,0(sp)
 4001b04:	dec00104 	addi	sp,sp,4
 4001b08:	f800283a 	ret

04001b0c <vid_color_convert24_16>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
 4001b0c:	defffc04 	addi	sp,sp,-16
 4001b10:	df000315 	stw	fp,12(sp)
 4001b14:	df000304 	addi	fp,sp,12
 4001b18:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
 4001b1c:	e0bfff17 	ldw	r2,-4(fp)
 4001b20:	10800003 	ldbu	r2,0(r2)
 4001b24:	1007883a 	mov	r3,r2
 4001b28:	00bffe04 	movi	r2,-8
 4001b2c:	1884703a 	and	r2,r3,r2
 4001b30:	e0bffe05 	stb	r2,-8(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
 4001b34:	e0bfff17 	ldw	r2,-4(fp)
 4001b38:	10800044 	addi	r2,r2,1
 4001b3c:	10800003 	ldbu	r2,0(r2)
 4001b40:	1007883a 	mov	r3,r2
 4001b44:	00bfff04 	movi	r2,-4
 4001b48:	1884703a 	and	r2,r3,r2
 4001b4c:	e0bffdc5 	stb	r2,-9(fp)
	blue = *(color24 + 2) & 0xF8;
 4001b50:	e0bfff17 	ldw	r2,-4(fp)
 4001b54:	10800084 	addi	r2,r2,2
 4001b58:	10800003 	ldbu	r2,0(r2)
 4001b5c:	1007883a 	mov	r3,r2
 4001b60:	00bffe04 	movi	r2,-8
 4001b64:	1884703a 	and	r2,r3,r2
 4001b68:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
 4001b6c:	e0bffd83 	ldbu	r2,-10(fp)
 4001b70:	1004d0fa 	srli	r2,r2,3
 4001b74:	10c03fcc 	andi	r3,r2,255
 4001b78:	e0bffdc3 	ldbu	r2,-9(fp)
 4001b7c:	100490fa 	slli	r2,r2,3
 4001b80:	1884b03a 	or	r2,r3,r2
 4001b84:	1007883a 	mov	r3,r2
 4001b88:	e0bffe03 	ldbu	r2,-8(fp)
 4001b8c:	1004923a 	slli	r2,r2,8
 4001b90:	1884b03a 	or	r2,r3,r2
 4001b94:	e0bffd0d 	sth	r2,-12(fp)
	return output;
 4001b98:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4001b9c:	e037883a 	mov	sp,fp
 4001ba0:	df000017 	ldw	fp,0(sp)
 4001ba4:	dec00104 	addi	sp,sp,4
 4001ba8:	f800283a 	ret

04001bac <vid_color_convert16_24>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
 4001bac:	defffd04 	addi	sp,sp,-12
 4001bb0:	df000215 	stw	fp,8(sp)
 4001bb4:	df000204 	addi	fp,sp,8
 4001bb8:	e17fff15 	stw	r5,-4(fp)
 4001bbc:	e13ffe0d 	sth	r4,-8(fp)
	*(color24 + 0) = color16 >> 11;
 4001bc0:	e0bffe0b 	ldhu	r2,-8(fp)
 4001bc4:	1004d2fa 	srli	r2,r2,11
 4001bc8:	1007883a 	mov	r3,r2
 4001bcc:	e0bfff17 	ldw	r2,-4(fp)
 4001bd0:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
 4001bd4:	e0bfff17 	ldw	r2,-4(fp)
 4001bd8:	10c00044 	addi	r3,r2,1
 4001bdc:	e0bffe0b 	ldhu	r2,-8(fp)
 4001be0:	10800f8c 	andi	r2,r2,62
 4001be4:	1005d17a 	srai	r2,r2,5
 4001be8:	18800005 	stb	r2,0(r3)
	*(color24 + 2) = (color16 & 0x1F);
 4001bec:	e0bfff17 	ldw	r2,-4(fp)
 4001bf0:	10c00084 	addi	r3,r2,2
 4001bf4:	e0bffe0b 	ldhu	r2,-8(fp)
 4001bf8:	108007cc 	andi	r2,r2,31
 4001bfc:	18800005 	stb	r2,0(r3)
	
	return (0);
 4001c00:	0005883a 	mov	r2,zero
}
 4001c04:	e037883a 	mov	sp,fp
 4001c08:	df000017 	ldw	fp,0(sp)
 4001c0c:	dec00104 	addi	sp,sp,4
 4001c10:	f800283a 	ret

04001c14 <vid_copy_line_to_frame_buffer>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
 4001c14:	defffa04 	addi	sp,sp,-24
 4001c18:	dfc00515 	stw	ra,20(sp)
 4001c1c:	df000415 	stw	fp,16(sp)
 4001c20:	df000404 	addi	fp,sp,16
 4001c24:	e13ffc15 	stw	r4,-16(fp)
 4001c28:	e17ffd15 	stw	r5,-12(fp)
 4001c2c:	e1bffe15 	stw	r6,-8(fp)
 4001c30:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("vid_copy_line_to_frame_buffer is not implemented!\r\n");
 4001c34:	010100f4 	movhi	r4,1027
 4001c38:	21369304 	addi	r4,r4,-9652
 4001c3c:	40093e80 	call	40093e8 <puts>
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
    }
  }
  return(0);
#endif
}
 4001c40:	e037883a 	mov	sp,fp
 4001c44:	dfc00117 	ldw	ra,4(sp)
 4001c48:	df000017 	ldw	fp,0(sp)
 4001c4c:	dec00204 	addi	sp,sp,8
 4001c50:	f800283a 	ret

04001c54 <vid_draw_sloped_line>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
 4001c54:	deffef04 	addi	sp,sp,-68
 4001c58:	dfc01015 	stw	ra,64(sp)
 4001c5c:	df000f15 	stw	fp,60(sp)
 4001c60:	df000f04 	addi	fp,sp,60
 4001c64:	e0800217 	ldw	r2,8(fp)
 4001c68:	e13ffb0d 	sth	r4,-20(fp)
 4001c6c:	e17ffc0d 	sth	r5,-16(fp)
 4001c70:	e1bffd0d 	sth	r6,-12(fp)
 4001c74:	e1fffe0d 	sth	r7,-8(fp)
 4001c78:	e0bfff0d 	sth	r2,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
 4001c7c:	e0fffd0b 	ldhu	r3,-12(fp)
 4001c80:	e0bffb0b 	ldhu	r2,-20(fp)
 4001c84:	1885c83a 	sub	r2,r3,r2
 4001c88:	e0bffa15 	stw	r2,-24(fp)
 4001c8c:	e0bffa17 	ldw	r2,-24(fp)
 4001c90:	1004403a 	cmpge	r2,r2,zero
 4001c94:	1000031e 	bne	r2,zero,4001ca4 <vid_draw_sloped_line+0x50>
 4001c98:	e0bffa17 	ldw	r2,-24(fp)
 4001c9c:	0085c83a 	sub	r2,zero,r2
 4001ca0:	e0bffa15 	stw	r2,-24(fp)
  int vert_delta = abs(vert_end-vert_start);
 4001ca4:	e0fffe0b 	ldhu	r3,-8(fp)
 4001ca8:	e0bffc0b 	ldhu	r2,-16(fp)
 4001cac:	1885c83a 	sub	r2,r3,r2
 4001cb0:	e0bff915 	stw	r2,-28(fp)
 4001cb4:	e0bff917 	ldw	r2,-28(fp)
 4001cb8:	1004403a 	cmpge	r2,r2,zero
 4001cbc:	1000031e 	bne	r2,zero,4001ccc <vid_draw_sloped_line+0x78>
 4001cc0:	e0bff917 	ldw	r2,-28(fp)
 4001cc4:	0085c83a 	sub	r2,zero,r2
 4001cc8:	e0bff915 	stw	r2,-28(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
 4001ccc:	e0fffb0b 	ldhu	r3,-20(fp)
 4001cd0:	e0bffd0b 	ldhu	r2,-12(fp)
 4001cd4:	10c0032e 	bgeu	r2,r3,4001ce4 <vid_draw_sloped_line+0x90>
 4001cd8:	00bfffc4 	movi	r2,-1
 4001cdc:	e0bff815 	stw	r2,-32(fp)
 4001ce0:	00000206 	br	4001cec <vid_draw_sloped_line+0x98>
 4001ce4:	00800044 	movi	r2,1
 4001ce8:	e0bff815 	stw	r2,-32(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
 4001cec:	e0fffc0b 	ldhu	r3,-16(fp)
 4001cf0:	e0bffe0b 	ldhu	r2,-8(fp)
 4001cf4:	10c0032e 	bgeu	r2,r3,4001d04 <vid_draw_sloped_line+0xb0>
 4001cf8:	00bfffc4 	movi	r2,-1
 4001cfc:	e0bff715 	stw	r2,-36(fp)
 4001d00:	00000206 	br	4001d0c <vid_draw_sloped_line+0xb8>
 4001d04:	00800044 	movi	r2,1
 4001d08:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
 4001d0c:	e0fffa17 	ldw	r3,-24(fp)
 4001d10:	e0bff917 	ldw	r2,-28(fp)
 4001d14:	18803516 	blt	r3,r2,4001dec <vid_draw_sloped_line+0x198>
    int dPr   = vert_delta<<1;
 4001d18:	e0bff917 	ldw	r2,-28(fp)
 4001d1c:	1085883a 	add	r2,r2,r2
 4001d20:	e0bff615 	stw	r2,-40(fp)
    int dPru  = dPr - (horiz_delta<<1);
 4001d24:	e0bffa17 	ldw	r2,-24(fp)
 4001d28:	1085883a 	add	r2,r2,r2
 4001d2c:	1007883a 	mov	r3,r2
 4001d30:	e0bff617 	ldw	r2,-40(fp)
 4001d34:	10c5c83a 	sub	r2,r2,r3
 4001d38:	e0bff515 	stw	r2,-44(fp)
    int P     = dPr - horiz_delta;
 4001d3c:	e0fff617 	ldw	r3,-40(fp)
 4001d40:	e0bffa17 	ldw	r2,-24(fp)
 4001d44:	1885c83a 	sub	r2,r3,r2
 4001d48:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 4001d4c:	00002306 	br	4001ddc <vid_draw_sloped_line+0x188>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 4001d50:	e13ffb0b 	ldhu	r4,-20(fp)
 4001d54:	e17ffc0b 	ldhu	r5,-16(fp)
 4001d58:	e1800317 	ldw	r6,12(fp)
 4001d5c:	e1c00417 	ldw	r7,16(fp)
 4001d60:	40018f40 	call	40018f4 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
 4001d64:	e0bff417 	ldw	r2,-48(fp)
 4001d68:	10800050 	cmplti	r2,r2,1
 4001d6c:	10000f1e 	bne	r2,zero,4001dac <vid_draw_sloped_line+0x158>
        horiz_start+=horiz_incr;
 4001d70:	e0bff817 	ldw	r2,-32(fp)
 4001d74:	1007883a 	mov	r3,r2
 4001d78:	e0bffb0b 	ldhu	r2,-20(fp)
 4001d7c:	10c5883a 	add	r2,r2,r3
 4001d80:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 4001d84:	e0bff717 	ldw	r2,-36(fp)
 4001d88:	1007883a 	mov	r3,r2
 4001d8c:	e0bffc0b 	ldhu	r2,-16(fp)
 4001d90:	10c5883a 	add	r2,r2,r3
 4001d94:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 4001d98:	e0fff417 	ldw	r3,-48(fp)
 4001d9c:	e0bff517 	ldw	r2,-44(fp)
 4001da0:	1885883a 	add	r2,r3,r2
 4001da4:	e0bff415 	stw	r2,-48(fp)
 4001da8:	00000906 	br	4001dd0 <vid_draw_sloped_line+0x17c>
      } else {
        horiz_start+=horiz_incr;
 4001dac:	e0bff817 	ldw	r2,-32(fp)
 4001db0:	1007883a 	mov	r3,r2
 4001db4:	e0bffb0b 	ldhu	r2,-20(fp)
 4001db8:	10c5883a 	add	r2,r2,r3
 4001dbc:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
 4001dc0:	e0fff417 	ldw	r3,-48(fp)
 4001dc4:	e0bff617 	ldw	r2,-40(fp)
 4001dc8:	1885883a 	add	r2,r3,r2
 4001dcc:	e0bff415 	stw	r2,-48(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 4001dd0:	e0bffa17 	ldw	r2,-24(fp)
 4001dd4:	10bfffc4 	addi	r2,r2,-1
 4001dd8:	e0bffa15 	stw	r2,-24(fp)
 4001ddc:	e0bffa17 	ldw	r2,-24(fp)
 4001de0:	1004403a 	cmpge	r2,r2,zero
 4001de4:	103fda1e 	bne	r2,zero,4001d50 <vid_draw_sloped_line+0xfc>
 4001de8:	00003406 	br	4001ebc <vid_draw_sloped_line+0x268>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
 4001dec:	e0bffa17 	ldw	r2,-24(fp)
 4001df0:	1085883a 	add	r2,r2,r2
 4001df4:	e0bff315 	stw	r2,-52(fp)
    int dPru  = dPr - (vert_delta<<1);
 4001df8:	e0bff917 	ldw	r2,-28(fp)
 4001dfc:	1085883a 	add	r2,r2,r2
 4001e00:	1007883a 	mov	r3,r2
 4001e04:	e0bff317 	ldw	r2,-52(fp)
 4001e08:	10c5c83a 	sub	r2,r2,r3
 4001e0c:	e0bff215 	stw	r2,-56(fp)
    int P     = dPr - vert_delta;
 4001e10:	e0fff317 	ldw	r3,-52(fp)
 4001e14:	e0bff917 	ldw	r2,-28(fp)
 4001e18:	1885c83a 	sub	r2,r3,r2
 4001e1c:	e0bff115 	stw	r2,-60(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4001e20:	00002306 	br	4001eb0 <vid_draw_sloped_line+0x25c>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
 4001e24:	e13ffb0b 	ldhu	r4,-20(fp)
 4001e28:	e17ffc0b 	ldhu	r5,-16(fp)
 4001e2c:	e1800317 	ldw	r6,12(fp)
 4001e30:	e1c00417 	ldw	r7,16(fp)
 4001e34:	40018f40 	call	40018f4 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
 4001e38:	e0bff117 	ldw	r2,-60(fp)
 4001e3c:	10800050 	cmplti	r2,r2,1
 4001e40:	10000f1e 	bne	r2,zero,4001e80 <vid_draw_sloped_line+0x22c>
        horiz_start+=horiz_incr;
 4001e44:	e0bff817 	ldw	r2,-32(fp)
 4001e48:	1007883a 	mov	r3,r2
 4001e4c:	e0bffb0b 	ldhu	r2,-20(fp)
 4001e50:	10c5883a 	add	r2,r2,r3
 4001e54:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 4001e58:	e0bff717 	ldw	r2,-36(fp)
 4001e5c:	1007883a 	mov	r3,r2
 4001e60:	e0bffc0b 	ldhu	r2,-16(fp)
 4001e64:	10c5883a 	add	r2,r2,r3
 4001e68:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 4001e6c:	e0fff117 	ldw	r3,-60(fp)
 4001e70:	e0bff217 	ldw	r2,-56(fp)
 4001e74:	1885883a 	add	r2,r3,r2
 4001e78:	e0bff115 	stw	r2,-60(fp)
 4001e7c:	00000906 	br	4001ea4 <vid_draw_sloped_line+0x250>
      } else {
        vert_start+=vert_incr;
 4001e80:	e0bff717 	ldw	r2,-36(fp)
 4001e84:	1007883a 	mov	r3,r2
 4001e88:	e0bffc0b 	ldhu	r2,-16(fp)
 4001e8c:	10c5883a 	add	r2,r2,r3
 4001e90:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
 4001e94:	e0fff117 	ldw	r3,-60(fp)
 4001e98:	e0bff317 	ldw	r2,-52(fp)
 4001e9c:	1885883a 	add	r2,r3,r2
 4001ea0:	e0bff115 	stw	r2,-60(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 4001ea4:	e0bff917 	ldw	r2,-28(fp)
 4001ea8:	10bfffc4 	addi	r2,r2,-1
 4001eac:	e0bff915 	stw	r2,-28(fp)
 4001eb0:	e0bff917 	ldw	r2,-28(fp)
 4001eb4:	1004403a 	cmpge	r2,r2,zero
 4001eb8:	103fda1e 	bne	r2,zero,4001e24 <vid_draw_sloped_line+0x1d0>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 4001ebc:	e037883a 	mov	sp,fp
 4001ec0:	dfc00117 	ldw	ra,4(sp)
 4001ec4:	df000017 	ldw	fp,0(sp)
 4001ec8:	dec00204 	addi	sp,sp,8
 4001ecc:	f800283a 	ret

04001ed0 <vid_draw_circle>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
 4001ed0:	defff004 	addi	sp,sp,-64
 4001ed4:	dfc00f15 	stw	ra,60(sp)
 4001ed8:	df000e15 	stw	fp,56(sp)
 4001edc:	df000e04 	addi	fp,sp,56
 4001ee0:	e13ffa15 	stw	r4,-24(fp)
 4001ee4:	e17ffb15 	stw	r5,-20(fp)
 4001ee8:	e1bffc15 	stw	r6,-16(fp)
 4001eec:	e1fffd15 	stw	r7,-12(fp)
 4001ef0:	e0800217 	ldw	r2,8(fp)
 4001ef4:	e0bffe05 	stb	r2,-8(fp)
  int x = 0;
 4001ef8:	e03ff915 	stw	zero,-28(fp)
  int y = radius;
 4001efc:	e0bffc17 	ldw	r2,-16(fp)
 4001f00:	e0bff815 	stw	r2,-32(fp)
  int p = (5 - radius*4)/4;
 4001f04:	e0bffc17 	ldw	r2,-16(fp)
 4001f08:	1085883a 	add	r2,r2,r2
 4001f0c:	1085883a 	add	r2,r2,r2
 4001f10:	1007883a 	mov	r3,r2
 4001f14:	00800144 	movi	r2,5
 4001f18:	10c5c83a 	sub	r2,r2,r3
 4001f1c:	e0bfff15 	stw	r2,-4(fp)
 4001f20:	e0ffff17 	ldw	r3,-4(fp)
 4001f24:	1804403a 	cmpge	r2,r3,zero
 4001f28:	1000031e 	bne	r2,zero,4001f38 <vid_draw_circle+0x68>
 4001f2c:	e0bfff17 	ldw	r2,-4(fp)
 4001f30:	108000c4 	addi	r2,r2,3
 4001f34:	e0bfff15 	stw	r2,-4(fp)
 4001f38:	e0ffff17 	ldw	r3,-4(fp)
 4001f3c:	1805d0ba 	srai	r2,r3,2
 4001f40:	e0bff715 	stw	r2,-36(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 4001f44:	e0fffe07 	ldb	r3,-8(fp)
 4001f48:	d8000015 	stw	zero,0(sp)
 4001f4c:	d8000115 	stw	zero,4(sp)
 4001f50:	e0bffd17 	ldw	r2,-12(fp)
 4001f54:	d8800215 	stw	r2,8(sp)
 4001f58:	d8c00315 	stw	r3,12(sp)
 4001f5c:	e0800317 	ldw	r2,12(fp)
 4001f60:	d8800415 	stw	r2,16(sp)
 4001f64:	e13ffa17 	ldw	r4,-24(fp)
 4001f68:	e17ffb17 	ldw	r5,-20(fp)
 4001f6c:	e1bff917 	ldw	r6,-28(fp)
 4001f70:	e1fff817 	ldw	r7,-32(fp)
 4001f74:	40024080 	call	4002408 <vid_round_corner_points>

  // Now start moving out from those points until the lines meet
  while (x < y) {
 4001f78:	00002706 	br	4002018 <vid_draw_circle+0x148>
    x++;
 4001f7c:	e0bff917 	ldw	r2,-28(fp)
 4001f80:	10800044 	addi	r2,r2,1
 4001f84:	e0bff915 	stw	r2,-28(fp)
    if (p < 0) {
 4001f88:	e0bff717 	ldw	r2,-36(fp)
 4001f8c:	1004403a 	cmpge	r2,r2,zero
 4001f90:	1000081e 	bne	r2,zero,4001fb4 <vid_draw_circle+0xe4>
      p += 2*x+1;
 4001f94:	e0bff917 	ldw	r2,-28(fp)
 4001f98:	1085883a 	add	r2,r2,r2
 4001f9c:	1007883a 	mov	r3,r2
 4001fa0:	e0bff717 	ldw	r2,-36(fp)
 4001fa4:	1885883a 	add	r2,r3,r2
 4001fa8:	10800044 	addi	r2,r2,1
 4001fac:	e0bff715 	stw	r2,-36(fp)
 4001fb0:	00000c06 	br	4001fe4 <vid_draw_circle+0x114>
    } else {
      y--;
 4001fb4:	e0bff817 	ldw	r2,-32(fp)
 4001fb8:	10bfffc4 	addi	r2,r2,-1
 4001fbc:	e0bff815 	stw	r2,-32(fp)
      p += 2*(x-y)+1;
 4001fc0:	e0fff917 	ldw	r3,-28(fp)
 4001fc4:	e0bff817 	ldw	r2,-32(fp)
 4001fc8:	1885c83a 	sub	r2,r3,r2
 4001fcc:	1085883a 	add	r2,r2,r2
 4001fd0:	1007883a 	mov	r3,r2
 4001fd4:	e0bff717 	ldw	r2,-36(fp)
 4001fd8:	1885883a 	add	r2,r3,r2
 4001fdc:	10800044 	addi	r2,r2,1
 4001fe0:	e0bff715 	stw	r2,-36(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 4001fe4:	e0bffe07 	ldb	r2,-8(fp)
 4001fe8:	d8000015 	stw	zero,0(sp)
 4001fec:	d8000115 	stw	zero,4(sp)
 4001ff0:	e0fffd17 	ldw	r3,-12(fp)
 4001ff4:	d8c00215 	stw	r3,8(sp)
 4001ff8:	d8800315 	stw	r2,12(sp)
 4001ffc:	e0800317 	ldw	r2,12(fp)
 4002000:	d8800415 	stw	r2,16(sp)
 4002004:	e13ffa17 	ldw	r4,-24(fp)
 4002008:	e17ffb17 	ldw	r5,-20(fp)
 400200c:	e1bff917 	ldw	r6,-28(fp)
 4002010:	e1fff817 	ldw	r7,-32(fp)
 4002014:	40024080 	call	4002408 <vid_round_corner_points>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
 4002018:	e0fff917 	ldw	r3,-28(fp)
 400201c:	e0bff817 	ldw	r2,-32(fp)
 4002020:	18bfd616 	blt	r3,r2,4001f7c <vid_draw_circle+0xac>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
 4002024:	0005883a 	mov	r2,zero
}
 4002028:	e037883a 	mov	sp,fp
 400202c:	dfc00117 	ldw	ra,4(sp)
 4002030:	df000017 	ldw	fp,0(sp)
 4002034:	dec00204 	addi	sp,sp,8
 4002038:	f800283a 	ret

0400203c <vid_draw_round_corner_box>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
 400203c:	deffeb04 	addi	sp,sp,-84
 4002040:	dfc01415 	stw	ra,80(sp)
 4002044:	df001315 	stw	fp,76(sp)
 4002048:	df001304 	addi	fp,sp,76
 400204c:	e13ffb15 	stw	r4,-20(fp)
 4002050:	e17ffc15 	stw	r5,-16(fp)
 4002054:	e1bffd15 	stw	r6,-12(fp)
 4002058:	e1fffe15 	stw	r7,-8(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
 400205c:	e0fffb17 	ldw	r3,-20(fp)
 4002060:	e0bffd17 	ldw	r2,-12(fp)
 4002064:	10c0060e 	bge	r2,r3,4002080 <vid_draw_round_corner_box+0x44>
  {
    temp = horiz_end;
 4002068:	e0bffd17 	ldw	r2,-12(fp)
 400206c:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
 4002070:	e0bffb17 	ldw	r2,-20(fp)
 4002074:	e0bffd15 	stw	r2,-12(fp)
    horiz_start = temp;
 4002078:	e0bff617 	ldw	r2,-40(fp)
 400207c:	e0bffb15 	stw	r2,-20(fp)
  }
  
  if( vert_start > vert_end )
 4002080:	e0fffc17 	ldw	r3,-16(fp)
 4002084:	e0bffe17 	ldw	r2,-8(fp)
 4002088:	10c0060e 	bge	r2,r3,40020a4 <vid_draw_round_corner_box+0x68>
  {
    temp = vert_end;
 400208c:	e0bffe17 	ldw	r2,-8(fp)
 4002090:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
 4002094:	e0bffc17 	ldw	r2,-16(fp)
 4002098:	e0bffe15 	stw	r2,-8(fp)
    vert_start = temp;
 400209c:	e0bff617 	ldw	r2,-40(fp)
 40020a0:	e0bffc15 	stw	r2,-16(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
 40020a4:	e0fffd17 	ldw	r3,-12(fp)
 40020a8:	e0bffb17 	ldw	r2,-20(fp)
 40020ac:	1885c83a 	sub	r2,r3,r2
 40020b0:	e0bff515 	stw	r2,-44(fp)
  height = vert_end - vert_start;
 40020b4:	e0fffe17 	ldw	r3,-8(fp)
 40020b8:	e0bffc17 	ldw	r2,-16(fp)
 40020bc:	1885c83a 	sub	r2,r3,r2
 40020c0:	e0bff415 	stw	r2,-48(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
 40020c4:	e0c00217 	ldw	r3,8(fp)
 40020c8:	e0bff517 	ldw	r2,-44(fp)
 40020cc:	1004d07a 	srli	r2,r2,1
 40020d0:	10c0032e 	bgeu	r2,r3,40020e0 <vid_draw_round_corner_box+0xa4>
    radius = width / 2;
 40020d4:	e0bff517 	ldw	r2,-44(fp)
 40020d8:	1004d07a 	srli	r2,r2,1
 40020dc:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
 40020e0:	e0800217 	ldw	r2,8(fp)
 40020e4:	e0fff417 	ldw	r3,-48(fp)
 40020e8:	1806d07a 	srli	r3,r3,1
 40020ec:	1880032e 	bgeu	r3,r2,40020fc <vid_draw_round_corner_box+0xc0>
    radius = height / 2;
 40020f0:	e0bff417 	ldw	r2,-48(fp)
 40020f4:	1004d07a 	srli	r2,r2,1
 40020f8:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
 40020fc:	e0800217 	ldw	r2,8(fp)
 4002100:	1085883a 	add	r2,r2,r2
 4002104:	e0bff715 	stw	r2,-36(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
 4002108:	e0fff717 	ldw	r3,-36(fp)
 400210c:	e0bff517 	ldw	r2,-44(fp)
 4002110:	10c5c83a 	sub	r2,r2,r3
 4002114:	e0bff315 	stw	r2,-52(fp)
  straight_height = height - diameter;
 4002118:	e0fff717 	ldw	r3,-36(fp)
 400211c:	e0bff417 	ldw	r2,-48(fp)
 4002120:	10c5c83a 	sub	r2,r2,r3
 4002124:	e0bff215 	stw	r2,-56(fp)

  x = 0;
 4002128:	e03ffa15 	stw	zero,-24(fp)
  y = radius;
 400212c:	e0800217 	ldw	r2,8(fp)
 4002130:	e0bff915 	stw	r2,-28(fp)
  p = (5 - radius*4)/4;
 4002134:	e0800217 	ldw	r2,8(fp)
 4002138:	1085883a 	add	r2,r2,r2
 400213c:	1085883a 	add	r2,r2,r2
 4002140:	1007883a 	mov	r3,r2
 4002144:	00800144 	movi	r2,5
 4002148:	10c5c83a 	sub	r2,r2,r3
 400214c:	e0bfff15 	stw	r2,-4(fp)
 4002150:	e0ffff17 	ldw	r3,-4(fp)
 4002154:	1804403a 	cmpge	r2,r3,zero
 4002158:	1000031e 	bne	r2,zero,4002168 <vid_draw_round_corner_box+0x12c>
 400215c:	e0bfff17 	ldw	r2,-4(fp)
 4002160:	108000c4 	addi	r2,r2,3
 4002164:	e0bfff15 	stw	r2,-4(fp)
 4002168:	e0ffff17 	ldw	r3,-4(fp)
 400216c:	1805d0ba 	srai	r2,r3,2
 4002170:	e0bff815 	stw	r2,-32(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 4002174:	e0fffb17 	ldw	r3,-20(fp)
 4002178:	e0800217 	ldw	r2,8(fp)
 400217c:	188d883a 	add	r6,r3,r2
 4002180:	e0fffc17 	ldw	r3,-16(fp)
 4002184:	e0800217 	ldw	r2,8(fp)
 4002188:	188f883a 	add	r7,r3,r2
 400218c:	e23ffa17 	ldw	r8,-24(fp)
 4002190:	e27ff917 	ldw	r9,-28(fp)
 4002194:	e0fff317 	ldw	r3,-52(fp)
 4002198:	e13ff217 	ldw	r4,-56(fp)
 400219c:	e0800417 	ldw	r2,16(fp)
 40021a0:	11403fcc 	andi	r5,r2,255
 40021a4:	2940201c 	xori	r5,r5,128
 40021a8:	297fe004 	addi	r5,r5,-128
 40021ac:	d8c00015 	stw	r3,0(sp)
 40021b0:	d9000115 	stw	r4,4(sp)
 40021b4:	e0800317 	ldw	r2,12(fp)
 40021b8:	d8800215 	stw	r2,8(sp)
 40021bc:	d9400315 	stw	r5,12(sp)
 40021c0:	e0800517 	ldw	r2,20(fp)
 40021c4:	d8800415 	stw	r2,16(sp)
 40021c8:	3009883a 	mov	r4,r6
 40021cc:	380b883a 	mov	r5,r7
 40021d0:	400d883a 	mov	r6,r8
 40021d4:	480f883a 	mov	r7,r9
 40021d8:	40024080 	call	4002408 <vid_round_corner_points>
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 40021dc:	00003406 	br	40022b0 <vid_draw_round_corner_box+0x274>
    x++;
 40021e0:	e0bffa17 	ldw	r2,-24(fp)
 40021e4:	10800044 	addi	r2,r2,1
 40021e8:	e0bffa15 	stw	r2,-24(fp)
    if (p < 0) {
 40021ec:	e0bff817 	ldw	r2,-32(fp)
 40021f0:	1004403a 	cmpge	r2,r2,zero
 40021f4:	1000081e 	bne	r2,zero,4002218 <vid_draw_round_corner_box+0x1dc>
      p += 2*x+1;
 40021f8:	e0bffa17 	ldw	r2,-24(fp)
 40021fc:	1085883a 	add	r2,r2,r2
 4002200:	1007883a 	mov	r3,r2
 4002204:	e0bff817 	ldw	r2,-32(fp)
 4002208:	1885883a 	add	r2,r3,r2
 400220c:	10800044 	addi	r2,r2,1
 4002210:	e0bff815 	stw	r2,-32(fp)
 4002214:	00000c06 	br	4002248 <vid_draw_round_corner_box+0x20c>
    } else {
      y--;
 4002218:	e0bff917 	ldw	r2,-28(fp)
 400221c:	10bfffc4 	addi	r2,r2,-1
 4002220:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
 4002224:	e0fffa17 	ldw	r3,-24(fp)
 4002228:	e0bff917 	ldw	r2,-28(fp)
 400222c:	1885c83a 	sub	r2,r3,r2
 4002230:	1085883a 	add	r2,r2,r2
 4002234:	1007883a 	mov	r3,r2
 4002238:	e0bff817 	ldw	r2,-32(fp)
 400223c:	1885883a 	add	r2,r3,r2
 4002240:	10800044 	addi	r2,r2,1
 4002244:	e0bff815 	stw	r2,-32(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 4002248:	e0fffb17 	ldw	r3,-20(fp)
 400224c:	e0800217 	ldw	r2,8(fp)
 4002250:	188d883a 	add	r6,r3,r2
 4002254:	e0fffc17 	ldw	r3,-16(fp)
 4002258:	e0800217 	ldw	r2,8(fp)
 400225c:	188f883a 	add	r7,r3,r2
 4002260:	e23ffa17 	ldw	r8,-24(fp)
 4002264:	e27ff917 	ldw	r9,-28(fp)
 4002268:	e0fff317 	ldw	r3,-52(fp)
 400226c:	e13ff217 	ldw	r4,-56(fp)
 4002270:	e0800417 	ldw	r2,16(fp)
 4002274:	11403fcc 	andi	r5,r2,255
 4002278:	2940201c 	xori	r5,r5,128
 400227c:	297fe004 	addi	r5,r5,-128
 4002280:	d8c00015 	stw	r3,0(sp)
 4002284:	d9000115 	stw	r4,4(sp)
 4002288:	e0800317 	ldw	r2,12(fp)
 400228c:	d8800215 	stw	r2,8(sp)
 4002290:	d9400315 	stw	r5,12(sp)
 4002294:	e0800517 	ldw	r2,20(fp)
 4002298:	d8800415 	stw	r2,16(sp)
 400229c:	3009883a 	mov	r4,r6
 40022a0:	380b883a 	mov	r5,r7
 40022a4:	400d883a 	mov	r6,r8
 40022a8:	480f883a 	mov	r7,r9
 40022ac:	40024080 	call	4002408 <vid_round_corner_points>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 40022b0:	e0fffa17 	ldw	r3,-24(fp)
 40022b4:	e0bff917 	ldw	r2,-28(fp)
 40022b8:	18bfc936 	bltu	r3,r2,40021e0 <vid_draw_round_corner_box+0x1a4>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
 40022bc:	e0800417 	ldw	r2,16(fp)
 40022c0:	1005003a 	cmpeq	r2,r2,zero
 40022c4:	10000e1e 	bne	r2,zero,4002300 <vid_draw_round_corner_box+0x2c4>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
 40022c8:	e0fffc17 	ldw	r3,-16(fp)
 40022cc:	e0800217 	ldw	r2,8(fp)
 40022d0:	188b883a 	add	r5,r3,r2
 40022d4:	e0fffe17 	ldw	r3,-8(fp)
 40022d8:	e0800217 	ldw	r2,8(fp)
 40022dc:	188fc83a 	sub	r7,r3,r2
 40022e0:	e0800317 	ldw	r2,12(fp)
 40022e4:	d8800015 	stw	r2,0(sp)
 40022e8:	e0800517 	ldw	r2,20(fp)
 40022ec:	d8800115 	stw	r2,4(sp)
 40022f0:	e13ffb17 	ldw	r4,-20(fp)
 40022f4:	e1bffd17 	ldw	r6,-12(fp)
 40022f8:	40019c40 	call	40019c4 <vid_paint_block>
 40022fc:	00003c06 	br	40023f0 <vid_draw_round_corner_box+0x3b4>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
 4002300:	e0fffc17 	ldw	r3,-16(fp)
 4002304:	e0800217 	ldw	r2,8(fp)
 4002308:	188b883a 	add	r5,r3,r2
 400230c:	e0fffe17 	ldw	r3,-8(fp)
 4002310:	e0800217 	ldw	r2,8(fp)
 4002314:	188fc83a 	sub	r7,r3,r2
 4002318:	00800044 	movi	r2,1
 400231c:	d8800015 	stw	r2,0(sp)
 4002320:	e0800317 	ldw	r2,12(fp)
 4002324:	d8800115 	stw	r2,4(sp)
 4002328:	e0800517 	ldw	r2,20(fp)
 400232c:	d8800215 	stw	r2,8(sp)
 4002330:	e13ffb17 	ldw	r4,-20(fp)
 4002334:	e1bffb17 	ldw	r6,-20(fp)
 4002338:	4000ea40 	call	4000ea4 <vid_draw_line>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
 400233c:	e0fffc17 	ldw	r3,-16(fp)
 4002340:	e0800217 	ldw	r2,8(fp)
 4002344:	188b883a 	add	r5,r3,r2
 4002348:	e0fffe17 	ldw	r3,-8(fp)
 400234c:	e0800217 	ldw	r2,8(fp)
 4002350:	188fc83a 	sub	r7,r3,r2
 4002354:	00800044 	movi	r2,1
 4002358:	d8800015 	stw	r2,0(sp)
 400235c:	e0800317 	ldw	r2,12(fp)
 4002360:	d8800115 	stw	r2,4(sp)
 4002364:	e0800517 	ldw	r2,20(fp)
 4002368:	d8800215 	stw	r2,8(sp)
 400236c:	e13ffd17 	ldw	r4,-12(fp)
 4002370:	e1bffd17 	ldw	r6,-12(fp)
 4002374:	4000ea40 	call	4000ea4 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
 4002378:	e0fffb17 	ldw	r3,-20(fp)
 400237c:	e0800217 	ldw	r2,8(fp)
 4002380:	1889883a 	add	r4,r3,r2
 4002384:	e0fffd17 	ldw	r3,-12(fp)
 4002388:	e0800217 	ldw	r2,8(fp)
 400238c:	188dc83a 	sub	r6,r3,r2
 4002390:	00800044 	movi	r2,1
 4002394:	d8800015 	stw	r2,0(sp)
 4002398:	e0800317 	ldw	r2,12(fp)
 400239c:	d8800115 	stw	r2,4(sp)
 40023a0:	e0800517 	ldw	r2,20(fp)
 40023a4:	d8800215 	stw	r2,8(sp)
 40023a8:	e17ffc17 	ldw	r5,-16(fp)
 40023ac:	e1fffc17 	ldw	r7,-16(fp)
 40023b0:	4000ea40 	call	4000ea4 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
 40023b4:	e0fffb17 	ldw	r3,-20(fp)
 40023b8:	e0800217 	ldw	r2,8(fp)
 40023bc:	1889883a 	add	r4,r3,r2
 40023c0:	e0fffd17 	ldw	r3,-12(fp)
 40023c4:	e0800217 	ldw	r2,8(fp)
 40023c8:	188dc83a 	sub	r6,r3,r2
 40023cc:	00800044 	movi	r2,1
 40023d0:	d8800015 	stw	r2,0(sp)
 40023d4:	e0800317 	ldw	r2,12(fp)
 40023d8:	d8800115 	stw	r2,4(sp)
 40023dc:	e0800517 	ldw	r2,20(fp)
 40023e0:	d8800215 	stw	r2,8(sp)
 40023e4:	e17ffe17 	ldw	r5,-8(fp)
 40023e8:	e1fffe17 	ldw	r7,-8(fp)
 40023ec:	4000ea40 	call	4000ea4 <vid_draw_line>
  }

  return (0);
 40023f0:	0005883a 	mov	r2,zero
}
 40023f4:	e037883a 	mov	sp,fp
 40023f8:	dfc00117 	ldw	ra,4(sp)
 40023fc:	df000017 	ldw	fp,0(sp)
 4002400:	dec00204 	addi	sp,sp,8
 4002404:	f800283a 	ret

04002408 <vid_round_corner_points>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
 4002408:	defff604 	addi	sp,sp,-40
 400240c:	dfc00915 	stw	ra,36(sp)
 4002410:	df000815 	stw	fp,32(sp)
 4002414:	df000804 	addi	fp,sp,32
 4002418:	e13ffb15 	stw	r4,-20(fp)
 400241c:	e17ffc15 	stw	r5,-16(fp)
 4002420:	e1bffd15 	stw	r6,-12(fp)
 4002424:	e1fffe15 	stw	r7,-8(fp)
 4002428:	e0800517 	ldw	r2,20(fp)
 400242c:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
 4002430:	e0bffd17 	ldw	r2,-12(fp)
 4002434:	1004c03a 	cmpne	r2,r2,zero
 4002438:	1000731e 	bne	r2,zero,4002608 <vid_round_corner_points+0x200>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
 400243c:	e0fffc17 	ldw	r3,-16(fp)
 4002440:	e0bffe17 	ldw	r2,-8(fp)
 4002444:	1887883a 	add	r3,r3,r2
 4002448:	e0800317 	ldw	r2,12(fp)
 400244c:	188b883a 	add	r5,r3,r2
 4002450:	e1800417 	ldw	r6,16(fp)
 4002454:	e13ffb17 	ldw	r4,-20(fp)
 4002458:	e1c00617 	ldw	r7,24(fp)
 400245c:	40018f40 	call	40018f4 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
 4002460:	e0fffb17 	ldw	r3,-20(fp)
 4002464:	e0800217 	ldw	r2,8(fp)
 4002468:	1889883a 	add	r4,r3,r2
 400246c:	e0fffc17 	ldw	r3,-16(fp)
 4002470:	e0bffe17 	ldw	r2,-8(fp)
 4002474:	1887883a 	add	r3,r3,r2
 4002478:	e0800317 	ldw	r2,12(fp)
 400247c:	188b883a 	add	r5,r3,r2
 4002480:	e1800417 	ldw	r6,16(fp)
 4002484:	e1c00617 	ldw	r7,24(fp)
 4002488:	40018f40 	call	40018f4 <vid_set_pixel>
        // top
        vid_set_pixel(cx, cy - y, color, display);
 400248c:	e0fffc17 	ldw	r3,-16(fp)
 4002490:	e0bffe17 	ldw	r2,-8(fp)
 4002494:	188bc83a 	sub	r5,r3,r2
 4002498:	e1800417 	ldw	r6,16(fp)
 400249c:	e13ffb17 	ldw	r4,-20(fp)
 40024a0:	e1c00617 	ldw	r7,24(fp)
 40024a4:	40018f40 	call	40018f4 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
 40024a8:	e0fffb17 	ldw	r3,-20(fp)
 40024ac:	e0800217 	ldw	r2,8(fp)
 40024b0:	1889883a 	add	r4,r3,r2
 40024b4:	e0fffc17 	ldw	r3,-16(fp)
 40024b8:	e0bffe17 	ldw	r2,-8(fp)
 40024bc:	188bc83a 	sub	r5,r3,r2
 40024c0:	e1800417 	ldw	r6,16(fp)
 40024c4:	e1c00617 	ldw	r7,24(fp)
 40024c8:	40018f40 	call	40018f4 <vid_set_pixel>

        if(fill) {
 40024cc:	e0bfff07 	ldb	r2,-4(fp)
 40024d0:	1005003a 	cmpeq	r2,r2,zero
 40024d4:	1000271e 	bne	r2,zero,4002574 <vid_round_corner_points+0x16c>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
 40024d8:	e0fffb17 	ldw	r3,-20(fp)
 40024dc:	e0bffe17 	ldw	r2,-8(fp)
 40024e0:	1889c83a 	sub	r4,r3,r2
 40024e4:	e0fffb17 	ldw	r3,-20(fp)
 40024e8:	e0bffe17 	ldw	r2,-8(fp)
 40024ec:	1887883a 	add	r3,r3,r2
 40024f0:	e0800217 	ldw	r2,8(fp)
 40024f4:	188d883a 	add	r6,r3,r2
 40024f8:	00800044 	movi	r2,1
 40024fc:	d8800015 	stw	r2,0(sp)
 4002500:	e0800417 	ldw	r2,16(fp)
 4002504:	d8800115 	stw	r2,4(sp)
 4002508:	e0800617 	ldw	r2,24(fp)
 400250c:	d8800215 	stw	r2,8(sp)
 4002510:	e17ffc17 	ldw	r5,-16(fp)
 4002514:	e1fffc17 	ldw	r7,-16(fp)
 4002518:	4000ea40 	call	4000ea4 <vid_draw_line>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
 400251c:	e0fffb17 	ldw	r3,-20(fp)
 4002520:	e0bffe17 	ldw	r2,-8(fp)
 4002524:	1889c83a 	sub	r4,r3,r2
 4002528:	e0fffc17 	ldw	r3,-16(fp)
 400252c:	e0800317 	ldw	r2,12(fp)
 4002530:	188b883a 	add	r5,r3,r2
 4002534:	e0fffb17 	ldw	r3,-20(fp)
 4002538:	e0bffe17 	ldw	r2,-8(fp)
 400253c:	1887883a 	add	r3,r3,r2
 4002540:	e0800217 	ldw	r2,8(fp)
 4002544:	188d883a 	add	r6,r3,r2
 4002548:	e0fffc17 	ldw	r3,-16(fp)
 400254c:	e0800317 	ldw	r2,12(fp)
 4002550:	188f883a 	add	r7,r3,r2
 4002554:	00800044 	movi	r2,1
 4002558:	d8800015 	stw	r2,0(sp)
 400255c:	e0800417 	ldw	r2,16(fp)
 4002560:	d8800115 	stw	r2,4(sp)
 4002564:	e0800617 	ldw	r2,24(fp)
 4002568:	d8800215 	stw	r2,8(sp)
 400256c:	4000ea40 	call	4000ea4 <vid_draw_line>
 4002570:	00014206 	br	4002a7c <vid_round_corner_points+0x674>
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
 4002574:	e0fffb17 	ldw	r3,-20(fp)
 4002578:	e0bffe17 	ldw	r2,-8(fp)
 400257c:	1887883a 	add	r3,r3,r2
 4002580:	e0800217 	ldw	r2,8(fp)
 4002584:	1889883a 	add	r4,r3,r2
 4002588:	e1800417 	ldw	r6,16(fp)
 400258c:	e17ffc17 	ldw	r5,-16(fp)
 4002590:	e1c00617 	ldw	r7,24(fp)
 4002594:	40018f40 	call	40018f4 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
 4002598:	e0fffb17 	ldw	r3,-20(fp)
 400259c:	e0bffe17 	ldw	r2,-8(fp)
 40025a0:	1887883a 	add	r3,r3,r2
 40025a4:	e0800217 	ldw	r2,8(fp)
 40025a8:	1889883a 	add	r4,r3,r2
 40025ac:	e0fffc17 	ldw	r3,-16(fp)
 40025b0:	e0800317 	ldw	r2,12(fp)
 40025b4:	188b883a 	add	r5,r3,r2
 40025b8:	e1800417 	ldw	r6,16(fp)
 40025bc:	e1c00617 	ldw	r7,24(fp)
 40025c0:	40018f40 	call	40018f4 <vid_set_pixel>
          //left
          vid_set_pixel(cx - y, cy, color, display);
 40025c4:	e0fffb17 	ldw	r3,-20(fp)
 40025c8:	e0bffe17 	ldw	r2,-8(fp)
 40025cc:	1889c83a 	sub	r4,r3,r2
 40025d0:	e1800417 	ldw	r6,16(fp)
 40025d4:	e17ffc17 	ldw	r5,-16(fp)
 40025d8:	e1c00617 	ldw	r7,24(fp)
 40025dc:	40018f40 	call	40018f4 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
 40025e0:	e0fffb17 	ldw	r3,-20(fp)
 40025e4:	e0bffe17 	ldw	r2,-8(fp)
 40025e8:	1889c83a 	sub	r4,r3,r2
 40025ec:	e0fffc17 	ldw	r3,-16(fp)
 40025f0:	e0800317 	ldw	r2,12(fp)
 40025f4:	188b883a 	add	r5,r3,r2
 40025f8:	e1800417 	ldw	r6,16(fp)
 40025fc:	e1c00617 	ldw	r7,24(fp)
 4002600:	40018f40 	call	40018f4 <vid_set_pixel>
 4002604:	00011d06 	br	4002a7c <vid_round_corner_points+0x674>
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
 4002608:	e0fffd17 	ldw	r3,-12(fp)
 400260c:	e0bffe17 	ldw	r2,-8(fp)
 4002610:	18805f1e 	bne	r3,r2,4002790 <vid_round_corner_points+0x388>
      if(fill) {
 4002614:	e0bfff07 	ldb	r2,-4(fp)
 4002618:	1005003a 	cmpeq	r2,r2,zero
 400261c:	10002f1e 	bne	r2,zero,40026dc <vid_round_corner_points+0x2d4>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
 4002620:	e0fffb17 	ldw	r3,-20(fp)
 4002624:	e0bffd17 	ldw	r2,-12(fp)
 4002628:	1889c83a 	sub	r4,r3,r2
 400262c:	e0fffc17 	ldw	r3,-16(fp)
 4002630:	e0bffe17 	ldw	r2,-8(fp)
 4002634:	1887883a 	add	r3,r3,r2
 4002638:	e0800317 	ldw	r2,12(fp)
 400263c:	188b883a 	add	r5,r3,r2
 4002640:	e0fffb17 	ldw	r3,-20(fp)
 4002644:	e0bffd17 	ldw	r2,-12(fp)
 4002648:	1887883a 	add	r3,r3,r2
 400264c:	e0800217 	ldw	r2,8(fp)
 4002650:	188d883a 	add	r6,r3,r2
 4002654:	e0fffc17 	ldw	r3,-16(fp)
 4002658:	e0bffe17 	ldw	r2,-8(fp)
 400265c:	1887883a 	add	r3,r3,r2
 4002660:	e0800317 	ldw	r2,12(fp)
 4002664:	188f883a 	add	r7,r3,r2
 4002668:	00800044 	movi	r2,1
 400266c:	d8800015 	stw	r2,0(sp)
 4002670:	e0800417 	ldw	r2,16(fp)
 4002674:	d8800115 	stw	r2,4(sp)
 4002678:	e0800617 	ldw	r2,24(fp)
 400267c:	d8800215 	stw	r2,8(sp)
 4002680:	4000ea40 	call	4000ea4 <vid_draw_line>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
 4002684:	e0fffb17 	ldw	r3,-20(fp)
 4002688:	e0bffd17 	ldw	r2,-12(fp)
 400268c:	1889c83a 	sub	r4,r3,r2
 4002690:	e0fffc17 	ldw	r3,-16(fp)
 4002694:	e0bffe17 	ldw	r2,-8(fp)
 4002698:	188bc83a 	sub	r5,r3,r2
 400269c:	e0fffb17 	ldw	r3,-20(fp)
 40026a0:	e0bffd17 	ldw	r2,-12(fp)
 40026a4:	1887883a 	add	r3,r3,r2
 40026a8:	e0800217 	ldw	r2,8(fp)
 40026ac:	188d883a 	add	r6,r3,r2
 40026b0:	e0fffc17 	ldw	r3,-16(fp)
 40026b4:	e0bffe17 	ldw	r2,-8(fp)
 40026b8:	188fc83a 	sub	r7,r3,r2
 40026bc:	00800044 	movi	r2,1
 40026c0:	d8800015 	stw	r2,0(sp)
 40026c4:	e0800417 	ldw	r2,16(fp)
 40026c8:	d8800115 	stw	r2,4(sp)
 40026cc:	e0800617 	ldw	r2,24(fp)
 40026d0:	d8800215 	stw	r2,8(sp)
 40026d4:	4000ea40 	call	4000ea4 <vid_draw_line>
 40026d8:	0000e806 	br	4002a7c <vid_round_corner_points+0x674>
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
 40026dc:	e0fffb17 	ldw	r3,-20(fp)
 40026e0:	e0bffd17 	ldw	r2,-12(fp)
 40026e4:	1887883a 	add	r3,r3,r2
 40026e8:	e0800217 	ldw	r2,8(fp)
 40026ec:	1889883a 	add	r4,r3,r2
 40026f0:	e0fffc17 	ldw	r3,-16(fp)
 40026f4:	e0bffe17 	ldw	r2,-8(fp)
 40026f8:	1887883a 	add	r3,r3,r2
 40026fc:	e0800317 	ldw	r2,12(fp)
 4002700:	188b883a 	add	r5,r3,r2
 4002704:	e1800417 	ldw	r6,16(fp)
 4002708:	e1c00617 	ldw	r7,24(fp)
 400270c:	40018f40 	call	40018f4 <vid_set_pixel>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
 4002710:	e0fffb17 	ldw	r3,-20(fp)
 4002714:	e0bffd17 	ldw	r2,-12(fp)
 4002718:	1889c83a 	sub	r4,r3,r2
 400271c:	e0fffc17 	ldw	r3,-16(fp)
 4002720:	e0bffe17 	ldw	r2,-8(fp)
 4002724:	1887883a 	add	r3,r3,r2
 4002728:	e0800317 	ldw	r2,12(fp)
 400272c:	188b883a 	add	r5,r3,r2
 4002730:	e1800417 	ldw	r6,16(fp)
 4002734:	e1c00617 	ldw	r7,24(fp)
 4002738:	40018f40 	call	40018f4 <vid_set_pixel>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
 400273c:	e0fffb17 	ldw	r3,-20(fp)
 4002740:	e0bffd17 	ldw	r2,-12(fp)
 4002744:	1887883a 	add	r3,r3,r2
 4002748:	e0800217 	ldw	r2,8(fp)
 400274c:	1889883a 	add	r4,r3,r2
 4002750:	e0fffc17 	ldw	r3,-16(fp)
 4002754:	e0bffe17 	ldw	r2,-8(fp)
 4002758:	188bc83a 	sub	r5,r3,r2
 400275c:	e1800417 	ldw	r6,16(fp)
 4002760:	e1c00617 	ldw	r7,24(fp)
 4002764:	40018f40 	call	40018f4 <vid_set_pixel>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
 4002768:	e0fffb17 	ldw	r3,-20(fp)
 400276c:	e0bffd17 	ldw	r2,-12(fp)
 4002770:	1889c83a 	sub	r4,r3,r2
 4002774:	e0fffc17 	ldw	r3,-16(fp)
 4002778:	e0bffe17 	ldw	r2,-8(fp)
 400277c:	188bc83a 	sub	r5,r3,r2
 4002780:	e1800417 	ldw	r6,16(fp)
 4002784:	e1c00617 	ldw	r7,24(fp)
 4002788:	40018f40 	call	40018f4 <vid_set_pixel>
 400278c:	0000bb06 	br	4002a7c <vid_round_corner_points+0x674>
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
 4002790:	e0fffd17 	ldw	r3,-12(fp)
 4002794:	e0bffe17 	ldw	r2,-8(fp)
 4002798:	1880b80e 	bge	r3,r2,4002a7c <vid_round_corner_points+0x674>
        if(fill) {
 400279c:	e0bfff07 	ldb	r2,-4(fp)
 40027a0:	1005003a 	cmpeq	r2,r2,zero
 40027a4:	10005d1e 	bne	r2,zero,400291c <vid_round_corner_points+0x514>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
 40027a8:	e0fffb17 	ldw	r3,-20(fp)
 40027ac:	e0bffd17 	ldw	r2,-12(fp)
 40027b0:	1889c83a 	sub	r4,r3,r2
 40027b4:	e0fffc17 	ldw	r3,-16(fp)
 40027b8:	e0bffe17 	ldw	r2,-8(fp)
 40027bc:	1887883a 	add	r3,r3,r2
 40027c0:	e0800317 	ldw	r2,12(fp)
 40027c4:	188b883a 	add	r5,r3,r2
 40027c8:	e0fffb17 	ldw	r3,-20(fp)
 40027cc:	e0bffd17 	ldw	r2,-12(fp)
 40027d0:	1887883a 	add	r3,r3,r2
 40027d4:	e0800217 	ldw	r2,8(fp)
 40027d8:	188d883a 	add	r6,r3,r2
 40027dc:	e0fffc17 	ldw	r3,-16(fp)
 40027e0:	e0bffe17 	ldw	r2,-8(fp)
 40027e4:	1887883a 	add	r3,r3,r2
 40027e8:	e0800317 	ldw	r2,12(fp)
 40027ec:	188f883a 	add	r7,r3,r2
 40027f0:	00800044 	movi	r2,1
 40027f4:	d8800015 	stw	r2,0(sp)
 40027f8:	e0800417 	ldw	r2,16(fp)
 40027fc:	d8800115 	stw	r2,4(sp)
 4002800:	e0800617 	ldw	r2,24(fp)
 4002804:	d8800215 	stw	r2,8(sp)
 4002808:	4000ea40 	call	4000ea4 <vid_draw_line>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
 400280c:	e0fffb17 	ldw	r3,-20(fp)
 4002810:	e0bffe17 	ldw	r2,-8(fp)
 4002814:	1889c83a 	sub	r4,r3,r2
 4002818:	e0fffc17 	ldw	r3,-16(fp)
 400281c:	e0bffd17 	ldw	r2,-12(fp)
 4002820:	1887883a 	add	r3,r3,r2
 4002824:	e0800317 	ldw	r2,12(fp)
 4002828:	188b883a 	add	r5,r3,r2
 400282c:	e0fffb17 	ldw	r3,-20(fp)
 4002830:	e0bffe17 	ldw	r2,-8(fp)
 4002834:	1887883a 	add	r3,r3,r2
 4002838:	e0800217 	ldw	r2,8(fp)
 400283c:	188d883a 	add	r6,r3,r2
 4002840:	e0fffc17 	ldw	r3,-16(fp)
 4002844:	e0bffd17 	ldw	r2,-12(fp)
 4002848:	1887883a 	add	r3,r3,r2
 400284c:	e0800317 	ldw	r2,12(fp)
 4002850:	188f883a 	add	r7,r3,r2
 4002854:	00800044 	movi	r2,1
 4002858:	d8800015 	stw	r2,0(sp)
 400285c:	e0800417 	ldw	r2,16(fp)
 4002860:	d8800115 	stw	r2,4(sp)
 4002864:	e0800617 	ldw	r2,24(fp)
 4002868:	d8800215 	stw	r2,8(sp)
 400286c:	4000ea40 	call	4000ea4 <vid_draw_line>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
 4002870:	e0fffb17 	ldw	r3,-20(fp)
 4002874:	e0bffe17 	ldw	r2,-8(fp)
 4002878:	1889c83a 	sub	r4,r3,r2
 400287c:	e0fffc17 	ldw	r3,-16(fp)
 4002880:	e0bffd17 	ldw	r2,-12(fp)
 4002884:	188bc83a 	sub	r5,r3,r2
 4002888:	e0fffb17 	ldw	r3,-20(fp)
 400288c:	e0bffe17 	ldw	r2,-8(fp)
 4002890:	1887883a 	add	r3,r3,r2
 4002894:	e0800217 	ldw	r2,8(fp)
 4002898:	188d883a 	add	r6,r3,r2
 400289c:	e0fffc17 	ldw	r3,-16(fp)
 40028a0:	e0bffd17 	ldw	r2,-12(fp)
 40028a4:	188fc83a 	sub	r7,r3,r2
 40028a8:	00800044 	movi	r2,1
 40028ac:	d8800015 	stw	r2,0(sp)
 40028b0:	e0800417 	ldw	r2,16(fp)
 40028b4:	d8800115 	stw	r2,4(sp)
 40028b8:	e0800617 	ldw	r2,24(fp)
 40028bc:	d8800215 	stw	r2,8(sp)
 40028c0:	4000ea40 	call	4000ea4 <vid_draw_line>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
 40028c4:	e0fffb17 	ldw	r3,-20(fp)
 40028c8:	e0bffd17 	ldw	r2,-12(fp)
 40028cc:	1889c83a 	sub	r4,r3,r2
 40028d0:	e0fffc17 	ldw	r3,-16(fp)
 40028d4:	e0bffe17 	ldw	r2,-8(fp)
 40028d8:	188bc83a 	sub	r5,r3,r2
 40028dc:	e0fffb17 	ldw	r3,-20(fp)
 40028e0:	e0bffd17 	ldw	r2,-12(fp)
 40028e4:	1887883a 	add	r3,r3,r2
 40028e8:	e0800217 	ldw	r2,8(fp)
 40028ec:	188d883a 	add	r6,r3,r2
 40028f0:	e0fffc17 	ldw	r3,-16(fp)
 40028f4:	e0bffe17 	ldw	r2,-8(fp)
 40028f8:	188fc83a 	sub	r7,r3,r2
 40028fc:	00800044 	movi	r2,1
 4002900:	d8800015 	stw	r2,0(sp)
 4002904:	e0800417 	ldw	r2,16(fp)
 4002908:	d8800115 	stw	r2,4(sp)
 400290c:	e0800617 	ldw	r2,24(fp)
 4002910:	d8800215 	stw	r2,8(sp)
 4002914:	4000ea40 	call	4000ea4 <vid_draw_line>
 4002918:	00005806 	br	4002a7c <vid_round_corner_points+0x674>
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
 400291c:	e0fffb17 	ldw	r3,-20(fp)
 4002920:	e0bffd17 	ldw	r2,-12(fp)
 4002924:	1887883a 	add	r3,r3,r2
 4002928:	e0800217 	ldw	r2,8(fp)
 400292c:	1889883a 	add	r4,r3,r2
 4002930:	e0fffc17 	ldw	r3,-16(fp)
 4002934:	e0bffe17 	ldw	r2,-8(fp)
 4002938:	1887883a 	add	r3,r3,r2
 400293c:	e0800317 	ldw	r2,12(fp)
 4002940:	188b883a 	add	r5,r3,r2
 4002944:	e1800417 	ldw	r6,16(fp)
 4002948:	e1c00617 	ldw	r7,24(fp)
 400294c:	40018f40 	call	40018f4 <vid_set_pixel>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
 4002950:	e0fffb17 	ldw	r3,-20(fp)
 4002954:	e0bffd17 	ldw	r2,-12(fp)
 4002958:	1889c83a 	sub	r4,r3,r2
 400295c:	e0fffc17 	ldw	r3,-16(fp)
 4002960:	e0bffe17 	ldw	r2,-8(fp)
 4002964:	1887883a 	add	r3,r3,r2
 4002968:	e0800317 	ldw	r2,12(fp)
 400296c:	188b883a 	add	r5,r3,r2
 4002970:	e1800417 	ldw	r6,16(fp)
 4002974:	e1c00617 	ldw	r7,24(fp)
 4002978:	40018f40 	call	40018f4 <vid_set_pixel>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
 400297c:	e0fffb17 	ldw	r3,-20(fp)
 4002980:	e0bffd17 	ldw	r2,-12(fp)
 4002984:	1887883a 	add	r3,r3,r2
 4002988:	e0800217 	ldw	r2,8(fp)
 400298c:	1889883a 	add	r4,r3,r2
 4002990:	e0fffc17 	ldw	r3,-16(fp)
 4002994:	e0bffe17 	ldw	r2,-8(fp)
 4002998:	188bc83a 	sub	r5,r3,r2
 400299c:	e1800417 	ldw	r6,16(fp)
 40029a0:	e1c00617 	ldw	r7,24(fp)
 40029a4:	40018f40 	call	40018f4 <vid_set_pixel>
          vid_set_pixel(cx - x, cy - y, color, display);
 40029a8:	e0fffb17 	ldw	r3,-20(fp)
 40029ac:	e0bffd17 	ldw	r2,-12(fp)
 40029b0:	1889c83a 	sub	r4,r3,r2
 40029b4:	e0fffc17 	ldw	r3,-16(fp)
 40029b8:	e0bffe17 	ldw	r2,-8(fp)
 40029bc:	188bc83a 	sub	r5,r3,r2
 40029c0:	e1800417 	ldw	r6,16(fp)
 40029c4:	e1c00617 	ldw	r7,24(fp)
 40029c8:	40018f40 	call	40018f4 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
 40029cc:	e0fffb17 	ldw	r3,-20(fp)
 40029d0:	e0bffe17 	ldw	r2,-8(fp)
 40029d4:	1887883a 	add	r3,r3,r2
 40029d8:	e0800217 	ldw	r2,8(fp)
 40029dc:	1889883a 	add	r4,r3,r2
 40029e0:	e0fffc17 	ldw	r3,-16(fp)
 40029e4:	e0bffd17 	ldw	r2,-12(fp)
 40029e8:	1887883a 	add	r3,r3,r2
 40029ec:	e0800317 	ldw	r2,12(fp)
 40029f0:	188b883a 	add	r5,r3,r2
 40029f4:	e1800417 	ldw	r6,16(fp)
 40029f8:	e1c00617 	ldw	r7,24(fp)
 40029fc:	40018f40 	call	40018f4 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
 4002a00:	e0fffb17 	ldw	r3,-20(fp)
 4002a04:	e0bffe17 	ldw	r2,-8(fp)
 4002a08:	1889c83a 	sub	r4,r3,r2
 4002a0c:	e0fffc17 	ldw	r3,-16(fp)
 4002a10:	e0bffd17 	ldw	r2,-12(fp)
 4002a14:	1887883a 	add	r3,r3,r2
 4002a18:	e0800317 	ldw	r2,12(fp)
 4002a1c:	188b883a 	add	r5,r3,r2
 4002a20:	e1800417 	ldw	r6,16(fp)
 4002a24:	e1c00617 	ldw	r7,24(fp)
 4002a28:	40018f40 	call	40018f4 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
 4002a2c:	e0fffb17 	ldw	r3,-20(fp)
 4002a30:	e0bffe17 	ldw	r2,-8(fp)
 4002a34:	1887883a 	add	r3,r3,r2
 4002a38:	e0800217 	ldw	r2,8(fp)
 4002a3c:	1889883a 	add	r4,r3,r2
 4002a40:	e0fffc17 	ldw	r3,-16(fp)
 4002a44:	e0bffd17 	ldw	r2,-12(fp)
 4002a48:	188bc83a 	sub	r5,r3,r2
 4002a4c:	e1800417 	ldw	r6,16(fp)
 4002a50:	e1c00617 	ldw	r7,24(fp)
 4002a54:	40018f40 	call	40018f4 <vid_set_pixel>
          vid_set_pixel(cx - y, cy - x, color, display);
 4002a58:	e0fffb17 	ldw	r3,-20(fp)
 4002a5c:	e0bffe17 	ldw	r2,-8(fp)
 4002a60:	1889c83a 	sub	r4,r3,r2
 4002a64:	e0fffc17 	ldw	r3,-16(fp)
 4002a68:	e0bffd17 	ldw	r2,-12(fp)
 4002a6c:	188bc83a 	sub	r5,r3,r2
 4002a70:	e1800417 	ldw	r6,16(fp)
 4002a74:	e1c00617 	ldw	r7,24(fp)
 4002a78:	40018f40 	call	40018f4 <vid_set_pixel>
        }
    }
}
 4002a7c:	e037883a 	mov	sp,fp
 4002a80:	dfc00117 	ldw	ra,4(sp)
 4002a84:	df000017 	ldw	fp,0(sp)
 4002a88:	dec00204 	addi	sp,sp,8
 4002a8c:	f800283a 	ret

04002a90 <max3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
__inline__ int max3( int a, int b, int c )
{
 4002a90:	defffc04 	addi	sp,sp,-16
 4002a94:	df000315 	stw	fp,12(sp)
 4002a98:	df000304 	addi	fp,sp,12
 4002a9c:	e13ffd15 	stw	r4,-12(fp)
 4002aa0:	e17ffe15 	stw	r5,-8(fp)
 4002aa4:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
 4002aa8:	e0fffd17 	ldw	r3,-12(fp)
 4002aac:	e0bffe17 	ldw	r2,-8(fp)
 4002ab0:	1880020e 	bge	r3,r2,4002abc <max3+0x2c>
    a = b;
 4002ab4:	e0bffe17 	ldw	r2,-8(fp)
 4002ab8:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
 4002abc:	e0fffd17 	ldw	r3,-12(fp)
 4002ac0:	e0bfff17 	ldw	r2,-4(fp)
 4002ac4:	1880020e 	bge	r3,r2,4002ad0 <max3+0x40>
    a = c;
 4002ac8:	e0bfff17 	ldw	r2,-4(fp)
 4002acc:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 4002ad0:	e0bffd17 	ldw	r2,-12(fp)
}
 4002ad4:	e037883a 	mov	sp,fp
 4002ad8:	df000017 	ldw	fp,0(sp)
 4002adc:	dec00104 	addi	sp,sp,4
 4002ae0:	f800283a 	ret

04002ae4 <min3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
__inline__ int min3( int a, int b, int c )
{
 4002ae4:	defffc04 	addi	sp,sp,-16
 4002ae8:	df000315 	stw	fp,12(sp)
 4002aec:	df000304 	addi	fp,sp,12
 4002af0:	e13ffd15 	stw	r4,-12(fp)
 4002af4:	e17ffe15 	stw	r5,-8(fp)
 4002af8:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
 4002afc:	e0fffd17 	ldw	r3,-12(fp)
 4002b00:	e0bffe17 	ldw	r2,-8(fp)
 4002b04:	10c0020e 	bge	r2,r3,4002b10 <min3+0x2c>
    a = b;
 4002b08:	e0bffe17 	ldw	r2,-8(fp)
 4002b0c:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
 4002b10:	e0fffd17 	ldw	r3,-12(fp)
 4002b14:	e0bfff17 	ldw	r2,-4(fp)
 4002b18:	10c0020e 	bge	r2,r3,4002b24 <min3+0x40>
    a = c;
 4002b1c:	e0bfff17 	ldw	r2,-4(fp)
 4002b20:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 4002b24:	e0bffd17 	ldw	r2,-12(fp)
}
 4002b28:	e037883a 	mov	sp,fp
 4002b2c:	df000017 	ldw	fp,0(sp)
 4002b30:	dec00104 	addi	sp,sp,4
 4002b34:	f800283a 	ret

04002b38 <max_diff3>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
__inline__ int max_diff3(int a, int b, int c)
{
 4002b38:	defff904 	addi	sp,sp,-28
 4002b3c:	dfc00615 	stw	ra,24(sp)
 4002b40:	df000515 	stw	fp,20(sp)
 4002b44:	df000504 	addi	fp,sp,20
 4002b48:	e13ffd15 	stw	r4,-12(fp)
 4002b4c:	e17ffe15 	stw	r5,-8(fp)
 4002b50:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
 4002b54:	e13ffd17 	ldw	r4,-12(fp)
 4002b58:	e17ffe17 	ldw	r5,-8(fp)
 4002b5c:	e1bfff17 	ldw	r6,-4(fp)
 4002b60:	4002a900 	call	4002a90 <max3>
 4002b64:	e0bffc15 	stw	r2,-16(fp)
  min = min3( a, b, c );
 4002b68:	e13ffd17 	ldw	r4,-12(fp)
 4002b6c:	e17ffe17 	ldw	r5,-8(fp)
 4002b70:	e1bfff17 	ldw	r6,-4(fp)
 4002b74:	4002ae40 	call	4002ae4 <min3>
 4002b78:	e0bffb15 	stw	r2,-20(fp)
  return (max - min);
 4002b7c:	e0fffc17 	ldw	r3,-16(fp)
 4002b80:	e0bffb17 	ldw	r2,-20(fp)
 4002b84:	1885c83a 	sub	r2,r3,r2
}
 4002b88:	e037883a 	mov	sp,fp
 4002b8c:	dfc00117 	ldw	ra,4(sp)
 4002b90:	df000017 	ldw	fp,0(sp)
 4002b94:	dec00204 	addi	sp,sp,8
 4002b98:	f800283a 	ret

04002b9c <vid_put_pixel_in_span_map>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
inline void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
 4002b9c:	defffc04 	addi	sp,sp,-16
 4002ba0:	df000315 	stw	fp,12(sp)
 4002ba4:	df000304 	addi	fp,sp,12
 4002ba8:	e13ffd15 	stw	r4,-12(fp)
 4002bac:	e17ffe15 	stw	r5,-8(fp)
 4002bb0:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
 4002bb4:	e0bffe17 	ldw	r2,-8(fp)
 4002bb8:	100490fa 	slli	r2,r2,3
 4002bbc:	1007883a 	mov	r3,r2
 4002bc0:	e0bfff17 	ldw	r2,-4(fp)
 4002bc4:	1885883a 	add	r2,r3,r2
 4002bc8:	10800017 	ldw	r2,0(r2)
 4002bcc:	10bfffd8 	cmpnei	r2,r2,-1
 4002bd0:	1000101e 	bne	r2,zero,4002c14 <vid_put_pixel_in_span_map+0x78>
  {
    span_array[y*2] = x;
 4002bd4:	e0bffe17 	ldw	r2,-8(fp)
 4002bd8:	100490fa 	slli	r2,r2,3
 4002bdc:	1007883a 	mov	r3,r2
 4002be0:	e0bfff17 	ldw	r2,-4(fp)
 4002be4:	1887883a 	add	r3,r3,r2
 4002be8:	e0bffd17 	ldw	r2,-12(fp)
 4002bec:	18800015 	stw	r2,0(r3)
    span_array[(y*2)+1] = x;
 4002bf0:	e0bffe17 	ldw	r2,-8(fp)
 4002bf4:	100490fa 	slli	r2,r2,3
 4002bf8:	1007883a 	mov	r3,r2
 4002bfc:	e0bfff17 	ldw	r2,-4(fp)
 4002c00:	1885883a 	add	r2,r3,r2
 4002c04:	10c00104 	addi	r3,r2,4
 4002c08:	e0bffd17 	ldw	r2,-12(fp)
 4002c0c:	18800015 	stw	r2,0(r3)
 4002c10:	00002106 	br	4002c98 <vid_put_pixel_in_span_map+0xfc>
  }
  else if( span_array[y*2] > x )
 4002c14:	e0bffe17 	ldw	r2,-8(fp)
 4002c18:	100490fa 	slli	r2,r2,3
 4002c1c:	1007883a 	mov	r3,r2
 4002c20:	e0bfff17 	ldw	r2,-4(fp)
 4002c24:	1885883a 	add	r2,r3,r2
 4002c28:	10c00017 	ldw	r3,0(r2)
 4002c2c:	e0bffd17 	ldw	r2,-12(fp)
 4002c30:	10c0080e 	bge	r2,r3,4002c54 <vid_put_pixel_in_span_map+0xb8>
    span_array[y*2] = x;
 4002c34:	e0bffe17 	ldw	r2,-8(fp)
 4002c38:	100490fa 	slli	r2,r2,3
 4002c3c:	1007883a 	mov	r3,r2
 4002c40:	e0bfff17 	ldw	r2,-4(fp)
 4002c44:	1887883a 	add	r3,r3,r2
 4002c48:	e0bffd17 	ldw	r2,-12(fp)
 4002c4c:	18800015 	stw	r2,0(r3)
 4002c50:	00001106 	br	4002c98 <vid_put_pixel_in_span_map+0xfc>
  else if( span_array[(y*2)+1] < x )
 4002c54:	e0bffe17 	ldw	r2,-8(fp)
 4002c58:	100490fa 	slli	r2,r2,3
 4002c5c:	1007883a 	mov	r3,r2
 4002c60:	e0bfff17 	ldw	r2,-4(fp)
 4002c64:	1885883a 	add	r2,r3,r2
 4002c68:	10800104 	addi	r2,r2,4
 4002c6c:	10c00017 	ldw	r3,0(r2)
 4002c70:	e0bffd17 	ldw	r2,-12(fp)
 4002c74:	1880080e 	bge	r3,r2,4002c98 <vid_put_pixel_in_span_map+0xfc>
    span_array[(y*2)+1] = x;
 4002c78:	e0bffe17 	ldw	r2,-8(fp)
 4002c7c:	100490fa 	slli	r2,r2,3
 4002c80:	1007883a 	mov	r3,r2
 4002c84:	e0bfff17 	ldw	r2,-4(fp)
 4002c88:	1885883a 	add	r2,r3,r2
 4002c8c:	10c00104 	addi	r3,r2,4
 4002c90:	e0bffd17 	ldw	r2,-12(fp)
 4002c94:	18800015 	stw	r2,0(r3)
}
 4002c98:	e037883a 	mov	sp,fp
 4002c9c:	df000017 	ldw	fp,0(sp)
 4002ca0:	dec00104 	addi	sp,sp,4
 4002ca4:	f800283a 	ret

04002ca8 <vid_bres_scan_edges>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
 4002ca8:	deffee04 	addi	sp,sp,-72
 4002cac:	dfc01115 	stw	ra,68(sp)
 4002cb0:	df001015 	stw	fp,64(sp)
 4002cb4:	df001004 	addi	fp,sp,64
 4002cb8:	e13ffc15 	stw	r4,-16(fp)
 4002cbc:	e17ffd15 	stw	r5,-12(fp)
 4002cc0:	e1bffe15 	stw	r6,-8(fp)
 4002cc4:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
 4002cc8:	e0fffc17 	ldw	r3,-16(fp)
 4002ccc:	e0bffe17 	ldw	r2,-8(fp)
 4002cd0:	10c00c0e 	bge	r2,r3,4002d04 <vid_bres_scan_edges+0x5c>
  {
    int tempx = x2;
 4002cd4:	e0bffe17 	ldw	r2,-8(fp)
 4002cd8:	e0bff715 	stw	r2,-36(fp)
    x2 = x1;
 4002cdc:	e0bffc17 	ldw	r2,-16(fp)
 4002ce0:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
 4002ce4:	e0bff717 	ldw	r2,-36(fp)
 4002ce8:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
 4002cec:	e0bfff17 	ldw	r2,-4(fp)
 4002cf0:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
 4002cf4:	e0bffd17 	ldw	r2,-12(fp)
 4002cf8:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
 4002cfc:	e0bff617 	ldw	r2,-40(fp)
 4002d00:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
 4002d04:	e0fffd17 	ldw	r3,-12(fp)
 4002d08:	e0bfff17 	ldw	r2,-4(fp)
 4002d0c:	1885c83a 	sub	r2,r3,r2
 4002d10:	e0bff915 	stw	r2,-28(fp)
 4002d14:	e0bff917 	ldw	r2,-28(fp)
 4002d18:	1004403a 	cmpge	r2,r2,zero
 4002d1c:	1000031e 	bne	r2,zero,4002d2c <vid_bres_scan_edges+0x84>
 4002d20:	e0bff917 	ldw	r2,-28(fp)
 4002d24:	0085c83a 	sub	r2,zero,r2
 4002d28:	e0bff915 	stw	r2,-28(fp)
  x_delta = (x2-x1);
 4002d2c:	e0fffe17 	ldw	r3,-8(fp)
 4002d30:	e0bffc17 	ldw	r2,-16(fp)
 4002d34:	1885c83a 	sub	r2,r3,r2
 4002d38:	e0bff815 	stw	r2,-32(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
 4002d3c:	e0fffd17 	ldw	r3,-12(fp)
 4002d40:	e0bfff17 	ldw	r2,-4(fp)
 4002d44:	10c0030e 	bge	r2,r3,4002d54 <vid_bres_scan_edges+0xac>
 4002d48:	00bfffc4 	movi	r2,-1
 4002d4c:	e0bffa15 	stw	r2,-24(fp)
 4002d50:	00000206 	br	4002d5c <vid_bres_scan_edges+0xb4>
 4002d54:	00800044 	movi	r2,1
 4002d58:	e0bffa15 	stw	r2,-24(fp)
  x_incr=1;
 4002d5c:	00800044 	movi	r2,1
 4002d60:	e0bffb15 	stw	r2,-20(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
 4002d64:	e0fff817 	ldw	r3,-32(fp)
 4002d68:	e0bff917 	ldw	r2,-28(fp)
 4002d6c:	18803116 	blt	r3,r2,4002e34 <vid_bres_scan_edges+0x18c>
    int dPr   = y_delta<<1;
 4002d70:	e0bff917 	ldw	r2,-28(fp)
 4002d74:	1085883a 	add	r2,r2,r2
 4002d78:	e0bff515 	stw	r2,-44(fp)
    int dPru  = dPr - (x_delta<<1);
 4002d7c:	e0bff817 	ldw	r2,-32(fp)
 4002d80:	1085883a 	add	r2,r2,r2
 4002d84:	1007883a 	mov	r3,r2
 4002d88:	e0bff517 	ldw	r2,-44(fp)
 4002d8c:	10c5c83a 	sub	r2,r2,r3
 4002d90:	e0bff415 	stw	r2,-48(fp)
    int P     = dPr - x_delta;
 4002d94:	e0fff517 	ldw	r3,-44(fp)
 4002d98:	e0bff817 	ldw	r2,-32(fp)
 4002d9c:	1885c83a 	sub	r2,r3,r2
 4002da0:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 4002da4:	00001f06 	br	4002e24 <vid_bres_scan_edges+0x17c>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 4002da8:	e13ffc17 	ldw	r4,-16(fp)
 4002dac:	e17ffd17 	ldw	r5,-12(fp)
 4002db0:	e1800217 	ldw	r6,8(fp)
 4002db4:	4002b9c0 	call	4002b9c <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 4002db8:	e0bff317 	ldw	r2,-52(fp)
 4002dbc:	10800050 	cmplti	r2,r2,1
 4002dc0:	10000d1e 	bne	r2,zero,4002df8 <vid_bres_scan_edges+0x150>
        x1+=x_incr;
 4002dc4:	e0fffc17 	ldw	r3,-16(fp)
 4002dc8:	e0bffb17 	ldw	r2,-20(fp)
 4002dcc:	1885883a 	add	r2,r3,r2
 4002dd0:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 4002dd4:	e0fffd17 	ldw	r3,-12(fp)
 4002dd8:	e0bffa17 	ldw	r2,-24(fp)
 4002ddc:	1885883a 	add	r2,r3,r2
 4002de0:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 4002de4:	e0fff317 	ldw	r3,-52(fp)
 4002de8:	e0bff417 	ldw	r2,-48(fp)
 4002dec:	1885883a 	add	r2,r3,r2
 4002df0:	e0bff315 	stw	r2,-52(fp)
 4002df4:	00000806 	br	4002e18 <vid_bres_scan_edges+0x170>
      } else {
        x1+=x_incr;
 4002df8:	e0fffc17 	ldw	r3,-16(fp)
 4002dfc:	e0bffb17 	ldw	r2,-20(fp)
 4002e00:	1885883a 	add	r2,r3,r2
 4002e04:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
 4002e08:	e0fff317 	ldw	r3,-52(fp)
 4002e0c:	e0bff517 	ldw	r2,-44(fp)
 4002e10:	1885883a 	add	r2,r3,r2
 4002e14:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 4002e18:	e0bff817 	ldw	r2,-32(fp)
 4002e1c:	10bfffc4 	addi	r2,r2,-1
 4002e20:	e0bff815 	stw	r2,-32(fp)
 4002e24:	e0bff817 	ldw	r2,-32(fp)
 4002e28:	1004403a 	cmpge	r2,r2,zero
 4002e2c:	103fde1e 	bne	r2,zero,4002da8 <vid_bres_scan_edges+0x100>
 4002e30:	00003006 	br	4002ef4 <vid_bres_scan_edges+0x24c>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
 4002e34:	e0bff817 	ldw	r2,-32(fp)
 4002e38:	1085883a 	add	r2,r2,r2
 4002e3c:	e0bff215 	stw	r2,-56(fp)
    int dPru  = dPr - (y_delta<<1);
 4002e40:	e0bff917 	ldw	r2,-28(fp)
 4002e44:	1085883a 	add	r2,r2,r2
 4002e48:	1007883a 	mov	r3,r2
 4002e4c:	e0bff217 	ldw	r2,-56(fp)
 4002e50:	10c5c83a 	sub	r2,r2,r3
 4002e54:	e0bff115 	stw	r2,-60(fp)
    int P     = dPr - y_delta;
 4002e58:	e0fff217 	ldw	r3,-56(fp)
 4002e5c:	e0bff917 	ldw	r2,-28(fp)
 4002e60:	1885c83a 	sub	r2,r3,r2
 4002e64:	e0bff015 	stw	r2,-64(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 4002e68:	00001f06 	br	4002ee8 <vid_bres_scan_edges+0x240>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 4002e6c:	e13ffc17 	ldw	r4,-16(fp)
 4002e70:	e17ffd17 	ldw	r5,-12(fp)
 4002e74:	e1800217 	ldw	r6,8(fp)
 4002e78:	4002b9c0 	call	4002b9c <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 4002e7c:	e0bff017 	ldw	r2,-64(fp)
 4002e80:	10800050 	cmplti	r2,r2,1
 4002e84:	10000d1e 	bne	r2,zero,4002ebc <vid_bres_scan_edges+0x214>
        x1+=x_incr;
 4002e88:	e0fffc17 	ldw	r3,-16(fp)
 4002e8c:	e0bffb17 	ldw	r2,-20(fp)
 4002e90:	1885883a 	add	r2,r3,r2
 4002e94:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 4002e98:	e0fffd17 	ldw	r3,-12(fp)
 4002e9c:	e0bffa17 	ldw	r2,-24(fp)
 4002ea0:	1885883a 	add	r2,r3,r2
 4002ea4:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 4002ea8:	e0fff017 	ldw	r3,-64(fp)
 4002eac:	e0bff117 	ldw	r2,-60(fp)
 4002eb0:	1885883a 	add	r2,r3,r2
 4002eb4:	e0bff015 	stw	r2,-64(fp)
 4002eb8:	00000806 	br	4002edc <vid_bres_scan_edges+0x234>
      } else {
        y1+=y_incr;
 4002ebc:	e0fffd17 	ldw	r3,-12(fp)
 4002ec0:	e0bffa17 	ldw	r2,-24(fp)
 4002ec4:	1885883a 	add	r2,r3,r2
 4002ec8:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
 4002ecc:	e0fff017 	ldw	r3,-64(fp)
 4002ed0:	e0bff217 	ldw	r2,-56(fp)
 4002ed4:	1885883a 	add	r2,r3,r2
 4002ed8:	e0bff015 	stw	r2,-64(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 4002edc:	e0bff917 	ldw	r2,-28(fp)
 4002ee0:	10bfffc4 	addi	r2,r2,-1
 4002ee4:	e0bff915 	stw	r2,-28(fp)
 4002ee8:	e0bff917 	ldw	r2,-28(fp)
 4002eec:	1004403a 	cmpge	r2,r2,zero
 4002ef0:	103fde1e 	bne	r2,zero,4002e6c <vid_bres_scan_edges+0x1c4>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
 4002ef4:	e037883a 	mov	sp,fp
 4002ef8:	dfc00117 	ldw	ra,4(sp)
 4002efc:	df000017 	ldw	fp,0(sp)
 4002f00:	dec00204 	addi	sp,sp,8
 4002f04:	f800283a 	ret

04002f08 <vid_draw_triangle>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
 4002f08:	defff804 	addi	sp,sp,-32
 4002f0c:	dfc00715 	stw	ra,28(sp)
 4002f10:	df000615 	stw	fp,24(sp)
 4002f14:	df000604 	addi	fp,sp,24
 4002f18:	e13ffe15 	stw	r4,-8(fp)
 4002f1c:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 4002f20:	e0bffe17 	ldw	r2,-8(fp)
 4002f24:	11000017 	ldw	r4,0(r2)
 4002f28:	e0bffe17 	ldw	r2,-8(fp)
 4002f2c:	11400317 	ldw	r5,12(r2)
 4002f30:	e0bffe17 	ldw	r2,-8(fp)
 4002f34:	11800117 	ldw	r6,4(r2)
 4002f38:	e0bffe17 	ldw	r2,-8(fp)
 4002f3c:	11c00417 	ldw	r7,16(r2)
 4002f40:	e0bffe17 	ldw	r2,-8(fp)
 4002f44:	10c00a17 	ldw	r3,40(r2)
 4002f48:	00800044 	movi	r2,1
 4002f4c:	d8800015 	stw	r2,0(sp)
 4002f50:	d8c00115 	stw	r3,4(sp)
 4002f54:	e0bfff17 	ldw	r2,-4(fp)
 4002f58:	d8800215 	stw	r2,8(sp)
 4002f5c:	4000ea40 	call	4000ea4 <vid_draw_line>
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 4002f60:	e0bffe17 	ldw	r2,-8(fp)
 4002f64:	11000117 	ldw	r4,4(r2)
 4002f68:	e0bffe17 	ldw	r2,-8(fp)
 4002f6c:	11400417 	ldw	r5,16(r2)
 4002f70:	e0bffe17 	ldw	r2,-8(fp)
 4002f74:	11800217 	ldw	r6,8(r2)
 4002f78:	e0bffe17 	ldw	r2,-8(fp)
 4002f7c:	11c00517 	ldw	r7,20(r2)
 4002f80:	e0bffe17 	ldw	r2,-8(fp)
 4002f84:	10c00a17 	ldw	r3,40(r2)
 4002f88:	00800044 	movi	r2,1
 4002f8c:	d8800015 	stw	r2,0(sp)
 4002f90:	d8c00115 	stw	r3,4(sp)
 4002f94:	e0bfff17 	ldw	r2,-4(fp)
 4002f98:	d8800215 	stw	r2,8(sp)
 4002f9c:	4000ea40 	call	4000ea4 <vid_draw_line>
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 4002fa0:	e0bffe17 	ldw	r2,-8(fp)
 4002fa4:	11000217 	ldw	r4,8(r2)
 4002fa8:	e0bffe17 	ldw	r2,-8(fp)
 4002fac:	11400517 	ldw	r5,20(r2)
 4002fb0:	e0bffe17 	ldw	r2,-8(fp)
 4002fb4:	11800017 	ldw	r6,0(r2)
 4002fb8:	e0bffe17 	ldw	r2,-8(fp)
 4002fbc:	11c00317 	ldw	r7,12(r2)
 4002fc0:	e0bffe17 	ldw	r2,-8(fp)
 4002fc4:	10c00a17 	ldw	r3,40(r2)
 4002fc8:	00800044 	movi	r2,1
 4002fcc:	d8800015 	stw	r2,0(sp)
 4002fd0:	d8c00115 	stw	r3,4(sp)
 4002fd4:	e0bfff17 	ldw	r2,-4(fp)
 4002fd8:	d8800215 	stw	r2,8(sp)
 4002fdc:	4000ea40 	call	4000ea4 <vid_draw_line>
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
 4002fe0:	e0bffe17 	ldw	r2,-8(fp)
 4002fe4:	10800b17 	ldw	r2,44(r2)
 4002fe8:	10800058 	cmpnei	r2,r2,1
 4002fec:	1000931e 	bne	r2,zero,400323c <vid_draw_triangle+0x334>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 4002ff0:	e0bffe17 	ldw	r2,-8(fp)
 4002ff4:	11000317 	ldw	r4,12(r2)
 4002ff8:	e0bffe17 	ldw	r2,-8(fp)
 4002ffc:	11400417 	ldw	r5,16(r2)
 4003000:	e0bffe17 	ldw	r2,-8(fp)
 4003004:	11800517 	ldw	r6,20(r2)
 4003008:	4002ae40 	call	4002ae4 <min3>
 400300c:	1007883a 	mov	r3,r2
 4003010:	e0bffe17 	ldw	r2,-8(fp)
 4003014:	10c00815 	stw	r3,32(r2)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 4003018:	e0bffe17 	ldw	r2,-8(fp)
 400301c:	11000317 	ldw	r4,12(r2)
 4003020:	e0bffe17 	ldw	r2,-8(fp)
 4003024:	11400417 	ldw	r5,16(r2)
 4003028:	e0bffe17 	ldw	r2,-8(fp)
 400302c:	11800517 	ldw	r6,20(r2)
 4003030:	4002a900 	call	4002a90 <max3>
 4003034:	1007883a 	mov	r3,r2
 4003038:	e0bffe17 	ldw	r2,-8(fp)
 400303c:	10c00915 	stw	r3,36(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 4003040:	e0bffe17 	ldw	r2,-8(fp)
 4003044:	11000317 	ldw	r4,12(r2)
 4003048:	e0bffe17 	ldw	r2,-8(fp)
 400304c:	11400417 	ldw	r5,16(r2)
 4003050:	e0bffe17 	ldw	r2,-8(fp)
 4003054:	11800517 	ldw	r6,20(r2)
 4003058:	4002b380 	call	4002b38 <max_diff3>
 400305c:	1007883a 	mov	r3,r2
 4003060:	e0bffe17 	ldw	r2,-8(fp)
 4003064:	10c00615 	stw	r3,24(r2)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
 4003068:	e0bffe17 	ldw	r2,-8(fp)
 400306c:	11000017 	ldw	r4,0(r2)
 4003070:	e0bffe17 	ldw	r2,-8(fp)
 4003074:	11400117 	ldw	r5,4(r2)
 4003078:	e0bffe17 	ldw	r2,-8(fp)
 400307c:	11800217 	ldw	r6,8(r2)
 4003080:	4002b380 	call	4002b38 <max_diff3>
 4003084:	1007883a 	mov	r3,r2
 4003088:	e0bffe17 	ldw	r2,-8(fp)
 400308c:	10c00715 	stw	r3,28(r2)
    tri->span_array = malloc(display->height * 4 * 2);
 4003090:	e0bfff17 	ldw	r2,-4(fp)
 4003094:	10800217 	ldw	r2,8(r2)
 4003098:	100490fa 	slli	r2,r2,3
 400309c:	1009883a 	mov	r4,r2
 40030a0:	4008a440 	call	4008a44 <malloc>
 40030a4:	1007883a 	mov	r3,r2
 40030a8:	e0bffe17 	ldw	r2,-8(fp)
 40030ac:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 40030b0:	e0bffe17 	ldw	r2,-8(fp)
 40030b4:	10800817 	ldw	r2,32(r2)
 40030b8:	e0bffd15 	stw	r2,-12(fp)
 40030bc:	00001206 	br	4003108 <vid_draw_triangle+0x200>
    {
      tri->span_array[i*2] = -1;
 40030c0:	e0bffe17 	ldw	r2,-8(fp)
 40030c4:	10c00d17 	ldw	r3,52(r2)
 40030c8:	e0bffd17 	ldw	r2,-12(fp)
 40030cc:	100490fa 	slli	r2,r2,3
 40030d0:	1887883a 	add	r3,r3,r2
 40030d4:	00bfffc4 	movi	r2,-1
 40030d8:	18800015 	stw	r2,0(r3)
      tri->span_array[(i*2) + 1] = -1;
 40030dc:	e0bffe17 	ldw	r2,-8(fp)
 40030e0:	10c00d17 	ldw	r3,52(r2)
 40030e4:	e0bffd17 	ldw	r2,-12(fp)
 40030e8:	100490fa 	slli	r2,r2,3
 40030ec:	1885883a 	add	r2,r3,r2
 40030f0:	10c00104 	addi	r3,r2,4
 40030f4:	00bfffc4 	movi	r2,-1
 40030f8:	18800015 	stw	r2,0(r3)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 40030fc:	e0bffd17 	ldw	r2,-12(fp)
 4003100:	10800044 	addi	r2,r2,1
 4003104:	e0bffd15 	stw	r2,-12(fp)
 4003108:	e0bffe17 	ldw	r2,-8(fp)
 400310c:	10c00917 	ldw	r3,36(r2)
 4003110:	e0bffd17 	ldw	r2,-12(fp)
 4003114:	18bfea0e 	bge	r3,r2,40030c0 <vid_draw_triangle+0x1b8>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 4003118:	e0bffe17 	ldw	r2,-8(fp)
 400311c:	11000017 	ldw	r4,0(r2)
 4003120:	e0bffe17 	ldw	r2,-8(fp)
 4003124:	11400317 	ldw	r5,12(r2)
 4003128:	e0bffe17 	ldw	r2,-8(fp)
 400312c:	11800117 	ldw	r6,4(r2)
 4003130:	e0bffe17 	ldw	r2,-8(fp)
 4003134:	11c00417 	ldw	r7,16(r2)
 4003138:	e0bffe17 	ldw	r2,-8(fp)
 400313c:	10800d17 	ldw	r2,52(r2)
 4003140:	d8800015 	stw	r2,0(sp)
 4003144:	4002ca80 	call	4002ca8 <vid_bres_scan_edges>
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 4003148:	e0bffe17 	ldw	r2,-8(fp)
 400314c:	11000117 	ldw	r4,4(r2)
 4003150:	e0bffe17 	ldw	r2,-8(fp)
 4003154:	11400417 	ldw	r5,16(r2)
 4003158:	e0bffe17 	ldw	r2,-8(fp)
 400315c:	11800217 	ldw	r6,8(r2)
 4003160:	e0bffe17 	ldw	r2,-8(fp)
 4003164:	11c00517 	ldw	r7,20(r2)
 4003168:	e0bffe17 	ldw	r2,-8(fp)
 400316c:	10800d17 	ldw	r2,52(r2)
 4003170:	d8800015 	stw	r2,0(sp)
 4003174:	4002ca80 	call	4002ca8 <vid_bres_scan_edges>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 4003178:	e0bffe17 	ldw	r2,-8(fp)
 400317c:	11000217 	ldw	r4,8(r2)
 4003180:	e0bffe17 	ldw	r2,-8(fp)
 4003184:	11400517 	ldw	r5,20(r2)
 4003188:	e0bffe17 	ldw	r2,-8(fp)
 400318c:	11800017 	ldw	r6,0(r2)
 4003190:	e0bffe17 	ldw	r2,-8(fp)
 4003194:	11c00317 	ldw	r7,12(r2)
 4003198:	e0bffe17 	ldw	r2,-8(fp)
 400319c:	10800d17 	ldw	r2,52(r2)
 40031a0:	d8800015 	stw	r2,0(sp)
 40031a4:	4002ca80 	call	4002ca8 <vid_bres_scan_edges>
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 40031a8:	e0bffe17 	ldw	r2,-8(fp)
 40031ac:	10800817 	ldw	r2,32(r2)
 40031b0:	e0bffd15 	stw	r2,-12(fp)
 40031b4:	00001a06 	br	4003220 <vid_draw_triangle+0x318>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
 40031b8:	e0bffe17 	ldw	r2,-8(fp)
 40031bc:	10c00d17 	ldw	r3,52(r2)
 40031c0:	e0bffd17 	ldw	r2,-12(fp)
 40031c4:	100490fa 	slli	r2,r2,3
 40031c8:	1885883a 	add	r2,r3,r2
 40031cc:	11000017 	ldw	r4,0(r2)
 40031d0:	e0bffe17 	ldw	r2,-8(fp)
 40031d4:	10c00d17 	ldw	r3,52(r2)
 40031d8:	e0bffd17 	ldw	r2,-12(fp)
 40031dc:	100490fa 	slli	r2,r2,3
 40031e0:	1885883a 	add	r2,r3,r2
 40031e4:	10800104 	addi	r2,r2,4
 40031e8:	11800017 	ldw	r6,0(r2)
 40031ec:	e0bffe17 	ldw	r2,-8(fp)
 40031f0:	10c00a17 	ldw	r3,40(r2)
 40031f4:	00800044 	movi	r2,1
 40031f8:	d8800015 	stw	r2,0(sp)
 40031fc:	d8c00115 	stw	r3,4(sp)
 4003200:	e0bfff17 	ldw	r2,-4(fp)
 4003204:	d8800215 	stw	r2,8(sp)
 4003208:	e17ffd17 	ldw	r5,-12(fp)
 400320c:	e1fffd17 	ldw	r7,-12(fp)
 4003210:	4000ea40 	call	4000ea4 <vid_draw_line>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 4003214:	e0bffd17 	ldw	r2,-12(fp)
 4003218:	10800044 	addi	r2,r2,1
 400321c:	e0bffd15 	stw	r2,-12(fp)
 4003220:	e0bffe17 	ldw	r2,-8(fp)
 4003224:	10c00917 	ldw	r3,36(r2)
 4003228:	e0bffd17 	ldw	r2,-12(fp)
 400322c:	18bfe20e 	bge	r3,r2,40031b8 <vid_draw_triangle+0x2b0>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
 4003230:	e0bffe17 	ldw	r2,-8(fp)
 4003234:	11000d17 	ldw	r4,52(r2)
 4003238:	4008a300 	call	4008a30 <free>
  }
}
 400323c:	e037883a 	mov	sp,fp
 4003240:	dfc00117 	ldw	ra,4(sp)
 4003244:	df000017 	ldw	fp,0(sp)
 4003248:	dec00204 	addi	sp,sp,8
 400324c:	f800283a 	ret

04003250 <CopyImage16>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
 4003250:	defff404 	addi	sp,sp,-48
 4003254:	dfc00b15 	stw	ra,44(sp)
 4003258:	df000a15 	stw	fp,40(sp)
 400325c:	df000a04 	addi	fp,sp,40
 4003260:	e13ffa15 	stw	r4,-24(fp)
 4003264:	e17ffb15 	stw	r5,-20(fp)
 4003268:	e0800217 	ldw	r2,8(fp)
 400326c:	e0c00317 	ldw	r3,12(fp)
 4003270:	e1bffc0d 	sth	r6,-16(fp)
 4003274:	e1fffd0d 	sth	r7,-12(fp)
 4003278:	e0bffe0d 	sth	r2,-8(fp)
 400327c:	e0ffff0d 	sth	r3,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
 4003280:	e03ff715 	stw	zero,-36(fp)
  int y_dst_offset = 0;
 4003284:	e03ff615 	stw	zero,-40(fp)
  
  for( y_src = 0, y_dst = 0; 
 4003288:	e03ff915 	stw	zero,-28(fp)
 400328c:	e03ff815 	stw	zero,-32(fp)
       y_src <= ( source_height  - 1 ); 
 4003290:	00001d06 	br	4003308 <CopyImage16+0xb8>
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 4003294:	e0bff617 	ldw	r2,-40(fp)
 4003298:	1085883a 	add	r2,r2,r2
 400329c:	1007883a 	mov	r3,r2
 40032a0:	e0bffb17 	ldw	r2,-20(fp)
 40032a4:	1889883a 	add	r4,r3,r2
 40032a8:	e0bff717 	ldw	r2,-36(fp)
 40032ac:	1085883a 	add	r2,r2,r2
 40032b0:	1007883a 	mov	r3,r2
 40032b4:	e0bffa17 	ldw	r2,-24(fp)
 40032b8:	1887883a 	add	r3,r3,r2
 40032bc:	e0bffc0f 	ldh	r2,-16(fp)
 40032c0:	1085883a 	add	r2,r2,r2
 40032c4:	180b883a 	mov	r5,r3
 40032c8:	100d883a 	mov	r6,r2
 40032cc:	40091980 	call	4009198 <memcpy>
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 40032d0:	e0bff917 	ldw	r2,-28(fp)
 40032d4:	10800044 	addi	r2,r2,1
 40032d8:	e0bff915 	stw	r2,-28(fp)
 40032dc:	e0bff817 	ldw	r2,-32(fp)
 40032e0:	10800044 	addi	r2,r2,1
 40032e4:	e0bff815 	stw	r2,-32(fp)
 40032e8:	e0fffc0f 	ldh	r3,-16(fp)
 40032ec:	e0bff717 	ldw	r2,-36(fp)
 40032f0:	10c5883a 	add	r2,r2,r3
 40032f4:	e0bff715 	stw	r2,-36(fp)
 40032f8:	e0fffe0f 	ldh	r3,-8(fp)
 40032fc:	e0bff617 	ldw	r2,-40(fp)
 4003300:	10c5883a 	add	r2,r2,r3
 4003304:	e0bff615 	stw	r2,-40(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
 4003308:	e0bffd0f 	ldh	r2,-12(fp)
 400330c:	10ffffc4 	addi	r3,r2,-1
 4003310:	e0bff917 	ldw	r2,-28(fp)
 4003314:	18bfdf0e 	bge	r3,r2,4003294 <CopyImage16+0x44>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
 4003318:	e037883a 	mov	sp,fp
 400331c:	dfc00117 	ldw	ra,4(sp)
 4003320:	df000017 	ldw	fp,0(sp)
 4003324:	dec00204 	addi	sp,sp,8
 4003328:	f800283a 	ret

0400332c <CropImage16>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
 400332c:	defff004 	addi	sp,sp,-64
 4003330:	dfc00f15 	stw	ra,60(sp)
 4003334:	df000e15 	stw	fp,56(sp)
 4003338:	df000e04 	addi	fp,sp,56
 400333c:	e13ff615 	stw	r4,-40(fp)
 4003340:	e17ff715 	stw	r5,-36(fp)
 4003344:	e0800217 	ldw	r2,8(fp)
 4003348:	e0c00317 	ldw	r3,12(fp)
 400334c:	e1000417 	ldw	r4,16(fp)
 4003350:	e1400517 	ldw	r5,20(fp)
 4003354:	e2000617 	ldw	r8,24(fp)
 4003358:	e2400717 	ldw	r9,28(fp)
 400335c:	e1bff80d 	sth	r6,-32(fp)
 4003360:	e1fff90d 	sth	r7,-28(fp)
 4003364:	e0bffa0d 	sth	r2,-24(fp)
 4003368:	e0fffb0d 	sth	r3,-20(fp)
 400336c:	e13ffc0d 	sth	r4,-16(fp)
 4003370:	e17ffd0d 	sth	r5,-12(fp)
 4003374:	e23ffe0d 	sth	r8,-8(fp)
 4003378:	e27fff0d 	sth	r9,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
 400337c:	e0fff80f 	ldh	r3,-32(fp)
 4003380:	e0bffc0f 	ldh	r2,-16(fp)
 4003384:	1885383a 	mul	r2,r3,r2
 4003388:	e0bff315 	stw	r2,-52(fp)
  int y_dst_offset = 0;
 400338c:	e03ff215 	stw	zero,-56(fp)
  
  for( y_src = crop_top, y_dst = 0; 
 4003390:	e0bffc0f 	ldh	r2,-16(fp)
 4003394:	e0bff515 	stw	r2,-44(fp)
 4003398:	e03ff415 	stw	zero,-48(fp)
       y_src <= ( source_height - crop_bottom - 1 ); 
 400339c:	00002306 	br	400342c <CropImage16+0x100>
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 40033a0:	e0bff217 	ldw	r2,-56(fp)
 40033a4:	1085883a 	add	r2,r2,r2
 40033a8:	1007883a 	mov	r3,r2
 40033ac:	e0bff717 	ldw	r2,-36(fp)
 40033b0:	1889883a 	add	r4,r3,r2
 40033b4:	e0bffa0f 	ldh	r2,-24(fp)
 40033b8:	1007883a 	mov	r3,r2
 40033bc:	e0bff317 	ldw	r2,-52(fp)
 40033c0:	1885883a 	add	r2,r3,r2
 40033c4:	1085883a 	add	r2,r2,r2
 40033c8:	1007883a 	mov	r3,r2
 40033cc:	e0bff617 	ldw	r2,-40(fp)
 40033d0:	188b883a 	add	r5,r3,r2
 40033d4:	e0fff80f 	ldh	r3,-32(fp)
 40033d8:	e0bffa0f 	ldh	r2,-24(fp)
 40033dc:	1887c83a 	sub	r3,r3,r2
 40033e0:	e0bffb0f 	ldh	r2,-20(fp)
 40033e4:	1885c83a 	sub	r2,r3,r2
 40033e8:	1085883a 	add	r2,r2,r2
 40033ec:	100d883a 	mov	r6,r2
 40033f0:	40091980 	call	4009198 <memcpy>
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 40033f4:	e0bff517 	ldw	r2,-44(fp)
 40033f8:	10800044 	addi	r2,r2,1
 40033fc:	e0bff515 	stw	r2,-44(fp)
 4003400:	e0bff417 	ldw	r2,-48(fp)
 4003404:	10800044 	addi	r2,r2,1
 4003408:	e0bff415 	stw	r2,-48(fp)
 400340c:	e0fff80f 	ldh	r3,-32(fp)
 4003410:	e0bff317 	ldw	r2,-52(fp)
 4003414:	10c5883a 	add	r2,r2,r3
 4003418:	e0bff315 	stw	r2,-52(fp)
 400341c:	e0fffe0f 	ldh	r3,-8(fp)
 4003420:	e0bff217 	ldw	r2,-56(fp)
 4003424:	10c5883a 	add	r2,r2,r3
 4003428:	e0bff215 	stw	r2,-56(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
 400342c:	e0fff90f 	ldh	r3,-28(fp)
 4003430:	e0bffd0f 	ldh	r2,-12(fp)
 4003434:	1885c83a 	sub	r2,r3,r2
 4003438:	10ffffc4 	addi	r3,r2,-1
 400343c:	e0bff517 	ldw	r2,-44(fp)
 4003440:	18bfd70e 	bge	r3,r2,40033a0 <CropImage16+0x74>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
 4003444:	e037883a 	mov	sp,fp
 4003448:	dfc00117 	ldw	ra,4(sp)
 400344c:	df000017 	ldw	fp,0(sp)
 4003450:	dec00204 	addi	sp,sp,8
 4003454:	f800283a 	ret

04003458 <vid_print_string_alpha>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
 4003458:	defff404 	addi	sp,sp,-48
 400345c:	dfc00b15 	stw	ra,44(sp)
 4003460:	df000a15 	stw	fp,40(sp)
 4003464:	df000a04 	addi	fp,sp,40
 4003468:	e13ffc15 	stw	r4,-16(fp)
 400346c:	e17ffd15 	stw	r5,-12(fp)
 4003470:	e1bffe15 	stw	r6,-8(fp)
 4003474:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 4003478:	e03ffb15 	stw	zero,-20(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 400347c:	e0bffc17 	ldw	r2,-16(fp)
 4003480:	e0bff915 	stw	r2,-28(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 4003484:	00008206 	br	4003690 <vid_print_string_alpha+0x238>
    //Handle newline char here.
    if (string[i] == '\n') {
 4003488:	e0bffb17 	ldw	r2,-20(fp)
 400348c:	1007883a 	mov	r3,r2
 4003490:	e0800417 	ldw	r2,16(fp)
 4003494:	1885883a 	add	r2,r3,r2
 4003498:	10800003 	ldbu	r2,0(r2)
 400349c:	10803fcc 	andi	r2,r2,255
 40034a0:	1080201c 	xori	r2,r2,128
 40034a4:	10bfe004 	addi	r2,r2,-128
 40034a8:	10800298 	cmpnei	r2,r2,10
 40034ac:	10000c1e 	bne	r2,zero,40034e0 <vid_print_string_alpha+0x88>
      horiz_offset = original_horiz_offset;
 40034b0:	e0bff917 	ldw	r2,-28(fp)
 40034b4:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
 40034b8:	e0800217 	ldw	r2,8(fp)
 40034bc:	1082d804 	addi	r2,r2,2912
 40034c0:	10c00517 	ldw	r3,20(r2)
 40034c4:	e0bffd17 	ldw	r2,-12(fp)
 40034c8:	1885883a 	add	r2,r3,r2
 40034cc:	e0bffd15 	stw	r2,-12(fp)
      i++;
 40034d0:	e0bffb17 	ldw	r2,-20(fp)
 40034d4:	10800044 	addi	r2,r2,1
 40034d8:	e0bffb15 	stw	r2,-20(fp)
      continue;
 40034dc:	00006c06 	br	4003690 <vid_print_string_alpha+0x238>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
 40034e0:	e0bffb17 	ldw	r2,-20(fp)
 40034e4:	1007883a 	mov	r3,r2
 40034e8:	e0800417 	ldw	r2,16(fp)
 40034ec:	1885883a 	add	r2,r3,r2
 40034f0:	10800003 	ldbu	r2,0(r2)
 40034f4:	10803fcc 	andi	r2,r2,255
 40034f8:	1080201c 	xori	r2,r2,128
 40034fc:	10bfe004 	addi	r2,r2,-128
 4003500:	10800818 	cmpnei	r2,r2,32
 4003504:	1000151e 	bne	r2,zero,400355c <vid_print_string_alpha+0x104>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 4003508:	e0bfff17 	ldw	r2,-4(fp)
 400350c:	10bfffe0 	cmpeqi	r2,r2,-1
 4003510:	10000b1e 	bne	r2,zero,4003540 <vid_print_string_alpha+0xe8>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 4003514:	e0bfff17 	ldw	r2,-4(fp)
 4003518:	d8800015 	stw	r2,0(sp)
 400351c:	e0800217 	ldw	r2,8(fp)
 4003520:	d8800115 	stw	r2,4(sp)
 4003524:	e0800317 	ldw	r2,12(fp)
 4003528:	d8800215 	stw	r2,8(sp)
 400352c:	e13ffc17 	ldw	r4,-16(fp)
 4003530:	e17ffd17 	ldw	r5,-12(fp)
 4003534:	e1bfff17 	ldw	r6,-4(fp)
 4003538:	01c00b44 	movi	r7,45
 400353c:	4003c500 	call	4003c50 <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 4003540:	e0800217 	ldw	r2,8(fp)
 4003544:	10806004 	addi	r2,r2,384
 4003548:	10c00417 	ldw	r3,16(r2)
 400354c:	e0bffc17 	ldw	r2,-16(fp)
 4003550:	1885883a 	add	r2,r3,r2
 4003554:	e0bffc15 	stw	r2,-16(fp)
 4003558:	00004a06 	br	4003684 <vid_print_string_alpha+0x22c>
    }
    else if(string[i] == '\t')  // this is a tab
 400355c:	e0bffb17 	ldw	r2,-20(fp)
 4003560:	1007883a 	mov	r3,r2
 4003564:	e0800417 	ldw	r2,16(fp)
 4003568:	1885883a 	add	r2,r3,r2
 400356c:	10800003 	ldbu	r2,0(r2)
 4003570:	10803fcc 	andi	r2,r2,255
 4003574:	1080201c 	xori	r2,r2,128
 4003578:	10bfe004 	addi	r2,r2,-128
 400357c:	10800258 	cmpnei	r2,r2,9
 4003580:	10001d1e 	bne	r2,zero,40035f8 <vid_print_string_alpha+0x1a0>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 4003584:	e03ffa15 	stw	zero,-24(fp)
 4003588:	00001706 	br	40035e8 <vid_print_string_alpha+0x190>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 400358c:	e0bfff17 	ldw	r2,-4(fp)
 4003590:	10bfffe0 	cmpeqi	r2,r2,-1
 4003594:	10000b1e 	bne	r2,zero,40035c4 <vid_print_string_alpha+0x16c>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 4003598:	e0bfff17 	ldw	r2,-4(fp)
 400359c:	d8800015 	stw	r2,0(sp)
 40035a0:	e0800217 	ldw	r2,8(fp)
 40035a4:	d8800115 	stw	r2,4(sp)
 40035a8:	e0800317 	ldw	r2,12(fp)
 40035ac:	d8800215 	stw	r2,8(sp)
 40035b0:	e13ffc17 	ldw	r4,-16(fp)
 40035b4:	e17ffd17 	ldw	r5,-12(fp)
 40035b8:	e1bfff17 	ldw	r6,-4(fp)
 40035bc:	01c00b44 	movi	r7,45
 40035c0:	4003c500 	call	4003c50 <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 40035c4:	e0800217 	ldw	r2,8(fp)
 40035c8:	10806004 	addi	r2,r2,384
 40035cc:	10c00417 	ldw	r3,16(r2)
 40035d0:	e0bffc17 	ldw	r2,-16(fp)
 40035d4:	1885883a 	add	r2,r3,r2
 40035d8:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 40035dc:	e0bffa17 	ldw	r2,-24(fp)
 40035e0:	10800044 	addi	r2,r2,1
 40035e4:	e0bffa15 	stw	r2,-24(fp)
 40035e8:	e0bffa17 	ldw	r2,-24(fp)
 40035ec:	10800090 	cmplti	r2,r2,2
 40035f0:	103fe61e 	bne	r2,zero,400358c <vid_print_string_alpha+0x134>
 40035f4:	00002306 	br	4003684 <vid_print_string_alpha+0x22c>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
 40035f8:	e0bffb17 	ldw	r2,-20(fp)
 40035fc:	1007883a 	mov	r3,r2
 4003600:	e0800417 	ldw	r2,16(fp)
 4003604:	1885883a 	add	r2,r3,r2
 4003608:	10800003 	ldbu	r2,0(r2)
 400360c:	11c03fcc 	andi	r7,r2,255
 4003610:	39c0201c 	xori	r7,r7,128
 4003614:	39ffe004 	addi	r7,r7,-128
 4003618:	e0bfff17 	ldw	r2,-4(fp)
 400361c:	d8800015 	stw	r2,0(sp)
 4003620:	e0800217 	ldw	r2,8(fp)
 4003624:	d8800115 	stw	r2,4(sp)
 4003628:	e0800317 	ldw	r2,12(fp)
 400362c:	d8800215 	stw	r2,8(sp)
 4003630:	e13ffc17 	ldw	r4,-16(fp)
 4003634:	e17ffd17 	ldw	r5,-12(fp)
 4003638:	e1bffe17 	ldw	r6,-8(fp)
 400363c:	4003c500 	call	4003c50 <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
 4003640:	e0bffb17 	ldw	r2,-20(fp)
 4003644:	1007883a 	mov	r3,r2
 4003648:	e0800417 	ldw	r2,16(fp)
 400364c:	1885883a 	add	r2,r3,r2
 4003650:	10800003 	ldbu	r2,0(r2)
 4003654:	10803fcc 	andi	r2,r2,255
 4003658:	1080201c 	xori	r2,r2,128
 400365c:	10bfe004 	addi	r2,r2,-128
 4003660:	1004917a 	slli	r2,r2,5
 4003664:	1007883a 	mov	r3,r2
 4003668:	e0800217 	ldw	r2,8(fp)
 400366c:	1885883a 	add	r2,r3,r2
 4003670:	10bef804 	addi	r2,r2,-1056
 4003674:	10c00417 	ldw	r3,16(r2)
 4003678:	e0bffc17 	ldw	r2,-16(fp)
 400367c:	1885883a 	add	r2,r3,r2
 4003680:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
 4003684:	e0bffb17 	ldw	r2,-20(fp)
 4003688:	10800044 	addi	r2,r2,1
 400368c:	e0bffb15 	stw	r2,-20(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 4003690:	e0bffb17 	ldw	r2,-20(fp)
 4003694:	1007883a 	mov	r3,r2
 4003698:	e0800417 	ldw	r2,16(fp)
 400369c:	1885883a 	add	r2,r3,r2
 40036a0:	10800003 	ldbu	r2,0(r2)
 40036a4:	10803fcc 	andi	r2,r2,255
 40036a8:	1080201c 	xori	r2,r2,128
 40036ac:	10bfe004 	addi	r2,r2,-128
 40036b0:	1004c03a 	cmpne	r2,r2,zero
 40036b4:	103f741e 	bne	r2,zero,4003488 <vid_print_string_alpha+0x30>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
 40036b8:	0005883a 	mov	r2,zero
}
 40036bc:	e037883a 	mov	sp,fp
 40036c0:	dfc00117 	ldw	ra,4(sp)
 40036c4:	df000017 	ldw	fp,0(sp)
 40036c8:	dec00204 	addi	sp,sp,8
 40036cc:	f800283a 	ret

040036d0 <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

__inline__ int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
 40036d0:	defff904 	addi	sp,sp,-28
 40036d4:	df000615 	stw	fp,24(sp)
 40036d8:	df000604 	addi	fp,sp,24
 40036dc:	e13ffc15 	stw	r4,-16(fp)
 40036e0:	e17ffd15 	stw	r5,-12(fp)
 40036e4:	e1bffe15 	stw	r6,-8(fp)
 40036e8:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
 40036ec:	e03ffa0d 	sth	zero,-24(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
 40036f0:	e0bffc17 	ldw	r2,-16(fp)
 40036f4:	10800418 	cmpnei	r2,r2,16
 40036f8:	1000231e 	bne	r2,zero,4003788 <seperate_color_channels+0xb8>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
 40036fc:	e0bffd17 	ldw	r2,-12(fp)
 4003700:	10800003 	ldbu	r2,0(r2)
 4003704:	10803fcc 	andi	r2,r2,255
 4003708:	e0bffa0d 	sth	r2,-24(fp)
 400370c:	e0bffd17 	ldw	r2,-12(fp)
 4003710:	10800044 	addi	r2,r2,1
 4003714:	e0bffd15 	stw	r2,-12(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
 4003718:	e0bffd17 	ldw	r2,-12(fp)
 400371c:	10800003 	ldbu	r2,0(r2)
 4003720:	10803fcc 	andi	r2,r2,255
 4003724:	1004923a 	slli	r2,r2,8
 4003728:	1007883a 	mov	r3,r2
 400372c:	e0bffa0b 	ldhu	r2,-24(fp)
 4003730:	10c5883a 	add	r2,r2,r3
 4003734:	e0bffa0d 	sth	r2,-24(fp)
    *blue = temp_color & 0x1F; 
 4003738:	e0bffa0b 	ldhu	r2,-24(fp)
 400373c:	108007cc 	andi	r2,r2,31
 4003740:	1007883a 	mov	r3,r2
 4003744:	e0800117 	ldw	r2,4(fp)
 4003748:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
 400374c:	e0bffa0b 	ldhu	r2,-24(fp)
 4003750:	1004d17a 	srli	r2,r2,5
 4003754:	10800fcc 	andi	r2,r2,63
 4003758:	1007883a 	mov	r3,r2
 400375c:	e0bfff17 	ldw	r2,-4(fp)
 4003760:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
 4003764:	e0bffa0b 	ldhu	r2,-24(fp)
 4003768:	1004d2fa 	srli	r2,r2,11
 400376c:	108007cc 	andi	r2,r2,31
 4003770:	1007883a 	mov	r3,r2
 4003774:	e0bffe17 	ldw	r2,-8(fp)
 4003778:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 400377c:	00800044 	movi	r2,1
 4003780:	e0bffb15 	stw	r2,-20(fp)
 4003784:	00002206 	br	4003810 <seperate_color_channels+0x140>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 4003788:	e0bffc17 	ldw	r2,-16(fp)
 400378c:	10800620 	cmpeqi	r2,r2,24
 4003790:	1000031e 	bne	r2,zero,40037a0 <seperate_color_channels+0xd0>
 4003794:	e0bffc17 	ldw	r2,-16(fp)
 4003798:	10800818 	cmpnei	r2,r2,32
 400379c:	1000151e 	bne	r2,zero,40037f4 <seperate_color_channels+0x124>
  {
    *blue = *color++;
 40037a0:	e0bffd17 	ldw	r2,-12(fp)
 40037a4:	10c00003 	ldbu	r3,0(r2)
 40037a8:	e0800117 	ldw	r2,4(fp)
 40037ac:	10c00005 	stb	r3,0(r2)
 40037b0:	e0bffd17 	ldw	r2,-12(fp)
 40037b4:	10800044 	addi	r2,r2,1
 40037b8:	e0bffd15 	stw	r2,-12(fp)
    *green = *color++;
 40037bc:	e0bffd17 	ldw	r2,-12(fp)
 40037c0:	10c00003 	ldbu	r3,0(r2)
 40037c4:	e0bfff17 	ldw	r2,-4(fp)
 40037c8:	10c00005 	stb	r3,0(r2)
 40037cc:	e0bffd17 	ldw	r2,-12(fp)
 40037d0:	10800044 	addi	r2,r2,1
 40037d4:	e0bffd15 	stw	r2,-12(fp)
    *red = *color;   
 40037d8:	e0bffd17 	ldw	r2,-12(fp)
 40037dc:	10c00003 	ldbu	r3,0(r2)
 40037e0:	e0bffe17 	ldw	r2,-8(fp)
 40037e4:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 40037e8:	00800044 	movi	r2,1
 40037ec:	e0bffb15 	stw	r2,-20(fp)
    *blue = temp_color & 0x1F; 
    *green = (temp_color >> 5) & 0x3F;
    *red = (temp_color >> 11) & 0x1F;
    return_value = 1;
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 40037f0:	00000706 	br	4003810 <seperate_color_channels+0x140>
    *red = *color;   
    return_value = 1;
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
 40037f4:	e0bffe17 	ldw	r2,-8(fp)
 40037f8:	10000005 	stb	zero,0(r2)
    *green = 0;
 40037fc:	e0bfff17 	ldw	r2,-4(fp)
 4003800:	10000005 	stb	zero,0(r2)
    *blue = 0;    
 4003804:	e0800117 	ldw	r2,4(fp)
 4003808:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 400380c:	e03ffb15 	stw	zero,-20(fp)
  }
  return return_value;
 4003810:	e0bffb17 	ldw	r2,-20(fp)
}
 4003814:	e037883a 	mov	sp,fp
 4003818:	df000017 	ldw	fp,0(sp)
 400381c:	dec00104 	addi	sp,sp,4
 4003820:	f800283a 	ret

04003824 <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

__inline__ int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
 4003824:	defff904 	addi	sp,sp,-28
 4003828:	df000615 	stw	fp,24(sp)
 400382c:	df000604 	addi	fp,sp,24
 4003830:	e13ffc15 	stw	r4,-16(fp)
 4003834:	e17ffd05 	stb	r5,-12(fp)
 4003838:	e1bffe05 	stb	r6,-8(fp)
 400383c:	e1ffff05 	stb	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
 4003840:	e0bffc17 	ldw	r2,-16(fp)
 4003844:	10800418 	cmpnei	r2,r2,16
 4003848:	1000221e 	bne	r2,zero,40038d4 <merge_color_channels+0xb0>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
 400384c:	e0bfff03 	ldbu	r2,-4(fp)
 4003850:	108007cc 	andi	r2,r2,31
 4003854:	1007883a 	mov	r3,r2
 4003858:	e0bffe03 	ldbu	r2,-8(fp)
 400385c:	10800fcc 	andi	r2,r2,63
 4003860:	1004917a 	slli	r2,r2,5
 4003864:	1884b03a 	or	r2,r3,r2
 4003868:	1007883a 	mov	r3,r2
 400386c:	e0bffd03 	ldbu	r2,-12(fp)
 4003870:	108007cc 	andi	r2,r2,31
 4003874:	100492fa 	slli	r2,r2,11
 4003878:	1884b03a 	or	r2,r3,r2
 400387c:	e0bffa0d 	sth	r2,-24(fp)
    *color++ = temp_color & 0xFF;
 4003880:	e0bffa0b 	ldhu	r2,-24(fp)
 4003884:	1007883a 	mov	r3,r2
 4003888:	00bfffc4 	movi	r2,-1
 400388c:	1884703a 	and	r2,r3,r2
 4003890:	1007883a 	mov	r3,r2
 4003894:	e0800117 	ldw	r2,4(fp)
 4003898:	10c00005 	stb	r3,0(r2)
 400389c:	e0800117 	ldw	r2,4(fp)
 40038a0:	10800044 	addi	r2,r2,1
 40038a4:	e0800115 	stw	r2,4(fp)
    *color = (temp_color >> 8) & 0xFF;
 40038a8:	e0bffa0b 	ldhu	r2,-24(fp)
 40038ac:	1004d23a 	srli	r2,r2,8
 40038b0:	1007883a 	mov	r3,r2
 40038b4:	00bfffc4 	movi	r2,-1
 40038b8:	1884703a 	and	r2,r3,r2
 40038bc:	1007883a 	mov	r3,r2
 40038c0:	e0800117 	ldw	r2,4(fp)
 40038c4:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 40038c8:	00800044 	movi	r2,1
 40038cc:	e0bffb15 	stw	r2,-20(fp)
 40038d0:	00002506 	br	4003968 <merge_color_channels+0x144>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 40038d4:	e0bffc17 	ldw	r2,-16(fp)
 40038d8:	10800620 	cmpeqi	r2,r2,24
 40038dc:	1000031e 	bne	r2,zero,40038ec <merge_color_channels+0xc8>
 40038e0:	e0bffc17 	ldw	r2,-16(fp)
 40038e4:	10800818 	cmpnei	r2,r2,32
 40038e8:	1000121e 	bne	r2,zero,4003934 <merge_color_channels+0x110>
  {
    *color++ = blue;
 40038ec:	e0c00117 	ldw	r3,4(fp)
 40038f0:	e0bfff03 	ldbu	r2,-4(fp)
 40038f4:	18800005 	stb	r2,0(r3)
 40038f8:	e0800117 	ldw	r2,4(fp)
 40038fc:	10800044 	addi	r2,r2,1
 4003900:	e0800115 	stw	r2,4(fp)
    *color++ = green;
 4003904:	e0c00117 	ldw	r3,4(fp)
 4003908:	e0bffe03 	ldbu	r2,-8(fp)
 400390c:	18800005 	stb	r2,0(r3)
 4003910:	e0800117 	ldw	r2,4(fp)
 4003914:	10800044 	addi	r2,r2,1
 4003918:	e0800115 	stw	r2,4(fp)
    *color = red;
 400391c:	e0c00117 	ldw	r3,4(fp)
 4003920:	e0bffd03 	ldbu	r2,-12(fp)
 4003924:	18800005 	stb	r2,0(r3)
    return_value = 1;
 4003928:	00800044 	movi	r2,1
 400392c:	e0bffb15 	stw	r2,-20(fp)
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
    *color++ = temp_color & 0xFF;
    *color = (temp_color >> 8) & 0xFF;
    return_value = 1;
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 4003930:	00000d06 	br	4003968 <merge_color_channels+0x144>
    *color = red;
    return_value = 1;
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
 4003934:	e0800117 	ldw	r2,4(fp)
 4003938:	10000005 	stb	zero,0(r2)
 400393c:	e0800117 	ldw	r2,4(fp)
 4003940:	10800044 	addi	r2,r2,1
 4003944:	e0800115 	stw	r2,4(fp)
    *color++ = 0;
 4003948:	e0800117 	ldw	r2,4(fp)
 400394c:	10000005 	stb	zero,0(r2)
 4003950:	e0800117 	ldw	r2,4(fp)
 4003954:	10800044 	addi	r2,r2,1
 4003958:	e0800115 	stw	r2,4(fp)
    *color = 0;
 400395c:	e0800117 	ldw	r2,4(fp)
 4003960:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 4003964:	e03ffb15 	stw	zero,-20(fp)
  }
  return return_value;  
 4003968:	e0bffb17 	ldw	r2,-20(fp)
}
 400396c:	e037883a 	mov	sp,fp
 4003970:	df000017 	ldw	fp,0(sp)
 4003974:	dec00104 	addi	sp,sp,4
 4003978:	f800283a 	ret

0400397c <read_from_frame>:
*           needed to calculate the new one.
*
******************************************************************/

__inline__ int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 400397c:	defffa04 	addi	sp,sp,-24
 4003980:	dfc00515 	stw	ra,20(sp)
 4003984:	df000415 	stw	fp,16(sp)
 4003988:	df000404 	addi	fp,sp,16
 400398c:	e13ffc15 	stw	r4,-16(fp)
 4003990:	e17ffd15 	stw	r5,-12(fp)
 4003994:	e1bffe15 	stw	r6,-8(fp)
 4003998:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("read_from_frame is not implemented!\r\n");
 400399c:	010100f4 	movhi	r4,1027
 40039a0:	2136a004 	addi	r4,r4,-9600
 40039a4:	40093e80 	call	40093e8 <puts>
    return_value = 0; 
  }

  return return_value;
#endif
}
 40039a8:	e037883a 	mov	sp,fp
 40039ac:	dfc00117 	ldw	ra,4(sp)
 40039b0:	df000017 	ldw	fp,0(sp)
 40039b4:	dec00204 	addi	sp,sp,8
 40039b8:	f800283a 	ret

040039bc <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

__inline__ int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 40039bc:	deffed04 	addi	sp,sp,-76
 40039c0:	dfc01215 	stw	ra,72(sp)
 40039c4:	df001115 	stw	fp,68(sp)
 40039c8:	df001104 	addi	fp,sp,68
 40039cc:	e13ff615 	stw	r4,-40(fp)
 40039d0:	e17ff715 	stw	r5,-36(fp)
 40039d4:	e1bff815 	stw	r6,-32(fp)
 40039d8:	e1fff905 	stb	r7,-28(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
 40039dc:	e0bff817 	ldw	r2,-32(fp)
 40039e0:	10bfffd8 	cmpnei	r2,r2,-1
 40039e4:	10000a1e 	bne	r2,zero,4003a10 <alpha_blending+0x54>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
 40039e8:	e1bff504 	addi	r6,fp,-44
 40039ec:	e1fff544 	addi	r7,fp,-43
 40039f0:	e0bff584 	addi	r2,fp,-42
 40039f4:	d8800015 	stw	r2,0(sp)
 40039f8:	e0800517 	ldw	r2,20(fp)
 40039fc:	d8800115 	stw	r2,4(sp)
 4003a00:	e13ff617 	ldw	r4,-40(fp)
 4003a04:	e17ff717 	ldw	r5,-36(fp)
 4003a08:	400397c0 	call	400397c <read_from_frame>
 4003a0c:	00000806 	br	4003a30 <alpha_blending+0x74>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
 4003a10:	e0800517 	ldw	r2,20(fp)
 4003a14:	11000017 	ldw	r4,0(r2)
 4003a18:	e17ff804 	addi	r5,fp,-32
 4003a1c:	e1bff504 	addi	r6,fp,-44
 4003a20:	e1fff544 	addi	r7,fp,-43
 4003a24:	e0bff584 	addi	r2,fp,-42
 4003a28:	d8800015 	stw	r2,0(sp)
 4003a2c:	40036d00 	call	40036d0 <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
 4003a30:	e0800217 	ldw	r2,8(fp)
 4003a34:	10800003 	ldbu	r2,0(r2)
 4003a38:	10c03fcc 	andi	r3,r2,255
 4003a3c:	e0bff903 	ldbu	r2,-28(fp)
 4003a40:	188b383a 	mul	r5,r3,r2
 4003a44:	e0bff503 	ldbu	r2,-44(fp)
 4003a48:	11003fcc 	andi	r4,r2,255
 4003a4c:	e0fff903 	ldbu	r3,-28(fp)
 4003a50:	00803fc4 	movi	r2,255
 4003a54:	10c5c83a 	sub	r2,r2,r3
 4003a58:	2085383a 	mul	r2,r4,r2
 4003a5c:	2889883a 	add	r4,r5,r2
 4003a60:	01403fc4 	movi	r5,255
 4003a64:	40083240 	call	4008324 <__divsi3>
 4003a68:	e0bff315 	stw	r2,-52(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
 4003a6c:	e0800317 	ldw	r2,12(fp)
 4003a70:	10800003 	ldbu	r2,0(r2)
 4003a74:	10c03fcc 	andi	r3,r2,255
 4003a78:	e0bff903 	ldbu	r2,-28(fp)
 4003a7c:	188b383a 	mul	r5,r3,r2
 4003a80:	e0bff543 	ldbu	r2,-43(fp)
 4003a84:	11003fcc 	andi	r4,r2,255
 4003a88:	e0fff903 	ldbu	r3,-28(fp)
 4003a8c:	00803fc4 	movi	r2,255
 4003a90:	10c5c83a 	sub	r2,r2,r3
 4003a94:	2085383a 	mul	r2,r4,r2
 4003a98:	2889883a 	add	r4,r5,r2
 4003a9c:	01403fc4 	movi	r5,255
 4003aa0:	40083240 	call	4008324 <__divsi3>
 4003aa4:	e0bff215 	stw	r2,-56(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
 4003aa8:	e0800417 	ldw	r2,16(fp)
 4003aac:	10800003 	ldbu	r2,0(r2)
 4003ab0:	10c03fcc 	andi	r3,r2,255
 4003ab4:	e0bff903 	ldbu	r2,-28(fp)
 4003ab8:	188b383a 	mul	r5,r3,r2
 4003abc:	e0bff583 	ldbu	r2,-42(fp)
 4003ac0:	11003fcc 	andi	r4,r2,255
 4003ac4:	e0fff903 	ldbu	r3,-28(fp)
 4003ac8:	00803fc4 	movi	r2,255
 4003acc:	10c5c83a 	sub	r2,r2,r3
 4003ad0:	2085383a 	mul	r2,r4,r2
 4003ad4:	2889883a 	add	r4,r5,r2
 4003ad8:	01403fc4 	movi	r5,255
 4003adc:	40083240 	call	4008324 <__divsi3>
 4003ae0:	e0bff115 	stw	r2,-60(fp)
  

  if(display->color_depth == 16)
 4003ae4:	e0800517 	ldw	r2,20(fp)
 4003ae8:	10800017 	ldw	r2,0(r2)
 4003aec:	10800418 	cmpnei	r2,r2,16
 4003af0:	1000241e 	bne	r2,zero,4003b84 <alpha_blending+0x1c8>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
 4003af4:	e0bff317 	ldw	r2,-52(fp)
 4003af8:	e0bfff15 	stw	r2,-4(fp)
 4003afc:	e0ffff17 	ldw	r3,-4(fp)
 4003b00:	18800830 	cmpltui	r2,r3,32
 4003b04:	1000021e 	bne	r2,zero,4003b10 <alpha_blending+0x154>
 4003b08:	008007c4 	movi	r2,31
 4003b0c:	e0bfff15 	stw	r2,-4(fp)
 4003b10:	e0ffff17 	ldw	r3,-4(fp)
 4003b14:	1805883a 	mov	r2,r3
 4003b18:	e0c00217 	ldw	r3,8(fp)
 4003b1c:	18800005 	stb	r2,0(r3)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
 4003b20:	e0bff217 	ldw	r2,-56(fp)
 4003b24:	e0bffe15 	stw	r2,-8(fp)
 4003b28:	e0fffe17 	ldw	r3,-8(fp)
 4003b2c:	18801030 	cmpltui	r2,r3,64
 4003b30:	1000021e 	bne	r2,zero,4003b3c <alpha_blending+0x180>
 4003b34:	00800fc4 	movi	r2,63
 4003b38:	e0bffe15 	stw	r2,-8(fp)
 4003b3c:	e0fffe17 	ldw	r3,-8(fp)
 4003b40:	1805883a 	mov	r2,r3
 4003b44:	e0c00317 	ldw	r3,12(fp)
 4003b48:	18800005 	stb	r2,0(r3)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
 4003b4c:	e0bff117 	ldw	r2,-60(fp)
 4003b50:	e0bffd15 	stw	r2,-12(fp)
 4003b54:	e0fffd17 	ldw	r3,-12(fp)
 4003b58:	18800830 	cmpltui	r2,r3,32
 4003b5c:	1000021e 	bne	r2,zero,4003b68 <alpha_blending+0x1ac>
 4003b60:	008007c4 	movi	r2,31
 4003b64:	e0bffd15 	stw	r2,-12(fp)
 4003b68:	e0fffd17 	ldw	r3,-12(fp)
 4003b6c:	1805883a 	mov	r2,r3
 4003b70:	e0c00417 	ldw	r3,16(fp)
 4003b74:	18800005 	stb	r2,0(r3)
    return_value = 1;        
 4003b78:	00800044 	movi	r2,1
 4003b7c:	e0bff415 	stw	r2,-48(fp)
 4003b80:	00002d06 	br	4003c38 <alpha_blending+0x27c>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
 4003b84:	e0800517 	ldw	r2,20(fp)
 4003b88:	10800017 	ldw	r2,0(r2)
 4003b8c:	10800620 	cmpeqi	r2,r2,24
 4003b90:	1000041e 	bne	r2,zero,4003ba4 <alpha_blending+0x1e8>
 4003b94:	e0800517 	ldw	r2,20(fp)
 4003b98:	10800017 	ldw	r2,0(r2)
 4003b9c:	10800818 	cmpnei	r2,r2,32
 4003ba0:	1000241e 	bne	r2,zero,4003c34 <alpha_blending+0x278>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
 4003ba4:	e0bff317 	ldw	r2,-52(fp)
 4003ba8:	e0bffc15 	stw	r2,-16(fp)
 4003bac:	e0fffc17 	ldw	r3,-16(fp)
 4003bb0:	18804030 	cmpltui	r2,r3,256
 4003bb4:	1000021e 	bne	r2,zero,4003bc0 <alpha_blending+0x204>
 4003bb8:	00803fc4 	movi	r2,255
 4003bbc:	e0bffc15 	stw	r2,-16(fp)
 4003bc0:	e0fffc17 	ldw	r3,-16(fp)
 4003bc4:	1805883a 	mov	r2,r3
 4003bc8:	e0c00217 	ldw	r3,8(fp)
 4003bcc:	18800005 	stb	r2,0(r3)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
 4003bd0:	e0bff217 	ldw	r2,-56(fp)
 4003bd4:	e0bffb15 	stw	r2,-20(fp)
 4003bd8:	e0fffb17 	ldw	r3,-20(fp)
 4003bdc:	18804030 	cmpltui	r2,r3,256
 4003be0:	1000021e 	bne	r2,zero,4003bec <alpha_blending+0x230>
 4003be4:	00803fc4 	movi	r2,255
 4003be8:	e0bffb15 	stw	r2,-20(fp)
 4003bec:	e0fffb17 	ldw	r3,-20(fp)
 4003bf0:	1805883a 	mov	r2,r3
 4003bf4:	e0c00317 	ldw	r3,12(fp)
 4003bf8:	18800005 	stb	r2,0(r3)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
 4003bfc:	e0bff117 	ldw	r2,-60(fp)
 4003c00:	e0bffa15 	stw	r2,-24(fp)
 4003c04:	e0fffa17 	ldw	r3,-24(fp)
 4003c08:	18804030 	cmpltui	r2,r3,256
 4003c0c:	1000021e 	bne	r2,zero,4003c18 <alpha_blending+0x25c>
 4003c10:	00803fc4 	movi	r2,255
 4003c14:	e0bffa15 	stw	r2,-24(fp)
 4003c18:	e0fffa17 	ldw	r3,-24(fp)
 4003c1c:	1805883a 	mov	r2,r3
 4003c20:	e0c00417 	ldw	r3,16(fp)
 4003c24:	18800005 	stb	r2,0(r3)
    return_value = 1;            
 4003c28:	00800044 	movi	r2,1
 4003c2c:	e0bff415 	stw	r2,-48(fp)
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
    return_value = 1;        
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
 4003c30:	00000106 	br	4003c38 <alpha_blending+0x27c>
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
    return_value = 1;            
  }
  else
  {
    return_value = 0;     
 4003c34:	e03ff415 	stw	zero,-48(fp)
  }  
 
  return return_value;
 4003c38:	e0bff417 	ldw	r2,-48(fp)
} 
 4003c3c:	e037883a 	mov	sp,fp
 4003c40:	dfc00117 	ldw	ra,4(sp)
 4003c44:	df000017 	ldw	fp,0(sp)
 4003c48:	dec00204 	addi	sp,sp,8
 4003c4c:	f800283a 	ret

04003c50 <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
 4003c50:	defff004 	addi	sp,sp,-64
 4003c54:	dfc00f15 	stw	ra,60(sp)
 4003c58:	df000e15 	stw	fp,56(sp)
 4003c5c:	df000e04 	addi	fp,sp,56
 4003c60:	e13ffc15 	stw	r4,-16(fp)
 4003c64:	e17ffd15 	stw	r5,-12(fp)
 4003c68:	e1bffe15 	stw	r6,-8(fp)
 4003c6c:	e1ffff05 	stb	r7,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
 4003c70:	e0bfff07 	ldb	r2,-4(fp)
 4003c74:	1004917a 	slli	r2,r2,5
 4003c78:	1007883a 	mov	r3,r2
 4003c7c:	e0800317 	ldw	r2,12(fp)
 4003c80:	1885883a 	add	r2,r3,r2
 4003c84:	10bef804 	addi	r2,r2,-1056
 4003c88:	10800617 	ldw	r2,24(r2)
 4003c8c:	e0bff615 	stw	r2,-40(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
 4003c90:	e0800417 	ldw	r2,16(fp)
 4003c94:	11000017 	ldw	r4,0(r2)
 4003c98:	e17ffe04 	addi	r5,fp,-8
 4003c9c:	e1bff904 	addi	r6,fp,-28
 4003ca0:	e1fff984 	addi	r7,fp,-26
 4003ca4:	e0bff944 	addi	r2,fp,-27
 4003ca8:	d8800015 	stw	r2,0(sp)
 4003cac:	40036d00 	call	40036d0 <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
 4003cb0:	e03ff815 	stw	zero,-32(fp)
 4003cb4:	00004206 	br	4003dc0 <vid_print_char_alpha+0x170>
    for (j = 0; j < font[character-33].bounds_width; j++) {
 4003cb8:	e03ff715 	stw	zero,-36(fp)
 4003cbc:	00003406 	br	4003d90 <vid_print_char_alpha+0x140>
      red = original_red;
 4003cc0:	e0bff903 	ldbu	r2,-28(fp)
 4003cc4:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
 4003cc8:	e0bff983 	ldbu	r2,-26(fp)
 4003ccc:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
 4003cd0:	e0bff943 	ldbu	r2,-27(fp)
 4003cd4:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
 4003cd8:	e0fffc17 	ldw	r3,-16(fp)
 4003cdc:	e0bff717 	ldw	r2,-36(fp)
 4003ce0:	1889883a 	add	r4,r3,r2
 4003ce4:	e0fffd17 	ldw	r3,-12(fp)
 4003ce8:	e0bff817 	ldw	r2,-32(fp)
 4003cec:	188b883a 	add	r5,r3,r2
 4003cf0:	e0bff617 	ldw	r2,-40(fp)
 4003cf4:	10800003 	ldbu	r2,0(r2)
 4003cf8:	11c03fcc 	andi	r7,r2,255
 4003cfc:	e0bff9c4 	addi	r2,fp,-25
 4003d00:	d8800015 	stw	r2,0(sp)
 4003d04:	e0bffa04 	addi	r2,fp,-24
 4003d08:	d8800115 	stw	r2,4(sp)
 4003d0c:	e0bffa44 	addi	r2,fp,-23
 4003d10:	d8800215 	stw	r2,8(sp)
 4003d14:	e0800417 	ldw	r2,16(fp)
 4003d18:	d8800315 	stw	r2,12(sp)
 4003d1c:	e1800217 	ldw	r6,8(fp)
 4003d20:	40039bc0 	call	40039bc <alpha_blending>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
 4003d24:	e0800417 	ldw	r2,16(fp)
 4003d28:	11000017 	ldw	r4,0(r2)
 4003d2c:	e0bff9c3 	ldbu	r2,-25(fp)
 4003d30:	11403fcc 	andi	r5,r2,255
 4003d34:	e0bffa03 	ldbu	r2,-24(fp)
 4003d38:	11803fcc 	andi	r6,r2,255
 4003d3c:	e0bffa43 	ldbu	r2,-23(fp)
 4003d40:	11c03fcc 	andi	r7,r2,255
 4003d44:	e0bffb04 	addi	r2,fp,-20
 4003d48:	d8800015 	stw	r2,0(sp)
 4003d4c:	40038240 	call	4003824 <merge_color_channels>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
 4003d50:	e0fffc17 	ldw	r3,-16(fp)
 4003d54:	e0bff717 	ldw	r2,-36(fp)
 4003d58:	1889883a 	add	r4,r3,r2
 4003d5c:	e0fffd17 	ldw	r3,-12(fp)
 4003d60:	e0bff817 	ldw	r2,-32(fp)
 4003d64:	188b883a 	add	r5,r3,r2
 4003d68:	e0bffb17 	ldw	r2,-20(fp)
 4003d6c:	100d883a 	mov	r6,r2
 4003d70:	e1c00417 	ldw	r7,16(fp)
 4003d74:	40018f40 	call	40018f4 <vid_set_pixel>

      alpha++;
 4003d78:	e0bff617 	ldw	r2,-40(fp)
 4003d7c:	10800044 	addi	r2,r2,1
 4003d80:	e0bff615 	stw	r2,-40(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
 4003d84:	e0bff717 	ldw	r2,-36(fp)
 4003d88:	10800044 	addi	r2,r2,1
 4003d8c:	e0bff715 	stw	r2,-36(fp)
 4003d90:	e13ff717 	ldw	r4,-36(fp)
 4003d94:	e0bfff07 	ldb	r2,-4(fp)
 4003d98:	1004917a 	slli	r2,r2,5
 4003d9c:	1007883a 	mov	r3,r2
 4003da0:	e0800317 	ldw	r2,12(fp)
 4003da4:	1885883a 	add	r2,r3,r2
 4003da8:	10bef804 	addi	r2,r2,-1056
 4003dac:	10800417 	ldw	r2,16(r2)
 4003db0:	20bfc336 	bltu	r4,r2,4003cc0 <vid_print_char_alpha+0x70>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
 4003db4:	e0bff817 	ldw	r2,-32(fp)
 4003db8:	10800044 	addi	r2,r2,1
 4003dbc:	e0bff815 	stw	r2,-32(fp)
 4003dc0:	e13ff817 	ldw	r4,-32(fp)
 4003dc4:	e0bfff07 	ldb	r2,-4(fp)
 4003dc8:	1004917a 	slli	r2,r2,5
 4003dcc:	1007883a 	mov	r3,r2
 4003dd0:	e0800317 	ldw	r2,12(fp)
 4003dd4:	1885883a 	add	r2,r3,r2
 4003dd8:	10bef804 	addi	r2,r2,-1056
 4003ddc:	10800517 	ldw	r2,20(r2)
 4003de0:	20bfb536 	bltu	r4,r2,4003cb8 <vid_print_char_alpha+0x68>

      alpha++;
    }
  }

  return(0);
 4003de4:	0005883a 	mov	r2,zero
}
 4003de8:	e037883a 	mov	sp,fp
 4003dec:	dfc00117 	ldw	ra,4(sp)
 4003df0:	df000017 	ldw	fp,0(sp)
 4003df4:	dec00204 	addi	sp,sp,8
 4003df8:	f800283a 	ret

04003dfc <vid_string_pixel_length_alpha>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
 4003dfc:	defffb04 	addi	sp,sp,-20
 4003e00:	df000415 	stw	fp,16(sp)
 4003e04:	df000404 	addi	fp,sp,16
 4003e08:	e13ffe15 	stw	r4,-8(fp)
 4003e0c:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
 4003e10:	e03ffd15 	stw	zero,-12(fp)
  int length = 0;
 4003e14:	e03ffc15 	stw	zero,-16(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 4003e18:	e03ffd15 	stw	zero,-12(fp)
 4003e1c:	00002506 	br	4003eb4 <vid_string_pixel_length_alpha+0xb8>
  {
    if( string[i] == ' ' )
 4003e20:	e0bffd17 	ldw	r2,-12(fp)
 4003e24:	1007883a 	mov	r3,r2
 4003e28:	e0bfff17 	ldw	r2,-4(fp)
 4003e2c:	1885883a 	add	r2,r3,r2
 4003e30:	10800003 	ldbu	r2,0(r2)
 4003e34:	10803fcc 	andi	r2,r2,255
 4003e38:	1080201c 	xori	r2,r2,128
 4003e3c:	10bfe004 	addi	r2,r2,-128
 4003e40:	10800818 	cmpnei	r2,r2,32
 4003e44:	1000071e 	bne	r2,zero,4003e64 <vid_string_pixel_length_alpha+0x68>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
 4003e48:	e0bffe17 	ldw	r2,-8(fp)
 4003e4c:	10806004 	addi	r2,r2,384
 4003e50:	10c00417 	ldw	r3,16(r2)
 4003e54:	e0bffc17 	ldw	r2,-16(fp)
 4003e58:	1885883a 	add	r2,r3,r2
 4003e5c:	e0bffc15 	stw	r2,-16(fp)
 4003e60:	00001106 	br	4003ea8 <vid_string_pixel_length_alpha+0xac>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
 4003e64:	e0bffd17 	ldw	r2,-12(fp)
 4003e68:	1007883a 	mov	r3,r2
 4003e6c:	e0bfff17 	ldw	r2,-4(fp)
 4003e70:	1885883a 	add	r2,r3,r2
 4003e74:	10800003 	ldbu	r2,0(r2)
 4003e78:	10803fcc 	andi	r2,r2,255
 4003e7c:	1080201c 	xori	r2,r2,128
 4003e80:	10bfe004 	addi	r2,r2,-128
 4003e84:	1004917a 	slli	r2,r2,5
 4003e88:	1007883a 	mov	r3,r2
 4003e8c:	e0bffe17 	ldw	r2,-8(fp)
 4003e90:	1885883a 	add	r2,r3,r2
 4003e94:	10bef804 	addi	r2,r2,-1056
 4003e98:	10c00417 	ldw	r3,16(r2)
 4003e9c:	e0bffc17 	ldw	r2,-16(fp)
 4003ea0:	1885883a 	add	r2,r3,r2
 4003ea4:	e0bffc15 	stw	r2,-16(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 4003ea8:	e0bffd17 	ldw	r2,-12(fp)
 4003eac:	10800044 	addi	r2,r2,1
 4003eb0:	e0bffd15 	stw	r2,-12(fp)
 4003eb4:	e0bffd17 	ldw	r2,-12(fp)
 4003eb8:	1007883a 	mov	r3,r2
 4003ebc:	e0bfff17 	ldw	r2,-4(fp)
 4003ec0:	1885883a 	add	r2,r3,r2
 4003ec4:	10800003 	ldbu	r2,0(r2)
 4003ec8:	10803fcc 	andi	r2,r2,255
 4003ecc:	1080201c 	xori	r2,r2,128
 4003ed0:	10bfe004 	addi	r2,r2,-128
 4003ed4:	1004c03a 	cmpne	r2,r2,zero
 4003ed8:	103fd11e 	bne	r2,zero,4003e20 <vid_string_pixel_length_alpha+0x24>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
 4003edc:	e0bffc17 	ldw	r2,-16(fp)
}
 4003ee0:	e037883a 	mov	sp,fp
 4003ee4:	df000017 	ldw	fp,0(sp)
 4003ee8:	dec00104 	addi	sp,sp,4
 4003eec:	f800283a 	ret

04003ef0 <GUI_ShowWelcome>:
    RECT rcPaint;
    PALETTE_INFO szPalette[BTN_NUM];
}DESK_INFO;


void GUI_ShowWelcome(alt_video_display *pDisplay){
 4003ef0:	defff804 	addi	sp,sp,-32
 4003ef4:	dfc00715 	stw	ra,28(sp)
 4003ef8:	df000615 	stw	fp,24(sp)
 4003efc:	df000604 	addi	fp,sp,24
 4003f00:	e13fff15 	stw	r4,-4(fp)
	int x, y;


	x = pDisplay->width / 2 - 60;
 4003f04:	e0bfff17 	ldw	r2,-4(fp)
 4003f08:	10c00117 	ldw	r3,4(r2)
 4003f0c:	1804d7fa 	srli	r2,r3,31
 4003f10:	10c5883a 	add	r2,r2,r3
 4003f14:	1005d07a 	srai	r2,r2,1
 4003f18:	10bff104 	addi	r2,r2,-60
 4003f1c:	e0bffe15 	stw	r2,-8(fp)
	y = pDisplay->height / 2 - 10;
 4003f20:	e0bfff17 	ldw	r2,-4(fp)
 4003f24:	10c00217 	ldw	r3,8(r2)
 4003f28:	1804d7fa 	srli	r2,r3,31
 4003f2c:	10c5883a 	add	r2,r2,r3
 4003f30:	1005d07a 	srai	r2,r2,1
 4003f34:	10bffd84 	addi	r2,r2,-10
 4003f38:	e0bffd15 	stw	r2,-12(fp)

	vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
 4003f3c:	008100f4 	movhi	r2,1027
 4003f40:	10b82404 	addi	r2,r2,-8048
 4003f44:	d8800015 	stw	r2,0(sp)
 4003f48:	e0bfff17 	ldw	r2,-4(fp)
 4003f4c:	d8800115 	stw	r2,4(sp)
 4003f50:	008100f4 	movhi	r2,1027
 4003f54:	10b6aa04 	addi	r2,r2,-9560
 4003f58:	d8800215 	stw	r2,8(sp)
 4003f5c:	e13ffe17 	ldw	r4,-8(fp)
 4003f60:	e17ffd17 	ldw	r5,-12(fp)
 4003f64:	01803fc4 	movi	r6,255
 4003f68:	000f883a 	mov	r7,zero
 4003f6c:	40034580 	call	4003458 <vid_print_string_alpha>
	vid_print_string_alpha(x, y+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch Demo");
 4003f70:	e0bffd17 	ldw	r2,-12(fp)
 4003f74:	11400584 	addi	r5,r2,22
 4003f78:	008100f4 	movhi	r2,1027
 4003f7c:	10b82404 	addi	r2,r2,-8048
 4003f80:	d8800015 	stw	r2,0(sp)
 4003f84:	e0bfff17 	ldw	r2,-4(fp)
 4003f88:	d8800115 	stw	r2,4(sp)
 4003f8c:	008100f4 	movhi	r2,1027
 4003f90:	10b6ac04 	addi	r2,r2,-9552
 4003f94:	d8800215 	stw	r2,8(sp)
 4003f98:	e13ffe17 	ldw	r4,-8(fp)
 4003f9c:	01803fc4 	movi	r6,255
 4003fa0:	000f883a 	mov	r7,zero
 4003fa4:	40034580 	call	4003458 <vid_print_string_alpha>



}
 4003fa8:	e037883a 	mov	sp,fp
 4003fac:	dfc00117 	ldw	ra,4(sp)
 4003fb0:	df000017 	ldw	fp,0(sp)
 4003fb4:	dec00204 	addi	sp,sp,8
 4003fb8:	f800283a 	ret

04003fbc <GUI_DeskInit>:

void GUI_DeskInit(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
 4003fbc:	deffef04 	addi	sp,sp,-68
 4003fc0:	dfc01015 	stw	ra,64(sp)
 4003fc4:	df000f15 	stw	fp,60(sp)
 4003fc8:	df000f04 	addi	fp,sp,60
 4003fcc:	e13ffe15 	stw	r4,-8(fp)
 4003fd0:	e17fff15 	stw	r5,-4(fp)
    int i;
    RECT rc;
    const int BoxH = 40;
 4003fd4:	00800a04 	movi	r2,40
 4003fd8:	e0bff815 	stw	r2,-32(fp)
    const int BoxW = 40;
 4003fdc:	00800a04 	movi	r2,40
 4003fe0:	e0bff715 	stw	r2,-36(fp)
    const int GapH = 5;
 4003fe4:	00800144 	movi	r2,5
 4003fe8:	e0bff615 	stw	r2,-40(fp)
    const int DrawBorder = 2;
 4003fec:	00800084 	movi	r2,2
 4003ff0:	e0bff515 	stw	r2,-44(fp)
    const int TextW = 0;
 4003ff4:	e03ff415 	stw	zero,-48(fp)
    const int ClearExtraW = 30;
 4003ff8:	00800784 	movi	r2,30
 4003ffc:	e0bff315 	stw	r2,-52(fp)
    int GapW;

    
    GapW = (pDisplay->width - TextW - ClearExtraW - (BTN_NUM*BoxW))/(BTN_NUM+1);
 4004000:	e0bffe17 	ldw	r2,-8(fp)
 4004004:	10c00117 	ldw	r3,4(r2)
 4004008:	e0bff417 	ldw	r2,-48(fp)
 400400c:	1887c83a 	sub	r3,r3,r2
 4004010:	e0bff317 	ldw	r2,-52(fp)
 4004014:	1887c83a 	sub	r3,r3,r2
 4004018:	e0bff717 	ldw	r2,-36(fp)
 400401c:	10800164 	muli	r2,r2,5
 4004020:	1889c83a 	sub	r4,r3,r2
 4004024:	01400184 	movi	r5,6
 4004028:	40083240 	call	4008324 <__divsi3>
 400402c:	e0bff215 	stw	r2,-56(fp)
    //printf("GapW=%d\r\n", GapW);
    rc.top = pDisplay->height - BoxH - GapH;
 4004030:	e0bffe17 	ldw	r2,-8(fp)
 4004034:	10c00217 	ldw	r3,8(r2)
 4004038:	e0bff817 	ldw	r2,-32(fp)
 400403c:	1887c83a 	sub	r3,r3,r2
 4004040:	e0bff617 	ldw	r2,-40(fp)
 4004044:	1885c83a 	sub	r2,r3,r2
 4004048:	e0bffc15 	stw	r2,-16(fp)
    rc.bottom = rc.top + BoxH;
 400404c:	e0fffc17 	ldw	r3,-16(fp)
 4004050:	e0bff817 	ldw	r2,-32(fp)
 4004054:	1885883a 	add	r2,r3,r2
 4004058:	e0bffd15 	stw	r2,-12(fp)
    rc.left = GapW + TextW + ClearExtraW;
 400405c:	e0fff217 	ldw	r3,-56(fp)
 4004060:	e0bff417 	ldw	r2,-48(fp)
 4004064:	1887883a 	add	r3,r3,r2
 4004068:	e0bff317 	ldw	r2,-52(fp)
 400406c:	1885883a 	add	r2,r3,r2
 4004070:	e0bffa15 	stw	r2,-24(fp)
    rc.right = rc.left + BoxW;
 4004074:	e0fffa17 	ldw	r3,-24(fp)
 4004078:	e0bff717 	ldw	r2,-36(fp)
 400407c:	1885883a 	add	r2,r3,r2
 4004080:	e0bffb15 	stw	r2,-20(fp)
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
 4004084:	e0bfff17 	ldw	r2,-4(fp)
 4004088:	11000104 	addi	r4,r2,4
 400408c:	e0bffe17 	ldw	r2,-8(fp)
 4004090:	10c00117 	ldw	r3,4(r2)
 4004094:	e0bff517 	ldw	r2,-44(fp)
 4004098:	188dc83a 	sub	r6,r3,r2
 400409c:	e0fffc17 	ldw	r3,-16(fp)
 40040a0:	e0bff517 	ldw	r2,-44(fp)
 40040a4:	1885c83a 	sub	r2,r3,r2
 40040a8:	d8800015 	stw	r2,0(sp)
 40040ac:	e17ff517 	ldw	r5,-44(fp)
 40040b0:	e1fff517 	ldw	r7,-44(fp)
 40040b4:	40002c40 	call	40002c4 <RectSet>
    
    for(i=0;i<BTN_NUM;i++){
 40040b8:	e03ff915 	stw	zero,-28(fp)
 40040bc:	00001e06 	br	4004138 <GUI_DeskInit+0x17c>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
 40040c0:	e0bff917 	ldw	r2,-28(fp)
 40040c4:	10800524 	muli	r2,r2,20
 40040c8:	10c00504 	addi	r3,r2,20
 40040cc:	e0bfff17 	ldw	r2,-4(fp)
 40040d0:	1889883a 	add	r4,r3,r2
 40040d4:	e17ffa04 	addi	r5,fp,-24
 40040d8:	40004300 	call	4000430 <RectCopy>
        pDeskInfo->szPalette[i].color = szPallete[i];
 40040dc:	e17ff917 	ldw	r5,-28(fp)
 40040e0:	e0bff917 	ldw	r2,-28(fp)
 40040e4:	00c100f4 	movhi	r3,1027
 40040e8:	18ff0a04 	addi	r3,r3,-984
 40040ec:	1085883a 	add	r2,r2,r2
 40040f0:	1085883a 	add	r2,r2,r2
 40040f4:	10c5883a 	add	r2,r2,r3
 40040f8:	10800017 	ldw	r2,0(r2)
 40040fc:	1009883a 	mov	r4,r2
 4004100:	e0ffff17 	ldw	r3,-4(fp)
 4004104:	28800524 	muli	r2,r5,20
 4004108:	10c5883a 	add	r2,r2,r3
 400410c:	10800904 	addi	r2,r2,36
 4004110:	11000015 	stw	r4,0(r2)
        RectOffset(&rc, BoxW+GapW, 0);
 4004114:	e0fff717 	ldw	r3,-36(fp)
 4004118:	e0bff217 	ldw	r2,-56(fp)
 400411c:	188b883a 	add	r5,r3,r2
 4004120:	e13ffa04 	addi	r4,fp,-24
 4004124:	000d883a 	mov	r6,zero
 4004128:	40003a80 	call	40003a8 <RectOffset>
    rc.right = rc.left + BoxW;
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
    
    for(i=0;i<BTN_NUM;i++){
 400412c:	e0bff917 	ldw	r2,-28(fp)
 4004130:	10800044 	addi	r2,r2,1
 4004134:	e0bff915 	stw	r2,-28(fp)
 4004138:	e0bff917 	ldw	r2,-28(fp)
 400413c:	10800150 	cmplti	r2,r2,5
 4004140:	103fdf1e 	bne	r2,zero,40040c0 <GUI_DeskInit+0x104>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
        pDeskInfo->szPalette[i].color = szPallete[i];
        RectOffset(&rc, BoxW+GapW, 0);
    }
    pDeskInfo->szPalette[BTN_CLEAR].rc.left -= ClearExtraW;
 4004144:	e0bfff17 	ldw	r2,-4(fp)
 4004148:	10c00517 	ldw	r3,20(r2)
 400414c:	e0bff317 	ldw	r2,-52(fp)
 4004150:	1887c83a 	sub	r3,r3,r2
 4004154:	e0bfff17 	ldw	r2,-4(fp)
 4004158:	10c00515 	stw	r3,20(r2)
    pDeskInfo->Paint_Index = BTN_BLUE;
 400415c:	e0ffff17 	ldw	r3,-4(fp)
 4004160:	00800084 	movi	r2,2
 4004164:	18800015 	stw	r2,0(r3)
}
 4004168:	e037883a 	mov	sp,fp
 400416c:	dfc00117 	ldw	ra,4(sp)
 4004170:	df000017 	ldw	fp,0(sp)
 4004174:	dec00204 	addi	sp,sp,8
 4004178:	f800283a 	ret

0400417c <GUI_CheckButton>:

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
 400417c:	defffa04 	addi	sp,sp,-24
 4004180:	dfc00515 	stw	ra,20(sp)
 4004184:	df000415 	stw	fp,16(sp)
 4004188:	df000404 	addi	fp,sp,16
 400418c:	e13ffe15 	stw	r4,-8(fp)
 4004190:	e17fff15 	stw	r5,-4(fp)
    int ButtonId = BTN_NONE;
 4004194:	00800184 	movi	r2,6
 4004198:	e0bffd15 	stw	r2,-12(fp)
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
 400419c:	e03ffc15 	stw	zero,-16(fp)
 40041a0:	00000e06 	br	40041dc <GUI_CheckButton+0x60>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
 40041a4:	e0bffc17 	ldw	r2,-16(fp)
 40041a8:	10800524 	muli	r2,r2,20
 40041ac:	10c00504 	addi	r3,r2,20
 40041b0:	e0bffe17 	ldw	r2,-8(fp)
 40041b4:	188b883a 	add	r5,r3,r2
 40041b8:	e13fff17 	ldw	r4,-4(fp)
 40041bc:	40002000 	call	4000200 <IsPtInRect>
 40041c0:	1005003a 	cmpeq	r2,r2,zero
 40041c4:	1000021e 	bne	r2,zero,40041d0 <GUI_CheckButton+0x54>
            ButtonId = i;
 40041c8:	e0bffc17 	ldw	r2,-16(fp)
 40041cc:	e0bffd15 	stw	r2,-12(fp)

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    int ButtonId = BTN_NONE;
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
 40041d0:	e0bffc17 	ldw	r2,-16(fp)
 40041d4:	10800044 	addi	r2,r2,1
 40041d8:	e0bffc15 	stw	r2,-16(fp)
 40041dc:	e0bffc17 	ldw	r2,-16(fp)
 40041e0:	10800148 	cmpgei	r2,r2,5
 40041e4:	1000031e 	bne	r2,zero,40041f4 <GUI_CheckButton+0x78>
 40041e8:	e0bffd17 	ldw	r2,-12(fp)
 40041ec:	108001a0 	cmpeqi	r2,r2,6
 40041f0:	103fec1e 	bne	r2,zero,40041a4 <GUI_CheckButton+0x28>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
            ButtonId = i;
    }
    return ButtonId;
 40041f4:	e0bffd17 	ldw	r2,-12(fp)
}
 40041f8:	e037883a 	mov	sp,fp
 40041fc:	dfc00117 	ldw	ra,4(sp)
 4004200:	df000017 	ldw	fp,0(sp)
 4004204:	dec00204 	addi	sp,sp,8
 4004208:	f800283a 	ret

0400420c <GUI_DeskDraw>:

void GUI_DeskDraw(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
 400420c:	defff104 	addi	sp,sp,-60
 4004210:	dfc00e15 	stw	ra,56(sp)
 4004214:	df000d15 	stw	fp,52(sp)
 4004218:	dc400c15 	stw	r17,48(sp)
 400421c:	dc000b15 	stw	r16,44(sp)
 4004220:	df000b04 	addi	fp,sp,44
 4004224:	e13ffe15 	stw	r4,-8(fp)
 4004228:	e17fff15 	stw	r5,-4(fp)
    // show text
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch");

    // draw border
    RectCopy(&rc, &pDeskInfo->rcPaint);
 400422c:	e0bfff17 	ldw	r2,-4(fp)
 4004230:	11400104 	addi	r5,r2,4
 4004234:	e13ffa04 	addi	r4,fp,-24
 4004238:	40004300 	call	4000430 <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
 400423c:	e13ffa17 	ldw	r4,-24(fp)
 4004240:	e17ffc17 	ldw	r5,-16(fp)
 4004244:	e1bffb17 	ldw	r6,-20(fp)
 4004248:	e1fffd17 	ldw	r7,-12(fp)
 400424c:	00804034 	movhi	r2,256
 4004250:	10bfffc4 	addi	r2,r2,-1
 4004254:	d8800015 	stw	r2,0(sp)
 4004258:	d8000115 	stw	zero,4(sp)
 400425c:	e0bffe17 	ldw	r2,-8(fp)
 4004260:	d8800215 	stw	r2,8(sp)
 4004264:	40016d00 	call	40016d0 <vid_draw_box>
    

    // draw palette
	active = pDeskInfo->Paint_Index;
 4004268:	e0bfff17 	ldw	r2,-4(fp)
 400426c:	10800017 	ldw	r2,0(r2)
 4004270:	e0bff815 	stw	r2,-32(fp)
    for(i=0;i<BTN_NUM;i++){
 4004274:	e03ff915 	stw	zero,-28(fp)
 4004278:	00005906 	br	40043e0 <GUI_DeskDraw+0x1d4>
        RectCopy(&rc, &(pDeskInfo->szPalette[i].rc));
 400427c:	e0bff917 	ldw	r2,-28(fp)
 4004280:	10800524 	muli	r2,r2,20
 4004284:	10c00504 	addi	r3,r2,20
 4004288:	e0bfff17 	ldw	r2,-4(fp)
 400428c:	188b883a 	add	r5,r3,r2
 4004290:	e13ffa04 	addi	r4,fp,-24
 4004294:	40004300 	call	4000430 <RectCopy>
        if (i == BTN_CLEAR){
 4004298:	e0bff917 	ldw	r2,-28(fp)
 400429c:	1004c03a 	cmpne	r2,r2,zero
 40042a0:	10002b1e 	bne	r2,zero,4004350 <GUI_DeskDraw+0x144>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_NOT_FILL, pDisplay);
 40042a4:	e13ffa17 	ldw	r4,-24(fp)
 40042a8:	e17ffc17 	ldw	r5,-16(fp)
 40042ac:	e1bffb17 	ldw	r6,-20(fp)
 40042b0:	e1fffd17 	ldw	r7,-12(fp)
 40042b4:	e0bff917 	ldw	r2,-28(fp)
 40042b8:	e0ffff17 	ldw	r3,-4(fp)
 40042bc:	10800524 	muli	r2,r2,20
 40042c0:	10c5883a 	add	r2,r2,r3
 40042c4:	10800904 	addi	r2,r2,36
 40042c8:	10800017 	ldw	r2,0(r2)
 40042cc:	d8800015 	stw	r2,0(sp)
 40042d0:	d8000115 	stw	zero,4(sp)
 40042d4:	e0bffe17 	ldw	r2,-8(fp)
 40042d8:	d8800215 	stw	r2,8(sp)
 40042dc:	40016d00 	call	40016d0 <vid_draw_box>
            vid_print_string_alpha(rc.left+8, rc.top+(RectHeight(&rc)-22)/2, pDeskInfo->szPalette[i].color, BLACK_24, tahomabold_20, pDisplay, "Clear");
 40042e0:	e0bffa17 	ldw	r2,-24(fp)
 40042e4:	14400204 	addi	r17,r2,8
 40042e8:	e43ffc17 	ldw	r16,-16(fp)
 40042ec:	e13ffa04 	addi	r4,fp,-24
 40042f0:	40004c80 	call	40004c8 <RectHeight>
 40042f4:	10fffa84 	addi	r3,r2,-22
 40042f8:	1804d7fa 	srli	r2,r3,31
 40042fc:	10c5883a 	add	r2,r2,r3
 4004300:	1005d07a 	srai	r2,r2,1
 4004304:	808b883a 	add	r5,r16,r2
 4004308:	e0bff917 	ldw	r2,-28(fp)
 400430c:	e0ffff17 	ldw	r3,-4(fp)
 4004310:	10800524 	muli	r2,r2,20
 4004314:	10c5883a 	add	r2,r2,r3
 4004318:	10800904 	addi	r2,r2,36
 400431c:	11800017 	ldw	r6,0(r2)
 4004320:	008100f4 	movhi	r2,1027
 4004324:	10b82404 	addi	r2,r2,-8048
 4004328:	d8800015 	stw	r2,0(sp)
 400432c:	e0bffe17 	ldw	r2,-8(fp)
 4004330:	d8800115 	stw	r2,4(sp)
 4004334:	008100f4 	movhi	r2,1027
 4004338:	10b6af04 	addi	r2,r2,-9540
 400433c:	d8800215 	stw	r2,8(sp)
 4004340:	8809883a 	mov	r4,r17
 4004344:	000f883a 	mov	r7,zero
 4004348:	40034580 	call	4003458 <vid_print_string_alpha>
 400434c:	00002106 	br	40043d4 <GUI_DeskDraw+0x1c8>
        }else{
        	if (active != i){
 4004350:	e0fff817 	ldw	r3,-32(fp)
 4004354:	e0bff917 	ldw	r2,-28(fp)
 4004358:	18800e26 	beq	r3,r2,4004394 <GUI_DeskDraw+0x188>
          		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
 400435c:	e13ffa17 	ldw	r4,-24(fp)
 4004360:	e17ffc17 	ldw	r5,-16(fp)
 4004364:	e1bffb17 	ldw	r6,-20(fp)
 4004368:	e1fffd17 	ldw	r7,-12(fp)
 400436c:	d8000015 	stw	zero,0(sp)
 4004370:	00800044 	movi	r2,1
 4004374:	d8800115 	stw	r2,4(sp)
 4004378:	e0bffe17 	ldw	r2,-8(fp)
 400437c:	d8800215 	stw	r2,8(sp)
 4004380:	40016d00 	call	40016d0 <vid_draw_box>
        		RectInflate(&rc, -4, -4);
 4004384:	e13ffa04 	addi	r4,fp,-24
 4004388:	017fff04 	movi	r5,-4
 400438c:	01bfff04 	movi	r6,-4
 4004390:	40003200 	call	4000320 <RectInflate>
        	}
      		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pDisplay);
 4004394:	e13ffa17 	ldw	r4,-24(fp)
 4004398:	e17ffc17 	ldw	r5,-16(fp)
 400439c:	e1bffb17 	ldw	r6,-20(fp)
 40043a0:	e1fffd17 	ldw	r7,-12(fp)
 40043a4:	e0bff917 	ldw	r2,-28(fp)
 40043a8:	e0ffff17 	ldw	r3,-4(fp)
 40043ac:	10800524 	muli	r2,r2,20
 40043b0:	10c5883a 	add	r2,r2,r3
 40043b4:	10800904 	addi	r2,r2,36
 40043b8:	10800017 	ldw	r2,0(r2)
 40043bc:	d8800015 	stw	r2,0(sp)
 40043c0:	00800044 	movi	r2,1
 40043c4:	d8800115 	stw	r2,4(sp)
 40043c8:	e0bffe17 	ldw	r2,-8(fp)
 40043cc:	d8800215 	stw	r2,8(sp)
 40043d0:	40016d00 	call	40016d0 <vid_draw_box>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
    

    // draw palette
	active = pDeskInfo->Paint_Index;
    for(i=0;i<BTN_NUM;i++){
 40043d4:	e0bff917 	ldw	r2,-28(fp)
 40043d8:	10800044 	addi	r2,r2,1
 40043dc:	e0bff915 	stw	r2,-28(fp)
 40043e0:	e0bff917 	ldw	r2,-28(fp)
 40043e4:	10800150 	cmplti	r2,r2,5
 40043e8:	103fa41e 	bne	r2,zero,400427c <GUI_DeskDraw+0x70>
    //RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    //vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pDisplay, "2");
    
        
        
}
 40043ec:	e037883a 	mov	sp,fp
 40043f0:	dfc00317 	ldw	ra,12(sp)
 40043f4:	df000217 	ldw	fp,8(sp)
 40043f8:	dc400117 	ldw	r17,4(sp)
 40043fc:	dc000017 	ldw	r16,0(sp)
 4004400:	dec00404 	addi	sp,sp,16
 4004404:	f800283a 	ret

04004408 <IsContinuedPoint>:

bool IsContinuedPoint(POINT *ptPre, POINT *ptNew){
 4004408:	defff904 	addi	sp,sp,-28
 400440c:	df000615 	stw	fp,24(sp)
 4004410:	df000604 	addi	fp,sp,24
 4004414:	e13ffc15 	stw	r4,-16(fp)
 4004418:	e17ffd15 	stw	r5,-12(fp)
    bool bYes = TRUE;
 400441c:	00800044 	movi	r2,1
 4004420:	e0bffb15 	stw	r2,-20(fp)
    const int nMax = 50;
 4004424:	00800c84 	movi	r2,50
 4004428:	e0bffa15 	stw	r2,-24(fp)
    if (abs(ptPre->x - ptNew->x) > nMax)
 400442c:	e0bffc17 	ldw	r2,-16(fp)
 4004430:	10c00017 	ldw	r3,0(r2)
 4004434:	e0bffd17 	ldw	r2,-12(fp)
 4004438:	10800017 	ldw	r2,0(r2)
 400443c:	1885c83a 	sub	r2,r3,r2
 4004440:	e0bfff15 	stw	r2,-4(fp)
 4004444:	e0ffff17 	ldw	r3,-4(fp)
 4004448:	1804403a 	cmpge	r2,r3,zero
 400444c:	1000031e 	bne	r2,zero,400445c <IsContinuedPoint+0x54>
 4004450:	e0bfff17 	ldw	r2,-4(fp)
 4004454:	0085c83a 	sub	r2,zero,r2
 4004458:	e0bfff15 	stw	r2,-4(fp)
 400445c:	e0bffa17 	ldw	r2,-24(fp)
 4004460:	e0ffff17 	ldw	r3,-4(fp)
 4004464:	10c0020e 	bge	r2,r3,4004470 <IsContinuedPoint+0x68>
        bYes = FALSE;
 4004468:	e03ffb15 	stw	zero,-20(fp)
 400446c:	00001006 	br	40044b0 <IsContinuedPoint+0xa8>
    else if (abs(ptPre->y - ptNew->y) > nMax)
 4004470:	e0bffc17 	ldw	r2,-16(fp)
 4004474:	10c00117 	ldw	r3,4(r2)
 4004478:	e0bffd17 	ldw	r2,-12(fp)
 400447c:	10800117 	ldw	r2,4(r2)
 4004480:	1885c83a 	sub	r2,r3,r2
 4004484:	e0bffe15 	stw	r2,-8(fp)
 4004488:	e0fffe17 	ldw	r3,-8(fp)
 400448c:	1804403a 	cmpge	r2,r3,zero
 4004490:	1000031e 	bne	r2,zero,40044a0 <IsContinuedPoint+0x98>
 4004494:	e0bffe17 	ldw	r2,-8(fp)
 4004498:	0085c83a 	sub	r2,zero,r2
 400449c:	e0bffe15 	stw	r2,-8(fp)
 40044a0:	e0bffa17 	ldw	r2,-24(fp)
 40044a4:	e0fffe17 	ldw	r3,-8(fp)
 40044a8:	10c0010e 	bge	r2,r3,40044b0 <IsContinuedPoint+0xa8>
        bYes = FALSE;
 40044ac:	e03ffb15 	stw	zero,-20(fp)
        
    return bYes;        
 40044b0:	e0bffb17 	ldw	r2,-20(fp)
        
}
 40044b4:	e037883a 	mov	sp,fp
 40044b8:	df000017 	ldw	fp,0(sp)
 40044bc:	dec00104 	addi	sp,sp,4
 40044c0:	f800283a 	ret

040044c4 <GUI_ClearPaintArea>:



void GUI_ClearPaintArea(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
 40044c4:	defff504 	addi	sp,sp,-44
 40044c8:	dfc00a15 	stw	ra,40(sp)
 40044cc:	df000915 	stw	fp,36(sp)
 40044d0:	df000904 	addi	fp,sp,36
 40044d4:	e13ffe15 	stw	r4,-8(fp)
 40044d8:	e17fff15 	stw	r5,-4(fp)
    RECT rc;
    RectCopy(&rc, &pDeskInfo->rcPaint);
 40044dc:	e0bfff17 	ldw	r2,-4(fp)
 40044e0:	11400104 	addi	r5,r2,4
 40044e4:	e13ffa04 	addi	r4,fp,-24
 40044e8:	40004300 	call	4000430 <RectCopy>
    RectInflate(&rc, -1, -1);
 40044ec:	e13ffa04 	addi	r4,fp,-24
 40044f0:	017fffc4 	movi	r5,-1
 40044f4:	01bfffc4 	movi	r6,-1
 40044f8:	40003200 	call	4000320 <RectInflate>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
 40044fc:	e13ffa17 	ldw	r4,-24(fp)
 4004500:	e17ffc17 	ldw	r5,-16(fp)
 4004504:	e1bffb17 	ldw	r6,-20(fp)
 4004508:	e1fffd17 	ldw	r7,-12(fp)
 400450c:	d8000015 	stw	zero,0(sp)
 4004510:	00800044 	movi	r2,1
 4004514:	d8800115 	stw	r2,4(sp)
 4004518:	e0bffe17 	ldw	r2,-8(fp)
 400451c:	d8800215 	stw	r2,8(sp)
 4004520:	40016d00 	call	40016d0 <vid_draw_box>
    //
  //  RectCopy(&rc, &pDeskInfo->szPalette[BTN_GESTRUE].rc);
  //  vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
}
 4004524:	e037883a 	mov	sp,fp
 4004528:	dfc00117 	ldw	ra,4(sp)
 400452c:	df000017 	ldw	fp,0(sp)
 4004530:	dec00204 	addi	sp,sp,8
 4004534:	f800283a 	ret

04004538 <GUI>:

//void GUI(MTC_INFO *pTouch){
void GUI(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
 4004538:	deffd004 	addi	sp,sp,-192
 400453c:	dfc02f15 	stw	ra,188(sp)
 4004540:	df002e15 	stw	fp,184(sp)
 4004544:	df002e04 	addi	fp,sp,184
 4004548:	e13ffe15 	stw	r4,-8(fp)
 400454c:	e17fff15 	stw	r5,-4(fp)
    // video
    DESK_INFO DeskInfo;
    int X, Y;
    POINT Pt;
    const int nDotSize = DOT_SIZE;
 4004550:	00800144 	movi	r2,5
 4004554:	e0bfd715 	stw	r2,-164(fp)
    


    
    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
 4004558:	e13ffe17 	ldw	r4,-8(fp)
 400455c:	000b883a 	mov	r5,zero
 4004560:	4000e4c0 	call	4000e4c <vid_clean_screen>
    
    // Show Terasic Welcome
    GUI_ShowWelcome(pDisplay);
 4004564:	e13ffe17 	ldw	r4,-8(fp)
 4004568:	4003ef00 	call	4003ef0 <GUI_ShowWelcome>
    usleep(1*1000*1000);
 400456c:	010003f4 	movhi	r4,15
 4004570:	21109004 	addi	r4,r4,16960
 4004574:	4011df40 	call	4011df4 <usleep>
    vid_clean_screen(pDisplay, BLACK_24);
 4004578:	e13ffe17 	ldw	r4,-8(fp)
 400457c:	000b883a 	mov	r5,zero
 4004580:	4000e4c0 	call	4000e4c <vid_clean_screen>

   
    GUI_DeskInit(pDisplay, &DeskInfo);
 4004584:	e17fd804 	addi	r5,fp,-160
 4004588:	e13ffe17 	ldw	r4,-8(fp)
 400458c:	4003fbc0 	call	4003fbc <GUI_DeskInit>
    GUI_DeskDraw(pDisplay, &DeskInfo);
 4004590:	e17fd804 	addi	r5,fp,-160
 4004594:	e13ffe17 	ldw	r4,-8(fp)
 4004598:	400420c0 	call	400420c <GUI_DeskDraw>
    
   // VIPFR_ActiveDrawFrame(pReader);
    
    RectCopy(&rcTouch, &DeskInfo.rcPaint);
 400459c:	e13ffa04 	addi	r4,fp,-24
 40045a0:	e0bfd804 	addi	r2,fp,-160
 40045a4:	11400104 	addi	r5,r2,4
 40045a8:	40004300 	call	4000430 <RectCopy>
    RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);
 40045ac:	e0bfd717 	ldw	r2,-164(fp)
 40045b0:	0085c83a 	sub	r2,zero,r2
 40045b4:	117fff84 	addi	r5,r2,-2
 40045b8:	e0bfd717 	ldw	r2,-164(fp)
 40045bc:	0085c83a 	sub	r2,zero,r2
 40045c0:	11bfff84 	addi	r6,r2,-2
 40045c4:	e13ffa04 	addi	r4,fp,-24
 40045c8:	40003200 	call	4000320 <RectInflate>
    
    ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
 40045cc:	e0bfd817 	ldw	r2,-160(fp)
 40045d0:	10800524 	muli	r2,r2,20
 40045d4:	e0ffd404 	addi	r3,fp,-176
 40045d8:	10c5883a 	add	r2,r2,r3
 40045dc:	10800d04 	addi	r2,r2,52
 40045e0:	10800017 	ldw	r2,0(r2)
 40045e4:	e0bfd615 	stw	r2,-168(fp)
 40045e8:	00000006 	br	40045ec <GUI+0xb4>
  //  printf("ContinuedTime=%d\r\n", ContinuedTime);
   // PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);

    while(1){
            // touch
            if (Touch_GetXY(pTouch, &X, &Y)){
 40045ec:	e17ff604 	addi	r5,fp,-40
 40045f0:	e1bff704 	addi	r6,fp,-36
 40045f4:	e13fff17 	ldw	r4,-4(fp)
 40045f8:	40068d00 	call	40068d0 <Touch_GetXY>
 40045fc:	1005003a 	cmpeq	r2,r2,zero
 4004600:	103ffa1e 	bne	r2,zero,40045ec <GUI+0xb4>
           //     IOWR(LED_BASE, 0x00, LedMask);
             //   LedMask <<= 1;
             //   if (LedMask == 0x00)
               //     LedMask = 0x01;
                //
                printf("x=%d, y=%d\r\n", X,Y);
 4004604:	e17ff617 	ldw	r5,-40(fp)
 4004608:	e1bff717 	ldw	r6,-36(fp)
 400460c:	010100f4 	movhi	r4,1027
 4004610:	2136b104 	addi	r4,r4,-9532
 4004614:	40092d00 	call	40092d0 <printf>
                PtSet(&Pt, X, Y);
 4004618:	e17ff617 	ldw	r5,-40(fp)
 400461c:	e1bff717 	ldw	r6,-36(fp)
 4004620:	e13ff804 	addi	r4,fp,-32
 4004624:	40002840 	call	4000284 <PtSet>


             //   printf("t:%d, %d\r\n", (int)alt_nticks(), LastTimePt1);
                //
                if ( IsPtInRect(&Pt, &rcTouch)){
 4004628:	e13ff804 	addi	r4,fp,-32
 400462c:	e17ffa04 	addi	r5,fp,-24
 4004630:	40002000 	call	4000200 <IsPtInRect>
 4004634:	1005003a 	cmpeq	r2,r2,zero
 4004638:	10000a1e 	bne	r2,zero,4004664 <GUI+0x12c>

                    vid_draw_circle(Pt.x, Pt.y, nDotSize, ColorPen, DO_FILL, pDisplay);
 400463c:	e13ff817 	ldw	r4,-32(fp)
 4004640:	e17ff917 	ldw	r5,-28(fp)
 4004644:	00800044 	movi	r2,1
 4004648:	d8800015 	stw	r2,0(sp)
 400464c:	e0bffe17 	ldw	r2,-8(fp)
 4004650:	d8800115 	stw	r2,4(sp)
 4004654:	e1bfd717 	ldw	r6,-164(fp)
 4004658:	e1ffd617 	ldw	r7,-168(fp)
 400465c:	4001ed00 	call	4001ed0 <vid_draw_circle>
 4004660:	003fe206 	br	40045ec <GUI+0xb4>
                   // VIPFR_ActiveDrawFrame(pReader);
                }else if (GUI_CheckButton(&DeskInfo, &Pt) == BTN_CLEAR){
 4004664:	e13fd804 	addi	r4,fp,-160
 4004668:	e17ff804 	addi	r5,fp,-32
 400466c:	400417c0 	call	400417c <GUI_CheckButton>
 4004670:	1004c03a 	cmpne	r2,r2,zero
 4004674:	1000061e 	bne	r2,zero,4004690 <GUI+0x158>
                    GUI_ClearPaintArea(pDisplay, &DeskInfo);
 4004678:	e17fd804 	addi	r5,fp,-160
 400467c:	e13ffe17 	ldw	r4,-8(fp)
 4004680:	40044c40 	call	40044c4 <GUI_ClearPaintArea>
                  //  VIPFR_ActiveDrawFrame(pReader);
                    Touch_EmptyFifo(pTouch);
 4004684:	e13fff17 	ldw	r4,-4(fp)
 4004688:	40068980 	call	4006898 <Touch_EmptyFifo>
 400468c:	003fd706 	br	40045ec <GUI+0xb4>
                }else {
                    ButtonId = GUI_CheckButton(&DeskInfo, &Pt);
 4004690:	e13fd804 	addi	r4,fp,-160
 4004694:	e17ff804 	addi	r5,fp,-32
 4004698:	400417c0 	call	400417c <GUI_CheckButton>
 400469c:	e0bfd515 	stw	r2,-172(fp)
                    UpdatePalette = FALSE;
 40046a0:	e03fd415 	stw	zero,-176(fp)
                    if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR){
 40046a4:	e0bfd517 	ldw	r2,-172(fp)
 40046a8:	108001a0 	cmpeqi	r2,r2,6
 40046ac:	103fcf1e 	bne	r2,zero,40045ec <GUI+0xb4>
 40046b0:	e0bfd517 	ldw	r2,-172(fp)
 40046b4:	1005003a 	cmpeq	r2,r2,zero
 40046b8:	103fcc1e 	bne	r2,zero,40045ec <GUI+0xb4>
                        // chang draw color
                        if ( ButtonId != DeskInfo.Paint_Index ){
 40046bc:	e0ffd817 	ldw	r3,-160(fp)
 40046c0:	e0bfd517 	ldw	r2,-172(fp)
 40046c4:	18800426 	beq	r3,r2,40046d8 <GUI+0x1a0>
                            DeskInfo.Paint_Index = ButtonId;
 40046c8:	e0bfd517 	ldw	r2,-172(fp)
 40046cc:	e0bfd815 	stw	r2,-160(fp)
                            UpdatePalette = TRUE;
 40046d0:	00800044 	movi	r2,1
 40046d4:	e0bfd415 	stw	r2,-176(fp)
                            //
                        }

                        if (UpdatePalette){
 40046d8:	e0bfd417 	ldw	r2,-176(fp)
 40046dc:	1005003a 	cmpeq	r2,r2,zero
 40046e0:	103fc21e 	bne	r2,zero,40045ec <GUI+0xb4>
                            ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
 40046e4:	e0bfd817 	ldw	r2,-160(fp)
 40046e8:	10800524 	muli	r2,r2,20
 40046ec:	e0ffd404 	addi	r3,fp,-176
 40046f0:	10c5883a 	add	r2,r2,r3
 40046f4:	10800d04 	addi	r2,r2,52
 40046f8:	10800017 	ldw	r2,0(r2)
 40046fc:	e0bfd615 	stw	r2,-168(fp)
                            GUI_DeskDraw(pDisplay, &DeskInfo);
 4004700:	e17fd804 	addi	r5,fp,-160
 4004704:	e13ffe17 	ldw	r4,-8(fp)
 4004708:	400420c0 	call	400420c <GUI_DeskDraw>
                        //    VIPFR_ActiveDrawFrame(pReader);
                            Touch_EmptyFifo(pTouch);
 400470c:	e13fff17 	ldw	r4,-4(fp)
 4004710:	40068980 	call	4006898 <Touch_EmptyFifo>
                        }
                    }
                }
            } // if touch
        } // while
 4004714:	003fb506 	br	40045ec <GUI+0xb4>

04004718 <GUI_ShowInfo>:
    
}



void GUI_ShowInfo(alt_video_display *pDisplay, char *pText){
 4004718:	defff904 	addi	sp,sp,-28
 400471c:	dfc00615 	stw	ra,24(sp)
 4004720:	df000515 	stw	fp,20(sp)
 4004724:	df000504 	addi	fp,sp,20
 4004728:	e13ffe15 	stw	r4,-8(fp)
 400472c:	e17fff15 	stw	r5,-4(fp)
    static int x=0,y=100;
   // vid_clean_screen(pReader, BLACK_24);
    vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, pText);
 4004730:	d12d9817 	ldw	r4,-18848(gp)
 4004734:	d1600117 	ldw	r5,-32764(gp)
 4004738:	008100f4 	movhi	r2,1027
 400473c:	10b82404 	addi	r2,r2,-8048
 4004740:	d8800015 	stw	r2,0(sp)
 4004744:	e0bffe17 	ldw	r2,-8(fp)
 4004748:	d8800115 	stw	r2,4(sp)
 400474c:	e0bfff17 	ldw	r2,-4(fp)
 4004750:	d8800215 	stw	r2,8(sp)
 4004754:	01803fc4 	movi	r6,255
 4004758:	000f883a 	mov	r7,zero
 400475c:	40034580 	call	4003458 <vid_print_string_alpha>
 //   VIPFR_ActiveDrawFrame(pReader);
}
 4004760:	e037883a 	mov	sp,fp
 4004764:	dfc00117 	ldw	ra,4(sp)
 4004768:	df000017 	ldw	fp,0(sp)
 400476c:	dec00204 	addi	sp,sp,8
 4004770:	f800283a 	ret

04004774 <GUI_ShowTouchPoint>:

void GUI_ShowTouchPoint(alt_video_display *pDisplay, int X, int Y, int color){
 4004774:	defff804 	addi	sp,sp,-32
 4004778:	dfc00715 	stw	ra,28(sp)
 400477c:	df000615 	stw	fp,24(sp)
 4004780:	df000604 	addi	fp,sp,24
 4004784:	e13ffc15 	stw	r4,-16(fp)
 4004788:	e17ffd15 	stw	r5,-12(fp)
 400478c:	e1bffe15 	stw	r6,-8(fp)
 4004790:	e1ffff15 	stw	r7,-4(fp)
    vid_draw_circle(X, Y, 10, color, DO_FILL, pDisplay);
 4004794:	00800044 	movi	r2,1
 4004798:	d8800015 	stw	r2,0(sp)
 400479c:	e0bffc17 	ldw	r2,-16(fp)
 40047a0:	d8800115 	stw	r2,4(sp)
 40047a4:	e13ffd17 	ldw	r4,-12(fp)
 40047a8:	e17ffe17 	ldw	r5,-8(fp)
 40047ac:	01800284 	movi	r6,10
 40047b0:	e1ffff17 	ldw	r7,-4(fp)
 40047b4:	4001ed00 	call	4001ed0 <vid_draw_circle>
   // VIPFR_ActiveDrawFrame(pReader);
}
 40047b8:	e037883a 	mov	sp,fp
 40047bc:	dfc00117 	ldw	ra,4(sp)
 40047c0:	df000017 	ldw	fp,0(sp)
 40047c4:	dec00204 	addi	sp,sp,8
 40047c8:	f800283a 	ret

040047cc <ShowInfo>:
#include "simple_graphics.h"
#include "geometry.h"



void ShowInfo(alt_video_display *pDisplay, char *pText){
 40047cc:	defff904 	addi	sp,sp,-28
 40047d0:	dfc00615 	stw	ra,24(sp)
 40047d4:	df000515 	stw	fp,20(sp)
 40047d8:	df000504 	addi	fp,sp,20
 40047dc:	e13ffe15 	stw	r4,-8(fp)
 40047e0:	e17fff15 	stw	r5,-4(fp)
    vid_print_string_alpha(1, 1, WHITE_24, BLACK_24, tahomabold_20, pDisplay, pText);
 40047e4:	008100f4 	movhi	r2,1027
 40047e8:	10b82404 	addi	r2,r2,-8048
 40047ec:	d8800015 	stw	r2,0(sp)
 40047f0:	e0bffe17 	ldw	r2,-8(fp)
 40047f4:	d8800115 	stw	r2,4(sp)
 40047f8:	e0bfff17 	ldw	r2,-4(fp)
 40047fc:	d8800215 	stw	r2,8(sp)
 4004800:	01000044 	movi	r4,1
 4004804:	01400044 	movi	r5,1
 4004808:	01804034 	movhi	r6,256
 400480c:	31bfffc4 	addi	r6,r6,-1
 4004810:	000f883a 	mov	r7,zero
 4004814:	40034580 	call	4003458 <vid_print_string_alpha>
}
 4004818:	e037883a 	mov	sp,fp
 400481c:	dfc00117 	ldw	ra,4(sp)
 4004820:	df000017 	ldw	fp,0(sp)
 4004824:	dec00204 	addi	sp,sp,8
 4004828:	f800283a 	ret

0400482c <VPG_XLine>:


void VPG_XLine(alt_video_display *pDisplay){
 400482c:	defffe04 	addi	sp,sp,-8
 4004830:	df000115 	stw	fp,4(sp)
 4004834:	df000104 	addi	fp,sp,4
 4004838:	e13fff15 	stw	r4,-4(fp)

    // show text
    ShowInfo(pDisplay, "X Line");


}
 400483c:	e037883a 	mov	sp,fp
 4004840:	df000017 	ldw	fp,0(sp)
 4004844:	dec00104 	addi	sp,sp,4
 4004848:	f800283a 	ret

0400484c <VPG_ColorPanel>:


void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
 400484c:	defff204 	addi	sp,sp,-56
 4004850:	dfc00d15 	stw	ra,52(sp)
 4004854:	df000c15 	stw	fp,48(sp)
 4004858:	df000c04 	addi	fp,sp,48
 400485c:	e13ffe15 	stw	r4,-8(fp)
 4004860:	e17fff15 	stw	r5,-4(fp)
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 4004864:	e03ff415 	stw	zero,-48(fp)
 4004868:	00001106 	br	40048b0 <VPG_ColorPanel+0x64>
        for(x=0;x<pDisplay->width;x++){
 400486c:	e03ff515 	stw	zero,-44(fp)
 4004870:	00000806 	br	4004894 <VPG_ColorPanel+0x48>
        	vid_set_pixel(x,y,Color, pDisplay);
 4004874:	e13ff517 	ldw	r4,-44(fp)
 4004878:	e17ff417 	ldw	r5,-48(fp)
 400487c:	e1bfff17 	ldw	r6,-4(fp)
 4004880:	e1fffe17 	ldw	r7,-8(fp)
 4004884:	40018f40 	call	40018f4 <vid_set_pixel>
void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 4004888:	e0bff517 	ldw	r2,-44(fp)
 400488c:	10800044 	addi	r2,r2,1
 4004890:	e0bff515 	stw	r2,-44(fp)
 4004894:	e0bffe17 	ldw	r2,-8(fp)
 4004898:	10c00117 	ldw	r3,4(r2)
 400489c:	e0bff517 	ldw	r2,-44(fp)
 40048a0:	10fff416 	blt	r2,r3,4004874 <VPG_ColorPanel+0x28>

void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 40048a4:	e0bff417 	ldw	r2,-48(fp)
 40048a8:	10800044 	addi	r2,r2,1
 40048ac:	e0bff415 	stw	r2,-48(fp)
 40048b0:	e0bffe17 	ldw	r2,-8(fp)
 40048b4:	10c00217 	ldw	r3,8(r2)
 40048b8:	e0bff417 	ldw	r2,-48(fp)
 40048bc:	10ffeb16 	blt	r2,r3,400486c <VPG_ColorPanel+0x20>
        	vid_set_pixel(x,y,Color, pDisplay);
        }
    }

    // show text
    sprintf(szText,"Panel: %08xh", Color);
 40048c0:	e13ff604 	addi	r4,fp,-40
 40048c4:	014100f4 	movhi	r5,1027
 40048c8:	2976b504 	addi	r5,r5,-9516
 40048cc:	e1bfff17 	ldw	r6,-4(fp)
 40048d0:	400946c0 	call	400946c <sprintf>
    ShowInfo(pDisplay, szText);
 40048d4:	e17ff604 	addi	r5,fp,-40
 40048d8:	e13ffe17 	ldw	r4,-8(fp)
 40048dc:	40047cc0 	call	40047cc <ShowInfo>



}
 40048e0:	e037883a 	mov	sp,fp
 40048e4:	dfc00117 	ldw	ra,4(sp)
 40048e8:	df000017 	ldw	fp,0(sp)
 40048ec:	dec00204 	addi	sp,sp,8
 40048f0:	f800283a 	ret

040048f4 <VPG_Grid>:

void VPG_Grid(alt_video_display *pDisplay, alt_u8 GridSize){
 40048f4:	defff104 	addi	sp,sp,-60
 40048f8:	dfc00e15 	stw	ra,56(sp)
 40048fc:	df000d15 	stw	fp,52(sp)
 4004900:	df000d04 	addi	fp,sp,52
 4004904:	e13ffe15 	stw	r4,-8(fp)
 4004908:	e17fff05 	stb	r5,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 400490c:	e03ff415 	stw	zero,-48(fp)
 4004910:	00002006 	br	4004994 <VPG_Grid+0xa0>
        for(x=0;x<pDisplay->width;x++){
 4004914:	e03ff515 	stw	zero,-44(fp)
 4004918:	00001706 	br	4004978 <VPG_Grid+0x84>
            if (x%GridSize == 0 || y%GridSize == 0)
 400491c:	e17fff03 	ldbu	r5,-4(fp)
 4004920:	e13ff517 	ldw	r4,-44(fp)
 4004924:	40083840 	call	4008384 <__modsi3>
 4004928:	1005003a 	cmpeq	r2,r2,zero
 400492c:	1000051e 	bne	r2,zero,4004944 <VPG_Grid+0x50>
 4004930:	e17fff03 	ldbu	r5,-4(fp)
 4004934:	e13ff417 	ldw	r4,-48(fp)
 4004938:	40083840 	call	4008384 <__modsi3>
 400493c:	1004c03a 	cmpne	r2,r2,zero
 4004940:	1000041e 	bne	r2,zero,4004954 <VPG_Grid+0x60>
                Value32 = WHITE_24;
 4004944:	00804034 	movhi	r2,256
 4004948:	10bfffc4 	addi	r2,r2,-1
 400494c:	e0bff315 	stw	r2,-52(fp)
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
            if (x%GridSize == 0 || y%GridSize == 0)
 4004950:	00000106 	br	4004958 <VPG_Grid+0x64>
                Value32 = WHITE_24;
            else
                Value32 = BLACK_24;
 4004954:	e03ff315 	stw	zero,-52(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
 4004958:	e13ff517 	ldw	r4,-44(fp)
 400495c:	e17ff417 	ldw	r5,-48(fp)
 4004960:	e1bff317 	ldw	r6,-52(fp)
 4004964:	e1fffe17 	ldw	r7,-8(fp)
 4004968:	40018f40 	call	40018f4 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 400496c:	e0bff517 	ldw	r2,-44(fp)
 4004970:	10800044 	addi	r2,r2,1
 4004974:	e0bff515 	stw	r2,-44(fp)
 4004978:	e0bffe17 	ldw	r2,-8(fp)
 400497c:	10c00117 	ldw	r3,4(r2)
 4004980:	e0bff517 	ldw	r2,-44(fp)
 4004984:	10ffe516 	blt	r2,r3,400491c <VPG_Grid+0x28>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 4004988:	e0bff417 	ldw	r2,-48(fp)
 400498c:	10800044 	addi	r2,r2,1
 4004990:	e0bff415 	stw	r2,-48(fp)
 4004994:	e0bffe17 	ldw	r2,-8(fp)
 4004998:	10c00217 	ldw	r3,8(r2)
 400499c:	e0bff417 	ldw	r2,-48(fp)
 40049a0:	10ffdc16 	blt	r2,r3,4004914 <VPG_Grid+0x20>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"Grid%d", GridSize);
 40049a4:	e1bfff03 	ldbu	r6,-4(fp)
 40049a8:	e13ff604 	addi	r4,fp,-40
 40049ac:	014100f4 	movhi	r5,1027
 40049b0:	2976b904 	addi	r5,r5,-9500
 40049b4:	400946c0 	call	400946c <sprintf>
    ShowInfo(pDisplay, szText);
 40049b8:	e17ff604 	addi	r5,fp,-40
 40049bc:	e13ffe17 	ldw	r4,-8(fp)
 40049c0:	40047cc0 	call	40047cc <ShowInfo>

}
 40049c4:	e037883a 	mov	sp,fp
 40049c8:	dfc00117 	ldw	ra,4(sp)
 40049cc:	df000017 	ldw	fp,0(sp)
 40049d0:	dec00204 	addi	sp,sp,8
 40049d4:	f800283a 	ret

040049d8 <VPG_VGrid>:

void VPG_VGrid(alt_video_display *pDisplay, alt_u8 GridSize){
 40049d8:	defff104 	addi	sp,sp,-60
 40049dc:	dfc00e15 	stw	ra,56(sp)
 40049e0:	df000d15 	stw	fp,52(sp)
 40049e4:	df000d04 	addi	fp,sp,52
 40049e8:	e13ffe15 	stw	r4,-8(fp)
 40049ec:	e17fff05 	stb	r5,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 40049f0:	e03ff415 	stw	zero,-48(fp)
 40049f4:	00001b06 	br	4004a64 <VPG_VGrid+0x8c>
        for(x=0;x<pDisplay->width;x++){
 40049f8:	e03ff515 	stw	zero,-44(fp)
 40049fc:	00001206 	br	4004a48 <VPG_VGrid+0x70>
            if (x%GridSize == 0)
 4004a00:	e17fff03 	ldbu	r5,-4(fp)
 4004a04:	e13ff517 	ldw	r4,-44(fp)
 4004a08:	40083840 	call	4008384 <__modsi3>
 4004a0c:	1004c03a 	cmpne	r2,r2,zero
 4004a10:	1000041e 	bne	r2,zero,4004a24 <VPG_VGrid+0x4c>
                Value32 = WHITE_24;
 4004a14:	00804034 	movhi	r2,256
 4004a18:	10bfffc4 	addi	r2,r2,-1
 4004a1c:	e0bff315 	stw	r2,-52(fp)
 4004a20:	00000106 	br	4004a28 <VPG_VGrid+0x50>
            else
                Value32 = BLACK_24;
 4004a24:	e03ff315 	stw	zero,-52(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
 4004a28:	e13ff517 	ldw	r4,-44(fp)
 4004a2c:	e17ff417 	ldw	r5,-48(fp)
 4004a30:	e1bff317 	ldw	r6,-52(fp)
 4004a34:	e1fffe17 	ldw	r7,-8(fp)
 4004a38:	40018f40 	call	40018f4 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 4004a3c:	e0bff517 	ldw	r2,-44(fp)
 4004a40:	10800044 	addi	r2,r2,1
 4004a44:	e0bff515 	stw	r2,-44(fp)
 4004a48:	e0bffe17 	ldw	r2,-8(fp)
 4004a4c:	10c00117 	ldw	r3,4(r2)
 4004a50:	e0bff517 	ldw	r2,-44(fp)
 4004a54:	10ffea16 	blt	r2,r3,4004a00 <VPG_VGrid+0x28>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
 4004a58:	e0bff417 	ldw	r2,-48(fp)
 4004a5c:	10800044 	addi	r2,r2,1
 4004a60:	e0bff415 	stw	r2,-48(fp)
 4004a64:	e0bffe17 	ldw	r2,-8(fp)
 4004a68:	10c00217 	ldw	r3,8(r2)
 4004a6c:	e0bff417 	ldw	r2,-48(fp)
 4004a70:	10ffe116 	blt	r2,r3,40049f8 <VPG_VGrid+0x20>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"VGrid%d", GridSize);
 4004a74:	e1bfff03 	ldbu	r6,-4(fp)
 4004a78:	e13ff604 	addi	r4,fp,-40
 4004a7c:	014100f4 	movhi	r5,1027
 4004a80:	2976bb04 	addi	r5,r5,-9492
 4004a84:	400946c0 	call	400946c <sprintf>
    ShowInfo(pDisplay, szText);
 4004a88:	e17ff604 	addi	r5,fp,-40
 4004a8c:	e13ffe17 	ldw	r4,-8(fp)
 4004a90:	40047cc0 	call	40047cc <ShowInfo>

}
 4004a94:	e037883a 	mov	sp,fp
 4004a98:	dfc00117 	ldw	ra,4(sp)
 4004a9c:	df000017 	ldw	fp,0(sp)
 4004aa0:	dec00204 	addi	sp,sp,8
 4004aa4:	f800283a 	ret

04004aa8 <VPG_HGrid>:

void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
 4004aa8:	defff104 	addi	sp,sp,-60
 4004aac:	dfc00e15 	stw	ra,56(sp)
 4004ab0:	df000d15 	stw	fp,52(sp)
 4004ab4:	df000d04 	addi	fp,sp,52
 4004ab8:	e13ffe15 	stw	r4,-8(fp)
 4004abc:	e17fff05 	stb	r5,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 4004ac0:	e03ff415 	stw	zero,-48(fp)
 4004ac4:	00001b06 	br	4004b34 <VPG_HGrid+0x8c>
        for(x=0;x<pDisplay->width;x++){
 4004ac8:	e03ff515 	stw	zero,-44(fp)
 4004acc:	00001206 	br	4004b18 <VPG_HGrid+0x70>
            if (y%GridSize == 0)
 4004ad0:	e17fff03 	ldbu	r5,-4(fp)
 4004ad4:	e13ff417 	ldw	r4,-48(fp)
 4004ad8:	40083840 	call	4008384 <__modsi3>
 4004adc:	1004c03a 	cmpne	r2,r2,zero
 4004ae0:	1000041e 	bne	r2,zero,4004af4 <VPG_HGrid+0x4c>
                Value32 = WHITE_24;
 4004ae4:	00804034 	movhi	r2,256
 4004ae8:	10bfffc4 	addi	r2,r2,-1
 4004aec:	e0bff315 	stw	r2,-52(fp)
 4004af0:	00000106 	br	4004af8 <VPG_HGrid+0x50>
            else
                Value32 = BLACK_24;
 4004af4:	e03ff315 	stw	zero,-52(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
 4004af8:	e13ff517 	ldw	r4,-44(fp)
 4004afc:	e17ff417 	ldw	r5,-48(fp)
 4004b00:	e1bff317 	ldw	r6,-52(fp)
 4004b04:	e1fffe17 	ldw	r7,-8(fp)
 4004b08:	40018f40 	call	40018f4 <vid_set_pixel>
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 4004b0c:	e0bff517 	ldw	r2,-44(fp)
 4004b10:	10800044 	addi	r2,r2,1
 4004b14:	e0bff515 	stw	r2,-44(fp)
 4004b18:	e0bffe17 	ldw	r2,-8(fp)
 4004b1c:	10c00117 	ldw	r3,4(r2)
 4004b20:	e0bff517 	ldw	r2,-44(fp)
 4004b24:	10ffea16 	blt	r2,r3,4004ad0 <VPG_HGrid+0x28>
void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
 4004b28:	e0bff417 	ldw	r2,-48(fp)
 4004b2c:	10800044 	addi	r2,r2,1
 4004b30:	e0bff415 	stw	r2,-48(fp)
 4004b34:	e0bffe17 	ldw	r2,-8(fp)
 4004b38:	10c00217 	ldw	r3,8(r2)
 4004b3c:	e0bff417 	ldw	r2,-48(fp)
 4004b40:	10ffe116 	blt	r2,r3,4004ac8 <VPG_HGrid+0x20>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"HGrid%d", GridSize);
 4004b44:	e1bfff03 	ldbu	r6,-4(fp)
 4004b48:	e13ff604 	addi	r4,fp,-40
 4004b4c:	014100f4 	movhi	r5,1027
 4004b50:	2976bd04 	addi	r5,r5,-9484
 4004b54:	400946c0 	call	400946c <sprintf>
    ShowInfo(pDisplay, szText);
 4004b58:	e17ff604 	addi	r5,fp,-40
 4004b5c:	e13ffe17 	ldw	r4,-8(fp)
 4004b60:	40047cc0 	call	40047cc <ShowInfo>

}
 4004b64:	e037883a 	mov	sp,fp
 4004b68:	dfc00117 	ldw	ra,4(sp)
 4004b6c:	df000017 	ldw	fp,0(sp)
 4004b70:	dec00204 	addi	sp,sp,8
 4004b74:	f800283a 	ret

04004b78 <VPG_ColorBar>:




void VPG_ColorBar(alt_video_display *pDisplay){
 4004b78:	defff804 	addi	sp,sp,-32
 4004b7c:	dfc00715 	stw	ra,28(sp)
 4004b80:	df000615 	stw	fp,24(sp)
 4004b84:	df000604 	addi	fp,sp,24
 4004b88:	e13ffd15 	stw	r4,-12(fp)
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
 4004b8c:	e03ffb15 	stw	zero,-20(fp)
 4004b90:	00006b06 	br	4004d40 <VPG_ColorBar+0x1c8>
        for(x=0;x<pDisplay->width;x++){
 4004b94:	e03ffc15 	stw	zero,-16(fp)
 4004b98:	00006206 	br	4004d24 <VPG_ColorBar+0x1ac>
            if (x == 0 || y == 0 || x == pDisplay->width-1 || y == pDisplay->height-1){
 4004b9c:	e0bffc17 	ldw	r2,-16(fp)
 4004ba0:	1005003a 	cmpeq	r2,r2,zero
 4004ba4:	10000d1e 	bne	r2,zero,4004bdc <VPG_ColorBar+0x64>
 4004ba8:	e0bffb17 	ldw	r2,-20(fp)
 4004bac:	1005003a 	cmpeq	r2,r2,zero
 4004bb0:	10000a1e 	bne	r2,zero,4004bdc <VPG_ColorBar+0x64>
 4004bb4:	e0bffd17 	ldw	r2,-12(fp)
 4004bb8:	10800117 	ldw	r2,4(r2)
 4004bbc:	10ffffc4 	addi	r3,r2,-1
 4004bc0:	e0bffc17 	ldw	r2,-16(fp)
 4004bc4:	18800526 	beq	r3,r2,4004bdc <VPG_ColorBar+0x64>
 4004bc8:	e0bffd17 	ldw	r2,-12(fp)
 4004bcc:	10800217 	ldw	r2,8(r2)
 4004bd0:	10ffffc4 	addi	r3,r2,-1
 4004bd4:	e0bffb17 	ldw	r2,-20(fp)
 4004bd8:	1880041e 	bne	r3,r2,4004bec <VPG_ColorBar+0x74>
                Value32 = WHITE_24;
 4004bdc:	00804034 	movhi	r2,256
 4004be0:	10bfffc4 	addi	r2,r2,-1
 4004be4:	e0bffa15 	stw	r2,-24(fp)
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
            if (x == 0 || y == 0 || x == pDisplay->width-1 || y == pDisplay->height-1){
 4004be8:	00004606 	br	4004d04 <VPG_ColorBar+0x18c>
                Value32 = WHITE_24;
            }else if (y < pDisplay->height/4){
 4004bec:	e0bffd17 	ldw	r2,-12(fp)
 4004bf0:	10800217 	ldw	r2,8(r2)
 4004bf4:	e0bffe15 	stw	r2,-8(fp)
 4004bf8:	e0fffe17 	ldw	r3,-8(fp)
 4004bfc:	1804403a 	cmpge	r2,r3,zero
 4004c00:	1000031e 	bne	r2,zero,4004c10 <VPG_ColorBar+0x98>
 4004c04:	e0bffe17 	ldw	r2,-8(fp)
 4004c08:	108000c4 	addi	r2,r2,3
 4004c0c:	e0bffe15 	stw	r2,-8(fp)
 4004c10:	e0fffe17 	ldw	r3,-8(fp)
 4004c14:	1805d0ba 	srai	r2,r3,2
 4004c18:	1007883a 	mov	r3,r2
 4004c1c:	e0bffb17 	ldw	r2,-20(fp)
 4004c20:	10c0040e 	bge	r2,r3,4004c34 <VPG_ColorBar+0xbc>
                // red
                Value32 = x & 0xFF;
 4004c24:	e0bffc17 	ldw	r2,-16(fp)
 4004c28:	10803fcc 	andi	r2,r2,255
 4004c2c:	e0bffa15 	stw	r2,-24(fp)
 4004c30:	00003406 	br	4004d04 <VPG_ColorBar+0x18c>
            }else if (y < pDisplay->height/2){
 4004c34:	e0bffd17 	ldw	r2,-12(fp)
 4004c38:	10c00217 	ldw	r3,8(r2)
 4004c3c:	1804d7fa 	srli	r2,r3,31
 4004c40:	10c5883a 	add	r2,r2,r3
 4004c44:	1005d07a 	srai	r2,r2,1
 4004c48:	1007883a 	mov	r3,r2
 4004c4c:	e0bffb17 	ldw	r2,-20(fp)
 4004c50:	10c0050e 	bge	r2,r3,4004c68 <VPG_ColorBar+0xf0>
                Value32 = (x & 0xFF) << 8;
 4004c54:	e0bffc17 	ldw	r2,-16(fp)
 4004c58:	10803fcc 	andi	r2,r2,255
 4004c5c:	1004923a 	slli	r2,r2,8
 4004c60:	e0bffa15 	stw	r2,-24(fp)
 4004c64:	00002706 	br	4004d04 <VPG_ColorBar+0x18c>
            }else if (y < pDisplay->height*3/4){
 4004c68:	e0bffd17 	ldw	r2,-12(fp)
 4004c6c:	10c00217 	ldw	r3,8(r2)
 4004c70:	1805883a 	mov	r2,r3
 4004c74:	1085883a 	add	r2,r2,r2
 4004c78:	10c5883a 	add	r2,r2,r3
 4004c7c:	e0bfff15 	stw	r2,-4(fp)
 4004c80:	e0ffff17 	ldw	r3,-4(fp)
 4004c84:	1804403a 	cmpge	r2,r3,zero
 4004c88:	1000031e 	bne	r2,zero,4004c98 <VPG_ColorBar+0x120>
 4004c8c:	e0bfff17 	ldw	r2,-4(fp)
 4004c90:	108000c4 	addi	r2,r2,3
 4004c94:	e0bfff15 	stw	r2,-4(fp)
 4004c98:	e0ffff17 	ldw	r3,-4(fp)
 4004c9c:	1805d0ba 	srai	r2,r3,2
 4004ca0:	1007883a 	mov	r3,r2
 4004ca4:	e0bffb17 	ldw	r2,-20(fp)
 4004ca8:	10c0050e 	bge	r2,r3,4004cc0 <VPG_ColorBar+0x148>
                Value32 = (x & 0xFF) << 16;
 4004cac:	e0bffc17 	ldw	r2,-16(fp)
 4004cb0:	10803fcc 	andi	r2,r2,255
 4004cb4:	1004943a 	slli	r2,r2,16
 4004cb8:	e0bffa15 	stw	r2,-24(fp)
 4004cbc:	00001106 	br	4004d04 <VPG_ColorBar+0x18c>
            }else{
                Value32 = x & 0xFF;
 4004cc0:	e0bffc17 	ldw	r2,-16(fp)
 4004cc4:	10803fcc 	andi	r2,r2,255
 4004cc8:	e0bffa15 	stw	r2,-24(fp)
                Value32 |= (x & 0xFF) << 8;
 4004ccc:	e0bffc17 	ldw	r2,-16(fp)
 4004cd0:	10803fcc 	andi	r2,r2,255
 4004cd4:	1004923a 	slli	r2,r2,8
 4004cd8:	1007883a 	mov	r3,r2
 4004cdc:	e0bffa17 	ldw	r2,-24(fp)
 4004ce0:	10c4b03a 	or	r2,r2,r3
 4004ce4:	e0bffa15 	stw	r2,-24(fp)
                Value32 |= (x & 0xFF) << 16;
 4004ce8:	e0bffc17 	ldw	r2,-16(fp)
 4004cec:	10803fcc 	andi	r2,r2,255
 4004cf0:	1004943a 	slli	r2,r2,16
 4004cf4:	1007883a 	mov	r3,r2
 4004cf8:	e0bffa17 	ldw	r2,-24(fp)
 4004cfc:	10c4b03a 	or	r2,r2,r3
 4004d00:	e0bffa15 	stw	r2,-24(fp)
            }
            vid_set_pixel(x,y,Value32, pDisplay);
 4004d04:	e13ffc17 	ldw	r4,-16(fp)
 4004d08:	e17ffb17 	ldw	r5,-20(fp)
 4004d0c:	e1bffa17 	ldw	r6,-24(fp)
 4004d10:	e1fffd17 	ldw	r7,-12(fp)
 4004d14:	40018f40 	call	40018f4 <vid_set_pixel>
void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
 4004d18:	e0bffc17 	ldw	r2,-16(fp)
 4004d1c:	10800044 	addi	r2,r2,1
 4004d20:	e0bffc15 	stw	r2,-16(fp)
 4004d24:	e0bffd17 	ldw	r2,-12(fp)
 4004d28:	10c00117 	ldw	r3,4(r2)
 4004d2c:	e0bffc17 	ldw	r2,-16(fp)
 4004d30:	10ff9a16 	blt	r2,r3,4004b9c <VPG_ColorBar+0x24>

void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
 4004d34:	e0bffb17 	ldw	r2,-20(fp)
 4004d38:	10800044 	addi	r2,r2,1
 4004d3c:	e0bffb15 	stw	r2,-20(fp)
 4004d40:	e0bffd17 	ldw	r2,-12(fp)
 4004d44:	10c00217 	ldw	r3,8(r2)
 4004d48:	e0bffb17 	ldw	r2,-20(fp)
 4004d4c:	10ff9116 	blt	r2,r3,4004b94 <VPG_ColorBar+0x1c>

        }

    }

}
 4004d50:	e037883a 	mov	sp,fp
 4004d54:	dfc00117 	ldw	ra,4(sp)
 4004d58:	df000017 	ldw	fp,0(sp)
 4004d5c:	dec00204 	addi	sp,sp,8
 4004d60:	f800283a 	ret

04004d64 <GUI_ShowPAT>:


void GUI_ShowPAT(alt_video_display *pDisplay, int PatId){
 4004d64:	defffc04 	addi	sp,sp,-16
 4004d68:	dfc00315 	stw	ra,12(sp)
 4004d6c:	df000215 	stw	fp,8(sp)
 4004d70:	df000204 	addi	fp,sp,8
 4004d74:	e13ffe15 	stw	r4,-8(fp)
 4004d78:	e17fff15 	stw	r5,-4(fp)

                switch(PatId){
 4004d7c:	e0bfff17 	ldw	r2,-4(fp)
 4004d80:	108003e8 	cmpgeui	r2,r2,15
 4004d84:	1000511e 	bne	r2,zero,4004ecc <GUI_ShowPAT+0x168>
 4004d88:	e0bfff17 	ldw	r2,-4(fp)
 4004d8c:	1085883a 	add	r2,r2,r2
 4004d90:	1087883a 	add	r3,r2,r2
 4004d94:	00810034 	movhi	r2,1024
 4004d98:	10936a04 	addi	r2,r2,19880
 4004d9c:	1885883a 	add	r2,r3,r2
 4004da0:	10800017 	ldw	r2,0(r2)
 4004da4:	1000683a 	jmp	r2
 4004da8:	04004de4 	muli	r16,zero,311
 4004dac:	04004df0 	cmpltui	r16,zero,311
 4004db0:	04004e04 	movi	r16,312
 4004db4:	04004e14 	movui	r16,312
 4004db8:	04004e24 	muli	r16,zero,312
 4004dbc:	04004e34 	movhi	r16,312
 4004dc0:	04004e40 	call	4004e4 <__reset-0x3bffb1c>
 4004dc4:	04004e50 	cmplti	r16,zero,313
 4004dc8:	04004e60 	cmpeqi	r16,zero,313
 4004dcc:	04004e70 	cmpltui	r16,zero,313
 4004dd0:	04004e80 	call	4004e8 <__reset-0x3bffb18>
 4004dd4:	04004e90 	cmplti	r16,zero,314
 4004dd8:	04004ea0 	cmpeqi	r16,zero,314
 4004ddc:	04004eb0 	cmpltui	r16,zero,314
 4004de0:	04004ec0 	call	4004ec <__reset-0x3bffb14>
                    case 0: VPG_ColorBar(pDisplay); break;
 4004de4:	e13ffe17 	ldw	r4,-8(fp)
 4004de8:	4004b780 	call	4004b78 <VPG_ColorBar>
 4004dec:	00003706 	br	4004ecc <GUI_ShowPAT+0x168>
                    case 1: VPG_ColorPanel(pDisplay, WHITE_24); break;
 4004df0:	e13ffe17 	ldw	r4,-8(fp)
 4004df4:	01404034 	movhi	r5,256
 4004df8:	297fffc4 	addi	r5,r5,-1
 4004dfc:	400484c0 	call	400484c <VPG_ColorPanel>
 4004e00:	00003206 	br	4004ecc <GUI_ShowPAT+0x168>
                    case 2: VPG_ColorPanel(pDisplay, RED_24); break;
 4004e04:	e13ffe17 	ldw	r4,-8(fp)
 4004e08:	01403ff4 	movhi	r5,255
 4004e0c:	400484c0 	call	400484c <VPG_ColorPanel>
 4004e10:	00002e06 	br	4004ecc <GUI_ShowPAT+0x168>
                    case 3: VPG_ColorPanel(pDisplay, GREEN_24); break;
 4004e14:	e13ffe17 	ldw	r4,-8(fp)
 4004e18:	01600014 	movui	r5,32768
 4004e1c:	400484c0 	call	400484c <VPG_ColorPanel>
 4004e20:	00002a06 	br	4004ecc <GUI_ShowPAT+0x168>
                    case 4: VPG_ColorPanel(pDisplay, BLUE_24); break;
 4004e24:	e13ffe17 	ldw	r4,-8(fp)
 4004e28:	01403fc4 	movi	r5,255
 4004e2c:	400484c0 	call	400484c <VPG_ColorPanel>
 4004e30:	00002606 	br	4004ecc <GUI_ShowPAT+0x168>
                    case 5: VPG_XLine(pDisplay); break;
 4004e34:	e13ffe17 	ldw	r4,-8(fp)
 4004e38:	400482c0 	call	400482c <VPG_XLine>
 4004e3c:	00002306 	br	4004ecc <GUI_ShowPAT+0x168>
                    case 6: VPG_VGrid(pDisplay, 2); break;
 4004e40:	e13ffe17 	ldw	r4,-8(fp)
 4004e44:	01400084 	movi	r5,2
 4004e48:	40049d80 	call	40049d8 <VPG_VGrid>
 4004e4c:	00001f06 	br	4004ecc <GUI_ShowPAT+0x168>
                    case 7: VPG_VGrid(pDisplay, 4); break;
 4004e50:	e13ffe17 	ldw	r4,-8(fp)
 4004e54:	01400104 	movi	r5,4
 4004e58:	40049d80 	call	40049d8 <VPG_VGrid>
 4004e5c:	00001b06 	br	4004ecc <GUI_ShowPAT+0x168>
                    case 8: VPG_VGrid(pDisplay, 8); break;
 4004e60:	e13ffe17 	ldw	r4,-8(fp)
 4004e64:	01400204 	movi	r5,8
 4004e68:	40049d80 	call	40049d8 <VPG_VGrid>
 4004e6c:	00001706 	br	4004ecc <GUI_ShowPAT+0x168>
                    case 9: VPG_HGrid(pDisplay, 2); break;
 4004e70:	e13ffe17 	ldw	r4,-8(fp)
 4004e74:	01400084 	movi	r5,2
 4004e78:	4004aa80 	call	4004aa8 <VPG_HGrid>
 4004e7c:	00001306 	br	4004ecc <GUI_ShowPAT+0x168>
                    case 10: VPG_HGrid(pDisplay, 4); break;
 4004e80:	e13ffe17 	ldw	r4,-8(fp)
 4004e84:	01400104 	movi	r5,4
 4004e88:	4004aa80 	call	4004aa8 <VPG_HGrid>
 4004e8c:	00000f06 	br	4004ecc <GUI_ShowPAT+0x168>
                    case 11: VPG_HGrid(pDisplay, 8); break;
 4004e90:	e13ffe17 	ldw	r4,-8(fp)
 4004e94:	01400204 	movi	r5,8
 4004e98:	4004aa80 	call	4004aa8 <VPG_HGrid>
 4004e9c:	00000b06 	br	4004ecc <GUI_ShowPAT+0x168>
                    case 12: VPG_Grid(pDisplay, 2); break;
 4004ea0:	e13ffe17 	ldw	r4,-8(fp)
 4004ea4:	01400084 	movi	r5,2
 4004ea8:	40048f40 	call	40048f4 <VPG_Grid>
 4004eac:	00000706 	br	4004ecc <GUI_ShowPAT+0x168>
                    case 13: VPG_Grid(pDisplay, 4); break;
 4004eb0:	e13ffe17 	ldw	r4,-8(fp)
 4004eb4:	01400104 	movi	r5,4
 4004eb8:	40048f40 	call	40048f4 <VPG_Grid>
 4004ebc:	00000306 	br	4004ecc <GUI_ShowPAT+0x168>
                    case 14: VPG_Grid(pDisplay, 8); break;
 4004ec0:	e13ffe17 	ldw	r4,-8(fp)
 4004ec4:	01400204 	movi	r5,8
 4004ec8:	40048f40 	call	40048f4 <VPG_Grid>
                }

}
 4004ecc:	e037883a 	mov	sp,fp
 4004ed0:	dfc00117 	ldw	ra,4(sp)
 4004ed4:	df000017 	ldw	fp,0(sp)
 4004ed8:	dec00204 	addi	sp,sp,8
 4004edc:	f800283a 	ret

04004ee0 <GUI_VPG>:

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
 4004ee0:	defff904 	addi	sp,sp,-28
 4004ee4:	dfc00615 	stw	ra,24(sp)
 4004ee8:	df000515 	stw	fp,20(sp)
 4004eec:	df000504 	addi	fp,sp,20
 4004ef0:	e13ffe15 	stw	r4,-8(fp)
 4004ef4:	e17fff15 	stw	r5,-4(fp)
	int X, Y;
	int PatId = 0;
 4004ef8:	e03ffb15 	stw	zero,-20(fp)

    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
 4004efc:	e13ffe17 	ldw	r4,-8(fp)
 4004f00:	000b883a 	mov	r5,zero
 4004f04:	4000e4c0 	call	4000e4c <vid_clean_screen>


    VPG_ColorBar(pDisplay);
 4004f08:	e13ffe17 	ldw	r4,-8(fp)
 4004f0c:	4004b780 	call	4004b78 <VPG_ColorBar>

    GUI_ShowPAT(pDisplay, PatId);
 4004f10:	e13ffe17 	ldw	r4,-8(fp)
 4004f14:	e17ffb17 	ldw	r5,-20(fp)
 4004f18:	4004d640 	call	4004d64 <GUI_ShowPAT>
 4004f1c:	00000006 	br	4004f20 <GUI_VPG+0x40>

    while(1){
        if (Touch_GetXY(pTouch, &X, &Y)){
 4004f20:	e17ffc04 	addi	r5,fp,-16
 4004f24:	e1bffd04 	addi	r6,fp,-12
 4004f28:	e13fff17 	ldw	r4,-4(fp)
 4004f2c:	40068d00 	call	40068d0 <Touch_GetXY>
 4004f30:	1005003a 	cmpeq	r2,r2,zero
 4004f34:	103ffa1e 	bne	r2,zero,4004f20 <GUI_VPG+0x40>
            //printf(".");

            // change pattern
            PatId++;
 4004f38:	e0bffb17 	ldw	r2,-20(fp)
 4004f3c:	10800044 	addi	r2,r2,1
 4004f40:	e0bffb15 	stw	r2,-20(fp)
            if (PatId > 14)
 4004f44:	e0bffb17 	ldw	r2,-20(fp)
 4004f48:	108003d0 	cmplti	r2,r2,15
 4004f4c:	1000011e 	bne	r2,zero,4004f54 <GUI_VPG+0x74>
                PatId = 0;
 4004f50:	e03ffb15 	stw	zero,-20(fp)

            printf("PatId=%d\r\n", PatId);
 4004f54:	010100f4 	movhi	r4,1027
 4004f58:	2136bf04 	addi	r4,r4,-9476
 4004f5c:	e17ffb17 	ldw	r5,-20(fp)
 4004f60:	40092d00 	call	40092d0 <printf>
            GUI_ShowPAT(pDisplay, PatId);
 4004f64:	e13ffe17 	ldw	r4,-8(fp)
 4004f68:	e17ffb17 	ldw	r5,-20(fp)
 4004f6c:	4004d640 	call	4004d64 <GUI_ShowPAT>
            usleep(300*1000); // debounce
 4004f70:	01000174 	movhi	r4,5
 4004f74:	2124f804 	addi	r4,r4,-27680
 4004f78:	4011df40 	call	4011df4 <usleep>
            Touch_EmptyFifo( pTouch);
 4004f7c:	e13fff17 	ldw	r4,-4(fp)
 4004f80:	40068980 	call	4006898 <Touch_EmptyFifo>
        }
    }
 4004f84:	003fe606 	br	4004f20 <GUI_VPG+0x40>

04004f88 <main>:
#include "system.h"

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch);

int main()
{
 4004f88:	defff704 	addi	sp,sp,-36
 4004f8c:	dfc00815 	stw	ra,32(sp)
 4004f90:	df000715 	stw	fp,28(sp)
 4004f94:	df000704 	addi	fp,sp,28
	TOUCH_HANDLE *pTouch;
	alt_video_display Display;


    const bool bVPG = ((IORD(KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
 4004f98:	00820034 	movhi	r2,2048
 4004f9c:	10841004 	addi	r2,r2,4160
 4004fa0:	10800037 	ldwio	r2,0(r2)
 4004fa4:	1080004c 	andi	r2,r2,1
 4004fa8:	1005003a 	cmpeq	r2,r2,zero
 4004fac:	e0bff915 	stw	r2,-28(fp)

   printf("LT24 Demo!\n");
 4004fb0:	010100f4 	movhi	r4,1027
 4004fb4:	2136c204 	addi	r4,r4,-9464
 4004fb8:	40093e80 	call	40093e8 <puts>

   // init touch
   pTouch = Touch_Init(TOUCH_PANEL_SPI_BASE, TOUCH_PANEL_PEN_IRQ_N_BASE, TOUCH_PANEL_PEN_IRQ_N_IRQ);
 4004fbc:	01020034 	movhi	r4,2048
 4004fc0:	21040004 	addi	r4,r4,4096
 4004fc4:	01420034 	movhi	r5,2048
 4004fc8:	29441804 	addi	r5,r5,4192
 4004fcc:	018000c4 	movi	r6,3
 4004fd0:	40066a80 	call	40066a8 <Touch_Init>
 4004fd4:	e0bffa15 	stw	r2,-24(fp)
   if (!pTouch){
 4004fd8:	e0bffa17 	ldw	r2,-24(fp)
 4004fdc:	1004c03a 	cmpne	r2,r2,zero
 4004fe0:	1000041e 	bne	r2,zero,4004ff4 <main+0x6c>
       printf("Failed to init touch\r\n");
 4004fe4:	010100f4 	movhi	r4,1027
 4004fe8:	2136c504 	addi	r4,r4,-9452
 4004fec:	40093e80 	call	40093e8 <puts>
 4004ff0:	00000306 	br	4005000 <main+0x78>
   }else{
       printf("Init touch successfully\r\n");
 4004ff4:	010100f4 	movhi	r4,1027
 4004ff8:	2136cb04 	addi	r4,r4,-9428
 4004ffc:	40093e80 	call	40093e8 <puts>

   }

   // init LCD
   LCD_Init();
 4005000:	40007980 	call	4000798 <LCD_Init>
   LCD_Clear(0X0000);
 4005004:	0009883a 	mov	r4,zero
 4005008:	40006d00 	call	40006d0 <LCD_Clear>

   Display.interlace = 0;
 400500c:	e03fff15 	stw	zero,-4(fp)
   Display.bytes_per_pixel = 2;
 4005010:	00800084 	movi	r2,2
 4005014:	e0bffe15 	stw	r2,-8(fp)
   Display.color_depth = 16;
 4005018:	00800404 	movi	r2,16
 400501c:	e0bffb15 	stw	r2,-20(fp)
   Display.height = SCREEN_HEIGHT;
 4005020:	00805004 	movi	r2,320
 4005024:	e0bffd15 	stw	r2,-12(fp)
   Display.width = SCREEN_WIDTH;
 4005028:	00803c04 	movi	r2,240
 400502c:	e0bffc15 	stw	r2,-16(fp)

   // run demo
   if (bVPG)
 4005030:	e0bff917 	ldw	r2,-28(fp)
 4005034:	1005003a 	cmpeq	r2,r2,zero
 4005038:	1000041e 	bne	r2,zero,400504c <main+0xc4>
       GUI_VPG(&Display, pTouch); // enter vpg mode when users press KEY0
 400503c:	e13ffb04 	addi	r4,fp,-20
 4005040:	e17ffa17 	ldw	r5,-24(fp)
 4005044:	4004ee00 	call	4004ee0 <GUI_VPG>
 4005048:	00000306 	br	4005058 <main+0xd0>
   else
	   GUI(&Display, pTouch);
 400504c:	e13ffb04 	addi	r4,fp,-20
 4005050:	e17ffa17 	ldw	r5,-24(fp)
 4005054:	40045380 	call	4004538 <GUI>


}
 4005058:	e037883a 	mov	sp,fp
 400505c:	dfc00117 	ldw	ra,4(sp)
 4005060:	df000017 	ldw	fp,0(sp)
 4005064:	dec00204 	addi	sp,sp,8
 4005068:	f800283a 	ret

0400506c <my_wait>:
    #define I2C_DEBUG(x)    DEBUG(x)  
#else
    #define I2C_DEBUG(x)
#endif

void my_wait(int nWait){
 400506c:	defffd04 	addi	sp,sp,-12
 4005070:	df000215 	stw	fp,8(sp)
 4005074:	df000204 	addi	fp,sp,8
 4005078:	e13fff15 	stw	r4,-4(fp)
    int i;
    i = 0;
 400507c:	e03ffe15 	stw	zero,-8(fp)
    while (i < nWait){
 4005080:	00000306 	br	4005090 <my_wait+0x24>
        i++;
 4005084:	e0bffe17 	ldw	r2,-8(fp)
 4005088:	10800044 	addi	r2,r2,1
 400508c:	e0bffe15 	stw	r2,-8(fp)
#endif

void my_wait(int nWait){
    int i;
    i = 0;
    while (i < nWait){
 4005090:	e0fffe17 	ldw	r3,-8(fp)
 4005094:	e0bfff17 	ldw	r2,-4(fp)
 4005098:	18bffa16 	blt	r3,r2,4005084 <my_wait+0x18>
        i++;
     //   IOWR(LED_BASE, 0, i);
    }    
}
 400509c:	e037883a 	mov	sp,fp
 40050a0:	df000017 	ldw	fp,0(sp)
 40050a4:	dec00104 	addi	sp,sp,4
 40050a8:	f800283a 	ret

040050ac <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 40050ac:	defff804 	addi	sp,sp,-32
 40050b0:	dfc00715 	stw	ra,28(sp)
 40050b4:	df000615 	stw	fp,24(sp)
 40050b8:	df000604 	addi	fp,sp,24
 40050bc:	e13ffb15 	stw	r4,-20(fp)
 40050c0:	e17ffc15 	stw	r5,-16(fp)
 40050c4:	e0800217 	ldw	r2,8(fp)
 40050c8:	e1bffd05 	stb	r6,-12(fp)
 40050cc:	e1fffe05 	stb	r7,-8(fp)
 40050d0:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 40050d4:	00800044 	movi	r2,1
 40050d8:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 40050dc:	e13ffb17 	ldw	r4,-20(fp)
 40050e0:	e17ffc17 	ldw	r5,-16(fp)
 40050e4:	40057280 	call	4005728 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 40050e8:	e0bffd03 	ldbu	r2,-12(fp)
 40050ec:	11803fcc 	andi	r6,r2,255
 40050f0:	e13ffb17 	ldw	r4,-20(fp)
 40050f4:	e17ffc17 	ldw	r5,-16(fp)
 40050f8:	40058280 	call	4005828 <i2c_write>
 40050fc:	1004c03a 	cmpne	r2,r2,zero
 4005100:	1000041e 	bne	r2,zero,4005114 <I2C_Write+0x68>
        bSuccess = FALSE;
 4005104:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4005108:	010100f4 	movhi	r4,1027
 400510c:	2136d204 	addi	r4,r4,-9400
 4005110:	400629c0 	call	400629c <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 4005114:	e0bffa17 	ldw	r2,-24(fp)
 4005118:	1005003a 	cmpeq	r2,r2,zero
 400511c:	10000a1e 	bne	r2,zero,4005148 <I2C_Write+0x9c>
 4005120:	e1bffe03 	ldbu	r6,-8(fp)
 4005124:	e13ffb17 	ldw	r4,-20(fp)
 4005128:	e17ffc17 	ldw	r5,-16(fp)
 400512c:	40058280 	call	4005828 <i2c_write>
 4005130:	1004c03a 	cmpne	r2,r2,zero
 4005134:	1000041e 	bne	r2,zero,4005148 <I2C_Write+0x9c>
        bSuccess = FALSE;
 4005138:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 400513c:	010100f4 	movhi	r4,1027
 4005140:	2136da04 	addi	r4,r4,-9368
 4005144:	400629c0 	call	400629c <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 4005148:	e0bffa17 	ldw	r2,-24(fp)
 400514c:	1005003a 	cmpeq	r2,r2,zero
 4005150:	10000a1e 	bne	r2,zero,400517c <I2C_Write+0xd0>
 4005154:	e1bfff03 	ldbu	r6,-4(fp)
 4005158:	e13ffb17 	ldw	r4,-20(fp)
 400515c:	e17ffc17 	ldw	r5,-16(fp)
 4005160:	40058280 	call	4005828 <i2c_write>
 4005164:	1004c03a 	cmpne	r2,r2,zero
 4005168:	1000041e 	bne	r2,zero,400517c <I2C_Write+0xd0>
        bSuccess = FALSE;
 400516c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4005170:	010100f4 	movhi	r4,1027
 4005174:	2136e304 	addi	r4,r4,-9332
 4005178:	400629c0 	call	400629c <myprintf>
    }
    i2c_stop(clk_base, data_base);
 400517c:	e13ffb17 	ldw	r4,-20(fp)
 4005180:	e17ffc17 	ldw	r5,-16(fp)
 4005184:	40057b00 	call	40057b0 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 4005188:	0106d604 	movi	r4,7000
 400518c:	4011df40 	call	4011df4 <usleep>
    
    return bSuccess;
 4005190:	e0bffa17 	ldw	r2,-24(fp)

    
}
 4005194:	e037883a 	mov	sp,fp
 4005198:	dfc00117 	ldw	ra,4(sp)
 400519c:	df000017 	ldw	fp,0(sp)
 40051a0:	dec00204 	addi	sp,sp,8
 40051a4:	f800283a 	ret

040051a8 <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
 40051a8:	defff704 	addi	sp,sp,-36
 40051ac:	dfc00815 	stw	ra,32(sp)
 40051b0:	df000715 	stw	fp,28(sp)
 40051b4:	df000704 	addi	fp,sp,28
 40051b8:	e13ffb15 	stw	r4,-20(fp)
 40051bc:	e17ffc15 	stw	r5,-16(fp)
 40051c0:	e0800217 	ldw	r2,8(fp)
 40051c4:	e1bffd05 	stb	r6,-12(fp)
 40051c8:	e1fffe05 	stb	r7,-8(fp)
 40051cc:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 40051d0:	00800044 	movi	r2,1
 40051d4:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
 40051d8:	e0bfff0b 	ldhu	r2,-4(fp)
 40051dc:	1004d23a 	srli	r2,r2,8
 40051e0:	1007883a 	mov	r3,r2
 40051e4:	00bfffc4 	movi	r2,-1
 40051e8:	1884703a 	and	r2,r3,r2
 40051ec:	e0bff945 	stb	r2,-27(fp)
    LowByte = ControlData & 0xFF; 
 40051f0:	e0bfff0b 	ldhu	r2,-4(fp)
 40051f4:	1007883a 	mov	r3,r2
 40051f8:	00bfffc4 	movi	r2,-1
 40051fc:	1884703a 	and	r2,r3,r2
 4005200:	e0bff905 	stb	r2,-28(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 4005204:	e13ffb17 	ldw	r4,-20(fp)
 4005208:	e17ffc17 	ldw	r5,-16(fp)
 400520c:	40057280 	call	4005728 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4005210:	e0bffd03 	ldbu	r2,-12(fp)
 4005214:	11803fcc 	andi	r6,r2,255
 4005218:	e13ffb17 	ldw	r4,-20(fp)
 400521c:	e17ffc17 	ldw	r5,-16(fp)
 4005220:	40058280 	call	4005828 <i2c_write>
 4005224:	1004c03a 	cmpne	r2,r2,zero
 4005228:	1000041e 	bne	r2,zero,400523c <I2C_Write16+0x94>
        bSuccess = FALSE;
 400522c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4005230:	010100f4 	movhi	r4,1027
 4005234:	2136d204 	addi	r4,r4,-9400
 4005238:	400629c0 	call	400629c <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 400523c:	e0bffa17 	ldw	r2,-24(fp)
 4005240:	1005003a 	cmpeq	r2,r2,zero
 4005244:	10000a1e 	bne	r2,zero,4005270 <I2C_Write16+0xc8>
 4005248:	e1bffe03 	ldbu	r6,-8(fp)
 400524c:	e13ffb17 	ldw	r4,-20(fp)
 4005250:	e17ffc17 	ldw	r5,-16(fp)
 4005254:	40058280 	call	4005828 <i2c_write>
 4005258:	1004c03a 	cmpne	r2,r2,zero
 400525c:	1000041e 	bne	r2,zero,4005270 <I2C_Write16+0xc8>
        bSuccess = FALSE;
 4005260:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 4005264:	010100f4 	movhi	r4,1027
 4005268:	2136da04 	addi	r4,r4,-9368
 400526c:	400629c0 	call	400629c <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
 4005270:	e0bffa17 	ldw	r2,-24(fp)
 4005274:	1005003a 	cmpeq	r2,r2,zero
 4005278:	10000a1e 	bne	r2,zero,40052a4 <I2C_Write16+0xfc>
 400527c:	e1bff943 	ldbu	r6,-27(fp)
 4005280:	e13ffb17 	ldw	r4,-20(fp)
 4005284:	e17ffc17 	ldw	r5,-16(fp)
 4005288:	40058280 	call	4005828 <i2c_write>
 400528c:	1004c03a 	cmpne	r2,r2,zero
 4005290:	1000041e 	bne	r2,zero,40052a4 <I2C_Write16+0xfc>
        bSuccess = FALSE;
 4005294:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4005298:	010100f4 	movhi	r4,1027
 400529c:	2136e304 	addi	r4,r4,-9332
 40052a0:	400629c0 	call	400629c <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
 40052a4:	e0bffa17 	ldw	r2,-24(fp)
 40052a8:	1005003a 	cmpeq	r2,r2,zero
 40052ac:	10000a1e 	bne	r2,zero,40052d8 <I2C_Write16+0x130>
 40052b0:	e1bff903 	ldbu	r6,-28(fp)
 40052b4:	e13ffb17 	ldw	r4,-20(fp)
 40052b8:	e17ffc17 	ldw	r5,-16(fp)
 40052bc:	40058280 	call	4005828 <i2c_write>
 40052c0:	1004c03a 	cmpne	r2,r2,zero
 40052c4:	1000041e 	bne	r2,zero,40052d8 <I2C_Write16+0x130>
        bSuccess = FALSE;
 40052c8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 40052cc:	010100f4 	movhi	r4,1027
 40052d0:	2136e304 	addi	r4,r4,-9332
 40052d4:	400629c0 	call	400629c <myprintf>
    }    
    i2c_stop(clk_base, data_base);
 40052d8:	e13ffb17 	ldw	r4,-20(fp)
 40052dc:	e17ffc17 	ldw	r5,-16(fp)
 40052e0:	40057b00 	call	40057b0 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 40052e4:	0106d604 	movi	r4,7000
 40052e8:	4011df40 	call	4011df4 <usleep>
    
    return bSuccess;
 40052ec:	e0bffa17 	ldw	r2,-24(fp)

    
}
 40052f0:	e037883a 	mov	sp,fp
 40052f4:	dfc00117 	ldw	ra,4(sp)
 40052f8:	df000017 	ldw	fp,0(sp)
 40052fc:	dec00204 	addi	sp,sp,8
 4005300:	f800283a 	ret

04005304 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 4005304:	defff904 	addi	sp,sp,-28
 4005308:	dfc00615 	stw	ra,24(sp)
 400530c:	df000515 	stw	fp,20(sp)
 4005310:	df000504 	addi	fp,sp,20
 4005314:	e13ffc15 	stw	r4,-16(fp)
 4005318:	e17ffd15 	stw	r5,-12(fp)
 400531c:	e1bffe05 	stb	r6,-8(fp)
 4005320:	e1ffff05 	stb	r7,-4(fp)
    bool bSuccess = TRUE;
 4005324:	00800044 	movi	r2,1
 4005328:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 400532c:	e13ffc17 	ldw	r4,-16(fp)
 4005330:	e17ffd17 	ldw	r5,-12(fp)
 4005334:	40057280 	call	4005728 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4005338:	e0bffe03 	ldbu	r2,-8(fp)
 400533c:	11803fcc 	andi	r6,r2,255
 4005340:	e13ffc17 	ldw	r4,-16(fp)
 4005344:	e17ffd17 	ldw	r5,-12(fp)
 4005348:	40058280 	call	4005828 <i2c_write>
 400534c:	1004c03a 	cmpne	r2,r2,zero
 4005350:	1000041e 	bne	r2,zero,4005364 <I2C_Read+0x60>
        bSuccess = FALSE;
 4005354:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(1) Fail: Address NACK!\n"));
 4005358:	010100f4 	movhi	r4,1027
 400535c:	2136eb04 	addi	r4,r4,-9300
 4005360:	400629c0 	call	400629c <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 4005364:	e0bffb17 	ldw	r2,-20(fp)
 4005368:	1005003a 	cmpeq	r2,r2,zero
 400536c:	10000a1e 	bne	r2,zero,4005398 <I2C_Read+0x94>
 4005370:	e1bfff03 	ldbu	r6,-4(fp)
 4005374:	e13ffc17 	ldw	r4,-16(fp)
 4005378:	e17ffd17 	ldw	r5,-12(fp)
 400537c:	40058280 	call	4005828 <i2c_write>
 4005380:	1004c03a 	cmpne	r2,r2,zero
 4005384:	1000041e 	bne	r2,zero,4005398 <I2C_Read+0x94>
        bSuccess = FALSE;
 4005388:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(2) Fail: SubAddress NACK!\n"));
 400538c:	010100f4 	movhi	r4,1027
 4005390:	2136f404 	addi	r4,r4,-9264
 4005394:	400629c0 	call	400629c <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 4005398:	e13ffc17 	ldw	r4,-16(fp)
 400539c:	e17ffd17 	ldw	r5,-12(fp)
 40053a0:	40057280 	call	4005728 <i2c_start>
    DeviceAddr |= 1; // Read
 40053a4:	e0bffe03 	ldbu	r2,-8(fp)
 40053a8:	10800054 	ori	r2,r2,1
 40053ac:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 40053b0:	e0bffb17 	ldw	r2,-20(fp)
 40053b4:	1005003a 	cmpeq	r2,r2,zero
 40053b8:	10000b1e 	bne	r2,zero,40053e8 <I2C_Read+0xe4>
 40053bc:	e0bffe03 	ldbu	r2,-8(fp)
 40053c0:	11803fcc 	andi	r6,r2,255
 40053c4:	e13ffc17 	ldw	r4,-16(fp)
 40053c8:	e17ffd17 	ldw	r5,-12(fp)
 40053cc:	40058280 	call	4005828 <i2c_write>
 40053d0:	1004c03a 	cmpne	r2,r2,zero
 40053d4:	1000041e 	bne	r2,zero,40053e8 <I2C_Read+0xe4>
        bSuccess = FALSE;
 40053d8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(3) Fail: Address+1 NACK!\n"));
 40053dc:	010100f4 	movhi	r4,1027
 40053e0:	2136fd04 	addi	r4,r4,-9228
 40053e4:	400629c0 	call	400629c <myprintf>
    }
    
    if (bSuccess){
 40053e8:	e0bffb17 	ldw	r2,-20(fp)
 40053ec:	1005003a 	cmpeq	r2,r2,zero
 40053f0:	1000051e 	bne	r2,zero,4005408 <I2C_Read+0x104>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 40053f4:	e13ffc17 	ldw	r4,-16(fp)
 40053f8:	e17ffd17 	ldw	r5,-12(fp)
 40053fc:	e1800217 	ldw	r6,8(fp)
 4005400:	000f883a 	mov	r7,zero
 4005404:	40059940 	call	4005994 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 4005408:	e13ffc17 	ldw	r4,-16(fp)
 400540c:	e17ffd17 	ldw	r5,-12(fp)
 4005410:	40057b00 	call	40057b0 <i2c_stop>
    
    return bSuccess;
 4005414:	e0bffb17 	ldw	r2,-20(fp)
}
 4005418:	e037883a 	mov	sp,fp
 400541c:	dfc00117 	ldw	ra,4(sp)
 4005420:	df000017 	ldw	fp,0(sp)
 4005424:	dec00204 	addi	sp,sp,8
 4005428:	f800283a 	ret

0400542c <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
 400542c:	defff804 	addi	sp,sp,-32
 4005430:	dfc00715 	stw	ra,28(sp)
 4005434:	df000615 	stw	fp,24(sp)
 4005438:	df000604 	addi	fp,sp,24
 400543c:	e13ffc15 	stw	r4,-16(fp)
 4005440:	e17ffd15 	stw	r5,-12(fp)
 4005444:	e1bffe05 	stb	r6,-8(fp)
 4005448:	e1ffff05 	stb	r7,-4(fp)
    bool bSuccess = TRUE;
 400544c:	00800044 	movi	r2,1
 4005450:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 4005454:	e13ffc17 	ldw	r4,-16(fp)
 4005458:	e17ffd17 	ldw	r5,-12(fp)
 400545c:	40057280 	call	4005728 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4005460:	e0bffe03 	ldbu	r2,-8(fp)
 4005464:	11803fcc 	andi	r6,r2,255
 4005468:	e13ffc17 	ldw	r4,-16(fp)
 400546c:	e17ffd17 	ldw	r5,-12(fp)
 4005470:	40058280 	call	4005828 <i2c_write>
 4005474:	1004c03a 	cmpne	r2,r2,zero
 4005478:	1000041e 	bne	r2,zero,400548c <I2C_Read16+0x60>
        bSuccess = FALSE;
 400547c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4005480:	010100f4 	movhi	r4,1027
 4005484:	2136d204 	addi	r4,r4,-9400
 4005488:	400629c0 	call	400629c <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 400548c:	e0bffa17 	ldw	r2,-24(fp)
 4005490:	1005003a 	cmpeq	r2,r2,zero
 4005494:	10000a1e 	bne	r2,zero,40054c0 <I2C_Read16+0x94>
 4005498:	e1bfff03 	ldbu	r6,-4(fp)
 400549c:	e13ffc17 	ldw	r4,-16(fp)
 40054a0:	e17ffd17 	ldw	r5,-12(fp)
 40054a4:	40058280 	call	4005828 <i2c_write>
 40054a8:	1004c03a 	cmpne	r2,r2,zero
 40054ac:	1000041e 	bne	r2,zero,40054c0 <I2C_Read16+0x94>
        bSuccess = FALSE;
 40054b0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
 40054b4:	010100f4 	movhi	r4,1027
 40054b8:	2136da04 	addi	r4,r4,-9368
 40054bc:	400629c0 	call	400629c <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 40054c0:	e13ffc17 	ldw	r4,-16(fp)
 40054c4:	e17ffd17 	ldw	r5,-12(fp)
 40054c8:	40057280 	call	4005728 <i2c_start>
    DeviceAddr |= 1; // Read
 40054cc:	e0bffe03 	ldbu	r2,-8(fp)
 40054d0:	10800054 	ori	r2,r2,1
 40054d4:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 40054d8:	e0bffa17 	ldw	r2,-24(fp)
 40054dc:	1005003a 	cmpeq	r2,r2,zero
 40054e0:	10000b1e 	bne	r2,zero,4005510 <I2C_Read16+0xe4>
 40054e4:	e0bffe03 	ldbu	r2,-8(fp)
 40054e8:	11803fcc 	andi	r6,r2,255
 40054ec:	e13ffc17 	ldw	r4,-16(fp)
 40054f0:	e17ffd17 	ldw	r5,-12(fp)
 40054f4:	40058280 	call	4005828 <i2c_write>
 40054f8:	1004c03a 	cmpne	r2,r2,zero
 40054fc:	1000041e 	bne	r2,zero,4005510 <I2C_Read16+0xe4>
        bSuccess = FALSE;
 4005500:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 4005504:	010100f4 	movhi	r4,1027
 4005508:	21370604 	addi	r4,r4,-9192
 400550c:	400629c0 	call	400629c <myprintf>
    }
    
    if (bSuccess){
 4005510:	e0bffa17 	ldw	r2,-24(fp)
 4005514:	1005003a 	cmpeq	r2,r2,zero
 4005518:	1000051e 	bne	r2,zero,4005530 <I2C_Read16+0x104>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
 400551c:	e1bffb44 	addi	r6,fp,-19
 4005520:	e13ffc17 	ldw	r4,-16(fp)
 4005524:	e17ffd17 	ldw	r5,-12(fp)
 4005528:	01c00044 	movi	r7,1
 400552c:	40059940 	call	4005994 <i2c_read>
    }        
    if (bSuccess){
 4005530:	e0bffa17 	ldw	r2,-24(fp)
 4005534:	1005003a 	cmpeq	r2,r2,zero
 4005538:	1000051e 	bne	r2,zero,4005550 <I2C_Read16+0x124>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
 400553c:	e1bffb04 	addi	r6,fp,-20
 4005540:	e13ffc17 	ldw	r4,-16(fp)
 4005544:	e17ffd17 	ldw	r5,-12(fp)
 4005548:	000f883a 	mov	r7,zero
 400554c:	40059940 	call	4005994 <i2c_read>
    }        
    if (bSuccess)
 4005550:	e0bffa17 	ldw	r2,-24(fp)
 4005554:	1005003a 	cmpeq	r2,r2,zero
 4005558:	10000a1e 	bne	r2,zero,4005584 <I2C_Read16+0x158>
        *pControlData = (HighByte << 8) | LowByte;
 400555c:	e0bffb43 	ldbu	r2,-19(fp)
 4005560:	10803fcc 	andi	r2,r2,255
 4005564:	1004923a 	slli	r2,r2,8
 4005568:	1007883a 	mov	r3,r2
 400556c:	e0bffb03 	ldbu	r2,-20(fp)
 4005570:	10803fcc 	andi	r2,r2,255
 4005574:	1884b03a 	or	r2,r3,r2
 4005578:	1007883a 	mov	r3,r2
 400557c:	e0800217 	ldw	r2,8(fp)
 4005580:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
 4005584:	e13ffc17 	ldw	r4,-16(fp)
 4005588:	e17ffd17 	ldw	r5,-12(fp)
 400558c:	40057b00 	call	40057b0 <i2c_stop>
    
    return bSuccess;
 4005590:	e0bffa17 	ldw	r2,-24(fp)
}
 4005594:	e037883a 	mov	sp,fp
 4005598:	dfc00117 	ldw	ra,4(sp)
 400559c:	df000017 	ldw	fp,0(sp)
 40055a0:	dec00204 	addi	sp,sp,8
 40055a4:	f800283a 	ret

040055a8 <I2C_MultipleRead>:


bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
 40055a8:	defff704 	addi	sp,sp,-36
 40055ac:	dfc00815 	stw	ra,32(sp)
 40055b0:	df000715 	stw	fp,28(sp)
 40055b4:	df000704 	addi	fp,sp,28
 40055b8:	e13ffb15 	stw	r4,-20(fp)
 40055bc:	e17ffc15 	stw	r5,-16(fp)
 40055c0:	e0800317 	ldw	r2,12(fp)
 40055c4:	e1bffd05 	stb	r6,-12(fp)
 40055c8:	e1fffe05 	stb	r7,-8(fp)
 40055cc:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 40055d0:	00800044 	movi	r2,1
 40055d4:	e0bff915 	stw	r2,-28(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 40055d8:	e13ffb17 	ldw	r4,-20(fp)
 40055dc:	e17ffc17 	ldw	r5,-16(fp)
 40055e0:	40057280 	call	4005728 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 40055e4:	e0bffd03 	ldbu	r2,-12(fp)
 40055e8:	11803fcc 	andi	r6,r2,255
 40055ec:	e13ffb17 	ldw	r4,-20(fp)
 40055f0:	e17ffc17 	ldw	r5,-16(fp)
 40055f4:	40058280 	call	4005828 <i2c_write>
 40055f8:	1004c03a 	cmpne	r2,r2,zero
 40055fc:	1000041e 	bne	r2,zero,4005610 <I2C_MultipleRead+0x68>
        bSuccess = FALSE;
 4005600:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C_MultipleRead(1) Fail: Address NACK!\n"));
 4005604:	010100f4 	movhi	r4,1027
 4005608:	21370f04 	addi	r4,r4,-9156
 400560c:	400629c0 	call	400629c <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 4005610:	e0bff917 	ldw	r2,-28(fp)
 4005614:	1005003a 	cmpeq	r2,r2,zero
 4005618:	10000a1e 	bne	r2,zero,4005644 <I2C_MultipleRead+0x9c>
 400561c:	e1bffe03 	ldbu	r6,-8(fp)
 4005620:	e13ffb17 	ldw	r4,-20(fp)
 4005624:	e17ffc17 	ldw	r5,-16(fp)
 4005628:	40058280 	call	4005828 <i2c_write>
 400562c:	1004c03a 	cmpne	r2,r2,zero
 4005630:	1000041e 	bne	r2,zero,4005644 <I2C_MultipleRead+0x9c>
        bSuccess = FALSE;
 4005634:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C_MultipleRead(2) Fail: SubAddress NACK!\n"));
 4005638:	010100f4 	movhi	r4,1027
 400563c:	21371a04 	addi	r4,r4,-9112
 4005640:	400629c0 	call	400629c <myprintf>
    }    
    if (bSuccess)        
 4005644:	e0bff917 	ldw	r2,-28(fp)
 4005648:	1005003a 	cmpeq	r2,r2,zero
 400564c:	1000031e 	bne	r2,zero,400565c <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
 4005650:	e13ffb17 	ldw	r4,-20(fp)
 4005654:	e17ffc17 	ldw	r5,-16(fp)
 4005658:	40057280 	call	4005728 <i2c_start>
    DeviceAddr |= 1; // Read
 400565c:	e0bffd03 	ldbu	r2,-12(fp)
 4005660:	10800054 	ori	r2,r2,1
 4005664:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4005668:	e0bff917 	ldw	r2,-28(fp)
 400566c:	1005003a 	cmpeq	r2,r2,zero
 4005670:	10000b1e 	bne	r2,zero,40056a0 <I2C_MultipleRead+0xf8>
 4005674:	e0bffd03 	ldbu	r2,-12(fp)
 4005678:	11803fcc 	andi	r6,r2,255
 400567c:	e13ffb17 	ldw	r4,-20(fp)
 4005680:	e17ffc17 	ldw	r5,-16(fp)
 4005684:	40058280 	call	4005828 <i2c_write>
 4005688:	1004c03a 	cmpne	r2,r2,zero
 400568c:	1000041e 	bne	r2,zero,40056a0 <I2C_MultipleRead+0xf8>
        bSuccess = FALSE;
 4005690:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
 4005694:	010100f4 	movhi	r4,1027
 4005698:	21372504 	addi	r4,r4,-9068
 400569c:	400629c0 	call	400629c <myprintf>
    }
    
    if (bSuccess){
 40056a0:	e0bff917 	ldw	r2,-28(fp)
 40056a4:	1005003a 	cmpeq	r2,r2,zero
 40056a8:	1000161e 	bne	r2,zero,4005704 <I2C_MultipleRead+0x15c>
        for(i=0;i<len && bSuccess;i++){
 40056ac:	e03ffa15 	stw	zero,-24(fp)
 40056b0:	00000e06 	br	40056ec <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
 40056b4:	e0bfff0b 	ldhu	r2,-4(fp)
 40056b8:	10ffffc4 	addi	r3,r2,-1
 40056bc:	e0bffa17 	ldw	r2,-24(fp)
 40056c0:	188ec03a 	cmpne	r7,r3,r2
 40056c4:	e13ffb17 	ldw	r4,-20(fp)
 40056c8:	e17ffc17 	ldw	r5,-16(fp)
 40056cc:	e1800217 	ldw	r6,8(fp)
 40056d0:	40059940 	call	4005994 <i2c_read>
            pBuf++;
 40056d4:	e0800217 	ldw	r2,8(fp)
 40056d8:	10800044 	addi	r2,r2,1
 40056dc:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 40056e0:	e0bffa17 	ldw	r2,-24(fp)
 40056e4:	10800044 	addi	r2,r2,1
 40056e8:	e0bffa15 	stw	r2,-24(fp)
 40056ec:	e0ffff0b 	ldhu	r3,-4(fp)
 40056f0:	e0bffa17 	ldw	r2,-24(fp)
 40056f4:	10c0030e 	bge	r2,r3,4005704 <I2C_MultipleRead+0x15c>
 40056f8:	e0bff917 	ldw	r2,-28(fp)
 40056fc:	1004c03a 	cmpne	r2,r2,zero
 4005700:	103fec1e 	bne	r2,zero,40056b4 <I2C_MultipleRead+0x10c>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
 4005704:	e13ffb17 	ldw	r4,-20(fp)
 4005708:	e17ffc17 	ldw	r5,-16(fp)
 400570c:	40057b00 	call	40057b0 <i2c_stop>
    
    return bSuccess;    
 4005710:	e0bff917 	ldw	r2,-28(fp)
    
}
 4005714:	e037883a 	mov	sp,fp
 4005718:	dfc00117 	ldw	ra,4(sp)
 400571c:	df000017 	ldw	fp,0(sp)
 4005720:	dec00204 	addi	sp,sp,8
 4005724:	f800283a 	ret

04005728 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 4005728:	defffc04 	addi	sp,sp,-16
 400572c:	dfc00315 	stw	ra,12(sp)
 4005730:	df000215 	stw	fp,8(sp)
 4005734:	df000204 	addi	fp,sp,8
 4005738:	e13ffe15 	stw	r4,-8(fp)
 400573c:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 4005740:	e0bfff17 	ldw	r2,-4(fp)
 4005744:	10800104 	addi	r2,r2,4
 4005748:	1007883a 	mov	r3,r2
 400574c:	00800044 	movi	r2,1
 4005750:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
 4005754:	e0bfff17 	ldw	r2,-4(fp)
 4005758:	1007883a 	mov	r3,r2
 400575c:	00800044 	movi	r2,1
 4005760:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
 4005764:	e0bffe17 	ldw	r2,-8(fp)
 4005768:	1007883a 	mov	r3,r2
 400576c:	00800044 	movi	r2,1
 4005770:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
 4005774:	01000584 	movi	r4,22
 4005778:	400506c0 	call	400506c <my_wait>
     
    SDA_LOW(data_base); // data low
 400577c:	e0bfff17 	ldw	r2,-4(fp)
 4005780:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; 
 4005784:	01000584 	movi	r4,22
 4005788:	400506c0 	call	400506c <my_wait>
    SCL_LOW(clk_base); // clock low
 400578c:	e0bffe17 	ldw	r2,-8(fp)
 4005790:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
 4005794:	01000584 	movi	r4,22
 4005798:	400506c0 	call	400506c <my_wait>
}
 400579c:	e037883a 	mov	sp,fp
 40057a0:	dfc00117 	ldw	ra,4(sp)
 40057a4:	df000017 	ldw	fp,0(sp)
 40057a8:	dec00204 	addi	sp,sp,8
 40057ac:	f800283a 	ret

040057b0 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 40057b0:	defffc04 	addi	sp,sp,-16
 40057b4:	dfc00315 	stw	ra,12(sp)
 40057b8:	df000215 	stw	fp,8(sp)
 40057bc:	df000204 	addi	fp,sp,8
 40057c0:	e13ffe15 	stw	r4,-8(fp)
 40057c4:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 40057c8:	e0bfff17 	ldw	r2,-4(fp)
 40057cc:	10800104 	addi	r2,r2,4
 40057d0:	1007883a 	mov	r3,r2
 40057d4:	00800044 	movi	r2,1
 40057d8:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 40057dc:	e0bfff17 	ldw	r2,-4(fp)
 40057e0:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 40057e4:	e0bffe17 	ldw	r2,-8(fp)
 40057e8:	1007883a 	mov	r3,r2
 40057ec:	00800044 	movi	r2,1
 40057f0:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
 40057f4:	01000584 	movi	r4,22
 40057f8:	400506c0 	call	400506c <my_wait>
    SDA_HIGH(data_base); // data high
 40057fc:	e0bfff17 	ldw	r2,-4(fp)
 4005800:	1007883a 	mov	r3,r2
 4005804:	00800044 	movi	r2,1
 4005808:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
 400580c:	01000584 	movi	r4,22
 4005810:	400506c0 	call	400506c <my_wait>
    

    
}
 4005814:	e037883a 	mov	sp,fp
 4005818:	dfc00117 	ldw	ra,4(sp)
 400581c:	df000017 	ldw	fp,0(sp)
 4005820:	dec00204 	addi	sp,sp,8
 4005824:	f800283a 	ret

04005828 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 4005828:	defff704 	addi	sp,sp,-36
 400582c:	dfc00815 	stw	ra,32(sp)
 4005830:	df000715 	stw	fp,28(sp)
 4005834:	df000704 	addi	fp,sp,28
 4005838:	e13ffd15 	stw	r4,-12(fp)
 400583c:	e17ffe15 	stw	r5,-8(fp)
 4005840:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
 4005844:	00bfe004 	movi	r2,-128
 4005848:	e0bffc05 	stb	r2,-16(fp)
    int i;
    int w;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 400584c:	e0bffe17 	ldw	r2,-8(fp)
 4005850:	10800104 	addi	r2,r2,4
 4005854:	1007883a 	mov	r3,r2
 4005858:	00800044 	movi	r2,1
 400585c:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 4005860:	e03ffa15 	stw	zero,-24(fp)
 4005864:	00001f06 	br	40058e4 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 4005868:	e0bffd17 	ldw	r2,-12(fp)
 400586c:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 4005870:	e0ffff03 	ldbu	r3,-4(fp)
 4005874:	e0bffc03 	ldbu	r2,-16(fp)
 4005878:	1884703a 	and	r2,r3,r2
 400587c:	10803fcc 	andi	r2,r2,255
 4005880:	1005003a 	cmpeq	r2,r2,zero
 4005884:	1000051e 	bne	r2,zero,400589c <i2c_write+0x74>
            SDA_HIGH(data_base);
 4005888:	e0bffe17 	ldw	r2,-8(fp)
 400588c:	1007883a 	mov	r3,r2
 4005890:	00800044 	movi	r2,1
 4005894:	18800035 	stwio	r2,0(r3)
 4005898:	00000206 	br	40058a4 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
 400589c:	e0bffe17 	ldw	r2,-8(fp)
 40058a0:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 40058a4:	e0bffc03 	ldbu	r2,-16(fp)
 40058a8:	1004d07a 	srli	r2,r2,1
 40058ac:	e0bffc05 	stb	r2,-16(fp)
        // clock high
        SCL_HIGH(clk_base);
 40058b0:	e0bffd17 	ldw	r2,-12(fp)
 40058b4:	1007883a 	mov	r3,r2
 40058b8:	00800044 	movi	r2,1
 40058bc:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
 40058c0:	01000584 	movi	r4,22
 40058c4:	400506c0 	call	400506c <my_wait>
        SCL_LOW(clk_base);
 40058c8:	e0bffd17 	ldw	r2,-12(fp)
 40058cc:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
 40058d0:	01000584 	movi	r4,22
 40058d4:	400506c0 	call	400506c <my_wait>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 40058d8:	e0bffa17 	ldw	r2,-24(fp)
 40058dc:	10800044 	addi	r2,r2,1
 40058e0:	e0bffa15 	stw	r2,-24(fp)
 40058e4:	e0bffa17 	ldw	r2,-24(fp)
 40058e8:	10800210 	cmplti	r2,r2,8
 40058ec:	103fde1e 	bne	r2,zero,4005868 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 40058f0:	e0bffe17 	ldw	r2,-8(fp)
 40058f4:	10800104 	addi	r2,r2,4
 40058f8:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
//------------------ wait ack for muti-touch panel
SCL_DELAY;
 40058fc:	01000584 	movi	r4,22
 4005900:	400506c0 	call	400506c <my_wait>
w = 0;
 4005904:	e03ff915 	stw	zero,-28(fp)
while(SDA_READ(data_base) && w++ < 1000000){
 4005908:	e0bffe17 	ldw	r2,-8(fp)
 400590c:	10800037 	ldwio	r2,0(r2)
 4005910:	1005003a 	cmpeq	r2,r2,zero
 4005914:	10000b1e 	bne	r2,zero,4005944 <i2c_write+0x11c>
 4005918:	e0fff917 	ldw	r3,-28(fp)
 400591c:	008003f4 	movhi	r2,15
 4005920:	10908fc4 	addi	r2,r2,16959
 4005924:	10c4403a 	cmpge	r2,r2,r3
 4005928:	1007883a 	mov	r3,r2
 400592c:	e0bff917 	ldw	r2,-28(fp)
 4005930:	10800044 	addi	r2,r2,1
 4005934:	e0bff915 	stw	r2,-28(fp)
 4005938:	18803fcc 	andi	r2,r3,255
 400593c:	1004c03a 	cmpne	r2,r2,zero
 4005940:	103ff11e 	bne	r2,zero,4005908 <i2c_write+0xe0>
}    
    // clock high
    SCL_HIGH(clk_base);  // clock high
 4005944:	e0bffd17 	ldw	r2,-12(fp)
 4005948:	1007883a 	mov	r3,r2
 400594c:	00800044 	movi	r2,1
 4005950:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;  // clock high delay
 4005954:	01000584 	movi	r4,22
 4005958:	400506c0 	call	400506c <my_wait>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 400595c:	e0bffe17 	ldw	r2,-8(fp)
 4005960:	10800037 	ldwio	r2,0(r2)
 4005964:	1005003a 	cmpeq	r2,r2,zero
 4005968:	e0bffb15 	stw	r2,-20(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 400596c:	e0bffd17 	ldw	r2,-12(fp)
 4005970:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 4005974:	01000584 	movi	r4,22
 4005978:	400506c0 	call	400506c <my_wait>
    return bAck;
 400597c:	e0bffb17 	ldw	r2,-20(fp)
}    
 4005980:	e037883a 	mov	sp,fp
 4005984:	dfc00117 	ldw	ra,4(sp)
 4005988:	df000017 	ldw	fp,0(sp)
 400598c:	dec00204 	addi	sp,sp,8
 4005990:	f800283a 	ret

04005994 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 4005994:	defff804 	addi	sp,sp,-32
 4005998:	dfc00715 	stw	ra,28(sp)
 400599c:	df000615 	stw	fp,24(sp)
 40059a0:	df000604 	addi	fp,sp,24
 40059a4:	e13ffc15 	stw	r4,-16(fp)
 40059a8:	e17ffd15 	stw	r5,-12(fp)
 40059ac:	e1bffe15 	stw	r6,-8(fp)
 40059b0:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 40059b4:	e03ffb05 	stb	zero,-20(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 40059b8:	e0bffd17 	ldw	r2,-12(fp)
 40059bc:	10800104 	addi	r2,r2,4
 40059c0:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
 40059c4:	e0bffc17 	ldw	r2,-16(fp)
 40059c8:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 40059cc:	01000584 	movi	r4,22
 40059d0:	400506c0 	call	400506c <my_wait>

    for(i=0;i<8;i++){
 40059d4:	e03ffa15 	stw	zero,-24(fp)
 40059d8:	00001706 	br	4005a38 <i2c_read+0xa4>
        Data <<= 1;
 40059dc:	e0bffb03 	ldbu	r2,-20(fp)
 40059e0:	1085883a 	add	r2,r2,r2
 40059e4:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
 40059e8:	e0bffc17 	ldw	r2,-16(fp)
 40059ec:	1007883a 	mov	r3,r2
 40059f0:	00800044 	movi	r2,1
 40059f4:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
 40059f8:	01000584 	movi	r4,22
 40059fc:	400506c0 	call	400506c <my_wait>
        if (SDA_READ(data_base))  // read data   
 4005a00:	e0bffd17 	ldw	r2,-12(fp)
 4005a04:	10800037 	ldwio	r2,0(r2)
 4005a08:	1005003a 	cmpeq	r2,r2,zero
 4005a0c:	1000031e 	bne	r2,zero,4005a1c <i2c_read+0x88>
            Data |= 0x01;
 4005a10:	e0bffb03 	ldbu	r2,-20(fp)
 4005a14:	10800054 	ori	r2,r2,1
 4005a18:	e0bffb05 	stb	r2,-20(fp)
        SCL_LOW(clk_base);  // clock log  
 4005a1c:	e0bffc17 	ldw	r2,-16(fp)
 4005a20:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
 4005a24:	01000584 	movi	r4,22
 4005a28:	400506c0 	call	400506c <my_wait>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 4005a2c:	e0bffa17 	ldw	r2,-24(fp)
 4005a30:	10800044 	addi	r2,r2,1
 4005a34:	e0bffa15 	stw	r2,-24(fp)
 4005a38:	e0bffa17 	ldw	r2,-24(fp)
 4005a3c:	10800210 	cmplti	r2,r2,8
 4005a40:	103fe61e 	bne	r2,zero,40059dc <i2c_read+0x48>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 4005a44:	e0bffc17 	ldw	r2,-16(fp)
 4005a48:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 4005a4c:	e0bffd17 	ldw	r2,-12(fp)
 4005a50:	10800104 	addi	r2,r2,4
 4005a54:	1007883a 	mov	r3,r2
 4005a58:	00800044 	movi	r2,1
 4005a5c:	18800035 	stwio	r2,0(r3)
    if (bAck)
 4005a60:	e0bfff17 	ldw	r2,-4(fp)
 4005a64:	1005003a 	cmpeq	r2,r2,zero
 4005a68:	1000031e 	bne	r2,zero,4005a78 <i2c_read+0xe4>
        SDA_LOW(data_base);
 4005a6c:	e0bffd17 	ldw	r2,-12(fp)
 4005a70:	10000035 	stwio	zero,0(r2)
 4005a74:	00000406 	br	4005a88 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
 4005a78:	e0bffd17 	ldw	r2,-12(fp)
 4005a7c:	1007883a 	mov	r3,r2
 4005a80:	00800044 	movi	r2,1
 4005a84:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
 4005a88:	e0bffc17 	ldw	r2,-16(fp)
 4005a8c:	1007883a 	mov	r3,r2
 4005a90:	00800044 	movi	r2,1
 4005a94:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high  delay
 4005a98:	01000584 	movi	r4,22
 4005a9c:	400506c0 	call	400506c <my_wait>
    SCL_LOW(clk_base); // clock low
 4005aa0:	e0bffc17 	ldw	r2,-16(fp)
 4005aa4:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 4005aa8:	01000584 	movi	r4,22
 4005aac:	400506c0 	call	400506c <my_wait>
    SDA_LOW(data_base);  // data low
 4005ab0:	e0bffd17 	ldw	r2,-12(fp)
 4005ab4:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
 4005ab8:	01000584 	movi	r4,22
 4005abc:	400506c0 	call	400506c <my_wait>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 4005ac0:	e0fffe17 	ldw	r3,-8(fp)
 4005ac4:	e0bffb03 	ldbu	r2,-20(fp)
 4005ac8:	18800005 	stb	r2,0(r3)
}
 4005acc:	e037883a 	mov	sp,fp
 4005ad0:	dfc00117 	ldw	ra,4(sp)
 4005ad4:	df000017 	ldw	fp,0(sp)
 4005ad8:	dec00204 	addi	sp,sp,8
 4005adc:	f800283a 	ret

04005ae0 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
 4005ae0:	defff704 	addi	sp,sp,-36
 4005ae4:	dfc00815 	stw	ra,32(sp)
 4005ae8:	df000715 	stw	fp,28(sp)
 4005aec:	df000704 	addi	fp,sp,28
 4005af0:	e13ffb15 	stw	r4,-20(fp)
 4005af4:	e17ffc15 	stw	r5,-16(fp)
 4005af8:	e0800217 	ldw	r2,8(fp)
 4005afc:	e1bffd05 	stb	r6,-12(fp)
 4005b00:	e1fffe0d 	sth	r7,-8(fp)
 4005b04:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 4005b08:	00800044 	movi	r2,1
 4005b0c:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4005b10:	e0bffe0b 	ldhu	r2,-8(fp)
 4005b14:	1004d23a 	srli	r2,r2,8
 4005b18:	1007883a 	mov	r3,r2
 4005b1c:	00bfffc4 	movi	r2,-1
 4005b20:	1884703a 	and	r2,r3,r2
 4005b24:	e0bff945 	stb	r2,-27(fp)
    AddrLow  = ControlAddr & 0xFF; 
 4005b28:	e0bffe0b 	ldhu	r2,-8(fp)
 4005b2c:	1007883a 	mov	r3,r2
 4005b30:	00bfffc4 	movi	r2,-1
 4005b34:	1884703a 	and	r2,r3,r2
 4005b38:	e0bff905 	stb	r2,-28(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 4005b3c:	e13ffb17 	ldw	r4,-20(fp)
 4005b40:	e17ffc17 	ldw	r5,-16(fp)
 4005b44:	40057280 	call	4005728 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4005b48:	e0bffd03 	ldbu	r2,-12(fp)
 4005b4c:	11803fcc 	andi	r6,r2,255
 4005b50:	e13ffb17 	ldw	r4,-20(fp)
 4005b54:	e17ffc17 	ldw	r5,-16(fp)
 4005b58:	40058280 	call	4005828 <i2c_write>
 4005b5c:	1004c03a 	cmpne	r2,r2,zero
 4005b60:	1000041e 	bne	r2,zero,4005b74 <I2CL_Write+0x94>
        bSuccess = FALSE;
 4005b64:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4005b68:	010100f4 	movhi	r4,1027
 4005b6c:	2136d204 	addi	r4,r4,-9400
 4005b70:	400629c0 	call	400629c <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4005b74:	e0bffa17 	ldw	r2,-24(fp)
 4005b78:	1005003a 	cmpeq	r2,r2,zero
 4005b7c:	10000a1e 	bne	r2,zero,4005ba8 <I2CL_Write+0xc8>
 4005b80:	e1bff943 	ldbu	r6,-27(fp)
 4005b84:	e13ffb17 	ldw	r4,-20(fp)
 4005b88:	e17ffc17 	ldw	r5,-16(fp)
 4005b8c:	40058280 	call	4005828 <i2c_write>
 4005b90:	1004c03a 	cmpne	r2,r2,zero
 4005b94:	1000041e 	bne	r2,zero,4005ba8 <I2CL_Write+0xc8>
        bSuccess = FALSE;
 4005b98:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4005b9c:	010100f4 	movhi	r4,1027
 4005ba0:	21373004 	addi	r4,r4,-9024
 4005ba4:	400629c0 	call	400629c <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4005ba8:	e0bffa17 	ldw	r2,-24(fp)
 4005bac:	1005003a 	cmpeq	r2,r2,zero
 4005bb0:	10000a1e 	bne	r2,zero,4005bdc <I2CL_Write+0xfc>
 4005bb4:	e1bff903 	ldbu	r6,-28(fp)
 4005bb8:	e13ffb17 	ldw	r4,-20(fp)
 4005bbc:	e17ffc17 	ldw	r5,-16(fp)
 4005bc0:	40058280 	call	4005828 <i2c_write>
 4005bc4:	1004c03a 	cmpne	r2,r2,zero
 4005bc8:	1000041e 	bne	r2,zero,4005bdc <I2CL_Write+0xfc>
        bSuccess = FALSE;
 4005bcc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4005bd0:	010100f4 	movhi	r4,1027
 4005bd4:	21373a04 	addi	r4,r4,-8984
 4005bd8:	400629c0 	call	400629c <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 4005bdc:	e0bffa17 	ldw	r2,-24(fp)
 4005be0:	1005003a 	cmpeq	r2,r2,zero
 4005be4:	10000a1e 	bne	r2,zero,4005c10 <I2CL_Write+0x130>
 4005be8:	e1bfff03 	ldbu	r6,-4(fp)
 4005bec:	e13ffb17 	ldw	r4,-20(fp)
 4005bf0:	e17ffc17 	ldw	r5,-16(fp)
 4005bf4:	40058280 	call	4005828 <i2c_write>
 4005bf8:	1004c03a 	cmpne	r2,r2,zero
 4005bfc:	1000041e 	bne	r2,zero,4005c10 <I2CL_Write+0x130>
        bSuccess = FALSE;
 4005c00:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 4005c04:	010100f4 	movhi	r4,1027
 4005c08:	2136e304 	addi	r4,r4,-9332
 4005c0c:	400629c0 	call	400629c <myprintf>
    }
    i2c_stop(clk_base, data_base);
 4005c10:	e13ffb17 	ldw	r4,-20(fp)
 4005c14:	e17ffc17 	ldw	r5,-16(fp)
 4005c18:	40057b00 	call	40057b0 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 4005c1c:	0106d604 	movi	r4,7000
 4005c20:	4011df40 	call	4011df4 <usleep>
    
    return bSuccess;
 4005c24:	e0bffa17 	ldw	r2,-24(fp)
    
}
 4005c28:	e037883a 	mov	sp,fp
 4005c2c:	dfc00117 	ldw	ra,4(sp)
 4005c30:	df000017 	ldw	fp,0(sp)
 4005c34:	dec00204 	addi	sp,sp,8
 4005c38:	f800283a 	ret

04005c3c <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
 4005c3c:	defff804 	addi	sp,sp,-32
 4005c40:	dfc00715 	stw	ra,28(sp)
 4005c44:	df000615 	stw	fp,24(sp)
 4005c48:	df000604 	addi	fp,sp,24
 4005c4c:	e13ffc15 	stw	r4,-16(fp)
 4005c50:	e17ffd15 	stw	r5,-12(fp)
 4005c54:	e1bffe05 	stb	r6,-8(fp)
 4005c58:	e1ffff0d 	sth	r7,-4(fp)
    bool bSuccess = TRUE;
 4005c5c:	00800044 	movi	r2,1
 4005c60:	e0bffb15 	stw	r2,-20(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4005c64:	e0bfff0b 	ldhu	r2,-4(fp)
 4005c68:	1004d23a 	srli	r2,r2,8
 4005c6c:	1007883a 	mov	r3,r2
 4005c70:	00bfffc4 	movi	r2,-1
 4005c74:	1884703a 	and	r2,r3,r2
 4005c78:	e0bffa45 	stb	r2,-23(fp)
    AddrLow  = ControlAddr & 0xFF; 
 4005c7c:	e0bfff0b 	ldhu	r2,-4(fp)
 4005c80:	1007883a 	mov	r3,r2
 4005c84:	00bfffc4 	movi	r2,-1
 4005c88:	1884703a 	and	r2,r3,r2
 4005c8c:	e0bffa05 	stb	r2,-24(fp)

    i2c_start(clk_base, data_base);
 4005c90:	e13ffc17 	ldw	r4,-16(fp)
 4005c94:	e17ffd17 	ldw	r5,-12(fp)
 4005c98:	40057280 	call	4005728 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4005c9c:	e0bffe03 	ldbu	r2,-8(fp)
 4005ca0:	11803fcc 	andi	r6,r2,255
 4005ca4:	e13ffc17 	ldw	r4,-16(fp)
 4005ca8:	e17ffd17 	ldw	r5,-12(fp)
 4005cac:	40058280 	call	4005828 <i2c_write>
 4005cb0:	1004c03a 	cmpne	r2,r2,zero
 4005cb4:	1000041e 	bne	r2,zero,4005cc8 <I2CL_Read+0x8c>
        bSuccess = FALSE;
 4005cb8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4005cbc:	010100f4 	movhi	r4,1027
 4005cc0:	2136d204 	addi	r4,r4,-9400
 4005cc4:	400629c0 	call	400629c <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4005cc8:	e0bffb17 	ldw	r2,-20(fp)
 4005ccc:	1005003a 	cmpeq	r2,r2,zero
 4005cd0:	10000a1e 	bne	r2,zero,4005cfc <I2CL_Read+0xc0>
 4005cd4:	e1bffa43 	ldbu	r6,-23(fp)
 4005cd8:	e13ffc17 	ldw	r4,-16(fp)
 4005cdc:	e17ffd17 	ldw	r5,-12(fp)
 4005ce0:	40058280 	call	4005828 <i2c_write>
 4005ce4:	1004c03a 	cmpne	r2,r2,zero
 4005ce8:	1000041e 	bne	r2,zero,4005cfc <I2CL_Read+0xc0>
        bSuccess = FALSE;
 4005cec:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4005cf0:	010100f4 	movhi	r4,1027
 4005cf4:	21373004 	addi	r4,r4,-9024
 4005cf8:	400629c0 	call	400629c <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4005cfc:	e0bffb17 	ldw	r2,-20(fp)
 4005d00:	1005003a 	cmpeq	r2,r2,zero
 4005d04:	10000a1e 	bne	r2,zero,4005d30 <I2CL_Read+0xf4>
 4005d08:	e1bffa03 	ldbu	r6,-24(fp)
 4005d0c:	e13ffc17 	ldw	r4,-16(fp)
 4005d10:	e17ffd17 	ldw	r5,-12(fp)
 4005d14:	40058280 	call	4005828 <i2c_write>
 4005d18:	1004c03a 	cmpne	r2,r2,zero
 4005d1c:	1000041e 	bne	r2,zero,4005d30 <I2CL_Read+0xf4>
        bSuccess = FALSE;
 4005d20:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4005d24:	010100f4 	movhi	r4,1027
 4005d28:	21373a04 	addi	r4,r4,-8984
 4005d2c:	400629c0 	call	400629c <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
 4005d30:	e13ffc17 	ldw	r4,-16(fp)
 4005d34:	e17ffd17 	ldw	r5,-12(fp)
 4005d38:	40057280 	call	4005728 <i2c_start>
    DeviceAddr |= 1; // Read
 4005d3c:	e0bffe03 	ldbu	r2,-8(fp)
 4005d40:	10800054 	ori	r2,r2,1
 4005d44:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4005d48:	e0bffb17 	ldw	r2,-20(fp)
 4005d4c:	1005003a 	cmpeq	r2,r2,zero
 4005d50:	10000b1e 	bne	r2,zero,4005d80 <I2CL_Read+0x144>
 4005d54:	e0bffe03 	ldbu	r2,-8(fp)
 4005d58:	11803fcc 	andi	r6,r2,255
 4005d5c:	e13ffc17 	ldw	r4,-16(fp)
 4005d60:	e17ffd17 	ldw	r5,-12(fp)
 4005d64:	40058280 	call	4005828 <i2c_write>
 4005d68:	1004c03a 	cmpne	r2,r2,zero
 4005d6c:	1000041e 	bne	r2,zero,4005d80 <I2CL_Read+0x144>
        bSuccess = FALSE;
 4005d70:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
 4005d74:	010100f4 	movhi	r4,1027
 4005d78:	21370604 	addi	r4,r4,-9192
 4005d7c:	400629c0 	call	400629c <myprintf>
    }
    
    if (bSuccess){
 4005d80:	e0bffb17 	ldw	r2,-20(fp)
 4005d84:	1005003a 	cmpeq	r2,r2,zero
 4005d88:	1000051e 	bne	r2,zero,4005da0 <I2CL_Read+0x164>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 4005d8c:	e13ffc17 	ldw	r4,-16(fp)
 4005d90:	e17ffd17 	ldw	r5,-12(fp)
 4005d94:	e1800217 	ldw	r6,8(fp)
 4005d98:	000f883a 	mov	r7,zero
 4005d9c:	40059940 	call	4005994 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 4005da0:	e13ffc17 	ldw	r4,-16(fp)
 4005da4:	e17ffd17 	ldw	r5,-12(fp)
 4005da8:	40057b00 	call	40057b0 <i2c_stop>
    
    return bSuccess;    
 4005dac:	e0bffb17 	ldw	r2,-20(fp)
}
 4005db0:	e037883a 	mov	sp,fp
 4005db4:	dfc00117 	ldw	ra,4(sp)
 4005db8:	df000017 	ldw	fp,0(sp)
 4005dbc:	dec00204 	addi	sp,sp,8
 4005dc0:	f800283a 	ret

04005dc4 <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 4005dc4:	defff604 	addi	sp,sp,-40
 4005dc8:	dfc00915 	stw	ra,36(sp)
 4005dcc:	df000815 	stw	fp,32(sp)
 4005dd0:	df000804 	addi	fp,sp,32
 4005dd4:	e13ffb15 	stw	r4,-20(fp)
 4005dd8:	e17ffc15 	stw	r5,-16(fp)
 4005ddc:	e0800317 	ldw	r2,12(fp)
 4005de0:	e1bffd05 	stb	r6,-12(fp)
 4005de4:	e1fffe0d 	sth	r7,-8(fp)
 4005de8:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 4005dec:	00800044 	movi	r2,1
 4005df0:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4005df4:	e0bffe0b 	ldhu	r2,-8(fp)
 4005df8:	1004d23a 	srli	r2,r2,8
 4005dfc:	1007883a 	mov	r3,r2
 4005e00:	00bfffc4 	movi	r2,-1
 4005e04:	1884703a 	and	r2,r3,r2
 4005e08:	e0bff845 	stb	r2,-31(fp)
    AddrLow  = ControlAddr & 0xFF;     
 4005e0c:	e0bffe0b 	ldhu	r2,-8(fp)
 4005e10:	1007883a 	mov	r3,r2
 4005e14:	00bfffc4 	movi	r2,-1
 4005e18:	1884703a 	and	r2,r3,r2
 4005e1c:	e0bff805 	stb	r2,-32(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 4005e20:	e13ffb17 	ldw	r4,-20(fp)
 4005e24:	e17ffc17 	ldw	r5,-16(fp)
 4005e28:	40057280 	call	4005728 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 4005e2c:	e0bffd03 	ldbu	r2,-12(fp)
 4005e30:	11803fcc 	andi	r6,r2,255
 4005e34:	e13ffb17 	ldw	r4,-20(fp)
 4005e38:	e17ffc17 	ldw	r5,-16(fp)
 4005e3c:	40058280 	call	4005828 <i2c_write>
 4005e40:	1004c03a 	cmpne	r2,r2,zero
 4005e44:	1000041e 	bne	r2,zero,4005e58 <I2CL_MultipleRead+0x94>
        bSuccess = FALSE;
 4005e48:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 4005e4c:	010100f4 	movhi	r4,1027
 4005e50:	2136d204 	addi	r4,r4,-9400
 4005e54:	400629c0 	call	400629c <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4005e58:	e0bff917 	ldw	r2,-28(fp)
 4005e5c:	1005003a 	cmpeq	r2,r2,zero
 4005e60:	10000a1e 	bne	r2,zero,4005e8c <I2CL_MultipleRead+0xc8>
 4005e64:	e1bff843 	ldbu	r6,-31(fp)
 4005e68:	e13ffb17 	ldw	r4,-20(fp)
 4005e6c:	e17ffc17 	ldw	r5,-16(fp)
 4005e70:	40058280 	call	4005828 <i2c_write>
 4005e74:	1004c03a 	cmpne	r2,r2,zero
 4005e78:	1000041e 	bne	r2,zero,4005e8c <I2CL_MultipleRead+0xc8>
        bSuccess = FALSE;
 4005e7c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4005e80:	010100f4 	movhi	r4,1027
 4005e84:	21373004 	addi	r4,r4,-9024
 4005e88:	400629c0 	call	400629c <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 4005e8c:	e0bff917 	ldw	r2,-28(fp)
 4005e90:	1005003a 	cmpeq	r2,r2,zero
 4005e94:	10000a1e 	bne	r2,zero,4005ec0 <I2CL_MultipleRead+0xfc>
 4005e98:	e1bff803 	ldbu	r6,-32(fp)
 4005e9c:	e13ffb17 	ldw	r4,-20(fp)
 4005ea0:	e17ffc17 	ldw	r5,-16(fp)
 4005ea4:	40058280 	call	4005828 <i2c_write>
 4005ea8:	1004c03a 	cmpne	r2,r2,zero
 4005eac:	1000041e 	bne	r2,zero,4005ec0 <I2CL_MultipleRead+0xfc>
        bSuccess = FALSE;
 4005eb0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4005eb4:	010100f4 	movhi	r4,1027
 4005eb8:	21373a04 	addi	r4,r4,-8984
 4005ebc:	400629c0 	call	400629c <myprintf>
    }    
    if (bSuccess)        
 4005ec0:	e0bff917 	ldw	r2,-28(fp)
 4005ec4:	1005003a 	cmpeq	r2,r2,zero
 4005ec8:	1000031e 	bne	r2,zero,4005ed8 <I2CL_MultipleRead+0x114>
        i2c_start(clk_base, data_base);  // restart
 4005ecc:	e13ffb17 	ldw	r4,-20(fp)
 4005ed0:	e17ffc17 	ldw	r5,-16(fp)
 4005ed4:	40057280 	call	4005728 <i2c_start>
    DeviceAddr |= 1; // Read
 4005ed8:	e0bffd03 	ldbu	r2,-12(fp)
 4005edc:	10800054 	ori	r2,r2,1
 4005ee0:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 4005ee4:	e0bff917 	ldw	r2,-28(fp)
 4005ee8:	1005003a 	cmpeq	r2,r2,zero
 4005eec:	10000b1e 	bne	r2,zero,4005f1c <I2CL_MultipleRead+0x158>
 4005ef0:	e0bffd03 	ldbu	r2,-12(fp)
 4005ef4:	11803fcc 	andi	r6,r2,255
 4005ef8:	e13ffb17 	ldw	r4,-20(fp)
 4005efc:	e17ffc17 	ldw	r5,-16(fp)
 4005f00:	40058280 	call	4005828 <i2c_write>
 4005f04:	1004c03a 	cmpne	r2,r2,zero
 4005f08:	1000041e 	bne	r2,zero,4005f1c <I2CL_MultipleRead+0x158>
        bSuccess = FALSE;
 4005f0c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
 4005f10:	010100f4 	movhi	r4,1027
 4005f14:	21374404 	addi	r4,r4,-8944
 4005f18:	400629c0 	call	400629c <myprintf>
    }
    
    if (bSuccess){
 4005f1c:	e0bff917 	ldw	r2,-28(fp)
 4005f20:	1005003a 	cmpeq	r2,r2,zero
 4005f24:	1000161e 	bne	r2,zero,4005f80 <I2CL_MultipleRead+0x1bc>
        for(i=0;i<len && bSuccess;i++){
 4005f28:	e03ffa15 	stw	zero,-24(fp)
 4005f2c:	00000e06 	br	4005f68 <I2CL_MultipleRead+0x1a4>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 4005f30:	e0bffa17 	ldw	r2,-24(fp)
 4005f34:	1007883a 	mov	r3,r2
 4005f38:	e0800217 	ldw	r2,8(fp)
 4005f3c:	188d883a 	add	r6,r3,r2
 4005f40:	e0bfff0b 	ldhu	r2,-4(fp)
 4005f44:	10ffffc4 	addi	r3,r2,-1
 4005f48:	e0bffa17 	ldw	r2,-24(fp)
 4005f4c:	188ec03a 	cmpne	r7,r3,r2
 4005f50:	e13ffb17 	ldw	r4,-20(fp)
 4005f54:	e17ffc17 	ldw	r5,-16(fp)
 4005f58:	40059940 	call	4005994 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 4005f5c:	e0bffa17 	ldw	r2,-24(fp)
 4005f60:	10800044 	addi	r2,r2,1
 4005f64:	e0bffa15 	stw	r2,-24(fp)
 4005f68:	e0ffff0b 	ldhu	r3,-4(fp)
 4005f6c:	e0bffa17 	ldw	r2,-24(fp)
 4005f70:	10c0030e 	bge	r2,r3,4005f80 <I2CL_MultipleRead+0x1bc>
 4005f74:	e0bff917 	ldw	r2,-28(fp)
 4005f78:	1004c03a 	cmpne	r2,r2,zero
 4005f7c:	103fec1e 	bne	r2,zero,4005f30 <I2CL_MultipleRead+0x16c>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 4005f80:	e13ffb17 	ldw	r4,-20(fp)
 4005f84:	e17ffc17 	ldw	r5,-16(fp)
 4005f88:	40057b00 	call	40057b0 <i2c_stop>
    
    return bSuccess;    
 4005f8c:	e0bff917 	ldw	r2,-28(fp)
    
} 
 4005f90:	e037883a 	mov	sp,fp
 4005f94:	dfc00117 	ldw	ra,4(sp)
 4005f98:	df000017 	ldw	fp,0(sp)
 4005f9c:	dec00204 	addi	sp,sp,8
 4005fa0:	f800283a 	ret

04005fa4 <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 4005fa4:	defff604 	addi	sp,sp,-40
 4005fa8:	dfc00915 	stw	ra,36(sp)
 4005fac:	df000815 	stw	fp,32(sp)
 4005fb0:	df000804 	addi	fp,sp,32
 4005fb4:	e13ffb15 	stw	r4,-20(fp)
 4005fb8:	e17ffc15 	stw	r5,-16(fp)
 4005fbc:	e0800317 	ldw	r2,12(fp)
 4005fc0:	e1bffd05 	stb	r6,-12(fp)
 4005fc4:	e1fffe0d 	sth	r7,-8(fp)
 4005fc8:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 4005fcc:	00800044 	movi	r2,1
 4005fd0:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 4005fd4:	e0bffe0b 	ldhu	r2,-8(fp)
 4005fd8:	1004d23a 	srli	r2,r2,8
 4005fdc:	1007883a 	mov	r3,r2
 4005fe0:	00bfffc4 	movi	r2,-1
 4005fe4:	1884703a 	and	r2,r3,r2
 4005fe8:	e0bff945 	stb	r2,-27(fp)
    AddrLow  = ControlAddr & 0xFF; 
 4005fec:	e0bffe0b 	ldhu	r2,-8(fp)
 4005ff0:	1007883a 	mov	r3,r2
 4005ff4:	00bfffc4 	movi	r2,-1
 4005ff8:	1884703a 	and	r2,r3,r2
 4005ffc:	e0bff905 	stb	r2,-28(fp)
    

    i2c_start(clk_base, data_base);
 4006000:	e13ffb17 	ldw	r4,-20(fp)
 4006004:	e17ffc17 	ldw	r5,-16(fp)
 4006008:	40057280 	call	4005728 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 400600c:	e0bffd03 	ldbu	r2,-12(fp)
 4006010:	11803fcc 	andi	r6,r2,255
 4006014:	e13ffb17 	ldw	r4,-20(fp)
 4006018:	e17ffc17 	ldw	r5,-16(fp)
 400601c:	40058280 	call	4005828 <i2c_write>
 4006020:	1004c03a 	cmpne	r2,r2,zero
 4006024:	1000041e 	bne	r2,zero,4006038 <I2CL_MultipleWrite+0x94>
        bSuccess = FALSE;
 4006028:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
 400602c:	010100f4 	movhi	r4,1027
 4006030:	2136d204 	addi	r4,r4,-9400
 4006034:	400629c0 	call	400629c <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 4006038:	e0bffa17 	ldw	r2,-24(fp)
 400603c:	1005003a 	cmpeq	r2,r2,zero
 4006040:	10000a1e 	bne	r2,zero,400606c <I2CL_MultipleWrite+0xc8>
 4006044:	e1bff943 	ldbu	r6,-27(fp)
 4006048:	e13ffb17 	ldw	r4,-20(fp)
 400604c:	e17ffc17 	ldw	r5,-16(fp)
 4006050:	40058280 	call	4005828 <i2c_write>
 4006054:	1004c03a 	cmpne	r2,r2,zero
 4006058:	1000041e 	bne	r2,zero,400606c <I2CL_MultipleWrite+0xc8>
        bSuccess = FALSE;
 400605c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
 4006060:	010100f4 	movhi	r4,1027
 4006064:	21373004 	addi	r4,r4,-9024
 4006068:	400629c0 	call	400629c <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 400606c:	e0bffa17 	ldw	r2,-24(fp)
 4006070:	1005003a 	cmpeq	r2,r2,zero
 4006074:	10000a1e 	bne	r2,zero,40060a0 <I2CL_MultipleWrite+0xfc>
 4006078:	e1bff903 	ldbu	r6,-28(fp)
 400607c:	e13ffb17 	ldw	r4,-20(fp)
 4006080:	e17ffc17 	ldw	r5,-16(fp)
 4006084:	40058280 	call	4005828 <i2c_write>
 4006088:	1004c03a 	cmpne	r2,r2,zero
 400608c:	1000041e 	bne	r2,zero,40060a0 <I2CL_MultipleWrite+0xfc>
        bSuccess = FALSE;
 4006090:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
 4006094:	010100f4 	movhi	r4,1027
 4006098:	21373a04 	addi	r4,r4,-8984
 400609c:	400629c0 	call	400629c <myprintf>
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
 40060a0:	e0bffa17 	ldw	r2,-24(fp)
 40060a4:	1005003a 	cmpeq	r2,r2,zero
 40060a8:	10001b1e 	bne	r2,zero,4006118 <I2CL_MultipleWrite+0x174>
        for(i=0;i<len && bSuccess;i++){
 40060ac:	e03ff815 	stw	zero,-32(fp)
 40060b0:	00000d06 	br	40060e8 <I2CL_MultipleWrite+0x144>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
 40060b4:	e0bff817 	ldw	r2,-32(fp)
 40060b8:	1007883a 	mov	r3,r2
 40060bc:	e0800217 	ldw	r2,8(fp)
 40060c0:	1885883a 	add	r2,r3,r2
 40060c4:	10800003 	ldbu	r2,0(r2)
 40060c8:	11803fcc 	andi	r6,r2,255
 40060cc:	e13ffb17 	ldw	r4,-20(fp)
 40060d0:	e17ffc17 	ldw	r5,-16(fp)
 40060d4:	40058280 	call	4005828 <i2c_write>
 40060d8:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
 40060dc:	e0bff817 	ldw	r2,-32(fp)
 40060e0:	10800044 	addi	r2,r2,1
 40060e4:	e0bff815 	stw	r2,-32(fp)
 40060e8:	e0ffff0b 	ldhu	r3,-4(fp)
 40060ec:	e0bff817 	ldw	r2,-32(fp)
 40060f0:	10c0030e 	bge	r2,r3,4006100 <I2CL_MultipleWrite+0x15c>
 40060f4:	e0bffa17 	ldw	r2,-24(fp)
 40060f8:	1004c03a 	cmpne	r2,r2,zero
 40060fc:	103fed1e 	bne	r2,zero,40060b4 <I2CL_MultipleWrite+0x110>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
 4006100:	e0bffa17 	ldw	r2,-24(fp)
 4006104:	1004c03a 	cmpne	r2,r2,zero
 4006108:	1000031e 	bne	r2,zero,4006118 <I2CL_MultipleWrite+0x174>
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
 400610c:	010100f4 	movhi	r4,1027
 4006110:	2136e304 	addi	r4,r4,-9332
 4006114:	400629c0 	call	400629c <myprintf>
    }
    i2c_stop(clk_base, data_base);
 4006118:	e13ffb17 	ldw	r4,-20(fp)
 400611c:	e17ffc17 	ldw	r5,-16(fp)
 4006120:	40057b00 	call	40057b0 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 4006124:	0106d604 	movi	r4,7000
 4006128:	4011df40 	call	4011df4 <usleep>
    
    return bSuccess;
 400612c:	e0bffa17 	ldw	r2,-24(fp)
    
}
 4006130:	e037883a 	mov	sp,fp
 4006134:	dfc00117 	ldw	ra,4(sp)
 4006138:	df000017 	ldw	fp,0(sp)
 400613c:	dec00204 	addi	sp,sp,8
 4006140:	f800283a 	ret

04006144 <I2CL_Read16>:
 


bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
 4006144:	defff604 	addi	sp,sp,-40
 4006148:	dfc00915 	stw	ra,36(sp)
 400614c:	df000815 	stw	fp,32(sp)
 4006150:	df000804 	addi	fp,sp,32
 4006154:	e13ffc15 	stw	r4,-16(fp)
 4006158:	e17ffd15 	stw	r5,-12(fp)
 400615c:	e1bffe05 	stb	r6,-8(fp)
 4006160:	e1ffff0d 	sth	r7,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 4006164:	e1bffe07 	ldb	r6,-8(fp)
 4006168:	e1ffff0b 	ldhu	r7,-4(fp)
 400616c:	e0bffb04 	addi	r2,fp,-20
 4006170:	d8800015 	stw	r2,0(sp)
 4006174:	00800084 	movi	r2,2
 4006178:	d8800115 	stw	r2,4(sp)
 400617c:	e13ffc17 	ldw	r4,-16(fp)
 4006180:	e17ffd17 	ldw	r5,-12(fp)
 4006184:	4005dc40 	call	4005dc4 <I2CL_MultipleRead>
 4006188:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
 400618c:	e0bffa17 	ldw	r2,-24(fp)
 4006190:	1005003a 	cmpeq	r2,r2,zero
 4006194:	10000a1e 	bne	r2,zero,40061c0 <I2CL_Read16+0x7c>
        *pControlData = (szData[0] << 8 ) | szData[1];
 4006198:	e0bffb03 	ldbu	r2,-20(fp)
 400619c:	10803fcc 	andi	r2,r2,255
 40061a0:	1004923a 	slli	r2,r2,8
 40061a4:	1007883a 	mov	r3,r2
 40061a8:	e0bffb43 	ldbu	r2,-19(fp)
 40061ac:	10803fcc 	andi	r2,r2,255
 40061b0:	1884b03a 	or	r2,r3,r2
 40061b4:	1007883a 	mov	r3,r2
 40061b8:	e0800217 	ldw	r2,8(fp)
 40061bc:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
 40061c0:	e0bffa17 	ldw	r2,-24(fp)
}
 40061c4:	e037883a 	mov	sp,fp
 40061c8:	dfc00117 	ldw	ra,4(sp)
 40061cc:	df000017 	ldw	fp,0(sp)
 40061d0:	dec00204 	addi	sp,sp,8
 40061d4:	f800283a 	ret

040061d8 <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
 40061d8:	defff504 	addi	sp,sp,-44
 40061dc:	dfc00a15 	stw	ra,40(sp)
 40061e0:	df000915 	stw	fp,36(sp)
 40061e4:	df000904 	addi	fp,sp,36
 40061e8:	e13ffb15 	stw	r4,-20(fp)
 40061ec:	e17ffc15 	stw	r5,-16(fp)
 40061f0:	e0800217 	ldw	r2,8(fp)
 40061f4:	e1bffd05 	stb	r6,-12(fp)
 40061f8:	e1fffe0d 	sth	r7,-8(fp)
 40061fc:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
 4006200:	e0bfff0b 	ldhu	r2,-4(fp)
 4006204:	1004d23a 	srli	r2,r2,8
 4006208:	1007883a 	mov	r3,r2
 400620c:	00bfffc4 	movi	r2,-1
 4006210:	1884703a 	and	r2,r3,r2
 4006214:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
 4006218:	e0bfff0b 	ldhu	r2,-4(fp)
 400621c:	1007883a 	mov	r3,r2
 4006220:	00bfffc4 	movi	r2,-1
 4006224:	1884703a 	and	r2,r3,r2
 4006228:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 400622c:	e1bffd07 	ldb	r6,-12(fp)
 4006230:	e1fffe0b 	ldhu	r7,-8(fp)
 4006234:	e0bffa04 	addi	r2,fp,-24
 4006238:	d8800015 	stw	r2,0(sp)
 400623c:	00800084 	movi	r2,2
 4006240:	d8800115 	stw	r2,4(sp)
 4006244:	e13ffb17 	ldw	r4,-20(fp)
 4006248:	e17ffc17 	ldw	r5,-16(fp)
 400624c:	4005fa40 	call	4005fa4 <I2CL_MultipleWrite>
 4006250:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
 4006254:	e0bff917 	ldw	r2,-28(fp)
}
 4006258:	e037883a 	mov	sp,fp
 400625c:	dfc00117 	ldw	ra,4(sp)
 4006260:	df000017 	ldw	fp,0(sp)
 4006264:	dec00204 	addi	sp,sp,8
 4006268:	f800283a 	ret

0400626c <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
 400626c:	defffd04 	addi	sp,sp,-12
 4006270:	dfc00215 	stw	ra,8(sp)
 4006274:	df000115 	stw	fp,4(sp)
 4006278:	df000104 	addi	fp,sp,4
 400627c:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
 4006280:	e13fff17 	ldw	r4,-4(fp)
 4006284:	40092d00 	call	40092d0 <printf>
}
 4006288:	e037883a 	mov	sp,fp
 400628c:	dfc00117 	ldw	ra,4(sp)
 4006290:	df000017 	ldw	fp,0(sp)
 4006294:	dec00204 	addi	sp,sp,8
 4006298:	f800283a 	ret

0400629c <myprintf>:





int myprintf(char *format, ...){
 400629c:	deff7804 	addi	sp,sp,-544
 40062a0:	dfc08415 	stw	ra,528(sp)
 40062a4:	df008315 	stw	fp,524(sp)
 40062a8:	df008304 	addi	fp,sp,524
 40062ac:	e1400215 	stw	r5,8(fp)
 40062b0:	e1800315 	stw	r6,12(fp)
 40062b4:	e1c00415 	stw	r7,16(fp)
 40062b8:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
 40062bc:	e0800204 	addi	r2,fp,8
 40062c0:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
 40062c4:	e1fffe17 	ldw	r7,-8(fp)
 40062c8:	e13f7e04 	addi	r4,fp,-520
 40062cc:	01408004 	movi	r5,512
 40062d0:	e1bfff17 	ldw	r6,-4(fp)
 40062d4:	400b61c0 	call	400b61c <vsnprintf>
 40062d8:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
 40062dc:	e13f7e04 	addi	r4,fp,-520
 40062e0:	400626c0 	call	400626c <debug_output>

    return rc;    
 40062e4:	e0bf7d17 	ldw	r2,-524(fp)
}
 40062e8:	e037883a 	mov	sp,fp
 40062ec:	dfc00117 	ldw	ra,4(sp)
 40062f0:	df000017 	ldw	fp,0(sp)
 40062f4:	dec00504 	addi	sp,sp,20
 40062f8:	f800283a 	ret

040062fc <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
 40062fc:	defff704 	addi	sp,sp,-36
 4006300:	dfc00815 	stw	ra,32(sp)
 4006304:	df000715 	stw	fp,28(sp)
 4006308:	df000704 	addi	fp,sp,28
 400630c:	e13ffe15 	stw	r4,-8(fp)
 4006310:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 4006314:	e03ff915 	stw	zero,-28(fp)
 4006318:	00000f06 	br	4006358 <myprintf_hexarray+0x5c>
        sprintf(szText, "[%02X]", *(pHex+i));
 400631c:	e13ffa04 	addi	r4,fp,-24
 4006320:	e0bff917 	ldw	r2,-28(fp)
 4006324:	1007883a 	mov	r3,r2
 4006328:	e0bffe17 	ldw	r2,-8(fp)
 400632c:	1885883a 	add	r2,r3,r2
 4006330:	10800003 	ldbu	r2,0(r2)
 4006334:	11803fcc 	andi	r6,r2,255
 4006338:	014100f4 	movhi	r5,1027
 400633c:	29774f04 	addi	r5,r5,-8900
 4006340:	400946c0 	call	400946c <sprintf>
        DEBUG((szText));
 4006344:	e13ffa04 	addi	r4,fp,-24
 4006348:	400629c0 	call	400629c <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
 400634c:	e0bff917 	ldw	r2,-28(fp)
 4006350:	10800044 	addi	r2,r2,1
 4006354:	e0bff915 	stw	r2,-28(fp)
 4006358:	e0fff917 	ldw	r3,-28(fp)
 400635c:	e0bfff17 	ldw	r2,-4(fp)
 4006360:	18bfee16 	blt	r3,r2,400631c <myprintf_hexarray+0x20>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
 4006364:	e0bfff17 	ldw	r2,-4(fp)
}
 4006368:	e037883a 	mov	sp,fp
 400636c:	dfc00117 	ldw	ra,4(sp)
 4006370:	df000017 	ldw	fp,0(sp)
 4006374:	dec00204 	addi	sp,sp,8
 4006378:	f800283a 	ret

0400637c <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
 400637c:	defff704 	addi	sp,sp,-36
 4006380:	dfc00815 	stw	ra,32(sp)
 4006384:	df000715 	stw	fp,28(sp)
 4006388:	df000704 	addi	fp,sp,28
 400638c:	e13ffe15 	stw	r4,-8(fp)
 4006390:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 4006394:	e03ff915 	stw	zero,-28(fp)
 4006398:	00001006 	br	40063dc <myprintf_dwordarray+0x60>
        sprintf(szText, "[%08X]", *(pArray+i));
 400639c:	e0bff917 	ldw	r2,-28(fp)
 40063a0:	1085883a 	add	r2,r2,r2
 40063a4:	1085883a 	add	r2,r2,r2
 40063a8:	1007883a 	mov	r3,r2
 40063ac:	e0bffe17 	ldw	r2,-8(fp)
 40063b0:	1885883a 	add	r2,r3,r2
 40063b4:	11800017 	ldw	r6,0(r2)
 40063b8:	e13ffa04 	addi	r4,fp,-24
 40063bc:	014100f4 	movhi	r5,1027
 40063c0:	29775104 	addi	r5,r5,-8892
 40063c4:	400946c0 	call	400946c <sprintf>
        DEBUG((szText));
 40063c8:	e13ffa04 	addi	r4,fp,-24
 40063cc:	400629c0 	call	400629c <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
 40063d0:	e0bff917 	ldw	r2,-28(fp)
 40063d4:	10800044 	addi	r2,r2,1
 40063d8:	e0bff915 	stw	r2,-28(fp)
 40063dc:	e0fff917 	ldw	r3,-28(fp)
 40063e0:	e0bfff17 	ldw	r2,-4(fp)
 40063e4:	18bfed16 	blt	r3,r2,400639c <myprintf_dwordarray+0x20>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
 40063e8:	e0bfff17 	ldw	r2,-4(fp)
}
 40063ec:	e037883a 	mov	sp,fp
 40063f0:	dfc00117 	ldw	ra,4(sp)
 40063f4:	df000017 	ldw	fp,0(sp)
 40063f8:	dec00204 	addi	sp,sp,8
 40063fc:	f800283a 	ret

04006400 <QUEUE_New>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
 4006400:	defffb04 	addi	sp,sp,-20
 4006404:	dfc00415 	stw	ra,16(sp)
 4006408:	df000315 	stw	fp,12(sp)
 400640c:	df000304 	addi	fp,sp,12
 4006410:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
 4006414:	e0bfff17 	ldw	r2,-4(fp)
 4006418:	1085883a 	add	r2,r2,r2
 400641c:	1085883a 	add	r2,r2,r2
 4006420:	10800504 	addi	r2,r2,20
 4006424:	e0bffe15 	stw	r2,-8(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
 4006428:	e13ffe17 	ldw	r4,-8(fp)
 400642c:	4008a440 	call	4008a44 <malloc>
 4006430:	e0bffd15 	stw	r2,-12(fp)
    memset((void *)pQueue, 0, nSize);
 4006434:	e0fffe17 	ldw	r3,-8(fp)
 4006438:	e0bffd17 	ldw	r2,-12(fp)
 400643c:	1009883a 	mov	r4,r2
 4006440:	180d883a 	mov	r6,r3
 4006444:	000b883a 	mov	r5,zero
 4006448:	40092380 	call	4009238 <memset>
    pQueue->num = nQueueNum;
 400644c:	e0ffff17 	ldw	r3,-4(fp)
 4006450:	e0bffd17 	ldw	r2,-12(fp)
 4006454:	10c00015 	stw	r3,0(r2)
    return pQueue;
 4006458:	e0bffd17 	ldw	r2,-12(fp)
}
 400645c:	e037883a 	mov	sp,fp
 4006460:	dfc00117 	ldw	ra,4(sp)
 4006464:	df000017 	ldw	fp,0(sp)
 4006468:	dec00204 	addi	sp,sp,8
 400646c:	f800283a 	ret

04006470 <QUEUE_Delete>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
 4006470:	defffd04 	addi	sp,sp,-12
 4006474:	dfc00215 	stw	ra,8(sp)
 4006478:	df000115 	stw	fp,4(sp)
 400647c:	df000104 	addi	fp,sp,4
 4006480:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
 4006484:	e13fff17 	ldw	r4,-4(fp)
 4006488:	4008a300 	call	4008a30 <free>
}
 400648c:	e037883a 	mov	sp,fp
 4006490:	dfc00117 	ldw	ra,4(sp)
 4006494:	df000017 	ldw	fp,0(sp)
 4006498:	dec00204 	addi	sp,sp,8
 400649c:	f800283a 	ret

040064a0 <QUEUE_IsEmpty>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
 40064a0:	defffd04 	addi	sp,sp,-12
 40064a4:	df000215 	stw	fp,8(sp)
 40064a8:	df000204 	addi	fp,sp,8
 40064ac:	e13ffe15 	stw	r4,-8(fp)
    if (pQueue->front == pQueue->rear)
 40064b0:	e0bffe17 	ldw	r2,-8(fp)
 40064b4:	10c00117 	ldw	r3,4(r2)
 40064b8:	e0bffe17 	ldw	r2,-8(fp)
 40064bc:	10800217 	ldw	r2,8(r2)
 40064c0:	1880031e 	bne	r3,r2,40064d0 <QUEUE_IsEmpty+0x30>
        return TRUE;
 40064c4:	00800044 	movi	r2,1
 40064c8:	e0bfff15 	stw	r2,-4(fp)
 40064cc:	00000106 	br	40064d4 <QUEUE_IsEmpty+0x34>
    return FALSE;
 40064d0:	e03fff15 	stw	zero,-4(fp)
 40064d4:	e0bfff17 	ldw	r2,-4(fp)
}
 40064d8:	e037883a 	mov	sp,fp
 40064dc:	df000017 	ldw	fp,0(sp)
 40064e0:	dec00104 	addi	sp,sp,4
 40064e4:	f800283a 	ret

040064e8 <QUEUE_IsFull>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
 40064e8:	defffc04 	addi	sp,sp,-16
 40064ec:	dfc00315 	stw	ra,12(sp)
 40064f0:	df000215 	stw	fp,8(sp)
 40064f4:	df000204 	addi	fp,sp,8
 40064f8:	e13ffe15 	stw	r4,-8(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
 40064fc:	e0bffe17 	ldw	r2,-8(fp)
 4006500:	10800117 	ldw	r2,4(r2)
 4006504:	11000044 	addi	r4,r2,1
 4006508:	e0bffe17 	ldw	r2,-8(fp)
 400650c:	11400017 	ldw	r5,0(r2)
 4006510:	40083ec0 	call	40083ec <__umodsi3>
 4006514:	1007883a 	mov	r3,r2
 4006518:	e0bffe17 	ldw	r2,-8(fp)
 400651c:	10800217 	ldw	r2,8(r2)
 4006520:	1880031e 	bne	r3,r2,4006530 <QUEUE_IsFull+0x48>
        return TRUE;
 4006524:	00800044 	movi	r2,1
 4006528:	e0bfff15 	stw	r2,-4(fp)
 400652c:	00000106 	br	4006534 <QUEUE_IsFull+0x4c>
    return FALSE;
 4006530:	e03fff15 	stw	zero,-4(fp)
 4006534:	e0bfff17 	ldw	r2,-4(fp)
}
 4006538:	e037883a 	mov	sp,fp
 400653c:	dfc00117 	ldw	ra,4(sp)
 4006540:	df000017 	ldw	fp,0(sp)
 4006544:	dec00204 	addi	sp,sp,8
 4006548:	f800283a 	ret

0400654c <QUEUE_Push>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
 400654c:	defffb04 	addi	sp,sp,-20
 4006550:	dfc00415 	stw	ra,16(sp)
 4006554:	df000315 	stw	fp,12(sp)
 4006558:	df000304 	addi	fp,sp,12
 400655c:	e13ffd15 	stw	r4,-12(fp)
 4006560:	e17ffe15 	stw	r5,-8(fp)
    if (QUEUE_IsFull(pQueue))
 4006564:	e13ffd17 	ldw	r4,-12(fp)
 4006568:	40064e80 	call	40064e8 <QUEUE_IsFull>
 400656c:	1005003a 	cmpeq	r2,r2,zero
 4006570:	1000021e 	bne	r2,zero,400657c <QUEUE_Push+0x30>
        return FALSE;
 4006574:	e03fff15 	stw	zero,-4(fp)
 4006578:	00001406 	br	40065cc <QUEUE_Push+0x80>
    pQueue->data[pQueue->front] = data32;
 400657c:	e0bffd17 	ldw	r2,-12(fp)
 4006580:	10800117 	ldw	r2,4(r2)
 4006584:	e0fffd17 	ldw	r3,-12(fp)
 4006588:	1085883a 	add	r2,r2,r2
 400658c:	1085883a 	add	r2,r2,r2
 4006590:	10c5883a 	add	r2,r2,r3
 4006594:	10c00304 	addi	r3,r2,12
 4006598:	e0bffe17 	ldw	r2,-8(fp)
 400659c:	18800015 	stw	r2,0(r3)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
 40065a0:	e0bffd17 	ldw	r2,-12(fp)
 40065a4:	10800117 	ldw	r2,4(r2)
 40065a8:	11000044 	addi	r4,r2,1
 40065ac:	e0bffd17 	ldw	r2,-12(fp)
 40065b0:	11400017 	ldw	r5,0(r2)
 40065b4:	40083ec0 	call	40083ec <__umodsi3>
 40065b8:	1007883a 	mov	r3,r2
 40065bc:	e0bffd17 	ldw	r2,-12(fp)
 40065c0:	10c00115 	stw	r3,4(r2)
    return TRUE;
 40065c4:	00800044 	movi	r2,1
 40065c8:	e0bfff15 	stw	r2,-4(fp)
 40065cc:	e0bfff17 	ldw	r2,-4(fp)
}
 40065d0:	e037883a 	mov	sp,fp
 40065d4:	dfc00117 	ldw	ra,4(sp)
 40065d8:	df000017 	ldw	fp,0(sp)
 40065dc:	dec00204 	addi	sp,sp,8
 40065e0:	f800283a 	ret

040065e4 <QUEUE_Pop>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
 40065e4:	defffb04 	addi	sp,sp,-20
 40065e8:	dfc00415 	stw	ra,16(sp)
 40065ec:	df000315 	stw	fp,12(sp)
 40065f0:	df000304 	addi	fp,sp,12
 40065f4:	e13ffe15 	stw	r4,-8(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
 40065f8:	e13ffe17 	ldw	r4,-8(fp)
 40065fc:	40064a00 	call	40064a0 <QUEUE_IsEmpty>
 4006600:	1005003a 	cmpeq	r2,r2,zero
 4006604:	1000021e 	bne	r2,zero,4006610 <QUEUE_Pop+0x2c>
        return 0;
 4006608:	e03fff15 	stw	zero,-4(fp)
 400660c:	00001406 	br	4006660 <QUEUE_Pop+0x7c>
    data32 = pQueue->data[pQueue->rear];
 4006610:	e0bffe17 	ldw	r2,-8(fp)
 4006614:	10800217 	ldw	r2,8(r2)
 4006618:	e0fffe17 	ldw	r3,-8(fp)
 400661c:	1085883a 	add	r2,r2,r2
 4006620:	1085883a 	add	r2,r2,r2
 4006624:	10c5883a 	add	r2,r2,r3
 4006628:	10800304 	addi	r2,r2,12
 400662c:	10800017 	ldw	r2,0(r2)
 4006630:	e0bffd15 	stw	r2,-12(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
 4006634:	e0bffe17 	ldw	r2,-8(fp)
 4006638:	10800217 	ldw	r2,8(r2)
 400663c:	11000044 	addi	r4,r2,1
 4006640:	e0bffe17 	ldw	r2,-8(fp)
 4006644:	11400017 	ldw	r5,0(r2)
 4006648:	40083ec0 	call	40083ec <__umodsi3>
 400664c:	1007883a 	mov	r3,r2
 4006650:	e0bffe17 	ldw	r2,-8(fp)
 4006654:	10c00215 	stw	r3,8(r2)
    return data32;
 4006658:	e0bffd17 	ldw	r2,-12(fp)
 400665c:	e0bfff15 	stw	r2,-4(fp)
 4006660:	e0bfff17 	ldw	r2,-4(fp)
}
 4006664:	e037883a 	mov	sp,fp
 4006668:	dfc00117 	ldw	ra,4(sp)
 400666c:	df000017 	ldw	fp,0(sp)
 4006670:	dec00204 	addi	sp,sp,8
 4006674:	f800283a 	ret

04006678 <QUEUE_Empty>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
 4006678:	defffe04 	addi	sp,sp,-8
 400667c:	df000115 	stw	fp,4(sp)
 4006680:	df000104 	addi	fp,sp,4
 4006684:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
 4006688:	e0bfff17 	ldw	r2,-4(fp)
 400668c:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
 4006690:	e0bfff17 	ldw	r2,-4(fp)
 4006694:	10000215 	stw	zero,8(r2)
}
 4006698:	e037883a 	mov	sp,fp
 400669c:	df000017 	ldw	fp,0(sp)
 40066a0:	dec00104 	addi	sp,sp,4
 40066a4:	f800283a 	ret

040066a8 <Touch_Init>:
bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p);
void touch_empty_fifo(TERASIC_TOUCH_PANEL *p);
void touch_clear_input(TERASIC_TOUCH_PANEL *p);

// init touch panel
TOUCH_HANDLE Touch_Init(const alt_u32 spi_base, const alt_u32 penirq_base, const alt_u32 penirq_irq){
 40066a8:	defff704 	addi	sp,sp,-36
 40066ac:	dfc00815 	stw	ra,32(sp)
 40066b0:	df000715 	stw	fp,28(sp)
 40066b4:	df000704 	addi	fp,sp,28
 40066b8:	e13ffc15 	stw	r4,-16(fp)
 40066bc:	e17ffd15 	stw	r5,-12(fp)
 40066c0:	e1bffe15 	stw	r6,-8(fp)
    bool bSuccess = TRUE;
 40066c4:	00800044 	movi	r2,1
 40066c8:	e0bffb15 	stw	r2,-20(fp)
    
    TERASIC_TOUCH_PANEL *p;
    
    p = malloc(sizeof(TERASIC_TOUCH_PANEL));
 40066cc:	01001804 	movi	r4,96
 40066d0:	4008a440 	call	4008a44 <malloc>
 40066d4:	e0bffa15 	stw	r2,-24(fp)
    if (!p)
 40066d8:	e0bffa17 	ldw	r2,-24(fp)
 40066dc:	1004c03a 	cmpne	r2,r2,zero
 40066e0:	1000031e 	bne	r2,zero,40066f0 <Touch_Init+0x48>
        return p;
 40066e4:	e0bffa17 	ldw	r2,-24(fp)
 40066e8:	e0bfff15 	stw	r2,-4(fp)
 40066ec:	00004c06 	br	4006820 <Touch_Init+0x178>

    
    //
    memset(p, 0, sizeof(TERASIC_TOUCH_PANEL));
 40066f0:	e0bffa17 	ldw	r2,-24(fp)
 40066f4:	1009883a 	mov	r4,r2
 40066f8:	01801804 	movi	r6,96
 40066fc:	000b883a 	mov	r5,zero
 4006700:	40092380 	call	4009238 <memset>
    p->spi_base = spi_base;
 4006704:	e0fffa17 	ldw	r3,-24(fp)
 4006708:	e0bffc17 	ldw	r2,-16(fp)
 400670c:	18800015 	stw	r2,0(r3)
    p->penirq_base = penirq_base;
 4006710:	e0fffa17 	ldw	r3,-24(fp)
 4006714:	e0bffd17 	ldw	r2,-12(fp)
 4006718:	18800115 	stw	r2,4(r3)
    p->irq_mask = 0x01;  // 1-pin
 400671c:	e0fffa17 	ldw	r3,-24(fp)
 4006720:	00800044 	movi	r2,1
 4006724:	18800315 	stw	r2,12(r3)
    p->penirq_irq = penirq_irq;
 4006728:	e0fffa17 	ldw	r3,-24(fp)
 400672c:	e0bffe17 	ldw	r2,-8(fp)
 4006730:	18800215 	stw	r2,8(r3)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4006734:	008100f4 	movhi	r2,1027
 4006738:	10933a04 	addi	r2,r2,19688
 400673c:	10800017 	ldw	r2,0(r2)
 4006740:	1009883a 	mov	r4,r2
    p->alarm_dur = alt_ticks_per_second()/SAMPLE_RATE;
 4006744:	01400f04 	movi	r5,60
 4006748:	40083e40 	call	40083e4 <__udivsi3>
 400674c:	1007883a 	mov	r3,r2
 4006750:	e0bffa17 	ldw	r2,-24(fp)
 4006754:	10c01615 	stw	r3,88(r2)
    
    // enalbe penirq_n interrupt (P1=1, P1=0)
    touch_enable_penirq(p);    
 4006758:	e13ffa17 	ldw	r4,-24(fp)
 400675c:	4006b200 	call	4006b20 <touch_enable_penirq>
    

    // enable interrupt, 1-pin
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, p->irq_mask); 
 4006760:	e0bffa17 	ldw	r2,-24(fp)
 4006764:	10800117 	ldw	r2,4(r2)
 4006768:	11000204 	addi	r4,r2,8
 400676c:	e0bffa17 	ldw	r2,-24(fp)
 4006770:	10800317 	ldw	r2,12(r2)
 4006774:	1007883a 	mov	r3,r2
 4006778:	2005883a 	mov	r2,r4
 400677c:	10c00035 	stwio	r3,0(r2)
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);
 4006780:	e0bffa17 	ldw	r2,-24(fp)
 4006784:	10800117 	ldw	r2,4(r2)
 4006788:	10800304 	addi	r2,r2,12
 400678c:	10000035 	stwio	zero,0(r2)
    // register ISR
    // register callback function

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,
 4006790:	e0bffa17 	ldw	r2,-24(fp)
 4006794:	11400217 	ldw	r5,8(r2)
 4006798:	d8000015 	stw	zero,0(sp)
 400679c:	0009883a 	mov	r4,zero
 40067a0:	01810034 	movhi	r6,1024
 40067a4:	319a8904 	addi	r6,r6,27172
 40067a8:	e1fffa17 	ldw	r7,-24(fp)
 40067ac:	40112e00 	call	40112e0 <alt_ic_isr_register>
 40067b0:	1005003a 	cmpeq	r2,r2,zero
 40067b4:	1000011e 	bne	r2,zero,40067bc <Touch_Init+0x114>
		                   ) != 0)){
 #else
  if ((alt_irq_register(p->penirq_irq, (void *)p, touch_isr) != 0)){
 #endif
        DEBUG_OUT(("[TOUCH]register IRQ fail\n"));
        bSuccess = FALSE;
 40067b8:	e03ffb15 	stw	zero,-20(fp)
    }else{        
        DEBUG_OUT(("[TOUCH]register IRQ success\n"));
    }

    if (bSuccess){    
 40067bc:	e0bffb17 	ldw	r2,-20(fp)
 40067c0:	1005003a 	cmpeq	r2,r2,zero
 40067c4:	10000b1e 	bne	r2,zero,40067f4 <Touch_Init+0x14c>
        if (alt_alarm_start(&p->alarm, p->alarm_dur, touch_alarm_callback, p) == 0){
 40067c8:	e0bffa17 	ldw	r2,-24(fp)
 40067cc:	11001004 	addi	r4,r2,64
 40067d0:	e0bffa17 	ldw	r2,-24(fp)
 40067d4:	11401617 	ldw	r5,88(r2)
 40067d8:	01810034 	movhi	r6,1024
 40067dc:	319bdf04 	addi	r6,r6,28540
 40067e0:	e1fffa17 	ldw	r7,-24(fp)
 40067e4:	4010ed00 	call	4010ed0 <alt_alarm_start>
 40067e8:	1005003a 	cmpeq	r2,r2,zero
 40067ec:	1000011e 	bne	r2,zero,40067f4 <Touch_Init+0x14c>
            DEBUG_OUT(("[TOUCH]alarm start success\n"));
        }else{
            DEBUG_OUT(("[TOUCH]alarm start fail\n"));
            bSuccess = FALSE;
 40067f0:	e03ffb15 	stw	zero,-20(fp)
        }
    }
    
    if (!bSuccess && p){
 40067f4:	e0bffb17 	ldw	r2,-20(fp)
 40067f8:	1004c03a 	cmpne	r2,r2,zero
 40067fc:	1000061e 	bne	r2,zero,4006818 <Touch_Init+0x170>
 4006800:	e0bffa17 	ldw	r2,-24(fp)
 4006804:	1005003a 	cmpeq	r2,r2,zero
 4006808:	1000031e 	bne	r2,zero,4006818 <Touch_Init+0x170>
        free(p);
 400680c:	e13ffa17 	ldw	r4,-24(fp)
 4006810:	4008a300 	call	4008a30 <free>
        p = NULL;
 4006814:	e03ffa15 	stw	zero,-24(fp)
    }        
                
    return p;        
 4006818:	e0bffa17 	ldw	r2,-24(fp)
 400681c:	e0bfff15 	stw	r2,-4(fp)
 4006820:	e0bfff17 	ldw	r2,-4(fp)
    

}
 4006824:	e037883a 	mov	sp,fp
 4006828:	dfc00117 	ldw	ra,4(sp)
 400682c:	df000017 	ldw	fp,0(sp)
 4006830:	dec00204 	addi	sp,sp,8
 4006834:	f800283a 	ret

04006838 <Touch_UnInit>:

// uninit touch panel
void Touch_UnInit(TOUCH_HANDLE pHandle){
 4006838:	defffc04 	addi	sp,sp,-16
 400683c:	dfc00315 	stw	ra,12(sp)
 4006840:	df000215 	stw	fp,8(sp)
 4006844:	df000204 	addi	fp,sp,8
 4006848:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 400684c:	e0bfff17 	ldw	r2,-4(fp)
 4006850:	e0bffe15 	stw	r2,-8(fp)
    if (!p)
 4006854:	e0bffe17 	ldw	r2,-8(fp)
 4006858:	1005003a 	cmpeq	r2,r2,zero
 400685c:	1000091e 	bne	r2,zero,4006884 <Touch_UnInit+0x4c>
        return;
        
    // stop alarm
    alt_alarm_stop(&(p->alarm));
 4006860:	e0bffe17 	ldw	r2,-8(fp)
 4006864:	11001004 	addi	r4,r2,64
 4006868:	4011c500 	call	4011c50 <alt_alarm_stop>
    // disable irq
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, 0x00);
 400686c:	e0bffe17 	ldw	r2,-8(fp)
 4006870:	10800117 	ldw	r2,4(r2)
 4006874:	10800204 	addi	r2,r2,8
 4006878:	10000035 	stwio	zero,0(r2)
    
    // zero varialbe
    free(p);
 400687c:	e13ffe17 	ldw	r4,-8(fp)
 4006880:	4008a300 	call	4008a30 <free>
}
 4006884:	e037883a 	mov	sp,fp
 4006888:	dfc00117 	ldw	ra,4(sp)
 400688c:	df000017 	ldw	fp,0(sp)
 4006890:	dec00204 	addi	sp,sp,8
 4006894:	f800283a 	ret

04006898 <Touch_EmptyFifo>:


void Touch_EmptyFifo(TOUCH_HANDLE pHandle){
 4006898:	defffc04 	addi	sp,sp,-16
 400689c:	dfc00315 	stw	ra,12(sp)
 40068a0:	df000215 	stw	fp,8(sp)
 40068a4:	df000204 	addi	fp,sp,8
 40068a8:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 40068ac:	e0bfff17 	ldw	r2,-4(fp)
 40068b0:	e0bffe15 	stw	r2,-8(fp)
    touch_empty_fifo(p);
 40068b4:	e13ffe17 	ldw	r4,-8(fp)
 40068b8:	4006a980 	call	4006a98 <touch_empty_fifo>
}
 40068bc:	e037883a 	mov	sp,fp
 40068c0:	dfc00117 	ldw	ra,4(sp)
 40068c4:	df000017 	ldw	fp,0(sp)
 40068c8:	dec00204 	addi	sp,sp,8
 40068cc:	f800283a 	ret

040068d0 <Touch_GetXY>:

// get x/y from internal FIFO
bool Touch_GetXY(TOUCH_HANDLE pHandle, int *x, int *y){
 40068d0:	defff804 	addi	sp,sp,-32
 40068d4:	dfc00715 	stw	ra,28(sp)
 40068d8:	df000615 	stw	fp,24(sp)
 40068dc:	dc000515 	stw	r16,20(sp)
 40068e0:	df000504 	addi	fp,sp,20
 40068e4:	e13ffc15 	stw	r4,-16(fp)
 40068e8:	e17ffd15 	stw	r5,-12(fp)
 40068ec:	e1bffe15 	stw	r6,-8(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
 40068f0:	e0bffc17 	ldw	r2,-16(fp)
 40068f4:	e0bffb15 	stw	r2,-20(fp)
    if (!p)
 40068f8:	e0bffb17 	ldw	r2,-20(fp)
 40068fc:	1004c03a 	cmpne	r2,r2,zero
 4006900:	1000021e 	bne	r2,zero,400690c <Touch_GetXY+0x3c>
        return FALSE;    
 4006904:	e03fff15 	stw	zero,-4(fp)
 4006908:	00003f06 	br	4006a08 <Touch_GetXY+0x138>
    
    if (p->fifo_front == p->fifo_rear){
 400690c:	e0bffb17 	ldw	r2,-20(fp)
 4006910:	10c0040b 	ldhu	r3,16(r2)
 4006914:	e0bffb17 	ldw	r2,-20(fp)
 4006918:	1080048b 	ldhu	r2,18(r2)
 400691c:	18ffffcc 	andi	r3,r3,65535
 4006920:	10bfffcc 	andi	r2,r2,65535
 4006924:	1880021e 	bne	r3,r2,4006930 <Touch_GetXY+0x60>
        // empty
        return FALSE;
 4006928:	e03fff15 	stw	zero,-4(fp)
 400692c:	00003606 	br	4006a08 <Touch_GetXY+0x138>
    }
    *x = p->fifo_x[p->fifo_rear];
 4006930:	e0bffb17 	ldw	r2,-20(fp)
 4006934:	1080048b 	ldhu	r2,18(r2)
 4006938:	10bfffcc 	andi	r2,r2,65535
 400693c:	e0fffb17 	ldw	r3,-20(fp)
 4006940:	1085883a 	add	r2,r2,r2
 4006944:	10c5883a 	add	r2,r2,r3
 4006948:	10800504 	addi	r2,r2,20
 400694c:	1080000b 	ldhu	r2,0(r2)
 4006950:	10ffffcc 	andi	r3,r2,65535
 4006954:	e0bffd17 	ldw	r2,-12(fp)
 4006958:	10c00015 	stw	r3,0(r2)
    *y = p->fifo_y[p->fifo_rear];
 400695c:	e0bffb17 	ldw	r2,-20(fp)
 4006960:	1080048b 	ldhu	r2,18(r2)
 4006964:	10bfffcc 	andi	r2,r2,65535
 4006968:	e0fffb17 	ldw	r3,-20(fp)
 400696c:	1085883a 	add	r2,r2,r2
 4006970:	10c5883a 	add	r2,r2,r3
 4006974:	10800a04 	addi	r2,r2,40
 4006978:	1080000b 	ldhu	r2,0(r2)
 400697c:	10ffffcc 	andi	r3,r2,65535
 4006980:	e0bffe17 	ldw	r2,-8(fp)
 4006984:	10c00015 	stw	r3,0(r2)
    //
    p->fifo_rear++;
 4006988:	e0bffb17 	ldw	r2,-20(fp)
 400698c:	1080048b 	ldhu	r2,18(r2)
 4006990:	10800044 	addi	r2,r2,1
 4006994:	1007883a 	mov	r3,r2
 4006998:	e0bffb17 	ldw	r2,-20(fp)
 400699c:	10c0048d 	sth	r3,18(r2)
    p->fifo_rear %= FIFO_SIZE;
 40069a0:	e0bffb17 	ldw	r2,-20(fp)
 40069a4:	1080048b 	ldhu	r2,18(r2)
 40069a8:	113fffcc 	andi	r4,r2,65535
 40069ac:	01400284 	movi	r5,10
 40069b0:	40083ec0 	call	40083ec <__umodsi3>
 40069b4:	1007883a 	mov	r3,r2
 40069b8:	e0bffb17 	ldw	r2,-20(fp)
 40069bc:	10c0048d 	sth	r3,18(r2)
    //
    // translate
    touch_xy_transform(x, y);
 40069c0:	e13ffd17 	ldw	r4,-12(fp)
 40069c4:	e17ffe17 	ldw	r5,-8(fp)
 40069c8:	4006ffc0 	call	4006ffc <touch_xy_transform>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40069cc:	008100f4 	movhi	r2,1027
 40069d0:	10933b04 	addi	r2,r2,19692
 40069d4:	10800017 	ldw	r2,0(r2)
 40069d8:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40069dc:	008100f4 	movhi	r2,1027
 40069e0:	10933a04 	addi	r2,r2,19688
 40069e4:	10800017 	ldw	r2,0(r2)
 40069e8:	1009883a 	mov	r4,r2

    DEBUG_OUT("[TOUCH] x=%d, y=%d\n", *x,*y);
//    touch_clear_input(p);
//    touch_empty_fifo(p);
    p->next_active_time = alt_nticks() + ACTIVE_DELAY_TIME;
 40069ec:	01400f04 	movi	r5,60
 40069f0:	40083e40 	call	40083e4 <__udivsi3>
 40069f4:	8087883a 	add	r3,r16,r2
 40069f8:	e0bffb17 	ldw	r2,-20(fp)
 40069fc:	10c01715 	stw	r3,92(r2)
    
    return TRUE;
 4006a00:	00800044 	movi	r2,1
 4006a04:	e0bfff15 	stw	r2,-4(fp)
 4006a08:	e0bfff17 	ldw	r2,-4(fp)
}
 4006a0c:	e037883a 	mov	sp,fp
 4006a10:	dfc00217 	ldw	ra,8(sp)
 4006a14:	df000117 	ldw	fp,4(sp)
 4006a18:	dc000017 	ldw	r16,0(sp)
 4006a1c:	dec00304 	addi	sp,sp,12
 4006a20:	f800283a 	ret

04006a24 <touch_isr>:



// penirq_n ISR
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void touch_isr(void* context){
 4006a24:	defffb04 	addi	sp,sp,-20
 4006a28:	dfc00415 	stw	ra,16(sp)
 4006a2c:	df000315 	stw	fp,12(sp)
 4006a30:	df000304 	addi	fp,sp,12
 4006a34:	e13fff15 	stw	r4,-4(fp)
#else
void touch_isr(void* context, alt_u32 id){
#endif
    alt_u8 mask;
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
 4006a38:	e0bfff17 	ldw	r2,-4(fp)
 4006a3c:	e0bffd15 	stw	r2,-12(fp)

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_disable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
 4006a40:	0009883a 	mov	r4,zero
 4006a44:	014000c4 	movi	r5,3
 4006a48:	40113cc0 	call	40113cc <alt_ic_irq_disable>
#else
    alt_irq_disable(id);
#endif

    // get the edge capture mask
    mask = IORD_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base);
 4006a4c:	e0bffd17 	ldw	r2,-12(fp)
 4006a50:	10800117 	ldw	r2,4(r2)
 4006a54:	10800304 	addi	r2,r2,12
 4006a58:	10800037 	ldwio	r2,0(r2)
 4006a5c:	e0bffe05 	stb	r2,-8(fp)
    //if ((mask & Touch.irq_mask) == 0)  // 1-pin
    //    return;
    DEBUG_OUT("Touched!!\n");
    usleep(1000);
 4006a60:	0100fa04 	movi	r4,1000
 4006a64:	4011df40 	call	4011df4 <usleep>
    }
    IOWR(PIO_RED_LED_BASE, 0, Touch.pen_pressed);
#endif                    
    
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);    
 4006a68:	e0bffd17 	ldw	r2,-12(fp)
 4006a6c:	10800117 	ldw	r2,4(r2)
 4006a70:	10800304 	addi	r2,r2,12
 4006a74:	10000035 	stwio	zero,0(r2)
    
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_enable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
 4006a78:	0009883a 	mov	r4,zero
 4006a7c:	014000c4 	movi	r5,3
 4006a80:	40113300 	call	4011330 <alt_ic_irq_enable>
#else
    alt_irq_enable(id);
#endif

}
 4006a84:	e037883a 	mov	sp,fp
 4006a88:	dfc00117 	ldw	ra,4(sp)
 4006a8c:	df000017 	ldw	fp,0(sp)
 4006a90:	dec00204 	addi	sp,sp,8
 4006a94:	f800283a 	ret

04006a98 <touch_empty_fifo>:

void touch_empty_fifo(TERASIC_TOUCH_PANEL *p){
 4006a98:	defffe04 	addi	sp,sp,-8
 4006a9c:	df000115 	stw	fp,4(sp)
 4006aa0:	df000104 	addi	fp,sp,4
 4006aa4:	e13fff15 	stw	r4,-4(fp)
    p->fifo_rear = p->fifo_front;
 4006aa8:	e0bfff17 	ldw	r2,-4(fp)
 4006aac:	10c0040b 	ldhu	r3,16(r2)
 4006ab0:	e0bfff17 	ldw	r2,-4(fp)
 4006ab4:	10c0048d 	sth	r3,18(r2)
}
 4006ab8:	e037883a 	mov	sp,fp
 4006abc:	df000017 	ldw	fp,0(sp)
 4006ac0:	dec00104 	addi	sp,sp,4
 4006ac4:	f800283a 	ret

04006ac8 <touch_is_pen_pressed>:

bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p){
 4006ac8:	defffc04 	addi	sp,sp,-16
 4006acc:	df000315 	stw	fp,12(sp)
 4006ad0:	df000304 	addi	fp,sp,12
 4006ad4:	e13ffe15 	stw	r4,-8(fp)
    bool bPressed;
    bPressed = (IORD(p->penirq_base, 0) & 0x01)?FALSE:TRUE;
 4006ad8:	e0bffe17 	ldw	r2,-8(fp)
 4006adc:	10800117 	ldw	r2,4(r2)
 4006ae0:	10800037 	ldwio	r2,0(r2)
 4006ae4:	1080004c 	andi	r2,r2,1
 4006ae8:	10803fcc 	andi	r2,r2,255
 4006aec:	1005003a 	cmpeq	r2,r2,zero
 4006af0:	1000021e 	bne	r2,zero,4006afc <touch_is_pen_pressed+0x34>
 4006af4:	e03fff15 	stw	zero,-4(fp)
 4006af8:	00000206 	br	4006b04 <touch_is_pen_pressed+0x3c>
 4006afc:	00800044 	movi	r2,1
 4006b00:	e0bfff15 	stw	r2,-4(fp)
 4006b04:	e0bfff17 	ldw	r2,-4(fp)
 4006b08:	e0bffd15 	stw	r2,-12(fp)
    return bPressed;
 4006b0c:	e0bffd17 	ldw	r2,-12(fp)
}
 4006b10:	e037883a 	mov	sp,fp
 4006b14:	df000017 	ldw	fp,0(sp)
 4006b18:	dec00104 	addi	sp,sp,4
 4006b1c:	f800283a 	ret

04006b20 <touch_enable_penirq>:


void touch_enable_penirq(TERASIC_TOUCH_PANEL *p){
 4006b20:	defff904 	addi	sp,sp,-28
 4006b24:	dfc00615 	stw	ra,24(sp)
 4006b28:	df000515 	stw	fp,20(sp)
 4006b2c:	df000504 	addi	fp,sp,20
 4006b30:	e13fff15 	stw	r4,-4(fp)
    const alt_u8 CommandGetX = 0x82;
 4006b34:	00bfe084 	movi	r2,-126
 4006b38:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
 4006b3c:	00bff484 	movi	r2,-46
 4006b40:	e0bffe45 	stb	r2,-7(fp)
    alt_u8 data8;
    
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 4006b44:	e0bfff17 	ldw	r2,-4(fp)
 4006b48:	11000017 	ldw	r4,0(r2)
 4006b4c:	d8000015 	stw	zero,0(sp)
 4006b50:	d8000115 	stw	zero,4(sp)
 4006b54:	00800044 	movi	r2,1
 4006b58:	d8800215 	stw	r2,8(sp)
 4006b5c:	000b883a 	mov	r5,zero
 4006b60:	01800044 	movi	r6,1
 4006b64:	e1fffe04 	addi	r7,fp,-8
 4006b68:	4012b180 	call	4012b18 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
 4006b6c:	e0bfff17 	ldw	r2,-4(fp)
 4006b70:	11000017 	ldw	r4,0(r2)
 4006b74:	00800044 	movi	r2,1
 4006b78:	d8800015 	stw	r2,0(sp)
 4006b7c:	e0bffe84 	addi	r2,fp,-6
 4006b80:	d8800115 	stw	r2,4(sp)
 4006b84:	00800044 	movi	r2,1
 4006b88:	d8800215 	stw	r2,8(sp)
 4006b8c:	000b883a 	mov	r5,zero
 4006b90:	000d883a 	mov	r6,zero
 4006b94:	000f883a 	mov	r7,zero
 4006b98:	4012b180 	call	4012b18 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 4006b9c:	e0bfff17 	ldw	r2,-4(fp)
 4006ba0:	11000017 	ldw	r4,0(r2)
 4006ba4:	00800044 	movi	r2,1
 4006ba8:	d8800015 	stw	r2,0(sp)
 4006bac:	e0bffe84 	addi	r2,fp,-6
 4006bb0:	d8800115 	stw	r2,4(sp)
 4006bb4:	00800084 	movi	r2,2
 4006bb8:	d8800215 	stw	r2,8(sp)
 4006bbc:	000b883a 	mov	r5,zero
 4006bc0:	000d883a 	mov	r6,zero
 4006bc4:	000f883a 	mov	r7,zero
 4006bc8:	4012b180 	call	4012b18 <alt_avalon_spi_command>
   
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 4006bcc:	e0bfff17 	ldw	r2,-4(fp)
 4006bd0:	11000017 	ldw	r4,0(r2)
 4006bd4:	e1fffe44 	addi	r7,fp,-7
 4006bd8:	d8000015 	stw	zero,0(sp)
 4006bdc:	d8000115 	stw	zero,4(sp)
 4006be0:	00800044 	movi	r2,1
 4006be4:	d8800215 	stw	r2,8(sp)
 4006be8:	000b883a 	mov	r5,zero
 4006bec:	01800044 	movi	r6,1
 4006bf0:	4012b180 	call	4012b18 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
 4006bf4:	e0bfff17 	ldw	r2,-4(fp)
 4006bf8:	11000017 	ldw	r4,0(r2)
 4006bfc:	00800044 	movi	r2,1
 4006c00:	d8800015 	stw	r2,0(sp)
 4006c04:	e0bffe84 	addi	r2,fp,-6
 4006c08:	d8800115 	stw	r2,4(sp)
 4006c0c:	00800044 	movi	r2,1
 4006c10:	d8800215 	stw	r2,8(sp)
 4006c14:	000b883a 	mov	r5,zero
 4006c18:	000d883a 	mov	r6,zero
 4006c1c:	000f883a 	mov	r7,zero
 4006c20:	4012b180 	call	4012b18 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 4006c24:	e0bfff17 	ldw	r2,-4(fp)
 4006c28:	11000017 	ldw	r4,0(r2)
 4006c2c:	00800044 	movi	r2,1
 4006c30:	d8800015 	stw	r2,0(sp)
 4006c34:	e0bffe84 	addi	r2,fp,-6
 4006c38:	d8800115 	stw	r2,4(sp)
 4006c3c:	00800084 	movi	r2,2
 4006c40:	d8800215 	stw	r2,8(sp)
 4006c44:	000b883a 	mov	r5,zero
 4006c48:	000d883a 	mov	r6,zero
 4006c4c:	000f883a 	mov	r7,zero
 4006c50:	4012b180 	call	4012b18 <alt_avalon_spi_command>
}
 4006c54:	e037883a 	mov	sp,fp
 4006c58:	dfc00117 	ldw	ra,4(sp)
 4006c5c:	df000017 	ldw	fp,0(sp)
 4006c60:	dec00204 	addi	sp,sp,8
 4006c64:	f800283a 	ret

04006c68 <touch_clear_input>:

void touch_clear_input(TERASIC_TOUCH_PANEL *p){
 4006c68:	defffd04 	addi	sp,sp,-12
 4006c6c:	dfc00215 	stw	ra,8(sp)
 4006c70:	df000115 	stw	fp,4(sp)
 4006c74:	df000104 	addi	fp,sp,4
 4006c78:	e13fff15 	stw	r4,-4(fp)
    touch_enable_penirq(p);
 4006c7c:	e13fff17 	ldw	r4,-4(fp)
 4006c80:	4006b200 	call	4006b20 <touch_enable_penirq>
}
 4006c84:	e037883a 	mov	sp,fp
 4006c88:	dfc00117 	ldw	ra,4(sp)
 4006c8c:	df000017 	ldw	fp,0(sp)
 4006c90:	dec00204 	addi	sp,sp,8
 4006c94:	f800283a 	ret

04006c98 <touch_get_xy>:

// get x/y by SPI command
void touch_get_xy(TERASIC_TOUCH_PANEL *p){
 4006c98:	defff604 	addi	sp,sp,-40
 4006c9c:	dfc00915 	stw	ra,36(sp)
 4006ca0:	df000815 	stw	fp,32(sp)
 4006ca4:	df000804 	addi	fp,sp,32
 4006ca8:	e13fff15 	stw	r4,-4(fp)
    alt_u16 x, y;
    int result;
    const alt_u8 CommandGetX = 0x92;
 4006cac:	00bfe484 	movi	r2,-110
 4006cb0:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
 4006cb4:	00bff484 	movi	r2,-46
 4006cb8:	e0bffe45 	stb	r2,-7(fp)
    
       
    //DEBUG_OUT(("[TOUCH] get x/y\n"));

    // x
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 4006cbc:	e0bfff17 	ldw	r2,-4(fp)
 4006cc0:	11000017 	ldw	r4,0(r2)
 4006cc4:	e1fffe04 	addi	r7,fp,-8
 4006cc8:	d8000015 	stw	zero,0(sp)
 4006ccc:	d8000115 	stw	zero,4(sp)
 4006cd0:	00800044 	movi	r2,1
 4006cd4:	d8800215 	stw	r2,8(sp)
 4006cd8:	000b883a 	mov	r5,zero
 4006cdc:	01800044 	movi	r6,1
 4006ce0:	4012b180 	call	4012b18 <alt_avalon_spi_command>
 4006ce4:	e0bffc15 	stw	r2,-16(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
 4006ce8:	e0bfff17 	ldw	r2,-4(fp)
 4006cec:	11000017 	ldw	r4,0(r2)
 4006cf0:	00800044 	movi	r2,1
 4006cf4:	d8800015 	stw	r2,0(sp)
 4006cf8:	e0bffe84 	addi	r2,fp,-6
 4006cfc:	d8800115 	stw	r2,4(sp)
 4006d00:	00800044 	movi	r2,1
 4006d04:	d8800215 	stw	r2,8(sp)
 4006d08:	000b883a 	mov	r5,zero
 4006d0c:	000d883a 	mov	r6,zero
 4006d10:	000f883a 	mov	r7,zero
 4006d14:	4012b180 	call	4012b18 <alt_avalon_spi_command>
 4006d18:	e0bffc15 	stw	r2,-16(fp)
    if (result != sizeof(high_byte)){
 4006d1c:	e0bffc17 	ldw	r2,-16(fp)
 4006d20:	10800058 	cmpnei	r2,r2,1
 4006d24:	1000901e 	bne	r2,zero,4006f68 <touch_get_xy+0x2d0>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 4006d28:	e0bfff17 	ldw	r2,-4(fp)
 4006d2c:	11000017 	ldw	r4,0(r2)
 4006d30:	00800044 	movi	r2,1
 4006d34:	d8800015 	stw	r2,0(sp)
 4006d38:	e0bffec4 	addi	r2,fp,-5
 4006d3c:	d8800115 	stw	r2,4(sp)
 4006d40:	00800084 	movi	r2,2
 4006d44:	d8800215 	stw	r2,8(sp)
 4006d48:	000b883a 	mov	r5,zero
 4006d4c:	000d883a 	mov	r6,zero
 4006d50:	000f883a 	mov	r7,zero
 4006d54:	4012b180 	call	4012b18 <alt_avalon_spi_command>
 4006d58:	e0bffc15 	stw	r2,-16(fp)
    if (result != sizeof(low_byte)){
 4006d5c:	e0bffc17 	ldw	r2,-16(fp)
 4006d60:	10800058 	cmpnei	r2,r2,1
 4006d64:	1000801e 	bne	r2,zero,4006f68 <touch_get_xy+0x2d0>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }  
    ResponseX = (high_byte << 8) | low_byte;        
 4006d68:	e0bffe83 	ldbu	r2,-6(fp)
 4006d6c:	10803fcc 	andi	r2,r2,255
 4006d70:	1004923a 	slli	r2,r2,8
 4006d74:	1007883a 	mov	r3,r2
 4006d78:	e0bffec3 	ldbu	r2,-5(fp)
 4006d7c:	10803fcc 	andi	r2,r2,255
 4006d80:	1884b03a 	or	r2,r3,r2
 4006d84:	e0bffb8d 	sth	r2,-18(fp)
    
    // y
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
 4006d88:	e0bfff17 	ldw	r2,-4(fp)
 4006d8c:	11000017 	ldw	r4,0(r2)
 4006d90:	e1fffe44 	addi	r7,fp,-7
 4006d94:	d8000015 	stw	zero,0(sp)
 4006d98:	d8000115 	stw	zero,4(sp)
 4006d9c:	00800044 	movi	r2,1
 4006da0:	d8800215 	stw	r2,8(sp)
 4006da4:	000b883a 	mov	r5,zero
 4006da8:	01800044 	movi	r6,1
 4006dac:	4012b180 	call	4012b18 <alt_avalon_spi_command>
 4006db0:	e0bffc15 	stw	r2,-16(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
 4006db4:	e0bfff17 	ldw	r2,-4(fp)
 4006db8:	11000017 	ldw	r4,0(r2)
 4006dbc:	00800044 	movi	r2,1
 4006dc0:	d8800015 	stw	r2,0(sp)
 4006dc4:	e0bffe84 	addi	r2,fp,-6
 4006dc8:	d8800115 	stw	r2,4(sp)
 4006dcc:	00800044 	movi	r2,1
 4006dd0:	d8800215 	stw	r2,8(sp)
 4006dd4:	000b883a 	mov	r5,zero
 4006dd8:	000d883a 	mov	r6,zero
 4006ddc:	000f883a 	mov	r7,zero
 4006de0:	4012b180 	call	4012b18 <alt_avalon_spi_command>
 4006de4:	e0bffc15 	stw	r2,-16(fp)
    if (result != sizeof(high_byte)){
 4006de8:	e0bffc17 	ldw	r2,-16(fp)
 4006dec:	10800058 	cmpnei	r2,r2,1
 4006df0:	10005d1e 	bne	r2,zero,4006f68 <touch_get_xy+0x2d0>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
 4006df4:	e0bfff17 	ldw	r2,-4(fp)
 4006df8:	11000017 	ldw	r4,0(r2)
 4006dfc:	00800044 	movi	r2,1
 4006e00:	d8800015 	stw	r2,0(sp)
 4006e04:	e0bffec4 	addi	r2,fp,-5
 4006e08:	d8800115 	stw	r2,4(sp)
 4006e0c:	00800084 	movi	r2,2
 4006e10:	d8800215 	stw	r2,8(sp)
 4006e14:	000b883a 	mov	r5,zero
 4006e18:	000d883a 	mov	r6,zero
 4006e1c:	000f883a 	mov	r7,zero
 4006e20:	4012b180 	call	4012b18 <alt_avalon_spi_command>
 4006e24:	e0bffc15 	stw	r2,-16(fp)
    if (result != sizeof(low_byte)){
 4006e28:	e0bffc17 	ldw	r2,-16(fp)
 4006e2c:	10800058 	cmpnei	r2,r2,1
 4006e30:	10004d1e 	bne	r2,zero,4006f68 <touch_get_xy+0x2d0>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }  
    ResponseY = (high_byte << 8) | low_byte;        
 4006e34:	e0bffe83 	ldbu	r2,-6(fp)
 4006e38:	10803fcc 	andi	r2,r2,255
 4006e3c:	1004923a 	slli	r2,r2,8
 4006e40:	1007883a 	mov	r3,r2
 4006e44:	e0bffec3 	ldbu	r2,-5(fp)
 4006e48:	10803fcc 	andi	r2,r2,255
 4006e4c:	1884b03a 	or	r2,r3,r2
 4006e50:	e0bffb0d 	sth	r2,-20(fp)

    if (!touch_is_pen_pressed(p))
 4006e54:	e13fff17 	ldw	r4,-4(fp)
 4006e58:	4006ac80 	call	4006ac8 <touch_is_pen_pressed>
 4006e5c:	1005003a 	cmpeq	r2,r2,zero
 4006e60:	1000411e 	bne	r2,zero,4006f68 <touch_get_xy+0x2d0>
        return; // do not use this data    
        
    x = (ResponseX >> 3 ) & 0xFFF;  // 12 bits    
 4006e64:	e0bffb8b 	ldhu	r2,-18(fp)
 4006e68:	1004d0fa 	srli	r2,r2,3
 4006e6c:	1083ffcc 	andi	r2,r2,4095
 4006e70:	e0bffd8d 	sth	r2,-10(fp)
    y = (ResponseY >> 3 ) & 0xFFF;  // 12 bits
 4006e74:	e0bffb0b 	ldhu	r2,-20(fp)
 4006e78:	1004d0fa 	srli	r2,r2,3
 4006e7c:	1083ffcc 	andi	r2,r2,4095
 4006e80:	e0bffd0d 	sth	r2,-12(fp)
    
    
    // check whether the fifo is full!
    if (((p->fifo_front+1)%FIFO_SIZE) == p->fifo_rear){
 4006e84:	e0bfff17 	ldw	r2,-4(fp)
 4006e88:	1080040b 	ldhu	r2,16(r2)
 4006e8c:	10bfffcc 	andi	r2,r2,65535
 4006e90:	11000044 	addi	r4,r2,1
 4006e94:	01400284 	movi	r5,10
 4006e98:	40083840 	call	4008384 <__modsi3>
 4006e9c:	1007883a 	mov	r3,r2
 4006ea0:	e0bfff17 	ldw	r2,-4(fp)
 4006ea4:	1080048b 	ldhu	r2,18(r2)
 4006ea8:	10bfffcc 	andi	r2,r2,65535
 4006eac:	18800e1e 	bne	r3,r2,4006ee8 <touch_get_xy+0x250>
        // full, pop an old one
        p->fifo_rear++;
 4006eb0:	e0bfff17 	ldw	r2,-4(fp)
 4006eb4:	1080048b 	ldhu	r2,18(r2)
 4006eb8:	10800044 	addi	r2,r2,1
 4006ebc:	1007883a 	mov	r3,r2
 4006ec0:	e0bfff17 	ldw	r2,-4(fp)
 4006ec4:	10c0048d 	sth	r3,18(r2)
        p->fifo_rear %= FIFO_SIZE;        
 4006ec8:	e0bfff17 	ldw	r2,-4(fp)
 4006ecc:	1080048b 	ldhu	r2,18(r2)
 4006ed0:	113fffcc 	andi	r4,r2,65535
 4006ed4:	01400284 	movi	r5,10
 4006ed8:	40083ec0 	call	40083ec <__umodsi3>
 4006edc:	1007883a 	mov	r3,r2
 4006ee0:	e0bfff17 	ldw	r2,-4(fp)
 4006ee4:	10c0048d 	sth	r3,18(r2)
        
    }
    DEBUG_OUT("[ ADC] x=%d, y=%d\n", x,y);

    // push now
    p->fifo_x[p->fifo_front] = x;
 4006ee8:	e0bfff17 	ldw	r2,-4(fp)
 4006eec:	1080040b 	ldhu	r2,16(r2)
 4006ef0:	10bfffcc 	andi	r2,r2,65535
 4006ef4:	e0ffff17 	ldw	r3,-4(fp)
 4006ef8:	1085883a 	add	r2,r2,r2
 4006efc:	10c5883a 	add	r2,r2,r3
 4006f00:	10c00504 	addi	r3,r2,20
 4006f04:	e0bffd8b 	ldhu	r2,-10(fp)
 4006f08:	1880000d 	sth	r2,0(r3)
    p->fifo_y[p->fifo_front] = y;    
 4006f0c:	e0bfff17 	ldw	r2,-4(fp)
 4006f10:	1080040b 	ldhu	r2,16(r2)
 4006f14:	10bfffcc 	andi	r2,r2,65535
 4006f18:	e0ffff17 	ldw	r3,-4(fp)
 4006f1c:	1085883a 	add	r2,r2,r2
 4006f20:	10c5883a 	add	r2,r2,r3
 4006f24:	10c00a04 	addi	r3,r2,40
 4006f28:	e0bffd0b 	ldhu	r2,-12(fp)
 4006f2c:	1880000d 	sth	r2,0(r3)
    p->fifo_front++;
 4006f30:	e0bfff17 	ldw	r2,-4(fp)
 4006f34:	1080040b 	ldhu	r2,16(r2)
 4006f38:	10800044 	addi	r2,r2,1
 4006f3c:	1007883a 	mov	r3,r2
 4006f40:	e0bfff17 	ldw	r2,-4(fp)
 4006f44:	10c0040d 	sth	r3,16(r2)
    p->fifo_front %= FIFO_SIZE;   
 4006f48:	e0bfff17 	ldw	r2,-4(fp)
 4006f4c:	1080040b 	ldhu	r2,16(r2)
 4006f50:	113fffcc 	andi	r4,r2,65535
 4006f54:	01400284 	movi	r5,10
 4006f58:	40083ec0 	call	40083ec <__umodsi3>
 4006f5c:	1007883a 	mov	r3,r2
 4006f60:	e0bfff17 	ldw	r2,-4(fp)
 4006f64:	10c0040d 	sth	r3,16(r2)
    
}
 4006f68:	e037883a 	mov	sp,fp
 4006f6c:	dfc00117 	ldw	ra,4(sp)
 4006f70:	df000017 	ldw	fp,0(sp)
 4006f74:	dec00204 	addi	sp,sp,8
 4006f78:	f800283a 	ret

04006f7c <touch_alarm_callback>:

// polling x/y when penirq_n is low
alt_u32 touch_alarm_callback(void *context){
 4006f7c:	defffc04 	addi	sp,sp,-16
 4006f80:	dfc00315 	stw	ra,12(sp)
 4006f84:	df000215 	stw	fp,8(sp)
 4006f88:	df000204 	addi	fp,sp,8
 4006f8c:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
 4006f90:	e0bfff17 	ldw	r2,-4(fp)
 4006f94:	e0bffe15 	stw	r2,-8(fp)
    
    if (touch_is_pen_pressed(p)){//Touch.pen_pressed){
 4006f98:	e13ffe17 	ldw	r4,-8(fp)
 4006f9c:	4006ac80 	call	4006ac8 <touch_is_pen_pressed>
 4006fa0:	1005003a 	cmpeq	r2,r2,zero
 4006fa4:	10000a1e 	bne	r2,zero,4006fd0 <touch_alarm_callback+0x54>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4006fa8:	008100f4 	movhi	r2,1027
 4006fac:	10933b04 	addi	r2,r2,19692
 4006fb0:	10800017 	ldw	r2,0(r2)
 4006fb4:	1007883a 	mov	r3,r2
        if (alt_nticks() > p->next_active_time)
 4006fb8:	e0bffe17 	ldw	r2,-8(fp)
 4006fbc:	10801717 	ldw	r2,92(r2)
 4006fc0:	10c0072e 	bgeu	r2,r3,4006fe0 <touch_alarm_callback+0x64>
            touch_get_xy(p);
 4006fc4:	e13ffe17 	ldw	r4,-8(fp)
 4006fc8:	4006c980 	call	4006c98 <touch_get_xy>
 4006fcc:	00000406 	br	4006fe0 <touch_alarm_callback+0x64>
      //  p->last_active_time = alt_nticks(); 
    }else{
       // touch_empty_fifo(p);
        //if ((alt_nticks() - Touch.last_active_time) > alt_ticks_per_second()/10){
         touch_enable_penirq(p);
 4006fd0:	e13ffe17 	ldw	r4,-8(fp)
 4006fd4:	4006b200 	call	4006b20 <touch_enable_penirq>
         touch_clear_input(p);
 4006fd8:	e13ffe17 	ldw	r4,-8(fp)
 4006fdc:	4006c680 	call	4006c68 <touch_clear_input>
          //  p->last_active_time = alt_nticks(); 
        //}            
    }        
    return p->alarm_dur;
 4006fe0:	e0bffe17 	ldw	r2,-8(fp)
 4006fe4:	10801617 	ldw	r2,88(r2)
}
 4006fe8:	e037883a 	mov	sp,fp
 4006fec:	dfc00117 	ldw	ra,4(sp)
 4006ff0:	df000017 	ldw	fp,0(sp)
 4006ff4:	dec00204 	addi	sp,sp,8
 4006ff8:	f800283a 	ret

04006ffc <touch_xy_transform>:

void touch_xy_transform(int *x, int *y){
 4006ffc:	defff704 	addi	sp,sp,-36
 4007000:	dfc00815 	stw	ra,32(sp)
 4007004:	df000715 	stw	fp,28(sp)
 4007008:	df000704 	addi	fp,sp,28
 400700c:	e13ffc15 	stw	r4,-16(fp)
 4007010:	e17ffd15 	stw	r5,-12(fp)
    int xx, yy;
    const int y_ignore = 200;
 4007014:	00803204 	movi	r2,200
 4007018:	e0bff915 	stw	r2,-28(fp)
    xx = *y;
 400701c:	e0bffd17 	ldw	r2,-12(fp)
 4007020:	10800017 	ldw	r2,0(r2)
 4007024:	e0bffb15 	stw	r2,-20(fp)
    yy = *x;
 4007028:	e0bffc17 	ldw	r2,-16(fp)
 400702c:	10800017 	ldw	r2,0(r2)
 4007030:	e0bffa15 	stw	r2,-24(fp)

    // scale & swap
   // xx = 4096 -1 - xx;
    xx = xx * X_RES / 4096;
 4007034:	e0bffb17 	ldw	r2,-20(fp)
 4007038:	10803c24 	muli	r2,r2,240
 400703c:	e0bffe15 	stw	r2,-8(fp)
 4007040:	e0fffe17 	ldw	r3,-8(fp)
 4007044:	1804403a 	cmpge	r2,r3,zero
 4007048:	1000031e 	bne	r2,zero,4007058 <touch_xy_transform+0x5c>
 400704c:	e0bffe17 	ldw	r2,-8(fp)
 4007050:	1083ffc4 	addi	r2,r2,4095
 4007054:	e0bffe15 	stw	r2,-8(fp)
 4007058:	e0fffe17 	ldw	r3,-8(fp)
 400705c:	1805d33a 	srai	r2,r3,12
 4007060:	e0bffb15 	stw	r2,-20(fp)

   // yy = 4096 -1 - yy;

    // special calibrate for LT24
    if (yy > (4096-y_ignore))
 4007064:	00c40004 	movi	r3,4096
 4007068:	e0bff917 	ldw	r2,-28(fp)
 400706c:	1887c83a 	sub	r3,r3,r2
 4007070:	e0bffa17 	ldw	r2,-24(fp)
 4007074:	1880040e 	bge	r3,r2,4007088 <touch_xy_transform+0x8c>
    	yy = 4096-y_ignore;
 4007078:	00840004 	movi	r2,4096
 400707c:	e0fff917 	ldw	r3,-28(fp)
 4007080:	10c5c83a 	sub	r2,r2,r3
 4007084:	e0bffa15 	stw	r2,-24(fp)
    yy = yy * 4095/ (4096-y_ignore);
 4007088:	e0bffa17 	ldw	r2,-24(fp)
 400708c:	1103ffe4 	muli	r4,r2,4095
 4007090:	00c40004 	movi	r3,4096
 4007094:	e0bff917 	ldw	r2,-28(fp)
 4007098:	188bc83a 	sub	r5,r3,r2
 400709c:	40083240 	call	4008324 <__divsi3>
 40070a0:	e0bffa15 	stw	r2,-24(fp)
    
    yy = yy * Y_RES / 4096;
 40070a4:	e0bffa17 	ldw	r2,-24(fp)
 40070a8:	10805024 	muli	r2,r2,320
 40070ac:	e0bfff15 	stw	r2,-4(fp)
 40070b0:	e0ffff17 	ldw	r3,-4(fp)
 40070b4:	1804403a 	cmpge	r2,r3,zero
 40070b8:	1000031e 	bne	r2,zero,40070c8 <touch_xy_transform+0xcc>
 40070bc:	e0bfff17 	ldw	r2,-4(fp)
 40070c0:	1083ffc4 	addi	r2,r2,4095
 40070c4:	e0bfff15 	stw	r2,-4(fp)
 40070c8:	e0ffff17 	ldw	r3,-4(fp)
 40070cc:	1805d33a 	srai	r2,r3,12
 40070d0:	e0bffa15 	stw	r2,-24(fp)

    // swap
    *x = xx;
 40070d4:	e0fffc17 	ldw	r3,-16(fp)
 40070d8:	e0bffb17 	ldw	r2,-20(fp)
 40070dc:	18800015 	stw	r2,0(r3)
    *y = yy;    
 40070e0:	e0fffd17 	ldw	r3,-12(fp)
 40070e4:	e0bffa17 	ldw	r2,-24(fp)
 40070e8:	18800015 	stw	r2,0(r3)
    
}
 40070ec:	e037883a 	mov	sp,fp
 40070f0:	dfc00117 	ldw	ra,4(sp)
 40070f4:	df000017 	ldw	fp,0(sp)
 40070f8:	dec00204 	addi	sp,sp,8
 40070fc:	f800283a 	ret

04007100 <sqrt>:
 4007100:	defff104 	addi	sp,sp,-60
 4007104:	dd000d15 	stw	r20,52(sp)
 4007108:	050100f4 	movhi	r20,1027
 400710c:	a5059804 	addi	r20,r20,5728
 4007110:	dcc00c15 	stw	r19,48(sp)
 4007114:	dc800b15 	stw	r18,44(sp)
 4007118:	dc400a15 	stw	r17,40(sp)
 400711c:	dc000915 	stw	r16,36(sp)
 4007120:	2025883a 	mov	r18,r4
 4007124:	dfc00e15 	stw	ra,56(sp)
 4007128:	2827883a 	mov	r19,r5
 400712c:	40072300 	call	4007230 <__ieee754_sqrt>
 4007130:	a1000017 	ldw	r4,0(r20)
 4007134:	1021883a 	mov	r16,r2
 4007138:	00bfffc4 	movi	r2,-1
 400713c:	1823883a 	mov	r17,r3
 4007140:	20800a26 	beq	r4,r2,400716c <sqrt+0x6c>
 4007144:	9009883a 	mov	r4,r18
 4007148:	980b883a 	mov	r5,r19
 400714c:	40074f80 	call	40074f8 <__isnand>
 4007150:	1000061e 	bne	r2,zero,400716c <sqrt+0x6c>
 4007154:	000d883a 	mov	r6,zero
 4007158:	000f883a 	mov	r7,zero
 400715c:	9009883a 	mov	r4,r18
 4007160:	980b883a 	mov	r5,r19
 4007164:	40080500 	call	4008050 <__ltdf2>
 4007168:	10000a16 	blt	r2,zero,4007194 <sqrt+0x94>
 400716c:	8005883a 	mov	r2,r16
 4007170:	8807883a 	mov	r3,r17
 4007174:	dfc00e17 	ldw	ra,56(sp)
 4007178:	dd000d17 	ldw	r20,52(sp)
 400717c:	dcc00c17 	ldw	r19,48(sp)
 4007180:	dc800b17 	ldw	r18,44(sp)
 4007184:	dc400a17 	ldw	r17,40(sp)
 4007188:	dc000917 	ldw	r16,36(sp)
 400718c:	dec00f04 	addi	sp,sp,60
 4007190:	f800283a 	ret
 4007194:	a4000017 	ldw	r16,0(r20)
 4007198:	00800044 	movi	r2,1
 400719c:	00c100f4 	movhi	r3,1027
 40071a0:	18f75304 	addi	r3,r3,-8884
 40071a4:	d8800015 	stw	r2,0(sp)
 40071a8:	d8c00115 	stw	r3,4(sp)
 40071ac:	dcc00315 	stw	r19,12(sp)
 40071b0:	d8000815 	stw	zero,32(sp)
 40071b4:	dc800415 	stw	r18,16(sp)
 40071b8:	dcc00515 	stw	r19,20(sp)
 40071bc:	dc800215 	stw	r18,8(sp)
 40071c0:	80000a1e 	bne	r16,zero,40071ec <sqrt+0xec>
 40071c4:	d8000615 	stw	zero,24(sp)
 40071c8:	d8000715 	stw	zero,28(sp)
 40071cc:	d809883a 	mov	r4,sp
 40071d0:	40075280 	call	4007528 <matherr>
 40071d4:	10000e26 	beq	r2,zero,4007210 <sqrt+0x110>
 40071d8:	d8800817 	ldw	r2,32(sp)
 40071dc:	1000101e 	bne	r2,zero,4007220 <sqrt+0x120>
 40071e0:	dc000617 	ldw	r16,24(sp)
 40071e4:	dc400717 	ldw	r17,28(sp)
 40071e8:	003fe006 	br	400716c <sqrt+0x6c>
 40071ec:	0009883a 	mov	r4,zero
 40071f0:	000d883a 	mov	r6,zero
 40071f4:	000b883a 	mov	r5,zero
 40071f8:	000f883a 	mov	r7,zero
 40071fc:	4007df80 	call	4007df8 <__divdf3>
 4007200:	d8800615 	stw	r2,24(sp)
 4007204:	00800084 	movi	r2,2
 4007208:	d8c00715 	stw	r3,28(sp)
 400720c:	80bfef1e 	bne	r16,r2,40071cc <sqrt+0xcc>
 4007210:	4008a200 	call	4008a20 <__errno>
 4007214:	00c00844 	movi	r3,33
 4007218:	10c00015 	stw	r3,0(r2)
 400721c:	003fee06 	br	40071d8 <sqrt+0xd8>
 4007220:	4008a200 	call	4008a20 <__errno>
 4007224:	d8c00817 	ldw	r3,32(sp)
 4007228:	10c00015 	stw	r3,0(r2)
 400722c:	003fec06 	br	40071e0 <sqrt+0xe0>

04007230 <__ieee754_sqrt>:
 4007230:	defffd04 	addi	sp,sp,-12
 4007234:	dc000015 	stw	r16,0(sp)
 4007238:	009ffc34 	movhi	r2,32752
 400723c:	2021883a 	mov	r16,r4
 4007240:	291ffc2c 	andhi	r4,r5,32752
 4007244:	dc400115 	stw	r17,4(sp)
 4007248:	dfc00215 	stw	ra,8(sp)
 400724c:	2823883a 	mov	r17,r5
 4007250:	280f883a 	mov	r7,r5
 4007254:	2807883a 	mov	r3,r5
 4007258:	8011883a 	mov	r8,r16
 400725c:	20807d26 	beq	r4,r2,4007454 <__ieee754_sqrt+0x224>
 4007260:	01408d0e 	bge	zero,r5,4007498 <__ieee754_sqrt+0x268>
 4007264:	380dd53a 	srai	r6,r7,20
 4007268:	3000131e 	bne	r6,zero,40072b8 <__ieee754_sqrt+0x88>
 400726c:	1800041e 	bne	r3,zero,4007280 <__ieee754_sqrt+0x50>
 4007270:	400ed2fa 	srli	r7,r8,11
 4007274:	31bffac4 	addi	r6,r6,-21
 4007278:	4010957a 	slli	r8,r8,21
 400727c:	383ffc26 	beq	r7,zero,4007270 <__ieee754_sqrt+0x40>
 4007280:	3880042c 	andhi	r2,r7,16
 4007284:	1000991e 	bne	r2,zero,40074ec <__ieee754_sqrt+0x2bc>
 4007288:	0009883a 	mov	r4,zero
 400728c:	39cf883a 	add	r7,r7,r7
 4007290:	3880042c 	andhi	r2,r7,16
 4007294:	21000044 	addi	r4,r4,1
 4007298:	103ffc26 	beq	r2,zero,400728c <__ieee754_sqrt+0x5c>
 400729c:	00800804 	movi	r2,32
 40072a0:	1105c83a 	sub	r2,r2,r4
 40072a4:	4086d83a 	srl	r3,r8,r2
 40072a8:	4110983a 	sll	r8,r8,r4
 40072ac:	3105c83a 	sub	r2,r6,r4
 40072b0:	38ceb03a 	or	r7,r7,r3
 40072b4:	11800044 	addi	r6,r2,1
 40072b8:	31bf0044 	addi	r6,r6,-1023
 40072bc:	30c0004c 	andi	r3,r6,1
 40072c0:	00800434 	movhi	r2,16
 40072c4:	10bfffc4 	addi	r2,r2,-1
 40072c8:	3884703a 	and	r2,r7,r2
 40072cc:	1807003a 	cmpeq	r3,r3,zero
 40072d0:	11000434 	orhi	r4,r2,16
 40072d4:	18005426 	beq	r3,zero,4007428 <__ieee754_sqrt+0x1f8>
 40072d8:	4004d7fa 	srli	r2,r8,31
 40072dc:	4207883a 	add	r3,r8,r8
 40072e0:	02800834 	movhi	r10,32
 40072e4:	1105883a 	add	r2,r2,r4
 40072e8:	2089883a 	add	r4,r4,r2
 40072ec:	0011883a 	mov	r8,zero
 40072f0:	000b883a 	mov	r5,zero
 40072f4:	0013883a 	mov	r9,zero
 40072f8:	02c00584 	movi	r11,22
 40072fc:	520f883a 	add	r7,r10,r8
 4007300:	1804d7fa 	srli	r2,r3,31
 4007304:	4a400044 	addi	r9,r9,1
 4007308:	18c7883a 	add	r3,r3,r3
 400730c:	21c00316 	blt	r4,r7,400731c <__ieee754_sqrt+0xec>
 4007310:	21c9c83a 	sub	r4,r4,r7
 4007314:	2a8b883a 	add	r5,r5,r10
 4007318:	51d1883a 	add	r8,r10,r7
 400731c:	1105883a 	add	r2,r2,r4
 4007320:	5014d07a 	srli	r10,r10,1
 4007324:	2089883a 	add	r4,r4,r2
 4007328:	4afff41e 	bne	r9,r11,40072fc <__ieee754_sqrt+0xcc>
 400732c:	02600034 	movhi	r9,32768
 4007330:	0017883a 	mov	r11,zero
 4007334:	0019883a 	mov	r12,zero
 4007338:	0015883a 	mov	r10,zero
 400733c:	4821883a 	mov	r16,r9
 4007340:	03c00804 	movi	r15,32
 4007344:	00000806 	br	4007368 <__ieee754_sqrt+0x138>
 4007348:	22003426 	beq	r4,r8,400741c <__ieee754_sqrt+0x1ec>
 400734c:	1804d7fa 	srli	r2,r3,31
 4007350:	52800044 	addi	r10,r10,1
 4007354:	18c7883a 	add	r3,r3,r3
 4007358:	1105883a 	add	r2,r2,r4
 400735c:	2089883a 	add	r4,r4,r2
 4007360:	4812d07a 	srli	r9,r9,1
 4007364:	53c01326 	beq	r10,r15,40073b4 <__ieee754_sqrt+0x184>
 4007368:	4acf883a 	add	r7,r9,r11
 400736c:	413ff60e 	bge	r8,r4,4007348 <__ieee754_sqrt+0x118>
 4007370:	38a0002c 	andhi	r2,r7,32768
 4007374:	3a57883a 	add	r11,r7,r9
 4007378:	14002426 	beq	r2,r16,400740c <__ieee754_sqrt+0x1dc>
 400737c:	4005883a 	mov	r2,r8
 4007380:	2209c83a 	sub	r4,r4,r8
 4007384:	19c0012e 	bgeu	r3,r7,400738c <__ieee754_sqrt+0x15c>
 4007388:	213fffc4 	addi	r4,r4,-1
 400738c:	19c7c83a 	sub	r3,r3,r7
 4007390:	1011883a 	mov	r8,r2
 4007394:	1804d7fa 	srli	r2,r3,31
 4007398:	52800044 	addi	r10,r10,1
 400739c:	6259883a 	add	r12,r12,r9
 40073a0:	1105883a 	add	r2,r2,r4
 40073a4:	18c7883a 	add	r3,r3,r3
 40073a8:	2089883a 	add	r4,r4,r2
 40073ac:	4812d07a 	srli	r9,r9,1
 40073b0:	53ffed1e 	bne	r10,r15,4007368 <__ieee754_sqrt+0x138>
 40073b4:	20c4b03a 	or	r2,r4,r3
 40073b8:	1000201e 	bne	r2,zero,400743c <__ieee754_sqrt+0x20c>
 40073bc:	600ed07a 	srli	r7,r12,1
 40073c0:	2880004c 	andi	r2,r5,1
 40073c4:	1005003a 	cmpeq	r2,r2,zero
 40073c8:	1000011e 	bne	r2,zero,40073d0 <__ieee754_sqrt+0x1a0>
 40073cc:	39e00034 	orhi	r7,r7,32768
 40073d0:	300dd07a 	srai	r6,r6,1
 40073d4:	280bd07a 	srai	r5,r5,1
 40073d8:	010ff834 	movhi	r4,16352
 40073dc:	300c953a 	slli	r6,r6,20
 40073e0:	290b883a 	add	r5,r5,r4
 40073e4:	3821883a 	mov	r16,r7
 40073e8:	299d883a 	add	r14,r5,r6
 40073ec:	7023883a 	mov	r17,r14
 40073f0:	8005883a 	mov	r2,r16
 40073f4:	8807883a 	mov	r3,r17
 40073f8:	dfc00217 	ldw	ra,8(sp)
 40073fc:	dc400117 	ldw	r17,4(sp)
 4007400:	dc000017 	ldw	r16,0(sp)
 4007404:	dec00304 	addi	sp,sp,12
 4007408:	f800283a 	ret
 400740c:	5884703a 	and	r2,r11,r2
 4007410:	103fda1e 	bne	r2,zero,400737c <__ieee754_sqrt+0x14c>
 4007414:	40800044 	addi	r2,r8,1
 4007418:	003fd906 	br	4007380 <__ieee754_sqrt+0x150>
 400741c:	19ffd42e 	bgeu	r3,r7,4007370 <__ieee754_sqrt+0x140>
 4007420:	2011883a 	mov	r8,r4
 4007424:	003fc906 	br	400734c <__ieee754_sqrt+0x11c>
 4007428:	4004d7fa 	srli	r2,r8,31
 400742c:	4211883a 	add	r8,r8,r8
 4007430:	1105883a 	add	r2,r2,r4
 4007434:	2089883a 	add	r4,r4,r2
 4007438:	003fa706 	br	40072d8 <__ieee754_sqrt+0xa8>
 400743c:	00bfffc4 	movi	r2,-1
 4007440:	60802726 	beq	r12,r2,40074e0 <__ieee754_sqrt+0x2b0>
 4007444:	6080004c 	andi	r2,r12,1
 4007448:	6085883a 	add	r2,r12,r2
 400744c:	100ed07a 	srli	r7,r2,1
 4007450:	003fdb06 	br	40073c0 <__ieee754_sqrt+0x190>
 4007454:	8009883a 	mov	r4,r16
 4007458:	800d883a 	mov	r6,r16
 400745c:	4007a340 	call	4007a34 <__muldf3>
 4007460:	180f883a 	mov	r7,r3
 4007464:	880b883a 	mov	r5,r17
 4007468:	8009883a 	mov	r4,r16
 400746c:	100d883a 	mov	r6,r2
 4007470:	40079c00 	call	40079c0 <__adddf3>
 4007474:	1021883a 	mov	r16,r2
 4007478:	1823883a 	mov	r17,r3
 400747c:	8005883a 	mov	r2,r16
 4007480:	8807883a 	mov	r3,r17
 4007484:	dfc00217 	ldw	ra,8(sp)
 4007488:	dc400117 	ldw	r17,4(sp)
 400748c:	dc000017 	ldw	r16,0(sp)
 4007490:	dec00304 	addi	sp,sp,12
 4007494:	f800283a 	ret
 4007498:	00a00034 	movhi	r2,32768
 400749c:	10bfffc4 	addi	r2,r2,-1
 40074a0:	2884703a 	and	r2,r5,r2
 40074a4:	8084b03a 	or	r2,r16,r2
 40074a8:	103fd126 	beq	r2,zero,40073f0 <__ieee754_sqrt+0x1c0>
 40074ac:	283f6d26 	beq	r5,zero,4007264 <__ieee754_sqrt+0x34>
 40074b0:	280f883a 	mov	r7,r5
 40074b4:	8009883a 	mov	r4,r16
 40074b8:	800d883a 	mov	r6,r16
 40074bc:	40079400 	call	4007940 <__subdf3>
 40074c0:	1009883a 	mov	r4,r2
 40074c4:	180b883a 	mov	r5,r3
 40074c8:	100d883a 	mov	r6,r2
 40074cc:	180f883a 	mov	r7,r3
 40074d0:	4007df80 	call	4007df8 <__divdf3>
 40074d4:	1021883a 	mov	r16,r2
 40074d8:	1823883a 	mov	r17,r3
 40074dc:	003fc406 	br	40073f0 <__ieee754_sqrt+0x1c0>
 40074e0:	29400044 	addi	r5,r5,1
 40074e4:	000f883a 	mov	r7,zero
 40074e8:	003fb506 	br	40073c0 <__ieee754_sqrt+0x190>
 40074ec:	0009883a 	mov	r4,zero
 40074f0:	00800804 	movi	r2,32
 40074f4:	003f6b06 	br	40072a4 <__ieee754_sqrt+0x74>

040074f8 <__isnand>:
 40074f8:	200d883a 	mov	r6,r4
 40074fc:	0109c83a 	sub	r4,zero,r4
 4007500:	2188b03a 	or	r4,r4,r6
 4007504:	2008d7fa 	srli	r4,r4,31
 4007508:	00a00034 	movhi	r2,32768
 400750c:	10bfffc4 	addi	r2,r2,-1
 4007510:	1144703a 	and	r2,r2,r5
 4007514:	2088b03a 	or	r4,r4,r2
 4007518:	009ffc34 	movhi	r2,32752
 400751c:	1105c83a 	sub	r2,r2,r4
 4007520:	1004d7fa 	srli	r2,r2,31
 4007524:	f800283a 	ret

04007528 <matherr>:
 4007528:	0005883a 	mov	r2,zero
 400752c:	f800283a 	ret

04007530 <_fpadd_parts>:
 4007530:	defff804 	addi	sp,sp,-32
 4007534:	dcc00315 	stw	r19,12(sp)
 4007538:	2027883a 	mov	r19,r4
 400753c:	21000017 	ldw	r4,0(r4)
 4007540:	00c00044 	movi	r3,1
 4007544:	dd400515 	stw	r21,20(sp)
 4007548:	dd000415 	stw	r20,16(sp)
 400754c:	ddc00715 	stw	r23,28(sp)
 4007550:	dd800615 	stw	r22,24(sp)
 4007554:	dc800215 	stw	r18,8(sp)
 4007558:	dc400115 	stw	r17,4(sp)
 400755c:	dc000015 	stw	r16,0(sp)
 4007560:	282b883a 	mov	r21,r5
 4007564:	3029883a 	mov	r20,r6
 4007568:	1900632e 	bgeu	r3,r4,40076f8 <_fpadd_parts+0x1c8>
 400756c:	28800017 	ldw	r2,0(r5)
 4007570:	1880812e 	bgeu	r3,r2,4007778 <_fpadd_parts+0x248>
 4007574:	00c00104 	movi	r3,4
 4007578:	20c0dc26 	beq	r4,r3,40078ec <_fpadd_parts+0x3bc>
 400757c:	10c07e26 	beq	r2,r3,4007778 <_fpadd_parts+0x248>
 4007580:	00c00084 	movi	r3,2
 4007584:	10c06726 	beq	r2,r3,4007724 <_fpadd_parts+0x1f4>
 4007588:	20c07b26 	beq	r4,r3,4007778 <_fpadd_parts+0x248>
 400758c:	9dc00217 	ldw	r23,8(r19)
 4007590:	28c00217 	ldw	r3,8(r5)
 4007594:	9c400317 	ldw	r17,12(r19)
 4007598:	2bc00317 	ldw	r15,12(r5)
 400759c:	b8cdc83a 	sub	r6,r23,r3
 40075a0:	9c800417 	ldw	r18,16(r19)
 40075a4:	2c000417 	ldw	r16,16(r5)
 40075a8:	3009883a 	mov	r4,r6
 40075ac:	30009716 	blt	r6,zero,400780c <_fpadd_parts+0x2dc>
 40075b0:	00800fc4 	movi	r2,63
 40075b4:	11806b16 	blt	r2,r6,4007764 <_fpadd_parts+0x234>
 40075b8:	0100a40e 	bge	zero,r4,400784c <_fpadd_parts+0x31c>
 40075bc:	35bff804 	addi	r22,r6,-32
 40075c0:	b000bc16 	blt	r22,zero,40078b4 <_fpadd_parts+0x384>
 40075c4:	8596d83a 	srl	r11,r16,r22
 40075c8:	0019883a 	mov	r12,zero
 40075cc:	0013883a 	mov	r9,zero
 40075d0:	01000044 	movi	r4,1
 40075d4:	0015883a 	mov	r10,zero
 40075d8:	b000be16 	blt	r22,zero,40078d4 <_fpadd_parts+0x3a4>
 40075dc:	2590983a 	sll	r8,r4,r22
 40075e0:	000f883a 	mov	r7,zero
 40075e4:	00bfffc4 	movi	r2,-1
 40075e8:	3889883a 	add	r4,r7,r2
 40075ec:	408b883a 	add	r5,r8,r2
 40075f0:	21cd803a 	cmpltu	r6,r4,r7
 40075f4:	314b883a 	add	r5,r6,r5
 40075f8:	7904703a 	and	r2,r15,r4
 40075fc:	8146703a 	and	r3,r16,r5
 4007600:	10c4b03a 	or	r2,r2,r3
 4007604:	10000226 	beq	r2,zero,4007610 <_fpadd_parts+0xe0>
 4007608:	02400044 	movi	r9,1
 400760c:	0015883a 	mov	r10,zero
 4007610:	5a5eb03a 	or	r15,r11,r9
 4007614:	62a0b03a 	or	r16,r12,r10
 4007618:	99400117 	ldw	r5,4(r19)
 400761c:	a8800117 	ldw	r2,4(r21)
 4007620:	28806e26 	beq	r5,r2,40077dc <_fpadd_parts+0x2ac>
 4007624:	28006626 	beq	r5,zero,40077c0 <_fpadd_parts+0x290>
 4007628:	7c45c83a 	sub	r2,r15,r17
 400762c:	7889803a 	cmpltu	r4,r15,r2
 4007630:	8487c83a 	sub	r3,r16,r18
 4007634:	1909c83a 	sub	r4,r3,r4
 4007638:	100d883a 	mov	r6,r2
 400763c:	200f883a 	mov	r7,r4
 4007640:	38007716 	blt	r7,zero,4007820 <_fpadd_parts+0x2f0>
 4007644:	a5c00215 	stw	r23,8(r20)
 4007648:	a1c00415 	stw	r7,16(r20)
 400764c:	a0000115 	stw	zero,4(r20)
 4007650:	a1800315 	stw	r6,12(r20)
 4007654:	a2000317 	ldw	r8,12(r20)
 4007658:	a2400417 	ldw	r9,16(r20)
 400765c:	00bfffc4 	movi	r2,-1
 4007660:	408b883a 	add	r5,r8,r2
 4007664:	2a09803a 	cmpltu	r4,r5,r8
 4007668:	488d883a 	add	r6,r9,r2
 400766c:	01c40034 	movhi	r7,4096
 4007670:	39ffffc4 	addi	r7,r7,-1
 4007674:	218d883a 	add	r6,r4,r6
 4007678:	39801736 	bltu	r7,r6,40076d8 <_fpadd_parts+0x1a8>
 400767c:	31c06526 	beq	r6,r7,4007814 <_fpadd_parts+0x2e4>
 4007680:	a3000217 	ldw	r12,8(r20)
 4007684:	4209883a 	add	r4,r8,r8
 4007688:	00bfffc4 	movi	r2,-1
 400768c:	220f803a 	cmpltu	r7,r4,r8
 4007690:	4a4b883a 	add	r5,r9,r9
 4007694:	394f883a 	add	r7,r7,r5
 4007698:	2095883a 	add	r10,r4,r2
 400769c:	3897883a 	add	r11,r7,r2
 40076a0:	510d803a 	cmpltu	r6,r10,r4
 40076a4:	6099883a 	add	r12,r12,r2
 40076a8:	32d7883a 	add	r11,r6,r11
 40076ac:	00840034 	movhi	r2,4096
 40076b0:	10bfffc4 	addi	r2,r2,-1
 40076b4:	2011883a 	mov	r8,r4
 40076b8:	3813883a 	mov	r9,r7
 40076bc:	a1000315 	stw	r4,12(r20)
 40076c0:	a1c00415 	stw	r7,16(r20)
 40076c4:	a3000215 	stw	r12,8(r20)
 40076c8:	12c00336 	bltu	r2,r11,40076d8 <_fpadd_parts+0x1a8>
 40076cc:	58bfed1e 	bne	r11,r2,4007684 <_fpadd_parts+0x154>
 40076d0:	00bfff84 	movi	r2,-2
 40076d4:	12bfeb2e 	bgeu	r2,r10,4007684 <_fpadd_parts+0x154>
 40076d8:	a2800417 	ldw	r10,16(r20)
 40076dc:	008000c4 	movi	r2,3
 40076e0:	00c80034 	movhi	r3,8192
 40076e4:	18ffffc4 	addi	r3,r3,-1
 40076e8:	a2400317 	ldw	r9,12(r20)
 40076ec:	a0800015 	stw	r2,0(r20)
 40076f0:	1a802336 	bltu	r3,r10,4007780 <_fpadd_parts+0x250>
 40076f4:	a027883a 	mov	r19,r20
 40076f8:	9805883a 	mov	r2,r19
 40076fc:	ddc00717 	ldw	r23,28(sp)
 4007700:	dd800617 	ldw	r22,24(sp)
 4007704:	dd400517 	ldw	r21,20(sp)
 4007708:	dd000417 	ldw	r20,16(sp)
 400770c:	dcc00317 	ldw	r19,12(sp)
 4007710:	dc800217 	ldw	r18,8(sp)
 4007714:	dc400117 	ldw	r17,4(sp)
 4007718:	dc000017 	ldw	r16,0(sp)
 400771c:	dec00804 	addi	sp,sp,32
 4007720:	f800283a 	ret
 4007724:	20fff41e 	bne	r4,r3,40076f8 <_fpadd_parts+0x1c8>
 4007728:	31000015 	stw	r4,0(r6)
 400772c:	98800117 	ldw	r2,4(r19)
 4007730:	30800115 	stw	r2,4(r6)
 4007734:	98c00217 	ldw	r3,8(r19)
 4007738:	30c00215 	stw	r3,8(r6)
 400773c:	98800317 	ldw	r2,12(r19)
 4007740:	30800315 	stw	r2,12(r6)
 4007744:	98c00417 	ldw	r3,16(r19)
 4007748:	30c00415 	stw	r3,16(r6)
 400774c:	98800117 	ldw	r2,4(r19)
 4007750:	28c00117 	ldw	r3,4(r5)
 4007754:	3027883a 	mov	r19,r6
 4007758:	10c4703a 	and	r2,r2,r3
 400775c:	30800115 	stw	r2,4(r6)
 4007760:	003fe506 	br	40076f8 <_fpadd_parts+0x1c8>
 4007764:	1dc02616 	blt	r3,r23,4007800 <_fpadd_parts+0x2d0>
 4007768:	0023883a 	mov	r17,zero
 400776c:	182f883a 	mov	r23,r3
 4007770:	0025883a 	mov	r18,zero
 4007774:	003fa806 	br	4007618 <_fpadd_parts+0xe8>
 4007778:	a827883a 	mov	r19,r21
 400777c:	003fde06 	br	40076f8 <_fpadd_parts+0x1c8>
 4007780:	01800044 	movi	r6,1
 4007784:	500497fa 	slli	r2,r10,31
 4007788:	4808d07a 	srli	r4,r9,1
 400778c:	518ad83a 	srl	r5,r10,r6
 4007790:	a2000217 	ldw	r8,8(r20)
 4007794:	1108b03a 	or	r4,r2,r4
 4007798:	0007883a 	mov	r3,zero
 400779c:	4984703a 	and	r2,r9,r6
 40077a0:	208cb03a 	or	r6,r4,r2
 40077a4:	28ceb03a 	or	r7,r5,r3
 40077a8:	42000044 	addi	r8,r8,1
 40077ac:	a027883a 	mov	r19,r20
 40077b0:	a1c00415 	stw	r7,16(r20)
 40077b4:	a2000215 	stw	r8,8(r20)
 40077b8:	a1800315 	stw	r6,12(r20)
 40077bc:	003fce06 	br	40076f8 <_fpadd_parts+0x1c8>
 40077c0:	8bc5c83a 	sub	r2,r17,r15
 40077c4:	8889803a 	cmpltu	r4,r17,r2
 40077c8:	9407c83a 	sub	r3,r18,r16
 40077cc:	1909c83a 	sub	r4,r3,r4
 40077d0:	100d883a 	mov	r6,r2
 40077d4:	200f883a 	mov	r7,r4
 40077d8:	003f9906 	br	4007640 <_fpadd_parts+0x110>
 40077dc:	7c45883a 	add	r2,r15,r17
 40077e0:	13c9803a 	cmpltu	r4,r2,r15
 40077e4:	8487883a 	add	r3,r16,r18
 40077e8:	20c9883a 	add	r4,r4,r3
 40077ec:	a1400115 	stw	r5,4(r20)
 40077f0:	a5c00215 	stw	r23,8(r20)
 40077f4:	a0800315 	stw	r2,12(r20)
 40077f8:	a1000415 	stw	r4,16(r20)
 40077fc:	003fb606 	br	40076d8 <_fpadd_parts+0x1a8>
 4007800:	001f883a 	mov	r15,zero
 4007804:	0021883a 	mov	r16,zero
 4007808:	003f8306 	br	4007618 <_fpadd_parts+0xe8>
 400780c:	018dc83a 	sub	r6,zero,r6
 4007810:	003f6706 	br	40075b0 <_fpadd_parts+0x80>
 4007814:	00bfff84 	movi	r2,-2
 4007818:	117faf36 	bltu	r2,r5,40076d8 <_fpadd_parts+0x1a8>
 400781c:	003f9806 	br	4007680 <_fpadd_parts+0x150>
 4007820:	0005883a 	mov	r2,zero
 4007824:	1189c83a 	sub	r4,r2,r6
 4007828:	1105803a 	cmpltu	r2,r2,r4
 400782c:	01cbc83a 	sub	r5,zero,r7
 4007830:	2885c83a 	sub	r2,r5,r2
 4007834:	01800044 	movi	r6,1
 4007838:	a1800115 	stw	r6,4(r20)
 400783c:	a5c00215 	stw	r23,8(r20)
 4007840:	a1000315 	stw	r4,12(r20)
 4007844:	a0800415 	stw	r2,16(r20)
 4007848:	003f8206 	br	4007654 <_fpadd_parts+0x124>
 400784c:	203f7226 	beq	r4,zero,4007618 <_fpadd_parts+0xe8>
 4007850:	35bff804 	addi	r22,r6,-32
 4007854:	b9af883a 	add	r23,r23,r6
 4007858:	b0003116 	blt	r22,zero,4007920 <_fpadd_parts+0x3f0>
 400785c:	959ad83a 	srl	r13,r18,r22
 4007860:	001d883a 	mov	r14,zero
 4007864:	000f883a 	mov	r7,zero
 4007868:	01000044 	movi	r4,1
 400786c:	0011883a 	mov	r8,zero
 4007870:	b0002516 	blt	r22,zero,4007908 <_fpadd_parts+0x3d8>
 4007874:	2594983a 	sll	r10,r4,r22
 4007878:	0013883a 	mov	r9,zero
 400787c:	00bfffc4 	movi	r2,-1
 4007880:	4889883a 	add	r4,r9,r2
 4007884:	508b883a 	add	r5,r10,r2
 4007888:	224d803a 	cmpltu	r6,r4,r9
 400788c:	314b883a 	add	r5,r6,r5
 4007890:	8904703a 	and	r2,r17,r4
 4007894:	9146703a 	and	r3,r18,r5
 4007898:	10c4b03a 	or	r2,r2,r3
 400789c:	10000226 	beq	r2,zero,40078a8 <_fpadd_parts+0x378>
 40078a0:	01c00044 	movi	r7,1
 40078a4:	0011883a 	mov	r8,zero
 40078a8:	69e2b03a 	or	r17,r13,r7
 40078ac:	7224b03a 	or	r18,r14,r8
 40078b0:	003f5906 	br	4007618 <_fpadd_parts+0xe8>
 40078b4:	8407883a 	add	r3,r16,r16
 40078b8:	008007c4 	movi	r2,31
 40078bc:	1185c83a 	sub	r2,r2,r6
 40078c0:	1886983a 	sll	r3,r3,r2
 40078c4:	7996d83a 	srl	r11,r15,r6
 40078c8:	8198d83a 	srl	r12,r16,r6
 40078cc:	1ad6b03a 	or	r11,r3,r11
 40078d0:	003f3e06 	br	40075cc <_fpadd_parts+0x9c>
 40078d4:	2006d07a 	srli	r3,r4,1
 40078d8:	008007c4 	movi	r2,31
 40078dc:	1185c83a 	sub	r2,r2,r6
 40078e0:	1890d83a 	srl	r8,r3,r2
 40078e4:	218e983a 	sll	r7,r4,r6
 40078e8:	003f3e06 	br	40075e4 <_fpadd_parts+0xb4>
 40078ec:	113f821e 	bne	r2,r4,40076f8 <_fpadd_parts+0x1c8>
 40078f0:	28c00117 	ldw	r3,4(r5)
 40078f4:	98800117 	ldw	r2,4(r19)
 40078f8:	10ff7f26 	beq	r2,r3,40076f8 <_fpadd_parts+0x1c8>
 40078fc:	04c100f4 	movhi	r19,1027
 4007900:	9cf75504 	addi	r19,r19,-8876
 4007904:	003f7c06 	br	40076f8 <_fpadd_parts+0x1c8>
 4007908:	2006d07a 	srli	r3,r4,1
 400790c:	008007c4 	movi	r2,31
 4007910:	1185c83a 	sub	r2,r2,r6
 4007914:	1894d83a 	srl	r10,r3,r2
 4007918:	2192983a 	sll	r9,r4,r6
 400791c:	003fd706 	br	400787c <_fpadd_parts+0x34c>
 4007920:	9487883a 	add	r3,r18,r18
 4007924:	008007c4 	movi	r2,31
 4007928:	1185c83a 	sub	r2,r2,r6
 400792c:	1886983a 	sll	r3,r3,r2
 4007930:	899ad83a 	srl	r13,r17,r6
 4007934:	919cd83a 	srl	r14,r18,r6
 4007938:	1b5ab03a 	or	r13,r3,r13
 400793c:	003fc906 	br	4007864 <_fpadd_parts+0x334>

04007940 <__subdf3>:
 4007940:	deffea04 	addi	sp,sp,-88
 4007944:	dcc01415 	stw	r19,80(sp)
 4007948:	dcc00404 	addi	r19,sp,16
 400794c:	2011883a 	mov	r8,r4
 4007950:	2813883a 	mov	r9,r5
 4007954:	dc401315 	stw	r17,76(sp)
 4007958:	d809883a 	mov	r4,sp
 400795c:	980b883a 	mov	r5,r19
 4007960:	dc400904 	addi	r17,sp,36
 4007964:	dfc01515 	stw	ra,84(sp)
 4007968:	da400115 	stw	r9,4(sp)
 400796c:	d9c00315 	stw	r7,12(sp)
 4007970:	da000015 	stw	r8,0(sp)
 4007974:	d9800215 	stw	r6,8(sp)
 4007978:	40088200 	call	4008820 <__unpack_d>
 400797c:	d9000204 	addi	r4,sp,8
 4007980:	880b883a 	mov	r5,r17
 4007984:	40088200 	call	4008820 <__unpack_d>
 4007988:	d8800a17 	ldw	r2,40(sp)
 400798c:	880b883a 	mov	r5,r17
 4007990:	9809883a 	mov	r4,r19
 4007994:	d9800e04 	addi	r6,sp,56
 4007998:	1080005c 	xori	r2,r2,1
 400799c:	d8800a15 	stw	r2,40(sp)
 40079a0:	40075300 	call	4007530 <_fpadd_parts>
 40079a4:	1009883a 	mov	r4,r2
 40079a8:	400850c0 	call	400850c <__pack_d>
 40079ac:	dfc01517 	ldw	ra,84(sp)
 40079b0:	dcc01417 	ldw	r19,80(sp)
 40079b4:	dc401317 	ldw	r17,76(sp)
 40079b8:	dec01604 	addi	sp,sp,88
 40079bc:	f800283a 	ret

040079c0 <__adddf3>:
 40079c0:	deffea04 	addi	sp,sp,-88
 40079c4:	dcc01415 	stw	r19,80(sp)
 40079c8:	dcc00404 	addi	r19,sp,16
 40079cc:	2011883a 	mov	r8,r4
 40079d0:	2813883a 	mov	r9,r5
 40079d4:	dc401315 	stw	r17,76(sp)
 40079d8:	d809883a 	mov	r4,sp
 40079dc:	980b883a 	mov	r5,r19
 40079e0:	dc400904 	addi	r17,sp,36
 40079e4:	dfc01515 	stw	ra,84(sp)
 40079e8:	da400115 	stw	r9,4(sp)
 40079ec:	d9c00315 	stw	r7,12(sp)
 40079f0:	da000015 	stw	r8,0(sp)
 40079f4:	d9800215 	stw	r6,8(sp)
 40079f8:	40088200 	call	4008820 <__unpack_d>
 40079fc:	d9000204 	addi	r4,sp,8
 4007a00:	880b883a 	mov	r5,r17
 4007a04:	40088200 	call	4008820 <__unpack_d>
 4007a08:	d9800e04 	addi	r6,sp,56
 4007a0c:	9809883a 	mov	r4,r19
 4007a10:	880b883a 	mov	r5,r17
 4007a14:	40075300 	call	4007530 <_fpadd_parts>
 4007a18:	1009883a 	mov	r4,r2
 4007a1c:	400850c0 	call	400850c <__pack_d>
 4007a20:	dfc01517 	ldw	ra,84(sp)
 4007a24:	dcc01417 	ldw	r19,80(sp)
 4007a28:	dc401317 	ldw	r17,76(sp)
 4007a2c:	dec01604 	addi	sp,sp,88
 4007a30:	f800283a 	ret

04007a34 <__muldf3>:
 4007a34:	deffe004 	addi	sp,sp,-128
 4007a38:	dc401815 	stw	r17,96(sp)
 4007a3c:	dc400404 	addi	r17,sp,16
 4007a40:	2011883a 	mov	r8,r4
 4007a44:	2813883a 	mov	r9,r5
 4007a48:	dc001715 	stw	r16,92(sp)
 4007a4c:	d809883a 	mov	r4,sp
 4007a50:	880b883a 	mov	r5,r17
 4007a54:	dc000904 	addi	r16,sp,36
 4007a58:	dfc01f15 	stw	ra,124(sp)
 4007a5c:	da400115 	stw	r9,4(sp)
 4007a60:	d9c00315 	stw	r7,12(sp)
 4007a64:	da000015 	stw	r8,0(sp)
 4007a68:	d9800215 	stw	r6,8(sp)
 4007a6c:	ddc01e15 	stw	r23,120(sp)
 4007a70:	dd801d15 	stw	r22,116(sp)
 4007a74:	dd401c15 	stw	r21,112(sp)
 4007a78:	dd001b15 	stw	r20,108(sp)
 4007a7c:	dcc01a15 	stw	r19,104(sp)
 4007a80:	dc801915 	stw	r18,100(sp)
 4007a84:	40088200 	call	4008820 <__unpack_d>
 4007a88:	d9000204 	addi	r4,sp,8
 4007a8c:	800b883a 	mov	r5,r16
 4007a90:	40088200 	call	4008820 <__unpack_d>
 4007a94:	d9000417 	ldw	r4,16(sp)
 4007a98:	00800044 	movi	r2,1
 4007a9c:	1100102e 	bgeu	r2,r4,4007ae0 <__muldf3+0xac>
 4007aa0:	d8c00917 	ldw	r3,36(sp)
 4007aa4:	10c0062e 	bgeu	r2,r3,4007ac0 <__muldf3+0x8c>
 4007aa8:	00800104 	movi	r2,4
 4007aac:	20800a26 	beq	r4,r2,4007ad8 <__muldf3+0xa4>
 4007ab0:	1880cc26 	beq	r3,r2,4007de4 <__muldf3+0x3b0>
 4007ab4:	00800084 	movi	r2,2
 4007ab8:	20800926 	beq	r4,r2,4007ae0 <__muldf3+0xac>
 4007abc:	1880191e 	bne	r3,r2,4007b24 <__muldf3+0xf0>
 4007ac0:	d8c00a17 	ldw	r3,40(sp)
 4007ac4:	d8800517 	ldw	r2,20(sp)
 4007ac8:	8009883a 	mov	r4,r16
 4007acc:	10c4c03a 	cmpne	r2,r2,r3
 4007ad0:	d8800a15 	stw	r2,40(sp)
 4007ad4:	00000706 	br	4007af4 <__muldf3+0xc0>
 4007ad8:	00800084 	movi	r2,2
 4007adc:	1880c326 	beq	r3,r2,4007dec <__muldf3+0x3b8>
 4007ae0:	d8800517 	ldw	r2,20(sp)
 4007ae4:	d8c00a17 	ldw	r3,40(sp)
 4007ae8:	8809883a 	mov	r4,r17
 4007aec:	10c4c03a 	cmpne	r2,r2,r3
 4007af0:	d8800515 	stw	r2,20(sp)
 4007af4:	400850c0 	call	400850c <__pack_d>
 4007af8:	dfc01f17 	ldw	ra,124(sp)
 4007afc:	ddc01e17 	ldw	r23,120(sp)
 4007b00:	dd801d17 	ldw	r22,116(sp)
 4007b04:	dd401c17 	ldw	r21,112(sp)
 4007b08:	dd001b17 	ldw	r20,108(sp)
 4007b0c:	dcc01a17 	ldw	r19,104(sp)
 4007b10:	dc801917 	ldw	r18,100(sp)
 4007b14:	dc401817 	ldw	r17,96(sp)
 4007b18:	dc001717 	ldw	r16,92(sp)
 4007b1c:	dec02004 	addi	sp,sp,128
 4007b20:	f800283a 	ret
 4007b24:	dd800717 	ldw	r22,28(sp)
 4007b28:	dc800c17 	ldw	r18,48(sp)
 4007b2c:	002b883a 	mov	r21,zero
 4007b30:	0023883a 	mov	r17,zero
 4007b34:	a80b883a 	mov	r5,r21
 4007b38:	b00d883a 	mov	r6,r22
 4007b3c:	880f883a 	mov	r7,r17
 4007b40:	ddc00817 	ldw	r23,32(sp)
 4007b44:	dcc00d17 	ldw	r19,52(sp)
 4007b48:	9009883a 	mov	r4,r18
 4007b4c:	40083f40 	call	40083f4 <__muldi3>
 4007b50:	001b883a 	mov	r13,zero
 4007b54:	680f883a 	mov	r7,r13
 4007b58:	b009883a 	mov	r4,r22
 4007b5c:	000b883a 	mov	r5,zero
 4007b60:	980d883a 	mov	r6,r19
 4007b64:	b82d883a 	mov	r22,r23
 4007b68:	002f883a 	mov	r23,zero
 4007b6c:	db401615 	stw	r13,88(sp)
 4007b70:	d8801315 	stw	r2,76(sp)
 4007b74:	d8c01415 	stw	r3,80(sp)
 4007b78:	dcc01515 	stw	r19,84(sp)
 4007b7c:	40083f40 	call	40083f4 <__muldi3>
 4007b80:	b00d883a 	mov	r6,r22
 4007b84:	000b883a 	mov	r5,zero
 4007b88:	9009883a 	mov	r4,r18
 4007b8c:	b80f883a 	mov	r7,r23
 4007b90:	1021883a 	mov	r16,r2
 4007b94:	1823883a 	mov	r17,r3
 4007b98:	40083f40 	call	40083f4 <__muldi3>
 4007b9c:	8085883a 	add	r2,r16,r2
 4007ba0:	140d803a 	cmpltu	r6,r2,r16
 4007ba4:	88c7883a 	add	r3,r17,r3
 4007ba8:	30cd883a 	add	r6,r6,r3
 4007bac:	1029883a 	mov	r20,r2
 4007bb0:	302b883a 	mov	r21,r6
 4007bb4:	da801317 	ldw	r10,76(sp)
 4007bb8:	dac01417 	ldw	r11,80(sp)
 4007bbc:	db001517 	ldw	r12,84(sp)
 4007bc0:	db401617 	ldw	r13,88(sp)
 4007bc4:	3440612e 	bgeu	r6,r17,4007d4c <__muldf3+0x318>
 4007bc8:	0009883a 	mov	r4,zero
 4007bcc:	5105883a 	add	r2,r10,r4
 4007bd0:	128d803a 	cmpltu	r6,r2,r10
 4007bd4:	5d07883a 	add	r3,r11,r20
 4007bd8:	30cd883a 	add	r6,r6,r3
 4007bdc:	0021883a 	mov	r16,zero
 4007be0:	04400044 	movi	r17,1
 4007be4:	1025883a 	mov	r18,r2
 4007be8:	3027883a 	mov	r19,r6
 4007bec:	32c06236 	bltu	r6,r11,4007d78 <__muldf3+0x344>
 4007bf0:	59807a26 	beq	r11,r6,4007ddc <__muldf3+0x3a8>
 4007bf4:	680b883a 	mov	r5,r13
 4007bf8:	b80f883a 	mov	r7,r23
 4007bfc:	6009883a 	mov	r4,r12
 4007c00:	b00d883a 	mov	r6,r22
 4007c04:	40083f40 	call	40083f4 <__muldi3>
 4007c08:	1009883a 	mov	r4,r2
 4007c0c:	000f883a 	mov	r7,zero
 4007c10:	1545883a 	add	r2,r2,r21
 4007c14:	1111803a 	cmpltu	r8,r2,r4
 4007c18:	19c7883a 	add	r3,r3,r7
 4007c1c:	40c7883a 	add	r3,r8,r3
 4007c20:	88cb883a 	add	r5,r17,r3
 4007c24:	d8c00617 	ldw	r3,24(sp)
 4007c28:	8089883a 	add	r4,r16,r2
 4007c2c:	d8800b17 	ldw	r2,44(sp)
 4007c30:	18c00104 	addi	r3,r3,4
 4007c34:	240d803a 	cmpltu	r6,r4,r16
 4007c38:	10c7883a 	add	r3,r2,r3
 4007c3c:	2013883a 	mov	r9,r4
 4007c40:	d8800a17 	ldw	r2,40(sp)
 4007c44:	d9000517 	ldw	r4,20(sp)
 4007c48:	314d883a 	add	r6,r6,r5
 4007c4c:	3015883a 	mov	r10,r6
 4007c50:	2088c03a 	cmpne	r4,r4,r2
 4007c54:	00880034 	movhi	r2,8192
 4007c58:	10bfffc4 	addi	r2,r2,-1
 4007c5c:	d9000f15 	stw	r4,60(sp)
 4007c60:	d8c01015 	stw	r3,64(sp)
 4007c64:	1180162e 	bgeu	r2,r6,4007cc0 <__muldf3+0x28c>
 4007c68:	1811883a 	mov	r8,r3
 4007c6c:	101f883a 	mov	r15,r2
 4007c70:	980497fa 	slli	r2,r19,31
 4007c74:	9016d07a 	srli	r11,r18,1
 4007c78:	500697fa 	slli	r3,r10,31
 4007c7c:	480cd07a 	srli	r6,r9,1
 4007c80:	500ed07a 	srli	r7,r10,1
 4007c84:	12d6b03a 	or	r11,r2,r11
 4007c88:	00800044 	movi	r2,1
 4007c8c:	198cb03a 	or	r6,r3,r6
 4007c90:	4888703a 	and	r4,r9,r2
 4007c94:	9818d07a 	srli	r12,r19,1
 4007c98:	001b883a 	mov	r13,zero
 4007c9c:	03a00034 	movhi	r14,32768
 4007ca0:	3013883a 	mov	r9,r6
 4007ca4:	3815883a 	mov	r10,r7
 4007ca8:	4091883a 	add	r8,r8,r2
 4007cac:	20000226 	beq	r4,zero,4007cb8 <__muldf3+0x284>
 4007cb0:	5b64b03a 	or	r18,r11,r13
 4007cb4:	63a6b03a 	or	r19,r12,r14
 4007cb8:	7abfed36 	bltu	r15,r10,4007c70 <__muldf3+0x23c>
 4007cbc:	da001015 	stw	r8,64(sp)
 4007cc0:	00840034 	movhi	r2,4096
 4007cc4:	10bfffc4 	addi	r2,r2,-1
 4007cc8:	12801436 	bltu	r2,r10,4007d1c <__muldf3+0x2e8>
 4007ccc:	da001017 	ldw	r8,64(sp)
 4007cd0:	101f883a 	mov	r15,r2
 4007cd4:	4a45883a 	add	r2,r9,r9
 4007cd8:	124d803a 	cmpltu	r6,r2,r9
 4007cdc:	5287883a 	add	r3,r10,r10
 4007ce0:	9497883a 	add	r11,r18,r18
 4007ce4:	5c8f803a 	cmpltu	r7,r11,r18
 4007ce8:	9cd9883a 	add	r12,r19,r19
 4007cec:	01000044 	movi	r4,1
 4007cf0:	30cd883a 	add	r6,r6,r3
 4007cf4:	3b0f883a 	add	r7,r7,r12
 4007cf8:	423fffc4 	addi	r8,r8,-1
 4007cfc:	1013883a 	mov	r9,r2
 4007d00:	3015883a 	mov	r10,r6
 4007d04:	111ab03a 	or	r13,r2,r4
 4007d08:	98003016 	blt	r19,zero,4007dcc <__muldf3+0x398>
 4007d0c:	5825883a 	mov	r18,r11
 4007d10:	3827883a 	mov	r19,r7
 4007d14:	7abfef2e 	bgeu	r15,r10,4007cd4 <__muldf3+0x2a0>
 4007d18:	da001015 	stw	r8,64(sp)
 4007d1c:	00803fc4 	movi	r2,255
 4007d20:	488e703a 	and	r7,r9,r2
 4007d24:	00802004 	movi	r2,128
 4007d28:	0007883a 	mov	r3,zero
 4007d2c:	0011883a 	mov	r8,zero
 4007d30:	38801826 	beq	r7,r2,4007d94 <__muldf3+0x360>
 4007d34:	008000c4 	movi	r2,3
 4007d38:	d9000e04 	addi	r4,sp,56
 4007d3c:	da801215 	stw	r10,72(sp)
 4007d40:	d8800e15 	stw	r2,56(sp)
 4007d44:	da401115 	stw	r9,68(sp)
 4007d48:	003f6a06 	br	4007af4 <__muldf3+0xc0>
 4007d4c:	89802126 	beq	r17,r6,4007dd4 <__muldf3+0x3a0>
 4007d50:	0009883a 	mov	r4,zero
 4007d54:	5105883a 	add	r2,r10,r4
 4007d58:	128d803a 	cmpltu	r6,r2,r10
 4007d5c:	5d07883a 	add	r3,r11,r20
 4007d60:	30cd883a 	add	r6,r6,r3
 4007d64:	0021883a 	mov	r16,zero
 4007d68:	0023883a 	mov	r17,zero
 4007d6c:	1025883a 	mov	r18,r2
 4007d70:	3027883a 	mov	r19,r6
 4007d74:	32ff9e2e 	bgeu	r6,r11,4007bf0 <__muldf3+0x1bc>
 4007d78:	00800044 	movi	r2,1
 4007d7c:	8089883a 	add	r4,r16,r2
 4007d80:	240d803a 	cmpltu	r6,r4,r16
 4007d84:	344d883a 	add	r6,r6,r17
 4007d88:	2021883a 	mov	r16,r4
 4007d8c:	3023883a 	mov	r17,r6
 4007d90:	003f9806 	br	4007bf4 <__muldf3+0x1c0>
 4007d94:	403fe71e 	bne	r8,zero,4007d34 <__muldf3+0x300>
 4007d98:	01004004 	movi	r4,256
 4007d9c:	4904703a 	and	r2,r9,r4
 4007da0:	10c4b03a 	or	r2,r2,r3
 4007da4:	103fe31e 	bne	r2,zero,4007d34 <__muldf3+0x300>
 4007da8:	94c4b03a 	or	r2,r18,r19
 4007dac:	103fe126 	beq	r2,zero,4007d34 <__muldf3+0x300>
 4007db0:	49c5883a 	add	r2,r9,r7
 4007db4:	1251803a 	cmpltu	r8,r2,r9
 4007db8:	4291883a 	add	r8,r8,r10
 4007dbc:	013fc004 	movi	r4,-256
 4007dc0:	1112703a 	and	r9,r2,r4
 4007dc4:	4015883a 	mov	r10,r8
 4007dc8:	003fda06 	br	4007d34 <__muldf3+0x300>
 4007dcc:	6813883a 	mov	r9,r13
 4007dd0:	003fce06 	br	4007d0c <__muldf3+0x2d8>
 4007dd4:	143f7c36 	bltu	r2,r16,4007bc8 <__muldf3+0x194>
 4007dd8:	003fdd06 	br	4007d50 <__muldf3+0x31c>
 4007ddc:	12bf852e 	bgeu	r2,r10,4007bf4 <__muldf3+0x1c0>
 4007de0:	003fe506 	br	4007d78 <__muldf3+0x344>
 4007de4:	00800084 	movi	r2,2
 4007de8:	20bf351e 	bne	r4,r2,4007ac0 <__muldf3+0x8c>
 4007dec:	010100f4 	movhi	r4,1027
 4007df0:	21375504 	addi	r4,r4,-8876
 4007df4:	003f3f06 	br	4007af4 <__muldf3+0xc0>

04007df8 <__divdf3>:
 4007df8:	deffed04 	addi	sp,sp,-76
 4007dfc:	dcc01115 	stw	r19,68(sp)
 4007e00:	dcc00404 	addi	r19,sp,16
 4007e04:	2011883a 	mov	r8,r4
 4007e08:	2813883a 	mov	r9,r5
 4007e0c:	dc000e15 	stw	r16,56(sp)
 4007e10:	d809883a 	mov	r4,sp
 4007e14:	980b883a 	mov	r5,r19
 4007e18:	dc000904 	addi	r16,sp,36
 4007e1c:	dfc01215 	stw	ra,72(sp)
 4007e20:	da400115 	stw	r9,4(sp)
 4007e24:	d9c00315 	stw	r7,12(sp)
 4007e28:	da000015 	stw	r8,0(sp)
 4007e2c:	d9800215 	stw	r6,8(sp)
 4007e30:	dc801015 	stw	r18,64(sp)
 4007e34:	dc400f15 	stw	r17,60(sp)
 4007e38:	40088200 	call	4008820 <__unpack_d>
 4007e3c:	d9000204 	addi	r4,sp,8
 4007e40:	800b883a 	mov	r5,r16
 4007e44:	40088200 	call	4008820 <__unpack_d>
 4007e48:	d9000417 	ldw	r4,16(sp)
 4007e4c:	00800044 	movi	r2,1
 4007e50:	11000b2e 	bgeu	r2,r4,4007e80 <__divdf3+0x88>
 4007e54:	d9400917 	ldw	r5,36(sp)
 4007e58:	1140762e 	bgeu	r2,r5,4008034 <__divdf3+0x23c>
 4007e5c:	d8800517 	ldw	r2,20(sp)
 4007e60:	d8c00a17 	ldw	r3,40(sp)
 4007e64:	01800104 	movi	r6,4
 4007e68:	10c4f03a 	xor	r2,r2,r3
 4007e6c:	d8800515 	stw	r2,20(sp)
 4007e70:	21800226 	beq	r4,r6,4007e7c <__divdf3+0x84>
 4007e74:	00800084 	movi	r2,2
 4007e78:	2080141e 	bne	r4,r2,4007ecc <__divdf3+0xd4>
 4007e7c:	29000926 	beq	r5,r4,4007ea4 <__divdf3+0xac>
 4007e80:	9809883a 	mov	r4,r19
 4007e84:	400850c0 	call	400850c <__pack_d>
 4007e88:	dfc01217 	ldw	ra,72(sp)
 4007e8c:	dcc01117 	ldw	r19,68(sp)
 4007e90:	dc801017 	ldw	r18,64(sp)
 4007e94:	dc400f17 	ldw	r17,60(sp)
 4007e98:	dc000e17 	ldw	r16,56(sp)
 4007e9c:	dec01304 	addi	sp,sp,76
 4007ea0:	f800283a 	ret
 4007ea4:	010100f4 	movhi	r4,1027
 4007ea8:	21375504 	addi	r4,r4,-8876
 4007eac:	400850c0 	call	400850c <__pack_d>
 4007eb0:	dfc01217 	ldw	ra,72(sp)
 4007eb4:	dcc01117 	ldw	r19,68(sp)
 4007eb8:	dc801017 	ldw	r18,64(sp)
 4007ebc:	dc400f17 	ldw	r17,60(sp)
 4007ec0:	dc000e17 	ldw	r16,56(sp)
 4007ec4:	dec01304 	addi	sp,sp,76
 4007ec8:	f800283a 	ret
 4007ecc:	29805b26 	beq	r5,r6,400803c <__divdf3+0x244>
 4007ed0:	28802d26 	beq	r5,r2,4007f88 <__divdf3+0x190>
 4007ed4:	d8c00617 	ldw	r3,24(sp)
 4007ed8:	d8800b17 	ldw	r2,44(sp)
 4007edc:	d9c00817 	ldw	r7,32(sp)
 4007ee0:	dc400d17 	ldw	r17,52(sp)
 4007ee4:	188bc83a 	sub	r5,r3,r2
 4007ee8:	d9800717 	ldw	r6,28(sp)
 4007eec:	dc000c17 	ldw	r16,48(sp)
 4007ef0:	d9400615 	stw	r5,24(sp)
 4007ef4:	3c403836 	bltu	r7,r17,4007fd8 <__divdf3+0x1e0>
 4007ef8:	89c03626 	beq	r17,r7,4007fd4 <__divdf3+0x1dc>
 4007efc:	0015883a 	mov	r10,zero
 4007f00:	001d883a 	mov	r14,zero
 4007f04:	02c40034 	movhi	r11,4096
 4007f08:	001f883a 	mov	r15,zero
 4007f0c:	003f883a 	mov	ra,zero
 4007f10:	04800f44 	movi	r18,61
 4007f14:	00000f06 	br	4007f54 <__divdf3+0x15c>
 4007f18:	601d883a 	mov	r14,r12
 4007f1c:	681f883a 	mov	r15,r13
 4007f20:	400d883a 	mov	r6,r8
 4007f24:	100f883a 	mov	r7,r2
 4007f28:	3191883a 	add	r8,r6,r6
 4007f2c:	5808d07a 	srli	r4,r11,1
 4007f30:	4185803a 	cmpltu	r2,r8,r6
 4007f34:	39d3883a 	add	r9,r7,r7
 4007f38:	28c6b03a 	or	r3,r5,r3
 4007f3c:	1245883a 	add	r2,r2,r9
 4007f40:	1815883a 	mov	r10,r3
 4007f44:	2017883a 	mov	r11,r4
 4007f48:	400d883a 	mov	r6,r8
 4007f4c:	100f883a 	mov	r7,r2
 4007f50:	fc801726 	beq	ra,r18,4007fb0 <__divdf3+0x1b8>
 4007f54:	580a97fa 	slli	r5,r11,31
 4007f58:	5006d07a 	srli	r3,r10,1
 4007f5c:	ffc00044 	addi	ra,ra,1
 4007f60:	3c7ff136 	bltu	r7,r17,4007f28 <__divdf3+0x130>
 4007f64:	3411c83a 	sub	r8,r6,r16
 4007f68:	3205803a 	cmpltu	r2,r6,r8
 4007f6c:	3c53c83a 	sub	r9,r7,r17
 4007f70:	7298b03a 	or	r12,r14,r10
 4007f74:	7adab03a 	or	r13,r15,r11
 4007f78:	4885c83a 	sub	r2,r9,r2
 4007f7c:	89ffe61e 	bne	r17,r7,4007f18 <__divdf3+0x120>
 4007f80:	343fe936 	bltu	r6,r16,4007f28 <__divdf3+0x130>
 4007f84:	003fe406 	br	4007f18 <__divdf3+0x120>
 4007f88:	9809883a 	mov	r4,r19
 4007f8c:	d9800415 	stw	r6,16(sp)
 4007f90:	400850c0 	call	400850c <__pack_d>
 4007f94:	dfc01217 	ldw	ra,72(sp)
 4007f98:	dcc01117 	ldw	r19,68(sp)
 4007f9c:	dc801017 	ldw	r18,64(sp)
 4007fa0:	dc400f17 	ldw	r17,60(sp)
 4007fa4:	dc000e17 	ldw	r16,56(sp)
 4007fa8:	dec01304 	addi	sp,sp,76
 4007fac:	f800283a 	ret
 4007fb0:	00803fc4 	movi	r2,255
 4007fb4:	7090703a 	and	r8,r14,r2
 4007fb8:	00802004 	movi	r2,128
 4007fbc:	0007883a 	mov	r3,zero
 4007fc0:	0013883a 	mov	r9,zero
 4007fc4:	40800d26 	beq	r8,r2,4007ffc <__divdf3+0x204>
 4007fc8:	dbc00815 	stw	r15,32(sp)
 4007fcc:	db800715 	stw	r14,28(sp)
 4007fd0:	003fab06 	br	4007e80 <__divdf3+0x88>
 4007fd4:	343fc92e 	bgeu	r6,r16,4007efc <__divdf3+0x104>
 4007fd8:	3185883a 	add	r2,r6,r6
 4007fdc:	1189803a 	cmpltu	r4,r2,r6
 4007fe0:	39c7883a 	add	r3,r7,r7
 4007fe4:	20c9883a 	add	r4,r4,r3
 4007fe8:	297fffc4 	addi	r5,r5,-1
 4007fec:	100d883a 	mov	r6,r2
 4007ff0:	200f883a 	mov	r7,r4
 4007ff4:	d9400615 	stw	r5,24(sp)
 4007ff8:	003fc006 	br	4007efc <__divdf3+0x104>
 4007ffc:	483ff21e 	bne	r9,zero,4007fc8 <__divdf3+0x1d0>
 4008000:	01004004 	movi	r4,256
 4008004:	7104703a 	and	r2,r14,r4
 4008008:	10c4b03a 	or	r2,r2,r3
 400800c:	103fee1e 	bne	r2,zero,4007fc8 <__divdf3+0x1d0>
 4008010:	31c4b03a 	or	r2,r6,r7
 4008014:	103fec26 	beq	r2,zero,4007fc8 <__divdf3+0x1d0>
 4008018:	7205883a 	add	r2,r14,r8
 400801c:	1391803a 	cmpltu	r8,r2,r14
 4008020:	43d1883a 	add	r8,r8,r15
 4008024:	013fc004 	movi	r4,-256
 4008028:	111c703a 	and	r14,r2,r4
 400802c:	401f883a 	mov	r15,r8
 4008030:	003fe506 	br	4007fc8 <__divdf3+0x1d0>
 4008034:	8009883a 	mov	r4,r16
 4008038:	003f9206 	br	4007e84 <__divdf3+0x8c>
 400803c:	9809883a 	mov	r4,r19
 4008040:	d8000715 	stw	zero,28(sp)
 4008044:	d8000815 	stw	zero,32(sp)
 4008048:	d8000615 	stw	zero,24(sp)
 400804c:	003f8d06 	br	4007e84 <__divdf3+0x8c>

04008050 <__ltdf2>:
 4008050:	deffef04 	addi	sp,sp,-68
 4008054:	dc400f15 	stw	r17,60(sp)
 4008058:	dc400404 	addi	r17,sp,16
 400805c:	2005883a 	mov	r2,r4
 4008060:	2807883a 	mov	r3,r5
 4008064:	dc000e15 	stw	r16,56(sp)
 4008068:	d809883a 	mov	r4,sp
 400806c:	880b883a 	mov	r5,r17
 4008070:	dc000904 	addi	r16,sp,36
 4008074:	d8c00115 	stw	r3,4(sp)
 4008078:	d8800015 	stw	r2,0(sp)
 400807c:	d9800215 	stw	r6,8(sp)
 4008080:	dfc01015 	stw	ra,64(sp)
 4008084:	d9c00315 	stw	r7,12(sp)
 4008088:	40088200 	call	4008820 <__unpack_d>
 400808c:	d9000204 	addi	r4,sp,8
 4008090:	800b883a 	mov	r5,r16
 4008094:	40088200 	call	4008820 <__unpack_d>
 4008098:	d8800417 	ldw	r2,16(sp)
 400809c:	00c00044 	movi	r3,1
 40080a0:	180d883a 	mov	r6,r3
 40080a4:	1880062e 	bgeu	r3,r2,40080c0 <__ltdf2+0x70>
 40080a8:	d8800917 	ldw	r2,36(sp)
 40080ac:	8809883a 	mov	r4,r17
 40080b0:	800b883a 	mov	r5,r16
 40080b4:	1880022e 	bgeu	r3,r2,40080c0 <__ltdf2+0x70>
 40080b8:	40089580 	call	4008958 <__fpcmp_parts_d>
 40080bc:	100d883a 	mov	r6,r2
 40080c0:	3005883a 	mov	r2,r6
 40080c4:	dfc01017 	ldw	ra,64(sp)
 40080c8:	dc400f17 	ldw	r17,60(sp)
 40080cc:	dc000e17 	ldw	r16,56(sp)
 40080d0:	dec01104 	addi	sp,sp,68
 40080d4:	f800283a 	ret

040080d8 <__floatsidf>:
 40080d8:	2006d7fa 	srli	r3,r4,31
 40080dc:	defff604 	addi	sp,sp,-40
 40080e0:	008000c4 	movi	r2,3
 40080e4:	dfc00915 	stw	ra,36(sp)
 40080e8:	dcc00815 	stw	r19,32(sp)
 40080ec:	dc800715 	stw	r18,28(sp)
 40080f0:	dc400615 	stw	r17,24(sp)
 40080f4:	dc000515 	stw	r16,20(sp)
 40080f8:	d8800015 	stw	r2,0(sp)
 40080fc:	d8c00115 	stw	r3,4(sp)
 4008100:	20000f1e 	bne	r4,zero,4008140 <__floatsidf+0x68>
 4008104:	00800084 	movi	r2,2
 4008108:	d8800015 	stw	r2,0(sp)
 400810c:	d809883a 	mov	r4,sp
 4008110:	400850c0 	call	400850c <__pack_d>
 4008114:	1009883a 	mov	r4,r2
 4008118:	180b883a 	mov	r5,r3
 400811c:	2005883a 	mov	r2,r4
 4008120:	2807883a 	mov	r3,r5
 4008124:	dfc00917 	ldw	ra,36(sp)
 4008128:	dcc00817 	ldw	r19,32(sp)
 400812c:	dc800717 	ldw	r18,28(sp)
 4008130:	dc400617 	ldw	r17,24(sp)
 4008134:	dc000517 	ldw	r16,20(sp)
 4008138:	dec00a04 	addi	sp,sp,40
 400813c:	f800283a 	ret
 4008140:	00800f04 	movi	r2,60
 4008144:	1807003a 	cmpeq	r3,r3,zero
 4008148:	d8800215 	stw	r2,8(sp)
 400814c:	18001126 	beq	r3,zero,4008194 <__floatsidf+0xbc>
 4008150:	0027883a 	mov	r19,zero
 4008154:	2025883a 	mov	r18,r4
 4008158:	d9000315 	stw	r4,12(sp)
 400815c:	dcc00415 	stw	r19,16(sp)
 4008160:	400848c0 	call	400848c <__clzsi2>
 4008164:	11000744 	addi	r4,r2,29
 4008168:	013fe80e 	bge	zero,r4,400810c <__floatsidf+0x34>
 400816c:	10bfff44 	addi	r2,r2,-3
 4008170:	10000c16 	blt	r2,zero,40081a4 <__floatsidf+0xcc>
 4008174:	90a2983a 	sll	r17,r18,r2
 4008178:	0021883a 	mov	r16,zero
 400817c:	d8800217 	ldw	r2,8(sp)
 4008180:	dc400415 	stw	r17,16(sp)
 4008184:	dc000315 	stw	r16,12(sp)
 4008188:	1105c83a 	sub	r2,r2,r4
 400818c:	d8800215 	stw	r2,8(sp)
 4008190:	003fde06 	br	400810c <__floatsidf+0x34>
 4008194:	00a00034 	movhi	r2,32768
 4008198:	20800a26 	beq	r4,r2,40081c4 <__floatsidf+0xec>
 400819c:	0109c83a 	sub	r4,zero,r4
 40081a0:	003feb06 	br	4008150 <__floatsidf+0x78>
 40081a4:	9006d07a 	srli	r3,r18,1
 40081a8:	008007c4 	movi	r2,31
 40081ac:	1105c83a 	sub	r2,r2,r4
 40081b0:	1886d83a 	srl	r3,r3,r2
 40081b4:	9922983a 	sll	r17,r19,r4
 40081b8:	9120983a 	sll	r16,r18,r4
 40081bc:	1c62b03a 	or	r17,r3,r17
 40081c0:	003fee06 	br	400817c <__floatsidf+0xa4>
 40081c4:	0009883a 	mov	r4,zero
 40081c8:	01707834 	movhi	r5,49632
 40081cc:	003fd306 	br	400811c <__floatsidf+0x44>

040081d0 <__fixdfsi>:
 40081d0:	defff804 	addi	sp,sp,-32
 40081d4:	2005883a 	mov	r2,r4
 40081d8:	2807883a 	mov	r3,r5
 40081dc:	d809883a 	mov	r4,sp
 40081e0:	d9400204 	addi	r5,sp,8
 40081e4:	d8c00115 	stw	r3,4(sp)
 40081e8:	d8800015 	stw	r2,0(sp)
 40081ec:	dfc00715 	stw	ra,28(sp)
 40081f0:	40088200 	call	4008820 <__unpack_d>
 40081f4:	d8c00217 	ldw	r3,8(sp)
 40081f8:	00800084 	movi	r2,2
 40081fc:	1880051e 	bne	r3,r2,4008214 <__fixdfsi+0x44>
 4008200:	0007883a 	mov	r3,zero
 4008204:	1805883a 	mov	r2,r3
 4008208:	dfc00717 	ldw	ra,28(sp)
 400820c:	dec00804 	addi	sp,sp,32
 4008210:	f800283a 	ret
 4008214:	00800044 	movi	r2,1
 4008218:	10fff92e 	bgeu	r2,r3,4008200 <__fixdfsi+0x30>
 400821c:	00800104 	movi	r2,4
 4008220:	18800426 	beq	r3,r2,4008234 <__fixdfsi+0x64>
 4008224:	d8c00417 	ldw	r3,16(sp)
 4008228:	183ff516 	blt	r3,zero,4008200 <__fixdfsi+0x30>
 400822c:	00800784 	movi	r2,30
 4008230:	10c0080e 	bge	r2,r3,4008254 <__fixdfsi+0x84>
 4008234:	d8800317 	ldw	r2,12(sp)
 4008238:	1000121e 	bne	r2,zero,4008284 <__fixdfsi+0xb4>
 400823c:	00e00034 	movhi	r3,32768
 4008240:	18ffffc4 	addi	r3,r3,-1
 4008244:	1805883a 	mov	r2,r3
 4008248:	dfc00717 	ldw	ra,28(sp)
 400824c:	dec00804 	addi	sp,sp,32
 4008250:	f800283a 	ret
 4008254:	00800f04 	movi	r2,60
 4008258:	10d1c83a 	sub	r8,r2,r3
 400825c:	40bff804 	addi	r2,r8,-32
 4008260:	d9800517 	ldw	r6,20(sp)
 4008264:	d9c00617 	ldw	r7,24(sp)
 4008268:	10000816 	blt	r2,zero,400828c <__fixdfsi+0xbc>
 400826c:	3888d83a 	srl	r4,r7,r2
 4008270:	d8800317 	ldw	r2,12(sp)
 4008274:	2007883a 	mov	r3,r4
 4008278:	103fe226 	beq	r2,zero,4008204 <__fixdfsi+0x34>
 400827c:	0107c83a 	sub	r3,zero,r4
 4008280:	003fe006 	br	4008204 <__fixdfsi+0x34>
 4008284:	00e00034 	movhi	r3,32768
 4008288:	003fde06 	br	4008204 <__fixdfsi+0x34>
 400828c:	39c7883a 	add	r3,r7,r7
 4008290:	008007c4 	movi	r2,31
 4008294:	1205c83a 	sub	r2,r2,r8
 4008298:	1886983a 	sll	r3,r3,r2
 400829c:	3208d83a 	srl	r4,r6,r8
 40082a0:	1908b03a 	or	r4,r3,r4
 40082a4:	003ff206 	br	4008270 <__fixdfsi+0xa0>

040082a8 <udivmodsi4>:
 40082a8:	29001b2e 	bgeu	r5,r4,4008318 <udivmodsi4+0x70>
 40082ac:	28001a16 	blt	r5,zero,4008318 <udivmodsi4+0x70>
 40082b0:	00800044 	movi	r2,1
 40082b4:	0007883a 	mov	r3,zero
 40082b8:	01c007c4 	movi	r7,31
 40082bc:	00000306 	br	40082cc <udivmodsi4+0x24>
 40082c0:	19c01326 	beq	r3,r7,4008310 <udivmodsi4+0x68>
 40082c4:	18c00044 	addi	r3,r3,1
 40082c8:	28000416 	blt	r5,zero,40082dc <udivmodsi4+0x34>
 40082cc:	294b883a 	add	r5,r5,r5
 40082d0:	1085883a 	add	r2,r2,r2
 40082d4:	293ffa36 	bltu	r5,r4,40082c0 <udivmodsi4+0x18>
 40082d8:	10000d26 	beq	r2,zero,4008310 <udivmodsi4+0x68>
 40082dc:	0007883a 	mov	r3,zero
 40082e0:	21400236 	bltu	r4,r5,40082ec <udivmodsi4+0x44>
 40082e4:	2149c83a 	sub	r4,r4,r5
 40082e8:	1886b03a 	or	r3,r3,r2
 40082ec:	1004d07a 	srli	r2,r2,1
 40082f0:	280ad07a 	srli	r5,r5,1
 40082f4:	103ffa1e 	bne	r2,zero,40082e0 <udivmodsi4+0x38>
 40082f8:	30000226 	beq	r6,zero,4008304 <udivmodsi4+0x5c>
 40082fc:	2005883a 	mov	r2,r4
 4008300:	f800283a 	ret
 4008304:	1809883a 	mov	r4,r3
 4008308:	2005883a 	mov	r2,r4
 400830c:	f800283a 	ret
 4008310:	0007883a 	mov	r3,zero
 4008314:	003ff806 	br	40082f8 <udivmodsi4+0x50>
 4008318:	00800044 	movi	r2,1
 400831c:	0007883a 	mov	r3,zero
 4008320:	003fef06 	br	40082e0 <udivmodsi4+0x38>

04008324 <__divsi3>:
 4008324:	defffe04 	addi	sp,sp,-8
 4008328:	dc000015 	stw	r16,0(sp)
 400832c:	dfc00115 	stw	ra,4(sp)
 4008330:	0021883a 	mov	r16,zero
 4008334:	20000c16 	blt	r4,zero,4008368 <__divsi3+0x44>
 4008338:	000d883a 	mov	r6,zero
 400833c:	28000e16 	blt	r5,zero,4008378 <__divsi3+0x54>
 4008340:	40082a80 	call	40082a8 <udivmodsi4>
 4008344:	1007883a 	mov	r3,r2
 4008348:	8005003a 	cmpeq	r2,r16,zero
 400834c:	1000011e 	bne	r2,zero,4008354 <__divsi3+0x30>
 4008350:	00c7c83a 	sub	r3,zero,r3
 4008354:	1805883a 	mov	r2,r3
 4008358:	dfc00117 	ldw	ra,4(sp)
 400835c:	dc000017 	ldw	r16,0(sp)
 4008360:	dec00204 	addi	sp,sp,8
 4008364:	f800283a 	ret
 4008368:	0109c83a 	sub	r4,zero,r4
 400836c:	04000044 	movi	r16,1
 4008370:	000d883a 	mov	r6,zero
 4008374:	283ff20e 	bge	r5,zero,4008340 <__divsi3+0x1c>
 4008378:	014bc83a 	sub	r5,zero,r5
 400837c:	8021003a 	cmpeq	r16,r16,zero
 4008380:	003fef06 	br	4008340 <__divsi3+0x1c>

04008384 <__modsi3>:
 4008384:	deffff04 	addi	sp,sp,-4
 4008388:	dfc00015 	stw	ra,0(sp)
 400838c:	01800044 	movi	r6,1
 4008390:	2807883a 	mov	r3,r5
 4008394:	20000416 	blt	r4,zero,40083a8 <__modsi3+0x24>
 4008398:	28000c16 	blt	r5,zero,40083cc <__modsi3+0x48>
 400839c:	dfc00017 	ldw	ra,0(sp)
 40083a0:	dec00104 	addi	sp,sp,4
 40083a4:	40082a81 	jmpi	40082a8 <udivmodsi4>
 40083a8:	0109c83a 	sub	r4,zero,r4
 40083ac:	28000b16 	blt	r5,zero,40083dc <__modsi3+0x58>
 40083b0:	180b883a 	mov	r5,r3
 40083b4:	01800044 	movi	r6,1
 40083b8:	40082a80 	call	40082a8 <udivmodsi4>
 40083bc:	0085c83a 	sub	r2,zero,r2
 40083c0:	dfc00017 	ldw	ra,0(sp)
 40083c4:	dec00104 	addi	sp,sp,4
 40083c8:	f800283a 	ret
 40083cc:	014bc83a 	sub	r5,zero,r5
 40083d0:	dfc00017 	ldw	ra,0(sp)
 40083d4:	dec00104 	addi	sp,sp,4
 40083d8:	40082a81 	jmpi	40082a8 <udivmodsi4>
 40083dc:	0147c83a 	sub	r3,zero,r5
 40083e0:	003ff306 	br	40083b0 <__modsi3+0x2c>

040083e4 <__udivsi3>:
 40083e4:	000d883a 	mov	r6,zero
 40083e8:	40082a81 	jmpi	40082a8 <udivmodsi4>

040083ec <__umodsi3>:
 40083ec:	01800044 	movi	r6,1
 40083f0:	40082a81 	jmpi	40082a8 <udivmodsi4>

040083f4 <__muldi3>:
 40083f4:	2011883a 	mov	r8,r4
 40083f8:	427fffcc 	andi	r9,r8,65535
 40083fc:	4018d43a 	srli	r12,r8,16
 4008400:	32bfffcc 	andi	r10,r6,65535
 4008404:	3016d43a 	srli	r11,r6,16
 4008408:	4a85383a 	mul	r2,r9,r10
 400840c:	6295383a 	mul	r10,r12,r10
 4008410:	4ad3383a 	mul	r9,r9,r11
 4008414:	113fffcc 	andi	r4,r2,65535
 4008418:	1004d43a 	srli	r2,r2,16
 400841c:	4a93883a 	add	r9,r9,r10
 4008420:	3807883a 	mov	r3,r7
 4008424:	1245883a 	add	r2,r2,r9
 4008428:	280f883a 	mov	r7,r5
 400842c:	180b883a 	mov	r5,r3
 4008430:	1006943a 	slli	r3,r2,16
 4008434:	defffd04 	addi	sp,sp,-12
 4008438:	dc800215 	stw	r18,8(sp)
 400843c:	1907883a 	add	r3,r3,r4
 4008440:	dc400115 	stw	r17,4(sp)
 4008444:	dc000015 	stw	r16,0(sp)
 4008448:	4165383a 	mul	r18,r8,r5
 400844c:	31e3383a 	mul	r17,r6,r7
 4008450:	1012d43a 	srli	r9,r2,16
 4008454:	62d9383a 	mul	r12,r12,r11
 4008458:	181f883a 	mov	r15,r3
 400845c:	1280022e 	bgeu	r2,r10,4008468 <__muldi3+0x74>
 4008460:	00800074 	movhi	r2,1
 4008464:	6099883a 	add	r12,r12,r2
 4008468:	624d883a 	add	r6,r12,r9
 400846c:	9187883a 	add	r3,r18,r6
 4008470:	88c7883a 	add	r3,r17,r3
 4008474:	7805883a 	mov	r2,r15
 4008478:	dc800217 	ldw	r18,8(sp)
 400847c:	dc400117 	ldw	r17,4(sp)
 4008480:	dc000017 	ldw	r16,0(sp)
 4008484:	dec00304 	addi	sp,sp,12
 4008488:	f800283a 	ret

0400848c <__clzsi2>:
 400848c:	00bfffd4 	movui	r2,65535
 4008490:	11000e36 	bltu	r2,r4,40084cc <__clzsi2+0x40>
 4008494:	00803fc4 	movi	r2,255
 4008498:	01400204 	movi	r5,8
 400849c:	0007883a 	mov	r3,zero
 40084a0:	11001036 	bltu	r2,r4,40084e4 <__clzsi2+0x58>
 40084a4:	000b883a 	mov	r5,zero
 40084a8:	20c6d83a 	srl	r3,r4,r3
 40084ac:	008100f4 	movhi	r2,1027
 40084b0:	10b75a04 	addi	r2,r2,-8856
 40084b4:	1887883a 	add	r3,r3,r2
 40084b8:	18800003 	ldbu	r2,0(r3)
 40084bc:	00c00804 	movi	r3,32
 40084c0:	2885883a 	add	r2,r5,r2
 40084c4:	1885c83a 	sub	r2,r3,r2
 40084c8:	f800283a 	ret
 40084cc:	01400404 	movi	r5,16
 40084d0:	00804034 	movhi	r2,256
 40084d4:	10bfffc4 	addi	r2,r2,-1
 40084d8:	2807883a 	mov	r3,r5
 40084dc:	113ff22e 	bgeu	r2,r4,40084a8 <__clzsi2+0x1c>
 40084e0:	01400604 	movi	r5,24
 40084e4:	2807883a 	mov	r3,r5
 40084e8:	20c6d83a 	srl	r3,r4,r3
 40084ec:	008100f4 	movhi	r2,1027
 40084f0:	10b75a04 	addi	r2,r2,-8856
 40084f4:	1887883a 	add	r3,r3,r2
 40084f8:	18800003 	ldbu	r2,0(r3)
 40084fc:	00c00804 	movi	r3,32
 4008500:	2885883a 	add	r2,r5,r2
 4008504:	1885c83a 	sub	r2,r3,r2
 4008508:	f800283a 	ret

0400850c <__pack_d>:
 400850c:	20c00017 	ldw	r3,0(r4)
 4008510:	defffd04 	addi	sp,sp,-12
 4008514:	dc000015 	stw	r16,0(sp)
 4008518:	dc800215 	stw	r18,8(sp)
 400851c:	dc400115 	stw	r17,4(sp)
 4008520:	00800044 	movi	r2,1
 4008524:	22000317 	ldw	r8,12(r4)
 4008528:	001f883a 	mov	r15,zero
 400852c:	22400417 	ldw	r9,16(r4)
 4008530:	24000117 	ldw	r16,4(r4)
 4008534:	10c0552e 	bgeu	r2,r3,400868c <__pack_d+0x180>
 4008538:	00800104 	movi	r2,4
 400853c:	18804f26 	beq	r3,r2,400867c <__pack_d+0x170>
 4008540:	00800084 	movi	r2,2
 4008544:	18800226 	beq	r3,r2,4008550 <__pack_d+0x44>
 4008548:	4244b03a 	or	r2,r8,r9
 400854c:	10001a1e 	bne	r2,zero,40085b8 <__pack_d+0xac>
 4008550:	000d883a 	mov	r6,zero
 4008554:	000f883a 	mov	r7,zero
 4008558:	0011883a 	mov	r8,zero
 400855c:	00800434 	movhi	r2,16
 4008560:	10bfffc4 	addi	r2,r2,-1
 4008564:	301d883a 	mov	r14,r6
 4008568:	3884703a 	and	r2,r7,r2
 400856c:	400a953a 	slli	r5,r8,20
 4008570:	79bffc2c 	andhi	r6,r15,65520
 4008574:	308cb03a 	or	r6,r6,r2
 4008578:	00e00434 	movhi	r3,32784
 400857c:	18ffffc4 	addi	r3,r3,-1
 4008580:	800497fa 	slli	r2,r16,31
 4008584:	30c6703a 	and	r3,r6,r3
 4008588:	1946b03a 	or	r3,r3,r5
 400858c:	01600034 	movhi	r5,32768
 4008590:	297fffc4 	addi	r5,r5,-1
 4008594:	194a703a 	and	r5,r3,r5
 4008598:	288ab03a 	or	r5,r5,r2
 400859c:	2807883a 	mov	r3,r5
 40085a0:	7005883a 	mov	r2,r14
 40085a4:	dc800217 	ldw	r18,8(sp)
 40085a8:	dc400117 	ldw	r17,4(sp)
 40085ac:	dc000017 	ldw	r16,0(sp)
 40085b0:	dec00304 	addi	sp,sp,12
 40085b4:	f800283a 	ret
 40085b8:	21000217 	ldw	r4,8(r4)
 40085bc:	00bf0084 	movi	r2,-1022
 40085c0:	20803f16 	blt	r4,r2,40086c0 <__pack_d+0x1b4>
 40085c4:	0080ffc4 	movi	r2,1023
 40085c8:	11002c16 	blt	r2,r4,400867c <__pack_d+0x170>
 40085cc:	00803fc4 	movi	r2,255
 40085d0:	408c703a 	and	r6,r8,r2
 40085d4:	00802004 	movi	r2,128
 40085d8:	0007883a 	mov	r3,zero
 40085dc:	000f883a 	mov	r7,zero
 40085e0:	2280ffc4 	addi	r10,r4,1023
 40085e4:	30801e26 	beq	r6,r2,4008660 <__pack_d+0x154>
 40085e8:	00801fc4 	movi	r2,127
 40085ec:	4089883a 	add	r4,r8,r2
 40085f0:	220d803a 	cmpltu	r6,r4,r8
 40085f4:	324d883a 	add	r6,r6,r9
 40085f8:	2011883a 	mov	r8,r4
 40085fc:	3013883a 	mov	r9,r6
 4008600:	00880034 	movhi	r2,8192
 4008604:	10bfffc4 	addi	r2,r2,-1
 4008608:	12400d36 	bltu	r2,r9,4008640 <__pack_d+0x134>
 400860c:	4804963a 	slli	r2,r9,24
 4008610:	400cd23a 	srli	r6,r8,8
 4008614:	480ed23a 	srli	r7,r9,8
 4008618:	013fffc4 	movi	r4,-1
 400861c:	118cb03a 	or	r6,r2,r6
 4008620:	01400434 	movhi	r5,16
 4008624:	297fffc4 	addi	r5,r5,-1
 4008628:	3104703a 	and	r2,r6,r4
 400862c:	3946703a 	and	r3,r7,r5
 4008630:	5201ffcc 	andi	r8,r10,2047
 4008634:	100d883a 	mov	r6,r2
 4008638:	180f883a 	mov	r7,r3
 400863c:	003fc706 	br	400855c <__pack_d+0x50>
 4008640:	480897fa 	slli	r4,r9,31
 4008644:	4004d07a 	srli	r2,r8,1
 4008648:	4806d07a 	srli	r3,r9,1
 400864c:	52800044 	addi	r10,r10,1
 4008650:	2084b03a 	or	r2,r4,r2
 4008654:	1011883a 	mov	r8,r2
 4008658:	1813883a 	mov	r9,r3
 400865c:	003feb06 	br	400860c <__pack_d+0x100>
 4008660:	383fe11e 	bne	r7,zero,40085e8 <__pack_d+0xdc>
 4008664:	01004004 	movi	r4,256
 4008668:	4104703a 	and	r2,r8,r4
 400866c:	10c4b03a 	or	r2,r2,r3
 4008670:	103fe326 	beq	r2,zero,4008600 <__pack_d+0xf4>
 4008674:	3005883a 	mov	r2,r6
 4008678:	003fdc06 	br	40085ec <__pack_d+0xe0>
 400867c:	000d883a 	mov	r6,zero
 4008680:	000f883a 	mov	r7,zero
 4008684:	0201ffc4 	movi	r8,2047
 4008688:	003fb406 	br	400855c <__pack_d+0x50>
 400868c:	0005883a 	mov	r2,zero
 4008690:	00c00234 	movhi	r3,8
 4008694:	408cb03a 	or	r6,r8,r2
 4008698:	48ceb03a 	or	r7,r9,r3
 400869c:	013fffc4 	movi	r4,-1
 40086a0:	01400434 	movhi	r5,16
 40086a4:	297fffc4 	addi	r5,r5,-1
 40086a8:	3104703a 	and	r2,r6,r4
 40086ac:	3946703a 	and	r3,r7,r5
 40086b0:	100d883a 	mov	r6,r2
 40086b4:	180f883a 	mov	r7,r3
 40086b8:	0201ffc4 	movi	r8,2047
 40086bc:	003fa706 	br	400855c <__pack_d+0x50>
 40086c0:	1109c83a 	sub	r4,r2,r4
 40086c4:	00800e04 	movi	r2,56
 40086c8:	11004316 	blt	r2,r4,40087d8 <__pack_d+0x2cc>
 40086cc:	21fff804 	addi	r7,r4,-32
 40086d0:	38004516 	blt	r7,zero,40087e8 <__pack_d+0x2dc>
 40086d4:	49d8d83a 	srl	r12,r9,r7
 40086d8:	001b883a 	mov	r13,zero
 40086dc:	0023883a 	mov	r17,zero
 40086e0:	01400044 	movi	r5,1
 40086e4:	0025883a 	mov	r18,zero
 40086e8:	38004716 	blt	r7,zero,4008808 <__pack_d+0x2fc>
 40086ec:	29d6983a 	sll	r11,r5,r7
 40086f0:	0015883a 	mov	r10,zero
 40086f4:	00bfffc4 	movi	r2,-1
 40086f8:	5089883a 	add	r4,r10,r2
 40086fc:	588b883a 	add	r5,r11,r2
 4008700:	228d803a 	cmpltu	r6,r4,r10
 4008704:	314b883a 	add	r5,r6,r5
 4008708:	4104703a 	and	r2,r8,r4
 400870c:	4946703a 	and	r3,r9,r5
 4008710:	10c4b03a 	or	r2,r2,r3
 4008714:	10000226 	beq	r2,zero,4008720 <__pack_d+0x214>
 4008718:	04400044 	movi	r17,1
 400871c:	0025883a 	mov	r18,zero
 4008720:	00803fc4 	movi	r2,255
 4008724:	644eb03a 	or	r7,r12,r17
 4008728:	3892703a 	and	r9,r7,r2
 400872c:	00802004 	movi	r2,128
 4008730:	6c90b03a 	or	r8,r13,r18
 4008734:	0015883a 	mov	r10,zero
 4008738:	48801626 	beq	r9,r2,4008794 <__pack_d+0x288>
 400873c:	01001fc4 	movi	r4,127
 4008740:	3905883a 	add	r2,r7,r4
 4008744:	11cd803a 	cmpltu	r6,r2,r7
 4008748:	320d883a 	add	r6,r6,r8
 400874c:	100f883a 	mov	r7,r2
 4008750:	00840034 	movhi	r2,4096
 4008754:	10bfffc4 	addi	r2,r2,-1
 4008758:	3011883a 	mov	r8,r6
 400875c:	0007883a 	mov	r3,zero
 4008760:	11801b36 	bltu	r2,r6,40087d0 <__pack_d+0x2c4>
 4008764:	4004963a 	slli	r2,r8,24
 4008768:	3808d23a 	srli	r4,r7,8
 400876c:	400ad23a 	srli	r5,r8,8
 4008770:	1813883a 	mov	r9,r3
 4008774:	1108b03a 	or	r4,r2,r4
 4008778:	00bfffc4 	movi	r2,-1
 400877c:	00c00434 	movhi	r3,16
 4008780:	18ffffc4 	addi	r3,r3,-1
 4008784:	208c703a 	and	r6,r4,r2
 4008788:	28ce703a 	and	r7,r5,r3
 400878c:	4a01ffcc 	andi	r8,r9,2047
 4008790:	003f7206 	br	400855c <__pack_d+0x50>
 4008794:	503fe91e 	bne	r10,zero,400873c <__pack_d+0x230>
 4008798:	01004004 	movi	r4,256
 400879c:	3904703a 	and	r2,r7,r4
 40087a0:	0007883a 	mov	r3,zero
 40087a4:	10c4b03a 	or	r2,r2,r3
 40087a8:	10000626 	beq	r2,zero,40087c4 <__pack_d+0x2b8>
 40087ac:	3a45883a 	add	r2,r7,r9
 40087b0:	11cd803a 	cmpltu	r6,r2,r7
 40087b4:	320d883a 	add	r6,r6,r8
 40087b8:	100f883a 	mov	r7,r2
 40087bc:	3011883a 	mov	r8,r6
 40087c0:	0007883a 	mov	r3,zero
 40087c4:	00840034 	movhi	r2,4096
 40087c8:	10bfffc4 	addi	r2,r2,-1
 40087cc:	123fe52e 	bgeu	r2,r8,4008764 <__pack_d+0x258>
 40087d0:	00c00044 	movi	r3,1
 40087d4:	003fe306 	br	4008764 <__pack_d+0x258>
 40087d8:	0009883a 	mov	r4,zero
 40087dc:	0013883a 	mov	r9,zero
 40087e0:	000b883a 	mov	r5,zero
 40087e4:	003fe406 	br	4008778 <__pack_d+0x26c>
 40087e8:	4a47883a 	add	r3,r9,r9
 40087ec:	008007c4 	movi	r2,31
 40087f0:	1105c83a 	sub	r2,r2,r4
 40087f4:	1886983a 	sll	r3,r3,r2
 40087f8:	4118d83a 	srl	r12,r8,r4
 40087fc:	491ad83a 	srl	r13,r9,r4
 4008800:	1b18b03a 	or	r12,r3,r12
 4008804:	003fb506 	br	40086dc <__pack_d+0x1d0>
 4008808:	2806d07a 	srli	r3,r5,1
 400880c:	008007c4 	movi	r2,31
 4008810:	1105c83a 	sub	r2,r2,r4
 4008814:	1896d83a 	srl	r11,r3,r2
 4008818:	2914983a 	sll	r10,r5,r4
 400881c:	003fb506 	br	40086f4 <__pack_d+0x1e8>

04008820 <__unpack_d>:
 4008820:	20c00117 	ldw	r3,4(r4)
 4008824:	22400017 	ldw	r9,0(r4)
 4008828:	00800434 	movhi	r2,16
 400882c:	10bfffc4 	addi	r2,r2,-1
 4008830:	1808d53a 	srli	r4,r3,20
 4008834:	180cd7fa 	srli	r6,r3,31
 4008838:	1894703a 	and	r10,r3,r2
 400883c:	2201ffcc 	andi	r8,r4,2047
 4008840:	281b883a 	mov	r13,r5
 4008844:	4817883a 	mov	r11,r9
 4008848:	29800115 	stw	r6,4(r5)
 400884c:	5019883a 	mov	r12,r10
 4008850:	40001e1e 	bne	r8,zero,40088cc <__unpack_d+0xac>
 4008854:	4a84b03a 	or	r2,r9,r10
 4008858:	10001926 	beq	r2,zero,40088c0 <__unpack_d+0xa0>
 400885c:	4804d63a 	srli	r2,r9,24
 4008860:	500c923a 	slli	r6,r10,8
 4008864:	013f0084 	movi	r4,-1022
 4008868:	00c40034 	movhi	r3,4096
 400886c:	18ffffc4 	addi	r3,r3,-1
 4008870:	118cb03a 	or	r6,r2,r6
 4008874:	008000c4 	movi	r2,3
 4008878:	480a923a 	slli	r5,r9,8
 400887c:	68800015 	stw	r2,0(r13)
 4008880:	69000215 	stw	r4,8(r13)
 4008884:	19800b36 	bltu	r3,r6,40088b4 <__unpack_d+0x94>
 4008888:	200f883a 	mov	r7,r4
 400888c:	1811883a 	mov	r8,r3
 4008890:	2945883a 	add	r2,r5,r5
 4008894:	1149803a 	cmpltu	r4,r2,r5
 4008898:	3187883a 	add	r3,r6,r6
 400889c:	20c9883a 	add	r4,r4,r3
 40088a0:	100b883a 	mov	r5,r2
 40088a4:	200d883a 	mov	r6,r4
 40088a8:	39ffffc4 	addi	r7,r7,-1
 40088ac:	413ff82e 	bgeu	r8,r4,4008890 <__unpack_d+0x70>
 40088b0:	69c00215 	stw	r7,8(r13)
 40088b4:	69800415 	stw	r6,16(r13)
 40088b8:	69400315 	stw	r5,12(r13)
 40088bc:	f800283a 	ret
 40088c0:	00800084 	movi	r2,2
 40088c4:	28800015 	stw	r2,0(r5)
 40088c8:	f800283a 	ret
 40088cc:	0081ffc4 	movi	r2,2047
 40088d0:	40800f26 	beq	r8,r2,4008910 <__unpack_d+0xf0>
 40088d4:	480cd63a 	srli	r6,r9,24
 40088d8:	5006923a 	slli	r3,r10,8
 40088dc:	4804923a 	slli	r2,r9,8
 40088e0:	0009883a 	mov	r4,zero
 40088e4:	30c6b03a 	or	r3,r6,r3
 40088e8:	01440034 	movhi	r5,4096
 40088ec:	110cb03a 	or	r6,r2,r4
 40088f0:	423f0044 	addi	r8,r8,-1023
 40088f4:	194eb03a 	or	r7,r3,r5
 40088f8:	008000c4 	movi	r2,3
 40088fc:	69c00415 	stw	r7,16(r13)
 4008900:	6a000215 	stw	r8,8(r13)
 4008904:	68800015 	stw	r2,0(r13)
 4008908:	69800315 	stw	r6,12(r13)
 400890c:	f800283a 	ret
 4008910:	4a84b03a 	or	r2,r9,r10
 4008914:	1000031e 	bne	r2,zero,4008924 <__unpack_d+0x104>
 4008918:	00800104 	movi	r2,4
 400891c:	28800015 	stw	r2,0(r5)
 4008920:	f800283a 	ret
 4008924:	0009883a 	mov	r4,zero
 4008928:	01400234 	movhi	r5,8
 400892c:	4904703a 	and	r2,r9,r4
 4008930:	5146703a 	and	r3,r10,r5
 4008934:	10c4b03a 	or	r2,r2,r3
 4008938:	10000526 	beq	r2,zero,4008950 <__unpack_d+0x130>
 400893c:	00800044 	movi	r2,1
 4008940:	68800015 	stw	r2,0(r13)
 4008944:	6b000415 	stw	r12,16(r13)
 4008948:	6ac00315 	stw	r11,12(r13)
 400894c:	f800283a 	ret
 4008950:	68000015 	stw	zero,0(r13)
 4008954:	003ffb06 	br	4008944 <__unpack_d+0x124>

04008958 <__fpcmp_parts_d>:
 4008958:	21800017 	ldw	r6,0(r4)
 400895c:	00c00044 	movi	r3,1
 4008960:	19800a2e 	bgeu	r3,r6,400898c <__fpcmp_parts_d+0x34>
 4008964:	28800017 	ldw	r2,0(r5)
 4008968:	1880082e 	bgeu	r3,r2,400898c <__fpcmp_parts_d+0x34>
 400896c:	00c00104 	movi	r3,4
 4008970:	30c02626 	beq	r6,r3,4008a0c <__fpcmp_parts_d+0xb4>
 4008974:	10c02226 	beq	r2,r3,4008a00 <__fpcmp_parts_d+0xa8>
 4008978:	00c00084 	movi	r3,2
 400897c:	30c00526 	beq	r6,r3,4008994 <__fpcmp_parts_d+0x3c>
 4008980:	10c0071e 	bne	r2,r3,40089a0 <__fpcmp_parts_d+0x48>
 4008984:	20800117 	ldw	r2,4(r4)
 4008988:	1000091e 	bne	r2,zero,40089b0 <__fpcmp_parts_d+0x58>
 400898c:	00800044 	movi	r2,1
 4008990:	f800283a 	ret
 4008994:	10c01a1e 	bne	r2,r3,4008a00 <__fpcmp_parts_d+0xa8>
 4008998:	0005883a 	mov	r2,zero
 400899c:	f800283a 	ret
 40089a0:	22000117 	ldw	r8,4(r4)
 40089a4:	28800117 	ldw	r2,4(r5)
 40089a8:	40800326 	beq	r8,r2,40089b8 <__fpcmp_parts_d+0x60>
 40089ac:	403ff726 	beq	r8,zero,400898c <__fpcmp_parts_d+0x34>
 40089b0:	00bfffc4 	movi	r2,-1
 40089b4:	f800283a 	ret
 40089b8:	20c00217 	ldw	r3,8(r4)
 40089bc:	28800217 	ldw	r2,8(r5)
 40089c0:	10fffa16 	blt	r2,r3,40089ac <__fpcmp_parts_d+0x54>
 40089c4:	18800916 	blt	r3,r2,40089ec <__fpcmp_parts_d+0x94>
 40089c8:	21c00417 	ldw	r7,16(r4)
 40089cc:	28c00417 	ldw	r3,16(r5)
 40089d0:	21800317 	ldw	r6,12(r4)
 40089d4:	28800317 	ldw	r2,12(r5)
 40089d8:	19fff436 	bltu	r3,r7,40089ac <__fpcmp_parts_d+0x54>
 40089dc:	38c00526 	beq	r7,r3,40089f4 <__fpcmp_parts_d+0x9c>
 40089e0:	38c00236 	bltu	r7,r3,40089ec <__fpcmp_parts_d+0x94>
 40089e4:	19ffec1e 	bne	r3,r7,4008998 <__fpcmp_parts_d+0x40>
 40089e8:	30bfeb2e 	bgeu	r6,r2,4008998 <__fpcmp_parts_d+0x40>
 40089ec:	403fe71e 	bne	r8,zero,400898c <__fpcmp_parts_d+0x34>
 40089f0:	003fef06 	br	40089b0 <__fpcmp_parts_d+0x58>
 40089f4:	11bffa2e 	bgeu	r2,r6,40089e0 <__fpcmp_parts_d+0x88>
 40089f8:	403fe426 	beq	r8,zero,400898c <__fpcmp_parts_d+0x34>
 40089fc:	003fec06 	br	40089b0 <__fpcmp_parts_d+0x58>
 4008a00:	28800117 	ldw	r2,4(r5)
 4008a04:	103fe11e 	bne	r2,zero,400898c <__fpcmp_parts_d+0x34>
 4008a08:	003fe906 	br	40089b0 <__fpcmp_parts_d+0x58>
 4008a0c:	11bfdd1e 	bne	r2,r6,4008984 <__fpcmp_parts_d+0x2c>
 4008a10:	28c00117 	ldw	r3,4(r5)
 4008a14:	20800117 	ldw	r2,4(r4)
 4008a18:	1885c83a 	sub	r2,r3,r2
 4008a1c:	f800283a 	ret

04008a20 <__errno>:
 4008a20:	00c100f4 	movhi	r3,1027
 4008a24:	18c59904 	addi	r3,r3,5732
 4008a28:	18800017 	ldw	r2,0(r3)
 4008a2c:	f800283a 	ret

04008a30 <free>:
 4008a30:	008100f4 	movhi	r2,1027
 4008a34:	10859904 	addi	r2,r2,5732
 4008a38:	200b883a 	mov	r5,r4
 4008a3c:	11000017 	ldw	r4,0(r2)
 4008a40:	400d5801 	jmpi	400d580 <_free_r>

04008a44 <malloc>:
 4008a44:	008100f4 	movhi	r2,1027
 4008a48:	10859904 	addi	r2,r2,5732
 4008a4c:	200b883a 	mov	r5,r4
 4008a50:	11000017 	ldw	r4,0(r2)
 4008a54:	4008a581 	jmpi	4008a58 <_malloc_r>

04008a58 <_malloc_r>:
 4008a58:	defff604 	addi	sp,sp,-40
 4008a5c:	28c002c4 	addi	r3,r5,11
 4008a60:	00800584 	movi	r2,22
 4008a64:	dc800215 	stw	r18,8(sp)
 4008a68:	dfc00915 	stw	ra,36(sp)
 4008a6c:	df000815 	stw	fp,32(sp)
 4008a70:	ddc00715 	stw	r23,28(sp)
 4008a74:	dd800615 	stw	r22,24(sp)
 4008a78:	dd400515 	stw	r21,20(sp)
 4008a7c:	dd000415 	stw	r20,16(sp)
 4008a80:	dcc00315 	stw	r19,12(sp)
 4008a84:	dc400115 	stw	r17,4(sp)
 4008a88:	dc000015 	stw	r16,0(sp)
 4008a8c:	2025883a 	mov	r18,r4
 4008a90:	10c01236 	bltu	r2,r3,4008adc <_malloc_r+0x84>
 4008a94:	04400404 	movi	r17,16
 4008a98:	8940142e 	bgeu	r17,r5,4008aec <_malloc_r+0x94>
 4008a9c:	00800304 	movi	r2,12
 4008aa0:	0007883a 	mov	r3,zero
 4008aa4:	90800015 	stw	r2,0(r18)
 4008aa8:	1805883a 	mov	r2,r3
 4008aac:	dfc00917 	ldw	ra,36(sp)
 4008ab0:	df000817 	ldw	fp,32(sp)
 4008ab4:	ddc00717 	ldw	r23,28(sp)
 4008ab8:	dd800617 	ldw	r22,24(sp)
 4008abc:	dd400517 	ldw	r21,20(sp)
 4008ac0:	dd000417 	ldw	r20,16(sp)
 4008ac4:	dcc00317 	ldw	r19,12(sp)
 4008ac8:	dc800217 	ldw	r18,8(sp)
 4008acc:	dc400117 	ldw	r17,4(sp)
 4008ad0:	dc000017 	ldw	r16,0(sp)
 4008ad4:	dec00a04 	addi	sp,sp,40
 4008ad8:	f800283a 	ret
 4008adc:	00bffe04 	movi	r2,-8
 4008ae0:	18a2703a 	and	r17,r3,r2
 4008ae4:	883fed16 	blt	r17,zero,4008a9c <_malloc_r+0x44>
 4008ae8:	897fec36 	bltu	r17,r5,4008a9c <_malloc_r+0x44>
 4008aec:	9009883a 	mov	r4,r18
 4008af0:	40119740 	call	4011974 <__malloc_lock>
 4008af4:	00807dc4 	movi	r2,503
 4008af8:	14402b2e 	bgeu	r2,r17,4008ba8 <_malloc_r+0x150>
 4008afc:	8806d27a 	srli	r3,r17,9
 4008b00:	18003f1e 	bne	r3,zero,4008c00 <_malloc_r+0x1a8>
 4008b04:	880cd0fa 	srli	r6,r17,3
 4008b08:	300490fa 	slli	r2,r6,3
 4008b0c:	02c100f4 	movhi	r11,1027
 4008b10:	5ac00f04 	addi	r11,r11,60
 4008b14:	12cb883a 	add	r5,r2,r11
 4008b18:	2c000317 	ldw	r16,12(r5)
 4008b1c:	580f883a 	mov	r7,r11
 4008b20:	2c00041e 	bne	r5,r16,4008b34 <_malloc_r+0xdc>
 4008b24:	00000a06 	br	4008b50 <_malloc_r+0xf8>
 4008b28:	1800860e 	bge	r3,zero,4008d44 <_malloc_r+0x2ec>
 4008b2c:	84000317 	ldw	r16,12(r16)
 4008b30:	2c000726 	beq	r5,r16,4008b50 <_malloc_r+0xf8>
 4008b34:	80800117 	ldw	r2,4(r16)
 4008b38:	00ffff04 	movi	r3,-4
 4008b3c:	10c8703a 	and	r4,r2,r3
 4008b40:	2447c83a 	sub	r3,r4,r17
 4008b44:	008003c4 	movi	r2,15
 4008b48:	10fff70e 	bge	r2,r3,4008b28 <_malloc_r+0xd0>
 4008b4c:	31bfffc4 	addi	r6,r6,-1
 4008b50:	32400044 	addi	r9,r6,1
 4008b54:	028100f4 	movhi	r10,1027
 4008b58:	52801104 	addi	r10,r10,68
 4008b5c:	54000217 	ldw	r16,8(r10)
 4008b60:	8280a026 	beq	r16,r10,4008de4 <_malloc_r+0x38c>
 4008b64:	80800117 	ldw	r2,4(r16)
 4008b68:	00ffff04 	movi	r3,-4
 4008b6c:	10ca703a 	and	r5,r2,r3
 4008b70:	2c4dc83a 	sub	r6,r5,r17
 4008b74:	008003c4 	movi	r2,15
 4008b78:	11808316 	blt	r2,r6,4008d88 <_malloc_r+0x330>
 4008b7c:	52800315 	stw	r10,12(r10)
 4008b80:	52800215 	stw	r10,8(r10)
 4008b84:	30002916 	blt	r6,zero,4008c2c <_malloc_r+0x1d4>
 4008b88:	8147883a 	add	r3,r16,r5
 4008b8c:	18800117 	ldw	r2,4(r3)
 4008b90:	9009883a 	mov	r4,r18
 4008b94:	10800054 	ori	r2,r2,1
 4008b98:	18800115 	stw	r2,4(r3)
 4008b9c:	40119940 	call	4011994 <__malloc_unlock>
 4008ba0:	80c00204 	addi	r3,r16,8
 4008ba4:	003fc006 	br	4008aa8 <_malloc_r+0x50>
 4008ba8:	02c100f4 	movhi	r11,1027
 4008bac:	5ac00f04 	addi	r11,r11,60
 4008bb0:	8ac5883a 	add	r2,r17,r11
 4008bb4:	14000317 	ldw	r16,12(r2)
 4008bb8:	580f883a 	mov	r7,r11
 4008bbc:	8806d0fa 	srli	r3,r17,3
 4008bc0:	14006c26 	beq	r2,r16,4008d74 <_malloc_r+0x31c>
 4008bc4:	80c00117 	ldw	r3,4(r16)
 4008bc8:	00bfff04 	movi	r2,-4
 4008bcc:	81800317 	ldw	r6,12(r16)
 4008bd0:	1886703a 	and	r3,r3,r2
 4008bd4:	80c7883a 	add	r3,r16,r3
 4008bd8:	18800117 	ldw	r2,4(r3)
 4008bdc:	81400217 	ldw	r5,8(r16)
 4008be0:	9009883a 	mov	r4,r18
 4008be4:	10800054 	ori	r2,r2,1
 4008be8:	18800115 	stw	r2,4(r3)
 4008bec:	31400215 	stw	r5,8(r6)
 4008bf0:	29800315 	stw	r6,12(r5)
 4008bf4:	40119940 	call	4011994 <__malloc_unlock>
 4008bf8:	80c00204 	addi	r3,r16,8
 4008bfc:	003faa06 	br	4008aa8 <_malloc_r+0x50>
 4008c00:	00800104 	movi	r2,4
 4008c04:	10c0052e 	bgeu	r2,r3,4008c1c <_malloc_r+0x1c4>
 4008c08:	00800504 	movi	r2,20
 4008c0c:	10c07836 	bltu	r2,r3,4008df0 <_malloc_r+0x398>
 4008c10:	198016c4 	addi	r6,r3,91
 4008c14:	300490fa 	slli	r2,r6,3
 4008c18:	003fbc06 	br	4008b0c <_malloc_r+0xb4>
 4008c1c:	8804d1ba 	srli	r2,r17,6
 4008c20:	11800e04 	addi	r6,r2,56
 4008c24:	300490fa 	slli	r2,r6,3
 4008c28:	003fb806 	br	4008b0c <_malloc_r+0xb4>
 4008c2c:	00807fc4 	movi	r2,511
 4008c30:	1140bb36 	bltu	r2,r5,4008f20 <_malloc_r+0x4c8>
 4008c34:	2806d0fa 	srli	r3,r5,3
 4008c38:	573ffe04 	addi	fp,r10,-8
 4008c3c:	00800044 	movi	r2,1
 4008c40:	180890fa 	slli	r4,r3,3
 4008c44:	1807d0ba 	srai	r3,r3,2
 4008c48:	e1c00117 	ldw	r7,4(fp)
 4008c4c:	5909883a 	add	r4,r11,r4
 4008c50:	21400217 	ldw	r5,8(r4)
 4008c54:	10c4983a 	sll	r2,r2,r3
 4008c58:	81000315 	stw	r4,12(r16)
 4008c5c:	81400215 	stw	r5,8(r16)
 4008c60:	388eb03a 	or	r7,r7,r2
 4008c64:	2c000315 	stw	r16,12(r5)
 4008c68:	24000215 	stw	r16,8(r4)
 4008c6c:	e1c00115 	stw	r7,4(fp)
 4008c70:	4807883a 	mov	r3,r9
 4008c74:	4800cd16 	blt	r9,zero,4008fac <_malloc_r+0x554>
 4008c78:	1807d0ba 	srai	r3,r3,2
 4008c7c:	00800044 	movi	r2,1
 4008c80:	10c8983a 	sll	r4,r2,r3
 4008c84:	39004436 	bltu	r7,r4,4008d98 <_malloc_r+0x340>
 4008c88:	21c4703a 	and	r2,r4,r7
 4008c8c:	10000a1e 	bne	r2,zero,4008cb8 <_malloc_r+0x260>
 4008c90:	2109883a 	add	r4,r4,r4
 4008c94:	00bfff04 	movi	r2,-4
 4008c98:	4884703a 	and	r2,r9,r2
 4008c9c:	3906703a 	and	r3,r7,r4
 4008ca0:	12400104 	addi	r9,r2,4
 4008ca4:	1800041e 	bne	r3,zero,4008cb8 <_malloc_r+0x260>
 4008ca8:	2109883a 	add	r4,r4,r4
 4008cac:	3904703a 	and	r2,r7,r4
 4008cb0:	4a400104 	addi	r9,r9,4
 4008cb4:	103ffc26 	beq	r2,zero,4008ca8 <_malloc_r+0x250>
 4008cb8:	480490fa 	slli	r2,r9,3
 4008cbc:	4819883a 	mov	r12,r9
 4008cc0:	023fff04 	movi	r8,-4
 4008cc4:	589b883a 	add	r13,r11,r2
 4008cc8:	6807883a 	mov	r3,r13
 4008ccc:	014003c4 	movi	r5,15
 4008cd0:	1c000317 	ldw	r16,12(r3)
 4008cd4:	1c00041e 	bne	r3,r16,4008ce8 <_malloc_r+0x290>
 4008cd8:	0000a706 	br	4008f78 <_malloc_r+0x520>
 4008cdc:	3000ab0e 	bge	r6,zero,4008f8c <_malloc_r+0x534>
 4008ce0:	84000317 	ldw	r16,12(r16)
 4008ce4:	1c00a426 	beq	r3,r16,4008f78 <_malloc_r+0x520>
 4008ce8:	80800117 	ldw	r2,4(r16)
 4008cec:	1204703a 	and	r2,r2,r8
 4008cf0:	144dc83a 	sub	r6,r2,r17
 4008cf4:	29bff90e 	bge	r5,r6,4008cdc <_malloc_r+0x284>
 4008cf8:	81000317 	ldw	r4,12(r16)
 4008cfc:	80c00217 	ldw	r3,8(r16)
 4008d00:	89400054 	ori	r5,r17,1
 4008d04:	8445883a 	add	r2,r16,r17
 4008d08:	20c00215 	stw	r3,8(r4)
 4008d0c:	19000315 	stw	r4,12(r3)
 4008d10:	81400115 	stw	r5,4(r16)
 4008d14:	1187883a 	add	r3,r2,r6
 4008d18:	31000054 	ori	r4,r6,1
 4008d1c:	50800315 	stw	r2,12(r10)
 4008d20:	50800215 	stw	r2,8(r10)
 4008d24:	19800015 	stw	r6,0(r3)
 4008d28:	11000115 	stw	r4,4(r2)
 4008d2c:	12800215 	stw	r10,8(r2)
 4008d30:	12800315 	stw	r10,12(r2)
 4008d34:	9009883a 	mov	r4,r18
 4008d38:	40119940 	call	4011994 <__malloc_unlock>
 4008d3c:	80c00204 	addi	r3,r16,8
 4008d40:	003f5906 	br	4008aa8 <_malloc_r+0x50>
 4008d44:	8109883a 	add	r4,r16,r4
 4008d48:	20800117 	ldw	r2,4(r4)
 4008d4c:	80c00217 	ldw	r3,8(r16)
 4008d50:	81400317 	ldw	r5,12(r16)
 4008d54:	10800054 	ori	r2,r2,1
 4008d58:	20800115 	stw	r2,4(r4)
 4008d5c:	28c00215 	stw	r3,8(r5)
 4008d60:	19400315 	stw	r5,12(r3)
 4008d64:	9009883a 	mov	r4,r18
 4008d68:	40119940 	call	4011994 <__malloc_unlock>
 4008d6c:	80c00204 	addi	r3,r16,8
 4008d70:	003f4d06 	br	4008aa8 <_malloc_r+0x50>
 4008d74:	80800204 	addi	r2,r16,8
 4008d78:	14000317 	ldw	r16,12(r2)
 4008d7c:	143f911e 	bne	r2,r16,4008bc4 <_malloc_r+0x16c>
 4008d80:	1a400084 	addi	r9,r3,2
 4008d84:	003f7306 	br	4008b54 <_malloc_r+0xfc>
 4008d88:	88c00054 	ori	r3,r17,1
 4008d8c:	8445883a 	add	r2,r16,r17
 4008d90:	80c00115 	stw	r3,4(r16)
 4008d94:	003fdf06 	br	4008d14 <_malloc_r+0x2bc>
 4008d98:	e4000217 	ldw	r16,8(fp)
 4008d9c:	00bfff04 	movi	r2,-4
 4008da0:	80c00117 	ldw	r3,4(r16)
 4008da4:	802d883a 	mov	r22,r16
 4008da8:	18aa703a 	and	r21,r3,r2
 4008dac:	ac401636 	bltu	r21,r17,4008e08 <_malloc_r+0x3b0>
 4008db0:	ac49c83a 	sub	r4,r21,r17
 4008db4:	008003c4 	movi	r2,15
 4008db8:	1100130e 	bge	r2,r4,4008e08 <_malloc_r+0x3b0>
 4008dbc:	88800054 	ori	r2,r17,1
 4008dc0:	8447883a 	add	r3,r16,r17
 4008dc4:	80800115 	stw	r2,4(r16)
 4008dc8:	20800054 	ori	r2,r4,1
 4008dcc:	18800115 	stw	r2,4(r3)
 4008dd0:	e0c00215 	stw	r3,8(fp)
 4008dd4:	9009883a 	mov	r4,r18
 4008dd8:	40119940 	call	4011994 <__malloc_unlock>
 4008ddc:	80c00204 	addi	r3,r16,8
 4008de0:	003f3106 	br	4008aa8 <_malloc_r+0x50>
 4008de4:	39c00117 	ldw	r7,4(r7)
 4008de8:	573ffe04 	addi	fp,r10,-8
 4008dec:	003fa006 	br	4008c70 <_malloc_r+0x218>
 4008df0:	00801504 	movi	r2,84
 4008df4:	10c06736 	bltu	r2,r3,4008f94 <_malloc_r+0x53c>
 4008df8:	8804d33a 	srli	r2,r17,12
 4008dfc:	11801b84 	addi	r6,r2,110
 4008e00:	300490fa 	slli	r2,r6,3
 4008e04:	003f4106 	br	4008b0c <_malloc_r+0xb4>
 4008e08:	d0ad9917 	ldw	r2,-18844(gp)
 4008e0c:	d0e00617 	ldw	r3,-32744(gp)
 4008e10:	053fffc4 	movi	r20,-1
 4008e14:	10800404 	addi	r2,r2,16
 4008e18:	88a7883a 	add	r19,r17,r2
 4008e1c:	1d000326 	beq	r3,r20,4008e2c <_malloc_r+0x3d4>
 4008e20:	98c3ffc4 	addi	r3,r19,4095
 4008e24:	00bc0004 	movi	r2,-4096
 4008e28:	18a6703a 	and	r19,r3,r2
 4008e2c:	9009883a 	mov	r4,r18
 4008e30:	980b883a 	mov	r5,r19
 4008e34:	40093fc0 	call	40093fc <_sbrk_r>
 4008e38:	1009883a 	mov	r4,r2
 4008e3c:	15000426 	beq	r2,r20,4008e50 <_malloc_r+0x3f8>
 4008e40:	854b883a 	add	r5,r16,r21
 4008e44:	1029883a 	mov	r20,r2
 4008e48:	11405a2e 	bgeu	r2,r5,4008fb4 <_malloc_r+0x55c>
 4008e4c:	87000c26 	beq	r16,fp,4008e80 <_malloc_r+0x428>
 4008e50:	e4000217 	ldw	r16,8(fp)
 4008e54:	80c00117 	ldw	r3,4(r16)
 4008e58:	00bfff04 	movi	r2,-4
 4008e5c:	1884703a 	and	r2,r3,r2
 4008e60:	14400336 	bltu	r2,r17,4008e70 <_malloc_r+0x418>
 4008e64:	1449c83a 	sub	r4,r2,r17
 4008e68:	008003c4 	movi	r2,15
 4008e6c:	113fd316 	blt	r2,r4,4008dbc <_malloc_r+0x364>
 4008e70:	9009883a 	mov	r4,r18
 4008e74:	40119940 	call	4011994 <__malloc_unlock>
 4008e78:	0007883a 	mov	r3,zero
 4008e7c:	003f0a06 	br	4008aa8 <_malloc_r+0x50>
 4008e80:	05c100f4 	movhi	r23,1027
 4008e84:	bdd33c04 	addi	r23,r23,19696
 4008e88:	b8800017 	ldw	r2,0(r23)
 4008e8c:	988d883a 	add	r6,r19,r2
 4008e90:	b9800015 	stw	r6,0(r23)
 4008e94:	d0e00617 	ldw	r3,-32744(gp)
 4008e98:	00bfffc4 	movi	r2,-1
 4008e9c:	18808e26 	beq	r3,r2,40090d8 <_malloc_r+0x680>
 4008ea0:	2145c83a 	sub	r2,r4,r5
 4008ea4:	3085883a 	add	r2,r6,r2
 4008ea8:	b8800015 	stw	r2,0(r23)
 4008eac:	20c001cc 	andi	r3,r4,7
 4008eb0:	18005f1e 	bne	r3,zero,4009030 <_malloc_r+0x5d8>
 4008eb4:	000b883a 	mov	r5,zero
 4008eb8:	a4c5883a 	add	r2,r20,r19
 4008ebc:	1083ffcc 	andi	r2,r2,4095
 4008ec0:	00c40004 	movi	r3,4096
 4008ec4:	1887c83a 	sub	r3,r3,r2
 4008ec8:	28e7883a 	add	r19,r5,r3
 4008ecc:	9009883a 	mov	r4,r18
 4008ed0:	980b883a 	mov	r5,r19
 4008ed4:	40093fc0 	call	40093fc <_sbrk_r>
 4008ed8:	1007883a 	mov	r3,r2
 4008edc:	00bfffc4 	movi	r2,-1
 4008ee0:	18807a26 	beq	r3,r2,40090cc <_malloc_r+0x674>
 4008ee4:	1d05c83a 	sub	r2,r3,r20
 4008ee8:	9885883a 	add	r2,r19,r2
 4008eec:	10c00054 	ori	r3,r2,1
 4008ef0:	b8800017 	ldw	r2,0(r23)
 4008ef4:	a021883a 	mov	r16,r20
 4008ef8:	a0c00115 	stw	r3,4(r20)
 4008efc:	9885883a 	add	r2,r19,r2
 4008f00:	b8800015 	stw	r2,0(r23)
 4008f04:	e5000215 	stw	r20,8(fp)
 4008f08:	b7003626 	beq	r22,fp,4008fe4 <_malloc_r+0x58c>
 4008f0c:	018003c4 	movi	r6,15
 4008f10:	35404b36 	bltu	r6,r21,4009040 <_malloc_r+0x5e8>
 4008f14:	00800044 	movi	r2,1
 4008f18:	a0800115 	stw	r2,4(r20)
 4008f1c:	003fcd06 	br	4008e54 <_malloc_r+0x3fc>
 4008f20:	2808d27a 	srli	r4,r5,9
 4008f24:	2000371e 	bne	r4,zero,4009004 <_malloc_r+0x5ac>
 4008f28:	2808d0fa 	srli	r4,r5,3
 4008f2c:	200690fa 	slli	r3,r4,3
 4008f30:	1ad1883a 	add	r8,r3,r11
 4008f34:	41800217 	ldw	r6,8(r8)
 4008f38:	41805b26 	beq	r8,r6,40090a8 <_malloc_r+0x650>
 4008f3c:	30800117 	ldw	r2,4(r6)
 4008f40:	00ffff04 	movi	r3,-4
 4008f44:	10c4703a 	and	r2,r2,r3
 4008f48:	2880022e 	bgeu	r5,r2,4008f54 <_malloc_r+0x4fc>
 4008f4c:	31800217 	ldw	r6,8(r6)
 4008f50:	41bffa1e 	bne	r8,r6,4008f3c <_malloc_r+0x4e4>
 4008f54:	32000317 	ldw	r8,12(r6)
 4008f58:	39c00117 	ldw	r7,4(r7)
 4008f5c:	82000315 	stw	r8,12(r16)
 4008f60:	81800215 	stw	r6,8(r16)
 4008f64:	070100f4 	movhi	fp,1027
 4008f68:	e7000f04 	addi	fp,fp,60
 4008f6c:	34000315 	stw	r16,12(r6)
 4008f70:	44000215 	stw	r16,8(r8)
 4008f74:	003f3e06 	br	4008c70 <_malloc_r+0x218>
 4008f78:	63000044 	addi	r12,r12,1
 4008f7c:	608000cc 	andi	r2,r12,3
 4008f80:	10005d26 	beq	r2,zero,40090f8 <_malloc_r+0x6a0>
 4008f84:	18c00204 	addi	r3,r3,8
 4008f88:	003f5106 	br	4008cd0 <_malloc_r+0x278>
 4008f8c:	8089883a 	add	r4,r16,r2
 4008f90:	003f6d06 	br	4008d48 <_malloc_r+0x2f0>
 4008f94:	00805504 	movi	r2,340
 4008f98:	10c02036 	bltu	r2,r3,400901c <_malloc_r+0x5c4>
 4008f9c:	8804d3fa 	srli	r2,r17,15
 4008fa0:	11801dc4 	addi	r6,r2,119
 4008fa4:	300490fa 	slli	r2,r6,3
 4008fa8:	003ed806 	br	4008b0c <_malloc_r+0xb4>
 4008fac:	48c000c4 	addi	r3,r9,3
 4008fb0:	003f3106 	br	4008c78 <_malloc_r+0x220>
 4008fb4:	05c100f4 	movhi	r23,1027
 4008fb8:	bdd33c04 	addi	r23,r23,19696
 4008fbc:	b8800017 	ldw	r2,0(r23)
 4008fc0:	988d883a 	add	r6,r19,r2
 4008fc4:	b9800015 	stw	r6,0(r23)
 4008fc8:	293fb21e 	bne	r5,r4,4008e94 <_malloc_r+0x43c>
 4008fcc:	2083ffcc 	andi	r2,r4,4095
 4008fd0:	103fb01e 	bne	r2,zero,4008e94 <_malloc_r+0x43c>
 4008fd4:	e4000217 	ldw	r16,8(fp)
 4008fd8:	9d45883a 	add	r2,r19,r21
 4008fdc:	10800054 	ori	r2,r2,1
 4008fe0:	80800115 	stw	r2,4(r16)
 4008fe4:	b8c00017 	ldw	r3,0(r23)
 4008fe8:	d0ad9a17 	ldw	r2,-18840(gp)
 4008fec:	10c0012e 	bgeu	r2,r3,4008ff4 <_malloc_r+0x59c>
 4008ff0:	d0ed9a15 	stw	r3,-18840(gp)
 4008ff4:	d0ad9b17 	ldw	r2,-18836(gp)
 4008ff8:	10ff962e 	bgeu	r2,r3,4008e54 <_malloc_r+0x3fc>
 4008ffc:	d0ed9b15 	stw	r3,-18836(gp)
 4009000:	003f9406 	br	4008e54 <_malloc_r+0x3fc>
 4009004:	00800104 	movi	r2,4
 4009008:	11001e36 	bltu	r2,r4,4009084 <_malloc_r+0x62c>
 400900c:	2804d1ba 	srli	r2,r5,6
 4009010:	11000e04 	addi	r4,r2,56
 4009014:	200690fa 	slli	r3,r4,3
 4009018:	003fc506 	br	4008f30 <_malloc_r+0x4d8>
 400901c:	00815504 	movi	r2,1364
 4009020:	10c01d2e 	bgeu	r2,r3,4009098 <_malloc_r+0x640>
 4009024:	01801f84 	movi	r6,126
 4009028:	0080fc04 	movi	r2,1008
 400902c:	003eb706 	br	4008b0c <_malloc_r+0xb4>
 4009030:	00800204 	movi	r2,8
 4009034:	10cbc83a 	sub	r5,r2,r3
 4009038:	2169883a 	add	r20,r4,r5
 400903c:	003f9e06 	br	4008eb8 <_malloc_r+0x460>
 4009040:	00bffe04 	movi	r2,-8
 4009044:	a93ffd04 	addi	r4,r21,-12
 4009048:	2088703a 	and	r4,r4,r2
 400904c:	b10b883a 	add	r5,r22,r4
 4009050:	00c00144 	movi	r3,5
 4009054:	28c00215 	stw	r3,8(r5)
 4009058:	28c00115 	stw	r3,4(r5)
 400905c:	b0800117 	ldw	r2,4(r22)
 4009060:	1080004c 	andi	r2,r2,1
 4009064:	2084b03a 	or	r2,r4,r2
 4009068:	b0800115 	stw	r2,4(r22)
 400906c:	313fdd2e 	bgeu	r6,r4,4008fe4 <_malloc_r+0x58c>
 4009070:	b1400204 	addi	r5,r22,8
 4009074:	9009883a 	mov	r4,r18
 4009078:	400d5800 	call	400d580 <_free_r>
 400907c:	e4000217 	ldw	r16,8(fp)
 4009080:	003fd806 	br	4008fe4 <_malloc_r+0x58c>
 4009084:	00800504 	movi	r2,20
 4009088:	11001536 	bltu	r2,r4,40090e0 <_malloc_r+0x688>
 400908c:	210016c4 	addi	r4,r4,91
 4009090:	200690fa 	slli	r3,r4,3
 4009094:	003fa606 	br	4008f30 <_malloc_r+0x4d8>
 4009098:	8804d4ba 	srli	r2,r17,18
 400909c:	11801f04 	addi	r6,r2,124
 40090a0:	300490fa 	slli	r2,r6,3
 40090a4:	003e9906 	br	4008b0c <_malloc_r+0xb4>
 40090a8:	2009d0ba 	srai	r4,r4,2
 40090ac:	014100f4 	movhi	r5,1027
 40090b0:	29400f04 	addi	r5,r5,60
 40090b4:	00c00044 	movi	r3,1
 40090b8:	28800117 	ldw	r2,4(r5)
 40090bc:	1906983a 	sll	r3,r3,r4
 40090c0:	10c4b03a 	or	r2,r2,r3
 40090c4:	28800115 	stw	r2,4(r5)
 40090c8:	003fa306 	br	4008f58 <_malloc_r+0x500>
 40090cc:	0027883a 	mov	r19,zero
 40090d0:	00c00044 	movi	r3,1
 40090d4:	003f8606 	br	4008ef0 <_malloc_r+0x498>
 40090d8:	d1200615 	stw	r4,-32744(gp)
 40090dc:	003f7306 	br	4008eac <_malloc_r+0x454>
 40090e0:	00801504 	movi	r2,84
 40090e4:	11001936 	bltu	r2,r4,400914c <_malloc_r+0x6f4>
 40090e8:	2804d33a 	srli	r2,r5,12
 40090ec:	11001b84 	addi	r4,r2,110
 40090f0:	200690fa 	slli	r3,r4,3
 40090f4:	003f8e06 	br	4008f30 <_malloc_r+0x4d8>
 40090f8:	480b883a 	mov	r5,r9
 40090fc:	6807883a 	mov	r3,r13
 4009100:	288000cc 	andi	r2,r5,3
 4009104:	18fffe04 	addi	r3,r3,-8
 4009108:	297fffc4 	addi	r5,r5,-1
 400910c:	10001526 	beq	r2,zero,4009164 <_malloc_r+0x70c>
 4009110:	18800217 	ldw	r2,8(r3)
 4009114:	10fffa26 	beq	r2,r3,4009100 <_malloc_r+0x6a8>
 4009118:	2109883a 	add	r4,r4,r4
 400911c:	393f1e36 	bltu	r7,r4,4008d98 <_malloc_r+0x340>
 4009120:	203f1d26 	beq	r4,zero,4008d98 <_malloc_r+0x340>
 4009124:	21c4703a 	and	r2,r4,r7
 4009128:	10000226 	beq	r2,zero,4009134 <_malloc_r+0x6dc>
 400912c:	6013883a 	mov	r9,r12
 4009130:	003ee106 	br	4008cb8 <_malloc_r+0x260>
 4009134:	2109883a 	add	r4,r4,r4
 4009138:	3904703a 	and	r2,r7,r4
 400913c:	63000104 	addi	r12,r12,4
 4009140:	103ffc26 	beq	r2,zero,4009134 <_malloc_r+0x6dc>
 4009144:	6013883a 	mov	r9,r12
 4009148:	003edb06 	br	4008cb8 <_malloc_r+0x260>
 400914c:	00805504 	movi	r2,340
 4009150:	11000836 	bltu	r2,r4,4009174 <_malloc_r+0x71c>
 4009154:	2804d3fa 	srli	r2,r5,15
 4009158:	11001dc4 	addi	r4,r2,119
 400915c:	200690fa 	slli	r3,r4,3
 4009160:	003f7306 	br	4008f30 <_malloc_r+0x4d8>
 4009164:	0104303a 	nor	r2,zero,r4
 4009168:	388e703a 	and	r7,r7,r2
 400916c:	e1c00115 	stw	r7,4(fp)
 4009170:	003fe906 	br	4009118 <_malloc_r+0x6c0>
 4009174:	00815504 	movi	r2,1364
 4009178:	1100032e 	bgeu	r2,r4,4009188 <_malloc_r+0x730>
 400917c:	01001f84 	movi	r4,126
 4009180:	00c0fc04 	movi	r3,1008
 4009184:	003f6a06 	br	4008f30 <_malloc_r+0x4d8>
 4009188:	2804d4ba 	srli	r2,r5,18
 400918c:	11001f04 	addi	r4,r2,124
 4009190:	200690fa 	slli	r3,r4,3
 4009194:	003f6606 	br	4008f30 <_malloc_r+0x4d8>

04009198 <memcpy>:
 4009198:	01c003c4 	movi	r7,15
 400919c:	2007883a 	mov	r3,r4
 40091a0:	3980032e 	bgeu	r7,r6,40091b0 <memcpy+0x18>
 40091a4:	2904b03a 	or	r2,r5,r4
 40091a8:	108000cc 	andi	r2,r2,3
 40091ac:	10000926 	beq	r2,zero,40091d4 <memcpy+0x3c>
 40091b0:	30000626 	beq	r6,zero,40091cc <memcpy+0x34>
 40091b4:	30cd883a 	add	r6,r6,r3
 40091b8:	28800003 	ldbu	r2,0(r5)
 40091bc:	29400044 	addi	r5,r5,1
 40091c0:	18800005 	stb	r2,0(r3)
 40091c4:	18c00044 	addi	r3,r3,1
 40091c8:	30fffb1e 	bne	r6,r3,40091b8 <memcpy+0x20>
 40091cc:	2005883a 	mov	r2,r4
 40091d0:	f800283a 	ret
 40091d4:	3811883a 	mov	r8,r7
 40091d8:	200f883a 	mov	r7,r4
 40091dc:	28c00017 	ldw	r3,0(r5)
 40091e0:	31bffc04 	addi	r6,r6,-16
 40091e4:	38c00015 	stw	r3,0(r7)
 40091e8:	28800117 	ldw	r2,4(r5)
 40091ec:	38800115 	stw	r2,4(r7)
 40091f0:	28c00217 	ldw	r3,8(r5)
 40091f4:	38c00215 	stw	r3,8(r7)
 40091f8:	28800317 	ldw	r2,12(r5)
 40091fc:	29400404 	addi	r5,r5,16
 4009200:	38800315 	stw	r2,12(r7)
 4009204:	39c00404 	addi	r7,r7,16
 4009208:	41bff436 	bltu	r8,r6,40091dc <memcpy+0x44>
 400920c:	008000c4 	movi	r2,3
 4009210:	1180072e 	bgeu	r2,r6,4009230 <memcpy+0x98>
 4009214:	1007883a 	mov	r3,r2
 4009218:	28800017 	ldw	r2,0(r5)
 400921c:	31bfff04 	addi	r6,r6,-4
 4009220:	29400104 	addi	r5,r5,4
 4009224:	38800015 	stw	r2,0(r7)
 4009228:	39c00104 	addi	r7,r7,4
 400922c:	19bffa36 	bltu	r3,r6,4009218 <memcpy+0x80>
 4009230:	3807883a 	mov	r3,r7
 4009234:	003fde06 	br	40091b0 <memcpy+0x18>

04009238 <memset>:
 4009238:	008000c4 	movi	r2,3
 400923c:	29403fcc 	andi	r5,r5,255
 4009240:	2007883a 	mov	r3,r4
 4009244:	1180022e 	bgeu	r2,r6,4009250 <memset+0x18>
 4009248:	2084703a 	and	r2,r4,r2
 400924c:	10000826 	beq	r2,zero,4009270 <memset+0x38>
 4009250:	30000526 	beq	r6,zero,4009268 <memset+0x30>
 4009254:	2805883a 	mov	r2,r5
 4009258:	30cd883a 	add	r6,r6,r3
 400925c:	18800005 	stb	r2,0(r3)
 4009260:	18c00044 	addi	r3,r3,1
 4009264:	19bffd1e 	bne	r3,r6,400925c <memset+0x24>
 4009268:	2005883a 	mov	r2,r4
 400926c:	f800283a 	ret
 4009270:	2804923a 	slli	r2,r5,8
 4009274:	020003c4 	movi	r8,15
 4009278:	200f883a 	mov	r7,r4
 400927c:	2884b03a 	or	r2,r5,r2
 4009280:	1006943a 	slli	r3,r2,16
 4009284:	10c6b03a 	or	r3,r2,r3
 4009288:	41800a2e 	bgeu	r8,r6,40092b4 <memset+0x7c>
 400928c:	4005883a 	mov	r2,r8
 4009290:	31bffc04 	addi	r6,r6,-16
 4009294:	38c00015 	stw	r3,0(r7)
 4009298:	38c00115 	stw	r3,4(r7)
 400929c:	38c00215 	stw	r3,8(r7)
 40092a0:	38c00315 	stw	r3,12(r7)
 40092a4:	39c00404 	addi	r7,r7,16
 40092a8:	11bff936 	bltu	r2,r6,4009290 <memset+0x58>
 40092ac:	008000c4 	movi	r2,3
 40092b0:	1180052e 	bgeu	r2,r6,40092c8 <memset+0x90>
 40092b4:	31bfff04 	addi	r6,r6,-4
 40092b8:	008000c4 	movi	r2,3
 40092bc:	38c00015 	stw	r3,0(r7)
 40092c0:	39c00104 	addi	r7,r7,4
 40092c4:	11bffb36 	bltu	r2,r6,40092b4 <memset+0x7c>
 40092c8:	3807883a 	mov	r3,r7
 40092cc:	003fe006 	br	4009250 <memset+0x18>

040092d0 <printf>:
 40092d0:	defffb04 	addi	sp,sp,-20
 40092d4:	dfc00115 	stw	ra,4(sp)
 40092d8:	d9400215 	stw	r5,8(sp)
 40092dc:	d9800315 	stw	r6,12(sp)
 40092e0:	d9c00415 	stw	r7,16(sp)
 40092e4:	008100f4 	movhi	r2,1027
 40092e8:	10859904 	addi	r2,r2,5732
 40092ec:	10c00017 	ldw	r3,0(r2)
 40092f0:	200b883a 	mov	r5,r4
 40092f4:	d8800204 	addi	r2,sp,8
 40092f8:	19000217 	ldw	r4,8(r3)
 40092fc:	100d883a 	mov	r6,r2
 4009300:	d8800015 	stw	r2,0(sp)
 4009304:	400b5440 	call	400b544 <__vfprintf_internal>
 4009308:	dfc00117 	ldw	ra,4(sp)
 400930c:	dec00504 	addi	sp,sp,20
 4009310:	f800283a 	ret

04009314 <_printf_r>:
 4009314:	defffc04 	addi	sp,sp,-16
 4009318:	dfc00115 	stw	ra,4(sp)
 400931c:	d9800215 	stw	r6,8(sp)
 4009320:	d9c00315 	stw	r7,12(sp)
 4009324:	280d883a 	mov	r6,r5
 4009328:	21400217 	ldw	r5,8(r4)
 400932c:	d8c00204 	addi	r3,sp,8
 4009330:	180f883a 	mov	r7,r3
 4009334:	d8c00015 	stw	r3,0(sp)
 4009338:	40096980 	call	4009698 <___vfprintf_internal_r>
 400933c:	dfc00117 	ldw	ra,4(sp)
 4009340:	dec00404 	addi	sp,sp,16
 4009344:	f800283a 	ret

04009348 <_puts_r>:
 4009348:	defff604 	addi	sp,sp,-40
 400934c:	dc400715 	stw	r17,28(sp)
 4009350:	2023883a 	mov	r17,r4
 4009354:	2809883a 	mov	r4,r5
 4009358:	dfc00915 	stw	ra,36(sp)
 400935c:	dcc00815 	stw	r19,32(sp)
 4009360:	2827883a 	mov	r19,r5
 4009364:	40095cc0 	call	40095cc <strlen>
 4009368:	89400217 	ldw	r5,8(r17)
 400936c:	00c100f4 	movhi	r3,1027
 4009370:	18f79b04 	addi	r3,r3,-8596
 4009374:	01c00044 	movi	r7,1
 4009378:	12000044 	addi	r8,r2,1
 400937c:	d8c00515 	stw	r3,20(sp)
 4009380:	d9c00615 	stw	r7,24(sp)
 4009384:	d8c00304 	addi	r3,sp,12
 4009388:	01c00084 	movi	r7,2
 400938c:	8809883a 	mov	r4,r17
 4009390:	d80d883a 	mov	r6,sp
 4009394:	d8c00015 	stw	r3,0(sp)
 4009398:	dcc00315 	stw	r19,12(sp)
 400939c:	da000215 	stw	r8,8(sp)
 40093a0:	d9c00115 	stw	r7,4(sp)
 40093a4:	d8800415 	stw	r2,16(sp)
 40093a8:	400d8940 	call	400d894 <__sfvwrite_r>
 40093ac:	00ffffc4 	movi	r3,-1
 40093b0:	10000626 	beq	r2,zero,40093cc <_puts_r+0x84>
 40093b4:	1805883a 	mov	r2,r3
 40093b8:	dfc00917 	ldw	ra,36(sp)
 40093bc:	dcc00817 	ldw	r19,32(sp)
 40093c0:	dc400717 	ldw	r17,28(sp)
 40093c4:	dec00a04 	addi	sp,sp,40
 40093c8:	f800283a 	ret
 40093cc:	00c00284 	movi	r3,10
 40093d0:	1805883a 	mov	r2,r3
 40093d4:	dfc00917 	ldw	ra,36(sp)
 40093d8:	dcc00817 	ldw	r19,32(sp)
 40093dc:	dc400717 	ldw	r17,28(sp)
 40093e0:	dec00a04 	addi	sp,sp,40
 40093e4:	f800283a 	ret

040093e8 <puts>:
 40093e8:	008100f4 	movhi	r2,1027
 40093ec:	10859904 	addi	r2,r2,5732
 40093f0:	200b883a 	mov	r5,r4
 40093f4:	11000017 	ldw	r4,0(r2)
 40093f8:	40093481 	jmpi	4009348 <_puts_r>

040093fc <_sbrk_r>:
 40093fc:	defffd04 	addi	sp,sp,-12
 4009400:	dc000015 	stw	r16,0(sp)
 4009404:	040100f4 	movhi	r16,1027
 4009408:	84133204 	addi	r16,r16,19656
 400940c:	dc400115 	stw	r17,4(sp)
 4009410:	80000015 	stw	zero,0(r16)
 4009414:	2023883a 	mov	r17,r4
 4009418:	2809883a 	mov	r4,r5
 400941c:	dfc00215 	stw	ra,8(sp)
 4009420:	4011b940 	call	4011b94 <sbrk>
 4009424:	1007883a 	mov	r3,r2
 4009428:	00bfffc4 	movi	r2,-1
 400942c:	18800626 	beq	r3,r2,4009448 <_sbrk_r+0x4c>
 4009430:	1805883a 	mov	r2,r3
 4009434:	dfc00217 	ldw	ra,8(sp)
 4009438:	dc400117 	ldw	r17,4(sp)
 400943c:	dc000017 	ldw	r16,0(sp)
 4009440:	dec00304 	addi	sp,sp,12
 4009444:	f800283a 	ret
 4009448:	80800017 	ldw	r2,0(r16)
 400944c:	103ff826 	beq	r2,zero,4009430 <_sbrk_r+0x34>
 4009450:	88800015 	stw	r2,0(r17)
 4009454:	1805883a 	mov	r2,r3
 4009458:	dfc00217 	ldw	ra,8(sp)
 400945c:	dc400117 	ldw	r17,4(sp)
 4009460:	dc000017 	ldw	r16,0(sp)
 4009464:	dec00304 	addi	sp,sp,12
 4009468:	f800283a 	ret

0400946c <sprintf>:
 400946c:	deffe504 	addi	sp,sp,-108
 4009470:	2013883a 	mov	r9,r4
 4009474:	dfc01815 	stw	ra,96(sp)
 4009478:	d9801915 	stw	r6,100(sp)
 400947c:	d9c01a15 	stw	r7,104(sp)
 4009480:	d8801904 	addi	r2,sp,100
 4009484:	d8800015 	stw	r2,0(sp)
 4009488:	008100f4 	movhi	r2,1027
 400948c:	10859904 	addi	r2,r2,5732
 4009490:	11000017 	ldw	r4,0(r2)
 4009494:	d9c00017 	ldw	r7,0(sp)
 4009498:	00808204 	movi	r2,520
 400949c:	00e00034 	movhi	r3,32768
 40094a0:	18ffffc4 	addi	r3,r3,-1
 40094a4:	280d883a 	mov	r6,r5
 40094a8:	d880040d 	sth	r2,16(sp)
 40094ac:	d9400104 	addi	r5,sp,4
 40094b0:	00bfffc4 	movi	r2,-1
 40094b4:	d8c00615 	stw	r3,24(sp)
 40094b8:	d8c00315 	stw	r3,12(sp)
 40094bc:	da400515 	stw	r9,20(sp)
 40094c0:	d880048d 	sth	r2,18(sp)
 40094c4:	da400115 	stw	r9,4(sp)
 40094c8:	40096980 	call	4009698 <___vfprintf_internal_r>
 40094cc:	d8c00117 	ldw	r3,4(sp)
 40094d0:	18000005 	stb	zero,0(r3)
 40094d4:	dfc01817 	ldw	ra,96(sp)
 40094d8:	dec01b04 	addi	sp,sp,108
 40094dc:	f800283a 	ret

040094e0 <_sprintf_r>:
 40094e0:	deffe604 	addi	sp,sp,-104
 40094e4:	2813883a 	mov	r9,r5
 40094e8:	dfc01815 	stw	ra,96(sp)
 40094ec:	d9c01915 	stw	r7,100(sp)
 40094f0:	d8801904 	addi	r2,sp,100
 40094f4:	d8800015 	stw	r2,0(sp)
 40094f8:	100f883a 	mov	r7,r2
 40094fc:	00808204 	movi	r2,520
 4009500:	00e00034 	movhi	r3,32768
 4009504:	18ffffc4 	addi	r3,r3,-1
 4009508:	d880040d 	sth	r2,16(sp)
 400950c:	d9400104 	addi	r5,sp,4
 4009510:	00bfffc4 	movi	r2,-1
 4009514:	d8c00615 	stw	r3,24(sp)
 4009518:	d8c00315 	stw	r3,12(sp)
 400951c:	da400515 	stw	r9,20(sp)
 4009520:	d880048d 	sth	r2,18(sp)
 4009524:	da400115 	stw	r9,4(sp)
 4009528:	40096980 	call	4009698 <___vfprintf_internal_r>
 400952c:	d8c00117 	ldw	r3,4(sp)
 4009530:	18000005 	stb	zero,0(r3)
 4009534:	dfc01817 	ldw	ra,96(sp)
 4009538:	dec01a04 	addi	sp,sp,104
 400953c:	f800283a 	ret

04009540 <strcpy>:
 4009540:	2904b03a 	or	r2,r5,r4
 4009544:	108000cc 	andi	r2,r2,3
 4009548:	10000826 	beq	r2,zero,400956c <strcpy+0x2c>
 400954c:	2007883a 	mov	r3,r4
 4009550:	28800003 	ldbu	r2,0(r5)
 4009554:	29400044 	addi	r5,r5,1
 4009558:	18800005 	stb	r2,0(r3)
 400955c:	18c00044 	addi	r3,r3,1
 4009560:	103ffb1e 	bne	r2,zero,4009550 <strcpy+0x10>
 4009564:	2005883a 	mov	r2,r4
 4009568:	f800283a 	ret
 400956c:	29800017 	ldw	r6,0(r5)
 4009570:	023fbff4 	movhi	r8,65279
 4009574:	423fbfc4 	addi	r8,r8,-257
 4009578:	02a02074 	movhi	r10,32897
 400957c:	52a02004 	addi	r10,r10,-32640
 4009580:	3205883a 	add	r2,r6,r8
 4009584:	0186303a 	nor	r3,zero,r6
 4009588:	10c4703a 	and	r2,r2,r3
 400958c:	1284703a 	and	r2,r2,r10
 4009590:	200f883a 	mov	r7,r4
 4009594:	10000b1e 	bne	r2,zero,40095c4 <strcpy+0x84>
 4009598:	4013883a 	mov	r9,r8
 400959c:	5011883a 	mov	r8,r10
 40095a0:	39800015 	stw	r6,0(r7)
 40095a4:	29400104 	addi	r5,r5,4
 40095a8:	29800017 	ldw	r6,0(r5)
 40095ac:	39c00104 	addi	r7,r7,4
 40095b0:	3245883a 	add	r2,r6,r9
 40095b4:	0186303a 	nor	r3,zero,r6
 40095b8:	10c4703a 	and	r2,r2,r3
 40095bc:	1204703a 	and	r2,r2,r8
 40095c0:	103ff726 	beq	r2,zero,40095a0 <strcpy+0x60>
 40095c4:	3807883a 	mov	r3,r7
 40095c8:	003fe106 	br	4009550 <strcpy+0x10>

040095cc <strlen>:
 40095cc:	208000cc 	andi	r2,r4,3
 40095d0:	2011883a 	mov	r8,r4
 40095d4:	1000161e 	bne	r2,zero,4009630 <strlen+0x64>
 40095d8:	20c00017 	ldw	r3,0(r4)
 40095dc:	017fbff4 	movhi	r5,65279
 40095e0:	297fbfc4 	addi	r5,r5,-257
 40095e4:	01e02074 	movhi	r7,32897
 40095e8:	39e02004 	addi	r7,r7,-32640
 40095ec:	1945883a 	add	r2,r3,r5
 40095f0:	11c4703a 	and	r2,r2,r7
 40095f4:	00c6303a 	nor	r3,zero,r3
 40095f8:	1886703a 	and	r3,r3,r2
 40095fc:	18000c1e 	bne	r3,zero,4009630 <strlen+0x64>
 4009600:	280d883a 	mov	r6,r5
 4009604:	380b883a 	mov	r5,r7
 4009608:	21000104 	addi	r4,r4,4
 400960c:	20800017 	ldw	r2,0(r4)
 4009610:	1187883a 	add	r3,r2,r6
 4009614:	1946703a 	and	r3,r3,r5
 4009618:	0084303a 	nor	r2,zero,r2
 400961c:	10c4703a 	and	r2,r2,r3
 4009620:	103ff926 	beq	r2,zero,4009608 <strlen+0x3c>
 4009624:	20800007 	ldb	r2,0(r4)
 4009628:	10000326 	beq	r2,zero,4009638 <strlen+0x6c>
 400962c:	21000044 	addi	r4,r4,1
 4009630:	20800007 	ldb	r2,0(r4)
 4009634:	103ffd1e 	bne	r2,zero,400962c <strlen+0x60>
 4009638:	2205c83a 	sub	r2,r4,r8
 400963c:	f800283a 	ret

04009640 <__sprint_r>:
 4009640:	30800217 	ldw	r2,8(r6)
 4009644:	defffe04 	addi	sp,sp,-8
 4009648:	dc000015 	stw	r16,0(sp)
 400964c:	dfc00115 	stw	ra,4(sp)
 4009650:	3021883a 	mov	r16,r6
 4009654:	0007883a 	mov	r3,zero
 4009658:	1000061e 	bne	r2,zero,4009674 <__sprint_r+0x34>
 400965c:	1805883a 	mov	r2,r3
 4009660:	30000115 	stw	zero,4(r6)
 4009664:	dfc00117 	ldw	ra,4(sp)
 4009668:	dc000017 	ldw	r16,0(sp)
 400966c:	dec00204 	addi	sp,sp,8
 4009670:	f800283a 	ret
 4009674:	400d8940 	call	400d894 <__sfvwrite_r>
 4009678:	1007883a 	mov	r3,r2
 400967c:	1805883a 	mov	r2,r3
 4009680:	80000115 	stw	zero,4(r16)
 4009684:	80000215 	stw	zero,8(r16)
 4009688:	dfc00117 	ldw	ra,4(sp)
 400968c:	dc000017 	ldw	r16,0(sp)
 4009690:	dec00204 	addi	sp,sp,8
 4009694:	f800283a 	ret

04009698 <___vfprintf_internal_r>:
 4009698:	defea404 	addi	sp,sp,-1392
 400969c:	dd815815 	stw	r22,1376(sp)
 40096a0:	dc015215 	stw	r16,1352(sp)
 40096a4:	d9c15115 	stw	r7,1348(sp)
 40096a8:	dfc15b15 	stw	ra,1388(sp)
 40096ac:	df015a15 	stw	fp,1384(sp)
 40096b0:	ddc15915 	stw	r23,1380(sp)
 40096b4:	dd415715 	stw	r21,1372(sp)
 40096b8:	dd015615 	stw	r20,1368(sp)
 40096bc:	dcc15515 	stw	r19,1364(sp)
 40096c0:	dc815415 	stw	r18,1360(sp)
 40096c4:	dc415315 	stw	r17,1356(sp)
 40096c8:	282d883a 	mov	r22,r5
 40096cc:	3021883a 	mov	r16,r6
 40096d0:	d9014f15 	stw	r4,1340(sp)
 40096d4:	400deb80 	call	400deb8 <_localeconv_r>
 40096d8:	10800017 	ldw	r2,0(r2)
 40096dc:	d9c15117 	ldw	r7,1348(sp)
 40096e0:	d8814915 	stw	r2,1316(sp)
 40096e4:	d8814f17 	ldw	r2,1340(sp)
 40096e8:	10000226 	beq	r2,zero,40096f4 <___vfprintf_internal_r+0x5c>
 40096ec:	10800e17 	ldw	r2,56(r2)
 40096f0:	10020d26 	beq	r2,zero,4009f28 <___vfprintf_internal_r+0x890>
 40096f4:	b080030b 	ldhu	r2,12(r22)
 40096f8:	1080020c 	andi	r2,r2,8
 40096fc:	10020e26 	beq	r2,zero,4009f38 <___vfprintf_internal_r+0x8a0>
 4009700:	b0800417 	ldw	r2,16(r22)
 4009704:	10020c26 	beq	r2,zero,4009f38 <___vfprintf_internal_r+0x8a0>
 4009708:	b200030b 	ldhu	r8,12(r22)
 400970c:	00800284 	movi	r2,10
 4009710:	40c0068c 	andi	r3,r8,26
 4009714:	18802f1e 	bne	r3,r2,40097d4 <___vfprintf_internal_r+0x13c>
 4009718:	b080038f 	ldh	r2,14(r22)
 400971c:	10002d16 	blt	r2,zero,40097d4 <___vfprintf_internal_r+0x13c>
 4009720:	b240038b 	ldhu	r9,14(r22)
 4009724:	b2800717 	ldw	r10,28(r22)
 4009728:	b2c00917 	ldw	r11,36(r22)
 400972c:	d9014f17 	ldw	r4,1340(sp)
 4009730:	dc402904 	addi	r17,sp,164
 4009734:	d8804004 	addi	r2,sp,256
 4009738:	00c10004 	movi	r3,1024
 400973c:	423fff4c 	andi	r8,r8,65533
 4009740:	800d883a 	mov	r6,r16
 4009744:	880b883a 	mov	r5,r17
 4009748:	da002c0d 	sth	r8,176(sp)
 400974c:	da402c8d 	sth	r9,178(sp)
 4009750:	da803015 	stw	r10,192(sp)
 4009754:	dac03215 	stw	r11,200(sp)
 4009758:	d8802d15 	stw	r2,180(sp)
 400975c:	d8c02e15 	stw	r3,184(sp)
 4009760:	d8802915 	stw	r2,164(sp)
 4009764:	d8c02b15 	stw	r3,172(sp)
 4009768:	d8002f15 	stw	zero,188(sp)
 400976c:	40096980 	call	4009698 <___vfprintf_internal_r>
 4009770:	d8814b15 	stw	r2,1324(sp)
 4009774:	10000416 	blt	r2,zero,4009788 <___vfprintf_internal_r+0xf0>
 4009778:	d9014f17 	ldw	r4,1340(sp)
 400977c:	880b883a 	mov	r5,r17
 4009780:	400cf640 	call	400cf64 <_fflush_r>
 4009784:	1002321e 	bne	r2,zero,400a050 <___vfprintf_internal_r+0x9b8>
 4009788:	d8802c0b 	ldhu	r2,176(sp)
 400978c:	1080100c 	andi	r2,r2,64
 4009790:	10000326 	beq	r2,zero,40097a0 <___vfprintf_internal_r+0x108>
 4009794:	b080030b 	ldhu	r2,12(r22)
 4009798:	10801014 	ori	r2,r2,64
 400979c:	b080030d 	sth	r2,12(r22)
 40097a0:	d8814b17 	ldw	r2,1324(sp)
 40097a4:	dfc15b17 	ldw	ra,1388(sp)
 40097a8:	df015a17 	ldw	fp,1384(sp)
 40097ac:	ddc15917 	ldw	r23,1380(sp)
 40097b0:	dd815817 	ldw	r22,1376(sp)
 40097b4:	dd415717 	ldw	r21,1372(sp)
 40097b8:	dd015617 	ldw	r20,1368(sp)
 40097bc:	dcc15517 	ldw	r19,1364(sp)
 40097c0:	dc815417 	ldw	r18,1360(sp)
 40097c4:	dc415317 	ldw	r17,1356(sp)
 40097c8:	dc015217 	ldw	r16,1352(sp)
 40097cc:	dec15c04 	addi	sp,sp,1392
 40097d0:	f800283a 	ret
 40097d4:	0005883a 	mov	r2,zero
 40097d8:	0007883a 	mov	r3,zero
 40097dc:	dd401904 	addi	r21,sp,100
 40097e0:	d8814215 	stw	r2,1288(sp)
 40097e4:	802f883a 	mov	r23,r16
 40097e8:	d8c14315 	stw	r3,1292(sp)
 40097ec:	d8014b15 	stw	zero,1324(sp)
 40097f0:	d8014815 	stw	zero,1312(sp)
 40097f4:	d8014415 	stw	zero,1296(sp)
 40097f8:	d8014715 	stw	zero,1308(sp)
 40097fc:	dd400c15 	stw	r21,48(sp)
 4009800:	d8000e15 	stw	zero,56(sp)
 4009804:	d8000d15 	stw	zero,52(sp)
 4009808:	b8800007 	ldb	r2,0(r23)
 400980c:	10001926 	beq	r2,zero,4009874 <___vfprintf_internal_r+0x1dc>
 4009810:	00c00944 	movi	r3,37
 4009814:	10c01726 	beq	r2,r3,4009874 <___vfprintf_internal_r+0x1dc>
 4009818:	b821883a 	mov	r16,r23
 400981c:	00000106 	br	4009824 <___vfprintf_internal_r+0x18c>
 4009820:	10c00326 	beq	r2,r3,4009830 <___vfprintf_internal_r+0x198>
 4009824:	84000044 	addi	r16,r16,1
 4009828:	80800007 	ldb	r2,0(r16)
 400982c:	103ffc1e 	bne	r2,zero,4009820 <___vfprintf_internal_r+0x188>
 4009830:	85e7c83a 	sub	r19,r16,r23
 4009834:	98000e26 	beq	r19,zero,4009870 <___vfprintf_internal_r+0x1d8>
 4009838:	dc800e17 	ldw	r18,56(sp)
 400983c:	dc400d17 	ldw	r17,52(sp)
 4009840:	008001c4 	movi	r2,7
 4009844:	94e5883a 	add	r18,r18,r19
 4009848:	8c400044 	addi	r17,r17,1
 400984c:	adc00015 	stw	r23,0(r21)
 4009850:	dc800e15 	stw	r18,56(sp)
 4009854:	acc00115 	stw	r19,4(r21)
 4009858:	dc400d15 	stw	r17,52(sp)
 400985c:	14428b16 	blt	r2,r17,400a28c <___vfprintf_internal_r+0xbf4>
 4009860:	ad400204 	addi	r21,r21,8
 4009864:	d9014b17 	ldw	r4,1324(sp)
 4009868:	24c9883a 	add	r4,r4,r19
 400986c:	d9014b15 	stw	r4,1324(sp)
 4009870:	802f883a 	mov	r23,r16
 4009874:	b8800007 	ldb	r2,0(r23)
 4009878:	10013c26 	beq	r2,zero,4009d6c <___vfprintf_internal_r+0x6d4>
 400987c:	bdc00044 	addi	r23,r23,1
 4009880:	d8000405 	stb	zero,16(sp)
 4009884:	b8c00007 	ldb	r3,0(r23)
 4009888:	04ffffc4 	movi	r19,-1
 400988c:	d8014c15 	stw	zero,1328(sp)
 4009890:	d8014a15 	stw	zero,1320(sp)
 4009894:	d8c14d15 	stw	r3,1332(sp)
 4009898:	bdc00044 	addi	r23,r23,1
 400989c:	d9414d17 	ldw	r5,1332(sp)
 40098a0:	00801604 	movi	r2,88
 40098a4:	28fff804 	addi	r3,r5,-32
 40098a8:	10c06036 	bltu	r2,r3,4009a2c <___vfprintf_internal_r+0x394>
 40098ac:	18c5883a 	add	r2,r3,r3
 40098b0:	1085883a 	add	r2,r2,r2
 40098b4:	00c10074 	movhi	r3,1025
 40098b8:	18e63204 	addi	r3,r3,-26424
 40098bc:	10c5883a 	add	r2,r2,r3
 40098c0:	11000017 	ldw	r4,0(r2)
 40098c4:	2000683a 	jmp	r4
 40098c8:	0400a83c 	xorhi	r16,zero,672
 40098cc:	04009a2c 	andhi	r16,zero,616
 40098d0:	04009a2c 	andhi	r16,zero,616
 40098d4:	0400a828 	cmpgeui	r16,zero,672
 40098d8:	04009a2c 	andhi	r16,zero,616
 40098dc:	04009a2c 	andhi	r16,zero,616
 40098e0:	04009a2c 	andhi	r16,zero,616
 40098e4:	04009a2c 	andhi	r16,zero,616
 40098e8:	04009a2c 	andhi	r16,zero,616
 40098ec:	04009a2c 	andhi	r16,zero,616
 40098f0:	0400a608 	cmpgei	r16,zero,664
 40098f4:	0400a818 	cmpnei	r16,zero,672
 40098f8:	04009a2c 	andhi	r16,zero,616
 40098fc:	0400a620 	cmpeqi	r16,zero,664
 4009900:	0400a8b4 	movhi	r16,674
 4009904:	04009a2c 	andhi	r16,zero,616
 4009908:	0400a8a0 	cmpeqi	r16,zero,674
 400990c:	0400a868 	cmpgeui	r16,zero,673
 4009910:	0400a868 	cmpgeui	r16,zero,673
 4009914:	0400a868 	cmpgeui	r16,zero,673
 4009918:	0400a868 	cmpgeui	r16,zero,673
 400991c:	0400a868 	cmpgeui	r16,zero,673
 4009920:	0400a868 	cmpgeui	r16,zero,673
 4009924:	0400a868 	cmpgeui	r16,zero,673
 4009928:	0400a868 	cmpgeui	r16,zero,673
 400992c:	0400a868 	cmpgeui	r16,zero,673
 4009930:	04009a2c 	andhi	r16,zero,616
 4009934:	04009a2c 	andhi	r16,zero,616
 4009938:	04009a2c 	andhi	r16,zero,616
 400993c:	04009a2c 	andhi	r16,zero,616
 4009940:	04009a2c 	andhi	r16,zero,616
 4009944:	04009a2c 	andhi	r16,zero,616
 4009948:	04009a2c 	andhi	r16,zero,616
 400994c:	04009a2c 	andhi	r16,zero,616
 4009950:	04009a2c 	andhi	r16,zero,616
 4009954:	04009a2c 	andhi	r16,zero,616
 4009958:	0400a084 	movi	r16,642
 400995c:	0400a6f0 	cmpltui	r16,zero,667
 4009960:	04009a2c 	andhi	r16,zero,616
 4009964:	0400a6f0 	cmpltui	r16,zero,667
 4009968:	04009a2c 	andhi	r16,zero,616
 400996c:	04009a2c 	andhi	r16,zero,616
 4009970:	04009a2c 	andhi	r16,zero,616
 4009974:	04009a2c 	andhi	r16,zero,616
 4009978:	0400a854 	movui	r16,673
 400997c:	04009a2c 	andhi	r16,zero,616
 4009980:	04009a2c 	andhi	r16,zero,616
 4009984:	0400a138 	rdprs	r16,zero,644
 4009988:	04009a2c 	andhi	r16,zero,616
 400998c:	04009a2c 	andhi	r16,zero,616
 4009990:	04009a2c 	andhi	r16,zero,616
 4009994:	04009a2c 	andhi	r16,zero,616
 4009998:	04009a2c 	andhi	r16,zero,616
 400999c:	0400a184 	movi	r16,646
 40099a0:	04009a2c 	andhi	r16,zero,616
 40099a4:	04009a2c 	andhi	r16,zero,616
 40099a8:	0400a7a4 	muli	r16,zero,670
 40099ac:	04009a2c 	andhi	r16,zero,616
 40099b0:	04009a2c 	andhi	r16,zero,616
 40099b4:	04009a2c 	andhi	r16,zero,616
 40099b8:	04009a2c 	andhi	r16,zero,616
 40099bc:	04009a2c 	andhi	r16,zero,616
 40099c0:	04009a2c 	andhi	r16,zero,616
 40099c4:	04009a2c 	andhi	r16,zero,616
 40099c8:	04009a2c 	andhi	r16,zero,616
 40099cc:	04009a2c 	andhi	r16,zero,616
 40099d0:	04009a2c 	andhi	r16,zero,616
 40099d4:	0400a778 	rdprs	r16,zero,669
 40099d8:	0400a090 	cmplti	r16,zero,642
 40099dc:	0400a6f0 	cmpltui	r16,zero,667
 40099e0:	0400a6f0 	cmpltui	r16,zero,667
 40099e4:	0400a6f0 	cmpltui	r16,zero,667
 40099e8:	0400a6dc 	xori	r16,zero,667
 40099ec:	0400a090 	cmplti	r16,zero,642
 40099f0:	04009a2c 	andhi	r16,zero,616
 40099f4:	04009a2c 	andhi	r16,zero,616
 40099f8:	0400a664 	muli	r16,zero,665
 40099fc:	04009a2c 	andhi	r16,zero,616
 4009a00:	0400a634 	movhi	r16,664
 4009a04:	0400a144 	movi	r16,645
 4009a08:	0400a694 	movui	r16,666
 4009a0c:	0400a680 	call	400a68 <__reset-0x3bff598>
 4009a10:	04009a2c 	andhi	r16,zero,616
 4009a14:	0400a910 	cmplti	r16,zero,676
 4009a18:	04009a2c 	andhi	r16,zero,616
 4009a1c:	0400a190 	cmplti	r16,zero,646
 4009a20:	04009a2c 	andhi	r16,zero,616
 4009a24:	04009a2c 	andhi	r16,zero,616
 4009a28:	0400a808 	cmpgei	r16,zero,672
 4009a2c:	d9014d17 	ldw	r4,1332(sp)
 4009a30:	2000ce26 	beq	r4,zero,4009d6c <___vfprintf_internal_r+0x6d4>
 4009a34:	01400044 	movi	r5,1
 4009a38:	d9800f04 	addi	r6,sp,60
 4009a3c:	d9c14015 	stw	r7,1280(sp)
 4009a40:	d9414515 	stw	r5,1300(sp)
 4009a44:	d9814115 	stw	r6,1284(sp)
 4009a48:	280f883a 	mov	r7,r5
 4009a4c:	d9000f05 	stb	r4,60(sp)
 4009a50:	d8000405 	stb	zero,16(sp)
 4009a54:	d8014615 	stw	zero,1304(sp)
 4009a58:	d8c14c17 	ldw	r3,1328(sp)
 4009a5c:	1880008c 	andi	r2,r3,2
 4009a60:	1005003a 	cmpeq	r2,r2,zero
 4009a64:	d8815015 	stw	r2,1344(sp)
 4009a68:	1000031e 	bne	r2,zero,4009a78 <___vfprintf_internal_r+0x3e0>
 4009a6c:	d9014517 	ldw	r4,1300(sp)
 4009a70:	21000084 	addi	r4,r4,2
 4009a74:	d9014515 	stw	r4,1300(sp)
 4009a78:	d9414c17 	ldw	r5,1328(sp)
 4009a7c:	2940210c 	andi	r5,r5,132
 4009a80:	d9414e15 	stw	r5,1336(sp)
 4009a84:	28002d1e 	bne	r5,zero,4009b3c <___vfprintf_internal_r+0x4a4>
 4009a88:	d9814a17 	ldw	r6,1320(sp)
 4009a8c:	d8814517 	ldw	r2,1300(sp)
 4009a90:	30a1c83a 	sub	r16,r6,r2
 4009a94:	0400290e 	bge	zero,r16,4009b3c <___vfprintf_internal_r+0x4a4>
 4009a98:	00800404 	movi	r2,16
 4009a9c:	1404580e 	bge	r2,r16,400ac00 <___vfprintf_internal_r+0x1568>
 4009aa0:	dc800e17 	ldw	r18,56(sp)
 4009aa4:	dc400d17 	ldw	r17,52(sp)
 4009aa8:	1027883a 	mov	r19,r2
 4009aac:	070100f4 	movhi	fp,1027
 4009ab0:	e737b784 	addi	fp,fp,-8482
 4009ab4:	050001c4 	movi	r20,7
 4009ab8:	00000306 	br	4009ac8 <___vfprintf_internal_r+0x430>
 4009abc:	843ffc04 	addi	r16,r16,-16
 4009ac0:	ad400204 	addi	r21,r21,8
 4009ac4:	9c00130e 	bge	r19,r16,4009b14 <___vfprintf_internal_r+0x47c>
 4009ac8:	94800404 	addi	r18,r18,16
 4009acc:	8c400044 	addi	r17,r17,1
 4009ad0:	af000015 	stw	fp,0(r21)
 4009ad4:	acc00115 	stw	r19,4(r21)
 4009ad8:	dc800e15 	stw	r18,56(sp)
 4009adc:	dc400d15 	stw	r17,52(sp)
 4009ae0:	a47ff60e 	bge	r20,r17,4009abc <___vfprintf_internal_r+0x424>
 4009ae4:	d9014f17 	ldw	r4,1340(sp)
 4009ae8:	b00b883a 	mov	r5,r22
 4009aec:	d9800c04 	addi	r6,sp,48
 4009af0:	d9c15115 	stw	r7,1348(sp)
 4009af4:	40096400 	call	4009640 <__sprint_r>
 4009af8:	d9c15117 	ldw	r7,1348(sp)
 4009afc:	10009e1e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 4009b00:	843ffc04 	addi	r16,r16,-16
 4009b04:	dc800e17 	ldw	r18,56(sp)
 4009b08:	dc400d17 	ldw	r17,52(sp)
 4009b0c:	dd401904 	addi	r21,sp,100
 4009b10:	9c3fed16 	blt	r19,r16,4009ac8 <___vfprintf_internal_r+0x430>
 4009b14:	9425883a 	add	r18,r18,r16
 4009b18:	8c400044 	addi	r17,r17,1
 4009b1c:	008001c4 	movi	r2,7
 4009b20:	af000015 	stw	fp,0(r21)
 4009b24:	ac000115 	stw	r16,4(r21)
 4009b28:	dc800e15 	stw	r18,56(sp)
 4009b2c:	dc400d15 	stw	r17,52(sp)
 4009b30:	1441f516 	blt	r2,r17,400a308 <___vfprintf_internal_r+0xc70>
 4009b34:	ad400204 	addi	r21,r21,8
 4009b38:	00000206 	br	4009b44 <___vfprintf_internal_r+0x4ac>
 4009b3c:	dc800e17 	ldw	r18,56(sp)
 4009b40:	dc400d17 	ldw	r17,52(sp)
 4009b44:	d8800407 	ldb	r2,16(sp)
 4009b48:	10000b26 	beq	r2,zero,4009b78 <___vfprintf_internal_r+0x4e0>
 4009b4c:	00800044 	movi	r2,1
 4009b50:	94800044 	addi	r18,r18,1
 4009b54:	8c400044 	addi	r17,r17,1
 4009b58:	a8800115 	stw	r2,4(r21)
 4009b5c:	d8c00404 	addi	r3,sp,16
 4009b60:	008001c4 	movi	r2,7
 4009b64:	a8c00015 	stw	r3,0(r21)
 4009b68:	dc800e15 	stw	r18,56(sp)
 4009b6c:	dc400d15 	stw	r17,52(sp)
 4009b70:	1441da16 	blt	r2,r17,400a2dc <___vfprintf_internal_r+0xc44>
 4009b74:	ad400204 	addi	r21,r21,8
 4009b78:	d9015017 	ldw	r4,1344(sp)
 4009b7c:	20000b1e 	bne	r4,zero,4009bac <___vfprintf_internal_r+0x514>
 4009b80:	d8800444 	addi	r2,sp,17
 4009b84:	94800084 	addi	r18,r18,2
 4009b88:	8c400044 	addi	r17,r17,1
 4009b8c:	a8800015 	stw	r2,0(r21)
 4009b90:	00c00084 	movi	r3,2
 4009b94:	008001c4 	movi	r2,7
 4009b98:	a8c00115 	stw	r3,4(r21)
 4009b9c:	dc800e15 	stw	r18,56(sp)
 4009ba0:	dc400d15 	stw	r17,52(sp)
 4009ba4:	1441c216 	blt	r2,r17,400a2b0 <___vfprintf_internal_r+0xc18>
 4009ba8:	ad400204 	addi	r21,r21,8
 4009bac:	d9414e17 	ldw	r5,1336(sp)
 4009bb0:	00802004 	movi	r2,128
 4009bb4:	2880b126 	beq	r5,r2,4009e7c <___vfprintf_internal_r+0x7e4>
 4009bb8:	d8c14617 	ldw	r3,1304(sp)
 4009bbc:	19e1c83a 	sub	r16,r3,r7
 4009bc0:	0400260e 	bge	zero,r16,4009c5c <___vfprintf_internal_r+0x5c4>
 4009bc4:	00800404 	movi	r2,16
 4009bc8:	1403c90e 	bge	r2,r16,400aaf0 <___vfprintf_internal_r+0x1458>
 4009bcc:	1027883a 	mov	r19,r2
 4009bd0:	070100f4 	movhi	fp,1027
 4009bd4:	e737b384 	addi	fp,fp,-8498
 4009bd8:	050001c4 	movi	r20,7
 4009bdc:	00000306 	br	4009bec <___vfprintf_internal_r+0x554>
 4009be0:	843ffc04 	addi	r16,r16,-16
 4009be4:	ad400204 	addi	r21,r21,8
 4009be8:	9c00130e 	bge	r19,r16,4009c38 <___vfprintf_internal_r+0x5a0>
 4009bec:	94800404 	addi	r18,r18,16
 4009bf0:	8c400044 	addi	r17,r17,1
 4009bf4:	af000015 	stw	fp,0(r21)
 4009bf8:	acc00115 	stw	r19,4(r21)
 4009bfc:	dc800e15 	stw	r18,56(sp)
 4009c00:	dc400d15 	stw	r17,52(sp)
 4009c04:	a47ff60e 	bge	r20,r17,4009be0 <___vfprintf_internal_r+0x548>
 4009c08:	d9014f17 	ldw	r4,1340(sp)
 4009c0c:	b00b883a 	mov	r5,r22
 4009c10:	d9800c04 	addi	r6,sp,48
 4009c14:	d9c15115 	stw	r7,1348(sp)
 4009c18:	40096400 	call	4009640 <__sprint_r>
 4009c1c:	d9c15117 	ldw	r7,1348(sp)
 4009c20:	1000551e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 4009c24:	843ffc04 	addi	r16,r16,-16
 4009c28:	dc800e17 	ldw	r18,56(sp)
 4009c2c:	dc400d17 	ldw	r17,52(sp)
 4009c30:	dd401904 	addi	r21,sp,100
 4009c34:	9c3fed16 	blt	r19,r16,4009bec <___vfprintf_internal_r+0x554>
 4009c38:	9425883a 	add	r18,r18,r16
 4009c3c:	8c400044 	addi	r17,r17,1
 4009c40:	008001c4 	movi	r2,7
 4009c44:	af000015 	stw	fp,0(r21)
 4009c48:	ac000115 	stw	r16,4(r21)
 4009c4c:	dc800e15 	stw	r18,56(sp)
 4009c50:	dc400d15 	stw	r17,52(sp)
 4009c54:	14418216 	blt	r2,r17,400a260 <___vfprintf_internal_r+0xbc8>
 4009c58:	ad400204 	addi	r21,r21,8
 4009c5c:	d9014c17 	ldw	r4,1328(sp)
 4009c60:	2080400c 	andi	r2,r4,256
 4009c64:	10004a1e 	bne	r2,zero,4009d90 <___vfprintf_internal_r+0x6f8>
 4009c68:	d9414117 	ldw	r5,1284(sp)
 4009c6c:	91e5883a 	add	r18,r18,r7
 4009c70:	8c400044 	addi	r17,r17,1
 4009c74:	008001c4 	movi	r2,7
 4009c78:	a9400015 	stw	r5,0(r21)
 4009c7c:	a9c00115 	stw	r7,4(r21)
 4009c80:	dc800e15 	stw	r18,56(sp)
 4009c84:	dc400d15 	stw	r17,52(sp)
 4009c88:	14416716 	blt	r2,r17,400a228 <___vfprintf_internal_r+0xb90>
 4009c8c:	a8c00204 	addi	r3,r21,8
 4009c90:	d9814c17 	ldw	r6,1328(sp)
 4009c94:	3080010c 	andi	r2,r6,4
 4009c98:	10002826 	beq	r2,zero,4009d3c <___vfprintf_internal_r+0x6a4>
 4009c9c:	d8814a17 	ldw	r2,1320(sp)
 4009ca0:	d9014517 	ldw	r4,1300(sp)
 4009ca4:	1121c83a 	sub	r16,r2,r4
 4009ca8:	0400240e 	bge	zero,r16,4009d3c <___vfprintf_internal_r+0x6a4>
 4009cac:	00800404 	movi	r2,16
 4009cb0:	14044f0e 	bge	r2,r16,400adf0 <___vfprintf_internal_r+0x1758>
 4009cb4:	dc400d17 	ldw	r17,52(sp)
 4009cb8:	1027883a 	mov	r19,r2
 4009cbc:	070100f4 	movhi	fp,1027
 4009cc0:	e737b784 	addi	fp,fp,-8482
 4009cc4:	050001c4 	movi	r20,7
 4009cc8:	00000306 	br	4009cd8 <___vfprintf_internal_r+0x640>
 4009ccc:	843ffc04 	addi	r16,r16,-16
 4009cd0:	18c00204 	addi	r3,r3,8
 4009cd4:	9c00110e 	bge	r19,r16,4009d1c <___vfprintf_internal_r+0x684>
 4009cd8:	94800404 	addi	r18,r18,16
 4009cdc:	8c400044 	addi	r17,r17,1
 4009ce0:	1f000015 	stw	fp,0(r3)
 4009ce4:	1cc00115 	stw	r19,4(r3)
 4009ce8:	dc800e15 	stw	r18,56(sp)
 4009cec:	dc400d15 	stw	r17,52(sp)
 4009cf0:	a47ff60e 	bge	r20,r17,4009ccc <___vfprintf_internal_r+0x634>
 4009cf4:	d9014f17 	ldw	r4,1340(sp)
 4009cf8:	b00b883a 	mov	r5,r22
 4009cfc:	d9800c04 	addi	r6,sp,48
 4009d00:	40096400 	call	4009640 <__sprint_r>
 4009d04:	10001c1e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 4009d08:	843ffc04 	addi	r16,r16,-16
 4009d0c:	dc800e17 	ldw	r18,56(sp)
 4009d10:	dc400d17 	ldw	r17,52(sp)
 4009d14:	d8c01904 	addi	r3,sp,100
 4009d18:	9c3fef16 	blt	r19,r16,4009cd8 <___vfprintf_internal_r+0x640>
 4009d1c:	9425883a 	add	r18,r18,r16
 4009d20:	8c400044 	addi	r17,r17,1
 4009d24:	008001c4 	movi	r2,7
 4009d28:	1f000015 	stw	fp,0(r3)
 4009d2c:	1c000115 	stw	r16,4(r3)
 4009d30:	dc800e15 	stw	r18,56(sp)
 4009d34:	dc400d15 	stw	r17,52(sp)
 4009d38:	1440cb16 	blt	r2,r17,400a068 <___vfprintf_internal_r+0x9d0>
 4009d3c:	d8814a17 	ldw	r2,1320(sp)
 4009d40:	d9414517 	ldw	r5,1300(sp)
 4009d44:	1140010e 	bge	r2,r5,4009d4c <___vfprintf_internal_r+0x6b4>
 4009d48:	2805883a 	mov	r2,r5
 4009d4c:	d9814b17 	ldw	r6,1324(sp)
 4009d50:	308d883a 	add	r6,r6,r2
 4009d54:	d9814b15 	stw	r6,1324(sp)
 4009d58:	90013b1e 	bne	r18,zero,400a248 <___vfprintf_internal_r+0xbb0>
 4009d5c:	d9c14017 	ldw	r7,1280(sp)
 4009d60:	dd401904 	addi	r21,sp,100
 4009d64:	d8000d15 	stw	zero,52(sp)
 4009d68:	003ea706 	br	4009808 <___vfprintf_internal_r+0x170>
 4009d6c:	d8800e17 	ldw	r2,56(sp)
 4009d70:	10053f1e 	bne	r2,zero,400b270 <___vfprintf_internal_r+0x1bd8>
 4009d74:	d8000d15 	stw	zero,52(sp)
 4009d78:	b080030b 	ldhu	r2,12(r22)
 4009d7c:	1080100c 	andi	r2,r2,64
 4009d80:	103e8726 	beq	r2,zero,40097a0 <___vfprintf_internal_r+0x108>
 4009d84:	00bfffc4 	movi	r2,-1
 4009d88:	d8814b15 	stw	r2,1324(sp)
 4009d8c:	003e8406 	br	40097a0 <___vfprintf_internal_r+0x108>
 4009d90:	d9814d17 	ldw	r6,1332(sp)
 4009d94:	00801944 	movi	r2,101
 4009d98:	11806e16 	blt	r2,r6,4009f54 <___vfprintf_internal_r+0x8bc>
 4009d9c:	d9414717 	ldw	r5,1308(sp)
 4009da0:	00c00044 	movi	r3,1
 4009da4:	1943430e 	bge	r3,r5,400aab4 <___vfprintf_internal_r+0x141c>
 4009da8:	d8814117 	ldw	r2,1284(sp)
 4009dac:	94800044 	addi	r18,r18,1
 4009db0:	8c400044 	addi	r17,r17,1
 4009db4:	a8800015 	stw	r2,0(r21)
 4009db8:	008001c4 	movi	r2,7
 4009dbc:	a8c00115 	stw	r3,4(r21)
 4009dc0:	dc800e15 	stw	r18,56(sp)
 4009dc4:	dc400d15 	stw	r17,52(sp)
 4009dc8:	1441ca16 	blt	r2,r17,400a4f4 <___vfprintf_internal_r+0xe5c>
 4009dcc:	a8c00204 	addi	r3,r21,8
 4009dd0:	d9014917 	ldw	r4,1316(sp)
 4009dd4:	00800044 	movi	r2,1
 4009dd8:	94800044 	addi	r18,r18,1
 4009ddc:	8c400044 	addi	r17,r17,1
 4009de0:	18800115 	stw	r2,4(r3)
 4009de4:	008001c4 	movi	r2,7
 4009de8:	19000015 	stw	r4,0(r3)
 4009dec:	dc800e15 	stw	r18,56(sp)
 4009df0:	dc400d15 	stw	r17,52(sp)
 4009df4:	1441b616 	blt	r2,r17,400a4d0 <___vfprintf_internal_r+0xe38>
 4009df8:	1cc00204 	addi	r19,r3,8
 4009dfc:	d9014217 	ldw	r4,1288(sp)
 4009e00:	d9414317 	ldw	r5,1292(sp)
 4009e04:	000d883a 	mov	r6,zero
 4009e08:	000f883a 	mov	r7,zero
 4009e0c:	4010ba40 	call	4010ba4 <__nedf2>
 4009e10:	10017426 	beq	r2,zero,400a3e4 <___vfprintf_internal_r+0xd4c>
 4009e14:	d9414717 	ldw	r5,1308(sp)
 4009e18:	d9814117 	ldw	r6,1284(sp)
 4009e1c:	8c400044 	addi	r17,r17,1
 4009e20:	2c85883a 	add	r2,r5,r18
 4009e24:	14bfffc4 	addi	r18,r2,-1
 4009e28:	28bfffc4 	addi	r2,r5,-1
 4009e2c:	30c00044 	addi	r3,r6,1
 4009e30:	98800115 	stw	r2,4(r19)
 4009e34:	008001c4 	movi	r2,7
 4009e38:	98c00015 	stw	r3,0(r19)
 4009e3c:	dc800e15 	stw	r18,56(sp)
 4009e40:	dc400d15 	stw	r17,52(sp)
 4009e44:	14418e16 	blt	r2,r17,400a480 <___vfprintf_internal_r+0xde8>
 4009e48:	9cc00204 	addi	r19,r19,8
 4009e4c:	d9414817 	ldw	r5,1312(sp)
 4009e50:	d8800804 	addi	r2,sp,32
 4009e54:	8c400044 	addi	r17,r17,1
 4009e58:	9165883a 	add	r18,r18,r5
 4009e5c:	98800015 	stw	r2,0(r19)
 4009e60:	008001c4 	movi	r2,7
 4009e64:	99400115 	stw	r5,4(r19)
 4009e68:	dc800e15 	stw	r18,56(sp)
 4009e6c:	dc400d15 	stw	r17,52(sp)
 4009e70:	1440ed16 	blt	r2,r17,400a228 <___vfprintf_internal_r+0xb90>
 4009e74:	98c00204 	addi	r3,r19,8
 4009e78:	003f8506 	br	4009c90 <___vfprintf_internal_r+0x5f8>
 4009e7c:	d9814a17 	ldw	r6,1320(sp)
 4009e80:	d8814517 	ldw	r2,1300(sp)
 4009e84:	30a1c83a 	sub	r16,r6,r2
 4009e88:	043f4b0e 	bge	zero,r16,4009bb8 <___vfprintf_internal_r+0x520>
 4009e8c:	00800404 	movi	r2,16
 4009e90:	1404340e 	bge	r2,r16,400af64 <___vfprintf_internal_r+0x18cc>
 4009e94:	1027883a 	mov	r19,r2
 4009e98:	070100f4 	movhi	fp,1027
 4009e9c:	e737b384 	addi	fp,fp,-8498
 4009ea0:	050001c4 	movi	r20,7
 4009ea4:	00000306 	br	4009eb4 <___vfprintf_internal_r+0x81c>
 4009ea8:	843ffc04 	addi	r16,r16,-16
 4009eac:	ad400204 	addi	r21,r21,8
 4009eb0:	9c00130e 	bge	r19,r16,4009f00 <___vfprintf_internal_r+0x868>
 4009eb4:	94800404 	addi	r18,r18,16
 4009eb8:	8c400044 	addi	r17,r17,1
 4009ebc:	af000015 	stw	fp,0(r21)
 4009ec0:	acc00115 	stw	r19,4(r21)
 4009ec4:	dc800e15 	stw	r18,56(sp)
 4009ec8:	dc400d15 	stw	r17,52(sp)
 4009ecc:	a47ff60e 	bge	r20,r17,4009ea8 <___vfprintf_internal_r+0x810>
 4009ed0:	d9014f17 	ldw	r4,1340(sp)
 4009ed4:	b00b883a 	mov	r5,r22
 4009ed8:	d9800c04 	addi	r6,sp,48
 4009edc:	d9c15115 	stw	r7,1348(sp)
 4009ee0:	40096400 	call	4009640 <__sprint_r>
 4009ee4:	d9c15117 	ldw	r7,1348(sp)
 4009ee8:	103fa31e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 4009eec:	843ffc04 	addi	r16,r16,-16
 4009ef0:	dc800e17 	ldw	r18,56(sp)
 4009ef4:	dc400d17 	ldw	r17,52(sp)
 4009ef8:	dd401904 	addi	r21,sp,100
 4009efc:	9c3fed16 	blt	r19,r16,4009eb4 <___vfprintf_internal_r+0x81c>
 4009f00:	9425883a 	add	r18,r18,r16
 4009f04:	8c400044 	addi	r17,r17,1
 4009f08:	008001c4 	movi	r2,7
 4009f0c:	af000015 	stw	fp,0(r21)
 4009f10:	ac000115 	stw	r16,4(r21)
 4009f14:	dc800e15 	stw	r18,56(sp)
 4009f18:	dc400d15 	stw	r17,52(sp)
 4009f1c:	14416116 	blt	r2,r17,400a4a4 <___vfprintf_internal_r+0xe0c>
 4009f20:	ad400204 	addi	r21,r21,8
 4009f24:	003f2406 	br	4009bb8 <___vfprintf_internal_r+0x520>
 4009f28:	d9014f17 	ldw	r4,1340(sp)
 4009f2c:	400d1fc0 	call	400d1fc <__sinit>
 4009f30:	d9c15117 	ldw	r7,1348(sp)
 4009f34:	003def06 	br	40096f4 <___vfprintf_internal_r+0x5c>
 4009f38:	d9014f17 	ldw	r4,1340(sp)
 4009f3c:	b00b883a 	mov	r5,r22
 4009f40:	d9c15115 	stw	r7,1348(sp)
 4009f44:	400b65c0 	call	400b65c <__swsetup_r>
 4009f48:	d9c15117 	ldw	r7,1348(sp)
 4009f4c:	103dee26 	beq	r2,zero,4009708 <___vfprintf_internal_r+0x70>
 4009f50:	003f8c06 	br	4009d84 <___vfprintf_internal_r+0x6ec>
 4009f54:	d9014217 	ldw	r4,1288(sp)
 4009f58:	d9414317 	ldw	r5,1292(sp)
 4009f5c:	000d883a 	mov	r6,zero
 4009f60:	000f883a 	mov	r7,zero
 4009f64:	4010b1c0 	call	4010b1c <__eqdf2>
 4009f68:	1000f21e 	bne	r2,zero,400a334 <___vfprintf_internal_r+0xc9c>
 4009f6c:	008100f4 	movhi	r2,1027
 4009f70:	10b7b304 	addi	r2,r2,-8500
 4009f74:	94800044 	addi	r18,r18,1
 4009f78:	8c400044 	addi	r17,r17,1
 4009f7c:	a8800015 	stw	r2,0(r21)
 4009f80:	00c00044 	movi	r3,1
 4009f84:	008001c4 	movi	r2,7
 4009f88:	a8c00115 	stw	r3,4(r21)
 4009f8c:	dc800e15 	stw	r18,56(sp)
 4009f90:	dc400d15 	stw	r17,52(sp)
 4009f94:	1442fa16 	blt	r2,r17,400ab80 <___vfprintf_internal_r+0x14e8>
 4009f98:	a8c00204 	addi	r3,r21,8
 4009f9c:	d8800517 	ldw	r2,20(sp)
 4009fa0:	d9014717 	ldw	r4,1308(sp)
 4009fa4:	11015c0e 	bge	r2,r4,400a518 <___vfprintf_internal_r+0xe80>
 4009fa8:	dc400d17 	ldw	r17,52(sp)
 4009fac:	d9814917 	ldw	r6,1316(sp)
 4009fb0:	00800044 	movi	r2,1
 4009fb4:	94800044 	addi	r18,r18,1
 4009fb8:	8c400044 	addi	r17,r17,1
 4009fbc:	18800115 	stw	r2,4(r3)
 4009fc0:	008001c4 	movi	r2,7
 4009fc4:	19800015 	stw	r6,0(r3)
 4009fc8:	dc800e15 	stw	r18,56(sp)
 4009fcc:	dc400d15 	stw	r17,52(sp)
 4009fd0:	14431016 	blt	r2,r17,400ac14 <___vfprintf_internal_r+0x157c>
 4009fd4:	18c00204 	addi	r3,r3,8
 4009fd8:	d8814717 	ldw	r2,1308(sp)
 4009fdc:	143fffc4 	addi	r16,r2,-1
 4009fe0:	043f2b0e 	bge	zero,r16,4009c90 <___vfprintf_internal_r+0x5f8>
 4009fe4:	00800404 	movi	r2,16
 4009fe8:	1402a20e 	bge	r2,r16,400aa74 <___vfprintf_internal_r+0x13dc>
 4009fec:	dc400d17 	ldw	r17,52(sp)
 4009ff0:	1027883a 	mov	r19,r2
 4009ff4:	070100f4 	movhi	fp,1027
 4009ff8:	e737b384 	addi	fp,fp,-8498
 4009ffc:	050001c4 	movi	r20,7
 400a000:	00000306 	br	400a010 <___vfprintf_internal_r+0x978>
 400a004:	18c00204 	addi	r3,r3,8
 400a008:	843ffc04 	addi	r16,r16,-16
 400a00c:	9c029c0e 	bge	r19,r16,400aa80 <___vfprintf_internal_r+0x13e8>
 400a010:	94800404 	addi	r18,r18,16
 400a014:	8c400044 	addi	r17,r17,1
 400a018:	1f000015 	stw	fp,0(r3)
 400a01c:	1cc00115 	stw	r19,4(r3)
 400a020:	dc800e15 	stw	r18,56(sp)
 400a024:	dc400d15 	stw	r17,52(sp)
 400a028:	a47ff60e 	bge	r20,r17,400a004 <___vfprintf_internal_r+0x96c>
 400a02c:	d9014f17 	ldw	r4,1340(sp)
 400a030:	b00b883a 	mov	r5,r22
 400a034:	d9800c04 	addi	r6,sp,48
 400a038:	40096400 	call	4009640 <__sprint_r>
 400a03c:	103f4e1e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a040:	dc800e17 	ldw	r18,56(sp)
 400a044:	dc400d17 	ldw	r17,52(sp)
 400a048:	d8c01904 	addi	r3,sp,100
 400a04c:	003fee06 	br	400a008 <___vfprintf_internal_r+0x970>
 400a050:	d8802c0b 	ldhu	r2,176(sp)
 400a054:	00ffffc4 	movi	r3,-1
 400a058:	d8c14b15 	stw	r3,1324(sp)
 400a05c:	1080100c 	andi	r2,r2,64
 400a060:	103dcc1e 	bne	r2,zero,4009794 <___vfprintf_internal_r+0xfc>
 400a064:	003dce06 	br	40097a0 <___vfprintf_internal_r+0x108>
 400a068:	d9014f17 	ldw	r4,1340(sp)
 400a06c:	b00b883a 	mov	r5,r22
 400a070:	d9800c04 	addi	r6,sp,48
 400a074:	40096400 	call	4009640 <__sprint_r>
 400a078:	103f3f1e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a07c:	dc800e17 	ldw	r18,56(sp)
 400a080:	003f2e06 	br	4009d3c <___vfprintf_internal_r+0x6a4>
 400a084:	d9414c17 	ldw	r5,1328(sp)
 400a088:	29400414 	ori	r5,r5,16
 400a08c:	d9414c15 	stw	r5,1328(sp)
 400a090:	d9814c17 	ldw	r6,1328(sp)
 400a094:	3080080c 	andi	r2,r6,32
 400a098:	10014f1e 	bne	r2,zero,400a5d8 <___vfprintf_internal_r+0xf40>
 400a09c:	d8c14c17 	ldw	r3,1328(sp)
 400a0a0:	1880040c 	andi	r2,r3,16
 400a0a4:	1002ea1e 	bne	r2,zero,400ac50 <___vfprintf_internal_r+0x15b8>
 400a0a8:	d9014c17 	ldw	r4,1328(sp)
 400a0ac:	2080100c 	andi	r2,r4,64
 400a0b0:	1002e726 	beq	r2,zero,400ac50 <___vfprintf_internal_r+0x15b8>
 400a0b4:	3880000f 	ldh	r2,0(r7)
 400a0b8:	39c00104 	addi	r7,r7,4
 400a0bc:	d9c14015 	stw	r7,1280(sp)
 400a0c0:	1023d7fa 	srai	r17,r2,31
 400a0c4:	1021883a 	mov	r16,r2
 400a0c8:	88037216 	blt	r17,zero,400ae94 <___vfprintf_internal_r+0x17fc>
 400a0cc:	01000044 	movi	r4,1
 400a0d0:	98000416 	blt	r19,zero,400a0e4 <___vfprintf_internal_r+0xa4c>
 400a0d4:	d8c14c17 	ldw	r3,1328(sp)
 400a0d8:	00bfdfc4 	movi	r2,-129
 400a0dc:	1886703a 	and	r3,r3,r2
 400a0e0:	d8c14c15 	stw	r3,1328(sp)
 400a0e4:	8444b03a 	or	r2,r16,r17
 400a0e8:	1002261e 	bne	r2,zero,400a984 <___vfprintf_internal_r+0x12ec>
 400a0ec:	9802251e 	bne	r19,zero,400a984 <___vfprintf_internal_r+0x12ec>
 400a0f0:	20803fcc 	andi	r2,r4,255
 400a0f4:	10029b26 	beq	r2,zero,400ab64 <___vfprintf_internal_r+0x14cc>
 400a0f8:	d8c01904 	addi	r3,sp,100
 400a0fc:	dd000f04 	addi	r20,sp,60
 400a100:	d8c14115 	stw	r3,1284(sp)
 400a104:	d8c14117 	ldw	r3,1284(sp)
 400a108:	dcc14515 	stw	r19,1300(sp)
 400a10c:	a0c5c83a 	sub	r2,r20,r3
 400a110:	11c00a04 	addi	r7,r2,40
 400a114:	99c0010e 	bge	r19,r7,400a11c <___vfprintf_internal_r+0xa84>
 400a118:	d9c14515 	stw	r7,1300(sp)
 400a11c:	dcc14615 	stw	r19,1304(sp)
 400a120:	d8800407 	ldb	r2,16(sp)
 400a124:	103e4c26 	beq	r2,zero,4009a58 <___vfprintf_internal_r+0x3c0>
 400a128:	d8814517 	ldw	r2,1300(sp)
 400a12c:	10800044 	addi	r2,r2,1
 400a130:	d8814515 	stw	r2,1300(sp)
 400a134:	003e4806 	br	4009a58 <___vfprintf_internal_r+0x3c0>
 400a138:	d9814c17 	ldw	r6,1328(sp)
 400a13c:	31800414 	ori	r6,r6,16
 400a140:	d9814c15 	stw	r6,1328(sp)
 400a144:	d8c14c17 	ldw	r3,1328(sp)
 400a148:	1880080c 	andi	r2,r3,32
 400a14c:	1001271e 	bne	r2,zero,400a5ec <___vfprintf_internal_r+0xf54>
 400a150:	d9414c17 	ldw	r5,1328(sp)
 400a154:	2880040c 	andi	r2,r5,16
 400a158:	1002b61e 	bne	r2,zero,400ac34 <___vfprintf_internal_r+0x159c>
 400a15c:	d9814c17 	ldw	r6,1328(sp)
 400a160:	3080100c 	andi	r2,r6,64
 400a164:	1002b326 	beq	r2,zero,400ac34 <___vfprintf_internal_r+0x159c>
 400a168:	3c00000b 	ldhu	r16,0(r7)
 400a16c:	0009883a 	mov	r4,zero
 400a170:	39c00104 	addi	r7,r7,4
 400a174:	0023883a 	mov	r17,zero
 400a178:	d9c14015 	stw	r7,1280(sp)
 400a17c:	d8000405 	stb	zero,16(sp)
 400a180:	003fd306 	br	400a0d0 <___vfprintf_internal_r+0xa38>
 400a184:	d9014c17 	ldw	r4,1328(sp)
 400a188:	21000414 	ori	r4,r4,16
 400a18c:	d9014c15 	stw	r4,1328(sp)
 400a190:	d9414c17 	ldw	r5,1328(sp)
 400a194:	2880080c 	andi	r2,r5,32
 400a198:	1001081e 	bne	r2,zero,400a5bc <___vfprintf_internal_r+0xf24>
 400a19c:	d8c14c17 	ldw	r3,1328(sp)
 400a1a0:	1880040c 	andi	r2,r3,16
 400a1a4:	1002b01e 	bne	r2,zero,400ac68 <___vfprintf_internal_r+0x15d0>
 400a1a8:	d9014c17 	ldw	r4,1328(sp)
 400a1ac:	2080100c 	andi	r2,r4,64
 400a1b0:	1002ad26 	beq	r2,zero,400ac68 <___vfprintf_internal_r+0x15d0>
 400a1b4:	3c00000b 	ldhu	r16,0(r7)
 400a1b8:	01000044 	movi	r4,1
 400a1bc:	39c00104 	addi	r7,r7,4
 400a1c0:	0023883a 	mov	r17,zero
 400a1c4:	d9c14015 	stw	r7,1280(sp)
 400a1c8:	d8000405 	stb	zero,16(sp)
 400a1cc:	003fc006 	br	400a0d0 <___vfprintf_internal_r+0xa38>
 400a1d0:	d9014f17 	ldw	r4,1340(sp)
 400a1d4:	b00b883a 	mov	r5,r22
 400a1d8:	d9800c04 	addi	r6,sp,48
 400a1dc:	40096400 	call	4009640 <__sprint_r>
 400a1e0:	103ee51e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a1e4:	dc800e17 	ldw	r18,56(sp)
 400a1e8:	d8c01904 	addi	r3,sp,100
 400a1ec:	d9814c17 	ldw	r6,1328(sp)
 400a1f0:	3080004c 	andi	r2,r6,1
 400a1f4:	1005003a 	cmpeq	r2,r2,zero
 400a1f8:	103ea51e 	bne	r2,zero,4009c90 <___vfprintf_internal_r+0x5f8>
 400a1fc:	00800044 	movi	r2,1
 400a200:	dc400d17 	ldw	r17,52(sp)
 400a204:	18800115 	stw	r2,4(r3)
 400a208:	d8814917 	ldw	r2,1316(sp)
 400a20c:	94800044 	addi	r18,r18,1
 400a210:	8c400044 	addi	r17,r17,1
 400a214:	18800015 	stw	r2,0(r3)
 400a218:	008001c4 	movi	r2,7
 400a21c:	dc800e15 	stw	r18,56(sp)
 400a220:	dc400d15 	stw	r17,52(sp)
 400a224:	14421e0e 	bge	r2,r17,400aaa0 <___vfprintf_internal_r+0x1408>
 400a228:	d9014f17 	ldw	r4,1340(sp)
 400a22c:	b00b883a 	mov	r5,r22
 400a230:	d9800c04 	addi	r6,sp,48
 400a234:	40096400 	call	4009640 <__sprint_r>
 400a238:	103ecf1e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a23c:	dc800e17 	ldw	r18,56(sp)
 400a240:	d8c01904 	addi	r3,sp,100
 400a244:	003e9206 	br	4009c90 <___vfprintf_internal_r+0x5f8>
 400a248:	d9014f17 	ldw	r4,1340(sp)
 400a24c:	b00b883a 	mov	r5,r22
 400a250:	d9800c04 	addi	r6,sp,48
 400a254:	40096400 	call	4009640 <__sprint_r>
 400a258:	103ec026 	beq	r2,zero,4009d5c <___vfprintf_internal_r+0x6c4>
 400a25c:	003ec606 	br	4009d78 <___vfprintf_internal_r+0x6e0>
 400a260:	d9014f17 	ldw	r4,1340(sp)
 400a264:	b00b883a 	mov	r5,r22
 400a268:	d9800c04 	addi	r6,sp,48
 400a26c:	d9c15115 	stw	r7,1348(sp)
 400a270:	40096400 	call	4009640 <__sprint_r>
 400a274:	d9c15117 	ldw	r7,1348(sp)
 400a278:	103ebf1e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a27c:	dc800e17 	ldw	r18,56(sp)
 400a280:	dc400d17 	ldw	r17,52(sp)
 400a284:	dd401904 	addi	r21,sp,100
 400a288:	003e7406 	br	4009c5c <___vfprintf_internal_r+0x5c4>
 400a28c:	d9014f17 	ldw	r4,1340(sp)
 400a290:	b00b883a 	mov	r5,r22
 400a294:	d9800c04 	addi	r6,sp,48
 400a298:	d9c15115 	stw	r7,1348(sp)
 400a29c:	40096400 	call	4009640 <__sprint_r>
 400a2a0:	d9c15117 	ldw	r7,1348(sp)
 400a2a4:	103eb41e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a2a8:	dd401904 	addi	r21,sp,100
 400a2ac:	003d6d06 	br	4009864 <___vfprintf_internal_r+0x1cc>
 400a2b0:	d9014f17 	ldw	r4,1340(sp)
 400a2b4:	b00b883a 	mov	r5,r22
 400a2b8:	d9800c04 	addi	r6,sp,48
 400a2bc:	d9c15115 	stw	r7,1348(sp)
 400a2c0:	40096400 	call	4009640 <__sprint_r>
 400a2c4:	d9c15117 	ldw	r7,1348(sp)
 400a2c8:	103eab1e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a2cc:	dc800e17 	ldw	r18,56(sp)
 400a2d0:	dc400d17 	ldw	r17,52(sp)
 400a2d4:	dd401904 	addi	r21,sp,100
 400a2d8:	003e3406 	br	4009bac <___vfprintf_internal_r+0x514>
 400a2dc:	d9014f17 	ldw	r4,1340(sp)
 400a2e0:	b00b883a 	mov	r5,r22
 400a2e4:	d9800c04 	addi	r6,sp,48
 400a2e8:	d9c15115 	stw	r7,1348(sp)
 400a2ec:	40096400 	call	4009640 <__sprint_r>
 400a2f0:	d9c15117 	ldw	r7,1348(sp)
 400a2f4:	103ea01e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a2f8:	dc800e17 	ldw	r18,56(sp)
 400a2fc:	dc400d17 	ldw	r17,52(sp)
 400a300:	dd401904 	addi	r21,sp,100
 400a304:	003e1c06 	br	4009b78 <___vfprintf_internal_r+0x4e0>
 400a308:	d9014f17 	ldw	r4,1340(sp)
 400a30c:	b00b883a 	mov	r5,r22
 400a310:	d9800c04 	addi	r6,sp,48
 400a314:	d9c15115 	stw	r7,1348(sp)
 400a318:	40096400 	call	4009640 <__sprint_r>
 400a31c:	d9c15117 	ldw	r7,1348(sp)
 400a320:	103e951e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a324:	dc800e17 	ldw	r18,56(sp)
 400a328:	dc400d17 	ldw	r17,52(sp)
 400a32c:	dd401904 	addi	r21,sp,100
 400a330:	003e0406 	br	4009b44 <___vfprintf_internal_r+0x4ac>
 400a334:	d9000517 	ldw	r4,20(sp)
 400a338:	0102520e 	bge	zero,r4,400ac84 <___vfprintf_internal_r+0x15ec>
 400a33c:	d9814717 	ldw	r6,1308(sp)
 400a340:	21807a16 	blt	r4,r6,400a52c <___vfprintf_internal_r+0xe94>
 400a344:	d8814117 	ldw	r2,1284(sp)
 400a348:	91a5883a 	add	r18,r18,r6
 400a34c:	8c400044 	addi	r17,r17,1
 400a350:	a8800015 	stw	r2,0(r21)
 400a354:	008001c4 	movi	r2,7
 400a358:	a9800115 	stw	r6,4(r21)
 400a35c:	dc800e15 	stw	r18,56(sp)
 400a360:	dc400d15 	stw	r17,52(sp)
 400a364:	1442f616 	blt	r2,r17,400af40 <___vfprintf_internal_r+0x18a8>
 400a368:	a8c00204 	addi	r3,r21,8
 400a36c:	d9414717 	ldw	r5,1308(sp)
 400a370:	2161c83a 	sub	r16,r4,r5
 400a374:	043f9d0e 	bge	zero,r16,400a1ec <___vfprintf_internal_r+0xb54>
 400a378:	00800404 	movi	r2,16
 400a37c:	1402130e 	bge	r2,r16,400abcc <___vfprintf_internal_r+0x1534>
 400a380:	dc400d17 	ldw	r17,52(sp)
 400a384:	1027883a 	mov	r19,r2
 400a388:	070100f4 	movhi	fp,1027
 400a38c:	e737b384 	addi	fp,fp,-8498
 400a390:	050001c4 	movi	r20,7
 400a394:	00000306 	br	400a3a4 <___vfprintf_internal_r+0xd0c>
 400a398:	18c00204 	addi	r3,r3,8
 400a39c:	843ffc04 	addi	r16,r16,-16
 400a3a0:	9c020d0e 	bge	r19,r16,400abd8 <___vfprintf_internal_r+0x1540>
 400a3a4:	94800404 	addi	r18,r18,16
 400a3a8:	8c400044 	addi	r17,r17,1
 400a3ac:	1f000015 	stw	fp,0(r3)
 400a3b0:	1cc00115 	stw	r19,4(r3)
 400a3b4:	dc800e15 	stw	r18,56(sp)
 400a3b8:	dc400d15 	stw	r17,52(sp)
 400a3bc:	a47ff60e 	bge	r20,r17,400a398 <___vfprintf_internal_r+0xd00>
 400a3c0:	d9014f17 	ldw	r4,1340(sp)
 400a3c4:	b00b883a 	mov	r5,r22
 400a3c8:	d9800c04 	addi	r6,sp,48
 400a3cc:	40096400 	call	4009640 <__sprint_r>
 400a3d0:	103e691e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a3d4:	dc800e17 	ldw	r18,56(sp)
 400a3d8:	dc400d17 	ldw	r17,52(sp)
 400a3dc:	d8c01904 	addi	r3,sp,100
 400a3e0:	003fee06 	br	400a39c <___vfprintf_internal_r+0xd04>
 400a3e4:	d8814717 	ldw	r2,1308(sp)
 400a3e8:	143fffc4 	addi	r16,r2,-1
 400a3ec:	043e970e 	bge	zero,r16,4009e4c <___vfprintf_internal_r+0x7b4>
 400a3f0:	00800404 	movi	r2,16
 400a3f4:	1400180e 	bge	r2,r16,400a458 <___vfprintf_internal_r+0xdc0>
 400a3f8:	1029883a 	mov	r20,r2
 400a3fc:	070100f4 	movhi	fp,1027
 400a400:	e737b384 	addi	fp,fp,-8498
 400a404:	054001c4 	movi	r21,7
 400a408:	00000306 	br	400a418 <___vfprintf_internal_r+0xd80>
 400a40c:	9cc00204 	addi	r19,r19,8
 400a410:	843ffc04 	addi	r16,r16,-16
 400a414:	a400120e 	bge	r20,r16,400a460 <___vfprintf_internal_r+0xdc8>
 400a418:	94800404 	addi	r18,r18,16
 400a41c:	8c400044 	addi	r17,r17,1
 400a420:	9f000015 	stw	fp,0(r19)
 400a424:	9d000115 	stw	r20,4(r19)
 400a428:	dc800e15 	stw	r18,56(sp)
 400a42c:	dc400d15 	stw	r17,52(sp)
 400a430:	ac7ff60e 	bge	r21,r17,400a40c <___vfprintf_internal_r+0xd74>
 400a434:	d9014f17 	ldw	r4,1340(sp)
 400a438:	b00b883a 	mov	r5,r22
 400a43c:	d9800c04 	addi	r6,sp,48
 400a440:	40096400 	call	4009640 <__sprint_r>
 400a444:	103e4c1e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a448:	dc800e17 	ldw	r18,56(sp)
 400a44c:	dc400d17 	ldw	r17,52(sp)
 400a450:	dcc01904 	addi	r19,sp,100
 400a454:	003fee06 	br	400a410 <___vfprintf_internal_r+0xd78>
 400a458:	070100f4 	movhi	fp,1027
 400a45c:	e737b384 	addi	fp,fp,-8498
 400a460:	9425883a 	add	r18,r18,r16
 400a464:	8c400044 	addi	r17,r17,1
 400a468:	008001c4 	movi	r2,7
 400a46c:	9f000015 	stw	fp,0(r19)
 400a470:	9c000115 	stw	r16,4(r19)
 400a474:	dc800e15 	stw	r18,56(sp)
 400a478:	dc400d15 	stw	r17,52(sp)
 400a47c:	147e720e 	bge	r2,r17,4009e48 <___vfprintf_internal_r+0x7b0>
 400a480:	d9014f17 	ldw	r4,1340(sp)
 400a484:	b00b883a 	mov	r5,r22
 400a488:	d9800c04 	addi	r6,sp,48
 400a48c:	40096400 	call	4009640 <__sprint_r>
 400a490:	103e391e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a494:	dc800e17 	ldw	r18,56(sp)
 400a498:	dc400d17 	ldw	r17,52(sp)
 400a49c:	dcc01904 	addi	r19,sp,100
 400a4a0:	003e6a06 	br	4009e4c <___vfprintf_internal_r+0x7b4>
 400a4a4:	d9014f17 	ldw	r4,1340(sp)
 400a4a8:	b00b883a 	mov	r5,r22
 400a4ac:	d9800c04 	addi	r6,sp,48
 400a4b0:	d9c15115 	stw	r7,1348(sp)
 400a4b4:	40096400 	call	4009640 <__sprint_r>
 400a4b8:	d9c15117 	ldw	r7,1348(sp)
 400a4bc:	103e2e1e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a4c0:	dc800e17 	ldw	r18,56(sp)
 400a4c4:	dc400d17 	ldw	r17,52(sp)
 400a4c8:	dd401904 	addi	r21,sp,100
 400a4cc:	003dba06 	br	4009bb8 <___vfprintf_internal_r+0x520>
 400a4d0:	d9014f17 	ldw	r4,1340(sp)
 400a4d4:	b00b883a 	mov	r5,r22
 400a4d8:	d9800c04 	addi	r6,sp,48
 400a4dc:	40096400 	call	4009640 <__sprint_r>
 400a4e0:	103e251e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a4e4:	dc800e17 	ldw	r18,56(sp)
 400a4e8:	dc400d17 	ldw	r17,52(sp)
 400a4ec:	dcc01904 	addi	r19,sp,100
 400a4f0:	003e4206 	br	4009dfc <___vfprintf_internal_r+0x764>
 400a4f4:	d9014f17 	ldw	r4,1340(sp)
 400a4f8:	b00b883a 	mov	r5,r22
 400a4fc:	d9800c04 	addi	r6,sp,48
 400a500:	40096400 	call	4009640 <__sprint_r>
 400a504:	103e1c1e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400a508:	dc800e17 	ldw	r18,56(sp)
 400a50c:	dc400d17 	ldw	r17,52(sp)
 400a510:	d8c01904 	addi	r3,sp,100
 400a514:	003e2e06 	br	4009dd0 <___vfprintf_internal_r+0x738>
 400a518:	d9414c17 	ldw	r5,1328(sp)
 400a51c:	2880004c 	andi	r2,r5,1
 400a520:	1005003a 	cmpeq	r2,r2,zero
 400a524:	103dda1e 	bne	r2,zero,4009c90 <___vfprintf_internal_r+0x5f8>
 400a528:	003e9f06 	br	4009fa8 <___vfprintf_internal_r+0x910>
 400a52c:	d8c14117 	ldw	r3,1284(sp)
 400a530:	9125883a 	add	r18,r18,r4
 400a534:	8c400044 	addi	r17,r17,1
 400a538:	008001c4 	movi	r2,7
 400a53c:	a8c00015 	stw	r3,0(r21)
 400a540:	a9000115 	stw	r4,4(r21)
 400a544:	dc800e15 	stw	r18,56(sp)
 400a548:	dc400d15 	stw	r17,52(sp)
 400a54c:	14426616 	blt	r2,r17,400aee8 <___vfprintf_internal_r+0x1850>
 400a550:	a8c00204 	addi	r3,r21,8
 400a554:	d9414917 	ldw	r5,1316(sp)
 400a558:	00800044 	movi	r2,1
 400a55c:	94800044 	addi	r18,r18,1
 400a560:	8c400044 	addi	r17,r17,1
 400a564:	18800115 	stw	r2,4(r3)
 400a568:	008001c4 	movi	r2,7
 400a56c:	19400015 	stw	r5,0(r3)
 400a570:	dc800e15 	stw	r18,56(sp)
 400a574:	dc400d15 	stw	r17,52(sp)
 400a578:	2021883a 	mov	r16,r4
 400a57c:	14425016 	blt	r2,r17,400aec0 <___vfprintf_internal_r+0x1828>
 400a580:	19400204 	addi	r5,r3,8
 400a584:	d9814717 	ldw	r6,1308(sp)
 400a588:	8c400044 	addi	r17,r17,1
 400a58c:	dc400d15 	stw	r17,52(sp)
 400a590:	3107c83a 	sub	r3,r6,r4
 400a594:	d9014117 	ldw	r4,1284(sp)
 400a598:	90e5883a 	add	r18,r18,r3
 400a59c:	28c00115 	stw	r3,4(r5)
 400a5a0:	8105883a 	add	r2,r16,r4
 400a5a4:	28800015 	stw	r2,0(r5)
 400a5a8:	008001c4 	movi	r2,7
 400a5ac:	dc800e15 	stw	r18,56(sp)
 400a5b0:	147f1d16 	blt	r2,r17,400a228 <___vfprintf_internal_r+0xb90>
 400a5b4:	28c00204 	addi	r3,r5,8
 400a5b8:	003db506 	br	4009c90 <___vfprintf_internal_r+0x5f8>
 400a5bc:	3c000017 	ldw	r16,0(r7)
 400a5c0:	3c400117 	ldw	r17,4(r7)
 400a5c4:	39800204 	addi	r6,r7,8
 400a5c8:	01000044 	movi	r4,1
 400a5cc:	d9814015 	stw	r6,1280(sp)
 400a5d0:	d8000405 	stb	zero,16(sp)
 400a5d4:	003ebe06 	br	400a0d0 <___vfprintf_internal_r+0xa38>
 400a5d8:	3c000017 	ldw	r16,0(r7)
 400a5dc:	3c400117 	ldw	r17,4(r7)
 400a5e0:	38800204 	addi	r2,r7,8
 400a5e4:	d8814015 	stw	r2,1280(sp)
 400a5e8:	003eb706 	br	400a0c8 <___vfprintf_internal_r+0xa30>
 400a5ec:	3c000017 	ldw	r16,0(r7)
 400a5f0:	3c400117 	ldw	r17,4(r7)
 400a5f4:	39000204 	addi	r4,r7,8
 400a5f8:	d9014015 	stw	r4,1280(sp)
 400a5fc:	0009883a 	mov	r4,zero
 400a600:	d8000405 	stb	zero,16(sp)
 400a604:	003eb206 	br	400a0d0 <___vfprintf_internal_r+0xa38>
 400a608:	38c00017 	ldw	r3,0(r7)
 400a60c:	39c00104 	addi	r7,r7,4
 400a610:	d8c14a15 	stw	r3,1320(sp)
 400a614:	1800d10e 	bge	r3,zero,400a95c <___vfprintf_internal_r+0x12c4>
 400a618:	00c7c83a 	sub	r3,zero,r3
 400a61c:	d8c14a15 	stw	r3,1320(sp)
 400a620:	d9014c17 	ldw	r4,1328(sp)
 400a624:	b8c00007 	ldb	r3,0(r23)
 400a628:	21000114 	ori	r4,r4,4
 400a62c:	d9014c15 	stw	r4,1328(sp)
 400a630:	003c9806 	br	4009894 <___vfprintf_internal_r+0x1fc>
 400a634:	d9814c17 	ldw	r6,1328(sp)
 400a638:	3080080c 	andi	r2,r6,32
 400a63c:	1001f026 	beq	r2,zero,400ae00 <___vfprintf_internal_r+0x1768>
 400a640:	d9014b17 	ldw	r4,1324(sp)
 400a644:	38800017 	ldw	r2,0(r7)
 400a648:	39c00104 	addi	r7,r7,4
 400a64c:	d9c14015 	stw	r7,1280(sp)
 400a650:	2007d7fa 	srai	r3,r4,31
 400a654:	d9c14017 	ldw	r7,1280(sp)
 400a658:	11000015 	stw	r4,0(r2)
 400a65c:	10c00115 	stw	r3,4(r2)
 400a660:	003c6906 	br	4009808 <___vfprintf_internal_r+0x170>
 400a664:	b8c00007 	ldb	r3,0(r23)
 400a668:	00801b04 	movi	r2,108
 400a66c:	18824f26 	beq	r3,r2,400afac <___vfprintf_internal_r+0x1914>
 400a670:	d9414c17 	ldw	r5,1328(sp)
 400a674:	29400414 	ori	r5,r5,16
 400a678:	d9414c15 	stw	r5,1328(sp)
 400a67c:	003c8506 	br	4009894 <___vfprintf_internal_r+0x1fc>
 400a680:	d9814c17 	ldw	r6,1328(sp)
 400a684:	b8c00007 	ldb	r3,0(r23)
 400a688:	31800814 	ori	r6,r6,32
 400a68c:	d9814c15 	stw	r6,1328(sp)
 400a690:	003c8006 	br	4009894 <___vfprintf_internal_r+0x1fc>
 400a694:	d8814c17 	ldw	r2,1328(sp)
 400a698:	3c000017 	ldw	r16,0(r7)
 400a69c:	00c01e04 	movi	r3,120
 400a6a0:	10800094 	ori	r2,r2,2
 400a6a4:	d8814c15 	stw	r2,1328(sp)
 400a6a8:	39c00104 	addi	r7,r7,4
 400a6ac:	014100f4 	movhi	r5,1027
 400a6b0:	29779c04 	addi	r5,r5,-8592
 400a6b4:	00800c04 	movi	r2,48
 400a6b8:	0023883a 	mov	r17,zero
 400a6bc:	01000084 	movi	r4,2
 400a6c0:	d9c14015 	stw	r7,1280(sp)
 400a6c4:	d8c14d15 	stw	r3,1332(sp)
 400a6c8:	d9414415 	stw	r5,1296(sp)
 400a6cc:	d8800445 	stb	r2,17(sp)
 400a6d0:	d8c00485 	stb	r3,18(sp)
 400a6d4:	d8000405 	stb	zero,16(sp)
 400a6d8:	003e7d06 	br	400a0d0 <___vfprintf_internal_r+0xa38>
 400a6dc:	d8814c17 	ldw	r2,1328(sp)
 400a6e0:	b8c00007 	ldb	r3,0(r23)
 400a6e4:	10801014 	ori	r2,r2,64
 400a6e8:	d8814c15 	stw	r2,1328(sp)
 400a6ec:	003c6906 	br	4009894 <___vfprintf_internal_r+0x1fc>
 400a6f0:	d9414c17 	ldw	r5,1328(sp)
 400a6f4:	2880020c 	andi	r2,r5,8
 400a6f8:	1001df26 	beq	r2,zero,400ae78 <___vfprintf_internal_r+0x17e0>
 400a6fc:	39800017 	ldw	r6,0(r7)
 400a700:	38800204 	addi	r2,r7,8
 400a704:	d8814015 	stw	r2,1280(sp)
 400a708:	d9814215 	stw	r6,1288(sp)
 400a70c:	39c00117 	ldw	r7,4(r7)
 400a710:	d9c14315 	stw	r7,1292(sp)
 400a714:	d9014217 	ldw	r4,1288(sp)
 400a718:	d9414317 	ldw	r5,1292(sp)
 400a71c:	400f8b40 	call	400f8b4 <__isinfd>
 400a720:	10021726 	beq	r2,zero,400af80 <___vfprintf_internal_r+0x18e8>
 400a724:	d9014217 	ldw	r4,1288(sp)
 400a728:	d9414317 	ldw	r5,1292(sp)
 400a72c:	000d883a 	mov	r6,zero
 400a730:	000f883a 	mov	r7,zero
 400a734:	40080500 	call	4008050 <__ltdf2>
 400a738:	1002ca16 	blt	r2,zero,400b264 <___vfprintf_internal_r+0x1bcc>
 400a73c:	d9414d17 	ldw	r5,1332(sp)
 400a740:	008011c4 	movi	r2,71
 400a744:	11420a16 	blt	r2,r5,400af70 <___vfprintf_internal_r+0x18d8>
 400a748:	018100f4 	movhi	r6,1027
 400a74c:	31b7a104 	addi	r6,r6,-8572
 400a750:	d9814115 	stw	r6,1284(sp)
 400a754:	d9014c17 	ldw	r4,1328(sp)
 400a758:	00c000c4 	movi	r3,3
 400a75c:	00bfdfc4 	movi	r2,-129
 400a760:	2088703a 	and	r4,r4,r2
 400a764:	180f883a 	mov	r7,r3
 400a768:	d8c14515 	stw	r3,1300(sp)
 400a76c:	d9014c15 	stw	r4,1328(sp)
 400a770:	d8014615 	stw	zero,1304(sp)
 400a774:	003e6a06 	br	400a120 <___vfprintf_internal_r+0xa88>
 400a778:	38800017 	ldw	r2,0(r7)
 400a77c:	00c00044 	movi	r3,1
 400a780:	39c00104 	addi	r7,r7,4
 400a784:	d9c14015 	stw	r7,1280(sp)
 400a788:	d9000f04 	addi	r4,sp,60
 400a78c:	180f883a 	mov	r7,r3
 400a790:	d8c14515 	stw	r3,1300(sp)
 400a794:	d9014115 	stw	r4,1284(sp)
 400a798:	d8800f05 	stb	r2,60(sp)
 400a79c:	d8000405 	stb	zero,16(sp)
 400a7a0:	003cac06 	br	4009a54 <___vfprintf_internal_r+0x3bc>
 400a7a4:	014100f4 	movhi	r5,1027
 400a7a8:	2977a704 	addi	r5,r5,-8548
 400a7ac:	d9414415 	stw	r5,1296(sp)
 400a7b0:	d9814c17 	ldw	r6,1328(sp)
 400a7b4:	3080080c 	andi	r2,r6,32
 400a7b8:	1000f926 	beq	r2,zero,400aba0 <___vfprintf_internal_r+0x1508>
 400a7bc:	3c000017 	ldw	r16,0(r7)
 400a7c0:	3c400117 	ldw	r17,4(r7)
 400a7c4:	38800204 	addi	r2,r7,8
 400a7c8:	d8814015 	stw	r2,1280(sp)
 400a7cc:	d9414c17 	ldw	r5,1328(sp)
 400a7d0:	2880004c 	andi	r2,r5,1
 400a7d4:	1005003a 	cmpeq	r2,r2,zero
 400a7d8:	1000b31e 	bne	r2,zero,400aaa8 <___vfprintf_internal_r+0x1410>
 400a7dc:	8444b03a 	or	r2,r16,r17
 400a7e0:	1000b126 	beq	r2,zero,400aaa8 <___vfprintf_internal_r+0x1410>
 400a7e4:	d9814d17 	ldw	r6,1332(sp)
 400a7e8:	29400094 	ori	r5,r5,2
 400a7ec:	00800c04 	movi	r2,48
 400a7f0:	01000084 	movi	r4,2
 400a7f4:	d9414c15 	stw	r5,1328(sp)
 400a7f8:	d8800445 	stb	r2,17(sp)
 400a7fc:	d9800485 	stb	r6,18(sp)
 400a800:	d8000405 	stb	zero,16(sp)
 400a804:	003e3206 	br	400a0d0 <___vfprintf_internal_r+0xa38>
 400a808:	018100f4 	movhi	r6,1027
 400a80c:	31b79c04 	addi	r6,r6,-8592
 400a810:	d9814415 	stw	r6,1296(sp)
 400a814:	003fe606 	br	400a7b0 <___vfprintf_internal_r+0x1118>
 400a818:	00800ac4 	movi	r2,43
 400a81c:	d8800405 	stb	r2,16(sp)
 400a820:	b8c00007 	ldb	r3,0(r23)
 400a824:	003c1b06 	br	4009894 <___vfprintf_internal_r+0x1fc>
 400a828:	d8814c17 	ldw	r2,1328(sp)
 400a82c:	b8c00007 	ldb	r3,0(r23)
 400a830:	10800054 	ori	r2,r2,1
 400a834:	d8814c15 	stw	r2,1328(sp)
 400a838:	003c1606 	br	4009894 <___vfprintf_internal_r+0x1fc>
 400a83c:	d8800407 	ldb	r2,16(sp)
 400a840:	1000461e 	bne	r2,zero,400a95c <___vfprintf_internal_r+0x12c4>
 400a844:	00800804 	movi	r2,32
 400a848:	d8800405 	stb	r2,16(sp)
 400a84c:	b8c00007 	ldb	r3,0(r23)
 400a850:	003c1006 	br	4009894 <___vfprintf_internal_r+0x1fc>
 400a854:	d9814c17 	ldw	r6,1328(sp)
 400a858:	b8c00007 	ldb	r3,0(r23)
 400a85c:	31800214 	ori	r6,r6,8
 400a860:	d9814c15 	stw	r6,1328(sp)
 400a864:	003c0b06 	br	4009894 <___vfprintf_internal_r+0x1fc>
 400a868:	0007883a 	mov	r3,zero
 400a86c:	01000244 	movi	r4,9
 400a870:	188002a4 	muli	r2,r3,10
 400a874:	b8c00007 	ldb	r3,0(r23)
 400a878:	d9814d17 	ldw	r6,1332(sp)
 400a87c:	bdc00044 	addi	r23,r23,1
 400a880:	d8c14d15 	stw	r3,1332(sp)
 400a884:	d9414d17 	ldw	r5,1332(sp)
 400a888:	3085883a 	add	r2,r6,r2
 400a88c:	10fff404 	addi	r3,r2,-48
 400a890:	28bff404 	addi	r2,r5,-48
 400a894:	20bff62e 	bgeu	r4,r2,400a870 <___vfprintf_internal_r+0x11d8>
 400a898:	d8c14a15 	stw	r3,1320(sp)
 400a89c:	003bff06 	br	400989c <___vfprintf_internal_r+0x204>
 400a8a0:	d9414c17 	ldw	r5,1328(sp)
 400a8a4:	b8c00007 	ldb	r3,0(r23)
 400a8a8:	29402014 	ori	r5,r5,128
 400a8ac:	d9414c15 	stw	r5,1328(sp)
 400a8b0:	003bf806 	br	4009894 <___vfprintf_internal_r+0x1fc>
 400a8b4:	b8c00007 	ldb	r3,0(r23)
 400a8b8:	00800a84 	movi	r2,42
 400a8bc:	bdc00044 	addi	r23,r23,1
 400a8c0:	18831526 	beq	r3,r2,400b518 <___vfprintf_internal_r+0x1e80>
 400a8c4:	d8c14d15 	stw	r3,1332(sp)
 400a8c8:	18bff404 	addi	r2,r3,-48
 400a8cc:	00c00244 	movi	r3,9
 400a8d0:	18827836 	bltu	r3,r2,400b2b4 <___vfprintf_internal_r+0x1c1c>
 400a8d4:	000d883a 	mov	r6,zero
 400a8d8:	308002a4 	muli	r2,r6,10
 400a8dc:	b9800007 	ldb	r6,0(r23)
 400a8e0:	d9414d17 	ldw	r5,1332(sp)
 400a8e4:	bdc00044 	addi	r23,r23,1
 400a8e8:	d9814d15 	stw	r6,1332(sp)
 400a8ec:	d9014d17 	ldw	r4,1332(sp)
 400a8f0:	1145883a 	add	r2,r2,r5
 400a8f4:	11bff404 	addi	r6,r2,-48
 400a8f8:	20bff404 	addi	r2,r4,-48
 400a8fc:	18bff62e 	bgeu	r3,r2,400a8d8 <___vfprintf_internal_r+0x1240>
 400a900:	3027883a 	mov	r19,r6
 400a904:	303be50e 	bge	r6,zero,400989c <___vfprintf_internal_r+0x204>
 400a908:	04ffffc4 	movi	r19,-1
 400a90c:	003be306 	br	400989c <___vfprintf_internal_r+0x204>
 400a910:	d8000405 	stb	zero,16(sp)
 400a914:	39800017 	ldw	r6,0(r7)
 400a918:	39c00104 	addi	r7,r7,4
 400a91c:	d9c14015 	stw	r7,1280(sp)
 400a920:	d9814115 	stw	r6,1284(sp)
 400a924:	3001c926 	beq	r6,zero,400b04c <___vfprintf_internal_r+0x19b4>
 400a928:	98000e16 	blt	r19,zero,400a964 <___vfprintf_internal_r+0x12cc>
 400a92c:	d9014117 	ldw	r4,1284(sp)
 400a930:	000b883a 	mov	r5,zero
 400a934:	980d883a 	mov	r6,r19
 400a938:	400e1080 	call	400e108 <memchr>
 400a93c:	10025926 	beq	r2,zero,400b2a4 <___vfprintf_internal_r+0x1c0c>
 400a940:	d8c14117 	ldw	r3,1284(sp)
 400a944:	10cfc83a 	sub	r7,r2,r3
 400a948:	99c19e16 	blt	r19,r7,400afc4 <___vfprintf_internal_r+0x192c>
 400a94c:	d9c14515 	stw	r7,1300(sp)
 400a950:	38000916 	blt	r7,zero,400a978 <___vfprintf_internal_r+0x12e0>
 400a954:	d8014615 	stw	zero,1304(sp)
 400a958:	003df106 	br	400a120 <___vfprintf_internal_r+0xa88>
 400a95c:	b8c00007 	ldb	r3,0(r23)
 400a960:	003bcc06 	br	4009894 <___vfprintf_internal_r+0x1fc>
 400a964:	d9014117 	ldw	r4,1284(sp)
 400a968:	40095cc0 	call	40095cc <strlen>
 400a96c:	d8814515 	stw	r2,1300(sp)
 400a970:	100f883a 	mov	r7,r2
 400a974:	103ff70e 	bge	r2,zero,400a954 <___vfprintf_internal_r+0x12bc>
 400a978:	d8014515 	stw	zero,1300(sp)
 400a97c:	d8014615 	stw	zero,1304(sp)
 400a980:	003de706 	br	400a120 <___vfprintf_internal_r+0xa88>
 400a984:	20c03fcc 	andi	r3,r4,255
 400a988:	00800044 	movi	r2,1
 400a98c:	18802d26 	beq	r3,r2,400aa44 <___vfprintf_internal_r+0x13ac>
 400a990:	18800e36 	bltu	r3,r2,400a9cc <___vfprintf_internal_r+0x1334>
 400a994:	00800084 	movi	r2,2
 400a998:	1880fa26 	beq	r3,r2,400ad84 <___vfprintf_internal_r+0x16ec>
 400a99c:	010100f4 	movhi	r4,1027
 400a9a0:	2137ac04 	addi	r4,r4,-8528
 400a9a4:	40095cc0 	call	40095cc <strlen>
 400a9a8:	100f883a 	mov	r7,r2
 400a9ac:	dcc14515 	stw	r19,1300(sp)
 400a9b0:	9880010e 	bge	r19,r2,400a9b8 <___vfprintf_internal_r+0x1320>
 400a9b4:	d8814515 	stw	r2,1300(sp)
 400a9b8:	008100f4 	movhi	r2,1027
 400a9bc:	10b7ac04 	addi	r2,r2,-8528
 400a9c0:	dcc14615 	stw	r19,1304(sp)
 400a9c4:	d8814115 	stw	r2,1284(sp)
 400a9c8:	003dd506 	br	400a120 <___vfprintf_internal_r+0xa88>
 400a9cc:	d9401904 	addi	r5,sp,100
 400a9d0:	dd000f04 	addi	r20,sp,60
 400a9d4:	d9414115 	stw	r5,1284(sp)
 400a9d8:	880a977a 	slli	r5,r17,29
 400a9dc:	d9814117 	ldw	r6,1284(sp)
 400a9e0:	8004d0fa 	srli	r2,r16,3
 400a9e4:	8806d0fa 	srli	r3,r17,3
 400a9e8:	810001cc 	andi	r4,r16,7
 400a9ec:	2884b03a 	or	r2,r5,r2
 400a9f0:	31bfffc4 	addi	r6,r6,-1
 400a9f4:	21000c04 	addi	r4,r4,48
 400a9f8:	d9814115 	stw	r6,1284(sp)
 400a9fc:	10cab03a 	or	r5,r2,r3
 400aa00:	31000005 	stb	r4,0(r6)
 400aa04:	1021883a 	mov	r16,r2
 400aa08:	1823883a 	mov	r17,r3
 400aa0c:	283ff21e 	bne	r5,zero,400a9d8 <___vfprintf_internal_r+0x1340>
 400aa10:	d8c14c17 	ldw	r3,1328(sp)
 400aa14:	1880004c 	andi	r2,r3,1
 400aa18:	1005003a 	cmpeq	r2,r2,zero
 400aa1c:	103db91e 	bne	r2,zero,400a104 <___vfprintf_internal_r+0xa6c>
 400aa20:	20803fcc 	andi	r2,r4,255
 400aa24:	1080201c 	xori	r2,r2,128
 400aa28:	10bfe004 	addi	r2,r2,-128
 400aa2c:	00c00c04 	movi	r3,48
 400aa30:	10fdb426 	beq	r2,r3,400a104 <___vfprintf_internal_r+0xa6c>
 400aa34:	31bfffc4 	addi	r6,r6,-1
 400aa38:	d9814115 	stw	r6,1284(sp)
 400aa3c:	30c00005 	stb	r3,0(r6)
 400aa40:	003db006 	br	400a104 <___vfprintf_internal_r+0xa6c>
 400aa44:	88800068 	cmpgeui	r2,r17,1
 400aa48:	10002c1e 	bne	r2,zero,400aafc <___vfprintf_internal_r+0x1464>
 400aa4c:	8800021e 	bne	r17,zero,400aa58 <___vfprintf_internal_r+0x13c0>
 400aa50:	00800244 	movi	r2,9
 400aa54:	14002936 	bltu	r2,r16,400aafc <___vfprintf_internal_r+0x1464>
 400aa58:	d90018c4 	addi	r4,sp,99
 400aa5c:	dd000f04 	addi	r20,sp,60
 400aa60:	d9014115 	stw	r4,1284(sp)
 400aa64:	d9014117 	ldw	r4,1284(sp)
 400aa68:	80800c04 	addi	r2,r16,48
 400aa6c:	20800005 	stb	r2,0(r4)
 400aa70:	003da406 	br	400a104 <___vfprintf_internal_r+0xa6c>
 400aa74:	dc400d17 	ldw	r17,52(sp)
 400aa78:	070100f4 	movhi	fp,1027
 400aa7c:	e737b384 	addi	fp,fp,-8498
 400aa80:	9425883a 	add	r18,r18,r16
 400aa84:	8c400044 	addi	r17,r17,1
 400aa88:	008001c4 	movi	r2,7
 400aa8c:	1f000015 	stw	fp,0(r3)
 400aa90:	1c000115 	stw	r16,4(r3)
 400aa94:	dc800e15 	stw	r18,56(sp)
 400aa98:	dc400d15 	stw	r17,52(sp)
 400aa9c:	147de216 	blt	r2,r17,400a228 <___vfprintf_internal_r+0xb90>
 400aaa0:	18c00204 	addi	r3,r3,8
 400aaa4:	003c7a06 	br	4009c90 <___vfprintf_internal_r+0x5f8>
 400aaa8:	01000084 	movi	r4,2
 400aaac:	d8000405 	stb	zero,16(sp)
 400aab0:	003d8706 	br	400a0d0 <___vfprintf_internal_r+0xa38>
 400aab4:	d9814c17 	ldw	r6,1328(sp)
 400aab8:	30c4703a 	and	r2,r6,r3
 400aabc:	1005003a 	cmpeq	r2,r2,zero
 400aac0:	103cb926 	beq	r2,zero,4009da8 <___vfprintf_internal_r+0x710>
 400aac4:	d9014117 	ldw	r4,1284(sp)
 400aac8:	94800044 	addi	r18,r18,1
 400aacc:	8c400044 	addi	r17,r17,1
 400aad0:	008001c4 	movi	r2,7
 400aad4:	a9000015 	stw	r4,0(r21)
 400aad8:	a8c00115 	stw	r3,4(r21)
 400aadc:	dc800e15 	stw	r18,56(sp)
 400aae0:	dc400d15 	stw	r17,52(sp)
 400aae4:	147e6616 	blt	r2,r17,400a480 <___vfprintf_internal_r+0xde8>
 400aae8:	acc00204 	addi	r19,r21,8
 400aaec:	003cd706 	br	4009e4c <___vfprintf_internal_r+0x7b4>
 400aaf0:	070100f4 	movhi	fp,1027
 400aaf4:	e737b384 	addi	fp,fp,-8498
 400aaf8:	003c4f06 	br	4009c38 <___vfprintf_internal_r+0x5a0>
 400aafc:	dd000f04 	addi	r20,sp,60
 400ab00:	dc801904 	addi	r18,sp,100
 400ab04:	8009883a 	mov	r4,r16
 400ab08:	880b883a 	mov	r5,r17
 400ab0c:	01800284 	movi	r6,10
 400ab10:	000f883a 	mov	r7,zero
 400ab14:	401056c0 	call	401056c <__umoddi3>
 400ab18:	12000c04 	addi	r8,r2,48
 400ab1c:	94bfffc4 	addi	r18,r18,-1
 400ab20:	8009883a 	mov	r4,r16
 400ab24:	880b883a 	mov	r5,r17
 400ab28:	01800284 	movi	r6,10
 400ab2c:	000f883a 	mov	r7,zero
 400ab30:	92000005 	stb	r8,0(r18)
 400ab34:	400ff900 	call	400ff90 <__udivdi3>
 400ab38:	1009883a 	mov	r4,r2
 400ab3c:	1021883a 	mov	r16,r2
 400ab40:	18800068 	cmpgeui	r2,r3,1
 400ab44:	1823883a 	mov	r17,r3
 400ab48:	103fee1e 	bne	r2,zero,400ab04 <___vfprintf_internal_r+0x146c>
 400ab4c:	1800021e 	bne	r3,zero,400ab58 <___vfprintf_internal_r+0x14c0>
 400ab50:	00800244 	movi	r2,9
 400ab54:	113feb36 	bltu	r2,r4,400ab04 <___vfprintf_internal_r+0x146c>
 400ab58:	94bfffc4 	addi	r18,r18,-1
 400ab5c:	dc814115 	stw	r18,1284(sp)
 400ab60:	003fc006 	br	400aa64 <___vfprintf_internal_r+0x13cc>
 400ab64:	d9014c17 	ldw	r4,1328(sp)
 400ab68:	2080004c 	andi	r2,r4,1
 400ab6c:	10009a1e 	bne	r2,zero,400add8 <___vfprintf_internal_r+0x1740>
 400ab70:	d9401904 	addi	r5,sp,100
 400ab74:	dd000f04 	addi	r20,sp,60
 400ab78:	d9414115 	stw	r5,1284(sp)
 400ab7c:	003d6106 	br	400a104 <___vfprintf_internal_r+0xa6c>
 400ab80:	d9014f17 	ldw	r4,1340(sp)
 400ab84:	b00b883a 	mov	r5,r22
 400ab88:	d9800c04 	addi	r6,sp,48
 400ab8c:	40096400 	call	4009640 <__sprint_r>
 400ab90:	103c791e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400ab94:	dc800e17 	ldw	r18,56(sp)
 400ab98:	d8c01904 	addi	r3,sp,100
 400ab9c:	003cff06 	br	4009f9c <___vfprintf_internal_r+0x904>
 400aba0:	d8c14c17 	ldw	r3,1328(sp)
 400aba4:	1880040c 	andi	r2,r3,16
 400aba8:	1000711e 	bne	r2,zero,400ad70 <___vfprintf_internal_r+0x16d8>
 400abac:	d9014c17 	ldw	r4,1328(sp)
 400abb0:	2080100c 	andi	r2,r4,64
 400abb4:	10006e26 	beq	r2,zero,400ad70 <___vfprintf_internal_r+0x16d8>
 400abb8:	3c00000b 	ldhu	r16,0(r7)
 400abbc:	0023883a 	mov	r17,zero
 400abc0:	39c00104 	addi	r7,r7,4
 400abc4:	d9c14015 	stw	r7,1280(sp)
 400abc8:	003f0006 	br	400a7cc <___vfprintf_internal_r+0x1134>
 400abcc:	dc400d17 	ldw	r17,52(sp)
 400abd0:	070100f4 	movhi	fp,1027
 400abd4:	e737b384 	addi	fp,fp,-8498
 400abd8:	9425883a 	add	r18,r18,r16
 400abdc:	8c400044 	addi	r17,r17,1
 400abe0:	008001c4 	movi	r2,7
 400abe4:	1f000015 	stw	fp,0(r3)
 400abe8:	1c000115 	stw	r16,4(r3)
 400abec:	dc800e15 	stw	r18,56(sp)
 400abf0:	dc400d15 	stw	r17,52(sp)
 400abf4:	147d7616 	blt	r2,r17,400a1d0 <___vfprintf_internal_r+0xb38>
 400abf8:	18c00204 	addi	r3,r3,8
 400abfc:	003d7b06 	br	400a1ec <___vfprintf_internal_r+0xb54>
 400ac00:	dc800e17 	ldw	r18,56(sp)
 400ac04:	dc400d17 	ldw	r17,52(sp)
 400ac08:	070100f4 	movhi	fp,1027
 400ac0c:	e737b784 	addi	fp,fp,-8482
 400ac10:	003bc006 	br	4009b14 <___vfprintf_internal_r+0x47c>
 400ac14:	d9014f17 	ldw	r4,1340(sp)
 400ac18:	b00b883a 	mov	r5,r22
 400ac1c:	d9800c04 	addi	r6,sp,48
 400ac20:	40096400 	call	4009640 <__sprint_r>
 400ac24:	103c541e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400ac28:	dc800e17 	ldw	r18,56(sp)
 400ac2c:	d8c01904 	addi	r3,sp,100
 400ac30:	003ce906 	br	4009fd8 <___vfprintf_internal_r+0x940>
 400ac34:	3c000017 	ldw	r16,0(r7)
 400ac38:	0009883a 	mov	r4,zero
 400ac3c:	39c00104 	addi	r7,r7,4
 400ac40:	0023883a 	mov	r17,zero
 400ac44:	d9c14015 	stw	r7,1280(sp)
 400ac48:	d8000405 	stb	zero,16(sp)
 400ac4c:	003d2006 	br	400a0d0 <___vfprintf_internal_r+0xa38>
 400ac50:	38800017 	ldw	r2,0(r7)
 400ac54:	39c00104 	addi	r7,r7,4
 400ac58:	d9c14015 	stw	r7,1280(sp)
 400ac5c:	1023d7fa 	srai	r17,r2,31
 400ac60:	1021883a 	mov	r16,r2
 400ac64:	003d1806 	br	400a0c8 <___vfprintf_internal_r+0xa30>
 400ac68:	3c000017 	ldw	r16,0(r7)
 400ac6c:	01000044 	movi	r4,1
 400ac70:	39c00104 	addi	r7,r7,4
 400ac74:	0023883a 	mov	r17,zero
 400ac78:	d9c14015 	stw	r7,1280(sp)
 400ac7c:	d8000405 	stb	zero,16(sp)
 400ac80:	003d1306 	br	400a0d0 <___vfprintf_internal_r+0xa38>
 400ac84:	008100f4 	movhi	r2,1027
 400ac88:	10b7b304 	addi	r2,r2,-8500
 400ac8c:	94800044 	addi	r18,r18,1
 400ac90:	8c400044 	addi	r17,r17,1
 400ac94:	a8800015 	stw	r2,0(r21)
 400ac98:	00c00044 	movi	r3,1
 400ac9c:	008001c4 	movi	r2,7
 400aca0:	a8c00115 	stw	r3,4(r21)
 400aca4:	dc800e15 	stw	r18,56(sp)
 400aca8:	dc400d15 	stw	r17,52(sp)
 400acac:	1440ca16 	blt	r2,r17,400afd8 <___vfprintf_internal_r+0x1940>
 400acb0:	a8c00204 	addi	r3,r21,8
 400acb4:	2000061e 	bne	r4,zero,400acd0 <___vfprintf_internal_r+0x1638>
 400acb8:	d9414717 	ldw	r5,1308(sp)
 400acbc:	2800041e 	bne	r5,zero,400acd0 <___vfprintf_internal_r+0x1638>
 400acc0:	d9814c17 	ldw	r6,1328(sp)
 400acc4:	3080004c 	andi	r2,r6,1
 400acc8:	1005003a 	cmpeq	r2,r2,zero
 400accc:	103bf01e 	bne	r2,zero,4009c90 <___vfprintf_internal_r+0x5f8>
 400acd0:	00800044 	movi	r2,1
 400acd4:	dc400d17 	ldw	r17,52(sp)
 400acd8:	18800115 	stw	r2,4(r3)
 400acdc:	d8814917 	ldw	r2,1316(sp)
 400ace0:	94800044 	addi	r18,r18,1
 400ace4:	8c400044 	addi	r17,r17,1
 400ace8:	18800015 	stw	r2,0(r3)
 400acec:	008001c4 	movi	r2,7
 400acf0:	dc800e15 	stw	r18,56(sp)
 400acf4:	dc400d15 	stw	r17,52(sp)
 400acf8:	1440ca16 	blt	r2,r17,400b024 <___vfprintf_internal_r+0x198c>
 400acfc:	18c00204 	addi	r3,r3,8
 400ad00:	0121c83a 	sub	r16,zero,r4
 400ad04:	0400500e 	bge	zero,r16,400ae48 <___vfprintf_internal_r+0x17b0>
 400ad08:	00800404 	movi	r2,16
 400ad0c:	1400800e 	bge	r2,r16,400af10 <___vfprintf_internal_r+0x1878>
 400ad10:	1027883a 	mov	r19,r2
 400ad14:	070100f4 	movhi	fp,1027
 400ad18:	e737b384 	addi	fp,fp,-8498
 400ad1c:	050001c4 	movi	r20,7
 400ad20:	00000306 	br	400ad30 <___vfprintf_internal_r+0x1698>
 400ad24:	18c00204 	addi	r3,r3,8
 400ad28:	843ffc04 	addi	r16,r16,-16
 400ad2c:	9c007a0e 	bge	r19,r16,400af18 <___vfprintf_internal_r+0x1880>
 400ad30:	94800404 	addi	r18,r18,16
 400ad34:	8c400044 	addi	r17,r17,1
 400ad38:	1f000015 	stw	fp,0(r3)
 400ad3c:	1cc00115 	stw	r19,4(r3)
 400ad40:	dc800e15 	stw	r18,56(sp)
 400ad44:	dc400d15 	stw	r17,52(sp)
 400ad48:	a47ff60e 	bge	r20,r17,400ad24 <___vfprintf_internal_r+0x168c>
 400ad4c:	d9014f17 	ldw	r4,1340(sp)
 400ad50:	b00b883a 	mov	r5,r22
 400ad54:	d9800c04 	addi	r6,sp,48
 400ad58:	40096400 	call	4009640 <__sprint_r>
 400ad5c:	103c061e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400ad60:	dc800e17 	ldw	r18,56(sp)
 400ad64:	dc400d17 	ldw	r17,52(sp)
 400ad68:	d8c01904 	addi	r3,sp,100
 400ad6c:	003fee06 	br	400ad28 <___vfprintf_internal_r+0x1690>
 400ad70:	3c000017 	ldw	r16,0(r7)
 400ad74:	0023883a 	mov	r17,zero
 400ad78:	39c00104 	addi	r7,r7,4
 400ad7c:	d9c14015 	stw	r7,1280(sp)
 400ad80:	003e9206 	br	400a7cc <___vfprintf_internal_r+0x1134>
 400ad84:	d9401904 	addi	r5,sp,100
 400ad88:	dd000f04 	addi	r20,sp,60
 400ad8c:	d9414115 	stw	r5,1284(sp)
 400ad90:	d9814417 	ldw	r6,1296(sp)
 400ad94:	880a973a 	slli	r5,r17,28
 400ad98:	8004d13a 	srli	r2,r16,4
 400ad9c:	810003cc 	andi	r4,r16,15
 400ada0:	3109883a 	add	r4,r6,r4
 400ada4:	2884b03a 	or	r2,r5,r2
 400ada8:	21400003 	ldbu	r5,0(r4)
 400adac:	d9014117 	ldw	r4,1284(sp)
 400adb0:	8806d13a 	srli	r3,r17,4
 400adb4:	1021883a 	mov	r16,r2
 400adb8:	213fffc4 	addi	r4,r4,-1
 400adbc:	d9014115 	stw	r4,1284(sp)
 400adc0:	d9814117 	ldw	r6,1284(sp)
 400adc4:	10c8b03a 	or	r4,r2,r3
 400adc8:	1823883a 	mov	r17,r3
 400adcc:	31400005 	stb	r5,0(r6)
 400add0:	203fef1e 	bne	r4,zero,400ad90 <___vfprintf_internal_r+0x16f8>
 400add4:	003ccb06 	br	400a104 <___vfprintf_internal_r+0xa6c>
 400add8:	00800c04 	movi	r2,48
 400addc:	d98018c4 	addi	r6,sp,99
 400ade0:	dd000f04 	addi	r20,sp,60
 400ade4:	d88018c5 	stb	r2,99(sp)
 400ade8:	d9814115 	stw	r6,1284(sp)
 400adec:	003cc506 	br	400a104 <___vfprintf_internal_r+0xa6c>
 400adf0:	dc400d17 	ldw	r17,52(sp)
 400adf4:	070100f4 	movhi	fp,1027
 400adf8:	e737b784 	addi	fp,fp,-8482
 400adfc:	003bc706 	br	4009d1c <___vfprintf_internal_r+0x684>
 400ae00:	d9414c17 	ldw	r5,1328(sp)
 400ae04:	2880040c 	andi	r2,r5,16
 400ae08:	10007c26 	beq	r2,zero,400affc <___vfprintf_internal_r+0x1964>
 400ae0c:	38800017 	ldw	r2,0(r7)
 400ae10:	39c00104 	addi	r7,r7,4
 400ae14:	d9c14015 	stw	r7,1280(sp)
 400ae18:	d9814b17 	ldw	r6,1324(sp)
 400ae1c:	d9c14017 	ldw	r7,1280(sp)
 400ae20:	11800015 	stw	r6,0(r2)
 400ae24:	003a7806 	br	4009808 <___vfprintf_internal_r+0x170>
 400ae28:	d9014f17 	ldw	r4,1340(sp)
 400ae2c:	b00b883a 	mov	r5,r22
 400ae30:	d9800c04 	addi	r6,sp,48
 400ae34:	40096400 	call	4009640 <__sprint_r>
 400ae38:	103bcf1e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400ae3c:	dc800e17 	ldw	r18,56(sp)
 400ae40:	dc400d17 	ldw	r17,52(sp)
 400ae44:	d8c01904 	addi	r3,sp,100
 400ae48:	d9014717 	ldw	r4,1308(sp)
 400ae4c:	d9414117 	ldw	r5,1284(sp)
 400ae50:	8c400044 	addi	r17,r17,1
 400ae54:	9125883a 	add	r18,r18,r4
 400ae58:	008001c4 	movi	r2,7
 400ae5c:	19400015 	stw	r5,0(r3)
 400ae60:	19000115 	stw	r4,4(r3)
 400ae64:	dc800e15 	stw	r18,56(sp)
 400ae68:	dc400d15 	stw	r17,52(sp)
 400ae6c:	147cee16 	blt	r2,r17,400a228 <___vfprintf_internal_r+0xb90>
 400ae70:	18c00204 	addi	r3,r3,8
 400ae74:	003b8606 	br	4009c90 <___vfprintf_internal_r+0x5f8>
 400ae78:	38c00017 	ldw	r3,0(r7)
 400ae7c:	39000204 	addi	r4,r7,8
 400ae80:	d9014015 	stw	r4,1280(sp)
 400ae84:	d8c14215 	stw	r3,1288(sp)
 400ae88:	39c00117 	ldw	r7,4(r7)
 400ae8c:	d9c14315 	stw	r7,1292(sp)
 400ae90:	003e2006 	br	400a714 <___vfprintf_internal_r+0x107c>
 400ae94:	0005883a 	mov	r2,zero
 400ae98:	1409c83a 	sub	r4,r2,r16
 400ae9c:	1105803a 	cmpltu	r2,r2,r4
 400aea0:	044bc83a 	sub	r5,zero,r17
 400aea4:	2885c83a 	sub	r2,r5,r2
 400aea8:	2021883a 	mov	r16,r4
 400aeac:	1023883a 	mov	r17,r2
 400aeb0:	01000044 	movi	r4,1
 400aeb4:	00800b44 	movi	r2,45
 400aeb8:	d8800405 	stb	r2,16(sp)
 400aebc:	003c8406 	br	400a0d0 <___vfprintf_internal_r+0xa38>
 400aec0:	d9014f17 	ldw	r4,1340(sp)
 400aec4:	b00b883a 	mov	r5,r22
 400aec8:	d9800c04 	addi	r6,sp,48
 400aecc:	40096400 	call	4009640 <__sprint_r>
 400aed0:	103ba91e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400aed4:	dc800e17 	ldw	r18,56(sp)
 400aed8:	dc400d17 	ldw	r17,52(sp)
 400aedc:	d9000517 	ldw	r4,20(sp)
 400aee0:	d9401904 	addi	r5,sp,100
 400aee4:	003da706 	br	400a584 <___vfprintf_internal_r+0xeec>
 400aee8:	d9014f17 	ldw	r4,1340(sp)
 400aeec:	b00b883a 	mov	r5,r22
 400aef0:	d9800c04 	addi	r6,sp,48
 400aef4:	40096400 	call	4009640 <__sprint_r>
 400aef8:	103b9f1e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400aefc:	dc800e17 	ldw	r18,56(sp)
 400af00:	dc400d17 	ldw	r17,52(sp)
 400af04:	d9000517 	ldw	r4,20(sp)
 400af08:	d8c01904 	addi	r3,sp,100
 400af0c:	003d9106 	br	400a554 <___vfprintf_internal_r+0xebc>
 400af10:	070100f4 	movhi	fp,1027
 400af14:	e737b384 	addi	fp,fp,-8498
 400af18:	9425883a 	add	r18,r18,r16
 400af1c:	8c400044 	addi	r17,r17,1
 400af20:	008001c4 	movi	r2,7
 400af24:	1f000015 	stw	fp,0(r3)
 400af28:	1c000115 	stw	r16,4(r3)
 400af2c:	dc800e15 	stw	r18,56(sp)
 400af30:	dc400d15 	stw	r17,52(sp)
 400af34:	147fbc16 	blt	r2,r17,400ae28 <___vfprintf_internal_r+0x1790>
 400af38:	18c00204 	addi	r3,r3,8
 400af3c:	003fc206 	br	400ae48 <___vfprintf_internal_r+0x17b0>
 400af40:	d9014f17 	ldw	r4,1340(sp)
 400af44:	b00b883a 	mov	r5,r22
 400af48:	d9800c04 	addi	r6,sp,48
 400af4c:	40096400 	call	4009640 <__sprint_r>
 400af50:	103b891e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400af54:	dc800e17 	ldw	r18,56(sp)
 400af58:	d9000517 	ldw	r4,20(sp)
 400af5c:	d8c01904 	addi	r3,sp,100
 400af60:	003d0206 	br	400a36c <___vfprintf_internal_r+0xcd4>
 400af64:	070100f4 	movhi	fp,1027
 400af68:	e737b384 	addi	fp,fp,-8498
 400af6c:	003be406 	br	4009f00 <___vfprintf_internal_r+0x868>
 400af70:	008100f4 	movhi	r2,1027
 400af74:	10b7a204 	addi	r2,r2,-8568
 400af78:	d8814115 	stw	r2,1284(sp)
 400af7c:	003df506 	br	400a754 <___vfprintf_internal_r+0x10bc>
 400af80:	d9014217 	ldw	r4,1288(sp)
 400af84:	d9414317 	ldw	r5,1292(sp)
 400af88:	40074f80 	call	40074f8 <__isnand>
 400af8c:	10003926 	beq	r2,zero,400b074 <___vfprintf_internal_r+0x19dc>
 400af90:	d9414d17 	ldw	r5,1332(sp)
 400af94:	008011c4 	movi	r2,71
 400af98:	1140ce16 	blt	r2,r5,400b2d4 <___vfprintf_internal_r+0x1c3c>
 400af9c:	018100f4 	movhi	r6,1027
 400afa0:	31b7a304 	addi	r6,r6,-8564
 400afa4:	d9814115 	stw	r6,1284(sp)
 400afa8:	003dea06 	br	400a754 <___vfprintf_internal_r+0x10bc>
 400afac:	d9014c17 	ldw	r4,1328(sp)
 400afb0:	bdc00044 	addi	r23,r23,1
 400afb4:	b8c00007 	ldb	r3,0(r23)
 400afb8:	21000814 	ori	r4,r4,32
 400afbc:	d9014c15 	stw	r4,1328(sp)
 400afc0:	003a3406 	br	4009894 <___vfprintf_internal_r+0x1fc>
 400afc4:	dcc14515 	stw	r19,1300(sp)
 400afc8:	98011016 	blt	r19,zero,400b40c <___vfprintf_internal_r+0x1d74>
 400afcc:	980f883a 	mov	r7,r19
 400afd0:	d8014615 	stw	zero,1304(sp)
 400afd4:	003c5206 	br	400a120 <___vfprintf_internal_r+0xa88>
 400afd8:	d9014f17 	ldw	r4,1340(sp)
 400afdc:	b00b883a 	mov	r5,r22
 400afe0:	d9800c04 	addi	r6,sp,48
 400afe4:	40096400 	call	4009640 <__sprint_r>
 400afe8:	103b631e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400afec:	dc800e17 	ldw	r18,56(sp)
 400aff0:	d9000517 	ldw	r4,20(sp)
 400aff4:	d8c01904 	addi	r3,sp,100
 400aff8:	003f2e06 	br	400acb4 <___vfprintf_internal_r+0x161c>
 400affc:	d8c14c17 	ldw	r3,1328(sp)
 400b000:	1880100c 	andi	r2,r3,64
 400b004:	1000a026 	beq	r2,zero,400b288 <___vfprintf_internal_r+0x1bf0>
 400b008:	38800017 	ldw	r2,0(r7)
 400b00c:	39c00104 	addi	r7,r7,4
 400b010:	d9c14015 	stw	r7,1280(sp)
 400b014:	d9014b17 	ldw	r4,1324(sp)
 400b018:	d9c14017 	ldw	r7,1280(sp)
 400b01c:	1100000d 	sth	r4,0(r2)
 400b020:	0039f906 	br	4009808 <___vfprintf_internal_r+0x170>
 400b024:	d9014f17 	ldw	r4,1340(sp)
 400b028:	b00b883a 	mov	r5,r22
 400b02c:	d9800c04 	addi	r6,sp,48
 400b030:	40096400 	call	4009640 <__sprint_r>
 400b034:	103b501e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400b038:	dc800e17 	ldw	r18,56(sp)
 400b03c:	dc400d17 	ldw	r17,52(sp)
 400b040:	d9000517 	ldw	r4,20(sp)
 400b044:	d8c01904 	addi	r3,sp,100
 400b048:	003f2d06 	br	400ad00 <___vfprintf_internal_r+0x1668>
 400b04c:	00800184 	movi	r2,6
 400b050:	14c09a36 	bltu	r2,r19,400b2bc <___vfprintf_internal_r+0x1c24>
 400b054:	dcc14515 	stw	r19,1300(sp)
 400b058:	9800010e 	bge	r19,zero,400b060 <___vfprintf_internal_r+0x19c8>
 400b05c:	d8014515 	stw	zero,1300(sp)
 400b060:	008100f4 	movhi	r2,1027
 400b064:	10b7a504 	addi	r2,r2,-8556
 400b068:	980f883a 	mov	r7,r19
 400b06c:	d8814115 	stw	r2,1284(sp)
 400b070:	003a7806 	br	4009a54 <___vfprintf_internal_r+0x3bc>
 400b074:	00bfffc4 	movi	r2,-1
 400b078:	9880e226 	beq	r19,r2,400b404 <___vfprintf_internal_r+0x1d6c>
 400b07c:	d9414d17 	ldw	r5,1332(sp)
 400b080:	008019c4 	movi	r2,103
 400b084:	2880dc26 	beq	r5,r2,400b3f8 <___vfprintf_internal_r+0x1d60>
 400b088:	008011c4 	movi	r2,71
 400b08c:	2880da26 	beq	r5,r2,400b3f8 <___vfprintf_internal_r+0x1d60>
 400b090:	d9414c17 	ldw	r5,1328(sp)
 400b094:	d9014317 	ldw	r4,1292(sp)
 400b098:	d9814217 	ldw	r6,1288(sp)
 400b09c:	29404014 	ori	r5,r5,256
 400b0a0:	d9414c15 	stw	r5,1328(sp)
 400b0a4:	2000cc16 	blt	r4,zero,400b3d8 <___vfprintf_internal_r+0x1d40>
 400b0a8:	3021883a 	mov	r16,r6
 400b0ac:	2023883a 	mov	r17,r4
 400b0b0:	0039883a 	mov	fp,zero
 400b0b4:	d9414d17 	ldw	r5,1332(sp)
 400b0b8:	00801984 	movi	r2,102
 400b0bc:	2880b726 	beq	r5,r2,400b39c <___vfprintf_internal_r+0x1d04>
 400b0c0:	00801184 	movi	r2,70
 400b0c4:	2880b526 	beq	r5,r2,400b39c <___vfprintf_internal_r+0x1d04>
 400b0c8:	00801944 	movi	r2,101
 400b0cc:	2880c826 	beq	r5,r2,400b3f0 <___vfprintf_internal_r+0x1d58>
 400b0d0:	00801144 	movi	r2,69
 400b0d4:	2880c626 	beq	r5,r2,400b3f0 <___vfprintf_internal_r+0x1d58>
 400b0d8:	9829883a 	mov	r20,r19
 400b0dc:	d9014f17 	ldw	r4,1340(sp)
 400b0e0:	d8800504 	addi	r2,sp,20
 400b0e4:	880d883a 	mov	r6,r17
 400b0e8:	d8800115 	stw	r2,4(sp)
 400b0ec:	d8c00604 	addi	r3,sp,24
 400b0f0:	d8800704 	addi	r2,sp,28
 400b0f4:	800b883a 	mov	r5,r16
 400b0f8:	01c00084 	movi	r7,2
 400b0fc:	d8c00215 	stw	r3,8(sp)
 400b100:	d8800315 	stw	r2,12(sp)
 400b104:	dd000015 	stw	r20,0(sp)
 400b108:	400b9b00 	call	400b9b0 <_dtoa_r>
 400b10c:	d9814d17 	ldw	r6,1332(sp)
 400b110:	d8814115 	stw	r2,1284(sp)
 400b114:	008019c4 	movi	r2,103
 400b118:	30809526 	beq	r6,r2,400b370 <___vfprintf_internal_r+0x1cd8>
 400b11c:	d8c14d17 	ldw	r3,1332(sp)
 400b120:	008011c4 	movi	r2,71
 400b124:	18809226 	beq	r3,r2,400b370 <___vfprintf_internal_r+0x1cd8>
 400b128:	d9414117 	ldw	r5,1284(sp)
 400b12c:	d9814d17 	ldw	r6,1332(sp)
 400b130:	00801984 	movi	r2,102
 400b134:	2d25883a 	add	r18,r5,r20
 400b138:	30808626 	beq	r6,r2,400b354 <___vfprintf_internal_r+0x1cbc>
 400b13c:	00801184 	movi	r2,70
 400b140:	30808426 	beq	r6,r2,400b354 <___vfprintf_internal_r+0x1cbc>
 400b144:	000d883a 	mov	r6,zero
 400b148:	000f883a 	mov	r7,zero
 400b14c:	880b883a 	mov	r5,r17
 400b150:	8009883a 	mov	r4,r16
 400b154:	4010b1c0 	call	4010b1c <__eqdf2>
 400b158:	1000751e 	bne	r2,zero,400b330 <___vfprintf_internal_r+0x1c98>
 400b15c:	9005883a 	mov	r2,r18
 400b160:	dc800715 	stw	r18,28(sp)
 400b164:	d9014117 	ldw	r4,1284(sp)
 400b168:	d9414d17 	ldw	r5,1332(sp)
 400b16c:	00c019c4 	movi	r3,103
 400b170:	1125c83a 	sub	r18,r2,r4
 400b174:	28c06826 	beq	r5,r3,400b318 <___vfprintf_internal_r+0x1c80>
 400b178:	008011c4 	movi	r2,71
 400b17c:	28806626 	beq	r5,r2,400b318 <___vfprintf_internal_r+0x1c80>
 400b180:	d9000517 	ldw	r4,20(sp)
 400b184:	d8c14d17 	ldw	r3,1332(sp)
 400b188:	00801944 	movi	r2,101
 400b18c:	10c05516 	blt	r2,r3,400b2e4 <___vfprintf_internal_r+0x1c4c>
 400b190:	213fffc4 	addi	r4,r4,-1
 400b194:	d9000515 	stw	r4,20(sp)
 400b198:	d8c00805 	stb	r3,32(sp)
 400b19c:	2021883a 	mov	r16,r4
 400b1a0:	2000c116 	blt	r4,zero,400b4a8 <___vfprintf_internal_r+0x1e10>
 400b1a4:	00800ac4 	movi	r2,43
 400b1a8:	d8800845 	stb	r2,33(sp)
 400b1ac:	00800244 	movi	r2,9
 400b1b0:	1400af0e 	bge	r2,r16,400b470 <___vfprintf_internal_r+0x1dd8>
 400b1b4:	1027883a 	mov	r19,r2
 400b1b8:	dc400b84 	addi	r17,sp,46
 400b1bc:	8009883a 	mov	r4,r16
 400b1c0:	01400284 	movi	r5,10
 400b1c4:	40083840 	call	4008384 <__modsi3>
 400b1c8:	10800c04 	addi	r2,r2,48
 400b1cc:	8c7fffc4 	addi	r17,r17,-1
 400b1d0:	8009883a 	mov	r4,r16
 400b1d4:	01400284 	movi	r5,10
 400b1d8:	88800005 	stb	r2,0(r17)
 400b1dc:	40083240 	call	4008324 <__divsi3>
 400b1e0:	1021883a 	mov	r16,r2
 400b1e4:	98bff516 	blt	r19,r2,400b1bc <___vfprintf_internal_r+0x1b24>
 400b1e8:	10c00c04 	addi	r3,r2,48
 400b1ec:	d88009c4 	addi	r2,sp,39
 400b1f0:	108001c4 	addi	r2,r2,7
 400b1f4:	897fffc4 	addi	r5,r17,-1
 400b1f8:	88ffffc5 	stb	r3,-1(r17)
 400b1fc:	2880a72e 	bgeu	r5,r2,400b49c <___vfprintf_internal_r+0x1e04>
 400b200:	1009883a 	mov	r4,r2
 400b204:	d9800804 	addi	r6,sp,32
 400b208:	d8c00884 	addi	r3,sp,34
 400b20c:	28800003 	ldbu	r2,0(r5)
 400b210:	29400044 	addi	r5,r5,1
 400b214:	18800005 	stb	r2,0(r3)
 400b218:	18c00044 	addi	r3,r3,1
 400b21c:	293ffb36 	bltu	r5,r4,400b20c <___vfprintf_internal_r+0x1b74>
 400b220:	1987c83a 	sub	r3,r3,r6
 400b224:	00800044 	movi	r2,1
 400b228:	d8c14815 	stw	r3,1312(sp)
 400b22c:	90cf883a 	add	r7,r18,r3
 400b230:	1480960e 	bge	r2,r18,400b48c <___vfprintf_internal_r+0x1df4>
 400b234:	39c00044 	addi	r7,r7,1
 400b238:	d9c14515 	stw	r7,1300(sp)
 400b23c:	38003416 	blt	r7,zero,400b310 <___vfprintf_internal_r+0x1c78>
 400b240:	e0803fcc 	andi	r2,fp,255
 400b244:	1080201c 	xori	r2,r2,128
 400b248:	10bfe004 	addi	r2,r2,-128
 400b24c:	10004e26 	beq	r2,zero,400b388 <___vfprintf_internal_r+0x1cf0>
 400b250:	00800b44 	movi	r2,45
 400b254:	dc814715 	stw	r18,1308(sp)
 400b258:	d8014615 	stw	zero,1304(sp)
 400b25c:	d8800405 	stb	r2,16(sp)
 400b260:	003bb106 	br	400a128 <___vfprintf_internal_r+0xa90>
 400b264:	00800b44 	movi	r2,45
 400b268:	d8800405 	stb	r2,16(sp)
 400b26c:	003d3306 	br	400a73c <___vfprintf_internal_r+0x10a4>
 400b270:	d9014f17 	ldw	r4,1340(sp)
 400b274:	b00b883a 	mov	r5,r22
 400b278:	d9800c04 	addi	r6,sp,48
 400b27c:	40096400 	call	4009640 <__sprint_r>
 400b280:	103abd1e 	bne	r2,zero,4009d78 <___vfprintf_internal_r+0x6e0>
 400b284:	003abb06 	br	4009d74 <___vfprintf_internal_r+0x6dc>
 400b288:	38800017 	ldw	r2,0(r7)
 400b28c:	39c00104 	addi	r7,r7,4
 400b290:	d9c14015 	stw	r7,1280(sp)
 400b294:	d9414b17 	ldw	r5,1324(sp)
 400b298:	d9c14017 	ldw	r7,1280(sp)
 400b29c:	11400015 	stw	r5,0(r2)
 400b2a0:	00395906 	br	4009808 <___vfprintf_internal_r+0x170>
 400b2a4:	980f883a 	mov	r7,r19
 400b2a8:	dcc14515 	stw	r19,1300(sp)
 400b2ac:	d8014615 	stw	zero,1304(sp)
 400b2b0:	003b9b06 	br	400a120 <___vfprintf_internal_r+0xa88>
 400b2b4:	0027883a 	mov	r19,zero
 400b2b8:	00397806 	br	400989c <___vfprintf_internal_r+0x204>
 400b2bc:	00c100f4 	movhi	r3,1027
 400b2c0:	18f7a504 	addi	r3,r3,-8556
 400b2c4:	100f883a 	mov	r7,r2
 400b2c8:	d8814515 	stw	r2,1300(sp)
 400b2cc:	d8c14115 	stw	r3,1284(sp)
 400b2d0:	0039e006 	br	4009a54 <___vfprintf_internal_r+0x3bc>
 400b2d4:	008100f4 	movhi	r2,1027
 400b2d8:	10b7a404 	addi	r2,r2,-8560
 400b2dc:	d8814115 	stw	r2,1284(sp)
 400b2e0:	003d1c06 	br	400a754 <___vfprintf_internal_r+0x10bc>
 400b2e4:	d9414d17 	ldw	r5,1332(sp)
 400b2e8:	00801984 	movi	r2,102
 400b2ec:	28804926 	beq	r5,r2,400b414 <___vfprintf_internal_r+0x1d7c>
 400b2f0:	200f883a 	mov	r7,r4
 400b2f4:	24805716 	blt	r4,r18,400b454 <___vfprintf_internal_r+0x1dbc>
 400b2f8:	d9414c17 	ldw	r5,1328(sp)
 400b2fc:	2880004c 	andi	r2,r5,1
 400b300:	10000126 	beq	r2,zero,400b308 <___vfprintf_internal_r+0x1c70>
 400b304:	21c00044 	addi	r7,r4,1
 400b308:	d9c14515 	stw	r7,1300(sp)
 400b30c:	383fcc0e 	bge	r7,zero,400b240 <___vfprintf_internal_r+0x1ba8>
 400b310:	d8014515 	stw	zero,1300(sp)
 400b314:	003fca06 	br	400b240 <___vfprintf_internal_r+0x1ba8>
 400b318:	d9000517 	ldw	r4,20(sp)
 400b31c:	00bfff04 	movi	r2,-4
 400b320:	1100480e 	bge	r2,r4,400b444 <___vfprintf_internal_r+0x1dac>
 400b324:	99004716 	blt	r19,r4,400b444 <___vfprintf_internal_r+0x1dac>
 400b328:	d8c14d15 	stw	r3,1332(sp)
 400b32c:	003ff006 	br	400b2f0 <___vfprintf_internal_r+0x1c58>
 400b330:	d8800717 	ldw	r2,28(sp)
 400b334:	14bf8b2e 	bgeu	r2,r18,400b164 <___vfprintf_internal_r+0x1acc>
 400b338:	9007883a 	mov	r3,r18
 400b33c:	01000c04 	movi	r4,48
 400b340:	11000005 	stb	r4,0(r2)
 400b344:	10800044 	addi	r2,r2,1
 400b348:	d8800715 	stw	r2,28(sp)
 400b34c:	18bffc1e 	bne	r3,r2,400b340 <___vfprintf_internal_r+0x1ca8>
 400b350:	003f8406 	br	400b164 <___vfprintf_internal_r+0x1acc>
 400b354:	d8814117 	ldw	r2,1284(sp)
 400b358:	10c00007 	ldb	r3,0(r2)
 400b35c:	00800c04 	movi	r2,48
 400b360:	18805b26 	beq	r3,r2,400b4d0 <___vfprintf_internal_r+0x1e38>
 400b364:	d9000517 	ldw	r4,20(sp)
 400b368:	9125883a 	add	r18,r18,r4
 400b36c:	003f7506 	br	400b144 <___vfprintf_internal_r+0x1aac>
 400b370:	d9014c17 	ldw	r4,1328(sp)
 400b374:	2080004c 	andi	r2,r4,1
 400b378:	1005003a 	cmpeq	r2,r2,zero
 400b37c:	103f6a26 	beq	r2,zero,400b128 <___vfprintf_internal_r+0x1a90>
 400b380:	d8800717 	ldw	r2,28(sp)
 400b384:	003f7706 	br	400b164 <___vfprintf_internal_r+0x1acc>
 400b388:	d9c14515 	stw	r7,1300(sp)
 400b38c:	38004d16 	blt	r7,zero,400b4c4 <___vfprintf_internal_r+0x1e2c>
 400b390:	dc814715 	stw	r18,1308(sp)
 400b394:	d8014615 	stw	zero,1304(sp)
 400b398:	003b6106 	br	400a120 <___vfprintf_internal_r+0xa88>
 400b39c:	d9014f17 	ldw	r4,1340(sp)
 400b3a0:	d8800504 	addi	r2,sp,20
 400b3a4:	d8800115 	stw	r2,4(sp)
 400b3a8:	d8c00604 	addi	r3,sp,24
 400b3ac:	d8800704 	addi	r2,sp,28
 400b3b0:	800b883a 	mov	r5,r16
 400b3b4:	880d883a 	mov	r6,r17
 400b3b8:	01c000c4 	movi	r7,3
 400b3bc:	d8c00215 	stw	r3,8(sp)
 400b3c0:	d8800315 	stw	r2,12(sp)
 400b3c4:	dcc00015 	stw	r19,0(sp)
 400b3c8:	9829883a 	mov	r20,r19
 400b3cc:	400b9b00 	call	400b9b0 <_dtoa_r>
 400b3d0:	d8814115 	stw	r2,1284(sp)
 400b3d4:	003f5106 	br	400b11c <___vfprintf_internal_r+0x1a84>
 400b3d8:	d8c14217 	ldw	r3,1288(sp)
 400b3dc:	d9014317 	ldw	r4,1292(sp)
 400b3e0:	07000b44 	movi	fp,45
 400b3e4:	1821883a 	mov	r16,r3
 400b3e8:	2460003c 	xorhi	r17,r4,32768
 400b3ec:	003f3106 	br	400b0b4 <___vfprintf_internal_r+0x1a1c>
 400b3f0:	9d000044 	addi	r20,r19,1
 400b3f4:	003f3906 	br	400b0dc <___vfprintf_internal_r+0x1a44>
 400b3f8:	983f251e 	bne	r19,zero,400b090 <___vfprintf_internal_r+0x19f8>
 400b3fc:	04c00044 	movi	r19,1
 400b400:	003f2306 	br	400b090 <___vfprintf_internal_r+0x19f8>
 400b404:	04c00184 	movi	r19,6
 400b408:	003f2106 	br	400b090 <___vfprintf_internal_r+0x19f8>
 400b40c:	d8014515 	stw	zero,1300(sp)
 400b410:	003eee06 	br	400afcc <___vfprintf_internal_r+0x1934>
 400b414:	200f883a 	mov	r7,r4
 400b418:	0100370e 	bge	zero,r4,400b4f8 <___vfprintf_internal_r+0x1e60>
 400b41c:	9800031e 	bne	r19,zero,400b42c <___vfprintf_internal_r+0x1d94>
 400b420:	d9814c17 	ldw	r6,1328(sp)
 400b424:	3080004c 	andi	r2,r6,1
 400b428:	103fb726 	beq	r2,zero,400b308 <___vfprintf_internal_r+0x1c70>
 400b42c:	20800044 	addi	r2,r4,1
 400b430:	98a7883a 	add	r19,r19,r2
 400b434:	dcc14515 	stw	r19,1300(sp)
 400b438:	980f883a 	mov	r7,r19
 400b43c:	983f800e 	bge	r19,zero,400b240 <___vfprintf_internal_r+0x1ba8>
 400b440:	003fb306 	br	400b310 <___vfprintf_internal_r+0x1c78>
 400b444:	d9814d17 	ldw	r6,1332(sp)
 400b448:	31bfff84 	addi	r6,r6,-2
 400b44c:	d9814d15 	stw	r6,1332(sp)
 400b450:	003f4c06 	br	400b184 <___vfprintf_internal_r+0x1aec>
 400b454:	0100180e 	bge	zero,r4,400b4b8 <___vfprintf_internal_r+0x1e20>
 400b458:	00800044 	movi	r2,1
 400b45c:	1485883a 	add	r2,r2,r18
 400b460:	d8814515 	stw	r2,1300(sp)
 400b464:	100f883a 	mov	r7,r2
 400b468:	103f750e 	bge	r2,zero,400b240 <___vfprintf_internal_r+0x1ba8>
 400b46c:	003fa806 	br	400b310 <___vfprintf_internal_r+0x1c78>
 400b470:	80c00c04 	addi	r3,r16,48
 400b474:	00800c04 	movi	r2,48
 400b478:	d8c008c5 	stb	r3,35(sp)
 400b47c:	d9800804 	addi	r6,sp,32
 400b480:	d8c00904 	addi	r3,sp,36
 400b484:	d8800885 	stb	r2,34(sp)
 400b488:	003f6506 	br	400b220 <___vfprintf_internal_r+0x1b88>
 400b48c:	d9014c17 	ldw	r4,1328(sp)
 400b490:	2084703a 	and	r2,r4,r2
 400b494:	103f9c26 	beq	r2,zero,400b308 <___vfprintf_internal_r+0x1c70>
 400b498:	003f6606 	br	400b234 <___vfprintf_internal_r+0x1b9c>
 400b49c:	d9800804 	addi	r6,sp,32
 400b4a0:	d8c00884 	addi	r3,sp,34
 400b4a4:	003f5e06 	br	400b220 <___vfprintf_internal_r+0x1b88>
 400b4a8:	00800b44 	movi	r2,45
 400b4ac:	0121c83a 	sub	r16,zero,r4
 400b4b0:	d8800845 	stb	r2,33(sp)
 400b4b4:	003f3d06 	br	400b1ac <___vfprintf_internal_r+0x1b14>
 400b4b8:	00800084 	movi	r2,2
 400b4bc:	1105c83a 	sub	r2,r2,r4
 400b4c0:	003fe606 	br	400b45c <___vfprintf_internal_r+0x1dc4>
 400b4c4:	d8014515 	stw	zero,1300(sp)
 400b4c8:	dc814715 	stw	r18,1308(sp)
 400b4cc:	003fb106 	br	400b394 <___vfprintf_internal_r+0x1cfc>
 400b4d0:	000d883a 	mov	r6,zero
 400b4d4:	000f883a 	mov	r7,zero
 400b4d8:	8009883a 	mov	r4,r16
 400b4dc:	880b883a 	mov	r5,r17
 400b4e0:	4010ba40 	call	4010ba4 <__nedf2>
 400b4e4:	103f9f26 	beq	r2,zero,400b364 <___vfprintf_internal_r+0x1ccc>
 400b4e8:	00800044 	movi	r2,1
 400b4ec:	1509c83a 	sub	r4,r2,r20
 400b4f0:	d9000515 	stw	r4,20(sp)
 400b4f4:	003f9b06 	br	400b364 <___vfprintf_internal_r+0x1ccc>
 400b4f8:	98000d1e 	bne	r19,zero,400b530 <___vfprintf_internal_r+0x1e98>
 400b4fc:	d8c14c17 	ldw	r3,1328(sp)
 400b500:	1880004c 	andi	r2,r3,1
 400b504:	10000a1e 	bne	r2,zero,400b530 <___vfprintf_internal_r+0x1e98>
 400b508:	01000044 	movi	r4,1
 400b50c:	200f883a 	mov	r7,r4
 400b510:	d9014515 	stw	r4,1300(sp)
 400b514:	003f4a06 	br	400b240 <___vfprintf_internal_r+0x1ba8>
 400b518:	3cc00017 	ldw	r19,0(r7)
 400b51c:	39c00104 	addi	r7,r7,4
 400b520:	983d0e0e 	bge	r19,zero,400a95c <___vfprintf_internal_r+0x12c4>
 400b524:	b8c00007 	ldb	r3,0(r23)
 400b528:	04ffffc4 	movi	r19,-1
 400b52c:	0038d906 	br	4009894 <___vfprintf_internal_r+0x1fc>
 400b530:	9cc00084 	addi	r19,r19,2
 400b534:	dcc14515 	stw	r19,1300(sp)
 400b538:	980f883a 	mov	r7,r19
 400b53c:	983f400e 	bge	r19,zero,400b240 <___vfprintf_internal_r+0x1ba8>
 400b540:	003f7306 	br	400b310 <___vfprintf_internal_r+0x1c78>

0400b544 <__vfprintf_internal>:
 400b544:	008100f4 	movhi	r2,1027
 400b548:	10859904 	addi	r2,r2,5732
 400b54c:	2013883a 	mov	r9,r4
 400b550:	11000017 	ldw	r4,0(r2)
 400b554:	2805883a 	mov	r2,r5
 400b558:	300f883a 	mov	r7,r6
 400b55c:	480b883a 	mov	r5,r9
 400b560:	100d883a 	mov	r6,r2
 400b564:	40096981 	jmpi	4009698 <___vfprintf_internal_r>

0400b568 <_vsnprintf_r>:
 400b568:	deffe604 	addi	sp,sp,-104
 400b56c:	dc401815 	stw	r17,96(sp)
 400b570:	dc001715 	stw	r16,92(sp)
 400b574:	dfc01915 	stw	ra,100(sp)
 400b578:	3021883a 	mov	r16,r6
 400b57c:	00ffffc4 	movi	r3,-1
 400b580:	2023883a 	mov	r17,r4
 400b584:	2811883a 	mov	r8,r5
 400b588:	30002116 	blt	r6,zero,400b610 <_vsnprintf_r+0xa8>
 400b58c:	0007883a 	mov	r3,zero
 400b590:	30000126 	beq	r6,zero,400b598 <_vsnprintf_r+0x30>
 400b594:	30ffffc4 	addi	r3,r6,-1
 400b598:	008100f4 	movhi	r2,1027
 400b59c:	10859904 	addi	r2,r2,5732
 400b5a0:	380d883a 	mov	r6,r7
 400b5a4:	11000017 	ldw	r4,0(r2)
 400b5a8:	d9c01a17 	ldw	r7,104(sp)
 400b5ac:	00808204 	movi	r2,520
 400b5b0:	d880030d 	sth	r2,12(sp)
 400b5b4:	d80b883a 	mov	r5,sp
 400b5b8:	00bfffc4 	movi	r2,-1
 400b5bc:	d8c00515 	stw	r3,20(sp)
 400b5c0:	d8c00215 	stw	r3,8(sp)
 400b5c4:	da000415 	stw	r8,16(sp)
 400b5c8:	d880038d 	sth	r2,14(sp)
 400b5cc:	da000015 	stw	r8,0(sp)
 400b5d0:	40096980 	call	4009698 <___vfprintf_internal_r>
 400b5d4:	1007883a 	mov	r3,r2
 400b5d8:	00bfffc4 	movi	r2,-1
 400b5dc:	18800916 	blt	r3,r2,400b604 <_vsnprintf_r+0x9c>
 400b5e0:	80000226 	beq	r16,zero,400b5ec <_vsnprintf_r+0x84>
 400b5e4:	d8800017 	ldw	r2,0(sp)
 400b5e8:	10000005 	stb	zero,0(r2)
 400b5ec:	1805883a 	mov	r2,r3
 400b5f0:	dfc01917 	ldw	ra,100(sp)
 400b5f4:	dc401817 	ldw	r17,96(sp)
 400b5f8:	dc001717 	ldw	r16,92(sp)
 400b5fc:	dec01a04 	addi	sp,sp,104
 400b600:	f800283a 	ret
 400b604:	008022c4 	movi	r2,139
 400b608:	88800015 	stw	r2,0(r17)
 400b60c:	003ff406 	br	400b5e0 <_vsnprintf_r+0x78>
 400b610:	008022c4 	movi	r2,139
 400b614:	20800015 	stw	r2,0(r4)
 400b618:	003ff406 	br	400b5ec <_vsnprintf_r+0x84>

0400b61c <vsnprintf>:
 400b61c:	008100f4 	movhi	r2,1027
 400b620:	10859904 	addi	r2,r2,5732
 400b624:	2017883a 	mov	r11,r4
 400b628:	11000017 	ldw	r4,0(r2)
 400b62c:	defffe04 	addi	sp,sp,-8
 400b630:	3013883a 	mov	r9,r6
 400b634:	2805883a 	mov	r2,r5
 400b638:	d9c00015 	stw	r7,0(sp)
 400b63c:	580b883a 	mov	r5,r11
 400b640:	100d883a 	mov	r6,r2
 400b644:	480f883a 	mov	r7,r9
 400b648:	dfc00115 	stw	ra,4(sp)
 400b64c:	400b5680 	call	400b568 <_vsnprintf_r>
 400b650:	dfc00117 	ldw	ra,4(sp)
 400b654:	dec00204 	addi	sp,sp,8
 400b658:	f800283a 	ret

0400b65c <__swsetup_r>:
 400b65c:	008100f4 	movhi	r2,1027
 400b660:	10859904 	addi	r2,r2,5732
 400b664:	10c00017 	ldw	r3,0(r2)
 400b668:	defffd04 	addi	sp,sp,-12
 400b66c:	dc400115 	stw	r17,4(sp)
 400b670:	dc000015 	stw	r16,0(sp)
 400b674:	dfc00215 	stw	ra,8(sp)
 400b678:	2023883a 	mov	r17,r4
 400b67c:	2821883a 	mov	r16,r5
 400b680:	18000226 	beq	r3,zero,400b68c <__swsetup_r+0x30>
 400b684:	18800e17 	ldw	r2,56(r3)
 400b688:	10001f26 	beq	r2,zero,400b708 <__swsetup_r+0xac>
 400b68c:	8100030b 	ldhu	r4,12(r16)
 400b690:	2080020c 	andi	r2,r4,8
 400b694:	10002826 	beq	r2,zero,400b738 <__swsetup_r+0xdc>
 400b698:	81400417 	ldw	r5,16(r16)
 400b69c:	28001d26 	beq	r5,zero,400b714 <__swsetup_r+0xb8>
 400b6a0:	2080004c 	andi	r2,r4,1
 400b6a4:	1005003a 	cmpeq	r2,r2,zero
 400b6a8:	10000b26 	beq	r2,zero,400b6d8 <__swsetup_r+0x7c>
 400b6ac:	2080008c 	andi	r2,r4,2
 400b6b0:	10001226 	beq	r2,zero,400b6fc <__swsetup_r+0xa0>
 400b6b4:	0005883a 	mov	r2,zero
 400b6b8:	80800215 	stw	r2,8(r16)
 400b6bc:	28000b26 	beq	r5,zero,400b6ec <__swsetup_r+0x90>
 400b6c0:	0005883a 	mov	r2,zero
 400b6c4:	dfc00217 	ldw	ra,8(sp)
 400b6c8:	dc400117 	ldw	r17,4(sp)
 400b6cc:	dc000017 	ldw	r16,0(sp)
 400b6d0:	dec00304 	addi	sp,sp,12
 400b6d4:	f800283a 	ret
 400b6d8:	80800517 	ldw	r2,20(r16)
 400b6dc:	80000215 	stw	zero,8(r16)
 400b6e0:	0085c83a 	sub	r2,zero,r2
 400b6e4:	80800615 	stw	r2,24(r16)
 400b6e8:	283ff51e 	bne	r5,zero,400b6c0 <__swsetup_r+0x64>
 400b6ec:	2080200c 	andi	r2,r4,128
 400b6f0:	103ff326 	beq	r2,zero,400b6c0 <__swsetup_r+0x64>
 400b6f4:	00bfffc4 	movi	r2,-1
 400b6f8:	003ff206 	br	400b6c4 <__swsetup_r+0x68>
 400b6fc:	80800517 	ldw	r2,20(r16)
 400b700:	80800215 	stw	r2,8(r16)
 400b704:	003fed06 	br	400b6bc <__swsetup_r+0x60>
 400b708:	1809883a 	mov	r4,r3
 400b70c:	400d1fc0 	call	400d1fc <__sinit>
 400b710:	003fde06 	br	400b68c <__swsetup_r+0x30>
 400b714:	20c0a00c 	andi	r3,r4,640
 400b718:	00808004 	movi	r2,512
 400b71c:	18bfe026 	beq	r3,r2,400b6a0 <__swsetup_r+0x44>
 400b720:	8809883a 	mov	r4,r17
 400b724:	800b883a 	mov	r5,r16
 400b728:	400df740 	call	400df74 <__smakebuf_r>
 400b72c:	8100030b 	ldhu	r4,12(r16)
 400b730:	81400417 	ldw	r5,16(r16)
 400b734:	003fda06 	br	400b6a0 <__swsetup_r+0x44>
 400b738:	2080040c 	andi	r2,r4,16
 400b73c:	103fed26 	beq	r2,zero,400b6f4 <__swsetup_r+0x98>
 400b740:	2080010c 	andi	r2,r4,4
 400b744:	10001226 	beq	r2,zero,400b790 <__swsetup_r+0x134>
 400b748:	81400c17 	ldw	r5,48(r16)
 400b74c:	28000526 	beq	r5,zero,400b764 <__swsetup_r+0x108>
 400b750:	80801004 	addi	r2,r16,64
 400b754:	28800226 	beq	r5,r2,400b760 <__swsetup_r+0x104>
 400b758:	8809883a 	mov	r4,r17
 400b75c:	400d5800 	call	400d580 <_free_r>
 400b760:	80000c15 	stw	zero,48(r16)
 400b764:	8080030b 	ldhu	r2,12(r16)
 400b768:	81400417 	ldw	r5,16(r16)
 400b76c:	80000115 	stw	zero,4(r16)
 400b770:	10bff6cc 	andi	r2,r2,65499
 400b774:	8080030d 	sth	r2,12(r16)
 400b778:	81400015 	stw	r5,0(r16)
 400b77c:	8080030b 	ldhu	r2,12(r16)
 400b780:	10800214 	ori	r2,r2,8
 400b784:	113fffcc 	andi	r4,r2,65535
 400b788:	8080030d 	sth	r2,12(r16)
 400b78c:	003fc306 	br	400b69c <__swsetup_r+0x40>
 400b790:	81400417 	ldw	r5,16(r16)
 400b794:	003ff906 	br	400b77c <__swsetup_r+0x120>

0400b798 <quorem>:
 400b798:	28c00417 	ldw	r3,16(r5)
 400b79c:	20800417 	ldw	r2,16(r4)
 400b7a0:	defff604 	addi	sp,sp,-40
 400b7a4:	ddc00715 	stw	r23,28(sp)
 400b7a8:	dd400515 	stw	r21,20(sp)
 400b7ac:	dfc00915 	stw	ra,36(sp)
 400b7b0:	df000815 	stw	fp,32(sp)
 400b7b4:	dd800615 	stw	r22,24(sp)
 400b7b8:	dd000415 	stw	r20,16(sp)
 400b7bc:	dcc00315 	stw	r19,12(sp)
 400b7c0:	dc800215 	stw	r18,8(sp)
 400b7c4:	dc400115 	stw	r17,4(sp)
 400b7c8:	dc000015 	stw	r16,0(sp)
 400b7cc:	202f883a 	mov	r23,r4
 400b7d0:	282b883a 	mov	r21,r5
 400b7d4:	10c07416 	blt	r2,r3,400b9a8 <quorem+0x210>
 400b7d8:	1c7fffc4 	addi	r17,r3,-1
 400b7dc:	8c45883a 	add	r2,r17,r17
 400b7e0:	1085883a 	add	r2,r2,r2
 400b7e4:	2c000504 	addi	r16,r5,20
 400b7e8:	24c00504 	addi	r19,r4,20
 400b7ec:	14ed883a 	add	r22,r2,r19
 400b7f0:	80a5883a 	add	r18,r16,r2
 400b7f4:	b7000017 	ldw	fp,0(r22)
 400b7f8:	91400017 	ldw	r5,0(r18)
 400b7fc:	e009883a 	mov	r4,fp
 400b800:	29400044 	addi	r5,r5,1
 400b804:	40083e40 	call	40083e4 <__udivsi3>
 400b808:	1029883a 	mov	r20,r2
 400b80c:	10003c1e 	bne	r2,zero,400b900 <quorem+0x168>
 400b810:	a80b883a 	mov	r5,r21
 400b814:	b809883a 	mov	r4,r23
 400b818:	400e4280 	call	400e428 <__mcmp>
 400b81c:	10002b16 	blt	r2,zero,400b8cc <quorem+0x134>
 400b820:	a5000044 	addi	r20,r20,1
 400b824:	980f883a 	mov	r7,r19
 400b828:	0011883a 	mov	r8,zero
 400b82c:	0009883a 	mov	r4,zero
 400b830:	81400017 	ldw	r5,0(r16)
 400b834:	38c00017 	ldw	r3,0(r7)
 400b838:	84000104 	addi	r16,r16,4
 400b83c:	28bfffcc 	andi	r2,r5,65535
 400b840:	2085883a 	add	r2,r4,r2
 400b844:	11bfffcc 	andi	r6,r2,65535
 400b848:	193fffcc 	andi	r4,r3,65535
 400b84c:	1004d43a 	srli	r2,r2,16
 400b850:	280ad43a 	srli	r5,r5,16
 400b854:	2189c83a 	sub	r4,r4,r6
 400b858:	2209883a 	add	r4,r4,r8
 400b85c:	1806d43a 	srli	r3,r3,16
 400b860:	288b883a 	add	r5,r5,r2
 400b864:	200dd43a 	srai	r6,r4,16
 400b868:	28bfffcc 	andi	r2,r5,65535
 400b86c:	1887c83a 	sub	r3,r3,r2
 400b870:	1987883a 	add	r3,r3,r6
 400b874:	3900000d 	sth	r4,0(r7)
 400b878:	38c0008d 	sth	r3,2(r7)
 400b87c:	2808d43a 	srli	r4,r5,16
 400b880:	39c00104 	addi	r7,r7,4
 400b884:	1811d43a 	srai	r8,r3,16
 400b888:	943fe92e 	bgeu	r18,r16,400b830 <quorem+0x98>
 400b88c:	8c45883a 	add	r2,r17,r17
 400b890:	1085883a 	add	r2,r2,r2
 400b894:	9885883a 	add	r2,r19,r2
 400b898:	10c00017 	ldw	r3,0(r2)
 400b89c:	18000b1e 	bne	r3,zero,400b8cc <quorem+0x134>
 400b8a0:	113fff04 	addi	r4,r2,-4
 400b8a4:	9900082e 	bgeu	r19,r4,400b8c8 <quorem+0x130>
 400b8a8:	10bfff17 	ldw	r2,-4(r2)
 400b8ac:	10000326 	beq	r2,zero,400b8bc <quorem+0x124>
 400b8b0:	00000506 	br	400b8c8 <quorem+0x130>
 400b8b4:	20800017 	ldw	r2,0(r4)
 400b8b8:	1000031e 	bne	r2,zero,400b8c8 <quorem+0x130>
 400b8bc:	213fff04 	addi	r4,r4,-4
 400b8c0:	8c7fffc4 	addi	r17,r17,-1
 400b8c4:	993ffb36 	bltu	r19,r4,400b8b4 <quorem+0x11c>
 400b8c8:	bc400415 	stw	r17,16(r23)
 400b8cc:	a005883a 	mov	r2,r20
 400b8d0:	dfc00917 	ldw	ra,36(sp)
 400b8d4:	df000817 	ldw	fp,32(sp)
 400b8d8:	ddc00717 	ldw	r23,28(sp)
 400b8dc:	dd800617 	ldw	r22,24(sp)
 400b8e0:	dd400517 	ldw	r21,20(sp)
 400b8e4:	dd000417 	ldw	r20,16(sp)
 400b8e8:	dcc00317 	ldw	r19,12(sp)
 400b8ec:	dc800217 	ldw	r18,8(sp)
 400b8f0:	dc400117 	ldw	r17,4(sp)
 400b8f4:	dc000017 	ldw	r16,0(sp)
 400b8f8:	dec00a04 	addi	sp,sp,40
 400b8fc:	f800283a 	ret
 400b900:	980f883a 	mov	r7,r19
 400b904:	8011883a 	mov	r8,r16
 400b908:	0013883a 	mov	r9,zero
 400b90c:	000d883a 	mov	r6,zero
 400b910:	40c00017 	ldw	r3,0(r8)
 400b914:	39000017 	ldw	r4,0(r7)
 400b918:	42000104 	addi	r8,r8,4
 400b91c:	18bfffcc 	andi	r2,r3,65535
 400b920:	a085383a 	mul	r2,r20,r2
 400b924:	1806d43a 	srli	r3,r3,16
 400b928:	217fffcc 	andi	r5,r4,65535
 400b92c:	3085883a 	add	r2,r6,r2
 400b930:	11bfffcc 	andi	r6,r2,65535
 400b934:	a0c7383a 	mul	r3,r20,r3
 400b938:	1004d43a 	srli	r2,r2,16
 400b93c:	298bc83a 	sub	r5,r5,r6
 400b940:	2a4b883a 	add	r5,r5,r9
 400b944:	2008d43a 	srli	r4,r4,16
 400b948:	1887883a 	add	r3,r3,r2
 400b94c:	280dd43a 	srai	r6,r5,16
 400b950:	18bfffcc 	andi	r2,r3,65535
 400b954:	2089c83a 	sub	r4,r4,r2
 400b958:	2189883a 	add	r4,r4,r6
 400b95c:	3900008d 	sth	r4,2(r7)
 400b960:	3940000d 	sth	r5,0(r7)
 400b964:	180cd43a 	srli	r6,r3,16
 400b968:	39c00104 	addi	r7,r7,4
 400b96c:	2013d43a 	srai	r9,r4,16
 400b970:	923fe72e 	bgeu	r18,r8,400b910 <quorem+0x178>
 400b974:	e03fa61e 	bne	fp,zero,400b810 <quorem+0x78>
 400b978:	b0ffff04 	addi	r3,r22,-4
 400b97c:	98c0082e 	bgeu	r19,r3,400b9a0 <quorem+0x208>
 400b980:	b0bfff17 	ldw	r2,-4(r22)
 400b984:	10000326 	beq	r2,zero,400b994 <quorem+0x1fc>
 400b988:	00000506 	br	400b9a0 <quorem+0x208>
 400b98c:	18800017 	ldw	r2,0(r3)
 400b990:	1000031e 	bne	r2,zero,400b9a0 <quorem+0x208>
 400b994:	18ffff04 	addi	r3,r3,-4
 400b998:	8c7fffc4 	addi	r17,r17,-1
 400b99c:	98fffb36 	bltu	r19,r3,400b98c <quorem+0x1f4>
 400b9a0:	bc400415 	stw	r17,16(r23)
 400b9a4:	003f9a06 	br	400b810 <quorem+0x78>
 400b9a8:	0005883a 	mov	r2,zero
 400b9ac:	003fc806 	br	400b8d0 <quorem+0x138>

0400b9b0 <_dtoa_r>:
 400b9b0:	22001017 	ldw	r8,64(r4)
 400b9b4:	deffda04 	addi	sp,sp,-152
 400b9b8:	dd402115 	stw	r21,132(sp)
 400b9bc:	dd002015 	stw	r20,128(sp)
 400b9c0:	dc801e15 	stw	r18,120(sp)
 400b9c4:	dc401d15 	stw	r17,116(sp)
 400b9c8:	dfc02515 	stw	ra,148(sp)
 400b9cc:	df002415 	stw	fp,144(sp)
 400b9d0:	ddc02315 	stw	r23,140(sp)
 400b9d4:	dd802215 	stw	r22,136(sp)
 400b9d8:	dcc01f15 	stw	r19,124(sp)
 400b9dc:	dc001c15 	stw	r16,112(sp)
 400b9e0:	d9001615 	stw	r4,88(sp)
 400b9e4:	3023883a 	mov	r17,r6
 400b9e8:	2829883a 	mov	r20,r5
 400b9ec:	d9c01715 	stw	r7,92(sp)
 400b9f0:	dc802817 	ldw	r18,160(sp)
 400b9f4:	302b883a 	mov	r21,r6
 400b9f8:	40000a26 	beq	r8,zero,400ba24 <_dtoa_r+0x74>
 400b9fc:	20801117 	ldw	r2,68(r4)
 400ba00:	400b883a 	mov	r5,r8
 400ba04:	40800115 	stw	r2,4(r8)
 400ba08:	20c01117 	ldw	r3,68(r4)
 400ba0c:	00800044 	movi	r2,1
 400ba10:	10c4983a 	sll	r2,r2,r3
 400ba14:	40800215 	stw	r2,8(r8)
 400ba18:	400e2cc0 	call	400e2cc <_Bfree>
 400ba1c:	d8c01617 	ldw	r3,88(sp)
 400ba20:	18001015 	stw	zero,64(r3)
 400ba24:	8800a316 	blt	r17,zero,400bcb4 <_dtoa_r+0x304>
 400ba28:	90000015 	stw	zero,0(r18)
 400ba2c:	a8dffc2c 	andhi	r3,r21,32752
 400ba30:	009ffc34 	movhi	r2,32752
 400ba34:	18809126 	beq	r3,r2,400bc7c <_dtoa_r+0x2cc>
 400ba38:	000d883a 	mov	r6,zero
 400ba3c:	000f883a 	mov	r7,zero
 400ba40:	a009883a 	mov	r4,r20
 400ba44:	a80b883a 	mov	r5,r21
 400ba48:	dd001215 	stw	r20,72(sp)
 400ba4c:	dd401315 	stw	r21,76(sp)
 400ba50:	4010ba40 	call	4010ba4 <__nedf2>
 400ba54:	1000171e 	bne	r2,zero,400bab4 <_dtoa_r+0x104>
 400ba58:	d9802717 	ldw	r6,156(sp)
 400ba5c:	00800044 	movi	r2,1
 400ba60:	30800015 	stw	r2,0(r6)
 400ba64:	d8802917 	ldw	r2,164(sp)
 400ba68:	10029b26 	beq	r2,zero,400c4d8 <_dtoa_r+0xb28>
 400ba6c:	d9002917 	ldw	r4,164(sp)
 400ba70:	008100f4 	movhi	r2,1027
 400ba74:	10b7b344 	addi	r2,r2,-8499
 400ba78:	10ffffc4 	addi	r3,r2,-1
 400ba7c:	20800015 	stw	r2,0(r4)
 400ba80:	1805883a 	mov	r2,r3
 400ba84:	dfc02517 	ldw	ra,148(sp)
 400ba88:	df002417 	ldw	fp,144(sp)
 400ba8c:	ddc02317 	ldw	r23,140(sp)
 400ba90:	dd802217 	ldw	r22,136(sp)
 400ba94:	dd402117 	ldw	r21,132(sp)
 400ba98:	dd002017 	ldw	r20,128(sp)
 400ba9c:	dcc01f17 	ldw	r19,124(sp)
 400baa0:	dc801e17 	ldw	r18,120(sp)
 400baa4:	dc401d17 	ldw	r17,116(sp)
 400baa8:	dc001c17 	ldw	r16,112(sp)
 400baac:	dec02604 	addi	sp,sp,152
 400bab0:	f800283a 	ret
 400bab4:	d9001617 	ldw	r4,88(sp)
 400bab8:	d9401217 	ldw	r5,72(sp)
 400babc:	d8800104 	addi	r2,sp,4
 400bac0:	a80d883a 	mov	r6,r21
 400bac4:	d9c00204 	addi	r7,sp,8
 400bac8:	d8800015 	stw	r2,0(sp)
 400bacc:	400e9080 	call	400e908 <__d2b>
 400bad0:	d8800715 	stw	r2,28(sp)
 400bad4:	a804d53a 	srli	r2,r21,20
 400bad8:	1101ffcc 	andi	r4,r2,2047
 400badc:	20008626 	beq	r4,zero,400bcf8 <_dtoa_r+0x348>
 400bae0:	d8c01217 	ldw	r3,72(sp)
 400bae4:	00800434 	movhi	r2,16
 400bae8:	10bfffc4 	addi	r2,r2,-1
 400baec:	ddc00117 	ldw	r23,4(sp)
 400baf0:	a884703a 	and	r2,r21,r2
 400baf4:	1811883a 	mov	r8,r3
 400baf8:	124ffc34 	orhi	r9,r2,16368
 400bafc:	25bf0044 	addi	r22,r4,-1023
 400bb00:	d8000815 	stw	zero,32(sp)
 400bb04:	0005883a 	mov	r2,zero
 400bb08:	00cffe34 	movhi	r3,16376
 400bb0c:	480b883a 	mov	r5,r9
 400bb10:	4009883a 	mov	r4,r8
 400bb14:	180f883a 	mov	r7,r3
 400bb18:	100d883a 	mov	r6,r2
 400bb1c:	40079400 	call	4007940 <__subdf3>
 400bb20:	0218dbf4 	movhi	r8,25455
 400bb24:	4210d844 	addi	r8,r8,17249
 400bb28:	024ff4f4 	movhi	r9,16339
 400bb2c:	4a61e9c4 	addi	r9,r9,-30809
 400bb30:	480f883a 	mov	r7,r9
 400bb34:	400d883a 	mov	r6,r8
 400bb38:	180b883a 	mov	r5,r3
 400bb3c:	1009883a 	mov	r4,r2
 400bb40:	4007a340 	call	4007a34 <__muldf3>
 400bb44:	0222d874 	movhi	r8,35681
 400bb48:	42322cc4 	addi	r8,r8,-14157
 400bb4c:	024ff1f4 	movhi	r9,16327
 400bb50:	4a628a04 	addi	r9,r9,-30168
 400bb54:	480f883a 	mov	r7,r9
 400bb58:	400d883a 	mov	r6,r8
 400bb5c:	180b883a 	mov	r5,r3
 400bb60:	1009883a 	mov	r4,r2
 400bb64:	40079c00 	call	40079c0 <__adddf3>
 400bb68:	b009883a 	mov	r4,r22
 400bb6c:	1021883a 	mov	r16,r2
 400bb70:	1823883a 	mov	r17,r3
 400bb74:	40080d80 	call	40080d8 <__floatsidf>
 400bb78:	021427f4 	movhi	r8,20639
 400bb7c:	421e7ec4 	addi	r8,r8,31227
 400bb80:	024ff4f4 	movhi	r9,16339
 400bb84:	4a5104c4 	addi	r9,r9,17427
 400bb88:	480f883a 	mov	r7,r9
 400bb8c:	400d883a 	mov	r6,r8
 400bb90:	180b883a 	mov	r5,r3
 400bb94:	1009883a 	mov	r4,r2
 400bb98:	4007a340 	call	4007a34 <__muldf3>
 400bb9c:	180f883a 	mov	r7,r3
 400bba0:	880b883a 	mov	r5,r17
 400bba4:	100d883a 	mov	r6,r2
 400bba8:	8009883a 	mov	r4,r16
 400bbac:	40079c00 	call	40079c0 <__adddf3>
 400bbb0:	1009883a 	mov	r4,r2
 400bbb4:	180b883a 	mov	r5,r3
 400bbb8:	1021883a 	mov	r16,r2
 400bbbc:	1823883a 	mov	r17,r3
 400bbc0:	40081d00 	call	40081d0 <__fixdfsi>
 400bbc4:	000d883a 	mov	r6,zero
 400bbc8:	000f883a 	mov	r7,zero
 400bbcc:	8009883a 	mov	r4,r16
 400bbd0:	880b883a 	mov	r5,r17
 400bbd4:	d8800d15 	stw	r2,52(sp)
 400bbd8:	40080500 	call	4008050 <__ltdf2>
 400bbdc:	10031716 	blt	r2,zero,400c83c <_dtoa_r+0xe8c>
 400bbe0:	d8c00d17 	ldw	r3,52(sp)
 400bbe4:	00800584 	movi	r2,22
 400bbe8:	10c1482e 	bgeu	r2,r3,400c10c <_dtoa_r+0x75c>
 400bbec:	01000044 	movi	r4,1
 400bbf0:	d9000c15 	stw	r4,48(sp)
 400bbf4:	bd85c83a 	sub	r2,r23,r22
 400bbf8:	11bfffc4 	addi	r6,r2,-1
 400bbfc:	30030b16 	blt	r6,zero,400c82c <_dtoa_r+0xe7c>
 400bc00:	d9800a15 	stw	r6,40(sp)
 400bc04:	d8001115 	stw	zero,68(sp)
 400bc08:	d8c00d17 	ldw	r3,52(sp)
 400bc0c:	1802ff16 	blt	r3,zero,400c80c <_dtoa_r+0xe5c>
 400bc10:	d9000a17 	ldw	r4,40(sp)
 400bc14:	d8c00915 	stw	r3,36(sp)
 400bc18:	d8001015 	stw	zero,64(sp)
 400bc1c:	20c9883a 	add	r4,r4,r3
 400bc20:	d9000a15 	stw	r4,40(sp)
 400bc24:	d9001717 	ldw	r4,92(sp)
 400bc28:	00800244 	movi	r2,9
 400bc2c:	11004636 	bltu	r2,r4,400bd48 <_dtoa_r+0x398>
 400bc30:	00800144 	movi	r2,5
 400bc34:	11020416 	blt	r2,r4,400c448 <_dtoa_r+0xa98>
 400bc38:	04400044 	movi	r17,1
 400bc3c:	d8c01717 	ldw	r3,92(sp)
 400bc40:	00800144 	movi	r2,5
 400bc44:	10c1ed36 	bltu	r2,r3,400c3fc <_dtoa_r+0xa4c>
 400bc48:	18c5883a 	add	r2,r3,r3
 400bc4c:	1085883a 	add	r2,r2,r2
 400bc50:	00c10074 	movhi	r3,1025
 400bc54:	18ef1904 	addi	r3,r3,-17308
 400bc58:	10c5883a 	add	r2,r2,r3
 400bc5c:	11000017 	ldw	r4,0(r2)
 400bc60:	2000683a 	jmp	r4
 400bc64:	0400bd50 	cmplti	r16,zero,757
 400bc68:	0400bd50 	cmplti	r16,zero,757
 400bc6c:	0400c750 	cmplti	r16,zero,797
 400bc70:	0400c728 	cmpgeui	r16,zero,796
 400bc74:	0400c76c 	andhi	r16,zero,797
 400bc78:	0400c778 	rdprs	r16,zero,797
 400bc7c:	d9002717 	ldw	r4,156(sp)
 400bc80:	0089c3c4 	movi	r2,9999
 400bc84:	20800015 	stw	r2,0(r4)
 400bc88:	a0001026 	beq	r20,zero,400bccc <_dtoa_r+0x31c>
 400bc8c:	00c100f4 	movhi	r3,1027
 400bc90:	18f7bf04 	addi	r3,r3,-8452
 400bc94:	d9802917 	ldw	r6,164(sp)
 400bc98:	303f7926 	beq	r6,zero,400ba80 <_dtoa_r+0xd0>
 400bc9c:	188000c7 	ldb	r2,3(r3)
 400bca0:	190000c4 	addi	r4,r3,3
 400bca4:	1000101e 	bne	r2,zero,400bce8 <_dtoa_r+0x338>
 400bca8:	d8802917 	ldw	r2,164(sp)
 400bcac:	11000015 	stw	r4,0(r2)
 400bcb0:	003f7306 	br	400ba80 <_dtoa_r+0xd0>
 400bcb4:	00a00034 	movhi	r2,32768
 400bcb8:	10bfffc4 	addi	r2,r2,-1
 400bcbc:	00c00044 	movi	r3,1
 400bcc0:	88aa703a 	and	r21,r17,r2
 400bcc4:	90c00015 	stw	r3,0(r18)
 400bcc8:	003f5806 	br	400ba2c <_dtoa_r+0x7c>
 400bccc:	00800434 	movhi	r2,16
 400bcd0:	10bfffc4 	addi	r2,r2,-1
 400bcd4:	a884703a 	and	r2,r21,r2
 400bcd8:	103fec1e 	bne	r2,zero,400bc8c <_dtoa_r+0x2dc>
 400bcdc:	00c100f4 	movhi	r3,1027
 400bce0:	18f7bc04 	addi	r3,r3,-8464
 400bce4:	003feb06 	br	400bc94 <_dtoa_r+0x2e4>
 400bce8:	d8802917 	ldw	r2,164(sp)
 400bcec:	19000204 	addi	r4,r3,8
 400bcf0:	11000015 	stw	r4,0(r2)
 400bcf4:	003f6206 	br	400ba80 <_dtoa_r+0xd0>
 400bcf8:	ddc00117 	ldw	r23,4(sp)
 400bcfc:	d8800217 	ldw	r2,8(sp)
 400bd00:	01000804 	movi	r4,32
 400bd04:	b8c10c84 	addi	r3,r23,1074
 400bd08:	18a3883a 	add	r17,r3,r2
 400bd0c:	2441b80e 	bge	r4,r17,400c3f0 <_dtoa_r+0xa40>
 400bd10:	00c01004 	movi	r3,64
 400bd14:	1c47c83a 	sub	r3,r3,r17
 400bd18:	88bff804 	addi	r2,r17,-32
 400bd1c:	a8c6983a 	sll	r3,r21,r3
 400bd20:	a084d83a 	srl	r2,r20,r2
 400bd24:	1888b03a 	or	r4,r3,r2
 400bd28:	4010d3c0 	call	4010d3c <__floatunsidf>
 400bd2c:	1011883a 	mov	r8,r2
 400bd30:	00bf8434 	movhi	r2,65040
 400bd34:	01000044 	movi	r4,1
 400bd38:	10d3883a 	add	r9,r2,r3
 400bd3c:	8dbef344 	addi	r22,r17,-1075
 400bd40:	d9000815 	stw	r4,32(sp)
 400bd44:	003f6f06 	br	400bb04 <_dtoa_r+0x154>
 400bd48:	d8001715 	stw	zero,92(sp)
 400bd4c:	04400044 	movi	r17,1
 400bd50:	00bfffc4 	movi	r2,-1
 400bd54:	00c00044 	movi	r3,1
 400bd58:	d8800e15 	stw	r2,56(sp)
 400bd5c:	d8002615 	stw	zero,152(sp)
 400bd60:	d8800f15 	stw	r2,60(sp)
 400bd64:	d8c00b15 	stw	r3,44(sp)
 400bd68:	1021883a 	mov	r16,r2
 400bd6c:	d8801617 	ldw	r2,88(sp)
 400bd70:	10001115 	stw	zero,68(r2)
 400bd74:	d8801617 	ldw	r2,88(sp)
 400bd78:	11401117 	ldw	r5,68(r2)
 400bd7c:	1009883a 	mov	r4,r2
 400bd80:	400e84c0 	call	400e84c <_Balloc>
 400bd84:	d8c01617 	ldw	r3,88(sp)
 400bd88:	d8800515 	stw	r2,20(sp)
 400bd8c:	18801015 	stw	r2,64(r3)
 400bd90:	00800384 	movi	r2,14
 400bd94:	14006836 	bltu	r2,r16,400bf38 <_dtoa_r+0x588>
 400bd98:	8805003a 	cmpeq	r2,r17,zero
 400bd9c:	1000661e 	bne	r2,zero,400bf38 <_dtoa_r+0x588>
 400bda0:	d9000d17 	ldw	r4,52(sp)
 400bda4:	0102300e 	bge	zero,r4,400c668 <_dtoa_r+0xcb8>
 400bda8:	208003cc 	andi	r2,r4,15
 400bdac:	100490fa 	slli	r2,r2,3
 400bdb0:	2025d13a 	srai	r18,r4,4
 400bdb4:	00c100f4 	movhi	r3,1027
 400bdb8:	18f7d004 	addi	r3,r3,-8384
 400bdbc:	10c5883a 	add	r2,r2,r3
 400bdc0:	90c0040c 	andi	r3,r18,16
 400bdc4:	14000017 	ldw	r16,0(r2)
 400bdc8:	14400117 	ldw	r17,4(r2)
 400bdcc:	18036a1e 	bne	r3,zero,400cb78 <_dtoa_r+0x11c8>
 400bdd0:	05800084 	movi	r22,2
 400bdd4:	90001026 	beq	r18,zero,400be18 <_dtoa_r+0x468>
 400bdd8:	04c100f4 	movhi	r19,1027
 400bddc:	9cf80204 	addi	r19,r19,-8184
 400bde0:	9080004c 	andi	r2,r18,1
 400bde4:	1005003a 	cmpeq	r2,r2,zero
 400bde8:	1000081e 	bne	r2,zero,400be0c <_dtoa_r+0x45c>
 400bdec:	99800017 	ldw	r6,0(r19)
 400bdf0:	99c00117 	ldw	r7,4(r19)
 400bdf4:	880b883a 	mov	r5,r17
 400bdf8:	8009883a 	mov	r4,r16
 400bdfc:	4007a340 	call	4007a34 <__muldf3>
 400be00:	1021883a 	mov	r16,r2
 400be04:	b5800044 	addi	r22,r22,1
 400be08:	1823883a 	mov	r17,r3
 400be0c:	9025d07a 	srai	r18,r18,1
 400be10:	9cc00204 	addi	r19,r19,8
 400be14:	903ff21e 	bne	r18,zero,400bde0 <_dtoa_r+0x430>
 400be18:	a80b883a 	mov	r5,r21
 400be1c:	a009883a 	mov	r4,r20
 400be20:	880f883a 	mov	r7,r17
 400be24:	800d883a 	mov	r6,r16
 400be28:	4007df80 	call	4007df8 <__divdf3>
 400be2c:	1029883a 	mov	r20,r2
 400be30:	182b883a 	mov	r21,r3
 400be34:	d8c00c17 	ldw	r3,48(sp)
 400be38:	1805003a 	cmpeq	r2,r3,zero
 400be3c:	1000081e 	bne	r2,zero,400be60 <_dtoa_r+0x4b0>
 400be40:	0005883a 	mov	r2,zero
 400be44:	00cffc34 	movhi	r3,16368
 400be48:	180f883a 	mov	r7,r3
 400be4c:	a009883a 	mov	r4,r20
 400be50:	a80b883a 	mov	r5,r21
 400be54:	100d883a 	mov	r6,r2
 400be58:	40080500 	call	4008050 <__ltdf2>
 400be5c:	1003fe16 	blt	r2,zero,400ce58 <_dtoa_r+0x14a8>
 400be60:	b009883a 	mov	r4,r22
 400be64:	40080d80 	call	40080d8 <__floatsidf>
 400be68:	180b883a 	mov	r5,r3
 400be6c:	1009883a 	mov	r4,r2
 400be70:	a00d883a 	mov	r6,r20
 400be74:	a80f883a 	mov	r7,r21
 400be78:	4007a340 	call	4007a34 <__muldf3>
 400be7c:	0011883a 	mov	r8,zero
 400be80:	02500734 	movhi	r9,16412
 400be84:	1009883a 	mov	r4,r2
 400be88:	180b883a 	mov	r5,r3
 400be8c:	480f883a 	mov	r7,r9
 400be90:	400d883a 	mov	r6,r8
 400be94:	40079c00 	call	40079c0 <__adddf3>
 400be98:	d9000f17 	ldw	r4,60(sp)
 400be9c:	102d883a 	mov	r22,r2
 400bea0:	00bf3034 	movhi	r2,64704
 400bea4:	18b9883a 	add	fp,r3,r2
 400bea8:	e02f883a 	mov	r23,fp
 400beac:	20028f1e 	bne	r4,zero,400c8ec <_dtoa_r+0xf3c>
 400beb0:	0005883a 	mov	r2,zero
 400beb4:	00d00534 	movhi	r3,16404
 400beb8:	a009883a 	mov	r4,r20
 400bebc:	a80b883a 	mov	r5,r21
 400bec0:	180f883a 	mov	r7,r3
 400bec4:	100d883a 	mov	r6,r2
 400bec8:	40079400 	call	4007940 <__subdf3>
 400becc:	1009883a 	mov	r4,r2
 400bed0:	e00f883a 	mov	r7,fp
 400bed4:	180b883a 	mov	r5,r3
 400bed8:	b00d883a 	mov	r6,r22
 400bedc:	1025883a 	mov	r18,r2
 400bee0:	1827883a 	mov	r19,r3
 400bee4:	4010c2c0 	call	4010c2c <__gtdf2>
 400bee8:	00834f16 	blt	zero,r2,400cc28 <_dtoa_r+0x1278>
 400beec:	e0e0003c 	xorhi	r3,fp,32768
 400bef0:	9009883a 	mov	r4,r18
 400bef4:	980b883a 	mov	r5,r19
 400bef8:	180f883a 	mov	r7,r3
 400befc:	b00d883a 	mov	r6,r22
 400bf00:	40080500 	call	4008050 <__ltdf2>
 400bf04:	1000080e 	bge	r2,zero,400bf28 <_dtoa_r+0x578>
 400bf08:	0027883a 	mov	r19,zero
 400bf0c:	0025883a 	mov	r18,zero
 400bf10:	d8802617 	ldw	r2,152(sp)
 400bf14:	df000517 	ldw	fp,20(sp)
 400bf18:	d8000615 	stw	zero,24(sp)
 400bf1c:	0084303a 	nor	r2,zero,r2
 400bf20:	d8800d15 	stw	r2,52(sp)
 400bf24:	00019b06 	br	400c594 <_dtoa_r+0xbe4>
 400bf28:	d9801217 	ldw	r6,72(sp)
 400bf2c:	d8801317 	ldw	r2,76(sp)
 400bf30:	3029883a 	mov	r20,r6
 400bf34:	102b883a 	mov	r21,r2
 400bf38:	d8c00217 	ldw	r3,8(sp)
 400bf3c:	18008516 	blt	r3,zero,400c154 <_dtoa_r+0x7a4>
 400bf40:	d9000d17 	ldw	r4,52(sp)
 400bf44:	00800384 	movi	r2,14
 400bf48:	11008216 	blt	r2,r4,400c154 <_dtoa_r+0x7a4>
 400bf4c:	200490fa 	slli	r2,r4,3
 400bf50:	d9802617 	ldw	r6,152(sp)
 400bf54:	00c100f4 	movhi	r3,1027
 400bf58:	18f7d004 	addi	r3,r3,-8384
 400bf5c:	10c5883a 	add	r2,r2,r3
 400bf60:	14800017 	ldw	r18,0(r2)
 400bf64:	14c00117 	ldw	r19,4(r2)
 400bf68:	30031e16 	blt	r6,zero,400cbe4 <_dtoa_r+0x1234>
 400bf6c:	d9000517 	ldw	r4,20(sp)
 400bf70:	d8c00f17 	ldw	r3,60(sp)
 400bf74:	a823883a 	mov	r17,r21
 400bf78:	a021883a 	mov	r16,r20
 400bf7c:	192b883a 	add	r21,r3,r4
 400bf80:	2039883a 	mov	fp,r4
 400bf84:	00000f06 	br	400bfc4 <_dtoa_r+0x614>
 400bf88:	0005883a 	mov	r2,zero
 400bf8c:	00d00934 	movhi	r3,16420
 400bf90:	5009883a 	mov	r4,r10
 400bf94:	580b883a 	mov	r5,r11
 400bf98:	180f883a 	mov	r7,r3
 400bf9c:	100d883a 	mov	r6,r2
 400bfa0:	4007a340 	call	4007a34 <__muldf3>
 400bfa4:	180b883a 	mov	r5,r3
 400bfa8:	000d883a 	mov	r6,zero
 400bfac:	000f883a 	mov	r7,zero
 400bfb0:	1009883a 	mov	r4,r2
 400bfb4:	1021883a 	mov	r16,r2
 400bfb8:	1823883a 	mov	r17,r3
 400bfbc:	4010ba40 	call	4010ba4 <__nedf2>
 400bfc0:	10004526 	beq	r2,zero,400c0d8 <_dtoa_r+0x728>
 400bfc4:	900d883a 	mov	r6,r18
 400bfc8:	980f883a 	mov	r7,r19
 400bfcc:	8009883a 	mov	r4,r16
 400bfd0:	880b883a 	mov	r5,r17
 400bfd4:	4007df80 	call	4007df8 <__divdf3>
 400bfd8:	180b883a 	mov	r5,r3
 400bfdc:	1009883a 	mov	r4,r2
 400bfe0:	40081d00 	call	40081d0 <__fixdfsi>
 400bfe4:	1009883a 	mov	r4,r2
 400bfe8:	1029883a 	mov	r20,r2
 400bfec:	40080d80 	call	40080d8 <__floatsidf>
 400bff0:	180f883a 	mov	r7,r3
 400bff4:	9009883a 	mov	r4,r18
 400bff8:	980b883a 	mov	r5,r19
 400bffc:	100d883a 	mov	r6,r2
 400c000:	4007a340 	call	4007a34 <__muldf3>
 400c004:	180f883a 	mov	r7,r3
 400c008:	880b883a 	mov	r5,r17
 400c00c:	8009883a 	mov	r4,r16
 400c010:	100d883a 	mov	r6,r2
 400c014:	40079400 	call	4007940 <__subdf3>
 400c018:	1015883a 	mov	r10,r2
 400c01c:	a0800c04 	addi	r2,r20,48
 400c020:	e0800005 	stb	r2,0(fp)
 400c024:	e7000044 	addi	fp,fp,1
 400c028:	1817883a 	mov	r11,r3
 400c02c:	e57fd61e 	bne	fp,r21,400bf88 <_dtoa_r+0x5d8>
 400c030:	500d883a 	mov	r6,r10
 400c034:	180f883a 	mov	r7,r3
 400c038:	5009883a 	mov	r4,r10
 400c03c:	180b883a 	mov	r5,r3
 400c040:	40079c00 	call	40079c0 <__adddf3>
 400c044:	100d883a 	mov	r6,r2
 400c048:	9009883a 	mov	r4,r18
 400c04c:	980b883a 	mov	r5,r19
 400c050:	180f883a 	mov	r7,r3
 400c054:	1021883a 	mov	r16,r2
 400c058:	1823883a 	mov	r17,r3
 400c05c:	40080500 	call	4008050 <__ltdf2>
 400c060:	10000816 	blt	r2,zero,400c084 <_dtoa_r+0x6d4>
 400c064:	980b883a 	mov	r5,r19
 400c068:	800d883a 	mov	r6,r16
 400c06c:	880f883a 	mov	r7,r17
 400c070:	9009883a 	mov	r4,r18
 400c074:	4010b1c0 	call	4010b1c <__eqdf2>
 400c078:	1000171e 	bne	r2,zero,400c0d8 <_dtoa_r+0x728>
 400c07c:	a080004c 	andi	r2,r20,1
 400c080:	10001526 	beq	r2,zero,400c0d8 <_dtoa_r+0x728>
 400c084:	d8800d17 	ldw	r2,52(sp)
 400c088:	d8800415 	stw	r2,16(sp)
 400c08c:	e009883a 	mov	r4,fp
 400c090:	213fffc4 	addi	r4,r4,-1
 400c094:	20c00007 	ldb	r3,0(r4)
 400c098:	00800e44 	movi	r2,57
 400c09c:	1880081e 	bne	r3,r2,400c0c0 <_dtoa_r+0x710>
 400c0a0:	d8800517 	ldw	r2,20(sp)
 400c0a4:	113ffa1e 	bne	r2,r4,400c090 <_dtoa_r+0x6e0>
 400c0a8:	d8c00417 	ldw	r3,16(sp)
 400c0ac:	d9800517 	ldw	r6,20(sp)
 400c0b0:	00800c04 	movi	r2,48
 400c0b4:	18c00044 	addi	r3,r3,1
 400c0b8:	d8c00415 	stw	r3,16(sp)
 400c0bc:	30800005 	stb	r2,0(r6)
 400c0c0:	20800003 	ldbu	r2,0(r4)
 400c0c4:	d8c00417 	ldw	r3,16(sp)
 400c0c8:	27000044 	addi	fp,r4,1
 400c0cc:	10800044 	addi	r2,r2,1
 400c0d0:	d8c00d15 	stw	r3,52(sp)
 400c0d4:	20800005 	stb	r2,0(r4)
 400c0d8:	d9001617 	ldw	r4,88(sp)
 400c0dc:	d9400717 	ldw	r5,28(sp)
 400c0e0:	400e2cc0 	call	400e2cc <_Bfree>
 400c0e4:	e0000005 	stb	zero,0(fp)
 400c0e8:	d9800d17 	ldw	r6,52(sp)
 400c0ec:	d8c02717 	ldw	r3,156(sp)
 400c0f0:	d9002917 	ldw	r4,164(sp)
 400c0f4:	30800044 	addi	r2,r6,1
 400c0f8:	18800015 	stw	r2,0(r3)
 400c0fc:	20029c26 	beq	r4,zero,400cb70 <_dtoa_r+0x11c0>
 400c100:	d8c00517 	ldw	r3,20(sp)
 400c104:	27000015 	stw	fp,0(r4)
 400c108:	003e5d06 	br	400ba80 <_dtoa_r+0xd0>
 400c10c:	d9800d17 	ldw	r6,52(sp)
 400c110:	00c100f4 	movhi	r3,1027
 400c114:	18f7d004 	addi	r3,r3,-8384
 400c118:	d9001217 	ldw	r4,72(sp)
 400c11c:	300490fa 	slli	r2,r6,3
 400c120:	d9401317 	ldw	r5,76(sp)
 400c124:	10c5883a 	add	r2,r2,r3
 400c128:	12000017 	ldw	r8,0(r2)
 400c12c:	12400117 	ldw	r9,4(r2)
 400c130:	400d883a 	mov	r6,r8
 400c134:	480f883a 	mov	r7,r9
 400c138:	40080500 	call	4008050 <__ltdf2>
 400c13c:	1000030e 	bge	r2,zero,400c14c <_dtoa_r+0x79c>
 400c140:	d8800d17 	ldw	r2,52(sp)
 400c144:	10bfffc4 	addi	r2,r2,-1
 400c148:	d8800d15 	stw	r2,52(sp)
 400c14c:	d8000c15 	stw	zero,48(sp)
 400c150:	003ea806 	br	400bbf4 <_dtoa_r+0x244>
 400c154:	d9000b17 	ldw	r4,44(sp)
 400c158:	202cc03a 	cmpne	r22,r4,zero
 400c15c:	b000c71e 	bne	r22,zero,400c47c <_dtoa_r+0xacc>
 400c160:	dc001117 	ldw	r16,68(sp)
 400c164:	dc801017 	ldw	r18,64(sp)
 400c168:	0027883a 	mov	r19,zero
 400c16c:	04000b0e 	bge	zero,r16,400c19c <_dtoa_r+0x7ec>
 400c170:	d8c00a17 	ldw	r3,40(sp)
 400c174:	00c0090e 	bge	zero,r3,400c19c <_dtoa_r+0x7ec>
 400c178:	8005883a 	mov	r2,r16
 400c17c:	1c011316 	blt	r3,r16,400c5cc <_dtoa_r+0xc1c>
 400c180:	d9000a17 	ldw	r4,40(sp)
 400c184:	d9801117 	ldw	r6,68(sp)
 400c188:	80a1c83a 	sub	r16,r16,r2
 400c18c:	2089c83a 	sub	r4,r4,r2
 400c190:	308dc83a 	sub	r6,r6,r2
 400c194:	d9000a15 	stw	r4,40(sp)
 400c198:	d9801115 	stw	r6,68(sp)
 400c19c:	d8801017 	ldw	r2,64(sp)
 400c1a0:	0080150e 	bge	zero,r2,400c1f8 <_dtoa_r+0x848>
 400c1a4:	d8c00b17 	ldw	r3,44(sp)
 400c1a8:	1805003a 	cmpeq	r2,r3,zero
 400c1ac:	1001c91e 	bne	r2,zero,400c8d4 <_dtoa_r+0xf24>
 400c1b0:	04800e0e 	bge	zero,r18,400c1ec <_dtoa_r+0x83c>
 400c1b4:	d9001617 	ldw	r4,88(sp)
 400c1b8:	980b883a 	mov	r5,r19
 400c1bc:	900d883a 	mov	r6,r18
 400c1c0:	400f0800 	call	400f080 <__pow5mult>
 400c1c4:	d9001617 	ldw	r4,88(sp)
 400c1c8:	d9800717 	ldw	r6,28(sp)
 400c1cc:	100b883a 	mov	r5,r2
 400c1d0:	1027883a 	mov	r19,r2
 400c1d4:	400ed5c0 	call	400ed5c <__multiply>
 400c1d8:	d9001617 	ldw	r4,88(sp)
 400c1dc:	d9400717 	ldw	r5,28(sp)
 400c1e0:	1023883a 	mov	r17,r2
 400c1e4:	400e2cc0 	call	400e2cc <_Bfree>
 400c1e8:	dc400715 	stw	r17,28(sp)
 400c1ec:	d9001017 	ldw	r4,64(sp)
 400c1f0:	248dc83a 	sub	r6,r4,r18
 400c1f4:	30010e1e 	bne	r6,zero,400c630 <_dtoa_r+0xc80>
 400c1f8:	d9001617 	ldw	r4,88(sp)
 400c1fc:	04400044 	movi	r17,1
 400c200:	880b883a 	mov	r5,r17
 400c204:	400ef440 	call	400ef44 <__i2b>
 400c208:	d9800917 	ldw	r6,36(sp)
 400c20c:	1025883a 	mov	r18,r2
 400c210:	0180040e 	bge	zero,r6,400c224 <_dtoa_r+0x874>
 400c214:	d9001617 	ldw	r4,88(sp)
 400c218:	100b883a 	mov	r5,r2
 400c21c:	400f0800 	call	400f080 <__pow5mult>
 400c220:	1025883a 	mov	r18,r2
 400c224:	d8801717 	ldw	r2,92(sp)
 400c228:	8880f30e 	bge	r17,r2,400c5f8 <_dtoa_r+0xc48>
 400c22c:	0023883a 	mov	r17,zero
 400c230:	d9800917 	ldw	r6,36(sp)
 400c234:	30019e1e 	bne	r6,zero,400c8b0 <_dtoa_r+0xf00>
 400c238:	00c00044 	movi	r3,1
 400c23c:	d9000a17 	ldw	r4,40(sp)
 400c240:	20c5883a 	add	r2,r4,r3
 400c244:	10c007cc 	andi	r3,r2,31
 400c248:	1800841e 	bne	r3,zero,400c45c <_dtoa_r+0xaac>
 400c24c:	00800704 	movi	r2,28
 400c250:	d9000a17 	ldw	r4,40(sp)
 400c254:	d9801117 	ldw	r6,68(sp)
 400c258:	80a1883a 	add	r16,r16,r2
 400c25c:	2089883a 	add	r4,r4,r2
 400c260:	308d883a 	add	r6,r6,r2
 400c264:	d9000a15 	stw	r4,40(sp)
 400c268:	d9801115 	stw	r6,68(sp)
 400c26c:	d8801117 	ldw	r2,68(sp)
 400c270:	0080050e 	bge	zero,r2,400c288 <_dtoa_r+0x8d8>
 400c274:	d9400717 	ldw	r5,28(sp)
 400c278:	d9001617 	ldw	r4,88(sp)
 400c27c:	100d883a 	mov	r6,r2
 400c280:	400ec100 	call	400ec10 <__lshift>
 400c284:	d8800715 	stw	r2,28(sp)
 400c288:	d8c00a17 	ldw	r3,40(sp)
 400c28c:	00c0050e 	bge	zero,r3,400c2a4 <_dtoa_r+0x8f4>
 400c290:	d9001617 	ldw	r4,88(sp)
 400c294:	900b883a 	mov	r5,r18
 400c298:	180d883a 	mov	r6,r3
 400c29c:	400ec100 	call	400ec10 <__lshift>
 400c2a0:	1025883a 	mov	r18,r2
 400c2a4:	d9000c17 	ldw	r4,48(sp)
 400c2a8:	2005003a 	cmpeq	r2,r4,zero
 400c2ac:	10016f26 	beq	r2,zero,400c86c <_dtoa_r+0xebc>
 400c2b0:	d9000f17 	ldw	r4,60(sp)
 400c2b4:	0102170e 	bge	zero,r4,400cb14 <_dtoa_r+0x1164>
 400c2b8:	d9800b17 	ldw	r6,44(sp)
 400c2bc:	3005003a 	cmpeq	r2,r6,zero
 400c2c0:	1000881e 	bne	r2,zero,400c4e4 <_dtoa_r+0xb34>
 400c2c4:	0400050e 	bge	zero,r16,400c2dc <_dtoa_r+0x92c>
 400c2c8:	d9001617 	ldw	r4,88(sp)
 400c2cc:	980b883a 	mov	r5,r19
 400c2d0:	800d883a 	mov	r6,r16
 400c2d4:	400ec100 	call	400ec10 <__lshift>
 400c2d8:	1027883a 	mov	r19,r2
 400c2dc:	8804c03a 	cmpne	r2,r17,zero
 400c2e0:	1002541e 	bne	r2,zero,400cc34 <_dtoa_r+0x1284>
 400c2e4:	980b883a 	mov	r5,r19
 400c2e8:	dd800517 	ldw	r22,20(sp)
 400c2ec:	dcc00615 	stw	r19,24(sp)
 400c2f0:	a700004c 	andi	fp,r20,1
 400c2f4:	2827883a 	mov	r19,r5
 400c2f8:	d9000717 	ldw	r4,28(sp)
 400c2fc:	900b883a 	mov	r5,r18
 400c300:	400b7980 	call	400b798 <quorem>
 400c304:	d9000717 	ldw	r4,28(sp)
 400c308:	d9400617 	ldw	r5,24(sp)
 400c30c:	1023883a 	mov	r17,r2
 400c310:	8dc00c04 	addi	r23,r17,48
 400c314:	400e4280 	call	400e428 <__mcmp>
 400c318:	d9001617 	ldw	r4,88(sp)
 400c31c:	900b883a 	mov	r5,r18
 400c320:	980d883a 	mov	r6,r19
 400c324:	1029883a 	mov	r20,r2
 400c328:	400ea840 	call	400ea84 <__mdiff>
 400c32c:	102b883a 	mov	r21,r2
 400c330:	10800317 	ldw	r2,12(r2)
 400c334:	1001281e 	bne	r2,zero,400c7d8 <_dtoa_r+0xe28>
 400c338:	d9000717 	ldw	r4,28(sp)
 400c33c:	a80b883a 	mov	r5,r21
 400c340:	400e4280 	call	400e428 <__mcmp>
 400c344:	d9001617 	ldw	r4,88(sp)
 400c348:	1021883a 	mov	r16,r2
 400c34c:	a80b883a 	mov	r5,r21
 400c350:	400e2cc0 	call	400e2cc <_Bfree>
 400c354:	8000041e 	bne	r16,zero,400c368 <_dtoa_r+0x9b8>
 400c358:	d8801717 	ldw	r2,92(sp)
 400c35c:	1000021e 	bne	r2,zero,400c368 <_dtoa_r+0x9b8>
 400c360:	e004c03a 	cmpne	r2,fp,zero
 400c364:	10011726 	beq	r2,zero,400c7c4 <_dtoa_r+0xe14>
 400c368:	a0010616 	blt	r20,zero,400c784 <_dtoa_r+0xdd4>
 400c36c:	a000041e 	bne	r20,zero,400c380 <_dtoa_r+0x9d0>
 400c370:	d8c01717 	ldw	r3,92(sp)
 400c374:	1800021e 	bne	r3,zero,400c380 <_dtoa_r+0x9d0>
 400c378:	e004c03a 	cmpne	r2,fp,zero
 400c37c:	10010126 	beq	r2,zero,400c784 <_dtoa_r+0xdd4>
 400c380:	04023d16 	blt	zero,r16,400cc78 <_dtoa_r+0x12c8>
 400c384:	b5c00005 	stb	r23,0(r22)
 400c388:	d9800517 	ldw	r6,20(sp)
 400c38c:	d9000f17 	ldw	r4,60(sp)
 400c390:	b5800044 	addi	r22,r22,1
 400c394:	3105883a 	add	r2,r6,r4
 400c398:	b0806526 	beq	r22,r2,400c530 <_dtoa_r+0xb80>
 400c39c:	d9400717 	ldw	r5,28(sp)
 400c3a0:	d9001617 	ldw	r4,88(sp)
 400c3a4:	01800284 	movi	r6,10
 400c3a8:	000f883a 	mov	r7,zero
 400c3ac:	400ef800 	call	400ef80 <__multadd>
 400c3b0:	d8800715 	stw	r2,28(sp)
 400c3b4:	d8800617 	ldw	r2,24(sp)
 400c3b8:	14c10c26 	beq	r2,r19,400c7ec <_dtoa_r+0xe3c>
 400c3bc:	d9400617 	ldw	r5,24(sp)
 400c3c0:	d9001617 	ldw	r4,88(sp)
 400c3c4:	01800284 	movi	r6,10
 400c3c8:	000f883a 	mov	r7,zero
 400c3cc:	400ef800 	call	400ef80 <__multadd>
 400c3d0:	d9001617 	ldw	r4,88(sp)
 400c3d4:	980b883a 	mov	r5,r19
 400c3d8:	01800284 	movi	r6,10
 400c3dc:	000f883a 	mov	r7,zero
 400c3e0:	d8800615 	stw	r2,24(sp)
 400c3e4:	400ef800 	call	400ef80 <__multadd>
 400c3e8:	1027883a 	mov	r19,r2
 400c3ec:	003fc206 	br	400c2f8 <_dtoa_r+0x948>
 400c3f0:	2445c83a 	sub	r2,r4,r17
 400c3f4:	a088983a 	sll	r4,r20,r2
 400c3f8:	003e4b06 	br	400bd28 <_dtoa_r+0x378>
 400c3fc:	01bfffc4 	movi	r6,-1
 400c400:	00800044 	movi	r2,1
 400c404:	d9800e15 	stw	r6,56(sp)
 400c408:	d9800f15 	stw	r6,60(sp)
 400c40c:	d8800b15 	stw	r2,44(sp)
 400c410:	d8c01617 	ldw	r3,88(sp)
 400c414:	008005c4 	movi	r2,23
 400c418:	18001115 	stw	zero,68(r3)
 400c41c:	1580082e 	bgeu	r2,r22,400c440 <_dtoa_r+0xa90>
 400c420:	00c00104 	movi	r3,4
 400c424:	0009883a 	mov	r4,zero
 400c428:	18c7883a 	add	r3,r3,r3
 400c42c:	18800504 	addi	r2,r3,20
 400c430:	21000044 	addi	r4,r4,1
 400c434:	b0bffc2e 	bgeu	r22,r2,400c428 <_dtoa_r+0xa78>
 400c438:	d9801617 	ldw	r6,88(sp)
 400c43c:	31001115 	stw	r4,68(r6)
 400c440:	dc000f17 	ldw	r16,60(sp)
 400c444:	003e4b06 	br	400bd74 <_dtoa_r+0x3c4>
 400c448:	d9801717 	ldw	r6,92(sp)
 400c44c:	0023883a 	mov	r17,zero
 400c450:	31bfff04 	addi	r6,r6,-4
 400c454:	d9801715 	stw	r6,92(sp)
 400c458:	003df806 	br	400bc3c <_dtoa_r+0x28c>
 400c45c:	00800804 	movi	r2,32
 400c460:	10c9c83a 	sub	r4,r2,r3
 400c464:	00c00104 	movi	r3,4
 400c468:	19005a16 	blt	r3,r4,400c5d4 <_dtoa_r+0xc24>
 400c46c:	008000c4 	movi	r2,3
 400c470:	113f7e16 	blt	r2,r4,400c26c <_dtoa_r+0x8bc>
 400c474:	20800704 	addi	r2,r4,28
 400c478:	003f7506 	br	400c250 <_dtoa_r+0x8a0>
 400c47c:	d9801717 	ldw	r6,92(sp)
 400c480:	00800044 	movi	r2,1
 400c484:	1180a10e 	bge	r2,r6,400c70c <_dtoa_r+0xd5c>
 400c488:	d9800f17 	ldw	r6,60(sp)
 400c48c:	d8c01017 	ldw	r3,64(sp)
 400c490:	30bfffc4 	addi	r2,r6,-1
 400c494:	1881c616 	blt	r3,r2,400cbb0 <_dtoa_r+0x1200>
 400c498:	18a5c83a 	sub	r18,r3,r2
 400c49c:	d8800f17 	ldw	r2,60(sp)
 400c4a0:	10026216 	blt	r2,zero,400ce2c <_dtoa_r+0x147c>
 400c4a4:	dc001117 	ldw	r16,68(sp)
 400c4a8:	1007883a 	mov	r3,r2
 400c4ac:	d9800a17 	ldw	r6,40(sp)
 400c4b0:	d8801117 	ldw	r2,68(sp)
 400c4b4:	d9001617 	ldw	r4,88(sp)
 400c4b8:	30cd883a 	add	r6,r6,r3
 400c4bc:	10c5883a 	add	r2,r2,r3
 400c4c0:	01400044 	movi	r5,1
 400c4c4:	d9800a15 	stw	r6,40(sp)
 400c4c8:	d8801115 	stw	r2,68(sp)
 400c4cc:	400ef440 	call	400ef44 <__i2b>
 400c4d0:	1027883a 	mov	r19,r2
 400c4d4:	003f2506 	br	400c16c <_dtoa_r+0x7bc>
 400c4d8:	00c100f4 	movhi	r3,1027
 400c4dc:	18f7b304 	addi	r3,r3,-8500
 400c4e0:	003d6706 	br	400ba80 <_dtoa_r+0xd0>
 400c4e4:	dd800517 	ldw	r22,20(sp)
 400c4e8:	04000044 	movi	r16,1
 400c4ec:	00000706 	br	400c50c <_dtoa_r+0xb5c>
 400c4f0:	d9400717 	ldw	r5,28(sp)
 400c4f4:	d9001617 	ldw	r4,88(sp)
 400c4f8:	01800284 	movi	r6,10
 400c4fc:	000f883a 	mov	r7,zero
 400c500:	400ef800 	call	400ef80 <__multadd>
 400c504:	d8800715 	stw	r2,28(sp)
 400c508:	84000044 	addi	r16,r16,1
 400c50c:	d9000717 	ldw	r4,28(sp)
 400c510:	900b883a 	mov	r5,r18
 400c514:	400b7980 	call	400b798 <quorem>
 400c518:	15c00c04 	addi	r23,r2,48
 400c51c:	b5c00005 	stb	r23,0(r22)
 400c520:	d8c00f17 	ldw	r3,60(sp)
 400c524:	b5800044 	addi	r22,r22,1
 400c528:	80fff116 	blt	r16,r3,400c4f0 <_dtoa_r+0xb40>
 400c52c:	d8000615 	stw	zero,24(sp)
 400c530:	d9400717 	ldw	r5,28(sp)
 400c534:	d9001617 	ldw	r4,88(sp)
 400c538:	01800044 	movi	r6,1
 400c53c:	400ec100 	call	400ec10 <__lshift>
 400c540:	1009883a 	mov	r4,r2
 400c544:	900b883a 	mov	r5,r18
 400c548:	d8800715 	stw	r2,28(sp)
 400c54c:	400e4280 	call	400e428 <__mcmp>
 400c550:	00803c0e 	bge	zero,r2,400c644 <_dtoa_r+0xc94>
 400c554:	b009883a 	mov	r4,r22
 400c558:	213fffc4 	addi	r4,r4,-1
 400c55c:	21400003 	ldbu	r5,0(r4)
 400c560:	00800e44 	movi	r2,57
 400c564:	28c03fcc 	andi	r3,r5,255
 400c568:	18c0201c 	xori	r3,r3,128
 400c56c:	18ffe004 	addi	r3,r3,-128
 400c570:	1881981e 	bne	r3,r2,400cbd4 <_dtoa_r+0x1224>
 400c574:	d9800517 	ldw	r6,20(sp)
 400c578:	21bff71e 	bne	r4,r6,400c558 <_dtoa_r+0xba8>
 400c57c:	d8800d17 	ldw	r2,52(sp)
 400c580:	37000044 	addi	fp,r6,1
 400c584:	10800044 	addi	r2,r2,1
 400c588:	d8800d15 	stw	r2,52(sp)
 400c58c:	00800c44 	movi	r2,49
 400c590:	30800005 	stb	r2,0(r6)
 400c594:	d9001617 	ldw	r4,88(sp)
 400c598:	900b883a 	mov	r5,r18
 400c59c:	400e2cc0 	call	400e2cc <_Bfree>
 400c5a0:	983ecd26 	beq	r19,zero,400c0d8 <_dtoa_r+0x728>
 400c5a4:	d8c00617 	ldw	r3,24(sp)
 400c5a8:	18000426 	beq	r3,zero,400c5bc <_dtoa_r+0xc0c>
 400c5ac:	1cc00326 	beq	r3,r19,400c5bc <_dtoa_r+0xc0c>
 400c5b0:	d9001617 	ldw	r4,88(sp)
 400c5b4:	180b883a 	mov	r5,r3
 400c5b8:	400e2cc0 	call	400e2cc <_Bfree>
 400c5bc:	d9001617 	ldw	r4,88(sp)
 400c5c0:	980b883a 	mov	r5,r19
 400c5c4:	400e2cc0 	call	400e2cc <_Bfree>
 400c5c8:	003ec306 	br	400c0d8 <_dtoa_r+0x728>
 400c5cc:	1805883a 	mov	r2,r3
 400c5d0:	003eeb06 	br	400c180 <_dtoa_r+0x7d0>
 400c5d4:	d9800a17 	ldw	r6,40(sp)
 400c5d8:	d8c01117 	ldw	r3,68(sp)
 400c5dc:	20bfff04 	addi	r2,r4,-4
 400c5e0:	308d883a 	add	r6,r6,r2
 400c5e4:	1887883a 	add	r3,r3,r2
 400c5e8:	80a1883a 	add	r16,r16,r2
 400c5ec:	d9800a15 	stw	r6,40(sp)
 400c5f0:	d8c01115 	stw	r3,68(sp)
 400c5f4:	003f1d06 	br	400c26c <_dtoa_r+0x8bc>
 400c5f8:	a03f0c1e 	bne	r20,zero,400c22c <_dtoa_r+0x87c>
 400c5fc:	00800434 	movhi	r2,16
 400c600:	10bfffc4 	addi	r2,r2,-1
 400c604:	a884703a 	and	r2,r21,r2
 400c608:	103f081e 	bne	r2,zero,400c22c <_dtoa_r+0x87c>
 400c60c:	a89ffc2c 	andhi	r2,r21,32752
 400c610:	103f0626 	beq	r2,zero,400c22c <_dtoa_r+0x87c>
 400c614:	d8c01117 	ldw	r3,68(sp)
 400c618:	d9000a17 	ldw	r4,40(sp)
 400c61c:	18c00044 	addi	r3,r3,1
 400c620:	21000044 	addi	r4,r4,1
 400c624:	d8c01115 	stw	r3,68(sp)
 400c628:	d9000a15 	stw	r4,40(sp)
 400c62c:	003f0006 	br	400c230 <_dtoa_r+0x880>
 400c630:	d9400717 	ldw	r5,28(sp)
 400c634:	d9001617 	ldw	r4,88(sp)
 400c638:	400f0800 	call	400f080 <__pow5mult>
 400c63c:	d8800715 	stw	r2,28(sp)
 400c640:	003eed06 	br	400c1f8 <_dtoa_r+0x848>
 400c644:	1000021e 	bne	r2,zero,400c650 <_dtoa_r+0xca0>
 400c648:	b880004c 	andi	r2,r23,1
 400c64c:	103fc11e 	bne	r2,zero,400c554 <_dtoa_r+0xba4>
 400c650:	b5bfffc4 	addi	r22,r22,-1
 400c654:	b0c00007 	ldb	r3,0(r22)
 400c658:	00800c04 	movi	r2,48
 400c65c:	18bffc26 	beq	r3,r2,400c650 <_dtoa_r+0xca0>
 400c660:	b7000044 	addi	fp,r22,1
 400c664:	003fcb06 	br	400c594 <_dtoa_r+0xbe4>
 400c668:	d9800d17 	ldw	r6,52(sp)
 400c66c:	018fc83a 	sub	r7,zero,r6
 400c670:	3801f726 	beq	r7,zero,400ce50 <_dtoa_r+0x14a0>
 400c674:	398003cc 	andi	r6,r7,15
 400c678:	300c90fa 	slli	r6,r6,3
 400c67c:	014100f4 	movhi	r5,1027
 400c680:	2977d004 	addi	r5,r5,-8384
 400c684:	d9001217 	ldw	r4,72(sp)
 400c688:	314d883a 	add	r6,r6,r5
 400c68c:	30c00117 	ldw	r3,4(r6)
 400c690:	30800017 	ldw	r2,0(r6)
 400c694:	d9401317 	ldw	r5,76(sp)
 400c698:	3821d13a 	srai	r16,r7,4
 400c69c:	100d883a 	mov	r6,r2
 400c6a0:	180f883a 	mov	r7,r3
 400c6a4:	4007a340 	call	4007a34 <__muldf3>
 400c6a8:	1011883a 	mov	r8,r2
 400c6ac:	1813883a 	mov	r9,r3
 400c6b0:	1029883a 	mov	r20,r2
 400c6b4:	182b883a 	mov	r21,r3
 400c6b8:	8001e526 	beq	r16,zero,400ce50 <_dtoa_r+0x14a0>
 400c6bc:	05800084 	movi	r22,2
 400c6c0:	044100f4 	movhi	r17,1027
 400c6c4:	8c780204 	addi	r17,r17,-8184
 400c6c8:	8080004c 	andi	r2,r16,1
 400c6cc:	1005003a 	cmpeq	r2,r2,zero
 400c6d0:	1000081e 	bne	r2,zero,400c6f4 <_dtoa_r+0xd44>
 400c6d4:	89800017 	ldw	r6,0(r17)
 400c6d8:	89c00117 	ldw	r7,4(r17)
 400c6dc:	480b883a 	mov	r5,r9
 400c6e0:	4009883a 	mov	r4,r8
 400c6e4:	4007a340 	call	4007a34 <__muldf3>
 400c6e8:	1011883a 	mov	r8,r2
 400c6ec:	b5800044 	addi	r22,r22,1
 400c6f0:	1813883a 	mov	r9,r3
 400c6f4:	8021d07a 	srai	r16,r16,1
 400c6f8:	8c400204 	addi	r17,r17,8
 400c6fc:	803ff21e 	bne	r16,zero,400c6c8 <_dtoa_r+0xd18>
 400c700:	4029883a 	mov	r20,r8
 400c704:	482b883a 	mov	r21,r9
 400c708:	003dca06 	br	400be34 <_dtoa_r+0x484>
 400c70c:	d9000817 	ldw	r4,32(sp)
 400c710:	2005003a 	cmpeq	r2,r4,zero
 400c714:	1001f61e 	bne	r2,zero,400cef0 <_dtoa_r+0x1540>
 400c718:	dc001117 	ldw	r16,68(sp)
 400c71c:	dc801017 	ldw	r18,64(sp)
 400c720:	18c10cc4 	addi	r3,r3,1075
 400c724:	003f6106 	br	400c4ac <_dtoa_r+0xafc>
 400c728:	d8000b15 	stw	zero,44(sp)
 400c72c:	d9802617 	ldw	r6,152(sp)
 400c730:	d8c00d17 	ldw	r3,52(sp)
 400c734:	30800044 	addi	r2,r6,1
 400c738:	18ad883a 	add	r22,r3,r2
 400c73c:	b13fffc4 	addi	r4,r22,-1
 400c740:	d9000e15 	stw	r4,56(sp)
 400c744:	0581f60e 	bge	zero,r22,400cf20 <_dtoa_r+0x1570>
 400c748:	dd800f15 	stw	r22,60(sp)
 400c74c:	003f3006 	br	400c410 <_dtoa_r+0xa60>
 400c750:	d8000b15 	stw	zero,44(sp)
 400c754:	d9002617 	ldw	r4,152(sp)
 400c758:	0101eb0e 	bge	zero,r4,400cf08 <_dtoa_r+0x1558>
 400c75c:	202d883a 	mov	r22,r4
 400c760:	d9000e15 	stw	r4,56(sp)
 400c764:	d9000f15 	stw	r4,60(sp)
 400c768:	003f2906 	br	400c410 <_dtoa_r+0xa60>
 400c76c:	01800044 	movi	r6,1
 400c770:	d9800b15 	stw	r6,44(sp)
 400c774:	003ff706 	br	400c754 <_dtoa_r+0xda4>
 400c778:	01000044 	movi	r4,1
 400c77c:	d9000b15 	stw	r4,44(sp)
 400c780:	003fea06 	br	400c72c <_dtoa_r+0xd7c>
 400c784:	04000c0e 	bge	zero,r16,400c7b8 <_dtoa_r+0xe08>
 400c788:	d9400717 	ldw	r5,28(sp)
 400c78c:	d9001617 	ldw	r4,88(sp)
 400c790:	01800044 	movi	r6,1
 400c794:	400ec100 	call	400ec10 <__lshift>
 400c798:	1009883a 	mov	r4,r2
 400c79c:	900b883a 	mov	r5,r18
 400c7a0:	d8800715 	stw	r2,28(sp)
 400c7a4:	400e4280 	call	400e428 <__mcmp>
 400c7a8:	0081e00e 	bge	zero,r2,400cf2c <_dtoa_r+0x157c>
 400c7ac:	bdc00044 	addi	r23,r23,1
 400c7b0:	00800e84 	movi	r2,58
 400c7b4:	b881a226 	beq	r23,r2,400ce40 <_dtoa_r+0x1490>
 400c7b8:	b7000044 	addi	fp,r22,1
 400c7bc:	b5c00005 	stb	r23,0(r22)
 400c7c0:	003f7406 	br	400c594 <_dtoa_r+0xbe4>
 400c7c4:	00800e44 	movi	r2,57
 400c7c8:	b8819d26 	beq	r23,r2,400ce40 <_dtoa_r+0x1490>
 400c7cc:	053ffa0e 	bge	zero,r20,400c7b8 <_dtoa_r+0xe08>
 400c7d0:	8dc00c44 	addi	r23,r17,49
 400c7d4:	003ff806 	br	400c7b8 <_dtoa_r+0xe08>
 400c7d8:	d9001617 	ldw	r4,88(sp)
 400c7dc:	a80b883a 	mov	r5,r21
 400c7e0:	04000044 	movi	r16,1
 400c7e4:	400e2cc0 	call	400e2cc <_Bfree>
 400c7e8:	003edf06 	br	400c368 <_dtoa_r+0x9b8>
 400c7ec:	d9001617 	ldw	r4,88(sp)
 400c7f0:	980b883a 	mov	r5,r19
 400c7f4:	01800284 	movi	r6,10
 400c7f8:	000f883a 	mov	r7,zero
 400c7fc:	400ef800 	call	400ef80 <__multadd>
 400c800:	1027883a 	mov	r19,r2
 400c804:	d8800615 	stw	r2,24(sp)
 400c808:	003ebb06 	br	400c2f8 <_dtoa_r+0x948>
 400c80c:	d9801117 	ldw	r6,68(sp)
 400c810:	d8800d17 	ldw	r2,52(sp)
 400c814:	d8000915 	stw	zero,36(sp)
 400c818:	308dc83a 	sub	r6,r6,r2
 400c81c:	0087c83a 	sub	r3,zero,r2
 400c820:	d9801115 	stw	r6,68(sp)
 400c824:	d8c01015 	stw	r3,64(sp)
 400c828:	003cfe06 	br	400bc24 <_dtoa_r+0x274>
 400c82c:	018dc83a 	sub	r6,zero,r6
 400c830:	d9801115 	stw	r6,68(sp)
 400c834:	d8000a15 	stw	zero,40(sp)
 400c838:	003cf306 	br	400bc08 <_dtoa_r+0x258>
 400c83c:	d9000d17 	ldw	r4,52(sp)
 400c840:	40080d80 	call	40080d8 <__floatsidf>
 400c844:	880b883a 	mov	r5,r17
 400c848:	8009883a 	mov	r4,r16
 400c84c:	180f883a 	mov	r7,r3
 400c850:	100d883a 	mov	r6,r2
 400c854:	4010ba40 	call	4010ba4 <__nedf2>
 400c858:	103ce126 	beq	r2,zero,400bbe0 <_dtoa_r+0x230>
 400c85c:	d9800d17 	ldw	r6,52(sp)
 400c860:	31bfffc4 	addi	r6,r6,-1
 400c864:	d9800d15 	stw	r6,52(sp)
 400c868:	003cdd06 	br	400bbe0 <_dtoa_r+0x230>
 400c86c:	d9000717 	ldw	r4,28(sp)
 400c870:	900b883a 	mov	r5,r18
 400c874:	400e4280 	call	400e428 <__mcmp>
 400c878:	103e8d0e 	bge	r2,zero,400c2b0 <_dtoa_r+0x900>
 400c87c:	d9400717 	ldw	r5,28(sp)
 400c880:	d9001617 	ldw	r4,88(sp)
 400c884:	01800284 	movi	r6,10
 400c888:	000f883a 	mov	r7,zero
 400c88c:	400ef800 	call	400ef80 <__multadd>
 400c890:	d9800d17 	ldw	r6,52(sp)
 400c894:	d8800715 	stw	r2,28(sp)
 400c898:	31bfffc4 	addi	r6,r6,-1
 400c89c:	d9800d15 	stw	r6,52(sp)
 400c8a0:	b001a71e 	bne	r22,zero,400cf40 <_dtoa_r+0x1590>
 400c8a4:	d8800e17 	ldw	r2,56(sp)
 400c8a8:	d8800f15 	stw	r2,60(sp)
 400c8ac:	003e8006 	br	400c2b0 <_dtoa_r+0x900>
 400c8b0:	90800417 	ldw	r2,16(r18)
 400c8b4:	1085883a 	add	r2,r2,r2
 400c8b8:	1085883a 	add	r2,r2,r2
 400c8bc:	1485883a 	add	r2,r2,r18
 400c8c0:	11000417 	ldw	r4,16(r2)
 400c8c4:	400e2f40 	call	400e2f4 <__hi0bits>
 400c8c8:	00c00804 	movi	r3,32
 400c8cc:	1887c83a 	sub	r3,r3,r2
 400c8d0:	003e5a06 	br	400c23c <_dtoa_r+0x88c>
 400c8d4:	d9400717 	ldw	r5,28(sp)
 400c8d8:	d9801017 	ldw	r6,64(sp)
 400c8dc:	d9001617 	ldw	r4,88(sp)
 400c8e0:	400f0800 	call	400f080 <__pow5mult>
 400c8e4:	d8800715 	stw	r2,28(sp)
 400c8e8:	003e4306 	br	400c1f8 <_dtoa_r+0x848>
 400c8ec:	d9800f17 	ldw	r6,60(sp)
 400c8f0:	d8800d17 	ldw	r2,52(sp)
 400c8f4:	d9800315 	stw	r6,12(sp)
 400c8f8:	d8800415 	stw	r2,16(sp)
 400c8fc:	d8c00b17 	ldw	r3,44(sp)
 400c900:	1805003a 	cmpeq	r2,r3,zero
 400c904:	1000e21e 	bne	r2,zero,400cc90 <_dtoa_r+0x12e0>
 400c908:	d9000317 	ldw	r4,12(sp)
 400c90c:	0005883a 	mov	r2,zero
 400c910:	00cff834 	movhi	r3,16352
 400c914:	200c90fa 	slli	r6,r4,3
 400c918:	010100f4 	movhi	r4,1027
 400c91c:	2137d004 	addi	r4,r4,-8384
 400c920:	180b883a 	mov	r5,r3
 400c924:	310d883a 	add	r6,r6,r4
 400c928:	327fff17 	ldw	r9,-4(r6)
 400c92c:	323ffe17 	ldw	r8,-8(r6)
 400c930:	1009883a 	mov	r4,r2
 400c934:	480f883a 	mov	r7,r9
 400c938:	400d883a 	mov	r6,r8
 400c93c:	4007df80 	call	4007df8 <__divdf3>
 400c940:	180b883a 	mov	r5,r3
 400c944:	b00d883a 	mov	r6,r22
 400c948:	b80f883a 	mov	r7,r23
 400c94c:	1009883a 	mov	r4,r2
 400c950:	40079400 	call	4007940 <__subdf3>
 400c954:	a80b883a 	mov	r5,r21
 400c958:	a009883a 	mov	r4,r20
 400c95c:	d8c01915 	stw	r3,100(sp)
 400c960:	d8801815 	stw	r2,96(sp)
 400c964:	40081d00 	call	40081d0 <__fixdfsi>
 400c968:	1009883a 	mov	r4,r2
 400c96c:	1027883a 	mov	r19,r2
 400c970:	40080d80 	call	40080d8 <__floatsidf>
 400c974:	a80b883a 	mov	r5,r21
 400c978:	a009883a 	mov	r4,r20
 400c97c:	180f883a 	mov	r7,r3
 400c980:	100d883a 	mov	r6,r2
 400c984:	40079400 	call	4007940 <__subdf3>
 400c988:	d9801817 	ldw	r6,96(sp)
 400c98c:	1823883a 	mov	r17,r3
 400c990:	d8801415 	stw	r2,80(sp)
 400c994:	302d883a 	mov	r22,r6
 400c998:	d9800517 	ldw	r6,20(sp)
 400c99c:	9cc00c04 	addi	r19,r19,48
 400c9a0:	dc401515 	stw	r17,84(sp)
 400c9a4:	d8c01917 	ldw	r3,100(sp)
 400c9a8:	34c00005 	stb	r19,0(r6)
 400c9ac:	d8800517 	ldw	r2,20(sp)
 400c9b0:	d9401917 	ldw	r5,100(sp)
 400c9b4:	d9801417 	ldw	r6,80(sp)
 400c9b8:	b009883a 	mov	r4,r22
 400c9bc:	880f883a 	mov	r7,r17
 400c9c0:	182f883a 	mov	r23,r3
 400c9c4:	17000044 	addi	fp,r2,1
 400c9c8:	4010c2c0 	call	4010c2c <__gtdf2>
 400c9cc:	00804e16 	blt	zero,r2,400cb08 <_dtoa_r+0x1158>
 400c9d0:	d9801417 	ldw	r6,80(sp)
 400c9d4:	0005883a 	mov	r2,zero
 400c9d8:	00cffc34 	movhi	r3,16368
 400c9dc:	180b883a 	mov	r5,r3
 400c9e0:	880f883a 	mov	r7,r17
 400c9e4:	1009883a 	mov	r4,r2
 400c9e8:	40079400 	call	4007940 <__subdf3>
 400c9ec:	d9401917 	ldw	r5,100(sp)
 400c9f0:	180f883a 	mov	r7,r3
 400c9f4:	b009883a 	mov	r4,r22
 400c9f8:	100d883a 	mov	r6,r2
 400c9fc:	4010c2c0 	call	4010c2c <__gtdf2>
 400ca00:	00bda216 	blt	zero,r2,400c08c <_dtoa_r+0x6dc>
 400ca04:	d8c00317 	ldw	r3,12(sp)
 400ca08:	00800044 	movi	r2,1
 400ca0c:	10c01216 	blt	r2,r3,400ca58 <_dtoa_r+0x10a8>
 400ca10:	003d4506 	br	400bf28 <_dtoa_r+0x578>
 400ca14:	d9801417 	ldw	r6,80(sp)
 400ca18:	0005883a 	mov	r2,zero
 400ca1c:	00cffc34 	movhi	r3,16368
 400ca20:	180b883a 	mov	r5,r3
 400ca24:	880f883a 	mov	r7,r17
 400ca28:	1009883a 	mov	r4,r2
 400ca2c:	40079400 	call	4007940 <__subdf3>
 400ca30:	d9c01b17 	ldw	r7,108(sp)
 400ca34:	180b883a 	mov	r5,r3
 400ca38:	1009883a 	mov	r4,r2
 400ca3c:	b00d883a 	mov	r6,r22
 400ca40:	40080500 	call	4008050 <__ltdf2>
 400ca44:	103d9116 	blt	r2,zero,400c08c <_dtoa_r+0x6dc>
 400ca48:	d9800517 	ldw	r6,20(sp)
 400ca4c:	d9000317 	ldw	r4,12(sp)
 400ca50:	3105883a 	add	r2,r6,r4
 400ca54:	e0bd3426 	beq	fp,r2,400bf28 <_dtoa_r+0x578>
 400ca58:	04500934 	movhi	r17,16420
 400ca5c:	0021883a 	mov	r16,zero
 400ca60:	b80b883a 	mov	r5,r23
 400ca64:	b009883a 	mov	r4,r22
 400ca68:	800d883a 	mov	r6,r16
 400ca6c:	880f883a 	mov	r7,r17
 400ca70:	4007a340 	call	4007a34 <__muldf3>
 400ca74:	d9401517 	ldw	r5,84(sp)
 400ca78:	d9001417 	ldw	r4,80(sp)
 400ca7c:	880f883a 	mov	r7,r17
 400ca80:	000d883a 	mov	r6,zero
 400ca84:	d8801a15 	stw	r2,104(sp)
 400ca88:	d8c01b15 	stw	r3,108(sp)
 400ca8c:	4007a340 	call	4007a34 <__muldf3>
 400ca90:	180b883a 	mov	r5,r3
 400ca94:	1009883a 	mov	r4,r2
 400ca98:	1823883a 	mov	r17,r3
 400ca9c:	1021883a 	mov	r16,r2
 400caa0:	40081d00 	call	40081d0 <__fixdfsi>
 400caa4:	1009883a 	mov	r4,r2
 400caa8:	102b883a 	mov	r21,r2
 400caac:	40080d80 	call	40080d8 <__floatsidf>
 400cab0:	880b883a 	mov	r5,r17
 400cab4:	8009883a 	mov	r4,r16
 400cab8:	180f883a 	mov	r7,r3
 400cabc:	100d883a 	mov	r6,r2
 400cac0:	40079400 	call	4007940 <__subdf3>
 400cac4:	1021883a 	mov	r16,r2
 400cac8:	d9001b17 	ldw	r4,108(sp)
 400cacc:	1823883a 	mov	r17,r3
 400cad0:	dc001415 	stw	r16,80(sp)
 400cad4:	ad400c04 	addi	r21,r21,48
 400cad8:	dc401515 	stw	r17,84(sp)
 400cadc:	d8801a17 	ldw	r2,104(sp)
 400cae0:	e5400005 	stb	r21,0(fp)
 400cae4:	202f883a 	mov	r23,r4
 400cae8:	d9c01b17 	ldw	r7,108(sp)
 400caec:	d9001417 	ldw	r4,80(sp)
 400caf0:	880b883a 	mov	r5,r17
 400caf4:	100d883a 	mov	r6,r2
 400caf8:	102d883a 	mov	r22,r2
 400cafc:	e7000044 	addi	fp,fp,1
 400cb00:	40080500 	call	4008050 <__ltdf2>
 400cb04:	103fc30e 	bge	r2,zero,400ca14 <_dtoa_r+0x1064>
 400cb08:	d9000417 	ldw	r4,16(sp)
 400cb0c:	d9000d15 	stw	r4,52(sp)
 400cb10:	003d7106 	br	400c0d8 <_dtoa_r+0x728>
 400cb14:	d9801717 	ldw	r6,92(sp)
 400cb18:	00800084 	movi	r2,2
 400cb1c:	11bde60e 	bge	r2,r6,400c2b8 <_dtoa_r+0x908>
 400cb20:	203cfb1e 	bne	r4,zero,400bf10 <_dtoa_r+0x560>
 400cb24:	d9001617 	ldw	r4,88(sp)
 400cb28:	900b883a 	mov	r5,r18
 400cb2c:	01800144 	movi	r6,5
 400cb30:	000f883a 	mov	r7,zero
 400cb34:	400ef800 	call	400ef80 <__multadd>
 400cb38:	d9000717 	ldw	r4,28(sp)
 400cb3c:	100b883a 	mov	r5,r2
 400cb40:	1025883a 	mov	r18,r2
 400cb44:	400e4280 	call	400e428 <__mcmp>
 400cb48:	00bcf10e 	bge	zero,r2,400bf10 <_dtoa_r+0x560>
 400cb4c:	d8c00d17 	ldw	r3,52(sp)
 400cb50:	d9000517 	ldw	r4,20(sp)
 400cb54:	d8000615 	stw	zero,24(sp)
 400cb58:	18c00044 	addi	r3,r3,1
 400cb5c:	d8c00d15 	stw	r3,52(sp)
 400cb60:	00800c44 	movi	r2,49
 400cb64:	27000044 	addi	fp,r4,1
 400cb68:	20800005 	stb	r2,0(r4)
 400cb6c:	003e8906 	br	400c594 <_dtoa_r+0xbe4>
 400cb70:	d8c00517 	ldw	r3,20(sp)
 400cb74:	003bc206 	br	400ba80 <_dtoa_r+0xd0>
 400cb78:	018100f4 	movhi	r6,1027
 400cb7c:	31b80204 	addi	r6,r6,-8184
 400cb80:	30c00917 	ldw	r3,36(r6)
 400cb84:	30800817 	ldw	r2,32(r6)
 400cb88:	d9001217 	ldw	r4,72(sp)
 400cb8c:	d9401317 	ldw	r5,76(sp)
 400cb90:	180f883a 	mov	r7,r3
 400cb94:	100d883a 	mov	r6,r2
 400cb98:	4007df80 	call	4007df8 <__divdf3>
 400cb9c:	948003cc 	andi	r18,r18,15
 400cba0:	058000c4 	movi	r22,3
 400cba4:	1029883a 	mov	r20,r2
 400cba8:	182b883a 	mov	r21,r3
 400cbac:	003c8906 	br	400bdd4 <_dtoa_r+0x424>
 400cbb0:	d9001017 	ldw	r4,64(sp)
 400cbb4:	d9800917 	ldw	r6,36(sp)
 400cbb8:	0025883a 	mov	r18,zero
 400cbbc:	1105c83a 	sub	r2,r2,r4
 400cbc0:	2089883a 	add	r4,r4,r2
 400cbc4:	308d883a 	add	r6,r6,r2
 400cbc8:	d9001015 	stw	r4,64(sp)
 400cbcc:	d9800915 	stw	r6,36(sp)
 400cbd0:	003e3206 	br	400c49c <_dtoa_r+0xaec>
 400cbd4:	28800044 	addi	r2,r5,1
 400cbd8:	27000044 	addi	fp,r4,1
 400cbdc:	20800005 	stb	r2,0(r4)
 400cbe0:	003e6c06 	br	400c594 <_dtoa_r+0xbe4>
 400cbe4:	d8800f17 	ldw	r2,60(sp)
 400cbe8:	00bce016 	blt	zero,r2,400bf6c <_dtoa_r+0x5bc>
 400cbec:	d9800f17 	ldw	r6,60(sp)
 400cbf0:	303cc51e 	bne	r6,zero,400bf08 <_dtoa_r+0x558>
 400cbf4:	0005883a 	mov	r2,zero
 400cbf8:	00d00534 	movhi	r3,16404
 400cbfc:	980b883a 	mov	r5,r19
 400cc00:	180f883a 	mov	r7,r3
 400cc04:	9009883a 	mov	r4,r18
 400cc08:	100d883a 	mov	r6,r2
 400cc0c:	4007a340 	call	4007a34 <__muldf3>
 400cc10:	180b883a 	mov	r5,r3
 400cc14:	a80f883a 	mov	r7,r21
 400cc18:	1009883a 	mov	r4,r2
 400cc1c:	a00d883a 	mov	r6,r20
 400cc20:	4010cb40 	call	4010cb4 <__gedf2>
 400cc24:	103cb80e 	bge	r2,zero,400bf08 <_dtoa_r+0x558>
 400cc28:	0027883a 	mov	r19,zero
 400cc2c:	0025883a 	mov	r18,zero
 400cc30:	003fc606 	br	400cb4c <_dtoa_r+0x119c>
 400cc34:	99400117 	ldw	r5,4(r19)
 400cc38:	d9001617 	ldw	r4,88(sp)
 400cc3c:	400e84c0 	call	400e84c <_Balloc>
 400cc40:	99800417 	ldw	r6,16(r19)
 400cc44:	11000304 	addi	r4,r2,12
 400cc48:	99400304 	addi	r5,r19,12
 400cc4c:	318d883a 	add	r6,r6,r6
 400cc50:	318d883a 	add	r6,r6,r6
 400cc54:	31800204 	addi	r6,r6,8
 400cc58:	1023883a 	mov	r17,r2
 400cc5c:	40091980 	call	4009198 <memcpy>
 400cc60:	d9001617 	ldw	r4,88(sp)
 400cc64:	880b883a 	mov	r5,r17
 400cc68:	01800044 	movi	r6,1
 400cc6c:	400ec100 	call	400ec10 <__lshift>
 400cc70:	100b883a 	mov	r5,r2
 400cc74:	003d9c06 	br	400c2e8 <_dtoa_r+0x938>
 400cc78:	00800e44 	movi	r2,57
 400cc7c:	b8807026 	beq	r23,r2,400ce40 <_dtoa_r+0x1490>
 400cc80:	b8800044 	addi	r2,r23,1
 400cc84:	b7000044 	addi	fp,r22,1
 400cc88:	b0800005 	stb	r2,0(r22)
 400cc8c:	003e4106 	br	400c594 <_dtoa_r+0xbe4>
 400cc90:	d8800317 	ldw	r2,12(sp)
 400cc94:	018100f4 	movhi	r6,1027
 400cc98:	31b7d004 	addi	r6,r6,-8384
 400cc9c:	b009883a 	mov	r4,r22
 400cca0:	100e90fa 	slli	r7,r2,3
 400cca4:	b80b883a 	mov	r5,r23
 400cca8:	398f883a 	add	r7,r7,r6
 400ccac:	38bffe17 	ldw	r2,-8(r7)
 400ccb0:	d9800517 	ldw	r6,20(sp)
 400ccb4:	38ffff17 	ldw	r3,-4(r7)
 400ccb8:	37000044 	addi	fp,r6,1
 400ccbc:	180f883a 	mov	r7,r3
 400ccc0:	100d883a 	mov	r6,r2
 400ccc4:	4007a340 	call	4007a34 <__muldf3>
 400ccc8:	a80b883a 	mov	r5,r21
 400cccc:	a009883a 	mov	r4,r20
 400ccd0:	182f883a 	mov	r23,r3
 400ccd4:	102d883a 	mov	r22,r2
 400ccd8:	40081d00 	call	40081d0 <__fixdfsi>
 400ccdc:	1009883a 	mov	r4,r2
 400cce0:	1027883a 	mov	r19,r2
 400cce4:	40080d80 	call	40080d8 <__floatsidf>
 400cce8:	a80b883a 	mov	r5,r21
 400ccec:	a009883a 	mov	r4,r20
 400ccf0:	180f883a 	mov	r7,r3
 400ccf4:	100d883a 	mov	r6,r2
 400ccf8:	40079400 	call	4007940 <__subdf3>
 400ccfc:	180b883a 	mov	r5,r3
 400cd00:	d8c00517 	ldw	r3,20(sp)
 400cd04:	9cc00c04 	addi	r19,r19,48
 400cd08:	1009883a 	mov	r4,r2
 400cd0c:	1cc00005 	stb	r19,0(r3)
 400cd10:	2021883a 	mov	r16,r4
 400cd14:	d9000317 	ldw	r4,12(sp)
 400cd18:	00800044 	movi	r2,1
 400cd1c:	2823883a 	mov	r17,r5
 400cd20:	20802226 	beq	r4,r2,400cdac <_dtoa_r+0x13fc>
 400cd24:	1029883a 	mov	r20,r2
 400cd28:	0005883a 	mov	r2,zero
 400cd2c:	00d00934 	movhi	r3,16420
 400cd30:	180f883a 	mov	r7,r3
 400cd34:	100d883a 	mov	r6,r2
 400cd38:	880b883a 	mov	r5,r17
 400cd3c:	8009883a 	mov	r4,r16
 400cd40:	4007a340 	call	4007a34 <__muldf3>
 400cd44:	180b883a 	mov	r5,r3
 400cd48:	1009883a 	mov	r4,r2
 400cd4c:	1823883a 	mov	r17,r3
 400cd50:	1021883a 	mov	r16,r2
 400cd54:	40081d00 	call	40081d0 <__fixdfsi>
 400cd58:	1009883a 	mov	r4,r2
 400cd5c:	102b883a 	mov	r21,r2
 400cd60:	40080d80 	call	40080d8 <__floatsidf>
 400cd64:	880b883a 	mov	r5,r17
 400cd68:	8009883a 	mov	r4,r16
 400cd6c:	180f883a 	mov	r7,r3
 400cd70:	100d883a 	mov	r6,r2
 400cd74:	40079400 	call	4007940 <__subdf3>
 400cd78:	180b883a 	mov	r5,r3
 400cd7c:	d8c00517 	ldw	r3,20(sp)
 400cd80:	1009883a 	mov	r4,r2
 400cd84:	ad400c04 	addi	r21,r21,48
 400cd88:	1d05883a 	add	r2,r3,r20
 400cd8c:	15400005 	stb	r21,0(r2)
 400cd90:	2021883a 	mov	r16,r4
 400cd94:	d9000317 	ldw	r4,12(sp)
 400cd98:	a5000044 	addi	r20,r20,1
 400cd9c:	2823883a 	mov	r17,r5
 400cda0:	a13fe11e 	bne	r20,r4,400cd28 <_dtoa_r+0x1378>
 400cda4:	e505883a 	add	r2,fp,r20
 400cda8:	173fffc4 	addi	fp,r2,-1
 400cdac:	0025883a 	mov	r18,zero
 400cdb0:	04cff834 	movhi	r19,16352
 400cdb4:	b009883a 	mov	r4,r22
 400cdb8:	b80b883a 	mov	r5,r23
 400cdbc:	900d883a 	mov	r6,r18
 400cdc0:	980f883a 	mov	r7,r19
 400cdc4:	40079c00 	call	40079c0 <__adddf3>
 400cdc8:	180b883a 	mov	r5,r3
 400cdcc:	1009883a 	mov	r4,r2
 400cdd0:	800d883a 	mov	r6,r16
 400cdd4:	880f883a 	mov	r7,r17
 400cdd8:	40080500 	call	4008050 <__ltdf2>
 400cddc:	103cab16 	blt	r2,zero,400c08c <_dtoa_r+0x6dc>
 400cde0:	0009883a 	mov	r4,zero
 400cde4:	980b883a 	mov	r5,r19
 400cde8:	b80f883a 	mov	r7,r23
 400cdec:	b00d883a 	mov	r6,r22
 400cdf0:	40079400 	call	4007940 <__subdf3>
 400cdf4:	180b883a 	mov	r5,r3
 400cdf8:	880f883a 	mov	r7,r17
 400cdfc:	1009883a 	mov	r4,r2
 400ce00:	800d883a 	mov	r6,r16
 400ce04:	4010c2c0 	call	4010c2c <__gtdf2>
 400ce08:	00bc470e 	bge	zero,r2,400bf28 <_dtoa_r+0x578>
 400ce0c:	00c00c04 	movi	r3,48
 400ce10:	e73fffc4 	addi	fp,fp,-1
 400ce14:	e0800007 	ldb	r2,0(fp)
 400ce18:	10fffd26 	beq	r2,r3,400ce10 <_dtoa_r+0x1460>
 400ce1c:	d9800417 	ldw	r6,16(sp)
 400ce20:	e7000044 	addi	fp,fp,1
 400ce24:	d9800d15 	stw	r6,52(sp)
 400ce28:	003cab06 	br	400c0d8 <_dtoa_r+0x728>
 400ce2c:	d8c00f17 	ldw	r3,60(sp)
 400ce30:	d9001117 	ldw	r4,68(sp)
 400ce34:	20e1c83a 	sub	r16,r4,r3
 400ce38:	0007883a 	mov	r3,zero
 400ce3c:	003d9b06 	br	400c4ac <_dtoa_r+0xafc>
 400ce40:	00800e44 	movi	r2,57
 400ce44:	b0800005 	stb	r2,0(r22)
 400ce48:	b5800044 	addi	r22,r22,1
 400ce4c:	003dc106 	br	400c554 <_dtoa_r+0xba4>
 400ce50:	05800084 	movi	r22,2
 400ce54:	003bf706 	br	400be34 <_dtoa_r+0x484>
 400ce58:	d9000f17 	ldw	r4,60(sp)
 400ce5c:	013c000e 	bge	zero,r4,400be60 <_dtoa_r+0x4b0>
 400ce60:	d9800e17 	ldw	r6,56(sp)
 400ce64:	01bc300e 	bge	zero,r6,400bf28 <_dtoa_r+0x578>
 400ce68:	0005883a 	mov	r2,zero
 400ce6c:	00d00934 	movhi	r3,16420
 400ce70:	a80b883a 	mov	r5,r21
 400ce74:	180f883a 	mov	r7,r3
 400ce78:	a009883a 	mov	r4,r20
 400ce7c:	100d883a 	mov	r6,r2
 400ce80:	4007a340 	call	4007a34 <__muldf3>
 400ce84:	b1000044 	addi	r4,r22,1
 400ce88:	1021883a 	mov	r16,r2
 400ce8c:	1823883a 	mov	r17,r3
 400ce90:	40080d80 	call	40080d8 <__floatsidf>
 400ce94:	880b883a 	mov	r5,r17
 400ce98:	8009883a 	mov	r4,r16
 400ce9c:	180f883a 	mov	r7,r3
 400cea0:	100d883a 	mov	r6,r2
 400cea4:	4007a340 	call	4007a34 <__muldf3>
 400cea8:	0011883a 	mov	r8,zero
 400ceac:	02500734 	movhi	r9,16412
 400ceb0:	180b883a 	mov	r5,r3
 400ceb4:	480f883a 	mov	r7,r9
 400ceb8:	1009883a 	mov	r4,r2
 400cebc:	400d883a 	mov	r6,r8
 400cec0:	40079c00 	call	40079c0 <__adddf3>
 400cec4:	102d883a 	mov	r22,r2
 400cec8:	00bf3034 	movhi	r2,64704
 400cecc:	10ef883a 	add	r23,r2,r3
 400ced0:	d8800d17 	ldw	r2,52(sp)
 400ced4:	d8c00e17 	ldw	r3,56(sp)
 400ced8:	8029883a 	mov	r20,r16
 400cedc:	10bfffc4 	addi	r2,r2,-1
 400cee0:	882b883a 	mov	r21,r17
 400cee4:	d8800415 	stw	r2,16(sp)
 400cee8:	d8c00315 	stw	r3,12(sp)
 400ceec:	003e8306 	br	400c8fc <_dtoa_r+0xf4c>
 400cef0:	d8800117 	ldw	r2,4(sp)
 400cef4:	dc001117 	ldw	r16,68(sp)
 400cef8:	dc801017 	ldw	r18,64(sp)
 400cefc:	00c00d84 	movi	r3,54
 400cf00:	1887c83a 	sub	r3,r3,r2
 400cf04:	003d6906 	br	400c4ac <_dtoa_r+0xafc>
 400cf08:	01800044 	movi	r6,1
 400cf0c:	3021883a 	mov	r16,r6
 400cf10:	d9800f15 	stw	r6,60(sp)
 400cf14:	d9802615 	stw	r6,152(sp)
 400cf18:	d9800e15 	stw	r6,56(sp)
 400cf1c:	003b9306 	br	400bd6c <_dtoa_r+0x3bc>
 400cf20:	b021883a 	mov	r16,r22
 400cf24:	dd800f15 	stw	r22,60(sp)
 400cf28:	003b9006 	br	400bd6c <_dtoa_r+0x3bc>
 400cf2c:	103e221e 	bne	r2,zero,400c7b8 <_dtoa_r+0xe08>
 400cf30:	b880004c 	andi	r2,r23,1
 400cf34:	1005003a 	cmpeq	r2,r2,zero
 400cf38:	103e1f1e 	bne	r2,zero,400c7b8 <_dtoa_r+0xe08>
 400cf3c:	003e1b06 	br	400c7ac <_dtoa_r+0xdfc>
 400cf40:	d9001617 	ldw	r4,88(sp)
 400cf44:	980b883a 	mov	r5,r19
 400cf48:	01800284 	movi	r6,10
 400cf4c:	000f883a 	mov	r7,zero
 400cf50:	400ef800 	call	400ef80 <__multadd>
 400cf54:	d8c00e17 	ldw	r3,56(sp)
 400cf58:	1027883a 	mov	r19,r2
 400cf5c:	d8c00f15 	stw	r3,60(sp)
 400cf60:	003cd306 	br	400c2b0 <_dtoa_r+0x900>

0400cf64 <_fflush_r>:
 400cf64:	defffb04 	addi	sp,sp,-20
 400cf68:	dcc00315 	stw	r19,12(sp)
 400cf6c:	dc800215 	stw	r18,8(sp)
 400cf70:	dfc00415 	stw	ra,16(sp)
 400cf74:	dc400115 	stw	r17,4(sp)
 400cf78:	dc000015 	stw	r16,0(sp)
 400cf7c:	2027883a 	mov	r19,r4
 400cf80:	2825883a 	mov	r18,r5
 400cf84:	20000226 	beq	r4,zero,400cf90 <_fflush_r+0x2c>
 400cf88:	20800e17 	ldw	r2,56(r4)
 400cf8c:	10005626 	beq	r2,zero,400d0e8 <_fflush_r+0x184>
 400cf90:	9100030b 	ldhu	r4,12(r18)
 400cf94:	20ffffcc 	andi	r3,r4,65535
 400cf98:	18e0001c 	xori	r3,r3,32768
 400cf9c:	18e00004 	addi	r3,r3,-32768
 400cfa0:	1880020c 	andi	r2,r3,8
 400cfa4:	1000261e 	bne	r2,zero,400d040 <_fflush_r+0xdc>
 400cfa8:	90c00117 	ldw	r3,4(r18)
 400cfac:	20820014 	ori	r2,r4,2048
 400cfb0:	9080030d 	sth	r2,12(r18)
 400cfb4:	1009883a 	mov	r4,r2
 400cfb8:	00c0400e 	bge	zero,r3,400d0bc <_fflush_r+0x158>
 400cfbc:	92000a17 	ldw	r8,40(r18)
 400cfc0:	40004026 	beq	r8,zero,400d0c4 <_fflush_r+0x160>
 400cfc4:	2084000c 	andi	r2,r4,4096
 400cfc8:	10005326 	beq	r2,zero,400d118 <_fflush_r+0x1b4>
 400cfcc:	94001417 	ldw	r16,80(r18)
 400cfd0:	9080030b 	ldhu	r2,12(r18)
 400cfd4:	1080010c 	andi	r2,r2,4
 400cfd8:	1000481e 	bne	r2,zero,400d0fc <_fflush_r+0x198>
 400cfdc:	91400717 	ldw	r5,28(r18)
 400cfe0:	9809883a 	mov	r4,r19
 400cfe4:	800d883a 	mov	r6,r16
 400cfe8:	000f883a 	mov	r7,zero
 400cfec:	403ee83a 	callr	r8
 400cff0:	8080261e 	bne	r16,r2,400d08c <_fflush_r+0x128>
 400cff4:	9080030b 	ldhu	r2,12(r18)
 400cff8:	91000417 	ldw	r4,16(r18)
 400cffc:	90000115 	stw	zero,4(r18)
 400d000:	10bdffcc 	andi	r2,r2,63487
 400d004:	10ffffcc 	andi	r3,r2,65535
 400d008:	18c4000c 	andi	r3,r3,4096
 400d00c:	9080030d 	sth	r2,12(r18)
 400d010:	91000015 	stw	r4,0(r18)
 400d014:	18002b26 	beq	r3,zero,400d0c4 <_fflush_r+0x160>
 400d018:	0007883a 	mov	r3,zero
 400d01c:	1805883a 	mov	r2,r3
 400d020:	94001415 	stw	r16,80(r18)
 400d024:	dfc00417 	ldw	ra,16(sp)
 400d028:	dcc00317 	ldw	r19,12(sp)
 400d02c:	dc800217 	ldw	r18,8(sp)
 400d030:	dc400117 	ldw	r17,4(sp)
 400d034:	dc000017 	ldw	r16,0(sp)
 400d038:	dec00504 	addi	sp,sp,20
 400d03c:	f800283a 	ret
 400d040:	94400417 	ldw	r17,16(r18)
 400d044:	88001f26 	beq	r17,zero,400d0c4 <_fflush_r+0x160>
 400d048:	90800017 	ldw	r2,0(r18)
 400d04c:	18c000cc 	andi	r3,r3,3
 400d050:	94400015 	stw	r17,0(r18)
 400d054:	1461c83a 	sub	r16,r2,r17
 400d058:	18002526 	beq	r3,zero,400d0f0 <_fflush_r+0x18c>
 400d05c:	0005883a 	mov	r2,zero
 400d060:	90800215 	stw	r2,8(r18)
 400d064:	0400170e 	bge	zero,r16,400d0c4 <_fflush_r+0x160>
 400d068:	90c00917 	ldw	r3,36(r18)
 400d06c:	91400717 	ldw	r5,28(r18)
 400d070:	880d883a 	mov	r6,r17
 400d074:	800f883a 	mov	r7,r16
 400d078:	9809883a 	mov	r4,r19
 400d07c:	183ee83a 	callr	r3
 400d080:	88a3883a 	add	r17,r17,r2
 400d084:	80a1c83a 	sub	r16,r16,r2
 400d088:	00bff616 	blt	zero,r2,400d064 <_fflush_r+0x100>
 400d08c:	9080030b 	ldhu	r2,12(r18)
 400d090:	00ffffc4 	movi	r3,-1
 400d094:	10801014 	ori	r2,r2,64
 400d098:	9080030d 	sth	r2,12(r18)
 400d09c:	1805883a 	mov	r2,r3
 400d0a0:	dfc00417 	ldw	ra,16(sp)
 400d0a4:	dcc00317 	ldw	r19,12(sp)
 400d0a8:	dc800217 	ldw	r18,8(sp)
 400d0ac:	dc400117 	ldw	r17,4(sp)
 400d0b0:	dc000017 	ldw	r16,0(sp)
 400d0b4:	dec00504 	addi	sp,sp,20
 400d0b8:	f800283a 	ret
 400d0bc:	90800f17 	ldw	r2,60(r18)
 400d0c0:	00bfbe16 	blt	zero,r2,400cfbc <_fflush_r+0x58>
 400d0c4:	0007883a 	mov	r3,zero
 400d0c8:	1805883a 	mov	r2,r3
 400d0cc:	dfc00417 	ldw	ra,16(sp)
 400d0d0:	dcc00317 	ldw	r19,12(sp)
 400d0d4:	dc800217 	ldw	r18,8(sp)
 400d0d8:	dc400117 	ldw	r17,4(sp)
 400d0dc:	dc000017 	ldw	r16,0(sp)
 400d0e0:	dec00504 	addi	sp,sp,20
 400d0e4:	f800283a 	ret
 400d0e8:	400d1fc0 	call	400d1fc <__sinit>
 400d0ec:	003fa806 	br	400cf90 <_fflush_r+0x2c>
 400d0f0:	90800517 	ldw	r2,20(r18)
 400d0f4:	90800215 	stw	r2,8(r18)
 400d0f8:	003fda06 	br	400d064 <_fflush_r+0x100>
 400d0fc:	90800117 	ldw	r2,4(r18)
 400d100:	90c00c17 	ldw	r3,48(r18)
 400d104:	80a1c83a 	sub	r16,r16,r2
 400d108:	183fb426 	beq	r3,zero,400cfdc <_fflush_r+0x78>
 400d10c:	90800f17 	ldw	r2,60(r18)
 400d110:	80a1c83a 	sub	r16,r16,r2
 400d114:	003fb106 	br	400cfdc <_fflush_r+0x78>
 400d118:	91400717 	ldw	r5,28(r18)
 400d11c:	9809883a 	mov	r4,r19
 400d120:	000d883a 	mov	r6,zero
 400d124:	01c00044 	movi	r7,1
 400d128:	403ee83a 	callr	r8
 400d12c:	1021883a 	mov	r16,r2
 400d130:	00bfffc4 	movi	r2,-1
 400d134:	80800226 	beq	r16,r2,400d140 <_fflush_r+0x1dc>
 400d138:	92000a17 	ldw	r8,40(r18)
 400d13c:	003fa406 	br	400cfd0 <_fflush_r+0x6c>
 400d140:	98c00017 	ldw	r3,0(r19)
 400d144:	00800744 	movi	r2,29
 400d148:	18bfde26 	beq	r3,r2,400d0c4 <_fflush_r+0x160>
 400d14c:	9080030b 	ldhu	r2,12(r18)
 400d150:	8007883a 	mov	r3,r16
 400d154:	10801014 	ori	r2,r2,64
 400d158:	9080030d 	sth	r2,12(r18)
 400d15c:	003fcf06 	br	400d09c <_fflush_r+0x138>

0400d160 <fflush>:
 400d160:	01410074 	movhi	r5,1025
 400d164:	2973d904 	addi	r5,r5,-12444
 400d168:	2007883a 	mov	r3,r4
 400d16c:	20000526 	beq	r4,zero,400d184 <fflush+0x24>
 400d170:	008100f4 	movhi	r2,1027
 400d174:	10859904 	addi	r2,r2,5732
 400d178:	11000017 	ldw	r4,0(r2)
 400d17c:	180b883a 	mov	r5,r3
 400d180:	400cf641 	jmpi	400cf64 <_fflush_r>
 400d184:	008100f4 	movhi	r2,1027
 400d188:	10859a04 	addi	r2,r2,5736
 400d18c:	11000017 	ldw	r4,0(r2)
 400d190:	400dd301 	jmpi	400dd30 <_fwalk_reent>

0400d194 <std>:
 400d194:	00810074 	movhi	r2,1025
 400d198:	10be3d04 	addi	r2,r2,-1804
 400d19c:	20800b15 	stw	r2,44(r4)
 400d1a0:	00810074 	movhi	r2,1025
 400d1a4:	10be7804 	addi	r2,r2,-1568
 400d1a8:	20800815 	stw	r2,32(r4)
 400d1ac:	00c10074 	movhi	r3,1025
 400d1b0:	18fe5904 	addi	r3,r3,-1692
 400d1b4:	00810074 	movhi	r2,1025
 400d1b8:	10be3f04 	addi	r2,r2,-1796
 400d1bc:	2140030d 	sth	r5,12(r4)
 400d1c0:	2180038d 	sth	r6,14(r4)
 400d1c4:	20c00915 	stw	r3,36(r4)
 400d1c8:	20800a15 	stw	r2,40(r4)
 400d1cc:	20000015 	stw	zero,0(r4)
 400d1d0:	20000115 	stw	zero,4(r4)
 400d1d4:	20000215 	stw	zero,8(r4)
 400d1d8:	20000415 	stw	zero,16(r4)
 400d1dc:	20000515 	stw	zero,20(r4)
 400d1e0:	20000615 	stw	zero,24(r4)
 400d1e4:	21000715 	stw	r4,28(r4)
 400d1e8:	f800283a 	ret

0400d1ec <__sfp_lock_acquire>:
 400d1ec:	f800283a 	ret

0400d1f0 <__sfp_lock_release>:
 400d1f0:	f800283a 	ret

0400d1f4 <__sinit_lock_acquire>:
 400d1f4:	f800283a 	ret

0400d1f8 <__sinit_lock_release>:
 400d1f8:	f800283a 	ret

0400d1fc <__sinit>:
 400d1fc:	20800e17 	ldw	r2,56(r4)
 400d200:	defffd04 	addi	sp,sp,-12
 400d204:	dc400115 	stw	r17,4(sp)
 400d208:	dc000015 	stw	r16,0(sp)
 400d20c:	dfc00215 	stw	ra,8(sp)
 400d210:	04400044 	movi	r17,1
 400d214:	01400104 	movi	r5,4
 400d218:	000d883a 	mov	r6,zero
 400d21c:	2021883a 	mov	r16,r4
 400d220:	2200bb04 	addi	r8,r4,748
 400d224:	200f883a 	mov	r7,r4
 400d228:	10000526 	beq	r2,zero,400d240 <__sinit+0x44>
 400d22c:	dfc00217 	ldw	ra,8(sp)
 400d230:	dc400117 	ldw	r17,4(sp)
 400d234:	dc000017 	ldw	r16,0(sp)
 400d238:	dec00304 	addi	sp,sp,12
 400d23c:	f800283a 	ret
 400d240:	21000117 	ldw	r4,4(r4)
 400d244:	00810074 	movhi	r2,1025
 400d248:	10b4b804 	addi	r2,r2,-11552
 400d24c:	00c000c4 	movi	r3,3
 400d250:	80800f15 	stw	r2,60(r16)
 400d254:	80c0b915 	stw	r3,740(r16)
 400d258:	8200ba15 	stw	r8,744(r16)
 400d25c:	84400e15 	stw	r17,56(r16)
 400d260:	8000b815 	stw	zero,736(r16)
 400d264:	400d1940 	call	400d194 <std>
 400d268:	81000217 	ldw	r4,8(r16)
 400d26c:	880d883a 	mov	r6,r17
 400d270:	800f883a 	mov	r7,r16
 400d274:	01400284 	movi	r5,10
 400d278:	400d1940 	call	400d194 <std>
 400d27c:	81000317 	ldw	r4,12(r16)
 400d280:	800f883a 	mov	r7,r16
 400d284:	01400484 	movi	r5,18
 400d288:	01800084 	movi	r6,2
 400d28c:	dfc00217 	ldw	ra,8(sp)
 400d290:	dc400117 	ldw	r17,4(sp)
 400d294:	dc000017 	ldw	r16,0(sp)
 400d298:	dec00304 	addi	sp,sp,12
 400d29c:	400d1941 	jmpi	400d194 <std>

0400d2a0 <__fp_lock>:
 400d2a0:	0005883a 	mov	r2,zero
 400d2a4:	f800283a 	ret

0400d2a8 <__fp_unlock>:
 400d2a8:	0005883a 	mov	r2,zero
 400d2ac:	f800283a 	ret

0400d2b0 <__fp_unlock_all>:
 400d2b0:	008100f4 	movhi	r2,1027
 400d2b4:	10859904 	addi	r2,r2,5732
 400d2b8:	11000017 	ldw	r4,0(r2)
 400d2bc:	01410074 	movhi	r5,1025
 400d2c0:	2974aa04 	addi	r5,r5,-11608
 400d2c4:	400ddf81 	jmpi	400ddf8 <_fwalk>

0400d2c8 <__fp_lock_all>:
 400d2c8:	008100f4 	movhi	r2,1027
 400d2cc:	10859904 	addi	r2,r2,5732
 400d2d0:	11000017 	ldw	r4,0(r2)
 400d2d4:	01410074 	movhi	r5,1025
 400d2d8:	2974a804 	addi	r5,r5,-11616
 400d2dc:	400ddf81 	jmpi	400ddf8 <_fwalk>

0400d2e0 <_cleanup_r>:
 400d2e0:	01410074 	movhi	r5,1025
 400d2e4:	297f6a04 	addi	r5,r5,-600
 400d2e8:	400ddf81 	jmpi	400ddf8 <_fwalk>

0400d2ec <_cleanup>:
 400d2ec:	008100f4 	movhi	r2,1027
 400d2f0:	10859a04 	addi	r2,r2,5736
 400d2f4:	11000017 	ldw	r4,0(r2)
 400d2f8:	400d2e01 	jmpi	400d2e0 <_cleanup_r>

0400d2fc <__sfmoreglue>:
 400d2fc:	defffc04 	addi	sp,sp,-16
 400d300:	dc400115 	stw	r17,4(sp)
 400d304:	2c401724 	muli	r17,r5,92
 400d308:	dc800215 	stw	r18,8(sp)
 400d30c:	2825883a 	mov	r18,r5
 400d310:	89400304 	addi	r5,r17,12
 400d314:	dc000015 	stw	r16,0(sp)
 400d318:	dfc00315 	stw	ra,12(sp)
 400d31c:	4008a580 	call	4008a58 <_malloc_r>
 400d320:	0021883a 	mov	r16,zero
 400d324:	880d883a 	mov	r6,r17
 400d328:	000b883a 	mov	r5,zero
 400d32c:	10000626 	beq	r2,zero,400d348 <__sfmoreglue+0x4c>
 400d330:	11000304 	addi	r4,r2,12
 400d334:	14800115 	stw	r18,4(r2)
 400d338:	10000015 	stw	zero,0(r2)
 400d33c:	11000215 	stw	r4,8(r2)
 400d340:	1021883a 	mov	r16,r2
 400d344:	40092380 	call	4009238 <memset>
 400d348:	8005883a 	mov	r2,r16
 400d34c:	dfc00317 	ldw	ra,12(sp)
 400d350:	dc800217 	ldw	r18,8(sp)
 400d354:	dc400117 	ldw	r17,4(sp)
 400d358:	dc000017 	ldw	r16,0(sp)
 400d35c:	dec00404 	addi	sp,sp,16
 400d360:	f800283a 	ret

0400d364 <__sfp>:
 400d364:	defffd04 	addi	sp,sp,-12
 400d368:	008100f4 	movhi	r2,1027
 400d36c:	10859a04 	addi	r2,r2,5736
 400d370:	dc000015 	stw	r16,0(sp)
 400d374:	14000017 	ldw	r16,0(r2)
 400d378:	dc400115 	stw	r17,4(sp)
 400d37c:	dfc00215 	stw	ra,8(sp)
 400d380:	80800e17 	ldw	r2,56(r16)
 400d384:	2023883a 	mov	r17,r4
 400d388:	10002626 	beq	r2,zero,400d424 <__sfp+0xc0>
 400d38c:	8400b804 	addi	r16,r16,736
 400d390:	80800117 	ldw	r2,4(r16)
 400d394:	81000217 	ldw	r4,8(r16)
 400d398:	10ffffc4 	addi	r3,r2,-1
 400d39c:	18000916 	blt	r3,zero,400d3c4 <__sfp+0x60>
 400d3a0:	2080030f 	ldh	r2,12(r4)
 400d3a4:	10000b26 	beq	r2,zero,400d3d4 <__sfp+0x70>
 400d3a8:	017fffc4 	movi	r5,-1
 400d3ac:	00000206 	br	400d3b8 <__sfp+0x54>
 400d3b0:	2080030f 	ldh	r2,12(r4)
 400d3b4:	10000726 	beq	r2,zero,400d3d4 <__sfp+0x70>
 400d3b8:	18ffffc4 	addi	r3,r3,-1
 400d3bc:	21001704 	addi	r4,r4,92
 400d3c0:	197ffb1e 	bne	r3,r5,400d3b0 <__sfp+0x4c>
 400d3c4:	80800017 	ldw	r2,0(r16)
 400d3c8:	10001926 	beq	r2,zero,400d430 <__sfp+0xcc>
 400d3cc:	1021883a 	mov	r16,r2
 400d3d0:	003fef06 	br	400d390 <__sfp+0x2c>
 400d3d4:	00bfffc4 	movi	r2,-1
 400d3d8:	00c00044 	movi	r3,1
 400d3dc:	2080038d 	sth	r2,14(r4)
 400d3e0:	20c0030d 	sth	r3,12(r4)
 400d3e4:	20000015 	stw	zero,0(r4)
 400d3e8:	20000215 	stw	zero,8(r4)
 400d3ec:	20000115 	stw	zero,4(r4)
 400d3f0:	20000415 	stw	zero,16(r4)
 400d3f4:	20000515 	stw	zero,20(r4)
 400d3f8:	20000615 	stw	zero,24(r4)
 400d3fc:	20000c15 	stw	zero,48(r4)
 400d400:	20000d15 	stw	zero,52(r4)
 400d404:	20001115 	stw	zero,68(r4)
 400d408:	20001215 	stw	zero,72(r4)
 400d40c:	2005883a 	mov	r2,r4
 400d410:	dfc00217 	ldw	ra,8(sp)
 400d414:	dc400117 	ldw	r17,4(sp)
 400d418:	dc000017 	ldw	r16,0(sp)
 400d41c:	dec00304 	addi	sp,sp,12
 400d420:	f800283a 	ret
 400d424:	8009883a 	mov	r4,r16
 400d428:	400d1fc0 	call	400d1fc <__sinit>
 400d42c:	003fd706 	br	400d38c <__sfp+0x28>
 400d430:	8809883a 	mov	r4,r17
 400d434:	01400104 	movi	r5,4
 400d438:	400d2fc0 	call	400d2fc <__sfmoreglue>
 400d43c:	80800015 	stw	r2,0(r16)
 400d440:	103fe21e 	bne	r2,zero,400d3cc <__sfp+0x68>
 400d444:	00800304 	movi	r2,12
 400d448:	0009883a 	mov	r4,zero
 400d44c:	88800015 	stw	r2,0(r17)
 400d450:	003fee06 	br	400d40c <__sfp+0xa8>

0400d454 <_malloc_trim_r>:
 400d454:	defffb04 	addi	sp,sp,-20
 400d458:	dcc00315 	stw	r19,12(sp)
 400d45c:	04c100f4 	movhi	r19,1027
 400d460:	9cc00f04 	addi	r19,r19,60
 400d464:	dc800215 	stw	r18,8(sp)
 400d468:	dc400115 	stw	r17,4(sp)
 400d46c:	dc000015 	stw	r16,0(sp)
 400d470:	2823883a 	mov	r17,r5
 400d474:	2025883a 	mov	r18,r4
 400d478:	dfc00415 	stw	ra,16(sp)
 400d47c:	40119740 	call	4011974 <__malloc_lock>
 400d480:	98800217 	ldw	r2,8(r19)
 400d484:	9009883a 	mov	r4,r18
 400d488:	000b883a 	mov	r5,zero
 400d48c:	10c00117 	ldw	r3,4(r2)
 400d490:	00bfff04 	movi	r2,-4
 400d494:	18a0703a 	and	r16,r3,r2
 400d498:	8463c83a 	sub	r17,r16,r17
 400d49c:	8c43fbc4 	addi	r17,r17,4079
 400d4a0:	8822d33a 	srli	r17,r17,12
 400d4a4:	0083ffc4 	movi	r2,4095
 400d4a8:	8c7fffc4 	addi	r17,r17,-1
 400d4ac:	8822933a 	slli	r17,r17,12
 400d4b0:	1440060e 	bge	r2,r17,400d4cc <_malloc_trim_r+0x78>
 400d4b4:	40093fc0 	call	40093fc <_sbrk_r>
 400d4b8:	98c00217 	ldw	r3,8(r19)
 400d4bc:	9009883a 	mov	r4,r18
 400d4c0:	044bc83a 	sub	r5,zero,r17
 400d4c4:	80c7883a 	add	r3,r16,r3
 400d4c8:	10c00926 	beq	r2,r3,400d4f0 <_malloc_trim_r+0x9c>
 400d4cc:	40119940 	call	4011994 <__malloc_unlock>
 400d4d0:	0005883a 	mov	r2,zero
 400d4d4:	dfc00417 	ldw	ra,16(sp)
 400d4d8:	dcc00317 	ldw	r19,12(sp)
 400d4dc:	dc800217 	ldw	r18,8(sp)
 400d4e0:	dc400117 	ldw	r17,4(sp)
 400d4e4:	dc000017 	ldw	r16,0(sp)
 400d4e8:	dec00504 	addi	sp,sp,20
 400d4ec:	f800283a 	ret
 400d4f0:	9009883a 	mov	r4,r18
 400d4f4:	40093fc0 	call	40093fc <_sbrk_r>
 400d4f8:	844dc83a 	sub	r6,r16,r17
 400d4fc:	00ffffc4 	movi	r3,-1
 400d500:	9009883a 	mov	r4,r18
 400d504:	000b883a 	mov	r5,zero
 400d508:	01c100f4 	movhi	r7,1027
 400d50c:	39d33c04 	addi	r7,r7,19696
 400d510:	31800054 	ori	r6,r6,1
 400d514:	10c00926 	beq	r2,r3,400d53c <_malloc_trim_r+0xe8>
 400d518:	38800017 	ldw	r2,0(r7)
 400d51c:	98c00217 	ldw	r3,8(r19)
 400d520:	9009883a 	mov	r4,r18
 400d524:	1445c83a 	sub	r2,r2,r17
 400d528:	38800015 	stw	r2,0(r7)
 400d52c:	19800115 	stw	r6,4(r3)
 400d530:	40119940 	call	4011994 <__malloc_unlock>
 400d534:	00800044 	movi	r2,1
 400d538:	003fe606 	br	400d4d4 <_malloc_trim_r+0x80>
 400d53c:	40093fc0 	call	40093fc <_sbrk_r>
 400d540:	99800217 	ldw	r6,8(r19)
 400d544:	100f883a 	mov	r7,r2
 400d548:	9009883a 	mov	r4,r18
 400d54c:	1187c83a 	sub	r3,r2,r6
 400d550:	008003c4 	movi	r2,15
 400d554:	19400054 	ori	r5,r3,1
 400d558:	10ffdc0e 	bge	r2,r3,400d4cc <_malloc_trim_r+0x78>
 400d55c:	008100f4 	movhi	r2,1027
 400d560:	10859c04 	addi	r2,r2,5744
 400d564:	10c00017 	ldw	r3,0(r2)
 400d568:	008100f4 	movhi	r2,1027
 400d56c:	10933c04 	addi	r2,r2,19696
 400d570:	31400115 	stw	r5,4(r6)
 400d574:	38c7c83a 	sub	r3,r7,r3
 400d578:	10c00015 	stw	r3,0(r2)
 400d57c:	003fd306 	br	400d4cc <_malloc_trim_r+0x78>

0400d580 <_free_r>:
 400d580:	defffd04 	addi	sp,sp,-12
 400d584:	dc400115 	stw	r17,4(sp)
 400d588:	dc000015 	stw	r16,0(sp)
 400d58c:	dfc00215 	stw	ra,8(sp)
 400d590:	2821883a 	mov	r16,r5
 400d594:	2023883a 	mov	r17,r4
 400d598:	28005a26 	beq	r5,zero,400d704 <_free_r+0x184>
 400d59c:	40119740 	call	4011974 <__malloc_lock>
 400d5a0:	823ffe04 	addi	r8,r16,-8
 400d5a4:	41400117 	ldw	r5,4(r8)
 400d5a8:	00bfff84 	movi	r2,-2
 400d5ac:	028100f4 	movhi	r10,1027
 400d5b0:	52800f04 	addi	r10,r10,60
 400d5b4:	288e703a 	and	r7,r5,r2
 400d5b8:	41cd883a 	add	r6,r8,r7
 400d5bc:	30c00117 	ldw	r3,4(r6)
 400d5c0:	51000217 	ldw	r4,8(r10)
 400d5c4:	00bfff04 	movi	r2,-4
 400d5c8:	1892703a 	and	r9,r3,r2
 400d5cc:	5017883a 	mov	r11,r10
 400d5d0:	31006726 	beq	r6,r4,400d770 <_free_r+0x1f0>
 400d5d4:	2880004c 	andi	r2,r5,1
 400d5d8:	1005003a 	cmpeq	r2,r2,zero
 400d5dc:	32400115 	stw	r9,4(r6)
 400d5e0:	10001a1e 	bne	r2,zero,400d64c <_free_r+0xcc>
 400d5e4:	000b883a 	mov	r5,zero
 400d5e8:	3247883a 	add	r3,r6,r9
 400d5ec:	18800117 	ldw	r2,4(r3)
 400d5f0:	1080004c 	andi	r2,r2,1
 400d5f4:	1000231e 	bne	r2,zero,400d684 <_free_r+0x104>
 400d5f8:	280ac03a 	cmpne	r5,r5,zero
 400d5fc:	3a4f883a 	add	r7,r7,r9
 400d600:	2800451e 	bne	r5,zero,400d718 <_free_r+0x198>
 400d604:	31000217 	ldw	r4,8(r6)
 400d608:	008100f4 	movhi	r2,1027
 400d60c:	10801104 	addi	r2,r2,68
 400d610:	20807b26 	beq	r4,r2,400d800 <_free_r+0x280>
 400d614:	30800317 	ldw	r2,12(r6)
 400d618:	3a07883a 	add	r3,r7,r8
 400d61c:	19c00015 	stw	r7,0(r3)
 400d620:	11000215 	stw	r4,8(r2)
 400d624:	20800315 	stw	r2,12(r4)
 400d628:	38800054 	ori	r2,r7,1
 400d62c:	40800115 	stw	r2,4(r8)
 400d630:	28001a26 	beq	r5,zero,400d69c <_free_r+0x11c>
 400d634:	8809883a 	mov	r4,r17
 400d638:	dfc00217 	ldw	ra,8(sp)
 400d63c:	dc400117 	ldw	r17,4(sp)
 400d640:	dc000017 	ldw	r16,0(sp)
 400d644:	dec00304 	addi	sp,sp,12
 400d648:	40119941 	jmpi	4011994 <__malloc_unlock>
 400d64c:	80bffe17 	ldw	r2,-8(r16)
 400d650:	50c00204 	addi	r3,r10,8
 400d654:	4091c83a 	sub	r8,r8,r2
 400d658:	41000217 	ldw	r4,8(r8)
 400d65c:	388f883a 	add	r7,r7,r2
 400d660:	20c06126 	beq	r4,r3,400d7e8 <_free_r+0x268>
 400d664:	40800317 	ldw	r2,12(r8)
 400d668:	3247883a 	add	r3,r6,r9
 400d66c:	000b883a 	mov	r5,zero
 400d670:	11000215 	stw	r4,8(r2)
 400d674:	20800315 	stw	r2,12(r4)
 400d678:	18800117 	ldw	r2,4(r3)
 400d67c:	1080004c 	andi	r2,r2,1
 400d680:	103fdd26 	beq	r2,zero,400d5f8 <_free_r+0x78>
 400d684:	38800054 	ori	r2,r7,1
 400d688:	3a07883a 	add	r3,r7,r8
 400d68c:	280ac03a 	cmpne	r5,r5,zero
 400d690:	40800115 	stw	r2,4(r8)
 400d694:	19c00015 	stw	r7,0(r3)
 400d698:	283fe61e 	bne	r5,zero,400d634 <_free_r+0xb4>
 400d69c:	00807fc4 	movi	r2,511
 400d6a0:	11c01f2e 	bgeu	r2,r7,400d720 <_free_r+0x1a0>
 400d6a4:	3806d27a 	srli	r3,r7,9
 400d6a8:	1800481e 	bne	r3,zero,400d7cc <_free_r+0x24c>
 400d6ac:	3804d0fa 	srli	r2,r7,3
 400d6b0:	100690fa 	slli	r3,r2,3
 400d6b4:	1acd883a 	add	r6,r3,r11
 400d6b8:	31400217 	ldw	r5,8(r6)
 400d6bc:	31405926 	beq	r6,r5,400d824 <_free_r+0x2a4>
 400d6c0:	28800117 	ldw	r2,4(r5)
 400d6c4:	00ffff04 	movi	r3,-4
 400d6c8:	10c4703a 	and	r2,r2,r3
 400d6cc:	3880022e 	bgeu	r7,r2,400d6d8 <_free_r+0x158>
 400d6d0:	29400217 	ldw	r5,8(r5)
 400d6d4:	317ffa1e 	bne	r6,r5,400d6c0 <_free_r+0x140>
 400d6d8:	29800317 	ldw	r6,12(r5)
 400d6dc:	41800315 	stw	r6,12(r8)
 400d6e0:	41400215 	stw	r5,8(r8)
 400d6e4:	8809883a 	mov	r4,r17
 400d6e8:	2a000315 	stw	r8,12(r5)
 400d6ec:	32000215 	stw	r8,8(r6)
 400d6f0:	dfc00217 	ldw	ra,8(sp)
 400d6f4:	dc400117 	ldw	r17,4(sp)
 400d6f8:	dc000017 	ldw	r16,0(sp)
 400d6fc:	dec00304 	addi	sp,sp,12
 400d700:	40119941 	jmpi	4011994 <__malloc_unlock>
 400d704:	dfc00217 	ldw	ra,8(sp)
 400d708:	dc400117 	ldw	r17,4(sp)
 400d70c:	dc000017 	ldw	r16,0(sp)
 400d710:	dec00304 	addi	sp,sp,12
 400d714:	f800283a 	ret
 400d718:	31000217 	ldw	r4,8(r6)
 400d71c:	003fbd06 	br	400d614 <_free_r+0x94>
 400d720:	3806d0fa 	srli	r3,r7,3
 400d724:	00800044 	movi	r2,1
 400d728:	51400117 	ldw	r5,4(r10)
 400d72c:	180890fa 	slli	r4,r3,3
 400d730:	1807d0ba 	srai	r3,r3,2
 400d734:	22c9883a 	add	r4,r4,r11
 400d738:	21800217 	ldw	r6,8(r4)
 400d73c:	10c4983a 	sll	r2,r2,r3
 400d740:	41000315 	stw	r4,12(r8)
 400d744:	41800215 	stw	r6,8(r8)
 400d748:	288ab03a 	or	r5,r5,r2
 400d74c:	22000215 	stw	r8,8(r4)
 400d750:	8809883a 	mov	r4,r17
 400d754:	51400115 	stw	r5,4(r10)
 400d758:	32000315 	stw	r8,12(r6)
 400d75c:	dfc00217 	ldw	ra,8(sp)
 400d760:	dc400117 	ldw	r17,4(sp)
 400d764:	dc000017 	ldw	r16,0(sp)
 400d768:	dec00304 	addi	sp,sp,12
 400d76c:	40119941 	jmpi	4011994 <__malloc_unlock>
 400d770:	2880004c 	andi	r2,r5,1
 400d774:	3a4d883a 	add	r6,r7,r9
 400d778:	1000071e 	bne	r2,zero,400d798 <_free_r+0x218>
 400d77c:	80bffe17 	ldw	r2,-8(r16)
 400d780:	4091c83a 	sub	r8,r8,r2
 400d784:	41000317 	ldw	r4,12(r8)
 400d788:	40c00217 	ldw	r3,8(r8)
 400d78c:	308d883a 	add	r6,r6,r2
 400d790:	20c00215 	stw	r3,8(r4)
 400d794:	19000315 	stw	r4,12(r3)
 400d798:	008100f4 	movhi	r2,1027
 400d79c:	10859b04 	addi	r2,r2,5740
 400d7a0:	11000017 	ldw	r4,0(r2)
 400d7a4:	30c00054 	ori	r3,r6,1
 400d7a8:	52000215 	stw	r8,8(r10)
 400d7ac:	40c00115 	stw	r3,4(r8)
 400d7b0:	313fa036 	bltu	r6,r4,400d634 <_free_r+0xb4>
 400d7b4:	008100f4 	movhi	r2,1027
 400d7b8:	10932f04 	addi	r2,r2,19644
 400d7bc:	11400017 	ldw	r5,0(r2)
 400d7c0:	8809883a 	mov	r4,r17
 400d7c4:	400d4540 	call	400d454 <_malloc_trim_r>
 400d7c8:	003f9a06 	br	400d634 <_free_r+0xb4>
 400d7cc:	00800104 	movi	r2,4
 400d7d0:	10c0072e 	bgeu	r2,r3,400d7f0 <_free_r+0x270>
 400d7d4:	00800504 	movi	r2,20
 400d7d8:	10c01936 	bltu	r2,r3,400d840 <_free_r+0x2c0>
 400d7dc:	188016c4 	addi	r2,r3,91
 400d7e0:	100690fa 	slli	r3,r2,3
 400d7e4:	003fb306 	br	400d6b4 <_free_r+0x134>
 400d7e8:	01400044 	movi	r5,1
 400d7ec:	003f7e06 	br	400d5e8 <_free_r+0x68>
 400d7f0:	3804d1ba 	srli	r2,r7,6
 400d7f4:	10800e04 	addi	r2,r2,56
 400d7f8:	100690fa 	slli	r3,r2,3
 400d7fc:	003fad06 	br	400d6b4 <_free_r+0x134>
 400d800:	22000315 	stw	r8,12(r4)
 400d804:	22000215 	stw	r8,8(r4)
 400d808:	3a05883a 	add	r2,r7,r8
 400d80c:	38c00054 	ori	r3,r7,1
 400d810:	11c00015 	stw	r7,0(r2)
 400d814:	41000215 	stw	r4,8(r8)
 400d818:	40c00115 	stw	r3,4(r8)
 400d81c:	41000315 	stw	r4,12(r8)
 400d820:	003f8406 	br	400d634 <_free_r+0xb4>
 400d824:	1005d0ba 	srai	r2,r2,2
 400d828:	00c00044 	movi	r3,1
 400d82c:	51000117 	ldw	r4,4(r10)
 400d830:	1886983a 	sll	r3,r3,r2
 400d834:	20c8b03a 	or	r4,r4,r3
 400d838:	51000115 	stw	r4,4(r10)
 400d83c:	003fa706 	br	400d6dc <_free_r+0x15c>
 400d840:	00801504 	movi	r2,84
 400d844:	10c00436 	bltu	r2,r3,400d858 <_free_r+0x2d8>
 400d848:	3804d33a 	srli	r2,r7,12
 400d84c:	10801b84 	addi	r2,r2,110
 400d850:	100690fa 	slli	r3,r2,3
 400d854:	003f9706 	br	400d6b4 <_free_r+0x134>
 400d858:	00805504 	movi	r2,340
 400d85c:	10c00436 	bltu	r2,r3,400d870 <_free_r+0x2f0>
 400d860:	3804d3fa 	srli	r2,r7,15
 400d864:	10801dc4 	addi	r2,r2,119
 400d868:	100690fa 	slli	r3,r2,3
 400d86c:	003f9106 	br	400d6b4 <_free_r+0x134>
 400d870:	00815504 	movi	r2,1364
 400d874:	10c0032e 	bgeu	r2,r3,400d884 <_free_r+0x304>
 400d878:	00801f84 	movi	r2,126
 400d87c:	00c0fc04 	movi	r3,1008
 400d880:	003f8c06 	br	400d6b4 <_free_r+0x134>
 400d884:	3804d4ba 	srli	r2,r7,18
 400d888:	10801f04 	addi	r2,r2,124
 400d88c:	100690fa 	slli	r3,r2,3
 400d890:	003f8806 	br	400d6b4 <_free_r+0x134>

0400d894 <__sfvwrite_r>:
 400d894:	30800217 	ldw	r2,8(r6)
 400d898:	defff504 	addi	sp,sp,-44
 400d89c:	df000915 	stw	fp,36(sp)
 400d8a0:	dd800715 	stw	r22,28(sp)
 400d8a4:	dc800315 	stw	r18,12(sp)
 400d8a8:	dfc00a15 	stw	ra,40(sp)
 400d8ac:	ddc00815 	stw	r23,32(sp)
 400d8b0:	dd400615 	stw	r21,24(sp)
 400d8b4:	dd000515 	stw	r20,20(sp)
 400d8b8:	dcc00415 	stw	r19,16(sp)
 400d8bc:	dc400215 	stw	r17,8(sp)
 400d8c0:	dc000115 	stw	r16,4(sp)
 400d8c4:	302d883a 	mov	r22,r6
 400d8c8:	2039883a 	mov	fp,r4
 400d8cc:	2825883a 	mov	r18,r5
 400d8d0:	10001c26 	beq	r2,zero,400d944 <__sfvwrite_r+0xb0>
 400d8d4:	29c0030b 	ldhu	r7,12(r5)
 400d8d8:	3880020c 	andi	r2,r7,8
 400d8dc:	10002726 	beq	r2,zero,400d97c <__sfvwrite_r+0xe8>
 400d8e0:	28800417 	ldw	r2,16(r5)
 400d8e4:	10002526 	beq	r2,zero,400d97c <__sfvwrite_r+0xe8>
 400d8e8:	3880008c 	andi	r2,r7,2
 400d8ec:	b5400017 	ldw	r21,0(r22)
 400d8f0:	10002826 	beq	r2,zero,400d994 <__sfvwrite_r+0x100>
 400d8f4:	0021883a 	mov	r16,zero
 400d8f8:	0023883a 	mov	r17,zero
 400d8fc:	880d883a 	mov	r6,r17
 400d900:	e009883a 	mov	r4,fp
 400d904:	00810004 	movi	r2,1024
 400d908:	80006e26 	beq	r16,zero,400dac4 <__sfvwrite_r+0x230>
 400d90c:	800f883a 	mov	r7,r16
 400d910:	91400717 	ldw	r5,28(r18)
 400d914:	1400012e 	bgeu	r2,r16,400d91c <__sfvwrite_r+0x88>
 400d918:	100f883a 	mov	r7,r2
 400d91c:	90c00917 	ldw	r3,36(r18)
 400d920:	183ee83a 	callr	r3
 400d924:	1007883a 	mov	r3,r2
 400d928:	80a1c83a 	sub	r16,r16,r2
 400d92c:	88a3883a 	add	r17,r17,r2
 400d930:	00806d0e 	bge	zero,r2,400dae8 <__sfvwrite_r+0x254>
 400d934:	b0800217 	ldw	r2,8(r22)
 400d938:	10c5c83a 	sub	r2,r2,r3
 400d93c:	b0800215 	stw	r2,8(r22)
 400d940:	103fee1e 	bne	r2,zero,400d8fc <__sfvwrite_r+0x68>
 400d944:	0009883a 	mov	r4,zero
 400d948:	2005883a 	mov	r2,r4
 400d94c:	dfc00a17 	ldw	ra,40(sp)
 400d950:	df000917 	ldw	fp,36(sp)
 400d954:	ddc00817 	ldw	r23,32(sp)
 400d958:	dd800717 	ldw	r22,28(sp)
 400d95c:	dd400617 	ldw	r21,24(sp)
 400d960:	dd000517 	ldw	r20,20(sp)
 400d964:	dcc00417 	ldw	r19,16(sp)
 400d968:	dc800317 	ldw	r18,12(sp)
 400d96c:	dc400217 	ldw	r17,8(sp)
 400d970:	dc000117 	ldw	r16,4(sp)
 400d974:	dec00b04 	addi	sp,sp,44
 400d978:	f800283a 	ret
 400d97c:	400b65c0 	call	400b65c <__swsetup_r>
 400d980:	1000e41e 	bne	r2,zero,400dd14 <__sfvwrite_r+0x480>
 400d984:	91c0030b 	ldhu	r7,12(r18)
 400d988:	b5400017 	ldw	r21,0(r22)
 400d98c:	3880008c 	andi	r2,r7,2
 400d990:	103fd81e 	bne	r2,zero,400d8f4 <__sfvwrite_r+0x60>
 400d994:	3880004c 	andi	r2,r7,1
 400d998:	1005003a 	cmpeq	r2,r2,zero
 400d99c:	10005726 	beq	r2,zero,400dafc <__sfvwrite_r+0x268>
 400d9a0:	0029883a 	mov	r20,zero
 400d9a4:	002f883a 	mov	r23,zero
 400d9a8:	a0004226 	beq	r20,zero,400dab4 <__sfvwrite_r+0x220>
 400d9ac:	3880800c 	andi	r2,r7,512
 400d9b0:	94000217 	ldw	r16,8(r18)
 400d9b4:	10008b26 	beq	r2,zero,400dbe4 <__sfvwrite_r+0x350>
 400d9b8:	800d883a 	mov	r6,r16
 400d9bc:	a400a536 	bltu	r20,r16,400dc54 <__sfvwrite_r+0x3c0>
 400d9c0:	3881200c 	andi	r2,r7,1152
 400d9c4:	10002726 	beq	r2,zero,400da64 <__sfvwrite_r+0x1d0>
 400d9c8:	90800517 	ldw	r2,20(r18)
 400d9cc:	92000417 	ldw	r8,16(r18)
 400d9d0:	91400017 	ldw	r5,0(r18)
 400d9d4:	1087883a 	add	r3,r2,r2
 400d9d8:	1887883a 	add	r3,r3,r2
 400d9dc:	1808d7fa 	srli	r4,r3,31
 400d9e0:	2a21c83a 	sub	r16,r5,r8
 400d9e4:	80800044 	addi	r2,r16,1
 400d9e8:	20c9883a 	add	r4,r4,r3
 400d9ec:	2027d07a 	srai	r19,r4,1
 400d9f0:	a085883a 	add	r2,r20,r2
 400d9f4:	980d883a 	mov	r6,r19
 400d9f8:	9880022e 	bgeu	r19,r2,400da04 <__sfvwrite_r+0x170>
 400d9fc:	1027883a 	mov	r19,r2
 400da00:	100d883a 	mov	r6,r2
 400da04:	3881000c 	andi	r2,r7,1024
 400da08:	1000b826 	beq	r2,zero,400dcec <__sfvwrite_r+0x458>
 400da0c:	300b883a 	mov	r5,r6
 400da10:	e009883a 	mov	r4,fp
 400da14:	4008a580 	call	4008a58 <_malloc_r>
 400da18:	10003126 	beq	r2,zero,400dae0 <__sfvwrite_r+0x24c>
 400da1c:	91400417 	ldw	r5,16(r18)
 400da20:	1009883a 	mov	r4,r2
 400da24:	800d883a 	mov	r6,r16
 400da28:	1023883a 	mov	r17,r2
 400da2c:	40091980 	call	4009198 <memcpy>
 400da30:	90c0030b 	ldhu	r3,12(r18)
 400da34:	00beffc4 	movi	r2,-1025
 400da38:	1886703a 	and	r3,r3,r2
 400da3c:	18c02014 	ori	r3,r3,128
 400da40:	90c0030d 	sth	r3,12(r18)
 400da44:	9c07c83a 	sub	r3,r19,r16
 400da48:	8c05883a 	add	r2,r17,r16
 400da4c:	a00d883a 	mov	r6,r20
 400da50:	a021883a 	mov	r16,r20
 400da54:	90800015 	stw	r2,0(r18)
 400da58:	90c00215 	stw	r3,8(r18)
 400da5c:	94400415 	stw	r17,16(r18)
 400da60:	94c00515 	stw	r19,20(r18)
 400da64:	91000017 	ldw	r4,0(r18)
 400da68:	b80b883a 	mov	r5,r23
 400da6c:	a023883a 	mov	r17,r20
 400da70:	400e1ec0 	call	400e1ec <memmove>
 400da74:	90c00217 	ldw	r3,8(r18)
 400da78:	90800017 	ldw	r2,0(r18)
 400da7c:	a027883a 	mov	r19,r20
 400da80:	1c07c83a 	sub	r3,r3,r16
 400da84:	1405883a 	add	r2,r2,r16
 400da88:	90c00215 	stw	r3,8(r18)
 400da8c:	a021883a 	mov	r16,r20
 400da90:	90800015 	stw	r2,0(r18)
 400da94:	b0800217 	ldw	r2,8(r22)
 400da98:	1405c83a 	sub	r2,r2,r16
 400da9c:	b0800215 	stw	r2,8(r22)
 400daa0:	103fa826 	beq	r2,zero,400d944 <__sfvwrite_r+0xb0>
 400daa4:	a469c83a 	sub	r20,r20,r17
 400daa8:	91c0030b 	ldhu	r7,12(r18)
 400daac:	bcef883a 	add	r23,r23,r19
 400dab0:	a03fbe1e 	bne	r20,zero,400d9ac <__sfvwrite_r+0x118>
 400dab4:	adc00017 	ldw	r23,0(r21)
 400dab8:	ad000117 	ldw	r20,4(r21)
 400dabc:	ad400204 	addi	r21,r21,8
 400dac0:	003fb906 	br	400d9a8 <__sfvwrite_r+0x114>
 400dac4:	ac400017 	ldw	r17,0(r21)
 400dac8:	ac000117 	ldw	r16,4(r21)
 400dacc:	ad400204 	addi	r21,r21,8
 400dad0:	003f8a06 	br	400d8fc <__sfvwrite_r+0x68>
 400dad4:	91400417 	ldw	r5,16(r18)
 400dad8:	e009883a 	mov	r4,fp
 400dadc:	400d5800 	call	400d580 <_free_r>
 400dae0:	00800304 	movi	r2,12
 400dae4:	e0800015 	stw	r2,0(fp)
 400dae8:	9080030b 	ldhu	r2,12(r18)
 400daec:	013fffc4 	movi	r4,-1
 400daf0:	10801014 	ori	r2,r2,64
 400daf4:	9080030d 	sth	r2,12(r18)
 400daf8:	003f9306 	br	400d948 <__sfvwrite_r+0xb4>
 400dafc:	0027883a 	mov	r19,zero
 400db00:	002f883a 	mov	r23,zero
 400db04:	d8000015 	stw	zero,0(sp)
 400db08:	0029883a 	mov	r20,zero
 400db0c:	98001e26 	beq	r19,zero,400db88 <__sfvwrite_r+0x2f4>
 400db10:	d8c00017 	ldw	r3,0(sp)
 400db14:	1804c03a 	cmpne	r2,r3,zero
 400db18:	10005e26 	beq	r2,zero,400dc94 <__sfvwrite_r+0x400>
 400db1c:	9821883a 	mov	r16,r19
 400db20:	a4c0012e 	bgeu	r20,r19,400db28 <__sfvwrite_r+0x294>
 400db24:	a021883a 	mov	r16,r20
 400db28:	91000017 	ldw	r4,0(r18)
 400db2c:	90800417 	ldw	r2,16(r18)
 400db30:	91800217 	ldw	r6,8(r18)
 400db34:	91c00517 	ldw	r7,20(r18)
 400db38:	1100022e 	bgeu	r2,r4,400db44 <__sfvwrite_r+0x2b0>
 400db3c:	31e3883a 	add	r17,r6,r7
 400db40:	8c001616 	blt	r17,r16,400db9c <__sfvwrite_r+0x308>
 400db44:	81c03816 	blt	r16,r7,400dc28 <__sfvwrite_r+0x394>
 400db48:	90c00917 	ldw	r3,36(r18)
 400db4c:	91400717 	ldw	r5,28(r18)
 400db50:	e009883a 	mov	r4,fp
 400db54:	b80d883a 	mov	r6,r23
 400db58:	183ee83a 	callr	r3
 400db5c:	1023883a 	mov	r17,r2
 400db60:	00bfe10e 	bge	zero,r2,400dae8 <__sfvwrite_r+0x254>
 400db64:	a469c83a 	sub	r20,r20,r17
 400db68:	a0001826 	beq	r20,zero,400dbcc <__sfvwrite_r+0x338>
 400db6c:	b0800217 	ldw	r2,8(r22)
 400db70:	1445c83a 	sub	r2,r2,r17
 400db74:	b0800215 	stw	r2,8(r22)
 400db78:	103f7226 	beq	r2,zero,400d944 <__sfvwrite_r+0xb0>
 400db7c:	9c67c83a 	sub	r19,r19,r17
 400db80:	bc6f883a 	add	r23,r23,r17
 400db84:	983fe21e 	bne	r19,zero,400db10 <__sfvwrite_r+0x27c>
 400db88:	adc00017 	ldw	r23,0(r21)
 400db8c:	acc00117 	ldw	r19,4(r21)
 400db90:	ad400204 	addi	r21,r21,8
 400db94:	d8000015 	stw	zero,0(sp)
 400db98:	003fdc06 	br	400db0c <__sfvwrite_r+0x278>
 400db9c:	b80b883a 	mov	r5,r23
 400dba0:	880d883a 	mov	r6,r17
 400dba4:	400e1ec0 	call	400e1ec <memmove>
 400dba8:	90c00017 	ldw	r3,0(r18)
 400dbac:	e009883a 	mov	r4,fp
 400dbb0:	900b883a 	mov	r5,r18
 400dbb4:	1c47883a 	add	r3,r3,r17
 400dbb8:	90c00015 	stw	r3,0(r18)
 400dbbc:	400cf640 	call	400cf64 <_fflush_r>
 400dbc0:	103fc91e 	bne	r2,zero,400dae8 <__sfvwrite_r+0x254>
 400dbc4:	a469c83a 	sub	r20,r20,r17
 400dbc8:	a03fe81e 	bne	r20,zero,400db6c <__sfvwrite_r+0x2d8>
 400dbcc:	e009883a 	mov	r4,fp
 400dbd0:	900b883a 	mov	r5,r18
 400dbd4:	400cf640 	call	400cf64 <_fflush_r>
 400dbd8:	103fc31e 	bne	r2,zero,400dae8 <__sfvwrite_r+0x254>
 400dbdc:	d8000015 	stw	zero,0(sp)
 400dbe0:	003fe206 	br	400db6c <__sfvwrite_r+0x2d8>
 400dbe4:	91000017 	ldw	r4,0(r18)
 400dbe8:	90800417 	ldw	r2,16(r18)
 400dbec:	1100022e 	bgeu	r2,r4,400dbf8 <__sfvwrite_r+0x364>
 400dbf0:	8023883a 	mov	r17,r16
 400dbf4:	85003136 	bltu	r16,r20,400dcbc <__sfvwrite_r+0x428>
 400dbf8:	91c00517 	ldw	r7,20(r18)
 400dbfc:	a1c01836 	bltu	r20,r7,400dc60 <__sfvwrite_r+0x3cc>
 400dc00:	90c00917 	ldw	r3,36(r18)
 400dc04:	91400717 	ldw	r5,28(r18)
 400dc08:	e009883a 	mov	r4,fp
 400dc0c:	b80d883a 	mov	r6,r23
 400dc10:	183ee83a 	callr	r3
 400dc14:	1021883a 	mov	r16,r2
 400dc18:	00bfb30e 	bge	zero,r2,400dae8 <__sfvwrite_r+0x254>
 400dc1c:	1023883a 	mov	r17,r2
 400dc20:	1027883a 	mov	r19,r2
 400dc24:	003f9b06 	br	400da94 <__sfvwrite_r+0x200>
 400dc28:	b80b883a 	mov	r5,r23
 400dc2c:	800d883a 	mov	r6,r16
 400dc30:	400e1ec0 	call	400e1ec <memmove>
 400dc34:	90c00217 	ldw	r3,8(r18)
 400dc38:	90800017 	ldw	r2,0(r18)
 400dc3c:	8023883a 	mov	r17,r16
 400dc40:	1c07c83a 	sub	r3,r3,r16
 400dc44:	1405883a 	add	r2,r2,r16
 400dc48:	90c00215 	stw	r3,8(r18)
 400dc4c:	90800015 	stw	r2,0(r18)
 400dc50:	003fc406 	br	400db64 <__sfvwrite_r+0x2d0>
 400dc54:	a00d883a 	mov	r6,r20
 400dc58:	a021883a 	mov	r16,r20
 400dc5c:	003f8106 	br	400da64 <__sfvwrite_r+0x1d0>
 400dc60:	b80b883a 	mov	r5,r23
 400dc64:	a00d883a 	mov	r6,r20
 400dc68:	400e1ec0 	call	400e1ec <memmove>
 400dc6c:	90c00217 	ldw	r3,8(r18)
 400dc70:	90800017 	ldw	r2,0(r18)
 400dc74:	a021883a 	mov	r16,r20
 400dc78:	1d07c83a 	sub	r3,r3,r20
 400dc7c:	1505883a 	add	r2,r2,r20
 400dc80:	a023883a 	mov	r17,r20
 400dc84:	a027883a 	mov	r19,r20
 400dc88:	90c00215 	stw	r3,8(r18)
 400dc8c:	90800015 	stw	r2,0(r18)
 400dc90:	003f8006 	br	400da94 <__sfvwrite_r+0x200>
 400dc94:	b809883a 	mov	r4,r23
 400dc98:	01400284 	movi	r5,10
 400dc9c:	980d883a 	mov	r6,r19
 400dca0:	400e1080 	call	400e108 <memchr>
 400dca4:	10001726 	beq	r2,zero,400dd04 <__sfvwrite_r+0x470>
 400dca8:	15c5c83a 	sub	r2,r2,r23
 400dcac:	15000044 	addi	r20,r2,1
 400dcb0:	00800044 	movi	r2,1
 400dcb4:	d8800015 	stw	r2,0(sp)
 400dcb8:	003f9806 	br	400db1c <__sfvwrite_r+0x288>
 400dcbc:	b80b883a 	mov	r5,r23
 400dcc0:	800d883a 	mov	r6,r16
 400dcc4:	400e1ec0 	call	400e1ec <memmove>
 400dcc8:	90c00017 	ldw	r3,0(r18)
 400dccc:	e009883a 	mov	r4,fp
 400dcd0:	900b883a 	mov	r5,r18
 400dcd4:	1c07883a 	add	r3,r3,r16
 400dcd8:	90c00015 	stw	r3,0(r18)
 400dcdc:	8027883a 	mov	r19,r16
 400dce0:	400cf640 	call	400cf64 <_fflush_r>
 400dce4:	103f6b26 	beq	r2,zero,400da94 <__sfvwrite_r+0x200>
 400dce8:	003f7f06 	br	400dae8 <__sfvwrite_r+0x254>
 400dcec:	400b883a 	mov	r5,r8
 400dcf0:	e009883a 	mov	r4,fp
 400dcf4:	400f2c00 	call	400f2c0 <_realloc_r>
 400dcf8:	103f7626 	beq	r2,zero,400dad4 <__sfvwrite_r+0x240>
 400dcfc:	1023883a 	mov	r17,r2
 400dd00:	003f5006 	br	400da44 <__sfvwrite_r+0x1b0>
 400dd04:	00c00044 	movi	r3,1
 400dd08:	9d000044 	addi	r20,r19,1
 400dd0c:	d8c00015 	stw	r3,0(sp)
 400dd10:	003f8206 	br	400db1c <__sfvwrite_r+0x288>
 400dd14:	9080030b 	ldhu	r2,12(r18)
 400dd18:	00c00244 	movi	r3,9
 400dd1c:	013fffc4 	movi	r4,-1
 400dd20:	10801014 	ori	r2,r2,64
 400dd24:	9080030d 	sth	r2,12(r18)
 400dd28:	e0c00015 	stw	r3,0(fp)
 400dd2c:	003f0606 	br	400d948 <__sfvwrite_r+0xb4>

0400dd30 <_fwalk_reent>:
 400dd30:	defff704 	addi	sp,sp,-36
 400dd34:	dcc00315 	stw	r19,12(sp)
 400dd38:	24c0b804 	addi	r19,r4,736
 400dd3c:	dd800615 	stw	r22,24(sp)
 400dd40:	dd400515 	stw	r21,20(sp)
 400dd44:	dfc00815 	stw	ra,32(sp)
 400dd48:	ddc00715 	stw	r23,28(sp)
 400dd4c:	dd000415 	stw	r20,16(sp)
 400dd50:	dc800215 	stw	r18,8(sp)
 400dd54:	dc400115 	stw	r17,4(sp)
 400dd58:	dc000015 	stw	r16,0(sp)
 400dd5c:	202b883a 	mov	r21,r4
 400dd60:	282d883a 	mov	r22,r5
 400dd64:	400d1ec0 	call	400d1ec <__sfp_lock_acquire>
 400dd68:	98002126 	beq	r19,zero,400ddf0 <_fwalk_reent+0xc0>
 400dd6c:	002f883a 	mov	r23,zero
 400dd70:	9c800117 	ldw	r18,4(r19)
 400dd74:	9c000217 	ldw	r16,8(r19)
 400dd78:	90bfffc4 	addi	r2,r18,-1
 400dd7c:	10000d16 	blt	r2,zero,400ddb4 <_fwalk_reent+0x84>
 400dd80:	0023883a 	mov	r17,zero
 400dd84:	053fffc4 	movi	r20,-1
 400dd88:	8080030f 	ldh	r2,12(r16)
 400dd8c:	8c400044 	addi	r17,r17,1
 400dd90:	10000626 	beq	r2,zero,400ddac <_fwalk_reent+0x7c>
 400dd94:	8080038f 	ldh	r2,14(r16)
 400dd98:	800b883a 	mov	r5,r16
 400dd9c:	a809883a 	mov	r4,r21
 400dda0:	15000226 	beq	r2,r20,400ddac <_fwalk_reent+0x7c>
 400dda4:	b03ee83a 	callr	r22
 400dda8:	b8aeb03a 	or	r23,r23,r2
 400ddac:	84001704 	addi	r16,r16,92
 400ddb0:	947ff51e 	bne	r18,r17,400dd88 <_fwalk_reent+0x58>
 400ddb4:	9cc00017 	ldw	r19,0(r19)
 400ddb8:	983fed1e 	bne	r19,zero,400dd70 <_fwalk_reent+0x40>
 400ddbc:	400d1f00 	call	400d1f0 <__sfp_lock_release>
 400ddc0:	b805883a 	mov	r2,r23
 400ddc4:	dfc00817 	ldw	ra,32(sp)
 400ddc8:	ddc00717 	ldw	r23,28(sp)
 400ddcc:	dd800617 	ldw	r22,24(sp)
 400ddd0:	dd400517 	ldw	r21,20(sp)
 400ddd4:	dd000417 	ldw	r20,16(sp)
 400ddd8:	dcc00317 	ldw	r19,12(sp)
 400dddc:	dc800217 	ldw	r18,8(sp)
 400dde0:	dc400117 	ldw	r17,4(sp)
 400dde4:	dc000017 	ldw	r16,0(sp)
 400dde8:	dec00904 	addi	sp,sp,36
 400ddec:	f800283a 	ret
 400ddf0:	002f883a 	mov	r23,zero
 400ddf4:	003ff106 	br	400ddbc <_fwalk_reent+0x8c>

0400ddf8 <_fwalk>:
 400ddf8:	defff804 	addi	sp,sp,-32
 400ddfc:	dcc00315 	stw	r19,12(sp)
 400de00:	24c0b804 	addi	r19,r4,736
 400de04:	dd400515 	stw	r21,20(sp)
 400de08:	dfc00715 	stw	ra,28(sp)
 400de0c:	dd800615 	stw	r22,24(sp)
 400de10:	dd000415 	stw	r20,16(sp)
 400de14:	dc800215 	stw	r18,8(sp)
 400de18:	dc400115 	stw	r17,4(sp)
 400de1c:	dc000015 	stw	r16,0(sp)
 400de20:	282b883a 	mov	r21,r5
 400de24:	400d1ec0 	call	400d1ec <__sfp_lock_acquire>
 400de28:	98001f26 	beq	r19,zero,400dea8 <_fwalk+0xb0>
 400de2c:	002d883a 	mov	r22,zero
 400de30:	9c800117 	ldw	r18,4(r19)
 400de34:	9c000217 	ldw	r16,8(r19)
 400de38:	90bfffc4 	addi	r2,r18,-1
 400de3c:	10000c16 	blt	r2,zero,400de70 <_fwalk+0x78>
 400de40:	0023883a 	mov	r17,zero
 400de44:	053fffc4 	movi	r20,-1
 400de48:	8080030f 	ldh	r2,12(r16)
 400de4c:	8c400044 	addi	r17,r17,1
 400de50:	10000526 	beq	r2,zero,400de68 <_fwalk+0x70>
 400de54:	8080038f 	ldh	r2,14(r16)
 400de58:	8009883a 	mov	r4,r16
 400de5c:	15000226 	beq	r2,r20,400de68 <_fwalk+0x70>
 400de60:	a83ee83a 	callr	r21
 400de64:	b0acb03a 	or	r22,r22,r2
 400de68:	84001704 	addi	r16,r16,92
 400de6c:	947ff61e 	bne	r18,r17,400de48 <_fwalk+0x50>
 400de70:	9cc00017 	ldw	r19,0(r19)
 400de74:	983fee1e 	bne	r19,zero,400de30 <_fwalk+0x38>
 400de78:	400d1f00 	call	400d1f0 <__sfp_lock_release>
 400de7c:	b005883a 	mov	r2,r22
 400de80:	dfc00717 	ldw	ra,28(sp)
 400de84:	dd800617 	ldw	r22,24(sp)
 400de88:	dd400517 	ldw	r21,20(sp)
 400de8c:	dd000417 	ldw	r20,16(sp)
 400de90:	dcc00317 	ldw	r19,12(sp)
 400de94:	dc800217 	ldw	r18,8(sp)
 400de98:	dc400117 	ldw	r17,4(sp)
 400de9c:	dc000017 	ldw	r16,0(sp)
 400dea0:	dec00804 	addi	sp,sp,32
 400dea4:	f800283a 	ret
 400dea8:	002d883a 	mov	r22,zero
 400deac:	003ff206 	br	400de78 <_fwalk+0x80>

0400deb0 <__locale_charset>:
 400deb0:	d0a00817 	ldw	r2,-32736(gp)
 400deb4:	f800283a 	ret

0400deb8 <_localeconv_r>:
 400deb8:	008100f4 	movhi	r2,1027
 400debc:	10b7c404 	addi	r2,r2,-8432
 400dec0:	f800283a 	ret

0400dec4 <localeconv>:
 400dec4:	008100f4 	movhi	r2,1027
 400dec8:	10859904 	addi	r2,r2,5732
 400decc:	11000017 	ldw	r4,0(r2)
 400ded0:	400deb81 	jmpi	400deb8 <_localeconv_r>

0400ded4 <_setlocale_r>:
 400ded4:	defffc04 	addi	sp,sp,-16
 400ded8:	00c100f4 	movhi	r3,1027
 400dedc:	18f79a04 	addi	r3,r3,-8600
 400dee0:	dc800215 	stw	r18,8(sp)
 400dee4:	dc400115 	stw	r17,4(sp)
 400dee8:	dc000015 	stw	r16,0(sp)
 400deec:	2023883a 	mov	r17,r4
 400def0:	2825883a 	mov	r18,r5
 400def4:	dfc00315 	stw	ra,12(sp)
 400def8:	3021883a 	mov	r16,r6
 400defc:	3009883a 	mov	r4,r6
 400df00:	180b883a 	mov	r5,r3
 400df04:	30000926 	beq	r6,zero,400df2c <_setlocale_r+0x58>
 400df08:	400fa400 	call	400fa40 <strcmp>
 400df0c:	8009883a 	mov	r4,r16
 400df10:	014100f4 	movhi	r5,1027
 400df14:	2977ab04 	addi	r5,r5,-8532
 400df18:	10000b1e 	bne	r2,zero,400df48 <_setlocale_r+0x74>
 400df1c:	8c000d15 	stw	r16,52(r17)
 400df20:	8c800c15 	stw	r18,48(r17)
 400df24:	00c100f4 	movhi	r3,1027
 400df28:	18f79a04 	addi	r3,r3,-8600
 400df2c:	1805883a 	mov	r2,r3
 400df30:	dfc00317 	ldw	ra,12(sp)
 400df34:	dc800217 	ldw	r18,8(sp)
 400df38:	dc400117 	ldw	r17,4(sp)
 400df3c:	dc000017 	ldw	r16,0(sp)
 400df40:	dec00404 	addi	sp,sp,16
 400df44:	f800283a 	ret
 400df48:	400fa400 	call	400fa40 <strcmp>
 400df4c:	0007883a 	mov	r3,zero
 400df50:	103ff226 	beq	r2,zero,400df1c <_setlocale_r+0x48>
 400df54:	003ff506 	br	400df2c <_setlocale_r+0x58>

0400df58 <setlocale>:
 400df58:	018100f4 	movhi	r6,1027
 400df5c:	31859904 	addi	r6,r6,5732
 400df60:	2007883a 	mov	r3,r4
 400df64:	31000017 	ldw	r4,0(r6)
 400df68:	280d883a 	mov	r6,r5
 400df6c:	180b883a 	mov	r5,r3
 400df70:	400ded41 	jmpi	400ded4 <_setlocale_r>

0400df74 <__smakebuf_r>:
 400df74:	2880030b 	ldhu	r2,12(r5)
 400df78:	deffed04 	addi	sp,sp,-76
 400df7c:	dc401015 	stw	r17,64(sp)
 400df80:	1080008c 	andi	r2,r2,2
 400df84:	dc000f15 	stw	r16,60(sp)
 400df88:	dfc01215 	stw	ra,72(sp)
 400df8c:	dc801115 	stw	r18,68(sp)
 400df90:	2821883a 	mov	r16,r5
 400df94:	2023883a 	mov	r17,r4
 400df98:	10000b26 	beq	r2,zero,400dfc8 <__smakebuf_r+0x54>
 400df9c:	28c010c4 	addi	r3,r5,67
 400dfa0:	00800044 	movi	r2,1
 400dfa4:	28800515 	stw	r2,20(r5)
 400dfa8:	28c00415 	stw	r3,16(r5)
 400dfac:	28c00015 	stw	r3,0(r5)
 400dfb0:	dfc01217 	ldw	ra,72(sp)
 400dfb4:	dc801117 	ldw	r18,68(sp)
 400dfb8:	dc401017 	ldw	r17,64(sp)
 400dfbc:	dc000f17 	ldw	r16,60(sp)
 400dfc0:	dec01304 	addi	sp,sp,76
 400dfc4:	f800283a 	ret
 400dfc8:	2940038f 	ldh	r5,14(r5)
 400dfcc:	28002116 	blt	r5,zero,400e054 <__smakebuf_r+0xe0>
 400dfd0:	d80d883a 	mov	r6,sp
 400dfd4:	400fdbc0 	call	400fdbc <_fstat_r>
 400dfd8:	10001e16 	blt	r2,zero,400e054 <__smakebuf_r+0xe0>
 400dfdc:	d8800117 	ldw	r2,4(sp)
 400dfe0:	00e00014 	movui	r3,32768
 400dfe4:	113c000c 	andi	r4,r2,61440
 400dfe8:	20c03126 	beq	r4,r3,400e0b0 <__smakebuf_r+0x13c>
 400dfec:	8080030b 	ldhu	r2,12(r16)
 400dff0:	00c80004 	movi	r3,8192
 400dff4:	10820014 	ori	r2,r2,2048
 400dff8:	8080030d 	sth	r2,12(r16)
 400dffc:	20c01e26 	beq	r4,r3,400e078 <__smakebuf_r+0x104>
 400e000:	04810004 	movi	r18,1024
 400e004:	8809883a 	mov	r4,r17
 400e008:	900b883a 	mov	r5,r18
 400e00c:	4008a580 	call	4008a58 <_malloc_r>
 400e010:	1009883a 	mov	r4,r2
 400e014:	10003126 	beq	r2,zero,400e0dc <__smakebuf_r+0x168>
 400e018:	80c0030b 	ldhu	r3,12(r16)
 400e01c:	00810074 	movhi	r2,1025
 400e020:	10b4b804 	addi	r2,r2,-11552
 400e024:	88800f15 	stw	r2,60(r17)
 400e028:	18c02014 	ori	r3,r3,128
 400e02c:	84800515 	stw	r18,20(r16)
 400e030:	80c0030d 	sth	r3,12(r16)
 400e034:	81000415 	stw	r4,16(r16)
 400e038:	81000015 	stw	r4,0(r16)
 400e03c:	dfc01217 	ldw	ra,72(sp)
 400e040:	dc801117 	ldw	r18,68(sp)
 400e044:	dc401017 	ldw	r17,64(sp)
 400e048:	dc000f17 	ldw	r16,60(sp)
 400e04c:	dec01304 	addi	sp,sp,76
 400e050:	f800283a 	ret
 400e054:	80c0030b 	ldhu	r3,12(r16)
 400e058:	1880200c 	andi	r2,r3,128
 400e05c:	10000426 	beq	r2,zero,400e070 <__smakebuf_r+0xfc>
 400e060:	04801004 	movi	r18,64
 400e064:	18820014 	ori	r2,r3,2048
 400e068:	8080030d 	sth	r2,12(r16)
 400e06c:	003fe506 	br	400e004 <__smakebuf_r+0x90>
 400e070:	04810004 	movi	r18,1024
 400e074:	003ffb06 	br	400e064 <__smakebuf_r+0xf0>
 400e078:	8140038f 	ldh	r5,14(r16)
 400e07c:	8809883a 	mov	r4,r17
 400e080:	400fe300 	call	400fe30 <_isatty_r>
 400e084:	103fde26 	beq	r2,zero,400e000 <__smakebuf_r+0x8c>
 400e088:	8080030b 	ldhu	r2,12(r16)
 400e08c:	80c010c4 	addi	r3,r16,67
 400e090:	04810004 	movi	r18,1024
 400e094:	10800054 	ori	r2,r2,1
 400e098:	8080030d 	sth	r2,12(r16)
 400e09c:	00800044 	movi	r2,1
 400e0a0:	80c00415 	stw	r3,16(r16)
 400e0a4:	80800515 	stw	r2,20(r16)
 400e0a8:	80c00015 	stw	r3,0(r16)
 400e0ac:	003fd506 	br	400e004 <__smakebuf_r+0x90>
 400e0b0:	80c00a17 	ldw	r3,40(r16)
 400e0b4:	00810074 	movhi	r2,1025
 400e0b8:	10be3f04 	addi	r2,r2,-1796
 400e0bc:	18bfcb1e 	bne	r3,r2,400dfec <__smakebuf_r+0x78>
 400e0c0:	8080030b 	ldhu	r2,12(r16)
 400e0c4:	00c10004 	movi	r3,1024
 400e0c8:	1825883a 	mov	r18,r3
 400e0cc:	10c4b03a 	or	r2,r2,r3
 400e0d0:	8080030d 	sth	r2,12(r16)
 400e0d4:	80c01315 	stw	r3,76(r16)
 400e0d8:	003fca06 	br	400e004 <__smakebuf_r+0x90>
 400e0dc:	8100030b 	ldhu	r4,12(r16)
 400e0e0:	2080800c 	andi	r2,r4,512
 400e0e4:	103fb21e 	bne	r2,zero,400dfb0 <__smakebuf_r+0x3c>
 400e0e8:	80c010c4 	addi	r3,r16,67
 400e0ec:	21000094 	ori	r4,r4,2
 400e0f0:	00800044 	movi	r2,1
 400e0f4:	80800515 	stw	r2,20(r16)
 400e0f8:	8100030d 	sth	r4,12(r16)
 400e0fc:	80c00415 	stw	r3,16(r16)
 400e100:	80c00015 	stw	r3,0(r16)
 400e104:	003faa06 	br	400dfb0 <__smakebuf_r+0x3c>

0400e108 <memchr>:
 400e108:	008000c4 	movi	r2,3
 400e10c:	29403fcc 	andi	r5,r5,255
 400e110:	2007883a 	mov	r3,r4
 400e114:	1180022e 	bgeu	r2,r6,400e120 <memchr+0x18>
 400e118:	2084703a 	and	r2,r4,r2
 400e11c:	10000b26 	beq	r2,zero,400e14c <memchr+0x44>
 400e120:	313fffc4 	addi	r4,r6,-1
 400e124:	3000051e 	bne	r6,zero,400e13c <memchr+0x34>
 400e128:	00002c06 	br	400e1dc <memchr+0xd4>
 400e12c:	213fffc4 	addi	r4,r4,-1
 400e130:	00bfffc4 	movi	r2,-1
 400e134:	18c00044 	addi	r3,r3,1
 400e138:	20802826 	beq	r4,r2,400e1dc <memchr+0xd4>
 400e13c:	18800003 	ldbu	r2,0(r3)
 400e140:	28bffa1e 	bne	r5,r2,400e12c <memchr+0x24>
 400e144:	1805883a 	mov	r2,r3
 400e148:	f800283a 	ret
 400e14c:	0011883a 	mov	r8,zero
 400e150:	0007883a 	mov	r3,zero
 400e154:	01c00104 	movi	r7,4
 400e158:	4004923a 	slli	r2,r8,8
 400e15c:	18c00044 	addi	r3,r3,1
 400e160:	1151883a 	add	r8,r2,r5
 400e164:	19fffc1e 	bne	r3,r7,400e158 <memchr+0x50>
 400e168:	02bfbff4 	movhi	r10,65279
 400e16c:	52bfbfc4 	addi	r10,r10,-257
 400e170:	02602074 	movhi	r9,32897
 400e174:	4a602004 	addi	r9,r9,-32640
 400e178:	02c000c4 	movi	r11,3
 400e17c:	20800017 	ldw	r2,0(r4)
 400e180:	31bfff04 	addi	r6,r6,-4
 400e184:	200f883a 	mov	r7,r4
 400e188:	1204f03a 	xor	r2,r2,r8
 400e18c:	1287883a 	add	r3,r2,r10
 400e190:	1a46703a 	and	r3,r3,r9
 400e194:	0084303a 	nor	r2,zero,r2
 400e198:	10c4703a 	and	r2,r2,r3
 400e19c:	10000b26 	beq	r2,zero,400e1cc <memchr+0xc4>
 400e1a0:	20800003 	ldbu	r2,0(r4)
 400e1a4:	28800f26 	beq	r5,r2,400e1e4 <memchr+0xdc>
 400e1a8:	20800043 	ldbu	r2,1(r4)
 400e1ac:	21c00044 	addi	r7,r4,1
 400e1b0:	28800c26 	beq	r5,r2,400e1e4 <memchr+0xdc>
 400e1b4:	20800083 	ldbu	r2,2(r4)
 400e1b8:	21c00084 	addi	r7,r4,2
 400e1bc:	28800926 	beq	r5,r2,400e1e4 <memchr+0xdc>
 400e1c0:	208000c3 	ldbu	r2,3(r4)
 400e1c4:	21c000c4 	addi	r7,r4,3
 400e1c8:	28800626 	beq	r5,r2,400e1e4 <memchr+0xdc>
 400e1cc:	21000104 	addi	r4,r4,4
 400e1d0:	59bfea36 	bltu	r11,r6,400e17c <memchr+0x74>
 400e1d4:	2007883a 	mov	r3,r4
 400e1d8:	003fd106 	br	400e120 <memchr+0x18>
 400e1dc:	0005883a 	mov	r2,zero
 400e1e0:	f800283a 	ret
 400e1e4:	3805883a 	mov	r2,r7
 400e1e8:	f800283a 	ret

0400e1ec <memmove>:
 400e1ec:	2807883a 	mov	r3,r5
 400e1f0:	2011883a 	mov	r8,r4
 400e1f4:	29000c2e 	bgeu	r5,r4,400e228 <memmove+0x3c>
 400e1f8:	298f883a 	add	r7,r5,r6
 400e1fc:	21c00a2e 	bgeu	r4,r7,400e228 <memmove+0x3c>
 400e200:	30000726 	beq	r6,zero,400e220 <memmove+0x34>
 400e204:	2187883a 	add	r3,r4,r6
 400e208:	198dc83a 	sub	r6,r3,r6
 400e20c:	39ffffc4 	addi	r7,r7,-1
 400e210:	38800003 	ldbu	r2,0(r7)
 400e214:	18ffffc4 	addi	r3,r3,-1
 400e218:	18800005 	stb	r2,0(r3)
 400e21c:	19bffb1e 	bne	r3,r6,400e20c <memmove+0x20>
 400e220:	2005883a 	mov	r2,r4
 400e224:	f800283a 	ret
 400e228:	01c003c4 	movi	r7,15
 400e22c:	39800a36 	bltu	r7,r6,400e258 <memmove+0x6c>
 400e230:	303ffb26 	beq	r6,zero,400e220 <memmove+0x34>
 400e234:	400f883a 	mov	r7,r8
 400e238:	320d883a 	add	r6,r6,r8
 400e23c:	28800003 	ldbu	r2,0(r5)
 400e240:	29400044 	addi	r5,r5,1
 400e244:	38800005 	stb	r2,0(r7)
 400e248:	39c00044 	addi	r7,r7,1
 400e24c:	39bffb1e 	bne	r7,r6,400e23c <memmove+0x50>
 400e250:	2005883a 	mov	r2,r4
 400e254:	f800283a 	ret
 400e258:	1904b03a 	or	r2,r3,r4
 400e25c:	108000cc 	andi	r2,r2,3
 400e260:	103ff31e 	bne	r2,zero,400e230 <memmove+0x44>
 400e264:	3811883a 	mov	r8,r7
 400e268:	180b883a 	mov	r5,r3
 400e26c:	200f883a 	mov	r7,r4
 400e270:	28c00017 	ldw	r3,0(r5)
 400e274:	31bffc04 	addi	r6,r6,-16
 400e278:	38c00015 	stw	r3,0(r7)
 400e27c:	28800117 	ldw	r2,4(r5)
 400e280:	38800115 	stw	r2,4(r7)
 400e284:	28c00217 	ldw	r3,8(r5)
 400e288:	38c00215 	stw	r3,8(r7)
 400e28c:	28800317 	ldw	r2,12(r5)
 400e290:	29400404 	addi	r5,r5,16
 400e294:	38800315 	stw	r2,12(r7)
 400e298:	39c00404 	addi	r7,r7,16
 400e29c:	41bff436 	bltu	r8,r6,400e270 <memmove+0x84>
 400e2a0:	008000c4 	movi	r2,3
 400e2a4:	1180072e 	bgeu	r2,r6,400e2c4 <memmove+0xd8>
 400e2a8:	1007883a 	mov	r3,r2
 400e2ac:	28800017 	ldw	r2,0(r5)
 400e2b0:	31bfff04 	addi	r6,r6,-4
 400e2b4:	29400104 	addi	r5,r5,4
 400e2b8:	38800015 	stw	r2,0(r7)
 400e2bc:	39c00104 	addi	r7,r7,4
 400e2c0:	19bffa36 	bltu	r3,r6,400e2ac <memmove+0xc0>
 400e2c4:	3811883a 	mov	r8,r7
 400e2c8:	003fd906 	br	400e230 <memmove+0x44>

0400e2cc <_Bfree>:
 400e2cc:	28000826 	beq	r5,zero,400e2f0 <_Bfree+0x24>
 400e2d0:	28800117 	ldw	r2,4(r5)
 400e2d4:	21001317 	ldw	r4,76(r4)
 400e2d8:	1085883a 	add	r2,r2,r2
 400e2dc:	1085883a 	add	r2,r2,r2
 400e2e0:	1105883a 	add	r2,r2,r4
 400e2e4:	10c00017 	ldw	r3,0(r2)
 400e2e8:	28c00015 	stw	r3,0(r5)
 400e2ec:	11400015 	stw	r5,0(r2)
 400e2f0:	f800283a 	ret

0400e2f4 <__hi0bits>:
 400e2f4:	20bfffec 	andhi	r2,r4,65535
 400e2f8:	10001426 	beq	r2,zero,400e34c <__hi0bits+0x58>
 400e2fc:	0007883a 	mov	r3,zero
 400e300:	20bfc02c 	andhi	r2,r4,65280
 400e304:	1000021e 	bne	r2,zero,400e310 <__hi0bits+0x1c>
 400e308:	2008923a 	slli	r4,r4,8
 400e30c:	18c00204 	addi	r3,r3,8
 400e310:	20bc002c 	andhi	r2,r4,61440
 400e314:	1000021e 	bne	r2,zero,400e320 <__hi0bits+0x2c>
 400e318:	2008913a 	slli	r4,r4,4
 400e31c:	18c00104 	addi	r3,r3,4
 400e320:	20b0002c 	andhi	r2,r4,49152
 400e324:	1000031e 	bne	r2,zero,400e334 <__hi0bits+0x40>
 400e328:	2105883a 	add	r2,r4,r4
 400e32c:	18c00084 	addi	r3,r3,2
 400e330:	1089883a 	add	r4,r2,r2
 400e334:	20000316 	blt	r4,zero,400e344 <__hi0bits+0x50>
 400e338:	2090002c 	andhi	r2,r4,16384
 400e33c:	10000626 	beq	r2,zero,400e358 <__hi0bits+0x64>
 400e340:	18c00044 	addi	r3,r3,1
 400e344:	1805883a 	mov	r2,r3
 400e348:	f800283a 	ret
 400e34c:	2008943a 	slli	r4,r4,16
 400e350:	00c00404 	movi	r3,16
 400e354:	003fea06 	br	400e300 <__hi0bits+0xc>
 400e358:	00c00804 	movi	r3,32
 400e35c:	1805883a 	mov	r2,r3
 400e360:	f800283a 	ret

0400e364 <__lo0bits>:
 400e364:	20c00017 	ldw	r3,0(r4)
 400e368:	188001cc 	andi	r2,r3,7
 400e36c:	10000a26 	beq	r2,zero,400e398 <__lo0bits+0x34>
 400e370:	1880004c 	andi	r2,r3,1
 400e374:	1005003a 	cmpeq	r2,r2,zero
 400e378:	10002126 	beq	r2,zero,400e400 <__lo0bits+0x9c>
 400e37c:	1880008c 	andi	r2,r3,2
 400e380:	1000251e 	bne	r2,zero,400e418 <__lo0bits+0xb4>
 400e384:	1804d0ba 	srli	r2,r3,2
 400e388:	01400084 	movi	r5,2
 400e38c:	20800015 	stw	r2,0(r4)
 400e390:	2805883a 	mov	r2,r5
 400e394:	f800283a 	ret
 400e398:	18bfffcc 	andi	r2,r3,65535
 400e39c:	10001526 	beq	r2,zero,400e3f4 <__lo0bits+0x90>
 400e3a0:	000b883a 	mov	r5,zero
 400e3a4:	18803fcc 	andi	r2,r3,255
 400e3a8:	1000021e 	bne	r2,zero,400e3b4 <__lo0bits+0x50>
 400e3ac:	1806d23a 	srli	r3,r3,8
 400e3b0:	29400204 	addi	r5,r5,8
 400e3b4:	188003cc 	andi	r2,r3,15
 400e3b8:	1000021e 	bne	r2,zero,400e3c4 <__lo0bits+0x60>
 400e3bc:	1806d13a 	srli	r3,r3,4
 400e3c0:	29400104 	addi	r5,r5,4
 400e3c4:	188000cc 	andi	r2,r3,3
 400e3c8:	1000021e 	bne	r2,zero,400e3d4 <__lo0bits+0x70>
 400e3cc:	1806d0ba 	srli	r3,r3,2
 400e3d0:	29400084 	addi	r5,r5,2
 400e3d4:	1880004c 	andi	r2,r3,1
 400e3d8:	1000031e 	bne	r2,zero,400e3e8 <__lo0bits+0x84>
 400e3dc:	1806d07a 	srli	r3,r3,1
 400e3e0:	18000a26 	beq	r3,zero,400e40c <__lo0bits+0xa8>
 400e3e4:	29400044 	addi	r5,r5,1
 400e3e8:	2805883a 	mov	r2,r5
 400e3ec:	20c00015 	stw	r3,0(r4)
 400e3f0:	f800283a 	ret
 400e3f4:	1806d43a 	srli	r3,r3,16
 400e3f8:	01400404 	movi	r5,16
 400e3fc:	003fe906 	br	400e3a4 <__lo0bits+0x40>
 400e400:	000b883a 	mov	r5,zero
 400e404:	2805883a 	mov	r2,r5
 400e408:	f800283a 	ret
 400e40c:	01400804 	movi	r5,32
 400e410:	2805883a 	mov	r2,r5
 400e414:	f800283a 	ret
 400e418:	1804d07a 	srli	r2,r3,1
 400e41c:	01400044 	movi	r5,1
 400e420:	20800015 	stw	r2,0(r4)
 400e424:	003fda06 	br	400e390 <__lo0bits+0x2c>

0400e428 <__mcmp>:
 400e428:	20800417 	ldw	r2,16(r4)
 400e42c:	28c00417 	ldw	r3,16(r5)
 400e430:	10cfc83a 	sub	r7,r2,r3
 400e434:	38000c1e 	bne	r7,zero,400e468 <__mcmp+0x40>
 400e438:	18c5883a 	add	r2,r3,r3
 400e43c:	1085883a 	add	r2,r2,r2
 400e440:	10c00504 	addi	r3,r2,20
 400e444:	21000504 	addi	r4,r4,20
 400e448:	28cb883a 	add	r5,r5,r3
 400e44c:	2085883a 	add	r2,r4,r2
 400e450:	10bfff04 	addi	r2,r2,-4
 400e454:	297fff04 	addi	r5,r5,-4
 400e458:	11800017 	ldw	r6,0(r2)
 400e45c:	28c00017 	ldw	r3,0(r5)
 400e460:	30c0031e 	bne	r6,r3,400e470 <__mcmp+0x48>
 400e464:	20bffa36 	bltu	r4,r2,400e450 <__mcmp+0x28>
 400e468:	3805883a 	mov	r2,r7
 400e46c:	f800283a 	ret
 400e470:	30c00336 	bltu	r6,r3,400e480 <__mcmp+0x58>
 400e474:	01c00044 	movi	r7,1
 400e478:	3805883a 	mov	r2,r7
 400e47c:	f800283a 	ret
 400e480:	01ffffc4 	movi	r7,-1
 400e484:	003ff806 	br	400e468 <__mcmp+0x40>

0400e488 <__ulp>:
 400e488:	295ffc2c 	andhi	r5,r5,32752
 400e48c:	013f3034 	movhi	r4,64704
 400e490:	290b883a 	add	r5,r5,r4
 400e494:	0145c83a 	sub	r2,zero,r5
 400e498:	1007d53a 	srai	r3,r2,20
 400e49c:	000d883a 	mov	r6,zero
 400e4a0:	0140040e 	bge	zero,r5,400e4b4 <__ulp+0x2c>
 400e4a4:	280f883a 	mov	r7,r5
 400e4a8:	3807883a 	mov	r3,r7
 400e4ac:	3005883a 	mov	r2,r6
 400e4b0:	f800283a 	ret
 400e4b4:	008004c4 	movi	r2,19
 400e4b8:	193ffb04 	addi	r4,r3,-20
 400e4bc:	10c00c0e 	bge	r2,r3,400e4f0 <__ulp+0x68>
 400e4c0:	008007c4 	movi	r2,31
 400e4c4:	1107c83a 	sub	r3,r2,r4
 400e4c8:	00800784 	movi	r2,30
 400e4cc:	01400044 	movi	r5,1
 400e4d0:	11000216 	blt	r2,r4,400e4dc <__ulp+0x54>
 400e4d4:	00800044 	movi	r2,1
 400e4d8:	10ca983a 	sll	r5,r2,r3
 400e4dc:	000f883a 	mov	r7,zero
 400e4e0:	280d883a 	mov	r6,r5
 400e4e4:	3807883a 	mov	r3,r7
 400e4e8:	3005883a 	mov	r2,r6
 400e4ec:	f800283a 	ret
 400e4f0:	00800234 	movhi	r2,8
 400e4f4:	10cfd83a 	sra	r7,r2,r3
 400e4f8:	000d883a 	mov	r6,zero
 400e4fc:	3005883a 	mov	r2,r6
 400e500:	3807883a 	mov	r3,r7
 400e504:	f800283a 	ret

0400e508 <__b2d>:
 400e508:	20800417 	ldw	r2,16(r4)
 400e50c:	defff904 	addi	sp,sp,-28
 400e510:	dd000415 	stw	r20,16(sp)
 400e514:	1085883a 	add	r2,r2,r2
 400e518:	25000504 	addi	r20,r4,20
 400e51c:	1085883a 	add	r2,r2,r2
 400e520:	dc000015 	stw	r16,0(sp)
 400e524:	a0a1883a 	add	r16,r20,r2
 400e528:	dd400515 	stw	r21,20(sp)
 400e52c:	857fff17 	ldw	r21,-4(r16)
 400e530:	dc400115 	stw	r17,4(sp)
 400e534:	dfc00615 	stw	ra,24(sp)
 400e538:	a809883a 	mov	r4,r21
 400e53c:	2823883a 	mov	r17,r5
 400e540:	dcc00315 	stw	r19,12(sp)
 400e544:	dc800215 	stw	r18,8(sp)
 400e548:	400e2f40 	call	400e2f4 <__hi0bits>
 400e54c:	100b883a 	mov	r5,r2
 400e550:	00800804 	movi	r2,32
 400e554:	1145c83a 	sub	r2,r2,r5
 400e558:	88800015 	stw	r2,0(r17)
 400e55c:	00800284 	movi	r2,10
 400e560:	80ffff04 	addi	r3,r16,-4
 400e564:	11401416 	blt	r2,r5,400e5b8 <__b2d+0xb0>
 400e568:	008002c4 	movi	r2,11
 400e56c:	1149c83a 	sub	r4,r2,r5
 400e570:	a0c02736 	bltu	r20,r3,400e610 <__b2d+0x108>
 400e574:	000d883a 	mov	r6,zero
 400e578:	28800544 	addi	r2,r5,21
 400e57c:	a906d83a 	srl	r3,r21,r4
 400e580:	a884983a 	sll	r2,r21,r2
 400e584:	1ccffc34 	orhi	r19,r3,16368
 400e588:	11a4b03a 	or	r18,r2,r6
 400e58c:	9005883a 	mov	r2,r18
 400e590:	9807883a 	mov	r3,r19
 400e594:	dfc00617 	ldw	ra,24(sp)
 400e598:	dd400517 	ldw	r21,20(sp)
 400e59c:	dd000417 	ldw	r20,16(sp)
 400e5a0:	dcc00317 	ldw	r19,12(sp)
 400e5a4:	dc800217 	ldw	r18,8(sp)
 400e5a8:	dc400117 	ldw	r17,4(sp)
 400e5ac:	dc000017 	ldw	r16,0(sp)
 400e5b0:	dec00704 	addi	sp,sp,28
 400e5b4:	f800283a 	ret
 400e5b8:	a0c00e36 	bltu	r20,r3,400e5f4 <__b2d+0xec>
 400e5bc:	293ffd44 	addi	r4,r5,-11
 400e5c0:	000d883a 	mov	r6,zero
 400e5c4:	20000f26 	beq	r4,zero,400e604 <__b2d+0xfc>
 400e5c8:	00800804 	movi	r2,32
 400e5cc:	110bc83a 	sub	r5,r2,r4
 400e5d0:	a0c01236 	bltu	r20,r3,400e61c <__b2d+0x114>
 400e5d4:	000f883a 	mov	r7,zero
 400e5d8:	a904983a 	sll	r2,r21,r4
 400e5dc:	3146d83a 	srl	r3,r6,r5
 400e5e0:	3108983a 	sll	r4,r6,r4
 400e5e4:	108ffc34 	orhi	r2,r2,16368
 400e5e8:	18a6b03a 	or	r19,r3,r2
 400e5ec:	3924b03a 	or	r18,r7,r4
 400e5f0:	003fe606 	br	400e58c <__b2d+0x84>
 400e5f4:	293ffd44 	addi	r4,r5,-11
 400e5f8:	81bffe17 	ldw	r6,-8(r16)
 400e5fc:	80fffe04 	addi	r3,r16,-8
 400e600:	203ff11e 	bne	r4,zero,400e5c8 <__b2d+0xc0>
 400e604:	accffc34 	orhi	r19,r21,16368
 400e608:	3025883a 	mov	r18,r6
 400e60c:	003fdf06 	br	400e58c <__b2d+0x84>
 400e610:	18bfff17 	ldw	r2,-4(r3)
 400e614:	110cd83a 	srl	r6,r2,r4
 400e618:	003fd706 	br	400e578 <__b2d+0x70>
 400e61c:	18bfff17 	ldw	r2,-4(r3)
 400e620:	114ed83a 	srl	r7,r2,r5
 400e624:	003fec06 	br	400e5d8 <__b2d+0xd0>

0400e628 <__ratio>:
 400e628:	defff904 	addi	sp,sp,-28
 400e62c:	dc400215 	stw	r17,8(sp)
 400e630:	2823883a 	mov	r17,r5
 400e634:	d80b883a 	mov	r5,sp
 400e638:	dfc00615 	stw	ra,24(sp)
 400e63c:	dd000515 	stw	r20,20(sp)
 400e640:	dcc00415 	stw	r19,16(sp)
 400e644:	dc800315 	stw	r18,12(sp)
 400e648:	2025883a 	mov	r18,r4
 400e64c:	400e5080 	call	400e508 <__b2d>
 400e650:	8809883a 	mov	r4,r17
 400e654:	d9400104 	addi	r5,sp,4
 400e658:	1027883a 	mov	r19,r2
 400e65c:	1829883a 	mov	r20,r3
 400e660:	400e5080 	call	400e508 <__b2d>
 400e664:	89000417 	ldw	r4,16(r17)
 400e668:	91c00417 	ldw	r7,16(r18)
 400e66c:	d9800117 	ldw	r6,4(sp)
 400e670:	180b883a 	mov	r5,r3
 400e674:	390fc83a 	sub	r7,r7,r4
 400e678:	1009883a 	mov	r4,r2
 400e67c:	d8800017 	ldw	r2,0(sp)
 400e680:	380e917a 	slli	r7,r7,5
 400e684:	2011883a 	mov	r8,r4
 400e688:	1185c83a 	sub	r2,r2,r6
 400e68c:	11c5883a 	add	r2,r2,r7
 400e690:	1006953a 	slli	r3,r2,20
 400e694:	2813883a 	mov	r9,r5
 400e698:	00800d0e 	bge	zero,r2,400e6d0 <__ratio+0xa8>
 400e69c:	1d29883a 	add	r20,r3,r20
 400e6a0:	a00b883a 	mov	r5,r20
 400e6a4:	480f883a 	mov	r7,r9
 400e6a8:	9809883a 	mov	r4,r19
 400e6ac:	400d883a 	mov	r6,r8
 400e6b0:	4007df80 	call	4007df8 <__divdf3>
 400e6b4:	dfc00617 	ldw	ra,24(sp)
 400e6b8:	dd000517 	ldw	r20,20(sp)
 400e6bc:	dcc00417 	ldw	r19,16(sp)
 400e6c0:	dc800317 	ldw	r18,12(sp)
 400e6c4:	dc400217 	ldw	r17,8(sp)
 400e6c8:	dec00704 	addi	sp,sp,28
 400e6cc:	f800283a 	ret
 400e6d0:	28d3c83a 	sub	r9,r5,r3
 400e6d4:	003ff206 	br	400e6a0 <__ratio+0x78>

0400e6d8 <_mprec_log10>:
 400e6d8:	defffe04 	addi	sp,sp,-8
 400e6dc:	008005c4 	movi	r2,23
 400e6e0:	dc000015 	stw	r16,0(sp)
 400e6e4:	dfc00115 	stw	ra,4(sp)
 400e6e8:	2021883a 	mov	r16,r4
 400e6ec:	11000c16 	blt	r2,r4,400e720 <_mprec_log10+0x48>
 400e6f0:	200490fa 	slli	r2,r4,3
 400e6f4:	00c100f4 	movhi	r3,1027
 400e6f8:	18f7d004 	addi	r3,r3,-8384
 400e6fc:	10c5883a 	add	r2,r2,r3
 400e700:	12400117 	ldw	r9,4(r2)
 400e704:	12000017 	ldw	r8,0(r2)
 400e708:	4807883a 	mov	r3,r9
 400e70c:	4005883a 	mov	r2,r8
 400e710:	dfc00117 	ldw	ra,4(sp)
 400e714:	dc000017 	ldw	r16,0(sp)
 400e718:	dec00204 	addi	sp,sp,8
 400e71c:	f800283a 	ret
 400e720:	0011883a 	mov	r8,zero
 400e724:	024ffc34 	movhi	r9,16368
 400e728:	0005883a 	mov	r2,zero
 400e72c:	00d00934 	movhi	r3,16420
 400e730:	480b883a 	mov	r5,r9
 400e734:	4009883a 	mov	r4,r8
 400e738:	180f883a 	mov	r7,r3
 400e73c:	100d883a 	mov	r6,r2
 400e740:	4007a340 	call	4007a34 <__muldf3>
 400e744:	843fffc4 	addi	r16,r16,-1
 400e748:	1011883a 	mov	r8,r2
 400e74c:	1813883a 	mov	r9,r3
 400e750:	803ff51e 	bne	r16,zero,400e728 <_mprec_log10+0x50>
 400e754:	4005883a 	mov	r2,r8
 400e758:	4807883a 	mov	r3,r9
 400e75c:	dfc00117 	ldw	ra,4(sp)
 400e760:	dc000017 	ldw	r16,0(sp)
 400e764:	dec00204 	addi	sp,sp,8
 400e768:	f800283a 	ret

0400e76c <__copybits>:
 400e76c:	297fffc4 	addi	r5,r5,-1
 400e770:	30800417 	ldw	r2,16(r6)
 400e774:	280bd17a 	srai	r5,r5,5
 400e778:	31800504 	addi	r6,r6,20
 400e77c:	1085883a 	add	r2,r2,r2
 400e780:	294b883a 	add	r5,r5,r5
 400e784:	294b883a 	add	r5,r5,r5
 400e788:	1085883a 	add	r2,r2,r2
 400e78c:	290b883a 	add	r5,r5,r4
 400e790:	3087883a 	add	r3,r6,r2
 400e794:	29400104 	addi	r5,r5,4
 400e798:	30c0052e 	bgeu	r6,r3,400e7b0 <__copybits+0x44>
 400e79c:	30800017 	ldw	r2,0(r6)
 400e7a0:	31800104 	addi	r6,r6,4
 400e7a4:	20800015 	stw	r2,0(r4)
 400e7a8:	21000104 	addi	r4,r4,4
 400e7ac:	30fffb36 	bltu	r6,r3,400e79c <__copybits+0x30>
 400e7b0:	2140032e 	bgeu	r4,r5,400e7c0 <__copybits+0x54>
 400e7b4:	20000015 	stw	zero,0(r4)
 400e7b8:	21000104 	addi	r4,r4,4
 400e7bc:	217ffd36 	bltu	r4,r5,400e7b4 <__copybits+0x48>
 400e7c0:	f800283a 	ret

0400e7c4 <__any_on>:
 400e7c4:	20800417 	ldw	r2,16(r4)
 400e7c8:	2807d17a 	srai	r3,r5,5
 400e7cc:	21000504 	addi	r4,r4,20
 400e7d0:	10c00d0e 	bge	r2,r3,400e808 <__any_on+0x44>
 400e7d4:	1085883a 	add	r2,r2,r2
 400e7d8:	1085883a 	add	r2,r2,r2
 400e7dc:	208d883a 	add	r6,r4,r2
 400e7e0:	2180182e 	bgeu	r4,r6,400e844 <__any_on+0x80>
 400e7e4:	30bfff17 	ldw	r2,-4(r6)
 400e7e8:	30ffff04 	addi	r3,r6,-4
 400e7ec:	1000041e 	bne	r2,zero,400e800 <__any_on+0x3c>
 400e7f0:	20c0142e 	bgeu	r4,r3,400e844 <__any_on+0x80>
 400e7f4:	18ffff04 	addi	r3,r3,-4
 400e7f8:	18800017 	ldw	r2,0(r3)
 400e7fc:	103ffc26 	beq	r2,zero,400e7f0 <__any_on+0x2c>
 400e800:	00800044 	movi	r2,1
 400e804:	f800283a 	ret
 400e808:	18800a0e 	bge	r3,r2,400e834 <__any_on+0x70>
 400e80c:	294007cc 	andi	r5,r5,31
 400e810:	28000826 	beq	r5,zero,400e834 <__any_on+0x70>
 400e814:	18c5883a 	add	r2,r3,r3
 400e818:	1085883a 	add	r2,r2,r2
 400e81c:	208d883a 	add	r6,r4,r2
 400e820:	30c00017 	ldw	r3,0(r6)
 400e824:	1944d83a 	srl	r2,r3,r5
 400e828:	1144983a 	sll	r2,r2,r5
 400e82c:	18bff41e 	bne	r3,r2,400e800 <__any_on+0x3c>
 400e830:	003feb06 	br	400e7e0 <__any_on+0x1c>
 400e834:	18c5883a 	add	r2,r3,r3
 400e838:	1085883a 	add	r2,r2,r2
 400e83c:	208d883a 	add	r6,r4,r2
 400e840:	003fe706 	br	400e7e0 <__any_on+0x1c>
 400e844:	0005883a 	mov	r2,zero
 400e848:	f800283a 	ret

0400e84c <_Balloc>:
 400e84c:	20c01317 	ldw	r3,76(r4)
 400e850:	defffb04 	addi	sp,sp,-20
 400e854:	dcc00315 	stw	r19,12(sp)
 400e858:	dc800215 	stw	r18,8(sp)
 400e85c:	dfc00415 	stw	ra,16(sp)
 400e860:	2825883a 	mov	r18,r5
 400e864:	dc400115 	stw	r17,4(sp)
 400e868:	dc000015 	stw	r16,0(sp)
 400e86c:	2027883a 	mov	r19,r4
 400e870:	01800404 	movi	r6,16
 400e874:	01400104 	movi	r5,4
 400e878:	18001726 	beq	r3,zero,400e8d8 <_Balloc+0x8c>
 400e87c:	01400044 	movi	r5,1
 400e880:	9485883a 	add	r2,r18,r18
 400e884:	2ca2983a 	sll	r17,r5,r18
 400e888:	1085883a 	add	r2,r2,r2
 400e88c:	10c7883a 	add	r3,r2,r3
 400e890:	1c000017 	ldw	r16,0(r3)
 400e894:	8c4d883a 	add	r6,r17,r17
 400e898:	318d883a 	add	r6,r6,r6
 400e89c:	9809883a 	mov	r4,r19
 400e8a0:	31800504 	addi	r6,r6,20
 400e8a4:	80001226 	beq	r16,zero,400e8f0 <_Balloc+0xa4>
 400e8a8:	80800017 	ldw	r2,0(r16)
 400e8ac:	18800015 	stw	r2,0(r3)
 400e8b0:	80000415 	stw	zero,16(r16)
 400e8b4:	80000315 	stw	zero,12(r16)
 400e8b8:	8005883a 	mov	r2,r16
 400e8bc:	dfc00417 	ldw	ra,16(sp)
 400e8c0:	dcc00317 	ldw	r19,12(sp)
 400e8c4:	dc800217 	ldw	r18,8(sp)
 400e8c8:	dc400117 	ldw	r17,4(sp)
 400e8cc:	dc000017 	ldw	r16,0(sp)
 400e8d0:	dec00504 	addi	sp,sp,20
 400e8d4:	f800283a 	ret
 400e8d8:	400fb740 	call	400fb74 <_calloc_r>
 400e8dc:	1007883a 	mov	r3,r2
 400e8e0:	0021883a 	mov	r16,zero
 400e8e4:	98801315 	stw	r2,76(r19)
 400e8e8:	103fe41e 	bne	r2,zero,400e87c <_Balloc+0x30>
 400e8ec:	003ff206 	br	400e8b8 <_Balloc+0x6c>
 400e8f0:	400fb740 	call	400fb74 <_calloc_r>
 400e8f4:	103ff026 	beq	r2,zero,400e8b8 <_Balloc+0x6c>
 400e8f8:	1021883a 	mov	r16,r2
 400e8fc:	14800115 	stw	r18,4(r2)
 400e900:	14400215 	stw	r17,8(r2)
 400e904:	003fea06 	br	400e8b0 <_Balloc+0x64>

0400e908 <__d2b>:
 400e908:	defff504 	addi	sp,sp,-44
 400e90c:	dcc00515 	stw	r19,20(sp)
 400e910:	04c00044 	movi	r19,1
 400e914:	dc000215 	stw	r16,8(sp)
 400e918:	2821883a 	mov	r16,r5
 400e91c:	980b883a 	mov	r5,r19
 400e920:	ddc00915 	stw	r23,36(sp)
 400e924:	dd800815 	stw	r22,32(sp)
 400e928:	dd400715 	stw	r21,28(sp)
 400e92c:	dd000615 	stw	r20,24(sp)
 400e930:	dc800415 	stw	r18,16(sp)
 400e934:	dc400315 	stw	r17,12(sp)
 400e938:	dfc00a15 	stw	ra,40(sp)
 400e93c:	3023883a 	mov	r17,r6
 400e940:	382d883a 	mov	r22,r7
 400e944:	ddc00b17 	ldw	r23,44(sp)
 400e948:	400e84c0 	call	400e84c <_Balloc>
 400e94c:	1025883a 	mov	r18,r2
 400e950:	00a00034 	movhi	r2,32768
 400e954:	10bfffc4 	addi	r2,r2,-1
 400e958:	8888703a 	and	r4,r17,r2
 400e95c:	202ad53a 	srli	r21,r4,20
 400e960:	00800434 	movhi	r2,16
 400e964:	10bfffc4 	addi	r2,r2,-1
 400e968:	8886703a 	and	r3,r17,r2
 400e96c:	a829003a 	cmpeq	r20,r21,zero
 400e970:	800b883a 	mov	r5,r16
 400e974:	d8c00115 	stw	r3,4(sp)
 400e978:	94000504 	addi	r16,r18,20
 400e97c:	a000021e 	bne	r20,zero,400e988 <__d2b+0x80>
 400e980:	18c00434 	orhi	r3,r3,16
 400e984:	d8c00115 	stw	r3,4(sp)
 400e988:	28002726 	beq	r5,zero,400ea28 <__d2b+0x120>
 400e98c:	d809883a 	mov	r4,sp
 400e990:	d9400015 	stw	r5,0(sp)
 400e994:	400e3640 	call	400e364 <__lo0bits>
 400e998:	100d883a 	mov	r6,r2
 400e99c:	10003526 	beq	r2,zero,400ea74 <__d2b+0x16c>
 400e9a0:	d8c00117 	ldw	r3,4(sp)
 400e9a4:	00800804 	movi	r2,32
 400e9a8:	1185c83a 	sub	r2,r2,r6
 400e9ac:	d9000017 	ldw	r4,0(sp)
 400e9b0:	1886983a 	sll	r3,r3,r2
 400e9b4:	1906b03a 	or	r3,r3,r4
 400e9b8:	90c00515 	stw	r3,20(r18)
 400e9bc:	d8c00117 	ldw	r3,4(sp)
 400e9c0:	1986d83a 	srl	r3,r3,r6
 400e9c4:	d8c00115 	stw	r3,4(sp)
 400e9c8:	180b003a 	cmpeq	r5,r3,zero
 400e9cc:	00800084 	movi	r2,2
 400e9d0:	114bc83a 	sub	r5,r2,r5
 400e9d4:	80c00115 	stw	r3,4(r16)
 400e9d8:	91400415 	stw	r5,16(r18)
 400e9dc:	a0001a1e 	bne	r20,zero,400ea48 <__d2b+0x140>
 400e9e0:	3545883a 	add	r2,r6,r21
 400e9e4:	10bef344 	addi	r2,r2,-1075
 400e9e8:	00c00d44 	movi	r3,53
 400e9ec:	b0800015 	stw	r2,0(r22)
 400e9f0:	1987c83a 	sub	r3,r3,r6
 400e9f4:	b8c00015 	stw	r3,0(r23)
 400e9f8:	9005883a 	mov	r2,r18
 400e9fc:	dfc00a17 	ldw	ra,40(sp)
 400ea00:	ddc00917 	ldw	r23,36(sp)
 400ea04:	dd800817 	ldw	r22,32(sp)
 400ea08:	dd400717 	ldw	r21,28(sp)
 400ea0c:	dd000617 	ldw	r20,24(sp)
 400ea10:	dcc00517 	ldw	r19,20(sp)
 400ea14:	dc800417 	ldw	r18,16(sp)
 400ea18:	dc400317 	ldw	r17,12(sp)
 400ea1c:	dc000217 	ldw	r16,8(sp)
 400ea20:	dec00b04 	addi	sp,sp,44
 400ea24:	f800283a 	ret
 400ea28:	d9000104 	addi	r4,sp,4
 400ea2c:	400e3640 	call	400e364 <__lo0bits>
 400ea30:	11800804 	addi	r6,r2,32
 400ea34:	d8800117 	ldw	r2,4(sp)
 400ea38:	94c00415 	stw	r19,16(r18)
 400ea3c:	980b883a 	mov	r5,r19
 400ea40:	90800515 	stw	r2,20(r18)
 400ea44:	a03fe626 	beq	r20,zero,400e9e0 <__d2b+0xd8>
 400ea48:	2945883a 	add	r2,r5,r5
 400ea4c:	1085883a 	add	r2,r2,r2
 400ea50:	1405883a 	add	r2,r2,r16
 400ea54:	113fff17 	ldw	r4,-4(r2)
 400ea58:	30fef384 	addi	r3,r6,-1074
 400ea5c:	2820917a 	slli	r16,r5,5
 400ea60:	b0c00015 	stw	r3,0(r22)
 400ea64:	400e2f40 	call	400e2f4 <__hi0bits>
 400ea68:	80a1c83a 	sub	r16,r16,r2
 400ea6c:	bc000015 	stw	r16,0(r23)
 400ea70:	003fe106 	br	400e9f8 <__d2b+0xf0>
 400ea74:	d8800017 	ldw	r2,0(sp)
 400ea78:	90800515 	stw	r2,20(r18)
 400ea7c:	d8c00117 	ldw	r3,4(sp)
 400ea80:	003fd106 	br	400e9c8 <__d2b+0xc0>

0400ea84 <__mdiff>:
 400ea84:	defffb04 	addi	sp,sp,-20
 400ea88:	dc000015 	stw	r16,0(sp)
 400ea8c:	2821883a 	mov	r16,r5
 400ea90:	dc800215 	stw	r18,8(sp)
 400ea94:	300b883a 	mov	r5,r6
 400ea98:	2025883a 	mov	r18,r4
 400ea9c:	8009883a 	mov	r4,r16
 400eaa0:	dc400115 	stw	r17,4(sp)
 400eaa4:	dfc00415 	stw	ra,16(sp)
 400eaa8:	dcc00315 	stw	r19,12(sp)
 400eaac:	3023883a 	mov	r17,r6
 400eab0:	400e4280 	call	400e428 <__mcmp>
 400eab4:	10004226 	beq	r2,zero,400ebc0 <__mdiff+0x13c>
 400eab8:	10005016 	blt	r2,zero,400ebfc <__mdiff+0x178>
 400eabc:	0027883a 	mov	r19,zero
 400eac0:	81400117 	ldw	r5,4(r16)
 400eac4:	9009883a 	mov	r4,r18
 400eac8:	400e84c0 	call	400e84c <_Balloc>
 400eacc:	1019883a 	mov	r12,r2
 400ead0:	82800417 	ldw	r10,16(r16)
 400ead4:	88800417 	ldw	r2,16(r17)
 400ead8:	81800504 	addi	r6,r16,20
 400eadc:	5287883a 	add	r3,r10,r10
 400eae0:	1085883a 	add	r2,r2,r2
 400eae4:	18c7883a 	add	r3,r3,r3
 400eae8:	1085883a 	add	r2,r2,r2
 400eaec:	8a000504 	addi	r8,r17,20
 400eaf0:	64c00315 	stw	r19,12(r12)
 400eaf4:	30db883a 	add	r13,r6,r3
 400eaf8:	4097883a 	add	r11,r8,r2
 400eafc:	61c00504 	addi	r7,r12,20
 400eb00:	0013883a 	mov	r9,zero
 400eb04:	31000017 	ldw	r4,0(r6)
 400eb08:	41400017 	ldw	r5,0(r8)
 400eb0c:	42000104 	addi	r8,r8,4
 400eb10:	20bfffcc 	andi	r2,r4,65535
 400eb14:	28ffffcc 	andi	r3,r5,65535
 400eb18:	10c5c83a 	sub	r2,r2,r3
 400eb1c:	1245883a 	add	r2,r2,r9
 400eb20:	2008d43a 	srli	r4,r4,16
 400eb24:	280ad43a 	srli	r5,r5,16
 400eb28:	1007d43a 	srai	r3,r2,16
 400eb2c:	3880000d 	sth	r2,0(r7)
 400eb30:	2149c83a 	sub	r4,r4,r5
 400eb34:	20c9883a 	add	r4,r4,r3
 400eb38:	3900008d 	sth	r4,2(r7)
 400eb3c:	31800104 	addi	r6,r6,4
 400eb40:	39c00104 	addi	r7,r7,4
 400eb44:	2013d43a 	srai	r9,r4,16
 400eb48:	42ffee36 	bltu	r8,r11,400eb04 <__mdiff+0x80>
 400eb4c:	33400c2e 	bgeu	r6,r13,400eb80 <__mdiff+0xfc>
 400eb50:	30800017 	ldw	r2,0(r6)
 400eb54:	31800104 	addi	r6,r6,4
 400eb58:	10ffffcc 	andi	r3,r2,65535
 400eb5c:	1a47883a 	add	r3,r3,r9
 400eb60:	1004d43a 	srli	r2,r2,16
 400eb64:	1809d43a 	srai	r4,r3,16
 400eb68:	38c0000d 	sth	r3,0(r7)
 400eb6c:	1105883a 	add	r2,r2,r4
 400eb70:	3880008d 	sth	r2,2(r7)
 400eb74:	1013d43a 	srai	r9,r2,16
 400eb78:	39c00104 	addi	r7,r7,4
 400eb7c:	337ff436 	bltu	r6,r13,400eb50 <__mdiff+0xcc>
 400eb80:	38bfff17 	ldw	r2,-4(r7)
 400eb84:	38ffff04 	addi	r3,r7,-4
 400eb88:	1000041e 	bne	r2,zero,400eb9c <__mdiff+0x118>
 400eb8c:	18ffff04 	addi	r3,r3,-4
 400eb90:	18800017 	ldw	r2,0(r3)
 400eb94:	52bfffc4 	addi	r10,r10,-1
 400eb98:	103ffc26 	beq	r2,zero,400eb8c <__mdiff+0x108>
 400eb9c:	6005883a 	mov	r2,r12
 400eba0:	62800415 	stw	r10,16(r12)
 400eba4:	dfc00417 	ldw	ra,16(sp)
 400eba8:	dcc00317 	ldw	r19,12(sp)
 400ebac:	dc800217 	ldw	r18,8(sp)
 400ebb0:	dc400117 	ldw	r17,4(sp)
 400ebb4:	dc000017 	ldw	r16,0(sp)
 400ebb8:	dec00504 	addi	sp,sp,20
 400ebbc:	f800283a 	ret
 400ebc0:	9009883a 	mov	r4,r18
 400ebc4:	000b883a 	mov	r5,zero
 400ebc8:	400e84c0 	call	400e84c <_Balloc>
 400ebcc:	1019883a 	mov	r12,r2
 400ebd0:	00800044 	movi	r2,1
 400ebd4:	60800415 	stw	r2,16(r12)
 400ebd8:	6005883a 	mov	r2,r12
 400ebdc:	60000515 	stw	zero,20(r12)
 400ebe0:	dfc00417 	ldw	ra,16(sp)
 400ebe4:	dcc00317 	ldw	r19,12(sp)
 400ebe8:	dc800217 	ldw	r18,8(sp)
 400ebec:	dc400117 	ldw	r17,4(sp)
 400ebf0:	dc000017 	ldw	r16,0(sp)
 400ebf4:	dec00504 	addi	sp,sp,20
 400ebf8:	f800283a 	ret
 400ebfc:	880d883a 	mov	r6,r17
 400ec00:	04c00044 	movi	r19,1
 400ec04:	8023883a 	mov	r17,r16
 400ec08:	3021883a 	mov	r16,r6
 400ec0c:	003fac06 	br	400eac0 <__mdiff+0x3c>

0400ec10 <__lshift>:
 400ec10:	defff904 	addi	sp,sp,-28
 400ec14:	28800417 	ldw	r2,16(r5)
 400ec18:	dc000015 	stw	r16,0(sp)
 400ec1c:	3021d17a 	srai	r16,r6,5
 400ec20:	28c00217 	ldw	r3,8(r5)
 400ec24:	10800044 	addi	r2,r2,1
 400ec28:	dc400115 	stw	r17,4(sp)
 400ec2c:	80a3883a 	add	r17,r16,r2
 400ec30:	dd400515 	stw	r21,20(sp)
 400ec34:	dd000415 	stw	r20,16(sp)
 400ec38:	dc800215 	stw	r18,8(sp)
 400ec3c:	dfc00615 	stw	ra,24(sp)
 400ec40:	2825883a 	mov	r18,r5
 400ec44:	dcc00315 	stw	r19,12(sp)
 400ec48:	3029883a 	mov	r20,r6
 400ec4c:	202b883a 	mov	r21,r4
 400ec50:	29400117 	ldw	r5,4(r5)
 400ec54:	1c40030e 	bge	r3,r17,400ec64 <__lshift+0x54>
 400ec58:	18c7883a 	add	r3,r3,r3
 400ec5c:	29400044 	addi	r5,r5,1
 400ec60:	1c7ffd16 	blt	r3,r17,400ec58 <__lshift+0x48>
 400ec64:	a809883a 	mov	r4,r21
 400ec68:	400e84c0 	call	400e84c <_Balloc>
 400ec6c:	1027883a 	mov	r19,r2
 400ec70:	11400504 	addi	r5,r2,20
 400ec74:	0400090e 	bge	zero,r16,400ec9c <__lshift+0x8c>
 400ec78:	2805883a 	mov	r2,r5
 400ec7c:	0007883a 	mov	r3,zero
 400ec80:	18c00044 	addi	r3,r3,1
 400ec84:	10000015 	stw	zero,0(r2)
 400ec88:	10800104 	addi	r2,r2,4
 400ec8c:	80fffc1e 	bne	r16,r3,400ec80 <__lshift+0x70>
 400ec90:	8405883a 	add	r2,r16,r16
 400ec94:	1085883a 	add	r2,r2,r2
 400ec98:	288b883a 	add	r5,r5,r2
 400ec9c:	90800417 	ldw	r2,16(r18)
 400eca0:	91000504 	addi	r4,r18,20
 400eca4:	a18007cc 	andi	r6,r20,31
 400eca8:	1085883a 	add	r2,r2,r2
 400ecac:	1085883a 	add	r2,r2,r2
 400ecb0:	208f883a 	add	r7,r4,r2
 400ecb4:	30001e26 	beq	r6,zero,400ed30 <__lshift+0x120>
 400ecb8:	00800804 	movi	r2,32
 400ecbc:	1191c83a 	sub	r8,r2,r6
 400ecc0:	0007883a 	mov	r3,zero
 400ecc4:	20800017 	ldw	r2,0(r4)
 400ecc8:	1184983a 	sll	r2,r2,r6
 400eccc:	1884b03a 	or	r2,r3,r2
 400ecd0:	28800015 	stw	r2,0(r5)
 400ecd4:	20c00017 	ldw	r3,0(r4)
 400ecd8:	21000104 	addi	r4,r4,4
 400ecdc:	29400104 	addi	r5,r5,4
 400ece0:	1a06d83a 	srl	r3,r3,r8
 400ece4:	21fff736 	bltu	r4,r7,400ecc4 <__lshift+0xb4>
 400ece8:	28c00015 	stw	r3,0(r5)
 400ecec:	18000126 	beq	r3,zero,400ecf4 <__lshift+0xe4>
 400ecf0:	8c400044 	addi	r17,r17,1
 400ecf4:	88bfffc4 	addi	r2,r17,-1
 400ecf8:	98800415 	stw	r2,16(r19)
 400ecfc:	a809883a 	mov	r4,r21
 400ed00:	900b883a 	mov	r5,r18
 400ed04:	400e2cc0 	call	400e2cc <_Bfree>
 400ed08:	9805883a 	mov	r2,r19
 400ed0c:	dfc00617 	ldw	ra,24(sp)
 400ed10:	dd400517 	ldw	r21,20(sp)
 400ed14:	dd000417 	ldw	r20,16(sp)
 400ed18:	dcc00317 	ldw	r19,12(sp)
 400ed1c:	dc800217 	ldw	r18,8(sp)
 400ed20:	dc400117 	ldw	r17,4(sp)
 400ed24:	dc000017 	ldw	r16,0(sp)
 400ed28:	dec00704 	addi	sp,sp,28
 400ed2c:	f800283a 	ret
 400ed30:	20800017 	ldw	r2,0(r4)
 400ed34:	21000104 	addi	r4,r4,4
 400ed38:	28800015 	stw	r2,0(r5)
 400ed3c:	29400104 	addi	r5,r5,4
 400ed40:	21ffec2e 	bgeu	r4,r7,400ecf4 <__lshift+0xe4>
 400ed44:	20800017 	ldw	r2,0(r4)
 400ed48:	21000104 	addi	r4,r4,4
 400ed4c:	28800015 	stw	r2,0(r5)
 400ed50:	29400104 	addi	r5,r5,4
 400ed54:	21fff636 	bltu	r4,r7,400ed30 <__lshift+0x120>
 400ed58:	003fe606 	br	400ecf4 <__lshift+0xe4>

0400ed5c <__multiply>:
 400ed5c:	defff904 	addi	sp,sp,-28
 400ed60:	dcc00315 	stw	r19,12(sp)
 400ed64:	dc800215 	stw	r18,8(sp)
 400ed68:	2cc00417 	ldw	r19,16(r5)
 400ed6c:	34800417 	ldw	r18,16(r6)
 400ed70:	dd000415 	stw	r20,16(sp)
 400ed74:	dc400115 	stw	r17,4(sp)
 400ed78:	dfc00615 	stw	ra,24(sp)
 400ed7c:	dd400515 	stw	r21,20(sp)
 400ed80:	dc000015 	stw	r16,0(sp)
 400ed84:	2823883a 	mov	r17,r5
 400ed88:	3029883a 	mov	r20,r6
 400ed8c:	9c80040e 	bge	r19,r18,400eda0 <__multiply+0x44>
 400ed90:	9027883a 	mov	r19,r18
 400ed94:	2c800417 	ldw	r18,16(r5)
 400ed98:	2829883a 	mov	r20,r5
 400ed9c:	3023883a 	mov	r17,r6
 400eda0:	88800217 	ldw	r2,8(r17)
 400eda4:	9ca1883a 	add	r16,r19,r18
 400eda8:	89400117 	ldw	r5,4(r17)
 400edac:	1400010e 	bge	r2,r16,400edb4 <__multiply+0x58>
 400edb0:	29400044 	addi	r5,r5,1
 400edb4:	400e84c0 	call	400e84c <_Balloc>
 400edb8:	102b883a 	mov	r21,r2
 400edbc:	8405883a 	add	r2,r16,r16
 400edc0:	1085883a 	add	r2,r2,r2
 400edc4:	a9000504 	addi	r4,r21,20
 400edc8:	209d883a 	add	r14,r4,r2
 400edcc:	2380042e 	bgeu	r4,r14,400ede0 <__multiply+0x84>
 400edd0:	2005883a 	mov	r2,r4
 400edd4:	10000015 	stw	zero,0(r2)
 400edd8:	10800104 	addi	r2,r2,4
 400eddc:	13bffd36 	bltu	r2,r14,400edd4 <__multiply+0x78>
 400ede0:	9485883a 	add	r2,r18,r18
 400ede4:	9cc7883a 	add	r3,r19,r19
 400ede8:	a1800504 	addi	r6,r20,20
 400edec:	1085883a 	add	r2,r2,r2
 400edf0:	8b400504 	addi	r13,r17,20
 400edf4:	18c7883a 	add	r3,r3,r3
 400edf8:	309f883a 	add	r15,r6,r2
 400edfc:	68d7883a 	add	r11,r13,r3
 400ee00:	33c03b2e 	bgeu	r6,r15,400eef0 <__multiply+0x194>
 400ee04:	2019883a 	mov	r12,r4
 400ee08:	30800017 	ldw	r2,0(r6)
 400ee0c:	127fffcc 	andi	r9,r2,65535
 400ee10:	48001826 	beq	r9,zero,400ee74 <__multiply+0x118>
 400ee14:	6811883a 	mov	r8,r13
 400ee18:	600f883a 	mov	r7,r12
 400ee1c:	0015883a 	mov	r10,zero
 400ee20:	40c00017 	ldw	r3,0(r8)
 400ee24:	39400017 	ldw	r5,0(r7)
 400ee28:	42000104 	addi	r8,r8,4
 400ee2c:	193fffcc 	andi	r4,r3,65535
 400ee30:	4909383a 	mul	r4,r9,r4
 400ee34:	1806d43a 	srli	r3,r3,16
 400ee38:	28bfffcc 	andi	r2,r5,65535
 400ee3c:	5085883a 	add	r2,r10,r2
 400ee40:	2089883a 	add	r4,r4,r2
 400ee44:	48c7383a 	mul	r3,r9,r3
 400ee48:	280ad43a 	srli	r5,r5,16
 400ee4c:	2004d43a 	srli	r2,r4,16
 400ee50:	3900000d 	sth	r4,0(r7)
 400ee54:	1947883a 	add	r3,r3,r5
 400ee58:	10c5883a 	add	r2,r2,r3
 400ee5c:	3880008d 	sth	r2,2(r7)
 400ee60:	1014d43a 	srli	r10,r2,16
 400ee64:	39c00104 	addi	r7,r7,4
 400ee68:	42ffed36 	bltu	r8,r11,400ee20 <__multiply+0xc4>
 400ee6c:	3a800015 	stw	r10,0(r7)
 400ee70:	30800017 	ldw	r2,0(r6)
 400ee74:	1012d43a 	srli	r9,r2,16
 400ee78:	48001926 	beq	r9,zero,400eee0 <__multiply+0x184>
 400ee7c:	60800017 	ldw	r2,0(r12)
 400ee80:	6811883a 	mov	r8,r13
 400ee84:	600f883a 	mov	r7,r12
 400ee88:	0015883a 	mov	r10,zero
 400ee8c:	100b883a 	mov	r5,r2
 400ee90:	41000017 	ldw	r4,0(r8)
 400ee94:	2806d43a 	srli	r3,r5,16
 400ee98:	3880000d 	sth	r2,0(r7)
 400ee9c:	20bfffcc 	andi	r2,r4,65535
 400eea0:	4885383a 	mul	r2,r9,r2
 400eea4:	50c7883a 	add	r3,r10,r3
 400eea8:	2008d43a 	srli	r4,r4,16
 400eeac:	10c5883a 	add	r2,r2,r3
 400eeb0:	3880008d 	sth	r2,2(r7)
 400eeb4:	39c00104 	addi	r7,r7,4
 400eeb8:	39400017 	ldw	r5,0(r7)
 400eebc:	4909383a 	mul	r4,r9,r4
 400eec0:	1004d43a 	srli	r2,r2,16
 400eec4:	28ffffcc 	andi	r3,r5,65535
 400eec8:	20c9883a 	add	r4,r4,r3
 400eecc:	1105883a 	add	r2,r2,r4
 400eed0:	42000104 	addi	r8,r8,4
 400eed4:	1014d43a 	srli	r10,r2,16
 400eed8:	42ffed36 	bltu	r8,r11,400ee90 <__multiply+0x134>
 400eedc:	38800015 	stw	r2,0(r7)
 400eee0:	31800104 	addi	r6,r6,4
 400eee4:	33c0022e 	bgeu	r6,r15,400eef0 <__multiply+0x194>
 400eee8:	63000104 	addi	r12,r12,4
 400eeec:	003fc606 	br	400ee08 <__multiply+0xac>
 400eef0:	0400090e 	bge	zero,r16,400ef18 <__multiply+0x1bc>
 400eef4:	70bfff17 	ldw	r2,-4(r14)
 400eef8:	70ffff04 	addi	r3,r14,-4
 400eefc:	10000326 	beq	r2,zero,400ef0c <__multiply+0x1b0>
 400ef00:	00000506 	br	400ef18 <__multiply+0x1bc>
 400ef04:	18800017 	ldw	r2,0(r3)
 400ef08:	1000031e 	bne	r2,zero,400ef18 <__multiply+0x1bc>
 400ef0c:	843fffc4 	addi	r16,r16,-1
 400ef10:	18ffff04 	addi	r3,r3,-4
 400ef14:	803ffb1e 	bne	r16,zero,400ef04 <__multiply+0x1a8>
 400ef18:	a805883a 	mov	r2,r21
 400ef1c:	ac000415 	stw	r16,16(r21)
 400ef20:	dfc00617 	ldw	ra,24(sp)
 400ef24:	dd400517 	ldw	r21,20(sp)
 400ef28:	dd000417 	ldw	r20,16(sp)
 400ef2c:	dcc00317 	ldw	r19,12(sp)
 400ef30:	dc800217 	ldw	r18,8(sp)
 400ef34:	dc400117 	ldw	r17,4(sp)
 400ef38:	dc000017 	ldw	r16,0(sp)
 400ef3c:	dec00704 	addi	sp,sp,28
 400ef40:	f800283a 	ret

0400ef44 <__i2b>:
 400ef44:	defffd04 	addi	sp,sp,-12
 400ef48:	dc000015 	stw	r16,0(sp)
 400ef4c:	04000044 	movi	r16,1
 400ef50:	dc800115 	stw	r18,4(sp)
 400ef54:	2825883a 	mov	r18,r5
 400ef58:	800b883a 	mov	r5,r16
 400ef5c:	dfc00215 	stw	ra,8(sp)
 400ef60:	400e84c0 	call	400e84c <_Balloc>
 400ef64:	14000415 	stw	r16,16(r2)
 400ef68:	14800515 	stw	r18,20(r2)
 400ef6c:	dfc00217 	ldw	ra,8(sp)
 400ef70:	dc800117 	ldw	r18,4(sp)
 400ef74:	dc000017 	ldw	r16,0(sp)
 400ef78:	dec00304 	addi	sp,sp,12
 400ef7c:	f800283a 	ret

0400ef80 <__multadd>:
 400ef80:	defffa04 	addi	sp,sp,-24
 400ef84:	dc800215 	stw	r18,8(sp)
 400ef88:	2c800417 	ldw	r18,16(r5)
 400ef8c:	dd000415 	stw	r20,16(sp)
 400ef90:	dcc00315 	stw	r19,12(sp)
 400ef94:	dc000015 	stw	r16,0(sp)
 400ef98:	dfc00515 	stw	ra,20(sp)
 400ef9c:	3821883a 	mov	r16,r7
 400efa0:	dc400115 	stw	r17,4(sp)
 400efa4:	2827883a 	mov	r19,r5
 400efa8:	2029883a 	mov	r20,r4
 400efac:	2a000504 	addi	r8,r5,20
 400efb0:	000f883a 	mov	r7,zero
 400efb4:	40800017 	ldw	r2,0(r8)
 400efb8:	39c00044 	addi	r7,r7,1
 400efbc:	10ffffcc 	andi	r3,r2,65535
 400efc0:	1987383a 	mul	r3,r3,r6
 400efc4:	1004d43a 	srli	r2,r2,16
 400efc8:	1c07883a 	add	r3,r3,r16
 400efcc:	180ad43a 	srli	r5,r3,16
 400efd0:	1185383a 	mul	r2,r2,r6
 400efd4:	18ffffcc 	andi	r3,r3,65535
 400efd8:	1145883a 	add	r2,r2,r5
 400efdc:	1008943a 	slli	r4,r2,16
 400efe0:	1020d43a 	srli	r16,r2,16
 400efe4:	20c9883a 	add	r4,r4,r3
 400efe8:	41000015 	stw	r4,0(r8)
 400efec:	42000104 	addi	r8,r8,4
 400eff0:	3cbff016 	blt	r7,r18,400efb4 <__multadd+0x34>
 400eff4:	80000826 	beq	r16,zero,400f018 <__multadd+0x98>
 400eff8:	98800217 	ldw	r2,8(r19)
 400effc:	90800f0e 	bge	r18,r2,400f03c <__multadd+0xbc>
 400f000:	9485883a 	add	r2,r18,r18
 400f004:	1085883a 	add	r2,r2,r2
 400f008:	14c5883a 	add	r2,r2,r19
 400f00c:	90c00044 	addi	r3,r18,1
 400f010:	14000515 	stw	r16,20(r2)
 400f014:	98c00415 	stw	r3,16(r19)
 400f018:	9805883a 	mov	r2,r19
 400f01c:	dfc00517 	ldw	ra,20(sp)
 400f020:	dd000417 	ldw	r20,16(sp)
 400f024:	dcc00317 	ldw	r19,12(sp)
 400f028:	dc800217 	ldw	r18,8(sp)
 400f02c:	dc400117 	ldw	r17,4(sp)
 400f030:	dc000017 	ldw	r16,0(sp)
 400f034:	dec00604 	addi	sp,sp,24
 400f038:	f800283a 	ret
 400f03c:	99400117 	ldw	r5,4(r19)
 400f040:	a009883a 	mov	r4,r20
 400f044:	29400044 	addi	r5,r5,1
 400f048:	400e84c0 	call	400e84c <_Balloc>
 400f04c:	99800417 	ldw	r6,16(r19)
 400f050:	99400304 	addi	r5,r19,12
 400f054:	11000304 	addi	r4,r2,12
 400f058:	318d883a 	add	r6,r6,r6
 400f05c:	318d883a 	add	r6,r6,r6
 400f060:	31800204 	addi	r6,r6,8
 400f064:	1023883a 	mov	r17,r2
 400f068:	40091980 	call	4009198 <memcpy>
 400f06c:	980b883a 	mov	r5,r19
 400f070:	a009883a 	mov	r4,r20
 400f074:	400e2cc0 	call	400e2cc <_Bfree>
 400f078:	8827883a 	mov	r19,r17
 400f07c:	003fe006 	br	400f000 <__multadd+0x80>

0400f080 <__pow5mult>:
 400f080:	defffa04 	addi	sp,sp,-24
 400f084:	308000cc 	andi	r2,r6,3
 400f088:	dd000415 	stw	r20,16(sp)
 400f08c:	dcc00315 	stw	r19,12(sp)
 400f090:	dc000015 	stw	r16,0(sp)
 400f094:	dfc00515 	stw	ra,20(sp)
 400f098:	dc800215 	stw	r18,8(sp)
 400f09c:	dc400115 	stw	r17,4(sp)
 400f0a0:	3021883a 	mov	r16,r6
 400f0a4:	2027883a 	mov	r19,r4
 400f0a8:	2829883a 	mov	r20,r5
 400f0ac:	10002b1e 	bne	r2,zero,400f15c <__pow5mult+0xdc>
 400f0b0:	8025d0ba 	srai	r18,r16,2
 400f0b4:	90001b26 	beq	r18,zero,400f124 <__pow5mult+0xa4>
 400f0b8:	9c001217 	ldw	r16,72(r19)
 400f0bc:	8000081e 	bne	r16,zero,400f0e0 <__pow5mult+0x60>
 400f0c0:	00003006 	br	400f184 <__pow5mult+0x104>
 400f0c4:	800b883a 	mov	r5,r16
 400f0c8:	800d883a 	mov	r6,r16
 400f0cc:	9809883a 	mov	r4,r19
 400f0d0:	90001426 	beq	r18,zero,400f124 <__pow5mult+0xa4>
 400f0d4:	80800017 	ldw	r2,0(r16)
 400f0d8:	10001b26 	beq	r2,zero,400f148 <__pow5mult+0xc8>
 400f0dc:	1021883a 	mov	r16,r2
 400f0e0:	9080004c 	andi	r2,r18,1
 400f0e4:	1005003a 	cmpeq	r2,r2,zero
 400f0e8:	9025d07a 	srai	r18,r18,1
 400f0ec:	800d883a 	mov	r6,r16
 400f0f0:	9809883a 	mov	r4,r19
 400f0f4:	a00b883a 	mov	r5,r20
 400f0f8:	103ff21e 	bne	r2,zero,400f0c4 <__pow5mult+0x44>
 400f0fc:	400ed5c0 	call	400ed5c <__multiply>
 400f100:	a00b883a 	mov	r5,r20
 400f104:	9809883a 	mov	r4,r19
 400f108:	1023883a 	mov	r17,r2
 400f10c:	400e2cc0 	call	400e2cc <_Bfree>
 400f110:	8829883a 	mov	r20,r17
 400f114:	800b883a 	mov	r5,r16
 400f118:	800d883a 	mov	r6,r16
 400f11c:	9809883a 	mov	r4,r19
 400f120:	903fec1e 	bne	r18,zero,400f0d4 <__pow5mult+0x54>
 400f124:	a005883a 	mov	r2,r20
 400f128:	dfc00517 	ldw	ra,20(sp)
 400f12c:	dd000417 	ldw	r20,16(sp)
 400f130:	dcc00317 	ldw	r19,12(sp)
 400f134:	dc800217 	ldw	r18,8(sp)
 400f138:	dc400117 	ldw	r17,4(sp)
 400f13c:	dc000017 	ldw	r16,0(sp)
 400f140:	dec00604 	addi	sp,sp,24
 400f144:	f800283a 	ret
 400f148:	400ed5c0 	call	400ed5c <__multiply>
 400f14c:	80800015 	stw	r2,0(r16)
 400f150:	1021883a 	mov	r16,r2
 400f154:	10000015 	stw	zero,0(r2)
 400f158:	003fe106 	br	400f0e0 <__pow5mult+0x60>
 400f15c:	1085883a 	add	r2,r2,r2
 400f160:	00c100f4 	movhi	r3,1027
 400f164:	18f81604 	addi	r3,r3,-8104
 400f168:	1085883a 	add	r2,r2,r2
 400f16c:	10c5883a 	add	r2,r2,r3
 400f170:	11bfff17 	ldw	r6,-4(r2)
 400f174:	000f883a 	mov	r7,zero
 400f178:	400ef800 	call	400ef80 <__multadd>
 400f17c:	1029883a 	mov	r20,r2
 400f180:	003fcb06 	br	400f0b0 <__pow5mult+0x30>
 400f184:	9809883a 	mov	r4,r19
 400f188:	01409c44 	movi	r5,625
 400f18c:	400ef440 	call	400ef44 <__i2b>
 400f190:	98801215 	stw	r2,72(r19)
 400f194:	1021883a 	mov	r16,r2
 400f198:	10000015 	stw	zero,0(r2)
 400f19c:	003fd006 	br	400f0e0 <__pow5mult+0x60>

0400f1a0 <__s2b>:
 400f1a0:	defff904 	addi	sp,sp,-28
 400f1a4:	dcc00315 	stw	r19,12(sp)
 400f1a8:	dc800215 	stw	r18,8(sp)
 400f1ac:	2827883a 	mov	r19,r5
 400f1b0:	2025883a 	mov	r18,r4
 400f1b4:	01400244 	movi	r5,9
 400f1b8:	39000204 	addi	r4,r7,8
 400f1bc:	dd000415 	stw	r20,16(sp)
 400f1c0:	dc400115 	stw	r17,4(sp)
 400f1c4:	dfc00615 	stw	ra,24(sp)
 400f1c8:	dd400515 	stw	r21,20(sp)
 400f1cc:	dc000015 	stw	r16,0(sp)
 400f1d0:	3829883a 	mov	r20,r7
 400f1d4:	3023883a 	mov	r17,r6
 400f1d8:	40083240 	call	4008324 <__divsi3>
 400f1dc:	00c00044 	movi	r3,1
 400f1e0:	1880350e 	bge	r3,r2,400f2b8 <__s2b+0x118>
 400f1e4:	000b883a 	mov	r5,zero
 400f1e8:	18c7883a 	add	r3,r3,r3
 400f1ec:	29400044 	addi	r5,r5,1
 400f1f0:	18bffd16 	blt	r3,r2,400f1e8 <__s2b+0x48>
 400f1f4:	9009883a 	mov	r4,r18
 400f1f8:	400e84c0 	call	400e84c <_Balloc>
 400f1fc:	1011883a 	mov	r8,r2
 400f200:	d8800717 	ldw	r2,28(sp)
 400f204:	00c00044 	movi	r3,1
 400f208:	01800244 	movi	r6,9
 400f20c:	40800515 	stw	r2,20(r8)
 400f210:	40c00415 	stw	r3,16(r8)
 400f214:	3440260e 	bge	r6,r17,400f2b0 <__s2b+0x110>
 400f218:	3021883a 	mov	r16,r6
 400f21c:	99ab883a 	add	r21,r19,r6
 400f220:	9c05883a 	add	r2,r19,r16
 400f224:	11c00007 	ldb	r7,0(r2)
 400f228:	400b883a 	mov	r5,r8
 400f22c:	9009883a 	mov	r4,r18
 400f230:	39fff404 	addi	r7,r7,-48
 400f234:	01800284 	movi	r6,10
 400f238:	400ef800 	call	400ef80 <__multadd>
 400f23c:	84000044 	addi	r16,r16,1
 400f240:	1011883a 	mov	r8,r2
 400f244:	8c3ff61e 	bne	r17,r16,400f220 <__s2b+0x80>
 400f248:	ac45883a 	add	r2,r21,r17
 400f24c:	117ffe04 	addi	r5,r2,-8
 400f250:	880d883a 	mov	r6,r17
 400f254:	35000c0e 	bge	r6,r20,400f288 <__s2b+0xe8>
 400f258:	a185c83a 	sub	r2,r20,r6
 400f25c:	2821883a 	mov	r16,r5
 400f260:	28a3883a 	add	r17,r5,r2
 400f264:	81c00007 	ldb	r7,0(r16)
 400f268:	400b883a 	mov	r5,r8
 400f26c:	9009883a 	mov	r4,r18
 400f270:	39fff404 	addi	r7,r7,-48
 400f274:	01800284 	movi	r6,10
 400f278:	400ef800 	call	400ef80 <__multadd>
 400f27c:	84000044 	addi	r16,r16,1
 400f280:	1011883a 	mov	r8,r2
 400f284:	847ff71e 	bne	r16,r17,400f264 <__s2b+0xc4>
 400f288:	4005883a 	mov	r2,r8
 400f28c:	dfc00617 	ldw	ra,24(sp)
 400f290:	dd400517 	ldw	r21,20(sp)
 400f294:	dd000417 	ldw	r20,16(sp)
 400f298:	dcc00317 	ldw	r19,12(sp)
 400f29c:	dc800217 	ldw	r18,8(sp)
 400f2a0:	dc400117 	ldw	r17,4(sp)
 400f2a4:	dc000017 	ldw	r16,0(sp)
 400f2a8:	dec00704 	addi	sp,sp,28
 400f2ac:	f800283a 	ret
 400f2b0:	99400284 	addi	r5,r19,10
 400f2b4:	003fe706 	br	400f254 <__s2b+0xb4>
 400f2b8:	000b883a 	mov	r5,zero
 400f2bc:	003fcd06 	br	400f1f4 <__s2b+0x54>

0400f2c0 <_realloc_r>:
 400f2c0:	defff404 	addi	sp,sp,-48
 400f2c4:	dd800815 	stw	r22,32(sp)
 400f2c8:	dc800415 	stw	r18,16(sp)
 400f2cc:	dc400315 	stw	r17,12(sp)
 400f2d0:	dfc00b15 	stw	ra,44(sp)
 400f2d4:	df000a15 	stw	fp,40(sp)
 400f2d8:	ddc00915 	stw	r23,36(sp)
 400f2dc:	dd400715 	stw	r21,28(sp)
 400f2e0:	dd000615 	stw	r20,24(sp)
 400f2e4:	dcc00515 	stw	r19,20(sp)
 400f2e8:	dc000215 	stw	r16,8(sp)
 400f2ec:	2825883a 	mov	r18,r5
 400f2f0:	3023883a 	mov	r17,r6
 400f2f4:	202d883a 	mov	r22,r4
 400f2f8:	2800c926 	beq	r5,zero,400f620 <_realloc_r+0x360>
 400f2fc:	40119740 	call	4011974 <__malloc_lock>
 400f300:	943ffe04 	addi	r16,r18,-8
 400f304:	88c002c4 	addi	r3,r17,11
 400f308:	00800584 	movi	r2,22
 400f30c:	82000117 	ldw	r8,4(r16)
 400f310:	10c01b2e 	bgeu	r2,r3,400f380 <_realloc_r+0xc0>
 400f314:	00bffe04 	movi	r2,-8
 400f318:	188e703a 	and	r7,r3,r2
 400f31c:	3839883a 	mov	fp,r7
 400f320:	38001a16 	blt	r7,zero,400f38c <_realloc_r+0xcc>
 400f324:	e4401936 	bltu	fp,r17,400f38c <_realloc_r+0xcc>
 400f328:	013fff04 	movi	r4,-4
 400f32c:	4126703a 	and	r19,r8,r4
 400f330:	99c02616 	blt	r19,r7,400f3cc <_realloc_r+0x10c>
 400f334:	802b883a 	mov	r21,r16
 400f338:	9829883a 	mov	r20,r19
 400f33c:	84000204 	addi	r16,r16,8
 400f340:	a80f883a 	mov	r7,r21
 400f344:	a70dc83a 	sub	r6,r20,fp
 400f348:	008003c4 	movi	r2,15
 400f34c:	1180c136 	bltu	r2,r6,400f654 <_realloc_r+0x394>
 400f350:	38800117 	ldw	r2,4(r7)
 400f354:	a549883a 	add	r4,r20,r21
 400f358:	1080004c 	andi	r2,r2,1
 400f35c:	a084b03a 	or	r2,r20,r2
 400f360:	38800115 	stw	r2,4(r7)
 400f364:	20c00117 	ldw	r3,4(r4)
 400f368:	18c00054 	ori	r3,r3,1
 400f36c:	20c00115 	stw	r3,4(r4)
 400f370:	b009883a 	mov	r4,r22
 400f374:	40119940 	call	4011994 <__malloc_unlock>
 400f378:	8023883a 	mov	r17,r16
 400f37c:	00000606 	br	400f398 <_realloc_r+0xd8>
 400f380:	01c00404 	movi	r7,16
 400f384:	3839883a 	mov	fp,r7
 400f388:	e47fe72e 	bgeu	fp,r17,400f328 <_realloc_r+0x68>
 400f38c:	00800304 	movi	r2,12
 400f390:	0023883a 	mov	r17,zero
 400f394:	b0800015 	stw	r2,0(r22)
 400f398:	8805883a 	mov	r2,r17
 400f39c:	dfc00b17 	ldw	ra,44(sp)
 400f3a0:	df000a17 	ldw	fp,40(sp)
 400f3a4:	ddc00917 	ldw	r23,36(sp)
 400f3a8:	dd800817 	ldw	r22,32(sp)
 400f3ac:	dd400717 	ldw	r21,28(sp)
 400f3b0:	dd000617 	ldw	r20,24(sp)
 400f3b4:	dcc00517 	ldw	r19,20(sp)
 400f3b8:	dc800417 	ldw	r18,16(sp)
 400f3bc:	dc400317 	ldw	r17,12(sp)
 400f3c0:	dc000217 	ldw	r16,8(sp)
 400f3c4:	dec00c04 	addi	sp,sp,48
 400f3c8:	f800283a 	ret
 400f3cc:	008100f4 	movhi	r2,1027
 400f3d0:	10800f04 	addi	r2,r2,60
 400f3d4:	12400217 	ldw	r9,8(r2)
 400f3d8:	84cd883a 	add	r6,r16,r19
 400f3dc:	802b883a 	mov	r21,r16
 400f3e0:	3240b926 	beq	r6,r9,400f6c8 <_realloc_r+0x408>
 400f3e4:	31400117 	ldw	r5,4(r6)
 400f3e8:	00bfff84 	movi	r2,-2
 400f3ec:	2884703a 	and	r2,r5,r2
 400f3f0:	1185883a 	add	r2,r2,r6
 400f3f4:	10c00117 	ldw	r3,4(r2)
 400f3f8:	18c0004c 	andi	r3,r3,1
 400f3fc:	1807003a 	cmpeq	r3,r3,zero
 400f400:	1800a326 	beq	r3,zero,400f690 <_realloc_r+0x3d0>
 400f404:	2908703a 	and	r4,r5,r4
 400f408:	9929883a 	add	r20,r19,r4
 400f40c:	a1c0a30e 	bge	r20,r7,400f69c <_realloc_r+0x3dc>
 400f410:	4080004c 	andi	r2,r8,1
 400f414:	1000551e 	bne	r2,zero,400f56c <_realloc_r+0x2ac>
 400f418:	80800017 	ldw	r2,0(r16)
 400f41c:	80afc83a 	sub	r23,r16,r2
 400f420:	b8c00117 	ldw	r3,4(r23)
 400f424:	00bfff04 	movi	r2,-4
 400f428:	1884703a 	and	r2,r3,r2
 400f42c:	30002e26 	beq	r6,zero,400f4e8 <_realloc_r+0x228>
 400f430:	3240b926 	beq	r6,r9,400f718 <_realloc_r+0x458>
 400f434:	98a9883a 	add	r20,r19,r2
 400f438:	2509883a 	add	r4,r4,r20
 400f43c:	d9000015 	stw	r4,0(sp)
 400f440:	21c02a16 	blt	r4,r7,400f4ec <_realloc_r+0x22c>
 400f444:	30800317 	ldw	r2,12(r6)
 400f448:	30c00217 	ldw	r3,8(r6)
 400f44c:	01400904 	movi	r5,36
 400f450:	99bfff04 	addi	r6,r19,-4
 400f454:	18800315 	stw	r2,12(r3)
 400f458:	10c00215 	stw	r3,8(r2)
 400f45c:	b9000317 	ldw	r4,12(r23)
 400f460:	b8800217 	ldw	r2,8(r23)
 400f464:	b82b883a 	mov	r21,r23
 400f468:	bc000204 	addi	r16,r23,8
 400f46c:	20800215 	stw	r2,8(r4)
 400f470:	11000315 	stw	r4,12(r2)
 400f474:	2980e436 	bltu	r5,r6,400f808 <_realloc_r+0x548>
 400f478:	008004c4 	movi	r2,19
 400f47c:	9009883a 	mov	r4,r18
 400f480:	8011883a 	mov	r8,r16
 400f484:	11800f2e 	bgeu	r2,r6,400f4c4 <_realloc_r+0x204>
 400f488:	90800017 	ldw	r2,0(r18)
 400f48c:	ba000404 	addi	r8,r23,16
 400f490:	91000204 	addi	r4,r18,8
 400f494:	b8800215 	stw	r2,8(r23)
 400f498:	90c00117 	ldw	r3,4(r18)
 400f49c:	008006c4 	movi	r2,27
 400f4a0:	b8c00315 	stw	r3,12(r23)
 400f4a4:	1180072e 	bgeu	r2,r6,400f4c4 <_realloc_r+0x204>
 400f4a8:	90c00217 	ldw	r3,8(r18)
 400f4ac:	ba000604 	addi	r8,r23,24
 400f4b0:	91000404 	addi	r4,r18,16
 400f4b4:	b8c00415 	stw	r3,16(r23)
 400f4b8:	90800317 	ldw	r2,12(r18)
 400f4bc:	b8800515 	stw	r2,20(r23)
 400f4c0:	3140e726 	beq	r6,r5,400f860 <_realloc_r+0x5a0>
 400f4c4:	20800017 	ldw	r2,0(r4)
 400f4c8:	dd000017 	ldw	r20,0(sp)
 400f4cc:	b80f883a 	mov	r7,r23
 400f4d0:	40800015 	stw	r2,0(r8)
 400f4d4:	20c00117 	ldw	r3,4(r4)
 400f4d8:	40c00115 	stw	r3,4(r8)
 400f4dc:	20800217 	ldw	r2,8(r4)
 400f4e0:	40800215 	stw	r2,8(r8)
 400f4e4:	003f9706 	br	400f344 <_realloc_r+0x84>
 400f4e8:	98a9883a 	add	r20,r19,r2
 400f4ec:	a1c01f16 	blt	r20,r7,400f56c <_realloc_r+0x2ac>
 400f4f0:	b8c00317 	ldw	r3,12(r23)
 400f4f4:	b8800217 	ldw	r2,8(r23)
 400f4f8:	99bfff04 	addi	r6,r19,-4
 400f4fc:	01400904 	movi	r5,36
 400f500:	b82b883a 	mov	r21,r23
 400f504:	18800215 	stw	r2,8(r3)
 400f508:	10c00315 	stw	r3,12(r2)
 400f50c:	bc000204 	addi	r16,r23,8
 400f510:	2980c336 	bltu	r5,r6,400f820 <_realloc_r+0x560>
 400f514:	008004c4 	movi	r2,19
 400f518:	9009883a 	mov	r4,r18
 400f51c:	8011883a 	mov	r8,r16
 400f520:	11800f2e 	bgeu	r2,r6,400f560 <_realloc_r+0x2a0>
 400f524:	90800017 	ldw	r2,0(r18)
 400f528:	ba000404 	addi	r8,r23,16
 400f52c:	91000204 	addi	r4,r18,8
 400f530:	b8800215 	stw	r2,8(r23)
 400f534:	90c00117 	ldw	r3,4(r18)
 400f538:	008006c4 	movi	r2,27
 400f53c:	b8c00315 	stw	r3,12(r23)
 400f540:	1180072e 	bgeu	r2,r6,400f560 <_realloc_r+0x2a0>
 400f544:	90c00217 	ldw	r3,8(r18)
 400f548:	ba000604 	addi	r8,r23,24
 400f54c:	91000404 	addi	r4,r18,16
 400f550:	b8c00415 	stw	r3,16(r23)
 400f554:	90800317 	ldw	r2,12(r18)
 400f558:	b8800515 	stw	r2,20(r23)
 400f55c:	3140c726 	beq	r6,r5,400f87c <_realloc_r+0x5bc>
 400f560:	20800017 	ldw	r2,0(r4)
 400f564:	b80f883a 	mov	r7,r23
 400f568:	003fd906 	br	400f4d0 <_realloc_r+0x210>
 400f56c:	880b883a 	mov	r5,r17
 400f570:	b009883a 	mov	r4,r22
 400f574:	4008a580 	call	4008a58 <_malloc_r>
 400f578:	1023883a 	mov	r17,r2
 400f57c:	10002526 	beq	r2,zero,400f614 <_realloc_r+0x354>
 400f580:	80800117 	ldw	r2,4(r16)
 400f584:	00ffff84 	movi	r3,-2
 400f588:	893ffe04 	addi	r4,r17,-8
 400f58c:	10c4703a 	and	r2,r2,r3
 400f590:	8085883a 	add	r2,r16,r2
 400f594:	20809526 	beq	r4,r2,400f7ec <_realloc_r+0x52c>
 400f598:	99bfff04 	addi	r6,r19,-4
 400f59c:	01c00904 	movi	r7,36
 400f5a0:	39804536 	bltu	r7,r6,400f6b8 <_realloc_r+0x3f8>
 400f5a4:	008004c4 	movi	r2,19
 400f5a8:	9009883a 	mov	r4,r18
 400f5ac:	880b883a 	mov	r5,r17
 400f5b0:	11800f2e 	bgeu	r2,r6,400f5f0 <_realloc_r+0x330>
 400f5b4:	90800017 	ldw	r2,0(r18)
 400f5b8:	89400204 	addi	r5,r17,8
 400f5bc:	91000204 	addi	r4,r18,8
 400f5c0:	88800015 	stw	r2,0(r17)
 400f5c4:	90c00117 	ldw	r3,4(r18)
 400f5c8:	008006c4 	movi	r2,27
 400f5cc:	88c00115 	stw	r3,4(r17)
 400f5d0:	1180072e 	bgeu	r2,r6,400f5f0 <_realloc_r+0x330>
 400f5d4:	90c00217 	ldw	r3,8(r18)
 400f5d8:	89400404 	addi	r5,r17,16
 400f5dc:	91000404 	addi	r4,r18,16
 400f5e0:	88c00215 	stw	r3,8(r17)
 400f5e4:	90800317 	ldw	r2,12(r18)
 400f5e8:	88800315 	stw	r2,12(r17)
 400f5ec:	31c09126 	beq	r6,r7,400f834 <_realloc_r+0x574>
 400f5f0:	20800017 	ldw	r2,0(r4)
 400f5f4:	28800015 	stw	r2,0(r5)
 400f5f8:	20c00117 	ldw	r3,4(r4)
 400f5fc:	28c00115 	stw	r3,4(r5)
 400f600:	20800217 	ldw	r2,8(r4)
 400f604:	28800215 	stw	r2,8(r5)
 400f608:	900b883a 	mov	r5,r18
 400f60c:	b009883a 	mov	r4,r22
 400f610:	400d5800 	call	400d580 <_free_r>
 400f614:	b009883a 	mov	r4,r22
 400f618:	40119940 	call	4011994 <__malloc_unlock>
 400f61c:	003f5e06 	br	400f398 <_realloc_r+0xd8>
 400f620:	300b883a 	mov	r5,r6
 400f624:	dfc00b17 	ldw	ra,44(sp)
 400f628:	df000a17 	ldw	fp,40(sp)
 400f62c:	ddc00917 	ldw	r23,36(sp)
 400f630:	dd800817 	ldw	r22,32(sp)
 400f634:	dd400717 	ldw	r21,28(sp)
 400f638:	dd000617 	ldw	r20,24(sp)
 400f63c:	dcc00517 	ldw	r19,20(sp)
 400f640:	dc800417 	ldw	r18,16(sp)
 400f644:	dc400317 	ldw	r17,12(sp)
 400f648:	dc000217 	ldw	r16,8(sp)
 400f64c:	dec00c04 	addi	sp,sp,48
 400f650:	4008a581 	jmpi	4008a58 <_malloc_r>
 400f654:	38800117 	ldw	r2,4(r7)
 400f658:	e54b883a 	add	r5,fp,r21
 400f65c:	31000054 	ori	r4,r6,1
 400f660:	1080004c 	andi	r2,r2,1
 400f664:	1704b03a 	or	r2,r2,fp
 400f668:	38800115 	stw	r2,4(r7)
 400f66c:	29000115 	stw	r4,4(r5)
 400f670:	2987883a 	add	r3,r5,r6
 400f674:	18800117 	ldw	r2,4(r3)
 400f678:	29400204 	addi	r5,r5,8
 400f67c:	b009883a 	mov	r4,r22
 400f680:	10800054 	ori	r2,r2,1
 400f684:	18800115 	stw	r2,4(r3)
 400f688:	400d5800 	call	400d580 <_free_r>
 400f68c:	003f3806 	br	400f370 <_realloc_r+0xb0>
 400f690:	000d883a 	mov	r6,zero
 400f694:	0009883a 	mov	r4,zero
 400f698:	003f5d06 	br	400f410 <_realloc_r+0x150>
 400f69c:	30c00217 	ldw	r3,8(r6)
 400f6a0:	30800317 	ldw	r2,12(r6)
 400f6a4:	800f883a 	mov	r7,r16
 400f6a8:	84000204 	addi	r16,r16,8
 400f6ac:	10c00215 	stw	r3,8(r2)
 400f6b0:	18800315 	stw	r2,12(r3)
 400f6b4:	003f2306 	br	400f344 <_realloc_r+0x84>
 400f6b8:	8809883a 	mov	r4,r17
 400f6bc:	900b883a 	mov	r5,r18
 400f6c0:	400e1ec0 	call	400e1ec <memmove>
 400f6c4:	003fd006 	br	400f608 <_realloc_r+0x348>
 400f6c8:	30800117 	ldw	r2,4(r6)
 400f6cc:	e0c00404 	addi	r3,fp,16
 400f6d0:	1108703a 	and	r4,r2,r4
 400f6d4:	9905883a 	add	r2,r19,r4
 400f6d8:	10ff4d16 	blt	r2,r3,400f410 <_realloc_r+0x150>
 400f6dc:	1705c83a 	sub	r2,r2,fp
 400f6e0:	870b883a 	add	r5,r16,fp
 400f6e4:	10800054 	ori	r2,r2,1
 400f6e8:	28800115 	stw	r2,4(r5)
 400f6ec:	80c00117 	ldw	r3,4(r16)
 400f6f0:	008100f4 	movhi	r2,1027
 400f6f4:	10800f04 	addi	r2,r2,60
 400f6f8:	b009883a 	mov	r4,r22
 400f6fc:	18c0004c 	andi	r3,r3,1
 400f700:	e0c6b03a 	or	r3,fp,r3
 400f704:	11400215 	stw	r5,8(r2)
 400f708:	80c00115 	stw	r3,4(r16)
 400f70c:	40119940 	call	4011994 <__malloc_unlock>
 400f710:	84400204 	addi	r17,r16,8
 400f714:	003f2006 	br	400f398 <_realloc_r+0xd8>
 400f718:	98a9883a 	add	r20,r19,r2
 400f71c:	2509883a 	add	r4,r4,r20
 400f720:	e0800404 	addi	r2,fp,16
 400f724:	d9000115 	stw	r4,4(sp)
 400f728:	20bf7016 	blt	r4,r2,400f4ec <_realloc_r+0x22c>
 400f72c:	b8c00317 	ldw	r3,12(r23)
 400f730:	b8800217 	ldw	r2,8(r23)
 400f734:	99bfff04 	addi	r6,r19,-4
 400f738:	01400904 	movi	r5,36
 400f73c:	18800215 	stw	r2,8(r3)
 400f740:	10c00315 	stw	r3,12(r2)
 400f744:	bc400204 	addi	r17,r23,8
 400f748:	29804136 	bltu	r5,r6,400f850 <_realloc_r+0x590>
 400f74c:	008004c4 	movi	r2,19
 400f750:	9009883a 	mov	r4,r18
 400f754:	880f883a 	mov	r7,r17
 400f758:	11800f2e 	bgeu	r2,r6,400f798 <_realloc_r+0x4d8>
 400f75c:	90800017 	ldw	r2,0(r18)
 400f760:	b9c00404 	addi	r7,r23,16
 400f764:	91000204 	addi	r4,r18,8
 400f768:	b8800215 	stw	r2,8(r23)
 400f76c:	90c00117 	ldw	r3,4(r18)
 400f770:	008006c4 	movi	r2,27
 400f774:	b8c00315 	stw	r3,12(r23)
 400f778:	1180072e 	bgeu	r2,r6,400f798 <_realloc_r+0x4d8>
 400f77c:	90c00217 	ldw	r3,8(r18)
 400f780:	b9c00604 	addi	r7,r23,24
 400f784:	91000404 	addi	r4,r18,16
 400f788:	b8c00415 	stw	r3,16(r23)
 400f78c:	90800317 	ldw	r2,12(r18)
 400f790:	b8800515 	stw	r2,20(r23)
 400f794:	31404026 	beq	r6,r5,400f898 <_realloc_r+0x5d8>
 400f798:	20800017 	ldw	r2,0(r4)
 400f79c:	38800015 	stw	r2,0(r7)
 400f7a0:	20c00117 	ldw	r3,4(r4)
 400f7a4:	38c00115 	stw	r3,4(r7)
 400f7a8:	20800217 	ldw	r2,8(r4)
 400f7ac:	38800215 	stw	r2,8(r7)
 400f7b0:	d8c00117 	ldw	r3,4(sp)
 400f7b4:	bf0b883a 	add	r5,r23,fp
 400f7b8:	b009883a 	mov	r4,r22
 400f7bc:	1f05c83a 	sub	r2,r3,fp
 400f7c0:	10800054 	ori	r2,r2,1
 400f7c4:	28800115 	stw	r2,4(r5)
 400f7c8:	b8c00117 	ldw	r3,4(r23)
 400f7cc:	008100f4 	movhi	r2,1027
 400f7d0:	10800f04 	addi	r2,r2,60
 400f7d4:	11400215 	stw	r5,8(r2)
 400f7d8:	18c0004c 	andi	r3,r3,1
 400f7dc:	e0c6b03a 	or	r3,fp,r3
 400f7e0:	b8c00115 	stw	r3,4(r23)
 400f7e4:	40119940 	call	4011994 <__malloc_unlock>
 400f7e8:	003eeb06 	br	400f398 <_realloc_r+0xd8>
 400f7ec:	20800117 	ldw	r2,4(r4)
 400f7f0:	00ffff04 	movi	r3,-4
 400f7f4:	800f883a 	mov	r7,r16
 400f7f8:	10c4703a 	and	r2,r2,r3
 400f7fc:	98a9883a 	add	r20,r19,r2
 400f800:	84000204 	addi	r16,r16,8
 400f804:	003ecf06 	br	400f344 <_realloc_r+0x84>
 400f808:	900b883a 	mov	r5,r18
 400f80c:	8009883a 	mov	r4,r16
 400f810:	400e1ec0 	call	400e1ec <memmove>
 400f814:	dd000017 	ldw	r20,0(sp)
 400f818:	b80f883a 	mov	r7,r23
 400f81c:	003ec906 	br	400f344 <_realloc_r+0x84>
 400f820:	900b883a 	mov	r5,r18
 400f824:	8009883a 	mov	r4,r16
 400f828:	400e1ec0 	call	400e1ec <memmove>
 400f82c:	b80f883a 	mov	r7,r23
 400f830:	003ec406 	br	400f344 <_realloc_r+0x84>
 400f834:	90c00417 	ldw	r3,16(r18)
 400f838:	89400604 	addi	r5,r17,24
 400f83c:	91000604 	addi	r4,r18,24
 400f840:	88c00415 	stw	r3,16(r17)
 400f844:	90800517 	ldw	r2,20(r18)
 400f848:	88800515 	stw	r2,20(r17)
 400f84c:	003f6806 	br	400f5f0 <_realloc_r+0x330>
 400f850:	900b883a 	mov	r5,r18
 400f854:	8809883a 	mov	r4,r17
 400f858:	400e1ec0 	call	400e1ec <memmove>
 400f85c:	003fd406 	br	400f7b0 <_realloc_r+0x4f0>
 400f860:	90c00417 	ldw	r3,16(r18)
 400f864:	91000604 	addi	r4,r18,24
 400f868:	ba000804 	addi	r8,r23,32
 400f86c:	b8c00615 	stw	r3,24(r23)
 400f870:	90800517 	ldw	r2,20(r18)
 400f874:	b8800715 	stw	r2,28(r23)
 400f878:	003f1206 	br	400f4c4 <_realloc_r+0x204>
 400f87c:	90c00417 	ldw	r3,16(r18)
 400f880:	91000604 	addi	r4,r18,24
 400f884:	ba000804 	addi	r8,r23,32
 400f888:	b8c00615 	stw	r3,24(r23)
 400f88c:	90800517 	ldw	r2,20(r18)
 400f890:	b8800715 	stw	r2,28(r23)
 400f894:	003f3206 	br	400f560 <_realloc_r+0x2a0>
 400f898:	90c00417 	ldw	r3,16(r18)
 400f89c:	91000604 	addi	r4,r18,24
 400f8a0:	b9c00804 	addi	r7,r23,32
 400f8a4:	b8c00615 	stw	r3,24(r23)
 400f8a8:	90800517 	ldw	r2,20(r18)
 400f8ac:	b8800715 	stw	r2,28(r23)
 400f8b0:	003fb906 	br	400f798 <_realloc_r+0x4d8>

0400f8b4 <__isinfd>:
 400f8b4:	200d883a 	mov	r6,r4
 400f8b8:	0109c83a 	sub	r4,zero,r4
 400f8bc:	2188b03a 	or	r4,r4,r6
 400f8c0:	2008d7fa 	srli	r4,r4,31
 400f8c4:	00a00034 	movhi	r2,32768
 400f8c8:	10bfffc4 	addi	r2,r2,-1
 400f8cc:	1144703a 	and	r2,r2,r5
 400f8d0:	2088b03a 	or	r4,r4,r2
 400f8d4:	009ffc34 	movhi	r2,32752
 400f8d8:	1105c83a 	sub	r2,r2,r4
 400f8dc:	0087c83a 	sub	r3,zero,r2
 400f8e0:	10c4b03a 	or	r2,r2,r3
 400f8e4:	1004d7fa 	srli	r2,r2,31
 400f8e8:	00c00044 	movi	r3,1
 400f8ec:	1885c83a 	sub	r2,r3,r2
 400f8f0:	f800283a 	ret

0400f8f4 <__sclose>:
 400f8f4:	2940038f 	ldh	r5,14(r5)
 400f8f8:	400fc281 	jmpi	400fc28 <_close_r>

0400f8fc <__sseek>:
 400f8fc:	defffe04 	addi	sp,sp,-8
 400f900:	dc000015 	stw	r16,0(sp)
 400f904:	2821883a 	mov	r16,r5
 400f908:	2940038f 	ldh	r5,14(r5)
 400f90c:	dfc00115 	stw	ra,4(sp)
 400f910:	400fea00 	call	400fea0 <_lseek_r>
 400f914:	1007883a 	mov	r3,r2
 400f918:	00bfffc4 	movi	r2,-1
 400f91c:	18800926 	beq	r3,r2,400f944 <__sseek+0x48>
 400f920:	8080030b 	ldhu	r2,12(r16)
 400f924:	80c01415 	stw	r3,80(r16)
 400f928:	10840014 	ori	r2,r2,4096
 400f92c:	8080030d 	sth	r2,12(r16)
 400f930:	1805883a 	mov	r2,r3
 400f934:	dfc00117 	ldw	ra,4(sp)
 400f938:	dc000017 	ldw	r16,0(sp)
 400f93c:	dec00204 	addi	sp,sp,8
 400f940:	f800283a 	ret
 400f944:	8080030b 	ldhu	r2,12(r16)
 400f948:	10bbffcc 	andi	r2,r2,61439
 400f94c:	8080030d 	sth	r2,12(r16)
 400f950:	1805883a 	mov	r2,r3
 400f954:	dfc00117 	ldw	ra,4(sp)
 400f958:	dc000017 	ldw	r16,0(sp)
 400f95c:	dec00204 	addi	sp,sp,8
 400f960:	f800283a 	ret

0400f964 <__swrite>:
 400f964:	2880030b 	ldhu	r2,12(r5)
 400f968:	defffb04 	addi	sp,sp,-20
 400f96c:	dcc00315 	stw	r19,12(sp)
 400f970:	1080400c 	andi	r2,r2,256
 400f974:	dc800215 	stw	r18,8(sp)
 400f978:	dc400115 	stw	r17,4(sp)
 400f97c:	dc000015 	stw	r16,0(sp)
 400f980:	3027883a 	mov	r19,r6
 400f984:	3825883a 	mov	r18,r7
 400f988:	dfc00415 	stw	ra,16(sp)
 400f98c:	2821883a 	mov	r16,r5
 400f990:	000d883a 	mov	r6,zero
 400f994:	01c00084 	movi	r7,2
 400f998:	2023883a 	mov	r17,r4
 400f99c:	10000226 	beq	r2,zero,400f9a8 <__swrite+0x44>
 400f9a0:	2940038f 	ldh	r5,14(r5)
 400f9a4:	400fea00 	call	400fea0 <_lseek_r>
 400f9a8:	8080030b 	ldhu	r2,12(r16)
 400f9ac:	8140038f 	ldh	r5,14(r16)
 400f9b0:	8809883a 	mov	r4,r17
 400f9b4:	10bbffcc 	andi	r2,r2,61439
 400f9b8:	980d883a 	mov	r6,r19
 400f9bc:	900f883a 	mov	r7,r18
 400f9c0:	8080030d 	sth	r2,12(r16)
 400f9c4:	dfc00417 	ldw	ra,16(sp)
 400f9c8:	dcc00317 	ldw	r19,12(sp)
 400f9cc:	dc800217 	ldw	r18,8(sp)
 400f9d0:	dc400117 	ldw	r17,4(sp)
 400f9d4:	dc000017 	ldw	r16,0(sp)
 400f9d8:	dec00504 	addi	sp,sp,20
 400f9dc:	400fafc1 	jmpi	400fafc <_write_r>

0400f9e0 <__sread>:
 400f9e0:	defffe04 	addi	sp,sp,-8
 400f9e4:	dc000015 	stw	r16,0(sp)
 400f9e8:	2821883a 	mov	r16,r5
 400f9ec:	2940038f 	ldh	r5,14(r5)
 400f9f0:	dfc00115 	stw	ra,4(sp)
 400f9f4:	400ff180 	call	400ff18 <_read_r>
 400f9f8:	1007883a 	mov	r3,r2
 400f9fc:	10000816 	blt	r2,zero,400fa20 <__sread+0x40>
 400fa00:	80801417 	ldw	r2,80(r16)
 400fa04:	10c5883a 	add	r2,r2,r3
 400fa08:	80801415 	stw	r2,80(r16)
 400fa0c:	1805883a 	mov	r2,r3
 400fa10:	dfc00117 	ldw	ra,4(sp)
 400fa14:	dc000017 	ldw	r16,0(sp)
 400fa18:	dec00204 	addi	sp,sp,8
 400fa1c:	f800283a 	ret
 400fa20:	8080030b 	ldhu	r2,12(r16)
 400fa24:	10bbffcc 	andi	r2,r2,61439
 400fa28:	8080030d 	sth	r2,12(r16)
 400fa2c:	1805883a 	mov	r2,r3
 400fa30:	dfc00117 	ldw	ra,4(sp)
 400fa34:	dc000017 	ldw	r16,0(sp)
 400fa38:	dec00204 	addi	sp,sp,8
 400fa3c:	f800283a 	ret

0400fa40 <strcmp>:
 400fa40:	2144b03a 	or	r2,r4,r5
 400fa44:	108000cc 	andi	r2,r2,3
 400fa48:	10001d1e 	bne	r2,zero,400fac0 <strcmp+0x80>
 400fa4c:	200f883a 	mov	r7,r4
 400fa50:	28800017 	ldw	r2,0(r5)
 400fa54:	21000017 	ldw	r4,0(r4)
 400fa58:	280d883a 	mov	r6,r5
 400fa5c:	2080161e 	bne	r4,r2,400fab8 <strcmp+0x78>
 400fa60:	023fbff4 	movhi	r8,65279
 400fa64:	423fbfc4 	addi	r8,r8,-257
 400fa68:	2207883a 	add	r3,r4,r8
 400fa6c:	01602074 	movhi	r5,32897
 400fa70:	29602004 	addi	r5,r5,-32640
 400fa74:	1946703a 	and	r3,r3,r5
 400fa78:	0104303a 	nor	r2,zero,r4
 400fa7c:	10c4703a 	and	r2,r2,r3
 400fa80:	10001c1e 	bne	r2,zero,400faf4 <strcmp+0xb4>
 400fa84:	4013883a 	mov	r9,r8
 400fa88:	2811883a 	mov	r8,r5
 400fa8c:	00000106 	br	400fa94 <strcmp+0x54>
 400fa90:	1800181e 	bne	r3,zero,400faf4 <strcmp+0xb4>
 400fa94:	39c00104 	addi	r7,r7,4
 400fa98:	39000017 	ldw	r4,0(r7)
 400fa9c:	31800104 	addi	r6,r6,4
 400faa0:	31400017 	ldw	r5,0(r6)
 400faa4:	2245883a 	add	r2,r4,r9
 400faa8:	1204703a 	and	r2,r2,r8
 400faac:	0106303a 	nor	r3,zero,r4
 400fab0:	1886703a 	and	r3,r3,r2
 400fab4:	217ff626 	beq	r4,r5,400fa90 <strcmp+0x50>
 400fab8:	3809883a 	mov	r4,r7
 400fabc:	300b883a 	mov	r5,r6
 400fac0:	20c00007 	ldb	r3,0(r4)
 400fac4:	1800051e 	bne	r3,zero,400fadc <strcmp+0x9c>
 400fac8:	00000606 	br	400fae4 <strcmp+0xa4>
 400facc:	21000044 	addi	r4,r4,1
 400fad0:	20c00007 	ldb	r3,0(r4)
 400fad4:	29400044 	addi	r5,r5,1
 400fad8:	18000226 	beq	r3,zero,400fae4 <strcmp+0xa4>
 400fadc:	28800007 	ldb	r2,0(r5)
 400fae0:	18bffa26 	beq	r3,r2,400facc <strcmp+0x8c>
 400fae4:	20c00003 	ldbu	r3,0(r4)
 400fae8:	28800003 	ldbu	r2,0(r5)
 400faec:	1885c83a 	sub	r2,r3,r2
 400faf0:	f800283a 	ret
 400faf4:	0005883a 	mov	r2,zero
 400faf8:	f800283a 	ret

0400fafc <_write_r>:
 400fafc:	defffd04 	addi	sp,sp,-12
 400fb00:	dc000015 	stw	r16,0(sp)
 400fb04:	040100f4 	movhi	r16,1027
 400fb08:	84133204 	addi	r16,r16,19656
 400fb0c:	dc400115 	stw	r17,4(sp)
 400fb10:	80000015 	stw	zero,0(r16)
 400fb14:	2023883a 	mov	r17,r4
 400fb18:	2809883a 	mov	r4,r5
 400fb1c:	300b883a 	mov	r5,r6
 400fb20:	380d883a 	mov	r6,r7
 400fb24:	dfc00215 	stw	ra,8(sp)
 400fb28:	4011e240 	call	4011e24 <write>
 400fb2c:	1007883a 	mov	r3,r2
 400fb30:	00bfffc4 	movi	r2,-1
 400fb34:	18800626 	beq	r3,r2,400fb50 <_write_r+0x54>
 400fb38:	1805883a 	mov	r2,r3
 400fb3c:	dfc00217 	ldw	ra,8(sp)
 400fb40:	dc400117 	ldw	r17,4(sp)
 400fb44:	dc000017 	ldw	r16,0(sp)
 400fb48:	dec00304 	addi	sp,sp,12
 400fb4c:	f800283a 	ret
 400fb50:	80800017 	ldw	r2,0(r16)
 400fb54:	103ff826 	beq	r2,zero,400fb38 <_write_r+0x3c>
 400fb58:	88800015 	stw	r2,0(r17)
 400fb5c:	1805883a 	mov	r2,r3
 400fb60:	dfc00217 	ldw	ra,8(sp)
 400fb64:	dc400117 	ldw	r17,4(sp)
 400fb68:	dc000017 	ldw	r16,0(sp)
 400fb6c:	dec00304 	addi	sp,sp,12
 400fb70:	f800283a 	ret

0400fb74 <_calloc_r>:
 400fb74:	298b383a 	mul	r5,r5,r6
 400fb78:	defffe04 	addi	sp,sp,-8
 400fb7c:	dc000015 	stw	r16,0(sp)
 400fb80:	dfc00115 	stw	ra,4(sp)
 400fb84:	4008a580 	call	4008a58 <_malloc_r>
 400fb88:	1021883a 	mov	r16,r2
 400fb8c:	01c00904 	movi	r7,36
 400fb90:	10000d26 	beq	r2,zero,400fbc8 <_calloc_r+0x54>
 400fb94:	10ffff17 	ldw	r3,-4(r2)
 400fb98:	1009883a 	mov	r4,r2
 400fb9c:	00bfff04 	movi	r2,-4
 400fba0:	1886703a 	and	r3,r3,r2
 400fba4:	1887883a 	add	r3,r3,r2
 400fba8:	180d883a 	mov	r6,r3
 400fbac:	000b883a 	mov	r5,zero
 400fbb0:	38c01736 	bltu	r7,r3,400fc10 <_calloc_r+0x9c>
 400fbb4:	008004c4 	movi	r2,19
 400fbb8:	10c00836 	bltu	r2,r3,400fbdc <_calloc_r+0x68>
 400fbbc:	20000215 	stw	zero,8(r4)
 400fbc0:	20000015 	stw	zero,0(r4)
 400fbc4:	20000115 	stw	zero,4(r4)
 400fbc8:	8005883a 	mov	r2,r16
 400fbcc:	dfc00117 	ldw	ra,4(sp)
 400fbd0:	dc000017 	ldw	r16,0(sp)
 400fbd4:	dec00204 	addi	sp,sp,8
 400fbd8:	f800283a 	ret
 400fbdc:	008006c4 	movi	r2,27
 400fbe0:	80000015 	stw	zero,0(r16)
 400fbe4:	80000115 	stw	zero,4(r16)
 400fbe8:	81000204 	addi	r4,r16,8
 400fbec:	10fff32e 	bgeu	r2,r3,400fbbc <_calloc_r+0x48>
 400fbf0:	80000215 	stw	zero,8(r16)
 400fbf4:	80000315 	stw	zero,12(r16)
 400fbf8:	81000404 	addi	r4,r16,16
 400fbfc:	19ffef1e 	bne	r3,r7,400fbbc <_calloc_r+0x48>
 400fc00:	81000604 	addi	r4,r16,24
 400fc04:	80000415 	stw	zero,16(r16)
 400fc08:	80000515 	stw	zero,20(r16)
 400fc0c:	003feb06 	br	400fbbc <_calloc_r+0x48>
 400fc10:	40092380 	call	4009238 <memset>
 400fc14:	8005883a 	mov	r2,r16
 400fc18:	dfc00117 	ldw	ra,4(sp)
 400fc1c:	dc000017 	ldw	r16,0(sp)
 400fc20:	dec00204 	addi	sp,sp,8
 400fc24:	f800283a 	ret

0400fc28 <_close_r>:
 400fc28:	defffd04 	addi	sp,sp,-12
 400fc2c:	dc000015 	stw	r16,0(sp)
 400fc30:	040100f4 	movhi	r16,1027
 400fc34:	84133204 	addi	r16,r16,19656
 400fc38:	dc400115 	stw	r17,4(sp)
 400fc3c:	80000015 	stw	zero,0(r16)
 400fc40:	2023883a 	mov	r17,r4
 400fc44:	2809883a 	mov	r4,r5
 400fc48:	dfc00215 	stw	ra,8(sp)
 400fc4c:	40110240 	call	4011024 <close>
 400fc50:	1007883a 	mov	r3,r2
 400fc54:	00bfffc4 	movi	r2,-1
 400fc58:	18800626 	beq	r3,r2,400fc74 <_close_r+0x4c>
 400fc5c:	1805883a 	mov	r2,r3
 400fc60:	dfc00217 	ldw	ra,8(sp)
 400fc64:	dc400117 	ldw	r17,4(sp)
 400fc68:	dc000017 	ldw	r16,0(sp)
 400fc6c:	dec00304 	addi	sp,sp,12
 400fc70:	f800283a 	ret
 400fc74:	80800017 	ldw	r2,0(r16)
 400fc78:	103ff826 	beq	r2,zero,400fc5c <_close_r+0x34>
 400fc7c:	88800015 	stw	r2,0(r17)
 400fc80:	1805883a 	mov	r2,r3
 400fc84:	dfc00217 	ldw	ra,8(sp)
 400fc88:	dc400117 	ldw	r17,4(sp)
 400fc8c:	dc000017 	ldw	r16,0(sp)
 400fc90:	dec00304 	addi	sp,sp,12
 400fc94:	f800283a 	ret

0400fc98 <_fclose_r>:
 400fc98:	defffc04 	addi	sp,sp,-16
 400fc9c:	dc400115 	stw	r17,4(sp)
 400fca0:	dc000015 	stw	r16,0(sp)
 400fca4:	dfc00315 	stw	ra,12(sp)
 400fca8:	dc800215 	stw	r18,8(sp)
 400fcac:	2821883a 	mov	r16,r5
 400fcb0:	2023883a 	mov	r17,r4
 400fcb4:	28002926 	beq	r5,zero,400fd5c <_fclose_r+0xc4>
 400fcb8:	400d1ec0 	call	400d1ec <__sfp_lock_acquire>
 400fcbc:	88000226 	beq	r17,zero,400fcc8 <_fclose_r+0x30>
 400fcc0:	88800e17 	ldw	r2,56(r17)
 400fcc4:	10002d26 	beq	r2,zero,400fd7c <_fclose_r+0xe4>
 400fcc8:	8080030f 	ldh	r2,12(r16)
 400fccc:	10002226 	beq	r2,zero,400fd58 <_fclose_r+0xc0>
 400fcd0:	8809883a 	mov	r4,r17
 400fcd4:	800b883a 	mov	r5,r16
 400fcd8:	400cf640 	call	400cf64 <_fflush_r>
 400fcdc:	1025883a 	mov	r18,r2
 400fce0:	80800b17 	ldw	r2,44(r16)
 400fce4:	10000426 	beq	r2,zero,400fcf8 <_fclose_r+0x60>
 400fce8:	81400717 	ldw	r5,28(r16)
 400fcec:	8809883a 	mov	r4,r17
 400fcf0:	103ee83a 	callr	r2
 400fcf4:	10002a16 	blt	r2,zero,400fda0 <_fclose_r+0x108>
 400fcf8:	8080030b 	ldhu	r2,12(r16)
 400fcfc:	1080200c 	andi	r2,r2,128
 400fd00:	1000231e 	bne	r2,zero,400fd90 <_fclose_r+0xf8>
 400fd04:	81400c17 	ldw	r5,48(r16)
 400fd08:	28000526 	beq	r5,zero,400fd20 <_fclose_r+0x88>
 400fd0c:	80801004 	addi	r2,r16,64
 400fd10:	28800226 	beq	r5,r2,400fd1c <_fclose_r+0x84>
 400fd14:	8809883a 	mov	r4,r17
 400fd18:	400d5800 	call	400d580 <_free_r>
 400fd1c:	80000c15 	stw	zero,48(r16)
 400fd20:	81401117 	ldw	r5,68(r16)
 400fd24:	28000326 	beq	r5,zero,400fd34 <_fclose_r+0x9c>
 400fd28:	8809883a 	mov	r4,r17
 400fd2c:	400d5800 	call	400d580 <_free_r>
 400fd30:	80001115 	stw	zero,68(r16)
 400fd34:	8000030d 	sth	zero,12(r16)
 400fd38:	400d1f00 	call	400d1f0 <__sfp_lock_release>
 400fd3c:	9005883a 	mov	r2,r18
 400fd40:	dfc00317 	ldw	ra,12(sp)
 400fd44:	dc800217 	ldw	r18,8(sp)
 400fd48:	dc400117 	ldw	r17,4(sp)
 400fd4c:	dc000017 	ldw	r16,0(sp)
 400fd50:	dec00404 	addi	sp,sp,16
 400fd54:	f800283a 	ret
 400fd58:	400d1f00 	call	400d1f0 <__sfp_lock_release>
 400fd5c:	0025883a 	mov	r18,zero
 400fd60:	9005883a 	mov	r2,r18
 400fd64:	dfc00317 	ldw	ra,12(sp)
 400fd68:	dc800217 	ldw	r18,8(sp)
 400fd6c:	dc400117 	ldw	r17,4(sp)
 400fd70:	dc000017 	ldw	r16,0(sp)
 400fd74:	dec00404 	addi	sp,sp,16
 400fd78:	f800283a 	ret
 400fd7c:	8809883a 	mov	r4,r17
 400fd80:	400d1fc0 	call	400d1fc <__sinit>
 400fd84:	8080030f 	ldh	r2,12(r16)
 400fd88:	103fd11e 	bne	r2,zero,400fcd0 <_fclose_r+0x38>
 400fd8c:	003ff206 	br	400fd58 <_fclose_r+0xc0>
 400fd90:	81400417 	ldw	r5,16(r16)
 400fd94:	8809883a 	mov	r4,r17
 400fd98:	400d5800 	call	400d580 <_free_r>
 400fd9c:	003fd906 	br	400fd04 <_fclose_r+0x6c>
 400fda0:	04bfffc4 	movi	r18,-1
 400fda4:	003fd406 	br	400fcf8 <_fclose_r+0x60>

0400fda8 <fclose>:
 400fda8:	008100f4 	movhi	r2,1027
 400fdac:	10859904 	addi	r2,r2,5732
 400fdb0:	200b883a 	mov	r5,r4
 400fdb4:	11000017 	ldw	r4,0(r2)
 400fdb8:	400fc981 	jmpi	400fc98 <_fclose_r>

0400fdbc <_fstat_r>:
 400fdbc:	defffd04 	addi	sp,sp,-12
 400fdc0:	dc000015 	stw	r16,0(sp)
 400fdc4:	040100f4 	movhi	r16,1027
 400fdc8:	84133204 	addi	r16,r16,19656
 400fdcc:	dc400115 	stw	r17,4(sp)
 400fdd0:	80000015 	stw	zero,0(r16)
 400fdd4:	2023883a 	mov	r17,r4
 400fdd8:	2809883a 	mov	r4,r5
 400fddc:	300b883a 	mov	r5,r6
 400fde0:	dfc00215 	stw	ra,8(sp)
 400fde4:	40111ac0 	call	40111ac <fstat>
 400fde8:	1007883a 	mov	r3,r2
 400fdec:	00bfffc4 	movi	r2,-1
 400fdf0:	18800626 	beq	r3,r2,400fe0c <_fstat_r+0x50>
 400fdf4:	1805883a 	mov	r2,r3
 400fdf8:	dfc00217 	ldw	ra,8(sp)
 400fdfc:	dc400117 	ldw	r17,4(sp)
 400fe00:	dc000017 	ldw	r16,0(sp)
 400fe04:	dec00304 	addi	sp,sp,12
 400fe08:	f800283a 	ret
 400fe0c:	80800017 	ldw	r2,0(r16)
 400fe10:	103ff826 	beq	r2,zero,400fdf4 <_fstat_r+0x38>
 400fe14:	88800015 	stw	r2,0(r17)
 400fe18:	1805883a 	mov	r2,r3
 400fe1c:	dfc00217 	ldw	ra,8(sp)
 400fe20:	dc400117 	ldw	r17,4(sp)
 400fe24:	dc000017 	ldw	r16,0(sp)
 400fe28:	dec00304 	addi	sp,sp,12
 400fe2c:	f800283a 	ret

0400fe30 <_isatty_r>:
 400fe30:	defffd04 	addi	sp,sp,-12
 400fe34:	dc000015 	stw	r16,0(sp)
 400fe38:	040100f4 	movhi	r16,1027
 400fe3c:	84133204 	addi	r16,r16,19656
 400fe40:	dc400115 	stw	r17,4(sp)
 400fe44:	80000015 	stw	zero,0(r16)
 400fe48:	2023883a 	mov	r17,r4
 400fe4c:	2809883a 	mov	r4,r5
 400fe50:	dfc00215 	stw	ra,8(sp)
 400fe54:	40115ac0 	call	40115ac <isatty>
 400fe58:	1007883a 	mov	r3,r2
 400fe5c:	00bfffc4 	movi	r2,-1
 400fe60:	18800626 	beq	r3,r2,400fe7c <_isatty_r+0x4c>
 400fe64:	1805883a 	mov	r2,r3
 400fe68:	dfc00217 	ldw	ra,8(sp)
 400fe6c:	dc400117 	ldw	r17,4(sp)
 400fe70:	dc000017 	ldw	r16,0(sp)
 400fe74:	dec00304 	addi	sp,sp,12
 400fe78:	f800283a 	ret
 400fe7c:	80800017 	ldw	r2,0(r16)
 400fe80:	103ff826 	beq	r2,zero,400fe64 <_isatty_r+0x34>
 400fe84:	88800015 	stw	r2,0(r17)
 400fe88:	1805883a 	mov	r2,r3
 400fe8c:	dfc00217 	ldw	ra,8(sp)
 400fe90:	dc400117 	ldw	r17,4(sp)
 400fe94:	dc000017 	ldw	r16,0(sp)
 400fe98:	dec00304 	addi	sp,sp,12
 400fe9c:	f800283a 	ret

0400fea0 <_lseek_r>:
 400fea0:	defffd04 	addi	sp,sp,-12
 400fea4:	dc000015 	stw	r16,0(sp)
 400fea8:	040100f4 	movhi	r16,1027
 400feac:	84133204 	addi	r16,r16,19656
 400feb0:	dc400115 	stw	r17,4(sp)
 400feb4:	80000015 	stw	zero,0(r16)
 400feb8:	2023883a 	mov	r17,r4
 400febc:	2809883a 	mov	r4,r5
 400fec0:	300b883a 	mov	r5,r6
 400fec4:	380d883a 	mov	r6,r7
 400fec8:	dfc00215 	stw	ra,8(sp)
 400fecc:	40117b80 	call	40117b8 <lseek>
 400fed0:	1007883a 	mov	r3,r2
 400fed4:	00bfffc4 	movi	r2,-1
 400fed8:	18800626 	beq	r3,r2,400fef4 <_lseek_r+0x54>
 400fedc:	1805883a 	mov	r2,r3
 400fee0:	dfc00217 	ldw	ra,8(sp)
 400fee4:	dc400117 	ldw	r17,4(sp)
 400fee8:	dc000017 	ldw	r16,0(sp)
 400feec:	dec00304 	addi	sp,sp,12
 400fef0:	f800283a 	ret
 400fef4:	80800017 	ldw	r2,0(r16)
 400fef8:	103ff826 	beq	r2,zero,400fedc <_lseek_r+0x3c>
 400fefc:	88800015 	stw	r2,0(r17)
 400ff00:	1805883a 	mov	r2,r3
 400ff04:	dfc00217 	ldw	ra,8(sp)
 400ff08:	dc400117 	ldw	r17,4(sp)
 400ff0c:	dc000017 	ldw	r16,0(sp)
 400ff10:	dec00304 	addi	sp,sp,12
 400ff14:	f800283a 	ret

0400ff18 <_read_r>:
 400ff18:	defffd04 	addi	sp,sp,-12
 400ff1c:	dc000015 	stw	r16,0(sp)
 400ff20:	040100f4 	movhi	r16,1027
 400ff24:	84133204 	addi	r16,r16,19656
 400ff28:	dc400115 	stw	r17,4(sp)
 400ff2c:	80000015 	stw	zero,0(r16)
 400ff30:	2023883a 	mov	r17,r4
 400ff34:	2809883a 	mov	r4,r5
 400ff38:	300b883a 	mov	r5,r6
 400ff3c:	380d883a 	mov	r6,r7
 400ff40:	dfc00215 	stw	ra,8(sp)
 400ff44:	40119b40 	call	40119b4 <read>
 400ff48:	1007883a 	mov	r3,r2
 400ff4c:	00bfffc4 	movi	r2,-1
 400ff50:	18800626 	beq	r3,r2,400ff6c <_read_r+0x54>
 400ff54:	1805883a 	mov	r2,r3
 400ff58:	dfc00217 	ldw	ra,8(sp)
 400ff5c:	dc400117 	ldw	r17,4(sp)
 400ff60:	dc000017 	ldw	r16,0(sp)
 400ff64:	dec00304 	addi	sp,sp,12
 400ff68:	f800283a 	ret
 400ff6c:	80800017 	ldw	r2,0(r16)
 400ff70:	103ff826 	beq	r2,zero,400ff54 <_read_r+0x3c>
 400ff74:	88800015 	stw	r2,0(r17)
 400ff78:	1805883a 	mov	r2,r3
 400ff7c:	dfc00217 	ldw	ra,8(sp)
 400ff80:	dc400117 	ldw	r17,4(sp)
 400ff84:	dc000017 	ldw	r16,0(sp)
 400ff88:	dec00304 	addi	sp,sp,12
 400ff8c:	f800283a 	ret

0400ff90 <__udivdi3>:
 400ff90:	defff004 	addi	sp,sp,-64
 400ff94:	2005883a 	mov	r2,r4
 400ff98:	3011883a 	mov	r8,r6
 400ff9c:	df000e15 	stw	fp,56(sp)
 400ffa0:	dd000a15 	stw	r20,40(sp)
 400ffa4:	dc000615 	stw	r16,24(sp)
 400ffa8:	dfc00f15 	stw	ra,60(sp)
 400ffac:	ddc00d15 	stw	r23,52(sp)
 400ffb0:	dd800c15 	stw	r22,48(sp)
 400ffb4:	dd400b15 	stw	r21,44(sp)
 400ffb8:	dcc00915 	stw	r19,36(sp)
 400ffbc:	dc800815 	stw	r18,32(sp)
 400ffc0:	dc400715 	stw	r17,28(sp)
 400ffc4:	4021883a 	mov	r16,r8
 400ffc8:	1039883a 	mov	fp,r2
 400ffcc:	2829883a 	mov	r20,r5
 400ffd0:	38003b1e 	bne	r7,zero,40100c0 <__udivdi3+0x130>
 400ffd4:	2a005c36 	bltu	r5,r8,4010148 <__udivdi3+0x1b8>
 400ffd8:	4000a626 	beq	r8,zero,4010274 <__udivdi3+0x2e4>
 400ffdc:	00bfffd4 	movui	r2,65535
 400ffe0:	14009e36 	bltu	r2,r16,401025c <__udivdi3+0x2cc>
 400ffe4:	00803fc4 	movi	r2,255
 400ffe8:	14013d36 	bltu	r2,r16,40104e0 <__udivdi3+0x550>
 400ffec:	000b883a 	mov	r5,zero
 400fff0:	0005883a 	mov	r2,zero
 400fff4:	8084d83a 	srl	r2,r16,r2
 400fff8:	010100f4 	movhi	r4,1027
 400fffc:	21375a04 	addi	r4,r4,-8856
 4010000:	01800804 	movi	r6,32
 4010004:	1105883a 	add	r2,r2,r4
 4010008:	10c00003 	ldbu	r3,0(r2)
 401000c:	28c7883a 	add	r3,r5,r3
 4010010:	30edc83a 	sub	r22,r6,r3
 4010014:	b000ee1e 	bne	r22,zero,40103d0 <__udivdi3+0x440>
 4010018:	802ad43a 	srli	r21,r16,16
 401001c:	00800044 	movi	r2,1
 4010020:	a423c83a 	sub	r17,r20,r16
 4010024:	85ffffcc 	andi	r23,r16,65535
 4010028:	d8800315 	stw	r2,12(sp)
 401002c:	8809883a 	mov	r4,r17
 4010030:	a80b883a 	mov	r5,r21
 4010034:	40083e40 	call	40083e4 <__udivsi3>
 4010038:	8809883a 	mov	r4,r17
 401003c:	a80b883a 	mov	r5,r21
 4010040:	102d883a 	mov	r22,r2
 4010044:	40083ec0 	call	40083ec <__umodsi3>
 4010048:	1004943a 	slli	r2,r2,16
 401004c:	e006d43a 	srli	r3,fp,16
 4010050:	bda3383a 	mul	r17,r23,r22
 4010054:	10c4b03a 	or	r2,r2,r3
 4010058:	1440042e 	bgeu	r2,r17,401006c <__udivdi3+0xdc>
 401005c:	1405883a 	add	r2,r2,r16
 4010060:	b5bfffc4 	addi	r22,r22,-1
 4010064:	14000136 	bltu	r2,r16,401006c <__udivdi3+0xdc>
 4010068:	14413d36 	bltu	r2,r17,4010560 <__udivdi3+0x5d0>
 401006c:	1463c83a 	sub	r17,r2,r17
 4010070:	8809883a 	mov	r4,r17
 4010074:	a80b883a 	mov	r5,r21
 4010078:	40083e40 	call	40083e4 <__udivsi3>
 401007c:	8809883a 	mov	r4,r17
 4010080:	a80b883a 	mov	r5,r21
 4010084:	1029883a 	mov	r20,r2
 4010088:	40083ec0 	call	40083ec <__umodsi3>
 401008c:	1004943a 	slli	r2,r2,16
 4010090:	bd09383a 	mul	r4,r23,r20
 4010094:	e0ffffcc 	andi	r3,fp,65535
 4010098:	10c4b03a 	or	r2,r2,r3
 401009c:	1100042e 	bgeu	r2,r4,40100b0 <__udivdi3+0x120>
 40100a0:	8085883a 	add	r2,r16,r2
 40100a4:	a53fffc4 	addi	r20,r20,-1
 40100a8:	14000136 	bltu	r2,r16,40100b0 <__udivdi3+0x120>
 40100ac:	11012036 	bltu	r2,r4,4010530 <__udivdi3+0x5a0>
 40100b0:	b004943a 	slli	r2,r22,16
 40100b4:	d9000317 	ldw	r4,12(sp)
 40100b8:	a084b03a 	or	r2,r20,r2
 40100bc:	00001506 	br	4010114 <__udivdi3+0x184>
 40100c0:	380d883a 	mov	r6,r7
 40100c4:	29c06236 	bltu	r5,r7,4010250 <__udivdi3+0x2c0>
 40100c8:	00bfffd4 	movui	r2,65535
 40100cc:	11c05a36 	bltu	r2,r7,4010238 <__udivdi3+0x2a8>
 40100d0:	00803fc4 	movi	r2,255
 40100d4:	11c0fc36 	bltu	r2,r7,40104c8 <__udivdi3+0x538>
 40100d8:	000b883a 	mov	r5,zero
 40100dc:	0005883a 	mov	r2,zero
 40100e0:	3084d83a 	srl	r2,r6,r2
 40100e4:	010100f4 	movhi	r4,1027
 40100e8:	21375a04 	addi	r4,r4,-8856
 40100ec:	01c00804 	movi	r7,32
 40100f0:	1105883a 	add	r2,r2,r4
 40100f4:	10c00003 	ldbu	r3,0(r2)
 40100f8:	28c7883a 	add	r3,r5,r3
 40100fc:	38efc83a 	sub	r23,r7,r3
 4010100:	b800691e 	bne	r23,zero,40102a8 <__udivdi3+0x318>
 4010104:	35000136 	bltu	r6,r20,401010c <__udivdi3+0x17c>
 4010108:	e4005136 	bltu	fp,r16,4010250 <__udivdi3+0x2c0>
 401010c:	00800044 	movi	r2,1
 4010110:	0009883a 	mov	r4,zero
 4010114:	2007883a 	mov	r3,r4
 4010118:	dfc00f17 	ldw	ra,60(sp)
 401011c:	df000e17 	ldw	fp,56(sp)
 4010120:	ddc00d17 	ldw	r23,52(sp)
 4010124:	dd800c17 	ldw	r22,48(sp)
 4010128:	dd400b17 	ldw	r21,44(sp)
 401012c:	dd000a17 	ldw	r20,40(sp)
 4010130:	dcc00917 	ldw	r19,36(sp)
 4010134:	dc800817 	ldw	r18,32(sp)
 4010138:	dc400717 	ldw	r17,28(sp)
 401013c:	dc000617 	ldw	r16,24(sp)
 4010140:	dec01004 	addi	sp,sp,64
 4010144:	f800283a 	ret
 4010148:	00bfffd4 	movui	r2,65535
 401014c:	12005036 	bltu	r2,r8,4010290 <__udivdi3+0x300>
 4010150:	00803fc4 	movi	r2,255
 4010154:	1200e836 	bltu	r2,r8,40104f8 <__udivdi3+0x568>
 4010158:	000b883a 	mov	r5,zero
 401015c:	0005883a 	mov	r2,zero
 4010160:	8084d83a 	srl	r2,r16,r2
 4010164:	010100f4 	movhi	r4,1027
 4010168:	21375a04 	addi	r4,r4,-8856
 401016c:	01800804 	movi	r6,32
 4010170:	1105883a 	add	r2,r2,r4
 4010174:	10c00003 	ldbu	r3,0(r2)
 4010178:	28c7883a 	add	r3,r5,r3
 401017c:	30cbc83a 	sub	r5,r6,r3
 4010180:	28000626 	beq	r5,zero,401019c <__udivdi3+0x20c>
 4010184:	3145c83a 	sub	r2,r6,r5
 4010188:	e084d83a 	srl	r2,fp,r2
 401018c:	a146983a 	sll	r3,r20,r5
 4010190:	e178983a 	sll	fp,fp,r5
 4010194:	8160983a 	sll	r16,r16,r5
 4010198:	18a8b03a 	or	r20,r3,r2
 401019c:	802ad43a 	srli	r21,r16,16
 40101a0:	a009883a 	mov	r4,r20
 40101a4:	85ffffcc 	andi	r23,r16,65535
 40101a8:	a80b883a 	mov	r5,r21
 40101ac:	40083e40 	call	40083e4 <__udivsi3>
 40101b0:	a009883a 	mov	r4,r20
 40101b4:	a80b883a 	mov	r5,r21
 40101b8:	102d883a 	mov	r22,r2
 40101bc:	40083ec0 	call	40083ec <__umodsi3>
 40101c0:	1004943a 	slli	r2,r2,16
 40101c4:	e006d43a 	srli	r3,fp,16
 40101c8:	bda3383a 	mul	r17,r23,r22
 40101cc:	10c4b03a 	or	r2,r2,r3
 40101d0:	1440042e 	bgeu	r2,r17,40101e4 <__udivdi3+0x254>
 40101d4:	1405883a 	add	r2,r2,r16
 40101d8:	b5bfffc4 	addi	r22,r22,-1
 40101dc:	14000136 	bltu	r2,r16,40101e4 <__udivdi3+0x254>
 40101e0:	1440d536 	bltu	r2,r17,4010538 <__udivdi3+0x5a8>
 40101e4:	1463c83a 	sub	r17,r2,r17
 40101e8:	8809883a 	mov	r4,r17
 40101ec:	a80b883a 	mov	r5,r21
 40101f0:	40083e40 	call	40083e4 <__udivsi3>
 40101f4:	8809883a 	mov	r4,r17
 40101f8:	a80b883a 	mov	r5,r21
 40101fc:	1029883a 	mov	r20,r2
 4010200:	40083ec0 	call	40083ec <__umodsi3>
 4010204:	1004943a 	slli	r2,r2,16
 4010208:	bd09383a 	mul	r4,r23,r20
 401020c:	e0ffffcc 	andi	r3,fp,65535
 4010210:	10c4b03a 	or	r2,r2,r3
 4010214:	1100042e 	bgeu	r2,r4,4010228 <__udivdi3+0x298>
 4010218:	8085883a 	add	r2,r16,r2
 401021c:	a53fffc4 	addi	r20,r20,-1
 4010220:	14000136 	bltu	r2,r16,4010228 <__udivdi3+0x298>
 4010224:	1100c736 	bltu	r2,r4,4010544 <__udivdi3+0x5b4>
 4010228:	b004943a 	slli	r2,r22,16
 401022c:	0009883a 	mov	r4,zero
 4010230:	a084b03a 	or	r2,r20,r2
 4010234:	003fb706 	br	4010114 <__udivdi3+0x184>
 4010238:	00804034 	movhi	r2,256
 401023c:	10bfffc4 	addi	r2,r2,-1
 4010240:	11c0a436 	bltu	r2,r7,40104d4 <__udivdi3+0x544>
 4010244:	01400404 	movi	r5,16
 4010248:	2805883a 	mov	r2,r5
 401024c:	003fa406 	br	40100e0 <__udivdi3+0x150>
 4010250:	0005883a 	mov	r2,zero
 4010254:	0009883a 	mov	r4,zero
 4010258:	003fae06 	br	4010114 <__udivdi3+0x184>
 401025c:	00804034 	movhi	r2,256
 4010260:	10bfffc4 	addi	r2,r2,-1
 4010264:	1400a136 	bltu	r2,r16,40104ec <__udivdi3+0x55c>
 4010268:	01400404 	movi	r5,16
 401026c:	2805883a 	mov	r2,r5
 4010270:	003f6006 	br	400fff4 <__udivdi3+0x64>
 4010274:	01000044 	movi	r4,1
 4010278:	000b883a 	mov	r5,zero
 401027c:	40083e40 	call	40083e4 <__udivsi3>
 4010280:	1021883a 	mov	r16,r2
 4010284:	00bfffd4 	movui	r2,65535
 4010288:	143ff436 	bltu	r2,r16,401025c <__udivdi3+0x2cc>
 401028c:	003f5506 	br	400ffe4 <__udivdi3+0x54>
 4010290:	00804034 	movhi	r2,256
 4010294:	10bfffc4 	addi	r2,r2,-1
 4010298:	12009a36 	bltu	r2,r8,4010504 <__udivdi3+0x574>
 401029c:	01400404 	movi	r5,16
 40102a0:	2805883a 	mov	r2,r5
 40102a4:	003fae06 	br	4010160 <__udivdi3+0x1d0>
 40102a8:	3dc5c83a 	sub	r2,r7,r23
 40102ac:	35c8983a 	sll	r4,r6,r23
 40102b0:	8086d83a 	srl	r3,r16,r2
 40102b4:	a0a2d83a 	srl	r17,r20,r2
 40102b8:	e084d83a 	srl	r2,fp,r2
 40102bc:	20eab03a 	or	r21,r4,r3
 40102c0:	a82cd43a 	srli	r22,r21,16
 40102c4:	a5c6983a 	sll	r3,r20,r23
 40102c8:	8809883a 	mov	r4,r17
 40102cc:	b00b883a 	mov	r5,r22
 40102d0:	1886b03a 	or	r3,r3,r2
 40102d4:	d8c00215 	stw	r3,8(sp)
 40102d8:	40083e40 	call	40083e4 <__udivsi3>
 40102dc:	8809883a 	mov	r4,r17
 40102e0:	b00b883a 	mov	r5,r22
 40102e4:	1029883a 	mov	r20,r2
 40102e8:	40083ec0 	call	40083ec <__umodsi3>
 40102ec:	a8ffffcc 	andi	r3,r21,65535
 40102f0:	d8c00515 	stw	r3,20(sp)
 40102f4:	d9000217 	ldw	r4,8(sp)
 40102f8:	d9400517 	ldw	r5,20(sp)
 40102fc:	1004943a 	slli	r2,r2,16
 4010300:	2006d43a 	srli	r3,r4,16
 4010304:	85e0983a 	sll	r16,r16,r23
 4010308:	2d23383a 	mul	r17,r5,r20
 401030c:	10c4b03a 	or	r2,r2,r3
 4010310:	dc000015 	stw	r16,0(sp)
 4010314:	1440032e 	bgeu	r2,r17,4010324 <__udivdi3+0x394>
 4010318:	1545883a 	add	r2,r2,r21
 401031c:	a53fffc4 	addi	r20,r20,-1
 4010320:	15407f2e 	bgeu	r2,r21,4010520 <__udivdi3+0x590>
 4010324:	1463c83a 	sub	r17,r2,r17
 4010328:	8809883a 	mov	r4,r17
 401032c:	b00b883a 	mov	r5,r22
 4010330:	40083e40 	call	40083e4 <__udivsi3>
 4010334:	8809883a 	mov	r4,r17
 4010338:	b00b883a 	mov	r5,r22
 401033c:	1021883a 	mov	r16,r2
 4010340:	40083ec0 	call	40083ec <__umodsi3>
 4010344:	d8c00517 	ldw	r3,20(sp)
 4010348:	d9000217 	ldw	r4,8(sp)
 401034c:	1004943a 	slli	r2,r2,16
 4010350:	1c0f383a 	mul	r7,r3,r16
 4010354:	20ffffcc 	andi	r3,r4,65535
 4010358:	10e2b03a 	or	r17,r2,r3
 401035c:	89c0032e 	bgeu	r17,r7,401036c <__udivdi3+0x3dc>
 4010360:	8d63883a 	add	r17,r17,r21
 4010364:	843fffc4 	addi	r16,r16,-1
 4010368:	8d40692e 	bgeu	r17,r21,4010510 <__udivdi3+0x580>
 401036c:	a008943a 	slli	r4,r20,16
 4010370:	d9400017 	ldw	r5,0(sp)
 4010374:	89e3c83a 	sub	r17,r17,r7
 4010378:	8110b03a 	or	r8,r16,r4
 401037c:	280cd43a 	srli	r6,r5,16
 4010380:	28ffffcc 	andi	r3,r5,65535
 4010384:	40bfffcc 	andi	r2,r8,65535
 4010388:	400ad43a 	srli	r5,r8,16
 401038c:	10d3383a 	mul	r9,r2,r3
 4010390:	1185383a 	mul	r2,r2,r6
 4010394:	28c7383a 	mul	r3,r5,r3
 4010398:	4808d43a 	srli	r4,r9,16
 401039c:	298b383a 	mul	r5,r5,r6
 40103a0:	10c5883a 	add	r2,r2,r3
 40103a4:	2089883a 	add	r4,r4,r2
 40103a8:	20c0022e 	bgeu	r4,r3,40103b4 <__udivdi3+0x424>
 40103ac:	00800074 	movhi	r2,1
 40103b0:	288b883a 	add	r5,r5,r2
 40103b4:	2004d43a 	srli	r2,r4,16
 40103b8:	288b883a 	add	r5,r5,r2
 40103bc:	89403f36 	bltu	r17,r5,40104bc <__udivdi3+0x52c>
 40103c0:	89403926 	beq	r17,r5,40104a8 <__udivdi3+0x518>
 40103c4:	4005883a 	mov	r2,r8
 40103c8:	0009883a 	mov	r4,zero
 40103cc:	003f5106 	br	4010114 <__udivdi3+0x184>
 40103d0:	85a0983a 	sll	r16,r16,r22
 40103d4:	3585c83a 	sub	r2,r6,r22
 40103d8:	a0a2d83a 	srl	r17,r20,r2
 40103dc:	802ad43a 	srli	r21,r16,16
 40103e0:	e084d83a 	srl	r2,fp,r2
 40103e4:	a586983a 	sll	r3,r20,r22
 40103e8:	8809883a 	mov	r4,r17
 40103ec:	a80b883a 	mov	r5,r21
 40103f0:	1886b03a 	or	r3,r3,r2
 40103f4:	d8c00115 	stw	r3,4(sp)
 40103f8:	40083e40 	call	40083e4 <__udivsi3>
 40103fc:	8809883a 	mov	r4,r17
 4010400:	a80b883a 	mov	r5,r21
 4010404:	d8800415 	stw	r2,16(sp)
 4010408:	40083ec0 	call	40083ec <__umodsi3>
 401040c:	d9000117 	ldw	r4,4(sp)
 4010410:	d9400417 	ldw	r5,16(sp)
 4010414:	1004943a 	slli	r2,r2,16
 4010418:	85ffffcc 	andi	r23,r16,65535
 401041c:	2006d43a 	srli	r3,r4,16
 4010420:	b963383a 	mul	r17,r23,r5
 4010424:	10c4b03a 	or	r2,r2,r3
 4010428:	1440042e 	bgeu	r2,r17,401043c <__udivdi3+0x4ac>
 401042c:	297fffc4 	addi	r5,r5,-1
 4010430:	1405883a 	add	r2,r2,r16
 4010434:	d9400415 	stw	r5,16(sp)
 4010438:	1400442e 	bgeu	r2,r16,401054c <__udivdi3+0x5bc>
 401043c:	1463c83a 	sub	r17,r2,r17
 4010440:	8809883a 	mov	r4,r17
 4010444:	a80b883a 	mov	r5,r21
 4010448:	40083e40 	call	40083e4 <__udivsi3>
 401044c:	8809883a 	mov	r4,r17
 4010450:	a80b883a 	mov	r5,r21
 4010454:	1029883a 	mov	r20,r2
 4010458:	40083ec0 	call	40083ec <__umodsi3>
 401045c:	d9400117 	ldw	r5,4(sp)
 4010460:	1004943a 	slli	r2,r2,16
 4010464:	bd09383a 	mul	r4,r23,r20
 4010468:	28ffffcc 	andi	r3,r5,65535
 401046c:	10c6b03a 	or	r3,r2,r3
 4010470:	1900062e 	bgeu	r3,r4,401048c <__udivdi3+0x4fc>
 4010474:	1c07883a 	add	r3,r3,r16
 4010478:	a53fffc4 	addi	r20,r20,-1
 401047c:	1c000336 	bltu	r3,r16,401048c <__udivdi3+0x4fc>
 4010480:	1900022e 	bgeu	r3,r4,401048c <__udivdi3+0x4fc>
 4010484:	a53fffc4 	addi	r20,r20,-1
 4010488:	1c07883a 	add	r3,r3,r16
 401048c:	d9400417 	ldw	r5,16(sp)
 4010490:	e5b8983a 	sll	fp,fp,r22
 4010494:	1923c83a 	sub	r17,r3,r4
 4010498:	2804943a 	slli	r2,r5,16
 401049c:	a0a8b03a 	or	r20,r20,r2
 40104a0:	dd000315 	stw	r20,12(sp)
 40104a4:	003ee106 	br	401002c <__udivdi3+0x9c>
 40104a8:	2004943a 	slli	r2,r4,16
 40104ac:	e5c8983a 	sll	r4,fp,r23
 40104b0:	48ffffcc 	andi	r3,r9,65535
 40104b4:	10c5883a 	add	r2,r2,r3
 40104b8:	20bfc22e 	bgeu	r4,r2,40103c4 <__udivdi3+0x434>
 40104bc:	40bfffc4 	addi	r2,r8,-1
 40104c0:	0009883a 	mov	r4,zero
 40104c4:	003f1306 	br	4010114 <__udivdi3+0x184>
 40104c8:	01400204 	movi	r5,8
 40104cc:	2805883a 	mov	r2,r5
 40104d0:	003f0306 	br	40100e0 <__udivdi3+0x150>
 40104d4:	01400604 	movi	r5,24
 40104d8:	2805883a 	mov	r2,r5
 40104dc:	003f0006 	br	40100e0 <__udivdi3+0x150>
 40104e0:	01400204 	movi	r5,8
 40104e4:	2805883a 	mov	r2,r5
 40104e8:	003ec206 	br	400fff4 <__udivdi3+0x64>
 40104ec:	01400604 	movi	r5,24
 40104f0:	2805883a 	mov	r2,r5
 40104f4:	003ebf06 	br	400fff4 <__udivdi3+0x64>
 40104f8:	01400204 	movi	r5,8
 40104fc:	2805883a 	mov	r2,r5
 4010500:	003f1706 	br	4010160 <__udivdi3+0x1d0>
 4010504:	01400604 	movi	r5,24
 4010508:	2805883a 	mov	r2,r5
 401050c:	003f1406 	br	4010160 <__udivdi3+0x1d0>
 4010510:	89ff962e 	bgeu	r17,r7,401036c <__udivdi3+0x3dc>
 4010514:	8d63883a 	add	r17,r17,r21
 4010518:	843fffc4 	addi	r16,r16,-1
 401051c:	003f9306 	br	401036c <__udivdi3+0x3dc>
 4010520:	147f802e 	bgeu	r2,r17,4010324 <__udivdi3+0x394>
 4010524:	a53fffc4 	addi	r20,r20,-1
 4010528:	1545883a 	add	r2,r2,r21
 401052c:	003f7d06 	br	4010324 <__udivdi3+0x394>
 4010530:	a53fffc4 	addi	r20,r20,-1
 4010534:	003ede06 	br	40100b0 <__udivdi3+0x120>
 4010538:	b5bfffc4 	addi	r22,r22,-1
 401053c:	1405883a 	add	r2,r2,r16
 4010540:	003f2806 	br	40101e4 <__udivdi3+0x254>
 4010544:	a53fffc4 	addi	r20,r20,-1
 4010548:	003f3706 	br	4010228 <__udivdi3+0x298>
 401054c:	147fbb2e 	bgeu	r2,r17,401043c <__udivdi3+0x4ac>
 4010550:	297fffc4 	addi	r5,r5,-1
 4010554:	1405883a 	add	r2,r2,r16
 4010558:	d9400415 	stw	r5,16(sp)
 401055c:	003fb706 	br	401043c <__udivdi3+0x4ac>
 4010560:	b5bfffc4 	addi	r22,r22,-1
 4010564:	1405883a 	add	r2,r2,r16
 4010568:	003ec006 	br	401006c <__udivdi3+0xdc>

0401056c <__umoddi3>:
 401056c:	defff104 	addi	sp,sp,-60
 4010570:	dd800b15 	stw	r22,44(sp)
 4010574:	dd000915 	stw	r20,36(sp)
 4010578:	dc000515 	stw	r16,20(sp)
 401057c:	dfc00e15 	stw	ra,56(sp)
 4010580:	df000d15 	stw	fp,52(sp)
 4010584:	ddc00c15 	stw	r23,48(sp)
 4010588:	dd400a15 	stw	r21,40(sp)
 401058c:	dcc00815 	stw	r19,32(sp)
 4010590:	dc800715 	stw	r18,28(sp)
 4010594:	dc400615 	stw	r17,24(sp)
 4010598:	3021883a 	mov	r16,r6
 401059c:	202d883a 	mov	r22,r4
 40105a0:	2829883a 	mov	r20,r5
 40105a4:	38002b1e 	bne	r7,zero,4010654 <__umoddi3+0xe8>
 40105a8:	29805036 	bltu	r5,r6,40106ec <__umoddi3+0x180>
 40105ac:	30008a26 	beq	r6,zero,40107d8 <__umoddi3+0x26c>
 40105b0:	00bfffd4 	movui	r2,65535
 40105b4:	14008236 	bltu	r2,r16,40107c0 <__umoddi3+0x254>
 40105b8:	00803fc4 	movi	r2,255
 40105bc:	14013636 	bltu	r2,r16,4010a98 <__umoddi3+0x52c>
 40105c0:	000b883a 	mov	r5,zero
 40105c4:	0005883a 	mov	r2,zero
 40105c8:	8084d83a 	srl	r2,r16,r2
 40105cc:	010100f4 	movhi	r4,1027
 40105d0:	21375a04 	addi	r4,r4,-8856
 40105d4:	01800804 	movi	r6,32
 40105d8:	1105883a 	add	r2,r2,r4
 40105dc:	10c00003 	ldbu	r3,0(r2)
 40105e0:	28c7883a 	add	r3,r5,r3
 40105e4:	30efc83a 	sub	r23,r6,r3
 40105e8:	b800941e 	bne	r23,zero,401083c <__umoddi3+0x2d0>
 40105ec:	802ad43a 	srli	r21,r16,16
 40105f0:	a423c83a 	sub	r17,r20,r16
 40105f4:	0039883a 	mov	fp,zero
 40105f8:	853fffcc 	andi	r20,r16,65535
 40105fc:	8809883a 	mov	r4,r17
 4010600:	a80b883a 	mov	r5,r21
 4010604:	40083e40 	call	40083e4 <__udivsi3>
 4010608:	8809883a 	mov	r4,r17
 401060c:	a80b883a 	mov	r5,r21
 4010610:	a0a3383a 	mul	r17,r20,r2
 4010614:	40083ec0 	call	40083ec <__umodsi3>
 4010618:	1004943a 	slli	r2,r2,16
 401061c:	b006d43a 	srli	r3,r22,16
 4010620:	10c4b03a 	or	r2,r2,r3
 4010624:	1440032e 	bgeu	r2,r17,4010634 <__umoddi3+0xc8>
 4010628:	1405883a 	add	r2,r2,r16
 401062c:	14000136 	bltu	r2,r16,4010634 <__umoddi3+0xc8>
 4010630:	14413536 	bltu	r2,r17,4010b08 <__umoddi3+0x59c>
 4010634:	1463c83a 	sub	r17,r2,r17
 4010638:	8809883a 	mov	r4,r17
 401063c:	a80b883a 	mov	r5,r21
 4010640:	40083e40 	call	40083e4 <__udivsi3>
 4010644:	8809883a 	mov	r4,r17
 4010648:	a0a3383a 	mul	r17,r20,r2
 401064c:	a80b883a 	mov	r5,r21
 4010650:	00004d06 	br	4010788 <__umoddi3+0x21c>
 4010654:	380d883a 	mov	r6,r7
 4010658:	29c0102e 	bgeu	r5,r7,401069c <__umoddi3+0x130>
 401065c:	2011883a 	mov	r8,r4
 4010660:	2813883a 	mov	r9,r5
 4010664:	4005883a 	mov	r2,r8
 4010668:	4807883a 	mov	r3,r9
 401066c:	dfc00e17 	ldw	ra,56(sp)
 4010670:	df000d17 	ldw	fp,52(sp)
 4010674:	ddc00c17 	ldw	r23,48(sp)
 4010678:	dd800b17 	ldw	r22,44(sp)
 401067c:	dd400a17 	ldw	r21,40(sp)
 4010680:	dd000917 	ldw	r20,36(sp)
 4010684:	dcc00817 	ldw	r19,32(sp)
 4010688:	dc800717 	ldw	r18,28(sp)
 401068c:	dc400617 	ldw	r17,24(sp)
 4010690:	dc000517 	ldw	r16,20(sp)
 4010694:	dec00f04 	addi	sp,sp,60
 4010698:	f800283a 	ret
 401069c:	00bfffd4 	movui	r2,65535
 40106a0:	11c05a36 	bltu	r2,r7,401080c <__umoddi3+0x2a0>
 40106a4:	00803fc4 	movi	r2,255
 40106a8:	11c0fe36 	bltu	r2,r7,4010aa4 <__umoddi3+0x538>
 40106ac:	000b883a 	mov	r5,zero
 40106b0:	0005883a 	mov	r2,zero
 40106b4:	3084d83a 	srl	r2,r6,r2
 40106b8:	010100f4 	movhi	r4,1027
 40106bc:	21375a04 	addi	r4,r4,-8856
 40106c0:	01c00804 	movi	r7,32
 40106c4:	1105883a 	add	r2,r2,r4
 40106c8:	10c00003 	ldbu	r3,0(r2)
 40106cc:	28c7883a 	add	r3,r5,r3
 40106d0:	38ebc83a 	sub	r21,r7,r3
 40106d4:	a800851e 	bne	r21,zero,40108ec <__umoddi3+0x380>
 40106d8:	35005236 	bltu	r6,r20,4010824 <__umoddi3+0x2b8>
 40106dc:	b400512e 	bgeu	r22,r16,4010824 <__umoddi3+0x2b8>
 40106e0:	b011883a 	mov	r8,r22
 40106e4:	a013883a 	mov	r9,r20
 40106e8:	003fde06 	br	4010664 <__umoddi3+0xf8>
 40106ec:	00bfffd4 	movui	r2,65535
 40106f0:	11804036 	bltu	r2,r6,40107f4 <__umoddi3+0x288>
 40106f4:	00803fc4 	movi	r2,255
 40106f8:	1180ed36 	bltu	r2,r6,4010ab0 <__umoddi3+0x544>
 40106fc:	000b883a 	mov	r5,zero
 4010700:	0005883a 	mov	r2,zero
 4010704:	8084d83a 	srl	r2,r16,r2
 4010708:	010100f4 	movhi	r4,1027
 401070c:	21375a04 	addi	r4,r4,-8856
 4010710:	01800804 	movi	r6,32
 4010714:	1105883a 	add	r2,r2,r4
 4010718:	10c00003 	ldbu	r3,0(r2)
 401071c:	28c7883a 	add	r3,r5,r3
 4010720:	30c7c83a 	sub	r3,r6,r3
 4010724:	1800bf1e 	bne	r3,zero,4010a24 <__umoddi3+0x4b8>
 4010728:	0039883a 	mov	fp,zero
 401072c:	802ad43a 	srli	r21,r16,16
 4010730:	a009883a 	mov	r4,r20
 4010734:	85ffffcc 	andi	r23,r16,65535
 4010738:	a80b883a 	mov	r5,r21
 401073c:	40083e40 	call	40083e4 <__udivsi3>
 4010740:	a009883a 	mov	r4,r20
 4010744:	a80b883a 	mov	r5,r21
 4010748:	b8a3383a 	mul	r17,r23,r2
 401074c:	40083ec0 	call	40083ec <__umodsi3>
 4010750:	1004943a 	slli	r2,r2,16
 4010754:	b006d43a 	srli	r3,r22,16
 4010758:	10c4b03a 	or	r2,r2,r3
 401075c:	1440032e 	bgeu	r2,r17,401076c <__umoddi3+0x200>
 4010760:	1405883a 	add	r2,r2,r16
 4010764:	14000136 	bltu	r2,r16,401076c <__umoddi3+0x200>
 4010768:	1440e536 	bltu	r2,r17,4010b00 <__umoddi3+0x594>
 401076c:	1463c83a 	sub	r17,r2,r17
 4010770:	8809883a 	mov	r4,r17
 4010774:	a80b883a 	mov	r5,r21
 4010778:	40083e40 	call	40083e4 <__udivsi3>
 401077c:	8809883a 	mov	r4,r17
 4010780:	b8a3383a 	mul	r17,r23,r2
 4010784:	a80b883a 	mov	r5,r21
 4010788:	40083ec0 	call	40083ec <__umodsi3>
 401078c:	1004943a 	slli	r2,r2,16
 4010790:	b0ffffcc 	andi	r3,r22,65535
 4010794:	10c4b03a 	or	r2,r2,r3
 4010798:	1440042e 	bgeu	r2,r17,40107ac <__umoddi3+0x240>
 401079c:	1405883a 	add	r2,r2,r16
 40107a0:	14000236 	bltu	r2,r16,40107ac <__umoddi3+0x240>
 40107a4:	1440012e 	bgeu	r2,r17,40107ac <__umoddi3+0x240>
 40107a8:	1405883a 	add	r2,r2,r16
 40107ac:	1445c83a 	sub	r2,r2,r17
 40107b0:	1724d83a 	srl	r18,r2,fp
 40107b4:	0013883a 	mov	r9,zero
 40107b8:	9011883a 	mov	r8,r18
 40107bc:	003fa906 	br	4010664 <__umoddi3+0xf8>
 40107c0:	00804034 	movhi	r2,256
 40107c4:	10bfffc4 	addi	r2,r2,-1
 40107c8:	1400b036 	bltu	r2,r16,4010a8c <__umoddi3+0x520>
 40107cc:	01400404 	movi	r5,16
 40107d0:	2805883a 	mov	r2,r5
 40107d4:	003f7c06 	br	40105c8 <__umoddi3+0x5c>
 40107d8:	01000044 	movi	r4,1
 40107dc:	000b883a 	mov	r5,zero
 40107e0:	40083e40 	call	40083e4 <__udivsi3>
 40107e4:	1021883a 	mov	r16,r2
 40107e8:	00bfffd4 	movui	r2,65535
 40107ec:	143ff436 	bltu	r2,r16,40107c0 <__umoddi3+0x254>
 40107f0:	003f7106 	br	40105b8 <__umoddi3+0x4c>
 40107f4:	00804034 	movhi	r2,256
 40107f8:	10bfffc4 	addi	r2,r2,-1
 40107fc:	1180af36 	bltu	r2,r6,4010abc <__umoddi3+0x550>
 4010800:	01400404 	movi	r5,16
 4010804:	2805883a 	mov	r2,r5
 4010808:	003fbe06 	br	4010704 <__umoddi3+0x198>
 401080c:	00804034 	movhi	r2,256
 4010810:	10bfffc4 	addi	r2,r2,-1
 4010814:	11c0ac36 	bltu	r2,r7,4010ac8 <__umoddi3+0x55c>
 4010818:	01400404 	movi	r5,16
 401081c:	2805883a 	mov	r2,r5
 4010820:	003fa406 	br	40106b4 <__umoddi3+0x148>
 4010824:	b409c83a 	sub	r4,r22,r16
 4010828:	b105803a 	cmpltu	r2,r22,r4
 401082c:	a187c83a 	sub	r3,r20,r6
 4010830:	18a9c83a 	sub	r20,r3,r2
 4010834:	202d883a 	mov	r22,r4
 4010838:	003fa906 	br	40106e0 <__umoddi3+0x174>
 401083c:	85e0983a 	sll	r16,r16,r23
 4010840:	35c5c83a 	sub	r2,r6,r23
 4010844:	a0a2d83a 	srl	r17,r20,r2
 4010848:	802ad43a 	srli	r21,r16,16
 401084c:	b084d83a 	srl	r2,r22,r2
 4010850:	a5c6983a 	sll	r3,r20,r23
 4010854:	8809883a 	mov	r4,r17
 4010858:	a80b883a 	mov	r5,r21
 401085c:	1886b03a 	or	r3,r3,r2
 4010860:	d8c00115 	stw	r3,4(sp)
 4010864:	853fffcc 	andi	r20,r16,65535
 4010868:	40083e40 	call	40083e4 <__udivsi3>
 401086c:	8809883a 	mov	r4,r17
 4010870:	a80b883a 	mov	r5,r21
 4010874:	a0a3383a 	mul	r17,r20,r2
 4010878:	40083ec0 	call	40083ec <__umodsi3>
 401087c:	d9000117 	ldw	r4,4(sp)
 4010880:	1004943a 	slli	r2,r2,16
 4010884:	b839883a 	mov	fp,r23
 4010888:	2006d43a 	srli	r3,r4,16
 401088c:	10c4b03a 	or	r2,r2,r3
 4010890:	1440022e 	bgeu	r2,r17,401089c <__umoddi3+0x330>
 4010894:	1405883a 	add	r2,r2,r16
 4010898:	1400962e 	bgeu	r2,r16,4010af4 <__umoddi3+0x588>
 401089c:	1463c83a 	sub	r17,r2,r17
 40108a0:	8809883a 	mov	r4,r17
 40108a4:	a80b883a 	mov	r5,r21
 40108a8:	40083e40 	call	40083e4 <__udivsi3>
 40108ac:	8809883a 	mov	r4,r17
 40108b0:	a80b883a 	mov	r5,r21
 40108b4:	a0a3383a 	mul	r17,r20,r2
 40108b8:	40083ec0 	call	40083ec <__umodsi3>
 40108bc:	d9400117 	ldw	r5,4(sp)
 40108c0:	1004943a 	slli	r2,r2,16
 40108c4:	28ffffcc 	andi	r3,r5,65535
 40108c8:	10c4b03a 	or	r2,r2,r3
 40108cc:	1440042e 	bgeu	r2,r17,40108e0 <__umoddi3+0x374>
 40108d0:	1405883a 	add	r2,r2,r16
 40108d4:	14000236 	bltu	r2,r16,40108e0 <__umoddi3+0x374>
 40108d8:	1440012e 	bgeu	r2,r17,40108e0 <__umoddi3+0x374>
 40108dc:	1405883a 	add	r2,r2,r16
 40108e0:	b5ec983a 	sll	r22,r22,r23
 40108e4:	1463c83a 	sub	r17,r2,r17
 40108e8:	003f4406 	br	40105fc <__umoddi3+0x90>
 40108ec:	3d4fc83a 	sub	r7,r7,r21
 40108f0:	3546983a 	sll	r3,r6,r21
 40108f4:	81c4d83a 	srl	r2,r16,r7
 40108f8:	a1e2d83a 	srl	r17,r20,r7
 40108fc:	a54c983a 	sll	r6,r20,r21
 4010900:	18aeb03a 	or	r23,r3,r2
 4010904:	b828d43a 	srli	r20,r23,16
 4010908:	b1c4d83a 	srl	r2,r22,r7
 401090c:	8809883a 	mov	r4,r17
 4010910:	a00b883a 	mov	r5,r20
 4010914:	308cb03a 	or	r6,r6,r2
 4010918:	d9c00315 	stw	r7,12(sp)
 401091c:	d9800215 	stw	r6,8(sp)
 4010920:	40083e40 	call	40083e4 <__udivsi3>
 4010924:	8809883a 	mov	r4,r17
 4010928:	a00b883a 	mov	r5,r20
 401092c:	1039883a 	mov	fp,r2
 4010930:	40083ec0 	call	40083ec <__umodsi3>
 4010934:	b8ffffcc 	andi	r3,r23,65535
 4010938:	d8c00415 	stw	r3,16(sp)
 401093c:	d9000217 	ldw	r4,8(sp)
 4010940:	d9400417 	ldw	r5,16(sp)
 4010944:	1004943a 	slli	r2,r2,16
 4010948:	2006d43a 	srli	r3,r4,16
 401094c:	8560983a 	sll	r16,r16,r21
 4010950:	2f23383a 	mul	r17,r5,fp
 4010954:	10c4b03a 	or	r2,r2,r3
 4010958:	dc000015 	stw	r16,0(sp)
 401095c:	b56c983a 	sll	r22,r22,r21
 4010960:	1440032e 	bgeu	r2,r17,4010970 <__umoddi3+0x404>
 4010964:	15c5883a 	add	r2,r2,r23
 4010968:	e73fffc4 	addi	fp,fp,-1
 401096c:	15c05d2e 	bgeu	r2,r23,4010ae4 <__umoddi3+0x578>
 4010970:	1463c83a 	sub	r17,r2,r17
 4010974:	8809883a 	mov	r4,r17
 4010978:	a00b883a 	mov	r5,r20
 401097c:	40083e40 	call	40083e4 <__udivsi3>
 4010980:	8809883a 	mov	r4,r17
 4010984:	a00b883a 	mov	r5,r20
 4010988:	1021883a 	mov	r16,r2
 401098c:	40083ec0 	call	40083ec <__umodsi3>
 4010990:	d8c00417 	ldw	r3,16(sp)
 4010994:	d9000217 	ldw	r4,8(sp)
 4010998:	1004943a 	slli	r2,r2,16
 401099c:	1c23383a 	mul	r17,r3,r16
 40109a0:	20ffffcc 	andi	r3,r4,65535
 40109a4:	10ceb03a 	or	r7,r2,r3
 40109a8:	3c40032e 	bgeu	r7,r17,40109b8 <__umoddi3+0x44c>
 40109ac:	3dcf883a 	add	r7,r7,r23
 40109b0:	843fffc4 	addi	r16,r16,-1
 40109b4:	3dc0472e 	bgeu	r7,r23,4010ad4 <__umoddi3+0x568>
 40109b8:	e004943a 	slli	r2,fp,16
 40109bc:	d9400017 	ldw	r5,0(sp)
 40109c0:	3c4fc83a 	sub	r7,r7,r17
 40109c4:	8084b03a 	or	r2,r16,r2
 40109c8:	28ffffcc 	andi	r3,r5,65535
 40109cc:	280cd43a 	srli	r6,r5,16
 40109d0:	100ad43a 	srli	r5,r2,16
 40109d4:	10bfffcc 	andi	r2,r2,65535
 40109d8:	10d1383a 	mul	r8,r2,r3
 40109dc:	28c7383a 	mul	r3,r5,r3
 40109e0:	1185383a 	mul	r2,r2,r6
 40109e4:	4008d43a 	srli	r4,r8,16
 40109e8:	298b383a 	mul	r5,r5,r6
 40109ec:	10c5883a 	add	r2,r2,r3
 40109f0:	2089883a 	add	r4,r4,r2
 40109f4:	20c0022e 	bgeu	r4,r3,4010a00 <__umoddi3+0x494>
 40109f8:	00800074 	movhi	r2,1
 40109fc:	288b883a 	add	r5,r5,r2
 4010a00:	2004d43a 	srli	r2,r4,16
 4010a04:	2008943a 	slli	r4,r4,16
 4010a08:	40ffffcc 	andi	r3,r8,65535
 4010a0c:	288b883a 	add	r5,r5,r2
 4010a10:	20c9883a 	add	r4,r4,r3
 4010a14:	39400b36 	bltu	r7,r5,4010a44 <__umoddi3+0x4d8>
 4010a18:	39403d26 	beq	r7,r5,4010b10 <__umoddi3+0x5a4>
 4010a1c:	394bc83a 	sub	r5,r7,r5
 4010a20:	00000f06 	br	4010a60 <__umoddi3+0x4f4>
 4010a24:	30c5c83a 	sub	r2,r6,r3
 4010a28:	1839883a 	mov	fp,r3
 4010a2c:	b084d83a 	srl	r2,r22,r2
 4010a30:	a0c6983a 	sll	r3,r20,r3
 4010a34:	8720983a 	sll	r16,r16,fp
 4010a38:	b72c983a 	sll	r22,r22,fp
 4010a3c:	18a8b03a 	or	r20,r3,r2
 4010a40:	003f3a06 	br	401072c <__umoddi3+0x1c0>
 4010a44:	d8c00017 	ldw	r3,0(sp)
 4010a48:	20c5c83a 	sub	r2,r4,r3
 4010a4c:	2089803a 	cmpltu	r4,r4,r2
 4010a50:	2dc7c83a 	sub	r3,r5,r23
 4010a54:	1907c83a 	sub	r3,r3,r4
 4010a58:	38cbc83a 	sub	r5,r7,r3
 4010a5c:	1009883a 	mov	r4,r2
 4010a60:	b105c83a 	sub	r2,r22,r4
 4010a64:	b087803a 	cmpltu	r3,r22,r2
 4010a68:	28c7c83a 	sub	r3,r5,r3
 4010a6c:	d9400317 	ldw	r5,12(sp)
 4010a70:	1544d83a 	srl	r2,r2,r21
 4010a74:	1948983a 	sll	r4,r3,r5
 4010a78:	1d46d83a 	srl	r3,r3,r21
 4010a7c:	20a4b03a 	or	r18,r4,r2
 4010a80:	9011883a 	mov	r8,r18
 4010a84:	1813883a 	mov	r9,r3
 4010a88:	003ef606 	br	4010664 <__umoddi3+0xf8>
 4010a8c:	01400604 	movi	r5,24
 4010a90:	2805883a 	mov	r2,r5
 4010a94:	003ecc06 	br	40105c8 <__umoddi3+0x5c>
 4010a98:	01400204 	movi	r5,8
 4010a9c:	2805883a 	mov	r2,r5
 4010aa0:	003ec906 	br	40105c8 <__umoddi3+0x5c>
 4010aa4:	01400204 	movi	r5,8
 4010aa8:	2805883a 	mov	r2,r5
 4010aac:	003f0106 	br	40106b4 <__umoddi3+0x148>
 4010ab0:	01400204 	movi	r5,8
 4010ab4:	2805883a 	mov	r2,r5
 4010ab8:	003f1206 	br	4010704 <__umoddi3+0x198>
 4010abc:	01400604 	movi	r5,24
 4010ac0:	2805883a 	mov	r2,r5
 4010ac4:	003f0f06 	br	4010704 <__umoddi3+0x198>
 4010ac8:	01400604 	movi	r5,24
 4010acc:	2805883a 	mov	r2,r5
 4010ad0:	003ef806 	br	40106b4 <__umoddi3+0x148>
 4010ad4:	3c7fb82e 	bgeu	r7,r17,40109b8 <__umoddi3+0x44c>
 4010ad8:	843fffc4 	addi	r16,r16,-1
 4010adc:	3dcf883a 	add	r7,r7,r23
 4010ae0:	003fb506 	br	40109b8 <__umoddi3+0x44c>
 4010ae4:	147fa22e 	bgeu	r2,r17,4010970 <__umoddi3+0x404>
 4010ae8:	e73fffc4 	addi	fp,fp,-1
 4010aec:	15c5883a 	add	r2,r2,r23
 4010af0:	003f9f06 	br	4010970 <__umoddi3+0x404>
 4010af4:	147f692e 	bgeu	r2,r17,401089c <__umoddi3+0x330>
 4010af8:	1405883a 	add	r2,r2,r16
 4010afc:	003f6706 	br	401089c <__umoddi3+0x330>
 4010b00:	1405883a 	add	r2,r2,r16
 4010b04:	003f1906 	br	401076c <__umoddi3+0x200>
 4010b08:	1405883a 	add	r2,r2,r16
 4010b0c:	003ec906 	br	4010634 <__umoddi3+0xc8>
 4010b10:	b13fcc36 	bltu	r22,r4,4010a44 <__umoddi3+0x4d8>
 4010b14:	000b883a 	mov	r5,zero
 4010b18:	003fd106 	br	4010a60 <__umoddi3+0x4f4>

04010b1c <__eqdf2>:
 4010b1c:	deffef04 	addi	sp,sp,-68
 4010b20:	dc400f15 	stw	r17,60(sp)
 4010b24:	dc400404 	addi	r17,sp,16
 4010b28:	2005883a 	mov	r2,r4
 4010b2c:	2807883a 	mov	r3,r5
 4010b30:	dc000e15 	stw	r16,56(sp)
 4010b34:	d809883a 	mov	r4,sp
 4010b38:	880b883a 	mov	r5,r17
 4010b3c:	dc000904 	addi	r16,sp,36
 4010b40:	d8c00115 	stw	r3,4(sp)
 4010b44:	d8800015 	stw	r2,0(sp)
 4010b48:	d9800215 	stw	r6,8(sp)
 4010b4c:	dfc01015 	stw	ra,64(sp)
 4010b50:	d9c00315 	stw	r7,12(sp)
 4010b54:	40088200 	call	4008820 <__unpack_d>
 4010b58:	d9000204 	addi	r4,sp,8
 4010b5c:	800b883a 	mov	r5,r16
 4010b60:	40088200 	call	4008820 <__unpack_d>
 4010b64:	d8800417 	ldw	r2,16(sp)
 4010b68:	00c00044 	movi	r3,1
 4010b6c:	180d883a 	mov	r6,r3
 4010b70:	1880062e 	bgeu	r3,r2,4010b8c <__eqdf2+0x70>
 4010b74:	d8800917 	ldw	r2,36(sp)
 4010b78:	8809883a 	mov	r4,r17
 4010b7c:	800b883a 	mov	r5,r16
 4010b80:	1880022e 	bgeu	r3,r2,4010b8c <__eqdf2+0x70>
 4010b84:	40089580 	call	4008958 <__fpcmp_parts_d>
 4010b88:	100d883a 	mov	r6,r2
 4010b8c:	3005883a 	mov	r2,r6
 4010b90:	dfc01017 	ldw	ra,64(sp)
 4010b94:	dc400f17 	ldw	r17,60(sp)
 4010b98:	dc000e17 	ldw	r16,56(sp)
 4010b9c:	dec01104 	addi	sp,sp,68
 4010ba0:	f800283a 	ret

04010ba4 <__nedf2>:
 4010ba4:	deffef04 	addi	sp,sp,-68
 4010ba8:	dc400f15 	stw	r17,60(sp)
 4010bac:	dc400404 	addi	r17,sp,16
 4010bb0:	2005883a 	mov	r2,r4
 4010bb4:	2807883a 	mov	r3,r5
 4010bb8:	dc000e15 	stw	r16,56(sp)
 4010bbc:	d809883a 	mov	r4,sp
 4010bc0:	880b883a 	mov	r5,r17
 4010bc4:	dc000904 	addi	r16,sp,36
 4010bc8:	d8c00115 	stw	r3,4(sp)
 4010bcc:	d8800015 	stw	r2,0(sp)
 4010bd0:	d9800215 	stw	r6,8(sp)
 4010bd4:	dfc01015 	stw	ra,64(sp)
 4010bd8:	d9c00315 	stw	r7,12(sp)
 4010bdc:	40088200 	call	4008820 <__unpack_d>
 4010be0:	d9000204 	addi	r4,sp,8
 4010be4:	800b883a 	mov	r5,r16
 4010be8:	40088200 	call	4008820 <__unpack_d>
 4010bec:	d8800417 	ldw	r2,16(sp)
 4010bf0:	00c00044 	movi	r3,1
 4010bf4:	180d883a 	mov	r6,r3
 4010bf8:	1880062e 	bgeu	r3,r2,4010c14 <__nedf2+0x70>
 4010bfc:	d8800917 	ldw	r2,36(sp)
 4010c00:	8809883a 	mov	r4,r17
 4010c04:	800b883a 	mov	r5,r16
 4010c08:	1880022e 	bgeu	r3,r2,4010c14 <__nedf2+0x70>
 4010c0c:	40089580 	call	4008958 <__fpcmp_parts_d>
 4010c10:	100d883a 	mov	r6,r2
 4010c14:	3005883a 	mov	r2,r6
 4010c18:	dfc01017 	ldw	ra,64(sp)
 4010c1c:	dc400f17 	ldw	r17,60(sp)
 4010c20:	dc000e17 	ldw	r16,56(sp)
 4010c24:	dec01104 	addi	sp,sp,68
 4010c28:	f800283a 	ret

04010c2c <__gtdf2>:
 4010c2c:	deffef04 	addi	sp,sp,-68
 4010c30:	dc400f15 	stw	r17,60(sp)
 4010c34:	dc400404 	addi	r17,sp,16
 4010c38:	2005883a 	mov	r2,r4
 4010c3c:	2807883a 	mov	r3,r5
 4010c40:	dc000e15 	stw	r16,56(sp)
 4010c44:	d809883a 	mov	r4,sp
 4010c48:	880b883a 	mov	r5,r17
 4010c4c:	dc000904 	addi	r16,sp,36
 4010c50:	d8c00115 	stw	r3,4(sp)
 4010c54:	d8800015 	stw	r2,0(sp)
 4010c58:	d9800215 	stw	r6,8(sp)
 4010c5c:	dfc01015 	stw	ra,64(sp)
 4010c60:	d9c00315 	stw	r7,12(sp)
 4010c64:	40088200 	call	4008820 <__unpack_d>
 4010c68:	d9000204 	addi	r4,sp,8
 4010c6c:	800b883a 	mov	r5,r16
 4010c70:	40088200 	call	4008820 <__unpack_d>
 4010c74:	d8800417 	ldw	r2,16(sp)
 4010c78:	00c00044 	movi	r3,1
 4010c7c:	01bfffc4 	movi	r6,-1
 4010c80:	1880062e 	bgeu	r3,r2,4010c9c <__gtdf2+0x70>
 4010c84:	d8800917 	ldw	r2,36(sp)
 4010c88:	8809883a 	mov	r4,r17
 4010c8c:	800b883a 	mov	r5,r16
 4010c90:	1880022e 	bgeu	r3,r2,4010c9c <__gtdf2+0x70>
 4010c94:	40089580 	call	4008958 <__fpcmp_parts_d>
 4010c98:	100d883a 	mov	r6,r2
 4010c9c:	3005883a 	mov	r2,r6
 4010ca0:	dfc01017 	ldw	ra,64(sp)
 4010ca4:	dc400f17 	ldw	r17,60(sp)
 4010ca8:	dc000e17 	ldw	r16,56(sp)
 4010cac:	dec01104 	addi	sp,sp,68
 4010cb0:	f800283a 	ret

04010cb4 <__gedf2>:
 4010cb4:	deffef04 	addi	sp,sp,-68
 4010cb8:	dc400f15 	stw	r17,60(sp)
 4010cbc:	dc400404 	addi	r17,sp,16
 4010cc0:	2005883a 	mov	r2,r4
 4010cc4:	2807883a 	mov	r3,r5
 4010cc8:	dc000e15 	stw	r16,56(sp)
 4010ccc:	d809883a 	mov	r4,sp
 4010cd0:	880b883a 	mov	r5,r17
 4010cd4:	dc000904 	addi	r16,sp,36
 4010cd8:	d8c00115 	stw	r3,4(sp)
 4010cdc:	d8800015 	stw	r2,0(sp)
 4010ce0:	d9800215 	stw	r6,8(sp)
 4010ce4:	dfc01015 	stw	ra,64(sp)
 4010ce8:	d9c00315 	stw	r7,12(sp)
 4010cec:	40088200 	call	4008820 <__unpack_d>
 4010cf0:	d9000204 	addi	r4,sp,8
 4010cf4:	800b883a 	mov	r5,r16
 4010cf8:	40088200 	call	4008820 <__unpack_d>
 4010cfc:	d8800417 	ldw	r2,16(sp)
 4010d00:	00c00044 	movi	r3,1
 4010d04:	01bfffc4 	movi	r6,-1
 4010d08:	1880062e 	bgeu	r3,r2,4010d24 <__gedf2+0x70>
 4010d0c:	d8800917 	ldw	r2,36(sp)
 4010d10:	8809883a 	mov	r4,r17
 4010d14:	800b883a 	mov	r5,r16
 4010d18:	1880022e 	bgeu	r3,r2,4010d24 <__gedf2+0x70>
 4010d1c:	40089580 	call	4008958 <__fpcmp_parts_d>
 4010d20:	100d883a 	mov	r6,r2
 4010d24:	3005883a 	mov	r2,r6
 4010d28:	dfc01017 	ldw	ra,64(sp)
 4010d2c:	dc400f17 	ldw	r17,60(sp)
 4010d30:	dc000e17 	ldw	r16,56(sp)
 4010d34:	dec01104 	addi	sp,sp,68
 4010d38:	f800283a 	ret

04010d3c <__floatunsidf>:
 4010d3c:	defff204 	addi	sp,sp,-56
 4010d40:	dfc00d15 	stw	ra,52(sp)
 4010d44:	ddc00c15 	stw	r23,48(sp)
 4010d48:	dd800b15 	stw	r22,44(sp)
 4010d4c:	dd400a15 	stw	r21,40(sp)
 4010d50:	dd000915 	stw	r20,36(sp)
 4010d54:	dcc00815 	stw	r19,32(sp)
 4010d58:	dc800715 	stw	r18,28(sp)
 4010d5c:	dc400615 	stw	r17,24(sp)
 4010d60:	dc000515 	stw	r16,20(sp)
 4010d64:	d8000115 	stw	zero,4(sp)
 4010d68:	20000f1e 	bne	r4,zero,4010da8 <__floatunsidf+0x6c>
 4010d6c:	00800084 	movi	r2,2
 4010d70:	d8800015 	stw	r2,0(sp)
 4010d74:	d809883a 	mov	r4,sp
 4010d78:	400850c0 	call	400850c <__pack_d>
 4010d7c:	dfc00d17 	ldw	ra,52(sp)
 4010d80:	ddc00c17 	ldw	r23,48(sp)
 4010d84:	dd800b17 	ldw	r22,44(sp)
 4010d88:	dd400a17 	ldw	r21,40(sp)
 4010d8c:	dd000917 	ldw	r20,36(sp)
 4010d90:	dcc00817 	ldw	r19,32(sp)
 4010d94:	dc800717 	ldw	r18,28(sp)
 4010d98:	dc400617 	ldw	r17,24(sp)
 4010d9c:	dc000517 	ldw	r16,20(sp)
 4010da0:	dec00e04 	addi	sp,sp,56
 4010da4:	f800283a 	ret
 4010da8:	008000c4 	movi	r2,3
 4010dac:	00c00f04 	movi	r3,60
 4010db0:	002f883a 	mov	r23,zero
 4010db4:	202d883a 	mov	r22,r4
 4010db8:	d8800015 	stw	r2,0(sp)
 4010dbc:	d8c00215 	stw	r3,8(sp)
 4010dc0:	d9000315 	stw	r4,12(sp)
 4010dc4:	ddc00415 	stw	r23,16(sp)
 4010dc8:	400848c0 	call	400848c <__clzsi2>
 4010dcc:	12400744 	addi	r9,r2,29
 4010dd0:	48000b16 	blt	r9,zero,4010e00 <__floatunsidf+0xc4>
 4010dd4:	483fe726 	beq	r9,zero,4010d74 <__floatunsidf+0x38>
 4010dd8:	10bfff44 	addi	r2,r2,-3
 4010ddc:	10002e16 	blt	r2,zero,4010e98 <__floatunsidf+0x15c>
 4010de0:	b0a2983a 	sll	r17,r22,r2
 4010de4:	0021883a 	mov	r16,zero
 4010de8:	d8800217 	ldw	r2,8(sp)
 4010dec:	dc400415 	stw	r17,16(sp)
 4010df0:	dc000315 	stw	r16,12(sp)
 4010df4:	1245c83a 	sub	r2,r2,r9
 4010df8:	d8800215 	stw	r2,8(sp)
 4010dfc:	003fdd06 	br	4010d74 <__floatunsidf+0x38>
 4010e00:	0255c83a 	sub	r10,zero,r9
 4010e04:	51bff804 	addi	r6,r10,-32
 4010e08:	30001b16 	blt	r6,zero,4010e78 <__floatunsidf+0x13c>
 4010e0c:	b9a8d83a 	srl	r20,r23,r6
 4010e10:	002b883a 	mov	r21,zero
 4010e14:	000f883a 	mov	r7,zero
 4010e18:	01000044 	movi	r4,1
 4010e1c:	0011883a 	mov	r8,zero
 4010e20:	30002516 	blt	r6,zero,4010eb8 <__floatunsidf+0x17c>
 4010e24:	21a6983a 	sll	r19,r4,r6
 4010e28:	0025883a 	mov	r18,zero
 4010e2c:	00bfffc4 	movi	r2,-1
 4010e30:	9089883a 	add	r4,r18,r2
 4010e34:	988b883a 	add	r5,r19,r2
 4010e38:	248d803a 	cmpltu	r6,r4,r18
 4010e3c:	314b883a 	add	r5,r6,r5
 4010e40:	b104703a 	and	r2,r22,r4
 4010e44:	b946703a 	and	r3,r23,r5
 4010e48:	10c4b03a 	or	r2,r2,r3
 4010e4c:	10000226 	beq	r2,zero,4010e58 <__floatunsidf+0x11c>
 4010e50:	01c00044 	movi	r7,1
 4010e54:	0011883a 	mov	r8,zero
 4010e58:	d9000217 	ldw	r4,8(sp)
 4010e5c:	a1c4b03a 	or	r2,r20,r7
 4010e60:	aa06b03a 	or	r3,r21,r8
 4010e64:	2249c83a 	sub	r4,r4,r9
 4010e68:	d8c00415 	stw	r3,16(sp)
 4010e6c:	d9000215 	stw	r4,8(sp)
 4010e70:	d8800315 	stw	r2,12(sp)
 4010e74:	003fbf06 	br	4010d74 <__floatunsidf+0x38>
 4010e78:	bdc7883a 	add	r3,r23,r23
 4010e7c:	008007c4 	movi	r2,31
 4010e80:	1285c83a 	sub	r2,r2,r10
 4010e84:	1886983a 	sll	r3,r3,r2
 4010e88:	b2a8d83a 	srl	r20,r22,r10
 4010e8c:	baaad83a 	srl	r21,r23,r10
 4010e90:	1d28b03a 	or	r20,r3,r20
 4010e94:	003fdf06 	br	4010e14 <__floatunsidf+0xd8>
 4010e98:	b006d07a 	srli	r3,r22,1
 4010e9c:	008007c4 	movi	r2,31
 4010ea0:	1245c83a 	sub	r2,r2,r9
 4010ea4:	1886d83a 	srl	r3,r3,r2
 4010ea8:	ba62983a 	sll	r17,r23,r9
 4010eac:	b260983a 	sll	r16,r22,r9
 4010eb0:	1c62b03a 	or	r17,r3,r17
 4010eb4:	003fcc06 	br	4010de8 <__floatunsidf+0xac>
 4010eb8:	2006d07a 	srli	r3,r4,1
 4010ebc:	008007c4 	movi	r2,31
 4010ec0:	1285c83a 	sub	r2,r2,r10
 4010ec4:	18a6d83a 	srl	r19,r3,r2
 4010ec8:	22a4983a 	sll	r18,r4,r10
 4010ecc:	003fd706 	br	4010e2c <__floatunsidf+0xf0>

04010ed0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4010ed0:	defff404 	addi	sp,sp,-48
 4010ed4:	df000b15 	stw	fp,44(sp)
 4010ed8:	df000b04 	addi	fp,sp,44
 4010edc:	e13ffb15 	stw	r4,-20(fp)
 4010ee0:	e17ffc15 	stw	r5,-16(fp)
 4010ee4:	e1bffd15 	stw	r6,-12(fp)
 4010ee8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4010eec:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4010ef0:	008100f4 	movhi	r2,1027
 4010ef4:	10933a04 	addi	r2,r2,19688
 4010ef8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 4010efc:	1005003a 	cmpeq	r2,r2,zero
 4010f00:	1000411e 	bne	r2,zero,4011008 <alt_alarm_start+0x138>
  {
    if (alarm)
 4010f04:	e0bffb17 	ldw	r2,-20(fp)
 4010f08:	1005003a 	cmpeq	r2,r2,zero
 4010f0c:	10003b1e 	bne	r2,zero,4010ffc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 4010f10:	e0fffb17 	ldw	r3,-20(fp)
 4010f14:	e0bffd17 	ldw	r2,-12(fp)
 4010f18:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 4010f1c:	e0fffb17 	ldw	r3,-20(fp)
 4010f20:	e0bffe17 	ldw	r2,-8(fp)
 4010f24:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010f28:	0005303a 	rdctl	r2,status
 4010f2c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010f30:	e0fff817 	ldw	r3,-32(fp)
 4010f34:	00bfff84 	movi	r2,-2
 4010f38:	1884703a 	and	r2,r3,r2
 4010f3c:	1001703a 	wrctl	status,r2
  
  return context;
 4010f40:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 4010f44:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4010f48:	008100f4 	movhi	r2,1027
 4010f4c:	10933b04 	addi	r2,r2,19692
 4010f50:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 4010f54:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4010f58:	e0fffc17 	ldw	r3,-16(fp)
 4010f5c:	e0bff917 	ldw	r2,-28(fp)
 4010f60:	1885883a 	add	r2,r3,r2
 4010f64:	10c00044 	addi	r3,r2,1
 4010f68:	e0bffb17 	ldw	r2,-20(fp)
 4010f6c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4010f70:	e0bffb17 	ldw	r2,-20(fp)
 4010f74:	10c00217 	ldw	r3,8(r2)
 4010f78:	e0bff917 	ldw	r2,-28(fp)
 4010f7c:	1880042e 	bgeu	r3,r2,4010f90 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 4010f80:	e0fffb17 	ldw	r3,-20(fp)
 4010f84:	00800044 	movi	r2,1
 4010f88:	18800405 	stb	r2,16(r3)
 4010f8c:	00000206 	br	4010f98 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 4010f90:	e0bffb17 	ldw	r2,-20(fp)
 4010f94:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4010f98:	e0fffb17 	ldw	r3,-20(fp)
 4010f9c:	008100f4 	movhi	r2,1027
 4010fa0:	1085a704 	addi	r2,r2,5788
 4010fa4:	e0bff615 	stw	r2,-40(fp)
 4010fa8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4010fac:	e0fff717 	ldw	r3,-36(fp)
 4010fb0:	e0bff617 	ldw	r2,-40(fp)
 4010fb4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 4010fb8:	e0bff617 	ldw	r2,-40(fp)
 4010fbc:	10c00017 	ldw	r3,0(r2)
 4010fc0:	e0bff717 	ldw	r2,-36(fp)
 4010fc4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4010fc8:	e0bff617 	ldw	r2,-40(fp)
 4010fcc:	10c00017 	ldw	r3,0(r2)
 4010fd0:	e0bff717 	ldw	r2,-36(fp)
 4010fd4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 4010fd8:	e0fff617 	ldw	r3,-40(fp)
 4010fdc:	e0bff717 	ldw	r2,-36(fp)
 4010fe0:	18800015 	stw	r2,0(r3)
 4010fe4:	e0bffa17 	ldw	r2,-24(fp)
 4010fe8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010fec:	e0bff517 	ldw	r2,-44(fp)
 4010ff0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4010ff4:	e03fff15 	stw	zero,-4(fp)
 4010ff8:	00000506 	br	4011010 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 4010ffc:	00bffa84 	movi	r2,-22
 4011000:	e0bfff15 	stw	r2,-4(fp)
 4011004:	00000206 	br	4011010 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 4011008:	00bfde84 	movi	r2,-134
 401100c:	e0bfff15 	stw	r2,-4(fp)
 4011010:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 4011014:	e037883a 	mov	sp,fp
 4011018:	df000017 	ldw	fp,0(sp)
 401101c:	dec00104 	addi	sp,sp,4
 4011020:	f800283a 	ret

04011024 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4011024:	defff804 	addi	sp,sp,-32
 4011028:	dfc00715 	stw	ra,28(sp)
 401102c:	df000615 	stw	fp,24(sp)
 4011030:	df000604 	addi	fp,sp,24
 4011034:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4011038:	e0bffc17 	ldw	r2,-16(fp)
 401103c:	1004803a 	cmplt	r2,r2,zero
 4011040:	1000081e 	bne	r2,zero,4011064 <close+0x40>
 4011044:	e0bffc17 	ldw	r2,-16(fp)
 4011048:	10800324 	muli	r2,r2,12
 401104c:	1007883a 	mov	r3,r2
 4011050:	008100f4 	movhi	r2,1027
 4011054:	10811e04 	addi	r2,r2,1144
 4011058:	1887883a 	add	r3,r3,r2
 401105c:	e0ffff15 	stw	r3,-4(fp)
 4011060:	00000106 	br	4011068 <close+0x44>
 4011064:	e03fff15 	stw	zero,-4(fp)
 4011068:	e0bfff17 	ldw	r2,-4(fp)
 401106c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 4011070:	e0bffb17 	ldw	r2,-20(fp)
 4011074:	1005003a 	cmpeq	r2,r2,zero
 4011078:	10001d1e 	bne	r2,zero,40110f0 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 401107c:	e0bffb17 	ldw	r2,-20(fp)
 4011080:	10800017 	ldw	r2,0(r2)
 4011084:	10800417 	ldw	r2,16(r2)
 4011088:	1005003a 	cmpeq	r2,r2,zero
 401108c:	1000071e 	bne	r2,zero,40110ac <close+0x88>
 4011090:	e0bffb17 	ldw	r2,-20(fp)
 4011094:	10800017 	ldw	r2,0(r2)
 4011098:	10800417 	ldw	r2,16(r2)
 401109c:	e13ffb17 	ldw	r4,-20(fp)
 40110a0:	103ee83a 	callr	r2
 40110a4:	e0bffe15 	stw	r2,-8(fp)
 40110a8:	00000106 	br	40110b0 <close+0x8c>
 40110ac:	e03ffe15 	stw	zero,-8(fp)
 40110b0:	e0bffe17 	ldw	r2,-8(fp)
 40110b4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 40110b8:	e13ffc17 	ldw	r4,-16(fp)
 40110bc:	4011b340 	call	4011b34 <alt_release_fd>
    if (rval < 0)
 40110c0:	e0bffa17 	ldw	r2,-24(fp)
 40110c4:	1004403a 	cmpge	r2,r2,zero
 40110c8:	1000071e 	bne	r2,zero,40110e8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 40110cc:	40111200 	call	4011120 <alt_get_errno>
 40110d0:	e0fffa17 	ldw	r3,-24(fp)
 40110d4:	00c7c83a 	sub	r3,zero,r3
 40110d8:	10c00015 	stw	r3,0(r2)
      return -1;
 40110dc:	00bfffc4 	movi	r2,-1
 40110e0:	e0bffd15 	stw	r2,-12(fp)
 40110e4:	00000806 	br	4011108 <close+0xe4>
    }
    return 0;
 40110e8:	e03ffd15 	stw	zero,-12(fp)
 40110ec:	00000606 	br	4011108 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40110f0:	40111200 	call	4011120 <alt_get_errno>
 40110f4:	1007883a 	mov	r3,r2
 40110f8:	00801444 	movi	r2,81
 40110fc:	18800015 	stw	r2,0(r3)
    return -1;
 4011100:	00bfffc4 	movi	r2,-1
 4011104:	e0bffd15 	stw	r2,-12(fp)
 4011108:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 401110c:	e037883a 	mov	sp,fp
 4011110:	dfc00117 	ldw	ra,4(sp)
 4011114:	df000017 	ldw	fp,0(sp)
 4011118:	dec00204 	addi	sp,sp,8
 401111c:	f800283a 	ret

04011120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011120:	defffd04 	addi	sp,sp,-12
 4011124:	dfc00215 	stw	ra,8(sp)
 4011128:	df000115 	stw	fp,4(sp)
 401112c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4011130:	008100f4 	movhi	r2,1027
 4011134:	1085a404 	addi	r2,r2,5776
 4011138:	10800017 	ldw	r2,0(r2)
 401113c:	1005003a 	cmpeq	r2,r2,zero
 4011140:	1000061e 	bne	r2,zero,401115c <alt_get_errno+0x3c>
 4011144:	008100f4 	movhi	r2,1027
 4011148:	1085a404 	addi	r2,r2,5776
 401114c:	10800017 	ldw	r2,0(r2)
 4011150:	103ee83a 	callr	r2
 4011154:	e0bfff15 	stw	r2,-4(fp)
 4011158:	00000306 	br	4011168 <alt_get_errno+0x48>
 401115c:	008100f4 	movhi	r2,1027
 4011160:	10933204 	addi	r2,r2,19656
 4011164:	e0bfff15 	stw	r2,-4(fp)
 4011168:	e0bfff17 	ldw	r2,-4(fp)
}
 401116c:	e037883a 	mov	sp,fp
 4011170:	dfc00117 	ldw	ra,4(sp)
 4011174:	df000017 	ldw	fp,0(sp)
 4011178:	dec00204 	addi	sp,sp,8
 401117c:	f800283a 	ret

04011180 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4011180:	defffc04 	addi	sp,sp,-16
 4011184:	df000315 	stw	fp,12(sp)
 4011188:	df000304 	addi	fp,sp,12
 401118c:	e13ffd15 	stw	r4,-12(fp)
 4011190:	e17ffe15 	stw	r5,-8(fp)
 4011194:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4011198:	e0bfff17 	ldw	r2,-4(fp)
}
 401119c:	e037883a 	mov	sp,fp
 40111a0:	df000017 	ldw	fp,0(sp)
 40111a4:	dec00104 	addi	sp,sp,4
 40111a8:	f800283a 	ret

040111ac <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 40111ac:	defff904 	addi	sp,sp,-28
 40111b0:	dfc00615 	stw	ra,24(sp)
 40111b4:	df000515 	stw	fp,20(sp)
 40111b8:	df000504 	addi	fp,sp,20
 40111bc:	e13ffc15 	stw	r4,-16(fp)
 40111c0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40111c4:	e0bffc17 	ldw	r2,-16(fp)
 40111c8:	1004803a 	cmplt	r2,r2,zero
 40111cc:	1000081e 	bne	r2,zero,40111f0 <fstat+0x44>
 40111d0:	e0bffc17 	ldw	r2,-16(fp)
 40111d4:	10800324 	muli	r2,r2,12
 40111d8:	1007883a 	mov	r3,r2
 40111dc:	008100f4 	movhi	r2,1027
 40111e0:	10811e04 	addi	r2,r2,1144
 40111e4:	1887883a 	add	r3,r3,r2
 40111e8:	e0ffff15 	stw	r3,-4(fp)
 40111ec:	00000106 	br	40111f4 <fstat+0x48>
 40111f0:	e03fff15 	stw	zero,-4(fp)
 40111f4:	e0bfff17 	ldw	r2,-4(fp)
 40111f8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 40111fc:	e0bffb17 	ldw	r2,-20(fp)
 4011200:	1005003a 	cmpeq	r2,r2,zero
 4011204:	1000121e 	bne	r2,zero,4011250 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4011208:	e0bffb17 	ldw	r2,-20(fp)
 401120c:	10800017 	ldw	r2,0(r2)
 4011210:	10800817 	ldw	r2,32(r2)
 4011214:	1005003a 	cmpeq	r2,r2,zero
 4011218:	1000081e 	bne	r2,zero,401123c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 401121c:	e0bffb17 	ldw	r2,-20(fp)
 4011220:	10800017 	ldw	r2,0(r2)
 4011224:	10800817 	ldw	r2,32(r2)
 4011228:	e13ffb17 	ldw	r4,-20(fp)
 401122c:	e17ffd17 	ldw	r5,-12(fp)
 4011230:	103ee83a 	callr	r2
 4011234:	e0bffe15 	stw	r2,-8(fp)
 4011238:	00000b06 	br	4011268 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 401123c:	e0fffd17 	ldw	r3,-12(fp)
 4011240:	00880004 	movi	r2,8192
 4011244:	18800115 	stw	r2,4(r3)
      return 0;
 4011248:	e03ffe15 	stw	zero,-8(fp)
 401124c:	00000606 	br	4011268 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4011250:	40112800 	call	4011280 <alt_get_errno>
 4011254:	1007883a 	mov	r3,r2
 4011258:	00801444 	movi	r2,81
 401125c:	18800015 	stw	r2,0(r3)
    return -1;
 4011260:	00bfffc4 	movi	r2,-1
 4011264:	e0bffe15 	stw	r2,-8(fp)
 4011268:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 401126c:	e037883a 	mov	sp,fp
 4011270:	dfc00117 	ldw	ra,4(sp)
 4011274:	df000017 	ldw	fp,0(sp)
 4011278:	dec00204 	addi	sp,sp,8
 401127c:	f800283a 	ret

04011280 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011280:	defffd04 	addi	sp,sp,-12
 4011284:	dfc00215 	stw	ra,8(sp)
 4011288:	df000115 	stw	fp,4(sp)
 401128c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4011290:	008100f4 	movhi	r2,1027
 4011294:	1085a404 	addi	r2,r2,5776
 4011298:	10800017 	ldw	r2,0(r2)
 401129c:	1005003a 	cmpeq	r2,r2,zero
 40112a0:	1000061e 	bne	r2,zero,40112bc <alt_get_errno+0x3c>
 40112a4:	008100f4 	movhi	r2,1027
 40112a8:	1085a404 	addi	r2,r2,5776
 40112ac:	10800017 	ldw	r2,0(r2)
 40112b0:	103ee83a 	callr	r2
 40112b4:	e0bfff15 	stw	r2,-4(fp)
 40112b8:	00000306 	br	40112c8 <alt_get_errno+0x48>
 40112bc:	008100f4 	movhi	r2,1027
 40112c0:	10933204 	addi	r2,r2,19656
 40112c4:	e0bfff15 	stw	r2,-4(fp)
 40112c8:	e0bfff17 	ldw	r2,-4(fp)
}
 40112cc:	e037883a 	mov	sp,fp
 40112d0:	dfc00117 	ldw	ra,4(sp)
 40112d4:	df000017 	ldw	fp,0(sp)
 40112d8:	dec00204 	addi	sp,sp,8
 40112dc:	f800283a 	ret

040112e0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40112e0:	defff904 	addi	sp,sp,-28
 40112e4:	dfc00615 	stw	ra,24(sp)
 40112e8:	df000515 	stw	fp,20(sp)
 40112ec:	df000504 	addi	fp,sp,20
 40112f0:	e13ffc15 	stw	r4,-16(fp)
 40112f4:	e17ffd15 	stw	r5,-12(fp)
 40112f8:	e1bffe15 	stw	r6,-8(fp)
 40112fc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4011300:	e0800217 	ldw	r2,8(fp)
 4011304:	d8800015 	stw	r2,0(sp)
 4011308:	e13ffc17 	ldw	r4,-16(fp)
 401130c:	e17ffd17 	ldw	r5,-12(fp)
 4011310:	e1bffe17 	ldw	r6,-8(fp)
 4011314:	e1ffff17 	ldw	r7,-4(fp)
 4011318:	40114b40 	call	40114b4 <alt_iic_isr_register>
}  
 401131c:	e037883a 	mov	sp,fp
 4011320:	dfc00117 	ldw	ra,4(sp)
 4011324:	df000017 	ldw	fp,0(sp)
 4011328:	dec00204 	addi	sp,sp,8
 401132c:	f800283a 	ret

04011330 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4011330:	defff904 	addi	sp,sp,-28
 4011334:	df000615 	stw	fp,24(sp)
 4011338:	df000604 	addi	fp,sp,24
 401133c:	e13ffe15 	stw	r4,-8(fp)
 4011340:	e17fff15 	stw	r5,-4(fp)
 4011344:	e0bfff17 	ldw	r2,-4(fp)
 4011348:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401134c:	0005303a 	rdctl	r2,status
 4011350:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011354:	e0fffb17 	ldw	r3,-20(fp)
 4011358:	00bfff84 	movi	r2,-2
 401135c:	1884703a 	and	r2,r3,r2
 4011360:	1001703a 	wrctl	status,r2
  
  return context;
 4011364:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4011368:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 401136c:	e0fffc17 	ldw	r3,-16(fp)
 4011370:	00800044 	movi	r2,1
 4011374:	10c4983a 	sll	r2,r2,r3
 4011378:	1007883a 	mov	r3,r2
 401137c:	008100f4 	movhi	r2,1027
 4011380:	10933604 	addi	r2,r2,19672
 4011384:	10800017 	ldw	r2,0(r2)
 4011388:	1886b03a 	or	r3,r3,r2
 401138c:	008100f4 	movhi	r2,1027
 4011390:	10933604 	addi	r2,r2,19672
 4011394:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011398:	008100f4 	movhi	r2,1027
 401139c:	10933604 	addi	r2,r2,19672
 40113a0:	10800017 	ldw	r2,0(r2)
 40113a4:	100170fa 	wrctl	ienable,r2
 40113a8:	e0bffd17 	ldw	r2,-12(fp)
 40113ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40113b0:	e0bffa17 	ldw	r2,-24(fp)
 40113b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40113b8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 40113bc:	e037883a 	mov	sp,fp
 40113c0:	df000017 	ldw	fp,0(sp)
 40113c4:	dec00104 	addi	sp,sp,4
 40113c8:	f800283a 	ret

040113cc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40113cc:	defff904 	addi	sp,sp,-28
 40113d0:	df000615 	stw	fp,24(sp)
 40113d4:	df000604 	addi	fp,sp,24
 40113d8:	e13ffe15 	stw	r4,-8(fp)
 40113dc:	e17fff15 	stw	r5,-4(fp)
 40113e0:	e0bfff17 	ldw	r2,-4(fp)
 40113e4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40113e8:	0005303a 	rdctl	r2,status
 40113ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40113f0:	e0fffb17 	ldw	r3,-20(fp)
 40113f4:	00bfff84 	movi	r2,-2
 40113f8:	1884703a 	and	r2,r3,r2
 40113fc:	1001703a 	wrctl	status,r2
  
  return context;
 4011400:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4011404:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 4011408:	e0fffc17 	ldw	r3,-16(fp)
 401140c:	00800044 	movi	r2,1
 4011410:	10c4983a 	sll	r2,r2,r3
 4011414:	0084303a 	nor	r2,zero,r2
 4011418:	1007883a 	mov	r3,r2
 401141c:	008100f4 	movhi	r2,1027
 4011420:	10933604 	addi	r2,r2,19672
 4011424:	10800017 	ldw	r2,0(r2)
 4011428:	1886703a 	and	r3,r3,r2
 401142c:	008100f4 	movhi	r2,1027
 4011430:	10933604 	addi	r2,r2,19672
 4011434:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011438:	008100f4 	movhi	r2,1027
 401143c:	10933604 	addi	r2,r2,19672
 4011440:	10800017 	ldw	r2,0(r2)
 4011444:	100170fa 	wrctl	ienable,r2
 4011448:	e0bffd17 	ldw	r2,-12(fp)
 401144c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011450:	e0bffa17 	ldw	r2,-24(fp)
 4011454:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4011458:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 401145c:	e037883a 	mov	sp,fp
 4011460:	df000017 	ldw	fp,0(sp)
 4011464:	dec00104 	addi	sp,sp,4
 4011468:	f800283a 	ret

0401146c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401146c:	defffc04 	addi	sp,sp,-16
 4011470:	df000315 	stw	fp,12(sp)
 4011474:	df000304 	addi	fp,sp,12
 4011478:	e13ffe15 	stw	r4,-8(fp)
 401147c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4011480:	000530fa 	rdctl	r2,ienable
 4011484:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4011488:	e0ffff17 	ldw	r3,-4(fp)
 401148c:	00800044 	movi	r2,1
 4011490:	10c4983a 	sll	r2,r2,r3
 4011494:	1007883a 	mov	r3,r2
 4011498:	e0bffd17 	ldw	r2,-12(fp)
 401149c:	1884703a 	and	r2,r3,r2
 40114a0:	1004c03a 	cmpne	r2,r2,zero
}
 40114a4:	e037883a 	mov	sp,fp
 40114a8:	df000017 	ldw	fp,0(sp)
 40114ac:	dec00104 	addi	sp,sp,4
 40114b0:	f800283a 	ret

040114b4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 40114b4:	defff404 	addi	sp,sp,-48
 40114b8:	dfc00b15 	stw	ra,44(sp)
 40114bc:	df000a15 	stw	fp,40(sp)
 40114c0:	df000a04 	addi	fp,sp,40
 40114c4:	e13ffb15 	stw	r4,-20(fp)
 40114c8:	e17ffc15 	stw	r5,-16(fp)
 40114cc:	e1bffd15 	stw	r6,-12(fp)
 40114d0:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 40114d4:	00bffa84 	movi	r2,-22
 40114d8:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 40114dc:	e0bffc17 	ldw	r2,-16(fp)
 40114e0:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40114e4:	e0bff917 	ldw	r2,-28(fp)
 40114e8:	10800808 	cmpgei	r2,r2,32
 40114ec:	1000291e 	bne	r2,zero,4011594 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40114f0:	0005303a 	rdctl	r2,status
 40114f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40114f8:	e0fff717 	ldw	r3,-36(fp)
 40114fc:	00bfff84 	movi	r2,-2
 4011500:	1884703a 	and	r2,r3,r2
 4011504:	1001703a 	wrctl	status,r2
  
  return context;
 4011508:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401150c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 4011510:	e0bff917 	ldw	r2,-28(fp)
 4011514:	00c100f4 	movhi	r3,1027
 4011518:	18d34604 	addi	r3,r3,19736
 401151c:	100490fa 	slli	r2,r2,3
 4011520:	10c7883a 	add	r3,r2,r3
 4011524:	e0bffd17 	ldw	r2,-12(fp)
 4011528:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 401152c:	e0bff917 	ldw	r2,-28(fp)
 4011530:	00c100f4 	movhi	r3,1027
 4011534:	18d34604 	addi	r3,r3,19736
 4011538:	100490fa 	slli	r2,r2,3
 401153c:	10c5883a 	add	r2,r2,r3
 4011540:	10c00104 	addi	r3,r2,4
 4011544:	e0bffe17 	ldw	r2,-8(fp)
 4011548:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401154c:	e0bffd17 	ldw	r2,-12(fp)
 4011550:	1005003a 	cmpeq	r2,r2,zero
 4011554:	1000051e 	bne	r2,zero,401156c <alt_iic_isr_register+0xb8>
 4011558:	e17ff917 	ldw	r5,-28(fp)
 401155c:	e13ffb17 	ldw	r4,-20(fp)
 4011560:	40113300 	call	4011330 <alt_ic_irq_enable>
 4011564:	e0bfff15 	stw	r2,-4(fp)
 4011568:	00000406 	br	401157c <alt_iic_isr_register+0xc8>
 401156c:	e17ff917 	ldw	r5,-28(fp)
 4011570:	e13ffb17 	ldw	r4,-20(fp)
 4011574:	40113cc0 	call	40113cc <alt_ic_irq_disable>
 4011578:	e0bfff15 	stw	r2,-4(fp)
 401157c:	e0bfff17 	ldw	r2,-4(fp)
 4011580:	e0bffa15 	stw	r2,-24(fp)
 4011584:	e0bff817 	ldw	r2,-32(fp)
 4011588:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401158c:	e0bff617 	ldw	r2,-40(fp)
 4011590:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4011594:	e0bffa17 	ldw	r2,-24(fp)
}
 4011598:	e037883a 	mov	sp,fp
 401159c:	dfc00117 	ldw	ra,4(sp)
 40115a0:	df000017 	ldw	fp,0(sp)
 40115a4:	dec00204 	addi	sp,sp,8
 40115a8:	f800283a 	ret

040115ac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 40115ac:	deffeb04 	addi	sp,sp,-84
 40115b0:	dfc01415 	stw	ra,80(sp)
 40115b4:	df001315 	stw	fp,76(sp)
 40115b8:	df001304 	addi	fp,sp,76
 40115bc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40115c0:	e0bffd17 	ldw	r2,-12(fp)
 40115c4:	1004803a 	cmplt	r2,r2,zero
 40115c8:	1000081e 	bne	r2,zero,40115ec <isatty+0x40>
 40115cc:	e0bffd17 	ldw	r2,-12(fp)
 40115d0:	10800324 	muli	r2,r2,12
 40115d4:	1007883a 	mov	r3,r2
 40115d8:	008100f4 	movhi	r2,1027
 40115dc:	10811e04 	addi	r2,r2,1144
 40115e0:	1887883a 	add	r3,r3,r2
 40115e4:	e0ffff15 	stw	r3,-4(fp)
 40115e8:	00000106 	br	40115f0 <isatty+0x44>
 40115ec:	e03fff15 	stw	zero,-4(fp)
 40115f0:	e0bfff17 	ldw	r2,-4(fp)
 40115f4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 40115f8:	e0bfed17 	ldw	r2,-76(fp)
 40115fc:	1005003a 	cmpeq	r2,r2,zero
 4011600:	10000f1e 	bne	r2,zero,4011640 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4011604:	e0bfed17 	ldw	r2,-76(fp)
 4011608:	10800017 	ldw	r2,0(r2)
 401160c:	10800817 	ldw	r2,32(r2)
 4011610:	1004c03a 	cmpne	r2,r2,zero
 4011614:	1000031e 	bne	r2,zero,4011624 <isatty+0x78>
    {
      return 1;
 4011618:	00800044 	movi	r2,1
 401161c:	e0bffe15 	stw	r2,-8(fp)
 4011620:	00000c06 	br	4011654 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4011624:	e17fee04 	addi	r5,fp,-72
 4011628:	e13ffd17 	ldw	r4,-12(fp)
 401162c:	40111ac0 	call	40111ac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4011630:	e0bfef17 	ldw	r2,-68(fp)
 4011634:	10880020 	cmpeqi	r2,r2,8192
 4011638:	e0bffe15 	stw	r2,-8(fp)
 401163c:	00000506 	br	4011654 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4011640:	401166c0 	call	401166c <alt_get_errno>
 4011644:	1007883a 	mov	r3,r2
 4011648:	00801444 	movi	r2,81
 401164c:	18800015 	stw	r2,0(r3)
    return 0;
 4011650:	e03ffe15 	stw	zero,-8(fp)
 4011654:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 4011658:	e037883a 	mov	sp,fp
 401165c:	dfc00117 	ldw	ra,4(sp)
 4011660:	df000017 	ldw	fp,0(sp)
 4011664:	dec00204 	addi	sp,sp,8
 4011668:	f800283a 	ret

0401166c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401166c:	defffd04 	addi	sp,sp,-12
 4011670:	dfc00215 	stw	ra,8(sp)
 4011674:	df000115 	stw	fp,4(sp)
 4011678:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 401167c:	008100f4 	movhi	r2,1027
 4011680:	1085a404 	addi	r2,r2,5776
 4011684:	10800017 	ldw	r2,0(r2)
 4011688:	1005003a 	cmpeq	r2,r2,zero
 401168c:	1000061e 	bne	r2,zero,40116a8 <alt_get_errno+0x3c>
 4011690:	008100f4 	movhi	r2,1027
 4011694:	1085a404 	addi	r2,r2,5776
 4011698:	10800017 	ldw	r2,0(r2)
 401169c:	103ee83a 	callr	r2
 40116a0:	e0bfff15 	stw	r2,-4(fp)
 40116a4:	00000306 	br	40116b4 <alt_get_errno+0x48>
 40116a8:	008100f4 	movhi	r2,1027
 40116ac:	10933204 	addi	r2,r2,19656
 40116b0:	e0bfff15 	stw	r2,-4(fp)
 40116b4:	e0bfff17 	ldw	r2,-4(fp)
}
 40116b8:	e037883a 	mov	sp,fp
 40116bc:	dfc00117 	ldw	ra,4(sp)
 40116c0:	df000017 	ldw	fp,0(sp)
 40116c4:	dec00204 	addi	sp,sp,8
 40116c8:	f800283a 	ret

040116cc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40116cc:	defffe04 	addi	sp,sp,-8
 40116d0:	dfc00115 	stw	ra,4(sp)
 40116d4:	df000015 	stw	fp,0(sp)
 40116d8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40116dc:	010100f4 	movhi	r4,1027
 40116e0:	2105a904 	addi	r4,r4,5796
 40116e4:	014100f4 	movhi	r5,1027
 40116e8:	29782404 	addi	r5,r5,-8048
 40116ec:	018100f4 	movhi	r6,1027
 40116f0:	3185a904 	addi	r6,r6,5796
 40116f4:	401174c0 	call	401174c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40116f8:	01010034 	movhi	r4,1024
 40116fc:	21000804 	addi	r4,r4,32
 4011700:	01410034 	movhi	r5,1024
 4011704:	29400804 	addi	r5,r5,32
 4011708:	01810034 	movhi	r6,1024
 401170c:	31806d04 	addi	r6,r6,436
 4011710:	401174c0 	call	401174c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4011714:	01010074 	movhi	r4,1025
 4011718:	210f4504 	addi	r4,r4,15636
 401171c:	01410074 	movhi	r5,1025
 4011720:	294f4504 	addi	r5,r5,15636
 4011724:	018100f4 	movhi	r6,1027
 4011728:	31b82404 	addi	r6,r6,-8048
 401172c:	401174c0 	call	401174c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4011730:	4012f9c0 	call	4012f9c <alt_dcache_flush_all>
  alt_icache_flush_all();
 4011734:	40131bc0 	call	40131bc <alt_icache_flush_all>
}
 4011738:	e037883a 	mov	sp,fp
 401173c:	dfc00117 	ldw	ra,4(sp)
 4011740:	df000017 	ldw	fp,0(sp)
 4011744:	dec00204 	addi	sp,sp,8
 4011748:	f800283a 	ret

0401174c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 401174c:	defffc04 	addi	sp,sp,-16
 4011750:	df000315 	stw	fp,12(sp)
 4011754:	df000304 	addi	fp,sp,12
 4011758:	e13ffd15 	stw	r4,-12(fp)
 401175c:	e17ffe15 	stw	r5,-8(fp)
 4011760:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4011764:	e0fffe17 	ldw	r3,-8(fp)
 4011768:	e0bffd17 	ldw	r2,-12(fp)
 401176c:	18800e26 	beq	r3,r2,40117a8 <alt_load_section+0x5c>
  {
    while( to != end )
 4011770:	00000a06 	br	401179c <alt_load_section+0x50>
    {
      *to++ = *from++;
 4011774:	e0bffd17 	ldw	r2,-12(fp)
 4011778:	10c00017 	ldw	r3,0(r2)
 401177c:	e0bffe17 	ldw	r2,-8(fp)
 4011780:	10c00015 	stw	r3,0(r2)
 4011784:	e0bffe17 	ldw	r2,-8(fp)
 4011788:	10800104 	addi	r2,r2,4
 401178c:	e0bffe15 	stw	r2,-8(fp)
 4011790:	e0bffd17 	ldw	r2,-12(fp)
 4011794:	10800104 	addi	r2,r2,4
 4011798:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 401179c:	e0fffe17 	ldw	r3,-8(fp)
 40117a0:	e0bfff17 	ldw	r2,-4(fp)
 40117a4:	18bff31e 	bne	r3,r2,4011774 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 40117a8:	e037883a 	mov	sp,fp
 40117ac:	df000017 	ldw	fp,0(sp)
 40117b0:	dec00104 	addi	sp,sp,4
 40117b4:	f800283a 	ret

040117b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 40117b8:	defff804 	addi	sp,sp,-32
 40117bc:	dfc00715 	stw	ra,28(sp)
 40117c0:	df000615 	stw	fp,24(sp)
 40117c4:	df000604 	addi	fp,sp,24
 40117c8:	e13ffc15 	stw	r4,-16(fp)
 40117cc:	e17ffd15 	stw	r5,-12(fp)
 40117d0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 40117d4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40117d8:	e0bffc17 	ldw	r2,-16(fp)
 40117dc:	1004803a 	cmplt	r2,r2,zero
 40117e0:	1000081e 	bne	r2,zero,4011804 <lseek+0x4c>
 40117e4:	e0bffc17 	ldw	r2,-16(fp)
 40117e8:	10800324 	muli	r2,r2,12
 40117ec:	1007883a 	mov	r3,r2
 40117f0:	008100f4 	movhi	r2,1027
 40117f4:	10811e04 	addi	r2,r2,1144
 40117f8:	1887883a 	add	r3,r3,r2
 40117fc:	e0ffff15 	stw	r3,-4(fp)
 4011800:	00000106 	br	4011808 <lseek+0x50>
 4011804:	e03fff15 	stw	zero,-4(fp)
 4011808:	e0bfff17 	ldw	r2,-4(fp)
 401180c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 4011810:	e0bffb17 	ldw	r2,-20(fp)
 4011814:	1005003a 	cmpeq	r2,r2,zero
 4011818:	1000111e 	bne	r2,zero,4011860 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 401181c:	e0bffb17 	ldw	r2,-20(fp)
 4011820:	10800017 	ldw	r2,0(r2)
 4011824:	10800717 	ldw	r2,28(r2)
 4011828:	1005003a 	cmpeq	r2,r2,zero
 401182c:	1000091e 	bne	r2,zero,4011854 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4011830:	e0bffb17 	ldw	r2,-20(fp)
 4011834:	10800017 	ldw	r2,0(r2)
 4011838:	10800717 	ldw	r2,28(r2)
 401183c:	e13ffb17 	ldw	r4,-20(fp)
 4011840:	e17ffd17 	ldw	r5,-12(fp)
 4011844:	e1bffe17 	ldw	r6,-8(fp)
 4011848:	103ee83a 	callr	r2
 401184c:	e0bffa15 	stw	r2,-24(fp)
 4011850:	00000506 	br	4011868 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4011854:	00bfde84 	movi	r2,-134
 4011858:	e0bffa15 	stw	r2,-24(fp)
 401185c:	00000206 	br	4011868 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 4011860:	00bfebc4 	movi	r2,-81
 4011864:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 4011868:	e0bffa17 	ldw	r2,-24(fp)
 401186c:	1004403a 	cmpge	r2,r2,zero
 4011870:	1000071e 	bne	r2,zero,4011890 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 4011874:	40118a80 	call	40118a8 <alt_get_errno>
 4011878:	1007883a 	mov	r3,r2
 401187c:	e0bffa17 	ldw	r2,-24(fp)
 4011880:	0085c83a 	sub	r2,zero,r2
 4011884:	18800015 	stw	r2,0(r3)
    rc = -1;
 4011888:	00bfffc4 	movi	r2,-1
 401188c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 4011890:	e0bffa17 	ldw	r2,-24(fp)
}
 4011894:	e037883a 	mov	sp,fp
 4011898:	dfc00117 	ldw	ra,4(sp)
 401189c:	df000017 	ldw	fp,0(sp)
 40118a0:	dec00204 	addi	sp,sp,8
 40118a4:	f800283a 	ret

040118a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40118a8:	defffd04 	addi	sp,sp,-12
 40118ac:	dfc00215 	stw	ra,8(sp)
 40118b0:	df000115 	stw	fp,4(sp)
 40118b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40118b8:	008100f4 	movhi	r2,1027
 40118bc:	1085a404 	addi	r2,r2,5776
 40118c0:	10800017 	ldw	r2,0(r2)
 40118c4:	1005003a 	cmpeq	r2,r2,zero
 40118c8:	1000061e 	bne	r2,zero,40118e4 <alt_get_errno+0x3c>
 40118cc:	008100f4 	movhi	r2,1027
 40118d0:	1085a404 	addi	r2,r2,5776
 40118d4:	10800017 	ldw	r2,0(r2)
 40118d8:	103ee83a 	callr	r2
 40118dc:	e0bfff15 	stw	r2,-4(fp)
 40118e0:	00000306 	br	40118f0 <alt_get_errno+0x48>
 40118e4:	008100f4 	movhi	r2,1027
 40118e8:	10933204 	addi	r2,r2,19656
 40118ec:	e0bfff15 	stw	r2,-4(fp)
 40118f0:	e0bfff17 	ldw	r2,-4(fp)
}
 40118f4:	e037883a 	mov	sp,fp
 40118f8:	dfc00117 	ldw	ra,4(sp)
 40118fc:	df000017 	ldw	fp,0(sp)
 4011900:	dec00204 	addi	sp,sp,8
 4011904:	f800283a 	ret

04011908 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4011908:	defffd04 	addi	sp,sp,-12
 401190c:	dfc00215 	stw	ra,8(sp)
 4011910:	df000115 	stw	fp,4(sp)
 4011914:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4011918:	0009883a 	mov	r4,zero
 401191c:	4011fa40 	call	4011fa4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4011920:	4011fd80 	call	4011fd8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4011924:	010100f4 	movhi	r4,1027
 4011928:	21381c04 	addi	r4,r4,-8080
 401192c:	014100f4 	movhi	r5,1027
 4011930:	29781c04 	addi	r5,r5,-8080
 4011934:	018100f4 	movhi	r6,1027
 4011938:	31b81c04 	addi	r6,r6,-8080
 401193c:	40132b00 	call	40132b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4011940:	40130f40 	call	40130f4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4011944:	01010074 	movhi	r4,1025
 4011948:	210c5604 	addi	r4,r4,12632
 401194c:	40139080 	call	4013908 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4011950:	d12da117 	ldw	r4,-18812(gp)
 4011954:	d16da217 	ldw	r5,-18808(gp)
 4011958:	d1ada317 	ldw	r6,-18804(gp)
 401195c:	4004f880 	call	4004f88 <main>
 4011960:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4011964:	01000044 	movi	r4,1
 4011968:	40110240 	call	4011024 <close>
  exit (result);
 401196c:	e13fff17 	ldw	r4,-4(fp)
 4011970:	401391c0 	call	401391c <exit>

04011974 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4011974:	defffe04 	addi	sp,sp,-8
 4011978:	df000115 	stw	fp,4(sp)
 401197c:	df000104 	addi	fp,sp,4
 4011980:	e13fff15 	stw	r4,-4(fp)
}
 4011984:	e037883a 	mov	sp,fp
 4011988:	df000017 	ldw	fp,0(sp)
 401198c:	dec00104 	addi	sp,sp,4
 4011990:	f800283a 	ret

04011994 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4011994:	defffe04 	addi	sp,sp,-8
 4011998:	df000115 	stw	fp,4(sp)
 401199c:	df000104 	addi	fp,sp,4
 40119a0:	e13fff15 	stw	r4,-4(fp)
}
 40119a4:	e037883a 	mov	sp,fp
 40119a8:	df000017 	ldw	fp,0(sp)
 40119ac:	dec00104 	addi	sp,sp,4
 40119b0:	f800283a 	ret

040119b4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 40119b4:	defff704 	addi	sp,sp,-36
 40119b8:	dfc00815 	stw	ra,32(sp)
 40119bc:	df000715 	stw	fp,28(sp)
 40119c0:	df000704 	addi	fp,sp,28
 40119c4:	e13ffb15 	stw	r4,-20(fp)
 40119c8:	e17ffc15 	stw	r5,-16(fp)
 40119cc:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40119d0:	e0bffb17 	ldw	r2,-20(fp)
 40119d4:	1004803a 	cmplt	r2,r2,zero
 40119d8:	1000081e 	bne	r2,zero,40119fc <read+0x48>
 40119dc:	e0bffb17 	ldw	r2,-20(fp)
 40119e0:	10800324 	muli	r2,r2,12
 40119e4:	1007883a 	mov	r3,r2
 40119e8:	008100f4 	movhi	r2,1027
 40119ec:	10811e04 	addi	r2,r2,1144
 40119f0:	1887883a 	add	r3,r3,r2
 40119f4:	e0ffff15 	stw	r3,-4(fp)
 40119f8:	00000106 	br	4011a00 <read+0x4c>
 40119fc:	e03fff15 	stw	zero,-4(fp)
 4011a00:	e0bfff17 	ldw	r2,-4(fp)
 4011a04:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 4011a08:	e0bffa17 	ldw	r2,-24(fp)
 4011a0c:	1005003a 	cmpeq	r2,r2,zero
 4011a10:	1000241e 	bne	r2,zero,4011aa4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4011a14:	e0bffa17 	ldw	r2,-24(fp)
 4011a18:	10800217 	ldw	r2,8(r2)
 4011a1c:	108000cc 	andi	r2,r2,3
 4011a20:	10800060 	cmpeqi	r2,r2,1
 4011a24:	10001a1e 	bne	r2,zero,4011a90 <read+0xdc>
 4011a28:	e0bffa17 	ldw	r2,-24(fp)
 4011a2c:	10800017 	ldw	r2,0(r2)
 4011a30:	10800517 	ldw	r2,20(r2)
 4011a34:	1005003a 	cmpeq	r2,r2,zero
 4011a38:	1000151e 	bne	r2,zero,4011a90 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4011a3c:	e0bffa17 	ldw	r2,-24(fp)
 4011a40:	10800017 	ldw	r2,0(r2)
 4011a44:	10800517 	ldw	r2,20(r2)
 4011a48:	e17ffc17 	ldw	r5,-16(fp)
 4011a4c:	e1bffd17 	ldw	r6,-12(fp)
 4011a50:	e13ffa17 	ldw	r4,-24(fp)
 4011a54:	103ee83a 	callr	r2
 4011a58:	e0bff915 	stw	r2,-28(fp)
 4011a5c:	e0bff917 	ldw	r2,-28(fp)
 4011a60:	1004403a 	cmpge	r2,r2,zero
 4011a64:	1000071e 	bne	r2,zero,4011a84 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 4011a68:	4011ad40 	call	4011ad4 <alt_get_errno>
 4011a6c:	e0fff917 	ldw	r3,-28(fp)
 4011a70:	00c7c83a 	sub	r3,zero,r3
 4011a74:	10c00015 	stw	r3,0(r2)
          return -1;
 4011a78:	00bfffc4 	movi	r2,-1
 4011a7c:	e0bffe15 	stw	r2,-8(fp)
 4011a80:	00000e06 	br	4011abc <read+0x108>
        }
        return rval;
 4011a84:	e0bff917 	ldw	r2,-28(fp)
 4011a88:	e0bffe15 	stw	r2,-8(fp)
 4011a8c:	00000b06 	br	4011abc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 4011a90:	4011ad40 	call	4011ad4 <alt_get_errno>
 4011a94:	1007883a 	mov	r3,r2
 4011a98:	00800344 	movi	r2,13
 4011a9c:	18800015 	stw	r2,0(r3)
 4011aa0:	00000406 	br	4011ab4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4011aa4:	4011ad40 	call	4011ad4 <alt_get_errno>
 4011aa8:	1007883a 	mov	r3,r2
 4011aac:	00801444 	movi	r2,81
 4011ab0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4011ab4:	00bfffc4 	movi	r2,-1
 4011ab8:	e0bffe15 	stw	r2,-8(fp)
 4011abc:	e0bffe17 	ldw	r2,-8(fp)
}
 4011ac0:	e037883a 	mov	sp,fp
 4011ac4:	dfc00117 	ldw	ra,4(sp)
 4011ac8:	df000017 	ldw	fp,0(sp)
 4011acc:	dec00204 	addi	sp,sp,8
 4011ad0:	f800283a 	ret

04011ad4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011ad4:	defffd04 	addi	sp,sp,-12
 4011ad8:	dfc00215 	stw	ra,8(sp)
 4011adc:	df000115 	stw	fp,4(sp)
 4011ae0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4011ae4:	008100f4 	movhi	r2,1027
 4011ae8:	1085a404 	addi	r2,r2,5776
 4011aec:	10800017 	ldw	r2,0(r2)
 4011af0:	1005003a 	cmpeq	r2,r2,zero
 4011af4:	1000061e 	bne	r2,zero,4011b10 <alt_get_errno+0x3c>
 4011af8:	008100f4 	movhi	r2,1027
 4011afc:	1085a404 	addi	r2,r2,5776
 4011b00:	10800017 	ldw	r2,0(r2)
 4011b04:	103ee83a 	callr	r2
 4011b08:	e0bfff15 	stw	r2,-4(fp)
 4011b0c:	00000306 	br	4011b1c <alt_get_errno+0x48>
 4011b10:	008100f4 	movhi	r2,1027
 4011b14:	10933204 	addi	r2,r2,19656
 4011b18:	e0bfff15 	stw	r2,-4(fp)
 4011b1c:	e0bfff17 	ldw	r2,-4(fp)
}
 4011b20:	e037883a 	mov	sp,fp
 4011b24:	dfc00117 	ldw	ra,4(sp)
 4011b28:	df000017 	ldw	fp,0(sp)
 4011b2c:	dec00204 	addi	sp,sp,8
 4011b30:	f800283a 	ret

04011b34 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4011b34:	defffe04 	addi	sp,sp,-8
 4011b38:	df000115 	stw	fp,4(sp)
 4011b3c:	df000104 	addi	fp,sp,4
 4011b40:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4011b44:	e0bfff17 	ldw	r2,-4(fp)
 4011b48:	108000d0 	cmplti	r2,r2,3
 4011b4c:	10000d1e 	bne	r2,zero,4011b84 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 4011b50:	e0bfff17 	ldw	r2,-4(fp)
 4011b54:	00c100f4 	movhi	r3,1027
 4011b58:	18c11e04 	addi	r3,r3,1144
 4011b5c:	10800324 	muli	r2,r2,12
 4011b60:	10c5883a 	add	r2,r2,r3
 4011b64:	10800204 	addi	r2,r2,8
 4011b68:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4011b6c:	e0bfff17 	ldw	r2,-4(fp)
 4011b70:	00c100f4 	movhi	r3,1027
 4011b74:	18c11e04 	addi	r3,r3,1144
 4011b78:	10800324 	muli	r2,r2,12
 4011b7c:	10c5883a 	add	r2,r2,r3
 4011b80:	10000015 	stw	zero,0(r2)
  }
}
 4011b84:	e037883a 	mov	sp,fp
 4011b88:	df000017 	ldw	fp,0(sp)
 4011b8c:	dec00104 	addi	sp,sp,4
 4011b90:	f800283a 	ret

04011b94 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 4011b94:	defff804 	addi	sp,sp,-32
 4011b98:	df000715 	stw	fp,28(sp)
 4011b9c:	df000704 	addi	fp,sp,28
 4011ba0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011ba4:	0005303a 	rdctl	r2,status
 4011ba8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011bac:	e0fffb17 	ldw	r3,-20(fp)
 4011bb0:	00bfff84 	movi	r2,-2
 4011bb4:	1884703a 	and	r2,r3,r2
 4011bb8:	1001703a 	wrctl	status,r2
  
  return context;
 4011bbc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4011bc0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4011bc4:	d0a01017 	ldw	r2,-32704(gp)
 4011bc8:	10c000c4 	addi	r3,r2,3
 4011bcc:	00bfff04 	movi	r2,-4
 4011bd0:	1884703a 	and	r2,r3,r2
 4011bd4:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4011bd8:	d0e01017 	ldw	r3,-32704(gp)
 4011bdc:	e0bffe17 	ldw	r2,-8(fp)
 4011be0:	1887883a 	add	r3,r3,r2
 4011be4:	00812034 	movhi	r2,1152
 4011be8:	10800004 	addi	r2,r2,0
 4011bec:	10c0072e 	bgeu	r2,r3,4011c0c <sbrk+0x78>
 4011bf0:	e0bffd17 	ldw	r2,-12(fp)
 4011bf4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011bf8:	e0bffa17 	ldw	r2,-24(fp)
 4011bfc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4011c00:	00bfffc4 	movi	r2,-1
 4011c04:	e0bfff15 	stw	r2,-4(fp)
 4011c08:	00000c06 	br	4011c3c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 4011c0c:	d0a01017 	ldw	r2,-32704(gp)
 4011c10:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 4011c14:	d0e01017 	ldw	r3,-32704(gp)
 4011c18:	e0bffe17 	ldw	r2,-8(fp)
 4011c1c:	1885883a 	add	r2,r3,r2
 4011c20:	d0a01015 	stw	r2,-32704(gp)
 4011c24:	e0bffd17 	ldw	r2,-12(fp)
 4011c28:	e0bff915 	stw	r2,-28(fp)
 4011c2c:	e0bff917 	ldw	r2,-28(fp)
 4011c30:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4011c34:	e0bffc17 	ldw	r2,-16(fp)
 4011c38:	e0bfff15 	stw	r2,-4(fp)
 4011c3c:	e0bfff17 	ldw	r2,-4(fp)
} 
 4011c40:	e037883a 	mov	sp,fp
 4011c44:	df000017 	ldw	fp,0(sp)
 4011c48:	dec00104 	addi	sp,sp,4
 4011c4c:	f800283a 	ret

04011c50 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4011c50:	defffa04 	addi	sp,sp,-24
 4011c54:	df000515 	stw	fp,20(sp)
 4011c58:	df000504 	addi	fp,sp,20
 4011c5c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011c60:	0005303a 	rdctl	r2,status
 4011c64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011c68:	e0fffd17 	ldw	r3,-12(fp)
 4011c6c:	00bfff84 	movi	r2,-2
 4011c70:	1884703a 	and	r2,r3,r2
 4011c74:	1001703a 	wrctl	status,r2
  
  return context;
 4011c78:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4011c7c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 4011c80:	e0bfff17 	ldw	r2,-4(fp)
 4011c84:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4011c88:	e0bffc17 	ldw	r2,-16(fp)
 4011c8c:	10c00017 	ldw	r3,0(r2)
 4011c90:	e0bffc17 	ldw	r2,-16(fp)
 4011c94:	10800117 	ldw	r2,4(r2)
 4011c98:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 4011c9c:	e0bffc17 	ldw	r2,-16(fp)
 4011ca0:	10c00117 	ldw	r3,4(r2)
 4011ca4:	e0bffc17 	ldw	r2,-16(fp)
 4011ca8:	10800017 	ldw	r2,0(r2)
 4011cac:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4011cb0:	e0fffc17 	ldw	r3,-16(fp)
 4011cb4:	e0bffc17 	ldw	r2,-16(fp)
 4011cb8:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 4011cbc:	e0fffc17 	ldw	r3,-16(fp)
 4011cc0:	e0bffc17 	ldw	r2,-16(fp)
 4011cc4:	18800015 	stw	r2,0(r3)
 4011cc8:	e0bffe17 	ldw	r2,-8(fp)
 4011ccc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011cd0:	e0bffb17 	ldw	r2,-20(fp)
 4011cd4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4011cd8:	e037883a 	mov	sp,fp
 4011cdc:	df000017 	ldw	fp,0(sp)
 4011ce0:	dec00104 	addi	sp,sp,4
 4011ce4:	f800283a 	ret

04011ce8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4011ce8:	defffb04 	addi	sp,sp,-20
 4011cec:	dfc00415 	stw	ra,16(sp)
 4011cf0:	df000315 	stw	fp,12(sp)
 4011cf4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4011cf8:	d0a01117 	ldw	r2,-32700(gp)
 4011cfc:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4011d00:	d0ada517 	ldw	r2,-18796(gp)
 4011d04:	10800044 	addi	r2,r2,1
 4011d08:	d0ada515 	stw	r2,-18796(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4011d0c:	00003106 	br	4011dd4 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 4011d10:	e0bffe17 	ldw	r2,-8(fp)
 4011d14:	10800017 	ldw	r2,0(r2)
 4011d18:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4011d1c:	e0bffe17 	ldw	r2,-8(fp)
 4011d20:	10800403 	ldbu	r2,16(r2)
 4011d24:	10803fcc 	andi	r2,r2,255
 4011d28:	1005003a 	cmpeq	r2,r2,zero
 4011d2c:	1000051e 	bne	r2,zero,4011d44 <alt_tick+0x5c>
 4011d30:	d0ada517 	ldw	r2,-18796(gp)
 4011d34:	1004c03a 	cmpne	r2,r2,zero
 4011d38:	1000021e 	bne	r2,zero,4011d44 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 4011d3c:	e0bffe17 	ldw	r2,-8(fp)
 4011d40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4011d44:	e0bffe17 	ldw	r2,-8(fp)
 4011d48:	10c00217 	ldw	r3,8(r2)
 4011d4c:	d0ada517 	ldw	r2,-18796(gp)
 4011d50:	10c01e36 	bltu	r2,r3,4011dcc <alt_tick+0xe4>
 4011d54:	e0bffe17 	ldw	r2,-8(fp)
 4011d58:	10800403 	ldbu	r2,16(r2)
 4011d5c:	10803fcc 	andi	r2,r2,255
 4011d60:	1004c03a 	cmpne	r2,r2,zero
 4011d64:	1000191e 	bne	r2,zero,4011dcc <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 4011d68:	e0bffe17 	ldw	r2,-8(fp)
 4011d6c:	10c00317 	ldw	r3,12(r2)
 4011d70:	e0bffe17 	ldw	r2,-8(fp)
 4011d74:	11000517 	ldw	r4,20(r2)
 4011d78:	183ee83a 	callr	r3
 4011d7c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4011d80:	e0bffd17 	ldw	r2,-12(fp)
 4011d84:	1004c03a 	cmpne	r2,r2,zero
 4011d88:	1000031e 	bne	r2,zero,4011d98 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 4011d8c:	e13ffe17 	ldw	r4,-8(fp)
 4011d90:	4011c500 	call	4011c50 <alt_alarm_stop>
 4011d94:	00000d06 	br	4011dcc <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 4011d98:	e0bffe17 	ldw	r2,-8(fp)
 4011d9c:	10c00217 	ldw	r3,8(r2)
 4011da0:	e0bffd17 	ldw	r2,-12(fp)
 4011da4:	1887883a 	add	r3,r3,r2
 4011da8:	e0bffe17 	ldw	r2,-8(fp)
 4011dac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4011db0:	e0bffe17 	ldw	r2,-8(fp)
 4011db4:	10c00217 	ldw	r3,8(r2)
 4011db8:	d0ada517 	ldw	r2,-18796(gp)
 4011dbc:	1880032e 	bgeu	r3,r2,4011dcc <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 4011dc0:	e0fffe17 	ldw	r3,-8(fp)
 4011dc4:	00800044 	movi	r2,1
 4011dc8:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 4011dcc:	e0bfff17 	ldw	r2,-4(fp)
 4011dd0:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4011dd4:	d0e01104 	addi	r3,gp,-32700
 4011dd8:	e0bffe17 	ldw	r2,-8(fp)
 4011ddc:	10ffcc1e 	bne	r2,r3,4011d10 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 4011de0:	e037883a 	mov	sp,fp
 4011de4:	dfc00117 	ldw	ra,4(sp)
 4011de8:	df000017 	ldw	fp,0(sp)
 4011dec:	dec00204 	addi	sp,sp,8
 4011df0:	f800283a 	ret

04011df4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4011df4:	defffd04 	addi	sp,sp,-12
 4011df8:	dfc00215 	stw	ra,8(sp)
 4011dfc:	df000115 	stw	fp,4(sp)
 4011e00:	df000104 	addi	fp,sp,4
 4011e04:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4011e08:	e13fff17 	ldw	r4,-4(fp)
 4011e0c:	4012e500 	call	4012e50 <alt_busy_sleep>
}
 4011e10:	e037883a 	mov	sp,fp
 4011e14:	dfc00117 	ldw	ra,4(sp)
 4011e18:	df000017 	ldw	fp,0(sp)
 4011e1c:	dec00204 	addi	sp,sp,8
 4011e20:	f800283a 	ret

04011e24 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4011e24:	defff704 	addi	sp,sp,-36
 4011e28:	dfc00815 	stw	ra,32(sp)
 4011e2c:	df000715 	stw	fp,28(sp)
 4011e30:	df000704 	addi	fp,sp,28
 4011e34:	e13ffb15 	stw	r4,-20(fp)
 4011e38:	e17ffc15 	stw	r5,-16(fp)
 4011e3c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4011e40:	e0bffb17 	ldw	r2,-20(fp)
 4011e44:	1004803a 	cmplt	r2,r2,zero
 4011e48:	1000081e 	bne	r2,zero,4011e6c <write+0x48>
 4011e4c:	e0bffb17 	ldw	r2,-20(fp)
 4011e50:	10800324 	muli	r2,r2,12
 4011e54:	1007883a 	mov	r3,r2
 4011e58:	008100f4 	movhi	r2,1027
 4011e5c:	10811e04 	addi	r2,r2,1144
 4011e60:	1887883a 	add	r3,r3,r2
 4011e64:	e0ffff15 	stw	r3,-4(fp)
 4011e68:	00000106 	br	4011e70 <write+0x4c>
 4011e6c:	e03fff15 	stw	zero,-4(fp)
 4011e70:	e0bfff17 	ldw	r2,-4(fp)
 4011e74:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 4011e78:	e0bffa17 	ldw	r2,-24(fp)
 4011e7c:	1005003a 	cmpeq	r2,r2,zero
 4011e80:	1000241e 	bne	r2,zero,4011f14 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4011e84:	e0bffa17 	ldw	r2,-24(fp)
 4011e88:	10800217 	ldw	r2,8(r2)
 4011e8c:	108000cc 	andi	r2,r2,3
 4011e90:	1005003a 	cmpeq	r2,r2,zero
 4011e94:	10001a1e 	bne	r2,zero,4011f00 <write+0xdc>
 4011e98:	e0bffa17 	ldw	r2,-24(fp)
 4011e9c:	10800017 	ldw	r2,0(r2)
 4011ea0:	10800617 	ldw	r2,24(r2)
 4011ea4:	1005003a 	cmpeq	r2,r2,zero
 4011ea8:	1000151e 	bne	r2,zero,4011f00 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4011eac:	e0bffa17 	ldw	r2,-24(fp)
 4011eb0:	10800017 	ldw	r2,0(r2)
 4011eb4:	10800617 	ldw	r2,24(r2)
 4011eb8:	e17ffc17 	ldw	r5,-16(fp)
 4011ebc:	e1bffd17 	ldw	r6,-12(fp)
 4011ec0:	e13ffa17 	ldw	r4,-24(fp)
 4011ec4:	103ee83a 	callr	r2
 4011ec8:	e0bff915 	stw	r2,-28(fp)
 4011ecc:	e0bff917 	ldw	r2,-28(fp)
 4011ed0:	1004403a 	cmpge	r2,r2,zero
 4011ed4:	1000071e 	bne	r2,zero,4011ef4 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 4011ed8:	4011f440 	call	4011f44 <alt_get_errno>
 4011edc:	e0fff917 	ldw	r3,-28(fp)
 4011ee0:	00c7c83a 	sub	r3,zero,r3
 4011ee4:	10c00015 	stw	r3,0(r2)
        return -1;
 4011ee8:	00bfffc4 	movi	r2,-1
 4011eec:	e0bffe15 	stw	r2,-8(fp)
 4011ef0:	00000e06 	br	4011f2c <write+0x108>
      }
      return rval;
 4011ef4:	e0bff917 	ldw	r2,-28(fp)
 4011ef8:	e0bffe15 	stw	r2,-8(fp)
 4011efc:	00000b06 	br	4011f2c <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4011f00:	4011f440 	call	4011f44 <alt_get_errno>
 4011f04:	1007883a 	mov	r3,r2
 4011f08:	00800344 	movi	r2,13
 4011f0c:	18800015 	stw	r2,0(r3)
 4011f10:	00000406 	br	4011f24 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4011f14:	4011f440 	call	4011f44 <alt_get_errno>
 4011f18:	1007883a 	mov	r3,r2
 4011f1c:	00801444 	movi	r2,81
 4011f20:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4011f24:	00bfffc4 	movi	r2,-1
 4011f28:	e0bffe15 	stw	r2,-8(fp)
 4011f2c:	e0bffe17 	ldw	r2,-8(fp)
}
 4011f30:	e037883a 	mov	sp,fp
 4011f34:	dfc00117 	ldw	ra,4(sp)
 4011f38:	df000017 	ldw	fp,0(sp)
 4011f3c:	dec00204 	addi	sp,sp,8
 4011f40:	f800283a 	ret

04011f44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011f44:	defffd04 	addi	sp,sp,-12
 4011f48:	dfc00215 	stw	ra,8(sp)
 4011f4c:	df000115 	stw	fp,4(sp)
 4011f50:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 4011f54:	008100f4 	movhi	r2,1027
 4011f58:	1085a404 	addi	r2,r2,5776
 4011f5c:	10800017 	ldw	r2,0(r2)
 4011f60:	1005003a 	cmpeq	r2,r2,zero
 4011f64:	1000061e 	bne	r2,zero,4011f80 <alt_get_errno+0x3c>
 4011f68:	008100f4 	movhi	r2,1027
 4011f6c:	1085a404 	addi	r2,r2,5776
 4011f70:	10800017 	ldw	r2,0(r2)
 4011f74:	103ee83a 	callr	r2
 4011f78:	e0bfff15 	stw	r2,-4(fp)
 4011f7c:	00000306 	br	4011f8c <alt_get_errno+0x48>
 4011f80:	008100f4 	movhi	r2,1027
 4011f84:	10933204 	addi	r2,r2,19656
 4011f88:	e0bfff15 	stw	r2,-4(fp)
 4011f8c:	e0bfff17 	ldw	r2,-4(fp)
}
 4011f90:	e037883a 	mov	sp,fp
 4011f94:	dfc00117 	ldw	ra,4(sp)
 4011f98:	df000017 	ldw	fp,0(sp)
 4011f9c:	dec00204 	addi	sp,sp,8
 4011fa0:	f800283a 	ret

04011fa4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4011fa4:	defffd04 	addi	sp,sp,-12
 4011fa8:	dfc00215 	stw	ra,8(sp)
 4011fac:	df000115 	stw	fp,4(sp)
 4011fb0:	df000104 	addi	fp,sp,4
 4011fb4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
 4011fb8:	40135ec0 	call	40135ec <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4011fbc:	00800044 	movi	r2,1
 4011fc0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4011fc4:	e037883a 	mov	sp,fp
 4011fc8:	dfc00117 	ldw	ra,4(sp)
 4011fcc:	df000017 	ldw	fp,0(sp)
 4011fd0:	dec00204 	addi	sp,sp,8
 4011fd4:	f800283a 	ret

04011fd8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4011fd8:	defffe04 	addi	sp,sp,-8
 4011fdc:	dfc00115 	stw	ra,4(sp)
 4011fe0:	df000015 	stw	fp,0(sp)
 4011fe4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4011fe8:	01020034 	movhi	r4,2048
 4011fec:	21040804 	addi	r4,r4,4128
 4011ff0:	000b883a 	mov	r5,zero
 4011ff4:	01800044 	movi	r6,1
 4011ff8:	01c0fa04 	movi	r7,1000
 4011ffc:	4012dc00 	call	4012dc0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4012000:	010100f4 	movhi	r4,1027
 4012004:	21018804 	addi	r4,r4,1568
 4012008:	000b883a 	mov	r5,zero
 401200c:	000d883a 	mov	r6,zero
 4012010:	40121b40 	call	40121b4 <altera_avalon_jtag_uart_init>
 4012014:	010100f4 	movhi	r4,1027
 4012018:	21017e04 	addi	r4,r4,1528
 401201c:	40120340 	call	4012034 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( TOUCH_PANEL_SPI, touch_panel_spi);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
}
 4012020:	e037883a 	mov	sp,fp
 4012024:	dfc00117 	ldw	ra,4(sp)
 4012028:	df000017 	ldw	fp,0(sp)
 401202c:	dec00204 	addi	sp,sp,8
 4012030:	f800283a 	ret

04012034 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4012034:	defffd04 	addi	sp,sp,-12
 4012038:	dfc00215 	stw	ra,8(sp)
 401203c:	df000115 	stw	fp,4(sp)
 4012040:	df000104 	addi	fp,sp,4
 4012044:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4012048:	e13fff17 	ldw	r4,-4(fp)
 401204c:	014100f4 	movhi	r5,1027
 4012050:	2945a104 	addi	r5,r5,5764
 4012054:	4012fe00 	call	4012fe0 <alt_dev_llist_insert>
}
 4012058:	e037883a 	mov	sp,fp
 401205c:	dfc00117 	ldw	ra,4(sp)
 4012060:	df000017 	ldw	fp,0(sp)
 4012064:	dec00204 	addi	sp,sp,8
 4012068:	f800283a 	ret

0401206c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 401206c:	defffa04 	addi	sp,sp,-24
 4012070:	dfc00515 	stw	ra,20(sp)
 4012074:	df000415 	stw	fp,16(sp)
 4012078:	df000404 	addi	fp,sp,16
 401207c:	e13ffd15 	stw	r4,-12(fp)
 4012080:	e17ffe15 	stw	r5,-8(fp)
 4012084:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4012088:	e0bffd17 	ldw	r2,-12(fp)
 401208c:	10800017 	ldw	r2,0(r2)
 4012090:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4012094:	e0bffc17 	ldw	r2,-16(fp)
 4012098:	11000a04 	addi	r4,r2,40
 401209c:	e0bffd17 	ldw	r2,-12(fp)
 40120a0:	11c00217 	ldw	r7,8(r2)
 40120a4:	e17ffe17 	ldw	r5,-8(fp)
 40120a8:	e1bfff17 	ldw	r6,-4(fp)
 40120ac:	40126b40 	call	40126b4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 40120b0:	e037883a 	mov	sp,fp
 40120b4:	dfc00117 	ldw	ra,4(sp)
 40120b8:	df000017 	ldw	fp,0(sp)
 40120bc:	dec00204 	addi	sp,sp,8
 40120c0:	f800283a 	ret

040120c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40120c4:	defffa04 	addi	sp,sp,-24
 40120c8:	dfc00515 	stw	ra,20(sp)
 40120cc:	df000415 	stw	fp,16(sp)
 40120d0:	df000404 	addi	fp,sp,16
 40120d4:	e13ffd15 	stw	r4,-12(fp)
 40120d8:	e17ffe15 	stw	r5,-8(fp)
 40120dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40120e0:	e0bffd17 	ldw	r2,-12(fp)
 40120e4:	10800017 	ldw	r2,0(r2)
 40120e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 40120ec:	e0bffc17 	ldw	r2,-16(fp)
 40120f0:	11000a04 	addi	r4,r2,40
 40120f4:	e0bffd17 	ldw	r2,-12(fp)
 40120f8:	11c00217 	ldw	r7,8(r2)
 40120fc:	e17ffe17 	ldw	r5,-8(fp)
 4012100:	e1bfff17 	ldw	r6,-4(fp)
 4012104:	40128d80 	call	40128d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4012108:	e037883a 	mov	sp,fp
 401210c:	dfc00117 	ldw	ra,4(sp)
 4012110:	df000017 	ldw	fp,0(sp)
 4012114:	dec00204 	addi	sp,sp,8
 4012118:	f800283a 	ret

0401211c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 401211c:	defffc04 	addi	sp,sp,-16
 4012120:	dfc00315 	stw	ra,12(sp)
 4012124:	df000215 	stw	fp,8(sp)
 4012128:	df000204 	addi	fp,sp,8
 401212c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4012130:	e0bfff17 	ldw	r2,-4(fp)
 4012134:	10800017 	ldw	r2,0(r2)
 4012138:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 401213c:	e0bffe17 	ldw	r2,-8(fp)
 4012140:	11000a04 	addi	r4,r2,40
 4012144:	e0bfff17 	ldw	r2,-4(fp)
 4012148:	11400217 	ldw	r5,8(r2)
 401214c:	401254c0 	call	401254c <altera_avalon_jtag_uart_close>
}
 4012150:	e037883a 	mov	sp,fp
 4012154:	dfc00117 	ldw	ra,4(sp)
 4012158:	df000017 	ldw	fp,0(sp)
 401215c:	dec00204 	addi	sp,sp,8
 4012160:	f800283a 	ret

04012164 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4012164:	defffa04 	addi	sp,sp,-24
 4012168:	dfc00515 	stw	ra,20(sp)
 401216c:	df000415 	stw	fp,16(sp)
 4012170:	df000404 	addi	fp,sp,16
 4012174:	e13ffd15 	stw	r4,-12(fp)
 4012178:	e17ffe15 	stw	r5,-8(fp)
 401217c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4012180:	e0bffd17 	ldw	r2,-12(fp)
 4012184:	10800017 	ldw	r2,0(r2)
 4012188:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 401218c:	e0bffc17 	ldw	r2,-16(fp)
 4012190:	11000a04 	addi	r4,r2,40
 4012194:	e17ffe17 	ldw	r5,-8(fp)
 4012198:	e1bfff17 	ldw	r6,-4(fp)
 401219c:	40125c00 	call	40125c0 <altera_avalon_jtag_uart_ioctl>
}
 40121a0:	e037883a 	mov	sp,fp
 40121a4:	dfc00117 	ldw	ra,4(sp)
 40121a8:	df000017 	ldw	fp,0(sp)
 40121ac:	dec00204 	addi	sp,sp,8
 40121b0:	f800283a 	ret

040121b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 40121b4:	defffa04 	addi	sp,sp,-24
 40121b8:	dfc00515 	stw	ra,20(sp)
 40121bc:	df000415 	stw	fp,16(sp)
 40121c0:	df000404 	addi	fp,sp,16
 40121c4:	e13ffd15 	stw	r4,-12(fp)
 40121c8:	e17ffe15 	stw	r5,-8(fp)
 40121cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40121d0:	e0fffd17 	ldw	r3,-12(fp)
 40121d4:	00800044 	movi	r2,1
 40121d8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 40121dc:	e0bffd17 	ldw	r2,-12(fp)
 40121e0:	10800017 	ldw	r2,0(r2)
 40121e4:	11000104 	addi	r4,r2,4
 40121e8:	e0bffd17 	ldw	r2,-12(fp)
 40121ec:	10800817 	ldw	r2,32(r2)
 40121f0:	1007883a 	mov	r3,r2
 40121f4:	2005883a 	mov	r2,r4
 40121f8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40121fc:	e13ffe17 	ldw	r4,-8(fp)
 4012200:	e17fff17 	ldw	r5,-4(fp)
 4012204:	d8000015 	stw	zero,0(sp)
 4012208:	01810074 	movhi	r6,1025
 401220c:	31889d04 	addi	r6,r6,8820
 4012210:	e1fffd17 	ldw	r7,-12(fp)
 4012214:	40112e00 	call	40112e0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4012218:	e0bffd17 	ldw	r2,-12(fp)
 401221c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4012220:	e0bffd17 	ldw	r2,-12(fp)
 4012224:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4012228:	008100f4 	movhi	r2,1027
 401222c:	10933a04 	addi	r2,r2,19688
 4012230:	10800017 	ldw	r2,0(r2)
 4012234:	100b883a 	mov	r5,r2
 4012238:	01810074 	movhi	r6,1025
 401223c:	31892704 	addi	r6,r6,9372
 4012240:	e1fffd17 	ldw	r7,-12(fp)
 4012244:	4010ed00 	call	4010ed0 <alt_alarm_start>
 4012248:	1004403a 	cmpge	r2,r2,zero
 401224c:	1000041e 	bne	r2,zero,4012260 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4012250:	e0fffd17 	ldw	r3,-12(fp)
 4012254:	00a00034 	movhi	r2,32768
 4012258:	10bfffc4 	addi	r2,r2,-1
 401225c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4012260:	e037883a 	mov	sp,fp
 4012264:	dfc00117 	ldw	ra,4(sp)
 4012268:	df000017 	ldw	fp,0(sp)
 401226c:	dec00204 	addi	sp,sp,8
 4012270:	f800283a 	ret

04012274 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4012274:	defff804 	addi	sp,sp,-32
 4012278:	df000715 	stw	fp,28(sp)
 401227c:	df000704 	addi	fp,sp,28
 4012280:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4012284:	e0bfff17 	ldw	r2,-4(fp)
 4012288:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 401228c:	e0bffe17 	ldw	r2,-8(fp)
 4012290:	10800017 	ldw	r2,0(r2)
 4012294:	e0bffd15 	stw	r2,-12(fp)
 4012298:	00000006 	br	401229c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401229c:	e0bffd17 	ldw	r2,-12(fp)
 40122a0:	10800104 	addi	r2,r2,4
 40122a4:	10800037 	ldwio	r2,0(r2)
 40122a8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 40122ac:	e0bffc17 	ldw	r2,-16(fp)
 40122b0:	1080c00c 	andi	r2,r2,768
 40122b4:	1005003a 	cmpeq	r2,r2,zero
 40122b8:	1000741e 	bne	r2,zero,401248c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 40122bc:	e0bffc17 	ldw	r2,-16(fp)
 40122c0:	1080400c 	andi	r2,r2,256
 40122c4:	1005003a 	cmpeq	r2,r2,zero
 40122c8:	1000351e 	bne	r2,zero,40123a0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 40122cc:	00800074 	movhi	r2,1
 40122d0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40122d4:	e0bffe17 	ldw	r2,-8(fp)
 40122d8:	10800a17 	ldw	r2,40(r2)
 40122dc:	10800044 	addi	r2,r2,1
 40122e0:	1081ffcc 	andi	r2,r2,2047
 40122e4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 40122e8:	e0bffe17 	ldw	r2,-8(fp)
 40122ec:	10c00b17 	ldw	r3,44(r2)
 40122f0:	e0bffa17 	ldw	r2,-24(fp)
 40122f4:	18801626 	beq	r3,r2,4012350 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40122f8:	e0bffd17 	ldw	r2,-12(fp)
 40122fc:	10800037 	ldwio	r2,0(r2)
 4012300:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4012304:	e0bffb17 	ldw	r2,-20(fp)
 4012308:	10a0000c 	andi	r2,r2,32768
 401230c:	1005003a 	cmpeq	r2,r2,zero
 4012310:	10000f1e 	bne	r2,zero,4012350 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4012314:	e0bffe17 	ldw	r2,-8(fp)
 4012318:	10c00a17 	ldw	r3,40(r2)
 401231c:	e0bffb17 	ldw	r2,-20(fp)
 4012320:	1009883a 	mov	r4,r2
 4012324:	e0bffe17 	ldw	r2,-8(fp)
 4012328:	1885883a 	add	r2,r3,r2
 401232c:	10800e04 	addi	r2,r2,56
 4012330:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4012334:	e0bffe17 	ldw	r2,-8(fp)
 4012338:	10800a17 	ldw	r2,40(r2)
 401233c:	10800044 	addi	r2,r2,1
 4012340:	10c1ffcc 	andi	r3,r2,2047
 4012344:	e0bffe17 	ldw	r2,-8(fp)
 4012348:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 401234c:	003fe106 	br	40122d4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4012350:	e0bffb17 	ldw	r2,-20(fp)
 4012354:	10bfffec 	andhi	r2,r2,65535
 4012358:	1005003a 	cmpeq	r2,r2,zero
 401235c:	1000101e 	bne	r2,zero,40123a0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4012360:	e0bffe17 	ldw	r2,-8(fp)
 4012364:	10c00817 	ldw	r3,32(r2)
 4012368:	00bfff84 	movi	r2,-2
 401236c:	1886703a 	and	r3,r3,r2
 4012370:	e0bffe17 	ldw	r2,-8(fp)
 4012374:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4012378:	e0bffd17 	ldw	r2,-12(fp)
 401237c:	11000104 	addi	r4,r2,4
 4012380:	e0bffe17 	ldw	r2,-8(fp)
 4012384:	10800817 	ldw	r2,32(r2)
 4012388:	1007883a 	mov	r3,r2
 401238c:	2005883a 	mov	r2,r4
 4012390:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4012394:	e0bffd17 	ldw	r2,-12(fp)
 4012398:	10800104 	addi	r2,r2,4
 401239c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 40123a0:	e0bffc17 	ldw	r2,-16(fp)
 40123a4:	1080800c 	andi	r2,r2,512
 40123a8:	1005003a 	cmpeq	r2,r2,zero
 40123ac:	103fbb1e 	bne	r2,zero,401229c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 40123b0:	e0bffc17 	ldw	r2,-16(fp)
 40123b4:	10bfffec 	andhi	r2,r2,65535
 40123b8:	1004d43a 	srli	r2,r2,16
 40123bc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40123c0:	00001506 	br	4012418 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40123c4:	e13ffd17 	ldw	r4,-12(fp)
 40123c8:	e0bffe17 	ldw	r2,-8(fp)
 40123cc:	10c00d17 	ldw	r3,52(r2)
 40123d0:	e0bffe17 	ldw	r2,-8(fp)
 40123d4:	1885883a 	add	r2,r3,r2
 40123d8:	10820e04 	addi	r2,r2,2104
 40123dc:	10800003 	ldbu	r2,0(r2)
 40123e0:	10c03fcc 	andi	r3,r2,255
 40123e4:	18c0201c 	xori	r3,r3,128
 40123e8:	18ffe004 	addi	r3,r3,-128
 40123ec:	2005883a 	mov	r2,r4
 40123f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40123f4:	e0bffe17 	ldw	r2,-8(fp)
 40123f8:	10800d17 	ldw	r2,52(r2)
 40123fc:	10800044 	addi	r2,r2,1
 4012400:	10c1ffcc 	andi	r3,r2,2047
 4012404:	e0bffe17 	ldw	r2,-8(fp)
 4012408:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 401240c:	e0bff917 	ldw	r2,-28(fp)
 4012410:	10bfffc4 	addi	r2,r2,-1
 4012414:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4012418:	e0bff917 	ldw	r2,-28(fp)
 401241c:	1005003a 	cmpeq	r2,r2,zero
 4012420:	1000051e 	bne	r2,zero,4012438 <altera_avalon_jtag_uart_irq+0x1c4>
 4012424:	e0bffe17 	ldw	r2,-8(fp)
 4012428:	10c00d17 	ldw	r3,52(r2)
 401242c:	e0bffe17 	ldw	r2,-8(fp)
 4012430:	10800c17 	ldw	r2,48(r2)
 4012434:	18bfe31e 	bne	r3,r2,40123c4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4012438:	e0bff917 	ldw	r2,-28(fp)
 401243c:	1005003a 	cmpeq	r2,r2,zero
 4012440:	103f961e 	bne	r2,zero,401229c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4012444:	e0bffe17 	ldw	r2,-8(fp)
 4012448:	10c00817 	ldw	r3,32(r2)
 401244c:	00bfff44 	movi	r2,-3
 4012450:	1886703a 	and	r3,r3,r2
 4012454:	e0bffe17 	ldw	r2,-8(fp)
 4012458:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401245c:	e0bffe17 	ldw	r2,-8(fp)
 4012460:	10800017 	ldw	r2,0(r2)
 4012464:	11000104 	addi	r4,r2,4
 4012468:	e0bffe17 	ldw	r2,-8(fp)
 401246c:	10800817 	ldw	r2,32(r2)
 4012470:	1007883a 	mov	r3,r2
 4012474:	2005883a 	mov	r2,r4
 4012478:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401247c:	e0bffd17 	ldw	r2,-12(fp)
 4012480:	10800104 	addi	r2,r2,4
 4012484:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4012488:	003f8406 	br	401229c <altera_avalon_jtag_uart_irq+0x28>
}
 401248c:	e037883a 	mov	sp,fp
 4012490:	df000017 	ldw	fp,0(sp)
 4012494:	dec00104 	addi	sp,sp,4
 4012498:	f800283a 	ret

0401249c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 401249c:	defffc04 	addi	sp,sp,-16
 40124a0:	df000315 	stw	fp,12(sp)
 40124a4:	df000304 	addi	fp,sp,12
 40124a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 40124ac:	e0bfff17 	ldw	r2,-4(fp)
 40124b0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 40124b4:	e0bffe17 	ldw	r2,-8(fp)
 40124b8:	10800017 	ldw	r2,0(r2)
 40124bc:	10800104 	addi	r2,r2,4
 40124c0:	10800037 	ldwio	r2,0(r2)
 40124c4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 40124c8:	e0bffd17 	ldw	r2,-12(fp)
 40124cc:	1081000c 	andi	r2,r2,1024
 40124d0:	1005003a 	cmpeq	r2,r2,zero
 40124d4:	10000c1e 	bne	r2,zero,4012508 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 40124d8:	e0bffe17 	ldw	r2,-8(fp)
 40124dc:	10800017 	ldw	r2,0(r2)
 40124e0:	11000104 	addi	r4,r2,4
 40124e4:	e0bffe17 	ldw	r2,-8(fp)
 40124e8:	10800817 	ldw	r2,32(r2)
 40124ec:	10810014 	ori	r2,r2,1024
 40124f0:	1007883a 	mov	r3,r2
 40124f4:	2005883a 	mov	r2,r4
 40124f8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 40124fc:	e0bffe17 	ldw	r2,-8(fp)
 4012500:	10000915 	stw	zero,36(r2)
 4012504:	00000a06 	br	4012530 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4012508:	e0bffe17 	ldw	r2,-8(fp)
 401250c:	10c00917 	ldw	r3,36(r2)
 4012510:	00a00034 	movhi	r2,32768
 4012514:	10bfff04 	addi	r2,r2,-4
 4012518:	10c00536 	bltu	r2,r3,4012530 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 401251c:	e0bffe17 	ldw	r2,-8(fp)
 4012520:	10800917 	ldw	r2,36(r2)
 4012524:	10c00044 	addi	r3,r2,1
 4012528:	e0bffe17 	ldw	r2,-8(fp)
 401252c:	10c00915 	stw	r3,36(r2)
 4012530:	008100f4 	movhi	r2,1027
 4012534:	10933a04 	addi	r2,r2,19688
 4012538:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 401253c:	e037883a 	mov	sp,fp
 4012540:	df000017 	ldw	fp,0(sp)
 4012544:	dec00104 	addi	sp,sp,4
 4012548:	f800283a 	ret

0401254c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401254c:	defffc04 	addi	sp,sp,-16
 4012550:	df000315 	stw	fp,12(sp)
 4012554:	df000304 	addi	fp,sp,12
 4012558:	e13ffd15 	stw	r4,-12(fp)
 401255c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4012560:	00000706 	br	4012580 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 4012564:	e0bffe17 	ldw	r2,-8(fp)
 4012568:	1090000c 	andi	r2,r2,16384
 401256c:	1005003a 	cmpeq	r2,r2,zero
 4012570:	1000031e 	bne	r2,zero,4012580 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 4012574:	00bffd44 	movi	r2,-11
 4012578:	e0bfff15 	stw	r2,-4(fp)
 401257c:	00000b06 	br	40125ac <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4012580:	e0bffd17 	ldw	r2,-12(fp)
 4012584:	10c00d17 	ldw	r3,52(r2)
 4012588:	e0bffd17 	ldw	r2,-12(fp)
 401258c:	10800c17 	ldw	r2,48(r2)
 4012590:	18800526 	beq	r3,r2,40125a8 <altera_avalon_jtag_uart_close+0x5c>
 4012594:	e0bffd17 	ldw	r2,-12(fp)
 4012598:	10c00917 	ldw	r3,36(r2)
 401259c:	e0bffd17 	ldw	r2,-12(fp)
 40125a0:	10800117 	ldw	r2,4(r2)
 40125a4:	18bfef36 	bltu	r3,r2,4012564 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 40125a8:	e03fff15 	stw	zero,-4(fp)
 40125ac:	e0bfff17 	ldw	r2,-4(fp)
}
 40125b0:	e037883a 	mov	sp,fp
 40125b4:	df000017 	ldw	fp,0(sp)
 40125b8:	dec00104 	addi	sp,sp,4
 40125bc:	f800283a 	ret

040125c0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 40125c0:	defff804 	addi	sp,sp,-32
 40125c4:	df000715 	stw	fp,28(sp)
 40125c8:	df000704 	addi	fp,sp,28
 40125cc:	e13ffb15 	stw	r4,-20(fp)
 40125d0:	e17ffc15 	stw	r5,-16(fp)
 40125d4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 40125d8:	00bff9c4 	movi	r2,-25
 40125dc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 40125e0:	e0bffc17 	ldw	r2,-16(fp)
 40125e4:	e0bfff15 	stw	r2,-4(fp)
 40125e8:	e0ffff17 	ldw	r3,-4(fp)
 40125ec:	189a8060 	cmpeqi	r2,r3,27137
 40125f0:	1000041e 	bne	r2,zero,4012604 <altera_avalon_jtag_uart_ioctl+0x44>
 40125f4:	e0ffff17 	ldw	r3,-4(fp)
 40125f8:	189a80a0 	cmpeqi	r2,r3,27138
 40125fc:	10001b1e 	bne	r2,zero,401266c <altera_avalon_jtag_uart_ioctl+0xac>
 4012600:	00002706 	br	40126a0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4012604:	e0bffb17 	ldw	r2,-20(fp)
 4012608:	10c00117 	ldw	r3,4(r2)
 401260c:	00a00034 	movhi	r2,32768
 4012610:	10bfffc4 	addi	r2,r2,-1
 4012614:	18802226 	beq	r3,r2,40126a0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 4012618:	e0bffd17 	ldw	r2,-12(fp)
 401261c:	10800017 	ldw	r2,0(r2)
 4012620:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4012624:	e0bff917 	ldw	r2,-28(fp)
 4012628:	10800090 	cmplti	r2,r2,2
 401262c:	1000071e 	bne	r2,zero,401264c <altera_avalon_jtag_uart_ioctl+0x8c>
 4012630:	e0fff917 	ldw	r3,-28(fp)
 4012634:	00a00034 	movhi	r2,32768
 4012638:	10bfffc4 	addi	r2,r2,-1
 401263c:	18800326 	beq	r3,r2,401264c <altera_avalon_jtag_uart_ioctl+0x8c>
 4012640:	e0bff917 	ldw	r2,-28(fp)
 4012644:	e0bffe15 	stw	r2,-8(fp)
 4012648:	00000306 	br	4012658 <altera_avalon_jtag_uart_ioctl+0x98>
 401264c:	00e00034 	movhi	r3,32768
 4012650:	18ffff84 	addi	r3,r3,-2
 4012654:	e0fffe15 	stw	r3,-8(fp)
 4012658:	e0bffb17 	ldw	r2,-20(fp)
 401265c:	e0fffe17 	ldw	r3,-8(fp)
 4012660:	10c00115 	stw	r3,4(r2)
      rc = 0;
 4012664:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 4012668:	00000d06 	br	40126a0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401266c:	e0bffb17 	ldw	r2,-20(fp)
 4012670:	10c00117 	ldw	r3,4(r2)
 4012674:	00a00034 	movhi	r2,32768
 4012678:	10bfffc4 	addi	r2,r2,-1
 401267c:	18800826 	beq	r3,r2,40126a0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4012680:	e13ffd17 	ldw	r4,-12(fp)
 4012684:	e0bffb17 	ldw	r2,-20(fp)
 4012688:	10c00917 	ldw	r3,36(r2)
 401268c:	e0bffb17 	ldw	r2,-20(fp)
 4012690:	10800117 	ldw	r2,4(r2)
 4012694:	1885803a 	cmpltu	r2,r3,r2
 4012698:	20800015 	stw	r2,0(r4)
      rc = 0;
 401269c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 40126a0:	e0bffa17 	ldw	r2,-24(fp)
}
 40126a4:	e037883a 	mov	sp,fp
 40126a8:	df000017 	ldw	fp,0(sp)
 40126ac:	dec00104 	addi	sp,sp,4
 40126b0:	f800283a 	ret

040126b4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 40126b4:	defff204 	addi	sp,sp,-56
 40126b8:	dfc00d15 	stw	ra,52(sp)
 40126bc:	df000c15 	stw	fp,48(sp)
 40126c0:	df000c04 	addi	fp,sp,48
 40126c4:	e13ffb15 	stw	r4,-20(fp)
 40126c8:	e17ffc15 	stw	r5,-16(fp)
 40126cc:	e1bffd15 	stw	r6,-12(fp)
 40126d0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 40126d4:	e0bffc17 	ldw	r2,-16(fp)
 40126d8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 40126dc:	00004806 	br	4012800 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 40126e0:	e0bffb17 	ldw	r2,-20(fp)
 40126e4:	10800a17 	ldw	r2,40(r2)
 40126e8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 40126ec:	e0bffb17 	ldw	r2,-20(fp)
 40126f0:	10800b17 	ldw	r2,44(r2)
 40126f4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 40126f8:	e0fff717 	ldw	r3,-36(fp)
 40126fc:	e0bff617 	ldw	r2,-40(fp)
 4012700:	18800536 	bltu	r3,r2,4012718 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4012704:	e0bff717 	ldw	r2,-36(fp)
 4012708:	e0fff617 	ldw	r3,-40(fp)
 401270c:	10c5c83a 	sub	r2,r2,r3
 4012710:	e0bff815 	stw	r2,-32(fp)
 4012714:	00000406 	br	4012728 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4012718:	00820004 	movi	r2,2048
 401271c:	e0fff617 	ldw	r3,-40(fp)
 4012720:	10c5c83a 	sub	r2,r2,r3
 4012724:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 4012728:	e0bff817 	ldw	r2,-32(fp)
 401272c:	1005003a 	cmpeq	r2,r2,zero
 4012730:	10001f1e 	bne	r2,zero,40127b0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 4012734:	e0fffd17 	ldw	r3,-12(fp)
 4012738:	e0bff817 	ldw	r2,-32(fp)
 401273c:	1880022e 	bgeu	r3,r2,4012748 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 4012740:	e0bffd17 	ldw	r2,-12(fp)
 4012744:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4012748:	e0bffb17 	ldw	r2,-20(fp)
 401274c:	10c00e04 	addi	r3,r2,56
 4012750:	e0bff617 	ldw	r2,-40(fp)
 4012754:	1887883a 	add	r3,r3,r2
 4012758:	e0bffa17 	ldw	r2,-24(fp)
 401275c:	1009883a 	mov	r4,r2
 4012760:	180b883a 	mov	r5,r3
 4012764:	e1bff817 	ldw	r6,-32(fp)
 4012768:	40091980 	call	4009198 <memcpy>
      ptr   += n;
 401276c:	e0fff817 	ldw	r3,-32(fp)
 4012770:	e0bffa17 	ldw	r2,-24(fp)
 4012774:	10c5883a 	add	r2,r2,r3
 4012778:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 401277c:	e0fffd17 	ldw	r3,-12(fp)
 4012780:	e0bff817 	ldw	r2,-32(fp)
 4012784:	1885c83a 	sub	r2,r3,r2
 4012788:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401278c:	e0fff617 	ldw	r3,-40(fp)
 4012790:	e0bff817 	ldw	r2,-32(fp)
 4012794:	1885883a 	add	r2,r3,r2
 4012798:	10c1ffcc 	andi	r3,r2,2047
 401279c:	e0bffb17 	ldw	r2,-20(fp)
 40127a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 40127a4:	e0bffd17 	ldw	r2,-12(fp)
 40127a8:	10800048 	cmpgei	r2,r2,1
 40127ac:	103fcc1e 	bne	r2,zero,40126e0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 40127b0:	e0fffa17 	ldw	r3,-24(fp)
 40127b4:	e0bffc17 	ldw	r2,-16(fp)
 40127b8:	1880141e 	bne	r3,r2,401280c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 40127bc:	e0bffe17 	ldw	r2,-8(fp)
 40127c0:	1090000c 	andi	r2,r2,16384
 40127c4:	1004c03a 	cmpne	r2,r2,zero
 40127c8:	1000101e 	bne	r2,zero,401280c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 40127cc:	e0bffb17 	ldw	r2,-20(fp)
 40127d0:	10c00a17 	ldw	r3,40(r2)
 40127d4:	e0bff717 	ldw	r2,-36(fp)
 40127d8:	1880051e 	bne	r3,r2,40127f0 <altera_avalon_jtag_uart_read+0x13c>
 40127dc:	e0bffb17 	ldw	r2,-20(fp)
 40127e0:	10c00917 	ldw	r3,36(r2)
 40127e4:	e0bffb17 	ldw	r2,-20(fp)
 40127e8:	10800117 	ldw	r2,4(r2)
 40127ec:	18bff736 	bltu	r3,r2,40127cc <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 40127f0:	e0bffb17 	ldw	r2,-20(fp)
 40127f4:	10c00a17 	ldw	r3,40(r2)
 40127f8:	e0bff717 	ldw	r2,-36(fp)
 40127fc:	18800326 	beq	r3,r2,401280c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4012800:	e0bffd17 	ldw	r2,-12(fp)
 4012804:	10800048 	cmpgei	r2,r2,1
 4012808:	103fb51e 	bne	r2,zero,40126e0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 401280c:	e0fffa17 	ldw	r3,-24(fp)
 4012810:	e0bffc17 	ldw	r2,-16(fp)
 4012814:	18801926 	beq	r3,r2,401287c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012818:	0005303a 	rdctl	r2,status
 401281c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012820:	e0fff517 	ldw	r3,-44(fp)
 4012824:	00bfff84 	movi	r2,-2
 4012828:	1884703a 	and	r2,r3,r2
 401282c:	1001703a 	wrctl	status,r2
  
  return context;
 4012830:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4012834:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4012838:	e0bffb17 	ldw	r2,-20(fp)
 401283c:	10800817 	ldw	r2,32(r2)
 4012840:	10c00054 	ori	r3,r2,1
 4012844:	e0bffb17 	ldw	r2,-20(fp)
 4012848:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401284c:	e0bffb17 	ldw	r2,-20(fp)
 4012850:	10800017 	ldw	r2,0(r2)
 4012854:	11000104 	addi	r4,r2,4
 4012858:	e0bffb17 	ldw	r2,-20(fp)
 401285c:	10800817 	ldw	r2,32(r2)
 4012860:	1007883a 	mov	r3,r2
 4012864:	2005883a 	mov	r2,r4
 4012868:	10c00035 	stwio	r3,0(r2)
 401286c:	e0bff917 	ldw	r2,-28(fp)
 4012870:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012874:	e0bff417 	ldw	r2,-48(fp)
 4012878:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 401287c:	e0fffa17 	ldw	r3,-24(fp)
 4012880:	e0bffc17 	ldw	r2,-16(fp)
 4012884:	18800526 	beq	r3,r2,401289c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 4012888:	e0fffa17 	ldw	r3,-24(fp)
 401288c:	e0bffc17 	ldw	r2,-16(fp)
 4012890:	1887c83a 	sub	r3,r3,r2
 4012894:	e0ffff15 	stw	r3,-4(fp)
 4012898:	00000906 	br	40128c0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 401289c:	e0bffe17 	ldw	r2,-8(fp)
 40128a0:	1090000c 	andi	r2,r2,16384
 40128a4:	1005003a 	cmpeq	r2,r2,zero
 40128a8:	1000031e 	bne	r2,zero,40128b8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 40128ac:	00bffd44 	movi	r2,-11
 40128b0:	e0bfff15 	stw	r2,-4(fp)
 40128b4:	00000206 	br	40128c0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 40128b8:	00bffec4 	movi	r2,-5
 40128bc:	e0bfff15 	stw	r2,-4(fp)
 40128c0:	e0bfff17 	ldw	r2,-4(fp)
}
 40128c4:	e037883a 	mov	sp,fp
 40128c8:	dfc00117 	ldw	ra,4(sp)
 40128cc:	df000017 	ldw	fp,0(sp)
 40128d0:	dec00204 	addi	sp,sp,8
 40128d4:	f800283a 	ret

040128d8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40128d8:	defff204 	addi	sp,sp,-56
 40128dc:	dfc00d15 	stw	ra,52(sp)
 40128e0:	df000c15 	stw	fp,48(sp)
 40128e4:	df000c04 	addi	fp,sp,48
 40128e8:	e13ffb15 	stw	r4,-20(fp)
 40128ec:	e17ffc15 	stw	r5,-16(fp)
 40128f0:	e1bffd15 	stw	r6,-12(fp)
 40128f4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 40128f8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 40128fc:	e0bffc17 	ldw	r2,-16(fp)
 4012900:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4012904:	00003a06 	br	40129f0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4012908:	e0bffb17 	ldw	r2,-20(fp)
 401290c:	10800c17 	ldw	r2,48(r2)
 4012910:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 4012914:	e0bffb17 	ldw	r2,-20(fp)
 4012918:	10800d17 	ldw	r2,52(r2)
 401291c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 4012920:	e0fffa17 	ldw	r3,-24(fp)
 4012924:	e0bff917 	ldw	r2,-28(fp)
 4012928:	1880062e 	bgeu	r3,r2,4012944 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 401292c:	e0fff917 	ldw	r3,-28(fp)
 4012930:	e0bffa17 	ldw	r2,-24(fp)
 4012934:	1885c83a 	sub	r2,r3,r2
 4012938:	10bfffc4 	addi	r2,r2,-1
 401293c:	e0bff815 	stw	r2,-32(fp)
 4012940:	00000c06 	br	4012974 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 4012944:	e0bff917 	ldw	r2,-28(fp)
 4012948:	1005003a 	cmpeq	r2,r2,zero
 401294c:	1000051e 	bne	r2,zero,4012964 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4012950:	00820004 	movi	r2,2048
 4012954:	e0fffa17 	ldw	r3,-24(fp)
 4012958:	10c5c83a 	sub	r2,r2,r3
 401295c:	e0bff815 	stw	r2,-32(fp)
 4012960:	00000406 	br	4012974 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4012964:	0081ffc4 	movi	r2,2047
 4012968:	e0fffa17 	ldw	r3,-24(fp)
 401296c:	10c5c83a 	sub	r2,r2,r3
 4012970:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 4012974:	e0bff817 	ldw	r2,-32(fp)
 4012978:	1005003a 	cmpeq	r2,r2,zero
 401297c:	10001f1e 	bne	r2,zero,40129fc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 4012980:	e0fffd17 	ldw	r3,-12(fp)
 4012984:	e0bff817 	ldw	r2,-32(fp)
 4012988:	1880022e 	bgeu	r3,r2,4012994 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 401298c:	e0bffd17 	ldw	r2,-12(fp)
 4012990:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4012994:	e0bffb17 	ldw	r2,-20(fp)
 4012998:	10c20e04 	addi	r3,r2,2104
 401299c:	e0bffa17 	ldw	r2,-24(fp)
 40129a0:	1885883a 	add	r2,r3,r2
 40129a4:	e0fffc17 	ldw	r3,-16(fp)
 40129a8:	1009883a 	mov	r4,r2
 40129ac:	180b883a 	mov	r5,r3
 40129b0:	e1bff817 	ldw	r6,-32(fp)
 40129b4:	40091980 	call	4009198 <memcpy>
      ptr   += n;
 40129b8:	e0fff817 	ldw	r3,-32(fp)
 40129bc:	e0bffc17 	ldw	r2,-16(fp)
 40129c0:	10c5883a 	add	r2,r2,r3
 40129c4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 40129c8:	e0fffd17 	ldw	r3,-12(fp)
 40129cc:	e0bff817 	ldw	r2,-32(fp)
 40129d0:	1885c83a 	sub	r2,r3,r2
 40129d4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40129d8:	e0fffa17 	ldw	r3,-24(fp)
 40129dc:	e0bff817 	ldw	r2,-32(fp)
 40129e0:	1885883a 	add	r2,r3,r2
 40129e4:	10c1ffcc 	andi	r3,r2,2047
 40129e8:	e0bffb17 	ldw	r2,-20(fp)
 40129ec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40129f0:	e0bffd17 	ldw	r2,-12(fp)
 40129f4:	10800048 	cmpgei	r2,r2,1
 40129f8:	103fc31e 	bne	r2,zero,4012908 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40129fc:	0005303a 	rdctl	r2,status
 4012a00:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012a04:	e0fff517 	ldw	r3,-44(fp)
 4012a08:	00bfff84 	movi	r2,-2
 4012a0c:	1884703a 	and	r2,r3,r2
 4012a10:	1001703a 	wrctl	status,r2
  
  return context;
 4012a14:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4012a18:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4012a1c:	e0bffb17 	ldw	r2,-20(fp)
 4012a20:	10800817 	ldw	r2,32(r2)
 4012a24:	10c00094 	ori	r3,r2,2
 4012a28:	e0bffb17 	ldw	r2,-20(fp)
 4012a2c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4012a30:	e0bffb17 	ldw	r2,-20(fp)
 4012a34:	10800017 	ldw	r2,0(r2)
 4012a38:	11000104 	addi	r4,r2,4
 4012a3c:	e0bffb17 	ldw	r2,-20(fp)
 4012a40:	10800817 	ldw	r2,32(r2)
 4012a44:	1007883a 	mov	r3,r2
 4012a48:	2005883a 	mov	r2,r4
 4012a4c:	10c00035 	stwio	r3,0(r2)
 4012a50:	e0bff717 	ldw	r2,-36(fp)
 4012a54:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012a58:	e0bff417 	ldw	r2,-48(fp)
 4012a5c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4012a60:	e0bffd17 	ldw	r2,-12(fp)
 4012a64:	10800050 	cmplti	r2,r2,1
 4012a68:	1000111e 	bne	r2,zero,4012ab0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 4012a6c:	e0bffe17 	ldw	r2,-8(fp)
 4012a70:	1090000c 	andi	r2,r2,16384
 4012a74:	1004c03a 	cmpne	r2,r2,zero
 4012a78:	1000101e 	bne	r2,zero,4012abc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 4012a7c:	e0bffb17 	ldw	r2,-20(fp)
 4012a80:	10c00d17 	ldw	r3,52(r2)
 4012a84:	e0bff917 	ldw	r2,-28(fp)
 4012a88:	1880051e 	bne	r3,r2,4012aa0 <altera_avalon_jtag_uart_write+0x1c8>
 4012a8c:	e0bffb17 	ldw	r2,-20(fp)
 4012a90:	10c00917 	ldw	r3,36(r2)
 4012a94:	e0bffb17 	ldw	r2,-20(fp)
 4012a98:	10800117 	ldw	r2,4(r2)
 4012a9c:	18bff736 	bltu	r3,r2,4012a7c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 4012aa0:	e0bffb17 	ldw	r2,-20(fp)
 4012aa4:	10c00d17 	ldw	r3,52(r2)
 4012aa8:	e0bff917 	ldw	r2,-28(fp)
 4012aac:	18800326 	beq	r3,r2,4012abc <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 4012ab0:	e0bffd17 	ldw	r2,-12(fp)
 4012ab4:	10800048 	cmpgei	r2,r2,1
 4012ab8:	103fcd1e 	bne	r2,zero,40129f0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4012abc:	e0fffc17 	ldw	r3,-16(fp)
 4012ac0:	e0bff617 	ldw	r2,-40(fp)
 4012ac4:	18800526 	beq	r3,r2,4012adc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 4012ac8:	e0fffc17 	ldw	r3,-16(fp)
 4012acc:	e0bff617 	ldw	r2,-40(fp)
 4012ad0:	1887c83a 	sub	r3,r3,r2
 4012ad4:	e0ffff15 	stw	r3,-4(fp)
 4012ad8:	00000906 	br	4012b00 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 4012adc:	e0bffe17 	ldw	r2,-8(fp)
 4012ae0:	1090000c 	andi	r2,r2,16384
 4012ae4:	1005003a 	cmpeq	r2,r2,zero
 4012ae8:	1000031e 	bne	r2,zero,4012af8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 4012aec:	00bffd44 	movi	r2,-11
 4012af0:	e0bfff15 	stw	r2,-4(fp)
 4012af4:	00000206 	br	4012b00 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4012af8:	00bffec4 	movi	r2,-5
 4012afc:	e0bfff15 	stw	r2,-4(fp)
 4012b00:	e0bfff17 	ldw	r2,-4(fp)
}
 4012b04:	e037883a 	mov	sp,fp
 4012b08:	dfc00117 	ldw	ra,4(sp)
 4012b0c:	df000017 	ldw	fp,0(sp)
 4012b10:	dec00204 	addi	sp,sp,8
 4012b14:	f800283a 	ret

04012b18 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 4012b18:	defff404 	addi	sp,sp,-48
 4012b1c:	df000b15 	stw	fp,44(sp)
 4012b20:	df000b04 	addi	fp,sp,44
 4012b24:	e13ffc15 	stw	r4,-16(fp)
 4012b28:	e17ffd15 	stw	r5,-12(fp)
 4012b2c:	e1bffe15 	stw	r6,-8(fp)
 4012b30:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 4012b34:	e0fffe17 	ldw	r3,-8(fp)
 4012b38:	e0bfff17 	ldw	r2,-4(fp)
 4012b3c:	10c5883a 	add	r2,r2,r3
 4012b40:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 4012b44:	e0c00117 	ldw	r3,4(fp)
 4012b48:	e0800217 	ldw	r2,8(fp)
 4012b4c:	10c5883a 	add	r2,r2,r3
 4012b50:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 4012b54:	e0800117 	ldw	r2,4(fp)
 4012b58:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 4012b5c:	e0bffe17 	ldw	r2,-8(fp)
 4012b60:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 4012b64:	00800044 	movi	r2,1
 4012b68:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 4012b6c:	e0bffc17 	ldw	r2,-16(fp)
 4012b70:	11000504 	addi	r4,r2,20
 4012b74:	e0fffd17 	ldw	r3,-12(fp)
 4012b78:	00800044 	movi	r2,1
 4012b7c:	10c6983a 	sll	r3,r2,r3
 4012b80:	2005883a 	mov	r2,r4
 4012b84:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 4012b88:	e0800317 	ldw	r2,12(fp)
 4012b8c:	1080008c 	andi	r2,r2,2
 4012b90:	1004c03a 	cmpne	r2,r2,zero
 4012b94:	1000051e 	bne	r2,zero,4012bac <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 4012b98:	e0bffc17 	ldw	r2,-16(fp)
 4012b9c:	10800304 	addi	r2,r2,12
 4012ba0:	1007883a 	mov	r3,r2
 4012ba4:	00810004 	movi	r2,1024
 4012ba8:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4012bac:	e0bffc17 	ldw	r2,-16(fp)
 4012bb0:	10800037 	ldwio	r2,0(r2)
 4012bb4:	00000006 	br	4012bb8 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4012bb8:	e0bffc17 	ldw	r2,-16(fp)
 4012bbc:	10800204 	addi	r2,r2,8
 4012bc0:	10800037 	ldwio	r2,0(r2)
 4012bc4:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 4012bc8:	e0bff717 	ldw	r2,-36(fp)
 4012bcc:	1080100c 	andi	r2,r2,64
 4012bd0:	1005003a 	cmpeq	r2,r2,zero
 4012bd4:	1000031e 	bne	r2,zero,4012be4 <alt_avalon_spi_command+0xcc>
 4012bd8:	e0bff617 	ldw	r2,-40(fp)
 4012bdc:	1004c03a 	cmpne	r2,r2,zero
 4012be0:	1000041e 	bne	r2,zero,4012bf4 <alt_avalon_spi_command+0xdc>
 4012be4:	e0bff717 	ldw	r2,-36(fp)
 4012be8:	1080200c 	andi	r2,r2,128
 4012bec:	1005003a 	cmpeq	r2,r2,zero
 4012bf0:	103ff11e 	bne	r2,zero,4012bb8 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 4012bf4:	e0bff717 	ldw	r2,-36(fp)
 4012bf8:	1080100c 	andi	r2,r2,64
 4012bfc:	1005003a 	cmpeq	r2,r2,zero
 4012c00:	1000201e 	bne	r2,zero,4012c84 <alt_avalon_spi_command+0x16c>
 4012c04:	e0bff617 	ldw	r2,-40(fp)
 4012c08:	10800050 	cmplti	r2,r2,1
 4012c0c:	10001d1e 	bne	r2,zero,4012c84 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 4012c10:	e0bff617 	ldw	r2,-40(fp)
 4012c14:	10bfffc4 	addi	r2,r2,-1
 4012c18:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 4012c1c:	e0ffff17 	ldw	r3,-4(fp)
 4012c20:	e0bffb17 	ldw	r2,-20(fp)
 4012c24:	18800b2e 	bgeu	r3,r2,4012c54 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 4012c28:	e0bffc17 	ldw	r2,-16(fp)
 4012c2c:	11000104 	addi	r4,r2,4
 4012c30:	e0bfff17 	ldw	r2,-4(fp)
 4012c34:	10800003 	ldbu	r2,0(r2)
 4012c38:	10c03fcc 	andi	r3,r2,255
 4012c3c:	e0bfff17 	ldw	r2,-4(fp)
 4012c40:	10800044 	addi	r2,r2,1
 4012c44:	e0bfff15 	stw	r2,-4(fp)
 4012c48:	2005883a 	mov	r2,r4
 4012c4c:	10c00035 	stwio	r3,0(r2)
 4012c50:	00000c06 	br	4012c84 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 4012c54:	e0bff917 	ldw	r2,-28(fp)
 4012c58:	1005003a 	cmpeq	r2,r2,zero
 4012c5c:	1000071e 	bne	r2,zero,4012c7c <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 4012c60:	e0bff917 	ldw	r2,-28(fp)
 4012c64:	10bfffc4 	addi	r2,r2,-1
 4012c68:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 4012c6c:	e0bffc17 	ldw	r2,-16(fp)
 4012c70:	10800104 	addi	r2,r2,4
 4012c74:	10000035 	stwio	zero,0(r2)
 4012c78:	00000206 	br	4012c84 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 4012c7c:	00bf0004 	movi	r2,-1024
 4012c80:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 4012c84:	e0bff717 	ldw	r2,-36(fp)
 4012c88:	1080200c 	andi	r2,r2,128
 4012c8c:	1005003a 	cmpeq	r2,r2,zero
 4012c90:	103fc91e 	bne	r2,zero,4012bb8 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 4012c94:	e0bffc17 	ldw	r2,-16(fp)
 4012c98:	10800037 	ldwio	r2,0(r2)
 4012c9c:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 4012ca0:	e0bff817 	ldw	r2,-32(fp)
 4012ca4:	1005003a 	cmpeq	r2,r2,zero
 4012ca8:	1000041e 	bne	r2,zero,4012cbc <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 4012cac:	e0bff817 	ldw	r2,-32(fp)
 4012cb0:	10bfffc4 	addi	r2,r2,-1
 4012cb4:	e0bff815 	stw	r2,-32(fp)
 4012cb8:	00000706 	br	4012cd8 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 4012cbc:	e0bff517 	ldw	r2,-44(fp)
 4012cc0:	1007883a 	mov	r3,r2
 4012cc4:	e0800217 	ldw	r2,8(fp)
 4012cc8:	10c00005 	stb	r3,0(r2)
 4012ccc:	e0800217 	ldw	r2,8(fp)
 4012cd0:	10800044 	addi	r2,r2,1
 4012cd4:	e0800215 	stw	r2,8(fp)
      credits++;
 4012cd8:	e0bff617 	ldw	r2,-40(fp)
 4012cdc:	10800044 	addi	r2,r2,1
 4012ce0:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 4012ce4:	e0bff817 	ldw	r2,-32(fp)
 4012ce8:	1004c03a 	cmpne	r2,r2,zero
 4012cec:	103fb21e 	bne	r2,zero,4012bb8 <alt_avalon_spi_command+0xa0>
 4012cf0:	e0c00217 	ldw	r3,8(fp)
 4012cf4:	e0bffa17 	ldw	r2,-24(fp)
 4012cf8:	18800126 	beq	r3,r2,4012d00 <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 4012cfc:	003fae06 	br	4012bb8 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 4012d00:	e0bffc17 	ldw	r2,-16(fp)
 4012d04:	10800204 	addi	r2,r2,8
 4012d08:	10800037 	ldwio	r2,0(r2)
 4012d0c:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 4012d10:	e0bff717 	ldw	r2,-36(fp)
 4012d14:	1080080c 	andi	r2,r2,32
 4012d18:	1005003a 	cmpeq	r2,r2,zero
 4012d1c:	103ff81e 	bne	r2,zero,4012d00 <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 4012d20:	e0800317 	ldw	r2,12(fp)
 4012d24:	1080004c 	andi	r2,r2,1
 4012d28:	1004c03a 	cmpne	r2,r2,zero
 4012d2c:	1000031e 	bne	r2,zero,4012d3c <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 4012d30:	e0bffc17 	ldw	r2,-16(fp)
 4012d34:	10800304 	addi	r2,r2,12
 4012d38:	10000035 	stwio	zero,0(r2)

  return read_length;
 4012d3c:	e0800117 	ldw	r2,4(fp)
}
 4012d40:	e037883a 	mov	sp,fp
 4012d44:	df000017 	ldw	fp,0(sp)
 4012d48:	dec00104 	addi	sp,sp,4
 4012d4c:	f800283a 	ret

04012d50 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 4012d50:	defffa04 	addi	sp,sp,-24
 4012d54:	dfc00515 	stw	ra,20(sp)
 4012d58:	df000415 	stw	fp,16(sp)
 4012d5c:	df000404 	addi	fp,sp,16
 4012d60:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 4012d64:	e0bfff17 	ldw	r2,-4(fp)
 4012d68:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 4012d6c:	e0bfff17 	ldw	r2,-4(fp)
 4012d70:	10800104 	addi	r2,r2,4
 4012d74:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012d78:	0005303a 	rdctl	r2,status
 4012d7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012d80:	e0fffd17 	ldw	r3,-12(fp)
 4012d84:	00bfff84 	movi	r2,-2
 4012d88:	1884703a 	and	r2,r3,r2
 4012d8c:	1001703a 	wrctl	status,r2
  
  return context;
 4012d90:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 4012d94:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
 4012d98:	4011ce80 	call	4011ce8 <alt_tick>
 4012d9c:	e0bffe17 	ldw	r2,-8(fp)
 4012da0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012da4:	e0bffc17 	ldw	r2,-16(fp)
 4012da8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4012dac:	e037883a 	mov	sp,fp
 4012db0:	dfc00117 	ldw	ra,4(sp)
 4012db4:	df000017 	ldw	fp,0(sp)
 4012db8:	dec00204 	addi	sp,sp,8
 4012dbc:	f800283a 	ret

04012dc0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4012dc0:	defff804 	addi	sp,sp,-32
 4012dc4:	dfc00715 	stw	ra,28(sp)
 4012dc8:	df000615 	stw	fp,24(sp)
 4012dcc:	df000604 	addi	fp,sp,24
 4012dd0:	e13ffc15 	stw	r4,-16(fp)
 4012dd4:	e17ffd15 	stw	r5,-12(fp)
 4012dd8:	e1bffe15 	stw	r6,-8(fp)
 4012ddc:	e1ffff15 	stw	r7,-4(fp)
 4012de0:	e0bfff17 	ldw	r2,-4(fp)
 4012de4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4012de8:	008100f4 	movhi	r2,1027
 4012dec:	10933a04 	addi	r2,r2,19688
 4012df0:	10800017 	ldw	r2,0(r2)
 4012df4:	1004c03a 	cmpne	r2,r2,zero
 4012df8:	1000041e 	bne	r2,zero,4012e0c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 4012dfc:	00c100f4 	movhi	r3,1027
 4012e00:	18d33a04 	addi	r3,r3,19688
 4012e04:	e0bffb17 	ldw	r2,-20(fp)
 4012e08:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4012e0c:	e0bffc17 	ldw	r2,-16(fp)
 4012e10:	10800104 	addi	r2,r2,4
 4012e14:	1007883a 	mov	r3,r2
 4012e18:	008001c4 	movi	r2,7
 4012e1c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4012e20:	d8000015 	stw	zero,0(sp)
 4012e24:	e13ffd17 	ldw	r4,-12(fp)
 4012e28:	e17ffe17 	ldw	r5,-8(fp)
 4012e2c:	01810074 	movhi	r6,1025
 4012e30:	318b5404 	addi	r6,r6,11600
 4012e34:	e1fffc17 	ldw	r7,-16(fp)
 4012e38:	40112e00 	call	40112e0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4012e3c:	e037883a 	mov	sp,fp
 4012e40:	dfc00117 	ldw	ra,4(sp)
 4012e44:	df000017 	ldw	fp,0(sp)
 4012e48:	dec00204 	addi	sp,sp,8
 4012e4c:	f800283a 	ret

04012e50 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4012e50:	defffa04 	addi	sp,sp,-24
 4012e54:	dfc00515 	stw	ra,20(sp)
 4012e58:	df000415 	stw	fp,16(sp)
 4012e5c:	df000404 	addi	fp,sp,16
 4012e60:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4012e64:	008000c4 	movi	r2,3
 4012e68:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
 4012e6c:	e0fffc17 	ldw	r3,-16(fp)
 4012e70:	008003f4 	movhi	r2,15
 4012e74:	10909004 	addi	r2,r2,16960
 4012e78:	188b383a 	mul	r5,r3,r2
 4012e7c:	01017db4 	movhi	r4,1526
 4012e80:	21384004 	addi	r4,r4,-7936
 4012e84:	40083e40 	call	40083e4 <__udivsi3>
 4012e88:	100b883a 	mov	r5,r2
 4012e8c:	01200034 	movhi	r4,32768
 4012e90:	213fffc4 	addi	r4,r4,-1
 4012e94:	40083e40 	call	40083e4 <__udivsi3>
 4012e98:	100b883a 	mov	r5,r2
 4012e9c:	e13fff17 	ldw	r4,-4(fp)
 4012ea0:	40083e40 	call	40083e4 <__udivsi3>
 4012ea4:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4012ea8:	e0bffd17 	ldw	r2,-12(fp)
 4012eac:	1005003a 	cmpeq	r2,r2,zero
 4012eb0:	1000281e 	bne	r2,zero,4012f54 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
 4012eb4:	e03ffe15 	stw	zero,-8(fp)
 4012eb8:	00001606 	br	4012f14 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4012ebc:	00a00034 	movhi	r2,32768
 4012ec0:	10bfffc4 	addi	r2,r2,-1
 4012ec4:	10bfffc4 	addi	r2,r2,-1
 4012ec8:	103ffe1e 	bne	r2,zero,4012ec4 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4012ecc:	e0fffc17 	ldw	r3,-16(fp)
 4012ed0:	008003f4 	movhi	r2,15
 4012ed4:	10909004 	addi	r2,r2,16960
 4012ed8:	188b383a 	mul	r5,r3,r2
 4012edc:	01017db4 	movhi	r4,1526
 4012ee0:	21384004 	addi	r4,r4,-7936
 4012ee4:	40083e40 	call	40083e4 <__udivsi3>
 4012ee8:	100b883a 	mov	r5,r2
 4012eec:	01200034 	movhi	r4,32768
 4012ef0:	213fffc4 	addi	r4,r4,-1
 4012ef4:	40083e40 	call	40083e4 <__udivsi3>
 4012ef8:	1007883a 	mov	r3,r2
 4012efc:	e0bfff17 	ldw	r2,-4(fp)
 4012f00:	10c5c83a 	sub	r2,r2,r3
 4012f04:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4012f08:	e0bffe17 	ldw	r2,-8(fp)
 4012f0c:	10800044 	addi	r2,r2,1
 4012f10:	e0bffe15 	stw	r2,-8(fp)
 4012f14:	e0fffe17 	ldw	r3,-8(fp)
 4012f18:	e0bffd17 	ldw	r2,-12(fp)
 4012f1c:	18bfe716 	blt	r3,r2,4012ebc <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4012f20:	e0fffc17 	ldw	r3,-16(fp)
 4012f24:	008003f4 	movhi	r2,15
 4012f28:	10909004 	addi	r2,r2,16960
 4012f2c:	188b383a 	mul	r5,r3,r2
 4012f30:	01017db4 	movhi	r4,1526
 4012f34:	21384004 	addi	r4,r4,-7936
 4012f38:	40083e40 	call	40083e4 <__udivsi3>
 4012f3c:	1007883a 	mov	r3,r2
 4012f40:	e0bfff17 	ldw	r2,-4(fp)
 4012f44:	1885383a 	mul	r2,r3,r2
 4012f48:	10bfffc4 	addi	r2,r2,-1
 4012f4c:	103ffe1e 	bne	r2,zero,4012f48 <alt_busy_sleep+0xf8>
 4012f50:	00000c06 	br	4012f84 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4012f54:	e0fffc17 	ldw	r3,-16(fp)
 4012f58:	008003f4 	movhi	r2,15
 4012f5c:	10909004 	addi	r2,r2,16960
 4012f60:	188b383a 	mul	r5,r3,r2
 4012f64:	01017db4 	movhi	r4,1526
 4012f68:	21384004 	addi	r4,r4,-7936
 4012f6c:	40083e40 	call	40083e4 <__udivsi3>
 4012f70:	1007883a 	mov	r3,r2
 4012f74:	e0bfff17 	ldw	r2,-4(fp)
 4012f78:	1885383a 	mul	r2,r3,r2
 4012f7c:	10bfffc4 	addi	r2,r2,-1
 4012f80:	00bffe16 	blt	zero,r2,4012f7c <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4012f84:	0005883a 	mov	r2,zero
}
 4012f88:	e037883a 	mov	sp,fp
 4012f8c:	dfc00117 	ldw	ra,4(sp)
 4012f90:	df000017 	ldw	fp,0(sp)
 4012f94:	dec00204 	addi	sp,sp,8
 4012f98:	f800283a 	ret

04012f9c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4012f9c:	defffe04 	addi	sp,sp,-8
 4012fa0:	df000115 	stw	fp,4(sp)
 4012fa4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4012fa8:	e03fff15 	stw	zero,-4(fp)
 4012fac:	00000506 	br	4012fc4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4012fb0:	e0bfff17 	ldw	r2,-4(fp)
 4012fb4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4012fb8:	e0bfff17 	ldw	r2,-4(fp)
 4012fbc:	10800804 	addi	r2,r2,32
 4012fc0:	e0bfff15 	stw	r2,-4(fp)
 4012fc4:	e0bfff17 	ldw	r2,-4(fp)
 4012fc8:	10820030 	cmpltui	r2,r2,2048
 4012fcc:	103ff81e 	bne	r2,zero,4012fb0 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4012fd0:	e037883a 	mov	sp,fp
 4012fd4:	df000017 	ldw	fp,0(sp)
 4012fd8:	dec00104 	addi	sp,sp,4
 4012fdc:	f800283a 	ret

04012fe0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4012fe0:	defff904 	addi	sp,sp,-28
 4012fe4:	dfc00615 	stw	ra,24(sp)
 4012fe8:	df000515 	stw	fp,20(sp)
 4012fec:	df000504 	addi	fp,sp,20
 4012ff0:	e13ffd15 	stw	r4,-12(fp)
 4012ff4:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4012ff8:	e0bffd17 	ldw	r2,-12(fp)
 4012ffc:	1005003a 	cmpeq	r2,r2,zero
 4013000:	1000041e 	bne	r2,zero,4013014 <alt_dev_llist_insert+0x34>
 4013004:	e0bffd17 	ldw	r2,-12(fp)
 4013008:	10800217 	ldw	r2,8(r2)
 401300c:	1004c03a 	cmpne	r2,r2,zero
 4013010:	1000071e 	bne	r2,zero,4013030 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 4013014:	40130940 	call	4013094 <alt_get_errno>
 4013018:	1007883a 	mov	r3,r2
 401301c:	00800584 	movi	r2,22
 4013020:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4013024:	00bffa84 	movi	r2,-22
 4013028:	e0bfff15 	stw	r2,-4(fp)
 401302c:	00001306 	br	401307c <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4013030:	e0fffd17 	ldw	r3,-12(fp)
 4013034:	e0bffe17 	ldw	r2,-8(fp)
 4013038:	e0bffb15 	stw	r2,-20(fp)
 401303c:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4013040:	e0fffc17 	ldw	r3,-16(fp)
 4013044:	e0bffb17 	ldw	r2,-20(fp)
 4013048:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 401304c:	e0bffb17 	ldw	r2,-20(fp)
 4013050:	10c00017 	ldw	r3,0(r2)
 4013054:	e0bffc17 	ldw	r2,-16(fp)
 4013058:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401305c:	e0bffb17 	ldw	r2,-20(fp)
 4013060:	10c00017 	ldw	r3,0(r2)
 4013064:	e0bffc17 	ldw	r2,-16(fp)
 4013068:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 401306c:	e0fffb17 	ldw	r3,-20(fp)
 4013070:	e0bffc17 	ldw	r2,-16(fp)
 4013074:	18800015 	stw	r2,0(r3)

  return 0;  
 4013078:	e03fff15 	stw	zero,-4(fp)
 401307c:	e0bfff17 	ldw	r2,-4(fp)
}
 4013080:	e037883a 	mov	sp,fp
 4013084:	dfc00117 	ldw	ra,4(sp)
 4013088:	df000017 	ldw	fp,0(sp)
 401308c:	dec00204 	addi	sp,sp,8
 4013090:	f800283a 	ret

04013094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4013094:	defffd04 	addi	sp,sp,-12
 4013098:	dfc00215 	stw	ra,8(sp)
 401309c:	df000115 	stw	fp,4(sp)
 40130a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 40130a4:	008100f4 	movhi	r2,1027
 40130a8:	1085a404 	addi	r2,r2,5776
 40130ac:	10800017 	ldw	r2,0(r2)
 40130b0:	1005003a 	cmpeq	r2,r2,zero
 40130b4:	1000061e 	bne	r2,zero,40130d0 <alt_get_errno+0x3c>
 40130b8:	008100f4 	movhi	r2,1027
 40130bc:	1085a404 	addi	r2,r2,5776
 40130c0:	10800017 	ldw	r2,0(r2)
 40130c4:	103ee83a 	callr	r2
 40130c8:	e0bfff15 	stw	r2,-4(fp)
 40130cc:	00000306 	br	40130dc <alt_get_errno+0x48>
 40130d0:	008100f4 	movhi	r2,1027
 40130d4:	10933204 	addi	r2,r2,19656
 40130d8:	e0bfff15 	stw	r2,-4(fp)
 40130dc:	e0bfff17 	ldw	r2,-4(fp)
}
 40130e0:	e037883a 	mov	sp,fp
 40130e4:	dfc00117 	ldw	ra,4(sp)
 40130e8:	df000017 	ldw	fp,0(sp)
 40130ec:	dec00204 	addi	sp,sp,8
 40130f0:	f800283a 	ret

040130f4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 40130f4:	defffd04 	addi	sp,sp,-12
 40130f8:	dfc00215 	stw	ra,8(sp)
 40130fc:	df000115 	stw	fp,4(sp)
 4013100:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4013104:	00bfff04 	movi	r2,-4
 4013108:	00c10074 	movhi	r3,1025
 401310c:	18cf4504 	addi	r3,r3,15636
 4013110:	1885883a 	add	r2,r3,r2
 4013114:	e0bfff15 	stw	r2,-4(fp)
 4013118:	00000606 	br	4013134 <_do_ctors+0x40>
        (*ctor) (); 
 401311c:	e0bfff17 	ldw	r2,-4(fp)
 4013120:	10800017 	ldw	r2,0(r2)
 4013124:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4013128:	e0bfff17 	ldw	r2,-4(fp)
 401312c:	10bfff04 	addi	r2,r2,-4
 4013130:	e0bfff15 	stw	r2,-4(fp)
 4013134:	e0ffff17 	ldw	r3,-4(fp)
 4013138:	00810074 	movhi	r2,1025
 401313c:	108f4404 	addi	r2,r2,15632
 4013140:	18bff62e 	bgeu	r3,r2,401311c <_do_ctors+0x28>
        (*ctor) (); 
}
 4013144:	e037883a 	mov	sp,fp
 4013148:	dfc00117 	ldw	ra,4(sp)
 401314c:	df000017 	ldw	fp,0(sp)
 4013150:	dec00204 	addi	sp,sp,8
 4013154:	f800283a 	ret

04013158 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4013158:	defffd04 	addi	sp,sp,-12
 401315c:	dfc00215 	stw	ra,8(sp)
 4013160:	df000115 	stw	fp,4(sp)
 4013164:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4013168:	00bfff04 	movi	r2,-4
 401316c:	00c10074 	movhi	r3,1025
 4013170:	18cf4504 	addi	r3,r3,15636
 4013174:	1885883a 	add	r2,r3,r2
 4013178:	e0bfff15 	stw	r2,-4(fp)
 401317c:	00000606 	br	4013198 <_do_dtors+0x40>
        (*dtor) (); 
 4013180:	e0bfff17 	ldw	r2,-4(fp)
 4013184:	10800017 	ldw	r2,0(r2)
 4013188:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401318c:	e0bfff17 	ldw	r2,-4(fp)
 4013190:	10bfff04 	addi	r2,r2,-4
 4013194:	e0bfff15 	stw	r2,-4(fp)
 4013198:	e0ffff17 	ldw	r3,-4(fp)
 401319c:	00810074 	movhi	r2,1025
 40131a0:	108f4504 	addi	r2,r2,15636
 40131a4:	18bff62e 	bgeu	r3,r2,4013180 <_do_dtors+0x28>
        (*dtor) (); 
}
 40131a8:	e037883a 	mov	sp,fp
 40131ac:	dfc00117 	ldw	ra,4(sp)
 40131b0:	df000017 	ldw	fp,0(sp)
 40131b4:	dec00204 	addi	sp,sp,8
 40131b8:	f800283a 	ret

040131bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40131bc:	defffe04 	addi	sp,sp,-8
 40131c0:	dfc00115 	stw	ra,4(sp)
 40131c4:	df000015 	stw	fp,0(sp)
 40131c8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 40131cc:	0009883a 	mov	r4,zero
 40131d0:	01440004 	movi	r5,4096
 40131d4:	40138780 	call	4013878 <alt_icache_flush>
#endif
}
 40131d8:	e037883a 	mov	sp,fp
 40131dc:	dfc00117 	ldw	ra,4(sp)
 40131e0:	df000017 	ldw	fp,0(sp)
 40131e4:	dec00204 	addi	sp,sp,8
 40131e8:	f800283a 	ret

040131ec <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 40131ec:	defff904 	addi	sp,sp,-28
 40131f0:	dfc00615 	stw	ra,24(sp)
 40131f4:	df000515 	stw	fp,20(sp)
 40131f8:	df000504 	addi	fp,sp,20
 40131fc:	e13ffc15 	stw	r4,-16(fp)
 4013200:	e17ffd15 	stw	r5,-12(fp)
 4013204:	e1bffe15 	stw	r6,-8(fp)
 4013208:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 401320c:	e13ffd17 	ldw	r4,-12(fp)
 4013210:	e17ffe17 	ldw	r5,-8(fp)
 4013214:	e1bfff17 	ldw	r6,-4(fp)
 4013218:	40134040 	call	4013404 <open>
 401321c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4013220:	e0bffb17 	ldw	r2,-20(fp)
 4013224:	1004803a 	cmplt	r2,r2,zero
 4013228:	10001c1e 	bne	r2,zero,401329c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 401322c:	e0bffb17 	ldw	r2,-20(fp)
 4013230:	00c100f4 	movhi	r3,1027
 4013234:	18c11e04 	addi	r3,r3,1144
 4013238:	10800324 	muli	r2,r2,12
 401323c:	10c5883a 	add	r2,r2,r3
 4013240:	10c00017 	ldw	r3,0(r2)
 4013244:	e0bffc17 	ldw	r2,-16(fp)
 4013248:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401324c:	e0bffb17 	ldw	r2,-20(fp)
 4013250:	00c100f4 	movhi	r3,1027
 4013254:	18c11e04 	addi	r3,r3,1144
 4013258:	10800324 	muli	r2,r2,12
 401325c:	10c5883a 	add	r2,r2,r3
 4013260:	10800104 	addi	r2,r2,4
 4013264:	10c00017 	ldw	r3,0(r2)
 4013268:	e0bffc17 	ldw	r2,-16(fp)
 401326c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4013270:	e0bffb17 	ldw	r2,-20(fp)
 4013274:	00c100f4 	movhi	r3,1027
 4013278:	18c11e04 	addi	r3,r3,1144
 401327c:	10800324 	muli	r2,r2,12
 4013280:	10c5883a 	add	r2,r2,r3
 4013284:	10800204 	addi	r2,r2,8
 4013288:	10c00017 	ldw	r3,0(r2)
 401328c:	e0bffc17 	ldw	r2,-16(fp)
 4013290:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4013294:	e13ffb17 	ldw	r4,-20(fp)
 4013298:	4011b340 	call	4011b34 <alt_release_fd>
  }
} 
 401329c:	e037883a 	mov	sp,fp
 40132a0:	dfc00117 	ldw	ra,4(sp)
 40132a4:	df000017 	ldw	fp,0(sp)
 40132a8:	dec00204 	addi	sp,sp,8
 40132ac:	f800283a 	ret

040132b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40132b0:	defffb04 	addi	sp,sp,-20
 40132b4:	dfc00415 	stw	ra,16(sp)
 40132b8:	df000315 	stw	fp,12(sp)
 40132bc:	df000304 	addi	fp,sp,12
 40132c0:	e13ffd15 	stw	r4,-12(fp)
 40132c4:	e17ffe15 	stw	r5,-8(fp)
 40132c8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40132cc:	010100f4 	movhi	r4,1027
 40132d0:	21012104 	addi	r4,r4,1156
 40132d4:	e17ffd17 	ldw	r5,-12(fp)
 40132d8:	01800044 	movi	r6,1
 40132dc:	01c07fc4 	movi	r7,511
 40132e0:	40131ec0 	call	40131ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40132e4:	010100f4 	movhi	r4,1027
 40132e8:	21011e04 	addi	r4,r4,1144
 40132ec:	e17ffe17 	ldw	r5,-8(fp)
 40132f0:	000d883a 	mov	r6,zero
 40132f4:	01c07fc4 	movi	r7,511
 40132f8:	40131ec0 	call	40131ec <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40132fc:	010100f4 	movhi	r4,1027
 4013300:	21012404 	addi	r4,r4,1168
 4013304:	e17fff17 	ldw	r5,-4(fp)
 4013308:	01800044 	movi	r6,1
 401330c:	01c07fc4 	movi	r7,511
 4013310:	40131ec0 	call	40131ec <alt_open_fd>
}  
 4013314:	e037883a 	mov	sp,fp
 4013318:	dfc00117 	ldw	ra,4(sp)
 401331c:	df000017 	ldw	fp,0(sp)
 4013320:	dec00204 	addi	sp,sp,8
 4013324:	f800283a 	ret

04013328 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4013328:	defffc04 	addi	sp,sp,-16
 401332c:	df000315 	stw	fp,12(sp)
 4013330:	df000304 	addi	fp,sp,12
 4013334:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4013338:	e0bffe17 	ldw	r2,-8(fp)
 401333c:	10800217 	ldw	r2,8(r2)
 4013340:	10d00034 	orhi	r3,r2,16384
 4013344:	e0bffe17 	ldw	r2,-8(fp)
 4013348:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401334c:	e03ffd15 	stw	zero,-12(fp)
 4013350:	00002006 	br	40133d4 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4013354:	e0bffd17 	ldw	r2,-12(fp)
 4013358:	00c100f4 	movhi	r3,1027
 401335c:	18c11e04 	addi	r3,r3,1144
 4013360:	10800324 	muli	r2,r2,12
 4013364:	10c5883a 	add	r2,r2,r3
 4013368:	10c00017 	ldw	r3,0(r2)
 401336c:	e0bffe17 	ldw	r2,-8(fp)
 4013370:	10800017 	ldw	r2,0(r2)
 4013374:	1880141e 	bne	r3,r2,40133c8 <alt_file_locked+0xa0>
 4013378:	e0bffd17 	ldw	r2,-12(fp)
 401337c:	00c100f4 	movhi	r3,1027
 4013380:	18c11e04 	addi	r3,r3,1144
 4013384:	10800324 	muli	r2,r2,12
 4013388:	10c5883a 	add	r2,r2,r3
 401338c:	10800204 	addi	r2,r2,8
 4013390:	10800017 	ldw	r2,0(r2)
 4013394:	1004403a 	cmpge	r2,r2,zero
 4013398:	10000b1e 	bne	r2,zero,40133c8 <alt_file_locked+0xa0>
 401339c:	e0bffd17 	ldw	r2,-12(fp)
 40133a0:	10800324 	muli	r2,r2,12
 40133a4:	1007883a 	mov	r3,r2
 40133a8:	008100f4 	movhi	r2,1027
 40133ac:	10811e04 	addi	r2,r2,1144
 40133b0:	1887883a 	add	r3,r3,r2
 40133b4:	e0bffe17 	ldw	r2,-8(fp)
 40133b8:	18800326 	beq	r3,r2,40133c8 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40133bc:	00bffcc4 	movi	r2,-13
 40133c0:	e0bfff15 	stw	r2,-4(fp)
 40133c4:	00000a06 	br	40133f0 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40133c8:	e0bffd17 	ldw	r2,-12(fp)
 40133cc:	10800044 	addi	r2,r2,1
 40133d0:	e0bffd15 	stw	r2,-12(fp)
 40133d4:	008100f4 	movhi	r2,1027
 40133d8:	1085a304 	addi	r2,r2,5772
 40133dc:	10800017 	ldw	r2,0(r2)
 40133e0:	1007883a 	mov	r3,r2
 40133e4:	e0bffd17 	ldw	r2,-12(fp)
 40133e8:	18bfda2e 	bgeu	r3,r2,4013354 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40133ec:	e03fff15 	stw	zero,-4(fp)
 40133f0:	e0bfff17 	ldw	r2,-4(fp)
}
 40133f4:	e037883a 	mov	sp,fp
 40133f8:	df000017 	ldw	fp,0(sp)
 40133fc:	dec00104 	addi	sp,sp,4
 4013400:	f800283a 	ret

04013404 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4013404:	defff404 	addi	sp,sp,-48
 4013408:	dfc00b15 	stw	ra,44(sp)
 401340c:	df000a15 	stw	fp,40(sp)
 4013410:	df000a04 	addi	fp,sp,40
 4013414:	e13ffb15 	stw	r4,-20(fp)
 4013418:	e17ffc15 	stw	r5,-16(fp)
 401341c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4013420:	00bfffc4 	movi	r2,-1
 4013424:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 4013428:	00bffb44 	movi	r2,-19
 401342c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 4013430:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4013434:	e13ffb17 	ldw	r4,-20(fp)
 4013438:	014100f4 	movhi	r5,1027
 401343c:	2945a104 	addi	r5,r5,5764
 4013440:	401360c0 	call	401360c <alt_find_dev>
 4013444:	e0bffa15 	stw	r2,-24(fp)
 4013448:	e0bffa17 	ldw	r2,-24(fp)
 401344c:	1004c03a 	cmpne	r2,r2,zero
 4013450:	1000051e 	bne	r2,zero,4013468 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4013454:	e13ffb17 	ldw	r4,-20(fp)
 4013458:	40136a00 	call	40136a0 <alt_find_file>
 401345c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 4013460:	00800044 	movi	r2,1
 4013464:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4013468:	e0bffa17 	ldw	r2,-24(fp)
 401346c:	1005003a 	cmpeq	r2,r2,zero
 4013470:	1000301e 	bne	r2,zero,4013534 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4013474:	e13ffa17 	ldw	r4,-24(fp)
 4013478:	40137c00 	call	40137c0 <alt_get_fd>
 401347c:	e0bff815 	stw	r2,-32(fp)
 4013480:	e0bff817 	ldw	r2,-32(fp)
 4013484:	1004403a 	cmpge	r2,r2,zero
 4013488:	1000031e 	bne	r2,zero,4013498 <open+0x94>
    {
      status = index;
 401348c:	e0bff817 	ldw	r2,-32(fp)
 4013490:	e0bff715 	stw	r2,-36(fp)
 4013494:	00002906 	br	401353c <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 4013498:	e0bff817 	ldw	r2,-32(fp)
 401349c:	10800324 	muli	r2,r2,12
 40134a0:	1007883a 	mov	r3,r2
 40134a4:	008100f4 	movhi	r2,1027
 40134a8:	10811e04 	addi	r2,r2,1144
 40134ac:	1885883a 	add	r2,r3,r2
 40134b0:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40134b4:	e0fffc17 	ldw	r3,-16(fp)
 40134b8:	00900034 	movhi	r2,16384
 40134bc:	10bfffc4 	addi	r2,r2,-1
 40134c0:	1886703a 	and	r3,r3,r2
 40134c4:	e0bff917 	ldw	r2,-28(fp)
 40134c8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40134cc:	e0bff617 	ldw	r2,-40(fp)
 40134d0:	1004c03a 	cmpne	r2,r2,zero
 40134d4:	1000061e 	bne	r2,zero,40134f0 <open+0xec>
 40134d8:	e13ff917 	ldw	r4,-28(fp)
 40134dc:	40133280 	call	4013328 <alt_file_locked>
 40134e0:	e0bff715 	stw	r2,-36(fp)
 40134e4:	e0bff717 	ldw	r2,-36(fp)
 40134e8:	1004803a 	cmplt	r2,r2,zero
 40134ec:	1000131e 	bne	r2,zero,401353c <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40134f0:	e0bffa17 	ldw	r2,-24(fp)
 40134f4:	10800317 	ldw	r2,12(r2)
 40134f8:	1005003a 	cmpeq	r2,r2,zero
 40134fc:	1000091e 	bne	r2,zero,4013524 <open+0x120>
 4013500:	e0bffa17 	ldw	r2,-24(fp)
 4013504:	10800317 	ldw	r2,12(r2)
 4013508:	e13ff917 	ldw	r4,-28(fp)
 401350c:	e17ffb17 	ldw	r5,-20(fp)
 4013510:	e1bffc17 	ldw	r6,-16(fp)
 4013514:	e1fffd17 	ldw	r7,-12(fp)
 4013518:	103ee83a 	callr	r2
 401351c:	e0bfff15 	stw	r2,-4(fp)
 4013520:	00000106 	br	4013528 <open+0x124>
 4013524:	e03fff15 	stw	zero,-4(fp)
 4013528:	e0bfff17 	ldw	r2,-4(fp)
 401352c:	e0bff715 	stw	r2,-36(fp)
 4013530:	00000206 	br	401353c <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4013534:	00bffb44 	movi	r2,-19
 4013538:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401353c:	e0bff717 	ldw	r2,-36(fp)
 4013540:	1004403a 	cmpge	r2,r2,zero
 4013544:	1000091e 	bne	r2,zero,401356c <open+0x168>
  {
    alt_release_fd (index);  
 4013548:	e13ff817 	ldw	r4,-32(fp)
 401354c:	4011b340 	call	4011b34 <alt_release_fd>
    ALT_ERRNO = -status;
 4013550:	401358c0 	call	401358c <alt_get_errno>
 4013554:	e0fff717 	ldw	r3,-36(fp)
 4013558:	00c7c83a 	sub	r3,zero,r3
 401355c:	10c00015 	stw	r3,0(r2)
    return -1;
 4013560:	00bfffc4 	movi	r2,-1
 4013564:	e0bffe15 	stw	r2,-8(fp)
 4013568:	00000206 	br	4013574 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 401356c:	e0bff817 	ldw	r2,-32(fp)
 4013570:	e0bffe15 	stw	r2,-8(fp)
 4013574:	e0bffe17 	ldw	r2,-8(fp)
}
 4013578:	e037883a 	mov	sp,fp
 401357c:	dfc00117 	ldw	ra,4(sp)
 4013580:	df000017 	ldw	fp,0(sp)
 4013584:	dec00204 	addi	sp,sp,8
 4013588:	f800283a 	ret

0401358c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401358c:	defffd04 	addi	sp,sp,-12
 4013590:	dfc00215 	stw	ra,8(sp)
 4013594:	df000115 	stw	fp,4(sp)
 4013598:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 401359c:	008100f4 	movhi	r2,1027
 40135a0:	1085a404 	addi	r2,r2,5776
 40135a4:	10800017 	ldw	r2,0(r2)
 40135a8:	1005003a 	cmpeq	r2,r2,zero
 40135ac:	1000061e 	bne	r2,zero,40135c8 <alt_get_errno+0x3c>
 40135b0:	008100f4 	movhi	r2,1027
 40135b4:	1085a404 	addi	r2,r2,5776
 40135b8:	10800017 	ldw	r2,0(r2)
 40135bc:	103ee83a 	callr	r2
 40135c0:	e0bfff15 	stw	r2,-4(fp)
 40135c4:	00000306 	br	40135d4 <alt_get_errno+0x48>
 40135c8:	008100f4 	movhi	r2,1027
 40135cc:	10933204 	addi	r2,r2,19656
 40135d0:	e0bfff15 	stw	r2,-4(fp)
 40135d4:	e0bfff17 	ldw	r2,-4(fp)
}
 40135d8:	e037883a 	mov	sp,fp
 40135dc:	dfc00117 	ldw	ra,4(sp)
 40135e0:	df000017 	ldw	fp,0(sp)
 40135e4:	dec00204 	addi	sp,sp,8
 40135e8:	f800283a 	ret

040135ec <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 40135ec:	deffff04 	addi	sp,sp,-4
 40135f0:	df000015 	stw	fp,0(sp)
 40135f4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40135f8:	000170fa 	wrctl	ienable,zero
}
 40135fc:	e037883a 	mov	sp,fp
 4013600:	df000017 	ldw	fp,0(sp)
 4013604:	dec00104 	addi	sp,sp,4
 4013608:	f800283a 	ret

0401360c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401360c:	defff904 	addi	sp,sp,-28
 4013610:	dfc00615 	stw	ra,24(sp)
 4013614:	df000515 	stw	fp,20(sp)
 4013618:	df000504 	addi	fp,sp,20
 401361c:	e13ffd15 	stw	r4,-12(fp)
 4013620:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4013624:	e0bffe17 	ldw	r2,-8(fp)
 4013628:	10800017 	ldw	r2,0(r2)
 401362c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4013630:	e13ffd17 	ldw	r4,-12(fp)
 4013634:	40095cc0 	call	40095cc <strlen>
 4013638:	10800044 	addi	r2,r2,1
 401363c:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4013640:	00000d06 	br	4013678 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4013644:	e0bffc17 	ldw	r2,-16(fp)
 4013648:	11000217 	ldw	r4,8(r2)
 401364c:	e1bffb17 	ldw	r6,-20(fp)
 4013650:	e17ffd17 	ldw	r5,-12(fp)
 4013654:	40139540 	call	4013954 <memcmp>
 4013658:	1004c03a 	cmpne	r2,r2,zero
 401365c:	1000031e 	bne	r2,zero,401366c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4013660:	e0bffc17 	ldw	r2,-16(fp)
 4013664:	e0bfff15 	stw	r2,-4(fp)
 4013668:	00000706 	br	4013688 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401366c:	e0bffc17 	ldw	r2,-16(fp)
 4013670:	10800017 	ldw	r2,0(r2)
 4013674:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4013678:	e0fffe17 	ldw	r3,-8(fp)
 401367c:	e0bffc17 	ldw	r2,-16(fp)
 4013680:	10fff01e 	bne	r2,r3,4013644 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4013684:	e03fff15 	stw	zero,-4(fp)
 4013688:	e0bfff17 	ldw	r2,-4(fp)
}
 401368c:	e037883a 	mov	sp,fp
 4013690:	dfc00117 	ldw	ra,4(sp)
 4013694:	df000017 	ldw	fp,0(sp)
 4013698:	dec00204 	addi	sp,sp,8
 401369c:	f800283a 	ret

040136a0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40136a0:	defffa04 	addi	sp,sp,-24
 40136a4:	dfc00515 	stw	ra,20(sp)
 40136a8:	df000415 	stw	fp,16(sp)
 40136ac:	df000404 	addi	fp,sp,16
 40136b0:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40136b4:	008100f4 	movhi	r2,1027
 40136b8:	10859f04 	addi	r2,r2,5756
 40136bc:	10800017 	ldw	r2,0(r2)
 40136c0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40136c4:	00003306 	br	4013794 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 40136c8:	e0bffd17 	ldw	r2,-12(fp)
 40136cc:	11000217 	ldw	r4,8(r2)
 40136d0:	40095cc0 	call	40095cc <strlen>
 40136d4:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 40136d8:	e0bffd17 	ldw	r2,-12(fp)
 40136dc:	10c00217 	ldw	r3,8(r2)
 40136e0:	e0bffc17 	ldw	r2,-16(fp)
 40136e4:	1885883a 	add	r2,r3,r2
 40136e8:	10bfffc4 	addi	r2,r2,-1
 40136ec:	10800003 	ldbu	r2,0(r2)
 40136f0:	10803fcc 	andi	r2,r2,255
 40136f4:	1080201c 	xori	r2,r2,128
 40136f8:	10bfe004 	addi	r2,r2,-128
 40136fc:	10800bd8 	cmpnei	r2,r2,47
 4013700:	1000031e 	bne	r2,zero,4013710 <alt_find_file+0x70>
    {
      len -= 1;
 4013704:	e0bffc17 	ldw	r2,-16(fp)
 4013708:	10bfffc4 	addi	r2,r2,-1
 401370c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4013710:	e0bffc17 	ldw	r2,-16(fp)
 4013714:	1007883a 	mov	r3,r2
 4013718:	e0bffe17 	ldw	r2,-8(fp)
 401371c:	1885883a 	add	r2,r3,r2
 4013720:	10800003 	ldbu	r2,0(r2)
 4013724:	10803fcc 	andi	r2,r2,255
 4013728:	1080201c 	xori	r2,r2,128
 401372c:	10bfe004 	addi	r2,r2,-128
 4013730:	10800be0 	cmpeqi	r2,r2,47
 4013734:	10000a1e 	bne	r2,zero,4013760 <alt_find_file+0xc0>
 4013738:	e0bffc17 	ldw	r2,-16(fp)
 401373c:	1007883a 	mov	r3,r2
 4013740:	e0bffe17 	ldw	r2,-8(fp)
 4013744:	1885883a 	add	r2,r3,r2
 4013748:	10800003 	ldbu	r2,0(r2)
 401374c:	10803fcc 	andi	r2,r2,255
 4013750:	1080201c 	xori	r2,r2,128
 4013754:	10bfe004 	addi	r2,r2,-128
 4013758:	1004c03a 	cmpne	r2,r2,zero
 401375c:	10000a1e 	bne	r2,zero,4013788 <alt_find_file+0xe8>
 4013760:	e0bffd17 	ldw	r2,-12(fp)
 4013764:	11000217 	ldw	r4,8(r2)
 4013768:	e1bffc17 	ldw	r6,-16(fp)
 401376c:	e17ffe17 	ldw	r5,-8(fp)
 4013770:	40139540 	call	4013954 <memcmp>
 4013774:	1004c03a 	cmpne	r2,r2,zero
 4013778:	1000031e 	bne	r2,zero,4013788 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401377c:	e0bffd17 	ldw	r2,-12(fp)
 4013780:	e0bfff15 	stw	r2,-4(fp)
 4013784:	00000806 	br	40137a8 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 4013788:	e0bffd17 	ldw	r2,-12(fp)
 401378c:	10800017 	ldw	r2,0(r2)
 4013790:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4013794:	00c100f4 	movhi	r3,1027
 4013798:	18c59f04 	addi	r3,r3,5756
 401379c:	e0bffd17 	ldw	r2,-12(fp)
 40137a0:	10ffc91e 	bne	r2,r3,40136c8 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40137a4:	e03fff15 	stw	zero,-4(fp)
 40137a8:	e0bfff17 	ldw	r2,-4(fp)
}
 40137ac:	e037883a 	mov	sp,fp
 40137b0:	dfc00117 	ldw	ra,4(sp)
 40137b4:	df000017 	ldw	fp,0(sp)
 40137b8:	dec00204 	addi	sp,sp,8
 40137bc:	f800283a 	ret

040137c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40137c0:	defffc04 	addi	sp,sp,-16
 40137c4:	df000315 	stw	fp,12(sp)
 40137c8:	df000304 	addi	fp,sp,12
 40137cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40137d0:	00bffa04 	movi	r2,-24
 40137d4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40137d8:	e03ffe15 	stw	zero,-8(fp)
 40137dc:	00001e06 	br	4013858 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 40137e0:	e0bffe17 	ldw	r2,-8(fp)
 40137e4:	00c100f4 	movhi	r3,1027
 40137e8:	18c11e04 	addi	r3,r3,1144
 40137ec:	10800324 	muli	r2,r2,12
 40137f0:	10c5883a 	add	r2,r2,r3
 40137f4:	10800017 	ldw	r2,0(r2)
 40137f8:	1004c03a 	cmpne	r2,r2,zero
 40137fc:	1000131e 	bne	r2,zero,401384c <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 4013800:	e0bffe17 	ldw	r2,-8(fp)
 4013804:	00c100f4 	movhi	r3,1027
 4013808:	18c11e04 	addi	r3,r3,1144
 401380c:	10800324 	muli	r2,r2,12
 4013810:	10c7883a 	add	r3,r2,r3
 4013814:	e0bfff17 	ldw	r2,-4(fp)
 4013818:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 401381c:	008100f4 	movhi	r2,1027
 4013820:	1085a304 	addi	r2,r2,5772
 4013824:	10c00017 	ldw	r3,0(r2)
 4013828:	e0bffe17 	ldw	r2,-8(fp)
 401382c:	1880040e 	bge	r3,r2,4013840 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 4013830:	00c100f4 	movhi	r3,1027
 4013834:	18c5a304 	addi	r3,r3,5772
 4013838:	e0bffe17 	ldw	r2,-8(fp)
 401383c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 4013840:	e0bffe17 	ldw	r2,-8(fp)
 4013844:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4013848:	00000606 	br	4013864 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401384c:	e0bffe17 	ldw	r2,-8(fp)
 4013850:	10800044 	addi	r2,r2,1
 4013854:	e0bffe15 	stw	r2,-8(fp)
 4013858:	e0bffe17 	ldw	r2,-8(fp)
 401385c:	10800810 	cmplti	r2,r2,32
 4013860:	103fdf1e 	bne	r2,zero,40137e0 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4013864:	e0bffd17 	ldw	r2,-12(fp)
}
 4013868:	e037883a 	mov	sp,fp
 401386c:	df000017 	ldw	fp,0(sp)
 4013870:	dec00104 	addi	sp,sp,4
 4013874:	f800283a 	ret

04013878 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4013878:	defffb04 	addi	sp,sp,-20
 401387c:	df000415 	stw	fp,16(sp)
 4013880:	df000404 	addi	fp,sp,16
 4013884:	e13ffe15 	stw	r4,-8(fp)
 4013888:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 401388c:	e0bfff17 	ldw	r2,-4(fp)
 4013890:	10840070 	cmpltui	r2,r2,4097
 4013894:	1000021e 	bne	r2,zero,40138a0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4013898:	00840004 	movi	r2,4096
 401389c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 40138a0:	e0fffe17 	ldw	r3,-8(fp)
 40138a4:	e0bfff17 	ldw	r2,-4(fp)
 40138a8:	1885883a 	add	r2,r3,r2
 40138ac:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40138b0:	e0bffe17 	ldw	r2,-8(fp)
 40138b4:	e0bffd15 	stw	r2,-12(fp)
 40138b8:	00000506 	br	40138d0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 40138bc:	e0bffd17 	ldw	r2,-12(fp)
 40138c0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40138c4:	e0bffd17 	ldw	r2,-12(fp)
 40138c8:	10800804 	addi	r2,r2,32
 40138cc:	e0bffd15 	stw	r2,-12(fp)
 40138d0:	e0fffd17 	ldw	r3,-12(fp)
 40138d4:	e0bffc17 	ldw	r2,-16(fp)
 40138d8:	18bff836 	bltu	r3,r2,40138bc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40138dc:	e0bffe17 	ldw	r2,-8(fp)
 40138e0:	108007cc 	andi	r2,r2,31
 40138e4:	1005003a 	cmpeq	r2,r2,zero
 40138e8:	1000021e 	bne	r2,zero,40138f4 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40138ec:	e0bffd17 	ldw	r2,-12(fp)
 40138f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40138f4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 40138f8:	e037883a 	mov	sp,fp
 40138fc:	df000017 	ldw	fp,0(sp)
 4013900:	dec00104 	addi	sp,sp,4
 4013904:	f800283a 	ret

04013908 <atexit>:
 4013908:	200b883a 	mov	r5,r4
 401390c:	000d883a 	mov	r6,zero
 4013910:	0009883a 	mov	r4,zero
 4013914:	000f883a 	mov	r7,zero
 4013918:	40139c81 	jmpi	40139c8 <__register_exitproc>

0401391c <exit>:
 401391c:	defffe04 	addi	sp,sp,-8
 4013920:	000b883a 	mov	r5,zero
 4013924:	dc000015 	stw	r16,0(sp)
 4013928:	dfc00115 	stw	ra,4(sp)
 401392c:	2021883a 	mov	r16,r4
 4013930:	4013b000 	call	4013b00 <__call_exitprocs>
 4013934:	008100f4 	movhi	r2,1027
 4013938:	10859a04 	addi	r2,r2,5736
 401393c:	11000017 	ldw	r4,0(r2)
 4013940:	20800f17 	ldw	r2,60(r4)
 4013944:	10000126 	beq	r2,zero,401394c <exit+0x30>
 4013948:	103ee83a 	callr	r2
 401394c:	8009883a 	mov	r4,r16
 4013950:	4013cf00 	call	4013cf0 <_exit>

04013954 <memcmp>:
 4013954:	00c000c4 	movi	r3,3
 4013958:	1980032e 	bgeu	r3,r6,4013968 <memcmp+0x14>
 401395c:	2144b03a 	or	r2,r4,r5
 4013960:	10c4703a 	and	r2,r2,r3
 4013964:	10000f26 	beq	r2,zero,40139a4 <memcmp+0x50>
 4013968:	31ffffc4 	addi	r7,r6,-1
 401396c:	3000061e 	bne	r6,zero,4013988 <memcmp+0x34>
 4013970:	00000a06 	br	401399c <memcmp+0x48>
 4013974:	39ffffc4 	addi	r7,r7,-1
 4013978:	00bfffc4 	movi	r2,-1
 401397c:	21000044 	addi	r4,r4,1
 4013980:	29400044 	addi	r5,r5,1
 4013984:	38800526 	beq	r7,r2,401399c <memcmp+0x48>
 4013988:	20c00003 	ldbu	r3,0(r4)
 401398c:	28800003 	ldbu	r2,0(r5)
 4013990:	18bff826 	beq	r3,r2,4013974 <memcmp+0x20>
 4013994:	1885c83a 	sub	r2,r3,r2
 4013998:	f800283a 	ret
 401399c:	0005883a 	mov	r2,zero
 40139a0:	f800283a 	ret
 40139a4:	180f883a 	mov	r7,r3
 40139a8:	20c00017 	ldw	r3,0(r4)
 40139ac:	28800017 	ldw	r2,0(r5)
 40139b0:	18bfed1e 	bne	r3,r2,4013968 <memcmp+0x14>
 40139b4:	31bfff04 	addi	r6,r6,-4
 40139b8:	21000104 	addi	r4,r4,4
 40139bc:	29400104 	addi	r5,r5,4
 40139c0:	39bff936 	bltu	r7,r6,40139a8 <memcmp+0x54>
 40139c4:	003fe806 	br	4013968 <memcmp+0x14>

040139c8 <__register_exitproc>:
 40139c8:	defffa04 	addi	sp,sp,-24
 40139cc:	008100f4 	movhi	r2,1027
 40139d0:	10859a04 	addi	r2,r2,5736
 40139d4:	dc000015 	stw	r16,0(sp)
 40139d8:	14000017 	ldw	r16,0(r2)
 40139dc:	dd000415 	stw	r20,16(sp)
 40139e0:	2829883a 	mov	r20,r5
 40139e4:	81405217 	ldw	r5,328(r16)
 40139e8:	dcc00315 	stw	r19,12(sp)
 40139ec:	dc800215 	stw	r18,8(sp)
 40139f0:	dc400115 	stw	r17,4(sp)
 40139f4:	dfc00515 	stw	ra,20(sp)
 40139f8:	2023883a 	mov	r17,r4
 40139fc:	3027883a 	mov	r19,r6
 4013a00:	3825883a 	mov	r18,r7
 4013a04:	28002526 	beq	r5,zero,4013a9c <__register_exitproc+0xd4>
 4013a08:	29000117 	ldw	r4,4(r5)
 4013a0c:	008007c4 	movi	r2,31
 4013a10:	11002716 	blt	r2,r4,4013ab0 <__register_exitproc+0xe8>
 4013a14:	8800101e 	bne	r17,zero,4013a58 <__register_exitproc+0x90>
 4013a18:	2105883a 	add	r2,r4,r4
 4013a1c:	1085883a 	add	r2,r2,r2
 4013a20:	20c00044 	addi	r3,r4,1
 4013a24:	1145883a 	add	r2,r2,r5
 4013a28:	0009883a 	mov	r4,zero
 4013a2c:	15000215 	stw	r20,8(r2)
 4013a30:	28c00115 	stw	r3,4(r5)
 4013a34:	2005883a 	mov	r2,r4
 4013a38:	dfc00517 	ldw	ra,20(sp)
 4013a3c:	dd000417 	ldw	r20,16(sp)
 4013a40:	dcc00317 	ldw	r19,12(sp)
 4013a44:	dc800217 	ldw	r18,8(sp)
 4013a48:	dc400117 	ldw	r17,4(sp)
 4013a4c:	dc000017 	ldw	r16,0(sp)
 4013a50:	dec00604 	addi	sp,sp,24
 4013a54:	f800283a 	ret
 4013a58:	29802204 	addi	r6,r5,136
 4013a5c:	00800044 	movi	r2,1
 4013a60:	110e983a 	sll	r7,r2,r4
 4013a64:	30c04017 	ldw	r3,256(r6)
 4013a68:	2105883a 	add	r2,r4,r4
 4013a6c:	1085883a 	add	r2,r2,r2
 4013a70:	1185883a 	add	r2,r2,r6
 4013a74:	19c6b03a 	or	r3,r3,r7
 4013a78:	14802015 	stw	r18,128(r2)
 4013a7c:	14c00015 	stw	r19,0(r2)
 4013a80:	00800084 	movi	r2,2
 4013a84:	30c04015 	stw	r3,256(r6)
 4013a88:	88bfe31e 	bne	r17,r2,4013a18 <__register_exitproc+0x50>
 4013a8c:	30804117 	ldw	r2,260(r6)
 4013a90:	11c4b03a 	or	r2,r2,r7
 4013a94:	30804115 	stw	r2,260(r6)
 4013a98:	003fdf06 	br	4013a18 <__register_exitproc+0x50>
 4013a9c:	008100f4 	movhi	r2,1027
 4013aa0:	10938604 	addi	r2,r2,19992
 4013aa4:	100b883a 	mov	r5,r2
 4013aa8:	80805215 	stw	r2,328(r16)
 4013aac:	003fd606 	br	4013a08 <__register_exitproc+0x40>
 4013ab0:	00810074 	movhi	r2,1025
 4013ab4:	10a29104 	addi	r2,r2,-30140
 4013ab8:	1000021e 	bne	r2,zero,4013ac4 <__register_exitproc+0xfc>
 4013abc:	013fffc4 	movi	r4,-1
 4013ac0:	003fdc06 	br	4013a34 <__register_exitproc+0x6c>
 4013ac4:	01006404 	movi	r4,400
 4013ac8:	103ee83a 	callr	r2
 4013acc:	1007883a 	mov	r3,r2
 4013ad0:	103ffa26 	beq	r2,zero,4013abc <__register_exitproc+0xf4>
 4013ad4:	80805217 	ldw	r2,328(r16)
 4013ad8:	180b883a 	mov	r5,r3
 4013adc:	18000115 	stw	zero,4(r3)
 4013ae0:	18800015 	stw	r2,0(r3)
 4013ae4:	80c05215 	stw	r3,328(r16)
 4013ae8:	18006215 	stw	zero,392(r3)
 4013aec:	18006315 	stw	zero,396(r3)
 4013af0:	0009883a 	mov	r4,zero
 4013af4:	883fc826 	beq	r17,zero,4013a18 <__register_exitproc+0x50>
 4013af8:	003fd706 	br	4013a58 <__register_exitproc+0x90>

04013afc <register_fini>:
 4013afc:	f800283a 	ret

04013b00 <__call_exitprocs>:
 4013b00:	008100f4 	movhi	r2,1027
 4013b04:	10859a04 	addi	r2,r2,5736
 4013b08:	10800017 	ldw	r2,0(r2)
 4013b0c:	defff304 	addi	sp,sp,-52
 4013b10:	df000b15 	stw	fp,44(sp)
 4013b14:	d8800115 	stw	r2,4(sp)
 4013b18:	00810074 	movhi	r2,1025
 4013b1c:	10a28c04 	addi	r2,r2,-30160
 4013b20:	1005003a 	cmpeq	r2,r2,zero
 4013b24:	d8800215 	stw	r2,8(sp)
 4013b28:	d8800117 	ldw	r2,4(sp)
 4013b2c:	dd400815 	stw	r21,32(sp)
 4013b30:	dd000715 	stw	r20,28(sp)
 4013b34:	10805204 	addi	r2,r2,328
 4013b38:	dfc00c15 	stw	ra,48(sp)
 4013b3c:	ddc00a15 	stw	r23,40(sp)
 4013b40:	dd800915 	stw	r22,36(sp)
 4013b44:	dcc00615 	stw	r19,24(sp)
 4013b48:	dc800515 	stw	r18,20(sp)
 4013b4c:	dc400415 	stw	r17,16(sp)
 4013b50:	dc000315 	stw	r16,12(sp)
 4013b54:	282b883a 	mov	r21,r5
 4013b58:	2039883a 	mov	fp,r4
 4013b5c:	d8800015 	stw	r2,0(sp)
 4013b60:	2829003a 	cmpeq	r20,r5,zero
 4013b64:	d8800117 	ldw	r2,4(sp)
 4013b68:	14405217 	ldw	r17,328(r2)
 4013b6c:	88001026 	beq	r17,zero,4013bb0 <__call_exitprocs+0xb0>
 4013b70:	ddc00017 	ldw	r23,0(sp)
 4013b74:	88800117 	ldw	r2,4(r17)
 4013b78:	8c802204 	addi	r18,r17,136
 4013b7c:	143fffc4 	addi	r16,r2,-1
 4013b80:	80000916 	blt	r16,zero,4013ba8 <__call_exitprocs+0xa8>
 4013b84:	05bfffc4 	movi	r22,-1
 4013b88:	a000151e 	bne	r20,zero,4013be0 <__call_exitprocs+0xe0>
 4013b8c:	8409883a 	add	r4,r16,r16
 4013b90:	2105883a 	add	r2,r4,r4
 4013b94:	1485883a 	add	r2,r2,r18
 4013b98:	10c02017 	ldw	r3,128(r2)
 4013b9c:	a8c01126 	beq	r21,r3,4013be4 <__call_exitprocs+0xe4>
 4013ba0:	843fffc4 	addi	r16,r16,-1
 4013ba4:	85bff81e 	bne	r16,r22,4013b88 <__call_exitprocs+0x88>
 4013ba8:	d8800217 	ldw	r2,8(sp)
 4013bac:	10003126 	beq	r2,zero,4013c74 <__call_exitprocs+0x174>
 4013bb0:	dfc00c17 	ldw	ra,48(sp)
 4013bb4:	df000b17 	ldw	fp,44(sp)
 4013bb8:	ddc00a17 	ldw	r23,40(sp)
 4013bbc:	dd800917 	ldw	r22,36(sp)
 4013bc0:	dd400817 	ldw	r21,32(sp)
 4013bc4:	dd000717 	ldw	r20,28(sp)
 4013bc8:	dcc00617 	ldw	r19,24(sp)
 4013bcc:	dc800517 	ldw	r18,20(sp)
 4013bd0:	dc400417 	ldw	r17,16(sp)
 4013bd4:	dc000317 	ldw	r16,12(sp)
 4013bd8:	dec00d04 	addi	sp,sp,52
 4013bdc:	f800283a 	ret
 4013be0:	8409883a 	add	r4,r16,r16
 4013be4:	88c00117 	ldw	r3,4(r17)
 4013be8:	2105883a 	add	r2,r4,r4
 4013bec:	1445883a 	add	r2,r2,r17
 4013bf0:	18ffffc4 	addi	r3,r3,-1
 4013bf4:	11800217 	ldw	r6,8(r2)
 4013bf8:	1c001526 	beq	r3,r16,4013c50 <__call_exitprocs+0x150>
 4013bfc:	10000215 	stw	zero,8(r2)
 4013c00:	303fe726 	beq	r6,zero,4013ba0 <__call_exitprocs+0xa0>
 4013c04:	00c00044 	movi	r3,1
 4013c08:	1c06983a 	sll	r3,r3,r16
 4013c0c:	90804017 	ldw	r2,256(r18)
 4013c10:	8cc00117 	ldw	r19,4(r17)
 4013c14:	1884703a 	and	r2,r3,r2
 4013c18:	10001426 	beq	r2,zero,4013c6c <__call_exitprocs+0x16c>
 4013c1c:	90804117 	ldw	r2,260(r18)
 4013c20:	1884703a 	and	r2,r3,r2
 4013c24:	10000c1e 	bne	r2,zero,4013c58 <__call_exitprocs+0x158>
 4013c28:	2105883a 	add	r2,r4,r4
 4013c2c:	1485883a 	add	r2,r2,r18
 4013c30:	11400017 	ldw	r5,0(r2)
 4013c34:	e009883a 	mov	r4,fp
 4013c38:	303ee83a 	callr	r6
 4013c3c:	88800117 	ldw	r2,4(r17)
 4013c40:	98bfc81e 	bne	r19,r2,4013b64 <__call_exitprocs+0x64>
 4013c44:	b8800017 	ldw	r2,0(r23)
 4013c48:	147fd526 	beq	r2,r17,4013ba0 <__call_exitprocs+0xa0>
 4013c4c:	003fc506 	br	4013b64 <__call_exitprocs+0x64>
 4013c50:	8c000115 	stw	r16,4(r17)
 4013c54:	003fea06 	br	4013c00 <__call_exitprocs+0x100>
 4013c58:	2105883a 	add	r2,r4,r4
 4013c5c:	1485883a 	add	r2,r2,r18
 4013c60:	11000017 	ldw	r4,0(r2)
 4013c64:	303ee83a 	callr	r6
 4013c68:	003ff406 	br	4013c3c <__call_exitprocs+0x13c>
 4013c6c:	303ee83a 	callr	r6
 4013c70:	003ff206 	br	4013c3c <__call_exitprocs+0x13c>
 4013c74:	88800117 	ldw	r2,4(r17)
 4013c78:	1000081e 	bne	r2,zero,4013c9c <__call_exitprocs+0x19c>
 4013c7c:	89000017 	ldw	r4,0(r17)
 4013c80:	20000726 	beq	r4,zero,4013ca0 <__call_exitprocs+0x1a0>
 4013c84:	b9000015 	stw	r4,0(r23)
 4013c88:	8809883a 	mov	r4,r17
 4013c8c:	4008a300 	call	4008a30 <free>
 4013c90:	bc400017 	ldw	r17,0(r23)
 4013c94:	883fb71e 	bne	r17,zero,4013b74 <__call_exitprocs+0x74>
 4013c98:	003fc506 	br	4013bb0 <__call_exitprocs+0xb0>
 4013c9c:	89000017 	ldw	r4,0(r17)
 4013ca0:	882f883a 	mov	r23,r17
 4013ca4:	2023883a 	mov	r17,r4
 4013ca8:	883fb21e 	bne	r17,zero,4013b74 <__call_exitprocs+0x74>
 4013cac:	003fc006 	br	4013bb0 <__call_exitprocs+0xb0>

04013cb0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 4013cb0:	defffd04 	addi	sp,sp,-12
 4013cb4:	df000215 	stw	fp,8(sp)
 4013cb8:	df000204 	addi	fp,sp,8
 4013cbc:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 4013cc0:	e0bfff17 	ldw	r2,-4(fp)
 4013cc4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4013cc8:	e0bffe17 	ldw	r2,-8(fp)
 4013ccc:	1005003a 	cmpeq	r2,r2,zero
 4013cd0:	1000021e 	bne	r2,zero,4013cdc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 4013cd4:	002af070 	cmpltui	zero,zero,43969
 4013cd8:	00000106 	br	4013ce0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 4013cdc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 4013ce0:	e037883a 	mov	sp,fp
 4013ce4:	df000017 	ldw	fp,0(sp)
 4013ce8:	dec00104 	addi	sp,sp,4
 4013cec:	f800283a 	ret

04013cf0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4013cf0:	defffd04 	addi	sp,sp,-12
 4013cf4:	dfc00215 	stw	ra,8(sp)
 4013cf8:	df000115 	stw	fp,4(sp)
 4013cfc:	df000104 	addi	fp,sp,4
 4013d00:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 4013d04:	e13fff17 	ldw	r4,-4(fp)
 4013d08:	4013cb00 	call	4013cb0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4013d0c:	003fff06 	br	4013d0c <_exit+0x1c>
 4013d10:	04013afc 	xorhi	r16,zero,1259
