
LT24_Test.elf:     file format elf32-littlenios2
LT24_Test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000801b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x0002db44 memsz 0x0002db44 flags r-x
    LOAD off    0x0002eb64 vaddr 0x000adb64 paddr 0x000b1174 align 2**12
         filesz 0x00003610 memsz 0x00003610 flags rw-
    LOAD off    0x00032784 vaddr 0x000b4784 paddr 0x000b4784 align 2**12
         filesz 0x00000000 memsz 0x000002f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001364c  000801b8  000801b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0001a360  00093804  00093804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00003610  000adb64  000b1174  0002eb64  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f0  000b4784  000b4784  00032784  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00032174  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001028  00000000  00000000  00032198  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0002b222  00000000  00000000  000331c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000a9fe  00000000  00000000  0005e3e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   0000c8e5  00000000  00000000  00068de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00002630  00000000  00000000  000756c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00004ed5  00000000  00000000  00077cf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00012390  00000000  00000000  0007cbcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000060  00000000  00000000  0008ef60  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a58  00000000  00000000  0008efc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0009532e  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000a  00000000  00000000  00095331  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  0009533b  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  0009533c  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  0009533d  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00095341  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00095345  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00095349  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00095352  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  0009535b  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000009  00000000  00000000  00095364  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000003b  00000000  00000000  0009536d  2**0
                  CONTENTS, READONLY
 28 .jdi          00004d67  00000000  00000000  000953a8  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000652b7  00000000  00000000  0009a10f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
000801b8 l    d  .text	00000000 .text
00093804 l    d  .rodata	00000000 .rodata
000adb64 l    d  .rwdata	00000000 .rwdata
000b4784 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../LT24_Test_bsp//obj/HAL/src/crt0.o
00080200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 tahomabold_20.c
00093804 l     O .rodata	000000b6 tahomabold_20_33
000938ba l     O .rodata	00000104 tahomabold_20_34
000939be l     O .rodata	000001a0 tahomabold_20_35
00093b5e l     O .rodata	00000152 tahomabold_20_36
00093cb0 l     O .rodata	00000270 tahomabold_20_37
00093f20 l     O .rodata	000001ba tahomabold_20_38
000940da l     O .rodata	0000009c tahomabold_20_39
00094176 l     O .rodata	000000ea tahomabold_20_40
00094260 l     O .rodata	000000ea tahomabold_20_41
0009434a l     O .rodata	00000152 tahomabold_20_42
0009449c l     O .rodata	000001a0 tahomabold_20_43
0009463c l     O .rodata	0000009c tahomabold_20_44
000946d8 l     O .rodata	000000ea tahomabold_20_45
000947c2 l     O .rodata	0000009c tahomabold_20_46
0009485e l     O .rodata	00000138 tahomabold_20_47
00094996 l     O .rodata	00000152 tahomabold_20_48
00094ae8 l     O .rodata	00000152 tahomabold_20_49
00094c3a l     O .rodata	00000152 tahomabold_20_50
00094d8c l     O .rodata	00000152 tahomabold_20_51
00094ede l     O .rodata	00000152 tahomabold_20_52
00095030 l     O .rodata	00000152 tahomabold_20_53
00095182 l     O .rodata	00000152 tahomabold_20_54
000952d4 l     O .rodata	00000152 tahomabold_20_55
00095426 l     O .rodata	00000152 tahomabold_20_56
00095578 l     O .rodata	00000152 tahomabold_20_57
000956ca l     O .rodata	000000b6 tahomabold_20_58
00095780 l     O .rodata	000000b6 tahomabold_20_59
00095836 l     O .rodata	000001a0 tahomabold_20_60
000959d6 l     O .rodata	000001a0 tahomabold_20_61
00095b76 l     O .rodata	000001a0 tahomabold_20_62
00095d16 l     O .rodata	0000011e tahomabold_20_63
00095e34 l     O .rodata	000001d4 tahomabold_20_64
00096008 l     O .rodata	0000016c tahomabold_20_65
00096174 l     O .rodata	0000016c tahomabold_20_66
000962e0 l     O .rodata	00000152 tahomabold_20_67
00096432 l     O .rodata	00000186 tahomabold_20_68
000965b8 l     O .rodata	00000138 tahomabold_20_69
000966f0 l     O .rodata	00000138 tahomabold_20_70
00096828 l     O .rodata	00000186 tahomabold_20_71
000969ae l     O .rodata	00000186 tahomabold_20_72
00096b34 l     O .rodata	00000104 tahomabold_20_73
00096c38 l     O .rodata	00000104 tahomabold_20_74
00096d3c l     O .rodata	0000016c tahomabold_20_75
00096ea8 l     O .rodata	0000011e tahomabold_20_76
00096fc6 l     O .rodata	000001d4 tahomabold_20_77
0009719a l     O .rodata	00000186 tahomabold_20_78
00097320 l     O .rodata	00000186 tahomabold_20_79
000974a6 l     O .rodata	00000152 tahomabold_20_80
000975f8 l     O .rodata	00000186 tahomabold_20_81
0009777e l     O .rodata	00000186 tahomabold_20_82
00097904 l     O .rodata	00000152 tahomabold_20_83
00097a56 l     O .rodata	00000138 tahomabold_20_84
00097b8e l     O .rodata	00000186 tahomabold_20_85
00097d14 l     O .rodata	0000016c tahomabold_20_86
00097e80 l     O .rodata	00000222 tahomabold_20_87
000980a2 l     O .rodata	0000016c tahomabold_20_88
0009820e l     O .rodata	0000016c tahomabold_20_89
0009837a l     O .rodata	00000138 tahomabold_20_90
000984b2 l     O .rodata	000000ea tahomabold_20_91
0009859c l     O .rodata	00000138 tahomabold_20_92
000986d4 l     O .rodata	000000ea tahomabold_20_93
000987be l     O .rodata	000001a0 tahomabold_20_94
0009895e l     O .rodata	00000152 tahomabold_20_95
00098ab0 l     O .rodata	0000011e tahomabold_20_96
00098bce l     O .rodata	00000138 tahomabold_20_97
00098d06 l     O .rodata	00000152 tahomabold_20_98
00098e58 l     O .rodata	0000011e tahomabold_20_99
00098f76 l     O .rodata	00000152 tahomabold_20_100
000990c8 l     O .rodata	00000138 tahomabold_20_101
00099200 l     O .rodata	000000d0 tahomabold_20_102
000992d0 l     O .rodata	00000152 tahomabold_20_103
00099422 l     O .rodata	00000152 tahomabold_20_104
00099574 l     O .rodata	0000009c tahomabold_20_105
00099610 l     O .rodata	000000ea tahomabold_20_106
000996fa l     O .rodata	00000138 tahomabold_20_107
00099832 l     O .rodata	0000009c tahomabold_20_108
000998ce l     O .rodata	000001ee tahomabold_20_109
00099abc l     O .rodata	00000152 tahomabold_20_110
00099c0e l     O .rodata	00000138 tahomabold_20_111
00099d46 l     O .rodata	00000152 tahomabold_20_112
00099e98 l     O .rodata	00000152 tahomabold_20_113
00099fea l     O .rodata	000000ea tahomabold_20_114
0009a0d4 l     O .rodata	00000104 tahomabold_20_115
0009a1d8 l     O .rodata	000000d0 tahomabold_20_116
0009a2a8 l     O .rodata	00000152 tahomabold_20_117
0009a3fa l     O .rodata	00000138 tahomabold_20_118
0009a532 l     O .rodata	000001d4 tahomabold_20_119
0009a706 l     O .rodata	00000138 tahomabold_20_120
0009a83e l     O .rodata	00000138 tahomabold_20_121
0009a976 l     O .rodata	0000011e tahomabold_20_122
0009aa94 l     O .rodata	00000138 tahomabold_20_123
0009abcc l     O .rodata	00000152 tahomabold_20_124
0009ad1e l     O .rodata	00000138 tahomabold_20_125
0009ae56 l     O .rodata	000001a0 tahomabold_20_126
00000000 l    df *ABS*	00000000 tahomabold_32.c
0009aff6 l     O .rodata	000001b8 tahomabold_32_33
0009b1ae l     O .rodata	00000280 tahomabold_32_34
0009b42e l     O .rodata	00000410 tahomabold_32_35
0009b83e l     O .rodata	00000320 tahomabold_32_36
0009bb5e l     O .rodata	000005f0 tahomabold_32_37
0009c14e l     O .rodata	00000410 tahomabold_32_38
0009c55e l     O .rodata	00000168 tahomabold_32_39
0009c6c6 l     O .rodata	00000258 tahomabold_32_40
0009c91e l     O .rodata	00000258 tahomabold_32_41
0009cb76 l     O .rodata	00000320 tahomabold_32_42
0009ce96 l     O .rodata	00000410 tahomabold_32_43
0009d2a6 l     O .rodata	00000190 tahomabold_32_44
0009d436 l     O .rodata	00000230 tahomabold_32_45
0009d666 l     O .rodata	00000190 tahomabold_32_46
0009d7f6 l     O .rodata	000002d0 tahomabold_32_47
0009dac6 l     O .rodata	00000320 tahomabold_32_48
0009dde6 l     O .rodata	00000320 tahomabold_32_49
0009e106 l     O .rodata	00000320 tahomabold_32_50
0009e426 l     O .rodata	00000320 tahomabold_32_51
0009e746 l     O .rodata	00000320 tahomabold_32_52
0009ea66 l     O .rodata	00000320 tahomabold_32_53
0009ed86 l     O .rodata	00000320 tahomabold_32_54
0009f0a6 l     O .rodata	00000320 tahomabold_32_55
0009f3c6 l     O .rodata	00000320 tahomabold_32_56
0009f6e6 l     O .rodata	00000320 tahomabold_32_57
0009fa06 l     O .rodata	000001e0 tahomabold_32_58
0009fbe6 l     O .rodata	000001e0 tahomabold_32_59
0009fdc6 l     O .rodata	00000410 tahomabold_32_60
000a01d6 l     O .rodata	00000410 tahomabold_32_61
000a05e6 l     O .rodata	00000410 tahomabold_32_62
000a09f6 l     O .rodata	000002d0 tahomabold_32_63
000a0cc6 l     O .rodata	00000488 tahomabold_32_64
000a114e l     O .rodata	00000370 tahomabold_32_65
000a14be l     O .rodata	00000370 tahomabold_32_66
000a182e l     O .rodata	00000348 tahomabold_32_67
000a1b76 l     O .rodata	000003c0 tahomabold_32_68
000a1f36 l     O .rodata	00000320 tahomabold_32_69
000a2256 l     O .rodata	000002f8 tahomabold_32_70
000a254e l     O .rodata	000003c0 tahomabold_32_71
000a290e l     O .rodata	000003c0 tahomabold_32_72
000a2cce l     O .rodata	00000258 tahomabold_32_73
000a2f26 l     O .rodata	00000280 tahomabold_32_74
000a31a6 l     O .rodata	00000398 tahomabold_32_75
000a353e l     O .rodata	000002d0 tahomabold_32_76
000a380e l     O .rodata	00000488 tahomabold_32_77
000a3c96 l     O .rodata	000003e8 tahomabold_32_78
000a407e l     O .rodata	000003e8 tahomabold_32_79
000a4466 l     O .rodata	00000348 tahomabold_32_80
000a47ae l     O .rodata	000003e8 tahomabold_32_81
000a4b96 l     O .rodata	000003c0 tahomabold_32_82
000a4f56 l     O .rodata	00000320 tahomabold_32_83
000a5276 l     O .rodata	00000320 tahomabold_32_84
000a5596 l     O .rodata	000003c0 tahomabold_32_85
000a5956 l     O .rodata	00000370 tahomabold_32_86
000a5cc6 l     O .rodata	00000528 tahomabold_32_87
000a61ee l     O .rodata	00000370 tahomabold_32_88
000a655e l     O .rodata	00000370 tahomabold_32_89
000a68ce l     O .rodata	00000320 tahomabold_32_90
000a6bee l     O .rodata	00000258 tahomabold_32_91
000a6e46 l     O .rodata	000002d0 tahomabold_32_92
000a7116 l     O .rodata	00000258 tahomabold_32_93
000a736e l     O .rodata	00000410 tahomabold_32_94
000a777e l     O .rodata	00000320 tahomabold_32_95
000a7a9e l     O .rodata	000002a8 tahomabold_32_96
000a7d46 l     O .rodata	000002f8 tahomabold_32_97
000a803e l     O .rodata	00000320 tahomabold_32_98
000a835e l     O .rodata	000002a8 tahomabold_32_99
000a8606 l     O .rodata	00000320 tahomabold_32_100
000a8926 l     O .rodata	000002f8 tahomabold_32_101
000a8c1e l     O .rodata	00000230 tahomabold_32_102
000a8e4e l     O .rodata	00000320 tahomabold_32_103
000a916e l     O .rodata	00000320 tahomabold_32_104
000a948e l     O .rodata	00000190 tahomabold_32_105
000a961e l     O .rodata	00000208 tahomabold_32_106
000a9826 l     O .rodata	000002f8 tahomabold_32_107
000a9b1e l     O .rodata	00000190 tahomabold_32_108
000a9cae l     O .rodata	000004d8 tahomabold_32_109
000aa186 l     O .rodata	00000320 tahomabold_32_110
000aa4a6 l     O .rodata	00000320 tahomabold_32_111
000aa7c6 l     O .rodata	00000320 tahomabold_32_112
000aaae6 l     O .rodata	00000320 tahomabold_32_113
000aae06 l     O .rodata	00000230 tahomabold_32_114
000ab036 l     O .rodata	00000280 tahomabold_32_115
000ab2b6 l     O .rodata	00000208 tahomabold_32_116
000ab4be l     O .rodata	00000320 tahomabold_32_117
000ab7de l     O .rodata	000002f8 tahomabold_32_118
000abad6 l     O .rodata	00000460 tahomabold_32_119
000abf36 l     O .rodata	000002f8 tahomabold_32_120
000ac22e l     O .rodata	000002d0 tahomabold_32_121
000ac4fe l     O .rodata	000002a8 tahomabold_32_122
000ac7a6 l     O .rodata	00000320 tahomabold_32_123
000acac6 l     O .rodata	00000320 tahomabold_32_124
000acde6 l     O .rodata	00000320 tahomabold_32_125
000ad106 l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 geometry.c
00000000 l    df *ABS*	00000000 ILI9341.c
00000000 l    df *ABS*	00000000 simple_graphics.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 gui.c
000b4784 l     O .bss	00000004 x.3825
000b1130 l     O .rwdata	00000004 y.3826
00000000 l    df *ABS*	00000000 gui_vpg.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 touch_spi.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 fp-bit.c
00087768 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0008820c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
000af710 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000895a0 l     F .text	00000034 __sprint_r
000ad9a2 l     O .rodata	00000010 blanks.3515
000ad9b2 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 vsnprintf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0008b650 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0008d08c l     F .text	00000008 __fp_lock
0008d094 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000ad9e4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
000adb2c l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00090dc8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00090ee0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00090f0c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
000912d0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
000913c0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
000914ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00091684 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000b1168 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00091aa0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00091bdc l     F .text	00000038 alt_dev_reg
000b00cc l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00091ed0 l     F .text	00000204 altera_avalon_jtag_uart_irq
000920d4 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00092918 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00092bac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00092d84 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00092ebc l     F .text	00000050 alt_get_errno
00092f0c l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00081c80 g     F .text	00000078 vid_draw_horiz_line
0008f08c g     F .text	00000074 _mprec_log10
000855cc g     F .text	00000124 I2C_Read
0008f17c g     F .text	00000084 __any_on
0008fd5c g     F .text	00000064 _isatty_r
000ada14 g     O .rodata	00000028 __mprec_tinytens
00080780 g     F .text	0000006c LCD_DrawPoint
000915cc g     F .text	00000078 alt_main
00089480 g     F .text	00000094 strcpy
00088884 g     F .text	00000044 __ashldi3
000892c0 g     F .text	00000084 _puts_r
000b47e4 g     O .bss	00000100 alt_irq
0008fdc0 g     F .text	0000006c _lseek_r
00081de4 g     F .text	0000006c vid_color_convert16_24
00087328 g     F .text	00000148 sqrt
00086378 g     F .text	000000a0 I2CL_Read16
000b1174 g       *ABS*	00000000 __flash_rwdata_start
000909ec g     F .text	0000005c __eqdf2
00086d34 g     F .text	00000164 touch_enable_penirq
000b4a74 g       *ABS*	00000000 __alt_heap_start
00086734 g     F .text	00000064 QUEUE_IsFull
00080e58 g     F .text	00000138 LCD_Pattern_Horizon
00089284 g     F .text	0000003c printf
0008420c g     F .text	000001dc GUI_DeskInit
0008f910 g     F .text	0000005c __sseek
0008d11c g     F .text	0000010c __sinit
0008ddb4 g     F .text	0000009c _setlocale_r
0008d0a8 g     F .text	00000064 __sfmoreglue
00091664 g     F .text	00000020 __malloc_unlock
000818d4 g     F .text	00000150 vid_draw_box
000805b4 g     F .text	00000044 PtCopy
00083710 g     F .text	0000025c vid_print_string_alpha
0008e130 g     F .text	00000128 memmove
0008d10c g     F .text	00000010 _cleanup
0008e258 g     F .text	000000a8 _Balloc
000af2e4 g     O .rwdata	00000415 cour10_font_array
00090aa4 g     F .text	00000064 __gtdf2
000816b0 g     F .text	0000011c vid_move_block
000888c8 g     F .text	00000010 __errno
000861fc g     F .text	0000017c I2CL_MultipleWrite
0008405c g     F .text	000000e0 vid_string_pixel_length_alpha
00085ad8 g     F .text	0000016c i2c_write
00080000 g     F .entry	0000001c __reset
00085350 g     F .text	00000040 my_wait
00080020 g       *ABS*	00000000 __flash_exceptions_start
00080700 g     F .text	00000080 LCD_Clear
0008fcf4 g     F .text	00000068 _fstat_r
000b4794 g     O .bss	00000004 errno
000856f0 g     F .text	00000178 I2C_Read16
000b47ac g     O .bss	00000004 alt_argv
000b912c g       *ABS*	00000000 _gp
00091a70 g     F .text	00000030 usleep
00084b24 g     F .text	000000b0 VPG_ColorPanel
0008396c g     F .text	00000154 seperate_color_channels
000aff4c g     O .rwdata	00000180 alt_fd_list
0009314c g     F .text	00000090 alt_find_dev
00089084 g     F .text	000000f8 memcpy
0008d09c g     F .text	0000000c _cleanup_r
00088064 g     F .text	000000d4 __floatsidf
000825e8 g     F .text	00000758 vid_round_corner_points
00086a5c g     F .text	0000006c Touch_UnInit
00092e44 g     F .text	00000078 alt_io_redirect
00088008 g     F .text	0000005c __ltdf2
00093804 g       *ABS*	00000000 __DTOR_END__
000843e8 g     F .text	00000090 GUI_CheckButton
00089344 g     F .text	00000014 puts
00081070 g     F .text	00000060 vid_clean_screen
0008efe8 g     F .text	000000a4 __ratio
000866f4 g     F .text	00000040 QUEUE_IsEmpty
000811dc g     F .text	00000154 vid_scroll_string_init
000922d4 g     F .text	00000218 altera_avalon_jtag_uart_read
000888d8 g     F .text	00000014 malloc
00089258 g     F .text	0000002c _printf_r
000868ec g     F .text	00000170 Touch_Init
0008832c g     F .text	00000008 __udivsi3
00091320 g     F .text	000000a0 isatty
000ada64 g     O .rodata	000000c8 __mprec_tens
0008de50 g     F .text	0000000c __locale_charset
0008b49c g     F .text	00000040 vsnprintf
00084478 g     F .text	00000238 GUI_DeskDraw
000933a4 g     F .text	0000008c alt_icache_flush
00085868 g     F .text	0000017c I2C_MultipleRead
000b4790 g     O .bss	00000004 __malloc_top_pad
000868bc g     F .text	00000030 QUEUE_Empty
000b1148 g     O .rwdata	00000004 __mb_cur_max
0008de5c g     F .text	0000000c _localeconv_r
0008e658 g     F .text	0000003c __i2b
0008d770 g     F .text	000004e4 __sfvwrite_r
0008682c g     F .text	00000090 QUEUE_Pop
00089358 g     F .text	00000064 _sbrk_r
00086cc4 g     F .text	00000030 touch_empty_fifo
000804cc g     F .text	00000034 RectHeight
0008fe2c g     F .text	0000006c _read_r
000aff18 g     O .rwdata	0000000c __lc_ctype
000b115c g     O .rwdata	00000004 alt_max_fd
0008866c g     F .text	00000104 __unpack_d
00084b00 g     F .text	00000024 VPG_XLine
0008fba4 g     F .text	0000013c _fclose_r
0008d05c g     F .text	00000030 fflush
000b478c g     O .bss	00000004 __malloc_max_sbrked_mem
00085ed4 g     F .text	00000168 I2CL_Read
000ae724 g     O .rwdata	00000bc0 tahomabold_32
00087abc g     F .text	00000054 __adddf3
0008473c g     F .text	00000080 GUI_ClearPaintArea
00080288 g     F .text	00000040 PtSet
0008ed5c g     F .text	00000148 __b2d
00090460 g     F .text	0000058c __umoddi3
000914fc g     F .text	000000d0 lseek
000b1134 g     O .rwdata	00000004 __fdlib_version
000b1138 g     O .rwdata	00000004 _global_impure_ptr
000820f4 g     F .text	0000013c vid_draw_circle
0008f200 g     F .text	000005fc _realloc_r
000b4a74 g       *ABS*	00000000 __bss_end
000911e0 g     F .text	000000f0 alt_iic_isr_register
0009196c g     F .text	00000104 alt_tick
0008548c g     F .text	00000140 I2C_Write16
000803ac g     F .text	00000088 RectOffset
0008fe98 g     F .text	000005c8 __udivdi3
000ada3c g     O .rodata	00000028 __mprec_bigtens
0008e43c g     F .text	00000104 __s2b
00081e90 g     F .text	00000264 vid_draw_sloped_line
00090b6c g     F .text	0000011c __floatunsidf
0008eafc g     F .text	00000058 __mcmp
00084cd0 g     F .text	000000e4 VPG_VGrid
0008d334 g     F .text	00000018 __fp_lock_all
00091194 g     F .text	0000004c alt_ic_irq_enabled
00085390 g     F .text	000000fc I2C_Write
00082230 g     F .text	000003b8 vid_draw_round_corner_box
000918d4 g     F .text	00000098 alt_alarm_stop
000b47a4 g     O .bss	00000004 alt_irq_active
00080f90 g     F .text	000000e0 LCD_Pattern_Vertical
000800ec g     F .exceptions	000000cc alt_irq_handler
000aff24 g     O .rwdata	00000028 alt_dev_null
00086418 g     F .text	0000008c I2CL_Write16
000859e4 g     F .text	00000084 i2c_start
00092b68 g     F .text	00000044 alt_dcache_flush_all
0008e540 g     F .text	00000068 __hi0bits
000871d4 g     F .text	00000078 touch_alarm_callback
00088138 g     F .text	000000d4 __fixdfsi
00086cf4 g     F .text	00000040 touch_is_pen_pressed
000b1174 g       *ABS*	00000000 __ram_rwdata_end
00083174 g     F .text	00000394 vid_draw_triangle
00080000 g       *ABS*	00000000 __alt_mem_onchip_memory
000b1154 g     O .rwdata	00000008 alt_dev_list
00091af0 g     F .text	000000ec write
000af6fc g     O .rwdata	00000014 szPallete
000835e4 g     F .text	0000012c CropImage16
000adb64 g       *ABS*	00000000 __ram_rodata_end
00090f5c g     F .text	000000ac fstat
00088840 g     F .text	00000044 __lshrdi3
00081330 g     F .text	00000380 vid_scroll_string
000864d4 g     F .text	0000006c myprintf
00086ec8 g     F .text	0000030c touch_get_xy
0008e874 g     F .text	0000012c __pow5mult
000b47a0 g     O .bss	00000004 __nlocale_changed
00088334 g     F .text	00000008 __umodsi3
00086c4c g     F .text	00000078 touch_isr
00080498 g     F .text	00000034 RectWidth
00083508 g     F .text	000000dc CopyImage16
000b4a74 g       *ABS*	00000000 end
000851b8 g     F .text	000000b0 GUI_VPG
000849e4 g     F .text	00000064 GUI_ShowInfo
00091e10 g     F .text	000000c0 altera_avalon_jtag_uart_init
00081a24 g     F .text	000000f0 vid_print_char
00093804 g       *ABS*	00000000 __CTOR_LIST__
000c45c0 g       *ABS*	00000000 __alt_stack_pointer
0009298c g     F .text	00000088 alt_avalon_timer_sc_init
0008839c g     F .text	000000ac __clzsi2
000924ec g     F .text	00000224 altera_avalon_jtag_uart_write
00085038 g     F .text	00000180 GUI_ShowPAT
00082d94 g     F .text	00000054 min3
000810d0 g     F .text	000000cc vid_draw_line
0008d324 g     F .text	00000004 __sfp_lock_acquire
0008e038 g     F .text	000000f8 memchr
000895d4 g     F .text	00001df8 ___vfprintf_internal_r
000893bc g     F .text	00000058 _sprintf_r
0008d4a0 g     F .text	000002d0 _free_r
0008064c g     F .text	000000b4 LCD_SetCursor
00093628 g     F .text	000001a0 __call_exitprocs
000b479c g     O .bss	00000004 __mlocale_changed
00084bd4 g     F .text	000000fc VPG_Grid
000b1140 g     O .rwdata	00000004 __malloc_sbrk_base
000801b8 g     F .text	0000004c _start
000b47b4 g     O .bss	00000004 _alt_tick_rate
00086e98 g     F .text	00000030 touch_clear_input
0008e9a0 g     F .text	0000015c __lshift
00092710 g     F .text	00000208 alt_avalon_spi_command
00086798 g     F .text	00000094 QUEUE_Push
000b47b8 g     O .bss	00000004 _alt_nticks
00082e4c g     F .text	000000f0 vid_put_pixel_in_span_map
000916d4 g     F .text	000000f0 read
00084e98 g     F .text	000001a0 VPG_ColorBar
00091c48 g     F .text	00000064 alt_sys_init
000934f8 g     F .text	00000130 __register_exitproc
0008e694 g     F .text	000001e0 __multiply
00081bec g     F .text	00000094 vid_paint_block
00092178 g     F .text	00000068 altera_avalon_jtag_uart_close
000adb64 g       *ABS*	00000000 __ram_rwdata_start
00093804 g       *ABS*	00000000 __ram_rodata_start
000b47bc g     O .bss	00000028 __malloc_current_mallinfo
0008eea4 g     F .text	00000144 __d2b
00084db4 g     F .text	000000e4 VPG_HGrid
00081d44 g     F .text	000000a0 vid_color_convert24_16
00091cac g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000932f0 g     F .text	000000b4 alt_get_fd
00092a14 g     F .text	00000154 alt_busy_sleep
00088770 g     F .text	000000d0 __fpcmp_parts_d
0008fb40 g     F .text	00000064 _close_r
000847bc g     F .text	00000228 GUI
00083c48 g     F .text	00000254 alpha_blending
0009347c g     F .text	0000007c memcmp
00091d6c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000b4a74 g       *ABS*	00000000 __alt_stack_base
00091dbc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0008b4dc g     F .text	00000174 __swsetup_r
00087e54 g     F .text	000001b4 __divdf3
0008d228 g     F .text	000000fc __sfp
0008f100 g     F .text	0000007c __copybits
000afb10 g     O .rwdata	00000408 __malloc_av_
0008d330 g     F .text	00000004 __sinit_lock_release
0008b3f0 g     F .text	000000ac _vsnprintf_r
00085a68 g     F .text	00000070 i2c_stop
00087b70 g     F .text	000002e4 __muldf3
0008f834 g     F .text	00000054 __sread
000931dc g     F .text	00000114 alt_find_file
00092bfc g     F .text	000000a0 alt_dev_llist_insert
00091644 g     F .text	00000020 __malloc_lock
00081e50 g     F .text	00000040 vid_copy_line_to_frame_buffer
00091824 g     F .text	000000b0 sbrk
0008ce74 g     F .text	000001e8 _fflush_r
0008fa84 g     F .text	000000bc _calloc_r
00086654 g     F .text	00000070 QUEUE_New
000b4784 g       *ABS*	00000000 __bss_start
000807ec g     F .text	0000066c LCD_Init
0008917c g     F .text	000000dc memset
00085268 g     F .text	000000e8 main
000b47b0 g     O .bss	00000004 alt_envp
000b4788 g     O .bss	00000004 __malloc_max_total_mem
00086540 g     F .text	00000088 myprintf_hexarray
00091d0c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00084a48 g     F .text	00000058 GUI_ShowTouchPoint
00085c44 g     F .text	00000150 i2c_read
000adb64 g     O .rwdata	00000bc0 tahomabold_20
0008f96c g     F .text	00000008 __sclose
00087760 g     F .text	00000008 matherr
000c45c0 g       *ABS*	00000000 __alt_heap_limit
00083e9c g     F .text	000001c0 vid_print_char_alpha
0008fce0 g     F .text	00000014 fclose
000b112c g     O .rwdata	00000004 cour10_font
000b48e4 g     O .bss	00000190 _atexit0
0008b858 g     F .text	0000161c _dtoa_r
00088900 g     F .text	00000784 _malloc_r
000b1160 g     O .rwdata	00000004 alt_errno
0008dc54 g     F .text	000000a8 _fwalk
00080500 g     F .text	000000b4 PtDistance
000802c8 g     F .text	0000005c RectSet
00088280 g     F .text	00000050 __divsi3
000805f8 g     F .text	00000054 Delay_Ms
00080434 g     F .text	00000064 RectCopy
000ad844 g     O .rodata	00000014 __thenan_df
0008d364 g     F .text	0000013c _malloc_trim_r
00093804 g       *ABS*	00000000 __CTOR_END__
0008f974 g     F .text	000000a4 strcmp
00083c08 g     F .text	00000040 read_from_frame
00093804 g       *ABS*	00000000 __flash_rodata_start
00093804 g       *ABS*	00000000 __DTOR_LIST__
00081bb0 g     F .text	0000003c vid_get_pixel
00090a48 g     F .text	0000005c __nedf2
00091c14 g     F .text	00000034 alt_irq_init
000917c4 g     F .text	00000060 alt_release_fd
00089414 g     F .text	0000006c sprintf
000ad858 g     O .rodata	00000100 __clz_tab
000864a4 g     F .text	00000030 debug_output
000b4798 g     O .bss	00000004 _PathLocale
00093430 g     F .text	00000014 atexit
0008fa18 g     F .text	0000006c _write_r
00080204 g     F .text	00000084 IsPtInRect
0008de68 g     F .text	0000001c setlocale
000b113c g     O .rwdata	00000004 _impure_ptr
000b47a8 g     O .bss	00000004 alt_argc
00092cf8 g     F .text	0000005c _do_dtors
000865c8 g     F .text	0000008c myprintf_dwordarray
0008603c g     F .text	000001c0 I2CL_MultipleRead
00080020 g       .exceptions	00000000 alt_irq_entry
0008ecfc g     F .text	00000060 __ulp
0008f7fc g     F .text	00000038 __isinfd
0008d34c g     F .text	00000018 __fp_unlock_all
00086b00 g     F .text	0000014c Touch_GetXY
000b114c g     O .rwdata	00000008 alt_fs_list
000817cc g     F .text	00000108 vid_print_string
00080020 g       *ABS*	00000000 __ram_exceptions_start
0008de84 g     F .text	0000000c localeconv
00087470 g     F .text	000002c4 __ieee754_sqrt
00091008 g     F .text	00000050 alt_ic_isr_register
000b1174 g       *ABS*	00000000 _edata
000b4a74 g       *ABS*	00000000 _end
00084aa0 g     F .text	00000060 ShowInfo
00082d40 g     F .text	00000054 max3
000801b8 g       *ABS*	00000000 __ram_exceptions_end
000921e0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
000910f4 g     F .text	000000a0 alt_ic_irq_disable
00081cf8 g     F .text	0000004c vid_merge_colors
0008f888 g     F .text	00000088 __swrite
000b1144 g     O .rwdata	00000004 __malloc_trim_threshold
0009312c g     F .text	00000020 altera_nios2_qsys_irq_init
00093444 g     F .text	00000038 exit
0008dcfc g     F .text	000000b8 _fwalk_reent
0008eb54 g     F .text	000001a8 __mdiff
000846b0 g     F .text	0000008c IsContinuedPoint
000882d0 g     F .text	0000005c __modsi3
000c45c0 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
0008d328 g     F .text	00000004 __sfp_lock_release
000866c4 g     F .text	00000030 QUEUE_Delete
0008724c g     F .text	000000dc touch_xy_transform
00081b14 g     F .text	0000009c vid_set_pixel
000937c8 g     F .text	0000003c _exit
00087734 g     F .text	0000002c __isnand
00090c88 g     F .text	00000140 alt_alarm_start
0008119c g     F .text	00000040 vid_scroll_string_quit
0008833c g     F .text	00000060 __muldi3
0008de90 g     F .text	000001a8 __smakebuf_r
00089514 g     F .text	0000008c strlen
00092fd8 g     F .text	00000154 open
00090b08 g     F .text	00000064 __gedf2
00080324 g     F .text	00000088 RectInflate
00092d54 g     F .text	00000030 alt_icache_flush_all
000b1164 g     O .rwdata	00000004 alt_priority_mask
00091058 g     F .text	0000009c alt_ic_irq_enable
0008b3cc g     F .text	00000024 __vfprintf_internal
00087b10 g     F .text	00000060 __subdf3
00082f3c g     F .text	00000238 vid_bres_scan_edges
0008e5a8 g     F .text	000000b0 __lo0bits
000b116c g     O .rwdata	00000008 alt_alarm_list
00082de8 g     F .text	00000064 max_diff3
00092c9c g     F .text	0000005c _do_ctors
00085d94 g     F .text	00000140 I2CL_Write
0008413c g     F .text	000000d0 GUI_ShowWelcome
00083ac0 g     F .text	00000148 merge_color_channels
00090e18 g     F .text	000000c8 close
0009142c g     F .text	00000080 alt_load
00086ac8 g     F .text	00000038 Touch_EmptyFifo
00088448 g     F .text	00000224 __pack_d
000888ec g     F .text	00000014 free
0008d32c g     F .text	00000004 __sinit_lock_acquire
0008e328 g     F .text	00000114 __multadd
0008e300 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08406e14 	ori	at,at,440
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800ec0 	call	800ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000306 	br	80098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)

00080094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   8009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800e8:	ef80083a 	eret

000800ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800ec:	defff904 	addi	sp,sp,-28
   800f0:	dfc00615 	stw	ra,24(sp)
   800f4:	df000515 	stw	fp,20(sp)
   800f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   800fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80100:	0005313a 	rdctl	r2,ipending
   80104:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80114:	00800044 	movi	r2,1
   80118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8011c:	e0fffb17 	ldw	r3,-20(fp)
   80120:	e0bffc17 	ldw	r2,-16(fp)
   80124:	1884703a 	and	r2,r3,r2
   80128:	10001726 	beq	r2,zero,80188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8012c:	00c002f4 	movhi	r3,11
   80130:	18d1f904 	addi	r3,r3,18404
   80134:	e0bffd17 	ldw	r2,-12(fp)
   80138:	100490fa 	slli	r2,r2,3
   8013c:	1885883a 	add	r2,r3,r2
   80140:	10c00017 	ldw	r3,0(r2)
   80144:	010002f4 	movhi	r4,11
   80148:	2111f904 	addi	r4,r4,18404
   8014c:	e0bffd17 	ldw	r2,-12(fp)
   80150:	100490fa 	slli	r2,r2,3
   80154:	2085883a 	add	r2,r4,r2
   80158:	10800104 	addi	r2,r2,4
   8015c:	10800017 	ldw	r2,0(r2)
   80160:	1009883a 	mov	r4,r2
   80164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8016c:	0005313a 	rdctl	r2,ipending
   80170:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
   80178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   8017c:	e0bffb17 	ldw	r2,-20(fp)
   80180:	103fe31e 	bne	r2,zero,80110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   80184:	00000706 	br	801a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   80188:	e0bffc17 	ldw	r2,-16(fp)
   8018c:	1085883a 	add	r2,r2,r2
   80190:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80194:	e0bffd17 	ldw	r2,-12(fp)
   80198:	10800044 	addi	r2,r2,1
   8019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a0:	003fde06 	br	8011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   801a4:	e037883a 	mov	sp,fp
   801a8:	dfc00117 	ldw	ra,4(sp)
   801ac:	df000017 	ldw	fp,0(sp)
   801b0:	dec00204 	addi	sp,sp,8
   801b4:	f800283a 	ret

Disassembly of section .text:

000801b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   801b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   801bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   801c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   801c4:	00bffd16 	blt	zero,r2,801bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   801c8:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   801cc:	ded17014 	ori	sp,sp,17856
    movhi gp, %hi(_gp)
   801d0:	068002f4 	movhi	gp,11
    ori gp, gp, %lo(_gp)
   801d4:	d6a44b14 	ori	gp,gp,37164
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   801d8:	008002f4 	movhi	r2,11
    ori r2, r2, %lo(__bss_start)
   801dc:	1091e114 	ori	r2,r2,18308

    movhi r3, %hi(__bss_end)
   801e0:	00c002f4 	movhi	r3,11
    ori r3, r3, %lo(__bss_end)
   801e4:	18d29d14 	ori	r3,r3,19060

    beq r2, r3, 1f
   801e8:	10c00326 	beq	r2,r3,801f8 <_start+0x40>

0:
    stw zero, (r2)
   801ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   801f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   801f4:	10fffd36 	bltu	r2,r3,801ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   801f8:	009142c0 	call	9142c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   801fc:	00915cc0 	call	915cc <alt_main>

00080200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80200:	003fff06 	br	80200 <alt_after_alt_main>

00080204 <IsPtInRect>:

//#define BOUND(x, mini, maxi) ((x<(mini)?(mini):( (x>(maxi))?(maxi):(x) )))

//#define COPY_POINT(pt_des, pt_src)  memcpy(&pt_des, &pt_src,sizeof(POINT))

bool IsPtInRect(POINT *pt, RECT *rc){
   80204:	defffc04 	addi	sp,sp,-16
   80208:	df000315 	stw	fp,12(sp)
   8020c:	df000304 	addi	fp,sp,12
   80210:	e13ffe15 	stw	r4,-8(fp)
   80214:	e17fff15 	stw	r5,-4(fp)
    bool bYes = FALSE;
   80218:	e03ffd15 	stw	zero,-12(fp)
    
    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
   8021c:	e0bffe17 	ldw	r2,-8(fp)
   80220:	10c00017 	ldw	r3,0(r2)
   80224:	e0bfff17 	ldw	r2,-4(fp)
   80228:	10800017 	ldw	r2,0(r2)
   8022c:	18801116 	blt	r3,r2,80274 <IsPtInRect+0x70>
   80230:	e0bffe17 	ldw	r2,-8(fp)
   80234:	10800017 	ldw	r2,0(r2)
   80238:	e0ffff17 	ldw	r3,-4(fp)
   8023c:	18c00117 	ldw	r3,4(r3)
   80240:	18800c16 	blt	r3,r2,80274 <IsPtInRect+0x70>
   80244:	e0bffe17 	ldw	r2,-8(fp)
   80248:	10c00117 	ldw	r3,4(r2)
   8024c:	e0bfff17 	ldw	r2,-4(fp)
   80250:	10800217 	ldw	r2,8(r2)
   80254:	18800716 	blt	r3,r2,80274 <IsPtInRect+0x70>
   80258:	e0bffe17 	ldw	r2,-8(fp)
   8025c:	10800117 	ldw	r2,4(r2)
   80260:	e0ffff17 	ldw	r3,-4(fp)
   80264:	18c00317 	ldw	r3,12(r3)
   80268:	18800216 	blt	r3,r2,80274 <IsPtInRect+0x70>
        bYes = TRUE;
   8026c:	00800044 	movi	r2,1
   80270:	e0bffd15 	stw	r2,-12(fp)
    
    return bYes;
   80274:	e0bffd17 	ldw	r2,-12(fp)
}
   80278:	e037883a 	mov	sp,fp
   8027c:	df000017 	ldw	fp,0(sp)
   80280:	dec00104 	addi	sp,sp,4
   80284:	f800283a 	ret

00080288 <PtSet>:

void PtSet(POINT *pt, int x, int y){
   80288:	defffc04 	addi	sp,sp,-16
   8028c:	df000315 	stw	fp,12(sp)
   80290:	df000304 	addi	fp,sp,12
   80294:	e13ffd15 	stw	r4,-12(fp)
   80298:	e17ffe15 	stw	r5,-8(fp)
   8029c:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
   802a0:	e0bffd17 	ldw	r2,-12(fp)
   802a4:	e0fffe17 	ldw	r3,-8(fp)
   802a8:	10c00015 	stw	r3,0(r2)
    pt->y = y;
   802ac:	e0bffd17 	ldw	r2,-12(fp)
   802b0:	e0ffff17 	ldw	r3,-4(fp)
   802b4:	10c00115 	stw	r3,4(r2)
}
   802b8:	e037883a 	mov	sp,fp
   802bc:	df000017 	ldw	fp,0(sp)
   802c0:	dec00104 	addi	sp,sp,4
   802c4:	f800283a 	ret

000802c8 <RectSet>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
   802c8:	defffb04 	addi	sp,sp,-20
   802cc:	df000415 	stw	fp,16(sp)
   802d0:	df000404 	addi	fp,sp,16
   802d4:	e13ffc15 	stw	r4,-16(fp)
   802d8:	e17ffd15 	stw	r5,-12(fp)
   802dc:	e1bffe15 	stw	r6,-8(fp)
   802e0:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
   802e4:	e0bffc17 	ldw	r2,-16(fp)
   802e8:	e0fffd17 	ldw	r3,-12(fp)
   802ec:	10c00015 	stw	r3,0(r2)
    rc->right = right;
   802f0:	e0bffc17 	ldw	r2,-16(fp)
   802f4:	e0fffe17 	ldw	r3,-8(fp)
   802f8:	10c00115 	stw	r3,4(r2)
    rc->top = top;
   802fc:	e0bffc17 	ldw	r2,-16(fp)
   80300:	e0ffff17 	ldw	r3,-4(fp)
   80304:	10c00215 	stw	r3,8(r2)
    rc->bottom = bottom;
   80308:	e0bffc17 	ldw	r2,-16(fp)
   8030c:	e0c00117 	ldw	r3,4(fp)
   80310:	10c00315 	stw	r3,12(r2)
}
   80314:	e037883a 	mov	sp,fp
   80318:	df000017 	ldw	fp,0(sp)
   8031c:	dec00104 	addi	sp,sp,4
   80320:	f800283a 	ret

00080324 <RectInflate>:

void RectInflate(RECT *rc, int x, int y){
   80324:	defffc04 	addi	sp,sp,-16
   80328:	df000315 	stw	fp,12(sp)
   8032c:	df000304 	addi	fp,sp,12
   80330:	e13ffd15 	stw	r4,-12(fp)
   80334:	e17ffe15 	stw	r5,-8(fp)
   80338:	e1bfff15 	stw	r6,-4(fp)
    rc->left -= x;
   8033c:	e0bffd17 	ldw	r2,-12(fp)
   80340:	10c00017 	ldw	r3,0(r2)
   80344:	e0bffe17 	ldw	r2,-8(fp)
   80348:	1887c83a 	sub	r3,r3,r2
   8034c:	e0bffd17 	ldw	r2,-12(fp)
   80350:	10c00015 	stw	r3,0(r2)
    rc->right += x;
   80354:	e0bffd17 	ldw	r2,-12(fp)
   80358:	10c00117 	ldw	r3,4(r2)
   8035c:	e0bffe17 	ldw	r2,-8(fp)
   80360:	1887883a 	add	r3,r3,r2
   80364:	e0bffd17 	ldw	r2,-12(fp)
   80368:	10c00115 	stw	r3,4(r2)
    rc->top -= y;
   8036c:	e0bffd17 	ldw	r2,-12(fp)
   80370:	10c00217 	ldw	r3,8(r2)
   80374:	e0bfff17 	ldw	r2,-4(fp)
   80378:	1887c83a 	sub	r3,r3,r2
   8037c:	e0bffd17 	ldw	r2,-12(fp)
   80380:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
   80384:	e0bffd17 	ldw	r2,-12(fp)
   80388:	10c00317 	ldw	r3,12(r2)
   8038c:	e0bfff17 	ldw	r2,-4(fp)
   80390:	1887883a 	add	r3,r3,r2
   80394:	e0bffd17 	ldw	r2,-12(fp)
   80398:	10c00315 	stw	r3,12(r2)
}
   8039c:	e037883a 	mov	sp,fp
   803a0:	df000017 	ldw	fp,0(sp)
   803a4:	dec00104 	addi	sp,sp,4
   803a8:	f800283a 	ret

000803ac <RectOffset>:

void RectOffset(RECT *rc, int x, int y){
   803ac:	defffc04 	addi	sp,sp,-16
   803b0:	df000315 	stw	fp,12(sp)
   803b4:	df000304 	addi	fp,sp,12
   803b8:	e13ffd15 	stw	r4,-12(fp)
   803bc:	e17ffe15 	stw	r5,-8(fp)
   803c0:	e1bfff15 	stw	r6,-4(fp)
    rc->left += x;
   803c4:	e0bffd17 	ldw	r2,-12(fp)
   803c8:	10c00017 	ldw	r3,0(r2)
   803cc:	e0bffe17 	ldw	r2,-8(fp)
   803d0:	1887883a 	add	r3,r3,r2
   803d4:	e0bffd17 	ldw	r2,-12(fp)
   803d8:	10c00015 	stw	r3,0(r2)
    rc->right += x;
   803dc:	e0bffd17 	ldw	r2,-12(fp)
   803e0:	10c00117 	ldw	r3,4(r2)
   803e4:	e0bffe17 	ldw	r2,-8(fp)
   803e8:	1887883a 	add	r3,r3,r2
   803ec:	e0bffd17 	ldw	r2,-12(fp)
   803f0:	10c00115 	stw	r3,4(r2)
    rc->top += y;
   803f4:	e0bffd17 	ldw	r2,-12(fp)
   803f8:	10c00217 	ldw	r3,8(r2)
   803fc:	e0bfff17 	ldw	r2,-4(fp)
   80400:	1887883a 	add	r3,r3,r2
   80404:	e0bffd17 	ldw	r2,-12(fp)
   80408:	10c00215 	stw	r3,8(r2)
    rc->bottom += y;
   8040c:	e0bffd17 	ldw	r2,-12(fp)
   80410:	10c00317 	ldw	r3,12(r2)
   80414:	e0bfff17 	ldw	r2,-4(fp)
   80418:	1887883a 	add	r3,r3,r2
   8041c:	e0bffd17 	ldw	r2,-12(fp)
   80420:	10c00315 	stw	r3,12(r2)
}
   80424:	e037883a 	mov	sp,fp
   80428:	df000017 	ldw	fp,0(sp)
   8042c:	dec00104 	addi	sp,sp,4
   80430:	f800283a 	ret

00080434 <RectCopy>:

void RectCopy(RECT *rcDes, RECT *rcSrc){
   80434:	defffd04 	addi	sp,sp,-12
   80438:	df000215 	stw	fp,8(sp)
   8043c:	df000204 	addi	fp,sp,8
   80440:	e13ffe15 	stw	r4,-8(fp)
   80444:	e17fff15 	stw	r5,-4(fp)
    rcDes->left = rcSrc->left;
   80448:	e0bfff17 	ldw	r2,-4(fp)
   8044c:	10c00017 	ldw	r3,0(r2)
   80450:	e0bffe17 	ldw	r2,-8(fp)
   80454:	10c00015 	stw	r3,0(r2)
    rcDes->right = rcSrc->right;
   80458:	e0bfff17 	ldw	r2,-4(fp)
   8045c:	10c00117 	ldw	r3,4(r2)
   80460:	e0bffe17 	ldw	r2,-8(fp)
   80464:	10c00115 	stw	r3,4(r2)
    rcDes->top = rcSrc->top;
   80468:	e0bfff17 	ldw	r2,-4(fp)
   8046c:	10c00217 	ldw	r3,8(r2)
   80470:	e0bffe17 	ldw	r2,-8(fp)
   80474:	10c00215 	stw	r3,8(r2)
    rcDes->bottom = rcSrc->bottom;
   80478:	e0bfff17 	ldw	r2,-4(fp)
   8047c:	10c00317 	ldw	r3,12(r2)
   80480:	e0bffe17 	ldw	r2,-8(fp)
   80484:	10c00315 	stw	r3,12(r2)
}
   80488:	e037883a 	mov	sp,fp
   8048c:	df000017 	ldw	fp,0(sp)
   80490:	dec00104 	addi	sp,sp,4
   80494:	f800283a 	ret

00080498 <RectWidth>:

int RectWidth(RECT *rc){
   80498:	defffe04 	addi	sp,sp,-8
   8049c:	df000115 	stw	fp,4(sp)
   804a0:	df000104 	addi	fp,sp,4
   804a4:	e13fff15 	stw	r4,-4(fp)
    return (rc->right-rc->left);
   804a8:	e0bfff17 	ldw	r2,-4(fp)
   804ac:	10c00117 	ldw	r3,4(r2)
   804b0:	e0bfff17 	ldw	r2,-4(fp)
   804b4:	10800017 	ldw	r2,0(r2)
   804b8:	1885c83a 	sub	r2,r3,r2
}
   804bc:	e037883a 	mov	sp,fp
   804c0:	df000017 	ldw	fp,0(sp)
   804c4:	dec00104 	addi	sp,sp,4
   804c8:	f800283a 	ret

000804cc <RectHeight>:

int RectHeight(RECT *rc){
   804cc:	defffe04 	addi	sp,sp,-8
   804d0:	df000115 	stw	fp,4(sp)
   804d4:	df000104 	addi	fp,sp,4
   804d8:	e13fff15 	stw	r4,-4(fp)
    return (rc->bottom-rc->top);
   804dc:	e0bfff17 	ldw	r2,-4(fp)
   804e0:	10c00317 	ldw	r3,12(r2)
   804e4:	e0bfff17 	ldw	r2,-4(fp)
   804e8:	10800217 	ldw	r2,8(r2)
   804ec:	1885c83a 	sub	r2,r3,r2
}
   804f0:	e037883a 	mov	sp,fp
   804f4:	df000017 	ldw	fp,0(sp)
   804f8:	dec00104 	addi	sp,sp,4
   804fc:	f800283a 	ret

00080500 <PtDistance>:

int PtDistance(POINT *pt1, POINT *pt2){
   80500:	defff904 	addi	sp,sp,-28
   80504:	dfc00615 	stw	ra,24(sp)
   80508:	df000515 	stw	fp,20(sp)
   8050c:	df000504 	addi	fp,sp,20
   80510:	e13ffe15 	stw	r4,-8(fp)
   80514:	e17fff15 	stw	r5,-4(fp)
    int nDistance;
    int a, b;
    a = pt1->x - pt2->x;
   80518:	e0bffe17 	ldw	r2,-8(fp)
   8051c:	10c00017 	ldw	r3,0(r2)
   80520:	e0bfff17 	ldw	r2,-4(fp)
   80524:	10800017 	ldw	r2,0(r2)
   80528:	1885c83a 	sub	r2,r3,r2
   8052c:	e0bffb15 	stw	r2,-20(fp)
    b = pt1->y - pt2->y;
   80530:	e0bffe17 	ldw	r2,-8(fp)
   80534:	10c00117 	ldw	r3,4(r2)
   80538:	e0bfff17 	ldw	r2,-4(fp)
   8053c:	10800117 	ldw	r2,4(r2)
   80540:	1885c83a 	sub	r2,r3,r2
   80544:	e0bffc15 	stw	r2,-16(fp)
    nDistance = a*a + b*b;
   80548:	e0fffb17 	ldw	r3,-20(fp)
   8054c:	e0bffb17 	ldw	r2,-20(fp)
   80550:	1887383a 	mul	r3,r3,r2
   80554:	e13ffc17 	ldw	r4,-16(fp)
   80558:	e0bffc17 	ldw	r2,-16(fp)
   8055c:	2085383a 	mul	r2,r4,r2
   80560:	1885883a 	add	r2,r3,r2
   80564:	e0bffd15 	stw	r2,-12(fp)
    nDistance = sqrt(nDistance);
   80568:	e13ffd17 	ldw	r4,-12(fp)
   8056c:	00880640 	call	88064 <__floatsidf>
   80570:	100b883a 	mov	r5,r2
   80574:	180d883a 	mov	r6,r3
   80578:	2809883a 	mov	r4,r5
   8057c:	300b883a 	mov	r5,r6
   80580:	00873280 	call	87328 <sqrt>
   80584:	100b883a 	mov	r5,r2
   80588:	180d883a 	mov	r6,r3
   8058c:	2809883a 	mov	r4,r5
   80590:	300b883a 	mov	r5,r6
   80594:	00881380 	call	88138 <__fixdfsi>
   80598:	e0bffd15 	stw	r2,-12(fp)
    
    return nDistance;
   8059c:	e0bffd17 	ldw	r2,-12(fp)
}
   805a0:	e037883a 	mov	sp,fp
   805a4:	dfc00117 	ldw	ra,4(sp)
   805a8:	df000017 	ldw	fp,0(sp)
   805ac:	dec00204 	addi	sp,sp,8
   805b0:	f800283a 	ret

000805b4 <PtCopy>:

void PtCopy(POINT *ptDes, POINT *ptSrc){
   805b4:	defffd04 	addi	sp,sp,-12
   805b8:	df000215 	stw	fp,8(sp)
   805bc:	df000204 	addi	fp,sp,8
   805c0:	e13ffe15 	stw	r4,-8(fp)
   805c4:	e17fff15 	stw	r5,-4(fp)
    ptDes->x = ptSrc->x;
   805c8:	e0bfff17 	ldw	r2,-4(fp)
   805cc:	10c00017 	ldw	r3,0(r2)
   805d0:	e0bffe17 	ldw	r2,-8(fp)
   805d4:	10c00015 	stw	r3,0(r2)
    ptDes->y = ptSrc->y;
   805d8:	e0bfff17 	ldw	r2,-4(fp)
   805dc:	10c00117 	ldw	r3,4(r2)
   805e0:	e0bffe17 	ldw	r2,-8(fp)
   805e4:	10c00115 	stw	r3,4(r2)
}
   805e8:	e037883a 	mov	sp,fp
   805ec:	df000017 	ldw	fp,0(sp)
   805f0:	dec00104 	addi	sp,sp,4
   805f4:	f800283a 	ret

000805f8 <Delay_Ms>:
#define BLUE 0x001f
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
   805f8:	defffd04 	addi	sp,sp,-12
   805fc:	dfc00215 	stw	ra,8(sp)
   80600:	df000115 	stw	fp,4(sp)
   80604:	df000104 	addi	fp,sp,4
   80608:	2005883a 	mov	r2,r4
   8060c:	e0bfff0d 	sth	r2,-4(fp)
    while(count_ms--)
   80610:	00000206 	br	8061c <Delay_Ms+0x24>
    {
        usleep(1000);
   80614:	0100fa04 	movi	r4,1000
   80618:	0091a700 	call	91a70 <usleep>
#define BLACK  0x0000
#define WHITE 0xffff

void Delay_Ms(alt_u16 count_ms)
{
    while(count_ms--)
   8061c:	e0bfff0b 	ldhu	r2,-4(fp)
   80620:	1004c03a 	cmpne	r2,r2,zero
   80624:	e0ffff0b 	ldhu	r3,-4(fp)
   80628:	18ffffc4 	addi	r3,r3,-1
   8062c:	e0ffff0d 	sth	r3,-4(fp)
   80630:	10803fcc 	andi	r2,r2,255
   80634:	103ff71e 	bne	r2,zero,80614 <Delay_Ms+0x1c>
    {
        usleep(1000);
    }
}
   80638:	e037883a 	mov	sp,fp
   8063c:	dfc00117 	ldw	ra,4(sp)
   80640:	df000017 	ldw	fp,0(sp)
   80644:	dec00204 	addi	sp,sp,8
   80648:	f800283a 	ret

0008064c <LCD_SetCursor>:


void LCD_SetCursor(alt_u16 Xpos, alt_u16 Ypos)
{
   8064c:	defffd04 	addi	sp,sp,-12
   80650:	df000215 	stw	fp,8(sp)
   80654:	df000204 	addi	fp,sp,8
   80658:	2007883a 	mov	r3,r4
   8065c:	2805883a 	mov	r2,r5
   80660:	e0fffe0d 	sth	r3,-8(fp)
   80664:	e0bfff0d 	sth	r2,-4(fp)
	 LCD_WR_REG(0x002A);
   80668:	00c00a84 	movi	r3,42
   8066c:	00800434 	movhi	r2,16
   80670:	10842604 	addi	r2,r2,4248
   80674:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos>>8);
   80678:	e0bffe0b 	ldhu	r2,-8(fp)
   8067c:	1004d23a 	srli	r2,r2,8
   80680:	10ffffcc 	andi	r3,r2,65535
   80684:	00800434 	movhi	r2,16
   80688:	10842704 	addi	r2,r2,4252
   8068c:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Xpos&0XFF);
   80690:	e0bffe0b 	ldhu	r2,-8(fp)
   80694:	10c03fcc 	andi	r3,r2,255
   80698:	00800434 	movhi	r2,16
   8069c:	10842704 	addi	r2,r2,4252
   806a0:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002B);
   806a4:	00c00ac4 	movi	r3,43
   806a8:	00800434 	movhi	r2,16
   806ac:	10842604 	addi	r2,r2,4248
   806b0:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos>>8);
   806b4:	e0bfff0b 	ldhu	r2,-4(fp)
   806b8:	1004d23a 	srli	r2,r2,8
   806bc:	10ffffcc 	andi	r3,r2,65535
   806c0:	00800434 	movhi	r2,16
   806c4:	10842704 	addi	r2,r2,4252
   806c8:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(Ypos&0XFF);
   806cc:	e0bfff0b 	ldhu	r2,-4(fp)
   806d0:	10c03fcc 	andi	r3,r2,255
   806d4:	00800434 	movhi	r2,16
   806d8:	10842704 	addi	r2,r2,4252
   806dc:	10c00035 	stwio	r3,0(r2)
	 LCD_WR_REG(0x002C);
   806e0:	00c00b04 	movi	r3,44
   806e4:	00800434 	movhi	r2,16
   806e8:	10842604 	addi	r2,r2,4248
   806ec:	10c00035 	stwio	r3,0(r2)
}
   806f0:	e037883a 	mov	sp,fp
   806f4:	df000017 	ldw	fp,0(sp)
   806f8:	dec00104 	addi	sp,sp,4
   806fc:	f800283a 	ret

00080700 <LCD_Clear>:

void LCD_Clear(alt_u16 Color)
{
   80700:	defffc04 	addi	sp,sp,-16
   80704:	dfc00315 	stw	ra,12(sp)
   80708:	df000215 	stw	fp,8(sp)
   8070c:	df000204 	addi	fp,sp,8
   80710:	2005883a 	mov	r2,r4
   80714:	e0bfff0d 	sth	r2,-4(fp)
        alt_u32 index=0;
   80718:	e03ffe15 	stw	zero,-8(fp)
        LCD_SetCursor(0x00,0x0000);
   8071c:	0009883a 	mov	r4,zero
   80720:	000b883a 	mov	r5,zero
   80724:	008064c0 	call	8064c <LCD_SetCursor>
        LCD_WR_REG(0x002C);
   80728:	00c00b04 	movi	r3,44
   8072c:	00800434 	movhi	r2,16
   80730:	10842604 	addi	r2,r2,4248
   80734:	10c00035 	stwio	r3,0(r2)
        for(index=0;index<76800;index++)
   80738:	e03ffe15 	stw	zero,-8(fp)
   8073c:	00000706 	br	8075c <LCD_Clear+0x5c>
        {
        	LCD_WR_DATA(Color);
   80740:	e0ffff0b 	ldhu	r3,-4(fp)
   80744:	00800434 	movhi	r2,16
   80748:	10842704 	addi	r2,r2,4252
   8074c:	10c00035 	stwio	r3,0(r2)
void LCD_Clear(alt_u16 Color)
{
        alt_u32 index=0;
        LCD_SetCursor(0x00,0x0000);
        LCD_WR_REG(0x002C);
        for(index=0;index<76800;index++)
   80750:	e0bffe17 	ldw	r2,-8(fp)
   80754:	10800044 	addi	r2,r2,1
   80758:	e0bffe15 	stw	r2,-8(fp)
   8075c:	e0bffe17 	ldw	r2,-8(fp)
   80760:	00c00074 	movhi	r3,1
   80764:	18caffc4 	addi	r3,r3,11263
   80768:	18bff52e 	bgeu	r3,r2,80740 <LCD_Clear+0x40>
        {
        	LCD_WR_DATA(Color);
        }
}
   8076c:	e037883a 	mov	sp,fp
   80770:	dfc00117 	ldw	ra,4(sp)
   80774:	df000017 	ldw	fp,0(sp)
   80778:	dec00204 	addi	sp,sp,8
   8077c:	f800283a 	ret

00080780 <LCD_DrawPoint>:

void LCD_DrawPoint(alt_u16 x,alt_u16 y,alt_u16 color )
{
   80780:	defffb04 	addi	sp,sp,-20
   80784:	dfc00415 	stw	ra,16(sp)
   80788:	df000315 	stw	fp,12(sp)
   8078c:	df000304 	addi	fp,sp,12
   80790:	2807883a 	mov	r3,r5
   80794:	3005883a 	mov	r2,r6
   80798:	e13ffd0d 	sth	r4,-12(fp)
   8079c:	e0fffe0d 	sth	r3,-8(fp)
   807a0:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(x,y);
   807a4:	e0fffd0b 	ldhu	r3,-12(fp)
   807a8:	e0bffe0b 	ldhu	r2,-8(fp)
   807ac:	1809883a 	mov	r4,r3
   807b0:	100b883a 	mov	r5,r2
   807b4:	008064c0 	call	8064c <LCD_SetCursor>
        LCD_WR_REG(0x002C);
   807b8:	00c00b04 	movi	r3,44
   807bc:	00800434 	movhi	r2,16
   807c0:	10842604 	addi	r2,r2,4248
   807c4:	10c00035 	stwio	r3,0(r2)
        LCD_WR_DATA(color);
   807c8:	e0ffff0b 	ldhu	r3,-4(fp)
   807cc:	00800434 	movhi	r2,16
   807d0:	10842704 	addi	r2,r2,4252
   807d4:	10c00035 	stwio	r3,0(r2)
}
   807d8:	e037883a 	mov	sp,fp
   807dc:	dfc00117 	ldw	ra,4(sp)
   807e0:	df000017 	ldw	fp,0(sp)
   807e4:	dec00204 	addi	sp,sp,8
   807e8:	f800283a 	ret

000807ec <LCD_Init>:
void LCD_Init()
{
   807ec:	defffe04 	addi	sp,sp,-8
   807f0:	dfc00115 	stw	ra,4(sp)
   807f4:	df000015 	stw	fp,0(sp)
   807f8:	d839883a 	mov	fp,sp
	alt_u16 data1,data2;
	alt_u16 data3,data4;
	Set_LCD_RST;
   807fc:	00c00044 	movi	r3,1
   80800:	00800434 	movhi	r2,16
   80804:	10842004 	addi	r2,r2,4224
   80808:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(1);
   8080c:	01000044 	movi	r4,1
   80810:	00805f80 	call	805f8 <Delay_Ms>
	Clr_LCD_RST;
   80814:	0007883a 	mov	r3,zero
   80818:	00800434 	movhi	r2,16
   8081c:	10842004 	addi	r2,r2,4224
   80820:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(10);       // Delay 10ms // This delay time is necessary
   80824:	01000284 	movi	r4,10
   80828:	00805f80 	call	805f8 <Delay_Ms>
	Set_LCD_RST;
   8082c:	00c00044 	movi	r3,1
   80830:	00800434 	movhi	r2,16
   80834:	10842004 	addi	r2,r2,4224
   80838:	10c00035 	stwio	r3,0(r2)
	Delay_Ms(120);       // Delay 120 ms
   8083c:	01001e04 	movi	r4,120
   80840:	00805f80 	call	805f8 <Delay_Ms>
//	Clr_LCD_CS;



	LCD_WR_REG(0x0011); //Exit Sleep
   80844:	00c00444 	movi	r3,17
   80848:	00800434 	movhi	r2,16
   8084c:	10842604 	addi	r2,r2,4248
   80850:	10c00035 	stwio	r3,0(r2)
	LCD_WR_REG(0x00CF);
   80854:	00c033c4 	movi	r3,207
   80858:	00800434 	movhi	r2,16
   8085c:	10842604 	addi	r2,r2,4248
   80860:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80864:	0007883a 	mov	r3,zero
   80868:	00800434 	movhi	r2,16
   8086c:	10842704 	addi	r2,r2,4252
   80870:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0081);
   80874:	00c02044 	movi	r3,129
   80878:	00800434 	movhi	r2,16
   8087c:	10842704 	addi	r2,r2,4252
   80880:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00c0);
   80884:	00c03004 	movi	r3,192
   80888:	00800434 	movhi	r2,16
   8088c:	10842704 	addi	r2,r2,4252
   80890:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00ED);
   80894:	00c03b44 	movi	r3,237
   80898:	00800434 	movhi	r2,16
   8089c:	10842604 	addi	r2,r2,4248
   808a0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0064);
   808a4:	00c01904 	movi	r3,100
   808a8:	00800434 	movhi	r2,16
   808ac:	10842704 	addi	r2,r2,4252
   808b0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0003);
   808b4:	00c000c4 	movi	r3,3
   808b8:	00800434 	movhi	r2,16
   808bc:	10842704 	addi	r2,r2,4252
   808c0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0012);
   808c4:	00c00484 	movi	r3,18
   808c8:	00800434 	movhi	r2,16
   808cc:	10842704 	addi	r2,r2,4252
   808d0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X0081);
   808d4:	00c02044 	movi	r3,129
   808d8:	00800434 	movhi	r2,16
   808dc:	10842704 	addi	r2,r2,4252
   808e0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E8);
   808e4:	00c03a04 	movi	r3,232
   808e8:	00800434 	movhi	r2,16
   808ec:	10842604 	addi	r2,r2,4248
   808f0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0085);
   808f4:	00c02144 	movi	r3,133
   808f8:	00800434 	movhi	r2,16
   808fc:	10842704 	addi	r2,r2,4252
   80900:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   80904:	00c00044 	movi	r3,1
   80908:	00800434 	movhi	r2,16
   8090c:	10842704 	addi	r2,r2,4252
   80910:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00798);
   80914:	00c1e604 	movi	r3,1944
   80918:	00800434 	movhi	r2,16
   8091c:	10842704 	addi	r2,r2,4252
   80920:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00CB);
   80924:	00c032c4 	movi	r3,203
   80928:	00800434 	movhi	r2,16
   8092c:	10842604 	addi	r2,r2,4248
   80930:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0039);
   80934:	00c00e44 	movi	r3,57
   80938:	00800434 	movhi	r2,16
   8093c:	10842704 	addi	r2,r2,4252
   80940:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002C);
   80944:	00c00b04 	movi	r3,44
   80948:	00800434 	movhi	r2,16
   8094c:	10842704 	addi	r2,r2,4252
   80950:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80954:	0007883a 	mov	r3,zero
   80958:	00800434 	movhi	r2,16
   8095c:	10842704 	addi	r2,r2,4252
   80960:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
   80964:	00c00d04 	movi	r3,52
   80968:	00800434 	movhi	r2,16
   8096c:	10842704 	addi	r2,r2,4252
   80970:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0002);
   80974:	00c00084 	movi	r3,2
   80978:	00800434 	movhi	r2,16
   8097c:	10842704 	addi	r2,r2,4252
   80980:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F7);
   80984:	00c03dc4 	movi	r3,247
   80988:	00800434 	movhi	r2,16
   8098c:	10842604 	addi	r2,r2,4248
   80990:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
   80994:	00c00804 	movi	r3,32
   80998:	00800434 	movhi	r2,16
   8099c:	10842704 	addi	r2,r2,4252
   809a0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00EA);
   809a4:	00c03a84 	movi	r3,234
   809a8:	00800434 	movhi	r2,16
   809ac:	10842604 	addi	r2,r2,4248
   809b0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   809b4:	0007883a 	mov	r3,zero
   809b8:	00800434 	movhi	r2,16
   809bc:	10842704 	addi	r2,r2,4252
   809c0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   809c4:	0007883a 	mov	r3,zero
   809c8:	00800434 	movhi	r2,16
   809cc:	10842704 	addi	r2,r2,4252
   809d0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B1);
   809d4:	00c02c44 	movi	r3,177
   809d8:	00800434 	movhi	r2,16
   809dc:	10842604 	addi	r2,r2,4248
   809e0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   809e4:	0007883a 	mov	r3,zero
   809e8:	00800434 	movhi	r2,16
   809ec:	10842704 	addi	r2,r2,4252
   809f0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001b);
   809f4:	00c006c4 	movi	r3,27
   809f8:	00800434 	movhi	r2,16
   809fc:	10842704 	addi	r2,r2,4252
   80a00:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00B6);
   80a04:	00c02d84 	movi	r3,182
   80a08:	00800434 	movhi	r2,16
   80a0c:	10842604 	addi	r2,r2,4248
   80a10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000A);
   80a14:	00c00284 	movi	r3,10
   80a18:	00800434 	movhi	r2,16
   80a1c:	10842704 	addi	r2,r2,4252
   80a20:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00A2);
   80a24:	00c02884 	movi	r3,162
   80a28:	00800434 	movhi	r2,16
   80a2c:	10842704 	addi	r2,r2,4252
   80a30:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C0);    //Power control
   80a34:	00c03004 	movi	r3,192
   80a38:	00800434 	movhi	r2,16
   80a3c:	10842604 	addi	r2,r2,4248
   80a40:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);   //VRH[5:0]
   80a44:	00c00144 	movi	r3,5
   80a48:	00800434 	movhi	r2,16
   80a4c:	10842704 	addi	r2,r2,4252
   80a50:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C1);    //Power control
   80a54:	00c03044 	movi	r3,193
   80a58:	00800434 	movhi	r2,16
   80a5c:	10842604 	addi	r2,r2,4248
   80a60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0011);   //SAP[2:0];BT[3:0]
   80a64:	00c00444 	movi	r3,17
   80a68:	00800434 	movhi	r2,16
   80a6c:	10842704 	addi	r2,r2,4252
   80a70:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00C5);    //VCM control
   80a74:	00c03144 	movi	r3,197
   80a78:	00800434 	movhi	r2,16
   80a7c:	10842604 	addi	r2,r2,4248
   80a80:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3F
   80a84:	00c01144 	movi	r3,69
   80a88:	00800434 	movhi	r2,16
   80a8c:	10842704 	addi	r2,r2,4252
   80a90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0045);       //3C
   80a94:	00c01144 	movi	r3,69
   80a98:	00800434 	movhi	r2,16
   80a9c:	10842704 	addi	r2,r2,4252
   80aa0:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x00C7);    //VCM control2
   80aa4:	00c031c4 	movi	r3,199
   80aa8:	00800434 	movhi	r2,16
   80aac:	10842604 	addi	r2,r2,4248
   80ab0:	10c00035 	stwio	r3,0(r2)
		 LCD_WR_DATA(0X00a2);
   80ab4:	00c02884 	movi	r3,162
   80ab8:	00800434 	movhi	r2,16
   80abc:	10842704 	addi	r2,r2,4252
   80ac0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0036);    // Memory Access Control
   80ac4:	00c00d84 	movi	r3,54
   80ac8:	00800434 	movhi	r2,16
   80acc:	10842604 	addi	r2,r2,4248
   80ad0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);//48
   80ad4:	00c00204 	movi	r3,8
   80ad8:	00800434 	movhi	r2,16
   80adc:	10842704 	addi	r2,r2,4252
   80ae0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00F2);    // 3Gamma Function Disable
   80ae4:	00c03c84 	movi	r3,242
   80ae8:	00800434 	movhi	r2,16
   80aec:	10842604 	addi	r2,r2,4248
   80af0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80af4:	0007883a 	mov	r3,zero
   80af8:	00800434 	movhi	r2,16
   80afc:	10842704 	addi	r2,r2,4252
   80b00:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0026);    //Gamma curve selected
   80b04:	00c00984 	movi	r3,38
   80b08:	00800434 	movhi	r2,16
   80b0c:	10842604 	addi	r2,r2,4248
   80b10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   80b14:	00c00044 	movi	r3,1
   80b18:	00800434 	movhi	r2,16
   80b1c:	10842704 	addi	r2,r2,4252
   80b20:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00E0);    //Set Gamma
   80b24:	00c03804 	movi	r3,224
   80b28:	00800434 	movhi	r2,16
   80b2c:	10842604 	addi	r2,r2,4248
   80b30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000F);
   80b34:	00c003c4 	movi	r3,15
   80b38:	00800434 	movhi	r2,16
   80b3c:	10842704 	addi	r2,r2,4252
   80b40:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0026);
   80b44:	00c00984 	movi	r3,38
   80b48:	00800434 	movhi	r2,16
   80b4c:	10842704 	addi	r2,r2,4252
   80b50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0024);
   80b54:	00c00904 	movi	r3,36
   80b58:	00800434 	movhi	r2,16
   80b5c:	10842704 	addi	r2,r2,4252
   80b60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
   80b64:	00c002c4 	movi	r3,11
   80b68:	00800434 	movhi	r2,16
   80b6c:	10842704 	addi	r2,r2,4252
   80b70:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000E);
   80b74:	00c00384 	movi	r3,14
   80b78:	00800434 	movhi	r2,16
   80b7c:	10842704 	addi	r2,r2,4252
   80b80:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
   80b84:	00c00204 	movi	r3,8
   80b88:	00800434 	movhi	r2,16
   80b8c:	10842704 	addi	r2,r2,4252
   80b90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x004b);
   80b94:	00c012c4 	movi	r3,75
   80b98:	00800434 	movhi	r2,16
   80b9c:	10842704 	addi	r2,r2,4252
   80ba0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0X00a8);
   80ba4:	00c02a04 	movi	r3,168
   80ba8:	00800434 	movhi	r2,16
   80bac:	10842704 	addi	r2,r2,4252
   80bb0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003b);
   80bb4:	00c00ec4 	movi	r3,59
   80bb8:	00800434 	movhi	r2,16
   80bbc:	10842704 	addi	r2,r2,4252
   80bc0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000a);
   80bc4:	00c00284 	movi	r3,10
   80bc8:	00800434 	movhi	r2,16
   80bcc:	10842704 	addi	r2,r2,4252
   80bd0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0014);
   80bd4:	00c00504 	movi	r3,20
   80bd8:	00800434 	movhi	r2,16
   80bdc:	10842704 	addi	r2,r2,4252
   80be0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0006);
   80be4:	00c00184 	movi	r3,6
   80be8:	00800434 	movhi	r2,16
   80bec:	10842704 	addi	r2,r2,4252
   80bf0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
   80bf4:	00c00404 	movi	r3,16
   80bf8:	00800434 	movhi	r2,16
   80bfc:	10842704 	addi	r2,r2,4252
   80c00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
   80c04:	00c00244 	movi	r3,9
   80c08:	00800434 	movhi	r2,16
   80c0c:	10842704 	addi	r2,r2,4252
   80c10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80c14:	0007883a 	mov	r3,zero
   80c18:	00800434 	movhi	r2,16
   80c1c:	10842704 	addi	r2,r2,4252
   80c20:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0X00E1);    //Set Gamma
   80c24:	00c03844 	movi	r3,225
   80c28:	00800434 	movhi	r2,16
   80c2c:	10842604 	addi	r2,r2,4248
   80c30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80c34:	0007883a 	mov	r3,zero
   80c38:	00800434 	movhi	r2,16
   80c3c:	10842704 	addi	r2,r2,4252
   80c40:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x001c);
   80c44:	00c00704 	movi	r3,28
   80c48:	00800434 	movhi	r2,16
   80c4c:	10842704 	addi	r2,r2,4252
   80c50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0020);
   80c54:	00c00804 	movi	r3,32
   80c58:	00800434 	movhi	r2,16
   80c5c:	10842704 	addi	r2,r2,4252
   80c60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0004);
   80c64:	00c00104 	movi	r3,4
   80c68:	00800434 	movhi	r2,16
   80c6c:	10842704 	addi	r2,r2,4252
   80c70:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0010);
   80c74:	00c00404 	movi	r3,16
   80c78:	00800434 	movhi	r2,16
   80c7c:	10842704 	addi	r2,r2,4252
   80c80:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0008);
   80c84:	00c00204 	movi	r3,8
   80c88:	00800434 	movhi	r2,16
   80c8c:	10842704 	addi	r2,r2,4252
   80c90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0034);
   80c94:	00c00d04 	movi	r3,52
   80c98:	00800434 	movhi	r2,16
   80c9c:	10842704 	addi	r2,r2,4252
   80ca0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0047);
   80ca4:	00c011c4 	movi	r3,71
   80ca8:	00800434 	movhi	r2,16
   80cac:	10842704 	addi	r2,r2,4252
   80cb0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0044);
   80cb4:	00c01104 	movi	r3,68
   80cb8:	00800434 	movhi	r2,16
   80cbc:	10842704 	addi	r2,r2,4252
   80cc0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0005);
   80cc4:	00c00144 	movi	r3,5
   80cc8:	00800434 	movhi	r2,16
   80ccc:	10842704 	addi	r2,r2,4252
   80cd0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000b);
   80cd4:	00c002c4 	movi	r3,11
   80cd8:	00800434 	movhi	r2,16
   80cdc:	10842704 	addi	r2,r2,4252
   80ce0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0009);
   80ce4:	00c00244 	movi	r3,9
   80ce8:	00800434 	movhi	r2,16
   80cec:	10842704 	addi	r2,r2,4252
   80cf0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x002f);
   80cf4:	00c00bc4 	movi	r3,47
   80cf8:	00800434 	movhi	r2,16
   80cfc:	10842704 	addi	r2,r2,4252
   80d00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0036);
   80d04:	00c00d84 	movi	r3,54
   80d08:	00800434 	movhi	r2,16
   80d0c:	10842704 	addi	r2,r2,4252
   80d10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x000f);
   80d14:	00c003c4 	movi	r3,15
   80d18:	00800434 	movhi	r2,16
   80d1c:	10842704 	addi	r2,r2,4252
   80d20:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002A);
   80d24:	00c00a84 	movi	r3,42
   80d28:	00800434 	movhi	r2,16
   80d2c:	10842604 	addi	r2,r2,4248
   80d30:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80d34:	0007883a 	mov	r3,zero
   80d38:	00800434 	movhi	r2,16
   80d3c:	10842704 	addi	r2,r2,4252
   80d40:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80d44:	0007883a 	mov	r3,zero
   80d48:	00800434 	movhi	r2,16
   80d4c:	10842704 	addi	r2,r2,4252
   80d50:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80d54:	0007883a 	mov	r3,zero
   80d58:	00800434 	movhi	r2,16
   80d5c:	10842704 	addi	r2,r2,4252
   80d60:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x00ef);
   80d64:	00c03bc4 	movi	r3,239
   80d68:	00800434 	movhi	r2,16
   80d6c:	10842704 	addi	r2,r2,4252
   80d70:	10c00035 	stwio	r3,0(r2)

	 LCD_WR_REG(0x002B);
   80d74:	00c00ac4 	movi	r3,43
   80d78:	00800434 	movhi	r2,16
   80d7c:	10842604 	addi	r2,r2,4248
   80d80:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80d84:	0007883a 	mov	r3,zero
   80d88:	00800434 	movhi	r2,16
   80d8c:	10842704 	addi	r2,r2,4252
   80d90:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80d94:	0007883a 	mov	r3,zero
   80d98:	00800434 	movhi	r2,16
   80d9c:	10842704 	addi	r2,r2,4252
   80da0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   80da4:	00c00044 	movi	r3,1
   80da8:	00800434 	movhi	r2,16
   80dac:	10842704 	addi	r2,r2,4252
   80db0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x003f);
   80db4:	00c00fc4 	movi	r3,63
   80db8:	00800434 	movhi	r2,16
   80dbc:	10842704 	addi	r2,r2,4252
   80dc0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x003A);
   80dc4:	00c00e84 	movi	r3,58
   80dc8:	00800434 	movhi	r2,16
   80dcc:	10842604 	addi	r2,r2,4248
   80dd0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0055);
   80dd4:	00c01544 	movi	r3,85
   80dd8:	00800434 	movhi	r2,16
   80ddc:	10842704 	addi	r2,r2,4252
   80de0:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x00f6);
   80de4:	00c03d84 	movi	r3,246
   80de8:	00800434 	movhi	r2,16
   80dec:	10842604 	addi	r2,r2,4248
   80df0:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0001);
   80df4:	00c00044 	movi	r3,1
   80df8:	00800434 	movhi	r2,16
   80dfc:	10842704 	addi	r2,r2,4252
   80e00:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0030);
   80e04:	00c00c04 	movi	r3,48
   80e08:	00800434 	movhi	r2,16
   80e0c:	10842704 	addi	r2,r2,4252
   80e10:	10c00035 	stwio	r3,0(r2)
		LCD_WR_DATA(0x0000);
   80e14:	0007883a 	mov	r3,zero
   80e18:	00800434 	movhi	r2,16
   80e1c:	10842704 	addi	r2,r2,4252
   80e20:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x0029); //display on
   80e24:	00c00a44 	movi	r3,41
   80e28:	00800434 	movhi	r2,16
   80e2c:	10842604 	addi	r2,r2,4248
   80e30:	10c00035 	stwio	r3,0(r2)

	LCD_WR_REG(0x002c);    // 0x2C
   80e34:	00c00b04 	movi	r3,44
   80e38:	00800434 	movhi	r2,16
   80e3c:	10842604 	addi	r2,r2,4248
   80e40:	10c00035 	stwio	r3,0(r2)

}
   80e44:	e037883a 	mov	sp,fp
   80e48:	dfc00117 	ldw	ra,4(sp)
   80e4c:	df000017 	ldw	fp,0(sp)
   80e50:	dec00204 	addi	sp,sp,8
   80e54:	f800283a 	ret

00080e58 <LCD_Pattern_Horizon>:


void LCD_Pattern_Horizon(void)
{
   80e58:	defffc04 	addi	sp,sp,-16
   80e5c:	dfc00315 	stw	ra,12(sp)
   80e60:	df000215 	stw	fp,8(sp)
   80e64:	df000204 	addi	fp,sp,8
        alt_u32 index=0;
   80e68:	e03ffe15 	stw	zero,-8(fp)
        alt_u16  data=0;
   80e6c:	e03fff0d 	sth	zero,-4(fp)
        LCD_SetCursor(0x00,0x0000);
   80e70:	0009883a 	mov	r4,zero
   80e74:	000b883a 	mov	r5,zero
   80e78:	008064c0 	call	8064c <LCD_SetCursor>
        data=0x0000;
   80e7c:	e03fff0d 	sth	zero,-4(fp)
        for(index=0;index<240*80;index++)
   80e80:	e03ffe15 	stw	zero,-8(fp)
   80e84:	00000706 	br	80ea4 <LCD_Pattern_Horizon+0x4c>
        {
        	LCD_WR_DATA(data);
   80e88:	e0ffff0b 	ldhu	r3,-4(fp)
   80e8c:	00800434 	movhi	r2,16
   80e90:	10842704 	addi	r2,r2,4252
   80e94:	10c00035 	stwio	r3,0(r2)
{
        alt_u32 index=0;
        alt_u16  data=0;
        LCD_SetCursor(0x00,0x0000);
        data=0x0000;
        for(index=0;index<240*80;index++)
   80e98:	e0bffe17 	ldw	r2,-8(fp)
   80e9c:	10800044 	addi	r2,r2,1
   80ea0:	e0bffe15 	stw	r2,-8(fp)
   80ea4:	e0bffe17 	ldw	r2,-8(fp)
   80ea8:	1092c030 	cmpltui	r2,r2,19200
   80eac:	103ff61e 	bne	r2,zero,80e88 <LCD_Pattern_Horizon+0x30>
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
   80eb0:	0009883a 	mov	r4,zero
   80eb4:	01401404 	movi	r5,80
   80eb8:	008064c0 	call	8064c <LCD_SetCursor>
        data=RED;
   80ebc:	00be0004 	movi	r2,-2048
   80ec0:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
   80ec4:	e03ffe15 	stw	zero,-8(fp)
   80ec8:	00000706 	br	80ee8 <LCD_Pattern_Horizon+0x90>
		{
			LCD_WR_DATA(data);
   80ecc:	e0ffff0b 	ldhu	r3,-4(fp)
   80ed0:	00800434 	movhi	r2,16
   80ed4:	10842704 	addi	r2,r2,4252
   80ed8:	10c00035 	stwio	r3,0(r2)
        {
        	LCD_WR_DATA(data);
        }
        LCD_SetCursor(0x00,80);
        data=RED;
		for(index=0;index<240*80;index++)
   80edc:	e0bffe17 	ldw	r2,-8(fp)
   80ee0:	10800044 	addi	r2,r2,1
   80ee4:	e0bffe15 	stw	r2,-8(fp)
   80ee8:	e0bffe17 	ldw	r2,-8(fp)
   80eec:	1092c030 	cmpltui	r2,r2,19200
   80ef0:	103ff61e 	bne	r2,zero,80ecc <LCD_Pattern_Horizon+0x74>
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
   80ef4:	0009883a 	mov	r4,zero
   80ef8:	01402804 	movi	r5,160
   80efc:	008064c0 	call	8064c <LCD_SetCursor>
		data=GREEN;
   80f00:	0081f804 	movi	r2,2016
   80f04:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
   80f08:	e03ffe15 	stw	zero,-8(fp)
   80f0c:	00000706 	br	80f2c <LCD_Pattern_Horizon+0xd4>
		{
			LCD_WR_DATA(data);
   80f10:	e0ffff0b 	ldhu	r3,-4(fp)
   80f14:	00800434 	movhi	r2,16
   80f18:	10842704 	addi	r2,r2,4252
   80f1c:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
	    LCD_SetCursor(0x00,160);
		data=GREEN;
		for(index=0;index<240*80;index++)
   80f20:	e0bffe17 	ldw	r2,-8(fp)
   80f24:	10800044 	addi	r2,r2,1
   80f28:	e0bffe15 	stw	r2,-8(fp)
   80f2c:	e0bffe17 	ldw	r2,-8(fp)
   80f30:	1092c030 	cmpltui	r2,r2,19200
   80f34:	103ff61e 	bne	r2,zero,80f10 <LCD_Pattern_Horizon+0xb8>
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
   80f38:	0009883a 	mov	r4,zero
   80f3c:	01403c04 	movi	r5,240
   80f40:	008064c0 	call	8064c <LCD_SetCursor>
		data=BLUE;
   80f44:	008007c4 	movi	r2,31
   80f48:	e0bfff0d 	sth	r2,-4(fp)
		for(index=0;index<240*80;index++)
   80f4c:	e03ffe15 	stw	zero,-8(fp)
   80f50:	00000706 	br	80f70 <LCD_Pattern_Horizon+0x118>
		{
			LCD_WR_DATA(data);
   80f54:	e0ffff0b 	ldhu	r3,-4(fp)
   80f58:	00800434 	movhi	r2,16
   80f5c:	10842704 	addi	r2,r2,4252
   80f60:	10c00035 	stwio	r3,0(r2)
		{
			LCD_WR_DATA(data);
		}
		LCD_SetCursor(0x00,240);
		data=BLUE;
		for(index=0;index<240*80;index++)
   80f64:	e0bffe17 	ldw	r2,-8(fp)
   80f68:	10800044 	addi	r2,r2,1
   80f6c:	e0bffe15 	stw	r2,-8(fp)
   80f70:	e0bffe17 	ldw	r2,-8(fp)
   80f74:	1092c030 	cmpltui	r2,r2,19200
   80f78:	103ff61e 	bne	r2,zero,80f54 <LCD_Pattern_Horizon+0xfc>
		{
			LCD_WR_DATA(data);
		}
}
   80f7c:	e037883a 	mov	sp,fp
   80f80:	dfc00117 	ldw	ra,4(sp)
   80f84:	df000017 	ldw	fp,0(sp)
   80f88:	dec00204 	addi	sp,sp,8
   80f8c:	f800283a 	ret

00080f90 <LCD_Pattern_Vertical>:

void LCD_Pattern_Vertical(void)
{
   80f90:	defff804 	addi	sp,sp,-32
   80f94:	dfc00715 	stw	ra,28(sp)
   80f98:	df000615 	stw	fp,24(sp)
   80f9c:	df000604 	addi	fp,sp,24
        int i,j,m;
        alt_u16  data=0;
   80fa0:	e03ffd0d 	sth	zero,-12(fp)
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
   80fa4:	00bfffc4 	movi	r2,-1
   80fa8:	e0bffd8d 	sth	r2,-10(fp)
   80fac:	008007c4 	movi	r2,31
   80fb0:	e0bffe0d 	sth	r2,-8(fp)
   80fb4:	0081f804 	movi	r2,2016
   80fb8:	e0bffe8d 	sth	r2,-6(fp)
   80fbc:	00be0004 	movi	r2,-2048
   80fc0:	e0bfff0d 	sth	r2,-4(fp)
        LCD_SetCursor(0x00,0x0000);
   80fc4:	0009883a 	mov	r4,zero
   80fc8:	000b883a 	mov	r5,zero
   80fcc:	008064c0 	call	8064c <LCD_SetCursor>
        for(m=0;m<320;m++)
   80fd0:	e03ffc15 	stw	zero,-16(fp)
   80fd4:	00001e06 	br	81050 <LCD_Pattern_Vertical+0xc0>
        {
			for(i=0;i<4;i++)
   80fd8:	e03ffa15 	stw	zero,-24(fp)
   80fdc:	00001606 	br	81038 <LCD_Pattern_Vertical+0xa8>
			{
				data=color[i];
   80fe0:	e0bffa17 	ldw	r2,-24(fp)
   80fe4:	1085883a 	add	r2,r2,r2
   80fe8:	e0fffa04 	addi	r3,fp,-24
   80fec:	1885883a 	add	r2,r3,r2
   80ff0:	10800384 	addi	r2,r2,14
   80ff4:	1080000b 	ldhu	r2,0(r2)
   80ff8:	e0bffd0d 	sth	r2,-12(fp)
				for(j=0;j<60;j++)
   80ffc:	e03ffb15 	stw	zero,-20(fp)
   81000:	00000706 	br	81020 <LCD_Pattern_Vertical+0x90>
				{
					LCD_WR_DATA(data);
   81004:	e0fffd0b 	ldhu	r3,-12(fp)
   81008:	00800434 	movhi	r2,16
   8100c:	10842704 	addi	r2,r2,4252
   81010:	10c00035 	stwio	r3,0(r2)
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
			{
				data=color[i];
				for(j=0;j<60;j++)
   81014:	e0bffb17 	ldw	r2,-20(fp)
   81018:	10800044 	addi	r2,r2,1
   8101c:	e0bffb15 	stw	r2,-20(fp)
   81020:	e0bffb17 	ldw	r2,-20(fp)
   81024:	10800f10 	cmplti	r2,r2,60
   81028:	103ff61e 	bne	r2,zero,81004 <LCD_Pattern_Vertical+0x74>
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
        {
			for(i=0;i<4;i++)
   8102c:	e0bffa17 	ldw	r2,-24(fp)
   81030:	10800044 	addi	r2,r2,1
   81034:	e0bffa15 	stw	r2,-24(fp)
   81038:	e0bffa17 	ldw	r2,-24(fp)
   8103c:	10800110 	cmplti	r2,r2,4
   81040:	103fe71e 	bne	r2,zero,80fe0 <LCD_Pattern_Vertical+0x50>
{
        int i,j,m;
        alt_u16  data=0;
        alt_u16  color[4]={WHITE,BLUE,GREEN,RED};
        LCD_SetCursor(0x00,0x0000);
        for(m=0;m<320;m++)
   81044:	e0bffc17 	ldw	r2,-16(fp)
   81048:	10800044 	addi	r2,r2,1
   8104c:	e0bffc15 	stw	r2,-16(fp)
   81050:	e0bffc17 	ldw	r2,-16(fp)
   81054:	10805010 	cmplti	r2,r2,320
   81058:	103fdf1e 	bne	r2,zero,80fd8 <LCD_Pattern_Vertical+0x48>
				{
					LCD_WR_DATA(data);
				}
			}
        }
}
   8105c:	e037883a 	mov	sp,fp
   81060:	dfc00117 	ldw	ra,4(sp)
   81064:	df000017 	ldw	fp,0(sp)
   81068:	dec00204 	addi	sp,sp,8
   8106c:	f800283a 	ret

00081070 <vid_clean_screen>:
#include "ILI9341.h"
#endif


// richard add
void vid_clean_screen(alt_video_display* display, int color){
   81070:	defffa04 	addi	sp,sp,-24
   81074:	dfc00515 	stw	ra,20(sp)
   81078:	df000415 	stw	fp,16(sp)
   8107c:	df000404 	addi	fp,sp,16
   81080:	e13ffe15 	stw	r4,-8(fp)
   81084:	e17fff15 	stw	r5,-4(fp)
    vid_paint_block(0 , 0,display->width, display->height, color, display);
   81088:	e0bffe17 	ldw	r2,-8(fp)
   8108c:	10c00117 	ldw	r3,4(r2)
   81090:	e0bffe17 	ldw	r2,-8(fp)
   81094:	10800217 	ldw	r2,8(r2)
   81098:	e13fff17 	ldw	r4,-4(fp)
   8109c:	d9000015 	stw	r4,0(sp)
   810a0:	e13ffe17 	ldw	r4,-8(fp)
   810a4:	d9000115 	stw	r4,4(sp)
   810a8:	0009883a 	mov	r4,zero
   810ac:	000b883a 	mov	r5,zero
   810b0:	180d883a 	mov	r6,r3
   810b4:	100f883a 	mov	r7,r2
   810b8:	0081bec0 	call	81bec <vid_paint_block>
}
   810bc:	e037883a 	mov	sp,fp
   810c0:	dfc00117 	ldw	ra,4(sp)
   810c4:	df000017 	ldw	fp,0(sp)
   810c8:	dec00204 	addi	sp,sp,8
   810cc:	f800283a 	ret

000810d0 <vid_draw_line>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
   810d0:	defff704 	addi	sp,sp,-36
   810d4:	dfc00815 	stw	ra,32(sp)
   810d8:	df000715 	stw	fp,28(sp)
   810dc:	df000704 	addi	fp,sp,28
   810e0:	e13ffc15 	stw	r4,-16(fp)
   810e4:	e17ffd15 	stw	r5,-12(fp)
   810e8:	e1bffe15 	stw	r6,-8(fp)
   810ec:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
   810f0:	e0fffd17 	ldw	r3,-12(fp)
   810f4:	e0bfff17 	ldw	r2,-4(fp)
   810f8:	1880111e 	bne	r3,r2,81140 <vid_draw_line+0x70>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
   810fc:	e0bffc17 	ldw	r2,-16(fp)
   81100:	113fffcc 	andi	r4,r2,65535
   81104:	2120001c 	xori	r4,r4,32768
   81108:	21200004 	addi	r4,r4,-32768
   8110c:	e0bffe17 	ldw	r2,-8(fp)
   81110:	10ffffcc 	andi	r3,r2,65535
   81114:	18e0001c 	xori	r3,r3,32768
   81118:	18e00004 	addi	r3,r3,-32768
                         (unsigned short)horiz_end, 
                         (unsigned short)vert_start,
   8111c:	e0bffd17 	ldw	r2,-12(fp)
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
   81120:	10bfffcc 	andi	r2,r2,65535
   81124:	e1400417 	ldw	r5,16(fp)
   81128:	d9400015 	stw	r5,0(sp)
   8112c:	180b883a 	mov	r5,r3
   81130:	100d883a 	mov	r6,r2
   81134:	e1c00317 	ldw	r7,12(fp)
   81138:	0081c800 	call	81c80 <vid_draw_horiz_line>
   8113c:	00001206 	br	81188 <vid_draw_line+0xb8>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   81140:	e0bffc17 	ldw	r2,-16(fp)
   81144:	113fffcc 	andi	r4,r2,65535
                          (unsigned short)vert_start, 
   81148:	e0bffd17 	ldw	r2,-12(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   8114c:	117fffcc 	andi	r5,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
   81150:	e0bffe17 	ldw	r2,-8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   81154:	10ffffcc 	andi	r3,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
   81158:	e0bfff17 	ldw	r2,-4(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   8115c:	10bfffcc 	andi	r2,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
   81160:	e1800217 	ldw	r6,8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
   81164:	31bfffcc 	andi	r6,r6,65535
   81168:	d9800015 	stw	r6,0(sp)
   8116c:	e1800317 	ldw	r6,12(fp)
   81170:	d9800115 	stw	r6,4(sp)
   81174:	e1800417 	ldw	r6,16(fp)
   81178:	d9800215 	stw	r6,8(sp)
   8117c:	180d883a 	mov	r6,r3
   81180:	100f883a 	mov	r7,r2
   81184:	0081e900 	call	81e90 <vid_draw_sloped_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
   81188:	e037883a 	mov	sp,fp
   8118c:	dfc00117 	ldw	ra,4(sp)
   81190:	df000017 	ldw	fp,0(sp)
   81194:	dec00204 	addi	sp,sp,8
   81198:	f800283a 	ret

0008119c <vid_scroll_string_quit>:



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
   8119c:	defffd04 	addi	sp,sp,-12
   811a0:	dfc00215 	stw	ra,8(sp)
   811a4:	df000115 	stw	fp,4(sp)
   811a8:	df000104 	addi	fp,sp,4
   811ac:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
   811b0:	e0bfff17 	ldw	r2,-4(fp)
   811b4:	10800517 	ldw	r2,20(r2)
   811b8:	1009883a 	mov	r4,r2
   811bc:	00888ec0 	call	888ec <free>
  free(scroll);
   811c0:	e13fff17 	ldw	r4,-4(fp)
   811c4:	00888ec0 	call	888ec <free>
}
   811c8:	e037883a 	mov	sp,fp
   811cc:	dfc00117 	ldw	ra,4(sp)
   811d0:	df000017 	ldw	fp,0(sp)
   811d4:	dec00204 	addi	sp,sp,8
   811d8:	f800283a 	ret

000811dc <vid_scroll_string_init>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
   811dc:	defff904 	addi	sp,sp,-28
   811e0:	dfc00615 	stw	ra,24(sp)
   811e4:	df000515 	stw	fp,20(sp)
   811e8:	df000504 	addi	fp,sp,20
   811ec:	e13ffc15 	stw	r4,-16(fp)
   811f0:	e17ffd15 	stw	r5,-12(fp)
   811f4:	e1bffe15 	stw	r6,-8(fp)
   811f8:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = malloc(sizeof (vid_text_scroll_struct));
   811fc:	01000f04 	movi	r4,60
   81200:	00888d80 	call	888d8 <malloc>
   81204:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
   81208:	e0bffb17 	ldw	r2,-20(fp)
   8120c:	e0fffc17 	ldw	r3,-16(fp)
   81210:	10c00015 	stw	r3,0(r2)
  scroll->vbegin = vbegin;
   81214:	e0bffb17 	ldw	r2,-20(fp)
   81218:	e0fffd17 	ldw	r3,-12(fp)
   8121c:	10c00115 	stw	r3,4(r2)
  scroll->hend = hend;
   81220:	e0bffb17 	ldw	r2,-20(fp)
   81224:	e0fffe17 	ldw	r3,-8(fp)
   81228:	10c00215 	stw	r3,8(r2)
  scroll->f_color = f_color;
   8122c:	e0bffb17 	ldw	r2,-20(fp)
   81230:	e0ffff17 	ldw	r3,-4(fp)
   81234:	10c00315 	stw	r3,12(r2)
  scroll->b_color = b_color;
   81238:	e0bffb17 	ldw	r2,-20(fp)
   8123c:	e0c00217 	ldw	r3,8(fp)
   81240:	10c00415 	stw	r3,16(r2)
  scroll->string = malloc(strlen(string)+2);
   81244:	e1000517 	ldw	r4,20(fp)
   81248:	00895140 	call	89514 <strlen>
   8124c:	10800084 	addi	r2,r2,2
   81250:	1009883a 	mov	r4,r2
   81254:	00888d80 	call	888d8 <malloc>
   81258:	1007883a 	mov	r3,r2
   8125c:	e0bffb17 	ldw	r2,-20(fp)
   81260:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
   81264:	e0bffb17 	ldw	r2,-20(fp)
   81268:	10800517 	ldw	r2,20(r2)
   8126c:	1009883a 	mov	r4,r2
   81270:	e1400517 	ldw	r5,20(fp)
   81274:	00894800 	call	89480 <strcpy>
  scroll->font = font;
   81278:	e0bffb17 	ldw	r2,-20(fp)
   8127c:	e0c00317 	ldw	r3,12(fp)
   81280:	10c00615 	stw	r3,24(r2)
  scroll->ms_delay = ms_delay;
   81284:	e0bffb17 	ldw	r2,-20(fp)
   81288:	e0c00417 	ldw	r3,16(fp)
   8128c:	10c00715 	stw	r3,28(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   81290:	008002f4 	movhi	r2,11
   81294:	1091ee04 	addi	r2,r2,18360
   81298:	10800017 	ldw	r2,0(r2)
  scroll->ticks_at_last_move = alt_nticks();
   8129c:	1007883a 	mov	r3,r2
   812a0:	e0bffb17 	ldw	r2,-20(fp)
   812a4:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
   812a8:	e0bffb17 	ldw	r2,-20(fp)
   812ac:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
   812b0:	e0bffb17 	ldw	r2,-20(fp)
   812b4:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
   812b8:	e0bffb17 	ldw	r2,-20(fp)
   812bc:	10c00217 	ldw	r3,8(r2)
   812c0:	e0bffb17 	ldw	r2,-20(fp)
   812c4:	10800017 	ldw	r2,0(r2)
   812c8:	1887c83a 	sub	r3,r3,r2
   812cc:	e0bffb17 	ldw	r2,-20(fp)
   812d0:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
   812d4:	e1000517 	ldw	r4,20(fp)
   812d8:	00895140 	call	89514 <strlen>
   812dc:	1007883a 	mov	r3,r2
   812e0:	e0bffb17 	ldw	r2,-20(fp)
   812e4:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
   812e8:	e0bffb17 	ldw	r2,-20(fp)
   812ec:	10800c17 	ldw	r2,48(r2)
   812f0:	100690fa 	slli	r3,r2,3
   812f4:	e0bffb17 	ldw	r2,-20(fp)
   812f8:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
   812fc:	e0bffb17 	ldw	r2,-20(fp)
   81300:	10c00b17 	ldw	r3,44(r2)
   81304:	e0bffb17 	ldw	r2,-20(fp)
   81308:	10800e17 	ldw	r2,56(r2)
   8130c:	1887883a 	add	r3,r3,r2
   81310:	e0bffb17 	ldw	r2,-20(fp)
   81314:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
   81318:	e0bffb17 	ldw	r2,-20(fp)
  
}
   8131c:	e037883a 	mov	sp,fp
   81320:	dfc00117 	ldw	ra,4(sp)
   81324:	df000017 	ldw	fp,0(sp)
   81328:	dec00204 	addi	sp,sp,8
   8132c:	f800283a 	ret

00081330 <vid_scroll_string>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
   81330:	deffec04 	addi	sp,sp,-80
   81334:	dfc01315 	stw	ra,76(sp)
   81338:	df001215 	stw	fp,72(sp)
   8133c:	dc401115 	stw	r17,68(sp)
   81340:	dc001015 	stw	r16,64(sp)
   81344:	df001004 	addi	fp,sp,64
   81348:	e13ffe15 	stw	r4,-8(fp)
   8134c:	e17fff15 	stw	r5,-4(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
   81350:	00800044 	movi	r2,1
   81354:	e0bff805 	stb	r2,-32(fp)
   81358:	008002f4 	movhi	r2,11
   8135c:	1091ee04 	addi	r2,r2,18360
   81360:	10800017 	ldw	r2,0(r2)

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
   81364:	1021883a 	mov	r16,r2
   81368:	e0bffe17 	ldw	r2,-8(fp)
   8136c:	10800817 	ldw	r2,32(r2)
   81370:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   81374:	008002f4 	movhi	r2,11
   81378:	1091ed04 	addi	r2,r2,18356
   8137c:	10800017 	ldw	r2,0(r2)
   81380:	1007883a 	mov	r3,r2
   81384:	e0bffe17 	ldw	r2,-8(fp)
   81388:	10800717 	ldw	r2,28(r2)
   8138c:	1885383a 	mul	r2,r3,r2
   81390:	1009883a 	mov	r4,r2
   81394:	0140fa04 	movi	r5,1000
   81398:	008832c0 	call	8832c <__udivsi3>
   8139c:	8885883a 	add	r2,r17,r2
   813a0:	8080bb36 	bltu	r16,r2,81690 <vid_scroll_string+0x360>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   813a4:	008002f4 	movhi	r2,11
   813a8:	1091ee04 	addi	r2,r2,18360
   813ac:	10800017 	ldw	r2,0(r2)
    scroll->ticks_at_last_move = alt_nticks();
   813b0:	1007883a 	mov	r3,r2
   813b4:	e0bffe17 	ldw	r2,-8(fp)
   813b8:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
   813bc:	e0bffe17 	ldw	r2,-8(fp)
   813c0:	10800a03 	ldbu	r2,40(r2)
   813c4:	10803fcc 	andi	r2,r2,255
   813c8:	1080201c 	xori	r2,r2,128
   813cc:	10bfe004 	addi	r2,r2,-128
   813d0:	1000061e 	bne	r2,zero,813ec <vid_scroll_string+0xbc>
      scroll->text_scroll_index = 0;
   813d4:	e0bffe17 	ldw	r2,-8(fp)
   813d8:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
   813dc:	e0bffe17 	ldw	r2,-8(fp)
   813e0:	00c00044 	movi	r3,1
   813e4:	10c00a05 	stb	r3,40(r2)
   813e8:	00000e06 	br	81424 <vid_scroll_string+0xf4>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
   813ec:	e0bffe17 	ldw	r2,-8(fp)
   813f0:	10c00917 	ldw	r3,36(r2)
   813f4:	e0bffe17 	ldw	r2,-8(fp)
   813f8:	10800d17 	ldw	r2,52(r2)
   813fc:	18800316 	blt	r3,r2,8140c <vid_scroll_string+0xdc>
      scroll->text_scroll_started = 0;
   81400:	e0bffe17 	ldw	r2,-8(fp)
   81404:	10000a05 	stb	zero,40(r2)
   81408:	00000606 	br	81424 <vid_scroll_string+0xf4>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
   8140c:	e0bffe17 	ldw	r2,-8(fp)
   81410:	10c00917 	ldw	r3,36(r2)
   81414:	e0bff807 	ldb	r2,-32(fp)
   81418:	1887883a 	add	r3,r3,r2
   8141c:	e0bffe17 	ldw	r2,-8(fp)
   81420:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
   81424:	e0bffe17 	ldw	r2,-8(fp)
   81428:	10c00917 	ldw	r3,36(r2)
   8142c:	e0bffe17 	ldw	r2,-8(fp)
   81430:	10800b17 	ldw	r2,44(r2)
   81434:	18800a0e 	bge	r3,r2,81460 <vid_scroll_string+0x130>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
   81438:	e0bffe17 	ldw	r2,-8(fp)
   8143c:	10c00017 	ldw	r3,0(r2)
   81440:	e0bffe17 	ldw	r2,-8(fp)
   81444:	10800b17 	ldw	r2,44(r2)
   81448:	1887883a 	add	r3,r3,r2
   8144c:	e0bffe17 	ldw	r2,-8(fp)
   81450:	10800917 	ldw	r2,36(r2)
   81454:	1885c83a 	sub	r2,r3,r2
   81458:	e0bff315 	stw	r2,-52(fp)
   8145c:	00000306 	br	8146c <vid_scroll_string+0x13c>
    } else {
      x_start = scroll->hbegin;
   81460:	e0bffe17 	ldw	r2,-8(fp)
   81464:	10800017 	ldw	r2,0(r2)
   81468:	e0bff315 	stw	r2,-52(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
   8146c:	e0bffe17 	ldw	r2,-8(fp)
   81470:	10800e17 	ldw	r2,56(r2)
   81474:	e0fffe17 	ldw	r3,-8(fp)
   81478:	18c00917 	ldw	r3,36(r3)
   8147c:	1880040e 	bge	r3,r2,81490 <vid_scroll_string+0x160>
      x_end = scroll->hend;
   81480:	e0bffe17 	ldw	r2,-8(fp)
   81484:	10800217 	ldw	r2,8(r2)
   81488:	e0bff415 	stw	r2,-48(fp)
   8148c:	00000906 	br	814b4 <vid_scroll_string+0x184>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
   81490:	e0bffe17 	ldw	r2,-8(fp)
   81494:	10c00217 	ldw	r3,8(r2)
   81498:	e0bffe17 	ldw	r2,-8(fp)
   8149c:	10800917 	ldw	r2,36(r2)
   814a0:	1887c83a 	sub	r3,r3,r2
   814a4:	e0bffe17 	ldw	r2,-8(fp)
   814a8:	10800e17 	ldw	r2,56(r2)
   814ac:	1885883a 	add	r2,r3,r2
   814b0:	e0bff415 	stw	r2,-48(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
   814b4:	e0bff317 	ldw	r2,-52(fp)
   814b8:	e0bff515 	stw	r2,-44(fp)
   814bc:	00006006 	br	81640 <vid_scroll_string+0x310>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
   814c0:	e0bffe17 	ldw	r2,-8(fp)
   814c4:	10c00917 	ldw	r3,36(r2)
   814c8:	e0bffe17 	ldw	r2,-8(fp)
   814cc:	10800b17 	ldw	r2,44(r2)
   814d0:	1880050e 	bge	r3,r2,814e8 <vid_scroll_string+0x1b8>
        string_x_index = (x_index - x_start);
   814d4:	e0fff517 	ldw	r3,-44(fp)
   814d8:	e0bff317 	ldw	r2,-52(fp)
   814dc:	1885c83a 	sub	r2,r3,r2
   814e0:	e0bff615 	stw	r2,-40(fp)
   814e4:	00000a06 	br	81510 <vid_scroll_string+0x1e0>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
   814e8:	e0bffe17 	ldw	r2,-8(fp)
   814ec:	10c00917 	ldw	r3,36(r2)
   814f0:	e0bffe17 	ldw	r2,-8(fp)
   814f4:	10800b17 	ldw	r2,44(r2)
   814f8:	1887c83a 	sub	r3,r3,r2
   814fc:	e0bff517 	ldw	r2,-44(fp)
   81500:	1887883a 	add	r3,r3,r2
   81504:	e0bff317 	ldw	r2,-52(fp)
   81508:	1885c83a 	sub	r2,r3,r2
   8150c:	e0bff615 	stw	r2,-40(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
   81510:	e0bff617 	ldw	r2,-40(fp)
   81514:	1000010e 	bge	r2,zero,8151c <vid_scroll_string+0x1ec>
   81518:	108001c4 	addi	r2,r2,7
   8151c:	1005d0fa 	srai	r2,r2,3
   81520:	e0bff915 	stw	r2,-28(fp)
      character = scroll->string[string_char_index];
   81524:	e0bffe17 	ldw	r2,-8(fp)
   81528:	10c00517 	ldw	r3,20(r2)
   8152c:	e0bff917 	ldw	r2,-28(fp)
   81530:	1885883a 	add	r2,r3,r2
   81534:	10800003 	ldbu	r2,0(r2)
   81538:	e0bffa05 	stb	r2,-24(fp)
      char_column = (string_x_index % 8);
   8153c:	e0fff617 	ldw	r3,-40(fp)
   81540:	00a00034 	movhi	r2,32768
   81544:	108001c4 	addi	r2,r2,7
   81548:	1884703a 	and	r2,r3,r2
   8154c:	1000040e 	bge	r2,zero,81560 <vid_scroll_string+0x230>
   81550:	10bfffc4 	addi	r2,r2,-1
   81554:	00fffe04 	movi	r3,-8
   81558:	10c4b03a 	or	r2,r2,r3
   8155c:	10800044 	addi	r2,r2,1
   81560:	e0bffb15 	stw	r2,-20(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
   81564:	00c02004 	movi	r3,128
   81568:	e0bffb17 	ldw	r2,-20(fp)
   8156c:	1884d83a 	srl	r2,r3,r2
   81570:	e0bffc05 	stb	r2,-16(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
   81574:	e0bffe17 	ldw	r2,-8(fp)
   81578:	10c00617 	ldw	r3,24(r2)
   8157c:	e0bffa07 	ldb	r2,-24(fp)
   81580:	108002e4 	muli	r2,r2,11
   81584:	10bfa804 	addi	r2,r2,-352
   81588:	1885883a 	add	r2,r3,r2
   8158c:	e0bffd15 	stw	r2,-12(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
   81590:	e03ff715 	stw	zero,-36(fp)
   81594:	00002406 	br	81628 <vid_scroll_string+0x2f8>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
   81598:	e0bff717 	ldw	r2,-36(fp)
   8159c:	e0fffd17 	ldw	r3,-12(fp)
   815a0:	1885883a 	add	r2,r3,r2
   815a4:	10c00003 	ldbu	r3,0(r2)
   815a8:	e0bffc03 	ldbu	r2,-16(fp)
   815ac:	1884703a 	and	r2,r3,r2
   815b0:	10803fcc 	andi	r2,r2,255
   815b4:	1080201c 	xori	r2,r2,128
   815b8:	10bfe004 	addi	r2,r2,-128
   815bc:	10000c26 	beq	r2,zero,815f0 <vid_scroll_string+0x2c0>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
   815c0:	e0bffe17 	ldw	r2,-8(fp)
   815c4:	10c00117 	ldw	r3,4(r2)
   815c8:	e0bff717 	ldw	r2,-36(fp)
   815cc:	1887883a 	add	r3,r3,r2
   815d0:	e0bffe17 	ldw	r2,-8(fp)
   815d4:	10800317 	ldw	r2,12(r2)
   815d8:	e13ff517 	ldw	r4,-44(fp)
   815dc:	180b883a 	mov	r5,r3
   815e0:	100d883a 	mov	r6,r2
   815e4:	e1ffff17 	ldw	r7,-4(fp)
   815e8:	0081b140 	call	81b14 <vid_set_pixel>
   815ec:	00000b06 	br	8161c <vid_scroll_string+0x2ec>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
   815f0:	e0bffe17 	ldw	r2,-8(fp)
   815f4:	10c00117 	ldw	r3,4(r2)
   815f8:	e0bff717 	ldw	r2,-36(fp)
   815fc:	1887883a 	add	r3,r3,r2
   81600:	e0bffe17 	ldw	r2,-8(fp)
   81604:	10800417 	ldw	r2,16(r2)
   81608:	e13ff517 	ldw	r4,-44(fp)
   8160c:	180b883a 	mov	r5,r3
   81610:	100d883a 	mov	r6,r2
   81614:	e1ffff17 	ldw	r7,-4(fp)
   81618:	0081b140 	call	81b14 <vid_set_pixel>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
   8161c:	e0bff717 	ldw	r2,-36(fp)
   81620:	10800044 	addi	r2,r2,1
   81624:	e0bff715 	stw	r2,-36(fp)
   81628:	e0bff717 	ldw	r2,-36(fp)
   8162c:	108002d0 	cmplti	r2,r2,11
   81630:	103fd91e 	bne	r2,zero,81598 <vid_scroll_string+0x268>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
   81634:	e0bff517 	ldw	r2,-44(fp)
   81638:	10800044 	addi	r2,r2,1
   8163c:	e0bff515 	stw	r2,-44(fp)
   81640:	e0fff517 	ldw	r3,-44(fp)
   81644:	e0bff417 	ldw	r2,-48(fp)
   81648:	18bf9d16 	blt	r3,r2,814c0 <vid_scroll_string+0x190>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
   8164c:	e0bffe17 	ldw	r2,-8(fp)
   81650:	10c00117 	ldw	r3,4(r2)
   81654:	e0bffe17 	ldw	r2,-8(fp)
   81658:	10800117 	ldw	r2,4(r2)
   8165c:	10800284 	addi	r2,r2,10
   81660:	e13ffe17 	ldw	r4,-8(fp)
   81664:	21000417 	ldw	r4,16(r4)
   81668:	01400044 	movi	r5,1
   8166c:	d9400015 	stw	r5,0(sp)
   81670:	d9000115 	stw	r4,4(sp)
   81674:	e13fff17 	ldw	r4,-4(fp)
   81678:	d9000215 	stw	r4,8(sp)
   8167c:	e13ff417 	ldw	r4,-48(fp)
   81680:	180b883a 	mov	r5,r3
   81684:	e1bff417 	ldw	r6,-48(fp)
   81688:	100f883a 	mov	r7,r2
   8168c:	00810d00 	call	810d0 <vid_draw_line>
    // Log what time we moved the scroll.
  }
  return(0);
   81690:	0005883a 	mov	r2,zero
}
   81694:	e037883a 	mov	sp,fp
   81698:	dfc00317 	ldw	ra,12(sp)
   8169c:	df000217 	ldw	fp,8(sp)
   816a0:	dc400117 	ldw	r17,4(sp)
   816a4:	dc000017 	ldw	r16,0(sp)
   816a8:	dec00404 	addi	sp,sp,16
   816ac:	f800283a 	ret

000816b0 <vid_move_block>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
   816b0:	defff504 	addi	sp,sp,-44
   816b4:	dfc00a15 	stw	ra,40(sp)
   816b8:	df000915 	stw	fp,36(sp)
   816bc:	df000904 	addi	fp,sp,36
   816c0:	e13ffc15 	stw	r4,-16(fp)
   816c4:	e17ffd15 	stw	r5,-12(fp)
   816c8:	e1bffe15 	stw	r6,-8(fp)
   816cc:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
   816d0:	e0800217 	ldw	r2,8(fp)
   816d4:	00803716 	blt	zero,r2,817b4 <vid_move_block+0x104>
   816d8:	e0800317 	ldw	r2,12(fp)
   816dc:	00803516 	blt	zero,r2,817b4 <vid_move_block+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
   816e0:	e0bffd17 	ldw	r2,-12(fp)
   816e4:	e0bff815 	stw	r2,-32(fp)
   816e8:	00002f06 	br	817a8 <vid_move_block+0xf8>
      write_y = read_y + y_distance;
   816ec:	e0fff817 	ldw	r3,-32(fp)
   816f0:	e0800317 	ldw	r2,12(fp)
   816f4:	1885883a 	add	r2,r3,r2
   816f8:	e0bff915 	stw	r2,-28(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
   816fc:	e0bffc17 	ldw	r2,-16(fp)
   81700:	e0bff715 	stw	r2,-36(fp)
   81704:	00002206 	br	81790 <vid_move_block+0xe0>
        write_x = read_x + x_distance;
   81708:	e0fff717 	ldw	r3,-36(fp)
   8170c:	e0800217 	ldw	r2,8(fp)
   81710:	1885883a 	add	r2,r3,r2
   81714:	e0bffa15 	stw	r2,-24(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
   81718:	e13ff717 	ldw	r4,-36(fp)
   8171c:	e17ff817 	ldw	r5,-32(fp)
   81720:	e1800517 	ldw	r6,20(fp)
   81724:	0081bb00 	call	81bb0 <vid_get_pixel>
   81728:	e0bffb0d 	sth	r2,-20(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
   8172c:	e0bffb0f 	ldh	r2,-20(fp)
   81730:	e13ffa17 	ldw	r4,-24(fp)
   81734:	e17ff917 	ldw	r5,-28(fp)
   81738:	100d883a 	mov	r6,r2
   8173c:	e1c00517 	ldw	r7,20(fp)
   81740:	0081b140 	call	81b14 <vid_set_pixel>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
   81744:	e0fffe17 	ldw	r3,-8(fp)
   81748:	e0800217 	ldw	r2,8(fp)
   8174c:	1885883a 	add	r2,r3,r2
   81750:	e0fff717 	ldw	r3,-36(fp)
   81754:	1880050e 	bge	r3,r2,8176c <vid_move_block+0xbc>
   81758:	e0ffff17 	ldw	r3,-4(fp)
   8175c:	e0800317 	ldw	r2,12(fp)
   81760:	1885883a 	add	r2,r3,r2
   81764:	e0fff817 	ldw	r3,-32(fp)
   81768:	18800616 	blt	r3,r2,81784 <vid_move_block+0xd4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
   8176c:	e0800417 	ldw	r2,16(fp)
   81770:	e13ff717 	ldw	r4,-36(fp)
   81774:	e17ff817 	ldw	r5,-32(fp)
   81778:	100d883a 	mov	r6,r2
   8177c:	e1c00517 	ldw	r7,20(fp)
   81780:	0081b140 	call	81b14 <vid_set_pixel>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
   81784:	e0bff717 	ldw	r2,-36(fp)
   81788:	10800044 	addi	r2,r2,1
   8178c:	e0bff715 	stw	r2,-36(fp)
   81790:	e0fff717 	ldw	r3,-36(fp)
   81794:	e0bffe17 	ldw	r2,-8(fp)
   81798:	18bfdb16 	blt	r3,r2,81708 <vid_move_block+0x58>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
   8179c:	e0bff817 	ldw	r2,-32(fp)
   817a0:	10800044 	addi	r2,r2,1
   817a4:	e0bff815 	stw	r2,-32(fp)
   817a8:	e0fff817 	ldw	r3,-32(fp)
   817ac:	e0bfff17 	ldw	r2,-4(fp)
   817b0:	18bfce16 	blt	r3,r2,816ec <vid_move_block+0x3c>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
   817b4:	0005883a 	mov	r2,zero
}
   817b8:	e037883a 	mov	sp,fp
   817bc:	dfc00117 	ldw	ra,4(sp)
   817c0:	df000017 	ldw	fp,0(sp)
   817c4:	dec00204 	addi	sp,sp,8
   817c8:	f800283a 	ret

000817cc <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
   817cc:	defff604 	addi	sp,sp,-40
   817d0:	dfc00915 	stw	ra,36(sp)
   817d4:	df000815 	stw	fp,32(sp)
   817d8:	df000804 	addi	fp,sp,32
   817dc:	e13ffc15 	stw	r4,-16(fp)
   817e0:	e17ffd15 	stw	r5,-12(fp)
   817e4:	e1bffe15 	stw	r6,-8(fp)
   817e8:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
   817ec:	e03ffa15 	stw	zero,-24(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
   817f0:	e0bffc17 	ldw	r2,-16(fp)
   817f4:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
   817f8:	00002806 	br	8189c <vid_print_string+0xd0>
    //Handle newline char here.
    if (string[i] == '\n') {
   817fc:	e0bffa17 	ldw	r2,-24(fp)
   81800:	e0c00317 	ldw	r3,12(fp)
   81804:	1885883a 	add	r2,r3,r2
   81808:	10800003 	ldbu	r2,0(r2)
   8180c:	10803fcc 	andi	r2,r2,255
   81810:	1080201c 	xori	r2,r2,128
   81814:	10bfe004 	addi	r2,r2,-128
   81818:	10800298 	cmpnei	r2,r2,10
   8181c:	1000091e 	bne	r2,zero,81844 <vid_print_string+0x78>
      horiz_offset = original_horiz_offset;
   81820:	e0bffb17 	ldw	r2,-20(fp)
   81824:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
   81828:	e0bffd17 	ldw	r2,-12(fp)
   8182c:	10800304 	addi	r2,r2,12
   81830:	e0bffd15 	stw	r2,-12(fp)
      i++;
   81834:	e0bffa17 	ldw	r2,-24(fp)
   81838:	10800044 	addi	r2,r2,1
   8183c:	e0bffa15 	stw	r2,-24(fp)
      continue;
   81840:	00001606 	br	8189c <vid_print_string+0xd0>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
   81844:	e0bffa17 	ldw	r2,-24(fp)
   81848:	e0c00317 	ldw	r3,12(fp)
   8184c:	1885883a 	add	r2,r3,r2
   81850:	10800003 	ldbu	r2,0(r2)
   81854:	10803fcc 	andi	r2,r2,255
   81858:	1080201c 	xori	r2,r2,128
   8185c:	10bfe004 	addi	r2,r2,-128
   81860:	e0ffff17 	ldw	r3,-4(fp)
   81864:	d8c00015 	stw	r3,0(sp)
   81868:	e0c00217 	ldw	r3,8(fp)
   8186c:	d8c00115 	stw	r3,4(sp)
   81870:	e13ffc17 	ldw	r4,-16(fp)
   81874:	e17ffd17 	ldw	r5,-12(fp)
   81878:	e1bffe17 	ldw	r6,-8(fp)
   8187c:	100f883a 	mov	r7,r2
   81880:	0081a240 	call	81a24 <vid_print_char>
    i++;
   81884:	e0bffa17 	ldw	r2,-24(fp)
   81888:	10800044 	addi	r2,r2,1
   8188c:	e0bffa15 	stw	r2,-24(fp)
    horiz_offset += 8;
   81890:	e0bffc17 	ldw	r2,-16(fp)
   81894:	10800204 	addi	r2,r2,8
   81898:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
   8189c:	e0bffa17 	ldw	r2,-24(fp)
   818a0:	e0c00317 	ldw	r3,12(fp)
   818a4:	1885883a 	add	r2,r3,r2
   818a8:	10800003 	ldbu	r2,0(r2)
   818ac:	10803fcc 	andi	r2,r2,255
   818b0:	1080201c 	xori	r2,r2,128
   818b4:	10bfe004 	addi	r2,r2,-128
   818b8:	103fd01e 	bne	r2,zero,817fc <vid_print_string+0x30>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
   818bc:	0005883a 	mov	r2,zero
}
   818c0:	e037883a 	mov	sp,fp
   818c4:	dfc00117 	ldw	ra,4(sp)
   818c8:	df000017 	ldw	fp,0(sp)
   818cc:	dec00204 	addi	sp,sp,8
   818d0:	f800283a 	ret

000818d4 <vid_draw_box>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
   818d4:	defff704 	addi	sp,sp,-36
   818d8:	dfc00815 	stw	ra,32(sp)
   818dc:	df000715 	stw	fp,28(sp)
   818e0:	df000704 	addi	fp,sp,28
   818e4:	e13ffc15 	stw	r4,-16(fp)
   818e8:	e17ffd15 	stw	r5,-12(fp)
   818ec:	e1bffe15 	stw	r6,-8(fp)
   818f0:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
   818f4:	e0800317 	ldw	r2,12(fp)
   818f8:	10000a26 	beq	r2,zero,81924 <vid_draw_box+0x50>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
   818fc:	e0800217 	ldw	r2,8(fp)
   81900:	d8800015 	stw	r2,0(sp)
   81904:	e0800417 	ldw	r2,16(fp)
   81908:	d8800115 	stw	r2,4(sp)
   8190c:	e13ffc17 	ldw	r4,-16(fp)
   81910:	e17ffd17 	ldw	r5,-12(fp)
   81914:	e1bffe17 	ldw	r6,-8(fp)
   81918:	e1ffff17 	ldw	r7,-4(fp)
   8191c:	0081bec0 	call	81bec <vid_paint_block>
   81920:	00003a06 	br	81a0c <vid_draw_box+0x138>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
   81924:	e0bfff17 	ldw	r2,-4(fp)
   81928:	10bfffc4 	addi	r2,r2,-1
   8192c:	00c00044 	movi	r3,1
   81930:	d8c00015 	stw	r3,0(sp)
   81934:	e0c00217 	ldw	r3,8(fp)
   81938:	d8c00115 	stw	r3,4(sp)
   8193c:	e0c00417 	ldw	r3,16(fp)
   81940:	d8c00215 	stw	r3,8(sp)
   81944:	e13ffc17 	ldw	r4,-16(fp)
   81948:	e17ffd17 	ldw	r5,-12(fp)
   8194c:	e1bffc17 	ldw	r6,-16(fp)
   81950:	100f883a 	mov	r7,r2
   81954:	00810d00 	call	810d0 <vid_draw_line>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
   81958:	e0bffe17 	ldw	r2,-8(fp)
   8195c:	113fffc4 	addi	r4,r2,-1
   81960:	e0bffe17 	ldw	r2,-8(fp)
   81964:	10ffffc4 	addi	r3,r2,-1
   81968:	e0bfff17 	ldw	r2,-4(fp)
   8196c:	10bfffc4 	addi	r2,r2,-1
   81970:	01400044 	movi	r5,1
   81974:	d9400015 	stw	r5,0(sp)
   81978:	e1400217 	ldw	r5,8(fp)
   8197c:	d9400115 	stw	r5,4(sp)
   81980:	e1400417 	ldw	r5,16(fp)
   81984:	d9400215 	stw	r5,8(sp)
   81988:	e17ffd17 	ldw	r5,-12(fp)
   8198c:	180d883a 	mov	r6,r3
   81990:	100f883a 	mov	r7,r2
   81994:	00810d00 	call	810d0 <vid_draw_line>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
   81998:	e0bffe17 	ldw	r2,-8(fp)
   8199c:	10bfffc4 	addi	r2,r2,-1
   819a0:	00c00044 	movi	r3,1
   819a4:	d8c00015 	stw	r3,0(sp)
   819a8:	e0c00217 	ldw	r3,8(fp)
   819ac:	d8c00115 	stw	r3,4(sp)
   819b0:	e0c00417 	ldw	r3,16(fp)
   819b4:	d8c00215 	stw	r3,8(sp)
   819b8:	e13ffc17 	ldw	r4,-16(fp)
   819bc:	e17ffd17 	ldw	r5,-12(fp)
   819c0:	100d883a 	mov	r6,r2
   819c4:	e1fffd17 	ldw	r7,-12(fp)
   819c8:	00810d00 	call	810d0 <vid_draw_line>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
   819cc:	e0bfff17 	ldw	r2,-4(fp)
   819d0:	117fffc4 	addi	r5,r2,-1
   819d4:	e0bffe17 	ldw	r2,-8(fp)
   819d8:	10ffffc4 	addi	r3,r2,-1
   819dc:	e0bfff17 	ldw	r2,-4(fp)
   819e0:	10bfffc4 	addi	r2,r2,-1
   819e4:	01000044 	movi	r4,1
   819e8:	d9000015 	stw	r4,0(sp)
   819ec:	e1000217 	ldw	r4,8(fp)
   819f0:	d9000115 	stw	r4,4(sp)
   819f4:	e1000417 	ldw	r4,16(fp)
   819f8:	d9000215 	stw	r4,8(sp)
   819fc:	e13ffc17 	ldw	r4,-16(fp)
   81a00:	180d883a 	mov	r6,r3
   81a04:	100f883a 	mov	r7,r2
   81a08:	00810d00 	call	810d0 <vid_draw_line>
  }

  return (0);
   81a0c:	0005883a 	mov	r2,zero
}
   81a10:	e037883a 	mov	sp,fp
   81a14:	dfc00117 	ldw	ra,4(sp)
   81a18:	df000017 	ldw	fp,0(sp)
   81a1c:	dec00204 	addi	sp,sp,8
   81a20:	f800283a 	ret

00081a24 <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
   81a24:	defff704 	addi	sp,sp,-36
   81a28:	dfc00815 	stw	ra,32(sp)
   81a2c:	df000715 	stw	fp,28(sp)
   81a30:	df000704 	addi	fp,sp,28
   81a34:	e13ffc15 	stw	r4,-16(fp)
   81a38:	e17ffd15 	stw	r5,-12(fp)
   81a3c:	e1bffe15 	stw	r6,-8(fp)
   81a40:	3805883a 	mov	r2,r7
   81a44:	e0bfff05 	stb	r2,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
   81a48:	e0bfff03 	ldbu	r2,-4(fp)
   81a4c:	10bff804 	addi	r2,r2,-32
   81a50:	e0bffb05 	stb	r2,-20(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
   81a54:	e03ff915 	stw	zero,-28(fp)
   81a58:	00002506 	br	81af0 <vid_print_char+0xcc>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
   81a5c:	e0bffb07 	ldb	r2,-20(fp)
   81a60:	108002e4 	muli	r2,r2,11
   81a64:	1007883a 	mov	r3,r2
   81a68:	e0bff917 	ldw	r2,-28(fp)
   81a6c:	1885883a 	add	r2,r3,r2
   81a70:	e0c00217 	ldw	r3,8(fp)
   81a74:	1885883a 	add	r2,r3,r2
   81a78:	10800003 	ldbu	r2,0(r2)
   81a7c:	e0bffb45 	stb	r2,-19(fp)
    for (j = 0; j < 8; j++) {
   81a80:	e03ffa15 	stw	zero,-24(fp)
   81a84:	00001406 	br	81ad8 <vid_print_char+0xb4>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
   81a88:	e0fffb47 	ldb	r3,-19(fp)
   81a8c:	01002004 	movi	r4,128
   81a90:	e0bffa17 	ldw	r2,-24(fp)
   81a94:	2085d83a 	sra	r2,r4,r2
   81a98:	1884703a 	and	r2,r3,r2
   81a9c:	10000b26 	beq	r2,zero,81acc <vid_print_char+0xa8>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
   81aa0:	e0fffc17 	ldw	r3,-16(fp)
   81aa4:	e0bffa17 	ldw	r2,-24(fp)
   81aa8:	1889883a 	add	r4,r3,r2
   81aac:	e0fffd17 	ldw	r3,-12(fp)
   81ab0:	e0bff917 	ldw	r2,-28(fp)
   81ab4:	1887883a 	add	r3,r3,r2
   81ab8:	e0bffe17 	ldw	r2,-8(fp)
   81abc:	180b883a 	mov	r5,r3
   81ac0:	100d883a 	mov	r6,r2
   81ac4:	e1c00317 	ldw	r7,12(fp)
   81ac8:	0081b140 	call	81b14 <vid_set_pixel>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
   81acc:	e0bffa17 	ldw	r2,-24(fp)
   81ad0:	10800044 	addi	r2,r2,1
   81ad4:	e0bffa15 	stw	r2,-24(fp)
   81ad8:	e0bffa17 	ldw	r2,-24(fp)
   81adc:	10800210 	cmplti	r2,r2,8
   81ae0:	103fe91e 	bne	r2,zero,81a88 <vid_print_char+0x64>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
   81ae4:	e0bff917 	ldw	r2,-28(fp)
   81ae8:	10800044 	addi	r2,r2,1
   81aec:	e0bff915 	stw	r2,-28(fp)
   81af0:	e0bff917 	ldw	r2,-28(fp)
   81af4:	108002d0 	cmplti	r2,r2,11
   81af8:	103fd81e 	bne	r2,zero,81a5c <vid_print_char+0x38>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
   81afc:	0005883a 	mov	r2,zero
}
   81b00:	e037883a 	mov	sp,fp
   81b04:	dfc00117 	ldw	ra,4(sp)
   81b08:	df000017 	ldw	fp,0(sp)
   81b0c:	dec00204 	addi	sp,sp,8
   81b10:	f800283a 	ret

00081b14 <vid_set_pixel>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
   81b14:	defff904 	addi	sp,sp,-28
   81b18:	dfc00615 	stw	ra,24(sp)
   81b1c:	df000515 	stw	fp,20(sp)
   81b20:	df000504 	addi	fp,sp,20
   81b24:	e13ffc15 	stw	r4,-16(fp)
   81b28:	e17ffd15 	stw	r5,-12(fp)
   81b2c:	e1bffe15 	stw	r6,-8(fp)
   81b30:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	alt_u16 color16;


	// encode to RGB  5 6 5
	color16 = (color & 0xFF) >> 3; // blue
   81b34:	e0bffe17 	ldw	r2,-8(fp)
   81b38:	10803fcc 	andi	r2,r2,255
   81b3c:	1004d0fa 	srli	r2,r2,3
   81b40:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xFC00) >> 5; // green
   81b44:	e0bffe17 	ldw	r2,-8(fp)
   81b48:	10bf000c 	andi	r2,r2,64512
   81b4c:	1004d17a 	srli	r2,r2,5
   81b50:	1007883a 	mov	r3,r2
   81b54:	e0bffb0b 	ldhu	r2,-20(fp)
   81b58:	1884b03a 	or	r2,r3,r2
   81b5c:	e0bffb0d 	sth	r2,-20(fp)
	color16 |= (color & 0xF80000) >> 8; // blue
   81b60:	e0bffe17 	ldw	r2,-8(fp)
   81b64:	10803e2c 	andhi	r2,r2,248
   81b68:	1004d23a 	srli	r2,r2,8
   81b6c:	1007883a 	mov	r3,r2
   81b70:	e0bffb0b 	ldhu	r2,-20(fp)
   81b74:	1884b03a 	or	r2,r3,r2
   81b78:	e0bffb0d 	sth	r2,-20(fp)
	LCD_DrawPoint(horiz, vert, color16);
   81b7c:	e0bffc17 	ldw	r2,-16(fp)
   81b80:	113fffcc 	andi	r4,r2,65535
   81b84:	e0bffd17 	ldw	r2,-12(fp)
   81b88:	10ffffcc 	andi	r3,r2,65535
   81b8c:	e0bffb0b 	ldhu	r2,-20(fp)
   81b90:	180b883a 	mov	r5,r3
   81b94:	100d883a 	mov	r6,r2
   81b98:	00807800 	call	80780 <LCD_DrawPoint>
  	addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  	IOWR_16DIRECT( addr, 0, (int)(color));
	}
#endif

}
   81b9c:	e037883a 	mov	sp,fp
   81ba0:	dfc00117 	ldw	ra,4(sp)
   81ba4:	df000017 	ldw	fp,0(sp)
   81ba8:	dec00204 	addi	sp,sp,8
   81bac:	f800283a 	ret

00081bb0 <vid_get_pixel>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
   81bb0:	defffb04 	addi	sp,sp,-20
   81bb4:	dfc00415 	stw	ra,16(sp)
   81bb8:	df000315 	stw	fp,12(sp)
   81bbc:	df000304 	addi	fp,sp,12
   81bc0:	e13ffd15 	stw	r4,-12(fp)
   81bc4:	e17ffe15 	stw	r5,-8(fp)
   81bc8:	e1bfff15 	stw	r6,-4(fp)
#ifdef LT24
	printf("vid_get_pixel is not implemented\r\n");
   81bcc:	010002f4 	movhi	r4,11
   81bd0:	21354604 	addi	r4,r4,-10984
   81bd4:	00893440 	call	89344 <puts>
  int addr;
  
  addr = ( ( (int)(VIPFR_GetDrawFrame(display)) )+ (vert * (display->width * 2)) + horiz * 2);
  return(IORD_16DIRECT(addr, 0));
#endif
}
   81bd8:	e037883a 	mov	sp,fp
   81bdc:	dfc00117 	ldw	ra,4(sp)
   81be0:	df000017 	ldw	fp,0(sp)
   81be4:	dec00204 	addi	sp,sp,8
   81be8:	f800283a 	ret

00081bec <vid_paint_block>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
   81bec:	defff804 	addi	sp,sp,-32
   81bf0:	dfc00715 	stw	ra,28(sp)
   81bf4:	df000615 	stw	fp,24(sp)
   81bf8:	df000604 	addi	fp,sp,24
   81bfc:	e13ffc15 	stw	r4,-16(fp)
   81c00:	e17ffd15 	stw	r5,-12(fp)
   81c04:	e1bffe15 	stw	r6,-8(fp)
   81c08:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
   81c0c:	e0bffd17 	ldw	r2,-12(fp)
   81c10:	e0bffb15 	stw	r2,-20(fp)
   81c14:	00001206 	br	81c60 <vid_paint_block+0x74>
		for(x=Hstart;x<Hend;x++){
   81c18:	e0bffc17 	ldw	r2,-16(fp)
   81c1c:	e0bffa15 	stw	r2,-24(fp)
   81c20:	00000906 	br	81c48 <vid_paint_block+0x5c>
			vid_set_pixel(x, y, color, display);
   81c24:	e0800217 	ldw	r2,8(fp)
   81c28:	e13ffa17 	ldw	r4,-24(fp)
   81c2c:	e17ffb17 	ldw	r5,-20(fp)
   81c30:	100d883a 	mov	r6,r2
   81c34:	e1c00317 	ldw	r7,12(fp)
   81c38:	0081b140 	call	81b14 <vid_set_pixel>
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
		for(x=Hstart;x<Hend;x++){
   81c3c:	e0bffa17 	ldw	r2,-24(fp)
   81c40:	10800044 	addi	r2,r2,1
   81c44:	e0bffa15 	stw	r2,-24(fp)
   81c48:	e0fffa17 	ldw	r3,-24(fp)
   81c4c:	e0bffe17 	ldw	r2,-8(fp)
   81c50:	18bff416 	blt	r3,r2,81c24 <vid_paint_block+0x38>
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
#ifdef LT24
	int x,y;
	for(y=Vstart;y<Vend;y++){
   81c54:	e0bffb17 	ldw	r2,-20(fp)
   81c58:	10800044 	addi	r2,r2,1
   81c5c:	e0bffb15 	stw	r2,-20(fp)
   81c60:	e0fffb17 	ldw	r3,-20(fp)
   81c64:	e0bfff17 	ldw	r2,-4(fp)
   81c68:	18bfeb16 	blt	r3,r2,81c18 <vid_paint_block+0x2c>
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
#endif
}
   81c6c:	e037883a 	mov	sp,fp
   81c70:	dfc00117 	ldw	ra,4(sp)
   81c74:	df000017 	ldw	fp,0(sp)
   81c78:	dec00204 	addi	sp,sp,8
   81c7c:	f800283a 	ret

00081c80 <vid_draw_horiz_line>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
   81c80:	defff904 	addi	sp,sp,-28
   81c84:	dfc00615 	stw	ra,24(sp)
   81c88:	df000515 	stw	fp,20(sp)
   81c8c:	df000504 	addi	fp,sp,20
   81c90:	2007883a 	mov	r3,r4
   81c94:	2805883a 	mov	r2,r5
   81c98:	e1bffe15 	stw	r6,-8(fp)
   81c9c:	e1ffff15 	stw	r7,-4(fp)
   81ca0:	e0fffc0d 	sth	r3,-16(fp)
   81ca4:	e0bffd0d 	sth	r2,-12(fp)
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
   81ca8:	e0bffc0f 	ldh	r2,-16(fp)
   81cac:	e0bffb15 	stw	r2,-20(fp)
   81cb0:	00000906 	br	81cd8 <vid_draw_horiz_line+0x58>
		vid_set_pixel(x, V, color, display);
   81cb4:	e0bfff17 	ldw	r2,-4(fp)
   81cb8:	e13ffb17 	ldw	r4,-20(fp)
   81cbc:	e17ffe17 	ldw	r5,-8(fp)
   81cc0:	100d883a 	mov	r6,r2
   81cc4:	e1c00217 	ldw	r7,8(fp)
   81cc8:	0081b140 	call	81b14 <vid_set_pixel>
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
#ifdef LT24
	int x;
	for(x=Hstart;x<Hend;x++){
   81ccc:	e0bffb17 	ldw	r2,-20(fp)
   81cd0:	10800044 	addi	r2,r2,1
   81cd4:	e0bffb15 	stw	r2,-20(fp)
   81cd8:	e0bffd0f 	ldh	r2,-12(fp)
   81cdc:	e0fffb17 	ldw	r3,-20(fp)
   81ce0:	18bff416 	blt	r3,r2,81cb4 <vid_draw_horiz_line+0x34>
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
  }
  free(fast_buffer);
#endif

}
   81ce4:	e037883a 	mov	sp,fp
   81ce8:	dfc00117 	ldw	ra,4(sp)
   81cec:	df000017 	ldw	fp,0(sp)
   81cf0:	dec00204 	addi	sp,sp,8
   81cf4:	f800283a 	ret

00081cf8 <vid_merge_colors>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
   81cf8:	defffc04 	addi	sp,sp,-16
   81cfc:	df000315 	stw	fp,12(sp)
   81d00:	df000304 	addi	fp,sp,12
   81d04:	e13ffd15 	stw	r4,-12(fp)
   81d08:	e17ffe15 	stw	r5,-8(fp)
   81d0c:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
   81d10:	e0bffe17 	ldw	r2,-8(fp)
   81d14:	1085883a 	add	r2,r2,r2
   81d18:	10800054 	ori	r2,r2,1
   81d1c:	1006917a 	slli	r3,r2,5
   81d20:	e0bfff17 	ldw	r2,-4(fp)
   81d24:	1886b03a 	or	r3,r3,r2
   81d28:	e0bffd17 	ldw	r2,-12(fp)
   81d2c:	100492fa 	slli	r2,r2,11
   81d30:	1884b03a 	or	r2,r3,r2
}
   81d34:	e037883a 	mov	sp,fp
   81d38:	df000017 	ldw	fp,0(sp)
   81d3c:	dec00104 	addi	sp,sp,4
   81d40:	f800283a 	ret

00081d44 <vid_color_convert24_16>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
   81d44:	defffc04 	addi	sp,sp,-16
   81d48:	df000315 	stw	fp,12(sp)
   81d4c:	df000304 	addi	fp,sp,12
   81d50:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
   81d54:	e0bfff17 	ldw	r2,-4(fp)
   81d58:	10800003 	ldbu	r2,0(r2)
   81d5c:	1007883a 	mov	r3,r2
   81d60:	00bffe04 	movi	r2,-8
   81d64:	1884703a 	and	r2,r3,r2
   81d68:	e0bffd05 	stb	r2,-12(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
   81d6c:	e0bfff17 	ldw	r2,-4(fp)
   81d70:	10800044 	addi	r2,r2,1
   81d74:	10800003 	ldbu	r2,0(r2)
   81d78:	1007883a 	mov	r3,r2
   81d7c:	00bfff04 	movi	r2,-4
   81d80:	1884703a 	and	r2,r3,r2
   81d84:	e0bffd45 	stb	r2,-11(fp)
	blue = *(color24 + 2) & 0xF8;
   81d88:	e0bfff17 	ldw	r2,-4(fp)
   81d8c:	10800084 	addi	r2,r2,2
   81d90:	10800003 	ldbu	r2,0(r2)
   81d94:	1007883a 	mov	r3,r2
   81d98:	00bffe04 	movi	r2,-8
   81d9c:	1884703a 	and	r2,r3,r2
   81da0:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
   81da4:	e0bffd83 	ldbu	r2,-10(fp)
   81da8:	1004d0fa 	srli	r2,r2,3
   81dac:	10c03fcc 	andi	r3,r2,255
   81db0:	e0bffd43 	ldbu	r2,-11(fp)
   81db4:	100490fa 	slli	r2,r2,3
   81db8:	1884b03a 	or	r2,r3,r2
   81dbc:	1007883a 	mov	r3,r2
   81dc0:	e0bffd03 	ldbu	r2,-12(fp)
   81dc4:	1004923a 	slli	r2,r2,8
   81dc8:	1884b03a 	or	r2,r3,r2
   81dcc:	e0bffe0d 	sth	r2,-8(fp)
	return output;
   81dd0:	e0bffe0b 	ldhu	r2,-8(fp)
}
   81dd4:	e037883a 	mov	sp,fp
   81dd8:	df000017 	ldw	fp,0(sp)
   81ddc:	dec00104 	addi	sp,sp,4
   81de0:	f800283a 	ret

00081de4 <vid_color_convert16_24>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
   81de4:	defffd04 	addi	sp,sp,-12
   81de8:	df000215 	stw	fp,8(sp)
   81dec:	df000204 	addi	fp,sp,8
   81df0:	2005883a 	mov	r2,r4
   81df4:	e17fff15 	stw	r5,-4(fp)
   81df8:	e0bffe0d 	sth	r2,-8(fp)
	*(color24 + 0) = color16 >> 11;
   81dfc:	e0bffe0b 	ldhu	r2,-8(fp)
   81e00:	1004d2fa 	srli	r2,r2,11
   81e04:	1007883a 	mov	r3,r2
   81e08:	e0bfff17 	ldw	r2,-4(fp)
   81e0c:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
   81e10:	e0bfff17 	ldw	r2,-4(fp)
   81e14:	10800044 	addi	r2,r2,1
   81e18:	e0fffe0b 	ldhu	r3,-8(fp)
   81e1c:	18c00f8c 	andi	r3,r3,62
   81e20:	1807d17a 	srai	r3,r3,5
   81e24:	10c00005 	stb	r3,0(r2)
	*(color24 + 2) = (color16 & 0x1F);
   81e28:	e0bfff17 	ldw	r2,-4(fp)
   81e2c:	10800084 	addi	r2,r2,2
   81e30:	e0fffe0b 	ldhu	r3,-8(fp)
   81e34:	18c007cc 	andi	r3,r3,31
   81e38:	10c00005 	stb	r3,0(r2)
	
	return (0);
   81e3c:	0005883a 	mov	r2,zero
}
   81e40:	e037883a 	mov	sp,fp
   81e44:	df000017 	ldw	fp,0(sp)
   81e48:	dec00104 	addi	sp,sp,4
   81e4c:	f800283a 	ret

00081e50 <vid_copy_line_to_frame_buffer>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
   81e50:	defffa04 	addi	sp,sp,-24
   81e54:	dfc00515 	stw	ra,20(sp)
   81e58:	df000415 	stw	fp,16(sp)
   81e5c:	df000404 	addi	fp,sp,16
   81e60:	e13ffc15 	stw	r4,-16(fp)
   81e64:	e17ffd15 	stw	r5,-12(fp)
   81e68:	e1bffe15 	stw	r6,-8(fp)
   81e6c:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("vid_copy_line_to_frame_buffer is not implemented!\r\n");
   81e70:	010002f4 	movhi	r4,11
   81e74:	21354f04 	addi	r4,r4,-10948
   81e78:	00893440 	call	89344 <puts>
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
    }
  }
  return(0);
#endif
}
   81e7c:	e037883a 	mov	sp,fp
   81e80:	dfc00117 	ldw	ra,4(sp)
   81e84:	df000017 	ldw	fp,0(sp)
   81e88:	dec00204 	addi	sp,sp,8
   81e8c:	f800283a 	ret

00081e90 <vid_draw_sloped_line>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
   81e90:	deffef04 	addi	sp,sp,-68
   81e94:	dfc01015 	stw	ra,64(sp)
   81e98:	df000f15 	stw	fp,60(sp)
   81e9c:	df000f04 	addi	fp,sp,60
   81ea0:	2011883a 	mov	r8,r4
   81ea4:	2809883a 	mov	r4,r5
   81ea8:	3007883a 	mov	r3,r6
   81eac:	3805883a 	mov	r2,r7
   81eb0:	e1400217 	ldw	r5,8(fp)
   81eb4:	e23ffb0d 	sth	r8,-20(fp)
   81eb8:	e13ffc0d 	sth	r4,-16(fp)
   81ebc:	e0fffd0d 	sth	r3,-12(fp)
   81ec0:	e0bffe0d 	sth	r2,-8(fp)
   81ec4:	e17fff0d 	sth	r5,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
   81ec8:	e0fffd0b 	ldhu	r3,-12(fp)
   81ecc:	e0bffb0b 	ldhu	r2,-20(fp)
   81ed0:	1885c83a 	sub	r2,r3,r2
   81ed4:	1000010e 	bge	r2,zero,81edc <vid_draw_sloped_line+0x4c>
   81ed8:	0085c83a 	sub	r2,zero,r2
   81edc:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
   81ee0:	e0fffe0b 	ldhu	r3,-8(fp)
   81ee4:	e0bffc0b 	ldhu	r2,-16(fp)
   81ee8:	1885c83a 	sub	r2,r3,r2
   81eec:	1000010e 	bge	r2,zero,81ef4 <vid_draw_sloped_line+0x64>
   81ef0:	0085c83a 	sub	r2,zero,r2
   81ef4:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
   81ef8:	e0bffb0b 	ldhu	r2,-20(fp)
   81efc:	e0fffd0b 	ldhu	r3,-12(fp)
   81f00:	1880032e 	bgeu	r3,r2,81f10 <vid_draw_sloped_line+0x80>
   81f04:	00bfffc4 	movi	r2,-1
   81f08:	e0bff315 	stw	r2,-52(fp)
   81f0c:	00000206 	br	81f18 <vid_draw_sloped_line+0x88>
   81f10:	00800044 	movi	r2,1
   81f14:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
   81f18:	e0bffc0b 	ldhu	r2,-16(fp)
   81f1c:	e0fffe0b 	ldhu	r3,-8(fp)
   81f20:	1880032e 	bgeu	r3,r2,81f30 <vid_draw_sloped_line+0xa0>
   81f24:	00bfffc4 	movi	r2,-1
   81f28:	e0bff415 	stw	r2,-48(fp)
   81f2c:	00000206 	br	81f38 <vid_draw_sloped_line+0xa8>
   81f30:	00800044 	movi	r2,1
   81f34:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
   81f38:	e0fff117 	ldw	r3,-60(fp)
   81f3c:	e0bff217 	ldw	r2,-56(fp)
   81f40:	18803416 	blt	r3,r2,82014 <vid_draw_sloped_line+0x184>
    int dPr   = vert_delta<<1;
   81f44:	e0bff217 	ldw	r2,-56(fp)
   81f48:	1085883a 	add	r2,r2,r2
   81f4c:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
   81f50:	e0bff117 	ldw	r2,-60(fp)
   81f54:	1085883a 	add	r2,r2,r2
   81f58:	e0fff717 	ldw	r3,-36(fp)
   81f5c:	1885c83a 	sub	r2,r3,r2
   81f60:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
   81f64:	e0fff717 	ldw	r3,-36(fp)
   81f68:	e0bff117 	ldw	r2,-60(fp)
   81f6c:	1885c83a 	sub	r2,r3,r2
   81f70:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
   81f74:	00002406 	br	82008 <vid_draw_sloped_line+0x178>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
   81f78:	e13ffb0b 	ldhu	r4,-20(fp)
   81f7c:	e0fffc0b 	ldhu	r3,-16(fp)
   81f80:	e0800317 	ldw	r2,12(fp)
   81f84:	180b883a 	mov	r5,r3
   81f88:	100d883a 	mov	r6,r2
   81f8c:	e1c00417 	ldw	r7,16(fp)
   81f90:	0081b140 	call	81b14 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
   81f94:	e0bff517 	ldw	r2,-44(fp)
   81f98:	00800f0e 	bge	zero,r2,81fd8 <vid_draw_sloped_line+0x148>
        horiz_start+=horiz_incr;
   81f9c:	e0bff317 	ldw	r2,-52(fp)
   81fa0:	1007883a 	mov	r3,r2
   81fa4:	e0bffb0b 	ldhu	r2,-20(fp)
   81fa8:	1885883a 	add	r2,r3,r2
   81fac:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
   81fb0:	e0bff417 	ldw	r2,-48(fp)
   81fb4:	1007883a 	mov	r3,r2
   81fb8:	e0bffc0b 	ldhu	r2,-16(fp)
   81fbc:	1885883a 	add	r2,r3,r2
   81fc0:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
   81fc4:	e0fff517 	ldw	r3,-44(fp)
   81fc8:	e0bff817 	ldw	r2,-32(fp)
   81fcc:	1885883a 	add	r2,r3,r2
   81fd0:	e0bff515 	stw	r2,-44(fp)
   81fd4:	00000906 	br	81ffc <vid_draw_sloped_line+0x16c>
      } else {
        horiz_start+=horiz_incr;
   81fd8:	e0bff317 	ldw	r2,-52(fp)
   81fdc:	1007883a 	mov	r3,r2
   81fe0:	e0bffb0b 	ldhu	r2,-20(fp)
   81fe4:	1885883a 	add	r2,r3,r2
   81fe8:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
   81fec:	e0fff517 	ldw	r3,-44(fp)
   81ff0:	e0bff717 	ldw	r2,-36(fp)
   81ff4:	1885883a 	add	r2,r3,r2
   81ff8:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
   81ffc:	e0bff117 	ldw	r2,-60(fp)
   82000:	10bfffc4 	addi	r2,r2,-1
   82004:	e0bff115 	stw	r2,-60(fp)
   82008:	e0bff117 	ldw	r2,-60(fp)
   8200c:	103fda0e 	bge	r2,zero,81f78 <vid_draw_sloped_line+0xe8>
   82010:	00003306 	br	820e0 <vid_draw_sloped_line+0x250>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
   82014:	e0bff117 	ldw	r2,-60(fp)
   82018:	1085883a 	add	r2,r2,r2
   8201c:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
   82020:	e0bff217 	ldw	r2,-56(fp)
   82024:	1085883a 	add	r2,r2,r2
   82028:	e0fff917 	ldw	r3,-28(fp)
   8202c:	1885c83a 	sub	r2,r3,r2
   82030:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
   82034:	e0fff917 	ldw	r3,-28(fp)
   82038:	e0bff217 	ldw	r2,-56(fp)
   8203c:	1885c83a 	sub	r2,r3,r2
   82040:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
   82044:	00002406 	br	820d8 <vid_draw_sloped_line+0x248>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start, color, display);
   82048:	e13ffb0b 	ldhu	r4,-20(fp)
   8204c:	e0fffc0b 	ldhu	r3,-16(fp)
   82050:	e0800317 	ldw	r2,12(fp)
   82054:	180b883a 	mov	r5,r3
   82058:	100d883a 	mov	r6,r2
   8205c:	e1c00417 	ldw	r7,16(fp)
   82060:	0081b140 	call	81b14 <vid_set_pixel>
      // If we're moving both up and right
      if (P > 0) {
   82064:	e0bff617 	ldw	r2,-40(fp)
   82068:	00800f0e 	bge	zero,r2,820a8 <vid_draw_sloped_line+0x218>
        horiz_start+=horiz_incr;
   8206c:	e0bff317 	ldw	r2,-52(fp)
   82070:	1007883a 	mov	r3,r2
   82074:	e0bffb0b 	ldhu	r2,-20(fp)
   82078:	1885883a 	add	r2,r3,r2
   8207c:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
   82080:	e0bff417 	ldw	r2,-48(fp)
   82084:	1007883a 	mov	r3,r2
   82088:	e0bffc0b 	ldhu	r2,-16(fp)
   8208c:	1885883a 	add	r2,r3,r2
   82090:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
   82094:	e0fff617 	ldw	r3,-40(fp)
   82098:	e0bffa17 	ldw	r2,-24(fp)
   8209c:	1885883a 	add	r2,r3,r2
   820a0:	e0bff615 	stw	r2,-40(fp)
   820a4:	00000906 	br	820cc <vid_draw_sloped_line+0x23c>
      } else {
        vert_start+=vert_incr;
   820a8:	e0bff417 	ldw	r2,-48(fp)
   820ac:	1007883a 	mov	r3,r2
   820b0:	e0bffc0b 	ldhu	r2,-16(fp)
   820b4:	1885883a 	add	r2,r3,r2
   820b8:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
   820bc:	e0fff617 	ldw	r3,-40(fp)
   820c0:	e0bff917 	ldw	r2,-28(fp)
   820c4:	1885883a 	add	r2,r3,r2
   820c8:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
   820cc:	e0bff217 	ldw	r2,-56(fp)
   820d0:	10bfffc4 	addi	r2,r2,-1
   820d4:	e0bff215 	stw	r2,-56(fp)
   820d8:	e0bff217 	ldw	r2,-56(fp)
   820dc:	103fda0e 	bge	r2,zero,82048 <vid_draw_sloped_line+0x1b8>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
   820e0:	e037883a 	mov	sp,fp
   820e4:	dfc00117 	ldw	ra,4(sp)
   820e8:	df000017 	ldw	fp,0(sp)
   820ec:	dec00204 	addi	sp,sp,8
   820f0:	f800283a 	ret

000820f4 <vid_draw_circle>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
   820f4:	defff104 	addi	sp,sp,-60
   820f8:	dfc00e15 	stw	ra,56(sp)
   820fc:	df000d15 	stw	fp,52(sp)
   82100:	df000d04 	addi	fp,sp,52
   82104:	e13ffb15 	stw	r4,-20(fp)
   82108:	e17ffc15 	stw	r5,-16(fp)
   8210c:	e1bffd15 	stw	r6,-12(fp)
   82110:	e1fffe15 	stw	r7,-8(fp)
   82114:	e0800217 	ldw	r2,8(fp)
   82118:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
   8211c:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
   82120:	e0bffd17 	ldw	r2,-12(fp)
   82124:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
   82128:	e0bffd17 	ldw	r2,-12(fp)
   8212c:	10bfff24 	muli	r2,r2,-4
   82130:	10800144 	addi	r2,r2,5
   82134:	1000010e 	bge	r2,zero,8213c <vid_draw_circle+0x48>
   82138:	108000c4 	addi	r2,r2,3
   8213c:	1005d0ba 	srai	r2,r2,2
   82140:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
   82144:	e0bfff07 	ldb	r2,-4(fp)
   82148:	d8000015 	stw	zero,0(sp)
   8214c:	d8000115 	stw	zero,4(sp)
   82150:	e0fffe17 	ldw	r3,-8(fp)
   82154:	d8c00215 	stw	r3,8(sp)
   82158:	d8800315 	stw	r2,12(sp)
   8215c:	e0800317 	ldw	r2,12(fp)
   82160:	d8800415 	stw	r2,16(sp)
   82164:	e13ffb17 	ldw	r4,-20(fp)
   82168:	e17ffc17 	ldw	r5,-16(fp)
   8216c:	e1bff817 	ldw	r6,-32(fp)
   82170:	e1fff917 	ldw	r7,-28(fp)
   82174:	00825e80 	call	825e8 <vid_round_corner_points>

  // Now start moving out from those points until the lines meet
  while (x < y) {
   82178:	00002406 	br	8220c <vid_draw_circle+0x118>
    x++;
   8217c:	e0bff817 	ldw	r2,-32(fp)
   82180:	10800044 	addi	r2,r2,1
   82184:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
   82188:	e0bffa17 	ldw	r2,-24(fp)
   8218c:	1000070e 	bge	r2,zero,821ac <vid_draw_circle+0xb8>
      p += 2*x+1;
   82190:	e0bff817 	ldw	r2,-32(fp)
   82194:	1085883a 	add	r2,r2,r2
   82198:	10800044 	addi	r2,r2,1
   8219c:	e0fffa17 	ldw	r3,-24(fp)
   821a0:	1885883a 	add	r2,r3,r2
   821a4:	e0bffa15 	stw	r2,-24(fp)
   821a8:	00000b06 	br	821d8 <vid_draw_circle+0xe4>
    } else {
      y--;
   821ac:	e0bff917 	ldw	r2,-28(fp)
   821b0:	10bfffc4 	addi	r2,r2,-1
   821b4:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
   821b8:	e0fff817 	ldw	r3,-32(fp)
   821bc:	e0bff917 	ldw	r2,-28(fp)
   821c0:	1885c83a 	sub	r2,r3,r2
   821c4:	1085883a 	add	r2,r2,r2
   821c8:	10800044 	addi	r2,r2,1
   821cc:	e0fffa17 	ldw	r3,-24(fp)
   821d0:	1885883a 	add	r2,r3,r2
   821d4:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
   821d8:	e0bfff07 	ldb	r2,-4(fp)
   821dc:	d8000015 	stw	zero,0(sp)
   821e0:	d8000115 	stw	zero,4(sp)
   821e4:	e0fffe17 	ldw	r3,-8(fp)
   821e8:	d8c00215 	stw	r3,8(sp)
   821ec:	d8800315 	stw	r2,12(sp)
   821f0:	e0800317 	ldw	r2,12(fp)
   821f4:	d8800415 	stw	r2,16(sp)
   821f8:	e13ffb17 	ldw	r4,-20(fp)
   821fc:	e17ffc17 	ldw	r5,-16(fp)
   82200:	e1bff817 	ldw	r6,-32(fp)
   82204:	e1fff917 	ldw	r7,-28(fp)
   82208:	00825e80 	call	825e8 <vid_round_corner_points>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
   8220c:	e0fff817 	ldw	r3,-32(fp)
   82210:	e0bff917 	ldw	r2,-28(fp)
   82214:	18bfd916 	blt	r3,r2,8217c <vid_draw_circle+0x88>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
   82218:	0005883a 	mov	r2,zero
}
   8221c:	e037883a 	mov	sp,fp
   82220:	dfc00117 	ldw	ra,4(sp)
   82224:	df000017 	ldw	fp,0(sp)
   82228:	dec00204 	addi	sp,sp,8
   8222c:	f800283a 	ret

00082230 <vid_draw_round_corner_box>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
   82230:	deffec04 	addi	sp,sp,-80
   82234:	dfc01315 	stw	ra,76(sp)
   82238:	df001215 	stw	fp,72(sp)
   8223c:	df001204 	addi	fp,sp,72
   82240:	e13ffc15 	stw	r4,-16(fp)
   82244:	e17ffd15 	stw	r5,-12(fp)
   82248:	e1bffe15 	stw	r6,-8(fp)
   8224c:	e1ffff15 	stw	r7,-4(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
   82250:	e0bffc17 	ldw	r2,-16(fp)
   82254:	e0fffe17 	ldw	r3,-8(fp)
   82258:	1880060e 	bge	r3,r2,82274 <vid_draw_round_corner_box+0x44>
  {
    temp = horiz_end;
   8225c:	e0bffe17 	ldw	r2,-8(fp)
   82260:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
   82264:	e0bffc17 	ldw	r2,-16(fp)
   82268:	e0bffe15 	stw	r2,-8(fp)
    horiz_start = temp;
   8226c:	e0bff617 	ldw	r2,-40(fp)
   82270:	e0bffc15 	stw	r2,-16(fp)
  }
  
  if( vert_start > vert_end )
   82274:	e0bffd17 	ldw	r2,-12(fp)
   82278:	e0ffff17 	ldw	r3,-4(fp)
   8227c:	1880060e 	bge	r3,r2,82298 <vid_draw_round_corner_box+0x68>
  {
    temp = vert_end;
   82280:	e0bfff17 	ldw	r2,-4(fp)
   82284:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
   82288:	e0bffd17 	ldw	r2,-12(fp)
   8228c:	e0bfff15 	stw	r2,-4(fp)
    vert_start = temp;
   82290:	e0bff617 	ldw	r2,-40(fp)
   82294:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
   82298:	e0fffe17 	ldw	r3,-8(fp)
   8229c:	e0bffc17 	ldw	r2,-16(fp)
   822a0:	1885c83a 	sub	r2,r3,r2
   822a4:	e0bff715 	stw	r2,-36(fp)
  height = vert_end - vert_start;
   822a8:	e0ffff17 	ldw	r3,-4(fp)
   822ac:	e0bffd17 	ldw	r2,-12(fp)
   822b0:	1885c83a 	sub	r2,r3,r2
   822b4:	e0bff815 	stw	r2,-32(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
   822b8:	e0800217 	ldw	r2,8(fp)
   822bc:	e0fff717 	ldw	r3,-36(fp)
   822c0:	1806d07a 	srli	r3,r3,1
   822c4:	1880032e 	bgeu	r3,r2,822d4 <vid_draw_round_corner_box+0xa4>
    radius = width / 2;
   822c8:	e0bff717 	ldw	r2,-36(fp)
   822cc:	1004d07a 	srli	r2,r2,1
   822d0:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
   822d4:	e0800217 	ldw	r2,8(fp)
   822d8:	e0fff817 	ldw	r3,-32(fp)
   822dc:	1806d07a 	srli	r3,r3,1
   822e0:	1880032e 	bgeu	r3,r2,822f0 <vid_draw_round_corner_box+0xc0>
    radius = height / 2;
   822e4:	e0bff817 	ldw	r2,-32(fp)
   822e8:	1004d07a 	srli	r2,r2,1
   822ec:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
   822f0:	e0800217 	ldw	r2,8(fp)
   822f4:	1085883a 	add	r2,r2,r2
   822f8:	e0bff915 	stw	r2,-28(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
   822fc:	e0bff917 	ldw	r2,-28(fp)
   82300:	e0fff717 	ldw	r3,-36(fp)
   82304:	1885c83a 	sub	r2,r3,r2
   82308:	e0bffa15 	stw	r2,-24(fp)
  straight_height = height - diameter;
   8230c:	e0bff917 	ldw	r2,-28(fp)
   82310:	e0fff817 	ldw	r3,-32(fp)
   82314:	1885c83a 	sub	r2,r3,r2
   82318:	e0bffb15 	stw	r2,-20(fp)

  x = 0;
   8231c:	e03ff315 	stw	zero,-52(fp)
  y = radius;
   82320:	e0800217 	ldw	r2,8(fp)
   82324:	e0bff415 	stw	r2,-48(fp)
  p = (5 - radius*4)/4;
   82328:	e0800217 	ldw	r2,8(fp)
   8232c:	10bfff24 	muli	r2,r2,-4
   82330:	10800144 	addi	r2,r2,5
   82334:	1000010e 	bge	r2,zero,8233c <vid_draw_round_corner_box+0x10c>
   82338:	108000c4 	addi	r2,r2,3
   8233c:	1005d0ba 	srai	r2,r2,2
   82340:	e0bff515 	stw	r2,-44(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
   82344:	e0fffc17 	ldw	r3,-16(fp)
   82348:	e0800217 	ldw	r2,8(fp)
   8234c:	1889883a 	add	r4,r3,r2
   82350:	e0fffd17 	ldw	r3,-12(fp)
   82354:	e0800217 	ldw	r2,8(fp)
   82358:	188b883a 	add	r5,r3,r2
   8235c:	e0fff317 	ldw	r3,-52(fp)
   82360:	e0bff417 	ldw	r2,-48(fp)
   82364:	e23ffa17 	ldw	r8,-24(fp)
   82368:	e1fffb17 	ldw	r7,-20(fp)
   8236c:	e1800417 	ldw	r6,16(fp)
   82370:	31803fcc 	andi	r6,r6,255
   82374:	3180201c 	xori	r6,r6,128
   82378:	31bfe004 	addi	r6,r6,-128
   8237c:	da000015 	stw	r8,0(sp)
   82380:	d9c00115 	stw	r7,4(sp)
   82384:	e1c00317 	ldw	r7,12(fp)
   82388:	d9c00215 	stw	r7,8(sp)
   8238c:	d9800315 	stw	r6,12(sp)
   82390:	e1800517 	ldw	r6,20(fp)
   82394:	d9800415 	stw	r6,16(sp)
   82398:	180d883a 	mov	r6,r3
   8239c:	100f883a 	mov	r7,r2
   823a0:	00825e80 	call	825e8 <vid_round_corner_points>
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
   823a4:	00003106 	br	8246c <vid_draw_round_corner_box+0x23c>
    x++;
   823a8:	e0bff317 	ldw	r2,-52(fp)
   823ac:	10800044 	addi	r2,r2,1
   823b0:	e0bff315 	stw	r2,-52(fp)
    if (p < 0) {
   823b4:	e0bff517 	ldw	r2,-44(fp)
   823b8:	1000080e 	bge	r2,zero,823dc <vid_draw_round_corner_box+0x1ac>
      p += 2*x+1;
   823bc:	e0bff317 	ldw	r2,-52(fp)
   823c0:	1085883a 	add	r2,r2,r2
   823c4:	1007883a 	mov	r3,r2
   823c8:	e0bff517 	ldw	r2,-44(fp)
   823cc:	1885883a 	add	r2,r3,r2
   823d0:	10800044 	addi	r2,r2,1
   823d4:	e0bff515 	stw	r2,-44(fp)
   823d8:	00000c06 	br	8240c <vid_draw_round_corner_box+0x1dc>
    } else {
      y--;
   823dc:	e0bff417 	ldw	r2,-48(fp)
   823e0:	10bfffc4 	addi	r2,r2,-1
   823e4:	e0bff415 	stw	r2,-48(fp)
      p += 2*(x-y)+1;
   823e8:	e0fff317 	ldw	r3,-52(fp)
   823ec:	e0bff417 	ldw	r2,-48(fp)
   823f0:	1885c83a 	sub	r2,r3,r2
   823f4:	1085883a 	add	r2,r2,r2
   823f8:	1007883a 	mov	r3,r2
   823fc:	e0bff517 	ldw	r2,-44(fp)
   82400:	1885883a 	add	r2,r3,r2
   82404:	10800044 	addi	r2,r2,1
   82408:	e0bff515 	stw	r2,-44(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
   8240c:	e0fffc17 	ldw	r3,-16(fp)
   82410:	e0800217 	ldw	r2,8(fp)
   82414:	1889883a 	add	r4,r3,r2
   82418:	e0fffd17 	ldw	r3,-12(fp)
   8241c:	e0800217 	ldw	r2,8(fp)
   82420:	188b883a 	add	r5,r3,r2
   82424:	e0fff317 	ldw	r3,-52(fp)
   82428:	e0bff417 	ldw	r2,-48(fp)
   8242c:	e23ffa17 	ldw	r8,-24(fp)
   82430:	e1fffb17 	ldw	r7,-20(fp)
   82434:	e1800417 	ldw	r6,16(fp)
   82438:	31803fcc 	andi	r6,r6,255
   8243c:	3180201c 	xori	r6,r6,128
   82440:	31bfe004 	addi	r6,r6,-128
   82444:	da000015 	stw	r8,0(sp)
   82448:	d9c00115 	stw	r7,4(sp)
   8244c:	e1c00317 	ldw	r7,12(fp)
   82450:	d9c00215 	stw	r7,8(sp)
   82454:	d9800315 	stw	r6,12(sp)
   82458:	e1800517 	ldw	r6,20(fp)
   8245c:	d9800415 	stw	r6,16(sp)
   82460:	180d883a 	mov	r6,r3
   82464:	100f883a 	mov	r7,r2
   82468:	00825e80 	call	825e8 <vid_round_corner_points>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
   8246c:	e0fff317 	ldw	r3,-52(fp)
   82470:	e0bff417 	ldw	r2,-48(fp)
   82474:	18bfcc36 	bltu	r3,r2,823a8 <vid_draw_round_corner_box+0x178>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
   82478:	e0800417 	ldw	r2,16(fp)
   8247c:	10001026 	beq	r2,zero,824c0 <vid_draw_round_corner_box+0x290>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
   82480:	e0fffd17 	ldw	r3,-12(fp)
   82484:	e0800217 	ldw	r2,8(fp)
   82488:	1887883a 	add	r3,r3,r2
   8248c:	e13fff17 	ldw	r4,-4(fp)
   82490:	e0800217 	ldw	r2,8(fp)
   82494:	2085c83a 	sub	r2,r4,r2
   82498:	e1000317 	ldw	r4,12(fp)
   8249c:	d9000015 	stw	r4,0(sp)
   824a0:	e1000517 	ldw	r4,20(fp)
   824a4:	d9000115 	stw	r4,4(sp)
   824a8:	e13ffc17 	ldw	r4,-16(fp)
   824ac:	180b883a 	mov	r5,r3
   824b0:	e1bffe17 	ldw	r6,-8(fp)
   824b4:	100f883a 	mov	r7,r2
   824b8:	0081bec0 	call	81bec <vid_paint_block>
   824bc:	00004406 	br	825d0 <vid_draw_round_corner_box+0x3a0>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
   824c0:	e0fffd17 	ldw	r3,-12(fp)
   824c4:	e0800217 	ldw	r2,8(fp)
   824c8:	1887883a 	add	r3,r3,r2
   824cc:	e13fff17 	ldw	r4,-4(fp)
   824d0:	e0800217 	ldw	r2,8(fp)
   824d4:	2085c83a 	sub	r2,r4,r2
   824d8:	01000044 	movi	r4,1
   824dc:	d9000015 	stw	r4,0(sp)
   824e0:	e1000317 	ldw	r4,12(fp)
   824e4:	d9000115 	stw	r4,4(sp)
   824e8:	e1000517 	ldw	r4,20(fp)
   824ec:	d9000215 	stw	r4,8(sp)
   824f0:	e13ffc17 	ldw	r4,-16(fp)
   824f4:	180b883a 	mov	r5,r3
   824f8:	e1bffc17 	ldw	r6,-16(fp)
   824fc:	100f883a 	mov	r7,r2
   82500:	00810d00 	call	810d0 <vid_draw_line>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
   82504:	e0fffd17 	ldw	r3,-12(fp)
   82508:	e0800217 	ldw	r2,8(fp)
   8250c:	1887883a 	add	r3,r3,r2
   82510:	e13fff17 	ldw	r4,-4(fp)
   82514:	e0800217 	ldw	r2,8(fp)
   82518:	2085c83a 	sub	r2,r4,r2
   8251c:	01000044 	movi	r4,1
   82520:	d9000015 	stw	r4,0(sp)
   82524:	e1000317 	ldw	r4,12(fp)
   82528:	d9000115 	stw	r4,4(sp)
   8252c:	e1000517 	ldw	r4,20(fp)
   82530:	d9000215 	stw	r4,8(sp)
   82534:	e13ffe17 	ldw	r4,-8(fp)
   82538:	180b883a 	mov	r5,r3
   8253c:	e1bffe17 	ldw	r6,-8(fp)
   82540:	100f883a 	mov	r7,r2
   82544:	00810d00 	call	810d0 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
   82548:	e0fffc17 	ldw	r3,-16(fp)
   8254c:	e0800217 	ldw	r2,8(fp)
   82550:	1887883a 	add	r3,r3,r2
   82554:	e13ffe17 	ldw	r4,-8(fp)
   82558:	e0800217 	ldw	r2,8(fp)
   8255c:	2085c83a 	sub	r2,r4,r2
   82560:	01000044 	movi	r4,1
   82564:	d9000015 	stw	r4,0(sp)
   82568:	e1000317 	ldw	r4,12(fp)
   8256c:	d9000115 	stw	r4,4(sp)
   82570:	e1000517 	ldw	r4,20(fp)
   82574:	d9000215 	stw	r4,8(sp)
   82578:	1809883a 	mov	r4,r3
   8257c:	e17ffd17 	ldw	r5,-12(fp)
   82580:	100d883a 	mov	r6,r2
   82584:	e1fffd17 	ldw	r7,-12(fp)
   82588:	00810d00 	call	810d0 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
   8258c:	e0fffc17 	ldw	r3,-16(fp)
   82590:	e0800217 	ldw	r2,8(fp)
   82594:	1887883a 	add	r3,r3,r2
   82598:	e13ffe17 	ldw	r4,-8(fp)
   8259c:	e0800217 	ldw	r2,8(fp)
   825a0:	2085c83a 	sub	r2,r4,r2
   825a4:	01000044 	movi	r4,1
   825a8:	d9000015 	stw	r4,0(sp)
   825ac:	e1000317 	ldw	r4,12(fp)
   825b0:	d9000115 	stw	r4,4(sp)
   825b4:	e1000517 	ldw	r4,20(fp)
   825b8:	d9000215 	stw	r4,8(sp)
   825bc:	1809883a 	mov	r4,r3
   825c0:	e17fff17 	ldw	r5,-4(fp)
   825c4:	100d883a 	mov	r6,r2
   825c8:	e1ffff17 	ldw	r7,-4(fp)
   825cc:	00810d00 	call	810d0 <vid_draw_line>
  }

  return (0);
   825d0:	0005883a 	mov	r2,zero
}
   825d4:	e037883a 	mov	sp,fp
   825d8:	dfc00117 	ldw	ra,4(sp)
   825dc:	df000017 	ldw	fp,0(sp)
   825e0:	dec00204 	addi	sp,sp,8
   825e4:	f800283a 	ret

000825e8 <vid_round_corner_points>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
   825e8:	defff604 	addi	sp,sp,-40
   825ec:	dfc00915 	stw	ra,36(sp)
   825f0:	df000815 	stw	fp,32(sp)
   825f4:	df000804 	addi	fp,sp,32
   825f8:	e13ffb15 	stw	r4,-20(fp)
   825fc:	e17ffc15 	stw	r5,-16(fp)
   82600:	e1bffd15 	stw	r6,-12(fp)
   82604:	e1fffe15 	stw	r7,-8(fp)
   82608:	e0800517 	ldw	r2,20(fp)
   8260c:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
   82610:	e0bffd17 	ldw	r2,-12(fp)
   82614:	1000861e 	bne	r2,zero,82830 <vid_round_corner_points+0x248>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
   82618:	e0fffc17 	ldw	r3,-16(fp)
   8261c:	e0bffe17 	ldw	r2,-8(fp)
   82620:	1887883a 	add	r3,r3,r2
   82624:	e0800317 	ldw	r2,12(fp)
   82628:	1887883a 	add	r3,r3,r2
   8262c:	e0800417 	ldw	r2,16(fp)
   82630:	e13ffb17 	ldw	r4,-20(fp)
   82634:	180b883a 	mov	r5,r3
   82638:	100d883a 	mov	r6,r2
   8263c:	e1c00617 	ldw	r7,24(fp)
   82640:	0081b140 	call	81b14 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
   82644:	e0fffb17 	ldw	r3,-20(fp)
   82648:	e0800217 	ldw	r2,8(fp)
   8264c:	1889883a 	add	r4,r3,r2
   82650:	e0fffc17 	ldw	r3,-16(fp)
   82654:	e0bffe17 	ldw	r2,-8(fp)
   82658:	1887883a 	add	r3,r3,r2
   8265c:	e0800317 	ldw	r2,12(fp)
   82660:	1887883a 	add	r3,r3,r2
   82664:	e0800417 	ldw	r2,16(fp)
   82668:	180b883a 	mov	r5,r3
   8266c:	100d883a 	mov	r6,r2
   82670:	e1c00617 	ldw	r7,24(fp)
   82674:	0081b140 	call	81b14 <vid_set_pixel>
        // top
        vid_set_pixel(cx, cy - y, color, display);
   82678:	e0fffc17 	ldw	r3,-16(fp)
   8267c:	e0bffe17 	ldw	r2,-8(fp)
   82680:	1887c83a 	sub	r3,r3,r2
   82684:	e0800417 	ldw	r2,16(fp)
   82688:	e13ffb17 	ldw	r4,-20(fp)
   8268c:	180b883a 	mov	r5,r3
   82690:	100d883a 	mov	r6,r2
   82694:	e1c00617 	ldw	r7,24(fp)
   82698:	0081b140 	call	81b14 <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
   8269c:	e0fffb17 	ldw	r3,-20(fp)
   826a0:	e0800217 	ldw	r2,8(fp)
   826a4:	1889883a 	add	r4,r3,r2
   826a8:	e0fffc17 	ldw	r3,-16(fp)
   826ac:	e0bffe17 	ldw	r2,-8(fp)
   826b0:	1887c83a 	sub	r3,r3,r2
   826b4:	e0800417 	ldw	r2,16(fp)
   826b8:	180b883a 	mov	r5,r3
   826bc:	100d883a 	mov	r6,r2
   826c0:	e1c00617 	ldw	r7,24(fp)
   826c4:	0081b140 	call	81b14 <vid_set_pixel>

        if(fill) {
   826c8:	e0bfff07 	ldb	r2,-4(fp)
   826cc:	10002b26 	beq	r2,zero,8277c <vid_round_corner_points+0x194>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
   826d0:	e0fffb17 	ldw	r3,-20(fp)
   826d4:	e0bffe17 	ldw	r2,-8(fp)
   826d8:	1887c83a 	sub	r3,r3,r2
   826dc:	e13ffb17 	ldw	r4,-20(fp)
   826e0:	e0bffe17 	ldw	r2,-8(fp)
   826e4:	2089883a 	add	r4,r4,r2
   826e8:	e0800217 	ldw	r2,8(fp)
   826ec:	2085883a 	add	r2,r4,r2
   826f0:	01000044 	movi	r4,1
   826f4:	d9000015 	stw	r4,0(sp)
   826f8:	e1000417 	ldw	r4,16(fp)
   826fc:	d9000115 	stw	r4,4(sp)
   82700:	e1000617 	ldw	r4,24(fp)
   82704:	d9000215 	stw	r4,8(sp)
   82708:	1809883a 	mov	r4,r3
   8270c:	e17ffc17 	ldw	r5,-16(fp)
   82710:	100d883a 	mov	r6,r2
   82714:	e1fffc17 	ldw	r7,-16(fp)
   82718:	00810d00 	call	810d0 <vid_draw_line>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
   8271c:	e0fffb17 	ldw	r3,-20(fp)
   82720:	e0bffe17 	ldw	r2,-8(fp)
   82724:	1889c83a 	sub	r4,r3,r2
   82728:	e0fffc17 	ldw	r3,-16(fp)
   8272c:	e0800317 	ldw	r2,12(fp)
   82730:	188b883a 	add	r5,r3,r2
   82734:	e0fffb17 	ldw	r3,-20(fp)
   82738:	e0bffe17 	ldw	r2,-8(fp)
   8273c:	1887883a 	add	r3,r3,r2
   82740:	e0800217 	ldw	r2,8(fp)
   82744:	1887883a 	add	r3,r3,r2
   82748:	e1bffc17 	ldw	r6,-16(fp)
   8274c:	e0800317 	ldw	r2,12(fp)
   82750:	3085883a 	add	r2,r6,r2
   82754:	01800044 	movi	r6,1
   82758:	d9800015 	stw	r6,0(sp)
   8275c:	e1800417 	ldw	r6,16(fp)
   82760:	d9800115 	stw	r6,4(sp)
   82764:	e1800617 	ldw	r6,24(fp)
   82768:	d9800215 	stw	r6,8(sp)
   8276c:	180d883a 	mov	r6,r3
   82770:	100f883a 	mov	r7,r2
   82774:	00810d00 	call	810d0 <vid_draw_line>
   82778:	00016c06 	br	82d2c <vid_round_corner_points+0x744>
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
   8277c:	e0fffb17 	ldw	r3,-20(fp)
   82780:	e0bffe17 	ldw	r2,-8(fp)
   82784:	1887883a 	add	r3,r3,r2
   82788:	e0800217 	ldw	r2,8(fp)
   8278c:	1887883a 	add	r3,r3,r2
   82790:	e0800417 	ldw	r2,16(fp)
   82794:	1809883a 	mov	r4,r3
   82798:	e17ffc17 	ldw	r5,-16(fp)
   8279c:	100d883a 	mov	r6,r2
   827a0:	e1c00617 	ldw	r7,24(fp)
   827a4:	0081b140 	call	81b14 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
   827a8:	e0fffb17 	ldw	r3,-20(fp)
   827ac:	e0bffe17 	ldw	r2,-8(fp)
   827b0:	1887883a 	add	r3,r3,r2
   827b4:	e0800217 	ldw	r2,8(fp)
   827b8:	1889883a 	add	r4,r3,r2
   827bc:	e0fffc17 	ldw	r3,-16(fp)
   827c0:	e0800317 	ldw	r2,12(fp)
   827c4:	1887883a 	add	r3,r3,r2
   827c8:	e0800417 	ldw	r2,16(fp)
   827cc:	180b883a 	mov	r5,r3
   827d0:	100d883a 	mov	r6,r2
   827d4:	e1c00617 	ldw	r7,24(fp)
   827d8:	0081b140 	call	81b14 <vid_set_pixel>
          //left
          vid_set_pixel(cx - y, cy, color, display);
   827dc:	e0fffb17 	ldw	r3,-20(fp)
   827e0:	e0bffe17 	ldw	r2,-8(fp)
   827e4:	1887c83a 	sub	r3,r3,r2
   827e8:	e0800417 	ldw	r2,16(fp)
   827ec:	1809883a 	mov	r4,r3
   827f0:	e17ffc17 	ldw	r5,-16(fp)
   827f4:	100d883a 	mov	r6,r2
   827f8:	e1c00617 	ldw	r7,24(fp)
   827fc:	0081b140 	call	81b14 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
   82800:	e0fffb17 	ldw	r3,-20(fp)
   82804:	e0bffe17 	ldw	r2,-8(fp)
   82808:	1889c83a 	sub	r4,r3,r2
   8280c:	e0fffc17 	ldw	r3,-16(fp)
   82810:	e0800317 	ldw	r2,12(fp)
   82814:	1887883a 	add	r3,r3,r2
   82818:	e0800417 	ldw	r2,16(fp)
   8281c:	180b883a 	mov	r5,r3
   82820:	100d883a 	mov	r6,r2
   82824:	e1c00617 	ldw	r7,24(fp)
   82828:	0081b140 	call	81b14 <vid_set_pixel>
   8282c:	00013f06 	br	82d2c <vid_round_corner_points+0x744>
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
   82830:	e0fffd17 	ldw	r3,-12(fp)
   82834:	e0bffe17 	ldw	r2,-8(fp)
   82838:	18806a1e 	bne	r3,r2,829e4 <vid_round_corner_points+0x3fc>
      if(fill) {
   8283c:	e0bfff07 	ldb	r2,-4(fp)
   82840:	10003326 	beq	r2,zero,82910 <vid_round_corner_points+0x328>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
   82844:	e0fffb17 	ldw	r3,-20(fp)
   82848:	e0bffd17 	ldw	r2,-12(fp)
   8284c:	1889c83a 	sub	r4,r3,r2
   82850:	e0fffc17 	ldw	r3,-16(fp)
   82854:	e0bffe17 	ldw	r2,-8(fp)
   82858:	1887883a 	add	r3,r3,r2
   8285c:	e0800317 	ldw	r2,12(fp)
   82860:	188b883a 	add	r5,r3,r2
   82864:	e0fffb17 	ldw	r3,-20(fp)
   82868:	e0bffd17 	ldw	r2,-12(fp)
   8286c:	1887883a 	add	r3,r3,r2
   82870:	e0800217 	ldw	r2,8(fp)
   82874:	1887883a 	add	r3,r3,r2
   82878:	e1bffc17 	ldw	r6,-16(fp)
   8287c:	e0bffe17 	ldw	r2,-8(fp)
   82880:	308d883a 	add	r6,r6,r2
   82884:	e0800317 	ldw	r2,12(fp)
   82888:	3085883a 	add	r2,r6,r2
   8288c:	01800044 	movi	r6,1
   82890:	d9800015 	stw	r6,0(sp)
   82894:	e1800417 	ldw	r6,16(fp)
   82898:	d9800115 	stw	r6,4(sp)
   8289c:	e1800617 	ldw	r6,24(fp)
   828a0:	d9800215 	stw	r6,8(sp)
   828a4:	180d883a 	mov	r6,r3
   828a8:	100f883a 	mov	r7,r2
   828ac:	00810d00 	call	810d0 <vid_draw_line>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
   828b0:	e0fffb17 	ldw	r3,-20(fp)
   828b4:	e0bffd17 	ldw	r2,-12(fp)
   828b8:	1889c83a 	sub	r4,r3,r2
   828bc:	e0fffc17 	ldw	r3,-16(fp)
   828c0:	e0bffe17 	ldw	r2,-8(fp)
   828c4:	188bc83a 	sub	r5,r3,r2
   828c8:	e0fffb17 	ldw	r3,-20(fp)
   828cc:	e0bffd17 	ldw	r2,-12(fp)
   828d0:	1887883a 	add	r3,r3,r2
   828d4:	e0800217 	ldw	r2,8(fp)
   828d8:	1887883a 	add	r3,r3,r2
   828dc:	e1bffc17 	ldw	r6,-16(fp)
   828e0:	e0bffe17 	ldw	r2,-8(fp)
   828e4:	3085c83a 	sub	r2,r6,r2
   828e8:	01800044 	movi	r6,1
   828ec:	d9800015 	stw	r6,0(sp)
   828f0:	e1800417 	ldw	r6,16(fp)
   828f4:	d9800115 	stw	r6,4(sp)
   828f8:	e1800617 	ldw	r6,24(fp)
   828fc:	d9800215 	stw	r6,8(sp)
   82900:	180d883a 	mov	r6,r3
   82904:	100f883a 	mov	r7,r2
   82908:	00810d00 	call	810d0 <vid_draw_line>
   8290c:	00010706 	br	82d2c <vid_round_corner_points+0x744>
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
   82910:	e0fffb17 	ldw	r3,-20(fp)
   82914:	e0bffd17 	ldw	r2,-12(fp)
   82918:	1887883a 	add	r3,r3,r2
   8291c:	e0800217 	ldw	r2,8(fp)
   82920:	1889883a 	add	r4,r3,r2
   82924:	e0fffc17 	ldw	r3,-16(fp)
   82928:	e0bffe17 	ldw	r2,-8(fp)
   8292c:	1887883a 	add	r3,r3,r2
   82930:	e0800317 	ldw	r2,12(fp)
   82934:	1887883a 	add	r3,r3,r2
   82938:	e0800417 	ldw	r2,16(fp)
   8293c:	180b883a 	mov	r5,r3
   82940:	100d883a 	mov	r6,r2
   82944:	e1c00617 	ldw	r7,24(fp)
   82948:	0081b140 	call	81b14 <vid_set_pixel>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
   8294c:	e0fffb17 	ldw	r3,-20(fp)
   82950:	e0bffd17 	ldw	r2,-12(fp)
   82954:	1889c83a 	sub	r4,r3,r2
   82958:	e0fffc17 	ldw	r3,-16(fp)
   8295c:	e0bffe17 	ldw	r2,-8(fp)
   82960:	1887883a 	add	r3,r3,r2
   82964:	e0800317 	ldw	r2,12(fp)
   82968:	1887883a 	add	r3,r3,r2
   8296c:	e0800417 	ldw	r2,16(fp)
   82970:	180b883a 	mov	r5,r3
   82974:	100d883a 	mov	r6,r2
   82978:	e1c00617 	ldw	r7,24(fp)
   8297c:	0081b140 	call	81b14 <vid_set_pixel>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
   82980:	e0fffb17 	ldw	r3,-20(fp)
   82984:	e0bffd17 	ldw	r2,-12(fp)
   82988:	1887883a 	add	r3,r3,r2
   8298c:	e0800217 	ldw	r2,8(fp)
   82990:	1889883a 	add	r4,r3,r2
   82994:	e0fffc17 	ldw	r3,-16(fp)
   82998:	e0bffe17 	ldw	r2,-8(fp)
   8299c:	1887c83a 	sub	r3,r3,r2
   829a0:	e0800417 	ldw	r2,16(fp)
   829a4:	180b883a 	mov	r5,r3
   829a8:	100d883a 	mov	r6,r2
   829ac:	e1c00617 	ldw	r7,24(fp)
   829b0:	0081b140 	call	81b14 <vid_set_pixel>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
   829b4:	e0fffb17 	ldw	r3,-20(fp)
   829b8:	e0bffd17 	ldw	r2,-12(fp)
   829bc:	1889c83a 	sub	r4,r3,r2
   829c0:	e0fffc17 	ldw	r3,-16(fp)
   829c4:	e0bffe17 	ldw	r2,-8(fp)
   829c8:	1887c83a 	sub	r3,r3,r2
   829cc:	e0800417 	ldw	r2,16(fp)
   829d0:	180b883a 	mov	r5,r3
   829d4:	100d883a 	mov	r6,r2
   829d8:	e1c00617 	ldw	r7,24(fp)
   829dc:	0081b140 	call	81b14 <vid_set_pixel>
   829e0:	0000d206 	br	82d2c <vid_round_corner_points+0x744>
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
   829e4:	e0fffd17 	ldw	r3,-12(fp)
   829e8:	e0bffe17 	ldw	r2,-8(fp)
   829ec:	1880cf0e 	bge	r3,r2,82d2c <vid_round_corner_points+0x744>
        if(fill) {
   829f0:	e0bfff07 	ldb	r2,-4(fp)
   829f4:	10006526 	beq	r2,zero,82b8c <vid_round_corner_points+0x5a4>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
   829f8:	e0fffb17 	ldw	r3,-20(fp)
   829fc:	e0bffd17 	ldw	r2,-12(fp)
   82a00:	1889c83a 	sub	r4,r3,r2
   82a04:	e0fffc17 	ldw	r3,-16(fp)
   82a08:	e0bffe17 	ldw	r2,-8(fp)
   82a0c:	1887883a 	add	r3,r3,r2
   82a10:	e0800317 	ldw	r2,12(fp)
   82a14:	188b883a 	add	r5,r3,r2
   82a18:	e0fffb17 	ldw	r3,-20(fp)
   82a1c:	e0bffd17 	ldw	r2,-12(fp)
   82a20:	1887883a 	add	r3,r3,r2
   82a24:	e0800217 	ldw	r2,8(fp)
   82a28:	1887883a 	add	r3,r3,r2
   82a2c:	e1bffc17 	ldw	r6,-16(fp)
   82a30:	e0bffe17 	ldw	r2,-8(fp)
   82a34:	308d883a 	add	r6,r6,r2
   82a38:	e0800317 	ldw	r2,12(fp)
   82a3c:	3085883a 	add	r2,r6,r2
   82a40:	01800044 	movi	r6,1
   82a44:	d9800015 	stw	r6,0(sp)
   82a48:	e1800417 	ldw	r6,16(fp)
   82a4c:	d9800115 	stw	r6,4(sp)
   82a50:	e1800617 	ldw	r6,24(fp)
   82a54:	d9800215 	stw	r6,8(sp)
   82a58:	180d883a 	mov	r6,r3
   82a5c:	100f883a 	mov	r7,r2
   82a60:	00810d00 	call	810d0 <vid_draw_line>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
   82a64:	e0fffb17 	ldw	r3,-20(fp)
   82a68:	e0bffe17 	ldw	r2,-8(fp)
   82a6c:	1889c83a 	sub	r4,r3,r2
   82a70:	e0fffc17 	ldw	r3,-16(fp)
   82a74:	e0bffd17 	ldw	r2,-12(fp)
   82a78:	1887883a 	add	r3,r3,r2
   82a7c:	e0800317 	ldw	r2,12(fp)
   82a80:	188b883a 	add	r5,r3,r2
   82a84:	e0fffb17 	ldw	r3,-20(fp)
   82a88:	e0bffe17 	ldw	r2,-8(fp)
   82a8c:	1887883a 	add	r3,r3,r2
   82a90:	e0800217 	ldw	r2,8(fp)
   82a94:	1887883a 	add	r3,r3,r2
   82a98:	e1bffc17 	ldw	r6,-16(fp)
   82a9c:	e0bffd17 	ldw	r2,-12(fp)
   82aa0:	308d883a 	add	r6,r6,r2
   82aa4:	e0800317 	ldw	r2,12(fp)
   82aa8:	3085883a 	add	r2,r6,r2
   82aac:	01800044 	movi	r6,1
   82ab0:	d9800015 	stw	r6,0(sp)
   82ab4:	e1800417 	ldw	r6,16(fp)
   82ab8:	d9800115 	stw	r6,4(sp)
   82abc:	e1800617 	ldw	r6,24(fp)
   82ac0:	d9800215 	stw	r6,8(sp)
   82ac4:	180d883a 	mov	r6,r3
   82ac8:	100f883a 	mov	r7,r2
   82acc:	00810d00 	call	810d0 <vid_draw_line>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
   82ad0:	e0fffb17 	ldw	r3,-20(fp)
   82ad4:	e0bffe17 	ldw	r2,-8(fp)
   82ad8:	1889c83a 	sub	r4,r3,r2
   82adc:	e0fffc17 	ldw	r3,-16(fp)
   82ae0:	e0bffd17 	ldw	r2,-12(fp)
   82ae4:	188bc83a 	sub	r5,r3,r2
   82ae8:	e0fffb17 	ldw	r3,-20(fp)
   82aec:	e0bffe17 	ldw	r2,-8(fp)
   82af0:	1887883a 	add	r3,r3,r2
   82af4:	e0800217 	ldw	r2,8(fp)
   82af8:	1887883a 	add	r3,r3,r2
   82afc:	e1bffc17 	ldw	r6,-16(fp)
   82b00:	e0bffd17 	ldw	r2,-12(fp)
   82b04:	3085c83a 	sub	r2,r6,r2
   82b08:	01800044 	movi	r6,1
   82b0c:	d9800015 	stw	r6,0(sp)
   82b10:	e1800417 	ldw	r6,16(fp)
   82b14:	d9800115 	stw	r6,4(sp)
   82b18:	e1800617 	ldw	r6,24(fp)
   82b1c:	d9800215 	stw	r6,8(sp)
   82b20:	180d883a 	mov	r6,r3
   82b24:	100f883a 	mov	r7,r2
   82b28:	00810d00 	call	810d0 <vid_draw_line>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
   82b2c:	e0fffb17 	ldw	r3,-20(fp)
   82b30:	e0bffd17 	ldw	r2,-12(fp)
   82b34:	1889c83a 	sub	r4,r3,r2
   82b38:	e0fffc17 	ldw	r3,-16(fp)
   82b3c:	e0bffe17 	ldw	r2,-8(fp)
   82b40:	188bc83a 	sub	r5,r3,r2
   82b44:	e0fffb17 	ldw	r3,-20(fp)
   82b48:	e0bffd17 	ldw	r2,-12(fp)
   82b4c:	1887883a 	add	r3,r3,r2
   82b50:	e0800217 	ldw	r2,8(fp)
   82b54:	1887883a 	add	r3,r3,r2
   82b58:	e1bffc17 	ldw	r6,-16(fp)
   82b5c:	e0bffe17 	ldw	r2,-8(fp)
   82b60:	3085c83a 	sub	r2,r6,r2
   82b64:	01800044 	movi	r6,1
   82b68:	d9800015 	stw	r6,0(sp)
   82b6c:	e1800417 	ldw	r6,16(fp)
   82b70:	d9800115 	stw	r6,4(sp)
   82b74:	e1800617 	ldw	r6,24(fp)
   82b78:	d9800215 	stw	r6,8(sp)
   82b7c:	180d883a 	mov	r6,r3
   82b80:	100f883a 	mov	r7,r2
   82b84:	00810d00 	call	810d0 <vid_draw_line>
   82b88:	00006806 	br	82d2c <vid_round_corner_points+0x744>
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
   82b8c:	e0fffb17 	ldw	r3,-20(fp)
   82b90:	e0bffd17 	ldw	r2,-12(fp)
   82b94:	1887883a 	add	r3,r3,r2
   82b98:	e0800217 	ldw	r2,8(fp)
   82b9c:	1889883a 	add	r4,r3,r2
   82ba0:	e0fffc17 	ldw	r3,-16(fp)
   82ba4:	e0bffe17 	ldw	r2,-8(fp)
   82ba8:	1887883a 	add	r3,r3,r2
   82bac:	e0800317 	ldw	r2,12(fp)
   82bb0:	1887883a 	add	r3,r3,r2
   82bb4:	e0800417 	ldw	r2,16(fp)
   82bb8:	180b883a 	mov	r5,r3
   82bbc:	100d883a 	mov	r6,r2
   82bc0:	e1c00617 	ldw	r7,24(fp)
   82bc4:	0081b140 	call	81b14 <vid_set_pixel>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
   82bc8:	e0fffb17 	ldw	r3,-20(fp)
   82bcc:	e0bffd17 	ldw	r2,-12(fp)
   82bd0:	1889c83a 	sub	r4,r3,r2
   82bd4:	e0fffc17 	ldw	r3,-16(fp)
   82bd8:	e0bffe17 	ldw	r2,-8(fp)
   82bdc:	1887883a 	add	r3,r3,r2
   82be0:	e0800317 	ldw	r2,12(fp)
   82be4:	1887883a 	add	r3,r3,r2
   82be8:	e0800417 	ldw	r2,16(fp)
   82bec:	180b883a 	mov	r5,r3
   82bf0:	100d883a 	mov	r6,r2
   82bf4:	e1c00617 	ldw	r7,24(fp)
   82bf8:	0081b140 	call	81b14 <vid_set_pixel>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
   82bfc:	e0fffb17 	ldw	r3,-20(fp)
   82c00:	e0bffd17 	ldw	r2,-12(fp)
   82c04:	1887883a 	add	r3,r3,r2
   82c08:	e0800217 	ldw	r2,8(fp)
   82c0c:	1889883a 	add	r4,r3,r2
   82c10:	e0fffc17 	ldw	r3,-16(fp)
   82c14:	e0bffe17 	ldw	r2,-8(fp)
   82c18:	1887c83a 	sub	r3,r3,r2
   82c1c:	e0800417 	ldw	r2,16(fp)
   82c20:	180b883a 	mov	r5,r3
   82c24:	100d883a 	mov	r6,r2
   82c28:	e1c00617 	ldw	r7,24(fp)
   82c2c:	0081b140 	call	81b14 <vid_set_pixel>
          vid_set_pixel(cx - x, cy - y, color, display);
   82c30:	e0fffb17 	ldw	r3,-20(fp)
   82c34:	e0bffd17 	ldw	r2,-12(fp)
   82c38:	1889c83a 	sub	r4,r3,r2
   82c3c:	e0fffc17 	ldw	r3,-16(fp)
   82c40:	e0bffe17 	ldw	r2,-8(fp)
   82c44:	1887c83a 	sub	r3,r3,r2
   82c48:	e0800417 	ldw	r2,16(fp)
   82c4c:	180b883a 	mov	r5,r3
   82c50:	100d883a 	mov	r6,r2
   82c54:	e1c00617 	ldw	r7,24(fp)
   82c58:	0081b140 	call	81b14 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
   82c5c:	e0fffb17 	ldw	r3,-20(fp)
   82c60:	e0bffe17 	ldw	r2,-8(fp)
   82c64:	1887883a 	add	r3,r3,r2
   82c68:	e0800217 	ldw	r2,8(fp)
   82c6c:	1889883a 	add	r4,r3,r2
   82c70:	e0fffc17 	ldw	r3,-16(fp)
   82c74:	e0bffd17 	ldw	r2,-12(fp)
   82c78:	1887883a 	add	r3,r3,r2
   82c7c:	e0800317 	ldw	r2,12(fp)
   82c80:	1887883a 	add	r3,r3,r2
   82c84:	e0800417 	ldw	r2,16(fp)
   82c88:	180b883a 	mov	r5,r3
   82c8c:	100d883a 	mov	r6,r2
   82c90:	e1c00617 	ldw	r7,24(fp)
   82c94:	0081b140 	call	81b14 <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
   82c98:	e0fffb17 	ldw	r3,-20(fp)
   82c9c:	e0bffe17 	ldw	r2,-8(fp)
   82ca0:	1889c83a 	sub	r4,r3,r2
   82ca4:	e0fffc17 	ldw	r3,-16(fp)
   82ca8:	e0bffd17 	ldw	r2,-12(fp)
   82cac:	1887883a 	add	r3,r3,r2
   82cb0:	e0800317 	ldw	r2,12(fp)
   82cb4:	1887883a 	add	r3,r3,r2
   82cb8:	e0800417 	ldw	r2,16(fp)
   82cbc:	180b883a 	mov	r5,r3
   82cc0:	100d883a 	mov	r6,r2
   82cc4:	e1c00617 	ldw	r7,24(fp)
   82cc8:	0081b140 	call	81b14 <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
   82ccc:	e0fffb17 	ldw	r3,-20(fp)
   82cd0:	e0bffe17 	ldw	r2,-8(fp)
   82cd4:	1887883a 	add	r3,r3,r2
   82cd8:	e0800217 	ldw	r2,8(fp)
   82cdc:	1889883a 	add	r4,r3,r2
   82ce0:	e0fffc17 	ldw	r3,-16(fp)
   82ce4:	e0bffd17 	ldw	r2,-12(fp)
   82ce8:	1887c83a 	sub	r3,r3,r2
   82cec:	e0800417 	ldw	r2,16(fp)
   82cf0:	180b883a 	mov	r5,r3
   82cf4:	100d883a 	mov	r6,r2
   82cf8:	e1c00617 	ldw	r7,24(fp)
   82cfc:	0081b140 	call	81b14 <vid_set_pixel>
          vid_set_pixel(cx - y, cy - x, color, display);
   82d00:	e0fffb17 	ldw	r3,-20(fp)
   82d04:	e0bffe17 	ldw	r2,-8(fp)
   82d08:	1889c83a 	sub	r4,r3,r2
   82d0c:	e0fffc17 	ldw	r3,-16(fp)
   82d10:	e0bffd17 	ldw	r2,-12(fp)
   82d14:	1887c83a 	sub	r3,r3,r2
   82d18:	e0800417 	ldw	r2,16(fp)
   82d1c:	180b883a 	mov	r5,r3
   82d20:	100d883a 	mov	r6,r2
   82d24:	e1c00617 	ldw	r7,24(fp)
   82d28:	0081b140 	call	81b14 <vid_set_pixel>
        }
    }
}
   82d2c:	e037883a 	mov	sp,fp
   82d30:	dfc00117 	ldw	ra,4(sp)
   82d34:	df000017 	ldw	fp,0(sp)
   82d38:	dec00204 	addi	sp,sp,8
   82d3c:	f800283a 	ret

00082d40 <max3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
__inline__ int max3( int a, int b, int c )
{
   82d40:	defffc04 	addi	sp,sp,-16
   82d44:	df000315 	stw	fp,12(sp)
   82d48:	df000304 	addi	fp,sp,12
   82d4c:	e13ffd15 	stw	r4,-12(fp)
   82d50:	e17ffe15 	stw	r5,-8(fp)
   82d54:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
   82d58:	e0fffd17 	ldw	r3,-12(fp)
   82d5c:	e0bffe17 	ldw	r2,-8(fp)
   82d60:	1880020e 	bge	r3,r2,82d6c <max3+0x2c>
    a = b;
   82d64:	e0bffe17 	ldw	r2,-8(fp)
   82d68:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
   82d6c:	e0fffd17 	ldw	r3,-12(fp)
   82d70:	e0bfff17 	ldw	r2,-4(fp)
   82d74:	1880020e 	bge	r3,r2,82d80 <max3+0x40>
    a = c;
   82d78:	e0bfff17 	ldw	r2,-4(fp)
   82d7c:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
   82d80:	e0bffd17 	ldw	r2,-12(fp)
}
   82d84:	e037883a 	mov	sp,fp
   82d88:	df000017 	ldw	fp,0(sp)
   82d8c:	dec00104 	addi	sp,sp,4
   82d90:	f800283a 	ret

00082d94 <min3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
__inline__ int min3( int a, int b, int c )
{
   82d94:	defffc04 	addi	sp,sp,-16
   82d98:	df000315 	stw	fp,12(sp)
   82d9c:	df000304 	addi	fp,sp,12
   82da0:	e13ffd15 	stw	r4,-12(fp)
   82da4:	e17ffe15 	stw	r5,-8(fp)
   82da8:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
   82dac:	e0bffd17 	ldw	r2,-12(fp)
   82db0:	e0fffe17 	ldw	r3,-8(fp)
   82db4:	1880020e 	bge	r3,r2,82dc0 <min3+0x2c>
    a = b;
   82db8:	e0bffe17 	ldw	r2,-8(fp)
   82dbc:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
   82dc0:	e0bffd17 	ldw	r2,-12(fp)
   82dc4:	e0ffff17 	ldw	r3,-4(fp)
   82dc8:	1880020e 	bge	r3,r2,82dd4 <min3+0x40>
    a = c;
   82dcc:	e0bfff17 	ldw	r2,-4(fp)
   82dd0:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
   82dd4:	e0bffd17 	ldw	r2,-12(fp)
}
   82dd8:	e037883a 	mov	sp,fp
   82ddc:	df000017 	ldw	fp,0(sp)
   82de0:	dec00104 	addi	sp,sp,4
   82de4:	f800283a 	ret

00082de8 <max_diff3>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
__inline__ int max_diff3(int a, int b, int c)
{
   82de8:	defff904 	addi	sp,sp,-28
   82dec:	dfc00615 	stw	ra,24(sp)
   82df0:	df000515 	stw	fp,20(sp)
   82df4:	df000504 	addi	fp,sp,20
   82df8:	e13ffd15 	stw	r4,-12(fp)
   82dfc:	e17ffe15 	stw	r5,-8(fp)
   82e00:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
   82e04:	e13ffd17 	ldw	r4,-12(fp)
   82e08:	e17ffe17 	ldw	r5,-8(fp)
   82e0c:	e1bfff17 	ldw	r6,-4(fp)
   82e10:	0082d400 	call	82d40 <max3>
   82e14:	e0bffb15 	stw	r2,-20(fp)
  min = min3( a, b, c );
   82e18:	e13ffd17 	ldw	r4,-12(fp)
   82e1c:	e17ffe17 	ldw	r5,-8(fp)
   82e20:	e1bfff17 	ldw	r6,-4(fp)
   82e24:	0082d940 	call	82d94 <min3>
   82e28:	e0bffc15 	stw	r2,-16(fp)
  return (max - min);
   82e2c:	e0fffb17 	ldw	r3,-20(fp)
   82e30:	e0bffc17 	ldw	r2,-16(fp)
   82e34:	1885c83a 	sub	r2,r3,r2
}
   82e38:	e037883a 	mov	sp,fp
   82e3c:	dfc00117 	ldw	ra,4(sp)
   82e40:	df000017 	ldw	fp,0(sp)
   82e44:	dec00204 	addi	sp,sp,8
   82e48:	f800283a 	ret

00082e4c <vid_put_pixel_in_span_map>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
inline void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
   82e4c:	defffc04 	addi	sp,sp,-16
   82e50:	df000315 	stw	fp,12(sp)
   82e54:	df000304 	addi	fp,sp,12
   82e58:	e13ffd15 	stw	r4,-12(fp)
   82e5c:	e17ffe15 	stw	r5,-8(fp)
   82e60:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
   82e64:	e0bffe17 	ldw	r2,-8(fp)
   82e68:	100490fa 	slli	r2,r2,3
   82e6c:	e0ffff17 	ldw	r3,-4(fp)
   82e70:	1885883a 	add	r2,r3,r2
   82e74:	10800017 	ldw	r2,0(r2)
   82e78:	10bfffd8 	cmpnei	r2,r2,-1
   82e7c:	10000e1e 	bne	r2,zero,82eb8 <vid_put_pixel_in_span_map+0x6c>
  {
    span_array[y*2] = x;
   82e80:	e0bffe17 	ldw	r2,-8(fp)
   82e84:	100490fa 	slli	r2,r2,3
   82e88:	e0ffff17 	ldw	r3,-4(fp)
   82e8c:	1885883a 	add	r2,r3,r2
   82e90:	e0fffd17 	ldw	r3,-12(fp)
   82e94:	10c00015 	stw	r3,0(r2)
    span_array[(y*2)+1] = x;
   82e98:	e0bffe17 	ldw	r2,-8(fp)
   82e9c:	100490fa 	slli	r2,r2,3
   82ea0:	10800104 	addi	r2,r2,4
   82ea4:	e0ffff17 	ldw	r3,-4(fp)
   82ea8:	1885883a 	add	r2,r3,r2
   82eac:	e0fffd17 	ldw	r3,-12(fp)
   82eb0:	10c00015 	stw	r3,0(r2)
   82eb4:	00001d06 	br	82f2c <vid_put_pixel_in_span_map+0xe0>
  }
  else if( span_array[y*2] > x )
   82eb8:	e0bffe17 	ldw	r2,-8(fp)
   82ebc:	100490fa 	slli	r2,r2,3
   82ec0:	e0ffff17 	ldw	r3,-4(fp)
   82ec4:	1885883a 	add	r2,r3,r2
   82ec8:	10800017 	ldw	r2,0(r2)
   82ecc:	e0fffd17 	ldw	r3,-12(fp)
   82ed0:	1880070e 	bge	r3,r2,82ef0 <vid_put_pixel_in_span_map+0xa4>
    span_array[y*2] = x;
   82ed4:	e0bffe17 	ldw	r2,-8(fp)
   82ed8:	100490fa 	slli	r2,r2,3
   82edc:	e0ffff17 	ldw	r3,-4(fp)
   82ee0:	1885883a 	add	r2,r3,r2
   82ee4:	e0fffd17 	ldw	r3,-12(fp)
   82ee8:	10c00015 	stw	r3,0(r2)
   82eec:	00000f06 	br	82f2c <vid_put_pixel_in_span_map+0xe0>
  else if( span_array[(y*2)+1] < x )
   82ef0:	e0bffe17 	ldw	r2,-8(fp)
   82ef4:	100490fa 	slli	r2,r2,3
   82ef8:	10800104 	addi	r2,r2,4
   82efc:	e0ffff17 	ldw	r3,-4(fp)
   82f00:	1885883a 	add	r2,r3,r2
   82f04:	10c00017 	ldw	r3,0(r2)
   82f08:	e0bffd17 	ldw	r2,-12(fp)
   82f0c:	1880070e 	bge	r3,r2,82f2c <vid_put_pixel_in_span_map+0xe0>
    span_array[(y*2)+1] = x;
   82f10:	e0bffe17 	ldw	r2,-8(fp)
   82f14:	100490fa 	slli	r2,r2,3
   82f18:	10800104 	addi	r2,r2,4
   82f1c:	e0ffff17 	ldw	r3,-4(fp)
   82f20:	1885883a 	add	r2,r3,r2
   82f24:	e0fffd17 	ldw	r3,-12(fp)
   82f28:	10c00015 	stw	r3,0(r2)
}
   82f2c:	e037883a 	mov	sp,fp
   82f30:	df000017 	ldw	fp,0(sp)
   82f34:	dec00104 	addi	sp,sp,4
   82f38:	f800283a 	ret

00082f3c <vid_bres_scan_edges>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
   82f3c:	deffee04 	addi	sp,sp,-72
   82f40:	dfc01115 	stw	ra,68(sp)
   82f44:	df001015 	stw	fp,64(sp)
   82f48:	df001004 	addi	fp,sp,64
   82f4c:	e13ffc15 	stw	r4,-16(fp)
   82f50:	e17ffd15 	stw	r5,-12(fp)
   82f54:	e1bffe15 	stw	r6,-8(fp)
   82f58:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
   82f5c:	e0bffc17 	ldw	r2,-16(fp)
   82f60:	e0fffe17 	ldw	r3,-8(fp)
   82f64:	18800c0e 	bge	r3,r2,82f98 <vid_bres_scan_edges+0x5c>
  {
    int tempx = x2;
   82f68:	e0bffe17 	ldw	r2,-8(fp)
   82f6c:	e0bff515 	stw	r2,-44(fp)
    x2 = x1;
   82f70:	e0bffc17 	ldw	r2,-16(fp)
   82f74:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
   82f78:	e0bff517 	ldw	r2,-44(fp)
   82f7c:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
   82f80:	e0bfff17 	ldw	r2,-4(fp)
   82f84:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
   82f88:	e0bffd17 	ldw	r2,-12(fp)
   82f8c:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
   82f90:	e0bff617 	ldw	r2,-40(fp)
   82f94:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
   82f98:	e0fffd17 	ldw	r3,-12(fp)
   82f9c:	e0bfff17 	ldw	r2,-4(fp)
   82fa0:	1885c83a 	sub	r2,r3,r2
   82fa4:	1000010e 	bge	r2,zero,82fac <vid_bres_scan_edges+0x70>
   82fa8:	0085c83a 	sub	r2,zero,r2
   82fac:	e0bff115 	stw	r2,-60(fp)
  x_delta = (x2-x1);
   82fb0:	e0fffe17 	ldw	r3,-8(fp)
   82fb4:	e0bffc17 	ldw	r2,-16(fp)
   82fb8:	1885c83a 	sub	r2,r3,r2
   82fbc:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
   82fc0:	e0bffd17 	ldw	r2,-12(fp)
   82fc4:	e0ffff17 	ldw	r3,-4(fp)
   82fc8:	1880030e 	bge	r3,r2,82fd8 <vid_bres_scan_edges+0x9c>
   82fcc:	00bfffc4 	movi	r2,-1
   82fd0:	e0bff015 	stw	r2,-64(fp)
   82fd4:	00000206 	br	82fe0 <vid_bres_scan_edges+0xa4>
   82fd8:	00800044 	movi	r2,1
   82fdc:	e0bff015 	stw	r2,-64(fp)
  x_incr=1;
   82fe0:	00800044 	movi	r2,1
   82fe4:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
   82fe8:	e0fff217 	ldw	r3,-56(fp)
   82fec:	e0bff117 	ldw	r2,-60(fp)
   82ff0:	18802e16 	blt	r3,r2,830ac <vid_bres_scan_edges+0x170>
    int dPr   = y_delta<<1;
   82ff4:	e0bff117 	ldw	r2,-60(fp)
   82ff8:	1085883a 	add	r2,r2,r2
   82ffc:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (x_delta<<1);
   83000:	e0bff217 	ldw	r2,-56(fp)
   83004:	1085883a 	add	r2,r2,r2
   83008:	e0fff817 	ldw	r3,-32(fp)
   8300c:	1885c83a 	sub	r2,r3,r2
   83010:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - x_delta;
   83014:	e0fff817 	ldw	r3,-32(fp)
   83018:	e0bff217 	ldw	r2,-56(fp)
   8301c:	1885c83a 	sub	r2,r3,r2
   83020:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
   83024:	00001e06 	br	830a0 <vid_bres_scan_edges+0x164>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
   83028:	e13ffc17 	ldw	r4,-16(fp)
   8302c:	e17ffd17 	ldw	r5,-12(fp)
   83030:	e1800217 	ldw	r6,8(fp)
   83034:	0082e4c0 	call	82e4c <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
   83038:	e0bff317 	ldw	r2,-52(fp)
   8303c:	00800d0e 	bge	zero,r2,83074 <vid_bres_scan_edges+0x138>
        x1+=x_incr;
   83040:	e0fffc17 	ldw	r3,-16(fp)
   83044:	e0bff717 	ldw	r2,-36(fp)
   83048:	1885883a 	add	r2,r3,r2
   8304c:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
   83050:	e0fffd17 	ldw	r3,-12(fp)
   83054:	e0bff017 	ldw	r2,-64(fp)
   83058:	1885883a 	add	r2,r3,r2
   8305c:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
   83060:	e0fff317 	ldw	r3,-52(fp)
   83064:	e0bff917 	ldw	r2,-28(fp)
   83068:	1885883a 	add	r2,r3,r2
   8306c:	e0bff315 	stw	r2,-52(fp)
   83070:	00000806 	br	83094 <vid_bres_scan_edges+0x158>
      } else {
        x1+=x_incr;
   83074:	e0fffc17 	ldw	r3,-16(fp)
   83078:	e0bff717 	ldw	r2,-36(fp)
   8307c:	1885883a 	add	r2,r3,r2
   83080:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
   83084:	e0fff317 	ldw	r3,-52(fp)
   83088:	e0bff817 	ldw	r2,-32(fp)
   8308c:	1885883a 	add	r2,r3,r2
   83090:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
   83094:	e0bff217 	ldw	r2,-56(fp)
   83098:	10bfffc4 	addi	r2,r2,-1
   8309c:	e0bff215 	stw	r2,-56(fp)
   830a0:	e0bff217 	ldw	r2,-56(fp)
   830a4:	103fe00e 	bge	r2,zero,83028 <vid_bres_scan_edges+0xec>
   830a8:	00002d06 	br	83160 <vid_bres_scan_edges+0x224>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
   830ac:	e0bff217 	ldw	r2,-56(fp)
   830b0:	1085883a 	add	r2,r2,r2
   830b4:	e0bffa15 	stw	r2,-24(fp)
    int dPru  = dPr - (y_delta<<1);
   830b8:	e0bff117 	ldw	r2,-60(fp)
   830bc:	1085883a 	add	r2,r2,r2
   830c0:	e0fffa17 	ldw	r3,-24(fp)
   830c4:	1885c83a 	sub	r2,r3,r2
   830c8:	e0bffb15 	stw	r2,-20(fp)
    int P     = dPr - y_delta;
   830cc:	e0fffa17 	ldw	r3,-24(fp)
   830d0:	e0bff117 	ldw	r2,-60(fp)
   830d4:	1885c83a 	sub	r2,r3,r2
   830d8:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
   830dc:	00001e06 	br	83158 <vid_bres_scan_edges+0x21c>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
   830e0:	e13ffc17 	ldw	r4,-16(fp)
   830e4:	e17ffd17 	ldw	r5,-12(fp)
   830e8:	e1800217 	ldw	r6,8(fp)
   830ec:	0082e4c0 	call	82e4c <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
   830f0:	e0bff417 	ldw	r2,-48(fp)
   830f4:	00800d0e 	bge	zero,r2,8312c <vid_bres_scan_edges+0x1f0>
        x1+=x_incr;
   830f8:	e0fffc17 	ldw	r3,-16(fp)
   830fc:	e0bff717 	ldw	r2,-36(fp)
   83100:	1885883a 	add	r2,r3,r2
   83104:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
   83108:	e0fffd17 	ldw	r3,-12(fp)
   8310c:	e0bff017 	ldw	r2,-64(fp)
   83110:	1885883a 	add	r2,r3,r2
   83114:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
   83118:	e0fff417 	ldw	r3,-48(fp)
   8311c:	e0bffb17 	ldw	r2,-20(fp)
   83120:	1885883a 	add	r2,r3,r2
   83124:	e0bff415 	stw	r2,-48(fp)
   83128:	00000806 	br	8314c <vid_bres_scan_edges+0x210>
      } else {
        y1+=y_incr;
   8312c:	e0fffd17 	ldw	r3,-12(fp)
   83130:	e0bff017 	ldw	r2,-64(fp)
   83134:	1885883a 	add	r2,r3,r2
   83138:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
   8313c:	e0fff417 	ldw	r3,-48(fp)
   83140:	e0bffa17 	ldw	r2,-24(fp)
   83144:	1885883a 	add	r2,r3,r2
   83148:	e0bff415 	stw	r2,-48(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
   8314c:	e0bff117 	ldw	r2,-60(fp)
   83150:	10bfffc4 	addi	r2,r2,-1
   83154:	e0bff115 	stw	r2,-60(fp)
   83158:	e0bff117 	ldw	r2,-60(fp)
   8315c:	103fe00e 	bge	r2,zero,830e0 <vid_bres_scan_edges+0x1a4>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
   83160:	e037883a 	mov	sp,fp
   83164:	dfc00117 	ldw	ra,4(sp)
   83168:	df000017 	ldw	fp,0(sp)
   8316c:	dec00204 	addi	sp,sp,8
   83170:	f800283a 	ret

00083174 <vid_draw_triangle>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
   83174:	defff804 	addi	sp,sp,-32
   83178:	dfc00715 	stw	ra,28(sp)
   8317c:	df000615 	stw	fp,24(sp)
   83180:	df000604 	addi	fp,sp,24
   83184:	e13ffe15 	stw	r4,-8(fp)
   83188:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
   8318c:	e0bffe17 	ldw	r2,-8(fp)
   83190:	11000017 	ldw	r4,0(r2)
   83194:	e0bffe17 	ldw	r2,-8(fp)
   83198:	11400317 	ldw	r5,12(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
   8319c:	e0bffe17 	ldw	r2,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
   831a0:	10c00117 	ldw	r3,4(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
   831a4:	e0bffe17 	ldw	r2,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
   831a8:	10800417 	ldw	r2,16(r2)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
   831ac:	e1bffe17 	ldw	r6,-8(fp)
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
   831b0:	31800a17 	ldw	r6,40(r6)
   831b4:	01c00044 	movi	r7,1
   831b8:	d9c00015 	stw	r7,0(sp)
   831bc:	d9800115 	stw	r6,4(sp)
   831c0:	e1bfff17 	ldw	r6,-4(fp)
   831c4:	d9800215 	stw	r6,8(sp)
   831c8:	180d883a 	mov	r6,r3
   831cc:	100f883a 	mov	r7,r2
   831d0:	00810d00 	call	810d0 <vid_draw_line>
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
   831d4:	e0bffe17 	ldw	r2,-8(fp)
   831d8:	11000117 	ldw	r4,4(r2)
   831dc:	e0bffe17 	ldw	r2,-8(fp)
   831e0:	11400417 	ldw	r5,16(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
   831e4:	e0bffe17 	ldw	r2,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
   831e8:	10c00217 	ldw	r3,8(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
   831ec:	e0bffe17 	ldw	r2,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
   831f0:	10800517 	ldw	r2,20(r2)
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
   831f4:	e1bffe17 	ldw	r6,-8(fp)
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
   831f8:	31800a17 	ldw	r6,40(r6)
   831fc:	01c00044 	movi	r7,1
   83200:	d9c00015 	stw	r7,0(sp)
   83204:	d9800115 	stw	r6,4(sp)
   83208:	e1bfff17 	ldw	r6,-4(fp)
   8320c:	d9800215 	stw	r6,8(sp)
   83210:	180d883a 	mov	r6,r3
   83214:	100f883a 	mov	r7,r2
   83218:	00810d00 	call	810d0 <vid_draw_line>
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
   8321c:	e0bffe17 	ldw	r2,-8(fp)
   83220:	11000217 	ldw	r4,8(r2)
   83224:	e0bffe17 	ldw	r2,-8(fp)
   83228:	11400517 	ldw	r5,20(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
   8322c:	e0bffe17 	ldw	r2,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
   83230:	10c00017 	ldw	r3,0(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
   83234:	e0bffe17 	ldw	r2,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
   83238:	10800317 	ldw	r2,12(r2)
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
   8323c:	e1bffe17 	ldw	r6,-8(fp)
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
   83240:	31800a17 	ldw	r6,40(r6)
   83244:	01c00044 	movi	r7,1
   83248:	d9c00015 	stw	r7,0(sp)
   8324c:	d9800115 	stw	r6,4(sp)
   83250:	e1bfff17 	ldw	r6,-4(fp)
   83254:	d9800215 	stw	r6,8(sp)
   83258:	180d883a 	mov	r6,r3
   8325c:	100f883a 	mov	r7,r2
   83260:	00810d00 	call	810d0 <vid_draw_line>
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
   83264:	e0bffe17 	ldw	r2,-8(fp)
   83268:	10800b17 	ldw	r2,44(r2)
   8326c:	10800058 	cmpnei	r2,r2,1
   83270:	1000a01e 	bne	r2,zero,834f4 <vid_draw_triangle+0x380>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
   83274:	e0bffe17 	ldw	r2,-8(fp)
   83278:	11000317 	ldw	r4,12(r2)
   8327c:	e0bffe17 	ldw	r2,-8(fp)
   83280:	10c00417 	ldw	r3,16(r2)
   83284:	e0bffe17 	ldw	r2,-8(fp)
   83288:	10800517 	ldw	r2,20(r2)
   8328c:	180b883a 	mov	r5,r3
   83290:	100d883a 	mov	r6,r2
   83294:	0082d940 	call	82d94 <min3>
   83298:	e0fffe17 	ldw	r3,-8(fp)
   8329c:	18800815 	stw	r2,32(r3)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
   832a0:	e0bffe17 	ldw	r2,-8(fp)
   832a4:	11000317 	ldw	r4,12(r2)
   832a8:	e0bffe17 	ldw	r2,-8(fp)
   832ac:	10c00417 	ldw	r3,16(r2)
   832b0:	e0bffe17 	ldw	r2,-8(fp)
   832b4:	10800517 	ldw	r2,20(r2)
   832b8:	180b883a 	mov	r5,r3
   832bc:	100d883a 	mov	r6,r2
   832c0:	0082d400 	call	82d40 <max3>
   832c4:	e0fffe17 	ldw	r3,-8(fp)
   832c8:	18800915 	stw	r2,36(r3)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
   832cc:	e0bffe17 	ldw	r2,-8(fp)
   832d0:	11000317 	ldw	r4,12(r2)
   832d4:	e0bffe17 	ldw	r2,-8(fp)
   832d8:	10c00417 	ldw	r3,16(r2)
   832dc:	e0bffe17 	ldw	r2,-8(fp)
   832e0:	10800517 	ldw	r2,20(r2)
   832e4:	180b883a 	mov	r5,r3
   832e8:	100d883a 	mov	r6,r2
   832ec:	0082de80 	call	82de8 <max_diff3>
   832f0:	e0fffe17 	ldw	r3,-8(fp)
   832f4:	18800615 	stw	r2,24(r3)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
   832f8:	e0bffe17 	ldw	r2,-8(fp)
   832fc:	11000017 	ldw	r4,0(r2)
   83300:	e0bffe17 	ldw	r2,-8(fp)
   83304:	10c00117 	ldw	r3,4(r2)
   83308:	e0bffe17 	ldw	r2,-8(fp)
   8330c:	10800217 	ldw	r2,8(r2)
   83310:	180b883a 	mov	r5,r3
   83314:	100d883a 	mov	r6,r2
   83318:	0082de80 	call	82de8 <max_diff3>
   8331c:	e0fffe17 	ldw	r3,-8(fp)
   83320:	18800715 	stw	r2,28(r3)
    tri->span_array = malloc(display->height * 4 * 2);
   83324:	e0bfff17 	ldw	r2,-4(fp)
   83328:	10800217 	ldw	r2,8(r2)
   8332c:	100490fa 	slli	r2,r2,3
   83330:	1009883a 	mov	r4,r2
   83334:	00888d80 	call	888d8 <malloc>
   83338:	1007883a 	mov	r3,r2
   8333c:	e0bffe17 	ldw	r2,-8(fp)
   83340:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
   83344:	e0bffe17 	ldw	r2,-8(fp)
   83348:	10800817 	ldw	r2,32(r2)
   8334c:	e0bffd15 	stw	r2,-12(fp)
   83350:	00001206 	br	8339c <vid_draw_triangle+0x228>
    {
      tri->span_array[i*2] = -1;
   83354:	e0bffe17 	ldw	r2,-8(fp)
   83358:	10c00d17 	ldw	r3,52(r2)
   8335c:	e0bffd17 	ldw	r2,-12(fp)
   83360:	100490fa 	slli	r2,r2,3
   83364:	1885883a 	add	r2,r3,r2
   83368:	00ffffc4 	movi	r3,-1
   8336c:	10c00015 	stw	r3,0(r2)
      tri->span_array[(i*2) + 1] = -1;
   83370:	e0bffe17 	ldw	r2,-8(fp)
   83374:	10c00d17 	ldw	r3,52(r2)
   83378:	e0bffd17 	ldw	r2,-12(fp)
   8337c:	100490fa 	slli	r2,r2,3
   83380:	10800104 	addi	r2,r2,4
   83384:	1885883a 	add	r2,r3,r2
   83388:	00ffffc4 	movi	r3,-1
   8338c:	10c00015 	stw	r3,0(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
   83390:	e0bffd17 	ldw	r2,-12(fp)
   83394:	10800044 	addi	r2,r2,1
   83398:	e0bffd15 	stw	r2,-12(fp)
   8339c:	e0bffe17 	ldw	r2,-8(fp)
   833a0:	10c00917 	ldw	r3,36(r2)
   833a4:	e0bffd17 	ldw	r2,-12(fp)
   833a8:	18bfea0e 	bge	r3,r2,83354 <vid_draw_triangle+0x1e0>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
   833ac:	e0bffe17 	ldw	r2,-8(fp)
   833b0:	11000017 	ldw	r4,0(r2)
   833b4:	e0bffe17 	ldw	r2,-8(fp)
   833b8:	11400317 	ldw	r5,12(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
   833bc:	e0bffe17 	ldw	r2,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
   833c0:	10c00117 	ldw	r3,4(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
   833c4:	e0bffe17 	ldw	r2,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
   833c8:	10800417 	ldw	r2,16(r2)
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
   833cc:	e1bffe17 	ldw	r6,-8(fp)
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
   833d0:	31800d17 	ldw	r6,52(r6)
   833d4:	d9800015 	stw	r6,0(sp)
   833d8:	180d883a 	mov	r6,r3
   833dc:	100f883a 	mov	r7,r2
   833e0:	0082f3c0 	call	82f3c <vid_bres_scan_edges>
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
   833e4:	e0bffe17 	ldw	r2,-8(fp)
   833e8:	11000117 	ldw	r4,4(r2)
   833ec:	e0bffe17 	ldw	r2,-8(fp)
   833f0:	11400417 	ldw	r5,16(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
   833f4:	e0bffe17 	ldw	r2,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
   833f8:	10c00217 	ldw	r3,8(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
   833fc:	e0bffe17 	ldw	r2,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
   83400:	10800517 	ldw	r2,20(r2)
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
   83404:	e1bffe17 	ldw	r6,-8(fp)
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
   83408:	31800d17 	ldw	r6,52(r6)
   8340c:	d9800015 	stw	r6,0(sp)
   83410:	180d883a 	mov	r6,r3
   83414:	100f883a 	mov	r7,r2
   83418:	0082f3c0 	call	82f3c <vid_bres_scan_edges>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
   8341c:	e0bffe17 	ldw	r2,-8(fp)
   83420:	11000217 	ldw	r4,8(r2)
   83424:	e0bffe17 	ldw	r2,-8(fp)
   83428:	11400517 	ldw	r5,20(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
   8342c:	e0bffe17 	ldw	r2,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
   83430:	10c00017 	ldw	r3,0(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
   83434:	e0bffe17 	ldw	r2,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
   83438:	10800317 	ldw	r2,12(r2)
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
   8343c:	e1bffe17 	ldw	r6,-8(fp)
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
   83440:	31800d17 	ldw	r6,52(r6)
   83444:	d9800015 	stw	r6,0(sp)
   83448:	180d883a 	mov	r6,r3
   8344c:	100f883a 	mov	r7,r2
   83450:	0082f3c0 	call	82f3c <vid_bres_scan_edges>
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
   83454:	e0bffe17 	ldw	r2,-8(fp)
   83458:	10800817 	ldw	r2,32(r2)
   8345c:	e0bffd15 	stw	r2,-12(fp)
   83460:	00001c06 	br	834d4 <vid_draw_triangle+0x360>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
   83464:	e0bffe17 	ldw	r2,-8(fp)
   83468:	10c00d17 	ldw	r3,52(r2)
   8346c:	e0bffd17 	ldw	r2,-12(fp)
   83470:	100490fa 	slli	r2,r2,3
   83474:	1885883a 	add	r2,r3,r2
   83478:	10c00017 	ldw	r3,0(r2)
   8347c:	e0bffe17 	ldw	r2,-8(fp)
   83480:	11000d17 	ldw	r4,52(r2)
   83484:	e0bffd17 	ldw	r2,-12(fp)
   83488:	100490fa 	slli	r2,r2,3
   8348c:	10800104 	addi	r2,r2,4
   83490:	2085883a 	add	r2,r4,r2
   83494:	10800017 	ldw	r2,0(r2)
   83498:	e13ffe17 	ldw	r4,-8(fp)
   8349c:	21000a17 	ldw	r4,40(r4)
   834a0:	01400044 	movi	r5,1
   834a4:	d9400015 	stw	r5,0(sp)
   834a8:	d9000115 	stw	r4,4(sp)
   834ac:	e13fff17 	ldw	r4,-4(fp)
   834b0:	d9000215 	stw	r4,8(sp)
   834b4:	1809883a 	mov	r4,r3
   834b8:	e17ffd17 	ldw	r5,-12(fp)
   834bc:	100d883a 	mov	r6,r2
   834c0:	e1fffd17 	ldw	r7,-12(fp)
   834c4:	00810d00 	call	810d0 <vid_draw_line>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
   834c8:	e0bffd17 	ldw	r2,-12(fp)
   834cc:	10800044 	addi	r2,r2,1
   834d0:	e0bffd15 	stw	r2,-12(fp)
   834d4:	e0bffe17 	ldw	r2,-8(fp)
   834d8:	10c00917 	ldw	r3,36(r2)
   834dc:	e0bffd17 	ldw	r2,-12(fp)
   834e0:	18bfe00e 	bge	r3,r2,83464 <vid_draw_triangle+0x2f0>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
   834e4:	e0bffe17 	ldw	r2,-8(fp)
   834e8:	10800d17 	ldw	r2,52(r2)
   834ec:	1009883a 	mov	r4,r2
   834f0:	00888ec0 	call	888ec <free>
  }
}
   834f4:	e037883a 	mov	sp,fp
   834f8:	dfc00117 	ldw	ra,4(sp)
   834fc:	df000017 	ldw	fp,0(sp)
   83500:	dec00204 	addi	sp,sp,8
   83504:	f800283a 	ret

00083508 <CopyImage16>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
   83508:	defff404 	addi	sp,sp,-48
   8350c:	dfc00b15 	stw	ra,44(sp)
   83510:	df000a15 	stw	fp,40(sp)
   83514:	df000a04 	addi	fp,sp,40
   83518:	e13ffa15 	stw	r4,-24(fp)
   8351c:	e17ffb15 	stw	r5,-20(fp)
   83520:	3007883a 	mov	r3,r6
   83524:	3805883a 	mov	r2,r7
   83528:	e1400217 	ldw	r5,8(fp)
   8352c:	e1000317 	ldw	r4,12(fp)
   83530:	e0fffc0d 	sth	r3,-16(fp)
   83534:	e0bffd0d 	sth	r2,-12(fp)
   83538:	e17ffe0d 	sth	r5,-8(fp)
   8353c:	e13fff0d 	sth	r4,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
   83540:	e03ff815 	stw	zero,-32(fp)
  int y_dst_offset = 0;
   83544:	e03ff915 	stw	zero,-28(fp)
  
  for( y_src = 0, y_dst = 0; 
   83548:	e03ff615 	stw	zero,-40(fp)
   8354c:	e03ff715 	stw	zero,-36(fp)
   83550:	00001b06 	br	835c0 <CopyImage16+0xb8>
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   83554:	e0bff917 	ldw	r2,-28(fp)
   83558:	1085883a 	add	r2,r2,r2
   8355c:	e0fffb17 	ldw	r3,-20(fp)
   83560:	1889883a 	add	r4,r3,r2
   83564:	e0bff817 	ldw	r2,-32(fp)
           ( source_buffer + y_src_offset ), 
   83568:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   8356c:	e0fffa17 	ldw	r3,-24(fp)
   83570:	1887883a 	add	r3,r3,r2
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
   83574:	e0bffc0f 	ldh	r2,-16(fp)
   83578:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   8357c:	180b883a 	mov	r5,r3
   83580:	100d883a 	mov	r6,r2
   83584:	00890840 	call	89084 <memcpy>
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
   83588:	e0bff617 	ldw	r2,-40(fp)
   8358c:	10800044 	addi	r2,r2,1
   83590:	e0bff615 	stw	r2,-40(fp)
   83594:	e0bff717 	ldw	r2,-36(fp)
   83598:	10800044 	addi	r2,r2,1
   8359c:	e0bff715 	stw	r2,-36(fp)
   835a0:	e0bffc0f 	ldh	r2,-16(fp)
   835a4:	e0fff817 	ldw	r3,-32(fp)
   835a8:	1885883a 	add	r2,r3,r2
   835ac:	e0bff815 	stw	r2,-32(fp)
   835b0:	e0bffe0f 	ldh	r2,-8(fp)
   835b4:	e0fff917 	ldw	r3,-28(fp)
   835b8:	1885883a 	add	r2,r3,r2
   835bc:	e0bff915 	stw	r2,-28(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
   835c0:	e0bffd0f 	ldh	r2,-12(fp)
   835c4:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
   835c8:	e0bff617 	ldw	r2,-40(fp)
   835cc:	18bfe10e 	bge	r3,r2,83554 <CopyImage16+0x4c>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
   835d0:	e037883a 	mov	sp,fp
   835d4:	dfc00117 	ldw	ra,4(sp)
   835d8:	df000017 	ldw	fp,0(sp)
   835dc:	dec00204 	addi	sp,sp,8
   835e0:	f800283a 	ret

000835e4 <CropImage16>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
   835e4:	defff004 	addi	sp,sp,-64
   835e8:	dfc00f15 	stw	ra,60(sp)
   835ec:	df000e15 	stw	fp,56(sp)
   835f0:	df000e04 	addi	fp,sp,56
   835f4:	e13ff615 	stw	r4,-40(fp)
   835f8:	e17ff715 	stw	r5,-36(fp)
   835fc:	3007883a 	mov	r3,r6
   83600:	3805883a 	mov	r2,r7
   83604:	e2400217 	ldw	r9,8(fp)
   83608:	e2000317 	ldw	r8,12(fp)
   8360c:	e1c00417 	ldw	r7,16(fp)
   83610:	e1800517 	ldw	r6,20(fp)
   83614:	e1400617 	ldw	r5,24(fp)
   83618:	e1000717 	ldw	r4,28(fp)
   8361c:	e0fff80d 	sth	r3,-32(fp)
   83620:	e0bff90d 	sth	r2,-28(fp)
   83624:	e27ffa0d 	sth	r9,-24(fp)
   83628:	e23ffb0d 	sth	r8,-20(fp)
   8362c:	e1fffc0d 	sth	r7,-16(fp)
   83630:	e1bffd0d 	sth	r6,-12(fp)
   83634:	e17ffe0d 	sth	r5,-8(fp)
   83638:	e13fff0d 	sth	r4,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
   8363c:	e0fff80f 	ldh	r3,-32(fp)
   83640:	e0bffc0f 	ldh	r2,-16(fp)
   83644:	1885383a 	mul	r2,r3,r2
   83648:	e0bff415 	stw	r2,-48(fp)
  int y_dst_offset = 0;
   8364c:	e03ff515 	stw	zero,-44(fp)
  
  for( y_src = crop_top, y_dst = 0; 
   83650:	e0bffc0f 	ldh	r2,-16(fp)
   83654:	e0bff215 	stw	r2,-56(fp)
   83658:	e03ff315 	stw	zero,-52(fp)
   8365c:	00002106 	br	836e4 <CropImage16+0x100>
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   83660:	e0bff517 	ldw	r2,-44(fp)
   83664:	1085883a 	add	r2,r2,r2
   83668:	e0fff717 	ldw	r3,-36(fp)
   8366c:	1889883a 	add	r4,r3,r2
           ( source_buffer + y_src_offset + crop_left ), 
   83670:	e0fffa0f 	ldh	r3,-24(fp)
   83674:	e0bff417 	ldw	r2,-48(fp)
   83678:	1885883a 	add	r2,r3,r2
   8367c:	1085883a 	add	r2,r2,r2
   83680:	e0fff617 	ldw	r3,-40(fp)
   83684:	1887883a 	add	r3,r3,r2
           ((source_width - crop_left - crop_right) << 1));
   83688:	e17ff80f 	ldh	r5,-32(fp)
   8368c:	e0bffa0f 	ldh	r2,-24(fp)
   83690:	288bc83a 	sub	r5,r5,r2
   83694:	e0bffb0f 	ldh	r2,-20(fp)
   83698:	2885c83a 	sub	r2,r5,r2
   8369c:	1085883a 	add	r2,r2,r2
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
   836a0:	180b883a 	mov	r5,r3
   836a4:	100d883a 	mov	r6,r2
   836a8:	00890840 	call	89084 <memcpy>
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
   836ac:	e0bff217 	ldw	r2,-56(fp)
   836b0:	10800044 	addi	r2,r2,1
   836b4:	e0bff215 	stw	r2,-56(fp)
   836b8:	e0bff317 	ldw	r2,-52(fp)
   836bc:	10800044 	addi	r2,r2,1
   836c0:	e0bff315 	stw	r2,-52(fp)
   836c4:	e0bff80f 	ldh	r2,-32(fp)
   836c8:	e0fff417 	ldw	r3,-48(fp)
   836cc:	1885883a 	add	r2,r3,r2
   836d0:	e0bff415 	stw	r2,-48(fp)
   836d4:	e0bffe0f 	ldh	r2,-8(fp)
   836d8:	e0fff517 	ldw	r3,-44(fp)
   836dc:	1885883a 	add	r2,r3,r2
   836e0:	e0bff515 	stw	r2,-44(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
   836e4:	e0fff90f 	ldh	r3,-28(fp)
   836e8:	e0bffd0f 	ldh	r2,-12(fp)
   836ec:	1885c83a 	sub	r2,r3,r2
   836f0:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
   836f4:	e0bff217 	ldw	r2,-56(fp)
   836f8:	18bfd90e 	bge	r3,r2,83660 <CropImage16+0x7c>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
   836fc:	e037883a 	mov	sp,fp
   83700:	dfc00117 	ldw	ra,4(sp)
   83704:	df000017 	ldw	fp,0(sp)
   83708:	dec00204 	addi	sp,sp,8
   8370c:	f800283a 	ret

00083710 <vid_print_string_alpha>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
   83710:	defff404 	addi	sp,sp,-48
   83714:	dfc00b15 	stw	ra,44(sp)
   83718:	df000a15 	stw	fp,40(sp)
   8371c:	df000a04 	addi	fp,sp,40
   83720:	e13ffc15 	stw	r4,-16(fp)
   83724:	e17ffd15 	stw	r5,-12(fp)
   83728:	e1bffe15 	stw	r6,-8(fp)
   8372c:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
   83730:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
   83734:	e0bffc17 	ldw	r2,-16(fp)
   83738:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
   8373c:	00007d06 	br	83934 <vid_print_string_alpha+0x224>
    //Handle newline char here.
    if (string[i] == '\n') {
   83740:	e0bff917 	ldw	r2,-28(fp)
   83744:	e0c00417 	ldw	r3,16(fp)
   83748:	1885883a 	add	r2,r3,r2
   8374c:	10800003 	ldbu	r2,0(r2)
   83750:	10803fcc 	andi	r2,r2,255
   83754:	1080201c 	xori	r2,r2,128
   83758:	10bfe004 	addi	r2,r2,-128
   8375c:	10800298 	cmpnei	r2,r2,10
   83760:	10000c1e 	bne	r2,zero,83794 <vid_print_string_alpha+0x84>
      horiz_offset = original_horiz_offset;
   83764:	e0bffb17 	ldw	r2,-20(fp)
   83768:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
   8376c:	e0800217 	ldw	r2,8(fp)
   83770:	1082d804 	addi	r2,r2,2912
   83774:	10c00517 	ldw	r3,20(r2)
   83778:	e0bffd17 	ldw	r2,-12(fp)
   8377c:	1885883a 	add	r2,r3,r2
   83780:	e0bffd15 	stw	r2,-12(fp)
      i++;
   83784:	e0bff917 	ldw	r2,-28(fp)
   83788:	10800044 	addi	r2,r2,1
   8378c:	e0bff915 	stw	r2,-28(fp)
      continue;
   83790:	00006806 	br	83934 <vid_print_string_alpha+0x224>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
   83794:	e0bff917 	ldw	r2,-28(fp)
   83798:	e0c00417 	ldw	r3,16(fp)
   8379c:	1885883a 	add	r2,r3,r2
   837a0:	10800003 	ldbu	r2,0(r2)
   837a4:	10803fcc 	andi	r2,r2,255
   837a8:	1080201c 	xori	r2,r2,128
   837ac:	10bfe004 	addi	r2,r2,-128
   837b0:	10800818 	cmpnei	r2,r2,32
   837b4:	1000151e 	bne	r2,zero,8380c <vid_print_string_alpha+0xfc>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
   837b8:	e0bfff17 	ldw	r2,-4(fp)
   837bc:	10bfffe0 	cmpeqi	r2,r2,-1
   837c0:	10000b1e 	bne	r2,zero,837f0 <vid_print_string_alpha+0xe0>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
   837c4:	e0bfff17 	ldw	r2,-4(fp)
   837c8:	d8800015 	stw	r2,0(sp)
   837cc:	e0800217 	ldw	r2,8(fp)
   837d0:	d8800115 	stw	r2,4(sp)
   837d4:	e0800317 	ldw	r2,12(fp)
   837d8:	d8800215 	stw	r2,8(sp)
   837dc:	e13ffc17 	ldw	r4,-16(fp)
   837e0:	e17ffd17 	ldw	r5,-12(fp)
   837e4:	e1bfff17 	ldw	r6,-4(fp)
   837e8:	01c00b44 	movi	r7,45
   837ec:	0083e9c0 	call	83e9c <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
   837f0:	e0800217 	ldw	r2,8(fp)
   837f4:	10806004 	addi	r2,r2,384
   837f8:	10c00417 	ldw	r3,16(r2)
   837fc:	e0bffc17 	ldw	r2,-16(fp)
   83800:	1885883a 	add	r2,r3,r2
   83804:	e0bffc15 	stw	r2,-16(fp)
   83808:	00004706 	br	83928 <vid_print_string_alpha+0x218>
    }
    else if(string[i] == '\t')  // this is a tab
   8380c:	e0bff917 	ldw	r2,-28(fp)
   83810:	e0c00417 	ldw	r3,16(fp)
   83814:	1885883a 	add	r2,r3,r2
   83818:	10800003 	ldbu	r2,0(r2)
   8381c:	10803fcc 	andi	r2,r2,255
   83820:	1080201c 	xori	r2,r2,128
   83824:	10bfe004 	addi	r2,r2,-128
   83828:	10800258 	cmpnei	r2,r2,9
   8382c:	10001d1e 	bne	r2,zero,838a4 <vid_print_string_alpha+0x194>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
   83830:	e03ffa15 	stw	zero,-24(fp)
   83834:	00001706 	br	83894 <vid_print_string_alpha+0x184>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
   83838:	e0bfff17 	ldw	r2,-4(fp)
   8383c:	10bfffe0 	cmpeqi	r2,r2,-1
   83840:	10000b1e 	bne	r2,zero,83870 <vid_print_string_alpha+0x160>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
   83844:	e0bfff17 	ldw	r2,-4(fp)
   83848:	d8800015 	stw	r2,0(sp)
   8384c:	e0800217 	ldw	r2,8(fp)
   83850:	d8800115 	stw	r2,4(sp)
   83854:	e0800317 	ldw	r2,12(fp)
   83858:	d8800215 	stw	r2,8(sp)
   8385c:	e13ffc17 	ldw	r4,-16(fp)
   83860:	e17ffd17 	ldw	r5,-12(fp)
   83864:	e1bfff17 	ldw	r6,-4(fp)
   83868:	01c00b44 	movi	r7,45
   8386c:	0083e9c0 	call	83e9c <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
   83870:	e0800217 	ldw	r2,8(fp)
   83874:	10806004 	addi	r2,r2,384
   83878:	10c00417 	ldw	r3,16(r2)
   8387c:	e0bffc17 	ldw	r2,-16(fp)
   83880:	1885883a 	add	r2,r3,r2
   83884:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
   83888:	e0bffa17 	ldw	r2,-24(fp)
   8388c:	10800044 	addi	r2,r2,1
   83890:	e0bffa15 	stw	r2,-24(fp)
   83894:	e0bffa17 	ldw	r2,-24(fp)
   83898:	10800090 	cmplti	r2,r2,2
   8389c:	103fe61e 	bne	r2,zero,83838 <vid_print_string_alpha+0x128>
   838a0:	00002106 	br	83928 <vid_print_string_alpha+0x218>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
   838a4:	e0bff917 	ldw	r2,-28(fp)
   838a8:	e0c00417 	ldw	r3,16(fp)
   838ac:	1885883a 	add	r2,r3,r2
   838b0:	10800003 	ldbu	r2,0(r2)
   838b4:	10803fcc 	andi	r2,r2,255
   838b8:	1080201c 	xori	r2,r2,128
   838bc:	10bfe004 	addi	r2,r2,-128
   838c0:	e0ffff17 	ldw	r3,-4(fp)
   838c4:	d8c00015 	stw	r3,0(sp)
   838c8:	e0c00217 	ldw	r3,8(fp)
   838cc:	d8c00115 	stw	r3,4(sp)
   838d0:	e0c00317 	ldw	r3,12(fp)
   838d4:	d8c00215 	stw	r3,8(sp)
   838d8:	e13ffc17 	ldw	r4,-16(fp)
   838dc:	e17ffd17 	ldw	r5,-12(fp)
   838e0:	e1bffe17 	ldw	r6,-8(fp)
   838e4:	100f883a 	mov	r7,r2
   838e8:	0083e9c0 	call	83e9c <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
   838ec:	e0bff917 	ldw	r2,-28(fp)
   838f0:	e0c00417 	ldw	r3,16(fp)
   838f4:	1885883a 	add	r2,r3,r2
   838f8:	10800003 	ldbu	r2,0(r2)
   838fc:	10803fcc 	andi	r2,r2,255
   83900:	1080201c 	xori	r2,r2,128
   83904:	10bfe004 	addi	r2,r2,-128
   83908:	10bff7c4 	addi	r2,r2,-33
   8390c:	1004917a 	slli	r2,r2,5
   83910:	e0c00217 	ldw	r3,8(fp)
   83914:	1885883a 	add	r2,r3,r2
   83918:	10c00417 	ldw	r3,16(r2)
   8391c:	e0bffc17 	ldw	r2,-16(fp)
   83920:	1885883a 	add	r2,r3,r2
   83924:	e0bffc15 	stw	r2,-16(fp)
    }
    i++;
   83928:	e0bff917 	ldw	r2,-28(fp)
   8392c:	10800044 	addi	r2,r2,1
   83930:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
   83934:	e0bff917 	ldw	r2,-28(fp)
   83938:	e0c00417 	ldw	r3,16(fp)
   8393c:	1885883a 	add	r2,r3,r2
   83940:	10800003 	ldbu	r2,0(r2)
   83944:	10803fcc 	andi	r2,r2,255
   83948:	1080201c 	xori	r2,r2,128
   8394c:	10bfe004 	addi	r2,r2,-128
   83950:	103f7b1e 	bne	r2,zero,83740 <vid_print_string_alpha+0x30>
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
      horiz_offset += font[string[i] - 33].bounds_width;
    }
    i++;
  }
  return (0);
   83954:	0005883a 	mov	r2,zero
}
   83958:	e037883a 	mov	sp,fp
   8395c:	dfc00117 	ldw	ra,4(sp)
   83960:	df000017 	ldw	fp,0(sp)
   83964:	dec00204 	addi	sp,sp,8
   83968:	f800283a 	ret

0008396c <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

__inline__ int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
   8396c:	defff904 	addi	sp,sp,-28
   83970:	df000615 	stw	fp,24(sp)
   83974:	df000604 	addi	fp,sp,24
   83978:	e13ffc15 	stw	r4,-16(fp)
   8397c:	e17ffd15 	stw	r5,-12(fp)
   83980:	e1bffe15 	stw	r6,-8(fp)
   83984:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
   83988:	e03ffb0d 	sth	zero,-20(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
   8398c:	e0bffc17 	ldw	r2,-16(fp)
   83990:	10800418 	cmpnei	r2,r2,16
   83994:	1000231e 	bne	r2,zero,83a24 <seperate_color_channels+0xb8>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
   83998:	e0bffd17 	ldw	r2,-12(fp)
   8399c:	10800003 	ldbu	r2,0(r2)
   839a0:	10803fcc 	andi	r2,r2,255
   839a4:	e0bffb0d 	sth	r2,-20(fp)
   839a8:	e0bffd17 	ldw	r2,-12(fp)
   839ac:	10800044 	addi	r2,r2,1
   839b0:	e0bffd15 	stw	r2,-12(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
   839b4:	e0bffd17 	ldw	r2,-12(fp)
   839b8:	10800003 	ldbu	r2,0(r2)
   839bc:	10803fcc 	andi	r2,r2,255
   839c0:	1004923a 	slli	r2,r2,8
   839c4:	1007883a 	mov	r3,r2
   839c8:	e0bffb0b 	ldhu	r2,-20(fp)
   839cc:	1885883a 	add	r2,r3,r2
   839d0:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F; 
   839d4:	e0bffb0b 	ldhu	r2,-20(fp)
   839d8:	108007cc 	andi	r2,r2,31
   839dc:	1007883a 	mov	r3,r2
   839e0:	e0800117 	ldw	r2,4(fp)
   839e4:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
   839e8:	e0bffb0b 	ldhu	r2,-20(fp)
   839ec:	1004d17a 	srli	r2,r2,5
   839f0:	10800fcc 	andi	r2,r2,63
   839f4:	1007883a 	mov	r3,r2
   839f8:	e0bfff17 	ldw	r2,-4(fp)
   839fc:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
   83a00:	e0bffb0b 	ldhu	r2,-20(fp)
   83a04:	1004d2fa 	srli	r2,r2,11
   83a08:	108007cc 	andi	r2,r2,31
   83a0c:	1007883a 	mov	r3,r2
   83a10:	e0bffe17 	ldw	r2,-8(fp)
   83a14:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   83a18:	00800044 	movi	r2,1
   83a1c:	e0bffa15 	stw	r2,-24(fp)
   83a20:	00002206 	br	83aac <seperate_color_channels+0x140>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
   83a24:	e0bffc17 	ldw	r2,-16(fp)
   83a28:	10800620 	cmpeqi	r2,r2,24
   83a2c:	1000031e 	bne	r2,zero,83a3c <seperate_color_channels+0xd0>
   83a30:	e0bffc17 	ldw	r2,-16(fp)
   83a34:	10800818 	cmpnei	r2,r2,32
   83a38:	1000151e 	bne	r2,zero,83a90 <seperate_color_channels+0x124>
  {
    *blue = *color++;
   83a3c:	e0bffd17 	ldw	r2,-12(fp)
   83a40:	10c00003 	ldbu	r3,0(r2)
   83a44:	e0800117 	ldw	r2,4(fp)
   83a48:	10c00005 	stb	r3,0(r2)
   83a4c:	e0bffd17 	ldw	r2,-12(fp)
   83a50:	10800044 	addi	r2,r2,1
   83a54:	e0bffd15 	stw	r2,-12(fp)
    *green = *color++;
   83a58:	e0bffd17 	ldw	r2,-12(fp)
   83a5c:	10c00003 	ldbu	r3,0(r2)
   83a60:	e0bfff17 	ldw	r2,-4(fp)
   83a64:	10c00005 	stb	r3,0(r2)
   83a68:	e0bffd17 	ldw	r2,-12(fp)
   83a6c:	10800044 	addi	r2,r2,1
   83a70:	e0bffd15 	stw	r2,-12(fp)
    *red = *color;   
   83a74:	e0bffd17 	ldw	r2,-12(fp)
   83a78:	10c00003 	ldbu	r3,0(r2)
   83a7c:	e0bffe17 	ldw	r2,-8(fp)
   83a80:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   83a84:	00800044 	movi	r2,1
   83a88:	e0bffa15 	stw	r2,-24(fp)
   83a8c:	00000706 	br	83aac <seperate_color_channels+0x140>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
   83a90:	e0bffe17 	ldw	r2,-8(fp)
   83a94:	10000005 	stb	zero,0(r2)
    *green = 0;
   83a98:	e0bfff17 	ldw	r2,-4(fp)
   83a9c:	10000005 	stb	zero,0(r2)
    *blue = 0;    
   83aa0:	e0800117 	ldw	r2,4(fp)
   83aa4:	10000005 	stb	zero,0(r2)
    return_value = 0;    
   83aa8:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
   83aac:	e0bffa17 	ldw	r2,-24(fp)
}
   83ab0:	e037883a 	mov	sp,fp
   83ab4:	df000017 	ldw	fp,0(sp)
   83ab8:	dec00104 	addi	sp,sp,4
   83abc:	f800283a 	ret

00083ac0 <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

__inline__ int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
   83ac0:	defff904 	addi	sp,sp,-28
   83ac4:	df000615 	stw	fp,24(sp)
   83ac8:	df000604 	addi	fp,sp,24
   83acc:	e13ffc15 	stw	r4,-16(fp)
   83ad0:	2809883a 	mov	r4,r5
   83ad4:	3007883a 	mov	r3,r6
   83ad8:	3805883a 	mov	r2,r7
   83adc:	e13ffd05 	stb	r4,-12(fp)
   83ae0:	e0fffe05 	stb	r3,-8(fp)
   83ae4:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
   83ae8:	e0bffc17 	ldw	r2,-16(fp)
   83aec:	10800418 	cmpnei	r2,r2,16
   83af0:	10001b1e 	bne	r2,zero,83b60 <merge_color_channels+0xa0>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
   83af4:	e0bfff03 	ldbu	r2,-4(fp)
   83af8:	108007cc 	andi	r2,r2,31
   83afc:	1007883a 	mov	r3,r2
   83b00:	e0bffe03 	ldbu	r2,-8(fp)
   83b04:	10800fcc 	andi	r2,r2,63
   83b08:	1004917a 	slli	r2,r2,5
   83b0c:	1884b03a 	or	r2,r3,r2
   83b10:	1007883a 	mov	r3,r2
   83b14:	e0bffd03 	ldbu	r2,-12(fp)
   83b18:	100492fa 	slli	r2,r2,11
   83b1c:	1884b03a 	or	r2,r3,r2
   83b20:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
   83b24:	e0bffb0b 	ldhu	r2,-20(fp)
   83b28:	1007883a 	mov	r3,r2
   83b2c:	e0800117 	ldw	r2,4(fp)
   83b30:	10c00005 	stb	r3,0(r2)
   83b34:	e0800117 	ldw	r2,4(fp)
   83b38:	10800044 	addi	r2,r2,1
   83b3c:	e0800115 	stw	r2,4(fp)
    *color = (temp_color >> 8) & 0xFF;
   83b40:	e0bffb0b 	ldhu	r2,-20(fp)
   83b44:	1004d23a 	srli	r2,r2,8
   83b48:	1007883a 	mov	r3,r2
   83b4c:	e0800117 	ldw	r2,4(fp)
   83b50:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   83b54:	00800044 	movi	r2,1
   83b58:	e0bffa15 	stw	r2,-24(fp)
   83b5c:	00002506 	br	83bf4 <merge_color_channels+0x134>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
   83b60:	e0bffc17 	ldw	r2,-16(fp)
   83b64:	10800620 	cmpeqi	r2,r2,24
   83b68:	1000031e 	bne	r2,zero,83b78 <merge_color_channels+0xb8>
   83b6c:	e0bffc17 	ldw	r2,-16(fp)
   83b70:	10800818 	cmpnei	r2,r2,32
   83b74:	1000121e 	bne	r2,zero,83bc0 <merge_color_channels+0x100>
  {
    *color++ = blue;
   83b78:	e0800117 	ldw	r2,4(fp)
   83b7c:	e0ffff03 	ldbu	r3,-4(fp)
   83b80:	10c00005 	stb	r3,0(r2)
   83b84:	e0800117 	ldw	r2,4(fp)
   83b88:	10800044 	addi	r2,r2,1
   83b8c:	e0800115 	stw	r2,4(fp)
    *color++ = green;
   83b90:	e0800117 	ldw	r2,4(fp)
   83b94:	e0fffe03 	ldbu	r3,-8(fp)
   83b98:	10c00005 	stb	r3,0(r2)
   83b9c:	e0800117 	ldw	r2,4(fp)
   83ba0:	10800044 	addi	r2,r2,1
   83ba4:	e0800115 	stw	r2,4(fp)
    *color = red;
   83ba8:	e0800117 	ldw	r2,4(fp)
   83bac:	e0fffd03 	ldbu	r3,-12(fp)
   83bb0:	10c00005 	stb	r3,0(r2)
    return_value = 1;
   83bb4:	00800044 	movi	r2,1
   83bb8:	e0bffa15 	stw	r2,-24(fp)
   83bbc:	00000d06 	br	83bf4 <merge_color_channels+0x134>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
   83bc0:	e0800117 	ldw	r2,4(fp)
   83bc4:	10000005 	stb	zero,0(r2)
   83bc8:	e0800117 	ldw	r2,4(fp)
   83bcc:	10800044 	addi	r2,r2,1
   83bd0:	e0800115 	stw	r2,4(fp)
    *color++ = 0;
   83bd4:	e0800117 	ldw	r2,4(fp)
   83bd8:	10000005 	stb	zero,0(r2)
   83bdc:	e0800117 	ldw	r2,4(fp)
   83be0:	10800044 	addi	r2,r2,1
   83be4:	e0800115 	stw	r2,4(fp)
    *color = 0;
   83be8:	e0800117 	ldw	r2,4(fp)
   83bec:	10000005 	stb	zero,0(r2)
    return_value = 0;    
   83bf0:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;  
   83bf4:	e0bffa17 	ldw	r2,-24(fp)
}
   83bf8:	e037883a 	mov	sp,fp
   83bfc:	df000017 	ldw	fp,0(sp)
   83c00:	dec00104 	addi	sp,sp,4
   83c04:	f800283a 	ret

00083c08 <read_from_frame>:
*           needed to calculate the new one.
*
******************************************************************/

__inline__ int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
   83c08:	defffa04 	addi	sp,sp,-24
   83c0c:	dfc00515 	stw	ra,20(sp)
   83c10:	df000415 	stw	fp,16(sp)
   83c14:	df000404 	addi	fp,sp,16
   83c18:	e13ffc15 	stw	r4,-16(fp)
   83c1c:	e17ffd15 	stw	r5,-12(fp)
   83c20:	e1bffe15 	stw	r6,-8(fp)
   83c24:	e1ffff15 	stw	r7,-4(fp)
#ifdef LT24
	printf("read_from_frame is not implemented!\r\n");
   83c28:	010002f4 	movhi	r4,11
   83c2c:	21355c04 	addi	r4,r4,-10896
   83c30:	00893440 	call	89344 <puts>
    return_value = 0; 
  }

  return return_value;
#endif
}
   83c34:	e037883a 	mov	sp,fp
   83c38:	dfc00117 	ldw	ra,4(sp)
   83c3c:	df000017 	ldw	fp,0(sp)
   83c40:	dec00204 	addi	sp,sp,8
   83c44:	f800283a 	ret

00083c48 <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

__inline__ int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
   83c48:	defff304 	addi	sp,sp,-52
   83c4c:	dfc00c15 	stw	ra,48(sp)
   83c50:	df000b15 	stw	fp,44(sp)
   83c54:	df000b04 	addi	fp,sp,44
   83c58:	e13ffc15 	stw	r4,-16(fp)
   83c5c:	e17ffd15 	stw	r5,-12(fp)
   83c60:	e1bffe15 	stw	r6,-8(fp)
   83c64:	3805883a 	mov	r2,r7
   83c68:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
   83c6c:	e0bffe17 	ldw	r2,-8(fp)
   83c70:	10bfffd8 	cmpnei	r2,r2,-1
   83c74:	10000c1e 	bne	r2,zero,83ca8 <alpha_blending+0x60>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
   83c78:	e0fffb04 	addi	r3,fp,-20
   83c7c:	e0bffb44 	addi	r2,fp,-19
   83c80:	e13ffb84 	addi	r4,fp,-18
   83c84:	d9000015 	stw	r4,0(sp)
   83c88:	e1000517 	ldw	r4,20(fp)
   83c8c:	d9000115 	stw	r4,4(sp)
   83c90:	e13ffc17 	ldw	r4,-16(fp)
   83c94:	e17ffd17 	ldw	r5,-12(fp)
   83c98:	180d883a 	mov	r6,r3
   83c9c:	100f883a 	mov	r7,r2
   83ca0:	0083c080 	call	83c08 <read_from_frame>
   83ca4:	00000a06 	br	83cd0 <alpha_blending+0x88>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
   83ca8:	e0800517 	ldw	r2,20(fp)
   83cac:	11000017 	ldw	r4,0(r2)
   83cb0:	e17ffe04 	addi	r5,fp,-8
   83cb4:	e0fffb04 	addi	r3,fp,-20
   83cb8:	e0bffb44 	addi	r2,fp,-19
   83cbc:	e1bffb84 	addi	r6,fp,-18
   83cc0:	d9800015 	stw	r6,0(sp)
   83cc4:	180d883a 	mov	r6,r3
   83cc8:	100f883a 	mov	r7,r2
   83ccc:	008396c0 	call	8396c <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
   83cd0:	e0800217 	ldw	r2,8(fp)
   83cd4:	10800003 	ldbu	r2,0(r2)
   83cd8:	10c03fcc 	andi	r3,r2,255
   83cdc:	e0bfff03 	ldbu	r2,-4(fp)
   83ce0:	1887383a 	mul	r3,r3,r2
   83ce4:	e0bffb03 	ldbu	r2,-20(fp)
   83ce8:	11003fcc 	andi	r4,r2,255
   83cec:	e0bfff03 	ldbu	r2,-4(fp)
   83cf0:	01403fc4 	movi	r5,255
   83cf4:	2885c83a 	sub	r2,r5,r2
   83cf8:	2085383a 	mul	r2,r4,r2
   83cfc:	1885883a 	add	r2,r3,r2
   83d00:	1009883a 	mov	r4,r2
   83d04:	01403fc4 	movi	r5,255
   83d08:	00882800 	call	88280 <__divsi3>
   83d0c:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
   83d10:	e0800317 	ldw	r2,12(fp)
   83d14:	10800003 	ldbu	r2,0(r2)
   83d18:	10c03fcc 	andi	r3,r2,255
   83d1c:	e0bfff03 	ldbu	r2,-4(fp)
   83d20:	1887383a 	mul	r3,r3,r2
   83d24:	e0bffb43 	ldbu	r2,-19(fp)
   83d28:	11003fcc 	andi	r4,r2,255
   83d2c:	e0bfff03 	ldbu	r2,-4(fp)
   83d30:	01403fc4 	movi	r5,255
   83d34:	2885c83a 	sub	r2,r5,r2
   83d38:	2085383a 	mul	r2,r4,r2
   83d3c:	1885883a 	add	r2,r3,r2
   83d40:	1009883a 	mov	r4,r2
   83d44:	01403fc4 	movi	r5,255
   83d48:	00882800 	call	88280 <__divsi3>
   83d4c:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
   83d50:	e0800417 	ldw	r2,16(fp)
   83d54:	10800003 	ldbu	r2,0(r2)
   83d58:	10c03fcc 	andi	r3,r2,255
   83d5c:	e0bfff03 	ldbu	r2,-4(fp)
   83d60:	1887383a 	mul	r3,r3,r2
   83d64:	e0bffb83 	ldbu	r2,-18(fp)
   83d68:	11003fcc 	andi	r4,r2,255
   83d6c:	e0bfff03 	ldbu	r2,-4(fp)
   83d70:	01403fc4 	movi	r5,255
   83d74:	2885c83a 	sub	r2,r5,r2
   83d78:	2085383a 	mul	r2,r4,r2
   83d7c:	1885883a 	add	r2,r3,r2
   83d80:	1009883a 	mov	r4,r2
   83d84:	01403fc4 	movi	r5,255
   83d88:	00882800 	call	88280 <__divsi3>
   83d8c:	e0bffa15 	stw	r2,-24(fp)
  

  if(display->color_depth == 16)
   83d90:	e0800517 	ldw	r2,20(fp)
   83d94:	10800017 	ldw	r2,0(r2)
   83d98:	10800418 	cmpnei	r2,r2,16
   83d9c:	1000181e 	bne	r2,zero,83e00 <alpha_blending+0x1b8>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
   83da0:	e0bff817 	ldw	r2,-32(fp)
   83da4:	10c00830 	cmpltui	r3,r2,32
   83da8:	1800011e 	bne	r3,zero,83db0 <alpha_blending+0x168>
   83dac:	008007c4 	movi	r2,31
   83db0:	1007883a 	mov	r3,r2
   83db4:	e0800217 	ldw	r2,8(fp)
   83db8:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
   83dbc:	e0bff917 	ldw	r2,-28(fp)
   83dc0:	10c01030 	cmpltui	r3,r2,64
   83dc4:	1800011e 	bne	r3,zero,83dcc <alpha_blending+0x184>
   83dc8:	00800fc4 	movi	r2,63
   83dcc:	1007883a 	mov	r3,r2
   83dd0:	e0800317 	ldw	r2,12(fp)
   83dd4:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
   83dd8:	e0bffa17 	ldw	r2,-24(fp)
   83ddc:	10c00830 	cmpltui	r3,r2,32
   83de0:	1800011e 	bne	r3,zero,83de8 <alpha_blending+0x1a0>
   83de4:	008007c4 	movi	r2,31
   83de8:	1007883a 	mov	r3,r2
   83dec:	e0800417 	ldw	r2,16(fp)
   83df0:	10c00005 	stb	r3,0(r2)
    return_value = 1;        
   83df4:	00800044 	movi	r2,1
   83df8:	e0bff715 	stw	r2,-36(fp)
   83dfc:	00002106 	br	83e84 <alpha_blending+0x23c>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
   83e00:	e0800517 	ldw	r2,20(fp)
   83e04:	10800017 	ldw	r2,0(r2)
   83e08:	10800620 	cmpeqi	r2,r2,24
   83e0c:	1000041e 	bne	r2,zero,83e20 <alpha_blending+0x1d8>
   83e10:	e0800517 	ldw	r2,20(fp)
   83e14:	10800017 	ldw	r2,0(r2)
   83e18:	10800818 	cmpnei	r2,r2,32
   83e1c:	1000181e 	bne	r2,zero,83e80 <alpha_blending+0x238>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
   83e20:	e0bff817 	ldw	r2,-32(fp)
   83e24:	10c04030 	cmpltui	r3,r2,256
   83e28:	1800011e 	bne	r3,zero,83e30 <alpha_blending+0x1e8>
   83e2c:	00803fc4 	movi	r2,255
   83e30:	1007883a 	mov	r3,r2
   83e34:	e0800217 	ldw	r2,8(fp)
   83e38:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
   83e3c:	e0bff917 	ldw	r2,-28(fp)
   83e40:	10c04030 	cmpltui	r3,r2,256
   83e44:	1800011e 	bne	r3,zero,83e4c <alpha_blending+0x204>
   83e48:	00803fc4 	movi	r2,255
   83e4c:	1007883a 	mov	r3,r2
   83e50:	e0800317 	ldw	r2,12(fp)
   83e54:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
   83e58:	e0bffa17 	ldw	r2,-24(fp)
   83e5c:	10c04030 	cmpltui	r3,r2,256
   83e60:	1800011e 	bne	r3,zero,83e68 <alpha_blending+0x220>
   83e64:	00803fc4 	movi	r2,255
   83e68:	1007883a 	mov	r3,r2
   83e6c:	e0800417 	ldw	r2,16(fp)
   83e70:	10c00005 	stb	r3,0(r2)
    return_value = 1;            
   83e74:	00800044 	movi	r2,1
   83e78:	e0bff715 	stw	r2,-36(fp)
   83e7c:	00000106 	br	83e84 <alpha_blending+0x23c>
  }
  else
  {
    return_value = 0;     
   83e80:	e03ff715 	stw	zero,-36(fp)
  }  
 
  return return_value;
   83e84:	e0bff717 	ldw	r2,-36(fp)
} 
   83e88:	e037883a 	mov	sp,fp
   83e8c:	dfc00117 	ldw	ra,4(sp)
   83e90:	df000017 	ldw	fp,0(sp)
   83e94:	dec00204 	addi	sp,sp,8
   83e98:	f800283a 	ret

00083e9c <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
   83e9c:	defff004 	addi	sp,sp,-64
   83ea0:	dfc00f15 	stw	ra,60(sp)
   83ea4:	df000e15 	stw	fp,56(sp)
   83ea8:	df000e04 	addi	fp,sp,56
   83eac:	e13ffc15 	stw	r4,-16(fp)
   83eb0:	e17ffd15 	stw	r5,-12(fp)
   83eb4:	e1bffe15 	stw	r6,-8(fp)
   83eb8:	3805883a 	mov	r2,r7
   83ebc:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
   83ec0:	e0bfff07 	ldb	r2,-4(fp)
   83ec4:	10bff7c4 	addi	r2,r2,-33
   83ec8:	1004917a 	slli	r2,r2,5
   83ecc:	e0c00317 	ldw	r3,12(fp)
   83ed0:	1885883a 	add	r2,r3,r2
   83ed4:	10800617 	ldw	r2,24(r2)
   83ed8:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
   83edc:	e0800417 	ldw	r2,16(fp)
   83ee0:	11000017 	ldw	r4,0(r2)
   83ee4:	e17ffe04 	addi	r5,fp,-8
   83ee8:	e0fff904 	addi	r3,fp,-28
   83eec:	e0bff984 	addi	r2,fp,-26
   83ef0:	e1bff944 	addi	r6,fp,-27
   83ef4:	d9800015 	stw	r6,0(sp)
   83ef8:	180d883a 	mov	r6,r3
   83efc:	100f883a 	mov	r7,r2
   83f00:	008396c0 	call	8396c <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
   83f04:	e03ff615 	stw	zero,-40(fp)
   83f08:	00004606 	br	84024 <vid_print_char_alpha+0x188>
    for (j = 0; j < font[character-33].bounds_width; j++) {
   83f0c:	e03ff715 	stw	zero,-36(fp)
   83f10:	00003906 	br	83ff8 <vid_print_char_alpha+0x15c>
      red = original_red;
   83f14:	e0bff903 	ldbu	r2,-28(fp)
   83f18:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
   83f1c:	e0bff983 	ldbu	r2,-26(fp)
   83f20:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
   83f24:	e0bff943 	ldbu	r2,-27(fp)
   83f28:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
   83f2c:	e0fffc17 	ldw	r3,-16(fp)
   83f30:	e0bff717 	ldw	r2,-36(fp)
   83f34:	1889883a 	add	r4,r3,r2
   83f38:	e0fffd17 	ldw	r3,-12(fp)
   83f3c:	e0bff617 	ldw	r2,-40(fp)
   83f40:	1887883a 	add	r3,r3,r2
   83f44:	e0bff817 	ldw	r2,-32(fp)
   83f48:	10800003 	ldbu	r2,0(r2)
   83f4c:	10803fcc 	andi	r2,r2,255
   83f50:	e17ff9c4 	addi	r5,fp,-25
   83f54:	d9400015 	stw	r5,0(sp)
   83f58:	e17ffa04 	addi	r5,fp,-24
   83f5c:	d9400115 	stw	r5,4(sp)
   83f60:	e17ffa44 	addi	r5,fp,-23
   83f64:	d9400215 	stw	r5,8(sp)
   83f68:	e1400417 	ldw	r5,16(fp)
   83f6c:	d9400315 	stw	r5,12(sp)
   83f70:	180b883a 	mov	r5,r3
   83f74:	e1800217 	ldw	r6,8(fp)
   83f78:	100f883a 	mov	r7,r2
   83f7c:	0083c480 	call	83c48 <alpha_blending>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
   83f80:	e0800417 	ldw	r2,16(fp)
   83f84:	11000017 	ldw	r4,0(r2)
   83f88:	e0bff9c3 	ldbu	r2,-25(fp)
   83f8c:	11403fcc 	andi	r5,r2,255
   83f90:	e0bffa03 	ldbu	r2,-24(fp)
   83f94:	10c03fcc 	andi	r3,r2,255
   83f98:	e0bffa43 	ldbu	r2,-23(fp)
   83f9c:	10803fcc 	andi	r2,r2,255
   83fa0:	e1bffb04 	addi	r6,fp,-20
   83fa4:	d9800015 	stw	r6,0(sp)
   83fa8:	180d883a 	mov	r6,r3
   83fac:	100f883a 	mov	r7,r2
   83fb0:	0083ac00 	call	83ac0 <merge_color_channels>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);     
   83fb4:	e0fffc17 	ldw	r3,-16(fp)
   83fb8:	e0bff717 	ldw	r2,-36(fp)
   83fbc:	1889883a 	add	r4,r3,r2
   83fc0:	e0fffd17 	ldw	r3,-12(fp)
   83fc4:	e0bff617 	ldw	r2,-40(fp)
   83fc8:	1887883a 	add	r3,r3,r2
   83fcc:	e0bffb17 	ldw	r2,-20(fp)
   83fd0:	180b883a 	mov	r5,r3
   83fd4:	100d883a 	mov	r6,r2
   83fd8:	e1c00417 	ldw	r7,16(fp)
   83fdc:	0081b140 	call	81b14 <vid_set_pixel>

      alpha++;
   83fe0:	e0bff817 	ldw	r2,-32(fp)
   83fe4:	10800044 	addi	r2,r2,1
   83fe8:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
   83fec:	e0bff717 	ldw	r2,-36(fp)
   83ff0:	10800044 	addi	r2,r2,1
   83ff4:	e0bff715 	stw	r2,-36(fp)
   83ff8:	e0fff717 	ldw	r3,-36(fp)
   83ffc:	e0bfff07 	ldb	r2,-4(fp)
   84000:	10bff7c4 	addi	r2,r2,-33
   84004:	1004917a 	slli	r2,r2,5
   84008:	e1000317 	ldw	r4,12(fp)
   8400c:	2085883a 	add	r2,r4,r2
   84010:	10800417 	ldw	r2,16(r2)
   84014:	18bfbf36 	bltu	r3,r2,83f14 <vid_print_char_alpha+0x78>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
   84018:	e0bff617 	ldw	r2,-40(fp)
   8401c:	10800044 	addi	r2,r2,1
   84020:	e0bff615 	stw	r2,-40(fp)
   84024:	e0fff617 	ldw	r3,-40(fp)
   84028:	e0bfff07 	ldb	r2,-4(fp)
   8402c:	10bff7c4 	addi	r2,r2,-33
   84030:	1004917a 	slli	r2,r2,5
   84034:	e1000317 	ldw	r4,12(fp)
   84038:	2085883a 	add	r2,r4,r2
   8403c:	10800517 	ldw	r2,20(r2)
   84040:	18bfb236 	bltu	r3,r2,83f0c <vid_print_char_alpha+0x70>

      alpha++;
    }
  }

  return(0);
   84044:	0005883a 	mov	r2,zero
}
   84048:	e037883a 	mov	sp,fp
   8404c:	dfc00117 	ldw	ra,4(sp)
   84050:	df000017 	ldw	fp,0(sp)
   84054:	dec00204 	addi	sp,sp,8
   84058:	f800283a 	ret

0008405c <vid_string_pixel_length_alpha>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
   8405c:	defffb04 	addi	sp,sp,-20
   84060:	df000415 	stw	fp,16(sp)
   84064:	df000404 	addi	fp,sp,16
   84068:	e13ffe15 	stw	r4,-8(fp)
   8406c:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
   84070:	e03ffc15 	stw	zero,-16(fp)
  int length = 0;
   84074:	e03ffd15 	stw	zero,-12(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
   84078:	e03ffc15 	stw	zero,-16(fp)
   8407c:	00002206 	br	84108 <vid_string_pixel_length_alpha+0xac>
  {
    if( string[i] == ' ' )
   84080:	e0bffc17 	ldw	r2,-16(fp)
   84084:	e0ffff17 	ldw	r3,-4(fp)
   84088:	1885883a 	add	r2,r3,r2
   8408c:	10800003 	ldbu	r2,0(r2)
   84090:	10803fcc 	andi	r2,r2,255
   84094:	1080201c 	xori	r2,r2,128
   84098:	10bfe004 	addi	r2,r2,-128
   8409c:	10800818 	cmpnei	r2,r2,32
   840a0:	1000071e 	bne	r2,zero,840c0 <vid_string_pixel_length_alpha+0x64>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
   840a4:	e0bffe17 	ldw	r2,-8(fp)
   840a8:	10806004 	addi	r2,r2,384
   840ac:	10c00417 	ldw	r3,16(r2)
   840b0:	e0bffd17 	ldw	r2,-12(fp)
   840b4:	1885883a 	add	r2,r3,r2
   840b8:	e0bffd15 	stw	r2,-12(fp)
   840bc:	00000f06 	br	840fc <vid_string_pixel_length_alpha+0xa0>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
   840c0:	e0bffc17 	ldw	r2,-16(fp)
   840c4:	e0ffff17 	ldw	r3,-4(fp)
   840c8:	1885883a 	add	r2,r3,r2
   840cc:	10800003 	ldbu	r2,0(r2)
   840d0:	10803fcc 	andi	r2,r2,255
   840d4:	1080201c 	xori	r2,r2,128
   840d8:	10bfe004 	addi	r2,r2,-128
   840dc:	10bff7c4 	addi	r2,r2,-33
   840e0:	1004917a 	slli	r2,r2,5
   840e4:	e0fffe17 	ldw	r3,-8(fp)
   840e8:	1885883a 	add	r2,r3,r2
   840ec:	10c00417 	ldw	r3,16(r2)
   840f0:	e0bffd17 	ldw	r2,-12(fp)
   840f4:	1885883a 	add	r2,r3,r2
   840f8:	e0bffd15 	stw	r2,-12(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
   840fc:	e0bffc17 	ldw	r2,-16(fp)
   84100:	10800044 	addi	r2,r2,1
   84104:	e0bffc15 	stw	r2,-16(fp)
   84108:	e0bffc17 	ldw	r2,-16(fp)
   8410c:	e0ffff17 	ldw	r3,-4(fp)
   84110:	1885883a 	add	r2,r3,r2
   84114:	10800003 	ldbu	r2,0(r2)
   84118:	10803fcc 	andi	r2,r2,255
   8411c:	1080201c 	xori	r2,r2,128
   84120:	10bfe004 	addi	r2,r2,-128
   84124:	103fd61e 	bne	r2,zero,84080 <vid_string_pixel_length_alpha+0x24>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
   84128:	e0bffd17 	ldw	r2,-12(fp)
}
   8412c:	e037883a 	mov	sp,fp
   84130:	df000017 	ldw	fp,0(sp)
   84134:	dec00104 	addi	sp,sp,4
   84138:	f800283a 	ret

0008413c <GUI_ShowWelcome>:
    RECT rcPaint;
    PALETTE_INFO szPalette[BTN_NUM];
}DESK_INFO;


void GUI_ShowWelcome(alt_video_display *pDisplay){
   8413c:	defff804 	addi	sp,sp,-32
   84140:	dfc00715 	stw	ra,28(sp)
   84144:	df000615 	stw	fp,24(sp)
   84148:	df000604 	addi	fp,sp,24
   8414c:	e13fff15 	stw	r4,-4(fp)
	int x, y;


	x = pDisplay->width / 2 - 60;
   84150:	e0bfff17 	ldw	r2,-4(fp)
   84154:	10800117 	ldw	r2,4(r2)
   84158:	1006d7fa 	srli	r3,r2,31
   8415c:	1885883a 	add	r2,r3,r2
   84160:	1005d07a 	srai	r2,r2,1
   84164:	10bff104 	addi	r2,r2,-60
   84168:	e0bffd15 	stw	r2,-12(fp)
	y = pDisplay->height / 2 - 10;
   8416c:	e0bfff17 	ldw	r2,-4(fp)
   84170:	10800217 	ldw	r2,8(r2)
   84174:	1006d7fa 	srli	r3,r2,31
   84178:	1885883a 	add	r2,r3,r2
   8417c:	1005d07a 	srai	r2,r2,1
   84180:	10bffd84 	addi	r2,r2,-10
   84184:	e0bffe15 	stw	r2,-8(fp)

	vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
   84188:	008002f4 	movhi	r2,11
   8418c:	10b6d904 	addi	r2,r2,-9372
   84190:	d8800015 	stw	r2,0(sp)
   84194:	e0bfff17 	ldw	r2,-4(fp)
   84198:	d8800115 	stw	r2,4(sp)
   8419c:	008002f4 	movhi	r2,11
   841a0:	10b56604 	addi	r2,r2,-10856
   841a4:	d8800215 	stw	r2,8(sp)
   841a8:	e13ffd17 	ldw	r4,-12(fp)
   841ac:	e17ffe17 	ldw	r5,-8(fp)
   841b0:	01803fc4 	movi	r6,255
   841b4:	000f883a 	mov	r7,zero
   841b8:	00837100 	call	83710 <vid_print_string_alpha>
	vid_print_string_alpha(x, y+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch Demo");
   841bc:	e0bffe17 	ldw	r2,-8(fp)
   841c0:	10800584 	addi	r2,r2,22
   841c4:	00c002f4 	movhi	r3,11
   841c8:	18f6d904 	addi	r3,r3,-9372
   841cc:	d8c00015 	stw	r3,0(sp)
   841d0:	e0ffff17 	ldw	r3,-4(fp)
   841d4:	d8c00115 	stw	r3,4(sp)
   841d8:	00c002f4 	movhi	r3,11
   841dc:	18f56804 	addi	r3,r3,-10848
   841e0:	d8c00215 	stw	r3,8(sp)
   841e4:	e13ffd17 	ldw	r4,-12(fp)
   841e8:	100b883a 	mov	r5,r2
   841ec:	01803fc4 	movi	r6,255
   841f0:	000f883a 	mov	r7,zero
   841f4:	00837100 	call	83710 <vid_print_string_alpha>



}
   841f8:	e037883a 	mov	sp,fp
   841fc:	dfc00117 	ldw	ra,4(sp)
   84200:	df000017 	ldw	fp,0(sp)
   84204:	dec00204 	addi	sp,sp,8
   84208:	f800283a 	ret

0008420c <GUI_DeskInit>:

void GUI_DeskInit(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
   8420c:	deffef04 	addi	sp,sp,-68
   84210:	dfc01015 	stw	ra,64(sp)
   84214:	df000f15 	stw	fp,60(sp)
   84218:	df000f04 	addi	fp,sp,60
   8421c:	e13ffe15 	stw	r4,-8(fp)
   84220:	e17fff15 	stw	r5,-4(fp)
    int i;
    RECT rc;
    const int BoxH = 40;
   84224:	00800a04 	movi	r2,40
   84228:	e0bff315 	stw	r2,-52(fp)
    const int BoxW = 40;
   8422c:	00800a04 	movi	r2,40
   84230:	e0bff415 	stw	r2,-48(fp)
    const int GapH = 5;
   84234:	00800144 	movi	r2,5
   84238:	e0bff515 	stw	r2,-44(fp)
    const int DrawBorder = 2;
   8423c:	00800084 	movi	r2,2
   84240:	e0bff615 	stw	r2,-40(fp)
    const int TextW = 0;
   84244:	e03ff715 	stw	zero,-36(fp)
    const int ClearExtraW = 30;
   84248:	00800784 	movi	r2,30
   8424c:	e0bff815 	stw	r2,-32(fp)
    int GapW;

    
    GapW = (pDisplay->width - TextW - ClearExtraW - (BTN_NUM*BoxW))/(BTN_NUM+1);
   84250:	e0bffe17 	ldw	r2,-8(fp)
   84254:	10c00117 	ldw	r3,4(r2)
   84258:	e0bff717 	ldw	r2,-36(fp)
   8425c:	1887c83a 	sub	r3,r3,r2
   84260:	e0bff817 	ldw	r2,-32(fp)
   84264:	1887c83a 	sub	r3,r3,r2
   84268:	e0bff417 	ldw	r2,-48(fp)
   8426c:	10bffee4 	muli	r2,r2,-5
   84270:	1885883a 	add	r2,r3,r2
   84274:	1009883a 	mov	r4,r2
   84278:	01400184 	movi	r5,6
   8427c:	00882800 	call	88280 <__divsi3>
   84280:	e0bff915 	stw	r2,-28(fp)
    //printf("GapW=%d\r\n", GapW);
    rc.top = pDisplay->height - BoxH - GapH;
   84284:	e0bffe17 	ldw	r2,-8(fp)
   84288:	10c00217 	ldw	r3,8(r2)
   8428c:	e0bff317 	ldw	r2,-52(fp)
   84290:	1887c83a 	sub	r3,r3,r2
   84294:	e0bff517 	ldw	r2,-44(fp)
   84298:	1885c83a 	sub	r2,r3,r2
   8429c:	e0bffc15 	stw	r2,-16(fp)
    rc.bottom = rc.top + BoxH;
   842a0:	e0fffc17 	ldw	r3,-16(fp)
   842a4:	e0bff317 	ldw	r2,-52(fp)
   842a8:	1885883a 	add	r2,r3,r2
   842ac:	e0bffd15 	stw	r2,-12(fp)
    rc.left = GapW + TextW + ClearExtraW;
   842b0:	e0fff917 	ldw	r3,-28(fp)
   842b4:	e0bff717 	ldw	r2,-36(fp)
   842b8:	1887883a 	add	r3,r3,r2
   842bc:	e0bff817 	ldw	r2,-32(fp)
   842c0:	1885883a 	add	r2,r3,r2
   842c4:	e0bffa15 	stw	r2,-24(fp)
    rc.right = rc.left + BoxW;
   842c8:	e0fffa17 	ldw	r3,-24(fp)
   842cc:	e0bff417 	ldw	r2,-48(fp)
   842d0:	1885883a 	add	r2,r3,r2
   842d4:	e0bffb15 	stw	r2,-20(fp)
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
   842d8:	e0bfff17 	ldw	r2,-4(fp)
   842dc:	10c00104 	addi	r3,r2,4
   842e0:	e0bffe17 	ldw	r2,-8(fp)
   842e4:	11000117 	ldw	r4,4(r2)
   842e8:	e0bff617 	ldw	r2,-40(fp)
   842ec:	2085c83a 	sub	r2,r4,r2
   842f0:	e17ffc17 	ldw	r5,-16(fp)
   842f4:	e13ff617 	ldw	r4,-40(fp)
   842f8:	2909c83a 	sub	r4,r5,r4
   842fc:	d9000015 	stw	r4,0(sp)
   84300:	1809883a 	mov	r4,r3
   84304:	e17ff617 	ldw	r5,-40(fp)
   84308:	100d883a 	mov	r6,r2
   8430c:	e1fff617 	ldw	r7,-40(fp)
   84310:	00802c80 	call	802c8 <RectSet>
    
    for(i=0;i<BTN_NUM;i++){
   84314:	e03ff215 	stw	zero,-56(fp)
   84318:	00002206 	br	843a4 <GUI_DeskInit+0x198>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
   8431c:	e0bff217 	ldw	r2,-56(fp)
   84320:	10800044 	addi	r2,r2,1
   84324:	10800524 	muli	r2,r2,20
   84328:	e0ffff17 	ldw	r3,-4(fp)
   8432c:	1887883a 	add	r3,r3,r2
   84330:	e0bffa04 	addi	r2,fp,-24
   84334:	1809883a 	mov	r4,r3
   84338:	100b883a 	mov	r5,r2
   8433c:	00804340 	call	80434 <RectCopy>
        pDeskInfo->szPalette[i].color = szPallete[i];
   84340:	00c002f4 	movhi	r3,11
   84344:	18fdbf04 	addi	r3,r3,-2308
   84348:	e0bff217 	ldw	r2,-56(fp)
   8434c:	1085883a 	add	r2,r2,r2
   84350:	1085883a 	add	r2,r2,r2
   84354:	1885883a 	add	r2,r3,r2
   84358:	10800017 	ldw	r2,0(r2)
   8435c:	1007883a 	mov	r3,r2
   84360:	e13fff17 	ldw	r4,-4(fp)
   84364:	e0bff217 	ldw	r2,-56(fp)
   84368:	10800524 	muli	r2,r2,20
   8436c:	2085883a 	add	r2,r4,r2
   84370:	10800904 	addi	r2,r2,36
   84374:	10c00015 	stw	r3,0(r2)
        RectOffset(&rc, BoxW+GapW, 0);
   84378:	e0fff417 	ldw	r3,-48(fp)
   8437c:	e0bff917 	ldw	r2,-28(fp)
   84380:	1885883a 	add	r2,r3,r2
   84384:	e0fffa04 	addi	r3,fp,-24
   84388:	1809883a 	mov	r4,r3
   8438c:	100b883a 	mov	r5,r2
   84390:	000d883a 	mov	r6,zero
   84394:	00803ac0 	call	803ac <RectOffset>
    rc.right = rc.left + BoxW;
    
    // desk drawing area    
    RectSet(&pDeskInfo->rcPaint, DrawBorder, pDisplay->width-DrawBorder, DrawBorder, rc.top - DrawBorder);
    
    for(i=0;i<BTN_NUM;i++){
   84398:	e0bff217 	ldw	r2,-56(fp)
   8439c:	10800044 	addi	r2,r2,1
   843a0:	e0bff215 	stw	r2,-56(fp)
   843a4:	e0bff217 	ldw	r2,-56(fp)
   843a8:	10800150 	cmplti	r2,r2,5
   843ac:	103fdb1e 	bne	r2,zero,8431c <GUI_DeskInit+0x110>
        RectCopy(&pDeskInfo->szPalette[i].rc, &rc);
        pDeskInfo->szPalette[i].color = szPallete[i];
        RectOffset(&rc, BoxW+GapW, 0);
    }
    pDeskInfo->szPalette[BTN_CLEAR].rc.left -= ClearExtraW;
   843b0:	e0bfff17 	ldw	r2,-4(fp)
   843b4:	10c00517 	ldw	r3,20(r2)
   843b8:	e0bff817 	ldw	r2,-32(fp)
   843bc:	1887c83a 	sub	r3,r3,r2
   843c0:	e0bfff17 	ldw	r2,-4(fp)
   843c4:	10c00515 	stw	r3,20(r2)
    pDeskInfo->Paint_Index = BTN_BLUE;
   843c8:	e0bfff17 	ldw	r2,-4(fp)
   843cc:	00c00084 	movi	r3,2
   843d0:	10c00015 	stw	r3,0(r2)
}
   843d4:	e037883a 	mov	sp,fp
   843d8:	dfc00117 	ldw	ra,4(sp)
   843dc:	df000017 	ldw	fp,0(sp)
   843e0:	dec00204 	addi	sp,sp,8
   843e4:	f800283a 	ret

000843e8 <GUI_CheckButton>:

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
   843e8:	defffa04 	addi	sp,sp,-24
   843ec:	dfc00515 	stw	ra,20(sp)
   843f0:	df000415 	stw	fp,16(sp)
   843f4:	df000404 	addi	fp,sp,16
   843f8:	e13ffe15 	stw	r4,-8(fp)
   843fc:	e17fff15 	stw	r5,-4(fp)
    int ButtonId = BTN_NONE;
   84400:	00800184 	movi	r2,6
   84404:	e0bffc15 	stw	r2,-16(fp)
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
   84408:	e03ffd15 	stw	zero,-12(fp)
   8440c:	00000e06 	br	84448 <GUI_CheckButton+0x60>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
   84410:	e0bffd17 	ldw	r2,-12(fp)
   84414:	10800044 	addi	r2,r2,1
   84418:	10800524 	muli	r2,r2,20
   8441c:	e0fffe17 	ldw	r3,-8(fp)
   84420:	1885883a 	add	r2,r3,r2
   84424:	e13fff17 	ldw	r4,-4(fp)
   84428:	100b883a 	mov	r5,r2
   8442c:	00802040 	call	80204 <IsPtInRect>
   84430:	10000226 	beq	r2,zero,8443c <GUI_CheckButton+0x54>
            ButtonId = i;
   84434:	e0bffd17 	ldw	r2,-12(fp)
   84438:	e0bffc15 	stw	r2,-16(fp)

int GUI_CheckButton(DESK_INFO *pDeskInfo, POINT *pt){
    int ButtonId = BTN_NONE;
    int i;
    
    for(i=0;i<BTN_NUM && (ButtonId == BTN_NONE);i++){
   8443c:	e0bffd17 	ldw	r2,-12(fp)
   84440:	10800044 	addi	r2,r2,1
   84444:	e0bffd15 	stw	r2,-12(fp)
   84448:	e0bffd17 	ldw	r2,-12(fp)
   8444c:	10800148 	cmpgei	r2,r2,5
   84450:	1000031e 	bne	r2,zero,84460 <GUI_CheckButton+0x78>
   84454:	e0bffc17 	ldw	r2,-16(fp)
   84458:	108001a0 	cmpeqi	r2,r2,6
   8445c:	103fec1e 	bne	r2,zero,84410 <GUI_CheckButton+0x28>
        if (IsPtInRect(pt, &pDeskInfo->szPalette[i].rc))
            ButtonId = i;
    }
    return ButtonId;
   84460:	e0bffc17 	ldw	r2,-16(fp)
}
   84464:	e037883a 	mov	sp,fp
   84468:	dfc00117 	ldw	ra,4(sp)
   8446c:	df000017 	ldw	fp,0(sp)
   84470:	dec00204 	addi	sp,sp,8
   84474:	f800283a 	ret

00084478 <GUI_DeskDraw>:

void GUI_DeskDraw(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
   84478:	defff104 	addi	sp,sp,-60
   8447c:	dfc00e15 	stw	ra,56(sp)
   84480:	df000d15 	stw	fp,52(sp)
   84484:	dc400c15 	stw	r17,48(sp)
   84488:	dc000b15 	stw	r16,44(sp)
   8448c:	df000b04 	addi	fp,sp,44
   84490:	e13ffe15 	stw	r4,-8(fp)
   84494:	e17fff15 	stw	r5,-4(fp)
    // show text
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Terasic");
  //  vid_print_string_alpha(pDeskInfo->rcPaint.left, pDeskInfo->szPalette[0].rc.top+22, BLUE_24, BLACK_24, tahomabold_20, pDisplay, "Touch");

    // draw border
    RectCopy(&rc, &pDeskInfo->rcPaint);
   84498:	e0bfff17 	ldw	r2,-4(fp)
   8449c:	10800104 	addi	r2,r2,4
   844a0:	e0fffa04 	addi	r3,fp,-24
   844a4:	1809883a 	mov	r4,r3
   844a8:	100b883a 	mov	r5,r2
   844ac:	00804340 	call	80434 <RectCopy>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
   844b0:	e13ffa17 	ldw	r4,-24(fp)
   844b4:	e17ffc17 	ldw	r5,-16(fp)
   844b8:	e0fffb17 	ldw	r3,-20(fp)
   844bc:	e0bffd17 	ldw	r2,-12(fp)
   844c0:	01804034 	movhi	r6,256
   844c4:	31bfffc4 	addi	r6,r6,-1
   844c8:	d9800015 	stw	r6,0(sp)
   844cc:	d8000115 	stw	zero,4(sp)
   844d0:	e1bffe17 	ldw	r6,-8(fp)
   844d4:	d9800215 	stw	r6,8(sp)
   844d8:	180d883a 	mov	r6,r3
   844dc:	100f883a 	mov	r7,r2
   844e0:	00818d40 	call	818d4 <vid_draw_box>
    

    // draw palette
	active = pDeskInfo->Paint_Index;
   844e4:	e0bfff17 	ldw	r2,-4(fp)
   844e8:	10800017 	ldw	r2,0(r2)
   844ec:	e0bff915 	stw	r2,-28(fp)
    for(i=0;i<BTN_NUM;i++){
   844f0:	e03ff815 	stw	zero,-32(fp)
   844f4:	00006406 	br	84688 <GUI_DeskDraw+0x210>
        RectCopy(&rc, &(pDeskInfo->szPalette[i].rc));
   844f8:	e0bff817 	ldw	r2,-32(fp)
   844fc:	10800044 	addi	r2,r2,1
   84500:	10800524 	muli	r2,r2,20
   84504:	e0ffff17 	ldw	r3,-4(fp)
   84508:	1885883a 	add	r2,r3,r2
   8450c:	e0fffa04 	addi	r3,fp,-24
   84510:	1809883a 	mov	r4,r3
   84514:	100b883a 	mov	r5,r2
   84518:	00804340 	call	80434 <RectCopy>
        if (i == BTN_CLEAR){
   8451c:	e0bff817 	ldw	r2,-32(fp)
   84520:	1000301e 	bne	r2,zero,845e4 <GUI_DeskDraw+0x16c>
            vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_NOT_FILL, pDisplay);
   84524:	e13ffa17 	ldw	r4,-24(fp)
   84528:	e17ffc17 	ldw	r5,-16(fp)
   8452c:	e0fffb17 	ldw	r3,-20(fp)
   84530:	e0bffd17 	ldw	r2,-12(fp)
   84534:	e1ffff17 	ldw	r7,-4(fp)
   84538:	e1bff817 	ldw	r6,-32(fp)
   8453c:	31800524 	muli	r6,r6,20
   84540:	398d883a 	add	r6,r7,r6
   84544:	31800904 	addi	r6,r6,36
   84548:	31800017 	ldw	r6,0(r6)
   8454c:	d9800015 	stw	r6,0(sp)
   84550:	d8000115 	stw	zero,4(sp)
   84554:	e1bffe17 	ldw	r6,-8(fp)
   84558:	d9800215 	stw	r6,8(sp)
   8455c:	180d883a 	mov	r6,r3
   84560:	100f883a 	mov	r7,r2
   84564:	00818d40 	call	818d4 <vid_draw_box>
            vid_print_string_alpha(rc.left+8, rc.top+(RectHeight(&rc)-22)/2, pDeskInfo->szPalette[i].color, BLACK_24, tahomabold_20, pDisplay, "Clear");
   84568:	e0bffa17 	ldw	r2,-24(fp)
   8456c:	14000204 	addi	r16,r2,8
   84570:	e47ffc17 	ldw	r17,-16(fp)
   84574:	e0bffa04 	addi	r2,fp,-24
   84578:	1009883a 	mov	r4,r2
   8457c:	00804cc0 	call	804cc <RectHeight>
   84580:	10bffa84 	addi	r2,r2,-22
   84584:	1006d7fa 	srli	r3,r2,31
   84588:	1885883a 	add	r2,r3,r2
   8458c:	1005d07a 	srai	r2,r2,1
   84590:	8887883a 	add	r3,r17,r2
   84594:	e13fff17 	ldw	r4,-4(fp)
   84598:	e0bff817 	ldw	r2,-32(fp)
   8459c:	10800524 	muli	r2,r2,20
   845a0:	2085883a 	add	r2,r4,r2
   845a4:	10800904 	addi	r2,r2,36
   845a8:	10800017 	ldw	r2,0(r2)
   845ac:	010002f4 	movhi	r4,11
   845b0:	2136d904 	addi	r4,r4,-9372
   845b4:	d9000015 	stw	r4,0(sp)
   845b8:	e13ffe17 	ldw	r4,-8(fp)
   845bc:	d9000115 	stw	r4,4(sp)
   845c0:	010002f4 	movhi	r4,11
   845c4:	21356b04 	addi	r4,r4,-10836
   845c8:	d9000215 	stw	r4,8(sp)
   845cc:	8009883a 	mov	r4,r16
   845d0:	180b883a 	mov	r5,r3
   845d4:	100d883a 	mov	r6,r2
   845d8:	000f883a 	mov	r7,zero
   845dc:	00837100 	call	83710 <vid_print_string_alpha>
   845e0:	00002606 	br	8467c <GUI_DeskDraw+0x204>
        }else{
        	if (active != i){
   845e4:	e0fff917 	ldw	r3,-28(fp)
   845e8:	e0bff817 	ldw	r2,-32(fp)
   845ec:	18801126 	beq	r3,r2,84634 <GUI_DeskDraw+0x1bc>
          		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
   845f0:	e13ffa17 	ldw	r4,-24(fp)
   845f4:	e17ffc17 	ldw	r5,-16(fp)
   845f8:	e0fffb17 	ldw	r3,-20(fp)
   845fc:	e0bffd17 	ldw	r2,-12(fp)
   84600:	d8000015 	stw	zero,0(sp)
   84604:	01800044 	movi	r6,1
   84608:	d9800115 	stw	r6,4(sp)
   8460c:	e1bffe17 	ldw	r6,-8(fp)
   84610:	d9800215 	stw	r6,8(sp)
   84614:	180d883a 	mov	r6,r3
   84618:	100f883a 	mov	r7,r2
   8461c:	00818d40 	call	818d4 <vid_draw_box>
        		RectInflate(&rc, -4, -4);
   84620:	e0bffa04 	addi	r2,fp,-24
   84624:	1009883a 	mov	r4,r2
   84628:	017fff04 	movi	r5,-4
   8462c:	01bfff04 	movi	r6,-4
   84630:	00803240 	call	80324 <RectInflate>
        	}
      		vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, pDeskInfo->szPalette[i].color, DO_FILL, pDisplay);
   84634:	e13ffa17 	ldw	r4,-24(fp)
   84638:	e17ffc17 	ldw	r5,-16(fp)
   8463c:	e0fffb17 	ldw	r3,-20(fp)
   84640:	e0bffd17 	ldw	r2,-12(fp)
   84644:	e1ffff17 	ldw	r7,-4(fp)
   84648:	e1bff817 	ldw	r6,-32(fp)
   8464c:	31800524 	muli	r6,r6,20
   84650:	398d883a 	add	r6,r7,r6
   84654:	31800904 	addi	r6,r6,36
   84658:	31800017 	ldw	r6,0(r6)
   8465c:	d9800015 	stw	r6,0(sp)
   84660:	01800044 	movi	r6,1
   84664:	d9800115 	stw	r6,4(sp)
   84668:	e1bffe17 	ldw	r6,-8(fp)
   8466c:	d9800215 	stw	r6,8(sp)
   84670:	180d883a 	mov	r6,r3
   84674:	100f883a 	mov	r7,r2
   84678:	00818d40 	call	818d4 <vid_draw_box>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, WHITE_24, DO_NOT_FILL, pDisplay);
    

    // draw palette
	active = pDeskInfo->Paint_Index;
    for(i=0;i<BTN_NUM;i++){
   8467c:	e0bff817 	ldw	r2,-32(fp)
   84680:	10800044 	addi	r2,r2,1
   84684:	e0bff815 	stw	r2,-32(fp)
   84688:	e0bff817 	ldw	r2,-32(fp)
   8468c:	10800150 	cmplti	r2,r2,5
   84690:	103f991e 	bne	r2,zero,844f8 <GUI_DeskDraw+0x80>
    //RectCopy(&rc, &pDeskInfo->szPalette[active].rc);
    //vid_print_string_alpha(rc.left+2, rc.top+2, BLACK_24, pDeskInfo->szPalette[active].color, tahomabold_20, pDisplay, "2");
    
        
        
}
   84694:	e037883a 	mov	sp,fp
   84698:	dfc00317 	ldw	ra,12(sp)
   8469c:	df000217 	ldw	fp,8(sp)
   846a0:	dc400117 	ldw	r17,4(sp)
   846a4:	dc000017 	ldw	r16,0(sp)
   846a8:	dec00404 	addi	sp,sp,16
   846ac:	f800283a 	ret

000846b0 <IsContinuedPoint>:

bool IsContinuedPoint(POINT *ptPre, POINT *ptNew){
   846b0:	defffb04 	addi	sp,sp,-20
   846b4:	df000415 	stw	fp,16(sp)
   846b8:	df000404 	addi	fp,sp,16
   846bc:	e13ffe15 	stw	r4,-8(fp)
   846c0:	e17fff15 	stw	r5,-4(fp)
    bool bYes = TRUE;
   846c4:	00800044 	movi	r2,1
   846c8:	e0bffc15 	stw	r2,-16(fp)
    const int nMax = 50;
   846cc:	00800c84 	movi	r2,50
   846d0:	e0bffd15 	stw	r2,-12(fp)
    if (abs(ptPre->x - ptNew->x) > nMax)
   846d4:	e0bffe17 	ldw	r2,-8(fp)
   846d8:	10c00017 	ldw	r3,0(r2)
   846dc:	e0bfff17 	ldw	r2,-4(fp)
   846e0:	10800017 	ldw	r2,0(r2)
   846e4:	1885c83a 	sub	r2,r3,r2
   846e8:	1000010e 	bge	r2,zero,846f0 <IsContinuedPoint+0x40>
   846ec:	0085c83a 	sub	r2,zero,r2
   846f0:	e0fffd17 	ldw	r3,-12(fp)
   846f4:	1880020e 	bge	r3,r2,84700 <IsContinuedPoint+0x50>
        bYes = FALSE;
   846f8:	e03ffc15 	stw	zero,-16(fp)
   846fc:	00000a06 	br	84728 <IsContinuedPoint+0x78>
    else if (abs(ptPre->y - ptNew->y) > nMax)
   84700:	e0bffe17 	ldw	r2,-8(fp)
   84704:	10c00117 	ldw	r3,4(r2)
   84708:	e0bfff17 	ldw	r2,-4(fp)
   8470c:	10800117 	ldw	r2,4(r2)
   84710:	1885c83a 	sub	r2,r3,r2
   84714:	1000010e 	bge	r2,zero,8471c <IsContinuedPoint+0x6c>
   84718:	0085c83a 	sub	r2,zero,r2
   8471c:	e0fffd17 	ldw	r3,-12(fp)
   84720:	1880010e 	bge	r3,r2,84728 <IsContinuedPoint+0x78>
        bYes = FALSE;
   84724:	e03ffc15 	stw	zero,-16(fp)
        
    return bYes;        
   84728:	e0bffc17 	ldw	r2,-16(fp)
        
}
   8472c:	e037883a 	mov	sp,fp
   84730:	df000017 	ldw	fp,0(sp)
   84734:	dec00104 	addi	sp,sp,4
   84738:	f800283a 	ret

0008473c <GUI_ClearPaintArea>:



void GUI_ClearPaintArea(alt_video_display *pDisplay, DESK_INFO *pDeskInfo){
   8473c:	defff504 	addi	sp,sp,-44
   84740:	dfc00a15 	stw	ra,40(sp)
   84744:	df000915 	stw	fp,36(sp)
   84748:	df000904 	addi	fp,sp,36
   8474c:	e13ffe15 	stw	r4,-8(fp)
   84750:	e17fff15 	stw	r5,-4(fp)
    RECT rc;
    RectCopy(&rc, &pDeskInfo->rcPaint);
   84754:	e0bfff17 	ldw	r2,-4(fp)
   84758:	10800104 	addi	r2,r2,4
   8475c:	e13ffa04 	addi	r4,fp,-24
   84760:	100b883a 	mov	r5,r2
   84764:	00804340 	call	80434 <RectCopy>
    RectInflate(&rc, -1, -1);
   84768:	e13ffa04 	addi	r4,fp,-24
   8476c:	017fffc4 	movi	r5,-1
   84770:	01bfffc4 	movi	r6,-1
   84774:	00803240 	call	80324 <RectInflate>
    vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
   84778:	e13ffa17 	ldw	r4,-24(fp)
   8477c:	e17ffc17 	ldw	r5,-16(fp)
   84780:	e0fffb17 	ldw	r3,-20(fp)
   84784:	e0bffd17 	ldw	r2,-12(fp)
   84788:	d8000015 	stw	zero,0(sp)
   8478c:	01800044 	movi	r6,1
   84790:	d9800115 	stw	r6,4(sp)
   84794:	e1bffe17 	ldw	r6,-8(fp)
   84798:	d9800215 	stw	r6,8(sp)
   8479c:	180d883a 	mov	r6,r3
   847a0:	100f883a 	mov	r7,r2
   847a4:	00818d40 	call	818d4 <vid_draw_box>
    //
  //  RectCopy(&rc, &pDeskInfo->szPalette[BTN_GESTRUE].rc);
  //  vid_draw_box (rc.left, rc.top, rc.right, rc.bottom, BLACK_24, DO_FILL, pDisplay);
}
   847a8:	e037883a 	mov	sp,fp
   847ac:	dfc00117 	ldw	ra,4(sp)
   847b0:	df000017 	ldw	fp,0(sp)
   847b4:	dec00204 	addi	sp,sp,8
   847b8:	f800283a 	ret

000847bc <GUI>:

//void GUI(MTC_INFO *pTouch){
void GUI(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
   847bc:	deffd004 	addi	sp,sp,-192
   847c0:	dfc02f15 	stw	ra,188(sp)
   847c4:	df002e15 	stw	fp,184(sp)
   847c8:	df002e04 	addi	fp,sp,184
   847cc:	e13ffe15 	stw	r4,-8(fp)
   847d0:	e17fff15 	stw	r5,-4(fp)
    // video
    DESK_INFO DeskInfo;
    int X, Y;
    POINT Pt;
    const int nDotSize = DOT_SIZE;
   847d4:	00800144 	movi	r2,5
   847d8:	e0bfd615 	stw	r2,-168(fp)
    


    
    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
   847dc:	e13ffe17 	ldw	r4,-8(fp)
   847e0:	000b883a 	mov	r5,zero
   847e4:	00810700 	call	81070 <vid_clean_screen>
    
    // Show Terasic Welcome
    GUI_ShowWelcome(pDisplay);
   847e8:	e13ffe17 	ldw	r4,-8(fp)
   847ec:	008413c0 	call	8413c <GUI_ShowWelcome>
    usleep(1*1000*1000);
   847f0:	010003f4 	movhi	r4,15
   847f4:	21109004 	addi	r4,r4,16960
   847f8:	0091a700 	call	91a70 <usleep>
    vid_clean_screen(pDisplay, BLACK_24);
   847fc:	e13ffe17 	ldw	r4,-8(fp)
   84800:	000b883a 	mov	r5,zero
   84804:	00810700 	call	81070 <vid_clean_screen>

   
    GUI_DeskInit(pDisplay, &DeskInfo);
   84808:	e0bfd804 	addi	r2,fp,-160
   8480c:	e13ffe17 	ldw	r4,-8(fp)
   84810:	100b883a 	mov	r5,r2
   84814:	008420c0 	call	8420c <GUI_DeskInit>
    GUI_DeskDraw(pDisplay, &DeskInfo);
   84818:	e0bfd804 	addi	r2,fp,-160
   8481c:	e13ffe17 	ldw	r4,-8(fp)
   84820:	100b883a 	mov	r5,r2
   84824:	00844780 	call	84478 <GUI_DeskDraw>
    
   // VIPFR_ActiveDrawFrame(pReader);
    
    RectCopy(&rcTouch, &DeskInfo.rcPaint);
   84828:	e0fffa04 	addi	r3,fp,-24
   8482c:	e0bfd804 	addi	r2,fp,-160
   84830:	10800104 	addi	r2,r2,4
   84834:	1809883a 	mov	r4,r3
   84838:	100b883a 	mov	r5,r2
   8483c:	00804340 	call	80434 <RectCopy>
    RectInflate(&rcTouch, -nDotSize-2, -nDotSize-2);
   84840:	00ffff84 	movi	r3,-2
   84844:	e0bfd617 	ldw	r2,-168(fp)
   84848:	1887c83a 	sub	r3,r3,r2
   8484c:	013fff84 	movi	r4,-2
   84850:	e0bfd617 	ldw	r2,-168(fp)
   84854:	2085c83a 	sub	r2,r4,r2
   84858:	e13ffa04 	addi	r4,fp,-24
   8485c:	180b883a 	mov	r5,r3
   84860:	100d883a 	mov	r6,r2
   84864:	00803240 	call	80324 <RectInflate>
    
    ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
   84868:	e0bfd817 	ldw	r2,-160(fp)
   8486c:	10800524 	muli	r2,r2,20
   84870:	e0ffd404 	addi	r3,fp,-176
   84874:	1885883a 	add	r2,r3,r2
   84878:	10800d04 	addi	r2,r2,52
   8487c:	10800017 	ldw	r2,0(r2)
   84880:	e0bfd415 	stw	r2,-176(fp)
   84884:	00000106 	br	8488c <GUI+0xd0>
                            Touch_EmptyFifo(pTouch);
                        }
                    }
                }
            } // if touch
        } // while
   84888:	0001883a 	nop
  //  printf("ContinuedTime=%d\r\n", ContinuedTime);
   // PtSet(&ptGesture, DeskInfo.szPalette[BTN_GESTRUE].rc.left+5, DeskInfo.szPalette[BTN_GESTRUE].rc.top+5);

    while(1){
            // touch
            if (Touch_GetXY(pTouch, &X, &Y)){
   8488c:	e0fff604 	addi	r3,fp,-40
   84890:	e0bff704 	addi	r2,fp,-36
   84894:	e13fff17 	ldw	r4,-4(fp)
   84898:	180b883a 	mov	r5,r3
   8489c:	100d883a 	mov	r6,r2
   848a0:	0086b000 	call	86b00 <Touch_GetXY>
   848a4:	103ff826 	beq	r2,zero,84888 <GUI+0xcc>
           //     IOWR(LED_BASE, 0x00, LedMask);
             //   LedMask <<= 1;
             //   if (LedMask == 0x00)
               //     LedMask = 0x01;
                //
                printf("x=%d, y=%d\r\n", X,Y);
   848a8:	e0fff617 	ldw	r3,-40(fp)
   848ac:	e0bff717 	ldw	r2,-36(fp)
   848b0:	010002f4 	movhi	r4,11
   848b4:	21356d04 	addi	r4,r4,-10828
   848b8:	180b883a 	mov	r5,r3
   848bc:	100d883a 	mov	r6,r2
   848c0:	00892840 	call	89284 <printf>
                PtSet(&Pt, X, Y);
   848c4:	e0fff617 	ldw	r3,-40(fp)
   848c8:	e0bff717 	ldw	r2,-36(fp)
   848cc:	e13ff804 	addi	r4,fp,-32
   848d0:	180b883a 	mov	r5,r3
   848d4:	100d883a 	mov	r6,r2
   848d8:	00802880 	call	80288 <PtSet>


             //   printf("t:%d, %d\r\n", (int)alt_nticks(), LastTimePt1);
                //
                if ( IsPtInRect(&Pt, &rcTouch)){
   848dc:	e0fff804 	addi	r3,fp,-32
   848e0:	e0bffa04 	addi	r2,fp,-24
   848e4:	1809883a 	mov	r4,r3
   848e8:	100b883a 	mov	r5,r2
   848ec:	00802040 	call	80204 <IsPtInRect>
   848f0:	10000c26 	beq	r2,zero,84924 <GUI+0x168>

                    vid_draw_circle(Pt.x, Pt.y, nDotSize, ColorPen, DO_FILL, pDisplay);
   848f4:	e0fff817 	ldw	r3,-32(fp)
   848f8:	e0bff917 	ldw	r2,-28(fp)
   848fc:	01000044 	movi	r4,1
   84900:	d9000015 	stw	r4,0(sp)
   84904:	e13ffe17 	ldw	r4,-8(fp)
   84908:	d9000115 	stw	r4,4(sp)
   8490c:	1809883a 	mov	r4,r3
   84910:	100b883a 	mov	r5,r2
   84914:	e1bfd617 	ldw	r6,-168(fp)
   84918:	e1ffd417 	ldw	r7,-176(fp)
   8491c:	00820f40 	call	820f4 <vid_draw_circle>
                            Touch_EmptyFifo(pTouch);
                        }
                    }
                }
            } // if touch
        } // while
   84920:	003fd906 	br	84888 <GUI+0xcc>
                //
                if ( IsPtInRect(&Pt, &rcTouch)){

                    vid_draw_circle(Pt.x, Pt.y, nDotSize, ColorPen, DO_FILL, pDisplay);
                   // VIPFR_ActiveDrawFrame(pReader);
                }else if (GUI_CheckButton(&DeskInfo, &Pt) == BTN_CLEAR){
   84924:	e0ffd804 	addi	r3,fp,-160
   84928:	e0bff804 	addi	r2,fp,-32
   8492c:	1809883a 	mov	r4,r3
   84930:	100b883a 	mov	r5,r2
   84934:	00843e80 	call	843e8 <GUI_CheckButton>
   84938:	1000071e 	bne	r2,zero,84958 <GUI+0x19c>
                    GUI_ClearPaintArea(pDisplay, &DeskInfo);
   8493c:	e0bfd804 	addi	r2,fp,-160
   84940:	e13ffe17 	ldw	r4,-8(fp)
   84944:	100b883a 	mov	r5,r2
   84948:	008473c0 	call	8473c <GUI_ClearPaintArea>
                  //  VIPFR_ActiveDrawFrame(pReader);
                    Touch_EmptyFifo(pTouch);
   8494c:	e13fff17 	ldw	r4,-4(fp)
   84950:	0086ac80 	call	86ac8 <Touch_EmptyFifo>
                            Touch_EmptyFifo(pTouch);
                        }
                    }
                }
            } // if touch
        } // while
   84954:	003fcc06 	br	84888 <GUI+0xcc>
                }else if (GUI_CheckButton(&DeskInfo, &Pt) == BTN_CLEAR){
                    GUI_ClearPaintArea(pDisplay, &DeskInfo);
                  //  VIPFR_ActiveDrawFrame(pReader);
                    Touch_EmptyFifo(pTouch);
                }else {
                    ButtonId = GUI_CheckButton(&DeskInfo, &Pt);
   84958:	e0ffd804 	addi	r3,fp,-160
   8495c:	e0bff804 	addi	r2,fp,-32
   84960:	1809883a 	mov	r4,r3
   84964:	100b883a 	mov	r5,r2
   84968:	00843e80 	call	843e8 <GUI_CheckButton>
   8496c:	e0bfd715 	stw	r2,-164(fp)
                    UpdatePalette = FALSE;
   84970:	e03fd515 	stw	zero,-172(fp)
                    if (ButtonId != BTN_NONE && ButtonId != BTN_CLEAR){
   84974:	e0bfd717 	ldw	r2,-164(fp)
   84978:	108001a0 	cmpeqi	r2,r2,6
   8497c:	103fc21e 	bne	r2,zero,84888 <GUI+0xcc>
   84980:	e0bfd717 	ldw	r2,-164(fp)
   84984:	103fc026 	beq	r2,zero,84888 <GUI+0xcc>
                        // chang draw color
                        if ( ButtonId != DeskInfo.Paint_Index ){
   84988:	e0ffd817 	ldw	r3,-160(fp)
   8498c:	e0bfd717 	ldw	r2,-164(fp)
   84990:	18800426 	beq	r3,r2,849a4 <GUI+0x1e8>
                            DeskInfo.Paint_Index = ButtonId;
   84994:	e0bfd717 	ldw	r2,-164(fp)
   84998:	e0bfd815 	stw	r2,-160(fp)
                            UpdatePalette = TRUE;
   8499c:	00800044 	movi	r2,1
   849a0:	e0bfd515 	stw	r2,-172(fp)
                            //
                        }

                        if (UpdatePalette){
   849a4:	e0bfd517 	ldw	r2,-172(fp)
   849a8:	103fb726 	beq	r2,zero,84888 <GUI+0xcc>
                            ColorPen = DeskInfo.szPalette[DeskInfo.Paint_Index].color;
   849ac:	e0bfd817 	ldw	r2,-160(fp)
   849b0:	10800524 	muli	r2,r2,20
   849b4:	e0ffd404 	addi	r3,fp,-176
   849b8:	1885883a 	add	r2,r3,r2
   849bc:	10800d04 	addi	r2,r2,52
   849c0:	10800017 	ldw	r2,0(r2)
   849c4:	e0bfd415 	stw	r2,-176(fp)
                            GUI_DeskDraw(pDisplay, &DeskInfo);
   849c8:	e0bfd804 	addi	r2,fp,-160
   849cc:	e13ffe17 	ldw	r4,-8(fp)
   849d0:	100b883a 	mov	r5,r2
   849d4:	00844780 	call	84478 <GUI_DeskDraw>
                        //    VIPFR_ActiveDrawFrame(pReader);
                            Touch_EmptyFifo(pTouch);
   849d8:	e13fff17 	ldw	r4,-4(fp)
   849dc:	0086ac80 	call	86ac8 <Touch_EmptyFifo>
                        }
                    }
                }
            } // if touch
        } // while
   849e0:	003fa906 	br	84888 <GUI+0xcc>

000849e4 <GUI_ShowInfo>:
    
}



void GUI_ShowInfo(alt_video_display *pDisplay, char *pText){
   849e4:	defff904 	addi	sp,sp,-28
   849e8:	dfc00615 	stw	ra,24(sp)
   849ec:	df000515 	stw	fp,20(sp)
   849f0:	df000504 	addi	fp,sp,20
   849f4:	e13ffe15 	stw	r4,-8(fp)
   849f8:	e17fff15 	stw	r5,-4(fp)
    static int x=0,y=100;
   // vid_clean_screen(pReader, BLACK_24);
    vid_print_string_alpha(x, y, BLUE_24, BLACK_24, tahomabold_20, pDisplay, pText);
   849fc:	d0ed9617 	ldw	r3,-18856(gp)
   84a00:	d0a00117 	ldw	r2,-32764(gp)
   84a04:	010002f4 	movhi	r4,11
   84a08:	2136d904 	addi	r4,r4,-9372
   84a0c:	d9000015 	stw	r4,0(sp)
   84a10:	e13ffe17 	ldw	r4,-8(fp)
   84a14:	d9000115 	stw	r4,4(sp)
   84a18:	e13fff17 	ldw	r4,-4(fp)
   84a1c:	d9000215 	stw	r4,8(sp)
   84a20:	1809883a 	mov	r4,r3
   84a24:	100b883a 	mov	r5,r2
   84a28:	01803fc4 	movi	r6,255
   84a2c:	000f883a 	mov	r7,zero
   84a30:	00837100 	call	83710 <vid_print_string_alpha>
 //   VIPFR_ActiveDrawFrame(pReader);
}
   84a34:	e037883a 	mov	sp,fp
   84a38:	dfc00117 	ldw	ra,4(sp)
   84a3c:	df000017 	ldw	fp,0(sp)
   84a40:	dec00204 	addi	sp,sp,8
   84a44:	f800283a 	ret

00084a48 <GUI_ShowTouchPoint>:

void GUI_ShowTouchPoint(alt_video_display *pDisplay, int X, int Y, int color){
   84a48:	defff804 	addi	sp,sp,-32
   84a4c:	dfc00715 	stw	ra,28(sp)
   84a50:	df000615 	stw	fp,24(sp)
   84a54:	df000604 	addi	fp,sp,24
   84a58:	e13ffc15 	stw	r4,-16(fp)
   84a5c:	e17ffd15 	stw	r5,-12(fp)
   84a60:	e1bffe15 	stw	r6,-8(fp)
   84a64:	e1ffff15 	stw	r7,-4(fp)
    vid_draw_circle(X, Y, 10, color, DO_FILL, pDisplay);
   84a68:	00800044 	movi	r2,1
   84a6c:	d8800015 	stw	r2,0(sp)
   84a70:	e0bffc17 	ldw	r2,-16(fp)
   84a74:	d8800115 	stw	r2,4(sp)
   84a78:	e13ffd17 	ldw	r4,-12(fp)
   84a7c:	e17ffe17 	ldw	r5,-8(fp)
   84a80:	01800284 	movi	r6,10
   84a84:	e1ffff17 	ldw	r7,-4(fp)
   84a88:	00820f40 	call	820f4 <vid_draw_circle>
   // VIPFR_ActiveDrawFrame(pReader);
}
   84a8c:	e037883a 	mov	sp,fp
   84a90:	dfc00117 	ldw	ra,4(sp)
   84a94:	df000017 	ldw	fp,0(sp)
   84a98:	dec00204 	addi	sp,sp,8
   84a9c:	f800283a 	ret

00084aa0 <ShowInfo>:
#include "simple_graphics.h"
#include "geometry.h"



void ShowInfo(alt_video_display *pDisplay, char *pText){
   84aa0:	defff904 	addi	sp,sp,-28
   84aa4:	dfc00615 	stw	ra,24(sp)
   84aa8:	df000515 	stw	fp,20(sp)
   84aac:	df000504 	addi	fp,sp,20
   84ab0:	e13ffe15 	stw	r4,-8(fp)
   84ab4:	e17fff15 	stw	r5,-4(fp)
    vid_print_string_alpha(1, 1, WHITE_24, BLACK_24, tahomabold_20, pDisplay, pText);
   84ab8:	008002f4 	movhi	r2,11
   84abc:	10b6d904 	addi	r2,r2,-9372
   84ac0:	d8800015 	stw	r2,0(sp)
   84ac4:	e0bffe17 	ldw	r2,-8(fp)
   84ac8:	d8800115 	stw	r2,4(sp)
   84acc:	e0bfff17 	ldw	r2,-4(fp)
   84ad0:	d8800215 	stw	r2,8(sp)
   84ad4:	01000044 	movi	r4,1
   84ad8:	01400044 	movi	r5,1
   84adc:	01804034 	movhi	r6,256
   84ae0:	31bfffc4 	addi	r6,r6,-1
   84ae4:	000f883a 	mov	r7,zero
   84ae8:	00837100 	call	83710 <vid_print_string_alpha>
}
   84aec:	e037883a 	mov	sp,fp
   84af0:	dfc00117 	ldw	ra,4(sp)
   84af4:	df000017 	ldw	fp,0(sp)
   84af8:	dec00204 	addi	sp,sp,8
   84afc:	f800283a 	ret

00084b00 <VPG_XLine>:


void VPG_XLine(alt_video_display *pDisplay){
   84b00:	defffe04 	addi	sp,sp,-8
   84b04:	df000115 	stw	fp,4(sp)
   84b08:	df000104 	addi	fp,sp,4
   84b0c:	e13fff15 	stw	r4,-4(fp)
return ;
   84b10:	0001883a 	nop

    // show text
    ShowInfo(pDisplay, "X Line");


}
   84b14:	e037883a 	mov	sp,fp
   84b18:	df000017 	ldw	fp,0(sp)
   84b1c:	dec00104 	addi	sp,sp,4
   84b20:	f800283a 	ret

00084b24 <VPG_ColorPanel>:


void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
   84b24:	defff204 	addi	sp,sp,-56
   84b28:	dfc00d15 	stw	ra,52(sp)
   84b2c:	df000c15 	stw	fp,48(sp)
   84b30:	df000c04 	addi	fp,sp,48
   84b34:	e13ffe15 	stw	r4,-8(fp)
   84b38:	e17fff15 	stw	r5,-4(fp)
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   84b3c:	e03ff515 	stw	zero,-44(fp)
   84b40:	00001106 	br	84b88 <VPG_ColorPanel+0x64>
        for(x=0;x<pDisplay->width;x++){
   84b44:	e03ff415 	stw	zero,-48(fp)
   84b48:	00000806 	br	84b6c <VPG_ColorPanel+0x48>
        	vid_set_pixel(x,y,Color, pDisplay);
   84b4c:	e13ff417 	ldw	r4,-48(fp)
   84b50:	e17ff517 	ldw	r5,-44(fp)
   84b54:	e1bfff17 	ldw	r6,-4(fp)
   84b58:	e1fffe17 	ldw	r7,-8(fp)
   84b5c:	0081b140 	call	81b14 <vid_set_pixel>
void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84b60:	e0bff417 	ldw	r2,-48(fp)
   84b64:	10800044 	addi	r2,r2,1
   84b68:	e0bff415 	stw	r2,-48(fp)
   84b6c:	e0bffe17 	ldw	r2,-8(fp)
   84b70:	10800117 	ldw	r2,4(r2)
   84b74:	e0fff417 	ldw	r3,-48(fp)
   84b78:	18bff416 	blt	r3,r2,84b4c <VPG_ColorPanel+0x28>

void VPG_ColorPanel(alt_video_display *pDisplay, alt_u32 Color){
    int x, y;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   84b7c:	e0bff517 	ldw	r2,-44(fp)
   84b80:	10800044 	addi	r2,r2,1
   84b84:	e0bff515 	stw	r2,-44(fp)
   84b88:	e0bffe17 	ldw	r2,-8(fp)
   84b8c:	10800217 	ldw	r2,8(r2)
   84b90:	e0fff517 	ldw	r3,-44(fp)
   84b94:	18bfeb16 	blt	r3,r2,84b44 <VPG_ColorPanel+0x20>
        	vid_set_pixel(x,y,Color, pDisplay);
        }
    }

    // show text
    sprintf(szText,"Panel: %08xh", Color);
   84b98:	e0bff604 	addi	r2,fp,-40
   84b9c:	1009883a 	mov	r4,r2
   84ba0:	014002f4 	movhi	r5,11
   84ba4:	29757104 	addi	r5,r5,-10812
   84ba8:	e1bfff17 	ldw	r6,-4(fp)
   84bac:	00894140 	call	89414 <sprintf>
    ShowInfo(pDisplay, szText);
   84bb0:	e0bff604 	addi	r2,fp,-40
   84bb4:	e13ffe17 	ldw	r4,-8(fp)
   84bb8:	100b883a 	mov	r5,r2
   84bbc:	0084aa00 	call	84aa0 <ShowInfo>



}
   84bc0:	e037883a 	mov	sp,fp
   84bc4:	dfc00117 	ldw	ra,4(sp)
   84bc8:	df000017 	ldw	fp,0(sp)
   84bcc:	dec00204 	addi	sp,sp,8
   84bd0:	f800283a 	ret

00084bd4 <VPG_Grid>:

void VPG_Grid(alt_video_display *pDisplay, alt_u8 GridSize){
   84bd4:	defff104 	addi	sp,sp,-60
   84bd8:	dfc00e15 	stw	ra,56(sp)
   84bdc:	df000d15 	stw	fp,52(sp)
   84be0:	df000d04 	addi	fp,sp,52
   84be4:	e13ffe15 	stw	r4,-8(fp)
   84be8:	2805883a 	mov	r2,r5
   84bec:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   84bf0:	e03ff415 	stw	zero,-48(fp)
   84bf4:	00002206 	br	84c80 <VPG_Grid+0xac>
        for(x=0;x<pDisplay->width;x++){
   84bf8:	e03ff315 	stw	zero,-52(fp)
   84bfc:	00001906 	br	84c64 <VPG_Grid+0x90>
            if (x%GridSize == 0 || y%GridSize == 0)
   84c00:	e0bfff03 	ldbu	r2,-4(fp)
   84c04:	e0fff317 	ldw	r3,-52(fp)
   84c08:	1809883a 	mov	r4,r3
   84c0c:	100b883a 	mov	r5,r2
   84c10:	00882d00 	call	882d0 <__modsi3>
   84c14:	10000626 	beq	r2,zero,84c30 <VPG_Grid+0x5c>
   84c18:	e0bfff03 	ldbu	r2,-4(fp)
   84c1c:	e0fff417 	ldw	r3,-48(fp)
   84c20:	1809883a 	mov	r4,r3
   84c24:	100b883a 	mov	r5,r2
   84c28:	00882d00 	call	882d0 <__modsi3>
   84c2c:	1000041e 	bne	r2,zero,84c40 <VPG_Grid+0x6c>
                Value32 = WHITE_24;
   84c30:	00804034 	movhi	r2,256
   84c34:	10bfffc4 	addi	r2,r2,-1
   84c38:	e0bff515 	stw	r2,-44(fp)
   84c3c:	00000106 	br	84c44 <VPG_Grid+0x70>
            else
                Value32 = BLACK_24;
   84c40:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
   84c44:	e13ff317 	ldw	r4,-52(fp)
   84c48:	e17ff417 	ldw	r5,-48(fp)
   84c4c:	e1bff517 	ldw	r6,-44(fp)
   84c50:	e1fffe17 	ldw	r7,-8(fp)
   84c54:	0081b140 	call	81b14 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84c58:	e0bff317 	ldw	r2,-52(fp)
   84c5c:	10800044 	addi	r2,r2,1
   84c60:	e0bff315 	stw	r2,-52(fp)
   84c64:	e0bffe17 	ldw	r2,-8(fp)
   84c68:	10800117 	ldw	r2,4(r2)
   84c6c:	e0fff317 	ldw	r3,-52(fp)
   84c70:	18bfe316 	blt	r3,r2,84c00 <VPG_Grid+0x2c>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   84c74:	e0bff417 	ldw	r2,-48(fp)
   84c78:	10800044 	addi	r2,r2,1
   84c7c:	e0bff415 	stw	r2,-48(fp)
   84c80:	e0bffe17 	ldw	r2,-8(fp)
   84c84:	10800217 	ldw	r2,8(r2)
   84c88:	e0fff417 	ldw	r3,-48(fp)
   84c8c:	18bfda16 	blt	r3,r2,84bf8 <VPG_Grid+0x24>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"Grid%d", GridSize);
   84c90:	e0bfff03 	ldbu	r2,-4(fp)
   84c94:	e0fff604 	addi	r3,fp,-40
   84c98:	1809883a 	mov	r4,r3
   84c9c:	014002f4 	movhi	r5,11
   84ca0:	29757504 	addi	r5,r5,-10796
   84ca4:	100d883a 	mov	r6,r2
   84ca8:	00894140 	call	89414 <sprintf>
    ShowInfo(pDisplay, szText);
   84cac:	e0bff604 	addi	r2,fp,-40
   84cb0:	e13ffe17 	ldw	r4,-8(fp)
   84cb4:	100b883a 	mov	r5,r2
   84cb8:	0084aa00 	call	84aa0 <ShowInfo>

}
   84cbc:	e037883a 	mov	sp,fp
   84cc0:	dfc00117 	ldw	ra,4(sp)
   84cc4:	df000017 	ldw	fp,0(sp)
   84cc8:	dec00204 	addi	sp,sp,8
   84ccc:	f800283a 	ret

00084cd0 <VPG_VGrid>:

void VPG_VGrid(alt_video_display *pDisplay, alt_u8 GridSize){
   84cd0:	defff104 	addi	sp,sp,-60
   84cd4:	dfc00e15 	stw	ra,56(sp)
   84cd8:	df000d15 	stw	fp,52(sp)
   84cdc:	df000d04 	addi	fp,sp,52
   84ce0:	e13ffe15 	stw	r4,-8(fp)
   84ce4:	2805883a 	mov	r2,r5
   84ce8:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   84cec:	e03ff415 	stw	zero,-48(fp)
   84cf0:	00001c06 	br	84d64 <VPG_VGrid+0x94>
        for(x=0;x<pDisplay->width;x++){
   84cf4:	e03ff315 	stw	zero,-52(fp)
   84cf8:	00001306 	br	84d48 <VPG_VGrid+0x78>
            if (x%GridSize == 0)
   84cfc:	e0bfff03 	ldbu	r2,-4(fp)
   84d00:	e0fff317 	ldw	r3,-52(fp)
   84d04:	1809883a 	mov	r4,r3
   84d08:	100b883a 	mov	r5,r2
   84d0c:	00882d00 	call	882d0 <__modsi3>
   84d10:	1000041e 	bne	r2,zero,84d24 <VPG_VGrid+0x54>
                Value32 = WHITE_24;
   84d14:	00804034 	movhi	r2,256
   84d18:	10bfffc4 	addi	r2,r2,-1
   84d1c:	e0bff515 	stw	r2,-44(fp)
   84d20:	00000106 	br	84d28 <VPG_VGrid+0x58>
            else
                Value32 = BLACK_24;
   84d24:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
   84d28:	e13ff317 	ldw	r4,-52(fp)
   84d2c:	e17ff417 	ldw	r5,-48(fp)
   84d30:	e1bff517 	ldw	r6,-44(fp)
   84d34:	e1fffe17 	ldw	r7,-8(fp)
   84d38:	0081b140 	call	81b14 <vid_set_pixel>
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84d3c:	e0bff317 	ldw	r2,-52(fp)
   84d40:	10800044 	addi	r2,r2,1
   84d44:	e0bff315 	stw	r2,-52(fp)
   84d48:	e0bffe17 	ldw	r2,-8(fp)
   84d4c:	10800117 	ldw	r2,4(r2)
   84d50:	e0fff317 	ldw	r3,-52(fp)
   84d54:	18bfe916 	blt	r3,r2,84cfc <VPG_VGrid+0x2c>
    int x,y;
    alt_u32 Value32;
    char szText[32];


    for(y=0;y<pDisplay->height;y++){
   84d58:	e0bff417 	ldw	r2,-48(fp)
   84d5c:	10800044 	addi	r2,r2,1
   84d60:	e0bff415 	stw	r2,-48(fp)
   84d64:	e0bffe17 	ldw	r2,-8(fp)
   84d68:	10800217 	ldw	r2,8(r2)
   84d6c:	e0fff417 	ldw	r3,-48(fp)
   84d70:	18bfe016 	blt	r3,r2,84cf4 <VPG_VGrid+0x24>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"VGrid%d", GridSize);
   84d74:	e0bfff03 	ldbu	r2,-4(fp)
   84d78:	e0fff604 	addi	r3,fp,-40
   84d7c:	1809883a 	mov	r4,r3
   84d80:	014002f4 	movhi	r5,11
   84d84:	29757704 	addi	r5,r5,-10788
   84d88:	100d883a 	mov	r6,r2
   84d8c:	00894140 	call	89414 <sprintf>
    ShowInfo(pDisplay, szText);
   84d90:	e0bff604 	addi	r2,fp,-40
   84d94:	e13ffe17 	ldw	r4,-8(fp)
   84d98:	100b883a 	mov	r5,r2
   84d9c:	0084aa00 	call	84aa0 <ShowInfo>

}
   84da0:	e037883a 	mov	sp,fp
   84da4:	dfc00117 	ldw	ra,4(sp)
   84da8:	df000017 	ldw	fp,0(sp)
   84dac:	dec00204 	addi	sp,sp,8
   84db0:	f800283a 	ret

00084db4 <VPG_HGrid>:

void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
   84db4:	defff104 	addi	sp,sp,-60
   84db8:	dfc00e15 	stw	ra,56(sp)
   84dbc:	df000d15 	stw	fp,52(sp)
   84dc0:	df000d04 	addi	fp,sp,52
   84dc4:	e13ffe15 	stw	r4,-8(fp)
   84dc8:	2805883a 	mov	r2,r5
   84dcc:	e0bfff05 	stb	r2,-4(fp)
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   84dd0:	e03ff415 	stw	zero,-48(fp)
   84dd4:	00001c06 	br	84e48 <VPG_HGrid+0x94>
        for(x=0;x<pDisplay->width;x++){
   84dd8:	e03ff315 	stw	zero,-52(fp)
   84ddc:	00001306 	br	84e2c <VPG_HGrid+0x78>
            if (y%GridSize == 0)
   84de0:	e0bfff03 	ldbu	r2,-4(fp)
   84de4:	e0fff417 	ldw	r3,-48(fp)
   84de8:	1809883a 	mov	r4,r3
   84dec:	100b883a 	mov	r5,r2
   84df0:	00882d00 	call	882d0 <__modsi3>
   84df4:	1000041e 	bne	r2,zero,84e08 <VPG_HGrid+0x54>
                Value32 = WHITE_24;
   84df8:	00804034 	movhi	r2,256
   84dfc:	10bfffc4 	addi	r2,r2,-1
   84e00:	e0bff515 	stw	r2,-44(fp)
   84e04:	00000106 	br	84e0c <VPG_HGrid+0x58>
            else
                Value32 = BLACK_24;
   84e08:	e03ff515 	stw	zero,-44(fp)
            vid_set_pixel(x,y,Value32, pDisplay);
   84e0c:	e13ff317 	ldw	r4,-52(fp)
   84e10:	e17ff417 	ldw	r5,-48(fp)
   84e14:	e1bff517 	ldw	r6,-44(fp)
   84e18:	e1fffe17 	ldw	r7,-8(fp)
   84e1c:	0081b140 	call	81b14 <vid_set_pixel>
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84e20:	e0bff317 	ldw	r2,-52(fp)
   84e24:	10800044 	addi	r2,r2,1
   84e28:	e0bff315 	stw	r2,-52(fp)
   84e2c:	e0bffe17 	ldw	r2,-8(fp)
   84e30:	10800117 	ldw	r2,4(r2)
   84e34:	e0fff317 	ldw	r3,-52(fp)
   84e38:	18bfe916 	blt	r3,r2,84de0 <VPG_HGrid+0x2c>
void VPG_HGrid(alt_video_display *pDisplay, alt_u8 GridSize){
    int x,y;
    alt_u32 Value32;
    char szText[32];

    for(y=0;y<pDisplay->height;y++){
   84e3c:	e0bff417 	ldw	r2,-48(fp)
   84e40:	10800044 	addi	r2,r2,1
   84e44:	e0bff415 	stw	r2,-48(fp)
   84e48:	e0bffe17 	ldw	r2,-8(fp)
   84e4c:	10800217 	ldw	r2,8(r2)
   84e50:	e0fff417 	ldw	r3,-48(fp)
   84e54:	18bfe016 	blt	r3,r2,84dd8 <VPG_HGrid+0x24>
            vid_set_pixel(x,y,Value32, pDisplay);
        }

    }
    // show text
    sprintf(szText,"HGrid%d", GridSize);
   84e58:	e0bfff03 	ldbu	r2,-4(fp)
   84e5c:	e0fff604 	addi	r3,fp,-40
   84e60:	1809883a 	mov	r4,r3
   84e64:	014002f4 	movhi	r5,11
   84e68:	29757904 	addi	r5,r5,-10780
   84e6c:	100d883a 	mov	r6,r2
   84e70:	00894140 	call	89414 <sprintf>
    ShowInfo(pDisplay, szText);
   84e74:	e0bff604 	addi	r2,fp,-40
   84e78:	e13ffe17 	ldw	r4,-8(fp)
   84e7c:	100b883a 	mov	r5,r2
   84e80:	0084aa00 	call	84aa0 <ShowInfo>

}
   84e84:	e037883a 	mov	sp,fp
   84e88:	dfc00117 	ldw	ra,4(sp)
   84e8c:	df000017 	ldw	fp,0(sp)
   84e90:	dec00204 	addi	sp,sp,8
   84e94:	f800283a 	ret

00084e98 <VPG_ColorBar>:




void VPG_ColorBar(alt_video_display *pDisplay){
   84e98:	defffa04 	addi	sp,sp,-24
   84e9c:	dfc00515 	stw	ra,20(sp)
   84ea0:	df000415 	stw	fp,16(sp)
   84ea4:	df000404 	addi	fp,sp,16
   84ea8:	e13fff15 	stw	r4,-4(fp)
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
   84eac:	e03ffd15 	stw	zero,-12(fp)
   84eb0:	00005806 	br	85014 <VPG_ColorBar+0x17c>
        for(x=0;x<pDisplay->width;x++){
   84eb4:	e03ffc15 	stw	zero,-16(fp)
   84eb8:	00004f06 	br	84ff8 <VPG_ColorBar+0x160>
            if (x == 0 || y == 0 || x == pDisplay->width-1 || y == pDisplay->height-1){
   84ebc:	e0bffc17 	ldw	r2,-16(fp)
   84ec0:	10000c26 	beq	r2,zero,84ef4 <VPG_ColorBar+0x5c>
   84ec4:	e0bffd17 	ldw	r2,-12(fp)
   84ec8:	10000a26 	beq	r2,zero,84ef4 <VPG_ColorBar+0x5c>
   84ecc:	e0bfff17 	ldw	r2,-4(fp)
   84ed0:	10800117 	ldw	r2,4(r2)
   84ed4:	10ffffc4 	addi	r3,r2,-1
   84ed8:	e0bffc17 	ldw	r2,-16(fp)
   84edc:	18800526 	beq	r3,r2,84ef4 <VPG_ColorBar+0x5c>
   84ee0:	e0bfff17 	ldw	r2,-4(fp)
   84ee4:	10800217 	ldw	r2,8(r2)
   84ee8:	10ffffc4 	addi	r3,r2,-1
   84eec:	e0bffd17 	ldw	r2,-12(fp)
   84ef0:	1880041e 	bne	r3,r2,84f04 <VPG_ColorBar+0x6c>
                Value32 = WHITE_24;
   84ef4:	00804034 	movhi	r2,256
   84ef8:	10bfffc4 	addi	r2,r2,-1
   84efc:	e0bffe15 	stw	r2,-8(fp)
   84f00:	00003506 	br	84fd8 <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height/4){
   84f04:	e0bfff17 	ldw	r2,-4(fp)
   84f08:	10800217 	ldw	r2,8(r2)
   84f0c:	1000010e 	bge	r2,zero,84f14 <VPG_ColorBar+0x7c>
   84f10:	108000c4 	addi	r2,r2,3
   84f14:	1005d0ba 	srai	r2,r2,2
   84f18:	e0fffd17 	ldw	r3,-12(fp)
   84f1c:	1880040e 	bge	r3,r2,84f30 <VPG_ColorBar+0x98>
                // red
                Value32 = x & 0xFF;
   84f20:	e0bffc17 	ldw	r2,-16(fp)
   84f24:	10803fcc 	andi	r2,r2,255
   84f28:	e0bffe15 	stw	r2,-8(fp)
   84f2c:	00002a06 	br	84fd8 <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height/2){
   84f30:	e0bfff17 	ldw	r2,-4(fp)
   84f34:	10800217 	ldw	r2,8(r2)
   84f38:	1006d7fa 	srli	r3,r2,31
   84f3c:	1885883a 	add	r2,r3,r2
   84f40:	1005d07a 	srai	r2,r2,1
   84f44:	e0fffd17 	ldw	r3,-12(fp)
   84f48:	1880050e 	bge	r3,r2,84f60 <VPG_ColorBar+0xc8>
                Value32 = (x & 0xFF) << 8;
   84f4c:	e0bffc17 	ldw	r2,-16(fp)
   84f50:	1004923a 	slli	r2,r2,8
   84f54:	10bfffcc 	andi	r2,r2,65535
   84f58:	e0bffe15 	stw	r2,-8(fp)
   84f5c:	00001e06 	br	84fd8 <VPG_ColorBar+0x140>
            }else if (y < pDisplay->height*3/4){
   84f60:	e0bfff17 	ldw	r2,-4(fp)
   84f64:	10c00217 	ldw	r3,8(r2)
   84f68:	1805883a 	mov	r2,r3
   84f6c:	1085883a 	add	r2,r2,r2
   84f70:	10c5883a 	add	r2,r2,r3
   84f74:	1000010e 	bge	r2,zero,84f7c <VPG_ColorBar+0xe4>
   84f78:	108000c4 	addi	r2,r2,3
   84f7c:	1005d0ba 	srai	r2,r2,2
   84f80:	e0fffd17 	ldw	r3,-12(fp)
   84f84:	1880050e 	bge	r3,r2,84f9c <VPG_ColorBar+0x104>
                Value32 = (x & 0xFF) << 16;
   84f88:	e0bffc17 	ldw	r2,-16(fp)
   84f8c:	10803fcc 	andi	r2,r2,255
   84f90:	1004943a 	slli	r2,r2,16
   84f94:	e0bffe15 	stw	r2,-8(fp)
   84f98:	00000f06 	br	84fd8 <VPG_ColorBar+0x140>
            }else{
                Value32 = x & 0xFF;
   84f9c:	e0bffc17 	ldw	r2,-16(fp)
   84fa0:	10803fcc 	andi	r2,r2,255
   84fa4:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 8;
   84fa8:	e0bffc17 	ldw	r2,-16(fp)
   84fac:	1004923a 	slli	r2,r2,8
   84fb0:	10bfffcc 	andi	r2,r2,65535
   84fb4:	e0fffe17 	ldw	r3,-8(fp)
   84fb8:	1884b03a 	or	r2,r3,r2
   84fbc:	e0bffe15 	stw	r2,-8(fp)
                Value32 |= (x & 0xFF) << 16;
   84fc0:	e0bffc17 	ldw	r2,-16(fp)
   84fc4:	10803fcc 	andi	r2,r2,255
   84fc8:	1004943a 	slli	r2,r2,16
   84fcc:	e0fffe17 	ldw	r3,-8(fp)
   84fd0:	1884b03a 	or	r2,r3,r2
   84fd4:	e0bffe15 	stw	r2,-8(fp)
            }
            vid_set_pixel(x,y,Value32, pDisplay);
   84fd8:	e13ffc17 	ldw	r4,-16(fp)
   84fdc:	e17ffd17 	ldw	r5,-12(fp)
   84fe0:	e1bffe17 	ldw	r6,-8(fp)
   84fe4:	e1ffff17 	ldw	r7,-4(fp)
   84fe8:	0081b140 	call	81b14 <vid_set_pixel>
void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
        for(x=0;x<pDisplay->width;x++){
   84fec:	e0bffc17 	ldw	r2,-16(fp)
   84ff0:	10800044 	addi	r2,r2,1
   84ff4:	e0bffc15 	stw	r2,-16(fp)
   84ff8:	e0bfff17 	ldw	r2,-4(fp)
   84ffc:	10800117 	ldw	r2,4(r2)
   85000:	e0fffc17 	ldw	r3,-16(fp)
   85004:	18bfad16 	blt	r3,r2,84ebc <VPG_ColorBar+0x24>

void VPG_ColorBar(alt_video_display *pDisplay){
    int x,y;
    alt_u32 Value32;

    for(y=0;y<pDisplay->height;y++){
   85008:	e0bffd17 	ldw	r2,-12(fp)
   8500c:	10800044 	addi	r2,r2,1
   85010:	e0bffd15 	stw	r2,-12(fp)
   85014:	e0bfff17 	ldw	r2,-4(fp)
   85018:	10800217 	ldw	r2,8(r2)
   8501c:	e0fffd17 	ldw	r3,-12(fp)
   85020:	18bfa416 	blt	r3,r2,84eb4 <VPG_ColorBar+0x1c>

        }

    }

}
   85024:	e037883a 	mov	sp,fp
   85028:	dfc00117 	ldw	ra,4(sp)
   8502c:	df000017 	ldw	fp,0(sp)
   85030:	dec00204 	addi	sp,sp,8
   85034:	f800283a 	ret

00085038 <GUI_ShowPAT>:


void GUI_ShowPAT(alt_video_display *pDisplay, int PatId){
   85038:	defffc04 	addi	sp,sp,-16
   8503c:	dfc00315 	stw	ra,12(sp)
   85040:	df000215 	stw	fp,8(sp)
   85044:	df000204 	addi	fp,sp,8
   85048:	e13ffe15 	stw	r4,-8(fp)
   8504c:	e17fff15 	stw	r5,-4(fp)

                switch(PatId){
   85050:	e0bfff17 	ldw	r2,-4(fp)
   85054:	108003e8 	cmpgeui	r2,r2,15
   85058:	1000521e 	bne	r2,zero,851a4 <GUI_ShowPAT+0x16c>
   8505c:	e0bfff17 	ldw	r2,-4(fp)
   85060:	1085883a 	add	r2,r2,r2
   85064:	1087883a 	add	r3,r2,r2
   85068:	00800234 	movhi	r2,8
   8506c:	10941f04 	addi	r2,r2,20604
   85070:	1885883a 	add	r2,r3,r2
   85074:	10800017 	ldw	r2,0(r2)
   85078:	1000683a 	jmp	r2
   8507c:	000850b8 	rdprs	zero,zero,8514
   85080:	000850c4 	movi	zero,8515
   85084:	000850d8 	cmpnei	zero,zero,8515
   85088:	000850e8 	cmpgeui	zero,zero,8515
   8508c:	000850f8 	rdprs	zero,zero,8515
   85090:	00085108 	cmpgei	zero,zero,8516
   85094:	00085114 	movui	zero,8516
   85098:	00085124 	muli	zero,zero,8516
   8509c:	00085134 	movhi	zero,8516
   850a0:	00085144 	movi	zero,8517
   850a4:	00085154 	movui	zero,8517
   850a8:	00085164 	muli	zero,zero,8517
   850ac:	00085174 	movhi	zero,8517
   850b0:	00085184 	movi	zero,8518
   850b4:	00085194 	movui	zero,8518
                    case 0: VPG_ColorBar(pDisplay); break;
   850b8:	e13ffe17 	ldw	r4,-8(fp)
   850bc:	0084e980 	call	84e98 <VPG_ColorBar>
   850c0:	00003806 	br	851a4 <GUI_ShowPAT+0x16c>
                    case 1: VPG_ColorPanel(pDisplay, WHITE_24); break;
   850c4:	e13ffe17 	ldw	r4,-8(fp)
   850c8:	01404034 	movhi	r5,256
   850cc:	297fffc4 	addi	r5,r5,-1
   850d0:	0084b240 	call	84b24 <VPG_ColorPanel>
   850d4:	00003306 	br	851a4 <GUI_ShowPAT+0x16c>
                    case 2: VPG_ColorPanel(pDisplay, RED_24); break;
   850d8:	e13ffe17 	ldw	r4,-8(fp)
   850dc:	01403ff4 	movhi	r5,255
   850e0:	0084b240 	call	84b24 <VPG_ColorPanel>
   850e4:	00002f06 	br	851a4 <GUI_ShowPAT+0x16c>
                    case 3: VPG_ColorPanel(pDisplay, GREEN_24); break;
   850e8:	e13ffe17 	ldw	r4,-8(fp)
   850ec:	01600014 	movui	r5,32768
   850f0:	0084b240 	call	84b24 <VPG_ColorPanel>
   850f4:	00002b06 	br	851a4 <GUI_ShowPAT+0x16c>
                    case 4: VPG_ColorPanel(pDisplay, BLUE_24); break;
   850f8:	e13ffe17 	ldw	r4,-8(fp)
   850fc:	01403fc4 	movi	r5,255
   85100:	0084b240 	call	84b24 <VPG_ColorPanel>
   85104:	00002706 	br	851a4 <GUI_ShowPAT+0x16c>
                    case 5: VPG_XLine(pDisplay); break;
   85108:	e13ffe17 	ldw	r4,-8(fp)
   8510c:	0084b000 	call	84b00 <VPG_XLine>
   85110:	00002406 	br	851a4 <GUI_ShowPAT+0x16c>
                    case 6: VPG_VGrid(pDisplay, 2); break;
   85114:	e13ffe17 	ldw	r4,-8(fp)
   85118:	01400084 	movi	r5,2
   8511c:	0084cd00 	call	84cd0 <VPG_VGrid>
   85120:	00002006 	br	851a4 <GUI_ShowPAT+0x16c>
                    case 7: VPG_VGrid(pDisplay, 4); break;
   85124:	e13ffe17 	ldw	r4,-8(fp)
   85128:	01400104 	movi	r5,4
   8512c:	0084cd00 	call	84cd0 <VPG_VGrid>
   85130:	00001c06 	br	851a4 <GUI_ShowPAT+0x16c>
                    case 8: VPG_VGrid(pDisplay, 8); break;
   85134:	e13ffe17 	ldw	r4,-8(fp)
   85138:	01400204 	movi	r5,8
   8513c:	0084cd00 	call	84cd0 <VPG_VGrid>
   85140:	00001806 	br	851a4 <GUI_ShowPAT+0x16c>
                    case 9: VPG_HGrid(pDisplay, 2); break;
   85144:	e13ffe17 	ldw	r4,-8(fp)
   85148:	01400084 	movi	r5,2
   8514c:	0084db40 	call	84db4 <VPG_HGrid>
   85150:	00001406 	br	851a4 <GUI_ShowPAT+0x16c>
                    case 10: VPG_HGrid(pDisplay, 4); break;
   85154:	e13ffe17 	ldw	r4,-8(fp)
   85158:	01400104 	movi	r5,4
   8515c:	0084db40 	call	84db4 <VPG_HGrid>
   85160:	00001006 	br	851a4 <GUI_ShowPAT+0x16c>
                    case 11: VPG_HGrid(pDisplay, 8); break;
   85164:	e13ffe17 	ldw	r4,-8(fp)
   85168:	01400204 	movi	r5,8
   8516c:	0084db40 	call	84db4 <VPG_HGrid>
   85170:	00000c06 	br	851a4 <GUI_ShowPAT+0x16c>
                    case 12: VPG_Grid(pDisplay, 2); break;
   85174:	e13ffe17 	ldw	r4,-8(fp)
   85178:	01400084 	movi	r5,2
   8517c:	0084bd40 	call	84bd4 <VPG_Grid>
   85180:	00000806 	br	851a4 <GUI_ShowPAT+0x16c>
                    case 13: VPG_Grid(pDisplay, 4); break;
   85184:	e13ffe17 	ldw	r4,-8(fp)
   85188:	01400104 	movi	r5,4
   8518c:	0084bd40 	call	84bd4 <VPG_Grid>
   85190:	00000406 	br	851a4 <GUI_ShowPAT+0x16c>
                    case 14: VPG_Grid(pDisplay, 8); break;
   85194:	e13ffe17 	ldw	r4,-8(fp)
   85198:	01400204 	movi	r5,8
   8519c:	0084bd40 	call	84bd4 <VPG_Grid>
   851a0:	0001883a 	nop
                }

}
   851a4:	e037883a 	mov	sp,fp
   851a8:	dfc00117 	ldw	ra,4(sp)
   851ac:	df000017 	ldw	fp,0(sp)
   851b0:	dec00204 	addi	sp,sp,8
   851b4:	f800283a 	ret

000851b8 <GUI_VPG>:

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch){
   851b8:	defff904 	addi	sp,sp,-28
   851bc:	dfc00615 	stw	ra,24(sp)
   851c0:	df000515 	stw	fp,20(sp)
   851c4:	df000504 	addi	fp,sp,20
   851c8:	e13ffe15 	stw	r4,-8(fp)
   851cc:	e17fff15 	stw	r5,-4(fp)
	int X, Y;
	int PatId = 0;
   851d0:	e03ffb15 	stw	zero,-20(fp)

    // clean screen
    vid_clean_screen(pDisplay, BLACK_24);
   851d4:	e13ffe17 	ldw	r4,-8(fp)
   851d8:	000b883a 	mov	r5,zero
   851dc:	00810700 	call	81070 <vid_clean_screen>


    VPG_ColorBar(pDisplay);
   851e0:	e13ffe17 	ldw	r4,-8(fp)
   851e4:	0084e980 	call	84e98 <VPG_ColorBar>

    GUI_ShowPAT(pDisplay, PatId);
   851e8:	e13ffe17 	ldw	r4,-8(fp)
   851ec:	e17ffb17 	ldw	r5,-20(fp)
   851f0:	00850380 	call	85038 <GUI_ShowPAT>
   851f4:	00000106 	br	851fc <GUI_VPG+0x44>
            printf("PatId=%d\r\n", PatId);
            GUI_ShowPAT(pDisplay, PatId);
            usleep(300*1000); // debounce
            Touch_EmptyFifo( pTouch);
        }
    }
   851f8:	0001883a 	nop
    VPG_ColorBar(pDisplay);

    GUI_ShowPAT(pDisplay, PatId);

    while(1){
        if (Touch_GetXY(pTouch, &X, &Y)){
   851fc:	e0fffc04 	addi	r3,fp,-16
   85200:	e0bffd04 	addi	r2,fp,-12
   85204:	e13fff17 	ldw	r4,-4(fp)
   85208:	180b883a 	mov	r5,r3
   8520c:	100d883a 	mov	r6,r2
   85210:	0086b000 	call	86b00 <Touch_GetXY>
   85214:	103ff826 	beq	r2,zero,851f8 <GUI_VPG+0x40>
            //printf(".");

            // change pattern
            PatId++;
   85218:	e0bffb17 	ldw	r2,-20(fp)
   8521c:	10800044 	addi	r2,r2,1
   85220:	e0bffb15 	stw	r2,-20(fp)
            if (PatId > 14)
   85224:	e0bffb17 	ldw	r2,-20(fp)
   85228:	108003d0 	cmplti	r2,r2,15
   8522c:	1000011e 	bne	r2,zero,85234 <GUI_VPG+0x7c>
                PatId = 0;
   85230:	e03ffb15 	stw	zero,-20(fp)

            printf("PatId=%d\r\n", PatId);
   85234:	010002f4 	movhi	r4,11
   85238:	21357b04 	addi	r4,r4,-10772
   8523c:	e17ffb17 	ldw	r5,-20(fp)
   85240:	00892840 	call	89284 <printf>
            GUI_ShowPAT(pDisplay, PatId);
   85244:	e13ffe17 	ldw	r4,-8(fp)
   85248:	e17ffb17 	ldw	r5,-20(fp)
   8524c:	00850380 	call	85038 <GUI_ShowPAT>
            usleep(300*1000); // debounce
   85250:	01000174 	movhi	r4,5
   85254:	2124f804 	addi	r4,r4,-27680
   85258:	0091a700 	call	91a70 <usleep>
            Touch_EmptyFifo( pTouch);
   8525c:	e13fff17 	ldw	r4,-4(fp)
   85260:	0086ac80 	call	86ac8 <Touch_EmptyFifo>
        }
    }
   85264:	003fe406 	br	851f8 <GUI_VPG+0x40>

00085268 <main>:
#include "system.h"

void GUI_VPG(alt_video_display *pDisplay, TOUCH_HANDLE *pTouch);

int main()
{
   85268:	defff704 	addi	sp,sp,-36
   8526c:	dfc00815 	stw	ra,32(sp)
   85270:	df000715 	stw	fp,28(sp)
   85274:	df000704 	addi	fp,sp,28
	TOUCH_HANDLE *pTouch;
	alt_video_display Display;


    const bool bVPG = ((IORD(KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
   85278:	00800434 	movhi	r2,16
   8527c:	10841004 	addi	r2,r2,4160
   85280:	10800037 	ldwio	r2,0(r2)
   85284:	1080004c 	andi	r2,r2,1
   85288:	1005003a 	cmpeq	r2,r2,zero
   8528c:	10803fcc 	andi	r2,r2,255
   85290:	e0bff915 	stw	r2,-28(fp)

   printf("LT24 Demo!\n");
   85294:	010002f4 	movhi	r4,11
   85298:	21357e04 	addi	r4,r4,-10760
   8529c:	00893440 	call	89344 <puts>

   // init touch
   pTouch = Touch_Init(TOUCH_PANEL_SPI_BASE, TOUCH_PANEL_PEN_IRQ_N_BASE, TOUCH_PANEL_PEN_IRQ_N_IRQ);
   852a0:	01000434 	movhi	r4,16
   852a4:	21040004 	addi	r4,r4,4096
   852a8:	01400434 	movhi	r5,16
   852ac:	29441c04 	addi	r5,r5,4208
   852b0:	018000c4 	movi	r6,3
   852b4:	00868ec0 	call	868ec <Touch_Init>
   852b8:	e0bffa15 	stw	r2,-24(fp)
   if (!pTouch){
   852bc:	e0bffa17 	ldw	r2,-24(fp)
   852c0:	1000041e 	bne	r2,zero,852d4 <main+0x6c>
       printf("Failed to init touch\r\n");
   852c4:	010002f4 	movhi	r4,11
   852c8:	21358104 	addi	r4,r4,-10748
   852cc:	00893440 	call	89344 <puts>
   852d0:	00000306 	br	852e0 <main+0x78>
   }else{
       printf("Init touch successfully\r\n");
   852d4:	010002f4 	movhi	r4,11
   852d8:	21358704 	addi	r4,r4,-10724
   852dc:	00893440 	call	89344 <puts>

   }

   // init LCD
   LCD_Init();
   852e0:	00807ec0 	call	807ec <LCD_Init>
   LCD_Clear(0X0000);
   852e4:	0009883a 	mov	r4,zero
   852e8:	00807000 	call	80700 <LCD_Clear>

   Display.interlace = 0;
   852ec:	e03fff15 	stw	zero,-4(fp)
   Display.bytes_per_pixel = 2;
   852f0:	00800084 	movi	r2,2
   852f4:	e0bffe15 	stw	r2,-8(fp)
   Display.color_depth = 16;
   852f8:	00800404 	movi	r2,16
   852fc:	e0bffb15 	stw	r2,-20(fp)
   Display.height = SCREEN_HEIGHT;
   85300:	00805004 	movi	r2,320
   85304:	e0bffd15 	stw	r2,-12(fp)
   Display.width = SCREEN_WIDTH;
   85308:	00803c04 	movi	r2,240
   8530c:	e0bffc15 	stw	r2,-16(fp)

   // run demo
   if (bVPG)
   85310:	e0bff917 	ldw	r2,-28(fp)
   85314:	10000526 	beq	r2,zero,8532c <main+0xc4>
       GUI_VPG(&Display, pTouch); // enter vpg mode when users press KEY0
   85318:	e0bffb04 	addi	r2,fp,-20
   8531c:	1009883a 	mov	r4,r2
   85320:	e17ffa17 	ldw	r5,-24(fp)
   85324:	00851b80 	call	851b8 <GUI_VPG>
   85328:	00000406 	br	8533c <main+0xd4>
   else
	   GUI(&Display, pTouch);
   8532c:	e0bffb04 	addi	r2,fp,-20
   85330:	1009883a 	mov	r4,r2
   85334:	e17ffa17 	ldw	r5,-24(fp)
   85338:	00847bc0 	call	847bc <GUI>


}
   8533c:	e037883a 	mov	sp,fp
   85340:	dfc00117 	ldw	ra,4(sp)
   85344:	df000017 	ldw	fp,0(sp)
   85348:	dec00204 	addi	sp,sp,8
   8534c:	f800283a 	ret

00085350 <my_wait>:
    #define I2C_DEBUG(x)    DEBUG(x)  
#else
    #define I2C_DEBUG(x)
#endif

void my_wait(int nWait){
   85350:	defffd04 	addi	sp,sp,-12
   85354:	df000215 	stw	fp,8(sp)
   85358:	df000204 	addi	fp,sp,8
   8535c:	e13fff15 	stw	r4,-4(fp)
    int i;
    i = 0;
   85360:	e03ffe15 	stw	zero,-8(fp)
    while (i < nWait){
   85364:	00000306 	br	85374 <my_wait+0x24>
        i++;
   85368:	e0bffe17 	ldw	r2,-8(fp)
   8536c:	10800044 	addi	r2,r2,1
   85370:	e0bffe15 	stw	r2,-8(fp)
#endif

void my_wait(int nWait){
    int i;
    i = 0;
    while (i < nWait){
   85374:	e0fffe17 	ldw	r3,-8(fp)
   85378:	e0bfff17 	ldw	r2,-4(fp)
   8537c:	18bffa16 	blt	r3,r2,85368 <my_wait+0x18>
        i++;
     //   IOWR(LED_BASE, 0, i);
    }    
}
   85380:	e037883a 	mov	sp,fp
   85384:	df000017 	ldw	fp,0(sp)
   85388:	dec00104 	addi	sp,sp,4
   8538c:	f800283a 	ret

00085390 <I2C_Write>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
   85390:	defff804 	addi	sp,sp,-32
   85394:	dfc00715 	stw	ra,28(sp)
   85398:	df000615 	stw	fp,24(sp)
   8539c:	df000604 	addi	fp,sp,24
   853a0:	e13ffb15 	stw	r4,-20(fp)
   853a4:	e17ffc15 	stw	r5,-16(fp)
   853a8:	3007883a 	mov	r3,r6
   853ac:	3805883a 	mov	r2,r7
   853b0:	e1000217 	ldw	r4,8(fp)
   853b4:	e0fffd05 	stb	r3,-12(fp)
   853b8:	e0bffe05 	stb	r2,-8(fp)
   853bc:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
   853c0:	00800044 	movi	r2,1
   853c4:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   853c8:	e13ffb17 	ldw	r4,-20(fp)
   853cc:	e17ffc17 	ldw	r5,-16(fp)
   853d0:	00859e40 	call	859e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   853d4:	e0bffd03 	ldbu	r2,-12(fp)
   853d8:	10803fcc 	andi	r2,r2,255
   853dc:	e13ffb17 	ldw	r4,-20(fp)
   853e0:	e17ffc17 	ldw	r5,-16(fp)
   853e4:	100d883a 	mov	r6,r2
   853e8:	0085ad80 	call	85ad8 <i2c_write>
   853ec:	1000041e 	bne	r2,zero,85400 <I2C_Write+0x70>
        bSuccess = FALSE;
   853f0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   853f4:	010002f4 	movhi	r4,11
   853f8:	21358e04 	addi	r4,r4,-10696
   853fc:	00864d40 	call	864d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   85400:	e0bffa17 	ldw	r2,-24(fp)
   85404:	10000a26 	beq	r2,zero,85430 <I2C_Write+0xa0>
   85408:	e0bffe03 	ldbu	r2,-8(fp)
   8540c:	e13ffb17 	ldw	r4,-20(fp)
   85410:	e17ffc17 	ldw	r5,-16(fp)
   85414:	100d883a 	mov	r6,r2
   85418:	0085ad80 	call	85ad8 <i2c_write>
   8541c:	1000041e 	bne	r2,zero,85430 <I2C_Write+0xa0>
        bSuccess = FALSE;
   85420:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
   85424:	010002f4 	movhi	r4,11
   85428:	21359604 	addi	r4,r4,-10664
   8542c:	00864d40 	call	864d4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
   85430:	e0bffa17 	ldw	r2,-24(fp)
   85434:	10000a26 	beq	r2,zero,85460 <I2C_Write+0xd0>
   85438:	e0bfff03 	ldbu	r2,-4(fp)
   8543c:	e13ffb17 	ldw	r4,-20(fp)
   85440:	e17ffc17 	ldw	r5,-16(fp)
   85444:	100d883a 	mov	r6,r2
   85448:	0085ad80 	call	85ad8 <i2c_write>
   8544c:	1000041e 	bne	r2,zero,85460 <I2C_Write+0xd0>
        bSuccess = FALSE;
   85450:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   85454:	010002f4 	movhi	r4,11
   85458:	21359f04 	addi	r4,r4,-10628
   8545c:	00864d40 	call	864d4 <myprintf>
    }
    i2c_stop(clk_base, data_base);
   85460:	e13ffb17 	ldw	r4,-20(fp)
   85464:	e17ffc17 	ldw	r5,-16(fp)
   85468:	0085a680 	call	85a68 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   8546c:	0106d604 	movi	r4,7000
   85470:	0091a700 	call	91a70 <usleep>
    
    return bSuccess;
   85474:	e0bffa17 	ldw	r2,-24(fp)

    
}
   85478:	e037883a 	mov	sp,fp
   8547c:	dfc00117 	ldw	ra,4(sp)
   85480:	df000017 	ldw	fp,0(sp)
   85484:	dec00204 	addi	sp,sp,8
   85488:	f800283a 	ret

0008548c <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
   8548c:	defff704 	addi	sp,sp,-36
   85490:	dfc00815 	stw	ra,32(sp)
   85494:	df000715 	stw	fp,28(sp)
   85498:	df000704 	addi	fp,sp,28
   8549c:	e13ffb15 	stw	r4,-20(fp)
   854a0:	e17ffc15 	stw	r5,-16(fp)
   854a4:	3007883a 	mov	r3,r6
   854a8:	3805883a 	mov	r2,r7
   854ac:	e1000217 	ldw	r4,8(fp)
   854b0:	e0fffd05 	stb	r3,-12(fp)
   854b4:	e0bffe05 	stb	r2,-8(fp)
   854b8:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess = TRUE;
   854bc:	00800044 	movi	r2,1
   854c0:	e0bff915 	stw	r2,-28(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
   854c4:	e0bfff0b 	ldhu	r2,-4(fp)
   854c8:	1004d23a 	srli	r2,r2,8
   854cc:	e0bffa05 	stb	r2,-24(fp)
    LowByte = ControlData & 0xFF; 
   854d0:	e0bfff0b 	ldhu	r2,-4(fp)
   854d4:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   854d8:	e13ffb17 	ldw	r4,-20(fp)
   854dc:	e17ffc17 	ldw	r5,-16(fp)
   854e0:	00859e40 	call	859e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   854e4:	e0bffd03 	ldbu	r2,-12(fp)
   854e8:	10803fcc 	andi	r2,r2,255
   854ec:	e13ffb17 	ldw	r4,-20(fp)
   854f0:	e17ffc17 	ldw	r5,-16(fp)
   854f4:	100d883a 	mov	r6,r2
   854f8:	0085ad80 	call	85ad8 <i2c_write>
   854fc:	1000041e 	bne	r2,zero,85510 <I2C_Write16+0x84>
        bSuccess = FALSE;
   85500:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   85504:	010002f4 	movhi	r4,11
   85508:	21358e04 	addi	r4,r4,-10696
   8550c:	00864d40 	call	864d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   85510:	e0bff917 	ldw	r2,-28(fp)
   85514:	10000a26 	beq	r2,zero,85540 <I2C_Write16+0xb4>
   85518:	e0bffe03 	ldbu	r2,-8(fp)
   8551c:	e13ffb17 	ldw	r4,-20(fp)
   85520:	e17ffc17 	ldw	r5,-16(fp)
   85524:	100d883a 	mov	r6,r2
   85528:	0085ad80 	call	85ad8 <i2c_write>
   8552c:	1000041e 	bne	r2,zero,85540 <I2C_Write16+0xb4>
        bSuccess = FALSE;
   85530:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
   85534:	010002f4 	movhi	r4,11
   85538:	21359604 	addi	r4,r4,-10664
   8553c:	00864d40 	call	864d4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
   85540:	e0bff917 	ldw	r2,-28(fp)
   85544:	10000a26 	beq	r2,zero,85570 <I2C_Write16+0xe4>
   85548:	e0bffa03 	ldbu	r2,-24(fp)
   8554c:	e13ffb17 	ldw	r4,-20(fp)
   85550:	e17ffc17 	ldw	r5,-16(fp)
   85554:	100d883a 	mov	r6,r2
   85558:	0085ad80 	call	85ad8 <i2c_write>
   8555c:	1000041e 	bne	r2,zero,85570 <I2C_Write16+0xe4>
        bSuccess = FALSE;
   85560:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   85564:	010002f4 	movhi	r4,11
   85568:	21359f04 	addi	r4,r4,-10628
   8556c:	00864d40 	call	864d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
   85570:	e0bff917 	ldw	r2,-28(fp)
   85574:	10000a26 	beq	r2,zero,855a0 <I2C_Write16+0x114>
   85578:	e0bffa43 	ldbu	r2,-23(fp)
   8557c:	e13ffb17 	ldw	r4,-20(fp)
   85580:	e17ffc17 	ldw	r5,-16(fp)
   85584:	100d883a 	mov	r6,r2
   85588:	0085ad80 	call	85ad8 <i2c_write>
   8558c:	1000041e 	bne	r2,zero,855a0 <I2C_Write16+0x114>
        bSuccess = FALSE;
   85590:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   85594:	010002f4 	movhi	r4,11
   85598:	21359f04 	addi	r4,r4,-10628
   8559c:	00864d40 	call	864d4 <myprintf>
    }    
    i2c_stop(clk_base, data_base);
   855a0:	e13ffb17 	ldw	r4,-20(fp)
   855a4:	e17ffc17 	ldw	r5,-16(fp)
   855a8:	0085a680 	call	85a68 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   855ac:	0106d604 	movi	r4,7000
   855b0:	0091a700 	call	91a70 <usleep>
    
    return bSuccess;
   855b4:	e0bff917 	ldw	r2,-28(fp)

    
}
   855b8:	e037883a 	mov	sp,fp
   855bc:	dfc00117 	ldw	ra,4(sp)
   855c0:	df000017 	ldw	fp,0(sp)
   855c4:	dec00204 	addi	sp,sp,8
   855c8:	f800283a 	ret

000855cc <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
   855cc:	defff904 	addi	sp,sp,-28
   855d0:	dfc00615 	stw	ra,24(sp)
   855d4:	df000515 	stw	fp,20(sp)
   855d8:	df000504 	addi	fp,sp,20
   855dc:	e13ffc15 	stw	r4,-16(fp)
   855e0:	e17ffd15 	stw	r5,-12(fp)
   855e4:	3007883a 	mov	r3,r6
   855e8:	3805883a 	mov	r2,r7
   855ec:	e0fffe05 	stb	r3,-8(fp)
   855f0:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   855f4:	00800044 	movi	r2,1
   855f8:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   855fc:	e13ffc17 	ldw	r4,-16(fp)
   85600:	e17ffd17 	ldw	r5,-12(fp)
   85604:	00859e40 	call	859e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   85608:	e0bffe03 	ldbu	r2,-8(fp)
   8560c:	10803fcc 	andi	r2,r2,255
   85610:	e13ffc17 	ldw	r4,-16(fp)
   85614:	e17ffd17 	ldw	r5,-12(fp)
   85618:	100d883a 	mov	r6,r2
   8561c:	0085ad80 	call	85ad8 <i2c_write>
   85620:	1000041e 	bne	r2,zero,85634 <I2C_Read+0x68>
        bSuccess = FALSE;
   85624:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(1) Fail: Address NACK!\n"));
   85628:	010002f4 	movhi	r4,11
   8562c:	2135a704 	addi	r4,r4,-10596
   85630:	00864d40 	call	864d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   85634:	e0bffb17 	ldw	r2,-20(fp)
   85638:	10000a26 	beq	r2,zero,85664 <I2C_Read+0x98>
   8563c:	e0bfff03 	ldbu	r2,-4(fp)
   85640:	e13ffc17 	ldw	r4,-16(fp)
   85644:	e17ffd17 	ldw	r5,-12(fp)
   85648:	100d883a 	mov	r6,r2
   8564c:	0085ad80 	call	85ad8 <i2c_write>
   85650:	1000041e 	bne	r2,zero,85664 <I2C_Read+0x98>
        bSuccess = FALSE;
   85654:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(2) Fail: SubAddress NACK!\n"));
   85658:	010002f4 	movhi	r4,11
   8565c:	2135b004 	addi	r4,r4,-10560
   85660:	00864d40 	call	864d4 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
   85664:	e13ffc17 	ldw	r4,-16(fp)
   85668:	e17ffd17 	ldw	r5,-12(fp)
   8566c:	00859e40 	call	859e4 <i2c_start>
    DeviceAddr |= 1; // Read
   85670:	e0bffe03 	ldbu	r2,-8(fp)
   85674:	10800054 	ori	r2,r2,1
   85678:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   8567c:	e0bffb17 	ldw	r2,-20(fp)
   85680:	10000b26 	beq	r2,zero,856b0 <I2C_Read+0xe4>
   85684:	e0bffe03 	ldbu	r2,-8(fp)
   85688:	10803fcc 	andi	r2,r2,255
   8568c:	e13ffc17 	ldw	r4,-16(fp)
   85690:	e17ffd17 	ldw	r5,-12(fp)
   85694:	100d883a 	mov	r6,r2
   85698:	0085ad80 	call	85ad8 <i2c_write>
   8569c:	1000041e 	bne	r2,zero,856b0 <I2C_Read+0xe4>
        bSuccess = FALSE;
   856a0:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C_Read(3) Fail: Address+1 NACK!\n"));
   856a4:	010002f4 	movhi	r4,11
   856a8:	2135b904 	addi	r4,r4,-10524
   856ac:	00864d40 	call	864d4 <myprintf>
    }
    
    if (bSuccess){
   856b0:	e0bffb17 	ldw	r2,-20(fp)
   856b4:	10000526 	beq	r2,zero,856cc <I2C_Read+0x100>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   856b8:	e13ffc17 	ldw	r4,-16(fp)
   856bc:	e17ffd17 	ldw	r5,-12(fp)
   856c0:	e1800217 	ldw	r6,8(fp)
   856c4:	000f883a 	mov	r7,zero
   856c8:	0085c440 	call	85c44 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
   856cc:	e13ffc17 	ldw	r4,-16(fp)
   856d0:	e17ffd17 	ldw	r5,-12(fp)
   856d4:	0085a680 	call	85a68 <i2c_stop>
    
    return bSuccess;
   856d8:	e0bffb17 	ldw	r2,-20(fp)
}
   856dc:	e037883a 	mov	sp,fp
   856e0:	dfc00117 	ldw	ra,4(sp)
   856e4:	df000017 	ldw	fp,0(sp)
   856e8:	dec00204 	addi	sp,sp,8
   856ec:	f800283a 	ret

000856f0 <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
   856f0:	defff804 	addi	sp,sp,-32
   856f4:	dfc00715 	stw	ra,28(sp)
   856f8:	df000615 	stw	fp,24(sp)
   856fc:	df000604 	addi	fp,sp,24
   85700:	e13ffc15 	stw	r4,-16(fp)
   85704:	e17ffd15 	stw	r5,-12(fp)
   85708:	3007883a 	mov	r3,r6
   8570c:	3805883a 	mov	r2,r7
   85710:	e0fffe05 	stb	r3,-8(fp)
   85714:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
   85718:	00800044 	movi	r2,1
   8571c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   85720:	e13ffc17 	ldw	r4,-16(fp)
   85724:	e17ffd17 	ldw	r5,-12(fp)
   85728:	00859e40 	call	859e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   8572c:	e0bffe03 	ldbu	r2,-8(fp)
   85730:	10803fcc 	andi	r2,r2,255
   85734:	e13ffc17 	ldw	r4,-16(fp)
   85738:	e17ffd17 	ldw	r5,-12(fp)
   8573c:	100d883a 	mov	r6,r2
   85740:	0085ad80 	call	85ad8 <i2c_write>
   85744:	1000041e 	bne	r2,zero,85758 <I2C_Read16+0x68>
        bSuccess = FALSE;
   85748:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   8574c:	010002f4 	movhi	r4,11
   85750:	21358e04 	addi	r4,r4,-10696
   85754:	00864d40 	call	864d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   85758:	e0bffa17 	ldw	r2,-24(fp)
   8575c:	10000a26 	beq	r2,zero,85788 <I2C_Read16+0x98>
   85760:	e0bfff03 	ldbu	r2,-4(fp)
   85764:	e13ffc17 	ldw	r4,-16(fp)
   85768:	e17ffd17 	ldw	r5,-12(fp)
   8576c:	100d883a 	mov	r6,r2
   85770:	0085ad80 	call	85ad8 <i2c_write>
   85774:	1000041e 	bne	r2,zero,85788 <I2C_Read16+0x98>
        bSuccess = FALSE;
   85778:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
   8577c:	010002f4 	movhi	r4,11
   85780:	21359604 	addi	r4,r4,-10664
   85784:	00864d40 	call	864d4 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
   85788:	e13ffc17 	ldw	r4,-16(fp)
   8578c:	e17ffd17 	ldw	r5,-12(fp)
   85790:	00859e40 	call	859e4 <i2c_start>
    DeviceAddr |= 1; // Read
   85794:	e0bffe03 	ldbu	r2,-8(fp)
   85798:	10800054 	ori	r2,r2,1
   8579c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   857a0:	e0bffa17 	ldw	r2,-24(fp)
   857a4:	10000b26 	beq	r2,zero,857d4 <I2C_Read16+0xe4>
   857a8:	e0bffe03 	ldbu	r2,-8(fp)
   857ac:	10803fcc 	andi	r2,r2,255
   857b0:	e13ffc17 	ldw	r4,-16(fp)
   857b4:	e17ffd17 	ldw	r5,-12(fp)
   857b8:	100d883a 	mov	r6,r2
   857bc:	0085ad80 	call	85ad8 <i2c_write>
   857c0:	1000041e 	bne	r2,zero,857d4 <I2C_Read16+0xe4>
        bSuccess = FALSE;
   857c4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
   857c8:	010002f4 	movhi	r4,11
   857cc:	2135c204 	addi	r4,r4,-10488
   857d0:	00864d40 	call	864d4 <myprintf>
    }
    
    if (bSuccess){
   857d4:	e0bffa17 	ldw	r2,-24(fp)
   857d8:	10000626 	beq	r2,zero,857f4 <I2C_Read16+0x104>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
   857dc:	e0bffb44 	addi	r2,fp,-19
   857e0:	e13ffc17 	ldw	r4,-16(fp)
   857e4:	e17ffd17 	ldw	r5,-12(fp)
   857e8:	100d883a 	mov	r6,r2
   857ec:	01c00044 	movi	r7,1
   857f0:	0085c440 	call	85c44 <i2c_read>
    }        
    if (bSuccess){
   857f4:	e0bffa17 	ldw	r2,-24(fp)
   857f8:	10000626 	beq	r2,zero,85814 <I2C_Read16+0x124>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
   857fc:	e0bffb04 	addi	r2,fp,-20
   85800:	e13ffc17 	ldw	r4,-16(fp)
   85804:	e17ffd17 	ldw	r5,-12(fp)
   85808:	100d883a 	mov	r6,r2
   8580c:	000f883a 	mov	r7,zero
   85810:	0085c440 	call	85c44 <i2c_read>
    }        
    if (bSuccess)
   85814:	e0bffa17 	ldw	r2,-24(fp)
   85818:	10000a26 	beq	r2,zero,85844 <I2C_Read16+0x154>
        *pControlData = (HighByte << 8) | LowByte;
   8581c:	e0bffb43 	ldbu	r2,-19(fp)
   85820:	10803fcc 	andi	r2,r2,255
   85824:	1004923a 	slli	r2,r2,8
   85828:	1007883a 	mov	r3,r2
   8582c:	e0bffb03 	ldbu	r2,-20(fp)
   85830:	10803fcc 	andi	r2,r2,255
   85834:	1884b03a 	or	r2,r3,r2
   85838:	1007883a 	mov	r3,r2
   8583c:	e0800217 	ldw	r2,8(fp)
   85840:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
   85844:	e13ffc17 	ldw	r4,-16(fp)
   85848:	e17ffd17 	ldw	r5,-12(fp)
   8584c:	0085a680 	call	85a68 <i2c_stop>
    
    return bSuccess;
   85850:	e0bffa17 	ldw	r2,-24(fp)
}
   85854:	e037883a 	mov	sp,fp
   85858:	dfc00117 	ldw	ra,4(sp)
   8585c:	df000017 	ldw	fp,0(sp)
   85860:	dec00204 	addi	sp,sp,8
   85864:	f800283a 	ret

00085868 <I2C_MultipleRead>:


bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
   85868:	defff704 	addi	sp,sp,-36
   8586c:	dfc00815 	stw	ra,32(sp)
   85870:	df000715 	stw	fp,28(sp)
   85874:	df000704 	addi	fp,sp,28
   85878:	e13ffb15 	stw	r4,-20(fp)
   8587c:	e17ffc15 	stw	r5,-16(fp)
   85880:	3007883a 	mov	r3,r6
   85884:	3805883a 	mov	r2,r7
   85888:	e1000317 	ldw	r4,12(fp)
   8588c:	e0fffd05 	stb	r3,-12(fp)
   85890:	e0bffe05 	stb	r2,-8(fp)
   85894:	e13fff0d 	sth	r4,-4(fp)
    int i;
    bool bSuccess = TRUE;
   85898:	00800044 	movi	r2,1
   8589c:	e0bffa15 	stw	r2,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   858a0:	e13ffb17 	ldw	r4,-20(fp)
   858a4:	e17ffc17 	ldw	r5,-16(fp)
   858a8:	00859e40 	call	859e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   858ac:	e0bffd03 	ldbu	r2,-12(fp)
   858b0:	10803fcc 	andi	r2,r2,255
   858b4:	e13ffb17 	ldw	r4,-20(fp)
   858b8:	e17ffc17 	ldw	r5,-16(fp)
   858bc:	100d883a 	mov	r6,r2
   858c0:	0085ad80 	call	85ad8 <i2c_write>
   858c4:	1000041e 	bne	r2,zero,858d8 <I2C_MultipleRead+0x70>
        bSuccess = FALSE;
   858c8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(1) Fail: Address NACK!\n"));
   858cc:	010002f4 	movhi	r4,11
   858d0:	2135cb04 	addi	r4,r4,-10452
   858d4:	00864d40 	call	864d4 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
   858d8:	e0bffa17 	ldw	r2,-24(fp)
   858dc:	10000a26 	beq	r2,zero,85908 <I2C_MultipleRead+0xa0>
   858e0:	e0bffe03 	ldbu	r2,-8(fp)
   858e4:	e13ffb17 	ldw	r4,-20(fp)
   858e8:	e17ffc17 	ldw	r5,-16(fp)
   858ec:	100d883a 	mov	r6,r2
   858f0:	0085ad80 	call	85ad8 <i2c_write>
   858f4:	1000041e 	bne	r2,zero,85908 <I2C_MultipleRead+0xa0>
        bSuccess = FALSE;
   858f8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(2) Fail: SubAddress NACK!\n"));
   858fc:	010002f4 	movhi	r4,11
   85900:	2135d604 	addi	r4,r4,-10408
   85904:	00864d40 	call	864d4 <myprintf>
    }    
    if (bSuccess)        
   85908:	e0bffa17 	ldw	r2,-24(fp)
   8590c:	10000326 	beq	r2,zero,8591c <I2C_MultipleRead+0xb4>
        i2c_start(clk_base, data_base);  // restart
   85910:	e13ffb17 	ldw	r4,-20(fp)
   85914:	e17ffc17 	ldw	r5,-16(fp)
   85918:	00859e40 	call	859e4 <i2c_start>
    DeviceAddr |= 1; // Read
   8591c:	e0bffd03 	ldbu	r2,-12(fp)
   85920:	10800054 	ori	r2,r2,1
   85924:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   85928:	e0bffa17 	ldw	r2,-24(fp)
   8592c:	10000b26 	beq	r2,zero,8595c <I2C_MultipleRead+0xf4>
   85930:	e0bffd03 	ldbu	r2,-12(fp)
   85934:	10803fcc 	andi	r2,r2,255
   85938:	e13ffb17 	ldw	r4,-20(fp)
   8593c:	e17ffc17 	ldw	r5,-16(fp)
   85940:	100d883a 	mov	r6,r2
   85944:	0085ad80 	call	85ad8 <i2c_write>
   85948:	1000041e 	bne	r2,zero,8595c <I2C_MultipleRead+0xf4>
        bSuccess = FALSE;
   8594c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
   85950:	010002f4 	movhi	r4,11
   85954:	2135e104 	addi	r4,r4,-10364
   85958:	00864d40 	call	864d4 <myprintf>
    }
    
    if (bSuccess){
   8595c:	e0bffa17 	ldw	r2,-24(fp)
   85960:	10001726 	beq	r2,zero,859c0 <I2C_MultipleRead+0x158>
        for(i=0;i<len && bSuccess;i++){
   85964:	e03ff915 	stw	zero,-28(fp)
   85968:	00001006 	br	859ac <I2C_MultipleRead+0x144>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
   8596c:	e0bfff0b 	ldhu	r2,-4(fp)
   85970:	10ffffc4 	addi	r3,r2,-1
   85974:	e0bff917 	ldw	r2,-28(fp)
   85978:	1884c03a 	cmpne	r2,r3,r2
   8597c:	10803fcc 	andi	r2,r2,255
   85980:	e13ffb17 	ldw	r4,-20(fp)
   85984:	e17ffc17 	ldw	r5,-16(fp)
   85988:	e1800217 	ldw	r6,8(fp)
   8598c:	100f883a 	mov	r7,r2
   85990:	0085c440 	call	85c44 <i2c_read>
            pBuf++;
   85994:	e0800217 	ldw	r2,8(fp)
   85998:	10800044 	addi	r2,r2,1
   8599c:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C_MultipleRead(3) Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   859a0:	e0bff917 	ldw	r2,-28(fp)
   859a4:	10800044 	addi	r2,r2,1
   859a8:	e0bff915 	stw	r2,-28(fp)
   859ac:	e0bfff0b 	ldhu	r2,-4(fp)
   859b0:	e0fff917 	ldw	r3,-28(fp)
   859b4:	1880020e 	bge	r3,r2,859c0 <I2C_MultipleRead+0x158>
   859b8:	e0bffa17 	ldw	r2,-24(fp)
   859bc:	103feb1e 	bne	r2,zero,8596c <I2C_MultipleRead+0x104>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
   859c0:	e13ffb17 	ldw	r4,-20(fp)
   859c4:	e17ffc17 	ldw	r5,-16(fp)
   859c8:	0085a680 	call	85a68 <i2c_stop>
    
    return bSuccess;    
   859cc:	e0bffa17 	ldw	r2,-24(fp)
    
}
   859d0:	e037883a 	mov	sp,fp
   859d4:	dfc00117 	ldw	ra,4(sp)
   859d8:	df000017 	ldw	fp,0(sp)
   859dc:	dec00204 	addi	sp,sp,8
   859e0:	f800283a 	ret

000859e4 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
   859e4:	defffc04 	addi	sp,sp,-16
   859e8:	dfc00315 	stw	ra,12(sp)
   859ec:	df000215 	stw	fp,8(sp)
   859f0:	df000204 	addi	fp,sp,8
   859f4:	e13ffe15 	stw	r4,-8(fp)
   859f8:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
   859fc:	e0bfff17 	ldw	r2,-4(fp)
   85a00:	10800104 	addi	r2,r2,4
   85a04:	00c00044 	movi	r3,1
   85a08:	10c00035 	stwio	r3,0(r2)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
   85a0c:	e0bfff17 	ldw	r2,-4(fp)
   85a10:	00c00044 	movi	r3,1
   85a14:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
   85a18:	e0bffe17 	ldw	r2,-8(fp)
   85a1c:	00c00044 	movi	r3,1
   85a20:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   85a24:	01000584 	movi	r4,22
   85a28:	00853500 	call	85350 <my_wait>
     
    SDA_LOW(data_base); // data low
   85a2c:	e0bfff17 	ldw	r2,-4(fp)
   85a30:	0007883a 	mov	r3,zero
   85a34:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
   85a38:	01000584 	movi	r4,22
   85a3c:	00853500 	call	85350 <my_wait>
    SCL_LOW(clk_base); // clock low
   85a40:	e0bffe17 	ldw	r2,-8(fp)
   85a44:	0007883a 	mov	r3,zero
   85a48:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
   85a4c:	01000584 	movi	r4,22
   85a50:	00853500 	call	85350 <my_wait>
}
   85a54:	e037883a 	mov	sp,fp
   85a58:	dfc00117 	ldw	ra,4(sp)
   85a5c:	df000017 	ldw	fp,0(sp)
   85a60:	dec00204 	addi	sp,sp,8
   85a64:	f800283a 	ret

00085a68 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
   85a68:	defffc04 	addi	sp,sp,-16
   85a6c:	dfc00315 	stw	ra,12(sp)
   85a70:	df000215 	stw	fp,8(sp)
   85a74:	df000204 	addi	fp,sp,8
   85a78:	e13ffe15 	stw	r4,-8(fp)
   85a7c:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
   85a80:	e0bfff17 	ldw	r2,-4(fp)
   85a84:	10800104 	addi	r2,r2,4
   85a88:	00c00044 	movi	r3,1
   85a8c:	10c00035 	stwio	r3,0(r2)
    SDA_LOW(data_base); // Data Low
   85a90:	e0bfff17 	ldw	r2,-4(fp)
   85a94:	0007883a 	mov	r3,zero
   85a98:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
   85a9c:	e0bffe17 	ldw	r2,-8(fp)
   85aa0:	00c00044 	movi	r3,1
   85aa4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
   85aa8:	01000584 	movi	r4,22
   85aac:	00853500 	call	85350 <my_wait>
    SDA_HIGH(data_base); // data high
   85ab0:	e0bfff17 	ldw	r2,-4(fp)
   85ab4:	00c00044 	movi	r3,1
   85ab8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
   85abc:	01000584 	movi	r4,22
   85ac0:	00853500 	call	85350 <my_wait>
    

    
}
   85ac4:	e037883a 	mov	sp,fp
   85ac8:	dfc00117 	ldw	ra,4(sp)
   85acc:	df000017 	ldw	fp,0(sp)
   85ad0:	dec00204 	addi	sp,sp,8
   85ad4:	f800283a 	ret

00085ad8 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
   85ad8:	defff704 	addi	sp,sp,-36
   85adc:	dfc00815 	stw	ra,32(sp)
   85ae0:	df000715 	stw	fp,28(sp)
   85ae4:	df000704 	addi	fp,sp,28
   85ae8:	e13ffd15 	stw	r4,-12(fp)
   85aec:	e17ffe15 	stw	r5,-8(fp)
   85af0:	3005883a 	mov	r2,r6
   85af4:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
   85af8:	00bfe004 	movi	r2,-128
   85afc:	e0bff905 	stb	r2,-28(fp)
    int i;
    int w;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
   85b00:	e0bffe17 	ldw	r2,-8(fp)
   85b04:	10800104 	addi	r2,r2,4
   85b08:	00c00044 	movi	r3,1
   85b0c:	10c00035 	stwio	r3,0(r2)
    
    for(i=0;i<8;i++){
   85b10:	e03ffa15 	stw	zero,-24(fp)
   85b14:	00001f06 	br	85b94 <i2c_write+0xbc>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
   85b18:	e0bffd17 	ldw	r2,-12(fp)
   85b1c:	0007883a 	mov	r3,zero
   85b20:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
   85b24:	e0ffff03 	ldbu	r3,-4(fp)
   85b28:	e0bff903 	ldbu	r2,-28(fp)
   85b2c:	1884703a 	and	r2,r3,r2
   85b30:	10803fcc 	andi	r2,r2,255
   85b34:	10000426 	beq	r2,zero,85b48 <i2c_write+0x70>
            SDA_HIGH(data_base);
   85b38:	e0bffe17 	ldw	r2,-8(fp)
   85b3c:	00c00044 	movi	r3,1
   85b40:	10c00035 	stwio	r3,0(r2)
   85b44:	00000306 	br	85b54 <i2c_write+0x7c>
        }else{    
            SDA_LOW(data_base);
   85b48:	e0bffe17 	ldw	r2,-8(fp)
   85b4c:	0007883a 	mov	r3,zero
   85b50:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
   85b54:	e0bff903 	ldbu	r2,-28(fp)
   85b58:	1004d07a 	srli	r2,r2,1
   85b5c:	e0bff905 	stb	r2,-28(fp)
        // clock high
        SCL_HIGH(clk_base);
   85b60:	e0bffd17 	ldw	r2,-12(fp)
   85b64:	00c00044 	movi	r3,1
   85b68:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   85b6c:	01000584 	movi	r4,22
   85b70:	00853500 	call	85350 <my_wait>
        SCL_LOW(clk_base);
   85b74:	e0bffd17 	ldw	r2,-12(fp)
   85b78:	0007883a 	mov	r3,zero
   85b7c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   85b80:	01000584 	movi	r4,22
   85b84:	00853500 	call	85350 <my_wait>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
   85b88:	e0bffa17 	ldw	r2,-24(fp)
   85b8c:	10800044 	addi	r2,r2,1
   85b90:	e0bffa15 	stw	r2,-24(fp)
   85b94:	e0bffa17 	ldw	r2,-24(fp)
   85b98:	10800210 	cmplti	r2,r2,8
   85b9c:	103fde1e 	bne	r2,zero,85b18 <i2c_write+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
   85ba0:	e0bffe17 	ldw	r2,-8(fp)
   85ba4:	10800104 	addi	r2,r2,4
   85ba8:	0007883a 	mov	r3,zero
   85bac:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
//------------------ wait ack for muti-touch panel
SCL_DELAY;
   85bb0:	01000584 	movi	r4,22
   85bb4:	00853500 	call	85350 <my_wait>
w = 0;
   85bb8:	e03ffb15 	stw	zero,-20(fp)
while(SDA_READ(data_base) && w++ < 1000000){
   85bbc:	0001883a 	nop
   85bc0:	e0bffe17 	ldw	r2,-8(fp)
   85bc4:	10800037 	ldwio	r2,0(r2)
   85bc8:	10000926 	beq	r2,zero,85bf0 <i2c_write+0x118>
   85bcc:	e0bffb17 	ldw	r2,-20(fp)
   85bd0:	00c003f4 	movhi	r3,15
   85bd4:	18d08fc4 	addi	r3,r3,16959
   85bd8:	1884403a 	cmpge	r2,r3,r2
   85bdc:	e0fffb17 	ldw	r3,-20(fp)
   85be0:	18c00044 	addi	r3,r3,1
   85be4:	e0fffb15 	stw	r3,-20(fp)
   85be8:	10803fcc 	andi	r2,r2,255
   85bec:	103ff41e 	bne	r2,zero,85bc0 <i2c_write+0xe8>
}    
    // clock high
    SCL_HIGH(clk_base);  // clock high
   85bf0:	e0bffd17 	ldw	r2,-12(fp)
   85bf4:	00c00044 	movi	r3,1
   85bf8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
   85bfc:	01000584 	movi	r4,22
   85c00:	00853500 	call	85350 <my_wait>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
   85c04:	e0bffe17 	ldw	r2,-8(fp)
   85c08:	10800037 	ldwio	r2,0(r2)
   85c0c:	1005003a 	cmpeq	r2,r2,zero
   85c10:	10803fcc 	andi	r2,r2,255
   85c14:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
   85c18:	e0bffd17 	ldw	r2,-12(fp)
   85c1c:	0007883a 	mov	r3,zero
   85c20:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   85c24:	01000584 	movi	r4,22
   85c28:	00853500 	call	85350 <my_wait>
    return bAck;
   85c2c:	e0bffc17 	ldw	r2,-16(fp)
}    
   85c30:	e037883a 	mov	sp,fp
   85c34:	dfc00117 	ldw	ra,4(sp)
   85c38:	df000017 	ldw	fp,0(sp)
   85c3c:	dec00204 	addi	sp,sp,8
   85c40:	f800283a 	ret

00085c44 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
   85c44:	defff804 	addi	sp,sp,-32
   85c48:	dfc00715 	stw	ra,28(sp)
   85c4c:	df000615 	stw	fp,24(sp)
   85c50:	df000604 	addi	fp,sp,24
   85c54:	e13ffc15 	stw	r4,-16(fp)
   85c58:	e17ffd15 	stw	r5,-12(fp)
   85c5c:	e1bffe15 	stw	r6,-8(fp)
   85c60:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
   85c64:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
   85c68:	e0bffd17 	ldw	r2,-12(fp)
   85c6c:	10800104 	addi	r2,r2,4
   85c70:	0007883a 	mov	r3,zero
   85c74:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
   85c78:	e0bffc17 	ldw	r2,-16(fp)
   85c7c:	0007883a 	mov	r3,zero
   85c80:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   85c84:	01000584 	movi	r4,22
   85c88:	00853500 	call	85350 <my_wait>

    for(i=0;i<8;i++){
   85c8c:	e03ffb15 	stw	zero,-20(fp)
   85c90:	00001606 	br	85cec <i2c_read+0xa8>
        Data <<= 1;
   85c94:	e0bffa03 	ldbu	r2,-24(fp)
   85c98:	1085883a 	add	r2,r2,r2
   85c9c:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
   85ca0:	e0bffc17 	ldw	r2,-16(fp)
   85ca4:	00c00044 	movi	r3,1
   85ca8:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   85cac:	01000584 	movi	r4,22
   85cb0:	00853500 	call	85350 <my_wait>
        if (SDA_READ(data_base))  // read data   
   85cb4:	e0bffd17 	ldw	r2,-12(fp)
   85cb8:	10800037 	ldwio	r2,0(r2)
   85cbc:	10000326 	beq	r2,zero,85ccc <i2c_read+0x88>
            Data |= 0x01;
   85cc0:	e0bffa03 	ldbu	r2,-24(fp)
   85cc4:	10800054 	ori	r2,r2,1
   85cc8:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
   85ccc:	e0bffc17 	ldw	r2,-16(fp)
   85cd0:	0007883a 	mov	r3,zero
   85cd4:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
   85cd8:	01000584 	movi	r4,22
   85cdc:	00853500 	call	85350 <my_wait>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
   85ce0:	e0bffb17 	ldw	r2,-20(fp)
   85ce4:	10800044 	addi	r2,r2,1
   85ce8:	e0bffb15 	stw	r2,-20(fp)
   85cec:	e0bffb17 	ldw	r2,-20(fp)
   85cf0:	10800210 	cmplti	r2,r2,8
   85cf4:	103fe71e 	bne	r2,zero,85c94 <i2c_read+0x50>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
   85cf8:	e0bffc17 	ldw	r2,-16(fp)
   85cfc:	0007883a 	mov	r3,zero
   85d00:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
   85d04:	e0bffd17 	ldw	r2,-12(fp)
   85d08:	10800104 	addi	r2,r2,4
   85d0c:	00c00044 	movi	r3,1
   85d10:	10c00035 	stwio	r3,0(r2)
    if (bAck)
   85d14:	e0bfff17 	ldw	r2,-4(fp)
   85d18:	10000426 	beq	r2,zero,85d2c <i2c_read+0xe8>
        SDA_LOW(data_base);
   85d1c:	e0bffd17 	ldw	r2,-12(fp)
   85d20:	0007883a 	mov	r3,zero
   85d24:	10c00035 	stwio	r3,0(r2)
   85d28:	00000306 	br	85d38 <i2c_read+0xf4>
    else
        SDA_HIGH(data_base);
   85d2c:	e0bffd17 	ldw	r2,-12(fp)
   85d30:	00c00044 	movi	r3,1
   85d34:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
   85d38:	e0bffc17 	ldw	r2,-16(fp)
   85d3c:	00c00044 	movi	r3,1
   85d40:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
   85d44:	01000584 	movi	r4,22
   85d48:	00853500 	call	85350 <my_wait>
    SCL_LOW(clk_base); // clock low
   85d4c:	e0bffc17 	ldw	r2,-16(fp)
   85d50:	0007883a 	mov	r3,zero
   85d54:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
   85d58:	01000584 	movi	r4,22
   85d5c:	00853500 	call	85350 <my_wait>
    SDA_LOW(data_base);  // data low
   85d60:	e0bffd17 	ldw	r2,-12(fp)
   85d64:	0007883a 	mov	r3,zero
   85d68:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
   85d6c:	01000584 	movi	r4,22
   85d70:	00853500 	call	85350 <my_wait>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
   85d74:	e0bffe17 	ldw	r2,-8(fp)
   85d78:	e0fffa03 	ldbu	r3,-24(fp)
   85d7c:	10c00005 	stb	r3,0(r2)
}
   85d80:	e037883a 	mov	sp,fp
   85d84:	dfc00117 	ldw	ra,4(sp)
   85d88:	df000017 	ldw	fp,0(sp)
   85d8c:	dec00204 	addi	sp,sp,8
   85d90:	f800283a 	ret

00085d94 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
   85d94:	defff704 	addi	sp,sp,-36
   85d98:	dfc00815 	stw	ra,32(sp)
   85d9c:	df000715 	stw	fp,28(sp)
   85da0:	df000704 	addi	fp,sp,28
   85da4:	e13ffb15 	stw	r4,-20(fp)
   85da8:	e17ffc15 	stw	r5,-16(fp)
   85dac:	3007883a 	mov	r3,r6
   85db0:	3805883a 	mov	r2,r7
   85db4:	e1000217 	ldw	r4,8(fp)
   85db8:	e0fffd05 	stb	r3,-12(fp)
   85dbc:	e0bffe0d 	sth	r2,-8(fp)
   85dc0:	e13fff05 	stb	r4,-4(fp)
    bool bSuccess = TRUE;
   85dc4:	00800044 	movi	r2,1
   85dc8:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   85dcc:	e0bffe0b 	ldhu	r2,-8(fp)
   85dd0:	1004d23a 	srli	r2,r2,8
   85dd4:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
   85dd8:	e0bffe0b 	ldhu	r2,-8(fp)
   85ddc:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   85de0:	e13ffb17 	ldw	r4,-20(fp)
   85de4:	e17ffc17 	ldw	r5,-16(fp)
   85de8:	00859e40 	call	859e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   85dec:	e0bffd03 	ldbu	r2,-12(fp)
   85df0:	10803fcc 	andi	r2,r2,255
   85df4:	e13ffb17 	ldw	r4,-20(fp)
   85df8:	e17ffc17 	ldw	r5,-16(fp)
   85dfc:	100d883a 	mov	r6,r2
   85e00:	0085ad80 	call	85ad8 <i2c_write>
   85e04:	1000041e 	bne	r2,zero,85e18 <I2CL_Write+0x84>
        bSuccess = FALSE;
   85e08:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   85e0c:	010002f4 	movhi	r4,11
   85e10:	21358e04 	addi	r4,r4,-10696
   85e14:	00864d40 	call	864d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   85e18:	e0bff917 	ldw	r2,-28(fp)
   85e1c:	10000a26 	beq	r2,zero,85e48 <I2CL_Write+0xb4>
   85e20:	e0bffa03 	ldbu	r2,-24(fp)
   85e24:	e13ffb17 	ldw	r4,-20(fp)
   85e28:	e17ffc17 	ldw	r5,-16(fp)
   85e2c:	100d883a 	mov	r6,r2
   85e30:	0085ad80 	call	85ad8 <i2c_write>
   85e34:	1000041e 	bne	r2,zero,85e48 <I2CL_Write+0xb4>
        bSuccess = FALSE;
   85e38:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   85e3c:	010002f4 	movhi	r4,11
   85e40:	2135ec04 	addi	r4,r4,-10320
   85e44:	00864d40 	call	864d4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   85e48:	e0bff917 	ldw	r2,-28(fp)
   85e4c:	10000a26 	beq	r2,zero,85e78 <I2CL_Write+0xe4>
   85e50:	e0bffa43 	ldbu	r2,-23(fp)
   85e54:	e13ffb17 	ldw	r4,-20(fp)
   85e58:	e17ffc17 	ldw	r5,-16(fp)
   85e5c:	100d883a 	mov	r6,r2
   85e60:	0085ad80 	call	85ad8 <i2c_write>
   85e64:	1000041e 	bne	r2,zero,85e78 <I2CL_Write+0xe4>
        bSuccess = FALSE;
   85e68:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   85e6c:	010002f4 	movhi	r4,11
   85e70:	2135f604 	addi	r4,r4,-10280
   85e74:	00864d40 	call	864d4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
   85e78:	e0bff917 	ldw	r2,-28(fp)
   85e7c:	10000a26 	beq	r2,zero,85ea8 <I2CL_Write+0x114>
   85e80:	e0bfff03 	ldbu	r2,-4(fp)
   85e84:	e13ffb17 	ldw	r4,-20(fp)
   85e88:	e17ffc17 	ldw	r5,-16(fp)
   85e8c:	100d883a 	mov	r6,r2
   85e90:	0085ad80 	call	85ad8 <i2c_write>
   85e94:	1000041e 	bne	r2,zero,85ea8 <I2CL_Write+0x114>
        bSuccess = FALSE;
   85e98:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   85e9c:	010002f4 	movhi	r4,11
   85ea0:	21359f04 	addi	r4,r4,-10628
   85ea4:	00864d40 	call	864d4 <myprintf>
    }
    i2c_stop(clk_base, data_base);
   85ea8:	e13ffb17 	ldw	r4,-20(fp)
   85eac:	e17ffc17 	ldw	r5,-16(fp)
   85eb0:	0085a680 	call	85a68 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   85eb4:	0106d604 	movi	r4,7000
   85eb8:	0091a700 	call	91a70 <usleep>
    
    return bSuccess;
   85ebc:	e0bff917 	ldw	r2,-28(fp)
    
}
   85ec0:	e037883a 	mov	sp,fp
   85ec4:	dfc00117 	ldw	ra,4(sp)
   85ec8:	df000017 	ldw	fp,0(sp)
   85ecc:	dec00204 	addi	sp,sp,8
   85ed0:	f800283a 	ret

00085ed4 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
   85ed4:	defff804 	addi	sp,sp,-32
   85ed8:	dfc00715 	stw	ra,28(sp)
   85edc:	df000615 	stw	fp,24(sp)
   85ee0:	df000604 	addi	fp,sp,24
   85ee4:	e13ffc15 	stw	r4,-16(fp)
   85ee8:	e17ffd15 	stw	r5,-12(fp)
   85eec:	3007883a 	mov	r3,r6
   85ef0:	3805883a 	mov	r2,r7
   85ef4:	e0fffe05 	stb	r3,-8(fp)
   85ef8:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
   85efc:	00800044 	movi	r2,1
   85f00:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   85f04:	e0bfff0b 	ldhu	r2,-4(fp)
   85f08:	1004d23a 	srli	r2,r2,8
   85f0c:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
   85f10:	e0bfff0b 	ldhu	r2,-4(fp)
   85f14:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
   85f18:	e13ffc17 	ldw	r4,-16(fp)
   85f1c:	e17ffd17 	ldw	r5,-12(fp)
   85f20:	00859e40 	call	859e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   85f24:	e0bffe03 	ldbu	r2,-8(fp)
   85f28:	10803fcc 	andi	r2,r2,255
   85f2c:	e13ffc17 	ldw	r4,-16(fp)
   85f30:	e17ffd17 	ldw	r5,-12(fp)
   85f34:	100d883a 	mov	r6,r2
   85f38:	0085ad80 	call	85ad8 <i2c_write>
   85f3c:	1000041e 	bne	r2,zero,85f50 <I2CL_Read+0x7c>
        bSuccess = FALSE;
   85f40:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   85f44:	010002f4 	movhi	r4,11
   85f48:	21358e04 	addi	r4,r4,-10696
   85f4c:	00864d40 	call	864d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   85f50:	e0bffa17 	ldw	r2,-24(fp)
   85f54:	10000a26 	beq	r2,zero,85f80 <I2CL_Read+0xac>
   85f58:	e0bffb03 	ldbu	r2,-20(fp)
   85f5c:	e13ffc17 	ldw	r4,-16(fp)
   85f60:	e17ffd17 	ldw	r5,-12(fp)
   85f64:	100d883a 	mov	r6,r2
   85f68:	0085ad80 	call	85ad8 <i2c_write>
   85f6c:	1000041e 	bne	r2,zero,85f80 <I2CL_Read+0xac>
        bSuccess = FALSE;
   85f70:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   85f74:	010002f4 	movhi	r4,11
   85f78:	2135ec04 	addi	r4,r4,-10320
   85f7c:	00864d40 	call	864d4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   85f80:	e0bffa17 	ldw	r2,-24(fp)
   85f84:	10000a26 	beq	r2,zero,85fb0 <I2CL_Read+0xdc>
   85f88:	e0bffb43 	ldbu	r2,-19(fp)
   85f8c:	e13ffc17 	ldw	r4,-16(fp)
   85f90:	e17ffd17 	ldw	r5,-12(fp)
   85f94:	100d883a 	mov	r6,r2
   85f98:	0085ad80 	call	85ad8 <i2c_write>
   85f9c:	1000041e 	bne	r2,zero,85fb0 <I2CL_Read+0xdc>
        bSuccess = FALSE;
   85fa0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   85fa4:	010002f4 	movhi	r4,11
   85fa8:	2135f604 	addi	r4,r4,-10280
   85fac:	00864d40 	call	864d4 <myprintf>
    }            
    i2c_start(clk_base, data_base);  // restart
   85fb0:	e13ffc17 	ldw	r4,-16(fp)
   85fb4:	e17ffd17 	ldw	r5,-12(fp)
   85fb8:	00859e40 	call	859e4 <i2c_start>
    DeviceAddr |= 1; // Read
   85fbc:	e0bffe03 	ldbu	r2,-8(fp)
   85fc0:	10800054 	ori	r2,r2,1
   85fc4:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   85fc8:	e0bffa17 	ldw	r2,-24(fp)
   85fcc:	10000b26 	beq	r2,zero,85ffc <I2CL_Read+0x128>
   85fd0:	e0bffe03 	ldbu	r2,-8(fp)
   85fd4:	10803fcc 	andi	r2,r2,255
   85fd8:	e13ffc17 	ldw	r4,-16(fp)
   85fdc:	e17ffd17 	ldw	r5,-12(fp)
   85fe0:	100d883a 	mov	r6,r2
   85fe4:	0085ad80 	call	85ad8 <i2c_write>
   85fe8:	1000041e 	bne	r2,zero,85ffc <I2CL_Read+0x128>
        bSuccess = FALSE;
   85fec:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
   85ff0:	010002f4 	movhi	r4,11
   85ff4:	2135c204 	addi	r4,r4,-10488
   85ff8:	00864d40 	call	864d4 <myprintf>
    }
    
    if (bSuccess){
   85ffc:	e0bffa17 	ldw	r2,-24(fp)
   86000:	10000526 	beq	r2,zero,86018 <I2CL_Read+0x144>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
   86004:	e13ffc17 	ldw	r4,-16(fp)
   86008:	e17ffd17 	ldw	r5,-12(fp)
   8600c:	e1800217 	ldw	r6,8(fp)
   86010:	000f883a 	mov	r7,zero
   86014:	0085c440 	call	85c44 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
   86018:	e13ffc17 	ldw	r4,-16(fp)
   8601c:	e17ffd17 	ldw	r5,-12(fp)
   86020:	0085a680 	call	85a68 <i2c_stop>
    
    return bSuccess;    
   86024:	e0bffa17 	ldw	r2,-24(fp)
}
   86028:	e037883a 	mov	sp,fp
   8602c:	dfc00117 	ldw	ra,4(sp)
   86030:	df000017 	ldw	fp,0(sp)
   86034:	dec00204 	addi	sp,sp,8
   86038:	f800283a 	ret

0008603c <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
   8603c:	defff604 	addi	sp,sp,-40
   86040:	dfc00915 	stw	ra,36(sp)
   86044:	df000815 	stw	fp,32(sp)
   86048:	df000804 	addi	fp,sp,32
   8604c:	e13ffb15 	stw	r4,-20(fp)
   86050:	e17ffc15 	stw	r5,-16(fp)
   86054:	3007883a 	mov	r3,r6
   86058:	3805883a 	mov	r2,r7
   8605c:	e1000317 	ldw	r4,12(fp)
   86060:	e0fffd05 	stb	r3,-12(fp)
   86064:	e0bffe0d 	sth	r2,-8(fp)
   86068:	e13fff0d 	sth	r4,-4(fp)
    int i;
    bool bSuccess = TRUE;
   8606c:	00800044 	movi	r2,1
   86070:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   86074:	e0bffe0b 	ldhu	r2,-8(fp)
   86078:	1004d23a 	srli	r2,r2,8
   8607c:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;     
   86080:	e0bffe0b 	ldhu	r2,-8(fp)
   86084:	e0bffa45 	stb	r2,-23(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
   86088:	e13ffb17 	ldw	r4,-20(fp)
   8608c:	e17ffc17 	ldw	r5,-16(fp)
   86090:	00859e40 	call	859e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   86094:	e0bffd03 	ldbu	r2,-12(fp)
   86098:	10803fcc 	andi	r2,r2,255
   8609c:	e13ffb17 	ldw	r4,-20(fp)
   860a0:	e17ffc17 	ldw	r5,-16(fp)
   860a4:	100d883a 	mov	r6,r2
   860a8:	0085ad80 	call	85ad8 <i2c_write>
   860ac:	1000041e 	bne	r2,zero,860c0 <I2CL_MultipleRead+0x84>
        bSuccess = FALSE;
   860b0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   860b4:	010002f4 	movhi	r4,11
   860b8:	21358e04 	addi	r4,r4,-10696
   860bc:	00864d40 	call	864d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   860c0:	e0bff917 	ldw	r2,-28(fp)
   860c4:	10000a26 	beq	r2,zero,860f0 <I2CL_MultipleRead+0xb4>
   860c8:	e0bffa03 	ldbu	r2,-24(fp)
   860cc:	e13ffb17 	ldw	r4,-20(fp)
   860d0:	e17ffc17 	ldw	r5,-16(fp)
   860d4:	100d883a 	mov	r6,r2
   860d8:	0085ad80 	call	85ad8 <i2c_write>
   860dc:	1000041e 	bne	r2,zero,860f0 <I2CL_MultipleRead+0xb4>
        bSuccess = FALSE;
   860e0:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   860e4:	010002f4 	movhi	r4,11
   860e8:	2135ec04 	addi	r4,r4,-10320
   860ec:	00864d40 	call	864d4 <myprintf>
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   860f0:	e0bff917 	ldw	r2,-28(fp)
   860f4:	10000a26 	beq	r2,zero,86120 <I2CL_MultipleRead+0xe4>
   860f8:	e0bffa43 	ldbu	r2,-23(fp)
   860fc:	e13ffb17 	ldw	r4,-20(fp)
   86100:	e17ffc17 	ldw	r5,-16(fp)
   86104:	100d883a 	mov	r6,r2
   86108:	0085ad80 	call	85ad8 <i2c_write>
   8610c:	1000041e 	bne	r2,zero,86120 <I2CL_MultipleRead+0xe4>
        bSuccess = FALSE;
   86110:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   86114:	010002f4 	movhi	r4,11
   86118:	2135f604 	addi	r4,r4,-10280
   8611c:	00864d40 	call	864d4 <myprintf>
    }    
    if (bSuccess)        
   86120:	e0bff917 	ldw	r2,-28(fp)
   86124:	10000326 	beq	r2,zero,86134 <I2CL_MultipleRead+0xf8>
        i2c_start(clk_base, data_base);  // restart
   86128:	e13ffb17 	ldw	r4,-20(fp)
   8612c:	e17ffc17 	ldw	r5,-16(fp)
   86130:	00859e40 	call	859e4 <i2c_start>
    DeviceAddr |= 1; // Read
   86134:	e0bffd03 	ldbu	r2,-12(fp)
   86138:	10800054 	ori	r2,r2,1
   8613c:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
   86140:	e0bff917 	ldw	r2,-28(fp)
   86144:	10000b26 	beq	r2,zero,86174 <I2CL_MultipleRead+0x138>
   86148:	e0bffd03 	ldbu	r2,-12(fp)
   8614c:	10803fcc 	andi	r2,r2,255
   86150:	e13ffb17 	ldw	r4,-20(fp)
   86154:	e17ffc17 	ldw	r5,-16(fp)
   86158:	100d883a 	mov	r6,r2
   8615c:	0085ad80 	call	85ad8 <i2c_write>
   86160:	1000041e 	bne	r2,zero,86174 <I2CL_MultipleRead+0x138>
        bSuccess = FALSE;
   86164:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
   86168:	010002f4 	movhi	r4,11
   8616c:	21360004 	addi	r4,r4,-10240
   86170:	00864d40 	call	864d4 <myprintf>
    }
    
    if (bSuccess){
   86174:	e0bff917 	ldw	r2,-28(fp)
   86178:	10001726 	beq	r2,zero,861d8 <I2CL_MultipleRead+0x19c>
        for(i=0;i<len && bSuccess;i++){
   8617c:	e03ff815 	stw	zero,-32(fp)
   86180:	00001006 	br	861c4 <I2CL_MultipleRead+0x188>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
   86184:	e0bff817 	ldw	r2,-32(fp)
   86188:	e0c00217 	ldw	r3,8(fp)
   8618c:	1887883a 	add	r3,r3,r2
   86190:	e0bfff0b 	ldhu	r2,-4(fp)
   86194:	113fffc4 	addi	r4,r2,-1
   86198:	e0bff817 	ldw	r2,-32(fp)
   8619c:	2084c03a 	cmpne	r2,r4,r2
   861a0:	10803fcc 	andi	r2,r2,255
   861a4:	e13ffb17 	ldw	r4,-20(fp)
   861a8:	e17ffc17 	ldw	r5,-16(fp)
   861ac:	180d883a 	mov	r6,r3
   861b0:	100f883a 	mov	r7,r2
   861b4:	0085c440 	call	85c44 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2CL_MultipleRead Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
   861b8:	e0bff817 	ldw	r2,-32(fp)
   861bc:	10800044 	addi	r2,r2,1
   861c0:	e0bff815 	stw	r2,-32(fp)
   861c4:	e0bfff0b 	ldhu	r2,-4(fp)
   861c8:	e0fff817 	ldw	r3,-32(fp)
   861cc:	1880020e 	bge	r3,r2,861d8 <I2CL_MultipleRead+0x19c>
   861d0:	e0bff917 	ldw	r2,-28(fp)
   861d4:	103feb1e 	bne	r2,zero,86184 <I2CL_MultipleRead+0x148>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
   861d8:	e13ffb17 	ldw	r4,-20(fp)
   861dc:	e17ffc17 	ldw	r5,-16(fp)
   861e0:	0085a680 	call	85a68 <i2c_stop>
    
    return bSuccess;    
   861e4:	e0bff917 	ldw	r2,-28(fp)
    
} 
   861e8:	e037883a 	mov	sp,fp
   861ec:	dfc00117 	ldw	ra,4(sp)
   861f0:	df000017 	ldw	fp,0(sp)
   861f4:	dec00204 	addi	sp,sp,8
   861f8:	f800283a 	ret

000861fc <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
   861fc:	defff604 	addi	sp,sp,-40
   86200:	dfc00915 	stw	ra,36(sp)
   86204:	df000815 	stw	fp,32(sp)
   86208:	df000804 	addi	fp,sp,32
   8620c:	e13ffb15 	stw	r4,-20(fp)
   86210:	e17ffc15 	stw	r5,-16(fp)
   86214:	3007883a 	mov	r3,r6
   86218:	3805883a 	mov	r2,r7
   8621c:	e1000317 	ldw	r4,12(fp)
   86220:	e0fffd05 	stb	r3,-12(fp)
   86224:	e0bffe0d 	sth	r2,-8(fp)
   86228:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess = TRUE;
   8622c:	00800044 	movi	r2,1
   86230:	e0bff815 	stw	r2,-32(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
   86234:	e0bffe0b 	ldhu	r2,-8(fp)
   86238:	1004d23a 	srli	r2,r2,8
   8623c:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
   86240:	e0bffe0b 	ldhu	r2,-8(fp)
   86244:	e0bffa45 	stb	r2,-23(fp)
    

    i2c_start(clk_base, data_base);
   86248:	e13ffb17 	ldw	r4,-20(fp)
   8624c:	e17ffc17 	ldw	r5,-16(fp)
   86250:	00859e40 	call	859e4 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
   86254:	e0bffd03 	ldbu	r2,-12(fp)
   86258:	10803fcc 	andi	r2,r2,255
   8625c:	e13ffb17 	ldw	r4,-20(fp)
   86260:	e17ffc17 	ldw	r5,-16(fp)
   86264:	100d883a 	mov	r6,r2
   86268:	0085ad80 	call	85ad8 <i2c_write>
   8626c:	1000041e 	bne	r2,zero,86280 <I2CL_MultipleWrite+0x84>
        bSuccess = FALSE;
   86270:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
   86274:	010002f4 	movhi	r4,11
   86278:	21358e04 	addi	r4,r4,-10696
   8627c:	00864d40 	call	864d4 <myprintf>
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
   86280:	e0bff817 	ldw	r2,-32(fp)
   86284:	10000a26 	beq	r2,zero,862b0 <I2CL_MultipleWrite+0xb4>
   86288:	e0bffa03 	ldbu	r2,-24(fp)
   8628c:	e13ffb17 	ldw	r4,-20(fp)
   86290:	e17ffc17 	ldw	r5,-16(fp)
   86294:	100d883a 	mov	r6,r2
   86298:	0085ad80 	call	85ad8 <i2c_write>
   8629c:	1000041e 	bne	r2,zero,862b0 <I2CL_MultipleWrite+0xb4>
        bSuccess = FALSE;
   862a0:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
   862a4:	010002f4 	movhi	r4,11
   862a8:	2135ec04 	addi	r4,r4,-10320
   862ac:	00864d40 	call	864d4 <myprintf>
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
   862b0:	e0bff817 	ldw	r2,-32(fp)
   862b4:	10000a26 	beq	r2,zero,862e0 <I2CL_MultipleWrite+0xe4>
   862b8:	e0bffa43 	ldbu	r2,-23(fp)
   862bc:	e13ffb17 	ldw	r4,-20(fp)
   862c0:	e17ffc17 	ldw	r5,-16(fp)
   862c4:	100d883a 	mov	r6,r2
   862c8:	0085ad80 	call	85ad8 <i2c_write>
   862cc:	1000041e 	bne	r2,zero,862e0 <I2CL_MultipleWrite+0xe4>
        bSuccess = FALSE;
   862d0:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
   862d4:	010002f4 	movhi	r4,11
   862d8:	2135f604 	addi	r4,r4,-10280
   862dc:	00864d40 	call	864d4 <myprintf>
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
   862e0:	e0bff817 	ldw	r2,-32(fp)
   862e4:	10001926 	beq	r2,zero,8634c <I2CL_MultipleWrite+0x150>
        for(i=0;i<len && bSuccess;i++){
   862e8:	e03ff915 	stw	zero,-28(fp)
   862ec:	00000d06 	br	86324 <I2CL_MultipleWrite+0x128>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
   862f0:	e0bff917 	ldw	r2,-28(fp)
   862f4:	e0c00217 	ldw	r3,8(fp)
   862f8:	1885883a 	add	r2,r3,r2
   862fc:	10800003 	ldbu	r2,0(r2)
   86300:	10803fcc 	andi	r2,r2,255
   86304:	e13ffb17 	ldw	r4,-20(fp)
   86308:	e17ffc17 	ldw	r5,-16(fp)
   8630c:	100d883a 	mov	r6,r2
   86310:	0085ad80 	call	85ad8 <i2c_write>
   86314:	e0bff815 	stw	r2,-32(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
   86318:	e0bff917 	ldw	r2,-28(fp)
   8631c:	10800044 	addi	r2,r2,1
   86320:	e0bff915 	stw	r2,-28(fp)
   86324:	e0bfff0b 	ldhu	r2,-4(fp)
   86328:	e0fff917 	ldw	r3,-28(fp)
   8632c:	1880020e 	bge	r3,r2,86338 <I2CL_MultipleWrite+0x13c>
   86330:	e0bff817 	ldw	r2,-32(fp)
   86334:	103fee1e 	bne	r2,zero,862f0 <I2CL_MultipleWrite+0xf4>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
   86338:	e0bff817 	ldw	r2,-32(fp)
   8633c:	1000031e 	bne	r2,zero,8634c <I2CL_MultipleWrite+0x150>
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
   86340:	010002f4 	movhi	r4,11
   86344:	21359f04 	addi	r4,r4,-10628
   86348:	00864d40 	call	864d4 <myprintf>
    }
    i2c_stop(clk_base, data_base);
   8634c:	e13ffb17 	ldw	r4,-20(fp)
   86350:	e17ffc17 	ldw	r5,-16(fp)
   86354:	0085a680 	call	85a68 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
   86358:	0106d604 	movi	r4,7000
   8635c:	0091a700 	call	91a70 <usleep>
    
    return bSuccess;
   86360:	e0bff817 	ldw	r2,-32(fp)
    
}
   86364:	e037883a 	mov	sp,fp
   86368:	dfc00117 	ldw	ra,4(sp)
   8636c:	df000017 	ldw	fp,0(sp)
   86370:	dec00204 	addi	sp,sp,8
   86374:	f800283a 	ret

00086378 <I2CL_Read16>:
 


bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
   86378:	defff604 	addi	sp,sp,-40
   8637c:	dfc00915 	stw	ra,36(sp)
   86380:	df000815 	stw	fp,32(sp)
   86384:	df000804 	addi	fp,sp,32
   86388:	e13ffc15 	stw	r4,-16(fp)
   8638c:	e17ffd15 	stw	r5,-12(fp)
   86390:	3007883a 	mov	r3,r6
   86394:	3805883a 	mov	r2,r7
   86398:	e0fffe05 	stb	r3,-8(fp)
   8639c:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
   863a0:	e0fffe07 	ldb	r3,-8(fp)
   863a4:	e0bfff0b 	ldhu	r2,-4(fp)
   863a8:	e13ffb04 	addi	r4,fp,-20
   863ac:	d9000015 	stw	r4,0(sp)
   863b0:	01000084 	movi	r4,2
   863b4:	d9000115 	stw	r4,4(sp)
   863b8:	e13ffc17 	ldw	r4,-16(fp)
   863bc:	e17ffd17 	ldw	r5,-12(fp)
   863c0:	180d883a 	mov	r6,r3
   863c4:	100f883a 	mov	r7,r2
   863c8:	008603c0 	call	8603c <I2CL_MultipleRead>
   863cc:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
   863d0:	e0bffa17 	ldw	r2,-24(fp)
   863d4:	10000a26 	beq	r2,zero,86400 <I2CL_Read16+0x88>
        *pControlData = (szData[0] << 8 ) | szData[1];
   863d8:	e0bffb03 	ldbu	r2,-20(fp)
   863dc:	10803fcc 	andi	r2,r2,255
   863e0:	1004923a 	slli	r2,r2,8
   863e4:	1007883a 	mov	r3,r2
   863e8:	e0bffb43 	ldbu	r2,-19(fp)
   863ec:	10803fcc 	andi	r2,r2,255
   863f0:	1884b03a 	or	r2,r3,r2
   863f4:	1007883a 	mov	r3,r2
   863f8:	e0800217 	ldw	r2,8(fp)
   863fc:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
   86400:	e0bffa17 	ldw	r2,-24(fp)
}
   86404:	e037883a 	mov	sp,fp
   86408:	dfc00117 	ldw	ra,4(sp)
   8640c:	df000017 	ldw	fp,0(sp)
   86410:	dec00204 	addi	sp,sp,8
   86414:	f800283a 	ret

00086418 <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
   86418:	defff504 	addi	sp,sp,-44
   8641c:	dfc00a15 	stw	ra,40(sp)
   86420:	df000915 	stw	fp,36(sp)
   86424:	df000904 	addi	fp,sp,36
   86428:	e13ffb15 	stw	r4,-20(fp)
   8642c:	e17ffc15 	stw	r5,-16(fp)
   86430:	3007883a 	mov	r3,r6
   86434:	3805883a 	mov	r2,r7
   86438:	e1000217 	ldw	r4,8(fp)
   8643c:	e0fffd05 	stb	r3,-12(fp)
   86440:	e0bffe0d 	sth	r2,-8(fp)
   86444:	e13fff0d 	sth	r4,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
   86448:	e0bfff0b 	ldhu	r2,-4(fp)
   8644c:	1004d23a 	srli	r2,r2,8
   86450:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
   86454:	e0bfff0b 	ldhu	r2,-4(fp)
   86458:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
   8645c:	e0fffd07 	ldb	r3,-12(fp)
   86460:	e0bffe0b 	ldhu	r2,-8(fp)
   86464:	e13ffa04 	addi	r4,fp,-24
   86468:	d9000015 	stw	r4,0(sp)
   8646c:	01000084 	movi	r4,2
   86470:	d9000115 	stw	r4,4(sp)
   86474:	e13ffb17 	ldw	r4,-20(fp)
   86478:	e17ffc17 	ldw	r5,-16(fp)
   8647c:	180d883a 	mov	r6,r3
   86480:	100f883a 	mov	r7,r2
   86484:	00861fc0 	call	861fc <I2CL_MultipleWrite>
   86488:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
   8648c:	e0bff917 	ldw	r2,-28(fp)
}
   86490:	e037883a 	mov	sp,fp
   86494:	dfc00117 	ldw	ra,4(sp)
   86498:	df000017 	ldw	fp,0(sp)
   8649c:	dec00204 	addi	sp,sp,8
   864a0:	f800283a 	ret

000864a4 <debug_output>:
    UART_WriteString(pMessage);  // UART debug
}

#else

void debug_output(char *pMessage){
   864a4:	defffd04 	addi	sp,sp,-12
   864a8:	dfc00215 	stw	ra,8(sp)
   864ac:	df000115 	stw	fp,4(sp)
   864b0:	df000104 	addi	fp,sp,4
   864b4:	e13fff15 	stw	r4,-4(fp)
    
    printf(pMessage);
   864b8:	e13fff17 	ldw	r4,-4(fp)
   864bc:	00892840 	call	89284 <printf>
}
   864c0:	e037883a 	mov	sp,fp
   864c4:	dfc00117 	ldw	ra,4(sp)
   864c8:	df000017 	ldw	fp,0(sp)
   864cc:	dec00204 	addi	sp,sp,8
   864d0:	f800283a 	ret

000864d4 <myprintf>:





int myprintf(char *format, ...){
   864d4:	deff7804 	addi	sp,sp,-544
   864d8:	dfc08415 	stw	ra,528(sp)
   864dc:	df008315 	stw	fp,524(sp)
   864e0:	df008304 	addi	fp,sp,524
   864e4:	e1400215 	stw	r5,8(fp)
   864e8:	e1800315 	stw	r6,12(fp)
   864ec:	e1c00415 	stw	r7,16(fp)
   864f0:	e13fff15 	stw	r4,-4(fp)
    int rc;
    char szText[512];
    
    va_list paramList;
    va_start(paramList, format);
   864f4:	e0800204 	addi	r2,fp,8
   864f8:	e0bffe15 	stw	r2,-8(fp)
    rc = vsnprintf(szText, 512, format, paramList);
   864fc:	e0bffe17 	ldw	r2,-8(fp)
   86500:	e0ff7e04 	addi	r3,fp,-520
   86504:	1809883a 	mov	r4,r3
   86508:	01408004 	movi	r5,512
   8650c:	e1bfff17 	ldw	r6,-4(fp)
   86510:	100f883a 	mov	r7,r2
   86514:	008b49c0 	call	8b49c <vsnprintf>
   86518:	e0bf7d15 	stw	r2,-524(fp)
    va_end(paramList);
    
    debug_output(szText);
   8651c:	e0bf7e04 	addi	r2,fp,-520
   86520:	1009883a 	mov	r4,r2
   86524:	00864a40 	call	864a4 <debug_output>

    return rc;    
   86528:	e0bf7d17 	ldw	r2,-524(fp)
}
   8652c:	e037883a 	mov	sp,fp
   86530:	dfc00117 	ldw	ra,4(sp)
   86534:	df000017 	ldw	fp,0(sp)
   86538:	dec00504 	addi	sp,sp,20
   8653c:	f800283a 	ret

00086540 <myprintf_hexarray>:


int myprintf_hexarray(unsigned char *pHex, int len){
   86540:	defff704 	addi	sp,sp,-36
   86544:	dfc00815 	stw	ra,32(sp)
   86548:	df000715 	stw	fp,28(sp)
   8654c:	df000704 	addi	fp,sp,28
   86550:	e13ffe15 	stw	r4,-8(fp)
   86554:	e17fff15 	stw	r5,-4(fp)
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   86558:	e03ff915 	stw	zero,-28(fp)
   8655c:	00001106 	br	865a4 <myprintf_hexarray+0x64>
        sprintf(szText, "[%02X]", *(pHex+i));
   86560:	e0bff917 	ldw	r2,-28(fp)
   86564:	e0fffe17 	ldw	r3,-8(fp)
   86568:	1885883a 	add	r2,r3,r2
   8656c:	10800003 	ldbu	r2,0(r2)
   86570:	10803fcc 	andi	r2,r2,255
   86574:	e0fffa04 	addi	r3,fp,-24
   86578:	1809883a 	mov	r4,r3
   8657c:	014002f4 	movhi	r5,11
   86580:	29760b04 	addi	r5,r5,-10196
   86584:	100d883a 	mov	r6,r2
   86588:	00894140 	call	89414 <sprintf>
        DEBUG((szText));
   8658c:	e0bffa04 	addi	r2,fp,-24
   86590:	1009883a 	mov	r4,r2
   86594:	00864d40 	call	864d4 <myprintf>


int myprintf_hexarray(unsigned char *pHex, int len){
    int i;
    unsigned char szText[16];
    for(i=0;i<len;i++){
   86598:	e0bff917 	ldw	r2,-28(fp)
   8659c:	10800044 	addi	r2,r2,1
   865a0:	e0bff915 	stw	r2,-28(fp)
   865a4:	e0fff917 	ldw	r3,-28(fp)
   865a8:	e0bfff17 	ldw	r2,-4(fp)
   865ac:	18bfec16 	blt	r3,r2,86560 <myprintf_hexarray+0x20>
        sprintf(szText, "[%02X]", *(pHex+i));
        DEBUG((szText));
    }
    return len;
   865b0:	e0bfff17 	ldw	r2,-4(fp)
}
   865b4:	e037883a 	mov	sp,fp
   865b8:	dfc00117 	ldw	ra,4(sp)
   865bc:	df000017 	ldw	fp,0(sp)
   865c0:	dec00204 	addi	sp,sp,8
   865c4:	f800283a 	ret

000865c8 <myprintf_dwordarray>:

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
   865c8:	defff704 	addi	sp,sp,-36
   865cc:	dfc00815 	stw	ra,32(sp)
   865d0:	df000715 	stw	fp,28(sp)
   865d4:	df000704 	addi	fp,sp,28
   865d8:	e13ffe15 	stw	r4,-8(fp)
   865dc:	e17fff15 	stw	r5,-4(fp)
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   865e0:	e03ff915 	stw	zero,-28(fp)
   865e4:	00001206 	br	86630 <myprintf_dwordarray+0x68>
        sprintf(szText, "[%08X]", *(pArray+i));
   865e8:	e0bff917 	ldw	r2,-28(fp)
   865ec:	1085883a 	add	r2,r2,r2
   865f0:	1085883a 	add	r2,r2,r2
   865f4:	e0fffe17 	ldw	r3,-8(fp)
   865f8:	1885883a 	add	r2,r3,r2
   865fc:	10800017 	ldw	r2,0(r2)
   86600:	e0fffa04 	addi	r3,fp,-24
   86604:	1809883a 	mov	r4,r3
   86608:	014002f4 	movhi	r5,11
   8660c:	29760d04 	addi	r5,r5,-10188
   86610:	100d883a 	mov	r6,r2
   86614:	00894140 	call	89414 <sprintf>
        DEBUG((szText));
   86618:	e0bffa04 	addi	r2,fp,-24
   8661c:	1009883a 	mov	r4,r2
   86620:	00864d40 	call	864d4 <myprintf>
}

int  myprintf_dwordarray(unsigned int *pArray, int nElementCount){
    int i;
    char szText[16];
    for(i=0;i<nElementCount;i++){
   86624:	e0bff917 	ldw	r2,-28(fp)
   86628:	10800044 	addi	r2,r2,1
   8662c:	e0bff915 	stw	r2,-28(fp)
   86630:	e0fff917 	ldw	r3,-28(fp)
   86634:	e0bfff17 	ldw	r2,-4(fp)
   86638:	18bfeb16 	blt	r3,r2,865e8 <myprintf_dwordarray+0x20>
        sprintf(szText, "[%08X]", *(pArray+i));
        DEBUG((szText));
    }
    return nElementCount;
   8663c:	e0bfff17 	ldw	r2,-4(fp)
}
   86640:	e037883a 	mov	sp,fp
   86644:	dfc00117 	ldw	ra,4(sp)
   86648:	df000017 	ldw	fp,0(sp)
   8664c:	dec00204 	addi	sp,sp,8
   86650:	f800283a 	ret

00086654 <QUEUE_New>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
   86654:	defffb04 	addi	sp,sp,-20
   86658:	dfc00415 	stw	ra,16(sp)
   8665c:	df000315 	stw	fp,12(sp)
   86660:	df000304 	addi	fp,sp,12
   86664:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
   86668:	e0bfff17 	ldw	r2,-4(fp)
   8666c:	10800144 	addi	r2,r2,5
   86670:	1085883a 	add	r2,r2,r2
   86674:	1085883a 	add	r2,r2,r2
   86678:	e0bffd15 	stw	r2,-12(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
   8667c:	e0bffd17 	ldw	r2,-12(fp)
   86680:	1009883a 	mov	r4,r2
   86684:	00888d80 	call	888d8 <malloc>
   86688:	e0bffe15 	stw	r2,-8(fp)
    memset((void *)pQueue, 0, nSize);
   8668c:	e0bffd17 	ldw	r2,-12(fp)
   86690:	e13ffe17 	ldw	r4,-8(fp)
   86694:	000b883a 	mov	r5,zero
   86698:	100d883a 	mov	r6,r2
   8669c:	008917c0 	call	8917c <memset>
    pQueue->num = nQueueNum;
   866a0:	e0ffff17 	ldw	r3,-4(fp)
   866a4:	e0bffe17 	ldw	r2,-8(fp)
   866a8:	10c00015 	stw	r3,0(r2)
    return pQueue;
   866ac:	e0bffe17 	ldw	r2,-8(fp)
}
   866b0:	e037883a 	mov	sp,fp
   866b4:	dfc00117 	ldw	ra,4(sp)
   866b8:	df000017 	ldw	fp,0(sp)
   866bc:	dec00204 	addi	sp,sp,8
   866c0:	f800283a 	ret

000866c4 <QUEUE_Delete>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
   866c4:	defffd04 	addi	sp,sp,-12
   866c8:	dfc00215 	stw	ra,8(sp)
   866cc:	df000115 	stw	fp,4(sp)
   866d0:	df000104 	addi	fp,sp,4
   866d4:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
   866d8:	e13fff17 	ldw	r4,-4(fp)
   866dc:	00888ec0 	call	888ec <free>
}
   866e0:	e037883a 	mov	sp,fp
   866e4:	dfc00117 	ldw	ra,4(sp)
   866e8:	df000017 	ldw	fp,0(sp)
   866ec:	dec00204 	addi	sp,sp,8
   866f0:	f800283a 	ret

000866f4 <QUEUE_IsEmpty>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
   866f4:	defffe04 	addi	sp,sp,-8
   866f8:	df000115 	stw	fp,4(sp)
   866fc:	df000104 	addi	fp,sp,4
   86700:	e13fff15 	stw	r4,-4(fp)
    if (pQueue->front == pQueue->rear)
   86704:	e0bfff17 	ldw	r2,-4(fp)
   86708:	10c00117 	ldw	r3,4(r2)
   8670c:	e0bfff17 	ldw	r2,-4(fp)
   86710:	10800217 	ldw	r2,8(r2)
   86714:	1880021e 	bne	r3,r2,86720 <QUEUE_IsEmpty+0x2c>
        return TRUE;
   86718:	00800044 	movi	r2,1
   8671c:	00000106 	br	86724 <QUEUE_IsEmpty+0x30>
    return FALSE;
   86720:	0005883a 	mov	r2,zero
}
   86724:	e037883a 	mov	sp,fp
   86728:	df000017 	ldw	fp,0(sp)
   8672c:	dec00104 	addi	sp,sp,4
   86730:	f800283a 	ret

00086734 <QUEUE_IsFull>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
   86734:	defffd04 	addi	sp,sp,-12
   86738:	dfc00215 	stw	ra,8(sp)
   8673c:	df000115 	stw	fp,4(sp)
   86740:	df000104 	addi	fp,sp,4
   86744:	e13fff15 	stw	r4,-4(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
   86748:	e0bfff17 	ldw	r2,-4(fp)
   8674c:	10800117 	ldw	r2,4(r2)
   86750:	10c00044 	addi	r3,r2,1
   86754:	e0bfff17 	ldw	r2,-4(fp)
   86758:	10800017 	ldw	r2,0(r2)
   8675c:	1809883a 	mov	r4,r3
   86760:	100b883a 	mov	r5,r2
   86764:	00883340 	call	88334 <__umodsi3>
   86768:	1007883a 	mov	r3,r2
   8676c:	e0bfff17 	ldw	r2,-4(fp)
   86770:	10800217 	ldw	r2,8(r2)
   86774:	1880021e 	bne	r3,r2,86780 <QUEUE_IsFull+0x4c>
        return TRUE;
   86778:	00800044 	movi	r2,1
   8677c:	00000106 	br	86784 <QUEUE_IsFull+0x50>
    return FALSE;
   86780:	0005883a 	mov	r2,zero
}
   86784:	e037883a 	mov	sp,fp
   86788:	dfc00117 	ldw	ra,4(sp)
   8678c:	df000017 	ldw	fp,0(sp)
   86790:	dec00204 	addi	sp,sp,8
   86794:	f800283a 	ret

00086798 <QUEUE_Push>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
   86798:	defffc04 	addi	sp,sp,-16
   8679c:	dfc00315 	stw	ra,12(sp)
   867a0:	df000215 	stw	fp,8(sp)
   867a4:	df000204 	addi	fp,sp,8
   867a8:	e13ffe15 	stw	r4,-8(fp)
   867ac:	e17fff15 	stw	r5,-4(fp)
    if (QUEUE_IsFull(pQueue))
   867b0:	e13ffe17 	ldw	r4,-8(fp)
   867b4:	00867340 	call	86734 <QUEUE_IsFull>
   867b8:	10000226 	beq	r2,zero,867c4 <QUEUE_Push+0x2c>
        return FALSE;
   867bc:	0005883a 	mov	r2,zero
   867c0:	00001506 	br	86818 <QUEUE_Push+0x80>
    pQueue->data[pQueue->front] = data32;
   867c4:	e0bffe17 	ldw	r2,-8(fp)
   867c8:	10800117 	ldw	r2,4(r2)
   867cc:	e0fffe17 	ldw	r3,-8(fp)
   867d0:	108000c4 	addi	r2,r2,3
   867d4:	1085883a 	add	r2,r2,r2
   867d8:	1085883a 	add	r2,r2,r2
   867dc:	1885883a 	add	r2,r3,r2
   867e0:	e0ffff17 	ldw	r3,-4(fp)
   867e4:	10c00015 	stw	r3,0(r2)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
   867e8:	e0bffe17 	ldw	r2,-8(fp)
   867ec:	10800117 	ldw	r2,4(r2)
   867f0:	10c00044 	addi	r3,r2,1
   867f4:	e0bffe17 	ldw	r2,-8(fp)
   867f8:	10800017 	ldw	r2,0(r2)
   867fc:	1809883a 	mov	r4,r3
   86800:	100b883a 	mov	r5,r2
   86804:	00883340 	call	88334 <__umodsi3>
   86808:	1007883a 	mov	r3,r2
   8680c:	e0bffe17 	ldw	r2,-8(fp)
   86810:	10c00115 	stw	r3,4(r2)
    return TRUE;
   86814:	00800044 	movi	r2,1
}
   86818:	e037883a 	mov	sp,fp
   8681c:	dfc00117 	ldw	ra,4(sp)
   86820:	df000017 	ldw	fp,0(sp)
   86824:	dec00204 	addi	sp,sp,8
   86828:	f800283a 	ret

0008682c <QUEUE_Pop>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
   8682c:	defffc04 	addi	sp,sp,-16
   86830:	dfc00315 	stw	ra,12(sp)
   86834:	df000215 	stw	fp,8(sp)
   86838:	df000204 	addi	fp,sp,8
   8683c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
   86840:	e13fff17 	ldw	r4,-4(fp)
   86844:	00866f40 	call	866f4 <QUEUE_IsEmpty>
   86848:	10000226 	beq	r2,zero,86854 <QUEUE_Pop+0x28>
        return 0;
   8684c:	0005883a 	mov	r2,zero
   86850:	00001506 	br	868a8 <QUEUE_Pop+0x7c>
    data32 = pQueue->data[pQueue->rear];
   86854:	e0bfff17 	ldw	r2,-4(fp)
   86858:	10800217 	ldw	r2,8(r2)
   8685c:	e0ffff17 	ldw	r3,-4(fp)
   86860:	108000c4 	addi	r2,r2,3
   86864:	1085883a 	add	r2,r2,r2
   86868:	1085883a 	add	r2,r2,r2
   8686c:	1885883a 	add	r2,r3,r2
   86870:	10800017 	ldw	r2,0(r2)
   86874:	e0bffe15 	stw	r2,-8(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
   86878:	e0bfff17 	ldw	r2,-4(fp)
   8687c:	10800217 	ldw	r2,8(r2)
   86880:	10c00044 	addi	r3,r2,1
   86884:	e0bfff17 	ldw	r2,-4(fp)
   86888:	10800017 	ldw	r2,0(r2)
   8688c:	1809883a 	mov	r4,r3
   86890:	100b883a 	mov	r5,r2
   86894:	00883340 	call	88334 <__umodsi3>
   86898:	1007883a 	mov	r3,r2
   8689c:	e0bfff17 	ldw	r2,-4(fp)
   868a0:	10c00215 	stw	r3,8(r2)
    return data32;
   868a4:	e0bffe17 	ldw	r2,-8(fp)
}
   868a8:	e037883a 	mov	sp,fp
   868ac:	dfc00117 	ldw	ra,4(sp)
   868b0:	df000017 	ldw	fp,0(sp)
   868b4:	dec00204 	addi	sp,sp,8
   868b8:	f800283a 	ret

000868bc <QUEUE_Empty>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
   868bc:	defffe04 	addi	sp,sp,-8
   868c0:	df000115 	stw	fp,4(sp)
   868c4:	df000104 	addi	fp,sp,4
   868c8:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
   868cc:	e0bfff17 	ldw	r2,-4(fp)
   868d0:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
   868d4:	e0bfff17 	ldw	r2,-4(fp)
   868d8:	10000215 	stw	zero,8(r2)
}
   868dc:	e037883a 	mov	sp,fp
   868e0:	df000017 	ldw	fp,0(sp)
   868e4:	dec00104 	addi	sp,sp,4
   868e8:	f800283a 	ret

000868ec <Touch_Init>:
bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p);
void touch_empty_fifo(TERASIC_TOUCH_PANEL *p);
void touch_clear_input(TERASIC_TOUCH_PANEL *p);

// init touch panel
TOUCH_HANDLE Touch_Init(const alt_u32 spi_base, const alt_u32 penirq_base, const alt_u32 penirq_irq){
   868ec:	defff804 	addi	sp,sp,-32
   868f0:	dfc00715 	stw	ra,28(sp)
   868f4:	df000615 	stw	fp,24(sp)
   868f8:	df000604 	addi	fp,sp,24
   868fc:	e13ffd15 	stw	r4,-12(fp)
   86900:	e17ffe15 	stw	r5,-8(fp)
   86904:	e1bfff15 	stw	r6,-4(fp)
    bool bSuccess = TRUE;
   86908:	00800044 	movi	r2,1
   8690c:	e0bffb15 	stw	r2,-20(fp)
    
    TERASIC_TOUCH_PANEL *p;
    
    p = malloc(sizeof(TERASIC_TOUCH_PANEL));
   86910:	01001804 	movi	r4,96
   86914:	00888d80 	call	888d8 <malloc>
   86918:	e0bffc15 	stw	r2,-16(fp)
    if (!p)
   8691c:	e0bffc17 	ldw	r2,-16(fp)
   86920:	1000021e 	bne	r2,zero,8692c <Touch_Init+0x40>
        return p;
   86924:	e0bffc17 	ldw	r2,-16(fp)
   86928:	00004706 	br	86a48 <Touch_Init+0x15c>

    
    //
    memset(p, 0, sizeof(TERASIC_TOUCH_PANEL));
   8692c:	e13ffc17 	ldw	r4,-16(fp)
   86930:	000b883a 	mov	r5,zero
   86934:	01801804 	movi	r6,96
   86938:	008917c0 	call	8917c <memset>
    p->spi_base = spi_base;
   8693c:	e0bffc17 	ldw	r2,-16(fp)
   86940:	e0fffd17 	ldw	r3,-12(fp)
   86944:	10c00015 	stw	r3,0(r2)
    p->penirq_base = penirq_base;
   86948:	e0bffc17 	ldw	r2,-16(fp)
   8694c:	e0fffe17 	ldw	r3,-8(fp)
   86950:	10c00115 	stw	r3,4(r2)
    p->irq_mask = 0x01;  // 1-pin
   86954:	e0bffc17 	ldw	r2,-16(fp)
   86958:	00c00044 	movi	r3,1
   8695c:	10c00315 	stw	r3,12(r2)
    p->penirq_irq = penirq_irq;
   86960:	e0bffc17 	ldw	r2,-16(fp)
   86964:	e0ffff17 	ldw	r3,-4(fp)
   86968:	10c00215 	stw	r3,8(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8696c:	008002f4 	movhi	r2,11
   86970:	1091ed04 	addi	r2,r2,18356
   86974:	10800017 	ldw	r2,0(r2)
    p->alarm_dur = alt_ticks_per_second()/SAMPLE_RATE;
   86978:	1009883a 	mov	r4,r2
   8697c:	01400f04 	movi	r5,60
   86980:	008832c0 	call	8832c <__udivsi3>
   86984:	1007883a 	mov	r3,r2
   86988:	e0bffc17 	ldw	r2,-16(fp)
   8698c:	10c01615 	stw	r3,88(r2)
    
    // enalbe penirq_n interrupt (P1=1, P1=0)
    touch_enable_penirq(p);    
   86990:	e13ffc17 	ldw	r4,-16(fp)
   86994:	0086d340 	call	86d34 <touch_enable_penirq>
    

    // enable interrupt, 1-pin
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, p->irq_mask); 
   86998:	e0bffc17 	ldw	r2,-16(fp)
   8699c:	10800117 	ldw	r2,4(r2)
   869a0:	10800204 	addi	r2,r2,8
   869a4:	e0fffc17 	ldw	r3,-16(fp)
   869a8:	18c00317 	ldw	r3,12(r3)
   869ac:	10c00035 	stwio	r3,0(r2)
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);
   869b0:	e0bffc17 	ldw	r2,-16(fp)
   869b4:	10800117 	ldw	r2,4(r2)
   869b8:	10800304 	addi	r2,r2,12
   869bc:	0007883a 	mov	r3,zero
   869c0:	10c00035 	stwio	r3,0(r2)
    // register ISR
    // register callback function

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,
		                   p->penirq_irq,
   869c4:	e0bffc17 	ldw	r2,-16(fp)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);
    // register ISR
    // register callback function

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,
   869c8:	10800217 	ldw	r2,8(r2)
   869cc:	d8000015 	stw	zero,0(sp)
   869d0:	0009883a 	mov	r4,zero
   869d4:	100b883a 	mov	r5,r2
   869d8:	01800234 	movhi	r6,8
   869dc:	319b1304 	addi	r6,r6,27724
   869e0:	e1fffc17 	ldw	r7,-16(fp)
   869e4:	00910080 	call	91008 <alt_ic_isr_register>
   869e8:	10000126 	beq	r2,zero,869f0 <Touch_Init+0x104>
		                   ) != 0)){
 #else
  if ((alt_irq_register(p->penirq_irq, (void *)p, touch_isr) != 0)){
 #endif
        DEBUG_OUT(("[TOUCH]register IRQ fail\n"));
        bSuccess = FALSE;
   869ec:	e03ffb15 	stw	zero,-20(fp)
    }else{        
        DEBUG_OUT(("[TOUCH]register IRQ success\n"));
    }

    if (bSuccess){    
   869f0:	e0bffb17 	ldw	r2,-20(fp)
   869f4:	10000c26 	beq	r2,zero,86a28 <Touch_Init+0x13c>
        if (alt_alarm_start(&p->alarm, p->alarm_dur, touch_alarm_callback, p) == 0){
   869f8:	e0bffc17 	ldw	r2,-16(fp)
   869fc:	10c01004 	addi	r3,r2,64
   86a00:	e0bffc17 	ldw	r2,-16(fp)
   86a04:	10801617 	ldw	r2,88(r2)
   86a08:	1809883a 	mov	r4,r3
   86a0c:	100b883a 	mov	r5,r2
   86a10:	01800234 	movhi	r6,8
   86a14:	319c7504 	addi	r6,r6,29140
   86a18:	e1fffc17 	ldw	r7,-16(fp)
   86a1c:	0090c880 	call	90c88 <alt_alarm_start>
   86a20:	10000126 	beq	r2,zero,86a28 <Touch_Init+0x13c>
            DEBUG_OUT(("[TOUCH]alarm start success\n"));
        }else{
            DEBUG_OUT(("[TOUCH]alarm start fail\n"));
            bSuccess = FALSE;
   86a24:	e03ffb15 	stw	zero,-20(fp)
        }
    }
    
    if (!bSuccess && p){
   86a28:	e0bffb17 	ldw	r2,-20(fp)
   86a2c:	1000051e 	bne	r2,zero,86a44 <Touch_Init+0x158>
   86a30:	e0bffc17 	ldw	r2,-16(fp)
   86a34:	10000326 	beq	r2,zero,86a44 <Touch_Init+0x158>
        free(p);
   86a38:	e13ffc17 	ldw	r4,-16(fp)
   86a3c:	00888ec0 	call	888ec <free>
        p = NULL;
   86a40:	e03ffc15 	stw	zero,-16(fp)
    }        
                
    return p;        
   86a44:	e0bffc17 	ldw	r2,-16(fp)
    

}
   86a48:	e037883a 	mov	sp,fp
   86a4c:	dfc00117 	ldw	ra,4(sp)
   86a50:	df000017 	ldw	fp,0(sp)
   86a54:	dec00204 	addi	sp,sp,8
   86a58:	f800283a 	ret

00086a5c <Touch_UnInit>:

// uninit touch panel
void Touch_UnInit(TOUCH_HANDLE pHandle){
   86a5c:	defffc04 	addi	sp,sp,-16
   86a60:	dfc00315 	stw	ra,12(sp)
   86a64:	df000215 	stw	fp,8(sp)
   86a68:	df000204 	addi	fp,sp,8
   86a6c:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
   86a70:	e0bfff17 	ldw	r2,-4(fp)
   86a74:	e0bffe15 	stw	r2,-8(fp)
    if (!p)
   86a78:	e0bffe17 	ldw	r2,-8(fp)
   86a7c:	10000c26 	beq	r2,zero,86ab0 <Touch_UnInit+0x54>
        return;
        
    // stop alarm
    alt_alarm_stop(&(p->alarm));
   86a80:	e0bffe17 	ldw	r2,-8(fp)
   86a84:	10801004 	addi	r2,r2,64
   86a88:	1009883a 	mov	r4,r2
   86a8c:	00918d40 	call	918d4 <alt_alarm_stop>
    // disable irq
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, 0x00);
   86a90:	e0bffe17 	ldw	r2,-8(fp)
   86a94:	10800117 	ldw	r2,4(r2)
   86a98:	10800204 	addi	r2,r2,8
   86a9c:	0007883a 	mov	r3,zero
   86aa0:	10c00035 	stwio	r3,0(r2)
    
    // zero varialbe
    free(p);
   86aa4:	e13ffe17 	ldw	r4,-8(fp)
   86aa8:	00888ec0 	call	888ec <free>
   86aac:	00000106 	br	86ab4 <Touch_UnInit+0x58>

// uninit touch panel
void Touch_UnInit(TOUCH_HANDLE pHandle){
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
    if (!p)
        return;
   86ab0:	0001883a 	nop
    // disable irq
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->penirq_base, 0x00);
    
    // zero varialbe
    free(p);
}
   86ab4:	e037883a 	mov	sp,fp
   86ab8:	dfc00117 	ldw	ra,4(sp)
   86abc:	df000017 	ldw	fp,0(sp)
   86ac0:	dec00204 	addi	sp,sp,8
   86ac4:	f800283a 	ret

00086ac8 <Touch_EmptyFifo>:


void Touch_EmptyFifo(TOUCH_HANDLE pHandle){
   86ac8:	defffc04 	addi	sp,sp,-16
   86acc:	dfc00315 	stw	ra,12(sp)
   86ad0:	df000215 	stw	fp,8(sp)
   86ad4:	df000204 	addi	fp,sp,8
   86ad8:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
   86adc:	e0bfff17 	ldw	r2,-4(fp)
   86ae0:	e0bffe15 	stw	r2,-8(fp)
    touch_empty_fifo(p);
   86ae4:	e13ffe17 	ldw	r4,-8(fp)
   86ae8:	0086cc40 	call	86cc4 <touch_empty_fifo>
}
   86aec:	e037883a 	mov	sp,fp
   86af0:	dfc00117 	ldw	ra,4(sp)
   86af4:	df000017 	ldw	fp,0(sp)
   86af8:	dec00204 	addi	sp,sp,8
   86afc:	f800283a 	ret

00086b00 <Touch_GetXY>:

// get x/y from internal FIFO
bool Touch_GetXY(TOUCH_HANDLE pHandle, int *x, int *y){
   86b00:	defff904 	addi	sp,sp,-28
   86b04:	dfc00615 	stw	ra,24(sp)
   86b08:	df000515 	stw	fp,20(sp)
   86b0c:	dc000415 	stw	r16,16(sp)
   86b10:	df000404 	addi	fp,sp,16
   86b14:	e13ffd15 	stw	r4,-12(fp)
   86b18:	e17ffe15 	stw	r5,-8(fp)
   86b1c:	e1bfff15 	stw	r6,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)pHandle;
   86b20:	e0bffd17 	ldw	r2,-12(fp)
   86b24:	e0bffc15 	stw	r2,-16(fp)
    if (!p)
   86b28:	e0bffc17 	ldw	r2,-16(fp)
   86b2c:	1000021e 	bne	r2,zero,86b38 <Touch_GetXY+0x38>
        return FALSE;    
   86b30:	0005883a 	mov	r2,zero
   86b34:	00003f06 	br	86c34 <Touch_GetXY+0x134>
    
    if (p->fifo_front == p->fifo_rear){
   86b38:	e0bffc17 	ldw	r2,-16(fp)
   86b3c:	10c0040b 	ldhu	r3,16(r2)
   86b40:	e0bffc17 	ldw	r2,-16(fp)
   86b44:	1080048b 	ldhu	r2,18(r2)
   86b48:	18ffffcc 	andi	r3,r3,65535
   86b4c:	10bfffcc 	andi	r2,r2,65535
   86b50:	1880021e 	bne	r3,r2,86b5c <Touch_GetXY+0x5c>
        // empty
        return FALSE;
   86b54:	0005883a 	mov	r2,zero
   86b58:	00003606 	br	86c34 <Touch_GetXY+0x134>
    }
    *x = p->fifo_x[p->fifo_rear];
   86b5c:	e0bffc17 	ldw	r2,-16(fp)
   86b60:	1080048b 	ldhu	r2,18(r2)
   86b64:	10bfffcc 	andi	r2,r2,65535
   86b68:	e0fffc17 	ldw	r3,-16(fp)
   86b6c:	10800284 	addi	r2,r2,10
   86b70:	1085883a 	add	r2,r2,r2
   86b74:	1885883a 	add	r2,r3,r2
   86b78:	1080000b 	ldhu	r2,0(r2)
   86b7c:	10ffffcc 	andi	r3,r2,65535
   86b80:	e0bffe17 	ldw	r2,-8(fp)
   86b84:	10c00015 	stw	r3,0(r2)
    *y = p->fifo_y[p->fifo_rear];
   86b88:	e0bffc17 	ldw	r2,-16(fp)
   86b8c:	1080048b 	ldhu	r2,18(r2)
   86b90:	10bfffcc 	andi	r2,r2,65535
   86b94:	e0fffc17 	ldw	r3,-16(fp)
   86b98:	10800504 	addi	r2,r2,20
   86b9c:	1085883a 	add	r2,r2,r2
   86ba0:	1885883a 	add	r2,r3,r2
   86ba4:	1080000b 	ldhu	r2,0(r2)
   86ba8:	10ffffcc 	andi	r3,r2,65535
   86bac:	e0bfff17 	ldw	r2,-4(fp)
   86bb0:	10c00015 	stw	r3,0(r2)
    //
    p->fifo_rear++;
   86bb4:	e0bffc17 	ldw	r2,-16(fp)
   86bb8:	1080048b 	ldhu	r2,18(r2)
   86bbc:	10800044 	addi	r2,r2,1
   86bc0:	1007883a 	mov	r3,r2
   86bc4:	e0bffc17 	ldw	r2,-16(fp)
   86bc8:	10c0048d 	sth	r3,18(r2)
    p->fifo_rear %= FIFO_SIZE;
   86bcc:	e0bffc17 	ldw	r2,-16(fp)
   86bd0:	1080048b 	ldhu	r2,18(r2)
   86bd4:	10bfffcc 	andi	r2,r2,65535
   86bd8:	1009883a 	mov	r4,r2
   86bdc:	01400284 	movi	r5,10
   86be0:	00883340 	call	88334 <__umodsi3>
   86be4:	1007883a 	mov	r3,r2
   86be8:	e0bffc17 	ldw	r2,-16(fp)
   86bec:	10c0048d 	sth	r3,18(r2)
    //
    // translate
    touch_xy_transform(x, y);
   86bf0:	e13ffe17 	ldw	r4,-8(fp)
   86bf4:	e17fff17 	ldw	r5,-4(fp)
   86bf8:	008724c0 	call	8724c <touch_xy_transform>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   86bfc:	008002f4 	movhi	r2,11
   86c00:	1091ee04 	addi	r2,r2,18360
   86c04:	10800017 	ldw	r2,0(r2)

    DEBUG_OUT("[TOUCH] x=%d, y=%d\n", *x,*y);
//    touch_clear_input(p);
//    touch_empty_fifo(p);
    p->next_active_time = alt_nticks() + ACTIVE_DELAY_TIME;
   86c08:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   86c0c:	008002f4 	movhi	r2,11
   86c10:	1091ed04 	addi	r2,r2,18356
   86c14:	10800017 	ldw	r2,0(r2)
   86c18:	1009883a 	mov	r4,r2
   86c1c:	01400f04 	movi	r5,60
   86c20:	008832c0 	call	8832c <__udivsi3>
   86c24:	8087883a 	add	r3,r16,r2
   86c28:	e0bffc17 	ldw	r2,-16(fp)
   86c2c:	10c01715 	stw	r3,92(r2)
    
    return TRUE;
   86c30:	00800044 	movi	r2,1
}
   86c34:	e037883a 	mov	sp,fp
   86c38:	dfc00217 	ldw	ra,8(sp)
   86c3c:	df000117 	ldw	fp,4(sp)
   86c40:	dc000017 	ldw	r16,0(sp)
   86c44:	dec00304 	addi	sp,sp,12
   86c48:	f800283a 	ret

00086c4c <touch_isr>:



// penirq_n ISR
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
void touch_isr(void* context){
   86c4c:	defffb04 	addi	sp,sp,-20
   86c50:	dfc00415 	stw	ra,16(sp)
   86c54:	df000315 	stw	fp,12(sp)
   86c58:	df000304 	addi	fp,sp,12
   86c5c:	e13fff15 	stw	r4,-4(fp)
#else
void touch_isr(void* context, alt_u32 id){
#endif
    alt_u8 mask;
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
   86c60:	e0bfff17 	ldw	r2,-4(fp)
   86c64:	e0bffd15 	stw	r2,-12(fp)

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_disable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
   86c68:	0009883a 	mov	r4,zero
   86c6c:	014000c4 	movi	r5,3
   86c70:	00910f40 	call	910f4 <alt_ic_irq_disable>
#else
    alt_irq_disable(id);
#endif

    // get the edge capture mask
    mask = IORD_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base);
   86c74:	e0bffd17 	ldw	r2,-12(fp)
   86c78:	10800117 	ldw	r2,4(r2)
   86c7c:	10800304 	addi	r2,r2,12
   86c80:	10800037 	ldwio	r2,0(r2)
   86c84:	e0bffe05 	stb	r2,-8(fp)
    //if ((mask & Touch.irq_mask) == 0)  // 1-pin
    //    return;
    DEBUG_OUT("Touched!!\n");
    usleep(1000);
   86c88:	0100fa04 	movi	r4,1000
   86c8c:	0091a700 	call	91a70 <usleep>
    }
    IOWR(PIO_RED_LED_BASE, 0, Touch.pen_pressed);
#endif                    
    
    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->penirq_base,0);    
   86c90:	e0bffd17 	ldw	r2,-12(fp)
   86c94:	10800117 	ldw	r2,4(r2)
   86c98:	10800304 	addi	r2,r2,12
   86c9c:	0007883a 	mov	r3,zero
   86ca0:	10c00035 	stwio	r3,0(r2)
    
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_enable(TOUCH_PANEL_PEN_IRQ_N_IRQ_INTERRUPT_CONTROLLER_ID,TOUCH_PANEL_PEN_IRQ_N_IRQ);
   86ca4:	0009883a 	mov	r4,zero
   86ca8:	014000c4 	movi	r5,3
   86cac:	00910580 	call	91058 <alt_ic_irq_enable>
#else
    alt_irq_enable(id);
#endif

}
   86cb0:	e037883a 	mov	sp,fp
   86cb4:	dfc00117 	ldw	ra,4(sp)
   86cb8:	df000017 	ldw	fp,0(sp)
   86cbc:	dec00204 	addi	sp,sp,8
   86cc0:	f800283a 	ret

00086cc4 <touch_empty_fifo>:

void touch_empty_fifo(TERASIC_TOUCH_PANEL *p){
   86cc4:	defffe04 	addi	sp,sp,-8
   86cc8:	df000115 	stw	fp,4(sp)
   86ccc:	df000104 	addi	fp,sp,4
   86cd0:	e13fff15 	stw	r4,-4(fp)
    p->fifo_rear = p->fifo_front;
   86cd4:	e0bfff17 	ldw	r2,-4(fp)
   86cd8:	10c0040b 	ldhu	r3,16(r2)
   86cdc:	e0bfff17 	ldw	r2,-4(fp)
   86ce0:	10c0048d 	sth	r3,18(r2)
}
   86ce4:	e037883a 	mov	sp,fp
   86ce8:	df000017 	ldw	fp,0(sp)
   86cec:	dec00104 	addi	sp,sp,4
   86cf0:	f800283a 	ret

00086cf4 <touch_is_pen_pressed>:

bool touch_is_pen_pressed(TERASIC_TOUCH_PANEL *p){
   86cf4:	defffd04 	addi	sp,sp,-12
   86cf8:	df000215 	stw	fp,8(sp)
   86cfc:	df000204 	addi	fp,sp,8
   86d00:	e13fff15 	stw	r4,-4(fp)
    bool bPressed;
    bPressed = (IORD(p->penirq_base, 0) & 0x01)?FALSE:TRUE;
   86d04:	e0bfff17 	ldw	r2,-4(fp)
   86d08:	10800117 	ldw	r2,4(r2)
   86d0c:	10800037 	ldwio	r2,0(r2)
   86d10:	1080004c 	andi	r2,r2,1
   86d14:	1005003a 	cmpeq	r2,r2,zero
   86d18:	10803fcc 	andi	r2,r2,255
   86d1c:	e0bffe15 	stw	r2,-8(fp)
    return bPressed;
   86d20:	e0bffe17 	ldw	r2,-8(fp)
}
   86d24:	e037883a 	mov	sp,fp
   86d28:	df000017 	ldw	fp,0(sp)
   86d2c:	dec00104 	addi	sp,sp,4
   86d30:	f800283a 	ret

00086d34 <touch_enable_penirq>:


void touch_enable_penirq(TERASIC_TOUCH_PANEL *p){
   86d34:	defff904 	addi	sp,sp,-28
   86d38:	dfc00615 	stw	ra,24(sp)
   86d3c:	df000515 	stw	fp,20(sp)
   86d40:	df000504 	addi	fp,sp,20
   86d44:	e13fff15 	stw	r4,-4(fp)
    const alt_u8 CommandGetX = 0x82;
   86d48:	00bfe084 	movi	r2,-126
   86d4c:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
   86d50:	00bff484 	movi	r2,-46
   86d54:	e0bffe45 	stb	r2,-7(fp)
    alt_u8 data8;
    
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   86d58:	e0bfff17 	ldw	r2,-4(fp)
   86d5c:	10800017 	ldw	r2,0(r2)
   86d60:	d8000015 	stw	zero,0(sp)
   86d64:	d8000115 	stw	zero,4(sp)
   86d68:	00c00044 	movi	r3,1
   86d6c:	d8c00215 	stw	r3,8(sp)
   86d70:	1009883a 	mov	r4,r2
   86d74:	000b883a 	mov	r5,zero
   86d78:	01800044 	movi	r6,1
   86d7c:	e1fffe04 	addi	r7,fp,-8
   86d80:	00927100 	call	92710 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
   86d84:	e0bfff17 	ldw	r2,-4(fp)
   86d88:	10800017 	ldw	r2,0(r2)
   86d8c:	00c00044 	movi	r3,1
   86d90:	d8c00015 	stw	r3,0(sp)
   86d94:	e0fffe84 	addi	r3,fp,-6
   86d98:	d8c00115 	stw	r3,4(sp)
   86d9c:	00c00044 	movi	r3,1
   86da0:	d8c00215 	stw	r3,8(sp)
   86da4:	1009883a 	mov	r4,r2
   86da8:	000b883a 	mov	r5,zero
   86dac:	000d883a 	mov	r6,zero
   86db0:	000f883a 	mov	r7,zero
   86db4:	00927100 	call	92710 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   86db8:	e0bfff17 	ldw	r2,-4(fp)
   86dbc:	10800017 	ldw	r2,0(r2)
   86dc0:	00c00044 	movi	r3,1
   86dc4:	d8c00015 	stw	r3,0(sp)
   86dc8:	e0fffe84 	addi	r3,fp,-6
   86dcc:	d8c00115 	stw	r3,4(sp)
   86dd0:	00c00084 	movi	r3,2
   86dd4:	d8c00215 	stw	r3,8(sp)
   86dd8:	1009883a 	mov	r4,r2
   86ddc:	000b883a 	mov	r5,zero
   86de0:	000d883a 	mov	r6,zero
   86de4:	000f883a 	mov	r7,zero
   86de8:	00927100 	call	92710 <alt_avalon_spi_command>
   
    alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   86dec:	e0bfff17 	ldw	r2,-4(fp)
   86df0:	10c00017 	ldw	r3,0(r2)
   86df4:	e0bffe44 	addi	r2,fp,-7
   86df8:	d8000015 	stw	zero,0(sp)
   86dfc:	d8000115 	stw	zero,4(sp)
   86e00:	01000044 	movi	r4,1
   86e04:	d9000215 	stw	r4,8(sp)
   86e08:	1809883a 	mov	r4,r3
   86e0c:	000b883a 	mov	r5,zero
   86e10:	01800044 	movi	r6,1
   86e14:	100f883a 	mov	r7,r2
   86e18:	00927100 	call	92710 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_MERGE);
   86e1c:	e0bfff17 	ldw	r2,-4(fp)
   86e20:	10800017 	ldw	r2,0(r2)
   86e24:	00c00044 	movi	r3,1
   86e28:	d8c00015 	stw	r3,0(sp)
   86e2c:	e0fffe84 	addi	r3,fp,-6
   86e30:	d8c00115 	stw	r3,4(sp)
   86e34:	00c00044 	movi	r3,1
   86e38:	d8c00215 	stw	r3,8(sp)
   86e3c:	1009883a 	mov	r4,r2
   86e40:	000b883a 	mov	r5,zero
   86e44:	000d883a 	mov	r6,zero
   86e48:	000f883a 	mov	r7,zero
   86e4c:	00927100 	call	92710 <alt_avalon_spi_command>
    alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(data8), (alt_u8*)&data8, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   86e50:	e0bfff17 	ldw	r2,-4(fp)
   86e54:	10800017 	ldw	r2,0(r2)
   86e58:	00c00044 	movi	r3,1
   86e5c:	d8c00015 	stw	r3,0(sp)
   86e60:	e0fffe84 	addi	r3,fp,-6
   86e64:	d8c00115 	stw	r3,4(sp)
   86e68:	00c00084 	movi	r3,2
   86e6c:	d8c00215 	stw	r3,8(sp)
   86e70:	1009883a 	mov	r4,r2
   86e74:	000b883a 	mov	r5,zero
   86e78:	000d883a 	mov	r6,zero
   86e7c:	000f883a 	mov	r7,zero
   86e80:	00927100 	call	92710 <alt_avalon_spi_command>
}
   86e84:	e037883a 	mov	sp,fp
   86e88:	dfc00117 	ldw	ra,4(sp)
   86e8c:	df000017 	ldw	fp,0(sp)
   86e90:	dec00204 	addi	sp,sp,8
   86e94:	f800283a 	ret

00086e98 <touch_clear_input>:

void touch_clear_input(TERASIC_TOUCH_PANEL *p){
   86e98:	defffd04 	addi	sp,sp,-12
   86e9c:	dfc00215 	stw	ra,8(sp)
   86ea0:	df000115 	stw	fp,4(sp)
   86ea4:	df000104 	addi	fp,sp,4
   86ea8:	e13fff15 	stw	r4,-4(fp)
    touch_enable_penirq(p);
   86eac:	e13fff17 	ldw	r4,-4(fp)
   86eb0:	0086d340 	call	86d34 <touch_enable_penirq>
}
   86eb4:	e037883a 	mov	sp,fp
   86eb8:	dfc00117 	ldw	ra,4(sp)
   86ebc:	df000017 	ldw	fp,0(sp)
   86ec0:	dec00204 	addi	sp,sp,8
   86ec4:	f800283a 	ret

00086ec8 <touch_get_xy>:

// get x/y by SPI command
void touch_get_xy(TERASIC_TOUCH_PANEL *p){
   86ec8:	defff604 	addi	sp,sp,-40
   86ecc:	dfc00915 	stw	ra,36(sp)
   86ed0:	df000815 	stw	fp,32(sp)
   86ed4:	df000804 	addi	fp,sp,32
   86ed8:	e13fff15 	stw	r4,-4(fp)
    alt_u16 x, y;
    int result;
    const alt_u8 CommandGetX = 0x92;
   86edc:	00bfe484 	movi	r2,-110
   86ee0:	e0bffe05 	stb	r2,-8(fp)
    const alt_u8 CommandGetY = 0xD2;
   86ee4:	00bff484 	movi	r2,-46
   86ee8:	e0bffe45 	stb	r2,-7(fp)
    
       
    //DEBUG_OUT(("[TOUCH] get x/y\n"));

    // x
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetX), &CommandGetX, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   86eec:	e0bfff17 	ldw	r2,-4(fp)
   86ef0:	10c00017 	ldw	r3,0(r2)
   86ef4:	e0bffe04 	addi	r2,fp,-8
   86ef8:	d8000015 	stw	zero,0(sp)
   86efc:	d8000115 	stw	zero,4(sp)
   86f00:	01000044 	movi	r4,1
   86f04:	d9000215 	stw	r4,8(sp)
   86f08:	1809883a 	mov	r4,r3
   86f0c:	000b883a 	mov	r5,zero
   86f10:	01800044 	movi	r6,1
   86f14:	100f883a 	mov	r7,r2
   86f18:	00927100 	call	92710 <alt_avalon_spi_command>
   86f1c:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
   86f20:	e0bfff17 	ldw	r2,-4(fp)
   86f24:	10800017 	ldw	r2,0(r2)
   86f28:	00c00044 	movi	r3,1
   86f2c:	d8c00015 	stw	r3,0(sp)
   86f30:	e0fffe84 	addi	r3,fp,-6
   86f34:	d8c00115 	stw	r3,4(sp)
   86f38:	00c00044 	movi	r3,1
   86f3c:	d8c00215 	stw	r3,8(sp)
   86f40:	1009883a 	mov	r4,r2
   86f44:	000b883a 	mov	r5,zero
   86f48:	000d883a 	mov	r6,zero
   86f4c:	000f883a 	mov	r7,zero
   86f50:	00927100 	call	92710 <alt_avalon_spi_command>
   86f54:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
   86f58:	e0bffb17 	ldw	r2,-20(fp)
   86f5c:	10800058 	cmpnei	r2,r2,1
   86f60:	1000971e 	bne	r2,zero,871c0 <touch_get_xy+0x2f8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   86f64:	e0bfff17 	ldw	r2,-4(fp)
   86f68:	10800017 	ldw	r2,0(r2)
   86f6c:	00c00044 	movi	r3,1
   86f70:	d8c00015 	stw	r3,0(sp)
   86f74:	e0fffec4 	addi	r3,fp,-5
   86f78:	d8c00115 	stw	r3,4(sp)
   86f7c:	00c00084 	movi	r3,2
   86f80:	d8c00215 	stw	r3,8(sp)
   86f84:	1009883a 	mov	r4,r2
   86f88:	000b883a 	mov	r5,zero
   86f8c:	000d883a 	mov	r6,zero
   86f90:	000f883a 	mov	r7,zero
   86f94:	00927100 	call	92710 <alt_avalon_spi_command>
   86f98:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
   86f9c:	e0bffb17 	ldw	r2,-20(fp)
   86fa0:	10800058 	cmpnei	r2,r2,1
   86fa4:	1000861e 	bne	r2,zero,871c0 <touch_get_xy+0x2f8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }  
    ResponseX = (high_byte << 8) | low_byte;        
   86fa8:	e0bffe83 	ldbu	r2,-6(fp)
   86fac:	10803fcc 	andi	r2,r2,255
   86fb0:	1004923a 	slli	r2,r2,8
   86fb4:	1007883a 	mov	r3,r2
   86fb8:	e0bffec3 	ldbu	r2,-5(fp)
   86fbc:	10803fcc 	andi	r2,r2,255
   86fc0:	1884b03a 	or	r2,r3,r2
   86fc4:	e0bffc0d 	sth	r2,-16(fp)
    
    // y
    result = alt_avalon_spi_command(p->spi_base, 0, sizeof(CommandGetY), &CommandGetY, 0, 0, ALT_AVALON_SPI_COMMAND_MERGE);
   86fc8:	e0bfff17 	ldw	r2,-4(fp)
   86fcc:	10c00017 	ldw	r3,0(r2)
   86fd0:	e0bffe44 	addi	r2,fp,-7
   86fd4:	d8000015 	stw	zero,0(sp)
   86fd8:	d8000115 	stw	zero,4(sp)
   86fdc:	01000044 	movi	r4,1
   86fe0:	d9000215 	stw	r4,8(sp)
   86fe4:	1809883a 	mov	r4,r3
   86fe8:	000b883a 	mov	r5,zero
   86fec:	01800044 	movi	r6,1
   86ff0:	100f883a 	mov	r7,r2
   86ff4:	00927100 	call	92710 <alt_avalon_spi_command>
   86ff8:	e0bffb15 	stw	r2,-20(fp)
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(high_byte), (alt_u8*)&high_byte, ALT_AVALON_SPI_COMMAND_MERGE);
   86ffc:	e0bfff17 	ldw	r2,-4(fp)
   87000:	10800017 	ldw	r2,0(r2)
   87004:	00c00044 	movi	r3,1
   87008:	d8c00015 	stw	r3,0(sp)
   8700c:	e0fffe84 	addi	r3,fp,-6
   87010:	d8c00115 	stw	r3,4(sp)
   87014:	00c00044 	movi	r3,1
   87018:	d8c00215 	stw	r3,8(sp)
   8701c:	1009883a 	mov	r4,r2
   87020:	000b883a 	mov	r5,zero
   87024:	000d883a 	mov	r6,zero
   87028:	000f883a 	mov	r7,zero
   8702c:	00927100 	call	92710 <alt_avalon_spi_command>
   87030:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(high_byte)){
   87034:	e0bffb17 	ldw	r2,-20(fp)
   87038:	10800058 	cmpnei	r2,r2,1
   8703c:	1000601e 	bne	r2,zero,871c0 <touch_get_xy+0x2f8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }          
    result = alt_avalon_spi_command(p->spi_base, 0, 0, 0, sizeof(low_byte), (alt_u8*)&low_byte, ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N);
   87040:	e0bfff17 	ldw	r2,-4(fp)
   87044:	10800017 	ldw	r2,0(r2)
   87048:	00c00044 	movi	r3,1
   8704c:	d8c00015 	stw	r3,0(sp)
   87050:	e0fffec4 	addi	r3,fp,-5
   87054:	d8c00115 	stw	r3,4(sp)
   87058:	00c00084 	movi	r3,2
   8705c:	d8c00215 	stw	r3,8(sp)
   87060:	1009883a 	mov	r4,r2
   87064:	000b883a 	mov	r5,zero
   87068:	000d883a 	mov	r6,zero
   8706c:	000f883a 	mov	r7,zero
   87070:	00927100 	call	92710 <alt_avalon_spi_command>
   87074:	e0bffb15 	stw	r2,-20(fp)
    if (result != sizeof(low_byte)){
   87078:	e0bffb17 	ldw	r2,-20(fp)
   8707c:	10800058 	cmpnei	r2,r2,1
   87080:	10004f1e 	bne	r2,zero,871c0 <touch_get_xy+0x2f8>
        DEBUG_OUT(("[TOUCH] failed to get x\n"));
        return;
    }  
    ResponseY = (high_byte << 8) | low_byte;        
   87084:	e0bffe83 	ldbu	r2,-6(fp)
   87088:	10803fcc 	andi	r2,r2,255
   8708c:	1004923a 	slli	r2,r2,8
   87090:	1007883a 	mov	r3,r2
   87094:	e0bffec3 	ldbu	r2,-5(fp)
   87098:	10803fcc 	andi	r2,r2,255
   8709c:	1884b03a 	or	r2,r3,r2
   870a0:	e0bffc8d 	sth	r2,-14(fp)

    if (!touch_is_pen_pressed(p))
   870a4:	e13fff17 	ldw	r4,-4(fp)
   870a8:	0086cf40 	call	86cf4 <touch_is_pen_pressed>
   870ac:	10004426 	beq	r2,zero,871c0 <touch_get_xy+0x2f8>
        return; // do not use this data    
        
    x = (ResponseX >> 3 ) & 0xFFF;  // 12 bits    
   870b0:	e0bffc0b 	ldhu	r2,-16(fp)
   870b4:	1004d0fa 	srli	r2,r2,3
   870b8:	1083ffcc 	andi	r2,r2,4095
   870bc:	e0bffd0d 	sth	r2,-12(fp)
    y = (ResponseY >> 3 ) & 0xFFF;  // 12 bits
   870c0:	e0bffc8b 	ldhu	r2,-14(fp)
   870c4:	1004d0fa 	srli	r2,r2,3
   870c8:	1083ffcc 	andi	r2,r2,4095
   870cc:	e0bffd8d 	sth	r2,-10(fp)
    
    
    // check whether the fifo is full!
    if (((p->fifo_front+1)%FIFO_SIZE) == p->fifo_rear){
   870d0:	e0bfff17 	ldw	r2,-4(fp)
   870d4:	1080040b 	ldhu	r2,16(r2)
   870d8:	10bfffcc 	andi	r2,r2,65535
   870dc:	10800044 	addi	r2,r2,1
   870e0:	1009883a 	mov	r4,r2
   870e4:	01400284 	movi	r5,10
   870e8:	00882d00 	call	882d0 <__modsi3>
   870ec:	1007883a 	mov	r3,r2
   870f0:	e0bfff17 	ldw	r2,-4(fp)
   870f4:	1080048b 	ldhu	r2,18(r2)
   870f8:	10bfffcc 	andi	r2,r2,65535
   870fc:	18800f1e 	bne	r3,r2,8713c <touch_get_xy+0x274>
        // full, pop an old one
        p->fifo_rear++;
   87100:	e0bfff17 	ldw	r2,-4(fp)
   87104:	1080048b 	ldhu	r2,18(r2)
   87108:	10800044 	addi	r2,r2,1
   8710c:	1007883a 	mov	r3,r2
   87110:	e0bfff17 	ldw	r2,-4(fp)
   87114:	10c0048d 	sth	r3,18(r2)
        p->fifo_rear %= FIFO_SIZE;        
   87118:	e0bfff17 	ldw	r2,-4(fp)
   8711c:	1080048b 	ldhu	r2,18(r2)
   87120:	10bfffcc 	andi	r2,r2,65535
   87124:	1009883a 	mov	r4,r2
   87128:	01400284 	movi	r5,10
   8712c:	00883340 	call	88334 <__umodsi3>
   87130:	1007883a 	mov	r3,r2
   87134:	e0bfff17 	ldw	r2,-4(fp)
   87138:	10c0048d 	sth	r3,18(r2)
        
    }
    DEBUG_OUT("[ ADC] x=%d, y=%d\n", x,y);

    // push now
    p->fifo_x[p->fifo_front] = x;
   8713c:	e0bfff17 	ldw	r2,-4(fp)
   87140:	1080040b 	ldhu	r2,16(r2)
   87144:	10bfffcc 	andi	r2,r2,65535
   87148:	e0ffff17 	ldw	r3,-4(fp)
   8714c:	10800284 	addi	r2,r2,10
   87150:	1085883a 	add	r2,r2,r2
   87154:	1885883a 	add	r2,r3,r2
   87158:	e0fffd0b 	ldhu	r3,-12(fp)
   8715c:	10c0000d 	sth	r3,0(r2)
    p->fifo_y[p->fifo_front] = y;    
   87160:	e0bfff17 	ldw	r2,-4(fp)
   87164:	1080040b 	ldhu	r2,16(r2)
   87168:	10bfffcc 	andi	r2,r2,65535
   8716c:	e0ffff17 	ldw	r3,-4(fp)
   87170:	10800504 	addi	r2,r2,20
   87174:	1085883a 	add	r2,r2,r2
   87178:	1885883a 	add	r2,r3,r2
   8717c:	e0fffd8b 	ldhu	r3,-10(fp)
   87180:	10c0000d 	sth	r3,0(r2)
    p->fifo_front++;
   87184:	e0bfff17 	ldw	r2,-4(fp)
   87188:	1080040b 	ldhu	r2,16(r2)
   8718c:	10800044 	addi	r2,r2,1
   87190:	1007883a 	mov	r3,r2
   87194:	e0bfff17 	ldw	r2,-4(fp)
   87198:	10c0040d 	sth	r3,16(r2)
    p->fifo_front %= FIFO_SIZE;   
   8719c:	e0bfff17 	ldw	r2,-4(fp)
   871a0:	1080040b 	ldhu	r2,16(r2)
   871a4:	10bfffcc 	andi	r2,r2,65535
   871a8:	1009883a 	mov	r4,r2
   871ac:	01400284 	movi	r5,10
   871b0:	00883340 	call	88334 <__umodsi3>
   871b4:	1007883a 	mov	r3,r2
   871b8:	e0bfff17 	ldw	r2,-4(fp)
   871bc:	10c0040d 	sth	r3,16(r2)
    
}
   871c0:	e037883a 	mov	sp,fp
   871c4:	dfc00117 	ldw	ra,4(sp)
   871c8:	df000017 	ldw	fp,0(sp)
   871cc:	dec00204 	addi	sp,sp,8
   871d0:	f800283a 	ret

000871d4 <touch_alarm_callback>:

// polling x/y when penirq_n is low
alt_u32 touch_alarm_callback(void *context){
   871d4:	defffc04 	addi	sp,sp,-16
   871d8:	dfc00315 	stw	ra,12(sp)
   871dc:	df000215 	stw	fp,8(sp)
   871e0:	df000204 	addi	fp,sp,8
   871e4:	e13fff15 	stw	r4,-4(fp)
    TERASIC_TOUCH_PANEL *p = (TERASIC_TOUCH_PANEL *)context;
   871e8:	e0bfff17 	ldw	r2,-4(fp)
   871ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (touch_is_pen_pressed(p)){//Touch.pen_pressed){
   871f0:	e13ffe17 	ldw	r4,-8(fp)
   871f4:	0086cf40 	call	86cf4 <touch_is_pen_pressed>
   871f8:	10000926 	beq	r2,zero,87220 <touch_alarm_callback+0x4c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   871fc:	008002f4 	movhi	r2,11
   87200:	1091ee04 	addi	r2,r2,18360
   87204:	10800017 	ldw	r2,0(r2)
        if (alt_nticks() > p->next_active_time)
   87208:	e0fffe17 	ldw	r3,-8(fp)
   8720c:	18c01717 	ldw	r3,92(r3)
   87210:	1880072e 	bgeu	r3,r2,87230 <touch_alarm_callback+0x5c>
            touch_get_xy(p);
   87214:	e13ffe17 	ldw	r4,-8(fp)
   87218:	0086ec80 	call	86ec8 <touch_get_xy>
   8721c:	00000406 	br	87230 <touch_alarm_callback+0x5c>
      //  p->last_active_time = alt_nticks(); 
    }else{
       // touch_empty_fifo(p);
        //if ((alt_nticks() - Touch.last_active_time) > alt_ticks_per_second()/10){
         touch_enable_penirq(p);
   87220:	e13ffe17 	ldw	r4,-8(fp)
   87224:	0086d340 	call	86d34 <touch_enable_penirq>
         touch_clear_input(p);
   87228:	e13ffe17 	ldw	r4,-8(fp)
   8722c:	0086e980 	call	86e98 <touch_clear_input>
          //  p->last_active_time = alt_nticks(); 
        //}            
    }        
    return p->alarm_dur;
   87230:	e0bffe17 	ldw	r2,-8(fp)
   87234:	10801617 	ldw	r2,88(r2)
}
   87238:	e037883a 	mov	sp,fp
   8723c:	dfc00117 	ldw	ra,4(sp)
   87240:	df000017 	ldw	fp,0(sp)
   87244:	dec00204 	addi	sp,sp,8
   87248:	f800283a 	ret

0008724c <touch_xy_transform>:

void touch_xy_transform(int *x, int *y){
   8724c:	defff904 	addi	sp,sp,-28
   87250:	dfc00615 	stw	ra,24(sp)
   87254:	df000515 	stw	fp,20(sp)
   87258:	df000504 	addi	fp,sp,20
   8725c:	e13ffe15 	stw	r4,-8(fp)
   87260:	e17fff15 	stw	r5,-4(fp)
    int xx, yy;
    const int y_ignore = 200;
   87264:	00803204 	movi	r2,200
   87268:	e0bffc15 	stw	r2,-16(fp)
    xx = *y;
   8726c:	e0bfff17 	ldw	r2,-4(fp)
   87270:	10800017 	ldw	r2,0(r2)
   87274:	e0bffd15 	stw	r2,-12(fp)
    yy = *x;
   87278:	e0bffe17 	ldw	r2,-8(fp)
   8727c:	10800017 	ldw	r2,0(r2)
   87280:	e0bffb15 	stw	r2,-20(fp)

    // scale & swap
   // xx = 4096 -1 - xx;
    xx = xx * X_RES / 4096;
   87284:	e0bffd17 	ldw	r2,-12(fp)
   87288:	10803c24 	muli	r2,r2,240
   8728c:	1000010e 	bge	r2,zero,87294 <touch_xy_transform+0x48>
   87290:	1083ffc4 	addi	r2,r2,4095
   87294:	1005d33a 	srai	r2,r2,12
   87298:	e0bffd15 	stw	r2,-12(fp)

   // yy = 4096 -1 - yy;

    // special calibrate for LT24
    if (yy > (4096-y_ignore))
   8729c:	00c40004 	movi	r3,4096
   872a0:	e0bffc17 	ldw	r2,-16(fp)
   872a4:	1887c83a 	sub	r3,r3,r2
   872a8:	e0bffb17 	ldw	r2,-20(fp)
   872ac:	1880040e 	bge	r3,r2,872c0 <touch_xy_transform+0x74>
    	yy = 4096-y_ignore;
   872b0:	00c40004 	movi	r3,4096
   872b4:	e0bffc17 	ldw	r2,-16(fp)
   872b8:	1885c83a 	sub	r2,r3,r2
   872bc:	e0bffb15 	stw	r2,-20(fp)
    yy = yy * 4095/ (4096-y_ignore);
   872c0:	e0bffb17 	ldw	r2,-20(fp)
   872c4:	10c3ffe4 	muli	r3,r2,4095
   872c8:	01040004 	movi	r4,4096
   872cc:	e0bffc17 	ldw	r2,-16(fp)
   872d0:	2085c83a 	sub	r2,r4,r2
   872d4:	1809883a 	mov	r4,r3
   872d8:	100b883a 	mov	r5,r2
   872dc:	00882800 	call	88280 <__divsi3>
   872e0:	e0bffb15 	stw	r2,-20(fp)
    
    yy = yy * Y_RES / 4096;
   872e4:	e0bffb17 	ldw	r2,-20(fp)
   872e8:	10805024 	muli	r2,r2,320
   872ec:	1000010e 	bge	r2,zero,872f4 <touch_xy_transform+0xa8>
   872f0:	1083ffc4 	addi	r2,r2,4095
   872f4:	1005d33a 	srai	r2,r2,12
   872f8:	e0bffb15 	stw	r2,-20(fp)

    // swap
    *x = xx;
   872fc:	e0bffe17 	ldw	r2,-8(fp)
   87300:	e0fffd17 	ldw	r3,-12(fp)
   87304:	10c00015 	stw	r3,0(r2)
    *y = yy;    
   87308:	e0bfff17 	ldw	r2,-4(fp)
   8730c:	e0fffb17 	ldw	r3,-20(fp)
   87310:	10c00015 	stw	r3,0(r2)
    
}
   87314:	e037883a 	mov	sp,fp
   87318:	dfc00117 	ldw	ra,4(sp)
   8731c:	df000017 	ldw	fp,0(sp)
   87320:	dec00204 	addi	sp,sp,8
   87324:	f800283a 	ret

00087328 <sqrt>:
   87328:	defff104 	addi	sp,sp,-60
   8732c:	dcc00d15 	stw	r19,52(sp)
   87330:	dc800c15 	stw	r18,48(sp)
   87334:	dc400b15 	stw	r17,44(sp)
   87338:	dc000a15 	stw	r16,40(sp)
   8733c:	2023883a 	mov	r17,r4
   87340:	dfc00e15 	stw	ra,56(sp)
   87344:	048002f4 	movhi	r18,11
   87348:	94844d04 	addi	r18,r18,4404
   8734c:	2821883a 	mov	r16,r5
   87350:	00874700 	call	87470 <__ieee754_sqrt>
   87354:	91000017 	ldw	r4,0(r18)
   87358:	1027883a 	mov	r19,r2
   8735c:	00bfffc4 	movi	r2,-1
   87360:	20800d26 	beq	r4,r2,87398 <sqrt+0x70>
   87364:	8809883a 	mov	r4,r17
   87368:	800b883a 	mov	r5,r16
   8736c:	d8c00915 	stw	r3,36(sp)
   87370:	00877340 	call	87734 <__isnand>
   87374:	d8c00917 	ldw	r3,36(sp)
   87378:	1000071e 	bne	r2,zero,87398 <sqrt+0x70>
   8737c:	8809883a 	mov	r4,r17
   87380:	800b883a 	mov	r5,r16
   87384:	000d883a 	mov	r6,zero
   87388:	000f883a 	mov	r7,zero
   8738c:	00880080 	call	88008 <__ltdf2>
   87390:	d8c00917 	ldw	r3,36(sp)
   87394:	10000816 	blt	r2,zero,873b8 <sqrt+0x90>
   87398:	9805883a 	mov	r2,r19
   8739c:	dfc00e17 	ldw	ra,56(sp)
   873a0:	dcc00d17 	ldw	r19,52(sp)
   873a4:	dc800c17 	ldw	r18,48(sp)
   873a8:	dc400b17 	ldw	r17,44(sp)
   873ac:	dc000a17 	ldw	r16,40(sp)
   873b0:	dec00f04 	addi	sp,sp,60
   873b4:	f800283a 	ret
   873b8:	94800017 	ldw	r18,0(r18)
   873bc:	00800044 	movi	r2,1
   873c0:	d8800015 	stw	r2,0(sp)
   873c4:	008002f4 	movhi	r2,11
   873c8:	10b60f04 	addi	r2,r2,-10180
   873cc:	d8800115 	stw	r2,4(sp)
   873d0:	d8000815 	stw	zero,32(sp)
   873d4:	dc400415 	stw	r17,16(sp)
   873d8:	dc000515 	stw	r16,20(sp)
   873dc:	dc400215 	stw	r17,8(sp)
   873e0:	dc000315 	stw	r16,12(sp)
   873e4:	9000111e 	bne	r18,zero,8742c <sqrt+0x104>
   873e8:	d8000615 	stw	zero,24(sp)
   873ec:	d8000715 	stw	zero,28(sp)
   873f0:	d809883a 	mov	r4,sp
   873f4:	00877600 	call	87760 <matherr>
   873f8:	10001526 	beq	r2,zero,87450 <sqrt+0x128>
   873fc:	d8800817 	ldw	r2,32(sp)
   87400:	1000171e 	bne	r2,zero,87460 <sqrt+0x138>
   87404:	dcc00617 	ldw	r19,24(sp)
   87408:	d8c00717 	ldw	r3,28(sp)
   8740c:	9805883a 	mov	r2,r19
   87410:	dfc00e17 	ldw	ra,56(sp)
   87414:	dcc00d17 	ldw	r19,52(sp)
   87418:	dc800c17 	ldw	r18,48(sp)
   8741c:	dc400b17 	ldw	r17,44(sp)
   87420:	dc000a17 	ldw	r16,40(sp)
   87424:	dec00f04 	addi	sp,sp,60
   87428:	f800283a 	ret
   8742c:	0009883a 	mov	r4,zero
   87430:	000b883a 	mov	r5,zero
   87434:	000d883a 	mov	r6,zero
   87438:	000f883a 	mov	r7,zero
   8743c:	0087e540 	call	87e54 <__divdf3>
   87440:	d8800615 	stw	r2,24(sp)
   87444:	d8c00715 	stw	r3,28(sp)
   87448:	00800084 	movi	r2,2
   8744c:	90bfe81e 	bne	r18,r2,873f0 <sqrt+0xc8>
   87450:	00888c80 	call	888c8 <__errno>
   87454:	00c00844 	movi	r3,33
   87458:	10c00015 	stw	r3,0(r2)
   8745c:	003fe706 	br	873fc <sqrt+0xd4>
   87460:	00888c80 	call	888c8 <__errno>
   87464:	d8c00817 	ldw	r3,32(sp)
   87468:	10c00015 	stw	r3,0(r2)
   8746c:	003fe506 	br	87404 <sqrt+0xdc>

00087470 <__ieee754_sqrt>:
   87470:	defffd04 	addi	sp,sp,-12
   87474:	dc400115 	stw	r17,4(sp)
   87478:	dc000015 	stw	r16,0(sp)
   8747c:	dfc00215 	stw	ra,8(sp)
   87480:	28dffc2c 	andhi	r3,r5,32752
   87484:	009ffc34 	movhi	r2,32752
   87488:	2821883a 	mov	r16,r5
   8748c:	2023883a 	mov	r17,r4
   87490:	2811883a 	mov	r8,r5
   87494:	2013883a 	mov	r9,r4
   87498:	18808326 	beq	r3,r2,876a8 <__ieee754_sqrt+0x238>
   8749c:	0140610e 	bge	zero,r5,87624 <__ieee754_sqrt+0x1b4>
   874a0:	2805d53a 	srai	r2,r5,20
   874a4:	10006a26 	beq	r2,zero,87650 <__ieee754_sqrt+0x1e0>
   874a8:	00c00434 	movhi	r3,16
   874ac:	18ffffc4 	addi	r3,r3,-1
   874b0:	10bf0044 	addi	r2,r2,-1023
   874b4:	40d0703a 	and	r8,r8,r3
   874b8:	10c0004c 	andi	r3,r2,1
   874bc:	42000434 	orhi	r8,r8,16
   874c0:	1800511e 	bne	r3,zero,87608 <__ieee754_sqrt+0x198>
   874c4:	4808d7fa 	srli	r4,r9,31
   874c8:	4211883a 	add	r8,r8,r8
   874cc:	101bd07a 	srai	r13,r2,1
   874d0:	4107883a 	add	r3,r8,r4
   874d4:	4a4b883a 	add	r5,r9,r9
   874d8:	01000584 	movi	r4,22
   874dc:	0015883a 	mov	r10,zero
   874e0:	000d883a 	mov	r6,zero
   874e4:	00800834 	movhi	r2,32
   874e8:	308f883a 	add	r7,r6,r2
   874ec:	2810d7fa 	srli	r8,r5,31
   874f0:	213fffc4 	addi	r4,r4,-1
   874f4:	19c00316 	blt	r3,r7,87504 <__ieee754_sqrt+0x94>
   874f8:	19c7c83a 	sub	r3,r3,r7
   874fc:	388d883a 	add	r6,r7,r2
   87500:	5095883a 	add	r10,r10,r2
   87504:	18c7883a 	add	r3,r3,r3
   87508:	1a07883a 	add	r3,r3,r8
   8750c:	294b883a 	add	r5,r5,r5
   87510:	1004d07a 	srli	r2,r2,1
   87514:	203ff41e 	bne	r4,zero,874e8 <__ieee754_sqrt+0x78>
   87518:	01e00034 	movhi	r7,32768
   8751c:	02400804 	movi	r9,32
   87520:	0005883a 	mov	r2,zero
   87524:	0017883a 	mov	r11,zero
   87528:	3819883a 	mov	r12,r7
   8752c:	00000806 	br	87550 <__ieee754_sqrt+0xe0>
   87530:	19803226 	beq	r3,r6,875fc <__ieee754_sqrt+0x18c>
   87534:	2810d7fa 	srli	r8,r5,31
   87538:	18c7883a 	add	r3,r3,r3
   8753c:	4a7fffc4 	addi	r9,r9,-1
   87540:	1a07883a 	add	r3,r3,r8
   87544:	294b883a 	add	r5,r5,r5
   87548:	380ed07a 	srli	r7,r7,1
   8754c:	48001326 	beq	r9,zero,8759c <__ieee754_sqrt+0x12c>
   87550:	59d1883a 	add	r8,r11,r7
   87554:	30fff60e 	bge	r6,r3,87530 <__ieee754_sqrt+0xc0>
   87558:	4120002c 	andhi	r4,r8,32768
   8755c:	41d7883a 	add	r11,r8,r7
   87560:	23002326 	beq	r4,r12,875f0 <__ieee754_sqrt+0x180>
   87564:	3009883a 	mov	r4,r6
   87568:	1987c83a 	sub	r3,r3,r6
   8756c:	2a00012e 	bgeu	r5,r8,87574 <__ieee754_sqrt+0x104>
   87570:	18ffffc4 	addi	r3,r3,-1
   87574:	2a0bc83a 	sub	r5,r5,r8
   87578:	2810d7fa 	srli	r8,r5,31
   8757c:	18c7883a 	add	r3,r3,r3
   87580:	4a7fffc4 	addi	r9,r9,-1
   87584:	11c5883a 	add	r2,r2,r7
   87588:	200d883a 	mov	r6,r4
   8758c:	1a07883a 	add	r3,r3,r8
   87590:	294b883a 	add	r5,r5,r5
   87594:	380ed07a 	srli	r7,r7,1
   87598:	483fed1e 	bne	r9,zero,87550 <__ieee754_sqrt+0xe0>
   8759c:	28c6b03a 	or	r3,r5,r3
   875a0:	18000426 	beq	r3,zero,875b4 <__ieee754_sqrt+0x144>
   875a4:	00ffffc4 	movi	r3,-1
   875a8:	10c05026 	beq	r2,r3,876ec <__ieee754_sqrt+0x27c>
   875ac:	10c0004c 	andi	r3,r2,1
   875b0:	1885883a 	add	r2,r3,r2
   875b4:	1022d07a 	srli	r17,r2,1
   875b8:	5007d07a 	srai	r3,r10,1
   875bc:	008ff834 	movhi	r2,16352
   875c0:	5280004c 	andi	r10,r10,1
   875c4:	1887883a 	add	r3,r3,r2
   875c8:	5000141e 	bne	r10,zero,8761c <__ieee754_sqrt+0x1ac>
   875cc:	681a953a 	slli	r13,r13,20
   875d0:	68e1883a 	add	r16,r13,r3
   875d4:	8805883a 	mov	r2,r17
   875d8:	8007883a 	mov	r3,r16
   875dc:	dfc00217 	ldw	ra,8(sp)
   875e0:	dc400117 	ldw	r17,4(sp)
   875e4:	dc000017 	ldw	r16,0(sp)
   875e8:	dec00304 	addi	sp,sp,12
   875ec:	f800283a 	ret
   875f0:	583fdc16 	blt	r11,zero,87564 <__ieee754_sqrt+0xf4>
   875f4:	31000044 	addi	r4,r6,1
   875f8:	003fdb06 	br	87568 <__ieee754_sqrt+0xf8>
   875fc:	2a3fd62e 	bgeu	r5,r8,87558 <__ieee754_sqrt+0xe8>
   87600:	180d883a 	mov	r6,r3
   87604:	003fcb06 	br	87534 <__ieee754_sqrt+0xc4>
   87608:	4806d7fa 	srli	r3,r9,31
   8760c:	4211883a 	add	r8,r8,r8
   87610:	4a53883a 	add	r9,r9,r9
   87614:	40d1883a 	add	r8,r8,r3
   87618:	003faa06 	br	874c4 <__ieee754_sqrt+0x54>
   8761c:	8c600034 	orhi	r17,r17,32768
   87620:	003fea06 	br	875cc <__ieee754_sqrt+0x15c>
   87624:	00a00034 	movhi	r2,32768
   87628:	10bfffc4 	addi	r2,r2,-1
   8762c:	2884703a 	and	r2,r5,r2
   87630:	1104b03a 	or	r2,r2,r4
   87634:	103fe726 	beq	r2,zero,875d4 <__ieee754_sqrt+0x164>
   87638:	2800331e 	bne	r5,zero,87708 <__ieee754_sqrt+0x298>
   8763c:	0005883a 	mov	r2,zero
   87640:	4810d2fa 	srli	r8,r9,11
   87644:	10bffac4 	addi	r2,r2,-21
   87648:	4812957a 	slli	r9,r9,21
   8764c:	403ffc26 	beq	r8,zero,87640 <__ieee754_sqrt+0x1d0>
   87650:	40c0042c 	andhi	r3,r8,16
   87654:	1800281e 	bne	r3,zero,876f8 <__ieee754_sqrt+0x288>
   87658:	4211883a 	add	r8,r8,r8
   8765c:	4100042c 	andhi	r4,r8,16
   87660:	18c00044 	addi	r3,r3,1
   87664:	203ffc26 	beq	r4,zero,87658 <__ieee754_sqrt+0x1e8>
   87668:	01400044 	movi	r5,1
   8766c:	01000804 	movi	r4,32
   87670:	28cbc83a 	sub	r5,r5,r3
   87674:	20c9c83a 	sub	r4,r4,r3
   87678:	4908d83a 	srl	r4,r9,r4
   8767c:	1145883a 	add	r2,r2,r5
   87680:	48d2983a 	sll	r9,r9,r3
   87684:	4110b03a 	or	r8,r8,r4
   87688:	00c00434 	movhi	r3,16
   8768c:	18ffffc4 	addi	r3,r3,-1
   87690:	10bf0044 	addi	r2,r2,-1023
   87694:	40d0703a 	and	r8,r8,r3
   87698:	10c0004c 	andi	r3,r2,1
   8769c:	42000434 	orhi	r8,r8,16
   876a0:	183f8826 	beq	r3,zero,874c4 <__ieee754_sqrt+0x54>
   876a4:	003fd806 	br	87608 <__ieee754_sqrt+0x198>
   876a8:	200d883a 	mov	r6,r4
   876ac:	280f883a 	mov	r7,r5
   876b0:	0087b700 	call	87b70 <__muldf3>
   876b4:	8809883a 	mov	r4,r17
   876b8:	800b883a 	mov	r5,r16
   876bc:	100d883a 	mov	r6,r2
   876c0:	180f883a 	mov	r7,r3
   876c4:	0087abc0 	call	87abc <__adddf3>
   876c8:	1023883a 	mov	r17,r2
   876cc:	1821883a 	mov	r16,r3
   876d0:	8805883a 	mov	r2,r17
   876d4:	8007883a 	mov	r3,r16
   876d8:	dfc00217 	ldw	ra,8(sp)
   876dc:	dc400117 	ldw	r17,4(sp)
   876e0:	dc000017 	ldw	r16,0(sp)
   876e4:	dec00304 	addi	sp,sp,12
   876e8:	f800283a 	ret
   876ec:	52800044 	addi	r10,r10,1
   876f0:	0023883a 	mov	r17,zero
   876f4:	003fb006 	br	875b8 <__ieee754_sqrt+0x148>
   876f8:	01000804 	movi	r4,32
   876fc:	01400044 	movi	r5,1
   87700:	0007883a 	mov	r3,zero
   87704:	003fdc06 	br	87678 <__ieee754_sqrt+0x208>
   87708:	200d883a 	mov	r6,r4
   8770c:	280f883a 	mov	r7,r5
   87710:	0087b100 	call	87b10 <__subdf3>
   87714:	1009883a 	mov	r4,r2
   87718:	180b883a 	mov	r5,r3
   8771c:	100d883a 	mov	r6,r2
   87720:	180f883a 	mov	r7,r3
   87724:	0087e540 	call	87e54 <__divdf3>
   87728:	1023883a 	mov	r17,r2
   8772c:	1821883a 	mov	r16,r3
   87730:	003fa806 	br	875d4 <__ieee754_sqrt+0x164>

00087734 <__isnand>:
   87734:	0105c83a 	sub	r2,zero,r4
   87738:	1108b03a 	or	r4,r2,r4
   8773c:	2004d7fa 	srli	r2,r4,31
   87740:	00e00034 	movhi	r3,32768
   87744:	18ffffc4 	addi	r3,r3,-1
   87748:	28ca703a 	and	r5,r5,r3
   8774c:	1144b03a 	or	r2,r2,r5
   87750:	00dffc34 	movhi	r3,32752
   87754:	1885c83a 	sub	r2,r3,r2
   87758:	1004d7fa 	srli	r2,r2,31
   8775c:	f800283a 	ret

00087760 <matherr>:
   87760:	0005883a 	mov	r2,zero
   87764:	f800283a 	ret

00087768 <_fpadd_parts>:
   87768:	2005883a 	mov	r2,r4
   8776c:	21000017 	ldw	r4,0(r4)
   87770:	01c00044 	movi	r7,1
   87774:	3900622e 	bgeu	r7,r4,87900 <_fpadd_parts+0x198>
   87778:	28c00017 	ldw	r3,0(r5)
   8777c:	38c05f2e 	bgeu	r7,r3,878fc <_fpadd_parts+0x194>
   87780:	01c00104 	movi	r7,4
   87784:	21c0c626 	beq	r4,r7,87aa0 <_fpadd_parts+0x338>
   87788:	19c05c26 	beq	r3,r7,878fc <_fpadd_parts+0x194>
   8778c:	01c00084 	movi	r7,2
   87790:	19c06b26 	beq	r3,r7,87940 <_fpadd_parts+0x1d8>
   87794:	21c05926 	beq	r4,r7,878fc <_fpadd_parts+0x194>
   87798:	11c00217 	ldw	r7,8(r2)
   8779c:	2ac00217 	ldw	r11,8(r5)
   877a0:	13000317 	ldw	r12,12(r2)
   877a4:	13400417 	ldw	r13,16(r2)
   877a8:	3ac9c83a 	sub	r4,r7,r11
   877ac:	2a000317 	ldw	r8,12(r5)
   877b0:	2a400417 	ldw	r9,16(r5)
   877b4:	2015883a 	mov	r10,r4
   877b8:	20007516 	blt	r4,zero,87990 <_fpadd_parts+0x228>
   877bc:	00c00fc4 	movi	r3,63
   877c0:	1a805016 	blt	r3,r10,87904 <_fpadd_parts+0x19c>
   877c4:	0100870e 	bge	zero,r4,879e4 <_fpadd_parts+0x27c>
   877c8:	50fff804 	addi	r3,r10,-32
   877cc:	18009916 	blt	r3,zero,87a34 <_fpadd_parts+0x2cc>
   877d0:	48d6d83a 	srl	r11,r9,r3
   877d4:	001d883a 	mov	r14,zero
   877d8:	18009e16 	blt	r3,zero,87a54 <_fpadd_parts+0x2ec>
   877dc:	01000044 	movi	r4,1
   877e0:	20c6983a 	sll	r3,r4,r3
   877e4:	0015883a 	mov	r10,zero
   877e8:	513fffc4 	addi	r4,r10,-1
   877ec:	2295403a 	cmpgeu	r10,r4,r10
   877f0:	1a87c83a 	sub	r3,r3,r10
   877f4:	1a52703a 	and	r9,r3,r9
   877f8:	2210703a 	and	r8,r4,r8
   877fc:	4250b03a 	or	r8,r8,r9
   87800:	4010c03a 	cmpne	r8,r8,zero
   87804:	42d0b03a 	or	r8,r8,r11
   87808:	7013883a 	mov	r9,r14
   8780c:	11000117 	ldw	r4,4(r2)
   87810:	28800117 	ldw	r2,4(r5)
   87814:	20804126 	beq	r4,r2,8791c <_fpadd_parts+0x1b4>
   87818:	20006326 	beq	r4,zero,879a8 <_fpadd_parts+0x240>
   8781c:	4305c83a 	sub	r2,r8,r12
   87820:	4091803a 	cmpltu	r8,r8,r2
   87824:	4b47c83a 	sub	r3,r9,r13
   87828:	1a07c83a 	sub	r3,r3,r8
   8782c:	18006316 	blt	r3,zero,879bc <_fpadd_parts+0x254>
   87830:	30000115 	stw	zero,4(r6)
   87834:	31c00215 	stw	r7,8(r6)
   87838:	30800315 	stw	r2,12(r6)
   8783c:	30c00415 	stw	r3,16(r6)
   87840:	11ffffc4 	addi	r7,r2,-1
   87844:	388b403a 	cmpgeu	r5,r7,r2
   87848:	194bc83a 	sub	r5,r3,r5
   8784c:	01040034 	movhi	r4,4096
   87850:	213fffc4 	addi	r4,r4,-1
   87854:	21401736 	bltu	r4,r5,878b4 <_fpadd_parts+0x14c>
   87858:	29008226 	beq	r5,r4,87a64 <_fpadd_parts+0x2fc>
   8785c:	31400217 	ldw	r5,8(r6)
   87860:	02840034 	movhi	r10,4096
   87864:	52bfffc4 	addi	r10,r10,-1
   87868:	033fff84 	movi	r12,-2
   8786c:	297fffc4 	addi	r5,r5,-1
   87870:	00000106 	br	87878 <_fpadd_parts+0x110>
   87874:	3a804a26 	beq	r7,r10,879a0 <_fpadd_parts+0x238>
   87878:	1089883a 	add	r4,r2,r2
   8787c:	2091803a 	cmpltu	r8,r4,r2
   87880:	18c7883a 	add	r3,r3,r3
   87884:	227fffc4 	addi	r9,r4,-1
   87888:	40d1883a 	add	r8,r8,r3
   8788c:	490f403a 	cmpgeu	r7,r9,r4
   87890:	41cfc83a 	sub	r7,r8,r7
   87894:	2817883a 	mov	r11,r5
   87898:	2005883a 	mov	r2,r4
   8789c:	4007883a 	mov	r3,r8
   878a0:	297fffc4 	addi	r5,r5,-1
   878a4:	51fff32e 	bgeu	r10,r7,87874 <_fpadd_parts+0x10c>
   878a8:	31000315 	stw	r4,12(r6)
   878ac:	32000415 	stw	r8,16(r6)
   878b0:	32c00215 	stw	r11,8(r6)
   878b4:	010000c4 	movi	r4,3
   878b8:	31000015 	stw	r4,0(r6)
   878bc:	01080034 	movhi	r4,8192
   878c0:	213fffc4 	addi	r4,r4,-1
   878c4:	20c00b2e 	bgeu	r4,r3,878f4 <_fpadd_parts+0x18c>
   878c8:	180e97fa 	slli	r7,r3,31
   878cc:	1008d07a 	srli	r4,r2,1
   878d0:	31400217 	ldw	r5,8(r6)
   878d4:	1806d07a 	srli	r3,r3,1
   878d8:	1080004c 	andi	r2,r2,1
   878dc:	3908b03a 	or	r4,r7,r4
   878e0:	1108b03a 	or	r4,r2,r4
   878e4:	29400044 	addi	r5,r5,1
   878e8:	31000315 	stw	r4,12(r6)
   878ec:	30c00415 	stw	r3,16(r6)
   878f0:	31400215 	stw	r5,8(r6)
   878f4:	3005883a 	mov	r2,r6
   878f8:	f800283a 	ret
   878fc:	2805883a 	mov	r2,r5
   87900:	f800283a 	ret
   87904:	59c01e0e 	bge	r11,r7,87980 <_fpadd_parts+0x218>
   87908:	11000117 	ldw	r4,4(r2)
   8790c:	28800117 	ldw	r2,4(r5)
   87910:	0011883a 	mov	r8,zero
   87914:	0013883a 	mov	r9,zero
   87918:	20bfbf1e 	bne	r4,r2,87818 <_fpadd_parts+0xb0>
   8791c:	4305883a 	add	r2,r8,r12
   87920:	1207803a 	cmpltu	r3,r2,r8
   87924:	4b53883a 	add	r9,r9,r13
   87928:	1a47883a 	add	r3,r3,r9
   8792c:	31000115 	stw	r4,4(r6)
   87930:	31c00215 	stw	r7,8(r6)
   87934:	30800315 	stw	r2,12(r6)
   87938:	30c00415 	stw	r3,16(r6)
   8793c:	003fdd06 	br	878b4 <_fpadd_parts+0x14c>
   87940:	20ffef1e 	bne	r4,r3,87900 <_fpadd_parts+0x198>
   87944:	31000015 	stw	r4,0(r6)
   87948:	10c00117 	ldw	r3,4(r2)
   8794c:	30c00115 	stw	r3,4(r6)
   87950:	10c00217 	ldw	r3,8(r2)
   87954:	11000117 	ldw	r4,4(r2)
   87958:	29400117 	ldw	r5,4(r5)
   8795c:	30c00215 	stw	r3,8(r6)
   87960:	10c00317 	ldw	r3,12(r2)
   87964:	2908703a 	and	r4,r5,r4
   87968:	30c00315 	stw	r3,12(r6)
   8796c:	10c00417 	ldw	r3,16(r2)
   87970:	31000115 	stw	r4,4(r6)
   87974:	3005883a 	mov	r2,r6
   87978:	30c00415 	stw	r3,16(r6)
   8797c:	f800283a 	ret
   87980:	580f883a 	mov	r7,r11
   87984:	0019883a 	mov	r12,zero
   87988:	001b883a 	mov	r13,zero
   8798c:	003f9f06 	br	8780c <_fpadd_parts+0xa4>
   87990:	0115c83a 	sub	r10,zero,r4
   87994:	00c00fc4 	movi	r3,63
   87998:	1abfda16 	blt	r3,r10,87904 <_fpadd_parts+0x19c>
   8799c:	003f8906 	br	877c4 <_fpadd_parts+0x5c>
   879a0:	627fb52e 	bgeu	r12,r9,87878 <_fpadd_parts+0x110>
   879a4:	003fc006 	br	878a8 <_fpadd_parts+0x140>
   879a8:	6205c83a 	sub	r2,r12,r8
   879ac:	6099803a 	cmpltu	r12,r12,r2
   879b0:	6a47c83a 	sub	r3,r13,r9
   879b4:	1b07c83a 	sub	r3,r3,r12
   879b8:	183f9d0e 	bge	r3,zero,87830 <_fpadd_parts+0xc8>
   879bc:	0085c83a 	sub	r2,zero,r2
   879c0:	1008c03a 	cmpne	r4,r2,zero
   879c4:	00c7c83a 	sub	r3,zero,r3
   879c8:	1907c83a 	sub	r3,r3,r4
   879cc:	01000044 	movi	r4,1
   879d0:	31000115 	stw	r4,4(r6)
   879d4:	31c00215 	stw	r7,8(r6)
   879d8:	30800315 	stw	r2,12(r6)
   879dc:	30c00415 	stw	r3,16(r6)
   879e0:	003f9706 	br	87840 <_fpadd_parts+0xd8>
   879e4:	203f8926 	beq	r4,zero,8780c <_fpadd_parts+0xa4>
   879e8:	50fff804 	addi	r3,r10,-32
   879ec:	3a8f883a 	add	r7,r7,r10
   879f0:	18002316 	blt	r3,zero,87a80 <_fpadd_parts+0x318>
   879f4:	68d6d83a 	srl	r11,r13,r3
   879f8:	001d883a 	mov	r14,zero
   879fc:	18001c16 	blt	r3,zero,87a70 <_fpadd_parts+0x308>
   87a00:	01000044 	movi	r4,1
   87a04:	20c6983a 	sll	r3,r4,r3
   87a08:	0015883a 	mov	r10,zero
   87a0c:	513fffc4 	addi	r4,r10,-1
   87a10:	2295403a 	cmpgeu	r10,r4,r10
   87a14:	1a87c83a 	sub	r3,r3,r10
   87a18:	1b5a703a 	and	r13,r3,r13
   87a1c:	2318703a 	and	r12,r4,r12
   87a20:	6358b03a 	or	r12,r12,r13
   87a24:	6018c03a 	cmpne	r12,r12,zero
   87a28:	62d8b03a 	or	r12,r12,r11
   87a2c:	701b883a 	mov	r13,r14
   87a30:	003f7606 	br	8780c <_fpadd_parts+0xa4>
   87a34:	4808907a 	slli	r4,r9,1
   87a38:	02c007c4 	movi	r11,31
   87a3c:	5a97c83a 	sub	r11,r11,r10
   87a40:	22c8983a 	sll	r4,r4,r11
   87a44:	4296d83a 	srl	r11,r8,r10
   87a48:	4a9cd83a 	srl	r14,r9,r10
   87a4c:	22d6b03a 	or	r11,r4,r11
   87a50:	003f6106 	br	877d8 <_fpadd_parts+0x70>
   87a54:	00c00044 	movi	r3,1
   87a58:	1a94983a 	sll	r10,r3,r10
   87a5c:	0007883a 	mov	r3,zero
   87a60:	003f6106 	br	877e8 <_fpadd_parts+0x80>
   87a64:	013fff84 	movi	r4,-2
   87a68:	21ff7c2e 	bgeu	r4,r7,8785c <_fpadd_parts+0xf4>
   87a6c:	003f9106 	br	878b4 <_fpadd_parts+0x14c>
   87a70:	00c00044 	movi	r3,1
   87a74:	1a94983a 	sll	r10,r3,r10
   87a78:	0007883a 	mov	r3,zero
   87a7c:	003fe306 	br	87a0c <_fpadd_parts+0x2a4>
   87a80:	6816907a 	slli	r11,r13,1
   87a84:	010007c4 	movi	r4,31
   87a88:	2289c83a 	sub	r4,r4,r10
   87a8c:	5908983a 	sll	r4,r11,r4
   87a90:	6296d83a 	srl	r11,r12,r10
   87a94:	6a9cd83a 	srl	r14,r13,r10
   87a98:	22d6b03a 	or	r11,r4,r11
   87a9c:	003fd706 	br	879fc <_fpadd_parts+0x294>
   87aa0:	193f971e 	bne	r3,r4,87900 <_fpadd_parts+0x198>
   87aa4:	11000117 	ldw	r4,4(r2)
   87aa8:	28c00117 	ldw	r3,4(r5)
   87aac:	20ff9426 	beq	r4,r3,87900 <_fpadd_parts+0x198>
   87ab0:	008002f4 	movhi	r2,11
   87ab4:	10b61104 	addi	r2,r2,-10172
   87ab8:	f800283a 	ret

00087abc <__adddf3>:
   87abc:	deffec04 	addi	sp,sp,-80
   87ac0:	d9001115 	stw	r4,68(sp)
   87ac4:	d9401215 	stw	r5,72(sp)
   87ac8:	d9001104 	addi	r4,sp,68
   87acc:	d9400a04 	addi	r5,sp,40
   87ad0:	dfc01315 	stw	ra,76(sp)
   87ad4:	d9c01015 	stw	r7,64(sp)
   87ad8:	d9800f15 	stw	r6,60(sp)
   87adc:	008866c0 	call	8866c <__unpack_d>
   87ae0:	d9000f04 	addi	r4,sp,60
   87ae4:	d9400504 	addi	r5,sp,20
   87ae8:	008866c0 	call	8866c <__unpack_d>
   87aec:	d9000a04 	addi	r4,sp,40
   87af0:	d9400504 	addi	r5,sp,20
   87af4:	d80d883a 	mov	r6,sp
   87af8:	00877680 	call	87768 <_fpadd_parts>
   87afc:	1009883a 	mov	r4,r2
   87b00:	00884480 	call	88448 <__pack_d>
   87b04:	dfc01317 	ldw	ra,76(sp)
   87b08:	dec01404 	addi	sp,sp,80
   87b0c:	f800283a 	ret

00087b10 <__subdf3>:
   87b10:	deffec04 	addi	sp,sp,-80
   87b14:	d9001115 	stw	r4,68(sp)
   87b18:	d9401215 	stw	r5,72(sp)
   87b1c:	d9001104 	addi	r4,sp,68
   87b20:	d9400a04 	addi	r5,sp,40
   87b24:	dfc01315 	stw	ra,76(sp)
   87b28:	d9c01015 	stw	r7,64(sp)
   87b2c:	d9800f15 	stw	r6,60(sp)
   87b30:	008866c0 	call	8866c <__unpack_d>
   87b34:	d9000f04 	addi	r4,sp,60
   87b38:	d9400504 	addi	r5,sp,20
   87b3c:	008866c0 	call	8866c <__unpack_d>
   87b40:	d8800617 	ldw	r2,24(sp)
   87b44:	d9000a04 	addi	r4,sp,40
   87b48:	d9400504 	addi	r5,sp,20
   87b4c:	d80d883a 	mov	r6,sp
   87b50:	1080005c 	xori	r2,r2,1
   87b54:	d8800615 	stw	r2,24(sp)
   87b58:	00877680 	call	87768 <_fpadd_parts>
   87b5c:	1009883a 	mov	r4,r2
   87b60:	00884480 	call	88448 <__pack_d>
   87b64:	dfc01317 	ldw	ra,76(sp)
   87b68:	dec01404 	addi	sp,sp,80
   87b6c:	f800283a 	ret

00087b70 <__muldf3>:
   87b70:	deffe404 	addi	sp,sp,-112
   87b74:	d9001115 	stw	r4,68(sp)
   87b78:	d9401215 	stw	r5,72(sp)
   87b7c:	d9001104 	addi	r4,sp,68
   87b80:	d9400a04 	addi	r5,sp,40
   87b84:	dfc01b15 	stw	ra,108(sp)
   87b88:	d9800f15 	stw	r6,60(sp)
   87b8c:	d9c01015 	stw	r7,64(sp)
   87b90:	ddc01a15 	stw	r23,104(sp)
   87b94:	dd801915 	stw	r22,100(sp)
   87b98:	dd401815 	stw	r21,96(sp)
   87b9c:	dd001715 	stw	r20,92(sp)
   87ba0:	dcc01615 	stw	r19,88(sp)
   87ba4:	dc801515 	stw	r18,84(sp)
   87ba8:	dc401415 	stw	r17,80(sp)
   87bac:	dc001315 	stw	r16,76(sp)
   87bb0:	008866c0 	call	8866c <__unpack_d>
   87bb4:	d9000f04 	addi	r4,sp,60
   87bb8:	d9400504 	addi	r5,sp,20
   87bbc:	008866c0 	call	8866c <__unpack_d>
   87bc0:	d8c00a17 	ldw	r3,40(sp)
   87bc4:	00800044 	movi	r2,1
   87bc8:	10c01136 	bltu	r2,r3,87c10 <__muldf3+0xa0>
   87bcc:	d8c00b17 	ldw	r3,44(sp)
   87bd0:	d8800617 	ldw	r2,24(sp)
   87bd4:	d9000a04 	addi	r4,sp,40
   87bd8:	1884c03a 	cmpne	r2,r3,r2
   87bdc:	d8800b15 	stw	r2,44(sp)
   87be0:	00884480 	call	88448 <__pack_d>
   87be4:	dfc01b17 	ldw	ra,108(sp)
   87be8:	ddc01a17 	ldw	r23,104(sp)
   87bec:	dd801917 	ldw	r22,100(sp)
   87bf0:	dd401817 	ldw	r21,96(sp)
   87bf4:	dd001717 	ldw	r20,92(sp)
   87bf8:	dcc01617 	ldw	r19,88(sp)
   87bfc:	dc801517 	ldw	r18,84(sp)
   87c00:	dc401417 	ldw	r17,80(sp)
   87c04:	dc001317 	ldw	r16,76(sp)
   87c08:	dec01c04 	addi	sp,sp,112
   87c0c:	f800283a 	ret
   87c10:	d9000517 	ldw	r4,20(sp)
   87c14:	11000636 	bltu	r2,r4,87c30 <__muldf3+0xc0>
   87c18:	d8800617 	ldw	r2,24(sp)
   87c1c:	d8c00b17 	ldw	r3,44(sp)
   87c20:	d9000504 	addi	r4,sp,20
   87c24:	1884c03a 	cmpne	r2,r3,r2
   87c28:	d8800615 	stw	r2,24(sp)
   87c2c:	003fec06 	br	87be0 <__muldf3+0x70>
   87c30:	00800104 	movi	r2,4
   87c34:	1880051e 	bne	r3,r2,87c4c <__muldf3+0xdc>
   87c38:	00800084 	movi	r2,2
   87c3c:	20bfe31e 	bne	r4,r2,87bcc <__muldf3+0x5c>
   87c40:	010002f4 	movhi	r4,11
   87c44:	21361104 	addi	r4,r4,-10172
   87c48:	003fe506 	br	87be0 <__muldf3+0x70>
   87c4c:	2080031e 	bne	r4,r2,87c5c <__muldf3+0xec>
   87c50:	00800084 	movi	r2,2
   87c54:	18bffa26 	beq	r3,r2,87c40 <__muldf3+0xd0>
   87c58:	003fef06 	br	87c18 <__muldf3+0xa8>
   87c5c:	00800084 	movi	r2,2
   87c60:	18bfda26 	beq	r3,r2,87bcc <__muldf3+0x5c>
   87c64:	20bfec26 	beq	r4,r2,87c18 <__muldf3+0xa8>
   87c68:	dc000d17 	ldw	r16,52(sp)
   87c6c:	dd000817 	ldw	r20,32(sp)
   87c70:	dc800917 	ldw	r18,36(sp)
   87c74:	8009883a 	mov	r4,r16
   87c78:	000b883a 	mov	r5,zero
   87c7c:	a00d883a 	mov	r6,r20
   87c80:	000f883a 	mov	r7,zero
   87c84:	008833c0 	call	8833c <__muldi3>
   87c88:	dc400e17 	ldw	r17,56(sp)
   87c8c:	9009883a 	mov	r4,r18
   87c90:	800d883a 	mov	r6,r16
   87c94:	000b883a 	mov	r5,zero
   87c98:	000f883a 	mov	r7,zero
   87c9c:	102f883a 	mov	r23,r2
   87ca0:	1827883a 	mov	r19,r3
   87ca4:	008833c0 	call	8833c <__muldi3>
   87ca8:	900d883a 	mov	r6,r18
   87cac:	8809883a 	mov	r4,r17
   87cb0:	000b883a 	mov	r5,zero
   87cb4:	000f883a 	mov	r7,zero
   87cb8:	102b883a 	mov	r21,r2
   87cbc:	1821883a 	mov	r16,r3
   87cc0:	008833c0 	call	8833c <__muldi3>
   87cc4:	8809883a 	mov	r4,r17
   87cc8:	000b883a 	mov	r5,zero
   87ccc:	a00d883a 	mov	r6,r20
   87cd0:	000f883a 	mov	r7,zero
   87cd4:	102d883a 	mov	r22,r2
   87cd8:	1825883a 	mov	r18,r3
   87cdc:	008833c0 	call	8833c <__muldi3>
   87ce0:	154b883a 	add	r5,r2,r21
   87ce4:	2889803a 	cmpltu	r4,r5,r2
   87ce8:	1c07883a 	add	r3,r3,r16
   87cec:	20c9883a 	add	r4,r4,r3
   87cf0:	24004b36 	bltu	r4,r16,87e20 <__muldf3+0x2b0>
   87cf4:	8100011e 	bne	r16,r4,87cfc <__muldf3+0x18c>
   87cf8:	2d404936 	bltu	r5,r21,87e20 <__muldf3+0x2b0>
   87cfc:	0011883a 	mov	r8,zero
   87d00:	0007883a 	mov	r3,zero
   87d04:	2ccb883a 	add	r5,r5,r19
   87d08:	b80d883a 	mov	r6,r23
   87d0c:	2cc0012e 	bgeu	r5,r19,87d14 <__muldf3+0x1a4>
   87d10:	02000044 	movi	r8,1
   87d14:	258f883a 	add	r7,r4,r22
   87d18:	3909803a 	cmpltu	r4,r7,r4
   87d1c:	da400c17 	ldw	r9,48(sp)
   87d20:	2489883a 	add	r4,r4,r18
   87d24:	d8800717 	ldw	r2,28(sp)
   87d28:	20c9883a 	add	r4,r4,r3
   87d2c:	da800b17 	ldw	r10,44(sp)
   87d30:	d8c00617 	ldw	r3,24(sp)
   87d34:	3a11883a 	add	r8,r7,r8
   87d38:	4885883a 	add	r2,r9,r2
   87d3c:	50c6c03a 	cmpne	r3,r10,r3
   87d40:	41cf803a 	cmpltu	r7,r8,r7
   87d44:	12400104 	addi	r9,r2,4
   87d48:	d8c00115 	stw	r3,4(sp)
   87d4c:	3909883a 	add	r4,r7,r4
   87d50:	da400215 	stw	r9,8(sp)
   87d54:	03480034 	movhi	r13,8192
   87d58:	6b7fffc4 	addi	r13,r13,-1
   87d5c:	4007883a 	mov	r3,r8
   87d60:	6900102e 	bgeu	r13,r4,87da4 <__muldf3+0x234>
   87d64:	10800144 	addi	r2,r2,5
   87d68:	180ed07a 	srli	r7,r3,1
   87d6c:	18c0004c 	andi	r3,r3,1
   87d70:	201097fa 	slli	r8,r4,31
   87d74:	281697fa 	slli	r11,r5,31
   87d78:	2008d07a 	srli	r4,r4,1
   87d7c:	3014d07a 	srli	r10,r6,1
   87d80:	2812d07a 	srli	r9,r5,1
   87d84:	1019883a 	mov	r12,r2
   87d88:	18000226 	beq	r3,zero,87d94 <__muldf3+0x224>
   87d8c:	5a8cb03a 	or	r6,r11,r10
   87d90:	49600034 	orhi	r5,r9,32768
   87d94:	41c6b03a 	or	r3,r8,r7
   87d98:	10800044 	addi	r2,r2,1
   87d9c:	693ff236 	bltu	r13,r4,87d68 <__muldf3+0x1f8>
   87da0:	db000215 	stw	r12,8(sp)
   87da4:	03440034 	movhi	r13,4096
   87da8:	6b7fffc4 	addi	r13,r13,-1
   87dac:	69001336 	bltu	r13,r4,87dfc <__muldf3+0x28c>
   87db0:	d8800217 	ldw	r2,8(sp)
   87db4:	10bfffc4 	addi	r2,r2,-1
   87db8:	18d3883a 	add	r9,r3,r3
   87dbc:	48c7803a 	cmpltu	r3,r9,r3
   87dc0:	2109883a 	add	r4,r4,r4
   87dc4:	190f883a 	add	r7,r3,r4
   87dc8:	3191883a 	add	r8,r6,r6
   87dcc:	4197803a 	cmpltu	r11,r8,r6
   87dd0:	2955883a 	add	r10,r5,r5
   87dd4:	1019883a 	mov	r12,r2
   87dd8:	4807883a 	mov	r3,r9
   87ddc:	3809883a 	mov	r4,r7
   87de0:	2800010e 	bge	r5,zero,87de8 <__muldf3+0x278>
   87de4:	48c00054 	ori	r3,r9,1
   87de8:	400d883a 	mov	r6,r8
   87dec:	5a8b883a 	add	r5,r11,r10
   87df0:	10bfffc4 	addi	r2,r2,-1
   87df4:	69fff02e 	bgeu	r13,r7,87db8 <__muldf3+0x248>
   87df8:	db000215 	stw	r12,8(sp)
   87dfc:	18803fcc 	andi	r2,r3,255
   87e00:	01c02004 	movi	r7,128
   87e04:	11c00926 	beq	r2,r7,87e2c <__muldf3+0x2bc>
   87e08:	008000c4 	movi	r2,3
   87e0c:	d9000415 	stw	r4,16(sp)
   87e10:	d8c00315 	stw	r3,12(sp)
   87e14:	d8800015 	stw	r2,0(sp)
   87e18:	d809883a 	mov	r4,sp
   87e1c:	003f7006 	br	87be0 <__muldf3+0x70>
   87e20:	0011883a 	mov	r8,zero
   87e24:	00c00044 	movi	r3,1
   87e28:	003fb606 	br	87d04 <__muldf3+0x194>
   87e2c:	19c0400c 	andi	r7,r3,256
   87e30:	383ff51e 	bne	r7,zero,87e08 <__muldf3+0x298>
   87e34:	314ab03a 	or	r5,r6,r5
   87e38:	283ff326 	beq	r5,zero,87e08 <__muldf3+0x298>
   87e3c:	1885883a 	add	r2,r3,r2
   87e40:	10cb803a 	cmpltu	r5,r2,r3
   87e44:	00ffc004 	movi	r3,-256
   87e48:	10c6703a 	and	r3,r2,r3
   87e4c:	2909883a 	add	r4,r5,r4
   87e50:	003fed06 	br	87e08 <__muldf3+0x298>

00087e54 <__divdf3>:
   87e54:	defff104 	addi	sp,sp,-60
   87e58:	d9000c15 	stw	r4,48(sp)
   87e5c:	d9400d15 	stw	r5,52(sp)
   87e60:	d9000c04 	addi	r4,sp,48
   87e64:	d9400504 	addi	r5,sp,20
   87e68:	dfc00e15 	stw	ra,56(sp)
   87e6c:	d9800a15 	stw	r6,40(sp)
   87e70:	d9c00b15 	stw	r7,44(sp)
   87e74:	008866c0 	call	8866c <__unpack_d>
   87e78:	d9000a04 	addi	r4,sp,40
   87e7c:	d80b883a 	mov	r5,sp
   87e80:	008866c0 	call	8866c <__unpack_d>
   87e84:	d8c00517 	ldw	r3,20(sp)
   87e88:	00800044 	movi	r2,1
   87e8c:	10c00536 	bltu	r2,r3,87ea4 <__divdf3+0x50>
   87e90:	d9000504 	addi	r4,sp,20
   87e94:	00884480 	call	88448 <__pack_d>
   87e98:	dfc00e17 	ldw	ra,56(sp)
   87e9c:	dec00f04 	addi	sp,sp,60
   87ea0:	f800283a 	ret
   87ea4:	d9000017 	ldw	r4,0(sp)
   87ea8:	11000536 	bltu	r2,r4,87ec0 <__divdf3+0x6c>
   87eac:	d809883a 	mov	r4,sp
   87eb0:	00884480 	call	88448 <__pack_d>
   87eb4:	dfc00e17 	ldw	ra,56(sp)
   87eb8:	dec00f04 	addi	sp,sp,60
   87ebc:	f800283a 	ret
   87ec0:	d9800617 	ldw	r6,24(sp)
   87ec4:	d9400117 	ldw	r5,4(sp)
   87ec8:	00800104 	movi	r2,4
   87ecc:	314af03a 	xor	r5,r6,r5
   87ed0:	d9400615 	stw	r5,24(sp)
   87ed4:	18800226 	beq	r3,r2,87ee0 <__divdf3+0x8c>
   87ed8:	01400084 	movi	r5,2
   87edc:	1940041e 	bne	r3,r5,87ef0 <__divdf3+0x9c>
   87ee0:	193feb1e 	bne	r3,r4,87e90 <__divdf3+0x3c>
   87ee4:	010002f4 	movhi	r4,11
   87ee8:	21361104 	addi	r4,r4,-10172
   87eec:	003fe906 	br	87e94 <__divdf3+0x40>
   87ef0:	20803326 	beq	r4,r2,87fc0 <__divdf3+0x16c>
   87ef4:	21403726 	beq	r4,r5,87fd4 <__divdf3+0x180>
   87ef8:	d8800217 	ldw	r2,8(sp)
   87efc:	d9000717 	ldw	r4,28(sp)
   87f00:	d8c00917 	ldw	r3,36(sp)
   87f04:	da000417 	ldw	r8,16(sp)
   87f08:	2089c83a 	sub	r4,r4,r2
   87f0c:	d9000715 	stw	r4,28(sp)
   87f10:	d8800817 	ldw	r2,32(sp)
   87f14:	dbc00317 	ldw	r15,12(sp)
   87f18:	1a000236 	bltu	r3,r8,87f24 <__divdf3+0xd0>
   87f1c:	40c0081e 	bne	r8,r3,87f40 <__divdf3+0xec>
   87f20:	13c0072e 	bgeu	r2,r15,87f40 <__divdf3+0xec>
   87f24:	108b883a 	add	r5,r2,r2
   87f28:	288d803a 	cmpltu	r6,r5,r2
   87f2c:	18c7883a 	add	r3,r3,r3
   87f30:	213fffc4 	addi	r4,r4,-1
   87f34:	2805883a 	mov	r2,r5
   87f38:	30c7883a 	add	r3,r6,r3
   87f3c:	d9000715 	stw	r4,28(sp)
   87f40:	01400f44 	movi	r5,61
   87f44:	000f883a 	mov	r7,zero
   87f48:	01040034 	movhi	r4,4096
   87f4c:	0019883a 	mov	r12,zero
   87f50:	001b883a 	mov	r13,zero
   87f54:	201697fa 	slli	r11,r4,31
   87f58:	3814d07a 	srli	r10,r7,1
   87f5c:	297fffc4 	addi	r5,r5,-1
   87f60:	1a000936 	bltu	r3,r8,87f88 <__divdf3+0x134>
   87f64:	13cdc83a 	sub	r6,r2,r15
   87f68:	1193803a 	cmpltu	r9,r2,r6
   87f6c:	1a1dc83a 	sub	r14,r3,r8
   87f70:	40c0011e 	bne	r8,r3,87f78 <__divdf3+0x124>
   87f74:	13c00436 	bltu	r2,r15,87f88 <__divdf3+0x134>
   87f78:	3005883a 	mov	r2,r6
   87f7c:	7247c83a 	sub	r3,r14,r9
   87f80:	61d8b03a 	or	r12,r12,r7
   87f84:	691ab03a 	or	r13,r13,r4
   87f88:	108d883a 	add	r6,r2,r2
   87f8c:	3093803a 	cmpltu	r9,r6,r2
   87f90:	18c7883a 	add	r3,r3,r3
   87f94:	5a8eb03a 	or	r7,r11,r10
   87f98:	2008d07a 	srli	r4,r4,1
   87f9c:	3005883a 	mov	r2,r6
   87fa0:	48c7883a 	add	r3,r9,r3
   87fa4:	283feb1e 	bne	r5,zero,87f54 <__divdf3+0x100>
   87fa8:	61003fcc 	andi	r4,r12,255
   87fac:	01402004 	movi	r5,128
   87fb0:	21400b26 	beq	r4,r5,87fe0 <__divdf3+0x18c>
   87fb4:	db000815 	stw	r12,32(sp)
   87fb8:	db400915 	stw	r13,36(sp)
   87fbc:	003fb406 	br	87e90 <__divdf3+0x3c>
   87fc0:	d8000815 	stw	zero,32(sp)
   87fc4:	d8000915 	stw	zero,36(sp)
   87fc8:	d8000715 	stw	zero,28(sp)
   87fcc:	d9000504 	addi	r4,sp,20
   87fd0:	003fb006 	br	87e94 <__divdf3+0x40>
   87fd4:	d8800515 	stw	r2,20(sp)
   87fd8:	d9000504 	addi	r4,sp,20
   87fdc:	003fad06 	br	87e94 <__divdf3+0x40>
   87fe0:	6140400c 	andi	r5,r12,256
   87fe4:	283ff31e 	bne	r5,zero,87fb4 <__divdf3+0x160>
   87fe8:	30c4b03a 	or	r2,r6,r3
   87fec:	103ff126 	beq	r2,zero,87fb4 <__divdf3+0x160>
   87ff0:	6109883a 	add	r4,r12,r4
   87ff4:	2305803a 	cmpltu	r2,r4,r12
   87ff8:	033fc004 	movi	r12,-256
   87ffc:	2318703a 	and	r12,r4,r12
   88000:	135b883a 	add	r13,r2,r13
   88004:	003feb06 	br	87fb4 <__divdf3+0x160>

00088008 <__ltdf2>:
   88008:	defff104 	addi	sp,sp,-60
   8800c:	d9000c15 	stw	r4,48(sp)
   88010:	d9400d15 	stw	r5,52(sp)
   88014:	d9000c04 	addi	r4,sp,48
   88018:	d9400504 	addi	r5,sp,20
   8801c:	dfc00e15 	stw	ra,56(sp)
   88020:	d9800a15 	stw	r6,40(sp)
   88024:	d9c00b15 	stw	r7,44(sp)
   88028:	008866c0 	call	8866c <__unpack_d>
   8802c:	d9000a04 	addi	r4,sp,40
   88030:	d80b883a 	mov	r5,sp
   88034:	008866c0 	call	8866c <__unpack_d>
   88038:	d8c00517 	ldw	r3,20(sp)
   8803c:	00800044 	movi	r2,1
   88040:	10c0052e 	bgeu	r2,r3,88058 <__ltdf2+0x50>
   88044:	d8c00017 	ldw	r3,0(sp)
   88048:	10c0032e 	bgeu	r2,r3,88058 <__ltdf2+0x50>
   8804c:	d9000504 	addi	r4,sp,20
   88050:	d80b883a 	mov	r5,sp
   88054:	00887700 	call	88770 <__fpcmp_parts_d>
   88058:	dfc00e17 	ldw	ra,56(sp)
   8805c:	dec00f04 	addi	sp,sp,60
   88060:	f800283a 	ret

00088064 <__floatsidf>:
   88064:	2004d7fa 	srli	r2,r4,31
   88068:	defff904 	addi	sp,sp,-28
   8806c:	00c000c4 	movi	r3,3
   88070:	dfc00615 	stw	ra,24(sp)
   88074:	dc000515 	stw	r16,20(sp)
   88078:	d8c00015 	stw	r3,0(sp)
   8807c:	d8800115 	stw	r2,4(sp)
   88080:	2000081e 	bne	r4,zero,880a4 <__floatsidf+0x40>
   88084:	00800084 	movi	r2,2
   88088:	d8800015 	stw	r2,0(sp)
   8808c:	d809883a 	mov	r4,sp
   88090:	00884480 	call	88448 <__pack_d>
   88094:	dfc00617 	ldw	ra,24(sp)
   88098:	dc000517 	ldw	r16,20(sp)
   8809c:	dec00704 	addi	sp,sp,28
   880a0:	f800283a 	ret
   880a4:	00c00f04 	movi	r3,60
   880a8:	d8c00215 	stw	r3,8(sp)
   880ac:	10000f1e 	bne	r2,zero,880ec <__floatsidf+0x88>
   880b0:	2021883a 	mov	r16,r4
   880b4:	8009883a 	mov	r4,r16
   880b8:	008839c0 	call	8839c <__clzsi2>
   880bc:	11000744 	addi	r4,r2,29
   880c0:	0100110e 	bge	zero,r4,88108 <__floatsidf+0xa4>
   880c4:	10ffff44 	addi	r3,r2,-3
   880c8:	18001216 	blt	r3,zero,88114 <__floatsidf+0xb0>
   880cc:	80c6983a 	sll	r3,r16,r3
   880d0:	0009883a 	mov	r4,zero
   880d4:	014007c4 	movi	r5,31
   880d8:	2885c83a 	sub	r2,r5,r2
   880dc:	d9000315 	stw	r4,12(sp)
   880e0:	d8c00415 	stw	r3,16(sp)
   880e4:	d8800215 	stw	r2,8(sp)
   880e8:	003fe806 	br	8808c <__floatsidf+0x28>
   880ec:	00a00034 	movhi	r2,32768
   880f0:	20800e26 	beq	r4,r2,8812c <__floatsidf+0xc8>
   880f4:	0121c83a 	sub	r16,zero,r4
   880f8:	8009883a 	mov	r4,r16
   880fc:	008839c0 	call	8839c <__clzsi2>
   88100:	11000744 	addi	r4,r2,29
   88104:	013fef16 	blt	zero,r4,880c4 <__floatsidf+0x60>
   88108:	dc000315 	stw	r16,12(sp)
   8810c:	d8000415 	stw	zero,16(sp)
   88110:	003fde06 	br	8808c <__floatsidf+0x28>
   88114:	800ad07a 	srli	r5,r16,1
   88118:	00c007c4 	movi	r3,31
   8811c:	1907c83a 	sub	r3,r3,r4
   88120:	28c6d83a 	srl	r3,r5,r3
   88124:	8108983a 	sll	r4,r16,r4
   88128:	003fea06 	br	880d4 <__floatsidf+0x70>
   8812c:	0005883a 	mov	r2,zero
   88130:	00f07834 	movhi	r3,49632
   88134:	003fd706 	br	88094 <__floatsidf+0x30>

00088138 <__fixdfsi>:
   88138:	defff804 	addi	sp,sp,-32
   8813c:	d9000515 	stw	r4,20(sp)
   88140:	d9400615 	stw	r5,24(sp)
   88144:	d9000504 	addi	r4,sp,20
   88148:	d80b883a 	mov	r5,sp
   8814c:	dfc00715 	stw	ra,28(sp)
   88150:	008866c0 	call	8866c <__unpack_d>
   88154:	d8800017 	ldw	r2,0(sp)
   88158:	00c00084 	movi	r3,2
   8815c:	10c01c26 	beq	r2,r3,881d0 <__fixdfsi+0x98>
   88160:	00c00044 	movi	r3,1
   88164:	18801a2e 	bgeu	r3,r2,881d0 <__fixdfsi+0x98>
   88168:	00c00104 	movi	r3,4
   8816c:	10c01126 	beq	r2,r3,881b4 <__fixdfsi+0x7c>
   88170:	d8800217 	ldw	r2,8(sp)
   88174:	10001616 	blt	r2,zero,881d0 <__fixdfsi+0x98>
   88178:	00c00784 	movi	r3,30
   8817c:	18800d16 	blt	r3,r2,881b4 <__fixdfsi+0x7c>
   88180:	00c00f04 	movi	r3,60
   88184:	1885c83a 	sub	r2,r3,r2
   88188:	10fff804 	addi	r3,r2,-32
   8818c:	d9400317 	ldw	r5,12(sp)
   88190:	d9000417 	ldw	r4,16(sp)
   88194:	18001616 	blt	r3,zero,881f0 <__fixdfsi+0xb8>
   88198:	20c4d83a 	srl	r2,r4,r3
   8819c:	d8c00117 	ldw	r3,4(sp)
   881a0:	18000126 	beq	r3,zero,881a8 <__fixdfsi+0x70>
   881a4:	0085c83a 	sub	r2,zero,r2
   881a8:	dfc00717 	ldw	ra,28(sp)
   881ac:	dec00804 	addi	sp,sp,32
   881b0:	f800283a 	ret
   881b4:	d8800117 	ldw	r2,4(sp)
   881b8:	1000091e 	bne	r2,zero,881e0 <__fixdfsi+0xa8>
   881bc:	00a00034 	movhi	r2,32768
   881c0:	10bfffc4 	addi	r2,r2,-1
   881c4:	dfc00717 	ldw	ra,28(sp)
   881c8:	dec00804 	addi	sp,sp,32
   881cc:	f800283a 	ret
   881d0:	0005883a 	mov	r2,zero
   881d4:	dfc00717 	ldw	ra,28(sp)
   881d8:	dec00804 	addi	sp,sp,32
   881dc:	f800283a 	ret
   881e0:	00a00034 	movhi	r2,32768
   881e4:	dfc00717 	ldw	ra,28(sp)
   881e8:	dec00804 	addi	sp,sp,32
   881ec:	f800283a 	ret
   881f0:	2008907a 	slli	r4,r4,1
   881f4:	018007c4 	movi	r6,31
   881f8:	308dc83a 	sub	r6,r6,r2
   881fc:	2188983a 	sll	r4,r4,r6
   88200:	2884d83a 	srl	r2,r5,r2
   88204:	2084b03a 	or	r2,r4,r2
   88208:	003fe406 	br	8819c <__fixdfsi+0x64>

0008820c <udivmodsi4>:
   8820c:	2005883a 	mov	r2,r4
   88210:	2900182e 	bgeu	r5,r4,88274 <udivmodsi4+0x68>
   88214:	28001716 	blt	r5,zero,88274 <udivmodsi4+0x68>
   88218:	01000804 	movi	r4,32
   8821c:	00c00044 	movi	r3,1
   88220:	00000206 	br	8822c <udivmodsi4+0x20>
   88224:	20001126 	beq	r4,zero,8826c <udivmodsi4+0x60>
   88228:	28000516 	blt	r5,zero,88240 <udivmodsi4+0x34>
   8822c:	294b883a 	add	r5,r5,r5
   88230:	213fffc4 	addi	r4,r4,-1
   88234:	18c7883a 	add	r3,r3,r3
   88238:	28bffa36 	bltu	r5,r2,88224 <udivmodsi4+0x18>
   8823c:	18000b26 	beq	r3,zero,8826c <udivmodsi4+0x60>
   88240:	0009883a 	mov	r4,zero
   88244:	11400236 	bltu	r2,r5,88250 <udivmodsi4+0x44>
   88248:	1145c83a 	sub	r2,r2,r5
   8824c:	20c8b03a 	or	r4,r4,r3
   88250:	1806d07a 	srli	r3,r3,1
   88254:	280ad07a 	srli	r5,r5,1
   88258:	183ffa1e 	bne	r3,zero,88244 <udivmodsi4+0x38>
   8825c:	3000021e 	bne	r6,zero,88268 <udivmodsi4+0x5c>
   88260:	2005883a 	mov	r2,r4
   88264:	f800283a 	ret
   88268:	f800283a 	ret
   8826c:	0009883a 	mov	r4,zero
   88270:	003ffa06 	br	8825c <udivmodsi4+0x50>
   88274:	00c00044 	movi	r3,1
   88278:	0009883a 	mov	r4,zero
   8827c:	003ff106 	br	88244 <udivmodsi4+0x38>

00088280 <__divsi3>:
   88280:	defffe04 	addi	sp,sp,-8
   88284:	dfc00115 	stw	ra,4(sp)
   88288:	dc000015 	stw	r16,0(sp)
   8828c:	20000a16 	blt	r4,zero,882b8 <__divsi3+0x38>
   88290:	0021883a 	mov	r16,zero
   88294:	28000b16 	blt	r5,zero,882c4 <__divsi3+0x44>
   88298:	000d883a 	mov	r6,zero
   8829c:	008820c0 	call	8820c <udivmodsi4>
   882a0:	80000126 	beq	r16,zero,882a8 <__divsi3+0x28>
   882a4:	0085c83a 	sub	r2,zero,r2
   882a8:	dfc00117 	ldw	ra,4(sp)
   882ac:	dc000017 	ldw	r16,0(sp)
   882b0:	dec00204 	addi	sp,sp,8
   882b4:	f800283a 	ret
   882b8:	0109c83a 	sub	r4,zero,r4
   882bc:	04000044 	movi	r16,1
   882c0:	283ff50e 	bge	r5,zero,88298 <__divsi3+0x18>
   882c4:	014bc83a 	sub	r5,zero,r5
   882c8:	8400005c 	xori	r16,r16,1
   882cc:	003ff206 	br	88298 <__divsi3+0x18>

000882d0 <__modsi3>:
   882d0:	deffff04 	addi	sp,sp,-4
   882d4:	dfc00015 	stw	ra,0(sp)
   882d8:	20000516 	blt	r4,zero,882f0 <__modsi3+0x20>
   882dc:	28000c16 	blt	r5,zero,88310 <__modsi3+0x40>
   882e0:	01800044 	movi	r6,1
   882e4:	dfc00017 	ldw	ra,0(sp)
   882e8:	dec00104 	addi	sp,sp,4
   882ec:	008820c1 	jmpi	8820c <udivmodsi4>
   882f0:	0109c83a 	sub	r4,zero,r4
   882f4:	28000b16 	blt	r5,zero,88324 <__modsi3+0x54>
   882f8:	01800044 	movi	r6,1
   882fc:	008820c0 	call	8820c <udivmodsi4>
   88300:	0085c83a 	sub	r2,zero,r2
   88304:	dfc00017 	ldw	ra,0(sp)
   88308:	dec00104 	addi	sp,sp,4
   8830c:	f800283a 	ret
   88310:	014bc83a 	sub	r5,zero,r5
   88314:	01800044 	movi	r6,1
   88318:	dfc00017 	ldw	ra,0(sp)
   8831c:	dec00104 	addi	sp,sp,4
   88320:	008820c1 	jmpi	8820c <udivmodsi4>
   88324:	014bc83a 	sub	r5,zero,r5
   88328:	003ff306 	br	882f8 <__modsi3+0x28>

0008832c <__udivsi3>:
   8832c:	000d883a 	mov	r6,zero
   88330:	008820c1 	jmpi	8820c <udivmodsi4>

00088334 <__umodsi3>:
   88334:	01800044 	movi	r6,1
   88338:	008820c1 	jmpi	8820c <udivmodsi4>

0008833c <__muldi3>:
   8833c:	20bfffcc 	andi	r2,r4,65535
   88340:	2010d43a 	srli	r8,r4,16
   88344:	30ffffcc 	andi	r3,r6,65535
   88348:	3014d43a 	srli	r10,r6,16
   8834c:	1893383a 	mul	r9,r3,r2
   88350:	1a07383a 	mul	r3,r3,r8
   88354:	5085383a 	mul	r2,r10,r2
   88358:	4816d43a 	srli	r11,r9,16
   8835c:	5211383a 	mul	r8,r10,r8
   88360:	1885883a 	add	r2,r3,r2
   88364:	12c5883a 	add	r2,r2,r11
   88368:	10c0022e 	bgeu	r2,r3,88374 <__muldi3+0x38>
   8836c:	00c00074 	movhi	r3,1
   88370:	40d1883a 	add	r8,r8,r3
   88374:	1014d43a 	srli	r10,r2,16
   88378:	21c9383a 	mul	r4,r4,r7
   8837c:	314d383a 	mul	r6,r6,r5
   88380:	1004943a 	slli	r2,r2,16
   88384:	4291883a 	add	r8,r8,r10
   88388:	4a7fffcc 	andi	r9,r9,65535
   8838c:	2187883a 	add	r3,r4,r6
   88390:	1245883a 	add	r2,r2,r9
   88394:	1a07883a 	add	r3,r3,r8
   88398:	f800283a 	ret

0008839c <__clzsi2>:
   8839c:	00bfffd4 	movui	r2,65535
   883a0:	11000b36 	bltu	r2,r4,883d0 <__clzsi2+0x34>
   883a4:	00803fc4 	movi	r2,255
   883a8:	11001e2e 	bgeu	r2,r4,88424 <__clzsi2+0x88>
   883ac:	00c00204 	movi	r3,8
   883b0:	20c8d83a 	srl	r4,r4,r3
   883b4:	00c002f4 	movhi	r3,11
   883b8:	18f61604 	addi	r3,r3,-10152
   883bc:	00800604 	movi	r2,24
   883c0:	1909883a 	add	r4,r3,r4
   883c4:	20c00003 	ldbu	r3,0(r4)
   883c8:	10c5c83a 	sub	r2,r2,r3
   883cc:	f800283a 	ret
   883d0:	00804034 	movhi	r2,256
   883d4:	10bfffc4 	addi	r2,r2,-1
   883d8:	11000936 	bltu	r2,r4,88400 <__clzsi2+0x64>
   883dc:	00800404 	movi	r2,16
   883e0:	1007883a 	mov	r3,r2
   883e4:	20c8d83a 	srl	r4,r4,r3
   883e8:	00c002f4 	movhi	r3,11
   883ec:	18f61604 	addi	r3,r3,-10152
   883f0:	1909883a 	add	r4,r3,r4
   883f4:	20c00003 	ldbu	r3,0(r4)
   883f8:	10c5c83a 	sub	r2,r2,r3
   883fc:	f800283a 	ret
   88400:	00c00604 	movi	r3,24
   88404:	20c8d83a 	srl	r4,r4,r3
   88408:	00c002f4 	movhi	r3,11
   8840c:	18f61604 	addi	r3,r3,-10152
   88410:	00800204 	movi	r2,8
   88414:	1909883a 	add	r4,r3,r4
   88418:	20c00003 	ldbu	r3,0(r4)
   8841c:	10c5c83a 	sub	r2,r2,r3
   88420:	f800283a 	ret
   88424:	0007883a 	mov	r3,zero
   88428:	20c8d83a 	srl	r4,r4,r3
   8842c:	00c002f4 	movhi	r3,11
   88430:	18f61604 	addi	r3,r3,-10152
   88434:	00800804 	movi	r2,32
   88438:	1909883a 	add	r4,r3,r4
   8843c:	20c00003 	ldbu	r3,0(r4)
   88440:	10c5c83a 	sub	r2,r2,r3
   88444:	f800283a 	ret

00088448 <__pack_d>:
   88448:	20800017 	ldw	r2,0(r4)
   8844c:	defff804 	addi	sp,sp,-32
   88450:	dcc00315 	stw	r19,12(sp)
   88454:	dc800215 	stw	r18,8(sp)
   88458:	dfc00715 	stw	ra,28(sp)
   8845c:	dd800615 	stw	r22,24(sp)
   88460:	dd400515 	stw	r21,20(sp)
   88464:	dd000415 	stw	r20,16(sp)
   88468:	dc400115 	stw	r17,4(sp)
   8846c:	dc000015 	stw	r16,0(sp)
   88470:	04800044 	movi	r18,1
   88474:	24400317 	ldw	r17,12(r4)
   88478:	24000417 	ldw	r16,16(r4)
   8847c:	24c00117 	ldw	r19,4(r4)
   88480:	9080422e 	bgeu	r18,r2,8858c <__pack_d+0x144>
   88484:	00c00104 	movi	r3,4
   88488:	10c03c26 	beq	r2,r3,8857c <__pack_d+0x134>
   8848c:	00c00084 	movi	r3,2
   88490:	10c01926 	beq	r2,r3,884f8 <__pack_d+0xb0>
   88494:	8c04b03a 	or	r2,r17,r16
   88498:	10001726 	beq	r2,zero,884f8 <__pack_d+0xb0>
   8849c:	21000217 	ldw	r4,8(r4)
   884a0:	00bf0084 	movi	r2,-1022
   884a4:	20804016 	blt	r4,r2,885a8 <__pack_d+0x160>
   884a8:	0080ffc4 	movi	r2,1023
   884ac:	11003316 	blt	r2,r4,8857c <__pack_d+0x134>
   884b0:	88803fcc 	andi	r2,r17,255
   884b4:	00c02004 	movi	r3,128
   884b8:	10c02926 	beq	r2,r3,88560 <__pack_d+0x118>
   884bc:	88801fc4 	addi	r2,r17,127
   884c0:	1463803a 	cmpltu	r17,r2,r17
   884c4:	8c21883a 	add	r16,r17,r16
   884c8:	1023883a 	mov	r17,r2
   884cc:	00880034 	movhi	r2,8192
   884d0:	10bfffc4 	addi	r2,r2,-1
   884d4:	14001c36 	bltu	r2,r16,88548 <__pack_d+0x100>
   884d8:	2100ffc4 	addi	r4,r4,1023
   884dc:	8006963a 	slli	r3,r16,24
   884e0:	8804d23a 	srli	r2,r17,8
   884e4:	8020913a 	slli	r16,r16,4
   884e8:	2101ffcc 	andi	r4,r4,2047
   884ec:	1884b03a 	or	r2,r3,r2
   884f0:	8020d33a 	srli	r16,r16,12
   884f4:	00000306 	br	88504 <__pack_d+0xbc>
   884f8:	0009883a 	mov	r4,zero
   884fc:	0005883a 	mov	r2,zero
   88500:	0021883a 	mov	r16,zero
   88504:	2008953a 	slli	r4,r4,20
   88508:	982697fa 	slli	r19,r19,31
   8850c:	00c00434 	movhi	r3,16
   88510:	18ffffc4 	addi	r3,r3,-1
   88514:	80e0703a 	and	r16,r16,r3
   88518:	8106b03a 	or	r3,r16,r4
   8851c:	1cc6b03a 	or	r3,r3,r19
   88520:	dfc00717 	ldw	ra,28(sp)
   88524:	dd800617 	ldw	r22,24(sp)
   88528:	dd400517 	ldw	r21,20(sp)
   8852c:	dd000417 	ldw	r20,16(sp)
   88530:	dcc00317 	ldw	r19,12(sp)
   88534:	dc800217 	ldw	r18,8(sp)
   88538:	dc400117 	ldw	r17,4(sp)
   8853c:	dc000017 	ldw	r16,0(sp)
   88540:	dec00804 	addi	sp,sp,32
   88544:	f800283a 	ret
   88548:	800697fa 	slli	r3,r16,31
   8854c:	8804d07a 	srli	r2,r17,1
   88550:	21010004 	addi	r4,r4,1024
   88554:	8020d07a 	srli	r16,r16,1
   88558:	18a2b03a 	or	r17,r3,r2
   8855c:	003fdf06 	br	884dc <__pack_d+0x94>
   88560:	88c0400c 	andi	r3,r17,256
   88564:	183fd926 	beq	r3,zero,884cc <__pack_d+0x84>
   88568:	8885883a 	add	r2,r17,r2
   8856c:	1463803a 	cmpltu	r17,r2,r17
   88570:	8c21883a 	add	r16,r17,r16
   88574:	1023883a 	mov	r17,r2
   88578:	003fd406 	br	884cc <__pack_d+0x84>
   8857c:	0101ffc4 	movi	r4,2047
   88580:	0005883a 	mov	r2,zero
   88584:	0021883a 	mov	r16,zero
   88588:	003fde06 	br	88504 <__pack_d+0xbc>
   8858c:	84000234 	orhi	r16,r16,8
   88590:	00c00434 	movhi	r3,16
   88594:	18ffffc4 	addi	r3,r3,-1
   88598:	8805883a 	mov	r2,r17
   8859c:	80e0703a 	and	r16,r16,r3
   885a0:	0101ffc4 	movi	r4,2047
   885a4:	003fd706 	br	88504 <__pack_d+0xbc>
   885a8:	1129c83a 	sub	r20,r2,r4
   885ac:	00800e04 	movi	r2,56
   885b0:	15002716 	blt	r2,r20,88650 <__pack_d+0x208>
   885b4:	800b883a 	mov	r5,r16
   885b8:	a00d883a 	mov	r6,r20
   885bc:	8809883a 	mov	r4,r17
   885c0:	00888400 	call	88840 <__lshrdi3>
   885c4:	9009883a 	mov	r4,r18
   885c8:	000b883a 	mov	r5,zero
   885cc:	a00d883a 	mov	r6,r20
   885d0:	102d883a 	mov	r22,r2
   885d4:	182b883a 	mov	r21,r3
   885d8:	00888840 	call	88884 <__ashldi3>
   885dc:	1009003a 	cmpeq	r4,r2,zero
   885e0:	1907c83a 	sub	r3,r3,r4
   885e4:	10bfffc4 	addi	r2,r2,-1
   885e8:	1c20703a 	and	r16,r3,r16
   885ec:	1444703a 	and	r2,r2,r17
   885f0:	1404b03a 	or	r2,r2,r16
   885f4:	1004c03a 	cmpne	r2,r2,zero
   885f8:	1584b03a 	or	r2,r2,r22
   885fc:	11003fcc 	andi	r4,r2,255
   88600:	01402004 	movi	r5,128
   88604:	a807883a 	mov	r3,r21
   88608:	2140131e 	bne	r4,r5,88658 <__pack_d+0x210>
   8860c:	1140400c 	andi	r5,r2,256
   88610:	28000426 	beq	r5,zero,88624 <__pack_d+0x1dc>
   88614:	1109883a 	add	r4,r2,r4
   88618:	2085803a 	cmpltu	r2,r4,r2
   8861c:	1547883a 	add	r3,r2,r21
   88620:	2005883a 	mov	r2,r4
   88624:	1808963a 	slli	r4,r3,24
   88628:	1004d23a 	srli	r2,r2,8
   8862c:	1820913a 	slli	r16,r3,4
   88630:	01440034 	movhi	r5,4096
   88634:	297fffc4 	addi	r5,r5,-1
   88638:	2084b03a 	or	r2,r4,r2
   8863c:	8020d33a 	srli	r16,r16,12
   88640:	01000044 	movi	r4,1
   88644:	28ffaf36 	bltu	r5,r3,88504 <__pack_d+0xbc>
   88648:	0009883a 	mov	r4,zero
   8864c:	003fad06 	br	88504 <__pack_d+0xbc>
   88650:	0005883a 	mov	r2,zero
   88654:	0007883a 	mov	r3,zero
   88658:	11001fc4 	addi	r4,r2,127
   8865c:	2085803a 	cmpltu	r2,r4,r2
   88660:	10c7883a 	add	r3,r2,r3
   88664:	2005883a 	mov	r2,r4
   88668:	003fee06 	br	88624 <__pack_d+0x1dc>

0008866c <__unpack_d>:
   8866c:	21800117 	ldw	r6,4(r4)
   88670:	20c00017 	ldw	r3,0(r4)
   88674:	3004d7fa 	srli	r2,r6,31
   88678:	3008d53a 	srli	r4,r6,20
   8867c:	28800115 	stw	r2,4(r5)
   88680:	2101ffcc 	andi	r4,r4,2047
   88684:	00800434 	movhi	r2,16
   88688:	10bfffc4 	addi	r2,r2,-1
   8868c:	3084703a 	and	r2,r6,r2
   88690:	20001a1e 	bne	r4,zero,886fc <__unpack_d+0x90>
   88694:	1888b03a 	or	r4,r3,r2
   88698:	20002626 	beq	r4,zero,88734 <__unpack_d+0xc8>
   8869c:	1808d63a 	srli	r4,r3,24
   886a0:	1004923a 	slli	r2,r2,8
   886a4:	01bf0084 	movi	r6,-1022
   886a8:	29800215 	stw	r6,8(r5)
   886ac:	2084b03a 	or	r2,r4,r2
   886b0:	010000c4 	movi	r4,3
   886b4:	29000015 	stw	r4,0(r5)
   886b8:	02040034 	movhi	r8,4096
   886bc:	423fffc4 	addi	r8,r8,-1
   886c0:	1806923a 	slli	r3,r3,8
   886c4:	40801836 	bltu	r8,r2,88728 <__unpack_d+0xbc>
   886c8:	013f0044 	movi	r4,-1023
   886cc:	18cd883a 	add	r6,r3,r3
   886d0:	30c7803a 	cmpltu	r3,r6,r3
   886d4:	1085883a 	add	r2,r2,r2
   886d8:	1885883a 	add	r2,r3,r2
   886dc:	200f883a 	mov	r7,r4
   886e0:	3007883a 	mov	r3,r6
   886e4:	213fffc4 	addi	r4,r4,-1
   886e8:	40bff82e 	bgeu	r8,r2,886cc <__unpack_d+0x60>
   886ec:	29c00215 	stw	r7,8(r5)
   886f0:	28c00315 	stw	r3,12(r5)
   886f4:	28800415 	stw	r2,16(r5)
   886f8:	f800283a 	ret
   886fc:	01c1ffc4 	movi	r7,2047
   88700:	21c00f26 	beq	r4,r7,88740 <__unpack_d+0xd4>
   88704:	180cd63a 	srli	r6,r3,24
   88708:	1004923a 	slli	r2,r2,8
   8870c:	213f0044 	addi	r4,r4,-1023
   88710:	1806923a 	slli	r3,r3,8
   88714:	3084b03a 	or	r2,r6,r2
   88718:	29000215 	stw	r4,8(r5)
   8871c:	010000c4 	movi	r4,3
   88720:	10840034 	orhi	r2,r2,4096
   88724:	29000015 	stw	r4,0(r5)
   88728:	28c00315 	stw	r3,12(r5)
   8872c:	28800415 	stw	r2,16(r5)
   88730:	f800283a 	ret
   88734:	00800084 	movi	r2,2
   88738:	28800015 	stw	r2,0(r5)
   8873c:	f800283a 	ret
   88740:	1888b03a 	or	r4,r3,r2
   88744:	20000526 	beq	r4,zero,8875c <__unpack_d+0xf0>
   88748:	3180022c 	andhi	r6,r6,8
   8874c:	30000626 	beq	r6,zero,88768 <__unpack_d+0xfc>
   88750:	01000044 	movi	r4,1
   88754:	29000015 	stw	r4,0(r5)
   88758:	003ff306 	br	88728 <__unpack_d+0xbc>
   8875c:	00800104 	movi	r2,4
   88760:	28800015 	stw	r2,0(r5)
   88764:	f800283a 	ret
   88768:	28000015 	stw	zero,0(r5)
   8876c:	003fee06 	br	88728 <__unpack_d+0xbc>

00088770 <__fpcmp_parts_d>:
   88770:	20c00017 	ldw	r3,0(r4)
   88774:	00800044 	movi	r2,1
   88778:	10c0142e 	bgeu	r2,r3,887cc <__fpcmp_parts_d+0x5c>
   8877c:	29800017 	ldw	r6,0(r5)
   88780:	1180122e 	bgeu	r2,r6,887cc <__fpcmp_parts_d+0x5c>
   88784:	01c00104 	movi	r7,4
   88788:	19c02826 	beq	r3,r7,8882c <__fpcmp_parts_d+0xbc>
   8878c:	31c00926 	beq	r6,r7,887b4 <__fpcmp_parts_d+0x44>
   88790:	01c00084 	movi	r7,2
   88794:	19c00626 	beq	r3,r7,887b0 <__fpcmp_parts_d+0x40>
   88798:	31c00a26 	beq	r6,r7,887c4 <__fpcmp_parts_d+0x54>
   8879c:	20c00117 	ldw	r3,4(r4)
   887a0:	29800117 	ldw	r6,4(r5)
   887a4:	19800b26 	beq	r3,r6,887d4 <__fpcmp_parts_d+0x64>
   887a8:	1800041e 	bne	r3,zero,887bc <__fpcmp_parts_d+0x4c>
   887ac:	f800283a 	ret
   887b0:	30c01a26 	beq	r6,r3,8881c <__fpcmp_parts_d+0xac>
   887b4:	28800117 	ldw	r2,4(r5)
   887b8:	1000041e 	bne	r2,zero,887cc <__fpcmp_parts_d+0x5c>
   887bc:	00bfffc4 	movi	r2,-1
   887c0:	f800283a 	ret
   887c4:	20800117 	ldw	r2,4(r4)
   887c8:	103ffc1e 	bne	r2,zero,887bc <__fpcmp_parts_d+0x4c>
   887cc:	00800044 	movi	r2,1
   887d0:	f800283a 	ret
   887d4:	21c00217 	ldw	r7,8(r4)
   887d8:	29800217 	ldw	r6,8(r5)
   887dc:	31c0020e 	bge	r6,r7,887e8 <__fpcmp_parts_d+0x78>
   887e0:	183ff61e 	bne	r3,zero,887bc <__fpcmp_parts_d+0x4c>
   887e4:	f800283a 	ret
   887e8:	39800a16 	blt	r7,r6,88814 <__fpcmp_parts_d+0xa4>
   887ec:	20800417 	ldw	r2,16(r4)
   887f0:	29800417 	ldw	r6,16(r5)
   887f4:	21c00317 	ldw	r7,12(r4)
   887f8:	29000317 	ldw	r4,12(r5)
   887fc:	30800936 	bltu	r6,r2,88824 <__fpcmp_parts_d+0xb4>
   88800:	1180011e 	bne	r2,r6,88808 <__fpcmp_parts_d+0x98>
   88804:	21c00736 	bltu	r4,r7,88824 <__fpcmp_parts_d+0xb4>
   88808:	11800236 	bltu	r2,r6,88814 <__fpcmp_parts_d+0xa4>
   8880c:	3080031e 	bne	r6,r2,8881c <__fpcmp_parts_d+0xac>
   88810:	3900022e 	bgeu	r7,r4,8881c <__fpcmp_parts_d+0xac>
   88814:	183fe926 	beq	r3,zero,887bc <__fpcmp_parts_d+0x4c>
   88818:	003fec06 	br	887cc <__fpcmp_parts_d+0x5c>
   8881c:	0005883a 	mov	r2,zero
   88820:	f800283a 	ret
   88824:	183fe926 	beq	r3,zero,887cc <__fpcmp_parts_d+0x5c>
   88828:	003fe406 	br	887bc <__fpcmp_parts_d+0x4c>
   8882c:	30ffe51e 	bne	r6,r3,887c4 <__fpcmp_parts_d+0x54>
   88830:	28c00117 	ldw	r3,4(r5)
   88834:	20800117 	ldw	r2,4(r4)
   88838:	1885c83a 	sub	r2,r3,r2
   8883c:	f800283a 	ret

00088840 <__lshrdi3>:
   88840:	2005883a 	mov	r2,r4
   88844:	2807883a 	mov	r3,r5
   88848:	30000826 	beq	r6,zero,8886c <__lshrdi3+0x2c>
   8884c:	01000804 	movi	r4,32
   88850:	2189c83a 	sub	r4,r4,r6
   88854:	0100060e 	bge	zero,r4,88870 <__lshrdi3+0x30>
   88858:	1184d83a 	srl	r2,r2,r6
   8885c:	2908983a 	sll	r4,r5,r4
   88860:	298cd83a 	srl	r6,r5,r6
   88864:	2084b03a 	or	r2,r4,r2
   88868:	3007883a 	mov	r3,r6
   8886c:	f800283a 	ret
   88870:	0105c83a 	sub	r2,zero,r4
   88874:	000d883a 	mov	r6,zero
   88878:	2884d83a 	srl	r2,r5,r2
   8887c:	3007883a 	mov	r3,r6
   88880:	003ffa06 	br	8886c <__lshrdi3+0x2c>

00088884 <__ashldi3>:
   88884:	2005883a 	mov	r2,r4
   88888:	2807883a 	mov	r3,r5
   8888c:	30000826 	beq	r6,zero,888b0 <__ashldi3+0x2c>
   88890:	01000804 	movi	r4,32
   88894:	2189c83a 	sub	r4,r4,r6
   88898:	0100060e 	bge	zero,r4,888b4 <__ashldi3+0x30>
   8889c:	1108d83a 	srl	r4,r2,r4
   888a0:	2986983a 	sll	r3,r5,r6
   888a4:	118c983a 	sll	r6,r2,r6
   888a8:	20c6b03a 	or	r3,r4,r3
   888ac:	3005883a 	mov	r2,r6
   888b0:	f800283a 	ret
   888b4:	0107c83a 	sub	r3,zero,r4
   888b8:	000d883a 	mov	r6,zero
   888bc:	10c6983a 	sll	r3,r2,r3
   888c0:	3005883a 	mov	r2,r6
   888c4:	003ffa06 	br	888b0 <__ashldi3+0x2c>

000888c8 <__errno>:
   888c8:	008002f4 	movhi	r2,11
   888cc:	10844f04 	addi	r2,r2,4412
   888d0:	10800017 	ldw	r2,0(r2)
   888d4:	f800283a 	ret

000888d8 <malloc>:
   888d8:	008002f4 	movhi	r2,11
   888dc:	10844f04 	addi	r2,r2,4412
   888e0:	200b883a 	mov	r5,r4
   888e4:	11000017 	ldw	r4,0(r2)
   888e8:	00889001 	jmpi	88900 <_malloc_r>

000888ec <free>:
   888ec:	008002f4 	movhi	r2,11
   888f0:	10844f04 	addi	r2,r2,4412
   888f4:	200b883a 	mov	r5,r4
   888f8:	11000017 	ldw	r4,0(r2)
   888fc:	008d4a01 	jmpi	8d4a0 <_free_r>

00088900 <_malloc_r>:
   88900:	defff604 	addi	sp,sp,-40
   88904:	dc800215 	stw	r18,8(sp)
   88908:	dfc00915 	stw	ra,36(sp)
   8890c:	df000815 	stw	fp,32(sp)
   88910:	ddc00715 	stw	r23,28(sp)
   88914:	dd800615 	stw	r22,24(sp)
   88918:	dd400515 	stw	r21,20(sp)
   8891c:	dd000415 	stw	r20,16(sp)
   88920:	dcc00315 	stw	r19,12(sp)
   88924:	dc400115 	stw	r17,4(sp)
   88928:	dc000015 	stw	r16,0(sp)
   8892c:	288002c4 	addi	r2,r5,11
   88930:	00c00584 	movi	r3,22
   88934:	2025883a 	mov	r18,r4
   88938:	18802b2e 	bgeu	r3,r2,889e8 <_malloc_r+0xe8>
   8893c:	047ffe04 	movi	r17,-8
   88940:	1462703a 	and	r17,r2,r17
   88944:	88002a16 	blt	r17,zero,889f0 <_malloc_r+0xf0>
   88948:	89402936 	bltu	r17,r5,889f0 <_malloc_r+0xf0>
   8894c:	9009883a 	mov	r4,r18
   88950:	00916440 	call	91644 <__malloc_lock>
   88954:	00807dc4 	movi	r2,503
   88958:	14402936 	bltu	r2,r17,88a00 <_malloc_r+0x100>
   8895c:	8808d0fa 	srli	r4,r17,3
   88960:	04c002f4 	movhi	r19,11
   88964:	9cfec404 	addi	r19,r19,-1264
   88968:	2105883a 	add	r2,r4,r4
   8896c:	1085883a 	add	r2,r2,r2
   88970:	1085883a 	add	r2,r2,r2
   88974:	9885883a 	add	r2,r19,r2
   88978:	14000317 	ldw	r16,12(r2)
   8897c:	80815526 	beq	r16,r2,88ed4 <_malloc_r+0x5d4>
   88980:	81000117 	ldw	r4,4(r16)
   88984:	00bfff04 	movi	r2,-4
   88988:	80c00317 	ldw	r3,12(r16)
   8898c:	2084703a 	and	r2,r4,r2
   88990:	8085883a 	add	r2,r16,r2
   88994:	11800117 	ldw	r6,4(r2)
   88998:	81400217 	ldw	r5,8(r16)
   8899c:	9009883a 	mov	r4,r18
   889a0:	31800054 	ori	r6,r6,1
   889a4:	11800115 	stw	r6,4(r2)
   889a8:	28c00315 	stw	r3,12(r5)
   889ac:	19400215 	stw	r5,8(r3)
   889b0:	00916640 	call	91664 <__malloc_unlock>
   889b4:	80800204 	addi	r2,r16,8
   889b8:	dfc00917 	ldw	ra,36(sp)
   889bc:	df000817 	ldw	fp,32(sp)
   889c0:	ddc00717 	ldw	r23,28(sp)
   889c4:	dd800617 	ldw	r22,24(sp)
   889c8:	dd400517 	ldw	r21,20(sp)
   889cc:	dd000417 	ldw	r20,16(sp)
   889d0:	dcc00317 	ldw	r19,12(sp)
   889d4:	dc800217 	ldw	r18,8(sp)
   889d8:	dc400117 	ldw	r17,4(sp)
   889dc:	dc000017 	ldw	r16,0(sp)
   889e0:	dec00a04 	addi	sp,sp,40
   889e4:	f800283a 	ret
   889e8:	04400404 	movi	r17,16
   889ec:	897fd72e 	bgeu	r17,r5,8894c <_malloc_r+0x4c>
   889f0:	00800304 	movi	r2,12
   889f4:	90800015 	stw	r2,0(r18)
   889f8:	0005883a 	mov	r2,zero
   889fc:	003fee06 	br	889b8 <_malloc_r+0xb8>
   88a00:	8808d27a 	srli	r4,r17,9
   88a04:	20007126 	beq	r4,zero,88bcc <_malloc_r+0x2cc>
   88a08:	00800104 	movi	r2,4
   88a0c:	1100eb36 	bltu	r2,r4,88dbc <_malloc_r+0x4bc>
   88a10:	8808d1ba 	srli	r4,r17,6
   88a14:	21000e04 	addi	r4,r4,56
   88a18:	210b883a 	add	r5,r4,r4
   88a1c:	294b883a 	add	r5,r5,r5
   88a20:	294b883a 	add	r5,r5,r5
   88a24:	04c002f4 	movhi	r19,11
   88a28:	9cfec404 	addi	r19,r19,-1264
   88a2c:	994b883a 	add	r5,r19,r5
   88a30:	2c000317 	ldw	r16,12(r5)
   88a34:	2c000e26 	beq	r5,r16,88a70 <_malloc_r+0x170>
   88a38:	80c00117 	ldw	r3,4(r16)
   88a3c:	01ffff04 	movi	r7,-4
   88a40:	018003c4 	movi	r6,15
   88a44:	19c6703a 	and	r3,r3,r7
   88a48:	1c45c83a 	sub	r2,r3,r17
   88a4c:	30800716 	blt	r6,r2,88a6c <_malloc_r+0x16c>
   88a50:	1000610e 	bge	r2,zero,88bd8 <_malloc_r+0x2d8>
   88a54:	84000317 	ldw	r16,12(r16)
   88a58:	2c000526 	beq	r5,r16,88a70 <_malloc_r+0x170>
   88a5c:	80c00117 	ldw	r3,4(r16)
   88a60:	19c6703a 	and	r3,r3,r7
   88a64:	1c45c83a 	sub	r2,r3,r17
   88a68:	30bff90e 	bge	r6,r2,88a50 <_malloc_r+0x150>
   88a6c:	213fffc4 	addi	r4,r4,-1
   88a70:	21000044 	addi	r4,r4,1
   88a74:	9c000417 	ldw	r16,16(r19)
   88a78:	00c002f4 	movhi	r3,11
   88a7c:	18fec404 	addi	r3,r3,-1264
   88a80:	1a400204 	addi	r9,r3,8
   88a84:	8240ff26 	beq	r16,r9,88e84 <_malloc_r+0x584>
   88a88:	81400117 	ldw	r5,4(r16)
   88a8c:	00bfff04 	movi	r2,-4
   88a90:	018003c4 	movi	r6,15
   88a94:	2884703a 	and	r2,r5,r2
   88a98:	144bc83a 	sub	r5,r2,r17
   88a9c:	3140ea16 	blt	r6,r5,88e48 <_malloc_r+0x548>
   88aa0:	1a400515 	stw	r9,20(r3)
   88aa4:	1a400415 	stw	r9,16(r3)
   88aa8:	2800570e 	bge	r5,zero,88c08 <_malloc_r+0x308>
   88aac:	01407fc4 	movi	r5,511
   88ab0:	2880ca36 	bltu	r5,r2,88ddc <_malloc_r+0x4dc>
   88ab4:	1004d0fa 	srli	r2,r2,3
   88ab8:	02000044 	movi	r8,1
   88abc:	19c00117 	ldw	r7,4(r3)
   88ac0:	108b883a 	add	r5,r2,r2
   88ac4:	294b883a 	add	r5,r5,r5
   88ac8:	1005d0ba 	srai	r2,r2,2
   88acc:	294b883a 	add	r5,r5,r5
   88ad0:	28cb883a 	add	r5,r5,r3
   88ad4:	29800217 	ldw	r6,8(r5)
   88ad8:	4084983a 	sll	r2,r8,r2
   88adc:	81400315 	stw	r5,12(r16)
   88ae0:	81800215 	stw	r6,8(r16)
   88ae4:	11c4b03a 	or	r2,r2,r7
   88ae8:	18800115 	stw	r2,4(r3)
   88aec:	2c000215 	stw	r16,8(r5)
   88af0:	34000315 	stw	r16,12(r6)
   88af4:	200bd0ba 	srai	r5,r4,2
   88af8:	00c00044 	movi	r3,1
   88afc:	194a983a 	sll	r5,r3,r5
   88b00:	11404936 	bltu	r2,r5,88c28 <_malloc_r+0x328>
   88b04:	1146703a 	and	r3,r2,r5
   88b08:	18000a1e 	bne	r3,zero,88b34 <_malloc_r+0x234>
   88b0c:	00ffff04 	movi	r3,-4
   88b10:	294b883a 	add	r5,r5,r5
   88b14:	20c8703a 	and	r4,r4,r3
   88b18:	1146703a 	and	r3,r2,r5
   88b1c:	21000104 	addi	r4,r4,4
   88b20:	1800041e 	bne	r3,zero,88b34 <_malloc_r+0x234>
   88b24:	294b883a 	add	r5,r5,r5
   88b28:	1146703a 	and	r3,r2,r5
   88b2c:	21000104 	addi	r4,r4,4
   88b30:	183ffc26 	beq	r3,zero,88b24 <_malloc_r+0x224>
   88b34:	023fff04 	movi	r8,-4
   88b38:	01c003c4 	movi	r7,15
   88b3c:	2105883a 	add	r2,r4,r4
   88b40:	1085883a 	add	r2,r2,r2
   88b44:	1085883a 	add	r2,r2,r2
   88b48:	9899883a 	add	r12,r19,r2
   88b4c:	62800304 	addi	r10,r12,12
   88b50:	2017883a 	mov	r11,r4
   88b54:	54000017 	ldw	r16,0(r10)
   88b58:	51bffd04 	addi	r6,r10,-12
   88b5c:	8180041e 	bne	r16,r6,88b70 <_malloc_r+0x270>
   88b60:	0000ca06 	br	88e8c <_malloc_r+0x58c>
   88b64:	10001c0e 	bge	r2,zero,88bd8 <_malloc_r+0x2d8>
   88b68:	84000317 	ldw	r16,12(r16)
   88b6c:	8180c726 	beq	r16,r6,88e8c <_malloc_r+0x58c>
   88b70:	80c00117 	ldw	r3,4(r16)
   88b74:	1a06703a 	and	r3,r3,r8
   88b78:	1c45c83a 	sub	r2,r3,r17
   88b7c:	38bff90e 	bge	r7,r2,88b64 <_malloc_r+0x264>
   88b80:	81000317 	ldw	r4,12(r16)
   88b84:	81400217 	ldw	r5,8(r16)
   88b88:	8447883a 	add	r3,r16,r17
   88b8c:	8c400054 	ori	r17,r17,1
   88b90:	29000315 	stw	r4,12(r5)
   88b94:	21400215 	stw	r5,8(r4)
   88b98:	84400115 	stw	r17,4(r16)
   88b9c:	1889883a 	add	r4,r3,r2
   88ba0:	11400054 	ori	r5,r2,1
   88ba4:	98c00515 	stw	r3,20(r19)
   88ba8:	98c00415 	stw	r3,16(r19)
   88bac:	20800015 	stw	r2,0(r4)
   88bb0:	1a400315 	stw	r9,12(r3)
   88bb4:	1a400215 	stw	r9,8(r3)
   88bb8:	19400115 	stw	r5,4(r3)
   88bbc:	9009883a 	mov	r4,r18
   88bc0:	00916640 	call	91664 <__malloc_unlock>
   88bc4:	80800204 	addi	r2,r16,8
   88bc8:	003f7b06 	br	889b8 <_malloc_r+0xb8>
   88bcc:	8808d0fa 	srli	r4,r17,3
   88bd0:	210b883a 	add	r5,r4,r4
   88bd4:	003f9106 	br	88a1c <_malloc_r+0x11c>
   88bd8:	80c7883a 	add	r3,r16,r3
   88bdc:	19400117 	ldw	r5,4(r3)
   88be0:	80800317 	ldw	r2,12(r16)
   88be4:	81000217 	ldw	r4,8(r16)
   88be8:	29400054 	ori	r5,r5,1
   88bec:	19400115 	stw	r5,4(r3)
   88bf0:	20800315 	stw	r2,12(r4)
   88bf4:	11000215 	stw	r4,8(r2)
   88bf8:	9009883a 	mov	r4,r18
   88bfc:	00916640 	call	91664 <__malloc_unlock>
   88c00:	80800204 	addi	r2,r16,8
   88c04:	003f6c06 	br	889b8 <_malloc_r+0xb8>
   88c08:	8085883a 	add	r2,r16,r2
   88c0c:	10c00117 	ldw	r3,4(r2)
   88c10:	9009883a 	mov	r4,r18
   88c14:	18c00054 	ori	r3,r3,1
   88c18:	10c00115 	stw	r3,4(r2)
   88c1c:	00916640 	call	91664 <__malloc_unlock>
   88c20:	80800204 	addi	r2,r16,8
   88c24:	003f6406 	br	889b8 <_malloc_r+0xb8>
   88c28:	9c000217 	ldw	r16,8(r19)
   88c2c:	00bfff04 	movi	r2,-4
   88c30:	85400117 	ldw	r21,4(r16)
   88c34:	a8aa703a 	and	r21,r21,r2
   88c38:	ac400336 	bltu	r21,r17,88c48 <_malloc_r+0x348>
   88c3c:	ac45c83a 	sub	r2,r21,r17
   88c40:	00c003c4 	movi	r3,15
   88c44:	18805316 	blt	r3,r2,88d94 <_malloc_r+0x494>
   88c48:	d5ed9917 	ldw	r23,-18844(gp)
   88c4c:	d0e00517 	ldw	r3,-32748(gp)
   88c50:	00bfffc4 	movi	r2,-1
   88c54:	8579883a 	add	fp,r16,r21
   88c58:	8def883a 	add	r23,r17,r23
   88c5c:	1880d226 	beq	r3,r2,88fa8 <_malloc_r+0x6a8>
   88c60:	bdc403c4 	addi	r23,r23,4111
   88c64:	00bc0004 	movi	r2,-4096
   88c68:	b8ae703a 	and	r23,r23,r2
   88c6c:	9009883a 	mov	r4,r18
   88c70:	b80b883a 	mov	r5,r23
   88c74:	00893580 	call	89358 <_sbrk_r>
   88c78:	1029883a 	mov	r20,r2
   88c7c:	00bfffc4 	movi	r2,-1
   88c80:	a080d126 	beq	r20,r2,88fc8 <_malloc_r+0x6c8>
   88c84:	a7009f36 	bltu	r20,fp,88f04 <_malloc_r+0x604>
   88c88:	058002f4 	movhi	r22,11
   88c8c:	b591ef04 	addi	r22,r22,18364
   88c90:	b0800017 	ldw	r2,0(r22)
   88c94:	b885883a 	add	r2,r23,r2
   88c98:	b0800015 	stw	r2,0(r22)
   88c9c:	e500cf26 	beq	fp,r20,88fdc <_malloc_r+0x6dc>
   88ca0:	d1200517 	ldw	r4,-32748(gp)
   88ca4:	00ffffc4 	movi	r3,-1
   88ca8:	20c0e026 	beq	r4,r3,8902c <_malloc_r+0x72c>
   88cac:	a739c83a 	sub	fp,r20,fp
   88cb0:	1705883a 	add	r2,r2,fp
   88cb4:	b0800015 	stw	r2,0(r22)
   88cb8:	a08001cc 	andi	r2,r20,7
   88cbc:	1000a526 	beq	r2,zero,88f54 <_malloc_r+0x654>
   88cc0:	a0a9c83a 	sub	r20,r20,r2
   88cc4:	00c40204 	movi	r3,4104
   88cc8:	a5000204 	addi	r20,r20,8
   88ccc:	1885c83a 	sub	r2,r3,r2
   88cd0:	a5c7883a 	add	r3,r20,r23
   88cd4:	18c3ffcc 	andi	r3,r3,4095
   88cd8:	10efc83a 	sub	r23,r2,r3
   88cdc:	9009883a 	mov	r4,r18
   88ce0:	b80b883a 	mov	r5,r23
   88ce4:	00893580 	call	89358 <_sbrk_r>
   88ce8:	00ffffc4 	movi	r3,-1
   88cec:	10c0cc26 	beq	r2,r3,89020 <_malloc_r+0x720>
   88cf0:	1505c83a 	sub	r2,r2,r20
   88cf4:	b887883a 	add	r3,r23,r2
   88cf8:	18c00054 	ori	r3,r3,1
   88cfc:	b0800017 	ldw	r2,0(r22)
   88d00:	9d000215 	stw	r20,8(r19)
   88d04:	a0c00115 	stw	r3,4(r20)
   88d08:	b885883a 	add	r2,r23,r2
   88d0c:	b0800015 	stw	r2,0(r22)
   88d10:	84c00e26 	beq	r16,r19,88d4c <_malloc_r+0x44c>
   88d14:	00c003c4 	movi	r3,15
   88d18:	1d40902e 	bgeu	r3,r21,88f5c <_malloc_r+0x65c>
   88d1c:	ad7ffd04 	addi	r21,r21,-12
   88d20:	013ffe04 	movi	r4,-8
   88d24:	a908703a 	and	r4,r21,r4
   88d28:	810b883a 	add	r5,r16,r4
   88d2c:	01800144 	movi	r6,5
   88d30:	29800115 	stw	r6,4(r5)
   88d34:	29800215 	stw	r6,8(r5)
   88d38:	81400117 	ldw	r5,4(r16)
   88d3c:	2940004c 	andi	r5,r5,1
   88d40:	214ab03a 	or	r5,r4,r5
   88d44:	81400115 	stw	r5,4(r16)
   88d48:	1900ae36 	bltu	r3,r4,89004 <_malloc_r+0x704>
   88d4c:	d0ed9817 	ldw	r3,-18848(gp)
   88d50:	1880012e 	bgeu	r3,r2,88d58 <_malloc_r+0x458>
   88d54:	d0ad9815 	stw	r2,-18848(gp)
   88d58:	d0ed9717 	ldw	r3,-18852(gp)
   88d5c:	9c000217 	ldw	r16,8(r19)
   88d60:	1880012e 	bgeu	r3,r2,88d68 <_malloc_r+0x468>
   88d64:	d0ad9715 	stw	r2,-18852(gp)
   88d68:	80c00117 	ldw	r3,4(r16)
   88d6c:	00bfff04 	movi	r2,-4
   88d70:	1886703a 	and	r3,r3,r2
   88d74:	1c45c83a 	sub	r2,r3,r17
   88d78:	1c400236 	bltu	r3,r17,88d84 <_malloc_r+0x484>
   88d7c:	00c003c4 	movi	r3,15
   88d80:	18800416 	blt	r3,r2,88d94 <_malloc_r+0x494>
   88d84:	9009883a 	mov	r4,r18
   88d88:	00916640 	call	91664 <__malloc_unlock>
   88d8c:	0005883a 	mov	r2,zero
   88d90:	003f0906 	br	889b8 <_malloc_r+0xb8>
   88d94:	88c00054 	ori	r3,r17,1
   88d98:	10800054 	ori	r2,r2,1
   88d9c:	80c00115 	stw	r3,4(r16)
   88da0:	8463883a 	add	r17,r16,r17
   88da4:	88800115 	stw	r2,4(r17)
   88da8:	9009883a 	mov	r4,r18
   88dac:	9c400215 	stw	r17,8(r19)
   88db0:	00916640 	call	91664 <__malloc_unlock>
   88db4:	80800204 	addi	r2,r16,8
   88db8:	003eff06 	br	889b8 <_malloc_r+0xb8>
   88dbc:	00800504 	movi	r2,20
   88dc0:	1100492e 	bgeu	r2,r4,88ee8 <_malloc_r+0x5e8>
   88dc4:	00801504 	movi	r2,84
   88dc8:	11005c36 	bltu	r2,r4,88f3c <_malloc_r+0x63c>
   88dcc:	8808d33a 	srli	r4,r17,12
   88dd0:	21001b84 	addi	r4,r4,110
   88dd4:	210b883a 	add	r5,r4,r4
   88dd8:	003f1006 	br	88a1c <_malloc_r+0x11c>
   88ddc:	1006d27a 	srli	r3,r2,9
   88de0:	01400104 	movi	r5,4
   88de4:	28c0432e 	bgeu	r5,r3,88ef4 <_malloc_r+0x5f4>
   88de8:	01400504 	movi	r5,20
   88dec:	28c07036 	bltu	r5,r3,88fb0 <_malloc_r+0x6b0>
   88df0:	194016c4 	addi	r5,r3,91
   88df4:	294d883a 	add	r6,r5,r5
   88df8:	318d883a 	add	r6,r6,r6
   88dfc:	318d883a 	add	r6,r6,r6
   88e00:	998d883a 	add	r6,r19,r6
   88e04:	30c00217 	ldw	r3,8(r6)
   88e08:	01c002f4 	movhi	r7,11
   88e0c:	39fec404 	addi	r7,r7,-1264
   88e10:	19805726 	beq	r3,r6,88f70 <_malloc_r+0x670>
   88e14:	01ffff04 	movi	r7,-4
   88e18:	19400117 	ldw	r5,4(r3)
   88e1c:	29ca703a 	and	r5,r5,r7
   88e20:	1140022e 	bgeu	r2,r5,88e2c <_malloc_r+0x52c>
   88e24:	18c00217 	ldw	r3,8(r3)
   88e28:	30fffb1e 	bne	r6,r3,88e18 <_malloc_r+0x518>
   88e2c:	19400317 	ldw	r5,12(r3)
   88e30:	98800117 	ldw	r2,4(r19)
   88e34:	81400315 	stw	r5,12(r16)
   88e38:	80c00215 	stw	r3,8(r16)
   88e3c:	2c000215 	stw	r16,8(r5)
   88e40:	1c000315 	stw	r16,12(r3)
   88e44:	003f2b06 	br	88af4 <_malloc_r+0x1f4>
   88e48:	8445883a 	add	r2,r16,r17
   88e4c:	8c400054 	ori	r17,r17,1
   88e50:	18800515 	stw	r2,20(r3)
   88e54:	18800415 	stw	r2,16(r3)
   88e58:	29000054 	ori	r4,r5,1
   88e5c:	1147883a 	add	r3,r2,r5
   88e60:	84400115 	stw	r17,4(r16)
   88e64:	11000115 	stw	r4,4(r2)
   88e68:	12400315 	stw	r9,12(r2)
   88e6c:	12400215 	stw	r9,8(r2)
   88e70:	19400015 	stw	r5,0(r3)
   88e74:	9009883a 	mov	r4,r18
   88e78:	00916640 	call	91664 <__malloc_unlock>
   88e7c:	80800204 	addi	r2,r16,8
   88e80:	003ecd06 	br	889b8 <_malloc_r+0xb8>
   88e84:	18800117 	ldw	r2,4(r3)
   88e88:	003f1a06 	br	88af4 <_malloc_r+0x1f4>
   88e8c:	5ac00044 	addi	r11,r11,1
   88e90:	588000cc 	andi	r2,r11,3
   88e94:	52800204 	addi	r10,r10,8
   88e98:	103f2e1e 	bne	r2,zero,88b54 <_malloc_r+0x254>
   88e9c:	20c000cc 	andi	r3,r4,3
   88ea0:	60bffe04 	addi	r2,r12,-8
   88ea4:	18006f26 	beq	r3,zero,89064 <_malloc_r+0x764>
   88ea8:	63000017 	ldw	r12,0(r12)
   88eac:	213fffc4 	addi	r4,r4,-1
   88eb0:	60bffa26 	beq	r12,r2,88e9c <_malloc_r+0x59c>
   88eb4:	98800117 	ldw	r2,4(r19)
   88eb8:	294b883a 	add	r5,r5,r5
   88ebc:	117f5a36 	bltu	r2,r5,88c28 <_malloc_r+0x328>
   88ec0:	283f5926 	beq	r5,zero,88c28 <_malloc_r+0x328>
   88ec4:	1146703a 	and	r3,r2,r5
   88ec8:	18001626 	beq	r3,zero,88f24 <_malloc_r+0x624>
   88ecc:	5809883a 	mov	r4,r11
   88ed0:	003f1a06 	br	88b3c <_malloc_r+0x23c>
   88ed4:	80800204 	addi	r2,r16,8
   88ed8:	84000517 	ldw	r16,20(r16)
   88edc:	143ea81e 	bne	r2,r16,88980 <_malloc_r+0x80>
   88ee0:	21000084 	addi	r4,r4,2
   88ee4:	003ee306 	br	88a74 <_malloc_r+0x174>
   88ee8:	210016c4 	addi	r4,r4,91
   88eec:	210b883a 	add	r5,r4,r4
   88ef0:	003eca06 	br	88a1c <_malloc_r+0x11c>
   88ef4:	100ad1ba 	srli	r5,r2,6
   88ef8:	29400e04 	addi	r5,r5,56
   88efc:	294d883a 	add	r6,r5,r5
   88f00:	003fbd06 	br	88df8 <_malloc_r+0x4f8>
   88f04:	84ff6026 	beq	r16,r19,88c88 <_malloc_r+0x388>
   88f08:	008002f4 	movhi	r2,11
   88f0c:	10bec404 	addi	r2,r2,-1264
   88f10:	14000217 	ldw	r16,8(r2)
   88f14:	00bfff04 	movi	r2,-4
   88f18:	80c00117 	ldw	r3,4(r16)
   88f1c:	1886703a 	and	r3,r3,r2
   88f20:	003f9406 	br	88d74 <_malloc_r+0x474>
   88f24:	294b883a 	add	r5,r5,r5
   88f28:	1146703a 	and	r3,r2,r5
   88f2c:	5ac00104 	addi	r11,r11,4
   88f30:	183ffc26 	beq	r3,zero,88f24 <_malloc_r+0x624>
   88f34:	5809883a 	mov	r4,r11
   88f38:	003f0006 	br	88b3c <_malloc_r+0x23c>
   88f3c:	00805504 	movi	r2,340
   88f40:	11001336 	bltu	r2,r4,88f90 <_malloc_r+0x690>
   88f44:	8808d3fa 	srli	r4,r17,15
   88f48:	21001dc4 	addi	r4,r4,119
   88f4c:	210b883a 	add	r5,r4,r4
   88f50:	003eb206 	br	88a1c <_malloc_r+0x11c>
   88f54:	00840004 	movi	r2,4096
   88f58:	003f5d06 	br	88cd0 <_malloc_r+0x3d0>
   88f5c:	00800044 	movi	r2,1
   88f60:	a0800115 	stw	r2,4(r20)
   88f64:	a021883a 	mov	r16,r20
   88f68:	0007883a 	mov	r3,zero
   88f6c:	003f8106 	br	88d74 <_malloc_r+0x474>
   88f70:	280bd0ba 	srai	r5,r5,2
   88f74:	01800044 	movi	r6,1
   88f78:	38800117 	ldw	r2,4(r7)
   88f7c:	314c983a 	sll	r6,r6,r5
   88f80:	180b883a 	mov	r5,r3
   88f84:	3084b03a 	or	r2,r6,r2
   88f88:	38800115 	stw	r2,4(r7)
   88f8c:	003fa906 	br	88e34 <_malloc_r+0x534>
   88f90:	00815504 	movi	r2,1364
   88f94:	11001836 	bltu	r2,r4,88ff8 <_malloc_r+0x6f8>
   88f98:	8808d4ba 	srli	r4,r17,18
   88f9c:	21001f04 	addi	r4,r4,124
   88fa0:	210b883a 	add	r5,r4,r4
   88fa4:	003e9d06 	br	88a1c <_malloc_r+0x11c>
   88fa8:	bdc00404 	addi	r23,r23,16
   88fac:	003f2f06 	br	88c6c <_malloc_r+0x36c>
   88fb0:	01401504 	movi	r5,84
   88fb4:	28c01f36 	bltu	r5,r3,89034 <_malloc_r+0x734>
   88fb8:	100ad33a 	srli	r5,r2,12
   88fbc:	29401b84 	addi	r5,r5,110
   88fc0:	294d883a 	add	r6,r5,r5
   88fc4:	003f8c06 	br	88df8 <_malloc_r+0x4f8>
   88fc8:	9c000217 	ldw	r16,8(r19)
   88fcc:	00bfff04 	movi	r2,-4
   88fd0:	80c00117 	ldw	r3,4(r16)
   88fd4:	1886703a 	and	r3,r3,r2
   88fd8:	003f6606 	br	88d74 <_malloc_r+0x474>
   88fdc:	e0c3ffcc 	andi	r3,fp,4095
   88fe0:	183f2f1e 	bne	r3,zero,88ca0 <_malloc_r+0x3a0>
   88fe4:	98c00217 	ldw	r3,8(r19)
   88fe8:	bd49883a 	add	r4,r23,r21
   88fec:	21000054 	ori	r4,r4,1
   88ff0:	19000115 	stw	r4,4(r3)
   88ff4:	003f5506 	br	88d4c <_malloc_r+0x44c>
   88ff8:	01403f04 	movi	r5,252
   88ffc:	01001f84 	movi	r4,126
   89000:	003e8606 	br	88a1c <_malloc_r+0x11c>
   89004:	9009883a 	mov	r4,r18
   89008:	81400204 	addi	r5,r16,8
   8900c:	008d4a00 	call	8d4a0 <_free_r>
   89010:	008002f4 	movhi	r2,11
   89014:	1091ef04 	addi	r2,r2,18364
   89018:	10800017 	ldw	r2,0(r2)
   8901c:	003f4b06 	br	88d4c <_malloc_r+0x44c>
   89020:	00c00044 	movi	r3,1
   89024:	002f883a 	mov	r23,zero
   89028:	003f3406 	br	88cfc <_malloc_r+0x3fc>
   8902c:	d5200515 	stw	r20,-32748(gp)
   89030:	003f2106 	br	88cb8 <_malloc_r+0x3b8>
   89034:	01405504 	movi	r5,340
   89038:	28c00436 	bltu	r5,r3,8904c <_malloc_r+0x74c>
   8903c:	100ad3fa 	srli	r5,r2,15
   89040:	29401dc4 	addi	r5,r5,119
   89044:	294d883a 	add	r6,r5,r5
   89048:	003f6b06 	br	88df8 <_malloc_r+0x4f8>
   8904c:	01415504 	movi	r5,1364
   89050:	28c00936 	bltu	r5,r3,89078 <_malloc_r+0x778>
   89054:	100ad4ba 	srli	r5,r2,18
   89058:	29401f04 	addi	r5,r5,124
   8905c:	294d883a 	add	r6,r5,r5
   89060:	003f6506 	br	88df8 <_malloc_r+0x4f8>
   89064:	98800117 	ldw	r2,4(r19)
   89068:	0146303a 	nor	r3,zero,r5
   8906c:	1884703a 	and	r2,r3,r2
   89070:	98800115 	stw	r2,4(r19)
   89074:	003f9006 	br	88eb8 <_malloc_r+0x5b8>
   89078:	01803f04 	movi	r6,252
   8907c:	01401f84 	movi	r5,126
   89080:	003f5d06 	br	88df8 <_malloc_r+0x4f8>

00089084 <memcpy>:
   89084:	00c003c4 	movi	r3,15
   89088:	2005883a 	mov	r2,r4
   8908c:	3009883a 	mov	r4,r6
   89090:	1980032e 	bgeu	r3,r6,890a0 <memcpy+0x1c>
   89094:	2886b03a 	or	r3,r5,r2
   89098:	18c000cc 	andi	r3,r3,3
   8909c:	18000926 	beq	r3,zero,890c4 <memcpy+0x40>
   890a0:	1007883a 	mov	r3,r2
   890a4:	290f883a 	add	r7,r5,r4
   890a8:	20000526 	beq	r4,zero,890c0 <memcpy+0x3c>
   890ac:	29800003 	ldbu	r6,0(r5)
   890b0:	18c00044 	addi	r3,r3,1
   890b4:	29400044 	addi	r5,r5,1
   890b8:	19bfffc5 	stb	r6,-1(r3)
   890bc:	29fffb1e 	bne	r5,r7,890ac <memcpy+0x28>
   890c0:	f800283a 	ret
   890c4:	327ffc04 	addi	r9,r6,-16
   890c8:	4812d13a 	srli	r9,r9,4
   890cc:	11000404 	addi	r4,r2,16
   890d0:	1007883a 	mov	r3,r2
   890d4:	4810913a 	slli	r8,r9,4
   890d8:	280f883a 	mov	r7,r5
   890dc:	2209883a 	add	r4,r4,r8
   890e0:	3a000017 	ldw	r8,0(r7)
   890e4:	18c00404 	addi	r3,r3,16
   890e8:	39c00404 	addi	r7,r7,16
   890ec:	1a3ffc15 	stw	r8,-16(r3)
   890f0:	3a3ffd17 	ldw	r8,-12(r7)
   890f4:	1a3ffd15 	stw	r8,-12(r3)
   890f8:	3a3ffe17 	ldw	r8,-8(r7)
   890fc:	1a3ffe15 	stw	r8,-8(r3)
   89100:	3a3fff17 	ldw	r8,-4(r7)
   89104:	1a3fff15 	stw	r8,-4(r3)
   89108:	193ff51e 	bne	r3,r4,890e0 <memcpy+0x5c>
   8910c:	49c00044 	addi	r7,r9,1
   89110:	380e913a 	slli	r7,r7,4
   89114:	310003cc 	andi	r4,r6,15
   89118:	018000c4 	movi	r6,3
   8911c:	11c7883a 	add	r3,r2,r7
   89120:	29cb883a 	add	r5,r5,r7
   89124:	313fdf2e 	bgeu	r6,r4,890a4 <memcpy+0x20>
   89128:	213fff04 	addi	r4,r4,-4
   8912c:	2014d0ba 	srli	r10,r4,2
   89130:	1a400104 	addi	r9,r3,4
   89134:	180d883a 	mov	r6,r3
   89138:	528f883a 	add	r7,r10,r10
   8913c:	39cf883a 	add	r7,r7,r7
   89140:	49d3883a 	add	r9,r9,r7
   89144:	280f883a 	mov	r7,r5
   89148:	3a000017 	ldw	r8,0(r7)
   8914c:	31800104 	addi	r6,r6,4
   89150:	39c00104 	addi	r7,r7,4
   89154:	323fff15 	stw	r8,-4(r6)
   89158:	327ffb1e 	bne	r6,r9,89148 <memcpy+0xc4>
   8915c:	51800044 	addi	r6,r10,1
   89160:	52bfff24 	muli	r10,r10,-4
   89164:	318d883a 	add	r6,r6,r6
   89168:	318d883a 	add	r6,r6,r6
   8916c:	5109883a 	add	r4,r10,r4
   89170:	298b883a 	add	r5,r5,r6
   89174:	1987883a 	add	r3,r3,r6
   89178:	003fca06 	br	890a4 <memcpy+0x20>

0008917c <memset>:
   8917c:	00c000c4 	movi	r3,3
   89180:	2005883a 	mov	r2,r4
   89184:	29403fcc 	andi	r5,r5,255
   89188:	19802d2e 	bgeu	r3,r6,89240 <memset+0xc4>
   8918c:	20c6703a 	and	r3,r4,r3
   89190:	18002e1e 	bne	r3,zero,8924c <memset+0xd0>
   89194:	2806923a 	slli	r3,r5,8
   89198:	010003c4 	movi	r4,15
   8919c:	3011883a 	mov	r8,r6
   891a0:	1946b03a 	or	r3,r3,r5
   891a4:	180e943a 	slli	r7,r3,16
   891a8:	38ceb03a 	or	r7,r7,r3
   891ac:	1007883a 	mov	r3,r2
   891b0:	21800f2e 	bgeu	r4,r6,891f0 <memset+0x74>
   891b4:	19c00015 	stw	r7,0(r3)
   891b8:	19c00115 	stw	r7,4(r3)
   891bc:	19c00215 	stw	r7,8(r3)
   891c0:	19c00315 	stw	r7,12(r3)
   891c4:	423ffc04 	addi	r8,r8,-16
   891c8:	18c00404 	addi	r3,r3,16
   891cc:	223ff936 	bltu	r4,r8,891b4 <memset+0x38>
   891d0:	30fffc04 	addi	r3,r6,-16
   891d4:	1806d13a 	srli	r3,r3,4
   891d8:	318003cc 	andi	r6,r6,15
   891dc:	010000c4 	movi	r4,3
   891e0:	18c00044 	addi	r3,r3,1
   891e4:	1806913a 	slli	r3,r3,4
   891e8:	10c7883a 	add	r3,r2,r3
   891ec:	21800e2e 	bgeu	r4,r6,89228 <memset+0xac>
   891f0:	1813883a 	mov	r9,r3
   891f4:	3011883a 	mov	r8,r6
   891f8:	010000c4 	movi	r4,3
   891fc:	49c00015 	stw	r7,0(r9)
   89200:	423fff04 	addi	r8,r8,-4
   89204:	4a400104 	addi	r9,r9,4
   89208:	223ffc36 	bltu	r4,r8,891fc <memset+0x80>
   8920c:	313fff04 	addi	r4,r6,-4
   89210:	2008d0ba 	srli	r4,r4,2
   89214:	318000cc 	andi	r6,r6,3
   89218:	21000044 	addi	r4,r4,1
   8921c:	2109883a 	add	r4,r4,r4
   89220:	2109883a 	add	r4,r4,r4
   89224:	1907883a 	add	r3,r3,r4
   89228:	30000a26 	beq	r6,zero,89254 <memset+0xd8>
   8922c:	198d883a 	add	r6,r3,r6
   89230:	19400005 	stb	r5,0(r3)
   89234:	18c00044 	addi	r3,r3,1
   89238:	19bffd1e 	bne	r3,r6,89230 <memset+0xb4>
   8923c:	f800283a 	ret
   89240:	2007883a 	mov	r3,r4
   89244:	303ff91e 	bne	r6,zero,8922c <memset+0xb0>
   89248:	00000206 	br	89254 <memset+0xd8>
   8924c:	2007883a 	mov	r3,r4
   89250:	003ff606 	br	8922c <memset+0xb0>
   89254:	f800283a 	ret

00089258 <_printf_r>:
   89258:	defffd04 	addi	sp,sp,-12
   8925c:	dfc00015 	stw	ra,0(sp)
   89260:	d9800115 	stw	r6,4(sp)
   89264:	d9c00215 	stw	r7,8(sp)
   89268:	280d883a 	mov	r6,r5
   8926c:	21400217 	ldw	r5,8(r4)
   89270:	d9c00104 	addi	r7,sp,4
   89274:	00895d40 	call	895d4 <___vfprintf_internal_r>
   89278:	dfc00017 	ldw	ra,0(sp)
   8927c:	dec00304 	addi	sp,sp,12
   89280:	f800283a 	ret

00089284 <printf>:
   89284:	defffc04 	addi	sp,sp,-16
   89288:	dfc00015 	stw	ra,0(sp)
   8928c:	d9400115 	stw	r5,4(sp)
   89290:	d9800215 	stw	r6,8(sp)
   89294:	d9c00315 	stw	r7,12(sp)
   89298:	008002f4 	movhi	r2,11
   8929c:	10844f04 	addi	r2,r2,4412
   892a0:	10800017 	ldw	r2,0(r2)
   892a4:	200b883a 	mov	r5,r4
   892a8:	d9800104 	addi	r6,sp,4
   892ac:	11000217 	ldw	r4,8(r2)
   892b0:	008b3cc0 	call	8b3cc <__vfprintf_internal>
   892b4:	dfc00017 	ldw	ra,0(sp)
   892b8:	dec00404 	addi	sp,sp,16
   892bc:	f800283a 	ret

000892c0 <_puts_r>:
   892c0:	defff604 	addi	sp,sp,-40
   892c4:	dc400815 	stw	r17,32(sp)
   892c8:	2023883a 	mov	r17,r4
   892cc:	2809883a 	mov	r4,r5
   892d0:	dc000715 	stw	r16,28(sp)
   892d4:	dfc00915 	stw	ra,36(sp)
   892d8:	2821883a 	mov	r16,r5
   892dc:	00895140 	call	89514 <strlen>
   892e0:	10c00044 	addi	r3,r2,1
   892e4:	d8800115 	stw	r2,4(sp)
   892e8:	89400217 	ldw	r5,8(r17)
   892ec:	008002f4 	movhi	r2,11
   892f0:	10b65704 	addi	r2,r2,-9892
   892f4:	d8800215 	stw	r2,8(sp)
   892f8:	00800044 	movi	r2,1
   892fc:	d8800315 	stw	r2,12(sp)
   89300:	8809883a 	mov	r4,r17
   89304:	00800084 	movi	r2,2
   89308:	d9800404 	addi	r6,sp,16
   8930c:	dc000015 	stw	r16,0(sp)
   89310:	d8c00615 	stw	r3,24(sp)
   89314:	dec00415 	stw	sp,16(sp)
   89318:	d8800515 	stw	r2,20(sp)
   8931c:	008d7700 	call	8d770 <__sfvwrite_r>
   89320:	1000061e 	bne	r2,zero,8933c <_puts_r+0x7c>
   89324:	00800284 	movi	r2,10
   89328:	dfc00917 	ldw	ra,36(sp)
   8932c:	dc400817 	ldw	r17,32(sp)
   89330:	dc000717 	ldw	r16,28(sp)
   89334:	dec00a04 	addi	sp,sp,40
   89338:	f800283a 	ret
   8933c:	00bfffc4 	movi	r2,-1
   89340:	003ff906 	br	89328 <_puts_r+0x68>

00089344 <puts>:
   89344:	008002f4 	movhi	r2,11
   89348:	10844f04 	addi	r2,r2,4412
   8934c:	200b883a 	mov	r5,r4
   89350:	11000017 	ldw	r4,0(r2)
   89354:	00892c01 	jmpi	892c0 <_puts_r>

00089358 <_sbrk_r>:
   89358:	defffd04 	addi	sp,sp,-12
   8935c:	dc400115 	stw	r17,4(sp)
   89360:	dc000015 	stw	r16,0(sp)
   89364:	2023883a 	mov	r17,r4
   89368:	040002f4 	movhi	r16,11
   8936c:	8411e504 	addi	r16,r16,18324
   89370:	2809883a 	mov	r4,r5
   89374:	dfc00215 	stw	ra,8(sp)
   89378:	80000015 	stw	zero,0(r16)
   8937c:	00918240 	call	91824 <sbrk>
   89380:	00ffffc4 	movi	r3,-1
   89384:	10c00526 	beq	r2,r3,8939c <_sbrk_r+0x44>
   89388:	dfc00217 	ldw	ra,8(sp)
   8938c:	dc400117 	ldw	r17,4(sp)
   89390:	dc000017 	ldw	r16,0(sp)
   89394:	dec00304 	addi	sp,sp,12
   89398:	f800283a 	ret
   8939c:	80c00017 	ldw	r3,0(r16)
   893a0:	183ff926 	beq	r3,zero,89388 <_sbrk_r+0x30>
   893a4:	88c00015 	stw	r3,0(r17)
   893a8:	dfc00217 	ldw	ra,8(sp)
   893ac:	dc400117 	ldw	r17,4(sp)
   893b0:	dc000017 	ldw	r16,0(sp)
   893b4:	dec00304 	addi	sp,sp,12
   893b8:	f800283a 	ret

000893bc <_sprintf_r>:
   893bc:	deffe704 	addi	sp,sp,-100
   893c0:	2807883a 	mov	r3,r5
   893c4:	dfc01715 	stw	ra,92(sp)
   893c8:	d9c01815 	stw	r7,96(sp)
   893cc:	00a00034 	movhi	r2,32768
   893d0:	10bfffc4 	addi	r2,r2,-1
   893d4:	02008204 	movi	r8,520
   893d8:	d8800215 	stw	r2,8(sp)
   893dc:	d8800515 	stw	r2,20(sp)
   893e0:	d80b883a 	mov	r5,sp
   893e4:	d9c01804 	addi	r7,sp,96
   893e8:	00bfffc4 	movi	r2,-1
   893ec:	d8c00015 	stw	r3,0(sp)
   893f0:	d8c00415 	stw	r3,16(sp)
   893f4:	da00030d 	sth	r8,12(sp)
   893f8:	d880038d 	sth	r2,14(sp)
   893fc:	00895d40 	call	895d4 <___vfprintf_internal_r>
   89400:	d8c00017 	ldw	r3,0(sp)
   89404:	18000005 	stb	zero,0(r3)
   89408:	dfc01717 	ldw	ra,92(sp)
   8940c:	dec01904 	addi	sp,sp,100
   89410:	f800283a 	ret

00089414 <sprintf>:
   89414:	deffe604 	addi	sp,sp,-104
   89418:	2007883a 	mov	r3,r4
   8941c:	dfc01715 	stw	ra,92(sp)
   89420:	d9801815 	stw	r6,96(sp)
   89424:	d9c01915 	stw	r7,100(sp)
   89428:	008002f4 	movhi	r2,11
   8942c:	10844f04 	addi	r2,r2,4412
   89430:	11000017 	ldw	r4,0(r2)
   89434:	00a00034 	movhi	r2,32768
   89438:	10bfffc4 	addi	r2,r2,-1
   8943c:	280d883a 	mov	r6,r5
   89440:	02008204 	movi	r8,520
   89444:	d8800215 	stw	r2,8(sp)
   89448:	d8800515 	stw	r2,20(sp)
   8944c:	d80b883a 	mov	r5,sp
   89450:	d9c01804 	addi	r7,sp,96
   89454:	00bfffc4 	movi	r2,-1
   89458:	d8c00015 	stw	r3,0(sp)
   8945c:	d8c00415 	stw	r3,16(sp)
   89460:	da00030d 	sth	r8,12(sp)
   89464:	d880038d 	sth	r2,14(sp)
   89468:	00895d40 	call	895d4 <___vfprintf_internal_r>
   8946c:	d8c00017 	ldw	r3,0(sp)
   89470:	18000005 	stb	zero,0(r3)
   89474:	dfc01717 	ldw	ra,92(sp)
   89478:	dec01a04 	addi	sp,sp,104
   8947c:	f800283a 	ret

00089480 <strcpy>:
   89480:	2906b03a 	or	r3,r5,r4
   89484:	18c000cc 	andi	r3,r3,3
   89488:	2005883a 	mov	r2,r4
   8948c:	18001a1e 	bne	r3,zero,894f8 <strcpy+0x78>
   89490:	29800017 	ldw	r6,0(r5)
   89494:	02bfbff4 	movhi	r10,65279
   89498:	52bfbfc4 	addi	r10,r10,-257
   8949c:	02602074 	movhi	r9,32897
   894a0:	4a602004 	addi	r9,r9,-32640
   894a4:	0188303a 	nor	r4,zero,r6
   894a8:	3287883a 	add	r3,r6,r10
   894ac:	20c6703a 	and	r3,r4,r3
   894b0:	1a46703a 	and	r3,r3,r9
   894b4:	1800101e 	bne	r3,zero,894f8 <strcpy+0x78>
   894b8:	1007883a 	mov	r3,r2
   894bc:	19800015 	stw	r6,0(r3)
   894c0:	29400104 	addi	r5,r5,4
   894c4:	29800017 	ldw	r6,0(r5)
   894c8:	18c00104 	addi	r3,r3,4
   894cc:	0190303a 	nor	r8,zero,r6
   894d0:	328f883a 	add	r7,r6,r10
   894d4:	41ce703a 	and	r7,r8,r7
   894d8:	3a4e703a 	and	r7,r7,r9
   894dc:	383ff726 	beq	r7,zero,894bc <strcpy+0x3c>
   894e0:	29800007 	ldb	r6,0(r5)
   894e4:	18c00044 	addi	r3,r3,1
   894e8:	29400044 	addi	r5,r5,1
   894ec:	19bfffc5 	stb	r6,-1(r3)
   894f0:	3000021e 	bne	r6,zero,894fc <strcpy+0x7c>
   894f4:	f800283a 	ret
   894f8:	1007883a 	mov	r3,r2
   894fc:	29800007 	ldb	r6,0(r5)
   89500:	18c00044 	addi	r3,r3,1
   89504:	29400044 	addi	r5,r5,1
   89508:	19bfffc5 	stb	r6,-1(r3)
   8950c:	303ffb1e 	bne	r6,zero,894fc <strcpy+0x7c>
   89510:	f800283a 	ret

00089514 <strlen>:
   89514:	208000cc 	andi	r2,r4,3
   89518:	10001f1e 	bne	r2,zero,89598 <strlen+0x84>
   8951c:	20800017 	ldw	r2,0(r4)
   89520:	01ffbff4 	movhi	r7,65279
   89524:	39ffbfc4 	addi	r7,r7,-257
   89528:	01a02074 	movhi	r6,32897
   8952c:	31a02004 	addi	r6,r6,-32640
   89530:	11c7883a 	add	r3,r2,r7
   89534:	0084303a 	nor	r2,zero,r2
   89538:	1886703a 	and	r3,r3,r2
   8953c:	1986703a 	and	r3,r3,r6
   89540:	2005883a 	mov	r2,r4
   89544:	1800101e 	bne	r3,zero,89588 <strlen+0x74>
   89548:	10800104 	addi	r2,r2,4
   8954c:	10c00017 	ldw	r3,0(r2)
   89550:	19cb883a 	add	r5,r3,r7
   89554:	00c6303a 	nor	r3,zero,r3
   89558:	28c6703a 	and	r3,r5,r3
   8955c:	1986703a 	and	r3,r3,r6
   89560:	1800091e 	bne	r3,zero,89588 <strlen+0x74>
   89564:	10800104 	addi	r2,r2,4
   89568:	10c00017 	ldw	r3,0(r2)
   8956c:	19cb883a 	add	r5,r3,r7
   89570:	00c6303a 	nor	r3,zero,r3
   89574:	28c6703a 	and	r3,r5,r3
   89578:	1986703a 	and	r3,r3,r6
   8957c:	183ff226 	beq	r3,zero,89548 <strlen+0x34>
   89580:	00000106 	br	89588 <strlen+0x74>
   89584:	10800044 	addi	r2,r2,1
   89588:	10c00007 	ldb	r3,0(r2)
   8958c:	183ffd1e 	bne	r3,zero,89584 <strlen+0x70>
   89590:	1105c83a 	sub	r2,r2,r4
   89594:	f800283a 	ret
   89598:	2005883a 	mov	r2,r4
   8959c:	003ffa06 	br	89588 <strlen+0x74>

000895a0 <__sprint_r>:
   895a0:	30800217 	ldw	r2,8(r6)
   895a4:	defffe04 	addi	sp,sp,-8
   895a8:	dc000015 	stw	r16,0(sp)
   895ac:	dfc00115 	stw	ra,4(sp)
   895b0:	3021883a 	mov	r16,r6
   895b4:	10000226 	beq	r2,zero,895c0 <__sprint_r+0x20>
   895b8:	008d7700 	call	8d770 <__sfvwrite_r>
   895bc:	80000215 	stw	zero,8(r16)
   895c0:	80000115 	stw	zero,4(r16)
   895c4:	dfc00117 	ldw	ra,4(sp)
   895c8:	dc000017 	ldw	r16,0(sp)
   895cc:	dec00204 	addi	sp,sp,8
   895d0:	f800283a 	ret

000895d4 <___vfprintf_internal_r>:
   895d4:	defeb904 	addi	sp,sp,-1308
   895d8:	dc013d15 	stw	r16,1268(sp)
   895dc:	d9013015 	stw	r4,1216(sp)
   895e0:	dfc14615 	stw	ra,1304(sp)
   895e4:	df014515 	stw	fp,1300(sp)
   895e8:	ddc14415 	stw	r23,1296(sp)
   895ec:	dd814315 	stw	r22,1292(sp)
   895f0:	dd414215 	stw	r21,1288(sp)
   895f4:	dd014115 	stw	r20,1284(sp)
   895f8:	dcc14015 	stw	r19,1280(sp)
   895fc:	dc813f15 	stw	r18,1276(sp)
   89600:	dc413e15 	stw	r17,1272(sp)
   89604:	d9412915 	stw	r5,1188(sp)
   89608:	3021883a 	mov	r16,r6
   8960c:	d9c12d15 	stw	r7,1204(sp)
   89610:	008de5c0 	call	8de5c <_localeconv_r>
   89614:	10800017 	ldw	r2,0(r2)
   89618:	d9013017 	ldw	r4,1216(sp)
   8961c:	d8013315 	stw	zero,1228(sp)
   89620:	d8813715 	stw	r2,1244(sp)
   89624:	d8013415 	stw	zero,1232(sp)
   89628:	20000226 	beq	r4,zero,89634 <___vfprintf_internal_r+0x60>
   8962c:	20800e17 	ldw	r2,56(r4)
   89630:	10019826 	beq	r2,zero,89c94 <___vfprintf_internal_r+0x6c0>
   89634:	da012917 	ldw	r8,1188(sp)
   89638:	4080030b 	ldhu	r2,12(r8)
   8963c:	10c0020c 	andi	r3,r2,8
   89640:	18ffffcc 	andi	r3,r3,65535
   89644:	18e0001c 	xori	r3,r3,32768
   89648:	18e00004 	addi	r3,r3,-32768
   8964c:	18013a26 	beq	r3,zero,89b38 <___vfprintf_internal_r+0x564>
   89650:	40c00417 	ldw	r3,16(r8)
   89654:	18013826 	beq	r3,zero,89b38 <___vfprintf_internal_r+0x564>
   89658:	1100068c 	andi	r4,r2,26
   8965c:	00c00284 	movi	r3,10
   89660:	20c13e26 	beq	r4,r3,89b5c <___vfprintf_internal_r+0x588>
   89664:	da010dc4 	addi	r8,sp,1079
   89668:	d8800404 	addi	r2,sp,16
   8966c:	da012615 	stw	r8,1176(sp)
   89670:	d8811b15 	stw	r2,1132(sp)
   89674:	1013883a 	mov	r9,r2
   89678:	d8812617 	ldw	r2,1176(sp)
   8967c:	da010e04 	addi	r8,sp,1080
   89680:	dc413017 	ldw	r17,1216(sp)
   89684:	da012715 	stw	r8,1180(sp)
   89688:	4091c83a 	sub	r8,r8,r2
   8968c:	d8011d15 	stw	zero,1140(sp)
   89690:	d8011c15 	stw	zero,1136(sp)
   89694:	802b883a 	mov	r21,r16
   89698:	d8013215 	stw	zero,1224(sp)
   8969c:	d8013615 	stw	zero,1240(sp)
   896a0:	d8013515 	stw	zero,1236(sp)
   896a4:	d8012c15 	stw	zero,1200(sp)
   896a8:	da013915 	stw	r8,1252(sp)
   896ac:	a8800007 	ldb	r2,0(r21)
   896b0:	1002ec26 	beq	r2,zero,8a264 <___vfprintf_internal_r+0xc90>
   896b4:	00c00944 	movi	r3,37
   896b8:	a825883a 	mov	r18,r21
   896bc:	10c0021e 	bne	r2,r3,896c8 <___vfprintf_internal_r+0xf4>
   896c0:	00001406 	br	89714 <___vfprintf_internal_r+0x140>
   896c4:	10c00326 	beq	r2,r3,896d4 <___vfprintf_internal_r+0x100>
   896c8:	94800044 	addi	r18,r18,1
   896cc:	90800007 	ldb	r2,0(r18)
   896d0:	103ffc1e 	bne	r2,zero,896c4 <___vfprintf_internal_r+0xf0>
   896d4:	9561c83a 	sub	r16,r18,r21
   896d8:	80000e26 	beq	r16,zero,89714 <___vfprintf_internal_r+0x140>
   896dc:	da011d17 	ldw	r8,1140(sp)
   896e0:	d8c11c17 	ldw	r3,1136(sp)
   896e4:	4d400015 	stw	r21,0(r9)
   896e8:	4c000115 	stw	r16,4(r9)
   896ec:	4411883a 	add	r8,r8,r16
   896f0:	18c00044 	addi	r3,r3,1
   896f4:	da011d15 	stw	r8,1140(sp)
   896f8:	d8c11c15 	stw	r3,1136(sp)
   896fc:	008001c4 	movi	r2,7
   89700:	10c15d16 	blt	r2,r3,89c78 <___vfprintf_internal_r+0x6a4>
   89704:	4a400204 	addi	r9,r9,8
   89708:	d8812c17 	ldw	r2,1200(sp)
   8970c:	1405883a 	add	r2,r2,r16
   89710:	d8812c15 	stw	r2,1200(sp)
   89714:	90800007 	ldb	r2,0(r18)
   89718:	10013b26 	beq	r2,zero,89c08 <___vfprintf_internal_r+0x634>
   8971c:	95400044 	addi	r21,r18,1
   89720:	94800047 	ldb	r18,1(r18)
   89724:	d8012585 	stb	zero,1174(sp)
   89728:	073fffc4 	movi	fp,-1
   8972c:	d8012e15 	stw	zero,1208(sp)
   89730:	0021883a 	mov	r16,zero
   89734:	00c01604 	movi	r3,88
   89738:	01400244 	movi	r5,9
   8973c:	02800a84 	movi	r10,42
   89740:	01c01b04 	movi	r7,108
   89744:	01800ac4 	movi	r6,43
   89748:	02c00804 	movi	r11,32
   8974c:	ad400044 	addi	r21,r21,1
   89750:	90bff804 	addi	r2,r18,-32
   89754:	1880092e 	bgeu	r3,r2,8977c <___vfprintf_internal_r+0x1a8>
   89758:	90012b26 	beq	r18,zero,89c08 <___vfprintf_internal_r+0x634>
   8975c:	00c00044 	movi	r3,1
   89760:	d8c12815 	stw	r3,1184(sp)
   89764:	dc810405 	stb	r18,1040(sp)
   89768:	d8012585 	stb	zero,1174(sp)
   8976c:	d8c12b15 	stw	r3,1196(sp)
   89770:	dcc10404 	addi	r19,sp,1040
   89774:	d8013115 	stw	zero,1220(sp)
   89778:	00008806 	br	8999c <___vfprintf_internal_r+0x3c8>
   8977c:	1085883a 	add	r2,r2,r2
   89780:	1085883a 	add	r2,r2,r2
   89784:	01000274 	movhi	r4,9
   89788:	2125e604 	addi	r4,r4,-26728
   8978c:	1105883a 	add	r2,r2,r4
   89790:	10800017 	ldw	r2,0(r2)
   89794:	1000683a 	jmp	r2
   89798:	00089d4c 	andi	zero,zero,8821
   8979c:	00089758 	cmpnei	zero,zero,8797
   897a0:	00089758 	cmpnei	zero,zero,8797
   897a4:	00089d60 	cmpeqi	zero,zero,8821
   897a8:	00089758 	cmpnei	zero,zero,8797
   897ac:	00089758 	cmpnei	zero,zero,8797
   897b0:	00089758 	cmpnei	zero,zero,8797
   897b4:	00089758 	cmpnei	zero,zero,8797
   897b8:	00089758 	cmpnei	zero,zero,8797
   897bc:	00089758 	cmpnei	zero,zero,8797
   897c0:	00089e48 	cmpgei	zero,zero,8825
   897c4:	00089d04 	movi	zero,8820
   897c8:	00089758 	cmpnei	zero,zero,8797
   897cc:	00089b2c 	andhi	zero,zero,8812
   897d0:	00089d10 	cmplti	zero,zero,8820
   897d4:	00089758 	cmpnei	zero,zero,8797
   897d8:	00089d6c 	andhi	zero,zero,8821
   897dc:	00089e6c 	andhi	zero,zero,8825
   897e0:	00089e6c 	andhi	zero,zero,8825
   897e4:	00089e6c 	andhi	zero,zero,8825
   897e8:	00089e6c 	andhi	zero,zero,8825
   897ec:	00089e6c 	andhi	zero,zero,8825
   897f0:	00089e6c 	andhi	zero,zero,8825
   897f4:	00089e6c 	andhi	zero,zero,8825
   897f8:	00089e6c 	andhi	zero,zero,8825
   897fc:	00089e6c 	andhi	zero,zero,8825
   89800:	00089758 	cmpnei	zero,zero,8797
   89804:	00089758 	cmpnei	zero,zero,8797
   89808:	00089758 	cmpnei	zero,zero,8797
   8980c:	00089758 	cmpnei	zero,zero,8797
   89810:	00089758 	cmpnei	zero,zero,8797
   89814:	00089758 	cmpnei	zero,zero,8797
   89818:	00089758 	cmpnei	zero,zero,8797
   8981c:	00089758 	cmpnei	zero,zero,8797
   89820:	00089758 	cmpnei	zero,zero,8797
   89824:	00089758 	cmpnei	zero,zero,8797
   89828:	00089ac8 	cmpgei	zero,zero,8811
   8982c:	00089e94 	movui	zero,8826
   89830:	00089758 	cmpnei	zero,zero,8797
   89834:	00089e94 	movui	zero,8826
   89838:	00089758 	cmpnei	zero,zero,8797
   8983c:	00089758 	cmpnei	zero,zero,8797
   89840:	00089758 	cmpnei	zero,zero,8797
   89844:	00089758 	cmpnei	zero,zero,8797
   89848:	0008a004 	movi	zero,8832
   8984c:	00089758 	cmpnei	zero,zero,8797
   89850:	00089758 	cmpnei	zero,zero,8797
   89854:	00089a90 	cmplti	zero,zero,8810
   89858:	00089758 	cmpnei	zero,zero,8797
   8985c:	00089758 	cmpnei	zero,zero,8797
   89860:	00089758 	cmpnei	zero,zero,8797
   89864:	00089758 	cmpnei	zero,zero,8797
   89868:	00089758 	cmpnei	zero,zero,8797
   8986c:	000898fc 	xorhi	zero,zero,8803
   89870:	00089758 	cmpnei	zero,zero,8797
   89874:	00089758 	cmpnei	zero,zero,8797
   89878:	00089d78 	rdprs	zero,zero,8821
   8987c:	00089758 	cmpnei	zero,zero,8797
   89880:	00089758 	cmpnei	zero,zero,8797
   89884:	00089758 	cmpnei	zero,zero,8797
   89888:	00089758 	cmpnei	zero,zero,8797
   8988c:	00089758 	cmpnei	zero,zero,8797
   89890:	00089758 	cmpnei	zero,zero,8797
   89894:	00089758 	cmpnei	zero,zero,8797
   89898:	00089758 	cmpnei	zero,zero,8797
   8989c:	00089758 	cmpnei	zero,zero,8797
   898a0:	00089758 	cmpnei	zero,zero,8797
   898a4:	00089dec 	andhi	zero,zero,8823
   898a8:	00089acc 	andi	zero,zero,8811
   898ac:	00089e94 	movui	zero,8826
   898b0:	00089e94 	movui	zero,8826
   898b4:	00089e94 	movui	zero,8826
   898b8:	00089dcc 	andi	zero,zero,8823
   898bc:	00089acc 	andi	zero,zero,8811
   898c0:	00089758 	cmpnei	zero,zero,8797
   898c4:	00089758 	cmpnei	zero,zero,8797
   898c8:	00089dd8 	cmpnei	zero,zero,8823
   898cc:	00089758 	cmpnei	zero,zero,8797
   898d0:	00089e1c 	xori	zero,zero,8824
   898d4:	00089a94 	movui	zero,8810
   898d8:	00089f1c 	xori	zero,zero,8828
   898dc:	00089f68 	cmpgeui	zero,zero,8829
   898e0:	00089758 	cmpnei	zero,zero,8797
   898e4:	00089f74 	movhi	zero,8829
   898e8:	00089758 	cmpnei	zero,zero,8797
   898ec:	00089900 	call	8990 <__reset-0x77670>
   898f0:	00089758 	cmpnei	zero,zero,8797
   898f4:	00089758 	cmpnei	zero,zero,8797
   898f8:	00089fd0 	cmplti	zero,zero,8831
   898fc:	84000414 	ori	r16,r16,16
   89900:	8080080c 	andi	r2,r16,32
   89904:	1000f51e 	bne	r2,zero,89cdc <___vfprintf_internal_r+0x708>
   89908:	8080040c 	andi	r2,r16,16
   8990c:	10042c26 	beq	r2,zero,8a9c0 <___vfprintf_internal_r+0x13ec>
   89910:	da012d17 	ldw	r8,1204(sp)
   89914:	002d883a 	mov	r22,zero
   89918:	00c00044 	movi	r3,1
   8991c:	45c00017 	ldw	r23,0(r8)
   89920:	42000104 	addi	r8,r8,4
   89924:	da012d15 	stw	r8,1204(sp)
   89928:	b805883a 	mov	r2,r23
   8992c:	d8012585 	stb	zero,1174(sp)
   89930:	e0000216 	blt	fp,zero,8993c <___vfprintf_internal_r+0x368>
   89934:	013fdfc4 	movi	r4,-129
   89938:	8120703a 	and	r16,r16,r4
   8993c:	1002671e 	bne	r2,zero,8a2dc <___vfprintf_internal_r+0xd08>
   89940:	e002661e 	bne	fp,zero,8a2dc <___vfprintf_internal_r+0xd08>
   89944:	18c03fcc 	andi	r3,r3,255
   89948:	1803561e 	bne	r3,zero,8a6a4 <___vfprintf_internal_r+0x10d0>
   8994c:	8080004c 	andi	r2,r16,1
   89950:	10035426 	beq	r2,zero,8a6a4 <___vfprintf_internal_r+0x10d0>
   89954:	da013917 	ldw	r8,1252(sp)
   89958:	00800c04 	movi	r2,48
   8995c:	d8810dc5 	stb	r2,1079(sp)
   89960:	da012b15 	stw	r8,1196(sp)
   89964:	dcc10dc4 	addi	r19,sp,1079
   89968:	d8812b17 	ldw	r2,1196(sp)
   8996c:	d8812815 	stw	r2,1184(sp)
   89970:	1700010e 	bge	r2,fp,89978 <___vfprintf_internal_r+0x3a4>
   89974:	df012815 	stw	fp,1184(sp)
   89978:	d8812583 	ldbu	r2,1174(sp)
   8997c:	df013115 	stw	fp,1220(sp)
   89980:	10803fcc 	andi	r2,r2,255
   89984:	1080201c 	xori	r2,r2,128
   89988:	10bfe004 	addi	r2,r2,-128
   8998c:	10000326 	beq	r2,zero,8999c <___vfprintf_internal_r+0x3c8>
   89990:	da012817 	ldw	r8,1184(sp)
   89994:	42000044 	addi	r8,r8,1
   89998:	da012815 	stw	r8,1184(sp)
   8999c:	80c0008c 	andi	r3,r16,2
   899a0:	d8c12a15 	stw	r3,1192(sp)
   899a4:	18000326 	beq	r3,zero,899b4 <___vfprintf_internal_r+0x3e0>
   899a8:	da012817 	ldw	r8,1184(sp)
   899ac:	42000084 	addi	r8,r8,2
   899b0:	da012815 	stw	r8,1184(sp)
   899b4:	80c0210c 	andi	r3,r16,132
   899b8:	d8c12f15 	stw	r3,1212(sp)
   899bc:	1801941e 	bne	r3,zero,8a010 <___vfprintf_internal_r+0xa3c>
   899c0:	da012e17 	ldw	r8,1208(sp)
   899c4:	d8c12817 	ldw	r3,1184(sp)
   899c8:	40edc83a 	sub	r22,r8,r3
   899cc:	0581900e 	bge	zero,r22,8a010 <___vfprintf_internal_r+0xa3c>
   899d0:	02800404 	movi	r10,16
   899d4:	da011d17 	ldw	r8,1140(sp)
   899d8:	d8c11c17 	ldw	r3,1136(sp)
   899dc:	05c002f4 	movhi	r23,11
   899e0:	bdf66884 	addi	r23,r23,-9822
   899e4:	5580200e 	bge	r10,r22,89a68 <___vfprintf_internal_r+0x494>
   899e8:	dc813815 	stw	r18,1248(sp)
   899ec:	5039883a 	mov	fp,r10
   899f0:	b825883a 	mov	r18,r23
   899f4:	050001c4 	movi	r20,7
   899f8:	b02f883a 	mov	r23,r22
   899fc:	802d883a 	mov	r22,r16
   89a00:	dc012917 	ldw	r16,1188(sp)
   89a04:	00000306 	br	89a14 <___vfprintf_internal_r+0x440>
   89a08:	bdfffc04 	addi	r23,r23,-16
   89a0c:	4a400204 	addi	r9,r9,8
   89a10:	e5c0110e 	bge	fp,r23,89a58 <___vfprintf_internal_r+0x484>
   89a14:	4c800015 	stw	r18,0(r9)
   89a18:	4f000115 	stw	fp,4(r9)
   89a1c:	42000404 	addi	r8,r8,16
   89a20:	18c00044 	addi	r3,r3,1
   89a24:	da011d15 	stw	r8,1140(sp)
   89a28:	d8c11c15 	stw	r3,1136(sp)
   89a2c:	a0fff60e 	bge	r20,r3,89a08 <___vfprintf_internal_r+0x434>
   89a30:	8809883a 	mov	r4,r17
   89a34:	800b883a 	mov	r5,r16
   89a38:	d9811b04 	addi	r6,sp,1132
   89a3c:	00895a00 	call	895a0 <__sprint_r>
   89a40:	1000771e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   89a44:	bdfffc04 	addi	r23,r23,-16
   89a48:	da011d17 	ldw	r8,1140(sp)
   89a4c:	d8c11c17 	ldw	r3,1136(sp)
   89a50:	da400404 	addi	r9,sp,16
   89a54:	e5ffef16 	blt	fp,r23,89a14 <___vfprintf_internal_r+0x440>
   89a58:	b021883a 	mov	r16,r22
   89a5c:	b82d883a 	mov	r22,r23
   89a60:	902f883a 	mov	r23,r18
   89a64:	dc813817 	ldw	r18,1248(sp)
   89a68:	4dc00015 	stw	r23,0(r9)
   89a6c:	4d800115 	stw	r22,4(r9)
   89a70:	4591883a 	add	r8,r8,r22
   89a74:	18c00044 	addi	r3,r3,1
   89a78:	da011d15 	stw	r8,1140(sp)
   89a7c:	d8c11c15 	stw	r3,1136(sp)
   89a80:	008001c4 	movi	r2,7
   89a84:	10c36d16 	blt	r2,r3,8a83c <___vfprintf_internal_r+0x1268>
   89a88:	4a400204 	addi	r9,r9,8
   89a8c:	00016206 	br	8a018 <___vfprintf_internal_r+0xa44>
   89a90:	84000414 	ori	r16,r16,16
   89a94:	8080080c 	andi	r2,r16,32
   89a98:	1000801e 	bne	r2,zero,89c9c <___vfprintf_internal_r+0x6c8>
   89a9c:	8080040c 	andi	r2,r16,16
   89aa0:	1003da26 	beq	r2,zero,8aa0c <___vfprintf_internal_r+0x1438>
   89aa4:	d8c12d17 	ldw	r3,1204(sp)
   89aa8:	002d883a 	mov	r22,zero
   89aac:	1dc00017 	ldw	r23,0(r3)
   89ab0:	18c00104 	addi	r3,r3,4
   89ab4:	d8c12d15 	stw	r3,1204(sp)
   89ab8:	b805883a 	mov	r2,r23
   89abc:	0007883a 	mov	r3,zero
   89ac0:	d8012585 	stb	zero,1174(sp)
   89ac4:	003f9a06 	br	89930 <___vfprintf_internal_r+0x35c>
   89ac8:	84000414 	ori	r16,r16,16
   89acc:	8080080c 	andi	r2,r16,32
   89ad0:	10007b1e 	bne	r2,zero,89cc0 <___vfprintf_internal_r+0x6ec>
   89ad4:	8080040c 	andi	r2,r16,16
   89ad8:	1003ed26 	beq	r2,zero,8aa90 <___vfprintf_internal_r+0x14bc>
   89adc:	d9012d17 	ldw	r4,1204(sp)
   89ae0:	25c00017 	ldw	r23,0(r4)
   89ae4:	21000104 	addi	r4,r4,4
   89ae8:	d9012d15 	stw	r4,1204(sp)
   89aec:	b82dd7fa 	srai	r22,r23,31
   89af0:	b005883a 	mov	r2,r22
   89af4:	1003230e 	bge	r2,zero,8a784 <___vfprintf_internal_r+0x11b0>
   89af8:	05efc83a 	sub	r23,zero,r23
   89afc:	b804c03a 	cmpne	r2,r23,zero
   89b00:	05adc83a 	sub	r22,zero,r22
   89b04:	b0adc83a 	sub	r22,r22,r2
   89b08:	00800b44 	movi	r2,45
   89b0c:	d8812585 	stb	r2,1174(sp)
   89b10:	00c00044 	movi	r3,1
   89b14:	bd84b03a 	or	r2,r23,r22
   89b18:	003f8506 	br	89930 <___vfprintf_internal_r+0x35c>
   89b1c:	da012e17 	ldw	r8,1208(sp)
   89b20:	d8812d15 	stw	r2,1204(sp)
   89b24:	0211c83a 	sub	r8,zero,r8
   89b28:	da012e15 	stw	r8,1208(sp)
   89b2c:	84000114 	ori	r16,r16,4
   89b30:	ac800007 	ldb	r18,0(r21)
   89b34:	003f0506 	br	8974c <___vfprintf_internal_r+0x178>
   89b38:	d9013017 	ldw	r4,1216(sp)
   89b3c:	d9412917 	ldw	r5,1188(sp)
   89b40:	008b4dc0 	call	8b4dc <__swsetup_r>
   89b44:	10003d1e 	bne	r2,zero,89c3c <___vfprintf_internal_r+0x668>
   89b48:	d8c12917 	ldw	r3,1188(sp)
   89b4c:	1880030b 	ldhu	r2,12(r3)
   89b50:	00c00284 	movi	r3,10
   89b54:	1100068c 	andi	r4,r2,26
   89b58:	20fec21e 	bne	r4,r3,89664 <___vfprintf_internal_r+0x90>
   89b5c:	d9012917 	ldw	r4,1188(sp)
   89b60:	20c0038b 	ldhu	r3,14(r4)
   89b64:	193fffcc 	andi	r4,r3,65535
   89b68:	2120001c 	xori	r4,r4,32768
   89b6c:	21200004 	addi	r4,r4,-32768
   89b70:	203ebc16 	blt	r4,zero,89664 <___vfprintf_internal_r+0x90>
   89b74:	da012917 	ldw	r8,1188(sp)
   89b78:	d9013017 	ldw	r4,1216(sp)
   89b7c:	d9c12d17 	ldw	r7,1204(sp)
   89b80:	42800717 	ldw	r10,28(r8)
   89b84:	42400917 	ldw	r9,36(r8)
   89b88:	10bfff4c 	andi	r2,r2,65533
   89b8c:	02010004 	movi	r8,1024
   89b90:	d881070d 	sth	r2,1052(sp)
   89b94:	d9410404 	addi	r5,sp,1040
   89b98:	d8800404 	addi	r2,sp,16
   89b9c:	800d883a 	mov	r6,r16
   89ba0:	d8c1078d 	sth	r3,1054(sp)
   89ba4:	da810b15 	stw	r10,1068(sp)
   89ba8:	da410d15 	stw	r9,1076(sp)
   89bac:	d8810415 	stw	r2,1040(sp)
   89bb0:	d8810815 	stw	r2,1056(sp)
   89bb4:	da010615 	stw	r8,1048(sp)
   89bb8:	da010915 	stw	r8,1060(sp)
   89bbc:	d8010a15 	stw	zero,1064(sp)
   89bc0:	00895d40 	call	895d4 <___vfprintf_internal_r>
   89bc4:	d8812c15 	stw	r2,1200(sp)
   89bc8:	10000416 	blt	r2,zero,89bdc <___vfprintf_internal_r+0x608>
   89bcc:	d9013017 	ldw	r4,1216(sp)
   89bd0:	d9410404 	addi	r5,sp,1040
   89bd4:	008ce740 	call	8ce74 <_fflush_r>
   89bd8:	1005d81e 	bne	r2,zero,8b33c <___vfprintf_internal_r+0x1d68>
   89bdc:	d881070b 	ldhu	r2,1052(sp)
   89be0:	1080100c 	andi	r2,r2,64
   89be4:	10bfffcc 	andi	r2,r2,65535
   89be8:	10a0001c 	xori	r2,r2,32768
   89bec:	10a00004 	addi	r2,r2,-32768
   89bf0:	10001426 	beq	r2,zero,89c44 <___vfprintf_internal_r+0x670>
   89bf4:	d8c12917 	ldw	r3,1188(sp)
   89bf8:	1880030b 	ldhu	r2,12(r3)
   89bfc:	10801014 	ori	r2,r2,64
   89c00:	1880030d 	sth	r2,12(r3)
   89c04:	00000f06 	br	89c44 <___vfprintf_internal_r+0x670>
   89c08:	d8811d17 	ldw	r2,1140(sp)
   89c0c:	10000426 	beq	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   89c10:	d9013017 	ldw	r4,1216(sp)
   89c14:	d9412917 	ldw	r5,1188(sp)
   89c18:	d9811b04 	addi	r6,sp,1132
   89c1c:	00895a00 	call	895a0 <__sprint_r>
   89c20:	d8c12917 	ldw	r3,1188(sp)
   89c24:	1880030b 	ldhu	r2,12(r3)
   89c28:	1080100c 	andi	r2,r2,64
   89c2c:	10bfffcc 	andi	r2,r2,65535
   89c30:	10a0001c 	xori	r2,r2,32768
   89c34:	10a00004 	addi	r2,r2,-32768
   89c38:	10000226 	beq	r2,zero,89c44 <___vfprintf_internal_r+0x670>
   89c3c:	00bfffc4 	movi	r2,-1
   89c40:	d8812c15 	stw	r2,1200(sp)
   89c44:	d8812c17 	ldw	r2,1200(sp)
   89c48:	dfc14617 	ldw	ra,1304(sp)
   89c4c:	df014517 	ldw	fp,1300(sp)
   89c50:	ddc14417 	ldw	r23,1296(sp)
   89c54:	dd814317 	ldw	r22,1292(sp)
   89c58:	dd414217 	ldw	r21,1288(sp)
   89c5c:	dd014117 	ldw	r20,1284(sp)
   89c60:	dcc14017 	ldw	r19,1280(sp)
   89c64:	dc813f17 	ldw	r18,1276(sp)
   89c68:	dc413e17 	ldw	r17,1272(sp)
   89c6c:	dc013d17 	ldw	r16,1268(sp)
   89c70:	dec14704 	addi	sp,sp,1308
   89c74:	f800283a 	ret
   89c78:	d9412917 	ldw	r5,1188(sp)
   89c7c:	8809883a 	mov	r4,r17
   89c80:	d9811b04 	addi	r6,sp,1132
   89c84:	00895a00 	call	895a0 <__sprint_r>
   89c88:	103fe51e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   89c8c:	da400404 	addi	r9,sp,16
   89c90:	003e9d06 	br	89708 <___vfprintf_internal_r+0x134>
   89c94:	008d11c0 	call	8d11c <__sinit>
   89c98:	003e6606 	br	89634 <___vfprintf_internal_r+0x60>
   89c9c:	d8812d17 	ldw	r2,1204(sp)
   89ca0:	0007883a 	mov	r3,zero
   89ca4:	15c00017 	ldw	r23,0(r2)
   89ca8:	15800117 	ldw	r22,4(r2)
   89cac:	10800204 	addi	r2,r2,8
   89cb0:	d8812d15 	stw	r2,1204(sp)
   89cb4:	d8012585 	stb	zero,1174(sp)
   89cb8:	bd84b03a 	or	r2,r23,r22
   89cbc:	003f1c06 	br	89930 <___vfprintf_internal_r+0x35c>
   89cc0:	d8c12d17 	ldw	r3,1204(sp)
   89cc4:	18800117 	ldw	r2,4(r3)
   89cc8:	1dc00017 	ldw	r23,0(r3)
   89ccc:	18c00204 	addi	r3,r3,8
   89cd0:	d8c12d15 	stw	r3,1204(sp)
   89cd4:	102d883a 	mov	r22,r2
   89cd8:	003f8606 	br	89af4 <___vfprintf_internal_r+0x520>
   89cdc:	d8c12d17 	ldw	r3,1204(sp)
   89ce0:	d9012d17 	ldw	r4,1204(sp)
   89ce4:	1dc00017 	ldw	r23,0(r3)
   89ce8:	1d800117 	ldw	r22,4(r3)
   89cec:	21000204 	addi	r4,r4,8
   89cf0:	00c00044 	movi	r3,1
   89cf4:	d9012d15 	stw	r4,1204(sp)
   89cf8:	bd84b03a 	or	r2,r23,r22
   89cfc:	d8012585 	stb	zero,1174(sp)
   89d00:	003f0b06 	br	89930 <___vfprintf_internal_r+0x35c>
   89d04:	d9812585 	stb	r6,1174(sp)
   89d08:	ac800007 	ldb	r18,0(r21)
   89d0c:	003e8f06 	br	8974c <___vfprintf_internal_r+0x178>
   89d10:	ac800007 	ldb	r18,0(r21)
   89d14:	a9000044 	addi	r4,r21,1
   89d18:	92857d26 	beq	r18,r10,8b310 <___vfprintf_internal_r+0x1d3c>
   89d1c:	90bff404 	addi	r2,r18,-48
   89d20:	0039883a 	mov	fp,zero
   89d24:	28800736 	bltu	r5,r2,89d44 <___vfprintf_internal_r+0x770>
   89d28:	24800007 	ldb	r18,0(r4)
   89d2c:	e70002a4 	muli	fp,fp,10
   89d30:	21000044 	addi	r4,r4,1
   89d34:	1739883a 	add	fp,r2,fp
   89d38:	90bff404 	addi	r2,r18,-48
   89d3c:	28bffa2e 	bgeu	r5,r2,89d28 <___vfprintf_internal_r+0x754>
   89d40:	e0044216 	blt	fp,zero,8ae4c <___vfprintf_internal_r+0x1878>
   89d44:	202b883a 	mov	r21,r4
   89d48:	003e8106 	br	89750 <___vfprintf_internal_r+0x17c>
   89d4c:	d8812587 	ldb	r2,1174(sp)
   89d50:	1003581e 	bne	r2,zero,8aab4 <___vfprintf_internal_r+0x14e0>
   89d54:	dac12585 	stb	r11,1174(sp)
   89d58:	ac800007 	ldb	r18,0(r21)
   89d5c:	003e7b06 	br	8974c <___vfprintf_internal_r+0x178>
   89d60:	84000054 	ori	r16,r16,1
   89d64:	ac800007 	ldb	r18,0(r21)
   89d68:	003e7806 	br	8974c <___vfprintf_internal_r+0x178>
   89d6c:	84002014 	ori	r16,r16,128
   89d70:	ac800007 	ldb	r18,0(r21)
   89d74:	003e7506 	br	8974c <___vfprintf_internal_r+0x178>
   89d78:	020002f4 	movhi	r8,11
   89d7c:	42365c04 	addi	r8,r8,-9872
   89d80:	da013615 	stw	r8,1240(sp)
   89d84:	8080080c 	andi	r2,r16,32
   89d88:	10009626 	beq	r2,zero,89fe4 <___vfprintf_internal_r+0xa10>
   89d8c:	d8812d17 	ldw	r2,1204(sp)
   89d90:	15c00017 	ldw	r23,0(r2)
   89d94:	15800117 	ldw	r22,4(r2)
   89d98:	10800204 	addi	r2,r2,8
   89d9c:	d8812d15 	stw	r2,1204(sp)
   89da0:	8080004c 	andi	r2,r16,1
   89da4:	1002ae26 	beq	r2,zero,8a860 <___vfprintf_internal_r+0x128c>
   89da8:	bd84b03a 	or	r2,r23,r22
   89dac:	10032a26 	beq	r2,zero,8aa58 <___vfprintf_internal_r+0x1484>
   89db0:	00c00c04 	movi	r3,48
   89db4:	d8c12505 	stb	r3,1172(sp)
   89db8:	dc812545 	stb	r18,1173(sp)
   89dbc:	84000094 	ori	r16,r16,2
   89dc0:	00c00084 	movi	r3,2
   89dc4:	d8012585 	stb	zero,1174(sp)
   89dc8:	003ed906 	br	89930 <___vfprintf_internal_r+0x35c>
   89dcc:	84001014 	ori	r16,r16,64
   89dd0:	ac800007 	ldb	r18,0(r21)
   89dd4:	003e5d06 	br	8974c <___vfprintf_internal_r+0x178>
   89dd8:	ac800007 	ldb	r18,0(r21)
   89ddc:	a805883a 	mov	r2,r21
   89de0:	91c43226 	beq	r18,r7,8aeac <___vfprintf_internal_r+0x18d8>
   89de4:	84000414 	ori	r16,r16,16
   89de8:	003e5806 	br	8974c <___vfprintf_internal_r+0x178>
   89dec:	d8c12d17 	ldw	r3,1204(sp)
   89df0:	02000044 	movi	r8,1
   89df4:	da012815 	stw	r8,1184(sp)
   89df8:	18800017 	ldw	r2,0(r3)
   89dfc:	18c00104 	addi	r3,r3,4
   89e00:	d8012585 	stb	zero,1174(sp)
   89e04:	d8810405 	stb	r2,1040(sp)
   89e08:	d8c12d15 	stw	r3,1204(sp)
   89e0c:	da012b15 	stw	r8,1196(sp)
   89e10:	dcc10404 	addi	r19,sp,1040
   89e14:	d8013115 	stw	zero,1220(sp)
   89e18:	003ee006 	br	8999c <___vfprintf_internal_r+0x3c8>
   89e1c:	8080080c 	andi	r2,r16,32
   89e20:	10031026 	beq	r2,zero,8aa64 <___vfprintf_internal_r+0x1490>
   89e24:	d9012d17 	ldw	r4,1204(sp)
   89e28:	da012c17 	ldw	r8,1200(sp)
   89e2c:	20800017 	ldw	r2,0(r4)
   89e30:	4007d7fa 	srai	r3,r8,31
   89e34:	21000104 	addi	r4,r4,4
   89e38:	d9012d15 	stw	r4,1204(sp)
   89e3c:	12000015 	stw	r8,0(r2)
   89e40:	10c00115 	stw	r3,4(r2)
   89e44:	003e1906 	br	896ac <___vfprintf_internal_r+0xd8>
   89e48:	da012d17 	ldw	r8,1204(sp)
   89e4c:	d9012d17 	ldw	r4,1204(sp)
   89e50:	42000017 	ldw	r8,0(r8)
   89e54:	20800104 	addi	r2,r4,4
   89e58:	da012e15 	stw	r8,1208(sp)
   89e5c:	403f2f16 	blt	r8,zero,89b1c <___vfprintf_internal_r+0x548>
   89e60:	d8812d15 	stw	r2,1204(sp)
   89e64:	ac800007 	ldb	r18,0(r21)
   89e68:	003e3806 	br	8974c <___vfprintf_internal_r+0x178>
   89e6c:	0009883a 	mov	r4,zero
   89e70:	90bff404 	addi	r2,r18,-48
   89e74:	ac800007 	ldb	r18,0(r21)
   89e78:	210002a4 	muli	r4,r4,10
   89e7c:	ad400044 	addi	r21,r21,1
   89e80:	2089883a 	add	r4,r4,r2
   89e84:	90bff404 	addi	r2,r18,-48
   89e88:	28bffa2e 	bgeu	r5,r2,89e74 <___vfprintf_internal_r+0x8a0>
   89e8c:	d9012e15 	stw	r4,1208(sp)
   89e90:	003e2f06 	br	89750 <___vfprintf_internal_r+0x17c>
   89e94:	8080020c 	andi	r2,r16,8
   89e98:	1002d426 	beq	r2,zero,8a9ec <___vfprintf_internal_r+0x1418>
   89e9c:	d8c12d17 	ldw	r3,1204(sp)
   89ea0:	1d800017 	ldw	r22,0(r3)
   89ea4:	1d000117 	ldw	r20,4(r3)
   89ea8:	18c00204 	addi	r3,r3,8
   89eac:	d8c12d15 	stw	r3,1204(sp)
   89eb0:	dd813315 	stw	r22,1228(sp)
   89eb4:	dd013415 	stw	r20,1232(sp)
   89eb8:	b009883a 	mov	r4,r22
   89ebc:	a00b883a 	mov	r5,r20
   89ec0:	da413c15 	stw	r9,1264(sp)
   89ec4:	008f7fc0 	call	8f7fc <__isinfd>
   89ec8:	da413c17 	ldw	r9,1264(sp)
   89ecc:	b009883a 	mov	r4,r22
   89ed0:	a00b883a 	mov	r5,r20
   89ed4:	10035726 	beq	r2,zero,8ac34 <___vfprintf_internal_r+0x1660>
   89ed8:	000d883a 	mov	r6,zero
   89edc:	000f883a 	mov	r7,zero
   89ee0:	00880080 	call	88008 <__ltdf2>
   89ee4:	da413c17 	ldw	r9,1264(sp)
   89ee8:	10041b16 	blt	r2,zero,8af58 <___vfprintf_internal_r+0x1984>
   89eec:	d8812583 	ldbu	r2,1174(sp)
   89ef0:	00c011c4 	movi	r3,71
   89ef4:	1c830b16 	blt	r3,r18,8ab24 <___vfprintf_internal_r+0x1550>
   89ef8:	04c002f4 	movhi	r19,11
   89efc:	9cf65804 	addi	r19,r19,-9888
   89f00:	020000c4 	movi	r8,3
   89f04:	00ffdfc4 	movi	r3,-129
   89f08:	da012815 	stw	r8,1184(sp)
   89f0c:	80e0703a 	and	r16,r16,r3
   89f10:	da012b15 	stw	r8,1196(sp)
   89f14:	d8013115 	stw	zero,1220(sp)
   89f18:	003e9906 	br	89980 <___vfprintf_internal_r+0x3ac>
   89f1c:	d8812d17 	ldw	r2,1204(sp)
   89f20:	d8c12d17 	ldw	r3,1204(sp)
   89f24:	020002f4 	movhi	r8,11
   89f28:	42366104 	addi	r8,r8,-9852
   89f2c:	15c00017 	ldw	r23,0(r2)
   89f30:	00800c04 	movi	r2,48
   89f34:	18c00104 	addi	r3,r3,4
   89f38:	d8812505 	stb	r2,1172(sp)
   89f3c:	00801e04 	movi	r2,120
   89f40:	d8812545 	stb	r2,1173(sp)
   89f44:	d8c12d15 	stw	r3,1204(sp)
   89f48:	002d883a 	mov	r22,zero
   89f4c:	84000094 	ori	r16,r16,2
   89f50:	da013615 	stw	r8,1240(sp)
   89f54:	00c00084 	movi	r3,2
   89f58:	04801e04 	movi	r18,120
   89f5c:	b805883a 	mov	r2,r23
   89f60:	d8012585 	stb	zero,1174(sp)
   89f64:	003e7206 	br	89930 <___vfprintf_internal_r+0x35c>
   89f68:	84000814 	ori	r16,r16,32
   89f6c:	ac800007 	ldb	r18,0(r21)
   89f70:	003df606 	br	8974c <___vfprintf_internal_r+0x178>
   89f74:	d8812d17 	ldw	r2,1204(sp)
   89f78:	d8012585 	stb	zero,1174(sp)
   89f7c:	14c00017 	ldw	r19,0(r2)
   89f80:	15c00104 	addi	r23,r2,4
   89f84:	98040126 	beq	r19,zero,8af8c <___vfprintf_internal_r+0x19b8>
   89f88:	9809883a 	mov	r4,r19
   89f8c:	e003dd16 	blt	fp,zero,8af04 <___vfprintf_internal_r+0x1930>
   89f90:	000b883a 	mov	r5,zero
   89f94:	e00d883a 	mov	r6,fp
   89f98:	da413c15 	stw	r9,1264(sp)
   89f9c:	008e0380 	call	8e038 <memchr>
   89fa0:	da413c17 	ldw	r9,1264(sp)
   89fa4:	10042e26 	beq	r2,zero,8b060 <___vfprintf_internal_r+0x1a8c>
   89fa8:	14c5c83a 	sub	r2,r2,r19
   89fac:	d8812b15 	stw	r2,1196(sp)
   89fb0:	e083790e 	bge	fp,r2,8ad98 <___vfprintf_internal_r+0x17c4>
   89fb4:	df012815 	stw	fp,1184(sp)
   89fb8:	e0049516 	blt	fp,zero,8b210 <___vfprintf_internal_r+0x1c3c>
   89fbc:	d8812583 	ldbu	r2,1174(sp)
   89fc0:	df012b15 	stw	fp,1196(sp)
   89fc4:	ddc12d15 	stw	r23,1204(sp)
   89fc8:	d8013115 	stw	zero,1220(sp)
   89fcc:	003e6c06 	br	89980 <___vfprintf_internal_r+0x3ac>
   89fd0:	020002f4 	movhi	r8,11
   89fd4:	42366104 	addi	r8,r8,-9852
   89fd8:	da013615 	stw	r8,1240(sp)
   89fdc:	8080080c 	andi	r2,r16,32
   89fe0:	103f6a1e 	bne	r2,zero,89d8c <___vfprintf_internal_r+0x7b8>
   89fe4:	8080040c 	andi	r2,r16,16
   89fe8:	10029326 	beq	r2,zero,8aa38 <___vfprintf_internal_r+0x1464>
   89fec:	d8c12d17 	ldw	r3,1204(sp)
   89ff0:	002d883a 	mov	r22,zero
   89ff4:	1dc00017 	ldw	r23,0(r3)
   89ff8:	18c00104 	addi	r3,r3,4
   89ffc:	d8c12d15 	stw	r3,1204(sp)
   8a000:	003f6706 	br	89da0 <___vfprintf_internal_r+0x7cc>
   8a004:	84000214 	ori	r16,r16,8
   8a008:	ac800007 	ldb	r18,0(r21)
   8a00c:	003dcf06 	br	8974c <___vfprintf_internal_r+0x178>
   8a010:	da011d17 	ldw	r8,1140(sp)
   8a014:	d8c11c17 	ldw	r3,1136(sp)
   8a018:	d8812587 	ldb	r2,1174(sp)
   8a01c:	10000b26 	beq	r2,zero,8a04c <___vfprintf_internal_r+0xa78>
   8a020:	d8812584 	addi	r2,sp,1174
   8a024:	48800015 	stw	r2,0(r9)
   8a028:	00800044 	movi	r2,1
   8a02c:	48800115 	stw	r2,4(r9)
   8a030:	4091883a 	add	r8,r8,r2
   8a034:	1887883a 	add	r3,r3,r2
   8a038:	da011d15 	stw	r8,1140(sp)
   8a03c:	d8c11c15 	stw	r3,1136(sp)
   8a040:	008001c4 	movi	r2,7
   8a044:	10c18516 	blt	r2,r3,8a65c <___vfprintf_internal_r+0x1088>
   8a048:	4a400204 	addi	r9,r9,8
   8a04c:	d9012a17 	ldw	r4,1192(sp)
   8a050:	20000b26 	beq	r4,zero,8a080 <___vfprintf_internal_r+0xaac>
   8a054:	d8812504 	addi	r2,sp,1172
   8a058:	48800015 	stw	r2,0(r9)
   8a05c:	00800084 	movi	r2,2
   8a060:	48800115 	stw	r2,4(r9)
   8a064:	4091883a 	add	r8,r8,r2
   8a068:	18c00044 	addi	r3,r3,1
   8a06c:	da011d15 	stw	r8,1140(sp)
   8a070:	d8c11c15 	stw	r3,1136(sp)
   8a074:	008001c4 	movi	r2,7
   8a078:	10c18116 	blt	r2,r3,8a680 <___vfprintf_internal_r+0x10ac>
   8a07c:	4a400204 	addi	r9,r9,8
   8a080:	d9012f17 	ldw	r4,1212(sp)
   8a084:	00802004 	movi	r2,128
   8a088:	2080fc26 	beq	r4,r2,8a47c <___vfprintf_internal_r+0xea8>
   8a08c:	d8813117 	ldw	r2,1220(sp)
   8a090:	d9012b17 	ldw	r4,1196(sp)
   8a094:	112fc83a 	sub	r23,r2,r4
   8a098:	05c02a0e 	bge	zero,r23,8a144 <___vfprintf_internal_r+0xb70>
   8a09c:	07000404 	movi	fp,16
   8a0a0:	050002f4 	movhi	r20,11
   8a0a4:	a5366c84 	addi	r20,r20,-9806
   8a0a8:	e5c01d0e 	bge	fp,r23,8a120 <___vfprintf_internal_r+0xb4c>
   8a0ac:	dc812a15 	stw	r18,1192(sp)
   8a0b0:	058001c4 	movi	r22,7
   8a0b4:	a025883a 	mov	r18,r20
   8a0b8:	8029883a 	mov	r20,r16
   8a0bc:	dc012917 	ldw	r16,1188(sp)
   8a0c0:	00000306 	br	8a0d0 <___vfprintf_internal_r+0xafc>
   8a0c4:	bdfffc04 	addi	r23,r23,-16
   8a0c8:	4a400204 	addi	r9,r9,8
   8a0cc:	e5c0110e 	bge	fp,r23,8a114 <___vfprintf_internal_r+0xb40>
   8a0d0:	4c800015 	stw	r18,0(r9)
   8a0d4:	4f000115 	stw	fp,4(r9)
   8a0d8:	42000404 	addi	r8,r8,16
   8a0dc:	18c00044 	addi	r3,r3,1
   8a0e0:	da011d15 	stw	r8,1140(sp)
   8a0e4:	d8c11c15 	stw	r3,1136(sp)
   8a0e8:	b0fff60e 	bge	r22,r3,8a0c4 <___vfprintf_internal_r+0xaf0>
   8a0ec:	8809883a 	mov	r4,r17
   8a0f0:	800b883a 	mov	r5,r16
   8a0f4:	d9811b04 	addi	r6,sp,1132
   8a0f8:	00895a00 	call	895a0 <__sprint_r>
   8a0fc:	103ec81e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a100:	bdfffc04 	addi	r23,r23,-16
   8a104:	da011d17 	ldw	r8,1140(sp)
   8a108:	d8c11c17 	ldw	r3,1136(sp)
   8a10c:	da400404 	addi	r9,sp,16
   8a110:	e5ffef16 	blt	fp,r23,8a0d0 <___vfprintf_internal_r+0xafc>
   8a114:	a021883a 	mov	r16,r20
   8a118:	9029883a 	mov	r20,r18
   8a11c:	dc812a17 	ldw	r18,1192(sp)
   8a120:	4d000015 	stw	r20,0(r9)
   8a124:	4dc00115 	stw	r23,4(r9)
   8a128:	45d1883a 	add	r8,r8,r23
   8a12c:	18c00044 	addi	r3,r3,1
   8a130:	da011d15 	stw	r8,1140(sp)
   8a134:	d8c11c15 	stw	r3,1136(sp)
   8a138:	008001c4 	movi	r2,7
   8a13c:	10c13e16 	blt	r2,r3,8a638 <___vfprintf_internal_r+0x1064>
   8a140:	4a400204 	addi	r9,r9,8
   8a144:	8080400c 	andi	r2,r16,256
   8a148:	1000831e 	bne	r2,zero,8a358 <___vfprintf_internal_r+0xd84>
   8a14c:	d8812b17 	ldw	r2,1196(sp)
   8a150:	4cc00015 	stw	r19,0(r9)
   8a154:	48800115 	stw	r2,4(r9)
   8a158:	4091883a 	add	r8,r8,r2
   8a15c:	18c00044 	addi	r3,r3,1
   8a160:	da011d15 	stw	r8,1140(sp)
   8a164:	d8c11c15 	stw	r3,1136(sp)
   8a168:	008001c4 	movi	r2,7
   8a16c:	10c05316 	blt	r2,r3,8a2bc <___vfprintf_internal_r+0xce8>
   8a170:	4a400204 	addi	r9,r9,8
   8a174:	8400010c 	andi	r16,r16,4
   8a178:	80002e26 	beq	r16,zero,8a234 <___vfprintf_internal_r+0xc60>
   8a17c:	d8812e17 	ldw	r2,1208(sp)
   8a180:	d8c12817 	ldw	r3,1184(sp)
   8a184:	10e1c83a 	sub	r16,r2,r3
   8a188:	04002a0e 	bge	zero,r16,8a234 <___vfprintf_internal_r+0xc60>
   8a18c:	04800404 	movi	r18,16
   8a190:	d8c11c17 	ldw	r3,1136(sp)
   8a194:	05c002f4 	movhi	r23,11
   8a198:	bdf66884 	addi	r23,r23,-9822
   8a19c:	9400170e 	bge	r18,r16,8a1fc <___vfprintf_internal_r+0xc28>
   8a1a0:	04c001c4 	movi	r19,7
   8a1a4:	dd012917 	ldw	r20,1188(sp)
   8a1a8:	00000306 	br	8a1b8 <___vfprintf_internal_r+0xbe4>
   8a1ac:	843ffc04 	addi	r16,r16,-16
   8a1b0:	4a400204 	addi	r9,r9,8
   8a1b4:	9400110e 	bge	r18,r16,8a1fc <___vfprintf_internal_r+0xc28>
   8a1b8:	4dc00015 	stw	r23,0(r9)
   8a1bc:	4c800115 	stw	r18,4(r9)
   8a1c0:	42000404 	addi	r8,r8,16
   8a1c4:	18c00044 	addi	r3,r3,1
   8a1c8:	da011d15 	stw	r8,1140(sp)
   8a1cc:	d8c11c15 	stw	r3,1136(sp)
   8a1d0:	98fff60e 	bge	r19,r3,8a1ac <___vfprintf_internal_r+0xbd8>
   8a1d4:	8809883a 	mov	r4,r17
   8a1d8:	a00b883a 	mov	r5,r20
   8a1dc:	d9811b04 	addi	r6,sp,1132
   8a1e0:	00895a00 	call	895a0 <__sprint_r>
   8a1e4:	103e8e1e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a1e8:	843ffc04 	addi	r16,r16,-16
   8a1ec:	da011d17 	ldw	r8,1140(sp)
   8a1f0:	d8c11c17 	ldw	r3,1136(sp)
   8a1f4:	da400404 	addi	r9,sp,16
   8a1f8:	943fef16 	blt	r18,r16,8a1b8 <___vfprintf_internal_r+0xbe4>
   8a1fc:	4dc00015 	stw	r23,0(r9)
   8a200:	4c000115 	stw	r16,4(r9)
   8a204:	8211883a 	add	r8,r16,r8
   8a208:	18c00044 	addi	r3,r3,1
   8a20c:	da011d15 	stw	r8,1140(sp)
   8a210:	d8c11c15 	stw	r3,1136(sp)
   8a214:	008001c4 	movi	r2,7
   8a218:	10c0060e 	bge	r2,r3,8a234 <___vfprintf_internal_r+0xc60>
   8a21c:	d9412917 	ldw	r5,1188(sp)
   8a220:	8809883a 	mov	r4,r17
   8a224:	d9811b04 	addi	r6,sp,1132
   8a228:	00895a00 	call	895a0 <__sprint_r>
   8a22c:	103e7c1e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a230:	da011d17 	ldw	r8,1140(sp)
   8a234:	dd012817 	ldw	r20,1184(sp)
   8a238:	d9012e17 	ldw	r4,1208(sp)
   8a23c:	a100010e 	bge	r20,r4,8a244 <___vfprintf_internal_r+0xc70>
   8a240:	2029883a 	mov	r20,r4
   8a244:	d8812c17 	ldw	r2,1200(sp)
   8a248:	1505883a 	add	r2,r2,r20
   8a24c:	d8812c15 	stw	r2,1200(sp)
   8a250:	4000b91e 	bne	r8,zero,8a538 <___vfprintf_internal_r+0xf64>
   8a254:	d8011c15 	stw	zero,1136(sp)
   8a258:	a8800007 	ldb	r2,0(r21)
   8a25c:	da400404 	addi	r9,sp,16
   8a260:	103d141e 	bne	r2,zero,896b4 <___vfprintf_internal_r+0xe0>
   8a264:	a825883a 	mov	r18,r21
   8a268:	003d2a06 	br	89714 <___vfprintf_internal_r+0x140>
   8a26c:	d9412917 	ldw	r5,1188(sp)
   8a270:	8809883a 	mov	r4,r17
   8a274:	d9811b04 	addi	r6,sp,1132
   8a278:	00895a00 	call	895a0 <__sprint_r>
   8a27c:	103e681e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a280:	da011d17 	ldw	r8,1140(sp)
   8a284:	da400404 	addi	r9,sp,16
   8a288:	8080004c 	andi	r2,r16,1
   8a28c:	103fb926 	beq	r2,zero,8a174 <___vfprintf_internal_r+0xba0>
   8a290:	d8c11c17 	ldw	r3,1136(sp)
   8a294:	d9013717 	ldw	r4,1244(sp)
   8a298:	00800044 	movi	r2,1
   8a29c:	48800115 	stw	r2,4(r9)
   8a2a0:	49000015 	stw	r4,0(r9)
   8a2a4:	4091883a 	add	r8,r8,r2
   8a2a8:	1887883a 	add	r3,r3,r2
   8a2ac:	da011d15 	stw	r8,1140(sp)
   8a2b0:	d8c11c15 	stw	r3,1136(sp)
   8a2b4:	008001c4 	movi	r2,7
   8a2b8:	10ffad0e 	bge	r2,r3,8a170 <___vfprintf_internal_r+0xb9c>
   8a2bc:	d9412917 	ldw	r5,1188(sp)
   8a2c0:	8809883a 	mov	r4,r17
   8a2c4:	d9811b04 	addi	r6,sp,1132
   8a2c8:	00895a00 	call	895a0 <__sprint_r>
   8a2cc:	103e541e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a2d0:	da400404 	addi	r9,sp,16
   8a2d4:	da011d17 	ldw	r8,1140(sp)
   8a2d8:	003fa606 	br	8a174 <___vfprintf_internal_r+0xba0>
   8a2dc:	18803fcc 	andi	r2,r3,255
   8a2e0:	00c00044 	movi	r3,1
   8a2e4:	10c10126 	beq	r2,r3,8a6ec <___vfprintf_internal_r+0x1118>
   8a2e8:	00c00084 	movi	r3,2
   8a2ec:	10c0f026 	beq	r2,r3,8a6b0 <___vfprintf_internal_r+0x10dc>
   8a2f0:	d8c10dc4 	addi	r3,sp,1079
   8a2f4:	b808d0fa 	srli	r4,r23,3
   8a2f8:	b00a977a 	slli	r5,r22,29
   8a2fc:	b02cd0fa 	srli	r22,r22,3
   8a300:	bdc001cc 	andi	r23,r23,7
   8a304:	b8800c04 	addi	r2,r23,48
   8a308:	292eb03a 	or	r23,r5,r4
   8a30c:	18800005 	stb	r2,0(r3)
   8a310:	bd88b03a 	or	r4,r23,r22
   8a314:	1827883a 	mov	r19,r3
   8a318:	18ffffc4 	addi	r3,r3,-1
   8a31c:	203ff51e 	bne	r4,zero,8a2f4 <___vfprintf_internal_r+0xd20>
   8a320:	8100004c 	andi	r4,r16,1
   8a324:	980b883a 	mov	r5,r19
   8a328:	20000726 	beq	r4,zero,8a348 <___vfprintf_internal_r+0xd74>
   8a32c:	10803fcc 	andi	r2,r2,255
   8a330:	1080201c 	xori	r2,r2,128
   8a334:	10bfe004 	addi	r2,r2,-128
   8a338:	01000c04 	movi	r4,48
   8a33c:	11000226 	beq	r2,r4,8a348 <___vfprintf_internal_r+0xd74>
   8a340:	1827883a 	mov	r19,r3
   8a344:	293fffc5 	stb	r4,-1(r5)
   8a348:	d8812717 	ldw	r2,1180(sp)
   8a34c:	14c5c83a 	sub	r2,r2,r19
   8a350:	d8812b15 	stw	r2,1196(sp)
   8a354:	003d8406 	br	89968 <___vfprintf_internal_r+0x394>
   8a358:	00801944 	movi	r2,101
   8a35c:	14807c0e 	bge	r2,r18,8a550 <___vfprintf_internal_r+0xf7c>
   8a360:	d9013317 	ldw	r4,1228(sp)
   8a364:	d9413417 	ldw	r5,1232(sp)
   8a368:	000d883a 	mov	r6,zero
   8a36c:	000f883a 	mov	r7,zero
   8a370:	d8c13b15 	stw	r3,1260(sp)
   8a374:	da013a15 	stw	r8,1256(sp)
   8a378:	da413c15 	stw	r9,1264(sp)
   8a37c:	00909ec0 	call	909ec <__eqdf2>
   8a380:	d8c13b17 	ldw	r3,1260(sp)
   8a384:	da013a17 	ldw	r8,1256(sp)
   8a388:	da413c17 	ldw	r9,1264(sp)
   8a38c:	1001001e 	bne	r2,zero,8a790 <___vfprintf_internal_r+0x11bc>
   8a390:	008002f4 	movhi	r2,11
   8a394:	10b66804 	addi	r2,r2,-9824
   8a398:	48800015 	stw	r2,0(r9)
   8a39c:	00800044 	movi	r2,1
   8a3a0:	48800115 	stw	r2,4(r9)
   8a3a4:	4091883a 	add	r8,r8,r2
   8a3a8:	1887883a 	add	r3,r3,r2
   8a3ac:	da011d15 	stw	r8,1140(sp)
   8a3b0:	d8c11c15 	stw	r3,1136(sp)
   8a3b4:	008001c4 	movi	r2,7
   8a3b8:	10c1dd16 	blt	r2,r3,8ab30 <___vfprintf_internal_r+0x155c>
   8a3bc:	4a400204 	addi	r9,r9,8
   8a3c0:	d8812417 	ldw	r2,1168(sp)
   8a3c4:	d8c13217 	ldw	r3,1224(sp)
   8a3c8:	10c00216 	blt	r2,r3,8a3d4 <___vfprintf_internal_r+0xe00>
   8a3cc:	8080004c 	andi	r2,r16,1
   8a3d0:	103f6826 	beq	r2,zero,8a174 <___vfprintf_internal_r+0xba0>
   8a3d4:	d8c11c17 	ldw	r3,1136(sp)
   8a3d8:	d9013717 	ldw	r4,1244(sp)
   8a3dc:	00800044 	movi	r2,1
   8a3e0:	48800115 	stw	r2,4(r9)
   8a3e4:	49000015 	stw	r4,0(r9)
   8a3e8:	4091883a 	add	r8,r8,r2
   8a3ec:	1887883a 	add	r3,r3,r2
   8a3f0:	da011d15 	stw	r8,1140(sp)
   8a3f4:	d8c11c15 	stw	r3,1136(sp)
   8a3f8:	008001c4 	movi	r2,7
   8a3fc:	10c2af16 	blt	r2,r3,8aebc <___vfprintf_internal_r+0x18e8>
   8a400:	4a400204 	addi	r9,r9,8
   8a404:	d8813217 	ldw	r2,1224(sp)
   8a408:	14bfffc4 	addi	r18,r2,-1
   8a40c:	04bf590e 	bge	zero,r18,8a174 <___vfprintf_internal_r+0xba0>
   8a410:	04c00404 	movi	r19,16
   8a414:	d8c11c17 	ldw	r3,1136(sp)
   8a418:	050002f4 	movhi	r20,11
   8a41c:	a5366c84 	addi	r20,r20,-9806
   8a420:	9c81630e 	bge	r19,r18,8a9b0 <___vfprintf_internal_r+0x13dc>
   8a424:	058001c4 	movi	r22,7
   8a428:	ddc12917 	ldw	r23,1188(sp)
   8a42c:	00000306 	br	8a43c <___vfprintf_internal_r+0xe68>
   8a430:	4a400204 	addi	r9,r9,8
   8a434:	94bffc04 	addi	r18,r18,-16
   8a438:	9c815d0e 	bge	r19,r18,8a9b0 <___vfprintf_internal_r+0x13dc>
   8a43c:	4d000015 	stw	r20,0(r9)
   8a440:	4cc00115 	stw	r19,4(r9)
   8a444:	42000404 	addi	r8,r8,16
   8a448:	18c00044 	addi	r3,r3,1
   8a44c:	da011d15 	stw	r8,1140(sp)
   8a450:	d8c11c15 	stw	r3,1136(sp)
   8a454:	b0fff60e 	bge	r22,r3,8a430 <___vfprintf_internal_r+0xe5c>
   8a458:	8809883a 	mov	r4,r17
   8a45c:	b80b883a 	mov	r5,r23
   8a460:	d9811b04 	addi	r6,sp,1132
   8a464:	00895a00 	call	895a0 <__sprint_r>
   8a468:	103ded1e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a46c:	da011d17 	ldw	r8,1140(sp)
   8a470:	d8c11c17 	ldw	r3,1136(sp)
   8a474:	da400404 	addi	r9,sp,16
   8a478:	003fee06 	br	8a434 <___vfprintf_internal_r+0xe60>
   8a47c:	d8812e17 	ldw	r2,1208(sp)
   8a480:	d9012817 	ldw	r4,1184(sp)
   8a484:	112fc83a 	sub	r23,r2,r4
   8a488:	05ff000e 	bge	zero,r23,8a08c <___vfprintf_internal_r+0xab8>
   8a48c:	07000404 	movi	fp,16
   8a490:	050002f4 	movhi	r20,11
   8a494:	a5366c84 	addi	r20,r20,-9806
   8a498:	e5c01d0e 	bge	fp,r23,8a510 <___vfprintf_internal_r+0xf3c>
   8a49c:	dc812a15 	stw	r18,1192(sp)
   8a4a0:	058001c4 	movi	r22,7
   8a4a4:	a025883a 	mov	r18,r20
   8a4a8:	8029883a 	mov	r20,r16
   8a4ac:	dc012917 	ldw	r16,1188(sp)
   8a4b0:	00000306 	br	8a4c0 <___vfprintf_internal_r+0xeec>
   8a4b4:	bdfffc04 	addi	r23,r23,-16
   8a4b8:	4a400204 	addi	r9,r9,8
   8a4bc:	e5c0110e 	bge	fp,r23,8a504 <___vfprintf_internal_r+0xf30>
   8a4c0:	4c800015 	stw	r18,0(r9)
   8a4c4:	4f000115 	stw	fp,4(r9)
   8a4c8:	42000404 	addi	r8,r8,16
   8a4cc:	18c00044 	addi	r3,r3,1
   8a4d0:	da011d15 	stw	r8,1140(sp)
   8a4d4:	d8c11c15 	stw	r3,1136(sp)
   8a4d8:	b0fff60e 	bge	r22,r3,8a4b4 <___vfprintf_internal_r+0xee0>
   8a4dc:	8809883a 	mov	r4,r17
   8a4e0:	800b883a 	mov	r5,r16
   8a4e4:	d9811b04 	addi	r6,sp,1132
   8a4e8:	00895a00 	call	895a0 <__sprint_r>
   8a4ec:	103dcc1e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a4f0:	bdfffc04 	addi	r23,r23,-16
   8a4f4:	da011d17 	ldw	r8,1140(sp)
   8a4f8:	d8c11c17 	ldw	r3,1136(sp)
   8a4fc:	da400404 	addi	r9,sp,16
   8a500:	e5ffef16 	blt	fp,r23,8a4c0 <___vfprintf_internal_r+0xeec>
   8a504:	a021883a 	mov	r16,r20
   8a508:	9029883a 	mov	r20,r18
   8a50c:	dc812a17 	ldw	r18,1192(sp)
   8a510:	4d000015 	stw	r20,0(r9)
   8a514:	4dc00115 	stw	r23,4(r9)
   8a518:	45d1883a 	add	r8,r8,r23
   8a51c:	18c00044 	addi	r3,r3,1
   8a520:	da011d15 	stw	r8,1140(sp)
   8a524:	d8c11c15 	stw	r3,1136(sp)
   8a528:	008001c4 	movi	r2,7
   8a52c:	10c11716 	blt	r2,r3,8a98c <___vfprintf_internal_r+0x13b8>
   8a530:	4a400204 	addi	r9,r9,8
   8a534:	003ed506 	br	8a08c <___vfprintf_internal_r+0xab8>
   8a538:	d9412917 	ldw	r5,1188(sp)
   8a53c:	8809883a 	mov	r4,r17
   8a540:	d9811b04 	addi	r6,sp,1132
   8a544:	00895a00 	call	895a0 <__sprint_r>
   8a548:	103f4226 	beq	r2,zero,8a254 <___vfprintf_internal_r+0xc80>
   8a54c:	003db406 	br	89c20 <___vfprintf_internal_r+0x64c>
   8a550:	d9013217 	ldw	r4,1224(sp)
   8a554:	00800044 	movi	r2,1
   8a558:	4cc00015 	stw	r19,0(r9)
   8a55c:	1100e10e 	bge	r2,r4,8a8e4 <___vfprintf_internal_r+0x1310>
   8a560:	00800044 	movi	r2,1
   8a564:	48800115 	stw	r2,4(r9)
   8a568:	4091883a 	add	r8,r8,r2
   8a56c:	1887883a 	add	r3,r3,r2
   8a570:	da011d15 	stw	r8,1140(sp)
   8a574:	d8c11c15 	stw	r3,1136(sp)
   8a578:	008001c4 	movi	r2,7
   8a57c:	10c0ed16 	blt	r2,r3,8a934 <___vfprintf_internal_r+0x1360>
   8a580:	4a400204 	addi	r9,r9,8
   8a584:	d8813717 	ldw	r2,1244(sp)
   8a588:	48800015 	stw	r2,0(r9)
   8a58c:	00800044 	movi	r2,1
   8a590:	48800115 	stw	r2,4(r9)
   8a594:	4091883a 	add	r8,r8,r2
   8a598:	1887883a 	add	r3,r3,r2
   8a59c:	da011d15 	stw	r8,1140(sp)
   8a5a0:	d8c11c15 	stw	r3,1136(sp)
   8a5a4:	008001c4 	movi	r2,7
   8a5a8:	10c0eb16 	blt	r2,r3,8a958 <___vfprintf_internal_r+0x1384>
   8a5ac:	4c800204 	addi	r18,r9,8
   8a5b0:	d9013317 	ldw	r4,1228(sp)
   8a5b4:	d9413417 	ldw	r5,1232(sp)
   8a5b8:	000d883a 	mov	r6,zero
   8a5bc:	000f883a 	mov	r7,zero
   8a5c0:	d8c13b15 	stw	r3,1260(sp)
   8a5c4:	da013a15 	stw	r8,1256(sp)
   8a5c8:	0090a480 	call	90a48 <__nedf2>
   8a5cc:	d8c13b17 	ldw	r3,1260(sp)
   8a5d0:	da013a17 	ldw	r8,1256(sp)
   8a5d4:	1000a626 	beq	r2,zero,8a870 <___vfprintf_internal_r+0x129c>
   8a5d8:	d9013217 	ldw	r4,1224(sp)
   8a5dc:	9cc00044 	addi	r19,r19,1
   8a5e0:	94c00015 	stw	r19,0(r18)
   8a5e4:	20bfffc4 	addi	r2,r4,-1
   8a5e8:	90800115 	stw	r2,4(r18)
   8a5ec:	4091883a 	add	r8,r8,r2
   8a5f0:	18c00044 	addi	r3,r3,1
   8a5f4:	da011d15 	stw	r8,1140(sp)
   8a5f8:	d8c11c15 	stw	r3,1136(sp)
   8a5fc:	008001c4 	movi	r2,7
   8a600:	10c0c316 	blt	r2,r3,8a910 <___vfprintf_internal_r+0x133c>
   8a604:	94800204 	addi	r18,r18,8
   8a608:	d9013517 	ldw	r4,1236(sp)
   8a60c:	d8811fc4 	addi	r2,sp,1151
   8a610:	90800015 	stw	r2,0(r18)
   8a614:	91000115 	stw	r4,4(r18)
   8a618:	4111883a 	add	r8,r8,r4
   8a61c:	18c00044 	addi	r3,r3,1
   8a620:	da011d15 	stw	r8,1140(sp)
   8a624:	d8c11c15 	stw	r3,1136(sp)
   8a628:	008001c4 	movi	r2,7
   8a62c:	10ff2316 	blt	r2,r3,8a2bc <___vfprintf_internal_r+0xce8>
   8a630:	92400204 	addi	r9,r18,8
   8a634:	003ecf06 	br	8a174 <___vfprintf_internal_r+0xba0>
   8a638:	d9412917 	ldw	r5,1188(sp)
   8a63c:	8809883a 	mov	r4,r17
   8a640:	d9811b04 	addi	r6,sp,1132
   8a644:	00895a00 	call	895a0 <__sprint_r>
   8a648:	103d751e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a64c:	da011d17 	ldw	r8,1140(sp)
   8a650:	d8c11c17 	ldw	r3,1136(sp)
   8a654:	da400404 	addi	r9,sp,16
   8a658:	003eba06 	br	8a144 <___vfprintf_internal_r+0xb70>
   8a65c:	d9412917 	ldw	r5,1188(sp)
   8a660:	8809883a 	mov	r4,r17
   8a664:	d9811b04 	addi	r6,sp,1132
   8a668:	00895a00 	call	895a0 <__sprint_r>
   8a66c:	103d6c1e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a670:	da011d17 	ldw	r8,1140(sp)
   8a674:	d8c11c17 	ldw	r3,1136(sp)
   8a678:	da400404 	addi	r9,sp,16
   8a67c:	003e7306 	br	8a04c <___vfprintf_internal_r+0xa78>
   8a680:	d9412917 	ldw	r5,1188(sp)
   8a684:	8809883a 	mov	r4,r17
   8a688:	d9811b04 	addi	r6,sp,1132
   8a68c:	00895a00 	call	895a0 <__sprint_r>
   8a690:	103d631e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a694:	da011d17 	ldw	r8,1140(sp)
   8a698:	d8c11c17 	ldw	r3,1136(sp)
   8a69c:	da400404 	addi	r9,sp,16
   8a6a0:	003e7706 	br	8a080 <___vfprintf_internal_r+0xaac>
   8a6a4:	d8012b15 	stw	zero,1196(sp)
   8a6a8:	dcc10e04 	addi	r19,sp,1080
   8a6ac:	003cae06 	br	89968 <___vfprintf_internal_r+0x394>
   8a6b0:	d9413617 	ldw	r5,1240(sp)
   8a6b4:	d8810dc4 	addi	r2,sp,1079
   8a6b8:	b8c003cc 	andi	r3,r23,15
   8a6bc:	b008973a 	slli	r4,r22,28
   8a6c0:	28c7883a 	add	r3,r5,r3
   8a6c4:	b82ed13a 	srli	r23,r23,4
   8a6c8:	18c00003 	ldbu	r3,0(r3)
   8a6cc:	b02cd13a 	srli	r22,r22,4
   8a6d0:	25eeb03a 	or	r23,r4,r23
   8a6d4:	10c00005 	stb	r3,0(r2)
   8a6d8:	bd86b03a 	or	r3,r23,r22
   8a6dc:	1027883a 	mov	r19,r2
   8a6e0:	10bfffc4 	addi	r2,r2,-1
   8a6e4:	183ff41e 	bne	r3,zero,8a6b8 <___vfprintf_internal_r+0x10e4>
   8a6e8:	003f1706 	br	8a348 <___vfprintf_internal_r+0xd74>
   8a6ec:	b0025826 	beq	r22,zero,8b050 <___vfprintf_internal_r+0x1a7c>
   8a6f0:	b807883a 	mov	r3,r23
   8a6f4:	d8810dc4 	addi	r2,sp,1079
   8a6f8:	882f883a 	mov	r23,r17
   8a6fc:	04c00244 	movi	r19,9
   8a700:	8023883a 	mov	r17,r16
   8a704:	da412815 	stw	r9,1184(sp)
   8a708:	1821883a 	mov	r16,r3
   8a70c:	8009883a 	mov	r4,r16
   8a710:	b00b883a 	mov	r5,r22
   8a714:	01800284 	movi	r6,10
   8a718:	000f883a 	mov	r7,zero
   8a71c:	1029883a 	mov	r20,r2
   8a720:	00904600 	call	90460 <__umoddi3>
   8a724:	10800c04 	addi	r2,r2,48
   8a728:	8009883a 	mov	r4,r16
   8a72c:	b00b883a 	mov	r5,r22
   8a730:	a0800005 	stb	r2,0(r20)
   8a734:	01800284 	movi	r6,10
   8a738:	000f883a 	mov	r7,zero
   8a73c:	008fe980 	call	8fe98 <__udivdi3>
   8a740:	1021883a 	mov	r16,r2
   8a744:	182d883a 	mov	r22,r3
   8a748:	a0bfffc4 	addi	r2,r20,-1
   8a74c:	183fef1e 	bne	r3,zero,8a70c <___vfprintf_internal_r+0x1138>
   8a750:	9c3fee36 	bltu	r19,r16,8a70c <___vfprintf_internal_r+0x1138>
   8a754:	da412817 	ldw	r9,1184(sp)
   8a758:	8005883a 	mov	r2,r16
   8a75c:	8821883a 	mov	r16,r17
   8a760:	b823883a 	mov	r17,r23
   8a764:	102f883a 	mov	r23,r2
   8a768:	d8812717 	ldw	r2,1180(sp)
   8a76c:	a4ffffc4 	addi	r19,r20,-1
   8a770:	bdc00c04 	addi	r23,r23,48
   8a774:	14c5c83a 	sub	r2,r2,r19
   8a778:	a5ffffc5 	stb	r23,-1(r20)
   8a77c:	d8812b15 	stw	r2,1196(sp)
   8a780:	003c7906 	br	89968 <___vfprintf_internal_r+0x394>
   8a784:	00c00044 	movi	r3,1
   8a788:	bd84b03a 	or	r2,r23,r22
   8a78c:	003c6806 	br	89930 <___vfprintf_internal_r+0x35c>
   8a790:	dc812417 	ldw	r18,1168(sp)
   8a794:	0480ee0e 	bge	zero,r18,8ab50 <___vfprintf_internal_r+0x157c>
   8a798:	d9013217 	ldw	r4,1224(sp)
   8a79c:	4cc00015 	stw	r19,0(r9)
   8a7a0:	9100c616 	blt	r18,r4,8aabc <___vfprintf_internal_r+0x14e8>
   8a7a4:	49000115 	stw	r4,4(r9)
   8a7a8:	4111883a 	add	r8,r8,r4
   8a7ac:	18c00044 	addi	r3,r3,1
   8a7b0:	da011d15 	stw	r8,1140(sp)
   8a7b4:	d8c11c15 	stw	r3,1136(sp)
   8a7b8:	008001c4 	movi	r2,7
   8a7bc:	10c20916 	blt	r2,r3,8afe4 <___vfprintf_internal_r+0x1a10>
   8a7c0:	4a400204 	addi	r9,r9,8
   8a7c4:	d8813217 	ldw	r2,1224(sp)
   8a7c8:	90a5c83a 	sub	r18,r18,r2
   8a7cc:	04beae0e 	bge	zero,r18,8a288 <___vfprintf_internal_r+0xcb4>
   8a7d0:	04c00404 	movi	r19,16
   8a7d4:	d8c11c17 	ldw	r3,1136(sp)
   8a7d8:	050002f4 	movhi	r20,11
   8a7dc:	a5366c84 	addi	r20,r20,-9806
   8a7e0:	9c81be0e 	bge	r19,r18,8aedc <___vfprintf_internal_r+0x1908>
   8a7e4:	058001c4 	movi	r22,7
   8a7e8:	ddc12917 	ldw	r23,1188(sp)
   8a7ec:	00000306 	br	8a7fc <___vfprintf_internal_r+0x1228>
   8a7f0:	4a400204 	addi	r9,r9,8
   8a7f4:	94bffc04 	addi	r18,r18,-16
   8a7f8:	9c81b80e 	bge	r19,r18,8aedc <___vfprintf_internal_r+0x1908>
   8a7fc:	4d000015 	stw	r20,0(r9)
   8a800:	4cc00115 	stw	r19,4(r9)
   8a804:	42000404 	addi	r8,r8,16
   8a808:	18c00044 	addi	r3,r3,1
   8a80c:	da011d15 	stw	r8,1140(sp)
   8a810:	d8c11c15 	stw	r3,1136(sp)
   8a814:	b0fff60e 	bge	r22,r3,8a7f0 <___vfprintf_internal_r+0x121c>
   8a818:	8809883a 	mov	r4,r17
   8a81c:	b80b883a 	mov	r5,r23
   8a820:	d9811b04 	addi	r6,sp,1132
   8a824:	00895a00 	call	895a0 <__sprint_r>
   8a828:	103cfd1e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a82c:	da011d17 	ldw	r8,1140(sp)
   8a830:	d8c11c17 	ldw	r3,1136(sp)
   8a834:	da400404 	addi	r9,sp,16
   8a838:	003fee06 	br	8a7f4 <___vfprintf_internal_r+0x1220>
   8a83c:	d9412917 	ldw	r5,1188(sp)
   8a840:	8809883a 	mov	r4,r17
   8a844:	d9811b04 	addi	r6,sp,1132
   8a848:	00895a00 	call	895a0 <__sprint_r>
   8a84c:	103cf41e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a850:	da011d17 	ldw	r8,1140(sp)
   8a854:	d8c11c17 	ldw	r3,1136(sp)
   8a858:	da400404 	addi	r9,sp,16
   8a85c:	003dee06 	br	8a018 <___vfprintf_internal_r+0xa44>
   8a860:	00c00084 	movi	r3,2
   8a864:	bd84b03a 	or	r2,r23,r22
   8a868:	d8012585 	stb	zero,1174(sp)
   8a86c:	003c3006 	br	89930 <___vfprintf_internal_r+0x35c>
   8a870:	d8813217 	ldw	r2,1224(sp)
   8a874:	14ffffc4 	addi	r19,r2,-1
   8a878:	04ff630e 	bge	zero,r19,8a608 <___vfprintf_internal_r+0x1034>
   8a87c:	05800404 	movi	r22,16
   8a880:	050002f4 	movhi	r20,11
   8a884:	a5366c84 	addi	r20,r20,-9806
   8a888:	b4c03c0e 	bge	r22,r19,8a97c <___vfprintf_internal_r+0x13a8>
   8a88c:	05c001c4 	movi	r23,7
   8a890:	df012917 	ldw	fp,1188(sp)
   8a894:	00000306 	br	8a8a4 <___vfprintf_internal_r+0x12d0>
   8a898:	94800204 	addi	r18,r18,8
   8a89c:	9cfffc04 	addi	r19,r19,-16
   8a8a0:	b4c0360e 	bge	r22,r19,8a97c <___vfprintf_internal_r+0x13a8>
   8a8a4:	95000015 	stw	r20,0(r18)
   8a8a8:	95800115 	stw	r22,4(r18)
   8a8ac:	42000404 	addi	r8,r8,16
   8a8b0:	18c00044 	addi	r3,r3,1
   8a8b4:	da011d15 	stw	r8,1140(sp)
   8a8b8:	d8c11c15 	stw	r3,1136(sp)
   8a8bc:	b8fff60e 	bge	r23,r3,8a898 <___vfprintf_internal_r+0x12c4>
   8a8c0:	8809883a 	mov	r4,r17
   8a8c4:	e00b883a 	mov	r5,fp
   8a8c8:	d9811b04 	addi	r6,sp,1132
   8a8cc:	00895a00 	call	895a0 <__sprint_r>
   8a8d0:	103cd31e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a8d4:	da011d17 	ldw	r8,1140(sp)
   8a8d8:	d8c11c17 	ldw	r3,1136(sp)
   8a8dc:	dc800404 	addi	r18,sp,16
   8a8e0:	003fee06 	br	8a89c <___vfprintf_internal_r+0x12c8>
   8a8e4:	8088703a 	and	r4,r16,r2
   8a8e8:	203f1d1e 	bne	r4,zero,8a560 <___vfprintf_internal_r+0xf8c>
   8a8ec:	48800115 	stw	r2,4(r9)
   8a8f0:	42000044 	addi	r8,r8,1
   8a8f4:	18c00044 	addi	r3,r3,1
   8a8f8:	da011d15 	stw	r8,1140(sp)
   8a8fc:	d8c11c15 	stw	r3,1136(sp)
   8a900:	008001c4 	movi	r2,7
   8a904:	10c00216 	blt	r2,r3,8a910 <___vfprintf_internal_r+0x133c>
   8a908:	4c800204 	addi	r18,r9,8
   8a90c:	003f3e06 	br	8a608 <___vfprintf_internal_r+0x1034>
   8a910:	d9412917 	ldw	r5,1188(sp)
   8a914:	8809883a 	mov	r4,r17
   8a918:	d9811b04 	addi	r6,sp,1132
   8a91c:	00895a00 	call	895a0 <__sprint_r>
   8a920:	103cbf1e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a924:	dc800404 	addi	r18,sp,16
   8a928:	da011d17 	ldw	r8,1140(sp)
   8a92c:	d8c11c17 	ldw	r3,1136(sp)
   8a930:	003f3506 	br	8a608 <___vfprintf_internal_r+0x1034>
   8a934:	d9412917 	ldw	r5,1188(sp)
   8a938:	8809883a 	mov	r4,r17
   8a93c:	d9811b04 	addi	r6,sp,1132
   8a940:	00895a00 	call	895a0 <__sprint_r>
   8a944:	103cb61e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a948:	da011d17 	ldw	r8,1140(sp)
   8a94c:	d8c11c17 	ldw	r3,1136(sp)
   8a950:	da400404 	addi	r9,sp,16
   8a954:	003f0b06 	br	8a584 <___vfprintf_internal_r+0xfb0>
   8a958:	d9412917 	ldw	r5,1188(sp)
   8a95c:	8809883a 	mov	r4,r17
   8a960:	d9811b04 	addi	r6,sp,1132
   8a964:	00895a00 	call	895a0 <__sprint_r>
   8a968:	103cad1e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a96c:	da011d17 	ldw	r8,1140(sp)
   8a970:	d8c11c17 	ldw	r3,1136(sp)
   8a974:	dc800404 	addi	r18,sp,16
   8a978:	003f0d06 	br	8a5b0 <___vfprintf_internal_r+0xfdc>
   8a97c:	95000015 	stw	r20,0(r18)
   8a980:	94c00115 	stw	r19,4(r18)
   8a984:	44d1883a 	add	r8,r8,r19
   8a988:	003f1906 	br	8a5f0 <___vfprintf_internal_r+0x101c>
   8a98c:	d9412917 	ldw	r5,1188(sp)
   8a990:	8809883a 	mov	r4,r17
   8a994:	d9811b04 	addi	r6,sp,1132
   8a998:	00895a00 	call	895a0 <__sprint_r>
   8a99c:	103ca01e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8a9a0:	da011d17 	ldw	r8,1140(sp)
   8a9a4:	d8c11c17 	ldw	r3,1136(sp)
   8a9a8:	da400404 	addi	r9,sp,16
   8a9ac:	003db706 	br	8a08c <___vfprintf_internal_r+0xab8>
   8a9b0:	4d000015 	stw	r20,0(r9)
   8a9b4:	4c800115 	stw	r18,4(r9)
   8a9b8:	4491883a 	add	r8,r8,r18
   8a9bc:	003de706 	br	8a15c <___vfprintf_internal_r+0xb88>
   8a9c0:	8080100c 	andi	r2,r16,64
   8a9c4:	10010226 	beq	r2,zero,8add0 <___vfprintf_internal_r+0x17fc>
   8a9c8:	d8812d17 	ldw	r2,1204(sp)
   8a9cc:	002d883a 	mov	r22,zero
   8a9d0:	00c00044 	movi	r3,1
   8a9d4:	15c0000b 	ldhu	r23,0(r2)
   8a9d8:	10800104 	addi	r2,r2,4
   8a9dc:	d8812d15 	stw	r2,1204(sp)
   8a9e0:	d8012585 	stb	zero,1174(sp)
   8a9e4:	b805883a 	mov	r2,r23
   8a9e8:	003bd106 	br	89930 <___vfprintf_internal_r+0x35c>
   8a9ec:	d9012d17 	ldw	r4,1204(sp)
   8a9f0:	25800017 	ldw	r22,0(r4)
   8a9f4:	25000117 	ldw	r20,4(r4)
   8a9f8:	21000204 	addi	r4,r4,8
   8a9fc:	d9012d15 	stw	r4,1204(sp)
   8aa00:	dd813315 	stw	r22,1228(sp)
   8aa04:	dd013415 	stw	r20,1232(sp)
   8aa08:	003d2b06 	br	89eb8 <___vfprintf_internal_r+0x8e4>
   8aa0c:	8080100c 	andi	r2,r16,64
   8aa10:	1000fe26 	beq	r2,zero,8ae0c <___vfprintf_internal_r+0x1838>
   8aa14:	d9012d17 	ldw	r4,1204(sp)
   8aa18:	002d883a 	mov	r22,zero
   8aa1c:	0007883a 	mov	r3,zero
   8aa20:	25c0000b 	ldhu	r23,0(r4)
   8aa24:	21000104 	addi	r4,r4,4
   8aa28:	d9012d15 	stw	r4,1204(sp)
   8aa2c:	b805883a 	mov	r2,r23
   8aa30:	d8012585 	stb	zero,1174(sp)
   8aa34:	003bbe06 	br	89930 <___vfprintf_internal_r+0x35c>
   8aa38:	8080100c 	andi	r2,r16,64
   8aa3c:	1000ed26 	beq	r2,zero,8adf4 <___vfprintf_internal_r+0x1820>
   8aa40:	d9012d17 	ldw	r4,1204(sp)
   8aa44:	002d883a 	mov	r22,zero
   8aa48:	25c0000b 	ldhu	r23,0(r4)
   8aa4c:	21000104 	addi	r4,r4,4
   8aa50:	d9012d15 	stw	r4,1204(sp)
   8aa54:	003cd206 	br	89da0 <___vfprintf_internal_r+0x7cc>
   8aa58:	00c00084 	movi	r3,2
   8aa5c:	d8012585 	stb	zero,1174(sp)
   8aa60:	003bb306 	br	89930 <___vfprintf_internal_r+0x35c>
   8aa64:	8080040c 	andi	r2,r16,16
   8aa68:	1000f11e 	bne	r2,zero,8ae30 <___vfprintf_internal_r+0x185c>
   8aa6c:	8400100c 	andi	r16,r16,64
   8aa70:	80015526 	beq	r16,zero,8afc8 <___vfprintf_internal_r+0x19f4>
   8aa74:	da012d17 	ldw	r8,1204(sp)
   8aa78:	d8c12c17 	ldw	r3,1200(sp)
   8aa7c:	40800017 	ldw	r2,0(r8)
   8aa80:	42000104 	addi	r8,r8,4
   8aa84:	da012d15 	stw	r8,1204(sp)
   8aa88:	10c0000d 	sth	r3,0(r2)
   8aa8c:	003b0706 	br	896ac <___vfprintf_internal_r+0xd8>
   8aa90:	8080100c 	andi	r2,r16,64
   8aa94:	1000c726 	beq	r2,zero,8adb4 <___vfprintf_internal_r+0x17e0>
   8aa98:	da012d17 	ldw	r8,1204(sp)
   8aa9c:	45c0000f 	ldh	r23,0(r8)
   8aaa0:	42000104 	addi	r8,r8,4
   8aaa4:	da012d15 	stw	r8,1204(sp)
   8aaa8:	b82dd7fa 	srai	r22,r23,31
   8aaac:	b005883a 	mov	r2,r22
   8aab0:	003c1006 	br	89af4 <___vfprintf_internal_r+0x520>
   8aab4:	ac800007 	ldb	r18,0(r21)
   8aab8:	003b2406 	br	8974c <___vfprintf_internal_r+0x178>
   8aabc:	4c800115 	stw	r18,4(r9)
   8aac0:	9211883a 	add	r8,r18,r8
   8aac4:	18c00044 	addi	r3,r3,1
   8aac8:	da011d15 	stw	r8,1140(sp)
   8aacc:	d8c11c15 	stw	r3,1136(sp)
   8aad0:	008001c4 	movi	r2,7
   8aad4:	10c15416 	blt	r2,r3,8b028 <___vfprintf_internal_r+0x1a54>
   8aad8:	4a400204 	addi	r9,r9,8
   8aadc:	d8813717 	ldw	r2,1244(sp)
   8aae0:	9ca7883a 	add	r19,r19,r18
   8aae4:	48800015 	stw	r2,0(r9)
   8aae8:	00800044 	movi	r2,1
   8aaec:	48800115 	stw	r2,4(r9)
   8aaf0:	4091883a 	add	r8,r8,r2
   8aaf4:	1887883a 	add	r3,r3,r2
   8aaf8:	da011d15 	stw	r8,1140(sp)
   8aafc:	d8c11c15 	stw	r3,1136(sp)
   8ab00:	008001c4 	movi	r2,7
   8ab04:	10c14016 	blt	r2,r3,8b008 <___vfprintf_internal_r+0x1a34>
   8ab08:	4a400204 	addi	r9,r9,8
   8ab0c:	d9013217 	ldw	r4,1224(sp)
   8ab10:	da011d17 	ldw	r8,1140(sp)
   8ab14:	d8c11c17 	ldw	r3,1136(sp)
   8ab18:	24a5c83a 	sub	r18,r4,r18
   8ab1c:	4cc00015 	stw	r19,0(r9)
   8ab20:	003fa406 	br	8a9b4 <___vfprintf_internal_r+0x13e0>
   8ab24:	04c002f4 	movhi	r19,11
   8ab28:	9cf65904 	addi	r19,r19,-9884
   8ab2c:	003cf406 	br	89f00 <___vfprintf_internal_r+0x92c>
   8ab30:	d9412917 	ldw	r5,1188(sp)
   8ab34:	8809883a 	mov	r4,r17
   8ab38:	d9811b04 	addi	r6,sp,1132
   8ab3c:	00895a00 	call	895a0 <__sprint_r>
   8ab40:	103c371e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8ab44:	da011d17 	ldw	r8,1140(sp)
   8ab48:	da400404 	addi	r9,sp,16
   8ab4c:	003e1c06 	br	8a3c0 <___vfprintf_internal_r+0xdec>
   8ab50:	008002f4 	movhi	r2,11
   8ab54:	10b66804 	addi	r2,r2,-9824
   8ab58:	48800015 	stw	r2,0(r9)
   8ab5c:	00800044 	movi	r2,1
   8ab60:	48800115 	stw	r2,4(r9)
   8ab64:	4091883a 	add	r8,r8,r2
   8ab68:	1887883a 	add	r3,r3,r2
   8ab6c:	da011d15 	stw	r8,1140(sp)
   8ab70:	d8c11c15 	stw	r3,1136(sp)
   8ab74:	008001c4 	movi	r2,7
   8ab78:	10c0c316 	blt	r2,r3,8ae88 <___vfprintf_internal_r+0x18b4>
   8ab7c:	4a400204 	addi	r9,r9,8
   8ab80:	9000041e 	bne	r18,zero,8ab94 <___vfprintf_internal_r+0x15c0>
   8ab84:	d8c13217 	ldw	r3,1224(sp)
   8ab88:	1800021e 	bne	r3,zero,8ab94 <___vfprintf_internal_r+0x15c0>
   8ab8c:	8080004c 	andi	r2,r16,1
   8ab90:	103d7826 	beq	r2,zero,8a174 <___vfprintf_internal_r+0xba0>
   8ab94:	d8c11c17 	ldw	r3,1136(sp)
   8ab98:	d9013717 	ldw	r4,1244(sp)
   8ab9c:	00800044 	movi	r2,1
   8aba0:	48800115 	stw	r2,4(r9)
   8aba4:	49000015 	stw	r4,0(r9)
   8aba8:	4091883a 	add	r8,r8,r2
   8abac:	1887883a 	add	r3,r3,r2
   8abb0:	da011d15 	stw	r8,1140(sp)
   8abb4:	d8c11c15 	stw	r3,1136(sp)
   8abb8:	008001c4 	movi	r2,7
   8abbc:	10c12e16 	blt	r2,r3,8b078 <___vfprintf_internal_r+0x1aa4>
   8abc0:	4a400204 	addi	r9,r9,8
   8abc4:	04a5c83a 	sub	r18,zero,r18
   8abc8:	0480de0e 	bge	zero,r18,8af44 <___vfprintf_internal_r+0x1970>
   8abcc:	05800404 	movi	r22,16
   8abd0:	050002f4 	movhi	r20,11
   8abd4:	a5366c84 	addi	r20,r20,-9806
   8abd8:	b480e20e 	bge	r22,r18,8af64 <___vfprintf_internal_r+0x1990>
   8abdc:	05c001c4 	movi	r23,7
   8abe0:	df012917 	ldw	fp,1188(sp)
   8abe4:	00000306 	br	8abf4 <___vfprintf_internal_r+0x1620>
   8abe8:	4a400204 	addi	r9,r9,8
   8abec:	94bffc04 	addi	r18,r18,-16
   8abf0:	b480dc0e 	bge	r22,r18,8af64 <___vfprintf_internal_r+0x1990>
   8abf4:	4d000015 	stw	r20,0(r9)
   8abf8:	4d800115 	stw	r22,4(r9)
   8abfc:	42000404 	addi	r8,r8,16
   8ac00:	18c00044 	addi	r3,r3,1
   8ac04:	da011d15 	stw	r8,1140(sp)
   8ac08:	d8c11c15 	stw	r3,1136(sp)
   8ac0c:	b8fff60e 	bge	r23,r3,8abe8 <___vfprintf_internal_r+0x1614>
   8ac10:	8809883a 	mov	r4,r17
   8ac14:	e00b883a 	mov	r5,fp
   8ac18:	d9811b04 	addi	r6,sp,1132
   8ac1c:	00895a00 	call	895a0 <__sprint_r>
   8ac20:	103bff1e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8ac24:	da011d17 	ldw	r8,1140(sp)
   8ac28:	d8c11c17 	ldw	r3,1136(sp)
   8ac2c:	da400404 	addi	r9,sp,16
   8ac30:	003fee06 	br	8abec <___vfprintf_internal_r+0x1618>
   8ac34:	da413c15 	stw	r9,1264(sp)
   8ac38:	00877340 	call	87734 <__isnand>
   8ac3c:	da413c17 	ldw	r9,1264(sp)
   8ac40:	1000851e 	bne	r2,zero,8ae58 <___vfprintf_internal_r+0x1884>
   8ac44:	00bfffc4 	movi	r2,-1
   8ac48:	e0817626 	beq	fp,r2,8b224 <___vfprintf_internal_r+0x1c50>
   8ac4c:	008019c4 	movi	r2,103
   8ac50:	90817126 	beq	r18,r2,8b218 <___vfprintf_internal_r+0x1c44>
   8ac54:	008011c4 	movi	r2,71
   8ac58:	90816f26 	beq	r18,r2,8b218 <___vfprintf_internal_r+0x1c44>
   8ac5c:	82004014 	ori	r8,r16,256
   8ac60:	da012a15 	stw	r8,1192(sp)
   8ac64:	a0017116 	blt	r20,zero,8b22c <___vfprintf_internal_r+0x1c58>
   8ac68:	d8012f05 	stb	zero,1212(sp)
   8ac6c:	00801984 	movi	r2,102
   8ac70:	90811226 	beq	r18,r2,8b0bc <___vfprintf_internal_r+0x1ae8>
   8ac74:	00801184 	movi	r2,70
   8ac78:	90811026 	beq	r18,r2,8b0bc <___vfprintf_internal_r+0x1ae8>
   8ac7c:	00801944 	movi	r2,101
   8ac80:	90819b26 	beq	r18,r2,8b2f0 <___vfprintf_internal_r+0x1d1c>
   8ac84:	00801144 	movi	r2,69
   8ac88:	90819926 	beq	r18,r2,8b2f0 <___vfprintf_internal_r+0x1d1c>
   8ac8c:	e02f883a 	mov	r23,fp
   8ac90:	d8812404 	addi	r2,sp,1168
   8ac94:	d8800115 	stw	r2,4(sp)
   8ac98:	d8812304 	addi	r2,sp,1164
   8ac9c:	d8800215 	stw	r2,8(sp)
   8aca0:	d8812204 	addi	r2,sp,1160
   8aca4:	ddc00015 	stw	r23,0(sp)
   8aca8:	d8800315 	stw	r2,12(sp)
   8acac:	8809883a 	mov	r4,r17
   8acb0:	b00b883a 	mov	r5,r22
   8acb4:	a00d883a 	mov	r6,r20
   8acb8:	01c00084 	movi	r7,2
   8acbc:	da413c15 	stw	r9,1264(sp)
   8acc0:	008b8580 	call	8b858 <_dtoa_r>
   8acc4:	1027883a 	mov	r19,r2
   8acc8:	008019c4 	movi	r2,103
   8accc:	da413c17 	ldw	r9,1264(sp)
   8acd0:	90818c1e 	bne	r18,r2,8b304 <___vfprintf_internal_r+0x1d30>
   8acd4:	8080004c 	andi	r2,r16,1
   8acd8:	10017926 	beq	r2,zero,8b2c0 <___vfprintf_internal_r+0x1cec>
   8acdc:	00801184 	movi	r2,70
   8ace0:	9dc7883a 	add	r3,r19,r23
   8ace4:	90810626 	beq	r18,r2,8b100 <___vfprintf_internal_r+0x1b2c>
   8ace8:	b009883a 	mov	r4,r22
   8acec:	a00b883a 	mov	r5,r20
   8acf0:	000d883a 	mov	r6,zero
   8acf4:	000f883a 	mov	r7,zero
   8acf8:	d8c13b15 	stw	r3,1260(sp)
   8acfc:	da413c15 	stw	r9,1264(sp)
   8ad00:	00909ec0 	call	909ec <__eqdf2>
   8ad04:	d8c13b17 	ldw	r3,1260(sp)
   8ad08:	da413c17 	ldw	r9,1264(sp)
   8ad0c:	10000726 	beq	r2,zero,8ad2c <___vfprintf_internal_r+0x1758>
   8ad10:	d8812217 	ldw	r2,1160(sp)
   8ad14:	10c1962e 	bgeu	r2,r3,8b370 <___vfprintf_internal_r+0x1d9c>
   8ad18:	01000c04 	movi	r4,48
   8ad1c:	11000005 	stb	r4,0(r2)
   8ad20:	10800044 	addi	r2,r2,1
   8ad24:	d8812215 	stw	r2,1160(sp)
   8ad28:	10fffc1e 	bne	r2,r3,8ad1c <___vfprintf_internal_r+0x1748>
   8ad2c:	1cc7c83a 	sub	r3,r3,r19
   8ad30:	d8c13215 	stw	r3,1224(sp)
   8ad34:	008019c4 	movi	r2,103
   8ad38:	90810626 	beq	r18,r2,8b154 <___vfprintf_internal_r+0x1b80>
   8ad3c:	008011c4 	movi	r2,71
   8ad40:	90810426 	beq	r18,r2,8b154 <___vfprintf_internal_r+0x1b80>
   8ad44:	00801984 	movi	r2,102
   8ad48:	90819a1e 	bne	r18,r2,8b3b4 <___vfprintf_internal_r+0x1de0>
   8ad4c:	d8812417 	ldw	r2,1168(sp)
   8ad50:	d8812b15 	stw	r2,1196(sp)
   8ad54:	0081880e 	bge	zero,r2,8b378 <___vfprintf_internal_r+0x1da4>
   8ad58:	e000021e 	bne	fp,zero,8ad64 <___vfprintf_internal_r+0x1790>
   8ad5c:	8400004c 	andi	r16,r16,1
   8ad60:	80000426 	beq	r16,zero,8ad74 <___vfprintf_internal_r+0x17a0>
   8ad64:	d8812b17 	ldw	r2,1196(sp)
   8ad68:	e2000044 	addi	r8,fp,1
   8ad6c:	1205883a 	add	r2,r2,r8
   8ad70:	d8812b15 	stw	r2,1196(sp)
   8ad74:	d8812815 	stw	r2,1184(sp)
   8ad78:	10011716 	blt	r2,zero,8b1d8 <___vfprintf_internal_r+0x1c04>
   8ad7c:	ddc12f07 	ldb	r23,1212(sp)
   8ad80:	b800ca26 	beq	r23,zero,8b0ac <___vfprintf_internal_r+0x1ad8>
   8ad84:	00800b44 	movi	r2,45
   8ad88:	d8812585 	stb	r2,1174(sp)
   8ad8c:	dc012a17 	ldw	r16,1192(sp)
   8ad90:	d8013115 	stw	zero,1220(sp)
   8ad94:	003afe06 	br	89990 <___vfprintf_internal_r+0x3bc>
   8ad98:	d8812b17 	ldw	r2,1196(sp)
   8ad9c:	d8812815 	stw	r2,1184(sp)
   8ada0:	10005e16 	blt	r2,zero,8af1c <___vfprintf_internal_r+0x1948>
   8ada4:	d8812583 	ldbu	r2,1174(sp)
   8ada8:	ddc12d15 	stw	r23,1204(sp)
   8adac:	d8013115 	stw	zero,1220(sp)
   8adb0:	003af306 	br	89980 <___vfprintf_internal_r+0x3ac>
   8adb4:	d8812d17 	ldw	r2,1204(sp)
   8adb8:	15c00017 	ldw	r23,0(r2)
   8adbc:	10800104 	addi	r2,r2,4
   8adc0:	d8812d15 	stw	r2,1204(sp)
   8adc4:	b82dd7fa 	srai	r22,r23,31
   8adc8:	b005883a 	mov	r2,r22
   8adcc:	003b4906 	br	89af4 <___vfprintf_internal_r+0x520>
   8add0:	d8c12d17 	ldw	r3,1204(sp)
   8add4:	002d883a 	mov	r22,zero
   8add8:	1dc00017 	ldw	r23,0(r3)
   8addc:	18c00104 	addi	r3,r3,4
   8ade0:	d8c12d15 	stw	r3,1204(sp)
   8ade4:	b805883a 	mov	r2,r23
   8ade8:	00c00044 	movi	r3,1
   8adec:	d8012585 	stb	zero,1174(sp)
   8adf0:	003acf06 	br	89930 <___vfprintf_internal_r+0x35c>
   8adf4:	da012d17 	ldw	r8,1204(sp)
   8adf8:	002d883a 	mov	r22,zero
   8adfc:	45c00017 	ldw	r23,0(r8)
   8ae00:	42000104 	addi	r8,r8,4
   8ae04:	da012d15 	stw	r8,1204(sp)
   8ae08:	003be506 	br	89da0 <___vfprintf_internal_r+0x7cc>
   8ae0c:	da012d17 	ldw	r8,1204(sp)
   8ae10:	002d883a 	mov	r22,zero
   8ae14:	0007883a 	mov	r3,zero
   8ae18:	45c00017 	ldw	r23,0(r8)
   8ae1c:	42000104 	addi	r8,r8,4
   8ae20:	da012d15 	stw	r8,1204(sp)
   8ae24:	b805883a 	mov	r2,r23
   8ae28:	d8012585 	stb	zero,1174(sp)
   8ae2c:	003ac006 	br	89930 <___vfprintf_internal_r+0x35c>
   8ae30:	d8c12d17 	ldw	r3,1204(sp)
   8ae34:	d9012c17 	ldw	r4,1200(sp)
   8ae38:	18800017 	ldw	r2,0(r3)
   8ae3c:	18c00104 	addi	r3,r3,4
   8ae40:	d8c12d15 	stw	r3,1204(sp)
   8ae44:	11000015 	stw	r4,0(r2)
   8ae48:	003a1806 	br	896ac <___vfprintf_internal_r+0xd8>
   8ae4c:	073fffc4 	movi	fp,-1
   8ae50:	202b883a 	mov	r21,r4
   8ae54:	003a3e06 	br	89750 <___vfprintf_internal_r+0x17c>
   8ae58:	008011c4 	movi	r2,71
   8ae5c:	14809016 	blt	r2,r18,8b0a0 <___vfprintf_internal_r+0x1acc>
   8ae60:	04c002f4 	movhi	r19,11
   8ae64:	9cf65a04 	addi	r19,r19,-9880
   8ae68:	00c000c4 	movi	r3,3
   8ae6c:	00bfdfc4 	movi	r2,-129
   8ae70:	80a0703a 	and	r16,r16,r2
   8ae74:	d8c12815 	stw	r3,1184(sp)
   8ae78:	d8812583 	ldbu	r2,1174(sp)
   8ae7c:	d8c12b15 	stw	r3,1196(sp)
   8ae80:	d8013115 	stw	zero,1220(sp)
   8ae84:	003abe06 	br	89980 <___vfprintf_internal_r+0x3ac>
   8ae88:	d9412917 	ldw	r5,1188(sp)
   8ae8c:	8809883a 	mov	r4,r17
   8ae90:	d9811b04 	addi	r6,sp,1132
   8ae94:	00895a00 	call	895a0 <__sprint_r>
   8ae98:	103b611e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8ae9c:	dc812417 	ldw	r18,1168(sp)
   8aea0:	da011d17 	ldw	r8,1140(sp)
   8aea4:	da400404 	addi	r9,sp,16
   8aea8:	003f3506 	br	8ab80 <___vfprintf_internal_r+0x15ac>
   8aeac:	ad400044 	addi	r21,r21,1
   8aeb0:	84000814 	ori	r16,r16,32
   8aeb4:	14800047 	ldb	r18,1(r2)
   8aeb8:	003a2406 	br	8974c <___vfprintf_internal_r+0x178>
   8aebc:	d9412917 	ldw	r5,1188(sp)
   8aec0:	8809883a 	mov	r4,r17
   8aec4:	d9811b04 	addi	r6,sp,1132
   8aec8:	00895a00 	call	895a0 <__sprint_r>
   8aecc:	103b541e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8aed0:	da011d17 	ldw	r8,1140(sp)
   8aed4:	da400404 	addi	r9,sp,16
   8aed8:	003d4a06 	br	8a404 <___vfprintf_internal_r+0xe30>
   8aedc:	4d000015 	stw	r20,0(r9)
   8aee0:	4c800115 	stw	r18,4(r9)
   8aee4:	4491883a 	add	r8,r8,r18
   8aee8:	18c00044 	addi	r3,r3,1
   8aeec:	da011d15 	stw	r8,1140(sp)
   8aef0:	d8c11c15 	stw	r3,1136(sp)
   8aef4:	008001c4 	movi	r2,7
   8aef8:	10fcdc16 	blt	r2,r3,8a26c <___vfprintf_internal_r+0xc98>
   8aefc:	4a400204 	addi	r9,r9,8
   8af00:	003ce106 	br	8a288 <___vfprintf_internal_r+0xcb4>
   8af04:	da413c15 	stw	r9,1264(sp)
   8af08:	00895140 	call	89514 <strlen>
   8af0c:	d8812b15 	stw	r2,1196(sp)
   8af10:	d8812815 	stw	r2,1184(sp)
   8af14:	da413c17 	ldw	r9,1264(sp)
   8af18:	103fa20e 	bge	r2,zero,8ada4 <___vfprintf_internal_r+0x17d0>
   8af1c:	d8012815 	stw	zero,1184(sp)
   8af20:	003fa006 	br	8ada4 <___vfprintf_internal_r+0x17d0>
   8af24:	d9412917 	ldw	r5,1188(sp)
   8af28:	8809883a 	mov	r4,r17
   8af2c:	d9811b04 	addi	r6,sp,1132
   8af30:	00895a00 	call	895a0 <__sprint_r>
   8af34:	103b3a1e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8af38:	da011d17 	ldw	r8,1140(sp)
   8af3c:	d8c11c17 	ldw	r3,1136(sp)
   8af40:	da400404 	addi	r9,sp,16
   8af44:	d8813217 	ldw	r2,1224(sp)
   8af48:	4cc00015 	stw	r19,0(r9)
   8af4c:	48800115 	stw	r2,4(r9)
   8af50:	4091883a 	add	r8,r8,r2
   8af54:	003c8106 	br	8a15c <___vfprintf_internal_r+0xb88>
   8af58:	00800b44 	movi	r2,45
   8af5c:	d8812585 	stb	r2,1174(sp)
   8af60:	003be306 	br	89ef0 <___vfprintf_internal_r+0x91c>
   8af64:	4d000015 	stw	r20,0(r9)
   8af68:	4c800115 	stw	r18,4(r9)
   8af6c:	4491883a 	add	r8,r8,r18
   8af70:	18c00044 	addi	r3,r3,1
   8af74:	da011d15 	stw	r8,1140(sp)
   8af78:	d8c11c15 	stw	r3,1136(sp)
   8af7c:	008001c4 	movi	r2,7
   8af80:	10ffe816 	blt	r2,r3,8af24 <___vfprintf_internal_r+0x1950>
   8af84:	4a400204 	addi	r9,r9,8
   8af88:	003fee06 	br	8af44 <___vfprintf_internal_r+0x1970>
   8af8c:	df012b15 	stw	fp,1196(sp)
   8af90:	00800184 	movi	r2,6
   8af94:	1700072e 	bgeu	r2,fp,8afb4 <___vfprintf_internal_r+0x19e0>
   8af98:	d8812b15 	stw	r2,1196(sp)
   8af9c:	d8812815 	stw	r2,1184(sp)
   8afa0:	ddc12d15 	stw	r23,1204(sp)
   8afa4:	04c002f4 	movhi	r19,11
   8afa8:	9cf66604 	addi	r19,r19,-9832
   8afac:	d8013115 	stw	zero,1220(sp)
   8afb0:	003a7a06 	br	8999c <___vfprintf_internal_r+0x3c8>
   8afb4:	d8812b17 	ldw	r2,1196(sp)
   8afb8:	d8812815 	stw	r2,1184(sp)
   8afbc:	103ff80e 	bge	r2,zero,8afa0 <___vfprintf_internal_r+0x19cc>
   8afc0:	d8012815 	stw	zero,1184(sp)
   8afc4:	003ff606 	br	8afa0 <___vfprintf_internal_r+0x19cc>
   8afc8:	d9012d17 	ldw	r4,1204(sp)
   8afcc:	da012c17 	ldw	r8,1200(sp)
   8afd0:	20800017 	ldw	r2,0(r4)
   8afd4:	21000104 	addi	r4,r4,4
   8afd8:	d9012d15 	stw	r4,1204(sp)
   8afdc:	12000015 	stw	r8,0(r2)
   8afe0:	0039b206 	br	896ac <___vfprintf_internal_r+0xd8>
   8afe4:	d9412917 	ldw	r5,1188(sp)
   8afe8:	8809883a 	mov	r4,r17
   8afec:	d9811b04 	addi	r6,sp,1132
   8aff0:	00895a00 	call	895a0 <__sprint_r>
   8aff4:	103b0a1e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8aff8:	dc812417 	ldw	r18,1168(sp)
   8affc:	da011d17 	ldw	r8,1140(sp)
   8b000:	da400404 	addi	r9,sp,16
   8b004:	003def06 	br	8a7c4 <___vfprintf_internal_r+0x11f0>
   8b008:	d9412917 	ldw	r5,1188(sp)
   8b00c:	8809883a 	mov	r4,r17
   8b010:	d9811b04 	addi	r6,sp,1132
   8b014:	00895a00 	call	895a0 <__sprint_r>
   8b018:	103b011e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8b01c:	dc812417 	ldw	r18,1168(sp)
   8b020:	da400404 	addi	r9,sp,16
   8b024:	003eb906 	br	8ab0c <___vfprintf_internal_r+0x1538>
   8b028:	d9412917 	ldw	r5,1188(sp)
   8b02c:	8809883a 	mov	r4,r17
   8b030:	d9811b04 	addi	r6,sp,1132
   8b034:	00895a00 	call	895a0 <__sprint_r>
   8b038:	103af91e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8b03c:	dc812417 	ldw	r18,1168(sp)
   8b040:	da011d17 	ldw	r8,1140(sp)
   8b044:	d8c11c17 	ldw	r3,1136(sp)
   8b048:	da400404 	addi	r9,sp,16
   8b04c:	003ea306 	br	8aadc <___vfprintf_internal_r+0x1508>
   8b050:	00800244 	movi	r2,9
   8b054:	15fda636 	bltu	r2,r23,8a6f0 <___vfprintf_internal_r+0x111c>
   8b058:	dd010e04 	addi	r20,sp,1080
   8b05c:	003dc206 	br	8a768 <___vfprintf_internal_r+0x1194>
   8b060:	df012815 	stw	fp,1184(sp)
   8b064:	d8812583 	ldbu	r2,1174(sp)
   8b068:	df012b15 	stw	fp,1196(sp)
   8b06c:	ddc12d15 	stw	r23,1204(sp)
   8b070:	d8013115 	stw	zero,1220(sp)
   8b074:	003a4206 	br	89980 <___vfprintf_internal_r+0x3ac>
   8b078:	d9412917 	ldw	r5,1188(sp)
   8b07c:	8809883a 	mov	r4,r17
   8b080:	d9811b04 	addi	r6,sp,1132
   8b084:	00895a00 	call	895a0 <__sprint_r>
   8b088:	103ae51e 	bne	r2,zero,89c20 <___vfprintf_internal_r+0x64c>
   8b08c:	dc812417 	ldw	r18,1168(sp)
   8b090:	da011d17 	ldw	r8,1140(sp)
   8b094:	d8c11c17 	ldw	r3,1136(sp)
   8b098:	da400404 	addi	r9,sp,16
   8b09c:	003ec906 	br	8abc4 <___vfprintf_internal_r+0x15f0>
   8b0a0:	04c002f4 	movhi	r19,11
   8b0a4:	9cf65b04 	addi	r19,r19,-9876
   8b0a8:	003f6f06 	br	8ae68 <___vfprintf_internal_r+0x1894>
   8b0ac:	d8812583 	ldbu	r2,1174(sp)
   8b0b0:	dc012a17 	ldw	r16,1192(sp)
   8b0b4:	d8013115 	stw	zero,1220(sp)
   8b0b8:	003a3106 	br	89980 <___vfprintf_internal_r+0x3ac>
   8b0bc:	d8812404 	addi	r2,sp,1168
   8b0c0:	d8800115 	stw	r2,4(sp)
   8b0c4:	d8812304 	addi	r2,sp,1164
   8b0c8:	d8800215 	stw	r2,8(sp)
   8b0cc:	d8812204 	addi	r2,sp,1160
   8b0d0:	df000015 	stw	fp,0(sp)
   8b0d4:	d8800315 	stw	r2,12(sp)
   8b0d8:	8809883a 	mov	r4,r17
   8b0dc:	b00b883a 	mov	r5,r22
   8b0e0:	a00d883a 	mov	r6,r20
   8b0e4:	01c000c4 	movi	r7,3
   8b0e8:	da413c15 	stw	r9,1264(sp)
   8b0ec:	008b8580 	call	8b858 <_dtoa_r>
   8b0f0:	da413c17 	ldw	r9,1264(sp)
   8b0f4:	1027883a 	mov	r19,r2
   8b0f8:	1707883a 	add	r3,r2,fp
   8b0fc:	e02f883a 	mov	r23,fp
   8b100:	99000007 	ldb	r4,0(r19)
   8b104:	00800c04 	movi	r2,48
   8b108:	20800326 	beq	r4,r2,8b118 <___vfprintf_internal_r+0x1b44>
   8b10c:	da812417 	ldw	r10,1168(sp)
   8b110:	1a87883a 	add	r3,r3,r10
   8b114:	003ef406 	br	8ace8 <___vfprintf_internal_r+0x1714>
   8b118:	b009883a 	mov	r4,r22
   8b11c:	a00b883a 	mov	r5,r20
   8b120:	000d883a 	mov	r6,zero
   8b124:	000f883a 	mov	r7,zero
   8b128:	d8c13b15 	stw	r3,1260(sp)
   8b12c:	da413c15 	stw	r9,1264(sp)
   8b130:	0090a480 	call	90a48 <__nedf2>
   8b134:	d8c13b17 	ldw	r3,1260(sp)
   8b138:	da413c17 	ldw	r9,1264(sp)
   8b13c:	103ff326 	beq	r2,zero,8b10c <___vfprintf_internal_r+0x1b38>
   8b140:	00800044 	movi	r2,1
   8b144:	15d5c83a 	sub	r10,r2,r23
   8b148:	da812415 	stw	r10,1168(sp)
   8b14c:	1a87883a 	add	r3,r3,r10
   8b150:	003ee506 	br	8ace8 <___vfprintf_internal_r+0x1714>
   8b154:	d8812417 	ldw	r2,1168(sp)
   8b158:	d8812b15 	stw	r2,1196(sp)
   8b15c:	1029883a 	mov	r20,r2
   8b160:	00bfff44 	movi	r2,-3
   8b164:	a0800116 	blt	r20,r2,8b16c <___vfprintf_internal_r+0x1b98>
   8b168:	e5001d0e 	bge	fp,r20,8b1e0 <___vfprintf_internal_r+0x1c0c>
   8b16c:	94bfff84 	addi	r18,r18,-2
   8b170:	a53fffc4 	addi	r20,r20,-1
   8b174:	dd012415 	stw	r20,1168(sp)
   8b178:	dc811fc5 	stb	r18,1151(sp)
   8b17c:	a0007816 	blt	r20,zero,8b360 <___vfprintf_internal_r+0x1d8c>
   8b180:	00800ac4 	movi	r2,43
   8b184:	d8812005 	stb	r2,1152(sp)
   8b188:	00800244 	movi	r2,9
   8b18c:	15002b16 	blt	r2,r20,8b23c <___vfprintf_internal_r+0x1c68>
   8b190:	00800c04 	movi	r2,48
   8b194:	a5000c04 	addi	r20,r20,48
   8b198:	d8812045 	stb	r2,1153(sp)
   8b19c:	dd012085 	stb	r20,1154(sp)
   8b1a0:	d8c120c4 	addi	r3,sp,1155
   8b1a4:	d8811fc4 	addi	r2,sp,1151
   8b1a8:	da013217 	ldw	r8,1224(sp)
   8b1ac:	1885c83a 	sub	r2,r3,r2
   8b1b0:	d8813515 	stw	r2,1236(sp)
   8b1b4:	4085883a 	add	r2,r8,r2
   8b1b8:	d8812b15 	stw	r2,1196(sp)
   8b1bc:	00800044 	movi	r2,1
   8b1c0:	1200610e 	bge	r2,r8,8b348 <___vfprintf_internal_r+0x1d74>
   8b1c4:	d8812b17 	ldw	r2,1196(sp)
   8b1c8:	10800044 	addi	r2,r2,1
   8b1cc:	d8812b15 	stw	r2,1196(sp)
   8b1d0:	d8812815 	stw	r2,1184(sp)
   8b1d4:	103ee90e 	bge	r2,zero,8ad7c <___vfprintf_internal_r+0x17a8>
   8b1d8:	d8012815 	stw	zero,1184(sp)
   8b1dc:	003ee706 	br	8ad7c <___vfprintf_internal_r+0x17a8>
   8b1e0:	d8812b17 	ldw	r2,1196(sp)
   8b1e4:	da013217 	ldw	r8,1224(sp)
   8b1e8:	12003716 	blt	r2,r8,8b2c8 <___vfprintf_internal_r+0x1cf4>
   8b1ec:	8400004c 	andi	r16,r16,1
   8b1f0:	80000326 	beq	r16,zero,8b200 <___vfprintf_internal_r+0x1c2c>
   8b1f4:	d8812b17 	ldw	r2,1196(sp)
   8b1f8:	10800044 	addi	r2,r2,1
   8b1fc:	d8812b15 	stw	r2,1196(sp)
   8b200:	d8812815 	stw	r2,1184(sp)
   8b204:	10003716 	blt	r2,zero,8b2e4 <___vfprintf_internal_r+0x1d10>
   8b208:	048019c4 	movi	r18,103
   8b20c:	003edb06 	br	8ad7c <___vfprintf_internal_r+0x17a8>
   8b210:	d8012815 	stw	zero,1184(sp)
   8b214:	003b6906 	br	89fbc <___vfprintf_internal_r+0x9e8>
   8b218:	e03e901e 	bne	fp,zero,8ac5c <___vfprintf_internal_r+0x1688>
   8b21c:	07000044 	movi	fp,1
   8b220:	003e8e06 	br	8ac5c <___vfprintf_internal_r+0x1688>
   8b224:	07000184 	movi	fp,6
   8b228:	003e8c06 	br	8ac5c <___vfprintf_internal_r+0x1688>
   8b22c:	00c00b44 	movi	r3,45
   8b230:	a520003c 	xorhi	r20,r20,32768
   8b234:	d8c12f05 	stb	r3,1212(sp)
   8b238:	003e8c06 	br	8ac6c <___vfprintf_internal_r+0x1698>
   8b23c:	d8c11f84 	addi	r3,sp,1150
   8b240:	102f883a 	mov	r23,r2
   8b244:	4839883a 	mov	fp,r9
   8b248:	a009883a 	mov	r4,r20
   8b24c:	01400284 	movi	r5,10
   8b250:	182d883a 	mov	r22,r3
   8b254:	00882d00 	call	882d0 <__modsi3>
   8b258:	10800c04 	addi	r2,r2,48
   8b25c:	a009883a 	mov	r4,r20
   8b260:	b0800005 	stb	r2,0(r22)
   8b264:	01400284 	movi	r5,10
   8b268:	00882800 	call	88280 <__divsi3>
   8b26c:	1029883a 	mov	r20,r2
   8b270:	b0ffffc4 	addi	r3,r22,-1
   8b274:	b8bff416 	blt	r23,r2,8b248 <___vfprintf_internal_r+0x1c74>
   8b278:	11400c04 	addi	r5,r2,48
   8b27c:	b17fffc5 	stb	r5,-1(r22)
   8b280:	d8811fc4 	addi	r2,sp,1151
   8b284:	e013883a 	mov	r9,fp
   8b288:	1880482e 	bgeu	r3,r2,8b3ac <___vfprintf_internal_r+0x1dd8>
   8b28c:	b007883a 	mov	r3,r22
   8b290:	d9012044 	addi	r4,sp,1153
   8b294:	00000206 	br	8b2a0 <___vfprintf_internal_r+0x1ccc>
   8b298:	19400003 	ldbu	r5,0(r3)
   8b29c:	18c00044 	addi	r3,r3,1
   8b2a0:	21400005 	stb	r5,0(r4)
   8b2a4:	21000044 	addi	r4,r4,1
   8b2a8:	10fffb1e 	bne	r2,r3,8b298 <___vfprintf_internal_r+0x1cc4>
   8b2ac:	d8c12004 	addi	r3,sp,1152
   8b2b0:	1d87c83a 	sub	r3,r3,r22
   8b2b4:	d9012044 	addi	r4,sp,1153
   8b2b8:	20c7883a 	add	r3,r4,r3
   8b2bc:	003fba06 	br	8b1a8 <___vfprintf_internal_r+0x1bd4>
   8b2c0:	d8c12217 	ldw	r3,1160(sp)
   8b2c4:	003e9906 	br	8ad2c <___vfprintf_internal_r+0x1758>
   8b2c8:	05000b0e 	bge	zero,r20,8b2f8 <___vfprintf_internal_r+0x1d24>
   8b2cc:	05000044 	movi	r20,1
   8b2d0:	da013217 	ldw	r8,1224(sp)
   8b2d4:	a229883a 	add	r20,r20,r8
   8b2d8:	dd012b15 	stw	r20,1196(sp)
   8b2dc:	dd012815 	stw	r20,1184(sp)
   8b2e0:	a03fc90e 	bge	r20,zero,8b208 <___vfprintf_internal_r+0x1c34>
   8b2e4:	d8012815 	stw	zero,1184(sp)
   8b2e8:	048019c4 	movi	r18,103
   8b2ec:	003ea306 	br	8ad7c <___vfprintf_internal_r+0x17a8>
   8b2f0:	e5c00044 	addi	r23,fp,1
   8b2f4:	003e6606 	br	8ac90 <___vfprintf_internal_r+0x16bc>
   8b2f8:	00800084 	movi	r2,2
   8b2fc:	1529c83a 	sub	r20,r2,r20
   8b300:	003ff306 	br	8b2d0 <___vfprintf_internal_r+0x1cfc>
   8b304:	008011c4 	movi	r2,71
   8b308:	90be7226 	beq	r18,r2,8acd4 <___vfprintf_internal_r+0x1700>
   8b30c:	003e7306 	br	8acdc <___vfprintf_internal_r+0x1708>
   8b310:	d8812d17 	ldw	r2,1204(sp)
   8b314:	ac800043 	ldbu	r18,1(r21)
   8b318:	202b883a 	mov	r21,r4
   8b31c:	17000017 	ldw	fp,0(r2)
   8b320:	10800104 	addi	r2,r2,4
   8b324:	d8812d15 	stw	r2,1204(sp)
   8b328:	e0001b16 	blt	fp,zero,8b398 <___vfprintf_internal_r+0x1dc4>
   8b32c:	94803fcc 	andi	r18,r18,255
   8b330:	9480201c 	xori	r18,r18,128
   8b334:	94bfe004 	addi	r18,r18,-128
   8b338:	00390406 	br	8974c <___vfprintf_internal_r+0x178>
   8b33c:	00bfffc4 	movi	r2,-1
   8b340:	d8812c15 	stw	r2,1200(sp)
   8b344:	003a2506 	br	89bdc <___vfprintf_internal_r+0x608>
   8b348:	80a0703a 	and	r16,r16,r2
   8b34c:	803f9d1e 	bne	r16,zero,8b1c4 <___vfprintf_internal_r+0x1bf0>
   8b350:	d8812b17 	ldw	r2,1196(sp)
   8b354:	d8812815 	stw	r2,1184(sp)
   8b358:	103e880e 	bge	r2,zero,8ad7c <___vfprintf_internal_r+0x17a8>
   8b35c:	003f9e06 	br	8b1d8 <___vfprintf_internal_r+0x1c04>
   8b360:	00800b44 	movi	r2,45
   8b364:	0529c83a 	sub	r20,zero,r20
   8b368:	d8812005 	stb	r2,1152(sp)
   8b36c:	003f8606 	br	8b188 <___vfprintf_internal_r+0x1bb4>
   8b370:	1007883a 	mov	r3,r2
   8b374:	003e6d06 	br	8ad2c <___vfprintf_internal_r+0x1758>
   8b378:	e000021e 	bne	fp,zero,8b384 <___vfprintf_internal_r+0x1db0>
   8b37c:	8400004c 	andi	r16,r16,1
   8b380:	80000e26 	beq	r16,zero,8b3bc <___vfprintf_internal_r+0x1de8>
   8b384:	e7000084 	addi	fp,fp,2
   8b388:	df012b15 	stw	fp,1196(sp)
   8b38c:	df012815 	stw	fp,1184(sp)
   8b390:	e03e7a0e 	bge	fp,zero,8ad7c <___vfprintf_internal_r+0x17a8>
   8b394:	003f9006 	br	8b1d8 <___vfprintf_internal_r+0x1c04>
   8b398:	94803fcc 	andi	r18,r18,255
   8b39c:	9480201c 	xori	r18,r18,128
   8b3a0:	073fffc4 	movi	fp,-1
   8b3a4:	94bfe004 	addi	r18,r18,-128
   8b3a8:	0038e806 	br	8974c <___vfprintf_internal_r+0x178>
   8b3ac:	d8c12044 	addi	r3,sp,1153
   8b3b0:	003f7d06 	br	8b1a8 <___vfprintf_internal_r+0x1bd4>
   8b3b4:	dd012417 	ldw	r20,1168(sp)
   8b3b8:	003f6d06 	br	8b170 <___vfprintf_internal_r+0x1b9c>
   8b3bc:	00c00044 	movi	r3,1
   8b3c0:	d8c12815 	stw	r3,1184(sp)
   8b3c4:	d8c12b15 	stw	r3,1196(sp)
   8b3c8:	003e6c06 	br	8ad7c <___vfprintf_internal_r+0x17a8>

0008b3cc <__vfprintf_internal>:
   8b3cc:	008002f4 	movhi	r2,11
   8b3d0:	10844f04 	addi	r2,r2,4412
   8b3d4:	2007883a 	mov	r3,r4
   8b3d8:	11000017 	ldw	r4,0(r2)
   8b3dc:	2805883a 	mov	r2,r5
   8b3e0:	300f883a 	mov	r7,r6
   8b3e4:	180b883a 	mov	r5,r3
   8b3e8:	100d883a 	mov	r6,r2
   8b3ec:	00895d41 	jmpi	895d4 <___vfprintf_internal_r>

0008b3f0 <_vsnprintf_r>:
   8b3f0:	deffe604 	addi	sp,sp,-104
   8b3f4:	dc401815 	stw	r17,96(sp)
   8b3f8:	dc001715 	stw	r16,92(sp)
   8b3fc:	dfc01915 	stw	ra,100(sp)
   8b400:	3021883a 	mov	r16,r6
   8b404:	2023883a 	mov	r17,r4
   8b408:	30002016 	blt	r6,zero,8b48c <_vsnprintf_r+0x9c>
   8b40c:	00808204 	movi	r2,520
   8b410:	d880030d 	sth	r2,12(sp)
   8b414:	d9400015 	stw	r5,0(sp)
   8b418:	d9400415 	stw	r5,16(sp)
   8b41c:	3000161e 	bne	r6,zero,8b478 <_vsnprintf_r+0x88>
   8b420:	0005883a 	mov	r2,zero
   8b424:	00c002f4 	movhi	r3,11
   8b428:	18c44f04 	addi	r3,r3,4412
   8b42c:	19000017 	ldw	r4,0(r3)
   8b430:	380d883a 	mov	r6,r7
   8b434:	d9c01a17 	ldw	r7,104(sp)
   8b438:	d8800215 	stw	r2,8(sp)
   8b43c:	d8800515 	stw	r2,20(sp)
   8b440:	d80b883a 	mov	r5,sp
   8b444:	00bfffc4 	movi	r2,-1
   8b448:	d880038d 	sth	r2,14(sp)
   8b44c:	00895d40 	call	895d4 <___vfprintf_internal_r>
   8b450:	00ffffc4 	movi	r3,-1
   8b454:	10c00a16 	blt	r2,r3,8b480 <_vsnprintf_r+0x90>
   8b458:	80000226 	beq	r16,zero,8b464 <_vsnprintf_r+0x74>
   8b45c:	d8c00017 	ldw	r3,0(sp)
   8b460:	18000005 	stb	zero,0(r3)
   8b464:	dfc01917 	ldw	ra,100(sp)
   8b468:	dc401817 	ldw	r17,96(sp)
   8b46c:	dc001717 	ldw	r16,92(sp)
   8b470:	dec01a04 	addi	sp,sp,104
   8b474:	f800283a 	ret
   8b478:	30bfffc4 	addi	r2,r6,-1
   8b47c:	003fe906 	br	8b424 <_vsnprintf_r+0x34>
   8b480:	00c022c4 	movi	r3,139
   8b484:	88c00015 	stw	r3,0(r17)
   8b488:	003ff306 	br	8b458 <_vsnprintf_r+0x68>
   8b48c:	008022c4 	movi	r2,139
   8b490:	20800015 	stw	r2,0(r4)
   8b494:	00bfffc4 	movi	r2,-1
   8b498:	003ff206 	br	8b464 <_vsnprintf_r+0x74>

0008b49c <vsnprintf>:
   8b49c:	008002f4 	movhi	r2,11
   8b4a0:	10844f04 	addi	r2,r2,4412
   8b4a4:	2011883a 	mov	r8,r4
   8b4a8:	11000017 	ldw	r4,0(r2)
   8b4ac:	defffe04 	addi	sp,sp,-8
   8b4b0:	2807883a 	mov	r3,r5
   8b4b4:	3005883a 	mov	r2,r6
   8b4b8:	d9c00015 	stw	r7,0(sp)
   8b4bc:	400b883a 	mov	r5,r8
   8b4c0:	180d883a 	mov	r6,r3
   8b4c4:	100f883a 	mov	r7,r2
   8b4c8:	dfc00115 	stw	ra,4(sp)
   8b4cc:	008b3f00 	call	8b3f0 <_vsnprintf_r>
   8b4d0:	dfc00117 	ldw	ra,4(sp)
   8b4d4:	dec00204 	addi	sp,sp,8
   8b4d8:	f800283a 	ret

0008b4dc <__swsetup_r>:
   8b4dc:	008002f4 	movhi	r2,11
   8b4e0:	10844f04 	addi	r2,r2,4412
   8b4e4:	10800017 	ldw	r2,0(r2)
   8b4e8:	defffd04 	addi	sp,sp,-12
   8b4ec:	dc400115 	stw	r17,4(sp)
   8b4f0:	dc000015 	stw	r16,0(sp)
   8b4f4:	dfc00215 	stw	ra,8(sp)
   8b4f8:	2023883a 	mov	r17,r4
   8b4fc:	2821883a 	mov	r16,r5
   8b500:	10000226 	beq	r2,zero,8b50c <__swsetup_r+0x30>
   8b504:	10c00e17 	ldw	r3,56(r2)
   8b508:	18003d26 	beq	r3,zero,8b600 <__swsetup_r+0x124>
   8b50c:	8080030b 	ldhu	r2,12(r16)
   8b510:	10c0020c 	andi	r3,r2,8
   8b514:	18ffffcc 	andi	r3,r3,65535
   8b518:	18e0001c 	xori	r3,r3,32768
   8b51c:	18e00004 	addi	r3,r3,-32768
   8b520:	18001226 	beq	r3,zero,8b56c <__swsetup_r+0x90>
   8b524:	80c00417 	ldw	r3,16(r16)
   8b528:	18001f26 	beq	r3,zero,8b5a8 <__swsetup_r+0xcc>
   8b52c:	1100004c 	andi	r4,r2,1
   8b530:	2000261e 	bne	r4,zero,8b5cc <__swsetup_r+0xf0>
   8b534:	1080008c 	andi	r2,r2,2
   8b538:	10bfffcc 	andi	r2,r2,65535
   8b53c:	10a0001c 	xori	r2,r2,32768
   8b540:	10a00004 	addi	r2,r2,-32768
   8b544:	1000311e 	bne	r2,zero,8b60c <__swsetup_r+0x130>
   8b548:	80800517 	ldw	r2,20(r16)
   8b54c:	80800215 	stw	r2,8(r16)
   8b550:	18002326 	beq	r3,zero,8b5e0 <__swsetup_r+0x104>
   8b554:	0005883a 	mov	r2,zero
   8b558:	dfc00217 	ldw	ra,8(sp)
   8b55c:	dc400117 	ldw	r17,4(sp)
   8b560:	dc000017 	ldw	r16,0(sp)
   8b564:	dec00304 	addi	sp,sp,12
   8b568:	f800283a 	ret
   8b56c:	10c0040c 	andi	r3,r2,16
   8b570:	18ffffcc 	andi	r3,r3,65535
   8b574:	18e0001c 	xori	r3,r3,32768
   8b578:	18e00004 	addi	r3,r3,-32768
   8b57c:	18001e26 	beq	r3,zero,8b5f8 <__swsetup_r+0x11c>
   8b580:	10c0010c 	andi	r3,r2,4
   8b584:	18ffffcc 	andi	r3,r3,65535
   8b588:	18e0001c 	xori	r3,r3,32768
   8b58c:	18e00004 	addi	r3,r3,-32768
   8b590:	1800211e 	bne	r3,zero,8b618 <__swsetup_r+0x13c>
   8b594:	80c00417 	ldw	r3,16(r16)
   8b598:	11400214 	ori	r5,r2,8
   8b59c:	8140030d 	sth	r5,12(r16)
   8b5a0:	2805883a 	mov	r2,r5
   8b5a4:	183fe11e 	bne	r3,zero,8b52c <__swsetup_r+0x50>
   8b5a8:	1140a00c 	andi	r5,r2,640
   8b5ac:	01008004 	movi	r4,512
   8b5b0:	293fde26 	beq	r5,r4,8b52c <__swsetup_r+0x50>
   8b5b4:	8809883a 	mov	r4,r17
   8b5b8:	800b883a 	mov	r5,r16
   8b5bc:	008de900 	call	8de90 <__smakebuf_r>
   8b5c0:	8080030b 	ldhu	r2,12(r16)
   8b5c4:	80c00417 	ldw	r3,16(r16)
   8b5c8:	003fd806 	br	8b52c <__swsetup_r+0x50>
   8b5cc:	80800517 	ldw	r2,20(r16)
   8b5d0:	80000215 	stw	zero,8(r16)
   8b5d4:	0085c83a 	sub	r2,zero,r2
   8b5d8:	80800615 	stw	r2,24(r16)
   8b5dc:	183fdd1e 	bne	r3,zero,8b554 <__swsetup_r+0x78>
   8b5e0:	8080030b 	ldhu	r2,12(r16)
   8b5e4:	1080200c 	andi	r2,r2,128
   8b5e8:	10bfffcc 	andi	r2,r2,65535
   8b5ec:	10a0001c 	xori	r2,r2,32768
   8b5f0:	10a00004 	addi	r2,r2,-32768
   8b5f4:	103fd826 	beq	r2,zero,8b558 <__swsetup_r+0x7c>
   8b5f8:	00bfffc4 	movi	r2,-1
   8b5fc:	003fd606 	br	8b558 <__swsetup_r+0x7c>
   8b600:	1009883a 	mov	r4,r2
   8b604:	008d11c0 	call	8d11c <__sinit>
   8b608:	003fc006 	br	8b50c <__swsetup_r+0x30>
   8b60c:	0005883a 	mov	r2,zero
   8b610:	80800215 	stw	r2,8(r16)
   8b614:	003fce06 	br	8b550 <__swsetup_r+0x74>
   8b618:	81400c17 	ldw	r5,48(r16)
   8b61c:	28000626 	beq	r5,zero,8b638 <__swsetup_r+0x15c>
   8b620:	80c01004 	addi	r3,r16,64
   8b624:	28c00326 	beq	r5,r3,8b634 <__swsetup_r+0x158>
   8b628:	8809883a 	mov	r4,r17
   8b62c:	008d4a00 	call	8d4a0 <_free_r>
   8b630:	8080030b 	ldhu	r2,12(r16)
   8b634:	80000c15 	stw	zero,48(r16)
   8b638:	80c00417 	ldw	r3,16(r16)
   8b63c:	013ff6c4 	movi	r4,-37
   8b640:	2084703a 	and	r2,r4,r2
   8b644:	80000115 	stw	zero,4(r16)
   8b648:	80c00015 	stw	r3,0(r16)
   8b64c:	003fd206 	br	8b598 <__swsetup_r+0xbc>

0008b650 <quorem>:
   8b650:	defff704 	addi	sp,sp,-36
   8b654:	dc400115 	stw	r17,4(sp)
   8b658:	20800417 	ldw	r2,16(r4)
   8b65c:	2c400417 	ldw	r17,16(r5)
   8b660:	dd800615 	stw	r22,24(sp)
   8b664:	dd400515 	stw	r21,20(sp)
   8b668:	dfc00815 	stw	ra,32(sp)
   8b66c:	ddc00715 	stw	r23,28(sp)
   8b670:	dd000415 	stw	r20,16(sp)
   8b674:	dcc00315 	stw	r19,12(sp)
   8b678:	dc800215 	stw	r18,8(sp)
   8b67c:	dc000015 	stw	r16,0(sp)
   8b680:	202b883a 	mov	r21,r4
   8b684:	282d883a 	mov	r22,r5
   8b688:	14407116 	blt	r2,r17,8b850 <quorem+0x200>
   8b68c:	88800104 	addi	r2,r17,4
   8b690:	1085883a 	add	r2,r2,r2
   8b694:	1085883a 	add	r2,r2,r2
   8b698:	28a7883a 	add	r19,r5,r2
   8b69c:	2085883a 	add	r2,r4,r2
   8b6a0:	15c00017 	ldw	r23,0(r2)
   8b6a4:	99400017 	ldw	r5,0(r19)
   8b6a8:	8c7fffc4 	addi	r17,r17,-1
   8b6ac:	b809883a 	mov	r4,r23
   8b6b0:	29400044 	addi	r5,r5,1
   8b6b4:	008832c0 	call	8832c <__udivsi3>
   8b6b8:	1025883a 	mov	r18,r2
   8b6bc:	b4000504 	addi	r16,r22,20
   8b6c0:	ad000504 	addi	r20,r21,20
   8b6c4:	10002d26 	beq	r2,zero,8b77c <quorem+0x12c>
   8b6c8:	800d883a 	mov	r6,r16
   8b6cc:	a007883a 	mov	r3,r20
   8b6d0:	000f883a 	mov	r7,zero
   8b6d4:	0005883a 	mov	r2,zero
   8b6d8:	32c00017 	ldw	r11,0(r6)
   8b6dc:	1a400017 	ldw	r9,0(r3)
   8b6e0:	31800104 	addi	r6,r6,4
   8b6e4:	5abfffcc 	andi	r10,r11,65535
   8b6e8:	5495383a 	mul	r10,r10,r18
   8b6ec:	5816d43a 	srli	r11,r11,16
   8b6f0:	4a3fffcc 	andi	r8,r9,65535
   8b6f4:	3a95883a 	add	r10,r7,r10
   8b6f8:	500ed43a 	srli	r7,r10,16
   8b6fc:	5c97383a 	mul	r11,r11,r18
   8b700:	4085883a 	add	r2,r8,r2
   8b704:	52bfffcc 	andi	r10,r10,65535
   8b708:	1291c83a 	sub	r8,r2,r10
   8b70c:	4804d43a 	srli	r2,r9,16
   8b710:	3acf883a 	add	r7,r7,r11
   8b714:	4015d43a 	srai	r10,r8,16
   8b718:	393fffcc 	andi	r4,r7,65535
   8b71c:	1105c83a 	sub	r2,r2,r4
   8b720:	1285883a 	add	r2,r2,r10
   8b724:	1880008d 	sth	r2,2(r3)
   8b728:	1a00000d 	sth	r8,0(r3)
   8b72c:	380ed43a 	srli	r7,r7,16
   8b730:	1005d43a 	srai	r2,r2,16
   8b734:	18c00104 	addi	r3,r3,4
   8b738:	99bfe72e 	bgeu	r19,r6,8b6d8 <quorem+0x88>
   8b73c:	b8000f1e 	bne	r23,zero,8b77c <quorem+0x12c>
   8b740:	88800144 	addi	r2,r17,5
   8b744:	1085883a 	add	r2,r2,r2
   8b748:	1085883a 	add	r2,r2,r2
   8b74c:	a887883a 	add	r3,r21,r2
   8b750:	18bfff04 	addi	r2,r3,-4
   8b754:	a080082e 	bgeu	r20,r2,8b778 <quorem+0x128>
   8b758:	18ffff17 	ldw	r3,-4(r3)
   8b75c:	18000326 	beq	r3,zero,8b76c <quorem+0x11c>
   8b760:	00000506 	br	8b778 <quorem+0x128>
   8b764:	10c00017 	ldw	r3,0(r2)
   8b768:	1800031e 	bne	r3,zero,8b778 <quorem+0x128>
   8b76c:	10bfff04 	addi	r2,r2,-4
   8b770:	8c7fffc4 	addi	r17,r17,-1
   8b774:	a0bffb36 	bltu	r20,r2,8b764 <quorem+0x114>
   8b778:	ac400415 	stw	r17,16(r21)
   8b77c:	a809883a 	mov	r4,r21
   8b780:	b00b883a 	mov	r5,r22
   8b784:	008eafc0 	call	8eafc <__mcmp>
   8b788:	10002516 	blt	r2,zero,8b820 <quorem+0x1d0>
   8b78c:	94800044 	addi	r18,r18,1
   8b790:	a007883a 	mov	r3,r20
   8b794:	000b883a 	mov	r5,zero
   8b798:	1a000017 	ldw	r8,0(r3)
   8b79c:	81c00017 	ldw	r7,0(r16)
   8b7a0:	84000104 	addi	r16,r16,4
   8b7a4:	41bfffcc 	andi	r6,r8,65535
   8b7a8:	38bfffcc 	andi	r2,r7,65535
   8b7ac:	314b883a 	add	r5,r6,r5
   8b7b0:	288dc83a 	sub	r6,r5,r2
   8b7b4:	380ed43a 	srli	r7,r7,16
   8b7b8:	400ad43a 	srli	r5,r8,16
   8b7bc:	3005d43a 	srai	r2,r6,16
   8b7c0:	1980000d 	sth	r6,0(r3)
   8b7c4:	29cbc83a 	sub	r5,r5,r7
   8b7c8:	288b883a 	add	r5,r5,r2
   8b7cc:	1940008d 	sth	r5,2(r3)
   8b7d0:	280bd43a 	srai	r5,r5,16
   8b7d4:	18c00104 	addi	r3,r3,4
   8b7d8:	9c3fef2e 	bgeu	r19,r16,8b798 <quorem+0x148>
   8b7dc:	88800144 	addi	r2,r17,5
   8b7e0:	1085883a 	add	r2,r2,r2
   8b7e4:	1085883a 	add	r2,r2,r2
   8b7e8:	a885883a 	add	r2,r21,r2
   8b7ec:	10c00017 	ldw	r3,0(r2)
   8b7f0:	18000b1e 	bne	r3,zero,8b820 <quorem+0x1d0>
   8b7f4:	10ffff04 	addi	r3,r2,-4
   8b7f8:	a0c0082e 	bgeu	r20,r3,8b81c <quorem+0x1cc>
   8b7fc:	10bfff17 	ldw	r2,-4(r2)
   8b800:	10000326 	beq	r2,zero,8b810 <quorem+0x1c0>
   8b804:	00000506 	br	8b81c <quorem+0x1cc>
   8b808:	18800017 	ldw	r2,0(r3)
   8b80c:	1000031e 	bne	r2,zero,8b81c <quorem+0x1cc>
   8b810:	18ffff04 	addi	r3,r3,-4
   8b814:	8c7fffc4 	addi	r17,r17,-1
   8b818:	a0fffb36 	bltu	r20,r3,8b808 <quorem+0x1b8>
   8b81c:	ac400415 	stw	r17,16(r21)
   8b820:	9005883a 	mov	r2,r18
   8b824:	dfc00817 	ldw	ra,32(sp)
   8b828:	ddc00717 	ldw	r23,28(sp)
   8b82c:	dd800617 	ldw	r22,24(sp)
   8b830:	dd400517 	ldw	r21,20(sp)
   8b834:	dd000417 	ldw	r20,16(sp)
   8b838:	dcc00317 	ldw	r19,12(sp)
   8b83c:	dc800217 	ldw	r18,8(sp)
   8b840:	dc400117 	ldw	r17,4(sp)
   8b844:	dc000017 	ldw	r16,0(sp)
   8b848:	dec00904 	addi	sp,sp,36
   8b84c:	f800283a 	ret
   8b850:	0005883a 	mov	r2,zero
   8b854:	003ff306 	br	8b824 <quorem+0x1d4>

0008b858 <_dtoa_r>:
   8b858:	20801017 	ldw	r2,64(r4)
   8b85c:	deffdf04 	addi	sp,sp,-132
   8b860:	dcc01a15 	stw	r19,104(sp)
   8b864:	dc801915 	stw	r18,100(sp)
   8b868:	dc401815 	stw	r17,96(sp)
   8b86c:	dc001715 	stw	r16,92(sp)
   8b870:	dfc02015 	stw	ra,128(sp)
   8b874:	df001f15 	stw	fp,124(sp)
   8b878:	ddc01e15 	stw	r23,120(sp)
   8b87c:	dd801d15 	stw	r22,116(sp)
   8b880:	dd401c15 	stw	r21,112(sp)
   8b884:	dd001b15 	stw	r20,108(sp)
   8b888:	d9400315 	stw	r5,12(sp)
   8b88c:	d9c00415 	stw	r7,16(sp)
   8b890:	2021883a 	mov	r16,r4
   8b894:	3025883a 	mov	r18,r6
   8b898:	dcc02317 	ldw	r19,140(sp)
   8b89c:	3023883a 	mov	r17,r6
   8b8a0:	10000826 	beq	r2,zero,8b8c4 <_dtoa_r+0x6c>
   8b8a4:	20c01117 	ldw	r3,68(r4)
   8b8a8:	01800044 	movi	r6,1
   8b8ac:	100b883a 	mov	r5,r2
   8b8b0:	30cc983a 	sll	r6,r6,r3
   8b8b4:	10c00115 	stw	r3,4(r2)
   8b8b8:	11800215 	stw	r6,8(r2)
   8b8bc:	008e3000 	call	8e300 <_Bfree>
   8b8c0:	80001015 	stw	zero,64(r16)
   8b8c4:	90002f16 	blt	r18,zero,8b984 <_dtoa_r+0x12c>
   8b8c8:	98000015 	stw	zero,0(r19)
   8b8cc:	90dffc2c 	andhi	r3,r18,32752
   8b8d0:	009ffc34 	movhi	r2,32752
   8b8d4:	18801c26 	beq	r3,r2,8b948 <_dtoa_r+0xf0>
   8b8d8:	d9000317 	ldw	r4,12(sp)
   8b8dc:	880b883a 	mov	r5,r17
   8b8e0:	000d883a 	mov	r6,zero
   8b8e4:	000f883a 	mov	r7,zero
   8b8e8:	00909ec0 	call	909ec <__eqdf2>
   8b8ec:	10002c1e 	bne	r2,zero,8b9a0 <_dtoa_r+0x148>
   8b8f0:	d9002217 	ldw	r4,136(sp)
   8b8f4:	d9c02417 	ldw	r7,144(sp)
   8b8f8:	00800044 	movi	r2,1
   8b8fc:	20800015 	stw	r2,0(r4)
   8b900:	38019426 	beq	r7,zero,8bf54 <_dtoa_r+0x6fc>
   8b904:	008002f4 	movhi	r2,11
   8b908:	10b66844 	addi	r2,r2,-9823
   8b90c:	38800015 	stw	r2,0(r7)
   8b910:	15ffffc4 	addi	r23,r2,-1
   8b914:	b805883a 	mov	r2,r23
   8b918:	dfc02017 	ldw	ra,128(sp)
   8b91c:	df001f17 	ldw	fp,124(sp)
   8b920:	ddc01e17 	ldw	r23,120(sp)
   8b924:	dd801d17 	ldw	r22,116(sp)
   8b928:	dd401c17 	ldw	r21,112(sp)
   8b92c:	dd001b17 	ldw	r20,108(sp)
   8b930:	dcc01a17 	ldw	r19,104(sp)
   8b934:	dc801917 	ldw	r18,100(sp)
   8b938:	dc401817 	ldw	r17,96(sp)
   8b93c:	dc001717 	ldw	r16,92(sp)
   8b940:	dec02104 	addi	sp,sp,132
   8b944:	f800283a 	ret
   8b948:	d8c02217 	ldw	r3,136(sp)
   8b94c:	d9000317 	ldw	r4,12(sp)
   8b950:	0089c3c4 	movi	r2,9999
   8b954:	18800015 	stw	r2,0(r3)
   8b958:	20016c26 	beq	r4,zero,8bf0c <_dtoa_r+0x6b4>
   8b95c:	05c002f4 	movhi	r23,11
   8b960:	bdf67404 	addi	r23,r23,-9776
   8b964:	d9c02417 	ldw	r7,144(sp)
   8b968:	383fea26 	beq	r7,zero,8b914 <_dtoa_r+0xbc>
   8b96c:	b88000c7 	ldb	r2,3(r23)
   8b970:	10016d1e 	bne	r2,zero,8bf28 <_dtoa_r+0x6d0>
   8b974:	b88000c4 	addi	r2,r23,3
   8b978:	d8c02417 	ldw	r3,144(sp)
   8b97c:	18800015 	stw	r2,0(r3)
   8b980:	003fe406 	br	8b914 <_dtoa_r+0xbc>
   8b984:	04600034 	movhi	r17,32768
   8b988:	8c7fffc4 	addi	r17,r17,-1
   8b98c:	9462703a 	and	r17,r18,r17
   8b990:	00800044 	movi	r2,1
   8b994:	98800015 	stw	r2,0(r19)
   8b998:	8825883a 	mov	r18,r17
   8b99c:	003fcb06 	br	8b8cc <_dtoa_r+0x74>
   8b9a0:	d9400317 	ldw	r5,12(sp)
   8b9a4:	9028d53a 	srli	r20,r18,20
   8b9a8:	d8800204 	addi	r2,sp,8
   8b9ac:	d8800015 	stw	r2,0(sp)
   8b9b0:	8009883a 	mov	r4,r16
   8b9b4:	880d883a 	mov	r6,r17
   8b9b8:	d9c00104 	addi	r7,sp,4
   8b9bc:	008eea40 	call	8eea4 <__d2b>
   8b9c0:	a501ffcc 	andi	r20,r20,2047
   8b9c4:	1039883a 	mov	fp,r2
   8b9c8:	a001591e 	bne	r20,zero,8bf30 <_dtoa_r+0x6d8>
   8b9cc:	dd400217 	ldw	r21,8(sp)
   8b9d0:	dd000117 	ldw	r20,4(sp)
   8b9d4:	00befbc4 	movi	r2,-1041
   8b9d8:	ad29883a 	add	r20,r21,r20
   8b9dc:	a082d216 	blt	r20,r2,8c528 <_dtoa_r+0xcd0>
   8b9e0:	d8c00317 	ldw	r3,12(sp)
   8b9e4:	013f0384 	movi	r4,-1010
   8b9e8:	2509c83a 	sub	r4,r4,r20
   8b9ec:	a0810484 	addi	r2,r20,1042
   8b9f0:	9124983a 	sll	r18,r18,r4
   8b9f4:	1884d83a 	srl	r2,r3,r2
   8b9f8:	9088b03a 	or	r4,r18,r2
   8b9fc:	0090b6c0 	call	90b6c <__floatunsidf>
   8ba00:	1009883a 	mov	r4,r2
   8ba04:	017f8434 	movhi	r5,65040
   8ba08:	00800044 	movi	r2,1
   8ba0c:	194b883a 	add	r5,r3,r5
   8ba10:	a53fffc4 	addi	r20,r20,-1
   8ba14:	d8800f15 	stw	r2,60(sp)
   8ba18:	000d883a 	mov	r6,zero
   8ba1c:	01cffe34 	movhi	r7,16376
   8ba20:	0087b100 	call	87b10 <__subdf3>
   8ba24:	1009883a 	mov	r4,r2
   8ba28:	180b883a 	mov	r5,r3
   8ba2c:	0198dbf4 	movhi	r6,25455
   8ba30:	3190d844 	addi	r6,r6,17249
   8ba34:	01cff4f4 	movhi	r7,16339
   8ba38:	39e1e9c4 	addi	r7,r7,-30809
   8ba3c:	0087b700 	call	87b70 <__muldf3>
   8ba40:	180b883a 	mov	r5,r3
   8ba44:	01a2d874 	movhi	r6,35681
   8ba48:	31b22cc4 	addi	r6,r6,-14157
   8ba4c:	01cff1f4 	movhi	r7,16327
   8ba50:	39e28a04 	addi	r7,r7,-30168
   8ba54:	1009883a 	mov	r4,r2
   8ba58:	0087abc0 	call	87abc <__adddf3>
   8ba5c:	a009883a 	mov	r4,r20
   8ba60:	1027883a 	mov	r19,r2
   8ba64:	1825883a 	mov	r18,r3
   8ba68:	00880640 	call	88064 <__floatsidf>
   8ba6c:	1009883a 	mov	r4,r2
   8ba70:	180b883a 	mov	r5,r3
   8ba74:	019427f4 	movhi	r6,20639
   8ba78:	319e7ec4 	addi	r6,r6,31227
   8ba7c:	01cff4f4 	movhi	r7,16339
   8ba80:	39d104c4 	addi	r7,r7,17427
   8ba84:	0087b700 	call	87b70 <__muldf3>
   8ba88:	9809883a 	mov	r4,r19
   8ba8c:	900b883a 	mov	r5,r18
   8ba90:	100d883a 	mov	r6,r2
   8ba94:	180f883a 	mov	r7,r3
   8ba98:	0087abc0 	call	87abc <__adddf3>
   8ba9c:	1009883a 	mov	r4,r2
   8baa0:	180b883a 	mov	r5,r3
   8baa4:	1027883a 	mov	r19,r2
   8baa8:	1825883a 	mov	r18,r3
   8baac:	00881380 	call	88138 <__fixdfsi>
   8bab0:	9809883a 	mov	r4,r19
   8bab4:	900b883a 	mov	r5,r18
   8bab8:	000d883a 	mov	r6,zero
   8babc:	000f883a 	mov	r7,zero
   8bac0:	d8800615 	stw	r2,24(sp)
   8bac4:	00880080 	call	88008 <__ltdf2>
   8bac8:	10027e16 	blt	r2,zero,8c4c4 <_dtoa_r+0xc6c>
   8bacc:	d8c00617 	ldw	r3,24(sp)
   8bad0:	00800584 	movi	r2,22
   8bad4:	10c26c36 	bltu	r2,r3,8c488 <_dtoa_r+0xc30>
   8bad8:	180490fa 	slli	r2,r3,3
   8badc:	00c002f4 	movhi	r3,11
   8bae0:	18f69904 	addi	r3,r3,-9628
   8bae4:	d9800317 	ldw	r6,12(sp)
   8bae8:	1885883a 	add	r2,r3,r2
   8baec:	11000017 	ldw	r4,0(r2)
   8baf0:	11400117 	ldw	r5,4(r2)
   8baf4:	880f883a 	mov	r7,r17
   8baf8:	0090aa40 	call	90aa4 <__gtdf2>
   8bafc:	00828f0e 	bge	zero,r2,8c53c <_dtoa_r+0xce4>
   8bb00:	d8800617 	ldw	r2,24(sp)
   8bb04:	d8000d15 	stw	zero,52(sp)
   8bb08:	10bfffc4 	addi	r2,r2,-1
   8bb0c:	d8800615 	stw	r2,24(sp)
   8bb10:	ad29c83a 	sub	r20,r21,r20
   8bb14:	a53fffc4 	addi	r20,r20,-1
   8bb18:	a0026616 	blt	r20,zero,8c4b4 <_dtoa_r+0xc5c>
   8bb1c:	dd000715 	stw	r20,28(sp)
   8bb20:	d8000815 	stw	zero,32(sp)
   8bb24:	d8800617 	ldw	r2,24(sp)
   8bb28:	10025a16 	blt	r2,zero,8c494 <_dtoa_r+0xc3c>
   8bb2c:	d8c00717 	ldw	r3,28(sp)
   8bb30:	d8800b15 	stw	r2,44(sp)
   8bb34:	d8000a15 	stw	zero,40(sp)
   8bb38:	1887883a 	add	r3,r3,r2
   8bb3c:	d8c00715 	stw	r3,28(sp)
   8bb40:	d9c00417 	ldw	r7,16(sp)
   8bb44:	00800244 	movi	r2,9
   8bb48:	11c10536 	bltu	r2,r7,8bf60 <_dtoa_r+0x708>
   8bb4c:	00800144 	movi	r2,5
   8bb50:	11c4c60e 	bge	r2,r7,8ce6c <_dtoa_r+0x1614>
   8bb54:	39ffff04 	addi	r7,r7,-4
   8bb58:	d9c00415 	stw	r7,16(sp)
   8bb5c:	0027883a 	mov	r19,zero
   8bb60:	d9c00417 	ldw	r7,16(sp)
   8bb64:	008000c4 	movi	r2,3
   8bb68:	3883a226 	beq	r7,r2,8c9f4 <_dtoa_r+0x119c>
   8bb6c:	11c2bc16 	blt	r2,r7,8c660 <_dtoa_r+0xe08>
   8bb70:	00800084 	movi	r2,2
   8bb74:	3880fb1e 	bne	r7,r2,8bf64 <_dtoa_r+0x70c>
   8bb78:	d8000c15 	stw	zero,48(sp)
   8bb7c:	d9002117 	ldw	r4,132(sp)
   8bb80:	0103ae0e 	bge	zero,r4,8ca3c <_dtoa_r+0x11e4>
   8bb84:	2025883a 	mov	r18,r4
   8bb88:	d9000e15 	stw	r4,56(sp)
   8bb8c:	d9000915 	stw	r4,36(sp)
   8bb90:	80001115 	stw	zero,68(r16)
   8bb94:	008005c4 	movi	r2,23
   8bb98:	1484b22e 	bgeu	r2,r18,8ce64 <_dtoa_r+0x160c>
   8bb9c:	00c00044 	movi	r3,1
   8bba0:	00800104 	movi	r2,4
   8bba4:	1085883a 	add	r2,r2,r2
   8bba8:	11000504 	addi	r4,r2,20
   8bbac:	180b883a 	mov	r5,r3
   8bbb0:	18c00044 	addi	r3,r3,1
   8bbb4:	913ffb2e 	bgeu	r18,r4,8bba4 <_dtoa_r+0x34c>
   8bbb8:	81401115 	stw	r5,68(r16)
   8bbbc:	8009883a 	mov	r4,r16
   8bbc0:	008e2580 	call	8e258 <_Balloc>
   8bbc4:	102f883a 	mov	r23,r2
   8bbc8:	80801015 	stw	r2,64(r16)
   8bbcc:	00800384 	movi	r2,14
   8bbd0:	1480f036 	bltu	r2,r18,8bf94 <_dtoa_r+0x73c>
   8bbd4:	9800ef26 	beq	r19,zero,8bf94 <_dtoa_r+0x73c>
   8bbd8:	d8800617 	ldw	r2,24(sp)
   8bbdc:	00839c0e 	bge	zero,r2,8ca50 <_dtoa_r+0x11f8>
   8bbe0:	d8c00617 	ldw	r3,24(sp)
   8bbe4:	108003cc 	andi	r2,r2,15
   8bbe8:	100490fa 	slli	r2,r2,3
   8bbec:	182bd13a 	srai	r21,r3,4
   8bbf0:	00c002f4 	movhi	r3,11
   8bbf4:	18f69904 	addi	r3,r3,-9628
   8bbf8:	1885883a 	add	r2,r3,r2
   8bbfc:	a8c0040c 	andi	r3,r21,16
   8bc00:	12800017 	ldw	r10,0(r2)
   8bc04:	15800117 	ldw	r22,4(r2)
   8bc08:	18038726 	beq	r3,zero,8ca28 <_dtoa_r+0x11d0>
   8bc0c:	008002f4 	movhi	r2,11
   8bc10:	10b68f04 	addi	r2,r2,-9668
   8bc14:	11800817 	ldw	r6,32(r2)
   8bc18:	11c00917 	ldw	r7,36(r2)
   8bc1c:	d9000317 	ldw	r4,12(sp)
   8bc20:	880b883a 	mov	r5,r17
   8bc24:	da801515 	stw	r10,84(sp)
   8bc28:	0087e540 	call	87e54 <__divdf3>
   8bc2c:	da801517 	ldw	r10,84(sp)
   8bc30:	d8801015 	stw	r2,64(sp)
   8bc34:	1829883a 	mov	r20,r3
   8bc38:	ad4003cc 	andi	r21,r21,15
   8bc3c:	048000c4 	movi	r18,3
   8bc40:	a8001126 	beq	r21,zero,8bc88 <_dtoa_r+0x430>
   8bc44:	04c002f4 	movhi	r19,11
   8bc48:	9cf68f04 	addi	r19,r19,-9668
   8bc4c:	5005883a 	mov	r2,r10
   8bc50:	b007883a 	mov	r3,r22
   8bc54:	a980004c 	andi	r6,r21,1
   8bc58:	1009883a 	mov	r4,r2
   8bc5c:	a82bd07a 	srai	r21,r21,1
   8bc60:	180b883a 	mov	r5,r3
   8bc64:	30000426 	beq	r6,zero,8bc78 <_dtoa_r+0x420>
   8bc68:	99800017 	ldw	r6,0(r19)
   8bc6c:	99c00117 	ldw	r7,4(r19)
   8bc70:	94800044 	addi	r18,r18,1
   8bc74:	0087b700 	call	87b70 <__muldf3>
   8bc78:	9cc00204 	addi	r19,r19,8
   8bc7c:	a83ff51e 	bne	r21,zero,8bc54 <_dtoa_r+0x3fc>
   8bc80:	1015883a 	mov	r10,r2
   8bc84:	182d883a 	mov	r22,r3
   8bc88:	d9001017 	ldw	r4,64(sp)
   8bc8c:	a00b883a 	mov	r5,r20
   8bc90:	500d883a 	mov	r6,r10
   8bc94:	b00f883a 	mov	r7,r22
   8bc98:	0087e540 	call	87e54 <__divdf3>
   8bc9c:	1027883a 	mov	r19,r2
   8bca0:	1829883a 	mov	r20,r3
   8bca4:	d8c00d17 	ldw	r3,52(sp)
   8bca8:	18000626 	beq	r3,zero,8bcc4 <_dtoa_r+0x46c>
   8bcac:	9809883a 	mov	r4,r19
   8bcb0:	a00b883a 	mov	r5,r20
   8bcb4:	000d883a 	mov	r6,zero
   8bcb8:	01cffc34 	movhi	r7,16368
   8bcbc:	00880080 	call	88008 <__ltdf2>
   8bcc0:	10040e16 	blt	r2,zero,8ccfc <_dtoa_r+0x14a4>
   8bcc4:	9009883a 	mov	r4,r18
   8bcc8:	00880640 	call	88064 <__floatsidf>
   8bccc:	1009883a 	mov	r4,r2
   8bcd0:	180b883a 	mov	r5,r3
   8bcd4:	980d883a 	mov	r6,r19
   8bcd8:	a00f883a 	mov	r7,r20
   8bcdc:	0087b700 	call	87b70 <__muldf3>
   8bce0:	1009883a 	mov	r4,r2
   8bce4:	180b883a 	mov	r5,r3
   8bce8:	000d883a 	mov	r6,zero
   8bcec:	01d00734 	movhi	r7,16412
   8bcf0:	0087abc0 	call	87abc <__adddf3>
   8bcf4:	057f3034 	movhi	r21,64704
   8bcf8:	1d6b883a 	add	r21,r3,r21
   8bcfc:	d8c00917 	ldw	r3,36(sp)
   8bd00:	1025883a 	mov	r18,r2
   8bd04:	18031f26 	beq	r3,zero,8c984 <_dtoa_r+0x112c>
   8bd08:	d8800617 	ldw	r2,24(sp)
   8bd0c:	dac00917 	ldw	r11,36(sp)
   8bd10:	d8801315 	stw	r2,76(sp)
   8bd14:	d8c00c17 	ldw	r3,48(sp)
   8bd18:	18039026 	beq	r3,zero,8cb5c <_dtoa_r+0x1304>
   8bd1c:	58bfffc4 	addi	r2,r11,-1
   8bd20:	100490fa 	slli	r2,r2,3
   8bd24:	00c002f4 	movhi	r3,11
   8bd28:	18f69904 	addi	r3,r3,-9628
   8bd2c:	0009883a 	mov	r4,zero
   8bd30:	1885883a 	add	r2,r3,r2
   8bd34:	11800017 	ldw	r6,0(r2)
   8bd38:	11c00117 	ldw	r7,4(r2)
   8bd3c:	014ff834 	movhi	r5,16352
   8bd40:	dac01615 	stw	r11,88(sp)
   8bd44:	0087e540 	call	87e54 <__divdf3>
   8bd48:	900d883a 	mov	r6,r18
   8bd4c:	a80f883a 	mov	r7,r21
   8bd50:	1009883a 	mov	r4,r2
   8bd54:	180b883a 	mov	r5,r3
   8bd58:	0087b100 	call	87b10 <__subdf3>
   8bd5c:	a00b883a 	mov	r5,r20
   8bd60:	9809883a 	mov	r4,r19
   8bd64:	182b883a 	mov	r21,r3
   8bd68:	d8801015 	stw	r2,64(sp)
   8bd6c:	00881380 	call	88138 <__fixdfsi>
   8bd70:	1009883a 	mov	r4,r2
   8bd74:	d8801515 	stw	r2,84(sp)
   8bd78:	00880640 	call	88064 <__floatsidf>
   8bd7c:	9809883a 	mov	r4,r19
   8bd80:	a00b883a 	mov	r5,r20
   8bd84:	100d883a 	mov	r6,r2
   8bd88:	180f883a 	mov	r7,r3
   8bd8c:	0087b100 	call	87b10 <__subdf3>
   8bd90:	da401517 	ldw	r9,84(sp)
   8bd94:	d9001017 	ldw	r4,64(sp)
   8bd98:	a80b883a 	mov	r5,r21
   8bd9c:	4d000c04 	addi	r20,r9,48
   8bda0:	bd000005 	stb	r20,0(r23)
   8bda4:	100d883a 	mov	r6,r2
   8bda8:	180f883a 	mov	r7,r3
   8bdac:	bd800044 	addi	r22,r23,1
   8bdb0:	1025883a 	mov	r18,r2
   8bdb4:	1827883a 	mov	r19,r3
   8bdb8:	0090aa40 	call	90aa4 <__gtdf2>
   8bdbc:	00842216 	blt	zero,r2,8ce48 <_dtoa_r+0x15f0>
   8bdc0:	0009883a 	mov	r4,zero
   8bdc4:	014ffc34 	movhi	r5,16368
   8bdc8:	900d883a 	mov	r6,r18
   8bdcc:	980f883a 	mov	r7,r19
   8bdd0:	0087b100 	call	87b10 <__subdf3>
   8bdd4:	d9001017 	ldw	r4,64(sp)
   8bdd8:	a80b883a 	mov	r5,r21
   8bddc:	100d883a 	mov	r6,r2
   8bde0:	180f883a 	mov	r7,r3
   8bde4:	0090aa40 	call	90aa4 <__gtdf2>
   8bde8:	dac01617 	ldw	r11,88(sp)
   8bdec:	00841316 	blt	zero,r2,8ce3c <_dtoa_r+0x15e4>
   8bdf0:	00800044 	movi	r2,1
   8bdf4:	12c0670e 	bge	r2,r11,8bf94 <_dtoa_r+0x73c>
   8bdf8:	bad7883a 	add	r11,r23,r11
   8bdfc:	df001115 	stw	fp,68(sp)
   8be00:	dc401215 	stw	r17,72(sp)
   8be04:	5839883a 	mov	fp,r11
   8be08:	dc401017 	ldw	r17,64(sp)
   8be0c:	00000806 	br	8be30 <_dtoa_r+0x5d8>
   8be10:	0087b100 	call	87b10 <__subdf3>
   8be14:	1009883a 	mov	r4,r2
   8be18:	180b883a 	mov	r5,r3
   8be1c:	880d883a 	mov	r6,r17
   8be20:	a80f883a 	mov	r7,r21
   8be24:	00880080 	call	88008 <__ltdf2>
   8be28:	1003ee16 	blt	r2,zero,8cde4 <_dtoa_r+0x158c>
   8be2c:	b703f126 	beq	r22,fp,8cdf4 <_dtoa_r+0x159c>
   8be30:	8809883a 	mov	r4,r17
   8be34:	a80b883a 	mov	r5,r21
   8be38:	000d883a 	mov	r6,zero
   8be3c:	01d00934 	movhi	r7,16420
   8be40:	0087b700 	call	87b70 <__muldf3>
   8be44:	000d883a 	mov	r6,zero
   8be48:	01d00934 	movhi	r7,16420
   8be4c:	9009883a 	mov	r4,r18
   8be50:	980b883a 	mov	r5,r19
   8be54:	1023883a 	mov	r17,r2
   8be58:	182b883a 	mov	r21,r3
   8be5c:	0087b700 	call	87b70 <__muldf3>
   8be60:	180b883a 	mov	r5,r3
   8be64:	1009883a 	mov	r4,r2
   8be68:	1825883a 	mov	r18,r3
   8be6c:	1027883a 	mov	r19,r2
   8be70:	00881380 	call	88138 <__fixdfsi>
   8be74:	1009883a 	mov	r4,r2
   8be78:	1029883a 	mov	r20,r2
   8be7c:	00880640 	call	88064 <__floatsidf>
   8be80:	9809883a 	mov	r4,r19
   8be84:	900b883a 	mov	r5,r18
   8be88:	100d883a 	mov	r6,r2
   8be8c:	180f883a 	mov	r7,r3
   8be90:	0087b100 	call	87b10 <__subdf3>
   8be94:	a5000c04 	addi	r20,r20,48
   8be98:	b5000005 	stb	r20,0(r22)
   8be9c:	1009883a 	mov	r4,r2
   8bea0:	180b883a 	mov	r5,r3
   8bea4:	880d883a 	mov	r6,r17
   8bea8:	a80f883a 	mov	r7,r21
   8beac:	1025883a 	mov	r18,r2
   8beb0:	1827883a 	mov	r19,r3
   8beb4:	00880080 	call	88008 <__ltdf2>
   8beb8:	b5800044 	addi	r22,r22,1
   8bebc:	0009883a 	mov	r4,zero
   8bec0:	014ffc34 	movhi	r5,16368
   8bec4:	900d883a 	mov	r6,r18
   8bec8:	980f883a 	mov	r7,r19
   8becc:	103fd00e 	bge	r2,zero,8be10 <_dtoa_r+0x5b8>
   8bed0:	d9001317 	ldw	r4,76(sp)
   8bed4:	df001117 	ldw	fp,68(sp)
   8bed8:	d9000615 	stw	r4,24(sp)
   8bedc:	8009883a 	mov	r4,r16
   8bee0:	e00b883a 	mov	r5,fp
   8bee4:	008e3000 	call	8e300 <_Bfree>
   8bee8:	d9c00617 	ldw	r7,24(sp)
   8beec:	d8c02217 	ldw	r3,136(sp)
   8bef0:	d9002417 	ldw	r4,144(sp)
   8bef4:	b0000005 	stb	zero,0(r22)
   8bef8:	38800044 	addi	r2,r7,1
   8befc:	18800015 	stw	r2,0(r3)
   8bf00:	203e8426 	beq	r4,zero,8b914 <_dtoa_r+0xbc>
   8bf04:	25800015 	stw	r22,0(r4)
   8bf08:	003e8206 	br	8b914 <_dtoa_r+0xbc>
   8bf0c:	00800434 	movhi	r2,16
   8bf10:	10bfffc4 	addi	r2,r2,-1
   8bf14:	90a4703a 	and	r18,r18,r2
   8bf18:	903e901e 	bne	r18,zero,8b95c <_dtoa_r+0x104>
   8bf1c:	05c002f4 	movhi	r23,11
   8bf20:	bdf67104 	addi	r23,r23,-9788
   8bf24:	003e8f06 	br	8b964 <_dtoa_r+0x10c>
   8bf28:	b8800204 	addi	r2,r23,8
   8bf2c:	003e9206 	br	8b978 <_dtoa_r+0x120>
   8bf30:	01400434 	movhi	r5,16
   8bf34:	297fffc4 	addi	r5,r5,-1
   8bf38:	894a703a 	and	r5,r17,r5
   8bf3c:	d9000317 	ldw	r4,12(sp)
   8bf40:	294ffc34 	orhi	r5,r5,16368
   8bf44:	a53f0044 	addi	r20,r20,-1023
   8bf48:	dd400217 	ldw	r21,8(sp)
   8bf4c:	d8000f15 	stw	zero,60(sp)
   8bf50:	003eb106 	br	8ba18 <_dtoa_r+0x1c0>
   8bf54:	05c002f4 	movhi	r23,11
   8bf58:	bdf66804 	addi	r23,r23,-9824
   8bf5c:	003e6d06 	br	8b914 <_dtoa_r+0xbc>
   8bf60:	d8000415 	stw	zero,16(sp)
   8bf64:	80001115 	stw	zero,68(r16)
   8bf68:	8009883a 	mov	r4,r16
   8bf6c:	000b883a 	mov	r5,zero
   8bf70:	008e2580 	call	8e258 <_Balloc>
   8bf74:	01ffffc4 	movi	r7,-1
   8bf78:	102f883a 	mov	r23,r2
   8bf7c:	80801015 	stw	r2,64(r16)
   8bf80:	00800044 	movi	r2,1
   8bf84:	d9c00915 	stw	r7,36(sp)
   8bf88:	d8002115 	stw	zero,132(sp)
   8bf8c:	d9c00e15 	stw	r7,56(sp)
   8bf90:	d8800c15 	stw	r2,48(sp)
   8bf94:	d8800117 	ldw	r2,4(sp)
   8bf98:	10008b16 	blt	r2,zero,8c1c8 <_dtoa_r+0x970>
   8bf9c:	d9000617 	ldw	r4,24(sp)
   8bfa0:	00c00384 	movi	r3,14
   8bfa4:	19008816 	blt	r3,r4,8c1c8 <_dtoa_r+0x970>
   8bfa8:	200490fa 	slli	r2,r4,3
   8bfac:	d9c02117 	ldw	r7,132(sp)
   8bfb0:	00c002f4 	movhi	r3,11
   8bfb4:	18f69904 	addi	r3,r3,-9628
   8bfb8:	1885883a 	add	r2,r3,r2
   8bfbc:	14800017 	ldw	r18,0(r2)
   8bfc0:	14c00117 	ldw	r19,4(r2)
   8bfc4:	3801c916 	blt	r7,zero,8c6ec <_dtoa_r+0xe94>
   8bfc8:	d9000317 	ldw	r4,12(sp)
   8bfcc:	900d883a 	mov	r6,r18
   8bfd0:	980f883a 	mov	r7,r19
   8bfd4:	880b883a 	mov	r5,r17
   8bfd8:	0087e540 	call	87e54 <__divdf3>
   8bfdc:	180b883a 	mov	r5,r3
   8bfe0:	1009883a 	mov	r4,r2
   8bfe4:	00881380 	call	88138 <__fixdfsi>
   8bfe8:	1009883a 	mov	r4,r2
   8bfec:	102b883a 	mov	r21,r2
   8bff0:	00880640 	call	88064 <__floatsidf>
   8bff4:	1009883a 	mov	r4,r2
   8bff8:	180b883a 	mov	r5,r3
   8bffc:	900d883a 	mov	r6,r18
   8c000:	980f883a 	mov	r7,r19
   8c004:	0087b700 	call	87b70 <__muldf3>
   8c008:	d9000317 	ldw	r4,12(sp)
   8c00c:	880b883a 	mov	r5,r17
   8c010:	100d883a 	mov	r6,r2
   8c014:	180f883a 	mov	r7,r3
   8c018:	0087b100 	call	87b10 <__subdf3>
   8c01c:	d9c00917 	ldw	r7,36(sp)
   8c020:	1009883a 	mov	r4,r2
   8c024:	a8800c04 	addi	r2,r21,48
   8c028:	b8800005 	stb	r2,0(r23)
   8c02c:	01800044 	movi	r6,1
   8c030:	180b883a 	mov	r5,r3
   8c034:	2005883a 	mov	r2,r4
   8c038:	bd800044 	addi	r22,r23,1
   8c03c:	39803726 	beq	r7,r6,8c11c <_dtoa_r+0x8c4>
   8c040:	000d883a 	mov	r6,zero
   8c044:	01d00934 	movhi	r7,16420
   8c048:	0087b700 	call	87b70 <__muldf3>
   8c04c:	1009883a 	mov	r4,r2
   8c050:	180b883a 	mov	r5,r3
   8c054:	000d883a 	mov	r6,zero
   8c058:	000f883a 	mov	r7,zero
   8c05c:	1029883a 	mov	r20,r2
   8c060:	1823883a 	mov	r17,r3
   8c064:	00909ec0 	call	909ec <__eqdf2>
   8c068:	103f9c26 	beq	r2,zero,8bedc <_dtoa_r+0x684>
   8c06c:	dd400917 	ldw	r21,36(sp)
   8c070:	dc000415 	stw	r16,16(sp)
   8c074:	00000906 	br	8c09c <_dtoa_r+0x844>
   8c078:	0087b700 	call	87b70 <__muldf3>
   8c07c:	1009883a 	mov	r4,r2
   8c080:	180b883a 	mov	r5,r3
   8c084:	000d883a 	mov	r6,zero
   8c088:	000f883a 	mov	r7,zero
   8c08c:	1029883a 	mov	r20,r2
   8c090:	1823883a 	mov	r17,r3
   8c094:	00909ec0 	call	909ec <__eqdf2>
   8c098:	10022926 	beq	r2,zero,8c940 <_dtoa_r+0x10e8>
   8c09c:	900d883a 	mov	r6,r18
   8c0a0:	980f883a 	mov	r7,r19
   8c0a4:	a009883a 	mov	r4,r20
   8c0a8:	880b883a 	mov	r5,r17
   8c0ac:	0087e540 	call	87e54 <__divdf3>
   8c0b0:	180b883a 	mov	r5,r3
   8c0b4:	1009883a 	mov	r4,r2
   8c0b8:	00881380 	call	88138 <__fixdfsi>
   8c0bc:	1009883a 	mov	r4,r2
   8c0c0:	1021883a 	mov	r16,r2
   8c0c4:	00880640 	call	88064 <__floatsidf>
   8c0c8:	1009883a 	mov	r4,r2
   8c0cc:	180b883a 	mov	r5,r3
   8c0d0:	900d883a 	mov	r6,r18
   8c0d4:	980f883a 	mov	r7,r19
   8c0d8:	0087b700 	call	87b70 <__muldf3>
   8c0dc:	a009883a 	mov	r4,r20
   8c0e0:	880b883a 	mov	r5,r17
   8c0e4:	100d883a 	mov	r6,r2
   8c0e8:	180f883a 	mov	r7,r3
   8c0ec:	0087b100 	call	87b10 <__subdf3>
   8c0f0:	82400c04 	addi	r9,r16,48
   8c0f4:	b2400005 	stb	r9,0(r22)
   8c0f8:	b5800044 	addi	r22,r22,1
   8c0fc:	b5d3c83a 	sub	r9,r22,r23
   8c100:	000d883a 	mov	r6,zero
   8c104:	01d00934 	movhi	r7,16420
   8c108:	1009883a 	mov	r4,r2
   8c10c:	180b883a 	mov	r5,r3
   8c110:	aa7fd91e 	bne	r21,r9,8c078 <_dtoa_r+0x820>
   8c114:	802b883a 	mov	r21,r16
   8c118:	dc000417 	ldw	r16,16(sp)
   8c11c:	1009883a 	mov	r4,r2
   8c120:	180b883a 	mov	r5,r3
   8c124:	100d883a 	mov	r6,r2
   8c128:	180f883a 	mov	r7,r3
   8c12c:	0087abc0 	call	87abc <__adddf3>
   8c130:	9009883a 	mov	r4,r18
   8c134:	980b883a 	mov	r5,r19
   8c138:	100d883a 	mov	r6,r2
   8c13c:	180f883a 	mov	r7,r3
   8c140:	1023883a 	mov	r17,r2
   8c144:	1829883a 	mov	r20,r3
   8c148:	00880080 	call	88008 <__ltdf2>
   8c14c:	10000816 	blt	r2,zero,8c170 <_dtoa_r+0x918>
   8c150:	9009883a 	mov	r4,r18
   8c154:	980b883a 	mov	r5,r19
   8c158:	880d883a 	mov	r6,r17
   8c15c:	a00f883a 	mov	r7,r20
   8c160:	00909ec0 	call	909ec <__eqdf2>
   8c164:	103f5d1e 	bne	r2,zero,8bedc <_dtoa_r+0x684>
   8c168:	ad40004c 	andi	r21,r21,1
   8c16c:	a83f5b26 	beq	r21,zero,8bedc <_dtoa_r+0x684>
   8c170:	b53fffc3 	ldbu	r20,-1(r22)
   8c174:	b0ffff84 	addi	r3,r22,-2
   8c178:	01400e44 	movi	r5,57
   8c17c:	00000306 	br	8c18c <_dtoa_r+0x934>
   8c180:	1d000003 	ldbu	r20,0(r3)
   8c184:	102d883a 	mov	r22,r2
   8c188:	18ffffc4 	addi	r3,r3,-1
   8c18c:	a1003fcc 	andi	r4,r20,255
   8c190:	2100201c 	xori	r4,r4,128
   8c194:	213fe004 	addi	r4,r4,-128
   8c198:	b0bfffc4 	addi	r2,r22,-1
   8c19c:	2142ca1e 	bne	r4,r5,8ccc8 <_dtoa_r+0x1470>
   8c1a0:	b8bff71e 	bne	r23,r2,8c180 <_dtoa_r+0x928>
   8c1a4:	d8800617 	ldw	r2,24(sp)
   8c1a8:	05000c44 	movi	r20,49
   8c1ac:	10800044 	addi	r2,r2,1
   8c1b0:	d8800615 	stw	r2,24(sp)
   8c1b4:	00800c04 	movi	r2,48
   8c1b8:	b8800005 	stb	r2,0(r23)
   8c1bc:	b805883a 	mov	r2,r23
   8c1c0:	15000005 	stb	r20,0(r2)
   8c1c4:	003f4506 	br	8bedc <_dtoa_r+0x684>
   8c1c8:	d9c00c17 	ldw	r7,48(sp)
   8c1cc:	3800c926 	beq	r7,zero,8c4f4 <_dtoa_r+0xc9c>
   8c1d0:	d9c00417 	ldw	r7,16(sp)
   8c1d4:	00c00044 	movi	r3,1
   8c1d8:	19c16c0e 	bge	r3,r7,8c78c <_dtoa_r+0xf34>
   8c1dc:	d9000917 	ldw	r4,36(sp)
   8c1e0:	d9c00a17 	ldw	r7,40(sp)
   8c1e4:	24ffffc4 	addi	r19,r4,-1
   8c1e8:	3cc20716 	blt	r7,r19,8ca08 <_dtoa_r+0x11b0>
   8c1ec:	3ce7c83a 	sub	r19,r7,r19
   8c1f0:	d9c00917 	ldw	r7,36(sp)
   8c1f4:	3802ae16 	blt	r7,zero,8ccb0 <_dtoa_r+0x1458>
   8c1f8:	dc800817 	ldw	r18,32(sp)
   8c1fc:	d8800917 	ldw	r2,36(sp)
   8c200:	d8c00817 	ldw	r3,32(sp)
   8c204:	d9c00717 	ldw	r7,28(sp)
   8c208:	8009883a 	mov	r4,r16
   8c20c:	1887883a 	add	r3,r3,r2
   8c210:	388f883a 	add	r7,r7,r2
   8c214:	01400044 	movi	r5,1
   8c218:	d8c00815 	stw	r3,32(sp)
   8c21c:	d9c00715 	stw	r7,28(sp)
   8c220:	008e6580 	call	8e658 <__i2b>
   8c224:	102b883a 	mov	r21,r2
   8c228:	90000a26 	beq	r18,zero,8c254 <_dtoa_r+0x9fc>
   8c22c:	d8800717 	ldw	r2,28(sp)
   8c230:	0080080e 	bge	zero,r2,8c254 <_dtoa_r+0x9fc>
   8c234:	90812b16 	blt	r18,r2,8c6e4 <_dtoa_r+0xe8c>
   8c238:	d8c00817 	ldw	r3,32(sp)
   8c23c:	d9000717 	ldw	r4,28(sp)
   8c240:	90a5c83a 	sub	r18,r18,r2
   8c244:	1887c83a 	sub	r3,r3,r2
   8c248:	2089c83a 	sub	r4,r4,r2
   8c24c:	d8c00815 	stw	r3,32(sp)
   8c250:	d9000715 	stw	r4,28(sp)
   8c254:	d9c00a17 	ldw	r7,40(sp)
   8c258:	01c0140e 	bge	zero,r7,8c2ac <_dtoa_r+0xa54>
   8c25c:	d8800c17 	ldw	r2,48(sp)
   8c260:	1001de26 	beq	r2,zero,8c9dc <_dtoa_r+0x1184>
   8c264:	04c00e0e 	bge	zero,r19,8c2a0 <_dtoa_r+0xa48>
   8c268:	a80b883a 	mov	r5,r21
   8c26c:	8009883a 	mov	r4,r16
   8c270:	980d883a 	mov	r6,r19
   8c274:	008e8740 	call	8e874 <__pow5mult>
   8c278:	e00d883a 	mov	r6,fp
   8c27c:	8009883a 	mov	r4,r16
   8c280:	100b883a 	mov	r5,r2
   8c284:	102b883a 	mov	r21,r2
   8c288:	008e6940 	call	8e694 <__multiply>
   8c28c:	1029883a 	mov	r20,r2
   8c290:	e00b883a 	mov	r5,fp
   8c294:	8009883a 	mov	r4,r16
   8c298:	008e3000 	call	8e300 <_Bfree>
   8c29c:	a039883a 	mov	fp,r20
   8c2a0:	d8c00a17 	ldw	r3,40(sp)
   8c2a4:	1ccdc83a 	sub	r6,r3,r19
   8c2a8:	3001291e 	bne	r6,zero,8c750 <_dtoa_r+0xef8>
   8c2ac:	8009883a 	mov	r4,r16
   8c2b0:	01400044 	movi	r5,1
   8c2b4:	008e6580 	call	8e658 <__i2b>
   8c2b8:	d9000b17 	ldw	r4,44(sp)
   8c2bc:	1029883a 	mov	r20,r2
   8c2c0:	0100050e 	bge	zero,r4,8c2d8 <_dtoa_r+0xa80>
   8c2c4:	d9800b17 	ldw	r6,44(sp)
   8c2c8:	8009883a 	mov	r4,r16
   8c2cc:	100b883a 	mov	r5,r2
   8c2d0:	008e8740 	call	8e874 <__pow5mult>
   8c2d4:	1029883a 	mov	r20,r2
   8c2d8:	d9c00417 	ldw	r7,16(sp)
   8c2dc:	00800044 	movi	r2,1
   8c2e0:	11c0f00e 	bge	r2,r7,8c6a4 <_dtoa_r+0xe4c>
   8c2e4:	0023883a 	mov	r17,zero
   8c2e8:	d8800b17 	ldw	r2,44(sp)
   8c2ec:	1001741e 	bne	r2,zero,8c8c0 <_dtoa_r+0x1068>
   8c2f0:	00800044 	movi	r2,1
   8c2f4:	d8c00717 	ldw	r3,28(sp)
   8c2f8:	10c5883a 	add	r2,r2,r3
   8c2fc:	108007cc 	andi	r2,r2,31
   8c300:	10008026 	beq	r2,zero,8c504 <_dtoa_r+0xcac>
   8c304:	01000804 	movi	r4,32
   8c308:	2089c83a 	sub	r4,r4,r2
   8c30c:	00c00104 	movi	r3,4
   8c310:	1902d00e 	bge	r3,r4,8ce54 <_dtoa_r+0x15fc>
   8c314:	d9000817 	ldw	r4,32(sp)
   8c318:	d9c00717 	ldw	r7,28(sp)
   8c31c:	00c00704 	movi	r3,28
   8c320:	1885c83a 	sub	r2,r3,r2
   8c324:	2089883a 	add	r4,r4,r2
   8c328:	388f883a 	add	r7,r7,r2
   8c32c:	d9000815 	stw	r4,32(sp)
   8c330:	90a5883a 	add	r18,r18,r2
   8c334:	d9c00715 	stw	r7,28(sp)
   8c338:	d9c00817 	ldw	r7,32(sp)
   8c33c:	01c0050e 	bge	zero,r7,8c354 <_dtoa_r+0xafc>
   8c340:	e00b883a 	mov	r5,fp
   8c344:	8009883a 	mov	r4,r16
   8c348:	380d883a 	mov	r6,r7
   8c34c:	008e9a00 	call	8e9a0 <__lshift>
   8c350:	1039883a 	mov	fp,r2
   8c354:	d8800717 	ldw	r2,28(sp)
   8c358:	0080050e 	bge	zero,r2,8c370 <_dtoa_r+0xb18>
   8c35c:	a00b883a 	mov	r5,r20
   8c360:	8009883a 	mov	r4,r16
   8c364:	100d883a 	mov	r6,r2
   8c368:	008e9a00 	call	8e9a0 <__lshift>
   8c36c:	1029883a 	mov	r20,r2
   8c370:	d8c00d17 	ldw	r3,52(sp)
   8c374:	1801401e 	bne	r3,zero,8c878 <_dtoa_r+0x1020>
   8c378:	d8800917 	ldw	r2,36(sp)
   8c37c:	00815a0e 	bge	zero,r2,8c8e8 <_dtoa_r+0x1090>
   8c380:	d8c00c17 	ldw	r3,48(sp)
   8c384:	18006f1e 	bne	r3,zero,8c544 <_dtoa_r+0xcec>
   8c388:	b823883a 	mov	r17,r23
   8c38c:	dc800917 	ldw	r18,36(sp)
   8c390:	00000206 	br	8c39c <_dtoa_r+0xb44>
   8c394:	008e3280 	call	8e328 <__multadd>
   8c398:	1039883a 	mov	fp,r2
   8c39c:	e009883a 	mov	r4,fp
   8c3a0:	a00b883a 	mov	r5,r20
   8c3a4:	008b6500 	call	8b650 <quorem>
   8c3a8:	10800c04 	addi	r2,r2,48
   8c3ac:	88800005 	stb	r2,0(r17)
   8c3b0:	8c400044 	addi	r17,r17,1
   8c3b4:	8dc7c83a 	sub	r3,r17,r23
   8c3b8:	8009883a 	mov	r4,r16
   8c3bc:	e00b883a 	mov	r5,fp
   8c3c0:	01800284 	movi	r6,10
   8c3c4:	000f883a 	mov	r7,zero
   8c3c8:	1cbff216 	blt	r3,r18,8c394 <_dtoa_r+0xb3c>
   8c3cc:	dd800917 	ldw	r22,36(sp)
   8c3d0:	1007883a 	mov	r3,r2
   8c3d4:	05823a0e 	bge	zero,r22,8ccc0 <_dtoa_r+0x1468>
   8c3d8:	bdad883a 	add	r22,r23,r22
   8c3dc:	0023883a 	mov	r17,zero
   8c3e0:	e00b883a 	mov	r5,fp
   8c3e4:	01800044 	movi	r6,1
   8c3e8:	8009883a 	mov	r4,r16
   8c3ec:	d8c01515 	stw	r3,84(sp)
   8c3f0:	008e9a00 	call	8e9a0 <__lshift>
   8c3f4:	1009883a 	mov	r4,r2
   8c3f8:	a00b883a 	mov	r5,r20
   8c3fc:	1039883a 	mov	fp,r2
   8c400:	008eafc0 	call	8eafc <__mcmp>
   8c404:	d8c01517 	ldw	r3,84(sp)
   8c408:	0080d60e 	bge	zero,r2,8c764 <_dtoa_r+0xf0c>
   8c40c:	b13fffc3 	ldbu	r4,-1(r22)
   8c410:	b0ffff84 	addi	r3,r22,-2
   8c414:	01800e44 	movi	r6,57
   8c418:	00000306 	br	8c428 <_dtoa_r+0xbd0>
   8c41c:	19000003 	ldbu	r4,0(r3)
   8c420:	102d883a 	mov	r22,r2
   8c424:	18ffffc4 	addi	r3,r3,-1
   8c428:	21403fcc 	andi	r5,r4,255
   8c42c:	2940201c 	xori	r5,r5,128
   8c430:	297fe004 	addi	r5,r5,-128
   8c434:	b0bfffc4 	addi	r2,r22,-1
   8c438:	2981a71e 	bne	r5,r6,8cad8 <_dtoa_r+0x1280>
   8c43c:	b8bff71e 	bne	r23,r2,8c41c <_dtoa_r+0xbc4>
   8c440:	d8800617 	ldw	r2,24(sp)
   8c444:	10800044 	addi	r2,r2,1
   8c448:	d8800615 	stw	r2,24(sp)
   8c44c:	00800c44 	movi	r2,49
   8c450:	b8800005 	stb	r2,0(r23)
   8c454:	8009883a 	mov	r4,r16
   8c458:	a00b883a 	mov	r5,r20
   8c45c:	008e3000 	call	8e300 <_Bfree>
   8c460:	a83e9e26 	beq	r21,zero,8bedc <_dtoa_r+0x684>
   8c464:	88000426 	beq	r17,zero,8c478 <_dtoa_r+0xc20>
   8c468:	8d400326 	beq	r17,r21,8c478 <_dtoa_r+0xc20>
   8c46c:	8009883a 	mov	r4,r16
   8c470:	880b883a 	mov	r5,r17
   8c474:	008e3000 	call	8e300 <_Bfree>
   8c478:	8009883a 	mov	r4,r16
   8c47c:	a80b883a 	mov	r5,r21
   8c480:	008e3000 	call	8e300 <_Bfree>
   8c484:	003e9506 	br	8bedc <_dtoa_r+0x684>
   8c488:	00c00044 	movi	r3,1
   8c48c:	d8c00d15 	stw	r3,52(sp)
   8c490:	003d9f06 	br	8bb10 <_dtoa_r+0x2b8>
   8c494:	d9000817 	ldw	r4,32(sp)
   8c498:	d8800617 	ldw	r2,24(sp)
   8c49c:	d8000b15 	stw	zero,44(sp)
   8c4a0:	2089c83a 	sub	r4,r4,r2
   8c4a4:	0087c83a 	sub	r3,zero,r2
   8c4a8:	d9000815 	stw	r4,32(sp)
   8c4ac:	d8c00a15 	stw	r3,40(sp)
   8c4b0:	003da306 	br	8bb40 <_dtoa_r+0x2e8>
   8c4b4:	0529c83a 	sub	r20,zero,r20
   8c4b8:	dd000815 	stw	r20,32(sp)
   8c4bc:	d8000715 	stw	zero,28(sp)
   8c4c0:	003d9806 	br	8bb24 <_dtoa_r+0x2cc>
   8c4c4:	d9000617 	ldw	r4,24(sp)
   8c4c8:	00880640 	call	88064 <__floatsidf>
   8c4cc:	1009883a 	mov	r4,r2
   8c4d0:	180b883a 	mov	r5,r3
   8c4d4:	980d883a 	mov	r6,r19
   8c4d8:	900f883a 	mov	r7,r18
   8c4dc:	0090a480 	call	90a48 <__nedf2>
   8c4e0:	103d7a26 	beq	r2,zero,8bacc <_dtoa_r+0x274>
   8c4e4:	d8800617 	ldw	r2,24(sp)
   8c4e8:	10bfffc4 	addi	r2,r2,-1
   8c4ec:	d8800615 	stw	r2,24(sp)
   8c4f0:	003d7606 	br	8bacc <_dtoa_r+0x274>
   8c4f4:	dcc00a17 	ldw	r19,40(sp)
   8c4f8:	dc800817 	ldw	r18,32(sp)
   8c4fc:	002b883a 	mov	r21,zero
   8c500:	003f4906 	br	8c228 <_dtoa_r+0x9d0>
   8c504:	00800704 	movi	r2,28
   8c508:	d8c00817 	ldw	r3,32(sp)
   8c50c:	d9000717 	ldw	r4,28(sp)
   8c510:	90a5883a 	add	r18,r18,r2
   8c514:	1887883a 	add	r3,r3,r2
   8c518:	2089883a 	add	r4,r4,r2
   8c51c:	d8c00815 	stw	r3,32(sp)
   8c520:	d9000715 	stw	r4,28(sp)
   8c524:	003f8406 	br	8c338 <_dtoa_r+0xae0>
   8c528:	d9c00317 	ldw	r7,12(sp)
   8c52c:	013efb84 	movi	r4,-1042
   8c530:	2509c83a 	sub	r4,r4,r20
   8c534:	3908983a 	sll	r4,r7,r4
   8c538:	003d3006 	br	8b9fc <_dtoa_r+0x1a4>
   8c53c:	d8000d15 	stw	zero,52(sp)
   8c540:	003d7306 	br	8bb10 <_dtoa_r+0x2b8>
   8c544:	0480050e 	bge	zero,r18,8c55c <_dtoa_r+0xd04>
   8c548:	a80b883a 	mov	r5,r21
   8c54c:	8009883a 	mov	r4,r16
   8c550:	900d883a 	mov	r6,r18
   8c554:	008e9a00 	call	8e9a0 <__lshift>
   8c558:	102b883a 	mov	r21,r2
   8c55c:	8801611e 	bne	r17,zero,8cae4 <_dtoa_r+0x128c>
   8c560:	a827883a 	mov	r19,r21
   8c564:	d8c00317 	ldw	r3,12(sp)
   8c568:	d9000917 	ldw	r4,36(sp)
   8c56c:	b8bfffc4 	addi	r2,r23,-1
   8c570:	18c0004c 	andi	r3,r3,1
   8c574:	1105883a 	add	r2,r2,r4
   8c578:	b825883a 	mov	r18,r23
   8c57c:	d8800515 	stw	r2,20(sp)
   8c580:	a823883a 	mov	r17,r21
   8c584:	d8c00315 	stw	r3,12(sp)
   8c588:	ddc00715 	stw	r23,28(sp)
   8c58c:	e009883a 	mov	r4,fp
   8c590:	a00b883a 	mov	r5,r20
   8c594:	008b6500 	call	8b650 <quorem>
   8c598:	e009883a 	mov	r4,fp
   8c59c:	880b883a 	mov	r5,r17
   8c5a0:	102d883a 	mov	r22,r2
   8c5a4:	008eafc0 	call	8eafc <__mcmp>
   8c5a8:	980d883a 	mov	r6,r19
   8c5ac:	8009883a 	mov	r4,r16
   8c5b0:	a00b883a 	mov	r5,r20
   8c5b4:	102b883a 	mov	r21,r2
   8c5b8:	008eb540 	call	8eb54 <__mdiff>
   8c5bc:	100d883a 	mov	r6,r2
   8c5c0:	10800317 	ldw	r2,12(r2)
   8c5c4:	b5c00c04 	addi	r23,r22,48
   8c5c8:	10008c26 	beq	r2,zero,8c7fc <_dtoa_r+0xfa4>
   8c5cc:	8009883a 	mov	r4,r16
   8c5d0:	300b883a 	mov	r5,r6
   8c5d4:	008e3000 	call	8e300 <_Bfree>
   8c5d8:	00800044 	movi	r2,1
   8c5dc:	a8007116 	blt	r21,zero,8c7a4 <_dtoa_r+0xf4c>
   8c5e0:	a800041e 	bne	r21,zero,8c5f4 <_dtoa_r+0xd9c>
   8c5e4:	d9c00417 	ldw	r7,16(sp)
   8c5e8:	3800021e 	bne	r7,zero,8c5f4 <_dtoa_r+0xd9c>
   8c5ec:	d8c00317 	ldw	r3,12(sp)
   8c5f0:	18006c26 	beq	r3,zero,8c7a4 <_dtoa_r+0xf4c>
   8c5f4:	00814c16 	blt	zero,r2,8cb28 <_dtoa_r+0x12d0>
   8c5f8:	d8c00517 	ldw	r3,20(sp)
   8c5fc:	95400044 	addi	r21,r18,1
   8c600:	95c00005 	stb	r23,0(r18)
   8c604:	a82d883a 	mov	r22,r21
   8c608:	90c14d26 	beq	r18,r3,8cb40 <_dtoa_r+0x12e8>
   8c60c:	e00b883a 	mov	r5,fp
   8c610:	8009883a 	mov	r4,r16
   8c614:	01800284 	movi	r6,10
   8c618:	000f883a 	mov	r7,zero
   8c61c:	008e3280 	call	8e328 <__multadd>
   8c620:	1039883a 	mov	fp,r2
   8c624:	8cc08b26 	beq	r17,r19,8c854 <_dtoa_r+0xffc>
   8c628:	880b883a 	mov	r5,r17
   8c62c:	01800284 	movi	r6,10
   8c630:	000f883a 	mov	r7,zero
   8c634:	8009883a 	mov	r4,r16
   8c638:	008e3280 	call	8e328 <__multadd>
   8c63c:	980b883a 	mov	r5,r19
   8c640:	8009883a 	mov	r4,r16
   8c644:	01800284 	movi	r6,10
   8c648:	000f883a 	mov	r7,zero
   8c64c:	1023883a 	mov	r17,r2
   8c650:	008e3280 	call	8e328 <__multadd>
   8c654:	1027883a 	mov	r19,r2
   8c658:	a825883a 	mov	r18,r21
   8c65c:	003fcb06 	br	8c58c <_dtoa_r+0xd34>
   8c660:	d9c00417 	ldw	r7,16(sp)
   8c664:	00800104 	movi	r2,4
   8c668:	3880e426 	beq	r7,r2,8c9fc <_dtoa_r+0x11a4>
   8c66c:	00800144 	movi	r2,5
   8c670:	38be3c1e 	bne	r7,r2,8bf64 <_dtoa_r+0x70c>
   8c674:	00c00044 	movi	r3,1
   8c678:	d8c00c15 	stw	r3,48(sp)
   8c67c:	d9c02117 	ldw	r7,132(sp)
   8c680:	d8800617 	ldw	r2,24(sp)
   8c684:	388f883a 	add	r7,r7,r2
   8c688:	3c800044 	addi	r18,r7,1
   8c68c:	d9c00e15 	stw	r7,56(sp)
   8c690:	dc800915 	stw	r18,36(sp)
   8c694:	04bd3e16 	blt	zero,r18,8bb90 <_dtoa_r+0x338>
   8c698:	80001115 	stw	zero,68(r16)
   8c69c:	000b883a 	mov	r5,zero
   8c6a0:	003d4606 	br	8bbbc <_dtoa_r+0x364>
   8c6a4:	d8c00317 	ldw	r3,12(sp)
   8c6a8:	183f0e1e 	bne	r3,zero,8c2e4 <_dtoa_r+0xa8c>
   8c6ac:	00c00434 	movhi	r3,16
   8c6b0:	18ffffc4 	addi	r3,r3,-1
   8c6b4:	88c6703a 	and	r3,r17,r3
   8c6b8:	183f0a1e 	bne	r3,zero,8c2e4 <_dtoa_r+0xa8c>
   8c6bc:	8c5ffc2c 	andhi	r17,r17,32752
   8c6c0:	883f0826 	beq	r17,zero,8c2e4 <_dtoa_r+0xa8c>
   8c6c4:	d9000817 	ldw	r4,32(sp)
   8c6c8:	d9c00717 	ldw	r7,28(sp)
   8c6cc:	1023883a 	mov	r17,r2
   8c6d0:	2089883a 	add	r4,r4,r2
   8c6d4:	388f883a 	add	r7,r7,r2
   8c6d8:	d9000815 	stw	r4,32(sp)
   8c6dc:	d9c00715 	stw	r7,28(sp)
   8c6e0:	003f0106 	br	8c2e8 <_dtoa_r+0xa90>
   8c6e4:	9005883a 	mov	r2,r18
   8c6e8:	003ed306 	br	8c238 <_dtoa_r+0x9e0>
   8c6ec:	d8800917 	ldw	r2,36(sp)
   8c6f0:	00be3516 	blt	zero,r2,8bfc8 <_dtoa_r+0x770>
   8c6f4:	1000b61e 	bne	r2,zero,8c9d0 <_dtoa_r+0x1178>
   8c6f8:	9009883a 	mov	r4,r18
   8c6fc:	980b883a 	mov	r5,r19
   8c700:	000d883a 	mov	r6,zero
   8c704:	01d00534 	movhi	r7,16404
   8c708:	0087b700 	call	87b70 <__muldf3>
   8c70c:	d9800317 	ldw	r6,12(sp)
   8c710:	1009883a 	mov	r4,r2
   8c714:	180b883a 	mov	r5,r3
   8c718:	880f883a 	mov	r7,r17
   8c71c:	0090b080 	call	90b08 <__gedf2>
   8c720:	0029883a 	mov	r20,zero
   8c724:	002b883a 	mov	r21,zero
   8c728:	10007e16 	blt	r2,zero,8c924 <_dtoa_r+0x10cc>
   8c72c:	d8802117 	ldw	r2,132(sp)
   8c730:	b82d883a 	mov	r22,r23
   8c734:	0084303a 	nor	r2,zero,r2
   8c738:	d8800615 	stw	r2,24(sp)
   8c73c:	8009883a 	mov	r4,r16
   8c740:	a00b883a 	mov	r5,r20
   8c744:	008e3000 	call	8e300 <_Bfree>
   8c748:	a83f4b1e 	bne	r21,zero,8c478 <_dtoa_r+0xc20>
   8c74c:	003de306 	br	8bedc <_dtoa_r+0x684>
   8c750:	e00b883a 	mov	r5,fp
   8c754:	8009883a 	mov	r4,r16
   8c758:	008e8740 	call	8e874 <__pow5mult>
   8c75c:	1039883a 	mov	fp,r2
   8c760:	003ed206 	br	8c2ac <_dtoa_r+0xa54>
   8c764:	1000021e 	bne	r2,zero,8c770 <_dtoa_r+0xf18>
   8c768:	18c0004c 	andi	r3,r3,1
   8c76c:	183f271e 	bne	r3,zero,8c40c <_dtoa_r+0xbb4>
   8c770:	01000c04 	movi	r4,48
   8c774:	00000106 	br	8c77c <_dtoa_r+0xf24>
   8c778:	102d883a 	mov	r22,r2
   8c77c:	b0bfffc4 	addi	r2,r22,-1
   8c780:	10c00007 	ldb	r3,0(r2)
   8c784:	193ffc26 	beq	r3,r4,8c778 <_dtoa_r+0xf20>
   8c788:	003f3206 	br	8c454 <_dtoa_r+0xbfc>
   8c78c:	d8c00f17 	ldw	r3,60(sp)
   8c790:	18015026 	beq	r3,zero,8ccd4 <_dtoa_r+0x147c>
   8c794:	10810cc4 	addi	r2,r2,1075
   8c798:	dcc00a17 	ldw	r19,40(sp)
   8c79c:	dc800817 	ldw	r18,32(sp)
   8c7a0:	003e9706 	br	8c200 <_dtoa_r+0x9a8>
   8c7a4:	b807883a 	mov	r3,r23
   8c7a8:	182b883a 	mov	r21,r3
   8c7ac:	ddc00717 	ldw	r23,28(sp)
   8c7b0:	00800e0e 	bge	zero,r2,8c7ec <_dtoa_r+0xf94>
   8c7b4:	e00b883a 	mov	r5,fp
   8c7b8:	01800044 	movi	r6,1
   8c7bc:	8009883a 	mov	r4,r16
   8c7c0:	d8c01515 	stw	r3,84(sp)
   8c7c4:	008e9a00 	call	8e9a0 <__lshift>
   8c7c8:	1009883a 	mov	r4,r2
   8c7cc:	a00b883a 	mov	r5,r20
   8c7d0:	1039883a 	mov	fp,r2
   8c7d4:	008eafc0 	call	8eafc <__mcmp>
   8c7d8:	d8c01517 	ldw	r3,84(sp)
   8c7dc:	0081880e 	bge	zero,r2,8ce00 <_dtoa_r+0x15a8>
   8c7e0:	00800e44 	movi	r2,57
   8c7e4:	b0c00c44 	addi	r3,r22,49
   8c7e8:	a8816326 	beq	r21,r2,8cd78 <_dtoa_r+0x1520>
   8c7ec:	90c00005 	stb	r3,0(r18)
   8c7f0:	95800044 	addi	r22,r18,1
   8c7f4:	982b883a 	mov	r21,r19
   8c7f8:	003f1606 	br	8c454 <_dtoa_r+0xbfc>
   8c7fc:	300b883a 	mov	r5,r6
   8c800:	e009883a 	mov	r4,fp
   8c804:	d9801515 	stw	r6,84(sp)
   8c808:	008eafc0 	call	8eafc <__mcmp>
   8c80c:	d9801517 	ldw	r6,84(sp)
   8c810:	8009883a 	mov	r4,r16
   8c814:	d8801515 	stw	r2,84(sp)
   8c818:	300b883a 	mov	r5,r6
   8c81c:	008e3000 	call	8e300 <_Bfree>
   8c820:	d8801517 	ldw	r2,84(sp)
   8c824:	103f6d1e 	bne	r2,zero,8c5dc <_dtoa_r+0xd84>
   8c828:	d9c00417 	ldw	r7,16(sp)
   8c82c:	383f6b1e 	bne	r7,zero,8c5dc <_dtoa_r+0xd84>
   8c830:	d8c00317 	ldw	r3,12(sp)
   8c834:	183f691e 	bne	r3,zero,8c5dc <_dtoa_r+0xd84>
   8c838:	b807883a 	mov	r3,r23
   8c83c:	00800e44 	movi	r2,57
   8c840:	ddc00717 	ldw	r23,28(sp)
   8c844:	18814c26 	beq	r3,r2,8cd78 <_dtoa_r+0x1520>
   8c848:	057fe80e 	bge	zero,r21,8c7ec <_dtoa_r+0xf94>
   8c84c:	b0c00c44 	addi	r3,r22,49
   8c850:	003fe606 	br	8c7ec <_dtoa_r+0xf94>
   8c854:	880b883a 	mov	r5,r17
   8c858:	8009883a 	mov	r4,r16
   8c85c:	01800284 	movi	r6,10
   8c860:	000f883a 	mov	r7,zero
   8c864:	008e3280 	call	8e328 <__multadd>
   8c868:	1023883a 	mov	r17,r2
   8c86c:	1027883a 	mov	r19,r2
   8c870:	a825883a 	mov	r18,r21
   8c874:	003f4506 	br	8c58c <_dtoa_r+0xd34>
   8c878:	e009883a 	mov	r4,fp
   8c87c:	a00b883a 	mov	r5,r20
   8c880:	008eafc0 	call	8eafc <__mcmp>
   8c884:	103ebc0e 	bge	r2,zero,8c378 <_dtoa_r+0xb20>
   8c888:	e00b883a 	mov	r5,fp
   8c88c:	8009883a 	mov	r4,r16
   8c890:	01800284 	movi	r6,10
   8c894:	000f883a 	mov	r7,zero
   8c898:	008e3280 	call	8e328 <__multadd>
   8c89c:	1039883a 	mov	fp,r2
   8c8a0:	d8800617 	ldw	r2,24(sp)
   8c8a4:	d8c00c17 	ldw	r3,48(sp)
   8c8a8:	10bfffc4 	addi	r2,r2,-1
   8c8ac:	d8800615 	stw	r2,24(sp)
   8c8b0:	1801571e 	bne	r3,zero,8ce10 <_dtoa_r+0x15b8>
   8c8b4:	d9c00e17 	ldw	r7,56(sp)
   8c8b8:	d9c00915 	stw	r7,36(sp)
   8c8bc:	003eae06 	br	8c378 <_dtoa_r+0xb20>
   8c8c0:	a0800417 	ldw	r2,16(r20)
   8c8c4:	10800104 	addi	r2,r2,4
   8c8c8:	1085883a 	add	r2,r2,r2
   8c8cc:	1085883a 	add	r2,r2,r2
   8c8d0:	a085883a 	add	r2,r20,r2
   8c8d4:	11000017 	ldw	r4,0(r2)
   8c8d8:	008e5400 	call	8e540 <__hi0bits>
   8c8dc:	00c00804 	movi	r3,32
   8c8e0:	1885c83a 	sub	r2,r3,r2
   8c8e4:	003e8306 	br	8c2f4 <_dtoa_r+0xa9c>
   8c8e8:	d9c00417 	ldw	r7,16(sp)
   8c8ec:	00800084 	movi	r2,2
   8c8f0:	11fea30e 	bge	r2,r7,8c380 <_dtoa_r+0xb28>
   8c8f4:	d8800917 	ldw	r2,36(sp)
   8c8f8:	103f8c1e 	bne	r2,zero,8c72c <_dtoa_r+0xed4>
   8c8fc:	a00b883a 	mov	r5,r20
   8c900:	8009883a 	mov	r4,r16
   8c904:	01800144 	movi	r6,5
   8c908:	000f883a 	mov	r7,zero
   8c90c:	008e3280 	call	8e328 <__multadd>
   8c910:	e009883a 	mov	r4,fp
   8c914:	100b883a 	mov	r5,r2
   8c918:	1029883a 	mov	r20,r2
   8c91c:	008eafc0 	call	8eafc <__mcmp>
   8c920:	00bf820e 	bge	zero,r2,8c72c <_dtoa_r+0xed4>
   8c924:	00800c44 	movi	r2,49
   8c928:	b8800005 	stb	r2,0(r23)
   8c92c:	d8800617 	ldw	r2,24(sp)
   8c930:	bd800044 	addi	r22,r23,1
   8c934:	10800044 	addi	r2,r2,1
   8c938:	d8800615 	stw	r2,24(sp)
   8c93c:	003f7f06 	br	8c73c <_dtoa_r+0xee4>
   8c940:	dc000417 	ldw	r16,16(sp)
   8c944:	003d6506 	br	8bedc <_dtoa_r+0x684>
   8c948:	9009883a 	mov	r4,r18
   8c94c:	00880640 	call	88064 <__floatsidf>
   8c950:	1009883a 	mov	r4,r2
   8c954:	180b883a 	mov	r5,r3
   8c958:	980d883a 	mov	r6,r19
   8c95c:	a00f883a 	mov	r7,r20
   8c960:	0087b700 	call	87b70 <__muldf3>
   8c964:	1009883a 	mov	r4,r2
   8c968:	180b883a 	mov	r5,r3
   8c96c:	000d883a 	mov	r6,zero
   8c970:	01d00734 	movhi	r7,16412
   8c974:	0087abc0 	call	87abc <__adddf3>
   8c978:	057f3034 	movhi	r21,64704
   8c97c:	1025883a 	mov	r18,r2
   8c980:	1d6b883a 	add	r21,r3,r21
   8c984:	9809883a 	mov	r4,r19
   8c988:	a00b883a 	mov	r5,r20
   8c98c:	000d883a 	mov	r6,zero
   8c990:	01d00534 	movhi	r7,16404
   8c994:	0087b100 	call	87b10 <__subdf3>
   8c998:	1009883a 	mov	r4,r2
   8c99c:	180b883a 	mov	r5,r3
   8c9a0:	900d883a 	mov	r6,r18
   8c9a4:	a80f883a 	mov	r7,r21
   8c9a8:	1027883a 	mov	r19,r2
   8c9ac:	1829883a 	mov	r20,r3
   8c9b0:	0090aa40 	call	90aa4 <__gtdf2>
   8c9b4:	00806616 	blt	zero,r2,8cb50 <_dtoa_r+0x12f8>
   8c9b8:	a9e0003c 	xorhi	r7,r21,32768
   8c9bc:	9809883a 	mov	r4,r19
   8c9c0:	a00b883a 	mov	r5,r20
   8c9c4:	900d883a 	mov	r6,r18
   8c9c8:	00880080 	call	88008 <__ltdf2>
   8c9cc:	103d710e 	bge	r2,zero,8bf94 <_dtoa_r+0x73c>
   8c9d0:	0029883a 	mov	r20,zero
   8c9d4:	002b883a 	mov	r21,zero
   8c9d8:	003f5406 	br	8c72c <_dtoa_r+0xed4>
   8c9dc:	d9800a17 	ldw	r6,40(sp)
   8c9e0:	e00b883a 	mov	r5,fp
   8c9e4:	8009883a 	mov	r4,r16
   8c9e8:	008e8740 	call	8e874 <__pow5mult>
   8c9ec:	1039883a 	mov	fp,r2
   8c9f0:	003e2e06 	br	8c2ac <_dtoa_r+0xa54>
   8c9f4:	d8000c15 	stw	zero,48(sp)
   8c9f8:	003f2006 	br	8c67c <_dtoa_r+0xe24>
   8c9fc:	00800044 	movi	r2,1
   8ca00:	d8800c15 	stw	r2,48(sp)
   8ca04:	003c5d06 	br	8bb7c <_dtoa_r+0x324>
   8ca08:	d8c00a17 	ldw	r3,40(sp)
   8ca0c:	d9000b17 	ldw	r4,44(sp)
   8ca10:	dcc00a15 	stw	r19,40(sp)
   8ca14:	98c5c83a 	sub	r2,r19,r3
   8ca18:	2089883a 	add	r4,r4,r2
   8ca1c:	d9000b15 	stw	r4,44(sp)
   8ca20:	0027883a 	mov	r19,zero
   8ca24:	003df206 	br	8c1f0 <_dtoa_r+0x998>
   8ca28:	d9000317 	ldw	r4,12(sp)
   8ca2c:	8829883a 	mov	r20,r17
   8ca30:	04800084 	movi	r18,2
   8ca34:	d9001015 	stw	r4,64(sp)
   8ca38:	003c8106 	br	8bc40 <_dtoa_r+0x3e8>
   8ca3c:	04800044 	movi	r18,1
   8ca40:	dc800e15 	stw	r18,56(sp)
   8ca44:	dc800915 	stw	r18,36(sp)
   8ca48:	dc802115 	stw	r18,132(sp)
   8ca4c:	003f1206 	br	8c698 <_dtoa_r+0xe40>
   8ca50:	d8800617 	ldw	r2,24(sp)
   8ca54:	00abc83a 	sub	r21,zero,r2
   8ca58:	a800a426 	beq	r21,zero,8ccec <_dtoa_r+0x1494>
   8ca5c:	a88003cc 	andi	r2,r21,15
   8ca60:	100490fa 	slli	r2,r2,3
   8ca64:	00c002f4 	movhi	r3,11
   8ca68:	18f69904 	addi	r3,r3,-9628
   8ca6c:	d9000317 	ldw	r4,12(sp)
   8ca70:	1885883a 	add	r2,r3,r2
   8ca74:	11800017 	ldw	r6,0(r2)
   8ca78:	11c00117 	ldw	r7,4(r2)
   8ca7c:	a82bd13a 	srai	r21,r21,4
   8ca80:	880b883a 	mov	r5,r17
   8ca84:	0087b700 	call	87b70 <__muldf3>
   8ca88:	1027883a 	mov	r19,r2
   8ca8c:	1829883a 	mov	r20,r3
   8ca90:	a800e826 	beq	r21,zero,8ce34 <_dtoa_r+0x15dc>
   8ca94:	058002f4 	movhi	r22,11
   8ca98:	b5b68f04 	addi	r22,r22,-9668
   8ca9c:	04800084 	movi	r18,2
   8caa0:	a980004c 	andi	r6,r21,1
   8caa4:	1009883a 	mov	r4,r2
   8caa8:	a82bd07a 	srai	r21,r21,1
   8caac:	180b883a 	mov	r5,r3
   8cab0:	30000426 	beq	r6,zero,8cac4 <_dtoa_r+0x126c>
   8cab4:	b1800017 	ldw	r6,0(r22)
   8cab8:	b1c00117 	ldw	r7,4(r22)
   8cabc:	94800044 	addi	r18,r18,1
   8cac0:	0087b700 	call	87b70 <__muldf3>
   8cac4:	b5800204 	addi	r22,r22,8
   8cac8:	a83ff51e 	bne	r21,zero,8caa0 <_dtoa_r+0x1248>
   8cacc:	1027883a 	mov	r19,r2
   8cad0:	1829883a 	mov	r20,r3
   8cad4:	003c7306 	br	8bca4 <_dtoa_r+0x44c>
   8cad8:	21000044 	addi	r4,r4,1
   8cadc:	11000005 	stb	r4,0(r2)
   8cae0:	003e5c06 	br	8c454 <_dtoa_r+0xbfc>
   8cae4:	a9400117 	ldw	r5,4(r21)
   8cae8:	8009883a 	mov	r4,r16
   8caec:	008e2580 	call	8e258 <_Balloc>
   8caf0:	a9800417 	ldw	r6,16(r21)
   8caf4:	11000304 	addi	r4,r2,12
   8caf8:	a9400304 	addi	r5,r21,12
   8cafc:	31800084 	addi	r6,r6,2
   8cb00:	318d883a 	add	r6,r6,r6
   8cb04:	318d883a 	add	r6,r6,r6
   8cb08:	1023883a 	mov	r17,r2
   8cb0c:	00890840 	call	89084 <memcpy>
   8cb10:	8009883a 	mov	r4,r16
   8cb14:	880b883a 	mov	r5,r17
   8cb18:	01800044 	movi	r6,1
   8cb1c:	008e9a00 	call	8e9a0 <__lshift>
   8cb20:	1027883a 	mov	r19,r2
   8cb24:	003e8f06 	br	8c564 <_dtoa_r+0xd0c>
   8cb28:	b807883a 	mov	r3,r23
   8cb2c:	00800e44 	movi	r2,57
   8cb30:	ddc00717 	ldw	r23,28(sp)
   8cb34:	18809026 	beq	r3,r2,8cd78 <_dtoa_r+0x1520>
   8cb38:	18c00044 	addi	r3,r3,1
   8cb3c:	003f2b06 	br	8c7ec <_dtoa_r+0xf94>
   8cb40:	b807883a 	mov	r3,r23
   8cb44:	982b883a 	mov	r21,r19
   8cb48:	ddc00717 	ldw	r23,28(sp)
   8cb4c:	003e2406 	br	8c3e0 <_dtoa_r+0xb88>
   8cb50:	0029883a 	mov	r20,zero
   8cb54:	002b883a 	mov	r21,zero
   8cb58:	003f7206 	br	8c924 <_dtoa_r+0x10cc>
   8cb5c:	593fffc4 	addi	r4,r11,-1
   8cb60:	200490fa 	slli	r2,r4,3
   8cb64:	00c002f4 	movhi	r3,11
   8cb68:	18f69904 	addi	r3,r3,-9628
   8cb6c:	d9001015 	stw	r4,64(sp)
   8cb70:	1885883a 	add	r2,r3,r2
   8cb74:	11000017 	ldw	r4,0(r2)
   8cb78:	11400117 	ldw	r5,4(r2)
   8cb7c:	900d883a 	mov	r6,r18
   8cb80:	a80f883a 	mov	r7,r21
   8cb84:	dac01615 	stw	r11,88(sp)
   8cb88:	0087b700 	call	87b70 <__muldf3>
   8cb8c:	a00b883a 	mov	r5,r20
   8cb90:	9809883a 	mov	r4,r19
   8cb94:	d8c01215 	stw	r3,72(sp)
   8cb98:	d8801115 	stw	r2,68(sp)
   8cb9c:	00881380 	call	88138 <__fixdfsi>
   8cba0:	1009883a 	mov	r4,r2
   8cba4:	1025883a 	mov	r18,r2
   8cba8:	00880640 	call	88064 <__floatsidf>
   8cbac:	9809883a 	mov	r4,r19
   8cbb0:	a00b883a 	mov	r5,r20
   8cbb4:	100d883a 	mov	r6,r2
   8cbb8:	180f883a 	mov	r7,r3
   8cbbc:	94800c04 	addi	r18,r18,48
   8cbc0:	0087b100 	call	87b10 <__subdf3>
   8cbc4:	bc800005 	stb	r18,0(r23)
   8cbc8:	dac01617 	ldw	r11,88(sp)
   8cbcc:	102b883a 	mov	r21,r2
   8cbd0:	00800044 	movi	r2,1
   8cbd4:	bd800044 	addi	r22,r23,1
   8cbd8:	1815883a 	mov	r10,r3
   8cbdc:	58802226 	beq	r11,r2,8cc68 <_dtoa_r+0x1410>
   8cbe0:	bad7883a 	add	r11,r23,r11
   8cbe4:	dc001415 	stw	r16,80(sp)
   8cbe8:	a805883a 	mov	r2,r21
   8cbec:	b027883a 	mov	r19,r22
   8cbf0:	5821883a 	mov	r16,r11
   8cbf4:	882b883a 	mov	r21,r17
   8cbf8:	000d883a 	mov	r6,zero
   8cbfc:	01d00934 	movhi	r7,16420
   8cc00:	1009883a 	mov	r4,r2
   8cc04:	180b883a 	mov	r5,r3
   8cc08:	0087b700 	call	87b70 <__muldf3>
   8cc0c:	180b883a 	mov	r5,r3
   8cc10:	1009883a 	mov	r4,r2
   8cc14:	1829883a 	mov	r20,r3
   8cc18:	1023883a 	mov	r17,r2
   8cc1c:	00881380 	call	88138 <__fixdfsi>
   8cc20:	1009883a 	mov	r4,r2
   8cc24:	1025883a 	mov	r18,r2
   8cc28:	00880640 	call	88064 <__floatsidf>
   8cc2c:	8809883a 	mov	r4,r17
   8cc30:	a00b883a 	mov	r5,r20
   8cc34:	100d883a 	mov	r6,r2
   8cc38:	180f883a 	mov	r7,r3
   8cc3c:	94800c04 	addi	r18,r18,48
   8cc40:	0087b100 	call	87b10 <__subdf3>
   8cc44:	9cc00044 	addi	r19,r19,1
   8cc48:	9cbfffc5 	stb	r18,-1(r19)
   8cc4c:	9c3fea1e 	bne	r19,r16,8cbf8 <_dtoa_r+0x13a0>
   8cc50:	1815883a 	mov	r10,r3
   8cc54:	d8c01017 	ldw	r3,64(sp)
   8cc58:	dc001417 	ldw	r16,80(sp)
   8cc5c:	a823883a 	mov	r17,r21
   8cc60:	b0ed883a 	add	r22,r22,r3
   8cc64:	102b883a 	mov	r21,r2
   8cc68:	d9001117 	ldw	r4,68(sp)
   8cc6c:	d9401217 	ldw	r5,72(sp)
   8cc70:	000d883a 	mov	r6,zero
   8cc74:	01cff834 	movhi	r7,16352
   8cc78:	da801515 	stw	r10,84(sp)
   8cc7c:	0087abc0 	call	87abc <__adddf3>
   8cc80:	da801517 	ldw	r10,84(sp)
   8cc84:	1009883a 	mov	r4,r2
   8cc88:	180b883a 	mov	r5,r3
   8cc8c:	500f883a 	mov	r7,r10
   8cc90:	a80d883a 	mov	r6,r21
   8cc94:	00880080 	call	88008 <__ltdf2>
   8cc98:	da801517 	ldw	r10,84(sp)
   8cc9c:	10003b0e 	bge	r2,zero,8cd8c <_dtoa_r+0x1534>
   8cca0:	d9c01317 	ldw	r7,76(sp)
   8cca4:	b53fffc3 	ldbu	r20,-1(r22)
   8cca8:	d9c00615 	stw	r7,24(sp)
   8ccac:	003d3106 	br	8c174 <_dtoa_r+0x91c>
   8ccb0:	d8800817 	ldw	r2,32(sp)
   8ccb4:	11e5c83a 	sub	r18,r2,r7
   8ccb8:	0005883a 	mov	r2,zero
   8ccbc:	003d5006 	br	8c200 <_dtoa_r+0x9a8>
   8ccc0:	05800044 	movi	r22,1
   8ccc4:	003dc406 	br	8c3d8 <_dtoa_r+0xb80>
   8ccc8:	a5000044 	addi	r20,r20,1
   8cccc:	15000005 	stb	r20,0(r2)
   8ccd0:	003c8206 	br	8bedc <_dtoa_r+0x684>
   8ccd4:	d8800217 	ldw	r2,8(sp)
   8ccd8:	00c00d84 	movi	r3,54
   8ccdc:	dcc00a17 	ldw	r19,40(sp)
   8cce0:	1885c83a 	sub	r2,r3,r2
   8cce4:	dc800817 	ldw	r18,32(sp)
   8cce8:	003d4506 	br	8c200 <_dtoa_r+0x9a8>
   8ccec:	dcc00317 	ldw	r19,12(sp)
   8ccf0:	8829883a 	mov	r20,r17
   8ccf4:	04800084 	movi	r18,2
   8ccf8:	003bea06 	br	8bca4 <_dtoa_r+0x44c>
   8ccfc:	d9000917 	ldw	r4,36(sp)
   8cd00:	203f1126 	beq	r4,zero,8c948 <_dtoa_r+0x10f0>
   8cd04:	d9c00e17 	ldw	r7,56(sp)
   8cd08:	01fca20e 	bge	zero,r7,8bf94 <_dtoa_r+0x73c>
   8cd0c:	a00b883a 	mov	r5,r20
   8cd10:	9809883a 	mov	r4,r19
   8cd14:	000d883a 	mov	r6,zero
   8cd18:	01d00934 	movhi	r7,16420
   8cd1c:	0087b700 	call	87b70 <__muldf3>
   8cd20:	91000044 	addi	r4,r18,1
   8cd24:	1027883a 	mov	r19,r2
   8cd28:	1829883a 	mov	r20,r3
   8cd2c:	00880640 	call	88064 <__floatsidf>
   8cd30:	9809883a 	mov	r4,r19
   8cd34:	a00b883a 	mov	r5,r20
   8cd38:	100d883a 	mov	r6,r2
   8cd3c:	180f883a 	mov	r7,r3
   8cd40:	0087b700 	call	87b70 <__muldf3>
   8cd44:	1009883a 	mov	r4,r2
   8cd48:	180b883a 	mov	r5,r3
   8cd4c:	000d883a 	mov	r6,zero
   8cd50:	01d00734 	movhi	r7,16412
   8cd54:	0087abc0 	call	87abc <__adddf3>
   8cd58:	1025883a 	mov	r18,r2
   8cd5c:	d8800617 	ldw	r2,24(sp)
   8cd60:	057f3034 	movhi	r21,64704
   8cd64:	1d6b883a 	add	r21,r3,r21
   8cd68:	10bfffc4 	addi	r2,r2,-1
   8cd6c:	d8801315 	stw	r2,76(sp)
   8cd70:	dac00e17 	ldw	r11,56(sp)
   8cd74:	003be706 	br	8bd14 <_dtoa_r+0x4bc>
   8cd78:	01000e44 	movi	r4,57
   8cd7c:	91000005 	stb	r4,0(r18)
   8cd80:	95800044 	addi	r22,r18,1
   8cd84:	982b883a 	mov	r21,r19
   8cd88:	003da106 	br	8c410 <_dtoa_r+0xbb8>
   8cd8c:	d9801117 	ldw	r6,68(sp)
   8cd90:	d9c01217 	ldw	r7,72(sp)
   8cd94:	0009883a 	mov	r4,zero
   8cd98:	014ff834 	movhi	r5,16352
   8cd9c:	da801515 	stw	r10,84(sp)
   8cda0:	0087b100 	call	87b10 <__subdf3>
   8cda4:	da801517 	ldw	r10,84(sp)
   8cda8:	1009883a 	mov	r4,r2
   8cdac:	180b883a 	mov	r5,r3
   8cdb0:	a80d883a 	mov	r6,r21
   8cdb4:	500f883a 	mov	r7,r10
   8cdb8:	0090aa40 	call	90aa4 <__gtdf2>
   8cdbc:	00bc750e 	bge	zero,r2,8bf94 <_dtoa_r+0x73c>
   8cdc0:	01000c04 	movi	r4,48
   8cdc4:	00000106 	br	8cdcc <_dtoa_r+0x1574>
   8cdc8:	102d883a 	mov	r22,r2
   8cdcc:	b0bfffc4 	addi	r2,r22,-1
   8cdd0:	10c00007 	ldb	r3,0(r2)
   8cdd4:	193ffc26 	beq	r3,r4,8cdc8 <_dtoa_r+0x1570>
   8cdd8:	d8801317 	ldw	r2,76(sp)
   8cddc:	d8800615 	stw	r2,24(sp)
   8cde0:	003c3e06 	br	8bedc <_dtoa_r+0x684>
   8cde4:	d9001317 	ldw	r4,76(sp)
   8cde8:	df001117 	ldw	fp,68(sp)
   8cdec:	d9000615 	stw	r4,24(sp)
   8cdf0:	003ce006 	br	8c174 <_dtoa_r+0x91c>
   8cdf4:	df001117 	ldw	fp,68(sp)
   8cdf8:	dc401217 	ldw	r17,72(sp)
   8cdfc:	003c6506 	br	8bf94 <_dtoa_r+0x73c>
   8ce00:	103e7a1e 	bne	r2,zero,8c7ec <_dtoa_r+0xf94>
   8ce04:	1880004c 	andi	r2,r3,1
   8ce08:	103e7826 	beq	r2,zero,8c7ec <_dtoa_r+0xf94>
   8ce0c:	003e7406 	br	8c7e0 <_dtoa_r+0xf88>
   8ce10:	8009883a 	mov	r4,r16
   8ce14:	a80b883a 	mov	r5,r21
   8ce18:	01800284 	movi	r6,10
   8ce1c:	000f883a 	mov	r7,zero
   8ce20:	008e3280 	call	8e328 <__multadd>
   8ce24:	d9000e17 	ldw	r4,56(sp)
   8ce28:	102b883a 	mov	r21,r2
   8ce2c:	d9000915 	stw	r4,36(sp)
   8ce30:	003d5106 	br	8c378 <_dtoa_r+0xb20>
   8ce34:	04800084 	movi	r18,2
   8ce38:	003b9a06 	br	8bca4 <_dtoa_r+0x44c>
   8ce3c:	d8c01317 	ldw	r3,76(sp)
   8ce40:	d8c00615 	stw	r3,24(sp)
   8ce44:	003ccb06 	br	8c174 <_dtoa_r+0x91c>
   8ce48:	d8c01317 	ldw	r3,76(sp)
   8ce4c:	d8c00615 	stw	r3,24(sp)
   8ce50:	003c2206 	br	8bedc <_dtoa_r+0x684>
   8ce54:	20fd3826 	beq	r4,r3,8c338 <_dtoa_r+0xae0>
   8ce58:	00c00f04 	movi	r3,60
   8ce5c:	1885c83a 	sub	r2,r3,r2
   8ce60:	003da906 	br	8c508 <_dtoa_r+0xcb0>
   8ce64:	000b883a 	mov	r5,zero
   8ce68:	003b5406 	br	8bbbc <_dtoa_r+0x364>
   8ce6c:	04c00044 	movi	r19,1
   8ce70:	003b3b06 	br	8bb60 <_dtoa_r+0x308>

0008ce74 <_fflush_r>:
   8ce74:	defffb04 	addi	sp,sp,-20
   8ce78:	dcc00315 	stw	r19,12(sp)
   8ce7c:	dc400115 	stw	r17,4(sp)
   8ce80:	dfc00415 	stw	ra,16(sp)
   8ce84:	dc800215 	stw	r18,8(sp)
   8ce88:	dc000015 	stw	r16,0(sp)
   8ce8c:	2027883a 	mov	r19,r4
   8ce90:	2823883a 	mov	r17,r5
   8ce94:	20000226 	beq	r4,zero,8cea0 <_fflush_r+0x2c>
   8ce98:	20800e17 	ldw	r2,56(r4)
   8ce9c:	10005726 	beq	r2,zero,8cffc <_fflush_r+0x188>
   8cea0:	8880030b 	ldhu	r2,12(r17)
   8cea4:	10c0020c 	andi	r3,r2,8
   8cea8:	18ffffcc 	andi	r3,r3,65535
   8ceac:	18e0001c 	xori	r3,r3,32768
   8ceb0:	18e00004 	addi	r3,r3,-32768
   8ceb4:	1800311e 	bne	r3,zero,8cf7c <_fflush_r+0x108>
   8ceb8:	89000117 	ldw	r4,4(r17)
   8cebc:	10c20014 	ori	r3,r2,2048
   8cec0:	88c0030d 	sth	r3,12(r17)
   8cec4:	180b883a 	mov	r5,r3
   8cec8:	0100520e 	bge	zero,r4,8d014 <_fflush_r+0x1a0>
   8cecc:	88c00a17 	ldw	r3,40(r17)
   8ced0:	18002226 	beq	r3,zero,8cf5c <_fflush_r+0xe8>
   8ced4:	1084000c 	andi	r2,r2,4096
   8ced8:	10bfffcc 	andi	r2,r2,65535
   8cedc:	10a0001c 	xori	r2,r2,32768
   8cee0:	10a00004 	addi	r2,r2,-32768
   8cee4:	10004e26 	beq	r2,zero,8d020 <_fflush_r+0x1ac>
   8cee8:	8c001417 	ldw	r16,80(r17)
   8ceec:	2940010c 	andi	r5,r5,4
   8cef0:	297fffcc 	andi	r5,r5,65535
   8cef4:	2960001c 	xori	r5,r5,32768
   8cef8:	29600004 	addi	r5,r5,-32768
   8cefc:	28000626 	beq	r5,zero,8cf18 <_fflush_r+0xa4>
   8cf00:	89000117 	ldw	r4,4(r17)
   8cf04:	88800c17 	ldw	r2,48(r17)
   8cf08:	8121c83a 	sub	r16,r16,r4
   8cf0c:	10000226 	beq	r2,zero,8cf18 <_fflush_r+0xa4>
   8cf10:	88800f17 	ldw	r2,60(r17)
   8cf14:	80a1c83a 	sub	r16,r16,r2
   8cf18:	89400717 	ldw	r5,28(r17)
   8cf1c:	9809883a 	mov	r4,r19
   8cf20:	800d883a 	mov	r6,r16
   8cf24:	000f883a 	mov	r7,zero
   8cf28:	183ee83a 	callr	r3
   8cf2c:	8080281e 	bne	r16,r2,8cfd0 <_fflush_r+0x15c>
   8cf30:	8880030b 	ldhu	r2,12(r17)
   8cf34:	88c00417 	ldw	r3,16(r17)
   8cf38:	88000115 	stw	zero,4(r17)
   8cf3c:	113dffcc 	andi	r4,r2,63487
   8cf40:	1084000c 	andi	r2,r2,4096
   8cf44:	10bfffcc 	andi	r2,r2,65535
   8cf48:	10a0001c 	xori	r2,r2,32768
   8cf4c:	8900030d 	sth	r4,12(r17)
   8cf50:	88c00015 	stw	r3,0(r17)
   8cf54:	10a00004 	addi	r2,r2,-32768
   8cf58:	10002c1e 	bne	r2,zero,8d00c <_fflush_r+0x198>
   8cf5c:	0005883a 	mov	r2,zero
   8cf60:	dfc00417 	ldw	ra,16(sp)
   8cf64:	dcc00317 	ldw	r19,12(sp)
   8cf68:	dc800217 	ldw	r18,8(sp)
   8cf6c:	dc400117 	ldw	r17,4(sp)
   8cf70:	dc000017 	ldw	r16,0(sp)
   8cf74:	dec00504 	addi	sp,sp,20
   8cf78:	f800283a 	ret
   8cf7c:	8c800417 	ldw	r18,16(r17)
   8cf80:	903ff626 	beq	r18,zero,8cf5c <_fflush_r+0xe8>
   8cf84:	8c000017 	ldw	r16,0(r17)
   8cf88:	108000cc 	andi	r2,r2,3
   8cf8c:	8c800015 	stw	r18,0(r17)
   8cf90:	84a1c83a 	sub	r16,r16,r18
   8cf94:	10001b1e 	bne	r2,zero,8d004 <_fflush_r+0x190>
   8cf98:	88800517 	ldw	r2,20(r17)
   8cf9c:	88800215 	stw	r2,8(r17)
   8cfa0:	04000316 	blt	zero,r16,8cfb0 <_fflush_r+0x13c>
   8cfa4:	003fed06 	br	8cf5c <_fflush_r+0xe8>
   8cfa8:	90a5883a 	add	r18,r18,r2
   8cfac:	043feb0e 	bge	zero,r16,8cf5c <_fflush_r+0xe8>
   8cfb0:	88800917 	ldw	r2,36(r17)
   8cfb4:	89400717 	ldw	r5,28(r17)
   8cfb8:	800f883a 	mov	r7,r16
   8cfbc:	900d883a 	mov	r6,r18
   8cfc0:	9809883a 	mov	r4,r19
   8cfc4:	103ee83a 	callr	r2
   8cfc8:	80a1c83a 	sub	r16,r16,r2
   8cfcc:	00bff616 	blt	zero,r2,8cfa8 <_fflush_r+0x134>
   8cfd0:	88c0030b 	ldhu	r3,12(r17)
   8cfd4:	00bfffc4 	movi	r2,-1
   8cfd8:	18c01014 	ori	r3,r3,64
   8cfdc:	88c0030d 	sth	r3,12(r17)
   8cfe0:	dfc00417 	ldw	ra,16(sp)
   8cfe4:	dcc00317 	ldw	r19,12(sp)
   8cfe8:	dc800217 	ldw	r18,8(sp)
   8cfec:	dc400117 	ldw	r17,4(sp)
   8cff0:	dc000017 	ldw	r16,0(sp)
   8cff4:	dec00504 	addi	sp,sp,20
   8cff8:	f800283a 	ret
   8cffc:	008d11c0 	call	8d11c <__sinit>
   8d000:	003fa706 	br	8cea0 <_fflush_r+0x2c>
   8d004:	0005883a 	mov	r2,zero
   8d008:	003fe406 	br	8cf9c <_fflush_r+0x128>
   8d00c:	8c001415 	stw	r16,80(r17)
   8d010:	003fd206 	br	8cf5c <_fflush_r+0xe8>
   8d014:	88c00f17 	ldw	r3,60(r17)
   8d018:	00ffac16 	blt	zero,r3,8cecc <_fflush_r+0x58>
   8d01c:	003fcf06 	br	8cf5c <_fflush_r+0xe8>
   8d020:	89400717 	ldw	r5,28(r17)
   8d024:	9809883a 	mov	r4,r19
   8d028:	000d883a 	mov	r6,zero
   8d02c:	01c00044 	movi	r7,1
   8d030:	183ee83a 	callr	r3
   8d034:	1021883a 	mov	r16,r2
   8d038:	00bfffc4 	movi	r2,-1
   8d03c:	80800326 	beq	r16,r2,8d04c <_fflush_r+0x1d8>
   8d040:	8940030b 	ldhu	r5,12(r17)
   8d044:	88c00a17 	ldw	r3,40(r17)
   8d048:	003fa806 	br	8ceec <_fflush_r+0x78>
   8d04c:	98c00017 	ldw	r3,0(r19)
   8d050:	00800744 	movi	r2,29
   8d054:	18bfde1e 	bne	r3,r2,8cfd0 <_fflush_r+0x15c>
   8d058:	003fc006 	br	8cf5c <_fflush_r+0xe8>

0008d05c <fflush>:
   8d05c:	200b883a 	mov	r5,r4
   8d060:	20000426 	beq	r4,zero,8d074 <fflush+0x18>
   8d064:	008002f4 	movhi	r2,11
   8d068:	10844f04 	addi	r2,r2,4412
   8d06c:	11000017 	ldw	r4,0(r2)
   8d070:	008ce741 	jmpi	8ce74 <_fflush_r>
   8d074:	008002f4 	movhi	r2,11
   8d078:	10844e04 	addi	r2,r2,4408
   8d07c:	11000017 	ldw	r4,0(r2)
   8d080:	01400274 	movhi	r5,9
   8d084:	29739d04 	addi	r5,r5,-12684
   8d088:	008dcfc1 	jmpi	8dcfc <_fwalk_reent>

0008d08c <__fp_lock>:
   8d08c:	0005883a 	mov	r2,zero
   8d090:	f800283a 	ret

0008d094 <__fp_unlock>:
   8d094:	0005883a 	mov	r2,zero
   8d098:	f800283a 	ret

0008d09c <_cleanup_r>:
   8d09c:	01400274 	movhi	r5,9
   8d0a0:	297f3804 	addi	r5,r5,-800
   8d0a4:	008dc541 	jmpi	8dc54 <_fwalk>

0008d0a8 <__sfmoreglue>:
   8d0a8:	defffc04 	addi	sp,sp,-16
   8d0ac:	dc400115 	stw	r17,4(sp)
   8d0b0:	2c401724 	muli	r17,r5,92
   8d0b4:	dc800215 	stw	r18,8(sp)
   8d0b8:	2825883a 	mov	r18,r5
   8d0bc:	89400304 	addi	r5,r17,12
   8d0c0:	dc000015 	stw	r16,0(sp)
   8d0c4:	dfc00315 	stw	ra,12(sp)
   8d0c8:	00889000 	call	88900 <_malloc_r>
   8d0cc:	1021883a 	mov	r16,r2
   8d0d0:	10000726 	beq	r2,zero,8d0f0 <__sfmoreglue+0x48>
   8d0d4:	11000304 	addi	r4,r2,12
   8d0d8:	10000015 	stw	zero,0(r2)
   8d0dc:	14800115 	stw	r18,4(r2)
   8d0e0:	11000215 	stw	r4,8(r2)
   8d0e4:	000b883a 	mov	r5,zero
   8d0e8:	880d883a 	mov	r6,r17
   8d0ec:	008917c0 	call	8917c <memset>
   8d0f0:	8005883a 	mov	r2,r16
   8d0f4:	dfc00317 	ldw	ra,12(sp)
   8d0f8:	dc800217 	ldw	r18,8(sp)
   8d0fc:	dc400117 	ldw	r17,4(sp)
   8d100:	dc000017 	ldw	r16,0(sp)
   8d104:	dec00404 	addi	sp,sp,16
   8d108:	f800283a 	ret

0008d10c <_cleanup>:
   8d10c:	008002f4 	movhi	r2,11
   8d110:	10844e04 	addi	r2,r2,4408
   8d114:	11000017 	ldw	r4,0(r2)
   8d118:	008d09c1 	jmpi	8d09c <_cleanup_r>

0008d11c <__sinit>:
   8d11c:	20800e17 	ldw	r2,56(r4)
   8d120:	1000401e 	bne	r2,zero,8d224 <__sinit+0x108>
   8d124:	21400117 	ldw	r5,4(r4)
   8d128:	01800274 	movhi	r6,9
   8d12c:	31b42704 	addi	r6,r6,-12132
   8d130:	20c00217 	ldw	r3,8(r4)
   8d134:	21800f15 	stw	r6,60(r4)
   8d138:	2080bb04 	addi	r2,r4,748
   8d13c:	02400044 	movi	r9,1
   8d140:	018000c4 	movi	r6,3
   8d144:	2180b915 	stw	r6,740(r4)
   8d148:	2080ba15 	stw	r2,744(r4)
   8d14c:	22400e15 	stw	r9,56(r4)
   8d150:	20800317 	ldw	r2,12(r4)
   8d154:	2000b815 	stw	zero,736(r4)
   8d158:	02000274 	movhi	r8,9
   8d15c:	423e0d04 	addi	r8,r8,-1996
   8d160:	01c00274 	movhi	r7,9
   8d164:	39fe2204 	addi	r7,r7,-1912
   8d168:	01800274 	movhi	r6,9
   8d16c:	31be4404 	addi	r6,r6,-1776
   8d170:	01000274 	movhi	r4,9
   8d174:	213e5b04 	addi	r4,r4,-1684
   8d178:	02800104 	movi	r10,4
   8d17c:	28000015 	stw	zero,0(r5)
   8d180:	28000115 	stw	zero,4(r5)
   8d184:	28000215 	stw	zero,8(r5)
   8d188:	2a80030d 	sth	r10,12(r5)
   8d18c:	2800038d 	sth	zero,14(r5)
   8d190:	28000415 	stw	zero,16(r5)
   8d194:	28000515 	stw	zero,20(r5)
   8d198:	28000615 	stw	zero,24(r5)
   8d19c:	29400715 	stw	r5,28(r5)
   8d1a0:	2a000815 	stw	r8,32(r5)
   8d1a4:	29c00915 	stw	r7,36(r5)
   8d1a8:	29800a15 	stw	r6,40(r5)
   8d1ac:	29000b15 	stw	r4,44(r5)
   8d1b0:	01400284 	movi	r5,10
   8d1b4:	18000015 	stw	zero,0(r3)
   8d1b8:	18000115 	stw	zero,4(r3)
   8d1bc:	18000215 	stw	zero,8(r3)
   8d1c0:	1940030d 	sth	r5,12(r3)
   8d1c4:	1a40038d 	sth	r9,14(r3)
   8d1c8:	18000415 	stw	zero,16(r3)
   8d1cc:	18000515 	stw	zero,20(r3)
   8d1d0:	18000615 	stw	zero,24(r3)
   8d1d4:	18c00715 	stw	r3,28(r3)
   8d1d8:	1a000815 	stw	r8,32(r3)
   8d1dc:	19c00915 	stw	r7,36(r3)
   8d1e0:	19800a15 	stw	r6,40(r3)
   8d1e4:	19000b15 	stw	r4,44(r3)
   8d1e8:	00c00484 	movi	r3,18
   8d1ec:	10c0030d 	sth	r3,12(r2)
   8d1f0:	00c00084 	movi	r3,2
   8d1f4:	10000015 	stw	zero,0(r2)
   8d1f8:	10000115 	stw	zero,4(r2)
   8d1fc:	10000215 	stw	zero,8(r2)
   8d200:	10c0038d 	sth	r3,14(r2)
   8d204:	10000415 	stw	zero,16(r2)
   8d208:	10000515 	stw	zero,20(r2)
   8d20c:	10000615 	stw	zero,24(r2)
   8d210:	10800715 	stw	r2,28(r2)
   8d214:	12000815 	stw	r8,32(r2)
   8d218:	11c00915 	stw	r7,36(r2)
   8d21c:	11800a15 	stw	r6,40(r2)
   8d220:	11000b15 	stw	r4,44(r2)
   8d224:	f800283a 	ret

0008d228 <__sfp>:
   8d228:	defffc04 	addi	sp,sp,-16
   8d22c:	008002f4 	movhi	r2,11
   8d230:	10844e04 	addi	r2,r2,4408
   8d234:	dc400115 	stw	r17,4(sp)
   8d238:	14400017 	ldw	r17,0(r2)
   8d23c:	dc800215 	stw	r18,8(sp)
   8d240:	dfc00315 	stw	ra,12(sp)
   8d244:	88800e17 	ldw	r2,56(r17)
   8d248:	dc000015 	stw	r16,0(sp)
   8d24c:	2025883a 	mov	r18,r4
   8d250:	10002826 	beq	r2,zero,8d2f4 <__sfp+0xcc>
   8d254:	8c40b804 	addi	r17,r17,736
   8d258:	043fffc4 	movi	r16,-1
   8d25c:	89400117 	ldw	r5,4(r17)
   8d260:	88800217 	ldw	r2,8(r17)
   8d264:	297fffc4 	addi	r5,r5,-1
   8d268:	28000a16 	blt	r5,zero,8d294 <__sfp+0x6c>
   8d26c:	10c0030f 	ldh	r3,12(r2)
   8d270:	18000c26 	beq	r3,zero,8d2a4 <__sfp+0x7c>
   8d274:	10c01a04 	addi	r3,r2,104
   8d278:	00000206 	br	8d284 <__sfp+0x5c>
   8d27c:	19bfe90f 	ldh	r6,-92(r3)
   8d280:	30000826 	beq	r6,zero,8d2a4 <__sfp+0x7c>
   8d284:	297fffc4 	addi	r5,r5,-1
   8d288:	18bffd04 	addi	r2,r3,-12
   8d28c:	18c01704 	addi	r3,r3,92
   8d290:	2c3ffa1e 	bne	r5,r16,8d27c <__sfp+0x54>
   8d294:	88800017 	ldw	r2,0(r17)
   8d298:	10001926 	beq	r2,zero,8d300 <__sfp+0xd8>
   8d29c:	1023883a 	mov	r17,r2
   8d2a0:	003fee06 	br	8d25c <__sfp+0x34>
   8d2a4:	00ffffc4 	movi	r3,-1
   8d2a8:	10c0038d 	sth	r3,14(r2)
   8d2ac:	00c00044 	movi	r3,1
   8d2b0:	10c0030d 	sth	r3,12(r2)
   8d2b4:	10000015 	stw	zero,0(r2)
   8d2b8:	10000215 	stw	zero,8(r2)
   8d2bc:	10000115 	stw	zero,4(r2)
   8d2c0:	10000415 	stw	zero,16(r2)
   8d2c4:	10000515 	stw	zero,20(r2)
   8d2c8:	10000615 	stw	zero,24(r2)
   8d2cc:	10000c15 	stw	zero,48(r2)
   8d2d0:	10000d15 	stw	zero,52(r2)
   8d2d4:	10001115 	stw	zero,68(r2)
   8d2d8:	10001215 	stw	zero,72(r2)
   8d2dc:	dfc00317 	ldw	ra,12(sp)
   8d2e0:	dc800217 	ldw	r18,8(sp)
   8d2e4:	dc400117 	ldw	r17,4(sp)
   8d2e8:	dc000017 	ldw	r16,0(sp)
   8d2ec:	dec00404 	addi	sp,sp,16
   8d2f0:	f800283a 	ret
   8d2f4:	8809883a 	mov	r4,r17
   8d2f8:	008d11c0 	call	8d11c <__sinit>
   8d2fc:	003fd506 	br	8d254 <__sfp+0x2c>
   8d300:	9009883a 	mov	r4,r18
   8d304:	01400104 	movi	r5,4
   8d308:	008d0a80 	call	8d0a8 <__sfmoreglue>
   8d30c:	88800015 	stw	r2,0(r17)
   8d310:	103fe21e 	bne	r2,zero,8d29c <__sfp+0x74>
   8d314:	00800304 	movi	r2,12
   8d318:	90800015 	stw	r2,0(r18)
   8d31c:	0005883a 	mov	r2,zero
   8d320:	003fee06 	br	8d2dc <__sfp+0xb4>

0008d324 <__sfp_lock_acquire>:
   8d324:	f800283a 	ret

0008d328 <__sfp_lock_release>:
   8d328:	f800283a 	ret

0008d32c <__sinit_lock_acquire>:
   8d32c:	f800283a 	ret

0008d330 <__sinit_lock_release>:
   8d330:	f800283a 	ret

0008d334 <__fp_lock_all>:
   8d334:	008002f4 	movhi	r2,11
   8d338:	10844f04 	addi	r2,r2,4412
   8d33c:	11000017 	ldw	r4,0(r2)
   8d340:	01400274 	movhi	r5,9
   8d344:	29742304 	addi	r5,r5,-12148
   8d348:	008dc541 	jmpi	8dc54 <_fwalk>

0008d34c <__fp_unlock_all>:
   8d34c:	008002f4 	movhi	r2,11
   8d350:	10844f04 	addi	r2,r2,4412
   8d354:	11000017 	ldw	r4,0(r2)
   8d358:	01400274 	movhi	r5,9
   8d35c:	29742504 	addi	r5,r5,-12140
   8d360:	008dc541 	jmpi	8dc54 <_fwalk>

0008d364 <_malloc_trim_r>:
   8d364:	defffb04 	addi	sp,sp,-20
   8d368:	dcc00315 	stw	r19,12(sp)
   8d36c:	dc800215 	stw	r18,8(sp)
   8d370:	dc400115 	stw	r17,4(sp)
   8d374:	dc000015 	stw	r16,0(sp)
   8d378:	2827883a 	mov	r19,r5
   8d37c:	dfc00415 	stw	ra,16(sp)
   8d380:	044002f4 	movhi	r17,11
   8d384:	8c7ec404 	addi	r17,r17,-1264
   8d388:	2021883a 	mov	r16,r4
   8d38c:	00916440 	call	91644 <__malloc_lock>
   8d390:	88800217 	ldw	r2,8(r17)
   8d394:	14800117 	ldw	r18,4(r2)
   8d398:	00bfff04 	movi	r2,-4
   8d39c:	90a4703a 	and	r18,r18,r2
   8d3a0:	9083fbc4 	addi	r2,r18,4079
   8d3a4:	14e7c83a 	sub	r19,r2,r19
   8d3a8:	9826d33a 	srli	r19,r19,12
   8d3ac:	0083ffc4 	movi	r2,4095
   8d3b0:	9cffffc4 	addi	r19,r19,-1
   8d3b4:	9826933a 	slli	r19,r19,12
   8d3b8:	14c0060e 	bge	r2,r19,8d3d4 <_malloc_trim_r+0x70>
   8d3bc:	8009883a 	mov	r4,r16
   8d3c0:	000b883a 	mov	r5,zero
   8d3c4:	00893580 	call	89358 <_sbrk_r>
   8d3c8:	88c00217 	ldw	r3,8(r17)
   8d3cc:	1c87883a 	add	r3,r3,r18
   8d3d0:	10c00a26 	beq	r2,r3,8d3fc <_malloc_trim_r+0x98>
   8d3d4:	8009883a 	mov	r4,r16
   8d3d8:	00916640 	call	91664 <__malloc_unlock>
   8d3dc:	0005883a 	mov	r2,zero
   8d3e0:	dfc00417 	ldw	ra,16(sp)
   8d3e4:	dcc00317 	ldw	r19,12(sp)
   8d3e8:	dc800217 	ldw	r18,8(sp)
   8d3ec:	dc400117 	ldw	r17,4(sp)
   8d3f0:	dc000017 	ldw	r16,0(sp)
   8d3f4:	dec00504 	addi	sp,sp,20
   8d3f8:	f800283a 	ret
   8d3fc:	8009883a 	mov	r4,r16
   8d400:	04cbc83a 	sub	r5,zero,r19
   8d404:	00893580 	call	89358 <_sbrk_r>
   8d408:	00ffffc4 	movi	r3,-1
   8d40c:	10c01326 	beq	r2,r3,8d45c <_malloc_trim_r+0xf8>
   8d410:	008002f4 	movhi	r2,11
   8d414:	1091ef04 	addi	r2,r2,18364
   8d418:	11000017 	ldw	r4,0(r2)
   8d41c:	88c00217 	ldw	r3,8(r17)
   8d420:	94e5c83a 	sub	r18,r18,r19
   8d424:	94800054 	ori	r18,r18,1
   8d428:	24e7c83a 	sub	r19,r4,r19
   8d42c:	1c800115 	stw	r18,4(r3)
   8d430:	8009883a 	mov	r4,r16
   8d434:	14c00015 	stw	r19,0(r2)
   8d438:	00916640 	call	91664 <__malloc_unlock>
   8d43c:	00800044 	movi	r2,1
   8d440:	dfc00417 	ldw	ra,16(sp)
   8d444:	dcc00317 	ldw	r19,12(sp)
   8d448:	dc800217 	ldw	r18,8(sp)
   8d44c:	dc400117 	ldw	r17,4(sp)
   8d450:	dc000017 	ldw	r16,0(sp)
   8d454:	dec00504 	addi	sp,sp,20
   8d458:	f800283a 	ret
   8d45c:	8009883a 	mov	r4,r16
   8d460:	000b883a 	mov	r5,zero
   8d464:	00893580 	call	89358 <_sbrk_r>
   8d468:	88c00217 	ldw	r3,8(r17)
   8d46c:	014003c4 	movi	r5,15
   8d470:	10c9c83a 	sub	r4,r2,r3
   8d474:	293fd70e 	bge	r5,r4,8d3d4 <_malloc_trim_r+0x70>
   8d478:	014002f4 	movhi	r5,11
   8d47c:	29445004 	addi	r5,r5,4416
   8d480:	29400017 	ldw	r5,0(r5)
   8d484:	21000054 	ori	r4,r4,1
   8d488:	19000115 	stw	r4,4(r3)
   8d48c:	1145c83a 	sub	r2,r2,r5
   8d490:	014002f4 	movhi	r5,11
   8d494:	2951ef04 	addi	r5,r5,18364
   8d498:	28800015 	stw	r2,0(r5)
   8d49c:	003fcd06 	br	8d3d4 <_malloc_trim_r+0x70>

0008d4a0 <_free_r>:
   8d4a0:	defffd04 	addi	sp,sp,-12
   8d4a4:	dc400115 	stw	r17,4(sp)
   8d4a8:	dc000015 	stw	r16,0(sp)
   8d4ac:	dfc00215 	stw	ra,8(sp)
   8d4b0:	2821883a 	mov	r16,r5
   8d4b4:	2023883a 	mov	r17,r4
   8d4b8:	28004b26 	beq	r5,zero,8d5e8 <_free_r+0x148>
   8d4bc:	00916440 	call	91644 <__malloc_lock>
   8d4c0:	823fff17 	ldw	r8,-4(r16)
   8d4c4:	00bfff84 	movi	r2,-2
   8d4c8:	81bffe04 	addi	r6,r16,-8
   8d4cc:	4084703a 	and	r2,r8,r2
   8d4d0:	3087883a 	add	r3,r6,r2
   8d4d4:	014002f4 	movhi	r5,11
   8d4d8:	297ec404 	addi	r5,r5,-1264
   8d4dc:	1a400117 	ldw	r9,4(r3)
   8d4e0:	29000217 	ldw	r4,8(r5)
   8d4e4:	01ffff04 	movi	r7,-4
   8d4e8:	49ce703a 	and	r7,r9,r7
   8d4ec:	20c06526 	beq	r4,r3,8d684 <_free_r+0x1e4>
   8d4f0:	19c00115 	stw	r7,4(r3)
   8d4f4:	4200004c 	andi	r8,r8,1
   8d4f8:	40003026 	beq	r8,zero,8d5bc <_free_r+0x11c>
   8d4fc:	0009883a 	mov	r4,zero
   8d500:	19d1883a 	add	r8,r3,r7
   8d504:	42000117 	ldw	r8,4(r8)
   8d508:	4200004c 	andi	r8,r8,1
   8d50c:	4000061e 	bne	r8,zero,8d528 <_free_r+0x88>
   8d510:	11c5883a 	add	r2,r2,r7
   8d514:	19c00217 	ldw	r7,8(r3)
   8d518:	20004e26 	beq	r4,zero,8d654 <_free_r+0x1b4>
   8d51c:	18c00317 	ldw	r3,12(r3)
   8d520:	38c00315 	stw	r3,12(r7)
   8d524:	19c00215 	stw	r7,8(r3)
   8d528:	11c00054 	ori	r7,r2,1
   8d52c:	3087883a 	add	r3,r6,r2
   8d530:	31c00115 	stw	r7,4(r6)
   8d534:	18800015 	stw	r2,0(r3)
   8d538:	20001a1e 	bne	r4,zero,8d5a4 <_free_r+0x104>
   8d53c:	00c07fc4 	movi	r3,511
   8d540:	18802e2e 	bgeu	r3,r2,8d5fc <_free_r+0x15c>
   8d544:	1006d27a 	srli	r3,r2,9
   8d548:	01000104 	movi	r4,4
   8d54c:	20c06636 	bltu	r4,r3,8d6e8 <_free_r+0x248>
   8d550:	1008d1ba 	srli	r4,r2,6
   8d554:	21000e04 	addi	r4,r4,56
   8d558:	210f883a 	add	r7,r4,r4
   8d55c:	39cf883a 	add	r7,r7,r7
   8d560:	39cf883a 	add	r7,r7,r7
   8d564:	29cf883a 	add	r7,r5,r7
   8d568:	38c00217 	ldw	r3,8(r7)
   8d56c:	014002f4 	movhi	r5,11
   8d570:	297ec404 	addi	r5,r5,-1264
   8d574:	19c06126 	beq	r3,r7,8d6fc <_free_r+0x25c>
   8d578:	013fff04 	movi	r4,-4
   8d57c:	19400117 	ldw	r5,4(r3)
   8d580:	290a703a 	and	r5,r5,r4
   8d584:	1140022e 	bgeu	r2,r5,8d590 <_free_r+0xf0>
   8d588:	18c00217 	ldw	r3,8(r3)
   8d58c:	38fffb1e 	bne	r7,r3,8d57c <_free_r+0xdc>
   8d590:	18800317 	ldw	r2,12(r3)
   8d594:	30800315 	stw	r2,12(r6)
   8d598:	30c00215 	stw	r3,8(r6)
   8d59c:	11800215 	stw	r6,8(r2)
   8d5a0:	19800315 	stw	r6,12(r3)
   8d5a4:	8809883a 	mov	r4,r17
   8d5a8:	dfc00217 	ldw	ra,8(sp)
   8d5ac:	dc400117 	ldw	r17,4(sp)
   8d5b0:	dc000017 	ldw	r16,0(sp)
   8d5b4:	dec00304 	addi	sp,sp,12
   8d5b8:	00916641 	jmpi	91664 <__malloc_unlock>
   8d5bc:	813ffe17 	ldw	r4,-8(r16)
   8d5c0:	2a400204 	addi	r9,r5,8
   8d5c4:	310dc83a 	sub	r6,r6,r4
   8d5c8:	32000217 	ldw	r8,8(r6)
   8d5cc:	1105883a 	add	r2,r2,r4
   8d5d0:	42404326 	beq	r8,r9,8d6e0 <_free_r+0x240>
   8d5d4:	32400317 	ldw	r9,12(r6)
   8d5d8:	0009883a 	mov	r4,zero
   8d5dc:	42400315 	stw	r9,12(r8)
   8d5e0:	4a000215 	stw	r8,8(r9)
   8d5e4:	003fc606 	br	8d500 <_free_r+0x60>
   8d5e8:	dfc00217 	ldw	ra,8(sp)
   8d5ec:	dc400117 	ldw	r17,4(sp)
   8d5f0:	dc000017 	ldw	r16,0(sp)
   8d5f4:	dec00304 	addi	sp,sp,12
   8d5f8:	f800283a 	ret
   8d5fc:	1004d0fa 	srli	r2,r2,3
   8d600:	02000044 	movi	r8,1
   8d604:	29c00117 	ldw	r7,4(r5)
   8d608:	1087883a 	add	r3,r2,r2
   8d60c:	18c7883a 	add	r3,r3,r3
   8d610:	1005d0ba 	srai	r2,r2,2
   8d614:	18c7883a 	add	r3,r3,r3
   8d618:	28c7883a 	add	r3,r5,r3
   8d61c:	19000217 	ldw	r4,8(r3)
   8d620:	4084983a 	sll	r2,r8,r2
   8d624:	30c00315 	stw	r3,12(r6)
   8d628:	31000215 	stw	r4,8(r6)
   8d62c:	11c4b03a 	or	r2,r2,r7
   8d630:	21800315 	stw	r6,12(r4)
   8d634:	8809883a 	mov	r4,r17
   8d638:	28800115 	stw	r2,4(r5)
   8d63c:	19800215 	stw	r6,8(r3)
   8d640:	dfc00217 	ldw	ra,8(sp)
   8d644:	dc400117 	ldw	r17,4(sp)
   8d648:	dc000017 	ldw	r16,0(sp)
   8d64c:	dec00304 	addi	sp,sp,12
   8d650:	00916641 	jmpi	91664 <__malloc_unlock>
   8d654:	020002f4 	movhi	r8,11
   8d658:	423ec604 	addi	r8,r8,-1256
   8d65c:	3a3faf1e 	bne	r7,r8,8d51c <_free_r+0x7c>
   8d660:	29800515 	stw	r6,20(r5)
   8d664:	29800415 	stw	r6,16(r5)
   8d668:	11000054 	ori	r4,r2,1
   8d66c:	3087883a 	add	r3,r6,r2
   8d670:	31c00315 	stw	r7,12(r6)
   8d674:	31c00215 	stw	r7,8(r6)
   8d678:	31000115 	stw	r4,4(r6)
   8d67c:	18800015 	stw	r2,0(r3)
   8d680:	003fc806 	br	8d5a4 <_free_r+0x104>
   8d684:	4200004c 	andi	r8,r8,1
   8d688:	3885883a 	add	r2,r7,r2
   8d68c:	4000071e 	bne	r8,zero,8d6ac <_free_r+0x20c>
   8d690:	81fffe17 	ldw	r7,-8(r16)
   8d694:	31cdc83a 	sub	r6,r6,r7
   8d698:	30c00317 	ldw	r3,12(r6)
   8d69c:	31000217 	ldw	r4,8(r6)
   8d6a0:	11c5883a 	add	r2,r2,r7
   8d6a4:	20c00315 	stw	r3,12(r4)
   8d6a8:	19000215 	stw	r4,8(r3)
   8d6ac:	00c002f4 	movhi	r3,11
   8d6b0:	18c45104 	addi	r3,r3,4420
   8d6b4:	18c00017 	ldw	r3,0(r3)
   8d6b8:	11000054 	ori	r4,r2,1
   8d6bc:	31000115 	stw	r4,4(r6)
   8d6c0:	29800215 	stw	r6,8(r5)
   8d6c4:	10ffb736 	bltu	r2,r3,8d5a4 <_free_r+0x104>
   8d6c8:	008002f4 	movhi	r2,11
   8d6cc:	1091e404 	addi	r2,r2,18320
   8d6d0:	11400017 	ldw	r5,0(r2)
   8d6d4:	8809883a 	mov	r4,r17
   8d6d8:	008d3640 	call	8d364 <_malloc_trim_r>
   8d6dc:	003fb106 	br	8d5a4 <_free_r+0x104>
   8d6e0:	01000044 	movi	r4,1
   8d6e4:	003f8606 	br	8d500 <_free_r+0x60>
   8d6e8:	01000504 	movi	r4,20
   8d6ec:	20c00b36 	bltu	r4,r3,8d71c <_free_r+0x27c>
   8d6f0:	190016c4 	addi	r4,r3,91
   8d6f4:	210f883a 	add	r7,r4,r4
   8d6f8:	003f9806 	br	8d55c <_free_r+0xbc>
   8d6fc:	2009d0ba 	srai	r4,r4,2
   8d700:	00800044 	movi	r2,1
   8d704:	29c00117 	ldw	r7,4(r5)
   8d708:	1108983a 	sll	r4,r2,r4
   8d70c:	1805883a 	mov	r2,r3
   8d710:	21c8b03a 	or	r4,r4,r7
   8d714:	29000115 	stw	r4,4(r5)
   8d718:	003f9e06 	br	8d594 <_free_r+0xf4>
   8d71c:	01001504 	movi	r4,84
   8d720:	20c00436 	bltu	r4,r3,8d734 <_free_r+0x294>
   8d724:	1008d33a 	srli	r4,r2,12
   8d728:	21001b84 	addi	r4,r4,110
   8d72c:	210f883a 	add	r7,r4,r4
   8d730:	003f8a06 	br	8d55c <_free_r+0xbc>
   8d734:	01005504 	movi	r4,340
   8d738:	20c00436 	bltu	r4,r3,8d74c <_free_r+0x2ac>
   8d73c:	1008d3fa 	srli	r4,r2,15
   8d740:	21001dc4 	addi	r4,r4,119
   8d744:	210f883a 	add	r7,r4,r4
   8d748:	003f8406 	br	8d55c <_free_r+0xbc>
   8d74c:	01015504 	movi	r4,1364
   8d750:	20c00436 	bltu	r4,r3,8d764 <_free_r+0x2c4>
   8d754:	1008d4ba 	srli	r4,r2,18
   8d758:	21001f04 	addi	r4,r4,124
   8d75c:	210f883a 	add	r7,r4,r4
   8d760:	003f7e06 	br	8d55c <_free_r+0xbc>
   8d764:	01c03f04 	movi	r7,252
   8d768:	01001f84 	movi	r4,126
   8d76c:	003f7b06 	br	8d55c <_free_r+0xbc>

0008d770 <__sfvwrite_r>:
   8d770:	30800217 	ldw	r2,8(r6)
   8d774:	defff504 	addi	sp,sp,-44
   8d778:	dd400615 	stw	r21,24(sp)
   8d77c:	dd000515 	stw	r20,20(sp)
   8d780:	dc000115 	stw	r16,4(sp)
   8d784:	dfc00a15 	stw	ra,40(sp)
   8d788:	df000915 	stw	fp,36(sp)
   8d78c:	ddc00815 	stw	r23,32(sp)
   8d790:	dd800715 	stw	r22,28(sp)
   8d794:	dcc00415 	stw	r19,16(sp)
   8d798:	dc800315 	stw	r18,12(sp)
   8d79c:	dc400215 	stw	r17,8(sp)
   8d7a0:	3029883a 	mov	r20,r6
   8d7a4:	202b883a 	mov	r21,r4
   8d7a8:	2821883a 	mov	r16,r5
   8d7ac:	10002126 	beq	r2,zero,8d834 <__sfvwrite_r+0xc4>
   8d7b0:	2880030b 	ldhu	r2,12(r5)
   8d7b4:	10c0020c 	andi	r3,r2,8
   8d7b8:	18ffffcc 	andi	r3,r3,65535
   8d7bc:	18e0001c 	xori	r3,r3,32768
   8d7c0:	18e00004 	addi	r3,r3,-32768
   8d7c4:	18002826 	beq	r3,zero,8d868 <__sfvwrite_r+0xf8>
   8d7c8:	28c00417 	ldw	r3,16(r5)
   8d7cc:	18002626 	beq	r3,zero,8d868 <__sfvwrite_r+0xf8>
   8d7d0:	10c0008c 	andi	r3,r2,2
   8d7d4:	18ffffcc 	andi	r3,r3,65535
   8d7d8:	18e0001c 	xori	r3,r3,32768
   8d7dc:	18e00004 	addi	r3,r3,-32768
   8d7e0:	a4400017 	ldw	r17,0(r20)
   8d7e4:	18002b26 	beq	r3,zero,8d894 <__sfvwrite_r+0x124>
   8d7e8:	0027883a 	mov	r19,zero
   8d7ec:	0025883a 	mov	r18,zero
   8d7f0:	05810004 	movi	r22,1024
   8d7f4:	980d883a 	mov	r6,r19
   8d7f8:	a809883a 	mov	r4,r21
   8d7fc:	90004f26 	beq	r18,zero,8d93c <__sfvwrite_r+0x1cc>
   8d800:	900f883a 	mov	r7,r18
   8d804:	81400717 	ldw	r5,28(r16)
   8d808:	b480012e 	bgeu	r22,r18,8d810 <__sfvwrite_r+0xa0>
   8d80c:	01c10004 	movi	r7,1024
   8d810:	80800917 	ldw	r2,36(r16)
   8d814:	103ee83a 	callr	r2
   8d818:	0080540e 	bge	zero,r2,8d96c <__sfvwrite_r+0x1fc>
   8d81c:	a0c00217 	ldw	r3,8(r20)
   8d820:	98a7883a 	add	r19,r19,r2
   8d824:	90a5c83a 	sub	r18,r18,r2
   8d828:	1885c83a 	sub	r2,r3,r2
   8d82c:	a0800215 	stw	r2,8(r20)
   8d830:	103ff01e 	bne	r2,zero,8d7f4 <__sfvwrite_r+0x84>
   8d834:	0005883a 	mov	r2,zero
   8d838:	dfc00a17 	ldw	ra,40(sp)
   8d83c:	df000917 	ldw	fp,36(sp)
   8d840:	ddc00817 	ldw	r23,32(sp)
   8d844:	dd800717 	ldw	r22,28(sp)
   8d848:	dd400617 	ldw	r21,24(sp)
   8d84c:	dd000517 	ldw	r20,20(sp)
   8d850:	dcc00417 	ldw	r19,16(sp)
   8d854:	dc800317 	ldw	r18,12(sp)
   8d858:	dc400217 	ldw	r17,8(sp)
   8d85c:	dc000117 	ldw	r16,4(sp)
   8d860:	dec00b04 	addi	sp,sp,44
   8d864:	f800283a 	ret
   8d868:	a809883a 	mov	r4,r21
   8d86c:	800b883a 	mov	r5,r16
   8d870:	008b4dc0 	call	8b4dc <__swsetup_r>
   8d874:	1000f01e 	bne	r2,zero,8dc38 <__sfvwrite_r+0x4c8>
   8d878:	8080030b 	ldhu	r2,12(r16)
   8d87c:	a4400017 	ldw	r17,0(r20)
   8d880:	10c0008c 	andi	r3,r2,2
   8d884:	18ffffcc 	andi	r3,r3,65535
   8d888:	18e0001c 	xori	r3,r3,32768
   8d88c:	18e00004 	addi	r3,r3,-32768
   8d890:	183fd51e 	bne	r3,zero,8d7e8 <__sfvwrite_r+0x78>
   8d894:	10c0004c 	andi	r3,r2,1
   8d898:	002d883a 	mov	r22,zero
   8d89c:	1800381e 	bne	r3,zero,8d980 <__sfvwrite_r+0x210>
   8d8a0:	0025883a 	mov	r18,zero
   8d8a4:	90002126 	beq	r18,zero,8d92c <__sfvwrite_r+0x1bc>
   8d8a8:	10c0800c 	andi	r3,r2,512
   8d8ac:	18ffffcc 	andi	r3,r3,65535
   8d8b0:	18e0001c 	xori	r3,r3,32768
   8d8b4:	18e00004 	addi	r3,r3,-32768
   8d8b8:	84c00217 	ldw	r19,8(r16)
   8d8bc:	18006b26 	beq	r3,zero,8da6c <__sfvwrite_r+0x2fc>
   8d8c0:	980f883a 	mov	r7,r19
   8d8c4:	94c08636 	bltu	r18,r19,8dae0 <__sfvwrite_r+0x370>
   8d8c8:	10c1200c 	andi	r3,r2,1152
   8d8cc:	18009f1e 	bne	r3,zero,8db4c <__sfvwrite_r+0x3dc>
   8d8d0:	81000017 	ldw	r4,0(r16)
   8d8d4:	982f883a 	mov	r23,r19
   8d8d8:	9039883a 	mov	fp,r18
   8d8dc:	9027883a 	mov	r19,r18
   8d8e0:	380d883a 	mov	r6,r7
   8d8e4:	b00b883a 	mov	r5,r22
   8d8e8:	d9c00015 	stw	r7,0(sp)
   8d8ec:	008e1300 	call	8e130 <memmove>
   8d8f0:	d9c00017 	ldw	r7,0(sp)
   8d8f4:	81000217 	ldw	r4,8(r16)
   8d8f8:	80800017 	ldw	r2,0(r16)
   8d8fc:	25efc83a 	sub	r23,r4,r23
   8d900:	11cf883a 	add	r7,r2,r7
   8d904:	85c00215 	stw	r23,8(r16)
   8d908:	81c00015 	stw	r7,0(r16)
   8d90c:	a0800217 	ldw	r2,8(r20)
   8d910:	b72d883a 	add	r22,r22,fp
   8d914:	9725c83a 	sub	r18,r18,fp
   8d918:	14e7c83a 	sub	r19,r2,r19
   8d91c:	a4c00215 	stw	r19,8(r20)
   8d920:	983fc426 	beq	r19,zero,8d834 <__sfvwrite_r+0xc4>
   8d924:	8080030b 	ldhu	r2,12(r16)
   8d928:	903fdf1e 	bne	r18,zero,8d8a8 <__sfvwrite_r+0x138>
   8d92c:	8d800017 	ldw	r22,0(r17)
   8d930:	8c800117 	ldw	r18,4(r17)
   8d934:	8c400204 	addi	r17,r17,8
   8d938:	003fda06 	br	8d8a4 <__sfvwrite_r+0x134>
   8d93c:	8cc00017 	ldw	r19,0(r17)
   8d940:	8c800117 	ldw	r18,4(r17)
   8d944:	8c400204 	addi	r17,r17,8
   8d948:	003faa06 	br	8d7f4 <__sfvwrite_r+0x84>
   8d94c:	008f2000 	call	8f200 <_realloc_r>
   8d950:	102f883a 	mov	r23,r2
   8d954:	10009f1e 	bne	r2,zero,8dbd4 <__sfvwrite_r+0x464>
   8d958:	81400417 	ldw	r5,16(r16)
   8d95c:	a809883a 	mov	r4,r21
   8d960:	008d4a00 	call	8d4a0 <_free_r>
   8d964:	00800304 	movi	r2,12
   8d968:	a8800015 	stw	r2,0(r21)
   8d96c:	80c0030b 	ldhu	r3,12(r16)
   8d970:	00bfffc4 	movi	r2,-1
   8d974:	18c01014 	ori	r3,r3,64
   8d978:	80c0030d 	sth	r3,12(r16)
   8d97c:	003fae06 	br	8d838 <__sfvwrite_r+0xc8>
   8d980:	0007883a 	mov	r3,zero
   8d984:	0039883a 	mov	fp,zero
   8d988:	0025883a 	mov	r18,zero
   8d98c:	90001e26 	beq	r18,zero,8da08 <__sfvwrite_r+0x298>
   8d990:	18006526 	beq	r3,zero,8db28 <__sfvwrite_r+0x3b8>
   8d994:	b02f883a 	mov	r23,r22
   8d998:	9580012e 	bgeu	r18,r22,8d9a0 <__sfvwrite_r+0x230>
   8d99c:	902f883a 	mov	r23,r18
   8d9a0:	81000017 	ldw	r4,0(r16)
   8d9a4:	80800417 	ldw	r2,16(r16)
   8d9a8:	84c00217 	ldw	r19,8(r16)
   8d9ac:	81c00517 	ldw	r7,20(r16)
   8d9b0:	1100022e 	bgeu	r2,r4,8d9bc <__sfvwrite_r+0x24c>
   8d9b4:	99e7883a 	add	r19,r19,r7
   8d9b8:	9dc01816 	blt	r19,r23,8da1c <__sfvwrite_r+0x2ac>
   8d9bc:	b9c03b16 	blt	r23,r7,8daac <__sfvwrite_r+0x33c>
   8d9c0:	80800917 	ldw	r2,36(r16)
   8d9c4:	81400717 	ldw	r5,28(r16)
   8d9c8:	a809883a 	mov	r4,r21
   8d9cc:	d8c00015 	stw	r3,0(sp)
   8d9d0:	e00d883a 	mov	r6,fp
   8d9d4:	103ee83a 	callr	r2
   8d9d8:	1027883a 	mov	r19,r2
   8d9dc:	d8c00017 	ldw	r3,0(sp)
   8d9e0:	00bfe20e 	bge	zero,r2,8d96c <__sfvwrite_r+0x1fc>
   8d9e4:	b4edc83a 	sub	r22,r22,r19
   8d9e8:	b0001a26 	beq	r22,zero,8da54 <__sfvwrite_r+0x2e4>
   8d9ec:	a0800217 	ldw	r2,8(r20)
   8d9f0:	e4f9883a 	add	fp,fp,r19
   8d9f4:	94e5c83a 	sub	r18,r18,r19
   8d9f8:	14e7c83a 	sub	r19,r2,r19
   8d9fc:	a4c00215 	stw	r19,8(r20)
   8da00:	983f8c26 	beq	r19,zero,8d834 <__sfvwrite_r+0xc4>
   8da04:	903fe21e 	bne	r18,zero,8d990 <__sfvwrite_r+0x220>
   8da08:	8f000017 	ldw	fp,0(r17)
   8da0c:	8c800117 	ldw	r18,4(r17)
   8da10:	0007883a 	mov	r3,zero
   8da14:	8c400204 	addi	r17,r17,8
   8da18:	003fdc06 	br	8d98c <__sfvwrite_r+0x21c>
   8da1c:	e00b883a 	mov	r5,fp
   8da20:	980d883a 	mov	r6,r19
   8da24:	d8c00015 	stw	r3,0(sp)
   8da28:	008e1300 	call	8e130 <memmove>
   8da2c:	80800017 	ldw	r2,0(r16)
   8da30:	a809883a 	mov	r4,r21
   8da34:	800b883a 	mov	r5,r16
   8da38:	14c5883a 	add	r2,r2,r19
   8da3c:	80800015 	stw	r2,0(r16)
   8da40:	008ce740 	call	8ce74 <_fflush_r>
   8da44:	d8c00017 	ldw	r3,0(sp)
   8da48:	103fc81e 	bne	r2,zero,8d96c <__sfvwrite_r+0x1fc>
   8da4c:	b4edc83a 	sub	r22,r22,r19
   8da50:	b03fe61e 	bne	r22,zero,8d9ec <__sfvwrite_r+0x27c>
   8da54:	a809883a 	mov	r4,r21
   8da58:	800b883a 	mov	r5,r16
   8da5c:	008ce740 	call	8ce74 <_fflush_r>
   8da60:	103fc21e 	bne	r2,zero,8d96c <__sfvwrite_r+0x1fc>
   8da64:	0007883a 	mov	r3,zero
   8da68:	003fe006 	br	8d9ec <__sfvwrite_r+0x27c>
   8da6c:	81000017 	ldw	r4,0(r16)
   8da70:	80800417 	ldw	r2,16(r16)
   8da74:	1100022e 	bgeu	r2,r4,8da80 <__sfvwrite_r+0x310>
   8da78:	9839883a 	mov	fp,r19
   8da7c:	9c806036 	bltu	r19,r18,8dc00 <__sfvwrite_r+0x490>
   8da80:	81c00517 	ldw	r7,20(r16)
   8da84:	91c01c36 	bltu	r18,r7,8daf8 <__sfvwrite_r+0x388>
   8da88:	80800917 	ldw	r2,36(r16)
   8da8c:	81400717 	ldw	r5,28(r16)
   8da90:	a809883a 	mov	r4,r21
   8da94:	b00d883a 	mov	r6,r22
   8da98:	103ee83a 	callr	r2
   8da9c:	1027883a 	mov	r19,r2
   8daa0:	00bfb20e 	bge	zero,r2,8d96c <__sfvwrite_r+0x1fc>
   8daa4:	1039883a 	mov	fp,r2
   8daa8:	003f9806 	br	8d90c <__sfvwrite_r+0x19c>
   8daac:	b80d883a 	mov	r6,r23
   8dab0:	e00b883a 	mov	r5,fp
   8dab4:	d8c00015 	stw	r3,0(sp)
   8dab8:	008e1300 	call	8e130 <memmove>
   8dabc:	80800217 	ldw	r2,8(r16)
   8dac0:	81000017 	ldw	r4,0(r16)
   8dac4:	b827883a 	mov	r19,r23
   8dac8:	15c5c83a 	sub	r2,r2,r23
   8dacc:	25ef883a 	add	r23,r4,r23
   8dad0:	80800215 	stw	r2,8(r16)
   8dad4:	85c00015 	stw	r23,0(r16)
   8dad8:	d8c00017 	ldw	r3,0(sp)
   8dadc:	003fc106 	br	8d9e4 <__sfvwrite_r+0x274>
   8dae0:	81000017 	ldw	r4,0(r16)
   8dae4:	902f883a 	mov	r23,r18
   8dae8:	9039883a 	mov	fp,r18
   8daec:	9027883a 	mov	r19,r18
   8daf0:	900f883a 	mov	r7,r18
   8daf4:	003f7a06 	br	8d8e0 <__sfvwrite_r+0x170>
   8daf8:	b00b883a 	mov	r5,r22
   8dafc:	900d883a 	mov	r6,r18
   8db00:	008e1300 	call	8e130 <memmove>
   8db04:	80c00217 	ldw	r3,8(r16)
   8db08:	80800017 	ldw	r2,0(r16)
   8db0c:	9027883a 	mov	r19,r18
   8db10:	1c87c83a 	sub	r3,r3,r18
   8db14:	1485883a 	add	r2,r2,r18
   8db18:	80c00215 	stw	r3,8(r16)
   8db1c:	80800015 	stw	r2,0(r16)
   8db20:	9039883a 	mov	fp,r18
   8db24:	003f7906 	br	8d90c <__sfvwrite_r+0x19c>
   8db28:	e009883a 	mov	r4,fp
   8db2c:	01400284 	movi	r5,10
   8db30:	900d883a 	mov	r6,r18
   8db34:	008e0380 	call	8e038 <memchr>
   8db38:	10003c26 	beq	r2,zero,8dc2c <__sfvwrite_r+0x4bc>
   8db3c:	15800044 	addi	r22,r2,1
   8db40:	b72dc83a 	sub	r22,r22,fp
   8db44:	00c00044 	movi	r3,1
   8db48:	003f9206 	br	8d994 <__sfvwrite_r+0x224>
   8db4c:	81000517 	ldw	r4,20(r16)
   8db50:	81400417 	ldw	r5,16(r16)
   8db54:	80c00017 	ldw	r3,0(r16)
   8db58:	210d883a 	add	r6,r4,r4
   8db5c:	3109883a 	add	r4,r6,r4
   8db60:	2026d7fa 	srli	r19,r4,31
   8db64:	1979c83a 	sub	fp,r3,r5
   8db68:	e1800044 	addi	r6,fp,1
   8db6c:	9909883a 	add	r4,r19,r4
   8db70:	2027d07a 	srai	r19,r4,1
   8db74:	3489883a 	add	r4,r6,r18
   8db78:	980d883a 	mov	r6,r19
   8db7c:	9900022e 	bgeu	r19,r4,8db88 <__sfvwrite_r+0x418>
   8db80:	2027883a 	mov	r19,r4
   8db84:	200d883a 	mov	r6,r4
   8db88:	1081000c 	andi	r2,r2,1024
   8db8c:	10bfffcc 	andi	r2,r2,65535
   8db90:	10a0001c 	xori	r2,r2,32768
   8db94:	10a00004 	addi	r2,r2,-32768
   8db98:	a809883a 	mov	r4,r21
   8db9c:	103f6b26 	beq	r2,zero,8d94c <__sfvwrite_r+0x1dc>
   8dba0:	300b883a 	mov	r5,r6
   8dba4:	00889000 	call	88900 <_malloc_r>
   8dba8:	102f883a 	mov	r23,r2
   8dbac:	103f6d26 	beq	r2,zero,8d964 <__sfvwrite_r+0x1f4>
   8dbb0:	81400417 	ldw	r5,16(r16)
   8dbb4:	1009883a 	mov	r4,r2
   8dbb8:	e00d883a 	mov	r6,fp
   8dbbc:	00890840 	call	89084 <memcpy>
   8dbc0:	8080030b 	ldhu	r2,12(r16)
   8dbc4:	00fedfc4 	movi	r3,-1153
   8dbc8:	10c4703a 	and	r2,r2,r3
   8dbcc:	10802014 	ori	r2,r2,128
   8dbd0:	8080030d 	sth	r2,12(r16)
   8dbd4:	bf09883a 	add	r4,r23,fp
   8dbd8:	9f07c83a 	sub	r3,r19,fp
   8dbdc:	85c00415 	stw	r23,16(r16)
   8dbe0:	84c00515 	stw	r19,20(r16)
   8dbe4:	81000015 	stw	r4,0(r16)
   8dbe8:	902f883a 	mov	r23,r18
   8dbec:	80c00215 	stw	r3,8(r16)
   8dbf0:	9039883a 	mov	fp,r18
   8dbf4:	9027883a 	mov	r19,r18
   8dbf8:	900f883a 	mov	r7,r18
   8dbfc:	003f3806 	br	8d8e0 <__sfvwrite_r+0x170>
   8dc00:	b00b883a 	mov	r5,r22
   8dc04:	980d883a 	mov	r6,r19
   8dc08:	008e1300 	call	8e130 <memmove>
   8dc0c:	80800017 	ldw	r2,0(r16)
   8dc10:	a809883a 	mov	r4,r21
   8dc14:	800b883a 	mov	r5,r16
   8dc18:	14c5883a 	add	r2,r2,r19
   8dc1c:	80800015 	stw	r2,0(r16)
   8dc20:	008ce740 	call	8ce74 <_fflush_r>
   8dc24:	103f3926 	beq	r2,zero,8d90c <__sfvwrite_r+0x19c>
   8dc28:	003f5006 	br	8d96c <__sfvwrite_r+0x1fc>
   8dc2c:	95800044 	addi	r22,r18,1
   8dc30:	00c00044 	movi	r3,1
   8dc34:	003f5706 	br	8d994 <__sfvwrite_r+0x224>
   8dc38:	80c0030b 	ldhu	r3,12(r16)
   8dc3c:	00bfffc4 	movi	r2,-1
   8dc40:	18c01014 	ori	r3,r3,64
   8dc44:	80c0030d 	sth	r3,12(r16)
   8dc48:	00c00244 	movi	r3,9
   8dc4c:	a8c00015 	stw	r3,0(r21)
   8dc50:	003ef906 	br	8d838 <__sfvwrite_r+0xc8>

0008dc54 <_fwalk>:
   8dc54:	defff904 	addi	sp,sp,-28
   8dc58:	dcc00315 	stw	r19,12(sp)
   8dc5c:	24c0b804 	addi	r19,r4,736
   8dc60:	dd400515 	stw	r21,20(sp)
   8dc64:	dd000415 	stw	r20,16(sp)
   8dc68:	dfc00615 	stw	ra,24(sp)
   8dc6c:	dc800215 	stw	r18,8(sp)
   8dc70:	dc400115 	stw	r17,4(sp)
   8dc74:	dc000015 	stw	r16,0(sp)
   8dc78:	282b883a 	mov	r21,r5
   8dc7c:	0029883a 	mov	r20,zero
   8dc80:	008d3240 	call	8d324 <__sfp_lock_acquire>
   8dc84:	98001226 	beq	r19,zero,8dcd0 <_fwalk+0x7c>
   8dc88:	04bfffc4 	movi	r18,-1
   8dc8c:	9c400117 	ldw	r17,4(r19)
   8dc90:	9c000217 	ldw	r16,8(r19)
   8dc94:	8c7fffc4 	addi	r17,r17,-1
   8dc98:	88000b16 	blt	r17,zero,8dcc8 <_fwalk+0x74>
   8dc9c:	84000304 	addi	r16,r16,12
   8dca0:	80c0000f 	ldh	r3,0(r16)
   8dca4:	8c7fffc4 	addi	r17,r17,-1
   8dca8:	813ffd04 	addi	r4,r16,-12
   8dcac:	18000426 	beq	r3,zero,8dcc0 <_fwalk+0x6c>
   8dcb0:	80c0008f 	ldh	r3,2(r16)
   8dcb4:	1c800226 	beq	r3,r18,8dcc0 <_fwalk+0x6c>
   8dcb8:	a83ee83a 	callr	r21
   8dcbc:	a0a8b03a 	or	r20,r20,r2
   8dcc0:	84001704 	addi	r16,r16,92
   8dcc4:	8cbff61e 	bne	r17,r18,8dca0 <_fwalk+0x4c>
   8dcc8:	9cc00017 	ldw	r19,0(r19)
   8dccc:	983fef1e 	bne	r19,zero,8dc8c <_fwalk+0x38>
   8dcd0:	008d3280 	call	8d328 <__sfp_lock_release>
   8dcd4:	a005883a 	mov	r2,r20
   8dcd8:	dfc00617 	ldw	ra,24(sp)
   8dcdc:	dd400517 	ldw	r21,20(sp)
   8dce0:	dd000417 	ldw	r20,16(sp)
   8dce4:	dcc00317 	ldw	r19,12(sp)
   8dce8:	dc800217 	ldw	r18,8(sp)
   8dcec:	dc400117 	ldw	r17,4(sp)
   8dcf0:	dc000017 	ldw	r16,0(sp)
   8dcf4:	dec00704 	addi	sp,sp,28
   8dcf8:	f800283a 	ret

0008dcfc <_fwalk_reent>:
   8dcfc:	defff804 	addi	sp,sp,-32
   8dd00:	dcc00315 	stw	r19,12(sp)
   8dd04:	24c0b804 	addi	r19,r4,736
   8dd08:	dd800615 	stw	r22,24(sp)
   8dd0c:	dd400515 	stw	r21,20(sp)
   8dd10:	dd000415 	stw	r20,16(sp)
   8dd14:	dfc00715 	stw	ra,28(sp)
   8dd18:	dc800215 	stw	r18,8(sp)
   8dd1c:	dc400115 	stw	r17,4(sp)
   8dd20:	dc000015 	stw	r16,0(sp)
   8dd24:	2029883a 	mov	r20,r4
   8dd28:	282b883a 	mov	r21,r5
   8dd2c:	002d883a 	mov	r22,zero
   8dd30:	008d3240 	call	8d324 <__sfp_lock_acquire>
   8dd34:	98001326 	beq	r19,zero,8dd84 <_fwalk_reent+0x88>
   8dd38:	04bfffc4 	movi	r18,-1
   8dd3c:	9c400117 	ldw	r17,4(r19)
   8dd40:	9c000217 	ldw	r16,8(r19)
   8dd44:	8c7fffc4 	addi	r17,r17,-1
   8dd48:	88000c16 	blt	r17,zero,8dd7c <_fwalk_reent+0x80>
   8dd4c:	84000304 	addi	r16,r16,12
   8dd50:	80c0000f 	ldh	r3,0(r16)
   8dd54:	8c7fffc4 	addi	r17,r17,-1
   8dd58:	817ffd04 	addi	r5,r16,-12
   8dd5c:	18000526 	beq	r3,zero,8dd74 <_fwalk_reent+0x78>
   8dd60:	80c0008f 	ldh	r3,2(r16)
   8dd64:	a009883a 	mov	r4,r20
   8dd68:	1c800226 	beq	r3,r18,8dd74 <_fwalk_reent+0x78>
   8dd6c:	a83ee83a 	callr	r21
   8dd70:	b0acb03a 	or	r22,r22,r2
   8dd74:	84001704 	addi	r16,r16,92
   8dd78:	8cbff51e 	bne	r17,r18,8dd50 <_fwalk_reent+0x54>
   8dd7c:	9cc00017 	ldw	r19,0(r19)
   8dd80:	983fee1e 	bne	r19,zero,8dd3c <_fwalk_reent+0x40>
   8dd84:	008d3280 	call	8d328 <__sfp_lock_release>
   8dd88:	b005883a 	mov	r2,r22
   8dd8c:	dfc00717 	ldw	ra,28(sp)
   8dd90:	dd800617 	ldw	r22,24(sp)
   8dd94:	dd400517 	ldw	r21,20(sp)
   8dd98:	dd000417 	ldw	r20,16(sp)
   8dd9c:	dcc00317 	ldw	r19,12(sp)
   8dda0:	dc800217 	ldw	r18,8(sp)
   8dda4:	dc400117 	ldw	r17,4(sp)
   8dda8:	dc000017 	ldw	r16,0(sp)
   8ddac:	dec00804 	addi	sp,sp,32
   8ddb0:	f800283a 	ret

0008ddb4 <_setlocale_r>:
   8ddb4:	defffc04 	addi	sp,sp,-16
   8ddb8:	dc800215 	stw	r18,8(sp)
   8ddbc:	dc400115 	stw	r17,4(sp)
   8ddc0:	dc000015 	stw	r16,0(sp)
   8ddc4:	dfc00315 	stw	ra,12(sp)
   8ddc8:	3021883a 	mov	r16,r6
   8ddcc:	2023883a 	mov	r17,r4
   8ddd0:	2825883a 	mov	r18,r5
   8ddd4:	30001626 	beq	r6,zero,8de30 <_setlocale_r+0x7c>
   8ddd8:	3009883a 	mov	r4,r6
   8dddc:	014002f4 	movhi	r5,11
   8dde0:	29765604 	addi	r5,r5,-9896
   8dde4:	008f9740 	call	8f974 <strcmp>
   8dde8:	10000a1e 	bne	r2,zero,8de14 <_setlocale_r+0x60>
   8ddec:	8c800c15 	stw	r18,48(r17)
   8ddf0:	8c000d15 	stw	r16,52(r17)
   8ddf4:	008002f4 	movhi	r2,11
   8ddf8:	10b65604 	addi	r2,r2,-9896
   8ddfc:	dfc00317 	ldw	ra,12(sp)
   8de00:	dc800217 	ldw	r18,8(sp)
   8de04:	dc400117 	ldw	r17,4(sp)
   8de08:	dc000017 	ldw	r16,0(sp)
   8de0c:	dec00404 	addi	sp,sp,16
   8de10:	f800283a 	ret
   8de14:	8009883a 	mov	r4,r16
   8de18:	014002f4 	movhi	r5,11
   8de1c:	29766004 	addi	r5,r5,-9856
   8de20:	008f9740 	call	8f974 <strcmp>
   8de24:	103ff126 	beq	r2,zero,8ddec <_setlocale_r+0x38>
   8de28:	0005883a 	mov	r2,zero
   8de2c:	003ff306 	br	8ddfc <_setlocale_r+0x48>
   8de30:	008002f4 	movhi	r2,11
   8de34:	10b65604 	addi	r2,r2,-9896
   8de38:	dfc00317 	ldw	ra,12(sp)
   8de3c:	dc800217 	ldw	r18,8(sp)
   8de40:	dc400117 	ldw	r17,4(sp)
   8de44:	dc000017 	ldw	r16,0(sp)
   8de48:	dec00404 	addi	sp,sp,16
   8de4c:	f800283a 	ret

0008de50 <__locale_charset>:
   8de50:	008002f4 	movhi	r2,11
   8de54:	10b67504 	addi	r2,r2,-9772
   8de58:	f800283a 	ret

0008de5c <_localeconv_r>:
   8de5c:	008002f4 	movhi	r2,11
   8de60:	10b67904 	addi	r2,r2,-9756
   8de64:	f800283a 	ret

0008de68 <setlocale>:
   8de68:	00c002f4 	movhi	r3,11
   8de6c:	18c44f04 	addi	r3,r3,4412
   8de70:	2005883a 	mov	r2,r4
   8de74:	19000017 	ldw	r4,0(r3)
   8de78:	280d883a 	mov	r6,r5
   8de7c:	100b883a 	mov	r5,r2
   8de80:	008ddb41 	jmpi	8ddb4 <_setlocale_r>

0008de84 <localeconv>:
   8de84:	008002f4 	movhi	r2,11
   8de88:	10b67904 	addi	r2,r2,-9756
   8de8c:	f800283a 	ret

0008de90 <__smakebuf_r>:
   8de90:	2880030b 	ldhu	r2,12(r5)
   8de94:	deffed04 	addi	sp,sp,-76
   8de98:	dc401015 	stw	r17,64(sp)
   8de9c:	10c0008c 	andi	r3,r2,2
   8dea0:	18ffffcc 	andi	r3,r3,65535
   8dea4:	18e0001c 	xori	r3,r3,32768
   8dea8:	dc000f15 	stw	r16,60(sp)
   8deac:	dfc01215 	stw	ra,72(sp)
   8deb0:	dc801115 	stw	r18,68(sp)
   8deb4:	18e00004 	addi	r3,r3,-32768
   8deb8:	2821883a 	mov	r16,r5
   8debc:	2023883a 	mov	r17,r4
   8dec0:	1800381e 	bne	r3,zero,8dfa4 <__smakebuf_r+0x114>
   8dec4:	2940038f 	ldh	r5,14(r5)
   8dec8:	28002d16 	blt	r5,zero,8df80 <__smakebuf_r+0xf0>
   8decc:	d80d883a 	mov	r6,sp
   8ded0:	008fcf40 	call	8fcf4 <_fstat_r>
   8ded4:	10002916 	blt	r2,zero,8df7c <__smakebuf_r+0xec>
   8ded8:	d8800117 	ldw	r2,4(sp)
   8dedc:	00e00014 	movui	r3,32768
   8dee0:	10bc000c 	andi	r2,r2,61440
   8dee4:	10c03c26 	beq	r2,r3,8dfd8 <__smakebuf_r+0x148>
   8dee8:	80c0030b 	ldhu	r3,12(r16)
   8deec:	18c20014 	ori	r3,r3,2048
   8def0:	80c0030d 	sth	r3,12(r16)
   8def4:	00c80004 	movi	r3,8192
   8def8:	10c00c1e 	bne	r2,r3,8df2c <__smakebuf_r+0x9c>
   8defc:	8140038f 	ldh	r5,14(r16)
   8df00:	8809883a 	mov	r4,r17
   8df04:	008fd5c0 	call	8fd5c <_isatty_r>
   8df08:	10000826 	beq	r2,zero,8df2c <__smakebuf_r+0x9c>
   8df0c:	80c0030b 	ldhu	r3,12(r16)
   8df10:	808010c4 	addi	r2,r16,67
   8df14:	80800015 	stw	r2,0(r16)
   8df18:	18c00054 	ori	r3,r3,1
   8df1c:	80800415 	stw	r2,16(r16)
   8df20:	00800044 	movi	r2,1
   8df24:	80c0030d 	sth	r3,12(r16)
   8df28:	80800515 	stw	r2,20(r16)
   8df2c:	04810004 	movi	r18,1024
   8df30:	8809883a 	mov	r4,r17
   8df34:	900b883a 	mov	r5,r18
   8df38:	00889000 	call	88900 <_malloc_r>
   8df3c:	10003026 	beq	r2,zero,8e000 <__smakebuf_r+0x170>
   8df40:	80c0030b 	ldhu	r3,12(r16)
   8df44:	01000274 	movhi	r4,9
   8df48:	21342704 	addi	r4,r4,-12132
   8df4c:	89000f15 	stw	r4,60(r17)
   8df50:	18c02014 	ori	r3,r3,128
   8df54:	80c0030d 	sth	r3,12(r16)
   8df58:	80800015 	stw	r2,0(r16)
   8df5c:	80800415 	stw	r2,16(r16)
   8df60:	84800515 	stw	r18,20(r16)
   8df64:	dfc01217 	ldw	ra,72(sp)
   8df68:	dc801117 	ldw	r18,68(sp)
   8df6c:	dc401017 	ldw	r17,64(sp)
   8df70:	dc000f17 	ldw	r16,60(sp)
   8df74:	dec01304 	addi	sp,sp,76
   8df78:	f800283a 	ret
   8df7c:	8080030b 	ldhu	r2,12(r16)
   8df80:	10c0200c 	andi	r3,r2,128
   8df84:	18ffffcc 	andi	r3,r3,65535
   8df88:	18e0001c 	xori	r3,r3,32768
   8df8c:	18e00004 	addi	r3,r3,-32768
   8df90:	18000f1e 	bne	r3,zero,8dfd0 <__smakebuf_r+0x140>
   8df94:	04810004 	movi	r18,1024
   8df98:	10820014 	ori	r2,r2,2048
   8df9c:	8080030d 	sth	r2,12(r16)
   8dfa0:	003fe306 	br	8df30 <__smakebuf_r+0xa0>
   8dfa4:	288010c4 	addi	r2,r5,67
   8dfa8:	28800015 	stw	r2,0(r5)
   8dfac:	28800415 	stw	r2,16(r5)
   8dfb0:	00800044 	movi	r2,1
   8dfb4:	28800515 	stw	r2,20(r5)
   8dfb8:	dfc01217 	ldw	ra,72(sp)
   8dfbc:	dc801117 	ldw	r18,68(sp)
   8dfc0:	dc401017 	ldw	r17,64(sp)
   8dfc4:	dc000f17 	ldw	r16,60(sp)
   8dfc8:	dec01304 	addi	sp,sp,76
   8dfcc:	f800283a 	ret
   8dfd0:	04801004 	movi	r18,64
   8dfd4:	003ff006 	br	8df98 <__smakebuf_r+0x108>
   8dfd8:	81000a17 	ldw	r4,40(r16)
   8dfdc:	00c00274 	movhi	r3,9
   8dfe0:	18fe4404 	addi	r3,r3,-1776
   8dfe4:	20ffc01e 	bne	r4,r3,8dee8 <__smakebuf_r+0x58>
   8dfe8:	8080030b 	ldhu	r2,12(r16)
   8dfec:	00c10004 	movi	r3,1024
   8dff0:	80c01315 	stw	r3,76(r16)
   8dff4:	10c4b03a 	or	r2,r2,r3
   8dff8:	8080030d 	sth	r2,12(r16)
   8dffc:	003fcb06 	br	8df2c <__smakebuf_r+0x9c>
   8e000:	8080030b 	ldhu	r2,12(r16)
   8e004:	10c0800c 	andi	r3,r2,512
   8e008:	18ffffcc 	andi	r3,r3,65535
   8e00c:	18e0001c 	xori	r3,r3,32768
   8e010:	18e00004 	addi	r3,r3,-32768
   8e014:	183fd31e 	bne	r3,zero,8df64 <__smakebuf_r+0xd4>
   8e018:	10800094 	ori	r2,r2,2
   8e01c:	80c010c4 	addi	r3,r16,67
   8e020:	8080030d 	sth	r2,12(r16)
   8e024:	00800044 	movi	r2,1
   8e028:	80c00015 	stw	r3,0(r16)
   8e02c:	80c00415 	stw	r3,16(r16)
   8e030:	80800515 	stw	r2,20(r16)
   8e034:	003fcb06 	br	8df64 <__smakebuf_r+0xd4>

0008e038 <memchr>:
   8e038:	008000c4 	movi	r2,3
   8e03c:	29403fcc 	andi	r5,r5,255
   8e040:	1180282e 	bgeu	r2,r6,8e0e4 <memchr+0xac>
   8e044:	2086703a 	and	r3,r4,r2
   8e048:	1800351e 	bne	r3,zero,8e120 <memchr+0xe8>
   8e04c:	2816923a 	slli	r11,r5,8
   8e050:	2093883a 	add	r9,r4,r2
   8e054:	22000084 	addi	r8,r4,2
   8e058:	5957883a 	add	r11,r11,r5
   8e05c:	5816923a 	slli	r11,r11,8
   8e060:	20c00044 	addi	r3,r4,1
   8e064:	037fbff4 	movhi	r13,65279
   8e068:	6b7fbfc4 	addi	r13,r13,-257
   8e06c:	5957883a 	add	r11,r11,r5
   8e070:	5816923a 	slli	r11,r11,8
   8e074:	03202074 	movhi	r12,32897
   8e078:	63202004 	addi	r12,r12,-32640
   8e07c:	101d883a 	mov	r14,r2
   8e080:	5957883a 	add	r11,r11,r5
   8e084:	21c00017 	ldw	r7,0(r4)
   8e088:	31bfff04 	addi	r6,r6,-4
   8e08c:	1805883a 	mov	r2,r3
   8e090:	3acef03a 	xor	r7,r7,r11
   8e094:	3b55883a 	add	r10,r7,r13
   8e098:	01ce303a 	nor	r7,zero,r7
   8e09c:	51ce703a 	and	r7,r10,r7
   8e0a0:	3b0e703a 	and	r7,r7,r12
   8e0a4:	38000a26 	beq	r7,zero,8e0d0 <memchr+0x98>
   8e0a8:	21c00003 	ldbu	r7,0(r4)
   8e0ac:	39401e26 	beq	r7,r5,8e128 <memchr+0xf0>
   8e0b0:	19c00003 	ldbu	r7,0(r3)
   8e0b4:	39401926 	beq	r7,r5,8e11c <memchr+0xe4>
   8e0b8:	41c00003 	ldbu	r7,0(r8)
   8e0bc:	4005883a 	mov	r2,r8
   8e0c0:	39401626 	beq	r7,r5,8e11c <memchr+0xe4>
   8e0c4:	49c00003 	ldbu	r7,0(r9)
   8e0c8:	4805883a 	mov	r2,r9
   8e0cc:	39401326 	beq	r7,r5,8e11c <memchr+0xe4>
   8e0d0:	21000104 	addi	r4,r4,4
   8e0d4:	4a400104 	addi	r9,r9,4
   8e0d8:	42000104 	addi	r8,r8,4
   8e0dc:	18c00104 	addi	r3,r3,4
   8e0e0:	71bfe836 	bltu	r14,r6,8e084 <memchr+0x4c>
   8e0e4:	2005883a 	mov	r2,r4
   8e0e8:	30000a26 	beq	r6,zero,8e114 <memchr+0xdc>
   8e0ec:	10c00003 	ldbu	r3,0(r2)
   8e0f0:	19400a26 	beq	r3,r5,8e11c <memchr+0xe4>
   8e0f4:	10c00044 	addi	r3,r2,1
   8e0f8:	118d883a 	add	r6,r2,r6
   8e0fc:	00000306 	br	8e10c <memchr+0xd4>
   8e100:	11000003 	ldbu	r4,0(r2)
   8e104:	18c00044 	addi	r3,r3,1
   8e108:	21400426 	beq	r4,r5,8e11c <memchr+0xe4>
   8e10c:	1805883a 	mov	r2,r3
   8e110:	19bffb1e 	bne	r3,r6,8e100 <memchr+0xc8>
   8e114:	0005883a 	mov	r2,zero
   8e118:	f800283a 	ret
   8e11c:	f800283a 	ret
   8e120:	2005883a 	mov	r2,r4
   8e124:	003ff106 	br	8e0ec <memchr+0xb4>
   8e128:	2005883a 	mov	r2,r4
   8e12c:	f800283a 	ret

0008e130 <memmove>:
   8e130:	2005883a 	mov	r2,r4
   8e134:	300f883a 	mov	r7,r6
   8e138:	29000b2e 	bgeu	r5,r4,8e168 <memmove+0x38>
   8e13c:	2987883a 	add	r3,r5,r6
   8e140:	20c0092e 	bgeu	r4,r3,8e168 <memmove+0x38>
   8e144:	218b883a 	add	r5,r4,r6
   8e148:	198fc83a 	sub	r7,r3,r6
   8e14c:	30003f26 	beq	r6,zero,8e24c <memmove+0x11c>
   8e150:	18ffffc4 	addi	r3,r3,-1
   8e154:	19000003 	ldbu	r4,0(r3)
   8e158:	297fffc4 	addi	r5,r5,-1
   8e15c:	29000005 	stb	r4,0(r5)
   8e160:	19fffb1e 	bne	r3,r7,8e150 <memmove+0x20>
   8e164:	f800283a 	ret
   8e168:	00c003c4 	movi	r3,15
   8e16c:	1980382e 	bgeu	r3,r6,8e250 <memmove+0x120>
   8e170:	2886b03a 	or	r3,r5,r2
   8e174:	18c000cc 	andi	r3,r3,3
   8e178:	1800351e 	bne	r3,zero,8e250 <memmove+0x120>
   8e17c:	327ffc04 	addi	r9,r6,-16
   8e180:	4812d13a 	srli	r9,r9,4
   8e184:	12000404 	addi	r8,r2,16
   8e188:	1007883a 	mov	r3,r2
   8e18c:	4808913a 	slli	r4,r9,4
   8e190:	280f883a 	mov	r7,r5
   8e194:	4111883a 	add	r8,r8,r4
   8e198:	39000017 	ldw	r4,0(r7)
   8e19c:	18c00404 	addi	r3,r3,16
   8e1a0:	39c00404 	addi	r7,r7,16
   8e1a4:	193ffc15 	stw	r4,-16(r3)
   8e1a8:	393ffd17 	ldw	r4,-12(r7)
   8e1ac:	193ffd15 	stw	r4,-12(r3)
   8e1b0:	393ffe17 	ldw	r4,-8(r7)
   8e1b4:	193ffe15 	stw	r4,-8(r3)
   8e1b8:	393fff17 	ldw	r4,-4(r7)
   8e1bc:	193fff15 	stw	r4,-4(r3)
   8e1c0:	1a3ff51e 	bne	r3,r8,8e198 <memmove+0x68>
   8e1c4:	49000044 	addi	r4,r9,1
   8e1c8:	2008913a 	slli	r4,r4,4
   8e1cc:	31c003cc 	andi	r7,r6,15
   8e1d0:	1107883a 	add	r3,r2,r4
   8e1d4:	290b883a 	add	r5,r5,r4
   8e1d8:	010000c4 	movi	r4,3
   8e1dc:	21c0142e 	bgeu	r4,r7,8e230 <memmove+0x100>
   8e1e0:	39ffff04 	addi	r7,r7,-4
   8e1e4:	3814d0ba 	srli	r10,r7,2
   8e1e8:	1a400104 	addi	r9,r3,4
   8e1ec:	180d883a 	mov	r6,r3
   8e1f0:	5289883a 	add	r4,r10,r10
   8e1f4:	2109883a 	add	r4,r4,r4
   8e1f8:	4913883a 	add	r9,r9,r4
   8e1fc:	2809883a 	mov	r4,r5
   8e200:	22000017 	ldw	r8,0(r4)
   8e204:	31800104 	addi	r6,r6,4
   8e208:	21000104 	addi	r4,r4,4
   8e20c:	323fff15 	stw	r8,-4(r6)
   8e210:	327ffb1e 	bne	r6,r9,8e200 <memmove+0xd0>
   8e214:	51000044 	addi	r4,r10,1
   8e218:	52bfff24 	muli	r10,r10,-4
   8e21c:	2109883a 	add	r4,r4,r4
   8e220:	2109883a 	add	r4,r4,r4
   8e224:	51cf883a 	add	r7,r10,r7
   8e228:	290b883a 	add	r5,r5,r4
   8e22c:	1907883a 	add	r3,r3,r4
   8e230:	38000626 	beq	r7,zero,8e24c <memmove+0x11c>
   8e234:	19cf883a 	add	r7,r3,r7
   8e238:	29800003 	ldbu	r6,0(r5)
   8e23c:	18c00044 	addi	r3,r3,1
   8e240:	29400044 	addi	r5,r5,1
   8e244:	19bfffc5 	stb	r6,-1(r3)
   8e248:	19fffb1e 	bne	r3,r7,8e238 <memmove+0x108>
   8e24c:	f800283a 	ret
   8e250:	1007883a 	mov	r3,r2
   8e254:	003ff606 	br	8e230 <memmove+0x100>

0008e258 <_Balloc>:
   8e258:	20801317 	ldw	r2,76(r4)
   8e25c:	defffc04 	addi	sp,sp,-16
   8e260:	dc400115 	stw	r17,4(sp)
   8e264:	dc000015 	stw	r16,0(sp)
   8e268:	dfc00315 	stw	ra,12(sp)
   8e26c:	dc800215 	stw	r18,8(sp)
   8e270:	2023883a 	mov	r17,r4
   8e274:	2821883a 	mov	r16,r5
   8e278:	10000f26 	beq	r2,zero,8e2b8 <_Balloc+0x60>
   8e27c:	8407883a 	add	r3,r16,r16
   8e280:	18c7883a 	add	r3,r3,r3
   8e284:	10c7883a 	add	r3,r2,r3
   8e288:	18800017 	ldw	r2,0(r3)
   8e28c:	10001126 	beq	r2,zero,8e2d4 <_Balloc+0x7c>
   8e290:	11000017 	ldw	r4,0(r2)
   8e294:	19000015 	stw	r4,0(r3)
   8e298:	10000415 	stw	zero,16(r2)
   8e29c:	10000315 	stw	zero,12(r2)
   8e2a0:	dfc00317 	ldw	ra,12(sp)
   8e2a4:	dc800217 	ldw	r18,8(sp)
   8e2a8:	dc400117 	ldw	r17,4(sp)
   8e2ac:	dc000017 	ldw	r16,0(sp)
   8e2b0:	dec00404 	addi	sp,sp,16
   8e2b4:	f800283a 	ret
   8e2b8:	01400104 	movi	r5,4
   8e2bc:	01800404 	movi	r6,16
   8e2c0:	008fa840 	call	8fa84 <_calloc_r>
   8e2c4:	88801315 	stw	r2,76(r17)
   8e2c8:	103fec1e 	bne	r2,zero,8e27c <_Balloc+0x24>
   8e2cc:	0005883a 	mov	r2,zero
   8e2d0:	003ff306 	br	8e2a0 <_Balloc+0x48>
   8e2d4:	01400044 	movi	r5,1
   8e2d8:	2c24983a 	sll	r18,r5,r16
   8e2dc:	8809883a 	mov	r4,r17
   8e2e0:	91800144 	addi	r6,r18,5
   8e2e4:	318d883a 	add	r6,r6,r6
   8e2e8:	318d883a 	add	r6,r6,r6
   8e2ec:	008fa840 	call	8fa84 <_calloc_r>
   8e2f0:	103ff626 	beq	r2,zero,8e2cc <_Balloc+0x74>
   8e2f4:	14000115 	stw	r16,4(r2)
   8e2f8:	14800215 	stw	r18,8(r2)
   8e2fc:	003fe606 	br	8e298 <_Balloc+0x40>

0008e300 <_Bfree>:
   8e300:	28000826 	beq	r5,zero,8e324 <_Bfree+0x24>
   8e304:	28c00117 	ldw	r3,4(r5)
   8e308:	20801317 	ldw	r2,76(r4)
   8e30c:	18c7883a 	add	r3,r3,r3
   8e310:	18c7883a 	add	r3,r3,r3
   8e314:	10c5883a 	add	r2,r2,r3
   8e318:	10c00017 	ldw	r3,0(r2)
   8e31c:	28c00015 	stw	r3,0(r5)
   8e320:	11400015 	stw	r5,0(r2)
   8e324:	f800283a 	ret

0008e328 <__multadd>:
   8e328:	defffa04 	addi	sp,sp,-24
   8e32c:	dc000115 	stw	r16,4(sp)
   8e330:	2c000417 	ldw	r16,16(r5)
   8e334:	dc800315 	stw	r18,12(sp)
   8e338:	dc400215 	stw	r17,8(sp)
   8e33c:	dfc00515 	stw	ra,20(sp)
   8e340:	dcc00415 	stw	r19,16(sp)
   8e344:	2823883a 	mov	r17,r5
   8e348:	2025883a 	mov	r18,r4
   8e34c:	28c00504 	addi	r3,r5,20
   8e350:	0011883a 	mov	r8,zero
   8e354:	1a800017 	ldw	r10,0(r3)
   8e358:	18c00104 	addi	r3,r3,4
   8e35c:	42000044 	addi	r8,r8,1
   8e360:	527fffcc 	andi	r9,r10,65535
   8e364:	4993383a 	mul	r9,r9,r6
   8e368:	5014d43a 	srli	r10,r10,16
   8e36c:	49d3883a 	add	r9,r9,r7
   8e370:	480ed43a 	srli	r7,r9,16
   8e374:	5195383a 	mul	r10,r10,r6
   8e378:	4a7fffcc 	andi	r9,r9,65535
   8e37c:	3a8f883a 	add	r7,r7,r10
   8e380:	3814943a 	slli	r10,r7,16
   8e384:	380ed43a 	srli	r7,r7,16
   8e388:	5253883a 	add	r9,r10,r9
   8e38c:	1a7fff15 	stw	r9,-4(r3)
   8e390:	443ff016 	blt	r8,r16,8e354 <__multadd+0x2c>
   8e394:	38000926 	beq	r7,zero,8e3bc <__multadd+0x94>
   8e398:	88800217 	ldw	r2,8(r17)
   8e39c:	80800f0e 	bge	r16,r2,8e3dc <__multadd+0xb4>
   8e3a0:	80800144 	addi	r2,r16,5
   8e3a4:	1085883a 	add	r2,r2,r2
   8e3a8:	1085883a 	add	r2,r2,r2
   8e3ac:	8885883a 	add	r2,r17,r2
   8e3b0:	84000044 	addi	r16,r16,1
   8e3b4:	11c00015 	stw	r7,0(r2)
   8e3b8:	8c000415 	stw	r16,16(r17)
   8e3bc:	8805883a 	mov	r2,r17
   8e3c0:	dfc00517 	ldw	ra,20(sp)
   8e3c4:	dcc00417 	ldw	r19,16(sp)
   8e3c8:	dc800317 	ldw	r18,12(sp)
   8e3cc:	dc400217 	ldw	r17,8(sp)
   8e3d0:	dc000117 	ldw	r16,4(sp)
   8e3d4:	dec00604 	addi	sp,sp,24
   8e3d8:	f800283a 	ret
   8e3dc:	89400117 	ldw	r5,4(r17)
   8e3e0:	9009883a 	mov	r4,r18
   8e3e4:	d9c00015 	stw	r7,0(sp)
   8e3e8:	29400044 	addi	r5,r5,1
   8e3ec:	008e2580 	call	8e258 <_Balloc>
   8e3f0:	89800417 	ldw	r6,16(r17)
   8e3f4:	89400304 	addi	r5,r17,12
   8e3f8:	11000304 	addi	r4,r2,12
   8e3fc:	31800084 	addi	r6,r6,2
   8e400:	318d883a 	add	r6,r6,r6
   8e404:	318d883a 	add	r6,r6,r6
   8e408:	1027883a 	mov	r19,r2
   8e40c:	00890840 	call	89084 <memcpy>
   8e410:	88c00117 	ldw	r3,4(r17)
   8e414:	90801317 	ldw	r2,76(r18)
   8e418:	d9c00017 	ldw	r7,0(sp)
   8e41c:	18c7883a 	add	r3,r3,r3
   8e420:	18c7883a 	add	r3,r3,r3
   8e424:	10c5883a 	add	r2,r2,r3
   8e428:	10c00017 	ldw	r3,0(r2)
   8e42c:	88c00015 	stw	r3,0(r17)
   8e430:	14400015 	stw	r17,0(r2)
   8e434:	9823883a 	mov	r17,r19
   8e438:	003fd906 	br	8e3a0 <__multadd+0x78>

0008e43c <__s2b>:
   8e43c:	defff904 	addi	sp,sp,-28
   8e440:	dd000415 	stw	r20,16(sp)
   8e444:	dc400115 	stw	r17,4(sp)
   8e448:	2829883a 	mov	r20,r5
   8e44c:	2023883a 	mov	r17,r4
   8e450:	01400244 	movi	r5,9
   8e454:	39000204 	addi	r4,r7,8
   8e458:	dcc00315 	stw	r19,12(sp)
   8e45c:	dc800215 	stw	r18,8(sp)
   8e460:	dfc00615 	stw	ra,24(sp)
   8e464:	dd400515 	stw	r21,20(sp)
   8e468:	dc000015 	stw	r16,0(sp)
   8e46c:	3825883a 	mov	r18,r7
   8e470:	3027883a 	mov	r19,r6
   8e474:	00882800 	call	88280 <__divsi3>
   8e478:	00c00044 	movi	r3,1
   8e47c:	000b883a 	mov	r5,zero
   8e480:	1880030e 	bge	r3,r2,8e490 <__s2b+0x54>
   8e484:	18c7883a 	add	r3,r3,r3
   8e488:	29400044 	addi	r5,r5,1
   8e48c:	18bffd16 	blt	r3,r2,8e484 <__s2b+0x48>
   8e490:	8809883a 	mov	r4,r17
   8e494:	008e2580 	call	8e258 <_Balloc>
   8e498:	d8c00717 	ldw	r3,28(sp)
   8e49c:	10c00515 	stw	r3,20(r2)
   8e4a0:	00c00044 	movi	r3,1
   8e4a4:	10c00415 	stw	r3,16(r2)
   8e4a8:	00c00244 	movi	r3,9
   8e4ac:	1cc0210e 	bge	r3,r19,8e534 <__s2b+0xf8>
   8e4b0:	a0eb883a 	add	r21,r20,r3
   8e4b4:	a821883a 	mov	r16,r21
   8e4b8:	a4e9883a 	add	r20,r20,r19
   8e4bc:	81c00007 	ldb	r7,0(r16)
   8e4c0:	8809883a 	mov	r4,r17
   8e4c4:	84000044 	addi	r16,r16,1
   8e4c8:	100b883a 	mov	r5,r2
   8e4cc:	01800284 	movi	r6,10
   8e4d0:	39fff404 	addi	r7,r7,-48
   8e4d4:	008e3280 	call	8e328 <__multadd>
   8e4d8:	853ff81e 	bne	r16,r20,8e4bc <__s2b+0x80>
   8e4dc:	ace1883a 	add	r16,r21,r19
   8e4e0:	843ffe04 	addi	r16,r16,-8
   8e4e4:	9c800a0e 	bge	r19,r18,8e510 <__s2b+0xd4>
   8e4e8:	94e5c83a 	sub	r18,r18,r19
   8e4ec:	84a5883a 	add	r18,r16,r18
   8e4f0:	81c00007 	ldb	r7,0(r16)
   8e4f4:	8809883a 	mov	r4,r17
   8e4f8:	84000044 	addi	r16,r16,1
   8e4fc:	100b883a 	mov	r5,r2
   8e500:	01800284 	movi	r6,10
   8e504:	39fff404 	addi	r7,r7,-48
   8e508:	008e3280 	call	8e328 <__multadd>
   8e50c:	84bff81e 	bne	r16,r18,8e4f0 <__s2b+0xb4>
   8e510:	dfc00617 	ldw	ra,24(sp)
   8e514:	dd400517 	ldw	r21,20(sp)
   8e518:	dd000417 	ldw	r20,16(sp)
   8e51c:	dcc00317 	ldw	r19,12(sp)
   8e520:	dc800217 	ldw	r18,8(sp)
   8e524:	dc400117 	ldw	r17,4(sp)
   8e528:	dc000017 	ldw	r16,0(sp)
   8e52c:	dec00704 	addi	sp,sp,28
   8e530:	f800283a 	ret
   8e534:	a4000284 	addi	r16,r20,10
   8e538:	1827883a 	mov	r19,r3
   8e53c:	003fe906 	br	8e4e4 <__s2b+0xa8>

0008e540 <__hi0bits>:
   8e540:	20bfffec 	andhi	r2,r4,65535
   8e544:	1000141e 	bne	r2,zero,8e598 <__hi0bits+0x58>
   8e548:	2008943a 	slli	r4,r4,16
   8e54c:	00800404 	movi	r2,16
   8e550:	20ffc02c 	andhi	r3,r4,65280
   8e554:	1800021e 	bne	r3,zero,8e560 <__hi0bits+0x20>
   8e558:	2008923a 	slli	r4,r4,8
   8e55c:	10800204 	addi	r2,r2,8
   8e560:	20fc002c 	andhi	r3,r4,61440
   8e564:	1800021e 	bne	r3,zero,8e570 <__hi0bits+0x30>
   8e568:	2008913a 	slli	r4,r4,4
   8e56c:	10800104 	addi	r2,r2,4
   8e570:	20f0002c 	andhi	r3,r4,49152
   8e574:	1800031e 	bne	r3,zero,8e584 <__hi0bits+0x44>
   8e578:	2109883a 	add	r4,r4,r4
   8e57c:	10800084 	addi	r2,r2,2
   8e580:	2109883a 	add	r4,r4,r4
   8e584:	20000316 	blt	r4,zero,8e594 <__hi0bits+0x54>
   8e588:	2110002c 	andhi	r4,r4,16384
   8e58c:	2000041e 	bne	r4,zero,8e5a0 <__hi0bits+0x60>
   8e590:	00800804 	movi	r2,32
   8e594:	f800283a 	ret
   8e598:	0005883a 	mov	r2,zero
   8e59c:	003fec06 	br	8e550 <__hi0bits+0x10>
   8e5a0:	10800044 	addi	r2,r2,1
   8e5a4:	f800283a 	ret

0008e5a8 <__lo0bits>:
   8e5a8:	20c00017 	ldw	r3,0(r4)
   8e5ac:	188001cc 	andi	r2,r3,7
   8e5b0:	10000826 	beq	r2,zero,8e5d4 <__lo0bits+0x2c>
   8e5b4:	1880004c 	andi	r2,r3,1
   8e5b8:	1000211e 	bne	r2,zero,8e640 <__lo0bits+0x98>
   8e5bc:	1880008c 	andi	r2,r3,2
   8e5c0:	1000211e 	bne	r2,zero,8e648 <__lo0bits+0xa0>
   8e5c4:	1806d0ba 	srli	r3,r3,2
   8e5c8:	00800084 	movi	r2,2
   8e5cc:	20c00015 	stw	r3,0(r4)
   8e5d0:	f800283a 	ret
   8e5d4:	18bfffcc 	andi	r2,r3,65535
   8e5d8:	10001326 	beq	r2,zero,8e628 <__lo0bits+0x80>
   8e5dc:	0005883a 	mov	r2,zero
   8e5e0:	19403fcc 	andi	r5,r3,255
   8e5e4:	2800021e 	bne	r5,zero,8e5f0 <__lo0bits+0x48>
   8e5e8:	1806d23a 	srli	r3,r3,8
   8e5ec:	10800204 	addi	r2,r2,8
   8e5f0:	194003cc 	andi	r5,r3,15
   8e5f4:	2800021e 	bne	r5,zero,8e600 <__lo0bits+0x58>
   8e5f8:	1806d13a 	srli	r3,r3,4
   8e5fc:	10800104 	addi	r2,r2,4
   8e600:	194000cc 	andi	r5,r3,3
   8e604:	2800021e 	bne	r5,zero,8e610 <__lo0bits+0x68>
   8e608:	1806d0ba 	srli	r3,r3,2
   8e60c:	10800084 	addi	r2,r2,2
   8e610:	1940004c 	andi	r5,r3,1
   8e614:	2800081e 	bne	r5,zero,8e638 <__lo0bits+0x90>
   8e618:	1806d07a 	srli	r3,r3,1
   8e61c:	1800051e 	bne	r3,zero,8e634 <__lo0bits+0x8c>
   8e620:	00800804 	movi	r2,32
   8e624:	f800283a 	ret
   8e628:	1806d43a 	srli	r3,r3,16
   8e62c:	00800404 	movi	r2,16
   8e630:	003feb06 	br	8e5e0 <__lo0bits+0x38>
   8e634:	10800044 	addi	r2,r2,1
   8e638:	20c00015 	stw	r3,0(r4)
   8e63c:	f800283a 	ret
   8e640:	0005883a 	mov	r2,zero
   8e644:	f800283a 	ret
   8e648:	1806d07a 	srli	r3,r3,1
   8e64c:	00800044 	movi	r2,1
   8e650:	20c00015 	stw	r3,0(r4)
   8e654:	f800283a 	ret

0008e658 <__i2b>:
   8e658:	defffd04 	addi	sp,sp,-12
   8e65c:	dc000015 	stw	r16,0(sp)
   8e660:	04000044 	movi	r16,1
   8e664:	dc400115 	stw	r17,4(sp)
   8e668:	2823883a 	mov	r17,r5
   8e66c:	800b883a 	mov	r5,r16
   8e670:	dfc00215 	stw	ra,8(sp)
   8e674:	008e2580 	call	8e258 <_Balloc>
   8e678:	14400515 	stw	r17,20(r2)
   8e67c:	14000415 	stw	r16,16(r2)
   8e680:	dfc00217 	ldw	ra,8(sp)
   8e684:	dc400117 	ldw	r17,4(sp)
   8e688:	dc000017 	ldw	r16,0(sp)
   8e68c:	dec00304 	addi	sp,sp,12
   8e690:	f800283a 	ret

0008e694 <__multiply>:
   8e694:	defffa04 	addi	sp,sp,-24
   8e698:	dcc00315 	stw	r19,12(sp)
   8e69c:	dc400115 	stw	r17,4(sp)
   8e6a0:	34c00417 	ldw	r19,16(r6)
   8e6a4:	2c400417 	ldw	r17,16(r5)
   8e6a8:	dd000415 	stw	r20,16(sp)
   8e6ac:	dc800215 	stw	r18,8(sp)
   8e6b0:	dfc00515 	stw	ra,20(sp)
   8e6b4:	dc000015 	stw	r16,0(sp)
   8e6b8:	2825883a 	mov	r18,r5
   8e6bc:	3029883a 	mov	r20,r6
   8e6c0:	8cc0050e 	bge	r17,r19,8e6d8 <__multiply+0x44>
   8e6c4:	8807883a 	mov	r3,r17
   8e6c8:	3025883a 	mov	r18,r6
   8e6cc:	9823883a 	mov	r17,r19
   8e6d0:	2829883a 	mov	r20,r5
   8e6d4:	1827883a 	mov	r19,r3
   8e6d8:	90800217 	ldw	r2,8(r18)
   8e6dc:	8ce1883a 	add	r16,r17,r19
   8e6e0:	91400117 	ldw	r5,4(r18)
   8e6e4:	1400010e 	bge	r2,r16,8e6ec <__multiply+0x58>
   8e6e8:	29400044 	addi	r5,r5,1
   8e6ec:	008e2580 	call	8e258 <_Balloc>
   8e6f0:	83c00144 	addi	r15,r16,5
   8e6f4:	7bdf883a 	add	r15,r15,r15
   8e6f8:	7bdf883a 	add	r15,r15,r15
   8e6fc:	13800504 	addi	r14,r2,20
   8e700:	13df883a 	add	r15,r2,r15
   8e704:	7007883a 	mov	r3,r14
   8e708:	73c0032e 	bgeu	r14,r15,8e718 <__multiply+0x84>
   8e70c:	18000015 	stw	zero,0(r3)
   8e710:	18c00104 	addi	r3,r3,4
   8e714:	1bfffd36 	bltu	r3,r15,8e70c <__multiply+0x78>
   8e718:	99800144 	addi	r6,r19,5
   8e71c:	8b000144 	addi	r12,r17,5
   8e720:	318d883a 	add	r6,r6,r6
   8e724:	6319883a 	add	r12,r12,r12
   8e728:	318d883a 	add	r6,r6,r6
   8e72c:	6319883a 	add	r12,r12,r12
   8e730:	a3400504 	addi	r13,r20,20
   8e734:	a18d883a 	add	r6,r20,r6
   8e738:	94400504 	addi	r17,r18,20
   8e73c:	9319883a 	add	r12,r18,r12
   8e740:	6980392e 	bgeu	r13,r6,8e828 <__multiply+0x194>
   8e744:	6a800017 	ldw	r10,0(r13)
   8e748:	52ffffcc 	andi	r11,r10,65535
   8e74c:	58001826 	beq	r11,zero,8e7b0 <__multiply+0x11c>
   8e750:	7007883a 	mov	r3,r14
   8e754:	8809883a 	mov	r4,r17
   8e758:	000b883a 	mov	r5,zero
   8e75c:	22400017 	ldw	r9,0(r4)
   8e760:	1a000017 	ldw	r8,0(r3)
   8e764:	21000104 	addi	r4,r4,4
   8e768:	49ffffcc 	andi	r7,r9,65535
   8e76c:	3acf383a 	mul	r7,r7,r11
   8e770:	4812d43a 	srli	r9,r9,16
   8e774:	42bfffcc 	andi	r10,r8,65535
   8e778:	3a8f883a 	add	r7,r7,r10
   8e77c:	394f883a 	add	r7,r7,r5
   8e780:	4010d43a 	srli	r8,r8,16
   8e784:	4acb383a 	mul	r5,r9,r11
   8e788:	3814d43a 	srli	r10,r7,16
   8e78c:	19c0000d 	sth	r7,0(r3)
   8e790:	2a0b883a 	add	r5,r5,r8
   8e794:	2a8b883a 	add	r5,r5,r10
   8e798:	1940008d 	sth	r5,2(r3)
   8e79c:	280ad43a 	srli	r5,r5,16
   8e7a0:	18c00104 	addi	r3,r3,4
   8e7a4:	233fed36 	bltu	r4,r12,8e75c <__multiply+0xc8>
   8e7a8:	19400015 	stw	r5,0(r3)
   8e7ac:	6a800017 	ldw	r10,0(r13)
   8e7b0:	5014d43a 	srli	r10,r10,16
   8e7b4:	50001926 	beq	r10,zero,8e81c <__multiply+0x188>
   8e7b8:	71400017 	ldw	r5,0(r14)
   8e7bc:	7007883a 	mov	r3,r14
   8e7c0:	8809883a 	mov	r4,r17
   8e7c4:	280f883a 	mov	r7,r5
   8e7c8:	0017883a 	mov	r11,zero
   8e7cc:	22400017 	ldw	r9,0(r4)
   8e7d0:	380ed43a 	srli	r7,r7,16
   8e7d4:	1940000d 	sth	r5,0(r3)
   8e7d8:	4a3fffcc 	andi	r8,r9,65535
   8e7dc:	4291383a 	mul	r8,r8,r10
   8e7e0:	4812d43a 	srli	r9,r9,16
   8e7e4:	18c00104 	addi	r3,r3,4
   8e7e8:	41d1883a 	add	r8,r8,r7
   8e7ec:	19c00017 	ldw	r7,0(r3)
   8e7f0:	42d1883a 	add	r8,r8,r11
   8e7f4:	4a93383a 	mul	r9,r9,r10
   8e7f8:	1a3fff8d 	sth	r8,-2(r3)
   8e7fc:	4010d43a 	srli	r8,r8,16
   8e800:	397fffcc 	andi	r5,r7,65535
   8e804:	2a4b883a 	add	r5,r5,r9
   8e808:	2a0b883a 	add	r5,r5,r8
   8e80c:	21000104 	addi	r4,r4,4
   8e810:	2816d43a 	srli	r11,r5,16
   8e814:	233fed36 	bltu	r4,r12,8e7cc <__multiply+0x138>
   8e818:	19400015 	stw	r5,0(r3)
   8e81c:	6b400104 	addi	r13,r13,4
   8e820:	73800104 	addi	r14,r14,4
   8e824:	69bfc736 	bltu	r13,r6,8e744 <__multiply+0xb0>
   8e828:	0400090e 	bge	zero,r16,8e850 <__multiply+0x1bc>
   8e82c:	78ffff17 	ldw	r3,-4(r15)
   8e830:	7bffff04 	addi	r15,r15,-4
   8e834:	18000326 	beq	r3,zero,8e844 <__multiply+0x1b0>
   8e838:	00000506 	br	8e850 <__multiply+0x1bc>
   8e83c:	78c00017 	ldw	r3,0(r15)
   8e840:	1800031e 	bne	r3,zero,8e850 <__multiply+0x1bc>
   8e844:	843fffc4 	addi	r16,r16,-1
   8e848:	7bffff04 	addi	r15,r15,-4
   8e84c:	803ffb1e 	bne	r16,zero,8e83c <__multiply+0x1a8>
   8e850:	14000415 	stw	r16,16(r2)
   8e854:	dfc00517 	ldw	ra,20(sp)
   8e858:	dd000417 	ldw	r20,16(sp)
   8e85c:	dcc00317 	ldw	r19,12(sp)
   8e860:	dc800217 	ldw	r18,8(sp)
   8e864:	dc400117 	ldw	r17,4(sp)
   8e868:	dc000017 	ldw	r16,0(sp)
   8e86c:	dec00604 	addi	sp,sp,24
   8e870:	f800283a 	ret

0008e874 <__pow5mult>:
   8e874:	defffb04 	addi	sp,sp,-20
   8e878:	dcc00315 	stw	r19,12(sp)
   8e87c:	dc800215 	stw	r18,8(sp)
   8e880:	dc000015 	stw	r16,0(sp)
   8e884:	dfc00415 	stw	ra,16(sp)
   8e888:	dc400115 	stw	r17,4(sp)
   8e88c:	308000cc 	andi	r2,r6,3
   8e890:	3021883a 	mov	r16,r6
   8e894:	2027883a 	mov	r19,r4
   8e898:	2825883a 	mov	r18,r5
   8e89c:	10002e1e 	bne	r2,zero,8e958 <__pow5mult+0xe4>
   8e8a0:	8021d0ba 	srai	r16,r16,2
   8e8a4:	80001a26 	beq	r16,zero,8e910 <__pow5mult+0x9c>
   8e8a8:	9c401217 	ldw	r17,72(r19)
   8e8ac:	8800061e 	bne	r17,zero,8e8c8 <__pow5mult+0x54>
   8e8b0:	00003406 	br	8e984 <__pow5mult+0x110>
   8e8b4:	8021d07a 	srai	r16,r16,1
   8e8b8:	80001526 	beq	r16,zero,8e910 <__pow5mult+0x9c>
   8e8bc:	88c00017 	ldw	r3,0(r17)
   8e8c0:	18001b26 	beq	r3,zero,8e930 <__pow5mult+0xbc>
   8e8c4:	1823883a 	mov	r17,r3
   8e8c8:	80c0004c 	andi	r3,r16,1
   8e8cc:	183ff926 	beq	r3,zero,8e8b4 <__pow5mult+0x40>
   8e8d0:	900b883a 	mov	r5,r18
   8e8d4:	880d883a 	mov	r6,r17
   8e8d8:	9809883a 	mov	r4,r19
   8e8dc:	008e6940 	call	8e694 <__multiply>
   8e8e0:	90001b26 	beq	r18,zero,8e950 <__pow5mult+0xdc>
   8e8e4:	91000117 	ldw	r4,4(r18)
   8e8e8:	98c01317 	ldw	r3,76(r19)
   8e8ec:	8021d07a 	srai	r16,r16,1
   8e8f0:	2109883a 	add	r4,r4,r4
   8e8f4:	2109883a 	add	r4,r4,r4
   8e8f8:	1907883a 	add	r3,r3,r4
   8e8fc:	19000017 	ldw	r4,0(r3)
   8e900:	91000015 	stw	r4,0(r18)
   8e904:	1c800015 	stw	r18,0(r3)
   8e908:	1025883a 	mov	r18,r2
   8e90c:	803feb1e 	bne	r16,zero,8e8bc <__pow5mult+0x48>
   8e910:	9005883a 	mov	r2,r18
   8e914:	dfc00417 	ldw	ra,16(sp)
   8e918:	dcc00317 	ldw	r19,12(sp)
   8e91c:	dc800217 	ldw	r18,8(sp)
   8e920:	dc400117 	ldw	r17,4(sp)
   8e924:	dc000017 	ldw	r16,0(sp)
   8e928:	dec00504 	addi	sp,sp,20
   8e92c:	f800283a 	ret
   8e930:	880b883a 	mov	r5,r17
   8e934:	880d883a 	mov	r6,r17
   8e938:	9809883a 	mov	r4,r19
   8e93c:	008e6940 	call	8e694 <__multiply>
   8e940:	88800015 	stw	r2,0(r17)
   8e944:	10000015 	stw	zero,0(r2)
   8e948:	1023883a 	mov	r17,r2
   8e94c:	003fde06 	br	8e8c8 <__pow5mult+0x54>
   8e950:	1025883a 	mov	r18,r2
   8e954:	003fd706 	br	8e8b4 <__pow5mult+0x40>
   8e958:	10bfffc4 	addi	r2,r2,-1
   8e95c:	1085883a 	add	r2,r2,r2
   8e960:	00c002f4 	movhi	r3,11
   8e964:	18f6cb04 	addi	r3,r3,-9428
   8e968:	1085883a 	add	r2,r2,r2
   8e96c:	1885883a 	add	r2,r3,r2
   8e970:	11800017 	ldw	r6,0(r2)
   8e974:	000f883a 	mov	r7,zero
   8e978:	008e3280 	call	8e328 <__multadd>
   8e97c:	1025883a 	mov	r18,r2
   8e980:	003fc706 	br	8e8a0 <__pow5mult+0x2c>
   8e984:	9809883a 	mov	r4,r19
   8e988:	01409c44 	movi	r5,625
   8e98c:	008e6580 	call	8e658 <__i2b>
   8e990:	98801215 	stw	r2,72(r19)
   8e994:	1023883a 	mov	r17,r2
   8e998:	10000015 	stw	zero,0(r2)
   8e99c:	003fca06 	br	8e8c8 <__pow5mult+0x54>

0008e9a0 <__lshift>:
   8e9a0:	defff904 	addi	sp,sp,-28
   8e9a4:	dd400515 	stw	r21,20(sp)
   8e9a8:	dc400115 	stw	r17,4(sp)
   8e9ac:	2d400417 	ldw	r21,16(r5)
   8e9b0:	3023d17a 	srai	r17,r6,5
   8e9b4:	28800217 	ldw	r2,8(r5)
   8e9b8:	dd000415 	stw	r20,16(sp)
   8e9bc:	8d6b883a 	add	r21,r17,r21
   8e9c0:	dcc00315 	stw	r19,12(sp)
   8e9c4:	dc800215 	stw	r18,8(sp)
   8e9c8:	dc000015 	stw	r16,0(sp)
   8e9cc:	dfc00615 	stw	ra,24(sp)
   8e9d0:	ac000044 	addi	r16,r21,1
   8e9d4:	2825883a 	mov	r18,r5
   8e9d8:	3029883a 	mov	r20,r6
   8e9dc:	2027883a 	mov	r19,r4
   8e9e0:	29400117 	ldw	r5,4(r5)
   8e9e4:	1400030e 	bge	r2,r16,8e9f4 <__lshift+0x54>
   8e9e8:	1085883a 	add	r2,r2,r2
   8e9ec:	29400044 	addi	r5,r5,1
   8e9f0:	143ffd16 	blt	r2,r16,8e9e8 <__lshift+0x48>
   8e9f4:	9809883a 	mov	r4,r19
   8e9f8:	008e2580 	call	8e258 <_Balloc>
   8e9fc:	10c00504 	addi	r3,r2,20
   8ea00:	0440090e 	bge	zero,r17,8ea28 <__lshift+0x88>
   8ea04:	000f883a 	mov	r7,zero
   8ea08:	18000015 	stw	zero,0(r3)
   8ea0c:	39c00044 	addi	r7,r7,1
   8ea10:	18c00104 	addi	r3,r3,4
   8ea14:	3c7ffc1e 	bne	r7,r17,8ea08 <__lshift+0x68>
   8ea18:	38c00144 	addi	r3,r7,5
   8ea1c:	18c7883a 	add	r3,r3,r3
   8ea20:	18c7883a 	add	r3,r3,r3
   8ea24:	10c7883a 	add	r3,r2,r3
   8ea28:	92000417 	ldw	r8,16(r18)
   8ea2c:	a18007cc 	andi	r6,r20,31
   8ea30:	91c00504 	addi	r7,r18,20
   8ea34:	42000144 	addi	r8,r8,5
   8ea38:	4211883a 	add	r8,r8,r8
   8ea3c:	4211883a 	add	r8,r8,r8
   8ea40:	9211883a 	add	r8,r18,r8
   8ea44:	30002226 	beq	r6,zero,8ead0 <__lshift+0x130>
   8ea48:	02800804 	movi	r10,32
   8ea4c:	5195c83a 	sub	r10,r10,r6
   8ea50:	000b883a 	mov	r5,zero
   8ea54:	3a400017 	ldw	r9,0(r7)
   8ea58:	18c00104 	addi	r3,r3,4
   8ea5c:	39c00104 	addi	r7,r7,4
   8ea60:	4992983a 	sll	r9,r9,r6
   8ea64:	2a4ab03a 	or	r5,r5,r9
   8ea68:	197fff15 	stw	r5,-4(r3)
   8ea6c:	397fff17 	ldw	r5,-4(r7)
   8ea70:	2a8ad83a 	srl	r5,r5,r10
   8ea74:	3a3ff736 	bltu	r7,r8,8ea54 <__lshift+0xb4>
   8ea78:	19400015 	stw	r5,0(r3)
   8ea7c:	28000126 	beq	r5,zero,8ea84 <__lshift+0xe4>
   8ea80:	ac000084 	addi	r16,r21,2
   8ea84:	91000117 	ldw	r4,4(r18)
   8ea88:	98c01317 	ldw	r3,76(r19)
   8ea8c:	843fffc4 	addi	r16,r16,-1
   8ea90:	2109883a 	add	r4,r4,r4
   8ea94:	2109883a 	add	r4,r4,r4
   8ea98:	1907883a 	add	r3,r3,r4
   8ea9c:	19000017 	ldw	r4,0(r3)
   8eaa0:	14000415 	stw	r16,16(r2)
   8eaa4:	91000015 	stw	r4,0(r18)
   8eaa8:	1c800015 	stw	r18,0(r3)
   8eaac:	dfc00617 	ldw	ra,24(sp)
   8eab0:	dd400517 	ldw	r21,20(sp)
   8eab4:	dd000417 	ldw	r20,16(sp)
   8eab8:	dcc00317 	ldw	r19,12(sp)
   8eabc:	dc800217 	ldw	r18,8(sp)
   8eac0:	dc400117 	ldw	r17,4(sp)
   8eac4:	dc000017 	ldw	r16,0(sp)
   8eac8:	dec00704 	addi	sp,sp,28
   8eacc:	f800283a 	ret
   8ead0:	39400017 	ldw	r5,0(r7)
   8ead4:	18c00104 	addi	r3,r3,4
   8ead8:	39c00104 	addi	r7,r7,4
   8eadc:	197fff15 	stw	r5,-4(r3)
   8eae0:	3a3fe82e 	bgeu	r7,r8,8ea84 <__lshift+0xe4>
   8eae4:	39400017 	ldw	r5,0(r7)
   8eae8:	18c00104 	addi	r3,r3,4
   8eaec:	39c00104 	addi	r7,r7,4
   8eaf0:	197fff15 	stw	r5,-4(r3)
   8eaf4:	3a3ff636 	bltu	r7,r8,8ead0 <__lshift+0x130>
   8eaf8:	003fe206 	br	8ea84 <__lshift+0xe4>

0008eafc <__mcmp>:
   8eafc:	20800417 	ldw	r2,16(r4)
   8eb00:	28c00417 	ldw	r3,16(r5)
   8eb04:	10c5c83a 	sub	r2,r2,r3
   8eb08:	10000f1e 	bne	r2,zero,8eb48 <__mcmp+0x4c>
   8eb0c:	18c00144 	addi	r3,r3,5
   8eb10:	18c7883a 	add	r3,r3,r3
   8eb14:	18c7883a 	add	r3,r3,r3
   8eb18:	21c00504 	addi	r7,r4,20
   8eb1c:	28cb883a 	add	r5,r5,r3
   8eb20:	20c9883a 	add	r4,r4,r3
   8eb24:	213fff04 	addi	r4,r4,-4
   8eb28:	297fff04 	addi	r5,r5,-4
   8eb2c:	21800017 	ldw	r6,0(r4)
   8eb30:	28c00017 	ldw	r3,0(r5)
   8eb34:	30c0021e 	bne	r6,r3,8eb40 <__mcmp+0x44>
   8eb38:	393ffa36 	bltu	r7,r4,8eb24 <__mcmp+0x28>
   8eb3c:	f800283a 	ret
   8eb40:	30c00236 	bltu	r6,r3,8eb4c <__mcmp+0x50>
   8eb44:	00800044 	movi	r2,1
   8eb48:	f800283a 	ret
   8eb4c:	00bfffc4 	movi	r2,-1
   8eb50:	f800283a 	ret

0008eb54 <__mdiff>:
   8eb54:	defffb04 	addi	sp,sp,-20
   8eb58:	dc000015 	stw	r16,0(sp)
   8eb5c:	2821883a 	mov	r16,r5
   8eb60:	dc800215 	stw	r18,8(sp)
   8eb64:	300b883a 	mov	r5,r6
   8eb68:	2025883a 	mov	r18,r4
   8eb6c:	8009883a 	mov	r4,r16
   8eb70:	dc400115 	stw	r17,4(sp)
   8eb74:	dfc00415 	stw	ra,16(sp)
   8eb78:	dcc00315 	stw	r19,12(sp)
   8eb7c:	3023883a 	mov	r17,r6
   8eb80:	008eafc0 	call	8eafc <__mcmp>
   8eb84:	10005026 	beq	r2,zero,8ecc8 <__mdiff+0x174>
   8eb88:	10004a16 	blt	r2,zero,8ecb4 <__mdiff+0x160>
   8eb8c:	0027883a 	mov	r19,zero
   8eb90:	81400117 	ldw	r5,4(r16)
   8eb94:	9009883a 	mov	r4,r18
   8eb98:	008e2580 	call	8e258 <_Balloc>
   8eb9c:	82400417 	ldw	r9,16(r16)
   8eba0:	89800417 	ldw	r6,16(r17)
   8eba4:	14c00315 	stw	r19,12(r2)
   8eba8:	4b800144 	addi	r14,r9,5
   8ebac:	31800144 	addi	r6,r6,5
   8ebb0:	739d883a 	add	r14,r14,r14
   8ebb4:	318d883a 	add	r6,r6,r6
   8ebb8:	739d883a 	add	r14,r14,r14
   8ebbc:	318d883a 	add	r6,r6,r6
   8ebc0:	81c00504 	addi	r7,r16,20
   8ebc4:	839d883a 	add	r14,r16,r14
   8ebc8:	8a000504 	addi	r8,r17,20
   8ebcc:	898d883a 	add	r6,r17,r6
   8ebd0:	10c00504 	addi	r3,r2,20
   8ebd4:	0009883a 	mov	r4,zero
   8ebd8:	3b000017 	ldw	r12,0(r7)
   8ebdc:	42c00017 	ldw	r11,0(r8)
   8ebe0:	42000104 	addi	r8,r8,4
   8ebe4:	62bfffcc 	andi	r10,r12,65535
   8ebe8:	5b7fffcc 	andi	r13,r11,65535
   8ebec:	5109883a 	add	r4,r10,r4
   8ebf0:	2355c83a 	sub	r10,r4,r13
   8ebf4:	5816d43a 	srli	r11,r11,16
   8ebf8:	6008d43a 	srli	r4,r12,16
   8ebfc:	501bd43a 	srai	r13,r10,16
   8ec00:	1a80000d 	sth	r10,0(r3)
   8ec04:	22c9c83a 	sub	r4,r4,r11
   8ec08:	2349883a 	add	r4,r4,r13
   8ec0c:	1900008d 	sth	r4,2(r3)
   8ec10:	39c00104 	addi	r7,r7,4
   8ec14:	2009d43a 	srai	r4,r4,16
   8ec18:	18c00104 	addi	r3,r3,4
   8ec1c:	41bfee36 	bltu	r8,r6,8ebd8 <__mdiff+0x84>
   8ec20:	180b883a 	mov	r5,r3
   8ec24:	3815883a 	mov	r10,r7
   8ec28:	3b80132e 	bgeu	r7,r14,8ec78 <__mdiff+0x124>
   8ec2c:	3a000017 	ldw	r8,0(r7)
   8ec30:	18c00104 	addi	r3,r3,4
   8ec34:	39c00104 	addi	r7,r7,4
   8ec38:	41bfffcc 	andi	r6,r8,65535
   8ec3c:	310d883a 	add	r6,r6,r4
   8ec40:	3009d43a 	srai	r4,r6,16
   8ec44:	4010d43a 	srli	r8,r8,16
   8ec48:	19bfff0d 	sth	r6,-4(r3)
   8ec4c:	2209883a 	add	r4,r4,r8
   8ec50:	193fff8d 	sth	r4,-2(r3)
   8ec54:	2009d43a 	srai	r4,r4,16
   8ec58:	3bbff436 	bltu	r7,r14,8ec2c <__mdiff+0xd8>
   8ec5c:	0286303a 	nor	r3,zero,r10
   8ec60:	1b87883a 	add	r3,r3,r14
   8ec64:	1806d0ba 	srli	r3,r3,2
   8ec68:	18c00044 	addi	r3,r3,1
   8ec6c:	18c7883a 	add	r3,r3,r3
   8ec70:	18c7883a 	add	r3,r3,r3
   8ec74:	28c7883a 	add	r3,r5,r3
   8ec78:	193fff17 	ldw	r4,-4(r3)
   8ec7c:	18ffff04 	addi	r3,r3,-4
   8ec80:	2000041e 	bne	r4,zero,8ec94 <__mdiff+0x140>
   8ec84:	18ffff04 	addi	r3,r3,-4
   8ec88:	19000017 	ldw	r4,0(r3)
   8ec8c:	4a7fffc4 	addi	r9,r9,-1
   8ec90:	203ffc26 	beq	r4,zero,8ec84 <__mdiff+0x130>
   8ec94:	12400415 	stw	r9,16(r2)
   8ec98:	dfc00417 	ldw	ra,16(sp)
   8ec9c:	dcc00317 	ldw	r19,12(sp)
   8eca0:	dc800217 	ldw	r18,8(sp)
   8eca4:	dc400117 	ldw	r17,4(sp)
   8eca8:	dc000017 	ldw	r16,0(sp)
   8ecac:	dec00504 	addi	sp,sp,20
   8ecb0:	f800283a 	ret
   8ecb4:	8005883a 	mov	r2,r16
   8ecb8:	04c00044 	movi	r19,1
   8ecbc:	8821883a 	mov	r16,r17
   8ecc0:	1023883a 	mov	r17,r2
   8ecc4:	003fb206 	br	8eb90 <__mdiff+0x3c>
   8ecc8:	9009883a 	mov	r4,r18
   8eccc:	000b883a 	mov	r5,zero
   8ecd0:	008e2580 	call	8e258 <_Balloc>
   8ecd4:	00c00044 	movi	r3,1
   8ecd8:	10c00415 	stw	r3,16(r2)
   8ecdc:	10000515 	stw	zero,20(r2)
   8ece0:	dfc00417 	ldw	ra,16(sp)
   8ece4:	dcc00317 	ldw	r19,12(sp)
   8ece8:	dc800217 	ldw	r18,8(sp)
   8ecec:	dc400117 	ldw	r17,4(sp)
   8ecf0:	dc000017 	ldw	r16,0(sp)
   8ecf4:	dec00504 	addi	sp,sp,20
   8ecf8:	f800283a 	ret

0008ecfc <__ulp>:
   8ecfc:	295ffc2c 	andhi	r5,r5,32752
   8ed00:	00bf3034 	movhi	r2,64704
   8ed04:	2887883a 	add	r3,r5,r2
   8ed08:	00c0020e 	bge	zero,r3,8ed14 <__ulp+0x18>
   8ed0c:	0005883a 	mov	r2,zero
   8ed10:	f800283a 	ret
   8ed14:	00c7c83a 	sub	r3,zero,r3
   8ed18:	1805d53a 	srai	r2,r3,20
   8ed1c:	00c004c4 	movi	r3,19
   8ed20:	18800a0e 	bge	r3,r2,8ed4c <__ulp+0x50>
   8ed24:	01000c84 	movi	r4,50
   8ed28:	0007883a 	mov	r3,zero
   8ed2c:	20800516 	blt	r4,r2,8ed44 <__ulp+0x48>
   8ed30:	01000cc4 	movi	r4,51
   8ed34:	2085c83a 	sub	r2,r4,r2
   8ed38:	01000044 	movi	r4,1
   8ed3c:	2084983a 	sll	r2,r4,r2
   8ed40:	f800283a 	ret
   8ed44:	00800044 	movi	r2,1
   8ed48:	f800283a 	ret
   8ed4c:	00c00234 	movhi	r3,8
   8ed50:	1887d83a 	sra	r3,r3,r2
   8ed54:	0005883a 	mov	r2,zero
   8ed58:	f800283a 	ret

0008ed5c <__b2d>:
   8ed5c:	defffa04 	addi	sp,sp,-24
   8ed60:	dc000015 	stw	r16,0(sp)
   8ed64:	24000417 	ldw	r16,16(r4)
   8ed68:	dc400115 	stw	r17,4(sp)
   8ed6c:	dcc00315 	stw	r19,12(sp)
   8ed70:	84000144 	addi	r16,r16,5
   8ed74:	8421883a 	add	r16,r16,r16
   8ed78:	8421883a 	add	r16,r16,r16
   8ed7c:	2421883a 	add	r16,r4,r16
   8ed80:	847fff17 	ldw	r17,-4(r16)
   8ed84:	24c00504 	addi	r19,r4,20
   8ed88:	dd000415 	stw	r20,16(sp)
   8ed8c:	8809883a 	mov	r4,r17
   8ed90:	dc800215 	stw	r18,8(sp)
   8ed94:	2829883a 	mov	r20,r5
   8ed98:	dfc00515 	stw	ra,20(sp)
   8ed9c:	008e5400 	call	8e540 <__hi0bits>
   8eda0:	00c00804 	movi	r3,32
   8eda4:	1887c83a 	sub	r3,r3,r2
   8eda8:	a0c00015 	stw	r3,0(r20)
   8edac:	00c00284 	movi	r3,10
   8edb0:	84bfff04 	addi	r18,r16,-4
   8edb4:	18801216 	blt	r3,r2,8ee00 <__b2d+0xa4>
   8edb8:	010002c4 	movi	r4,11
   8edbc:	2089c83a 	sub	r4,r4,r2
   8edc0:	8906d83a 	srl	r3,r17,r4
   8edc4:	18cffc34 	orhi	r3,r3,16368
   8edc8:	9c80322e 	bgeu	r19,r18,8ee94 <__b2d+0x138>
   8edcc:	817ffe17 	ldw	r5,-8(r16)
   8edd0:	2908d83a 	srl	r4,r5,r4
   8edd4:	10800544 	addi	r2,r2,21
   8edd8:	88a2983a 	sll	r17,r17,r2
   8eddc:	2444b03a 	or	r2,r4,r17
   8ede0:	dfc00517 	ldw	ra,20(sp)
   8ede4:	dd000417 	ldw	r20,16(sp)
   8ede8:	dcc00317 	ldw	r19,12(sp)
   8edec:	dc800217 	ldw	r18,8(sp)
   8edf0:	dc400117 	ldw	r17,4(sp)
   8edf4:	dc000017 	ldw	r16,0(sp)
   8edf8:	dec00604 	addi	sp,sp,24
   8edfc:	f800283a 	ret
   8ee00:	9c801636 	bltu	r19,r18,8ee5c <__b2d+0x100>
   8ee04:	113ffd44 	addi	r4,r2,-11
   8ee08:	000b883a 	mov	r5,zero
   8ee0c:	20001726 	beq	r4,zero,8ee6c <__b2d+0x110>
   8ee10:	00c00ac4 	movi	r3,43
   8ee14:	1885c83a 	sub	r2,r3,r2
   8ee18:	8906983a 	sll	r3,r17,r4
   8ee1c:	288cd83a 	srl	r6,r5,r2
   8ee20:	18cffc34 	orhi	r3,r3,16368
   8ee24:	1986b03a 	or	r3,r3,r6
   8ee28:	9c801c2e 	bgeu	r19,r18,8ee9c <__b2d+0x140>
   8ee2c:	91bfff17 	ldw	r6,-4(r18)
   8ee30:	3084d83a 	srl	r2,r6,r2
   8ee34:	2908983a 	sll	r4,r5,r4
   8ee38:	1104b03a 	or	r2,r2,r4
   8ee3c:	dfc00517 	ldw	ra,20(sp)
   8ee40:	dd000417 	ldw	r20,16(sp)
   8ee44:	dcc00317 	ldw	r19,12(sp)
   8ee48:	dc800217 	ldw	r18,8(sp)
   8ee4c:	dc400117 	ldw	r17,4(sp)
   8ee50:	dc000017 	ldw	r16,0(sp)
   8ee54:	dec00604 	addi	sp,sp,24
   8ee58:	f800283a 	ret
   8ee5c:	113ffd44 	addi	r4,r2,-11
   8ee60:	84bffe04 	addi	r18,r16,-8
   8ee64:	817ffe17 	ldw	r5,-8(r16)
   8ee68:	203fe91e 	bne	r4,zero,8ee10 <__b2d+0xb4>
   8ee6c:	88cffc34 	orhi	r3,r17,16368
   8ee70:	2805883a 	mov	r2,r5
   8ee74:	dfc00517 	ldw	ra,20(sp)
   8ee78:	dd000417 	ldw	r20,16(sp)
   8ee7c:	dcc00317 	ldw	r19,12(sp)
   8ee80:	dc800217 	ldw	r18,8(sp)
   8ee84:	dc400117 	ldw	r17,4(sp)
   8ee88:	dc000017 	ldw	r16,0(sp)
   8ee8c:	dec00604 	addi	sp,sp,24
   8ee90:	f800283a 	ret
   8ee94:	0009883a 	mov	r4,zero
   8ee98:	003fce06 	br	8edd4 <__b2d+0x78>
   8ee9c:	0005883a 	mov	r2,zero
   8eea0:	003fe406 	br	8ee34 <__b2d+0xd8>

0008eea4 <__d2b>:
   8eea4:	defff804 	addi	sp,sp,-32
   8eea8:	dc400315 	stw	r17,12(sp)
   8eeac:	3023883a 	mov	r17,r6
   8eeb0:	dc800415 	stw	r18,16(sp)
   8eeb4:	8824907a 	slli	r18,r17,1
   8eeb8:	dcc00515 	stw	r19,20(sp)
   8eebc:	2827883a 	mov	r19,r5
   8eec0:	9024d57a 	srli	r18,r18,21
   8eec4:	01400044 	movi	r5,1
   8eec8:	dd000615 	stw	r20,24(sp)
   8eecc:	dc000215 	stw	r16,8(sp)
   8eed0:	dfc00715 	stw	ra,28(sp)
   8eed4:	3829883a 	mov	r20,r7
   8eed8:	008e2580 	call	8e258 <_Balloc>
   8eedc:	1021883a 	mov	r16,r2
   8eee0:	00800434 	movhi	r2,16
   8eee4:	10bfffc4 	addi	r2,r2,-1
   8eee8:	88a2703a 	and	r17,r17,r2
   8eeec:	90000126 	beq	r18,zero,8eef4 <__d2b+0x50>
   8eef0:	8c400434 	orhi	r17,r17,16
   8eef4:	dc400015 	stw	r17,0(sp)
   8eef8:	98002226 	beq	r19,zero,8ef84 <__d2b+0xe0>
   8eefc:	d9000104 	addi	r4,sp,4
   8ef00:	dcc00115 	stw	r19,4(sp)
   8ef04:	008e5a80 	call	8e5a8 <__lo0bits>
   8ef08:	d8c00017 	ldw	r3,0(sp)
   8ef0c:	10002d1e 	bne	r2,zero,8efc4 <__d2b+0x120>
   8ef10:	d9000117 	ldw	r4,4(sp)
   8ef14:	81000515 	stw	r4,20(r16)
   8ef18:	1823003a 	cmpeq	r17,r3,zero
   8ef1c:	01000084 	movi	r4,2
   8ef20:	2463c83a 	sub	r17,r4,r17
   8ef24:	80c00615 	stw	r3,24(r16)
   8ef28:	84400415 	stw	r17,16(r16)
   8ef2c:	90001d1e 	bne	r18,zero,8efa4 <__d2b+0x100>
   8ef30:	88c00104 	addi	r3,r17,4
   8ef34:	18c7883a 	add	r3,r3,r3
   8ef38:	18c7883a 	add	r3,r3,r3
   8ef3c:	80c7883a 	add	r3,r16,r3
   8ef40:	19000017 	ldw	r4,0(r3)
   8ef44:	10bef384 	addi	r2,r2,-1074
   8ef48:	a0800015 	stw	r2,0(r20)
   8ef4c:	008e5400 	call	8e540 <__hi0bits>
   8ef50:	8822917a 	slli	r17,r17,5
   8ef54:	d8c00817 	ldw	r3,32(sp)
   8ef58:	8885c83a 	sub	r2,r17,r2
   8ef5c:	18800015 	stw	r2,0(r3)
   8ef60:	8005883a 	mov	r2,r16
   8ef64:	dfc00717 	ldw	ra,28(sp)
   8ef68:	dd000617 	ldw	r20,24(sp)
   8ef6c:	dcc00517 	ldw	r19,20(sp)
   8ef70:	dc800417 	ldw	r18,16(sp)
   8ef74:	dc400317 	ldw	r17,12(sp)
   8ef78:	dc000217 	ldw	r16,8(sp)
   8ef7c:	dec00804 	addi	sp,sp,32
   8ef80:	f800283a 	ret
   8ef84:	d809883a 	mov	r4,sp
   8ef88:	008e5a80 	call	8e5a8 <__lo0bits>
   8ef8c:	d8c00017 	ldw	r3,0(sp)
   8ef90:	04400044 	movi	r17,1
   8ef94:	84400415 	stw	r17,16(r16)
   8ef98:	80c00515 	stw	r3,20(r16)
   8ef9c:	10800804 	addi	r2,r2,32
   8efa0:	903fe326 	beq	r18,zero,8ef30 <__d2b+0x8c>
   8efa4:	00c00d44 	movi	r3,53
   8efa8:	94bef344 	addi	r18,r18,-1075
   8efac:	90a5883a 	add	r18,r18,r2
   8efb0:	1885c83a 	sub	r2,r3,r2
   8efb4:	d8c00817 	ldw	r3,32(sp)
   8efb8:	a4800015 	stw	r18,0(r20)
   8efbc:	18800015 	stw	r2,0(r3)
   8efc0:	003fe706 	br	8ef60 <__d2b+0xbc>
   8efc4:	01000804 	movi	r4,32
   8efc8:	2089c83a 	sub	r4,r4,r2
   8efcc:	1908983a 	sll	r4,r3,r4
   8efd0:	d9400117 	ldw	r5,4(sp)
   8efd4:	1886d83a 	srl	r3,r3,r2
   8efd8:	2148b03a 	or	r4,r4,r5
   8efdc:	81000515 	stw	r4,20(r16)
   8efe0:	d8c00015 	stw	r3,0(sp)
   8efe4:	003fcc06 	br	8ef18 <__d2b+0x74>

0008efe8 <__ratio>:
   8efe8:	defff904 	addi	sp,sp,-28
   8efec:	dc400315 	stw	r17,12(sp)
   8eff0:	2823883a 	mov	r17,r5
   8eff4:	d9400104 	addi	r5,sp,4
   8eff8:	dfc00615 	stw	ra,24(sp)
   8effc:	dcc00515 	stw	r19,20(sp)
   8f000:	dc800415 	stw	r18,16(sp)
   8f004:	2027883a 	mov	r19,r4
   8f008:	dc000215 	stw	r16,8(sp)
   8f00c:	008ed5c0 	call	8ed5c <__b2d>
   8f010:	8809883a 	mov	r4,r17
   8f014:	d80b883a 	mov	r5,sp
   8f018:	1025883a 	mov	r18,r2
   8f01c:	1821883a 	mov	r16,r3
   8f020:	008ed5c0 	call	8ed5c <__b2d>
   8f024:	99400417 	ldw	r5,16(r19)
   8f028:	89000417 	ldw	r4,16(r17)
   8f02c:	d9800117 	ldw	r6,4(sp)
   8f030:	2909c83a 	sub	r4,r5,r4
   8f034:	d9400017 	ldw	r5,0(sp)
   8f038:	2008917a 	slli	r4,r4,5
   8f03c:	314bc83a 	sub	r5,r6,r5
   8f040:	290b883a 	add	r5,r5,r4
   8f044:	01400e0e 	bge	zero,r5,8f080 <__ratio+0x98>
   8f048:	280a953a 	slli	r5,r5,20
   8f04c:	2c21883a 	add	r16,r5,r16
   8f050:	9009883a 	mov	r4,r18
   8f054:	800b883a 	mov	r5,r16
   8f058:	100d883a 	mov	r6,r2
   8f05c:	180f883a 	mov	r7,r3
   8f060:	0087e540 	call	87e54 <__divdf3>
   8f064:	dfc00617 	ldw	ra,24(sp)
   8f068:	dcc00517 	ldw	r19,20(sp)
   8f06c:	dc800417 	ldw	r18,16(sp)
   8f070:	dc400317 	ldw	r17,12(sp)
   8f074:	dc000217 	ldw	r16,8(sp)
   8f078:	dec00704 	addi	sp,sp,28
   8f07c:	f800283a 	ret
   8f080:	280a953a 	slli	r5,r5,20
   8f084:	1947c83a 	sub	r3,r3,r5
   8f088:	003ff106 	br	8f050 <__ratio+0x68>

0008f08c <_mprec_log10>:
   8f08c:	defffe04 	addi	sp,sp,-8
   8f090:	dc000015 	stw	r16,0(sp)
   8f094:	dfc00115 	stw	ra,4(sp)
   8f098:	008005c4 	movi	r2,23
   8f09c:	2021883a 	mov	r16,r4
   8f0a0:	11000d0e 	bge	r2,r4,8f0d8 <_mprec_log10+0x4c>
   8f0a4:	0005883a 	mov	r2,zero
   8f0a8:	00cffc34 	movhi	r3,16368
   8f0ac:	843fffc4 	addi	r16,r16,-1
   8f0b0:	1009883a 	mov	r4,r2
   8f0b4:	180b883a 	mov	r5,r3
   8f0b8:	000d883a 	mov	r6,zero
   8f0bc:	01d00934 	movhi	r7,16420
   8f0c0:	0087b700 	call	87b70 <__muldf3>
   8f0c4:	803ff91e 	bne	r16,zero,8f0ac <_mprec_log10+0x20>
   8f0c8:	dfc00117 	ldw	ra,4(sp)
   8f0cc:	dc000017 	ldw	r16,0(sp)
   8f0d0:	dec00204 	addi	sp,sp,8
   8f0d4:	f800283a 	ret
   8f0d8:	202090fa 	slli	r16,r4,3
   8f0dc:	008002f4 	movhi	r2,11
   8f0e0:	10b69904 	addi	r2,r2,-9628
   8f0e4:	1421883a 	add	r16,r2,r16
   8f0e8:	80800017 	ldw	r2,0(r16)
   8f0ec:	80c00117 	ldw	r3,4(r16)
   8f0f0:	dfc00117 	ldw	ra,4(sp)
   8f0f4:	dc000017 	ldw	r16,0(sp)
   8f0f8:	dec00204 	addi	sp,sp,8
   8f0fc:	f800283a 	ret

0008f100 <__copybits>:
   8f100:	297fffc4 	addi	r5,r5,-1
   8f104:	31c00417 	ldw	r7,16(r6)
   8f108:	2811d17a 	srai	r8,r5,5
   8f10c:	30800504 	addi	r2,r6,20
   8f110:	39c00144 	addi	r7,r7,5
   8f114:	42000044 	addi	r8,r8,1
   8f118:	39cf883a 	add	r7,r7,r7
   8f11c:	4211883a 	add	r8,r8,r8
   8f120:	39cf883a 	add	r7,r7,r7
   8f124:	4211883a 	add	r8,r8,r8
   8f128:	31cf883a 	add	r7,r6,r7
   8f12c:	2211883a 	add	r8,r4,r8
   8f130:	11c00d2e 	bgeu	r2,r7,8f168 <__copybits+0x68>
   8f134:	2007883a 	mov	r3,r4
   8f138:	11400017 	ldw	r5,0(r2)
   8f13c:	18c00104 	addi	r3,r3,4
   8f140:	10800104 	addi	r2,r2,4
   8f144:	197fff15 	stw	r5,-4(r3)
   8f148:	11fffb36 	bltu	r2,r7,8f138 <__copybits+0x38>
   8f14c:	3985c83a 	sub	r2,r7,r6
   8f150:	10bffac4 	addi	r2,r2,-21
   8f154:	1004d0ba 	srli	r2,r2,2
   8f158:	10800044 	addi	r2,r2,1
   8f15c:	1085883a 	add	r2,r2,r2
   8f160:	1085883a 	add	r2,r2,r2
   8f164:	2089883a 	add	r4,r4,r2
   8f168:	2200032e 	bgeu	r4,r8,8f178 <__copybits+0x78>
   8f16c:	20000015 	stw	zero,0(r4)
   8f170:	21000104 	addi	r4,r4,4
   8f174:	223ffd36 	bltu	r4,r8,8f16c <__copybits+0x6c>
   8f178:	f800283a 	ret

0008f17c <__any_on>:
   8f17c:	21800417 	ldw	r6,16(r4)
   8f180:	2805d17a 	srai	r2,r5,5
   8f184:	20c00504 	addi	r3,r4,20
   8f188:	30800f0e 	bge	r6,r2,8f1c8 <__any_on+0x4c>
   8f18c:	3005883a 	mov	r2,r6
   8f190:	10800144 	addi	r2,r2,5
   8f194:	1085883a 	add	r2,r2,r2
   8f198:	1085883a 	add	r2,r2,r2
   8f19c:	2089883a 	add	r4,r4,r2
   8f1a0:	1900152e 	bgeu	r3,r4,8f1f8 <__any_on+0x7c>
   8f1a4:	20bfff17 	ldw	r2,-4(r4)
   8f1a8:	213fff04 	addi	r4,r4,-4
   8f1ac:	1000041e 	bne	r2,zero,8f1c0 <__any_on+0x44>
   8f1b0:	1900112e 	bgeu	r3,r4,8f1f8 <__any_on+0x7c>
   8f1b4:	213fff04 	addi	r4,r4,-4
   8f1b8:	20800017 	ldw	r2,0(r4)
   8f1bc:	103ffc26 	beq	r2,zero,8f1b0 <__any_on+0x34>
   8f1c0:	00800044 	movi	r2,1
   8f1c4:	f800283a 	ret
   8f1c8:	11bff10e 	bge	r2,r6,8f190 <__any_on+0x14>
   8f1cc:	294007cc 	andi	r5,r5,31
   8f1d0:	283fef26 	beq	r5,zero,8f190 <__any_on+0x14>
   8f1d4:	11800144 	addi	r6,r2,5
   8f1d8:	318d883a 	add	r6,r6,r6
   8f1dc:	318d883a 	add	r6,r6,r6
   8f1e0:	218d883a 	add	r6,r4,r6
   8f1e4:	31800017 	ldw	r6,0(r6)
   8f1e8:	314ed83a 	srl	r7,r6,r5
   8f1ec:	394a983a 	sll	r5,r7,r5
   8f1f0:	29bff31e 	bne	r5,r6,8f1c0 <__any_on+0x44>
   8f1f4:	003fe606 	br	8f190 <__any_on+0x14>
   8f1f8:	0005883a 	mov	r2,zero
   8f1fc:	f800283a 	ret

0008f200 <_realloc_r>:
   8f200:	defff504 	addi	sp,sp,-44
   8f204:	dd400615 	stw	r21,24(sp)
   8f208:	dc800315 	stw	r18,12(sp)
   8f20c:	dc000115 	stw	r16,4(sp)
   8f210:	dfc00a15 	stw	ra,40(sp)
   8f214:	df000915 	stw	fp,36(sp)
   8f218:	ddc00815 	stw	r23,32(sp)
   8f21c:	dd800715 	stw	r22,28(sp)
   8f220:	dd000515 	stw	r20,20(sp)
   8f224:	dcc00415 	stw	r19,16(sp)
   8f228:	dc400215 	stw	r17,8(sp)
   8f22c:	2821883a 	mov	r16,r5
   8f230:	202b883a 	mov	r21,r4
   8f234:	3025883a 	mov	r18,r6
   8f238:	28009626 	beq	r5,zero,8f494 <_realloc_r+0x294>
   8f23c:	00916440 	call	91644 <__malloc_lock>
   8f240:	80bfff17 	ldw	r2,-4(r16)
   8f244:	04ffff04 	movi	r19,-4
   8f248:	90c002c4 	addi	r3,r18,11
   8f24c:	01000584 	movi	r4,22
   8f250:	85bffe04 	addi	r22,r16,-8
   8f254:	14e6703a 	and	r19,r2,r19
   8f258:	20c0372e 	bgeu	r4,r3,8f338 <_realloc_r+0x138>
   8f25c:	047ffe04 	movi	r17,-8
   8f260:	1c62703a 	and	r17,r3,r17
   8f264:	8807883a 	mov	r3,r17
   8f268:	88005a16 	blt	r17,zero,8f3d4 <_realloc_r+0x1d4>
   8f26c:	8c805936 	bltu	r17,r18,8f3d4 <_realloc_r+0x1d4>
   8f270:	98c0340e 	bge	r19,r3,8f344 <_realloc_r+0x144>
   8f274:	070002f4 	movhi	fp,11
   8f278:	e73ec404 	addi	fp,fp,-1264
   8f27c:	e1400217 	ldw	r5,8(fp)
   8f280:	b4c9883a 	add	r4,r22,r19
   8f284:	29009026 	beq	r5,r4,8f4c8 <_realloc_r+0x2c8>
   8f288:	21800117 	ldw	r6,4(r4)
   8f28c:	01ffff84 	movi	r7,-2
   8f290:	31ce703a 	and	r7,r6,r7
   8f294:	21cf883a 	add	r7,r4,r7
   8f298:	39c00117 	ldw	r7,4(r7)
   8f29c:	39c0004c 	andi	r7,r7,1
   8f2a0:	38004326 	beq	r7,zero,8f3b0 <_realloc_r+0x1b0>
   8f2a4:	000d883a 	mov	r6,zero
   8f2a8:	0009883a 	mov	r4,zero
   8f2ac:	1080004c 	andi	r2,r2,1
   8f2b0:	10005a1e 	bne	r2,zero,8f41c <_realloc_r+0x21c>
   8f2b4:	85fffe17 	ldw	r23,-8(r16)
   8f2b8:	00bfff04 	movi	r2,-4
   8f2bc:	b5efc83a 	sub	r23,r22,r23
   8f2c0:	b9c00117 	ldw	r7,4(r23)
   8f2c4:	388e703a 	and	r7,r7,r2
   8f2c8:	3ccf883a 	add	r7,r7,r19
   8f2cc:	20005226 	beq	r4,zero,8f418 <_realloc_r+0x218>
   8f2d0:	31e9883a 	add	r20,r6,r7
   8f2d4:	2140c726 	beq	r4,r5,8f5f4 <_realloc_r+0x3f4>
   8f2d8:	a0c04f16 	blt	r20,r3,8f418 <_realloc_r+0x218>
   8f2dc:	20800317 	ldw	r2,12(r4)
   8f2e0:	20c00217 	ldw	r3,8(r4)
   8f2e4:	99bfff04 	addi	r6,r19,-4
   8f2e8:	01000904 	movi	r4,36
   8f2ec:	18800315 	stw	r2,12(r3)
   8f2f0:	10c00215 	stw	r3,8(r2)
   8f2f4:	b8c00217 	ldw	r3,8(r23)
   8f2f8:	b8800317 	ldw	r2,12(r23)
   8f2fc:	bc800204 	addi	r18,r23,8
   8f300:	18800315 	stw	r2,12(r3)
   8f304:	10c00215 	stw	r3,8(r2)
   8f308:	2180ed36 	bltu	r4,r6,8f6c0 <_realloc_r+0x4c0>
   8f30c:	008004c4 	movi	r2,19
   8f310:	11809b2e 	bgeu	r2,r6,8f580 <_realloc_r+0x380>
   8f314:	80800017 	ldw	r2,0(r16)
   8f318:	b8800215 	stw	r2,8(r23)
   8f31c:	80800117 	ldw	r2,4(r16)
   8f320:	b8800315 	stw	r2,12(r23)
   8f324:	008006c4 	movi	r2,27
   8f328:	1180f936 	bltu	r2,r6,8f710 <_realloc_r+0x510>
   8f32c:	b8800404 	addi	r2,r23,16
   8f330:	80c00204 	addi	r3,r16,8
   8f334:	00009406 	br	8f588 <_realloc_r+0x388>
   8f338:	00c00404 	movi	r3,16
   8f33c:	1823883a 	mov	r17,r3
   8f340:	003fca06 	br	8f26c <_realloc_r+0x6c>
   8f344:	9829883a 	mov	r20,r19
   8f348:	a447c83a 	sub	r3,r20,r17
   8f34c:	010003c4 	movi	r4,15
   8f350:	1080004c 	andi	r2,r2,1
   8f354:	20c02336 	bltu	r4,r3,8f3e4 <_realloc_r+0x1e4>
   8f358:	1504b03a 	or	r2,r2,r20
   8f35c:	b0800115 	stw	r2,4(r22)
   8f360:	b52d883a 	add	r22,r22,r20
   8f364:	b0800117 	ldw	r2,4(r22)
   8f368:	10800054 	ori	r2,r2,1
   8f36c:	b0800115 	stw	r2,4(r22)
   8f370:	a809883a 	mov	r4,r21
   8f374:	00916640 	call	91664 <__malloc_unlock>
   8f378:	8025883a 	mov	r18,r16
   8f37c:	9005883a 	mov	r2,r18
   8f380:	dfc00a17 	ldw	ra,40(sp)
   8f384:	df000917 	ldw	fp,36(sp)
   8f388:	ddc00817 	ldw	r23,32(sp)
   8f38c:	dd800717 	ldw	r22,28(sp)
   8f390:	dd400617 	ldw	r21,24(sp)
   8f394:	dd000517 	ldw	r20,20(sp)
   8f398:	dcc00417 	ldw	r19,16(sp)
   8f39c:	dc800317 	ldw	r18,12(sp)
   8f3a0:	dc400217 	ldw	r17,8(sp)
   8f3a4:	dc000117 	ldw	r16,4(sp)
   8f3a8:	dec00b04 	addi	sp,sp,44
   8f3ac:	f800283a 	ret
   8f3b0:	01ffff04 	movi	r7,-4
   8f3b4:	31cc703a 	and	r6,r6,r7
   8f3b8:	34e9883a 	add	r20,r6,r19
   8f3bc:	a0ffbb16 	blt	r20,r3,8f2ac <_realloc_r+0xac>
   8f3c0:	20c00317 	ldw	r3,12(r4)
   8f3c4:	21000217 	ldw	r4,8(r4)
   8f3c8:	20c00315 	stw	r3,12(r4)
   8f3cc:	19000215 	stw	r4,8(r3)
   8f3d0:	003fdd06 	br	8f348 <_realloc_r+0x148>
   8f3d4:	00800304 	movi	r2,12
   8f3d8:	a8800015 	stw	r2,0(r21)
   8f3dc:	0025883a 	mov	r18,zero
   8f3e0:	003fe606 	br	8f37c <_realloc_r+0x17c>
   8f3e4:	1444b03a 	or	r2,r2,r17
   8f3e8:	b0800115 	stw	r2,4(r22)
   8f3ec:	b44b883a 	add	r5,r22,r17
   8f3f0:	18800054 	ori	r2,r3,1
   8f3f4:	28800115 	stw	r2,4(r5)
   8f3f8:	28c7883a 	add	r3,r5,r3
   8f3fc:	18800117 	ldw	r2,4(r3)
   8f400:	a809883a 	mov	r4,r21
   8f404:	29400204 	addi	r5,r5,8
   8f408:	10800054 	ori	r2,r2,1
   8f40c:	18800115 	stw	r2,4(r3)
   8f410:	008d4a00 	call	8d4a0 <_free_r>
   8f414:	003fd606 	br	8f370 <_realloc_r+0x170>
   8f418:	38c0330e 	bge	r7,r3,8f4e8 <_realloc_r+0x2e8>
   8f41c:	900b883a 	mov	r5,r18
   8f420:	a809883a 	mov	r4,r21
   8f424:	00889000 	call	88900 <_malloc_r>
   8f428:	1025883a 	mov	r18,r2
   8f42c:	10001626 	beq	r2,zero,8f488 <_realloc_r+0x288>
   8f430:	80bfff17 	ldw	r2,-4(r16)
   8f434:	00ffff84 	movi	r3,-2
   8f438:	913ffe04 	addi	r4,r18,-8
   8f43c:	10c6703a 	and	r3,r2,r3
   8f440:	b0c7883a 	add	r3,r22,r3
   8f444:	20c09926 	beq	r4,r3,8f6ac <_realloc_r+0x4ac>
   8f448:	99bfff04 	addi	r6,r19,-4
   8f44c:	00800904 	movi	r2,36
   8f450:	11806436 	bltu	r2,r6,8f5e4 <_realloc_r+0x3e4>
   8f454:	00c004c4 	movi	r3,19
   8f458:	19804036 	bltu	r3,r6,8f55c <_realloc_r+0x35c>
   8f45c:	9005883a 	mov	r2,r18
   8f460:	8007883a 	mov	r3,r16
   8f464:	19000017 	ldw	r4,0(r3)
   8f468:	11000015 	stw	r4,0(r2)
   8f46c:	19000117 	ldw	r4,4(r3)
   8f470:	11000115 	stw	r4,4(r2)
   8f474:	18c00217 	ldw	r3,8(r3)
   8f478:	10c00215 	stw	r3,8(r2)
   8f47c:	a809883a 	mov	r4,r21
   8f480:	800b883a 	mov	r5,r16
   8f484:	008d4a00 	call	8d4a0 <_free_r>
   8f488:	a809883a 	mov	r4,r21
   8f48c:	00916640 	call	91664 <__malloc_unlock>
   8f490:	003fba06 	br	8f37c <_realloc_r+0x17c>
   8f494:	300b883a 	mov	r5,r6
   8f498:	dfc00a17 	ldw	ra,40(sp)
   8f49c:	df000917 	ldw	fp,36(sp)
   8f4a0:	ddc00817 	ldw	r23,32(sp)
   8f4a4:	dd800717 	ldw	r22,28(sp)
   8f4a8:	dd400617 	ldw	r21,24(sp)
   8f4ac:	dd000517 	ldw	r20,20(sp)
   8f4b0:	dcc00417 	ldw	r19,16(sp)
   8f4b4:	dc800317 	ldw	r18,12(sp)
   8f4b8:	dc400217 	ldw	r17,8(sp)
   8f4bc:	dc000117 	ldw	r16,4(sp)
   8f4c0:	dec00b04 	addi	sp,sp,44
   8f4c4:	00889001 	jmpi	88900 <_malloc_r>
   8f4c8:	29800117 	ldw	r6,4(r5)
   8f4cc:	013fff04 	movi	r4,-4
   8f4d0:	89c00404 	addi	r7,r17,16
   8f4d4:	310c703a 	and	r6,r6,r4
   8f4d8:	34c9883a 	add	r4,r6,r19
   8f4dc:	21c0340e 	bge	r4,r7,8f5b0 <_realloc_r+0x3b0>
   8f4e0:	2809883a 	mov	r4,r5
   8f4e4:	003f7106 	br	8f2ac <_realloc_r+0xac>
   8f4e8:	b8800317 	ldw	r2,12(r23)
   8f4ec:	b8c00217 	ldw	r3,8(r23)
   8f4f0:	99bfff04 	addi	r6,r19,-4
   8f4f4:	01000904 	movi	r4,36
   8f4f8:	18800315 	stw	r2,12(r3)
   8f4fc:	10c00215 	stw	r3,8(r2)
   8f500:	bc800204 	addi	r18,r23,8
   8f504:	21807836 	bltu	r4,r6,8f6e8 <_realloc_r+0x4e8>
   8f508:	008004c4 	movi	r2,19
   8f50c:	1180732e 	bgeu	r2,r6,8f6dc <_realloc_r+0x4dc>
   8f510:	80800017 	ldw	r2,0(r16)
   8f514:	b8800215 	stw	r2,8(r23)
   8f518:	80800117 	ldw	r2,4(r16)
   8f51c:	b8800315 	stw	r2,12(r23)
   8f520:	008006c4 	movi	r2,27
   8f524:	11808936 	bltu	r2,r6,8f74c <_realloc_r+0x54c>
   8f528:	b8800404 	addi	r2,r23,16
   8f52c:	80c00204 	addi	r3,r16,8
   8f530:	19000017 	ldw	r4,0(r3)
   8f534:	9021883a 	mov	r16,r18
   8f538:	3829883a 	mov	r20,r7
   8f53c:	11000015 	stw	r4,0(r2)
   8f540:	19000117 	ldw	r4,4(r3)
   8f544:	b82d883a 	mov	r22,r23
   8f548:	11000115 	stw	r4,4(r2)
   8f54c:	18c00217 	ldw	r3,8(r3)
   8f550:	10c00215 	stw	r3,8(r2)
   8f554:	b8800117 	ldw	r2,4(r23)
   8f558:	003f7b06 	br	8f348 <_realloc_r+0x148>
   8f55c:	80c00017 	ldw	r3,0(r16)
   8f560:	90c00015 	stw	r3,0(r18)
   8f564:	80c00117 	ldw	r3,4(r16)
   8f568:	90c00115 	stw	r3,4(r18)
   8f56c:	00c006c4 	movi	r3,27
   8f570:	19804636 	bltu	r3,r6,8f68c <_realloc_r+0x48c>
   8f574:	90800204 	addi	r2,r18,8
   8f578:	80c00204 	addi	r3,r16,8
   8f57c:	003fb906 	br	8f464 <_realloc_r+0x264>
   8f580:	9005883a 	mov	r2,r18
   8f584:	8007883a 	mov	r3,r16
   8f588:	19000017 	ldw	r4,0(r3)
   8f58c:	9021883a 	mov	r16,r18
   8f590:	b82d883a 	mov	r22,r23
   8f594:	11000015 	stw	r4,0(r2)
   8f598:	19000117 	ldw	r4,4(r3)
   8f59c:	11000115 	stw	r4,4(r2)
   8f5a0:	18c00217 	ldw	r3,8(r3)
   8f5a4:	10c00215 	stw	r3,8(r2)
   8f5a8:	b8800117 	ldw	r2,4(r23)
   8f5ac:	003f6606 	br	8f348 <_realloc_r+0x148>
   8f5b0:	2445c83a 	sub	r2,r4,r17
   8f5b4:	b46d883a 	add	r22,r22,r17
   8f5b8:	10800054 	ori	r2,r2,1
   8f5bc:	b0800115 	stw	r2,4(r22)
   8f5c0:	80bfff17 	ldw	r2,-4(r16)
   8f5c4:	a809883a 	mov	r4,r21
   8f5c8:	e5800215 	stw	r22,8(fp)
   8f5cc:	1080004c 	andi	r2,r2,1
   8f5d0:	88a2b03a 	or	r17,r17,r2
   8f5d4:	847fff15 	stw	r17,-4(r16)
   8f5d8:	00916640 	call	91664 <__malloc_unlock>
   8f5dc:	8025883a 	mov	r18,r16
   8f5e0:	003f6606 	br	8f37c <_realloc_r+0x17c>
   8f5e4:	9009883a 	mov	r4,r18
   8f5e8:	800b883a 	mov	r5,r16
   8f5ec:	008e1300 	call	8e130 <memmove>
   8f5f0:	003fa206 	br	8f47c <_realloc_r+0x27c>
   8f5f4:	88800404 	addi	r2,r17,16
   8f5f8:	a0bf8716 	blt	r20,r2,8f418 <_realloc_r+0x218>
   8f5fc:	b8800317 	ldw	r2,12(r23)
   8f600:	b8c00217 	ldw	r3,8(r23)
   8f604:	99bfff04 	addi	r6,r19,-4
   8f608:	01000904 	movi	r4,36
   8f60c:	18800315 	stw	r2,12(r3)
   8f610:	10c00215 	stw	r3,8(r2)
   8f614:	bc800204 	addi	r18,r23,8
   8f618:	21806536 	bltu	r4,r6,8f7b0 <_realloc_r+0x5b0>
   8f61c:	008004c4 	movi	r2,19
   8f620:	1180592e 	bgeu	r2,r6,8f788 <_realloc_r+0x588>
   8f624:	80800017 	ldw	r2,0(r16)
   8f628:	b8800215 	stw	r2,8(r23)
   8f62c:	80800117 	ldw	r2,4(r16)
   8f630:	b8800315 	stw	r2,12(r23)
   8f634:	008006c4 	movi	r2,27
   8f638:	11806136 	bltu	r2,r6,8f7c0 <_realloc_r+0x5c0>
   8f63c:	b8800404 	addi	r2,r23,16
   8f640:	80c00204 	addi	r3,r16,8
   8f644:	19000017 	ldw	r4,0(r3)
   8f648:	11000015 	stw	r4,0(r2)
   8f64c:	19000117 	ldw	r4,4(r3)
   8f650:	11000115 	stw	r4,4(r2)
   8f654:	18c00217 	ldw	r3,8(r3)
   8f658:	10c00215 	stw	r3,8(r2)
   8f65c:	a447c83a 	sub	r3,r20,r17
   8f660:	bc45883a 	add	r2,r23,r17
   8f664:	18c00054 	ori	r3,r3,1
   8f668:	10c00115 	stw	r3,4(r2)
   8f66c:	b8c00117 	ldw	r3,4(r23)
   8f670:	e0800215 	stw	r2,8(fp)
   8f674:	a809883a 	mov	r4,r21
   8f678:	1880004c 	andi	r2,r3,1
   8f67c:	88a2b03a 	or	r17,r17,r2
   8f680:	bc400115 	stw	r17,4(r23)
   8f684:	00916640 	call	91664 <__malloc_unlock>
   8f688:	003f3c06 	br	8f37c <_realloc_r+0x17c>
   8f68c:	80c00217 	ldw	r3,8(r16)
   8f690:	90c00215 	stw	r3,8(r18)
   8f694:	80c00317 	ldw	r3,12(r16)
   8f698:	90c00315 	stw	r3,12(r18)
   8f69c:	30802426 	beq	r6,r2,8f730 <_realloc_r+0x530>
   8f6a0:	90800404 	addi	r2,r18,16
   8f6a4:	80c00404 	addi	r3,r16,16
   8f6a8:	003f6e06 	br	8f464 <_realloc_r+0x264>
   8f6ac:	953fff17 	ldw	r20,-4(r18)
   8f6b0:	00ffff04 	movi	r3,-4
   8f6b4:	a0e8703a 	and	r20,r20,r3
   8f6b8:	a4e9883a 	add	r20,r20,r19
   8f6bc:	003f2206 	br	8f348 <_realloc_r+0x148>
   8f6c0:	800b883a 	mov	r5,r16
   8f6c4:	9009883a 	mov	r4,r18
   8f6c8:	008e1300 	call	8e130 <memmove>
   8f6cc:	9021883a 	mov	r16,r18
   8f6d0:	b8800117 	ldw	r2,4(r23)
   8f6d4:	b82d883a 	mov	r22,r23
   8f6d8:	003f1b06 	br	8f348 <_realloc_r+0x148>
   8f6dc:	9005883a 	mov	r2,r18
   8f6e0:	8007883a 	mov	r3,r16
   8f6e4:	003f9206 	br	8f530 <_realloc_r+0x330>
   8f6e8:	800b883a 	mov	r5,r16
   8f6ec:	9009883a 	mov	r4,r18
   8f6f0:	d9c00015 	stw	r7,0(sp)
   8f6f4:	008e1300 	call	8e130 <memmove>
   8f6f8:	d9c00017 	ldw	r7,0(sp)
   8f6fc:	9021883a 	mov	r16,r18
   8f700:	b8800117 	ldw	r2,4(r23)
   8f704:	3829883a 	mov	r20,r7
   8f708:	b82d883a 	mov	r22,r23
   8f70c:	003f0e06 	br	8f348 <_realloc_r+0x148>
   8f710:	80800217 	ldw	r2,8(r16)
   8f714:	b8800415 	stw	r2,16(r23)
   8f718:	80800317 	ldw	r2,12(r16)
   8f71c:	b8800515 	stw	r2,20(r23)
   8f720:	31001226 	beq	r6,r4,8f76c <_realloc_r+0x56c>
   8f724:	b8800604 	addi	r2,r23,24
   8f728:	80c00404 	addi	r3,r16,16
   8f72c:	003f9606 	br	8f588 <_realloc_r+0x388>
   8f730:	81000417 	ldw	r4,16(r16)
   8f734:	90800604 	addi	r2,r18,24
   8f738:	80c00604 	addi	r3,r16,24
   8f73c:	91000415 	stw	r4,16(r18)
   8f740:	81000517 	ldw	r4,20(r16)
   8f744:	91000515 	stw	r4,20(r18)
   8f748:	003f4606 	br	8f464 <_realloc_r+0x264>
   8f74c:	80800217 	ldw	r2,8(r16)
   8f750:	b8800415 	stw	r2,16(r23)
   8f754:	80800317 	ldw	r2,12(r16)
   8f758:	b8800515 	stw	r2,20(r23)
   8f75c:	31000d26 	beq	r6,r4,8f794 <_realloc_r+0x594>
   8f760:	b8800604 	addi	r2,r23,24
   8f764:	80c00404 	addi	r3,r16,16
   8f768:	003f7106 	br	8f530 <_realloc_r+0x330>
   8f76c:	81000417 	ldw	r4,16(r16)
   8f770:	b8800804 	addi	r2,r23,32
   8f774:	80c00604 	addi	r3,r16,24
   8f778:	b9000615 	stw	r4,24(r23)
   8f77c:	81000517 	ldw	r4,20(r16)
   8f780:	b9000715 	stw	r4,28(r23)
   8f784:	003f8006 	br	8f588 <_realloc_r+0x388>
   8f788:	9005883a 	mov	r2,r18
   8f78c:	8007883a 	mov	r3,r16
   8f790:	003fac06 	br	8f644 <_realloc_r+0x444>
   8f794:	81000417 	ldw	r4,16(r16)
   8f798:	b8800804 	addi	r2,r23,32
   8f79c:	80c00604 	addi	r3,r16,24
   8f7a0:	b9000615 	stw	r4,24(r23)
   8f7a4:	81000517 	ldw	r4,20(r16)
   8f7a8:	b9000715 	stw	r4,28(r23)
   8f7ac:	003f6006 	br	8f530 <_realloc_r+0x330>
   8f7b0:	9009883a 	mov	r4,r18
   8f7b4:	800b883a 	mov	r5,r16
   8f7b8:	008e1300 	call	8e130 <memmove>
   8f7bc:	003fa706 	br	8f65c <_realloc_r+0x45c>
   8f7c0:	80800217 	ldw	r2,8(r16)
   8f7c4:	b8800415 	stw	r2,16(r23)
   8f7c8:	80800317 	ldw	r2,12(r16)
   8f7cc:	b8800515 	stw	r2,20(r23)
   8f7d0:	31000326 	beq	r6,r4,8f7e0 <_realloc_r+0x5e0>
   8f7d4:	b8800604 	addi	r2,r23,24
   8f7d8:	80c00404 	addi	r3,r16,16
   8f7dc:	003f9906 	br	8f644 <_realloc_r+0x444>
   8f7e0:	81000417 	ldw	r4,16(r16)
   8f7e4:	b8800804 	addi	r2,r23,32
   8f7e8:	80c00604 	addi	r3,r16,24
   8f7ec:	b9000615 	stw	r4,24(r23)
   8f7f0:	81000517 	ldw	r4,20(r16)
   8f7f4:	b9000715 	stw	r4,28(r23)
   8f7f8:	003f9206 	br	8f644 <_realloc_r+0x444>

0008f7fc <__isinfd>:
   8f7fc:	0105c83a 	sub	r2,zero,r4
   8f800:	1108b03a 	or	r4,r2,r4
   8f804:	2004d7fa 	srli	r2,r4,31
   8f808:	00e00034 	movhi	r3,32768
   8f80c:	18ffffc4 	addi	r3,r3,-1
   8f810:	28ca703a 	and	r5,r5,r3
   8f814:	1144b03a 	or	r2,r2,r5
   8f818:	00dffc34 	movhi	r3,32752
   8f81c:	1885c83a 	sub	r2,r3,r2
   8f820:	0087c83a 	sub	r3,zero,r2
   8f824:	1884b03a 	or	r2,r3,r2
   8f828:	1005d7fa 	srai	r2,r2,31
   8f82c:	10800044 	addi	r2,r2,1
   8f830:	f800283a 	ret

0008f834 <__sread>:
   8f834:	defffe04 	addi	sp,sp,-8
   8f838:	dc000015 	stw	r16,0(sp)
   8f83c:	2821883a 	mov	r16,r5
   8f840:	2940038f 	ldh	r5,14(r5)
   8f844:	dfc00115 	stw	ra,4(sp)
   8f848:	008fe2c0 	call	8fe2c <_read_r>
   8f84c:	10000716 	blt	r2,zero,8f86c <__sread+0x38>
   8f850:	80c01417 	ldw	r3,80(r16)
   8f854:	1887883a 	add	r3,r3,r2
   8f858:	80c01415 	stw	r3,80(r16)
   8f85c:	dfc00117 	ldw	ra,4(sp)
   8f860:	dc000017 	ldw	r16,0(sp)
   8f864:	dec00204 	addi	sp,sp,8
   8f868:	f800283a 	ret
   8f86c:	80c0030b 	ldhu	r3,12(r16)
   8f870:	18fbffcc 	andi	r3,r3,61439
   8f874:	80c0030d 	sth	r3,12(r16)
   8f878:	dfc00117 	ldw	ra,4(sp)
   8f87c:	dc000017 	ldw	r16,0(sp)
   8f880:	dec00204 	addi	sp,sp,8
   8f884:	f800283a 	ret

0008f888 <__swrite>:
   8f888:	2880030b 	ldhu	r2,12(r5)
   8f88c:	defffb04 	addi	sp,sp,-20
   8f890:	dcc00315 	stw	r19,12(sp)
   8f894:	10c0400c 	andi	r3,r2,256
   8f898:	18ffffcc 	andi	r3,r3,65535
   8f89c:	18e0001c 	xori	r3,r3,32768
   8f8a0:	dc800215 	stw	r18,8(sp)
   8f8a4:	dc400115 	stw	r17,4(sp)
   8f8a8:	dc000015 	stw	r16,0(sp)
   8f8ac:	dfc00415 	stw	ra,16(sp)
   8f8b0:	18e00004 	addi	r3,r3,-32768
   8f8b4:	2821883a 	mov	r16,r5
   8f8b8:	2027883a 	mov	r19,r4
   8f8bc:	3025883a 	mov	r18,r6
   8f8c0:	3823883a 	mov	r17,r7
   8f8c4:	18000526 	beq	r3,zero,8f8dc <__swrite+0x54>
   8f8c8:	2940038f 	ldh	r5,14(r5)
   8f8cc:	000d883a 	mov	r6,zero
   8f8d0:	01c00084 	movi	r7,2
   8f8d4:	008fdc00 	call	8fdc0 <_lseek_r>
   8f8d8:	8080030b 	ldhu	r2,12(r16)
   8f8dc:	8140038f 	ldh	r5,14(r16)
   8f8e0:	10bbffcc 	andi	r2,r2,61439
   8f8e4:	9809883a 	mov	r4,r19
   8f8e8:	900d883a 	mov	r6,r18
   8f8ec:	880f883a 	mov	r7,r17
   8f8f0:	8080030d 	sth	r2,12(r16)
   8f8f4:	dfc00417 	ldw	ra,16(sp)
   8f8f8:	dcc00317 	ldw	r19,12(sp)
   8f8fc:	dc800217 	ldw	r18,8(sp)
   8f900:	dc400117 	ldw	r17,4(sp)
   8f904:	dc000017 	ldw	r16,0(sp)
   8f908:	dec00504 	addi	sp,sp,20
   8f90c:	008fa181 	jmpi	8fa18 <_write_r>

0008f910 <__sseek>:
   8f910:	defffe04 	addi	sp,sp,-8
   8f914:	dc000015 	stw	r16,0(sp)
   8f918:	2821883a 	mov	r16,r5
   8f91c:	2940038f 	ldh	r5,14(r5)
   8f920:	dfc00115 	stw	ra,4(sp)
   8f924:	008fdc00 	call	8fdc0 <_lseek_r>
   8f928:	00ffffc4 	movi	r3,-1
   8f92c:	10c00826 	beq	r2,r3,8f950 <__sseek+0x40>
   8f930:	80c0030b 	ldhu	r3,12(r16)
   8f934:	80801415 	stw	r2,80(r16)
   8f938:	18c40014 	ori	r3,r3,4096
   8f93c:	80c0030d 	sth	r3,12(r16)
   8f940:	dfc00117 	ldw	ra,4(sp)
   8f944:	dc000017 	ldw	r16,0(sp)
   8f948:	dec00204 	addi	sp,sp,8
   8f94c:	f800283a 	ret
   8f950:	80c0030b 	ldhu	r3,12(r16)
   8f954:	18fbffcc 	andi	r3,r3,61439
   8f958:	80c0030d 	sth	r3,12(r16)
   8f95c:	dfc00117 	ldw	ra,4(sp)
   8f960:	dc000017 	ldw	r16,0(sp)
   8f964:	dec00204 	addi	sp,sp,8
   8f968:	f800283a 	ret

0008f96c <__sclose>:
   8f96c:	2940038f 	ldh	r5,14(r5)
   8f970:	008fb401 	jmpi	8fb40 <_close_r>

0008f974 <strcmp>:
   8f974:	2904b03a 	or	r2,r5,r4
   8f978:	108000cc 	andi	r2,r2,3
   8f97c:	1000171e 	bne	r2,zero,8f9dc <strcmp+0x68>
   8f980:	20800017 	ldw	r2,0(r4)
   8f984:	28c00017 	ldw	r3,0(r5)
   8f988:	10c0141e 	bne	r2,r3,8f9dc <strcmp+0x68>
   8f98c:	027fbff4 	movhi	r9,65279
   8f990:	4a7fbfc4 	addi	r9,r9,-257
   8f994:	1247883a 	add	r3,r2,r9
   8f998:	0084303a 	nor	r2,zero,r2
   8f99c:	1884703a 	and	r2,r3,r2
   8f9a0:	02202074 	movhi	r8,32897
   8f9a4:	42202004 	addi	r8,r8,-32640
   8f9a8:	1204703a 	and	r2,r2,r8
   8f9ac:	10000226 	beq	r2,zero,8f9b8 <strcmp+0x44>
   8f9b0:	00001706 	br	8fa10 <strcmp+0x9c>
   8f9b4:	3000161e 	bne	r6,zero,8fa10 <strcmp+0x9c>
   8f9b8:	21000104 	addi	r4,r4,4
   8f9bc:	20800017 	ldw	r2,0(r4)
   8f9c0:	29400104 	addi	r5,r5,4
   8f9c4:	28c00017 	ldw	r3,0(r5)
   8f9c8:	124f883a 	add	r7,r2,r9
   8f9cc:	008c303a 	nor	r6,zero,r2
   8f9d0:	398c703a 	and	r6,r7,r6
   8f9d4:	320c703a 	and	r6,r6,r8
   8f9d8:	10fff626 	beq	r2,r3,8f9b4 <strcmp+0x40>
   8f9dc:	20800007 	ldb	r2,0(r4)
   8f9e0:	1000051e 	bne	r2,zero,8f9f8 <strcmp+0x84>
   8f9e4:	00000606 	br	8fa00 <strcmp+0x8c>
   8f9e8:	21000044 	addi	r4,r4,1
   8f9ec:	20800007 	ldb	r2,0(r4)
   8f9f0:	29400044 	addi	r5,r5,1
   8f9f4:	10000226 	beq	r2,zero,8fa00 <strcmp+0x8c>
   8f9f8:	28c00007 	ldb	r3,0(r5)
   8f9fc:	10fffa26 	beq	r2,r3,8f9e8 <strcmp+0x74>
   8fa00:	20c00003 	ldbu	r3,0(r4)
   8fa04:	28800003 	ldbu	r2,0(r5)
   8fa08:	1885c83a 	sub	r2,r3,r2
   8fa0c:	f800283a 	ret
   8fa10:	0005883a 	mov	r2,zero
   8fa14:	f800283a 	ret

0008fa18 <_write_r>:
   8fa18:	defffd04 	addi	sp,sp,-12
   8fa1c:	dc400115 	stw	r17,4(sp)
   8fa20:	dc000015 	stw	r16,0(sp)
   8fa24:	2023883a 	mov	r17,r4
   8fa28:	040002f4 	movhi	r16,11
   8fa2c:	8411e504 	addi	r16,r16,18324
   8fa30:	2809883a 	mov	r4,r5
   8fa34:	300b883a 	mov	r5,r6
   8fa38:	380d883a 	mov	r6,r7
   8fa3c:	dfc00215 	stw	ra,8(sp)
   8fa40:	80000015 	stw	zero,0(r16)
   8fa44:	0091af00 	call	91af0 <write>
   8fa48:	00ffffc4 	movi	r3,-1
   8fa4c:	10c00526 	beq	r2,r3,8fa64 <_write_r+0x4c>
   8fa50:	dfc00217 	ldw	ra,8(sp)
   8fa54:	dc400117 	ldw	r17,4(sp)
   8fa58:	dc000017 	ldw	r16,0(sp)
   8fa5c:	dec00304 	addi	sp,sp,12
   8fa60:	f800283a 	ret
   8fa64:	80c00017 	ldw	r3,0(r16)
   8fa68:	183ff926 	beq	r3,zero,8fa50 <_write_r+0x38>
   8fa6c:	88c00015 	stw	r3,0(r17)
   8fa70:	dfc00217 	ldw	ra,8(sp)
   8fa74:	dc400117 	ldw	r17,4(sp)
   8fa78:	dc000017 	ldw	r16,0(sp)
   8fa7c:	dec00304 	addi	sp,sp,12
   8fa80:	f800283a 	ret

0008fa84 <_calloc_r>:
   8fa84:	314b383a 	mul	r5,r6,r5
   8fa88:	defffe04 	addi	sp,sp,-8
   8fa8c:	dc000015 	stw	r16,0(sp)
   8fa90:	dfc00115 	stw	ra,4(sp)
   8fa94:	00889000 	call	88900 <_malloc_r>
   8fa98:	1021883a 	mov	r16,r2
   8fa9c:	10000c26 	beq	r2,zero,8fad0 <_calloc_r+0x4c>
   8faa0:	11bfff17 	ldw	r6,-4(r2)
   8faa4:	00ffff04 	movi	r3,-4
   8faa8:	00800904 	movi	r2,36
   8faac:	30cc703a 	and	r6,r6,r3
   8fab0:	30cd883a 	add	r6,r6,r3
   8fab4:	11801436 	bltu	r2,r6,8fb08 <_calloc_r+0x84>
   8fab8:	00c004c4 	movi	r3,19
   8fabc:	19800936 	bltu	r3,r6,8fae4 <_calloc_r+0x60>
   8fac0:	8005883a 	mov	r2,r16
   8fac4:	10000015 	stw	zero,0(r2)
   8fac8:	10000115 	stw	zero,4(r2)
   8facc:	10000215 	stw	zero,8(r2)
   8fad0:	8005883a 	mov	r2,r16
   8fad4:	dfc00117 	ldw	ra,4(sp)
   8fad8:	dc000017 	ldw	r16,0(sp)
   8fadc:	dec00204 	addi	sp,sp,8
   8fae0:	f800283a 	ret
   8fae4:	80000015 	stw	zero,0(r16)
   8fae8:	80000115 	stw	zero,4(r16)
   8faec:	00c006c4 	movi	r3,27
   8faf0:	19800d2e 	bgeu	r3,r6,8fb28 <_calloc_r+0xa4>
   8faf4:	80000215 	stw	zero,8(r16)
   8faf8:	80000315 	stw	zero,12(r16)
   8fafc:	30800c26 	beq	r6,r2,8fb30 <_calloc_r+0xac>
   8fb00:	80800404 	addi	r2,r16,16
   8fb04:	003fef06 	br	8fac4 <_calloc_r+0x40>
   8fb08:	8009883a 	mov	r4,r16
   8fb0c:	000b883a 	mov	r5,zero
   8fb10:	008917c0 	call	8917c <memset>
   8fb14:	8005883a 	mov	r2,r16
   8fb18:	dfc00117 	ldw	ra,4(sp)
   8fb1c:	dc000017 	ldw	r16,0(sp)
   8fb20:	dec00204 	addi	sp,sp,8
   8fb24:	f800283a 	ret
   8fb28:	80800204 	addi	r2,r16,8
   8fb2c:	003fe506 	br	8fac4 <_calloc_r+0x40>
   8fb30:	80000415 	stw	zero,16(r16)
   8fb34:	80000515 	stw	zero,20(r16)
   8fb38:	80800604 	addi	r2,r16,24
   8fb3c:	003fe106 	br	8fac4 <_calloc_r+0x40>

0008fb40 <_close_r>:
   8fb40:	defffd04 	addi	sp,sp,-12
   8fb44:	dc400115 	stw	r17,4(sp)
   8fb48:	dc000015 	stw	r16,0(sp)
   8fb4c:	2023883a 	mov	r17,r4
   8fb50:	040002f4 	movhi	r16,11
   8fb54:	8411e504 	addi	r16,r16,18324
   8fb58:	2809883a 	mov	r4,r5
   8fb5c:	dfc00215 	stw	ra,8(sp)
   8fb60:	80000015 	stw	zero,0(r16)
   8fb64:	0090e180 	call	90e18 <close>
   8fb68:	00ffffc4 	movi	r3,-1
   8fb6c:	10c00526 	beq	r2,r3,8fb84 <_close_r+0x44>
   8fb70:	dfc00217 	ldw	ra,8(sp)
   8fb74:	dc400117 	ldw	r17,4(sp)
   8fb78:	dc000017 	ldw	r16,0(sp)
   8fb7c:	dec00304 	addi	sp,sp,12
   8fb80:	f800283a 	ret
   8fb84:	80c00017 	ldw	r3,0(r16)
   8fb88:	183ff926 	beq	r3,zero,8fb70 <_close_r+0x30>
   8fb8c:	88c00015 	stw	r3,0(r17)
   8fb90:	dfc00217 	ldw	ra,8(sp)
   8fb94:	dc400117 	ldw	r17,4(sp)
   8fb98:	dc000017 	ldw	r16,0(sp)
   8fb9c:	dec00304 	addi	sp,sp,12
   8fba0:	f800283a 	ret

0008fba4 <_fclose_r>:
   8fba4:	defffc04 	addi	sp,sp,-16
   8fba8:	dc400115 	stw	r17,4(sp)
   8fbac:	dc000015 	stw	r16,0(sp)
   8fbb0:	dfc00315 	stw	ra,12(sp)
   8fbb4:	dc800215 	stw	r18,8(sp)
   8fbb8:	2821883a 	mov	r16,r5
   8fbbc:	2023883a 	mov	r17,r4
   8fbc0:	28003426 	beq	r5,zero,8fc94 <_fclose_r+0xf0>
   8fbc4:	008d3240 	call	8d324 <__sfp_lock_acquire>
   8fbc8:	88000226 	beq	r17,zero,8fbd4 <_fclose_r+0x30>
   8fbcc:	88800e17 	ldw	r2,56(r17)
   8fbd0:	10003826 	beq	r2,zero,8fcb4 <_fclose_r+0x110>
   8fbd4:	8080030f 	ldh	r2,12(r16)
   8fbd8:	10002526 	beq	r2,zero,8fc70 <_fclose_r+0xcc>
   8fbdc:	8809883a 	mov	r4,r17
   8fbe0:	800b883a 	mov	r5,r16
   8fbe4:	008ce740 	call	8ce74 <_fflush_r>
   8fbe8:	1025883a 	mov	r18,r2
   8fbec:	80800b17 	ldw	r2,44(r16)
   8fbf0:	10000426 	beq	r2,zero,8fc04 <_fclose_r+0x60>
   8fbf4:	81400717 	ldw	r5,28(r16)
   8fbf8:	8809883a 	mov	r4,r17
   8fbfc:	103ee83a 	callr	r2
   8fc00:	10003516 	blt	r2,zero,8fcd8 <_fclose_r+0x134>
   8fc04:	8080030b 	ldhu	r2,12(r16)
   8fc08:	1080200c 	andi	r2,r2,128
   8fc0c:	10bfffcc 	andi	r2,r2,65535
   8fc10:	10a0001c 	xori	r2,r2,32768
   8fc14:	10a00004 	addi	r2,r2,-32768
   8fc18:	10002b1e 	bne	r2,zero,8fcc8 <_fclose_r+0x124>
   8fc1c:	81400c17 	ldw	r5,48(r16)
   8fc20:	28000526 	beq	r5,zero,8fc38 <_fclose_r+0x94>
   8fc24:	80801004 	addi	r2,r16,64
   8fc28:	28800226 	beq	r5,r2,8fc34 <_fclose_r+0x90>
   8fc2c:	8809883a 	mov	r4,r17
   8fc30:	008d4a00 	call	8d4a0 <_free_r>
   8fc34:	80000c15 	stw	zero,48(r16)
   8fc38:	81401117 	ldw	r5,68(r16)
   8fc3c:	28000326 	beq	r5,zero,8fc4c <_fclose_r+0xa8>
   8fc40:	8809883a 	mov	r4,r17
   8fc44:	008d4a00 	call	8d4a0 <_free_r>
   8fc48:	80001115 	stw	zero,68(r16)
   8fc4c:	8000030d 	sth	zero,12(r16)
   8fc50:	008d3280 	call	8d328 <__sfp_lock_release>
   8fc54:	9005883a 	mov	r2,r18
   8fc58:	dfc00317 	ldw	ra,12(sp)
   8fc5c:	dc800217 	ldw	r18,8(sp)
   8fc60:	dc400117 	ldw	r17,4(sp)
   8fc64:	dc000017 	ldw	r16,0(sp)
   8fc68:	dec00404 	addi	sp,sp,16
   8fc6c:	f800283a 	ret
   8fc70:	008d3280 	call	8d328 <__sfp_lock_release>
   8fc74:	0025883a 	mov	r18,zero
   8fc78:	9005883a 	mov	r2,r18
   8fc7c:	dfc00317 	ldw	ra,12(sp)
   8fc80:	dc800217 	ldw	r18,8(sp)
   8fc84:	dc400117 	ldw	r17,4(sp)
   8fc88:	dc000017 	ldw	r16,0(sp)
   8fc8c:	dec00404 	addi	sp,sp,16
   8fc90:	f800283a 	ret
   8fc94:	0025883a 	mov	r18,zero
   8fc98:	9005883a 	mov	r2,r18
   8fc9c:	dfc00317 	ldw	ra,12(sp)
   8fca0:	dc800217 	ldw	r18,8(sp)
   8fca4:	dc400117 	ldw	r17,4(sp)
   8fca8:	dc000017 	ldw	r16,0(sp)
   8fcac:	dec00404 	addi	sp,sp,16
   8fcb0:	f800283a 	ret
   8fcb4:	8809883a 	mov	r4,r17
   8fcb8:	008d11c0 	call	8d11c <__sinit>
   8fcbc:	8080030f 	ldh	r2,12(r16)
   8fcc0:	103fc61e 	bne	r2,zero,8fbdc <_fclose_r+0x38>
   8fcc4:	003fea06 	br	8fc70 <_fclose_r+0xcc>
   8fcc8:	81400417 	ldw	r5,16(r16)
   8fccc:	8809883a 	mov	r4,r17
   8fcd0:	008d4a00 	call	8d4a0 <_free_r>
   8fcd4:	003fd106 	br	8fc1c <_fclose_r+0x78>
   8fcd8:	04bfffc4 	movi	r18,-1
   8fcdc:	003fc906 	br	8fc04 <_fclose_r+0x60>

0008fce0 <fclose>:
   8fce0:	008002f4 	movhi	r2,11
   8fce4:	10844f04 	addi	r2,r2,4412
   8fce8:	200b883a 	mov	r5,r4
   8fcec:	11000017 	ldw	r4,0(r2)
   8fcf0:	008fba41 	jmpi	8fba4 <_fclose_r>

0008fcf4 <_fstat_r>:
   8fcf4:	defffd04 	addi	sp,sp,-12
   8fcf8:	dc400115 	stw	r17,4(sp)
   8fcfc:	dc000015 	stw	r16,0(sp)
   8fd00:	2023883a 	mov	r17,r4
   8fd04:	040002f4 	movhi	r16,11
   8fd08:	8411e504 	addi	r16,r16,18324
   8fd0c:	2809883a 	mov	r4,r5
   8fd10:	300b883a 	mov	r5,r6
   8fd14:	dfc00215 	stw	ra,8(sp)
   8fd18:	80000015 	stw	zero,0(r16)
   8fd1c:	0090f5c0 	call	90f5c <fstat>
   8fd20:	00ffffc4 	movi	r3,-1
   8fd24:	10c00526 	beq	r2,r3,8fd3c <_fstat_r+0x48>
   8fd28:	dfc00217 	ldw	ra,8(sp)
   8fd2c:	dc400117 	ldw	r17,4(sp)
   8fd30:	dc000017 	ldw	r16,0(sp)
   8fd34:	dec00304 	addi	sp,sp,12
   8fd38:	f800283a 	ret
   8fd3c:	80c00017 	ldw	r3,0(r16)
   8fd40:	183ff926 	beq	r3,zero,8fd28 <_fstat_r+0x34>
   8fd44:	88c00015 	stw	r3,0(r17)
   8fd48:	dfc00217 	ldw	ra,8(sp)
   8fd4c:	dc400117 	ldw	r17,4(sp)
   8fd50:	dc000017 	ldw	r16,0(sp)
   8fd54:	dec00304 	addi	sp,sp,12
   8fd58:	f800283a 	ret

0008fd5c <_isatty_r>:
   8fd5c:	defffd04 	addi	sp,sp,-12
   8fd60:	dc400115 	stw	r17,4(sp)
   8fd64:	dc000015 	stw	r16,0(sp)
   8fd68:	2023883a 	mov	r17,r4
   8fd6c:	040002f4 	movhi	r16,11
   8fd70:	8411e504 	addi	r16,r16,18324
   8fd74:	2809883a 	mov	r4,r5
   8fd78:	dfc00215 	stw	ra,8(sp)
   8fd7c:	80000015 	stw	zero,0(r16)
   8fd80:	00913200 	call	91320 <isatty>
   8fd84:	00ffffc4 	movi	r3,-1
   8fd88:	10c00526 	beq	r2,r3,8fda0 <_isatty_r+0x44>
   8fd8c:	dfc00217 	ldw	ra,8(sp)
   8fd90:	dc400117 	ldw	r17,4(sp)
   8fd94:	dc000017 	ldw	r16,0(sp)
   8fd98:	dec00304 	addi	sp,sp,12
   8fd9c:	f800283a 	ret
   8fda0:	80c00017 	ldw	r3,0(r16)
   8fda4:	183ff926 	beq	r3,zero,8fd8c <_isatty_r+0x30>
   8fda8:	88c00015 	stw	r3,0(r17)
   8fdac:	dfc00217 	ldw	ra,8(sp)
   8fdb0:	dc400117 	ldw	r17,4(sp)
   8fdb4:	dc000017 	ldw	r16,0(sp)
   8fdb8:	dec00304 	addi	sp,sp,12
   8fdbc:	f800283a 	ret

0008fdc0 <_lseek_r>:
   8fdc0:	defffd04 	addi	sp,sp,-12
   8fdc4:	dc400115 	stw	r17,4(sp)
   8fdc8:	dc000015 	stw	r16,0(sp)
   8fdcc:	2023883a 	mov	r17,r4
   8fdd0:	040002f4 	movhi	r16,11
   8fdd4:	8411e504 	addi	r16,r16,18324
   8fdd8:	2809883a 	mov	r4,r5
   8fddc:	300b883a 	mov	r5,r6
   8fde0:	380d883a 	mov	r6,r7
   8fde4:	dfc00215 	stw	ra,8(sp)
   8fde8:	80000015 	stw	zero,0(r16)
   8fdec:	00914fc0 	call	914fc <lseek>
   8fdf0:	00ffffc4 	movi	r3,-1
   8fdf4:	10c00526 	beq	r2,r3,8fe0c <_lseek_r+0x4c>
   8fdf8:	dfc00217 	ldw	ra,8(sp)
   8fdfc:	dc400117 	ldw	r17,4(sp)
   8fe00:	dc000017 	ldw	r16,0(sp)
   8fe04:	dec00304 	addi	sp,sp,12
   8fe08:	f800283a 	ret
   8fe0c:	80c00017 	ldw	r3,0(r16)
   8fe10:	183ff926 	beq	r3,zero,8fdf8 <_lseek_r+0x38>
   8fe14:	88c00015 	stw	r3,0(r17)
   8fe18:	dfc00217 	ldw	ra,8(sp)
   8fe1c:	dc400117 	ldw	r17,4(sp)
   8fe20:	dc000017 	ldw	r16,0(sp)
   8fe24:	dec00304 	addi	sp,sp,12
   8fe28:	f800283a 	ret

0008fe2c <_read_r>:
   8fe2c:	defffd04 	addi	sp,sp,-12
   8fe30:	dc400115 	stw	r17,4(sp)
   8fe34:	dc000015 	stw	r16,0(sp)
   8fe38:	2023883a 	mov	r17,r4
   8fe3c:	040002f4 	movhi	r16,11
   8fe40:	8411e504 	addi	r16,r16,18324
   8fe44:	2809883a 	mov	r4,r5
   8fe48:	300b883a 	mov	r5,r6
   8fe4c:	380d883a 	mov	r6,r7
   8fe50:	dfc00215 	stw	ra,8(sp)
   8fe54:	80000015 	stw	zero,0(r16)
   8fe58:	00916d40 	call	916d4 <read>
   8fe5c:	00ffffc4 	movi	r3,-1
   8fe60:	10c00526 	beq	r2,r3,8fe78 <_read_r+0x4c>
   8fe64:	dfc00217 	ldw	ra,8(sp)
   8fe68:	dc400117 	ldw	r17,4(sp)
   8fe6c:	dc000017 	ldw	r16,0(sp)
   8fe70:	dec00304 	addi	sp,sp,12
   8fe74:	f800283a 	ret
   8fe78:	80c00017 	ldw	r3,0(r16)
   8fe7c:	183ff926 	beq	r3,zero,8fe64 <_read_r+0x38>
   8fe80:	88c00015 	stw	r3,0(r17)
   8fe84:	dfc00217 	ldw	ra,8(sp)
   8fe88:	dc400117 	ldw	r17,4(sp)
   8fe8c:	dc000017 	ldw	r16,0(sp)
   8fe90:	dec00304 	addi	sp,sp,12
   8fe94:	f800283a 	ret

0008fe98 <__udivdi3>:
   8fe98:	defff504 	addi	sp,sp,-44
   8fe9c:	dd000515 	stw	r20,20(sp)
   8fea0:	dcc00415 	stw	r19,16(sp)
   8fea4:	dc800315 	stw	r18,12(sp)
   8fea8:	dc400215 	stw	r17,8(sp)
   8feac:	dc000115 	stw	r16,4(sp)
   8feb0:	dfc00a15 	stw	ra,40(sp)
   8feb4:	df000915 	stw	fp,36(sp)
   8feb8:	ddc00815 	stw	r23,32(sp)
   8febc:	dd800715 	stw	r22,28(sp)
   8fec0:	dd400615 	stw	r21,24(sp)
   8fec4:	2025883a 	mov	r18,r4
   8fec8:	2823883a 	mov	r17,r5
   8fecc:	3021883a 	mov	r16,r6
   8fed0:	2027883a 	mov	r19,r4
   8fed4:	2829883a 	mov	r20,r5
   8fed8:	3800401e 	bne	r7,zero,8ffdc <__udivdi3+0x144>
   8fedc:	2980602e 	bgeu	r5,r6,90060 <__udivdi3+0x1c8>
   8fee0:	00bfffd4 	movui	r2,65535
   8fee4:	1180aa36 	bltu	r2,r6,90190 <__udivdi3+0x2f8>
   8fee8:	00803fc4 	movi	r2,255
   8feec:	11814436 	bltu	r2,r6,90400 <__udivdi3+0x568>
   8fef0:	0005883a 	mov	r2,zero
   8fef4:	0007883a 	mov	r3,zero
   8fef8:	3084d83a 	srl	r2,r6,r2
   8fefc:	010002f4 	movhi	r4,11
   8ff00:	21361604 	addi	r4,r4,-10152
   8ff04:	2085883a 	add	r2,r4,r2
   8ff08:	10800003 	ldbu	r2,0(r2)
   8ff0c:	10c7883a 	add	r3,r2,r3
   8ff10:	00800804 	movi	r2,32
   8ff14:	10c5c83a 	sub	r2,r2,r3
   8ff18:	10000526 	beq	r2,zero,8ff30 <__udivdi3+0x98>
   8ff1c:	88a2983a 	sll	r17,r17,r2
   8ff20:	90c6d83a 	srl	r3,r18,r3
   8ff24:	30a0983a 	sll	r16,r6,r2
   8ff28:	90a6983a 	sll	r19,r18,r2
   8ff2c:	88e8b03a 	or	r20,r17,r3
   8ff30:	8022d43a 	srli	r17,r16,16
   8ff34:	a009883a 	mov	r4,r20
   8ff38:	857fffcc 	andi	r21,r16,65535
   8ff3c:	880b883a 	mov	r5,r17
   8ff40:	00883340 	call	88334 <__umodsi3>
   8ff44:	a009883a 	mov	r4,r20
   8ff48:	880b883a 	mov	r5,r17
   8ff4c:	102d883a 	mov	r22,r2
   8ff50:	008832c0 	call	8832c <__udivsi3>
   8ff54:	b02c943a 	slli	r22,r22,16
   8ff58:	9806d43a 	srli	r3,r19,16
   8ff5c:	1549383a 	mul	r4,r2,r21
   8ff60:	1025883a 	mov	r18,r2
   8ff64:	b0c6b03a 	or	r3,r22,r3
   8ff68:	1900052e 	bgeu	r3,r4,8ff80 <__udivdi3+0xe8>
   8ff6c:	1c07883a 	add	r3,r3,r16
   8ff70:	10bfffc4 	addi	r2,r2,-1
   8ff74:	1c000136 	bltu	r3,r16,8ff7c <__udivdi3+0xe4>
   8ff78:	19013636 	bltu	r3,r4,90454 <__udivdi3+0x5bc>
   8ff7c:	1025883a 	mov	r18,r2
   8ff80:	1929c83a 	sub	r20,r3,r4
   8ff84:	a009883a 	mov	r4,r20
   8ff88:	880b883a 	mov	r5,r17
   8ff8c:	00883340 	call	88334 <__umodsi3>
   8ff90:	102d883a 	mov	r22,r2
   8ff94:	a009883a 	mov	r4,r20
   8ff98:	880b883a 	mov	r5,r17
   8ff9c:	008832c0 	call	8832c <__udivsi3>
   8ffa0:	b02c943a 	slli	r22,r22,16
   8ffa4:	156b383a 	mul	r21,r2,r21
   8ffa8:	9cffffcc 	andi	r19,r19,65535
   8ffac:	b4e6b03a 	or	r19,r22,r19
   8ffb0:	1009883a 	mov	r4,r2
   8ffb4:	9d40052e 	bgeu	r19,r21,8ffcc <__udivdi3+0x134>
   8ffb8:	9c27883a 	add	r19,r19,r16
   8ffbc:	10bfffc4 	addi	r2,r2,-1
   8ffc0:	9c00f736 	bltu	r19,r16,903a0 <__udivdi3+0x508>
   8ffc4:	9d40f62e 	bgeu	r19,r21,903a0 <__udivdi3+0x508>
   8ffc8:	213fff84 	addi	r4,r4,-2
   8ffcc:	9004943a 	slli	r2,r18,16
   8ffd0:	0007883a 	mov	r3,zero
   8ffd4:	2084b03a 	or	r2,r4,r2
   8ffd8:	00001506 	br	90030 <__udivdi3+0x198>
   8ffdc:	29c06536 	bltu	r5,r7,90174 <__udivdi3+0x2dc>
   8ffe0:	00bfffd4 	movui	r2,65535
   8ffe4:	11c0652e 	bgeu	r2,r7,9017c <__udivdi3+0x2e4>
   8ffe8:	00804034 	movhi	r2,256
   8ffec:	10bfffc4 	addi	r2,r2,-1
   8fff0:	11c0f736 	bltu	r2,r7,903d0 <__udivdi3+0x538>
   8fff4:	00c00404 	movi	r3,16
   8fff8:	180b883a 	mov	r5,r3
   8fffc:	38c6d83a 	srl	r3,r7,r3
   90000:	010002f4 	movhi	r4,11
   90004:	21361604 	addi	r4,r4,-10152
   90008:	04000804 	movi	r16,32
   9000c:	20c7883a 	add	r3,r4,r3
   90010:	18800003 	ldbu	r2,0(r3)
   90014:	1145883a 	add	r2,r2,r5
   90018:	80a1c83a 	sub	r16,r16,r2
   9001c:	8000691e 	bne	r16,zero,901c4 <__udivdi3+0x32c>
   90020:	0007883a 	mov	r3,zero
   90024:	3c406536 	bltu	r7,r17,901bc <__udivdi3+0x324>
   90028:	9180642e 	bgeu	r18,r6,901bc <__udivdi3+0x324>
   9002c:	0005883a 	mov	r2,zero
   90030:	dfc00a17 	ldw	ra,40(sp)
   90034:	df000917 	ldw	fp,36(sp)
   90038:	ddc00817 	ldw	r23,32(sp)
   9003c:	dd800717 	ldw	r22,28(sp)
   90040:	dd400617 	ldw	r21,24(sp)
   90044:	dd000517 	ldw	r20,20(sp)
   90048:	dcc00417 	ldw	r19,16(sp)
   9004c:	dc800317 	ldw	r18,12(sp)
   90050:	dc400217 	ldw	r17,8(sp)
   90054:	dc000117 	ldw	r16,4(sp)
   90058:	dec00b04 	addi	sp,sp,44
   9005c:	f800283a 	ret
   90060:	3000041e 	bne	r6,zero,90074 <__udivdi3+0x1dc>
   90064:	01000044 	movi	r4,1
   90068:	000b883a 	mov	r5,zero
   9006c:	008832c0 	call	8832c <__udivsi3>
   90070:	1021883a 	mov	r16,r2
   90074:	00bfffd4 	movui	r2,65535
   90078:	14004b2e 	bgeu	r2,r16,901a8 <__udivdi3+0x310>
   9007c:	00804034 	movhi	r2,256
   90080:	10bfffc4 	addi	r2,r2,-1
   90084:	1400d836 	bltu	r2,r16,903e8 <__udivdi3+0x550>
   90088:	00800404 	movi	r2,16
   9008c:	1007883a 	mov	r3,r2
   90090:	8084d83a 	srl	r2,r16,r2
   90094:	010002f4 	movhi	r4,11
   90098:	21361604 	addi	r4,r4,-10152
   9009c:	2085883a 	add	r2,r4,r2
   900a0:	10800003 	ldbu	r2,0(r2)
   900a4:	10c7883a 	add	r3,r2,r3
   900a8:	00800804 	movi	r2,32
   900ac:	10c5c83a 	sub	r2,r2,r3
   900b0:	1000891e 	bne	r2,zero,902d8 <__udivdi3+0x440>
   900b4:	8028d43a 	srli	r20,r16,16
   900b8:	8c23c83a 	sub	r17,r17,r16
   900bc:	84bfffcc 	andi	r18,r16,65535
   900c0:	00c00044 	movi	r3,1
   900c4:	8809883a 	mov	r4,r17
   900c8:	a00b883a 	mov	r5,r20
   900cc:	d8c00015 	stw	r3,0(sp)
   900d0:	00883340 	call	88334 <__umodsi3>
   900d4:	8809883a 	mov	r4,r17
   900d8:	a00b883a 	mov	r5,r20
   900dc:	102b883a 	mov	r21,r2
   900e0:	008832c0 	call	8832c <__udivsi3>
   900e4:	a82a943a 	slli	r21,r21,16
   900e8:	9808d43a 	srli	r4,r19,16
   900ec:	148b383a 	mul	r5,r2,r18
   900f0:	1023883a 	mov	r17,r2
   900f4:	a908b03a 	or	r4,r21,r4
   900f8:	d8c00017 	ldw	r3,0(sp)
   900fc:	2140052e 	bgeu	r4,r5,90114 <__udivdi3+0x27c>
   90100:	2409883a 	add	r4,r4,r16
   90104:	10bfffc4 	addi	r2,r2,-1
   90108:	24000136 	bltu	r4,r16,90110 <__udivdi3+0x278>
   9010c:	2140ce36 	bltu	r4,r5,90448 <__udivdi3+0x5b0>
   90110:	1023883a 	mov	r17,r2
   90114:	216bc83a 	sub	r21,r4,r5
   90118:	a809883a 	mov	r4,r21
   9011c:	a00b883a 	mov	r5,r20
   90120:	d8c00015 	stw	r3,0(sp)
   90124:	00883340 	call	88334 <__umodsi3>
   90128:	102d883a 	mov	r22,r2
   9012c:	a809883a 	mov	r4,r21
   90130:	a00b883a 	mov	r5,r20
   90134:	008832c0 	call	8832c <__udivsi3>
   90138:	b02c943a 	slli	r22,r22,16
   9013c:	14a5383a 	mul	r18,r2,r18
   90140:	9cffffcc 	andi	r19,r19,65535
   90144:	b4e6b03a 	or	r19,r22,r19
   90148:	1009883a 	mov	r4,r2
   9014c:	d8c00017 	ldw	r3,0(sp)
   90150:	9c80052e 	bgeu	r19,r18,90168 <__udivdi3+0x2d0>
   90154:	9c27883a 	add	r19,r19,r16
   90158:	10bfffc4 	addi	r2,r2,-1
   9015c:	9c009236 	bltu	r19,r16,903a8 <__udivdi3+0x510>
   90160:	9c80912e 	bgeu	r19,r18,903a8 <__udivdi3+0x510>
   90164:	213fff84 	addi	r4,r4,-2
   90168:	8804943a 	slli	r2,r17,16
   9016c:	2084b03a 	or	r2,r4,r2
   90170:	003faf06 	br	90030 <__udivdi3+0x198>
   90174:	0007883a 	mov	r3,zero
   90178:	003fac06 	br	9002c <__udivdi3+0x194>
   9017c:	00803fc4 	movi	r2,255
   90180:	11c09636 	bltu	r2,r7,903dc <__udivdi3+0x544>
   90184:	0007883a 	mov	r3,zero
   90188:	000b883a 	mov	r5,zero
   9018c:	003f9b06 	br	8fffc <__udivdi3+0x164>
   90190:	00804034 	movhi	r2,256
   90194:	10bfffc4 	addi	r2,r2,-1
   90198:	11809636 	bltu	r2,r6,903f4 <__udivdi3+0x55c>
   9019c:	00800404 	movi	r2,16
   901a0:	1007883a 	mov	r3,r2
   901a4:	003f5406 	br	8fef8 <__udivdi3+0x60>
   901a8:	00803fc4 	movi	r2,255
   901ac:	14009736 	bltu	r2,r16,9040c <__udivdi3+0x574>
   901b0:	0005883a 	mov	r2,zero
   901b4:	0007883a 	mov	r3,zero
   901b8:	003fb506 	br	90090 <__udivdi3+0x1f8>
   901bc:	00800044 	movi	r2,1
   901c0:	003f9b06 	br	90030 <__udivdi3+0x198>
   901c4:	3086d83a 	srl	r3,r6,r2
   901c8:	3c0e983a 	sll	r7,r7,r16
   901cc:	88aad83a 	srl	r21,r17,r2
   901d0:	9084d83a 	srl	r2,r18,r2
   901d4:	38e6b03a 	or	r19,r7,r3
   901d8:	9828d43a 	srli	r20,r19,16
   901dc:	8c22983a 	sll	r17,r17,r16
   901e0:	a809883a 	mov	r4,r21
   901e4:	a00b883a 	mov	r5,r20
   901e8:	342c983a 	sll	r22,r6,r16
   901ec:	88a2b03a 	or	r17,r17,r2
   901f0:	00883340 	call	88334 <__umodsi3>
   901f4:	a809883a 	mov	r4,r21
   901f8:	a00b883a 	mov	r5,r20
   901fc:	1039883a 	mov	fp,r2
   90200:	008832c0 	call	8832c <__udivsi3>
   90204:	102b883a 	mov	r21,r2
   90208:	9dffffcc 	andi	r23,r19,65535
   9020c:	e008943a 	slli	r4,fp,16
   90210:	8804d43a 	srli	r2,r17,16
   90214:	adcd383a 	mul	r6,r21,r23
   90218:	2088b03a 	or	r4,r4,r2
   9021c:	2180042e 	bgeu	r4,r6,90230 <__udivdi3+0x398>
   90220:	24c9883a 	add	r4,r4,r19
   90224:	a8bfffc4 	addi	r2,r21,-1
   90228:	24c07f2e 	bgeu	r4,r19,90428 <__udivdi3+0x590>
   9022c:	102b883a 	mov	r21,r2
   90230:	21b9c83a 	sub	fp,r4,r6
   90234:	e009883a 	mov	r4,fp
   90238:	a00b883a 	mov	r5,r20
   9023c:	00883340 	call	88334 <__umodsi3>
   90240:	e009883a 	mov	r4,fp
   90244:	a00b883a 	mov	r5,r20
   90248:	d8800015 	stw	r2,0(sp)
   9024c:	008832c0 	call	8832c <__udivsi3>
   90250:	d8c00017 	ldw	r3,0(sp)
   90254:	15cb383a 	mul	r5,r2,r23
   90258:	8c7fffcc 	andi	r17,r17,65535
   9025c:	1806943a 	slli	r3,r3,16
   90260:	1009883a 	mov	r4,r2
   90264:	1c46b03a 	or	r3,r3,r17
   90268:	1940042e 	bgeu	r3,r5,9027c <__udivdi3+0x3e4>
   9026c:	1cc7883a 	add	r3,r3,r19
   90270:	10bfffc4 	addi	r2,r2,-1
   90274:	1cc0682e 	bgeu	r3,r19,90418 <__udivdi3+0x580>
   90278:	1009883a 	mov	r4,r2
   9027c:	a804943a 	slli	r2,r21,16
   90280:	b1ffffcc 	andi	r7,r22,65535
   90284:	b02cd43a 	srli	r22,r22,16
   90288:	2084b03a 	or	r2,r4,r2
   9028c:	113fffcc 	andi	r4,r2,65535
   90290:	100cd43a 	srli	r6,r2,16
   90294:	21d1383a 	mul	r8,r4,r7
   90298:	2589383a 	mul	r4,r4,r22
   9029c:	31cf383a 	mul	r7,r6,r7
   902a0:	4012d43a 	srli	r9,r8,16
   902a4:	1947c83a 	sub	r3,r3,r5
   902a8:	3909883a 	add	r4,r7,r4
   902ac:	2249883a 	add	r4,r4,r9
   902b0:	35ad383a 	mul	r22,r6,r22
   902b4:	21c0022e 	bgeu	r4,r7,902c0 <__udivdi3+0x428>
   902b8:	01400074 	movhi	r5,1
   902bc:	b16d883a 	add	r22,r22,r5
   902c0:	200ad43a 	srli	r5,r4,16
   902c4:	b16d883a 	add	r22,r22,r5
   902c8:	1d803e36 	bltu	r3,r22,903c4 <__udivdi3+0x52c>
   902cc:	1d803826 	beq	r3,r22,903b0 <__udivdi3+0x518>
   902d0:	0007883a 	mov	r3,zero
   902d4:	003f5606 	br	90030 <__udivdi3+0x198>
   902d8:	80a0983a 	sll	r16,r16,r2
   902dc:	88ead83a 	srl	r21,r17,r3
   902e0:	90c6d83a 	srl	r3,r18,r3
   902e4:	8028d43a 	srli	r20,r16,16
   902e8:	88a2983a 	sll	r17,r17,r2
   902ec:	a809883a 	mov	r4,r21
   902f0:	a00b883a 	mov	r5,r20
   902f4:	88ecb03a 	or	r22,r17,r3
   902f8:	90a6983a 	sll	r19,r18,r2
   902fc:	00883340 	call	88334 <__umodsi3>
   90300:	a809883a 	mov	r4,r21
   90304:	a00b883a 	mov	r5,r20
   90308:	1023883a 	mov	r17,r2
   9030c:	008832c0 	call	8832c <__udivsi3>
   90310:	102b883a 	mov	r21,r2
   90314:	84bfffcc 	andi	r18,r16,65535
   90318:	8808943a 	slli	r4,r17,16
   9031c:	b004d43a 	srli	r2,r22,16
   90320:	ac87383a 	mul	r3,r21,r18
   90324:	2088b03a 	or	r4,r4,r2
   90328:	20c0062e 	bgeu	r4,r3,90344 <__udivdi3+0x4ac>
   9032c:	2409883a 	add	r4,r4,r16
   90330:	a8bfffc4 	addi	r2,r21,-1
   90334:	24004236 	bltu	r4,r16,90440 <__udivdi3+0x5a8>
   90338:	20c0412e 	bgeu	r4,r3,90440 <__udivdi3+0x5a8>
   9033c:	ad7fff84 	addi	r21,r21,-2
   90340:	2409883a 	add	r4,r4,r16
   90344:	20efc83a 	sub	r23,r4,r3
   90348:	b809883a 	mov	r4,r23
   9034c:	a00b883a 	mov	r5,r20
   90350:	00883340 	call	88334 <__umodsi3>
   90354:	1023883a 	mov	r17,r2
   90358:	a00b883a 	mov	r5,r20
   9035c:	b809883a 	mov	r4,r23
   90360:	008832c0 	call	8832c <__udivsi3>
   90364:	8822943a 	slli	r17,r17,16
   90368:	148b383a 	mul	r5,r2,r18
   9036c:	b5bfffcc 	andi	r22,r22,65535
   90370:	8da2b03a 	or	r17,r17,r22
   90374:	8940062e 	bgeu	r17,r5,90390 <__udivdi3+0x4f8>
   90378:	8c23883a 	add	r17,r17,r16
   9037c:	10ffffc4 	addi	r3,r2,-1
   90380:	8c002d36 	bltu	r17,r16,90438 <__udivdi3+0x5a0>
   90384:	89402c2e 	bgeu	r17,r5,90438 <__udivdi3+0x5a0>
   90388:	10bfff84 	addi	r2,r2,-2
   9038c:	8c23883a 	add	r17,r17,r16
   90390:	a806943a 	slli	r3,r21,16
   90394:	8963c83a 	sub	r17,r17,r5
   90398:	10c6b03a 	or	r3,r2,r3
   9039c:	003f4906 	br	900c4 <__udivdi3+0x22c>
   903a0:	1009883a 	mov	r4,r2
   903a4:	003f0906 	br	8ffcc <__udivdi3+0x134>
   903a8:	1009883a 	mov	r4,r2
   903ac:	003f6e06 	br	90168 <__udivdi3+0x2d0>
   903b0:	2008943a 	slli	r4,r4,16
   903b4:	9420983a 	sll	r16,r18,r16
   903b8:	423fffcc 	andi	r8,r8,65535
   903bc:	2209883a 	add	r4,r4,r8
   903c0:	813fc32e 	bgeu	r16,r4,902d0 <__udivdi3+0x438>
   903c4:	10bfffc4 	addi	r2,r2,-1
   903c8:	0007883a 	mov	r3,zero
   903cc:	003f1806 	br	90030 <__udivdi3+0x198>
   903d0:	00c00604 	movi	r3,24
   903d4:	180b883a 	mov	r5,r3
   903d8:	003f0806 	br	8fffc <__udivdi3+0x164>
   903dc:	00c00204 	movi	r3,8
   903e0:	180b883a 	mov	r5,r3
   903e4:	003f0506 	br	8fffc <__udivdi3+0x164>
   903e8:	00800604 	movi	r2,24
   903ec:	1007883a 	mov	r3,r2
   903f0:	003f2706 	br	90090 <__udivdi3+0x1f8>
   903f4:	00800604 	movi	r2,24
   903f8:	1007883a 	mov	r3,r2
   903fc:	003ebe06 	br	8fef8 <__udivdi3+0x60>
   90400:	00800204 	movi	r2,8
   90404:	1007883a 	mov	r3,r2
   90408:	003ebb06 	br	8fef8 <__udivdi3+0x60>
   9040c:	00800204 	movi	r2,8
   90410:	1007883a 	mov	r3,r2
   90414:	003f1e06 	br	90090 <__udivdi3+0x1f8>
   90418:	197f972e 	bgeu	r3,r5,90278 <__udivdi3+0x3e0>
   9041c:	213fff84 	addi	r4,r4,-2
   90420:	1cc7883a 	add	r3,r3,r19
   90424:	003f9506 	br	9027c <__udivdi3+0x3e4>
   90428:	21bf802e 	bgeu	r4,r6,9022c <__udivdi3+0x394>
   9042c:	ad7fff84 	addi	r21,r21,-2
   90430:	24c9883a 	add	r4,r4,r19
   90434:	003f7e06 	br	90230 <__udivdi3+0x398>
   90438:	1805883a 	mov	r2,r3
   9043c:	003fd406 	br	90390 <__udivdi3+0x4f8>
   90440:	102b883a 	mov	r21,r2
   90444:	003fbf06 	br	90344 <__udivdi3+0x4ac>
   90448:	8c7fff84 	addi	r17,r17,-2
   9044c:	2409883a 	add	r4,r4,r16
   90450:	003f3006 	br	90114 <__udivdi3+0x27c>
   90454:	94bfff84 	addi	r18,r18,-2
   90458:	1c07883a 	add	r3,r3,r16
   9045c:	003ec806 	br	8ff80 <__udivdi3+0xe8>

00090460 <__umoddi3>:
   90460:	defff504 	addi	sp,sp,-44
   90464:	dd000515 	stw	r20,20(sp)
   90468:	dcc00415 	stw	r19,16(sp)
   9046c:	dc800315 	stw	r18,12(sp)
   90470:	dc400215 	stw	r17,8(sp)
   90474:	dc000115 	stw	r16,4(sp)
   90478:	dfc00a15 	stw	ra,40(sp)
   9047c:	df000915 	stw	fp,36(sp)
   90480:	ddc00815 	stw	r23,32(sp)
   90484:	dd800715 	stw	r22,28(sp)
   90488:	dd400615 	stw	r21,24(sp)
   9048c:	2025883a 	mov	r18,r4
   90490:	2823883a 	mov	r17,r5
   90494:	3021883a 	mov	r16,r6
   90498:	2027883a 	mov	r19,r4
   9049c:	2829883a 	mov	r20,r5
   904a0:	3800351e 	bne	r7,zero,90578 <__umoddi3+0x118>
   904a4:	29804d2e 	bgeu	r5,r6,905dc <__umoddi3+0x17c>
   904a8:	00bfffd4 	movui	r2,65535
   904ac:	11809a36 	bltu	r2,r6,90718 <__umoddi3+0x2b8>
   904b0:	00803fc4 	movi	r2,255
   904b4:	11813936 	bltu	r2,r6,9099c <__umoddi3+0x53c>
   904b8:	0005883a 	mov	r2,zero
   904bc:	0009883a 	mov	r4,zero
   904c0:	3084d83a 	srl	r2,r6,r2
   904c4:	00c002f4 	movhi	r3,11
   904c8:	18f61604 	addi	r3,r3,-10152
   904cc:	05400804 	movi	r21,32
   904d0:	1885883a 	add	r2,r3,r2
   904d4:	10800003 	ldbu	r2,0(r2)
   904d8:	1109883a 	add	r4,r2,r4
   904dc:	a92bc83a 	sub	r21,r21,r4
   904e0:	a800ec26 	beq	r21,zero,90894 <__umoddi3+0x434>
   904e4:	8d62983a 	sll	r17,r17,r21
   904e8:	9108d83a 	srl	r4,r18,r4
   904ec:	3560983a 	sll	r16,r6,r21
   904f0:	9566983a 	sll	r19,r18,r21
   904f4:	8928b03a 	or	r20,r17,r4
   904f8:	8022d43a 	srli	r17,r16,16
   904fc:	a009883a 	mov	r4,r20
   90500:	84bfffcc 	andi	r18,r16,65535
   90504:	880b883a 	mov	r5,r17
   90508:	00883340 	call	88334 <__umodsi3>
   9050c:	a009883a 	mov	r4,r20
   90510:	880b883a 	mov	r5,r17
   90514:	102d883a 	mov	r22,r2
   90518:	008832c0 	call	8832c <__udivsi3>
   9051c:	b02c943a 	slli	r22,r22,16
   90520:	9806d43a 	srli	r3,r19,16
   90524:	1485383a 	mul	r2,r2,r18
   90528:	b0c6b03a 	or	r3,r22,r3
   9052c:	1880042e 	bgeu	r3,r2,90540 <__umoddi3+0xe0>
   90530:	1c07883a 	add	r3,r3,r16
   90534:	1c000236 	bltu	r3,r16,90540 <__umoddi3+0xe0>
   90538:	1880012e 	bgeu	r3,r2,90540 <__umoddi3+0xe0>
   9053c:	1c07883a 	add	r3,r3,r16
   90540:	18a9c83a 	sub	r20,r3,r2
   90544:	a009883a 	mov	r4,r20
   90548:	880b883a 	mov	r5,r17
   9054c:	00883340 	call	88334 <__umodsi3>
   90550:	102d883a 	mov	r22,r2
   90554:	a009883a 	mov	r4,r20
   90558:	880b883a 	mov	r5,r17
   9055c:	008832c0 	call	8832c <__udivsi3>
   90560:	b02c943a 	slli	r22,r22,16
   90564:	1485383a 	mul	r2,r2,r18
   90568:	9cffffcc 	andi	r19,r19,65535
   9056c:	b4e6b03a 	or	r19,r22,r19
   90570:	9880522e 	bgeu	r19,r2,906bc <__umoddi3+0x25c>
   90574:	00004d06 	br	906ac <__umoddi3+0x24c>
   90578:	29c05436 	bltu	r5,r7,906cc <__umoddi3+0x26c>
   9057c:	00bfffd4 	movui	r2,65535
   90580:	11c0602e 	bgeu	r2,r7,90704 <__umoddi3+0x2a4>
   90584:	00804034 	movhi	r2,256
   90588:	10bfffc4 	addi	r2,r2,-1
   9058c:	11c0f736 	bltu	r2,r7,9096c <__umoddi3+0x50c>
   90590:	00c00404 	movi	r3,16
   90594:	1827883a 	mov	r19,r3
   90598:	38c6d83a 	srl	r3,r7,r3
   9059c:	010002f4 	movhi	r4,11
   905a0:	21361604 	addi	r4,r4,-10152
   905a4:	04000804 	movi	r16,32
   905a8:	20c7883a 	add	r3,r4,r3
   905ac:	18800003 	ldbu	r2,0(r3)
   905b0:	14e7883a 	add	r19,r2,r19
   905b4:	84e1c83a 	sub	r16,r16,r19
   905b8:	8000621e 	bne	r16,zero,90744 <__umoddi3+0x2e4>
   905bc:	3c400136 	bltu	r7,r17,905c4 <__umoddi3+0x164>
   905c0:	91810336 	bltu	r18,r6,909d0 <__umoddi3+0x570>
   905c4:	9185c83a 	sub	r2,r18,r6
   905c8:	89e3c83a 	sub	r17,r17,r7
   905cc:	90a5803a 	cmpltu	r18,r18,r2
   905d0:	8ca9c83a 	sub	r20,r17,r18
   905d4:	a007883a 	mov	r3,r20
   905d8:	00003e06 	br	906d4 <__umoddi3+0x274>
   905dc:	3000041e 	bne	r6,zero,905f0 <__umoddi3+0x190>
   905e0:	01000044 	movi	r4,1
   905e4:	000b883a 	mov	r5,zero
   905e8:	008832c0 	call	8832c <__udivsi3>
   905ec:	1021883a 	mov	r16,r2
   905f0:	00bfffd4 	movui	r2,65535
   905f4:	14004e2e 	bgeu	r2,r16,90730 <__umoddi3+0x2d0>
   905f8:	00804034 	movhi	r2,256
   905fc:	10bfffc4 	addi	r2,r2,-1
   90600:	1400e336 	bltu	r2,r16,90990 <__umoddi3+0x530>
   90604:	00800404 	movi	r2,16
   90608:	1007883a 	mov	r3,r2
   9060c:	8084d83a 	srl	r2,r16,r2
   90610:	010002f4 	movhi	r4,11
   90614:	21361604 	addi	r4,r4,-10152
   90618:	05400804 	movi	r21,32
   9061c:	2085883a 	add	r2,r4,r2
   90620:	10800003 	ldbu	r2,0(r2)
   90624:	10c7883a 	add	r3,r2,r3
   90628:	a8ebc83a 	sub	r21,r21,r3
   9062c:	a8009b1e 	bne	r21,zero,9089c <__umoddi3+0x43c>
   90630:	8028d43a 	srli	r20,r16,16
   90634:	8c23c83a 	sub	r17,r17,r16
   90638:	85bfffcc 	andi	r22,r16,65535
   9063c:	8809883a 	mov	r4,r17
   90640:	a00b883a 	mov	r5,r20
   90644:	00883340 	call	88334 <__umodsi3>
   90648:	8809883a 	mov	r4,r17
   9064c:	a00b883a 	mov	r5,r20
   90650:	1025883a 	mov	r18,r2
   90654:	008832c0 	call	8832c <__udivsi3>
   90658:	9024943a 	slli	r18,r18,16
   9065c:	9806d43a 	srli	r3,r19,16
   90660:	1585383a 	mul	r2,r2,r22
   90664:	90c6b03a 	or	r3,r18,r3
   90668:	1880032e 	bgeu	r3,r2,90678 <__umoddi3+0x218>
   9066c:	1c07883a 	add	r3,r3,r16
   90670:	1c000136 	bltu	r3,r16,90678 <__umoddi3+0x218>
   90674:	1880d436 	bltu	r3,r2,909c8 <__umoddi3+0x568>
   90678:	18a3c83a 	sub	r17,r3,r2
   9067c:	8809883a 	mov	r4,r17
   90680:	a00b883a 	mov	r5,r20
   90684:	00883340 	call	88334 <__umodsi3>
   90688:	1025883a 	mov	r18,r2
   9068c:	8809883a 	mov	r4,r17
   90690:	a00b883a 	mov	r5,r20
   90694:	008832c0 	call	8832c <__udivsi3>
   90698:	9024943a 	slli	r18,r18,16
   9069c:	1585383a 	mul	r2,r2,r22
   906a0:	9cffffcc 	andi	r19,r19,65535
   906a4:	94e6b03a 	or	r19,r18,r19
   906a8:	9880042e 	bgeu	r19,r2,906bc <__umoddi3+0x25c>
   906ac:	9c27883a 	add	r19,r19,r16
   906b0:	9c000236 	bltu	r19,r16,906bc <__umoddi3+0x25c>
   906b4:	9880012e 	bgeu	r19,r2,906bc <__umoddi3+0x25c>
   906b8:	9c27883a 	add	r19,r19,r16
   906bc:	98a7c83a 	sub	r19,r19,r2
   906c0:	9d44d83a 	srl	r2,r19,r21
   906c4:	0007883a 	mov	r3,zero
   906c8:	00000206 	br	906d4 <__umoddi3+0x274>
   906cc:	2005883a 	mov	r2,r4
   906d0:	2807883a 	mov	r3,r5
   906d4:	dfc00a17 	ldw	ra,40(sp)
   906d8:	df000917 	ldw	fp,36(sp)
   906dc:	ddc00817 	ldw	r23,32(sp)
   906e0:	dd800717 	ldw	r22,28(sp)
   906e4:	dd400617 	ldw	r21,24(sp)
   906e8:	dd000517 	ldw	r20,20(sp)
   906ec:	dcc00417 	ldw	r19,16(sp)
   906f0:	dc800317 	ldw	r18,12(sp)
   906f4:	dc400217 	ldw	r17,8(sp)
   906f8:	dc000117 	ldw	r16,4(sp)
   906fc:	dec00b04 	addi	sp,sp,44
   90700:	f800283a 	ret
   90704:	00803fc4 	movi	r2,255
   90708:	11c09536 	bltu	r2,r7,90960 <__umoddi3+0x500>
   9070c:	0007883a 	mov	r3,zero
   90710:	0027883a 	mov	r19,zero
   90714:	003fa006 	br	90598 <__umoddi3+0x138>
   90718:	00804034 	movhi	r2,256
   9071c:	10bfffc4 	addi	r2,r2,-1
   90720:	11809536 	bltu	r2,r6,90978 <__umoddi3+0x518>
   90724:	00800404 	movi	r2,16
   90728:	1009883a 	mov	r4,r2
   9072c:	003f6406 	br	904c0 <__umoddi3+0x60>
   90730:	00803fc4 	movi	r2,255
   90734:	14009336 	bltu	r2,r16,90984 <__umoddi3+0x524>
   90738:	0005883a 	mov	r2,zero
   9073c:	0007883a 	mov	r3,zero
   90740:	003fb206 	br	9060c <__umoddi3+0x1ac>
   90744:	34c4d83a 	srl	r2,r6,r19
   90748:	3c0e983a 	sll	r7,r7,r16
   9074c:	8ceed83a 	srl	r23,r17,r19
   90750:	8c22983a 	sll	r17,r17,r16
   90754:	38a8b03a 	or	r20,r7,r2
   90758:	a02ad43a 	srli	r21,r20,16
   9075c:	94c4d83a 	srl	r2,r18,r19
   90760:	b809883a 	mov	r4,r23
   90764:	a80b883a 	mov	r5,r21
   90768:	88a2b03a 	or	r17,r17,r2
   9076c:	342c983a 	sll	r22,r6,r16
   90770:	00883340 	call	88334 <__umodsi3>
   90774:	b809883a 	mov	r4,r23
   90778:	a80b883a 	mov	r5,r21
   9077c:	d8800015 	stw	r2,0(sp)
   90780:	008832c0 	call	8832c <__udivsi3>
   90784:	d8c00017 	ldw	r3,0(sp)
   90788:	102f883a 	mov	r23,r2
   9078c:	a73fffcc 	andi	fp,r20,65535
   90790:	180a943a 	slli	r5,r3,16
   90794:	8804d43a 	srli	r2,r17,16
   90798:	bf09383a 	mul	r4,r23,fp
   9079c:	9424983a 	sll	r18,r18,r16
   907a0:	288ab03a 	or	r5,r5,r2
   907a4:	2900042e 	bgeu	r5,r4,907b8 <__umoddi3+0x358>
   907a8:	2d0b883a 	add	r5,r5,r20
   907ac:	b8bfffc4 	addi	r2,r23,-1
   907b0:	2d00812e 	bgeu	r5,r20,909b8 <__umoddi3+0x558>
   907b4:	102f883a 	mov	r23,r2
   907b8:	2907c83a 	sub	r3,r5,r4
   907bc:	1809883a 	mov	r4,r3
   907c0:	a80b883a 	mov	r5,r21
   907c4:	d8c00015 	stw	r3,0(sp)
   907c8:	00883340 	call	88334 <__umodsi3>
   907cc:	d8c00017 	ldw	r3,0(sp)
   907d0:	a80b883a 	mov	r5,r21
   907d4:	d8800015 	stw	r2,0(sp)
   907d8:	1809883a 	mov	r4,r3
   907dc:	008832c0 	call	8832c <__udivsi3>
   907e0:	d9800017 	ldw	r6,0(sp)
   907e4:	8c7fffcc 	andi	r17,r17,65535
   907e8:	3008943a 	slli	r4,r6,16
   907ec:	170d383a 	mul	r6,r2,fp
   907f0:	2448b03a 	or	r4,r4,r17
   907f4:	2180042e 	bgeu	r4,r6,90808 <__umoddi3+0x3a8>
   907f8:	2509883a 	add	r4,r4,r20
   907fc:	10ffffc4 	addi	r3,r2,-1
   90800:	2500692e 	bgeu	r4,r20,909a8 <__umoddi3+0x548>
   90804:	1805883a 	mov	r2,r3
   90808:	b82e943a 	slli	r23,r23,16
   9080c:	b010d43a 	srli	r8,r22,16
   90810:	b1ffffcc 	andi	r7,r22,65535
   90814:	15eeb03a 	or	r23,r2,r23
   90818:	b8bfffcc 	andi	r2,r23,65535
   9081c:	b82ed43a 	srli	r23,r23,16
   90820:	11c7383a 	mul	r3,r2,r7
   90824:	1205383a 	mul	r2,r2,r8
   90828:	b9cf383a 	mul	r7,r23,r7
   9082c:	400b883a 	mov	r5,r8
   90830:	1810d43a 	srli	r8,r3,16
   90834:	3885883a 	add	r2,r7,r2
   90838:	2189c83a 	sub	r4,r4,r6
   9083c:	1205883a 	add	r2,r2,r8
   90840:	b94b383a 	mul	r5,r23,r5
   90844:	11c0022e 	bgeu	r2,r7,90850 <__umoddi3+0x3f0>
   90848:	01800074 	movhi	r6,1
   9084c:	298b883a 	add	r5,r5,r6
   90850:	100cd43a 	srli	r6,r2,16
   90854:	1004943a 	slli	r2,r2,16
   90858:	18ffffcc 	andi	r3,r3,65535
   9085c:	298b883a 	add	r5,r5,r6
   90860:	10c5883a 	add	r2,r2,r3
   90864:	21403836 	bltu	r4,r5,90948 <__umoddi3+0x4e8>
   90868:	21405c26 	beq	r4,r5,909dc <__umoddi3+0x57c>
   9086c:	2147c83a 	sub	r3,r4,r5
   90870:	102d883a 	mov	r22,r2
   90874:	95adc83a 	sub	r22,r18,r22
   90878:	95a5803a 	cmpltu	r18,r18,r22
   9087c:	1c87c83a 	sub	r3,r3,r18
   90880:	1cc4983a 	sll	r2,r3,r19
   90884:	b42cd83a 	srl	r22,r22,r16
   90888:	1c06d83a 	srl	r3,r3,r16
   9088c:	1584b03a 	or	r2,r2,r22
   90890:	003f9006 	br	906d4 <__umoddi3+0x274>
   90894:	002b883a 	mov	r21,zero
   90898:	003f1706 	br	904f8 <__umoddi3+0x98>
   9089c:	8560983a 	sll	r16,r16,r21
   908a0:	88e6d83a 	srl	r19,r17,r3
   908a4:	90c6d83a 	srl	r3,r18,r3
   908a8:	8028d43a 	srli	r20,r16,16
   908ac:	8d62983a 	sll	r17,r17,r21
   908b0:	9809883a 	mov	r4,r19
   908b4:	a00b883a 	mov	r5,r20
   908b8:	88eeb03a 	or	r23,r17,r3
   908bc:	00883340 	call	88334 <__umodsi3>
   908c0:	9809883a 	mov	r4,r19
   908c4:	a00b883a 	mov	r5,r20
   908c8:	1023883a 	mov	r17,r2
   908cc:	008832c0 	call	8832c <__udivsi3>
   908d0:	85bfffcc 	andi	r22,r16,65535
   908d4:	880a943a 	slli	r5,r17,16
   908d8:	b806d43a 	srli	r3,r23,16
   908dc:	1585383a 	mul	r2,r2,r22
   908e0:	9566983a 	sll	r19,r18,r21
   908e4:	28cab03a 	or	r5,r5,r3
   908e8:	2880042e 	bgeu	r5,r2,908fc <__umoddi3+0x49c>
   908ec:	2c0b883a 	add	r5,r5,r16
   908f0:	2c000236 	bltu	r5,r16,908fc <__umoddi3+0x49c>
   908f4:	2880012e 	bgeu	r5,r2,908fc <__umoddi3+0x49c>
   908f8:	2c0b883a 	add	r5,r5,r16
   908fc:	28a5c83a 	sub	r18,r5,r2
   90900:	9009883a 	mov	r4,r18
   90904:	a00b883a 	mov	r5,r20
   90908:	00883340 	call	88334 <__umodsi3>
   9090c:	1023883a 	mov	r17,r2
   90910:	9009883a 	mov	r4,r18
   90914:	a00b883a 	mov	r5,r20
   90918:	008832c0 	call	8832c <__udivsi3>
   9091c:	8822943a 	slli	r17,r17,16
   90920:	1585383a 	mul	r2,r2,r22
   90924:	bdffffcc 	andi	r23,r23,65535
   90928:	8de2b03a 	or	r17,r17,r23
   9092c:	8880042e 	bgeu	r17,r2,90940 <__umoddi3+0x4e0>
   90930:	8c23883a 	add	r17,r17,r16
   90934:	8c000236 	bltu	r17,r16,90940 <__umoddi3+0x4e0>
   90938:	8880012e 	bgeu	r17,r2,90940 <__umoddi3+0x4e0>
   9093c:	8c23883a 	add	r17,r17,r16
   90940:	88a3c83a 	sub	r17,r17,r2
   90944:	003f3d06 	br	9063c <__umoddi3+0x1dc>
   90948:	15adc83a 	sub	r22,r2,r22
   9094c:	2d07c83a 	sub	r3,r5,r20
   90950:	1585803a 	cmpltu	r2,r2,r22
   90954:	1887c83a 	sub	r3,r3,r2
   90958:	20c7c83a 	sub	r3,r4,r3
   9095c:	003fc506 	br	90874 <__umoddi3+0x414>
   90960:	00c00204 	movi	r3,8
   90964:	1827883a 	mov	r19,r3
   90968:	003f0b06 	br	90598 <__umoddi3+0x138>
   9096c:	00c00604 	movi	r3,24
   90970:	1827883a 	mov	r19,r3
   90974:	003f0806 	br	90598 <__umoddi3+0x138>
   90978:	00800604 	movi	r2,24
   9097c:	1009883a 	mov	r4,r2
   90980:	003ecf06 	br	904c0 <__umoddi3+0x60>
   90984:	00800204 	movi	r2,8
   90988:	1007883a 	mov	r3,r2
   9098c:	003f1f06 	br	9060c <__umoddi3+0x1ac>
   90990:	00800604 	movi	r2,24
   90994:	1007883a 	mov	r3,r2
   90998:	003f1c06 	br	9060c <__umoddi3+0x1ac>
   9099c:	00800204 	movi	r2,8
   909a0:	1009883a 	mov	r4,r2
   909a4:	003ec606 	br	904c0 <__umoddi3+0x60>
   909a8:	21bf962e 	bgeu	r4,r6,90804 <__umoddi3+0x3a4>
   909ac:	10bfff84 	addi	r2,r2,-2
   909b0:	2509883a 	add	r4,r4,r20
   909b4:	003f9406 	br	90808 <__umoddi3+0x3a8>
   909b8:	293f7e2e 	bgeu	r5,r4,907b4 <__umoddi3+0x354>
   909bc:	bdffff84 	addi	r23,r23,-2
   909c0:	2d0b883a 	add	r5,r5,r20
   909c4:	003f7c06 	br	907b8 <__umoddi3+0x358>
   909c8:	1c07883a 	add	r3,r3,r16
   909cc:	003f2a06 	br	90678 <__umoddi3+0x218>
   909d0:	9005883a 	mov	r2,r18
   909d4:	a007883a 	mov	r3,r20
   909d8:	003f3e06 	br	906d4 <__umoddi3+0x274>
   909dc:	90bfda36 	bltu	r18,r2,90948 <__umoddi3+0x4e8>
   909e0:	102d883a 	mov	r22,r2
   909e4:	0007883a 	mov	r3,zero
   909e8:	003fa206 	br	90874 <__umoddi3+0x414>

000909ec <__eqdf2>:
   909ec:	defff104 	addi	sp,sp,-60
   909f0:	d9000c15 	stw	r4,48(sp)
   909f4:	d9400d15 	stw	r5,52(sp)
   909f8:	d9000c04 	addi	r4,sp,48
   909fc:	d9400504 	addi	r5,sp,20
   90a00:	dfc00e15 	stw	ra,56(sp)
   90a04:	d9800a15 	stw	r6,40(sp)
   90a08:	d9c00b15 	stw	r7,44(sp)
   90a0c:	008866c0 	call	8866c <__unpack_d>
   90a10:	d9000a04 	addi	r4,sp,40
   90a14:	d80b883a 	mov	r5,sp
   90a18:	008866c0 	call	8866c <__unpack_d>
   90a1c:	d8c00517 	ldw	r3,20(sp)
   90a20:	00800044 	movi	r2,1
   90a24:	10c0052e 	bgeu	r2,r3,90a3c <__eqdf2+0x50>
   90a28:	d8c00017 	ldw	r3,0(sp)
   90a2c:	10c0032e 	bgeu	r2,r3,90a3c <__eqdf2+0x50>
   90a30:	d9000504 	addi	r4,sp,20
   90a34:	d80b883a 	mov	r5,sp
   90a38:	00887700 	call	88770 <__fpcmp_parts_d>
   90a3c:	dfc00e17 	ldw	ra,56(sp)
   90a40:	dec00f04 	addi	sp,sp,60
   90a44:	f800283a 	ret

00090a48 <__nedf2>:
   90a48:	defff104 	addi	sp,sp,-60
   90a4c:	d9000c15 	stw	r4,48(sp)
   90a50:	d9400d15 	stw	r5,52(sp)
   90a54:	d9000c04 	addi	r4,sp,48
   90a58:	d9400504 	addi	r5,sp,20
   90a5c:	dfc00e15 	stw	ra,56(sp)
   90a60:	d9800a15 	stw	r6,40(sp)
   90a64:	d9c00b15 	stw	r7,44(sp)
   90a68:	008866c0 	call	8866c <__unpack_d>
   90a6c:	d9000a04 	addi	r4,sp,40
   90a70:	d80b883a 	mov	r5,sp
   90a74:	008866c0 	call	8866c <__unpack_d>
   90a78:	d8c00517 	ldw	r3,20(sp)
   90a7c:	00800044 	movi	r2,1
   90a80:	10c0052e 	bgeu	r2,r3,90a98 <__nedf2+0x50>
   90a84:	d8c00017 	ldw	r3,0(sp)
   90a88:	10c0032e 	bgeu	r2,r3,90a98 <__nedf2+0x50>
   90a8c:	d9000504 	addi	r4,sp,20
   90a90:	d80b883a 	mov	r5,sp
   90a94:	00887700 	call	88770 <__fpcmp_parts_d>
   90a98:	dfc00e17 	ldw	ra,56(sp)
   90a9c:	dec00f04 	addi	sp,sp,60
   90aa0:	f800283a 	ret

00090aa4 <__gtdf2>:
   90aa4:	defff104 	addi	sp,sp,-60
   90aa8:	d9000c15 	stw	r4,48(sp)
   90aac:	d9400d15 	stw	r5,52(sp)
   90ab0:	d9000c04 	addi	r4,sp,48
   90ab4:	d9400504 	addi	r5,sp,20
   90ab8:	dfc00e15 	stw	ra,56(sp)
   90abc:	d9800a15 	stw	r6,40(sp)
   90ac0:	d9c00b15 	stw	r7,44(sp)
   90ac4:	008866c0 	call	8866c <__unpack_d>
   90ac8:	d9000a04 	addi	r4,sp,40
   90acc:	d80b883a 	mov	r5,sp
   90ad0:	008866c0 	call	8866c <__unpack_d>
   90ad4:	d8c00517 	ldw	r3,20(sp)
   90ad8:	00800044 	movi	r2,1
   90adc:	10c0082e 	bgeu	r2,r3,90b00 <__gtdf2+0x5c>
   90ae0:	d8c00017 	ldw	r3,0(sp)
   90ae4:	10c0062e 	bgeu	r2,r3,90b00 <__gtdf2+0x5c>
   90ae8:	d9000504 	addi	r4,sp,20
   90aec:	d80b883a 	mov	r5,sp
   90af0:	00887700 	call	88770 <__fpcmp_parts_d>
   90af4:	dfc00e17 	ldw	ra,56(sp)
   90af8:	dec00f04 	addi	sp,sp,60
   90afc:	f800283a 	ret
   90b00:	00bfffc4 	movi	r2,-1
   90b04:	003ffb06 	br	90af4 <__gtdf2+0x50>

00090b08 <__gedf2>:
   90b08:	defff104 	addi	sp,sp,-60
   90b0c:	d9000c15 	stw	r4,48(sp)
   90b10:	d9400d15 	stw	r5,52(sp)
   90b14:	d9000c04 	addi	r4,sp,48
   90b18:	d9400504 	addi	r5,sp,20
   90b1c:	dfc00e15 	stw	ra,56(sp)
   90b20:	d9800a15 	stw	r6,40(sp)
   90b24:	d9c00b15 	stw	r7,44(sp)
   90b28:	008866c0 	call	8866c <__unpack_d>
   90b2c:	d9000a04 	addi	r4,sp,40
   90b30:	d80b883a 	mov	r5,sp
   90b34:	008866c0 	call	8866c <__unpack_d>
   90b38:	d8c00517 	ldw	r3,20(sp)
   90b3c:	00800044 	movi	r2,1
   90b40:	10c0082e 	bgeu	r2,r3,90b64 <__gedf2+0x5c>
   90b44:	d8c00017 	ldw	r3,0(sp)
   90b48:	10c0062e 	bgeu	r2,r3,90b64 <__gedf2+0x5c>
   90b4c:	d9000504 	addi	r4,sp,20
   90b50:	d80b883a 	mov	r5,sp
   90b54:	00887700 	call	88770 <__fpcmp_parts_d>
   90b58:	dfc00e17 	ldw	ra,56(sp)
   90b5c:	dec00f04 	addi	sp,sp,60
   90b60:	f800283a 	ret
   90b64:	00bfffc4 	movi	r2,-1
   90b68:	003ffb06 	br	90b58 <__gedf2+0x50>

00090b6c <__floatunsidf>:
   90b6c:	defff904 	addi	sp,sp,-28
   90b70:	dc000515 	stw	r16,20(sp)
   90b74:	dfc00615 	stw	ra,24(sp)
   90b78:	d8000115 	stw	zero,4(sp)
   90b7c:	2021883a 	mov	r16,r4
   90b80:	20001726 	beq	r4,zero,90be0 <__floatunsidf+0x74>
   90b84:	008000c4 	movi	r2,3
   90b88:	d8800015 	stw	r2,0(sp)
   90b8c:	00800f04 	movi	r2,60
   90b90:	d8800215 	stw	r2,8(sp)
   90b94:	008839c0 	call	8839c <__clzsi2>
   90b98:	10c00744 	addi	r3,r2,29
   90b9c:	18001816 	blt	r3,zero,90c00 <__floatunsidf+0x94>
   90ba0:	18002d26 	beq	r3,zero,90c58 <__floatunsidf+0xec>
   90ba4:	113fff44 	addi	r4,r2,-3
   90ba8:	20002e16 	blt	r4,zero,90c64 <__floatunsidf+0xf8>
   90bac:	8108983a 	sll	r4,r16,r4
   90bb0:	0021883a 	mov	r16,zero
   90bb4:	014007c4 	movi	r5,31
   90bb8:	2885c83a 	sub	r2,r5,r2
   90bbc:	dc000315 	stw	r16,12(sp)
   90bc0:	d9000415 	stw	r4,16(sp)
   90bc4:	d8800215 	stw	r2,8(sp)
   90bc8:	d809883a 	mov	r4,sp
   90bcc:	00884480 	call	88448 <__pack_d>
   90bd0:	dfc00617 	ldw	ra,24(sp)
   90bd4:	dc000517 	ldw	r16,20(sp)
   90bd8:	dec00704 	addi	sp,sp,28
   90bdc:	f800283a 	ret
   90be0:	00800084 	movi	r2,2
   90be4:	d809883a 	mov	r4,sp
   90be8:	d8800015 	stw	r2,0(sp)
   90bec:	00884480 	call	88448 <__pack_d>
   90bf0:	dfc00617 	ldw	ra,24(sp)
   90bf4:	dc000517 	ldw	r16,20(sp)
   90bf8:	dec00704 	addi	sp,sp,28
   90bfc:	f800283a 	ret
   90c00:	00c7c83a 	sub	r3,zero,r3
   90c04:	193ff804 	addi	r4,r3,-32
   90c08:	20001c16 	blt	r4,zero,90c7c <__floatunsidf+0x110>
   90c0c:	000b883a 	mov	r5,zero
   90c10:	2009d7fa 	srai	r4,r4,31
   90c14:	80c6d83a 	srl	r3,r16,r3
   90c18:	297fffc4 	addi	r5,r5,-1
   90c1c:	2c20703a 	and	r16,r5,r16
   90c20:	8020c03a 	cmpne	r16,r16,zero
   90c24:	1906703a 	and	r3,r3,r4
   90c28:	010007c4 	movi	r4,31
   90c2c:	80c6b03a 	or	r3,r16,r3
   90c30:	2085c83a 	sub	r2,r4,r2
   90c34:	d809883a 	mov	r4,sp
   90c38:	d8c00315 	stw	r3,12(sp)
   90c3c:	d8000415 	stw	zero,16(sp)
   90c40:	d8800215 	stw	r2,8(sp)
   90c44:	00884480 	call	88448 <__pack_d>
   90c48:	dfc00617 	ldw	ra,24(sp)
   90c4c:	dc000517 	ldw	r16,20(sp)
   90c50:	dec00704 	addi	sp,sp,28
   90c54:	f800283a 	ret
   90c58:	dc000315 	stw	r16,12(sp)
   90c5c:	d8000415 	stw	zero,16(sp)
   90c60:	003fd906 	br	90bc8 <__floatunsidf+0x5c>
   90c64:	800ad07a 	srli	r5,r16,1
   90c68:	010007c4 	movi	r4,31
   90c6c:	20c9c83a 	sub	r4,r4,r3
   90c70:	2908d83a 	srl	r4,r5,r4
   90c74:	80e0983a 	sll	r16,r16,r3
   90c78:	003fce06 	br	90bb4 <__floatunsidf+0x48>
   90c7c:	01400044 	movi	r5,1
   90c80:	28ca983a 	sll	r5,r5,r3
   90c84:	003fe206 	br	90c10 <__floatunsidf+0xa4>

00090c88 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   90c88:	defff504 	addi	sp,sp,-44
   90c8c:	df000a15 	stw	fp,40(sp)
   90c90:	df000a04 	addi	fp,sp,40
   90c94:	e13ffc15 	stw	r4,-16(fp)
   90c98:	e17ffd15 	stw	r5,-12(fp)
   90c9c:	e1bffe15 	stw	r6,-8(fp)
   90ca0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   90ca4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   90ca8:	008002f4 	movhi	r2,11
   90cac:	1091ed04 	addi	r2,r2,18356
   90cb0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   90cb4:	10003f26 	beq	r2,zero,90db4 <alt_alarm_start+0x12c>
  {
    if (alarm)
   90cb8:	e0bffc17 	ldw	r2,-16(fp)
   90cbc:	10003b26 	beq	r2,zero,90dac <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   90cc0:	e0bffc17 	ldw	r2,-16(fp)
   90cc4:	e0fffe17 	ldw	r3,-8(fp)
   90cc8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   90ccc:	e0bffc17 	ldw	r2,-16(fp)
   90cd0:	e0ffff17 	ldw	r3,-4(fp)
   90cd4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   90cd8:	0005303a 	rdctl	r2,status
   90cdc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   90ce0:	e0fff817 	ldw	r3,-32(fp)
   90ce4:	00bfff84 	movi	r2,-2
   90ce8:	1884703a 	and	r2,r3,r2
   90cec:	1001703a 	wrctl	status,r2
  
  return context;
   90cf0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   90cf4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   90cf8:	008002f4 	movhi	r2,11
   90cfc:	1091ee04 	addi	r2,r2,18360
   90d00:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   90d04:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   90d08:	e0fffd17 	ldw	r3,-12(fp)
   90d0c:	e0bff617 	ldw	r2,-40(fp)
   90d10:	1885883a 	add	r2,r3,r2
   90d14:	10c00044 	addi	r3,r2,1
   90d18:	e0bffc17 	ldw	r2,-16(fp)
   90d1c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   90d20:	e0bffc17 	ldw	r2,-16(fp)
   90d24:	10c00217 	ldw	r3,8(r2)
   90d28:	e0bff617 	ldw	r2,-40(fp)
   90d2c:	1880042e 	bgeu	r3,r2,90d40 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   90d30:	e0bffc17 	ldw	r2,-16(fp)
   90d34:	00c00044 	movi	r3,1
   90d38:	10c00405 	stb	r3,16(r2)
   90d3c:	00000206 	br	90d48 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   90d40:	e0bffc17 	ldw	r2,-16(fp)
   90d44:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   90d48:	e0bffc17 	ldw	r2,-16(fp)
   90d4c:	00c002f4 	movhi	r3,11
   90d50:	18c45b04 	addi	r3,r3,4460
   90d54:	e0fff915 	stw	r3,-28(fp)
   90d58:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   90d5c:	e0bffa17 	ldw	r2,-24(fp)
   90d60:	e0fff917 	ldw	r3,-28(fp)
   90d64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   90d68:	e0bff917 	ldw	r2,-28(fp)
   90d6c:	10c00017 	ldw	r3,0(r2)
   90d70:	e0bffa17 	ldw	r2,-24(fp)
   90d74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   90d78:	e0bff917 	ldw	r2,-28(fp)
   90d7c:	10800017 	ldw	r2,0(r2)
   90d80:	e0fffa17 	ldw	r3,-24(fp)
   90d84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   90d88:	e0bff917 	ldw	r2,-28(fp)
   90d8c:	e0fffa17 	ldw	r3,-24(fp)
   90d90:	10c00015 	stw	r3,0(r2)
   90d94:	e0bff717 	ldw	r2,-36(fp)
   90d98:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   90d9c:	e0bffb17 	ldw	r2,-20(fp)
   90da0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   90da4:	0005883a 	mov	r2,zero
   90da8:	00000306 	br	90db8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   90dac:	00bffa84 	movi	r2,-22
   90db0:	00000106 	br	90db8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   90db4:	00bfde84 	movi	r2,-134
  }
}
   90db8:	e037883a 	mov	sp,fp
   90dbc:	df000017 	ldw	fp,0(sp)
   90dc0:	dec00104 	addi	sp,sp,4
   90dc4:	f800283a 	ret

00090dc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   90dc8:	defffe04 	addi	sp,sp,-8
   90dcc:	dfc00115 	stw	ra,4(sp)
   90dd0:	df000015 	stw	fp,0(sp)
   90dd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   90dd8:	008002f4 	movhi	r2,11
   90ddc:	10845804 	addi	r2,r2,4448
   90de0:	10800017 	ldw	r2,0(r2)
   90de4:	10000526 	beq	r2,zero,90dfc <alt_get_errno+0x34>
   90de8:	008002f4 	movhi	r2,11
   90dec:	10845804 	addi	r2,r2,4448
   90df0:	10800017 	ldw	r2,0(r2)
   90df4:	103ee83a 	callr	r2
   90df8:	00000206 	br	90e04 <alt_get_errno+0x3c>
   90dfc:	008002f4 	movhi	r2,11
   90e00:	1091e504 	addi	r2,r2,18324
}
   90e04:	e037883a 	mov	sp,fp
   90e08:	dfc00117 	ldw	ra,4(sp)
   90e0c:	df000017 	ldw	fp,0(sp)
   90e10:	dec00204 	addi	sp,sp,8
   90e14:	f800283a 	ret

00090e18 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   90e18:	defffb04 	addi	sp,sp,-20
   90e1c:	dfc00415 	stw	ra,16(sp)
   90e20:	df000315 	stw	fp,12(sp)
   90e24:	df000304 	addi	fp,sp,12
   90e28:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   90e2c:	e0bfff17 	ldw	r2,-4(fp)
   90e30:	10000616 	blt	r2,zero,90e4c <close+0x34>
   90e34:	e0bfff17 	ldw	r2,-4(fp)
   90e38:	10c00324 	muli	r3,r2,12
   90e3c:	008002f4 	movhi	r2,11
   90e40:	10bfd304 	addi	r2,r2,-180
   90e44:	1885883a 	add	r2,r3,r2
   90e48:	00000106 	br	90e50 <close+0x38>
   90e4c:	0005883a 	mov	r2,zero
   90e50:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   90e54:	e0bffd17 	ldw	r2,-12(fp)
   90e58:	10001826 	beq	r2,zero,90ebc <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   90e5c:	e0bffd17 	ldw	r2,-12(fp)
   90e60:	10800017 	ldw	r2,0(r2)
   90e64:	10800417 	ldw	r2,16(r2)
   90e68:	10000626 	beq	r2,zero,90e84 <close+0x6c>
   90e6c:	e0bffd17 	ldw	r2,-12(fp)
   90e70:	10800017 	ldw	r2,0(r2)
   90e74:	10800417 	ldw	r2,16(r2)
   90e78:	e13ffd17 	ldw	r4,-12(fp)
   90e7c:	103ee83a 	callr	r2
   90e80:	00000106 	br	90e88 <close+0x70>
   90e84:	0005883a 	mov	r2,zero
   90e88:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   90e8c:	e13fff17 	ldw	r4,-4(fp)
   90e90:	00917c40 	call	917c4 <alt_release_fd>
    if (rval < 0)
   90e94:	e0bffe17 	ldw	r2,-8(fp)
   90e98:	1000060e 	bge	r2,zero,90eb4 <close+0x9c>
    {
      ALT_ERRNO = -rval;
   90e9c:	0090dc80 	call	90dc8 <alt_get_errno>
   90ea0:	e0fffe17 	ldw	r3,-8(fp)
   90ea4:	00c7c83a 	sub	r3,zero,r3
   90ea8:	10c00015 	stw	r3,0(r2)
      return -1;
   90eac:	00bfffc4 	movi	r2,-1
   90eb0:	00000606 	br	90ecc <close+0xb4>
    }
    return 0;
   90eb4:	0005883a 	mov	r2,zero
   90eb8:	00000406 	br	90ecc <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   90ebc:	0090dc80 	call	90dc8 <alt_get_errno>
   90ec0:	00c01444 	movi	r3,81
   90ec4:	10c00015 	stw	r3,0(r2)
    return -1;
   90ec8:	00bfffc4 	movi	r2,-1
  }
}
   90ecc:	e037883a 	mov	sp,fp
   90ed0:	dfc00117 	ldw	ra,4(sp)
   90ed4:	df000017 	ldw	fp,0(sp)
   90ed8:	dec00204 	addi	sp,sp,8
   90edc:	f800283a 	ret

00090ee0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   90ee0:	defffc04 	addi	sp,sp,-16
   90ee4:	df000315 	stw	fp,12(sp)
   90ee8:	df000304 	addi	fp,sp,12
   90eec:	e13ffd15 	stw	r4,-12(fp)
   90ef0:	e17ffe15 	stw	r5,-8(fp)
   90ef4:	e1bfff15 	stw	r6,-4(fp)
  return len;
   90ef8:	e0bfff17 	ldw	r2,-4(fp)
}
   90efc:	e037883a 	mov	sp,fp
   90f00:	df000017 	ldw	fp,0(sp)
   90f04:	dec00104 	addi	sp,sp,4
   90f08:	f800283a 	ret

00090f0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   90f0c:	defffe04 	addi	sp,sp,-8
   90f10:	dfc00115 	stw	ra,4(sp)
   90f14:	df000015 	stw	fp,0(sp)
   90f18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   90f1c:	008002f4 	movhi	r2,11
   90f20:	10845804 	addi	r2,r2,4448
   90f24:	10800017 	ldw	r2,0(r2)
   90f28:	10000526 	beq	r2,zero,90f40 <alt_get_errno+0x34>
   90f2c:	008002f4 	movhi	r2,11
   90f30:	10845804 	addi	r2,r2,4448
   90f34:	10800017 	ldw	r2,0(r2)
   90f38:	103ee83a 	callr	r2
   90f3c:	00000206 	br	90f48 <alt_get_errno+0x3c>
   90f40:	008002f4 	movhi	r2,11
   90f44:	1091e504 	addi	r2,r2,18324
}
   90f48:	e037883a 	mov	sp,fp
   90f4c:	dfc00117 	ldw	ra,4(sp)
   90f50:	df000017 	ldw	fp,0(sp)
   90f54:	dec00204 	addi	sp,sp,8
   90f58:	f800283a 	ret

00090f5c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   90f5c:	defffb04 	addi	sp,sp,-20
   90f60:	dfc00415 	stw	ra,16(sp)
   90f64:	df000315 	stw	fp,12(sp)
   90f68:	df000304 	addi	fp,sp,12
   90f6c:	e13ffe15 	stw	r4,-8(fp)
   90f70:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   90f74:	e0bffe17 	ldw	r2,-8(fp)
   90f78:	10000616 	blt	r2,zero,90f94 <fstat+0x38>
   90f7c:	e0bffe17 	ldw	r2,-8(fp)
   90f80:	10c00324 	muli	r3,r2,12
   90f84:	008002f4 	movhi	r2,11
   90f88:	10bfd304 	addi	r2,r2,-180
   90f8c:	1885883a 	add	r2,r3,r2
   90f90:	00000106 	br	90f98 <fstat+0x3c>
   90f94:	0005883a 	mov	r2,zero
   90f98:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   90f9c:	e0bffd17 	ldw	r2,-12(fp)
   90fa0:	10001026 	beq	r2,zero,90fe4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   90fa4:	e0bffd17 	ldw	r2,-12(fp)
   90fa8:	10800017 	ldw	r2,0(r2)
   90fac:	10800817 	ldw	r2,32(r2)
   90fb0:	10000726 	beq	r2,zero,90fd0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   90fb4:	e0bffd17 	ldw	r2,-12(fp)
   90fb8:	10800017 	ldw	r2,0(r2)
   90fbc:	10800817 	ldw	r2,32(r2)
   90fc0:	e13ffd17 	ldw	r4,-12(fp)
   90fc4:	e17fff17 	ldw	r5,-4(fp)
   90fc8:	103ee83a 	callr	r2
   90fcc:	00000906 	br	90ff4 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   90fd0:	e0bfff17 	ldw	r2,-4(fp)
   90fd4:	00c80004 	movi	r3,8192
   90fd8:	10c00115 	stw	r3,4(r2)
      return 0;
   90fdc:	0005883a 	mov	r2,zero
   90fe0:	00000406 	br	90ff4 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   90fe4:	0090f0c0 	call	90f0c <alt_get_errno>
   90fe8:	00c01444 	movi	r3,81
   90fec:	10c00015 	stw	r3,0(r2)
    return -1;
   90ff0:	00bfffc4 	movi	r2,-1
  }
}
   90ff4:	e037883a 	mov	sp,fp
   90ff8:	dfc00117 	ldw	ra,4(sp)
   90ffc:	df000017 	ldw	fp,0(sp)
   91000:	dec00204 	addi	sp,sp,8
   91004:	f800283a 	ret

00091008 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   91008:	defff904 	addi	sp,sp,-28
   9100c:	dfc00615 	stw	ra,24(sp)
   91010:	df000515 	stw	fp,20(sp)
   91014:	df000504 	addi	fp,sp,20
   91018:	e13ffc15 	stw	r4,-16(fp)
   9101c:	e17ffd15 	stw	r5,-12(fp)
   91020:	e1bffe15 	stw	r6,-8(fp)
   91024:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   91028:	e0800217 	ldw	r2,8(fp)
   9102c:	d8800015 	stw	r2,0(sp)
   91030:	e13ffc17 	ldw	r4,-16(fp)
   91034:	e17ffd17 	ldw	r5,-12(fp)
   91038:	e1bffe17 	ldw	r6,-8(fp)
   9103c:	e1ffff17 	ldw	r7,-4(fp)
   91040:	00911e00 	call	911e0 <alt_iic_isr_register>
}  
   91044:	e037883a 	mov	sp,fp
   91048:	dfc00117 	ldw	ra,4(sp)
   9104c:	df000017 	ldw	fp,0(sp)
   91050:	dec00204 	addi	sp,sp,8
   91054:	f800283a 	ret

00091058 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   91058:	defff904 	addi	sp,sp,-28
   9105c:	df000615 	stw	fp,24(sp)
   91060:	df000604 	addi	fp,sp,24
   91064:	e13ffe15 	stw	r4,-8(fp)
   91068:	e17fff15 	stw	r5,-4(fp)
   9106c:	e0bfff17 	ldw	r2,-4(fp)
   91070:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91074:	0005303a 	rdctl	r2,status
   91078:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9107c:	e0fffb17 	ldw	r3,-20(fp)
   91080:	00bfff84 	movi	r2,-2
   91084:	1884703a 	and	r2,r3,r2
   91088:	1001703a 	wrctl	status,r2
  
  return context;
   9108c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   91090:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   91094:	e0bffa17 	ldw	r2,-24(fp)
   91098:	00c00044 	movi	r3,1
   9109c:	1884983a 	sll	r2,r3,r2
   910a0:	1007883a 	mov	r3,r2
   910a4:	008002f4 	movhi	r2,11
   910a8:	1091e904 	addi	r2,r2,18340
   910ac:	10800017 	ldw	r2,0(r2)
   910b0:	1886b03a 	or	r3,r3,r2
   910b4:	008002f4 	movhi	r2,11
   910b8:	1091e904 	addi	r2,r2,18340
   910bc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   910c0:	008002f4 	movhi	r2,11
   910c4:	1091e904 	addi	r2,r2,18340
   910c8:	10800017 	ldw	r2,0(r2)
   910cc:	100170fa 	wrctl	ienable,r2
   910d0:	e0bffc17 	ldw	r2,-16(fp)
   910d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   910d8:	e0bffd17 	ldw	r2,-12(fp)
   910dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   910e0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   910e4:	e037883a 	mov	sp,fp
   910e8:	df000017 	ldw	fp,0(sp)
   910ec:	dec00104 	addi	sp,sp,4
   910f0:	f800283a 	ret

000910f4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   910f4:	defff904 	addi	sp,sp,-28
   910f8:	df000615 	stw	fp,24(sp)
   910fc:	df000604 	addi	fp,sp,24
   91100:	e13ffe15 	stw	r4,-8(fp)
   91104:	e17fff15 	stw	r5,-4(fp)
   91108:	e0bfff17 	ldw	r2,-4(fp)
   9110c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91110:	0005303a 	rdctl	r2,status
   91114:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91118:	e0fffb17 	ldw	r3,-20(fp)
   9111c:	00bfff84 	movi	r2,-2
   91120:	1884703a 	and	r2,r3,r2
   91124:	1001703a 	wrctl	status,r2
  
  return context;
   91128:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   9112c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   91130:	e0bffa17 	ldw	r2,-24(fp)
   91134:	00c00044 	movi	r3,1
   91138:	1884983a 	sll	r2,r3,r2
   9113c:	0084303a 	nor	r2,zero,r2
   91140:	1007883a 	mov	r3,r2
   91144:	008002f4 	movhi	r2,11
   91148:	1091e904 	addi	r2,r2,18340
   9114c:	10800017 	ldw	r2,0(r2)
   91150:	1886703a 	and	r3,r3,r2
   91154:	008002f4 	movhi	r2,11
   91158:	1091e904 	addi	r2,r2,18340
   9115c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   91160:	008002f4 	movhi	r2,11
   91164:	1091e904 	addi	r2,r2,18340
   91168:	10800017 	ldw	r2,0(r2)
   9116c:	100170fa 	wrctl	ienable,r2
   91170:	e0bffc17 	ldw	r2,-16(fp)
   91174:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91178:	e0bffd17 	ldw	r2,-12(fp)
   9117c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   91180:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   91184:	e037883a 	mov	sp,fp
   91188:	df000017 	ldw	fp,0(sp)
   9118c:	dec00104 	addi	sp,sp,4
   91190:	f800283a 	ret

00091194 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   91194:	defffc04 	addi	sp,sp,-16
   91198:	df000315 	stw	fp,12(sp)
   9119c:	df000304 	addi	fp,sp,12
   911a0:	e13ffe15 	stw	r4,-8(fp)
   911a4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   911a8:	000530fa 	rdctl	r2,ienable
   911ac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   911b0:	e0bfff17 	ldw	r2,-4(fp)
   911b4:	00c00044 	movi	r3,1
   911b8:	1884983a 	sll	r2,r3,r2
   911bc:	1007883a 	mov	r3,r2
   911c0:	e0bffd17 	ldw	r2,-12(fp)
   911c4:	1884703a 	and	r2,r3,r2
   911c8:	1004c03a 	cmpne	r2,r2,zero
   911cc:	10803fcc 	andi	r2,r2,255
}
   911d0:	e037883a 	mov	sp,fp
   911d4:	df000017 	ldw	fp,0(sp)
   911d8:	dec00104 	addi	sp,sp,4
   911dc:	f800283a 	ret

000911e0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   911e0:	defff504 	addi	sp,sp,-44
   911e4:	dfc00a15 	stw	ra,40(sp)
   911e8:	df000915 	stw	fp,36(sp)
   911ec:	df000904 	addi	fp,sp,36
   911f0:	e13ffc15 	stw	r4,-16(fp)
   911f4:	e17ffd15 	stw	r5,-12(fp)
   911f8:	e1bffe15 	stw	r6,-8(fp)
   911fc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   91200:	00bffa84 	movi	r2,-22
   91204:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   91208:	e0bffd17 	ldw	r2,-12(fp)
   9120c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   91210:	e0bff817 	ldw	r2,-32(fp)
   91214:	10800808 	cmpgei	r2,r2,32
   91218:	1000271e 	bne	r2,zero,912b8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   9121c:	0005303a 	rdctl	r2,status
   91220:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   91224:	e0fffa17 	ldw	r3,-24(fp)
   91228:	00bfff84 	movi	r2,-2
   9122c:	1884703a 	and	r2,r3,r2
   91230:	1001703a 	wrctl	status,r2
  
  return context;
   91234:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   91238:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   9123c:	00c002f4 	movhi	r3,11
   91240:	18d1f904 	addi	r3,r3,18404
   91244:	e0bff817 	ldw	r2,-32(fp)
   91248:	100490fa 	slli	r2,r2,3
   9124c:	1885883a 	add	r2,r3,r2
   91250:	e0fffe17 	ldw	r3,-8(fp)
   91254:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   91258:	00c002f4 	movhi	r3,11
   9125c:	18d1f904 	addi	r3,r3,18404
   91260:	e0bff817 	ldw	r2,-32(fp)
   91264:	100490fa 	slli	r2,r2,3
   91268:	1885883a 	add	r2,r3,r2
   9126c:	10800104 	addi	r2,r2,4
   91270:	e0ffff17 	ldw	r3,-4(fp)
   91274:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   91278:	e0bffe17 	ldw	r2,-8(fp)
   9127c:	10000526 	beq	r2,zero,91294 <alt_iic_isr_register+0xb4>
   91280:	e0bff817 	ldw	r2,-32(fp)
   91284:	e13ffc17 	ldw	r4,-16(fp)
   91288:	100b883a 	mov	r5,r2
   9128c:	00910580 	call	91058 <alt_ic_irq_enable>
   91290:	00000406 	br	912a4 <alt_iic_isr_register+0xc4>
   91294:	e0bff817 	ldw	r2,-32(fp)
   91298:	e13ffc17 	ldw	r4,-16(fp)
   9129c:	100b883a 	mov	r5,r2
   912a0:	00910f40 	call	910f4 <alt_ic_irq_disable>
   912a4:	e0bff715 	stw	r2,-36(fp)
   912a8:	e0bff917 	ldw	r2,-28(fp)
   912ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   912b0:	e0bffb17 	ldw	r2,-20(fp)
   912b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   912b8:	e0bff717 	ldw	r2,-36(fp)
}
   912bc:	e037883a 	mov	sp,fp
   912c0:	dfc00117 	ldw	ra,4(sp)
   912c4:	df000017 	ldw	fp,0(sp)
   912c8:	dec00204 	addi	sp,sp,8
   912cc:	f800283a 	ret

000912d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   912d0:	defffe04 	addi	sp,sp,-8
   912d4:	dfc00115 	stw	ra,4(sp)
   912d8:	df000015 	stw	fp,0(sp)
   912dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   912e0:	008002f4 	movhi	r2,11
   912e4:	10845804 	addi	r2,r2,4448
   912e8:	10800017 	ldw	r2,0(r2)
   912ec:	10000526 	beq	r2,zero,91304 <alt_get_errno+0x34>
   912f0:	008002f4 	movhi	r2,11
   912f4:	10845804 	addi	r2,r2,4448
   912f8:	10800017 	ldw	r2,0(r2)
   912fc:	103ee83a 	callr	r2
   91300:	00000206 	br	9130c <alt_get_errno+0x3c>
   91304:	008002f4 	movhi	r2,11
   91308:	1091e504 	addi	r2,r2,18324
}
   9130c:	e037883a 	mov	sp,fp
   91310:	dfc00117 	ldw	ra,4(sp)
   91314:	df000017 	ldw	fp,0(sp)
   91318:	dec00204 	addi	sp,sp,8
   9131c:	f800283a 	ret

00091320 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   91320:	deffed04 	addi	sp,sp,-76
   91324:	dfc01215 	stw	ra,72(sp)
   91328:	df001115 	stw	fp,68(sp)
   9132c:	df001104 	addi	fp,sp,68
   91330:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   91334:	e0bfff17 	ldw	r2,-4(fp)
   91338:	10000616 	blt	r2,zero,91354 <isatty+0x34>
   9133c:	e0bfff17 	ldw	r2,-4(fp)
   91340:	10c00324 	muli	r3,r2,12
   91344:	008002f4 	movhi	r2,11
   91348:	10bfd304 	addi	r2,r2,-180
   9134c:	1885883a 	add	r2,r3,r2
   91350:	00000106 	br	91358 <isatty+0x38>
   91354:	0005883a 	mov	r2,zero
   91358:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   9135c:	e0bfef17 	ldw	r2,-68(fp)
   91360:	10000e26 	beq	r2,zero,9139c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   91364:	e0bfef17 	ldw	r2,-68(fp)
   91368:	10800017 	ldw	r2,0(r2)
   9136c:	10800817 	ldw	r2,32(r2)
   91370:	1000021e 	bne	r2,zero,9137c <isatty+0x5c>
    {
      return 1;
   91374:	00800044 	movi	r2,1
   91378:	00000c06 	br	913ac <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   9137c:	e0bff004 	addi	r2,fp,-64
   91380:	e13fff17 	ldw	r4,-4(fp)
   91384:	100b883a 	mov	r5,r2
   91388:	0090f5c0 	call	90f5c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   9138c:	e0bff117 	ldw	r2,-60(fp)
   91390:	10880020 	cmpeqi	r2,r2,8192
   91394:	10803fcc 	andi	r2,r2,255
   91398:	00000406 	br	913ac <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   9139c:	00912d00 	call	912d0 <alt_get_errno>
   913a0:	00c01444 	movi	r3,81
   913a4:	10c00015 	stw	r3,0(r2)
    return 0;
   913a8:	0005883a 	mov	r2,zero
  }
}
   913ac:	e037883a 	mov	sp,fp
   913b0:	dfc00117 	ldw	ra,4(sp)
   913b4:	df000017 	ldw	fp,0(sp)
   913b8:	dec00204 	addi	sp,sp,8
   913bc:	f800283a 	ret

000913c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   913c0:	defffc04 	addi	sp,sp,-16
   913c4:	df000315 	stw	fp,12(sp)
   913c8:	df000304 	addi	fp,sp,12
   913cc:	e13ffd15 	stw	r4,-12(fp)
   913d0:	e17ffe15 	stw	r5,-8(fp)
   913d4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   913d8:	e0fffe17 	ldw	r3,-8(fp)
   913dc:	e0bffd17 	ldw	r2,-12(fp)
   913e0:	18800e26 	beq	r3,r2,9141c <alt_load_section+0x5c>
  {
    while( to != end )
   913e4:	00000a06 	br	91410 <alt_load_section+0x50>
    {
      *to++ = *from++;
   913e8:	e0bffd17 	ldw	r2,-12(fp)
   913ec:	10c00017 	ldw	r3,0(r2)
   913f0:	e0bffe17 	ldw	r2,-8(fp)
   913f4:	10c00015 	stw	r3,0(r2)
   913f8:	e0bffe17 	ldw	r2,-8(fp)
   913fc:	10800104 	addi	r2,r2,4
   91400:	e0bffe15 	stw	r2,-8(fp)
   91404:	e0bffd17 	ldw	r2,-12(fp)
   91408:	10800104 	addi	r2,r2,4
   9140c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   91410:	e0fffe17 	ldw	r3,-8(fp)
   91414:	e0bfff17 	ldw	r2,-4(fp)
   91418:	18bff31e 	bne	r3,r2,913e8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   9141c:	e037883a 	mov	sp,fp
   91420:	df000017 	ldw	fp,0(sp)
   91424:	dec00104 	addi	sp,sp,4
   91428:	f800283a 	ret

0009142c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   9142c:	defffe04 	addi	sp,sp,-8
   91430:	dfc00115 	stw	ra,4(sp)
   91434:	df000015 	stw	fp,0(sp)
   91438:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   9143c:	010002f4 	movhi	r4,11
   91440:	21045d04 	addi	r4,r4,4468
   91444:	014002f4 	movhi	r5,11
   91448:	2976d904 	addi	r5,r5,-9372
   9144c:	018002f4 	movhi	r6,11
   91450:	31845d04 	addi	r6,r6,4468
   91454:	00913c00 	call	913c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   91458:	01000234 	movhi	r4,8
   9145c:	21000804 	addi	r4,r4,32
   91460:	01400234 	movhi	r5,8
   91464:	29400804 	addi	r5,r5,32
   91468:	01800234 	movhi	r6,8
   9146c:	31806e04 	addi	r6,r6,440
   91470:	00913c00 	call	913c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   91474:	01000274 	movhi	r4,9
   91478:	210e0104 	addi	r4,r4,14340
   9147c:	01400274 	movhi	r5,9
   91480:	294e0104 	addi	r5,r5,14340
   91484:	018002f4 	movhi	r6,11
   91488:	31b6d904 	addi	r6,r6,-9372
   9148c:	00913c00 	call	913c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   91490:	0092b680 	call	92b68 <alt_dcache_flush_all>
  alt_icache_flush_all();
   91494:	0092d540 	call	92d54 <alt_icache_flush_all>
}
   91498:	e037883a 	mov	sp,fp
   9149c:	dfc00117 	ldw	ra,4(sp)
   914a0:	df000017 	ldw	fp,0(sp)
   914a4:	dec00204 	addi	sp,sp,8
   914a8:	f800283a 	ret

000914ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   914ac:	defffe04 	addi	sp,sp,-8
   914b0:	dfc00115 	stw	ra,4(sp)
   914b4:	df000015 	stw	fp,0(sp)
   914b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   914bc:	008002f4 	movhi	r2,11
   914c0:	10845804 	addi	r2,r2,4448
   914c4:	10800017 	ldw	r2,0(r2)
   914c8:	10000526 	beq	r2,zero,914e0 <alt_get_errno+0x34>
   914cc:	008002f4 	movhi	r2,11
   914d0:	10845804 	addi	r2,r2,4448
   914d4:	10800017 	ldw	r2,0(r2)
   914d8:	103ee83a 	callr	r2
   914dc:	00000206 	br	914e8 <alt_get_errno+0x3c>
   914e0:	008002f4 	movhi	r2,11
   914e4:	1091e504 	addi	r2,r2,18324
}
   914e8:	e037883a 	mov	sp,fp
   914ec:	dfc00117 	ldw	ra,4(sp)
   914f0:	df000017 	ldw	fp,0(sp)
   914f4:	dec00204 	addi	sp,sp,8
   914f8:	f800283a 	ret

000914fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   914fc:	defff904 	addi	sp,sp,-28
   91500:	dfc00615 	stw	ra,24(sp)
   91504:	df000515 	stw	fp,20(sp)
   91508:	df000504 	addi	fp,sp,20
   9150c:	e13ffd15 	stw	r4,-12(fp)
   91510:	e17ffe15 	stw	r5,-8(fp)
   91514:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   91518:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   9151c:	e0bffd17 	ldw	r2,-12(fp)
   91520:	10000616 	blt	r2,zero,9153c <lseek+0x40>
   91524:	e0bffd17 	ldw	r2,-12(fp)
   91528:	10c00324 	muli	r3,r2,12
   9152c:	008002f4 	movhi	r2,11
   91530:	10bfd304 	addi	r2,r2,-180
   91534:	1885883a 	add	r2,r3,r2
   91538:	00000106 	br	91540 <lseek+0x44>
   9153c:	0005883a 	mov	r2,zero
   91540:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   91544:	e0bffc17 	ldw	r2,-16(fp)
   91548:	10001026 	beq	r2,zero,9158c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   9154c:	e0bffc17 	ldw	r2,-16(fp)
   91550:	10800017 	ldw	r2,0(r2)
   91554:	10800717 	ldw	r2,28(r2)
   91558:	10000926 	beq	r2,zero,91580 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   9155c:	e0bffc17 	ldw	r2,-16(fp)
   91560:	10800017 	ldw	r2,0(r2)
   91564:	10800717 	ldw	r2,28(r2)
   91568:	e13ffc17 	ldw	r4,-16(fp)
   9156c:	e17ffe17 	ldw	r5,-8(fp)
   91570:	e1bfff17 	ldw	r6,-4(fp)
   91574:	103ee83a 	callr	r2
   91578:	e0bffb15 	stw	r2,-20(fp)
   9157c:	00000506 	br	91594 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   91580:	00bfde84 	movi	r2,-134
   91584:	e0bffb15 	stw	r2,-20(fp)
   91588:	00000206 	br	91594 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   9158c:	00bfebc4 	movi	r2,-81
   91590:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   91594:	e0bffb17 	ldw	r2,-20(fp)
   91598:	1000060e 	bge	r2,zero,915b4 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
   9159c:	00914ac0 	call	914ac <alt_get_errno>
   915a0:	e0fffb17 	ldw	r3,-20(fp)
   915a4:	00c7c83a 	sub	r3,zero,r3
   915a8:	10c00015 	stw	r3,0(r2)
    rc = -1;
   915ac:	00bfffc4 	movi	r2,-1
   915b0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   915b4:	e0bffb17 	ldw	r2,-20(fp)
}
   915b8:	e037883a 	mov	sp,fp
   915bc:	dfc00117 	ldw	ra,4(sp)
   915c0:	df000017 	ldw	fp,0(sp)
   915c4:	dec00204 	addi	sp,sp,8
   915c8:	f800283a 	ret

000915cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   915cc:	defffd04 	addi	sp,sp,-12
   915d0:	dfc00215 	stw	ra,8(sp)
   915d4:	df000115 	stw	fp,4(sp)
   915d8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   915dc:	0009883a 	mov	r4,zero
   915e0:	0091c140 	call	91c14 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   915e4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   915e8:	0091c480 	call	91c48 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   915ec:	010002f4 	movhi	r4,11
   915f0:	2136d104 	addi	r4,r4,-9404
   915f4:	014002f4 	movhi	r5,11
   915f8:	2976d104 	addi	r5,r5,-9404
   915fc:	018002f4 	movhi	r6,11
   91600:	31b6d104 	addi	r6,r6,-9404
   91604:	0092e440 	call	92e44 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   91608:	0092c9c0 	call	92c9c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   9160c:	01000274 	movhi	r4,9
   91610:	210b3e04 	addi	r4,r4,11512
   91614:	00934300 	call	93430 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   91618:	d12d9f17 	ldw	r4,-18820(gp)
   9161c:	d0eda017 	ldw	r3,-18816(gp)
   91620:	d0ada117 	ldw	r2,-18812(gp)
   91624:	180b883a 	mov	r5,r3
   91628:	100d883a 	mov	r6,r2
   9162c:	00852680 	call	85268 <main>
   91630:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   91634:	01000044 	movi	r4,1
   91638:	0090e180 	call	90e18 <close>
  exit (result);
   9163c:	e13fff17 	ldw	r4,-4(fp)
   91640:	00934440 	call	93444 <exit>

00091644 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   91644:	defffe04 	addi	sp,sp,-8
   91648:	df000115 	stw	fp,4(sp)
   9164c:	df000104 	addi	fp,sp,4
   91650:	e13fff15 	stw	r4,-4(fp)
}
   91654:	e037883a 	mov	sp,fp
   91658:	df000017 	ldw	fp,0(sp)
   9165c:	dec00104 	addi	sp,sp,4
   91660:	f800283a 	ret

00091664 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   91664:	defffe04 	addi	sp,sp,-8
   91668:	df000115 	stw	fp,4(sp)
   9166c:	df000104 	addi	fp,sp,4
   91670:	e13fff15 	stw	r4,-4(fp)
}
   91674:	e037883a 	mov	sp,fp
   91678:	df000017 	ldw	fp,0(sp)
   9167c:	dec00104 	addi	sp,sp,4
   91680:	f800283a 	ret

00091684 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   91684:	defffe04 	addi	sp,sp,-8
   91688:	dfc00115 	stw	ra,4(sp)
   9168c:	df000015 	stw	fp,0(sp)
   91690:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   91694:	008002f4 	movhi	r2,11
   91698:	10845804 	addi	r2,r2,4448
   9169c:	10800017 	ldw	r2,0(r2)
   916a0:	10000526 	beq	r2,zero,916b8 <alt_get_errno+0x34>
   916a4:	008002f4 	movhi	r2,11
   916a8:	10845804 	addi	r2,r2,4448
   916ac:	10800017 	ldw	r2,0(r2)
   916b0:	103ee83a 	callr	r2
   916b4:	00000206 	br	916c0 <alt_get_errno+0x3c>
   916b8:	008002f4 	movhi	r2,11
   916bc:	1091e504 	addi	r2,r2,18324
}
   916c0:	e037883a 	mov	sp,fp
   916c4:	dfc00117 	ldw	ra,4(sp)
   916c8:	df000017 	ldw	fp,0(sp)
   916cc:	dec00204 	addi	sp,sp,8
   916d0:	f800283a 	ret

000916d4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   916d4:	defff904 	addi	sp,sp,-28
   916d8:	dfc00615 	stw	ra,24(sp)
   916dc:	df000515 	stw	fp,20(sp)
   916e0:	df000504 	addi	fp,sp,20
   916e4:	e13ffd15 	stw	r4,-12(fp)
   916e8:	e17ffe15 	stw	r5,-8(fp)
   916ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   916f0:	e0bffd17 	ldw	r2,-12(fp)
   916f4:	10000616 	blt	r2,zero,91710 <read+0x3c>
   916f8:	e0bffd17 	ldw	r2,-12(fp)
   916fc:	10c00324 	muli	r3,r2,12
   91700:	008002f4 	movhi	r2,11
   91704:	10bfd304 	addi	r2,r2,-180
   91708:	1885883a 	add	r2,r3,r2
   9170c:	00000106 	br	91714 <read+0x40>
   91710:	0005883a 	mov	r2,zero
   91714:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   91718:	e0bffb17 	ldw	r2,-20(fp)
   9171c:	10002026 	beq	r2,zero,917a0 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   91720:	e0bffb17 	ldw	r2,-20(fp)
   91724:	10800217 	ldw	r2,8(r2)
   91728:	108000cc 	andi	r2,r2,3
   9172c:	10800060 	cmpeqi	r2,r2,1
   91730:	1000171e 	bne	r2,zero,91790 <read+0xbc>
        (fd->dev->read))
   91734:	e0bffb17 	ldw	r2,-20(fp)
   91738:	10800017 	ldw	r2,0(r2)
   9173c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   91740:	10001326 	beq	r2,zero,91790 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   91744:	e0bffb17 	ldw	r2,-20(fp)
   91748:	10800017 	ldw	r2,0(r2)
   9174c:	10c00517 	ldw	r3,20(r2)
   91750:	e0bfff17 	ldw	r2,-4(fp)
   91754:	e13ffb17 	ldw	r4,-20(fp)
   91758:	e17ffe17 	ldw	r5,-8(fp)
   9175c:	100d883a 	mov	r6,r2
   91760:	183ee83a 	callr	r3
   91764:	e0bffc15 	stw	r2,-16(fp)
   91768:	e0bffc17 	ldw	r2,-16(fp)
   9176c:	1000060e 	bge	r2,zero,91788 <read+0xb4>
        {
          ALT_ERRNO = -rval;
   91770:	00916840 	call	91684 <alt_get_errno>
   91774:	e0fffc17 	ldw	r3,-16(fp)
   91778:	00c7c83a 	sub	r3,zero,r3
   9177c:	10c00015 	stw	r3,0(r2)
          return -1;
   91780:	00bfffc4 	movi	r2,-1
   91784:	00000a06 	br	917b0 <read+0xdc>
        }
        return rval;
   91788:	e0bffc17 	ldw	r2,-16(fp)
   9178c:	00000806 	br	917b0 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
   91790:	00916840 	call	91684 <alt_get_errno>
   91794:	00c00344 	movi	r3,13
   91798:	10c00015 	stw	r3,0(r2)
   9179c:	00000306 	br	917ac <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   917a0:	00916840 	call	91684 <alt_get_errno>
   917a4:	00c01444 	movi	r3,81
   917a8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   917ac:	00bfffc4 	movi	r2,-1
}
   917b0:	e037883a 	mov	sp,fp
   917b4:	dfc00117 	ldw	ra,4(sp)
   917b8:	df000017 	ldw	fp,0(sp)
   917bc:	dec00204 	addi	sp,sp,8
   917c0:	f800283a 	ret

000917c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   917c4:	defffe04 	addi	sp,sp,-8
   917c8:	df000115 	stw	fp,4(sp)
   917cc:	df000104 	addi	fp,sp,4
   917d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   917d4:	e0bfff17 	ldw	r2,-4(fp)
   917d8:	108000d0 	cmplti	r2,r2,3
   917dc:	10000d1e 	bne	r2,zero,91814 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   917e0:	00c002f4 	movhi	r3,11
   917e4:	18ffd304 	addi	r3,r3,-180
   917e8:	e0bfff17 	ldw	r2,-4(fp)
   917ec:	10800324 	muli	r2,r2,12
   917f0:	1885883a 	add	r2,r3,r2
   917f4:	10800204 	addi	r2,r2,8
   917f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   917fc:	00c002f4 	movhi	r3,11
   91800:	18ffd304 	addi	r3,r3,-180
   91804:	e0bfff17 	ldw	r2,-4(fp)
   91808:	10800324 	muli	r2,r2,12
   9180c:	1885883a 	add	r2,r3,r2
   91810:	10000015 	stw	zero,0(r2)
  }
}
   91814:	e037883a 	mov	sp,fp
   91818:	df000017 	ldw	fp,0(sp)
   9181c:	dec00104 	addi	sp,sp,4
   91820:	f800283a 	ret

00091824 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   91824:	defff904 	addi	sp,sp,-28
   91828:	df000615 	stw	fp,24(sp)
   9182c:	df000604 	addi	fp,sp,24
   91830:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   91834:	0005303a 	rdctl	r2,status
   91838:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9183c:	e0fffc17 	ldw	r3,-16(fp)
   91840:	00bfff84 	movi	r2,-2
   91844:	1884703a 	and	r2,r3,r2
   91848:	1001703a 	wrctl	status,r2
  
  return context;
   9184c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   91850:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   91854:	d0a00f17 	ldw	r2,-32708(gp)
   91858:	10c000c4 	addi	r3,r2,3
   9185c:	00bfff04 	movi	r2,-4
   91860:	1884703a 	and	r2,r3,r2
   91864:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   91868:	d0e00f17 	ldw	r3,-32708(gp)
   9186c:	e0bfff17 	ldw	r2,-4(fp)
   91870:	1885883a 	add	r2,r3,r2
   91874:	00c00334 	movhi	r3,12
   91878:	18d17004 	addi	r3,r3,17856
   9187c:	1880062e 	bgeu	r3,r2,91898 <sbrk+0x74>
   91880:	e0bffa17 	ldw	r2,-24(fp)
   91884:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91888:	e0bffd17 	ldw	r2,-12(fp)
   9188c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   91890:	00bfffc4 	movi	r2,-1
   91894:	00000b06 	br	918c4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   91898:	d0a00f17 	ldw	r2,-32708(gp)
   9189c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   918a0:	d0e00f17 	ldw	r3,-32708(gp)
   918a4:	e0bfff17 	ldw	r2,-4(fp)
   918a8:	1885883a 	add	r2,r3,r2
   918ac:	d0a00f15 	stw	r2,-32708(gp)
   918b0:	e0bffa17 	ldw	r2,-24(fp)
   918b4:	e0bffe15 	stw	r2,-8(fp)
   918b8:	e0bffe17 	ldw	r2,-8(fp)
   918bc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   918c0:	e0bffb17 	ldw	r2,-20(fp)
} 
   918c4:	e037883a 	mov	sp,fp
   918c8:	df000017 	ldw	fp,0(sp)
   918cc:	dec00104 	addi	sp,sp,4
   918d0:	f800283a 	ret

000918d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   918d4:	defffa04 	addi	sp,sp,-24
   918d8:	df000515 	stw	fp,20(sp)
   918dc:	df000504 	addi	fp,sp,20
   918e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   918e4:	0005303a 	rdctl	r2,status
   918e8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   918ec:	e0fffc17 	ldw	r3,-16(fp)
   918f0:	00bfff84 	movi	r2,-2
   918f4:	1884703a 	and	r2,r3,r2
   918f8:	1001703a 	wrctl	status,r2
  
  return context;
   918fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   91900:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   91904:	e0bfff17 	ldw	r2,-4(fp)
   91908:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   9190c:	e0bffd17 	ldw	r2,-12(fp)
   91910:	10800017 	ldw	r2,0(r2)
   91914:	e0fffd17 	ldw	r3,-12(fp)
   91918:	18c00117 	ldw	r3,4(r3)
   9191c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   91920:	e0bffd17 	ldw	r2,-12(fp)
   91924:	10800117 	ldw	r2,4(r2)
   91928:	e0fffd17 	ldw	r3,-12(fp)
   9192c:	18c00017 	ldw	r3,0(r3)
   91930:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   91934:	e0bffd17 	ldw	r2,-12(fp)
   91938:	e0fffd17 	ldw	r3,-12(fp)
   9193c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   91940:	e0bffd17 	ldw	r2,-12(fp)
   91944:	e0fffd17 	ldw	r3,-12(fp)
   91948:	10c00015 	stw	r3,0(r2)
   9194c:	e0bffb17 	ldw	r2,-20(fp)
   91950:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   91954:	e0bffe17 	ldw	r2,-8(fp)
   91958:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   9195c:	e037883a 	mov	sp,fp
   91960:	df000017 	ldw	fp,0(sp)
   91964:	dec00104 	addi	sp,sp,4
   91968:	f800283a 	ret

0009196c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   9196c:	defffb04 	addi	sp,sp,-20
   91970:	dfc00415 	stw	ra,16(sp)
   91974:	df000315 	stw	fp,12(sp)
   91978:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   9197c:	d0a01017 	ldw	r2,-32704(gp)
   91980:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   91984:	d0ada317 	ldw	r2,-18804(gp)
   91988:	10800044 	addi	r2,r2,1
   9198c:	d0ada315 	stw	r2,-18804(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   91990:	00002e06 	br	91a4c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   91994:	e0bffd17 	ldw	r2,-12(fp)
   91998:	10800017 	ldw	r2,0(r2)
   9199c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   919a0:	e0bffd17 	ldw	r2,-12(fp)
   919a4:	10800403 	ldbu	r2,16(r2)
   919a8:	10803fcc 	andi	r2,r2,255
   919ac:	10000426 	beq	r2,zero,919c0 <alt_tick+0x54>
   919b0:	d0ada317 	ldw	r2,-18804(gp)
   919b4:	1000021e 	bne	r2,zero,919c0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   919b8:	e0bffd17 	ldw	r2,-12(fp)
   919bc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   919c0:	e0bffd17 	ldw	r2,-12(fp)
   919c4:	10800217 	ldw	r2,8(r2)
   919c8:	d0eda317 	ldw	r3,-18804(gp)
   919cc:	18801d36 	bltu	r3,r2,91a44 <alt_tick+0xd8>
   919d0:	e0bffd17 	ldw	r2,-12(fp)
   919d4:	10800403 	ldbu	r2,16(r2)
   919d8:	10803fcc 	andi	r2,r2,255
   919dc:	1000191e 	bne	r2,zero,91a44 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   919e0:	e0bffd17 	ldw	r2,-12(fp)
   919e4:	10c00317 	ldw	r3,12(r2)
   919e8:	e0bffd17 	ldw	r2,-12(fp)
   919ec:	10800517 	ldw	r2,20(r2)
   919f0:	1009883a 	mov	r4,r2
   919f4:	183ee83a 	callr	r3
   919f8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   919fc:	e0bfff17 	ldw	r2,-4(fp)
   91a00:	1000031e 	bne	r2,zero,91a10 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   91a04:	e13ffd17 	ldw	r4,-12(fp)
   91a08:	00918d40 	call	918d4 <alt_alarm_stop>
   91a0c:	00000d06 	br	91a44 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   91a10:	e0bffd17 	ldw	r2,-12(fp)
   91a14:	10c00217 	ldw	r3,8(r2)
   91a18:	e0bfff17 	ldw	r2,-4(fp)
   91a1c:	1887883a 	add	r3,r3,r2
   91a20:	e0bffd17 	ldw	r2,-12(fp)
   91a24:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   91a28:	e0bffd17 	ldw	r2,-12(fp)
   91a2c:	10c00217 	ldw	r3,8(r2)
   91a30:	d0ada317 	ldw	r2,-18804(gp)
   91a34:	1880032e 	bgeu	r3,r2,91a44 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   91a38:	e0bffd17 	ldw	r2,-12(fp)
   91a3c:	00c00044 	movi	r3,1
   91a40:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   91a44:	e0bffe17 	ldw	r2,-8(fp)
   91a48:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   91a4c:	e0fffd17 	ldw	r3,-12(fp)
   91a50:	d0a01004 	addi	r2,gp,-32704
   91a54:	18bfcf1e 	bne	r3,r2,91994 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   91a58:	0001883a 	nop
}
   91a5c:	e037883a 	mov	sp,fp
   91a60:	dfc00117 	ldw	ra,4(sp)
   91a64:	df000017 	ldw	fp,0(sp)
   91a68:	dec00204 	addi	sp,sp,8
   91a6c:	f800283a 	ret

00091a70 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   91a70:	defffd04 	addi	sp,sp,-12
   91a74:	dfc00215 	stw	ra,8(sp)
   91a78:	df000115 	stw	fp,4(sp)
   91a7c:	df000104 	addi	fp,sp,4
   91a80:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   91a84:	e13fff17 	ldw	r4,-4(fp)
   91a88:	0092a140 	call	92a14 <alt_busy_sleep>
}
   91a8c:	e037883a 	mov	sp,fp
   91a90:	dfc00117 	ldw	ra,4(sp)
   91a94:	df000017 	ldw	fp,0(sp)
   91a98:	dec00204 	addi	sp,sp,8
   91a9c:	f800283a 	ret

00091aa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   91aa0:	defffe04 	addi	sp,sp,-8
   91aa4:	dfc00115 	stw	ra,4(sp)
   91aa8:	df000015 	stw	fp,0(sp)
   91aac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   91ab0:	008002f4 	movhi	r2,11
   91ab4:	10845804 	addi	r2,r2,4448
   91ab8:	10800017 	ldw	r2,0(r2)
   91abc:	10000526 	beq	r2,zero,91ad4 <alt_get_errno+0x34>
   91ac0:	008002f4 	movhi	r2,11
   91ac4:	10845804 	addi	r2,r2,4448
   91ac8:	10800017 	ldw	r2,0(r2)
   91acc:	103ee83a 	callr	r2
   91ad0:	00000206 	br	91adc <alt_get_errno+0x3c>
   91ad4:	008002f4 	movhi	r2,11
   91ad8:	1091e504 	addi	r2,r2,18324
}
   91adc:	e037883a 	mov	sp,fp
   91ae0:	dfc00117 	ldw	ra,4(sp)
   91ae4:	df000017 	ldw	fp,0(sp)
   91ae8:	dec00204 	addi	sp,sp,8
   91aec:	f800283a 	ret

00091af0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   91af0:	defff904 	addi	sp,sp,-28
   91af4:	dfc00615 	stw	ra,24(sp)
   91af8:	df000515 	stw	fp,20(sp)
   91afc:	df000504 	addi	fp,sp,20
   91b00:	e13ffd15 	stw	r4,-12(fp)
   91b04:	e17ffe15 	stw	r5,-8(fp)
   91b08:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   91b0c:	e0bffd17 	ldw	r2,-12(fp)
   91b10:	10000616 	blt	r2,zero,91b2c <write+0x3c>
   91b14:	e0bffd17 	ldw	r2,-12(fp)
   91b18:	10c00324 	muli	r3,r2,12
   91b1c:	008002f4 	movhi	r2,11
   91b20:	10bfd304 	addi	r2,r2,-180
   91b24:	1885883a 	add	r2,r3,r2
   91b28:	00000106 	br	91b30 <write+0x40>
   91b2c:	0005883a 	mov	r2,zero
   91b30:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   91b34:	e0bffb17 	ldw	r2,-20(fp)
   91b38:	10001f26 	beq	r2,zero,91bb8 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   91b3c:	e0bffb17 	ldw	r2,-20(fp)
   91b40:	10800217 	ldw	r2,8(r2)
   91b44:	108000cc 	andi	r2,r2,3
   91b48:	10001726 	beq	r2,zero,91ba8 <write+0xb8>
   91b4c:	e0bffb17 	ldw	r2,-20(fp)
   91b50:	10800017 	ldw	r2,0(r2)
   91b54:	10800617 	ldw	r2,24(r2)
   91b58:	10001326 	beq	r2,zero,91ba8 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   91b5c:	e0bffb17 	ldw	r2,-20(fp)
   91b60:	10800017 	ldw	r2,0(r2)
   91b64:	10c00617 	ldw	r3,24(r2)
   91b68:	e0bfff17 	ldw	r2,-4(fp)
   91b6c:	e13ffb17 	ldw	r4,-20(fp)
   91b70:	e17ffe17 	ldw	r5,-8(fp)
   91b74:	100d883a 	mov	r6,r2
   91b78:	183ee83a 	callr	r3
   91b7c:	e0bffc15 	stw	r2,-16(fp)
   91b80:	e0bffc17 	ldw	r2,-16(fp)
   91b84:	1000060e 	bge	r2,zero,91ba0 <write+0xb0>
      {
        ALT_ERRNO = -rval;
   91b88:	0091aa00 	call	91aa0 <alt_get_errno>
   91b8c:	e0fffc17 	ldw	r3,-16(fp)
   91b90:	00c7c83a 	sub	r3,zero,r3
   91b94:	10c00015 	stw	r3,0(r2)
        return -1;
   91b98:	00bfffc4 	movi	r2,-1
   91b9c:	00000a06 	br	91bc8 <write+0xd8>
      }
      return rval;
   91ba0:	e0bffc17 	ldw	r2,-16(fp)
   91ba4:	00000806 	br	91bc8 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
   91ba8:	0091aa00 	call	91aa0 <alt_get_errno>
   91bac:	00c00344 	movi	r3,13
   91bb0:	10c00015 	stw	r3,0(r2)
   91bb4:	00000306 	br	91bc4 <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   91bb8:	0091aa00 	call	91aa0 <alt_get_errno>
   91bbc:	00c01444 	movi	r3,81
   91bc0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   91bc4:	00bfffc4 	movi	r2,-1
}
   91bc8:	e037883a 	mov	sp,fp
   91bcc:	dfc00117 	ldw	ra,4(sp)
   91bd0:	df000017 	ldw	fp,0(sp)
   91bd4:	dec00204 	addi	sp,sp,8
   91bd8:	f800283a 	ret

00091bdc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   91bdc:	defffd04 	addi	sp,sp,-12
   91be0:	dfc00215 	stw	ra,8(sp)
   91be4:	df000115 	stw	fp,4(sp)
   91be8:	df000104 	addi	fp,sp,4
   91bec:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   91bf0:	e13fff17 	ldw	r4,-4(fp)
   91bf4:	014002f4 	movhi	r5,11
   91bf8:	29445504 	addi	r5,r5,4436
   91bfc:	0092bfc0 	call	92bfc <alt_dev_llist_insert>
}
   91c00:	e037883a 	mov	sp,fp
   91c04:	dfc00117 	ldw	ra,4(sp)
   91c08:	df000017 	ldw	fp,0(sp)
   91c0c:	dec00204 	addi	sp,sp,8
   91c10:	f800283a 	ret

00091c14 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   91c14:	defffd04 	addi	sp,sp,-12
   91c18:	dfc00215 	stw	ra,8(sp)
   91c1c:	df000115 	stw	fp,4(sp)
   91c20:	df000104 	addi	fp,sp,4
   91c24:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   91c28:	009312c0 	call	9312c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   91c2c:	00800044 	movi	r2,1
   91c30:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   91c34:	e037883a 	mov	sp,fp
   91c38:	dfc00117 	ldw	ra,4(sp)
   91c3c:	df000017 	ldw	fp,0(sp)
   91c40:	dec00204 	addi	sp,sp,8
   91c44:	f800283a 	ret

00091c48 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   91c48:	defffe04 	addi	sp,sp,-8
   91c4c:	dfc00115 	stw	ra,4(sp)
   91c50:	df000015 	stw	fp,0(sp)
   91c54:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   91c58:	01000434 	movhi	r4,16
   91c5c:	21040804 	addi	r4,r4,4128
   91c60:	000b883a 	mov	r5,zero
   91c64:	01800044 	movi	r6,1
   91c68:	01c0fa04 	movi	r7,1000
   91c6c:	009298c0 	call	9298c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   91c70:	010002f4 	movhi	r4,11
   91c74:	21003d04 	addi	r4,r4,244
   91c78:	000b883a 	mov	r5,zero
   91c7c:	000d883a 	mov	r6,zero
   91c80:	0091e100 	call	91e10 <altera_avalon_jtag_uart_init>
   91c84:	010002f4 	movhi	r4,11
   91c88:	21003304 	addi	r4,r4,204
   91c8c:	0091bdc0 	call	91bdc <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( TOUCH_PANEL_SPI, touch_panel_spi);
   91c90:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   91c94:	0001883a 	nop
}
   91c98:	e037883a 	mov	sp,fp
   91c9c:	dfc00117 	ldw	ra,4(sp)
   91ca0:	df000017 	ldw	fp,0(sp)
   91ca4:	dec00204 	addi	sp,sp,8
   91ca8:	f800283a 	ret

00091cac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   91cac:	defffa04 	addi	sp,sp,-24
   91cb0:	dfc00515 	stw	ra,20(sp)
   91cb4:	df000415 	stw	fp,16(sp)
   91cb8:	df000404 	addi	fp,sp,16
   91cbc:	e13ffd15 	stw	r4,-12(fp)
   91cc0:	e17ffe15 	stw	r5,-8(fp)
   91cc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   91cc8:	e0bffd17 	ldw	r2,-12(fp)
   91ccc:	10800017 	ldw	r2,0(r2)
   91cd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   91cd4:	e0bffc17 	ldw	r2,-16(fp)
   91cd8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   91cdc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   91ce0:	10800217 	ldw	r2,8(r2)
   91ce4:	1809883a 	mov	r4,r3
   91ce8:	e17ffe17 	ldw	r5,-8(fp)
   91cec:	e1bfff17 	ldw	r6,-4(fp)
   91cf0:	100f883a 	mov	r7,r2
   91cf4:	00922d40 	call	922d4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   91cf8:	e037883a 	mov	sp,fp
   91cfc:	dfc00117 	ldw	ra,4(sp)
   91d00:	df000017 	ldw	fp,0(sp)
   91d04:	dec00204 	addi	sp,sp,8
   91d08:	f800283a 	ret

00091d0c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   91d0c:	defffa04 	addi	sp,sp,-24
   91d10:	dfc00515 	stw	ra,20(sp)
   91d14:	df000415 	stw	fp,16(sp)
   91d18:	df000404 	addi	fp,sp,16
   91d1c:	e13ffd15 	stw	r4,-12(fp)
   91d20:	e17ffe15 	stw	r5,-8(fp)
   91d24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   91d28:	e0bffd17 	ldw	r2,-12(fp)
   91d2c:	10800017 	ldw	r2,0(r2)
   91d30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   91d34:	e0bffc17 	ldw	r2,-16(fp)
   91d38:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
   91d3c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   91d40:	10800217 	ldw	r2,8(r2)
   91d44:	1809883a 	mov	r4,r3
   91d48:	e17ffe17 	ldw	r5,-8(fp)
   91d4c:	e1bfff17 	ldw	r6,-4(fp)
   91d50:	100f883a 	mov	r7,r2
   91d54:	00924ec0 	call	924ec <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   91d58:	e037883a 	mov	sp,fp
   91d5c:	dfc00117 	ldw	ra,4(sp)
   91d60:	df000017 	ldw	fp,0(sp)
   91d64:	dec00204 	addi	sp,sp,8
   91d68:	f800283a 	ret

00091d6c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   91d6c:	defffc04 	addi	sp,sp,-16
   91d70:	dfc00315 	stw	ra,12(sp)
   91d74:	df000215 	stw	fp,8(sp)
   91d78:	df000204 	addi	fp,sp,8
   91d7c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   91d80:	e0bfff17 	ldw	r2,-4(fp)
   91d84:	10800017 	ldw	r2,0(r2)
   91d88:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   91d8c:	e0bffe17 	ldw	r2,-8(fp)
   91d90:	10c00a04 	addi	r3,r2,40
   91d94:	e0bfff17 	ldw	r2,-4(fp)
   91d98:	10800217 	ldw	r2,8(r2)
   91d9c:	1809883a 	mov	r4,r3
   91da0:	100b883a 	mov	r5,r2
   91da4:	00921780 	call	92178 <altera_avalon_jtag_uart_close>
}
   91da8:	e037883a 	mov	sp,fp
   91dac:	dfc00117 	ldw	ra,4(sp)
   91db0:	df000017 	ldw	fp,0(sp)
   91db4:	dec00204 	addi	sp,sp,8
   91db8:	f800283a 	ret

00091dbc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   91dbc:	defffa04 	addi	sp,sp,-24
   91dc0:	dfc00515 	stw	ra,20(sp)
   91dc4:	df000415 	stw	fp,16(sp)
   91dc8:	df000404 	addi	fp,sp,16
   91dcc:	e13ffd15 	stw	r4,-12(fp)
   91dd0:	e17ffe15 	stw	r5,-8(fp)
   91dd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   91dd8:	e0bffd17 	ldw	r2,-12(fp)
   91ddc:	10800017 	ldw	r2,0(r2)
   91de0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   91de4:	e0bffc17 	ldw	r2,-16(fp)
   91de8:	10800a04 	addi	r2,r2,40
   91dec:	1009883a 	mov	r4,r2
   91df0:	e17ffe17 	ldw	r5,-8(fp)
   91df4:	e1bfff17 	ldw	r6,-4(fp)
   91df8:	00921e00 	call	921e0 <altera_avalon_jtag_uart_ioctl>
}
   91dfc:	e037883a 	mov	sp,fp
   91e00:	dfc00117 	ldw	ra,4(sp)
   91e04:	df000017 	ldw	fp,0(sp)
   91e08:	dec00204 	addi	sp,sp,8
   91e0c:	f800283a 	ret

00091e10 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   91e10:	defffa04 	addi	sp,sp,-24
   91e14:	dfc00515 	stw	ra,20(sp)
   91e18:	df000415 	stw	fp,16(sp)
   91e1c:	df000404 	addi	fp,sp,16
   91e20:	e13ffd15 	stw	r4,-12(fp)
   91e24:	e17ffe15 	stw	r5,-8(fp)
   91e28:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   91e2c:	e0bffd17 	ldw	r2,-12(fp)
   91e30:	00c00044 	movi	r3,1
   91e34:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   91e38:	e0bffd17 	ldw	r2,-12(fp)
   91e3c:	10800017 	ldw	r2,0(r2)
   91e40:	10800104 	addi	r2,r2,4
   91e44:	e0fffd17 	ldw	r3,-12(fp)
   91e48:	18c00817 	ldw	r3,32(r3)
   91e4c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   91e50:	e0fffe17 	ldw	r3,-8(fp)
   91e54:	e0bfff17 	ldw	r2,-4(fp)
   91e58:	d8000015 	stw	zero,0(sp)
   91e5c:	1809883a 	mov	r4,r3
   91e60:	100b883a 	mov	r5,r2
   91e64:	01800274 	movhi	r6,9
   91e68:	3187b404 	addi	r6,r6,7888
   91e6c:	e1fffd17 	ldw	r7,-12(fp)
   91e70:	00910080 	call	91008 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   91e74:	e0bffd17 	ldw	r2,-12(fp)
   91e78:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   91e7c:	e0bffd17 	ldw	r2,-12(fp)
   91e80:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   91e84:	008002f4 	movhi	r2,11
   91e88:	1091ed04 	addi	r2,r2,18356
   91e8c:	10800017 	ldw	r2,0(r2)
   91e90:	1809883a 	mov	r4,r3
   91e94:	100b883a 	mov	r5,r2
   91e98:	01800274 	movhi	r6,9
   91e9c:	31883504 	addi	r6,r6,8404
   91ea0:	e1fffd17 	ldw	r7,-12(fp)
   91ea4:	0090c880 	call	90c88 <alt_alarm_start>
   91ea8:	1000040e 	bge	r2,zero,91ebc <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   91eac:	e0bffd17 	ldw	r2,-12(fp)
   91eb0:	00e00034 	movhi	r3,32768
   91eb4:	18ffffc4 	addi	r3,r3,-1
   91eb8:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   91ebc:	e037883a 	mov	sp,fp
   91ec0:	dfc00117 	ldw	ra,4(sp)
   91ec4:	df000017 	ldw	fp,0(sp)
   91ec8:	dec00204 	addi	sp,sp,8
   91ecc:	f800283a 	ret

00091ed0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   91ed0:	defff804 	addi	sp,sp,-32
   91ed4:	df000715 	stw	fp,28(sp)
   91ed8:	df000704 	addi	fp,sp,28
   91edc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   91ee0:	e0bfff17 	ldw	r2,-4(fp)
   91ee4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   91ee8:	e0bffb17 	ldw	r2,-20(fp)
   91eec:	10800017 	ldw	r2,0(r2)
   91ef0:	e0bffc15 	stw	r2,-16(fp)
   91ef4:	00000106 	br	91efc <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
   91ef8:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   91efc:	e0bffc17 	ldw	r2,-16(fp)
   91f00:	10800104 	addi	r2,r2,4
   91f04:	10800037 	ldwio	r2,0(r2)
   91f08:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   91f0c:	e0bffd17 	ldw	r2,-12(fp)
   91f10:	1080c00c 	andi	r2,r2,768
   91f14:	10006a26 	beq	r2,zero,920c0 <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   91f18:	e0bffd17 	ldw	r2,-12(fp)
   91f1c:	1080400c 	andi	r2,r2,256
   91f20:	10003326 	beq	r2,zero,91ff0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   91f24:	00800074 	movhi	r2,1
   91f28:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   91f2c:	e0bffb17 	ldw	r2,-20(fp)
   91f30:	10800a17 	ldw	r2,40(r2)
   91f34:	10800044 	addi	r2,r2,1
   91f38:	1081ffcc 	andi	r2,r2,2047
   91f3c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   91f40:	e0bffb17 	ldw	r2,-20(fp)
   91f44:	10c00b17 	ldw	r3,44(r2)
   91f48:	e0bffe17 	ldw	r2,-8(fp)
   91f4c:	18801426 	beq	r3,r2,91fa0 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   91f50:	e0bffc17 	ldw	r2,-16(fp)
   91f54:	10800037 	ldwio	r2,0(r2)
   91f58:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   91f5c:	e0bff917 	ldw	r2,-28(fp)
   91f60:	10a0000c 	andi	r2,r2,32768
   91f64:	10001026 	beq	r2,zero,91fa8 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   91f68:	e0bffb17 	ldw	r2,-20(fp)
   91f6c:	10800a17 	ldw	r2,40(r2)
   91f70:	e0fff917 	ldw	r3,-28(fp)
   91f74:	e13ffb17 	ldw	r4,-20(fp)
   91f78:	2085883a 	add	r2,r4,r2
   91f7c:	10800e04 	addi	r2,r2,56
   91f80:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   91f84:	e0bffb17 	ldw	r2,-20(fp)
   91f88:	10800a17 	ldw	r2,40(r2)
   91f8c:	10800044 	addi	r2,r2,1
   91f90:	10c1ffcc 	andi	r3,r2,2047
   91f94:	e0bffb17 	ldw	r2,-20(fp)
   91f98:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   91f9c:	003fe306 	br	91f2c <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   91fa0:	0001883a 	nop
   91fa4:	00000106 	br	91fac <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   91fa8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   91fac:	e0bff917 	ldw	r2,-28(fp)
   91fb0:	10bfffec 	andhi	r2,r2,65535
   91fb4:	10000e26 	beq	r2,zero,91ff0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   91fb8:	e0bffb17 	ldw	r2,-20(fp)
   91fbc:	10c00817 	ldw	r3,32(r2)
   91fc0:	00bfff84 	movi	r2,-2
   91fc4:	1886703a 	and	r3,r3,r2
   91fc8:	e0bffb17 	ldw	r2,-20(fp)
   91fcc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   91fd0:	e0bffc17 	ldw	r2,-16(fp)
   91fd4:	10800104 	addi	r2,r2,4
   91fd8:	e0fffb17 	ldw	r3,-20(fp)
   91fdc:	18c00817 	ldw	r3,32(r3)
   91fe0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   91fe4:	e0bffc17 	ldw	r2,-16(fp)
   91fe8:	10800104 	addi	r2,r2,4
   91fec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   91ff0:	e0bffd17 	ldw	r2,-12(fp)
   91ff4:	1080800c 	andi	r2,r2,512
   91ff8:	103fbf26 	beq	r2,zero,91ef8 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   91ffc:	e0bffd17 	ldw	r2,-12(fp)
   92000:	1004d43a 	srli	r2,r2,16
   92004:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   92008:	00001406 	br	9205c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   9200c:	e0bffc17 	ldw	r2,-16(fp)
   92010:	e0fffb17 	ldw	r3,-20(fp)
   92014:	18c00d17 	ldw	r3,52(r3)
   92018:	e13ffb17 	ldw	r4,-20(fp)
   9201c:	20c7883a 	add	r3,r4,r3
   92020:	18c20e04 	addi	r3,r3,2104
   92024:	18c00003 	ldbu	r3,0(r3)
   92028:	18c03fcc 	andi	r3,r3,255
   9202c:	18c0201c 	xori	r3,r3,128
   92030:	18ffe004 	addi	r3,r3,-128
   92034:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   92038:	e0bffb17 	ldw	r2,-20(fp)
   9203c:	10800d17 	ldw	r2,52(r2)
   92040:	10800044 	addi	r2,r2,1
   92044:	10c1ffcc 	andi	r3,r2,2047
   92048:	e0bffb17 	ldw	r2,-20(fp)
   9204c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   92050:	e0bffa17 	ldw	r2,-24(fp)
   92054:	10bfffc4 	addi	r2,r2,-1
   92058:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   9205c:	e0bffa17 	ldw	r2,-24(fp)
   92060:	10000526 	beq	r2,zero,92078 <altera_avalon_jtag_uart_irq+0x1a8>
   92064:	e0bffb17 	ldw	r2,-20(fp)
   92068:	10c00d17 	ldw	r3,52(r2)
   9206c:	e0bffb17 	ldw	r2,-20(fp)
   92070:	10800c17 	ldw	r2,48(r2)
   92074:	18bfe51e 	bne	r3,r2,9200c <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   92078:	e0bffa17 	ldw	r2,-24(fp)
   9207c:	103f9e26 	beq	r2,zero,91ef8 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   92080:	e0bffb17 	ldw	r2,-20(fp)
   92084:	10c00817 	ldw	r3,32(r2)
   92088:	00bfff44 	movi	r2,-3
   9208c:	1886703a 	and	r3,r3,r2
   92090:	e0bffb17 	ldw	r2,-20(fp)
   92094:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   92098:	e0bffb17 	ldw	r2,-20(fp)
   9209c:	10800017 	ldw	r2,0(r2)
   920a0:	10800104 	addi	r2,r2,4
   920a4:	e0fffb17 	ldw	r3,-20(fp)
   920a8:	18c00817 	ldw	r3,32(r3)
   920ac:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   920b0:	e0bffc17 	ldw	r2,-16(fp)
   920b4:	10800104 	addi	r2,r2,4
   920b8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   920bc:	003f8e06 	br	91ef8 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   920c0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   920c4:	e037883a 	mov	sp,fp
   920c8:	df000017 	ldw	fp,0(sp)
   920cc:	dec00104 	addi	sp,sp,4
   920d0:	f800283a 	ret

000920d4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   920d4:	defffc04 	addi	sp,sp,-16
   920d8:	df000315 	stw	fp,12(sp)
   920dc:	df000304 	addi	fp,sp,12
   920e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   920e4:	e0bfff17 	ldw	r2,-4(fp)
   920e8:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   920ec:	e0bffd17 	ldw	r2,-12(fp)
   920f0:	10800017 	ldw	r2,0(r2)
   920f4:	10800104 	addi	r2,r2,4
   920f8:	10800037 	ldwio	r2,0(r2)
   920fc:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   92100:	e0bffe17 	ldw	r2,-8(fp)
   92104:	1081000c 	andi	r2,r2,1024
   92108:	10000a26 	beq	r2,zero,92134 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   9210c:	e0bffd17 	ldw	r2,-12(fp)
   92110:	10800017 	ldw	r2,0(r2)
   92114:	10800104 	addi	r2,r2,4
   92118:	e0fffd17 	ldw	r3,-12(fp)
   9211c:	18c00817 	ldw	r3,32(r3)
   92120:	18c10014 	ori	r3,r3,1024
   92124:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
   92128:	e0bffd17 	ldw	r2,-12(fp)
   9212c:	10000915 	stw	zero,36(r2)
   92130:	00000a06 	br	9215c <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   92134:	e0bffd17 	ldw	r2,-12(fp)
   92138:	10800917 	ldw	r2,36(r2)
   9213c:	00e00034 	movhi	r3,32768
   92140:	18ffff04 	addi	r3,r3,-4
   92144:	18800536 	bltu	r3,r2,9215c <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
   92148:	e0bffd17 	ldw	r2,-12(fp)
   9214c:	10800917 	ldw	r2,36(r2)
   92150:	10c00044 	addi	r3,r2,1
   92154:	e0bffd17 	ldw	r2,-12(fp)
   92158:	10c00915 	stw	r3,36(r2)
   9215c:	008002f4 	movhi	r2,11
   92160:	1091ed04 	addi	r2,r2,18356
   92164:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   92168:	e037883a 	mov	sp,fp
   9216c:	df000017 	ldw	fp,0(sp)
   92170:	dec00104 	addi	sp,sp,4
   92174:	f800283a 	ret

00092178 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   92178:	defffd04 	addi	sp,sp,-12
   9217c:	df000215 	stw	fp,8(sp)
   92180:	df000204 	addi	fp,sp,8
   92184:	e13ffe15 	stw	r4,-8(fp)
   92188:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   9218c:	00000506 	br	921a4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   92190:	e0bfff17 	ldw	r2,-4(fp)
   92194:	1090000c 	andi	r2,r2,16384
   92198:	10000226 	beq	r2,zero,921a4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   9219c:	00bffd44 	movi	r2,-11
   921a0:	00000b06 	br	921d0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   921a4:	e0bffe17 	ldw	r2,-8(fp)
   921a8:	10c00d17 	ldw	r3,52(r2)
   921ac:	e0bffe17 	ldw	r2,-8(fp)
   921b0:	10800c17 	ldw	r2,48(r2)
   921b4:	18800526 	beq	r3,r2,921cc <altera_avalon_jtag_uart_close+0x54>
   921b8:	e0bffe17 	ldw	r2,-8(fp)
   921bc:	10c00917 	ldw	r3,36(r2)
   921c0:	e0bffe17 	ldw	r2,-8(fp)
   921c4:	10800117 	ldw	r2,4(r2)
   921c8:	18bff136 	bltu	r3,r2,92190 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   921cc:	0005883a 	mov	r2,zero
}
   921d0:	e037883a 	mov	sp,fp
   921d4:	df000017 	ldw	fp,0(sp)
   921d8:	dec00104 	addi	sp,sp,4
   921dc:	f800283a 	ret

000921e0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   921e0:	defffa04 	addi	sp,sp,-24
   921e4:	df000515 	stw	fp,20(sp)
   921e8:	df000504 	addi	fp,sp,20
   921ec:	e13ffd15 	stw	r4,-12(fp)
   921f0:	e17ffe15 	stw	r5,-8(fp)
   921f4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   921f8:	00bff9c4 	movi	r2,-25
   921fc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   92200:	e0bffe17 	ldw	r2,-8(fp)
   92204:	10da8060 	cmpeqi	r3,r2,27137
   92208:	1800031e 	bne	r3,zero,92218 <altera_avalon_jtag_uart_ioctl+0x38>
   9220c:	109a80a0 	cmpeqi	r2,r2,27138
   92210:	1000181e 	bne	r2,zero,92274 <altera_avalon_jtag_uart_ioctl+0x94>
   92214:	00002606 	br	922b0 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   92218:	e0bffd17 	ldw	r2,-12(fp)
   9221c:	10c00117 	ldw	r3,4(r2)
   92220:	00a00034 	movhi	r2,32768
   92224:	10bfffc4 	addi	r2,r2,-1
   92228:	18802226 	beq	r3,r2,922b4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
   9222c:	e0bfff17 	ldw	r2,-4(fp)
   92230:	10800017 	ldw	r2,0(r2)
   92234:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   92238:	e0bffc17 	ldw	r2,-16(fp)
   9223c:	10800090 	cmplti	r2,r2,2
   92240:	1000061e 	bne	r2,zero,9225c <altera_avalon_jtag_uart_ioctl+0x7c>
   92244:	e0fffc17 	ldw	r3,-16(fp)
   92248:	00a00034 	movhi	r2,32768
   9224c:	10bfffc4 	addi	r2,r2,-1
   92250:	18800226 	beq	r3,r2,9225c <altera_avalon_jtag_uart_ioctl+0x7c>
   92254:	e0bffc17 	ldw	r2,-16(fp)
   92258:	00000206 	br	92264 <altera_avalon_jtag_uart_ioctl+0x84>
   9225c:	00a00034 	movhi	r2,32768
   92260:	10bfff84 	addi	r2,r2,-2
   92264:	e0fffd17 	ldw	r3,-12(fp)
   92268:	18800115 	stw	r2,4(r3)
      rc = 0;
   9226c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   92270:	00001006 	br	922b4 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   92274:	e0bffd17 	ldw	r2,-12(fp)
   92278:	10c00117 	ldw	r3,4(r2)
   9227c:	00a00034 	movhi	r2,32768
   92280:	10bfffc4 	addi	r2,r2,-1
   92284:	18800d26 	beq	r3,r2,922bc <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   92288:	e0bffd17 	ldw	r2,-12(fp)
   9228c:	10c00917 	ldw	r3,36(r2)
   92290:	e0bffd17 	ldw	r2,-12(fp)
   92294:	10800117 	ldw	r2,4(r2)
   92298:	1885803a 	cmpltu	r2,r3,r2
   9229c:	10c03fcc 	andi	r3,r2,255
   922a0:	e0bfff17 	ldw	r2,-4(fp)
   922a4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   922a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   922ac:	00000306 	br	922bc <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
   922b0:	00000306 	br	922c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   922b4:	0001883a 	nop
   922b8:	00000106 	br	922c0 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   922bc:	0001883a 	nop

  default:
    break;
  }

  return rc;
   922c0:	e0bffb17 	ldw	r2,-20(fp)
}
   922c4:	e037883a 	mov	sp,fp
   922c8:	df000017 	ldw	fp,0(sp)
   922cc:	dec00104 	addi	sp,sp,4
   922d0:	f800283a 	ret

000922d4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   922d4:	defff304 	addi	sp,sp,-52
   922d8:	dfc00c15 	stw	ra,48(sp)
   922dc:	df000b15 	stw	fp,44(sp)
   922e0:	df000b04 	addi	fp,sp,44
   922e4:	e13ffc15 	stw	r4,-16(fp)
   922e8:	e17ffd15 	stw	r5,-12(fp)
   922ec:	e1bffe15 	stw	r6,-8(fp)
   922f0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   922f4:	e0bffd17 	ldw	r2,-12(fp)
   922f8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   922fc:	00004706 	br	9241c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   92300:	e0bffc17 	ldw	r2,-16(fp)
   92304:	10800a17 	ldw	r2,40(r2)
   92308:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   9230c:	e0bffc17 	ldw	r2,-16(fp)
   92310:	10800b17 	ldw	r2,44(r2)
   92314:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   92318:	e0fff717 	ldw	r3,-36(fp)
   9231c:	e0bff817 	ldw	r2,-32(fp)
   92320:	18800536 	bltu	r3,r2,92338 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   92324:	e0fff717 	ldw	r3,-36(fp)
   92328:	e0bff817 	ldw	r2,-32(fp)
   9232c:	1885c83a 	sub	r2,r3,r2
   92330:	e0bff615 	stw	r2,-40(fp)
   92334:	00000406 	br	92348 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   92338:	00c20004 	movi	r3,2048
   9233c:	e0bff817 	ldw	r2,-32(fp)
   92340:	1885c83a 	sub	r2,r3,r2
   92344:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   92348:	e0bff617 	ldw	r2,-40(fp)
   9234c:	10001e26 	beq	r2,zero,923c8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   92350:	e0fffe17 	ldw	r3,-8(fp)
   92354:	e0bff617 	ldw	r2,-40(fp)
   92358:	1880022e 	bgeu	r3,r2,92364 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   9235c:	e0bffe17 	ldw	r2,-8(fp)
   92360:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   92364:	e0bff817 	ldw	r2,-32(fp)
   92368:	10800e04 	addi	r2,r2,56
   9236c:	e0fffc17 	ldw	r3,-16(fp)
   92370:	1885883a 	add	r2,r3,r2
   92374:	e13ff517 	ldw	r4,-44(fp)
   92378:	100b883a 	mov	r5,r2
   9237c:	e1bff617 	ldw	r6,-40(fp)
   92380:	00890840 	call	89084 <memcpy>
      ptr   += n;
   92384:	e0fff517 	ldw	r3,-44(fp)
   92388:	e0bff617 	ldw	r2,-40(fp)
   9238c:	1885883a 	add	r2,r3,r2
   92390:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   92394:	e0fffe17 	ldw	r3,-8(fp)
   92398:	e0bff617 	ldw	r2,-40(fp)
   9239c:	1885c83a 	sub	r2,r3,r2
   923a0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   923a4:	e0fff817 	ldw	r3,-32(fp)
   923a8:	e0bff617 	ldw	r2,-40(fp)
   923ac:	1885883a 	add	r2,r3,r2
   923b0:	10c1ffcc 	andi	r3,r2,2047
   923b4:	e0bffc17 	ldw	r2,-16(fp)
   923b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   923bc:	e0bffe17 	ldw	r2,-8(fp)
   923c0:	00bfcf16 	blt	zero,r2,92300 <altera_avalon_jtag_uart_read+0x2c>
   923c4:	00000106 	br	923cc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   923c8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   923cc:	e0fff517 	ldw	r3,-44(fp)
   923d0:	e0bffd17 	ldw	r2,-12(fp)
   923d4:	1880141e 	bne	r3,r2,92428 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   923d8:	e0bfff17 	ldw	r2,-4(fp)
   923dc:	1090000c 	andi	r2,r2,16384
   923e0:	1000131e 	bne	r2,zero,92430 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   923e4:	0001883a 	nop
   923e8:	e0bffc17 	ldw	r2,-16(fp)
   923ec:	10c00a17 	ldw	r3,40(r2)
   923f0:	e0bff717 	ldw	r2,-36(fp)
   923f4:	1880051e 	bne	r3,r2,9240c <altera_avalon_jtag_uart_read+0x138>
   923f8:	e0bffc17 	ldw	r2,-16(fp)
   923fc:	10c00917 	ldw	r3,36(r2)
   92400:	e0bffc17 	ldw	r2,-16(fp)
   92404:	10800117 	ldw	r2,4(r2)
   92408:	18bff736 	bltu	r3,r2,923e8 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   9240c:	e0bffc17 	ldw	r2,-16(fp)
   92410:	10c00a17 	ldw	r3,40(r2)
   92414:	e0bff717 	ldw	r2,-36(fp)
   92418:	18800726 	beq	r3,r2,92438 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   9241c:	e0bffe17 	ldw	r2,-8(fp)
   92420:	00bfb716 	blt	zero,r2,92300 <altera_avalon_jtag_uart_read+0x2c>
   92424:	00000506 	br	9243c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   92428:	0001883a 	nop
   9242c:	00000306 	br	9243c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   92430:	0001883a 	nop
   92434:	00000106 	br	9243c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   92438:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   9243c:	e0fff517 	ldw	r3,-44(fp)
   92440:	e0bffd17 	ldw	r2,-12(fp)
   92444:	18801726 	beq	r3,r2,924a4 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92448:	0005303a 	rdctl	r2,status
   9244c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92450:	e0fffa17 	ldw	r3,-24(fp)
   92454:	00bfff84 	movi	r2,-2
   92458:	1884703a 	and	r2,r3,r2
   9245c:	1001703a 	wrctl	status,r2
  
  return context;
   92460:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   92464:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   92468:	e0bffc17 	ldw	r2,-16(fp)
   9246c:	10800817 	ldw	r2,32(r2)
   92470:	10c00054 	ori	r3,r2,1
   92474:	e0bffc17 	ldw	r2,-16(fp)
   92478:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9247c:	e0bffc17 	ldw	r2,-16(fp)
   92480:	10800017 	ldw	r2,0(r2)
   92484:	10800104 	addi	r2,r2,4
   92488:	e0fffc17 	ldw	r3,-16(fp)
   9248c:	18c00817 	ldw	r3,32(r3)
   92490:	10c00035 	stwio	r3,0(r2)
   92494:	e0bff917 	ldw	r2,-28(fp)
   92498:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9249c:	e0bffb17 	ldw	r2,-20(fp)
   924a0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   924a4:	e0fff517 	ldw	r3,-44(fp)
   924a8:	e0bffd17 	ldw	r2,-12(fp)
   924ac:	18800426 	beq	r3,r2,924c0 <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
   924b0:	e0fff517 	ldw	r3,-44(fp)
   924b4:	e0bffd17 	ldw	r2,-12(fp)
   924b8:	1885c83a 	sub	r2,r3,r2
   924bc:	00000606 	br	924d8 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
   924c0:	e0bfff17 	ldw	r2,-4(fp)
   924c4:	1090000c 	andi	r2,r2,16384
   924c8:	10000226 	beq	r2,zero,924d4 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
   924cc:	00bffd44 	movi	r2,-11
   924d0:	00000106 	br	924d8 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
   924d4:	00bffec4 	movi	r2,-5
}
   924d8:	e037883a 	mov	sp,fp
   924dc:	dfc00117 	ldw	ra,4(sp)
   924e0:	df000017 	ldw	fp,0(sp)
   924e4:	dec00204 	addi	sp,sp,8
   924e8:	f800283a 	ret

000924ec <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   924ec:	defff304 	addi	sp,sp,-52
   924f0:	dfc00c15 	stw	ra,48(sp)
   924f4:	df000b15 	stw	fp,44(sp)
   924f8:	df000b04 	addi	fp,sp,44
   924fc:	e13ffc15 	stw	r4,-16(fp)
   92500:	e17ffd15 	stw	r5,-12(fp)
   92504:	e1bffe15 	stw	r6,-8(fp)
   92508:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   9250c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   92510:	e0bffd17 	ldw	r2,-12(fp)
   92514:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   92518:	00003706 	br	925f8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   9251c:	e0bffc17 	ldw	r2,-16(fp)
   92520:	10800c17 	ldw	r2,48(r2)
   92524:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   92528:	e0bffc17 	ldw	r2,-16(fp)
   9252c:	10800d17 	ldw	r2,52(r2)
   92530:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   92534:	e0fff817 	ldw	r3,-32(fp)
   92538:	e0bff517 	ldw	r2,-44(fp)
   9253c:	1880062e 	bgeu	r3,r2,92558 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   92540:	e0fff517 	ldw	r3,-44(fp)
   92544:	e0bff817 	ldw	r2,-32(fp)
   92548:	1885c83a 	sub	r2,r3,r2
   9254c:	10bfffc4 	addi	r2,r2,-1
   92550:	e0bff615 	stw	r2,-40(fp)
   92554:	00000b06 	br	92584 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   92558:	e0bff517 	ldw	r2,-44(fp)
   9255c:	10000526 	beq	r2,zero,92574 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   92560:	00c20004 	movi	r3,2048
   92564:	e0bff817 	ldw	r2,-32(fp)
   92568:	1885c83a 	sub	r2,r3,r2
   9256c:	e0bff615 	stw	r2,-40(fp)
   92570:	00000406 	br	92584 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   92574:	00c1ffc4 	movi	r3,2047
   92578:	e0bff817 	ldw	r2,-32(fp)
   9257c:	1885c83a 	sub	r2,r3,r2
   92580:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   92584:	e0bff617 	ldw	r2,-40(fp)
   92588:	10001e26 	beq	r2,zero,92604 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   9258c:	e0fffe17 	ldw	r3,-8(fp)
   92590:	e0bff617 	ldw	r2,-40(fp)
   92594:	1880022e 	bgeu	r3,r2,925a0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   92598:	e0bffe17 	ldw	r2,-8(fp)
   9259c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   925a0:	e0bff817 	ldw	r2,-32(fp)
   925a4:	10820e04 	addi	r2,r2,2104
   925a8:	e0fffc17 	ldw	r3,-16(fp)
   925ac:	1885883a 	add	r2,r3,r2
   925b0:	1009883a 	mov	r4,r2
   925b4:	e17ffd17 	ldw	r5,-12(fp)
   925b8:	e1bff617 	ldw	r6,-40(fp)
   925bc:	00890840 	call	89084 <memcpy>
      ptr   += n;
   925c0:	e0fffd17 	ldw	r3,-12(fp)
   925c4:	e0bff617 	ldw	r2,-40(fp)
   925c8:	1885883a 	add	r2,r3,r2
   925cc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   925d0:	e0fffe17 	ldw	r3,-8(fp)
   925d4:	e0bff617 	ldw	r2,-40(fp)
   925d8:	1885c83a 	sub	r2,r3,r2
   925dc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   925e0:	e0fff817 	ldw	r3,-32(fp)
   925e4:	e0bff617 	ldw	r2,-40(fp)
   925e8:	1885883a 	add	r2,r3,r2
   925ec:	10c1ffcc 	andi	r3,r2,2047
   925f0:	e0bffc17 	ldw	r2,-16(fp)
   925f4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   925f8:	e0bffe17 	ldw	r2,-8(fp)
   925fc:	00bfc716 	blt	zero,r2,9251c <altera_avalon_jtag_uart_write+0x30>
   92600:	00000106 	br	92608 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   92604:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92608:	0005303a 	rdctl	r2,status
   9260c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   92610:	e0fffa17 	ldw	r3,-24(fp)
   92614:	00bfff84 	movi	r2,-2
   92618:	1884703a 	and	r2,r3,r2
   9261c:	1001703a 	wrctl	status,r2
  
  return context;
   92620:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   92624:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   92628:	e0bffc17 	ldw	r2,-16(fp)
   9262c:	10800817 	ldw	r2,32(r2)
   92630:	10c00094 	ori	r3,r2,2
   92634:	e0bffc17 	ldw	r2,-16(fp)
   92638:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   9263c:	e0bffc17 	ldw	r2,-16(fp)
   92640:	10800017 	ldw	r2,0(r2)
   92644:	10800104 	addi	r2,r2,4
   92648:	e0fffc17 	ldw	r3,-16(fp)
   9264c:	18c00817 	ldw	r3,32(r3)
   92650:	10c00035 	stwio	r3,0(r2)
   92654:	e0bff917 	ldw	r2,-28(fp)
   92658:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   9265c:	e0bffb17 	ldw	r2,-20(fp)
   92660:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   92664:	e0bffe17 	ldw	r2,-8(fp)
   92668:	0080110e 	bge	zero,r2,926b0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   9266c:	e0bfff17 	ldw	r2,-4(fp)
   92670:	1090000c 	andi	r2,r2,16384
   92674:	1000111e 	bne	r2,zero,926bc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   92678:	0001883a 	nop
   9267c:	e0bffc17 	ldw	r2,-16(fp)
   92680:	10c00d17 	ldw	r3,52(r2)
   92684:	e0bff517 	ldw	r2,-44(fp)
   92688:	1880051e 	bne	r3,r2,926a0 <altera_avalon_jtag_uart_write+0x1b4>
   9268c:	e0bffc17 	ldw	r2,-16(fp)
   92690:	10c00917 	ldw	r3,36(r2)
   92694:	e0bffc17 	ldw	r2,-16(fp)
   92698:	10800117 	ldw	r2,4(r2)
   9269c:	18bff736 	bltu	r3,r2,9267c <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
   926a0:	e0bffc17 	ldw	r2,-16(fp)
   926a4:	10c00d17 	ldw	r3,52(r2)
   926a8:	e0bff517 	ldw	r2,-44(fp)
   926ac:	18800526 	beq	r3,r2,926c4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   926b0:	e0bffe17 	ldw	r2,-8(fp)
   926b4:	00bfd016 	blt	zero,r2,925f8 <altera_avalon_jtag_uart_write+0x10c>
   926b8:	00000306 	br	926c8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   926bc:	0001883a 	nop
   926c0:	00000106 	br	926c8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
   926c4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   926c8:	e0fffd17 	ldw	r3,-12(fp)
   926cc:	e0bff717 	ldw	r2,-36(fp)
   926d0:	18800426 	beq	r3,r2,926e4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   926d4:	e0fffd17 	ldw	r3,-12(fp)
   926d8:	e0bff717 	ldw	r2,-36(fp)
   926dc:	1885c83a 	sub	r2,r3,r2
   926e0:	00000606 	br	926fc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   926e4:	e0bfff17 	ldw	r2,-4(fp)
   926e8:	1090000c 	andi	r2,r2,16384
   926ec:	10000226 	beq	r2,zero,926f8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   926f0:	00bffd44 	movi	r2,-11
   926f4:	00000106 	br	926fc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   926f8:	00bffec4 	movi	r2,-5
}
   926fc:	e037883a 	mov	sp,fp
   92700:	dfc00117 	ldw	ra,4(sp)
   92704:	df000017 	ldw	fp,0(sp)
   92708:	dec00204 	addi	sp,sp,8
   9270c:	f800283a 	ret

00092710 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
   92710:	defff404 	addi	sp,sp,-48
   92714:	df000b15 	stw	fp,44(sp)
   92718:	df000b04 	addi	fp,sp,44
   9271c:	e13ffc15 	stw	r4,-16(fp)
   92720:	e17ffd15 	stw	r5,-12(fp)
   92724:	e1bffe15 	stw	r6,-8(fp)
   92728:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
   9272c:	e0ffff17 	ldw	r3,-4(fp)
   92730:	e0bffe17 	ldw	r2,-8(fp)
   92734:	1885883a 	add	r2,r3,r2
   92738:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
   9273c:	e0c00217 	ldw	r3,8(fp)
   92740:	e0800117 	ldw	r2,4(fp)
   92744:	1885883a 	add	r2,r3,r2
   92748:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
   9274c:	e0800117 	ldw	r2,4(fp)
   92750:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
   92754:	e0bffe17 	ldw	r2,-8(fp)
   92758:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
   9275c:	00800044 	movi	r2,1
   92760:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
   92764:	e0bffc17 	ldw	r2,-16(fp)
   92768:	10800504 	addi	r2,r2,20
   9276c:	e0fffd17 	ldw	r3,-12(fp)
   92770:	01000044 	movi	r4,1
   92774:	20c6983a 	sll	r3,r4,r3
   92778:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
   9277c:	e0800317 	ldw	r2,12(fp)
   92780:	1080008c 	andi	r2,r2,2
   92784:	1000041e 	bne	r2,zero,92798 <alt_avalon_spi_command+0x88>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
   92788:	e0bffc17 	ldw	r2,-16(fp)
   9278c:	10800304 	addi	r2,r2,12
   92790:	00c10004 	movi	r3,1024
   92794:	10c00035 	stwio	r3,0(r2)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
   92798:	e0bffc17 	ldw	r2,-16(fp)
   9279c:	10800037 	ldwio	r2,0(r2)
   927a0:	00000106 	br	927a8 <alt_avalon_spi_command+0x98>

      if (read_ignore == 0 && read_data == read_end)
        break;
    }
    
  }
   927a4:	0001883a 	nop
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   927a8:	e0bffc17 	ldw	r2,-16(fp)
   927ac:	10800204 	addi	r2,r2,8
   927b0:	10800037 	ldwio	r2,0(r2)
   927b4:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   927b8:	e0bffa17 	ldw	r2,-24(fp)
   927bc:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   927c0:	10000226 	beq	r2,zero,927cc <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   927c4:	e0bff717 	ldw	r2,-36(fp)
   927c8:	1000031e 	bne	r2,zero,927d8 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
   927cc:	e0bffa17 	ldw	r2,-24(fp)
   927d0:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
   927d4:	103ff426 	beq	r2,zero,927a8 <alt_avalon_spi_command+0x98>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
   927d8:	e0bffa17 	ldw	r2,-24(fp)
   927dc:	1080100c 	andi	r2,r2,64
   927e0:	10001e26 	beq	r2,zero,9285c <alt_avalon_spi_command+0x14c>
   927e4:	e0bff717 	ldw	r2,-36(fp)
   927e8:	00801c0e 	bge	zero,r2,9285c <alt_avalon_spi_command+0x14c>
    {
      credits--;
   927ec:	e0bff717 	ldw	r2,-36(fp)
   927f0:	10bfffc4 	addi	r2,r2,-1
   927f4:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
   927f8:	e0ffff17 	ldw	r3,-4(fp)
   927fc:	e0bff817 	ldw	r2,-32(fp)
   92800:	18800a2e 	bgeu	r3,r2,9282c <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
   92804:	e0bffc17 	ldw	r2,-16(fp)
   92808:	10800104 	addi	r2,r2,4
   9280c:	e0ffff17 	ldw	r3,-4(fp)
   92810:	18c00003 	ldbu	r3,0(r3)
   92814:	18c03fcc 	andi	r3,r3,255
   92818:	e13fff17 	ldw	r4,-4(fp)
   9281c:	21000044 	addi	r4,r4,1
   92820:	e13fff15 	stw	r4,-4(fp)
   92824:	10c00035 	stwio	r3,0(r2)
   92828:	00000c06 	br	9285c <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
   9282c:	e0bff517 	ldw	r2,-44(fp)
   92830:	10000826 	beq	r2,zero,92854 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
   92834:	e0bff517 	ldw	r2,-44(fp)
   92838:	10bfffc4 	addi	r2,r2,-1
   9283c:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
   92840:	e0bffc17 	ldw	r2,-16(fp)
   92844:	10800104 	addi	r2,r2,4
   92848:	0007883a 	mov	r3,zero
   9284c:	10c00035 	stwio	r3,0(r2)
   92850:	00000206 	br	9285c <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
   92854:	00bf0004 	movi	r2,-1024
   92858:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
   9285c:	e0bffa17 	ldw	r2,-24(fp)
   92860:	1080200c 	andi	r2,r2,128
   92864:	103fcf26 	beq	r2,zero,927a4 <alt_avalon_spi_command+0x94>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
   92868:	e0bffc17 	ldw	r2,-16(fp)
   9286c:	10800037 	ldwio	r2,0(r2)
   92870:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
   92874:	e0bff617 	ldw	r2,-40(fp)
   92878:	10000426 	beq	r2,zero,9288c <alt_avalon_spi_command+0x17c>
        read_ignore--;
   9287c:	e0bff617 	ldw	r2,-40(fp)
   92880:	10bfffc4 	addi	r2,r2,-1
   92884:	e0bff615 	stw	r2,-40(fp)
   92888:	00000706 	br	928a8 <alt_avalon_spi_command+0x198>
      else
        *read_data++ = (alt_u8)rxdata;
   9288c:	e0bffb17 	ldw	r2,-20(fp)
   92890:	1007883a 	mov	r3,r2
   92894:	e0800217 	ldw	r2,8(fp)
   92898:	10c00005 	stb	r3,0(r2)
   9289c:	e0800217 	ldw	r2,8(fp)
   928a0:	10800044 	addi	r2,r2,1
   928a4:	e0800215 	stw	r2,8(fp)
      credits++;
   928a8:	e0bff717 	ldw	r2,-36(fp)
   928ac:	10800044 	addi	r2,r2,1
   928b0:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
   928b4:	e0bff617 	ldw	r2,-40(fp)
   928b8:	103fba1e 	bne	r2,zero,927a4 <alt_avalon_spi_command+0x94>
   928bc:	e0c00217 	ldw	r3,8(fp)
   928c0:	e0bff917 	ldw	r2,-28(fp)
   928c4:	18bfb71e 	bne	r3,r2,927a4 <alt_avalon_spi_command+0x94>
        break;
   928c8:	0001883a 	nop
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
   928cc:	e0bffc17 	ldw	r2,-16(fp)
   928d0:	10800204 	addi	r2,r2,8
   928d4:	10800037 	ldwio	r2,0(r2)
   928d8:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
   928dc:	e0bffa17 	ldw	r2,-24(fp)
   928e0:	1080080c 	andi	r2,r2,32
   928e4:	103ff926 	beq	r2,zero,928cc <alt_avalon_spi_command+0x1bc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
   928e8:	e0800317 	ldw	r2,12(fp)
   928ec:	1080004c 	andi	r2,r2,1
   928f0:	1000041e 	bne	r2,zero,92904 <alt_avalon_spi_command+0x1f4>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
   928f4:	e0bffc17 	ldw	r2,-16(fp)
   928f8:	10800304 	addi	r2,r2,12
   928fc:	0007883a 	mov	r3,zero
   92900:	10c00035 	stwio	r3,0(r2)

  return read_length;
   92904:	e0800117 	ldw	r2,4(fp)
}
   92908:	e037883a 	mov	sp,fp
   9290c:	df000017 	ldw	fp,0(sp)
   92910:	dec00104 	addi	sp,sp,4
   92914:	f800283a 	ret

00092918 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   92918:	defffa04 	addi	sp,sp,-24
   9291c:	dfc00515 	stw	ra,20(sp)
   92920:	df000415 	stw	fp,16(sp)
   92924:	df000404 	addi	fp,sp,16
   92928:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   9292c:	0007883a 	mov	r3,zero
   92930:	e0bfff17 	ldw	r2,-4(fp)
   92934:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   92938:	e0bfff17 	ldw	r2,-4(fp)
   9293c:	10800104 	addi	r2,r2,4
   92940:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   92944:	0005303a 	rdctl	r2,status
   92948:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   9294c:	e0fffd17 	ldw	r3,-12(fp)
   92950:	00bfff84 	movi	r2,-2
   92954:	1884703a 	and	r2,r3,r2
   92958:	1001703a 	wrctl	status,r2
  
  return context;
   9295c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   92960:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   92964:	009196c0 	call	9196c <alt_tick>
   92968:	e0bffc17 	ldw	r2,-16(fp)
   9296c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   92970:	e0bffe17 	ldw	r2,-8(fp)
   92974:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   92978:	e037883a 	mov	sp,fp
   9297c:	dfc00117 	ldw	ra,4(sp)
   92980:	df000017 	ldw	fp,0(sp)
   92984:	dec00204 	addi	sp,sp,8
   92988:	f800283a 	ret

0009298c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   9298c:	defff804 	addi	sp,sp,-32
   92990:	dfc00715 	stw	ra,28(sp)
   92994:	df000615 	stw	fp,24(sp)
   92998:	df000604 	addi	fp,sp,24
   9299c:	e13ffc15 	stw	r4,-16(fp)
   929a0:	e17ffd15 	stw	r5,-12(fp)
   929a4:	e1bffe15 	stw	r6,-8(fp)
   929a8:	e1ffff15 	stw	r7,-4(fp)
   929ac:	e0bfff17 	ldw	r2,-4(fp)
   929b0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   929b4:	008002f4 	movhi	r2,11
   929b8:	1091ed04 	addi	r2,r2,18356
   929bc:	10800017 	ldw	r2,0(r2)
   929c0:	1000041e 	bne	r2,zero,929d4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   929c4:	008002f4 	movhi	r2,11
   929c8:	1091ed04 	addi	r2,r2,18356
   929cc:	e0fffb17 	ldw	r3,-20(fp)
   929d0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   929d4:	e0bffc17 	ldw	r2,-16(fp)
   929d8:	10800104 	addi	r2,r2,4
   929dc:	00c001c4 	movi	r3,7
   929e0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   929e4:	d8000015 	stw	zero,0(sp)
   929e8:	e13ffd17 	ldw	r4,-12(fp)
   929ec:	e17ffe17 	ldw	r5,-8(fp)
   929f0:	01800274 	movhi	r6,9
   929f4:	318a4604 	addi	r6,r6,10520
   929f8:	e1fffc17 	ldw	r7,-16(fp)
   929fc:	00910080 	call	91008 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   92a00:	e037883a 	mov	sp,fp
   92a04:	dfc00117 	ldw	ra,4(sp)
   92a08:	df000017 	ldw	fp,0(sp)
   92a0c:	dec00204 	addi	sp,sp,8
   92a10:	f800283a 	ret

00092a14 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   92a14:	defffa04 	addi	sp,sp,-24
   92a18:	dfc00515 	stw	ra,20(sp)
   92a1c:	df000415 	stw	fp,16(sp)
   92a20:	df000404 	addi	fp,sp,16
   92a24:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   92a28:	008000c4 	movi	r2,3
   92a2c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   92a30:	e0fffd17 	ldw	r3,-12(fp)
   92a34:	008003f4 	movhi	r2,15
   92a38:	10909004 	addi	r2,r2,16960
   92a3c:	1885383a 	mul	r2,r3,r2
   92a40:	0100bef4 	movhi	r4,763
   92a44:	213c2004 	addi	r4,r4,-3968
   92a48:	100b883a 	mov	r5,r2
   92a4c:	008832c0 	call	8832c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   92a50:	01200034 	movhi	r4,32768
   92a54:	213fffc4 	addi	r4,r4,-1
   92a58:	100b883a 	mov	r5,r2
   92a5c:	008832c0 	call	8832c <__udivsi3>
   92a60:	e13fff17 	ldw	r4,-4(fp)
   92a64:	100b883a 	mov	r5,r2
   92a68:	008832c0 	call	8832c <__udivsi3>
   92a6c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   92a70:	e0bffe17 	ldw	r2,-8(fp)
   92a74:	10002926 	beq	r2,zero,92b1c <alt_busy_sleep+0x108>
  {
    for(i=0;i<big_loops;i++)
   92a78:	e03ffc15 	stw	zero,-16(fp)
   92a7c:	00001606 	br	92ad8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   92a80:	00a00034 	movhi	r2,32768
   92a84:	10bfffc4 	addi	r2,r2,-1
   92a88:	10bfffc4 	addi	r2,r2,-1
   92a8c:	103ffe1e 	bne	r2,zero,92a88 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   92a90:	e0fffd17 	ldw	r3,-12(fp)
   92a94:	008003f4 	movhi	r2,15
   92a98:	10909004 	addi	r2,r2,16960
   92a9c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   92aa0:	0100bef4 	movhi	r4,763
   92aa4:	213c2004 	addi	r4,r4,-3968
   92aa8:	100b883a 	mov	r5,r2
   92aac:	008832c0 	call	8832c <__udivsi3>
   92ab0:	01200034 	movhi	r4,32768
   92ab4:	213fffc4 	addi	r4,r4,-1
   92ab8:	100b883a 	mov	r5,r2
   92abc:	008832c0 	call	8832c <__udivsi3>
   92ac0:	e0ffff17 	ldw	r3,-4(fp)
   92ac4:	1885c83a 	sub	r2,r3,r2
   92ac8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   92acc:	e0bffc17 	ldw	r2,-16(fp)
   92ad0:	10800044 	addi	r2,r2,1
   92ad4:	e0bffc15 	stw	r2,-16(fp)
   92ad8:	e0fffc17 	ldw	r3,-16(fp)
   92adc:	e0bffe17 	ldw	r2,-8(fp)
   92ae0:	18bfe716 	blt	r3,r2,92a80 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   92ae4:	e0fffd17 	ldw	r3,-12(fp)
   92ae8:	008003f4 	movhi	r2,15
   92aec:	10909004 	addi	r2,r2,16960
   92af0:	1885383a 	mul	r2,r3,r2
   92af4:	0100bef4 	movhi	r4,763
   92af8:	213c2004 	addi	r4,r4,-3968
   92afc:	100b883a 	mov	r5,r2
   92b00:	008832c0 	call	8832c <__udivsi3>
   92b04:	1007883a 	mov	r3,r2
   92b08:	e0bfff17 	ldw	r2,-4(fp)
   92b0c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   92b10:	10bfffc4 	addi	r2,r2,-1
   92b14:	103ffe1e 	bne	r2,zero,92b10 <alt_busy_sleep+0xfc>
   92b18:	00000d06 	br	92b50 <alt_busy_sleep+0x13c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   92b1c:	e0fffd17 	ldw	r3,-12(fp)
   92b20:	008003f4 	movhi	r2,15
   92b24:	10909004 	addi	r2,r2,16960
   92b28:	1885383a 	mul	r2,r3,r2
   92b2c:	0100bef4 	movhi	r4,763
   92b30:	213c2004 	addi	r4,r4,-3968
   92b34:	100b883a 	mov	r5,r2
   92b38:	008832c0 	call	8832c <__udivsi3>
   92b3c:	1007883a 	mov	r3,r2
   92b40:	e0bfff17 	ldw	r2,-4(fp)
   92b44:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   92b48:	10bfffc4 	addi	r2,r2,-1
   92b4c:	00bffe16 	blt	zero,r2,92b48 <alt_busy_sleep+0x134>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   92b50:	0005883a 	mov	r2,zero
}
   92b54:	e037883a 	mov	sp,fp
   92b58:	dfc00117 	ldw	ra,4(sp)
   92b5c:	df000017 	ldw	fp,0(sp)
   92b60:	dec00204 	addi	sp,sp,8
   92b64:	f800283a 	ret

00092b68 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   92b68:	defffe04 	addi	sp,sp,-8
   92b6c:	df000115 	stw	fp,4(sp)
   92b70:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   92b74:	e03fff15 	stw	zero,-4(fp)
   92b78:	00000506 	br	92b90 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   92b7c:	e0bfff17 	ldw	r2,-4(fp)
   92b80:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   92b84:	e0bfff17 	ldw	r2,-4(fp)
   92b88:	10800804 	addi	r2,r2,32
   92b8c:	e0bfff15 	stw	r2,-4(fp)
   92b90:	e0bfff17 	ldw	r2,-4(fp)
   92b94:	10820030 	cmpltui	r2,r2,2048
   92b98:	103ff81e 	bne	r2,zero,92b7c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   92b9c:	e037883a 	mov	sp,fp
   92ba0:	df000017 	ldw	fp,0(sp)
   92ba4:	dec00104 	addi	sp,sp,4
   92ba8:	f800283a 	ret

00092bac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   92bac:	defffe04 	addi	sp,sp,-8
   92bb0:	dfc00115 	stw	ra,4(sp)
   92bb4:	df000015 	stw	fp,0(sp)
   92bb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   92bbc:	008002f4 	movhi	r2,11
   92bc0:	10845804 	addi	r2,r2,4448
   92bc4:	10800017 	ldw	r2,0(r2)
   92bc8:	10000526 	beq	r2,zero,92be0 <alt_get_errno+0x34>
   92bcc:	008002f4 	movhi	r2,11
   92bd0:	10845804 	addi	r2,r2,4448
   92bd4:	10800017 	ldw	r2,0(r2)
   92bd8:	103ee83a 	callr	r2
   92bdc:	00000206 	br	92be8 <alt_get_errno+0x3c>
   92be0:	008002f4 	movhi	r2,11
   92be4:	1091e504 	addi	r2,r2,18324
}
   92be8:	e037883a 	mov	sp,fp
   92bec:	dfc00117 	ldw	ra,4(sp)
   92bf0:	df000017 	ldw	fp,0(sp)
   92bf4:	dec00204 	addi	sp,sp,8
   92bf8:	f800283a 	ret

00092bfc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   92bfc:	defffa04 	addi	sp,sp,-24
   92c00:	dfc00515 	stw	ra,20(sp)
   92c04:	df000415 	stw	fp,16(sp)
   92c08:	df000404 	addi	fp,sp,16
   92c0c:	e13ffe15 	stw	r4,-8(fp)
   92c10:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   92c14:	e0bffe17 	ldw	r2,-8(fp)
   92c18:	10000326 	beq	r2,zero,92c28 <alt_dev_llist_insert+0x2c>
   92c1c:	e0bffe17 	ldw	r2,-8(fp)
   92c20:	10800217 	ldw	r2,8(r2)
   92c24:	1000051e 	bne	r2,zero,92c3c <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
   92c28:	0092bac0 	call	92bac <alt_get_errno>
   92c2c:	00c00584 	movi	r3,22
   92c30:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   92c34:	00bffa84 	movi	r2,-22
   92c38:	00001306 	br	92c88 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   92c3c:	e0bffe17 	ldw	r2,-8(fp)
   92c40:	e0ffff17 	ldw	r3,-4(fp)
   92c44:	e0fffc15 	stw	r3,-16(fp)
   92c48:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   92c4c:	e0bffd17 	ldw	r2,-12(fp)
   92c50:	e0fffc17 	ldw	r3,-16(fp)
   92c54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   92c58:	e0bffc17 	ldw	r2,-16(fp)
   92c5c:	10c00017 	ldw	r3,0(r2)
   92c60:	e0bffd17 	ldw	r2,-12(fp)
   92c64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   92c68:	e0bffc17 	ldw	r2,-16(fp)
   92c6c:	10800017 	ldw	r2,0(r2)
   92c70:	e0fffd17 	ldw	r3,-12(fp)
   92c74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   92c78:	e0bffc17 	ldw	r2,-16(fp)
   92c7c:	e0fffd17 	ldw	r3,-12(fp)
   92c80:	10c00015 	stw	r3,0(r2)

  return 0;  
   92c84:	0005883a 	mov	r2,zero
}
   92c88:	e037883a 	mov	sp,fp
   92c8c:	dfc00117 	ldw	ra,4(sp)
   92c90:	df000017 	ldw	fp,0(sp)
   92c94:	dec00204 	addi	sp,sp,8
   92c98:	f800283a 	ret

00092c9c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   92c9c:	defffd04 	addi	sp,sp,-12
   92ca0:	dfc00215 	stw	ra,8(sp)
   92ca4:	df000115 	stw	fp,4(sp)
   92ca8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   92cac:	00800274 	movhi	r2,9
   92cb0:	108e0004 	addi	r2,r2,14336
   92cb4:	e0bfff15 	stw	r2,-4(fp)
   92cb8:	00000606 	br	92cd4 <_do_ctors+0x38>
        (*ctor) (); 
   92cbc:	e0bfff17 	ldw	r2,-4(fp)
   92cc0:	10800017 	ldw	r2,0(r2)
   92cc4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   92cc8:	e0bfff17 	ldw	r2,-4(fp)
   92ccc:	10bfff04 	addi	r2,r2,-4
   92cd0:	e0bfff15 	stw	r2,-4(fp)
   92cd4:	e0ffff17 	ldw	r3,-4(fp)
   92cd8:	00800274 	movhi	r2,9
   92cdc:	108e0104 	addi	r2,r2,14340
   92ce0:	18bff62e 	bgeu	r3,r2,92cbc <_do_ctors+0x20>
        (*ctor) (); 
}
   92ce4:	e037883a 	mov	sp,fp
   92ce8:	dfc00117 	ldw	ra,4(sp)
   92cec:	df000017 	ldw	fp,0(sp)
   92cf0:	dec00204 	addi	sp,sp,8
   92cf4:	f800283a 	ret

00092cf8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   92cf8:	defffd04 	addi	sp,sp,-12
   92cfc:	dfc00215 	stw	ra,8(sp)
   92d00:	df000115 	stw	fp,4(sp)
   92d04:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   92d08:	00800274 	movhi	r2,9
   92d0c:	108e0004 	addi	r2,r2,14336
   92d10:	e0bfff15 	stw	r2,-4(fp)
   92d14:	00000606 	br	92d30 <_do_dtors+0x38>
        (*dtor) (); 
   92d18:	e0bfff17 	ldw	r2,-4(fp)
   92d1c:	10800017 	ldw	r2,0(r2)
   92d20:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   92d24:	e0bfff17 	ldw	r2,-4(fp)
   92d28:	10bfff04 	addi	r2,r2,-4
   92d2c:	e0bfff15 	stw	r2,-4(fp)
   92d30:	e0ffff17 	ldw	r3,-4(fp)
   92d34:	00800274 	movhi	r2,9
   92d38:	108e0104 	addi	r2,r2,14340
   92d3c:	18bff62e 	bgeu	r3,r2,92d18 <_do_dtors+0x20>
        (*dtor) (); 
}
   92d40:	e037883a 	mov	sp,fp
   92d44:	dfc00117 	ldw	ra,4(sp)
   92d48:	df000017 	ldw	fp,0(sp)
   92d4c:	dec00204 	addi	sp,sp,8
   92d50:	f800283a 	ret

00092d54 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   92d54:	defffe04 	addi	sp,sp,-8
   92d58:	dfc00115 	stw	ra,4(sp)
   92d5c:	df000015 	stw	fp,0(sp)
   92d60:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   92d64:	0009883a 	mov	r4,zero
   92d68:	01440004 	movi	r5,4096
   92d6c:	00933a40 	call	933a4 <alt_icache_flush>
#endif
}
   92d70:	e037883a 	mov	sp,fp
   92d74:	dfc00117 	ldw	ra,4(sp)
   92d78:	df000017 	ldw	fp,0(sp)
   92d7c:	dec00204 	addi	sp,sp,8
   92d80:	f800283a 	ret

00092d84 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   92d84:	defff904 	addi	sp,sp,-28
   92d88:	dfc00615 	stw	ra,24(sp)
   92d8c:	df000515 	stw	fp,20(sp)
   92d90:	df000504 	addi	fp,sp,20
   92d94:	e13ffc15 	stw	r4,-16(fp)
   92d98:	e17ffd15 	stw	r5,-12(fp)
   92d9c:	e1bffe15 	stw	r6,-8(fp)
   92da0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   92da4:	e13ffd17 	ldw	r4,-12(fp)
   92da8:	e17ffe17 	ldw	r5,-8(fp)
   92dac:	e1bfff17 	ldw	r6,-4(fp)
   92db0:	0092fd80 	call	92fd8 <open>
   92db4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   92db8:	e0bffb17 	ldw	r2,-20(fp)
   92dbc:	10001c16 	blt	r2,zero,92e30 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   92dc0:	00c002f4 	movhi	r3,11
   92dc4:	18ffd304 	addi	r3,r3,-180
   92dc8:	e0bffb17 	ldw	r2,-20(fp)
   92dcc:	10800324 	muli	r2,r2,12
   92dd0:	1885883a 	add	r2,r3,r2
   92dd4:	10c00017 	ldw	r3,0(r2)
   92dd8:	e0bffc17 	ldw	r2,-16(fp)
   92ddc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   92de0:	00c002f4 	movhi	r3,11
   92de4:	18ffd304 	addi	r3,r3,-180
   92de8:	e0bffb17 	ldw	r2,-20(fp)
   92dec:	10800324 	muli	r2,r2,12
   92df0:	1885883a 	add	r2,r3,r2
   92df4:	10800104 	addi	r2,r2,4
   92df8:	10c00017 	ldw	r3,0(r2)
   92dfc:	e0bffc17 	ldw	r2,-16(fp)
   92e00:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   92e04:	00c002f4 	movhi	r3,11
   92e08:	18ffd304 	addi	r3,r3,-180
   92e0c:	e0bffb17 	ldw	r2,-20(fp)
   92e10:	10800324 	muli	r2,r2,12
   92e14:	1885883a 	add	r2,r3,r2
   92e18:	10800204 	addi	r2,r2,8
   92e1c:	10c00017 	ldw	r3,0(r2)
   92e20:	e0bffc17 	ldw	r2,-16(fp)
   92e24:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   92e28:	e13ffb17 	ldw	r4,-20(fp)
   92e2c:	00917c40 	call	917c4 <alt_release_fd>
  }
} 
   92e30:	e037883a 	mov	sp,fp
   92e34:	dfc00117 	ldw	ra,4(sp)
   92e38:	df000017 	ldw	fp,0(sp)
   92e3c:	dec00204 	addi	sp,sp,8
   92e40:	f800283a 	ret

00092e44 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   92e44:	defffb04 	addi	sp,sp,-20
   92e48:	dfc00415 	stw	ra,16(sp)
   92e4c:	df000315 	stw	fp,12(sp)
   92e50:	df000304 	addi	fp,sp,12
   92e54:	e13ffd15 	stw	r4,-12(fp)
   92e58:	e17ffe15 	stw	r5,-8(fp)
   92e5c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   92e60:	010002f4 	movhi	r4,11
   92e64:	213fd604 	addi	r4,r4,-168
   92e68:	e17ffd17 	ldw	r5,-12(fp)
   92e6c:	01800044 	movi	r6,1
   92e70:	01c07fc4 	movi	r7,511
   92e74:	0092d840 	call	92d84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   92e78:	010002f4 	movhi	r4,11
   92e7c:	213fd304 	addi	r4,r4,-180
   92e80:	e17ffe17 	ldw	r5,-8(fp)
   92e84:	000d883a 	mov	r6,zero
   92e88:	01c07fc4 	movi	r7,511
   92e8c:	0092d840 	call	92d84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   92e90:	010002f4 	movhi	r4,11
   92e94:	213fd904 	addi	r4,r4,-156
   92e98:	e17fff17 	ldw	r5,-4(fp)
   92e9c:	01800044 	movi	r6,1
   92ea0:	01c07fc4 	movi	r7,511
   92ea4:	0092d840 	call	92d84 <alt_open_fd>
}  
   92ea8:	e037883a 	mov	sp,fp
   92eac:	dfc00117 	ldw	ra,4(sp)
   92eb0:	df000017 	ldw	fp,0(sp)
   92eb4:	dec00204 	addi	sp,sp,8
   92eb8:	f800283a 	ret

00092ebc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   92ebc:	defffe04 	addi	sp,sp,-8
   92ec0:	dfc00115 	stw	ra,4(sp)
   92ec4:	df000015 	stw	fp,0(sp)
   92ec8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   92ecc:	008002f4 	movhi	r2,11
   92ed0:	10845804 	addi	r2,r2,4448
   92ed4:	10800017 	ldw	r2,0(r2)
   92ed8:	10000526 	beq	r2,zero,92ef0 <alt_get_errno+0x34>
   92edc:	008002f4 	movhi	r2,11
   92ee0:	10845804 	addi	r2,r2,4448
   92ee4:	10800017 	ldw	r2,0(r2)
   92ee8:	103ee83a 	callr	r2
   92eec:	00000206 	br	92ef8 <alt_get_errno+0x3c>
   92ef0:	008002f4 	movhi	r2,11
   92ef4:	1091e504 	addi	r2,r2,18324
}
   92ef8:	e037883a 	mov	sp,fp
   92efc:	dfc00117 	ldw	ra,4(sp)
   92f00:	df000017 	ldw	fp,0(sp)
   92f04:	dec00204 	addi	sp,sp,8
   92f08:	f800283a 	ret

00092f0c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   92f0c:	defffd04 	addi	sp,sp,-12
   92f10:	df000215 	stw	fp,8(sp)
   92f14:	df000204 	addi	fp,sp,8
   92f18:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   92f1c:	e0bfff17 	ldw	r2,-4(fp)
   92f20:	10800217 	ldw	r2,8(r2)
   92f24:	10d00034 	orhi	r3,r2,16384
   92f28:	e0bfff17 	ldw	r2,-4(fp)
   92f2c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   92f30:	e03ffe15 	stw	zero,-8(fp)
   92f34:	00001d06 	br	92fac <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   92f38:	00c002f4 	movhi	r3,11
   92f3c:	18ffd304 	addi	r3,r3,-180
   92f40:	e0bffe17 	ldw	r2,-8(fp)
   92f44:	10800324 	muli	r2,r2,12
   92f48:	1885883a 	add	r2,r3,r2
   92f4c:	10c00017 	ldw	r3,0(r2)
   92f50:	e0bfff17 	ldw	r2,-4(fp)
   92f54:	10800017 	ldw	r2,0(r2)
   92f58:	1880111e 	bne	r3,r2,92fa0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   92f5c:	00c002f4 	movhi	r3,11
   92f60:	18ffd304 	addi	r3,r3,-180
   92f64:	e0bffe17 	ldw	r2,-8(fp)
   92f68:	10800324 	muli	r2,r2,12
   92f6c:	1885883a 	add	r2,r3,r2
   92f70:	10800204 	addi	r2,r2,8
   92f74:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   92f78:	1000090e 	bge	r2,zero,92fa0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   92f7c:	e0bffe17 	ldw	r2,-8(fp)
   92f80:	10c00324 	muli	r3,r2,12
   92f84:	008002f4 	movhi	r2,11
   92f88:	10bfd304 	addi	r2,r2,-180
   92f8c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   92f90:	e0bfff17 	ldw	r2,-4(fp)
   92f94:	18800226 	beq	r3,r2,92fa0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   92f98:	00bffcc4 	movi	r2,-13
   92f9c:	00000a06 	br	92fc8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   92fa0:	e0bffe17 	ldw	r2,-8(fp)
   92fa4:	10800044 	addi	r2,r2,1
   92fa8:	e0bffe15 	stw	r2,-8(fp)
   92fac:	008002f4 	movhi	r2,11
   92fb0:	10845704 	addi	r2,r2,4444
   92fb4:	10800017 	ldw	r2,0(r2)
   92fb8:	1007883a 	mov	r3,r2
   92fbc:	e0bffe17 	ldw	r2,-8(fp)
   92fc0:	18bfdd2e 	bgeu	r3,r2,92f38 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   92fc4:	0005883a 	mov	r2,zero
}
   92fc8:	e037883a 	mov	sp,fp
   92fcc:	df000017 	ldw	fp,0(sp)
   92fd0:	dec00104 	addi	sp,sp,4
   92fd4:	f800283a 	ret

00092fd8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   92fd8:	defff604 	addi	sp,sp,-40
   92fdc:	dfc00915 	stw	ra,36(sp)
   92fe0:	df000815 	stw	fp,32(sp)
   92fe4:	df000804 	addi	fp,sp,32
   92fe8:	e13ffd15 	stw	r4,-12(fp)
   92fec:	e17ffe15 	stw	r5,-8(fp)
   92ff0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   92ff4:	00bfffc4 	movi	r2,-1
   92ff8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   92ffc:	00bffb44 	movi	r2,-19
   93000:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   93004:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   93008:	e13ffd17 	ldw	r4,-12(fp)
   9300c:	014002f4 	movhi	r5,11
   93010:	29445504 	addi	r5,r5,4436
   93014:	009314c0 	call	9314c <alt_find_dev>
   93018:	e0bff815 	stw	r2,-32(fp)
   9301c:	e0bff817 	ldw	r2,-32(fp)
   93020:	1000051e 	bne	r2,zero,93038 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   93024:	e13ffd17 	ldw	r4,-12(fp)
   93028:	00931dc0 	call	931dc <alt_find_file>
   9302c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   93030:	00800044 	movi	r2,1
   93034:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   93038:	e0bff817 	ldw	r2,-32(fp)
   9303c:	10002926 	beq	r2,zero,930e4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   93040:	e13ff817 	ldw	r4,-32(fp)
   93044:	00932f00 	call	932f0 <alt_get_fd>
   93048:	e0bff915 	stw	r2,-28(fp)
   9304c:	e0bff917 	ldw	r2,-28(fp)
   93050:	1000030e 	bge	r2,zero,93060 <open+0x88>
    {
      status = index;
   93054:	e0bff917 	ldw	r2,-28(fp)
   93058:	e0bffa15 	stw	r2,-24(fp)
   9305c:	00002306 	br	930ec <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   93060:	e0bff917 	ldw	r2,-28(fp)
   93064:	10c00324 	muli	r3,r2,12
   93068:	008002f4 	movhi	r2,11
   9306c:	10bfd304 	addi	r2,r2,-180
   93070:	1885883a 	add	r2,r3,r2
   93074:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   93078:	e0fffe17 	ldw	r3,-8(fp)
   9307c:	00900034 	movhi	r2,16384
   93080:	10bfffc4 	addi	r2,r2,-1
   93084:	1886703a 	and	r3,r3,r2
   93088:	e0bffc17 	ldw	r2,-16(fp)
   9308c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   93090:	e0bffb17 	ldw	r2,-20(fp)
   93094:	1000051e 	bne	r2,zero,930ac <open+0xd4>
   93098:	e13ffc17 	ldw	r4,-16(fp)
   9309c:	0092f0c0 	call	92f0c <alt_file_locked>
   930a0:	e0bffa15 	stw	r2,-24(fp)
   930a4:	e0bffa17 	ldw	r2,-24(fp)
   930a8:	10001016 	blt	r2,zero,930ec <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   930ac:	e0bff817 	ldw	r2,-32(fp)
   930b0:	10800317 	ldw	r2,12(r2)
   930b4:	10000826 	beq	r2,zero,930d8 <open+0x100>
   930b8:	e0bff817 	ldw	r2,-32(fp)
   930bc:	10800317 	ldw	r2,12(r2)
   930c0:	e13ffc17 	ldw	r4,-16(fp)
   930c4:	e17ffd17 	ldw	r5,-12(fp)
   930c8:	e1bffe17 	ldw	r6,-8(fp)
   930cc:	e1ffff17 	ldw	r7,-4(fp)
   930d0:	103ee83a 	callr	r2
   930d4:	00000106 	br	930dc <open+0x104>
   930d8:	0005883a 	mov	r2,zero
   930dc:	e0bffa15 	stw	r2,-24(fp)
   930e0:	00000206 	br	930ec <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   930e4:	00bffb44 	movi	r2,-19
   930e8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   930ec:	e0bffa17 	ldw	r2,-24(fp)
   930f0:	1000080e 	bge	r2,zero,93114 <open+0x13c>
  {
    alt_release_fd (index);  
   930f4:	e13ff917 	ldw	r4,-28(fp)
   930f8:	00917c40 	call	917c4 <alt_release_fd>
    ALT_ERRNO = -status;
   930fc:	0092ebc0 	call	92ebc <alt_get_errno>
   93100:	e0fffa17 	ldw	r3,-24(fp)
   93104:	00c7c83a 	sub	r3,zero,r3
   93108:	10c00015 	stw	r3,0(r2)
    return -1;
   9310c:	00bfffc4 	movi	r2,-1
   93110:	00000106 	br	93118 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   93114:	e0bff917 	ldw	r2,-28(fp)
}
   93118:	e037883a 	mov	sp,fp
   9311c:	dfc00117 	ldw	ra,4(sp)
   93120:	df000017 	ldw	fp,0(sp)
   93124:	dec00204 	addi	sp,sp,8
   93128:	f800283a 	ret

0009312c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
   9312c:	deffff04 	addi	sp,sp,-4
   93130:	df000015 	stw	fp,0(sp)
   93134:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   93138:	000170fa 	wrctl	ienable,zero
}
   9313c:	e037883a 	mov	sp,fp
   93140:	df000017 	ldw	fp,0(sp)
   93144:	dec00104 	addi	sp,sp,4
   93148:	f800283a 	ret

0009314c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   9314c:	defffa04 	addi	sp,sp,-24
   93150:	dfc00515 	stw	ra,20(sp)
   93154:	df000415 	stw	fp,16(sp)
   93158:	df000404 	addi	fp,sp,16
   9315c:	e13ffe15 	stw	r4,-8(fp)
   93160:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   93164:	e0bfff17 	ldw	r2,-4(fp)
   93168:	10800017 	ldw	r2,0(r2)
   9316c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   93170:	e13ffe17 	ldw	r4,-8(fp)
   93174:	00895140 	call	89514 <strlen>
   93178:	10800044 	addi	r2,r2,1
   9317c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   93180:	00000d06 	br	931b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   93184:	e0bffc17 	ldw	r2,-16(fp)
   93188:	10c00217 	ldw	r3,8(r2)
   9318c:	e0bffd17 	ldw	r2,-12(fp)
   93190:	1809883a 	mov	r4,r3
   93194:	e17ffe17 	ldw	r5,-8(fp)
   93198:	100d883a 	mov	r6,r2
   9319c:	009347c0 	call	9347c <memcmp>
   931a0:	1000021e 	bne	r2,zero,931ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   931a4:	e0bffc17 	ldw	r2,-16(fp)
   931a8:	00000706 	br	931c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   931ac:	e0bffc17 	ldw	r2,-16(fp)
   931b0:	10800017 	ldw	r2,0(r2)
   931b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   931b8:	e0fffc17 	ldw	r3,-16(fp)
   931bc:	e0bfff17 	ldw	r2,-4(fp)
   931c0:	18bff01e 	bne	r3,r2,93184 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   931c4:	0005883a 	mov	r2,zero
}
   931c8:	e037883a 	mov	sp,fp
   931cc:	dfc00117 	ldw	ra,4(sp)
   931d0:	df000017 	ldw	fp,0(sp)
   931d4:	dec00204 	addi	sp,sp,8
   931d8:	f800283a 	ret

000931dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   931dc:	defffb04 	addi	sp,sp,-20
   931e0:	dfc00415 	stw	ra,16(sp)
   931e4:	df000315 	stw	fp,12(sp)
   931e8:	df000304 	addi	fp,sp,12
   931ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   931f0:	008002f4 	movhi	r2,11
   931f4:	10845304 	addi	r2,r2,4428
   931f8:	10800017 	ldw	r2,0(r2)
   931fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   93200:	00003106 	br	932c8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   93204:	e0bffd17 	ldw	r2,-12(fp)
   93208:	10800217 	ldw	r2,8(r2)
   9320c:	1009883a 	mov	r4,r2
   93210:	00895140 	call	89514 <strlen>
   93214:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   93218:	e0bffd17 	ldw	r2,-12(fp)
   9321c:	10c00217 	ldw	r3,8(r2)
   93220:	e0bffe17 	ldw	r2,-8(fp)
   93224:	10bfffc4 	addi	r2,r2,-1
   93228:	1885883a 	add	r2,r3,r2
   9322c:	10800003 	ldbu	r2,0(r2)
   93230:	10803fcc 	andi	r2,r2,255
   93234:	1080201c 	xori	r2,r2,128
   93238:	10bfe004 	addi	r2,r2,-128
   9323c:	10800bd8 	cmpnei	r2,r2,47
   93240:	1000031e 	bne	r2,zero,93250 <alt_find_file+0x74>
    {
      len -= 1;
   93244:	e0bffe17 	ldw	r2,-8(fp)
   93248:	10bfffc4 	addi	r2,r2,-1
   9324c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   93250:	e0bffe17 	ldw	r2,-8(fp)
   93254:	e0ffff17 	ldw	r3,-4(fp)
   93258:	1885883a 	add	r2,r3,r2
   9325c:	10800003 	ldbu	r2,0(r2)
   93260:	10803fcc 	andi	r2,r2,255
   93264:	1080201c 	xori	r2,r2,128
   93268:	10bfe004 	addi	r2,r2,-128
   9326c:	10800be0 	cmpeqi	r2,r2,47
   93270:	1000081e 	bne	r2,zero,93294 <alt_find_file+0xb8>
   93274:	e0bffe17 	ldw	r2,-8(fp)
   93278:	e0ffff17 	ldw	r3,-4(fp)
   9327c:	1885883a 	add	r2,r3,r2
   93280:	10800003 	ldbu	r2,0(r2)
   93284:	10803fcc 	andi	r2,r2,255
   93288:	1080201c 	xori	r2,r2,128
   9328c:	10bfe004 	addi	r2,r2,-128
   93290:	10000a1e 	bne	r2,zero,932bc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   93294:	e0bffd17 	ldw	r2,-12(fp)
   93298:	10c00217 	ldw	r3,8(r2)
   9329c:	e0bffe17 	ldw	r2,-8(fp)
   932a0:	1809883a 	mov	r4,r3
   932a4:	e17fff17 	ldw	r5,-4(fp)
   932a8:	100d883a 	mov	r6,r2
   932ac:	009347c0 	call	9347c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   932b0:	1000021e 	bne	r2,zero,932bc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   932b4:	e0bffd17 	ldw	r2,-12(fp)
   932b8:	00000806 	br	932dc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   932bc:	e0bffd17 	ldw	r2,-12(fp)
   932c0:	10800017 	ldw	r2,0(r2)
   932c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   932c8:	e0fffd17 	ldw	r3,-12(fp)
   932cc:	008002f4 	movhi	r2,11
   932d0:	10845304 	addi	r2,r2,4428
   932d4:	18bfcb1e 	bne	r3,r2,93204 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   932d8:	0005883a 	mov	r2,zero
}
   932dc:	e037883a 	mov	sp,fp
   932e0:	dfc00117 	ldw	ra,4(sp)
   932e4:	df000017 	ldw	fp,0(sp)
   932e8:	dec00204 	addi	sp,sp,8
   932ec:	f800283a 	ret

000932f0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   932f0:	defffc04 	addi	sp,sp,-16
   932f4:	df000315 	stw	fp,12(sp)
   932f8:	df000304 	addi	fp,sp,12
   932fc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   93300:	00bffa04 	movi	r2,-24
   93304:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   93308:	e03ffd15 	stw	zero,-12(fp)
   9330c:	00001d06 	br	93384 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   93310:	00c002f4 	movhi	r3,11
   93314:	18ffd304 	addi	r3,r3,-180
   93318:	e0bffd17 	ldw	r2,-12(fp)
   9331c:	10800324 	muli	r2,r2,12
   93320:	1885883a 	add	r2,r3,r2
   93324:	10800017 	ldw	r2,0(r2)
   93328:	1000131e 	bne	r2,zero,93378 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   9332c:	00c002f4 	movhi	r3,11
   93330:	18ffd304 	addi	r3,r3,-180
   93334:	e0bffd17 	ldw	r2,-12(fp)
   93338:	10800324 	muli	r2,r2,12
   9333c:	1885883a 	add	r2,r3,r2
   93340:	e0ffff17 	ldw	r3,-4(fp)
   93344:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   93348:	008002f4 	movhi	r2,11
   9334c:	10845704 	addi	r2,r2,4444
   93350:	10c00017 	ldw	r3,0(r2)
   93354:	e0bffd17 	ldw	r2,-12(fp)
   93358:	1880040e 	bge	r3,r2,9336c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   9335c:	008002f4 	movhi	r2,11
   93360:	10845704 	addi	r2,r2,4444
   93364:	e0fffd17 	ldw	r3,-12(fp)
   93368:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   9336c:	e0bffd17 	ldw	r2,-12(fp)
   93370:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   93374:	00000606 	br	93390 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   93378:	e0bffd17 	ldw	r2,-12(fp)
   9337c:	10800044 	addi	r2,r2,1
   93380:	e0bffd15 	stw	r2,-12(fp)
   93384:	e0bffd17 	ldw	r2,-12(fp)
   93388:	10800810 	cmplti	r2,r2,32
   9338c:	103fe01e 	bne	r2,zero,93310 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   93390:	e0bffe17 	ldw	r2,-8(fp)
}
   93394:	e037883a 	mov	sp,fp
   93398:	df000017 	ldw	fp,0(sp)
   9339c:	dec00104 	addi	sp,sp,4
   933a0:	f800283a 	ret

000933a4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   933a4:	defffb04 	addi	sp,sp,-20
   933a8:	df000415 	stw	fp,16(sp)
   933ac:	df000404 	addi	fp,sp,16
   933b0:	e13ffe15 	stw	r4,-8(fp)
   933b4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   933b8:	e0bfff17 	ldw	r2,-4(fp)
   933bc:	10840070 	cmpltui	r2,r2,4097
   933c0:	1000021e 	bne	r2,zero,933cc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   933c4:	00840004 	movi	r2,4096
   933c8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   933cc:	e0fffe17 	ldw	r3,-8(fp)
   933d0:	e0bfff17 	ldw	r2,-4(fp)
   933d4:	1885883a 	add	r2,r3,r2
   933d8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   933dc:	e0bffe17 	ldw	r2,-8(fp)
   933e0:	e0bffc15 	stw	r2,-16(fp)
   933e4:	00000506 	br	933fc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   933e8:	e0bffc17 	ldw	r2,-16(fp)
   933ec:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   933f0:	e0bffc17 	ldw	r2,-16(fp)
   933f4:	10800804 	addi	r2,r2,32
   933f8:	e0bffc15 	stw	r2,-16(fp)
   933fc:	e0fffc17 	ldw	r3,-16(fp)
   93400:	e0bffd17 	ldw	r2,-12(fp)
   93404:	18bff836 	bltu	r3,r2,933e8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   93408:	e0bffe17 	ldw	r2,-8(fp)
   9340c:	108007cc 	andi	r2,r2,31
   93410:	10000226 	beq	r2,zero,9341c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   93414:	e0bffc17 	ldw	r2,-16(fp)
   93418:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   9341c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   93420:	e037883a 	mov	sp,fp
   93424:	df000017 	ldw	fp,0(sp)
   93428:	dec00104 	addi	sp,sp,4
   9342c:	f800283a 	ret

00093430 <atexit>:
   93430:	200b883a 	mov	r5,r4
   93434:	000d883a 	mov	r6,zero
   93438:	0009883a 	mov	r4,zero
   9343c:	000f883a 	mov	r7,zero
   93440:	00934f81 	jmpi	934f8 <__register_exitproc>

00093444 <exit>:
   93444:	defffe04 	addi	sp,sp,-8
   93448:	000b883a 	mov	r5,zero
   9344c:	dc000015 	stw	r16,0(sp)
   93450:	dfc00115 	stw	ra,4(sp)
   93454:	2021883a 	mov	r16,r4
   93458:	00936280 	call	93628 <__call_exitprocs>
   9345c:	008002f4 	movhi	r2,11
   93460:	10844e04 	addi	r2,r2,4408
   93464:	11000017 	ldw	r4,0(r2)
   93468:	20800f17 	ldw	r2,60(r4)
   9346c:	10000126 	beq	r2,zero,93474 <exit+0x30>
   93470:	103ee83a 	callr	r2
   93474:	8009883a 	mov	r4,r16
   93478:	00937c80 	call	937c8 <_exit>

0009347c <memcmp>:
   9347c:	01c000c4 	movi	r7,3
   93480:	3980192e 	bgeu	r7,r6,934e8 <memcmp+0x6c>
   93484:	2904b03a 	or	r2,r5,r4
   93488:	11c4703a 	and	r2,r2,r7
   9348c:	10000f26 	beq	r2,zero,934cc <memcmp+0x50>
   93490:	20c00003 	ldbu	r3,0(r4)
   93494:	28800003 	ldbu	r2,0(r5)
   93498:	1880151e 	bne	r3,r2,934f0 <memcmp+0x74>
   9349c:	31bfff84 	addi	r6,r6,-2
   934a0:	01ffffc4 	movi	r7,-1
   934a4:	00000406 	br	934b8 <memcmp+0x3c>
   934a8:	20c00003 	ldbu	r3,0(r4)
   934ac:	28800003 	ldbu	r2,0(r5)
   934b0:	31bfffc4 	addi	r6,r6,-1
   934b4:	18800e1e 	bne	r3,r2,934f0 <memcmp+0x74>
   934b8:	21000044 	addi	r4,r4,1
   934bc:	29400044 	addi	r5,r5,1
   934c0:	31fff91e 	bne	r6,r7,934a8 <memcmp+0x2c>
   934c4:	0005883a 	mov	r2,zero
   934c8:	f800283a 	ret
   934cc:	20c00017 	ldw	r3,0(r4)
   934d0:	28800017 	ldw	r2,0(r5)
   934d4:	1880041e 	bne	r3,r2,934e8 <memcmp+0x6c>
   934d8:	31bfff04 	addi	r6,r6,-4
   934dc:	21000104 	addi	r4,r4,4
   934e0:	29400104 	addi	r5,r5,4
   934e4:	39bff936 	bltu	r7,r6,934cc <memcmp+0x50>
   934e8:	303fe91e 	bne	r6,zero,93490 <memcmp+0x14>
   934ec:	003ff506 	br	934c4 <memcmp+0x48>
   934f0:	1885c83a 	sub	r2,r3,r2
   934f4:	f800283a 	ret

000934f8 <__register_exitproc>:
   934f8:	defffa04 	addi	sp,sp,-24
   934fc:	008002f4 	movhi	r2,11
   93500:	10844e04 	addi	r2,r2,4408
   93504:	dc000315 	stw	r16,12(sp)
   93508:	14000017 	ldw	r16,0(r2)
   9350c:	dc400415 	stw	r17,16(sp)
   93510:	dfc00515 	stw	ra,20(sp)
   93514:	80805217 	ldw	r2,328(r16)
   93518:	2023883a 	mov	r17,r4
   9351c:	10003e26 	beq	r2,zero,93618 <__register_exitproc+0x120>
   93520:	10c00117 	ldw	r3,4(r2)
   93524:	020007c4 	movi	r8,31
   93528:	40c0180e 	bge	r8,r3,9358c <__register_exitproc+0x94>
   9352c:	00800274 	movhi	r2,9
   93530:	10a23604 	addi	r2,r2,-30504
   93534:	1000061e 	bne	r2,zero,93550 <__register_exitproc+0x58>
   93538:	00bfffc4 	movi	r2,-1
   9353c:	dfc00517 	ldw	ra,20(sp)
   93540:	dc400417 	ldw	r17,16(sp)
   93544:	dc000317 	ldw	r16,12(sp)
   93548:	dec00604 	addi	sp,sp,24
   9354c:	f800283a 	ret
   93550:	01006404 	movi	r4,400
   93554:	d9400015 	stw	r5,0(sp)
   93558:	d9800115 	stw	r6,4(sp)
   9355c:	d9c00215 	stw	r7,8(sp)
   93560:	00888d80 	call	888d8 <malloc>
   93564:	d9400017 	ldw	r5,0(sp)
   93568:	d9800117 	ldw	r6,4(sp)
   9356c:	d9c00217 	ldw	r7,8(sp)
   93570:	103ff126 	beq	r2,zero,93538 <__register_exitproc+0x40>
   93574:	80c05217 	ldw	r3,328(r16)
   93578:	10000115 	stw	zero,4(r2)
   9357c:	10c00015 	stw	r3,0(r2)
   93580:	80805215 	stw	r2,328(r16)
   93584:	10006215 	stw	zero,392(r2)
   93588:	10006315 	stw	zero,396(r2)
   9358c:	10c00117 	ldw	r3,4(r2)
   93590:	88000d1e 	bne	r17,zero,935c8 <__register_exitproc+0xd0>
   93594:	19000084 	addi	r4,r3,2
   93598:	2109883a 	add	r4,r4,r4
   9359c:	18c00044 	addi	r3,r3,1
   935a0:	2109883a 	add	r4,r4,r4
   935a4:	1109883a 	add	r4,r2,r4
   935a8:	10c00115 	stw	r3,4(r2)
   935ac:	0005883a 	mov	r2,zero
   935b0:	21400015 	stw	r5,0(r4)
   935b4:	dfc00517 	ldw	ra,20(sp)
   935b8:	dc400417 	ldw	r17,16(sp)
   935bc:	dc000317 	ldw	r16,12(sp)
   935c0:	dec00604 	addi	sp,sp,24
   935c4:	f800283a 	ret
   935c8:	02400044 	movi	r9,1
   935cc:	12806217 	ldw	r10,392(r2)
   935d0:	48d2983a 	sll	r9,r9,r3
   935d4:	19000804 	addi	r4,r3,32
   935d8:	18d1883a 	add	r8,r3,r3
   935dc:	2109883a 	add	r4,r4,r4
   935e0:	4211883a 	add	r8,r8,r8
   935e4:	2109883a 	add	r4,r4,r4
   935e8:	1109883a 	add	r4,r2,r4
   935ec:	1211883a 	add	r8,r2,r8
   935f0:	5254b03a 	or	r10,r10,r9
   935f4:	21c02215 	stw	r7,136(r4)
   935f8:	41802215 	stw	r6,136(r8)
   935fc:	12806215 	stw	r10,392(r2)
   93600:	01000084 	movi	r4,2
   93604:	893fe31e 	bne	r17,r4,93594 <__register_exitproc+0x9c>
   93608:	11006317 	ldw	r4,396(r2)
   9360c:	2252b03a 	or	r9,r4,r9
   93610:	12406315 	stw	r9,396(r2)
   93614:	003fdf06 	br	93594 <__register_exitproc+0x9c>
   93618:	008002f4 	movhi	r2,11
   9361c:	10923904 	addi	r2,r2,18660
   93620:	80805215 	stw	r2,328(r16)
   93624:	003fbe06 	br	93520 <__register_exitproc+0x28>

00093628 <__call_exitprocs>:
   93628:	008002f4 	movhi	r2,11
   9362c:	10844e04 	addi	r2,r2,4408
   93630:	10800017 	ldw	r2,0(r2)
   93634:	defff304 	addi	sp,sp,-52
   93638:	df000b15 	stw	fp,44(sp)
   9363c:	d8800015 	stw	r2,0(sp)
   93640:	10805204 	addi	r2,r2,328
   93644:	dd400815 	stw	r21,32(sp)
   93648:	dfc00c15 	stw	ra,48(sp)
   9364c:	ddc00a15 	stw	r23,40(sp)
   93650:	dd800915 	stw	r22,36(sp)
   93654:	dd000715 	stw	r20,28(sp)
   93658:	dcc00615 	stw	r19,24(sp)
   9365c:	dc800515 	stw	r18,20(sp)
   93660:	dc400415 	stw	r17,16(sp)
   93664:	dc000315 	stw	r16,12(sp)
   93668:	d9000115 	stw	r4,4(sp)
   9366c:	2839883a 	mov	fp,r5
   93670:	d8800215 	stw	r2,8(sp)
   93674:	057fffc4 	movi	r21,-1
   93678:	d8800017 	ldw	r2,0(sp)
   9367c:	ddc00217 	ldw	r23,8(sp)
   93680:	14805217 	ldw	r18,328(r2)
   93684:	90001726 	beq	r18,zero,936e4 <__call_exitprocs+0xbc>
   93688:	94400117 	ldw	r17,4(r18)
   9368c:	8c3fffc4 	addi	r16,r17,-1
   93690:	80001116 	blt	r16,zero,936d8 <__call_exitprocs+0xb0>
   93694:	8c400044 	addi	r17,r17,1
   93698:	8427883a 	add	r19,r16,r16
   9369c:	8c63883a 	add	r17,r17,r17
   936a0:	95802204 	addi	r22,r18,136
   936a4:	9ce7883a 	add	r19,r19,r19
   936a8:	8c63883a 	add	r17,r17,r17
   936ac:	b4e7883a 	add	r19,r22,r19
   936b0:	9463883a 	add	r17,r18,r17
   936b4:	e0001726 	beq	fp,zero,93714 <__call_exitprocs+0xec>
   936b8:	8c87c83a 	sub	r3,r17,r18
   936bc:	b0c7883a 	add	r3,r22,r3
   936c0:	18c01e17 	ldw	r3,120(r3)
   936c4:	1f001326 	beq	r3,fp,93714 <__call_exitprocs+0xec>
   936c8:	843fffc4 	addi	r16,r16,-1
   936cc:	9cffff04 	addi	r19,r19,-4
   936d0:	8c7fff04 	addi	r17,r17,-4
   936d4:	857ff71e 	bne	r16,r21,936b4 <__call_exitprocs+0x8c>
   936d8:	00800274 	movhi	r2,9
   936dc:	10a23b04 	addi	r2,r2,-30484
   936e0:	10002a1e 	bne	r2,zero,9378c <__call_exitprocs+0x164>
   936e4:	dfc00c17 	ldw	ra,48(sp)
   936e8:	df000b17 	ldw	fp,44(sp)
   936ec:	ddc00a17 	ldw	r23,40(sp)
   936f0:	dd800917 	ldw	r22,36(sp)
   936f4:	dd400817 	ldw	r21,32(sp)
   936f8:	dd000717 	ldw	r20,28(sp)
   936fc:	dcc00617 	ldw	r19,24(sp)
   93700:	dc800517 	ldw	r18,20(sp)
   93704:	dc400417 	ldw	r17,16(sp)
   93708:	dc000317 	ldw	r16,12(sp)
   9370c:	dec00d04 	addi	sp,sp,52
   93710:	f800283a 	ret
   93714:	91000117 	ldw	r4,4(r18)
   93718:	88c00017 	ldw	r3,0(r17)
   9371c:	213fffc4 	addi	r4,r4,-1
   93720:	24001526 	beq	r4,r16,93778 <__call_exitprocs+0x150>
   93724:	88000015 	stw	zero,0(r17)
   93728:	183fe726 	beq	r3,zero,936c8 <__call_exitprocs+0xa0>
   9372c:	00800044 	movi	r2,1
   93730:	1408983a 	sll	r4,r2,r16
   93734:	91406217 	ldw	r5,392(r18)
   93738:	95000117 	ldw	r20,4(r18)
   9373c:	214a703a 	and	r5,r4,r5
   93740:	28000b26 	beq	r5,zero,93770 <__call_exitprocs+0x148>
   93744:	91406317 	ldw	r5,396(r18)
   93748:	2148703a 	and	r4,r4,r5
   9374c:	20000c1e 	bne	r4,zero,93780 <__call_exitprocs+0x158>
   93750:	99400017 	ldw	r5,0(r19)
   93754:	d9000117 	ldw	r4,4(sp)
   93758:	183ee83a 	callr	r3
   9375c:	90c00117 	ldw	r3,4(r18)
   93760:	1d3fc51e 	bne	r3,r20,93678 <__call_exitprocs+0x50>
   93764:	b8c00017 	ldw	r3,0(r23)
   93768:	1cbfd726 	beq	r3,r18,936c8 <__call_exitprocs+0xa0>
   9376c:	003fc206 	br	93678 <__call_exitprocs+0x50>
   93770:	183ee83a 	callr	r3
   93774:	003ff906 	br	9375c <__call_exitprocs+0x134>
   93778:	94000115 	stw	r16,4(r18)
   9377c:	003fea06 	br	93728 <__call_exitprocs+0x100>
   93780:	99000017 	ldw	r4,0(r19)
   93784:	183ee83a 	callr	r3
   93788:	003ff406 	br	9375c <__call_exitprocs+0x134>
   9378c:	90c00117 	ldw	r3,4(r18)
   93790:	1800071e 	bne	r3,zero,937b0 <__call_exitprocs+0x188>
   93794:	90c00017 	ldw	r3,0(r18)
   93798:	18000926 	beq	r3,zero,937c0 <__call_exitprocs+0x198>
   9379c:	9009883a 	mov	r4,r18
   937a0:	b8c00015 	stw	r3,0(r23)
   937a4:	00888ec0 	call	888ec <free>
   937a8:	bc800017 	ldw	r18,0(r23)
   937ac:	003fb506 	br	93684 <__call_exitprocs+0x5c>
   937b0:	90c00017 	ldw	r3,0(r18)
   937b4:	902f883a 	mov	r23,r18
   937b8:	1825883a 	mov	r18,r3
   937bc:	003fb106 	br	93684 <__call_exitprocs+0x5c>
   937c0:	0007883a 	mov	r3,zero
   937c4:	003ffb06 	br	937b4 <__call_exitprocs+0x18c>

000937c8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   937c8:	defffc04 	addi	sp,sp,-16
   937cc:	df000315 	stw	fp,12(sp)
   937d0:	df000304 	addi	fp,sp,12
   937d4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   937d8:	0001883a 	nop
   937dc:	e0bfff17 	ldw	r2,-4(fp)
   937e0:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
   937e4:	e0bffd17 	ldw	r2,-12(fp)
   937e8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   937ec:	e0bffe17 	ldw	r2,-8(fp)
   937f0:	10000226 	beq	r2,zero,937fc <_exit+0x34>
    ALT_SIM_FAIL();
   937f4:	002af070 	cmpltui	zero,zero,43969
   937f8:	00000106 	br	93800 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
   937fc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   93800:	003fff06 	br	93800 <_exit+0x38>
